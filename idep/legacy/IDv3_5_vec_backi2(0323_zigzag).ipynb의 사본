{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"6rmQpzEGXfCw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1647998718656,"user_tz":-540,"elapsed":36409,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"8908f625-c094-4965-e0e5-6d7b6b8ef7a1"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","import os, sys\n","\n","current_path = '/content/drive/My Drive/Colab Notebooks/JnQ/'\n","\n","os.chdir(current_path)\n","\n","strat_pkg = 'IDE'\n","\n","mpl_finance_path = '/content/drive/My Drive/Colab Notebooks/JnQ/mpl_finance'\n","\n","if mpl_finance_path not in sys.path:\n","\n","  try:\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ')\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ/{}'.format(strat_pkg))\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ/funcs')\n","    sys.path.insert(0, mpl_finance_path)\n","    \n","  except Exception as e:\n","    print(e)"]},{"cell_type":"markdown","metadata":{"id":"8uqYv5StTazo"},"source":["# requirements"]},{"cell_type":"code","source":["!pip install zigzag"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cHh06jkbYOXq","executionInfo":{"status":"ok","timestamp":1647998754768,"user_tz":-540,"elapsed":9549,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"270d7002-b6b1-4092-8026-0e794d653424"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting zigzag\n","  Downloading ZigZag-0.2.2.tar.gz (126 kB)\n","\u001b[?25l\r\u001b[K     |██▋                             | 10 kB 30.4 MB/s eta 0:00:01\r\u001b[K     |█████▏                          | 20 kB 32.9 MB/s eta 0:00:01\r\u001b[K     |███████▊                        | 30 kB 35.9 MB/s eta 0:00:01\r\u001b[K     |██████████▍                     | 40 kB 34.8 MB/s eta 0:00:01\r\u001b[K     |█████████████                   | 51 kB 37.4 MB/s eta 0:00:01\r\u001b[K     |███████████████▌                | 61 kB 41.0 MB/s eta 0:00:01\r\u001b[K     |██████████████████▏             | 71 kB 31.6 MB/s eta 0:00:01\r\u001b[K     |████████████████████▊           | 81 kB 32.3 MB/s eta 0:00:01\r\u001b[K     |███████████████████████▎        | 92 kB 34.7 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▉      | 102 kB 34.9 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▌   | 112 kB 34.9 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████ | 122 kB 34.9 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 126 kB 34.9 MB/s \n","\u001b[?25hBuilding wheels for collected packages: zigzag\n","  Building wheel for zigzag (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for zigzag: filename=ZigZag-0.2.2-cp37-cp37m-linux_x86_64.whl size=443753 sha256=b1ceb32d0a7d3d8153cd5bef5658a9fc33f3ac295a3331e7efb785abba349c00\n","  Stored in directory: /root/.cache/pip/wheels/cc/74/73/79cdb32dd48bcf66f9fcb3960a84d0f6a6cd763938bab30041\n","Successfully built zigzag\n","Installing collected packages: zigzag\n","Successfully installed zigzag-0.2.2\n"]}]},{"cell_type":"code","source":["from zigzag import *"],"metadata":{"id":"Sj22IyPlYW8Q","executionInfo":{"status":"ok","timestamp":1647998768607,"user_tz":-540,"elapsed":5,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","execution_count":2,"metadata":{"id":"9qGt60DKTZmf","executionInfo":{"status":"ok","timestamp":1647998745223,"user_tz":-540,"elapsed":22771,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"outputs":[],"source":["# !pip install findiff\n","# import nvstrings, nvcategory, cudf\n","# import cuml\n","# import cudf\n","\n","import os\n","from funcs.funcs_idep import *\n","from funcs.funcs_duration_v2 import *\n","from funcs.funcs_plot_check import *\n","from funcs.funcs_pairing import *\n","# from funcs.funcs_ide import *\n","# from funcs.funcs_indicator_candlescore import *\n","from funcs.funcs_indicator import *\n","from funcs.funcs_trader import *\n","from ast import literal_eval\n","import logging\n","import importlib\n","\n","import mpl_finance as mf\n","import matplotlib.pyplot as plt\n","from matplotlib import gridspec\n","# from tqdm.notebook import tqdm\n","\n","import IPython\n","import IPython.display\n","\n","import numpy as np\n","# import jax.numpy as np\n","import pandas as pd\n","# import seaborn as sns\n","# import tensorflow as tf\n","from scipy import stats, signal\n","\n","import pickle\n","import shutil\n","import json\n","from easydict import EasyDict\n","import copy\n","\n","import datetime\n","from datetime import datetime\n","import random\n","import time\n","# import warnings\n","\n","# warnings.simplefilter(\"ignore\", category=RuntimeWarning)\n","\n","np.seterr(invalid=\"ignore\")\n","np.set_printoptions(suppress=True)\n","np.set_printoptions(linewidth=2000) \n","\n","pd.set_option('mode.chained_assignment',  None)\n","\n","pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)"]},{"cell_type":"markdown","metadata":{"id":"Ic1mfmwWCIBu"},"source":["# makeset - with to_htf dataframes"]},{"cell_type":"markdown","metadata":{"id":"AUSBU7T8Suzi"},"source":["## sync_check_make"]},{"cell_type":"code","source":["def sd_dc(df, period1, period2, ltf_df=None):\n","    assert period1 <= period2, \"assert period1 <= period2\"\n","    donchian_channel_v2(df, period1)\n","    donchian_channel_v2(df, period2)\n","    itv = pd.infer_freq(df.index)\n","    if itv != 'T':\n","      assert ltf_df is not None, \"assert ltf_df is not None\"\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, df, [-4, -3, -2, -1]), how='inner')\n","    else:\n","      ltf_df = df\n","\n","    ltf_df['short_base_{}'.format(itv)] = (ltf_df['dc_lower_{}{}'.format(itv, period1)].to_numpy() + ltf_df['dc_upper_{}{}'.format(itv, period2)].to_numpy()) / 2\n","    ltf_df['long_base_{}'.format(itv)] = (ltf_df['dc_upper_{}{}'.format(itv, period1)].to_numpy() + ltf_df['dc_lower_{}{}'.format(itv, period2)].to_numpy()) / 2\n","\n","    return ltf_df\n","\n","def donchian_channel_v2(df, period):\n","  itv = pd.infer_freq(df.index)\n","  df['dc_upper_{}{}'.format(itv, period)] = df['high'].rolling(period).max()\n","  df['dc_lower_{}{}'.format(itv, period)] = df['low'].rolling(period).min()\n","\n","  return"],"metadata":{"id":"Xkb_26IAFffi"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QmhLikYlSuzi"},"outputs":[],"source":["def sync_check_make(df):\n","\n","    make_itv_list = ['3T', '5T', '15T', '30T', 'H', '4H', 'D']\n","    offset_list = ['1h', '1h', '1h', '1h', '1h', '1h', '9h']\n","\n","    assert len(make_itv_list) == len(offset_list), \"length of itv & offset_list should be equal\"\n","        \n","    htf_df_list = [to_htf(df, itv_=itv_, offset=offset_) for itv_, offset_ in zip(make_itv_list, offset_list)]\n","\n","    df_3T, df_5T, df_15T, df_30T, df_H, df_4H, df_D = htf_df_list\n","\n","    for htf_df in htf_df_list:\n","      print(\"{} -> \".format(pd.infer_freq(htf_df.index)), htf_df.tail(1))\n","\n","    # heikinashi_v2(res_df_)\n","    # h_candle_v3(res_df, '5T')\n","\n","    # --------------- sd_dc --------------- #\n","    df = sd_dc(df, 20, 40)\n","    df = sd_dc(df_5T, 20, 40, df)\n","    df = sd_dc(df_H, 20, 40, df)\n","\n","    print(\"sd_dc phase done\")\n","\n","    # --------------- normalize data --------------- #\n","    # lb_period = 15\n","    # target_col = 'close_{}'.format(lb_period)\n","    # target_data = df['close'].diff(lb_period).to_numpy()\n","    # norm_data(df, target_data, target_col)    \n","    # print(\"normalize data phase done !\")\n","\n","    # --------------- lucid sar --------------- #\n","    # lucid_sar_v2(df)\n","    # lucid_sar_v2(df_3T)\n","    # df = df.join(to_lower_tf_v2(df, df_3T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_5T)\n","    # df = df.join(to_lower_tf_v2(df, df_5T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_15T)\n","    # df = df.join(to_lower_tf_v2(df, df_15T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_30T)\n","    # df = df.join(to_lower_tf_v2(df, df_30T, [-2, -1]), how='inner')       \n","\n","    # print(\"sar phase done\")\n","\n","    # --------------- supertrend --------------- #\n","    # df = st_price_line(df, df_3T, '3m')\n","    # df = st_price_line(df, df_5T, '5m')\n","    # df = st_price_line(df, df_15T, '15m')\n","    # df = st_price_line(df, df_30T, '30m')\n","    # df = st_price_line(df, df_H, '1h')\n","    # df = st_price_line(df, df_4H, '4h')\n","\n","    # print(\"supertrend phase done\")\n","\n","    # --------------- rsi --------------- #  \n","    # df['rsi_1m'] = rsi(df, 14)    \n","    # df_5T['rsi_5m'] = rsi(df_5T, 14)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1]), columns=['rsi_5m']))\n","    \n","    # print(\"rsi phase done\")\n","\n","\n","    # --------------- cci --------------- #  \n","    # df['cci_1m'] = cci(df, 20)\n","\n","    # print(\"cci phase done\")\n","\n","    # --------------- ema --------------- #      \n","    # df_5T['ema_5m'] = ema(df_5T['close'], 195)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1]), columns=['ema_5m']))\n","    \n","    # print(\"ema phase done\")\n","    \n","    # # --------------- bband --------------- #  \n","    # df = bb_width_v2(df, period, multiple)\n","\n","    # print(\"bband phase done\")\n","\n","    # --------------- cbline --------------- #    \n","    # df_3T['cloud_bline_3m'] = cloud_bline(df_3T, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_3T, [-1]), columns=['cloud_bline_3m']))\n","    # df_5T['cloud_bline_5m'] = cloud_bline(df_5T, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1]), columns=['cloud_bline_5m']))\n","    # df_15T['cloud_bline_15m'] = cloud_bline(df_15T, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_15T, [-1]), columns=['cloud_bline_15m']))\n","    # df_30T['cloud_bline_30m'] = cloud_bline(df_30T, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_30T, [-1]), columns=['cloud_bline_30m']))\n","    # df_H['cloud_bline_1h'] = cloud_bline(df_H, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_H, [-1]), columns=['cloud_bline_1h']))\n","    # df_4H['cloud_bline_4h'] = cloud_bline(df_4H, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_4H, [-1]), columns=['cloud_bline_4h']))\n","\n","    # print(\"cbline phase done\")\n","    \n","    \n","    # --------------- stochastic --------------- #\n","    # df['stoch_1m'] = stoch(df, 13, 3, 3)\n","\n","    # df_5T['stoch'] = stoch(df_5T, 13, 3, 3)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","    # print(\"stoch phase done\")\n","\n","\n","    return df\n"]},{"cell_type":"markdown","metadata":{"id":"mEKyVbHWSuzi"},"source":["## make & save res_df (concat 생각하면, timeindex sync 맞춰야함)"]},{"cell_type":"markdown","metadata":{"id":"VdukVo5-Suzj"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11,"status":"error","timestamp":1636201718856,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"khKb9nhlSuzj","outputId":"02bf2c60-f298-4fe9-e6bb-78230ac1348c"},"outputs":[{"ename":"NameError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-5-ee034491b257>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0ma_day\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m3600\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m24\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtqdm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m   \u001b[0mkeys\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mfile_list\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'file_list' is not defined"]}],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  if '2021-07-01'.upper() not in file_list[i]:\n","  # if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    excel_name = key.replace(\".xlsx\", \"_st1h_backi2.xlsx\")\n","    excel_path = save_path + excel_name\n","\n","    if excel_name in exist_list:\n","      print(excel_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m 마지막 timeindex 의 date 기준, 08:59:59.999000 를 last timestamp 로 설정\n","      #      2. 시작 timestamp 는 모든 tf 의 가장 최근 시작 index,\n","      #       a. 1m 의 시작 timeindex 는 최소, htf 의 시작 timeindex 보다 interval 만큼 앞서야함\n","      #         i. 따라서 1m open_index, latest_open_index + 1d 를 하면 댐\n","      #           1. timestamp 으로 변환후 1day 를 더하고 datetime 으로 변환\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","    latest_open_index = sorted(open_indexes)[-1]\n","    \n","    open_ts = datetime.timestamp(latest_open_index)\n","    latest_open_index_1m = datetime.fromtimestamp(open_ts + a_day)\n","\n","    #   str 로 만들어 접근하면 불가함  #\n","    end_index = pd.to_datetime(str(df.index[-1]).split(\" \")[0] + \" 08:59:59.999000\")\n","    # break\n","\n","    sliced_df = df.loc[latest_open_index_1m:end_index] # to_lower_tf 의 기준 ltf\n","    sliced_second_df = second_df.loc[latest_open_index:end_index]\n","    sliced_third_df = third_df.loc[latest_open_index:end_index]\n","    sliced_fourth_df = fourth_df.loc[latest_open_index:end_index]\n","    sliced_fifth_df = fifth_df.loc[latest_open_index:end_index]\n","\n","    print(\"sliced index\")\n","    print(sliced_df.index[[0, -1]])\n","    print(sliced_second_df.index[[0, -1]])\n","    print(sliced_third_df.index[[0, -1]])\n","    print(sliced_fourth_df.index[[0, -1]])\n","    print(sliced_fifth_df.index[[0, -1]])\n","\n","    try:\n","      sliced_sixth_df = sixth_df.loc[latest_open_index:end_index]\n","      sliced_seventh_df = seventh_df.loc[latest_open_index:end_index]\n","\n","      print(sliced_sixth_df.index[[0, -1]])\n","      print(sliced_seventh_df.index[[0, -1]])\n","\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df, sliced_sixth_df, sliced_seventh_df)\n","    \n","    except:\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df)\n","\n","\n","\n","    res_df.to_excel(excel_path)\n","    print(excel_name, \"saved succesfully !\")"]},{"cell_type":"markdown","metadata":{"id":"Bw5JibDKSuzj"},"source":["### xlsx to feather"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":355,"referenced_widgets":["be2b848dbcb14a079a2b7bd605af6435"]},"id":"VA-_gcA7Suzj","outputId":"f6f3b55d-ec2c-4b2c-d62e-3de7c0384dc4"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"be2b848dbcb14a079a2b7bd605af6435","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/156 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["DatetimeIndex(['2021-06-28 00:00:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:02:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:04:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:14:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:29:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-09-14 03:59:59.999000', '2021-11-15 14:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-03-10 20:59:59.999000', '2021-11-15 16:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","\n","xlsx converted to feather !\n","DatetimeIndex(['2021-06-28 00:00:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:02:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:04:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:14:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:29:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-09-14 03:59:59.999000', '2021-11-15 14:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-03-10 20:59:59.999000', '2021-11-15 16:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","\n","xlsx converted to feather !\n"]}],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  # if '2021-07-01'.upper() not in file_list[i]:\n","  if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    feather_name = key.replace(\".xlsx\", \".ftr\")\n","    # feather_path = save_path + feather_name\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m 마지막 timeindex 의 date 기준, 08:59:59.999000 를 last timestamp 로 설정\n","      #      2. 시작 timestamp 는 모든 tf 의 가장 최근 시작 index,\n","      #       a. 1m 의 시작 timeindex 는 최소, htf 의 시작 timeindex 보다 interval 만큼 앞서야함\n","      #         i. 따라서 1m open_index, latest_open_index + 1d 를 하면 댐\n","      #           1. timestamp 으로 변환후 1day 를 더하고 datetime 으로 변환\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","\n","    df.reset_index().to_feather(date_path + feather_name, compression='lz4')\n","    second_df.reset_index().to_feather(date_path2 + feather_name, compression='lz4')\n","    third_df.reset_index().to_feather(date_path3 + feather_name, compression='lz4')\n","    fourth_df.reset_index().to_feather(date_path4 + feather_name, compression='lz4')\n","    fifth_df.reset_index().to_feather(date_path5 + feather_name, compression='lz4')\n","    sixth_df.reset_index().to_feather(date_path6 + feather_name, compression='lz4')\n","    seventh_df.reset_index().to_feather(date_path7 + feather_name, compression='lz4')\n","\n","    print(\"xlsx converted to feather !\")\n","    "]},{"cell_type":"markdown","metadata":{"id":"Pe0QpnORSuzk"},"source":["### add itv_name to ftr"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":223,"referenced_widgets":["e3225655da874b8d89cc8b2a381b3fb6"]},"executionInfo":{"elapsed":43664,"status":"ok","timestamp":1638246331122,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"M-gl30KxSuzk","outputId":"1cfcb580-8d25-4bd0-fdd0-213640779ce2"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"e3225655da874b8d89cc8b2a381b3fb6","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/175 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 BTCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 BCHUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 XRPUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 EOSUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 LTCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ETCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 LINKUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 XLMUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ADAUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ETHUSDT_1m.ftr\n"]}],"source":["save_path = './candlestick_concated/res_df/'\n","\n","# dir_path = \"bbdc3m_backi2\"\n","# date = '2021-10-10'\n","date = '2021-07-01'\n","\n","db_path = './candlestick_concated/database_bn/non_cum/%s/' % date\n","os.makedirs(os.path.join(db_path), exist_ok=True)\n","\n","# exist_list = os.listdir(os.path.join(save_path, dir_path))\n","# break\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","        \n","    df = shutil.copy(date_path + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n","    second_df = shutil.copy(date_path2 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval2))\n","    third_df = shutil.copy(date_path3 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval3))\n","    fourth_df = shutil.copy(date_path4 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval4))\n","    fifth_df = shutil.copy(date_path5 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval5))\n","    sixth_df = shutil.copy(date_path6 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval6))\n","    seventh_df = shutil.copy(date_path7 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval7))\n","\n","    print(\"copied to\" + db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n"]},{"cell_type":"markdown","metadata":{"id":"4oZ1ohTtSuzk"},"source":["### feather ver. (database to res_df)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":448,"referenced_widgets":["15a8f265417c47d88bf5b1907353afa8","4f4c5fba8f1d4543a46d6dd7e658b7b3","2d4fae08e5364faf83b0bcdc8e6ece4c","0f94b5763ea344adbb20cf3517a25d2f","e5594180fccb4d2787579ee6034cd6ab","af7a8b3e0365404ea9de8bea08d1a4a6","4f9b787786494e79959bc49b6da4ff4d","06f4ecc65be347ac80deee1965545f27","f8462155d04e4c8da2e4c26f02213bb4","18817cdc20574020976bc2f2c6acc6b2","fefe35e08d734a20aa38986f42f27b13"]},"executionInfo":{"elapsed":239284,"status":"ok","timestamp":1642739615683,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"vgVHpnUsSuzk","outputId":"6224eedf-c127-4d18-f095-3a543cd3f1f8"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"15a8f265417c47d88bf5b1907353afa8","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/7 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["3T ->                          open     high      low    close\n","index                                                  \n","2022-01-10 15:18:00  3163.02  3164.29  3162.41  3164.28\n","5T ->                          open     high      low    close\n","index                                                  \n","2022-01-10 15:15:00  3160.51  3164.29  3159.01  3164.28\n","15T ->                          open     high      low    close\n","index                                                  \n","2022-01-10 15:15:00  3160.51  3164.29  3159.01  3164.28\n","30T ->                         open     high      low    close\n","index                                                 \n","2022-01-10 15:00:00  3171.7  3173.11  3156.02  3164.28\n","H ->                         open     high      low    close\n","index                                                 \n","2022-01-10 15:00:00  3171.7  3173.11  3156.02  3164.28\n","4H ->                         open     high      low    close\n","index                                                 \n","2022-01-10 13:00:00  3153.0  3179.16  3149.95  3164.28\n","D ->                          open     high      low    close\n","index                                                  \n","2022-01-10 09:00:00  3149.99  3179.16  3125.88  3164.28\n","supertrend phase done\n","./candlestick_concated/res_df/st3m_backi2/noncat/cum/2022-01-10/2022-01-10 ETHUSDT.ftr saved succesfully !\n"]}],"source":["# db_path = './candlestick_concated/database_ub/' # upbit\n","db_path = './candlestick_concated/database_bn/'   # binance\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","save_dir_path = \"bb1d_backi2\"\n","date = '2022-02-17'\n","\n","# concat_path = 'noncat' # 새로운 cols 를 기존 cum/concat 에 붙이려는 경우\n","concat_path = 'concat'\n","cum_path = \"cum\"\n","# cum_path = \"non_cum\"  # non_cum 으로 진행하는 경우, row concat 용도이기 때문에 noncat -> concat 으로 변경 (base cols 를 모두 담고 있음)\n","\n","load_path = os.path.join(db_path, cum_path, date)\n","save_path = os.path.join(save_path, save_dir_path, concat_path, cum_path, date)\n","\n","os.makedirs(save_path, exist_ok=True)\n","\n","file_list = os.listdir(load_path)\n","exist_list = os.listdir(save_path)\n","# break\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","\n","    if \"_1m\" not in key:\n","      continue\n","\n","    # feather_name = key.replace(\".ftr\", \"_%.ftr\" % save_dir_path)\n","    feather_name = key.replace(\"_1m\", \"\")\n","    feather_path = os.path.join(save_path, feather_name)\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    df = pd.read_feather(os.path.join(load_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","    res_df = sync_check_make(df)\n","\n","    res_df.reset_index().to_feather(feather_path, compression='lz4')\n","    print(feather_path, \"saved succesfully !\")"]},{"cell_type":"markdown","source":["#### just add col to loaded df"],"metadata":{"id":"YxCPUzoyidwH"}},{"cell_type":"code","source":["res_df_ = sync_check_make(res_df_)"],"metadata":{"id":"odqVwQHpYo1M","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1647309648666,"user_tz":-540,"elapsed":3069,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"16f3411b-c1a2-41c0-9ce5-da6d1e3e648d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["3T ->                          open     high      low    close\n","index                                                  \n","2022-02-17 10:27:00  3148.85  3150.08  3146.38  3146.76\n","5T ->                          open     high      low    close\n","index                                                  \n","2022-02-17 10:25:00  3146.85  3150.08  3145.44  3146.76\n","15T ->                          open    high      low    close\n","index                                                 \n","2022-02-17 10:15:00  3143.99  3151.0  3139.14  3146.76\n","30T ->                         open     high      low    close\n","index                                                 \n","2022-02-17 10:00:00  3148.8  3158.68  3139.14  3146.76\n","H ->                         open     high      low    close\n","index                                                 \n","2022-02-17 10:00:00  3148.8  3158.68  3139.14  3146.76\n","4H ->                         open     high     low    close\n","index                                                \n","2022-02-17 09:00:00  3121.8  3158.68  3120.0  3146.76\n","D ->                         open     high     low    close\n","index                                                \n","2022-02-17 09:00:00  3121.8  3158.68  3120.0  3146.76\n","sd_dc phase done\n"]}]},{"cell_type":"code","source":["res_df_.tail().iloc[:, -10:]"],"metadata":{"id":"3SKglsQCj5_x","colab":{"base_uri":"https://localhost:8080/","height":237},"executionInfo":{"status":"ok","timestamp":1647309648667,"user_tz":-540,"elapsed":12,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"170a8e07-9a85-4b27-8043-4ef6110b2cd6"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                         dc_upper_5T40  dc_lower_5T40  short_base_5T  long_base_5T  dc_upper_H20  dc_lower_H20  dc_upper_H40  dc_lower_H40  short_base_H  long_base_H\n","index                                                                                                                                                                \n","2022-02-17 10:25:59.999        3158.68        3114.98        3136.83       3136.83       3186.79       3040.42        3198.0       3040.42       3119.21     3113.605\n","2022-02-17 10:26:59.999        3158.68        3114.98        3136.83       3136.83       3186.79       3040.42        3198.0       3040.42       3119.21     3113.605\n","2022-02-17 10:27:59.999        3158.68        3114.98        3136.83       3136.83       3186.79       3040.42        3198.0       3040.42       3119.21     3113.605\n","2022-02-17 10:28:59.999        3158.68        3114.98        3136.83       3136.83       3186.79       3040.42        3198.0       3040.42       3119.21     3113.605\n","2022-02-17 10:29:59.999        3158.68        3114.98        3136.83       3136.83       3186.79       3040.42        3198.0       3040.42       3119.21     3113.605"],"text/html":["\n","  <div id=\"df-d0fec390-9c06-4700-9c9f-9d1d4a85347e\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>dc_upper_5T40</th>\n","      <th>dc_lower_5T40</th>\n","      <th>short_base_5T</th>\n","      <th>long_base_5T</th>\n","      <th>dc_upper_H20</th>\n","      <th>dc_lower_H20</th>\n","      <th>dc_upper_H40</th>\n","      <th>dc_lower_H40</th>\n","      <th>short_base_H</th>\n","      <th>long_base_H</th>\n","    </tr>\n","    <tr>\n","      <th>index</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2022-02-17 10:25:59.999</th>\n","      <td>3158.68</td>\n","      <td>3114.98</td>\n","      <td>3136.83</td>\n","      <td>3136.83</td>\n","      <td>3186.79</td>\n","      <td>3040.42</td>\n","      <td>3198.0</td>\n","      <td>3040.42</td>\n","      <td>3119.21</td>\n","      <td>3113.605</td>\n","    </tr>\n","    <tr>\n","      <th>2022-02-17 10:26:59.999</th>\n","      <td>3158.68</td>\n","      <td>3114.98</td>\n","      <td>3136.83</td>\n","      <td>3136.83</td>\n","      <td>3186.79</td>\n","      <td>3040.42</td>\n","      <td>3198.0</td>\n","      <td>3040.42</td>\n","      <td>3119.21</td>\n","      <td>3113.605</td>\n","    </tr>\n","    <tr>\n","      <th>2022-02-17 10:27:59.999</th>\n","      <td>3158.68</td>\n","      <td>3114.98</td>\n","      <td>3136.83</td>\n","      <td>3136.83</td>\n","      <td>3186.79</td>\n","      <td>3040.42</td>\n","      <td>3198.0</td>\n","      <td>3040.42</td>\n","      <td>3119.21</td>\n","      <td>3113.605</td>\n","    </tr>\n","    <tr>\n","      <th>2022-02-17 10:28:59.999</th>\n","      <td>3158.68</td>\n","      <td>3114.98</td>\n","      <td>3136.83</td>\n","      <td>3136.83</td>\n","      <td>3186.79</td>\n","      <td>3040.42</td>\n","      <td>3198.0</td>\n","      <td>3040.42</td>\n","      <td>3119.21</td>\n","      <td>3113.605</td>\n","    </tr>\n","    <tr>\n","      <th>2022-02-17 10:29:59.999</th>\n","      <td>3158.68</td>\n","      <td>3114.98</td>\n","      <td>3136.83</td>\n","      <td>3136.83</td>\n","      <td>3186.79</td>\n","      <td>3040.42</td>\n","      <td>3198.0</td>\n","      <td>3040.42</td>\n","      <td>3119.21</td>\n","      <td>3113.605</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d0fec390-9c06-4700-9c9f-9d1d4a85347e')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-d0fec390-9c06-4700-9c9f-9d1d4a85347e button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-d0fec390-9c06-4700-9c9f-9d1d4a85347e');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":115}]},{"cell_type":"code","source":["# ------------ save current res_df ------------ #\n","ftr_full_path = os.path.join(ftr_path, key)\n","res_df_.reset_index().to_feather(ftr_full_path, compression='lz4')  # key 잘 확인하고 저장\n","print(ftr_full_path, 'saved !')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XrgJPQRuisCa","executionInfo":{"status":"ok","timestamp":1647309651639,"user_tz":-540,"elapsed":2982,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"f14ebf99-e99a-400a-c7c8-09ea4561f6d0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["./candlestick_concated/res_df/bb1d_backi2/concat/cum/2022-02-17/2022-02-17 ETHUSDT.ftr saved !\n"]}]},{"cell_type":"markdown","metadata":{"id":"E0n53hflJbnp"},"source":["### htf candle check"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":489,"status":"ok","timestamp":1642148504926,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"6xW0yugCWvGz","outputId":"58106ff9-9709-4a62-bca2-1f6795d13322"},"outputs":[{"name":"stdout","output_type":"stream","text":["itv_ : 3T\n","                        open     high      low    close\n","index                                                  \n","2022-01-10 15:06:00  3169.97  3170.22  3159.51  3161.22\n","2022-01-10 15:09:00  3161.22  3163.98  3161.22  3163.82\n","2022-01-10 15:12:00  3163.82  3163.83  3156.02  3160.49\n","2022-01-10 15:15:00  3160.51  3164.29  3159.01  3162.93\n","2022-01-10 15:18:00  3163.02  3164.29  3162.41  3164.28\n","                            open     high      low    close    volume\n","index                                                                \n","2022-01-10 15:08:59.999  3169.97  3170.22  3159.51  3161.22  4241.449\n","2022-01-10 15:11:59.999  3161.22  3163.98  3161.22  3163.82  1143.874\n","2022-01-10 15:14:59.999  3163.82  3163.83  3156.02  3160.49  2135.292\n","2022-01-10 15:17:59.999  3160.51  3164.29  3159.01  3162.93  1011.598\n","2022-01-10 15:20:59.999  3163.02  3164.29  3162.41  3163.82   466.868\n"]}],"source":["itv_list = ['3T', '5T', '15T', '30T', '1H', '4H']\n","comp_df_list = [second_df, third_df, fourth_df, fifth_df, sixth_df, seventh_df]\n","offset_list = ['1h', '2min', '2min', '2min', '2min', '2min']\n","# itv_list = ['4H']\n","# comp_df_list = [seventh_df]\n","\n","slice_len = 100\n","for itv_, comp_df_, offset in zip(itv_list, comp_df_list, offset_list):\n","\n","  print(\"itv_ :\", itv_)\n","\n","  # df = h_candle_v2(df, '3T')\n","  # end_ts = \n","  h_res_df = df.resample(itv_, offset=offset).agg({\n","          'open': 'first',\n","          'high': 'max',\n","          'low': 'min',\n","          'close': 'last'\n","      })\n","\n","  #   앞은 길이가 다르고, 뒤에서부터 잘라서 비교    #\n","  #   last_row 빼고는 동일, 4h 제외\n","  # print(df.tail())\n","  print(h_res_df.tail())\n","  print(comp_df_.tail())\n","  # # print(h_res_df.head())\n","  # # print(second_df.head())\n","\n","  # print(len(h_res_df))\n","  # print(len(second_df))\n","\n","  # print(h_res_df.values[-slice_len:])\n","  # print(second_df.iloc[:, :4].values[-slice_len:])\n","  # print(np.argwhere(h_res_df.values[-slice_len:] != comp_df_.iloc[:, :4].values[-slice_len:]))\n","  # print()\n","  break"]},{"cell_type":"markdown","metadata":{"id":"jTN3M842Suzl"},"source":["## concat & save new res_df"]},{"cell_type":"markdown","metadata":{"id":"MlFkpO1MSuzl"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"U-3QkfbFSuzl"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","dict_name = \"2021-07-01 ETHUSDT_bb15m_backi2_res_dfs.pkl\"\n","\n","#     load with pickle    #\n","with open(save_path + dict_name, 'rb') as f:\n","  saved_res_df_dict = pickle.load(f)\n","\n","print(dict_name, \"loaded !\")\n","res_df_files = os.listdir(save_path)\n","res_df_files.reverse()\n","\n","print(res_df_files)\n","\n","res_df_dict = {}\n","\n","base_postfix = '_bb15m_backi2.xlsx'\n","new_postfix = '_st1h_backi2.xlsx'\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for k_i, key in enumerate(res_df_files):\n","\n","  if '2021-07-01'.upper() not in key:\n","  # if '2021-10-10'.upper() not in key:\n","    continue\n","\n","  # if \"link\".upper() not in key:\n","  # if \"btc\".upper() not in key:\n","  #   continue\n","\n","  if new_postfix not in key:\n","    continue\n","\n","  # if key in \n","\n","  if sample_cnt == max_cnt:\n","    dict_name = \"%s_res_dfs.pkl\" % key.split(\".\")[0]\n","    print(\"dict_name :\", dict_name)\n","\n","  base_df = saved_res_df_dict[key.replace(new_postfix, base_postfix)]\n","  # base_df = pd.read_excel(save_path + key.replace(new_postfix, base_postfix), index_col=0)  \n","  res_df = pd.read_excel(save_path + key, index_col=0)  \n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  droped_new_res_df.head()\n","  # break\n","\n","  # res_df_dict[key] = res_df\n","  res_df_dict[key] = droped_new_res_df\n","  print(key, \"saved to dict !\")\n","\n","  #     save with pickle    #\n","  with open(save_path + dict_name, 'wb') as f:\n","    pickle.dump(res_df_dict, f)\n","\n","  sample_cnt -= 1\n","\n","  if sample_cnt <= 0:\n","    break\n"]},{"cell_type":"markdown","metadata":{"id":"t1E_eAyPSuzm"},"source":["### new col to latest feather (1m_indi. only)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xyI5NrM7Suzm"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","cum_dir = \"cum\"\n","\n","new_dir_path = \"rsi_backi2\"\n","base_dir_path = \"bbdc3m_backi2\"\n","\n","new_date = '2021-11-17'\n","\n","\n","\n","#     load ftr list    #\n","base_save_path = os.path.join(save_path, base_dir_path, \"concat/cum\", new_date)\n","new_save_path = base_save_path.replace(base_dir_path, new_dir_path)\n","\n","#     save to (new) cum dir    #\n","#      1. if dir. not exists, makedir\n","os.makedirs(new_save_path, exist_ok=True)\n","\n","ftr_list = [s for s in os.listdir(base_save_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_save_path, key), columns=None, use_threads=True).set_index(\"index\")\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  droped_new_res_df = sync_check(base_df)\n","\n","  # new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # # new_res_df.head()\n","\n","  # intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  # droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break\n","\n","  droped_new_res_df.reset_index().to_feather(os.path.join(new_save_path, key), compression='lz4')\n","\n","  print(os.path.join(new_save_path, key), \"saved !\")\n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"markdown","metadata":{"id":"nUs4fjVHSuzl"},"source":["### feather ver. (col concat)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2001,"status":"ok","timestamp":1642739652513,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"6cu-Y82iSuzl","outputId":"273507b8-0d33-48b5-d9c5-00547688ef73"},"outputs":[{"name":"stdout","output_type":"stream","text":["['2022-01-10 ETHUSDT.ftr']\n","./candlestick_concated/res_df/st3m_backi2/concat/cum/2022-01-10/2022-01-10 ETHUSDT.ftr saved !\n"]}],"source":["new_dir_path = \"st3m_backi2\"\n","base_dir_path = \"bb1d_backi2\"\n","\n","# new_date = \"2021-11-17\"\n","new_date = \"2022-01-10\"\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","save_path = './candlestick_concated/res_df/'\n","save_path = os.path.join(save_path, new_dir_path, \"concat/cum\", new_date)   \n","# save_path = os.path.join(save_path, new_dir_path, \"concat/non_cum\", new_date)   # row col 하려면 concat 맞음, noncum 사용\n","os.makedirs(save_path, exist_ok=True)\n","\n","\n","#     load ftr list    #\n","# ftr_list = [s for s in os.listdir(os.path.join(save_path, new_dir_path)) if \"ftr\" in s]\n","\n","noncat_path = save_path.replace(\"concat/\", \"noncat/\")\n","ftr_list = [s for s in os.listdir(noncat_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","  try:\n","\n","    #       read from base postfix's directory    #\n","    base_df = pd.read_feather(os.path.join(save_path.replace(new_dir_path, base_dir_path), key), columns=None, use_threads=True).set_index(\"index\")\n","    res_df = pd.read_feather(os.path.join(noncat_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","    # print(base_df.head())\n","    # print(res_df.head())\n","    # break\n","\n","    new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","    # new_res_df.head()\n","\n","    droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","    # droped_new_res_df.head()\n","    # break\n","\n","    droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","    # res_df_dict[key] = res_df\n","    # res_df_dict[key] = droped_new_res_df\n","    print(os.path.join(save_path, key), \"saved !\")\n","  \n","  except Exception as e:\n","    print(\"error occured ! :\", e)\n","  \n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"markdown","metadata":{"id":"WVAKq3i8Suzm"},"source":["### feather ver. (row concat) , database cum 도 호환가능"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7893,"status":"ok","timestamp":1645188189702,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"XG2p9OhhSuzm","outputId":"e67874ba-0710-4f38-966f-5ea7d42403cb"},"outputs":[{"output_type":"stream","name":"stdout","text":["['2022-02-17 ETHUSDT_1m.ftr']\n","                            open     high     low    close  volume\n","index                                                             \n","2019-11-27 16:45:59.999   146.00   146.00   146.0   146.00   0.010\n","2022-02-17 10:29:59.999  3146.86  3147.22  3146.4  3146.76  26.727\n","continuity checked !\n","./candlestick_concated/database_bn/cum/2022-02-17/2022-02-17 ETHUSDT_1m.ftr saved !\n"]}],"source":["save_path = './candlestick_concated/res_df/'        # cols 추가된 cum db 에 new_row's cols 기준으로 합치는 경우\n","save_path = './candlestick_concated/database_bn/'   # ohlcv cum db 만들 경우\n","\n","base_date = '2022-01-10'\n","new_date = '2022-02-17'\n","\n","#     load ftr list    #\n","if \"database\" in save_path:\n","  base_dir_path = \"\"\n","  new_dir_path = \"\"\n","  concat_dir = \"\"\n","else:\n","  base_dir_path = \"sar_backi2\"\n","  new_dir_path = \"bb4h_backi2\"  # dir_path 가 base / new 서로 달라질 수 있어서 분할함\n","  concat_dir = \"concat\"\n","\n","base_date_path = os.path.join(save_path, base_dir_path, concat_dir, \"cum\", base_date)      # 기존 cum db 와 new_date db 를 cum 진행\n","# base_date_path = os.path.join(save_path, base_dir_path, concat_dir, \"non_cum\", base_date)    # non_cum db 와 new_date db 를 cum 진행\n","\n","# new_date_path = os.path.join(save_path, new_dir_path, concat_dir, \"cum\", new_date)      # 상황별로 직접 선택해야할 듯\n","new_date_path = os.path.join(save_path, new_dir_path, concat_dir, \"non_cum\", new_date)\n","\n","\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","save_path = new_date_path.replace(\"non_cum\", \"cum\")   # non_cum 아니여도 무관\n","os.makedirs(save_path, exist_ok=True)   # noncat / concat 두가지 경우 존재가능할 것\n","# os.makedirs(os.path.join(save_path, dir_path, \"noncat/cum\", new_date), exist_ok=True)\n","\n","\n","ftr_list = [s for s in os.listdir(new_date_path) if \"ftr\" in s]\n","exist_list = os.listdir(save_path)\n","print(ftr_list)\n","# break\n","\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:   # date rejection\n","    continue\n","  if '1m' not in key:  # itv rejection\n","    continue\n","\n","  # if key in exist_list:\n","  #   print(key, \"already exist !\")\n","  #   continue\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_date_path, key.replace(new_date, base_date)), columns=None, use_threads=True).set_index(\"index\")   # key 에 new_date 담겨있음\n","  res_df = pd.read_feather(os.path.join(new_date_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break  \n","  \n","  print(droped_new_res_df.iloc[[0, -1]])  \n","\n","  # ------------- verify df continuity directly itv by itv ------------- #\n","  true_continue = True\n","  if \"_\" in key:\n","\n","    interval = key.split(\".\")[0].split(\"_\")[-1] \n","    itv_num = to_itvnum(interval)\n","\n","    # verified_df = consecutive_df(droped_new_res_df, to_itvnum(interval))\n","    # verified_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","    # res_df_dict[key] = res_df\n","    # res_df_dict[key] = droped_new_res_df  \n","\n","    np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","    ideal_ts_gap = 60 * itv_num\n","\n","    for ts_i in range(len(np_idx_ts)):\n","      \n","      if ts_i != 0:\n","        ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","\n","        if ts_gap > ideal_ts_gap or ts_gap < ideal_ts_gap:\n","        # if ts_gap == ideal_ts_gap:\n","          print(droped_new_res_df.index[ts_i - 1])\n","          print(droped_new_res_df.index[ts_i])\n","          # print(ts_gap)\n","          print(\"------------------ unideal ts_gap ------------------\")\n","          true_continue = False\n","\n","    print(\"continuity checked !\")\n","\n","  if true_continue:\n","    droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","  print(os.path.join(save_path, key), \"saved !\")\n","  \n"]},{"cell_type":"markdown","metadata":{"id":"L7l5CTJfSuzn"},"source":["### check continuity"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nGzMGyC3Suzn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1643987442996,"user_tz":-540,"elapsed":5408,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"4fface63-62d9-4e2a-e22d-bdd26f428e0e"},"outputs":[{"output_type":"stream","name":"stdout","text":["                             open    high       low     close   volume\n","index                                                                 \n","2020-09-14 16:00:59.999    3.2002    4.91    3.2002    3.2745  11567.0\n","2022-02-04 23:57:59.999  103.7500  103.75  103.6000  103.6000   6427.0\n","[1.60009926e+09 1.60009932e+09 1.60009938e+09 1.60009944e+09\n"," 1.60009950e+09 1.60009956e+09 1.60009962e+09 1.60009968e+09\n"," 1.60009974e+09 1.60009980e+09]\n"]}],"source":["# print(droped_new_res_df.columns)\n","\n","print(droped_new_res_df.iloc[[0, -1]])\n","\n","np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","\n","print(np_idx_ts[:10])\n","for ts_i in range(len(np_idx_ts)):\n","  \n","  if ts_i != 0:\n","    ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","\n","    if ts_gap > 60 or ts_gap < 60:\n","\n","      print(\"invalid ts_gap found !\")\n","    # if ts_gap == 60:\n","      print(droped_new_res_df.index[ts_i - 1])\n","      print(droped_new_res_df.index[ts_i])\n","      # print(ts_gap)\n","      print()\n"]},{"cell_type":"markdown","metadata":{"id":"x_XGJqBi8Jex"},"source":["### check length of front missing value + middle_data non_missing validity"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":311,"status":"ok","timestamp":1641887318959,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"yRNwqVeAu8X8","outputId":"fb236bde-4527-4bc7-eac4-4bee42532c5a"},"outputs":[{"name":"stdout","output_type":"stream","text":["2.167361111111111\n","38\n"]}],"source":["#       1. new_date 의 시작 timeidx 와 base_date end timeidx 의 최소 days' gap     #\n","#       2. new_date 의 시작 부분 indi. value 는 np.nan 으로 채워질 거기 때문에 계산해야함    #\n","\n","df_count = droped_new_res_df.count()\n","len_missing = df_count.max() - df_count.min()\n","print(len_missing / 1440)\n","\n","#       3. \n","missing_sliced_df = droped_new_res_df.iloc[len_missing:]\n","df_count2 = missing_sliced_df.count()\n","# print(df_count2)\n","print((df_count2.max() - df_count2.min()))    # this value should be zero !\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"AY7E2_hTBsyM"},"outputs":[],"source":["# df_count2.index[df_count2.argmin()]\n","# missing_sliced_df.head(5)\n","\n","stay_missed = np.sum(pd.isnull(missing_sliced_df), axis=0)\n","print(stay_missed)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"p9yqewOw9g33"},"outputs":[],"source":["stay_missed_cols = stay_missed[stay_missed != 0].index\n","\n","for sm_col in stay_missed_cols:\n","  \n","  row_idx = np.argwhere(pd.isnull(missing_sliced_df[sm_col].values))\n","\n","  plt.figure(figsize=(3,3))\n","  plt.plot(row_idx)\n","  plt.ylim(0, len(missing_sliced_df))\n","  plt.title(sm_col)\n","\n","  plt.show()\n"]},{"cell_type":"markdown","source":["## legacy"],"metadata":{"id":"MSUY4nnku3s9"}},{"cell_type":"markdown","source":["### mv files"],"metadata":{"id":"epgS5Dksu-HX"}},{"cell_type":"code","source":["df_path = './candlestick_concated/survey_df_v2'\n","files_ = os.listdir(df_path)"],"metadata":{"id":"aJcVpEdrslA5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dirs = [file_ for file_ in files_ if not file_.endswith('.ftr')]\n","files = [file_ for file_ in files_ if file_.endswith('.ftr')]"],"metadata":{"id":"cEKyEYkotFDy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dirs"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IgM79tcxtPVZ","executionInfo":{"status":"ok","timestamp":1644111921194,"user_tz":-540,"elapsed":4,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"84305b35-eb52-49fc-d5fd-fdbc64cc8679"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['2022-01-10 ETHUSDT', '2022-01-10 ETHUSDT_all', '2022-02-04 SOLUSDT']"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["def move_fn(dir_, file_):\n","  src_path = os.path.join(df_path, file_)\n","  dst_path = os.path.join(df_path, dir_, file_)\n","  shutil.move(src_path, dst_path)\n","  print(\"moved to {}\".format(dst_path))\n","\n","_ = [move_fn('2022-01-10 ETHUSDT_all', file_) for file_ in files if 'eth'.upper() in file_]\n","# sols\n"],"metadata":{"id":"M767iRtwtRQP"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Ci_jUnNTZbm9"},"source":["### load data (old)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":22503,"status":"ok","timestamp":1638246127510,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"_bXyS2yrZYC6","outputId":"b24a8a66-48b1-42b5-aa79-63f5a8542bac"},"outputs":[{"name":"stdout","output_type":"stream","text":["['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr']\n","['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 LTCUSDT.ftr']\n","['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 ETHUSDT.ftr']\n","['2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr']\n","['2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-08-31 SUSHIUSDT.xlsx', '2021-08-31 CVCUSDT.xlsx', '2021-08-31 BTSUSDT.xlsx', '2021-08-31 HOTUSDT.xlsx', '2021-08-31 ZRXUSDT.xlsx', '2021-08-31 QTUMUSDT.xlsx', '2021-08-31 IOTAUSDT.xlsx', '2021-08-31 BTCBUSD.xlsx', '2021-08-31 WAVESUSDT.xlsx', '2021-08-31 ADAUSDT.xlsx', '2021-08-31 LITUSDT.xlsx', '2021-08-31 XTZUSDT.xlsx', '2021-08-31 BNBUSDT.xlsx', '2021-08-31 AKROUSDT.xlsx', '2021-08-31 HNTUSDT.xlsx', '2021-08-31 ETCUSDT.xlsx', '2021-08-31 XMRUSDT.xlsx', '2021-08-31 YFIUSDT.xlsx', '2021-08-31 ETHUSDT.xlsx', '2021-08-31 ALICEUSDT.xlsx', '2021-08-31 ALPHAUSDT.xlsx', '2021-08-31 SFPUSDT.xlsx', '2021-08-31 REEFUSDT.xlsx', '2021-08-31 BATUSDT.xlsx', '2021-08-31 DOGEUSDT.xlsx', '2021-08-31 TRXUSDT.xlsx', '2021-08-31 RLCUSDT.xlsx', '2021-08-31 BTCSTUSDT.xlsx', '2021-08-31 STORJUSDT.xlsx', '2021-08-31 SNXUSDT.xlsx', '2021-08-31 XLMUSDT.xlsx', '2021-08-31 NEOUSDT.xlsx', '2021-08-31 UNFIUSDT.xlsx', '2021-08-31 SANDUSDT.xlsx', '2021-08-31 DASHUSDT.xlsx', '2021-08-31 KAVAUSDT.xlsx', '2021-08-31 RUNEUSDT.xlsx', '2021-08-31 CTKUSDT.xlsx', '2021-08-31 LINKUSDT.xlsx', '2021-08-31 CELRUSDT.xlsx', '2021-08-31 RSRUSDT.xlsx', '2021-08-31 DGBUSDT.xlsx', '2021-08-31 SKLUSDT.xlsx', '2021-08-31 RENUSDT.xlsx', '2021-08-31 TOMOUSDT.xlsx', '2021-08-31 MTLUSDT.xlsx', '2021-08-31 LTCUSDT.xlsx', '2021-08-31 DODOUSDT.xlsx', '2021-08-31 EGLDUSDT.xlsx', '2021-08-31 KSMUSDT.xlsx', '2021-08-31 ONTUSDT.xlsx', '2021-08-31 VETUSDT.xlsx', '2021-08-31 TRBUSDT.xlsx', '2021-08-31 MANAUSDT.xlsx', '2021-08-31 COTIUSDT.xlsx', '2021-08-31 CHRUSDT.xlsx', '2021-08-31 ETHUSDT_210924.xlsx', '2021-08-31 BAKEUSDT.xlsx', '2021-08-31 GRTUSDT.xlsx', '2021-08-31 FLMUSDT.xlsx', '2021-08-31 EOSUSDT.xlsx', '2021-08-31 OGNUSDT.xlsx', '2021-08-31 SCUSDT.xlsx', '2021-08-31 BALUSDT.xlsx', '2021-08-31 STMXUSDT.xlsx', '2021-08-31 BTTUSDT.xlsx', '2021-08-31 LUNAUSDT.xlsx', '2021-08-31 DENTUSDT.xlsx', '2021-08-31 KNCUSDT.xlsx', '2021-08-31 SRMUSDT.xlsx', '2021-08-31 ENJUSDT.xlsx', '2021-08-31 ZENUSDT.xlsx', '2021-08-31 ATOMUSDT.xlsx', '2021-08-31 NEARUSDT.xlsx', '2021-08-31 BCHUSDT.xlsx', '2021-08-31 IOSTUSDT.xlsx', '2021-08-31 HBARUSDT.xlsx', '2021-08-31 ZECUSDT.xlsx', '2021-08-31 1000SHIBUSDT.xlsx', '2021-08-31 TLMUSDT.xlsx', '2021-08-31 BZRXUSDT.xlsx', '2021-08-31 ETHBUSD.xlsx', '2021-08-31 AAVEUSDT.xlsx', '2021-08-31 GTCUSDT.xlsx', '2021-08-31 ALGOUSDT.xlsx', '2021-08-31 ICPUSDT.xlsx', '2021-08-31 BTCUSDT_210924.xlsx', '2021-08-31 LRCUSDT.xlsx', '2021-08-31 AVAXUSDT.xlsx', '2021-08-31 MATICUSDT.xlsx', '2021-08-31 1INCHUSDT.xlsx', '2021-08-31 MKRUSDT.xlsx', '2021-08-31 THETAUSDT.xlsx', '2021-08-31 UNIUSDT.xlsx', '2021-08-31 LINAUSDT.xlsx', '2021-08-31 RVNUSDT.xlsx', '2021-08-31 FILUSDT.xlsx', '2021-08-31 NKNUSDT.xlsx', '2021-08-31 DEFIUSDT.xlsx', '2021-08-31 COMPUSDT.xlsx', '2021-08-31 BTCDOMUSDT.xlsx', '2021-08-31 SOLUSDT.xlsx', '2021-08-31 BTCUSDT.xlsx', '2021-08-31 OMGUSDT.xlsx', '2021-08-31 ICXUSDT.xlsx', '2021-08-31 BLZUSDT.xlsx', '2021-08-31 FTMUSDT.xlsx', '2021-08-31 YFIIUSDT.xlsx', '2021-08-31 KEEPUSDT.xlsx', '2021-08-31 BANDUSDT.xlsx', '2021-08-31 XRPUSDT.xlsx', '2021-08-31 SXPUSDT.xlsx', '2021-08-31 CRVUSDT.xlsx', '2021-08-31 BELUSDT.xlsx', '2021-08-31 DOTUSDT.xlsx', '2021-08-31 XEMUSDT.xlsx', '2021-08-31 ONEUSDT.xlsx', '2021-08-31 ZILUSDT.xlsx', '2021-08-31 AXSUSDT.xlsx', '2021-08-31 OCEANUSDT.xlsx', '2021-08-31 CHZUSDT.xlsx', '2021-08-31 ANKRUSDT.xlsx', '2021-08-31 SUSHIUSDT_res_dfs.pkl', '2021-07-01 ADAUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr']\n","['2021-07-01 BTCUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr']\n","['2021-02-07 BTC.xlsx', '2021-02-07 ETH.xlsx', '2021-02-11 BCHUSDT.xlsx', '2021-02-11 XRPUSDT.xlsx', '2021-02-11 EOSUSDT.xlsx', '2021-02-11 LTCUSDT.xlsx', '2021-02-11 ETCUSDT.xlsx', '2021-02-11 LINKUSDT.xlsx', '2021-02-11 XLMUSDT.xlsx', '2021-02-11 ADAUSDT.xlsx', '2021-02-11 XMRUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr']\n","['2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx']\n"]}],"source":["interval = '1m'\n","date_path = './candlestick_concated/%s/quant_v2/' % interval\n","file_list = os.listdir(date_path)\n","print((file_list))\n","\n","interval2 = '3m'\n","date_path2 = './candlestick_concated/%s/quant_v2/' % interval2\n","file_list2 = os.listdir(date_path2)\n","print((file_list2))\n","\n","interval3 = '5m'\n","date_path3 = './candlestick_concated/%s/quant_v2/' % interval3\n","file_list3 = os.listdir(date_path3)\n","print((file_list3))\n","\n","interval4 = '15m'\n","date_path4 = './candlestick_concated/%s/quant_v2/' % interval4\n","file_list4 = os.listdir(date_path4)\n","print((file_list4))\n","\n","interval5 = '30m'\n","date_path5 = './candlestick_concated/%s/quant_v2/' % interval5\n","file_list5 = os.listdir(date_path5)\n","print((file_list5))\n","\n","interval6 = '1h'\n","date_path6 = './candlestick_concated/%s/quant_v2/' % interval6\n","file_list6 = os.listdir(date_path6)\n","print((file_list6))\n","\n","interval7 = '4h'\n","date_path7 = './candlestick_concated/%s/quant_v2/' % interval7\n","file_list7 = os.listdir(date_path7)\n","print((file_list7))\n","\n","interval8 = '1d'\n","date_path8 = './candlestick_concated/%s/quant_v2/' % interval8\n","file_list8 = os.listdir(date_path8)\n","print((file_list8))"]},{"cell_type":"markdown","metadata":{"id":"M8-EChy0VsDr"},"source":["## cudf"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":414,"status":"ok","timestamp":1638754008241,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"b09qAb1sVtRP","outputId":"3a824202-064a-4544-b791-ffc777bb3f9c"},"outputs":[{"name":"stdout","output_type":"stream","text":["usage: conda [-h] [-V] command ...\n","conda: error: unrecognized arguments: -t=/content/notebooks\n"]}],"source":["# !conda install -c rapidsai-nightly -c nvidia -c numba -c conda-forge \\\n","#     cudf python=3.7 cudatoolkit=11.1 -t=$nb_path"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":413,"status":"ok","timestamp":1638754715310,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"Jnz6i7ZqRnb0","outputId":"207bc57b-a17a-4f67-fb26-24e46e2c6e26"},"outputs":[{"name":"stdout","output_type":"stream","text":["***********************************************************************\n","Woo! Your instance has the right kind of GPU, a Tesla P100-PCIE-16GB!\n","***********************************************************************\n","\n"]}],"source":["# !git clone https://github.com/rapidsai/rapidsai-csp-utils.git\n","!python rapidsai-csp-utils/colab/env-check.py"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4sKA_9Dbg4s2"},"outputs":[],"source":["# This will update the Colab environment and restart the kernel.  Don't run the next cell until you see the session crash.\n","!bash rapidsai-csp-utils/colab/update_gcc.sh\n","import os\n","os._exit(00)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"d1C4pNiBhYHX"},"outputs":[],"source":["# This will install CondaColab.  This will restart your kernel one last time.  Run this cell by itself and only run the next cell once you see the session crash.\n","import condacolab\n","condacolab.install()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":414,"status":"ok","timestamp":1638754863073,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"iGx3ACTvZqck","outputId":"e8379cc4-c325-4fe0-ac46-5fbbd7d38829"},"outputs":[{"name":"stdout","output_type":"stream","text":["✨🍰✨ Everything looks OK!\n"]}],"source":["# you can now run the rest of the cells as normal\n","import condacolab\n","condacolab.check()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oR8s7U8c7C28","outputId":"22be2731-fae1-45fc-f310-e48f60774bb2"},"outputs":[{"name":"stdout","output_type":"stream","text":["Installing RAPIDS Stable 21.10\n","Starting the RAPIDS install on Colab.  This will take about 15 minutes.\n","Collecting package metadata (current_repodata.json): ...working... done\n","Solving environment: ...working... WARNING conda.core.solve:_add_specs(611): pinned spec cudatoolkit=11.1 conflicts with explicit specs.  Overriding pinned spec.\n","failed with initial frozen solve. Retrying with flexible solve.\n","Solving environment: ...working... WARNING conda.core.solve:_add_specs(611): pinned spec cudatoolkit=11.1 conflicts with explicit specs.  Overriding pinned spec.\n","failed with repodata from current_repodata.json, will retry with next repodata source.\n","Collecting package metadata (repodata.json): ...working... done\n"]}],"source":["# Installing RAPIDS is now 'python rapidsai-csp-utils/colab/install_rapids.py <release> <packages>'\n","# The <release> options are 'stable' and 'nightly'.  Leaving it blank or adding any other words will default to stable.\n","# The <packages> option are default blank or 'core'.  By default, we install RAPIDSAI and BlazingSQL.  The 'core' option will install only RAPIDSAI and not include BlazingSQL, \n","!python rapidsai-csp-utils/colab/install_rapids.py stable\n","import os\n","os.environ['NUMBAPRO_NVVM'] = '/usr/local/cuda/nvvm/lib64/libnvvm.so'\n","os.environ['NUMBAPRO_LIBDEVICE'] = '/usr/local/cuda/nvvm/libdevice/'\n","os.environ['CONDA_PREFIX'] = '/usr/local'"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kWsxi4ZpKtGt"},"outputs":[],"source":["import shutil\n","import sys\n","\n","colab_env = \"/usr/lib\"\n","\n","rapids_path = os.path.join(current_path, \"rapidsai-csp-utils/lib\")\n","rapids_libs = os.listdir(rapids_path)\n","print(rapids_libs)\n","# break\n","\n","for lib_ in rapids_libs:\n","  try:\n","    shutil.copy(os.path.join(rapids_path, lib_), os.path.join(colab_env, lib_))\n","    sys.path.append(os.path.join(colab_env, lib_))\n","    print(\"copied to\" + os.path.join(colab_env, lib_))\n","  except Exception as e:\n","    print(e)"]},{"cell_type":"markdown","metadata":{"id":"Iy76iO7gztne"},"source":["## move legacy files"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hMRht32Czwry"},"outputs":[],"source":["# print()\n","cur_dir_list = os.listdir('.')\n","for f in cur_dir_list:\n","  if 'legacy' in f :\n","    # print(f)\n","    if os.path.isdir(current_path + f,):\n","      continue\n","\n","    shutil.move(current_path + f, current_path + 'legacy/' + f)\n","    print(\"moved to\" + current_path + 'legacy/' +  f)"]},{"cell_type":"markdown","metadata":{"id":"5duWn8t4BRyv"},"source":["# IDE platform\n"]},{"cell_type":"markdown","metadata":{"id":"6HOjnZjSgzk1"},"source":["## load ftr_list"]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":8604,"status":"ok","timestamp":1647998812183,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"7FPBG5Qqg2jB","outputId":"adeaf88b-ae2c-43cf-c5b8-5d67b9e46c79"},"outputs":[{"output_type":"stream","name":"stdout","text":["['2022-02-17 ETHUSDT.ftr']\n","2022-02-17 ETHUSDT.ftr loaded !\n","load res_df_ elapsed time : 4.547622442245483\n"]}],"source":["save_path = './candlestick_concated/res_df/'\n","\n","dir_path = \"bb4h_backi2\"\n","dir_path = \"bb1d_backi2\"\n","date = \"2022-01-10\"\n","date = \"2022-02-17\"\n","\n","ftr_path = os.path.join(save_path, dir_path, \"concat/cum\", date)\n","\n","# ------ load ftr list ------ #\n","ftr_list = [s for s in os.listdir(ftr_path) if \"ftr\" in s if date in s]\n","# ftr_list = [s for s in os.listdir(os.path.join(save_path, dir_path)) if \"ftr\" in s if date in s]\n","print(ftr_list)\n","\n","start_0 = time.time()\n","key = ftr_list[0]  # tempoaray use single key\n","res_df_ = pd.read_feather(os.path.join(ftr_path, key), columns=None, use_threads=True).set_index(\"index\")\n","# print(res_df_.head())\n","print(key, \"loaded !\")\n","print(\"load res_df_ elapsed time :\", time.time() - start_0)"]},{"cell_type":"code","source":["res_df_.dtypes"],"metadata":{"id":"RQH_l4opEh_O"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### edit cols"],"metadata":{"id":"x2yj2SwAXDLp"}},{"cell_type":"code","source":["col_list = list(res_df_.columns)\n","# # [col_ for col_ in col_list if 'score' in col_]\n","\n","# ------ drop ------ #\n","res_df_.drop([col_ for col_ in col_list if '20' in col_], inplace=True, axis=1)\n","res_df_.drop([col_ for col_ in col_list if '40' in col_], inplace=True, axis=1)\n","\n","# ------ replace ------ #\n","# for c_i, col_ in enumerate(col_list):\n","#   # if 'eTa_5T' in col_:\n","#   # if col_[-1] in ['m', 'h', 'd', 'H'] and '_' in col_:eTa_5T\n","#   if col_[0] in ['h'] and '_' in col_:\n","#     # col_list[c_i] = col_.replace('m', 'T').replace('h', 'H').replace('1T', 'T')\n","#     # col_list[c_i] = col_.replace('1d', 'D')\n","#     # col_list[c_i] = col_.replace('eTa_5T', 'ema_5T')\n","#     col_list[c_i] = col_list[c_i][1:]\n","#     # print(col_list[c_i][0])\n","# res_df_.columns = col_list\n","# # col_list[-2:] = ['resi_T', 'sup_T']"],"metadata":{"id":"x9wkWw15XCAm"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### zigzag"],"metadata":{"id":"LyGnAMvLYvOZ"}},{"cell_type":"code","source":["def plot_pivots(X, pivots):\n","    plt.xlim(0, len(X))\n","    plt.ylim(X.min()*0.99, X.max()*1.01)\n","    plt.plot(np.arange(len(X)), X, 'k:', alpha=0.5)\n","    plt.plot(np.arange(len(X))[pivots != 0], X[pivots != 0], 'k-')\n","    plt.scatter(np.arange(len(X))[pivots == 1], X[pivots == 1], color='g')\n","    plt.scatter(np.arange(len(X))[pivots == -1], X[pivots == -1], color='r')"],"metadata":{"id":"1PwSHOShZJNm","executionInfo":{"status":"ok","timestamp":1647998982634,"user_tz":-540,"elapsed":2,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["X = res_df_.close.iloc[-100:].to_numpy()\n","# X = res_df_.close.to_numpy()\n","pivots = peak_valley_pivots(X, 0.0005, -0.0005)"],"metadata":{"id":"4lZwODlFYxSL","executionInfo":{"status":"ok","timestamp":1647999084367,"user_tz":-540,"elapsed":1003,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"execution_count":26,"outputs":[]},{"cell_type":"code","source":["plot_pivots(X, pivots)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":265},"id":"W_xx9XWXZKJ5","executionInfo":{"status":"ok","timestamp":1647999085467,"user_tz":-540,"elapsed":3,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"cac92c74-3c4c-4fc0-8bd9-769e94592e7b"},"execution_count":27,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["t_df = res_df_.iloc[-100:]\n","t_df['date'] = t_df.index\n","data_x = t_df['date'].values\n","data_y = t_df['close'].values\n","peak_indexes = signal.argrelextrema(data_y, np.greater)\n","peak_indexes = peak_indexes[0]\n"," \n","# Find valleys(min).\n","valley_indexes = signal.argrelextrema(data_y, np.less)\n","valley_indexes = valley_indexes[0]\n"," \n","# Instantiate axes.\n","(fig, ax) = plt.subplots()\n"," \n","# Merge peaks and valleys data points using pandas.\n","df_peaks = pd.DataFrame({'date': data_x[peak_indexes], 'zigzag_y': data_y[peak_indexes]})\n","df_valleys = pd.DataFrame({'date': data_x[valley_indexes], 'zigzag_y': data_y[valley_indexes]})\n","df_peaks_valleys = pd.concat([df_peaks, df_valleys], axis=0, ignore_index=True, sort=True)\n"," \n","# Sort peak and valley datapoints by date.\n","df_peaks_valleys = df_peaks_valleys.sort_values(by=['date'])\n"," \n","# Plot zigzag trendline.\n","ax.plot(df_peaks_valleys['date'].values, df_peaks_valleys['zigzag_y'].values, \n","                                                        color='red', label=\"zigzag\")\n"," \n","# Plot close price line.\n","ax.plot(data_x, data_y, linestyle='dashed', color='black', label=\"Close Price\", linewidth=1)\n"," "],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"id":"ZAjpk42XarfY","executionInfo":{"status":"ok","timestamp":1647999471974,"user_tz":-540,"elapsed":935,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"471a5d20-9df5-4b2a-9d04-53cdb0e35c2f"},"execution_count":31,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7f82b6491790>]"]},"metadata":{},"execution_count":31},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["### volume_profile"],"metadata":{"id":"EOXQbXixiQcK"}},{"cell_type":"code","source":["session_df = res_df_.iloc[-1440:] # 0.159 -> 0.024 (14400 -> 1440)\n","volume = session_df['volume'].to_numpy()\n","close = session_df['close'].to_numpy()\n","# px.histogram(session_df, x='volume', y='close', nbins=150, orientation='h').show()"],"metadata":{"id":"7pFuazxpgx9B"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["kde_factor = 0.05\n","num_samples = 100\n","\n","start_0 = time.time()\n","kde = stats.gaussian_kde(close,weights=volume,bw_method=kde_factor)\n","kdx = np.linspace(close.min(),close.max(),num_samples)\n","kdy = kde(kdx)\n","ticks_per_sample = (kdx.max() - kdx.min()) / num_samples\n","print(\"ticks_per_sample :\", ticks_per_sample)  # sample 당 가격\n","print(\"kdy elapsed_time :\", time.time() - start_0)"],"metadata":{"id":"SoPJkiyKiXLM","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1647259514394,"user_tz":-540,"elapsed":332,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"2e1d515d-7caf-4f82-b53b-a17f3e1d9ab9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["ticks_per_sample : 1.3911999999999989\n","kdy elapsed_time : 0.021226167678833008\n"]}]},{"cell_type":"code","source":["peaks,_ = signal.find_peaks(kdy)\n","pkx = kdx[peaks]\n","pky = kdy[peaks]\n","\n","plt.figure(figsize=(10,5))\n","# plt.hist(close, bins=num_samples, weights=volume, alpha=.8, color='#1592e6')\n","# plt.plot(kdx, kdy, color='white')\n","# plt.plot(pkx, pky, 'bo', color='yellow')\n","plt.plot(kdy, kdx, color='white')\n","plt.plot(pky, pkx, 'bo', color='yellow')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":320},"id":"mK2jBddAxJ14","executionInfo":{"status":"ok","timestamp":1647263622450,"user_tz":-540,"elapsed":362,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"74d7a810-1375-4db5-f74e-3cf58e0a0662"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 720x360 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["pkx"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"a8tpQZCy0SO1","executionInfo":{"status":"ok","timestamp":1647260132868,"user_tz":-540,"elapsed":326,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"24ee984e-db8d-4083-97a7-4d3ebb536d38"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([3059.93252525, 3068.3640404 , 3082.41656566, 3093.65858586, 3104.90060606, 3120.35838384, 3130.19515152, 3140.03191919, 3158.30020202, 3168.1369697 , 3176.56848485])"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["# ------ vp 의 indi. 화가 필요함 -> point 설정 ------ #\n","# 1. 4 level 은 미리 만들어놓는게 맞는걸로 보임 -> 추종하는 function 이 많음 (utils_tr, ep_out ...)\n","#   a. 4 level 에 국한하는게 아니라, 모든 peaks 에 대해 levels 설정\n","#   b. 각 session 별로 peak_list 가 주어질 것\n","#     i. prev_data 사용해야하는점 주의 (session vp 는 future_data)"],"metadata":{"id":"gfA946s8UgS0"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### legacy"],"metadata":{"id":"1MNVIExLULhJ"}},{"cell_type":"code","source":["# import plotly.express as px\n","# import plotly.graph_objects as go\n","\n","def get_dist_plot(c, v, kx, ky):\n","    fig = go.Figure()\n","    fig.add_trace(go.Histogram(name='Vol Profile', x=c, y=v, nbinsx=150, \n","                               histfunc='sum', histnorm='probability density',\n","                               marker_color='#B0C4DE'))\n","    fig.add_trace(go.Scatter(name='KDE', x=kx, y=ky, mode='lines', marker_color='#D2691E'))    \n","\n","    peaks,_ = signal.find_peaks(kdy)\n","    pkx = kdx[peaks]\n","    pky = kdy[peaks]\n","    pk_marker_args=dict(size=10, color='black')\n","    fig.add_trace(go.Scatter(name=\"Peaks\", x=pkx, y=pky, mode='markers', marker=pk_marker_args))\n","    fig.show()\n","\n","    return fig"],"metadata":{"id":"ropzIp0wUPAA"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##### prominence_info"],"metadata":{"id":"3T-9FwWFXR4f"}},{"cell_type":"code","source":["start_0 = time.time()\n","min_prom = kdy.max() * 0.0\n","pipsize = 0.01\n","max_width_pips = 20\n","# width_range=(1, max_width_pips * pipsize / ticks_per_sample)\n","width_range= max_width_pips * pipsize / ticks_per_sample\n","peaks, peak_props = signal.find_peaks(kdy, prominence=min_prom, width=width_range)\n","\n","peak_x = kdx[peaks]\n","peak_y = kdy[peaks]\n","# ------ prominence lines ------ #\n","left_base = peak_props['left_bases']\n","right_base = peak_props['right_bases']\n","line_x = peak_x\n","line_y0 = peak_y\n","line_y1 = peak_y # - peak_props['prominences']\n","print(\"prom_line elapsed_time :\", time.time() - start_0)\n","\n","\n","for x, y0, y1 in zip(line_x, line_y0, line_y1):\n","    fig.add_shape(type='line',\n","        xref='x', yref='y',\n","        # x0=x, y0=y0, x1=x, y1=y1,\n","        x0=x, y0=0, x1=x, y1=y1,\n","        line=dict(\n","            color='red',\n","            width=2,\n","        )\n","    )\n","\n","# ------ width ------ #\n","left_ips = peak_props['left_ips']\n","right_ips = peak_props['right_ips']\n","# width_x0 = kdx.min() + (left_ips * ticks_per_sample)\n","# width_x1 = kdx.min() + (right_ips * ticks_per_sample)\n","width_x0 = kdx.min() + (left_base * ticks_per_sample)\n","width_x1 = kdx.min() + (right_base * ticks_per_sample)\n","\n","# int_from = kdx.min() + (left_base * ticks_per_sample)\n","# int_to = kdx.min() + (right_base * ticks_per_sample)\n","# [kde.integrate_box_1d(x0, x1) for x0, x1 in zip(int_from, int_to)]\n","\n","width_y = peak_props['width_heights']\n","\n","for x0, x1, y in zip(width_x0, width_x1, width_y):\n","    fig.add_shape(type='line',\n","        xref='x', yref='y',\n","        x0=x0, y0=y, x1=x1, y1=y,\n","        line=dict(\n","            color='red',\n","            width=2,\n","        )\n","    )\n","fig.show()"],"metadata":{"id":"RmBt2agljClE","colab":{"base_uri":"https://localhost:8080/","height":558},"executionInfo":{"status":"ok","timestamp":1647183981567,"user_tz":-540,"elapsed":781,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"c61b0e13-ab0a-4e56-8a44-8bc480ec31cc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["prom_line elapsed_time : 0.0005087852478027344\n"]},{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script src=\"https://cdn.plot.ly/plotly-2.8.3.min.js\"></script>                <div id=\"f0efc821-18d5-43b5-ad6e-1133ea0ad873\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"f0efc821-18d5-43b5-ad6e-1133ea0ad873\")) {                    Plotly.newPlot(                        \"f0efc821-18d5-43b5-ad6e-1133ea0ad873\",                        [{\"histfunc\":\"sum\",\"histnorm\":\"probability density\",\"marker\":{\"color\":\"#B0C4DE\"},\"name\":\"Vol Profile\",\"nbinsx\":150,\"x\":[3150.12,3150.91,3150.04,3152.76,3150.22,3148.21,3148.25,3148.3,3142.41,3145.56,3144.02,3145.11,3146.27,3142.97,3140.6,3142.02,3142.8,3141.34,3138.28,3138.09,3137.04,3135.5,3133.32,3134.84,3136.27,3137.1,3137.05,3139.74,3138.4,3138.17,3139.49,3141.68,3142.52,3143.14,3143.12,3142.4,3144.17,3142.7,3140.72,3138.89,3142.1,3140.96,3139.76,3138.51,3140.37,3139.0,3138.84,3138.57,3140.62,3143.09,3141.71,3140.05,3139.85,3139.12,3139.9,3139.24,3139.49,3138.88,3138.14,3136.66,3137.03,3138.04,3140.84,3138.27,3137.31,3139.03,3141.06,3141.5,3139.41,3137.62,3141.5,3142.8,3142.24,3143.42,3142.55,3143.9,3146.54,3146.38,3142.34,3144.01,3145.79,3147.35,3146.06,3146.75,3147.37,3153.62,3152.82,3154.53,3153.41,3154.3,3153.01,3156.01,3157.57,3157.36,3160.43,3159.0,3163.78,3164.2,3163.97,3168.45,3170.03,3169.46,3173.73,3169.48,3168.54,3167.57,3166.99,3164.73,3164.25,3166.33,3162.57,3156.97,3159.44,3159.19,3158.11,3156.97,3158.08,3158.32,3158.99,3157.01,3154.91,3147.89,3146.35,3142.36,3142.62,3138.81,3144.68,3143.32,3140.89,3140.16,3139.74,3140.33,3143.48,3145.12,3145.42,3147.13,3143.31,3144.88,3145.12,3143.89,3144.75,3143.91,3140.69,3141.35,3141.59,3141.62,3141.51,3141.96,3142.09,3140.61,3137.55,3138.18,3140.28,3139.39,3139.2,3139.85,3137.92,3138.08,3136.42,3134.93,3135.14,3133.15,3135.12,3133.37,3134.51,3131.06,3128.0,3126.97,3116.7,3122.46,3122.06,3118.8,3115.48,3119.5,3120.88,3110.75,3109.43,3107.1,3111.54,3107.5,3108.74,3111.3,3113.32,3115.38,3118.54,3115.27,3118.6,3120.1,3119.4,3119.35,3123.69,3123.54,3121.8,3121.82,3119.9,3122.01,3122.29,3119.64,3119.91,3118.67,3118.66,3119.45,3120.43,3122.38,3120.43,3121.94,3123.03,3123.6,3121.88,3123.81,3123.85,3121.51,3121.8,3122.29,3123.76,3127.99,3131.35,3131.12,3131.07,3132.76,3131.57,3131.8,3130.61,3134.68,3134.39,3132.91,3130.4,3129.86,3129.9,3129.38,3128.39,3125.57,3124.03,3123.68,3125.42,3125.98,3128.4,3130.98,3128.95,3129.26,3132.05,3131.17,3128.56,3126.45,3127.34,3128.33,3126.96,3128.84,3128.45,3128.34,3128.84,3126.09,3125.6,3125.95,3124.5,3122.44,3122.97,3128.29,3126.43,3127.98,3131.71,3132.68,3130.7,3129.63,3130.04,3129.68,3129.74,3129.36,3129.78,3128.6,3128.87,3130.34,3129.71,3127.47,3129.81,3129.16,3128.41,3126.57,3125.42,3128.63,3129.77,3130.9,3131.42,3129.66,3132.1,3130.24,3133.36,3138.65,3141.3,3144.9,3140.63,3141.08,3139.72,3142.67,3141.99,3140.43,3139.04,3134.85,3133.34,3133.14,3136.4,3138.89,3139.59,3143.64,3140.9,3140.38,3141.76,3140.14,3140.58,3137.29,3138.28,3138.27,3137.57,3139.11,3138.77,3138.93,3139.13,3139.57,3139.76,3141.02,3138.46,3138.77,3139.38,3135.77,3135.49,3136.19,3134.07,3135.5,3134.59,3134.37,3137.84,3139.81,3140.38,3143.15,3142.58,3143.12,3139.01,3137.68,3137.86,3137.6,3136.3,3136.34,3134.66,3136.0,3135.49,3133.83,3132.57,3127.5,3127.82,3130.61,3132.01,3126.05,3128.08,3127.75,3127.18,3128.5,3128.32,3129.79,3128.02,3129.28,3127.92,3129.56,3130.85,3131.61,3133.9,3133.36,3135.98,3136.89,3136.05,3138.23,3137.59,3139.65,3141.26,3140.09,3139.73,3139.13,3140.0,3138.28,3139.07,3140.15,3140.64,3141.14,3140.89,3141.56,3144.82,3146.11,3146.92,3147.37,3148.01,3148.11,3153.52,3153.63,3152.2,3145.75,3149.2,3150.38,3152.32,3148.33,3149.53,3151.03,3149.0,3148.97,3148.26,3148.09,3149.48,3150.14,3153.62,3154.73,3153.73,3154.58,3156.77,3157.02,3157.56,3159.21,3157.99,3157.28,3158.24,3157.75,3153.62,3156.32,3155.98,3156.09,3153.36,3154.85,3153.7,3153.26,3153.92,3152.18,3154.72,3153.76,3151.32,3147.99,3143.63,3142.84,3142.01,3142.34,3141.19,3144.4,3143.24,3146.07,3146.42,3142.71,3145.16,3144.34,3142.69,3139.69,3137.0,3139.75,3138.36,3137.76,3138.86,3141.21,3141.38,3147.22,3146.36,3145.32,3145.22,3143.33,3142.05,3138.36,3136.89,3138.59,3137.22,3138.73,3140.14,3140.55,3143.65,3142.01,3142.94,3141.82,3142.27,3142.38,3141.33,3139.54,3140.53,3141.91,3143.98,3145.27,3145.56,3145.8,3146.38,3146.33,3146.59,3148.72,3149.48,3149.99,3149.19,3147.89,3145.9,3144.89,3143.99,3144.38,3141.47,3141.26,3134.83,3136.75,3135.49,3137.49,3136.01,3138.03,3137.49,3135.5,3133.94,3131.24,3128.72,3131.32,3129.42,3129.77,3126.83,3127.0,3124.12,3125.0,3127.18,3130.0,3129.72,3129.07,3129.68,3129.97,3129.39,3130.92,3132.75,3132.92,3129.99,3133.15,3130.69,3132.15,3134.37,3132.81,3131.7,3130.61,3128.61,3128.99,3124.84,3116.56,3116.76,3116.92,3118.9,3119.05,3118.74,3118.24,3121.88,3121.41,3120.63,3119.45,3119.16,3117.66,3125.21,3122.01,3122.3,3122.27,3123.6,3123.71,3124.0,3126.14,3128.01,3125.94,3126.44,3128.0,3128.04,3128.5,3131.12,3129.44,3129.36,3130.58,3130.58,3130.74,3129.8,3130.8,3130.21,3130.0,3132.5,3132.77,3130.01,3138.72,3139.25,3138.11,3136.77,3136.71,3134.59,3135.98,3133.81,3131.4,3131.16,3133.29,3130.61,3132.0,3132.44,3133.58,3134.18,3133.44,3133.33,3135.37,3134.42,3132.16,3132.2,3130.93,3131.07,3128.89,3127.34,3129.46,3129.77,3130.33,3131.76,3132.28,3130.06,3132.43,3132.6,3134.33,3138.55,3138.49,3137.34,3135.68,3135.12,3133.0,3133.35,3135.1,3135.72,3135.45,3135.74,3134.31,3135.54,3135.0,3134.0,3135.5,3135.47,3138.57,3137.43,3137.26,3137.68,3134.65,3133.04,3134.23,3134.77,3137.77,3138.53,3137.99,3140.51,3141.66,3137.9,3130.11,3125.74,3126.7,3127.43,3126.03,3120.96,3121.81,3124.17,3124.31,3124.54,3125.11,3125.71,3126.3,3128.36,3129.59,3129.72,3130.19,3131.21,3130.5,3130.07,3129.81,3131.5,3134.35,3133.15,3135.09,3136.18,3132.93,3122.75,3122.1,3122.03,3121.84,3121.06,3118.65,3120.18,3119.31,3112.84,3117.62,3114.39,3114.41,3116.04,3117.45,3119.3,3120.57,3120.72,3121.07,3116.17,3110.8,3111.87,3110.61,3115.47,3117.35,3117.49,3117.32,3114.9,3112.16,3112.35,3108.01,3111.41,3109.76,3113.55,3118.27,3120.49,3119.38,3121.0,3119.82,3119.61,3118.49,3116.15,3116.56,3117.76,3115.36,3117.85,3117.1,3118.16,3118.6,3117.1,3114.79,3114.07,3116.16,3113.75,3112.4,3104.99,3118.68,3114.45,3103.37,3094.09,3103.67,3101.78,3098.48,3101.08,3101.52,3096.14,3095.06,3094.52,3093.74,3089.7,3094.76,3094.28,3082.9,3075.29,3071.6,3066.96,3068.99,3068.43,3072.83,3074.19,3068.47,3066.49,3068.45,3071.08,3072.8,3068.44,3067.71,3073.29,3073.62,3075.79,3074.76,3079.0,3077.27,3072.94,3073.42,3070.62,3070.97,3075.98,3073.64,3070.63,3073.96,3074.48,3076.25,3074.55,3072.14,3068.01,3068.44,3057.23,3061.75,3060.41,3060.23,3055.43,3062.96,3064.42,3063.7,3057.99,3057.97,3065.99,3069.05,3073.19,3068.84,3067.58,3067.45,3064.78,3066.87,3067.5,3068.74,3067.5,3070.61,3059.89,3062.56,3066.56,3065.24,3061.41,3060.9,3053.06,3061.95,3059.49,3056.27,3059.09,3059.6,3056.32,3057.96,3058.97,3061.6,3066.01,3068.68,3068.43,3070.66,3072.53,3070.4,3073.28,3072.86,3070.68,3067.65,3066.0,3066.25,3070.21,3071.52,3068.61,3064.15,3064.26,3063.48,3062.8,3060.3,3059.85,3060.47,3064.84,3065.03,3066.71,3066.55,3066.41,3065.24,3067.81,3066.93,3065.0,3067.85,3060.14,3062.51,3061.39,3064.93,3064.94,3066.09,3066.49,3067.75,3070.38,3067.84,3067.51,3072.07,3071.31,3070.05,3068.95,3068.57,3067.73,3068.88,3067.87,3067.89,3065.01,3066.0,3069.24,3065.3,3063.52,3063.06,3064.11,3064.99,3063.19,3062.69,3066.9,3066.87,3065.42,3058.47,3058.2,3068.7,3065.56,3065.52,3059.04,3060.61,3059.57,3058.08,3055.2,3053.72,3060.26,3055.86,3045.88,3046.6,3051.18,3052.99,3057.9,3056.38,3059.4,3061.48,3061.15,3064.36,3065.77,3066.35,3066.8,3067.68,3068.0,3065.05,3063.01,3066.42,3066.16,3064.8,3067.89,3066.3,3068.58,3064.81,3065.74,3064.23,3065.42,3070.43,3069.65,3070.48,3070.57,3073.44,3078.3,3082.89,3079.01,3080.76,3079.67,3082.0,3081.56,3082.01,3081.24,3078.61,3080.11,3080.95,3080.03,3080.65,3079.97,3078.86,3078.5,3078.6,3077.34,3077.0,3076.39,3076.45,3077.45,3076.23,3072.22,3073.67,3079.31,3077.21,3075.68,3076.91,3078.2,3075.92,3077.67,3076.33,3075.14,3076.47,3077.04,3080.69,3079.8,3080.33,3075.65,3074.66,3073.05,3070.38,3067.96,3068.78,3067.92,3069.26,3069.37,3070.76,3068.12,3069.49,3069.98,3071.78,3070.88,3068.71,3067.04,3069.34,3070.99,3070.39,3069.63,3068.6,3068.89,3070.08,3069.26,3069.57,3069.72,3069.53,3067.99,3069.23,3070.93,3071.33,3068.33,3066.84,3066.23,3066.76,3068.17,3070.0,3072.0,3075.66,3073.9,3073.99,3074.66,3074.0,3076.62,3077.82,3076.01,3076.18,3075.52,3075.42,3075.01,3075.67,3079.55,3078.46,3082.28,3080.74,3081.27,3083.38,3084.49,3086.42,3084.9,3086.53,3085.27,3084.7,3084.08,3084.82,3086.99,3092.0,3089.49,3089.26,3084.07,3084.44,3084.8,3083.55,3082.59,3082.36,3084.65,3086.97,3085.67,3085.43,3088.82,3089.81,3091.81,3093.96,3092.59,3093.58,3093.74,3092.61,3091.64,3091.26,3113.47,3104.88,3092.36,3101.44,3107.88,3113.58,3119.86,3128.34,3133.07,3128.34,3123.1,3129.07,3122.38,3127.43,3126.59,3132.79,3137.33,3143.07,3145.41,3147.86,3148.82,3157.67,3157.57,3160.7,3160.01,3163.6,3172.63,3171.77,3174.38,3176.44,3178.06,3179.99,3185.0,3176.75,3171.53,3179.12,3176.52,3168.9,3168.72,3170.03,3168.15,3165.58,3166.83,3167.56,3161.34,3162.78,3167.67,3162.8,3157.67,3155.79,3157.92,3161.37,3163.06,3165.11,3163.45,3164.45,3166.86,3166.61,3165.0,3167.59,3167.45,3164.59,3167.05,3172.29,3176.49,3170.87,3166.5,3165.51,3165.58,3164.96,3165.19,3161.59,3165.09,3162.72,3163.97,3162.62,3165.19,3165.77,3163.55,3173.99,3171.18,3170.87,3168.34,3169.49,3167.69,3169.72,3166.89,3168.42,3166.68,3168.84,3165.83,3162.55,3159.17,3160.93,3162.0,3160.83,3158.69,3159.99,3159.9,3159.88,3160.02,3158.98,3160.0,3158.01,3159.2,3158.6,3158.71,3156.25,3157.2,3156.77,3156.91,3156.6,3156.55,3153.94,3152.29,3151.49,3151.41,3146.89,3148.18,3147.2,3147.17,3147.89,3149.31,3151.59,3156.4,3153.84,3155.3,3155.23,3156.03,3156.24,3155.61,3158.4,3155.05,3155.38,3152.34,3152.18,3153.34,3152.91,3153.99,3151.52,3149.21,3152.48,3151.63,3150.9,3149.75,3148.0,3148.25,3149.4,3149.7,3148.41,3147.65,3146.06,3147.06,3147.41,3146.72,3145.51,3142.17,3142.8,3140.42,3139.24,3140.69,3140.67,3139.22,3136.44,3139.14,3137.55,3133.96,3131.83,3130.8,3130.95,3129.59,3127.0,3129.85,3133.0,3132.21,3132.15,3130.41,3132.9,3134.57,3139.85,3133.04,3138.13,3135.79,3136.96,3133.26,3129.64,3128.02,3127.75,3130.0,3132.21,3133.06,3132.06,3131.88,3132.99,3134.0,3135.79,3137.68,3136.0,3137.89,3133.88,3133.81,3133.84,3133.71,3138.28,3143.06,3144.0,3143.17,3143.02,3145.34,3144.83,3144.81,3144.61,3146.0,3147.91,3146.69,3145.03,3142.46,3142.5,3141.1,3140.17,3140.11,3141.4,3143.92,3144.66,3146.71,3148.95,3146.13,3135.82,3136.96,3139.34,3134.9,3134.48,3136.76,3137.37,3136.92,3136.99,3133.71,3134.44,3132.38,3135.25,3137.14,3135.07,3136.15,3136.15,3139.87,3138.92,3138.5,3141.6,3144.19,3145.44,3147.36,3147.51,3142.12,3143.94,3142.43,3142.02,3142.21,3144.66,3146.53,3144.3,3145.73,3145.94,3146.56,3145.42,3146.05,3150.58,3154.16,3151.01,3149.76,3150.51,3149.31,3146.43,3146.66,3147.47,3145.75,3146.7,3147.1,3143.28,3146.19,3145.38,3145.25,3140.13,3143.45,3140.18,3138.3,3139.7,3136.88,3132.99,3134.7,3135.09,3135.74,3129.89,3126.61,3123.87,3125.14,3119.64,3123.09,3123.35,3120.16,3121.8,3125.0,3132.0,3126.44,3124.57,3120.75,3125.9,3128.05,3127.12,3124.8,3126.19,3128.65,3130.03,3125.31,3125.8,3126.11,3123.22,3125.03,3126.05,3126.24,3129.98,3130.55,3130.97,3129.1,3129.66,3130.27,3130.36,3131.12,3136.13,3137.65,3133.69,3137.18,3137.25,3138.83,3138.58,3141.52,3139.41,3139.05,3137.7,3139.46,3139.8,3140.98,3139.78,3139.17,3140.0,3141.49,3138.86,3139.52,3140.5,3142.58,3142.34,3142.47,3142.91,3142.89,3144.0,3147.55,3148.71,3151.21,3150.66,3148.5,3148.96,3148.5,3150.32,3152.45,3150.83,3150.29,3151.2,3153.01,3152.48,3149.23,3147.45,3146.68,3157.71,3153.34,3147.37,3143.99,3141.45,3142.66,3146.98,3146.61,3148.46,3149.5,3149.29,3148.18,3145.05,3146.86,3145.76,3148.84,3149.31,3146.86,3146.76],\"y\":[1814.895,1182.023,1511.21,821.059,669.95,594.607,397.261,475.226,1430.563,1351.268,848.732,961.415,677.695,2241.498,771.686,3400.92,457.283,815.311,843.761,1456.898,1147.73,2592.488,939.438,695.06,664.589,839.272,344.224,524.897,1029.553,1257.254,764.586,1618.563,599.314,385.634,340.075,245.402,273.54,932.316,297.465,800.419,470.172,358.191,198.746,398.956,521.275,398.68,250.799,376.615,178.701,1034.812,349.27,365.934,193.939,199.584,148.806,343.965,258.079,238.408,273.382,508.892,455.586,1497.43,603.768,705.325,471.812,358.129,1222.79,447.666,603.433,350.189,684.554,404.765,918.631,713.382,803.374,220.673,1013.652,1757.238,887.223,420.149,422.235,642.444,379.785,126.201,499.773,2342.571,1945.816,1288.743,676.794,392.273,424.757,1084.062,1139.501,790.354,2007.705,1446.953,1842.648,777.958,945.39,2579.427,2955.737,1590.911,1476.864,2861.345,772.493,876.768,1835.01,875.833,585.31,765.122,767.852,1825.83,1060.932,682.04,688.755,737.484,429.945,293.821,300.116,1045.831,712.192,2711.994,2052.2,3340.02,897.035,2391.303,2186.713,1517.988,344.748,771.478,720.502,656.313,530.014,1327.673,508.321,904.994,1152.633,523.227,293.715,229.893,202.519,252.467,601.482,317.28,345.035,575.193,374.831,194.465,270.588,367.969,1280.729,1909.713,774.939,518.596,294.403,337.627,382.69,353.682,534.457,1713.387,360.944,713.113,1393.388,1289.595,610.727,739.131,1619.367,2194.335,8164.046,2879.21,2159.701,2512.548,3579.377,1841.206,2810.677,3893.288,1849.815,5497.891,2407.824,1844.752,1304.788,945.57,2745.772,2050.842,2354.528,1577.291,903.569,1269.654,2703.684,766.884,1965.466,1320.285,1111.835,521.223,822.176,942.413,497.538,499.364,222.856,316.366,355.702,243.842,362.266,593.914,349.424,308.565,540.138,769.079,463.481,163.895,237.299,285.424,466.1,224.654,493.52,1674.225,4063.392,1370.598,472.447,957.289,609.428,338.42,243.509,745.35,1417.319,762.417,553.865,616.945,305.569,511.777,416.061,2007.687,312.874,1760.715,470.299,170.102,514.177,647.315,425.481,274.85,415.924,896.493,396.062,588.357,231.181,273.932,245.847,212.412,116.329,109.858,274.394,323.434,335.066,347.193,459.166,944.41,601.327,889.712,412.644,317.84,986.261,934.932,572.116,181.168,460.876,145.156,108.878,210.202,77.92,295.25,300.008,412.518,463.649,312.424,342.369,602.553,325.602,288.656,458.643,344.168,189.501,378.501,506.806,405.58,266.931,508.179,577.092,1968.061,3128.798,2617.171,810.468,1071.792,482.71,702.007,298.08,1139.23,623.801,1162.914,1203.468,673.113,606.991,499.32,344.082,916.323,1133.798,236.462,323.745,227.404,305.618,859.751,541.196,262.919,221.3,135.795,94.984,185.741,146.342,216.582,150.862,227.198,373.705,332.486,216.229,778.895,1204.286,326.503,380.38,1047.579,257.681,288.363,944.527,1025.858,1888.092,606.18,219.281,573.418,618.131,579.352,643.473,227.201,596.85,266.111,593.418,412.236,518.62,714.492,807.998,1833.123,1485.911,696.152,1044.399,1178.696,682.768,339.908,614.242,333.987,289.083,426.036,434.767,363.008,294.274,249.675,759.092,233.645,259.457,692.772,530.582,751.244,252.918,324.292,565.306,530.138,634.433,621.443,362.445,1462.934,578.493,404.427,432.71,381.631,206.741,803.279,286.361,454.727,989.949,1000.012,534.381,1225.959,2611.002,1238.904,1808.266,2668.663,1734.437,1991.659,1533.497,673.975,1417.797,1002.213,689.714,474.831,775.993,612.321,674.988,586.885,486.539,6750.373,1240.763,1031.138,1064.433,810.097,2543.442,1714.432,1408.587,2076.241,891.454,802.952,990.123,356.49,909.726,969.575,1157.716,408.802,557.485,790.536,760.441,903.066,478.393,406.574,460.658,270.44,397.786,2943.217,4367.234,1259.451,1068.328,966.188,1414.714,579.827,511.738,412.874,654.607,675.654,504.93,356.198,858.616,1158.323,1447.125,787.173,728.954,636.948,628.265,669.612,465.412,1222.997,749.451,462.962,472.928,432.435,342.099,1618.728,2358.947,952.987,460.716,651.763,975.681,444.398,645.867,449.599,193.003,278.721,545.444,842.045,277.826,994.515,588.675,591.108,309.423,892.268,276.425,502.627,968.723,404.031,211.579,444.69,715.557,984.707,1097.859,551.379,692.514,900.106,360.002,948.053,805.637,489.368,1676.558,1304.157,367.592,283.184,1023.029,456.415,763.262,343.508,461.29,879.775,1776.793,1251.296,591.245,573.997,1673.844,1283.242,2767.718,1120.511,657.294,746.819,905.747,599.259,715.33,481.675,327.764,388.74,1256.088,1555.066,601.571,277.709,213.939,322.601,214.083,472.872,296.863,364.37,746.543,378.365,967.733,5140.211,4083.258,1994.542,1976.259,888.817,461.462,437.566,1416.611,716.221,1318.431,481.782,2014.435,936.676,1459.321,855.198,732.281,466.019,450.272,560.57,469.751,622.444,518.498,933.561,1274.182,362.645,417.461,200.685,1204.422,1085.208,437.325,388.368,522.196,414.681,402.1,458.488,176.931,774.455,662.126,617.206,452.137,4865.578,3871.135,1343.329,634.081,483.47,1681.018,514.598,502.913,1322.138,529.723,572.34,348.409,713.894,228.335,215.652,253.718,284.838,694.79,180.093,810.769,563.133,209.468,355.301,1084.715,204.09,893.371,557.044,320.725,236.971,360.995,404.746,202.665,416.594,295.445,369.598,1691.926,445.675,502.376,451.028,754.112,460.168,253.657,293.696,364.866,139.172,187.996,297.765,167.774,288.681,128.716,179.501,428.036,213.013,396.147,290.492,459.26,333.25,604.208,535.843,218.827,379.209,623.314,309.742,1047.188,2658.829,741.273,2765.267,2446.593,900.038,1232.736,817.002,2687.132,3309.465,1746.003,699.151,574.566,262.053,505.975,270.49,1023.427,533.5,488.001,536.457,432.03,945.469,1080.591,611.695,611.907,1095.621,485.481,688.799,375.255,1322.925,2347.935,1281.055,1713.871,563.816,371.289,1137.167,1011.662,433.968,4755.422,2060.545,1118.297,1058.42,991.226,512.798,725.336,476.284,633.408,903.175,644.941,2829.545,1218.33,1149.1,755.961,1252.379,2399.314,350.433,457.851,727.54,748.377,2585.751,4337.831,2453.675,1355.272,2073.169,1425.068,1751.715,901.639,353.899,368.582,636.142,1082.148,271.744,399.517,439.441,377.24,330.026,233.732,285.884,308.136,639.158,734.67,567.183,310.671,995.761,12392.217,5461.011,2988.344,5529.668,2618.77,11929.186,2928.894,5355.073,1533.817,2310.282,2210.125,1805.742,2500.52,3272.782,1332.249,2270.554,2483.668,8790.039,13105.425,16039.554,8317.661,6814.545,3909.444,2716.544,2823.368,2433.446,3042.327,4014.336,2680.476,2166.982,8299.153,2107.079,2585.491,3224.808,2437.339,2865.693,1574.387,2219.401,2214.305,2410.523,1263.301,1232.671,1213.058,1789.33,827.919,1530.653,1732.94,1439.558,1552.842,1345.879,1394.187,3147.626,6162.965,7032.083,1330.471,2505.725,7118.551,2288.653,1286.682,1102.423,3249.307,1670.88,2218.379,2946.052,2525.484,1719.79,1630.798,1474.484,1299.503,434.158,1462.856,1914.008,1336.711,872.552,2661.102,1921.851,1223.061,892.979,1675.459,2747.98,3398.563,4782.692,3130.671,914.08,3275.661,3677.987,1920.096,1582.481,626.202,1699.704,3016.389,2348.542,3936.201,1440.961,2551.41,2929.114,3910.54,1731.929,1423.134,1630.803,823.665,1596.309,1843.181,1446.542,850.694,2297.843,856.543,883.961,501.157,1621.147,856.971,707.791,1351.166,795.198,938.608,485.179,455.671,1061.071,580.457,263.109,715.892,1587.285,993.923,1251.255,2659.143,996.502,853.854,744.677,711.983,3232.026,3662.831,807.0,555.69,1043.709,1292.106,987.334,375.225,316.734,438.411,289.699,537.944,942.885,797.012,1077.267,379.583,611.293,521.083,934.505,1175.247,499.493,1141.633,563.435,872.319,811.753,773.096,1412.344,3620.225,4714.694,669.244,1065.55,1598.224,847.615,1923.708,1020.52,1883.069,3076.446,2134.064,1453.728,11270.233,2936.896,6307.007,2166.477,1551.387,1853.874,1372.167,2298.452,1069.092,896.017,1027.708,1205.234,1794.761,2595.809,890.418,848.032,650.893,1088.28,200.664,502.739,575.785,921.978,808.706,3029.201,602.68,309.435,495.715,959.404,569.062,492.893,686.058,1227.456,2415.351,6515.3,1556.79,953.548,1004.564,1320.414,4557.466,1098.609,911.352,1232.801,1241.033,1343.423,769.908,447.129,647.478,822.26,767.131,569.507,437.851,1190.093,378.865,290.814,440.004,366.664,1587.445,389.51,1948.052,1274.222,418.255,155.696,281.607,310.623,166.909,303.48,700.347,271.28,110.636,520.183,820.569,810.861,1088.369,858.322,1295.596,2094.312,1503.768,1037.796,500.033,559.479,227.634,704.975,702.474,560.973,1364.022,508.316,349.588,640.477,527.515,1470.646,248.411,315.355,194.49,727.557,208.254,329.772,769.204,559.27,220.603,179.101,514.706,337.329,450.668,1473.433,2256.979,539.366,738.786,421.76,808.357,281.104,544.472,1304.849,1022.835,193.211,205.636,773.849,215.729,546.43,625.921,225.712,512.885,292.199,264.804,592.964,1204.967,418.402,742.071,437.497,433.652,1078.844,331.74,1040.031,872.767,1004.157,722.758,430.616,408.399,245.932,484.168,3624.12,976.418,394.652,1682.369,625.343,239.747,380.251,1597.606,848.428,708.537,664.832,371.165,750.007,1026.259,843.009,1023.456,1917.749,952.579,870.347,502.286,1363.581,780.743,1448.612,12431.885,6893.299,8886.959,3907.062,9540.759,4740.252,5895.644,16625.626,6312.555,3615.152,3860.571,2514.261,2760.668,1523.597,1871.628,2528.961,7365.0,8920.169,5768.383,6710.649,3346.652,4463.499,3666.88,6450.55,4832.119,5510.211,8186.365,3537.525,8281.314,10045.157,6383.577,5079.938,3813.839,3660.97,5728.121,7917.184,2421.103,5177.868,3136.173,2217.563,3832.957,1720.129,1543.371,1636.799,8034.61,4788.474,3850.793,1514.508,5392.819,1927.194,1163.751,1585.945,1209.542,1998.829,877.24,823.488,781.809,826.931,913.803,742.025,3002.547,1367.89,1044.189,1100.946,2047.804,2818.993,1017.674,1889.338,1032.258,579.044,748.169,927.378,1345.4,516.194,810.503,845.27,650.086,556.495,716.068,3167.786,1365.503,1120.129,1632.121,494.557,495.811,356.546,271.948,320.235,366.049,349.466,550.775,843.882,2000.798,961.087,470.513,438.616,819.214,594.347,286.774,251.089,602.025,267.413,278.638,425.458,282.646,1696.154,921.061,374.925,625.157,346.19,1447.882,338.668,501.822,996.179,1126.58,967.442,927.906,4074.406,898.707,1271.993,720.906,758.176,506.787,1384.601,2630.754,1180.051,296.364,385.161,594.547,303.281,206.3,1509.706,417.533,430.407,350.638,614.913,217.67,109.158,296.924,307.087,827.106,850.038,562.773,402.213,853.225,619.708,185.33,229.867,207.248,255.341,347.69,914.271,348.17,280.522,461.744,242.677,1689.641,1235.344,943.835,1181.751,733.24,268.104,381.13,818.733,1090.052,548.373,754.94,989.387,773.47,1064.937,1070.959,703.035,2594.209,1302.569,682.392,552.382,309.738,466.737,793.098,2376.261,856.232,754.519,404.143,168.334,1477.862,943.652,711.273,1748.362,1006.485,789.572,594.946,279.75,178.433,290.649,215.983,493.113,338.384,762.448,611.586,1334.322,294.505,303.188,134.407,516.94,1550.403,1126.795,485.425,622.304,1249.031,373.648,346.683,211.699,519.095,1088.352,529.813,523.314,772.507,209.114,687.664,329.146,352.705,444.147,395.78,325.339,513.402,784.247,986.546,1584.942,2185.948,785.321,729.112,453.787,897.861,262.964,404.52,171.003,580.24,118.207,406.641,160.17,743.848,437.773,1369.397,191.219,1229.096,398.903,403.85,322.726,970.586,568.304,478.038,404.745,1239.612,454.913,442.573,288.41,264.373,524.088,130.674,443.39,586.952,167.731,307.728,263.88,311.737,866.873,1745.621,745.983,309.615,328.348,383.704,1118.281,450.373,387.296,188.089,629.117,158.39,829.748,364.026,136.85,324.278,1060.597,707.567,409.192,443.098,510.64,923.325,605.203,716.174,198.6,554.733,1635.338,1598.253,4035.924,1229.607,1608.824,2794.958,636.725,1971.132,1481.98,1093.152,3786.967,1736.518,1289.176,1179.711,677.348,1259.158,841.34,248.067,451.306,413.411,883.511,395.721,304.827,431.303,1106.7,599.37,354.735,747.528,810.7,835.158,481.175,629.481,323.974,608.739,557.978,525.368,1225.958,840.532,1067.311,718.545,716.335,312.894,563.057,1017.419,618.553,512.007,588.984,294.695,278.158,217.027,537.444,269.51,225.5,501.376,691.99,483.791,127.283,709.697,467.43,307.414,507.697,422.858,256.808,1153.716,1055.198,1414.849,1144.706,1064.626,623.477,877.503,444.839,742.027,415.472,677.548,1051.317,655.2,370.676,1077.143,1051.053,784.457,4542.468,1733.555,1213.929,1538.198,2121.016,918.853,882.448,654.86,1728.875,631.103,301.013,661.938,933.172,370.951,202.456,406.614,314.65,592.089,26.727],\"type\":\"histogram\"},{\"marker\":{\"color\":\"#D2691E\"},\"mode\":\"lines\",\"name\":\"KDE\",\"x\":[3045.88,3047.2852525252524,3048.690505050505,3050.0957575757575,3051.5010101010103,3052.9062626262626,3054.3115151515153,3055.7167676767676,3057.1220202020204,3058.5272727272727,3059.9325252525255,3061.337777777778,3062.7430303030305,3064.148282828283,3065.5535353535356,3066.958787878788,3068.3640404040407,3069.769292929293,3071.1745454545458,3072.579797979798,3073.9850505050504,3075.390303030303,3076.7955555555554,3078.200808080808,3079.6060606060605,3081.0113131313133,3082.4165656565656,3083.8218181818183,3085.2270707070707,3086.6323232323234,3088.0375757575757,3089.4428282828285,3090.848080808081,3092.2533333333336,3093.658585858586,3095.0638383838386,3096.469090909091,3097.8743434343437,3099.279595959596,3100.6848484848488,3102.090101010101,3103.4953535353534,3104.900606060606,3106.3058585858585,3107.711111111111,3109.1163636363635,3110.5216161616163,3111.9268686868686,3113.3321212121214,3114.7373737373737,3116.1426262626264,3117.5478787878787,3118.9531313131315,3120.358383838384,3121.7636363636366,3123.168888888889,3124.5741414141416,3125.979393939394,3127.3846464646467,3128.789898989899,3130.1951515151513,3131.600404040404,3133.0056565656564,3134.410909090909,3135.8161616161615,3137.2214141414142,3138.6266666666666,3140.0319191919193,3141.4371717171716,3142.8424242424244,3144.2476767676767,3145.6529292929295,3147.0581818181818,3148.4634343434345,3149.868686868687,3151.2739393939396,3152.679191919192,3154.0844444444447,3155.489696969697,3156.8949494949493,3158.300202020202,3159.7054545454544,3161.110707070707,3162.5159595959594,3163.921212121212,3165.3264646464645,3166.7317171717173,3168.1369696969696,3169.5422222222223,3170.9474747474746,3172.3527272727274,3173.7579797979797,3175.1632323232325,3176.568484848485,3177.9737373737375,3179.37898989899,3180.7842424242426,3182.189494949495,3183.5947474747472,3185.0],\"y\":[0.001832905419240713,0.0015170993773343943,0.0009811990405335794,0.0010910781869862753,0.001662787664619852,0.002276584209048065,0.003017679469815101,0.004091626542089751,0.005452920992053675,0.006818537038424319,0.0076664779747402535,0.007643887894555952,0.007344902200072563,0.00827273925583825,0.011220488982456029,0.01494681923660121,0.016672754263443067,0.015298211710060586,0.013000656836147326,0.01136447782936633,0.009905415113226086,0.007991277793749363,0.005915182769079316,0.004603614839180802,0.004340216581875808,0.004677084159634987,0.004804286094145265,0.003945664227425191,0.0025142257578005694,0.0014727830724446968,0.0011591657181478472,0.0015827815995405762,0.0026670028851318566,0.003810420375174876,0.004026389180218125,0.003107185282237217,0.001940076730122543,0.0013880150787554427,0.0015444989246854268,0.0023609061649200076,0.0037401025635127546,0.005029582983599697,0.005321434602966492,0.004778565138234207,0.004284633110071723,0.004142142333983544,0.004650245486454227,0.005790340541463709,0.0068018904562159735,0.007335214235017366,0.008011875247544532,0.009032977214800161,0.009862320541122151,0.01015891479438546,0.010077897051723251,0.009700191176833918,0.00944402389099212,0.010385374840307136,0.012487699392384763,0.014125807036359036,0.014335489751832464,0.013760773754902053,0.013070724606546664,0.012663567468535765,0.013407581002278695,0.0152918031502357,0.01671953731557649,0.01690758767766308,0.0165814827586469,0.01570664895796692,0.014255369464538745,0.013369278115428072,0.012993378487870194,0.011780241643981209,0.009592167939552232,0.007696976248164002,0.006823155935995189,0.006619023196157732,0.007110669748385475,0.008153180108070628,0.008357004173573936,0.007467120695723313,0.006541623694037697,0.005979030384818917,0.00565790251287167,0.005607397002735248,0.00599245781550611,0.006338445734583271,0.0060092038421343755,0.0053319582929410685,0.004754442260061802,0.004333231721163359,0.004227903631578969,0.004279536987396199,0.003930156107007355,0.0029754130410062354,0.0017041868280610027,0.0007672145372132436,0.0005056108010257643,0.0005155116532610217],\"type\":\"scatter\"},{\"marker\":{\"color\":\"black\",\"size\":10},\"mode\":\"markers\",\"name\":\"Peaks\",\"x\":[3059.9325252525255,3068.3640404040407,3082.4165656565656,3093.658585858586,3104.900606060606,3120.358383838384,3130.1951515151513,3140.0319191919193,3158.300202020202,3168.1369696969696,3176.568484848485],\"y\":[0.0076664779747402535,0.016672754263443067,0.004804286094145265,0.004026389180218125,0.005321434602966492,0.01015891479438546,0.014335489751832464,0.01690758767766308,0.008357004173573936,0.006338445734583271,0.004279536987396199],\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"shapes\":[{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3059.9325252525255,\"x1\":3059.9325252525255,\"xref\":\"x\",\"y0\":0,\"y1\":0.007344902200072563,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3068.3640404040407,\"x1\":3068.3640404040407,\"xref\":\"x\",\"y0\":0,\"y1\":0.001159165718147847,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3082.4165656565656,\"x1\":3082.4165656565656,\"xref\":\"x\",\"y0\":0,\"y1\":0.004340216581875808,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3093.658585858586,\"x1\":3093.658585858586,\"xref\":\"x\",\"y0\":0,\"y1\":0.0013880150787554425,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3104.900606060606,\"x1\":3104.900606060606,\"xref\":\"x\",\"y0\":0,\"y1\":0.004142142333983544,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3120.358383838384,\"x1\":3120.358383838384,\"xref\":\"x\",\"y0\":0,\"y1\":0.00944402389099212,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3130.1951515151513,\"x1\":3130.1951515151513,\"xref\":\"x\",\"y0\":0,\"y1\":0.012663567468535765,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3140.0319191919193,\"x1\":3140.0319191919193,\"xref\":\"x\",\"y0\":0,\"y1\":0.0009811990405335785,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3158.300202020202,\"x1\":3158.300202020202,\"xref\":\"x\",\"y0\":0,\"y1\":0.006619023196157732,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3168.1369696969696,\"x1\":3168.1369696969696,\"xref\":\"x\",\"y0\":0,\"y1\":0.005607397002735248,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3176.568484848485,\"x1\":3176.568484848485,\"xref\":\"x\",\"y0\":0,\"y1\":0.004227903631578969,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3062.5744,\"xref\":\"x\",\"y0\":0.007505690087406408,\"y1\":0.007505690087406408,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.008915959990795457,\"y1\":0.008915959990795457,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3079.2688000000003,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.0045722513380105365,\"y1\":0.0045722513380105365,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3097.3544,\"xref\":\"x\",\"y0\":0.002707202129486784,\"y1\":0.002707202129486784,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3108.484,\"xref\":\"x\",\"y0\":0.004731788468475018,\"y1\":0.004731788468475018,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3123.7872,\"xref\":\"x\",\"y0\":0.00980146934268879,\"y1\":0.00980146934268879,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3133.5256,\"xref\":\"x\",\"y0\":0.013499528610184115,\"y1\":0.013499528610184115,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.00894439335909833,\"y1\":0.00894439335909833,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3153.0024,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.007488013684865834,\"y1\":0.007488013684865834,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3164.132,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.005972921368659259,\"y1\":0.005972921368659259,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3173.8704,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.004253720309487584,\"y1\":0.004253720309487584,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3059.9325252525255,\"x1\":3059.9325252525255,\"xref\":\"x\",\"y0\":0,\"y1\":0.0076664779747402535,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3068.3640404040407,\"x1\":3068.3640404040407,\"xref\":\"x\",\"y0\":0,\"y1\":0.016672754263443067,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3082.4165656565656,\"x1\":3082.4165656565656,\"xref\":\"x\",\"y0\":0,\"y1\":0.004804286094145265,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3093.658585858586,\"x1\":3093.658585858586,\"xref\":\"x\",\"y0\":0,\"y1\":0.004026389180218125,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3104.900606060606,\"x1\":3104.900606060606,\"xref\":\"x\",\"y0\":0,\"y1\":0.005321434602966492,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3120.358383838384,\"x1\":3120.358383838384,\"xref\":\"x\",\"y0\":0,\"y1\":0.01015891479438546,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3130.1951515151513,\"x1\":3130.1951515151513,\"xref\":\"x\",\"y0\":0,\"y1\":0.014335489751832464,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3140.0319191919193,\"x1\":3140.0319191919193,\"xref\":\"x\",\"y0\":0,\"y1\":0.01690758767766308,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3158.300202020202,\"x1\":3158.300202020202,\"xref\":\"x\",\"y0\":0,\"y1\":0.008357004173573936,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3168.1369696969696,\"x1\":3168.1369696969696,\"xref\":\"x\",\"y0\":0,\"y1\":0.006338445734583271,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3176.568484848485,\"x1\":3176.568484848485,\"xref\":\"x\",\"y0\":0,\"y1\":0.004279536987396199,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3062.5744,\"xref\":\"x\",\"y0\":0.007505690087406408,\"y1\":0.007505690087406408,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.008915959990795457,\"y1\":0.008915959990795457,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3079.2688000000003,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.0045722513380105365,\"y1\":0.0045722513380105365,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3097.3544,\"xref\":\"x\",\"y0\":0.002707202129486784,\"y1\":0.002707202129486784,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3108.484,\"xref\":\"x\",\"y0\":0.004731788468475018,\"y1\":0.004731788468475018,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3123.7872,\"xref\":\"x\",\"y0\":0.00980146934268879,\"y1\":0.00980146934268879,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3133.5256,\"xref\":\"x\",\"y0\":0.013499528610184115,\"y1\":0.013499528610184115,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.00894439335909833,\"y1\":0.00894439335909833,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3153.0024,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.007488013684865834,\"y1\":0.007488013684865834,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3164.132,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.005972921368659259,\"y1\":0.005972921368659259,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3173.8704,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.004253720309487584,\"y1\":0.004253720309487584,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3059.9325252525255,\"x1\":3059.9325252525255,\"xref\":\"x\",\"y0\":0,\"y1\":0.0076664779747402535,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3068.3640404040407,\"x1\":3068.3640404040407,\"xref\":\"x\",\"y0\":0,\"y1\":0.016672754263443067,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3082.4165656565656,\"x1\":3082.4165656565656,\"xref\":\"x\",\"y0\":0,\"y1\":0.004804286094145265,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3093.658585858586,\"x1\":3093.658585858586,\"xref\":\"x\",\"y0\":0,\"y1\":0.004026389180218125,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3104.900606060606,\"x1\":3104.900606060606,\"xref\":\"x\",\"y0\":0,\"y1\":0.005321434602966492,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3120.358383838384,\"x1\":3120.358383838384,\"xref\":\"x\",\"y0\":0,\"y1\":0.01015891479438546,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3130.1951515151513,\"x1\":3130.1951515151513,\"xref\":\"x\",\"y0\":0,\"y1\":0.014335489751832464,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3140.0319191919193,\"x1\":3140.0319191919193,\"xref\":\"x\",\"y0\":0,\"y1\":0.01690758767766308,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3158.300202020202,\"x1\":3158.300202020202,\"xref\":\"x\",\"y0\":0,\"y1\":0.008357004173573936,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3168.1369696969696,\"x1\":3168.1369696969696,\"xref\":\"x\",\"y0\":0,\"y1\":0.006338445734583271,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3176.568484848485,\"x1\":3176.568484848485,\"xref\":\"x\",\"y0\":0,\"y1\":0.004279536987396199,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3062.5744,\"xref\":\"x\",\"y0\":0.007505690087406408,\"y1\":0.007505690087406408,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.008915959990795457,\"y1\":0.008915959990795457,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3079.2688000000003,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.0045722513380105365,\"y1\":0.0045722513380105365,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3097.3544,\"xref\":\"x\",\"y0\":0.002707202129486784,\"y1\":0.002707202129486784,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3108.484,\"xref\":\"x\",\"y0\":0.004731788468475018,\"y1\":0.004731788468475018,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3123.7872,\"xref\":\"x\",\"y0\":0.00980146934268879,\"y1\":0.00980146934268879,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3133.5256,\"xref\":\"x\",\"y0\":0.013499528610184115,\"y1\":0.013499528610184115,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.00894439335909833,\"y1\":0.00894439335909833,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3153.0024,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.007488013684865834,\"y1\":0.007488013684865834,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3164.132,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.005972921368659259,\"y1\":0.005972921368659259,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3173.8704,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.004253720309487584,\"y1\":0.004253720309487584,\"yref\":\"y\"}]},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('f0efc821-18d5-43b5-ad6e-1133ea0ad873');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}}]},{"cell_type":"code","source":["# peaks  # ndarray\n","# kdx  # ndarray\n","# kdy  # ndarray\n","# kdx.min()\n","left_base * ticks_per_sample\n","# volume"],"metadata":{"id":"zqj944n-WzyZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(peak_y)\n","print(peak_props['prominences'])\n","peak_props"],"metadata":{"id":"Rvqv0RGojo9h"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xpyP5t8Ht_pE","jp-MarkdownHeadingCollapsed":true,"tags":[]},"source":["### calc recursive indi's min_period"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":235},"executionInfo":{"elapsed":15,"status":"error","timestamp":1645810346810,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"N1Hbm4OA4Tkk","outputId":"e6a3fc2f-316c-4a0d-9c91-df759c816b88"},"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-4-c602b9e1b7e6>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mticker_prcn\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_precision_by_price\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mres_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclose\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mtarget_len\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m300000\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mslice_len_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m50\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m10000\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m100\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mslice_len_list\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minsert\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget_len\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'res_df' is not defined"]}],"source":["ticker_prcn = get_precision_by_price(res_df.close.iloc[-1]) + 2\n","\n","target_len = 300000\n","slice_len_list = list(range(50, 10000, 100))\n","slice_len_list.insert(0, target_len)\n","\n","start_0 = time.time()\n","# prev_int_, prev_pnts_ = None, None\n","offset = 1\n","\n","for sl_idx, sample_len in enumerate(slice_len_list):\n","\n","  sample_df = res_df.iloc[-sample_len -offset:-offset]\n","  sample_len2 = sample_len\n","\n","  # --------- input using indi.s --------- #\n","  # res = ema_v0(sample_df['close'], 190)\n","  res = rsi(sample_df, 14)\n","\n","    #    to_htf()    #\n","  # df_5T = to_htf(sample_df, itv_='5T', offset='1h')\n","  # sample_len2 = len(df_5T)\n","\n","  # # --------- input using htf_indi. --------- #\n","  # res = ema(df_5T['close'], 195)\n","  # -------------------------------------- #\n","\n","  res_last_row = res.iloc[-1]\n","  if pd.isnull(res_last_row):\n","    continue\n","\n","  # print(res_last_row)\n","  # break\n","\n","  # sample_df = sample_df.join(to_lower_tf_v2(sample_df, df_5T, [-1]), how='inner')\n","\n","\n","  #   자리수 분할 계산    #\n","  int_, points_ = str(res_last_row).split('.')\n","  pnts_ = points_[:ticker_prcn]\n","\n","  if sl_idx == 0:\n","    target_int_ = int_\n","    target_pnts_ = pnts_\n","    print(\"target {} ({}) -> {} {}\".format(sample_len, sample_len2, int_, points_))\n","\n","  else:\n","    if target_int_ == int_ and target_pnts_ == pnts_:\n","      # print(sample_len, \"({})\".format(sample_len2), '->', int_, pnts_, end='\\n\\n')\n","      print(\"{} ({}) -> {} {}\\n\".format(sample_len, sample_len2, int_, points_))\n","      break\n","\n","print(time.time() - start_0)  # (1301)(1361)(1301)"]},{"cell_type":"markdown","metadata":{"id":"rrIGjmUzqU-D","tags":[]},"source":["## import utils & config"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SeJan_0t95yL"},"outputs":[],"source":["frame_ver = \"0114_htf\"\n","ID_arr = np.array(['v3', 'v5_2'])\n","\n","utils_public_name = \"{}.utils.{}_utils_public\".format(strat_pkg, frame_ver)\n","utils_public_lib = importlib.import_module(utils_public_name)\n","utils_public = utils_public_lib   # temporary\n","\n","u_name_list = [\"{}.utils.{}_utils_{}\".format(strat_pkg, frame_ver, id_) for id_ in ID_arr]\n","utils_arr = np.array([importlib.import_module(u_name) for u_name in u_name_list])\n","\n","config_name_list = [\"{}_config_{}.json\".format(frame_ver, id_) for id_ in ID_arr]\n","cfg_path_list = [os.path.join(current_path, strat_pkg, \"config\", name_) for name_ in config_name_list]\n","cfg_file_list = [open(cfg_path) for cfg_path in cfg_path_list]\n","config_arr = np.array([EasyDict(json.load(cfg_)) for cfg_ in cfg_file_list])\n","\n","# ------ opened files should be closed --> 닫지 않으면 reopen 시 error occurs ------ #\n","_ = [cfg_.close() for cfg_ in cfg_file_list]\n","show_plot = 1   # idep's var - do not touch"]},{"cell_type":"markdown","metadata":{"id":"leSQlImg4_9L","jp-MarkdownHeadingCollapsed":true,"tags":[]},"source":["### utils_"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CB2yZdQ95Cdg"},"outputs":[],"source":["# from funcs.funcs_indicator_candlescore import *\n","# import numpy as np\n","\n","def get_line(touch, rtc_):\n","  touch_copy = touch.copy()\n","  touch_line = rtc_.copy()\n","\n","  nan_idx = np.isnan(touch_copy)\n","  touch_copy[nan_idx] = 0   # for indexing array\n","  touch_line[touch_copy.astype(int)]\n","  touch_line[nan_idx] = np.nan   # for true comp.\n","\n","  return touch_line\n","\n","\n","def enlist_rtc(res_df, config, np_timeidx):\n","    strat_version = config.strat_version\n","    # ------------ rtc_gap ------------ #    \n","    short_rtc_1_, long_rtc_1_ = 'short_rtc_1_{}'.format(strat_version), 'long_rtc_1_{}'.format(strat_version)\n","    short_rtc_0_, long_rtc_0_ = 'short_rtc_0_{}'.format(strat_version), 'long_rtc_0_{}'.format(strat_version)\n","\n","    period1, period2 = 20, 40\n","    res_df[short_rtc_1_] = res_df['dc_lower_{}{}'.format(config.loc_set.point.rtc_itv1, period1)]  # rtc 의 기준이 되어줌 (ei_k 도 포함)\n","    res_df[short_rtc_0_] = res_df['dc_upper_{}{}'.format(config.loc_set.point.rtc_itv0, period2)]\n","    res_df[long_rtc_1_] = res_df['dc_upper_{}{}'.format(config.loc_set.point.rtc_itv1, period1)]\n","    res_df[long_rtc_0_] = res_df['dc_lower_{}{}'.format(config.loc_set.point.rtc_itv0, period2)]\n","\n","    # ------ inversion ------ #\n","    if config.pos_set.short_inversion or config.pos_set.long_inversion:\n","      res_df.rename({short_rtc_1_: long_rtc_1_, long_rtc_1_: short_rtc_1_}, axis=1, inplace=True)\n","      res_df.rename({short_rtc_0_: long_rtc_0_, long_rtc_0_: short_rtc_0_}, axis=1, inplace=True)\n","\n","    res_df['short_rtc_gap_{}'.format(strat_version)] = abs(\n","        res_df[short_rtc_0_] - res_df[short_rtc_1_])\n","    res_df['long_rtc_gap_{}'.format(strat_version)] = abs(\n","        res_df[long_rtc_1_] - res_df[long_rtc_0_])\n","    \n","    # ------------ out_gap ------------ #\n","    # short_out_1_, long_out_1_ = 'short_out_1_{}'.format(strat_version), 'long_out_1_{}'.format(strat_version)\n","    # short_out_0_, long_out_0_ = 'short_out_0_{}'.format(strat_version), 'long_out_0_{}'.format(strat_version)\n","    # res_df[short_out_1_] = res_df['dc_lower_%s' % config.loc_set.point.outg_itv1]\n","    # res_df[short_out_0_] = res_df['dc_upper_%s' % config.loc_set.point.outg_itv0]   # outg 의 기준이 되어줌\n","    # res_df[long_out_1_] = res_df['dc_upper_%s' % config.loc_set.point.outg_itv1]\n","    # res_df[long_out_0_] = res_df['dc_lower_%s' % config.loc_set.point.outg_itv0]\n","    # # ------ inversion ------ #\n","    # if config.pos_set.short_inversion or config.pos_set.long_inversion:  # Todo - 추후 다른 변수로 변경해야함 (entry_score deprecated)\n","    #   res_df.rename({short_out_1_: long_out_1_, long_out_1_: short_out_1_}, axis=1, inplace=True)\n","    #   res_df.rename({short_out_0_: long_out_0_, long_out_0_: short_out_0_}, axis=1, inplace=True)\n","\n","    # res_df['short_out_gap_{}'.format(strat_version)] = abs(\n","    #     res_df[short_out_0_] - res_df[short_out_1_])\n","    # res_df['long_out_gap_{}'.format(strat_version)] = abs(\n","    #     res_df[long_out_1_] - res_df[long_out_0_])\n","    \n","    # ------------ dtk_gap ------------ #\n","    res_df['short_dtk_1_{}'.format(strat_version)] = res_df['bb_lower_%s' % config.loc_set.zone.dtk_itv]\n","    res_df['short_dtk_0_{}'.format(strat_version)] = res_df['dc_upper_%s' % config.loc_set.zone.dtk_itv]\n","    res_df['long_dtk_1_{}'.format(strat_version)] = res_df['bb_upper_%s' % config.loc_set.zone.dtk_itv]\n","    res_df['long_dtk_0_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.zone.dtk_itv]\n","\n","    res_df['short_dtk_gap_{}'.format(strat_version)] = abs(\n","        res_df['short_dtk_0_{}'.format(strat_version)] - res_df['short_dtk_1_{}'.format(strat_version)])\n","    res_df['long_dtk_gap_{}'.format(strat_version)] = abs(\n","        res_df['long_dtk_1_{}'.format(strat_version)] - res_df['long_dtk_0_{}'.format(strat_version)])\n","\n","    return\n","\n","\n","def enlist_tr(res_df, config, np_timeidx, mode='OPEN'):\n","    strat_version = config.strat_version\n","    # ---------------- point definition : get open_res ---------------- #    \n","    len_df = len(res_df)\n","    short_open_res = np.ones(len_df)\n","    long_open_res = np.ones(len_df)\n","    \n","    short_rtc_1_col, short_rtc_0_col, short_rtc_gap_col = 'short_rtc_1_{}'.format(strat_version), 'short_rtc_0_{}'.format(strat_version), 'short_rtc_gap_{}'.format(strat_version) \n","    long_rtc_1_col, long_rtc_0_col, long_rtc_gap_col = 'long_rtc_1_{}'.format(strat_version), 'long_rtc_0_{}'.format(strat_version), 'long_rtc_gap_{}'.format(strat_version) \n","\n","    data_cols = ['open', 'high', 'low']   # Todo - public_indi 이전에 해야할지도 모름 # 'close', 'haopen', 'hahigh', 'halow', 'haclose'\n","    rtc_cols = [short_rtc_1_col, short_rtc_0_col, short_rtc_gap_col, long_rtc_1_col, long_rtc_0_col, long_rtc_gap_col]   # Todo - public_indi 이전에 해야할지도 모름\n","\n","    short_rtc_1_, short_rtc_0_, short_rtc_gap_, long_rtc_1_, long_rtc_0_, long_rtc_gap_ = [res_df[col_].to_numpy() for col_ in rtc_cols]\n","    open, high, low = [res_df[col_].to_numpy() for col_ in data_cols]\n","    short_base = (short_rtc_1_ + short_rtc_0_) / 2\n","    long_base = (long_rtc_1_ + long_rtc_0_) / 2\n","    # back_ha_o = res_df['haopen'].shift(1).to_numpy()\n","    # back_ha_c = res_df['haclose'].shift(1).to_numpy()\n","\n","    touch_period = 50\n","    # short_open_res *= (back_ha_c >= back_ha_o) & (ha_o > ha_c)\n","    # short_open_res *= ha_o == ha_h\n","    # short_open_res *= np_timeidx % tf_entry == tf_entry - 1     \n","    # short_a_touch = pd.Series(np.where(high >= short_rtc_0_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()  # min -> max\n","    short_a_touch = pd.Series(np.where((high >= short_base) & (short_base >= open), np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).min().to_numpy()   # wave_range\n","    short_b_touch = pd.Series(np.where(low <= short_rtc_1_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨\n","    \n","    # short_en_p = (get_line(short_a_touch, short_rtc_0_) + get_line(short_b_touch, short_rtc_1_)) / 2\n","    # short_base_b = get_line(short_b_touch, short_base)  # touch 시의 base 정보 사용\n","    # short_rtc_gap_b = get_line(short_b_touch, short_rtc_gap_)\n","    # short_open_res *= (high >= short_base_b) & (short_base_b >= open) & (short_a_touch < short_b_touch) & (short_base_b + config.loc_set.point.base_gap * short_rtc_gap_b >= short_base)\n","    short_open_res *= (high >= short_base) & (short_base >= open) & (short_a_touch < short_b_touch) # & (short_base + config.loc_set.point.base_gap * short_rtc_gap_ >= short_base)\n","    \n","    res_df['short_open_{}'.format(strat_version)] = short_open_res\n","\n","    # long_open_res *= (back_ha_c <= back_ha_o) & (ha_o < ha_c)          \n","    # long_open_res *= ha_o == ha_l\n","    # long_open_res *= np_timeidx % tf_entry == tf_entry - 1   \n","    # long_a_touch = pd.Series(np.where(low <= long_rtc_0_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()       \n","    long_a_touch = pd.Series(np.where((open >= long_base) & (long_base >= low), np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).min().to_numpy()       \n","    long_b_touch = pd.Series(np.where(high >= long_rtc_1_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()\n","    \n","    # long_en_p = (get_line(long_a_touch, long_rtc_0_) + get_line(long_b_touch, long_rtc_1_)) / 2\n","    # long_base_b = get_line(long_b_touch, long_base)\n","    # long_rtc_gap_b = get_line(long_b_touch, long_rtc_gap_)\n","    # long_open_res *= (open >= long_base_b) & (long_base_b >= low) & (long_a_touch < long_b_touch) & (long_base_b - config.loc_set.point.base_gap * long_rtc_gap_b <= long_base)\n","    long_open_res *= (open >= long_base) & (long_base >= low) & (long_a_touch < long_b_touch) # & (long_base - config.loc_set.point.base_gap * long_rtc_gap_ <= long_base)\n","    res_df['long_open_{}'.format(strat_version)] = long_open_res\n","\n","    # ---------------- set ep level ---------------- #\n","    # -------- limit ver. -------- #\n","    base_period = 'T'\n","    if config.ep_set.entry_type == \"LIMIT\":\n","      # res_df['short_ep_{}'.format(strat_version)] = res_df['close'] + res_df['short_tp_gap_{}'.format(strat_version)] * config.tr_set.ep_gap\n","      # res_df['long_ep_{}'.format(strat_version)] = res_df['close'] - res_df['long_tp_gap_{}'.format(strat_version)] * config.tr_set.ep_gap    \n","      # res_df['short_ep_{}'.format(strat_version)] = res_df['short_base_{}'.format(base_period)] + res_df['short_rtc_gap_{}'.format(strat_version)] * config.tr_set.ep_gap\n","      # res_df['long_ep_{}'.format(strat_version)] = res_df['long_base_{}'.format(base_period)] - res_df['long_rtc_gap_{}'.format(strat_version)] * config.tr_set.ep_gap    \n","      res_df['short_ep_{}'.format(strat_version)] = short_en_p + res_df['short_rtc_gap_{}'.format(strat_version)] * config.tr_set.ep_gap\n","      res_df['long_ep_{}'.format(strat_version)] = long_en_p - res_df['long_rtc_gap_{}'.format(strat_version)] * config.tr_set.ep_gap   \n","    # -------- market ver. -------- #\n","    else:\n","        res_df['short_ep_{}'.format(strat_version)] = res_df['close']\n","        res_df['long_ep_{}'.format(strat_version)] = res_df['close']\n","\n","    # -------- zoned_ep -------- #\n","    if config.tr_set.c_ep_gap != \"None\":\n","        # res_df['short_ep_org_{}'.format(strat_version)] = res_df['short_ep_{}'.format(strat_version)].copy()\n","        # res_df['long_ep_org_{}'.format(strat_version)] = res_df['long_ep_{}'.format(strat_version)].copy()\n","        res_df['short_ep2_{}'.format(strat_version)] = res_df['short_base_{}'.format(base_period)] + res_df[\n","            'short_rtc_gap_{}'.format(strat_version)] * config.tr_set.c_ep_gap\n","        res_df['long_ep2_{}'.format(strat_version)] = res_df['long_base_{}'.format(base_period)] - res_df[\n","            'long_rtc_gap_{}'.format(strat_version)] * config.tr_set.c_ep_gap\n","\n","    # --------------- tp --------------- #    \n","    # res_df['short_tp_{}'.format(strat_version)] = res_df['close'] - res_df['short_tp_gap_{}'.format(strat_version)] * config.tr_set.tp_gap\n","    # res_df['long_tp_{}'.format(strat_version)] = res_df['close'] + res_df['long_tp_gap_{}'.format(strat_version)] * config.tr_set.tp_gap\n","    res_df['short_tp_{}'.format(strat_version)] = res_df['short_rtc_1_{}'.format(strat_version)] - res_df['short_rtc_gap_{}'.format(strat_version)] * (0.5 + config.tr_set.tp_gap) # 기본으로 .5 포함\n","    res_df['long_tp_{}'.format(strat_version)] = res_df['long_rtc_1_{}'.format(strat_version)] + res_df['long_rtc_gap_{}'.format(strat_version)] * (0.5 + config.tr_set.tp_gap)\n","\n","    # --------------- out --------------- #\n","    # res_df['short_out_{}'.format(strat_version)] = res_df['high'] + res_df['short_out_gap_{}'.format(strat_version)] * config.tr_set.out_gap # open\n","    # res_df['long_out_{}'.format(strat_version)] = res_df['low'] - res_df['long_out_gap_{}'.format(strat_version)] * config.tr_set.out_gap  # open\n","    res_df['short_out_{}'.format(strat_version)] = res_df['short_rtc_0_{}'.format(strat_version)] + res_df['short_rtc_gap_{}'.format(strat_version)] * config.tr_set.out_gap\n","    res_df['long_out_{}'.format(strat_version)] = res_df['long_rtc_0_{}'.format(strat_version)] - res_df['long_rtc_gap_{}'.format(strat_version)] * config.tr_set.out_gap\n","\n","    # -------- zoned_out -------- #\n","    if config.tr_set.t_out_gap != \"None\":\n","        # res_df['short_out_org_{}'.format(strat_version)] = res_df['short_out_{}'.format(strat_version)].copy()\n","        # res_df['long_out_org_{}'.format(strat_version)] = res_df['long_out_{}'.format(strat_version)].copy()\n","        res_df['short_out2_{}'.format(strat_version)] = res_df['short_rtc_0_{}'.format(strat_version)] + res_df['short_rtc_gap_{}'.format(strat_version)] * config.tr_set.t_out_gap\n","        res_df['long_out2_{}'.format(strat_version)] = res_df['long_rtc_0_{}'.format(strat_version)] - res_df['long_rtc_gap_{}'.format(strat_version)] * config.tr_set.t_out_gap\n","\n","    # --------------- bias --------------- #  Todo - 추후, bias_set 독립시키는게 좋지 않을까\n","    end_tick = config.tr_set.end_tick\n","    # ------ bias_info can use future_data ------ #\n","    res_df['short_bias_info_{}'.format(strat_version)] = res_df['dc_lower_T'].shift(-end_tick)  # open / ep_tick 으로부터 end_tick 만큼\n","    res_df['long_bias_info_{}'.format(strat_version)] = res_df['dc_upper_T'].shift(-end_tick)\n","\n","    # bias_thresh 는 결국 tp 가 될 것\n","    res_df['short_bias_thresh_{}'.format(strat_version)] = res_df['short_tp_{}'.format(strat_version)]\n","    res_df['long_bias_thresh_{}'.format(strat_version)] = res_df['long_tp_{}'.format(strat_version)]\n","    # res_df['short_bias_thresh_{}'.format(strat_version)] = res_df['dc_lower_T'] - res_df['short_tp_gap_{}'.format(strat_version)] * config.tr_set.bias_gap\n","    # res_df['long_bias_thresh_{}'.format(strat_version)] = res_df['dc_upper_T'] + res_df['long_tp_gap_{}'.format(strat_version)] * config.tr_set.bias_gap \n","        \n","    return\n"]},{"cell_type":"markdown","metadata":{"id":"HKdUKKl-483N","jp-MarkdownHeadingCollapsed":true,"tags":[]},"source":["### utils_public"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nzOYWA2kqZ0d"},"outputs":[],"source":["# from funcs.funcs_indicator import *\n","# from funcs.funcs_trader import *\n","# import logging\n","# from ast import literal_eval\n","\n","sys_log = logging.getLogger()\n","\n","\n","class OrderSide:\n","    BUY = \"BUY\"\n","    SELL = \"SELL\"\n","    INVALID = None\n","\n","\n","def lvrg_set(res_df, config, open_side, ep_, out_, fee, limit_leverage=50):\n","    strat_version = config.strat_version\n","    if not pd.isnull(out_) and not config.lvrg_set.static_lvrg:\n","      if strat_version in ['v3']:\n","        if open_side == OrderSide.SELL:\n","          loss = out_ / ep_\n","        else:\n","          loss = ep_ / out_\n","      else:  # 이 phase 가 정석, 윗 phase 는 결과가 수익 극대화라 사용함\n","        if open_side == OrderSide.SELL:\n","          loss = ep_ / out_          \n","        else:\n","          loss = out_ / ep_\n","\n","        config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(loss - 1 - (fee + config.trader_set.market_fee))\n","\n","    if not config.lvrg_set.allow_float:\n","        config.lvrg_set.leverage = int(config.lvrg_set.leverage)\n","\n","    # ------------ leverage rejection ------------ #\n","    # 감당하기 힘든 fluc. 의 경우 진입하지 않음 - dynamic_lvrg 사용 경우\n","    if config.lvrg_set.leverage < 1 and config.lvrg_set.lvrg_rejection:\n","    # if config.lvrg_set.leverage >= 1 and config.lvrg_set.lvrg_rejection:\n","        return None\n","    config.lvrg_set.leverage = min(limit_leverage, max(config.lvrg_set.leverage, 1))\n","\n","    return config.lvrg_set.leverage\n","\n","\n","def sync_check(df_, config, order_side=\"OPEN\", row_slice=True):\n","    try:\n","        make_itv_list = [m_itv.replace('m', 'T') for m_itv in literal_eval(config.trader_set.itv_list)]\n","        row_list = literal_eval(config.trader_set.row_list)\n","        rec_row_list = literal_eval(config.trader_set.rec_row_list)\n","        offset_list = literal_eval(config.trader_set.offset_list)\n","\n","        assert len(make_itv_list) == len(offset_list), \"length of itv & offset_list should be equal\"\n","        htf_df_list = [to_htf(df_, itv_=itv_, offset=offset_) for itv_idx, (itv_, offset_)\n","                       in enumerate(zip(make_itv_list, offset_list)) if itv_idx != 0]  #\n","        htf_df_list.insert(0, df_)\n","\n","        # for htf_df_ in htf_df_list:\n","        #     print(htf_df_.tail())\n","\n","        #       Todo        #\n","        #        1. row_list calc.\n","        #           a. indi. 를 만들기 위한 최소 period 가 존재하고, 그 indi. 를 사용한 lb_period 가 존재함\n","        #           b. => default_period + lb_period\n","        #               i. from sync_check, public_indi, ep_point2, ep_dur 의 tf 별 max lb_period check\n","        #                   1. default_period + max lb_period check\n","        #                       a. 현재까지 lb_period_list\n","        #                           h_prev_idx (open / close) 60\n","        #                           dc_period 135\n","        #                           zone_dc_period 135\n","\n","        # --------- slicing (in trader phase only) --------- #\n","        #               --> latency 영향도가 높은 곳은 이곳\n","        if row_slice:   # recursive 가 아닌 indi. 의 latency 를 고려한 slicing\n","            df, df_5T, df_15T, df_30T, df_4H = [df_s.iloc[-row_list[row_idx]:].copy() for row_idx, df_s in enumerate(htf_df_list)]\n","            rec_df, rec_df_5T, rec_df_15T, rec_df_30T, rec_df_4H = [df_s.iloc[-rec_row_list[row_idx]:].copy() for row_idx, df_s in enumerate(htf_df_list)]\n","        else:\n","            df, df_5T, df_15T, df_30T, df_4H = htf_df_list\n","            rec_df, rec_df_5T, rec_df_15T, rec_df_30T, rec_df_4H = htf_df_list\n","\n","        # --------- add indi. --------- #\n","\n","        #        1. 필요한 indi. 는 enlist_epouttp & mr_check 보면서 삽입\n","        #        2. min use_rows 계산을 위해서, tf 별로 gathering 함        #\n","        start_0 = time.time()\n","\n","        df = dc_line(df, None, '1m', dc_period=20)\n","        df = bb_line(df, None, '1m')\n","        # print(df.tail())\n","\n","        df = dc_line(df, df_5T, '5T')\n","        df = bb_line(df, df_5T, '5T')\n","\n","        df = dc_line(df, df_15T, '15T')\n","        df = bb_line(df, df_15T, '15T')\n","\n","        df = bb_line(df, df_30T, '30T')\n","\n","        # print(time.time() - start_0)\n","\n","        # start_0 = time.time()\n","        df = bb_line(df, df_4H, '4H')\n","        # print(time.time() - start_0)\n","\n","        rec_df['rsi_1m'] = rsi(rec_df, 14)  # Todo - recursive, 250 period\n","        df = df.join(to_lower_tf_v2(df, rec_df.iloc[:, [-1]], [-1], backing_i=0), how='inner')  # <-- join same_tf manual\n","        # print(df.rsi_1m.tail())\n","\n","        if order_side in [\"OPEN\"]:\n","            rec_df_5T['ema_5T'] = ema(rec_df_5T['close'], 195)  # Todo - recursive, 1100 period (5T)\n","            df = df.join(to_lower_tf_v2(df, rec_df_5T, [-1]), how='inner')\n","\n","    except Exception as e:\n","        sys_log.error(\"error in sync_check :\", e)\n","    else:\n","        return df\n","\n","\n","def public_indi(res_df, config, np_timeidx, order_side=\"OPEN\"):\n","\n","    strat_version = config.strat_version\n","    res_df = dc_level(res_df, '5T', 1)\n","    res_df = bb_level(res_df, '5T', 1)\n","    # res_df = st_level(res_df, '5T', 1)\n","\n","    res_df = dc_level(res_df, '15T', 1)\n","    res_df = bb_level(res_df, '15T', 1)\n","    res_df = dtk_plot(res_df, dtk_itv2='15T', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line, np_timeidx=np_timeidx)\n","\n","    # res_df = st_level(res_df, '15T', 1)\n","\n","    # res_df = dc_level(res_df, '30T', 1)\n","    # res_df = bb_level(res_df, '30T', 1)\n","    # res_df = st_level(res_df, '30T', 1)\n","\n","    # res_df = bb_level(res_df, 'H', 1)\n","\n","    res_df = bb_level(res_df, '4H', 1)\n","\n","    res_df['dc_upper_v2'.format(strat_version)] = res_df['high'].rolling(config.loc_set.zone.dc_period).max()\n","    res_df['dc_lower_v2'.format(strat_version)] = res_df['low'].rolling(config.loc_set.zone.dc_period).min()\n","\n","    res_df['zone_dc_upper_v2'.format(strat_version)] = res_df['high'].rolling(config.loc_set.zone.zone_dc_period).max()\n","    res_df['zone_dc_lower_v2'.format(strat_version)] = res_df['low'].rolling(config.loc_set.zone.zone_dc_period).min()\n","\n","    if order_side in [\"OPEN\"]:\n","        # start_0 = time.time()\n","        candle_score_v2(res_df, 'T', unsigned=False)\n","        # print(\"~ wick_score() elapsed time : {}\".format(time.time() - start_0))\n","\n","        # start_0 = time.time()\n","        h_candle_v3(res_df, '15T')\n","        h_candle_v3(res_df, 'H')\n","        # sys_log.warning(\"~ h_wick_score elapsed time : {}\".format(time.time() - start_0))\n","        # print(\"wick_score() ~ h_candle() elapsed time : {}\".format(time.time() - start_0))\n","\n","        hc_itv = 'H'\n","        h_candle_col = ['open_{}'.format(hc_itv), 'high_{}'.format(hc_itv), 'low_{}'.format(hc_itv), 'close_{}'.format(hc_itv)]\n","        candle_score_v2(res_df, hc_itv, ohlc_col=h_candle_col, unsigned=False)\n","\n","    #     temp indi.    #\n","    # res_df[\"ma30_1m\"] = res_df['close'].rolling(30).mean()\n","    # res_df[\"ma60_1m\"] = res_df['close'].rolling(60).mean()\n","    # res_df = dtk_plot(res_df, dtk_itv2='15T', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line, np_timeidx=np_timeidx)\n","\n","    return\n","\n","def ep_out(res_df, config, op_idx, e_j, tp_j, np_datas, open_side):  \n","  h, l = np_datas\n","  strat_version = config.strat_version\n","  ep_out = 0\n","  \n","  if strat_version in ['v3_4']:\n","    if e_j - op_idx >= config.ep_set.ep_out_tick:\n","      ep_out = 1\n","  else:\n","    if open_side == OrderSide.SELL:\n","      short_rtc_1_ = res_df['short_rtc_1_{}'.format(strat_version)].to_numpy()  # id 에 따라 dynamic 변수라 이곳에서 numpy 화 진행\n","      short_rtc_gap_ = res_df['short_rtc_gap_{}'.format(strat_version)].to_numpy()\n","      if l[e_j] <= short_rtc_1_[tp_j] - short_rtc_gap_[tp_j] * config.ep_set.ei_k:\n","        ep_out = 1\n","    else:\n","      long_rtc_1_ = res_df['long_rtc_1_{}'.format(strat_version)].to_numpy()  # iloc 이 빠를까, to_numpy() 가 빠를까  # 3.94 ms --> 5.34 ms (iloc)\n","      long_rtc_gap_ = res_df['long_rtc_gap_{}'.format(strat_version)].to_numpy()\n","      if h[e_j] >= long_rtc_1_[tp_j] + long_rtc_gap_[tp_j] * config.ep_set.ei_k:\n","        ep_out = 1\n","  \n","  return ep_out\n","\n","def ep_loc_point2(res_df, config, i, out_j, point2_list, side=OrderSide.SELL):\n","  dc_upper_1T, dc_upper_15T, dc_lower_1T, dc_lower_15T, close, resi_T, sup_T, wick_score = point2_list\n","  allow_ep_in = 1\n","  if config.strat_version in ['v5_2']:\n","    if side == OrderSide.SELL:\n","      allow_ep_in *= (dc_upper_1T[i - 1] <= dc_upper_15T[i]) & \\\n","            (dc_upper_15T[i - 1] != dc_upper_15T[i])\n","    else:\n","      allow_ep_in *= (dc_lower_1T[i - 1] >= dc_lower_15T[i]) & \\\n","              (dc_lower_15T[i - 1] != dc_lower_15T[i])\n","\n","  if config.strat_version in ['v3_4']:\n","    wick_score_list = literal_eval(config.ep_set.point2.wick_score_list)\n","    if side == OrderSide.SELL:\n","      allow_ep_in *= close[i] < sup_T[i - 1]\n","      if len(wick_score_list) != 0:\n","        allow_ep_in *= wick_score[i] < -wick_score_list[0]\n","    else:\n","      allow_ep_in *= close[i] > resi_T[i - 1]\n","      if len(wick_score_list) != 0:\n","        allow_ep_in *= wick_score[i] > wick_score_list[0]\n","\n","  if allow_ep_in:\n","    out_j = i\n","  return allow_ep_in, out_j\n","\n","\n","# vectorized calc.\n","def ep_loc_v2(res_df, config, np_timeidx, show_detail=True, ep_loc_side=OrderSide.SELL):\n","    strat_version = config.strat_version\n","\n","    # ------- param init ------- #\n","    open_side = None\n","    len_df = len(res_df)\n","    mr_res = np.ones(len_df)\n","    zone_arr = np.full(len_df, 'n')\n","\n","    # ------ process 한번에 처리해서 param_check 만 ver. 별로 하면 될 것 ------ #\n","    #     => public_indi() 가 될 것\n","    #     1. 사용한 param 정보와 matching 된 data 병렬로 나열 logging 될 것\n","    tp_fee, out_fee = calc_tp_out_fee_v2(config)\n","\n","    # ------------ candle_score ------------ #    \n","    wick_score_list = literal_eval(config.loc_set.point.wick_score_list)\n","    if len(wick_score_list) != 0:\n","      score_itv_list = literal_eval(config.loc_set.point.score_itv_list)\n","      # ------ candle_score_v0 (1m initial tick 기준임) ------ #  Todo - higher timeframe 경우 back_data 사용해야함\n","      for wick_score_, score_itv_ in zip(wick_score_list, score_itv_list):\n","        wick_score = res_df['wick_score_{}'.format(score_itv_)].to_numpy()\n","        if ep_loc_side == OrderSide.SELL:\n","          mr_res *= wick_score <= -wick_score_\n","        else:\n","          mr_res *= wick_score >= wick_score_\n","\n","    # -------------- spread scheduling -------------- #\n","    if config.loc_set.zone.short_spread != \"None\":\n","      bb_base_5T = res_df['bb_base_5T'].to_numpy()  # to_numpy() 는 ep_loc 에서 진행됨\n","      bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","      bb_upper_5T = res_df['bb_upper_5T'].to_numpy()\n","      dc_lower_5T = res_df['dc_lower_5T'].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= (bb_base_5T - bb_lower_5T - tp_fee * bb_base_5T) / (bb_base_5T - bb_lower_5T + out_fee * bb_base_5T) >= config.loc_set.zone.short_spread\n","      else:\n","        # mr_res *= (bb_base_5T - dc_lower_5T - tp_fee * bb_upper_5T) / (bb_base_5T - dc_lower_5T + out_fee * bb_base_5T) >= config.loc_set.zone.long_spread\n","        mr_res *= (bb_upper_5T - dc_lower_5T - tp_fee * bb_upper_5T) / (bb_upper_5T - dc_lower_5T + out_fee * bb_upper_5T) >= config.loc_set.zone.long_spread\n","\n","    # -------------- dtk -------------- #\n","    if config.loc_set.zone.dt_k != \"None\":\n","      # ------ dc_v2 ------ #\n","      dc_lower_v2 = res_df['dc_lower_v2'.format(strat_version)].to_numpy()\n","      short_dtk_1_ = res_df['short_dtk_1_{}'.format(strat_version)].to_numpy() - \\\n","              res_df['short_dtk_gap_{}'.format(strat_version)].to_numpy() * config.loc_set.zone.dt_k\n","      dc_upper_v2 = res_df['dc_upper_v2'.format(strat_version)].to_numpy()\n","      long_dtk_1_ = res_df['long_dtk_1_{}'.format(strat_version)].to_numpy() + \\\n","              res_df['long_dtk_gap_{}'.format(strat_version)].to_numpy() * config.loc_set.zone.dt_k\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= dc_lower_v2 >= short_dtk_1_\n","      else:\n","        mr_res *= dc_upper_v2 <= long_dtk_1_\n","\n","    # ------------ zone rejection  ------------ #\n","    # config 로 통제할 수 없는 rejection 은 strat_version 으로 조건문을 나눔 (lvrg_set 과 동일)\n","    if config.loc_set.zone.zone_rejection:        \n","        # ------ envel. ------ #\n","        # ep_loc check 기준 idx 가 entry 기준이라는 걸 명심\n","        if strat_version in ['v3_2']:\n","          hc_itv = '15T'\n","          dc_itv = '15T'\n","          shift_num = [0, to_itvnum(hc_itv)]\n","          div_res = [1, 0]\n","          for itv_num, res in zip(shift_num, div_res):\n","            close_ = res_df['close_{}'.format(hc_itv)].shift(itv_num).to_numpy()  # close_bar timein 사용하는 경우, 특수로 shift(0) 사용가능\n","            if ep_loc_side == OrderSide.SELL:\n","              dc_lower_ = res_df['dc_lower_%s' % dc_itv].shift(itv_num).to_numpy()\n","              mr_res *= (close_ < dc_lower_) == res\n","            else:\n","              dc_upper_ = res_df['dc_upper_%s' % dc_itv].shift(itv_num).to_numpy()\n","              mr_res *= (close_ > dc_upper_) == res\n","\n","        # if strat_version in ['v3_3', 'v3_4']:\n","        #   hc_itv = '15T'\n","        #   dc_itv = '15T'\n","        #   itv_num = to_itvnum(hc_itv)\n","        #   close_ = res_df['close_{}'.format(hc_itv)].shift(itv_num).to_numpy()   # 따라서 future_data 사용시, shifting 필요함\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     dc_lower_ = res_df['dc_lower_%s' % dc_itv].shift(itv_num).to_numpy()\n","        #     mr_res *= close_ < dc_lower_\n","        #   else:\n","        #     dc_upper_ = res_df['dc_upper_%s' % dc_itv].shift(itv_num).to_numpy()\n","        #     mr_res *= close_ > dc_upper_\n","\n","        # ------ degree ------ #\n","        # if strat_version in ['v3_3', 'v3_4']:\n","        #   norm_close_15 = res_df['norm_close_15'].to_numpy()\n","        #   b1_norm_close_15 = res_df['norm_close_15'].shift(15).to_numpy()\n","        #   degree_list = literal_eval(config.loc_set.zone.degree_list)\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     mr_res *= norm_close_15 <= -degree_list[0]\n","        #     # mr_res *= b1_norm_close_15 <= -degree_list[1]\n","        #   else:\n","        #     mr_res *= norm_close_15 >= degree_list[0]\n","        #     # mr_res *= b1_norm_close_15 >= degree_list[1]\n","\n","        # ------ bb ------ #\n","        close = res_df['close'].to_numpy()\n","\n","        # if strat_version in ['v3_3']:\n","        #   open = res_df['open'].to_numpy()\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     bb_lower_1m = res_df['bb_lower_1m'].to_numpy()\n","        #     # mr_res *= close <= bb_lower_1m\n","        #     mr_res *= open <= bb_lower_1m\n","        #   else:\n","        #     bb_upper_1m = res_df['bb_upper_1m'].to_numpy()\n","        #     # mr_res *= close >= bb_upper_1m\n","        #     mr_res *= open >= bb_upper_1m\n","\n","        if strat_version in ['v5_2']:\n","          bb_upper2_ = res_df['bb_upper2_%s' % config.loc_set.zone.bbz_itv].to_numpy()\n","          bb_lower2_ = res_df['bb_lower2_%s' % config.loc_set.zone.bbz_itv].to_numpy()\n","          if ep_loc_side == OrderSide.SELL:\n","            mr_res *= bb_upper2_ < close\n","          else:\n","            mr_res *= bb_lower2_ > close\n","\n","        # ------ dc ------ #        \n","        # if strat_version in ['v3_3']:\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     dc_lower_ = res_df['dc_lower_1m'].to_numpy()\n","        #     b1_dc_lower_ = res_df['dc_lower_1m'].shift(1).to_numpy()\n","        #     mr_res *= dc_lower_ < b1_dc_lower_\n","        #   else:\n","        #     dc_upper_ = res_df['dc_upper_1m'].to_numpy()\n","        #     b1_dc_upper_ = res_df['dc_upper_1m'].shift(1).to_numpy()\n","        #     mr_res *= dc_upper_ > b1_dc_upper_\n","\n","        # ------ sar ------ #\n","        # if strat_version in ['v3_3']:\n","          # sar_uptrend_3T = res_df['sar_uptrend_3T'].to_numpy()\n","          # if ep_loc_side == OrderSide.SELL:\n","          #   mr_res *= sar_uptrend_3T == 0\n","          # else:\n","          #   mr_res *= sar_uptrend_3T == 1\n","\n","        # ------ ema ------ #\n","        if strat_version in ['v5_2']: # 'v3'\n","          ema_5T = res_df['ema_5T'].to_numpy()\n","          if ep_loc_side == OrderSide.SELL:\n","            mr_res *= close < ema_5T\n","          else:\n","            mr_res *= close > ema_5T\n","\n","    # -------------- zoned tr_set - post_work -------------- #\n","    if config.tr_set.c_ep_gap != \"None\" or config.tr_set.t_out_gap != \"None\":\n","        #       by zone_dtk       #\n","        #         c_zone        #\n","        zone_dc_upper_v2_ = res_df['zone_dc_upper_v2'.format(strat_version)].to_numpy()\n","        long_dtk_plot_1 = res_df['long_dtk_plot_1'].to_numpy() + res_df['long_dtk_plot_gap'].to_numpy() * config.loc_set.zone.zone_dt_k\n","        zone_dc_lower_v2_ = res_df['zone_dc_lower_v2'.format(strat_version)].to_numpy()\n","        short_dtk_plot_1 = res_df['short_dtk_plot_1'].to_numpy() - res_df['short_dtk_plot_gap'].to_numpy() * config.loc_set.zone.zone_dt_k\n","        if ep_loc_side == OrderSide.SELL:\n","          zone_res = zone_dc_upper_v2_ > long_dtk_plot_1  # mr_res 와는 별개임\n","          pos = 'short'\n","        else:\n","          zone_res = zone_dc_lower_v2_ < short_dtk_plot_1\n","          pos = 'long'\n","\n","        # static 여부에 따른 vectorized adj. - dynamic 은 vectorize 불가\n","        if config.ep_set.static_ep and config.tr_set.c_ep_gap != \"None\":\n","          res_df['{}_ep_{}'.format(pos, strat_version)][zone_res] = res_df['{}_ep2_{}'.format(pos, strat_version)][zone_res]\n","        if config.out_set.static_out and config.tr_set.t_out_gap != \"None\":\n","          res_df['{}_out_{}'.format(pos, strat_version)][~zone_res] = res_df['{}_out2_{}'.format(pos, strat_version)][~zone_res]  # t_zone 에 대한 out2 setting \n","        zone_arr = np.where(zone_res == 1, 'c', 't')\n","\n","    return mr_res, zone_arr  # mr_res 의 True idx 가 open signal"]},{"cell_type":"markdown","metadata":{"id":"JjKHyqftzhD7","tags":[]},"source":["### set config (override available)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"q_4E-zH02WJy"},"outputs":[],"source":["#     caution : MARKET / LIMIT spelling   #\n","#      json doesn't support single quotes     #\n","\n","param_dict = \\\n","{\n","  \"strat_version\": \"v3_5\",\n","  \"trader_set\": {\n","    \"run\": 1,\n","    \"df_log\": 0,\n","    \"open_index\": -1,\n","    \"complete_index\": -2,\n","    \"limit_fee\": 0.0002,\n","    \"market_fee\": 0.0004,\n","    \"initial_asset\": 3500,\n","    \"asset_changed\": 0,\n","    \"symbol\": \"ETHUSDT\",\n","    \"symbol_changed\": 0,\n","    \"itv_list\": \"['T', '5T', '15T', '30T', '4H']\",\n","    \"row_list\": \"[200, 160, 30, 25, 25]\",\n","    \"rec_row_list\": \"[250, 1100, 1, 1, 1]\",\n","    \"offset_list\": \"['1h', '1h', '1h', '1h', '1h']\",\n","    \"bar_close_second\": 59,\n","    \"realtime_term\": 0.01,\n","    \"api_retry_term\": 3,\n","    \"check_entry_sec\": 10,\n","    \"entry_execution_wait\": 60,\n","    \"breakout_qty_ratio\": 0.97,\n","    \"qty_check_term\": 30,\n","    \"exit_execution_wait\": 60,\n","    \"close_complete_term\": 5,\n","    \"save_stacked_df\": 0,\n","    \"stacked_df_exist\": 1\n","  },\n","  \"pos_set\": {\n","    \"short_inversion\": 0,\n","    \"long_inversion\": 0,\n","    \"short_ban\": 1,\n","    \"long_ban\": 0\n","  },\n","  \"loc_set\": {\n","    \"zone\": {\n","      \"short_spread\": \"None\",\n","      \"long_spread\": \"None\",\n","      \"tr_thresh\": \"None\",\n","      \"dtk_itv\": \"5T\",\n","      \"dt_k\": \"None\",\n","      \"dc_period\": 135,\n","      \"use_dtk_line\": 0,\n","      \"zone_rejection\": 1,\n","      \"degree_list\": \"[50, 0]\",\n","      \"gap_mply\": 1,\n","      \"hc_itv\": 60,\n","      \"bbz_itv\": \"None\",\n","      \"zone_dt_k\": 0.4,\n","      \"zone_dc_period\": 135\n","    },\n","    \"point\": {\n","      \"exp_itv\": \"5T\",\n","      \"rtc_itv1\": \"T\",\n","      \"rtc_itv0\": \"T\",\n","      \"tf_entry\": 5,\n","      \"base_gap\": 0.1,\n","      \"wick_score_list\": \"[]\",\n","      \"body_score_list\": \"[]\",\n","      \"score_itv_list\": \"[]\",      \n","      \"osc_band\": 20\n","    }\n","  },\n","  \"tr_set\": {\n","    \"ep_gap\": 0,\n","    \"tp_gap\": 0,\n","    \"decay_gap\": \"None\",\n","    \"out_gap\": 0,\n","    \"c_ep_gap\": \"None\",\n","    \"t_out_gap\": \"None\",\n","    \"bias_gap\": 0,\n","    \"end_tick\": 500\n","  }, \n","  \"ep_set\": {\n","    \"entry_type\": \"LIMIT\",\n","    \"static_ep\": 1,\n","    \"ei_k\": 0.36,\n","    \"ep_out_tick\": 20,    \n","    \"point2\": {\n","      \"use_point2\": 0,\n","      \"entry_type\": \"MARKET\",\n","      \"wick_score_list\": \"[]\",\n","      \"body_score_list\": \"[]\",\n","      \"score_itv_list\": \"['T']\"\n","    }\n","  },\n","  \"tp_set\": {\n","    \"non_tp\": 0,\n","    \"static_tp\": 1,\n","    \"tp_onexec\": 0,\n","    \"decay_term\": 60,\n","    \"partial_num\": 1,\n","    \"partial_qty_divider\": 1.5\n","  },\n","  \"out_set\": {\n","    \"hl_out\": 1,\n","    \"static_out\": 1,\n","    \"out_onexec\": 0,\n","    \"tf_exit\": \"None\",\n","    \"rsi_exit\": 0\n","  },\n","  \"lvrg_set\": {\n","    \"leverage\": 2,\n","    \"static_lvrg\": 1,\n","    \"allow_float\": 0,\n","    \"target_pct\": 0.12,\n","    \"lvrg_rejection\": 0\n","  }\n","}\n","\n","config = EasyDict(param_dict)\n","# param_json = json.dumps(param_dict, indent=2)"]},{"cell_type":"markdown","metadata":{"id":"dzla8i9_ysmP","jp-MarkdownHeadingCollapsed":true,"tags":[]},"source":["#### save config"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":544,"status":"ok","timestamp":1639994748940,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"FlNGKvW_w2za","outputId":"c575ce69-def0-4e6c-c949-a63707467b2e"},"outputs":[{"name":"stdout","output_type":"stream","text":["/content/drive/My Drive/Colab Notebooks/JnQ/config/config_v5_2.1220_candlejson dumped !\n"]}],"source":["config_name = \"config_v5_2.1220_candlejson\"\n","# config_name = \"config_v3.json\"\n","cfg_full_path = os.path.join(current_path, \"config\", config_name)\n","\n","\n","with open(cfg_full_path, 'w') as cfg:\n","    json.dump(config1, cfg, indent=2)\n","    print(\"{} dumped !\".format(cfg_full_path))"]},{"cell_type":"markdown","metadata":{"id":"rLI8unIyroiC","tags":[]},"source":["## run"]},{"cell_type":"code","source":["funcs = [ep_out, ep_loc_point2, lvrg_set]\n","\n","id_idx_list = [0]  # ID_arr 에서 import 할 id_idx 선택\n","public_override = 1\n","utils_override = 1\n","config_override = 1\n","\n","# ------ config_list 와 같은 org_var 에 override 하는거 다시 생각하기 ------ #\n","ID_list = ID_arr[id_idx_list]\n","utils_list = utils_arr[id_idx_list]\n","config_list = config_arr[id_idx_list]\n","\n","if config_override or utils_override:\n","  assert len(config_list) == 1\n","  if config_override:\n","    config_list[0] = config\n","    ID_list[0] = config.strat_version\n","  \n","config = config_list[0]  # base config = config_list[0]\n","tp_fee, out_fee = calc_tp_out_fee_v2(config)   # -> rev_pr 때문에 일단 이곳에도 선언함\n","\n","# ------- inversion set ------- #\n","inversion = 0\n","fdist_thresh = 1\n","# ------- plot param ------- #\n","show_detail = 0\n","# ------- temp param ------- #\n","allow_osc_touch = 0\n","rsi_gap = 5\n","early_out_tpg = 0.36\n","\n","# ------- just printing config ------- #\n","# ['strat_version', 'pos_set', 'loc_set', 'tr_set', 'ep_set', 'tp_set', 'out_set', 'lvrg_set']\n","_ = [print(json.dumps(config[key_], indent=1), end=' ') for key_ in ['strat_version', 'loc_set', 'tr_set', 'ep_set', 'tp_set', 'out_set', 'lvrg_set']]"],"metadata":{"id":"qBJfPsmJzVIr","executionInfo":{"status":"ok","timestamp":1647922548237,"user_tz":-540,"elapsed":5,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"bda49bd0-3332-47c6-9a37-eb927cac17ae"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\"v3_5\" {\n"," \"zone\": {\n","  \"short_spread\": \"None\",\n","  \"long_spread\": \"None\",\n","  \"tr_thresh\": \"None\",\n","  \"dtk_itv\": \"5T\",\n","  \"dt_k\": \"None\",\n","  \"dc_period\": 135,\n","  \"use_dtk_line\": 0,\n","  \"zone_rejection\": 1,\n","  \"degree_list\": \"[50, 0]\",\n","  \"gap_mply\": 1,\n","  \"hc_itv\": 60,\n","  \"bbz_itv\": \"None\",\n","  \"zone_dt_k\": 0.4,\n","  \"zone_dc_period\": 135\n"," },\n"," \"point\": {\n","  \"exp_itv\": \"5T\",\n","  \"rtc_itv1\": \"T\",\n","  \"rtc_itv0\": \"T\",\n","  \"tf_entry\": 5,\n","  \"base_gap\": 0.1,\n","  \"wick_score_list\": \"[]\",\n","  \"body_score_list\": \"[]\",\n","  \"score_itv_list\": \"[]\",\n","  \"osc_band\": 20\n"," }\n","} {\n"," \"ep_gap\": 0,\n"," \"tp_gap\": 0,\n"," \"decay_gap\": \"None\",\n"," \"out_gap\": 0,\n"," \"c_ep_gap\": \"None\",\n"," \"t_out_gap\": \"None\",\n"," \"bias_gap\": 0,\n"," \"end_tick\": 500\n","} {\n"," \"entry_type\": \"LIMIT\",\n"," \"static_ep\": 1,\n"," \"ei_k\": 0.36,\n"," \"ep_out_tick\": 20,\n"," \"point2\": {\n","  \"use_point2\": 0,\n","  \"entry_type\": \"MARKET\",\n","  \"wick_score_list\": \"[]\",\n","  \"body_score_list\": \"[]\",\n","  \"score_itv_list\": \"['T']\"\n"," }\n","} {\n"," \"non_tp\": 0,\n"," \"static_tp\": 1,\n"," \"tp_onexec\": 0,\n"," \"decay_term\": 60,\n"," \"partial_num\": 1,\n"," \"partial_qty_divider\": 1.5\n","} {\n"," \"hl_out\": 1,\n"," \"static_out\": 1,\n"," \"out_onexec\": 0,\n"," \"tf_exit\": \"None\",\n"," \"rsi_exit\": 0\n","} {\n"," \"leverage\": 2,\n"," \"static_lvrg\": 1,\n"," \"allow_float\": 0,\n"," \"target_pct\": 0.12,\n"," \"lvrg_rejection\": 0\n","} "]}]},{"cell_type":"code","source":["# ------ slicing res_df ------ #\n","res_df = res_df_.loc[pd.to_datetime(\"2020-09-05 00:00:59.999\"):] # pd.to_datetime(\"2022-01-10 00:00:59.999\"), pd.to_datetime(\"2021-10-04 02:39:59.999000\")\n","\n","np_timeidx = np.array([intmin_np(date_) for date_ in res_df.index.to_numpy()])\n","\n","# ------------ public_indi ------------ # - 딱히 반복될 이유가 없는 phase - annot. 달때, why 까지 적어주면 좋음\n","start_0 = time.time()\n","if public_override:\n","    public_indi(res_df, config, np_timeidx)  # 현재 대부분의 시간은 h_candle 에서 소비되고 있음\n","else:\n","    utils_public.public_indi(res_df, config, np_timeidx)\n","print(\"public_indi elapsed time :\", time.time() - start_0)\n","\n","# ------------ make data_list ------------ # - 반복될 이유가 없는 phase - public_indo 에 종속\n","start_0 = time.time()\n","ohlc_cols = ['open', 'high', 'low', 'close']\n","ohlc_list = [res_df[col_].to_numpy() for col_ in ohlc_cols]\n","point2_cols = ['dc_upper_T', 'dc_upper_15T', 'dc_lower_T', 'dc_lower_15T', 'close', 'resi_T', 'sup_T'] + ['wick_score_{}'.format(s_itv) for s_itv in literal_eval(config.ep_set.point2.score_itv_list)]\n","point2_list = [res_df[col_].to_numpy() for col_ in point2_cols]\n","market_data_cols = ['close', 'bb_lower_5T', 'bb_upper_5T', 'rsi_T', 'haopen', 'hahigh', 'halow', 'haclose']   # Todo - public_indi 이전에 해야할지도 모름\n","market_data_list = [res_df[col_].to_numpy() for col_ in market_data_cols]\n","print(\"make data_list elapsed time :\", time.time() - start_0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WstWVNihCNH8","executionInfo":{"status":"ok","timestamp":1647922551988,"user_tz":-540,"elapsed":2852,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"685c891c-9770-40eb-bbb5-953479388400"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["public_indi elapsed time : 1.9272551536560059\n","make data_list elapsed time : 0.0017502307891845703\n"]}]},{"cell_type":"markdown","source":["### idep_plot"],"metadata":{"id":"RqRF1eyZ0xBL"}},{"cell_type":"code","source":["# ------ edit utils config ------ #\n","# config_list[0].loc_set.point.base_gap = -0.0\n","config_list[0].tr_set.ep_gap = 0.5\n","# # # config_list[0].tr_set.tp_gap = 0.5\n","config_list[0].tr_set.out_gap = 1.48\n","# config_list[0].tr_set.bias_gap = 1.5\n","# #  rs_channel_v2(res_df_, period=6, itv='T', type='OUT')"],"metadata":{"id":"_iYcJk8nK8Yq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["if utils_override:   # 현재, utils_override 하는 경우 1개의 ID 만 허용함 \n","  start_0 = time.time()\n","  enlist_rtc(res_df, config, np_timeidx)\n","  print(\"enlist_rtc elapsed time :\", time.time() - start_0)\n","  start_0 = time.time()\n","  enlist_tr(res_df, config, np_timeidx)    \n","  print(\"enlist_tr elapsed time :\", time.time() - start_0)\n","else:\n","    start_0 = time.time()\n","    for utils_, config_ in zip(utils_list, config_list):\n","        utils_.enlist_rtc(res_df, config_, np_timeidx)\n","        utils_.enlist_tr(res_df, config_, np_timeidx)\n","    print(\"elapsed time :\", time.time() - start_0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iI39YI_5GguK","executionInfo":{"status":"ok","timestamp":1647926439928,"user_tz":-540,"elapsed":412,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"897e1eec-64f1-42c6-dc1a-e652dc5854ac"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["enlist_rtc elapsed time : 0.05979418754577637\n","enlist_tr elapsed time : 0.41730451583862305\n"]}]},{"cell_type":"code","source":["# ------ edit loc_set config ------ #\n"],"metadata":{"id":"gfDSOGMd91rE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["open_info_df = get_open_info_df(ep_loc_v2, res_df, np_timeidx, ID_list, config_list, id_idx_list)  # --> point & dur. 관련 (loc_set) param 에 종속 (open_info 가 변경되는게 아니라면, 재실행할 필요없음)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9DPgykxQ92mU","executionInfo":{"status":"ok","timestamp":1647926442059,"user_tz":-540,"elapsed":1014,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"bc843ca5-6180-4d83-e7fe-72f0f1f7dcc8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 1.353053092956543\n"]}]},{"cell_type":"code","source":["# ------ edit entry & exit (ep, tp, out, ..) config ------ #\n","# config_list[0].ep_set.ei_k = -0.\n","# config_list[0].ep_set.ep_out_tick = 20 -> v3_4 use this config.\n","# config_list[0].ep_set.point2.use_point2 = 1\n","# config_list[0].ep_set.point2.entry_type = \"LIMIT\"\n","# config_list[0].ep_set.point2.wick_score_list = str([])\n","# config_list[0].tp_set.static_tp = 1\n","# config_list[0].tp_set.non_tp = 0 # 0 1\n","# config_list[0].out_set.hl_out = 1\n","# config_list[0].out_set.tf_exit = \"None\" # 15 \"None\"\n","# config_list[0].lvrg_set.static_lvrg = 0\n","# config_list[0].lvrg_set.target_pct = 0.01\n","# config_list[0].lvrg_set.lvrg_rejection = 0\n","# config_list[0].lvrg_set.leverage = 2"],"metadata":{"id":"KqVkg236t_f2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_bias_arr, long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_bias_arr = \\\n","get_res(res_df, open_info_df, ohlc_list, point2_list, market_data_list, config_list, np_timeidx, funcs, test_ratio=0.1, plot_is=1, signi=False)   # open 이 많을 수록 en_ex_pairing elapsed time : 11.58370590209961"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":606},"id":"HHq6cr9GPBot","executionInfo":{"status":"ok","timestamp":1647926448417,"user_tz":-540,"elapsed":6360,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"a586b9b6-a491-4f22-87d2-5cef71f30844"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 3.675522804260254\n","short_obj.shape : (999, 5)\n","long_obj.shape : (853, 5)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1728x576 with 6 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["idep_plot_v6 elapsed time : 1.9780385494232178\n"]}]},{"cell_type":"markdown","metadata":{"jp-MarkdownHeadingCollapsed":true,"tags":[],"id":"Ksth13T0spcQ"},"source":["### significance_v2"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pZlZCr2lspcR","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1647414629726,"user_tz":-540,"elapsed":152768,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"84b80a7f-9306-46f0-d9f8-12d936ed8c93"},"outputs":[{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 3.651292562484741\n","short_obj.shape : (3435, 5)\n","long_obj.shape : (2796, 5)\n","idep_plot_v6 elapsed time : 0.4078540802001953\n","en_ex_pairing elapsed time : 1.5504961013793945\n","short_obj.shape : (3312, 5)\n","long_obj.shape : (2682, 5)\n","idep_plot_v6 elapsed time : 0.28289341926574707\n","en_ex_pairing elapsed time : 1.6230182647705078\n","short_obj.shape : (3228, 5)\n","long_obj.shape : (2608, 5)\n","idep_plot_v6 elapsed time : 0.28797125816345215\n","en_ex_pairing elapsed time : 1.4132130146026611\n","short_obj.shape : (3145, 5)\n","long_obj.shape : (2558, 5)\n","idep_plot_v6 elapsed time : 0.25912976264953613\n","en_ex_pairing elapsed time : 1.416189432144165\n","short_obj.shape : (3084, 5)\n","long_obj.shape : (2494, 5)\n","idep_plot_v6 elapsed time : 0.2473134994506836\n","en_ex_pairing elapsed time : 1.42384672164917\n","short_obj.shape : (3009, 5)\n","long_obj.shape : (2446, 5)\n","idep_plot_v6 elapsed time : 0.2582120895385742\n","en_ex_pairing elapsed time : 1.5548255443572998\n","short_obj.shape : (2940, 5)\n","long_obj.shape : (2397, 5)\n","idep_plot_v6 elapsed time : 0.2435319423675537\n","en_ex_pairing elapsed time : 1.428175687789917\n","short_obj.shape : (2855, 5)\n","long_obj.shape : (2339, 5)\n","idep_plot_v6 elapsed time : 0.23353195190429688\n","en_ex_pairing elapsed time : 1.442486047744751\n","short_obj.shape : (2810, 5)\n","long_obj.shape : (2291, 5)\n","idep_plot_v6 elapsed time : 0.23046541213989258\n","en_ex_pairing elapsed time : 1.472785234451294\n","short_obj.shape : (2747, 5)\n","long_obj.shape : (2219, 5)\n","idep_plot_v6 elapsed time : 0.23297119140625\n","en_ex_pairing elapsed time : 1.4728832244873047\n","short_obj.shape : (2697, 5)\n","long_obj.shape : (2173, 5)\n","idep_plot_v6 elapsed time : 0.22844696044921875\n","en_ex_pairing elapsed time : 1.5686852931976318\n","short_obj.shape : (2618, 5)\n","long_obj.shape : (2134, 5)\n","idep_plot_v6 elapsed time : 0.21610426902770996\n","en_ex_pairing elapsed time : 1.4307544231414795\n","short_obj.shape : (2549, 5)\n","long_obj.shape : (2089, 5)\n","idep_plot_v6 elapsed time : 0.18767762184143066\n","en_ex_pairing elapsed time : 1.470794677734375\n","short_obj.shape : (2496, 5)\n","long_obj.shape : (2046, 5)\n","idep_plot_v6 elapsed time : 0.18993782997131348\n","en_ex_pairing elapsed time : 2.956047296524048\n","short_obj.shape : (2447, 5)\n","long_obj.shape : (2000, 5)\n","idep_plot_v6 elapsed time : 0.28296971321105957\n","en_ex_pairing elapsed time : 2.9465339183807373\n","short_obj.shape : (2402, 5)\n","long_obj.shape : (1953, 5)\n","idep_plot_v6 elapsed time : 0.5762262344360352\n","en_ex_pairing elapsed time : 3.8134777545928955\n","short_obj.shape : (2361, 5)\n","long_obj.shape : (1923, 5)\n","idep_plot_v6 elapsed time : 0.30879783630371094\n","en_ex_pairing elapsed time : 2.4767918586730957\n","short_obj.shape : (2331, 5)\n","long_obj.shape : (1873, 5)\n","idep_plot_v6 elapsed time : 0.192216157913208\n","en_ex_pairing elapsed time : 1.5736761093139648\n","short_obj.shape : (2278, 5)\n","long_obj.shape : (1838, 5)\n","idep_plot_v6 elapsed time : 0.1746375560760498\n","en_ex_pairing elapsed time : 1.438066005706787\n","short_obj.shape : (2233, 5)\n","long_obj.shape : (1811, 5)\n","idep_plot_v6 elapsed time : 0.1701948642730713\n","en_ex_pairing elapsed time : 1.4740848541259766\n","short_obj.shape : (2194, 5)\n","long_obj.shape : (1782, 5)\n","idep_plot_v6 elapsed time : 0.17231512069702148\n","en_ex_pairing elapsed time : 1.4735777378082275\n","short_obj.shape : (2161, 5)\n","long_obj.shape : (1749, 5)\n","idep_plot_v6 elapsed time : 0.1759028434753418\n","en_ex_pairing elapsed time : 1.4555590152740479\n","short_obj.shape : (2125, 5)\n","long_obj.shape : (1721, 5)\n","idep_plot_v6 elapsed time : 0.17040443420410156\n","en_ex_pairing elapsed time : 1.4475681781768799\n","short_obj.shape : (2088, 5)\n","long_obj.shape : (1682, 5)\n","idep_plot_v6 elapsed time : 0.16408944129943848\n","en_ex_pairing elapsed time : 1.4725847244262695\n","short_obj.shape : (2043, 5)\n","long_obj.shape : (1658, 5)\n","idep_plot_v6 elapsed time : 0.15368890762329102\n","en_ex_pairing elapsed time : 1.6022164821624756\n","short_obj.shape : (1990, 5)\n","long_obj.shape : (1626, 5)\n","idep_plot_v6 elapsed time : 0.15308260917663574\n","en_ex_pairing elapsed time : 1.4714782238006592\n","short_obj.shape : (1960, 5)\n","long_obj.shape : (1600, 5)\n","idep_plot_v6 elapsed time : 0.15549707412719727\n","en_ex_pairing elapsed time : 1.4614512920379639\n","short_obj.shape : (1937, 5)\n","long_obj.shape : (1581, 5)\n","idep_plot_v6 elapsed time : 0.1576695442199707\n","en_ex_pairing elapsed time : 1.4672513008117676\n","short_obj.shape : (1913, 5)\n","long_obj.shape : (1562, 5)\n","idep_plot_v6 elapsed time : 0.14806079864501953\n","en_ex_pairing elapsed time : 1.4784870147705078\n","short_obj.shape : (1874, 5)\n","long_obj.shape : (1526, 5)\n","idep_plot_v6 elapsed time : 0.1521906852722168\n","en_ex_pairing elapsed time : 1.4776227474212646\n","short_obj.shape : (1849, 5)\n","long_obj.shape : (1500, 5)\n","idep_plot_v6 elapsed time : 0.1390857696533203\n","en_ex_pairing elapsed time : 1.509958028793335\n","short_obj.shape : (1819, 5)\n","long_obj.shape : (1479, 5)\n","idep_plot_v6 elapsed time : 0.14712762832641602\n","en_ex_pairing elapsed time : 1.4886372089385986\n","short_obj.shape : (1805, 5)\n","long_obj.shape : (1467, 5)\n","idep_plot_v6 elapsed time : 0.1356959342956543\n","en_ex_pairing elapsed time : 1.487260341644287\n","short_obj.shape : (1786, 5)\n","long_obj.shape : (1455, 5)\n","idep_plot_v6 elapsed time : 0.13969826698303223\n","en_ex_pairing elapsed time : 1.6203644275665283\n","short_obj.shape : (1765, 5)\n","long_obj.shape : (1443, 5)\n","idep_plot_v6 elapsed time : 0.1382157802581787\n","en_ex_pairing elapsed time : 1.4916906356811523\n","short_obj.shape : (1732, 5)\n","long_obj.shape : (1414, 5)\n","idep_plot_v6 elapsed time : 0.13747143745422363\n","en_ex_pairing elapsed time : 1.5044441223144531\n","short_obj.shape : (1682, 5)\n","long_obj.shape : (1390, 5)\n","idep_plot_v6 elapsed time : 0.1316680908203125\n","en_ex_pairing elapsed time : 1.4886033535003662\n","short_obj.shape : (1675, 5)\n","long_obj.shape : (1368, 5)\n","idep_plot_v6 elapsed time : 0.13564586639404297\n","en_ex_pairing elapsed time : 1.4980852603912354\n","short_obj.shape : (1642, 5)\n","long_obj.shape : (1344, 5)\n","idep_plot_v6 elapsed time : 0.14133667945861816\n","en_ex_pairing elapsed time : 1.4921941757202148\n","short_obj.shape : (1602, 5)\n","long_obj.shape : (1319, 5)\n","idep_plot_v6 elapsed time : 0.12567591667175293\n","en_ex_pairing elapsed time : 1.5123872756958008\n","short_obj.shape : (1586, 5)\n","long_obj.shape : (1304, 5)\n","idep_plot_v6 elapsed time : 0.12607979774475098\n","en_ex_pairing elapsed time : 1.4998023509979248\n","short_obj.shape : (1581, 5)\n","long_obj.shape : (1291, 5)\n","idep_plot_v6 elapsed time : 0.12351870536804199\n","en_ex_pairing elapsed time : 1.5063104629516602\n","short_obj.shape : (1564, 5)\n","long_obj.shape : (1270, 5)\n","idep_plot_v6 elapsed time : 0.12360692024230957\n","en_ex_pairing elapsed time : 1.4933414459228516\n","short_obj.shape : (1537, 5)\n","long_obj.shape : (1258, 5)\n","idep_plot_v6 elapsed time : 0.12145829200744629\n","en_ex_pairing elapsed time : 1.6530640125274658\n","short_obj.shape : (1519, 5)\n","long_obj.shape : (1242, 5)\n","idep_plot_v6 elapsed time : 0.12119770050048828\n","en_ex_pairing elapsed time : 1.504915714263916\n","short_obj.shape : (1506, 5)\n","long_obj.shape : (1236, 5)\n","idep_plot_v6 elapsed time : 0.1300036907196045\n","en_ex_pairing elapsed time : 1.5180790424346924\n","short_obj.shape : (1490, 5)\n","long_obj.shape : (1209, 5)\n","idep_plot_v6 elapsed time : 0.12243151664733887\n","en_ex_pairing elapsed time : 1.5003676414489746\n","short_obj.shape : (1465, 5)\n","long_obj.shape : (1193, 5)\n","idep_plot_v6 elapsed time : 0.1137545108795166\n","en_ex_pairing elapsed time : 1.503678798675537\n","short_obj.shape : (1458, 5)\n","long_obj.shape : (1181, 5)\n","idep_plot_v6 elapsed time : 0.11462688446044922\n","en_ex_pairing elapsed time : 1.5121843814849854\n","short_obj.shape : (1439, 5)\n","long_obj.shape : (1165, 5)\n","idep_plot_v6 elapsed time : 0.11406230926513672\n","en_ex_pairing elapsed time : 1.528181552886963\n","short_obj.shape : (1421, 5)\n","long_obj.shape : (1148, 5)\n","idep_plot_v6 elapsed time : 0.11165022850036621\n","en_ex_pairing elapsed time : 1.5216872692108154\n","short_obj.shape : (1405, 5)\n","long_obj.shape : (1135, 5)\n","idep_plot_v6 elapsed time : 0.1091299057006836\n","en_ex_pairing elapsed time : 1.5225398540496826\n","short_obj.shape : (1370, 5)\n","long_obj.shape : (1095, 5)\n","idep_plot_v6 elapsed time : 0.1131126880645752\n","en_ex_pairing elapsed time : 1.532848834991455\n","short_obj.shape : (1353, 5)\n","long_obj.shape : (1080, 5)\n","idep_plot_v6 elapsed time : 0.11469364166259766\n","en_ex_pairing elapsed time : 1.5309233665466309\n","short_obj.shape : (1328, 5)\n","long_obj.shape : (1078, 5)\n","idep_plot_v6 elapsed time : 0.10374331474304199\n","en_ex_pairing elapsed time : 1.5469632148742676\n","short_obj.shape : (1318, 5)\n","long_obj.shape : (1074, 5)\n","idep_plot_v6 elapsed time : 0.10928463935852051\n","en_ex_pairing elapsed time : 1.525829792022705\n","short_obj.shape : (1307, 5)\n","long_obj.shape : (1064, 5)\n","idep_plot_v6 elapsed time : 0.10150861740112305\n","en_ex_pairing elapsed time : 1.5102291107177734\n","short_obj.shape : (1299, 5)\n","long_obj.shape : (1057, 5)\n","idep_plot_v6 elapsed time : 0.10271334648132324\n","en_ex_pairing elapsed time : 1.5154731273651123\n","short_obj.shape : (1289, 5)\n","long_obj.shape : (1045, 5)\n","idep_plot_v6 elapsed time : 0.10301589965820312\n","en_ex_pairing elapsed time : 1.668595790863037\n","short_obj.shape : (1270, 5)\n","long_obj.shape : (1031, 5)\n","idep_plot_v6 elapsed time : 0.10702109336853027\n","en_ex_pairing elapsed time : 1.5507473945617676\n","short_obj.shape : (1248, 5)\n","long_obj.shape : (1018, 5)\n","idep_plot_v6 elapsed time : 0.10468101501464844\n","en_ex_pairing elapsed time : 1.5180671215057373\n","short_obj.shape : (1235, 5)\n","long_obj.shape : (1007, 5)\n","idep_plot_v6 elapsed time : 0.10198402404785156\n","en_ex_pairing elapsed time : 1.51877760887146\n","short_obj.shape : (1254, 5)\n","long_obj.shape : (1011, 5)\n","idep_plot_v6 elapsed time : 0.10244870185852051\n","en_ex_pairing elapsed time : 1.5168812274932861\n","short_obj.shape : (1244, 5)\n","long_obj.shape : (1003, 5)\n","idep_plot_v6 elapsed time : 0.1007080078125\n","en_ex_pairing elapsed time : 1.5582454204559326\n","short_obj.shape : (1222, 5)\n","long_obj.shape : (975, 5)\n","idep_plot_v6 elapsed time : 0.1069939136505127\n","en_ex_pairing elapsed time : 1.5126533508300781\n","short_obj.shape : (1203, 5)\n","long_obj.shape : (963, 5)\n","idep_plot_v6 elapsed time : 0.09752321243286133\n","en_ex_pairing elapsed time : 1.5322279930114746\n","short_obj.shape : (1185, 5)\n","long_obj.shape : (964, 5)\n","idep_plot_v6 elapsed time : 0.10114836692810059\n","en_ex_pairing elapsed time : 1.5297539234161377\n","short_obj.shape : (1173, 5)\n","long_obj.shape : (955, 5)\n","idep_plot_v6 elapsed time : 0.09672212600708008\n","en_ex_pairing elapsed time : 1.555631160736084\n","short_obj.shape : (1165, 5)\n","long_obj.shape : (954, 5)\n","idep_plot_v6 elapsed time : 0.10023665428161621\n","en_ex_pairing elapsed time : 1.5535767078399658\n","short_obj.shape : (1150, 5)\n","long_obj.shape : (944, 5)\n","idep_plot_v6 elapsed time : 0.0984649658203125\n","en_ex_pairing elapsed time : 1.5665884017944336\n","short_obj.shape : (1144, 5)\n","long_obj.shape : (940, 5)\n","idep_plot_v6 elapsed time : 0.09507155418395996\n","en_ex_pairing elapsed time : 1.5302784442901611\n","short_obj.shape : (1136, 5)\n","long_obj.shape : (935, 5)\n","idep_plot_v6 elapsed time : 0.09663891792297363\n","en_ex_pairing elapsed time : 1.705169916152954\n","short_obj.shape : (1118, 5)\n","long_obj.shape : (924, 5)\n","idep_plot_v6 elapsed time : 0.09464478492736816\n","en_ex_pairing elapsed time : 1.5230867862701416\n","short_obj.shape : (1106, 5)\n","long_obj.shape : (905, 5)\n","idep_plot_v6 elapsed time : 0.09696674346923828\n","en_ex_pairing elapsed time : 2.1203861236572266\n","short_obj.shape : (1098, 5)\n","long_obj.shape : (899, 5)\n","idep_plot_v6 elapsed time : 0.09569001197814941\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1728x576 with 36 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# from google.colab import output\n","# ------------ survey param ------------ #\n","itv_num_list = [1, 3, 5, 15]\n","itv_list = ['15m', '30m', '1h', '4h']\n","# itv_list = ['3m', '5m', '15m', '30m', '1h', '4h']\n","# val_list = np.arange(, 2.0, 0.1)     # prcn 1\n","val_list = np.arange(0.0, 1.5, 0.02)  # prcn 2\n","# val_list = np.arange(-0.695, -0.75, -0.005)    # prcn 3\n","# val_list = np.arange(0.944, 0.945, 0.0001)    # prcn 4\n","# val_list = np.arange(70, 80, 1)   # prcn -1\n","# val_list = np.arange(200, 180, -5)   # prcn -2\n","\n","# ------------ get survey_res ------------ #\n","result = []\n","config_list_copy = copy.deepcopy(config_list)\n","for set_val in val_list:\n","  # ------------ open 결정 이전의 인자값 ------------ #\n","  # ------ point * mr_res ------ #\n","  # # config_list_copy[0].loc_set.zone.degree_list = set_val\n","  # config_list_copy[0].loc_set.point2.wick_score_list = str([set_val])\n","  # open_info_df = get_open_info_df(ep_loc_v2, res_df, np_timeidx, ID_list, config_list_copy, id_idx_list)\n","\n","  # ------------ open 결정 이후의 인자값 ------------ #\n","  # ------ utils ------ #\n","  # Todo - 추후, rtc & tr survey 사용하는 경우 utils_ rerun 해주어할 것 -> 이곳에서 진행 (res_df 만 편집하면 되니까)\n","  config_list_copy[0].tr_set.out_gap = set_val  \n","  for utils_, config_ in zip(utils_list, config_list_copy):\n","    # enlist_rtc(res_df, config_, np_timeidx)\n","    enlist_tr(res_df, config_, np_timeidx)\n","\n","  # ------ entry, exit (ep, tp, out vars.) ------ #\n","  # config_list_copy[0].ep_set.ep_out_tick = set_val  \n","  try:\n","    result.append(get_res(res_df, open_info_df, ohlc_list, point2_list, market_data_list, config_list_copy, np_timeidx, funcs, test_ratio=0.3, plot_is=1, signi=True))\n","  except:\n","    pass\n","survey_res_list = [np.array(result)[:, s_i::3] for s_i in range(3)]   # 3 for s, l, b\n","# short_res, long_res, both_res = survey_res_list\n","\n","# ------------ plot survey_res ------------ #\n","title_list = [\"short\", \"long\", \"both\"]\n","sub_title_list = ['prcn', 'rc', 'len_pr', 'dpf', 'wr', 'sr', 'acc_pr', 'sum_pr', 'min_pr', 'liqd', 'acc_mdd', 'sum_mdd']\n","space_ = \" \" * 120\n","\n","fig = plt.figure(figsize=(24, 8))\n","plt.style.use('dark_background')\n","gs = gridspec.GridSpec(nrows=1,\n","                        ncols=3,\n","                        # height_ratios=[1, 1, 1]\n","                      )\n","# nrows, ncols, h_r = 3, 3, [1, 1, 1]\n","nrows, ncols, h_r = 3, 4, [1, 1, 1]\n","# nrows, ncols, h_r = 4, 3, [1, 1, 1, 1]\n","# if d_idx == 0:\n","# else:\n","  # nrows, ncols, h_r = 2, 2, [1, 1]\n","\n","for d_idx, (title_name, survey_res) in enumerate(zip(title_list, survey_res_list)):  \n","  inner_gs = gs[d_idx].subgridspec(nrows=nrows,\n","                        ncols=ncols,\n","                        height_ratios=h_r\n","                      )\n","  for in_idx, (data_, sub_title) in enumerate(zip(survey_res.T, sub_title_list)):\n","    plt.subplot(inner_gs[in_idx])\n","    plt.plot(val_list[:len(result)], data_.ravel())  # 앞에서부터 len(result) 만큼만\n","    plt.title(sub_title)\n","\n","plt.suptitle(space_.join(title_list))\n","plt.show()\n","# print(\"\\n\")"]},{"cell_type":"markdown","source":["### legacy"],"metadata":{"id":"1GVZ03zDyU2N"}},{"cell_type":"markdown","source":["#### main_functions"],"metadata":{"id":"IWO7KkqltMFt"}},{"cell_type":"code","source":["def get_open_info_df(ep_loc_v2, res_df, np_timeidx, ID_list, config_list, id_idx_list):\n","  start_0 = time.time()\n","  # ------ get mr_res, zone_arr ------ #\n","  short_mr_res_obj = np.array([ep_loc_v2(res_df, config_, np_timeidx, show_detail=True, ep_loc_side=OrderSide.SELL) for config_ in config_list])\n","  long_mr_res_obj = np.array([ep_loc_v2(res_df, config_, np_timeidx, show_detail=True, ep_loc_side=OrderSide.BUY) for config_ in config_list])\n","  short_open_idx_list = [np.where(res_df['short_open_{}'.format(id)].to_numpy() * mr_res)[0] for id, mr_res in zip(ID_list, short_mr_res_obj[:, 0].astype(np.float64))]   # \"point * mr_Res\"\n","  long_open_idx_list = [np.where(res_df['long_open_{}'.format(id)].to_numpy() * mr_res)[0] for id, mr_res in zip(ID_list, long_mr_res_obj[:, 0].astype(np.float64))]  # zip 으로 zone (str) 과 묶어서 dtype 변경됨\n","\n","  # ------ open_info_arr ------ #\n","  short_side_list = [np.full(len(list_), OrderSide.SELL) for list_ in short_open_idx_list]\n","  long_side_list = [np.full(len(list_), OrderSide.BUY) for list_ in long_open_idx_list]\n","\n","  short_zone_list = [zone_res[short_open_idx] for zone_res, short_open_idx in zip(short_mr_res_obj[:, 1], short_open_idx_list)]\n","  long_zone_list = [zone_res[long_open_idx] for zone_res, long_open_idx in zip(long_mr_res_obj[:, 1], long_open_idx_list)]\n","\n","  short_id_list = [np.full(len(list_), id) for id, list_ in zip(ID_list, short_open_idx_list)]\n","  long_id_list = [np.full(len(list_), id) for id, list_ in zip(ID_list, long_open_idx_list)]\n","\n","  selected_id_idx = np.arange(len(id_idx_list))\n","  short_id_idx_list = [np.full(len(list_), id) for id, list_ in zip(selected_id_idx, short_open_idx_list)]\n","  long_id_idx_list = [np.full(len(list_), id) for id, list_ in zip(selected_id_idx, long_open_idx_list)]\n","\n","  # ------ get open_info_df ------ #\n","  #   series 만들어서 short / long 끼리 합치고 둘이 합치고, 중복은 우선 순위 정해서 제거\n","  short_open_df_list = [pd.DataFrame(index=index_, data=np.vstack((data_)).T, columns=['side', 'zone', 'id', 'id_idx']) for index_, data_ in zip(short_open_idx_list, zip(short_side_list, short_zone_list, short_id_list, short_id_idx_list))]\n","  long_open_df_list = [pd.DataFrame(index=index_, data=np.vstack((data_)).T, columns=['side', 'zone', 'id', 'id_idx']) for index_, data_ in zip(long_open_idx_list, zip(long_side_list, long_zone_list, long_id_list, long_id_idx_list))]\n","\n","  open_info_df = pd.concat(short_open_df_list + long_open_df_list)\n","  # ------ sorting + unique ------ #\n","  open_info_df.sort_index(inplace=True)\n","  # print(len(open_info_df))\n","  # print(len(open_info_df))\n","  # open_info_df.head()\n","  print(\"get_open_info_df elapsed time :\", time.time() - start_0)\n","  return open_info_df[~open_info_df.index.duplicated(keep='first')]  # 먼저 순서를 우선으로 지정  "],"metadata":{"id":"MY1csdNRLGsk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def get_res(res_df, open_info_df, ohlc_list, point2_list, market_data_list, config_list, np_timeidx, funcs, test_ratio=0.3, plot_is=True, signi=False):\n","  # ------------ make open_info_list ------------ #\n","  open_idx = open_info_df.index.to_numpy()\n","  len_df = len(res_df)\n","  s_idx = (open_idx < int(len_df * (1 - test_ratio))) == plot_is\n","  s_open_info_df = open_info_df[s_idx]\n","  s_open_idx = open_idx[s_idx]\n","\n","  open_info_list = [s_open_info_df[col_].to_numpy() for col_ in s_open_info_df.columns]\n","  side_arr, zone_arr, id_arr, id_idx_arr = open_info_list\n","\n","  # ------------ get paired_res ------------ #\n","  start_0 = time.time()\n","  paired_res = en_ex_pairing(res_df, s_open_idx, open_info_list, ohlc_list, point2_list, market_data_list, config_list, np_timeidx, funcs)\n","  # valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr = paired_res\n","  print(\"en_ex_pairing elapsed time :\", time.time() - start_0)  #  0.37 --> 0.3660471439361572 --> 0.21(lesser if)\n","\n","  # ------------ idep_plot ------------ #\n","  start_0 = time.time()\n","  h, l = ohlc_list[1:3]\n","  res = idep_plot_v6(len_df, h, l, s_open_idx, side_arr, paired_res, inversion=False, sample_ratio=1 - test_ratio, signi=signi)\n","  print(\"idep_plot_v6 elapsed time :\", time.time() - start_0)   # 1.40452 (v6) 1.4311 (v5)\n","\n","  return res"],"metadata":{"id":"eiQ36_SLLE3w"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def idep_plot_v6(len_df, h, l, open_idx, side_arr, paired_res, inversion=False, sample_ratio=0.7, title_position=(0.5, 0.5), fontsize=15, signi=False):\n","    if not signi:\n","        plt.style.use(['dark_background', 'fast'])\n","        fig = plt.figure(figsize=(24, 8))\n","        gs = gridspec.GridSpec(nrows=2,  # row 몇 개\n","                               ncols=3,  # col 몇 개\n","                               height_ratios=[10, 1]\n","                               # height_ratios=[10, 10, 1]\n","                               )\n","    gs_idx = 0\n","    # plt.suptitle(key)\n","\n","    if sample_ratio is not None:\n","      sample_len = int(len_df * sample_ratio)\n","    else:\n","      sample_len = len_df\n","\n","    # ------ short & long data preparation ------ #\n","    # start_0 = time.time()\n","    valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr, bias_arr = paired_res    \n","    assert len(valid_openi_arr) != 0, \"assert len(valid_openi_arr) != 0\"    \n","    short_valid_openi_idx = np.where(side_arr[valid_openi_arr] == OrderSide.SELL)[0]  # valid_openi_arr 에 대한 idx, # side_arr,\n","    long_valid_openi_idx = np.where(side_arr[valid_openi_arr] == OrderSide.BUY)[0]\n","\n","    valid_open_idx = open_idx[valid_openi_arr].reshape(-1, 1)\n","\n","    short_obj = np.hstack((pair_price_arr, pair_idx_arr, valid_open_idx))[short_valid_openi_idx]\n","    long_obj = np.hstack((pair_price_arr, pair_idx_arr, valid_open_idx))[long_valid_openi_idx]\n","    both_obj = np.vstack((short_obj, long_obj))\n","    print(\"short_obj.shape :\", short_obj.shape)\n","    print(\"long_obj.shape :\", long_obj.shape)\n","\n","    short_obj, long_obj, both_obj = [np.split(obj_, 5, axis=1) for obj_ in [short_obj, long_obj, both_obj]]\n","\n","    short_lvrg_arr, long_lvrg_arr = [lvrg_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    short_fee_arr, long_fee_arr = [fee_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    short_tpout_arr, long_tpout_arr = [tpout_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    short_bias_arr, long_bias_arr = [bias_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    # print(\"elapsed time :\", time.time() - start_0)\n","\n","    short_true_bias_idx = short_bias_arr[:, 0] <= short_bias_arr[:, 1] # info, threshold (등호의 유무가 매우 유의미함)\n","    long_true_bias_idx = long_bias_arr[:, 0] >= long_bias_arr[:, 1]\n","\n","    # ------ plot_data ------ #\n","    try:\n","      # start_0 = time.time()\n","      short_pr = get_pr(OrderSide.SELL, *short_obj[:2], short_lvrg_arr, short_fee_arr, inversion)\n","      short_total_pr = to_total_pr(len_df, short_pr, short_obj[-2])\n","      short_cum_pr = np.cumprod(short_total_pr)\n","      short_liqd = liquidation(OrderSide.SELL, h, short_obj[:4], short_lvrg_arr, short_fee_arr)\n","      short_prcn, short_rc = precision(short_pr, short_true_bias_idx), recall(short_true_bias_idx)\n","      if signi:\n","        short_idep_res_obj = (short_prcn, short_rc) + get_res_info_nb_v2(sample_len, short_pr, short_total_pr, short_cum_pr, short_liqd)\n","      else:\n","        gs_idx = plot_info_v4(gs, gs_idx, sample_len, short_pr, short_total_pr, short_cum_pr, short_liqd, short_prcn, short_rc, short_lvrg_arr[-1], title_position, fontsize)\n","      # print(\"elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","      gs_idx += 1\n","      print(e)\n","\n","    try:\n","      # start_0 = time.time()\n","      long_pr = get_pr(OrderSide.BUY, *long_obj[:2], long_lvrg_arr, long_fee_arr, inversion)\n","      long_total_pr = to_total_pr(len_df, long_pr, long_obj[-2])\n","      long_cum_pr = np.cumprod(long_total_pr)\n","      long_liqd = liquidation(OrderSide.BUY, l, long_obj[:4], long_lvrg_arr, long_fee_arr)\n","      long_prcn, long_rc = precision(long_pr, long_true_bias_idx), recall(long_true_bias_idx)\n","      if signi:\n","        long_idep_res_obj = (long_prcn, long_rc) + get_res_info_nb_v2(sample_len, long_pr, long_total_pr, long_cum_pr, long_liqd)\n","      else:\n","        gs_idx = plot_info_v4(gs, gs_idx, sample_len, long_pr, long_total_pr, long_cum_pr, long_liqd, long_prcn, long_rc, long_lvrg_arr[-1], title_position, fontsize)\n","      # print(\"elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","      gs_idx += 1\n","      print(e)\n","\n","    try:\n","      # start_0 = time.time()\n","      both_pr = np.vstack((short_pr, long_pr))  # for 2d shape, obj 를 1d 로 만들지 않는 이상, pr 은 2d 유지될 것\n","      both_total_pr = to_total_pr(len_df, both_pr, both_obj[-2])\n","      both_cum_pr = np.cumprod(both_total_pr)\n","      both_liqd = min(short_liqd, long_liqd)\n","      both_true_bias_idx = np.hstack((short_true_bias_idx, long_true_bias_idx))  # for 1d shape\n","      both_prcn, both_rc = precision(both_pr, both_true_bias_idx), recall(both_true_bias_idx)\n","      if signi:\n","        both_idep_res_obj = (both_prcn, both_rc) + get_res_info_nb_v2(sample_len, both_pr, both_total_pr, both_cum_pr, both_liqd)\n","      else:\n","        gs_idx = plot_info_v4(gs, gs_idx, sample_len, both_pr, both_total_pr, both_cum_pr, both_liqd, both_prcn, both_rc, lvrg_arr[-1], title_position, fontsize)\n","      # print(\"elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","      gs_idx += 1\n","      print(e)\n","\n","    if not signi:\n","        for obj, cum_pr in zip([short_obj, long_obj, both_obj], [short_cum_pr, long_cum_pr, both_cum_pr]):\n","          try:\n","            # start_0 = time.time()\n","            gs_idx = frq_dev_plot_v3(gs, gs_idx, len_df, sample_len, obj[-2], cum_pr[-1], fontsize)\n","            # print(\"elapsed time :\", time.time() - start_0)          \n","          except Exception as e:\n","            gs_idx += 1\n","            print(e)\n","\n","        plt.show()\n","        plt.close()\n","        return short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_bias_arr, \\\n","                long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_bias_arr\n","    else:\n","        return [short_idep_res_obj[:-1], long_idep_res_obj[:-1], both_idep_res_obj[:-1]]"],"metadata":{"id":"xafHpMLwESKf"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### get paired_res function"],"metadata":{"id":"EFyWTuscH8VH"}},{"cell_type":"code","source":["def en_ex_pairing(res_df, open_idx, open_info_list, ohlc_list, point2_list, market_data_list, config_list, np_timeidx, funcs):  # 이미 충분히 줄여놓은 idx 임\n","    side_arr, zone_arr, id_arr, id_idx_arr = open_info_list\n","    id_idx_arr = id_idx_arr.astype(int)\n","\n","    ep_out, ep_loc_point2, lvrg_set = funcs\n","\n","    valid_openi_list, pair_idx_list, pair_price_list, lvrg_list, fee_list, tpout_list, bias_list = [[] for li in range(7)]\n","    len_df = len(res_df)\n","    len_open_idx = len(open_idx)\n","    i, open_i = 0, -1  # i for total_res_df indexing\n","\n","    while 1:\n","        # ------------ entry phase ------------ #\n","        open_i += 1  # 확인 끝났으면 조기 이탈(+1), 다음 open_idx 조사 진행\n","        if open_i >= len_open_idx:\n","          break\n","          \n","        # ------ ep_loc ------ #\n","        op_idx = open_idx[open_i]  # open_i 는 i 와 별개로 운영\n","        if op_idx < i:  # i = 이전 거래 끝난후의 res_df index - \"거래 종료후 거래 시작\", '<' : 거래 종료시점 진입 가능하다는 의미\n","            continue\n","\n","        # ------ dynamic data by ID ------ #\n","        #     1. 해당 id 로 config 재할당해야함\n","        id_idx = id_idx_arr[open_i]\n","        config = config_list[id_idx]\n","        strat_version = config.strat_version\n","        open_side = side_arr[open_i]\n","\n","        side_pos = 'short' if open_side == OrderSide.SELL else 'long'\n","        ep_arr = res_df['{}_ep_{}'.format(side_pos, strat_version)].to_numpy()  # Todo - while loop 내에서 to_numpy() 반복하느니, pd_indexing 이 낫지 않을까\n","        tp_arr = res_df['{}_tp_{}'.format(side_pos, strat_version)].to_numpy()  # => eptpout arr_list 만들어서 꺼내 사용하면 될 것\n","        out_arr = res_df['{}_out_{}'.format(side_pos, strat_version)].to_numpy()\n","        bias_info_arr = res_df['{}_bias_info_{}'.format(side_pos, strat_version)].to_numpy()  # ex. rolling(entry ~ end)'s high\n","        bias_thresh_arr = res_df['{}_bias_thresh_{}'.format(side_pos, strat_version)].to_numpy()  # ex. close + dc_T20 * 0.5\n","\n","        # ------ ei_k & point2 ------ #\n","        i = op_idx + 1  # open_signal 이 close_bar.shift(1) 이라고 가정하고 다음 bar 부터 체결확인한다는 의미\n","        if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","            break\n","        exec_j, ep_j, tp_j, out_j, entry_done, en_p, fee = check_eik_point2_exec(res_df, config, op_idx, len_df, open_side, [*ohlc_list, ep_arr], point2_list, ep_out, ep_loc_point2)\n","        i = exec_j\n","        \n","        if not entry_done:\n","            continue\n","\n","        # ------ leverage ------ #\n","        out = out_arr[out_j]  # lvrg_set use out on out_j\n","        leverage = lvrg_set(res_df, config, open_side, en_p, out, fee)  # res_df 변수 사용됨 - 주석 처리 된 상태일뿐\n","        if leverage is None:\n","            continue\n","\n","        exit_done, cross_on = 0, 0\n","        # ------ check tpout_onexec ------ #\n","        # if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","        if config.ep_set.entry_type == \"LIMIT\":\n","            if config.tp_set.tp_onexec:  # dynamic 은 tp_onexec 사용하는 의미가 없음\n","                tp_j = exec_j\n","            if config.out_set.out_onexec:  # dynamic 은 out_onexec 사용하는 의미가 없음\n","                out_j = exec_j\n","        while 1:\n","            # ------------ exit phase ------------ #\n","            i += 1  # entry 다음 tick 부터 exit 허용\n","            if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","                break\n","\n","            if not config.tp_set.static_tp:\n","                tp_j = i\n","            if not config.out_set.static_out:\n","                out_j = i\n","\n","            # ------------ tp ------------ #\n","            if not config.tp_set.non_tp:\n","                exit_done, ex_p, fee = check_limit_tp_exec(res_df, config, open_i, i, tp_j, len_df, fee, open_side, exit_done, [*ohlc_list, [tp_arr]])  # 여기서는 j -> i 로 변경해야함\n","                # if config.tp_set.tp_type in ['LIMIT']:  # 'BOTH' -> 앞으로는, LIMIT 밖에 없을거라 주석처리함\n","                # if not exit_done and config.tp_set.tp_type in ['MARKET', 'BOTH']:\n","\n","            # ------------ out ------------ #\n","            # ------ signal_out ------ #\n","            if not exit_done:\n","              exit_done, cross_on, ex_p, fee = check_market_out_exec(config, open_i, i, len_df, fee, open_side, cross_on, exit_done, [np_timeidx, *market_data_list])\n","            # ------ hl_out ------ #\n","            if config.out_set.hl_out != \"None\":\n","              if not exit_done:  # and i != len_df - 1:                \n","                  exit_done, ex_p, fee = check_out(config, open_i, i, out_j, len_df, fee, open_side, exit_done, [*ohlc_list, out_arr])\n","\n","            if exit_done:  # 이 phase 는 exit_phase 뒤에도 있어야할 것 - entry_done var. 사용은 안하겠지만\n","                # ------ append dynamic vars. ------ #\n","                valid_openi_list.append(open_i)  # side, zone, start_ver arr 모두 openi_list 로 접근하기 위해 open_i 를 담음\n","                pair_idx_list.append([exec_j, i])  # entry & exit (체결 기준임)\n","                pair_price_list.append([en_p, ex_p])\n","                lvrg_list.append(leverage)\n","                fee_list.append(fee)\n","                tpout_list.append([tp_arr[tp_j], out_arr[out_j]])  # for tpout_line plot_check\n","                # bias_list.append([bias_info_arr[exec_j], bias_thresh_arr[exec_j]])  # backtest 에서만 가능한 future_data 사용\n","                bias_list.append([bias_info_arr[exec_j], tp_arr[tp_j]])  # tp = bias_thresh \n","\n","                # open_i += 1  # 다음 open_idx 조사 진행\n","                break\n","\n","        if i >= len_df: # or open_i >= len_open_idx:  # res_df 의 last_index 까지 돌아야함\n","            break\n","        else:\n","            continue\n","\n","    return np.array(valid_openi_list), np.array(pair_idx_list), np.array(pair_price_list), np.array(lvrg_list), np.array(fee_list), np.array(tpout_list), np.array(bias_list)\n","\n","\n","def check_eik_point2_exec(res_df, config, op_idx, len_df, open_side, np_datas, point2_list, ep_out, ep_loc_point2):\n","    o, h, l, c, ep_arr = np_datas\n","    ep_j = op_idx\n","    tp_j = op_idx\n","    out_j = op_idx\n","\n","    strat_version = config.strat_version    \n","    allow_ep_in = 0 if config.ep_set.point2.use_point2 else 1\n","    entry_done = 0\n","    ep = None\n","\n","    if config.ep_set.entry_type == \"LIMIT\":\n","        fee = config.trader_set.limit_fee\n","\n","        for e_j in range(op_idx + 1, len_df):\n","            # ------ index setting for dynamic options ------ #\n","            if not config.ep_set.static_ep:\n","                ep_j = e_j  # dynamic_ep 를 위한 ep_index var.\n","                out_j = e_j  # dynamic_out 를 위한 out_index var. - 조건식이 static_ep 와 같이 있는 이유 모름 => dynamic_lvrg 로 사료됨\n","\n","            if not config.tp_set.static_tp:\n","                tp_j = e_j\n","\n","            # ------ ei_k ------ # - limit 사용하면 default 로 ei_k 가 존재해야함\n","            if ep_out(res_df, config, op_idx, e_j, tp_j, [h, l], open_side):\n","              break\n","\n","            # ------ point2 ------ #\n","            if not allow_ep_in:\n","                allow_ep_in, out_j = ep_loc_point2(res_df, config, e_j, out_j, point2_list, side=open_side)\n","                if allow_ep_in:\n","                  if config.ep_set.point2.entry_type == \"LIMIT\":\n","                    ep_j = e_j\n","                    # print(\"e_j in point2 :\", e_j)\n","                    continue\n","\n","            # ------ check ep_exec ------ #\n","            if allow_ep_in:\n","              if config.ep_set.point2.use_point2 and config.ep_set.point2.entry_type == 'MARKET':\n","                entry_done = 1\n","                ep = c[e_j]\n","                break\n","              else:\n","                if open_side == OrderSide.SELL:\n","                    if h[e_j] >= ep_arr[ep_j]:\n","                        entry_done = 1\n","                        ep = ep_arr[ep_j]\n","                        if o[e_j] >= ep_arr[ep_j]:  # open comp 는 결국, 수익률에 얹어주는 logic (반보수) -> 사용 보류\n","                            ep = o[e_j]\n","                        break\n","                else:\n","                    if l[e_j] <= ep_arr[ep_j]:\n","                        entry_done = 1\n","                        ep = ep_arr[ep_j]\n","                        if o[e_j] <= ep_arr[ep_j]:\n","                            ep = o[e_j]\n","                        break\n","\n","    else:  # market entry\n","        e_j = op_idx + 1\n","        entry_done = 1\n","        ep = c[op_idx]\n","        fee = config.trader_set.market_fee\n","\n","    return e_j, ep_j, tp_j, out_j, entry_done, ep, fee  # 다음 start_i <-- e_j 로 변경\n","    #   e_j => 다음 phase 의 시작 index <-> ep_j : ep 의 기준 index\n","    #   ep_j, tp_j, out_j 가 return 되어야함 - exit phase 에서 이어가기 위함\n","\n","\n","def check_limit_tp_exec(res_df, config, open_i, j, tp_j, len_df, fee, open_side, exit_done, np_datas):\n","    o, h, l, c, tps = np_datas\n","    tp = None\n","    strat_version = config.strat_version\n","    len_tps = len(tps)\n","\n","    for tp_i, tp_arr in enumerate(tps):\n","        #     decay adjustment    #\n","        #     tp_j includes dynamic_j - functionalize  #\n","        try:\n","            if config.tr_set.decay_gap != \"None\":\n","                decay_share = (j - open_i) // config.tp_set.decay_term\n","                decay_remain = (j - open_i) % config.tp_set.decay_term\n","                if j != open_i and decay_remain == 0:\n","                    if open_side == OrderSide.SELL:\n","                        tp_arr[tp_j] += res_df['short_rtc_gap_{}'.format(strat_version)].iloc[open_i] * config.tr_set.decay_gap * decay_share\n","                    else:\n","                        tp_arr[tp_j] -= res_df['long_rtc_gap_{}'.format(strat_version)].iloc[open_i] * config.tr_set.decay_gap * decay_share\n","        except:\n","            pass\n","\n","        if open_side == OrderSide.SELL:\n","            if l[j] <= tp_arr[tp_j]:  # and partial_tp_cnt == tp_i:  # we use static tp now\n","                # if l[j] <= tp_arr[j] <= h[j]: --> 이건 잘못되었음\n","                # partial_tp_cnt += 1 --> partial_tp 보류\n","\n","                # ------ dynamic tp ------ #\n","                if tp_arr[j] != tp_arr[j - 1] and not config.tp_set.static_tp:\n","                    # tp limit 이 불가한 경우 - open 이 이미, tp 를 넘은 경우\n","                    if o[j] < tp_arr[j]:\n","                        tp = o[j]\n","                    # tp limit 이 가능한 경우 - open 이 아직, tp 를 넘지 않은 경우\n","                    else:\n","                        tp = tp_arr[j]\n","                # ------ static tp ------ #\n","                else:\n","                    #   tp limit 이 불가한 경우 - open 이 이미, tp 를 넘은 경우\n","                    if o[j] < tp_arr[tp_j]:  # static 해놓고 decay 사용하면 dynamic 이니까\n","                        if config.tr_set.decay_gap != \"None\" and decay_remain == 0:\n","                            tp = o[j]  # tp_j -> open_i 를 가리키기 때문에 decay 는 한번만 진행되는게 맞음\n","                        else:\n","                            tp = tp_arr[tp_j]\n","                    else:\n","                        tp = tp_arr[tp_j]\n","\n","                if tp_i == len_tps - 1:\n","                    exit_done = 1  # partial 을 고려해 exit_done = 1 상태는 tp_i 가 last_index 로 체결된 경우만 해당\n","\n","        else:\n","            if h[j] >= tp_arr[tp_j]:\n","                # ------ dynamic tp ------ #\n","                if tp_arr[j] != tp_arr[j - 1] and not config.tp_set.static_tp:\n","                    if o[j] > tp_arr[j]:\n","                        tp = o[j]\n","                    else:\n","                        tp = tp_arr[j]\n","\n","                # ------ static tp ------ #\n","                else:\n","                    if o[j] > tp_arr[tp_j]:\n","                        if config.tr_set.decay_gap != \"None\" and decay_remain == 0:\n","                            tp = o[j]\n","                        else:\n","                            tp = tp_arr[tp_j]\n","                    else:\n","                        tp = tp_arr[tp_j]\n","\n","                if tp_i == len_tps - 1:\n","                    exit_done = 1  # partial 을 고려해 exit_done = 1 상태는 tp_i 가 last_index 로 체결된 경우만 해당\n","\n","    if exit_done:\n","        fee += config.trader_set.limit_fee\n","\n","    return exit_done, tp, fee\n","\n","\n","def check_market_out_exec(config, open_i, j, len_df, fee, open_side, cross_on, exit_done, np_datas):\n","    np_timeidx, c, bb_lower_5T, bb_upper_5T, rsi_exit, ha_o, ha_h, ha_l, ha_c = np_datas\n","    tp = None\n","    strat_version = config.strat_version\n","\n","    # ------ timestamp ------ #\n","    if config.out_set.tf_exit != \"None\":\n","        if np_timeidx[j] % config.out_set.tf_exit == config.out_set.tf_exit - 1 and j != open_i:\n","            exit_done = 1\n","\n","    # ------ rsi ------ # -> vectorize 가능함 => 추후 적용\n","    if config.out_set.rsi_exit:\n","        if open_side == OrderSide.SELL:\n","            if (rsi_exit[j - 1] >= 50 - config.loc_set.point.osc_band) & (rsi_exit[j] < 50 - config.loc_set.point.osc_band):\n","                exit_done = 1\n","        else:\n","            if (rsi_exit[j - 1] <= 50 + config.loc_set.point.osc_band) & (rsi_exit[j] > 50 + config.loc_set.point.osc_band):\n","                exit_done = 1\n","\n","    # ------ heikin_ashi ------ #\n","    # if strat_version in ['v3_3']:\n","    #     if open_side == OrderSide.SELL:\n","    #       if (ha_o[j] < ha_c[j]):# & (ha_o[j] == ha_l[j]):   # 양봉 출현\n","    #           exit_done = 1\n","    #     else:\n","    #       if (ha_o[j] > ha_c[j]):# & (ha_o[j] == ha_h[j]):  # 음봉 출현\n","    #           exit_done = 1\n","\n","    # ------------ early out ------------ #\n","    # ------ bb ------ # --> cross_on 기능은 ide latency 개선 여부에 해당되지 않음\n","    if strat_version in ['v5_2']:\n","        if open_side == OrderSide.SELL:\n","            if c[j] < bb_lower_5T[j] < c[j - 1]:\n","                cross_on = 1\n","            if cross_on == 1 and c[j] > bb_upper_5T[j] > c[j - 1]:\n","                exit_done = 1\n","        else:\n","            if c[j] > bb_upper_5T[j] > c[j - 1]:\n","                cross_on = 1\n","            if cross_on == 1 and c[j] < bb_lower_5T[j] < c[j - 1]:\n","                exit_done = 1\n","\n","    if exit_done:\n","        tp = c[j]\n","        fee += config.trader_set.market_fee\n","\n","    return exit_done, cross_on, tp, fee\n","\n","\n","def check_out(config, open_i, j, out_j, len_df, fee, open_side, exit_done, np_datas):\n","    o, h, l, c, out_arr = np_datas\n","    tp = None\n","\n","    if config.out_set.hl_out:\n","        if open_side == OrderSide.SELL:\n","            if h[j] >= out_arr[out_j]:  # check out only once\n","                exit_done = 1\n","        else:\n","            if l[j] <= out_arr[out_j]:  # check out only once\n","                exit_done = 1\n","    else:  # close_out\n","        if open_side == OrderSide.SELL:\n","            if c[j] >= out_arr[out_j]:  # check out only once\n","                exit_done = 1\n","        else:\n","            if c[j] <= out_arr[out_j]:  # check out only once\n","                tp = c[j]\n","                exit_done = 1\n","\n","    if exit_done:\n","        if config.out_set.hl_out:\n","            tp = out_arr[out_j]\n","        else:\n","            tp = c[j]\n","\n","        if open_side == OrderSide.SELL:\n","            if o[j] >= out_arr[out_j]:\n","                tp = o[j]\n","        else:\n","            if o[j] <= out_arr[out_j]:\n","                tp = o[j]\n","\n","        fee += config.trader_set.market_fee\n","\n","    return exit_done, tp, fee"],"metadata":{"id":"qfbtFVMR01UJ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"jp-MarkdownHeadingCollapsed":true,"tags":[],"id":"zQ-roiifspcX"},"source":["#### ep_loc.point & zone legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Js5eL87VspcX"},"outputs":[],"source":["\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 (res_df['close'] < res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(strat_version)] - 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] >= res_df['bb_lower_1m']) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['bb_lower_1m']) &\n","    #                 (res_df['close'] < res_df['bb_lower_1m'])\n","    #                 , res_df['entry_{}'.format(strat_version)] - 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   (res_df['close'] > res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(strat_version)] + 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] <= res_df['bb_upper_1m']) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['bb_upper_1m']) &\n","    #                   (res_df['close'] > res_df['bb_upper_1m'])\n","    #                 , res_df['entry_{}'.format(strat_version)] + 1, res_df['entry_{}'.format(strat_version)])\n","\n","\n","    \n","   # --------------- ema --------------- #   \n","  # res_df['ema5_1m'] = ema(res_df['close'], 5).shift(1)\n","\n","  #   # --------------- cloud bline --------------- #   \n","  # res_df['cloud_bline_1m'] = cloud_bline(res_df, 26).shift(1)\n","  \n","    #       stochastic      #\n","  # res_df['stoch'] = stoch(res_df, 5, 3, 3)\n","\n","    #       fisher      #\n","  # res_df['fisher30'] = fisher(res_df, 30)\n","  # res_df['fisher60'] = fisher(res_df, 60)\n","  # res_df['fisher120'] = fisher(res_df, 120)\n","\n","    #       cctbbo      #\n","  # res_df['cctbbo'], _ = cct_bbo(res_df, 21, 13)\n","\n","    #       ema_roc      #\n","  # res_df['ema_roc'] = ema_roc(res_df['close'], 13, 9)\n","\n","\n","   # ------------------------------ htf data ------------------------------ #    \n","\n","  #             Todo              #\n","  # htf_df = pd.read_excel(date_path2 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # htf_df = pd.read_excel(date_path3 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # htf_df = pd.read_excel(date_path4 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # htf_df = pd.read_excel(date_path5 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # # # # htf_df = pd.read_excel(date_path6 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","\n","  # # ---- htf index slicing ---- #\n","  # htf_df = htf_df.loc[:res_df.index[-1]]\n","  \n","  # print(\"res_df.index[-1] :\", res_df.index[-1])\n","  # print(\"htf_df.index[-1] :\", htf_df.index[-1])\n","\n","  # res_df = dc_line(res_df, htf_df, '5m')\n","  # res_df = dc_level(res_df, '5m', 1)\n","\n","\n","  # # # if \"sma4\" in res_df.columns:\n","  # # #   res_df.drop(\"sma4\", axis=1, inplace=1)\n","\n","  # # htf_df['sma'] = htf_df['close'].rolling(60).mean()\n","  # # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, htf_df, [-1]), columns=['sma_30m']))\n","  \n","  # htf_df['stoch'] = stoch(htf_df, 13, 3, 3)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, htf_df, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","   \n","  # fifth_df['ema'] = ema(fifth_df['close'], 5)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, fifth_df, [-1]), columns=['ema5']))\n","\n","        # ------------------------------------ short ------------------------------------ # \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 0:\n","        #   mr_score += 1          \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_upper_1m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_upper_3m'].iloc[i] <= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_upper_5m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == 'MARKET':\n","        #   mr_const_cnt += 1\n","        #   if (res_df['close'].iloc[i] - res_df['short_tp'].iloc[i]) / (res_df['short_out'].iloc[i] - res_df['close'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error):  \n","        #     mr_score += 1\n","\n","           \n","        # ------- entry once ------- #   \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == 1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == -1:\n","        #     prev_entry_cnt += 1          \n","        # # # print(\"prev_entry_cnt :\", prev_entry_cnt)\n","\n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] < res_df['bb_lower_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_lower2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_base_1h'].iloc[i]:\n","\n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] < res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","  \n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['low'].iloc[i] > res_df['short_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1\n","\n","\n","\n","        # ------------------------------------ long ------------------------------------ # \n","          \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 1:\n","        #   mr_score += 1   \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 1:\n","        #   mr_score += 1     \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 1:\n","          # mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_lower_1m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_lower_3m'].iloc[i] >= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_lower_5m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == \"MARKET\":\n","          # mr_const_cnt += 1        \n","          # if (res_df['long_tp'].iloc[i] - res_df['close'].iloc[i]) / (res_df['close'].iloc[i] - res_df['long_out'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error): # 일반적으로 dr 상에서 tp 비율이 더 커짐 (tr 보다)\n","          #   mr_score += 1\n","\n","        # -------------- ep limit -------------- #    \n","        # mr_const_cnt += 1\n","        # # if (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # if config.ep_set.min_eplim_pct < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # # if 0 < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        #   # if res_df['st_gap_15m'].iloc[i] / res_df['open'].iloc[i] < 0:\n","        #   #   print(\"i, res_df['st_gap_15m'].iloc[i] :\", i, res_df['st_gap_15m'].iloc[i])\n","        #   mr_score += 1\n","\n","\n","        # -------------- entry once -------------- #    \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == -1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == 1:\n","        #     prev_entry_cnt += 1\n","          \n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","          \n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] > res_df['bb_upper_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_upper2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_base_1h'].iloc[i]:\n","        \n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] > res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","\n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['high'].iloc[i] < res_df['long_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","          \n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1"]},{"cell_type":"markdown","source":["#### dump"],"metadata":{"id":"_blyFhQJUd5X"}},{"cell_type":"code","source":["short_open_res = np.ones(len(res_df))\n","\n","strat_version = config.strat_version\n","\n","short_rtc_1_col, short_rtc_0_col, short_rtc_gap_col = 'short_rtc_1_{}'.format(strat_version), 'short_rtc_0_{}'.format(strat_version), 'short_rtc_gap_{}'.format(strat_version) \n","long_rtc_1_col, long_rtc_0_col, long_rtc_gap_col = 'long_rtc_1_{}'.format(strat_version), 'long_rtc_0_{}'.format(strat_version), 'long_rtc_gap_{}'.format(strat_version) \n","\n","short_rtc_1_col, short_rtc_0_col, short_rtc_gap_col = 'short_rtc_1_{}'.format(strat_version), 'short_rtc_0_{}'.format(strat_version), 'short_rtc_gap_{}'.format(strat_version) \n","long_rtc_1_col, long_rtc_0_col, long_rtc_gap_col = 'long_rtc_1_{}'.format(strat_version), 'long_rtc_0_{}'.format(strat_version), 'long_rtc_gap_{}'.format(strat_version) \n","\n","data_cols = ['open', 'high', 'low']   # Todo - public_indi 이전에 해야할지도 모름 # 'close', 'haopen', 'hahigh', 'halow', 'haclose'\n","rtc_cols = [short_rtc_1_col, short_rtc_0_col, short_rtc_gap_col, long_rtc_1_col, long_rtc_0_col, long_rtc_gap_col]   # Todo - public_indi 이전에 해야할지도 모름\n","\n","short_rtc_1_, short_rtc_0_, short_rtc_gap_, long_rtc_1_, long_rtc_0_, long_rtc_gap_ = [res_df[col_].to_numpy() for col_ in rtc_cols]\n","open, high, low = [res_df[col_].to_numpy() for col_ in data_cols]\n","short_base = (short_rtc_1_ + short_rtc_0_) / 2\n","long_base = (long_rtc_1_ + long_rtc_0_) / 2\n","# back_ha_o = res_df['haopen'].shift(1).to_numpy()\n","# back_ha_c = res_df['haclose'].shift(1).to_numpy()\n","\n","touch_period = 50\n","# short_open_res *= (back_ha_c >= back_ha_o) & (ha_o > ha_c)\n","# short_open_res *= ha_o == ha_h\n","# short_open_res *= np_timeidx % tf_entry == tf_entry - 1     \n","# short_a_touch = pd.Series(np.where(high >= short_rtc_0_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()  # min -> max\n","short_a_touch = pd.Series(np.where((high >= short_base_b) & (short_base_b >= open), np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).min().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨\n","short_b_touch = pd.Series(np.where(low <= short_rtc_1_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨\n","\n","short_a_touch_line = get_line(short_a_touch, short_rtc_0_)\n","short_b_touch_line = get_line(short_b_touch, short_rtc_1_)\n","short_en_p = (short_a_touch_line + short_b_touch_line) / 2\n","short_base_b = get_line(short_b_touch, short_base)\n","short_rtc_gap_b = get_line(short_b_touch, short_rtc_gap_)\n","short_open_res *= (high >= short_base_b) & (short_base_b >= open) & (short_a_touch < short_b_touch) & (short_base_b + config.loc_set.point.base_gap * short_rtc_gap_b >= short_base)\n","\n","res_df['short_open_{}'.format(strat_version)] = short_open_res"],"metadata":{"id":"r82KfqFqi9tp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"Qbc-VowTGUF5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# short_en_p == short_base_b\n","print(short_en_p[~np.isnan(short_en_p)])\n","print(short_base_b[~np.isnan(short_en_p)])\n","\n","np.sum((short_en_p[~np.isnan(short_en_p)] == short_base_b[~np.isnan(short_en_p)]) == 0) # => why ..?"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CgD4-ZKW11MQ","executionInfo":{"status":"ok","timestamp":1647925782107,"user_tz":-540,"elapsed":366,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"c126aabb-cb41-4392-a80c-53971b146c2c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[ 377.545  378.085  379.015 ... 3148.91  3148.91  3148.91 ]\n","[ 377.545  378.085  379.015 ... 3148.91  3148.91  3148.91 ]\n"]},{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":29}]},{"cell_type":"code","source":["true_idx = short_open_res == 1\n","\n","# print(((short_a_touch_line + short_b_touch_line) / 2)[true_idx][-100:])\n","print(short_en_p[true_idx][-100:])\n","# print(short_a_touch_line[true_idx][-100:])\n","\n","print(short_a_touch_line)\n","print(short_a_touch)\n","print(short_rtc_0_)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AIt9z1NRj5bJ","executionInfo":{"status":"ok","timestamp":1647565975814,"user_tz":-540,"elapsed":310,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"c1b83639-7041-4745-dacd-d9cff49a205d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[2934.59  2934.59  3028.59  3028.59  3028.59  3026.075 3026.075 3016.09  3014.67  3014.4   3014.4   3014.4   3014.4   3014.4   3014.4   3014.395 3014.315 3014.315 3030.235 3030.235 3030.235 3030.235 3051.18  3051.18  3051.18  3077.275 3076.77  3090.945 3105.1   3105.1   3105.1   3105.1   3105.1   3105.1   3099.205 3099.205 3099.205 3105.495 3105.495 3109.615 3127.43  3123.795 3123.795 3123.795 3112.695 3122.715 3122.715 3122.715 3122.715 3115.2   3114.93  3097.035 3115.31  3115.31  3114.245 3114.15  3114.15  3114.15  3112.2   3110.75  3110.75  3112.16  3112.16  3134.39  3134.39  3134.39  3127.905 3127.905 3127.905 3127.905 3128.595 3128.595 3138.59  3138.59  3147.47  3134.205 3133.04  3134.155 3131.105 3131.105 3131.105 3065.94  3065.94  3065.94  3065.51  3068.    3079.33  3079.33  3079.33  3099.805 3169.595 3169.595 3169.595 3169.04  3140.395 3140.395 3140.395 3148.91  3148.91  3148.91 ]\n","[    nan     nan     nan ... 3158.68 3158.68 3158.68]\n","[    nan     nan     nan ... 763812. 763812. 763812.]\n","[ 388.18  388.18  388.18 ... 3158.68 3158.68 3158.68]\n"]}]},{"cell_type":"code","source":["short_a_touch_line = get_line(short_a_touch, short_rtc_0_)\n","short_b_touch_line = get_line(short_b_touch, short_rtc_1_)\n","short_en_p = (short_a_touch_line + short_b_touch_line) / 2\n","\n","# print(((short_a_touch_line + short_b_touch_line) / 2)[true_idx][-100:])\n","# print(short_en_p[true_idx][-100:])\n","\n","print(short_a_touch_line)\n","print(short_a_touch)\n","print(short_rtc_0_)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GXbSWec4ik3g","executionInfo":{"status":"ok","timestamp":1647565931392,"user_tz":-540,"elapsed":2,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"547b0fc1-0e35-4387-e891-a3af42c18476"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[    nan     nan     nan ... 3158.68 3158.68 3158.68]\n","[    nan     nan     nan ... 763812. 763812. 763812.]\n","[ 388.18  388.18  388.18 ... 3158.68 3158.68 3158.68]\n"]}]},{"cell_type":"code","source":["def get_line(touch, rtc_):\n","  touch_copy = touch.copy()\n","  touch_line = rtc_.copy()\n","\n","  nan_idx = np.isnan(touch_copy)\n","  touch_copy[nan_idx] = 0   # for indexing array\n","  touch_line[touch_copy.astype(int)]\n","  touch_line[nan_idx] = np.nan   # for true comp.\n","\n","  return touch_line"],"metadata":{"id":"fx4iA-T1k6GS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# print(short_b_touch[-100:])\n","# print(short_base_b[-100:])\n","true_idx = short_open_res == 1\n","short_a_touch_line = get_line(short_a_touch, short_rtc_0_)\n","short_b_touch_line = get_line(short_b_touch, short_rtc_1_)\n","\n","print(len(short_a_touch_line))\n","print(len(short_b_touch_line))\n","print(((short_a_touch_line + short_b_touch_line) / 2)[true_idx][-100:])\n","\n","print(short_a_touch_line[true_idx][-100:])\n","print(short_b_touch_line[true_idx][-100:])\n","print(short_open_res[true_idx][-100:])\n","print(short_en_p[true_idx][-100:])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Pk8i59oM4CFZ","executionInfo":{"status":"ok","timestamp":1647565955022,"user_tz":-540,"elapsed":330,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"0835f7be-8671-455a-ae4f-9c0737af43a3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["763830\n","763830\n","[2934.59  2934.59  3028.59  3028.59  3028.59  3026.075 3026.075 3016.09  3014.67  3014.4   3014.4   3014.4   3014.4   3014.4   3014.4   3014.395 3014.315 3014.315 3030.235 3030.235 3030.235 3030.235 3051.18  3051.18  3051.18  3077.275 3076.77  3090.945 3105.1   3105.1   3105.1   3105.1   3105.1   3105.1   3099.205 3099.205 3099.205 3105.495 3105.495 3109.615 3127.43  3123.795 3123.795 3123.795 3112.695 3122.715 3122.715 3122.715 3122.715 3115.2   3114.93  3097.035 3115.31  3115.31  3114.245 3114.15  3114.15  3114.15  3112.2   3110.75  3110.75  3112.16  3112.16  3134.39  3134.39  3134.39  3127.905 3127.905 3127.905 3127.905 3128.595 3128.595 3138.59  3138.59  3147.47  3134.205 3133.04  3134.155 3131.105 3131.105 3131.105 3065.94  3065.94  3065.94  3065.51  3068.    3079.33  3079.33  3079.33  3099.805 3169.595 3169.595 3169.595 3169.04  3140.395 3140.395 3140.395 3148.91  3148.91  3148.91 ]\n","[2943.85 2943.85 3036.43 3036.43 3036.43 3031.78 3031.78 3022.49 3017.34 3017.34 3017.34 3017.34 3017.34 3017.34 3017.34 3017.33 3017.33 3017.33 3036.23 3036.23 3036.23 3036.23 3063.36 3063.36 3063.36 3086.   3084.99 3098.88 3115.   3115.   3115.   3115.   3115.   3115.   3112.41 3112.41 3112.41 3118.99 3118.99 3114.33 3140.   3140.   3140.   3140.   3123.39 3129.17 3129.17 3129.17 3129.17 3125.69 3125.15 3104.92 3121.49 3121.49 3121.49 3121.9  3121.9  3121.9  3121.9  3119.   3119.   3119.   3119.   3146.98 3146.98 3146.98 3135.8  3135.8  3135.8  3135.8  3135.8  3135.8  3144.38 3144.38 3158.64 3141.99 3139.66 3139.37 3144.93 3144.93 3144.93 3075.47 3075.47 3075.47 3074.61 3074.61 3087.29 3087.29 3087.29 3119.61 3186.79 3186.79 3186.79 3178.   3150.79 3150.79 3150.79 3158.68 3158.68 3158.68]\n","[2925.33 2925.33 3020.75 3020.75 3020.75 3020.37 3020.37 3009.69 3012.   3011.46 3011.46 3011.46 3011.46 3011.46 3011.46 3011.46 3011.3  3011.3  3024.24 3024.24 3024.24 3024.24 3039.   3039.   3039.   3068.55 3068.55 3083.01 3095.2  3095.2  3095.2  3095.2  3095.2  3095.2  3086.   3086.   3086.   3092.   3092.   3104.9  3114.86 3107.59 3107.59 3107.59 3102.   3116.26 3116.26 3116.26 3116.26 3104.71 3104.71 3089.15 3109.13 3109.13 3107.   3106.4  3106.4  3106.4  3102.5  3102.5  3102.5  3105.32 3105.32 3121.8  3121.8  3121.8  3120.01 3120.01 3120.01 3120.01 3121.39 3121.39 3132.8  3132.8  3136.3  3126.42 3126.42 3128.94 3117.28 3117.28 3117.28 3056.41 3056.41 3056.41 3056.41 3061.39 3071.37 3071.37 3071.37 3080.   3152.4  3152.4  3152.4  3160.08 3130.   3130.   3130.   3139.14 3139.14 3139.14]\n","[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n","[2934.59  2934.59  3028.59  3028.59  3028.59  3026.075 3026.075 3016.09  3014.67  3014.4   3014.4   3014.4   3014.4   3014.4   3014.4   3014.395 3014.315 3014.315 3030.235 3030.235 3030.235 3030.235 3051.18  3051.18  3051.18  3077.275 3076.77  3090.945 3105.1   3105.1   3105.1   3105.1   3105.1   3105.1   3099.205 3099.205 3099.205 3105.495 3105.495 3109.615 3127.43  3123.795 3123.795 3123.795 3112.695 3122.715 3122.715 3122.715 3122.715 3115.2   3114.93  3097.035 3115.31  3115.31  3114.245 3114.15  3114.15  3114.15  3112.2   3110.75  3110.75  3112.16  3112.16  3134.39  3134.39  3134.39  3127.905 3127.905 3127.905 3127.905 3128.595 3128.595 3138.59  3138.59  3147.47  3134.205 3133.04  3134.155 3131.105 3131.105 3131.105 3065.94  3065.94  3065.94  3065.51  3068.    3079.33  3079.33  3079.33  3099.805 3169.595 3169.595 3169.595 3169.04  3140.395 3140.395 3140.395 3148.91  3148.91  3148.91 ]\n"]}]},{"cell_type":"code","source":["test_ratio=0.3\n","plot_is=1\n","\n","open_idx = open_info_df.index.to_numpy()\n","len_df = len(res_df)\n","s_idx = (open_idx < int(len_df * (1 - test_ratio))) == plot_is\n","s_open_info_df = open_info_df[s_idx]\n","s_open_idx = open_idx[s_idx]\n","\n","open_info_list = [s_open_info_df[col_].to_numpy() for col_ in s_open_info_df.columns]\n","side_arr, zone_arr, id_arr, id_idx_arr = open_info_list\n","\n","# ------------ get paired_res ------------ #\n","start_0 = time.time()\n","paired_res = en_ex_pairing(res_df, s_open_idx, open_info_list, ohlc_list, point2_list, market_data_list, config_list, np_timeidx, funcs)\n","# valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr = paired_res\n","print(\"en_ex_pairing elapsed time :\", time.time() - start_0)  #  0.37 --> 0.3660471439361572 --> 0.21(lesser if)\n","\n","# ------------ idep_plot ------------ #\n","start_0 = time.time()\n","h, l = ohlc_list[1:3]\n","sample_ratio=1 - test_ratio\n","if sample_ratio is not None:\n","  sample_len = int(len_df * sample_ratio)\n","else:\n","  sample_len = len_df\n","\n","# ------ short & long data preparation ------ #\n","# start_0 = time.time()\n","valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr, bias_arr = paired_res    \n","assert len(valid_openi_arr) != 0, \"assert len(valid_openi_arr) != 0\"    \n","short_valid_openi_idx = np.where(side_arr[valid_openi_arr] == OrderSide.SELL)[0]  # valid_openi_arr 에 대한 idx, # side_arr,\n","long_valid_openi_idx = np.where(side_arr[valid_openi_arr] == OrderSide.BUY)[0]\n","\n","valid_open_idx = open_idx[valid_openi_arr].reshape(-1, 1)\n","\n","short_obj = np.hstack((pair_price_arr, pair_idx_arr, valid_open_idx))[short_valid_openi_idx]\n","long_obj = np.hstack((pair_price_arr, pair_idx_arr, valid_open_idx))[long_valid_openi_idx]\n","both_obj = np.vstack((short_obj, long_obj))\n","print(\"short_obj.shape :\", short_obj.shape)\n","print(\"long_obj.shape :\", long_obj.shape)\n","\n","short_obj, long_obj, both_obj = [np.split(obj_, 5, axis=1) for obj_ in [short_obj, long_obj, both_obj]]\n","\n","short_lvrg_arr, long_lvrg_arr = [lvrg_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","short_fee_arr, long_fee_arr = [fee_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","short_tpout_arr, long_tpout_arr = [tpout_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","short_bias_arr, long_bias_arr = [bias_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qjpDlxCoInLJ","executionInfo":{"status":"ok","timestamp":1647001248040,"user_tz":-540,"elapsed":5037,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"8c416639-5139-44dc-9707-a1c50f7c66f8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 4.855237722396851\n","short_obj.shape : (7514, 5)\n","long_obj.shape : (9634, 5)\n"]}]},{"cell_type":"code","source":["# short_bias_arr.shape\n","short_true_bias_idx = short_bias_arr[:, 0] < short_bias_arr[:, 1] # info, threshold\n","long_true_bias_idx = long_bias_arr[:, 0] > long_bias_arr[:, 1]"],"metadata":{"id":"r_4qlQjNI_Vl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# long_true_bias_idx\n","# np.hstack((short_true_bias_idx, long_true_bias_idx))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nOtoKX7fJUs6","executionInfo":{"status":"ok","timestamp":1646789605507,"user_tz":-540,"elapsed":340,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"b56e0cd9-46fd-4c3e-d85c-570aa18d3b52"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([False, False,  True,  True, False, False,  True,  True, False, False, False,  True, False,  True, False,  True, False,  True,  True,  True, False, False,  True,  True,  True, False, False,  True,  True, False,  True, False, False, False,  True, False, False,  True,  True, False, False,  True, False,  True,  True,  True,  True, False,  True,  True, False,  True,  True,  True, False, False,  True, False, False,  True,  True,  True,  True, False, False,  True, False,  True, False, False,  True, False, False, False,  True,  True,  True, False,  True, False, False,  True,  True, False, False, False,  True,  True, False,  True,  True,  True, False, False, False, False,  True, False, False,  True, False, False,  True,  True, False, False,  True,  True,  True,  True, False,  True, False,  True,  True, False, False,  True, False, False,  True,  True, False, False, False, False,  True,  True,  True, False, False, False,  True,  True, False, False,  True, False, False,  True,  True, False,  True, False, False, False,  True,  True, False,  True, False, False, False,  True,  True, False, False, False, False, False, False,  True, False,  True,  True,  True,  True,  True,  True, False,  True,  True,  True,  True,  True,  True,  True,  True, False,  True,  True, False, False, False, False,  True,  True,  True, False,  True,  True, False, False,  True,  True, False,  True, False, False,  True])"]},"metadata":{},"execution_count":127}]},{"cell_type":"code","source":["# print(len(long_pr))\n","# print(len(long_true_bias_idx))\n","print((long_pr.shape))\n","print((long_bias_arr.shape))\n","# print((long_true_bias_idx.shape))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"70wh4eysKqxw","executionInfo":{"status":"ok","timestamp":1647001266151,"user_tz":-540,"elapsed":436,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"d3e8b24f-e74e-415f-c7a9-20d8617d25c9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(9634, 1)\n","(9634, 2)\n"]}]},{"cell_type":"code","source":["print(len(long_pr[long_pr != 1]))\n","len(long_pr[long_pr > 1]) / len(long_pr[long_pr != 1])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OcR_qrEp7Rnu","executionInfo":{"status":"ok","timestamp":1647001306279,"user_tz":-540,"elapsed":348,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"3e8aa179-237a-48e8-a0d0-af56fa26bc5b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["9634\n"]},{"output_type":"execute_result","data":{"text/plain":["0.37315756695038405"]},"metadata":{},"execution_count":40}]},{"cell_type":"code","source":["print(np.sum(long_pr[long_true_bias_idx] > 1) / np.sum(long_true_bias_idx))\n","print(np.sum(long_true_bias_idx) / len(long_true_bias_idx))\n","# long_true_bias_pr = long_pr[long_true_bias_idx]\n","# len(long_true_bias_pr[long_true_bias_pr > 1])\n","# 30 / 66"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MkJS3UGONHJ8","executionInfo":{"status":"ok","timestamp":1646810691555,"user_tz":-540,"elapsed":3,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"aa99b628-93b5-4705-c27b-fe6f80f95df0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.39106145251396646\n","0.599163179916318\n"]}]},{"cell_type":"code","source":["print(get_recall(long_true_bias_idx))\n","print(get_precision(long_pr, long_true_bias_idx))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lvULyeNJKSeP","executionInfo":{"status":"ok","timestamp":1646788110286,"user_tz":-540,"elapsed":5,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"3b10bb5f-238e-4687-f38c-20037f2cded6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.5076923076923077\n","0.45454545454545453\n"]}]},{"cell_type":"code","source":["signi=False\n","if not signi:\n","    plt.style.use(['dark_background', 'fast'])\n","    fig = plt.figure(figsize=(24, 8))\n","    gs = gridspec.GridSpec(nrows=2,  # row 몇 개\n","                            ncols=3,  # col 몇 개\n","                            height_ratios=[10, 1]\n","                            # height_ratios=[10, 10, 1]\n","                            )\n","gs_idx = 0\n","title_position=(0.5, 0.5)\n","fontsize=15"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":33},"id":"Fs1RkHxQKjCX","executionInfo":{"status":"ok","timestamp":1646788777938,"user_tz":-540,"elapsed":349,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"491bcb64-df8e-4b20-a42f-b68e4c670a07"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1728x576 with 0 Axes>"]},"metadata":{}}]},{"cell_type":"code","source":["try:\n","  # start_0 = time.time()\n","  long_pr = get_pr(OrderSide.BUY, *long_obj[:2], long_lvrg_arr, long_fee_arr, inversion)\n","  long_total_pr = to_total_pr(len_df, long_pr, long_obj[-2])\n","  long_cum_pr = np.cumprod(long_total_pr)\n","  long_liqd = liquidation(OrderSide.BUY, l, long_obj[:4], long_lvrg_arr, long_fee_arr)\n","  long_prcn, long_rc = precision(long_pr, long_true_bias_idx), recall(long_true_bias_idx)\n","\n","  if signi:\n","    long_idep_res_obj = (long_prcn, long_rc) + get_res_info_nb_v2(sample_len, long_pr, long_total_pr, long_cum_pr, long_liqd)\n","  else:\n","    gs_idx = plot_info_v4(gs, gs_idx, sample_len, long_pr, long_total_pr, long_cum_pr, long_liqd, long_prcn, long_rc, long_lvrg_arr[-1], title_position, fontsize)\n","  # print(\"elapsed time :\", time.time() - start_0)\n","except Exception as e:\n","  gs_idx += 1\n","  print(e)\n","\n","# plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":183},"id":"X69t-H3tKJdm","executionInfo":{"status":"ok","timestamp":1646788895118,"user_tz":-540,"elapsed":4,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"cf76f45a-850d-4983-d758-8598c0408305"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{}}]},{"cell_type":"code","source":["def precision(pr_list, true_idx):\n","  true_bias_pr = pr_list[true_idx].ravel()\n","  return np.sum(true_bias_pr > 1) / len(true_bias_pr)  # 차원을 고려한 계산\n","\n","def recall(true_idx):\n","  return np.sum(true_idx) / len(true_idx) #  2.16 µs per loop (len) --> 3.78 µs per loop   # false_idx 중에서 tp 체결된 건을 더해주어야함\n","\n","def plot_info_v4(gs, gs_idx, sample_len, pr, total_pr, cum_pr, liqd, prcn, rc, leverage, title_position, fontsize):\n","  try:\n","    plt.subplot(gs[gs_idx])\n","    idep_res_obj = get_res_info_nb_v2(sample_len, pr, total_pr, cum_pr, liqd)\n","    plt.plot(cum_pr)\n","    plt.plot(idep_res_obj[-1], color='gold')\n","    if sample_len is not None:\n","      plt.axvline(sample_len, alpha=1., linestyle='--', color='#ffeb3b')\n","    # title_str = \"prcn : {:.3f} rc : {:.3f}\\n len_pr : {} dpf : {:.3f}\\n wr : {:.3f} sr : {:.3f}\\n acc_pr : {:.3f} sum_pr : {:.3f}\\n\" +\\\n","    #           \"min_pr : {:.3f} liqd : {:.3f}\\n acc_mdd : -{:.3f} sum_mdd : -{:.3f}\\n leverage {}\"\n","    title_str = \"prcn : {:.3f}\\n rc : {:.3f}\\n len_pr : {}\\n dpf : {:.3f}\\n wr : {:.3f}\\n sr : {:.3f}\\n acc_pr : {:.3f}\\n sum_pr : {:.3f}\\n\" +\\\n","              \"min_pr : {:.3f}\\n liqd : {:.3f}\\n acc_mdd : -{:.3f}\\n sum_mdd : -{:.3f}\\n leverage {}\"\n","    plt.title(title_str.format(prcn, rc, *idep_res_obj[:-1], leverage), position=title_position, fontsize=fontsize)\n","  except Exception as e:\n","    print(\"error in plot_info :\", e)\n","\n","  return gs_idx + 1"],"metadata":{"id":"J2nupeDOPdQI"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JNQxkb06ZdTe"},"source":["## plot_check_v2"]},{"cell_type":"code","source":["# ------------------ plot_config ------------------ #\n","save_mode = 0\n","front_plot = 0    # 0, 1, 2 (whole, open, ep_tick)\n","bias_plot = 0     # precision check : 1, recall check : 0\n","pr_descend = 1    # 1 -> 내림차순\n","position = 1      # -1 / 1, 0 (short / long)\n","# tf_plot = 1       # true - false plot\n","# pr_sort = 1     # -> default 1,  이상한 체결 확인하기 좋음\n","# wl_case = 1     # 1 / -1 / 0 (win loss study) --> oid\n","\n","x_max = 500\n","x_margin_mult = 1/30\n","y_margin_mult = 1/30  # 0 \n","\n","prev_plotsize = 20 #  100\n","post_plotsize = 60\n","# post_plotsize = config.tr_set.end_tick\n","\n","inversion = 0\n","hedge = 0\n","\n","# ------ show or save ------ #\n","if save_mode:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".ftr\", \"\")\n","  shutil.rmtree(plot_check_dir, ignore_errors=True)  # remove existing dir\n","  os.makedirs(plot_check_dir)\n","  print(plot_check_dir)\n","else:\n","  plot_check_dir = None\n","\n","# ------------ 한 방향에 대해 plot_check 함 (by position var.) ------------ #\n","#   obj by position  \n","if position == -1:\n","  pos_str = \"SELL\"\n","  pr_, obj_ = short_pr, short_obj\n","  arr_list = [short_lvrg_arr, short_fee_arr, short_tpout_arr, short_bias_arr]\n","else:   # both option currently not supported\n","  pos_str = \"BUY\"\n","  pr_, obj_ = long_pr, long_obj\n","  arr_list = [long_lvrg_arr, long_fee_arr, long_tpout_arr, long_bias_arr]\n","pr, obj, [lvrg_arr, fee_arr, tpout_arr, bias_arr] = sort_bypr_v3(pr_, obj_, arr_list, descending=pr_descend)\n","\n","pr_msg = \"%s\\n {} ~ {} -> {:.5f}\\n lvrg : {}\\n fee : {:.4f}\" % (pos_str)  # pos_str 으로 이곳에서 정의함\n","\n","# ------------------ data chunknize ------------------ #\n","np_df = res_df.to_numpy()\n","\n","left_end_idx = obj[2] - prev_plotsize  # left_margin 기준 - entry_idx\n","right_end_idx = obj[3] + post_plotsize\n","invalid_left_end = np.sum(left_end_idx < 0)\n","\n","np_plot_params = np.hstack((left_end_idx, right_end_idx, pr, *obj, lvrg_arr, fee_arr, tpout_arr, bias_arr))[invalid_left_end:]\n","if bias_plot:\n","  bias_arr_ = bias_arr[invalid_left_end:]\n","  if position == -1:\n","    bias_idx = bias_arr_[:, 0] < bias_arr_[:, 1]\n","  else:\n","    bias_idx = bias_arr_[:, 0] > bias_arr_[:, 1]\n","  np_plot_params = np_plot_params[bias_idx]"],"metadata":{"id":"A6QSF9COaHO5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# ------------ make col_idx_dict config ------------ #\n","nonstep_col_list = []\n","step_col_list = []\n","stepmark_col_list = []\n","# ------ set period ------ #\n","hc_itv1 = '5T'\n","hc_itv2 = '15T'\n","\n","rs_itv = 'T'\n","dc_itv = 'T'\n","hdc_itv = '5T'\n","hhdc_itv = 'H'\n","\n","sd_dc_itv = 'T'\n","sd_dc_period1, sd_dc_period2 = 20, 40\n","\n","bb_itv = dc_itv\n","hbb_itv = hdc_itv\n","hhbb_itv = hhdc_itv\n","\n","# ------ nonstep_col_list - add info(col, alpha, color, linewidth) ------ #\n","# nonstep_col_list.append([['close'], 1, '#ffffff', 2])\n","\n","# ------ step_col_list - add info(col, alpha, color, linewidth) ------ #\n","# step_col_list.append([['open_{}'.format(hc_itv1), 'close_{}'.format(hc_itv1)], 1, '#ffffff', 2])\n","# step_col_list.append([['open_{}'.format(hc_itv2), 'close_{}'.format(hc_itv2)], 1, '#ffffff', 4])\n","\n","# step_col_list.append([['resi_{}'.format(rs_itv), 'sup_{}'.format(rs_itv)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['resi_out_{}'.format(rs_itv), 'sup_out_{}'.format(rs_itv)], 1, 'dodgerblue', 2])\n","\n","# step_col_list.append([['dc_upper_{}'.format(dc_itv), 'dc_lower_{}'.format(dc_itv)], 1, '#ffeb3b', 2])\n","# step_col_list.append([['dc_upper_{}'.format(hdc_itv), 'dc_lower_{}'.format(hdc_itv)], 1, '#e65100', 2])\n","# step_col_list.append([['dc_upper_{}'.format(hhdc_itv), 'dc_lower_{}'.format(hhdc_itv)], 1, '#c2185b', 4])\n","step_col_list.append([['dc_upper_{}{}'.format(sd_dc_itv, sd_dc_period1), 'dc_lower_{}{}'.format(sd_dc_itv, sd_dc_period1)], 1, '#ffeb3b', 2])\n","step_col_list.append([['dc_upper_{}{}'.format(sd_dc_itv, sd_dc_period2), 'dc_lower_{}{}'.format(sd_dc_itv, sd_dc_period2)], 1, '#e65100', 2])\n","step_col_list.append([['short_base_{}'.format(sd_dc_itv)], 1, '#e70f20', 2])\n","step_col_list.append([['long_base_{}'.format(sd_dc_itv)], 1, '#279e2c', 2])\n","\n","# step_col_list.append([['bb_upper_{}'.format(bb_itv), 'bb_lower_{}'.format(bb_itv)], 1, '#ffffff', 1])\n","# step_col_list.append([['bb_upper_{}'.format(hbb_itv), 'bb_lower_{}'.format(hbb_itv)], 1, '#ff00ff', 2])\n","# step_col_list.append([['bb_upper_{}'.format(hhbb_itv), 'bb_lower_{}'.format(hhbb_itv)], 1, '#3179f5', 4])\n","\n","# step_col_list.append([['ema_5T'], 1, '#03ed30', 2])\n","\n","# ------ stepmark_col_list - add info(col, alpha, color, linewidth) ------ #\n","# stepmark_col_list.append([['sar_T'], 1, 'dodgerblue', 7])\n","\n","\n","# ------ str to numbcol ------ #\n","nonstep_col_arr = strcol_tonumb(res_df, nonstep_col_list)\n","step_col_arr = strcol_tonumb(res_df, step_col_list)\n","stepmark_col_arr = strcol_tonumb(res_df, stepmark_col_list)\n","\n","col_idx_dict = \\\n","{\n","  \"ohlc_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close']),\n","  \"vp_col_idxs\": get_col_idxs(res_df, ['close', 'volume']),\n","  # \"ohlc_col_idxs\": get_col_idxs(res_df, ['haopen', 'hahigh', 'halow', 'haclose']),  # heikin-ashi ver.\n","  \"nonstep_col_info\": nonstep_col_arr,\n","  \"step_col_info\": step_col_arr,\n","  \"stepmark_col_info\": stepmark_col_arr,\n","  \"ylim_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close'])  # , 'dc_upper_H', 'dc_lower_H', 'dc_upper_15T', 'dc_lower_15T'\n","}"],"metadata":{"id":"FnSydxFXn_f9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1647925070771,"user_tz":-540,"elapsed":1733,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"0933aecc-cd29-41e0-ea32-080c90c19525"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/content/drive/My Drive/Colab Notebooks/JnQ/funcs/funcs_plot_check.py:10: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  step_col_arr = np.array(col_list)\n"]}]},{"cell_type":"markdown","source":["### plot"],"metadata":{"id":"E-VwJkNQbGI4"}},{"cell_type":"code","source":["_ = [plot_check_v3(np_df, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir, **col_idx_dict) for param_zip in zip(np_plot_params, np_plot_params[::-1])]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"Roy40BmByyZc","executionInfo":{"status":"error","timestamp":1647926538472,"user_tz":-540,"elapsed":17542,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"484aea52-3605-4241-9b9d-3c3c965c181e"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 2 Axes>"],"image/png":"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MmW0ePHia46tJOaQP/30k55//nkFBARoypQp6tu3r44cOVLg725ePubl4xTlmCkpKdqwYYP279+v3NxcPf744w6/ifnCCy/op59+0s8//1zkMV92tc9cSVwbAAAKQuESAP7PhQsXtGLFCnXs2FFdu3Z1aCtXrpwef/zxfHc97ty5U+np6crLy9P333+vuXPn2r8xu2bNGo0aNUqLFi1SUlKSkpKSZLPZdOTIEUmXCkU+Pj72ffn4+Mhms+UbV2HfPL3s8rcbi7IvSWrZsqXOnDmjxo0bq02bNjp37pyWLVumTZs26fz589q0adPVLpMk6dixY1qxYoWioqLytT355JPasGGDQ1EzNzdX586d0zvvvKPz589r3bp1iomJUceOHa95rMcee0ze3t5asGBBge2JiYlKSkqSMUZ79+7VmDFj1Lt37wL7XnnNpcKvVb9+/WSz2WSz2fTdd9/la7948aL++9//avfu3UpPT9c999wjV1fXa57Pjfrss8/k7u6uihUrytPTU19//bX9jssmTZqoffv2+vDDD6+5n4yMDM2aNUtLliyxT+D79++vWrVqKTk5WVOmTNGcOXPsn1cAAAAARXc9c8jL6tSpo++//14vvviiNmzYYF//wgsvKDc3VwkJCVqyZIkiIyMd/l7ftGmTfvvtN+Xm5mrChAnKzMwssKhoxRzyagqaQ545c0Y7duxQXl6eTpw4oSFDhqhTp072ot7v7dq1S7m5uRo9erR93fr163X+/HllZWXpxRdfVK1atdSwYUN5eHjovffe0wsvvFCksRVnDjlixAj7HHLKlCn52s+dO6c9e/Zo165dOnfuXKFPtynu+zNy5EiFhISoevXqKlu2rEaPHq3o6GiVK1dOVatW1QsvvKA333yzSOd7pat95opzbQAAKA4KlwBwBRcXF9WpU8dhXY8ePZSenq4ff/zxqtsaYxweozJ58mTVq1dPVapU0aJFi+Ti4qK9e/dKunTnXpMmTex9mzRpku8xQNWrV9fDDz981cJlZmamjh07ds19XbZhwwa98847ys3NVXJyskaOHKnatWvr7rvv1ujRo5WXl3fVc7ysoOskSU899VS+yfmePXvy9SvqI2pCQ0PVvHlzpaSkKCUlRX369NFLL71U6Ldjr3wPfu/Ka+7h4aE6deoUeK3mzZsnb29veXt7q0uXLvb1np6eioiI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ffTRR9W2bVuNHz9eiYmJKigo0IsvvihJioqK0vz589W+fXsVFBQoNTW10ccHALgnb0ZbqfBUvft48gvn1RGdFd86osH9sqsqNaHyuMfO+83duzx2rEDyk5/8ROvWrdPevXuVmpqqp59+Wtu3b5ckLViwQOPHj9dDDz2kwYMH68knn9RXX32ljz/+WIcOHdIDDzygmpoaPfjgg3r++ee1fv167dmzx/63gyQtWbJEUVFR2r17t8sY3nrrLfvfFIcPH7avr127VgMGDNDjjz+uY8eOqX///l56FwBnrpKWruZSOkq5b7+nw6nDzEpFbyY3AQAAAAQOEpcA7ObNm6eEhAR1795dr73mPNtx/vz5Tl/42UyZMkVTpkyRJP3lL39xemzlypVauXKl/X5ycrLT4+PHj5dknWX1/vvvOz0WEhKiDh06OK2dOXNGpaWldSoicnJyNH/+fPv9QYMGuYxBkqqqqpSammqYlExKSqqzJkk33XRTnfgAAM0TeS5pWRHXRdKxZh0rOmOdveoyP2GU05fttkocd5KWktzez1cCtULrjjvuUFVVlSQpPDxc//M//6MrrrhCkjRp0iTt3r1b8+fPV+/evTV27FhNmTJFH3/8sZ555hlFRkaqY8eOSklJUWxsrCTpxIkTeuMN63zra665RjExMUpPT9fJkyeNA5C0Z88ebdiwQZWVlfa1m266Sddee60WLFigxx57TD/++KO33gLApaZUTi9f7WIGfBMZtVilUhEAAACA2ULNDgCA/ygqKtJPf/pTvfbaazp58qQsFotyc3M1depULVy40KexXHLJJTp58qTTbceOHT6NAQDgHXkz2tpbxErS6MHz7VU+jeGqOqehL9u7lB10efNHjklLd6qy/IUtaSlJt9xyi86cOaOcnBy1atVKUVFROnLkiKTzlZB9+vSx779582bt379fV111lf785z/r6FHnWdXTp0+XJD3//PP1xvDAAw/o1KlTOnjwoBISEiRJAwYMkGS9WKmyslLff/+9/vjHPzbz1QKBx3aBR3TGOmZAAgAAAPAbVFwCcPLtt9/6xYynwsJCxcfHO6398MMPJkUDAPCkSIf2sNZqy/PJRm/PQgtkgTLbsrYnn3xSt912m+bOnaudO3fWedyoi8H06dN16aWX6pFHHtH999+vNWvW6MSJE5Kk9u3ba/z48dq1a5f++c9/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3aohQ4Y4+FsAgD/Fu4YO71tplCCmFHGk2zuOakTbgYgHAADwRko9Lt977z3NmjVLzz//vG699VZddNFFoZ9dcskleuutt/TRRx/p3nvv1f/+7/9q1KhR+uCDD0LrxLvgBAC7UFY2cww53eX1ECyx0mfP6JVppceMkUXmRsZYOlLNJhz5XLBvqVtlnezKmk2W3//97BTeT2n8qomh5+0NJ5Q3rzHua43jFCt7sacm/s8BZJ+enh7btrVy5UqtXLlSkrR161bbtgsAAAAAcFfCjEsz8+bN08KFC/XGG29o4MCBOn062OvoyJEjuvjii3X11VfrnnvuUSAQCPW/TAazZQHYwQgw/ekYEyVgD7tLFfebONjW7TklV7IJnbRjgXnP13T5oefOrnmNOrTsoNfDAJABmpubVVQU/E+lqKhIR48GS7cfOnQoYjLsZz/7WR06dCjmcgAAAABA9kop43LXrl268cYbJUnjxo1TeXm5JOn06dOhsrJvvfWW9u3bp5KSEh06dEif/exnQ69PdMHJbFkAdvrO22WSfuv1MJBFxtfdod1V1abZhEaPy6axh1Tf1WHaTzMVZBNmNqN8bnvJCI1Zfo9t2zV67tR3ddi2TQBwygsvvKA77rhDDz/8sO644w49//zzoeXf+973tHbtWk2ePFltbW1qamrS73//ez344IMaNGiQJOlrX/uafvzjH3v5KwBAVmru7NTw/PyIXpjdx9vUd1Chuo9bbw2A3BJdZai2riWiQgvcFX3tnmrlJADwg5QyLocOHSpJysvL07333qvHH39ckjRkyBD16RPc5CWXXKJx48Zp//79ampq0kcffaTJkydLkubOnRu6SAUAwO82BEotlX6VIgNIRlAJMMycdL/6Diq0fbt2Bci99GZDu95saPd6GABsEggEtHnzZo0fP17vv/++5s2bp4ceekg33HCDdu/erbKyMj300EOSpBdffFH79+/X3r17tXLlSi1cuFCS1Nraqn/7t38LVeN54IEH1Nqamf1y7cB5Mj0cPyA2owdmNvTCbK2s8HoIWS+87304uysUwZr6JvPlVE4CkMkSZlwGAgFNnz5dQ4YM0fvvv6/77rtPAwYM0F133SVJevbZZ/WrX/1KkvSVr3xFDzzwgLq6unTmzBl997vfDV1YLly4UE899ZQ+85nP6KWXXtJLL73k4K8FIJttCJQy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TJT6wQcf6PbbbydxCaDZ6ZuS5PJ5BdPS8xU3uoPVtpajWurMhjNW22KDWru0XPgGb5h/dW1KVJ2/UXdbOUyKdd1c6wAAD4iKitKWLVssw8lu3LhRr7zyiqqqqrRmzZo6x1933XX64IMPdPbsWeXl5Sk0NFQRERFWx7Rs2VLR0dHq1KmT8vLyPPE2AAAAAPiARx99VO3bt7falpmZqZ49exoUERzVYOLSlocfflhffvmlXnnlFbVo0ULXXnutZd+wYcP0888/69ixY3rsscf0yy+/KDw83Kqr7dGjRzV06NB6zz99+nQlJlb/8N+pU6emhAgAzUZ8gu2bPMw9MAM6b7LqeekMZxNQ77e+WLFBrTXKJdHAETXnX90dN0a3GRBDY/5m0tLzXVJmY5OWGbkuKRYA4ISsrCw9//zz6tChg8rKypSQkKCuXbtqz549mjBhguLj41VVVWU5vnfv3tq3b58k6d5771VoaKgk6fnnn9fzzz+vAQMGaP369br99tsVERGhiooKSXyHBAAAACBt27bN6BDQRA3OcWnLjBkz9Mgjj+jSSy/VI488orfffltS9R9Cjx49dOWVV+q1115TampqA2eybfny5Ro8eLAGDx6skydPNukcAOCNIpOjFT67R8MHGqRmAqpi54WWx472IqXXp7G6BAc3+jXtVzft/2pbAjpvanCpLxHfVN3WOLZM3uzSYgEATbB79269+OKL+uqrr7Ru3TplZ1cPfR8ZGalu3bqpb9++6tevn+X42NhY3XvvvZJktf29995TWVmZfvjhB+3YsUNSdZKT75AAAACAf+jatatSU1NVVFSko0eP6v7777fsmz9/vkwmk9USExMjSWrbtq1SUlJUUlKinJwcPfroo/WW8fjjj+vw4cMymUzauXOn1b577rlHe/fulclkskxjYVa7bJPJpPnz50uSrrnmGv3www8qLS3Vjh07dN1111leFxcXp6ysLJWWluq7775TVFSUZd+UKVO0f/9+lZaWat26derWrZtl3x//+EcdOXJEJSUl+uCDDyxzcgYGBurVV19Vbm6uCgsLtXTpUsscn+3atdO7776rU6dO6cSJE5bpOhqq28jISH399dcqKSnR/v37NW7cOMs+e+9t4sSJ2r17t8rKynT06FE9++yz9da71MTE5d13361PPvlEkrRq1SoNGTJEklRcXKzTp09L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H39cCxcu1L59+6z22XtvQUFBmjdvnnJycvTII4/ovvvu0/z58/Xll1/qp59+sll3TRoq1t9Mn9RF0yd1afhAAM2K+QLdF2RUlFoexwa1NjASAGgarrcAwD7aSedQfwDQeIGhIVZrSZYEpnntrJLMusMs1oeemQDMVq9erUsvvVTDhg2zjPxpHuXz888/1/Lly5WWlqY//elPkqT+/furoKBARUVFuuSSSyRJ4eHhkqQDBw5Iqp7TsuYIMM6IiorSiBEj9Omnnyo3N9eyfe7cuerVq5eGDBmihQsXWsV91113KSoqSoMGDdJHH30kSdq1a5fOnj2rESNGKCYmRpdffrm2bNmisrIyHThwQKdOnVJMTIyuvvpq9enTR8eOHdPhw4dVWlqqffv2qU+fPho6dKguv/xynT171lLWpk2bFBERoWHDhmn48OEKDAy07LNXt0uWLFGPHj10zTXXaM6cOVb76ntvMTExGjBggNLT07VmzRq9//77uvDCC+udW1RyoMclpKRFvSUxtAzgb2pemHszU95wpaXnq2vCLuWERLi1rParU916fgD+i+stALCPdtI51B8AeCdHe1A60iMTnmfKG15rS55Mb1pv25CXofrTE0DT3HXXXerSpYvOnj2rRx99VKdPn9ayZcskSR999JF27typf/3rX/p//+//SZK2bNkiSXrvvfc0a9Ys/elPf9KVV14pSXr33XclSV999ZVl2sRTp07pN7/5jfr27StJat++vaZNm6Zt27Zp+/btGjhwoAYNGqS2bdsqMDBQ06ZN0969e7Vx40ZJ1b0tpeq5MGuaN2+eTp48qYsvvliPPfaYfvzxR23YsEGS9MILL2jv3r3q06eP7r77bq1evVoHDx5UixYttGjRIm3fvl2DBw/W6NGjtXDhQpWXl6tr16566KGHtGfPHo0ZM0aRkZF66KGHJEkxMTG69dZbdfToUU2cOFGhoaF65ZVXJFUPHztw4EAVFBTo/vvv17lz57Ro0aIG6/b++++XyWRScHCw/vjHP+ro0aP629/+Zve9denSRRUVFYqLi9P06dMtc2nu2bOn3n9fEpcA0Ah9U5K0NyHR7jEF48d6JMGXlp6vuNEdJMmyBsyaMmxPY61NiTLkb2/lMI8XCQAAAACAoYz6Dm5Lzd+kGjKqc7abo4E/atOmjZ566imFhoZq586duvfee3X8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9x9kAQAAKC15natz0UUXRUNDQ9TV1eWWVVZWxpo1a+LnP/95XHjhhRERMXTo0NixY0fuPjt27IihQ4e2+LizZs2K1atXx+rVq2PQoEH5pAgAAEAR+P3f//2YNWtWTJgwIcaOHRvTpk2LkSNHxpw5c+L555+P0aNHx/PPPx9z5syJiIgrrrgiRo0aFaNGjYrZs2c3+SoSAAAASlNejcsbb7yxydmWu3fvjt/93d+N8ePHxx133BGLFi2Kfv36nfTjPvjgg3H++efH+eefH/v27csnRYBOY8CSZbmf37reWe0AQHGpqqqK6urqOHToUBw9ejT+7d/+La677rq45pprYsGCBRERsWDBgtzsPNdcc03uK0uqq6ujf//+UVFRkSx/AAAACu+UG5fdunWL6667Ln7605/mlr377ru5aWXXrFkTW7dujdGjR8fOnTtj2LBhufsNGzYsdu7cmUfaAAAAdCQbN26Miy66KE4//fTo3bt3XHnllTF8+PAYPHhw1NfXR0REfX19DB48OCI+mLln+/btud8/0cw9Zu0BAAAoDafcuJwyZUps3ry5SQNy0KBB0bXrBw9ZWVkZo0aNim3btkV9fX38z//8T0ycODEiIm6++eb42c9+lmfqAAAAdBSbN2+Oe++9N1auXBkrVqyIdevWxdGjR5vdL8uyk35ss/YAAACUho9tXC5atCh++ctfxqc+9anYvn173HLLLRERMWPGjCbTxEZEXHzxxbF+/fpYu3ZtPP744/GVr3wl3nrrrYiIuO222+Kf//mfo66uLrZu3RrPPvtsAZ5OYXQ546XocsZLqdMACsQYB0hPLYbO4cc//nGcd955cckll8Rbb70VW7ZsiYaGhtwUsBUVFbFnz56IiNi5c2cMHz4897udfeYedTI/th9QjNQmAGiu7OPucNNNNx13+Z/8yZ80W/bEE0/EE088cdz7v/rqq3H22WefZHoAtIUj+xujrH95wdfz9KKquGrq6QVfz0ctvCBiiq+8AoCid8YZZ8TevXtj+PDhcd1118WkSZOisrIyZs6cGffee2/MnDkzNzvPk08+GV//+tdj8eLFMXHixGhsbMxNKQsAAEBp+tjGJQAd37bbvh2jFz1Q8PUc27RcvurNgq/vQ8c2LZ/zeSYAFK0lS5bEwIED47333ouvfe1r0djYGPfcc088+uijceutt8brr78e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\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"error","ename":"IndexError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-37-804078e04c8c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0m_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mplot_check_v3\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp_df\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparam_zip\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpr_msg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_margin_mult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_margin_mult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfront_plot\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mplot_check_dir\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcol_idx_dict\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mparam_zip\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp_plot_params\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp_plot_params\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-37-804078e04c8c>\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0m_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mplot_check_v3\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp_df\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparam_zip\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpr_msg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_margin_mult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_margin_mult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfront_plot\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mplot_check_dir\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcol_idx_dict\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mparam_zip\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp_plot_params\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp_plot_params\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/content/drive/My Drive/Colab Notebooks/JnQ/funcs/funcs_plot_check.py\u001b[0m in \u001b[0;36mplot_check_v3\u001b[0;34m(data, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir, **col_idx_dict)\u001b[0m\n\u001b[1;32m    214\u001b[0m     \u001b[0;31m# ------ ep, tp + xlim ------ #\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    215\u001b[0m     eptp_hvline_v3(config, ep, tp, entry_idx, exit_idx, open_idx, tp_line, out_line, bias_info, bias_thresh,\n\u001b[0;32m--> 216\u001b[0;31m                    front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, **col_idx_dict)\n\u001b[0m\u001b[1;32m    217\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    218\u001b[0m     \u001b[0;31m#     Todo    #\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/content/drive/My Drive/Colab Notebooks/JnQ/funcs/funcs_plot_check.py\u001b[0m in \u001b[0;36meptp_hvline_v3\u001b[0;34m(config, en_p, ex_p, entry_idx, exit_idx, open_idx, tp_line, out_line, bias_info, bias_thresh, front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, **col_idx_dict)\u001b[0m\n\u001b[1;32m    111\u001b[0m   \u001b[0my0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgca\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_ylim\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    112\u001b[0m   \u001b[0ml_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0ma_data\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mexit_tick\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol_idx_dict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'ohlc_col_idxs'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m  \u001b[0;31m# +1 for including exit_tick\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 113\u001b[0;31m   \u001b[0mopen_ymax\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0men_ymax\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mex_ymax\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ml_data\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtick_\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0my0\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0my1\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0my0\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0;36m.01\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mtick_\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mopen_tick\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mentry_tick\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexit_tick\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m  \u001b[0;31m# -.05 for margin\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    114\u001b[0m   \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxvline\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mopen_tick\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mopen_ymax\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0malpha\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlinewidth\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlinestyle\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'--'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'#ffeb3b'\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# 추후, tick 별 세부 정의가 달라질 수 있음을 고려해 multi_line 작성 유지\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    115\u001b[0m   \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxvline\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mentry_tick\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0men_ymax\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0malpha\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlinewidth\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlinestyle\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'--'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'#ffeb3b'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/content/drive/My Drive/Colab Notebooks/JnQ/funcs/funcs_plot_check.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m    111\u001b[0m   \u001b[0my0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgca\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_ylim\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    112\u001b[0m   \u001b[0ml_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0ma_data\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mexit_tick\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol_idx_dict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'ohlc_col_idxs'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m  \u001b[0;31m# +1 for including exit_tick\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 113\u001b[0;31m   \u001b[0mopen_ymax\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0men_ymax\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mex_ymax\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ml_data\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtick_\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0my0\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0my1\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0my0\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0;36m.01\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mtick_\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mopen_tick\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mentry_tick\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexit_tick\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m  \u001b[0;31m# -.05 for margin\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    114\u001b[0m   \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxvline\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mopen_tick\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mopen_ymax\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0malpha\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlinewidth\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlinestyle\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'--'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'#ffeb3b'\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# 추후, tick 별 세부 정의가 달라질 수 있음을 고려해 multi_line 작성 유지\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    115\u001b[0m   \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxvline\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mentry_tick\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0men_ymax\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0malpha\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlinewidth\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlinestyle\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'--'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'#ffeb3b'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mIndexError\u001b[0m: index -78 is out of bounds for axis 0 with size 48"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 2 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAABzUAAARsCAYAAAAXE8vfAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nOzde5iVZb0/4O9wGs6CgCAHUQg12QWWigWKm0FBTSGgLVoyaZplpZG10ywRM3XrlVuzRDNSMQEND3koTAUBDQsyUQdQVI7JSWGGgREEfH5/+GNtBmZgwIF5wfu+rs/lWs/zHp61GDnMZ9535UVECgAAAAAAAICMqlXTCwAAAAAAAADYEaUmAAAAAAAAkGlKTQAAAAAAACDTlJoAAAAAAABApik1AQAAAAAAgExTagIAAAAAAACZptQEAABgn9GhQ4e47777YsWKFfH+++/Hyy+/HOeff35NLwsAAIA9LC8iUk0vAgAAAHamdevWMXPmzGjfvv12c1deeWVcd911NbAqAAAA9gZXagIAALBPGDlyZK7Q/NrXvhZt2rSJF198MSIiRowYER06dKjJ5QEAALAHKTUBAADIvLy8vDjrrLMiImL27Nlx//33x/Lly+Pmm2+OiIh69erFkCFDyu1z9913R0opPv/5z293vMLCwkgpxWWXXVZtazz44INjxIgRMWDAgNzYiBEjIqUUgwcPrrbzbGvy5MmRUooWLVrssXMAAADUNKUmAAAAmde5c+do1qxZRES88cYbufGtHx999NFVPt6UKVNi6NCh8fjjj1fbGtu2bRtXX311DBw4cLf2r127drWtBQAAYH+j1AQAACDzWrZsmXu8Zs2aCh8fdNBBFe47dOjQWLZsWbz99tvRp0+fiIjo3bt3jB8/Ps4444yIiHjwwQdj1apV8f7770dRUVGumGzVqlU888wzUVpaGiUlJfHiiy+WW8vWZs6cGRERX//61yOlFIWFhbm5//zP/4w5c+bEihUrcleUbrladPz48fHaa6/Fgw8+GHXr1o2bbroplixZEqtXr44HH3wwd75vfvObsWjRoli/fn0sXLgwfvCDH5Q7//Dhw2Pp0qUxZ86cOPLII6vwrgIAAOw7lJoAAADss/Ly8nKPU0oVbnPcccfFNddcEy1atIg//OEPUa9eve22mTFjRvz3f/93XHHFFRERMWbMmMjPz4+vfvWrUVBQEL/85S/jsssui5dffrnSKyp/8pOfRMT/XQU6ZcqU3FxBQUGMGjUqDjjggLjhhhvK7devX7+48847Y8yYMXHFFVfED3/4w3j88cfjlltuiVNPPTXuuOOOiIi48cYbY/Xq1XHhhRfG7bffHps2bSp3nM9+9rMxbty4OPLII+OHP/zhzt46AACAfUqdml4AAAAA7My7776be9y0adPc4yZNmuQer1y5ssJ9R44cGZMmTYrjjz8+zj333DjiiCPKzdeqVSu6du0aQ4cOjfz8/Nz4oYceGvPmzYuIj0rJ559/Ph544IFYvnx5hef561//Gtddd13Mnz8/HnjggXJzN998c9x1113x7W9/O7p06VJu7ve//33cdtttERFx5ZVXRkTEt771rdz8ySefHBER8+bNi06dOkWfPn3in//8Z9x///3ljnPZZZfFmjVrYvjw4XHooYdWuEYAAIB9lSs1AQAAyLy33noriouLIyLi8MMPz41v/fhf//pXhftuuZpz66s6t3byySdHYWFhTJ06Nfr16xdPPPFERETUr18/nnzyyejRo0dMnDgxevXqFZMmTYqCgoIKj1PZlaIREatWrYqIiE2bNm13pec777xT7vnGjRujX79+0bdv3+jbt2/udrV9+vSJyy67LEpLS+P666+Pxx57bLtzbLl60+dzAgAA+xulJgAAAJmXUspd/XjUUUfFOeecE61bt859ruQHH3wQf/zjHyvc96qrroqLL744zjzzzFi6dGm8/vrrFW7XqFGj6NKlS/Ts2TM3Nnjw4PjSl74UixcvjqKiooiIaNu2bYX7r169OiIijj766Bg6dGi0aNFil1/nE088EXXr1o3CwsI45JBDon///nHRRRdFRMQtt9wSDRs2jJdeeilKSkoqXQcAAMD+yO1nAQAA2CeMGDEiTj/99Gjfvv12t14dOXJkLFmypML9ZsyYET/+8Y9j1apV8Y1vfCM++OCDcvNPP/10jBs3LgYMGBAffvhhPPXUUzF06NCIiCgrK4vBgwfHYYcdFuvXr4/x48fHhAkTKjzP/Pnz4/77749BgwbFuHHjolevXrv8Gq+//vpo1KhRnH322TFw4MCYP39+3HnnnRER0axZsxg5cmQ0adIk5s+fHz/+8Y93+fgAAAD7qryIqPz+OAAAAJAhHTp0iOuvvz769esXjRs3jtdffz1+9atfxe9///u9toa8vLw48MADy41t3rw5d3tcAAAAqp9SEwAAAHZBx44dY8GCBeXGFixYEIcddljNLAgAAOATwO1nAQAAYBcsW7Ys+vbtW27s/fffr6HVAAAAfDK4UhMAAAAAAADItFo1vQAAAAAAAACAHVFqAgAAAAAAAJmm1AQAAAAAAAAyTakJAAAAAAAAZJpSEwAAAAAAAMg0pSYAAAAAAACQaUpNAAAAAAAAINOUmgAAAAAAAECmKTUBAAAAAACATFNqAgAAAAAAAJmm1AQAAAAAAAAyTakJAAAAAAAAZJpSEwAAAAAAAMg0pSYAAAAAAACQaUpNAAAAAAAAINOUmgAAAAAAAECmKTUBAAAAAACATFNqAgAAAAAAAJmm1AQAAAAAAAAyTakJAAAAAAAAZJpSEwAAAAAAAMg0pSYAAAAAAACQaUpNAAAAAAAAINOUmgAAAAAAAECmKTUBAAAAAACATFNqAgAAAAAAAJmm1AQAAAAAAAAyTakJAAAAAAAAZJpSEwAAAAAAAMg0pSYAAAAAAACQaUpNAAAAAAAAINOUmgAAAAAAAECmKTUBAAAAAACATFNqAgAAAAAAAJmm1AQAAAAAAAAyTakJAAAAAAAAZJpSEwAAAAAAAMg0pSYAAAAAAACQaUpNAAAAAAAAINOUmgAAAAAAAECmKTUBAAAAAACATFNqAgAAAAAAAJmm1AQAAAAAAAAyTakJAAAAAAAAZJpSEwAAAAAAAMg0pSYAAAAAAACQaUpNAAAAAAAAINOUmgAAAAAAAECmKTUBAAAAAACATFNqAgAAAAAAAJmm1AQAAAAAAAAyTakJAAAAAAAAZJpSEwAAAAAAAMg0pSYAAAAAAACQaUpNAAAAAAAAINOUmgAAAAAAAECmKTUBAAAAAACATFNqAgAAAAAAAJmm1AQAAAAAAAAyTakJAAAAAAAAZJpSEwAAAAAAAMg0pSYAAAAAAACQaUpNAAAAAAAAINOUmgAAAAAAAECmKTUBAAAAAACATFNqAgAAAAAAAJmm1AQAAAAAAAAyTakJAAAAAAAAZJpSEwAAAAAAAMg0pSYAAAAAAACQaUpNAAAAAAAAINOUmgAAAAAAAECmKTUBAAAAAACATFNqAgAAAAAAAJmm1AQAAAAAAAAyTakJAAAAAAAAZJpSEwAAAAAAAMg0pSYAAAAAAACQaUpNAAAAAAAAINOUmgAAAAAAAECmKTUBAAAAAACATFNqAgAAAAAAAJmm1AQAAAAAAAAyTakJAAAAAAAAZJpSEwAAAAAAAMg0pSYAAAAAAACQaUpNAAAAAAAAINOUmgAAAAAAAECmKTUBAAAAAACATFNqAgAAAAAAAJmm1AQAAAAAAAAyTakJAAAAAAAAZJpSEwAAAAAAAMg0pSYAAAAAAACQaUpNAAAAAAAAINOUmgAAAAAAAECmKTUBAAAAAACATFNqAgAAAAAAAJmm1AQAAAAAAAAyTakJAAAAAAAAZJpSEwAAAAAAAMg0pSYAAAAAAACQaUpNAAAAAAAAINOUmgAAAAAAAECmKTUBAAAAAACATFNqAgAAAAAAAJmm1AQAAAAAAAAyTakJAAAAAAAAZJpSEwAAAAAAAMg0pSYAAAAAAACQaUpNAAAAAAAAINOUmgAAAAAAAECmKTUBAAAAAACATFNqAgAAAAAAAJmm1AQAAAAAAAAyTakJAAAAAAAAZJpSEwAAAAAAAMg0pSYAAAAAAACQaUpNAAAAAAAAINOUmgAAAAAAAECmKTUBAAAAAACATFNqAgAAAAAAAJmm1AQAAAAAAAAyTakJAAAAAAAAZJpSEwAAAAAAAMg0pSYAAAAAAACQaUpNAAAAAAAAINOUmgAAAAAAAECmKTUBAAAAAACATFNqAgAAAAAAAJmm1AQAAAAAAAAyTakJAAAAAAAAZJpSEwAAAAAAAMg0pSYAAAAAAACQaUpNAAAAAAAAINOUmgAAAAAAAECmKTUBAAAAAACATFNqAgAAAAAAAJmm1AQAAAAAAAAyTakJAAAAAAAAZJpSEwAAAAAAAMg0pSYAAAAAAACQaUpNAAAAAAAAINOUmgAAAAAAAECmKTUBAAAAAACATFNqAgAAAAAAAJmm1AQAAAAAAAAyTakJAAAAAAAAZJpSEwAAAAAAAMg0pSYAAAAAAACQaUpNAAAAAAAAINOUmgAAAAAAAECmKTUBAAAAAACATFNqAgAAAAAAAJmm1AQAAAAAAAAyTakJAAAAAAAAZJpSEwAAAAAAAMg0pSYAAAAAAACQaUpNAAAAAAAAINOUmgAAAAAAAECmKTUBAAAAAACATFNqAgAAAAAAAJmm1AQAAAAAAAAyTakJAAAAAAAAZJpSEwAAAAAAAMg0pSYAAAAAAACQaUpNAAAAAAAAINOUmgAAAAAAAECmKTUBAAAAAACATFNqAgAAAAAAAJmm1AQAAAAAAAAyTakJAAAAAAAAZJpSEwAAAAAAAMg0pSYAAAAAAACQaUpNAAAAAAAAINOUmgAAAAAAAECmKTUBAAAAAACATFNqAgAAAAAAAJmm1AQAAAAAAAAyTakJAAAAAAAAZJpSEwAAAAAAAMg0pSYAAAAAAACQaUpNAPaY+fPnR1lZWZSWlsaqVaviiSeeiPbt20dExOTJk+Mb3/hGue179+4dixcvjoiIKVOmxFVXXVVu/txzz40333wzGjRosHdeAAAAAAAAmaDUBGCPOuOMM6JJkyZx8MEHx/Lly+O2226r0n4XXHBBDB8+PI466qiIiGjZsmX88pe/jAsuuCDef//9PblkAAAAAAAyRqkJwF6xYcOGmDBhQq6k3Jl58+bFL37xixg9enTk5eXFr371q3jooYfiueee27MLBQAAAAAgc5SaAOwVDRo0iLPOOitefPHFKu9z8803R15eXkyYMCF69uwZP/rRj/bgCgEAAAAAyKo6Nb0AAPZvjz76aGzatCkaNWoUK1eujH79+lV53w8//DDOP//8KCoqigEDBsTatWv34EoBAAAAAMgqV2oCsEcNHDgwmjdvHvXr14/vfve7MWXKlGjdunVs2rQp6tatW27bunXrxsaNG8uNzZ49OyIiioqK9tqaAQAAAADIFqUmAHvFhx9+GI888khs3rw5evXqFYsWLYpDDz203DaHHXZYLFy4sGYWCAAAAABAZik1AdhrzjzzzGjevHnMmTMnHnjggTjvvPPi2GOPjYiILl26xPDhw2P8+PE1vEoAAAAAALLGZ2oCsEc9/vjjsXnz5kgpxcKFC6OwsDBmz54ds2fPjssvvzzuvvvu6NChQ6xYsSJ+97vfxW9/+9uaXjIAAAAAABmTFxGpphcBAAAAAAAAUBm3nwUAAAAAAAAyTakJAAAAAAAAZJpSEwAAAAAAAMg0pSYAAAAAAACQaUpNAAAAAAAAINOUmsAn2jXXXBOvvPJKbNy4MUaMGFFu7oorrojS0tJcysrKYvPmzdGiRYty2zVv3jxWrFgR06ZNq/AcP/vZzyKlFAUFBdvNVbZvgwYN4je/+U2sXLkyiouLY8qUKZW+hubNm8fDDz8ca9eujQULFsTZZ59d1ZdfZSeddFJMmjQpiouLY/78+eXmOnToUO59Ki0tjZRS/OAHP9juOKNHj46UUnTu3Lnc+FlnnRWzZ8+OtWvXxptvvhm9evXKzX3lK1+J2bNnx5o1a6KoqCgGDBiQmxs1alS5865fvz7WrFlT6evo1q1bzJw5M9atWxczZ86Mbt267e5bUmVdu3aNiRMnxsqVKyOltNPt77zzzpg7d25s3rw5CgsLy82dddZZMXfu3CguLo7ly5fHPffcE02aNMnNb/vrsGnTpvjVr36Vm+/Tp0/MmTMn1q1bF5MmTYpDDjkkN/faa6+V23fjxo3x2GOPVcM7AAAAAABQPZKIyCc1w4YNS/3790+PPvpoGjFixA63HTFiRHr22We3G//tb3+bpkyZkqZNm7bdXKdOndIrr7yS/v3vf6eCgoIq73vfffelcePGpZYtW6ZatWqlz33uc5Wua+zYsWn8+PGpUaNGqWfPnqm4uDgdddRR1fo+HXvsselrX/tauvDCC9P8+fN3uO2hhx6aNm3alDp27FhuvGfPnum5555LKaXUuXPn3Hjfvn3TggULUo8ePVJeXl5q27Ztatu2bYqI1LZt27Rhw4bUv3//FBHptNNOS+vWrUutWrWq8Nx33313Gj16dIVzdevWTQsWLEjf//73U7169dL3vve9tGDBglS3bt0qvQeNGzdO9evX3+X37vDDD0/nn39+OvPMM1P6qNXcYS6++OLUp0+fNGPGjFRYWFhurn379qlFixYpIlKjRo3SH/7wh3TrrbdWeJxGjRql0tLSdMIJJ6SISC1atEjFxcVpyJAhKT8/P914441p+vTpla7j7bffTueee261fh2JiIiIiIiIiIiIfIzU+AJERGo89913305LzbfeeisNGzas3NgXvvCF9Le//S19/etfr7DU/Mtf/pJOPfXUNH/+/O1Kzcr2PeKII1JJSUlq0qTJTtfdsGHDtGHDhtSlS5fc2JgxY9L111+/R96ngoKCnZaaV111VZo0aVK5sdq1a6eXXnopfeYzn9mu1HzhhRfS+eefX+GxjjvuuLR8+fJyYytWrEjHH398he/FmjVr0oknnljhsU4++eS0ZMmScmMLFy5M/fr1q9JrP/7449OqVavSHXfckXr06LHL713nzp2rVGpuybRp07YrNbdOo0aN0r333puefPLJCueHDRuW3nrrrdzzCy+8ML3wwgvl3q+ysrJ0xBFHbLfviSeemNasWZMaNmy4R76ORERERERERERERHY1bj8LUAUnnHBCHHTQQfHQQw/lxmrVqhW//vWv47vf/W6FtxUdMmRIbNiwIf7yl79sN7ejfY877rhYuHBhjBw5MlauXBmvvPJKDBo0qMJ1HX744bFp06aYN29ebmzWrFnRtWvX3X2pH9uwYcPi3nvvLTc2fPjwmDp1arz66qvlxmvVqhXHHHNMtGrVKubNmxeLFy+O2267LerXrx8RETNnzow5c+bEGWecEbVq1YoBAwbEhg0b4pVXXtnuvIMHD46VK1fG1KlTK1xX165dt9vvlVdeqfJ79eKLL8bnPve5WLp0aYwdOzZmz54dP/rRj6JNmzZV2r+69OzZM4qLi2Pt2rUxePDguOWWWyrcrrCwMMaMGZN73rVr15g1a1bueVlZWbz11lsVvv7CwsJ46KGHoqysrPpfAAAAAADAblBqAlRBYWFhTJgwIdatW5cbu+SSS+Lvf/97vPTSS9tt37hx47juuuvi0ksvrfB4O9q3ffv28ZnPfCZKSkqibdu28d3vfjfuvffeOPLIIys8z7afIVlSUlLucxa3dsABB8Qdd9wRixYtijlz5sRPf/rTOOyww6JDhw5x1113lfuMxd3Rq1evaN26dUyYMKHc67noooviqquu2m771q1bR7169WLIkCFxwgknRPfu3ePoo4+On/70pxER8eGHH8aYMWNi7NixsWHDhhg7dmxcdNFFFZZt25Z422rcuHGUlJSUG9vRe1WRBQsWxMiRI6Nz587xrW99K4488siYPXt2PP7449GhQ4cqH+fjeOGFF6JZs2bRrl27uOmmm2LBggXbbXPIIYdE7969y5XLVX39DRo0iCFDhsQ999yzJ5YPAAAAALBblJoAO9GgQYP4yle+Uq4gOvjgg+OSSy6JK6+8ssJ9rr766rjvvvti4cKF283tbN/3338/Pvjgg7j22mtj48aNMXXq1Jg8eXKccsop2227du3aaNq0abmxpk2bRmlpaYXH7t+/f7z00kvRuXPnGDhwYLRo0SKef/75mDhxYrz88suxaNGiSt+Hqthyhd/W5e8tt9wS11xzzXbl65bXGhFx2223xbJly+K9996Lm2++OU477bSIiCgoKIgbb7wxTjrppKhXr1707t07fve730W3bt3KHadDhw5x0kkn7bDU3JX3qlevXlFaWhqlpaXx2muvVXi82bNnx6xZs2LJkiXRtWvXaNSoUaXn3hPeeeedmDhxYowfP367uXPPPTeef/75coVnVV//oEGDYtWqVTFlypQ9sm4AAAAAgN1Rp6YXAJB1X/7yl2PVqlXx3HPP5caOO+64OPjgg2P27NkR8VHx2aBBg1i6dGm0a9cuCgoKon379nHxxRdHRESrVq3iwQcfjP/5n/+J119/fYf7VnRr1YpubxsR8cYbb0SdOnXiU5/6VLz55psREdGtW7coKiqqcPsHH3wwd6zXX389hg8fHsOHD9+9N2Yb9evXj6985Svx5S9/udx4QUFB9OrVK2688cbc2PTp0+PSSy+NcePGxeLFi8u9vq0fd+/ePaZOnRr//Oc/I+Kj29H+/e9/j759+5a7leq5554bL7zwQsyfP7/S9RUVFcVll11Wbuyzn/1s/OY3v9lu2+eff77CKzjr1asXZ5xxRhQWFsYJJ5wQjz32WFxyySXlvjb2pjp16kTnzp23Gx82bFjccMMN5caKioqisLAw97xhw4bRuXPn7b5WdnbFKwAAAABATanxD/YUEamp1KlTJ+Xn56f7778//fznP0/5+fmpVq1a5bZ56qmn0siRI8uN1atXL7Vu3TqXSy65JL344oupdevWKSLSgQceWG5+0aJFaciQIalRo0Y73bdOnTpp3rx56ac//WmqXbt2+uIXv5jWrFmTjjjiiApfw7hx49LYsWNTw4YN0xe/+MVUXFycjjrqqGp9n/Ly8lJ+fn7q379/WrBgQcrPz09169Ytt83ZZ5+d5s+fv92+rVq1Kvd6U0qpR48eqX79+iki0siRI9M//vGP1KpVq9SsWbM0derUdM0116SISCeeeGJauXJl6tatW4qI1L179/Tuu++mk08+udw55s6dm84777wdvoa6deumBQsWpEsuuSTVq1cvfec730kLFizY7nVUls985jPpvffeS1OnTk3nn39+aty4cZXfv/z8/PTpT386pZRSfn5+qlev3g7XmZ+fn55//vl0wQUXpPz8/JSXl5ciIp1zzjmpQ4cOKSLSIYcckp577rn00EMPldv/C1/4Qlq7du1262vZsmUqLi5OgwYNSvn5+emGG25I06dPL7dNu3bt0saNG1OnTp1q/P9NERERERERERERkW1S4wsQEamx3H333WlbhYWFufm2bdumjRs3ps6dO+/wOIWFhWnatGmVzs+fPz8VFBRUed+jjjoq/e1vf0tr165NRUVFaeDAgbm5K664Iv35z3/OPW/evHl65JFH0tq1a9PChQvT2WefXe3vU+/evbd7nyZPnlxum4kTJ+bKyB0lpVTu/axTp076zW9+k1avXp2WLl2abr311pSfn5+b/853vpPmzZuX1qxZk9566630gx/8oNzxjj/++ApLvIhIf/7zn9MVV1yRe969e/c0c+bMVFZWlv75z3+m7t27V/k9aN269U6/DipKx44dt3vvti5/t13j5MmTt9u+d+/eKSLStddemxYvXpzWrl2bFi9enO6888504IEHljvfHXfckcaMGVPhWgoKCtKcOXNSWVlZmjx5curYsWO5+csvvzxNnTq12r9+RERERERERERERD5u8v7/AwAAAAAAAIBMqlXTCwAAAAAAAADYEaUmAAAAAAAAkGlKTQAAAAAAACDTlJoAAAAAAABApik1AaiSlFJ07ty5ppcBAAAAAMAnkFITgH3KaaedFtOmTYvVq1fH0qVL46677orGjRtXun3Hjh1j0qRJsW7dupgzZ04UFBTsxdUCAAAAAFAdlJoA7FG1a9eu1uMdcMABce2110bbtm3j05/+dLRr1y5uuummSrcfN25c/Otf/4oWLVrElVdeGRMmTIiWLVtW65oAAAAAANizlJoA7JLjjjsuli5dGrVq/d8fIQMHDoxZs2ZFRMSIESPij3/8Y9x3331RUlISX//61+PQQw+NKVOmxJo1a+Lpp5+OX//613Hfffft1vnHjRsXTz31VLz//vtRXFwcd911V/Ts2bPCbbt06RKf+9znYsSIEbF+/fp4+OGH49VXX43Bgwfv1rkBAAAAAKgZSk0Adsk//vGPWLduXfTp0yc3ds4558TYsWNzzwcMGBATJkyIZs2axf333x9jx46Nf/zjH9GiRYu4+uqr49xzz93hOVavXl1pUbmtE088MYqKiiqc69q1a7z99tuxdu3a3NisWbOia9euVTo2AAAAAADZUKemFwDAvmfcuHFx9tlnxzPPPBONGzeO0047LX74wx/m5qdPnx5/+tOfIiKiVatWceyxx0ZBQUFs3LgxXnjhhXjsscd2ePzmzZtXaR19+/aNwsLC6NGjR4XzjRs3jpKSknJjJSUl0a5duyodHwAAAACAbHClJgC7bOzYsTFo0KCoV69eDBo0KF566aVYtGhRbn7x4sW5x23bto1Vq1bF+++/X+H87urRo0eMHTs2hgwZEvPmzatwm7Vr10bTpk3LjTVt2jRKS0s/9vkBAAAAANh7lJoA7LI5c+bEwoUL49RTT93u1rMRESml3OOlS5fGgQceGA0aNMiNdejQ4WOdv3v37vHYY4/F+eefH5MmTap0u6KioujUqVM0btw4N9atW7dKb1cLAAAAAEA2KTUB2C1jx46NSy+9NE488cT44x//WOl2ixYtipkzZ8bVV18ddevWjeOPPz7OOOOM3T5v165dY+LEifG9730vnqSMbUIAACAASURBVHjiiR1uO2/evHj55ZdjxIgRkZ+fHwMHDozPfvaz8dBDD+32+QEAAAAA2PuUmgDslnHjxkXv3r1j0qRJ8d577+1w269+9avxhS98Id5777249tpr44EHHogNGzZUun1paWn06tWrwrnLLrssWrVqFaNHj47S0tIoLS2N1157LTc/atSoGDVqVO750KFD45hjjonVq1fHDTfcEEOGDIl33313F18tAAAAAAA1KS8i0k63AoBqNH78+Jg7d25cffXVNb0UAAAAAAD2Aa7UBGCPO+aYY6JTp06Rl5cX/fr1iwEDBsSjjz5a08sCAAAAAGAfUaemFwDA/q9Nmzbx8MMPR4sWLWLJkiXx7W9/O15++eWaXhYAAAAAAPsIt58FAAAAAAAAMs3tZwEAAAAAAIBMU2oCEF/84hfjjTfeiNLS0hgwYEBNLwcAAAAAAMpRagIQ11xzTfz617+OJk2axJ/+9Ke9eu4+ffrEnDlzYt26dTFp0qQ45JBDKt22Y8eOMWnSpFi3bl3MmTMnCgoKys1///vfj6VLl0ZJSUmMHj066tWrV+V9t3jmmWcipRS1a9eunhcIAAAAAMDHptQEIDp27BhFRUV7/bwtWrSIhx9+OH72s5/FgQceGDNnzowHHnig0u3HjRsX//rXv6JFixZx5ZVXxoQJE6Jly5YREXHKKafE5ZdfHgUFBdGxY8fo1KlTjBw5skr7bnHOOedE3bp198yLBQAAAADgY0kiIvLJzZtvvpk2b96cysrKUmlpaapXr15q2rRp+t3vfpfeeeedtGTJkvTzn/881apVK7fPeeedl2bPnp1WrVqVJk6cmA455JDdOveFF16YXnjhhdzzhg0bprKysnTEEUds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fL1A85zm7PcBjUaj0UrWeI1Py9tYfracnDx5UjfccIP++c9/qn///qpTp4727t2ruXPnatGiRQ7PGTlypEaOHClJevLJJ+3GFi9erMWLF9ueR0ZG2o0PHz5cUu6+Q2vWrLEbq1atmho1sq/CzMnJUXp6uu6//367/i1btmj69Om25127dnUagyRdvHhRU6ZM0ZQpU/LdT0REhMP7vPnmm/PFBwAAAHsmpY+kFJl/9bHrT527S+cT0go9v/knZRRYCYSEhOjgwYOaM2eOEhISNGDAAI0YMUI//PCDvLy89Pvvv2v9+tztEoYMGaL09HRJUlRUlOrUqaMGDRpo6NChuuaaa/T77787vIa/v7/+7//+T88884xee+01u7GOHTvq4sWLkqQ+ffooIiJCrVu31u7du8vwrgEAAAAAQGmQ1CxHR48ezZc0dIdWrVrp8OHDdn2HDx9W27Zt3RMQAADwSPsiR7s7BEiKXZeqsH4NnY4XJaHpaVJSUtS8eXN17dpVffv2lSTba9FHH31Ua9as0ZYtWyRJa9eu1bx582znLlmyROHh4ZKkWbNm6bvvvnN4jbfeektxcXH65JNP8iU1rQnNevXqKTg4WMePH9eBAwdceo8AAAAAAMC12FOzCkpOTlZoaKhdu++++9wdFgAAABwYGLlb1Zpscdqsmn9ScPMkU6ZMkZeXl3bu3KnHHntMkmSxWCRJ48aNU9OmTfXII49o1qxZGjBggB5//HHbuc8995wiIiK0bds2jRkzRp06dco3/y233KI77rhDr7/+ulq3bi1J8vHxUbNmzWzH1K5dW6tWrVLjxo0VGRlpS3SidEaOHKk9e/YoMzNTW7ZsUbdu3SRJI0aMkDFG0dHR+vHHH5Wamqq//vWvTucJCQmRMUarVq3SV199pdTUVM2ePbvAY998880yuScAAAAAgGcgqVkFnT9/XuvXr7dr33zzjbvDAgAAQBWxfPlytWrVSr1799awYcMkSbt27ZIk3X///Tp8+LAWLVqk119/XZJ022232c796aeftGLFCr399tuqW7eu7rjjDkmSt7e3rrzySklSy5YtVatWLX399dfavHmzpNxE5wcffCBJqlOnjtauXavg4GANHTrUdgxKJyQkRIsWLdLhw4f10ksvqVGjRvrss89sPxcpd+uJBQsWyBijV155Rd7e3oXOGRMTo507d2rixIm68847y/o2AAAAAAAeiuVnAQAAAJSre+65R35+frpw4YImTZqks2fPav78+ZKkQ4cO6ZprrtHf//53BQYGSpL27t0rSVq9erXi4uKUmZmpiRMnSrqUDP3yyy/Vt29fNW7cWBs3btRdd90lSWrSpInmz5+vbdu22faK//LLL9W7d29FRUWpXr16uvfee7VhwwalpKSU6/ehsgkLC5Mk9e/fX/3797f1d+7c2fZ40aJFmjdvnu68804NGDBAfn5+SkpKcjrnp59+qrffflu7d+/W+vXr1bdvX3322Wd2x2zevFk1atTQ77//ru+//97FdwUAAAAA8BQkNQEAAKqg3WNrq37yWXeHgSqqdu3aeuaZZ+Tr66uffvpJf/nLX3Ty5ElJucuXvvHGG3r22Wd1/vx5xcTE6MUXX5Qk/f7773r22Wfl4+OjI0eOaMKECVqzZk2++Y8cOaIjR45Ikm352eTkZH399deSpN69e9uuNXLkSElS3759qdh0kYkTJ2rnzp2SJC8vLyUmJupPf/qTJCk1NVWSlJ2dLUmqXr16gXNVq1bN7quzY2rUqGGbEwAAAABQOZHUBAAAqILyJjQzA5pJOuG+YFDlREVFKSoqyuHY//73P914440OxwYNGuR0zptvvtlh/y+//JIvIVZQggwlFxsbq8mTJ2v48OFKT09Xs2bN9MADDzjc97SoBg0apHHjxumee+6RJG3atCnfMTfddJM2bdqkt956q8TXAQAAAAB4PvbUBAAAqMKafyINDJru7jAkSQHRC9wdAoBS2Lx5sx566CHVqVNHb7/9tkaPHq1vvvmmVHNu2LBBw4cPV1BQkObMmZNv6VkAAAAAQNVBpSYAAABKbYlPU4V6+7g7DAButnjxYi1evLjQ/jvvvFNSbtVso0aN7I7NycmxPU5KStKQIUMKvObmzZtt1bfx8fEljh0AAAAA4Nmo1AQAAECp5U1oxl3MKvE82ekZrggHQAXRqlUr/frrr3Zt+/bt7g4LAAAAAOCBSGoCAADAZZplHNYDWadKfP6hcZNdGA0AT5ecnKzQ0FC7dt9999mqL8ePH1/8SU0BbVSe40YVcmxe2wo47p08x3UvZM7ueY59p4DjtnFPZXpPAAAAACoklp8FAAAAnFgd3Ulh/Rq6OwyHPugthfq7OwqgdM6fP6/169e7OwygUglc1CVf39UJ5xU7Z78bogEAAABcp1SVmn/961/1008/KSEhQU888YQkKSgoSFu3btX27dsVHx+v66+/3nb8G2+8of3792vHjh3q1q1b6SIHAAAACtHiidYKXNRFgYu6qMUTrYt9ft6EZuy6VFeGVmp5E5pxye6Lo6Lp3r274uPjdfHiRRlj1KNHD7vx5557TqdOndKZM2cUFRWlK6+80jYWHh6uhIQEWSwWHTlyRHfffbckKTExUcYYuxYVFeXw+q+//rpSUlJksVh04MABPfroo7axjz/+WGlpaTp37pwSEhI0dOhQ29jIkSN14MABZWVlae3atWrevLlt7B//+IeOHj2qzMxMxcTEqG7dupKkGjVq6LXXXlNycrLS09P19ttvq0aN3M+11q1bV++//75Onz6tU6dO6fnnn7fN16xZM61cuVIZGRlKSkqyizEwMFAbNmxQZmamDhw4YLffZa9evfT9998rKytLO3fu1I033mgbCwsLU0JCgrKysvTNN9+oU6dOpbq3qKiofN/zxMTE3JOqFdAW5vlhLCzk2LyuK+C4MXmO+6GQOX/Ic+yYAo677rLrc0+uvadK6uqE807HDnS50ukYAAAAUJEUtJCL03bNNdeYn376ydSqVctUr17drFu3zrRv39588cUXZsCAAUaSuf32283GjRttjz///HMjyQQHB5tvv/220GvEx8eXKDYajUaj0Wg0WsHt+JDcJskERC8wkkxaRLjtubWvqO1E/TbmRP02Dses8zrqT4sIt12ruNcsqLV4orUJXNTFaSvqPCaljzEpfdz+8yrsZ1iRmrtf4/fp08csXLjQfP/998YYY3r06GEbCw8PN8YY89FHH5mXX37ZGGPM9OnTjSQTFBRksrOzzY4dO8yoUaPMU089ZYYNG2YkmYEDB5p7773X3HvvvWbp0qXGGGPGjx/v8PoTJkwwY8aMMaNHjzZJSUnGGGOaN29uJJnnn3/ePPLII2b8+PEmIyPDZGZmmurVq5sePXqYnJwcs3nzZjN+/HhjsVjMqlWrjCQzdOhQY4wxK1asME899ZQxxpi5c+caSWbixInGGGPeeecdM2fOHGOMMRMnTjSSzNy5c40xxrz88stmyZIlxhhjhg4daiSZVatWmZycHDNx4kSzZs0aY4wx3bt3N5LMzp07zZkzZ8zYsWPN999/b86dO2eaNWtmatasaZKTk82xY8fMX/7yF3PgwAGTnJxsatasaVq0aGGysrJMQkKCGT16tPn111/Njz/+aCSV+N569uxp+55PmzbNGGPM8uXL3f7vi1Z1m7Pfyda/ddbmjtgK+nsYuKiLCZvYwe3fv8rSPPl1A638WkV9jUaj0Wie2niNT8vbSlyp2alTJ3333Xc6d+6ccnJytHnzZg0dOlTGGNWrV0+SVL9+fR0/flySNHjwYH3wwQeSpO+++06+vr7y92e9LAAAgIpsiU9Tnajfxt1h5FMnqK7tceaOM8rcccbuOaquLVu2aNSoUfr555/zjT300EOSpPHjx+vpp5/WkSNHNHLkSEnSxIkTVb16dQ0dOlRLlizRjBkzFBMTI0lavXq1li5dqqVLl6pTp046e/as7f99Lvfaa68pJiZG69evV3JysnJycmxjzz//vFasWKH169crPT1dxhhJ0k033SQvLy+98847evPNN/XDDz8oLCxMDRs2VEhIiCRp1qxZmjFjhk6cOKERI0ZIkm1s+vTpmjp1qiTZjV24cEFPP/20XnzxxXxjBw8e1Jw5c/Taa6/Zxho0aKCuXbtq69atmj9/vt59913VrFlTw4YNU6dOneTn56fY2Fi9++67WrZsmfz8/HT77berZ8+eqlWrlqKjo7VgwQJ9+eWXCgoKUrdu3Up8b99//73te964cWNJ0r/+9a9i/EsAqo6CKjglqjgBAABQcZR4T82EhAS9/PLLatiwoc6dO6c77rhD27Zt09/+9jd98cUXmjVrlry8vHTDDTdIklq0aKGjR4/azk9KSlKLFi2UnMxaWQAAABVVqLeP7XHcxSw3RuLY3ocT3B0CKpC2bdvqwoUL+vXXXyXl/j9Lr1695O3trc6dO+vChQtas2aNOnTooISEBA0fPlwJCZf+jd1www3q2rWr3nvvPWVkZDi9zqZNm3TttdcqJydHEyZMsH0QVJIOHTokX19fWSwW3XfffcrJyVFKSook6cYbb9T//vc/dejQQV5eXmrTpo1trG/fvrpw4YIaN24sb29vNWzY0DZ26623Kj093XaPkpSSkqI//elP6tu3rzp37pxvrHnz5uratav69u1rGztz5ozOnTunjh076uqrr7YtL9u2bVv95z//kSR169ZNbdq0UXBwsG3s+++/lyQFBwerbdu2CgoKso2V9N5SU3OXg65Vq5buv/9+7d+/X+vWrdOM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+74oqYFOzLxW1199tYKCgvTTmgOqe8MNun7MGNVY+aCOLFmS7zptQ0KkuzbpzFdv6cjfxut80Ebpqr5Kerpx7gFjftX5A5t05G83K23SJOnPs3Q6+iEdWbxYMTffrNEbNugxvy2q+8UHuuue55WaeqVWPdxBqamp5fSdAgCg6rF+0rv5J5fe/AyIXiBJ+m7555Kk4Ig7nPZLsnvDdFtc7k6X14XucHg965t+ex9OcNk9eOKbttZKimpNtrg5kvzy/swrpPh4d0cAAIAkKXPHGdUJqut0/NvOrnnbrKAqTOtrDkdVnFRwVi4FVWFaX985quKkghMAgEtIalYA8fHxmjJlilJTU/XII4/owoULduPr1q3TRx99pMGDB+v333/XF198oWHDhkmSsrKyFBERobZt28pisSgmJkb/+c9/XB7jxo0bNWrUKP3973/XnDlztGvXLk2YMIGEJgAA5azdvJmSpOz0jBKd3yOojivDAQAALpYWEa4Gy1e6O4xK4dgbvzgdc1S9WRYKquKkgrPqKKiKkwpOAAAuIanpwUaOHKmRI0dKkp588km7scWLF2vx4sW255GRkXbjw4cPlyTt2LFDa9assRurVq2aGjVqZNeXk5OjzZs32y1xe/PNN+c7z2r27NmaPXu23fi7776rd999t0j3BgAAykYN3/qSpEPjJksR4bb+0iY7AQBA8Z20WORXs6btsdWesAG2/rSIcJ20WNQxdq1bYoR7OavEdLb/JionZ5WYzvbfBACgqiKpWQW1atVKhw8ftus7fPiw2rZt656AAABAmavhW//SEq95kp1FtcSnqUK9fdTXtWEBAFCpWROVaRHhdklLa0LT2XMAAAAA+ZHUrIKSk5MVGhpq13fu3Dk3RQMAACqCUG8fd4cAAAAAAACAKoykZhV0/vx5rV+/3t1hAACAMmKryAQAAAAAAAAqCS93BwAAAAAAqDzee+89nTx5Uj/99JOtr0GDBvryyy+1b98+ffnll/L19bWNhYSEaPv27UpISNCmTZts/f3799eePXu0f/9+TZkypTxvAQAAAADggUhqAgAAwGbBB8la8EGyu8MAUIG9//77GjBggF3f1KlTtX79egUEBGj9+vWaOnWqJKl+/fqaN2+eBg0apC5duujuu++WJHl5eentt9/W7bffrs6dO2v48OHq1KlTud8LAAAAAMBzkNQE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WWMm9z755BOdd955kqSbbrpJr7/+uk6dOqXCwkLt2bNHV155pWsv9rKkWie3zxrs62y/WkkT7Pab0My+9rsWxGjCiZh6288/c76OHj1a77bliy3SOtfeEjznaHB5w+RQKDi1ZS8JyiC3OjNJtUeGm7fmDNvxtXnflWpiAPCFCeNiNGFcjNVhAAAAAAgQjq7FAQBgBY+Tmjt27NCPf/xjde3aVeecc45+8YtfqE+fPvX2ueeee/TBBx9IkuLi4vTNN9+Y2w4cOKC4uLhGx50wYYI2bdqkTZs2qXv37p6G51UZ3foro7J/vceKVaxkJSs5O1nJyXW32x+5XetVV305depUi6KFIRhPuOxXLZ759jvz/obB/ertF6jvjVWX9aVe17XRY9lrShs9VmKz1ftzr/LCZquJfclIxgaiFcOkg00XwQNooYwF/ZWxoH/zOwIAAAAAAAB+5HFSs6CgQE8//bQ++ugj5eTkaOvWrfXarz788MOqqanR3//+d7eO+8orr+iKK67QFVdcoaNHj9Y9OElSmJPbDxscwNl+YZJesX8hx/v06t1Lq95dpfLych04cED33nuv+ZQXX3pR+wr36YTthLbt3qaY22O0dtRarV27Vl9++aUe+eUjOmE7ocLCQt1+++1O3+PVV1+t/Px82Ww2bd68WZdeeqlb36PW6MSZVarp8+9WOXuwV3mhZt93q/ln5jAGn7AeeRq4ZrzCeuRp1NidjbYPys6xICrn7JOxjpKwVkqOPXs/t9i6OAAAAACgNUvMzLA6BAAA0Ap5nNSUpGXLlumHP/yhRowYobKyMu3evVuSNH78eI0aNapeYq+oqKheJed5552noqKilry8T7z88su64YYb9MQTT2j79u1asmSJ1GagJOmKK67Q8uXLNX36dHXp0kXLly/XBRdcIElasmSJfvrTn+rhhx/W/v37tXz5cvXr16/R8du3b6+srCx17txZv/nNbxQTE6O33npL4eEt+ihCVnlsR/N+9f7SkGovK9VVXLqbnAzFVruoX+UaN62vBi4bbGE0dZwlYQNB73ekOzdYHQUAAAAABBY6KAEAgFDWokxajx49JEl9+vTRzTffrMzMTF1//fX63e9+pxtvvFEnTpww933vvfd02223qV27doqPj9eAAQP06aeftix6HxgxYoS+/vprLViwQM8991zdg5F1Sacf//jH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8pN6f+7QoYMk6dxzz1Xbtm3rbTMqPiVp5syZmjmz6XnJF1xwgYcRw5dIagJe1LBC0xuzFGuPDJckhX3/n3ewMtq+xkRGWhxJy3mzEhcAACAUnT59ut6fZ8+erbVr1+rpp5/WrFmzNHv2bM2ZM0evvfaazpw5o2HDhikyMrJeS9m7775bF198sWpra/X5559r6tSpZpLU0L59ew0ePFjdu3fXkSNH/PLeAAAAAAS2d999VyNHjqz3WMM/IziR1HRBsCeTQkGwfAb2ia5ArprEWZ60mnUnocnPAYBgEyz/5wIILjfddJN5EWH58uVat26dNm3apPj4eG3evFmSZLPZ1KlTJ/M5u3fvVteuXfX111/r0KFDuvrqqyVJTz31lJ566ildfPHFWrt2rW666SaFh4frxhtv9Pv7AgAAABB4ZsyYoejo6HqP5efnU30ZAsKtDgAIRbvu2aGihfutDgM+tuueHc3e+DkAAACQYmJiVFxcLEkqLi5WTEyMmcC8/PLLtXXrVm3dulVdunQxn/OTn/xES5culSRFRJxdj7t8+XKdOHFCn376qbZt2yZJ+sUvfqFNmzape/fu/npLAAAAACxw2WWXadOmTaqurlZtba0uv/zyett///vfKycnR6tWrdIdd9yh//73v1q7dq0qKir00ksv6dixYyotLdWf//xnhYWFSZI6deqkzMxMVVZW6tChQ5oxY4bT1589e7b279+v2tpabd++vdH2Rx99VN98841OnDihL774QgMGDJAkZWVl6cCBA6qqqlJ+fr6uu+46SdKIESNUW1vb6DZixAhJdR1s9uzZo6qqKuXk5Kh3797maz300EP65ptvVFlZqddff12dO9cV40REROi5555TcXGxjh07pkWLFpm/U3Xu3Fmvvfaavv32Wx0+fFiPP/64ebxevXpp1apVKi8v14EDB3Tvvfea2wYOHKiPP/5YlZWV2rNnj0aPPjsb8KqrrtKnn36qqqoqbdu2TT/60Y/MbampqdqxY4eqqqr0v//9T0lJSea2adOmad++fbLZbNq7d6/uv/9+p993A0lNtCoFqSlOZzEmZmZ4fNy4aX01cNlgj58P/6k5Vt78ToZT72ngssGNbgAAADgrIiJC3bp1U7du3erNrWnTpo26deumdu3aKTw83Pzl/LHHHlNtrXsTkSorK83748eP1znnnKMrr7xS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zz6rr776qt62b775Rs8884x++9vfat++ffW2/fe//9U///lP/fKXv9SNN95Yb1v37t01depUbd26VU888YQee+wxvfTSS/r4449VVFTk9PtM+1nADu0qAkfC4vmSvPeZ1IbHe/Q82swCAAC4Z+zYserdu7fatWunPn36aNmyZSotLVVycrISExN13XXXqayszNz//vvvV//+/XXJJZeYCU1JevXVVzVgwAANGDBAr732mgXvBADgCG0/AfjK6swk1R4Z3ugGuGrfvn1q166devToIUmKi4tTUVGRqqurtW/fPvXq1Uvh4eFq3769unXrpr1796qsrEzl5eXmLMe4uDhJ0t69eyXVzdA0EpZNKS0t1XfffafDhw/rr3/9qzkiw+hY06lTJ+Xk5Gjo0KG6+eabtX79+nrPv+OOO9SpUydzZqYknTp1Stdcc42GDBmiiy66SBs3btSJEye0d+9effvttxoyZIh++MMfasCAATp48KD279+vqqoqffXVVxowYICGDh2qiy66SKdOndKXX34pqa59b3x8vIYNG6bhw4crIiLC3JaVlaXzzz9fw4YN02233SZJ5rYXXnhBffv21VVXXaXp06fX2zZz5kwlJCToyiuv1LPPPltv2y233KKkpCRddtllevPNNyVJO3fu1MiRI3Xeeefp7bff1nvvvae3335b5557roYNG9bk95lKTUBnE2h7p8z0yRxHuM+Yk+C1z6TdjaqVtHvsRCVmZmj32In1Npelpyk6a5VZ0Ts0/ReSpKKFExseCQAAAACAkFZiqz/Gp8RuvpXxe3rD36sBoKVSr+vqdFv2mlI/RoJAFhsbq9TUVA0YMECSdNNNN6lfv3568803tXz5ct10001auHCh9u3bp/PPP9+cG7l8+XItWLBAzz//vNq3b6927dqZiyeXL1+uBx54QL///e/1gx/8QJLMbR999JHZiebbb7/Vj3/8YyUmJkqSoqOj9atf/Uqff/65tmzZouXLl2vq1KmaNWuWkpKSJEn//ve/zeMMGzZMr776qs4991zdeuut+vjjj81WsZMmTVJlZaVWrlxpvtfw8HAtWLBAW7Zs0RVXXKHrrrtOzz77rGw2m3r16qWpU6dq165dSklJ0cCBAzV16lRJ0pAhQ3TDDTfowIEDGjNmjLp06aJnnnlGUl1L2ksvvVRlZWW69957dfr0aS1YsEBSXQIyJiZGp06d0owZM3T8+HGzFe69996r2tpaRUZG6qGHHtKBAwf0j3/8Q1JdhefRo0fVs2dP/fa3v9Vnn32mdevWSZLmzp2r3bt3a8CAARo/fryysrK0b98+de1a9/f9jjvu0KFDh3T77bdLknbv3t3k509SE1D9QeMIPC35Rcm+4rOpzzk6a5XHrwEAAAAAQCgZlJ0j6ewCYLRO9slt+8S2JBWkpkiq+xkpsdnMnxl/I7kemsJ65FkdAgLYwIEDtXTpUvPPjz76qAoLC/Xmm2/qnXfe0R/+8AdNmTJFkZGRWrFihebOnStJevHFFzVgwADdeeedqq2t1YIFC/Tqq69Kkh555BHFxMRo1qxZqqio0KxZs/Txxx87fP177rlHd911l6S6qs6lS5fq8ccf15YtWzRnzhz17NlTjz76qL777jvNmzdPL7/8siSZFYh333237r77bkl18zDXr1+voUOHasiQIVq6dKnZolWSamtrNWLECE2aNEnHjx/Xiy++qIcffliSdObMGaWlpSkhIUHffvutHn/8cb300kv14oyLi9PBgwc1efJkrV69WpIUERGhBx98UD169NDXX3+tW265Rdu2bZNU1x73kUceUZcuXbR9+3b9+te/VklJiSSpW7dumjFjhs455xxt3LhR999/v06ePClJio+P15w5c9SmTRutXbtW9913nxnHJZdcogceeECnT5/WG2+8YSZeN2/erOnTp2vq1KlatGiRDh48qPvuu8+MxRmSmgB8yjgB/v/t3XuMVeW5P/AHGFAEDyBaJiBBpBqm9VJQAYvWqGhFsYLaekkrbS3YorF6jIXYGvzHRlM91thKlViFEwlVKYigFFDrSezP8QIMTAUBMcp1gCoTRYwC6/cHnSnIDA7MZb2z9+eTPGGz9549z+x3r8us76x3fVWo2FzqOuPTDi8AAADAge0dbn85tNz7TN69bwM0t1deeeWA172cOHFiTJw4cb/7d+7cGePGjYtx48bt99jHH39cO93ql5177rn7/H/vUPJgXudAPZeXl9f5eJZlMWDAgDq/pqqqKr7xjW/U+VhFRUUcf/zxdT72t7/9rXaq3S97/PHHa4PeL6u5dmddaq75WZcRI0bUeX9ExAMPPBAPPPBAvY/XRajZAI9O3ZR3C0XPGLRe/efOi4+uGLnfNLI1f9EHQFpscwEAAABI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QNKEmgAAAAAAAEDShJoAAAAAAABA0oSaAAAAAAAAQNKEmgAAAAAAAEDShJoAAAAAAABA0oSaAAAAAAAAQNKEmgAAAAAAAEDShJoAAAAAAABA0oSaAAAAAAAAQNKEmgAAAAAAAEDShJoAAAAAAABA0oSaAAAAAAAAQNKEmgAAAAAAAEDShJoAAAAAAABA0oSaAAAAAAAAQNKEmgAAAAAAAEDShJoAAAAAAABA0oSaAAAAAAAAQNKEmgAAAAAAAEDShJoAAAAAAABA0oSaAAAAAAAAQNKEmgAAAAAAAEDShJoAAAAAAABA0oSaAAAAAAAAQNKEmgAAAAAAAEDShJoAAAAAAABA0oSaAAAAAAAAQNKEmgAAAAAAAEDShJoAAAAAAABA0oSaAAAAAAAAQNKEmgAAAAAAAEDShJoAAAAAAABA0oSaAAAAAAAAQNKEmgAAAAAAAEDShJoAAAAAAABA0oSaAAAAAAAAQNKEmgAAAAAAAEDShJoAAAAAAABA0oSaAAAAAAAAQNKEmgAAAAAAAEDShJoAAAAAAABA0oSaAAAAAAAAQNKEmgAAAAAAAEDShJoAAAAAAABA0oSaAAAAAAAAQNKEmgAAAAAAAEDShJoAAAAAAABA0oSaAAAAAAAAQNKEmgAAAAAAAEDShJoAAAAAAABA0oSaAAAAAAAAQNKEmgAAAAAAAEDShJoAAAAAAABA0oSaAAAAAAAAQNKEmgAAAAAAAEDShJoAAAAAAABA0oSaAAAAAAAAQNKEmgAAAAAAAEDShJoAAAAAAABA0oSaAAAAAAAAQNKEmgAAAAAAAEDShJoAAAAAAABA0oSaAAAAAAAAQNKEmgAAAAAAAEDShJoAAAAAAABA0oSaAAAAAAAAQNKEmgAAAAAAAEDShJoAAAAAAABA0oSaAAAAAAAAQNKEmgAAAAAAAEDShJoAAAAAAABA0oSaAAAAAAAAQNKEmgAAAAAAAEDShJoAAAAAAABA0oSaAAAAAAAAQNKEmgAAAAAAAEDShJoAAAAAAABA0oSaAAAAAAAAQNKEmgAAAAAAAEDShJoAAAAAAABA0oSaAAAAAAAAQNKEmgAAAAAAAEDShJoAAAAAAABA0oSaAAAAAAAAQNKEmgAAAAAAAEDShJoAAAAAAABA0oSaAAAAAAAAQNKEmgAAAAAAAEDShJoAAAAAAABA0oSaAAAAAAAAQNKEmgAAAAAAAEDShJoAAAAAAABA0oSaAAAAAAAAQNKEmgAAAAAAAEDShJoAAAAAAABA0oSaAAAAAAAAQNKEmgAAAAAAAEDShJoAAAAAAABA0oSaAAAAAAAAQNKEmgAAAAAAAEDShJoAAAAAAABA0oSaAAAAAAAAQNKEmgAAAAAAAEDShJoAAAAAAABA0oSaAAAAAAAAQNKEmgAAAAAAAEDShJoAAAAAAABA0oSaAAAAAAAAQNKEmgAAAAAAAEDShJoAAAAAAABA0oSaAAAAAAAAQNKKPtTs169fPProo1FZWRm7du2KLMviiy++OOjXOf/88yPLstoaOnToPo/36dMnHnnkkVi9enV8+umnsXHjxliwYEFccMEFTfWjAAAAAAAAQEEqybuBvJ100kkxZsyYRr1GSUlJPPTQQ/U+fuSRR8Y//vGP6NmzZ+19HTt2jNLS0jjvvPNixIgR8cILLzSqBwAAAAAAAChURX+m5vr16+Puu++OESNGRHl5+SG9xq233hplZWWxffv2Oh8///zzawPNWbNmxZFHHhnXXHNNRES0bds2fvzjHx/S9wUAAAAAAIBiUPSh5ptvvhm/+c1vYu7cubFjx46D/vqePXvGnXfeGVVVVTF58uQ6n7Nz587a23PmzIlPPvkknnnmmdr7OnbsePCNAwAAAAAAQJEo+lCzse6777448sgjY/z48bFt27Y6n/Piiy/GmjVrIiJixIgR0blz5/j+979f+/j8+fNbpFcAAAAAAABojYSajXDOOefENddcE6+++mpMmTKl3uft2LEjzjrrrFi2bFmMHDkyPv7445g2bVp8+umncffdd8cf//jHFuwaAAAAAAAAWheh5iFq165dPPTQQ7Fz58648cYbD/jcTp06xcyZM+Pkk0/e5/7DDjssTjrppDj66KObs1UAAAAAAABo1YSah2jkyJFx8sknxwsvvBAREaeeemqUlpbWPv71r389+vXrFxERP/vZz2Lw4MEREXH33XfHEUccEYMHD44dO3bEZZddFo899ljL/wAAAAAAAADQSpTk3UBr1blz54iIuPTSS+PSSy/d7/Ennngi/v73v8e5554b/fv3r71/ypQpsWPHjnj99ddj6dKl8e1vfzvOO++8FusbAAAAAAAAWpuiP1OzpKQkunfvHt27d4/27dvX3l9zX4cOHaJPnz6RZVlkWRYTJ0486O+xcePG2tujR4+Ojh07xqBBg+KUU06JiIht27Y1/gcBAAAAAACAAlX0oebQoUNj69atsXXr1hg6dGhE7Ak6a+675ppr6vy6KVOmRJs2bfapu+66q/bxs846K84999yIiHj88cdrg8tf//rX8emnn0Z5eXnt2Z4PP/xwM/6EAAAAAAAA0LoVfajZEtauXRtnnnlmTJ8+PTZu3Bg7d+6MTz75JF5//fWTtMEHAAAAgklEQVS44YYb4re//W3eLQIAAAAAAECy2kRElncTAAAAAAAAAPVxpiYAAAAAAACQNKEmAAAAAAAAkDShJgAAAAAAAJA0oSYAAAAAAACQNKEmAAAAAAAAkDShJgAAAAAAAJA0oSYAAAAAAACQNKEmAAAAAAAAkDShJgAAAAAAAJC0/w/5FPJYDEOHaQAAAABJRU5ErkJggg==\n"},"metadata":{}}]},{"cell_type":"markdown","source":["### plot_funcs"],"metadata":{"id":"MQ8w8nWVXlGj"}},{"cell_type":"code","source":["def plot_check_v3(data, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir=None, **col_idx_dict):\n","  # start_0 = time.time()\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(30, 18))\n","  nrows, ncols = 2, 2\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                         ncols=ncols,\n","                         height_ratios=[3, 1]\n","                         )\n","  for gs_idx, params in enumerate(param_zip):\n","    ax = fig.add_subplot(gs[gs_idx])\n","    iin, iout, pr, ep, tp, entry_idx, exit_idx, open_idx, lvrg, fee, tp_line, out_line, bias_info, bias_thresh = params\n","\n","    # ------------ add_col section ------------ #\n","    a_data = data[int(iin):int(iout)]\n","    # a_data = data[iin:iout]\n","    # ------ candles ------ #\n","    candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","\n","    # ------ add cols ------ #\n","    [nonstep_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['nonstep_col_info']]\n","    [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","    [stepmark_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['stepmark_col_info']]\n","\n","    # ------ ep, tp + xlim ------ #\n","    eptp_hvline_v3(config, ep, tp, entry_idx, exit_idx, open_idx, tp_line, out_line, bias_info, bias_thresh,\n","                   front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, **col_idx_dict)\n","\n","    #     Todo    #\n","    #     3. outer_price plot 일 경우, gs_idx + nrows 하면 됨\n","\n","    # ------ trade_info ------ #\n","    plt.title(pr_msg.format(entry_idx, exit_idx, pr, lvrg, fee))\n","\n","  if plot_check_dir is None:\n","    plt.show()\n","    print()\n","  else:\n","    fig_name = plot_check_dir + \"/%s.png\" % int(entry_idx)\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","  plt.close()\n","  # print(\"elapsed time :\", time.time() - start_0)\n","\n","  return\n","\n","def eptp_hvline_v3(config, en_p, ex_p, entry_idx, exit_idx, open_idx, tp_line, out_line, bias_info, bias_thresh,\n","                   front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, **col_idx_dict):\n","  # ------ get vertical ticks ------ #\n","  entry_tick = int(entry_idx - iin)\n","  open_tick = entry_tick - int(entry_idx - open_idx)\n","  exit_tick = entry_tick + int(exit_idx - entry_idx)\n","\n","  if front_plot == 1:\n","    x_max = open_tick\n","  elif front_plot == 2:\n","    x_max = entry_tick\n","  if (iout - iin) > x_max:\n","    x_margin = x_max * x_margin_mult\n","    plt.xlim(0 - x_margin, x_max + x_margin)\n","  x0, x1 = plt.gca().get_xlim()\n","  # ------------ hlines ------------ #\n","  # ------ entry & exit ------ #\n","  en_xmin = entry_tick / x1\n","  ex_xmin = exit_tick / x1\n","  plt.axhline(en_p, x0, en_xmin, linewidth=2, linestyle='--', alpha=1, color='lime')  # en_p line axhline\n","  plt.text(x0, en_p, 'en_p :\\n {}'.format(en_p), ha='right', va='center', fontweight='bold')  # en_p line label\n","  plt.axhline(ex_p, ex_xmin, 1, linewidth=2, linestyle='--', alpha=1, color='lime')  # ex_p line axhline (signal 도 포괄함, 존재 의미)\n","  plt.text(x1, ex_p, 'ex_p :\\n {}'.format(ex_p), ha='left', va='center', fontweight='bold')  # ex_p line label\n","\n","  # ------ tpout_line ------ #\n","  plt.axhline(tp_line, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#00ff00')  # ep 와 gap 비교 용이하기 위해 ex_xmin -> 0.1 사용\n","  plt.text(x0, tp_line, '%s' % config.tr_set.tp_gap, ha='right', va='center', fontweight='bold', fontsize=15)\n","  plt.axhline(out_line, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#ff0000')\n","  plt.text(x0, out_line, '%s' % config.tr_set.out_gap, ha='right', va='center', fontweight='bold', fontsize=15)\n","\n","  # ------ bias_line ------ #\n","  plt.axhline(bias_info, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='dodgerblue')\n","  plt.text(x0, bias_info, ' bias_info', ha='left', va='center', fontweight='bold')\n","  plt.axhline(bias_thresh, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#ff8400')\n","  plt.text(x0, bias_thresh, ' bias_thresh', ha='left', va='center', fontweight='bold')\n","\n","  # ------ ylim ------ #\n","  if front_plot:\n","    y_lim_data = a_data[:x_max + 1, col_idx_dict['ylim_col_idxs']]  # +1 for including open_tick\n","  else:\n","    y_lim_data = a_data[:, col_idx_dict['ylim_col_idxs']]\n","  y_min = y_lim_data.min()\n","  y_max = y_lim_data.max()\n","  y_margin = (y_max - y_min) * y_margin_mult\n","  plt.ylim(y_min - y_margin, y_max + y_margin)\n","\n","  # ------------ vline (open_tick, entry_tick, exit_tick) ------------ #\n","  y0, y1 = plt.gca().get_ylim()\n","  l_data = a_data[:exit_tick + 1, col_idx_dict['ohlc_col_idxs'][2]]  # +1 for including exit_tick\n","  open_ymax, en_ymax, ex_ymax = [(l_data[tick_] - y0) / (y1 - y0) - .01 for tick_ in [open_tick, entry_tick, exit_tick]]  # -.05 for margin\n","  plt.axvline(open_tick, 0, open_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')  # 추후, tick 별 세부 정의가 달라질 수 있음을 고려해 multi_line 작성 유지\n","  plt.axvline(entry_tick, 0, en_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  plt.axvline(exit_tick, 0, ex_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","\n","  return"],"metadata":{"id":"cFt6CeZf4yEk"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### legacy"],"metadata":{"id":"q3zisNOTw3jM"}},{"cell_type":"code","source":["_ = [plot_check_v4(np_df, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir, 500, 0.07, 100, **col_idx_dict) for param_zip in zip(np_plot_params, np_plot_params[::-1])]"],"metadata":{"id":"fUFdJVrsw78h"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def plot_check_v4(data, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir=None, vp_range=500, kde_factor=0.05, num_samples=100, **col_idx_dict):\n","  # start_0 = time.time()\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(30, 18))\n","  nrows, ncols = 2, 2\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                         ncols=ncols,\n","                         height_ratios=[3, 1]\n","                         )\n","  for gs_idx, params in enumerate(param_zip):\n","    ax = fig.add_subplot(gs[gs_idx])\n","    iin, iout, pr, ep, tp, entry_idx, exit_idx, open_idx, lvrg, fee, tp_line, out_line, bias_info, bias_thresh = params\n","\n","    # ------------ add_col section ------------ #\n","    iin, iout = int(iin), int(iout)\n","    a_data = data[iin:iout]\n","    # ------ candles ------ #\n","    candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","    \n","    # ------ add cols ------ #\n","    [nonstep_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['nonstep_col_info']]\n","    [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","    [stepmark_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['stepmark_col_info']]\n","\n","    # vp_data = data[iin - vp_range:iin, col_idx_dict['vp_col_idxs']]\n","    # vp_info = [vp_range, vp_data[:, 0], vp_data[:, 1], kde_factor, num_samples]\n","    vp_data = data[iin - vp_range:iin, col_idx_dict['vp_col_idxs']].T\n","    vp_info = [vp_range, *vp_data, kde_factor, num_samples]\n","\n","    # ------ ep, tp + xlim ------ #\n","    eptp_hvline_v4(config, ep, tp, entry_idx, exit_idx, open_idx, tp_line, out_line, bias_info, bias_thresh, \n","                   front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, vp_info, **col_idx_dict)        \n","\n","    #     Todo    #\n","    #     3. outer_price plot 일 경우, gs_idx + nrows 하면 됨\n","\n","    # ------ trade_info ------ #\n","    plt.title(pr_msg.format(entry_idx, exit_idx, pr, lvrg, fee))\n","\n","  if plot_check_dir is None:\n","    plt.show()\n","    print()\n","  else:\n","    fig_name = plot_check_dir +  \"/%s.png\" % int(entry_idx)\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","  plt.close()\n","  # print(\"elapsed time :\", time.time() - start_0)  \n","\n","  return\n","\n","def eptp_hvline_v4(config, en_p, ex_p, entry_idx, exit_idx, open_idx, tp_line, out_line, bias_info, bias_thresh, \n","                   front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, vp_info, **col_idx_dict):\n","  # ------ get vertical ticks ------ #\n","  entry_tick = int(entry_idx - iin)\n","  open_tick = entry_tick - int(entry_idx - open_idx)\n","  exit_tick = entry_tick + int(exit_idx - entry_idx)\n","\n","  if front_plot == 1:\n","    x_max = open_tick\n","  elif front_plot == 2:\n","    x_max = entry_tick\n","  if (iout - iin) > x_max:\n","    x_margin = x_max * x_margin_mult\n","    plt.xlim(0 - x_margin, x_max + x_margin)\n","  x0, x1 = plt.gca().get_xlim()\n","  # ------------ hlines ------------ #\n","  # ------ entry & exit ------ #\n","  en_xmin = entry_tick / x1\n","  ex_xmin = exit_tick / x1\n","  plt.axhline(en_p, x0, en_xmin, linewidth=2, linestyle='--', alpha=1, color='lime')  # en_p line axhline\n","  plt.text(x0, en_p, ' en_p :\\n {}'.format(en_p), ha='right', va='center', fontweight='bold')  # en_p line label\n","  plt.axhline(ex_p, ex_xmin, 1, linewidth=2, linestyle='--', alpha=1, color='lime')  # ex_p line axhline (signal 도 포괄함, 존재 의미)\n","  plt.text(x1, ex_p, ' ex_p :\\n {}'.format(ex_p), ha='left', va='center', fontweight='bold')  # ex_p line label\n","\n","  # ------ tpout_line ------ #\n","  plt.axhline(tp_line, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#00ff00')  # ep 와 gap 비교 용이하기 위해 ex_xmin -> 0.1 사용\n","  plt.text(x0, tp_line, ' %s' % config.tr_set.tp_gap, ha='left', va='center', fontweight='bold')\n","  plt.axhline(out_line, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#ff0000')\n","  plt.text(x0, out_line, ' %s' % config.tr_set.out_gap, ha='left', va='center', fontweight='bold')\n","\n","  # ------ bias_line ------ #\n","  plt.axhline(bias_info, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='dodgerblue')\n","  plt.text(x0, bias_info, ' bias_info', ha='left', va='center', fontweight='bold')\n","  plt.axhline(bias_thresh, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#ff8400')\n","  plt.text(x0, bias_thresh, ' bias_thresh', ha='left', va='center', fontweight='bold')\n","\n","  # ------ volume profile ------ #\n","  vp_range, close, volume, kde_factor, num_samples = vp_info\n","  if iin >= vp_range:\n","    start_0 = time.time()\n","    kde = stats.gaussian_kde(close, weights=volume, bw_method=kde_factor)\n","    kdx = np.linspace(close.min(), close.max(), num_samples)\n","    kdy = kde(kdx)\n","    print(\"kde elapsed_time :\", time.time() - start_0)\n","\n","    kdy_max = kdy.max()\n","    # peaks,_ = signal.find_peaks(kdy)\n","    peaks,_ = signal.find_peaks(kdy, prominence=kdy_max * 0.3)\n","    peak_list = kdx[peaks]   # peak_list\n","    [plt.axhline(peak, linewidth=6, linestyle='-', alpha=1, color='white') for peak in peak_list]\n","    \n","    kdy_ratio = entry_tick / kdy_max # 30 / 0.0001\n","    plt.plot(kdy * kdy_ratio, kdx, color='white')\n","    # plt.plot(pky, pkx, 'bo', color='yellow')\n","\n","  # ------ ylim ------ #\n","  if front_plot:\n","    y_lim_data = a_data[:x_max + 1, col_idx_dict['ylim_col_idxs']]  # +1 for including open_tick\n","  else:\n","    y_lim_data = a_data[:, col_idx_dict['ylim_col_idxs']]\n","  y_min = y_lim_data.min()\n","  y_max = y_lim_data.max()\n","  y_margin = (y_max - y_min) * y_margin_mult\n","  # plt.ylim(y_min - y_margin, y_max + y_margin)\n","\n","  # ------------ vline (open_tick, entry_tick, exit_tick) ------------ #\n","  y0, y1 = plt.gca().get_ylim()\n","  l_data = a_data[:exit_tick + 1, col_idx_dict['ohlc_col_idxs'][2]]  # +1 for including exit_tick\n","  open_ymax, en_ymax, ex_ymax = [(l_data[tick_] - y0) / (y1 - y0) - .01 for tick_ in [open_tick, entry_tick, exit_tick]]  # -.05 for margin\n","  plt.axvline(open_tick, 0, open_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')  # 추후, tick 별 세부 정의가 달라질 수 있음을 고려해 multi_line 작성 유지\n","  plt.axvline(entry_tick, 0, en_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  plt.axvline(exit_tick, 0, ex_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","\n","  return"],"metadata":{"id":"ESReTMpP7SoO"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### sync_check"],"metadata":{"id":"X0FsT-8FZRti"}},{"cell_type":"code","source":["save_plot = 0\n","\n","open_idx_range = reversed(range(0, len(res_df), 1000))\n","plot_range = 100\n","\n","x_max = 400\n","\n","inversion = 0\n","hedge = 0\n","\n","\n","if save_plot:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".ftr\", \"\")\n","  try:\n","    os.mkdir(plot_check_dir)\n","  except:\n","\n","    #     remove existing dir   #\n","    shutil.rmtree(plot_check_dir)\n","    print(plot_check_dir, 'removed !')\n","    os.mkdir(plot_check_dir)\n","    # pass\n","    \n","\n","prev_plotsize = 30\n","post_plotsize = 20\n","\n","\n","\n","h_candle_intv1 = 15\n","h_candle_intv2 = 60\n","if 'hopen_{}'.format(h_candle_intv2) not in res_df.columns:\n","  res_df = h_candle(res_df, h_candle_intv1)\n","  res_df = h_candle(res_df, h_candle_intv2)\n","\n","res_df[\"ma30_1m\"] = res_df['close'].rolling(30).mean()\n","res_df[\"ma60_1m\"] = res_df['close'].rolling(60).mean()\n","\n","res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line)\n","# res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=1, use_dtk_line=1)\n","# break\n","\n","rtc_list = [\"short_tp_1_{}\".format(strat_version), \"short_tp_gap_{}\".format(strat_version), \"long_tp_1_{}\".format(strat_version), \"long_tp_gap_{}\".format(strat_version)]\n","# h_rtc_list = [\"h_short_tp_1\", \"h_short_tp_gap\", \"h_long_tp_1\", \"h_long_tp_gap\"]\n","dtk_list = [\"short_dtk_1_{}\".format(strat_version), \"short_dtk_gap_{}\".format(strat_version), \"long_dtk_1_{}\".format(strat_version), \"long_dtk_gap_{}\".format(strat_version),\n","            # \"short_dtk_1_line\", \"short_dtk_gap_line\", \"long_dtk_1_line\", \"long_dtk_gap_line\",\n","            \"short_dtk_plot_1\", \"short_dtk_plot_gap\", \"long_dtk_plot_1\", \"long_dtk_plot_gap\"]\n","dc_v2_list = ['dc_upper_v2_{}'.format(strat_version), 'dc_lower_v2_{}'.format(strat_version)]\n","\n","\n","ohlc_list = ['open', 'high', 'low', 'close'] # + basic_st_list\n","hcandle_list = ['hopen_%s' % h_candle_intv1, 'hclose_%s' % h_candle_intv1, 'hopen_%s' % h_candle_intv2, 'hclose_%s' % h_candle_intv2]\n","# hcandle_list = ['hopen_%s' % h_candle_intv1, 'hclose_%s' % h_candle_intv1, 'hhigh_%s' % h_candle_intv2, 'hlow_%s' % h_candle_intv2]\n","\n","# --------------------- dc & bb level --------------------- #\n","dc_interval = '1m'\n","hdc_interval = '5m'\n","hhdc_interval = '15m'\n","\n","st_list = ['st_base_%s' % hhdc_interval, 'st_upper_%s' % hhdc_interval, 'st_lower_%s' % hhdc_interval]\n","\n","dc_list = ['dc_upper_%s' % dc_interval, 'dc_lower_%s' % dc_interval]\n","hdc_list = ['dc_upper_%s' % hdc_interval, 'dc_lower_%s' % hdc_interval]\n","hhdc_list = ['dc_upper_%s' % hhdc_interval, 'dc_lower_%s' % hhdc_interval]\n","\n","bb_interval = dc_interval\n","hbb_interval = hdc_interval\n","hhbb_interval = hhdc_interval\n","\n","bb_list = ['bb_upper_%s' % bb_interval, 'bb_lower_%s' % bb_interval]\n","hbb_list = ['bb_upper_%s' % hbb_interval, 'bb_lower_%s' % hbb_interval]\n","hhbb_list = ['bb_upper_%s' % hhbb_interval, 'bb_lower_%s' % hhbb_interval]\n","\n","bbwp_list = ['bbwp', 'bbwp_ma']\n","\n","\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1']\n","senkoub_list = ['senkou_b1']\n","\n","sar_list = ['sar_3m', 'sar_5m', 'sar_15m']\n","\n","ma_list = ['ma30_1m', 'ma60_1m']\n","sma_list = ['sma_1m']\n","\n","ema_list = ['ema_5m']\n","# cb_list = ['cloud_bline_1m']\n","cb_list = ['cloud_bline_30m']\n","# cb_list = ['cloud_bline_5m']\n","\n","\n","\n","# -------------- under price phase -------------- #\n","# macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3']\n","# trix_list = ['trix1', 'trix2', 'trix3']\n","# stoch_list = ['stoch_5m']\n","# fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","# cctbbo_list = ['cctbbo']\n","# emaroc_list = ['ema_roc']\n","rsi_list = ['rsi_%s' % config.loc_set.point.exp_itv] \n","cci_list = ['cci_%s' % config.loc_set.point.exp_itv] \n","\n","\n","# -------------- summation -------------- #\n","# input_colname = ohlc_list + basic_st_list + pline_list + bb_list + hbb_list + sma_list + cb_list + stoch_list + sar_list + dc_list\n","input_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + hhdc_list + dtk_list + dc_v2_list + rsi_list + ema_list + ma_list + st_list# + cci_list\n","\n","# yrange_colname = ohlc_list + basic_st_list + pline_list # currently just used for ymin, ymax\n","yrange_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + hhdc_list + dc_v2_list + ema_list # currently just used for ymin, ymax\n","yrange_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + dc_v2_list + ema_list # currently just used for ymin, ymax\n","\n","\n","\n","odd_cnt = 0\n","obj_i = -1\n","rev_obj_i = 0\n","\n","#   지금, continue 발생시 true / false idx 가 같이 상승하는 문제\n","\n","# while 1:\n","for open_idx in open_idx_range:\n","\n","  # if obj_i >= len_obj or rev_obj_i >= len_obj:\n","  #   break\n","\n","  # if odd_cnt % 2 == 1 and tf_plot: #  loss plot 을 채워야하는 상황\n","  #   rev_obj_i += 1\n","\n","  # else:\n","  #   obj_i += 1\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","  \n","\n","  odd_cnt += 1\n","\n","  # break\n","\n","  print(\"open_idx :\", open_idx)\n","  \n","  plot_df = res_df.iloc[open_idx - prev_plotsize:open_idx + plot_range + post_plotsize][input_colname]\n","  \n","  odds = 1 if odd_cnt % 2 == 1 else 2\n","  if odds == 1:\n","\n","    plt.style.use('dark_background')\n","\n","    fig = plt.figure(figsize=(26, 18))\n","    \n","    gs = gridspec.GridSpec(nrows=2, # row 몇 개 \n","                        ncols=2, # col 몇 개 \n","                        height_ratios=[3, 1]\n","                        )\n","    \n","  ax = fig.add_subplot(gs[odds - 1])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='#26a69a', colordown='#ef5350', alpha=0.5)\n","\n","  # ---------- h_candle ---------- #\n","  alpha = 1\n","  lw = 1\n","  for cd_i, candle in enumerate(hcandle_list):\n","\n","    if cd_i == 2:\n","      lw = 2      \n","    plt.step(np.arange(len(plot_df)), plot_df[candle].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","\n","  # alpha = 0.1\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['hclose_60'].values, plot_df['hopen_60'].values, \n","  #                     where=1, facecolor='#ffffff', alpha=alpha)  \n","  \n","\n","   # --------- ma --------- #\n","  alpha = 1\n","  lw = 2\n","  for ma_i, item in enumerate(ma_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","   # --------- ema --------- #\n","  alpha = 1\n","  lw = 4\n","  for sm_i, item in enumerate(ema_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","    \n","   # --------- st --------- #\n","  alpha = 1\n","  lw = 2\n","  for sm_i, item in enumerate(st_list):\n","      plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#00ff00', linewidth=lw)\n","\n","  # ---------------------- dc_v2 ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(dc_v2_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","  # # ---------------------- dc ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(dc_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","  # # ---------------------- hdc ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(hdc_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#e65100', linewidth=lw)\n","\n","  # # ---------------------- hhdc ---------------------- #\n","  # alpha = 1\n","  # lw = 4\n","  # for sm_i, item in enumerate(hhdc_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#c2185b', linewidth=lw)\n","\n","\n","  # # ---------------------- bb ---------------------- #\n","  # alpha = 1\n","  # lw = 1\n","  # for sm_i, item in enumerate(bb_list):\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","\n","  # alpha = 0.2\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % bb_interval].values, plot_df['bb_lower_%s' % bb_interval].values, \n","  #                     where=plot_df['bb_upper_%s' % bb_interval].values >= plot_df['bb_lower_%s' % bb_interval].values, facecolor='#ffffff', alpha=alpha)   \n","\n","  # # ---------------------- hbb ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(hbb_list):\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ff00ff', linewidth=lw)\n","  \n","  # alpha = 0.2\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % hbb_interval].values, plot_df['bb_lower_%s' % hbb_interval].values, \n","  #                     where=plot_df['bb_upper_%s' % hbb_interval].values >= plot_df['bb_lower_%s' % hbb_interval].values, facecolor='#ff00ff', alpha=alpha) \n","  \n","  # # ---------------------- hhbb ---------------------- #\n","\n","  # alpha = 1\n","  # lw = 4\n","  # for sm_i, item in enumerate(hhbb_list):\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#3179f5', linewidth=lw)\n","  \n","  # alpha = 0.2\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % hhbb_interval].values, plot_df['bb_lower_%s' % hhbb_interval].values, \n","  #                     where=plot_df['bb_upper_%s' % hhbb_interval].values >= plot_df['bb_lower_%s' % hhbb_interval].values, facecolor='#3179f5', alpha=alpha) \n","  \n","  # ------------------- dtk_line (old, tp_line) ------------------- #\n","  \n","  # alpha = 1\n","  # lw = 2\n","  # rtc_ratio_list = [config.loc_set.zone.dt_k]\n","  \n","  # for rtc_k in rtc_ratio_list:    \n","  #   # plt.step(np.arange(len(plot_df)), plot_df['short_dtk_1_line'].values - plot_df['short_dtk_gap_line'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['long_dtk_1_line'].values + plot_df['long_dtk_gap_line'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","\n","  # hy_min = np.min(plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * rtc_k)\n","  # hy_max = np.max(plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * rtc_k)  \n","\n","  # alpha = 1\n","  # lw = 4\n","  # # h_rtc_ratio_list = [config.loc_set.zone.dt_k]\n","  # h_rtc_ratio_list = [config.loc_set.zone.zone_dt_k]\n","  # # h_rtc_ratio_list = [0.272, 0.36, 0.4, 0.5]\n","  \n","  # for h_rtc_k in h_rtc_ratio_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df['short_dtk_plot_1'].values - plot_df['short_dtk_plot_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['long_dtk_plot_1'].values + plot_df['long_dtk_plot_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['h_short_tp_1'].values - plot_df['h_short_tp_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['h_long_tp_1'].values + plot_df['h_long_tp_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","\n","  # # hy_min = np.min(plot_df['short_dtk_plot_1'].values - plot_df['short_dtk_plot_gap'].values * h_rtc_k)\n","  # # hy_max = np.max(plot_df['long_dtk_plot_1'].values + plot_df['long_dtk_plot_gap'].values * h_rtc_k)  \n","\n","  # ------------- y lim ------------- #  \n","  y_max = max(np.max(plot_df[yrange_colname]))\n","  y_min = min(np.min(plot_df[yrange_colname]))\n","  # y_max = max(y_max, y_max_)\n","  # y_min = min(y_min, y_min_)\n","  \n","  # hy_min = np.min(plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * 0.36)\n","  # hy_max = np.max(plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * 0.36)  \n","  # y_max = max(y_max, y_max_, hy_max)\n","  # y_min = min(y_min, y_min_, hy_min)\n","\n","  if np.isnan(y_max) or np.isnan(y_min):\n","    print('continued in yminmax')\n","    continue\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","\n","  plt.ylim(y_min, y_max)\n","\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  #           rsi          #    \n","  plt.subplot(gs[odds + 1])\n","  alpha = 1\n","  for rsi_ in rsi_list:\n","    plt.step(np.arange(len(plot_df)), plot_df[rsi_].values, 'g', alpha=alpha)\n","    # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","    alpha -= 0.2\n","  plt.axhline(50, linestyle='--')\n","  plt.axhline(50 + config.loc_set.point.osc_band, linestyle='--')\n","  plt.axhline(50 - config.loc_set.point.osc_band, linestyle='--')\n","  \n","  plt.axvline(prev_plotsize, linestyle='--')\n","  \n","  #           cci          #    \n","  # plt.subplot(gs[odds + 1])\n","  # alpha = 1\n","  # for cci_ in cci_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cci_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axhline(config.loc_set.point.osc_band, linestyle='--')\n","  # plt.axhline(-config.loc_set.point.osc_band, linestyle='--')\n","  \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","\n","\n","  if len(plot_df) > x_max:\n","    x_margin = x_max / 20\n","    plt.xlim(0 - x_margin, x_max + x_margin)\n","\n","\n","  if not save_plot:\n","    if odds == 2:\n","      plt.show()\n","      plt.close()\n","  \n","  else:\n","    # ---------- save mode ---------- #\n","    fig_name = plot_check_dir +  \"/%s.png\" % t_i\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","\n","  # plt.close()  \n","  print()\n","\n","  # break\n"],"metadata":{"id":"inQ6f-CDZYkr"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"13a-U32Uy50I"},"source":["### brief np_pr survey"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"L9LdjV2uUWnp"},"outputs":[],"source":["# plot_pr_list[:100]\n","plt.plot(np_pr)\n","plt.axhline(1)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"TBE0l6dHRYrE"},"source":["### close & pr comp."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":877},"executionInfo":{"elapsed":1436,"status":"ok","timestamp":1636355589887,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"-txULkhXRbz5","outputId":"7cda9fc7-4a4e-4c52-ffa3-a974b5f7c66f"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 3 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 3 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]}],"source":["#     chunky survey 필요함    #\n","chunk_size = 50000\n","\n","sync_pr = np.ones(len(res_df))\n","sync_tr = np.zeros(len(res_df))\n","# sync_tr = np.empty(len(res_df))\n","# sync_tr[:] = np.nan\n","\n","max_tr = np.max(tp_ratio_list)\n","min_tr = np.min(tp_ratio_list)\n","\n","for ck_i in range(0, len(res_df), chunk_size):\n","\n","  chunked_df = res_df.iloc[ck_i:ck_i + chunk_size]\n","  # break\n","\n","  for pr_, eptp_idx, tr_ in zip(pr_list[ck_i:ck_i + chunk_size], trade_list[ck_i:ck_i + chunk_size], tp_ratio_list[ck_i:ck_i + chunk_size]):\n","    # print(pr_, eptp_idx)\n","    sync_pr[eptp_idx[-1][0]] = pr_\n","    sync_tr[eptp_idx[-1][0]] = tr_\n","    # break\n","\n","  chunked_pr = sync_pr[ck_i:ck_i + chunk_size]\n","  chunked_tr = sync_tr[ck_i:ck_i + chunk_size]\n","  chunked_tr = np.where(np.isnan(chunked_tr), pd.Series(chunked_tr).shift(1), chunked_tr)\n","\n","  # plt.figure(figsize=(8, 6))\n","\n","  plt.subplot(311)\n","  plt.plot(np.arange(len(chunked_df)), chunked_df['close'])\n","  # plt.show()\n","\n","  plt.subplot(312)\n","  plt.plot(np.cumprod(chunked_pr))\n","  \n","  plt.subplot(313)\n","  plt.plot(chunked_tr)\n","  plt.ylim(min_tr + 0.5 * (max_tr - min_tr), max_tr)\n","  \n","  plt.show()\n","  print()\n"]},{"cell_type":"markdown","metadata":{"id":"Qys2Bw5Ou3u9"},"source":["### plot indi. legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pi5ntOOVu6JT"},"outputs":[],"source":["\n","  # ---------------------- ma ---------------------- #\n","   # --------- ema --------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(ema_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  #   # --------- sma --------- #\n","  # alpha = 1\n","  # for sm_i, sma in enumerate(sma_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 4\n","  #   plt.step(np.arange(len(plot_df)), plot_df[sma].values, alpha=alpha, color='#e91e63', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  \n","  # ---------------------- cb ---------------------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(cb_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#5b9cf6', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","\n","  \n","  # ---------------------- sar ---------------------- #\n","  # alpha = 1\n","  # markersize = 5\n","  # for sar in sar_list:\n","  #   plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","  #   markersize += 1\n","  #   alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  # alpha = 0.7\n","  # for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","  #                     where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","  #                     where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","  #   alpha -= 0.05\n","  \n","\n","\n","  # ---------------------- outer price indi. ---------------------- #\n","  #           macd          #\n","  # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","    \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for stoch_ in stoch_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[stoch_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(stoch_upper, linestyle='--')\n","  # plt.axhline(stoch_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- cctbbo ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for cctbbo in cctbbo_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cctbbo].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(cctbbo_upper, linestyle='--')\n","  # plt.axhline(cctbbo_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- ema_roc ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for emaroc in emaroc_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[emaroc].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","  \n","  # ---------- bbw ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for bbwp_ in bbwp_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[bbwp_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(bbwp_thresh, linestyle='--')\n","\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n"]},{"cell_type":"markdown","metadata":{"id":"cj9X6S1jJjER"},"source":["### plot nontp case"]},{"cell_type":"markdown","metadata":{"id":"tApzvz_gK9lR"},"source":["## legacy"]},{"cell_type":"markdown","metadata":{"id":"FaRGwR4NEop2"},"source":["### shifting"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"a8aYsjEgQnGF"},"outputs":[],"source":["org_res_df = res_df.copy()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":291,"status":"ok","timestamp":1626515312874,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"RF3RM2G2RCb1","outputId":"ba8f6a75-d4df-4f85-cd0f-190935341f7a"},"outputs":[{"name":"stdout","output_type":"stream","text":["                            open     high  ...  min_upper  max_lower\n","2021-06-30 23:55:59.999  0.27223  0.27281  ...   0.272145    0.27005\n","2021-06-30 23:56:59.999  0.27274  0.27290  ...   0.272145    0.27005\n","2021-06-30 23:57:59.999  0.27246  0.27257  ...   0.272523    0.27021\n","2021-06-30 23:58:59.999  0.27166  0.27183  ...   0.272523    0.27021\n","2021-06-30 23:59:59.999  0.27144  0.27211  ...   0.272523    0.27021\n","\n","[5 rows x 37 columns]\n","                            open     high  ...  min_upper  max_lower\n","2021-06-30 23:55:59.999  0.27223  0.27281  ...   0.272523    0.27021\n","2021-06-30 23:56:59.999  0.27274  0.27290  ...        NaN        NaN\n","2021-06-30 23:57:59.999  0.27246  0.27257  ...        NaN        NaN\n","2021-06-30 23:58:59.999  0.27166  0.27183  ...        NaN        NaN\n","2021-06-30 23:59:59.999  0.27144  0.27211  ...        NaN        NaN\n","\n","[5 rows x 37 columns]\n"]}],"source":["#         refresh res_df      #\n","res_df = org_res_df.copy()\n","print(org_res_df.tail(5))\n","\n","# break\n","\n","\n","shift_size = -4\n","# shift_size = -1\n","# shift_size = -7\n","# shift_size = +3\n","\n","res_df['min_upper'] = res_df['min_upper'].shift(shift_size)\n","res_df['max_lower'] = res_df['max_lower'].shift(shift_size)\n","res_df['minor_ST1_Trend'] = res_df['minor_ST1_Trend'].shift(shift_size)\n","res_df['minor_ST2_Trend'] = res_df['minor_ST2_Trend'].shift(shift_size)\n","res_df['minor_ST3_Trend'] = res_df['minor_ST3_Trend'].shift(shift_size)\n","res_df['middle_line'] = res_df['middle_line'].shift(shift_size)\n","\n","print(res_df.tail(5))"]},{"cell_type":"markdown","metadata":{"id":"2gxvme1PC6ha"},"source":["### load model"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5831,"status":"ok","timestamp":1628862368878,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"dtYdAuSsC72_","outputId":"e8dccc53-aaa7-4bab-ed8d-753f634c08d6"},"outputs":[{"name":"stdout","output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/resnet/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5\n","94773248/94765736 [==============================] - 1s 0us/step\n"]}],"source":["# model_name = 'inner_tick_cnnreg_lscalemm_prefee_gpu_%s_%s_%s_%s_%s.h5'\n","\n","# model = tf.keras.models.load_model(ckpt_path + model_name)\n","\n","from tensorflow.keras.applications.resnet50 import ResNet50\n","\n","model = ResNet50(weights='imagenet', include_top=False)\n","# model.summary()\n"]},{"cell_type":"markdown","metadata":{"id":"5la6usMOFzkX"},"source":["#### gen selected vector"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oQk3-jbKF8FB"},"outputs":[],"source":["def min_max_scale(npy_x):\n","\n","  return (npy_x - np.min(npy_x)) / (np.max(npy_x) - np.min(npy_x))\n","\n","def expand_dims(npy_x):\n","\n","  row, col = npy_x.shape\n","  npy_x2 = np.array(npy_x).reshape(-1, row, col, 1).astype(np.float32)\n","  # input_x = np.array(data_x).reshape(-1, row, col).astype(np.float32)\n","\n","  #     1c to 3c    #\n","  npy_x3 = npy_x2 * np.ones(3, dtype=np.float32)[None, None, None, :]\n","\n","  return npy_x3\n","\n","\n","def vector_dist(f1, f2):\n","  return np.linalg.norm(f1-f2)\n","\n","\n","\n","# ------------------------ params ------------------------  #\n","selected_i = 500\n","input_size = 100\n","\n","\n","\n","#   1. 선택된 인덱스를 입력받았을 때, input generating 형태만 만들어놓고,     #\n","#   1-1. input cols 필요함    #\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower']\n","# senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","# senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","\n","sma_list = ['sma']\n","\n","#     -------------- outer price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","cctbbo_list = ['cctbbo']\n","\n","selected_price_colname = basic_list + senkoua_list + senkoub_list + sar_list\n","selected_outprice_colname = [macd_list]\n","\n","\n","#         global scaling for outer price data       #\n","#         1. nan 처리       #\n","\n","# # print((np.isnan(df.values)))\n","# print(\"np.sum(np.isnan(df.values), axis=0) :\", np.sum(np.isnan(df.values), axis=0))\n","\n","# max_nan = np.max(np.sum(np.isnan(df.values), axis=0))\n","# # print(max_nan)\n","\n","# df = df.iloc[max_nan:-max_nan]\n","\n","# total_gdata = []\n","# for g_col in selected_outprice_colname:\n","\n","#   temp_data = min_max_scale(res_df[g_col])\n","#   total_gdata.append(temp_data)\n","\n","\n","\n","#   1-2. cols 에 따른, scaling method 구분함    #\n","onprice_input_x = min_max_scale(res_df[selected_price_colname].iloc[selected_i - input_size:selected_i].values)\n","print(onprice_input_x.shape)\n","\n","\n","#   2. plot_check 에서 본인이 원하는 shape 의 인덱스를 선택   #\n","#   3. vertorize, \n","#   3-1. input generator 를 이용해 entry signal 발생할 때마다 dist 비교 진행    #\n","re_onprice_input_x = expand_dims(onprice_input_x)\n","print(re_onprice_input_x.shape)\n","      \n","# break\n","\n","selected_vector = model.predict(re_onprice_input_x, verbose=1)\n","print(selected_vector.shape)"]},{"cell_type":"markdown","metadata":{"id":"OJqkmkpsLCYC"},"source":["### tr_tresh calc"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gcpo4MGd9Wm4"},"outputs":[],"source":["res_wr = 0.6\n","# tr_thresh = 1\n","# tr_thresh = ((1 - res_wr) / res_wr) ** 0.5\n","tr_thresh = ((1 - res_wr) / res_wr) + 0.01\n","# tr_thresh = 2.6\n","print(\"res_wr :\", res_wr)\n","print(\"tr_thresh :\", tr_thresh)\n","\n","\n","#   단리    #\n","trade_num = 1000\n","asset = 1 # thousand USDT\n","test_loss_gap = 0.95  # fee adjusted\n","test_pr_gap = 1 + (1 - test_loss_gap) * tr_thresh\n","\n","test_loss_cnt = trade_num * (1 - res_wr)\n","test_pr_cnt = trade_num * res_wr\n","\n","test_trade_list = [test_pr_gap] * int(test_pr_cnt) + [test_loss_gap] * int(test_loss_cnt)\n","random.shuffle(test_trade_list)\n","# print(\"len(test_trade_list) :\", len(test_trade_list))\n","print(test_trade_list[:10])\n","print()\n","\n","# print(\"%.5f\" % np.cumprod(test_trade_list)[-1])\n","for tr_thresh_ in np.arange(1, 3, 0.2):\n","  if (1 + (1 - test_loss_gap) * tr_thresh_) ** test_pr_cnt * test_loss_gap ** test_loss_cnt > 1:\n","    break\n","print(\"복리를 위한 tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumprod(test_trade_list)[-1] :\", np.cumprod(test_trade_list)[-1])\n","print(\"total_pr : \", np.cumprod(test_trade_list)[-1])\n","print()\n","#   복리 tr_thresh  #\n","#   1. trade_num 에 영향 받지 않음\n","#   2. loss_gap 에 비례함\n","\n","for tr_thresh_ in np.arange(1, 3, 0.01):\n","  if ((1 - test_loss_gap) * tr_thresh_) * test_pr_cnt + (test_loss_gap - 1) * test_loss_cnt > 0:\n","    break\n","np_test_trade = np.array(test_trade_list) - 1\n","print(np_test_trade[:10])\n","# print(\"%.3f\" % )\n","print(\"단리를 위한 tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumsum(np_test_trade)[-1] :\", np.cumsum(np_test_trade)[-1])\n","print(\"total_pr : \", 1 + np.cumsum(np_test_trade)[-1])\n"]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":["Ic1mfmwWCIBu","AUSBU7T8Suzi","VdukVo5-Suzj","Bw5JibDKSuzj","Pe0QpnORSuzk","E0n53hflJbnp","MlFkpO1MSuzl","t1E_eAyPSuzm","nUs4fjVHSuzl","WVAKq3i8Suzm","L7l5CTJfSuzn","x_XGJqBi8Jex","MSUY4nnku3s9","epgS5Dksu-HX","M8-EChy0VsDr","Iy76iO7gztne","x2yj2SwAXDLp","EOXQbXixiQcK","1MNVIExLULhJ","3T-9FwWFXR4f","xpyP5t8Ht_pE","dzla8i9_ysmP","Ksth13T0spcQ","zQ-roiifspcX","q3zisNOTw3jM","X0FsT-8FZRti","13a-U32Uy50I","TBE0l6dHRYrE","Qys2Bw5Ou3u9","tApzvz_gK9lR","2gxvme1PC6ha","5la6usMOFzkX","OJqkmkpsLCYC"],"name":"IDv3_5_vec_backi2(0323_zigzag).ipynb","toc_visible":true,"provenance":[],"authorship_tag":"ABX9TyMM05jx2k8Ji81fjIY8aI7V"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}