{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"6rmQpzEGXfCw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648125145225,"user_tz":-540,"elapsed":21605,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"6ae8373c-1966-411b-ad92-ad4ef5eb20a3"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","import os, sys\n","\n","current_path = '/content/drive/My Drive/Colab Notebooks/JnQ/'\n","\n","os.chdir(current_path)\n","\n","strat_pkg = 'IDE'\n","\n","mpl_finance_path = '/content/drive/My Drive/Colab Notebooks/JnQ/mpl_finance'\n","\n","if mpl_finance_path not in sys.path:\n","\n","  try:\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ')\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ/{}'.format(strat_pkg))\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ/funcs')\n","    sys.path.insert(0, mpl_finance_path)\n","    \n","  except Exception as e:\n","    print(e)"]},{"cell_type":"markdown","metadata":{"id":"8uqYv5StTazo"},"source":["# requirements"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"9qGt60DKTZmf","executionInfo":{"status":"ok","timestamp":1648125153823,"user_tz":-540,"elapsed":8603,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"outputs":[],"source":["# !pip install findiff\n","# import nvstrings, nvcategory, cudf\n","# import cuml\n","# import cudf\n","\n","import os\n","from funcs.funcs_idep import *\n","from funcs.funcs_duration_v2 import *\n","from funcs.funcs_plot_check import *\n","from funcs.funcs_pairing import *\n","# from funcs.funcs_ide import *\n","# from funcs.funcs_indicator_candlescore import *\n","from funcs.funcs_indicator import *\n","from funcs.funcs_trader import *\n","from ast import literal_eval\n","import logging\n","import importlib\n","\n","import mpl_finance as mf\n","import matplotlib.pyplot as plt\n","from matplotlib import gridspec\n","# from tqdm.notebook import tqdm\n","\n","import IPython\n","import IPython.display\n","\n","import numpy as np\n","# import jax.numpy as np\n","import pandas as pd\n","# import seaborn as sns\n","# import tensorflow as tf\n","from scipy import stats, signal\n","\n","import pickle\n","import shutil\n","import json\n","from easydict import EasyDict\n","import copy\n","\n","import datetime\n","from datetime import datetime\n","import random\n","import time\n","# import warnings\n","\n","# warnings.simplefilter(\"ignore\", category=RuntimeWarning)\n","\n","np.seterr(invalid=\"ignore\")\n","np.set_printoptions(suppress=True)\n","np.set_printoptions(linewidth=2000) \n","\n","pd.set_option('mode.chained_assignment',  None)\n","\n","pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)"]},{"cell_type":"markdown","metadata":{"id":"Ic1mfmwWCIBu"},"source":["# makeset - with to_htf dataframes"]},{"cell_type":"markdown","metadata":{"id":"AUSBU7T8Suzi"},"source":["## sync_check_make"]},{"cell_type":"code","source":["def sd_dc(df, period1, period2, ltf_df=None):\n","    assert period1 <= period2, \"assert period1 <= period2\"\n","    donchian_channel_v2(df, period1)\n","    donchian_channel_v2(df, period2)\n","    itv = pd.infer_freq(df.index)\n","    if itv != 'T':\n","      assert ltf_df is not None, \"assert ltf_df is not None\"\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, df, [-4, -3, -2, -1]), how='inner')\n","    else:\n","      ltf_df = df\n","\n","    ltf_df['short_base_{}'.format(itv)] = (ltf_df['dc_lower_{}{}'.format(itv, period1)].to_numpy() + ltf_df['dc_upper_{}{}'.format(itv, period2)].to_numpy()) / 2\n","    ltf_df['long_base_{}'.format(itv)] = (ltf_df['dc_upper_{}{}'.format(itv, period1)].to_numpy() + ltf_df['dc_lower_{}{}'.format(itv, period2)].to_numpy()) / 2\n","\n","    return ltf_df\n","\n","def donchian_channel_v2(df, period):\n","  itv = pd.infer_freq(df.index)\n","  df['dc_upper_{}{}'.format(itv, period)] = df['high'].rolling(period).max()\n","  df['dc_lower_{}{}'.format(itv, period)] = df['low'].rolling(period).min()\n","\n","  return"],"metadata":{"id":"Xkb_26IAFffi"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QmhLikYlSuzi"},"outputs":[],"source":["def sync_check_make(df):\n","\n","    make_itv_list = ['3T', '5T', '15T', '30T', 'H', '4H', 'D']\n","    offset_list = ['1h', '1h', '1h', '1h', '1h', '1h', '9h']\n","\n","    assert len(make_itv_list) == len(offset_list), \"length of itv & offset_list should be equal\"\n","        \n","    htf_df_list = [to_htf(df, itv_=itv_, offset=offset_) for itv_, offset_ in zip(make_itv_list, offset_list)]\n","\n","    df_3T, df_5T, df_15T, df_30T, df_H, df_4H, df_D = htf_df_list\n","\n","    for htf_df in htf_df_list:\n","      print(\"{} -> \".format(pd.infer_freq(htf_df.index)), htf_df.tail(1))\n","\n","    # heikinashi_v2(res_df_)\n","    # h_candle_v3(res_df, '5T')\n","\n","    # --------------- sd_dc --------------- #\n","    df = sd_dc(df, 20, 40)\n","    df = sd_dc(df_5T, 20, 40, df)\n","    df = sd_dc(df_H, 20, 40, df)\n","\n","    print(\"sd_dc phase done\")\n","\n","    # --------------- normalize data --------------- #\n","    # lb_period = 15\n","    # target_col = 'close_{}'.format(lb_period)\n","    # target_data = df['close'].diff(lb_period).to_numpy()\n","    # norm_data(df, target_data, target_col)    \n","    # print(\"normalize data phase done !\")\n","\n","    # --------------- lucid sar --------------- #\n","    # lucid_sar_v2(df)\n","    # lucid_sar_v2(df_3T)\n","    # df = df.join(to_lower_tf_v2(df, df_3T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_5T)\n","    # df = df.join(to_lower_tf_v2(df, df_5T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_15T)\n","    # df = df.join(to_lower_tf_v2(df, df_15T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_30T)\n","    # df = df.join(to_lower_tf_v2(df, df_30T, [-2, -1]), how='inner')       \n","\n","    # print(\"sar phase done\")\n","\n","    # --------------- supertrend --------------- #\n","    # df = st_price_line(df, df_3T, '3m')\n","    # df = st_price_line(df, df_5T, '5m')\n","    # df = st_price_line(df, df_15T, '15m')\n","    # df = st_price_line(df, df_30T, '30m')\n","    # df = st_price_line(df, df_H, '1h')\n","    # df = st_price_line(df, df_4H, '4h')\n","\n","    # print(\"supertrend phase done\")\n","\n","    # --------------- rsi --------------- #  \n","    # df['rsi_1m'] = rsi(df, 14)    \n","    # df_5T['rsi_5m'] = rsi(df_5T, 14)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1]), columns=['rsi_5m']))\n","    \n","    # print(\"rsi phase done\")\n","\n","\n","    # --------------- cci --------------- #  \n","    # df['cci_1m'] = cci(df, 20)\n","\n","    # print(\"cci phase done\")\n","\n","    # --------------- ema --------------- #      \n","    # df_5T['ema_5m'] = ema(df_5T['close'], 195)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1]), columns=['ema_5m']))\n","    \n","    # print(\"ema phase done\")\n","    \n","    # # --------------- bband --------------- #  \n","    # df = bb_width_v2(df, period, multiple)\n","\n","    # print(\"bband phase done\")\n","\n","    # --------------- cbline --------------- #    \n","    # df_3T['cloud_bline_3m'] = cloud_bline(df_3T, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_3T, [-1]), columns=['cloud_bline_3m']))\n","    # df_5T['cloud_bline_5m'] = cloud_bline(df_5T, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1]), columns=['cloud_bline_5m']))\n","    # df_15T['cloud_bline_15m'] = cloud_bline(df_15T, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_15T, [-1]), columns=['cloud_bline_15m']))\n","    # df_30T['cloud_bline_30m'] = cloud_bline(df_30T, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_30T, [-1]), columns=['cloud_bline_30m']))\n","    # df_H['cloud_bline_1h'] = cloud_bline(df_H, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_H, [-1]), columns=['cloud_bline_1h']))\n","    # df_4H['cloud_bline_4h'] = cloud_bline(df_4H, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_4H, [-1]), columns=['cloud_bline_4h']))\n","\n","    # print(\"cbline phase done\")\n","    \n","    \n","    # --------------- stochastic --------------- #\n","    # df['stoch_1m'] = stoch(df, 13, 3, 3)\n","\n","    # df_5T['stoch'] = stoch(df_5T, 13, 3, 3)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","    # print(\"stoch phase done\")\n","\n","\n","    return df\n"]},{"cell_type":"markdown","metadata":{"id":"mEKyVbHWSuzi"},"source":["## make & save res_df (concat 생각하면, timeindex sync 맞춰야함)"]},{"cell_type":"markdown","metadata":{"id":"VdukVo5-Suzj"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11,"status":"error","timestamp":1636201718856,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"khKb9nhlSuzj","outputId":"02bf2c60-f298-4fe9-e6bb-78230ac1348c"},"outputs":[{"ename":"NameError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-5-ee034491b257>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0ma_day\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m3600\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m24\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtqdm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m   \u001b[0mkeys\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mfile_list\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'file_list' is not defined"]}],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  if '2021-07-01'.upper() not in file_list[i]:\n","  # if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    excel_name = key.replace(\".xlsx\", \"_st1h_backi2.xlsx\")\n","    excel_path = save_path + excel_name\n","\n","    if excel_name in exist_list:\n","      print(excel_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m 마지막 timeindex 의 date 기준, 08:59:59.999000 를 last timestamp 로 설정\n","      #      2. 시작 timestamp 는 모든 tf 의 가장 최근 시작 index,\n","      #       a. 1m 의 시작 timeindex 는 최소, htf 의 시작 timeindex 보다 interval 만큼 앞서야함\n","      #         i. 따라서 1m open_index, latest_open_index + 1d 를 하면 댐\n","      #           1. timestamp 으로 변환후 1day 를 더하고 datetime 으로 변환\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","    latest_open_index = sorted(open_indexes)[-1]\n","    \n","    open_ts = datetime.timestamp(latest_open_index)\n","    latest_open_index_1m = datetime.fromtimestamp(open_ts + a_day)\n","\n","    #   str 로 만들어 접근하면 불가함  #\n","    end_index = pd.to_datetime(str(df.index[-1]).split(\" \")[0] + \" 08:59:59.999000\")\n","    # break\n","\n","    sliced_df = df.loc[latest_open_index_1m:end_index] # to_lower_tf 의 기준 ltf\n","    sliced_second_df = second_df.loc[latest_open_index:end_index]\n","    sliced_third_df = third_df.loc[latest_open_index:end_index]\n","    sliced_fourth_df = fourth_df.loc[latest_open_index:end_index]\n","    sliced_fifth_df = fifth_df.loc[latest_open_index:end_index]\n","\n","    print(\"sliced index\")\n","    print(sliced_df.index[[0, -1]])\n","    print(sliced_second_df.index[[0, -1]])\n","    print(sliced_third_df.index[[0, -1]])\n","    print(sliced_fourth_df.index[[0, -1]])\n","    print(sliced_fifth_df.index[[0, -1]])\n","\n","    try:\n","      sliced_sixth_df = sixth_df.loc[latest_open_index:end_index]\n","      sliced_seventh_df = seventh_df.loc[latest_open_index:end_index]\n","\n","      print(sliced_sixth_df.index[[0, -1]])\n","      print(sliced_seventh_df.index[[0, -1]])\n","\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df, sliced_sixth_df, sliced_seventh_df)\n","    \n","    except:\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df)\n","\n","\n","\n","    res_df.to_excel(excel_path)\n","    print(excel_name, \"saved succesfully !\")"]},{"cell_type":"markdown","metadata":{"id":"Bw5JibDKSuzj"},"source":["### xlsx to feather"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":355,"referenced_widgets":["be2b848dbcb14a079a2b7bd605af6435"]},"id":"VA-_gcA7Suzj","outputId":"f6f3b55d-ec2c-4b2c-d62e-3de7c0384dc4"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"be2b848dbcb14a079a2b7bd605af6435","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/156 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["DatetimeIndex(['2021-06-28 00:00:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:02:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:04:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:14:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:29:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-09-14 03:59:59.999000', '2021-11-15 14:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-03-10 20:59:59.999000', '2021-11-15 16:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","\n","xlsx converted to feather !\n","DatetimeIndex(['2021-06-28 00:00:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:02:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:04:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:14:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:29:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-09-14 03:59:59.999000', '2021-11-15 14:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-03-10 20:59:59.999000', '2021-11-15 16:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","\n","xlsx converted to feather !\n"]}],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  # if '2021-07-01'.upper() not in file_list[i]:\n","  if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    feather_name = key.replace(\".xlsx\", \".ftr\")\n","    # feather_path = save_path + feather_name\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m 마지막 timeindex 의 date 기준, 08:59:59.999000 를 last timestamp 로 설정\n","      #      2. 시작 timestamp 는 모든 tf 의 가장 최근 시작 index,\n","      #       a. 1m 의 시작 timeindex 는 최소, htf 의 시작 timeindex 보다 interval 만큼 앞서야함\n","      #         i. 따라서 1m open_index, latest_open_index + 1d 를 하면 댐\n","      #           1. timestamp 으로 변환후 1day 를 더하고 datetime 으로 변환\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","\n","    df.reset_index().to_feather(date_path + feather_name, compression='lz4')\n","    second_df.reset_index().to_feather(date_path2 + feather_name, compression='lz4')\n","    third_df.reset_index().to_feather(date_path3 + feather_name, compression='lz4')\n","    fourth_df.reset_index().to_feather(date_path4 + feather_name, compression='lz4')\n","    fifth_df.reset_index().to_feather(date_path5 + feather_name, compression='lz4')\n","    sixth_df.reset_index().to_feather(date_path6 + feather_name, compression='lz4')\n","    seventh_df.reset_index().to_feather(date_path7 + feather_name, compression='lz4')\n","\n","    print(\"xlsx converted to feather !\")\n","    "]},{"cell_type":"markdown","metadata":{"id":"Pe0QpnORSuzk"},"source":["### add itv_name to ftr"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":223,"referenced_widgets":["e3225655da874b8d89cc8b2a381b3fb6"]},"executionInfo":{"elapsed":43664,"status":"ok","timestamp":1638246331122,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"M-gl30KxSuzk","outputId":"1cfcb580-8d25-4bd0-fdd0-213640779ce2"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"e3225655da874b8d89cc8b2a381b3fb6","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/175 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 BTCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 BCHUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 XRPUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 EOSUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 LTCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ETCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 LINKUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 XLMUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ADAUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ETHUSDT_1m.ftr\n"]}],"source":["save_path = './candlestick_concated/res_df/'\n","\n","# dir_path = \"bbdc3m_backi2\"\n","# date = '2021-10-10'\n","date = '2021-07-01'\n","\n","db_path = './candlestick_concated/database_bn/non_cum/%s/' % date\n","os.makedirs(os.path.join(db_path), exist_ok=True)\n","\n","# exist_list = os.listdir(os.path.join(save_path, dir_path))\n","# break\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","        \n","    df = shutil.copy(date_path + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n","    second_df = shutil.copy(date_path2 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval2))\n","    third_df = shutil.copy(date_path3 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval3))\n","    fourth_df = shutil.copy(date_path4 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval4))\n","    fifth_df = shutil.copy(date_path5 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval5))\n","    sixth_df = shutil.copy(date_path6 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval6))\n","    seventh_df = shutil.copy(date_path7 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval7))\n","\n","    print(\"copied to\" + db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n"]},{"cell_type":"markdown","metadata":{"id":"4oZ1ohTtSuzk"},"source":["### feather ver. (database to res_df)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":448,"referenced_widgets":["15a8f265417c47d88bf5b1907353afa8","4f4c5fba8f1d4543a46d6dd7e658b7b3","2d4fae08e5364faf83b0bcdc8e6ece4c","0f94b5763ea344adbb20cf3517a25d2f","e5594180fccb4d2787579ee6034cd6ab","af7a8b3e0365404ea9de8bea08d1a4a6","4f9b787786494e79959bc49b6da4ff4d","06f4ecc65be347ac80deee1965545f27","f8462155d04e4c8da2e4c26f02213bb4","18817cdc20574020976bc2f2c6acc6b2","fefe35e08d734a20aa38986f42f27b13"]},"executionInfo":{"elapsed":239284,"status":"ok","timestamp":1642739615683,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"vgVHpnUsSuzk","outputId":"6224eedf-c127-4d18-f095-3a543cd3f1f8"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"15a8f265417c47d88bf5b1907353afa8","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/7 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["3T ->                          open     high      low    close\n","index                                                  \n","2022-01-10 15:18:00  3163.02  3164.29  3162.41  3164.28\n","5T ->                          open     high      low    close\n","index                                                  \n","2022-01-10 15:15:00  3160.51  3164.29  3159.01  3164.28\n","15T ->                          open     high      low    close\n","index                                                  \n","2022-01-10 15:15:00  3160.51  3164.29  3159.01  3164.28\n","30T ->                         open     high      low    close\n","index                                                 \n","2022-01-10 15:00:00  3171.7  3173.11  3156.02  3164.28\n","H ->                         open     high      low    close\n","index                                                 \n","2022-01-10 15:00:00  3171.7  3173.11  3156.02  3164.28\n","4H ->                         open     high      low    close\n","index                                                 \n","2022-01-10 13:00:00  3153.0  3179.16  3149.95  3164.28\n","D ->                          open     high      low    close\n","index                                                  \n","2022-01-10 09:00:00  3149.99  3179.16  3125.88  3164.28\n","supertrend phase done\n","./candlestick_concated/res_df/st3m_backi2/noncat/cum/2022-01-10/2022-01-10 ETHUSDT.ftr saved succesfully !\n"]}],"source":["# db_path = './candlestick_concated/database_ub/' # upbit\n","db_path = './candlestick_concated/database_bn/'   # binance\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","save_dir_path = \"bb1d_backi2\"\n","date = '2022-02-17'\n","\n","# concat_path = 'noncat' # 새로운 cols 를 기존 cum/concat 에 붙이려는 경우\n","concat_path = 'concat'\n","cum_path = \"cum\"\n","# cum_path = \"non_cum\"  # non_cum 으로 진행하는 경우, row concat 용도이기 때문에 noncat -> concat 으로 변경 (base cols 를 모두 담고 있음)\n","\n","load_path = os.path.join(db_path, cum_path, date)\n","save_path = os.path.join(save_path, save_dir_path, concat_path, cum_path, date)\n","\n","os.makedirs(save_path, exist_ok=True)\n","\n","file_list = os.listdir(load_path)\n","exist_list = os.listdir(save_path)\n","# break\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","\n","    if \"_1m\" not in key:\n","      continue\n","\n","    # feather_name = key.replace(\".ftr\", \"_%.ftr\" % save_dir_path)\n","    feather_name = key.replace(\"_1m\", \"\")\n","    feather_path = os.path.join(save_path, feather_name)\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    df = pd.read_feather(os.path.join(load_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","    res_df = sync_check_make(df)\n","\n","    res_df.reset_index().to_feather(feather_path, compression='lz4')\n","    print(feather_path, \"saved succesfully !\")"]},{"cell_type":"markdown","source":["#### just add col to loaded df"],"metadata":{"id":"YxCPUzoyidwH"}},{"cell_type":"code","source":["res_df_ = sync_check_make(res_df_)"],"metadata":{"id":"odqVwQHpYo1M","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1647309648666,"user_tz":-540,"elapsed":3069,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"16f3411b-c1a2-41c0-9ce5-da6d1e3e648d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["3T ->                          open     high      low    close\n","index                                                  \n","2022-02-17 10:27:00  3148.85  3150.08  3146.38  3146.76\n","5T ->                          open     high      low    close\n","index                                                  \n","2022-02-17 10:25:00  3146.85  3150.08  3145.44  3146.76\n","15T ->                          open    high      low    close\n","index                                                 \n","2022-02-17 10:15:00  3143.99  3151.0  3139.14  3146.76\n","30T ->                         open     high      low    close\n","index                                                 \n","2022-02-17 10:00:00  3148.8  3158.68  3139.14  3146.76\n","H ->                         open     high      low    close\n","index                                                 \n","2022-02-17 10:00:00  3148.8  3158.68  3139.14  3146.76\n","4H ->                         open     high     low    close\n","index                                                \n","2022-02-17 09:00:00  3121.8  3158.68  3120.0  3146.76\n","D ->                         open     high     low    close\n","index                                                \n","2022-02-17 09:00:00  3121.8  3158.68  3120.0  3146.76\n","sd_dc phase done\n"]}]},{"cell_type":"code","source":["res_df_.tail().iloc[:, -10:]"],"metadata":{"id":"3SKglsQCj5_x","colab":{"base_uri":"https://localhost:8080/","height":237},"executionInfo":{"status":"ok","timestamp":1647309648667,"user_tz":-540,"elapsed":12,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"170a8e07-9a85-4b27-8043-4ef6110b2cd6"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                         dc_upper_5T40  dc_lower_5T40  short_base_5T  long_base_5T  dc_upper_H20  dc_lower_H20  dc_upper_H40  dc_lower_H40  short_base_H  long_base_H\n","index                                                                                                                                                                \n","2022-02-17 10:25:59.999        3158.68        3114.98        3136.83       3136.83       3186.79       3040.42        3198.0       3040.42       3119.21     3113.605\n","2022-02-17 10:26:59.999        3158.68        3114.98        3136.83       3136.83       3186.79       3040.42        3198.0       3040.42       3119.21     3113.605\n","2022-02-17 10:27:59.999        3158.68        3114.98        3136.83       3136.83       3186.79       3040.42        3198.0       3040.42       3119.21     3113.605\n","2022-02-17 10:28:59.999        3158.68        3114.98        3136.83       3136.83       3186.79       3040.42        3198.0       3040.42       3119.21     3113.605\n","2022-02-17 10:29:59.999        3158.68        3114.98        3136.83       3136.83       3186.79       3040.42        3198.0       3040.42       3119.21     3113.605"],"text/html":["\n","  <div id=\"df-d0fec390-9c06-4700-9c9f-9d1d4a85347e\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>dc_upper_5T40</th>\n","      <th>dc_lower_5T40</th>\n","      <th>short_base_5T</th>\n","      <th>long_base_5T</th>\n","      <th>dc_upper_H20</th>\n","      <th>dc_lower_H20</th>\n","      <th>dc_upper_H40</th>\n","      <th>dc_lower_H40</th>\n","      <th>short_base_H</th>\n","      <th>long_base_H</th>\n","    </tr>\n","    <tr>\n","      <th>index</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2022-02-17 10:25:59.999</th>\n","      <td>3158.68</td>\n","      <td>3114.98</td>\n","      <td>3136.83</td>\n","      <td>3136.83</td>\n","      <td>3186.79</td>\n","      <td>3040.42</td>\n","      <td>3198.0</td>\n","      <td>3040.42</td>\n","      <td>3119.21</td>\n","      <td>3113.605</td>\n","    </tr>\n","    <tr>\n","      <th>2022-02-17 10:26:59.999</th>\n","      <td>3158.68</td>\n","      <td>3114.98</td>\n","      <td>3136.83</td>\n","      <td>3136.83</td>\n","      <td>3186.79</td>\n","      <td>3040.42</td>\n","      <td>3198.0</td>\n","      <td>3040.42</td>\n","      <td>3119.21</td>\n","      <td>3113.605</td>\n","    </tr>\n","    <tr>\n","      <th>2022-02-17 10:27:59.999</th>\n","      <td>3158.68</td>\n","      <td>3114.98</td>\n","      <td>3136.83</td>\n","      <td>3136.83</td>\n","      <td>3186.79</td>\n","      <td>3040.42</td>\n","      <td>3198.0</td>\n","      <td>3040.42</td>\n","      <td>3119.21</td>\n","      <td>3113.605</td>\n","    </tr>\n","    <tr>\n","      <th>2022-02-17 10:28:59.999</th>\n","      <td>3158.68</td>\n","      <td>3114.98</td>\n","      <td>3136.83</td>\n","      <td>3136.83</td>\n","      <td>3186.79</td>\n","      <td>3040.42</td>\n","      <td>3198.0</td>\n","      <td>3040.42</td>\n","      <td>3119.21</td>\n","      <td>3113.605</td>\n","    </tr>\n","    <tr>\n","      <th>2022-02-17 10:29:59.999</th>\n","      <td>3158.68</td>\n","      <td>3114.98</td>\n","      <td>3136.83</td>\n","      <td>3136.83</td>\n","      <td>3186.79</td>\n","      <td>3040.42</td>\n","      <td>3198.0</td>\n","      <td>3040.42</td>\n","      <td>3119.21</td>\n","      <td>3113.605</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d0fec390-9c06-4700-9c9f-9d1d4a85347e')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-d0fec390-9c06-4700-9c9f-9d1d4a85347e button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-d0fec390-9c06-4700-9c9f-9d1d4a85347e');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":115}]},{"cell_type":"code","source":["# ------------ save current res_df ------------ #\n","ftr_full_path = os.path.join(ftr_path, key)\n","res_df_.reset_index().to_feather(ftr_full_path, compression='lz4')  # key 잘 확인하고 저장\n","print(ftr_full_path, 'saved !')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XrgJPQRuisCa","executionInfo":{"status":"ok","timestamp":1647309651639,"user_tz":-540,"elapsed":2982,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"f14ebf99-e99a-400a-c7c8-09ea4561f6d0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["./candlestick_concated/res_df/bb1d_backi2/concat/cum/2022-02-17/2022-02-17 ETHUSDT.ftr saved !\n"]}]},{"cell_type":"markdown","metadata":{"id":"E0n53hflJbnp"},"source":["### htf candle check"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":489,"status":"ok","timestamp":1642148504926,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"6xW0yugCWvGz","outputId":"58106ff9-9709-4a62-bca2-1f6795d13322"},"outputs":[{"name":"stdout","output_type":"stream","text":["itv_ : 3T\n","                        open     high      low    close\n","index                                                  \n","2022-01-10 15:06:00  3169.97  3170.22  3159.51  3161.22\n","2022-01-10 15:09:00  3161.22  3163.98  3161.22  3163.82\n","2022-01-10 15:12:00  3163.82  3163.83  3156.02  3160.49\n","2022-01-10 15:15:00  3160.51  3164.29  3159.01  3162.93\n","2022-01-10 15:18:00  3163.02  3164.29  3162.41  3164.28\n","                            open     high      low    close    volume\n","index                                                                \n","2022-01-10 15:08:59.999  3169.97  3170.22  3159.51  3161.22  4241.449\n","2022-01-10 15:11:59.999  3161.22  3163.98  3161.22  3163.82  1143.874\n","2022-01-10 15:14:59.999  3163.82  3163.83  3156.02  3160.49  2135.292\n","2022-01-10 15:17:59.999  3160.51  3164.29  3159.01  3162.93  1011.598\n","2022-01-10 15:20:59.999  3163.02  3164.29  3162.41  3163.82   466.868\n"]}],"source":["itv_list = ['3T', '5T', '15T', '30T', '1H', '4H']\n","comp_df_list = [second_df, third_df, fourth_df, fifth_df, sixth_df, seventh_df]\n","offset_list = ['1h', '2min', '2min', '2min', '2min', '2min']\n","# itv_list = ['4H']\n","# comp_df_list = [seventh_df]\n","\n","slice_len = 100\n","for itv_, comp_df_, offset in zip(itv_list, comp_df_list, offset_list):\n","\n","  print(\"itv_ :\", itv_)\n","\n","  # df = h_candle_v2(df, '3T')\n","  # end_ts = \n","  h_res_df = df.resample(itv_, offset=offset).agg({\n","          'open': 'first',\n","          'high': 'max',\n","          'low': 'min',\n","          'close': 'last'\n","      })\n","\n","  #   앞은 길이가 다르고, 뒤에서부터 잘라서 비교    #\n","  #   last_row 빼고는 동일, 4h 제외\n","  # print(df.tail())\n","  print(h_res_df.tail())\n","  print(comp_df_.tail())\n","  # # print(h_res_df.head())\n","  # # print(second_df.head())\n","\n","  # print(len(h_res_df))\n","  # print(len(second_df))\n","\n","  # print(h_res_df.values[-slice_len:])\n","  # print(second_df.iloc[:, :4].values[-slice_len:])\n","  # print(np.argwhere(h_res_df.values[-slice_len:] != comp_df_.iloc[:, :4].values[-slice_len:]))\n","  # print()\n","  break"]},{"cell_type":"markdown","metadata":{"id":"jTN3M842Suzl"},"source":["## concat & save new res_df"]},{"cell_type":"markdown","metadata":{"id":"MlFkpO1MSuzl"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"U-3QkfbFSuzl"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","dict_name = \"2021-07-01 ETHUSDT_bb15m_backi2_res_dfs.pkl\"\n","\n","#     load with pickle    #\n","with open(save_path + dict_name, 'rb') as f:\n","  saved_res_df_dict = pickle.load(f)\n","\n","print(dict_name, \"loaded !\")\n","res_df_files = os.listdir(save_path)\n","res_df_files.reverse()\n","\n","print(res_df_files)\n","\n","res_df_dict = {}\n","\n","base_postfix = '_bb15m_backi2.xlsx'\n","new_postfix = '_st1h_backi2.xlsx'\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for k_i, key in enumerate(res_df_files):\n","\n","  if '2021-07-01'.upper() not in key:\n","  # if '2021-10-10'.upper() not in key:\n","    continue\n","\n","  # if \"link\".upper() not in key:\n","  # if \"btc\".upper() not in key:\n","  #   continue\n","\n","  if new_postfix not in key:\n","    continue\n","\n","  # if key in \n","\n","  if sample_cnt == max_cnt:\n","    dict_name = \"%s_res_dfs.pkl\" % key.split(\".\")[0]\n","    print(\"dict_name :\", dict_name)\n","\n","  base_df = saved_res_df_dict[key.replace(new_postfix, base_postfix)]\n","  # base_df = pd.read_excel(save_path + key.replace(new_postfix, base_postfix), index_col=0)  \n","  res_df = pd.read_excel(save_path + key, index_col=0)  \n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  droped_new_res_df.head()\n","  # break\n","\n","  # res_df_dict[key] = res_df\n","  res_df_dict[key] = droped_new_res_df\n","  print(key, \"saved to dict !\")\n","\n","  #     save with pickle    #\n","  with open(save_path + dict_name, 'wb') as f:\n","    pickle.dump(res_df_dict, f)\n","\n","  sample_cnt -= 1\n","\n","  if sample_cnt <= 0:\n","    break\n"]},{"cell_type":"markdown","metadata":{"id":"t1E_eAyPSuzm"},"source":["### new col to latest feather (1m_indi. only)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xyI5NrM7Suzm"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","cum_dir = \"cum\"\n","\n","new_dir_path = \"rsi_backi2\"\n","base_dir_path = \"bbdc3m_backi2\"\n","\n","new_date = '2021-11-17'\n","\n","\n","\n","#     load ftr list    #\n","base_save_path = os.path.join(save_path, base_dir_path, \"concat/cum\", new_date)\n","new_save_path = base_save_path.replace(base_dir_path, new_dir_path)\n","\n","#     save to (new) cum dir    #\n","#      1. if dir. not exists, makedir\n","os.makedirs(new_save_path, exist_ok=True)\n","\n","ftr_list = [s for s in os.listdir(base_save_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_save_path, key), columns=None, use_threads=True).set_index(\"index\")\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  droped_new_res_df = sync_check(base_df)\n","\n","  # new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # # new_res_df.head()\n","\n","  # intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  # droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break\n","\n","  droped_new_res_df.reset_index().to_feather(os.path.join(new_save_path, key), compression='lz4')\n","\n","  print(os.path.join(new_save_path, key), \"saved !\")\n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"markdown","metadata":{"id":"nUs4fjVHSuzl"},"source":["### feather ver. (col concat)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2001,"status":"ok","timestamp":1642739652513,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"6cu-Y82iSuzl","outputId":"273507b8-0d33-48b5-d9c5-00547688ef73"},"outputs":[{"name":"stdout","output_type":"stream","text":["['2022-01-10 ETHUSDT.ftr']\n","./candlestick_concated/res_df/st3m_backi2/concat/cum/2022-01-10/2022-01-10 ETHUSDT.ftr saved !\n"]}],"source":["new_dir_path = \"st3m_backi2\"\n","base_dir_path = \"bb1d_backi2\"\n","\n","# new_date = \"2021-11-17\"\n","new_date = \"2022-01-10\"\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","save_path = './candlestick_concated/res_df/'\n","save_path = os.path.join(save_path, new_dir_path, \"concat/cum\", new_date)   \n","# save_path = os.path.join(save_path, new_dir_path, \"concat/non_cum\", new_date)   # row col 하려면 concat 맞음, noncum 사용\n","os.makedirs(save_path, exist_ok=True)\n","\n","\n","#     load ftr list    #\n","# ftr_list = [s for s in os.listdir(os.path.join(save_path, new_dir_path)) if \"ftr\" in s]\n","\n","noncat_path = save_path.replace(\"concat/\", \"noncat/\")\n","ftr_list = [s for s in os.listdir(noncat_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","  try:\n","\n","    #       read from base postfix's directory    #\n","    base_df = pd.read_feather(os.path.join(save_path.replace(new_dir_path, base_dir_path), key), columns=None, use_threads=True).set_index(\"index\")\n","    res_df = pd.read_feather(os.path.join(noncat_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","    # print(base_df.head())\n","    # print(res_df.head())\n","    # break\n","\n","    new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","    # new_res_df.head()\n","\n","    droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","    # droped_new_res_df.head()\n","    # break\n","\n","    droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","    # res_df_dict[key] = res_df\n","    # res_df_dict[key] = droped_new_res_df\n","    print(os.path.join(save_path, key), \"saved !\")\n","  \n","  except Exception as e:\n","    print(\"error occured ! :\", e)\n","  \n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"markdown","metadata":{"id":"WVAKq3i8Suzm"},"source":["### feather ver. (row concat) , database cum 도 호환가능"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7893,"status":"ok","timestamp":1645188189702,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"XG2p9OhhSuzm","outputId":"e67874ba-0710-4f38-966f-5ea7d42403cb"},"outputs":[{"output_type":"stream","name":"stdout","text":["['2022-02-17 ETHUSDT_1m.ftr']\n","                            open     high     low    close  volume\n","index                                                             \n","2019-11-27 16:45:59.999   146.00   146.00   146.0   146.00   0.010\n","2022-02-17 10:29:59.999  3146.86  3147.22  3146.4  3146.76  26.727\n","continuity checked !\n","./candlestick_concated/database_bn/cum/2022-02-17/2022-02-17 ETHUSDT_1m.ftr saved !\n"]}],"source":["save_path = './candlestick_concated/res_df/'        # cols 추가된 cum db 에 new_row's cols 기준으로 합치는 경우\n","save_path = './candlestick_concated/database_bn/'   # ohlcv cum db 만들 경우\n","\n","base_date = '2022-01-10'\n","new_date = '2022-02-17'\n","\n","#     load ftr list    #\n","if \"database\" in save_path:\n","  base_dir_path = \"\"\n","  new_dir_path = \"\"\n","  concat_dir = \"\"\n","else:\n","  base_dir_path = \"sar_backi2\"\n","  new_dir_path = \"bb4h_backi2\"  # dir_path 가 base / new 서로 달라질 수 있어서 분할함\n","  concat_dir = \"concat\"\n","\n","base_date_path = os.path.join(save_path, base_dir_path, concat_dir, \"cum\", base_date)      # 기존 cum db 와 new_date db 를 cum 진행\n","# base_date_path = os.path.join(save_path, base_dir_path, concat_dir, \"non_cum\", base_date)    # non_cum db 와 new_date db 를 cum 진행\n","\n","# new_date_path = os.path.join(save_path, new_dir_path, concat_dir, \"cum\", new_date)      # 상황별로 직접 선택해야할 듯\n","new_date_path = os.path.join(save_path, new_dir_path, concat_dir, \"non_cum\", new_date)\n","\n","\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","save_path = new_date_path.replace(\"non_cum\", \"cum\")   # non_cum 아니여도 무관\n","os.makedirs(save_path, exist_ok=True)   # noncat / concat 두가지 경우 존재가능할 것\n","# os.makedirs(os.path.join(save_path, dir_path, \"noncat/cum\", new_date), exist_ok=True)\n","\n","\n","ftr_list = [s for s in os.listdir(new_date_path) if \"ftr\" in s]\n","exist_list = os.listdir(save_path)\n","print(ftr_list)\n","# break\n","\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:   # date rejection\n","    continue\n","  if '1m' not in key:  # itv rejection\n","    continue\n","\n","  # if key in exist_list:\n","  #   print(key, \"already exist !\")\n","  #   continue\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_date_path, key.replace(new_date, base_date)), columns=None, use_threads=True).set_index(\"index\")   # key 에 new_date 담겨있음\n","  res_df = pd.read_feather(os.path.join(new_date_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break  \n","  \n","  print(droped_new_res_df.iloc[[0, -1]])  \n","\n","  # ------------- verify df continuity directly itv by itv ------------- #\n","  true_continue = True\n","  if \"_\" in key:\n","\n","    interval = key.split(\".\")[0].split(\"_\")[-1] \n","    itv_num = to_itvnum(interval)\n","\n","    # verified_df = consecutive_df(droped_new_res_df, to_itvnum(interval))\n","    # verified_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","    # res_df_dict[key] = res_df\n","    # res_df_dict[key] = droped_new_res_df  \n","\n","    np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","    ideal_ts_gap = 60 * itv_num\n","\n","    for ts_i in range(len(np_idx_ts)):\n","      \n","      if ts_i != 0:\n","        ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","\n","        if ts_gap > ideal_ts_gap or ts_gap < ideal_ts_gap:\n","        # if ts_gap == ideal_ts_gap:\n","          print(droped_new_res_df.index[ts_i - 1])\n","          print(droped_new_res_df.index[ts_i])\n","          # print(ts_gap)\n","          print(\"------------------ unideal ts_gap ------------------\")\n","          true_continue = False\n","\n","    print(\"continuity checked !\")\n","\n","  if true_continue:\n","    droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","  print(os.path.join(save_path, key), \"saved !\")\n","  \n"]},{"cell_type":"markdown","metadata":{"id":"L7l5CTJfSuzn"},"source":["### check continuity"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nGzMGyC3Suzn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1643987442996,"user_tz":-540,"elapsed":5408,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"4fface63-62d9-4e2a-e22d-bdd26f428e0e"},"outputs":[{"output_type":"stream","name":"stdout","text":["                             open    high       low     close   volume\n","index                                                                 \n","2020-09-14 16:00:59.999    3.2002    4.91    3.2002    3.2745  11567.0\n","2022-02-04 23:57:59.999  103.7500  103.75  103.6000  103.6000   6427.0\n","[1.60009926e+09 1.60009932e+09 1.60009938e+09 1.60009944e+09\n"," 1.60009950e+09 1.60009956e+09 1.60009962e+09 1.60009968e+09\n"," 1.60009974e+09 1.60009980e+09]\n"]}],"source":["# print(droped_new_res_df.columns)\n","\n","print(droped_new_res_df.iloc[[0, -1]])\n","\n","np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","\n","print(np_idx_ts[:10])\n","for ts_i in range(len(np_idx_ts)):\n","  \n","  if ts_i != 0:\n","    ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","\n","    if ts_gap > 60 or ts_gap < 60:\n","\n","      print(\"invalid ts_gap found !\")\n","    # if ts_gap == 60:\n","      print(droped_new_res_df.index[ts_i - 1])\n","      print(droped_new_res_df.index[ts_i])\n","      # print(ts_gap)\n","      print()\n"]},{"cell_type":"markdown","metadata":{"id":"x_XGJqBi8Jex"},"source":["### check length of front missing value + middle_data non_missing validity"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":311,"status":"ok","timestamp":1641887318959,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"yRNwqVeAu8X8","outputId":"fb236bde-4527-4bc7-eac4-4bee42532c5a"},"outputs":[{"name":"stdout","output_type":"stream","text":["2.167361111111111\n","38\n"]}],"source":["#       1. new_date 의 시작 timeidx 와 base_date end timeidx 의 최소 days' gap     #\n","#       2. new_date 의 시작 부분 indi. value 는 np.nan 으로 채워질 거기 때문에 계산해야함    #\n","\n","df_count = droped_new_res_df.count()\n","len_missing = df_count.max() - df_count.min()\n","print(len_missing / 1440)\n","\n","#       3. \n","missing_sliced_df = droped_new_res_df.iloc[len_missing:]\n","df_count2 = missing_sliced_df.count()\n","# print(df_count2)\n","print((df_count2.max() - df_count2.min()))    # this value should be zero !\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"AY7E2_hTBsyM"},"outputs":[],"source":["# df_count2.index[df_count2.argmin()]\n","# missing_sliced_df.head(5)\n","\n","stay_missed = np.sum(pd.isnull(missing_sliced_df), axis=0)\n","print(stay_missed)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"p9yqewOw9g33"},"outputs":[],"source":["stay_missed_cols = stay_missed[stay_missed != 0].index\n","\n","for sm_col in stay_missed_cols:\n","  \n","  row_idx = np.argwhere(pd.isnull(missing_sliced_df[sm_col].values))\n","\n","  plt.figure(figsize=(3,3))\n","  plt.plot(row_idx)\n","  plt.ylim(0, len(missing_sliced_df))\n","  plt.title(sm_col)\n","\n","  plt.show()\n"]},{"cell_type":"markdown","source":["## legacy"],"metadata":{"id":"MSUY4nnku3s9"}},{"cell_type":"markdown","source":["### mv files"],"metadata":{"id":"epgS5Dksu-HX"}},{"cell_type":"code","source":["df_path = './candlestick_concated/survey_df_v2'\n","files_ = os.listdir(df_path)"],"metadata":{"id":"aJcVpEdrslA5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dirs = [file_ for file_ in files_ if not file_.endswith('.ftr')]\n","files = [file_ for file_ in files_ if file_.endswith('.ftr')]"],"metadata":{"id":"cEKyEYkotFDy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dirs"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IgM79tcxtPVZ","executionInfo":{"status":"ok","timestamp":1644111921194,"user_tz":-540,"elapsed":4,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"84305b35-eb52-49fc-d5fd-fdbc64cc8679"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['2022-01-10 ETHUSDT', '2022-01-10 ETHUSDT_all', '2022-02-04 SOLUSDT']"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["def move_fn(dir_, file_):\n","  src_path = os.path.join(df_path, file_)\n","  dst_path = os.path.join(df_path, dir_, file_)\n","  shutil.move(src_path, dst_path)\n","  print(\"moved to {}\".format(dst_path))\n","\n","_ = [move_fn('2022-01-10 ETHUSDT_all', file_) for file_ in files if 'eth'.upper() in file_]\n","# sols\n"],"metadata":{"id":"M767iRtwtRQP"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Ci_jUnNTZbm9"},"source":["### load data (old)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":22503,"status":"ok","timestamp":1638246127510,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"_bXyS2yrZYC6","outputId":"b24a8a66-48b1-42b5-aa79-63f5a8542bac"},"outputs":[{"name":"stdout","output_type":"stream","text":["['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr']\n","['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 LTCUSDT.ftr']\n","['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 ETHUSDT.ftr']\n","['2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr']\n","['2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-08-31 SUSHIUSDT.xlsx', '2021-08-31 CVCUSDT.xlsx', '2021-08-31 BTSUSDT.xlsx', '2021-08-31 HOTUSDT.xlsx', '2021-08-31 ZRXUSDT.xlsx', '2021-08-31 QTUMUSDT.xlsx', '2021-08-31 IOTAUSDT.xlsx', '2021-08-31 BTCBUSD.xlsx', '2021-08-31 WAVESUSDT.xlsx', '2021-08-31 ADAUSDT.xlsx', '2021-08-31 LITUSDT.xlsx', '2021-08-31 XTZUSDT.xlsx', '2021-08-31 BNBUSDT.xlsx', '2021-08-31 AKROUSDT.xlsx', '2021-08-31 HNTUSDT.xlsx', '2021-08-31 ETCUSDT.xlsx', '2021-08-31 XMRUSDT.xlsx', '2021-08-31 YFIUSDT.xlsx', '2021-08-31 ETHUSDT.xlsx', '2021-08-31 ALICEUSDT.xlsx', '2021-08-31 ALPHAUSDT.xlsx', '2021-08-31 SFPUSDT.xlsx', '2021-08-31 REEFUSDT.xlsx', '2021-08-31 BATUSDT.xlsx', '2021-08-31 DOGEUSDT.xlsx', '2021-08-31 TRXUSDT.xlsx', '2021-08-31 RLCUSDT.xlsx', '2021-08-31 BTCSTUSDT.xlsx', '2021-08-31 STORJUSDT.xlsx', '2021-08-31 SNXUSDT.xlsx', '2021-08-31 XLMUSDT.xlsx', '2021-08-31 NEOUSDT.xlsx', '2021-08-31 UNFIUSDT.xlsx', '2021-08-31 SANDUSDT.xlsx', '2021-08-31 DASHUSDT.xlsx', '2021-08-31 KAVAUSDT.xlsx', '2021-08-31 RUNEUSDT.xlsx', '2021-08-31 CTKUSDT.xlsx', '2021-08-31 LINKUSDT.xlsx', '2021-08-31 CELRUSDT.xlsx', '2021-08-31 RSRUSDT.xlsx', '2021-08-31 DGBUSDT.xlsx', '2021-08-31 SKLUSDT.xlsx', '2021-08-31 RENUSDT.xlsx', '2021-08-31 TOMOUSDT.xlsx', '2021-08-31 MTLUSDT.xlsx', '2021-08-31 LTCUSDT.xlsx', '2021-08-31 DODOUSDT.xlsx', '2021-08-31 EGLDUSDT.xlsx', '2021-08-31 KSMUSDT.xlsx', '2021-08-31 ONTUSDT.xlsx', '2021-08-31 VETUSDT.xlsx', '2021-08-31 TRBUSDT.xlsx', '2021-08-31 MANAUSDT.xlsx', '2021-08-31 COTIUSDT.xlsx', '2021-08-31 CHRUSDT.xlsx', '2021-08-31 ETHUSDT_210924.xlsx', '2021-08-31 BAKEUSDT.xlsx', '2021-08-31 GRTUSDT.xlsx', '2021-08-31 FLMUSDT.xlsx', '2021-08-31 EOSUSDT.xlsx', '2021-08-31 OGNUSDT.xlsx', '2021-08-31 SCUSDT.xlsx', '2021-08-31 BALUSDT.xlsx', '2021-08-31 STMXUSDT.xlsx', '2021-08-31 BTTUSDT.xlsx', '2021-08-31 LUNAUSDT.xlsx', '2021-08-31 DENTUSDT.xlsx', '2021-08-31 KNCUSDT.xlsx', '2021-08-31 SRMUSDT.xlsx', '2021-08-31 ENJUSDT.xlsx', '2021-08-31 ZENUSDT.xlsx', '2021-08-31 ATOMUSDT.xlsx', '2021-08-31 NEARUSDT.xlsx', '2021-08-31 BCHUSDT.xlsx', '2021-08-31 IOSTUSDT.xlsx', '2021-08-31 HBARUSDT.xlsx', '2021-08-31 ZECUSDT.xlsx', '2021-08-31 1000SHIBUSDT.xlsx', '2021-08-31 TLMUSDT.xlsx', '2021-08-31 BZRXUSDT.xlsx', '2021-08-31 ETHBUSD.xlsx', '2021-08-31 AAVEUSDT.xlsx', '2021-08-31 GTCUSDT.xlsx', '2021-08-31 ALGOUSDT.xlsx', '2021-08-31 ICPUSDT.xlsx', '2021-08-31 BTCUSDT_210924.xlsx', '2021-08-31 LRCUSDT.xlsx', '2021-08-31 AVAXUSDT.xlsx', '2021-08-31 MATICUSDT.xlsx', '2021-08-31 1INCHUSDT.xlsx', '2021-08-31 MKRUSDT.xlsx', '2021-08-31 THETAUSDT.xlsx', '2021-08-31 UNIUSDT.xlsx', '2021-08-31 LINAUSDT.xlsx', '2021-08-31 RVNUSDT.xlsx', '2021-08-31 FILUSDT.xlsx', '2021-08-31 NKNUSDT.xlsx', '2021-08-31 DEFIUSDT.xlsx', '2021-08-31 COMPUSDT.xlsx', '2021-08-31 BTCDOMUSDT.xlsx', '2021-08-31 SOLUSDT.xlsx', '2021-08-31 BTCUSDT.xlsx', '2021-08-31 OMGUSDT.xlsx', '2021-08-31 ICXUSDT.xlsx', '2021-08-31 BLZUSDT.xlsx', '2021-08-31 FTMUSDT.xlsx', '2021-08-31 YFIIUSDT.xlsx', '2021-08-31 KEEPUSDT.xlsx', '2021-08-31 BANDUSDT.xlsx', '2021-08-31 XRPUSDT.xlsx', '2021-08-31 SXPUSDT.xlsx', '2021-08-31 CRVUSDT.xlsx', '2021-08-31 BELUSDT.xlsx', '2021-08-31 DOTUSDT.xlsx', '2021-08-31 XEMUSDT.xlsx', '2021-08-31 ONEUSDT.xlsx', '2021-08-31 ZILUSDT.xlsx', '2021-08-31 AXSUSDT.xlsx', '2021-08-31 OCEANUSDT.xlsx', '2021-08-31 CHZUSDT.xlsx', '2021-08-31 ANKRUSDT.xlsx', '2021-08-31 SUSHIUSDT_res_dfs.pkl', '2021-07-01 ADAUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr']\n","['2021-07-01 BTCUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr']\n","['2021-02-07 BTC.xlsx', '2021-02-07 ETH.xlsx', '2021-02-11 BCHUSDT.xlsx', '2021-02-11 XRPUSDT.xlsx', '2021-02-11 EOSUSDT.xlsx', '2021-02-11 LTCUSDT.xlsx', '2021-02-11 ETCUSDT.xlsx', '2021-02-11 LINKUSDT.xlsx', '2021-02-11 XLMUSDT.xlsx', '2021-02-11 ADAUSDT.xlsx', '2021-02-11 XMRUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr']\n","['2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx']\n"]}],"source":["interval = '1m'\n","date_path = './candlestick_concated/%s/quant_v2/' % interval\n","file_list = os.listdir(date_path)\n","print((file_list))\n","\n","interval2 = '3m'\n","date_path2 = './candlestick_concated/%s/quant_v2/' % interval2\n","file_list2 = os.listdir(date_path2)\n","print((file_list2))\n","\n","interval3 = '5m'\n","date_path3 = './candlestick_concated/%s/quant_v2/' % interval3\n","file_list3 = os.listdir(date_path3)\n","print((file_list3))\n","\n","interval4 = '15m'\n","date_path4 = './candlestick_concated/%s/quant_v2/' % interval4\n","file_list4 = os.listdir(date_path4)\n","print((file_list4))\n","\n","interval5 = '30m'\n","date_path5 = './candlestick_concated/%s/quant_v2/' % interval5\n","file_list5 = os.listdir(date_path5)\n","print((file_list5))\n","\n","interval6 = '1h'\n","date_path6 = './candlestick_concated/%s/quant_v2/' % interval6\n","file_list6 = os.listdir(date_path6)\n","print((file_list6))\n","\n","interval7 = '4h'\n","date_path7 = './candlestick_concated/%s/quant_v2/' % interval7\n","file_list7 = os.listdir(date_path7)\n","print((file_list7))\n","\n","interval8 = '1d'\n","date_path8 = './candlestick_concated/%s/quant_v2/' % interval8\n","file_list8 = os.listdir(date_path8)\n","print((file_list8))"]},{"cell_type":"markdown","metadata":{"id":"M8-EChy0VsDr"},"source":["## cudf"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":414,"status":"ok","timestamp":1638754008241,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"b09qAb1sVtRP","outputId":"3a824202-064a-4544-b791-ffc777bb3f9c"},"outputs":[{"name":"stdout","output_type":"stream","text":["usage: conda [-h] [-V] command ...\n","conda: error: unrecognized arguments: -t=/content/notebooks\n"]}],"source":["# !conda install -c rapidsai-nightly -c nvidia -c numba -c conda-forge \\\n","#     cudf python=3.7 cudatoolkit=11.1 -t=$nb_path"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":413,"status":"ok","timestamp":1638754715310,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"Jnz6i7ZqRnb0","outputId":"207bc57b-a17a-4f67-fb26-24e46e2c6e26"},"outputs":[{"name":"stdout","output_type":"stream","text":["***********************************************************************\n","Woo! Your instance has the right kind of GPU, a Tesla P100-PCIE-16GB!\n","***********************************************************************\n","\n"]}],"source":["# !git clone https://github.com/rapidsai/rapidsai-csp-utils.git\n","!python rapidsai-csp-utils/colab/env-check.py"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4sKA_9Dbg4s2"},"outputs":[],"source":["# This will update the Colab environment and restart the kernel.  Don't run the next cell until you see the session crash.\n","!bash rapidsai-csp-utils/colab/update_gcc.sh\n","import os\n","os._exit(00)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"d1C4pNiBhYHX"},"outputs":[],"source":["# This will install CondaColab.  This will restart your kernel one last time.  Run this cell by itself and only run the next cell once you see the session crash.\n","import condacolab\n","condacolab.install()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":414,"status":"ok","timestamp":1638754863073,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"iGx3ACTvZqck","outputId":"e8379cc4-c325-4fe0-ac46-5fbbd7d38829"},"outputs":[{"name":"stdout","output_type":"stream","text":["✨🍰✨ Everything looks OK!\n"]}],"source":["# you can now run the rest of the cells as normal\n","import condacolab\n","condacolab.check()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oR8s7U8c7C28","outputId":"22be2731-fae1-45fc-f310-e48f60774bb2"},"outputs":[{"name":"stdout","output_type":"stream","text":["Installing RAPIDS Stable 21.10\n","Starting the RAPIDS install on Colab.  This will take about 15 minutes.\n","Collecting package metadata (current_repodata.json): ...working... done\n","Solving environment: ...working... WARNING conda.core.solve:_add_specs(611): pinned spec cudatoolkit=11.1 conflicts with explicit specs.  Overriding pinned spec.\n","failed with initial frozen solve. Retrying with flexible solve.\n","Solving environment: ...working... WARNING conda.core.solve:_add_specs(611): pinned spec cudatoolkit=11.1 conflicts with explicit specs.  Overriding pinned spec.\n","failed with repodata from current_repodata.json, will retry with next repodata source.\n","Collecting package metadata (repodata.json): ...working... done\n"]}],"source":["# Installing RAPIDS is now 'python rapidsai-csp-utils/colab/install_rapids.py <release> <packages>'\n","# The <release> options are 'stable' and 'nightly'.  Leaving it blank or adding any other words will default to stable.\n","# The <packages> option are default blank or 'core'.  By default, we install RAPIDSAI and BlazingSQL.  The 'core' option will install only RAPIDSAI and not include BlazingSQL, \n","!python rapidsai-csp-utils/colab/install_rapids.py stable\n","import os\n","os.environ['NUMBAPRO_NVVM'] = '/usr/local/cuda/nvvm/lib64/libnvvm.so'\n","os.environ['NUMBAPRO_LIBDEVICE'] = '/usr/local/cuda/nvvm/libdevice/'\n","os.environ['CONDA_PREFIX'] = '/usr/local'"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kWsxi4ZpKtGt"},"outputs":[],"source":["import shutil\n","import sys\n","\n","colab_env = \"/usr/lib\"\n","\n","rapids_path = os.path.join(current_path, \"rapidsai-csp-utils/lib\")\n","rapids_libs = os.listdir(rapids_path)\n","print(rapids_libs)\n","# break\n","\n","for lib_ in rapids_libs:\n","  try:\n","    shutil.copy(os.path.join(rapids_path, lib_), os.path.join(colab_env, lib_))\n","    sys.path.append(os.path.join(colab_env, lib_))\n","    print(\"copied to\" + os.path.join(colab_env, lib_))\n","  except Exception as e:\n","    print(e)"]},{"cell_type":"markdown","metadata":{"id":"Iy76iO7gztne"},"source":["## move legacy files"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hMRht32Czwry"},"outputs":[],"source":["# print()\n","cur_dir_list = os.listdir('.')\n","for f in cur_dir_list:\n","  if 'legacy' in f :\n","    # print(f)\n","    if os.path.isdir(current_path + f,):\n","      continue\n","\n","    shutil.move(current_path + f, current_path + 'legacy/' + f)\n","    print(\"moved to\" + current_path + 'legacy/' +  f)"]},{"cell_type":"markdown","metadata":{"id":"5duWn8t4BRyv"},"source":["# IDE platform\n"]},{"cell_type":"markdown","metadata":{"id":"6HOjnZjSgzk1"},"source":["## load ftr_list"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":9691,"status":"ok","timestamp":1648125163510,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"7FPBG5Qqg2jB","outputId":"9b2518d2-5499-42c4-f68d-2d34f7da4b0e"},"outputs":[{"output_type":"stream","name":"stdout","text":["['2022-02-17 ETHUSDT.ftr']\n","2022-02-17 ETHUSDT.ftr loaded !\n","load res_df_ elapsed time : 8.302744150161743\n"]}],"source":["save_path = './candlestick_concated/res_df/'\n","\n","dir_path = \"bb4h_backi2\"\n","dir_path = \"bb1d_backi2\"\n","date = \"2022-01-10\"\n","date = \"2022-02-17\"\n","\n","ftr_path = os.path.join(save_path, dir_path, \"concat/cum\", date)\n","\n","# ------ load ftr list ------ #\n","ftr_list = [s for s in os.listdir(ftr_path) if \"ftr\" in s if date in s]\n","# ftr_list = [s for s in os.listdir(os.path.join(save_path, dir_path)) if \"ftr\" in s if date in s]\n","print(ftr_list)\n","\n","start_0 = time.time()\n","key = ftr_list[0]  # tempoaray use single key\n","res_df_ = pd.read_feather(os.path.join(ftr_path, key), columns=None, use_threads=True).set_index(\"index\")\n","# print(res_df_.head())\n","print(key, \"loaded !\")\n","print(\"load res_df_ elapsed time :\", time.time() - start_0)"]},{"cell_type":"code","source":["res_df_.dtypes"],"metadata":{"id":"RQH_l4opEh_O","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648125333058,"user_tz":-540,"elapsed":381,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"c716bc0d-58ed-4b51-aba9-9ba83d397886"},"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["open               float64\n","high               float64\n","low                float64\n","close              float64\n","volume             float64\n","short_open_3_1        int8\n","long_open_3_1         int8\n","short_close_3_1       int8\n","long_close_3_1        int8\n","open_15T           float64\n","high_15T           float64\n","low_15T            float64\n","close_15T          float64\n","open_H             float64\n","high_H             float64\n","low_H              float64\n","close_H            float64\n","open_4H            float64\n","high_4H            float64\n","low_4H             float64\n","close_4H           float64\n","range_15T          float64\n","rel_ratio_15T      float64\n","norm_max           float64\n","norm_min           float64\n","abs_ratio_15T      float64\n","rsi_T              float64\n","rsi_5T             float64\n","ema_5T             float64\n","dc_upper_T         float64\n","dc_lower_T         float64\n","dc_base_T          float64\n","dc_upper_3T        float64\n","dc_lower_3T        float64\n","dc_base_3T         float64\n","dc_upper_5T        float64\n","dc_lower_5T        float64\n","dc_base_5T         float64\n","dc_upper_15T       float64\n","dc_lower_15T       float64\n","dc_base_15T        float64\n","dc_upper_30T       float64\n","dc_lower_30T       float64\n","dc_base_30T        float64\n","dc_upper_H         float64\n","dc_lower_H         float64\n","dc_base_H          float64\n","dc_upper_4H        float64\n","dc_lower_4H        float64\n","dc_base_4H         float64\n","dc_upper_D         float64\n","dc_lower_D         float64\n","dc_base_D          float64\n","bb_upper_T         float64\n","bb_lower_T         float64\n","bb_upper_3T        float64\n","bb_lower_3T        float64\n","bb_upper_5T        float64\n","bb_lower_5T        float64\n","bb_upper_15T       float64\n","bb_lower_15T       float64\n","bb_upper_30T       float64\n","bb_lower_30T       float64\n","bb_upper_H         float64\n","bb_lower_H         float64\n","bb_upper_4H        float64\n","bb_lower_4H        float64\n","bb_upper_D         float64\n","bb_lower_D         float64\n","haopen             float64\n","hahigh             float64\n","halow              float64\n","haclose            float64\n","sar_T              float64\n","sar_uptrend_T      float64\n","sar_3T             float64\n","sar_uptrend_3T     float64\n","sar_5T             float64\n","sar_uptrend_5T     float64\n","sar_15T            float64\n","sar_uptrend_15T    float64\n","sar_30T            float64\n","sar_uptrend_30T    float64\n","norm_close_15      float64\n","resi_T             float64\n","sup_T              float64\n","open_5T            float64\n","high_5T            float64\n","low_5T             float64\n","close_5T           float64\n","short_base         float64\n","long_base          float64\n","short_baseT        float64\n","long_baseT         float64\n","short_base5T       float64\n","long_base5T        float64\n","short_baseH        float64\n","long_baseH         float64\n","dc_upper_T20       float64\n","dc_lower_T20       float64\n","dc_upper_T40       float64\n","dc_lower_T40       float64\n","short_base_T       float64\n","long_base_T        float64\n","dc_upper_5T20      float64\n","dc_lower_5T20      float64\n","dc_upper_5T40      float64\n","dc_lower_5T40      float64\n","short_base_5T      float64\n","long_base_5T       float64\n","dc_upper_H20       float64\n","dc_lower_H20       float64\n","dc_upper_H40       float64\n","dc_lower_H40       float64\n","short_base_H       float64\n","long_base_H        float64\n","rel_ratio_5T       float64\n","abs_ratio_5T       float64\n","long_bir_5T        float64\n","short_bir_5T       float64\n","dtype: object"]},"metadata":{},"execution_count":18}]},{"cell_type":"markdown","source":["### edit cols"],"metadata":{"id":"x2yj2SwAXDLp"}},{"cell_type":"code","source":["col_list = list(res_df_.columns)\n","# # [col_ for col_ in col_list if 'score' in col_]\n","\n","# ------ drop ------ #\n","res_df_.drop([col_ for col_ in col_list if '20' in col_], inplace=True, axis=1)\n","res_df_.drop([col_ for col_ in col_list if '40' in col_], inplace=True, axis=1)\n","\n","# ------ replace ------ #\n","# for c_i, col_ in enumerate(col_list):\n","#   # if 'eTa_5T' in col_:\n","#   # if col_[-1] in ['m', 'h', 'd', 'H'] and '_' in col_:eTa_5T\n","#   if col_[0] in ['h'] and '_' in col_:\n","#     # col_list[c_i] = col_.replace('m', 'T').replace('h', 'H').replace('1T', 'T')\n","#     # col_list[c_i] = col_.replace('1d', 'D')\n","#     # col_list[c_i] = col_.replace('eTa_5T', 'ema_5T')\n","#     col_list[c_i] = col_list[c_i][1:]\n","#     # print(col_list[c_i][0])\n","# res_df_.columns = col_list\n","# # col_list[-2:] = ['resi_T', 'sup_T']"],"metadata":{"id":"x9wkWw15XCAm"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### volume_profile"],"metadata":{"id":"EOXQbXixiQcK"}},{"cell_type":"code","source":["session_df = res_df_.iloc[-1440:] # 0.159 -> 0.024 (14400 -> 1440)\n","volume = session_df['volume'].to_numpy()\n","close = session_df['close'].to_numpy()\n","# px.histogram(session_df, x='volume', y='close', nbins=150, orientation='h').show()"],"metadata":{"id":"7pFuazxpgx9B"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["kde_factor = 0.05\n","num_samples = 100\n","\n","start_0 = time.time()\n","kde = stats.gaussian_kde(close,weights=volume,bw_method=kde_factor)\n","kdx = np.linspace(close.min(),close.max(),num_samples)\n","kdy = kde(kdx)\n","ticks_per_sample = (kdx.max() - kdx.min()) / num_samples\n","print(\"ticks_per_sample :\", ticks_per_sample)  # sample 당 가격\n","print(\"kdy elapsed_time :\", time.time() - start_0)"],"metadata":{"id":"SoPJkiyKiXLM","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1647259514394,"user_tz":-540,"elapsed":332,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"2e1d515d-7caf-4f82-b53b-a17f3e1d9ab9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["ticks_per_sample : 1.3911999999999989\n","kdy elapsed_time : 0.021226167678833008\n"]}]},{"cell_type":"code","source":["peaks,_ = signal.find_peaks(kdy)\n","pkx = kdx[peaks]\n","pky = kdy[peaks]\n","\n","plt.figure(figsize=(10,5))\n","# plt.hist(close, bins=num_samples, weights=volume, alpha=.8, color='#1592e6')\n","# plt.plot(kdx, kdy, color='white')\n","# plt.plot(pkx, pky, 'bo', color='yellow')\n","plt.plot(kdy, kdx, color='white')\n","plt.plot(pky, pkx, 'bo', color='yellow')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":320},"id":"mK2jBddAxJ14","executionInfo":{"status":"ok","timestamp":1647263622450,"user_tz":-540,"elapsed":362,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"74d7a810-1375-4db5-f74e-3cf58e0a0662"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 720x360 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["pkx"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"a8tpQZCy0SO1","executionInfo":{"status":"ok","timestamp":1647260132868,"user_tz":-540,"elapsed":326,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"24ee984e-db8d-4083-97a7-4d3ebb536d38"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([3059.93252525, 3068.3640404 , 3082.41656566, 3093.65858586, 3104.90060606, 3120.35838384, 3130.19515152, 3140.03191919, 3158.30020202, 3168.1369697 , 3176.56848485])"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["# ------ vp 의 indi. 화가 필요함 -> point 설정 ------ #\n","# 1. 4 level 은 미리 만들어놓는게 맞는걸로 보임 -> 추종하는 function 이 많음 (utils_tr, ep_out ...)\n","#   a. 4 level 에 국한하는게 아니라, 모든 peaks 에 대해 levels 설정\n","#   b. 각 session 별로 peak_list 가 주어질 것\n","#     i. prev_data 사용해야하는점 주의 (session vp 는 future_data)"],"metadata":{"id":"gfA946s8UgS0"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### legacy"],"metadata":{"id":"1MNVIExLULhJ"}},{"cell_type":"code","source":["# import plotly.express as px\n","# import plotly.graph_objects as go\n","\n","def get_dist_plot(c, v, kx, ky):\n","    fig = go.Figure()\n","    fig.add_trace(go.Histogram(name='Vol Profile', x=c, y=v, nbinsx=150, \n","                               histfunc='sum', histnorm='probability density',\n","                               marker_color='#B0C4DE'))\n","    fig.add_trace(go.Scatter(name='KDE', x=kx, y=ky, mode='lines', marker_color='#D2691E'))    \n","\n","    peaks,_ = signal.find_peaks(kdy)\n","    pkx = kdx[peaks]\n","    pky = kdy[peaks]\n","    pk_marker_args=dict(size=10, color='black')\n","    fig.add_trace(go.Scatter(name=\"Peaks\", x=pkx, y=pky, mode='markers', marker=pk_marker_args))\n","    fig.show()\n","\n","    return fig"],"metadata":{"id":"ropzIp0wUPAA"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##### prominence_info"],"metadata":{"id":"3T-9FwWFXR4f"}},{"cell_type":"code","source":["start_0 = time.time()\n","min_prom = kdy.max() * 0.0\n","pipsize = 0.01\n","max_width_pips = 20\n","# width_range=(1, max_width_pips * pipsize / ticks_per_sample)\n","width_range= max_width_pips * pipsize / ticks_per_sample\n","peaks, peak_props = signal.find_peaks(kdy, prominence=min_prom, width=width_range)\n","\n","peak_x = kdx[peaks]\n","peak_y = kdy[peaks]\n","# ------ prominence lines ------ #\n","left_base = peak_props['left_bases']\n","right_base = peak_props['right_bases']\n","line_x = peak_x\n","line_y0 = peak_y\n","line_y1 = peak_y # - peak_props['prominences']\n","print(\"prom_line elapsed_time :\", time.time() - start_0)\n","\n","\n","for x, y0, y1 in zip(line_x, line_y0, line_y1):\n","    fig.add_shape(type='line',\n","        xref='x', yref='y',\n","        # x0=x, y0=y0, x1=x, y1=y1,\n","        x0=x, y0=0, x1=x, y1=y1,\n","        line=dict(\n","            color='red',\n","            width=2,\n","        )\n","    )\n","\n","# ------ width ------ #\n","left_ips = peak_props['left_ips']\n","right_ips = peak_props['right_ips']\n","# width_x0 = kdx.min() + (left_ips * ticks_per_sample)\n","# width_x1 = kdx.min() + (right_ips * ticks_per_sample)\n","width_x0 = kdx.min() + (left_base * ticks_per_sample)\n","width_x1 = kdx.min() + (right_base * ticks_per_sample)\n","\n","# int_from = kdx.min() + (left_base * ticks_per_sample)\n","# int_to = kdx.min() + (right_base * ticks_per_sample)\n","# [kde.integrate_box_1d(x0, x1) for x0, x1 in zip(int_from, int_to)]\n","\n","width_y = peak_props['width_heights']\n","\n","for x0, x1, y in zip(width_x0, width_x1, width_y):\n","    fig.add_shape(type='line',\n","        xref='x', yref='y',\n","        x0=x0, y0=y, x1=x1, y1=y,\n","        line=dict(\n","            color='red',\n","            width=2,\n","        )\n","    )\n","fig.show()"],"metadata":{"id":"RmBt2agljClE","colab":{"base_uri":"https://localhost:8080/","height":558},"executionInfo":{"status":"ok","timestamp":1647183981567,"user_tz":-540,"elapsed":781,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"c61b0e13-ab0a-4e56-8a44-8bc480ec31cc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["prom_line elapsed_time : 0.0005087852478027344\n"]},{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script src=\"https://cdn.plot.ly/plotly-2.8.3.min.js\"></script>                <div id=\"f0efc821-18d5-43b5-ad6e-1133ea0ad873\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"f0efc821-18d5-43b5-ad6e-1133ea0ad873\")) {                    Plotly.newPlot(                        \"f0efc821-18d5-43b5-ad6e-1133ea0ad873\",                        [{\"histfunc\":\"sum\",\"histnorm\":\"probability density\",\"marker\":{\"color\":\"#B0C4DE\"},\"name\":\"Vol Profile\",\"nbinsx\":150,\"x\":[3150.12,3150.91,3150.04,3152.76,3150.22,3148.21,3148.25,3148.3,3142.41,3145.56,3144.02,3145.11,3146.27,3142.97,3140.6,3142.02,3142.8,3141.34,3138.28,3138.09,3137.04,3135.5,3133.32,3134.84,3136.27,3137.1,3137.05,3139.74,3138.4,3138.17,3139.49,3141.68,3142.52,3143.14,3143.12,3142.4,3144.17,3142.7,3140.72,3138.89,3142.1,3140.96,3139.76,3138.51,3140.37,3139.0,3138.84,3138.57,3140.62,3143.09,3141.71,3140.05,3139.85,3139.12,3139.9,3139.24,3139.49,3138.88,3138.14,3136.66,3137.03,3138.04,3140.84,3138.27,3137.31,3139.03,3141.06,3141.5,3139.41,3137.62,3141.5,3142.8,3142.24,3143.42,3142.55,3143.9,3146.54,3146.38,3142.34,3144.01,3145.79,3147.35,3146.06,3146.75,3147.37,3153.62,3152.82,3154.53,3153.41,3154.3,3153.01,3156.01,3157.57,3157.36,3160.43,3159.0,3163.78,3164.2,3163.97,3168.45,3170.03,3169.46,3173.73,3169.48,3168.54,3167.57,3166.99,3164.73,3164.25,3166.33,3162.57,3156.97,3159.44,3159.19,3158.11,3156.97,3158.08,3158.32,3158.99,3157.01,3154.91,3147.89,3146.35,3142.36,3142.62,3138.81,3144.68,3143.32,3140.89,3140.16,3139.74,3140.33,3143.48,3145.12,3145.42,3147.13,3143.31,3144.88,3145.12,3143.89,3144.75,3143.91,3140.69,3141.35,3141.59,3141.62,3141.51,3141.96,3142.09,3140.61,3137.55,3138.18,3140.28,3139.39,3139.2,3139.85,3137.92,3138.08,3136.42,3134.93,3135.14,3133.15,3135.12,3133.37,3134.51,3131.06,3128.0,3126.97,3116.7,3122.46,3122.06,3118.8,3115.48,3119.5,3120.88,3110.75,3109.43,3107.1,3111.54,3107.5,3108.74,3111.3,3113.32,3115.38,3118.54,3115.27,3118.6,3120.1,3119.4,3119.35,3123.69,3123.54,3121.8,3121.82,3119.9,3122.01,3122.29,3119.64,3119.91,3118.67,3118.66,3119.45,3120.43,3122.38,3120.43,3121.94,3123.03,3123.6,3121.88,3123.81,3123.85,3121.51,3121.8,3122.29,3123.76,3127.99,3131.35,3131.12,3131.07,3132.76,3131.57,3131.8,3130.61,3134.68,3134.39,3132.91,3130.4,3129.86,3129.9,3129.38,3128.39,3125.57,3124.03,3123.68,3125.42,3125.98,3128.4,3130.98,3128.95,3129.26,3132.05,3131.17,3128.56,3126.45,3127.34,3128.33,3126.96,3128.84,3128.45,3128.34,3128.84,3126.09,3125.6,3125.95,3124.5,3122.44,3122.97,3128.29,3126.43,3127.98,3131.71,3132.68,3130.7,3129.63,3130.04,3129.68,3129.74,3129.36,3129.78,3128.6,3128.87,3130.34,3129.71,3127.47,3129.81,3129.16,3128.41,3126.57,3125.42,3128.63,3129.77,3130.9,3131.42,3129.66,3132.1,3130.24,3133.36,3138.65,3141.3,3144.9,3140.63,3141.08,3139.72,3142.67,3141.99,3140.43,3139.04,3134.85,3133.34,3133.14,3136.4,3138.89,3139.59,3143.64,3140.9,3140.38,3141.76,3140.14,3140.58,3137.29,3138.28,3138.27,3137.57,3139.11,3138.77,3138.93,3139.13,3139.57,3139.76,3141.02,3138.46,3138.77,3139.38,3135.77,3135.49,3136.19,3134.07,3135.5,3134.59,3134.37,3137.84,3139.81,3140.38,3143.15,3142.58,3143.12,3139.01,3137.68,3137.86,3137.6,3136.3,3136.34,3134.66,3136.0,3135.49,3133.83,3132.57,3127.5,3127.82,3130.61,3132.01,3126.05,3128.08,3127.75,3127.18,3128.5,3128.32,3129.79,3128.02,3129.28,3127.92,3129.56,3130.85,3131.61,3133.9,3133.36,3135.98,3136.89,3136.05,3138.23,3137.59,3139.65,3141.26,3140.09,3139.73,3139.13,3140.0,3138.28,3139.07,3140.15,3140.64,3141.14,3140.89,3141.56,3144.82,3146.11,3146.92,3147.37,3148.01,3148.11,3153.52,3153.63,3152.2,3145.75,3149.2,3150.38,3152.32,3148.33,3149.53,3151.03,3149.0,3148.97,3148.26,3148.09,3149.48,3150.14,3153.62,3154.73,3153.73,3154.58,3156.77,3157.02,3157.56,3159.21,3157.99,3157.28,3158.24,3157.75,3153.62,3156.32,3155.98,3156.09,3153.36,3154.85,3153.7,3153.26,3153.92,3152.18,3154.72,3153.76,3151.32,3147.99,3143.63,3142.84,3142.01,3142.34,3141.19,3144.4,3143.24,3146.07,3146.42,3142.71,3145.16,3144.34,3142.69,3139.69,3137.0,3139.75,3138.36,3137.76,3138.86,3141.21,3141.38,3147.22,3146.36,3145.32,3145.22,3143.33,3142.05,3138.36,3136.89,3138.59,3137.22,3138.73,3140.14,3140.55,3143.65,3142.01,3142.94,3141.82,3142.27,3142.38,3141.33,3139.54,3140.53,3141.91,3143.98,3145.27,3145.56,3145.8,3146.38,3146.33,3146.59,3148.72,3149.48,3149.99,3149.19,3147.89,3145.9,3144.89,3143.99,3144.38,3141.47,3141.26,3134.83,3136.75,3135.49,3137.49,3136.01,3138.03,3137.49,3135.5,3133.94,3131.24,3128.72,3131.32,3129.42,3129.77,3126.83,3127.0,3124.12,3125.0,3127.18,3130.0,3129.72,3129.07,3129.68,3129.97,3129.39,3130.92,3132.75,3132.92,3129.99,3133.15,3130.69,3132.15,3134.37,3132.81,3131.7,3130.61,3128.61,3128.99,3124.84,3116.56,3116.76,3116.92,3118.9,3119.05,3118.74,3118.24,3121.88,3121.41,3120.63,3119.45,3119.16,3117.66,3125.21,3122.01,3122.3,3122.27,3123.6,3123.71,3124.0,3126.14,3128.01,3125.94,3126.44,3128.0,3128.04,3128.5,3131.12,3129.44,3129.36,3130.58,3130.58,3130.74,3129.8,3130.8,3130.21,3130.0,3132.5,3132.77,3130.01,3138.72,3139.25,3138.11,3136.77,3136.71,3134.59,3135.98,3133.81,3131.4,3131.16,3133.29,3130.61,3132.0,3132.44,3133.58,3134.18,3133.44,3133.33,3135.37,3134.42,3132.16,3132.2,3130.93,3131.07,3128.89,3127.34,3129.46,3129.77,3130.33,3131.76,3132.28,3130.06,3132.43,3132.6,3134.33,3138.55,3138.49,3137.34,3135.68,3135.12,3133.0,3133.35,3135.1,3135.72,3135.45,3135.74,3134.31,3135.54,3135.0,3134.0,3135.5,3135.47,3138.57,3137.43,3137.26,3137.68,3134.65,3133.04,3134.23,3134.77,3137.77,3138.53,3137.99,3140.51,3141.66,3137.9,3130.11,3125.74,3126.7,3127.43,3126.03,3120.96,3121.81,3124.17,3124.31,3124.54,3125.11,3125.71,3126.3,3128.36,3129.59,3129.72,3130.19,3131.21,3130.5,3130.07,3129.81,3131.5,3134.35,3133.15,3135.09,3136.18,3132.93,3122.75,3122.1,3122.03,3121.84,3121.06,3118.65,3120.18,3119.31,3112.84,3117.62,3114.39,3114.41,3116.04,3117.45,3119.3,3120.57,3120.72,3121.07,3116.17,3110.8,3111.87,3110.61,3115.47,3117.35,3117.49,3117.32,3114.9,3112.16,3112.35,3108.01,3111.41,3109.76,3113.55,3118.27,3120.49,3119.38,3121.0,3119.82,3119.61,3118.49,3116.15,3116.56,3117.76,3115.36,3117.85,3117.1,3118.16,3118.6,3117.1,3114.79,3114.07,3116.16,3113.75,3112.4,3104.99,3118.68,3114.45,3103.37,3094.09,3103.67,3101.78,3098.48,3101.08,3101.52,3096.14,3095.06,3094.52,3093.74,3089.7,3094.76,3094.28,3082.9,3075.29,3071.6,3066.96,3068.99,3068.43,3072.83,3074.19,3068.47,3066.49,3068.45,3071.08,3072.8,3068.44,3067.71,3073.29,3073.62,3075.79,3074.76,3079.0,3077.27,3072.94,3073.42,3070.62,3070.97,3075.98,3073.64,3070.63,3073.96,3074.48,3076.25,3074.55,3072.14,3068.01,3068.44,3057.23,3061.75,3060.41,3060.23,3055.43,3062.96,3064.42,3063.7,3057.99,3057.97,3065.99,3069.05,3073.19,3068.84,3067.58,3067.45,3064.78,3066.87,3067.5,3068.74,3067.5,3070.61,3059.89,3062.56,3066.56,3065.24,3061.41,3060.9,3053.06,3061.95,3059.49,3056.27,3059.09,3059.6,3056.32,3057.96,3058.97,3061.6,3066.01,3068.68,3068.43,3070.66,3072.53,3070.4,3073.28,3072.86,3070.68,3067.65,3066.0,3066.25,3070.21,3071.52,3068.61,3064.15,3064.26,3063.48,3062.8,3060.3,3059.85,3060.47,3064.84,3065.03,3066.71,3066.55,3066.41,3065.24,3067.81,3066.93,3065.0,3067.85,3060.14,3062.51,3061.39,3064.93,3064.94,3066.09,3066.49,3067.75,3070.38,3067.84,3067.51,3072.07,3071.31,3070.05,3068.95,3068.57,3067.73,3068.88,3067.87,3067.89,3065.01,3066.0,3069.24,3065.3,3063.52,3063.06,3064.11,3064.99,3063.19,3062.69,3066.9,3066.87,3065.42,3058.47,3058.2,3068.7,3065.56,3065.52,3059.04,3060.61,3059.57,3058.08,3055.2,3053.72,3060.26,3055.86,3045.88,3046.6,3051.18,3052.99,3057.9,3056.38,3059.4,3061.48,3061.15,3064.36,3065.77,3066.35,3066.8,3067.68,3068.0,3065.05,3063.01,3066.42,3066.16,3064.8,3067.89,3066.3,3068.58,3064.81,3065.74,3064.23,3065.42,3070.43,3069.65,3070.48,3070.57,3073.44,3078.3,3082.89,3079.01,3080.76,3079.67,3082.0,3081.56,3082.01,3081.24,3078.61,3080.11,3080.95,3080.03,3080.65,3079.97,3078.86,3078.5,3078.6,3077.34,3077.0,3076.39,3076.45,3077.45,3076.23,3072.22,3073.67,3079.31,3077.21,3075.68,3076.91,3078.2,3075.92,3077.67,3076.33,3075.14,3076.47,3077.04,3080.69,3079.8,3080.33,3075.65,3074.66,3073.05,3070.38,3067.96,3068.78,3067.92,3069.26,3069.37,3070.76,3068.12,3069.49,3069.98,3071.78,3070.88,3068.71,3067.04,3069.34,3070.99,3070.39,3069.63,3068.6,3068.89,3070.08,3069.26,3069.57,3069.72,3069.53,3067.99,3069.23,3070.93,3071.33,3068.33,3066.84,3066.23,3066.76,3068.17,3070.0,3072.0,3075.66,3073.9,3073.99,3074.66,3074.0,3076.62,3077.82,3076.01,3076.18,3075.52,3075.42,3075.01,3075.67,3079.55,3078.46,3082.28,3080.74,3081.27,3083.38,3084.49,3086.42,3084.9,3086.53,3085.27,3084.7,3084.08,3084.82,3086.99,3092.0,3089.49,3089.26,3084.07,3084.44,3084.8,3083.55,3082.59,3082.36,3084.65,3086.97,3085.67,3085.43,3088.82,3089.81,3091.81,3093.96,3092.59,3093.58,3093.74,3092.61,3091.64,3091.26,3113.47,3104.88,3092.36,3101.44,3107.88,3113.58,3119.86,3128.34,3133.07,3128.34,3123.1,3129.07,3122.38,3127.43,3126.59,3132.79,3137.33,3143.07,3145.41,3147.86,3148.82,3157.67,3157.57,3160.7,3160.01,3163.6,3172.63,3171.77,3174.38,3176.44,3178.06,3179.99,3185.0,3176.75,3171.53,3179.12,3176.52,3168.9,3168.72,3170.03,3168.15,3165.58,3166.83,3167.56,3161.34,3162.78,3167.67,3162.8,3157.67,3155.79,3157.92,3161.37,3163.06,3165.11,3163.45,3164.45,3166.86,3166.61,3165.0,3167.59,3167.45,3164.59,3167.05,3172.29,3176.49,3170.87,3166.5,3165.51,3165.58,3164.96,3165.19,3161.59,3165.09,3162.72,3163.97,3162.62,3165.19,3165.77,3163.55,3173.99,3171.18,3170.87,3168.34,3169.49,3167.69,3169.72,3166.89,3168.42,3166.68,3168.84,3165.83,3162.55,3159.17,3160.93,3162.0,3160.83,3158.69,3159.99,3159.9,3159.88,3160.02,3158.98,3160.0,3158.01,3159.2,3158.6,3158.71,3156.25,3157.2,3156.77,3156.91,3156.6,3156.55,3153.94,3152.29,3151.49,3151.41,3146.89,3148.18,3147.2,3147.17,3147.89,3149.31,3151.59,3156.4,3153.84,3155.3,3155.23,3156.03,3156.24,3155.61,3158.4,3155.05,3155.38,3152.34,3152.18,3153.34,3152.91,3153.99,3151.52,3149.21,3152.48,3151.63,3150.9,3149.75,3148.0,3148.25,3149.4,3149.7,3148.41,3147.65,3146.06,3147.06,3147.41,3146.72,3145.51,3142.17,3142.8,3140.42,3139.24,3140.69,3140.67,3139.22,3136.44,3139.14,3137.55,3133.96,3131.83,3130.8,3130.95,3129.59,3127.0,3129.85,3133.0,3132.21,3132.15,3130.41,3132.9,3134.57,3139.85,3133.04,3138.13,3135.79,3136.96,3133.26,3129.64,3128.02,3127.75,3130.0,3132.21,3133.06,3132.06,3131.88,3132.99,3134.0,3135.79,3137.68,3136.0,3137.89,3133.88,3133.81,3133.84,3133.71,3138.28,3143.06,3144.0,3143.17,3143.02,3145.34,3144.83,3144.81,3144.61,3146.0,3147.91,3146.69,3145.03,3142.46,3142.5,3141.1,3140.17,3140.11,3141.4,3143.92,3144.66,3146.71,3148.95,3146.13,3135.82,3136.96,3139.34,3134.9,3134.48,3136.76,3137.37,3136.92,3136.99,3133.71,3134.44,3132.38,3135.25,3137.14,3135.07,3136.15,3136.15,3139.87,3138.92,3138.5,3141.6,3144.19,3145.44,3147.36,3147.51,3142.12,3143.94,3142.43,3142.02,3142.21,3144.66,3146.53,3144.3,3145.73,3145.94,3146.56,3145.42,3146.05,3150.58,3154.16,3151.01,3149.76,3150.51,3149.31,3146.43,3146.66,3147.47,3145.75,3146.7,3147.1,3143.28,3146.19,3145.38,3145.25,3140.13,3143.45,3140.18,3138.3,3139.7,3136.88,3132.99,3134.7,3135.09,3135.74,3129.89,3126.61,3123.87,3125.14,3119.64,3123.09,3123.35,3120.16,3121.8,3125.0,3132.0,3126.44,3124.57,3120.75,3125.9,3128.05,3127.12,3124.8,3126.19,3128.65,3130.03,3125.31,3125.8,3126.11,3123.22,3125.03,3126.05,3126.24,3129.98,3130.55,3130.97,3129.1,3129.66,3130.27,3130.36,3131.12,3136.13,3137.65,3133.69,3137.18,3137.25,3138.83,3138.58,3141.52,3139.41,3139.05,3137.7,3139.46,3139.8,3140.98,3139.78,3139.17,3140.0,3141.49,3138.86,3139.52,3140.5,3142.58,3142.34,3142.47,3142.91,3142.89,3144.0,3147.55,3148.71,3151.21,3150.66,3148.5,3148.96,3148.5,3150.32,3152.45,3150.83,3150.29,3151.2,3153.01,3152.48,3149.23,3147.45,3146.68,3157.71,3153.34,3147.37,3143.99,3141.45,3142.66,3146.98,3146.61,3148.46,3149.5,3149.29,3148.18,3145.05,3146.86,3145.76,3148.84,3149.31,3146.86,3146.76],\"y\":[1814.895,1182.023,1511.21,821.059,669.95,594.607,397.261,475.226,1430.563,1351.268,848.732,961.415,677.695,2241.498,771.686,3400.92,457.283,815.311,843.761,1456.898,1147.73,2592.488,939.438,695.06,664.589,839.272,344.224,524.897,1029.553,1257.254,764.586,1618.563,599.314,385.634,340.075,245.402,273.54,932.316,297.465,800.419,470.172,358.191,198.746,398.956,521.275,398.68,250.799,376.615,178.701,1034.812,349.27,365.934,193.939,199.584,148.806,343.965,258.079,238.408,273.382,508.892,455.586,1497.43,603.768,705.325,471.812,358.129,1222.79,447.666,603.433,350.189,684.554,404.765,918.631,713.382,803.374,220.673,1013.652,1757.238,887.223,420.149,422.235,642.444,379.785,126.201,499.773,2342.571,1945.816,1288.743,676.794,392.273,424.757,1084.062,1139.501,790.354,2007.705,1446.953,1842.648,777.958,945.39,2579.427,2955.737,1590.911,1476.864,2861.345,772.493,876.768,1835.01,875.833,585.31,765.122,767.852,1825.83,1060.932,682.04,688.755,737.484,429.945,293.821,300.116,1045.831,712.192,2711.994,2052.2,3340.02,897.035,2391.303,2186.713,1517.988,344.748,771.478,720.502,656.313,530.014,1327.673,508.321,904.994,1152.633,523.227,293.715,229.893,202.519,252.467,601.482,317.28,345.035,575.193,374.831,194.465,270.588,367.969,1280.729,1909.713,774.939,518.596,294.403,337.627,382.69,353.682,534.457,1713.387,360.944,713.113,1393.388,1289.595,610.727,739.131,1619.367,2194.335,8164.046,2879.21,2159.701,2512.548,3579.377,1841.206,2810.677,3893.288,1849.815,5497.891,2407.824,1844.752,1304.788,945.57,2745.772,2050.842,2354.528,1577.291,903.569,1269.654,2703.684,766.884,1965.466,1320.285,1111.835,521.223,822.176,942.413,497.538,499.364,222.856,316.366,355.702,243.842,362.266,593.914,349.424,308.565,540.138,769.079,463.481,163.895,237.299,285.424,466.1,224.654,493.52,1674.225,4063.392,1370.598,472.447,957.289,609.428,338.42,243.509,745.35,1417.319,762.417,553.865,616.945,305.569,511.777,416.061,2007.687,312.874,1760.715,470.299,170.102,514.177,647.315,425.481,274.85,415.924,896.493,396.062,588.357,231.181,273.932,245.847,212.412,116.329,109.858,274.394,323.434,335.066,347.193,459.166,944.41,601.327,889.712,412.644,317.84,986.261,934.932,572.116,181.168,460.876,145.156,108.878,210.202,77.92,295.25,300.008,412.518,463.649,312.424,342.369,602.553,325.602,288.656,458.643,344.168,189.501,378.501,506.806,405.58,266.931,508.179,577.092,1968.061,3128.798,2617.171,810.468,1071.792,482.71,702.007,298.08,1139.23,623.801,1162.914,1203.468,673.113,606.991,499.32,344.082,916.323,1133.798,236.462,323.745,227.404,305.618,859.751,541.196,262.919,221.3,135.795,94.984,185.741,146.342,216.582,150.862,227.198,373.705,332.486,216.229,778.895,1204.286,326.503,380.38,1047.579,257.681,288.363,944.527,1025.858,1888.092,606.18,219.281,573.418,618.131,579.352,643.473,227.201,596.85,266.111,593.418,412.236,518.62,714.492,807.998,1833.123,1485.911,696.152,1044.399,1178.696,682.768,339.908,614.242,333.987,289.083,426.036,434.767,363.008,294.274,249.675,759.092,233.645,259.457,692.772,530.582,751.244,252.918,324.292,565.306,530.138,634.433,621.443,362.445,1462.934,578.493,404.427,432.71,381.631,206.741,803.279,286.361,454.727,989.949,1000.012,534.381,1225.959,2611.002,1238.904,1808.266,2668.663,1734.437,1991.659,1533.497,673.975,1417.797,1002.213,689.714,474.831,775.993,612.321,674.988,586.885,486.539,6750.373,1240.763,1031.138,1064.433,810.097,2543.442,1714.432,1408.587,2076.241,891.454,802.952,990.123,356.49,909.726,969.575,1157.716,408.802,557.485,790.536,760.441,903.066,478.393,406.574,460.658,270.44,397.786,2943.217,4367.234,1259.451,1068.328,966.188,1414.714,579.827,511.738,412.874,654.607,675.654,504.93,356.198,858.616,1158.323,1447.125,787.173,728.954,636.948,628.265,669.612,465.412,1222.997,749.451,462.962,472.928,432.435,342.099,1618.728,2358.947,952.987,460.716,651.763,975.681,444.398,645.867,449.599,193.003,278.721,545.444,842.045,277.826,994.515,588.675,591.108,309.423,892.268,276.425,502.627,968.723,404.031,211.579,444.69,715.557,984.707,1097.859,551.379,692.514,900.106,360.002,948.053,805.637,489.368,1676.558,1304.157,367.592,283.184,1023.029,456.415,763.262,343.508,461.29,879.775,1776.793,1251.296,591.245,573.997,1673.844,1283.242,2767.718,1120.511,657.294,746.819,905.747,599.259,715.33,481.675,327.764,388.74,1256.088,1555.066,601.571,277.709,213.939,322.601,214.083,472.872,296.863,364.37,746.543,378.365,967.733,5140.211,4083.258,1994.542,1976.259,888.817,461.462,437.566,1416.611,716.221,1318.431,481.782,2014.435,936.676,1459.321,855.198,732.281,466.019,450.272,560.57,469.751,622.444,518.498,933.561,1274.182,362.645,417.461,200.685,1204.422,1085.208,437.325,388.368,522.196,414.681,402.1,458.488,176.931,774.455,662.126,617.206,452.137,4865.578,3871.135,1343.329,634.081,483.47,1681.018,514.598,502.913,1322.138,529.723,572.34,348.409,713.894,228.335,215.652,253.718,284.838,694.79,180.093,810.769,563.133,209.468,355.301,1084.715,204.09,893.371,557.044,320.725,236.971,360.995,404.746,202.665,416.594,295.445,369.598,1691.926,445.675,502.376,451.028,754.112,460.168,253.657,293.696,364.866,139.172,187.996,297.765,167.774,288.681,128.716,179.501,428.036,213.013,396.147,290.492,459.26,333.25,604.208,535.843,218.827,379.209,623.314,309.742,1047.188,2658.829,741.273,2765.267,2446.593,900.038,1232.736,817.002,2687.132,3309.465,1746.003,699.151,574.566,262.053,505.975,270.49,1023.427,533.5,488.001,536.457,432.03,945.469,1080.591,611.695,611.907,1095.621,485.481,688.799,375.255,1322.925,2347.935,1281.055,1713.871,563.816,371.289,1137.167,1011.662,433.968,4755.422,2060.545,1118.297,1058.42,991.226,512.798,725.336,476.284,633.408,903.175,644.941,2829.545,1218.33,1149.1,755.961,1252.379,2399.314,350.433,457.851,727.54,748.377,2585.751,4337.831,2453.675,1355.272,2073.169,1425.068,1751.715,901.639,353.899,368.582,636.142,1082.148,271.744,399.517,439.441,377.24,330.026,233.732,285.884,308.136,639.158,734.67,567.183,310.671,995.761,12392.217,5461.011,2988.344,5529.668,2618.77,11929.186,2928.894,5355.073,1533.817,2310.282,2210.125,1805.742,2500.52,3272.782,1332.249,2270.554,2483.668,8790.039,13105.425,16039.554,8317.661,6814.545,3909.444,2716.544,2823.368,2433.446,3042.327,4014.336,2680.476,2166.982,8299.153,2107.079,2585.491,3224.808,2437.339,2865.693,1574.387,2219.401,2214.305,2410.523,1263.301,1232.671,1213.058,1789.33,827.919,1530.653,1732.94,1439.558,1552.842,1345.879,1394.187,3147.626,6162.965,7032.083,1330.471,2505.725,7118.551,2288.653,1286.682,1102.423,3249.307,1670.88,2218.379,2946.052,2525.484,1719.79,1630.798,1474.484,1299.503,434.158,1462.856,1914.008,1336.711,872.552,2661.102,1921.851,1223.061,892.979,1675.459,2747.98,3398.563,4782.692,3130.671,914.08,3275.661,3677.987,1920.096,1582.481,626.202,1699.704,3016.389,2348.542,3936.201,1440.961,2551.41,2929.114,3910.54,1731.929,1423.134,1630.803,823.665,1596.309,1843.181,1446.542,850.694,2297.843,856.543,883.961,501.157,1621.147,856.971,707.791,1351.166,795.198,938.608,485.179,455.671,1061.071,580.457,263.109,715.892,1587.285,993.923,1251.255,2659.143,996.502,853.854,744.677,711.983,3232.026,3662.831,807.0,555.69,1043.709,1292.106,987.334,375.225,316.734,438.411,289.699,537.944,942.885,797.012,1077.267,379.583,611.293,521.083,934.505,1175.247,499.493,1141.633,563.435,872.319,811.753,773.096,1412.344,3620.225,4714.694,669.244,1065.55,1598.224,847.615,1923.708,1020.52,1883.069,3076.446,2134.064,1453.728,11270.233,2936.896,6307.007,2166.477,1551.387,1853.874,1372.167,2298.452,1069.092,896.017,1027.708,1205.234,1794.761,2595.809,890.418,848.032,650.893,1088.28,200.664,502.739,575.785,921.978,808.706,3029.201,602.68,309.435,495.715,959.404,569.062,492.893,686.058,1227.456,2415.351,6515.3,1556.79,953.548,1004.564,1320.414,4557.466,1098.609,911.352,1232.801,1241.033,1343.423,769.908,447.129,647.478,822.26,767.131,569.507,437.851,1190.093,378.865,290.814,440.004,366.664,1587.445,389.51,1948.052,1274.222,418.255,155.696,281.607,310.623,166.909,303.48,700.347,271.28,110.636,520.183,820.569,810.861,1088.369,858.322,1295.596,2094.312,1503.768,1037.796,500.033,559.479,227.634,704.975,702.474,560.973,1364.022,508.316,349.588,640.477,527.515,1470.646,248.411,315.355,194.49,727.557,208.254,329.772,769.204,559.27,220.603,179.101,514.706,337.329,450.668,1473.433,2256.979,539.366,738.786,421.76,808.357,281.104,544.472,1304.849,1022.835,193.211,205.636,773.849,215.729,546.43,625.921,225.712,512.885,292.199,264.804,592.964,1204.967,418.402,742.071,437.497,433.652,1078.844,331.74,1040.031,872.767,1004.157,722.758,430.616,408.399,245.932,484.168,3624.12,976.418,394.652,1682.369,625.343,239.747,380.251,1597.606,848.428,708.537,664.832,371.165,750.007,1026.259,843.009,1023.456,1917.749,952.579,870.347,502.286,1363.581,780.743,1448.612,12431.885,6893.299,8886.959,3907.062,9540.759,4740.252,5895.644,16625.626,6312.555,3615.152,3860.571,2514.261,2760.668,1523.597,1871.628,2528.961,7365.0,8920.169,5768.383,6710.649,3346.652,4463.499,3666.88,6450.55,4832.119,5510.211,8186.365,3537.525,8281.314,10045.157,6383.577,5079.938,3813.839,3660.97,5728.121,7917.184,2421.103,5177.868,3136.173,2217.563,3832.957,1720.129,1543.371,1636.799,8034.61,4788.474,3850.793,1514.508,5392.819,1927.194,1163.751,1585.945,1209.542,1998.829,877.24,823.488,781.809,826.931,913.803,742.025,3002.547,1367.89,1044.189,1100.946,2047.804,2818.993,1017.674,1889.338,1032.258,579.044,748.169,927.378,1345.4,516.194,810.503,845.27,650.086,556.495,716.068,3167.786,1365.503,1120.129,1632.121,494.557,495.811,356.546,271.948,320.235,366.049,349.466,550.775,843.882,2000.798,961.087,470.513,438.616,819.214,594.347,286.774,251.089,602.025,267.413,278.638,425.458,282.646,1696.154,921.061,374.925,625.157,346.19,1447.882,338.668,501.822,996.179,1126.58,967.442,927.906,4074.406,898.707,1271.993,720.906,758.176,506.787,1384.601,2630.754,1180.051,296.364,385.161,594.547,303.281,206.3,1509.706,417.533,430.407,350.638,614.913,217.67,109.158,296.924,307.087,827.106,850.038,562.773,402.213,853.225,619.708,185.33,229.867,207.248,255.341,347.69,914.271,348.17,280.522,461.744,242.677,1689.641,1235.344,943.835,1181.751,733.24,268.104,381.13,818.733,1090.052,548.373,754.94,989.387,773.47,1064.937,1070.959,703.035,2594.209,1302.569,682.392,552.382,309.738,466.737,793.098,2376.261,856.232,754.519,404.143,168.334,1477.862,943.652,711.273,1748.362,1006.485,789.572,594.946,279.75,178.433,290.649,215.983,493.113,338.384,762.448,611.586,1334.322,294.505,303.188,134.407,516.94,1550.403,1126.795,485.425,622.304,1249.031,373.648,346.683,211.699,519.095,1088.352,529.813,523.314,772.507,209.114,687.664,329.146,352.705,444.147,395.78,325.339,513.402,784.247,986.546,1584.942,2185.948,785.321,729.112,453.787,897.861,262.964,404.52,171.003,580.24,118.207,406.641,160.17,743.848,437.773,1369.397,191.219,1229.096,398.903,403.85,322.726,970.586,568.304,478.038,404.745,1239.612,454.913,442.573,288.41,264.373,524.088,130.674,443.39,586.952,167.731,307.728,263.88,311.737,866.873,1745.621,745.983,309.615,328.348,383.704,1118.281,450.373,387.296,188.089,629.117,158.39,829.748,364.026,136.85,324.278,1060.597,707.567,409.192,443.098,510.64,923.325,605.203,716.174,198.6,554.733,1635.338,1598.253,4035.924,1229.607,1608.824,2794.958,636.725,1971.132,1481.98,1093.152,3786.967,1736.518,1289.176,1179.711,677.348,1259.158,841.34,248.067,451.306,413.411,883.511,395.721,304.827,431.303,1106.7,599.37,354.735,747.528,810.7,835.158,481.175,629.481,323.974,608.739,557.978,525.368,1225.958,840.532,1067.311,718.545,716.335,312.894,563.057,1017.419,618.553,512.007,588.984,294.695,278.158,217.027,537.444,269.51,225.5,501.376,691.99,483.791,127.283,709.697,467.43,307.414,507.697,422.858,256.808,1153.716,1055.198,1414.849,1144.706,1064.626,623.477,877.503,444.839,742.027,415.472,677.548,1051.317,655.2,370.676,1077.143,1051.053,784.457,4542.468,1733.555,1213.929,1538.198,2121.016,918.853,882.448,654.86,1728.875,631.103,301.013,661.938,933.172,370.951,202.456,406.614,314.65,592.089,26.727],\"type\":\"histogram\"},{\"marker\":{\"color\":\"#D2691E\"},\"mode\":\"lines\",\"name\":\"KDE\",\"x\":[3045.88,3047.2852525252524,3048.690505050505,3050.0957575757575,3051.5010101010103,3052.9062626262626,3054.3115151515153,3055.7167676767676,3057.1220202020204,3058.5272727272727,3059.9325252525255,3061.337777777778,3062.7430303030305,3064.148282828283,3065.5535353535356,3066.958787878788,3068.3640404040407,3069.769292929293,3071.1745454545458,3072.579797979798,3073.9850505050504,3075.390303030303,3076.7955555555554,3078.200808080808,3079.6060606060605,3081.0113131313133,3082.4165656565656,3083.8218181818183,3085.2270707070707,3086.6323232323234,3088.0375757575757,3089.4428282828285,3090.848080808081,3092.2533333333336,3093.658585858586,3095.0638383838386,3096.469090909091,3097.8743434343437,3099.279595959596,3100.6848484848488,3102.090101010101,3103.4953535353534,3104.900606060606,3106.3058585858585,3107.711111111111,3109.1163636363635,3110.5216161616163,3111.9268686868686,3113.3321212121214,3114.7373737373737,3116.1426262626264,3117.5478787878787,3118.9531313131315,3120.358383838384,3121.7636363636366,3123.168888888889,3124.5741414141416,3125.979393939394,3127.3846464646467,3128.789898989899,3130.1951515151513,3131.600404040404,3133.0056565656564,3134.410909090909,3135.8161616161615,3137.2214141414142,3138.6266666666666,3140.0319191919193,3141.4371717171716,3142.8424242424244,3144.2476767676767,3145.6529292929295,3147.0581818181818,3148.4634343434345,3149.868686868687,3151.2739393939396,3152.679191919192,3154.0844444444447,3155.489696969697,3156.8949494949493,3158.300202020202,3159.7054545454544,3161.110707070707,3162.5159595959594,3163.921212121212,3165.3264646464645,3166.7317171717173,3168.1369696969696,3169.5422222222223,3170.9474747474746,3172.3527272727274,3173.7579797979797,3175.1632323232325,3176.568484848485,3177.9737373737375,3179.37898989899,3180.7842424242426,3182.189494949495,3183.5947474747472,3185.0],\"y\":[0.001832905419240713,0.0015170993773343943,0.0009811990405335794,0.0010910781869862753,0.001662787664619852,0.002276584209048065,0.003017679469815101,0.004091626542089751,0.005452920992053675,0.006818537038424319,0.0076664779747402535,0.007643887894555952,0.007344902200072563,0.00827273925583825,0.011220488982456029,0.01494681923660121,0.016672754263443067,0.015298211710060586,0.013000656836147326,0.01136447782936633,0.009905415113226086,0.007991277793749363,0.005915182769079316,0.004603614839180802,0.004340216581875808,0.004677084159634987,0.004804286094145265,0.003945664227425191,0.0025142257578005694,0.0014727830724446968,0.0011591657181478472,0.0015827815995405762,0.0026670028851318566,0.003810420375174876,0.004026389180218125,0.003107185282237217,0.001940076730122543,0.0013880150787554427,0.0015444989246854268,0.0023609061649200076,0.0037401025635127546,0.005029582983599697,0.005321434602966492,0.004778565138234207,0.004284633110071723,0.004142142333983544,0.004650245486454227,0.005790340541463709,0.0068018904562159735,0.007335214235017366,0.008011875247544532,0.009032977214800161,0.009862320541122151,0.01015891479438546,0.010077897051723251,0.009700191176833918,0.00944402389099212,0.010385374840307136,0.012487699392384763,0.014125807036359036,0.014335489751832464,0.013760773754902053,0.013070724606546664,0.012663567468535765,0.013407581002278695,0.0152918031502357,0.01671953731557649,0.01690758767766308,0.0165814827586469,0.01570664895796692,0.014255369464538745,0.013369278115428072,0.012993378487870194,0.011780241643981209,0.009592167939552232,0.007696976248164002,0.006823155935995189,0.006619023196157732,0.007110669748385475,0.008153180108070628,0.008357004173573936,0.007467120695723313,0.006541623694037697,0.005979030384818917,0.00565790251287167,0.005607397002735248,0.00599245781550611,0.006338445734583271,0.0060092038421343755,0.0053319582929410685,0.004754442260061802,0.004333231721163359,0.004227903631578969,0.004279536987396199,0.003930156107007355,0.0029754130410062354,0.0017041868280610027,0.0007672145372132436,0.0005056108010257643,0.0005155116532610217],\"type\":\"scatter\"},{\"marker\":{\"color\":\"black\",\"size\":10},\"mode\":\"markers\",\"name\":\"Peaks\",\"x\":[3059.9325252525255,3068.3640404040407,3082.4165656565656,3093.658585858586,3104.900606060606,3120.358383838384,3130.1951515151513,3140.0319191919193,3158.300202020202,3168.1369696969696,3176.568484848485],\"y\":[0.0076664779747402535,0.016672754263443067,0.004804286094145265,0.004026389180218125,0.005321434602966492,0.01015891479438546,0.014335489751832464,0.01690758767766308,0.008357004173573936,0.006338445734583271,0.004279536987396199],\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"shapes\":[{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3059.9325252525255,\"x1\":3059.9325252525255,\"xref\":\"x\",\"y0\":0,\"y1\":0.007344902200072563,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3068.3640404040407,\"x1\":3068.3640404040407,\"xref\":\"x\",\"y0\":0,\"y1\":0.001159165718147847,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3082.4165656565656,\"x1\":3082.4165656565656,\"xref\":\"x\",\"y0\":0,\"y1\":0.004340216581875808,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3093.658585858586,\"x1\":3093.658585858586,\"xref\":\"x\",\"y0\":0,\"y1\":0.0013880150787554425,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3104.900606060606,\"x1\":3104.900606060606,\"xref\":\"x\",\"y0\":0,\"y1\":0.004142142333983544,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3120.358383838384,\"x1\":3120.358383838384,\"xref\":\"x\",\"y0\":0,\"y1\":0.00944402389099212,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3130.1951515151513,\"x1\":3130.1951515151513,\"xref\":\"x\",\"y0\":0,\"y1\":0.012663567468535765,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3140.0319191919193,\"x1\":3140.0319191919193,\"xref\":\"x\",\"y0\":0,\"y1\":0.0009811990405335785,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3158.300202020202,\"x1\":3158.300202020202,\"xref\":\"x\",\"y0\":0,\"y1\":0.006619023196157732,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3168.1369696969696,\"x1\":3168.1369696969696,\"xref\":\"x\",\"y0\":0,\"y1\":0.005607397002735248,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3176.568484848485,\"x1\":3176.568484848485,\"xref\":\"x\",\"y0\":0,\"y1\":0.004227903631578969,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3062.5744,\"xref\":\"x\",\"y0\":0.007505690087406408,\"y1\":0.007505690087406408,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.008915959990795457,\"y1\":0.008915959990795457,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3079.2688000000003,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.0045722513380105365,\"y1\":0.0045722513380105365,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3097.3544,\"xref\":\"x\",\"y0\":0.002707202129486784,\"y1\":0.002707202129486784,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3108.484,\"xref\":\"x\",\"y0\":0.004731788468475018,\"y1\":0.004731788468475018,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3123.7872,\"xref\":\"x\",\"y0\":0.00980146934268879,\"y1\":0.00980146934268879,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3133.5256,\"xref\":\"x\",\"y0\":0.013499528610184115,\"y1\":0.013499528610184115,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.00894439335909833,\"y1\":0.00894439335909833,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3153.0024,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.007488013684865834,\"y1\":0.007488013684865834,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3164.132,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.005972921368659259,\"y1\":0.005972921368659259,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3173.8704,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.004253720309487584,\"y1\":0.004253720309487584,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3059.9325252525255,\"x1\":3059.9325252525255,\"xref\":\"x\",\"y0\":0,\"y1\":0.0076664779747402535,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3068.3640404040407,\"x1\":3068.3640404040407,\"xref\":\"x\",\"y0\":0,\"y1\":0.016672754263443067,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3082.4165656565656,\"x1\":3082.4165656565656,\"xref\":\"x\",\"y0\":0,\"y1\":0.004804286094145265,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3093.658585858586,\"x1\":3093.658585858586,\"xref\":\"x\",\"y0\":0,\"y1\":0.004026389180218125,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3104.900606060606,\"x1\":3104.900606060606,\"xref\":\"x\",\"y0\":0,\"y1\":0.005321434602966492,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3120.358383838384,\"x1\":3120.358383838384,\"xref\":\"x\",\"y0\":0,\"y1\":0.01015891479438546,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3130.1951515151513,\"x1\":3130.1951515151513,\"xref\":\"x\",\"y0\":0,\"y1\":0.014335489751832464,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3140.0319191919193,\"x1\":3140.0319191919193,\"xref\":\"x\",\"y0\":0,\"y1\":0.01690758767766308,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3158.300202020202,\"x1\":3158.300202020202,\"xref\":\"x\",\"y0\":0,\"y1\":0.008357004173573936,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3168.1369696969696,\"x1\":3168.1369696969696,\"xref\":\"x\",\"y0\":0,\"y1\":0.006338445734583271,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3176.568484848485,\"x1\":3176.568484848485,\"xref\":\"x\",\"y0\":0,\"y1\":0.004279536987396199,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3062.5744,\"xref\":\"x\",\"y0\":0.007505690087406408,\"y1\":0.007505690087406408,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.008915959990795457,\"y1\":0.008915959990795457,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3079.2688000000003,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.0045722513380105365,\"y1\":0.0045722513380105365,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3097.3544,\"xref\":\"x\",\"y0\":0.002707202129486784,\"y1\":0.002707202129486784,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3108.484,\"xref\":\"x\",\"y0\":0.004731788468475018,\"y1\":0.004731788468475018,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3123.7872,\"xref\":\"x\",\"y0\":0.00980146934268879,\"y1\":0.00980146934268879,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3133.5256,\"xref\":\"x\",\"y0\":0.013499528610184115,\"y1\":0.013499528610184115,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.00894439335909833,\"y1\":0.00894439335909833,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3153.0024,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.007488013684865834,\"y1\":0.007488013684865834,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3164.132,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.005972921368659259,\"y1\":0.005972921368659259,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3173.8704,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.004253720309487584,\"y1\":0.004253720309487584,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3059.9325252525255,\"x1\":3059.9325252525255,\"xref\":\"x\",\"y0\":0,\"y1\":0.0076664779747402535,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3068.3640404040407,\"x1\":3068.3640404040407,\"xref\":\"x\",\"y0\":0,\"y1\":0.016672754263443067,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3082.4165656565656,\"x1\":3082.4165656565656,\"xref\":\"x\",\"y0\":0,\"y1\":0.004804286094145265,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3093.658585858586,\"x1\":3093.658585858586,\"xref\":\"x\",\"y0\":0,\"y1\":0.004026389180218125,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3104.900606060606,\"x1\":3104.900606060606,\"xref\":\"x\",\"y0\":0,\"y1\":0.005321434602966492,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3120.358383838384,\"x1\":3120.358383838384,\"xref\":\"x\",\"y0\":0,\"y1\":0.01015891479438546,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3130.1951515151513,\"x1\":3130.1951515151513,\"xref\":\"x\",\"y0\":0,\"y1\":0.014335489751832464,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3140.0319191919193,\"x1\":3140.0319191919193,\"xref\":\"x\",\"y0\":0,\"y1\":0.01690758767766308,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3158.300202020202,\"x1\":3158.300202020202,\"xref\":\"x\",\"y0\":0,\"y1\":0.008357004173573936,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3168.1369696969696,\"x1\":3168.1369696969696,\"xref\":\"x\",\"y0\":0,\"y1\":0.006338445734583271,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3176.568484848485,\"x1\":3176.568484848485,\"xref\":\"x\",\"y0\":0,\"y1\":0.004279536987396199,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3062.5744,\"xref\":\"x\",\"y0\":0.007505690087406408,\"y1\":0.007505690087406408,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.008915959990795457,\"y1\":0.008915959990795457,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3079.2688000000003,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.0045722513380105365,\"y1\":0.0045722513380105365,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3097.3544,\"xref\":\"x\",\"y0\":0.002707202129486784,\"y1\":0.002707202129486784,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3108.484,\"xref\":\"x\",\"y0\":0.004731788468475018,\"y1\":0.004731788468475018,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3123.7872,\"xref\":\"x\",\"y0\":0.00980146934268879,\"y1\":0.00980146934268879,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3133.5256,\"xref\":\"x\",\"y0\":0.013499528610184115,\"y1\":0.013499528610184115,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.00894439335909833,\"y1\":0.00894439335909833,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3153.0024,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.007488013684865834,\"y1\":0.007488013684865834,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3164.132,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.005972921368659259,\"y1\":0.005972921368659259,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3173.8704,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.004253720309487584,\"y1\":0.004253720309487584,\"yref\":\"y\"}]},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('f0efc821-18d5-43b5-ad6e-1133ea0ad873');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}}]},{"cell_type":"code","source":["# peaks  # ndarray\n","# kdx  # ndarray\n","# kdy  # ndarray\n","# kdx.min()\n","left_base * ticks_per_sample\n","# volume"],"metadata":{"id":"zqj944n-WzyZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(peak_y)\n","print(peak_props['prominences'])\n","peak_props"],"metadata":{"id":"Rvqv0RGojo9h"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xpyP5t8Ht_pE","jp-MarkdownHeadingCollapsed":true,"tags":[]},"source":["### calc recursive indi's min_period"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":235},"executionInfo":{"elapsed":15,"status":"error","timestamp":1645810346810,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"N1Hbm4OA4Tkk","outputId":"e6a3fc2f-316c-4a0d-9c91-df759c816b88"},"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-4-c602b9e1b7e6>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mticker_prcn\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_precision_by_price\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mres_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclose\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mtarget_len\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m300000\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mslice_len_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m50\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m10000\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m100\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mslice_len_list\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minsert\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget_len\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'res_df' is not defined"]}],"source":["ticker_prcn = get_precision_by_price(res_df.close.iloc[-1]) + 2\n","\n","target_len = 300000\n","slice_len_list = list(range(50, 10000, 100))\n","slice_len_list.insert(0, target_len)\n","\n","start_0 = time.time()\n","# prev_int_, prev_pnts_ = None, None\n","offset = 1\n","\n","for sl_idx, sample_len in enumerate(slice_len_list):\n","\n","  sample_df = res_df.iloc[-sample_len -offset:-offset]\n","  sample_len2 = sample_len\n","\n","  # --------- input using indi.s --------- #\n","  # res = ema_v0(sample_df['close'], 190)\n","  res = rsi(sample_df, 14)\n","\n","    #    to_htf()    #\n","  # df_5T = to_htf(sample_df, itv_='5T', offset='1h')\n","  # sample_len2 = len(df_5T)\n","\n","  # # --------- input using htf_indi. --------- #\n","  # res = ema(df_5T['close'], 195)\n","  # -------------------------------------- #\n","\n","  res_last_row = res.iloc[-1]\n","  if pd.isnull(res_last_row):\n","    continue\n","\n","  # print(res_last_row)\n","  # break\n","\n","  # sample_df = sample_df.join(to_lower_tf_v2(sample_df, df_5T, [-1]), how='inner')\n","\n","\n","  #   자리수 분할 계산    #\n","  int_, points_ = str(res_last_row).split('.')\n","  pnts_ = points_[:ticker_prcn]\n","\n","  if sl_idx == 0:\n","    target_int_ = int_\n","    target_pnts_ = pnts_\n","    print(\"target {} ({}) -> {} {}\".format(sample_len, sample_len2, int_, points_))\n","\n","  else:\n","    if target_int_ == int_ and target_pnts_ == pnts_:\n","      # print(sample_len, \"({})\".format(sample_len2), '->', int_, pnts_, end='\\n\\n')\n","      print(\"{} ({}) -> {} {}\\n\".format(sample_len, sample_len2, int_, points_))\n","      break\n","\n","print(time.time() - start_0)  # (1301)(1361)(1301)"]},{"cell_type":"markdown","metadata":{"id":"rrIGjmUzqU-D","tags":[]},"source":["## import utils & config"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"SeJan_0t95yL","executionInfo":{"status":"ok","timestamp":1648125166662,"user_tz":-540,"elapsed":3155,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"outputs":[],"source":["frame_ver = \"0114_htf\"\n","ID_arr = np.array(['v3', 'v5_2'])\n","\n","utils_public_name = \"{}.utils.{}_utils_public\".format(strat_pkg, frame_ver)\n","utils_public_lib = importlib.import_module(utils_public_name)\n","utils_public = utils_public_lib   # temporary\n","\n","u_name_list = [\"{}.utils.{}_utils_{}\".format(strat_pkg, frame_ver, id_) for id_ in ID_arr]\n","utils_arr = np.array([importlib.import_module(u_name) for u_name in u_name_list])\n","\n","config_name_list = [\"{}_config_{}.json\".format(frame_ver, id_) for id_ in ID_arr]\n","cfg_path_list = [os.path.join(current_path, strat_pkg, \"config\", name_) for name_ in config_name_list]\n","cfg_file_list = [open(cfg_path) for cfg_path in cfg_path_list]\n","config_arr = np.array([EasyDict(json.load(cfg_)) for cfg_ in cfg_file_list])\n","\n","# ------ opened files should be closed --> 닫지 않으면 reopen 시 error occurs ------ #\n","_ = [cfg_.close() for cfg_ in cfg_file_list]\n","show_plot = 1   # idep's var - do not touch"]},{"cell_type":"markdown","metadata":{"id":"leSQlImg4_9L","jp-MarkdownHeadingCollapsed":true,"tags":[]},"source":["### utils_"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"CB2yZdQ95Cdg","executionInfo":{"status":"ok","timestamp":1648125166663,"user_tz":-540,"elapsed":5,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"outputs":[],"source":["# from funcs.funcs_indicator_candlescore import *\n","# import numpy as np\n","\n","def get_line(touch, rtc_):\n","  touch_copy = touch.copy()\n","  touch_line = rtc_.copy()\n","\n","  nan_idx = np.isnan(touch_copy)\n","  touch_copy[nan_idx] = 0   # for indexing array\n","  touch_line[touch_copy.astype(int)]\n","  touch_line[nan_idx] = np.nan   # for true comp.\n","\n","  return touch_line\n","\n","\n","def enlist_rtc(res_df, config, np_timeidx):\n","    strat_version = config.strat_version\n","    # ------------ rtc_gap ------------ #    \n","    short_rtc_1_, long_rtc_1_ = 'short_rtc_1_{}'.format(strat_version), 'long_rtc_1_{}'.format(strat_version)\n","    short_rtc_0_, long_rtc_0_ = 'short_rtc_0_{}'.format(strat_version), 'long_rtc_0_{}'.format(strat_version)\n","\n","    period1, period2 = 20, 40\n","    res_df[short_rtc_1_] = res_df['dc_lower_{}{}'.format(config.loc_set.point.rtc_itv1, period1)]  # rtc 의 기준이 되어줌 (ei_k 도 포함)\n","    res_df[short_rtc_0_] = res_df['dc_upper_{}{}'.format(config.loc_set.point.rtc_itv0, period2)]\n","    res_df[long_rtc_1_] = res_df['dc_upper_{}{}'.format(config.loc_set.point.rtc_itv1, period1)]\n","    res_df[long_rtc_0_] = res_df['dc_lower_{}{}'.format(config.loc_set.point.rtc_itv0, period2)]\n","\n","    # ------ inversion ------ #\n","    if config.pos_set.short_inversion or config.pos_set.long_inversion:\n","      res_df.rename({short_rtc_1_: long_rtc_1_, long_rtc_1_: short_rtc_1_}, axis=1, inplace=True)\n","      res_df.rename({short_rtc_0_: long_rtc_0_, long_rtc_0_: short_rtc_0_}, axis=1, inplace=True)\n","\n","    res_df['short_rtc_gap_{}'.format(strat_version)] = abs(\n","        res_df[short_rtc_0_] - res_df[short_rtc_1_])\n","    res_df['long_rtc_gap_{}'.format(strat_version)] = abs(\n","        res_df[long_rtc_1_] - res_df[long_rtc_0_])\n","    \n","    # ------------ out_gap ------------ #\n","    # short_out_1_, long_out_1_ = 'short_out_1_{}'.format(strat_version), 'long_out_1_{}'.format(strat_version)\n","    # short_out_0_, long_out_0_ = 'short_out_0_{}'.format(strat_version), 'long_out_0_{}'.format(strat_version)\n","    # res_df[short_out_1_] = res_df['dc_lower_%s' % config.loc_set.point.outg_itv1]\n","    # res_df[short_out_0_] = res_df['dc_upper_%s' % config.loc_set.point.outg_itv0]   # outg 의 기준이 되어줌\n","    # res_df[long_out_1_] = res_df['dc_upper_%s' % config.loc_set.point.outg_itv1]\n","    # res_df[long_out_0_] = res_df['dc_lower_%s' % config.loc_set.point.outg_itv0]\n","    # # ------ inversion ------ #\n","    # if config.pos_set.short_inversion or config.pos_set.long_inversion:  # Todo - 추후 다른 변수로 변경해야함 (entry_score deprecated)\n","    #   res_df.rename({short_out_1_: long_out_1_, long_out_1_: short_out_1_}, axis=1, inplace=True)\n","    #   res_df.rename({short_out_0_: long_out_0_, long_out_0_: short_out_0_}, axis=1, inplace=True)\n","\n","    # res_df['short_out_gap_{}'.format(strat_version)] = abs(\n","    #     res_df[short_out_0_] - res_df[short_out_1_])\n","    # res_df['long_out_gap_{}'.format(strat_version)] = abs(\n","    #     res_df[long_out_1_] - res_df[long_out_0_])\n","    \n","    # ------------ dtk_gap ------------ #\n","    res_df['short_dtk_1_{}'.format(strat_version)] = res_df['bb_lower_%s' % config.loc_set.zone.dtk_itv]\n","    res_df['short_dtk_0_{}'.format(strat_version)] = res_df['dc_upper_%s' % config.loc_set.zone.dtk_itv]\n","    res_df['long_dtk_1_{}'.format(strat_version)] = res_df['bb_upper_%s' % config.loc_set.zone.dtk_itv]\n","    res_df['long_dtk_0_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.zone.dtk_itv]\n","\n","    res_df['short_dtk_gap_{}'.format(strat_version)] = abs(\n","        res_df['short_dtk_0_{}'.format(strat_version)] - res_df['short_dtk_1_{}'.format(strat_version)])\n","    res_df['long_dtk_gap_{}'.format(strat_version)] = abs(\n","        res_df['long_dtk_1_{}'.format(strat_version)] - res_df['long_dtk_0_{}'.format(strat_version)])\n","\n","    return\n","\n","\n","def enlist_tr(res_df, config, np_timeidx, mode='OPEN'):\n","    strat_version = config.strat_version\n","    # ---------------- point definition : get open_res ---------------- #    \n","    len_df = len(res_df)\n","    short_open_res = np.ones(len_df)\n","    long_open_res = np.ones(len_df)\n","    \n","    short_rtc_1_col, short_rtc_0_col, short_rtc_gap_col = 'short_rtc_1_{}'.format(strat_version), 'short_rtc_0_{}'.format(strat_version), 'short_rtc_gap_{}'.format(strat_version) \n","    long_rtc_1_col, long_rtc_0_col, long_rtc_gap_col = 'long_rtc_1_{}'.format(strat_version), 'long_rtc_0_{}'.format(strat_version), 'long_rtc_gap_{}'.format(strat_version) \n","\n","    data_cols = ['open', 'high', 'low']   # Todo - public_indi 이전에 해야할지도 모름 # 'close', 'haopen', 'hahigh', 'halow', 'haclose'\n","    rtc_cols = [short_rtc_1_col, short_rtc_0_col, short_rtc_gap_col, long_rtc_1_col, long_rtc_0_col, long_rtc_gap_col]   # Todo - public_indi 이전에 해야할지도 모름\n","\n","    short_rtc_1_, short_rtc_0_, short_rtc_gap_, long_rtc_1_, long_rtc_0_, long_rtc_gap_ = [res_df[col_].to_numpy() for col_ in rtc_cols]\n","    open, high, low = [res_df[col_].to_numpy() for col_ in data_cols]\n","    short_base = (short_rtc_1_ + short_rtc_0_) / 2\n","    long_base = (long_rtc_1_ + long_rtc_0_) / 2\n","    # back_ha_o = res_df['haopen'].shift(1).to_numpy()\n","    # back_ha_c = res_df['haclose'].shift(1).to_numpy()\n","\n","    touch_period = 50\n","    # short_open_res *= (back_ha_c >= back_ha_o) & (ha_o > ha_c)\n","    # short_open_res *= ha_o == ha_h\n","    # short_open_res *= np_timeidx % tf_entry == tf_entry - 1     \n","    short_a_touch = pd.Series(np.where(high >= short_rtc_0_, np.arange(len(res_df)), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()  # min -> max\n","    short_b_touch = pd.Series(np.where(low <= short_rtc_1_, np.arange(len(res_df)), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨\n","    \n","    short_en_p = (get_line(short_a_touch, short_rtc_0_) + get_line(short_b_touch, short_rtc_1_)) / 2\n","    short_base_b = get_line(short_b_touch, short_base)\n","    short_rtc_gap_b = get_line(short_b_touch, short_rtc_gap_)\n","    short_open_res *= (high >= short_base_b) & (short_base_b >= open) & (short_a_touch < short_b_touch) & (short_base_b + config.loc_set.point.base_gap * short_rtc_gap_b >= short_base)\n","    \n","    res_df['short_open_{}'.format(strat_version)] = short_open_res\n","\n","    # long_open_res *= (back_ha_c <= back_ha_o) & (ha_o < ha_c)          \n","    # long_open_res *= ha_o == ha_l\n","    # long_open_res *= np_timeidx % tf_entry == tf_entry - 1   \n","    long_a_touch = pd.Series(np.where(low <= long_rtc_0_, np.arange(len(res_df)), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()       \n","    long_b_touch = pd.Series(np.where(high >= long_rtc_1_, np.arange(len(res_df)), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()\n","    \n","    long_en_p = (get_line(long_a_touch, long_rtc_0_) + get_line(long_b_touch, long_rtc_1_)) / 2\n","    long_base_b = get_line(long_b_touch, long_base)\n","    long_rtc_gap_b = get_line(long_b_touch, long_rtc_gap_)\n","    long_open_res *= (open >= long_base_b) & (long_base_b >= low) & (long_a_touch < long_b_touch) & (long_base_b - config.loc_set.point.base_gap * long_rtc_gap_b <= long_base)\n","    res_df['long_open_{}'.format(strat_version)] = long_open_res\n","\n","    # ---------------- set ep level ---------------- #\n","    # -------- limit ver. -------- #\n","    base_period = 'T'\n","    if config.ep_set.entry_type == \"LIMIT\":\n","      # res_df['short_ep_{}'.format(strat_version)] = res_df['close'] + res_df['short_tp_gap_{}'.format(strat_version)] * config.tr_set.ep_gap\n","      # res_df['long_ep_{}'.format(strat_version)] = res_df['close'] - res_df['long_tp_gap_{}'.format(strat_version)] * config.tr_set.ep_gap    \n","      # res_df['short_ep_{}'.format(strat_version)] = res_df['short_base_{}'.format(base_period)] + res_df['short_rtc_gap_{}'.format(strat_version)] * config.tr_set.ep_gap\n","      # res_df['long_ep_{}'.format(strat_version)] = res_df['long_base_{}'.format(base_period)] - res_df['long_rtc_gap_{}'.format(strat_version)] * config.tr_set.ep_gap    \n","      res_df['short_ep_{}'.format(strat_version)] = short_en_p + res_df['short_rtc_gap_{}'.format(strat_version)] * config.tr_set.ep_gap\n","      res_df['long_ep_{}'.format(strat_version)] = long_en_p - res_df['long_rtc_gap_{}'.format(strat_version)] * config.tr_set.ep_gap   \n","    # -------- market ver. -------- #\n","    else:\n","        res_df['short_ep_{}'.format(strat_version)] = res_df['close']\n","        res_df['long_ep_{}'.format(strat_version)] = res_df['close']\n","\n","    # -------- zoned_ep -------- #\n","    if config.tr_set.c_ep_gap != \"None\":\n","        # res_df['short_ep_org_{}'.format(strat_version)] = res_df['short_ep_{}'.format(strat_version)].copy()\n","        # res_df['long_ep_org_{}'.format(strat_version)] = res_df['long_ep_{}'.format(strat_version)].copy()\n","        res_df['short_ep2_{}'.format(strat_version)] = res_df['short_base_{}'.format(base_period)] + res_df[\n","            'short_rtc_gap_{}'.format(strat_version)] * config.tr_set.c_ep_gap\n","        res_df['long_ep2_{}'.format(strat_version)] = res_df['long_base_{}'.format(base_period)] - res_df[\n","            'long_rtc_gap_{}'.format(strat_version)] * config.tr_set.c_ep_gap\n","\n","    # --------------- tp --------------- #    \n","    # res_df['short_tp_{}'.format(strat_version)] = res_df['close'] - res_df['short_tp_gap_{}'.format(strat_version)] * config.tr_set.tp_gap\n","    # res_df['long_tp_{}'.format(strat_version)] = res_df['close'] + res_df['long_tp_gap_{}'.format(strat_version)] * config.tr_set.tp_gap\n","    res_df['short_tp_{}'.format(strat_version)] = res_df['short_rtc_1_{}'.format(strat_version)] - res_df['short_rtc_gap_{}'.format(strat_version)] * (0.5 + config.tr_set.tp_gap) # 기본으로 .5 포함\n","    res_df['long_tp_{}'.format(strat_version)] = res_df['long_rtc_1_{}'.format(strat_version)] + res_df['long_rtc_gap_{}'.format(strat_version)] * (0.5 + config.tr_set.tp_gap)\n","\n","    # --------------- out --------------- #\n","    # res_df['short_out_{}'.format(strat_version)] = res_df['high'] + res_df['short_out_gap_{}'.format(strat_version)] * config.tr_set.out_gap # open\n","    # res_df['long_out_{}'.format(strat_version)] = res_df['low'] - res_df['long_out_gap_{}'.format(strat_version)] * config.tr_set.out_gap  # open\n","    res_df['short_out_{}'.format(strat_version)] = res_df['short_rtc_0_{}'.format(strat_version)] + res_df['short_rtc_gap_{}'.format(strat_version)] * config.tr_set.out_gap\n","    res_df['long_out_{}'.format(strat_version)] = res_df['long_rtc_0_{}'.format(strat_version)] - res_df['long_rtc_gap_{}'.format(strat_version)] * config.tr_set.out_gap\n","\n","    # -------- zoned_out -------- #\n","    if config.tr_set.t_out_gap != \"None\":\n","        # res_df['short_out_org_{}'.format(strat_version)] = res_df['short_out_{}'.format(strat_version)].copy()\n","        # res_df['long_out_org_{}'.format(strat_version)] = res_df['long_out_{}'.format(strat_version)].copy()\n","        res_df['short_out2_{}'.format(strat_version)] = res_df['short_rtc_0_{}'.format(strat_version)] + res_df['short_rtc_gap_{}'.format(strat_version)] * config.tr_set.t_out_gap\n","        res_df['long_out2_{}'.format(strat_version)] = res_df['long_rtc_0_{}'.format(strat_version)] - res_df['long_rtc_gap_{}'.format(strat_version)] * config.tr_set.t_out_gap\n","\n","    # --------------- bias --------------- #  Todo - 추후, bias_set 독립시키는게 좋지 않을까\n","    end_tick = config.tr_set.end_tick\n","    # ------ bias_info can use future_data ------ #\n","    res_df['short_bias_info_{}'.format(strat_version)] = res_df['dc_lower_T'].shift(-end_tick)  # open / ep_tick 으로부터 end_tick 만큼\n","    res_df['long_bias_info_{}'.format(strat_version)] = res_df['dc_upper_T'].shift(-end_tick)\n","\n","    # bias_thresh 는 결국 tp 가 될 것\n","    res_df['short_bias_thresh_{}'.format(strat_version)] = res_df['short_tp_{}'.format(strat_version)]\n","    res_df['long_bias_thresh_{}'.format(strat_version)] = res_df['long_tp_{}'.format(strat_version)]\n","    # res_df['short_bias_thresh_{}'.format(strat_version)] = res_df['dc_lower_T'] - res_df['short_tp_gap_{}'.format(strat_version)] * config.tr_set.bias_gap\n","    # res_df['long_bias_thresh_{}'.format(strat_version)] = res_df['dc_upper_T'] + res_df['long_tp_gap_{}'.format(strat_version)] * config.tr_set.bias_gap \n","        \n","    return\n"]},{"cell_type":"markdown","metadata":{"id":"HKdUKKl-483N","jp-MarkdownHeadingCollapsed":true,"tags":[]},"source":["### utils_public"]},{"cell_type":"code","execution_count":39,"metadata":{"id":"nzOYWA2kqZ0d","executionInfo":{"status":"ok","timestamp":1648127030249,"user_tz":-540,"elapsed":1955,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"outputs":[],"source":["# from funcs.funcs_indicator import *\n","# from funcs.funcs_trader import *\n","# import logging\n","# from ast import literal_eval\n","\n","sys_log = logging.getLogger()\n","\n","\n","class OrderSide:\n","    BUY = \"BUY\"\n","    SELL = \"SELL\"\n","    INVALID = None\n","\n","\n","def lvrg_set(res_df, config, open_side, ep_, out_, fee, limit_leverage=50):\n","    strat_version = config.strat_version\n","    if not pd.isnull(out_) and not config.lvrg_set.static_lvrg:\n","      if strat_version in ['v3']:\n","        if open_side == OrderSide.SELL:\n","          loss = out_ / ep_\n","        else:\n","          loss = ep_ / out_\n","      else:  # 이 phase 가 정석, 윗 phase 는 결과가 수익 극대화라 사용함\n","        if open_side == OrderSide.SELL:\n","          loss = ep_ / out_          \n","        else:\n","          loss = out_ / ep_\n","\n","        config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(loss - 1 - (fee + config.trader_set.market_fee))\n","\n","    if not config.lvrg_set.allow_float:\n","        config.lvrg_set.leverage = int(config.lvrg_set.leverage)\n","\n","    # ------------ leverage rejection ------------ #\n","    # 감당하기 힘든 fluc. 의 경우 진입하지 않음 - dynamic_lvrg 사용 경우\n","    if config.lvrg_set.leverage < 1 and config.lvrg_set.lvrg_rejection:\n","    # if config.lvrg_set.leverage >= 1 and config.lvrg_set.lvrg_rejection:\n","        return None\n","    config.lvrg_set.leverage = min(limit_leverage, max(config.lvrg_set.leverage, 1))\n","\n","    return config.lvrg_set.leverage\n","\n","\n","def sync_check(df_, config, order_side=\"OPEN\", row_slice=True):\n","    try:\n","        make_itv_list = [m_itv.replace('m', 'T') for m_itv in literal_eval(config.trader_set.itv_list)]\n","        row_list = literal_eval(config.trader_set.row_list)\n","        rec_row_list = literal_eval(config.trader_set.rec_row_list)\n","        offset_list = literal_eval(config.trader_set.offset_list)\n","\n","        assert len(make_itv_list) == len(offset_list), \"length of itv & offset_list should be equal\"\n","        htf_df_list = [to_htf(df_, itv_=itv_, offset=offset_) for itv_idx, (itv_, offset_)\n","                       in enumerate(zip(make_itv_list, offset_list)) if itv_idx != 0]  #\n","        htf_df_list.insert(0, df_)\n","\n","        # for htf_df_ in htf_df_list:\n","        #     print(htf_df_.tail())\n","\n","        #       Todo        #\n","        #        1. row_list calc.\n","        #           a. indi. 를 만들기 위한 최소 period 가 존재하고, 그 indi. 를 사용한 lb_period 가 존재함\n","        #           b. => default_period + lb_period\n","        #               i. from sync_check, public_indi, ep_point2, ep_dur 의 tf 별 max lb_period check\n","        #                   1. default_period + max lb_period check\n","        #                       a. 현재까지 lb_period_list\n","        #                           h_prev_idx (open / close) 60\n","        #                           dc_period 135\n","        #                           zone_dc_period 135\n","\n","        # --------- slicing (in trader phase only) --------- #\n","        #               --> latency 영향도가 높은 곳은 이곳\n","        if row_slice:   # recursive 가 아닌 indi. 의 latency 를 고려한 slicing\n","            df, df_5T, df_15T, df_30T, df_4H = [df_s.iloc[-row_list[row_idx]:].copy() for row_idx, df_s in enumerate(htf_df_list)]\n","            rec_df, rec_df_5T, rec_df_15T, rec_df_30T, rec_df_4H = [df_s.iloc[-rec_row_list[row_idx]:].copy() for row_idx, df_s in enumerate(htf_df_list)]\n","        else:\n","            df, df_5T, df_15T, df_30T, df_4H = htf_df_list\n","            rec_df, rec_df_5T, rec_df_15T, rec_df_30T, rec_df_4H = htf_df_list\n","\n","        # --------- add indi. --------- #\n","\n","        #        1. 필요한 indi. 는 enlist_epouttp & mr_check 보면서 삽입\n","        #        2. min use_rows 계산을 위해서, tf 별로 gathering 함        #\n","        start_0 = time.time()\n","\n","        df = dc_line(df, None, '1m', dc_period=20)\n","        df = bb_line(df, None, '1m')\n","        # print(df.tail())\n","\n","        df = dc_line(df, df_5T, '5T')\n","        df = bb_line(df, df_5T, '5T')\n","\n","        df = dc_line(df, df_15T, '15T')\n","        df = bb_line(df, df_15T, '15T')\n","\n","        df = bb_line(df, df_30T, '30T')\n","\n","        # print(time.time() - start_0)\n","\n","        # start_0 = time.time()\n","        df = bb_line(df, df_4H, '4H')\n","        # print(time.time() - start_0)\n","\n","        rec_df['rsi_1m'] = rsi(rec_df, 14)  # Todo - recursive, 250 period\n","        df = df.join(to_lower_tf_v2(df, rec_df.iloc[:, [-1]], [-1], backing_i=0), how='inner')  # <-- join same_tf manual\n","        # print(df.rsi_1m.tail())\n","\n","        if order_side in [\"OPEN\"]:\n","            rec_df_5T['ema_5T'] = ema(rec_df_5T['close'], 195)  # Todo - recursive, 1100 period (5T)\n","            df = df.join(to_lower_tf_v2(df, rec_df_5T, [-1]), how='inner')\n","\n","    except Exception as e:\n","        sys_log.error(\"error in sync_check :\", e)\n","    else:\n","        return df\n","\n","\n","def public_indi(res_df, config, np_timeidx, order_side=\"OPEN\"):\n","\n","    strat_version = config.strat_version\n","    res_df = dc_level(res_df, '5T', 1)\n","    res_df = bb_level(res_df, '5T', 1)\n","    # res_df = st_level(res_df, '5T', 1)\n","\n","    res_df = dc_level(res_df, '15T', 1)\n","    res_df = bb_level(res_df, '15T', 1)\n","    res_df = dtk_plot(res_df, dtk_itv2='15T', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line, np_timeidx=np_timeidx)\n","\n","    # res_df = st_level(res_df, '15T', 1)\n","\n","    # res_df = dc_level(res_df, '30T', 1)\n","    # res_df = bb_level(res_df, '30T', 1)\n","    # res_df = st_level(res_df, '30T', 1)\n","\n","    # res_df = bb_level(res_df, 'H', 1)\n","\n","    res_df = bb_level(res_df, '4H', 1)\n","\n","    res_df['dc_upper_v2'.format(strat_version)] = res_df['high'].rolling(config.loc_set.zone.dc_period).max()\n","    res_df['dc_lower_v2'.format(strat_version)] = res_df['low'].rolling(config.loc_set.zone.dc_period).min()\n","\n","    res_df['zone_dc_upper_v2'.format(strat_version)] = res_df['high'].rolling(config.loc_set.zone.zone_dc_period).max()\n","    res_df['zone_dc_lower_v2'.format(strat_version)] = res_df['low'].rolling(config.loc_set.zone.zone_dc_period).min()\n","\n","    if order_side in [\"OPEN\"]:\n","        # start_0 = time.time()\n","        candle_score_v2(res_df, 'T', unsigned=False)\n","        # print(\"~ wick_score() elapsed time : {}\".format(time.time() - start_0))\n","\n","        # start_0 = time.time()\n","        h_candle_v3(res_df, '15T')\n","        h_candle_v3(res_df, 'H')\n","        # sys_log.warning(\"~ h_wick_score elapsed time : {}\".format(time.time() - start_0))\n","        # print(\"wick_score() ~ h_candle() elapsed time : {}\".format(time.time() - start_0))\n","\n","        hc_itv = 'H'\n","        h_candle_col = ['open_{}'.format(hc_itv), 'high_{}'.format(hc_itv), 'low_{}'.format(hc_itv), 'close_{}'.format(hc_itv)]\n","        candle_score_v2(res_df, hc_itv, ohlc_col=h_candle_col, unsigned=False)\n","\n","    #     temp indi.    #\n","    # res_df[\"ma30_1m\"] = res_df['close'].rolling(30).mean()\n","    # res_df[\"ma60_1m\"] = res_df['close'].rolling(60).mean()\n","    # res_df = dtk_plot(res_df, dtk_itv2='15T', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line, np_timeidx=np_timeidx)\n","\n","    return\n","\n","def ep_out(res_df, config, op_idx, e_j, tp_j, np_datas, open_side):  \n","  h, l = np_datas\n","  strat_version = config.strat_version\n","  ep_out = 0\n","  \n","  if strat_version in ['v3_4']:\n","    if e_j - op_idx >= config.ep_set.ep_out_tick:\n","      ep_out = 1\n","  else:\n","    if open_side == OrderSide.SELL:\n","      short_rtc_1_ = res_df['short_rtc_1_{}'.format(strat_version)].to_numpy()  # id 에 따라 dynamic 변수라 이곳에서 numpy 화 진행\n","      short_rtc_gap_ = res_df['short_rtc_gap_{}'.format(strat_version)].to_numpy()\n","      if l[e_j] <= short_rtc_1_[tp_j] - short_rtc_gap_[tp_j] * config.ep_set.ei_k:\n","        ep_out = 1\n","    else:\n","      long_rtc_1_ = res_df['long_rtc_1_{}'.format(strat_version)].to_numpy()  # iloc 이 빠를까, to_numpy() 가 빠를까  # 3.94 ms --> 5.34 ms (iloc)\n","      long_rtc_gap_ = res_df['long_rtc_gap_{}'.format(strat_version)].to_numpy()\n","      if h[e_j] >= long_rtc_1_[tp_j] + long_rtc_gap_[tp_j] * config.ep_set.ei_k:\n","        ep_out = 1\n","  \n","  return ep_out\n","\n","def ep_loc_point2(res_df, config, i, out_j, point2_list, side=OrderSide.SELL):\n","  dc_upper_1T, dc_upper_15T, dc_lower_1T, dc_lower_15T, close, resi_T, sup_T, wick_score = point2_list\n","  allow_ep_in = 1\n","  if config.strat_version in ['v5_2']:\n","    if side == OrderSide.SELL:\n","      allow_ep_in *= (dc_upper_1T[i - 1] <= dc_upper_15T[i]) & \\\n","            (dc_upper_15T[i - 1] != dc_upper_15T[i])\n","    else:\n","      allow_ep_in *= (dc_lower_1T[i - 1] >= dc_lower_15T[i]) & \\\n","              (dc_lower_15T[i - 1] != dc_lower_15T[i])\n","\n","  if config.strat_version in ['v3_4']:\n","    wick_score_list = literal_eval(config.ep_set.point2.wick_score_list)\n","    if side == OrderSide.SELL:\n","      allow_ep_in *= close[i] < sup_T[i - 1]\n","      if len(wick_score_list) != 0:\n","        allow_ep_in *= wick_score[i] < -wick_score_list[0]\n","    else:\n","      allow_ep_in *= close[i] > resi_T[i - 1]\n","      if len(wick_score_list) != 0:\n","        allow_ep_in *= wick_score[i] > wick_score_list[0]\n","\n","  if allow_ep_in:\n","    out_j = i\n","  return allow_ep_in, out_j\n","\n","\n","# vectorized calc.\n","def ep_loc_v2(res_df, config, np_timeidx, show_detail=True, ep_loc_side=OrderSide.SELL):\n","    strat_version = config.strat_version\n","\n","    # ------- param init ------- #\n","    open_side = None\n","    len_df = len(res_df)\n","    mr_res = np.ones(len_df)\n","    zone_arr = np.full(len_df, 'n')\n","\n","    # ------ process 한번에 처리해서 param_check 만 ver. 별로 하면 될 것 ------ #\n","    #     => public_indi() 가 될 것\n","    #     1. 사용한 param 정보와 matching 된 data 병렬로 나열 logging 될 것\n","    tp_fee, out_fee = calc_tp_out_fee_v2(config)\n","\n","    # ------------ candle_score ------------ #    \n","    wick_score_list = literal_eval(config.loc_set.point.wick_score_list)\n","    if len(wick_score_list) != 0:\n","      score_itv_list = literal_eval(config.loc_set.point.score_itv_list)\n","      # ------ candle_score_v0 (1m initial tick 기준임) ------ #  Todo - higher timeframe 경우 back_data 사용해야함\n","      for wick_score_, score_itv_ in zip(wick_score_list, score_itv_list):\n","        wick_score = res_df['wick_score_{}'.format(score_itv_)].to_numpy()\n","        if ep_loc_side == OrderSide.SELL:\n","          mr_res *= wick_score <= -wick_score_\n","        else:\n","          mr_res *= wick_score >= wick_score_\n","\n","    # -------------- spread scheduling -------------- #\n","    if config.loc_set.zone.short_spread != \"None\":\n","      bb_base_5T = res_df['bb_base_5T'].to_numpy()  # to_numpy() 는 ep_loc 에서 진행됨\n","      bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","      bb_upper_5T = res_df['bb_upper_5T'].to_numpy()\n","      dc_lower_5T = res_df['dc_lower_5T'].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= (bb_base_5T - bb_lower_5T - tp_fee * bb_base_5T) / (bb_base_5T - bb_lower_5T + out_fee * bb_base_5T) >= config.loc_set.zone.short_spread\n","      else:\n","        # mr_res *= (bb_base_5T - dc_lower_5T - tp_fee * bb_upper_5T) / (bb_base_5T - dc_lower_5T + out_fee * bb_base_5T) >= config.loc_set.zone.long_spread\n","        mr_res *= (bb_upper_5T - dc_lower_5T - tp_fee * bb_upper_5T) / (bb_upper_5T - dc_lower_5T + out_fee * bb_upper_5T) >= config.loc_set.zone.long_spread\n","\n","    # -------------- dtk -------------- #\n","    if config.loc_set.zone.dt_k != \"None\":\n","      # ------ dc_v2 ------ #\n","      dc_lower_v2 = res_df['dc_lower_v2'.format(strat_version)].to_numpy()\n","      short_dtk_1_ = res_df['short_dtk_1_{}'.format(strat_version)].to_numpy() - \\\n","              res_df['short_dtk_gap_{}'.format(strat_version)].to_numpy() * config.loc_set.zone.dt_k\n","      dc_upper_v2 = res_df['dc_upper_v2'.format(strat_version)].to_numpy()\n","      long_dtk_1_ = res_df['long_dtk_1_{}'.format(strat_version)].to_numpy() + \\\n","              res_df['long_dtk_gap_{}'.format(strat_version)].to_numpy() * config.loc_set.zone.dt_k\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= dc_lower_v2 >= short_dtk_1_\n","      else:\n","        mr_res *= dc_upper_v2 <= long_dtk_1_\n","\n","    # ------------ zone rejection  ------------ #\n","    # config 로 통제할 수 없는 rejection 은 strat_version 으로 조건문을 나눔 (lvrg_set 과 동일)\n","    if config.loc_set.zone.zone_rejection:    \n","\n","        # ------ envel. ------ #\n","        # ep_loc check 기준 idx 가 entry 기준이라는 걸 명심\n","        if strat_version in ['v3_2']:\n","          hc_itv = '15T'\n","          dc_itv = '15T'\n","          shift_num = [0, to_itvnum(hc_itv)]\n","          div_res = [1, 0]\n","          for itv_num, res in zip(shift_num, div_res):\n","            close_ = res_df['close_{}'.format(hc_itv)].shift(itv_num).to_numpy()  # close_bar timein 사용하는 경우, 특수로 shift(0) 사용가능\n","            if ep_loc_side == OrderSide.SELL:\n","              dc_lower_ = res_df['dc_lower_%s' % dc_itv].shift(itv_num).to_numpy()\n","              mr_res *= (close_ < dc_lower_) == res\n","            else:\n","              dc_upper_ = res_df['dc_upper_%s' % dc_itv].shift(itv_num).to_numpy()\n","              mr_res *= (close_ > dc_upper_) == res\n","\n","        # if strat_version in ['v3_3', 'v3_4']:\n","        #   hc_itv = '15T'\n","        #   dc_itv = '15T'\n","        #   itv_num = to_itvnum(hc_itv)\n","        #   close_ = res_df['close_{}'.format(hc_itv)].shift(itv_num).to_numpy()   # 따라서 future_data 사용시, shifting 필요함\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     dc_lower_ = res_df['dc_lower_%s' % dc_itv].shift(itv_num).to_numpy()\n","        #     mr_res *= close_ < dc_lower_\n","        #   else:\n","        #     dc_upper_ = res_df['dc_upper_%s' % dc_itv].shift(itv_num).to_numpy()\n","        #     mr_res *= close_ > dc_upper_\n","\n","        # ------ degree ------ #\n","        # if strat_version in ['v3_3', 'v3_4']:\n","        #   norm_close_15 = res_df['norm_close_15'].to_numpy()\n","        #   b1_norm_close_15 = res_df['norm_close_15'].shift(15).to_numpy()\n","        #   degree_list = literal_eval(config.loc_set.zone.degree_list)\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     mr_res *= norm_close_15 <= -degree_list[0]\n","        #     # mr_res *= b1_norm_close_15 <= -degree_list[1]\n","        #   else:\n","        #     mr_res *= norm_close_15 >= degree_list[0]\n","        #     # mr_res *= b1_norm_close_15 >= degree_list[1]\n","\n","        # ------ bb ------ #\n","        close = res_df['close'].to_numpy()\n","\n","        # if strat_version in ['v3_3']:\n","        #   open = res_df['open'].to_numpy()\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     bb_lower_1m = res_df['bb_lower_1m'].to_numpy()\n","        #     # mr_res *= close <= bb_lower_1m\n","        #     mr_res *= open <= bb_lower_1m\n","        #   else:\n","        #     bb_upper_1m = res_df['bb_upper_1m'].to_numpy()\n","        #     # mr_res *= close >= bb_upper_1m\n","        #     mr_res *= open >= bb_upper_1m\n","\n","        if strat_version in ['v5_2']:\n","          bb_upper2_ = res_df['bb_upper2_%s' % config.loc_set.zone.bbz_itv].to_numpy()\n","          bb_lower2_ = res_df['bb_lower2_%s' % config.loc_set.zone.bbz_itv].to_numpy()\n","          if ep_loc_side == OrderSide.SELL:\n","            mr_res *= bb_upper2_ < close\n","          else:\n","            mr_res *= bb_lower2_ > close\n","\n","        # ------ dc ------ #        \n","        # if strat_version in ['v3_3']:\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     dc_lower_ = res_df['dc_lower_1m'].to_numpy()\n","        #     b1_dc_lower_ = res_df['dc_lower_1m'].shift(1).to_numpy()\n","        #     mr_res *= dc_lower_ < b1_dc_lower_\n","        #   else:\n","        #     dc_upper_ = res_df['dc_upper_1m'].to_numpy()\n","        #     b1_dc_upper_ = res_df['dc_upper_1m'].shift(1).to_numpy()\n","        #     mr_res *= dc_upper_ > b1_dc_upper_\n","\n","        if strat_version in ['v3_5']:\n","          dc_base_3T = res_df['dc_base_3T'].to_numpy()\n","          if ep_loc_side == OrderSide.SELL:\n","            short_ep_ = res_df['short_ep_{}'.format(strat_version)].to_numpy()\n","            mr_res *= short_ep_ <= dc_base_3T\n","            \n","            dc_base_3T_rollmin = res_df['dc_base_3T'].rolling(config.loc_set.zone.base_roll_period).min().to_numpy()\n","            mr_res *= dc_base_3T_rollmin == dc_base_3T\n","          else:\n","            long_ep_ = res_df['long_ep_{}'.format(strat_version)].to_numpy()\n","            mr_res *= long_ep_ >= dc_base_3T\n","            \n","            dc_base_3T_rollmax = res_df['dc_base_3T'].rolling(config.loc_set.zone.base_roll_period).max().to_numpy()\n","            mr_res *= dc_base_3T_rollmax == dc_base_3T\n","\n","        # ------ sar ------ #\n","        # if strat_version in ['v3_3']:\n","          # sar_uptrend_3T = res_df['sar_uptrend_3T'].to_numpy()\n","          # if ep_loc_side == OrderSide.SELL:\n","          #   mr_res *= sar_uptrend_3T == 0\n","          # else:\n","          #   mr_res *= sar_uptrend_3T == 1\n","\n","        # ------ ema ------ #\n","        if strat_version in ['v5_2']: # 'v3'\n","          ema_5T = res_df['ema_5T'].to_numpy()\n","          if ep_loc_side == OrderSide.SELL:\n","            mr_res *= close < ema_5T\n","          else:\n","            mr_res *= close > ema_5T\n","\n","    # -------------- zoned tr_set - post_work -------------- #\n","    if config.tr_set.c_ep_gap != \"None\" or config.tr_set.t_out_gap != \"None\":\n","        #       by zone_dtk       #\n","        #         c_zone        #\n","        zone_dc_upper_v2_ = res_df['zone_dc_upper_v2'.format(strat_version)].to_numpy()\n","        long_dtk_plot_1 = res_df['long_dtk_plot_1'].to_numpy() + res_df['long_dtk_plot_gap'].to_numpy() * config.loc_set.zone.zone_dt_k\n","        zone_dc_lower_v2_ = res_df['zone_dc_lower_v2'.format(strat_version)].to_numpy()\n","        short_dtk_plot_1 = res_df['short_dtk_plot_1'].to_numpy() - res_df['short_dtk_plot_gap'].to_numpy() * config.loc_set.zone.zone_dt_k\n","        if ep_loc_side == OrderSide.SELL:\n","          zone_res = zone_dc_upper_v2_ > long_dtk_plot_1  # mr_res 와는 별개임\n","          pos = 'short'\n","        else:\n","          zone_res = zone_dc_lower_v2_ < short_dtk_plot_1\n","          pos = 'long'\n","\n","        # static 여부에 따른 vectorized adj. - dynamic 은 vectorize 불가\n","        if config.ep_set.static_ep and config.tr_set.c_ep_gap != \"None\":\n","          res_df['{}_ep_{}'.format(pos, strat_version)][zone_res] = res_df['{}_ep2_{}'.format(pos, strat_version)][zone_res]\n","        if config.out_set.static_out and config.tr_set.t_out_gap != \"None\":\n","          res_df['{}_out_{}'.format(pos, strat_version)][~zone_res] = res_df['{}_out2_{}'.format(pos, strat_version)][~zone_res]  # t_zone 에 대한 out2 setting \n","        zone_arr = np.where(zone_res == 1, 'c', 't')\n","\n","    return mr_res, zone_arr  # mr_res 의 True idx 가 open signal"]},{"cell_type":"markdown","metadata":{"id":"JjKHyqftzhD7","tags":[]},"source":["### set config (override available)"]},{"cell_type":"code","execution_count":42,"metadata":{"id":"q_4E-zH02WJy","executionInfo":{"status":"ok","timestamp":1648127205329,"user_tz":-540,"elapsed":546,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"outputs":[],"source":["#     caution : MARKET / LIMIT spelling   #\n","#      json doesn't support single quotes     #\n","\n","param_dict = \\\n","{\n","  \"strat_version\": \"v3_5\",\n","  \"trader_set\": {\n","    \"run\": 1,\n","    \"df_log\": 0,\n","    \"open_index\": -1,\n","    \"complete_index\": -2,\n","    \"limit_fee\": 0.0002,\n","    \"market_fee\": 0.0004,\n","    \"initial_asset\": 3500,\n","    \"asset_changed\": 0,\n","    \"symbol\": \"ETHUSDT\",\n","    \"symbol_changed\": 0,\n","    \"itv_list\": \"['T', '5T', '15T', '30T', '4H']\",\n","    \"row_list\": \"[200, 160, 30, 25, 25]\",\n","    \"rec_row_list\": \"[250, 1100, 1, 1, 1]\",\n","    \"offset_list\": \"['1h', '1h', '1h', '1h', '1h']\",\n","    \"bar_close_second\": 59,\n","    \"realtime_term\": 0.01,\n","    \"api_retry_term\": 3,\n","    \"check_entry_sec\": 10,\n","    \"entry_execution_wait\": 60,\n","    \"breakout_qty_ratio\": 0.97,\n","    \"qty_check_term\": 30,\n","    \"exit_execution_wait\": 60,\n","    \"close_complete_term\": 5,\n","    \"save_stacked_df\": 0,\n","    \"stacked_df_exist\": 1\n","  },\n","  \"pos_set\": {\n","    \"short_inversion\": 0,\n","    \"long_inversion\": 0,\n","    \"short_ban\": 1,\n","    \"long_ban\": 0\n","  },\n","  \"loc_set\": {\n","    \"zone\": {\n","      \"short_spread\": \"None\",\n","      \"long_spread\": \"None\",\n","      \"tr_thresh\": \"None\",\n","      \"dtk_itv\": \"5T\",\n","      \"dt_k\": \"None\",\n","      \"dc_period\": 135,\n","      \"use_dtk_line\": 0,\n","      \"zone_rejection\": 1,\n","      \"degree_list\": \"[50, 0]\",\n","      \"base_roll_period\": 50,\n","      \"gap_mply\": 1,\n","      \"hc_itv\": 60,\n","      \"bbz_itv\": \"None\",\n","      \"zone_dt_k\": 0.4,\n","      \"zone_dc_period\": 135\n","    },\n","    \"point\": {\n","      \"exp_itv\": \"5T\",\n","      \"rtc_itv1\": \"T\",\n","      \"rtc_itv0\": \"T\",\n","      \"tf_entry\": 5,\n","      \"base_gap\": 0.1,\n","      \"wick_score_list\": \"[]\",\n","      \"body_score_list\": \"[]\",\n","      \"score_itv_list\": \"[]\",      \n","      \"osc_band\": 20\n","    }\n","  },\n","  \"tr_set\": {\n","    \"ep_gap\": 0,\n","    \"tp_gap\": 0,\n","    \"decay_gap\": \"None\",\n","    \"out_gap\": 0,\n","    \"c_ep_gap\": \"None\",\n","    \"t_out_gap\": \"None\",\n","    \"bias_gap\": 0,\n","    \"end_tick\": 500\n","  }, \n","  \"ep_set\": {\n","    \"entry_type\": \"LIMIT\",\n","    \"static_ep\": 1,\n","    \"ei_k\": 0.36,\n","    \"ep_out_tick\": 20,    \n","    \"point2\": {\n","      \"use_point2\": 0,\n","      \"entry_type\": \"MARKET\",\n","      \"wick_score_list\": \"[]\",\n","      \"body_score_list\": \"[]\",\n","      \"score_itv_list\": \"['T']\"\n","    }\n","  },\n","  \"tp_set\": {\n","    \"non_tp\": 0,\n","    \"static_tp\": 1,\n","    \"tp_onexec\": 0,\n","    \"decay_term\": 60,\n","    \"partial_num\": 1,\n","    \"partial_qty_divider\": 1.5\n","  },\n","  \"out_set\": {\n","    \"hl_out\": 1,\n","    \"static_out\": 1,\n","    \"out_onexec\": 0,\n","    \"tf_exit\": \"None\",\n","    \"rsi_exit\": 0\n","  },\n","  \"lvrg_set\": {\n","    \"leverage\": 2,\n","    \"static_lvrg\": 1,\n","    \"allow_float\": 0,\n","    \"target_pct\": 0.12,\n","    \"lvrg_rejection\": 0\n","  }\n","}\n","\n","config = EasyDict(param_dict)\n","# param_json = json.dumps(param_dict, indent=2)"]},{"cell_type":"markdown","metadata":{"id":"dzla8i9_ysmP","jp-MarkdownHeadingCollapsed":true,"tags":[]},"source":["#### save config"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":544,"status":"ok","timestamp":1639994748940,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"FlNGKvW_w2za","outputId":"c575ce69-def0-4e6c-c949-a63707467b2e"},"outputs":[{"name":"stdout","output_type":"stream","text":["/content/drive/My Drive/Colab Notebooks/JnQ/config/config_v5_2.1220_candlejson dumped !\n"]}],"source":["config_name = \"config_v5_2.1220_candlejson\"\n","# config_name = \"config_v3.json\"\n","cfg_full_path = os.path.join(current_path, \"config\", config_name)\n","\n","\n","with open(cfg_full_path, 'w') as cfg:\n","    json.dump(config1, cfg, indent=2)\n","    print(\"{} dumped !\".format(cfg_full_path))"]},{"cell_type":"markdown","metadata":{"id":"rLI8unIyroiC","tags":[]},"source":["## run"]},{"cell_type":"code","source":["funcs = [ep_out, ep_loc_point2, lvrg_set]\n","\n","id_idx_list = [0]  # ID_arr 에서 import 할 id_idx 선택\n","public_override = 1\n","utils_override = 1\n","config_override = 1\n","\n","# ------ config_list 와 같은 org_var 에 override 하는거 다시 생각하기 ------ #\n","ID_list = ID_arr[id_idx_list]\n","utils_list = utils_arr[id_idx_list]\n","config_list = config_arr[id_idx_list]\n","\n","if config_override or utils_override:\n","  assert len(config_list) == 1\n","  if config_override:\n","    config_list[0] = config\n","    ID_list[0] = config.strat_version\n","  \n","config = config_list[0]  # base config = config_list[0]\n","tp_fee, out_fee = calc_tp_out_fee_v2(config)   # -> rev_pr 때문에 일단 이곳에도 선언함\n","\n","# ------- inversion set ------- #\n","inversion = 0\n","fdist_thresh = 1\n","# ------- plot param ------- #\n","show_detail = 0\n","# ------- temp param ------- #\n","allow_osc_touch = 0\n","rsi_gap = 5\n","early_out_tpg = 0.36\n","\n","# ------- just printing config ------- #\n","# ['strat_version', 'pos_set', 'loc_set', 'tr_set', 'ep_set', 'tp_set', 'out_set', 'lvrg_set']\n","_ = [print(json.dumps(config[key_], indent=1), end=' ') for key_ in ['strat_version', 'loc_set', 'tr_set', 'ep_set', 'tp_set', 'out_set', 'lvrg_set']]"],"metadata":{"id":"qBJfPsmJzVIr","executionInfo":{"status":"ok","timestamp":1648127814664,"user_tz":-540,"elapsed":424,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"9c9c2cb9-792d-4ec5-ba50-d2a6f9a7f66f"},"execution_count":63,"outputs":[{"output_type":"stream","name":"stdout","text":["\"v3_5\" {\n"," \"zone\": {\n","  \"short_spread\": \"None\",\n","  \"long_spread\": \"None\",\n","  \"tr_thresh\": \"None\",\n","  \"dtk_itv\": \"5T\",\n","  \"dt_k\": \"None\",\n","  \"dc_period\": 135,\n","  \"use_dtk_line\": 0,\n","  \"zone_rejection\": 1,\n","  \"degree_list\": \"[50, 0]\",\n","  \"base_roll_period\": 50,\n","  \"gap_mply\": 1,\n","  \"hc_itv\": 60,\n","  \"bbz_itv\": \"None\",\n","  \"zone_dt_k\": 0.4,\n","  \"zone_dc_period\": 135\n"," },\n"," \"point\": {\n","  \"exp_itv\": \"5T\",\n","  \"rtc_itv1\": \"T\",\n","  \"rtc_itv0\": \"T\",\n","  \"tf_entry\": 5,\n","  \"base_gap\": 0.1,\n","  \"wick_score_list\": \"[]\",\n","  \"body_score_list\": \"[]\",\n","  \"score_itv_list\": \"[]\",\n","  \"osc_band\": 20\n"," }\n","} {\n"," \"ep_gap\": 0,\n"," \"tp_gap\": 0,\n"," \"decay_gap\": \"None\",\n"," \"out_gap\": 0,\n"," \"c_ep_gap\": \"None\",\n"," \"t_out_gap\": \"None\",\n"," \"bias_gap\": 0,\n"," \"end_tick\": 500\n","} {\n"," \"entry_type\": \"LIMIT\",\n"," \"static_ep\": 1,\n"," \"ei_k\": 0.36,\n"," \"ep_out_tick\": 20,\n"," \"point2\": {\n","  \"use_point2\": 0,\n","  \"entry_type\": \"MARKET\",\n","  \"wick_score_list\": \"[]\",\n","  \"body_score_list\": \"[]\",\n","  \"score_itv_list\": \"['T']\"\n"," }\n","} {\n"," \"non_tp\": 0,\n"," \"static_tp\": 1,\n"," \"tp_onexec\": 0,\n"," \"decay_term\": 60,\n"," \"partial_num\": 1,\n"," \"partial_qty_divider\": 1.5\n","} {\n"," \"hl_out\": 1,\n"," \"static_out\": 1,\n"," \"out_onexec\": 0,\n"," \"tf_exit\": \"None\",\n"," \"rsi_exit\": 0\n","} {\n"," \"leverage\": 2,\n"," \"static_lvrg\": 1,\n"," \"allow_float\": 0,\n"," \"target_pct\": 0.12,\n"," \"lvrg_rejection\": 0\n","} "]}]},{"cell_type":"code","source":["# ------ slicing res_df ------ #\n","res_df = res_df_.loc[pd.to_datetime(\"2020-09-05 00:00:59.999\"):] # pd.to_datetime(\"2022-01-10 00:00:59.999\"), pd.to_datetime(\"2021-10-04 02:39:59.999000\")\n","\n","np_timeidx = np.array([intmin_np(date_) for date_ in res_df.index.to_numpy()])\n","\n","# ------------ public_indi ------------ # - 딱히 반복될 이유가 없는 phase - annot. 달때, why 까지 적어주면 좋음\n","start_0 = time.time()\n","if public_override:\n","    public_indi(res_df, config, np_timeidx)  # 현재 대부분의 시간은 h_candle 에서 소비되고 있음\n","else:\n","    utils_public.public_indi(res_df, config, np_timeidx)\n","print(\"public_indi elapsed time :\", time.time() - start_0)\n","\n","# ------------ make data_list ------------ # - 반복될 이유가 없는 phase - public_indo 에 종속\n","start_0 = time.time()\n","ohlc_cols = ['open', 'high', 'low', 'close']\n","ohlc_list = [res_df[col_].to_numpy() for col_ in ohlc_cols]\n","point2_cols = ['dc_upper_T', 'dc_upper_15T', 'dc_lower_T', 'dc_lower_15T', 'close', 'resi_T', 'sup_T'] + ['wick_score_{}'.format(s_itv) for s_itv in literal_eval(config.ep_set.point2.score_itv_list)]\n","point2_list = [res_df[col_].to_numpy() for col_ in point2_cols]\n","market_data_cols = ['close', 'bb_lower_5T', 'bb_upper_5T', 'rsi_T', 'haopen', 'hahigh', 'halow', 'haclose']   # Todo - public_indi 이전에 해야할지도 모름\n","market_data_list = [res_df[col_].to_numpy() for col_ in market_data_cols]\n","print(\"make data_list elapsed time :\", time.time() - start_0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WstWVNihCNH8","executionInfo":{"status":"ok","timestamp":1648127833343,"user_tz":-540,"elapsed":2682,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"c3af06e0-628c-46d3-960c-ffb65666c20b"},"execution_count":64,"outputs":[{"output_type":"stream","name":"stdout","text":["public_indi elapsed time : 1.3387694358825684\n","make data_list elapsed time : 0.0012066364288330078\n"]}]},{"cell_type":"markdown","source":["### idep_plot"],"metadata":{"id":"RqRF1eyZ0xBL"}},{"cell_type":"code","source":["# ------ edit utils config ------ #\n","# config_list[0].loc_set.point.base_gap = -0.0\n","# config_list[0].tr_set.ep_gap = 0.5\n","# # # config_list[0].tr_set.tp_gap = 0.5\n","config_list[0].tr_set.out_gap = 1.3\n","# config_list[0].tr_set.bias_gap = 1.5\n","# #  rs_channel_v2(res_df_, period=6, itv='T', type='OUT')"],"metadata":{"id":"_iYcJk8nK8Yq","executionInfo":{"status":"ok","timestamp":1648127943506,"user_tz":-540,"elapsed":400,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"execution_count":71,"outputs":[]},{"cell_type":"code","source":["if utils_override:   # 현재, utils_override 하는 경우 1개의 ID 만 허용함 \n","  start_0 = time.time()\n","  enlist_rtc(res_df, config_list[0], np_timeidx)\n","  print(\"enlist_rtc elapsed time :\", time.time() - start_0)\n","  start_0 = time.time()\n","  enlist_tr(res_df, config_list[0], np_timeidx)    \n","  print(\"enlist_tr elapsed time :\", time.time() - start_0)\n","else:\n","    start_0 = time.time()\n","    for utils_, config_ in zip(utils_list, config_list):\n","        utils_.enlist_rtc(res_df, config_, np_timeidx)\n","        utils_.enlist_tr(res_df, config_, np_timeidx)\n","    print(\"elapsed time :\", time.time() - start_0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iI39YI_5GguK","executionInfo":{"status":"ok","timestamp":1648127945837,"user_tz":-540,"elapsed":566,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"764aa674-3cde-4682-eb22-413e9b22e701"},"execution_count":72,"outputs":[{"output_type":"stream","name":"stdout","text":["enlist_rtc elapsed time : 0.048215627670288086\n","enlist_tr elapsed time : 0.4631803035736084\n"]}]},{"cell_type":"code","source":["# ------ edit loc_set config ------ #\n","config_list[0].loc_set.zone.base_roll_period = 50"],"metadata":{"id":"gfDSOGMd91rE","executionInfo":{"status":"ok","timestamp":1648127848882,"user_tz":-540,"elapsed":1,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"execution_count":68,"outputs":[]},{"cell_type":"code","source":["open_info_df = get_open_info_df(ep_loc_v2, res_df, np_timeidx, ID_list, config_list, id_idx_list)  # --> point & dur. 관련 (loc_set) param 에 종속 (open_info 가 변경되는게 아니라면, 재실행할 필요없음)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9DPgykxQ92mU","executionInfo":{"status":"ok","timestamp":1648127948575,"user_tz":-540,"elapsed":2348,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"5962c14a-6762-429f-92e9-a3bef0c167d3"},"execution_count":73,"outputs":[{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 2.2044241428375244\n"]}]},{"cell_type":"code","source":["# ------ edit entry & exit (ep, tp, out, ..) config ------ #\n","# config_list[0].ep_set.ei_k = -0.\n","# config_list[0].ep_set.ep_out_tick = 20 -> v3_4 use this config.\n","# config_list[0].ep_set.point2.use_point2 = 1\n","# config_list[0].ep_set.point2.entry_type = \"LIMIT\"\n","# config_list[0].ep_set.point2.wick_score_list = str([])\n","# config_list[0].tp_set.static_tp = 1\n","# config_list[0].tp_set.non_tp = 0 # 0 1\n","# config_list[0].out_set.hl_out = 1\n","# config_list[0].out_set.tf_exit = \"None\" # 15 \"None\"\n","config_list[0].lvrg_set.static_lvrg = 0\n","config_list[0].lvrg_set.target_pct = 0.01\n","# config_list[0].lvrg_set.lvrg_rejection = 0\n","# config_list[0].lvrg_set.leverage = 2"],"metadata":{"id":"KqVkg236t_f2","executionInfo":{"status":"ok","timestamp":1648128004056,"user_tz":-540,"elapsed":479,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"execution_count":75,"outputs":[]},{"cell_type":"code","source":["short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_bias_arr, long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_bias_arr = \\\n","get_res(res_df, open_info_df, ohlc_list, point2_list, market_data_list, config_list, np_timeidx, funcs, test_ratio=0.0, plot_is=1, signi=False)   # open 이 많을 수록 en_ex_pairing elapsed time : 11.58370590209961"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":606},"id":"HHq6cr9GPBot","executionInfo":{"status":"ok","timestamp":1648128008266,"user_tz":-540,"elapsed":3765,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"d8df1051-e85d-423d-acde-cf3463c007e1"},"execution_count":76,"outputs":[{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 1.2245395183563232\n","short_obj.shape : (635, 5)\n","long_obj.shape : (632, 5)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1728x576 with 6 Axes>"],"image/png":"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9uqrr2Zvvvmm/j1jjB188MGx1NFPDN61a9eySy65RP/7S1/6ku0roIASV3f37t2subnZ9vuLLrqILVy4UL923759phi8r7/+OsXgpUSJEiVKnqleZKw1vf322+yKK65ggBKD96233tK/a2pqYnv27Kl6vVRLjz76KLv55ptNnw0cOJCVSiXb2PiUKFGiRImSXcqCjAWU2Ll79+5lRx55pOM1s2bNYq+++qpjSAi/eRnXsQBYPp9nL7zwAnvkkUf0cBaUKNVTIg9egjCwYcMGzJs3Dw8//DCeeuoptLW1AQDee+897Nq1C9deey0aGhrA8zxGjBiBo446CgDQpUsX7Ny5E7t378awYcNw5ZVXxl63fD6PQqFQ9X87HnjgAXznO99Br1690NzcjO9///v461//CgAoFAoYMWIEAGDQoEG49957cccdd2D79u0AgG984xv6Lujw4cPxwx/+EK+88goAoLW1FQsXLsRPfvITFAoFnHvuuRg1ahSeeuqp2O+XIAiCqC/qRcaOHDkShUIBjY2NuOaaa9CvXz88+OCDAIBnnnkGRxxxBM477zwUCgX8z//8DxYvXowPP/wQAHDYYYehc+fOyOVyuOiiizB58mTcdtttpvwvueQS/OMf/8BHH30U+30SBEEQ9UlHlbGnnnoqjjzySPA8jy5duuC2227Dtm3bsHz5ctvr77nnHgwfPhxf/OIX9Xvwm5fbOlYURTz55JPYt28fpk2bBsZYrPdJEB2F1K3MlCh1pHTRRRcxxhj7whe+YPq8X79+7LHHHmMbN25kn3/+OXvnnXfYpEmTGAB2wgknsOXLl7Ndu3axN954g/30pz8NvPO5dOlSduGFFzp+v2bNGmZl8ODBDAD74Q9/yJ5//nn9WlEU2W9/+1u2bds2tnHjRnbHHXewQqHAALBu3bqxRYsWsd27d7ONGzeym2++mfE8r/921qxZbNOmTWz37t1szZo17JZbbtF/C4ANHjyYvfbaa2zv3r1sxYoVehtQokSJEiVKXqkeZOwtt9zCPv/8c7Zr1y72/PPPV5U9adIktnz5crZ371722muv6fkAimfU5s2b2e7du9mbb77Jxo0bV1WX5cuXs8suuyz1Z0WJEiVKlLKVOqKMPf/88/X8N2/ezP7617+ykSNH6t8bZeyBBx7IGGNs3759bNeuXXrS8vbKy20de+KJJzLG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\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["idep_plot_v6 elapsed time : 1.8621418476104736\n"]}]},{"cell_type":"markdown","metadata":{"jp-MarkdownHeadingCollapsed":true,"tags":[],"id":"Ksth13T0spcQ"},"source":["### significance_v2"]},{"cell_type":"code","execution_count":49,"metadata":{"id":"pZlZCr2lspcR","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1648127577426,"user_tz":-540,"elapsed":79807,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"c65d57be-1b5a-42e3-d972-dae3e98ab0b3"},"outputs":[{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 0.44989466667175293\n","short_obj.shape : (731, 5)\n","long_obj.shape : (704, 5)\n","idep_plot_v6 elapsed time : 0.07793426513671875\n","en_ex_pairing elapsed time : 0.48810911178588867\n","short_obj.shape : (727, 5)\n","long_obj.shape : (696, 5)\n","idep_plot_v6 elapsed time : 0.07494378089904785\n","en_ex_pairing elapsed time : 0.4734182357788086\n","short_obj.shape : (722, 5)\n","long_obj.shape : (687, 5)\n","idep_plot_v6 elapsed time : 0.07988524436950684\n","en_ex_pairing elapsed time : 0.4833638668060303\n","short_obj.shape : (715, 5)\n","long_obj.shape : (681, 5)\n","idep_plot_v6 elapsed time : 0.07767629623413086\n","en_ex_pairing elapsed time : 0.49747371673583984\n","short_obj.shape : (711, 5)\n","long_obj.shape : (677, 5)\n","idep_plot_v6 elapsed time : 0.07647848129272461\n","en_ex_pairing elapsed time : 0.489987850189209\n","short_obj.shape : (703, 5)\n","long_obj.shape : (672, 5)\n","idep_plot_v6 elapsed time : 0.07891106605529785\n","en_ex_pairing elapsed time : 0.5040102005004883\n","short_obj.shape : (701, 5)\n","long_obj.shape : (665, 5)\n","idep_plot_v6 elapsed time : 0.08074045181274414\n","en_ex_pairing elapsed time : 0.5204362869262695\n","short_obj.shape : (694, 5)\n","long_obj.shape : (658, 5)\n","idep_plot_v6 elapsed time : 0.0829312801361084\n","en_ex_pairing elapsed time : 0.5232458114624023\n","short_obj.shape : (690, 5)\n","long_obj.shape : (654, 5)\n","idep_plot_v6 elapsed time : 0.07329034805297852\n","en_ex_pairing elapsed time : 0.5319156646728516\n","short_obj.shape : (686, 5)\n","long_obj.shape : (645, 5)\n","idep_plot_v6 elapsed time : 0.07424759864807129\n","en_ex_pairing elapsed time : 0.5302317142486572\n","short_obj.shape : (682, 5)\n","long_obj.shape : (641, 5)\n","idep_plot_v6 elapsed time : 0.07507753372192383\n","en_ex_pairing elapsed time : 0.5530645847320557\n","short_obj.shape : (679, 5)\n","long_obj.shape : (634, 5)\n","idep_plot_v6 elapsed time : 0.07553839683532715\n","en_ex_pairing elapsed time : 0.8424785137176514\n","short_obj.shape : (669, 5)\n","long_obj.shape : (625, 5)\n","idep_plot_v6 elapsed time : 0.07505178451538086\n","en_ex_pairing elapsed time : 0.5598587989807129\n","short_obj.shape : (666, 5)\n","long_obj.shape : (622, 5)\n","idep_plot_v6 elapsed time : 0.07576584815979004\n","en_ex_pairing elapsed time : 0.5760378837585449\n","short_obj.shape : (663, 5)\n","long_obj.shape : (616, 5)\n","idep_plot_v6 elapsed time : 0.07152652740478516\n","en_ex_pairing elapsed time : 0.5833892822265625\n","short_obj.shape : (656, 5)\n","long_obj.shape : (610, 5)\n","idep_plot_v6 elapsed time : 0.07247400283813477\n","en_ex_pairing elapsed time : 0.5783295631408691\n","short_obj.shape : (651, 5)\n","long_obj.shape : (607, 5)\n","idep_plot_v6 elapsed time : 0.07269954681396484\n","en_ex_pairing elapsed time : 0.5898244380950928\n","short_obj.shape : (645, 5)\n","long_obj.shape : (601, 5)\n","idep_plot_v6 elapsed time : 0.08167576789855957\n","en_ex_pairing elapsed time : 0.6221485137939453\n","short_obj.shape : (640, 5)\n","long_obj.shape : (596, 5)\n","idep_plot_v6 elapsed time : 0.078094482421875\n","en_ex_pairing elapsed time : 0.6347751617431641\n","short_obj.shape : (637, 5)\n","long_obj.shape : (590, 5)\n","idep_plot_v6 elapsed time : 0.07967901229858398\n","en_ex_pairing elapsed time : 0.6098458766937256\n","short_obj.shape : (632, 5)\n","long_obj.shape : (588, 5)\n","idep_plot_v6 elapsed time : 0.07299327850341797\n","en_ex_pairing elapsed time : 0.6177284717559814\n","short_obj.shape : (630, 5)\n","long_obj.shape : (587, 5)\n","idep_plot_v6 elapsed time : 0.07558441162109375\n","en_ex_pairing elapsed time : 0.6541154384613037\n","short_obj.shape : (620, 5)\n","long_obj.shape : (583, 5)\n","idep_plot_v6 elapsed time : 0.08554720878601074\n","en_ex_pairing elapsed time : 0.6813490390777588\n","short_obj.shape : (613, 5)\n","long_obj.shape : (581, 5)\n","idep_plot_v6 elapsed time : 0.07674002647399902\n","en_ex_pairing elapsed time : 0.6350576877593994\n","short_obj.shape : (608, 5)\n","long_obj.shape : (580, 5)\n","idep_plot_v6 elapsed time : 0.08198046684265137\n","en_ex_pairing elapsed time : 0.6476857662200928\n","short_obj.shape : (601, 5)\n","long_obj.shape : (570, 5)\n","idep_plot_v6 elapsed time : 0.07316780090332031\n","en_ex_pairing elapsed time : 0.6579303741455078\n","short_obj.shape : (598, 5)\n","long_obj.shape : (567, 5)\n","idep_plot_v6 elapsed time : 0.0754847526550293\n","en_ex_pairing elapsed time : 0.6739141941070557\n","short_obj.shape : (593, 5)\n","long_obj.shape : (565, 5)\n","idep_plot_v6 elapsed time : 0.0805208683013916\n","en_ex_pairing elapsed time : 0.6733238697052002\n","short_obj.shape : (589, 5)\n","long_obj.shape : (563, 5)\n","idep_plot_v6 elapsed time : 0.07278704643249512\n","en_ex_pairing elapsed time : 0.6771180629730225\n","short_obj.shape : (585, 5)\n","long_obj.shape : (553, 5)\n","idep_plot_v6 elapsed time : 0.07276034355163574\n","en_ex_pairing elapsed time : 0.6943273544311523\n","short_obj.shape : (576, 5)\n","long_obj.shape : (547, 5)\n","idep_plot_v6 elapsed time : 0.07519960403442383\n","en_ex_pairing elapsed time : 0.6731717586517334\n","short_obj.shape : (570, 5)\n","long_obj.shape : (542, 5)\n","idep_plot_v6 elapsed time : 0.07462239265441895\n","en_ex_pairing elapsed time : 0.6909680366516113\n","short_obj.shape : (564, 5)\n","long_obj.shape : (538, 5)\n","idep_plot_v6 elapsed time : 0.0720517635345459\n","en_ex_pairing elapsed time : 0.699439525604248\n","short_obj.shape : (563, 5)\n","long_obj.shape : (530, 5)\n","idep_plot_v6 elapsed time : 0.06945419311523438\n","en_ex_pairing elapsed time : 0.7099215984344482\n","short_obj.shape : (558, 5)\n","long_obj.shape : (529, 5)\n","idep_plot_v6 elapsed time : 0.08237266540527344\n","en_ex_pairing elapsed time : 0.7031927108764648\n","short_obj.shape : (556, 5)\n","long_obj.shape : (523, 5)\n","idep_plot_v6 elapsed time : 0.07083272933959961\n","en_ex_pairing elapsed time : 0.7207615375518799\n","short_obj.shape : (547, 5)\n","long_obj.shape : (521, 5)\n","idep_plot_v6 elapsed time : 0.0719609260559082\n","en_ex_pairing elapsed time : 0.7031075954437256\n","short_obj.shape : (544, 5)\n","long_obj.shape : (518, 5)\n","idep_plot_v6 elapsed time : 0.06890225410461426\n","en_ex_pairing elapsed time : 0.7355935573577881\n","short_obj.shape : (536, 5)\n","long_obj.shape : (502, 5)\n","idep_plot_v6 elapsed time : 0.07619094848632812\n","en_ex_pairing elapsed time : 0.7399287223815918\n","short_obj.shape : (532, 5)\n","long_obj.shape : (499, 5)\n","idep_plot_v6 elapsed time : 0.07361459732055664\n","en_ex_pairing elapsed time : 0.7394924163818359\n","short_obj.shape : (528, 5)\n","long_obj.shape : (497, 5)\n","idep_plot_v6 elapsed time : 0.0777888298034668\n","en_ex_pairing elapsed time : 0.727149248123169\n","short_obj.shape : (524, 5)\n","long_obj.shape : (495, 5)\n","idep_plot_v6 elapsed time : 0.06859636306762695\n","en_ex_pairing elapsed time : 0.738300085067749\n","short_obj.shape : (523, 5)\n","long_obj.shape : (491, 5)\n","idep_plot_v6 elapsed time : 0.06754827499389648\n","en_ex_pairing elapsed time : 0.7461643218994141\n","short_obj.shape : (520, 5)\n","long_obj.shape : (488, 5)\n","idep_plot_v6 elapsed time : 0.06736588478088379\n","en_ex_pairing elapsed time : 0.7500436305999756\n","short_obj.shape : (516, 5)\n","long_obj.shape : (486, 5)\n","idep_plot_v6 elapsed time : 0.0729987621307373\n","en_ex_pairing elapsed time : 0.7683579921722412\n","short_obj.shape : (513, 5)\n","long_obj.shape : (480, 5)\n","idep_plot_v6 elapsed time : 0.06743526458740234\n","en_ex_pairing elapsed time : 0.7704148292541504\n","short_obj.shape : (503, 5)\n","long_obj.shape : (476, 5)\n","idep_plot_v6 elapsed time : 0.07421326637268066\n","en_ex_pairing elapsed time : 0.8022854328155518\n","short_obj.shape : (499, 5)\n","long_obj.shape : (473, 5)\n","idep_plot_v6 elapsed time : 0.06704926490783691\n","en_ex_pairing elapsed time : 0.7889697551727295\n","short_obj.shape : (499, 5)\n","long_obj.shape : (468, 5)\n","idep_plot_v6 elapsed time : 0.06767845153808594\n","en_ex_pairing elapsed time : 0.7923917770385742\n","short_obj.shape : (494, 5)\n","long_obj.shape : (460, 5)\n","idep_plot_v6 elapsed time : 0.06909060478210449\n","en_ex_pairing elapsed time : 0.8231611251831055\n","short_obj.shape : (490, 5)\n","long_obj.shape : (455, 5)\n","idep_plot_v6 elapsed time : 0.06810140609741211\n","en_ex_pairing elapsed time : 0.808295488357544\n","short_obj.shape : (489, 5)\n","long_obj.shape : (453, 5)\n","idep_plot_v6 elapsed time : 0.06804370880126953\n","en_ex_pairing elapsed time : 0.8263139724731445\n","short_obj.shape : (480, 5)\n","long_obj.shape : (441, 5)\n","idep_plot_v6 elapsed time : 0.06699824333190918\n","en_ex_pairing elapsed time : 0.848578691482544\n","short_obj.shape : (479, 5)\n","long_obj.shape : (441, 5)\n","idep_plot_v6 elapsed time : 0.07134342193603516\n","en_ex_pairing elapsed time : 0.8433184623718262\n","short_obj.shape : (474, 5)\n","long_obj.shape : (438, 5)\n","idep_plot_v6 elapsed time : 0.06863951683044434\n","en_ex_pairing elapsed time : 0.83382248878479\n","short_obj.shape : (473, 5)\n","long_obj.shape : (437, 5)\n","idep_plot_v6 elapsed time : 0.06743359565734863\n","en_ex_pairing elapsed time : 0.8334767818450928\n","short_obj.shape : (471, 5)\n","long_obj.shape : (432, 5)\n","idep_plot_v6 elapsed time : 0.06865620613098145\n","en_ex_pairing elapsed time : 0.8212106227874756\n","short_obj.shape : (471, 5)\n","long_obj.shape : (429, 5)\n","idep_plot_v6 elapsed time : 0.0684807300567627\n","en_ex_pairing elapsed time : 0.8210980892181396\n","short_obj.shape : (470, 5)\n","long_obj.shape : (427, 5)\n","idep_plot_v6 elapsed time : 0.07132482528686523\n","en_ex_pairing elapsed time : 0.8417670726776123\n","short_obj.shape : (468, 5)\n","long_obj.shape : (427, 5)\n","idep_plot_v6 elapsed time : 0.07386469841003418\n","en_ex_pairing elapsed time : 0.8343727588653564\n","short_obj.shape : (465, 5)\n","long_obj.shape : (426, 5)\n","idep_plot_v6 elapsed time : 0.07185888290405273\n","en_ex_pairing elapsed time : 0.8666448593139648\n","short_obj.shape : (461, 5)\n","long_obj.shape : (423, 5)\n","idep_plot_v6 elapsed time : 0.07093524932861328\n","en_ex_pairing elapsed time : 0.8385298252105713\n","short_obj.shape : (456, 5)\n","long_obj.shape : (420, 5)\n","idep_plot_v6 elapsed time : 0.06731724739074707\n","en_ex_pairing elapsed time : 0.8680758476257324\n","short_obj.shape : (454, 5)\n","long_obj.shape : (420, 5)\n","idep_plot_v6 elapsed time : 0.07287955284118652\n","en_ex_pairing elapsed time : 0.8579657077789307\n","short_obj.shape : (453, 5)\n","long_obj.shape : (417, 5)\n","idep_plot_v6 elapsed time : 0.06784391403198242\n","en_ex_pairing elapsed time : 0.8566920757293701\n","short_obj.shape : (448, 5)\n","long_obj.shape : (415, 5)\n","idep_plot_v6 elapsed time : 0.06738567352294922\n","en_ex_pairing elapsed time : 0.8632726669311523\n","short_obj.shape : (448, 5)\n","long_obj.shape : (415, 5)\n","idep_plot_v6 elapsed time : 0.06402206420898438\n","en_ex_pairing elapsed time : 0.8841397762298584\n","short_obj.shape : (448, 5)\n","long_obj.shape : (412, 5)\n","idep_plot_v6 elapsed time : 0.06444907188415527\n","en_ex_pairing elapsed time : 0.8768661022186279\n","short_obj.shape : (446, 5)\n","long_obj.shape : (413, 5)\n","idep_plot_v6 elapsed time : 0.07365798950195312\n","en_ex_pairing elapsed time : 0.8914711475372314\n","short_obj.shape : (444, 5)\n","long_obj.shape : (408, 5)\n","idep_plot_v6 elapsed time : 0.06894159317016602\n","en_ex_pairing elapsed time : 0.8785407543182373\n","short_obj.shape : (441, 5)\n","long_obj.shape : (407, 5)\n","idep_plot_v6 elapsed time : 0.07234549522399902\n","en_ex_pairing elapsed time : 0.8768579959869385\n","short_obj.shape : (437, 5)\n","long_obj.shape : (406, 5)\n","idep_plot_v6 elapsed time : 0.07258772850036621\n","en_ex_pairing elapsed time : 0.8965821266174316\n","short_obj.shape : (436, 5)\n","long_obj.shape : (404, 5)\n","idep_plot_v6 elapsed time : 0.06755542755126953\n","en_ex_pairing elapsed time : 0.884549617767334\n","short_obj.shape : (433, 5)\n","long_obj.shape : (402, 5)\n","idep_plot_v6 elapsed time : 0.06727838516235352\n","en_ex_pairing elapsed time : 0.8749246597290039\n","short_obj.shape : (432, 5)\n","long_obj.shape : (401, 5)\n","idep_plot_v6 elapsed time : 0.0672464370727539\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1728x576 with 36 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# from google.colab import output\n","# ------------ survey param ------------ #\n","itv_num_list = [1, 3, 5, 15]\n","itv_list = ['15m', '30m', '1h', '4h']\n","# itv_list = ['3m', '5m', '15m', '30m', '1h', '4h']\n","# val_list = np.arange(, 2.0, 0.1)     # prcn 1\n","val_list = np.arange(0.0, 1.5, 0.02)  # prcn 2\n","# val_list = np.arange(-0.695, -0.75, -0.005)    # prcn 3\n","# val_list = np.arange(0.944, 0.945, 0.0001)    # prcn 4\n","# val_list = np.arange(20, 80, 5)   # prcn -1\n","# val_list = np.arange(200, 180, -5)   # prcn -2\n","\n","# ------------ get survey_res ------------ #\n","result = []\n","config_list_copy = copy.deepcopy(config_list)\n","for set_val in val_list:\n","  # ------------ open 결정 이전의 인자값 ------------ #\n","  # ------ point * mr_res ------ #\n","  # # config_list_copy[0].loc_set.zone.degree_list = set_val\n","  # config_list_copy[0].loc_set.zone.base_roll_period = set_val\n","  # # config_list_copy[0].loc_set.point2.wick_score_list = str([set_val])\n","  # open_info_df = get_open_info_df(ep_loc_v2, res_df, np_timeidx, ID_list, config_list_copy, id_idx_list)\n","\n","  # ------------ open 결정 이후의 인자값 ------------ #\n","  # ------ utils ------ #\n","  config_list_copy[0].tr_set.out_gap = set_val  \n","  for utils_, config_ in zip(utils_list, config_list_copy):\n","    # enlist_rtc(res_df, config_, np_timeidx)\n","    enlist_tr(res_df, config_, np_timeidx)\n","\n","  # ------ entry, exit (ep, tp, out vars.) ------ #\n","  # config_list_copy[0].ep_set.ep_out_tick = set_val  \n","\n","  try:\n","    result.append(get_res(res_df, open_info_df, ohlc_list, point2_list, market_data_list, config_list_copy, np_timeidx, funcs, test_ratio=0.3, plot_is=1, signi=True))\n","  except:\n","    pass\n","    \n","survey_res_list = [np.array(result)[:, s_i::3] for s_i in range(3)]   # 3 for s, l, b\n","# short_res, long_res, both_res = survey_res_list\n","\n","# ------------ plot survey_res ------------ #\n","title_list = [\"short\", \"long\", \"both\"]\n","sub_title_list = ['prcn', 'rc', 'len_pr', 'dpf', 'wr', 'sr', 'acc_pr', 'sum_pr', 'min_pr', 'liqd', 'acc_mdd', 'sum_mdd']\n","space_ = \" \" * 120\n","\n","fig = plt.figure(figsize=(24, 8))\n","plt.style.use('dark_background')\n","gs = gridspec.GridSpec(nrows=1,\n","                        ncols=3,\n","                        # height_ratios=[1, 1, 1]\n","                      )\n","# nrows, ncols, h_r = 3, 3, [1, 1, 1]\n","nrows, ncols, h_r = 3, 4, [1, 1, 1]\n","# nrows, ncols, h_r = 4, 3, [1, 1, 1, 1]\n","# if d_idx == 0:\n","# else:\n","  # nrows, ncols, h_r = 2, 2, [1, 1]\n","\n","for d_idx, (title_name, survey_res) in enumerate(zip(title_list, survey_res_list)):  \n","  inner_gs = gs[d_idx].subgridspec(nrows=nrows,\n","                        ncols=ncols,\n","                        height_ratios=h_r\n","                      )\n","  for in_idx, (data_, sub_title) in enumerate(zip(survey_res.T, sub_title_list)):\n","    plt.subplot(inner_gs[in_idx])\n","    plt.plot(val_list[:len(result)], data_.ravel())  # 앞에서부터 len(result) 만큼만\n","    plt.title(sub_title)\n","\n","plt.suptitle(space_.join(title_list))\n","plt.show()\n","# print(\"\\n\")"]},{"cell_type":"markdown","source":["### legacy"],"metadata":{"id":"1GVZ03zDyU2N"}},{"cell_type":"markdown","source":["#### main_functions"],"metadata":{"id":"IWO7KkqltMFt"}},{"cell_type":"code","source":["def get_open_info_df(ep_loc_v2, res_df, np_timeidx, ID_list, config_list, id_idx_list):\n","  start_0 = time.time()\n","  # ------ get mr_res, zone_arr ------ #\n","  short_mr_res_obj = np.array([ep_loc_v2(res_df, config_, np_timeidx, show_detail=True, ep_loc_side=OrderSide.SELL) for config_ in config_list])\n","  long_mr_res_obj = np.array([ep_loc_v2(res_df, config_, np_timeidx, show_detail=True, ep_loc_side=OrderSide.BUY) for config_ in config_list])\n","  short_open_idx_list = [np.where(res_df['short_open_{}'.format(id)].to_numpy() * mr_res)[0] for id, mr_res in zip(ID_list, short_mr_res_obj[:, 0].astype(np.float64))]   # \"point * mr_Res\"\n","  long_open_idx_list = [np.where(res_df['long_open_{}'.format(id)].to_numpy() * mr_res)[0] for id, mr_res in zip(ID_list, long_mr_res_obj[:, 0].astype(np.float64))]  # zip 으로 zone (str) 과 묶어서 dtype 변경됨\n","\n","  # ------ open_info_arr ------ #\n","  short_side_list = [np.full(len(list_), OrderSide.SELL) for list_ in short_open_idx_list]\n","  long_side_list = [np.full(len(list_), OrderSide.BUY) for list_ in long_open_idx_list]\n","\n","  short_zone_list = [zone_res[short_open_idx] for zone_res, short_open_idx in zip(short_mr_res_obj[:, 1], short_open_idx_list)]\n","  long_zone_list = [zone_res[long_open_idx] for zone_res, long_open_idx in zip(long_mr_res_obj[:, 1], long_open_idx_list)]\n","\n","  short_id_list = [np.full(len(list_), id) for id, list_ in zip(ID_list, short_open_idx_list)]\n","  long_id_list = [np.full(len(list_), id) for id, list_ in zip(ID_list, long_open_idx_list)]\n","\n","  selected_id_idx = np.arange(len(id_idx_list))\n","  short_id_idx_list = [np.full(len(list_), id) for id, list_ in zip(selected_id_idx, short_open_idx_list)]\n","  long_id_idx_list = [np.full(len(list_), id) for id, list_ in zip(selected_id_idx, long_open_idx_list)]\n","\n","  # ------ get open_info_df ------ #\n","  #   series 만들어서 short / long 끼리 합치고 둘이 합치고, 중복은 우선 순위 정해서 제거\n","  short_open_df_list = [pd.DataFrame(index=index_, data=np.vstack((data_)).T, columns=['side', 'zone', 'id', 'id_idx']) for index_, data_ in zip(short_open_idx_list, zip(short_side_list, short_zone_list, short_id_list, short_id_idx_list))]\n","  long_open_df_list = [pd.DataFrame(index=index_, data=np.vstack((data_)).T, columns=['side', 'zone', 'id', 'id_idx']) for index_, data_ in zip(long_open_idx_list, zip(long_side_list, long_zone_list, long_id_list, long_id_idx_list))]\n","\n","  open_info_df = pd.concat(short_open_df_list + long_open_df_list)\n","  # ------ sorting + unique ------ #\n","  open_info_df.sort_index(inplace=True)\n","  # print(len(open_info_df))\n","  # print(len(open_info_df))\n","  # open_info_df.head()\n","  print(\"get_open_info_df elapsed time :\", time.time() - start_0)\n","  return open_info_df[~open_info_df.index.duplicated(keep='first')]  # 먼저 순서를 우선으로 지정  "],"metadata":{"id":"MY1csdNRLGsk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def get_res(res_df, open_info_df, ohlc_list, point2_list, market_data_list, config_list, np_timeidx, funcs, test_ratio=0.3, plot_is=True, signi=False):\n","  # ------------ make open_info_list ------------ #\n","  open_idx = open_info_df.index.to_numpy()\n","  len_df = len(res_df)\n","  s_idx = (open_idx < int(len_df * (1 - test_ratio))) == plot_is\n","  s_open_info_df = open_info_df[s_idx]\n","  s_open_idx = open_idx[s_idx]\n","\n","  open_info_list = [s_open_info_df[col_].to_numpy() for col_ in s_open_info_df.columns]\n","  side_arr, zone_arr, id_arr, id_idx_arr = open_info_list\n","\n","  # ------------ get paired_res ------------ #\n","  start_0 = time.time()\n","  paired_res = en_ex_pairing(res_df, s_open_idx, open_info_list, ohlc_list, point2_list, market_data_list, config_list, np_timeidx, funcs)\n","  # valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr = paired_res\n","  print(\"en_ex_pairing elapsed time :\", time.time() - start_0)  #  0.37 --> 0.3660471439361572 --> 0.21(lesser if)\n","\n","  # ------------ idep_plot ------------ #\n","  start_0 = time.time()\n","  h, l = ohlc_list[1:3]\n","  res = idep_plot_v6(len_df, h, l, s_open_idx, side_arr, paired_res, inversion=False, sample_ratio=1 - test_ratio, signi=signi)\n","  print(\"idep_plot_v6 elapsed time :\", time.time() - start_0)   # 1.40452 (v6) 1.4311 (v5)\n","\n","  return res"],"metadata":{"id":"eiQ36_SLLE3w"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def idep_plot_v6(len_df, h, l, open_idx, side_arr, paired_res, inversion=False, sample_ratio=0.7, title_position=(0.5, 0.5), fontsize=15, signi=False):\n","    if not signi:\n","        plt.style.use(['dark_background', 'fast'])\n","        fig = plt.figure(figsize=(24, 8))\n","        gs = gridspec.GridSpec(nrows=2,  # row 몇 개\n","                               ncols=3,  # col 몇 개\n","                               height_ratios=[10, 1]\n","                               # height_ratios=[10, 10, 1]\n","                               )\n","    gs_idx = 0\n","    # plt.suptitle(key)\n","\n","    if sample_ratio is not None:\n","      sample_len = int(len_df * sample_ratio)\n","    else:\n","      sample_len = len_df\n","\n","    # ------ short & long data preparation ------ #\n","    # start_0 = time.time()\n","    valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr, bias_arr = paired_res    \n","    assert len(valid_openi_arr) != 0, \"assert len(valid_openi_arr) != 0\"    \n","    short_valid_openi_idx = np.where(side_arr[valid_openi_arr] == OrderSide.SELL)[0]  # valid_openi_arr 에 대한 idx, # side_arr,\n","    long_valid_openi_idx = np.where(side_arr[valid_openi_arr] == OrderSide.BUY)[0]\n","\n","    valid_open_idx = open_idx[valid_openi_arr].reshape(-1, 1)\n","\n","    short_obj = np.hstack((pair_price_arr, pair_idx_arr, valid_open_idx))[short_valid_openi_idx]\n","    long_obj = np.hstack((pair_price_arr, pair_idx_arr, valid_open_idx))[long_valid_openi_idx]\n","    both_obj = np.vstack((short_obj, long_obj))\n","    print(\"short_obj.shape :\", short_obj.shape)\n","    print(\"long_obj.shape :\", long_obj.shape)\n","\n","    short_obj, long_obj, both_obj = [np.split(obj_, 5, axis=1) for obj_ in [short_obj, long_obj, both_obj]]\n","\n","    short_lvrg_arr, long_lvrg_arr = [lvrg_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    short_fee_arr, long_fee_arr = [fee_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    short_tpout_arr, long_tpout_arr = [tpout_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    short_bias_arr, long_bias_arr = [bias_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    # print(\"elapsed time :\", time.time() - start_0)\n","\n","    short_true_bias_idx = short_bias_arr[:, 0] <= short_bias_arr[:, 1] # info, threshold (등호의 유무가 매우 유의미함)\n","    long_true_bias_idx = long_bias_arr[:, 0] >= long_bias_arr[:, 1]\n","\n","    # ------ plot_data ------ #\n","    try:\n","      # start_0 = time.time()\n","      short_pr = get_pr(OrderSide.SELL, *short_obj[:2], short_lvrg_arr, short_fee_arr, inversion)\n","      short_total_pr = to_total_pr(len_df, short_pr, short_obj[-2])\n","      short_cum_pr = np.cumprod(short_total_pr)\n","      short_liqd = liquidation(OrderSide.SELL, h, short_obj[:4], short_lvrg_arr, short_fee_arr)\n","      short_prcn, short_rc = precision(short_pr, short_true_bias_idx), recall(short_true_bias_idx)\n","      if signi:\n","        short_idep_res_obj = (short_prcn, short_rc) + get_res_info_nb_v2(sample_len, short_pr, short_total_pr, short_cum_pr, short_liqd)\n","      else:\n","        gs_idx = plot_info_v4(gs, gs_idx, sample_len, short_pr, short_total_pr, short_cum_pr, short_liqd, short_prcn, short_rc, short_lvrg_arr[-1], title_position, fontsize)\n","      # print(\"elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","      gs_idx += 1\n","      print(e)\n","\n","    try:\n","      # start_0 = time.time()\n","      long_pr = get_pr(OrderSide.BUY, *long_obj[:2], long_lvrg_arr, long_fee_arr, inversion)\n","      long_total_pr = to_total_pr(len_df, long_pr, long_obj[-2])\n","      long_cum_pr = np.cumprod(long_total_pr)\n","      long_liqd = liquidation(OrderSide.BUY, l, long_obj[:4], long_lvrg_arr, long_fee_arr)\n","      long_prcn, long_rc = precision(long_pr, long_true_bias_idx), recall(long_true_bias_idx)\n","      if signi:\n","        long_idep_res_obj = (long_prcn, long_rc) + get_res_info_nb_v2(sample_len, long_pr, long_total_pr, long_cum_pr, long_liqd)\n","      else:\n","        gs_idx = plot_info_v4(gs, gs_idx, sample_len, long_pr, long_total_pr, long_cum_pr, long_liqd, long_prcn, long_rc, long_lvrg_arr[-1], title_position, fontsize)\n","      # print(\"elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","      gs_idx += 1\n","      print(e)\n","\n","    try:\n","      # start_0 = time.time()\n","      both_pr = np.vstack((short_pr, long_pr))  # for 2d shape, obj 를 1d 로 만들지 않는 이상, pr 은 2d 유지될 것\n","      both_total_pr = to_total_pr(len_df, both_pr, both_obj[-2])\n","      both_cum_pr = np.cumprod(both_total_pr)\n","      both_liqd = min(short_liqd, long_liqd)\n","      both_true_bias_idx = np.hstack((short_true_bias_idx, long_true_bias_idx))  # for 1d shape\n","      both_prcn, both_rc = precision(both_pr, both_true_bias_idx), recall(both_true_bias_idx)\n","      if signi:\n","        both_idep_res_obj = (both_prcn, both_rc) + get_res_info_nb_v2(sample_len, both_pr, both_total_pr, both_cum_pr, both_liqd)\n","      else:\n","        gs_idx = plot_info_v4(gs, gs_idx, sample_len, both_pr, both_total_pr, both_cum_pr, both_liqd, both_prcn, both_rc, lvrg_arr[-1], title_position, fontsize)\n","      # print(\"elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","      gs_idx += 1\n","      print(e)\n","\n","    if not signi:\n","        for obj, cum_pr in zip([short_obj, long_obj, both_obj], [short_cum_pr, long_cum_pr, both_cum_pr]):\n","          try:\n","            # start_0 = time.time()\n","            gs_idx = frq_dev_plot_v3(gs, gs_idx, len_df, sample_len, obj[-2], cum_pr[-1], fontsize)\n","            # print(\"elapsed time :\", time.time() - start_0)          \n","          except Exception as e:\n","            gs_idx += 1\n","            print(e)\n","\n","        plt.show()\n","        plt.close()\n","        return short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_bias_arr, \\\n","                long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_bias_arr\n","    else:\n","        return [short_idep_res_obj[:-1], long_idep_res_obj[:-1], both_idep_res_obj[:-1]]"],"metadata":{"id":"xafHpMLwESKf"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### get paired_res function"],"metadata":{"id":"EFyWTuscH8VH"}},{"cell_type":"code","source":["def en_ex_pairing(res_df, open_idx, open_info_list, ohlc_list, point2_list, market_data_list, config_list, np_timeidx, funcs):  # 이미 충분히 줄여놓은 idx 임\n","    side_arr, zone_arr, id_arr, id_idx_arr = open_info_list\n","    id_idx_arr = id_idx_arr.astype(int)\n","\n","    ep_out, ep_loc_point2, lvrg_set = funcs\n","\n","    valid_openi_list, pair_idx_list, pair_price_list, lvrg_list, fee_list, tpout_list, bias_list = [[] for li in range(7)]\n","    len_df = len(res_df)\n","    len_open_idx = len(open_idx)\n","    i, open_i = 0, -1  # i for total_res_df indexing\n","\n","    while 1:\n","        # ------------ entry phase ------------ #\n","        open_i += 1  # 확인 끝났으면 조기 이탈(+1), 다음 open_idx 조사 진행\n","        if open_i >= len_open_idx:\n","          break\n","          \n","        # ------ ep_loc ------ #\n","        op_idx = open_idx[open_i]  # open_i 는 i 와 별개로 운영\n","        if op_idx < i:  # i = 이전 거래 끝난후의 res_df index - \"거래 종료후 거래 시작\", '<' : 거래 종료시점 진입 가능하다는 의미\n","            continue\n","\n","        # ------ dynamic data by ID ------ #\n","        #     1. 해당 id 로 config 재할당해야함\n","        id_idx = id_idx_arr[open_i]\n","        config = config_list[id_idx]\n","        strat_version = config.strat_version\n","        open_side = side_arr[open_i]\n","\n","        side_pos = 'short' if open_side == OrderSide.SELL else 'long'\n","        ep_arr = res_df['{}_ep_{}'.format(side_pos, strat_version)].to_numpy()  # Todo - while loop 내에서 to_numpy() 반복하느니, pd_indexing 이 낫지 않을까\n","        tp_arr = res_df['{}_tp_{}'.format(side_pos, strat_version)].to_numpy()  # => eptpout arr_list 만들어서 꺼내 사용하면 될 것\n","        out_arr = res_df['{}_out_{}'.format(side_pos, strat_version)].to_numpy()\n","        bias_info_arr = res_df['{}_bias_info_{}'.format(side_pos, strat_version)].to_numpy()  # ex. rolling(entry ~ end)'s high\n","        bias_thresh_arr = res_df['{}_bias_thresh_{}'.format(side_pos, strat_version)].to_numpy()  # ex. close + dc_T20 * 0.5\n","\n","        # ------ ei_k & point2 ------ #\n","        i = op_idx + 1  # open_signal 이 close_bar.shift(1) 이라고 가정하고 다음 bar 부터 체결확인한다는 의미\n","        if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","            break\n","        exec_j, ep_j, tp_j, out_j, entry_done, en_p, fee = check_eik_point2_exec(res_df, config, op_idx, len_df, open_side, [*ohlc_list, ep_arr], point2_list, ep_out, ep_loc_point2)\n","        i = exec_j\n","        \n","        if not entry_done:\n","            continue\n","\n","        # ------ leverage ------ #\n","        out = out_arr[out_j]  # lvrg_set use out on out_j\n","        leverage = lvrg_set(res_df, config, open_side, en_p, out, fee)  # res_df 변수 사용됨 - 주석 처리 된 상태일뿐\n","        if leverage is None:\n","            continue\n","\n","        exit_done, cross_on = 0, 0\n","        # ------ check tpout_onexec ------ #\n","        # if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","        if config.ep_set.entry_type == \"LIMIT\":\n","            if config.tp_set.tp_onexec:  # dynamic 은 tp_onexec 사용하는 의미가 없음\n","                tp_j = exec_j\n","            if config.out_set.out_onexec:  # dynamic 은 out_onexec 사용하는 의미가 없음\n","                out_j = exec_j\n","        while 1:\n","            # ------------ exit phase ------------ #\n","            i += 1  # entry 다음 tick 부터 exit 허용\n","            if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","                break\n","\n","            if not config.tp_set.static_tp:\n","                tp_j = i\n","            if not config.out_set.static_out:\n","                out_j = i\n","\n","            # ------------ tp ------------ #\n","            if not config.tp_set.non_tp:\n","                exit_done, ex_p, fee = check_limit_tp_exec(res_df, config, open_i, i, tp_j, len_df, fee, open_side, exit_done, [*ohlc_list, [tp_arr]])  # 여기서는 j -> i 로 변경해야함\n","                # if config.tp_set.tp_type in ['LIMIT']:  # 'BOTH' -> 앞으로는, LIMIT 밖에 없을거라 주석처리함\n","                # if not exit_done and config.tp_set.tp_type in ['MARKET', 'BOTH']:\n","\n","            # ------------ out ------------ #\n","            # ------ signal_out ------ #\n","            if not exit_done:\n","              exit_done, cross_on, ex_p, fee = check_market_out_exec(config, open_i, i, len_df, fee, open_side, cross_on, exit_done, [np_timeidx, *market_data_list])\n","            # ------ hl_out ------ #\n","            if config.out_set.hl_out != \"None\":\n","              if not exit_done:  # and i != len_df - 1:                \n","                  exit_done, ex_p, fee = check_out(config, open_i, i, out_j, len_df, fee, open_side, exit_done, [*ohlc_list, out_arr])\n","\n","            if exit_done:  # 이 phase 는 exit_phase 뒤에도 있어야할 것 - entry_done var. 사용은 안하겠지만\n","                # ------ append dynamic vars. ------ #\n","                valid_openi_list.append(open_i)  # side, zone, start_ver arr 모두 openi_list 로 접근하기 위해 open_i 를 담음\n","                pair_idx_list.append([exec_j, i])  # entry & exit (체결 기준임)\n","                pair_price_list.append([en_p, ex_p])\n","                lvrg_list.append(leverage)\n","                fee_list.append(fee)\n","                tpout_list.append([tp_arr[tp_j], out_arr[out_j]])  # for tpout_line plot_check\n","                # bias_list.append([bias_info_arr[exec_j], bias_thresh_arr[exec_j]])  # backtest 에서만 가능한 future_data 사용\n","                bias_list.append([bias_info_arr[exec_j], tp_arr[tp_j]])  # tp = bias_thresh \n","\n","                # open_i += 1  # 다음 open_idx 조사 진행\n","                break\n","\n","        if i >= len_df: # or open_i >= len_open_idx:  # res_df 의 last_index 까지 돌아야함\n","            break\n","        else:\n","            continue\n","\n","    return np.array(valid_openi_list), np.array(pair_idx_list), np.array(pair_price_list), np.array(lvrg_list), np.array(fee_list), np.array(tpout_list), np.array(bias_list)\n","\n","\n","def check_eik_point2_exec(res_df, config, op_idx, len_df, open_side, np_datas, point2_list, ep_out, ep_loc_point2):\n","    o, h, l, c, ep_arr = np_datas\n","    ep_j = op_idx\n","    tp_j = op_idx\n","    out_j = op_idx\n","\n","    strat_version = config.strat_version    \n","    allow_ep_in = 0 if config.ep_set.point2.use_point2 else 1\n","    entry_done = 0\n","    ep = None\n","\n","    if config.ep_set.entry_type == \"LIMIT\":\n","        fee = config.trader_set.limit_fee\n","\n","        for e_j in range(op_idx + 1, len_df):\n","            # ------ index setting for dynamic options ------ #\n","            if not config.ep_set.static_ep:\n","                ep_j = e_j  # dynamic_ep 를 위한 ep_index var.\n","                out_j = e_j  # dynamic_out 를 위한 out_index var. - 조건식이 static_ep 와 같이 있는 이유 모름 => dynamic_lvrg 로 사료됨\n","\n","            if not config.tp_set.static_tp:\n","                tp_j = e_j\n","\n","            # ------ ei_k ------ # - limit 사용하면 default 로 ei_k 가 존재해야함\n","            if ep_out(res_df, config, op_idx, e_j, tp_j, [h, l], open_side):\n","              break\n","\n","            # ------ point2 ------ #\n","            if not allow_ep_in:\n","                allow_ep_in, out_j = ep_loc_point2(res_df, config, e_j, out_j, point2_list, side=open_side)\n","                if allow_ep_in:\n","                  if config.ep_set.point2.entry_type == \"LIMIT\":\n","                    ep_j = e_j\n","                    # print(\"e_j in point2 :\", e_j)\n","                    continue\n","\n","            # ------ check ep_exec ------ #\n","            if allow_ep_in:\n","              if config.ep_set.point2.use_point2 and config.ep_set.point2.entry_type == 'MARKET':\n","                entry_done = 1\n","                ep = c[e_j]\n","                break\n","              else:\n","                if open_side == OrderSide.SELL:\n","                    if h[e_j] >= ep_arr[ep_j]:\n","                        entry_done = 1\n","                        ep = ep_arr[ep_j]\n","                        if o[e_j] >= ep_arr[ep_j]:  # open comp 는 결국, 수익률에 얹어주는 logic (반보수) -> 사용 보류\n","                            ep = o[e_j]\n","                        break\n","                else:\n","                    if l[e_j] <= ep_arr[ep_j]:\n","                        entry_done = 1\n","                        ep = ep_arr[ep_j]\n","                        if o[e_j] <= ep_arr[ep_j]:\n","                            ep = o[e_j]\n","                        break\n","\n","    else:  # market entry\n","        e_j = op_idx + 1\n","        entry_done = 1\n","        ep = c[op_idx]\n","        fee = config.trader_set.market_fee\n","\n","    return e_j, ep_j, tp_j, out_j, entry_done, ep, fee  # 다음 start_i <-- e_j 로 변경\n","    #   e_j => 다음 phase 의 시작 index <-> ep_j : ep 의 기준 index\n","    #   ep_j, tp_j, out_j 가 return 되어야함 - exit phase 에서 이어가기 위함\n","\n","\n","def check_limit_tp_exec(res_df, config, open_i, j, tp_j, len_df, fee, open_side, exit_done, np_datas):\n","    o, h, l, c, tps = np_datas\n","    tp = None\n","    strat_version = config.strat_version\n","    len_tps = len(tps)\n","\n","    for tp_i, tp_arr in enumerate(tps):\n","        #     decay adjustment    #\n","        #     tp_j includes dynamic_j - functionalize  #\n","        try:\n","            if config.tr_set.decay_gap != \"None\":\n","                decay_share = (j - open_i) // config.tp_set.decay_term\n","                decay_remain = (j - open_i) % config.tp_set.decay_term\n","                if j != open_i and decay_remain == 0:\n","                    if open_side == OrderSide.SELL:\n","                        tp_arr[tp_j] += res_df['short_rtc_gap_{}'.format(strat_version)].iloc[open_i] * config.tr_set.decay_gap * decay_share\n","                    else:\n","                        tp_arr[tp_j] -= res_df['long_rtc_gap_{}'.format(strat_version)].iloc[open_i] * config.tr_set.decay_gap * decay_share\n","        except:\n","            pass\n","\n","        if open_side == OrderSide.SELL:\n","            if l[j] <= tp_arr[tp_j]:  # and partial_tp_cnt == tp_i:  # we use static tp now\n","                # if l[j] <= tp_arr[j] <= h[j]: --> 이건 잘못되었음\n","                # partial_tp_cnt += 1 --> partial_tp 보류\n","\n","                # ------ dynamic tp ------ #\n","                if tp_arr[j] != tp_arr[j - 1] and not config.tp_set.static_tp:\n","                    # tp limit 이 불가한 경우 - open 이 이미, tp 를 넘은 경우\n","                    if o[j] < tp_arr[j]:\n","                        tp = o[j]\n","                    # tp limit 이 가능한 경우 - open 이 아직, tp 를 넘지 않은 경우\n","                    else:\n","                        tp = tp_arr[j]\n","                # ------ static tp ------ #\n","                else:\n","                    #   tp limit 이 불가한 경우 - open 이 이미, tp 를 넘은 경우\n","                    if o[j] < tp_arr[tp_j]:  # static 해놓고 decay 사용하면 dynamic 이니까\n","                        if config.tr_set.decay_gap != \"None\" and decay_remain == 0:\n","                            tp = o[j]  # tp_j -> open_i 를 가리키기 때문에 decay 는 한번만 진행되는게 맞음\n","                        else:\n","                            tp = tp_arr[tp_j]\n","                    else:\n","                        tp = tp_arr[tp_j]\n","\n","                if tp_i == len_tps - 1:\n","                    exit_done = 1  # partial 을 고려해 exit_done = 1 상태는 tp_i 가 last_index 로 체결된 경우만 해당\n","\n","        else:\n","            if h[j] >= tp_arr[tp_j]:\n","                # ------ dynamic tp ------ #\n","                if tp_arr[j] != tp_arr[j - 1] and not config.tp_set.static_tp:\n","                    if o[j] > tp_arr[j]:\n","                        tp = o[j]\n","                    else:\n","                        tp = tp_arr[j]\n","\n","                # ------ static tp ------ #\n","                else:\n","                    if o[j] > tp_arr[tp_j]:\n","                        if config.tr_set.decay_gap != \"None\" and decay_remain == 0:\n","                            tp = o[j]\n","                        else:\n","                            tp = tp_arr[tp_j]\n","                    else:\n","                        tp = tp_arr[tp_j]\n","\n","                if tp_i == len_tps - 1:\n","                    exit_done = 1  # partial 을 고려해 exit_done = 1 상태는 tp_i 가 last_index 로 체결된 경우만 해당\n","\n","    if exit_done:\n","        fee += config.trader_set.limit_fee\n","\n","    return exit_done, tp, fee\n","\n","\n","def check_market_out_exec(config, open_i, j, len_df, fee, open_side, cross_on, exit_done, np_datas):\n","    np_timeidx, c, bb_lower_5T, bb_upper_5T, rsi_exit, ha_o, ha_h, ha_l, ha_c = np_datas\n","    tp = None\n","    strat_version = config.strat_version\n","\n","    # ------ timestamp ------ #\n","    if config.out_set.tf_exit != \"None\":\n","        if np_timeidx[j] % config.out_set.tf_exit == config.out_set.tf_exit - 1 and j != open_i:\n","            exit_done = 1\n","\n","    # ------ rsi ------ # -> vectorize 가능함 => 추후 적용\n","    if config.out_set.rsi_exit:\n","        if open_side == OrderSide.SELL:\n","            if (rsi_exit[j - 1] >= 50 - config.loc_set.point.osc_band) & (rsi_exit[j] < 50 - config.loc_set.point.osc_band):\n","                exit_done = 1\n","        else:\n","            if (rsi_exit[j - 1] <= 50 + config.loc_set.point.osc_band) & (rsi_exit[j] > 50 + config.loc_set.point.osc_band):\n","                exit_done = 1\n","\n","    # ------ heikin_ashi ------ #\n","    # if strat_version in ['v3_3']:\n","    #     if open_side == OrderSide.SELL:\n","    #       if (ha_o[j] < ha_c[j]):# & (ha_o[j] == ha_l[j]):   # 양봉 출현\n","    #           exit_done = 1\n","    #     else:\n","    #       if (ha_o[j] > ha_c[j]):# & (ha_o[j] == ha_h[j]):  # 음봉 출현\n","    #           exit_done = 1\n","\n","    # ------------ early out ------------ #\n","    # ------ bb ------ # --> cross_on 기능은 ide latency 개선 여부에 해당되지 않음\n","    if strat_version in ['v5_2']:\n","        if open_side == OrderSide.SELL:\n","            if c[j] < bb_lower_5T[j] < c[j - 1]:\n","                cross_on = 1\n","            if cross_on == 1 and c[j] > bb_upper_5T[j] > c[j - 1]:\n","                exit_done = 1\n","        else:\n","            if c[j] > bb_upper_5T[j] > c[j - 1]:\n","                cross_on = 1\n","            if cross_on == 1 and c[j] < bb_lower_5T[j] < c[j - 1]:\n","                exit_done = 1\n","\n","    if exit_done:\n","        tp = c[j]\n","        fee += config.trader_set.market_fee\n","\n","    return exit_done, cross_on, tp, fee\n","\n","\n","def check_out(config, open_i, j, out_j, len_df, fee, open_side, exit_done, np_datas):\n","    o, h, l, c, out_arr = np_datas\n","    tp = None\n","\n","    if config.out_set.hl_out:\n","        if open_side == OrderSide.SELL:\n","            if h[j] >= out_arr[out_j]:  # check out only once\n","                exit_done = 1\n","        else:\n","            if l[j] <= out_arr[out_j]:  # check out only once\n","                exit_done = 1\n","    else:  # close_out\n","        if open_side == OrderSide.SELL:\n","            if c[j] >= out_arr[out_j]:  # check out only once\n","                exit_done = 1\n","        else:\n","            if c[j] <= out_arr[out_j]:  # check out only once\n","                tp = c[j]\n","                exit_done = 1\n","\n","    if exit_done:\n","        if config.out_set.hl_out:\n","            tp = out_arr[out_j]\n","        else:\n","            tp = c[j]\n","\n","        if open_side == OrderSide.SELL:\n","            if o[j] >= out_arr[out_j]:\n","                tp = o[j]\n","        else:\n","            if o[j] <= out_arr[out_j]:\n","                tp = o[j]\n","\n","        fee += config.trader_set.market_fee\n","\n","    return exit_done, tp, fee"],"metadata":{"id":"qfbtFVMR01UJ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"jp-MarkdownHeadingCollapsed":true,"tags":[],"id":"zQ-roiifspcX"},"source":["#### ep_loc.point & zone legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Js5eL87VspcX"},"outputs":[],"source":["\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 (res_df['close'] < res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(strat_version)] - 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] >= res_df['bb_lower_1m']) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['bb_lower_1m']) &\n","    #                 (res_df['close'] < res_df['bb_lower_1m'])\n","    #                 , res_df['entry_{}'.format(strat_version)] - 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   (res_df['close'] > res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(strat_version)] + 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] <= res_df['bb_upper_1m']) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['bb_upper_1m']) &\n","    #                   (res_df['close'] > res_df['bb_upper_1m'])\n","    #                 , res_df['entry_{}'.format(strat_version)] + 1, res_df['entry_{}'.format(strat_version)])\n","\n","\n","    \n","   # --------------- ema --------------- #   \n","  # res_df['ema5_1m'] = ema(res_df['close'], 5).shift(1)\n","\n","  #   # --------------- cloud bline --------------- #   \n","  # res_df['cloud_bline_1m'] = cloud_bline(res_df, 26).shift(1)\n","  \n","    #       stochastic      #\n","  # res_df['stoch'] = stoch(res_df, 5, 3, 3)\n","\n","    #       fisher      #\n","  # res_df['fisher30'] = fisher(res_df, 30)\n","  # res_df['fisher60'] = fisher(res_df, 60)\n","  # res_df['fisher120'] = fisher(res_df, 120)\n","\n","    #       cctbbo      #\n","  # res_df['cctbbo'], _ = cct_bbo(res_df, 21, 13)\n","\n","    #       ema_roc      #\n","  # res_df['ema_roc'] = ema_roc(res_df['close'], 13, 9)\n","\n","\n","   # ------------------------------ htf data ------------------------------ #    \n","\n","  #             Todo              #\n","  # htf_df = pd.read_excel(date_path2 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # htf_df = pd.read_excel(date_path3 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # htf_df = pd.read_excel(date_path4 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # htf_df = pd.read_excel(date_path5 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # # # # htf_df = pd.read_excel(date_path6 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","\n","  # # ---- htf index slicing ---- #\n","  # htf_df = htf_df.loc[:res_df.index[-1]]\n","  \n","  # print(\"res_df.index[-1] :\", res_df.index[-1])\n","  # print(\"htf_df.index[-1] :\", htf_df.index[-1])\n","\n","  # res_df = dc_line(res_df, htf_df, '5m')\n","  # res_df = dc_level(res_df, '5m', 1)\n","\n","\n","  # # # if \"sma4\" in res_df.columns:\n","  # # #   res_df.drop(\"sma4\", axis=1, inplace=1)\n","\n","  # # htf_df['sma'] = htf_df['close'].rolling(60).mean()\n","  # # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, htf_df, [-1]), columns=['sma_30m']))\n","  \n","  # htf_df['stoch'] = stoch(htf_df, 13, 3, 3)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, htf_df, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","   \n","  # fifth_df['ema'] = ema(fifth_df['close'], 5)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, fifth_df, [-1]), columns=['ema5']))\n","\n","        # ------------------------------------ short ------------------------------------ # \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 0:\n","        #   mr_score += 1          \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_upper_1m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_upper_3m'].iloc[i] <= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_upper_5m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == 'MARKET':\n","        #   mr_const_cnt += 1\n","        #   if (res_df['close'].iloc[i] - res_df['short_tp'].iloc[i]) / (res_df['short_out'].iloc[i] - res_df['close'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error):  \n","        #     mr_score += 1\n","\n","           \n","        # ------- entry once ------- #   \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == 1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == -1:\n","        #     prev_entry_cnt += 1          \n","        # # # print(\"prev_entry_cnt :\", prev_entry_cnt)\n","\n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] < res_df['bb_lower_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_lower2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_base_1h'].iloc[i]:\n","\n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] < res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","  \n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['low'].iloc[i] > res_df['short_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1\n","\n","\n","\n","        # ------------------------------------ long ------------------------------------ # \n","          \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 1:\n","        #   mr_score += 1   \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 1:\n","        #   mr_score += 1     \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 1:\n","          # mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_lower_1m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_lower_3m'].iloc[i] >= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_lower_5m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == \"MARKET\":\n","          # mr_const_cnt += 1        \n","          # if (res_df['long_tp'].iloc[i] - res_df['close'].iloc[i]) / (res_df['close'].iloc[i] - res_df['long_out'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error): # 일반적으로 dr 상에서 tp 비율이 더 커짐 (tr 보다)\n","          #   mr_score += 1\n","\n","        # -------------- ep limit -------------- #    \n","        # mr_const_cnt += 1\n","        # # if (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # if config.ep_set.min_eplim_pct < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # # if 0 < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        #   # if res_df['st_gap_15m'].iloc[i] / res_df['open'].iloc[i] < 0:\n","        #   #   print(\"i, res_df['st_gap_15m'].iloc[i] :\", i, res_df['st_gap_15m'].iloc[i])\n","        #   mr_score += 1\n","\n","\n","        # -------------- entry once -------------- #    \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == -1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == 1:\n","        #     prev_entry_cnt += 1\n","          \n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","          \n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] > res_df['bb_upper_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_upper2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_base_1h'].iloc[i]:\n","        \n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] > res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","\n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['high'].iloc[i] < res_df['long_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","          \n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1"]},{"cell_type":"markdown","source":["#### dump"],"metadata":{"id":"_blyFhQJUd5X"}},{"cell_type":"code","source":["short_open_res = np.ones(len(res_df))\n","\n","strat_version = config.strat_version\n","\n","short_rtc_1_col, short_rtc_0_col, short_rtc_gap_col = 'short_rtc_1_{}'.format(strat_version), 'short_rtc_0_{}'.format(strat_version), 'short_rtc_gap_{}'.format(strat_version) \n","long_rtc_1_col, long_rtc_0_col, long_rtc_gap_col = 'long_rtc_1_{}'.format(strat_version), 'long_rtc_0_{}'.format(strat_version), 'long_rtc_gap_{}'.format(strat_version) \n","\n","short_rtc_1_col, short_rtc_0_col, short_rtc_gap_col = 'short_rtc_1_{}'.format(strat_version), 'short_rtc_0_{}'.format(strat_version), 'short_rtc_gap_{}'.format(strat_version) \n","long_rtc_1_col, long_rtc_0_col, long_rtc_gap_col = 'long_rtc_1_{}'.format(strat_version), 'long_rtc_0_{}'.format(strat_version), 'long_rtc_gap_{}'.format(strat_version) \n","\n","data_cols = ['open', 'high', 'low']   # Todo - public_indi 이전에 해야할지도 모름 # 'close', 'haopen', 'hahigh', 'halow', 'haclose'\n","rtc_cols = [short_rtc_1_col, short_rtc_0_col, short_rtc_gap_col, long_rtc_1_col, long_rtc_0_col, long_rtc_gap_col]   # Todo - public_indi 이전에 해야할지도 모름\n","\n","short_rtc_1_, short_rtc_0_, short_rtc_gap_, long_rtc_1_, long_rtc_0_, long_rtc_gap_ = [res_df[col_].to_numpy() for col_ in rtc_cols]\n","open, high, low = [res_df[col_].to_numpy() for col_ in data_cols]\n","short_base = (short_rtc_1_ + short_rtc_0_) / 2\n","long_base = (long_rtc_1_ + long_rtc_0_) / 2\n","# back_ha_o = res_df['haopen'].shift(1).to_numpy()\n","# back_ha_c = res_df['haclose'].shift(1).to_numpy()\n","\n","touch_period = 50\n","# short_open_res *= (back_ha_c >= back_ha_o) & (ha_o > ha_c)\n","# short_open_res *= ha_o == ha_h\n","# short_open_res *= np_timeidx % tf_entry == tf_entry - 1     \n","short_a_touch = pd.Series(np.where(high >= short_rtc_0_, np.arange(len(res_df)), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()  # min -> max\n","short_b_touch = pd.Series(np.where(low <= short_rtc_1_, np.arange(len(res_df)), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨\n","\n","short_a_touch_line = get_line(short_a_touch, short_rtc_0_)\n","short_b_touch_line = get_line(short_b_touch, short_rtc_1_)\n","short_en_p = (short_a_touch_line + short_b_touch_line) / 2\n","short_base_b = get_line(short_b_touch, short_base)\n","short_rtc_gap_b = get_line(short_b_touch, short_rtc_gap_)\n","short_open_res *= (high >= short_base_b) & (short_base_b >= open) & (short_a_touch < short_b_touch) & (short_base_b + config.loc_set.point.base_gap * short_rtc_gap_b >= short_base)\n","\n","res_df['short_open_{}'.format(strat_version)] = short_open_res"],"metadata":{"id":"r82KfqFqi9tp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["true_idx = short_open_res == 1\n","\n","# print(((short_a_touch_line + short_b_touch_line) / 2)[true_idx][-100:])\n","print(short_en_p[true_idx][-100:])\n","# print(short_a_touch_line[true_idx][-100:])\n","\n","print(short_a_touch_line)\n","print(short_a_touch)\n","print(short_rtc_0_)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AIt9z1NRj5bJ","executionInfo":{"status":"ok","timestamp":1647565975814,"user_tz":-540,"elapsed":310,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"c1b83639-7041-4745-dacd-d9cff49a205d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[2934.59  2934.59  3028.59  3028.59  3028.59  3026.075 3026.075 3016.09  3014.67  3014.4   3014.4   3014.4   3014.4   3014.4   3014.4   3014.395 3014.315 3014.315 3030.235 3030.235 3030.235 3030.235 3051.18  3051.18  3051.18  3077.275 3076.77  3090.945 3105.1   3105.1   3105.1   3105.1   3105.1   3105.1   3099.205 3099.205 3099.205 3105.495 3105.495 3109.615 3127.43  3123.795 3123.795 3123.795 3112.695 3122.715 3122.715 3122.715 3122.715 3115.2   3114.93  3097.035 3115.31  3115.31  3114.245 3114.15  3114.15  3114.15  3112.2   3110.75  3110.75  3112.16  3112.16  3134.39  3134.39  3134.39  3127.905 3127.905 3127.905 3127.905 3128.595 3128.595 3138.59  3138.59  3147.47  3134.205 3133.04  3134.155 3131.105 3131.105 3131.105 3065.94  3065.94  3065.94  3065.51  3068.    3079.33  3079.33  3079.33  3099.805 3169.595 3169.595 3169.595 3169.04  3140.395 3140.395 3140.395 3148.91  3148.91  3148.91 ]\n","[    nan     nan     nan ... 3158.68 3158.68 3158.68]\n","[    nan     nan     nan ... 763812. 763812. 763812.]\n","[ 388.18  388.18  388.18 ... 3158.68 3158.68 3158.68]\n"]}]},{"cell_type":"code","source":["short_a_touch_line = get_line(short_a_touch, short_rtc_0_)\n","short_b_touch_line = get_line(short_b_touch, short_rtc_1_)\n","short_en_p = (short_a_touch_line + short_b_touch_line) / 2\n","\n","# print(((short_a_touch_line + short_b_touch_line) / 2)[true_idx][-100:])\n","# print(short_en_p[true_idx][-100:])\n","\n","print(short_a_touch_line)\n","print(short_a_touch)\n","print(short_rtc_0_)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GXbSWec4ik3g","executionInfo":{"status":"ok","timestamp":1647565931392,"user_tz":-540,"elapsed":2,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"547b0fc1-0e35-4387-e891-a3af42c18476"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[    nan     nan     nan ... 3158.68 3158.68 3158.68]\n","[    nan     nan     nan ... 763812. 763812. 763812.]\n","[ 388.18  388.18  388.18 ... 3158.68 3158.68 3158.68]\n"]}]},{"cell_type":"code","source":["def get_line(touch, rtc_):\n","  touch_copy = touch.copy()\n","  touch_line = rtc_.copy()\n","\n","  nan_idx = np.isnan(touch_copy)\n","  touch_copy[nan_idx] = 0   # for indexing array\n","  touch_line[touch_copy.astype(int)]\n","  touch_line[nan_idx] = np.nan   # for true comp.\n","\n","  return touch_line"],"metadata":{"id":"fx4iA-T1k6GS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# print(short_b_touch[-100:])\n","# print(short_base_b[-100:])\n","true_idx = short_open_res == 1\n","short_a_touch_line = get_line(short_a_touch, short_rtc_0_)\n","short_b_touch_line = get_line(short_b_touch, short_rtc_1_)\n","\n","print(len(short_a_touch_line))\n","print(len(short_b_touch_line))\n","print(((short_a_touch_line + short_b_touch_line) / 2)[true_idx][-100:])\n","\n","print(short_a_touch_line[true_idx][-100:])\n","print(short_b_touch_line[true_idx][-100:])\n","print(short_open_res[true_idx][-100:])\n","print(short_en_p[true_idx][-100:])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Pk8i59oM4CFZ","executionInfo":{"status":"ok","timestamp":1647565955022,"user_tz":-540,"elapsed":330,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"0835f7be-8671-455a-ae4f-9c0737af43a3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["763830\n","763830\n","[2934.59  2934.59  3028.59  3028.59  3028.59  3026.075 3026.075 3016.09  3014.67  3014.4   3014.4   3014.4   3014.4   3014.4   3014.4   3014.395 3014.315 3014.315 3030.235 3030.235 3030.235 3030.235 3051.18  3051.18  3051.18  3077.275 3076.77  3090.945 3105.1   3105.1   3105.1   3105.1   3105.1   3105.1   3099.205 3099.205 3099.205 3105.495 3105.495 3109.615 3127.43  3123.795 3123.795 3123.795 3112.695 3122.715 3122.715 3122.715 3122.715 3115.2   3114.93  3097.035 3115.31  3115.31  3114.245 3114.15  3114.15  3114.15  3112.2   3110.75  3110.75  3112.16  3112.16  3134.39  3134.39  3134.39  3127.905 3127.905 3127.905 3127.905 3128.595 3128.595 3138.59  3138.59  3147.47  3134.205 3133.04  3134.155 3131.105 3131.105 3131.105 3065.94  3065.94  3065.94  3065.51  3068.    3079.33  3079.33  3079.33  3099.805 3169.595 3169.595 3169.595 3169.04  3140.395 3140.395 3140.395 3148.91  3148.91  3148.91 ]\n","[2943.85 2943.85 3036.43 3036.43 3036.43 3031.78 3031.78 3022.49 3017.34 3017.34 3017.34 3017.34 3017.34 3017.34 3017.34 3017.33 3017.33 3017.33 3036.23 3036.23 3036.23 3036.23 3063.36 3063.36 3063.36 3086.   3084.99 3098.88 3115.   3115.   3115.   3115.   3115.   3115.   3112.41 3112.41 3112.41 3118.99 3118.99 3114.33 3140.   3140.   3140.   3140.   3123.39 3129.17 3129.17 3129.17 3129.17 3125.69 3125.15 3104.92 3121.49 3121.49 3121.49 3121.9  3121.9  3121.9  3121.9  3119.   3119.   3119.   3119.   3146.98 3146.98 3146.98 3135.8  3135.8  3135.8  3135.8  3135.8  3135.8  3144.38 3144.38 3158.64 3141.99 3139.66 3139.37 3144.93 3144.93 3144.93 3075.47 3075.47 3075.47 3074.61 3074.61 3087.29 3087.29 3087.29 3119.61 3186.79 3186.79 3186.79 3178.   3150.79 3150.79 3150.79 3158.68 3158.68 3158.68]\n","[2925.33 2925.33 3020.75 3020.75 3020.75 3020.37 3020.37 3009.69 3012.   3011.46 3011.46 3011.46 3011.46 3011.46 3011.46 3011.46 3011.3  3011.3  3024.24 3024.24 3024.24 3024.24 3039.   3039.   3039.   3068.55 3068.55 3083.01 3095.2  3095.2  3095.2  3095.2  3095.2  3095.2  3086.   3086.   3086.   3092.   3092.   3104.9  3114.86 3107.59 3107.59 3107.59 3102.   3116.26 3116.26 3116.26 3116.26 3104.71 3104.71 3089.15 3109.13 3109.13 3107.   3106.4  3106.4  3106.4  3102.5  3102.5  3102.5  3105.32 3105.32 3121.8  3121.8  3121.8  3120.01 3120.01 3120.01 3120.01 3121.39 3121.39 3132.8  3132.8  3136.3  3126.42 3126.42 3128.94 3117.28 3117.28 3117.28 3056.41 3056.41 3056.41 3056.41 3061.39 3071.37 3071.37 3071.37 3080.   3152.4  3152.4  3152.4  3160.08 3130.   3130.   3130.   3139.14 3139.14 3139.14]\n","[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n","[2934.59  2934.59  3028.59  3028.59  3028.59  3026.075 3026.075 3016.09  3014.67  3014.4   3014.4   3014.4   3014.4   3014.4   3014.4   3014.395 3014.315 3014.315 3030.235 3030.235 3030.235 3030.235 3051.18  3051.18  3051.18  3077.275 3076.77  3090.945 3105.1   3105.1   3105.1   3105.1   3105.1   3105.1   3099.205 3099.205 3099.205 3105.495 3105.495 3109.615 3127.43  3123.795 3123.795 3123.795 3112.695 3122.715 3122.715 3122.715 3122.715 3115.2   3114.93  3097.035 3115.31  3115.31  3114.245 3114.15  3114.15  3114.15  3112.2   3110.75  3110.75  3112.16  3112.16  3134.39  3134.39  3134.39  3127.905 3127.905 3127.905 3127.905 3128.595 3128.595 3138.59  3138.59  3147.47  3134.205 3133.04  3134.155 3131.105 3131.105 3131.105 3065.94  3065.94  3065.94  3065.51  3068.    3079.33  3079.33  3079.33  3099.805 3169.595 3169.595 3169.595 3169.04  3140.395 3140.395 3140.395 3148.91  3148.91  3148.91 ]\n"]}]},{"cell_type":"code","source":["test_ratio=0.3\n","plot_is=1\n","\n","open_idx = open_info_df.index.to_numpy()\n","len_df = len(res_df)\n","s_idx = (open_idx < int(len_df * (1 - test_ratio))) == plot_is\n","s_open_info_df = open_info_df[s_idx]\n","s_open_idx = open_idx[s_idx]\n","\n","open_info_list = [s_open_info_df[col_].to_numpy() for col_ in s_open_info_df.columns]\n","side_arr, zone_arr, id_arr, id_idx_arr = open_info_list\n","\n","# ------------ get paired_res ------------ #\n","start_0 = time.time()\n","paired_res = en_ex_pairing(res_df, s_open_idx, open_info_list, ohlc_list, point2_list, market_data_list, config_list, np_timeidx, funcs)\n","# valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr = paired_res\n","print(\"en_ex_pairing elapsed time :\", time.time() - start_0)  #  0.37 --> 0.3660471439361572 --> 0.21(lesser if)\n","\n","# ------------ idep_plot ------------ #\n","start_0 = time.time()\n","h, l = ohlc_list[1:3]\n","sample_ratio=1 - test_ratio\n","if sample_ratio is not None:\n","  sample_len = int(len_df * sample_ratio)\n","else:\n","  sample_len = len_df\n","\n","# ------ short & long data preparation ------ #\n","# start_0 = time.time()\n","valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr, bias_arr = paired_res    \n","assert len(valid_openi_arr) != 0, \"assert len(valid_openi_arr) != 0\"    \n","short_valid_openi_idx = np.where(side_arr[valid_openi_arr] == OrderSide.SELL)[0]  # valid_openi_arr 에 대한 idx, # side_arr,\n","long_valid_openi_idx = np.where(side_arr[valid_openi_arr] == OrderSide.BUY)[0]\n","\n","valid_open_idx = open_idx[valid_openi_arr].reshape(-1, 1)\n","\n","short_obj = np.hstack((pair_price_arr, pair_idx_arr, valid_open_idx))[short_valid_openi_idx]\n","long_obj = np.hstack((pair_price_arr, pair_idx_arr, valid_open_idx))[long_valid_openi_idx]\n","both_obj = np.vstack((short_obj, long_obj))\n","print(\"short_obj.shape :\", short_obj.shape)\n","print(\"long_obj.shape :\", long_obj.shape)\n","\n","short_obj, long_obj, both_obj = [np.split(obj_, 5, axis=1) for obj_ in [short_obj, long_obj, both_obj]]\n","\n","short_lvrg_arr, long_lvrg_arr = [lvrg_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","short_fee_arr, long_fee_arr = [fee_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","short_tpout_arr, long_tpout_arr = [tpout_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","short_bias_arr, long_bias_arr = [bias_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qjpDlxCoInLJ","executionInfo":{"status":"ok","timestamp":1647001248040,"user_tz":-540,"elapsed":5037,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"8c416639-5139-44dc-9707-a1c50f7c66f8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 4.855237722396851\n","short_obj.shape : (7514, 5)\n","long_obj.shape : (9634, 5)\n"]}]},{"cell_type":"code","source":["# short_bias_arr.shape\n","short_true_bias_idx = short_bias_arr[:, 0] < short_bias_arr[:, 1] # info, threshold\n","long_true_bias_idx = long_bias_arr[:, 0] > long_bias_arr[:, 1]"],"metadata":{"id":"r_4qlQjNI_Vl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# long_true_bias_idx\n","# np.hstack((short_true_bias_idx, long_true_bias_idx))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nOtoKX7fJUs6","executionInfo":{"status":"ok","timestamp":1646789605507,"user_tz":-540,"elapsed":340,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"b56e0cd9-46fd-4c3e-d85c-570aa18d3b52"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([False, False,  True,  True, False, False,  True,  True, False, False, False,  True, False,  True, False,  True, False,  True,  True,  True, False, False,  True,  True,  True, False, False,  True,  True, False,  True, False, False, False,  True, False, False,  True,  True, False, False,  True, False,  True,  True,  True,  True, False,  True,  True, False,  True,  True,  True, False, False,  True, False, False,  True,  True,  True,  True, False, False,  True, False,  True, False, False,  True, False, False, False,  True,  True,  True, False,  True, False, False,  True,  True, False, False, False,  True,  True, False,  True,  True,  True, False, False, False, False,  True, False, False,  True, False, False,  True,  True, False, False,  True,  True,  True,  True, False,  True, False,  True,  True, False, False,  True, False, False,  True,  True, False, False, False, False,  True,  True,  True, False, False, False,  True,  True, False, False,  True, False, False,  True,  True, False,  True, False, False, False,  True,  True, False,  True, False, False, False,  True,  True, False, False, False, False, False, False,  True, False,  True,  True,  True,  True,  True,  True, False,  True,  True,  True,  True,  True,  True,  True,  True, False,  True,  True, False, False, False, False,  True,  True,  True, False,  True,  True, False, False,  True,  True, False,  True, False, False,  True])"]},"metadata":{},"execution_count":127}]},{"cell_type":"code","source":["# print(len(long_pr))\n","# print(len(long_true_bias_idx))\n","print((long_pr.shape))\n","print((long_bias_arr.shape))\n","# print((long_true_bias_idx.shape))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"70wh4eysKqxw","executionInfo":{"status":"ok","timestamp":1647001266151,"user_tz":-540,"elapsed":436,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"d3e8b24f-e74e-415f-c7a9-20d8617d25c9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(9634, 1)\n","(9634, 2)\n"]}]},{"cell_type":"code","source":["print(len(long_pr[long_pr != 1]))\n","len(long_pr[long_pr > 1]) / len(long_pr[long_pr != 1])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OcR_qrEp7Rnu","executionInfo":{"status":"ok","timestamp":1647001306279,"user_tz":-540,"elapsed":348,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"3e8aa179-237a-48e8-a0d0-af56fa26bc5b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["9634\n"]},{"output_type":"execute_result","data":{"text/plain":["0.37315756695038405"]},"metadata":{},"execution_count":40}]},{"cell_type":"code","source":["print(np.sum(long_pr[long_true_bias_idx] > 1) / np.sum(long_true_bias_idx))\n","print(np.sum(long_true_bias_idx) / len(long_true_bias_idx))\n","# long_true_bias_pr = long_pr[long_true_bias_idx]\n","# len(long_true_bias_pr[long_true_bias_pr > 1])\n","# 30 / 66"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MkJS3UGONHJ8","executionInfo":{"status":"ok","timestamp":1646810691555,"user_tz":-540,"elapsed":3,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"aa99b628-93b5-4705-c27b-fe6f80f95df0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.39106145251396646\n","0.599163179916318\n"]}]},{"cell_type":"code","source":["print(get_recall(long_true_bias_idx))\n","print(get_precision(long_pr, long_true_bias_idx))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lvULyeNJKSeP","executionInfo":{"status":"ok","timestamp":1646788110286,"user_tz":-540,"elapsed":5,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"3b10bb5f-238e-4687-f38c-20037f2cded6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.5076923076923077\n","0.45454545454545453\n"]}]},{"cell_type":"code","source":["signi=False\n","if not signi:\n","    plt.style.use(['dark_background', 'fast'])\n","    fig = plt.figure(figsize=(24, 8))\n","    gs = gridspec.GridSpec(nrows=2,  # row 몇 개\n","                            ncols=3,  # col 몇 개\n","                            height_ratios=[10, 1]\n","                            # height_ratios=[10, 10, 1]\n","                            )\n","gs_idx = 0\n","title_position=(0.5, 0.5)\n","fontsize=15"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":33},"id":"Fs1RkHxQKjCX","executionInfo":{"status":"ok","timestamp":1646788777938,"user_tz":-540,"elapsed":349,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"491bcb64-df8e-4b20-a42f-b68e4c670a07"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1728x576 with 0 Axes>"]},"metadata":{}}]},{"cell_type":"code","source":["try:\n","  # start_0 = time.time()\n","  long_pr = get_pr(OrderSide.BUY, *long_obj[:2], long_lvrg_arr, long_fee_arr, inversion)\n","  long_total_pr = to_total_pr(len_df, long_pr, long_obj[-2])\n","  long_cum_pr = np.cumprod(long_total_pr)\n","  long_liqd = liquidation(OrderSide.BUY, l, long_obj[:4], long_lvrg_arr, long_fee_arr)\n","  long_prcn, long_rc = precision(long_pr, long_true_bias_idx), recall(long_true_bias_idx)\n","\n","  if signi:\n","    long_idep_res_obj = (long_prcn, long_rc) + get_res_info_nb_v2(sample_len, long_pr, long_total_pr, long_cum_pr, long_liqd)\n","  else:\n","    gs_idx = plot_info_v4(gs, gs_idx, sample_len, long_pr, long_total_pr, long_cum_pr, long_liqd, long_prcn, long_rc, long_lvrg_arr[-1], title_position, fontsize)\n","  # print(\"elapsed time :\", time.time() - start_0)\n","except Exception as e:\n","  gs_idx += 1\n","  print(e)\n","\n","# plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":183},"id":"X69t-H3tKJdm","executionInfo":{"status":"ok","timestamp":1646788895118,"user_tz":-540,"elapsed":4,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"cf76f45a-850d-4983-d758-8598c0408305"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{}}]},{"cell_type":"code","source":["def precision(pr_list, true_idx):\n","  true_bias_pr = pr_list[true_idx].ravel()\n","  return np.sum(true_bias_pr > 1) / len(true_bias_pr)  # 차원을 고려한 계산\n","\n","def recall(true_idx):\n","  return np.sum(true_idx) / len(true_idx) #  2.16 µs per loop (len) --> 3.78 µs per loop   # false_idx 중에서 tp 체결된 건을 더해주어야함\n","\n","def plot_info_v4(gs, gs_idx, sample_len, pr, total_pr, cum_pr, liqd, prcn, rc, leverage, title_position, fontsize):\n","  try:\n","    plt.subplot(gs[gs_idx])\n","    idep_res_obj = get_res_info_nb_v2(sample_len, pr, total_pr, cum_pr, liqd)\n","    plt.plot(cum_pr)\n","    plt.plot(idep_res_obj[-1], color='gold')\n","    if sample_len is not None:\n","      plt.axvline(sample_len, alpha=1., linestyle='--', color='#ffeb3b')\n","    # title_str = \"prcn : {:.3f} rc : {:.3f}\\n len_pr : {} dpf : {:.3f}\\n wr : {:.3f} sr : {:.3f}\\n acc_pr : {:.3f} sum_pr : {:.3f}\\n\" +\\\n","    #           \"min_pr : {:.3f} liqd : {:.3f}\\n acc_mdd : -{:.3f} sum_mdd : -{:.3f}\\n leverage {}\"\n","    title_str = \"prcn : {:.3f}\\n rc : {:.3f}\\n len_pr : {}\\n dpf : {:.3f}\\n wr : {:.3f}\\n sr : {:.3f}\\n acc_pr : {:.3f}\\n sum_pr : {:.3f}\\n\" +\\\n","              \"min_pr : {:.3f}\\n liqd : {:.3f}\\n acc_mdd : -{:.3f}\\n sum_mdd : -{:.3f}\\n leverage {}\"\n","    plt.title(title_str.format(prcn, rc, *idep_res_obj[:-1], leverage), position=title_position, fontsize=fontsize)\n","  except Exception as e:\n","    print(\"error in plot_info :\", e)\n","\n","  return gs_idx + 1"],"metadata":{"id":"J2nupeDOPdQI"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JNQxkb06ZdTe"},"source":["## plot_check_v2"]},{"cell_type":"code","source":["# ------------------ plot_config ------------------ #\n","save_mode = 0\n","front_plot = 0    # 0, 1, 2 (whole, open, ep_tick)\n","bias_plot = 0     # precision check : 1, recall check : 0\n","pr_descend = 1    # 1 -> 내림차순\n","position = 1      # -1 / 1, 0 (short / long)\n","# tf_plot = 1       # true - false plot\n","# pr_sort = 1     # -> default 1,  이상한 체결 확인하기 좋음\n","# wl_case = 1     # 1 / -1 / 0 (win loss study) --> oid\n","\n","x_max = 500\n","x_margin_mult = 1/30\n","y_margin_mult = 1/30  # 0 \n","\n","prev_plotsize = 100 # 20 100\n","post_plotsize = 60\n","# post_plotsize = config.tr_set.end_tick\n","\n","inversion = 0\n","hedge = 0\n","\n","# ------ show or save ------ #\n","if save_mode:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".ftr\", \"\")\n","  shutil.rmtree(plot_check_dir, ignore_errors=True)  # remove existing dir\n","  os.makedirs(plot_check_dir)\n","  print(plot_check_dir)\n","else:\n","  plot_check_dir = None\n","\n","# ------------ 한 방향에 대해 plot_check 함 (by position var.) ------------ #\n","#   obj by position  \n","if position == -1:\n","  pos_str = \"SELL\"\n","  pr_, obj_ = short_pr, short_obj\n","  arr_list = [short_lvrg_arr, short_fee_arr, short_tpout_arr, short_bias_arr]\n","else:   # both option currently not supported\n","  pos_str = \"BUY\"\n","  pr_, obj_ = long_pr, long_obj\n","  arr_list = [long_lvrg_arr, long_fee_arr, long_tpout_arr, long_bias_arr]\n","pr, obj, [lvrg_arr, fee_arr, tpout_arr, bias_arr] = sort_bypr_v3(pr_, obj_, arr_list, descending=pr_descend)\n","\n","pr_msg = \"%s\\n {} ~ {} -> {:.5f}\\n lvrg : {}\\n fee : {:.4f}\" % (pos_str)  # pos_str 으로 이곳에서 정의함\n","\n","# ------------------ data chunknize ------------------ #\n","np_df = res_df.to_numpy()\n","\n","left_end_idx = obj[2] - prev_plotsize  # left_margin 기준 - entry_idx\n","right_end_idx = obj[3] + post_plotsize\n","invalid_left_end = np.sum(left_end_idx < 0)\n","\n","np_plot_params = np.hstack((left_end_idx, right_end_idx, pr, *obj, lvrg_arr, fee_arr, tpout_arr, bias_arr))[invalid_left_end:]\n","if bias_plot:\n","  bias_arr_ = bias_arr[invalid_left_end:]\n","  if position == -1:\n","    bias_idx = bias_arr_[:, 0] < bias_arr_[:, 1]\n","  else:\n","    bias_idx = bias_arr_[:, 0] > bias_arr_[:, 1]\n","  np_plot_params = np_plot_params[bias_idx]"],"metadata":{"id":"A6QSF9COaHO5","executionInfo":{"status":"ok","timestamp":1648127353308,"user_tz":-540,"elapsed":477,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"execution_count":47,"outputs":[]},{"cell_type":"code","source":["# ------------ make col_idx_dict config ------------ #\n","nonstep_col_list = []\n","step_col_list = []\n","stepmark_col_list = []\n","# ------ set period ------ #\n","hc_itv1 = '5T'\n","hc_itv2 = '15T'\n","\n","rs_itv = 'T'\n","dc_itv = 'T'\n","hdc_itv = '5T'\n","hhdc_itv = 'H'\n","\n","sd_dc_itv = 'T'\n","sd_dc_period1, sd_dc_period2 = 20, 40\n","\n","cbline_itv = '3T'\n","\n","bb_itv = dc_itv\n","hbb_itv = hdc_itv\n","hhbb_itv = hhdc_itv\n","\n","# ------ nonstep_col_list - add info(col, alpha, color, linewidth) ------ #\n","# nonstep_col_list.append([['close'], 1, '#ffffff', 2])\n","\n","# ------ step_col_list - add info(col, alpha, color, linewidth) ------ #\n","# step_col_list.append([['open_{}'.format(hc_itv1), 'close_{}'.format(hc_itv1)], 1, '#ffffff', 2])\n","# step_col_list.append([['open_{}'.format(hc_itv2), 'close_{}'.format(hc_itv2)], 1, '#ffffff', 4])\n","\n","# step_col_list.append([['resi_{}'.format(rs_itv), 'sup_{}'.format(rs_itv)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['resi_out_{}'.format(rs_itv), 'sup_out_{}'.format(rs_itv)], 1, 'dodgerblue', 2])\n","\n","# step_col_list.append([['dc_upper_{}'.format(dc_itv), 'dc_lower_{}'.format(dc_itv)], 1, '#ffeb3b', 2])\n","# step_col_list.append([['dc_upper_{}'.format(hdc_itv), 'dc_lower_{}'.format(hdc_itv)], 1, '#e65100', 2])\n","# step_col_list.append([['dc_upper_{}'.format(hhdc_itv), 'dc_lower_{}'.format(hhdc_itv)], 1, '#c2185b', 4])\n","step_col_list.append([['dc_upper_{}{}'.format(sd_dc_itv, sd_dc_period1), 'dc_lower_{}{}'.format(sd_dc_itv, sd_dc_period1)], 1, '#ffeb3b', 2])\n","step_col_list.append([['dc_upper_{}{}'.format(sd_dc_itv, sd_dc_period2), 'dc_lower_{}{}'.format(sd_dc_itv, sd_dc_period2)], 1, '#e65100', 2])\n","step_col_list.append([['short_base_{}'.format(sd_dc_itv)], 1, '#e70f20', 2])\n","step_col_list.append([['long_base_{}'.format(sd_dc_itv)], 1, '#279e2c', 2])\n","\n","step_col_list.append([['dc_base_{}'.format(cbline_itv)], 1, '#5b9cf6', 2])\n","\n","# step_col_list.append([['bb_upper_{}'.format(bb_itv), 'bb_lower_{}'.format(bb_itv)], 1, '#ffffff', 1])\n","# step_col_list.append([['bb_upper_{}'.format(hbb_itv), 'bb_lower_{}'.format(hbb_itv)], 1, '#ff00ff', 2])\n","# step_col_list.append([['bb_upper_{}'.format(hhbb_itv), 'bb_lower_{}'.format(hhbb_itv)], 1, '#3179f5', 4])\n","\n","# step_col_list.append([['ema_5T'], 1, '#03ed30', 2])\n","\n","# ------ stepmark_col_list - add info(col, alpha, color, linewidth) ------ #\n","# stepmark_col_list.append([['sar_T'], 1, 'dodgerblue', 7])\n","\n","\n","# ------ str to numbcol ------ #\n","nonstep_col_arr = strcol_tonumb(res_df, nonstep_col_list)\n","step_col_arr = strcol_tonumb(res_df, step_col_list)\n","stepmark_col_arr = strcol_tonumb(res_df, stepmark_col_list)\n","\n","col_idx_dict = \\\n","{\n","  \"ohlc_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close']),\n","  \"vp_col_idxs\": get_col_idxs(res_df, ['close', 'volume']),\n","  # \"ohlc_col_idxs\": get_col_idxs(res_df, ['haopen', 'hahigh', 'halow', 'haclose']),  # heikin-ashi ver.\n","  \"nonstep_col_info\": nonstep_col_arr,\n","  \"step_col_info\": step_col_arr,\n","  \"stepmark_col_info\": stepmark_col_arr,\n","  \"ylim_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close'])  # , 'dc_upper_H', 'dc_lower_H', 'dc_upper_15T', 'dc_lower_15T'\n","}"],"metadata":{"id":"FnSydxFXn_f9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648125423838,"user_tz":-540,"elapsed":4,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"0e009d3f-c66f-4a30-faef-d194fddef9bc"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stderr","text":["/content/drive/My Drive/Colab Notebooks/JnQ/funcs/funcs_plot_check.py:10: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  step_col_arr = np.array(col_list)\n"]}]},{"cell_type":"markdown","source":["### plot"],"metadata":{"id":"E-VwJkNQbGI4"}},{"cell_type":"code","source":["_ = [plot_check_v3(np_df, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir, **col_idx_dict) for param_zip in zip(np_plot_params, np_plot_params[::-1])]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1uY_JToA5WfVcs1sJfwx9fgg9qMjw_hWj"},"id":"Roy40BmByyZc","executionInfo":{"status":"error","timestamp":1648127452898,"user_tz":-540,"elapsed":97333,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"f7d403f1-ef23-4d89-f954-ccfcbe7ce53c"},"execution_count":48,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"markdown","source":["### plot_funcs"],"metadata":{"id":"MQ8w8nWVXlGj"}},{"cell_type":"code","source":["def plot_check_v3(data, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir=None, **col_idx_dict):\n","  # start_0 = time.time()\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(30, 18))\n","  nrows, ncols = 2, 2\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                         ncols=ncols,\n","                         height_ratios=[3, 1]\n","                         )\n","  for gs_idx, params in enumerate(param_zip):\n","    ax = fig.add_subplot(gs[gs_idx])\n","    iin, iout, pr, ep, tp, entry_idx, exit_idx, open_idx, lvrg, fee, tp_line, out_line, bias_info, bias_thresh = params\n","\n","    # ------------ add_col section ------------ #\n","    a_data = data[int(iin):int(iout)]\n","    # a_data = data[iin:iout]\n","    # ------ candles ------ #\n","    candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","\n","    # ------ add cols ------ #\n","    [nonstep_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['nonstep_col_info']]\n","    [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","    [stepmark_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['stepmark_col_info']]\n","\n","    # ------ ep, tp + xlim ------ #\n","    eptp_hvline_v3(config, ep, tp, entry_idx, exit_idx, open_idx, tp_line, out_line, bias_info, bias_thresh,\n","                   front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, **col_idx_dict)\n","\n","    #     Todo    #\n","    #     3. outer_price plot 일 경우, gs_idx + nrows 하면 됨\n","\n","    # ------ trade_info ------ #\n","    plt.title(pr_msg.format(entry_idx, exit_idx, pr, lvrg, fee))\n","\n","  if plot_check_dir is None:\n","    plt.show()\n","    print()\n","  else:\n","    fig_name = plot_check_dir + \"/%s.png\" % int(entry_idx)\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","  plt.close()\n","  # print(\"elapsed time :\", time.time() - start_0)\n","\n","  return\n","\n","def eptp_hvline_v3(config, en_p, ex_p, entry_idx, exit_idx, open_idx, tp_line, out_line, bias_info, bias_thresh,\n","                   front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, **col_idx_dict):\n","  # ------ get vertical ticks ------ #\n","  entry_tick = int(entry_idx - iin)\n","  open_tick = entry_tick - int(entry_idx - open_idx)\n","  exit_tick = entry_tick + int(exit_idx - entry_idx)\n","\n","  if front_plot == 1:\n","    x_max = open_tick\n","  elif front_plot == 2:\n","    x_max = entry_tick\n","  if (iout - iin) > x_max:\n","    x_margin = x_max * x_margin_mult\n","    plt.xlim(0 - x_margin, x_max + x_margin)\n","  x0, x1 = plt.gca().get_xlim()\n","  # ------------ hlines ------------ #\n","  # ------ entry & exit ------ #\n","  en_xmin = entry_tick / x1\n","  ex_xmin = exit_tick / x1\n","  plt.axhline(en_p, x0, en_xmin, linewidth=2, linestyle='--', alpha=1, color='lime')  # en_p line axhline\n","  plt.text(x0, en_p, 'en_p :\\n {}'.format(en_p), ha='right', va='center', fontweight='bold')  # en_p line label\n","  plt.axhline(ex_p, ex_xmin, 1, linewidth=2, linestyle='--', alpha=1, color='lime')  # ex_p line axhline (signal 도 포괄함, 존재 의미)\n","  plt.text(x1, ex_p, 'ex_p :\\n {}'.format(ex_p), ha='left', va='center', fontweight='bold')  # ex_p line label\n","\n","  # ------ tpout_line ------ #\n","  plt.axhline(tp_line, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#00ff00')  # ep 와 gap 비교 용이하기 위해 ex_xmin -> 0.1 사용\n","  plt.text(x0, tp_line, '%s' % config.tr_set.tp_gap, ha='right', va='center', fontweight='bold', fontsize=15)\n","  plt.axhline(out_line, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#ff0000')\n","  plt.text(x0, out_line, '%s' % config.tr_set.out_gap, ha='right', va='center', fontweight='bold', fontsize=15)\n","\n","  # ------ bias_line ------ #\n","  plt.axhline(bias_info, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='dodgerblue')\n","  plt.text(x0, bias_info, ' bias_info', ha='left', va='center', fontweight='bold')\n","  plt.axhline(bias_thresh, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#ff8400')\n","  plt.text(x0, bias_thresh, ' bias_thresh', ha='left', va='center', fontweight='bold')\n","\n","  # ------ ylim ------ #\n","  if front_plot:\n","    y_lim_data = a_data[:x_max + 1, col_idx_dict['ylim_col_idxs']]  # +1 for including open_tick\n","  else:\n","    y_lim_data = a_data[:, col_idx_dict['ylim_col_idxs']]\n","  y_min = y_lim_data.min()\n","  y_max = y_lim_data.max()\n","  y_margin = (y_max - y_min) * y_margin_mult\n","  plt.ylim(y_min - y_margin, y_max + y_margin)\n","\n","  # ------------ vline (open_tick, entry_tick, exit_tick) ------------ #\n","  y0, y1 = plt.gca().get_ylim()\n","  l_data = a_data[:exit_tick + 1, col_idx_dict['ohlc_col_idxs'][2]]  # +1 for including exit_tick\n","  open_ymax, en_ymax, ex_ymax = [(l_data[tick_] - y0) / (y1 - y0) - .01 for tick_ in [open_tick, entry_tick, exit_tick]]  # -.05 for margin\n","  plt.axvline(open_tick, 0, open_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')  # 추후, tick 별 세부 정의가 달라질 수 있음을 고려해 multi_line 작성 유지\n","  plt.axvline(entry_tick, 0, en_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  plt.axvline(exit_tick, 0, ex_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","\n","  return"],"metadata":{"id":"cFt6CeZf4yEk"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### legacy"],"metadata":{"id":"q3zisNOTw3jM"}},{"cell_type":"code","source":["_ = [plot_check_v4(np_df, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir, 500, 0.07, 100, **col_idx_dict) for param_zip in zip(np_plot_params, np_plot_params[::-1])]"],"metadata":{"id":"fUFdJVrsw78h"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def plot_check_v4(data, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir=None, vp_range=500, kde_factor=0.05, num_samples=100, **col_idx_dict):\n","  # start_0 = time.time()\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(30, 18))\n","  nrows, ncols = 2, 2\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                         ncols=ncols,\n","                         height_ratios=[3, 1]\n","                         )\n","  for gs_idx, params in enumerate(param_zip):\n","    ax = fig.add_subplot(gs[gs_idx])\n","    iin, iout, pr, ep, tp, entry_idx, exit_idx, open_idx, lvrg, fee, tp_line, out_line, bias_info, bias_thresh = params\n","\n","    # ------------ add_col section ------------ #\n","    iin, iout = int(iin), int(iout)\n","    a_data = data[iin:iout]\n","    # ------ candles ------ #\n","    candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","    \n","    # ------ add cols ------ #\n","    [nonstep_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['nonstep_col_info']]\n","    [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","    [stepmark_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['stepmark_col_info']]\n","\n","    # vp_data = data[iin - vp_range:iin, col_idx_dict['vp_col_idxs']]\n","    # vp_info = [vp_range, vp_data[:, 0], vp_data[:, 1], kde_factor, num_samples]\n","    vp_data = data[iin - vp_range:iin, col_idx_dict['vp_col_idxs']].T\n","    vp_info = [vp_range, *vp_data, kde_factor, num_samples]\n","\n","    # ------ ep, tp + xlim ------ #\n","    eptp_hvline_v4(config, ep, tp, entry_idx, exit_idx, open_idx, tp_line, out_line, bias_info, bias_thresh, \n","                   front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, vp_info, **col_idx_dict)        \n","\n","    #     Todo    #\n","    #     3. outer_price plot 일 경우, gs_idx + nrows 하면 됨\n","\n","    # ------ trade_info ------ #\n","    plt.title(pr_msg.format(entry_idx, exit_idx, pr, lvrg, fee))\n","\n","  if plot_check_dir is None:\n","    plt.show()\n","    print()\n","  else:\n","    fig_name = plot_check_dir +  \"/%s.png\" % int(entry_idx)\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","  plt.close()\n","  # print(\"elapsed time :\", time.time() - start_0)  \n","\n","  return\n","\n","def eptp_hvline_v4(config, en_p, ex_p, entry_idx, exit_idx, open_idx, tp_line, out_line, bias_info, bias_thresh, \n","                   front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, vp_info, **col_idx_dict):\n","  # ------ get vertical ticks ------ #\n","  entry_tick = int(entry_idx - iin)\n","  open_tick = entry_tick - int(entry_idx - open_idx)\n","  exit_tick = entry_tick + int(exit_idx - entry_idx)\n","\n","  if front_plot == 1:\n","    x_max = open_tick\n","  elif front_plot == 2:\n","    x_max = entry_tick\n","  if (iout - iin) > x_max:\n","    x_margin = x_max * x_margin_mult\n","    plt.xlim(0 - x_margin, x_max + x_margin)\n","  x0, x1 = plt.gca().get_xlim()\n","  # ------------ hlines ------------ #\n","  # ------ entry & exit ------ #\n","  en_xmin = entry_tick / x1\n","  ex_xmin = exit_tick / x1\n","  plt.axhline(en_p, x0, en_xmin, linewidth=2, linestyle='--', alpha=1, color='lime')  # en_p line axhline\n","  plt.text(x0, en_p, ' en_p :\\n {}'.format(en_p), ha='right', va='center', fontweight='bold')  # en_p line label\n","  plt.axhline(ex_p, ex_xmin, 1, linewidth=2, linestyle='--', alpha=1, color='lime')  # ex_p line axhline (signal 도 포괄함, 존재 의미)\n","  plt.text(x1, ex_p, ' ex_p :\\n {}'.format(ex_p), ha='left', va='center', fontweight='bold')  # ex_p line label\n","\n","  # ------ tpout_line ------ #\n","  plt.axhline(tp_line, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#00ff00')  # ep 와 gap 비교 용이하기 위해 ex_xmin -> 0.1 사용\n","  plt.text(x0, tp_line, ' %s' % config.tr_set.tp_gap, ha='left', va='center', fontweight='bold')\n","  plt.axhline(out_line, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#ff0000')\n","  plt.text(x0, out_line, ' %s' % config.tr_set.out_gap, ha='left', va='center', fontweight='bold')\n","\n","  # ------ bias_line ------ #\n","  plt.axhline(bias_info, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='dodgerblue')\n","  plt.text(x0, bias_info, ' bias_info', ha='left', va='center', fontweight='bold')\n","  plt.axhline(bias_thresh, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#ff8400')\n","  plt.text(x0, bias_thresh, ' bias_thresh', ha='left', va='center', fontweight='bold')\n","\n","  # ------ volume profile ------ #\n","  vp_range, close, volume, kde_factor, num_samples = vp_info\n","  if iin >= vp_range:\n","    start_0 = time.time()\n","    kde = stats.gaussian_kde(close, weights=volume, bw_method=kde_factor)\n","    kdx = np.linspace(close.min(), close.max(), num_samples)\n","    kdy = kde(kdx)\n","    print(\"kde elapsed_time :\", time.time() - start_0)\n","\n","    kdy_max = kdy.max()\n","    # peaks,_ = signal.find_peaks(kdy)\n","    peaks,_ = signal.find_peaks(kdy, prominence=kdy_max * 0.3)\n","    peak_list = kdx[peaks]   # peak_list\n","    [plt.axhline(peak, linewidth=6, linestyle='-', alpha=1, color='white') for peak in peak_list]\n","    \n","    kdy_ratio = entry_tick / kdy_max # 30 / 0.0001\n","    plt.plot(kdy * kdy_ratio, kdx, color='white')\n","    # plt.plot(pky, pkx, 'bo', color='yellow')\n","\n","  # ------ ylim ------ #\n","  if front_plot:\n","    y_lim_data = a_data[:x_max + 1, col_idx_dict['ylim_col_idxs']]  # +1 for including open_tick\n","  else:\n","    y_lim_data = a_data[:, col_idx_dict['ylim_col_idxs']]\n","  y_min = y_lim_data.min()\n","  y_max = y_lim_data.max()\n","  y_margin = (y_max - y_min) * y_margin_mult\n","  # plt.ylim(y_min - y_margin, y_max + y_margin)\n","\n","  # ------------ vline (open_tick, entry_tick, exit_tick) ------------ #\n","  y0, y1 = plt.gca().get_ylim()\n","  l_data = a_data[:exit_tick + 1, col_idx_dict['ohlc_col_idxs'][2]]  # +1 for including exit_tick\n","  open_ymax, en_ymax, ex_ymax = [(l_data[tick_] - y0) / (y1 - y0) - .01 for tick_ in [open_tick, entry_tick, exit_tick]]  # -.05 for margin\n","  plt.axvline(open_tick, 0, open_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')  # 추후, tick 별 세부 정의가 달라질 수 있음을 고려해 multi_line 작성 유지\n","  plt.axvline(entry_tick, 0, en_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  plt.axvline(exit_tick, 0, ex_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","\n","  return"],"metadata":{"id":"ESReTMpP7SoO"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### sync_check"],"metadata":{"id":"X0FsT-8FZRti"}},{"cell_type":"code","source":["save_plot = 0\n","\n","open_idx_range = reversed(range(0, len(res_df), 1000))\n","plot_range = 100\n","\n","x_max = 400\n","\n","inversion = 0\n","hedge = 0\n","\n","\n","if save_plot:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".ftr\", \"\")\n","  try:\n","    os.mkdir(plot_check_dir)\n","  except:\n","\n","    #     remove existing dir   #\n","    shutil.rmtree(plot_check_dir)\n","    print(plot_check_dir, 'removed !')\n","    os.mkdir(plot_check_dir)\n","    # pass\n","    \n","\n","prev_plotsize = 30\n","post_plotsize = 20\n","\n","\n","\n","h_candle_intv1 = 15\n","h_candle_intv2 = 60\n","if 'hopen_{}'.format(h_candle_intv2) not in res_df.columns:\n","  res_df = h_candle(res_df, h_candle_intv1)\n","  res_df = h_candle(res_df, h_candle_intv2)\n","\n","res_df[\"ma30_1m\"] = res_df['close'].rolling(30).mean()\n","res_df[\"ma60_1m\"] = res_df['close'].rolling(60).mean()\n","\n","res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line)\n","# res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=1, use_dtk_line=1)\n","# break\n","\n","rtc_list = [\"short_tp_1_{}\".format(strat_version), \"short_tp_gap_{}\".format(strat_version), \"long_tp_1_{}\".format(strat_version), \"long_tp_gap_{}\".format(strat_version)]\n","# h_rtc_list = [\"h_short_tp_1\", \"h_short_tp_gap\", \"h_long_tp_1\", \"h_long_tp_gap\"]\n","dtk_list = [\"short_dtk_1_{}\".format(strat_version), \"short_dtk_gap_{}\".format(strat_version), \"long_dtk_1_{}\".format(strat_version), \"long_dtk_gap_{}\".format(strat_version),\n","            # \"short_dtk_1_line\", \"short_dtk_gap_line\", \"long_dtk_1_line\", \"long_dtk_gap_line\",\n","            \"short_dtk_plot_1\", \"short_dtk_plot_gap\", \"long_dtk_plot_1\", \"long_dtk_plot_gap\"]\n","dc_v2_list = ['dc_upper_v2_{}'.format(strat_version), 'dc_lower_v2_{}'.format(strat_version)]\n","\n","\n","ohlc_list = ['open', 'high', 'low', 'close'] # + basic_st_list\n","hcandle_list = ['hopen_%s' % h_candle_intv1, 'hclose_%s' % h_candle_intv1, 'hopen_%s' % h_candle_intv2, 'hclose_%s' % h_candle_intv2]\n","# hcandle_list = ['hopen_%s' % h_candle_intv1, 'hclose_%s' % h_candle_intv1, 'hhigh_%s' % h_candle_intv2, 'hlow_%s' % h_candle_intv2]\n","\n","# --------------------- dc & bb level --------------------- #\n","dc_interval = '1m'\n","hdc_interval = '5m'\n","hhdc_interval = '15m'\n","\n","st_list = ['st_base_%s' % hhdc_interval, 'st_upper_%s' % hhdc_interval, 'st_lower_%s' % hhdc_interval]\n","\n","dc_list = ['dc_upper_%s' % dc_interval, 'dc_lower_%s' % dc_interval]\n","hdc_list = ['dc_upper_%s' % hdc_interval, 'dc_lower_%s' % hdc_interval]\n","hhdc_list = ['dc_upper_%s' % hhdc_interval, 'dc_lower_%s' % hhdc_interval]\n","\n","bb_interval = dc_interval\n","hbb_interval = hdc_interval\n","hhbb_interval = hhdc_interval\n","\n","bb_list = ['bb_upper_%s' % bb_interval, 'bb_lower_%s' % bb_interval]\n","hbb_list = ['bb_upper_%s' % hbb_interval, 'bb_lower_%s' % hbb_interval]\n","hhbb_list = ['bb_upper_%s' % hhbb_interval, 'bb_lower_%s' % hhbb_interval]\n","\n","bbwp_list = ['bbwp', 'bbwp_ma']\n","\n","\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1']\n","senkoub_list = ['senkou_b1']\n","\n","sar_list = ['sar_3m', 'sar_5m', 'sar_15m']\n","\n","ma_list = ['ma30_1m', 'ma60_1m']\n","sma_list = ['sma_1m']\n","\n","ema_list = ['ema_5m']\n","# cb_list = ['cloud_bline_1m']\n","cb_list = ['cloud_bline_30m']\n","# cb_list = ['cloud_bline_5m']\n","\n","\n","\n","# -------------- under price phase -------------- #\n","# macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3']\n","# trix_list = ['trix1', 'trix2', 'trix3']\n","# stoch_list = ['stoch_5m']\n","# fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","# cctbbo_list = ['cctbbo']\n","# emaroc_list = ['ema_roc']\n","rsi_list = ['rsi_%s' % config.loc_set.point.exp_itv] \n","cci_list = ['cci_%s' % config.loc_set.point.exp_itv] \n","\n","\n","# -------------- summation -------------- #\n","# input_colname = ohlc_list + basic_st_list + pline_list + bb_list + hbb_list + sma_list + cb_list + stoch_list + sar_list + dc_list\n","input_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + hhdc_list + dtk_list + dc_v2_list + rsi_list + ema_list + ma_list + st_list# + cci_list\n","\n","# yrange_colname = ohlc_list + basic_st_list + pline_list # currently just used for ymin, ymax\n","yrange_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + hhdc_list + dc_v2_list + ema_list # currently just used for ymin, ymax\n","yrange_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + dc_v2_list + ema_list # currently just used for ymin, ymax\n","\n","\n","\n","odd_cnt = 0\n","obj_i = -1\n","rev_obj_i = 0\n","\n","#   지금, continue 발생시 true / false idx 가 같이 상승하는 문제\n","\n","# while 1:\n","for open_idx in open_idx_range:\n","\n","  # if obj_i >= len_obj or rev_obj_i >= len_obj:\n","  #   break\n","\n","  # if odd_cnt % 2 == 1 and tf_plot: #  loss plot 을 채워야하는 상황\n","  #   rev_obj_i += 1\n","\n","  # else:\n","  #   obj_i += 1\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","  \n","\n","  odd_cnt += 1\n","\n","  # break\n","\n","  print(\"open_idx :\", open_idx)\n","  \n","  plot_df = res_df.iloc[open_idx - prev_plotsize:open_idx + plot_range + post_plotsize][input_colname]\n","  \n","  odds = 1 if odd_cnt % 2 == 1 else 2\n","  if odds == 1:\n","\n","    plt.style.use('dark_background')\n","\n","    fig = plt.figure(figsize=(26, 18))\n","    \n","    gs = gridspec.GridSpec(nrows=2, # row 몇 개 \n","                        ncols=2, # col 몇 개 \n","                        height_ratios=[3, 1]\n","                        )\n","    \n","  ax = fig.add_subplot(gs[odds - 1])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='#26a69a', colordown='#ef5350', alpha=0.5)\n","\n","  # ---------- h_candle ---------- #\n","  alpha = 1\n","  lw = 1\n","  for cd_i, candle in enumerate(hcandle_list):\n","\n","    if cd_i == 2:\n","      lw = 2      \n","    plt.step(np.arange(len(plot_df)), plot_df[candle].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","\n","  # alpha = 0.1\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['hclose_60'].values, plot_df['hopen_60'].values, \n","  #                     where=1, facecolor='#ffffff', alpha=alpha)  \n","  \n","\n","   # --------- ma --------- #\n","  alpha = 1\n","  lw = 2\n","  for ma_i, item in enumerate(ma_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","   # --------- ema --------- #\n","  alpha = 1\n","  lw = 4\n","  for sm_i, item in enumerate(ema_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","    \n","   # --------- st --------- #\n","  alpha = 1\n","  lw = 2\n","  for sm_i, item in enumerate(st_list):\n","      plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#00ff00', linewidth=lw)\n","\n","  # ---------------------- dc_v2 ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(dc_v2_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","  # # ---------------------- dc ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(dc_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","  # # ---------------------- hdc ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(hdc_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#e65100', linewidth=lw)\n","\n","  # # ---------------------- hhdc ---------------------- #\n","  # alpha = 1\n","  # lw = 4\n","  # for sm_i, item in enumerate(hhdc_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#c2185b', linewidth=lw)\n","\n","\n","  # # ---------------------- bb ---------------------- #\n","  # alpha = 1\n","  # lw = 1\n","  # for sm_i, item in enumerate(bb_list):\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","\n","  # alpha = 0.2\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % bb_interval].values, plot_df['bb_lower_%s' % bb_interval].values, \n","  #                     where=plot_df['bb_upper_%s' % bb_interval].values >= plot_df['bb_lower_%s' % bb_interval].values, facecolor='#ffffff', alpha=alpha)   \n","\n","  # # ---------------------- hbb ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(hbb_list):\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ff00ff', linewidth=lw)\n","  \n","  # alpha = 0.2\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % hbb_interval].values, plot_df['bb_lower_%s' % hbb_interval].values, \n","  #                     where=plot_df['bb_upper_%s' % hbb_interval].values >= plot_df['bb_lower_%s' % hbb_interval].values, facecolor='#ff00ff', alpha=alpha) \n","  \n","  # # ---------------------- hhbb ---------------------- #\n","\n","  # alpha = 1\n","  # lw = 4\n","  # for sm_i, item in enumerate(hhbb_list):\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#3179f5', linewidth=lw)\n","  \n","  # alpha = 0.2\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % hhbb_interval].values, plot_df['bb_lower_%s' % hhbb_interval].values, \n","  #                     where=plot_df['bb_upper_%s' % hhbb_interval].values >= plot_df['bb_lower_%s' % hhbb_interval].values, facecolor='#3179f5', alpha=alpha) \n","  \n","  # ------------------- dtk_line (old, tp_line) ------------------- #\n","  \n","  # alpha = 1\n","  # lw = 2\n","  # rtc_ratio_list = [config.loc_set.zone.dt_k]\n","  \n","  # for rtc_k in rtc_ratio_list:    \n","  #   # plt.step(np.arange(len(plot_df)), plot_df['short_dtk_1_line'].values - plot_df['short_dtk_gap_line'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['long_dtk_1_line'].values + plot_df['long_dtk_gap_line'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","\n","  # hy_min = np.min(plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * rtc_k)\n","  # hy_max = np.max(plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * rtc_k)  \n","\n","  # alpha = 1\n","  # lw = 4\n","  # # h_rtc_ratio_list = [config.loc_set.zone.dt_k]\n","  # h_rtc_ratio_list = [config.loc_set.zone.zone_dt_k]\n","  # # h_rtc_ratio_list = [0.272, 0.36, 0.4, 0.5]\n","  \n","  # for h_rtc_k in h_rtc_ratio_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df['short_dtk_plot_1'].values - plot_df['short_dtk_plot_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['long_dtk_plot_1'].values + plot_df['long_dtk_plot_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['h_short_tp_1'].values - plot_df['h_short_tp_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['h_long_tp_1'].values + plot_df['h_long_tp_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","\n","  # # hy_min = np.min(plot_df['short_dtk_plot_1'].values - plot_df['short_dtk_plot_gap'].values * h_rtc_k)\n","  # # hy_max = np.max(plot_df['long_dtk_plot_1'].values + plot_df['long_dtk_plot_gap'].values * h_rtc_k)  \n","\n","  # ------------- y lim ------------- #  \n","  y_max = max(np.max(plot_df[yrange_colname]))\n","  y_min = min(np.min(plot_df[yrange_colname]))\n","  # y_max = max(y_max, y_max_)\n","  # y_min = min(y_min, y_min_)\n","  \n","  # hy_min = np.min(plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * 0.36)\n","  # hy_max = np.max(plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * 0.36)  \n","  # y_max = max(y_max, y_max_, hy_max)\n","  # y_min = min(y_min, y_min_, hy_min)\n","\n","  if np.isnan(y_max) or np.isnan(y_min):\n","    print('continued in yminmax')\n","    continue\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","\n","  plt.ylim(y_min, y_max)\n","\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  #           rsi          #    \n","  plt.subplot(gs[odds + 1])\n","  alpha = 1\n","  for rsi_ in rsi_list:\n","    plt.step(np.arange(len(plot_df)), plot_df[rsi_].values, 'g', alpha=alpha)\n","    # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","    alpha -= 0.2\n","  plt.axhline(50, linestyle='--')\n","  plt.axhline(50 + config.loc_set.point.osc_band, linestyle='--')\n","  plt.axhline(50 - config.loc_set.point.osc_band, linestyle='--')\n","  \n","  plt.axvline(prev_plotsize, linestyle='--')\n","  \n","  #           cci          #    \n","  # plt.subplot(gs[odds + 1])\n","  # alpha = 1\n","  # for cci_ in cci_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cci_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axhline(config.loc_set.point.osc_band, linestyle='--')\n","  # plt.axhline(-config.loc_set.point.osc_band, linestyle='--')\n","  \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","\n","\n","  if len(plot_df) > x_max:\n","    x_margin = x_max / 20\n","    plt.xlim(0 - x_margin, x_max + x_margin)\n","\n","\n","  if not save_plot:\n","    if odds == 2:\n","      plt.show()\n","      plt.close()\n","  \n","  else:\n","    # ---------- save mode ---------- #\n","    fig_name = plot_check_dir +  \"/%s.png\" % t_i\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","\n","  # plt.close()  \n","  print()\n","\n","  # break\n"],"metadata":{"id":"inQ6f-CDZYkr"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"13a-U32Uy50I"},"source":["### brief np_pr survey"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"L9LdjV2uUWnp"},"outputs":[],"source":["# plot_pr_list[:100]\n","plt.plot(np_pr)\n","plt.axhline(1)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"TBE0l6dHRYrE"},"source":["### close & pr comp."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":877},"executionInfo":{"elapsed":1436,"status":"ok","timestamp":1636355589887,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"-txULkhXRbz5","outputId":"7cda9fc7-4a4e-4c52-ffa3-a974b5f7c66f"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 3 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 3 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]}],"source":["#     chunky survey 필요함    #\n","chunk_size = 50000\n","\n","sync_pr = np.ones(len(res_df))\n","sync_tr = np.zeros(len(res_df))\n","# sync_tr = np.empty(len(res_df))\n","# sync_tr[:] = np.nan\n","\n","max_tr = np.max(tp_ratio_list)\n","min_tr = np.min(tp_ratio_list)\n","\n","for ck_i in range(0, len(res_df), chunk_size):\n","\n","  chunked_df = res_df.iloc[ck_i:ck_i + chunk_size]\n","  # break\n","\n","  for pr_, eptp_idx, tr_ in zip(pr_list[ck_i:ck_i + chunk_size], trade_list[ck_i:ck_i + chunk_size], tp_ratio_list[ck_i:ck_i + chunk_size]):\n","    # print(pr_, eptp_idx)\n","    sync_pr[eptp_idx[-1][0]] = pr_\n","    sync_tr[eptp_idx[-1][0]] = tr_\n","    # break\n","\n","  chunked_pr = sync_pr[ck_i:ck_i + chunk_size]\n","  chunked_tr = sync_tr[ck_i:ck_i + chunk_size]\n","  chunked_tr = np.where(np.isnan(chunked_tr), pd.Series(chunked_tr).shift(1), chunked_tr)\n","\n","  # plt.figure(figsize=(8, 6))\n","\n","  plt.subplot(311)\n","  plt.plot(np.arange(len(chunked_df)), chunked_df['close'])\n","  # plt.show()\n","\n","  plt.subplot(312)\n","  plt.plot(np.cumprod(chunked_pr))\n","  \n","  plt.subplot(313)\n","  plt.plot(chunked_tr)\n","  plt.ylim(min_tr + 0.5 * (max_tr - min_tr), max_tr)\n","  \n","  plt.show()\n","  print()\n"]},{"cell_type":"markdown","metadata":{"id":"Qys2Bw5Ou3u9"},"source":["### plot indi. legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pi5ntOOVu6JT"},"outputs":[],"source":["\n","  # ---------------------- ma ---------------------- #\n","   # --------- ema --------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(ema_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  #   # --------- sma --------- #\n","  # alpha = 1\n","  # for sm_i, sma in enumerate(sma_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 4\n","  #   plt.step(np.arange(len(plot_df)), plot_df[sma].values, alpha=alpha, color='#e91e63', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  \n","  # ---------------------- cb ---------------------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(cb_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#5b9cf6', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","\n","  \n","  # ---------------------- sar ---------------------- #\n","  # alpha = 1\n","  # markersize = 5\n","  # for sar in sar_list:\n","  #   plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","  #   markersize += 1\n","  #   alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  # alpha = 0.7\n","  # for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","  #                     where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","  #                     where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","  #   alpha -= 0.05\n","  \n","\n","\n","  # ---------------------- outer price indi. ---------------------- #\n","  #           macd          #\n","  # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","    \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for stoch_ in stoch_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[stoch_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(stoch_upper, linestyle='--')\n","  # plt.axhline(stoch_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- cctbbo ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for cctbbo in cctbbo_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cctbbo].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(cctbbo_upper, linestyle='--')\n","  # plt.axhline(cctbbo_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- ema_roc ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for emaroc in emaroc_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[emaroc].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","  \n","  # ---------- bbw ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for bbwp_ in bbwp_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[bbwp_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(bbwp_thresh, linestyle='--')\n","\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n"]},{"cell_type":"markdown","metadata":{"id":"cj9X6S1jJjER"},"source":["### plot nontp case"]},{"cell_type":"markdown","metadata":{"id":"tApzvz_gK9lR"},"source":["## legacy"]},{"cell_type":"markdown","metadata":{"id":"FaRGwR4NEop2"},"source":["### shifting"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"a8aYsjEgQnGF"},"outputs":[],"source":["org_res_df = res_df.copy()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":291,"status":"ok","timestamp":1626515312874,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"RF3RM2G2RCb1","outputId":"ba8f6a75-d4df-4f85-cd0f-190935341f7a"},"outputs":[{"name":"stdout","output_type":"stream","text":["                            open     high  ...  min_upper  max_lower\n","2021-06-30 23:55:59.999  0.27223  0.27281  ...   0.272145    0.27005\n","2021-06-30 23:56:59.999  0.27274  0.27290  ...   0.272145    0.27005\n","2021-06-30 23:57:59.999  0.27246  0.27257  ...   0.272523    0.27021\n","2021-06-30 23:58:59.999  0.27166  0.27183  ...   0.272523    0.27021\n","2021-06-30 23:59:59.999  0.27144  0.27211  ...   0.272523    0.27021\n","\n","[5 rows x 37 columns]\n","                            open     high  ...  min_upper  max_lower\n","2021-06-30 23:55:59.999  0.27223  0.27281  ...   0.272523    0.27021\n","2021-06-30 23:56:59.999  0.27274  0.27290  ...        NaN        NaN\n","2021-06-30 23:57:59.999  0.27246  0.27257  ...        NaN        NaN\n","2021-06-30 23:58:59.999  0.27166  0.27183  ...        NaN        NaN\n","2021-06-30 23:59:59.999  0.27144  0.27211  ...        NaN        NaN\n","\n","[5 rows x 37 columns]\n"]}],"source":["#         refresh res_df      #\n","res_df = org_res_df.copy()\n","print(org_res_df.tail(5))\n","\n","# break\n","\n","\n","shift_size = -4\n","# shift_size = -1\n","# shift_size = -7\n","# shift_size = +3\n","\n","res_df['min_upper'] = res_df['min_upper'].shift(shift_size)\n","res_df['max_lower'] = res_df['max_lower'].shift(shift_size)\n","res_df['minor_ST1_Trend'] = res_df['minor_ST1_Trend'].shift(shift_size)\n","res_df['minor_ST2_Trend'] = res_df['minor_ST2_Trend'].shift(shift_size)\n","res_df['minor_ST3_Trend'] = res_df['minor_ST3_Trend'].shift(shift_size)\n","res_df['middle_line'] = res_df['middle_line'].shift(shift_size)\n","\n","print(res_df.tail(5))"]},{"cell_type":"markdown","metadata":{"id":"2gxvme1PC6ha"},"source":["### load model"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5831,"status":"ok","timestamp":1628862368878,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"dtYdAuSsC72_","outputId":"e8dccc53-aaa7-4bab-ed8d-753f634c08d6"},"outputs":[{"name":"stdout","output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/resnet/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5\n","94773248/94765736 [==============================] - 1s 0us/step\n"]}],"source":["# model_name = 'inner_tick_cnnreg_lscalemm_prefee_gpu_%s_%s_%s_%s_%s.h5'\n","\n","# model = tf.keras.models.load_model(ckpt_path + model_name)\n","\n","from tensorflow.keras.applications.resnet50 import ResNet50\n","\n","model = ResNet50(weights='imagenet', include_top=False)\n","# model.summary()\n"]},{"cell_type":"markdown","metadata":{"id":"5la6usMOFzkX"},"source":["#### gen selected vector"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oQk3-jbKF8FB"},"outputs":[],"source":["def min_max_scale(npy_x):\n","\n","  return (npy_x - np.min(npy_x)) / (np.max(npy_x) - np.min(npy_x))\n","\n","def expand_dims(npy_x):\n","\n","  row, col = npy_x.shape\n","  npy_x2 = np.array(npy_x).reshape(-1, row, col, 1).astype(np.float32)\n","  # input_x = np.array(data_x).reshape(-1, row, col).astype(np.float32)\n","\n","  #     1c to 3c    #\n","  npy_x3 = npy_x2 * np.ones(3, dtype=np.float32)[None, None, None, :]\n","\n","  return npy_x3\n","\n","\n","def vector_dist(f1, f2):\n","  return np.linalg.norm(f1-f2)\n","\n","\n","\n","# ------------------------ params ------------------------  #\n","selected_i = 500\n","input_size = 100\n","\n","\n","\n","#   1. 선택된 인덱스를 입력받았을 때, input generating 형태만 만들어놓고,     #\n","#   1-1. input cols 필요함    #\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower']\n","# senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","# senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","\n","sma_list = ['sma']\n","\n","#     -------------- outer price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","cctbbo_list = ['cctbbo']\n","\n","selected_price_colname = basic_list + senkoua_list + senkoub_list + sar_list\n","selected_outprice_colname = [macd_list]\n","\n","\n","#         global scaling for outer price data       #\n","#         1. nan 처리       #\n","\n","# # print((np.isnan(df.values)))\n","# print(\"np.sum(np.isnan(df.values), axis=0) :\", np.sum(np.isnan(df.values), axis=0))\n","\n","# max_nan = np.max(np.sum(np.isnan(df.values), axis=0))\n","# # print(max_nan)\n","\n","# df = df.iloc[max_nan:-max_nan]\n","\n","# total_gdata = []\n","# for g_col in selected_outprice_colname:\n","\n","#   temp_data = min_max_scale(res_df[g_col])\n","#   total_gdata.append(temp_data)\n","\n","\n","\n","#   1-2. cols 에 따른, scaling method 구분함    #\n","onprice_input_x = min_max_scale(res_df[selected_price_colname].iloc[selected_i - input_size:selected_i].values)\n","print(onprice_input_x.shape)\n","\n","\n","#   2. plot_check 에서 본인이 원하는 shape 의 인덱스를 선택   #\n","#   3. vertorize, \n","#   3-1. input generator 를 이용해 entry signal 발생할 때마다 dist 비교 진행    #\n","re_onprice_input_x = expand_dims(onprice_input_x)\n","print(re_onprice_input_x.shape)\n","      \n","# break\n","\n","selected_vector = model.predict(re_onprice_input_x, verbose=1)\n","print(selected_vector.shape)"]},{"cell_type":"markdown","metadata":{"id":"OJqkmkpsLCYC"},"source":["### tr_tresh calc"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gcpo4MGd9Wm4"},"outputs":[],"source":["res_wr = 0.6\n","# tr_thresh = 1\n","# tr_thresh = ((1 - res_wr) / res_wr) ** 0.5\n","tr_thresh = ((1 - res_wr) / res_wr) + 0.01\n","# tr_thresh = 2.6\n","print(\"res_wr :\", res_wr)\n","print(\"tr_thresh :\", tr_thresh)\n","\n","\n","#   단리    #\n","trade_num = 1000\n","asset = 1 # thousand USDT\n","test_loss_gap = 0.95  # fee adjusted\n","test_pr_gap = 1 + (1 - test_loss_gap) * tr_thresh\n","\n","test_loss_cnt = trade_num * (1 - res_wr)\n","test_pr_cnt = trade_num * res_wr\n","\n","test_trade_list = [test_pr_gap] * int(test_pr_cnt) + [test_loss_gap] * int(test_loss_cnt)\n","random.shuffle(test_trade_list)\n","# print(\"len(test_trade_list) :\", len(test_trade_list))\n","print(test_trade_list[:10])\n","print()\n","\n","# print(\"%.5f\" % np.cumprod(test_trade_list)[-1])\n","for tr_thresh_ in np.arange(1, 3, 0.2):\n","  if (1 + (1 - test_loss_gap) * tr_thresh_) ** test_pr_cnt * test_loss_gap ** test_loss_cnt > 1:\n","    break\n","print(\"복리를 위한 tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumprod(test_trade_list)[-1] :\", np.cumprod(test_trade_list)[-1])\n","print(\"total_pr : \", np.cumprod(test_trade_list)[-1])\n","print()\n","#   복리 tr_thresh  #\n","#   1. trade_num 에 영향 받지 않음\n","#   2. loss_gap 에 비례함\n","\n","for tr_thresh_ in np.arange(1, 3, 0.01):\n","  if ((1 - test_loss_gap) * tr_thresh_) * test_pr_cnt + (test_loss_gap - 1) * test_loss_cnt > 0:\n","    break\n","np_test_trade = np.array(test_trade_list) - 1\n","print(np_test_trade[:10])\n","# print(\"%.3f\" % )\n","print(\"단리를 위한 tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumsum(np_test_trade)[-1] :\", np.cumsum(np_test_trade)[-1])\n","print(\"total_pr : \", 1 + np.cumsum(np_test_trade)[-1])\n"]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":["Ic1mfmwWCIBu","AUSBU7T8Suzi","VdukVo5-Suzj","Bw5JibDKSuzj","Pe0QpnORSuzk","E0n53hflJbnp","MlFkpO1MSuzl","t1E_eAyPSuzm","nUs4fjVHSuzl","WVAKq3i8Suzm","L7l5CTJfSuzn","x_XGJqBi8Jex","MSUY4nnku3s9","epgS5Dksu-HX","M8-EChy0VsDr","Iy76iO7gztne","x2yj2SwAXDLp","EOXQbXixiQcK","1MNVIExLULhJ","3T-9FwWFXR4f","xpyP5t8Ht_pE","dzla8i9_ysmP","Ksth13T0spcQ","zQ-roiifspcX","q3zisNOTw3jM","X0FsT-8FZRti","13a-U32Uy50I","TBE0l6dHRYrE","Qys2Bw5Ou3u9","tApzvz_gK9lR","2gxvme1PC6ha","5la6usMOFzkX","OJqkmkpsLCYC"],"name":"IDv3_5_vec_backi2(0317_enexpair2).ipynb의 사본","toc_visible":true,"provenance":[],"authorship_tag":"ABX9TyPD7Z+k1gOzyvSdXaYun5nB"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}