{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"6rmQpzEGXfCw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1656637147915,"user_tz":-540,"elapsed":111020,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"68c91aa6-5911-4b31-dd78-a0b3ebf69b02"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","import os, sys\n","\n","current_path = '/content/drive/My Drive/Colab Notebooks/JnQ/'\n","\n","os.chdir(current_path)\n","\n","strat_pkg = 'IDE'\n","\n","mpl_finance_path = '/content/drive/My Drive/Colab Notebooks/JnQ/mpl_finance'\n","ta_lib_path = '/content/drive/My Drive/Colab Notebooks/JnQ/ta_lib'\n","\n","if mpl_finance_path not in sys.path:\n","\n","  try:\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ')\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ/{}'.format(strat_pkg))\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ/funcs')\n","    sys.path.insert(0, mpl_finance_path)\n","    sys.path.insert(0, ta_lib_path)\n","    \n","  except Exception as e:\n","    print(e)"]},{"cell_type":"markdown","metadata":{"id":"8uqYv5StTazo"},"source":["# requirements"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9qGt60DKTZmf"},"outputs":[],"source":["# !pip install zigzag --target=$'/content/drive/My Drive/Colab Notebooks/JnQ/zigzag'\n","# !pip install talib-binary --target=$'/content/drive/My Drive/Colab Notebooks/JnQ/ta_lib'\n","# !pip install findiff\n","\n","# import nvstrings, nvcategory, cudf\n","# import cuml\n","# import cudf\n","\n","import os\n","import talib\n","from funcs.funcs_idep import *\n","from funcs.funcs_duration_v2 import *\n","from funcs.funcs_plot_check import *\n","from funcs.funcs_pairing import *\n","# from funcs.funcs_ide import *\n","# from funcs.funcs_indicator_candlescore import *\n","from funcs.funcs_indicator import *\n","from funcs.funcs_trader import *\n","from ast import literal_eval\n","import logging\n","import importlib\n","\n","import mpl_finance as mf\n","import matplotlib.pyplot as plt\n","from matplotlib import gridspec\n","# from zigzag import *\n","# from tqdm.notebook import tqdm\n","\n","# import IPython\n","# import IPython.display\n","\n","import numpy as np\n","# import jax.numpy as np\n","import pandas as pd\n","# import seaborn as sns\n","# import tensorflow as tf\n","# from scipy import stats, signal\n","\n","import pickle\n","import shutil\n","import json\n","from easydict import EasyDict\n","import copy\n","\n","import datetime\n","from datetime import datetime\n","import random\n","import time\n","# import warnings\n","\n","# warnings.simplefilter(\"ignore\", category=RuntimeWarning)\n","\n","np.seterr(invalid=\"ignore\")\n","np.set_printoptions(suppress=True)\n","np.set_printoptions(linewidth=2000) \n","\n","pd.set_option('mode.chained_assignment',  None)\n","\n","pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)"]},{"cell_type":"markdown","metadata":{"id":"Ic1mfmwWCIBu"},"source":["# makeset - with to_htf dataframes"]},{"cell_type":"markdown","metadata":{"id":"AUSBU7T8Suzi"},"source":["## sync_check_make"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QmhLikYlSuzi"},"outputs":[],"source":["def sync_check_make(df):\n","\n","    make_itv_list = ['3T', '5T', '15T', '30T', 'H', '4H', 'D']\n","    offset_list = ['1h', '1h', '1h', '1h', '1h', '1h', '9h']\n","\n","    assert len(make_itv_list) == len(offset_list), \"length of itv & offset_list should be equal\"\n","        \n","    htf_df_list = [to_htf(df, itv_=itv_, offset=offset_) for itv_, offset_ in zip(make_itv_list, offset_list)]\n","\n","    df_3T, df_5T, df_15T, df_30T, df_H, df_4H, df_D = htf_df_list\n","\n","    for htf_df in htf_df_list:\n","      print(\"{} -> \".format(pd.infer_freq(htf_df.index)), htf_df.tail(1))\n","\n","    # heikinashi_v2(res_df_)\n","    # h_candle_v3(df, df_5T, '5T')\n","    # df = h_candle_v4(df, df_5T)\n","    # df = h_candle_v4(df, df_15T)\n","    # df = h_candle_v4(df, df_30T)\n","    # df = h_candle_v4(df, 'D')\n","\n","    # df = candle_pattern_pkg(df, df_5T)\n","    # df = candle_pattern_pkg(df, df_30T)\n","    # df = candle_pattern_pkg(df, df_H)\n","    # df = candle_pattern_pkg(df, df_4H)\n","\n","    \n","    # df = enough_space(df, '15T', 1)\n","    \n","    # --------------- dc --------------- #  \n","    dc_period = 1\n","    # df = donchian_channel_v4(df, dc_period)\n","    # df = dc_line(df, df_5T, '5T')  # join 사용시에만 return df 허용함\n","    # df = dc_line(df, df_15T, '15T')\n","    # df = dc_line_v2(df, df_H, 'H', dc_period=5)\n","\n","    # df = dc_line_v4(df, df, dc_period=10)\n","    # df = dc_line_v4(df, df, dc_period=20)\n","    # df = dc_line_v4(df, df, dc_period=30)\n","    # df = dc_line_v4(df, df_15T, dc_period=dc_period)\n","    # print(\"dc phase done\")\n","\n","    # --------------- bb --------------- #  \n","    bb_period = 100\n","\n","    # upper, base, lower = talib.BBANDS(res_df_.close, timeperiod=20, nbdevup=1, nbdevdn=1, matype=0)\n","    \n","    # df = bb_width_v3(df, period=60, multiple=1)\n","    # df = bb_line(df, df_5T, '5T')\n","    \n","    # df = bb_line_v3(df, df_15T, 60)\n","    \n","    df = bb_line_v3(df, df, bb_period)\n","    df = bb_level_v2(df, 'T', bb_period)\n","    print(\"bb phase done\")\n","\n","    c_itv = '5T'\n","\n","    # df =  wick_ratio(df, c_itv)\n","    # df =  wick_ratio(df, c_itv)\n","\n","    bb_itv= 'T'\n","\n","    # df = candle_range_ratio(df, c_itv, bb_itv, bb_period)\n","    # # candle_pumping_ratio(df, c_itv, bb_itv, bb_period)\n","\n","    dc_itv= '15T'\n","    dc_period = 4\n","    # df = candle_pumping_ratio_v2(df, c_itv, dc_itv, dc_period)\n","    # print(\"candle_pumping_ratio_v2 phase done\")\n","\n","    # df = dc_over_body_ratio(df, c_itv, dc_itv, dc_period)\n","    # print(\"dc_over_body_ratio phase done\")\n","\n","    # df = body_rel_ratio(df, c_itv)\n","    # print(\"body_rel_ratio phase done\")\n","\n","    # --------------- cbline --------------- #    \n","    # cloud_bline(df_3T, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_3T, [-1]), how='inner')\n","    # # cloud_bline(df_5T, 20)\n","    # # df = df.join(to_lower_tf_v2(df, df_5T, [-1]), how='inner')\n","    # cloud_bline(df_15T, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_15T, [-1]), how='inner')\n","    # cloud_bline(df_30T, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_30T, [-1]), how='inner')\n","    # cloud_bline(df_H, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_H, [-1]), how='inner')\n","    # cloud_bline(df_4H, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_4H, [-1]), how='inner')\n","\n","    # print(\"cbline phase done\")\n","\n","\n","\n","    # --------------- sd_dc --------------- #\n","    # df = sd_dc(df, 20, 40)\n","    # df = sd_dc(df, 20, 20)\n","    # df = sd_dc(df_5T, 20, 40, df)\n","    # df = sd_dc(df_H, 20, 40, df)\n","\n","    # print(\"sd_dc phase done\")\n","\n","    # --------------- imb_ratio --------------- #\n","    # imb_ratio(df, '5T')\n","    # imb_ratio_v3(df, \"5T\")\n","    # imb_ratio_v4(df, \"5T\")\n","\n","    # imb_ratio(df, 'H')\n","    # imb_ratio_v2(df, '5T')\n","    \n","    # print(\"imb_ratio phase done\")\n","\n","    # --------------- rel_abs_ratio --------------- #\n","    # rel_abs_ratio(df, '5T', norm_period=120)\n","\n","    # --------------- normalize data --------------- #\n","    # itv = 'T'\n","    # lb_period = 15\n","    # target_col = 'close_{}{}'.format(itv, lb_period)\n","    # target_data = df['close'].diff(lb_period).to_numpy()\n","    # norm_data(df, target_data, target_col)    \n","    # print(\"normalize data phase done !\")\n","\n","    # --------------- lucid sar --------------- #\n","    # lucid_sar_v2(df)\n","    # lucid_sar_v2(df_3T)\n","    # df = df.join(to_lower_tf_v2(df, df_3T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_5T)\n","    # df = df.join(to_lower_tf_v2(df, df_5T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_15T)\n","    # df = df.join(to_lower_tf_v2(df, df_15T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_30T)\n","    # df = df.join(to_lower_tf_v2(df, df_30T, [-2, -1]), how='inner')       \n","\n","    # print(\"sar phase done\")\n","\n","    # --------------- supertrend --------------- #\n","    # df = st_price_line(df, df_3T, '3m')\n","    # df = st_price_line(df, df_5T, '5m')\n","    # df = st_price_line(df, df_15T, '15m')\n","    # df = st_price_line(df, df_30T, '30m')\n","    # df = st_price_line(df, df_H, '1h')\n","    # df = st_price_line(df, df_4H, '4h')\n","\n","    # print(\"supertrend phase done\")\n","\n","    # --------------- rsi --------------- #  \n","    # df['rsi_1m'] = rsi(df, 14)    \n","    # df_5T['rsi_5m'] = rsi(df_5T, 14)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1]), columns=['rsi_5m']))\n","    \n","    # print(\"rsi phase done\")\n","\n","\n","    # --------------- cci --------------- #  \n","    # df['cci_1m'] = cci(df, 20)\n","\n","    # print(\"cci phase done\")\n","\n","    # --------------- ema --------------- #      \n","    # df_5T['ema_5m'] = ema(df_5T['close'], 195)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1]), columns=['ema_5m']))\n","    \n","    # print(\"ema phase done\")\n","        \n","    # --------------- stochastic --------------- #\n","    # df['stoch_1m'] = stoch(df, 13, 3, 3)\n","\n","    # df_5T['stoch'] = stoch(df_5T, 13, 3, 3)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","    # print(\"stoch phase done\")\n","\n","\n","    return df\n"]},{"cell_type":"markdown","metadata":{"id":"mEKyVbHWSuzi"},"source":["## make & save res_df (concat 생각하면, timeindex sync 맞춰야함)"]},{"cell_type":"markdown","metadata":{"id":"VdukVo5-Suzj"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"khKb9nhlSuzj"},"outputs":[],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  if '2021-07-01'.upper() not in file_list[i]:\n","  # if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    excel_name = key.replace(\".xlsx\", \"_st1h_backi2.xlsx\")\n","    excel_path = save_path + excel_name\n","\n","    if excel_name in exist_list:\n","      print(excel_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m 마지막 timeindex 의 date 기준, 08:59:59.999000 를 last timestamp 로 설정\n","      #      2. 시작 timestamp 는 모든 tf 의 가장 최근 시작 index,\n","      #       a. 1m 의 시작 timeindex 는 최소, htf 의 시작 timeindex 보다 interval 만큼 앞서야함\n","      #         i. 따라서 1m open_index, latest_open_index + 1d 를 하면 댐\n","      #           1. timestamp 으로 변환후 1day 를 더하고 datetime 으로 변환\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","    latest_open_index = sorted(open_indexes)[-1]\n","    \n","    open_ts = datetime.timestamp(latest_open_index)\n","    latest_open_index_1m = datetime.fromtimestamp(open_ts + a_day)\n","\n","    #   str 로 만들어 접근하면 불가함  #\n","    end_index = pd.to_datetime(str(df.index[-1]).split(\" \")[0] + \" 08:59:59.999000\")\n","    # break\n","\n","    sliced_df = df.loc[latest_open_index_1m:end_index] # to_lower_tf 의 기준 ltf\n","    sliced_second_df = second_df.loc[latest_open_index:end_index]\n","    sliced_third_df = third_df.loc[latest_open_index:end_index]\n","    sliced_fourth_df = fourth_df.loc[latest_open_index:end_index]\n","    sliced_fifth_df = fifth_df.loc[latest_open_index:end_index]\n","\n","    print(\"sliced index\")\n","    print(sliced_df.index[[0, -1]])\n","    print(sliced_second_df.index[[0, -1]])\n","    print(sliced_third_df.index[[0, -1]])\n","    print(sliced_fourth_df.index[[0, -1]])\n","    print(sliced_fifth_df.index[[0, -1]])\n","\n","    try:\n","      sliced_sixth_df = sixth_df.loc[latest_open_index:end_index]\n","      sliced_seventh_df = seventh_df.loc[latest_open_index:end_index]\n","\n","      print(sliced_sixth_df.index[[0, -1]])\n","      print(sliced_seventh_df.index[[0, -1]])\n","\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df, sliced_sixth_df, sliced_seventh_df)\n","    \n","    except:\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df)\n","\n","\n","\n","    res_df.to_excel(excel_path)\n","    print(excel_name, \"saved succesfully !\")"]},{"cell_type":"markdown","metadata":{"id":"Bw5JibDKSuzj"},"source":["### xlsx to feather"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VA-_gcA7Suzj"},"outputs":[],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  # if '2021-07-01'.upper() not in file_list[i]:\n","  if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    feather_name = key.replace(\".xlsx\", \".ftr\")\n","    # feather_path = save_path + feather_name\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m 마지막 timeindex 의 date 기준, 08:59:59.999000 를 last timestamp 로 설정\n","      #      2. 시작 timestamp 는 모든 tf 의 가장 최근 시작 index,\n","      #       a. 1m 의 시작 timeindex 는 최소, htf 의 시작 timeindex 보다 interval 만큼 앞서야함\n","      #         i. 따라서 1m open_index, latest_open_index + 1d 를 하면 댐\n","      #           1. timestamp 으로 변환후 1day 를 더하고 datetime 으로 변환\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","\n","    df.reset_index().to_feather(date_path + feather_name, compression='lz4')\n","    second_df.reset_index().to_feather(date_path2 + feather_name, compression='lz4')\n","    third_df.reset_index().to_feather(date_path3 + feather_name, compression='lz4')\n","    fourth_df.reset_index().to_feather(date_path4 + feather_name, compression='lz4')\n","    fifth_df.reset_index().to_feather(date_path5 + feather_name, compression='lz4')\n","    sixth_df.reset_index().to_feather(date_path6 + feather_name, compression='lz4')\n","    seventh_df.reset_index().to_feather(date_path7 + feather_name, compression='lz4')\n","\n","    print(\"xlsx converted to feather !\")\n","    "]},{"cell_type":"markdown","metadata":{"id":"Pe0QpnORSuzk"},"source":["### add itv_name to ftr"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"M-gl30KxSuzk"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","# dir_path = \"bbdc3m_backi2\"\n","# date = '2021-10-10'\n","date = '2021-07-01'\n","\n","db_path = './candlestick_concated/database_bn/non_cum/%s/' % date\n","os.makedirs(os.path.join(db_path), exist_ok=True)\n","\n","# exist_list = os.listdir(os.path.join(save_path, dir_path))\n","# break\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","        \n","    df = shutil.copy(date_path + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n","    second_df = shutil.copy(date_path2 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval2))\n","    third_df = shutil.copy(date_path3 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval3))\n","    fourth_df = shutil.copy(date_path4 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval4))\n","    fifth_df = shutil.copy(date_path5 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval5))\n","    sixth_df = shutil.copy(date_path6 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval6))\n","    seventh_df = shutil.copy(date_path7 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval7))\n","\n","    print(\"copied to\" + db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n"]},{"cell_type":"markdown","metadata":{"id":"4oZ1ohTtSuzk"},"source":["### feather ver. (database to res_df)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vgVHpnUsSuzk"},"outputs":[],"source":["# db_path = './candlestick_concated/database_ub/' # upbit\n","db_path = './candlestick_concated/database_bn/'   # binance\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","save_dir_path = \"bb1d_backi2\"\n","date = '2022-02-17'\n","\n","# concat_path = 'noncat' # 새로운 cols 를 기존 cum/concat 에 붙이려는 경우\n","concat_path = 'concat'\n","cum_path = \"cum\"\n","# cum_path = \"non_cum\"  # non_cum 으로 진행하는 경우, row concat 용도이기 때문에 noncat -> concat 으로 변경 (base cols 를 모두 담고 있음)\n","\n","load_path = os.path.join(db_path, cum_path, date)\n","save_path = os.path.join(save_path, save_dir_path, concat_path, cum_path, date)\n","\n","os.makedirs(save_path, exist_ok=True)\n","\n","file_list = os.listdir(load_path)\n","exist_list = os.listdir(save_path)\n","# break\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","\n","    if \"_1m\" not in key:\n","      continue\n","\n","    # feather_name = key.replace(\".ftr\", \"_%.ftr\" % save_dir_path)\n","    feather_name = key.replace(\"_1m\", \"\")\n","    feather_path = os.path.join(save_path, feather_name)\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    df = pd.read_feather(os.path.join(load_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","    res_df = sync_check_make(df)\n","\n","    res_df.reset_index().to_feather(feather_path, compression='lz4')\n","    print(feather_path, \"saved succesfully !\")"]},{"cell_type":"markdown","metadata":{"id":"YxCPUzoyidwH"},"source":["#### just add col to loaded df"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":620},"executionInfo":{"elapsed":2266,"status":"ok","timestamp":1655116351242,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"odqVwQHpYo1M","outputId":"d97c6c32-c922-4667-dd39-8ba2e5f50a0f"},"outputs":[{"name":"stdout","output_type":"stream","text":["3T ->                          open     high      low    close\n","index                                                  \n","2022-04-27 08:45:00  2803.55  2803.97  2799.26  2800.43\n","5T ->                          open     high      low    close\n","index                                                  \n","2022-04-27 08:45:00  2803.55  2803.97  2799.26  2800.43\n","15T ->                          open     high      low    close\n","index                                                  \n","2022-04-27 08:45:00  2803.55  2803.97  2799.26  2800.43\n","30T ->                          open     high      low    close\n","index                                                  \n","2022-04-27 08:30:00  2783.61  2806.93  2780.79  2800.43\n","H ->                          open     high      low    close\n","index                                                  \n","2022-04-27 08:00:00  2819.33  2822.77  2761.27  2800.43\n","4H ->                          open    high      low    close\n","index                                                 \n","2022-04-27 05:00:00  2837.34  2855.0  2761.27  2800.43\n","D ->                          open    high      low    close\n","index                                                 \n","2022-04-26 09:00:00  3006.12  3043.0  2761.27  2800.43\n","bb phase done\n"]},{"data":{"text/html":["\n","  <div id=\"df-3131c86c-68b3-47d4-aee5-73a5acd716f2\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>dc_upper_T30</th>\n","      <th>dc_lower_T30</th>\n","      <th>dc_base_T30</th>\n","      <th>bb_upper_T100</th>\n","      <th>bb_lower_T100</th>\n","      <th>bb_base_T100</th>\n","      <th>bb_upper2_T100</th>\n","      <th>bb_lower2_T100</th>\n","      <th>bb_upper3_T100</th>\n","      <th>bb_lower3_T100</th>\n","    </tr>\n","    <tr>\n","      <th>index</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2022-04-27 08:41:59.999</th>\n","      <td>2806.93</td>\n","      <td>2761.27</td>\n","      <td>2784.1</td>\n","      <td>2837.237331</td>\n","      <td>2799.074869</td>\n","      <td>2818.1561</td>\n","      <td>2856.318561</td>\n","      <td>2779.993639</td>\n","      <td>2875.399792</td>\n","      <td>2760.912408</td>\n","    </tr>\n","    <tr>\n","      <th>2022-04-27 08:42:59.999</th>\n","      <td>2806.93</td>\n","      <td>2761.27</td>\n","      <td>2784.1</td>\n","      <td>2836.921344</td>\n","      <td>2798.723056</td>\n","      <td>2817.8222</td>\n","      <td>2856.020487</td>\n","      <td>2779.623913</td>\n","      <td>2875.119631</td>\n","      <td>2760.524769</td>\n","    </tr>\n","    <tr>\n","      <th>2022-04-27 08:43:59.999</th>\n","      <td>2806.93</td>\n","      <td>2761.27</td>\n","      <td>2784.1</td>\n","      <td>2836.581771</td>\n","      <td>2798.433429</td>\n","      <td>2817.5076</td>\n","      <td>2855.655941</td>\n","      <td>2779.359259</td>\n","      <td>2874.730112</td>\n","      <td>2760.285088</td>\n","    </tr>\n","    <tr>\n","      <th>2022-04-27 08:44:59.999</th>\n","      <td>2806.93</td>\n","      <td>2761.27</td>\n","      <td>2784.1</td>\n","      <td>2836.200854</td>\n","      <td>2798.150546</td>\n","      <td>2817.1757</td>\n","      <td>2855.226008</td>\n","      <td>2779.125392</td>\n","      <td>2874.251162</td>\n","      <td>2760.100238</td>\n","    </tr>\n","    <tr>\n","      <th>2022-04-27 08:45:59.999</th>\n","      <td>2806.93</td>\n","      <td>2761.27</td>\n","      <td>2784.1</td>\n","      <td>2835.819768</td>\n","      <td>2797.817632</td>\n","      <td>2816.8187</td>\n","      <td>2854.820835</td>\n","      <td>2778.816565</td>\n","      <td>2873.821903</td>\n","      <td>2759.815497</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3131c86c-68b3-47d4-aee5-73a5acd716f2')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-3131c86c-68b3-47d4-aee5-73a5acd716f2 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-3131c86c-68b3-47d4-aee5-73a5acd716f2');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["                         dc_upper_T30  dc_lower_T30  dc_base_T30  bb_upper_T100  bb_lower_T100  bb_base_T100  bb_upper2_T100  bb_lower2_T100  bb_upper3_T100  bb_lower3_T100\n","index                                                                                                                                                                       \n","2022-04-27 08:41:59.999       2806.93       2761.27       2784.1    2837.237331    2799.074869     2818.1561     2856.318561     2779.993639     2875.399792     2760.912408\n","2022-04-27 08:42:59.999       2806.93       2761.27       2784.1    2836.921344    2798.723056     2817.8222     2856.020487     2779.623913     2875.119631     2760.524769\n","2022-04-27 08:43:59.999       2806.93       2761.27       2784.1    2836.581771    2798.433429     2817.5076     2855.655941     2779.359259     2874.730112     2760.285088\n","2022-04-27 08:44:59.999       2806.93       2761.27       2784.1    2836.200854    2798.150546     2817.1757     2855.226008     2779.125392     2874.251162     2760.100238\n","2022-04-27 08:45:59.999       2806.93       2761.27       2784.1    2835.819768    2797.817632     2816.8187     2854.820835     2778.816565     2873.821903     2759.815497"]},"execution_count":92,"metadata":{},"output_type":"execute_result"}],"source":["res_df_ = sync_check_make(res_df_)  # suffix duplication 유의\n","res_df_.tail().iloc[:, -10:]\n","# res_df_.dtypes"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3SKglsQCj5_x"},"outputs":[],"source":["test_df_ = sync_check_make(res_df_.iloc[-4000:])  # suffix duplication 유의\n","test_df_.tail().iloc[:, -10:]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gOQxwYqK0jCS"},"outputs":[],"source":["# ------ validation ------ #\n","# res_df_.cppr_15T.describe()\n","print((res_df_.open_15T.to_numpy() - res_df_.close_15T.to_numpy())[-10:])\n","print((res_df_.dc_upper_15T4.to_numpy() - res_df_.dc_lower_15T4.to_numpy())[-10:])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RmiB5VU5DN6B"},"outputs":[],"source":["# np.where(res_df_.CDL3LINESTRIKE_15T) #.iloc[-1000:,]\n","\n","# CDL3LINESTRIKE = talib.CDL3LINESTRIKE(df_15T.open, df_15T.high, df_15T.low, df_15T.close)\n","for col in talib.get_function_groups()['Pattern Recognition']:  \n","  print(np.unique(res_df_[col + '_15T'].to_numpy(), return_counts=True))\n","\n","# CDLCLOSINGMARUBOZU = talib.CDLCLOSINGMARUBOZU(df_15T.open, df_15T.high, df_15T.low, df_15T.close)\n","# print(np.unique(CDLCLOSINGMARUBOZU.to_numpy(), return_counts=True))\n","# print(CDLCLOSINGMARUBOZU.tail(50))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2274,"status":"ok","timestamp":1655116365309,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"XrgJPQRuisCa","outputId":"ce293f99-8bb2-4281-a75d-52674fe761f6"},"outputs":[{"name":"stdout","output_type":"stream","text":["./candlestick_concated/database_bn/cum/2022-04-27/2022-04-27 ETHUSDT_1m.ftr saved !\n"]}],"source":["# ------------ save current res_df ------------ #\n","ftr_path = os.path.join(save_path.replace(\"res_df\", \"database_bn\"), \"cum\", date)\n","ftr_full_path = os.path.join(ftr_path, key)\n","\n","res_df_.reset_index().to_feather(ftr_full_path, compression='lz4')  # key 잘 확인하고 저장\n","print(ftr_full_path, 'saved !')"]},{"cell_type":"markdown","metadata":{"id":"E0n53hflJbnp"},"source":["### htf candle check"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6xW0yugCWvGz"},"outputs":[],"source":["itv_list = ['3T', '5T', '15T', '30T', '1H', '4H']\n","comp_df_list = [second_df, third_df, fourth_df, fifth_df, sixth_df, seventh_df]\n","offset_list = ['1h', '2min', '2min', '2min', '2min', '2min']\n","# itv_list = ['4H']\n","# comp_df_list = [seventh_df]\n","\n","slice_len = 100\n","for itv_, comp_df_, offset in zip(itv_list, comp_df_list, offset_list):\n","\n","  print(\"itv_ :\", itv_)\n","\n","  # df = h_candle_v2(df, '3T')\n","  # end_ts = \n","  h_res_df = df.resample(itv_, offset=offset).agg({\n","          'open': 'first',\n","          'high': 'max',\n","          'low': 'min',\n","          'close': 'last'\n","      })\n","\n","  #   앞은 길이가 다르고, 뒤에서부터 잘라서 비교    #\n","  #   last_row 빼고는 동일, 4h 제외\n","  # print(df.tail())\n","  print(h_res_df.tail())\n","  print(comp_df_.tail())\n","  # # print(h_res_df.head())\n","  # # print(second_df.head())\n","\n","  # print(len(h_res_df))\n","  # print(len(second_df))\n","\n","  # print(h_res_df.values[-slice_len:])\n","  # print(second_df.iloc[:, :4].values[-slice_len:])\n","  # print(np.argwhere(h_res_df.values[-slice_len:] != comp_df_.iloc[:, :4].values[-slice_len:]))\n","  # print()\n","  break"]},{"cell_type":"markdown","metadata":{"id":"jTN3M842Suzl"},"source":["## concat & save new res_df"]},{"cell_type":"markdown","metadata":{"id":"MlFkpO1MSuzl"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"U-3QkfbFSuzl"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","dict_name = \"2021-07-01 ETHUSDT_bb15m_backi2_res_dfs.pkl\"\n","\n","#     load with pickle    #\n","with open(save_path + dict_name, 'rb') as f:\n","  saved_res_df_dict = pickle.load(f)\n","\n","print(dict_name, \"loaded !\")\n","res_df_files = os.listdir(save_path)\n","res_df_files.reverse()\n","\n","print(res_df_files)\n","\n","res_df_dict = {}\n","\n","base_postfix = '_bb15m_backi2.xlsx'\n","new_postfix = '_st1h_backi2.xlsx'\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for k_i, key in enumerate(res_df_files):\n","\n","  if '2021-07-01'.upper() not in key:\n","  # if '2021-10-10'.upper() not in key:\n","    continue\n","\n","  # if \"link\".upper() not in key:\n","  # if \"btc\".upper() not in key:\n","  #   continue\n","\n","  if new_postfix not in key:\n","    continue\n","\n","  # if key in \n","\n","  if sample_cnt == max_cnt:\n","    dict_name = \"%s_res_dfs.pkl\" % key.split(\".\")[0]\n","    print(\"dict_name :\", dict_name)\n","\n","  base_df = saved_res_df_dict[key.replace(new_postfix, base_postfix)]\n","  # base_df = pd.read_excel(save_path + key.replace(new_postfix, base_postfix), index_col=0)  \n","  res_df = pd.read_excel(save_path + key, index_col=0)  \n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  droped_new_res_df.head()\n","  # break\n","\n","  # res_df_dict[key] = res_df\n","  res_df_dict[key] = droped_new_res_df\n","  print(key, \"saved to dict !\")\n","\n","  #     save with pickle    #\n","  with open(save_path + dict_name, 'wb') as f:\n","    pickle.dump(res_df_dict, f)\n","\n","  sample_cnt -= 1\n","\n","  if sample_cnt <= 0:\n","    break\n"]},{"cell_type":"markdown","metadata":{"id":"t1E_eAyPSuzm"},"source":["### new col to latest feather (1m_indi. only)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xyI5NrM7Suzm"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","cum_dir = \"cum\"\n","\n","new_dir_path = \"rsi_backi2\"\n","base_dir_path = \"bbdc3m_backi2\"\n","\n","new_date = '2021-11-17'\n","\n","\n","\n","#     load ftr list    #\n","base_save_path = os.path.join(save_path, base_dir_path, \"concat/cum\", new_date)\n","new_save_path = base_save_path.replace(base_dir_path, new_dir_path)\n","\n","#     save to (new) cum dir    #\n","#      1. if dir. not exists, makedir\n","os.makedirs(new_save_path, exist_ok=True)\n","\n","ftr_list = [s for s in os.listdir(base_save_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_save_path, key), columns=None, use_threads=True).set_index(\"index\")\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  droped_new_res_df = sync_check(base_df)\n","\n","  # new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # # new_res_df.head()\n","\n","  # intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  # droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break\n","\n","  droped_new_res_df.reset_index().to_feather(os.path.join(new_save_path, key), compression='lz4')\n","\n","  print(os.path.join(new_save_path, key), \"saved !\")\n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"markdown","metadata":{"id":"nUs4fjVHSuzl"},"source":["### feather ver. (col concat)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6cu-Y82iSuzl"},"outputs":[],"source":["new_dir_path = \"st3m_backi2\"\n","base_dir_path = \"bb1d_backi2\"\n","\n","# new_date = \"2021-11-17\"\n","new_date = \"2022-01-10\"\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","save_path = './candlestick_concated/res_df/'\n","save_path = os.path.join(save_path, new_dir_path, \"concat/cum\", new_date)   \n","# save_path = os.path.join(save_path, new_dir_path, \"concat/non_cum\", new_date)   # row col 하려면 concat 맞음, noncum 사용\n","os.makedirs(save_path, exist_ok=True)\n","\n","\n","#     load ftr list    #\n","# ftr_list = [s for s in os.listdir(os.path.join(save_path, new_dir_path)) if \"ftr\" in s]\n","\n","noncat_path = save_path.replace(\"concat/\", \"noncat/\")\n","ftr_list = [s for s in os.listdir(noncat_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","  try:\n","\n","    #       read from base postfix's directory    #\n","    base_df = pd.read_feather(os.path.join(save_path.replace(new_dir_path, base_dir_path), key), columns=None, use_threads=True).set_index(\"index\")\n","    res_df = pd.read_feather(os.path.join(noncat_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","    # print(base_df.head())\n","    # print(res_df.head())\n","    # break\n","\n","    new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","    # new_res_df.head()\n","\n","    droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","    # droped_new_res_df.head()\n","    # break\n","\n","    droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","    # res_df_dict[key] = res_df\n","    # res_df_dict[key] = droped_new_res_df\n","    print(os.path.join(save_path, key), \"saved !\")\n","  \n","  except Exception as e:\n","    print(\"error occured ! :\", e)\n","  \n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"markdown","metadata":{"id":"WVAKq3i8Suzm"},"source":["### feather ver. (row concat) , database cum 도 호환가능"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XG2p9OhhSuzm"},"outputs":[],"source":["# save_path = './candlestick_concated/res_df/'        # cols 추가된 cum db 에 new_row's cols 기준으로 합치는 경우\n","save_path = './candlestick_concated/database_bn/'   # ohlcv cum db 만들 경우\n","\n","base_date = '2022-04-25'\n","# new_date = '2022-02-17'\n","new_date = '2022-04-27'\n","\n","# ------ load ftr list ------ #\n","if \"database\" in save_path:\n","  base_dir_path = \"\"\n","  new_dir_path = \"\"\n","  concat_dir = \"\"\n","else:\n","  base_dir_path = \"sar_backi2\"\n","  new_dir_path = \"bb4h_backi2\"  # dir_path 가 base / new 서로 달라질 수 있어서 분할함\n","  concat_dir = \"concat\"\n","\n","base_date_path = os.path.join(save_path, base_dir_path, concat_dir, \"cum\", base_date)      # 기존 cum db 와 new_date db 를 cum 진행\n","# base_date_path = os.path.join(save_path, base_dir_path, concat_dir, \"non_cum\", base_date)    # non_cum db 와 new_date db 를 cum 진행\n","\n","# new_date_path = os.path.join(save_path, new_dir_path, concat_dir, \"cum\", new_date)      # 상황별로 직접 선택해야할 듯\n","new_date_path = os.path.join(save_path, new_dir_path, concat_dir, \"non_cum\", new_date)\n","\n","\n","\n","# ------ save to (new) concat dir ------ #\n","#      1. if dir. not exists, makedir\n","save_path = new_date_path.replace(\"non_cum\", \"cum\")   # non_cum 아니여도 무관\n","os.makedirs(save_path, exist_ok=True)   # noncat / concat 두가지 경우 존재가능할 것\n","# os.makedirs(os.path.join(save_path, dir_path, \"noncat/cum\", new_date), exist_ok=True)\n","\n","\n","ftr_list = [s for s in os.listdir(new_date_path) if \"ftr\" in s]\n","exist_list = os.listdir(save_path)\n","print(ftr_list)\n","# break\n","\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:   # date rejection\n","    continue\n","  if '1m' not in key:  # itv rejection\n","    continue\n","\n","  # if key in exist_list:\n","  #   print(key, \"already exist !\")\n","  #   continue\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_date_path, key.replace(new_date, base_date)), columns=None, use_threads=True).set_index(\"index\")   # key 에 new_date 담겨있음\n","  res_df = pd.read_feather(os.path.join(new_date_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break  \n","  \n","  print(droped_new_res_df.iloc[[0, -1]])  \n","\n","  # ------------- verify df continuity directly itv by itv ------------- #\n","  true_continue = True\n","  if \"_\" in key:\n","\n","    # interval = key.split(\".\")[0].split(\"_\")[-1] \n","    # itv_num = to_itvnum(interval)\n","\n","    # verified_df = consecutive_df(droped_new_res_df, to_itvnum(interval))\n","    # verified_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","    # res_df_dict[key] = res_df\n","    # res_df_dict[key] = droped_new_res_df  \n","\n","    np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","    ideal_ts_gap = 60 # * itv_num\n","\n","    for ts_i in range(len(np_idx_ts)):\n","      \n","      if ts_i != 0:\n","        ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","        if ts_gap > ideal_ts_gap or ts_gap < ideal_ts_gap:\n","        # if ts_gap == ideal_ts_gap:\n","          print(droped_new_res_df.index[ts_i - 1])\n","          print(droped_new_res_df.index[ts_i])\n","          # print(ts_gap)\n","          print(\"------------------ unideal ts_gap ------------------\")\n","          true_continue = False\n","\n","    print(\"continuity checked !\")\n","\n","  if true_continue:\n","    droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","  print(os.path.join(save_path, key), \"saved !\")\n","  \n"]},{"cell_type":"markdown","metadata":{"id":"L7l5CTJfSuzn"},"source":["### check continuity"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"w-5jn9opBl73"},"outputs":[],"source":["droped_new_res_df = res_df_"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nGzMGyC3Suzn"},"outputs":[],"source":["# print(droped_new_res_df.columns)\n","\n","print(droped_new_res_df.iloc[[0, -1]])\n","\n","np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","\n","print(np_idx_ts[:10])\n","for ts_i in range(len(np_idx_ts)):\n","  \n","  if ts_i != 0:\n","    ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","\n","    if ts_gap > 60 or ts_gap < 60:\n","\n","      print(\"invalid ts_gap found !\")\n","    # if ts_gap == 60:\n","      print(droped_new_res_df.index[ts_i - 1])\n","      print(droped_new_res_df.index[ts_i])\n","      # print(ts_gap)\n","      print()\n"]},{"cell_type":"markdown","metadata":{"id":"x_XGJqBi8Jex"},"source":["### check length of front missing value + middle_data non_missing validity"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yRNwqVeAu8X8"},"outputs":[],"source":["#       1. new_date 의 시작 timeidx 와 base_date end timeidx 의 최소 days' gap     #\n","#       2. new_date 의 시작 부분 indi. value 는 np.nan 으로 채워질 거기 때문에 계산해야함    #\n","\n","df_count = droped_new_res_df.count()\n","len_missing = df_count.max() - df_count.min()\n","print(len_missing / 1440)\n","\n","#       3. \n","missing_sliced_df = droped_new_res_df.iloc[len_missing:]\n","df_count2 = missing_sliced_df.count()\n","# print(df_count2)\n","print((df_count2.max() - df_count2.min()))    # this value should be zero !\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"AY7E2_hTBsyM"},"outputs":[],"source":["# df_count2.index[df_count2.argmin()]\n","# missing_sliced_df.head(5)\n","\n","stay_missed = np.sum(pd.isnull(missing_sliced_df), axis=0)\n","print(stay_missed)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"p9yqewOw9g33"},"outputs":[],"source":["stay_missed_cols = stay_missed[stay_missed != 0].index\n","\n","for sm_col in stay_missed_cols:\n","  \n","  row_idx = np.argwhere(pd.isnull(missing_sliced_df[sm_col].values))\n","\n","  plt.figure(figsize=(3,3))\n","  plt.plot(row_idx)\n","  plt.ylim(0, len(missing_sliced_df))\n","  plt.title(sm_col)\n","\n","  plt.show()\n"]},{"cell_type":"markdown","metadata":{"id":"MSUY4nnku3s9"},"source":["## legacy"]},{"cell_type":"markdown","metadata":{"id":"epgS5Dksu-HX"},"source":["### mv files"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"aJcVpEdrslA5"},"outputs":[],"source":["df_path = './candlestick_concated/survey_df_v2'\n","files_ = os.listdir(df_path)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cEKyEYkotFDy"},"outputs":[],"source":["dirs = [file_ for file_ in files_ if not file_.endswith('.ftr')]\n","files = [file_ for file_ in files_ if file_.endswith('.ftr')]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"IgM79tcxtPVZ"},"outputs":[],"source":["dirs"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"M767iRtwtRQP"},"outputs":[],"source":["def move_fn(dir_, file_):\n","  src_path = os.path.join(df_path, file_)\n","  dst_path = os.path.join(df_path, dir_, file_)\n","  shutil.move(src_path, dst_path)\n","  print(\"moved to {}\".format(dst_path))\n","\n","_ = [move_fn('2022-01-10 ETHUSDT_all', file_) for file_ in files if 'eth'.upper() in file_]\n","# sols\n"]},{"cell_type":"markdown","metadata":{"id":"Iy76iO7gztne"},"source":["### move legacy files"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hMRht32Czwry"},"outputs":[],"source":["# print()\n","cur_dir_list = os.listdir('.')\n","for f in cur_dir_list:\n","  if 'legacy' in f :\n","    # print(f)\n","    if os.path.isdir(current_path + f,):\n","      continue\n","\n","    shutil.move(current_path + f, current_path + 'legacy/' + f)\n","    print(\"moved to\" + current_path + 'legacy/' +  f)"]},{"cell_type":"markdown","metadata":{"id":"5duWn8t4BRyv"},"source":["# IDE platform\n"]},{"cell_type":"markdown","metadata":{"id":"6HOjnZjSgzk1"},"source":["## load ftr_list"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5987,"status":"ok","timestamp":1656637183771,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"7FPBG5Qqg2jB","outputId":"571a4a2b-1274-420b-b538-7a886f9bd492"},"outputs":[{"output_type":"stream","name":"stdout","text":["['2022-04-27 ETHUSDT_1m.ftr']\n","2022-04-27 ETHUSDT_1m.ftr loaded !\n","load res_df_ elapsed time : 4.807442665100098\n"]}],"source":["save_path = './candlestick_concated/database_bn/'\n","\n","# dir_path = \"bb1d_backi2\"\n","# date = \"2022-02-17\"\n","# ftr_path = os.path.join(save_path, dir_path, \"concat/cum\", date)\n","\n","# ------ 1T_database ------ #\n","# date = \"2022-04-27\"\n","# ftr_path = os.path.join(save_path, \"non_cum\", date)\n","\n","date = \"2022-04-27\"\n","# date = \"2022-02-17\"\n","ftr_path = os.path.join(save_path, \"cum\", date)\n","\n","# ------ load ftr list ------ #\n","ftr_list = [s for s in os.listdir(ftr_path) if \"ftr\" in s if date in s]\n","print(ftr_list)\n","\n","start_0 = time.time()\n","key = ftr_list[0]  # tempoaray use single key\n","res_df_ = pd.read_feather(os.path.join(ftr_path, key), columns=None, use_threads=True).set_index(\"index\")\n","# print(res_df_.head())\n","print(key, \"loaded !\")\n","print(\"load res_df_ elapsed time :\", time.time() - start_0)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RQH_l4opEh_O"},"outputs":[],"source":["res_df_.dtypes"]},{"cell_type":"markdown","metadata":{"id":"x2yj2SwAXDLp"},"source":["### edit cols"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"x9wkWw15XCAm"},"outputs":[],"source":["col_list = list(res_df_.columns)\n","# # [col_ for col_ in col_list if 'score' in col_]\n","\n","# ------ drop ------ #\n","# res_df_.drop([col_ for col_ in col_list if 'open_15T' in col_], inplace=True, axis=1)\n","res_df_.drop([col_ for col_ in col_list if '3T' in col_], inplace=True, axis=1)\n","# res_df_.drop([col_ for col_ in col_list if '_T40' in col_], inplace=True, axis=1)\n","# res_df_.drop([col_ for col_ in col_list if 'long_base' in col_], inplace=True, axis=1)\n","# res_df_.drop([col_ for col_ in col_list[5:]], inplace=True, axis=1)\n","\n","# ------ replace ------ #\n","# for c_i, col_ in enumerate(col_list):\n","#   if 'basis' in col_:\n","# #   # if col_[-1] in ['m', 'h', 'd', 'H'] and '_' in col_:eTa_5T\n","# #   # if col_[0] in ['h'] and '_' in col_:\n","# #   if 'bir_' in col_:\n","\n","#     col_list[c_i] = col_.replace('basis', 'base')\n","# #     # col_list[c_i] = col_.replace('m', 'T').replace('h', 'H').replace('1T', 'T')\n","# #     # col_list[c_i] = col_.replace('1d', 'D')\n","# #     # col_list[c_i] = col_.replace('eTa_5T', 'ema_5T')\n","# #     # col_list[c_i] = col_list[c_i][1:]\n","# #     # print(col_list[c_i][0])\n","# res_df_.columns = col_list\n","# col_list[-2:] = ['resi_T', 'sup_T']"]},{"cell_type":"markdown","metadata":{"id":"14chOHeXh6JD"},"source":["### lab"]},{"cell_type":"markdown","metadata":{"id":"O87s8_EUakqS"},"source":["#### instant indi."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gWOmz--hNaSR"},"outputs":[],"source":["def get_terms_info_v4(cu_idx, co_idx, len_df, len_df_range):\n","\n","    cu_fill_idx = fill_arr(cu_idx)\n","    co_fill_idx = fill_arr(co_idx)\n","\n","    notnan_cu_bool = ~np.isnan(cu_idx)\n","    notnan_co_bool = ~np.isnan(co_idx)\n","\n","    valid_cu_bool = notnan_cu_bool * ~np.isnan(co_fill_idx)  # high_terms 를 위해 pair 되는 fill & idx 의 nan 제거\n","    valid_co_bool = notnan_co_bool * ~np.isnan(cu_fill_idx)\n","\n","    # ------ 생략된 idx 에 대한 prime_idx 탐색 ------ #\n","    high_bool = cu_fill_idx < co_fill_idx  # 이렇게 해야 high_terms[:, 1] 이 cu_idx 가 나옴\n","    low_bool = co_fill_idx < cu_fill_idx\n","\n","    high_terms_vec = get_index_bybool(high_bool, len_df_range)\n","    low_terms_vec = get_index_bybool(low_bool, len_df_range)  # -> low_terms\n","\n","    high_terms_list = using_clump(high_terms_vec)\n","    low_terms_list = using_clump(low_terms_vec)\n","\n","    valid_co_prime_idx = np.array([terms.min() for terms in high_terms_list])\n","    valid_cu_prime_idx = np.array([terms.min() for terms in low_terms_list])\n","\n","    # valid_co_post_idx = np.array([terms.max() for terms in high_terms_list])   # 이곳은 cross_idx 가 아님, 단지 chunknized 된 filled_idx 일뿐\n","    # valid_cu_post_idx = np.array([terms.max() for terms in low_terms_list])\n","\n","    cu_prime_idx = np.full(len_df, np.nan)\n","    co_prime_idx = np.full(len_df, np.nan)\n","\n","    cu_prime_idx[valid_cu_prime_idx] = valid_cu_prime_idx\n","    co_prime_idx[valid_co_prime_idx] = valid_co_prime_idx\n","\n","    cu_prime_fill_idx = fill_arr(cu_prime_idx)\n","    co_prime_fill_idx = fill_arr(co_prime_idx)\n","\n","    # cu_post_idx = np.full(len_df, np.nan)  # --> Todo, unavailable : not cross_idx\n","    # co_post_idx = np.full(len_df, np.nan)\n","\n","    # cu_post_idx[valid_cu_post_idx] = valid_cu_post_idx\n","    # co_post_idx[valid_co_post_idx] = valid_co_post_idx\n","\n","    # cu_post_fill_idx = fill_arr(cu_post_idx)\n","    # co_post_fill_idx = fill_arr(co_post_idx)\n","\n","    # ------------------------------------ #\n","    valid_cu_bool *= ~np.isnan(co_prime_fill_idx)\n","    valid_co_bool *= ~np.isnan(cu_prime_fill_idx)\n","\n","    return cu_fill_idx, co_fill_idx, cu_prime_idx, co_prime_idx, cu_prime_fill_idx, co_prime_fill_idx, valid_cu_bool, valid_co_bool\n","    # return cu_fill_idx, co_fill_idx, cu_prime_idx, co_prime_idx, cu_prime_fill_idx, co_prime_fill_idx, \\\n","    #   cu_post_idx, co_post_idx, cu_post_fill_idx, co_post_fill_idx, valid_cu_bool, valid_co_bool\n","\n","\n","def wave_range_ratio_v4_2(res_df, wave_itv, wave_period, roll_hl_cnt=3):\n","\n","    wave_high_fill_ = res_df['wave_high_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    wave_low_fill_ = res_df['wave_low_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","\n","    roll_highs = [res_df['wave_high_fill_{}{}_-{}'.format(wave_itv, wave_period, cnt_ + 1)].to_numpy() for cnt_ in reversed(range(roll_hl_cnt))]\n","    roll_lows = [res_df['wave_low_fill_{}{}_-{}'.format(wave_itv, wave_period, cnt_ + 1)].to_numpy() for cnt_ in reversed(range(roll_hl_cnt))]\n","\n","    cu_wave1_range = roll_highs[-1] - roll_lows[-2]   # cu's roll_high_[:, -1] = prev_high & cu's roll_low_[:, -1] = current_low\n","    cu_wave2_range = roll_highs[-1] - wave_low_fill_     # for short, cu\n","    co_wave1_range = roll_highs[-2] - roll_lows[-1]   # co's roll_low_[:, -1] = prev_low & co's roll_high_[:, -1] = current_high\n","    co_wave2_range = wave_high_fill_ - roll_lows[-1]     # for long, co\n","    wave3_range = wave_high_fill_ - wave_low_fill_\n","\n","    res_df['cu_wrr_21_{}{}'.format(wave_itv, wave_period)] = cu_wave2_range / cu_wave1_range\n","    res_df['cu_wrr_32_{}{}'.format(wave_itv, wave_period)] = wave3_range / cu_wave2_range\n","\n","    res_df['co_wrr_21_{}{}'.format(wave_itv, wave_period)] = co_wave2_range / co_wave1_range\n","    res_df['co_wrr_32_{}{}'.format(wave_itv, wave_period)] = wave3_range / co_wave2_range\n","\n","    return res_df\n","\n","\n","def get_roll_wave_data_v2(res_df, valid_prime_idx, roll_idx_arr, data_col, roll_hl_cnt):\n","\n","    data = res_df[data_col].to_numpy()\n","    len_res_df = len(res_df)\n","    roll_cols = [data_col + '_-{}'.format(cnt_ + 1) for cnt_ in reversed(range(roll_hl_cnt))]\n","\n","    roll_data = pd.DataFrame(index=res_df.index, data=np.full((len_res_df, roll_hl_cnt), np.nan))\n","    roll_data.iloc[valid_prime_idx[roll_hl_cnt - 1:], :] = data[roll_idx_arr]  # 제한된 idx 를 제외한 row 에 roll_hl 입력\n","\n","    res_df[roll_cols] = roll_data.ffill()\n","\n","    return res_df\n","\n","def roll_wave_hl_idx_v5(t_df, wave_itv, wave_period, roll_hl_cnt=4):\n","\n","    co_prime_idx = t_df['wave_co_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    cu_prime_idx = t_df['wave_cu_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","\n","    valid_co_prime_idx = co_prime_idx[~np.isnan(co_prime_idx)].astype(int)  # roll_high 를 위한 prime_idx, this should be \"unique\"\n","    valid_cu_prime_idx = cu_prime_idx[~np.isnan(cu_prime_idx)].astype(int)  # roll_low 를 위한 prime_idx\n","\n","    roll_co_idx_arr = np.array([valid_co_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_co_prime_idx)) if\n","                                  idx_ + 1 >= roll_hl_cnt])  # cnt 수를 만족시키기 위해 idx 제한\n","    roll_cu_idx_arr = np.array(\n","        [valid_cu_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_cu_prime_idx)) if idx_ + 1 >= roll_hl_cnt])\n","    \n","    assert len(roll_co_idx_arr) > 0 and len(roll_cu_idx_arr) > 0\n","\n","    return valid_co_prime_idx, valid_cu_prime_idx, roll_co_idx_arr, roll_cu_idx_arr\n","    \n","def to_lower_tf_v3(ltf_df, htf_df, cols, backing_i=1, show_info=False):\n","    ltf_itv = pd.infer_freq(ltf_df.index)\n","    assert ltf_itv == 'T', \"currently only -> 'T' allowed..\"\n","    # assert type(column[0]) in [int, np.int64], \"column value should be integer\"\n","\n","    # cols = htf_df.columns[column]  # to_lower_tf_v1 의 int col 반영\n","\n","    if show_info:\n","        print(\"backing_i :\", backing_i)\n","\n","    renamed_last_index = htf_df.rename(index={htf_df.index[-1]: ltf_df.index[-1]}, inplace=False).iloc[[-1]]\n","    if htf_df.index[-1] != renamed_last_index.index[-1]:  # cannot reindex a non-unique index with a method or limit 방지\n","        htf_df = htf_df.append(renamed_last_index)\n","\n","    downsampled_df = htf_df[cols].shift(backing_i).resample(ltf_itv).ffill()\n","\n","    if len(downsampled_df) > len(ltf_df):\n","        downsampled_df = downsampled_df.iloc[-len(ltf_df):]\n","\n","    downsampled_df.index = ltf_df.index[-len(downsampled_df):]\n","    # assert len(ltf_df) <= len(downsampled_df), \"for join method, assert len(ltf_df) <= len(downsampled_df)\"\n","\n","    # ------ check last row's validity ------ #\n","    assert np.sum(~pd.isnull(downsampled_df.iloc[-1].values)) > 0, \"assert np.sum(~pd.isnull(downsampled_df.iloc[-1].values)) > 0\"\n","\n","    return downsampled_df"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"euA18M1uyc3s"},"outputs":[],"source":["\n","def wave_range_cci_v3(t_df, wave_period):\n","\n","    t_df = cci_v2(t_df, wave_period)\n","    itv = pd.infer_freq(t_df.index)\n","\n","    cci_ = t_df['cci_{}{}'.format(itv, wave_period)].to_numpy()\n","    b1_cci_ = t_df['cci_{}{}'.format(itv, wave_period)].shift(1).to_numpy()\n","\n","    band_width = 100\n","    upper_band = band_width\n","    lower_band = -band_width\n","\n","    len_df = len(t_df)\n","    len_df_range = np.arange(len_df).astype(int)\n","\n","    data_cols = ['open', 'high', 'low', 'close']\n","    open, high, low, close = [t_df[col_].to_numpy() for col_ in data_cols]\n","    # b1_close = t_df.close.shift(itv_num).to_numpy()\n","\n","    # ============ modules ============ #\n","    # ------ define co, cu ------ # <- point missing 과 관련해 정교해아함\n","    cu_bool = (b1_cci_ > upper_band) & (upper_band > cci_)\n","    co_bool = (b1_cci_ < lower_band) & (lower_band < cci_)\n","\n","    cu_idx = get_index_bybool(cu_bool, len_df_range)\n","    co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","    cu_fill_idx, co_fill_idx, cu_prime_idx, co_prime_idx, cu_prime_fill_idx, co_prime_fill_idx, valid_cu_bool, valid_co_bool = get_terms_info_v4(cu_idx, co_idx, len_df, len_df_range)\n","    # cu_fill_idx, co_fill_idx, cu_prime_idx, co_prime_idx, cu_prime_fill_idx, co_prime_fill_idx, \\\n","    #   cu_post_idx, co_post_idx, cu_post_fill_idx, co_post_fill_idx, valid_cu_bool, valid_co_bool = get_terms_info_v5(cu_idx, co_idx, len_df, len_df_range)\n","\n","    # ------ get post_terms ------ #\n","    high_post_terms = np.vstack((co_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","    low_post_terms = np.vstack((cu_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)\n","\n","    high_post_terms_cnt = high_post_terms[:, 1] - high_post_terms[:, 0]\n","    low_post_terms_cnt = low_post_terms[:, 1] - low_post_terms[:, 0]\n","\n","    # ------ get post_idx ------ #\n","    paired_cu_post_idx = high_post_terms[:, 1]   # Todo, 여기는 cross_idx (위에서 vstack 으로 cross_idx 입력함)\n","    paired_co_post_idx = low_post_terms[:, 1]\n","    \n","    cu_post_idx = np.full(len_df, np.nan)  # --> Todo, unavailable : not cross_idx\n","    co_post_idx = np.full(len_df, np.nan)\n","\n","    cu_post_idx[paired_cu_post_idx] = paired_cu_post_idx\n","    co_post_idx[paired_co_post_idx] = paired_co_post_idx\n","\n","    cu_post_fill_idx = fill_arr(cu_post_idx)\n","    co_post_fill_idx = fill_arr(co_post_idx)\n","\n","    # ------ get prime_terms ------ # # 기본은 아래 logic 으로 수행하고, update_hl 도 해당 term 구간의 hl 이 더 작거나 클경우 적용 가능할 것\n","    # high_prime_terms = np.vstack((co_prime_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","    # low_prime_terms = np.vstack((cu_prime_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)\n","\n","    # high_prime_terms_cnt = high_prime_terms[:, 1] - high_prime_terms[:, 0]\n","    # low_prime_terms_cnt = low_prime_terms[:, 1] - low_prime_terms[:, 0]\n","\n","    # paired_prime_cu_idx = high_prime_terms[:, 1]\n","    # paired_prime_co_idx = low_prime_terms[:, 1]\n","\n","    # ====== get wave_hl & terms ====== #\n","    wave_high_ = np.full(len_df, np.nan)\n","    wave_low_ = np.full(len_df, np.nan)\n","\n","    wave_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_post_terms])\n","    wave_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_post_terms])\n","\n","    wave_high_[paired_cu_post_idx] = wave_highs\n","    wave_low_[paired_co_post_idx] = wave_lows\n","\n","    wave_high_fill_ = fill_arr(wave_high_)\n","    wave_low_fill_ = fill_arr(wave_low_)\n","\n","    # ------ Todo, update_hl 에 대해서, post_terms_hl 적용 ------ #\n","    wave_high_terms_low_ = np.full(len_df, np.nan)\n","    wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","    wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_post_terms])  # for point rejection, Todo, min_max 설정 항상 주의\n","    wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_post_terms])\n","\n","    wave_high_terms_low_[paired_cu_post_idx] = wave_high_terms_lows\n","    wave_low_terms_high_[paired_co_post_idx] = wave_low_terms_highs\n","\n","    update_low_cu_bool = wave_high_terms_low_ < wave_low_fill_\n","    update_high_co_bool = wave_low_terms_high_ > wave_high_fill_\n","\n","    # ------ term cnt ------ #\n","    wave_high_terms_cnt_ = np.full(len_df, np.nan)\n","    wave_low_terms_cnt_ = np.full(len_df, np.nan)\n","\n","    wave_high_terms_cnt_[paired_cu_post_idx] = high_post_terms_cnt\n","    wave_low_terms_cnt_[paired_co_post_idx] = low_post_terms_cnt\n","\n","    wave_high_terms_cnt_fill_ = fill_arr(wave_high_terms_cnt_)\n","    wave_low_terms_cnt_fill_ = fill_arr(wave_low_terms_cnt_)\n","\n","    # ------ hl_fill 의 prime_idx 를 찾아야함 ------ #\n","    # b1_wave_high_fill_ = pd.Series(wave_high_fill_).shift(1).to_numpy()\n","    # b1_wave_low_fill_ = pd.Series(wave_low_fill_).shift(1).to_numpy()\n","    # wave_high_prime_idx = np.where((wave_high_fill_ != b1_wave_high_fill_) & ~np.isnan(wave_high_fill_), len_df_range, np.nan)\n","    # wave_low_prime_idx = np.where((wave_low_fill_ != b1_wave_low_fill_) & ~np.isnan(wave_low_fill_), len_df_range, np.nan)\n","    #\n","    # high_prime_idx_fill_ = fill_arr(wave_high_prime_idx)\n","    # low_prime_idx_fill_ = fill_arr(wave_low_prime_idx)\n","\n","    # ============ enlist to df_cols ============ #\n","    t_df['wave_high_fill_{}{}'.format(itv, wave_period)] = wave_high_fill_\n","    t_df['wave_low_fill_{}{}'.format(itv, wave_period)] = wave_low_fill_\n","    t_df['wave_high_terms_cnt_fill_{}{}'.format(itv, wave_period)] = wave_high_terms_cnt_fill_\n","    t_df['wave_low_terms_cnt_fill_{}{}'.format(itv, wave_period)] = wave_low_terms_cnt_fill_\n","\n","    t_df['wave_update_low_cu_bool_{}{}'.format(itv, wave_period)] = update_low_cu_bool  # temporary, for plot_check\n","    t_df['wave_update_high_co_bool_{}{}'.format(itv, wave_period)] = update_high_co_bool\n","\n","    t_df['wave_cu_{}{}'.format(itv, wave_period)] = cu_bool   # * ~update_low_cu_bool\n","    t_df['wave_co_{}{}'.format(itv, wave_period)] = co_bool   # * ~update_high_co_bool    \n","    \n","    t_df['wave_co_post_idx_{}{}'.format(itv, wave_period)] = co_post_idx    # paired_\n","    t_df['wave_cu_post_idx_{}{}'.format(itv, wave_period)] = cu_post_idx    # paired_\n","    t_df['wave_co_post_idx_fill_{}{}'.format(itv, wave_period)] = co_post_fill_idx\n","    t_df['wave_cu_post_idx_fill_{}{}'.format(itv, wave_period)] = cu_post_fill_idx\n","\n","    # Todo, idx 저장은 sync. 가 맞는 tf_df 에 대하여 적용하여야함\n","    # ------ for roll prev_hl ------ #\n","    # high_post_idx 를 위해 co_prime_idx 입력 = 뜻 : high_term's prime co_idx (high_prime_idx = wave_high 를 만들기 위한 가장 앞단의 co_idx)\n","    t_df['wave_co_prime_idx_{}{}'.format(itv, wave_period)] = co_prime_idx # co_prime_idx wave_high_prime_idx  # high 갱신을 고려해, prev_hl 는 prime_idx 기준으로 진행\n","    t_df['wave_cu_prime_idx_{}{}'.format(itv, wave_period)] = cu_prime_idx # cu_prime_idx wave_low_prime_idx  # cu_prime_idx's low 를 사용하겠다라는 의미, 즉 roll_prev 임\n","    t_df['wave_co_prime_idx_fill_{}{}'.format(itv, wave_period)] = co_prime_fill_idx # co_prime_fill_idx high_prime_idx_fill_\n","    t_df['wave_cu_prime_idx_fill_{}{}'.format(itv, wave_period)] = cu_prime_fill_idx # cu_prime_fill_idx low_prime_idx_fill_\n","\n","    # ------ for plot_checking ------ #\n","    t_df['wave_cu_marker_{}{}'.format(itv, wave_period)] = get_line(cu_idx, close)\n","    t_df['wave_co_marker_{}{}'.format(itv, wave_period)] = get_line(co_idx, close)\n","\n","    return t_df"]},{"cell_type":"markdown","metadata":{"id":"LyGnAMvLYvOZ"},"source":["#### wave_range"]},{"cell_type":"markdown","metadata":{"id":"O1uu9vQnY5dn"},"source":["##### plot_check"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YqBXjVPzdccC"},"outputs":[],"source":["i = random.randint(0, len(res_df))\n","# i = 235290, 512385\n","# i = 74470\n","# i = 82533\n","i = 387103\n","i = 370055\n","i = 370940\n","# i = 185369\n","i = 186060\n","\n","plot_size = 300 # 1500 150\n","# t_df = res_df.iloc[i - plot_size:i + plot_size]\n","t_df = res_df.iloc[i - plot_size:i]\n","a_data = t_df.to_numpy()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"PgaNnempXRd_"},"outputs":[],"source":["wave_itv1, wave_period1 = 'T', 20\n","roll_hl_cnt = 3\n","\n","if wave_itv1 != 'T':\n","    offset = '1h' if wave_itv1 != 'D' else '9h'\n","    htf_df = to_htf(t_df, wave_itv1, offset=offset)  # to_htf 는 ohlc, 4개의 col 만 존재 (현재까지)\n","    htf_df = wave_range_cci_v3(htf_df, wave_period1)\n","    \n","    cols = list(htf_df.columns)  # 그냥 다 넣어버리기 (추후 혼란 방지)\n","\n","    valid_high_prime_idx, valid_low_prime_idx, roll_prev_high_idx_arr, roll_prev_low_idx_arr = roll_wave_hl_idx_v5(htf_df, wave_itv1, wave_period1, roll_hl_cnt=roll_hl_cnt)\n","\n","    htf_df = get_roll_wave_data_v2(htf_df, valid_high_prime_idx, roll_prev_high_idx_arr, 'wave_high_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","    cols += list(htf_df.columns[-roll_hl_cnt:])\n","\n","    htf_df = get_roll_wave_data_v2(htf_df, valid_low_prime_idx, roll_prev_low_idx_arr, 'wave_low_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","    cols += list(htf_df.columns[-roll_hl_cnt:])\n","\n","    htf_df = wave_range_ratio_v4_2(htf_df, wave_itv1, wave_period1, roll_hl_cnt=3)\n","    cols += list(htf_df.columns[-4:])  # wrr 은 4개의 cols\n","\n","    # ------ 필요한 cols 만 join (htf's idx 정보는 ltf 와 sync. 가 맞지 않음 - join 불가함) ------ #\n","    t_df.drop(cols, inplace=True, axis=1, errors='ignore')\n","    t_df = t_df.join(to_lower_tf_v3(t_df, htf_df, cols, backing_i=0), how='inner')\n","\n","else:  \n","  t_df = wave_range_cci_v3(t_df, wave_period1)\n","  # t_df = wave_range_cci_v2(t_df, wave_period1)\n","\n","  valid_high_prime_idx, valid_low_prime_idx, roll_prev_high_idx_arr, roll_prev_low_idx_arr = roll_wave_hl_idx_v5(t_df, wave_itv1, wave_period1, roll_hl_cnt=roll_hl_cnt)\n","  t_df = get_roll_wave_data_v2(t_df, valid_high_prime_idx, roll_prev_high_idx_arr, 'wave_high_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","  t_df = get_roll_wave_data_v2(t_df, valid_low_prime_idx, roll_prev_low_idx_arr, 'wave_low_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","\n","  t_df = wave_range_ratio_v4_2(t_df, wave_itv1, wave_period1, roll_hl_cnt=roll_hl_cnt)\n","\n","# t_df = wave_range_v11(t_df, config)\n","# t_df = wave_range_v11_2(t_df, config)\n","# t_df = wave_range_dcbase_v11_3(t_df, config, over_period=2)\n","# t_df = wave_range_cci_v1(t_df, wave_itv1, wave_period1)\n","# t_df = wave_range_v12(t_df, config, ltf_df=None)\n","# t_df = wave_range_v13(t_df, config, ltf_df=None, term_thresh=1)\n","# t_df = wave_range_v14(t_df, config, ltf_df=None, term_thresh1=1, term_thresh2=3)\n","# t_df = wave_range_v15(t_df, config, term_thresh1=2, term_thresh2=3)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":863},"executionInfo":{"elapsed":3595,"status":"ok","timestamp":1654600248530,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"-Dr_tTk9csFm","outputId":"d0a34398-34d4-4d56-add2-e66215f316f9"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 1080x1080 with 2 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(15, 15))\n","nrows, ncols = 2, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols,\n","                        height_ratios=[3, 1]\n","                        )\n","\n","ax = fig.add_subplot(gs[0])\n","\n","# ------ candles ------ #\n","candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","# _ = [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","\n","len_df = len(t_df)   \n","len_df_range = np.arange(len_df).astype(int)\n","\n","# ============ ============ ============ #\n","# ============ ============ ============ #\n","\n","wave_high_fill_ = t_df['wave_high_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_low_fill_ = t_df['wave_low_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_high_terms_cnt_fill_ = t_df['wave_high_terms_cnt_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_low_terms_cnt_fill_ = t_df['wave_low_terms_cnt_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","wave_cu_idx_ = get_index_bybool(t_df['wave_cu_{}{}'.format(wave_itv1, wave_period1)].to_numpy(), len_df_range)\n","wave_co_idx_ = get_index_bybool(t_df['wave_co_{}{}'.format(wave_itv1, wave_period1)].to_numpy(), len_df_range)\n","# wave_cu_bool_idx_ = get_index_bybool(t_df['wave_cu_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy(), len_df_range)\n","# wave_co_bool_idx_ = get_index_bybool(t_df['wave_co_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy(), len_df_range)\n","wave_update_low_cu_bool_idx_ = get_index_bybool(t_df['wave_update_low_cu_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy(), len_df_range)\n","wave_update_high_co_bool_idx_ = get_index_bybool(t_df['wave_update_high_co_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy(), len_df_range)\n","\n","wave_cu_prime_idx_ = t_df['wave_cu_prime_idx_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_co_prime_idx_ = t_df['wave_co_prime_idx_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_cu_prime_idx_fill_ = t_df['wave_cu_prime_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_co_prime_idx_fill_ = t_df['wave_co_prime_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","wave_cu_post_idx_ = t_df['wave_cu_post_idx_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_co_post_idx_ = t_df['wave_co_post_idx_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_cu_post_idx_fill_ = t_df['wave_cu_post_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_co_post_idx_fill_ = t_df['wave_co_post_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","wave_cu_marker_ = t_df['wave_cu_marker_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_co_marker_ = t_df['wave_co_marker_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","# high_prime_idx = t_df['wave_high_prime_idx_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","# low_prime_idx = t_df['wave_low_prime_idx_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","# high_prime_idx_fill = t_df['wave_high_prime_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","# low_prime_idx_fill = t_df['wave_low_prime_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","# ============ plot_check ============ #\n","# dc_base_ = t_df['dc_base_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","# plt.step(len_df_range, dc_base_, alpha=1.0, color='cyan', linewidth=1)\n","\n","plt.step(len_df_range, wave_cu_marker_, \"o\", alpha=1.0, color='#ff00ff', markersize=3)\n","plt.step(len_df_range, wave_co_marker_, \"o\", alpha=1.0, color='#00ff00', markersize=3)\n","\n","# [plt.axvline(int(idx_), color=\"#ff0000\") for idx_ in wave_cu_bool_idx_ if not np.isnan(idx_)]\n","# [plt.axvline(int(idx_), color=\"#0000ff\") for idx_ in wave_co_bool_idx_ if not np.isnan(idx_)]\n","[plt.axvline(int(idx_), color=\"#ff0000\") for idx_ in wave_update_low_cu_bool_idx_ if not np.isnan(idx_)]\n","[plt.axvline(int(idx_), color=\"#0000ff\") for idx_ in wave_update_high_co_bool_idx_ if not np.isnan(idx_)]\n","\n","# [plt.axvline(int(idx_), color=\"#ff00ff\") for idx_ in wave_cu_idx_ if not np.isnan(idx_)]\n","# [plt.axvline(int(idx_), color=\"#00ff00\") for idx_ in wave_co_idx_ if not np.isnan(idx_)]\n","\n","# [plt.axvline(int(idx_), color=\"#00ff00\") for idx_ in wave_high_prime_idx if not np.isnan(idx_)]\n","# [plt.axvline(int(idx_), color=\"#ff00ff\") for idx_ in wave_low_prime_idx if not np.isnan(idx_)]\n","\n","plt.step(len_df_range, wave_high_fill_, \"*\", alpha=1.0, color='#00ff00', markersize=6)\n","plt.step(len_df_range, wave_low_fill_, \"*\", alpha=1.0, color='#ff00ff', markersize=6)\n","\n","# ------ data check in gs[0] ------ #\n","plt.axvline(wave_cu_post_idx_fill_[230], color='r')\n","plt.axvline(wave_cu_prime_idx_fill_[230])\n","\n","plt.xlim(0, len_df)\n","\n","plt.subplot(gs[1])\n","cci_ = t_df['cci_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","plt.step(len_df_range, cci_, alpha=1.0, color='yellow', linewidth=2)\n","plt.axhline(100, color=\"#ffffff\")\n","plt.axhline(-100, color=\"#ffffff\")\n","[plt.axvline(int(idx_), color=\"#ff00ff\") for idx_ in wave_cu_idx_ if not np.isnan(idx_)]\n","[plt.axvline(int(idx_), color=\"#00ff00\") for idx_ in wave_co_idx_ if not np.isnan(idx_)]\n","\n","# plt.step(len_df_range, wave_high_terms_cnt_fill_, alpha=1.0, color='yellow', linewidth=2)\n","# plt.step(len_df_range, wave_low_terms_cnt_fill_, alpha=1.0, color='yellow', linewidth=2)\n","# plt.step(len_df_range, wave_high_terms_cnt_fill_, \"*\", alpha=1.0, color='#00ff00', markersize=6)\n","# plt.step(len_df_range, wave_low_terms_cnt_fill_, \"*\", alpha=1.0, color='#ff00ff', markersize=6)\n","\n","\n","plt.xlim(0, len_df)  # for sync. with gs[0]\n","\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"c2yVTn1tnxMn"},"source":["###### data_window"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":652,"status":"ok","timestamp":1654597305453,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"0DgdFydfB1f-","outputId":"a9078354-9c57-479e-cba0-052dbedd954f"},"outputs":[{"name":"stdout","output_type":"stream","text":["169.0\n","185.0\n"]}],"source":["print(wave_cu_post_idx_fill_[210])\n","print(wave_cu_prime_idx_fill_[210])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"I_ZNM9n7hFOf"},"outputs":[],"source":["idx_ = 990\n","\n","# t_df[roll_cols].iloc[idx_]\n","t_df.iloc[:, -4:].iloc[idx_]\n","\n","# roll_cnt = 3\n","# valid_high_prime_idx, valid_low_prime_idx, roll_prev_high_idx_arr, roll_prev_low_idx_arr = roll_wave_hl_v4(t_df, wave_itv1, wave_period1, roll_hl_cnt=roll_cnt)\n","# roll_high = get_roll_wave_data(valid_high_prime_idx, roll_prev_high_idx_arr, len_df, wave_high_fill_, roll_cnt)\n","# roll_low = get_roll_wave_data(valid_low_prime_idx, roll_prev_low_idx_arr, len_df, wave_low_fill_, roll_cnt)\n","\n","# print(roll_high[idx_])\n","# print(roll_low[idx_])\n","# roll_prev_high_idx_arr\n","# valid_high_prime_idx"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zj_d5wsfDzf_"},"outputs":[],"source":["roll_hl_cnt = 3\n","high_prime_idx = t_df['wave_high_prime_idx_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","low_prime_idx = t_df['wave_low_prime_idx_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","valid_high_prime_idx = high_prime_idx[~np.isnan(high_prime_idx)].astype(int)  # roll_high 를 위한 prime_idx\n","valid_low_prime_idx = low_prime_idx[~np.isnan(low_prime_idx)].astype(int)  # roll_low 를 위한 prime_idx\n","\n","roll_high_idx_arr = np.array([valid_high_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_high_prime_idx)) if\n","                              idx_ + 1 >= roll_hl_cnt])  # cnt 수를 만족시키기 위해 idx 제한\n","roll_low_idx_arr = np.array(\n","    [valid_low_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_low_prime_idx)) if idx_ + 1 >= roll_hl_cnt])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Z-EokTzIqb-T"},"outputs":[],"source":["%timeit -n1 -r1 wave_range_v10(res_df[-100000:], period1, ltf_df=None) # 23.7 s per loop\n","%timeit -n1 -r1 wave_range_v11(res_df[-100000:], period1, ltf_df=None) # 574 ms per loop"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"TqMmmSAGuChM"},"outputs":[],"source":["t_df = cci_v2(t_df, wave_period)\n","\n","cci_ = t_df['cci_{}{}'.format(itv, wave_period)].to_numpy()\n","b1_cci_ = t_df['cci_{}{}'.format(itv, wave_period)].shift(1).to_numpy()\n","\n","band_width = 100\n","upper_band = band_width\n","lower_band = -band_width\n","\n","len_df = len(t_df)\n","len_df_range = np.arange(len_df).astype(int)\n","\n","data_cols = ['open', 'high', 'low', 'close']\n","open, high, low, close = [t_df[col_].to_numpy() for col_ in data_cols]\n","# b1_close = t_df.close.shift(itv_num).to_numpy()\n","\n","# ============ modules ============ #\n","# ------ define co, cu ------ # <- point missing 과 관련해 정교해아함\n","cu_bool = (b1_cci_ > upper_band) & (upper_band > cci_)\n","co_bool = (b1_cci_ < lower_band) & (lower_band < cci_)\n","\n","cu_idx = get_index_bybool(cu_bool, len_df_range)\n","co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","cu_fill_idx, co_fill_idx, cu_prime_idx, co_prime_idx, cu_prime_fill_idx, co_prime_fill_idx, valid_cu_bool, valid_co_bool = get_terms_info_v4(\n","    cu_idx, co_idx, len_df, len_df_range)\n","\n","# ------ get post_terms ------ #\n","high_post_terms = np.vstack((co_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","low_post_terms = np.vstack((cu_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)\n","\n","high_post_terms_cnt = high_post_terms[:, 1] - high_post_terms[:, 0]\n","low_post_terms_cnt = low_post_terms[:, 1] - low_post_terms[:, 0]\n","\n","paired_post_cu_idx = high_post_terms[:, 1]\n","paired_post_co_idx = low_post_terms[:, 1]\n","\n","# ------ get prime_terms ------ # # 기본은 아래 logic 으로 수행하고, update_hl 도 해당 term 구간의 hl 이 더 작거나 클경우 적용 가능할 것\n","# high_prime_terms = np.vstack((co_prime_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","# low_prime_terms = np.vstack((cu_prime_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)\n","\n","# high_prime_terms_cnt = high_prime_terms[:, 1] - high_prime_terms[:, 0]\n","# low_prime_terms_cnt = low_prime_terms[:, 1] - low_prime_terms[:, 0]\n","\n","# paired_prime_cu_idx = high_prime_terms[:, 1]\n","# paired_prime_co_idx = low_prime_terms[:, 1]\n","\n","# ====== get wave_hl & terms ====== #\n","wave_high_ = np.full(len_df, np.nan)\n","wave_low_ = np.full(len_df, np.nan)\n","\n","wave_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_post_terms])\n","wave_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_post_terms])\n","\n","wave_high_[paired_post_cu_idx] = wave_highs\n","wave_low_[paired_post_co_idx] = wave_lows\n","\n","wave_high_fill_ = fill_arr(wave_high_)\n","wave_low_fill_ = fill_arr(wave_low_)\n","\n","# ------ Todo, update_hl 에 대해서, post_terms_hl 적용 ------ #\n","wave_high_terms_low_ = np.full(len_df, np.nan)\n","wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_post_terms])  # for point rejection, Todo, min_max 설정 항상 주의\n","wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_post_terms])\n","\n","wave_high_terms_low_[paired_post_cu_idx] = wave_high_terms_lows\n","wave_low_terms_high_[paired_post_co_idx] = wave_low_terms_highs\n","\n","update_low_cu_bool = wave_high_terms_low_ < wave_low_fill_\n","update_high_co_bool = wave_low_terms_high_ > wave_high_fill_\n","\n","# ------ term cnt ------ #\n","wave_high_terms_cnt_ = np.full(len_df, np.nan)\n","wave_low_terms_cnt_ = np.full(len_df, np.nan)\n","\n","wave_high_terms_cnt_[paired_post_cu_idx] = high_post_terms_cnt\n","wave_low_terms_cnt_[paired_post_co_idx] = low_post_terms_cnt\n","\n","wave_high_terms_cnt_fill_ = fill_arr(wave_high_terms_cnt_)\n","wave_low_terms_cnt_fill_ = fill_arr(wave_low_terms_cnt_)\n","\n","# ------ hl_fill 의 prime_idx 를 찾아야함 ------ #\n","# b1_wave_high_fill_ = pd.Series(wave_high_fill_).shift(1).to_numpy()\n","# b1_wave_low_fill_ = pd.Series(wave_low_fill_).shift(1).to_numpy()\n","# wave_high_prime_idx = np.where((wave_high_fill_ != b1_wave_high_fill_) & ~np.isnan(wave_high_fill_), len_df_range, np.nan)\n","# wave_low_prime_idx = np.where((wave_low_fill_ != b1_wave_low_fill_) & ~np.isnan(wave_low_fill_), len_df_range, np.nan)\n","#\n","# high_prime_idx_fill_ = fill_arr(wave_high_prime_idx)\n","# low_prime_idx_fill_ = fill_arr(wave_low_prime_idx)\n","\n","# ============ enlist to df_cols ============ #\n","t_df['wave_high_fill_{}{}'.format(itv, wave_period)] = wave_high_fill_\n","t_df['wave_low_fill_{}{}'.format(itv, wave_period)] = wave_low_fill_\n","t_df['wave_high_terms_cnt_fill_{}{}'.format(itv, wave_period)] = wave_high_terms_cnt_fill_\n","t_df['wave_low_terms_cnt_fill_{}{}'.format(itv, wave_period)] = wave_low_terms_cnt_fill_\n","\n","# ------ for roll prev_hl ------ #\n","# high_post_idx 를 위해 co_prime_idx 입력\n","t_df['wave_high_prime_idx_{}{}'.format(itv, wave_period)] = co_prime_idx # co_prime_idx wave_high_prime_idx  # high 갱신을 고려해, prev_hl 는 prime_idx 기준으로 진행\n","t_df['wave_low_prime_idx_{}{}'.format(itv, wave_period)] = cu_prime_idx # cu_prime_idx wave_low_prime_idx  # cu_prime_idx's low 를 사용하겠다라는 의미, 즉 roll_prev 임\n","\n","# ------ for first_high ------ #\n","t_df['wave_high_prime_idx_fill_{}{}'.format(itv, wave_period)] = co_prime_fill_idx # co_prime_fill_idx high_prime_idx_fill_\n","t_df['wave_low_prime_idx_fill_{}{}'.format(itv, wave_period)] = cu_prime_fill_idx # cu_prime_fill_idx low_prime_idx_fill_\n","\n","# ------ for plot_checking ------ #\n","t_df['wave_cu_bool_{}{}'.format(itv, wave_period)] = cu_bool  # temporary, for plot_check\n","t_df['wave_co_bool_{}{}'.format(itv, wave_period)] = co_bool\n","t_df['wave_cu_{}{}'.format(itv, wave_period)] = cu_bool * ~update_low_cu_bool\n","t_df['wave_co_{}{}'.format(itv, wave_period)] = co_bool * ~update_high_co_bool\n","t_df['wave_cu_marker_{}{}'.format(itv, wave_period)] = get_line(cu_idx, close)\n","t_df['wave_co_marker_{}{}'.format(itv, wave_period)] = get_line(co_idx, close)\n","# t_df['update_low_cu_bool_{}{}'.format(itv, wave_period)] = update_low_cu_bool\n","# t_df['update_high_co_bool_{}{}'.format(itv, wave_period)] = update_high_co_bool\n","\n","if itv != 'T':\n","    join_cols = np.arange(-15, 0, 1).astype(int)  # wave vars. + wave_unit's col\n","    res_df.drop(t_df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","    try:\n","        res_df = res_df.join(to_lower_tf_v3(res_df, t_df, join_cols, backing_i=0), how='inner')\n","    except Exception as e:\n","        print(\"error in wave_range()'s join() :\", e)\n","\n","    return res_df\n","\n","else:\n","    return t_df"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"50ucQUF-Jixd"},"outputs":[],"source":["roll_hl_cnt = 3\n","wave_itv = pd.infer_freq(t_df.index)\n","wave_period = config.tr_set.wave_period\n","\n","len_df = len(t_df)\n","\n","high_prime_idx = t_df['wave_high_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()   # cu_post_idx\n","low_prime_idx = t_df['wave_low_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()    \n","\n","valid_high_prime_idx = high_prime_idx[~np.isnan(high_prime_idx)].astype(int)  # roll_high 를 위한 prime_idx\n","valid_low_prime_idx = low_prime_idx[~np.isnan(low_prime_idx)].astype(int)  # roll_low 를 위한 prime_idx\n","\n","roll_high_idx_arr = np.array([valid_high_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_high_prime_idx)) if idx_ + 1 >= roll_hl_cnt])  # cnt 수를 만족시키기 위해 idx 제한\n","roll_low_idx_arr = np.array([valid_low_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_low_prime_idx)) if idx_ + 1 >= roll_hl_cnt])\n"]},{"cell_type":"markdown","metadata":{"id":"Q_1wJTcRYpm8"},"source":["##### legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RVFfP9VcDG2_"},"outputs":[],"source":["\n","def get_roll_wave_data(valid_prime_idx, roll_idx_arr, len_df, data, roll_hl_cnt):\n","\n","    roll_data = pd.DataFrame(np.full((len_df, roll_hl_cnt), np.nan))\n","    roll_data.iloc[valid_prime_idx[roll_hl_cnt - 1:], :] = data[roll_idx_arr]  # 제한된 idx 를 제외한 row 에 roll_hl 입력\n","\n","    return roll_data.ffill().to_numpy()\n","\n","def roll_wave_hl_idx_v4(t_df, wave_itv, wave_period, roll_hl_cnt=4):\n","\n","    high_prime_idx = t_df['wave_high_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    low_prime_idx = t_df['wave_low_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","\n","    valid_high_prime_idx = high_prime_idx[~np.isnan(high_prime_idx)].astype(int)  # roll_high 를 위한 prime_idx, this should be \"unique\"\n","    valid_low_prime_idx = low_prime_idx[~np.isnan(low_prime_idx)].astype(int)  # roll_low 를 위한 prime_idx\n","\n","    roll_high_idx_arr = np.array([valid_high_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_high_prime_idx)) if\n","                                  idx_ + 1 >= roll_hl_cnt])  # cnt 수를 만족시키기 위해 idx 제한\n","    roll_low_idx_arr = np.array(\n","        [valid_low_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_low_prime_idx)) if idx_ + 1 >= roll_hl_cnt])\n","\n","    return valid_high_prime_idx, valid_low_prime_idx, roll_high_idx_arr, roll_low_idx_arr\n","    \n","def wave_range_ratio_v4_1(res_df, config, roll_hl_cnt=3):\n","    wave_itv = pd.infer_freq(res_df.index)\n","    wave_period = config.tr_set.wave_period\n","    len_df = len(res_df)\n","\n","    valid_high_prime_idx, valid_low_prime_idx, roll_high_idx_arr, roll_low_idx_arr = roll_wave_hl_v4(res_df, config, roll_hl_cnt=roll_hl_cnt)\n","\n","    wave_high_fill_ = res_df['wave_high_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    wave_low_fill_ = res_df['wave_low_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    roll_high_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, wave_high_fill_, roll_hl_cnt)\n","    roll_low_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, wave_low_fill_, roll_hl_cnt)\n","\n","    cu_wave1_range = roll_high_[:, -1] - roll_low_[:, -2]   # cu's roll_high_[:, -1] = prev_high & cu's roll_low_[:, -1] = current_low\n","    cu_wave2_range = roll_high_[:, -1] - wave_low_fill_     # for short, cu\n","    co_wave1_range = roll_high_[:, -2] - roll_low_[:, -1]   # co's roll_low_[:, -1] = prev_low & co's roll_high_[:, -1] = current_high\n","    co_wave2_range = wave_high_fill_ - roll_low_[:, -1]     # for long, co\n","    wave3_range = wave_high_fill_ - wave_low_fill_\n","\n","    res_df['cu_wrr_21_{}{}'.format(wave_itv, wave_period)] = cu_wave2_range / cu_wave1_range\n","    res_df['cu_wrr_32_{}{}'.format(wave_itv, wave_period)] = wave3_range / cu_wave2_range\n","\n","    res_df['co_wrr_21_{}{}'.format(wave_itv, wave_period)] = co_wave2_range / co_wave1_range\n","    res_df['co_wrr_32_{}{}'.format(wave_itv, wave_period)] = wave3_range / co_wave2_range\n","\n","    return res_df\n","\n","def wave_range_ratio_v4(res_df, config, roll_hl_cnt=3):\n","    wave_itv = pd.infer_freq(res_df.index)\n","    wave_period = config.tr_set.wave_period\n","    len_df = len(res_df)\n","\n","    valid_high_prime_idx, valid_low_prime_idx, roll_high_idx_arr, roll_low_idx_arr = roll_wave_hl_v4(res_df, config, roll_hl_cnt=roll_hl_cnt)\n","\n","    wave_high_fill_ = res_df['wave_high_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    wave_low_fill_ = res_df['wave_low_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    roll_high_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, wave_high_fill_, roll_hl_cnt)\n","    roll_low_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, wave_low_fill_, roll_hl_cnt)\n","\n","    wave1_range = roll_high_[:, -2] - roll_low_[:, -2]\n","    cu_wave2_range = roll_high_[:, -2] - roll_low_[:, -1]  # for short, cu\n","    co_wave2_range = roll_high_[:, -1] - roll_low_[:, -2]  # for long, co\n","    wave3_range = roll_high_[:, -1] - roll_low_[:, -1]\n","\n","    res_df['cu_wrr_21_{}{}'.format(wave_itv, wave_period)] = cu_wave2_range / wave1_range\n","    res_df['cu_wrr_32_{}{}'.format(wave_itv, wave_period)] = wave3_range / cu_wave2_range\n","\n","    res_df['co_wrr_21_{}{}'.format(wave_itv, wave_period)] = co_wave2_range / wave1_range\n","    res_df['co_wrr_32_{}{}'.format(wave_itv, wave_period)] = wave3_range / co_wave2_range\n","\n","    return res_df\n","\n","\n","def get_terms_info_v4(cu_idx, co_idx, len_df, len_df_range):\n","\n","    cu_fill_idx = fill_arr(cu_idx)\n","    co_fill_idx = fill_arr(co_idx)\n","\n","    notnan_cu_bool = ~np.isnan(cu_idx)\n","    notnan_co_bool = ~np.isnan(co_idx)\n","\n","    valid_cu_bool = notnan_cu_bool * ~np.isnan(co_fill_idx)  # high_terms 를 위해 pair 되는 fill & idx 의 nan 제거\n","    valid_co_bool = notnan_co_bool * ~np.isnan(cu_fill_idx)\n","\n","    # ------ 생략된 idx 에 대한 prime_idx 탐색 ------ #\n","    high_bool = cu_fill_idx < co_fill_idx  # 이렇게 해야 high_terms[:, 1] 이 cu_idx 가 나옴\n","    low_bool = co_fill_idx < cu_fill_idx\n","\n","    high_terms_vec = get_index_bybool(high_bool, len_df_range)\n","    low_terms_vec = get_index_bybool(low_bool, len_df_range)  # -> low_terms\n","\n","    high_terms_list = using_clump(high_terms_vec)\n","    low_terms_list = using_clump(low_terms_vec)\n","\n","    valid_co_prime_idx = np.array([terms.min() for terms in high_terms_list])\n","    valid_cu_prime_idx = np.array([terms.min() for terms in low_terms_list])\n","\n","    valid_co_post_idx = np.array([terms.max() for terms in high_terms_list])\n","    valid_cu_post_idx = np.array([terms.max() for terms in low_terms_list])\n","\n","    cu_prime_idx = np.full(len_df, np.nan)\n","    co_prime_idx = np.full(len_df, np.nan)\n","\n","    cu_prime_idx[valid_cu_prime_idx] = valid_cu_prime_idx\n","    co_prime_idx[valid_co_prime_idx] = valid_co_prime_idx\n","\n","    cu_prime_fill_idx = fill_arr(cu_prime_idx)\n","    co_prime_fill_idx = fill_arr(co_prime_idx)\n","\n","    # cu_post_idx = np.full(len_df, np.nan)\n","    # co_post_idx = np.full(len_df, np.nan)\n","\n","    # cu_post_idx[valid_cu_post_idx] = valid_cu_post_idx\n","    # co_post_idx[valid_co_post_idx] = valid_co_post_idx\n","\n","    # cu_post_fill_idx = fill_arr(cu_post_idx)\n","    # co_post_fill_idx = fill_arr(co_post_idx)\n","\n","    valid_cu_bool *= ~np.isnan(co_prime_fill_idx)\n","    valid_co_bool *= ~np.isnan(cu_prime_fill_idx)\n","\n","    return cu_fill_idx, co_fill_idx, cu_prime_idx, co_prime_idx, cu_prime_fill_idx, co_prime_fill_idx, valid_cu_bool, valid_co_bool\n","    # return cu_fill_idx, co_fill_idx, cu_prime_idx, co_prime_idx, cu_prime_fill_idx, co_prime_fill_idx, \\\n","    #         cu_post_idx, co_post_idx, cu_post_fill_idx, co_post_fill_idx, valid_cu_bool, valid_co_bool\n","\n","\n","def wave_range_dcbase_v11_3(res_df, config, itv='T', over_period=2):  # v2 for period1 only\n","\n","    if itv != 'T':\n","      offset = '1h' if itv != 'D' else '9h'\n","      t_df = to_htf(res_df, itv, offset=offset)\n","    else:\n","      t_df = res_df\n","\n","    period1 = config.tr_set.wave_period\n","    itv_num = to_itvnum(itv)\n","    # print(itv_num)\n","\n","    t_df = donchian_channel_v4(t_df, period1)\n","\n","    dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].to_numpy()\n","    # b1_dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].shift(itv_num).to_numpy()\n","\n","    len_df = len(t_df)\n","    len_df_range = np.arange(len_df).astype(int)\n","    # short_open_res = np.ones(len_df)\n","    # long_open_res = np.ones(len_df)\n","\n","    data_cols = ['open', 'high', 'low', 'close']\n","    open, high, low, close = [t_df[col_].to_numpy() for col_ in data_cols]\n","    # b1_close = t_df.close.shift(itv_num).to_numpy()\n","\n","    over_base = close > dc_base_\n","    prev_over_base = pd.Series(over_base).rolling(over_period).min().shift(1).to_numpy() == 1   # min = 1 => period's all-over, max = 0\n","    prev_under_base = pd.Series(over_base).rolling(over_period).max().shift(1).to_numpy() == 0  # max = 0 => period's all-under, \n","\n","    # ============ modules ============ #\n","    # ------ define co, cu ------ # <- point missing 과 관련해 정교해아함    \n","    cu_bool = prev_over_base & ~over_base\n","    co_bool = prev_under_base & over_base\n","\n","    cu_idx = get_index_bybool(cu_bool, len_df_range)\n","    co_idx = get_index_bybool(co_bool, len_df_range)\n","    \n","    cu_fill_idx, co_fill_idx, cu_prime_idx, co_prime_idx, cu_prime_fill_idx, co_prime_fill_idx, valid_cu_bool, valid_co_bool = get_terms_info_v4(cu_idx, co_idx, len_df, len_df_range)    \n","\n","    # ------ get post_terms ------ #\n","    high_post_terms = np.vstack((co_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","    low_post_terms = np.vstack((cu_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)\n","\n","    high_post_terms_cnt = high_post_terms[:, 1] - high_post_terms[:, 0]\n","    low_post_terms_cnt = low_post_terms[:, 1] - low_post_terms[:, 0]\n","\n","    paired_post_cu_idx = high_post_terms[:, 1]\n","    paired_post_co_idx = low_post_terms[:, 1]\n","\n","    # ------ get prime_terms ------ # # 기본은 아래 logic 으로 수행하고, update_hl 도 해당 term 구간의 hl 이 더 작거나 클경우 적용 가능할 것\n","    # high_prime_terms = np.vstack((co_prime_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","    # low_prime_terms = np.vstack((cu_prime_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)\n","    \n","    # high_prime_terms_cnt = high_prime_terms[:, 1] - high_prime_terms[:, 0]\n","    # low_prime_terms_cnt = low_prime_terms[:, 1] - low_prime_terms[:, 0]\n","\n","    # paired_prime_cu_idx = high_prime_terms[:, 1]\n","    # paired_prime_co_idx = low_prime_terms[:, 1]\n","\n","    # ====== get wave_hl & terms ====== #\n","    wave_high_ = np.full(len_df, np.nan)\n","    wave_low_ = np.full(len_df, np.nan)\n","\n","    wave_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_post_terms])\n","    wave_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_post_terms])\n","\n","    wave_high_[paired_post_cu_idx] = wave_highs\n","    wave_low_[paired_post_co_idx] = wave_lows\n","\n","    wave_high_fill_ = fill_arr(wave_high_)\n","    wave_low_fill_ = fill_arr(wave_low_)\n","\n","    # # ------ Todo, update_hl 에 대해서, post_terms_hl 적용 ------ #\n","    wave_high_terms_low_ = np.full(len_df, np.nan)\n","    wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","    wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_post_terms])  # for point rejection, Todo, min_max 설정 항상 주의\n","    wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_post_terms])\n","\n","    wave_high_terms_low_[paired_post_cu_idx] = wave_high_terms_lows\n","    wave_low_terms_high_[paired_post_co_idx] = wave_low_terms_highs\n","\n","    update_low_cu_bool = wave_high_terms_low_ < wave_low_fill_\n","    update_high_co_bool = wave_low_terms_high_ > wave_high_fill_\n","\n","    wave_high_fill_ = fill_arr(wave_high_)\n","    wave_low_fill_ = fill_arr(wave_low_)\n","\n","    wave_high_terms_cnt_ = np.full(len_df, np.nan)\n","    wave_low_terms_cnt_ = np.full(len_df, np.nan)\n","\n","    wave_high_terms_cnt_[paired_post_cu_idx] = high_post_terms_cnt\n","    wave_low_terms_cnt_[paired_post_co_idx] = low_post_terms_cnt\n","\n","    wave_high_terms_cnt_fill_ = fill_arr(wave_high_terms_cnt_)\n","    wave_low_terms_cnt_fill_ = fill_arr(wave_low_terms_cnt_)\n","\n","    # ------ hl_fill 의 prime_idx 를 찾아야함 ------ #\n","    b1_wave_high_fill_ = pd.Series(wave_high_fill_).shift(1).to_numpy()\n","    b1_wave_low_fill_ = pd.Series(wave_low_fill_).shift(1).to_numpy()\n","    wave_high_prime_idx = np.where((wave_high_fill_ != b1_wave_high_fill_) & ~np.isnan(wave_high_fill_), len_df_range, np.nan)\n","    wave_low_prime_idx = np.where((wave_low_fill_ != b1_wave_low_fill_) & ~np.isnan(wave_low_fill_), len_df_range, np.nan)\n","\n","    high_prime_idx_fill_ = fill_arr(wave_high_prime_idx)\n","    low_prime_idx_fill_ = fill_arr(wave_low_prime_idx)\n","\n","    # ============ enlist to df_cols ============ #\n","    t_df['wave_high_fill_{}{}'.format(itv, period1)] = wave_high_fill_\n","    t_df['wave_low_fill_{}{}'.format(itv, period1)] = wave_low_fill_\n","    t_df['wave_high_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_high_terms_cnt_fill_\n","    t_df['wave_low_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_low_terms_cnt_fill_\n","    t_df['wave_cu_{}{}'.format(itv, period1)] = cu_bool * ~update_low_cu_bool\n","    t_df['wave_co_{}{}'.format(itv, period1)] = co_bool * ~update_high_co_bool\n","    t_df['wave_cu_bool_{}{}'.format(itv, period1)] = cu_bool  # temporary, for plot_check\n","    t_df['wave_co_bool_{}{}'.format(itv, period1)] = co_bool\n","    t_df['wave_cu_marker_{}{}'.format(itv, period1)] = get_line(cu_idx, dc_base_)\n","    t_df['wave_co_marker_{}{}'.format(itv, period1)] = get_line(co_idx, dc_base_)\n","\n","    # ------ for roll prev_hl ------ #\n","    # high_post_idx 를 위해 co_prime_idx 입력\n","    t_df['wave_high_prime_idx_{}{}'.format(itv, period1)] = co_prime_idx # co_prime_idx wave_high_prime_idx  # high 갱신을 고려해, prev_hl 는 prime_idx 기준으로 진행\n","    t_df['wave_low_prime_idx_{}{}'.format(itv, period1)] = cu_prime_idx # cu_prime_idx wave_low_prime_idx  # cu_prime_idx's low 를 사용하겠다라는 의미, 즉 roll_prev 임\n","\n","    # ------ for first_high ------ #\n","    t_df['wave_high_prime_idx_fill_{}{}'.format(itv, period1)] = co_prime_fill_idx # co_prime_fill_idx high_prime_idx_fill_\n","    t_df['wave_low_prime_idx_fill_{}{}'.format(itv, period1)] = cu_prime_fill_idx # cu_prime_fill_idx low_prime_idx_fill_\n","    \n","    if itv != 'T':\n","        join_cols = np.arange(-17, 0, 1).astype(int)  # points & donchian_channels\n","        res_df.drop(t_df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","        try:\n","            res_df = res_df.join(to_lower_tf_v3(res_df, t_df, join_cols), how='inner')\n","        except Exception as e:\n","            print(\"error in wave_range()'s join() :\", e)\n","            \n","        return res_df\n","\n","    else:\n","        return t_df\n","\n","def wave_range_v11_2(res_df, config, itv='T'):  # v2 for period1 only\n","\n","    if itv != 'T':\n","      offset = '1h' if itv != 'D' else '9h'\n","      t_df = to_htf(res_df, itv, offset=offset)\n","    else:\n","      t_df = res_df\n","\n","    period1 = config.tr_set.wave_period\n","    itv_num = to_itvnum(itv)\n","    # print(itv_num)\n","\n","    t_df = donchian_channel_v4(t_df, period1)\n","\n","    dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].to_numpy()\n","    b1_dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].shift(itv_num).to_numpy()\n","\n","    len_df = len(t_df)\n","    len_df_range = np.arange(len_df).astype(int)\n","    # short_open_res = np.ones(len_df)\n","    # long_open_res = np.ones(len_df)\n","\n","    data_cols = ['open', 'high', 'low', 'close']\n","    open, high, low, close = [t_df[col_].to_numpy() for col_ in data_cols]\n","    b1_close = t_df.close.shift(itv_num).to_numpy()\n","\n","    # ============ modules ============ #\n","    # ------ define co, cu ------ # <- point missing 과 관련해 정교해아함\n","    cu_bool = ((b1_close > b1_dc_base_) & (dc_base_ > close)) | ((b1_close > dc_base_) & (dc_base_ > close))\n","    co_bool = (b1_close < b1_dc_base_) & (dc_base_ < close) | ((b1_close < dc_base_) & (dc_base_ < close))\n","    cu_idx = get_index_bybool(cu_bool, len_df_range)\n","    co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","    cu_fill_idx = fill_arr(cu_idx)\n","    co_fill_idx = fill_arr(co_idx)\n","\n","    # ------ get co, cu terms ------ #\n","    high_bool = cu_fill_idx < co_fill_idx\n","    low_bool = co_fill_idx < cu_fill_idx\n","\n","    high_terms_vec = get_index_bybool(high_bool, len_df_range)\n","    low_terms_vec = get_index_bybool(low_bool, len_df_range)  # -> low_terms\n","\n","    high_terms_list = using_clump(high_terms_vec)\n","    low_terms_list = using_clump(low_terms_vec)\n","\n","    high_terms = np.array([[terms.min(), terms.max() + 1] for terms in high_terms_list])\n","    low_terms = np.array([[terms.min(), terms.max() + 1] for terms in low_terms_list])\n","\n","    high_terms_cnt = high_terms[:, 1] - high_terms[:, 0]\n","    low_terms_cnt = low_terms[:, 1] - low_terms[:, 0]\n","\n","    wave_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_terms])\n","    wave_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_terms])\n","\n","    # ------ get valid_idx range (inner len_df) ------ #\n","    paired_cu_idx = high_terms[:, 1]\n","    paired_co_idx = low_terms[:, 1]\n","\n","    valid_cu_bool = paired_cu_idx < len_df\n","    valid_co_bool = paired_co_idx < len_df\n","\n","    paired_cu_valid_idx = paired_cu_idx[valid_cu_bool]\n","    paired_co_valid_idx = paired_co_idx[valid_co_bool]\n","\n","    # ------ get wave_hl & terms ------ #\n","    wave_high_ = np.full(len_df, np.nan)\n","    wave_low_ = np.full(len_df, np.nan)\n","\n","    wave_high_[paired_cu_valid_idx] = wave_highs[valid_cu_bool]\n","    wave_low_[paired_co_valid_idx] = wave_lows[valid_co_bool]\n","\n","    wave_high_fill_ = fill_arr(wave_high_)\n","    wave_low_fill_ = fill_arr(wave_low_)\n","\n","    wave_high_terms_cnt_ = np.full(len_df, np.nan)\n","    wave_low_terms_cnt_ = np.full(len_df, np.nan)\n","\n","    wave_high_terms_cnt_[paired_cu_valid_idx] = high_terms_cnt[valid_cu_bool]\n","    wave_low_terms_cnt_[paired_co_valid_idx] = low_terms_cnt[valid_co_bool]\n","\n","    wave_high_terms_cnt_fill_ = fill_arr(wave_high_terms_cnt_)\n","    wave_low_terms_cnt_fill_ = fill_arr(wave_low_terms_cnt_)\n","\n","    # ------ check update high & low (occurs by point missing) ------ #\n","    co_prime_idx = np.full(len_df, np.nan)\n","    co_prime_idx[paired_co_valid_idx] = paired_co_valid_idx\n","    co_prime_idx_fill_ = fill_arr(co_prime_idx)\n","    # valid_idx = co_idx > co_prime_idx_fill_\n","    valid_idx = cu_idx > co_prime_idx_fill_\n","\n","    update_low = np.full(len_df, np.nan)\n","    # update_low[valid_idx] = [low[iin:iout + 1].min() for iin, iout in zip(cu_prime_idx_fill_[valid_idx].astype(int), cu_idx[valid_idx].astype(int))]  # include open low\n","    # 1. 잘 생각해보면, cu_idx 에는 co_prime_idx_fill_ 을 사용하는게 맞음\n","    #   a. cu_idx 에 달려있는 low 가 co_prime_idx_fill_ 기준이니까\n","    update_low[valid_idx] = [low[iin:iout + 1].min() for iin, iout in zip(co_prime_idx_fill_[valid_idx].astype(int), cu_idx[valid_idx].astype(int))]  # high_terms' update_low\n","\n","    cu_prime_idx = np.full(len_df, np.nan)\n","    cu_prime_idx[paired_cu_valid_idx] = paired_cu_valid_idx\n","    cu_prime_idx_fill_ = fill_arr(cu_prime_idx)\n","    valid_idx = co_idx > cu_prime_idx_fill_\n","\n","    update_high = np.full(len_df, np.nan)\n","    update_high[valid_idx] = [high[iin:iout + 1].max() for iin, iout in zip(cu_prime_idx_fill_[valid_idx].astype(int), co_idx[valid_idx].astype(int))]\n","\n","    # ============ enlist to df_cols ============ #\n","    t_df['wave_high_fill_{}{}'.format(itv, period1)] = wave_high_fill_\n","    t_df['wave_low_fill_{}{}'.format(itv, period1)] = wave_low_fill_\n","    t_df['wave_high_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_high_terms_cnt_fill_\n","    t_df['wave_low_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_low_terms_cnt_fill_\n","    t_df['wave_cu_{}{}'.format(itv, period1)] = cu_bool * ~(update_low < wave_low_fill_)  # point_missing 으로 인한 low 갱신 회피\n","    t_df['wave_co_{}{}'.format(itv, period1)] = co_bool * ~(update_high > wave_high_fill_)\n","    t_df['wave_cu_bool_{}{}'.format(itv, period1)] = cu_bool  # temporary, for plot_check\n","    t_df['wave_co_bool_{}{}'.format(itv, period1)] = co_bool\n","    t_df['wave_cu_marker_{}{}'.format(itv, period1)] = get_line(cu_idx, dc_base_)\n","    t_df['wave_co_marker_{}{}'.format(itv, period1)] = get_line(co_idx, dc_base_)\n","\n","    # ------ for roll prev_hl ------ #\n","    t_df['wave_high_prime_idx_{}{}'.format(itv, period1)] = cu_prime_idx\n","    t_df['wave_low_prime_idx_{}{}'.format(itv, period1)] = co_prime_idx\n","\n","    # ------ for first_high ------ #\n","    t_df['wave_high_prime_idx_fill_{}{}'.format(itv, period1)] = cu_prime_idx_fill_\n","    t_df['wave_low_prime_idx_fill_{}{}'.format(itv, period1)] = co_prime_idx_fill_\n","    \n","    if itv != 'T':\n","        join_cols = np.arange(-17, 0, 1).astype(int)  # points & donchian_channels\n","        res_df.drop(t_df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","        try:\n","            res_df = res_df.join(to_lower_tf_v3(res_df, t_df, join_cols), how='inner')\n","        except Exception as e:\n","            print(\"error in wave_range()'s join() :\", e)\n","            \n","        return res_df\n","\n","    else:\n","        return t_df\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"841i4oo2abh-"},"outputs":[],"source":["\n","\n","def roll_wave_hl_v3(t_df, config, roll_hl_cnt=4):\n","  \n","    wave_itv = pd.infer_freq(t_df.index)\n","    wave_period = config.tr_set.wave_period\n","\n","    len_df = len(t_df)\n","\n","    wave_high_fill_ = t_df['wave_high_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    wave_low_fill_ = t_df['wave_low_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    high_prime_idx = t_df['wave_high_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    low_prime_idx = t_df['wave_low_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()    \n","    high_prime_idx_fill_ = t_df['wave_high_prime_idx_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    low_prime_idx_fill_ = t_df['wave_low_prime_idx_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","\n","    valid_high_prime_idx = high_prime_idx[~np.isnan(high_prime_idx)].astype(int)  # roll_high 를 위한 prime_idx\n","    valid_low_prime_idx = low_prime_idx[~np.isnan(low_prime_idx)].astype(int)  # roll_low 를 위한 prime_idx\n","\n","    roll_high_idx_arr = np.array([valid_high_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_high_prime_idx)) if idx_ + 1 >= roll_hl_cnt])  # cnt 수를 만족시키기 위해 idx 제한\n","    roll_low_idx_arr = np.array([valid_low_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_low_prime_idx)) if idx_ + 1 >= roll_hl_cnt])\n","\n","    roll_high_ = pd.DataFrame(np.full((len_df, roll_hl_cnt), np.nan))\n","    roll_low_ = pd.DataFrame(np.full((len_df, roll_hl_cnt), np.nan))    \n","    roll_high_prime_idx_ = pd.DataFrame(np.full((len_df, roll_hl_cnt), np.nan))\n","    roll_low_prime_idx_ = pd.DataFrame(np.full((len_df, roll_hl_cnt), np.nan))\n","\n","    roll_high_.iloc[valid_high_prime_idx[roll_hl_cnt - 1:], :] = wave_high_fill_[roll_high_idx_arr]  # 제한된 idx 를 제외한 row 에 roll_hl 입력\n","    roll_low_.iloc[valid_low_prime_idx[roll_hl_cnt - 1:], :] = wave_low_fill_[roll_low_idx_arr]\n","    roll_high_prime_idx_.iloc[valid_high_prime_idx[roll_hl_cnt - 1:], :] = high_prime_idx_fill_[roll_high_idx_arr]  # 제한된 idx 를 제외한 row 에 roll_hl 입력\n","    roll_low_prime_idx_.iloc[valid_low_prime_idx[roll_hl_cnt - 1:], :] = low_prime_idx_fill_[roll_low_idx_arr]\n","\n","    return roll_high_.ffill().to_numpy(), roll_low_.ffill().to_numpy(), roll_high_prime_idx_.ffill().to_numpy(), roll_low_prime_idx_.ffill().to_numpy()  # t_df 에 hl_cnt 만큼 col 만들어야해서 numpy 로 뽑음\n","\n","\n","def wave_range_v15(res_df, config, itv='T', term_thresh1=1, term_thresh2=3):  # v2 for period1 only\n","  \n","    # itv = pd.infer_freq(t_df.index)\n","    if itv != 'T':\n","      offset = '1h' if itv != 'D' else '9h'\n","      t_df = to_htf(res_df, itv, offset=offset)\n","    else:\n","      t_df = res_df\n","\n","    period1 = config.tr_set.wave_period\n","    # print(period1)\n","\n","    itv_num = to_itvnum(itv)\n","    # print(itv_num)\n","\n","    t_df = donchian_channel_v4(t_df, period1)\n","\n","    dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].to_numpy()\n","    b1_dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].shift(itv_num).to_numpy()\n","\n","    len_df = len(t_df)\n","    len_df_range = np.arange(len_df).astype(int)\n","    # short_open_res = np.ones(len_df)\n","    # long_open_res = np.ones(len_df)\n","\n","    data_cols = ['open', 'high', 'low', 'close']\n","    open, high, low, close = [t_df[col_].to_numpy() for col_ in data_cols]\n","    b1_close = t_df.close.shift(itv_num).to_numpy()\n","\n","    # ============ modules ============ #\n","    # ------ define co, cu ------ # <- point missing 과 관련해 정교해아함\n","    cu_bool = ((b1_close > b1_dc_base_) & (dc_base_ > close)) | ((b1_close > dc_base_) & (dc_base_ > close))\n","    co_bool = (b1_close < b1_dc_base_) & (dc_base_ < close) | ((b1_close < dc_base_) & (dc_base_ < close))\n","\n","    cu_idx = get_index_bybool(cu_bool, len_df_range)  # for marking\n","    co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","    # high_terms, low_terms, high_terms_cnt, low_terms_cnt = get_terms_info(cu_bool, co_bool, len_df_range)\n","    # high_terms, low_terms, high_terms_cnt, low_terms_cnt, cu_idx_term, co_idx_term = get_terms_info_v2(cu_bool, co_bool, len_df_range)\n","    high_terms, low_terms, high_terms_cnt, low_terms_cnt, cu_idx_term, co_idx_term = get_terms_info_v3(cu_bool, co_bool, len_df, len_df_range)\n","\n","    paired_cu_idx1 = high_terms[:, 1]\n","    paired_co_idx1 = low_terms[:, 1]\n","\n","    # ------ 생략 이전 terms' hl ------ #\n","    wave_high_terms_low_ = np.full(len_df, np.nan)\n","    wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","    wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_terms])\n","    wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_terms])\n","\n","    wave_high_terms_low_[paired_cu_idx1] = wave_high_terms_lows\n","    wave_low_terms_high_[paired_co_idx1] = wave_low_terms_highs\n","\n","    # ------ 생략된 cu, co 에 대한 2nd pairing 진행 ------ #\n","    # cu_bool[high_terms[:, 1][high_terms_cnt <= term_thresh]] = False\n","    # co_bool[low_terms[:, 1][low_terms_cnt <= term_thresh]] = False\n","    cu_bool[high_terms[:, 1][(high_terms_cnt <= term_thresh1) & (cu_idx_term <= term_thresh2)]] = False\n","    co_bool[low_terms[:, 1][(low_terms_cnt <= term_thresh1) & (co_idx_term <= term_thresh2)]] = False\n","\n","    # high_terms, low_terms, high_terms_cnt, low_terms_cnt = get_terms_info(cu_bool, co_bool, len_df_range)\n","    # high_terms, low_terms, high_terms_cnt, low_terms_cnt, _, _ = get_terms_info_v2(cu_bool, co_bool, len_df_range)\n","    high_post_terms, low_post_terms, high_prime_terms_cnt, low_prime_terms_cnt, high_prime_terms, low_prime_terms, _, _ = get_terms_info_v3(cu_bool,\n","                                                                                                                                          co_bool,\n","                                                                                                                                          len_df,\n","                                                                                                                                          len_df_range,\n","                                                                                                                                          True)\n","\n","    paired_cu_idx2 = high_prime_terms[:, 1]\n","    paired_co_idx2 = low_prime_terms[:, 1]\n","\n","    # ====== get wave_hl & terms ====== #\n","    wave_high_ = np.full(len_df, np.nan)\n","    wave_low_ = np.full(len_df, np.nan)\n","\n","    wave_prime_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_prime_terms])\n","    wave_prime_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_prime_terms])\n","\n","    wave_high_[paired_cu_idx2] = wave_prime_highs\n","    wave_low_[paired_co_idx2] = wave_prime_lows\n","\n","    wave_high_fill_ = fill_arr(wave_high_)\n","    wave_low_fill_ = fill_arr(wave_low_)\n","\n","    # ------ Todo, update_hl 에 대해서, post_terms_hl 적용 ------ #\n","    wave_post_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_terms])  # 생략전 post_terms_hl 사용\n","    wave_post_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_terms])\n","\n","    update_low_cu_bool = wave_high_terms_low_ < wave_low_fill_\n","    update_high_co_bool = wave_low_terms_high_ > wave_high_fill_\n","\n","    update_paired_cu_bool = (cu_bool * update_low_cu_bool)[paired_cu_idx1]\n","    update_paired_cu_idx = paired_cu_idx1[update_paired_cu_bool]\n","    wave_high_[update_paired_cu_idx] = wave_post_highs[update_paired_cu_bool]\n","\n","    update_paired_co_bool = (co_bool * update_high_co_bool)[paired_co_idx1]\n","    update_paired_co_idx = paired_co_idx1[update_paired_co_bool]\n","    wave_low_[update_paired_co_idx] = wave_post_lows[update_paired_co_bool]\n","\n","    # wave_high_fill2_ = fill_arr(wave_high_)\n","    # wave_low_fill2_ = fill_arr(wave_low_)\n","    wave_high_fill_ = fill_arr(wave_high_)\n","    wave_low_fill_ = fill_arr(wave_low_)\n","\n","    # wave_high_terms_low_ = np.full(len_df, np.nan)\n","    # wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","    # wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_terms])  # for point rejection, Todo, min_max 설정 항상 주의\n","    # wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_terms])\n","\n","    # wave_high_terms_low_[paired_cu_idx] = wave_high_terms_lows\n","    # wave_low_terms_high_[paired_co_idx] = wave_low_terms_highs\n","\n","    wave_high_terms_cnt_ = np.full(len_df, np.nan)\n","    wave_low_terms_cnt_ = np.full(len_df, np.nan)\n","\n","    wave_high_terms_cnt_[paired_cu_idx2] = high_prime_terms_cnt\n","    wave_low_terms_cnt_[paired_co_idx2] = low_prime_terms_cnt\n","\n","    wave_high_terms_cnt_fill_ = fill_arr(wave_high_terms_cnt_)\n","    wave_low_terms_cnt_fill_ = fill_arr(wave_low_terms_cnt_)\n","\n","    # ------ hl_fill 의 prime_idx 를 찾아야함 ------ #\n","    b1_wave_high_fill_ = pd.Series(wave_high_fill_).shift(1).to_numpy()\n","    b1_wave_low_fill_ = pd.Series(wave_low_fill_).shift(1).to_numpy()\n","    wave_high_prime_idx = np.where((wave_high_fill_ != b1_wave_high_fill_) & ~np.isnan(wave_high_fill_), len_df_range, np.nan)\n","    wave_low_prime_idx = np.where((wave_low_fill_ != b1_wave_low_fill_) & ~np.isnan(wave_low_fill_), len_df_range, np.nan)\n","\n","    high_prime_idx_fill_ = fill_arr(wave_high_prime_idx)\n","    low_prime_idx_fill_ = fill_arr(wave_low_prime_idx)\n","\n","    # ============ enlist to df_cols ============ #\n","    t_df['wave_high_fill_{}{}'.format(itv, period1)] = wave_high_fill_\n","    t_df['wave_low_fill_{}{}'.format(itv, period1)] = wave_low_fill_\n","    # t_df['wave_high_fill2_{}{}'.format(itv, period1)] = wave_high_fill2_\n","    # t_df['wave_low_fill2_{}{}'.format(itv, period1)] = wave_low_fill2_\n","\n","    t_df['wave_high_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_high_terms_cnt_fill_\n","    t_df['wave_low_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_low_terms_cnt_fill_\n","    t_df['wave_cu_{}{}'.format(itv, period1)] = cu_bool * ~update_low_cu_bool\n","    t_df['wave_co_{}{}'.format(itv, period1)] = co_bool * ~update_high_co_bool\n","    t_df['wave_cu_bool_{}{}'.format(itv, period1)] = cu_bool  # temporary, for plot_check\n","    t_df['wave_co_bool_{}{}'.format(itv, period1)] = co_bool\n","    t_df['wave_cu_marker_{}{}'.format(itv, period1)] = get_line(cu_idx, dc_base_)\n","    t_df['wave_co_marker_{}{}'.format(itv, period1)] = get_line(co_idx, dc_base_)\n","\n","    # ------ for roll prev_hl ------ #\n","    t_df['wave_high_prime_idx_{}{}'.format(itv, period1)] = wave_high_prime_idx  # cu\n","    t_df['wave_low_prime_idx_{}{}'.format(itv, period1)] = wave_low_prime_idx\n","\n","    # ------ for first_high ------ #\n","    t_df['wave_high_prime_idx_fill_{}{}'.format(itv, period1)] = high_prime_idx_fill_\n","    t_df['wave_low_prime_idx_fill_{}{}'.format(itv, period1)] = low_prime_idx_fill_\n","    \n","    if itv != 'T':\n","        join_cols = np.arange(-17, 0, 1).astype(int)  # points & donchian_channels\n","        res_df.drop(t_df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","        try:\n","            res_df = res_df.join(to_lower_tf_v3(res_df, t_df, join_cols), how='inner')\n","        except Exception as e:\n","            print(\"error in wave_range()'s join() :\", e)\n","            \n","        return res_df\n","\n","    else:\n","        return t_df\n","\n","\n","def wave_range_ratio_v3(res_df, config):\n","    wave_itv = pd.infer_freq(res_df.index)\n","    wave_period = config.tr_set.wave_period\n","\n","    roll_high_, roll_low_, _, _ = roll_wave_hl_v3(res_df, config, roll_hl_cnt=4)\n","\n","    wave1_range = roll_high_[:, -2] - roll_low_[:, -2]\n","    cu_wave2_range = roll_high_[:, -2] - roll_low_[:, -1]  # for short, cu\n","    co_wave2_range = roll_high_[:, -1] - roll_low_[:, -2]  # for long, co\n","    wave3_range = roll_high_[:, -1] - roll_low_[:, -1]\n","\n","    res_df['cu_wrr_21_{}{}'.format(wave_itv, wave_period)] = cu_wave2_range / wave1_range\n","    res_df['cu_wrr_32_{}{}'.format(wave_itv, wave_period)] = wave3_range / cu_wave2_range\n","\n","    res_df['co_wrr_21_{}{}'.format(wave_itv, wave_period)] = co_wave2_range / wave1_range\n","    res_df['co_wrr_32_{}{}'.format(wave_itv, wave_period)] = wave3_range / co_wave2_range\n","\n","    return res_df\n","\n","def get_terms_info_v3(cu_bool, co_bool, len_df, len_df_range, prime_terms=False):\n","    cu_idx = get_index_bybool(cu_bool, len_df_range)\n","    co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","    cu_fill_idx = fill_arr(cu_idx)\n","    co_fill_idx = fill_arr(co_idx)\n","\n","    notnan_cu_bool = ~np.isnan(cu_idx)\n","    notnan_co_bool = ~np.isnan(co_idx)\n","\n","    valid_cu_bool = notnan_cu_bool * ~np.isnan(co_fill_idx)\n","    valid_co_bool = notnan_co_bool * ~np.isnan(cu_fill_idx)\n","\n","    if prime_terms:\n","        # ------ 생략된 idx 에 대한 prime_idx 탐색 ------ #\n","        high_bool = cu_fill_idx < co_fill_idx  # 이렇게 해야 high_terms[:, 1] 이 cu_idx 가 나옴\n","        low_bool = co_fill_idx < cu_fill_idx\n","\n","        high_terms_vec = get_index_bybool(high_bool, len_df_range)\n","        low_terms_vec = get_index_bybool(low_bool, len_df_range)  # -> low_terms\n","\n","        high_terms_list = using_clump(high_terms_vec)\n","        low_terms_list = using_clump(low_terms_vec)\n","\n","        valid_cu_prime_idx = np.array([terms.min() for terms in low_terms_list])\n","        valid_co_prime_idx = np.array([terms.min() for terms in high_terms_list])\n","\n","        cu_prime_idx = np.full(len_df, np.nan)\n","        co_prime_idx = np.full(len_df, np.nan)\n","\n","        cu_prime_idx[valid_cu_prime_idx] = valid_cu_prime_idx\n","        co_prime_idx[valid_co_prime_idx] = valid_co_prime_idx\n","\n","        cu_prime_fill_idx = fill_arr(cu_prime_idx)\n","        co_prime_fill_idx = fill_arr(co_prime_idx)\n","\n","        valid_cu_bool *= ~np.isnan(co_prime_fill_idx)\n","        valid_co_bool *= ~np.isnan(cu_prime_fill_idx)\n","\n","    high_post_terms = np.vstack((co_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","    low_post_terms = np.vstack((cu_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)\n","\n","    high_post_terms_cnt = high_post_terms[:, 1] - high_post_terms[:, 0]\n","    low_post_terms_cnt = low_post_terms[:, 1] - low_post_terms[:, 0]\n","\n","    # ------ co, cu idx's terms ------ #\n","    valid_cu_idx = cu_idx[valid_cu_bool]\n","    valid_co_idx = co_idx[valid_co_bool]\n","    valid_shift_cu_idx = pd.Series(valid_cu_idx).shift(1).to_numpy()\n","    valid_shift_co_idx = pd.Series(valid_co_idx).shift(1).to_numpy()\n","\n","    cu_idx_term = valid_cu_idx - valid_shift_cu_idx\n","    co_idx_term = valid_co_idx - valid_shift_co_idx\n","\n","    # ------ get co, cu terms_v2 ------ # # 기본은 아래 logic 으로 수행하고, update_hl 도 해당 term 구간의 hl 이 더 작거나 클경우 적용 가능할 것\n","    if prime_terms:\n","        high_prime_terms = np.vstack((co_prime_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","        low_prime_terms = np.vstack((cu_prime_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)\n","        \n","        high_prime_terms_cnt = high_prime_terms[:, 1] - high_prime_terms[:, 0]\n","        low_prime_terms_cnt = low_prime_terms[:, 1] - low_prime_terms[:, 0]\n","\n","        return high_post_terms, low_post_terms, high_prime_terms_cnt, low_prime_terms_cnt, high_prime_terms, low_prime_terms, cu_idx_term, co_idx_term\n","\n","    return high_post_terms, low_post_terms, high_post_terms_cnt, low_post_terms_cnt, cu_idx_term, co_idx_term\n","  \n","def wave_range_ratio_v2(res_df, config):\n","\n","    wave_itv = pd.infer_freq(res_df.index)\n","    wave_period = config.tr_set.wave_period\n","\n","    roll_high_, roll_low_ = roll_wave_hl_v2(res_df, config, roll_hl_cnt=4)\n","    \n","    wave1_range = roll_high_[:, -2] - roll_low_[:, -2]\n","    cu_wave2_range = roll_high_[:, -2] - roll_low_[:, -1]  # for short, cu\n","    co_wave2_range = roll_high_[:, -1] - roll_low_[:, -2]  # for long, co\n","    wave3_range = roll_high_[:, -1] - roll_low_[:, -1]\n","\n","    res_df['cu_wrr_21_{}{}'.format(wave_itv, wave_period)] = cu_wave2_range / wave1_range\n","    res_df['cu_wrr_32_{}{}'.format(wave_itv, wave_period)] = wave3_range / cu_wave2_range\n","\n","    res_df['co_wrr_21_{}{}'.format(wave_itv, wave_period)] = co_wave2_range / wave1_range\n","    res_df['co_wrr_32_{}{}'.format(wave_itv, wave_period)] = wave3_range / co_wave2_range\n","\n","    return res_df\n","    \n","def roll_wave_hl(t_df, config, roll_hl_cnt=4):\n","  \n","    wave_itv = pd.infer_freq(t_df.index)\n","    wave_period = config.tr_set.wave_period\n","\n","    len_df = len(t_df)\n","\n","    wave_high_fill_ = t_df['wave_high_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    wave_low_fill_ = t_df['wave_low_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    cu_prime_idx = t_df['wave_cu_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    co_prime_idx = t_df['wave_co_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","\n","    valid_cu_prime_idx = cu_prime_idx[~np.isnan(cu_prime_idx)].astype(int)  # -> 필요한 prev_hl 갯수만큼 각 index 기준으로 자르기\n","    valid_co_prime_idx = co_prime_idx[~np.isnan(co_prime_idx)].astype(int)  # -> 필요한 prev_hl 갯수만큼 각 index 기준으로 자르기\n","\n","    cu_roll_hl_idx_arr = np.array(\n","        [valid_cu_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_cu_prime_idx)) if idx_ + 1 >= roll_hl_cnt])\n","    co_roll_hl_idx_arr = np.array(\n","        [valid_co_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_co_prime_idx)) if idx_ + 1 >= roll_hl_cnt])\n","\n","    cu_roll_high_ = pd.DataFrame(np.full((len_df, roll_hl_cnt), np.nan))\n","    cu_roll_low_ = pd.DataFrame(np.full((len_df, roll_hl_cnt), np.nan))\n","    co_roll_high_ = pd.DataFrame(np.full((len_df, roll_hl_cnt), np.nan))\n","    co_roll_low_ = pd.DataFrame(np.full((len_df, roll_hl_cnt), np.nan))\n","\n","    cu_roll_high_.iloc[valid_cu_prime_idx[roll_hl_cnt - 1:], :] = wave_high_fill_[cu_roll_hl_idx_arr]\n","    cu_roll_low_.iloc[valid_cu_prime_idx[roll_hl_cnt - 1:], :] = wave_low_fill_[cu_roll_hl_idx_arr]\n","    co_roll_high_.iloc[valid_co_prime_idx[roll_hl_cnt - 1:], :] = wave_high_fill_[co_roll_hl_idx_arr]\n","    co_roll_low_.iloc[valid_co_prime_idx[roll_hl_cnt - 1:], :] = wave_low_fill_[co_roll_hl_idx_arr]\n","\n","    return cu_roll_high_.ffill().to_numpy(), cu_roll_low_.ffill().to_numpy(), co_roll_high_.ffill().to_numpy(), co_roll_low_.ffill().to_numpy()  # t_df 에 hl_cnt 만큼 col 만들어야해서 numpy 로 뽑음\n","\n","def backing_future_data(res_df, future_cols, itv_list): # itv 자동 조사 가능 ? (future_work)\n","  \n","    for col_, itv_ in zip(future_cols, itv_list):\n","        back_col_ = 'b1_' + col_\n","        res_df[back_col_] = res_df[col_].shift(to_itvnum(itv_))\n","\n","    return res_df\n","\n","\n","\n","def wave_loc_pct_v2(res_df, config, itv, period):\n","\n","    wave_itv = pd.infer_freq(res_df.index)\n","    wave_period = config.tr_set.wave_period\n","\n","    wave_high_fill_ = res_df['wave_high_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    wave_low_fill_ = res_df['wave_low_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","\n","    bb_upper_ = res_df['bb_upper_{}{}'.format(itv, period)].to_numpy()\n","    bb_lower_ = res_df['bb_lower_{}{}'.format(itv, period)].to_numpy()\n","\n","    bb_gap = bb_upper_ - bb_lower_\n","    \n","    cu_prime_idx_fill_ = res_df['wave_cu_prime_idx_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    co_prime_idx_fill_ = res_df['wave_co_prime_idx_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    cu_prime_bb_gap = get_line(cu_prime_idx_fill_, bb_gap)\n","    co_prime_bb_gap = get_line(co_prime_idx_fill_, bb_gap)\n","\n","    res_df['wave_high_loc_pct_{}{}'.format(wave_itv, wave_period)] = (bb_upper_ - wave_high_fill_) / cu_prime_bb_gap\n","    res_df['wave_low_loc_pct_{}{}'.format(wave_itv, wave_period)] = (wave_low_fill_ - bb_lower_) / co_prime_bb_gap\n","\n","    return res_df\n","\n","def wave_loc_pct(res_df, config, itv, period):\n","\n","    wave_itv = pd.infer_freq(res_df.index)\n","    wave_period = config.tr_set.wave_period\n","\n","    wave_high_fill_ = res_df['wave_high_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    wave_low_fill_ = res_df['wave_low_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","\n","    bb_upper_ = res_df['bb_upper_{}{}'.format(itv, period)].to_numpy()\n","    bb_lower_ = res_df['bb_lower_{}{}'.format(itv, period)].to_numpy()\n","\n","    bb_gap = bb_upper_ - bb_lower_\n","\n","    res_df['wave_high_loc_pct_{}{}'.format(wave_itv, wave_period)] = (bb_upper_ - wave_high_fill_) / bb_gap\n","    res_df['wave_low_loc_pct_{}{}'.format(wave_itv, wave_period)] = (wave_low_fill_ - bb_lower_) / bb_gap\n","\n","    return res_df\n","\n","\n","def get_terms_info_v2(cu_bool, co_bool, len_df_range):\n","\n","    cu_idx = get_index_bybool(cu_bool, len_df_range)\n","    co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","    cu_fill_idx = fill_arr(cu_idx)\n","    co_fill_idx = fill_arr(co_idx)\n","\n","    notnan_cu_bool = ~np.isnan(cu_idx)\n","    notnan_co_bool = ~np.isnan(co_idx)\n","  \n","    # ------ get co, cu terms_v2 ------ # # 기본은 아래 logic 으로 수행하고, update_hl 도 해당 term 구간의 hl 이 더 작거나 클경우 적용 가능할 것    \n","    valid_cu_bool = notnan_cu_bool * ~np.isnan(co_fill_idx)  # co 와 pair 가 가능한 cu_idx\n","    valid_co_bool = notnan_co_bool * ~np.isnan(cu_fill_idx)\n","\n","    high_terms = np.vstack((co_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","    low_terms = np.vstack((cu_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)\n","\n","    high_terms_cnt = high_terms[:, 1] - high_terms[:, 0] \n","    low_terms_cnt = low_terms[:, 1] - low_terms[:, 0] \n","\n","    # valid_cu_idx = cu_idx[notnan_cu_bool]\n","    # valid_co_idx = co_idx[notnan_co_bool]\n","    valid_cu_idx = cu_idx[valid_cu_bool]\n","    valid_co_idx = co_idx[valid_co_bool]\n","    valid_shift_cu_idx = pd.Series(valid_cu_idx).shift(1).to_numpy()\n","    valid_shift_co_idx = pd.Series(valid_co_idx).shift(1).to_numpy()\n","\n","    cu_idx_term = valid_cu_idx - valid_shift_cu_idx\n","    co_idx_term = valid_co_idx - valid_shift_co_idx\n","\n","    return high_terms, low_terms, high_terms_cnt, low_terms_cnt, cu_idx_term, co_idx_term\n","\n","def get_terms_info(cu_bool, co_bool, len_df_range):\n","\n","    cu_idx = get_index_bybool(cu_bool, len_df_range)\n","    co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","    cu_fill_idx = fill_arr(cu_idx)\n","    co_fill_idx = fill_arr(co_idx)\n","  \n","    # ------ get co, cu terms_v2 ------ # # 기본은 아래 logic 으로 수행하고, update_hl 도 해당 term 구간의 hl 이 더 작거나 클경우 적용 가능할 것\n","    valid_cu_idx = ~np.isnan(cu_idx) * ~np.isnan(co_fill_idx)\n","    valid_co_idx = ~np.isnan(co_idx) * ~np.isnan(cu_fill_idx)\n","\n","    high_terms = np.vstack((co_fill_idx[valid_cu_idx], cu_idx[valid_cu_idx])).T.astype(int)\n","    low_terms = np.vstack((cu_fill_idx[valid_co_idx], co_idx[valid_co_idx])).T.astype(int)\n","\n","    high_terms_cnt = high_terms[:, 1] - high_terms[:, 0] \n","    low_terms_cnt = low_terms[:, 1] - low_terms[:, 0] \n","\n","    return high_terms, low_terms, high_terms_cnt, low_terms_cnt\n","\n","\n","\n","def wave_range_v13(t_df, config, ltf_df=None, term_thresh=2):  # v2 for period1 only\n","\n","    itv = pd.infer_freq(t_df.index)\n","    period1 = config.tr_set.wave_period\n","    # print(period1)\n","\n","    itv_num = to_itvnum(itv)\n","    # print(itv_num)\n","\n","    t_df = donchian_channel_v4(t_df, period1) \n","\n","    dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].to_numpy()\n","    b1_dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].shift(itv_num).to_numpy()\n","\n","    len_df = len(t_df)   \n","    len_df_range = np.arange(len_df).astype(int)\n","    # short_open_res = np.ones(len_df)\n","    # long_open_res = np.ones(len_df)\n","\n","    data_cols = ['open', 'high', 'low', 'close']\n","    open, high, low, close = [t_df[col_].to_numpy() for col_ in data_cols]\n","    b1_close = t_df.close.shift(itv_num).to_numpy()\n","    \n","    # ============ modules ============ #  \n","    # ------ define co, cu ------ # <- point missing 과 관련해 정교해아함\n","    cu_bool = ((b1_close > b1_dc_base_) & (dc_base_ > close)) | ((b1_close > dc_base_) & (dc_base_ > close))\n","    co_bool = (b1_close < b1_dc_base_) & (dc_base_ < close) | ((b1_close < dc_base_) & (dc_base_ < close))\n","\n","    cu_idx = get_index_bybool(cu_bool, len_df_range)   # for marking\n","    co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","    high_terms, low_terms, high_terms_cnt, low_terms_cnt = get_terms_info(cu_bool, co_bool, len_df_range)\n","\n","    paired_cu_idx = high_terms[:, 1]\n","    paired_co_idx = low_terms[:, 1]\n","\n","    # ------ 생략 이전 terms' hl ------ #\n","    wave_high_terms_low_ = np.full(len_df, np.nan)\n","    wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","    wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_terms])\n","    wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_terms])  \n","\n","    wave_high_terms_low_[paired_cu_idx] = wave_high_terms_lows\n","    wave_low_terms_high_[paired_co_idx] = wave_low_terms_highs\n","\n","    # ------ 생략된 cu, co 에 대한 2nd pairing 진행 ------ #\n","    cu_bool[high_terms[:, 1][high_terms_cnt <= term_thresh]] = False\n","    co_bool[low_terms[:, 1][low_terms_cnt <= term_thresh]] = False  \n","    high_terms, low_terms, high_terms_cnt, low_terms_cnt = get_terms_info(cu_bool, co_bool, len_df_range)\n","    \n","    paired_cu_idx = high_terms[:, 1]\n","    paired_co_idx = low_terms[:, 1]\n","\n","    # ====== get wave_hl & terms ====== #\n","    wave_high_ = np.full(len_df, np.nan)\n","    wave_low_ = np.full(len_df, np.nan)\n","\n","    wave_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_terms])\n","    wave_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_terms])\n","\n","    wave_high_[paired_cu_idx] = wave_highs\n","    wave_low_[paired_co_idx] = wave_lows\n","\n","    wave_high_fill_ = fill_arr(wave_high_)\n","    wave_low_fill_ = fill_arr(wave_low_)\n","\n","    # wave_high_terms_low_ = np.full(len_df, np.nan)\n","    # wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","    # wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_terms])  # for point rejection, Todo, min_max 설정 항상 주의\n","    # wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_terms])\n","\n","    # wave_high_terms_low_[paired_cu_idx] = wave_high_terms_lows\n","    # wave_low_terms_high_[paired_co_idx] = wave_low_terms_highs\n","\n","    wave_high_terms_cnt_ = np.full(len_df, np.nan)\n","    wave_low_terms_cnt_ = np.full(len_df, np.nan)\n","\n","    wave_high_terms_cnt_[paired_cu_idx] = high_terms_cnt\n","    wave_low_terms_cnt_[paired_co_idx] = low_terms_cnt\n","\n","    wave_high_terms_cnt_fill_ = fill_arr(wave_high_terms_cnt_)\n","    wave_low_terms_cnt_fill_ = fill_arr(wave_low_terms_cnt_)\n","    \n","    # ------ hl_fill 의 prime_idx 를 찾아야함 ------ # \n","    b1_wave_high_fill_ = pd.Series(wave_high_fill_).shift(1).to_numpy()\n","    b1_wave_low_fill_ = pd.Series(wave_low_fill_).shift(1).to_numpy()\n","    wave_high_prime_idx = np.where((wave_high_fill_ != b1_wave_high_fill_) & ~np.isnan(wave_high_fill_), len_df_range, np.nan)\n","    wave_low_prime_idx = np.where((wave_low_fill_ != b1_wave_low_fill_) & ~np.isnan(wave_low_fill_), len_df_range, np.nan)\n","\n","    cu_prime_idx = wave_high_prime_idx\n","    cu_prime_idx_fill_ = fill_arr(cu_prime_idx)\n","\n","    co_prime_idx = wave_low_prime_idx\n","    co_prime_idx_fill_ = fill_arr(wave_low_prime_idx)  \n","\n","    # ============ enlist to df_cols ============ #       \n","    t_df['wave_high_fill_{}{}'.format(itv, period1)] = wave_high_fill_\n","    t_df['wave_low_fill_{}{}'.format(itv, period1)] = wave_low_fill_\n","\n","    t_df['wave_high_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_high_terms_cnt_fill_\n","    t_df['wave_low_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_low_terms_cnt_fill_\n","    t_df['wave_cu_{}{}'.format(itv, period1)] = cu_bool * (wave_high_terms_low_ >= wave_low_fill_)   # co ~ cu’s low 가 wave_low 갱신할 경우 point 에서 제외\n","    t_df['wave_co_{}{}'.format(itv, period1)] = co_bool * (wave_low_terms_high_ <= wave_high_fill_)\n","    t_df['wave_cu_bool_{}{}'.format(itv, period1)] = cu_bool   # temporary, for plot_check\n","    t_df['wave_co_bool_{}{}'.format(itv, period1)] = co_bool\n","    t_df['wave_cu_marker_{}{}'.format(itv, period1)] = get_line(cu_idx, dc_base_)\n","    t_df['wave_co_marker_{}{}'.format(itv, period1)] = get_line(co_idx, dc_base_)\n","\n","    # ------ for roll prev_hl ------ # \n","    t_df['wave_cu_prime_idx_{}{}'.format(itv, period1)] = cu_prime_idx\n","    t_df['wave_co_prime_idx_{}{}'.format(itv, period1)] = co_prime_idx\n","    \n","    # ------ for first_high ------ # \n","    t_df['wave_cu_prime_idx_fill_{}{}'.format(itv, period1)] = cu_prime_idx_fill_\n","    t_df['wave_co_prime_idx_fill_{}{}'.format(itv, period1)] = co_prime_idx_fill_\n","      \n","    if itv != 'T':\n","      assert ltf_df is not None, \"assert ltf_df is not None\"\n","      join_cols = np.arange(-15, 0 ,1).astype(int)  # points & donchian_channels\n","      ltf_df.drop(t_df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","      try:\n","        ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, t_df, join_cols), how='inner')\n","      except Exception as e:\n","        print(\"error in wave_range()'s join() :\", e)\n","    else:\n","      ltf_df = t_df    \n","\n","    return ltf_df\n"]},{"cell_type":"markdown","metadata":{"id":"02DcTVB2cYuR"},"source":["##### dump"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Go7ARIUhfC1g"},"outputs":[],"source":["\n","\n","def get_roll_wave_data_v2(valid_prime_idx, roll_idx_arr, len_df, data, roll_prev_hl_cnt):\n","\n","    roll_data = pd.DataFrame(np.full((len_df, roll_prev_hl_cnt), np.nan))\n","    roll_data.iloc[valid_prime_idx[roll_prev_hl_cnt:], :] = data[roll_idx_arr]  # 제한된 idx 를 제외한 row 에 roll_hl 입력\n","\n","    return roll_data.ffill().to_numpy()\n","\n","def roll_wave_hl_v5(t_df, config, roll_prev_hl_cnt=3):\n","  \n","    wave_itv = pd.infer_freq(t_df.index)\n","    wave_period = config.tr_set.wave_period\n","\n","    len_df = len(t_df)\n","\n","    high_prime_idx = t_df['wave_high_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    low_prime_idx = t_df['wave_low_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()    \n","\n","    valid_high_prime_idx = high_prime_idx[~np.isnan(high_prime_idx)].astype(int)  # roll_high 를 위한 prime_idx\n","    valid_low_prime_idx = low_prime_idx[~np.isnan(low_prime_idx)].astype(int)  # roll_low 를 위한 prime_idx\n","\n","    roll_prev_high_idx_arr = np.array([valid_high_prime_idx[idx_ - roll_prev_hl_cnt:idx_] for idx_ in range(len(valid_high_prime_idx)) if idx_ >= roll_prev_hl_cnt])  # cnt 수를 만족시키기 위해 idx 제한\n","    roll_prev_low_idx_arr = np.array([valid_low_prime_idx[idx_ - roll_prev_hl_cnt:idx_] for idx_ in range(len(valid_low_prime_idx)) if idx_ >= roll_prev_hl_cnt])\n","\n","    return valid_high_prime_idx, valid_low_prime_idx, roll_prev_high_idx_arr, roll_prev_low_idx_arr"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pgA8QqyXZ66o"},"outputs":[],"source":["t_df[roll_cols].tail(100)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wF7fKJ3mOhaf"},"outputs":[],"source":["data_col = 'wave_high_fill_{}{}'.format(wave_itv1, wave_period1)\n","data = htf_df[data_col].to_numpy()\n","len_htf_df = len(htf_df)\n","\n","\n","roll_data = pd.DataFrame(index=htf_df.index, data=np.full((len_htf_df, roll_hl_cnt), np.nan))\n","roll_data.iloc[valid_high_prime_idx[roll_hl_cnt - 1:], :] = data[roll_prev_high_idx_arr]  # 제한된 idx 를 제외한 row 에 roll_hl 입력\n","\n","# roll_data.ffill()\n","htf_df[roll_cols] = roll_data.ffill()\n","htf_df[roll_cols]\n","\n","# htf_df[roll_cols] = np.nan\n","# htf_df[roll_cols].iloc[valid_high_prime_idx[roll_hl_cnt - 1:]] = data[roll_prev_high_idx_arr]  # 제한된 idx 를 제외한 row 에 roll_hl 입력\n","\n","# htf_df[roll_cols] = htf_df[roll_cols].ffill().to_numpy()\n","\n","# valid_high_prime_idx\n","# np.sum(~np.isnan(roll_high))\n","# htf_df[roll_cols]\n","# roll_prev_low_idx_arr"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3vHLGont-BFe"},"outputs":[],"source":["# t_df\n","to_lower_tf_v2(res_df, t_df, join_cols)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Mh3w2s-j34Zs"},"outputs":[],"source":["wave_post_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_post_terms])\n","wave_post_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_post_terms])\n","\n","# print(len(paired_cu_idx))\n","# print(len(wave_post_highs))\n","# print(len(cu_bool))\n","\n","update_paired_cu_bool = (cu_bool * (wave_high_terms_low_ < wave_low_fill_))[paired_cu_idx]\n","update_paired_cu_idx = paired_cu_idx[update_paired_cu_bool]\n","wave_high_[update_paired_cu_idx] = wave_post_highs[update_paired_cu_bool]\n","\n","update_paired_co_bool = (co_bool * (wave_low_terms_high_ > wave_high_fill_))[paired_co_idx]\n","update_paired_co_idx = paired_co_idx[update_paired_co_bool]\n","wave_low_[update_paired_co_idx] = wave_post_lows[update_paired_co_bool]\n","\n","wave_high_fill2_ = fill_arr(wave_high_)\n","wave_low_fill2_ = fill_arr(wave_low_)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1651799326382,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"eQ06-kWq4m6F","outputId":"5c5df956-4fbd-4aa4-e1d6-dc5d0c23ac19"},"outputs":[{"name":"stdout","output_type":"stream","text":["11\n","11\n"]}],"source":["# wave_post_highs\n","# update_cu_bool = (cu_bool * (wave_high_terms_low_ < wave_low_fill_))[paired_cu_idx]\n","# print(paired_cu_idx[update_cu_bool])\n","# print(paired_cu_idx)\n","print(len(update_paired_cu_idx))\n","print(len(wave_post_highs[update_paired_cu_bool]))\n","# print(high_prime_terms[:, 1])\n","# print(high_post_terms[:, 1])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SUFmr9Z_kcCN"},"outputs":[],"source":["cu_idx = get_index_bybool(cu_bool, len_df_range)\n","co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","cu_fill_idx = fill_arr(cu_idx)\n","co_fill_idx = fill_arr(co_idx)\n","\n","notnan_cu_bool = ~np.isnan(cu_idx)\n","notnan_co_bool = ~np.isnan(co_idx)\n","\n","# ------ 생략된 idx 에 대한 prime_idx 탐색 ------ #\n","high_bool = cu_fill_idx < co_fill_idx  # 이렇게 해야 high_terms[:, 1] 이 cu_idx 가 나옴\n","low_bool = co_fill_idx < cu_fill_idx\n","\n","high_terms_vec = get_index_bybool(high_bool, len_df_range)\n","low_terms_vec = get_index_bybool(low_bool, len_df_range) # -> low_terms\n","\n","high_terms_list = using_clump(high_terms_vec)\n","low_terms_list = using_clump(low_terms_vec)\n","\n","valid_cu_prime_idx = np.array([terms.min() for terms in low_terms_list])\n","valid_co_prime_idx = np.array([terms.min() for terms in high_terms_list])\n","\n","cu_prime_idx = np.full(len_df, np.nan)\n","co_prime_idx = np.full(len_df, np.nan)\n","\n","cu_prime_idx[valid_cu_prime_idx] = valid_cu_prime_idx\n","co_prime_idx[valid_co_prime_idx] = valid_co_prime_idx\n","\n","cu_prime_fill_idx = fill_arr(cu_prime_idx)\n","co_prime_fill_idx = fill_arr(co_prime_idx)\n","\n","# ------ get co, cu terms_v2 ------ # # 기본은 아래 logic 으로 수행하고, update_hl 도 해당 term 구간의 hl 이 더 작거나 클경우 적용 가능할 것\n","valid_cu_bool = notnan_cu_bool * ~np.isnan(co_fill_idx) * ~np.isnan(co_prime_fill_idx)\n","valid_co_bool = notnan_co_bool * ~np.isnan(cu_fill_idx) * ~np.isnan(cu_prime_fill_idx)\n","\n","high_post_terms = np.vstack((co_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","low_post_terms = np.vstack((cu_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)\n","\n","high_terms_cnt = high_post_terms[:, 1] - high_post_terms[:, 0] \n","low_terms_cnt = low_post_terms[:, 1] - low_post_terms[:, 0] \n","\n","high_prime_terms = np.vstack((co_prime_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","low_prime_terms = np.vstack((cu_prime_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_3pOQtt2ttfk"},"outputs":[],"source":["# co_prime_idx\n","# co_prime_fill_idx\n","high_prime_terms"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6,"status":"ok","timestamp":1651756811396,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"kKaD1fK3WPRP","outputId":"bbe470f3-17d0-4029-97e9-2fb383a0c752"},"outputs":[{"data":{"text/plain":["array([nan,  2.,  7.,  2.,  4.,  2.,  7.,  5.,  4.,  6.,  9.,  2.,  5., 11., 14.])"]},"execution_count":79,"metadata":{},"output_type":"execute_result"}],"source":["#  get_index_bybool(notnan_cu_bool, len_df_range)\n","valid_cu_idx = cu_idx[notnan_cu_bool]\n","valid_shift_cu_idx = pd.Series(valid_cu_idx).shift(1).to_numpy()\n","valid_co_idx = co_idx[notnan_co_bool]\n","valid_shift_co_idx = pd.Series(valid_co_idx).shift(1).to_numpy()\n","\n","valid_cu_idx - valid_shift_cu_idx\n","valid_co_idx - valid_shift_co_idx"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YoZpr7lDn7z-"},"outputs":[],"source":["def wave_range_v14(t_df, config, ltf_df=None, term_thresh1=1, term_thresh2=3):  # v2 for period1 only\n","\n","  itv = pd.infer_freq(t_df.index)\n","  period1 = config.tr_set.wave_period\n","  # print(period1)\n","\n","  itv_num = to_itvnum(itv)\n","  # print(itv_num)\n","\n","  t_df = donchian_channel_v4(t_df, period1) \n","\n","  dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].to_numpy()\n","  b1_dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].shift(itv_num).to_numpy()\n","\n","  len_df = len(t_df)   \n","  len_df_range = np.arange(len_df).astype(int)\n","  # short_open_res = np.ones(len_df)\n","  # long_open_res = np.ones(len_df)\n","\n","  data_cols = ['open', 'high', 'low', 'close']\n","  open, high, low, close = [t_df[col_].to_numpy() for col_ in data_cols]\n","  b1_close = t_df.close.shift(itv_num).to_numpy()\n","  \n","  # ============ modules ============ #  \n","  # ------ define co, cu ------ # <- point missing 과 관련해 정교해아함\n","  cu_bool = ((b1_close > b1_dc_base_) & (dc_base_ > close)) | ((b1_close > dc_base_) & (dc_base_ > close))\n","  co_bool = (b1_close < b1_dc_base_) & (dc_base_ < close) | ((b1_close < dc_base_) & (dc_base_ < close))\n","\n","  cu_idx = get_index_bybool(cu_bool, len_df_range)   # for marking\n","  co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","  # high_terms, low_terms, high_terms_cnt, low_terms_cnt = get_terms_info(cu_bool, co_bool, len_df_range)\n","  # high_terms, low_terms, high_terms_cnt, low_terms_cnt, cu_idx_term, co_idx_term = get_terms_info_v2(cu_bool, co_bool, len_df_range)\n","  high_terms, low_terms, high_terms_cnt, low_terms_cnt, cu_idx_term, co_idx_term = get_terms_info_v3(cu_bool, co_bool, len_df_range)\n","\n","  paired_cu_idx = high_terms[:, 1]\n","  paired_co_idx = low_terms[:, 1]\n","\n","  # ------ 생략 이전 terms' hl ------ #\n","  wave_high_terms_low_ = np.full(len_df, np.nan)\n","  wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","  wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_terms])\n","  wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_terms])  \n","\n","  wave_high_terms_low_[paired_cu_idx] = wave_high_terms_lows\n","  wave_low_terms_high_[paired_co_idx] = wave_low_terms_highs\n","\n","  # ------ 생략된 cu, co 에 대한 2nd pairing 진행 ------ #\n","  # cu_bool[high_terms[:, 1][high_terms_cnt <= term_thresh]] = False\n","  # co_bool[low_terms[:, 1][low_terms_cnt <= term_thresh]] = False  \n","  cu_bool[high_terms[:, 1][(high_terms_cnt <= term_thresh1) & (cu_idx_term <= term_thresh2)]] = False\n","  co_bool[low_terms[:, 1][(low_terms_cnt <= term_thresh1) & (co_idx_term <= term_thresh2)]] = False  \n","\n","  # high_terms, low_terms, high_terms_cnt, low_terms_cnt = get_terms_info(cu_bool, co_bool, len_df_range)\n","  # high_terms, low_terms, high_terms_cnt, low_terms_cnt, _, _ = get_terms_info_v2(cu_bool, co_bool, len_df_range)\n","  high_post_terms, low_post_terms, high_terms_cnt, low_terms_cnt, high_prime_terms, low_prime_terms, cu_idx_term, co_idx_term = get_terms_info_v3(cu_bool, co_bool, len_df_range)\n","  \n","  paired_cu_idx = high_prime_terms[:, 1]\n","  paired_co_idx = low_prime_terms[:, 1]\n","\n","  # ====== get wave_hl & terms ====== #\n","  wave_high_ = np.full(len_df, np.nan)\n","  wave_low_ = np.full(len_df, np.nan)\n","\n","  wave_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_terms])\n","  wave_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_terms])\n","\n","  wave_high_[paired_cu_idx] = wave_highs\n","  wave_low_[paired_co_idx] = wave_lows\n","\n","  wave_high_fill_ = fill_arr(wave_high_)\n","  wave_low_fill_ = fill_arr(wave_low_)\n","\n","  # wave_high_terms_low_ = np.full(len_df, np.nan)\n","  # wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","  # wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_terms])  # for point rejection, Todo, min_max 설정 항상 주의\n","  # wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_terms])\n","\n","  # wave_high_terms_low_[paired_cu_idx] = wave_high_terms_lows\n","  # wave_low_terms_high_[paired_co_idx] = wave_low_terms_highs\n","\n","  wave_high_terms_cnt_ = np.full(len_df, np.nan)\n","  wave_low_terms_cnt_ = np.full(len_df, np.nan)\n","\n","  wave_high_terms_cnt_[paired_cu_idx] = high_terms_cnt\n","  wave_low_terms_cnt_[paired_co_idx] = low_terms_cnt\n","\n","  wave_high_terms_cnt_fill_ = fill_arr(wave_high_terms_cnt_)\n","  wave_low_terms_cnt_fill_ = fill_arr(wave_low_terms_cnt_)\n","  \n","  # ------ hl_fill 의 prime_idx 를 찾아야함 ------ # \n","  b1_wave_high_fill_ = pd.Series(wave_high_fill_).shift(1).to_numpy()\n","  b1_wave_low_fill_ = pd.Series(wave_low_fill_).shift(1).to_numpy()\n","  wave_high_prime_idx = np.where((wave_high_fill_ != b1_wave_high_fill_) & ~np.isnan(wave_high_fill_), len_df_range, np.nan)\n","  wave_low_prime_idx = np.where((wave_low_fill_ != b1_wave_low_fill_) & ~np.isnan(wave_low_fill_), len_df_range, np.nan)\n","\n","  cu_prime_idx = wave_high_prime_idx\n","  cu_prime_idx_fill_ = fill_arr(cu_prime_idx)\n","\n","  co_prime_idx = wave_low_prime_idx\n","  co_prime_idx_fill_ = fill_arr(wave_low_prime_idx)  \n","\n","  # ============ enlist to df_cols ============ #       \n","  t_df['wave_high_fill_{}{}'.format(itv, period1)] = wave_high_fill_\n","  t_df['wave_low_fill_{}{}'.format(itv, period1)] = wave_low_fill_\n","\n","  t_df['wave_high_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_high_terms_cnt_fill_\n","  t_df['wave_low_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_low_terms_cnt_fill_\n","  t_df['wave_cu_{}{}'.format(itv, period1)] = cu_bool * (wave_high_terms_low_ >= wave_low_fill_)   # co ~ cu’s low 가 wave_low 갱신할 경우 point 에서 제외\n","  t_df['wave_co_{}{}'.format(itv, period1)] = co_bool * (wave_low_terms_high_ <= wave_high_fill_)\n","  t_df['wave_cu_bool_{}{}'.format(itv, period1)] = cu_bool   # temporary, for plot_check\n","  t_df['wave_co_bool_{}{}'.format(itv, period1)] = co_bool\n","  t_df['wave_cu_marker_{}{}'.format(itv, period1)] = get_line(cu_idx, dc_base_)\n","  t_df['wave_co_marker_{}{}'.format(itv, period1)] = get_line(co_idx, dc_base_)\n","\n","  # ------ for roll prev_hl ------ # \n","  t_df['wave_cu_prime_idx_{}{}'.format(itv, period1)] = cu_prime_idx\n","  t_df['wave_co_prime_idx_{}{}'.format(itv, period1)] = co_prime_idx\n","  \n","  # ------ for first_high ------ # \n","  t_df['wave_cu_prime_idx_fill_{}{}'.format(itv, period1)] = cu_prime_idx_fill_\n","  t_df['wave_co_prime_idx_fill_{}{}'.format(itv, period1)] = co_prime_idx_fill_\n","    \n","  if itv != 'T':\n","    assert ltf_df is not None, \"assert ltf_df is not None\"\n","    join_cols = np.arange(-15, 0 ,1).astype(int)  # points & donchian_channels\n","    ltf_df.drop(t_df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","    try:\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, t_df, join_cols), how='inner')\n","    except Exception as e:\n","      print(\"error in wave_range()'s join() :\", e)\n","  else:\n","    ltf_df = t_df    \n","\n","  return ltf_df\n","  \n","def wave_range_v13(t_df, config, ltf_df=None, term_thresh=2):  # v2 for period1 only\n","\n","  itv = pd.infer_freq(t_df.index)\n","  period1 = config.tr_set.wave_period\n","  # print(period1)\n","\n","  itv_num = to_itvnum(itv)\n","  # print(itv_num)\n","\n","  t_df = donchian_channel_v4(t_df, period1) \n","\n","  dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].to_numpy()\n","  b1_dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].shift(itv_num).to_numpy()\n","\n","  len_df = len(t_df)   \n","  len_df_range = np.arange(len_df).astype(int)\n","  # short_open_res = np.ones(len_df)\n","  # long_open_res = np.ones(len_df)\n","\n","  data_cols = ['open', 'high', 'low', 'close']\n","  open, high, low, close = [t_df[col_].to_numpy() for col_ in data_cols]\n","  b1_close = t_df.close.shift(itv_num).to_numpy()\n","  \n","  # ============ modules ============ #  \n","  # ------ define co, cu ------ # <- point missing 과 관련해 정교해아함\n","  cu_bool = ((b1_close > b1_dc_base_) & (dc_base_ > close)) | ((b1_close > dc_base_) & (dc_base_ > close))\n","  co_bool = (b1_close < b1_dc_base_) & (dc_base_ < close) | ((b1_close < dc_base_) & (dc_base_ < close))\n","\n","  cu_idx = get_index_bybool(cu_bool, len_df_range)   # for marking\n","  co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","  high_terms, low_terms, high_terms_cnt, low_terms_cnt = get_terms_info(cu_bool, co_bool, len_df_range)\n","\n","  wave_high_terms_low_ = np.full(len_df, np.nan)\n","  wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","  wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_terms])  # 생략 이전 terms' hl\n","  wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_terms])  \n","\n","  paired_cu_idx = high_terms[:, 1]\n","  paired_co_idx = low_terms[:, 1]\n","\n","  wave_high_terms_low_[paired_cu_idx] = wave_high_terms_lows\n","  wave_low_terms_high_[paired_co_idx] = wave_low_terms_highs\n","\n","  # ------ add update_hl ------ #\n","  wave_high_ = np.full(len_df, np.nan)\n","  wave_low_ = np.full(len_df, np.nan)\n","\n","  wave_low_[paired_cu_idx] = wave_high_terms_lows  \n","  wave_high_[paired_co_idx] = wave_low_terms_highs\n","\n","  # ------ 생략된 cu, co 에 대한 2nd pairing 진행 ------ #\n","  cu_bool[high_terms[:, 1][high_terms_cnt <= term_thresh]] = False\n","  co_bool[low_terms[:, 1][low_terms_cnt <= term_thresh]] = False  \n","  high_terms, low_terms, high_terms_cnt, low_terms_cnt = get_terms_info(cu_bool, co_bool, len_df_range)\n","  \n","  paired_cu_idx = high_terms[:, 1]\n","  paired_co_idx = low_terms[:, 1]\n","\n","  # ====== get wave_hl & terms ====== #\n","  wave_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_terms])\n","  wave_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_terms])\n","\n","  wave_high_[paired_cu_idx] = wave_highs\n","  wave_low_[paired_co_idx] = wave_lows\n","\n","  wave_high_fill_ = fill_arr(wave_high_)\n","  wave_low_fill_ = fill_arr(wave_low_)\n","\n","  # wave_high_terms_low_ = np.full(len_df, np.nan)\n","  # wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","  # wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_terms])  # for point rejection, Todo, min_max 설정 항상 주의\n","  # wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_terms])\n","\n","  # wave_high_terms_low_[paired_cu_idx] = wave_high_terms_lows\n","  # wave_low_terms_high_[paired_co_idx] = wave_low_terms_highs\n","\n","  wave_high_terms_cnt_ = np.full(len_df, np.nan)\n","  wave_low_terms_cnt_ = np.full(len_df, np.nan)\n","\n","  wave_high_terms_cnt_[paired_cu_idx] = high_terms_cnt\n","  wave_low_terms_cnt_[paired_co_idx] = low_terms_cnt\n","\n","  wave_high_terms_cnt_fill_ = fill_arr(wave_high_terms_cnt_)\n","  wave_low_terms_cnt_fill_ = fill_arr(wave_low_terms_cnt_)\n","  \n","  # ------ hl_fill 의 prime_idx 를 찾아야함 ------ # \n","  b1_wave_high_fill_ = pd.Series(wave_high_fill_).shift(1).to_numpy()\n","  b1_wave_low_fill_ = pd.Series(wave_low_fill_).shift(1).to_numpy()\n","  wave_high_prime_idx = np.where((wave_high_fill_ != b1_wave_high_fill_) & ~np.isnan(wave_high_fill_), len_df_range, np.nan)\n","  wave_low_prime_idx = np.where((wave_low_fill_ != b1_wave_low_fill_) & ~np.isnan(wave_low_fill_), len_df_range, np.nan)\n","\n","  cu_prime_idx = wave_high_prime_idx\n","  cu_prime_idx_fill_ = fill_arr(cu_prime_idx)\n","\n","  co_prime_idx = wave_low_prime_idx\n","  co_prime_idx_fill_ = fill_arr(wave_low_prime_idx)  \n","\n","  # ============ enlist to df_cols ============ #       \n","  t_df['wave_high_fill_{}{}'.format(itv, period1)] = wave_high_fill_\n","  t_df['wave_low_fill_{}{}'.format(itv, period1)] = wave_low_fill_\n","\n","  t_df['wave_high_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_high_terms_cnt_fill_\n","  t_df['wave_low_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_low_terms_cnt_fill_\n","  t_df['wave_cu_{}{}'.format(itv, period1)] = cu_bool * (wave_high_terms_low_ >= wave_low_fill_)   # co ~ cu’s low 가 wave_low 갱신할 경우 point 에서 제외\n","  t_df['wave_co_{}{}'.format(itv, period1)] = co_bool * (wave_low_terms_high_ <= wave_high_fill_)\n","  t_df['wave_cu_bool_{}{}'.format(itv, period1)] = cu_bool   # temporary, for plot_check\n","  t_df['wave_co_bool_{}{}'.format(itv, period1)] = co_bool\n","  t_df['wave_cu_marker_{}{}'.format(itv, period1)] = get_line(cu_idx, dc_base_)\n","  t_df['wave_co_marker_{}{}'.format(itv, period1)] = get_line(co_idx, dc_base_)\n","\n","  # ------ for roll prev_hl ------ # \n","  t_df['wave_cu_prime_idx_{}{}'.format(itv, period1)] = cu_prime_idx\n","  t_df['wave_co_prime_idx_{}{}'.format(itv, period1)] = co_prime_idx\n","  \n","  # ------ for first_high ------ # \n","  t_df['wave_cu_prime_idx_fill_{}{}'.format(itv, period1)] = cu_prime_idx_fill_\n","  t_df['wave_co_prime_idx_fill_{}{}'.format(itv, period1)] = co_prime_idx_fill_\n","    \n","  if itv != 'T':\n","    assert ltf_df is not None, \"assert ltf_df is not None\"\n","    join_cols = np.arange(-15, 0 ,1).astype(int)  # points & donchian_channels\n","    ltf_df.drop(t_df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","    try:\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, t_df, join_cols), how='inner')\n","    except Exception as e:\n","      print(\"error in wave_range()'s join() :\", e)\n","  else:\n","    ltf_df = t_df    \n","\n","  return ltf_df\n","\n","\n","def wave_range_v12(t_df, config, ltf_df=None):  # v2 for period1 only\n","\n","  itv = pd.infer_freq(t_df.index)\n","  period1 = config.tr_set.wave_period\n","  # print(period1)\n","\n","  itv_num = to_itvnum(itv)\n","  # print(itv_num)\n","\n","  t_df = donchian_channel_v4(t_df, period1) \n","\n","  dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].to_numpy()\n","  b1_dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].shift(itv_num).to_numpy()\n","\n","  len_df = len(t_df)   \n","  len_df_range = np.arange(len_df).astype(int)\n","  # short_open_res = np.ones(len_df)\n","  # long_open_res = np.ones(len_df)\n","\n","  data_cols = ['open', 'high', 'low', 'close']\n","  open, high, low, close = [t_df[col_].to_numpy() for col_ in data_cols]\n","  b1_close = t_df.close.shift(itv_num).to_numpy()\n","  \n","  # ============ modules ============ #  \n","  # ------ define co, cu ------ # <- point missing 과 관련해 정교해아함\n","  cu_bool = ((b1_close > b1_dc_base_) & (dc_base_ > close)) | ((b1_close > dc_base_) & (dc_base_ > close))\n","  co_bool = (b1_close < b1_dc_base_) & (dc_base_ < close) | ((b1_close < dc_base_) & (dc_base_ < close))\n","\n","  # Todo, term 조정은 이 line 에서 해야할 것\n","  b1_cu_bool = pd.Series(cu_bool).shift(1).to_numpy()\n","  b1_co_bool = pd.Series(co_bool).shift(1).to_numpy()\n","\n","  cu_bool *= ~b1_co_bool.astype(bool)  # short_term point 생략\n","  co_bool *= ~b1_cu_bool.astype(bool)\n","\n","  cu_idx = get_index_bybool(cu_bool, len_df_range)\n","  co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","  cu_fill_idx = fill_arr(cu_idx)\n","  co_fill_idx = fill_arr(co_idx)\n","\n","  # ------ get co, cu terms ------ #\n","  high_bool = cu_fill_idx < co_fill_idx  # 이렇게 해야 high_terms[:, 1] 이 cu_idx 가 나옴\n","  low_bool = co_fill_idx < cu_fill_idx\n","\n","  high_terms_vec = get_index_bybool(high_bool, len_df_range)\n","  low_terms_vec = get_index_bybool(low_bool, len_df_range) # -> low_terms\n","\n","  high_terms_list = using_clump(high_terms_vec)\n","  low_terms_list = using_clump(low_terms_vec)\n","\n","  high_terms = np.array([[terms.min(), terms.max() + 1] for terms in high_terms_list])\n","  low_terms = np.array([[terms.min(), terms.max() + 1] for terms in low_terms_list])\n","\n","  high_terms_cnt = high_terms[:, 1] - high_terms[:, 0] \n","  low_terms_cnt = low_terms[:, 1] - low_terms[:, 0] \n","\n","  wave_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_terms])\n","  wave_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_terms])\n","\n","  # ------ get valid_idx range (inner len_df) ------ #\n","  paired_cu_idx = high_terms[:, 1]\n","  paired_co_idx = low_terms[:, 1]\n","\n","  valid_cu_bool = paired_cu_idx < len_df\n","  valid_co_bool = paired_co_idx < len_df\n","\n","  paired_cu_valid_idx = paired_cu_idx[valid_cu_bool]\n","  paired_co_valid_idx = paired_co_idx[valid_co_bool]\n","\n","  # ------ get wave_hl & terms ------ #\n","  wave_high_ = np.full(len_df, np.nan)\n","  wave_low_ = np.full(len_df, np.nan)\n","\n","  wave_high_[paired_cu_valid_idx] = wave_highs[valid_cu_bool]\n","  wave_low_[paired_co_valid_idx] = wave_lows[valid_co_bool]\n","\n","  wave_high_fill_ = fill_arr(wave_high_)\n","  wave_low_fill_ = fill_arr(wave_low_)\n","\n","  wave_high_terms_cnt_ = np.full(len_df, np.nan)\n","  wave_low_terms_cnt_ = np.full(len_df, np.nan)\n","\n","  wave_high_terms_cnt_[paired_cu_valid_idx] = high_terms_cnt[valid_cu_bool]\n","  wave_low_terms_cnt_[paired_co_valid_idx] = low_terms_cnt[valid_co_bool]\n","\n","  wave_high_terms_cnt_fill_ = fill_arr(wave_high_terms_cnt_)\n","  wave_low_terms_cnt_fill_ = fill_arr(wave_low_terms_cnt_)\n","\n","  # ------ check update high & low (occurs by point missing) ------ # \n","  co_prime_idx = np.full(len_df, np.nan)\n","  co_prime_idx[paired_co_valid_idx] = paired_co_valid_idx\n","  co_prime_idx_fill_ = fill_arr(co_prime_idx)\n","  # valid_idx = co_idx > co_prime_idx_fill_\n","  valid_idx = cu_idx > co_prime_idx_fill_\n","\n","  # update_low[valid_idx] = [low[iin:iout + 1].min() for iin, iout in zip(cu_prime_idx_fill_[valid_idx].astype(int), cu_idx[valid_idx].astype(int))]  # include open low\n","  # 1. 잘 생각해보면, cu_idx 에는 co_prime_idx_fill_ 을 사용하는게 맞음\n","  #   a. cu_idx 에 달려있는 low 가 co_prime_idx_fill_ 기준이니까\n","  # update_low = np.full(len_df, np.nan)\n","  # update_low[valid_idx] = [low[iin:iout + 1].min() for iin, iout in zip(co_prime_idx_fill_[valid_idx].astype(int), cu_idx[valid_idx].astype(int))]   # high 아닌가\n","  \n","  update_high = np.full(len_df, np.nan)\n","  update_high[valid_idx] = [high[iin:iout + 1].max() for iin, iout in zip(co_prime_idx_fill_[valid_idx].astype(int), cu_idx[valid_idx].astype(int))]   # high 아닌가 => 아님 update_low 이기 때문\n","  \n","  cu_prime_idx = np.full(len_df, np.nan)\n","  cu_prime_idx[paired_cu_valid_idx] = paired_cu_valid_idx\n","  cu_prime_idx_fill_ = fill_arr(cu_prime_idx)\n","  valid_idx = co_idx > cu_prime_idx_fill_\n","\n","  # update_high = np.full(len_df, np.nan)\n","  # update_high[valid_idx] = [high[iin:iout + 1].max() for iin, iout in zip(cu_prime_idx_fill_[valid_idx].astype(int), co_idx[valid_idx].astype(int))]\n","\n","  update_low = np.full(len_df, np.nan)\n","  update_low[valid_idx] = [low[iin:iout + 1].min() for iin, iout in zip(cu_prime_idx_fill_[valid_idx].astype(int), co_idx[valid_idx].astype(int))]\n","\n","  # ============ enlist to df_cols ============ #       \n","  t_df['wave_high_fill_{}{}'.format(itv, period1)] = wave_high_fill_\n","  t_df['wave_low_fill_{}{}'.format(itv, period1)] = wave_low_fill_\n","\n","  t_df['wave_update_high_fill_{}{}'.format(itv, period1)] = update_high\n","  t_df['wave_update_low_fill_{}{}'.format(itv, period1)] = update_low\n","\n","  t_df['wave_high_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_high_terms_cnt_fill_\n","  t_df['wave_low_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_low_terms_cnt_fill_\n","  t_df['wave_cu_{}{}'.format(itv, period1)] = cu_bool * ~(update_low < wave_low_fill_)   # Todo, 이곳 다시 한번 확인 (old, point_missing 으로 인한 low 갱신 회피)\n","  t_df['wave_co_{}{}'.format(itv, period1)] = co_bool * ~(update_high > wave_high_fill_)\n","  t_df['wave_cu_marker_{}{}'.format(itv, period1)] = get_line(cu_idx, dc_base_)\n","  t_df['wave_co_marker_{}{}'.format(itv, period1)] = get_line(co_idx, dc_base_)\n","\n","  # ------ for roll prev_hl ------ # \n","  t_df['wave_cu_prime_idx_{}{}'.format(itv, period1)] = cu_prime_idx\n","  t_df['wave_co_prime_idx_{}{}'.format(itv, period1)] = co_prime_idx\n","  \n","  # ------ for first_high ------ # \n","  t_df['wave_cu_prime_idx_fill_{}{}'.format(itv, period1)] = cu_prime_idx_fill_\n","  t_df['wave_co_prime_idx_fill_{}{}'.format(itv, period1)] = co_prime_idx_fill_\n","    \n","  if itv != 'T':\n","    assert ltf_df is not None, \"assert ltf_df is not None\"\n","    join_cols = np.arange(-17, 0 ,1).astype(int)  # points & donchian_channels\n","    ltf_df.drop(t_df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","    try:\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, t_df, join_cols), how='inner')\n","    except Exception as e:\n","      print(\"error in wave_range()'s join() :\", e)\n","  else:\n","    ltf_df = t_df    \n","\n","  return ltf_df\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"1MNVIExLULhJ"},"source":["#### legacy"]},{"cell_type":"markdown","metadata":{"id":"EOXQbXixiQcK"},"source":["##### volume_profile"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7pFuazxpgx9B"},"outputs":[],"source":["session_df = res_df_.iloc[-1440:] # 0.159 -> 0.024 (14400 -> 1440)\n","volume = session_df['volume'].to_numpy()\n","close = session_df['close'].to_numpy()\n","# px.histogram(session_df, x='volume', y='close', nbins=150, orientation='h').show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SoPJkiyKiXLM"},"outputs":[],"source":["kde_factor = 0.05\n","num_samples = 100\n","\n","start_0 = time.time()\n","kde = stats.gaussian_kde(close,weights=volume,bw_method=kde_factor)\n","kdx = np.linspace(close.min(),close.max(),num_samples)\n","kdy = kde(kdx)\n","ticks_per_sample = (kdx.max() - kdx.min()) / num_samples\n","print(\"ticks_per_sample :\", ticks_per_sample)  # sample 당 가격\n","print(\"kdy elapsed_time :\", time.time() - start_0)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mK2jBddAxJ14"},"outputs":[],"source":["peaks,_ = signal.find_peaks(kdy)\n","pkx = kdx[peaks]\n","pky = kdy[peaks]\n","\n","plt.figure(figsize=(10,5))\n","# plt.hist(close, bins=num_samples, weights=volume, alpha=.8, color='#1592e6')\n","# plt.plot(kdx, kdy, color='white')\n","# plt.plot(pkx, pky, 'bo', color='yellow')\n","plt.plot(kdy, kdx, color='white')\n","plt.plot(pky, pkx, 'bo', color='yellow')\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"a8tpQZCy0SO1"},"outputs":[],"source":["pkx"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gfA946s8UgS0"},"outputs":[],"source":["# ------ vp 의 indi. 화가 필요함 -> point 설정 ------ #\n","# 1. 4 level 은 미리 만들어놓는게 맞는걸로 보임 -> 추종하는 function 이 많음 (utils_tr, ep_out ...)\n","#   a. 4 level 에 국한하는게 아니라, 모든 peaks 에 대해 levels 설정\n","#   b. 각 session 별로 peak_list 가 주어질 것\n","#     i. prev_data 사용해야하는점 주의 (session vp 는 future_data)"]},{"cell_type":"markdown","metadata":{"id":"3T-9FwWFXR4f"},"source":["###### prominence_info"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RmBt2agljClE"},"outputs":[],"source":["start_0 = time.time()\n","min_prom = kdy.max() * 0.0\n","pipsize = 0.01\n","max_width_pips = 20\n","# width_range=(1, max_width_pips * pipsize / ticks_per_sample)\n","width_range= max_width_pips * pipsize / ticks_per_sample\n","peaks, peak_props = signal.find_peaks(kdy, prominence=min_prom, width=width_range)\n","\n","peak_x = kdx[peaks]\n","peak_y = kdy[peaks]\n","# ------ prominence lines ------ #\n","left_base = peak_props['left_bases']\n","right_base = peak_props['right_bases']\n","line_x = peak_x\n","line_y0 = peak_y\n","line_y1 = peak_y # - peak_props['prominences']\n","print(\"prom_line elapsed_time :\", time.time() - start_0)\n","\n","\n","for x, y0, y1 in zip(line_x, line_y0, line_y1):\n","    fig.add_shape(type='line',\n","        xref='x', yref='y',\n","        # x0=x, y0=y0, x1=x, y1=y1,\n","        x0=x, y0=0, x1=x, y1=y1,\n","        line=dict(\n","            color='red',\n","            width=2,\n","        )\n","    )\n","\n","# ------ width ------ #\n","left_ips = peak_props['left_ips']\n","right_ips = peak_props['right_ips']\n","# width_x0 = kdx.min() + (left_ips * ticks_per_sample)\n","# width_x1 = kdx.min() + (right_ips * ticks_per_sample)\n","width_x0 = kdx.min() + (left_base * ticks_per_sample)\n","width_x1 = kdx.min() + (right_base * ticks_per_sample)\n","\n","# int_from = kdx.min() + (left_base * ticks_per_sample)\n","# int_to = kdx.min() + (right_base * ticks_per_sample)\n","# [kde.integrate_box_1d(x0, x1) for x0, x1 in zip(int_from, int_to)]\n","\n","width_y = peak_props['width_heights']\n","\n","for x0, x1, y in zip(width_x0, width_x1, width_y):\n","    fig.add_shape(type='line',\n","        xref='x', yref='y',\n","        x0=x0, y0=y, x1=x1, y1=y,\n","        line=dict(\n","            color='red',\n","            width=2,\n","        )\n","    )\n","fig.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zqj944n-WzyZ"},"outputs":[],"source":["# peaks  # ndarray\n","# kdx  # ndarray\n","# kdy  # ndarray\n","# kdx.min()\n","left_base * ticks_per_sample\n","# volume"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Rvqv0RGojo9h"},"outputs":[],"source":["print(peak_y)\n","print(peak_props['prominences'])\n","peak_props"]},{"cell_type":"markdown","metadata":{"id":"c2729DJ6h720"},"source":["##### imb."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Rucj-iepiR_-"},"outputs":[],"source":["t_df = res_df_.iloc[-120:-100]\n","a_data = t_df.to_numpy()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ktm1aB-Bh7GH"},"outputs":[],"source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(15, 9))\n","nrows, ncols = 1, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        # height_ratios=[3, 1]\n","                        )\n","\n","ax = fig.add_subplot(gs[0])\n","\n","# ------ candles ------ #\n","candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","_ = [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jMQBhQ1Ljt5Y"},"outputs":[],"source":["def imb_ratio_v4(df, itv):\n","\n","  itv_num = to_itvnum(itv)\n","\n","  close = df['close_{}'.format(itv)].to_numpy()\n","  open = df['open_{}'.format(itv)].to_numpy()\n","\n","  b1_close = df['close_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_open = df['open_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_high = df['high_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_low = df['low_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","  body_range = abs(close - open)\n","  b1_body_range = abs(b1_close - b1_open)\n","\n","  df['body_rel_ratio_{}'.format(itv)] = body_range / b1_body_range\n","\n","  short_body_range = np.where(close <= b1_low, body_range, b1_body_range)\n","  long_body_range = np.where(close >= b1_high, body_range, b1_body_range)\n","\n","  # 추후에 통계 측정해야함 -> bir 에 따른 개별 trader 의 epout / tpep 이라던가 => short 에 양봉은 취급안함 (why use np.nan)\n","  df['short_ir_{}'.format(itv)] = np.where(close < open, (b1_low - close) / short_body_range, np.nan) # close < open & close < b1_low\n","  df['long_ir_{}'.format(itv)] = np.where(close > open, (close - b1_high) / long_body_range, np.nan) # close > open & close > b1_high\n","\n","  return"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"I1Vq_BiKpY3P"},"outputs":[],"source":["def imb_ratio_v3(df, itv):\n","\n","  itv_num = to_itvnum(itv)\n","\n","  # high = df['high_{}'.format(itv)].to_numpy()\n","  # low = df['low_{}'.format(itv)].to_numpy()\n","  # candle_range = high - low\n","\n","  close = df['close_{}'.format(itv)].to_numpy()\n","  open = df['open_{}'.format(itv)].to_numpy()\n","\n","  b1_close = df['close_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_open = df['open_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_high = df['high_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_low = df['low_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","  body_range = abs(close - open)\n","  b1_body_range = abs(b1_close - b1_open)\n","\n","  df['body_rel_ratio_{}'.format(itv)] = body_range / b1_body_range\n","\n","  short_body_ratio = np.where(close <= b1_low, body_range, b1_body_range)\n","  long_body_range = np.where(close >= b1_high, body_range, b1_body_range)\n","\n","  # 추후에 통계 측정해야함 -> bir 에 따른 개별 trader 의 epout / tpep 이라던가 => short 에 양봉은 취급안함 (why use np.nan)\n","  df['short_ir_{}'.format(itv)] = np.where(close < open, (b1_low - close) / body_range, np.nan) # close < open & close < b1_low\n","  df['long_ir_{}'.format(itv)] = np.where(close > open, (close - b1_high) / body_range, np.nan) # close > open & close > b1_high\n","\n","  return"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mtnMUkhwkdrE"},"outputs":[],"source":["imb_ratio(t_df, \"5T\")\n","# imb_ratio_v3(t_df, \"5T\")\n","# imb_ratio_v4(t_df, \"5T\")\n","\n","t_df.tail(100).short_ir_5T  # .461871\n","# t_df.iloc[:, -10:]\n","# t_df.dtypes"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RVUs1YE_pgBI"},"outputs":[],"source":["# imb_ratio(t_df, \"5T\")\n","# imb_ratio_v3(t_df, \"5T\")\n","imb_ratio_v4(t_df, \"5T\")\n","\n","t_df.tail(100).short_ir_5T  # .461871\n","# t_df.iloc[:, -10:]\n","# t_df.dtypes"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"bieHiKjBkuFL"},"outputs":[],"source":["# ------ rtc 1, 0 개념 ------ #\n","# short_rtc_1 = close\n","# short_rtc_0 = b1_low\n","\n","# long_rtc_1 = close\n","# long_rtc_0 = b1_high\n","\n","# rtc 로 활용하려면, col 로 추가해야할 것 -> 추가할만한 col_name 은 아님\n","# 1. h_candle 인 경우 -> ?\n","#   a. h_candle_v3 먹이고, open_{}.shift(num_itv).to_numpy() 진행 -> ex. res_df['close_{}'.format(hc_itv)].shift(itv_num).to_numpy() "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3X6bMXJIjPYy"},"outputs":[],"source":["# 1. 현재 종가 - 이전 고가 = imb_range (long)\n","long_imb_range = t_df.close - t_df.high.shift(1)\n","# 2. 이전 저가 - 현재 종가 - imb_range (short)\n","short_imb_range = t_df.low.shift(1) - t_df.close"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"q1nEA19v7Qpj"},"outputs":[],"source":["from math import floor\n","\n","\n","def _calc_dev(base_price, price):\n","    return 100 * (price - base_price) / base_price\n","\n","\n","def zigzag(highs, lows, depth=10, dev_threshold=5):\n","    def pivots(src_raw, length, isHigh):\n","        src = list(reversed(src_raw))\n","        bar_index = list(range(len(src)))\n","        for start in range(0, len(src)):\n","            if start + 2 * length + 1 > len(src) - 1:\n","                return\n","            p = 0\n","            if length < len(src) - start:\n","                p = src[start + length]\n","            if length == 0:\n","                yield 0, p\n","            else:\n","                isFound = True\n","                for i in range(start, start + length):\n","                    if isHigh and src[i] > p:\n","                        isFound = False\n","                    if not isHigh and src[i] < p:\n","                        isFound = False\n","                for i in range(start + length + 1, start + 2 * length + 1):\n","                    if isHigh and src[i] >= p:\n","                        isFound = False\n","                    c = not isHigh and src[i] <= p\n","                    if c:\n","                        isFound = False\n","                if isFound:\n","                    yield (bar_index[start + length], p)\n","                else:\n","                    yield None, None\n","\n","    data_highs = [x for x in pivots(highs, floor(depth / 2), True) if x[0]]\n","    data_lows = [x for x in pivots(lows, floor(depth / 2), False) if x[0]]\n","\n","    raw_pairs = []\n","\n","    for i, (ind, p) in enumerate(data_highs):\n","        lows_d = sorted([(ind_l, p_l) for ind_l, p_l in data_lows if ind > ind_l], key=lambda x: x[0])\n","        if lows_d:\n","            lows = lows_d[-1]\n","\n","            if abs(_calc_dev(lows[1], p)) >= dev_threshold:\n","                raw_pairs.append(\n","                    ((ind, p),\n","                     (lows[0], lows[1]))\n","                )\n","\n","    result = []\n","\n","    for (i_h, p_h),(i_l, p_l) in raw_pairs:\n","        if not result:\n","            result.append(((i_h, p_h),(i_l, p_l)))\n","            continue\n","\n","        if i_l == result[-1][1][0]:\n","            if p_h > result[-1][0][1]:\n","                result = result[:-1]\n","            else:\n","                continue\n","\n","        result.append(((i_h, p_h),(i_l, p_l)))\n","\n","    return result\n","\n","# highs, lows = t_df.high.to_numpy(), t_df.low.to_numpy()\n","# zigzag(highs, lows, depth=5, dev_threshold=5)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fGlmdyb97j4Q"},"outputs":[],"source":["t_df = res_df_.iloc[-120:]\n","a_data = t_df.to_numpy()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ropzIp0wUPAA"},"outputs":[],"source":["# import plotly.express as px\n","# import plotly.graph_objects as go\n","\n","def get_dist_plot(c, v, kx, ky):\n","    fig = go.Figure()\n","    fig.add_trace(go.Histogram(name='Vol Profile', x=c, y=v, nbinsx=150, \n","                               histfunc='sum', histnorm='probability density',\n","                               marker_color='#B0C4DE'))\n","    fig.add_trace(go.Scatter(name='KDE', x=kx, y=ky, mode='lines', marker_color='#D2691E'))    \n","\n","    peaks,_ = signal.find_peaks(kdy)\n","    pkx = kdx[peaks]\n","    pky = kdy[peaks]\n","    pk_marker_args=dict(size=10, color='black')\n","    fig.add_trace(go.Scatter(name=\"Peaks\", x=pkx, y=pky, mode='markers', marker=pk_marker_args))\n","    fig.show()\n","\n","    return fig"]},{"cell_type":"markdown","metadata":{"id":"RZJ6uIA_VcJs"},"source":["##### instant."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nLWAP1Cl2Hvu"},"outputs":[],"source":["def wave_range_ratio(res_df, config, bb_itv, bb_period):\n","\n","  wave_itv = pd.infer_freq(res_df.index)\n","  wave_period = config.tr_set.wave_period\n","\n","  bb_upper_ = res_df['bb_upper_{}{}'.format(bb_itv, bb_period)].to_numpy()\n","  bb_lower_ = res_df['bb_lower_{}{}'.format(bb_itv, bb_period)].to_numpy()\n","  \n","  cu_prime_idx_fill_ = res_df['wave_cu_prime_idx_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","  co_prime_idx_fill_ = res_df['wave_co_prime_idx_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","\n","  cu_bb_range = get_line(co_prime_idx_fill_, bb_upper_) - get_line(co_prime_idx_fill_, bb_lower_)  # cu 에서 co_prime 의 bb_range 사용\n","  co_bb_range = get_line(cu_prime_idx_fill_, bb_upper_) - get_line(cu_prime_idx_fill_, bb_lower_)\n","\n","  wave_range = res_df['wave_high_fill_{}{}'.format(wave_itv, wave_period)].to_numpy() - res_df['wave_low_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","  \n","  res_df['cu_wrr_{}{}'.format(wave_itv, wave_period)] = wave_range / cu_bb_range   # for cu (currently, long)\n","  res_df['co_wrr_{}{}'.format(wave_itv, wave_period)] = wave_range / co_bb_range\n","\n","  return res_df"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"H_zPYIshbZgP"},"outputs":[],"source":["# Todo, future_data\n","def enough_space(res_df, itv, period):\n","\n","  dc_upper_ = res_df['dc_upper_{}{}'.format(itv, period)].to_numpy()\n","  dc_base_ = res_df['dc_base_{}{}'.format(itv, period)].to_numpy()\n","  dc_lower_ = res_df['dc_lower_{}{}'.format(itv, period)].to_numpy()  \n","  high_ = res_df['high_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","  low_ = res_df['low_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","\n","  half_dc_gap = dc_upper_ - dc_base_\n","\n","  res_df['cu_es_{}{}'.format(itv, period)] = (low_ - dc_lower_) / half_dc_gap\n","  res_df['co_es_{}{}'.format(itv, period)] = (dc_upper_ - high_) / half_dc_gap\n","\n","  return res_df"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"o3IUBc59VR5D"},"outputs":[],"source":["# Todo, future_data\n","def candle_range_ratio(res_df, c_itv, bb_itv, bb_period):\n","\n","  itv_num = to_itvnum(c_itv)\n","\n","  b1_bb_upper_ = res_df['bb_upper_{}{}'.format(bb_itv, bb_period)].shift(itv_num).to_numpy()\n","  b1_bb_lower_ = res_df['bb_lower_{}{}'.format(bb_itv, bb_period)].shift(itv_num).to_numpy()\n","  bb_range = b1_bb_upper_ - b1_bb_lower_   # <-- h_candle's open_idx 의 bb_gap 사용\n","\n","  high_ = res_df['high_{}'.format(c_itv)].to_numpy()\n","  low_ = res_df['low_{}'.format(c_itv)].to_numpy()\n","  candle_range = high_ - low_  # 부호로 양 / 음봉 구분 (양봉 > 0)\n","  \n","  res_df['crr_{}'.format(c_itv)] = candle_range / bb_range\n","\n","  return res_df"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"u3yFd8Dcok5m"},"outputs":[],"source":["def body_rel_ratio(res_df, c_itv):\n","\n","  itv_num = to_itvnum(c_itv)\n","  \n","  b1_close_ = res_df['close_{}'.format(c_itv)].shift(itv_num).to_numpy()\n","  b1_open_ = res_df['open_{}'.format(c_itv)].shift(itv_num).to_numpy()\n","  b1_body_range = abs(b1_close_ - b1_open_)\n","\n","  close_ = res_df['close_{}'.format(c_itv)].to_numpy()\n","  open_ = res_df['open_{}'.format(c_itv)].to_numpy()\n","  body_range = abs(close_ - open_)\n","  \n","  res_df['body_rel_ratio_{}'.format(c_itv)] = body_range / b1_body_range\n","\n","  return res_df\n","\n","def dc_over_body_ratio(res_df, c_itv, dc_itv, dc_period):\n","  close_ = res_df['close_{}'.format(c_itv)].to_numpy()\n","  open_ = res_df['open_{}'.format(c_itv)].to_numpy()\n","  body_range = abs(close_ - open_)\n","  \n","  dc_upper_ = res_df['dc_upper_{}{}'.format(dc_itv, dc_period)].to_numpy()\n","  dc_lower_ = res_df['dc_lower_{}{}'.format(dc_itv, dc_period)].to_numpy() \n","\n","  res_df['dc_upper_{}{}_br'.format(dc_itv, dc_period)] = (close_ - dc_upper_) / body_range\n","  res_df['dc_lower_{}{}_br'.format(dc_itv, dc_period)] = (dc_lower_ - close_) / body_range\n","\n","  return res_df"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"JWj02LLGbnji"},"outputs":[],"source":["def candle_pumping_ratio_v2(res_df, c_itv, dc_itv, period):\n","\n","  res_df = dc_line_v3(res_df, dc_itv, dc_period=period)\n","\n","  dc_upper_ = res_df['dc_upper_{}{}'.format(dc_itv, period)].to_numpy()\n","  dc_lower_ = res_df['dc_lower_{}{}'.format(dc_itv, period)].to_numpy()\n","  dc_range = dc_upper_ - dc_lower_\n"," \n","  open_ = res_df['open_{}'.format(c_itv)].to_numpy()\n","  close_ = res_df['close_{}'.format(c_itv)].to_numpy()\n","  body = close_ - open_  # 부호로 양 / 음봉 구분 (양봉 > 0)\n","  \n","  res_df['cppr_{}'.format(c_itv)] = body / dc_range\n","\n","  return res_df\n","\n","\n","# Todo, future_data\n","def candle_pumping_ratio(res_df, c_itv, bb_itv, period):\n","\n","  itv_num = to_itvnum(c_itv)\n","\n","  # 여기에도 v2 처럼 bb_indi. 추가 (자동화)\n","\n","  b1_bb_upper_ = res_df['bb_upper_{}{}'.format(bb_itv, period)].shift(itv_num).to_numpy()\n","  b1_bb_lower_ = res_df['bb_lower_{}{}'.format(bb_itv, period)].shift(itv_num).to_numpy()\n","  bb_range = b1_bb_upper_ - b1_bb_lower_\n","\n","  open_ = res_df['open_{}'.format(c_itv)].to_numpy()\n","  close_ = res_df['close_{}'.format(c_itv)].to_numpy()\n","  body = close_ - open_  # 부호로 양 / 음봉 구분 (양봉 > 0)\n","  \n","  res_df['cppr_{}'.format(c_itv)] = body / bb_range\n","\n","  return res_df\n","\n","\n","def pumping_ratio(res_df, config, itv, period1, period2):\n","\n","  bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","  bb_upper_5T = res_df['bb_upper_5T'].to_numpy()\n","  bb_range = bb_upper_5T - bb_lower_5T\n","\n","  selection_id = config.selection_id\n","  \n","  res_df['short_ppr_{}'.format(selection_id)] = res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() / get_line(res_df['short_wave_high_idx_{}{}{}'.format(itv, period1, period2)].to_numpy(), bb_range)\n","  res_df['long_ppr_{}'.format(selection_id)] = res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() / get_line(res_df['long_wave_low_idx_{}{}{}'.format(itv, period1, period2)].to_numpy(), bb_range)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OpkclLSzazZ-"},"outputs":[],"source":["def wave_body_ratio(res_df_, itv, period):\n","  dc_upper_ = res_df_['dc_upper_{}{}'.format(itv, period)].to_numpy()\n","  dc_lower_ = res_df_['dc_lower_{}{}'.format(itv, period)].to_numpy()\n","  close_ = res_df_['close_{}'.format(itv)].to_numpy()\n","  open_ = res_df_['open_{}'.format(itv)].to_numpy()\n","\n","  dc_range = dc_upper_ - dc_lower_\n","  body_range = abs(close_ - open_)\n","\n","  res_df_['wave_body_ratio'] = body_range / dc_range\n","  res_df_['dc_upper_body_ratio'] = (np.maximum(close_, open_) - dc_upper_) / body_range\n","  res_df_['dc_lower_body_ratio'] = (dc_lower_) - np.minimum(close_, open_) / body_range\n","\n","  return"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0-zzitQRbnz8"},"outputs":[],"source":["# res_df_['wave_body_ratio'].tail(200)\n","\n","itv = 'H'\n","period = 5\n","wave_body_ratio(res_df_, itv, period)"]},{"cell_type":"markdown","metadata":{"id":"qsyPhNR8yP1c"},"source":["##### dump"]},{"cell_type":"markdown","metadata":{"id":"xpyP5t8Ht_pE"},"source":["### calc recursive indi's min_period"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"N1Hbm4OA4Tkk"},"outputs":[],"source":["ticker_prcn = get_precision_by_price(res_df.close.iloc[-1]) + 2\n","\n","target_len = 300000\n","slice_len_list = list(range(50, 10000, 100))\n","slice_len_list.insert(0, target_len)\n","\n","start_0 = time.time()\n","# prev_int_, prev_pnts_ = None, None\n","offset = 1\n","\n","for sl_idx, sample_len in enumerate(slice_len_list):\n","\n","  sample_df = res_df.iloc[-sample_len -offset:-offset]\n","  sample_len2 = sample_len\n","\n","  # --------- input using indi.s --------- #\n","  # res = ema_v0(sample_df['close'], 190)\n","  res = rsi(sample_df, 14)\n","\n","    #    to_htf()    #\n","  # df_5T = to_htf(sample_df, itv_='5T', offset='1h')\n","  # sample_len2 = len(df_5T)\n","\n","  # # --------- input using htf_indi. --------- #\n","  # res = ema(df_5T['close'], 195)\n","  # -------------------------------------- #\n","\n","  res_last_row = res.iloc[-1]\n","  if pd.isnull(res_last_row):\n","    continue\n","\n","  # print(res_last_row)\n","  # break\n","\n","  # sample_df = sample_df.join(to_lower_tf_v2(sample_df, df_5T, [-1]), how='inner')\n","\n","\n","  #   자리수 분할 계산    #\n","  int_, points_ = str(res_last_row).split('.')\n","  pnts_ = points_[:ticker_prcn]\n","\n","  if sl_idx == 0:\n","    target_int_ = int_\n","    target_pnts_ = pnts_\n","    print(\"target {} ({}) -> {} {}\".format(sample_len, sample_len2, int_, points_))\n","\n","  else:\n","    if target_int_ == int_ and target_pnts_ == pnts_:\n","      # print(sample_len, \"({})\".format(sample_len2), '->', int_, pnts_, end='\\n\\n')\n","      print(\"{} ({}) -> {} {}\\n\".format(sample_len, sample_len2, int_, points_))\n","      break\n","\n","print(time.time() - start_0)  # (1301)(1361)(1301)"]},{"cell_type":"markdown","metadata":{"id":"rrIGjmUzqU-D"},"source":["## import utils & config"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SeJan_0t95yL"},"outputs":[],"source":["frame_ver = \"0114_htf\"\n","ID_arr = np.array(['v3', 'v5_2'])\n","\n","utils_public_name = \"{}.utils.{}_utils_public\".format(strat_pkg, frame_ver)\n","utils_public_lib = importlib.import_module(utils_public_name)\n","utils_public = utils_public_lib   # temporary\n","\n","u_name_list = [\"{}.utils.{}_utils_{}\".format(strat_pkg, frame_ver, id_) for id_ in ID_arr]\n","utils_arr = np.array([importlib.import_module(u_name) for u_name in u_name_list])\n","\n","config_name_list = [\"{}_config_{}.json\".format(frame_ver, id_) for id_ in ID_arr]\n","cfg_path_list = [os.path.join(current_path, strat_pkg, \"config\", name_) for name_ in config_name_list]\n","cfg_file_list = [open(cfg_path) for cfg_path in cfg_path_list]\n","config_arr = np.array([EasyDict(json.load(cfg_)) for cfg_ in cfg_file_list])\n","\n","# ------ opened files should be closed --> 닫지 않으면 reopen 시 error occurs ------ #\n","_ = [cfg_.close() for cfg_ in cfg_file_list]\n","show_plot = 1   # idep's var - do not touch"]},{"cell_type":"markdown","metadata":{"id":"leSQlImg4_9L"},"source":["### utils_"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CB2yZdQ95Cdg"},"outputs":[],"source":["# import pandas as pd\n","# import numpy as np\n","# import logging\n","\n","def enlist_tr(res_df, config, np_timeidx, mode='OPEN', show_detail=True):\n","\n","    # ================== enlist wave_unit ================== #\n","    selection_id = config.selection_id\n","    \n","    len_df = len(res_df)\n","    len_df_range = np.arange(len_df)\n","      \n","    wave_itv1 = config.tr_set.wave_itv1\n","    wave_period1 = config.tr_set.wave_period1\n","    wave_itv2 = config.tr_set.wave_itv2\n","    wave_period2 = config.tr_set.wave_period2\n","\n","    # if config.tr_set.check_hlm == 2:  # 동일한 param 으로도 p2_hlm 시도를 충분히 할 수 있음 (csdbox 와 같은)\n","    #   assert not (wave_itv1 == wave_itv2 and wave_period1 == wave_period2)\n","\n","    roll_hl_cnt = 3\n","\n","    roll_highs1 = [res_df['wave_high_fill_{}{}_-{}'.format(wave_itv1, wave_period1, cnt_ + 1)].to_numpy() for cnt_ in reversed(range(roll_hl_cnt))]\n","    roll_lows1 = [res_df['wave_low_fill_{}{}_-{}'.format(wave_itv1, wave_period1, cnt_ + 1)].to_numpy() for cnt_ in reversed(range(roll_hl_cnt))]\n","\n","    wave_high_fill1_ = res_df['wave_high_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    wave_low_fill1_ = res_df['wave_low_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","    roll_highs2 = [res_df['wave_high_fill_{}{}_-{}'.format(wave_itv2, wave_period2, cnt_ + 1)].to_numpy() for cnt_ in reversed(range(roll_hl_cnt))]\n","    roll_lows2 = [res_df['wave_low_fill_{}{}_-{}'.format(wave_itv2, wave_period2, cnt_ + 1)].to_numpy() for cnt_ in reversed(range(roll_hl_cnt))]\n","\n","    wave_high_fill2_ = res_df['wave_high_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","    wave_low_fill2_ = res_df['wave_low_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","    \n","    # cu's roll_high_[:, -1] = prev_high & cu's roll_low_[:, -1] = current_low\n","    # co's roll_low_[:, -1] = prev_low & co's roll_high_[:, -1] = current_high\n","    res_df['short_tp_1_{}'.format(selection_id)] = wave_low_fill1_      # wave_low_fill_ b2_low_5T\n","    res_df['short_tp_0_{}'.format(selection_id)] = roll_highs1[-1]   # roll_high_[:, -2] wave_high_fill_\n","    res_df['long_tp_1_{}'.format(selection_id)] = wave_high_fill1_      # wave_high_fill_ b2_high_5T\n","    res_df['long_tp_0_{}'.format(selection_id)] = roll_lows1[-1]     # roll_low_[:, -2]  wave_low_fill_\n","\n","    res_df['short_ep1_1_{}'.format(selection_id)] = wave_low_fill1_   # b2_low_5T\n","    res_df['short_ep1_0_{}'.format(selection_id)] = wave_high_fill1_  # roll_high_[:, -2]\n","    res_df['long_ep1_1_{}'.format(selection_id)] = wave_high_fill1_   # b2_high_5T\n","    res_df['long_ep1_0_{}'.format(selection_id)] = wave_low_fill1_    # roll_low_[:, -2]\n","\n","    res_df['short_out_1_{}'.format(selection_id)] = wave_low_fill2_   # wave_low_fill1_   # wave_low_fill2_   # b2_low_5T\n","    res_df['short_out_0_{}'.format(selection_id)] = roll_highs2[-1]   # roll_highs1[-1]   # roll_highs2[-1]  # roll_high_[:, -2]\n","    res_df['long_out_1_{}'.format(selection_id)] = wave_high_fill2_   # wave_high_fill1_   # wave_high_fill2_   # b2_high_5T\n","    res_df['long_out_0_{}'.format(selection_id)] = roll_lows2[-1]     # roll_lows1[-1]   # roll_lows2[-1]    # roll_low_[:, -2]\n","\n","    res_df['short_ep2_1_{}'.format(selection_id)] = wave_low_fill2_   # b2_low_5T\n","    res_df['short_ep2_0_{}'.format(selection_id)] = wave_high_fill2_  # roll_high_[:, -2]\n","    res_df['long_ep2_1_{}'.format(selection_id)] = wave_high_fill2_   # b2_high_5T\n","    res_df['long_ep2_0_{}'.format(selection_id)] = wave_low_fill2_    # roll_low_[:, -2]\n","\n","\n","    # ------ inversion ------ #\n","    if config.pos_set.short_inversion or config.pos_set.long_inversion:\n","        res_df.rename({short_tp_1_: long_tp_1_, long_tp_1_: short_tp_1_}, axis=1, inplace=True)\n","        res_df.rename({short_tp_0_: long_tp_0_, long_tp_0_: short_tp_0_}, axis=1, inplace=True)\n","        res_df.rename({short_epout_1_: long_epout_1_, long_epout_1_: short_epout_1_}, axis=1, inplace=True)\n","        res_df.rename({short_epout_0_: long_epout_0_, long_epout_0_: short_epout_0_}, axis=1, inplace=True)\n","\n","    res_df['short_tp_gap_{}'.format(selection_id)] = abs(res_df['short_tp_1_{}'.format(selection_id)] - res_df['short_tp_0_{}'.format(selection_id)])\n","    res_df['long_tp_gap_{}'.format(selection_id)] = abs(res_df['long_tp_1_{}'.format(selection_id)] - res_df['long_tp_0_{}'.format(selection_id)])\n","    res_df['short_ep1_gap_{}'.format(selection_id)] = abs(res_df['short_ep1_1_{}'.format(selection_id)] - res_df['short_ep1_0_{}'.format(selection_id)])\n","    res_df['long_ep1_gap_{}'.format(selection_id)] = abs(res_df['long_ep1_1_{}'.format(selection_id)] - res_df['long_ep1_0_{}'.format(selection_id)])\n","\n","    res_df['short_out_gap_{}'.format(selection_id)] = abs(res_df['short_out_1_{}'.format(selection_id)] - res_df['short_out_0_{}'.format(selection_id)])\n","    res_df['long_out_gap_{}'.format(selection_id)] = abs(res_df['long_out_1_{}'.format(selection_id)] - res_df['long_out_0_{}'.format(selection_id)])\n","    res_df['short_ep2_gap_{}'.format(selection_id)] = abs(res_df['short_ep2_1_{}'.format(selection_id)] - res_df['short_ep2_0_{}'.format(selection_id)])\n","    res_df['long_ep2_gap_{}'.format(selection_id)] = abs(res_df['long_ep2_1_{}'.format(selection_id)] - res_df['long_ep2_0_{}'.format(selection_id)])\n","\n","\n","    data_cols = ['open', 'high', 'low', 'close']  # Todo - public_indi 이전에 해야할지도 모름 # 'close', 'haopen', 'hahigh', 'halow', 'haclose'\n","    open, high, low, close = [res_df[col_].to_numpy() for col_ in data_cols]\n","\n","    # ================== point ================== #     \n","    short_open_res1 = np.ones(len_df) #.astype(object)\n","    long_open_res1 = np.ones(len_df)  #.astype(object)\n","    short_open_res2 = np.ones(len_df) #.astype(object)\n","    long_open_res2 = np.ones(len_df)  #.astype(object)\n","    \n","    # ------------ wave_point ------------ #\n","    notnan_cu = ~pd.isnull(res_df['wave_cu_{}{}'.format(wave_itv1, wave_period1)].to_numpy())  # isnull for object\n","    notnan_co = ~pd.isnull(res_df['wave_co_{}{}'.format(wave_itv1, wave_period1)].to_numpy())\n","\n","    short_open_res1 *= res_df['wave_cu_{}{}'.format(wave_itv1, wave_period1)].to_numpy().astype(bool) * notnan_cu  # object로 변환되는 경우에 대응해, bool 로 재정의\n","    long_open_res1 *= res_df['wave_co_{}{}'.format(wave_itv1, wave_period1)].to_numpy().astype(bool) * notnan_co  # np.nan = bool type 으로 True 임..\n","    short_open_res2 *= res_df['wave_cu_{}{}'.format(wave_itv2, wave_period2)].to_numpy().astype(bool) * notnan_cu\n","    long_open_res2 *= res_df['wave_co_{}{}'.format(wave_itv2, wave_period2)].to_numpy().astype(bool) * notnan_co\n","\n","    if show_detail:\n","      sys_log.warning(\"wave_point\")\n","      sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","      sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))  \n","      sys_log.warning(\"np.sum(short_open_res2 == 1) : {}\".format(np.sum(short_open_res2 == 1)))\n","      sys_log.warning(\"np.sum(long_open_res2 == 1) : {}\".format(np.sum(long_open_res2 == 1)))  \n","    \n","    # ------ reject update_hl ------ #\n","    notnan_update_low_cu = ~pd.isnull(res_df['wave_update_low_cu_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy())\n","    notnan_update_high_co = ~pd.isnull(res_df['wave_update_high_co_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy())\n","\n","    short_open_res1 *= ~(res_df['wave_update_low_cu_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy().astype(bool)) * notnan_update_low_cu\n","    long_open_res1 *= ~(res_df['wave_update_high_co_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy().astype(bool)) * notnan_update_high_co\n","    short_open_res2 *= ~(res_df['wave_update_low_cu_bool_{}{}'.format(wave_itv2, wave_period2)].to_numpy().astype(bool)) * notnan_update_low_cu\n","    long_open_res2 *= ~(res_df['wave_update_high_co_bool_{}{}'.format(wave_itv2, wave_period2)].to_numpy().astype(bool)) * notnan_update_high_co\n","\n","    # short_open_res1 *= ~res_df['wave_update_low_cu_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    # long_open_res1 *= ~res_df['wave_update_high_co_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    # short_open_res2 *= ~res_df['wave_update_low_cu_bool_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","    # long_open_res2 *= ~res_df['wave_update_high_co_bool_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","\n","    if show_detail:\n","      sys_log.warning(\"reject update_hl\")\n","      sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","      sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))  \n","      sys_log.warning(\"np.sum(short_open_res2 == 1) : {}\".format(np.sum(short_open_res2 == 1)))\n","      sys_log.warning(\"np.sum(long_open_res2 == 1) : {}\".format(np.sum(long_open_res2 == 1)))  \n","\n","    # ------ tf_entry ------ #    \n","    tf_entry = to_itvnum(config.loc_set.point1.tf_entry)\n","    if wave_itv1 != 'T':      \n","      short_open_res1 *= np_timeidx % tf_entry == (tf_entry - 1)\n","      long_open_res1 *= np_timeidx % tf_entry == (tf_entry - 1) \n","\n","      if show_detail:\n","        sys_log.warning(\"tf_entry\")\n","        sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","        sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))  \n","    \n","    if wave_itv2 != 'T':      \n","      short_open_res2 *= np_timeidx % tf_entry == (tf_entry - 1)\n","      long_open_res2 *= np_timeidx % tf_entry == (tf_entry - 1) \n","\n","      if show_detail:\n","        sys_log.warning(\"tf_entry\")\n","        sys_log.warning(\"np.sum(short_open_res2 == 1) : {}\".format(np.sum(short_open_res2 == 1)))\n","        sys_log.warning(\"np.sum(long_open_res2 == 1) : {}\".format(np.sum(long_open_res2 == 1)))\n","\n","    # ------ wave_point 분리 ------ #\n","    # cci_ = res_df['cci_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    # b1_cci_ = res_df['cci_{}{}'.format(wave_itv1, wave_period1)].shift(1).to_numpy()        \n","    \n","    # band_width = 100\n","    # upper_band = band_width\n","    # lower_band = -band_width\n","\n","    # update_low_cu_bool = res_df['update_low_cu_bool_{}{}'.format(wave_itv1, wave_period1)]\n","    # update_high_co_bool = res_df['update_high_co_bool_{}{}'.format(wave_itv1, wave_period1)]\n","\n","    # short_open_res1 *= (b1_cci_ > upper_band) & (upper_band > cci_) & ~update_low_cu_bool\n","    # long_open_res1 *= (b1_cci_ < lower_band) & (lower_band < cci_) & ~update_high_co_bool   \n","\n","    # ------ wave_mm ------ #\n","    wave_high_terms_cnt_fill1_ = res_df['wave_high_terms_cnt_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    wave_low_terms_cnt_fill1_ = res_df['wave_low_terms_cnt_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","    short_open_res1 *= (wave_high_terms_cnt_fill1_ > config.tr_set.wave_greater2) & (wave_low_terms_cnt_fill1_ > config.tr_set.wave_greater1)\n","    long_open_res1 *= (wave_low_terms_cnt_fill1_ > config.tr_set.wave_greater2) & (wave_high_terms_cnt_fill1_ > config.tr_set.wave_greater1)\n","\n","    wave_high_terms_cnt_fill2_ = res_df['wave_high_terms_cnt_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","    wave_low_terms_cnt_fill2_ = res_df['wave_low_terms_cnt_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","\n","    short_open_res2 *= (wave_high_terms_cnt_fill2_ > config.tr_set.wave_greater2) & (wave_low_terms_cnt_fill2_ > config.tr_set.wave_greater1)\n","    long_open_res2 *= (wave_low_terms_cnt_fill2_ > config.tr_set.wave_greater2) & (wave_high_terms_cnt_fill2_ > config.tr_set.wave_greater1)\n","\n","    if show_detail:\n","      sys_log.warning(\"wave_mm\")\n","      sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","      sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))\n","      sys_log.warning(\"np.sum(short_open_res2 == 1) : {}\".format(np.sum(short_open_res2 == 1)))\n","      sys_log.warning(\"np.sum(long_open_res2 == 1) : {}\".format(np.sum(long_open_res2 == 1)))\n","\n","    # ------------ csd ------------ #\n","    # ------ dc ------ #\n","    # dc_upper_ = res_df['dc_upper_T30'].to_numpy()    \n","    # dc_lower_ = res_df['dc_lower_T30'].to_numpy()    \n","\n","    # # Todo, post_cu ~ co 의 dc_lower == low (=touched) 여부 조사\n","    # short_open_idx1 = get_index_bybool(short_open_res1, len_df_range)\n","    # long_open_idx1 = get_index_bybool(long_open_res1, len_df_range)\n","    # wave_co_post_idx_fill_ = res_df['wave_co_post_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    # wave_cu_post_idx_fill_ = res_df['wave_cu_post_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()   # co_prime_idx (wave_high 정보를 지정하기 위한 front co_idx 지정)\n","\n","    # # 1. dc_lower == low 여부 조사, np.nan 덕분에 vectorize 불가하다고 봄\n","    # short_valid_idx_bool = ~(pd.isnull(wave_co_post_idx_fill_) | pd.isnull(short_open_idx1)) # get_index_bybool\n","    # dc_upper_touch = dc_upper_ <= high\n","    # dc_upper_touch_span = np.full(len_df, np.nan)\n","    # dc_upper_touch_span[short_valid_idx_bool] = [dc_upper_touch[int(iin):int(iout) + 1].sum() for iin, iout in zip(wave_co_post_idx_fill_, short_open_idx1) if not pd.isnull(iin) if not pd.isnull(iout)]\n","\n","    # long_valid_idx_bool = ~(pd.isnull(wave_cu_post_idx_fill_) | pd.isnull(long_open_idx1)) # get_index_bybool\n","    # dc_lower_touch = dc_lower_ >= low\n","    # dc_lower_touch_span = np.full(len_df, np.nan)\n","    # dc_lower_touch_span[long_valid_idx_bool] = [dc_lower_touch[int(iin):int(iout) + 1].sum() for iin, iout in zip(wave_cu_post_idx_fill_, long_open_idx1) if not pd.isnull(iin) if not pd.isnull(iout)]\n","\n","    # short_open_res1 *= dc_upper_touch_span == 0\n","    # long_open_res1 *= dc_lower_touch_span == 0\n","\n","    # if show_detail:\n","    #   sys_log.warning(\"csd - dc\")\n","    #   sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","    #   sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))\n","    #   # sys_log.warning(\"np.sum(short_open_res2 == 1) : {}\".format(np.sum(short_open_res2 == 1)))\n","    #   # sys_log.warning(\"np.sum(long_open_res2 == 1) : {}\".format(np.sum(long_open_res2 == 1)))   \n","    \n","    # ================== pattern depiction ================== #  \n","    # bb_upper_ = res_df['bb_upper_{}{}'.format('T', 60)].to_numpy()\n","    # bb_lower_ = res_df['bb_lower_{}{}'.format('T', 60)].to_numpy()\n","    # bb_upper2_ = res_df['bb_upper2_{}{}'.format('T', 60)].to_numpy()\n","    # bb_lower2_ = res_df['bb_lower2_{}{}'.format('T', 60)].to_numpy()\n","    # bb_upper3_ = res_df['bb_upper3_{}{}'.format('T', 60)].to_numpy()\n","    # bb_lower3_ = res_df['bb_lower3_{}{}'.format('T', 60)].to_numpy()\n","    \n","    # ------ 양 / 음봉 (long) ------ #\n","    # short_open_res1 *= close < open\n","    # long_open_res1 *= close > open\n","\n","    # if show_detail:\n","    #   sys_log.warning(\"close > open\")\n","    #   sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","    #   sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))\n","\n","    \n","    # # ------ even_break, hhhl (long) ------ #        \n","    # # cu's roll_high_[:, -1] = prev_high & cu's roll_low_[:, -1] = current_low\n","    # # co's roll_low_[:, -1] = prev_low & co's roll_high_[:, -1] = current_high\n","    # short_open_res1 *= (roll_low_[:, -2] > roll_low_[:, -1]) # & (roll_high_[:, -2] > roll_high_[:, -1])\n","    # long_open_res1 *= (roll_high_[:, -2] < roll_high_[:, -1]) # & (roll_low_[:, -2] < roll_low_[:, -1])\n","\n","    # if show_detail:\n","    #   sys_log.warning(\"even_break\")\n","    #   sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","    #   sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))\n","\n","    # # ------ roll_high < bb_upper2 (long) ------ #\n","    # short_open_res1 *= (roll_low_[:, -4] > roll_low_bb_lower2_[:, -4])\n","    # short_open_res1 *= (roll_low_[:, -3] > roll_low_bb_lower2_[:, -3])\n","    # short_open_res1 *= (roll_low_[:, -2] > roll_low_bb_lower2_[:, -2])\n","    # short_open_res1 *= (roll_low_[:, -1] > roll_low_bb_lower2_[:, -1])\n","\n","    # long_open_res1 *= (roll_high_[:, -4] < roll_high_bb_upper2_[:, -4])\n","    # long_open_res1 *= (roll_high_[:, -3] < roll_high_bb_upper2_[:, -3])\n","    # long_open_res1 *= (roll_high_[:, -2] < roll_high_bb_upper2_[:, -2])\n","    # long_open_res1 *= (roll_high_[:, -1] < roll_high_bb_upper2_[:, -1])\n","    \n","    # if show_detail:\n","    #   sys_log.warning(\"roll_high < bb_upper2\")\n","    #   sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","    #   sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))\n","\n","    # ------ base_15T < wave_base ------ #\n","    # dc_base_ = res_df['dc_base_{}{}'.format(p1_itv1, p1_period1)].to_numpy()\n","    # wave_base_ = res_df['dc_base_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","    # short_open_res1 *= (dc_base_ > wave_base_) & (dc_base_ > close)\n","    # long_open_res1 *= (dc_base_ < wave_base_) & (dc_base_ < close)\n","\n","    # if show_detail:\n","    #   sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","    #   sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))     \n","        \n","\n","    # ================== tr_set ================== #\n","    # ------------ tp ------------ #\n","    tpg = config.tr_set.tp_gap\n","    res_df['short_tp_{}'.format(selection_id)] = res_df['short_tp_1_{}'.format(selection_id)].to_numpy() - res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * tpg\n","    res_df['long_tp_{}'.format(selection_id)] = res_df['long_tp_1_{}'.format(selection_id)].to_numpy() + res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * tpg\n","    # res_df['short_tp_{}'.format(selection_id)] = short_tp_1 - short_epout_gap * tpg\n","    # res_df['long_tp_{}'.format(selection_id)] = long_tp_1 + long_epout_gap * tpg\n","\n","    # ------ limit_ep ------ #\n","    if config.ep_set.entry_type == \"LIMIT\":\n","        epg1 = config.tr_set.ep_gap1\n","        epg2 = config.tr_set.ep_gap2\n","\n","        # ------ epbox as epg ------ #\n","        # res_df['short_ep1_{}'.format(selection_id)] = res_df['short_ep1_0_{}'.format(selection_id)].to_numpy() + res_df['short_ep1_gap_{}'.format(selection_id)].to_numpy() * epg1\n","        # res_df['long_ep1_{}'.format(selection_id)] = res_df['long_ep1_0_{}'.format(selection_id)].to_numpy() - res_df['long_ep1_gap_{}'.format(selection_id)].to_numpy() * epg1        \n","        # res_df['short_ep2_{}'.format(selection_id)] = res_df['short_ep2_0_{}'.format(selection_id)].to_numpy() + res_df['short_ep2_gap_{}'.format(selection_id)].to_numpy() * epg2\n","        # res_df['long_ep2_{}'.format(selection_id)] = res_df['long_ep2_0_{}'.format(selection_id)].to_numpy() - res_df['long_ep2_gap_{}'.format(selection_id)].to_numpy() * epg2  \n","\n","        # ------ tpbox as epg ------ #\n","        # p1_hlm 을 위해선, tp_0 를 기준할 수 없음 --> ep1 & ep2 를 기준으로 진행\n","        res_df['short_ep1_{}'.format(selection_id)] = res_df['short_ep1_0_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * epg1  # fibonacci 고려하면, tp / out gap 기준이 맞지 않을까\n","        res_df['long_ep1_{}'.format(selection_id)] = res_df['long_ep1_0_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * epg1      \n","        res_df['short_ep2_{}'.format(selection_id)] = res_df['short_ep2_0_{}'.format(selection_id)].to_numpy() + res_df['short_out_gap_{}'.format(selection_id)].to_numpy() * epg2\n","        res_df['long_ep2_{}'.format(selection_id)] = res_df['long_ep2_0_{}'.format(selection_id)].to_numpy() - res_df['long_out_gap_{}'.format(selection_id)].to_numpy() * epg2  \n","        \n","        # ------ fibo_ep ------ #\n","        # res_df['short_ep1_{}'.format(selection_id)] = res_df['short_tp_0_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * epg1  # fibonacci 고려하면, tp / out gap 기준이 맞지 않을까\n","        # res_df['long_ep1_{}'.format(selection_id)] = res_df['long_tp_0_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * epg1    \n","                \n","    # ------ market_ep ------ #\n","    else:\n","        res_df['short_ep1_{}'.format(selection_id)] = close\n","        res_df['long_ep1_{}'.format(selection_id)] = close\n","        res_df['short_ep2_{}'.format(selection_id)] = close\n","        res_df['long_ep2_{}'.format(selection_id)] = close\n","\n","    # ------------ out ------------ #\n","    outg = config.tr_set.out_gap\n","    # res_df['short_out_{}'.format(selection_id)] = short_tp_0 + short_tp_gap * outg            # 1. for hhm check -> 규칙성과 wave_range 기반 거래 기준의 hhm 확인\n","    # res_df['long_out_{}'.format(selection_id)] = long_tp_0 - long_tp_gap * outg\n","\n","    if config.tr_set.check_hlm in [0, 2]:      # for p1_hhm, p2_hlm\n","      res_df['short_out_{}'.format(selection_id)] = res_df['short_out_0_{}'.format(selection_id)].to_numpy() + res_df['short_out_gap_{}'.format(selection_id)].to_numpy() * outg\n","      res_df['long_out_{}'.format(selection_id)] = res_df['long_out_0_{}'.format(selection_id)].to_numpy() - res_df['long_out_gap_{}'.format(selection_id)].to_numpy() * outg\n","      # res_df['short_out_{}'.format(selection_id)] = res_df['short_ep2_0_{}'.format(selection_id)].to_numpy() + res_df['short_ep2_gap_{}'.format(selection_id)].to_numpy() * outg   # p2's ep_box 를 out 으로 사용한다?\n","      # res_df['long_out_{}'.format(selection_id)] = res_df['long_ep2_0_{}'.format(selection_id)].to_numpy() - res_df['long_ep2_gap_{}'.format(selection_id)].to_numpy() * outg \n","    \n","    else:    # for p1_hlm      \n","      # ------ epbox as outg ------ #\n","      # res_df['short_out_{}'.format(selection_id)] = res_df['short_ep1_0_{}'.format(selection_id)].to_numpy() + res_df['short_ep1_gap_{}'.format(selection_id)].to_numpy() * outg\n","      # res_df['long_out_{}'.format(selection_id)] = res_df['long_ep1_0_{}'.format(selection_id)].to_numpy() - res_df['long_ep1_gap_{}'.format(selection_id)].to_numpy() * outg \n","\n","      # ------ tpbox as outg ------ #\n","      res_df['short_out_{}'.format(selection_id)] = res_df['short_ep1_0_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * outg  # ep 와 마찬가지로, tpg 기준 가능\n","      res_df['long_out_{}'.format(selection_id)] = res_df['long_ep1_0_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * outg \n","      \n","      # ------ fibo_out ------ #      \n","      # res_df['short_out_{}'.format(selection_id)] = res_df['short_tp_0_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * outg  # ep 와 마찬가지로, tpg 기준 가능\n","      # res_df['long_out_{}'.format(selection_id)] = res_df['long_tp_0_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * outg \n","\n","    # ------------ point validation ------------ # - vecto. 로 미리 거를 수 있는걸 거르면 좋을 것\n","    short_tp_ = res_df['short_tp_{}'.format(selection_id)].to_numpy()\n","    short_ep1_ = res_df['short_ep1_{}'.format(selection_id)].to_numpy()\n","    short_ep2_ = res_df['short_ep2_{}'.format(selection_id)].to_numpy()\n","    short_out_ = res_df['short_out_{}'.format(selection_id)].to_numpy()\n","\n","    long_tp_ = res_df['long_tp_{}'.format(selection_id)].to_numpy()\n","    long_ep1_ = res_df['long_ep1_{}'.format(selection_id)].to_numpy()\n","    long_ep2_ = res_df['long_ep2_{}'.format(selection_id)].to_numpy()\n","    long_out_ = res_df['long_out_{}'.format(selection_id)].to_numpy()\n","\n","    short_open_res1 *= (short_tp_ < short_ep1_) # (short_ep_ < short_out_)  # tr_set validation reject nan data & 정상 거래 위한 tp > ep / --> p2_box location (cannot be vectorized)\n","    # short_open_res1 *= close < short_ep1_   # reject entry open_execution\n","    short_open_res1 *= close < res_df['short_ep1_0_{}'.format(selection_id)].to_numpy()   # reject hl_out open_execution -> close always < ep1_0 at wave_p1\n","    # short_out_  res_df['short_tp_0_{}'.format(selection_id)].to_numpy() res_df['short_ep1_0_{}'.format(selection_id)].to_numpy()\n","\n","    long_open_res1 *= (long_tp_ > long_ep1_) # (long_ep_ > long_out_)  # (long_tp_ > long_ep_) # tr_set validation     \n","    # long_open_res1 *= close > long_ep1_  # reject entry open_execution    \n","    long_open_res1 *= close > res_df['long_ep1_0_{}'.format(selection_id)].to_numpy()  # reject hl_out open_execution   \n","    # long_out_ res_df['long_tp_0_{}'.format(selection_id)].to_numpy() res_df['long_ep1_0_{}'.format(selection_id)].to_numpy()\n","\n","    short_open_res2 *= (short_ep2_ < short_out_) # tr_set validation (short_tp_ < short_ep_) # --> p2_box location (cannot be vectorized)\n","    short_open_res2 *= close < short_out_    # reject hl_out open_execution\n","\n","    long_open_res2 *= (long_ep2_ > long_out_)  # tr_set validation (long_tp_ > long_ep_) &   # p2's ep & out can be vectorized\n","    long_open_res2 *= close > long_out_    # reject hl_out open_execution\n","\n","    res_df['short_open1_{}'.format(selection_id)] = short_open_res1 * (not config.pos_set.short_ban)\n","    res_df['long_open1_{}'.format(selection_id)] = long_open_res1 * (not config.pos_set.long_ban)\n","    # print(\"res_df['long_open1_{}'.format(selection_id)].to_numpy() :\", res_df['long_open1_{}'.format(selection_id)].to_numpy()) \n","    res_df['short_open2_{}'.format(selection_id)] = short_open_res2\n","    res_df['long_open2_{}'.format(selection_id)] = long_open_res2\n","\n","    if show_detail:\n","      sys_log.warning(\"point validation\")\n","      sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","      sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))\n","      sys_log.warning(\"np.sum(short_open_res2 == 1) : {}\".format(np.sum(short_open_res2 == 1)))\n","      sys_log.warning(\"np.sum(long_open_res2 == 1) : {}\".format(np.sum(long_open_res2 == 1)))\n","    \n","    # ------------ higher_high momentum ------------ #\n","    # wb_tpg = config.tr_set.wb_tp_gap\n","    # wb_outg = config.tr_set.wb_out_gap\n","    # res_df['short_wave_1_{}'.format(selection_id)] = res_df['short_tp_1_{}'.format(selection_id)].to_numpy() - res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * wb_tpg\n","    # res_df['long_wave_1_{}'.format(selection_id)] = res_df['long_tp_1_{}'.format(selection_id)].to_numpy() + res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * wb_tpg\n","    \n","    # res_df['short_wave_0_{}'.format(selection_id)] = res_df['short_tp_0_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * wb_outg        # hhm check\n","    # res_df['long_wave_0_{}'.format(selection_id)] = res_df['long_tp_0_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * wb_outg\n","    # res_df['short_wave_0_{}'.format(selection_id)] = short_epout_0 + short_epout_gap * wb_outg\n","    # res_df['long_wave_0_{}'.format(selection_id)] = long_epout_0 - long_epout_gap * wb_outg\n","\n","    # ------ tr ------ #\n","    if not config.tr_set.check_hlm:\n","      res_df['short_tr_{}'.format(selection_id)] = abs(\n","          (short_ep1_ / short_tp_ - config.trader_set.limit_fee - 1) / (short_ep1_ / short_out_ - config.trader_set.market_fee - 1))\n","      res_df['long_tr_{}'.format(selection_id)] = abs(\n","          (long_tp_ / long_ep1_ - config.trader_set.limit_fee - 1) / (long_out_ / long_ep1_ - config.trader_set.market_fee - 1))\n","    else:      \n","      res_df['short_tr_{}'.format(selection_id)] = np.nan\n","      res_df['long_tr_{}'.format(selection_id)] = np.nan\n","\n","    # ------ zoned_ep ------ #\n","    # if config.tr_set.c_ep_gap != \"None\":\n","    #     # res_df['short_ep_org_{}'.format(selection_id)] = res_df['short_ep_{}'.format(selection_id)].copy()\n","    #     # res_df['long_ep_org_{}'.format(selection_id)] = res_df['long_ep_{}'.format(selection_id)].copy()\n","    #     res_df['short_ep2_{}'.format(selection_id)] = short_epout_1 + short_epout_gap * config.tr_set.c_ep_gap\n","    #     res_df['long_ep2_{}'.format(selection_id)] = long_epout_1 - long_epout_gap * config.tr_set.c_ep_gap\n","\n","    # # ------ zoned_out ------ #\n","    # if config.tr_set.t_out_gap != \"None\":\n","    #     # res_df['short_out_org_{}'.format(selection_id)] = res_df['short_out_{}'.format(selection_id)].copy()\n","    #     # res_df['long_out_org_{}'.format(selection_id)] = res_df['long_out_{}'.format(selection_id)].copy()\n","    #     res_df['short_out2_{}'.format(selection_id)] = short_epout_0 + short_epout_gap * config.tr_set.t_out_gap\n","    #     res_df['long_out2_{}'.format(selection_id)] = long_epout_0 - long_epout_gap * config.tr_set.t_out_gap\n","\n","    return res_df\n"]},{"cell_type":"markdown","metadata":{"id":"HuCb0phoPN83"},"source":["#### legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-DNPumVZi0xs"},"outputs":[],"source":["\n","    # ------ get candle_lastidx ------ #        \n","    # tf_entry = to_itvnum(config.loc_set.point.tf_entry)\n","    # b1_shift = np_timeidx % tf_entry + 1  # dynamic\n","    # b1_candle_lastidx = (len_df_range - b1_shift).astype(float)\n","    # b2_candle_lastidx = (len_df_range - (b1_shift + tf_entry)).astype(float)\n","    # b3_candle_lastidx = (len_df_range - (b1_shift + 2 * tf_entry)).astype(float)\n","    # b1_candle_lastidx[b1_candle_lastidx < 0] = np.nan\n","    # b2_candle_lastidx[b2_candle_lastidx < 0] = np.nan\n","    # b3_candle_lastidx[b3_candle_lastidx < 0] = np.nan\n","\n","    # high_5T = res_df['high_5T'].to_numpy()\n","    # low_5T = res_df['low_5T'].to_numpy()\n","\n","    # b2_high_5T = get_line(b2_candle_lastidx, high_5T)\n","    # b2_low_5T = get_line(b2_candle_lastidx, low_5T)\n","    \n","        # # ------ bb_stream ------ #        \n","        # roll_high_bb_upper_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, bb_upper_, roll_hl_cnt)\n","        # roll_low_bb_upper_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, bb_upper_, roll_hl_cnt)\n","        # roll_high_bb_upper2_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, bb_upper2_, roll_hl_cnt)\n","        # roll_low_bb_upper2_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, bb_upper2_, roll_hl_cnt)\n","\n","        # roll_high_bb_lower_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, bb_lower_, roll_hl_cnt)\n","        # roll_low_bb_lower_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, bb_lower_, roll_hl_cnt)\n","        # roll_high_bb_lower2_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, bb_lower2_, roll_hl_cnt)\n","        # roll_low_bb_lower2_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, bb_lower2_, roll_hl_cnt)\n","\n","        # wave_base_ = res_df['dc_base_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","\n","        # roll_high_wave_base_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, wave_base_, roll_hl_cnt)\n","        # roll_low_wave_base_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, wave_base_, roll_hl_cnt)\n","\n","        # short_open_res *= (roll_high_bb_lower_[:, -2] > roll_high_wave_base_[:, -2]) & (roll_high_wave_base_[:, -2] > roll_high_bb_lower2_[:, -2])\n","        # short_open_res *= (roll_low_bb_lower_[:, -1] > roll_low_wave_base_[:, -1]) & (roll_low_wave_base_[:, -1] > roll_low_bb_lower2_[:, -1])\n","        # short_open_res *= (roll_high_bb_lower_[:, -1] > roll_high_wave_base_[:, -1]) & (roll_high_wave_base_[:, -1] > roll_high_bb_lower2_[:, -1])\n","\n","        # long_open_res *= (roll_low_bb_upper_[:, -2] < roll_low_wave_base_[:, -2]) & (roll_low_wave_base_[:, -2] < roll_low_bb_upper2_[:, -2])\n","        # long_open_res *= (roll_high_bb_upper_[:, -1] < roll_high_wave_base_[:, -1]) & (roll_high_wave_base_[:, -1] < roll_high_bb_upper2_[:, -1])\n","        # long_open_res *= (roll_low_bb_upper_[:, -1] < roll_low_wave_base_[:, -1]) & (roll_low_wave_base_[:, -1] < roll_low_bb_upper2_[:, -1])\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"bb_stream\")\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))  \n","\n","        # ------ candle_pattern  ------ #   \n","        # b3_bb_upper_ = get_line(b3_candle_lastidx, bb_upper_)\n","        # b3_bb_lower_ = get_line(b3_candle_lastidx, bb_lower_)\n","        # b3_bb_upper2_ = get_line(b3_candle_lastidx, bb_upper2_)\n","        # b3_bb_lower2_ = get_line(b3_candle_lastidx, bb_lower2_)\n","        # b3_close = get_line(b3_candle_lastidx, close)\n","\n","        # b2_bb_upper2_ = get_line(b2_candle_lastidx, bb_upper2_)\n","        # b2_bb_lower2_ = get_line(b2_candle_lastidx, bb_lower2_)\n","        # b2_bb_upper3_ = get_line(b2_candle_lastidx, bb_upper3_)\n","        # b2_bb_lower3_ = get_line(b2_candle_lastidx, bb_lower3_)\n","        # b2_close = get_line(b2_candle_lastidx, close)\n","\n","        # b1_bb_upper_ = get_line(b1_candle_lastidx, bb_upper_)\n","        # b1_bb_lower_ = get_line(b1_candle_lastidx, bb_lower_)\n","        # b1_bb_upper2_ = get_line(b1_candle_lastidx, bb_upper2_)\n","        # b1_bb_lower2_ = get_line(b1_candle_lastidx, bb_lower2_)\n","        # b1_close = get_line(b1_candle_lastidx, close)\n","        # b1_high_5T = get_line(b1_candle_lastidx, high_5T)\n","        # b1_low_5T = get_line(b1_candle_lastidx, low_5T)\n","\n","        # short_open_res *= (b3_bb_lower_ > b3_close) & (b3_close > b3_bb_lower2_)\n","        # short_open_res *= (b2_bb_lower2_ > b2_close) & (b2_close > b2_bb_lower3_)\n","        # short_open_res *= (b1_bb_lower_ > b1_close) & (b1_close > b1_bb_lower2_)\n","\n","        # long_open_res *= (b3_bb_upper_ < b3_close) & (b3_close < b3_bb_upper2_)\n","        # long_open_res *= (b2_bb_upper2_ < b2_close) & (b2_close < b2_bb_upper3_)\n","        # long_open_res *= (b1_bb_upper_ < b1_close) & (b1_close < b1_bb_upper2_)\n","\n","        # # short_open_res *= (b2_low_5T < b1_low_5T) & (b2_close < b1_close)\n","        # # long_open_res *= (b2_high_5T > b1_high_5T) & (b2_close > b1_close)\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"candle_pattern\")\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1))) \n","\n","\n","        # ------ low_confirm ------ #\n","        # short_open_res *= b1_high_5T > wave_high_fill_\n","        # long_open_res *= b1_low_5T < wave_low_fill_\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"low_confirm\")\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1))) \n","        \n","        # ------ candle_ratio ------ #\n","        # b2_candle_range_5T = b2_high_5T - b2_low_5T\n","        # b1_candle_range_5T = b1_high_5T - b1_low_5T\n","        \n","        # short_open_res *= b1_candle_range_5T / b2_candle_range_5T < config.loc_set.point.crr\n","        # long_open_res *= b1_candle_range_5T / b2_candle_range_5T < config.loc_set.point.crr\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"candle_ratio\")\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1))) \n","\n","        # ------ wick_ratio ------ #\n","        # upper_wick_ratio_ = res_df['upper_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].to_numpy()\n","        # lower_wick_ratio_ = res_df['lower_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].to_numpy()\n","        # b2_upper_wick_ratio_ = get_line(b2_candle_lastidx, upper_wick_ratio_)\n","        # b2_lower_wick_ratio_ = get_line(b2_candle_lastidx, lower_wick_ratio_)\n","\n","        # short_open_res *= b2_upper_wick_ratio_ < config.loc_set.point.short_wick_ratio\n","        # long_open_res *= b2_upper_wick_ratio_ < config.loc_set.point.long_wick_ratio\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"wick_ratio\")\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1))) \n","\n","        # ------ large wave1_range ------ #          \n","        # roll_bb_upper_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, bb_upper_, roll_hl_cnt)\n","        # roll_bb_lower_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, bb_lower_, roll_hl_cnt)\n","        # roll_bb_upper3_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, bb_upper3_, roll_hl_cnt)\n","        # roll_bb_lower3_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, bb_lower3_, roll_hl_cnt)\n","\n","        # short_open_res *= (roll_bb_upper_[:, -2] < roll_high_[:, -2]) & (roll_low_[:, -1] < roll_bb_lower_[:, -1]) & (roll_low_[:, -1] > roll_bb_lower3_[:, -1])\n","        # long_open_res *= (roll_bb_upper_[:, -1] < roll_high_[:, -1]) & (roll_low_[:, -2] < roll_bb_lower_[:, -2]) & (roll_high_[:, -1] < roll_bb_upper3_[:, -1])\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","        \n","        # ------ low in bb_level3 ------ #  Todo, idx sync 맞춰야할 것\n","        # short_open_res *= (bb_upper2_ < wave_high_fill_) & (wave_high_fill_ < bb_upper3_)\n","        # long_open_res *= (bb_lower3_ < wave_low_fill_) & (wave_low_fill_ < bb_lower2_)\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ first_high ------ #        \n","        # wave_high_prime_idx_fill_= res_df['wave_high_prime_idx_fill_{}{}'.format(itv, period1)].to_numpy()\n","        # wave_low_prime_idx_fill_= res_df['wave_low_prime_idx_fill_{}{}'.format(itv, period1)].to_numpy()\n","        # cu_prime_wave_base = get_line(cu_prime_idx_fill_, wave_base_)\n","        # co_prime_wave_base = get_line(co_prime_idx_fill_, wave_base_)\n","\n","        # # short_open_res *= (co_roll_high_[:, -1] > dc_base_) & (dc_base_ > co_roll_low_[:, -1])\n","        # # long_open_res *= (cu_roll_low_[:, -1] < dc_base_) & (dc_base_ < cu_roll_high_[:, -1])\n","\n","        # short_open_res *= (cu_prime_wave_base > dc_base_) & (dc_base_ > co_prime_wave_base)\n","        # long_open_res *= (co_prime_wave_base < dc_base_) & (dc_base_ < cu_prime_wave_base)\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # cu_prime_dc_base = get_line(cu_prime_idx_fill_, dc_base_)        \n","        # co_prime_dc_base = get_line(co_prime_idx_fill_, dc_base_)\n","        \n","        # shift_size = to_itvnum(p1_itv1)\n","        # b1_dc_base_ = res_df['dc_base_{}{}'.format(p1_itv1, p1_period1)].shift(shift_size).to_numpy()\n","\n","        # short_open_res *= (b1_dc_base_ < dc_base_)\n","        # long_open_res *= (b1_dc_base_ > dc_base_)\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ b1_base_15T < wave_high ------ #\n","        # short_open_res *= (b1_dc_base_ > co_roll_low_[:, -1])\n","        # long_open_res *= (b1_dc_base_ < cu_roll_high_[:, -1])\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))   \n","        \n","        \n","    # b1_itv_num = to_itvnum(config.tr_set.p2_itv0)\n","    # b2_itv_num = to_itvnum(config.tr_set.p2_itv0) * 2  # multi 2 for imb_v2\n","\n","    # res_df[short_tp_1_] = res_df['dc_lower_{}{}'.format(itv, period1)]\n","    # res_df[short_tp_0_] = res_df['dc_upper_{}{}'.format(itv, period2)]\n","    # # res_df[short_tp_0_] = res_df['dc_upper_15T4']\n","    # res_df[long_tp_1_] = res_df['dc_upper_{}{}'.format(itv, period1)]\n","    # res_df[long_tp_0_] = res_df['dc_lower_{}{}'.format(itv, period2)]\n","    # # res_df[long_tp_0_] = res_df['dc_lower_15T4']\n","    \n","        # ------ base_cc ------ #\n","        dc_base_ = res_df['dc_base_{}{}'.format(p1_itv1, p1_period1)].to_numpy()\n","\n","        # close_ = res_df['close_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","        # b1_dc_base_ = res_df['dc_base_{}{}'.format(p1_itv1, p1_period1)].shift(tf_entry).to_numpy()\n","        # b1_close_ = res_df['close_{}'.format(config.loc_set.point.tf_entry)].shift(tf_entry).to_numpy()\n","\n","        # short_open_res *= ((b1_close_ > dc_base_) & (dc_base_ > close_)) | ((b1_close_ > b1_dc_base_) & (dc_base_ > close_))\n","        # long_open_res *= ((b1_close_ < dc_base_) & (dc_base_ < close_)) | ((b1_close_ < b1_dc_base_) & (dc_base_ < close_))\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","        \n","        # ------ tf_entry ------ #\n","        # tf_entry = to_itvnum(config.loc_set.point.tf_entry)\n","        \n","        # short_open_res *= np_timeidx % tf_entry == (tf_entry - 1)\n","        # long_open_res *= np_timeidx % tf_entry == (tf_entry - 1) \n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","    \n","        # ------ cppr 로 양음봉 check ------ # \n","        # tf_entry = to_itvnum(config.loc_set.point.tf_entry)\n","\n","        # res_df['b1_cppr_{}'.format(config.loc_set.point.tf_entry)] = res_df['cppr_{}'.format(config.loc_set.point.tf_entry)].shift(tf_entry)\n","        # b1_cppr_ = res_df['b1_cppr_{}'.format(config.loc_set.point.tf_entry)].to_numpy()  # check b1's cppr in ep_loc\n","        # cppr_ = res_df['cppr_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","        # short_open_res *= (b1_cppr_ > 0) & (cppr_ < 0)\n","        # long_open_res *= (b1_cppr_ < 0) & (cppr_ > 0)\n","\n","        # res_df['b1_updbr'] = res_df['dc_upper_15T4_br'].shift(tf_entry).to_numpy()\n","        # res_df['b1_lwdbr'] = res_df['dc_lower_15T4_br'].shift(tf_entry).to_numpy()\n","        \n","        # res_df['b1_updbr_cppr'] = b1_cppr_ * res_df['b1_updbr'].to_numpy()\n","        # res_df['b1_lwdbr_cppr'] = b1_cppr_ * res_df['b1_lwdbr'].to_numpy()\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ dc_cross ------ #\n","        # b1_dc_upper_15T4 = res_df['dc_upper_15T4'].shift(tf_entry).to_numpy()\n","        # b1_dc_lower_15T4 = res_df['dc_lower_15T4'].shift(tf_entry).to_numpy()\n","        # b1_high_ = res_df['high_{}'.format(config.loc_set.point.tf_entry)].shift(tf_entry).to_numpy()\n","        # b1_low_ = res_df['low_{}'.format(config.loc_set.point.tf_entry)].shift(tf_entry).to_numpy()\n","        # short_open_res *= b1_high_ > b1_dc_upper_15T4\n","        # long_open_res *= b1_low_ < b1_dc_lower_15T4\n","        \n","        # ------ dc_cc ------ #\n","        # b1_close_ = res_df['close_{}'.format(config.loc_set.point.tf_entry)].shift(tf_entry).to_numpy()\n","        # short_open_res *= b1_close_ > b1_dc_upper_15T4\n","        # long_open_res *= b1_close_ < b1_dc_lower_15T4\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ empty_space ------ #       \n","        # dc_upper_15T4 = res_df['dc_upper_15T4'].to_numpy()\n","        # dc_lower_15T4 = res_df['dc_lower_15T4'].to_numpy() \n","        # high_ = res_df['high_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","        # low_ = res_df['low_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","        # short_open_res *= high_ < dc_upper_15T4\n","        # long_open_res *= low_ > dc_lower_15T4\n","        \n","        # ------ candle_pattern ------ #  \n","        # pattern_column = \"{}_{}\".format(config.loc_set.point.candle_pattern, config.loc_set.point.tf_entry)\n","        # short_open_res *= res_df[pattern_column].to_numpy() < 0\n","        # long_open_res *= res_df[pattern_column].to_numpy() > 0\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","\n","        # ------ lower_touch > upper_touch (long) ------ #\n","        # short_open_res *= res_df['short_upper_touch_idx_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy() > res_df['short_lower_touch_idx_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy()\n","        # long_open_res *= res_df['long_lower_touch_idx_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy() > res_df['long_upper_touch_idx_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy()\n","\n","        # ------ base_3T cross ------ #\n","        # dc_base_3T = res_df['dc_base_3T'].to_numpy()\n","        # b1_close = res_df['close'].shift(1).to_numpy()\n","        # short_open_res *= (b1_close > dc_base_3T) & (dc_base_3T > close)\n","        # long_open_res *= (b1_close < dc_base_3T) & (dc_base_3T < close)\n","\n","        # ------ wave_low < base_5T (long) ------ #\n","        # dc_base_5T = res_df['dc_base_5T'].to_numpy()        \n","        # short_open_res *= res_df['short_upper_touch_line_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy() > dc_base_5T\n","        # long_open_res *= res_df['long_lower_touch_line_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy() < dc_base_5T      \n","\n","        # ------ ppr ------ #\n","        # pumping_ratio(res_df, config, p1_itv1, p1_period1, p1_period2)  "]},{"cell_type":"markdown","metadata":{"id":"aTV4h3LjTZBp"},"source":["#### dump"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dc49JPmoTaPQ"},"outputs":[],"source":["\n","    \n","    csd_period = 40\n","    res_df = dc_line_v4(res_df, res_df, dc_period=csd_period)\n","    \n","    dc_upper_ = res_df['dc_upper_T{}'.format(csd_period)].to_numpy()    \n","    dc_lower_ = res_df['dc_lower_T{}'.format(csd_period)].to_numpy()  \n","\n","    short_open_res2 *= dc_upper_touch_span == 0\n","    long_open_res2 *= dc_lower_touch_span == 0\n","\n","    # ------ csdbox ------ # --> 결국 dc's upper & lower\n","    if show_detail:\n","      sys_log.warning(\"csdbox\")\n","      # sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","      # sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))\n","      sys_log.warning(\"np.sum(short_open_res2 == 1) : {}\".format(np.sum(short_open_res2 == 1)))\n","      sys_log.warning(\"np.sum(long_open_res2 == 1) : {}\".format(np.sum(long_open_res2 == 1)))\n","      \n","    # olds,\n","    # np.nan - np.nan = np.nan -> vectorize 가능할 것 => xx\n","    # 1. wave_high_prime_idx_ ~ long_open_idx1 의 valid(not_non) 한 idx 를 max_dc_lower 와 min_low 의 비교값으로 채워넣음\n","    # valid_idx = ~(pd.isnull(wave_cu_post_idx_fill_) | pd.isnull(long_open_idx1))\n","    # max_dc_lower_ = [dc_lower_[int(iin):int(iout)].max() for iin, iout in zip(wave_cu_post_idx_fill_, long_open_idx1) if not pd.isnull(iin) if not pd.isnull(iout)]\n","    # min_low = [low[int(iin):int(iout)].min() for iin, iout in zip(wave_high_prime_idx_, long_open_idx1) if not pd.isnull(iin) if not pd.isnull(iout)]\n","    \n","    short_tp_1_, long_tp_1_ = 'short_tp_1_{}'.format(selection_id), 'long_tp_1_{}'.format(selection_id)\n","    short_tp_0_, long_tp_0_ = 'short_tp_0_{}'.format(selection_id), 'long_tp_0_{}'.format(selection_id)\n","    short_tp_gap_, long_tp_gap_ = 'short_tp_gap_{}'.format(selection_id), 'long_tp_gap_{}'.format(selection_id)\n","\n","    short_ep_1_, long_ep_1_ = 'short_ep_1_{}'.format(selection_id), 'long_ep_1_{}'.format(selection_id)\n","    short_ep_0_, long_ep_0_ = 'short_ep_0_{}'.format(selection_id), 'long_ep_0_{}'.format(selection_id)\n","    short_ep_gap_, long_ep_gap_ = 'short_ep_gap_{}'.format(selection_id), 'long_ep_gap_{}'.format(selection_id)\n","\n","    short_epout_1_, long_epout_1_ = 'short_epout_1_{}'.format(selection_id), 'long_epout_1_{}'.format(selection_id)\n","    short_epout_0_, long_epout_0_ = 'short_epout_0_{}'.format(selection_id), 'long_epout_0_{}'.format(selection_id)\n","    short_epout_gap_, long_epout_gap_ = 'short_epout_gap_{}'.format(selection_id), 'long_epout_gap_{}'.format(selection_id)\n","    \n","    # ================== convert unit -> numpy ================== #   \n","    # tp_cols = [short_tp_1_, short_tp_0_, short_tp_gap_, long_tp_1_, long_tp_0_, long_tp_gap_]\n","    # epout_cols = [short_epout_1_, short_epout_0_, short_epout_gap_, long_epout_1_, long_epout_0_, long_epout_gap_]\n","\n","    # short_tp_1, short_tp_0, short_tp_gap, long_tp_1, long_tp_0, long_tp_gap = [res_df[col_].to_numpy() for col_ in tp_cols]\n","    # short_epout_1, short_epout_0, short_epout_gap, long_epout_1, long_epout_0, long_epout_gap = [res_df[col_].to_numpy() for col_ in epout_cols]\n","\n","    if p2_itv1 != \"None\":  # vectorized point2\n","        short_point1_on2_idx = pd.Series(\n","            np.where(res_df['short_wave_point_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)], len_df_range, np.nan)).rolling(point1_to2_period,\n","                                                                                                                                    min_periods=1).max().to_numpy()  # period 내의 max_point1_idx\n","        long_point1_on2_idx = pd.Series(\n","            np.where(res_df['long_wave_point_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)], len_df_range, np.nan)).rolling(point1_to2_period,\n","                                                                                                                                   min_periods=1).max().to_numpy()\n","\n","        short_point2_idx = pd.Series(\n","            np.where(res_df['short_wave_point_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)], len_df_range, np.nan)).to_numpy()\n","        long_point2_idx = pd.Series(\n","            np.where(res_df['long_wave_point_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)], len_df_range, np.nan)).to_numpy()\n","\n","        res_df['short_point_idxgap_{}'.format(selection_id)] = short_point2_idx - short_point1_on2_idx\n","        res_df['long_point_idxgap_{}'.format(selection_id)] = long_point2_idx - long_point1_on2_idx\n","\n","        # ------ p1 & p2 ------ #\n","        short_open_res *= ~np.isnan(res_df['short_point_idxgap_{}'.format(selection_id)].to_numpy())\n","        long_open_res *= ~np.isnan(res_df['long_point_idxgap_{}'.format(selection_id)].to_numpy())\n","\n","        if show_detail:\n","          sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","          sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ p2 amax > p1_idx (long) ------ #\n","        short_open_res *= res_df['short_upper_touch_idx_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)].to_numpy() > short_point1_on2_idx\n","        long_open_res *= res_df['long_lower_touch_idx_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)].to_numpy() > long_point1_on2_idx\n","\n","        if show_detail:\n","          sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","          sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ higher low (long) ------ #\n","        # short_a_line1_on2_ = get_line(short_point1_on2_idx, res_df['short_a_line_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy())\n","        # long_a_line1_on2_ = get_line(long_point1_on2_idx, res_df['long_a_line_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy())\n","\n","        # short_a_line2_ = res_df['short_a_line_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)].to_numpy()\n","        # long_a_line2_ = res_df['long_a_line_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)].to_numpy()\n","\n","        # short_open_res *= short_a_line1_on2_ >= short_a_line2_\n","        # long_open_res *= long_a_line1_on2_ <= long_a_line2_\n","\n","        # print(np.sum(long_open_res == 1))\n","\n","        # ------ higher high (long) ------ #\n","        # short_open_res *= co_roll_low_[:, -2] > co_roll_low_[:, -1]\n","        # long_open_res *= cu_roll_high_[:, -2] < cu_roll_high_[:, -1]\n","\n","        # short_open_res *= co_roll_low_[:, -3] > co_roll_low_[:, -2]\n","        # long_open_res *= cu_roll_high_[:, -3] < cu_roll_high_[:, -2]\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ higher low (long) ------ # \n","        # short_open_res *= co_roll_high_[:, -2] > co_roll_high_[:, -1]\n","        # long_open_res *= cu_roll_low_[:, -2] < cu_roll_low_[:, -1]\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))  \n","\n","        # ------ tf2_base < wave_low ------ #\n","        # short_open_res *= (dc_base_ > co_roll_high_[:, -1])\n","        # long_open_res *= (dc_base_ < cu_roll_low_[:, -1])\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))  \n","\n","        # short_open_res *= (cu_prime_wave_base > cu_prime_dc_base) & (dc_base_ > co_prime_wave_base)\n","        # long_open_res *= (co_prime_wave_base < co_prime_dc_base) & (dc_base_ < cu_prime_wave_base)\n","\n","        short_open_res *= (co_prime_dc_base < co_roll_low_[:, -2])\n","        long_open_res *= (cu_prime_dc_base > cu_roll_high_[:, -2])  #  b1_cu_prime_idx’s tf2_base > b1_high -> b1 이 아님 (error)\n","\n","\n","        res_df[short_epout_1_] = res_df['short_wave_low_{}{}{}'.format(itv, period1, period2)]\n","        res_df[short_epout_0_] = res_df['short_new_wave_high_{}{}{}'.format(itv, period1, period2)]\n","        res_df[long_epout_1_] = res_df['long_wave_high_{}{}{}'.format(itv, period1, period2)]\n","        res_df[long_epout_0_] = res_df['long_new_wave_low_{}{}{}'.format(itv, period1, period2)]\n","        \n","# ------ get candle_lastidx ------ #        \n","        tf_entry = to_itvnum(config.loc_set.point.tf_entry)\n","        b1_candle_shift = np_timeidx % tf_entry + 1\n","        b2_candle_shift = b1_candle_shift + tf_entry\n","        b3_candle_shift = b1_candle_shift + 2 * tf_entry\n","\n","        print(b3_candle_shift)\n","\n","        # bb_upper_ = res_df['bb_upper_{}{}'.format('T', 60)].to_numpy()\n","        # bb_lower_ = res_df['bb_lower_{}{}'.format('T', 60)].to_numpy()\n","        # bb_upper2_ = res_df['bb_upper2_{}{}'.format('T', 60)].to_numpy()\n","        # bb_lower2_ = res_df['bb_lower2_{}{}'.format('T', 60)].to_numpy()\n","        # bb_upper3_ = res_df['bb_upper3_{}{}'.format('T', 60)].to_numpy()\n","        # bb_lower3_ = res_df['bb_lower3_{}{}'.format('T', 60)].to_numpy()\n","\n","        # ------ compare by back_idx  ------ #   \n","        b3_bb_upper_ = res_df['bb_upper_{}{}'.format('T', 60)].shift(b3_candle_shift).to_numpy()\n","        b3_bb_lower_ = res_df['bb_lower_{}{}'.format('T', 60)].shift(b3_candle_shift).to_numpy()\n","        b3_bb_upper2_ = res_df['bb_upper2_{}{}'.format('T', 60)].shift(b3_candle_shift).to_numpy()\n","        b3_bb_lower2_ = res_df['bb_lower2_{}{}'.format('T', 60)].shift(b3_candle_shift).to_numpy()\n","        b3_close = res_df['close'].shift(b3_candle_shift).to_numpy()\n","\n","        b2_bb_upper2_ = res_df['bb_upper2_{}{}'.format('T', 60)].shift(b2_candle_shift).to_numpy()\n","        b2_bb_lower2_ = res_df['bb_lower2_{}{}'.format('T', 60)].shift(b2_candle_shift).to_numpy()\n","        b2_bb_upper3_ = res_df['bb_upper3_{}{}'.format('T', 60)].shift(b2_candle_shift).to_numpy()\n","        b2_bb_lower3_ = res_df['bb_lower3_{}{}'.format('T', 60)].shift(b2_candle_shift).to_numpy()\n","        b2_close = res_df['close'].shift(b2_candle_shift).to_numpy()\n","\n","        b1_bb_upper_ = res_df['bb_upper_{}{}'.format('T', 60)].shift(b1_candle_shift).to_numpy()\n","        b1_bb_lower_ = res_df['bb_lower_{}{}'.format('T', 60)].shift(b1_candle_shift).to_numpy()\n","        b1_bb_upper2_ = res_df['bb_upper2_{}{}'.format('T', 60)].shift(b1_candle_shift).to_numpy()\n","        b1_bb_lower2_ = res_df['bb_lower2_{}{}'.format('T', 60)].shift(b1_candle_shift).to_numpy()\n","        b1_close = res_df['close'].shift(b1_candle_shift).to_numpy()\n"]},{"cell_type":"markdown","metadata":{"id":"HKdUKKl-483N"},"source":["### utils_public"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nzOYWA2kqZ0d"},"outputs":[],"source":["# from funcs.funcs_indicator import *\n","# from funcs.funcs_trader import *\n","# import logging\n","# from ast import literal_eval\n","\n","pd.set_option('mode.chained_assignment',  None)\n","sys_log = logging.getLogger()\n","\n","\n","class OrderSide:\n","    BUY = \"BUY\"\n","    SELL = \"SELL\"\n","    INVALID = None\n","\n","\n","def lvrg_set(res_df, config, open_side, ep_, out_, fee, limit_leverage=50):\n","    selection_id = config.selection_id\n","    if not pd.isnull(out_) and not config.lvrg_set.static_lvrg:\n","        if selection_id in ['v3']:\n","            if open_side == OrderSide.SELL:\n","                loss = out_ / ep_\n","            else:\n","                loss = ep_ / out_\n","        else:  # 이 phase 가 정석, 윗 phase 는 결과가 수익 극대화라 사용함\n","            if open_side == OrderSide.SELL:\n","                loss = ep_ / out_\n","            else:\n","                loss = out_ / ep_\n","\n","        config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(loss - 1 - (fee + config.trader_set.market_fee))\n","\n","    # ------------ leverage rejection ------------ #\n","    # 감당하기 힘든 fluc. 의 경우 진입하지 않음 - dynamic_lvrg 사용 경우\n","    if config.lvrg_set.leverage < 1 and config.lvrg_set.lvrg_rejection:\n","        # if config.lvrg_set.leverage >= 1 and config.lvrg_set.lvrg_rejection:\n","        return None\n","\n","    if not config.lvrg_set.allow_float:\n","        config.lvrg_set.leverage = int(config.lvrg_set.leverage)\n","\n","    config.lvrg_set.leverage = min(limit_leverage, max(config.lvrg_set.leverage, 1))\n","\n","    return config.lvrg_set.leverage\n","\n","\n","def sync_check(df_, config, order_side=\"OPEN\", row_slice=True):\n","    try:\n","        make_itv_list = [m_itv.replace('m', 'T') for m_itv in literal_eval(config.trader_set.itv_list)]\n","        row_list = literal_eval(config.trader_set.row_list)\n","        rec_row_list = literal_eval(config.trader_set.rec_row_list)\n","        offset_list = literal_eval(config.trader_set.offset_list)\n","\n","        assert len(make_itv_list) == len(offset_list), \"length of itv & offset_list should be equal\"\n","        htf_df_list = [to_htf(df_, itv_=itv_, offset=offset_) for itv_idx, (itv_, offset_)\n","                       in enumerate(zip(make_itv_list, offset_list)) if itv_idx != 0]  #\n","        htf_df_list.insert(0, df_)\n","\n","        # for htf_df_ in htf_df_list:\n","        #     print(htf_df_.tail())\n","\n","        #       Todo        #\n","        #        1. row_list calc.\n","        #           a. indi. 를 만들기 위한 최소 period 가 존재하고, 그 indi. 를 사용한 lb_period 가 존재함\n","        #           b. => default_period + lb_period\n","        #               i. from sync_check, public_indi, ep_point2, ep_dur 의 tf 별 max lb_period check\n","        #                   1. default_period + max lb_period check\n","        #                       a. 현재까지 lb_period_list\n","        #                           h_prev_idx (open / close) 60\n","        #                           dc_period 135\n","        #                           zone_dc_period 135\n","\n","        # --------- slicing (in trader phase only) --------- #\n","        #               --> latency 영향도가 높은 곳은 이곳\n","        if row_slice:  # recursive 가 아닌 indi. 의 latency 를 고려한 slicing\n","            df, df_3T, df_5T, df_15T, df_30T, df_H, df_4H = [df_s.iloc[-row_list[row_idx]:].copy() for row_idx, df_s in enumerate(htf_df_list)]\n","            rec_df, rec_df_3T, rec_df_5T, rec_df_15T, rec_df_30T, rec_df_H, rec_df_4H = [df_s.iloc[-rec_row_list[row_idx]:].copy() for row_idx, df_s\n","                                                                                         in\n","                                                                                         enumerate(htf_df_list)]\n","        else:\n","            df, df_3T, df_5T, df_15T, df_30T, df_H, df_4H = htf_df_list\n","            rec_df, rec_df_3T, rec_df_5T, rec_df_15T, rec_df_30T, rec_df_H, rec_df_4H = htf_df_list\n","\n","        # --------- add indi. --------- #\n","\n","        #        1. 필요한 indi. 는 enlist_epouttp & mr_check 보면서 삽입\n","        #        2. min use_rows 계산을 위해서, tf 별로 gathering 함        #\n","        # start_0 = time.time()\n","\n","        # ------ T ------ #\n","        # df = dc_line(df, None, 'T', dc_period=20)\n","        # df = bb_line(df, None, 'T')\n","        #\n","        # ------ 3T ------ #\n","        # df = dc_line(df, df_3T, '3T')\n","\n","        # ------ 5T ------ #\n","        h_candle_v3(res_df, '5T')\n","        df = dc_line(df, df_5T, '5T')\n","        df = bb_line(df, df_5T, '5T')\n","        #\n","        # ------ 15T ------ #\n","        h_candle_v3(res_df, '15T')\n","        df = dc_line(df, df_15T, '15T')\n","        df = bb_line(df, df_15T, '15T')\n","        #\n","        # ------ 30T ------ #\n","        # df = bb_line(df, df_30T, '30T')\n","        #\n","        # ------ H ------ #\n","        h_candle_v3(res_df, 'H')\n","        # df = dc_line(df, df_H, 'H')\n","\n","        # ------ 4H ------ #\n","        # df = bb_line(df, df_4H, '4H')\n","\n","        # rec_df['rsi_1m'] = rsi(rec_df, 14)  # Todo - recursive, 250 period\n","        # df = df.join(to_lower_tf_v2(df, rec_df.iloc[:, [-1]], [-1], backing_i=0), how='inner')  # <-- join same_tf manual\n","        #\n","        # if order_side in [\"OPEN\"]:\n","        #     rec_df_5T['ema_5T'] = ema(rec_df_5T['close'], 195)  # Todo - recursive, 1100 period (5T)\n","        #     df = df.join(to_lower_tf_v2(df, rec_df_5T, [-1]), how='inner')\n","\n","    except Exception as e:\n","        sys_log.error(\"error in sync_check :\", e)\n","    else:\n","        return df\n","\n","\n","def public_indi(res_df, config, np_timeidx, order_side=\"OPEN\"):\n","\n","    selection_id = config.selection_id\n","\n","    wave_itv1 = config.tr_set.wave_itv1\n","    wave_itv2 = config.tr_set.wave_itv2\n","    wave_period1 = config.tr_set.wave_period1\n","    wave_period2 = config.tr_set.wave_period2\n","    roll_hl_cnt = 3\n","  \n","    # assert to_itvnum(wave_itv1) > 1  # wave_itv2 == 'T' and \n","    # ====== public ====== #\n","    # res_df = wave_range_dcbase_v11_3(res_df, config, over_period=2) \n","    \n","    # ------------ wave_period1 ------------ #\n","    if to_itvnum(wave_itv1) > 1: \n","      offset = '1h' if wave_itv1 != 'D' else '9h'\n","      htf_df = to_htf(res_df, wave_itv1, offset=offset)\n","      htf_df = wave_range_cci_v3(htf_df, wave_period1)\n","      \n","      # cols = list(htf_df.columns[-15:-4])  # except idx col\n","      cols = list(htf_df.columns[4:])  # 15T_ohlc 를 제외한 wave_range_cci_v3 로 추가된 cols, 다 넣어버리기 (추후 혼란 방지)\n","\n","      valid_co_prime_idx, valid_cu_prime_idx, roll_co_idx_arr, roll_cu_idx_arr = roll_wave_hl_idx_v5(htf_df, wave_itv1, wave_period1, roll_hl_cnt=roll_hl_cnt)\n","\n","      htf_df = get_roll_wave_data_v2(htf_df, valid_co_prime_idx, roll_co_idx_arr, 'wave_high_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","      cols += list(htf_df.columns[-roll_hl_cnt:])\n","\n","      htf_df = get_roll_wave_data_v2(htf_df, valid_cu_prime_idx, roll_cu_idx_arr, 'wave_low_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","      cols += list(htf_df.columns[-roll_hl_cnt:])\n","\n","      htf_df = wave_range_ratio_v4_2(htf_df, wave_itv1, wave_period1, roll_hl_cnt=roll_hl_cnt)\n","      cols += list(htf_df.columns[-4:])\n","\n","      # ------ 필요한 cols 만 join (htf's idx 정보는 ltf 와 sync. 가 맞지 않음 - join 불가함) ------ #\n","      res_df.drop(cols, inplace=True, axis=1, errors='ignore')\n","      res_df = res_df.join(to_lower_tf_v3(res_df, htf_df, cols, backing_i=1), how='inner')\n","    else:\n","      res_df = wave_range_cci_v3(res_df, wave_period1)\n","\n","      valid_co_prime_idx, valid_cu_prime_idx, roll_co_idx_arr, roll_cu_idx_arr = roll_wave_hl_idx_v5(res_df, wave_itv1, wave_period1, roll_hl_cnt=roll_hl_cnt)\n","      res_df = get_roll_wave_data_v2(res_df, valid_co_prime_idx, roll_co_idx_arr, 'wave_high_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","      res_df = get_roll_wave_data_v2(res_df, valid_cu_prime_idx, roll_cu_idx_arr, 'wave_low_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","\n","      res_df = wave_range_ratio_v4_2(res_df, wave_itv1, wave_period1, roll_hl_cnt=roll_hl_cnt)\n","\n","    # ------------ wave_period2 ------------ #\n","    if wave_itv1 != wave_itv2 or wave_period1 != wave_period2:\n","      assert wave_itv2 == 'T'\n","      \n","      res_df = wave_range_cci_v3(res_df, wave_period2)\n","\n","      valid_co_prime_idx, valid_cu_prime_idx, roll_co_idx_arr, roll_cu_idx_arr = roll_wave_hl_idx_v5(res_df, wave_itv2, wave_period2, roll_hl_cnt=roll_hl_cnt)\n","      res_df = get_roll_wave_data_v2(res_df, valid_co_prime_idx, roll_co_idx_arr, 'wave_high_fill_{}{}'.format(wave_itv2, wave_period2), roll_hl_cnt)\n","      res_df = get_roll_wave_data_v2(res_df, valid_cu_prime_idx, roll_cu_idx_arr, 'wave_low_fill_{}{}'.format(wave_itv2, wave_period2), roll_hl_cnt)\n","\n","      res_df = wave_range_ratio_v4_2(res_df, wave_itv2, wave_period2, roll_hl_cnt=roll_hl_cnt)\n","\n","\n","    # ------ wave_loc_pct (bb) ------ #\n","    # res_df = wave_loc_pct_v2(res_df, config, 'T', 60)\n","    # res_df = wave_loc_pct(res_df, config, 'T', 60)\n","\n","    # future_cols = ['cu_es_15T1', 'co_es_15T1', 'upper_wick_ratio_15T', 'lower_wick_ratio_15T']\n","    # itv_list = ['15T', '15T', '15T', '15T']\n","    # res_df = backing_future_data(res_df, future_cols, itv_list)\n","\n","    # ====== intervaly ====== #    \n","    # ------ 5T ------ #\n","    # res_df = dc_level(res_df, '5T', 1)\n","    # res_df = bb_level(res_df, '5T', 1)\n","\n","    # res_df = st_level(res_df, '5T', 1)\n","\n","    # ------ 15T ------ #\n","    # res_df = dc_level(res_df, '15T', 1)\n","    # res_df = bb_level(res_df, '15T', 1)\n","    # res_df = dtk_plot(res_df, dtk_itv2='15T', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line, np_timeidx=np_timeidx)\n","\n","    # res_df = st_level(res_df, '15T', 1)\n","\n","    # ------ 30T ------ #\n","    # res_df = dc_level(res_df, '30T', 1)\n","    # res_df = bb_level(res_df, '30T', 1)\n","    # res_df = st_level(res_df, '30T', 1)\n","\n","    # ------ H ------ #\n","    # res_df = bb_level(res_df, 'H', 1)\n","\n","    # ------ 4H ------ #\n","    # res_df = bb_level(res_df, '4H', 1)\n","\n","    # res_df['dc_upper_v2'.format(selection_id)] = res_df['high'].rolling(config.loc_set.zone.dc_period).max()   # Todo, consider dc_period\n","    # res_df['dc_lower_v2'.format(selection_id)] = res_df['low'].rolling(config.loc_set.zone.dc_period).min()\n","\n","    # res_df['zone_dc_upper_v2'.format(selection_id)] = res_df['high'].rolling(config.loc_set.zone.zone_dc_period).max()   # Todo, consider zone_dc_period\n","    # res_df['zone_dc_lower_v2'.format(selection_id)] = res_df['low'].rolling(config.loc_set.zone.zone_dc_period).min()\n","\n","    # if order_side in [\"OPEN\"]:\n","        # candle_score_v3(res_df, 'T', unsigned=False)\n","        # candle_score_v3(res_df, config.loc_set.point1.exp_itv, unsigned=False)\n","\n","    #     temp indi.    #\n","    # res_df[\"ma30_1m\"] = res_df['close'].rolling(30).mean()\n","    # res_df[\"ma60_1m\"] = res_df['close'].rolling(60).mean()\n","    # res_df = dtk_plot(res_df, dtk_itv2='15T', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line, np_timeidx=np_timeidx)\n","\n","    return res_df\n","\n","\n","def expiry_v0(res_df, config, op_idx, e_j, tp_j, np_datas, open_side):\n","    high, low = np_datas\n","    selection_id = config.selection_id\n","    expire = 0\n","\n","    if config.tr_set.expire_tick != \"None\":\n","        if e_j - op_idx >= config.tr_set.expire_tick:\n","            expire = 1\n","\n","    if config.tr_set.expire_k1 != \"None\":\n","        if open_side == OrderSide.SELL:\n","            short_tp_1_ = res_df['short_tp_1_{}'.format(selection_id)].to_numpy()  # id 에 따라 dynamic 변수라 이곳에서 numpy 화 진행\n","            short_tp_gap_ = res_df['short_tp_gap_{}'.format(selection_id)].to_numpy()\n","            if low[e_j] <= short_tp_1_[tp_j] - short_tp_gap_[tp_j] * config.tr_set.expire_k1:\n","                expire = 1\n","        else:\n","            long_tp_1_ = res_df['long_tp_1_{}'.format(selection_id)].to_numpy()  # iloc 이 빠를까, to_numpy() 가 빠를까  # 3.94 ms --> 5.34 ms (iloc)\n","            long_tp_gap_ = res_df['long_tp_gap_{}'.format(selection_id)].to_numpy()\n","            if high[e_j] >= long_tp_1_[tp_j] + long_tp_gap_[tp_j] * config.tr_set.expire_k1:\n","                expire = 1\n","\n","    return expire\n","\n","\n","def expiry(res_df, config, op_idx, e_j, tp_j, np_datas, open_side):\n","    high, low = np_datas\n","    selection_id = config.selection_id\n","    expire = 0\n","\n","    if config.tr_set.expire_tick != \"None\":\n","        if e_j - op_idx >= config.tr_set.expire_tick:\n","            expire = 1\n","\n","    if config.tr_set.expire_k1 != \"None\":\n","        if open_side == OrderSide.SELL:\n","            short_tp_ = res_df['short_tp_{}'.format(selection_id)].to_numpy()  # id 에 따라 dynamic 변수라 이곳에서 numpy 화 진행\n","            short_tp_gap_ = res_df['short_tp_gap_{}'.format(selection_id)].to_numpy()\n","            if low[e_j] <= short_tp_[tp_j] + short_tp_gap_[tp_j] * config.tr_set.expire_k1:\n","                expire = 1\n","        else:\n","            long_tp_ = res_df['long_tp_{}'.format(selection_id)].to_numpy()  # iloc 이 빠를까, to_numpy() 가 빠를까  # 3.94 ms --> 5.34 ms (iloc)\n","            long_tp_gap_ = res_df['long_tp_gap_{}'.format(selection_id)].to_numpy()\n","            if high[e_j] >= long_tp_[tp_j] - long_tp_gap_[tp_j] * config.tr_set.expire_k1:\n","                expire = 1\n","\n","    return expire\n","\n","\n","# def expiry_p1(res_df, config, op_idx1, i, op_idx2, np_datas, open_side):\n","def expiry_p1(res_df, config, op_idx1, op_idx2, tp1, tp0, tp_gap, np_datas, open_side):\n","    high, low = np_datas\n","    selection_id = config.selection_id\n","    expire = 0\n","    touch_idx = None\n","\n","    # if config.tr_set.expire_tick != \"None\":\n","    #     if e_j - op_idx >= config.tr_set.expire_tick:\n","    #         expire = 1\n","\n","    # Todo, p1's tp1, 0 cannot be vectorized\n","    #   a. expiration 의 조건은 wave1, 0 의 broken\n","    idx_range = np.arange(op_idx1, op_idx2)\n","    if config.tr_set.expire_k1 != \"None\":\n","        if open_side == OrderSide.SELL:\n","            touch_idx = np.where((low[op_idx1:op_idx2] <= tp1 + tp_gap * config.tr_set.expire_k1) | \\\n","                                 (high[op_idx1:op_idx2] >= tp0 - tp_gap * config.tr_set.expire_k1),\n","                                 idx_range, np.nan)\n","            if np.sum(~np.isnan(touch_idx)) > 0:  # touch 가 존재하면, \n","            # if low[op_idx1:op_idx2].min() <= tp1 + tp_gap * config.tr_set.expire_k1 or \\\n","            # high[op_idx1:op_idx2].max() >= tp0 - tp_gap * config.tr_set.expire_k1:   # p2_box loc. 이 있어서, op_idx2 + 1 안함\n","                expire = 1\n","        else:\n","            touch_idx = np.where((high[op_idx1:op_idx2] >= tp1 - tp_gap * config.tr_set.expire_k1) | \\\n","                                  (low[op_idx1:op_idx2] <= tp0 + tp_gap * config.tr_set.expire_k1),\n","                                  idx_range, np.nan)\n","            if np.sum(~np.isnan(touch_idx)) > 0:                                  \n","            # if high[op_idx1:op_idx2].max() >= tp1 - tp_gap * config.tr_set.expire_k1 or \\\n","            # low[op_idx1:op_idx2].min() <= tp0 + tp_gap * config.tr_set.expire_k1:\n","                expire = 1\n","\n","    return expire, np.nanmin(touch_idx)\n","\n","\n","def expiry_p2(res_df, config, op_idx, e_j, wave1, wave2, np_datas, open_side):\n","    high, low = np_datas\n","    selection_id = config.selection_id\n","    expire = 0\n","\n","    if config.tr_set.expire_tick != \"None\":\n","        if e_j - op_idx >= config.tr_set.expire_tick:\n","            expire = 1\n","\n","    if config.tr_set.expire_k2 != \"None\":\n","        if open_side == OrderSide.SELL:\n","            if low[e_j] <= wave1 + wave2 * config.tr_set.expire_k2:\n","                expire = 1\n","        else:\n","            if high[e_j] >= wave1 - wave2 * config.tr_set.expire_k2:\n","                expire = 1\n","\n","    return expire\n","\n","\n","# def ep_loc_point2_v2(res_df, config, i, out_j, side=OrderSide.SELL):\n","#     allow_ep_in = 1\n","#     if config.selection_id in ['v5_2']:\n","#         if side == OrderSide.SELL:\n","#             dc_upper_T = res_df['dc_upper_T'].to_numpy()\n","#             dc_upper_15T = res_df['dc_upper_15T'].to_numpy()\n","#             allow_ep_in *= (dc_upper_T[i - 1] <= dc_upper_15T[i]) & \\\n","#                            (dc_upper_15T[i - 1] != dc_upper_15T[i])\n","#         else:\n","#             dc_lower_T = res_df['dc_lower_T'].to_numpy()\n","#             dc_lower_15T = res_df['dc_lower_15T'].to_numpy()\n","#             allow_ep_in *= (dc_lower_T[i - 1] >= dc_lower_15T[i]) & \\\n","#                            (dc_lower_15T[i - 1] != dc_lower_15T[i])\n","\n","#     if config.selection_id in ['v3_4']:\n","#         wick_score_list = literal_eval(config.ep_set.point2.wick_score_list)\n","#         wick_scores = [res_df['wick_score_{}'.format(s_itv)].to_numpy() for s_itv in literal_eval(config.ep_set.point2.score_itv_list)]\n","#         close = res_df['close'].to_numpy()\n","#         if side == OrderSide.SELL:\n","#             sup_T = res_df['sup_T'].to_numpy()\n","#             allow_ep_in *= close[i] < sup_T[i - 1]\n","#             if len(wick_score_list) != 0:\n","#                 allow_ep_in *= wick_scores[0][i] < -wick_score_list[0]\n","#         else:\n","#             resi_T = res_df['resi_T'].to_numpy()\n","#             allow_ep_in *= close[i] > resi_T[i - 1]\n","#             if len(wick_score_list) != 0:\n","#                 allow_ep_in *= wick_scores[0][i] > wick_score_list[0]\n","\n","#     if allow_ep_in:\n","#         out_j = i\n","#     return allow_ep_in, out_j\n","\n","\n","# vectorized calc.\n","# multi-stem 에 따라 dynamic vars.가 입력되기 때문에 class 내부 vars. 로 종속시키지 않음\n","def ep_loc_p1_v3(res_df, config, np_timeidx, show_detail=True, ep_loc_side=OrderSide.SELL):\n","    # ------- param init ------- #\n","    selection_id = config.selection_id\n","    c_i = config.trader_set.complete_index\n","    len_df = len(res_df)\n","    mr_res = np.ones(len_df)\n","    zone_arr = np.full(len_df, 'n')\n","\n","    # ------ process 한번에 처리해서 param_check 만 ver. 별로 하면 될 것 ------ #\n","    #     => public_indi() 가 될 것\n","    #     1. 사용한 param 정보와 matching 된 data 병렬로 나열 logging 될 것\n","    tp_fee, out_fee = calc_tp_out_fee_v2(config)\n","\n","    # ============ tr_thresh ============ #  # vectorize allow only for p1_hhm\n","    if config.loc_set.point1.short_tr_thresh != \"None\" and not config.tr_set.check_hlm:\n","        if ep_loc_side == OrderSide.SELL:\n","            short_tr_ = res_df['short_tr_{}'.format(selection_id)].to_numpy()\n","            mr_res *= short_tr_ >= config.loc_set.point1.short_tr_thresh\n","            # mr_res *= short_tr_ <= config.loc_set.point1.short_tr_thresh + 0.1\n","            if show_detail:\n","                sys_log.warning(\n","                    \"short_tr_ >= short_tr_thresh : {:.5f} {:.5f} ({})\".format(short_tr_[c_i], config.loc_set.point1.short_tr_thresh, mr_res[c_i]))\n","        else:\n","            long_tr_ = res_df['long_tr_{}'.format(selection_id)].to_numpy()\n","            mr_res *= long_tr_ >= config.loc_set.point1.long_tr_thresh\n","            # mr_res *= long_tr_ <= config.loc_set.point1.long_tr_thresh + 0.1\n","            if show_detail:\n","                sys_log.warning(\n","                    \"long_tr_ >= long_tr_thresh : {:.5f} {:.5f} ({})\".format(long_tr_[c_i], config.loc_set.point1.long_tr_thresh, mr_res[c_i]))\n","\n","    # ============ spread - independent to tr_set ============ #  --> Todo, 사용 안하고 싶은 wave_point1\n","    if config.loc_set.point1.short_spread != \"None\":\n","        if selection_id in ['v3']:\n","            if ep_loc_side == OrderSide.SELL:\n","                bb_base_5T = res_df['bb_base_5T'].to_numpy()  # to_numpy() 는 ep_loc 에서 진행됨\n","                bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","                short_spread = (bb_base_5T - bb_lower_5T - tp_fee * bb_base_5T) / (bb_base_5T - bb_lower_5T + out_fee * bb_base_5T)\n","                mr_res *= short_spread >= config.loc_set.point1.short_spread\n","                if show_detail:\n","                    sys_log.warning(\n","                        \"short_spread >= config.loc_set.point1.short_spread : {:.5f} {:.5f} ({})\".format(short_spread[c_i], config.loc_set.point1.short_spread, mr_res[c_i]))\n","            else:\n","                bb_upper_5T = res_df['bb_upper_5T'].to_numpy()\n","                dc_lower_5T = res_df['dc_lower_5T'].to_numpy()\n","                # mr_res *= (bb_base_5T - dc_lower_5T - tp_fee * bb_upper_5T) / (bb_base_5T - dc_lower_5T + out_fee * bb_base_5T) >= config.loc_set.point1.long_spread\n","                long_spread = (bb_upper_5T - dc_lower_5T - tp_fee * bb_upper_5T) / (bb_upper_5T - dc_lower_5T + out_fee * bb_upper_5T)\n","                mr_res *= long_spread >= config.loc_set.point1.long_spread\n","                if show_detail:\n","                    sys_log.warning(\n","                        \"long_spread >= config.loc_set.point1.long_spread : {:.5f} {:.5f} ({})\".format(long_spread[c_i], config.loc_set.point1.long_spread, mr_res[c_i]))                  \n","\n","    # ============ point1 ratios ============ #\n","    # ------ wave_range_ratio ------ #\n","    if config.loc_set.point1.cu_wrr_21 != \"None\":   # for excessive range rejection         \n","      wave_itv1 = config.tr_set.wave_itv1\n","      wave_period1 = config.tr_set.wave_period1\n","      co_wrr_21_ = res_df['co_wrr_21_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      cu_wrr_21_ = res_df['cu_wrr_21_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= cu_wrr_21_ <= config.loc_set.point1.cu_wrr_21\n","        mr_res *= cu_wrr_21_ >= config.loc_set.point1.cu_wrr_21 - 0.2\n","        if show_detail:\n","            sys_log.warning(\"cu_wrr_21_ <= config.loc_set.point1.cu_wrr_21 : {:.5f} {:.5f} ({})\".format(cu_wrr_21_[c_i], config.loc_set.point1.cu_wrr_21, mr_res[c_i]))\n","      else:\n","        mr_res *= co_wrr_21_ <= config.loc_set.point1.co_wrr_21\n","        mr_res *= co_wrr_21_ >= config.loc_set.point1.co_wrr_21 - 0.2\n","        if show_detail:\n","            sys_log.warning(\"co_wrr_21_ <= config.loc_set.point1.co_wrr_21 : {:.5f} {:.5f} ({})\".format(co_wrr_21_[c_i], config.loc_set.point1.co_wrr_21, mr_res[c_i]))\n","\n","    if config.loc_set.point1.wrr_32 != \"None\":            \n","      wave_itv1 = config.tr_set.wave_itv1\n","      wave_period1 = config.tr_set.wave_period1\n","      co_wrr_32_ = res_df['co_wrr_32_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      cu_wrr_32_ = res_df['cu_wrr_32_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= cu_wrr_32_ <= config.loc_set.point1.wrr_32  #  + 0.1  # 0.1 0.05\n","        # mr_res *= cu_wrr_32_ >= config.loc_set.point1.wrr_32 - 0.1\n","        if show_detail:\n","            sys_log.warning(\"cu_wrr_32_ <= config.loc_set.point1.wrr_32 : {:.5f} {:.5f} ({})\".format(cu_wrr_32_[c_i], config.loc_set.point1.wrr_32, mr_res[c_i]))\n","      else:\n","        mr_res *= co_wrr_32_ <= config.loc_set.point1.wrr_32 # + 0.1  # 0.1 0.05\n","        # mr_res *= co_wrr_32_ >= config.loc_set.point1.wrr_32 - 0.1\n","        if show_detail:\n","            sys_log.warning(\"co_wrr_32_ <= config.loc_set.point1.wrr_32 : {:.5f} {:.5f} ({})\".format(co_wrr_32_[c_i], config.loc_set.point1.wrr_32, mr_res[c_i]))\n","\n","    # ------ enough_space - Todo, future_data ------ #\n","    if config.loc_set.point1.co_es != \"None\":      \n","      itv, period1 = config.tr_set.p1_itv1, config.tr_set.p1_period1 \n","      b1_cu_es_ = res_df['b1_cu_es_{}{}'.format(itv, period1)].to_numpy()\n","      b1_co_es_ = res_df['b1_co_es_{}{}'.format(itv, period1)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= b1_co_es_ >= config.loc_set.point1.co_es\n","        mr_res *= b1_co_es_ <= config.loc_set.point1.co_es + 2\n","        if show_detail:\n","            sys_log.warning(\"b1_co_es_ >= config.loc_set.point1.co_es : {:.5f} {:.5f} ({})\".format(b1_co_es_[c_i], config.loc_set.point1.co_es, mr_res[c_i]))\n","      else:\n","        mr_res *= b1_cu_es_ >= config.loc_set.point1.cu_es\n","        mr_res *= b1_cu_es_ <= config.loc_set.point1.cu_es + 1\n","        if show_detail:\n","            sys_log.warning(\"b1_cu_es_ >= config.loc_set.point1.cu_es : {:.5f} {:.5f} ({})\".format(b1_cu_es_[c_i], config.loc_set.point1.cu_es, mr_res[c_i]))\n","\n","    # ------------ wick_ratio - Todo, future_data ------------ #\n","    # if config.loc_set.point1.short_wick_ratio != \"None\":\n","    #   b1_upper_wick_ratio_ = res_df['b1_upper_wick_ratio_{}'.format(config.loc_set.point1.wick_itv)].to_numpy()\n","    #   b1_lower_wick_ratio_ = res_df['b1_lower_wick_ratio_{}'.format(config.loc_set.point1.wick_itv)].to_numpy()      \n","    #   if ep_loc_side == OrderSide.SELL:\n","    #       # mr_res *= b1_upper_wick_ratio_ >= config.loc_set.point1.short_wick_ratio\n","    #       mr_res *= b1_lower_wick_ratio_ >= config.loc_set.point1.short_wick_ratio\n","    #       if show_detail:\n","    #           sys_log.warning(\"b1_lower_wick_ratio_ >= config.loc_set.point1.short_wick_ratio : {:.5f} {:.5f} ({})\".format(b1_lower_wick_ratio_[c_i], config.loc_set.point1.short_wick_ratio, mr_res[c_i]))\n","    #   else:\n","    #       # mr_res *= b1_lower_wick_ratio_ >= config.loc_set.point1.long_wick_ratio\n","    #       mr_res *= b1_upper_wick_ratio_ >= config.loc_set.point1.long_wick_ratio\n","    #       if show_detail:\n","    #           sys_log.warning(\"b1_upper_wick_ratio_ >= config.loc_set.point1.long_wick_ratio : {:.5f} {:.5f} ({})\".format(b1_upper_wick_ratio_[c_i], config.loc_set.point1.long_wick_ratio, mr_res[c_i]))\n","\n","    # ------ candle_range_ratio - Todo, future_data ------ #\n","    # if config.loc_set.point1.crr != \"None\":   \n","    #   tf_entry = to_itvnum(config.loc_set.point1.tf_entry)\n","    #   b1_crr_ = res_df['crr_{}'.format(config.loc_set.point1.tf_entry)].shift(tf_entry).to_numpy()\n","    #   mr_res *= b1_crr_ >= config.loc_set.point1.crr\n","    #   if show_detail:\n","    #       sys_log.warning(\"b1_crr_ >= config.loc_set.point1.crr : {:.5f} {:.5f} ({})\".format(b1_crr_[c_i], config.loc_set.point1.crr, mr_res[c_i]))\n","    \n","    # ------ dc_over_body_ratio ------ #\n","    if config.loc_set.point1.dbr != \"None\":\n","      b1_lwdbr = res_df['b1_lwdbr'].to_numpy()\n","      b1_updbr = res_df['b1_updbr'].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:        \n","        mr_res *= b1_lwdbr >= config.loc_set.point1.dbr\n","        if show_detail:\n","            sys_log.warning(\n","                \"b1_lwdbr >= config.loc_set.point1.dbr : {:.5f} {:.5f} ({})\".format(b1_lwdbr[c_i], config.loc_set.point1.dbr, mr_res[c_i]))\n","      else:\n","        mr_res *= b1_updbr >= config.loc_set.point1.dbr\n","        if show_detail:\n","            sys_log.warning(\n","                \"b1_updbr >= config.loc_set.point1.dbr : {:.5f} {:.5f} ({})\".format(b1_updbr[c_i], config.loc_set.point1.dbr, mr_res[c_i]))\n","            \n","    if config.loc_set.point1.dbr2 != \"None\":\n","      b1_lwdbr = res_df['b1_lwdbr'].to_numpy()\n","      b1_updbr = res_df['b1_updbr'].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:    \n","        mr_res *= b1_updbr >= config.loc_set.point1.dbr2\n","        if show_detail:\n","            sys_log.warning(\n","                \"b1_updbr >= config.loc_set.point1.dbr2 : {:.5f} {:.5f} ({})\".format(b1_updbr[c_i], config.loc_set.point1.dbr2, mr_res[c_i]))\n","      else:\n","        mr_res *= b1_lwdbr >= config.loc_set.point1.dbr2\n","        if show_detail:\n","            sys_log.warning(\n","                \"b1_lwdbr >= config.loc_set.point1.dbr2 : {:.5f} {:.5f} ({})\".format(b1_lwdbr[c_i], config.loc_set.point1.dbr2, mr_res[c_i]))\n","\n","    # ------ wick_body_ratio ------ #\n","    if config.loc_set.point1.wbr != \"None\":\n","        wave_body_ratio = res_df['wave_body_ratio'].to_numpy()\n","        mr_res *= wave_body_ratio >= config.loc_set.point1.wbr\n","        if show_detail:\n","            sys_log.warning(\n","                \"wave_body_ratio >= config.loc_set.point1.wbr : {:.5f} {:.5f} ({})\".format(wave_body_ratio[c_i], config.loc_set.point1.wbr, mr_res[c_i]))\n","            \n","    # ------ body_rel_ratio ------ #\n","    if config.loc_set.point1.brr != \"None\":\n","        body_rel_ratio_ = res_df['body_rel_ratio_{}'.format(config.loc_set.point1.tf_entry)].to_numpy()\n","        mr_res *= body_rel_ratio_ <= config.loc_set.point1.brr\n","        if show_detail:\n","            sys_log.warning(\n","                \"body_rel_ratio_ <= config.loc_set.point1.brr : {:.5f} {:.5f} ({})\".format(body_rel_ratio_[c_i], config.loc_set.point1.brr, mr_res[c_i]))\n","\n","    # ------ pumping_ratio ------ #\n","    if config.loc_set.point1.ppr != \"None\":\n","      if ep_loc_side == OrderSide.SELL:\n","        short_ppr_ = res_df['short_ppr_{}'.format(selection_id)].to_numpy()\n","        mr_res *= short_ppr_ >= config.loc_set.point1.ppr\n","        if show_detail:\n","            sys_log.warning(\"short_ppr_ >= config.loc_set.point1.ppr : {:.5f} {:.5f} ({})\".format(short_ppr_[c_i], config.loc_set.point1.ppr, mr_res[c_i]))\n","      else:\n","        long_ppr_ = res_df['long_ppr_{}'.format(selection_id)].to_numpy()\n","        mr_res *= long_ppr_ >= config.loc_set.point1.ppr\n","        if show_detail:\n","            sys_log.warning(\"long_ppr_ >= config.loc_set.point1.ppr : {:.5f} {:.5f} ({})\".format(long_ppr_[c_i], config.loc_set.point1.ppr, mr_res[c_i]))\n"," \n","    # ============ rtc_zone  ============ #  --> Todo, 사용 안하고 싶은 wave_dur., 추후 zone 으로 옮길 것\n","    # ------ dtk ------ #\n","    if config.loc_set.zone.dt_k != \"None\":\n","        # ------ dc_v2 ------ #\n","        dc_lower_v2 = res_df['dc_lower_v2'.format(selection_id)].to_numpy()\n","        short_dtk_1_ = res_df['short_dtk_1_{}'.format(selection_id)].to_numpy() - \\\n","                       res_df['short_dtk_gap_{}'.format(selection_id)].to_numpy() * config.loc_set.zone.dt_k\n","        dc_upper_v2 = res_df['dc_upper_v2'.format(selection_id)].to_numpy()\n","        long_dtk_1_ = res_df['long_dtk_1_{}'.format(selection_id)].to_numpy() + \\\n","                      res_df['long_dtk_gap_{}'.format(selection_id)].to_numpy() * config.loc_set.zone.dt_k\n","        if ep_loc_side == OrderSide.SELL:\n","            mr_res *= dc_lower_v2 >= short_dtk_1_\n","            if show_detail:\n","                sys_log.warning(\n","                    \"dc_lower_v2 >= short_dtk_1_ : {:.5f} {:.5f} ({})\".format(dc_lower_v2[c_i], short_dtk_1_[c_i], mr_res[c_i]))\n","        else:\n","            mr_res *= dc_upper_v2 <= long_dtk_1_\n","            if show_detail:\n","                sys_log.warning(\n","                    \"dc_upper_v2 <= long_dtk_1_ : {:.5f} {:.5f} ({})\".format(dc_upper_v2[c_i], long_dtk_1_[c_i], mr_res[c_i]))\n","                \n","    # ============ zone ============ #\n","    # ------ config var. 이 등록되지 않은 dur. 은 selection_id 으로 조건문을 나눔 (lvrg_set 과 동일) ------ #\n","    if config.loc_set.zone.use_zone:\n","      # ------ bb_base uptrend ------ #\n","      bb_base_T100 = res_df['bb_base_T100'].to_numpy()\n","      b1_bb_base_T100 = res_df['bb_base_T100'].shift(1).to_numpy()\n","\n","      lb_period = config.loc_set.zone.bb_trend_period\n","      bb_base_downtrend = pd.Series(b1_bb_base_T100 < bb_base_T100).rolling(lb_period).sum().to_numpy() == 0\n","      bb_base_uptrend = pd.Series(b1_bb_base_T100 > bb_base_T100).rolling(lb_period).sum().to_numpy() == 0\n","\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= bb_base_downtrend\n","        if show_detail:\n","            sys_log.warning(\"bb_base_downtrend : {:.5f} ({})\".format(bb_base_downtrend[c_i], mr_res[c_i]))       \n","      else:\n","        mr_res *= bb_base_uptrend\n","        if show_detail:\n","            sys_log.warning(\"bb_base_uptrend : {:.5f} ({})\".format(bb_base_uptrend[c_i], mr_res[c_i]))    \n","\n","    # -------------- zoned tr_set - post_work -------------- #\n","    if config.tr_set.c_ep_gap != \"None\" or config.tr_set.t_out_gap != \"None\":\n","        #       by zone_dtk       #\n","        #         c_zone        #\n","        zone_dc_upper_v2_ = res_df['zone_dc_upper_v2'.format(selection_id)].to_numpy()\n","        long_dtk_plot_1 = res_df['long_dtk_plot_1'].to_numpy() + res_df['long_dtk_plot_gap'].to_numpy() * config.loc_set.zone.zone_dt_k\n","        zone_dc_lower_v2_ = res_df['zone_dc_lower_v2'.format(selection_id)].to_numpy()\n","        short_dtk_plot_1 = res_df['short_dtk_plot_1'].to_numpy() - res_df['short_dtk_plot_gap'].to_numpy() * config.loc_set.zone.zone_dt_k\n","        if ep_loc_side == OrderSide.SELL:\n","            zone_res = zone_dc_upper_v2_ > long_dtk_plot_1  # mr_res 와는 별개임\n","            pos = 'short'\n","        else:\n","            zone_res = zone_dc_lower_v2_ < short_dtk_plot_1\n","            pos = 'long'\n","\n","        # static 여부에 따른 vectorized adj. - dynamic 은 vectorize 불가\n","        if config.ep_set.static_ep and config.tr_set.c_ep_gap != \"None\":\n","            res_df['{}_ep_{}'.format(pos, selection_id)][zone_res] = res_df['{}_ep2_{}'.format(pos, selection_id)][zone_res]\n","        if config.out_set.static_out and config.tr_set.t_out_gap != \"None\":\n","            res_df['{}_out_{}'.format(pos, selection_id)][~zone_res] = res_df['{}_out2_{}'.format(pos, selection_id)][\n","                ~zone_res]  # t_zone 에 대한 out2 setting\n","        zone_arr = np.where(zone_res == 1, 'c', 't')\n","\n","    return mr_res, zone_arr  # mr_res 의 True idx 가 open signal\n","\n","\n","def ep_loc_p2_v3(res_df, config, np_timeidx, show_detail=True, ep_loc_side=OrderSide.SELL):\n","    # ------- param init ------- #\n","    selection_id = config.selection_id\n","    c_i = config.trader_set.complete_index\n","    len_df = len(res_df)\n","    mr_res = np.ones(len_df)\n","    zone_arr = np.full(len_df, 'n')\n","\n","    # ------ process 한번에 처리해서 param_check 만 ver. 별로 하면 될 것 ------ #\n","    #     => public_indi() 가 될 것\n","    #     1. 사용한 param 정보와 matching 된 data 병렬로 나열 logging 될 것\n","    # tp_fee, out_fee = calc_tp_out_fee_v2(config)\n","\n","    # ============ point1 ratios ============ #\n","    # ------ wave_range_ratio ------ #\n","    # if config.loc_set.point2.cu_wrr_21 != \"None\":   # for excessive range rejection         \n","    #   wave_itv1 = config.tr_set.wave_itv1\n","    #   wave_period1 = config.tr_set.wave_period1\n","    #   co_wrr_21_ = res_df['co_wrr_21_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    #   cu_wrr_21_ = res_df['cu_wrr_21_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    #   if ep_loc_side == OrderSide.SELL:\n","    #     mr_res *= cu_wrr_21_ <= config.loc_set.point2.cu_wrr_21\n","    #     mr_res *= cu_wrr_21_ >= config.loc_set.point2.cu_wrr_21 - 0.2\n","    #     if show_detail:\n","    #         sys_log.warning(\"cu_wrr_21_ <= config.loc_set.point2.cu_wrr_21 : {:.5f} {:.5f} ({})\".format(cu_wrr_21_[c_i], config.loc_set.point2.cu_wrr_21, mr_res[c_i]))\n","    #   else:\n","    #     mr_res *= co_wrr_21_ <= config.loc_set.point2.co_wrr_21\n","    #     mr_res *= co_wrr_21_ >= config.loc_set.point2.co_wrr_21 - 0.2\n","    #     if show_detail:\n","    #         sys_log.warning(\"co_wrr_21_ <= config.loc_set.point2.co_wrr_21 : {:.5f} {:.5f} ({})\".format(co_wrr_21_[c_i], config.loc_set.point2.co_wrr_21, mr_res[c_i]))\n","\n","    if config.loc_set.point2.wrr_32 != \"None\":            \n","      wave_itv2 = config.tr_set.wave_itv2\n","      wave_period2 = config.tr_set.wave_period2\n","      co_wrr_32_ = res_df['co_wrr_32_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","      cu_wrr_32_ = res_df['cu_wrr_32_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= cu_wrr_32_ <= config.loc_set.point2.wrr_32  #  + 0.1  # 0.1 0.05\n","        # mr_res *= cu_wrr_32_ >= config.loc_set.point2.wrr_32\n","        if show_detail:\n","            sys_log.warning(\"cu_wrr_32_ <= config.loc_set.point2.wrr_32 : {:.5f} {:.5f} ({})\".format(cu_wrr_32_[c_i], config.loc_set.point2.wrr_32, mr_res[c_i]))\n","      else:\n","        mr_res *= co_wrr_32_ <= config.loc_set.point2.wrr_32  #  + 0.1  # 0.1 0.05\n","        # mr_res *= co_wrr_32_ >= config.loc_set.point2.wrr_32\n","        if show_detail:\n","            sys_log.warning(\"co_wrr_32_ <= config.loc_set.point2.wrr_32 : {:.5f} {:.5f} ({})\".format(co_wrr_32_[c_i], config.loc_set.point2.wrr_32, mr_res[c_i]))\n","\n","    if config.loc_set.point2.csd_period != \"None\":\n","      wave_itv2 = config.tr_set.wave_itv2\n","      csd_period = config.loc_set.point2.csd_period\n","      \n","      res_df = dc_line_v4(res_df, res_df, dc_period=csd_period)\n","      dc_upper_ = res_df['dc_upper_{}{}'.format(wave_itv2, csd_period)].to_numpy()    \n","      dc_lower_ = res_df['dc_lower_{}{}'.format(wave_itv2, csd_period)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        csdbox = res_df['short_tp_1_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * config.loc_set.point2.csdbox_range\n","        mr_res *= dc_upper_ <= csdbox\n","        if show_detail:\n","            sys_log.warning(\"dc_upper_ <= csdbox : {:.5f} {:.5f} ({})\".format(dc_upper_[c_i], csdbox[c_i], mr_res[c_i]))\n","      else:\n","        csdbox = res_df['long_tp_1_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * config.loc_set.point2.csdbox_range\n","        mr_res *= dc_lower_ >= csdbox\n","        if show_detail:\n","            sys_log.warning(\"dc_lower_ >= csdbox : {:.5f} {:.5f} ({})\".format(dc_lower_[c_i], csdbox[c_i], mr_res[c_i]))\n","\n","    return mr_res, zone_arr  # mr_res 의 True idx 가 open signal"]},{"cell_type":"markdown","metadata":{"id":"EQ63Jwpvr7qA"},"source":["#### legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"csZwxsP5r_Pz"},"outputs":[],"source":["      \n","    # ------ hl_loc_pct ------ #\n","    if config.loc_set.zone.hl_loc_pct != \"None\":      \n","      wave_high_loc_pct_ = res_df['wave_high_loc_pct_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      wave_low_loc_pct_ = res_df['wave_low_loc_pct_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= wave_high_loc_pct_ >= config.loc_set.zone.hl_loc_pct\n","        mr_res *= wave_high_loc_pct_ <= config.loc_set.zone.hl_loc_pct + 0.5\n","        if show_detail:\n","            sys_log.warning(\"wave_high_loc_pct_ >= config.loc_set.zone.hl_loc_pct : {:.5f} {:.5f} ({})\".format(wave_high_loc_pct_[c_i], config.loc_set.zone.hl_loc_pct, mr_res[c_i]))\n","      else:\n","        mr_res *= wave_low_loc_pct_ >= config.loc_set.zone.hl_loc_pct\n","        mr_res *= wave_low_loc_pct_ <= config.loc_set.zone.hl_loc_pct + 0.5\n","        if show_detail:\n","            sys_log.warning(\"wave_low_loc_pct_ >= config.loc_set.zone.hl_loc_pct : {:.5f} {:.5f} ({})\".format(wave_low_loc_pct_[c_i], config.loc_set.zone.hl_loc_pct, mr_res[c_i]))\n","\n","            \n","        # ------------------ wave_biaser (sr_confirmer) ------------------ #\n","        if selection_id in ['3_9']:     \n","          itv, period1, period2 = config.tr_set.p1_itv1, config.tr_set.p1_period1, config.tr_set.p1_period2          \n","\n","          if ep_loc_side == OrderSide.SELL:\n","            short_wave_high_ = res_df['short_wave_high_{}{}{}'.format(itv, period1, period2)]\n","            bb_lower_5T_amax = get_line(res_df['short_wave_high_idx_{}{}{}'.format(itv, period1, period2)].to_numpy(), res_df['bb_lower_5T'].to_numpy())\n","            mr_res *= short_wave_high_ <= bb_lower_5T_amax\n","            if show_detail:\n","                sys_log.warning(\"short_wave_high_ <= bb_lower_5T_amax : {:.5f} {:.5f} ({})\".format(short_wave_high_[c_i], bb_lower_5T_amax[c_i], mr_res[c_i]))\n","          else:\n","            long_wave_low_ = res_df['long_wave_low_{}{}{}'.format(itv, period1, period2)]\n","            bb_upper_5T_amax = get_line(res_df['long_wave_low_idx_{}{}{}'.format(itv, period1, period2)].to_numpy(), res_df['bb_upper_5T'].to_numpy())\n","            mr_res *= long_wave_low_ >= bb_upper_5T_amax\n","            if show_detail:\n","                sys_log.warning(\"long_wave_low_ >= bb_upper_5T_amax : {:.5f} {:.5f} ({})\".format(long_wave_low_[c_i], bb_upper_5T_amax[c_i], mr_res[c_i]))\n","\n","\n","        if selection_id in ['4_3', '3_5', '3_51']:\n","            dc_base_T20 = res_df['dc_base_T20'].to_numpy()\n","            dc_base_3T20 = res_df['dc_base_3T20'].to_numpy()\n","            # b1_dc_base_3T20 = res_df['dc_base_3T20'].shift(3).to_numpy()\n","            # dc_base_5T = res_df['dc_base_5T'].to_numpy()\n","            # dc_base_15T = res_df['dc_base_15T'].to_numpy()\n","            # dc_base_30T = res_df['dc_base_30T'].to_numpy()\n","            dc_base_H20 = res_df['dc_base_H20'].to_numpy()\n","            # dc_base_4H = res_df['dc_base_4H'].to_numpy()\n","            # dc_base_D = res_df['dc_base_D'].to_numpy()\n","\n","            itv, period1, period2 = config.tr_set.p1_itv1, config.tr_set.p1_period1, config.tr_set.p1_period2\n","            if ep_loc_side == OrderSide.SELL:\n","                # ------ short_base_ <= dc_base_3T20 ------ #\n","                short_base_ = res_df['short_base_{}{}{}'.format(itv, period1, period2)].to_numpy()\n","                mr_res *= short_base_ <= dc_base_3T20\n","                if show_detail:\n","                    sys_log.warning(\"short_base_ <= dc_base_3T20 : {:.5f} {:.5f} ({})\".format(short_base_[c_i], dc_base_3T20[c_i], mr_res[c_i]))\n","\n","                # mr_res *= short_base_ <= dc_base_T20\n","                # if show_detail:\n","                #     sys_log.warning(\"short_base_ <= dc_base_T20 : {:.5f} {:.5f} ({})\".format(short_base_[c_i], dc_base_T20[c_i], mr_res[c_i]))\n","\n","                # ------ reject csd ------ #\n","                # dc_upper_ = res_df['dc_upper_{}{}'.format(itv, period1)].to_numpy()\n","                # mr_res *= dc_upper_ <= dc_base_3T\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_upper_ <= dc_base_3T20 : {:.5f} {:.5f} ({})\".format(dc_upper_[c_i], dc_base_3T[c_i], mr_res[c_i]))\n","\n","                # Todo, 부호 조심\n","                # dc_upper2_ = res_df['dc_upper_{}{}'.format(itv, period2)].to_numpy()\n","                # mr_res *= dc_upper2_ >= dc_base_H\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_upper2_ >= dc_base_H20 : {:.5f} {:.5f} ({})\".format(dc_upper2_[c_i], dc_base_H[c_i], mr_res[c_i]))  \n","\n","                # long 과 동일한 dur.\n","                dc_lower2_ = res_df['dc_lower_{}{}'.format(itv, period2)].to_numpy()\n","                mr_res *= dc_lower2_ >= dc_base_H20\n","                if show_detail:\n","                    sys_log.warning(\"dc_lower2_ >= dc_base_H20 : {:.5f} {:.5f} ({})\".format(dc_lower2_[c_i], dc_base_H20[c_i], mr_res[c_i]))  \n","\n","                # ------ consecutive base ascender ------ #\n","                # ------ 1. roll_min ------ #\n","                dc_base_3T20_rollmin = res_df['dc_base_3T20'].rolling(config.loc_set.zone.base_roll_period).min().to_numpy()\n","                mr_res *= dc_base_3T20_rollmin == dc_base_3T20\n","                if show_detail:\n","                    sys_log.warning(\n","                        \"dc_base_3T20_rollmin == dc_base_3T2020 : {:.5f} {:.5f} ({})\".format(dc_base_3T20_rollmin[c_i], dc_base_3T20[c_i], mr_res[c_i]))\n","            else:\n","                # ------ long_base >= dc_base_3T20 ------ #\n","                long_base_ = res_df['long_base_{}{}{}'.format(itv, period1, period2)].to_numpy()\n","                mr_res *= long_base_ >= dc_base_3T20\n","                if show_detail:\n","                    sys_log.warning(\"long_base_ >= dc_base_3T20 : {:.5f} {:.5f} ({})\".format(long_base_[c_i], dc_base_3T20[c_i], mr_res[c_i]))\n","\n","                # mr_res *= long_base_ >= dc_base_T20\n","                # if show_detail:\n","                #     sys_log.warning(\"long_base_ >= dc_base_T20 : {:.5f} {:.5f} ({})\".format(long_base_[c_i], dc_base_T20[c_i], mr_res[c_i]))\n","\n","                # ------ reject csd ------ #\n","                # dc_lower_ = res_df['dc_lower_{}{}'.format(itv, period1)].to_numpy()\n","                # mr_res *= dc_lower_ >= dc_base_3T\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_lower_ >= dc_base_3T20 : {:.5f} {:.5f} ({})\".format(dc_lower_[c_i], dc_base_3T[c_i], mr_res[c_i]))\n","\n","                dc_lower2_ = res_df['dc_lower_{}{}'.format(itv, period2)].to_numpy()\n","                mr_res *= dc_lower2_ >= dc_base_H20\n","                if show_detail:\n","                    sys_log.warning(\"dc_lower2_ >= dc_base_H20 : {:.5f} {:.5f} ({})\".format(dc_lower2_[c_i], dc_base_H20[c_i], mr_res[c_i]))\n","\n","                # bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","                # mr_res *= dc_lower2_ >= bb_lower_5T\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_lower2_ >= bb_lower_5T : {:.5f} {:.5f} ({})\".format(dc_lower2_[c_i], bb_lower_5T[c_i], mr_res[c_i]))\n","\n","                # ------ alignment ------ #\n","                # mr_res *= (dc_base_3T20 > dc_base_5T) & (dc_base_5T > dc_base_15T) & (dc_base_15T > dc_base_30T)\n","\n","                # ------ consecutive base ascender ------ #\n","                # ------ 1. roll_max ------ #\n","                dc_base_3T20_rollmax = res_df['dc_base_3T20'].rolling(config.loc_set.zone.base_roll_period).max().to_numpy()\n","                mr_res *= dc_base_3T20_rollmax == dc_base_3T20\n","                if show_detail:\n","                    sys_log.warning(\n","                        \"dc_base_3T20_rollmax == dc_base_3T2020 : {:.5f} {:.5f} ({})\".format(dc_base_3T20_rollmax[c_i], dc_base_3T20[c_i], mr_res[c_i]))\n","\n","                # ------ 2. roll_max_v2 - ascender  ------ #\n","                # dc_base_3T_ascend = (res_df['dc_base_3T'] >= res_df['dc_base_3T'].shift(3)).rolling(config.loc_set.zone.base_roll_period).sum().to_numpy()\n","                # # mr_res *= dc_base_3T_ascend == config.loc_set.zone.base_roll_period\n","                # mr_res *= dc_base_3T_ascend != config.loc_set.zone.base_roll_period\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_base_3T_ascend == config.loc_set.zone.base_roll_period : {:.5f} {:.5f} ({})\".format(dc_base_3T_ascend[c_i], config.loc_set.zone.base_roll_period, mr_res[c_i]))\n","\n","\n","    if config.loc_set.point.wrr != \"None\":            \n","      wave_itv = 'T'\n","      wave_period = config.tr_set.wave_period\n","      co_wrr_ = res_df['co_wrr_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","      cu_wrr_ = res_df['cu_wrr_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= co_wrr_ <= config.loc_set.point.wrr\n","        if show_detail:\n","            sys_log.warning(\"co_wrr_ <= config.loc_set.point.wrr : {:.5f} {:.5f} ({})\".format(co_wrr_[c_i], config.loc_set.point.wrr, mr_res[c_i]))\n","      else:\n","        mr_res *= cu_wrr_ <= config.loc_set.point.wrr\n","        if show_detail:\n","            sys_log.warning(\"cu_wrr_ <= config.loc_set.point.wrr : {:.5f} {:.5f} ({})\".format(cu_wrr_[c_i], config.loc_set.point.wrr, mr_res[c_i]))\n","            \n","      # if ep_loc_side == OrderSide.SELL:\n","      #   mr_res *= cu_es_ >= config.loc_set.point.cu_es\n","      #   mr_res *= cu_es_ <= config.loc_set.point.cu_es + 2\n","      #   if show_detail:\n","      #       sys_log.warning(\"cu_es_ >= config.loc_set.point.cu_es : {:.5f} {:.5f} ({})\".format(cu_es_[c_i], config.loc_set.point.cu_es, mr_res[c_i]))\n","      # else:\n","      #   mr_res *= co_es_ >= config.loc_set.point.co_es\n","      #   mr_res *= co_es_ <= config.loc_set.point.co_es + 1\n","      #   if show_detail:\n","      #       sys_log.warning(\"co_es_ >= config.loc_set.point.co_es : {:.5f} {:.5f} ({})\".format(co_es_[c_i], config.loc_set.point.co_es, mr_res[c_i]))\n","\n","\n","      if ep_loc_side == OrderSide.SELL:\n","          mr_res *= lower_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          # mr_res *= upper_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          if show_detail:\n","              sys_log.warning(\"upper_wick_ratio_ >= config.loc_set.point.wick_ratio : {:.5f} {:.5f} ({})\".format(upper_wick_ratio_[c_i], config.loc_set.point.wick_ratio, mr_res[c_i]))\n","      else:\n","          mr_res *= upper_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          mr_res *= upper_wick_ratio_ <= config.loc_set.point.wick_ratio + 0.1\n","          # mr_res *= lower_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          if show_detail:\n","              sys_log.warning(\"lower_wick_ratio_ >= config.loc_set.point.wick_ratio : {:.5f} {:.5f} ({})\".format(lower_wick_ratio_[c_i], config.loc_set.point.wick_ratio, mr_res[c_i]))\n","              \n","      crr_ = res_df['crr_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","      mr_res *= crr_ >= config.loc_set.point.crr\n","     \n","      if show_detail:\n","          sys_log.warning(\"crr_ >= config.loc_set.point.crr : {:.5f} {:.5f} ({})\".format(crr_[c_i], config.loc_set.point.crr, mr_res[c_i]))\n","\n","      b1_upper_wick_ratio_ = res_df['upper_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].shift(itv_num).to_numpy()\n","      b1_lower_wick_ratio_ = res_df['lower_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].shift(itv_num).to_numpy()\n","\n","      if ep_loc_side == OrderSide.SELL:\n","          upper_wick_ratio_ = res_df['upper_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].to_numpy()\n","          mr_res *= upper_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          if show_detail:\n","              sys_log.warning(\"upper_wick_ratio_ >= config.loc_set.point.wick_ratio : {:.5f} {:.5f} ({})\".format(upper_wick_ratio_[c_i], config.loc_set.point.wick_ratio, mr_res[c_i]))\n","      else:\n","          lower_wick_ratio_ = res_df['lower_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].to_numpy()\n","          mr_res *= lower_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          if show_detail:\n","              sys_log.warning(\"lower_wick_ratio_ >= config.loc_set.point.wick_ratio : {:.5f} {:.5f} ({})\".format(lower_wick_ratio_[c_i], config.loc_set.point.wick_ratio, mr_res[c_i]))\n","\n","    if config.loc_set.point.cppr != \"None\":   \n","      tf_entry = to_itvnum(config.loc_set.point.tf_entry)\n","      b1_cppr_ = res_df['b1_cppr_{}'.format(config.loc_set.point.tf_entry)].to_numpy()  # check b1's cppr in ep_loc\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= b1_cppr_ >= config.loc_set.point.cppr\n","        if show_detail:\n","            sys_log.warning(\"b1_cppr_ >= config.loc_set.point.cppr : {:.5f} {:.5f} ({})\".format(b1_cppr_[c_i], config.loc_set.point.cppr, mr_res[c_i]))\n","      else:\n","        mr_res *= b1_cppr_ <= -config.loc_set.point.cppr\n","        if show_detail:\n","            sys_log.warning(\"b1_cppr_ <= -config.loc_set.point.cppr : {:.5f} {:.5f} ({})\".format(b1_cppr_[c_i], config.loc_set.point.cppr, mr_res[c_i]))\n","            \n","    # ------------ candle_score ------------ #\n","    wick_score_list = literal_eval(config.loc_set.point.wick_score_list)\n","    if len(wick_score_list) != 0:\n","        score_itv_list = literal_eval(config.loc_set.point.score_itv_list)\n","        # ------ candle_score_v0 (1m initial tick 기준임) ------ #  Todo - higher timeframe 경우 back_data 사용해야함\n","        for wick_score_, score_itv_ in zip(wick_score_list, score_itv_list):\n","            wick_score = res_df['wick_score_{}'.format(score_itv_)].to_numpy()\n","            if ep_loc_side == OrderSide.SELL:\n","                mr_res *= wick_score <= -wick_score_\n","                if show_detail:\n","                    sys_log.warning(\"wick_score <= -wick_score_ : {:.5f} {:.5f} ({})\".format(wick_score[c_i], -wick_score_, mr_res[c_i]))\n","            else:\n","                mr_res *= wick_score >= wick_score_\n","                if show_detail:\n","                    sys_log.warning(\"wick_score >= wick_score_ : {:.5f} {:.5f} ({})\".format(wick_score[c_i], wick_score_, mr_res[c_i]))\n","            \n","\n","        # ------------------ swing_middle ------------------ #\n","        # ------------ 1. envelope ------------ #\n","\n","        # ------ a. dc ------ #\n","        # ep_loc check 기준 idx 가 entry 기준이라는 걸 명심\n","        if selection_id in ['v3_2']:\n","            hc_itv = '15T'\n","            dc_itv = '15T'\n","            shift_num = [0, to_itvnum(hc_itv)]\n","            div_res = [1, 0]\n","            for itv_num, res in zip(shift_num, div_res):\n","                close_ = res_df['close_{}'.format(hc_itv)].shift(itv_num).to_numpy()  # close_bar timein 사용하는 경우, 특수로 shift(0) 사용가능\n","                if ep_loc_side == OrderSide.SELL:\n","                    dc_lower_ = res_df['dc_lower_%s' % dc_itv].shift(itv_num).to_numpy()\n","                    mr_res *= (close_ < dc_lower_) == res\n","                else:\n","                    dc_upper_ = res_df['dc_upper_%s' % dc_itv].shift(itv_num).to_numpy()\n","                    mr_res *= (close_ > dc_upper_) == res\n","\n","        # ------------ 2. degree ------------ #\n","        # ------ a. norm_body_ratio ------ #\n","        if config.loc_set.zone.abs_ratio != \"None\":\n","            itv = config.loc_set.point.tf_entry\n","            abs_ratio_ = res_df['abs_ratio_{}'.format(itv)].to_numpy()\n","            mr_res *= abs_ratio_ >= config.loc_set.zone.abs_ratio\n","            # mr_res *= abs_ratio_ <= config.loc_set.zone.abs_ratio\n","\n","    # ------------ 2. imbalance_ratio ------------ #\n","    if config.loc_set.zone.ir != \"None\":\n","        itv = config.loc_set.point.tf_entry\n","        itv_num = to_itvnum(itv)\n","        if ep_loc_side == OrderSide.SELL:\n","            short_ir_ = res_df['short_ir_{}'.format(itv)].to_numpy()\n","            # short_ir_ = res_df['short_ir_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","            # mr_res *= short_ir_ >= config.loc_set.zone.ir     # greater\n","            mr_res *= short_ir_ <= config.loc_set.zone.ir  # lesser\n","            if show_detail:\n","                sys_log.warning(\n","                    \"short_ir_ <= config.loc_set.zone.ir : {:.5f} {:.5f} ({})\".format(short_ir_[c_i], config.loc_set.zone.ir, mr_res[c_i]))\n","        else:\n","            long_ir_ = res_df['long_ir_{}'.format(itv)].to_numpy()\n","            # long_ir_ = res_df['long_ir_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","            # mr_res *= long_ir_ >= config.loc_set.zone.ir\n","            mr_res *= long_ir_ <= config.loc_set.zone.ir\n","            if show_detail:\n","                sys_log.warning(\n","                    \"long_ir_ <= config.loc_set.zone.ir : {:.5f} {:.5f} ({})\".format(long_ir_[c_i], config.loc_set.zone.ir, mr_res[c_i]))\n","                \n","        # if selection_id in ['3_6']:\n","        #   itv, period1, period2 = config.loc_set.point.p1_itv0, config.loc_set.point.p1_period1, config.loc_set.point.p1_period2          \n","\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     high_5T = res_df['high_5T'].to_numpy()  # Todo, tf_entry - 1 open 기준이라 future_data 사용 가능\n","        #     short_base_ = res_df['short_base_{}{}{}'.format(itv, period1, period2)]\n","        #     mr_res *= high_5T < short_base_\n","        #     if show_detail:\n","        #         sys_log.warning(\n","        #             \"high_5T < short_base_ : {:.5f} {:.5f} ({})\".format(high_5T[c_i], short_base_[c_i], mr_res[c_i]))\n","        #   else:\n","        #     low_5T = res_df['low_5T'].to_numpy()  # Todo, tf_entry - 1 open 기준이라 future_data 사용 가능\n","        #     long_base_ = res_df['long_base_{}{}{}'.format(itv, period1, period2)]\n","        #     mr_res *= low_5T > long_base_\n","        #     if show_detail:\n","        #         sys_log.warning(\n","        #             \"low_5T > long_base_ : {:.5f} {:.5f} ({})\".format(low_5T[c_i], long_base_[c_i], mr_res[c_i]))'\n","        \n","        # ------ dc_base ------ #\n","        # if selection_id in ['4']:  # 'v3_3', 'v3_4',\n","        #   hc_itv = '5T'\n","        #   dc_itv = '5T'\n","        #   itv_num = to_itvnum(hc_itv)\n","        #   close_ = res_df['close_{}'.format(hc_itv)].shift(itv_num).to_numpy()   # 따라서 future_data 사용시, shifting 필요함\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     dc_lower_ = res_df['dc_lower_%s' % dc_itv].shift(itv_num).to_numpy()\n","        #     mr_res *= close_ < dc_lower_\n","        #   else:\n","        #     dc_upper_ = res_df['dc_upper_%s' % dc_itv].shift(itv_num).to_numpy()\n","        #     mr_res *= close_ > dc_upper_\n","\n","        # ------ ema ------ #\n","        # if selection_id in ['v5_2']: # 'v3'\n","        #   ema_5T = res_df['ema_5T'].to_numpy()\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     mr_res *= close < ema_5T\n","        #   else:\n","        #     mr_res *= close > ema_5T\n","        \n","        # ------ b. bb ------ #\n","        # close = res_df['close'].to_numpy()\n","\n","        # if selection_id in ['v3_3']:\n","        #   open = res_df['open'].to_numpy()\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     bb_lower_1m = res_df['bb_lower_1m'].to_numpy()\n","        #     # mr_res *= close <= bb_lower_1m\n","        #     mr_res *= open <= bb_lower_1m\n","        #   else:\n","        #     bb_upper_1m = res_df['bb_upper_1m'].to_numpy()\n","        #     # mr_res *= close >= bb_upper_1m\n","        #     mr_res *= open >= bb_upper_1m\n","\n","        if selection_id in ['4_1']:\n","            if ep_loc_side == OrderSide.SELL:\n","                bb_lower_15T = res_df['bb_lower_15T'].to_numpy()\n","                short_ep_ = res_df['short_ep_{}'.format(selection_id)].to_numpy()\n","                mr_res *= bb_lower_15T >= short_ep_\n","            else:\n","                bb_upper_15T = res_df['bb_upper_15T'].to_numpy()\n","                long_ep_ = res_df['long_ep_{}'.format(selection_id)].to_numpy()\n","                mr_res *= bb_upper_15T <= long_ep_\n","\n","        # if selection_id in ['v5_2']:\n","        #   bb_upper2_ = res_df['bb_upper2_%s' % config.loc_set.zone.bbz_itv].to_numpy()\n","        #   bb_lower2_ = res_df['bb_lower2_%s' % config.loc_set.zone.bbz_itv].to_numpy()\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     mr_res *= bb_upper2_ < close\n","        #   else:\n","        #     mr_res *= bb_lower2_ > close\n","\n","        # degree_list = literal_eval(config.loc_set.zone.degree_list)\n","        # if len(degree_list) != 0:\n","        # # if selection_id in ['v3_3', 'v3_4']:\n","        #   norm_close_15 = res_df['norm_close_15'].to_numpy()   # -> 이거 뭘로 만들었는지 불분명함,,\n","        #   b1_norm_close_15 = res_df['norm_close_15'].shift(15).to_numpy()\n","\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     mr_res *= norm_close_15 <= -degree_list[0]\n","        #     # mr_res *= b1_norm_close_15 <= -degree_list[1]\n","        #   else:\n","        #     mr_res *= norm_close_15 >= degree_list[0]\n","        #     # mr_res *= b1_norm_close_15 >= degree_list[1]\n","\n","        # ------ b. dc ------ #\n","        # if selection_id in ['v3_3']:\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     dc_lower_ = res_df['dc_lower_1m'].to_numpy()\n","        #     b1_dc_lower_ = res_df['dc_lower_1m'].shift(1).to_numpy()\n","        #     mr_res *= dc_lower_ < b1_dc_lower_\n","        #   else:\n","        #     dc_upper_ = res_df['dc_upper_1m'].to_numpy()\n","        #     b1_dc_upper_ = res_df['dc_upper_1m'].shift(1).to_numpy()\n","        #     mr_res *= dc_upper_ > b1_dc_upper_\n","\n","        # ------ c. sar ------ #\n","        # if selection_id in ['v3_3']:\n","        # sar_uptrend_3T = res_df['sar_uptrend_3T'].to_numpy()\n","        # if ep_loc_side == OrderSide.SELL:\n","        #   mr_res *= sar_uptrend_3T == 0\n","        # else:\n","        #   mr_res *= sar_uptrend_3T == 1"]},{"cell_type":"markdown","metadata":{"id":"JjKHyqftzhD7"},"source":["### set config (override available)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"q_4E-zH02WJy"},"outputs":[],"source":["#     caution : MARKET / LIMIT spelling   #\n","#      json doesn't support single quotes     #\n","\n","param_dict = {\n","  \"selection_id\": \"5_45\",\n","  \"trader_set\": {\n","    \"backtrade\": 0,\n","    \"back_data_path\": \"C:\\\\Users\\\\Lenovo\\\\PycharmProjects\\\\System_Trading\\\\JnQ\\\\candlestick_concated\\\\database_bn\\\\2022-02-17\\\\2022-02-17 ETHUSDT_1m.ftr\",\n","    \"start_datetime\": \"2020-09-05 00:00:59.999\",\n","    \"run\": 1,\n","    \"df_log\": 0,\n","    \"latest_index\": -1,\n","    \"complete_index\": -2,\n","    \"limit_fee\": 1e-10,\n","    \"market_fee\": 1e-10,\n","    \"initial_asset\": 24500,\n","    \"asset_changed\": 0,\n","    \"symbol\": \"ETHUSDT\",\n","    \"symbol_changed\": 0,\n","    \"itv_list\": \"['T', '3T', '5T', '15T', '30T', 'H', '4H']\",\n","    \"row_list\": \"[100, 50, 1, 1, 1, 50, 1]\",\n","    \"rec_row_list\": \"[1, 1, 1, 1, 1, 1, 1]\",\n","    \"offset_list\": \"['1h', '1h', '1h', '1h', '1h', '1h', '1h']\",\n","    \"bar_close_second\": 59,\n","    \"realtime_term\": 0.01,\n","    \"order_term\": 0.25,\n","    \"api_retry_term\": 1,\n","    \"check_entry_sec\": 10,\n","    \"entry_execution_wait\": 60,\n","    \"breakout_qty_ratio\": 0.97,\n","    \"qty_check_term\": 30,\n","    \"exit_execution_wait\": 60,\n","    \"close_complete_term\": 5,\n","    \"save_stacked_df\": 0,\n","    \"stacked_df_exist\": 1\n","  },\n","  \"pos_set\": {\n","    \"short_inversion\": 0,\n","    \"long_inversion\": 0,\n","    \"short_ban\": 0,\n","    \"long_ban\": 0\n","  },\n","  \"loc_set\": {      \n","    \"point1\": {\n","      \"exp_itv\": \"5T\",\n","      \"tf_entry\": \"15T\",\n","      \"candle_pattern\": \"CDLMARUBOZU\",\n","      \"short_spread\": \"None\",\n","      \"long_spread\": \"None\",\n","      \"short_tr_thresh\": \"None\",\n","      \"long_tr_thresh\": \"None\",\n","      \"short_wick_ratio\": \"None\",\n","      \"long_wick_ratio\": \"None\",\n","      \"wick_itv\": \"5T\",\n","      \"cu_wrr_21\": \"None\",\n","      \"co_wrr_21\": \"None\",\n","      \"wrr_32\": 0.3,\n","      \"co_es\": \"None\",\n","      \"cu_es\": \"None\",\n","      \"crr\": \"None\",\n","      \"cppr\": \"None\",\n","      \"ppr\": \"None\",\n","      \"wbr\": \"None\",\n","      \"dbr\": \"None\",\n","      \"dbr2\": \"None\",\n","      \"brr\": \"None\",\n","      \"ir\": \"None\",\n","      \"abs_ratio\": \"None\"\n","    },\n","    \"point2\": {\n","      \"wrr_32\": 0.3,\n","      \"csdbox_range\": 0.3,\n","      \"csd_period\": 40\n","    },\n","    \"zone\": {\n","      \"use_zone\": 1,\n","      \"base_roll_period\": 50,\n","      \"degree_list\": \"[]\",\n","      \"dtk_itv\": \"5T\",\n","      \"dt_k\": \"None\",\n","      \"dc_period\": 135,\n","      \"use_dtk_line\": 0,\n","      \"zone_dt_k\": 0.4,\n","      \"zone_dc_period\": 135\n","    }\n","  },\n","  \"tr_set\": {\n","    \"check_hlm\": 0,\n","    \"wave_itv1\" : 'T',\n","    \"wave_period1\": 30,\n","    \"wave_itv2\" : 'T',    \n","    \"wave_period2\": 30,\n","    \"wave_greater1\": 0,\n","    \"wave_greater2\": 0,\n","    \"wave_lesser1\": 2,\n","    \"wave_lesser2\": 2,\n","    \"expire_k1\": 0.0,\n","    \"expire_k2\": 0.0,\n","    \"expire_tick\": \"None\",\n","    \"p2_box_k1\" : 0,\n","    \"p2_box_k2\" : 0,\n","    \"p1p2_low\": 0.5,\n","    \"tp_gap\": 0.0,\n","    \"ep_gap1\": -0.12,\n","    \"ep_gap2\": -0.12,\n","    \"out_gap\": 0,\n","    \"decay_gap\": \"None\",\n","    \"c_ep_gap\": \"None\",\n","    \"t_out_gap\": \"None\",\n","    \"wb_tp_gap\": 0,\n","    \"wb_out_gap\": 0,\n","    \"bias_info_tick\": 30000\n","  },\n","  \"ep_set\": {\n","    \"entry_type\": \"LIMIT\",\n","    \"static_ep\": 1,\n","    \"point2\": {\n","      \"use_point2\": 0,\n","      \"entry_type\": \"MARKET\"\n","    }\n","  },\n","  \"tp_set\": {\n","    \"non_tp\": 0,\n","    \"static_tp\": 1,\n","    \"tp_onexec\": 0,\n","    \"decay_term\": 60,\n","    \"p_ranges\": \"[1]\",\n","    \"p_qty_ratio\": \"[1]\"\n","  },\n","  \"out_set\": {\n","    \"hl_out\": 1,\n","    \"static_out\": 1,\n","    \"out_onexec\": 0,\n","    \"tf_exit\": \"None\",\n","    \"rsi_exit\": 0\n","  },\n","  \"lvrg_set\": {\n","    \"leverage\": 2,\n","    \"static_lvrg\": 0,\n","    \"allow_float\": 0,\n","    \"target_pct\": 0.03,\n","    \"lvrg_rejection\": 0\n","  }\n","}\n","\n","config = EasyDict(param_dict)"]},{"cell_type":"markdown","metadata":{"id":"MuD_2vY7TI_8"},"source":["#### legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"EKag94Y2TMCO"},"outputs":[],"source":[",\n","      \"hc_itv\": 60,\n","      \"osc_band\": 20\n","      \n","      \"wick_score_list\": \"[]\",\n","      \"body_score_list\": \"[]\",\n","      \"score_itv_list\": \"[]\",,\n","\n","      \"wick_score_list\": \"[]\",\n","      \"body_score_list\": \"[]\",\n","      \"score_itv_list\": \"['T']\""]},{"cell_type":"markdown","metadata":{"id":"rLI8unIyroiC"},"source":["## run"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":442,"status":"ok","timestamp":1656642806575,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"qBJfPsmJzVIr","outputId":"85ea16ab-6c9c-479f-8d37-5323ce370119"},"outputs":[{"output_type":"stream","name":"stdout","text":["\"5_45\" {\n"," \"point1\": {\n","  \"exp_itv\": \"5T\",\n","  \"tf_entry\": \"15T\",\n","  \"candle_pattern\": \"CDLMARUBOZU\",\n","  \"short_spread\": \"None\",\n","  \"long_spread\": \"None\",\n","  \"short_tr_thresh\": \"None\",\n","  \"long_tr_thresh\": 0.5,\n","  \"short_wick_ratio\": \"None\",\n","  \"long_wick_ratio\": \"None\",\n","  \"wick_itv\": \"5T\",\n","  \"cu_wrr_21\": \"None\",\n","  \"co_wrr_21\": \"None\",\n","  \"wrr_32\": 0.5,\n","  \"co_es\": \"None\",\n","  \"cu_es\": \"None\",\n","  \"crr\": \"None\",\n","  \"cppr\": \"None\",\n","  \"ppr\": \"None\",\n","  \"wbr\": \"None\",\n","  \"dbr\": \"None\",\n","  \"dbr2\": \"None\",\n","  \"brr\": \"None\",\n","  \"ir\": \"None\",\n","  \"abs_ratio\": \"None\"\n"," },\n"," \"point2\": {\n","  \"wrr_32\": 0.3,\n","  \"csdbox_range\": 0.3,\n","  \"csd_period\": \"None\"\n"," },\n"," \"zone\": {\n","  \"use_zone\": 0,\n","  \"base_roll_period\": 50,\n","  \"degree_list\": \"[]\",\n","  \"dtk_itv\": \"5T\",\n","  \"dt_k\": \"None\",\n","  \"dc_period\": 135,\n","  \"use_dtk_line\": 0,\n","  \"zone_dt_k\": 0.4,\n","  \"zone_dc_period\": 135,\n","  \"bb_trend_period\": 150\n"," }\n","} {\n"," \"check_hlm\": 2,\n"," \"wave_itv1\": \"15T\",\n"," \"wave_period1\": 5,\n"," \"wave_itv2\": \"T\",\n"," \"wave_period2\": 20,\n"," \"wave_greater1\": 0,\n"," \"wave_greater2\": 0,\n"," \"wave_lesser1\": 2,\n"," \"wave_lesser2\": 2,\n"," \"expire_k1\": 0.0,\n"," \"expire_k2\": 0.0,\n"," \"expire_tick\": \"None\",\n"," \"p2_box_k1\": 0,\n"," \"p2_box_k2\": 0.5,\n"," \"p1p2_low\": 0.5,\n"," \"tp_gap\": 0.0,\n"," \"ep_gap1\": -0.12,\n"," \"ep_gap2\": -0.12,\n"," \"out_gap\": 0,\n"," \"decay_gap\": \"None\",\n"," \"c_ep_gap\": \"None\",\n"," \"t_out_gap\": \"None\",\n"," \"wb_tp_gap\": 0,\n"," \"wb_out_gap\": 0,\n"," \"bias_info_tick\": 30000\n","} {\n"," \"entry_type\": \"LIMIT\",\n"," \"static_ep\": 1,\n"," \"point2\": {\n","  \"use_point2\": 0,\n","  \"entry_type\": \"MARKET\"\n"," }\n","} {\n"," \"non_tp\": 0,\n"," \"static_tp\": 1,\n"," \"tp_onexec\": 0,\n"," \"decay_term\": 60,\n"," \"p_ranges\": \"[1]\",\n"," \"p_qty_ratio\": \"[1]\"\n","} {\n"," \"hl_out\": 1,\n"," \"static_out\": 1,\n"," \"out_onexec\": 0,\n"," \"tf_exit\": \"None\",\n"," \"rsi_exit\": 0\n","} {\n"," \"leverage\": 22,\n"," \"static_lvrg\": 0,\n"," \"allow_float\": 0,\n"," \"target_pct\": 0.1,\n"," \"lvrg_rejection\": 0\n","} "]}],"source":["# funcs = [expire_v2, ep_loc_point2_v2, lvrg_set]  # expire for p1 & p2\n","funcs = [expiry_p1, expiry_p2, lvrg_set]     # expire for p1-only\n","# funcs = [expire_v0, ep_loc_point2_v2, lvrg_set]  # expire for v3\n","\n","id_idx_list = [0]  # ID_arr 에서 import 할 id_idx 선택\n","public_override = 1\n","utils_override = 1\n","config_override = 1\n","\n","# ------ config_list 와 같은 org_var 에 override 하는거 다시 생각하기 ------ #\n","ID_list = ID_arr[id_idx_list]\n","utils_list = utils_arr[id_idx_list]\n","config_list = config_arr[id_idx_list]\n","\n","if config_override or utils_override:\n","  assert len(config_list) == 1\n","  if config_override:    \n","    config_list[0] = config\n","    ID_list[0] = config.selection_id\n","  \n","config = config_list[0]  # base config = config_list[0]\n","tp_fee, out_fee = calc_tp_out_fee_v2(config)   # -> rev_pr 때문에 일단 이곳에도 선언함\n","\n","# ------- inversion set ------- #\n","inversion = 0\n","fdist_thresh = 1\n","# ------- plot param ------- #\n","show_detail = 0\n","# ------- temp param ------- #\n","allow_osc_touch = 0\n","rsi_gap = 5\n","\n","# ------- just printing config ------- #\n","_ = [print(json.dumps(config[key_], indent=1), end=' ') for key_ in ['selection_id', 'loc_set', 'tr_set', 'ep_set', 'tp_set', 'out_set', 'lvrg_set']] #  'trader_set',"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"afUV2b1jaggN"},"outputs":[],"source":["# config.trader_set.start_datetime = \"2020-09-05 00:00:59.999\" #  \"2020-09-05 00:00:59.999\" # 2022-02-01 16:34:59.999000 2022-01-14 16:34:59.999000  \"2020-09-05 00:00:59.999\" \"2022-01-10 00:00:59.999\" \"2021-10-04 02:39:59.999000\"\n","# ------ p1_hhm 의 경우 out_box 를 위해 wave_itv 1 & 2 를 동일하게 설정해야함 ------ #\n","config_list[0].tr_set.wave_itv1 = '15T'\n","config_list[0].tr_set.wave_period1 = 5\n","config_list[0].tr_set.wave_itv2 = 'T'\n","config_list[0].tr_set.wave_period2 = 20"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3512,"status":"ok","timestamp":1656637396221,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"WstWVNihCNH8","outputId":"b970242f-a222-4121-e937-f60392f888f6"},"outputs":[{"output_type":"stream","name":"stdout","text":["public_indi elapsed time : 2.013716697692871\n","make data_list elapsed time : 0.00018143653869628906\n"]}],"source":["# ------ slicing res_df ------ #\n","res_df = res_df_.loc[pd.to_datetime(config.trader_set.start_datetime):]\n","\n","np_timeidx = np.array([intmin_np(date_) for date_ in res_df.index.to_numpy()])\n","\n","# ------------ public_indi ------------ # - 딱히 반복될 이유가 없는 phase - annot. 달때, why 까지 적어주면 좋음\n","start_0 = time.time()\n","if public_override:\n","    res_df = public_indi(res_df, config_list[0], np_timeidx)  # 현재 대부분의 시간은 h_candle 에서 소비되고 있음\n","else:\n","    res_df = utils_public.public_indi(res_df, config_list[0], np_timeidx)\n","print(\"public_indi elapsed time :\", time.time() - start_0)\n","\n","# ------------ make data_list ------------ # - 반복될 이유가 없는 phase - public_indo 에 종속\n","start_0 = time.time()\n","ohlc_cols = ['open', 'high', 'low', 'close']\n","ohlc_list = [res_df[col_].to_numpy() for col_ in ohlc_cols]\n","print(\"make data_list elapsed time :\", time.time() - start_0)"]},{"cell_type":"markdown","metadata":{"id":"RqRF1eyZ0xBL"},"source":["### idep_plot"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_iYcJk8nK8Yq"},"outputs":[],"source":["# ------ edit utils config ------ #\n","config_list[0].tr_set.check_hlm = 2\n","# config_list[0].loc_set.point.candle_pattern = talib.get_function_groups()['Pattern Recognition'][51]   # \"None\" # 0.5 0.7\n","# config_list[0].pos_set.short_ban = 0\n","# config_list[0].pos_set.long_ban = 0\n","# config_list[0].tr_set.wave_lesser = 3\n","# config_list[0].tr_set.wave_greater1 = 0\n","# config_list[0].tr_set.wave_greater2 = 0\n","# config_list[0].tr_set.p1_period1 = 5\n","# config_list[0].tr_set.p1_period2 = 5\n","# # config_list[0].tr_set.p2_period1 = 20\n","# # config_list[0].tr_set.p2_period2 = 20\n","# config_list[0].ep_set.entry_type = \"LIMIT\" # \"LIMIT\" # \"MARKET\"\n","# config_list[0].tr_set.tp_gap = 0.5\n","# config_list[0].tr_set.ep_gap1 = -0.12 # -0.618 -0.23 -0.382 0.19 0.8 -0.12\n","# config_list[0].tr_set.ep_gap2 = -0.12 # -0.618 -0.23 -0.382 0.19 \n","# config_list[0].tr_set.out_gap = -0.0  # 0 -0.35\n","# config_list[0].tr_set.wb_tp_gap = 0.5\n","# config_list[0].tr_set.wb_out_gap = -0.5\n","# config_list[0].tr_set.bias_info_tick = 30000\n","# config_list[0].trader_set.limit_fee = 1e-10 # 1e-10  0.0002  # utils 로 이곳에 배치\n","# config_list[0].trader_set.market_fee = 1e-10 # 1e-10  0.0004\n","\n","# config_list[0].loc_set.point.short_wick_ratio = 0.2 # \"None\" # 2.5\n","# config_list[0].loc_set.point.long_wick_ratio = 0.2 # \"None\" # 2.5\n","# config_list[0].loc_set.point.crr = 0.5"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":410,"status":"ok","timestamp":1656637397046,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"iI39YI_5GguK","outputId":"f91648bc-7ba0-48bf-983b-f54211d3f4f3"},"outputs":[{"output_type":"stream","name":"stderr","text":["wave_point\n","np.sum(short_open_res1 == 1) : 97710\n","np.sum(long_open_res1 == 1) : 94876\n","np.sum(short_open_res2 == 1) : 42048\n","np.sum(long_open_res2 == 1) : 42240\n","reject update_hl\n","np.sum(short_open_res1 == 1) : 83130\n","np.sum(long_open_res1 == 1) : 75991\n","np.sum(short_open_res2 == 1) : 40427\n","np.sum(long_open_res2 == 1) : 40130\n","tf_entry\n","np.sum(short_open_res1 == 1) : 5542\n","np.sum(long_open_res1 == 1) : 5066\n","wave_mm\n","np.sum(short_open_res1 == 1) : 5537\n","np.sum(long_open_res1 == 1) : 5065\n","np.sum(short_open_res2 == 1) : 40425\n","np.sum(long_open_res2 == 1) : 40128\n","point validation\n","np.sum(short_open_res1 == 1) : 4863\n","np.sum(long_open_res1 == 1) : 4527\n","np.sum(short_open_res2 == 1) : 24559\n","np.sum(long_open_res2 == 1) : 24722\n"]},{"output_type":"stream","name":"stdout","text":["enlist_tr elapsed time : 0.4971346855163574\n"]}],"source":["if utils_override:   # 현재, utils_override 하는 경우 1개의 ID 만 허용함 \n","  # start_0 = time.time()\n","  # res_df = enlist_rtc(res_df, config_list[0], np_timeidx)\n","  # print(\"enlist_rtc elapsed time :\", time.time() - start_0)\n","  start_0 = time.time()\n","  res_df = enlist_tr(res_df, config_list[0], np_timeidx)    # 36995.0 -> 152766.0 # 4044 np.sum(long_open_res == 1) : 4325\n","  print(\"enlist_tr elapsed time :\", time.time() - start_0)\n","else:\n","    start_0 = time.time()\n","    for utils_, config_ in zip(utils_list, config_list):\n","        # res_df = utils_.enlist_rtc(res_df, config_, np_timeidx)\n","        res_df = utils_.enlist_tr(res_df, config_, np_timeidx)\n","    print(\"elapsed time :\", time.time() - start_0)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gfDSOGMd91rE"},"outputs":[],"source":["# ------ edit loc_set config ------ #\n","config_list[0].loc_set.point1.cu_wrr_21 = \"None\" # \"None\" 5 2.5\n","config_list[0].loc_set.point1.co_wrr_21 = \"None\" # \"None\" 5 2.5\n","config_list[0].loc_set.point1.wrr_32 = 0.5 # \"None\" 1 0.5 0.382 0.302\n","config_list[0].loc_set.point2.wrr_32 = 0.3 # \"None\" 1 0.5 0.382 0.302 0.25\n","config_list[0].loc_set.point2.csd_period = \"None\"  # \"None\" 100\n","config_list[0].loc_set.zone.use_zone = 0\n","config_list[0].loc_set.zone.bb_trend_period = 150\n","# config_list[0].loc_set.zone.hl_loc_pct = \"None\" # \"None\" 1 0.5\n","# config_list[0].loc_set.point1.cu_es = \"None\" # \"None\" # -2\n","# config_list[0].loc_set.point1.co_es = \"None\" # \"None\" # -3\n","# config_list[0].loc_set.point1.cppr = 0.5   # \"None\" # 0.5 0.7\n","# config_list[0].loc_set.point1.wbr = \"None\" # 0.7\n","# config_list[0].loc_set.point1.dbr = \"None\"   # 0.7\n","# config_list[0].loc_set.point1.dbr2 = \"None\"  # 0.7\n","# config_list[0].loc_set.point1.brr = \"None\"   # 0.8\n","# config_list[0].loc_set.point1.ir = \"None\" # \"None\" 0.8\n","# config_list[0].loc_set.point1.wick_score_list = \"[]\"\n","# config_list[0].loc_set.point1.score_itv_list = \"['H']\"\n","# # config_list[0].loc_set.point1.abs_ratio = \"None\"  # 0.7\n","config_list[0].loc_set.point1.short_tr_thresh = \"None\"  #  \"None\" 0.5 2 0.8 # # 0.7 # tr_thresh 엄청 민감함\n","config_list[0].loc_set.point1.long_tr_thresh = 0.5  #  \"None\" 2 0.8 ## 0.7\n","# # config_list[0].loc_set.zone.base_roll_period = 60"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2544,"status":"ok","timestamp":1656644243549,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"9DPgykxQ92mU","outputId":"9baccc13-e8d5-4ead-ddbe-9aae5969d83f"},"outputs":[{"output_type":"stream","name":"stderr","text":["cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.58403 0.50000 (0.0)\n","co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.50000 (0.0)\n","cu_wrr_32_ <= config.loc_set.point2.wrr_32 : 0.54867 0.30000 (0.0)\n","co_wrr_32_ <= config.loc_set.point2.wrr_32 : 1.00000 0.30000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 1.3992493152618408\n","get_open_info_df elapsed time : 1.3434207439422607\n"]}],"source":["open_info_df1 = get_open_info_df_v2(ep_loc_p1_v3, res_df, np_timeidx, ID_list, config_list, id_idx_list, open_num=1)  # --> point * dur. 관련 (loc_set) param 에 종속 (open_info 가 변경되는게 아니라면, 재실행할 필요없음)\n","open_info_df2 = get_open_info_df_v2(ep_loc_p2_v3, res_df, np_timeidx, ID_list, config_list, id_idx_list, open_num=2)\n","open_info_df_list = [open_info_df1, open_info_df2]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KqVkg236t_f2"},"outputs":[],"source":["# ------ edit entry & exit (ep, tp, out, ..) config ------ #\n","# config_list[0].tr_set.expire_k = -0.5\n","# config_list[0].tr_set.expire_tick = \"None\"\n","# config_list[0].tr_set.p2_box_k1 = 0\n","config_list[0].tr_set.p2_box_k2 = 0.5  # 0.5 0 --> \"None\" 불가, 0 ~ 1 사이 값 사용 tp_0 로부터 떨어지는 거리, 본디 p2_box 는 p1_box 내부에 존재해야, 정확한 hhm 이 측정가능해짐\n","config_list[0].tr_set.p1p2_low = 0.2  # 0.5 0  0 is equal to \"None\", 마찬가지로 tp_0 로부터 떨어지는 거리\n","# # # config_list[0].ep_set.point2.use_point2 = 1\n","# # # config_list[0].ep_set.point2.entry_type = \"LIMIT\"\n","# # # config_list[0].ep_set.point2.wick_score_list = str([])\n","# # # config_list[0].tp_set.static_tp = 1\n","# # # config_list[0].tp_set.non_tp = 0 # 0 1\n","# config_list[0].tp_set.p_ranges = \"[1]\"\n","# config_list[0].tp_set.p_qty_ratio = \"[1]\"\n","# config_list[0].tp_set.p_ranges = \"[0.2, 0.66, 1]\"\n","# config_list[0].tp_set.p_qty_ratio = \"[0.25, 0.25, 0.5]\"\n","# config_list[0].tp_set.p_ranges = \"[0.66, 1]\"\n","# config_list[0].tp_set.p_qty_ratio = \"[0.3, 0.7]\"\n","# # # config_list[0].out_set.hl_out = 1\n","# # # config_list[0].out_set.tf_exit = \"None\" # 15 \"None\"\n","config_list[0].lvrg_set.leverage = 1\n","config_list[0].lvrg_set.static_lvrg = 0\n","config_list[0].lvrg_set.target_pct = 0.1  # 0.1 0.03\n","# # config_list[0].lvrg_set.allow_float = 0\n","# config_list[0].lvrg_set.lvrg_rejection = 0"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":664},"executionInfo":{"elapsed":3220,"status":"ok","timestamp":1656644367283,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"HHq6cr9GPBot","outputId":"f74b9ffa-1134-498c-ab0b-7dc96edb3ed8"},"outputs":[{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 0.5391249656677246\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1728x576 with 6 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 1.975053310394287\n"]}],"source":["test_ratio = 0.0\n","short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_tr_arr, short_bias_arr, short_p2_idx_arr, short_tp_1, short_tp_0, short_out_1, short_out_0, short_ep2_0, \\\n","      long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_tr_arr, long_bias_arr, long_p2_idx_arr, long_tp_1, long_tp_0, long_out_1, long_out_0, long_ep2_0 = \\\n","get_res_v9(res_df, open_info_df_list, ohlc_list, config_list, np_timeidx, funcs, test_ratio=test_ratio, plot_is=1, signi=0, show_detail=0)   # open 이 많을 수록 en_ex_pairing elapsed time : 11.58370590209961"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8lYgsqH-rfAM"},"outputs":[],"source":["# ------ inversion ------ #\n","_ = get_res_v5(res_df, open_info_df, ohlc_list, config_list, np_timeidx, funcs, inversion=True, test_ratio=test_ratio, plot_is=1, signi=False)"]},{"cell_type":"markdown","metadata":{"id":"n6gc7lERC4VE"},"source":["### statistics (stem 별로 진행)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HHjIdn2MC4VE"},"outputs":[],"source":["selection_id = config.selection_id\n","\n","short_p1_idx = short_obj[-1].astype(int)\n","long_p1_idx = long_obj[-1].astype(int)\n","\n","short_open_tp_1 = res_df['short_tp_1_{}'.format(selection_id)].to_numpy()[short_p1_idx]\n","long_open_tp_1 = res_df['long_tp_1_{}'.format(selection_id)].to_numpy()[long_p1_idx]\n","\n","short_open_tp_0 = res_df['short_tp_0_{}'.format(selection_id)].to_numpy()[short_p1_idx]\n","long_open_tp_0 = res_df['long_tp_0_{}'.format(selection_id)].to_numpy()[long_p1_idx]\n","\n","short_open_tp_gap = res_df['short_tp_gap_{}'.format(selection_id)].to_numpy()[short_p1_idx]  # use open_i\n","long_open_tp_gap = res_df['long_tp_gap_{}'.format(selection_id)].to_numpy()[long_p1_idx]\n","\n","short_open_out_0 = res_df['short_out_0_{}'.format(selection_id)].to_numpy()[short_p1_idx]\n","long_open_out_0 = res_df['long_out_0_{}'.format(selection_id)].to_numpy()[long_p1_idx]\n","\n","short_open_out_gap = res_df['short_out_gap_{}'.format(selection_id)].to_numpy()[short_p1_idx]  # use open_i\n","long_open_out_gap = res_df['long_out_gap_{}'.format(selection_id)].to_numpy()[long_p1_idx]\n","\n","# ------ out case 의 max_high check (long) ------ #\n","short_max_tpg = get_max_tpg_v2(\"SELL\", ohlc_list, short_pr, short_obj[:4], short_open_tp_1, short_open_tp_gap)\n","long_max_tpg = get_max_tpg_v2(\"BUY\", ohlc_list, long_pr, long_obj[:4], long_open_tp_1, long_open_tp_gap)\n","# short_max_tpg = get_max_tpg_v2(\"SELL\", ohlc_list, short_pr, short_obj[:4], short_open_tp_1, short_open_out_gap)\n","# long_max_tpg = get_max_tpg_v2(\"BUY\", ohlc_list, long_pr, long_obj[:4], long_open_tp_1, long_open_out_gap)\n","\n","# ------ true_bias 의 outg 확인 ------ #\n","short_max_outg = get_max_outg_v4(\"SELL\", config, ohlc_list, short_obj, short_tpout_arr, short_open_tp_0, short_open_tp_gap)\n","long_max_outg = get_max_outg_v4(\"BUY\", config, ohlc_list, long_obj, long_tpout_arr, long_open_tp_0, long_open_tp_gap)\n","\n","current_tpg = config.tr_set.tp_gap\n","current_outg = config.tr_set.out_gap"]},{"cell_type":"markdown","metadata":{"id":"tOFkzUX2imQu"},"source":["#### consecutive dur. value survey on bias"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CgvSrXaZEkMZ"},"outputs":[],"source":["res_df.dtypes"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gnSvYKIzC4VF"},"outputs":[],"source":["# ------------ dependent vars. ------------ #\n","# res_df 에 존재하는 col 는 모두 사용가능함\n","\n","# ------ 1. 도출한 outg 와 vars. pairing 진행 (by valid_idx) ------ #\n","devided_cols, public_cols = [], []\n","\n","devided_cols.append('tr_{}'.format(selection_id))\n","\n","wave_itv1 = 'T'\n","wave_period1 = config.tr_set.wave_period1\n","\n","# public_cols.append('cu_wrr_21_{}{}'.format(wave_itv1, wave_period1))\n","public_cols.append('cu_wrr_32_{}{}'.format(wave_itv1, wave_period1))\n","# public_cols.append('co_wrr_21_{}{}'.format(wave_itv1, wave_period1))\n","public_cols.append('co_wrr_32_{}{}'.format(wave_itv1, wave_period1))\n","\n","# public_cols.append('wave_high_terms_cnt_fill_T5')\n","# public_cols.append('wave_low_terms_cnt_fill_T5')\n","# public_cols.append('wave_high_loc_pct_T5')\n","# public_cols.append('wave_low_loc_pct_T5')\n","\n","# public_cols.append('b1_co_es_15T1')\n","# public_cols.append('b1_cu_es_15T1')\n","# public_cols.append('b1_upper_wick_ratio_15T')\n","# public_cols.append('b1_lower_wick_ratio_15T')\n","\n","#  'co_wrr_T5', 'cu_wrr_T5', 'b1_cppr_15T', 'b1_updbr', 'b1_lwdbr', 'b1_updbr_cppr', 'b1_lwdbr_cppr' 'abs_ratio_5T', 'rel_ratio_5T', 'body_rel_ratio_5T'\n","\n","# devided_cols = ['tr_{}'.format(selection_id)]  # , 'ir_5T'\n","# public_cols = ['wave_high_terms_cnt_fill_T5', 'wave_low_terms_cnt_fill_T5', 'wave_high_loc_pct_T5', 'wave_low_loc_pct_T5', \n","#                'b1_co_es_15T1', 'b1_cu_es_15T1', 'b1_upper_wick_ratio_15T', 'b1_lower_wick_ratio_15T']\n","\n","short_datas = [res_df['short_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","long_datas = [res_df['long_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","\n","titles = devided_cols + public_cols"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":968},"executionInfo":{"elapsed":3342,"status":"ok","timestamp":1653807810574,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"Sahvc-R0jD1A","outputId":"6b83ac35-819d-487b-bf38-42144ad04c3b"},"outputs":[{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/numpy/core/fromnumeric.py:3208: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  return asarray(a).size\n","/usr/local/lib/python3.7/dist-packages/matplotlib/cbook/__init__.py:1376: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  X = np.atleast_1d(X.T if isinstance(X, np.ndarray) else np.asarray(X))\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 1008x1080 with 12 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(14, len(titles) * 5))\n","nrows, ncols = len(short_datas), 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        )\n","\n","num_samples = 30\n","alpha = 0.8\n","xmin = 0\n","xmax = 10\n","\n","for ings_idx, (title, short_data, long_data) in enumerate(zip(titles, short_datas, long_datas)):\n","  inner_gs = gs[ings_idx].subgridspec(nrows=2, ncols=2)\n","\n","  short_open_data = short_data[short_p1_idx]\n","  long_open_data = long_data[long_p1_idx]\n","\n","  short_true_data = short_open_data[short_bias_arr.ravel()]\n","  # short_false_data = short_open_data[short_false_bias_arr.ravel()]\n","  short_false_data = short_open_data[~short_bias_arr.ravel()]\n","  long_true_data = long_open_data[long_bias_arr.ravel()]\n","  # long_false_data = long_open_data[long_false_bias_arr.ravel()]\n","  long_false_data = long_open_data[~long_bias_arr.ravel()]\n","  \n","  short_true_valid_idx = np.ones_like(short_true_data).astype(bool)\n","  short_false_valid_idx = np.ones_like(short_false_data).astype(bool)\n","  long_true_valid_idx = np.ones_like(long_true_data).astype(bool)\n","  long_false_valid_idx = np.ones_like(long_false_data).astype(bool)\n","\n","  short_true_valid_idx *= ~np.isinf(short_true_data)\n","  short_false_valid_idx *= ~np.isinf(short_false_data)\n","  long_true_valid_idx *= ~np.isinf(long_true_data)\n","  long_false_valid_idx *= ~np.isinf(long_false_data)\n","\n","  try:\n","    short_true_valid_idx *= short_true_data > xmin\n","    short_false_valid_idx *= short_false_data > xmin\n","    long_true_valid_idx *= long_true_data > xmin\n","    long_false_valid_idx *= long_false_data > xmin\n","\n","  except:\n","    pass\n","\n","  try:\n","    short_true_valid_idx *= short_true_data < xmax\n","    short_false_valid_idx *= short_false_data < xmax\n","    long_true_valid_idx *= long_true_data < xmax\n","    long_false_valid_idx *= long_false_data < xmax\n","    \n","  except:\n","    pass\n","    \n","  plt.subplot(inner_gs[0])\n","  ns, bins, patches = plt.hist([short_true_data[short_true_valid_idx], short_false_data[short_false_valid_idx]], \n","           bins=num_samples, alpha=alpha, color=['#00ff00', '#ff0000'], edgecolor='black')  \n","  plt.title('short_' + title)  \n","\n","  plt.subplot(inner_gs[2])\n","  total_ns = np.sum(ns, axis=0)\n","  hist_ratio = ns[0] / total_ns\n","  # valid_idx = total_ns > 1\n","  valid_idx = np.full(len(hist_ratio), True)\n","  valid_hist_ratio = hist_ratio[valid_idx]\n","  plt.hist(bins[:-1][valid_idx], weights=valid_hist_ratio, bins=num_samples, color='#00ff00', edgecolor='black')\n","  plt.ylim(0, 1)\n","  \n","\n","  plt.subplot(inner_gs[1])\n","  ns, bins, patches = plt.hist([long_true_data[long_true_valid_idx], long_false_data[long_false_valid_idx]], \n","           bins=num_samples, alpha=alpha, color=['#00ff00', '#ff0000'], edgecolor='black')\n","  plt.title('long_' + title)\n","  \n","  plt.subplot(inner_gs[3])\n","  total_ns = np.sum(ns, axis=0)\n","  hist_ratio = ns[0] / total_ns\n","  # valid_idx = total_ns > 1\n","  valid_idx = np.full(len(hist_ratio), True)\n","  valid_hist_ratio = hist_ratio[valid_idx]\n","  plt.hist(bins[:-1][valid_idx], weights=valid_hist_ratio, bins=num_samples, color='#00ff00', edgecolor='black')\n","  plt.ylim(0, 1)\n","\n","  \n","# plt.suptitle(title)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"Arnb-kXlC4VF"},"source":["#### tpg & outg survey"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":881},"executionInfo":{"elapsed":1048,"status":"ok","timestamp":1655247369557,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"jHh0uFkXC4VF","outputId":"4b52c9bd-27b5-419c-8cc7-2ea8842b4a72"},"outputs":[{"name":"stdout","output_type":"stream","text":["216\n","516\n","216\n","516\n","216\n","516\n","216\n","516\n","pkx : [0.05938207 0.14572174 0.35293692 0.75009936]\n","pkx : [0.09674712 0.29884854 0.77654281]\n","\n","56\n","84\n","56\n","84\n","56\n","84\n","56\n","84\n","pkx : [-0.23163787 -0.16862213 -0.14386594 -0.10785695 -0.07409851 -0.0155839 ]\n","pkx : [-0.32640606 -0.24710795 -0.18102619 -0.11494443 -0.03234223]\n","\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 864x576 with 4 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# 1. outg 는 partial 을 위한 histogram 작성 진행\n","# 현재, outg 내부에는 tp 한것과 out 한것이 공존하는 상태\n","titles = ['outg', 'tpg']\n","short_max_datas = [short_max_outg[short_bias_arr], short_max_tpg]\n","long_max_datas = [long_max_outg[long_bias_arr], long_max_tpg]\n","\n","# titles = ['tpg']\n","# short_max_datas = [short_max_tpg]\n","# long_max_datas = [long_max_tpg]\n","\n","plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(12, 8))\n","nrows, ncols = 2, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        )\n","  \n","for ings_idx, (title, short_max_data, long_max_data) in enumerate(zip(titles, short_max_datas, long_max_datas)):\n","\n","  inner_gs = gs[ings_idx].subgridspec(nrows=1, ncols=2)\n","  if ings_idx == 0:\n","    axvline = current_outg\n","    title_add = 'true_' + title\n","  else:\n","    axvline = current_tpg\n","    title_add = 'false_' + title\n","\n","  print(len(short_max_data))\n","  print(len(long_max_data))\n","\n","  short_plot_idx = np.ones_like(short_max_data).astype(bool)\n","  long_plot_idx = np.ones_like(long_max_data).astype(bool)\n","  # short_plot_idx = short_max_data <= axvline\n","  # long_plot_idx = long_max_data <= axvline\n","\n","  print(np.sum(short_plot_idx))\n","  print(np.sum(long_plot_idx))    \n","\n","  short_plot_idx *= ~np.isnan(short_max_data)\n","  long_plot_idx *= ~np.isnan(long_max_data)  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(short_plot_idx))\n","  print(np.sum(long_plot_idx))\n","\n","  short_plot_idx *= ~np.isinf(short_max_data)\n","  long_plot_idx *= ~np.isinf(long_max_data)  # nan 과 inf 때문에 이 방식 채택\n","  \n","  print(np.sum(short_plot_idx))\n","  print(np.sum(long_plot_idx))\n","    \n","  plt.subplot(inner_gs[0])\n","  kde_plot_v2(*np.unique(short_max_data[short_plot_idx], return_counts=True))\n","  plt.title('short_' + title_add)  \n","  plt.axvline(axvline, color='red', linewidth=3)\n","\n","  plt.subplot(inner_gs[1])\n","  kde_plot_v2(*np.unique(long_max_data[long_plot_idx], return_counts=True))\n","  plt.title('long_' + title_add)\n","  plt.axvline(axvline, color='red', linewidth=3)\n","\n","  print()\n","\n","# plt.suptitle(title)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"mScdfR9hmjVu"},"source":["#### legacy"]},{"cell_type":"markdown","metadata":{"id":"xivLUsSGC4VF"},"source":["##### outg survey for precision (eploc vars. dependency)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LB28R3QIjCDc"},"outputs":[],"source":["# ------------ dependent vars. ------------ #\n","# res_df 에 존재하는 col 는 모두 사용가능함\n","# ------ 1. 도출한 outg 와 vars. pairing 진행 (by valid_idx) ------ #\n","devided_cols = ['tr_{}'.format(strat_version)]  # , 'ir_5T'\n","public_cols = ['wave_body_ratio']  # 'abs_ratio_5T', 'rel_ratio_5T', 'body_rel_ratio_5T'\n","\n","short_datas = [res_df['short_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","long_datas = [res_df['long_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","\n","titles = devided_cols + public_cols"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nX9TpLcvFu7T"},"outputs":[],"source":["plot_outg_range = (-1, 10)\n","plot_data_range = (-10, 100)\n","\n","plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(12, 18))\n","nrows, ncols = len(short_datas), 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        )\n","\n","for ings_idx, (title, short_data, long_data) in enumerate(zip(titles, short_datas, long_datas)):\n","  inner_gs = gs[ings_idx].subgridspec(nrows=1, ncols=2)\n","\n","  print(len(long_max_outg))\n","\n","  short_plot_idx = (plot_outg_range[0] <= short_max_outg) & (short_max_outg <= plot_outg_range[1])\n","  long_plot_idx = (plot_outg_range[0] <= long_max_outg) & (long_max_outg <= plot_outg_range[1])  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_open_data = short_data[short_open_idx]\n","  long_open_data = long_data[long_open_idx]\n","  \n","  short_plot_idx *= (plot_data_range[0] <= short_open_data) * (short_open_data <= plot_data_range[1])\n","  long_plot_idx *= (plot_data_range[0] <= long_open_data) * (long_open_data <= plot_data_range[1]) # nan 과 inf 때문에 이 방식 채택\n","\n","  short_plot_idx *= ~np.isnan(short_open_data)\n","  long_plot_idx *= ~np.isnan(long_open_data)  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_plot_idx *= ~np.isinf(short_open_data)\n","  long_plot_idx *= ~np.isinf(long_open_data)  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_true_idx = short_plot_idx * short_true_open_idxth\n","  long_true_idx = long_plot_idx * long_true_open_idxth\n","  \n","  short_false_idx = short_plot_idx * ~short_true_open_idxth\n","  long_false_idx = long_plot_idx * ~long_true_open_idxth\n","\n","  plt.subplot(inner_gs[0])\n","  # ------ true_bias ------ #\n","  x, y = short_max_outg[short_true_idx].ravel(), short_open_data[short_true_idx].ravel()  \n","  plt.scatter(x, y, color='white', alpha=0.5)\n","  # ------ false_bias ------ #\n","  x, y = short_max_outg[short_false_idx].ravel(), short_open_data[short_false_idx].ravel()\n","  plt.scatter(x, y, color='fuchsia', alpha=0.3)\n","  plt.axvline(current_outg, color='red', linewidth=3)\n","  plt.title(\"{} coef : {:0.3f}\".format(title, np.corrcoef(-x, y)[0, 1]))\n","\n","  plt.subplot(inner_gs[1])    \n","  # ------ true_bias ------ #\n","  x, y = long_max_outg[long_true_idx].ravel(), long_open_data[long_true_idx].ravel()  \n","  plt.scatter(x, y, color='white', alpha=0.5)\n","  # ------ false_bias ------ #\n","  x, y = long_max_outg[long_false_idx].ravel(), long_open_data[long_false_idx].ravel()\n","  plt.scatter(x, y, color='fuchsia', alpha=0.3)\n","  plt.axvline(current_outg, color='red', linewidth=3)\n","  plt.title(\"{} coef : {:0.3f}\".format(title, np.corrcoef(-x, y)[0, 1]))\n","\n","  print()  \n","\n","# plt.suptitle(title)\n","plt.show()\n","# print()"]},{"cell_type":"markdown","metadata":{"id":"983aUwM76s6X"},"source":["#### dump"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"p_e8PtFXa7mc"},"outputs":[],"source":["# len(np.unique(long_obj[-1]))\n","p1_hhm_p1_idx = long_obj[-1]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nLZDkNNxbZPO"},"outputs":[],"source":["p1_hlm_p1_idx = long_obj[-1]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":261,"status":"ok","timestamp":1653452376525,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"WhCPOi1qbkHS","outputId":"e3b8db71-3e48-4177-a3fe-9f891a362596"},"outputs":[{"data":{"text/plain":["array([350065., 440065., 502833., 735204., 836258.])"]},"execution_count":161,"metadata":{},"output_type":"execute_result"}],"source":["# len(p1_hhm_p1_idx[~np.isin(p1_hhm_p1_idx, p1_hlm_p1_idx)])\n","p1_hlm_p1_idx[~np.isin(p1_hlm_p1_idx, p1_hhm_p1_idx)]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wgERZ65F5RBB"},"outputs":[],"source":["org_p1_idx = long_p2_idx_arr  # long_obj[-1]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rAao95SEnOY0"},"outputs":[],"source":["new_p1_idx = long_p2_idx_arr  # long_obj[-1]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":267,"status":"ok","timestamp":1653119592395,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"OEQ9KWXVnQ2J","outputId":"85c3e998-5c1e-4b5a-8366-28fe8cc3639b"},"outputs":[{"name":"stdout","output_type":"stream","text":["153\n","163\n"]},{"data":{"text/plain":["array([ 35609, 105164, 188999, 347399, 358994, 379304, 379544, 397274, 482474, 550919, 656774, 833129])"]},"execution_count":220,"metadata":{},"output_type":"execute_result"}],"source":["uniq_org_p1_idx = np.unique(org_p1_idx)\n","uniq_new_p1_idx = np.unique(new_p1_idx)\n","print(len(uniq_org_p1_idx))\n","print(len(uniq_new_p1_idx))\n","uniq_new_p1_idx[~np.isin(uniq_new_p1_idx, uniq_org_p1_idx)]\n","# np.unique(new_p1_idx).remove(np.unique(org_p1_idx))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hOtCGUeBQ4hn"},"outputs":[],"source":["open_idx = open_info_df.index.to_numpy()\n","# len_df = len(res_df)\n","# s_idx = (open_idx < int(len_df * (1 - test_ratio))) == plot_is\n","# s_open_info_df = open_info_df[s_idx]\n","# s_open_idx = open_idx[s_idx]\n","\n","# open_info_list = [s_open_info_df[col_].to_numpy() for col_ in s_open_info_df.columns]\n","# side_arr, zone_arr, id_arr, id_idx_arr = open_info_list\n","\n","long_open_ = res_df['long_open_{}'.format(config.selection_id)].to_numpy()\n","short_open_ = res_df['short_open_{}'.format(config.selection_id)].to_numpy()\n","\n","long_open_idx = get_index_bybool(long_open_, np.arange(len(res_df)))\n","short_open_idx = get_index_bybool(short_open_, np.arange(len(res_df)))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QPhjkZQhRLqr"},"outputs":[],"source":["valid_long_open_idx = long_open_idx[~np.isnan(long_open_idx)]\n","valid_short_open_idx = short_open_idx[~np.isnan(short_open_idx)]\n","\n","# print(valid_long_open_idx[valid_long_open_idx > 4000][:10])\n","# print(valid_short_open_idx[valid_short_open_idx > 4000][:10])\n","\n","print(open_idx[open_idx > 4000][:10])\n","\n","print(np.hstack((long_obj[-1], long_obj[3]))[:10])\n","print(np.hstack((short_obj[-1], short_obj[3]))[:10])\n","# print([:10])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cFd7Fz0Y6ucU"},"outputs":[],"source":["# short_max_outg, short_outg_open_idx = get_max_outg_v2(\"SELL\", config, ohlc_list, short_obj, short_tpout_arr, short_open_epout_0, short_open_epout_gap)\n","# long_max_outg, long_outg_open_idx = get_max_outg_v2(\"BUY\", config, ohlc_list, long_obj, long_tpout_arr, long_open_epout_0, long_open_epout_gap)\n","# short_max_outg, short_open_idx, short_true_open_idxth = get_max_outg_v3(\"SELL\", config, ohlc_list, short_obj, short_tpout_arr, short_open_epout_0, short_open_epout_gap)\n","# long_max_outg, long_open_idx, long_true_open_idxth = get_max_outg_v3(\"BUY\", config, ohlc_list, long_obj, long_tpout_arr, long_open_epout_0, long_open_epout_gap)"]},{"cell_type":"markdown","metadata":{"id":"EtjwB7Qk-Grj"},"source":["### significance_v4"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":78277,"status":"ok","timestamp":1655562981508,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"oVifICO4-Grk","outputId":"99e914ea-98d2-4c52-c01e-d4c18738154e"},"outputs":[{"name":"stderr","output_type":"stream","text":["wave_point\n","np.sum(short_open_res1 == 1) : 33720\n","np.sum(long_open_res1 == 1) : 33938\n","np.sum(short_open_res2 == 1) : 33720\n","np.sum(long_open_res2 == 1) : 33938\n","reject update_hl\n","np.sum(short_open_res1 == 1) : 32885\n","np.sum(long_open_res1 == 1) : 32850\n","np.sum(short_open_res2 == 1) : 32885\n","np.sum(long_open_res2 == 1) : 32850\n","wave_mm\n","np.sum(short_open_res1 == 1) : 32882\n","np.sum(long_open_res1 == 1) : 32849\n","np.sum(short_open_res2 == 1) : 32882\n","np.sum(long_open_res2 == 1) : 32849\n","point validation\n","np.sum(short_open_res1 == 1) : 32874\n","np.sum(long_open_res1 == 1) : 32843\n","np.sum(short_open_res2 == 1) : 20150\n","np.sum(long_open_res2 == 1) : 20410\n","cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n","co_wrr_32_ <= config.loc_set.point1.wrr_32 : 4.46870 0.30000 (0.0)\n","cu_wrr_32_ <= config.loc_set.point2.wrr_32 : 1.00000 1.00000 (1.0)\n"]},{"name":"stdout","output_type":"stream","text":["get_open_info_df elapsed time : 0.9718692302703857\n"]},{"name":"stderr","output_type":"stream","text":["co_wrr_32_ <= config.loc_set.point2.wrr_32 : 4.46870 1.00000 (0.0)\n"]},{"name":"stdout","output_type":"stream","text":["get_open_info_df elapsed time : 1.069481611251831\n","en_ex_pairing elapsed time : 0.48963069915771484\n","idep_plot elapsed time : 0.19661450386047363\n"]},{"name":"stderr","output_type":"stream","text":["wave_point\n","np.sum(short_open_res1 == 1) : 33720\n","np.sum(long_open_res1 == 1) : 33938\n","np.sum(short_open_res2 == 1) : 33720\n","np.sum(long_open_res2 == 1) : 33938\n","reject update_hl\n","np.sum(short_open_res1 == 1) : 32885\n","np.sum(long_open_res1 == 1) : 32850\n","np.sum(short_open_res2 == 1) : 32885\n","np.sum(long_open_res2 == 1) : 32850\n","wave_mm\n","np.sum(short_open_res1 == 1) : 32882\n","np.sum(long_open_res1 == 1) : 32849\n","np.sum(short_open_res2 == 1) : 32882\n","np.sum(long_open_res2 == 1) : 32849\n","point validation\n","np.sum(short_open_res1 == 1) : 32874\n","np.sum(long_open_res1 == 1) : 32843\n","np.sum(short_open_res2 == 1) : 20150\n","np.sum(long_open_res2 == 1) : 20410\n","cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n","co_wrr_32_ <= config.loc_set.point1.wrr_32 : 4.46870 0.30000 (0.0)\n","cu_wrr_32_ <= config.loc_set.point2.wrr_32 : 1.00000 1.00000 (1.0)\n"]},{"name":"stdout","output_type":"stream","text":["get_open_info_df elapsed time : 0.9608440399169922\n"]},{"name":"stderr","output_type":"stream","text":["co_wrr_32_ <= config.loc_set.point2.wrr_32 : 4.46870 1.00000 (0.0)\n"]},{"name":"stdout","output_type":"stream","text":["get_open_info_df elapsed time : 1.0421018600463867\n","en_ex_pairing elapsed time : 0.4900686740875244\n"]},{"name":"stderr","output_type":"stream","text":["wave_point\n","np.sum(short_open_res1 == 1) : 33720\n","np.sum(long_open_res1 == 1) : 33938\n","np.sum(short_open_res2 == 1) : 33720\n","np.sum(long_open_res2 == 1) : 33938\n","reject update_hl\n","np.sum(short_open_res1 == 1) : 32885\n","np.sum(long_open_res1 == 1) : 32850\n","np.sum(short_open_res2 == 1) : 32885\n","np.sum(long_open_res2 == 1) : 32850\n","wave_mm\n","np.sum(short_open_res1 == 1) : 32882\n","np.sum(long_open_res1 == 1) : 32849\n","np.sum(short_open_res2 == 1) : 32882\n","np.sum(long_open_res2 == 1) : 32849\n"]},{"name":"stdout","output_type":"stream","text":["idep_plot elapsed time : 0.20415735244750977\n"]},{"name":"stderr","output_type":"stream","text":["point validation\n","np.sum(short_open_res1 == 1) : 32874\n","np.sum(long_open_res1 == 1) : 32843\n","np.sum(short_open_res2 == 1) : 20150\n","np.sum(long_open_res2 == 1) : 20410\n","cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n","co_wrr_32_ <= config.loc_set.point1.wrr_32 : 4.46870 0.30000 (0.0)\n","cu_wrr_32_ <= config.loc_set.point2.wrr_32 : 1.00000 1.00000 (1.0)\n"]},{"name":"stdout","output_type":"stream","text":["get_open_info_df elapsed time : 0.9762113094329834\n"]},{"name":"stderr","output_type":"stream","text":["co_wrr_32_ <= config.loc_set.point2.wrr_32 : 4.46870 1.00000 (0.0)\n"]},{"name":"stdout","output_type":"stream","text":["get_open_info_df elapsed time : 1.0472276210784912\n","en_ex_pairing elapsed time : 0.4884374141693115\n","idep_plot elapsed time : 0.1992168426513672\n"]},{"name":"stderr","output_type":"stream","text":["wave_point\n","np.sum(short_open_res1 == 1) : 33720\n","np.sum(long_open_res1 == 1) : 33938\n","np.sum(short_open_res2 == 1) : 33720\n","np.sum(long_open_res2 == 1) : 33938\n","reject update_hl\n","np.sum(short_open_res1 == 1) : 32885\n","np.sum(long_open_res1 == 1) : 32850\n","np.sum(short_open_res2 == 1) : 32885\n","np.sum(long_open_res2 == 1) : 32850\n","wave_mm\n","np.sum(short_open_res1 == 1) : 32882\n","np.sum(long_open_res1 == 1) : 32849\n","np.sum(short_open_res2 == 1) : 32882\n","np.sum(long_open_res2 == 1) : 32849\n","point validation\n","np.sum(short_open_res1 == 1) : 32874\n","np.sum(long_open_res1 == 1) : 32843\n","np.sum(short_open_res2 == 1) : 20150\n","np.sum(long_open_res2 == 1) : 20410\n","cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n","co_wrr_32_ <= config.loc_set.point1.wrr_32 : 4.46870 0.30000 (0.0)\n","cu_wrr_32_ <= config.loc_set.point2.wrr_32 : 1.00000 1.00000 (1.0)\n"]},{"name":"stdout","output_type":"stream","text":["get_open_info_df elapsed time : 0.9757428169250488\n"]},{"name":"stderr","output_type":"stream","text":["co_wrr_32_ <= config.loc_set.point2.wrr_32 : 4.46870 1.00000 (0.0)\n"]},{"name":"stdout","output_type":"stream","text":["get_open_info_df elapsed time : 1.061593770980835\n","en_ex_pairing elapsed time : 0.4922516345977783\n"]},{"name":"stderr","output_type":"stream","text":["wave_point\n","np.sum(short_open_res1 == 1) : 33720\n","np.sum(long_open_res1 == 1) : 33938\n","np.sum(short_open_res2 == 1) : 33720\n","np.sum(long_open_res2 == 1) : 33938\n","reject update_hl\n","np.sum(short_open_res1 == 1) : 32885\n","np.sum(long_open_res1 == 1) : 32850\n","np.sum(short_open_res2 == 1) : 32885\n","np.sum(long_open_res2 == 1) : 32850\n","wave_mm\n","np.sum(short_open_res1 == 1) : 32882\n","np.sum(long_open_res1 == 1) : 32849\n","np.sum(short_open_res2 == 1) : 32882\n","np.sum(long_open_res2 == 1) : 32849\n","point validation\n","np.sum(short_open_res1 == 1) : 32874\n","np.sum(long_open_res1 == 1) : 32843\n","np.sum(short_open_res2 == 1) : 20150\n","np.sum(long_open_res2 == 1) : 20410\n","cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n","co_wrr_32_ <= config.loc_set.point1.wrr_32 : 4.46870 0.30000 (0.0)\n","cu_wrr_32_ <= config.loc_set.point2.wrr_32 : 1.00000 1.00000 (1.0)\n"]},{"name":"stdout","output_type":"stream","text":["idep_plot elapsed time : 0.20275139808654785\n","get_open_info_df elapsed time : 0.9718272686004639\n"]},{"name":"stderr","output_type":"stream","text":["co_wrr_32_ <= config.loc_set.point2.wrr_32 : 4.46870 1.00000 (0.0)\n"]},{"name":"stdout","output_type":"stream","text":["get_open_info_df elapsed time : 1.0611577033996582\n","en_ex_pairing elapsed time : 0.49936604499816895\n","idep_plot elapsed time : 0.1955404281616211\n"]},{"name":"stderr","output_type":"stream","text":["wave_point\n","np.sum(short_open_res1 == 1) : 33720\n","np.sum(long_open_res1 == 1) : 33938\n","np.sum(short_open_res2 == 1) : 33720\n","np.sum(long_open_res2 == 1) : 33938\n","reject update_hl\n","np.sum(short_open_res1 == 1) : 32885\n","np.sum(long_open_res1 == 1) : 32850\n","np.sum(short_open_res2 == 1) : 32885\n","np.sum(long_open_res2 == 1) : 32850\n","wave_mm\n","np.sum(short_open_res1 == 1) : 32882\n","np.sum(long_open_res1 == 1) : 32849\n","np.sum(short_open_res2 == 1) : 32882\n","np.sum(long_open_res2 == 1) : 32849\n","point validation\n","np.sum(short_open_res1 == 1) : 32874\n","np.sum(long_open_res1 == 1) : 32843\n","np.sum(short_open_res2 == 1) : 20150\n","np.sum(long_open_res2 == 1) : 20410\n","cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n","co_wrr_32_ <= config.loc_set.point1.wrr_32 : 4.46870 0.30000 (0.0)\n","cu_wrr_32_ <= config.loc_set.point2.wrr_32 : 1.00000 1.00000 (1.0)\n"]},{"name":"stdout","output_type":"stream","text":["get_open_info_df elapsed time : 0.9695820808410645\n"]},{"name":"stderr","output_type":"stream","text":["co_wrr_32_ <= config.loc_set.point2.wrr_32 : 4.46870 1.00000 (0.0)\n"]},{"name":"stdout","output_type":"stream","text":["get_open_info_df elapsed time : 1.0577938556671143\n","en_ex_pairing elapsed time : 0.482999324798584\n","idep_plot elapsed time : 0.19686579704284668\n"]},{"name":"stderr","output_type":"stream","text":["wave_point\n","np.sum(short_open_res1 == 1) : 33720\n","np.sum(long_open_res1 == 1) : 33938\n","np.sum(short_open_res2 == 1) : 33720\n","np.sum(long_open_res2 == 1) : 33938\n","reject update_hl\n","np.sum(short_open_res1 == 1) : 32885\n","np.sum(long_open_res1 == 1) : 32850\n","np.sum(short_open_res2 == 1) : 32885\n","np.sum(long_open_res2 == 1) : 32850\n","wave_mm\n","np.sum(short_open_res1 == 1) : 32882\n","np.sum(long_open_res1 == 1) : 32849\n","np.sum(short_open_res2 == 1) : 32882\n","np.sum(long_open_res2 == 1) : 32849\n","point validation\n","np.sum(short_open_res1 == 1) : 32874\n","np.sum(long_open_res1 == 1) : 32843\n","np.sum(short_open_res2 == 1) : 20150\n","np.sum(long_open_res2 == 1) : 20410\n","cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n","co_wrr_32_ <= config.loc_set.point1.wrr_32 : 4.46870 0.30000 (0.0)\n","cu_wrr_32_ <= config.loc_set.point2.wrr_32 : 1.00000 1.00000 (1.0)\n"]},{"name":"stdout","output_type":"stream","text":["get_open_info_df elapsed time : 0.9735269546508789\n"]},{"name":"stderr","output_type":"stream","text":["co_wrr_32_ <= config.loc_set.point2.wrr_32 : 4.46870 1.00000 (0.0)\n"]},{"name":"stdout","output_type":"stream","text":["get_open_info_df elapsed time : 1.0826354026794434\n","en_ex_pairing elapsed time : 0.48934102058410645\n","idep_plot elapsed time : 0.19826126098632812\n"]},{"name":"stderr","output_type":"stream","text":["wave_point\n","np.sum(short_open_res1 == 1) : 33720\n","np.sum(long_open_res1 == 1) : 33938\n","np.sum(short_open_res2 == 1) : 33720\n","np.sum(long_open_res2 == 1) : 33938\n","reject update_hl\n","np.sum(short_open_res1 == 1) : 32885\n","np.sum(long_open_res1 == 1) : 32850\n","np.sum(short_open_res2 == 1) : 32885\n","np.sum(long_open_res2 == 1) : 32850\n","wave_mm\n","np.sum(short_open_res1 == 1) : 32882\n","np.sum(long_open_res1 == 1) : 32849\n","np.sum(short_open_res2 == 1) : 32882\n","np.sum(long_open_res2 == 1) : 32849\n","point validation\n","np.sum(short_open_res1 == 1) : 32874\n","np.sum(long_open_res1 == 1) : 32843\n","np.sum(short_open_res2 == 1) : 20150\n","np.sum(long_open_res2 == 1) : 20410\n","cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n","co_wrr_32_ <= config.loc_set.point1.wrr_32 : 4.46870 0.30000 (0.0)\n","cu_wrr_32_ <= config.loc_set.point2.wrr_32 : 1.00000 1.00000 (1.0)\n"]},{"name":"stdout","output_type":"stream","text":["get_open_info_df elapsed time : 0.9531569480895996\n"]},{"name":"stderr","output_type":"stream","text":["co_wrr_32_ <= config.loc_set.point2.wrr_32 : 4.46870 1.00000 (0.0)\n"]},{"name":"stdout","output_type":"stream","text":["get_open_info_df elapsed time : 1.055222511291504\n","en_ex_pairing elapsed time : 0.5082666873931885\n"]},{"name":"stderr","output_type":"stream","text":["wave_point\n","np.sum(short_open_res1 == 1) : 33720\n","np.sum(long_open_res1 == 1) : 33938\n","np.sum(short_open_res2 == 1) : 33720\n","np.sum(long_open_res2 == 1) : 33938\n","reject update_hl\n","np.sum(short_open_res1 == 1) : 32885\n","np.sum(long_open_res1 == 1) : 32850\n","np.sum(short_open_res2 == 1) : 32885\n","np.sum(long_open_res2 == 1) : 32850\n","wave_mm\n","np.sum(short_open_res1 == 1) : 32882\n","np.sum(long_open_res1 == 1) : 32849\n","np.sum(short_open_res2 == 1) : 32882\n","np.sum(long_open_res2 == 1) : 32849\n"]},{"name":"stdout","output_type":"stream","text":["idep_plot elapsed time : 0.21497869491577148\n"]},{"name":"stderr","output_type":"stream","text":["point validation\n","np.sum(short_open_res1 == 1) : 32874\n","np.sum(long_open_res1 == 1) : 32843\n","np.sum(short_open_res2 == 1) : 20150\n","np.sum(long_open_res2 == 1) : 20410\n","cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n","co_wrr_32_ <= config.loc_set.point1.wrr_32 : 4.46870 0.30000 (0.0)\n","cu_wrr_32_ <= config.loc_set.point2.wrr_32 : 1.00000 1.00000 (1.0)\n"]},{"name":"stdout","output_type":"stream","text":["get_open_info_df elapsed time : 0.9643127918243408\n"]},{"name":"stderr","output_type":"stream","text":["co_wrr_32_ <= config.loc_set.point2.wrr_32 : 4.46870 1.00000 (0.0)\n"]},{"name":"stdout","output_type":"stream","text":["get_open_info_df elapsed time : 1.0502116680145264\n","en_ex_pairing elapsed time : 0.502924919128418\n","idep_plot elapsed time : 0.19685792922973633\n"]},{"name":"stderr","output_type":"stream","text":["wave_point\n","np.sum(short_open_res1 == 1) : 33720\n","np.sum(long_open_res1 == 1) : 33938\n","np.sum(short_open_res2 == 1) : 33720\n","np.sum(long_open_res2 == 1) : 33938\n","reject update_hl\n","np.sum(short_open_res1 == 1) : 32885\n","np.sum(long_open_res1 == 1) : 32850\n","np.sum(short_open_res2 == 1) : 32885\n","np.sum(long_open_res2 == 1) : 32850\n","wave_mm\n","np.sum(short_open_res1 == 1) : 32882\n","np.sum(long_open_res1 == 1) : 32849\n","np.sum(short_open_res2 == 1) : 32882\n","np.sum(long_open_res2 == 1) : 32849\n","point validation\n","np.sum(short_open_res1 == 1) : 32874\n","np.sum(long_open_res1 == 1) : 32843\n","np.sum(short_open_res2 == 1) : 20150\n","np.sum(long_open_res2 == 1) : 20410\n","cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n","co_wrr_32_ <= config.loc_set.point1.wrr_32 : 4.46870 0.30000 (0.0)\n","cu_wrr_32_ <= config.loc_set.point2.wrr_32 : 1.00000 1.00000 (1.0)\n"]},{"name":"stdout","output_type":"stream","text":["get_open_info_df elapsed time : 1.008805513381958\n"]},{"name":"stderr","output_type":"stream","text":["co_wrr_32_ <= config.loc_set.point2.wrr_32 : 4.46870 1.00000 (0.0)\n"]},{"name":"stdout","output_type":"stream","text":["get_open_info_df elapsed time : 1.051682949066162\n","en_ex_pairing elapsed time : 0.5109684467315674\n"]},{"name":"stderr","output_type":"stream","text":["wave_point\n","np.sum(short_open_res1 == 1) : 33720\n","np.sum(long_open_res1 == 1) : 33938\n","np.sum(short_open_res2 == 1) : 33720\n","np.sum(long_open_res2 == 1) : 33938\n","reject update_hl\n","np.sum(short_open_res1 == 1) : 32885\n","np.sum(long_open_res1 == 1) : 32850\n","np.sum(short_open_res2 == 1) : 32885\n","np.sum(long_open_res2 == 1) : 32850\n","wave_mm\n","np.sum(short_open_res1 == 1) : 32882\n","np.sum(long_open_res1 == 1) : 32849\n","np.sum(short_open_res2 == 1) : 32882\n","np.sum(long_open_res2 == 1) : 32849\n"]},{"name":"stdout","output_type":"stream","text":["idep_plot elapsed time : 0.2049274444580078\n"]},{"name":"stderr","output_type":"stream","text":["point validation\n","np.sum(short_open_res1 == 1) : 32874\n","np.sum(long_open_res1 == 1) : 32843\n","np.sum(short_open_res2 == 1) : 20150\n","np.sum(long_open_res2 == 1) : 20410\n","cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n","co_wrr_32_ <= config.loc_set.point1.wrr_32 : 4.46870 0.30000 (0.0)\n","cu_wrr_32_ <= config.loc_set.point2.wrr_32 : 1.00000 1.00000 (1.0)\n"]},{"name":"stdout","output_type":"stream","text":["get_open_info_df elapsed time : 0.9716737270355225\n"]},{"name":"stderr","output_type":"stream","text":["co_wrr_32_ <= config.loc_set.point2.wrr_32 : 4.46870 1.00000 (0.0)\n"]},{"name":"stdout","output_type":"stream","text":["get_open_info_df elapsed time : 1.0618155002593994\n","en_ex_pairing elapsed time : 0.5181412696838379\n","idep_plot elapsed time : 0.20029854774475098"]},{"name":"stderr","output_type":"stream","text":["wave_point\n","np.sum(short_open_res1 == 1) : 33720\n","np.sum(long_open_res1 == 1) : 33938\n","np.sum(short_open_res2 == 1) : 33720\n","np.sum(long_open_res2 == 1) : 33938\n","reject update_hl\n","np.sum(short_open_res1 == 1) : 32885\n","np.sum(long_open_res1 == 1) : 32850\n","np.sum(short_open_res2 == 1) : 32885\n","np.sum(long_open_res2 == 1) : 32850\n","wave_mm\n","np.sum(short_open_res1 == 1) : 32882\n","np.sum(long_open_res1 == 1) : 32849\n","np.sum(short_open_res2 == 1) : 32882\n","np.sum(long_open_res2 == 1) : 32849\n"]},{"name":"stdout","output_type":"stream","text":["\n"]},{"name":"stderr","output_type":"stream","text":["point validation\n","np.sum(short_open_res1 == 1) : 32874\n","np.sum(long_open_res1 == 1) : 32843\n","np.sum(short_open_res2 == 1) : 20150\n","np.sum(long_open_res2 == 1) : 20410\n","cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n","co_wrr_32_ <= config.loc_set.point1.wrr_32 : 4.46870 0.30000 (0.0)\n","cu_wrr_32_ <= config.loc_set.point2.wrr_32 : 1.00000 1.00000 (1.0)\n"]},{"name":"stdout","output_type":"stream","text":["get_open_info_df elapsed time : 0.9584364891052246\n"]},{"name":"stderr","output_type":"stream","text":["co_wrr_32_ <= config.loc_set.point2.wrr_32 : 4.46870 1.00000 (0.0)\n"]},{"name":"stdout","output_type":"stream","text":["get_open_info_df elapsed time : 1.0500702857971191\n","en_ex_pairing elapsed time : 0.5167996883392334\n"]},{"name":"stderr","output_type":"stream","text":["wave_point\n","np.sum(short_open_res1 == 1) : 33720\n","np.sum(long_open_res1 == 1) : 33938\n","np.sum(short_open_res2 == 1) : 33720\n","np.sum(long_open_res2 == 1) : 33938\n","reject update_hl\n","np.sum(short_open_res1 == 1) : 32885\n","np.sum(long_open_res1 == 1) : 32850\n","np.sum(short_open_res2 == 1) : 32885\n","np.sum(long_open_res2 == 1) : 32850\n","wave_mm\n","np.sum(short_open_res1 == 1) : 32882\n","np.sum(long_open_res1 == 1) : 32849\n","np.sum(short_open_res2 == 1) : 32882\n","np.sum(long_open_res2 == 1) : 32849\n"]},{"name":"stdout","output_type":"stream","text":["idep_plot elapsed time : 0.20274782180786133\n"]},{"name":"stderr","output_type":"stream","text":["point validation\n","np.sum(short_open_res1 == 1) : 32874\n","np.sum(long_open_res1 == 1) : 32843\n","np.sum(short_open_res2 == 1) : 20150\n","np.sum(long_open_res2 == 1) : 20410\n","cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n","co_wrr_32_ <= config.loc_set.point1.wrr_32 : 4.46870 0.30000 (0.0)\n","cu_wrr_32_ <= config.loc_set.point2.wrr_32 : 1.00000 1.00000 (1.0)\n"]},{"name":"stdout","output_type":"stream","text":["get_open_info_df elapsed time : 0.973966121673584\n"]},{"name":"stderr","output_type":"stream","text":["co_wrr_32_ <= config.loc_set.point2.wrr_32 : 4.46870 1.00000 (0.0)\n"]},{"name":"stdout","output_type":"stream","text":["get_open_info_df elapsed time : 1.0631885528564453\n","en_ex_pairing elapsed time : 0.5297532081604004\n"]},{"name":"stderr","output_type":"stream","text":["wave_point\n","np.sum(short_open_res1 == 1) : 33720\n","np.sum(long_open_res1 == 1) : 33938\n","np.sum(short_open_res2 == 1) : 33720\n","np.sum(long_open_res2 == 1) : 33938\n","reject update_hl\n","np.sum(short_open_res1 == 1) : 32885\n","np.sum(long_open_res1 == 1) : 32850\n","np.sum(short_open_res2 == 1) : 32885\n","np.sum(long_open_res2 == 1) : 32850\n","wave_mm\n","np.sum(short_open_res1 == 1) : 32882\n","np.sum(long_open_res1 == 1) : 32849\n","np.sum(short_open_res2 == 1) : 32882\n","np.sum(long_open_res2 == 1) : 32849\n"]},{"name":"stdout","output_type":"stream","text":["idep_plot elapsed time : 0.20432114601135254\n"]},{"name":"stderr","output_type":"stream","text":["point validation\n","np.sum(short_open_res1 == 1) : 32874\n","np.sum(long_open_res1 == 1) : 32843\n","np.sum(short_open_res2 == 1) : 20150\n","np.sum(long_open_res2 == 1) : 20410\n","cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n","co_wrr_32_ <= config.loc_set.point1.wrr_32 : 4.46870 0.30000 (0.0)\n","cu_wrr_32_ <= config.loc_set.point2.wrr_32 : 1.00000 1.00000 (1.0)\n"]},{"name":"stdout","output_type":"stream","text":["get_open_info_df elapsed time : 0.961554765701294\n"]},{"name":"stderr","output_type":"stream","text":["co_wrr_32_ <= config.loc_set.point2.wrr_32 : 4.46870 1.00000 (0.0)\n"]},{"name":"stdout","output_type":"stream","text":["get_open_info_df elapsed time : 1.0457618236541748\n","en_ex_pairing elapsed time : 0.5284707546234131\n"]},{"name":"stderr","output_type":"stream","text":["wave_point\n","np.sum(short_open_res1 == 1) : 33720\n","np.sum(long_open_res1 == 1) : 33938\n","np.sum(short_open_res2 == 1) : 33720\n","np.sum(long_open_res2 == 1) : 33938\n","reject update_hl\n","np.sum(short_open_res1 == 1) : 32885\n","np.sum(long_open_res1 == 1) : 32850\n","np.sum(short_open_res2 == 1) : 32885\n","np.sum(long_open_res2 == 1) : 32850\n","wave_mm\n","np.sum(short_open_res1 == 1) : 32882\n","np.sum(long_open_res1 == 1) : 32849\n","np.sum(short_open_res2 == 1) : 32882\n","np.sum(long_open_res2 == 1) : 32849\n"]},{"name":"stdout","output_type":"stream","text":["idep_plot elapsed time : 0.21644258499145508\n"]},{"name":"stderr","output_type":"stream","text":["point validation\n","np.sum(short_open_res1 == 1) : 32874\n","np.sum(long_open_res1 == 1) : 32843\n","np.sum(short_open_res2 == 1) : 20150\n","np.sum(long_open_res2 == 1) : 20410\n","cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n","co_wrr_32_ <= config.loc_set.point1.wrr_32 : 4.46870 0.30000 (0.0)\n","cu_wrr_32_ <= config.loc_set.point2.wrr_32 : 1.00000 1.00000 (1.0)\n"]},{"name":"stdout","output_type":"stream","text":["get_open_info_df elapsed time : 0.9707987308502197\n"]},{"name":"stderr","output_type":"stream","text":["co_wrr_32_ <= config.loc_set.point2.wrr_32 : 4.46870 1.00000 (0.0)\n"]},{"name":"stdout","output_type":"stream","text":["get_open_info_df elapsed time : 1.0691368579864502\n","en_ex_pairing elapsed time : 0.5354645252227783\n"]},{"name":"stderr","output_type":"stream","text":["wave_point\n","np.sum(short_open_res1 == 1) : 33720\n","np.sum(long_open_res1 == 1) : 33938\n","np.sum(short_open_res2 == 1) : 33720\n","np.sum(long_open_res2 == 1) : 33938\n","reject update_hl\n","np.sum(short_open_res1 == 1) : 32885\n","np.sum(long_open_res1 == 1) : 32850\n","np.sum(short_open_res2 == 1) : 32885\n","np.sum(long_open_res2 == 1) : 32850\n","wave_mm\n","np.sum(short_open_res1 == 1) : 32882\n","np.sum(long_open_res1 == 1) : 32849\n","np.sum(short_open_res2 == 1) : 32882\n","np.sum(long_open_res2 == 1) : 32849\n"]},{"name":"stdout","output_type":"stream","text":["idep_plot elapsed time : 0.21542096138000488\n"]},{"name":"stderr","output_type":"stream","text":["point validation\n","np.sum(short_open_res1 == 1) : 32874\n","np.sum(long_open_res1 == 1) : 32843\n","np.sum(short_open_res2 == 1) : 20150\n","np.sum(long_open_res2 == 1) : 20410\n","cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n","co_wrr_32_ <= config.loc_set.point1.wrr_32 : 4.46870 0.30000 (0.0)\n","cu_wrr_32_ <= config.loc_set.point2.wrr_32 : 1.00000 1.00000 (1.0)\n"]},{"name":"stdout","output_type":"stream","text":["get_open_info_df elapsed time : 0.9668304920196533\n"]},{"name":"stderr","output_type":"stream","text":["co_wrr_32_ <= config.loc_set.point2.wrr_32 : 4.46870 1.00000 (0.0)\n"]},{"name":"stdout","output_type":"stream","text":["get_open_info_df elapsed time : 1.0549356937408447\n","en_ex_pairing elapsed time : 0.5420842170715332\n"]},{"name":"stderr","output_type":"stream","text":["wave_point\n","np.sum(short_open_res1 == 1) : 33720\n","np.sum(long_open_res1 == 1) : 33938\n","np.sum(short_open_res2 == 1) : 33720\n","np.sum(long_open_res2 == 1) : 33938\n","reject update_hl\n","np.sum(short_open_res1 == 1) : 32885\n","np.sum(long_open_res1 == 1) : 32850\n","np.sum(short_open_res2 == 1) : 32885\n","np.sum(long_open_res2 == 1) : 32850\n","wave_mm\n","np.sum(short_open_res1 == 1) : 32882\n","np.sum(long_open_res1 == 1) : 32849\n","np.sum(short_open_res2 == 1) : 32882\n","np.sum(long_open_res2 == 1) : 32849\n"]},{"name":"stdout","output_type":"stream","text":["idep_plot elapsed time : 0.21134018898010254\n"]},{"name":"stderr","output_type":"stream","text":["point validation\n","np.sum(short_open_res1 == 1) : 32874\n","np.sum(long_open_res1 == 1) : 32843\n","np.sum(short_open_res2 == 1) : 20150\n","np.sum(long_open_res2 == 1) : 20410\n","cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n","co_wrr_32_ <= config.loc_set.point1.wrr_32 : 4.46870 0.30000 (0.0)\n","cu_wrr_32_ <= config.loc_set.point2.wrr_32 : 1.00000 1.00000 (1.0)\n"]},{"name":"stdout","output_type":"stream","text":["get_open_info_df elapsed time : 0.9731390476226807\n"]},{"name":"stderr","output_type":"stream","text":["co_wrr_32_ <= config.loc_set.point2.wrr_32 : 4.46870 1.00000 (0.0)\n"]},{"name":"stdout","output_type":"stream","text":["get_open_info_df elapsed time : 1.0800542831420898\n","en_ex_pairing elapsed time : 0.5430054664611816\n"]},{"name":"stderr","output_type":"stream","text":["wave_point\n","np.sum(short_open_res1 == 1) : 33720\n","np.sum(long_open_res1 == 1) : 33938\n","np.sum(short_open_res2 == 1) : 33720\n","np.sum(long_open_res2 == 1) : 33938\n","reject update_hl\n","np.sum(short_open_res1 == 1) : 32885\n","np.sum(long_open_res1 == 1) : 32850\n","np.sum(short_open_res2 == 1) : 32885\n","np.sum(long_open_res2 == 1) : 32850\n","wave_mm\n","np.sum(short_open_res1 == 1) : 32882\n","np.sum(long_open_res1 == 1) : 32849\n","np.sum(short_open_res2 == 1) : 32882\n","np.sum(long_open_res2 == 1) : 32849\n"]},{"name":"stdout","output_type":"stream","text":["idep_plot elapsed time : 0.21756911277770996\n"]},{"name":"stderr","output_type":"stream","text":["point validation\n","np.sum(short_open_res1 == 1) : 32874\n","np.sum(long_open_res1 == 1) : 32843\n","np.sum(short_open_res2 == 1) : 20150\n","np.sum(long_open_res2 == 1) : 20410\n","cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n","co_wrr_32_ <= config.loc_set.point1.wrr_32 : 4.46870 0.30000 (0.0)\n","cu_wrr_32_ <= config.loc_set.point2.wrr_32 : 1.00000 1.00000 (1.0)\n"]},{"name":"stdout","output_type":"stream","text":["get_open_info_df elapsed time : 0.9662141799926758\n"]},{"name":"stderr","output_type":"stream","text":["co_wrr_32_ <= config.loc_set.point2.wrr_32 : 4.46870 1.00000 (0.0)\n"]},{"name":"stdout","output_type":"stream","text":["get_open_info_df elapsed time : 1.0587058067321777\n","en_ex_pairing elapsed time : 0.5436177253723145\n"]},{"name":"stderr","output_type":"stream","text":["wave_point\n","np.sum(short_open_res1 == 1) : 33720\n","np.sum(long_open_res1 == 1) : 33938\n","np.sum(short_open_res2 == 1) : 33720\n","np.sum(long_open_res2 == 1) : 33938\n","reject update_hl\n","np.sum(short_open_res1 == 1) : 32885\n","np.sum(long_open_res1 == 1) : 32850\n","np.sum(short_open_res2 == 1) : 32885\n","np.sum(long_open_res2 == 1) : 32850\n","wave_mm\n","np.sum(short_open_res1 == 1) : 32882\n","np.sum(long_open_res1 == 1) : 32849\n","np.sum(short_open_res2 == 1) : 32882\n","np.sum(long_open_res2 == 1) : 32849\n"]},{"name":"stdout","output_type":"stream","text":["idep_plot elapsed time : 0.21967387199401855\n"]},{"name":"stderr","output_type":"stream","text":["point validation\n","np.sum(short_open_res1 == 1) : 32874\n","np.sum(long_open_res1 == 1) : 32843\n","np.sum(short_open_res2 == 1) : 20150\n","np.sum(long_open_res2 == 1) : 20410\n","cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n","co_wrr_32_ <= config.loc_set.point1.wrr_32 : 4.46870 0.30000 (0.0)\n","cu_wrr_32_ <= config.loc_set.point2.wrr_32 : 1.00000 1.00000 (1.0)\n"]},{"name":"stdout","output_type":"stream","text":["get_open_info_df elapsed time : 0.9630858898162842\n"]},{"name":"stderr","output_type":"stream","text":["co_wrr_32_ <= config.loc_set.point2.wrr_32 : 4.46870 1.00000 (0.0)\n"]},{"name":"stdout","output_type":"stream","text":["get_open_info_df elapsed time : 1.084143877029419\n","en_ex_pairing elapsed time : 0.5587177276611328\n"]},{"name":"stderr","output_type":"stream","text":["wave_point\n","np.sum(short_open_res1 == 1) : 33720\n","np.sum(long_open_res1 == 1) : 33938\n","np.sum(short_open_res2 == 1) : 33720\n","np.sum(long_open_res2 == 1) : 33938\n","reject update_hl\n","np.sum(short_open_res1 == 1) : 32885\n","np.sum(long_open_res1 == 1) : 32850\n","np.sum(short_open_res2 == 1) : 32885\n","np.sum(long_open_res2 == 1) : 32850\n","wave_mm\n","np.sum(short_open_res1 == 1) : 32882\n","np.sum(long_open_res1 == 1) : 32849\n","np.sum(short_open_res2 == 1) : 32882\n","np.sum(long_open_res2 == 1) : 32849\n"]},{"name":"stdout","output_type":"stream","text":["idep_plot elapsed time : 0.2225339412689209\n"]},{"name":"stderr","output_type":"stream","text":["point validation\n","np.sum(short_open_res1 == 1) : 32874\n","np.sum(long_open_res1 == 1) : 32843\n","np.sum(short_open_res2 == 1) : 20150\n","np.sum(long_open_res2 == 1) : 20410\n","cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n","co_wrr_32_ <= config.loc_set.point1.wrr_32 : 4.46870 0.30000 (0.0)\n","cu_wrr_32_ <= config.loc_set.point2.wrr_32 : 1.00000 1.00000 (1.0)\n"]},{"name":"stdout","output_type":"stream","text":["get_open_info_df elapsed time : 0.9734728336334229\n"]},{"name":"stderr","output_type":"stream","text":["co_wrr_32_ <= config.loc_set.point2.wrr_32 : 4.46870 1.00000 (0.0)\n"]},{"name":"stdout","output_type":"stream","text":["get_open_info_df elapsed time : 1.0562217235565186\n","en_ex_pairing elapsed time : 0.683725118637085\n","idep_plot elapsed time : 0.19470643997192383\n"]},{"name":"stderr","output_type":"stream","text":["wave_point\n","np.sum(short_open_res1 == 1) : 33720\n","np.sum(long_open_res1 == 1) : 33938\n","np.sum(short_open_res2 == 1) : 33720\n","np.sum(long_open_res2 == 1) : 33938\n","reject update_hl\n","np.sum(short_open_res1 == 1) : 32885\n","np.sum(long_open_res1 == 1) : 32850\n","np.sum(short_open_res2 == 1) : 32885\n","np.sum(long_open_res2 == 1) : 32850\n","wave_mm\n","np.sum(short_open_res1 == 1) : 32882\n","np.sum(long_open_res1 == 1) : 32849\n","np.sum(short_open_res2 == 1) : 32882\n","np.sum(long_open_res2 == 1) : 32849\n","point validation\n","np.sum(short_open_res1 == 1) : 32874\n","np.sum(long_open_res1 == 1) : 32843\n","np.sum(short_open_res2 == 1) : 20150\n","np.sum(long_open_res2 == 1) : 20410\n","cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n","co_wrr_32_ <= config.loc_set.point1.wrr_32 : 4.46870 0.30000 (0.0)\n","cu_wrr_32_ <= config.loc_set.point2.wrr_32 : 1.00000 1.00000 (1.0)\n"]},{"name":"stdout","output_type":"stream","text":["get_open_info_df elapsed time : 0.9524209499359131\n"]},{"name":"stderr","output_type":"stream","text":["co_wrr_32_ <= config.loc_set.point2.wrr_32 : 4.46870 1.00000 (0.0)\n"]},{"name":"stdout","output_type":"stream","text":["get_open_info_df elapsed time : 1.0482914447784424\n","en_ex_pairing elapsed time : 0.5747659206390381\n"]},{"name":"stderr","output_type":"stream","text":["wave_point\n","np.sum(short_open_res1 == 1) : 33720\n","np.sum(long_open_res1 == 1) : 33938\n","np.sum(short_open_res2 == 1) : 33720\n","np.sum(long_open_res2 == 1) : 33938\n","reject update_hl\n","np.sum(short_open_res1 == 1) : 32885\n","np.sum(long_open_res1 == 1) : 32850\n","np.sum(short_open_res2 == 1) : 32885\n","np.sum(long_open_res2 == 1) : 32850\n","wave_mm\n","np.sum(short_open_res1 == 1) : 32882\n","np.sum(long_open_res1 == 1) : 32849\n","np.sum(short_open_res2 == 1) : 32882\n","np.sum(long_open_res2 == 1) : 32849\n"]},{"name":"stdout","output_type":"stream","text":["idep_plot elapsed time : 0.20411157608032227\n"]},{"name":"stderr","output_type":"stream","text":["point validation\n","np.sum(short_open_res1 == 1) : 32874\n","np.sum(long_open_res1 == 1) : 32843\n","np.sum(short_open_res2 == 1) : 20150\n","np.sum(long_open_res2 == 1) : 20410\n","cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n","co_wrr_32_ <= config.loc_set.point1.wrr_32 : 4.46870 0.30000 (0.0)\n","cu_wrr_32_ <= config.loc_set.point2.wrr_32 : 1.00000 1.00000 (1.0)\n"]},{"name":"stdout","output_type":"stream","text":["get_open_info_df elapsed time : 0.9617624282836914\n"]},{"name":"stderr","output_type":"stream","text":["co_wrr_32_ <= config.loc_set.point2.wrr_32 : 4.46870 1.00000 (0.0)\n"]},{"name":"stdout","output_type":"stream","text":["get_open_info_df elapsed time : 1.0563850402832031\n","en_ex_pairing elapsed time : 0.5843932628631592\n"]},{"name":"stderr","output_type":"stream","text":["wave_point\n","np.sum(short_open_res1 == 1) : 33720\n","np.sum(long_open_res1 == 1) : 33938\n","np.sum(short_open_res2 == 1) : 33720\n","np.sum(long_open_res2 == 1) : 33938\n","reject update_hl\n","np.sum(short_open_res1 == 1) : 32885\n","np.sum(long_open_res1 == 1) : 32850\n","np.sum(short_open_res2 == 1) : 32885\n","np.sum(long_open_res2 == 1) : 32850\n","wave_mm\n","np.sum(short_open_res1 == 1) : 32882\n","np.sum(long_open_res1 == 1) : 32849\n","np.sum(short_open_res2 == 1) : 32882\n","np.sum(long_open_res2 == 1) : 32849\n"]},{"name":"stdout","output_type":"stream","text":["idep_plot elapsed time : 0.2063751220703125\n"]},{"name":"stderr","output_type":"stream","text":["point validation\n","np.sum(short_open_res1 == 1) : 32874\n","np.sum(long_open_res1 == 1) : 32843\n","np.sum(short_open_res2 == 1) : 20150\n","np.sum(long_open_res2 == 1) : 20410\n","cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n","co_wrr_32_ <= config.loc_set.point1.wrr_32 : 4.46870 0.30000 (0.0)\n","cu_wrr_32_ <= config.loc_set.point2.wrr_32 : 1.00000 1.00000 (1.0)\n"]},{"name":"stdout","output_type":"stream","text":["get_open_info_df elapsed time : 0.9615845680236816\n"]},{"name":"stderr","output_type":"stream","text":["co_wrr_32_ <= config.loc_set.point2.wrr_32 : 4.46870 1.00000 (0.0)\n"]},{"name":"stdout","output_type":"stream","text":["get_open_info_df elapsed time : 1.0422992706298828\n","en_ex_pairing elapsed time : 0.5829193592071533\n"]},{"name":"stderr","output_type":"stream","text":["wave_point\n","np.sum(short_open_res1 == 1) : 33720\n","np.sum(long_open_res1 == 1) : 33938\n","np.sum(short_open_res2 == 1) : 33720\n","np.sum(long_open_res2 == 1) : 33938\n","reject update_hl\n","np.sum(short_open_res1 == 1) : 32885\n","np.sum(long_open_res1 == 1) : 32850\n","np.sum(short_open_res2 == 1) : 32885\n","np.sum(long_open_res2 == 1) : 32850\n","wave_mm\n","np.sum(short_open_res1 == 1) : 32882\n","np.sum(long_open_res1 == 1) : 32849\n","np.sum(short_open_res2 == 1) : 32882\n","np.sum(long_open_res2 == 1) : 32849\n"]},{"name":"stdout","output_type":"stream","text":["idep_plot elapsed time : 0.21132826805114746\n"]},{"name":"stderr","output_type":"stream","text":["point validation\n","np.sum(short_open_res1 == 1) : 32874\n","np.sum(long_open_res1 == 1) : 32843\n","np.sum(short_open_res2 == 1) : 20150\n","np.sum(long_open_res2 == 1) : 20410\n","cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n","co_wrr_32_ <= config.loc_set.point1.wrr_32 : 4.46870 0.30000 (0.0)\n","cu_wrr_32_ <= config.loc_set.point2.wrr_32 : 1.00000 1.00000 (1.0)\n"]},{"name":"stdout","output_type":"stream","text":["get_open_info_df elapsed time : 0.9458277225494385\n"]},{"name":"stderr","output_type":"stream","text":["co_wrr_32_ <= config.loc_set.point2.wrr_32 : 4.46870 1.00000 (0.0)\n"]},{"name":"stdout","output_type":"stream","text":["get_open_info_df elapsed time : 1.072371244430542\n","en_ex_pairing elapsed time : 0.5856218338012695\n","idep_plot elapsed time : 0.21661949157714844\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 1728x576 with 36 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# from google.colab import output\n","# ------------ survey param ------------ #\n","# itv_num_list = [1, 3, 5, 15]\n","# itv_list = ['15m', '30m', '1h', '4h']\n","# itv_list = ['3m', '5m', '15m', '30m', '1h', '4h']\n","# val_list = np.arange(-0.5, -0.9, -0.1)     # prcn 1\n","# val_list = np.arange(-0.0, -0.5, -0.03)  # prcn 2\n","val_list = np.arange(-0.1, -0.8, -0.03)  # prcn 2\n","# val_list = np.arange(-0.5, -0.6, -0.005)    # prcn 3\n","# val_list = np.arange(0.944, 0.945, 0.0001)    # prcn 4\n","# val_list = np.arange(70, 80, 1)   # prcn -1\n","# val_list = np.arange(200, 180, -5)   # prcn -2\n","# val_list = talib.get_function_groups()['Pattern Recognition']\n","\n","# ------------ get survey_res ------------ #\n","result = []\n","res_shape = (3, 12)  # short, long, both x data\n","config_list_copy = copy.deepcopy(config_list)\n","for set_val in val_list:\n","  # ------------ open 결정 이전의 인자값 ------------ #\n","  # ------ point * dur. ------ #\n","  # config_list_copy[0].loc_set.point1.wrr_32 = set_val\n","  # config_list_copy[0].loc_set.point1.candle_pattern = set_val\n","  # config_list_copy[0].loc_set.zone.degree_list = set_val\n","  # config_list_copy[0].loc_set.point2.wick_score_list = str([set_val])\n","  # config_list_copy[0].loc_set.zone.ir = set_val  \n","  # config_list_copy[0].loc_set.zone.abs_ratio = set_val  \n","\n","  # ------------ open 결정 이후의 인자값 ------------ #\n","  # ------ utils ------ #\n","  # config_list_copy[0].tr_set.tp_gap = set_val  \n","  config_list_copy[0].tr_set.ep_gap1 = set_val \n","  # config_list_copy[0].tr_set.ep_gap2 = set_val \n","  # config_list_copy[0].tr_set.out_gap = set_val  \n","\n","  # config_list_copy[0].tr_set.tp_gap = abs(set_val) - 0.5\n","  # config_list_copy[0].tr_set.out_gap = set_val + 0.5\n","  # config_list_copy[0].tr_set.wb_tp_gap = config_list_copy[0].tr_set.tp_gap\n","  # config_list_copy[0].tr_set.wb_out_gap = config_list_copy[0].tr_set.out_gap\n","\n","  # ------ entry, exit (ep, tp, out vars.) ------ #\n","  # config_list_copy[0].tr_set.expire_k = set_val\n","  # config_list_copy[0].ep_set.expire_tick = set_val  \n"," \n","  for utils_, config_ in zip(utils_list, config_list_copy):\n","    enlist_tr(res_df, config_, np_timeidx)\n","  # open_info_df = get_open_info_df(ep_loc_v3, res_df, np_timeidx, ID_list, config_list_copy, id_idx_list)   # point * mr_res 이기 때문에 utils_tr & rtc 의 영향을 충분히 받음\n","  open_info_df1 = get_open_info_df_v2(ep_loc_p1_v3, res_df, np_timeidx, ID_list, config_list_copy, id_idx_list, open_num=1)  # --> point * dur. 관련 (loc_set) param 에 종속 (open_info 가 변경되는게 아니라면, 재실행할 필요없음)\n","  open_info_df2 = get_open_info_df_v2(ep_loc_p2_v3, res_df, np_timeidx, ID_list, config_list_copy, id_idx_list, open_num=2)\n","  open_info_df_list = [open_info_df1, open_info_df2]\n","\n","  try:\n","    result.append(get_res_v9(res_df, open_info_df_list, ohlc_list, config_list_copy, np_timeidx, funcs, test_ratio=test_ratio, plot_is=1, signi=True))    \n","  except:\n","    result.append(np.full(res_shape, np.nan))\n","    # pass\n","\n","survey_res_list = [np.array(result)[:, s_i::3] for s_i in range(3)]   # 3 for s, l, b\n","# short_res, long_res, both_res = survey_res_list\n","\n","# ------------ plot survey_res ------------ #\n","title_list = [\"short\", \"long\", \"both\"]\n","sub_title_list = ['hhm', 'hlm', 'frq', 'dpf', 'wr', 'sr', 'acc_pr', 'sum_pr', 'min_pr', 'liqd', 'acc_mdd', 'sum_mdd']\n","space_ = \" \" * 120\n","\n","fig = plt.figure(figsize=(24, 8))\n","plt.style.use('dark_background')\n","gs = gridspec.GridSpec(nrows=1,\n","                        ncols=3,\n","                        # height_ratios=[1, 1, 1]\n","                      )\n","# nrows, ncols, h_r = 3, 3, [1, 1, 1]\n","nrows, ncols, h_r = 3, 4, [1, 1, 1]\n","# nrows, ncols, h_r = 4, 3, [1, 1, 1, 1]\n","# if d_idx == 0:\n","# else:\n","  # nrows, ncols, h_r = 2, 2, [1, 1]\n","\n","for d_idx, (title_name, survey_res) in enumerate(zip(title_list, survey_res_list)):  \n","  inner_gs = gs[d_idx].subgridspec(nrows=nrows,\n","                        ncols=ncols,\n","                        height_ratios=h_r\n","                      )\n","  for in_idx, (data_, sub_title) in enumerate(zip(survey_res.T, sub_title_list)):\n","    plt.subplot(inner_gs[in_idx])\n","    data = data_.ravel()\n","    valid_idx = ~np.isnan(data)\n","    if np.sum(valid_idx) > 0:\n","      if type(val_list[0]) == str:\n","        x, y = np.arange(len(val_list))[valid_idx], data[valid_idx]\n","      else:\n","        x, y = val_list[valid_idx], data[valid_idx]\n","      plt.plot(x, y)  # 앞에서부터 len(result) 만큼만    \n","      plt.title(sub_title + '_{:.2f}'.format(x[np.argmax(y)]))\n","    else:\n","      plt.title(sub_title)\n","\n","plt.suptitle(space_.join(title_list))\n","plt.show()\n","# print(\"\\n\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oE5zkT75Beiy"},"outputs":[],"source":["\n","# ------------ plot survey_res ------------ #\n","title_list = [\"short\", \"long\", \"both\"]\n","sub_title_list = ['prcn', 'wb', 'len_pr', 'dpf', 'wr', 'sr', 'acc_pr', 'sum_pr', 'min_pr', 'liqd', 'acc_mdd', 'sum_mdd']\n","space_ = \" \" * 120\n","\n","fig = plt.figure(figsize=(24, 8))\n","plt.style.use('dark_background')\n","gs = gridspec.GridSpec(nrows=1,\n","                        ncols=3,\n","                        # height_ratios=[1, 1, 1]\n","                      )\n","# nrows, ncols, h_r = 3, 3, [1, 1, 1]\n","nrows, ncols, h_r = 3, 4, [1, 1, 1]\n","# nrows, ncols, h_r = 4, 3, [1, 1, 1, 1]\n","# if d_idx == 0:\n","# else:\n","  # nrows, ncols, h_r = 2, 2, [1, 1]\n","\n","for d_idx, (title_name, survey_res) in enumerate(zip(title_list, survey_res_list)):  \n","  inner_gs = gs[d_idx].subgridspec(nrows=nrows,\n","                        ncols=ncols,\n","                        height_ratios=h_r\n","                      )\n","  for in_idx, (data_, sub_title) in enumerate(zip(survey_res.T, sub_title_list)):\n","    plt.subplot(inner_gs[in_idx])\n","    data = data_.ravel()\n","    valid_idx = ~np.isnan(data)\n","    if np.sum(valid_idx) > 0:\n","      if type(val_list[0]) == str:\n","        x, y = np.arange(len(val_list))[valid_idx], data[valid_idx]\n","      else:\n","        x, y = val_list[valid_idx], data[valid_idx]\n","      plt.plot(x, y)  # 앞에서부터 len(result) 만큼만    \n","      plt.title(sub_title + '_{:.2f}'.format(x[np.argmax(y)]))\n","    else:\n","      plt.title(sub_title)\n","\n","plt.suptitle(space_.join(title_list))\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"EJ4f-3Zf4ImT"},"source":["### backtrader validation"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pbYUlJl34ImU"},"outputs":[],"source":["# ------ open validation ------ #\n","long_open_ = res_df['long_open_{}'.format(config.selection_id)].to_numpy()\n","long_open_ts = list(map(lambda x : str(x), res_df.index[long_open_ == 1]))  "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wyYMYcxx4ImV"},"outputs":[],"source":["long_index = open_info_df.side == 'BUY'\n","\n","for ts in res_df.index[open_info_df.index[long_index]]:\n","  print(ts)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BPI-9QX74ImW"},"outputs":[],"source":["trade_log_name = \"ETHUSDT_1650120909.pkl\"\n","trade_log_dir_path = \"./trade_log/0405_wave_trader_realterm\"\n","\n","with open(os.path.join(trade_log_dir_path, trade_log_name), 'rb') as f:\n","  trade_log = pickle.load(f)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FMXhzaTK4ImX"},"outputs":[],"source":["trade_log"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DiTKuq9T4ImY"},"outputs":[],"source":["# 1. ts 에 pair 된 en_p, ex_p 만 비교하면 될 것\n","#   -> open_idx, en_idx, ex_idx 조회하면 될 것\n","\n","pos_side = \"BUY\" # SELL BUY\n","val_obj = short_obj if pos_side == \"SELL\" else long_obj\n","\n","# ------ get idep trade_info ------ #\n","en_ts = list(map(lambda x : str(x), res_df.index[val_obj[2].astype(int).ravel()])) \n","ex_ts = list(map(lambda x : str(x), res_df.index[val_obj[3].astype(int).ravel()])) \n","en_p = val_obj[0].ravel()\n","ex_p = val_obj[1].ravel()\n","\n","# ------ execute ts comparison ------ #\n","logged_en_ts = [k for k, v in trade_log.items() if 'entry' in v if pos_side in v]\n","\n","lacked_ts = [ts for ts in en_ts if not ts in logged_en_ts]   # trade_log 에 없는 거래\n","added_ts = [ts for ts in logged_en_ts if not ts in en_ts]    # trade_log 에만 있는 거래\n","\n","print(lacked_ts)\n","print(added_ts)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VnTmGTJI4ImZ"},"outputs":[],"source":["# ------ check added_ts ------ #\n","keys = list(trade_log.keys())\n","\n","for k_i in range(len(keys)):\n","  if keys[k_i] in added_ts:\n","    # print(trade_log[keys[k_i]])\n","    # print(trade_log[keys[k_i + 1]])\n","    print(keys[k_i], trade_log[keys[k_i]])\n","    print(keys[k_i + 1], trade_log[keys[k_i + 1]])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Vn5x7mcP4ImZ"},"outputs":[],"source":["# ------ price sync_check ------ #\n","accept_price_gap = 0.1\n","for i in range(len(en_ts)):\n","  try:\n","    print(en_ts[i], trade_log[en_ts[i]][0] - en_p[i])\n","    # print(trade_log[str(ex_ts[i])])\n","    # print(ex_ts[i], trade_log[ex_ts[i]][0] - ex_p[i])\n","    print(ex_ts[i])\n","    print()\n","\n","  except Exception as e:\n","    print(e)\n"]},{"cell_type":"markdown","metadata":{"id":"1GVZ03zDyU2N"},"source":["### legacy"]},{"cell_type":"markdown","metadata":{"id":"IWO7KkqltMFt"},"source":["#### main_functions"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MY1csdNRLGsk"},"outputs":[],"source":["def get_open_info_df_v2(ep_loc_v2, res_df, np_timeidx, ID_list, config_list, id_idx_list, open_num=1):\n","  start_0 = time.time()\n","  # ------ get mr_res, zone_arr ------ #\n","  short_mr_res_obj = np.array([ep_loc_v2(res_df, config_, np_timeidx, show_detail=True, ep_loc_side=OrderSide.SELL) for config_ in config_list])\n","  long_mr_res_obj = np.array([ep_loc_v2(res_df, config_, np_timeidx, show_detail=True, ep_loc_side=OrderSide.BUY) for config_ in config_list])\n","  short_open_idx_list = [np.where(res_df['short_open{}_{}'.format(open_num, id)].to_numpy() * mr_res)[0] for id, mr_res in zip(ID_list, short_mr_res_obj[:, 0].astype(np.float64))]   # \"point * mr_Res\"\n","  long_open_idx_list = [np.where(res_df['long_open{}_{}'.format(open_num, id)].to_numpy() * mr_res)[0] for id, mr_res in zip(ID_list, long_mr_res_obj[:, 0].astype(np.float64))]  # zip 으로 zone (str) 과 묶어서 dtype 변경됨\n","\n","  # ------ open_info_arr ------ #\n","  short_side_list = [np.full(len(list_), OrderSide.SELL) for list_ in short_open_idx_list]\n","  long_side_list = [np.full(len(list_), OrderSide.BUY) for list_ in long_open_idx_list]\n","\n","  short_zone_list = [zone_res[short_open_idx] for zone_res, short_open_idx in zip(short_mr_res_obj[:, 1], short_open_idx_list)]\n","  long_zone_list = [zone_res[long_open_idx] for zone_res, long_open_idx in zip(long_mr_res_obj[:, 1], long_open_idx_list)]\n","\n","  short_id_list = [np.full(len(list_), id) for id, list_ in zip(ID_list, short_open_idx_list)]\n","  long_id_list = [np.full(len(list_), id) for id, list_ in zip(ID_list, long_open_idx_list)]\n","\n","  selected_id_idx = np.arange(len(id_idx_list))\n","  short_id_idx_list = [np.full(len(list_), id) for id, list_ in zip(selected_id_idx, short_open_idx_list)]\n","  long_id_idx_list = [np.full(len(list_), id) for id, list_ in zip(selected_id_idx, long_open_idx_list)]\n","\n","  # ------ get open_info_df ------ #\n","  #   series 만들어서 short / long 끼리 합치고 둘이 합치고, 중복은 우선 순위 정해서 제거\n","  short_open_df_list = [pd.DataFrame(index=index_, data=np.vstack((data_)).T, columns=['side', 'zone', 'id', 'id_idx']) for index_, data_ in zip(short_open_idx_list, zip(short_side_list, short_zone_list, short_id_list, short_id_idx_list))]\n","  long_open_df_list = [pd.DataFrame(index=index_, data=np.vstack((data_)).T, columns=['side', 'zone', 'id', 'id_idx']) for index_, data_ in zip(long_open_idx_list, zip(long_side_list, long_zone_list, long_id_list, long_id_idx_list))]\n","\n","  open_info_df = pd.concat(short_open_df_list + long_open_df_list)\n","  # ------ sorting + unique ------ #\n","  open_info_df.sort_index(inplace=True)\n","  # print(len(open_info_df))\n","  # print(len(open_info_df))\n","  # open_info_df.head()\n","  print(\"get_open_info_df elapsed time :\", time.time() - start_0)\n","  return open_info_df[~open_info_df.index.duplicated(keep='first')]  # 먼저 순서를 우선으로 지정  "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"eiQ36_SLLE3w"},"outputs":[],"source":["def get_res_v9(res_df, open_info_df_list, ohlc_list, config_list, np_timeidx, funcs, inversion=False, test_ratio=0.3, plot_is=True, signi=False, show_detail=False):\n","  # ------------ make open_info_list ------------ #\n","  open_idx1, open_idx2 = [open_info_df.index.to_numpy() for open_info_df in open_info_df_list]\n","  len_df = len(res_df)\n","\n","  sample_len = int(len_df * (1 - test_ratio))\n","  sample_idx1 = (open_idx1 < sample_len) == plot_is  # in / out sample plot 여부\n","  sample_open_idx1 = open_idx1[sample_idx1]  \n","  sample_idx2 = (open_idx2 < sample_len) == plot_is  # in / out sample plot 여부\n","\n","  # ------------ open_info_list 기준 = p1 ------------ #\n","  sample_open_info_df1, sample_open_info_df2 = [df_[idx_] for df_, idx_ in zip(open_info_df_list, [sample_idx1, sample_idx2])]\n","  open_info1 = [sample_open_info_df1[col_].to_numpy() for col_ in sample_open_info_df1.columns]\n","\n","  if config_list[0].tr_set.check_hlm in [0, 1]:   # 여기서 open_info 자동화하더라도, utils info 는 직접 실행해주어야함\n","    sample_open_idx2 = sample_open_idx1\n","    open_info2 = open_info1\n","  else:\n","    sample_open_idx2 = open_idx2[sample_idx2]\n","    open_info2 = [sample_open_info_df2[col_].to_numpy() for col_ in sample_open_info_df2.columns]\n","\n","  # ------------ get paired_res ------------ #\n","  start_0 = time.time()\n","  paired_res = en_ex_pairing_v9(res_df, [sample_open_idx1, sample_open_idx2], [open_info1, open_info2], ohlc_list, config_list, np_timeidx, funcs, show_detail)\n","  # valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr = paired_res\n","  print(\"en_ex_pairing elapsed time :\", time.time() - start_0)  #  0.37 --> 0.3660471439361572 --> 0.21(lesser if)\n","\n","  # ------------ idep_plot ------------ #\n","  start_0 = time.time()\n","  high, low = ohlc_list[1:3]\n","  res = idep_plot_v16(res_df, len_df, config_list[0], high, low, sample_open_info_df1, paired_res, inversion=inversion, sample_ratio=1 - test_ratio, signi=signi)\n","  print(\"idep_plot elapsed time :\", time.time() - start_0)   # 1.40452 (v6) 1.4311 (v5)\n","\n","  return res"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xafHpMLwESKf"},"outputs":[],"source":["def idep_plot_v16(res_df, len_df, config, high, low, open_info_df1, paired_res, inversion=False, sample_ratio=0.7, title_position=(0.5, 0.5),\n","                  fontsize=15, signi=False):  # open_idx, side_arr\n","    if not signi:\n","        plt.style.use(['dark_background', 'fast'])\n","        plt.figure(figsize=(24, 8))\n","        gs = gridspec.GridSpec(nrows=2,  # row 몇 개\n","                               ncols=3,  # col 몇 개\n","                               height_ratios=[10, 1]\n","                               # height_ratios=[10, 10, 1]\n","                               )\n","    gs_idx = 0\n","    # plt.suptitle(key)\n","\n","    p_ranges, p_qty_ratio = literal_eval(config.tp_set.p_ranges), literal_eval(config.tp_set.p_qty_ratio)\n","    assert np.sum(p_qty_ratio) == 1.0\n","    assert len(p_ranges) == len(p_qty_ratio)\n","\n","    if sample_ratio is not None:\n","        sample_len = int(len_df * sample_ratio)\n","    else:\n","        sample_len = len_df\n","\n","    # ------ short & long data preparation ------ #\n","    # start_0 = time.time()\n","\n","    net_p1_idx_arr, p1_idx_arr, p2_idx_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr, tr_arr = paired_res\n","    assert len(p1_idx_arr) != 0, \"assert len(p1_idx_arr) != 0\"\n","\n","    short_net_p1_idx_arr = net_p1_idx_arr[np.where(open_info_df1.side.loc[net_p1_idx_arr] == OrderSide.SELL)[0]]\n","    long_net_p1_idx_arr = net_p1_idx_arr[np.where(open_info_df1.side.loc[net_p1_idx_arr] == OrderSide.BUY)[0]]\n","\n","    short_net_p1_frq = len(short_net_p1_idx_arr)\n","    long_net_p1_frq = len(long_net_p1_idx_arr)\n","    # print(\"short_net_p1_frq :\", short_net_p1_frq)\n","    # print(\"long_net_p1_frq :\", long_net_p1_frq)\n","\n","    short_p1_openi_idx = np.where(open_info_df1.side.loc[p1_idx_arr] == OrderSide.SELL)[0]  # p1_idx_arr 에 대한 idx, # side_arr,\n","    long_p1_openi_idx = np.where(open_info_df1.side.loc[p1_idx_arr] == OrderSide.BUY)[0]\n","\n","    # p1_idx = open_idx[p1_openi_arr].reshape(-1, 1)   # != p1_idx_arr, p1_openi_arr 은 exit_done 기준임\n","\n","    np_obj = np.hstack((pair_price_arr, pair_idx_arr, p1_idx_arr.reshape(-1, 1)))  # p1_idx_arr is 1d, need to be changed to 2d (for stacking)\n","    short_obj = np_obj[short_p1_openi_idx]\n","    long_obj = np_obj[long_p1_openi_idx]\n","    both_obj = np.vstack((short_obj, long_obj))\n","    # print(\"short_obj.shape :\", short_obj.shape)\n","    # print(\"long_obj.shape :\", long_obj.shape)\n","\n","    short_obj, long_obj, both_obj = [np.split(obj_, 5, axis=1) for obj_ in [short_obj, long_obj, both_obj]]\n","\n","    short_p2_idx_arr, long_p2_idx_arr = [p2_idx_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_lvrg_arr, long_lvrg_arr = [lvrg_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_fee_arr, long_fee_arr = [fee_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_tpout_arr, long_tpout_arr = [tpout_arr[openi_idx_] for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    # short_bias_arr, long_bias_arr = [bias_arr[openi_idx_] for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_tr_arr, long_tr_arr = [tr_arr[openi_idx_] for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    # print(\"long_bias_arr.shape :\", long_bias_arr.shape)\n","    # print(\"short / long arr setting elapsed time :\", time.time() - start_0)\n","\n","    # start_0 = time.time()\n","\n","    short_tpbox_hhm, long_tpbox_hhm, short_tpbox_p2exec_hhm, long_tpbox_p2exec_hhm, short_outbox_hhm, long_outbox_hhm, short_p2_true_bias_bool, long_p2_true_bias_bool, \\\n","          short_tp_1, short_tp_0, long_tp_1, long_tp_0, short_out_1, short_out_0, long_out_1, long_out_0, short_ep2_0, long_ep2_0 = \\\n","      get_wave_bias_v5(res_df, config, high, low, len_df, short_net_p1_idx_arr, long_net_p1_idx_arr, short_p2_idx_arr, long_p2_idx_arr, short_obj, long_obj)\n","\n","    # print(\"get_wave_bias elapsed time :\", time.time() - start_0)\n","\n","    len_short, len_long = len(short_p1_openi_idx), len(long_p1_openi_idx)\n","\n","    # ------ plot_data ------ #\n","    try:\n","        # start_0 = time.time()\n","        if len_short == 0:\n","            short_pr = []\n","            gs_idx += 1\n","        else:\n","            short_tr = short_tr_arr.mean()\n","            short_pr, short_liqd = get_pr_v4(OrderSide.SELL, high, low, short_obj, short_tpout_arr, short_lvrg_arr, short_fee_arr, p_ranges,\n","                                             p_qty_ratio, inversion)\n","            short_total_pr = to_total_pr(len_df, short_pr, short_obj[-2])\n","            short_cum_pr = np.cumprod(short_total_pr)\n","            short_hlm = hlm(short_pr, short_p2_true_bias_bool)\n","            short_trade_ticks = np.mean(short_obj[-2] - short_obj[-1])\n","            if signi:\n","                short_idep_res_obj = (short_tpbox_p2exec_hhm, short_hlm) + get_res_info_nb_v2(sample_len, short_pr, short_total_pr, short_cum_pr, short_liqd)\n","            else:\n","                gs_idx = plot_info_v8(gs, gs_idx, len_df, sample_len, short_tr, short_tpbox_hhm, short_tpbox_p2exec_hhm, short_outbox_hhm, short_hlm, short_trade_ticks, short_net_p1_frq, short_pr, short_total_pr,\n","                                      short_cum_pr, short_liqd, short_lvrg_arr.mean(), title_position, fontsize)\n","        # print(\"short plot_data elapsed time :\", time.time() - start_0)\n","\n","    except Exception as e:\n","        gs_idx += 1\n","        print(\"error in short plot_data :\", e)\n","\n","    try:\n","        # start_0 = time.time()\n","        if len_long == 0:\n","            long_pr = []\n","            gs_idx += 1\n","        else:\n","            long_tr = long_tr_arr.mean()\n","            long_pr, long_liqd = get_pr_v4(OrderSide.BUY, high, low, long_obj, long_tpout_arr, long_lvrg_arr, long_fee_arr, p_ranges, p_qty_ratio,\n","                                           inversion)\n","            long_total_pr = to_total_pr(len_df, long_pr, long_obj[-2])\n","            long_cum_pr = np.cumprod(long_total_pr)\n","            # long_hhm = long_net_p1_hhm\n","            long_hlm = hlm(long_pr, long_p2_true_bias_bool)\n","            long_trade_ticks = np.mean(long_obj[-2] - long_obj[-1])\n","            if signi:\n","                long_idep_res_obj = (long_tpbox_p2exec_hhm, long_hlm) + get_res_info_nb_v2(sample_len, long_pr, long_total_pr, long_cum_pr, long_liqd)\n","            else:\n","                gs_idx = plot_info_v8(gs, gs_idx, len_df, sample_len, long_tr, long_tpbox_hhm, long_tpbox_p2exec_hhm, long_outbox_hhm, long_hlm, long_trade_ticks, long_net_p1_frq, long_pr, long_total_pr,\n","                                      long_cum_pr, long_liqd, long_lvrg_arr.mean(), title_position, fontsize)\n","        # print(\"long plot_data elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","        gs_idx += 1\n","        print(\"error in long plot_data :\", e)\n","\n","    try:\n","        # start_0 = time.time()\n","        if len_short * len_long == 0:\n","            both_pr = []\n","            gs_idx += 1\n","        else:\n","            both_tr = (short_tr + long_tr) / 2\n","            both_pr = np.vstack((short_pr, long_pr))  # for 2d arr, obj 를 1d 로 만들지 않는 이상, pr 은 2d 유지될 것\n","            both_total_pr = to_total_pr(len_df, both_pr, both_obj[-2])\n","            both_cum_pr = np.cumprod(both_total_pr)\n","            both_liqd = min(short_liqd, long_liqd)\n","            both_p2_true_bias_bool = np.hstack((short_p2_true_bias_bool, long_p2_true_bias_bool))  # hstack for 1d arr, vstack for 2d arr\n","            both_tpbox_hhm = (short_tpbox_hhm + long_tpbox_hhm) / 2\n","            both_tpbox_p2exec_hhm, both_hlm = (short_tpbox_p2exec_hhm + long_tpbox_p2exec_hhm) / 2, (short_hlm + long_hlm) / 2\n","            both_outbox_hhm = (short_outbox_hhm + long_outbox_hhm) / 2\n","            both_trade_ticks = np.mean(both_obj[-2] - both_obj[-1])\n","            both_net_p1_frq = short_net_p1_frq + long_net_p1_frq\n","            if signi:\n","                both_idep_res_obj = (both_tpbox_p2exec_hhm, both_hlm) + get_res_info_nb_v2(sample_len, both_pr, both_total_pr, both_cum_pr, both_liqd)\n","            else:\n","                gs_idx = plot_info_v8(gs, gs_idx, len_df, sample_len, both_tr, both_tpbox_hhm, both_tpbox_p2exec_hhm, both_outbox_hhm, both_hlm, both_trade_ticks, both_net_p1_frq, both_pr, both_total_pr,\n","                                      both_cum_pr, both_liqd, lvrg_arr.mean(), title_position, fontsize)\n","        # print(\"both plot_data elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","        gs_idx += 1\n","        print(\"error in both plot_data :\", e)\n","\n","    if not signi:\n","        if len_short * len_long > 0:\n","            for obj, bias_arr, cum_pr in zip([short_obj, long_obj, both_obj], [short_p2_true_bias_bool, long_p2_true_bias_bool, both_p2_true_bias_bool],\n","                                             [short_cum_pr, long_cum_pr, both_cum_pr]):\n","                try:\n","                    # start_0 = time.time()\n","                    gs_idx = frq_dev_plot_v4(gs, gs_idx, len_df, sample_len, obj[-2], bias_arr, cum_pr[-1], fontsize)\n","                    # print(\"frq_dev_plot elapsed time :\", time.time() - start_0)\n","                except Exception as e:\n","                    gs_idx += 1\n","                    print(\"error in frq_dev_plot :\", e)\n","            plt.show()\n","            plt.close()\n","\n","        return short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_tr_arr, short_p2_true_bias_bool, short_p2_idx_arr, short_tp_1, short_tp_0, short_out_1, short_out_0, short_ep2_0, \\\n","               long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_tr_arr, long_p2_true_bias_bool, long_p2_idx_arr, long_tp_1, long_tp_0, long_out_1, long_out_0, long_ep2_0  # long_net_p1_idx_arr long_p2_idx_arr\n","\n","    else:\n","        return [short_idep_res_obj[:-1], long_idep_res_obj[:-1], both_idep_res_obj[:-1]]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"I9GysZ5_vv5J"},"outputs":[],"source":["def plot_info_v8(gs, gs_idx, len_df, sample_len, tr, hhm, p2_hhm, out_hhm, hlm, bars_in, net_p1_frq, pr, total_pr, cum_pr, liqd, leverage, title_position, fontsize):\n","  try:\n","    plt.subplot(gs[gs_idx])\n","    idep_res_obj = get_res_info_nb_v2(sample_len, pr, total_pr, cum_pr, liqd)\n","    plt.plot(cum_pr)\n","    plt.plot(idep_res_obj[-1], color='gold')\n","    if sample_len is not None:\n","      plt.axvline(sample_len, alpha=1., linestyle='--', color='#ffeb3b')\n","    plt.xlim(0, len_df)\n","\n","    title_str = \"tr : {:.3f}\\n tpbox_hhm : {:.3f}\\n tpbox_p2exec_hhm : {:.3f}\\n outbox_hhm : {:.3f}\\n hlm : {:.3f}\\n bars_in : {:.3f}\\n net_p1_frq : {}\\n frq : {}\\n dpf : {:.3f}\\n wr : {:.3f}\\n sr : {:.3f}\\n acc_pr : {:.3f}\\n sum_pr : {:.3f}\\n\" +\\\n","              \"min_pr : {:.3f}\\n liqd : {:.3f}\\n acc_mdd : -{:.3f}\\n sum_mdd : -{:.3f}\\n leverage {:.3f}\"\n","    plt.title(title_str.format(tr, hhm, p2_hhm, out_hhm, hlm, bars_in, net_p1_frq, *idep_res_obj[:-1], leverage), position=title_position, fontsize=fontsize) #, color='yellow')\n","  except Exception as e:\n","    print(\"error in plot_info :\", e)\n","\n","  return gs_idx + 1"]},{"cell_type":"markdown","metadata":{"id":"EFyWTuscH8VH"},"source":["#### get paired_res function"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qfbtFVMR01UJ"},"outputs":[],"source":["def en_ex_pairing_v9(res_df, open_idx_list, open_info_list, ohlc_list, config_list, np_timeidx, funcs, show_detail=False):  # 이미 충분히 줄여놓은 idx 임\n","\n","    open_info1, open_info2 = open_info_list\n","    side_arr1, _, _, id_idx_arr1 = open_info1\n","    side_arr2, _, _, _ = open_info2\n","\n","    expiry_p1, expiry_p2, lvrg_set = funcs\n","\n","    net_p1_idx_list, p1_idx_list, p2_idx_list, pair_idx_list, pair_price_list, lvrg_list, fee_list, tpout_list, tr_list = [[] for li in range(9)]\n","    len_df = len(res_df)\n","\n","    open, high, low, close = ohlc_list\n","    \n","    open_idx1, open_idx2 = open_idx_list\n","    len_open_idx1 = len(open_idx1)\n","    len_open_idx2 = len(open_idx2)\n","    i, open_i1, open_i2 = 0, -1, -1  # i for total_res_df indexing\n","\n","    while 1:   # for p1's loop\n","\n","        # Todo, \n","        #   1. (갱신) p1's open_i + 1 과 op_idx 를 꺼내오는 건, eik1 또는 tp 체결의 경우만 해당됨, \n","        #   2. out 의 경우 p2's op_idx 기준으로 retry 필요\n","        #     a. 또한, p2's op_idx > p1's op_idx\n","\n","        # ============ get p1_info ============ #\n","        # if eik1 or tp_done or first loop:\n","        open_i1 += 1  # 확인 끝났으면 조기 이탈(+1), 다음 open_idx 조사 진행\n","        if open_i1 >= len_open_idx1:\n","            break\n","\n","        if show_detail:\n","            print(\"open_i1 :\", open_i1, side_arr1[open_i1])\n","\n","        op_idx1 = open_idx1[open_i1]  # open_i1 는 i 와 별개로 운영\n","        if op_idx1 < i:  # i = 이전 거래 끝난후의 res_df index - \"거래 종료후 거래 시작\", '<' : 거래 종료시점 진입 가능하다는 의미\n","            continue\n","\n","        # ------ set loop index i ------ #\n","        i = op_idx1      # + 1 --> op_idx1 = op_idx2 가능함 # open_signal 이 close_bar.shift(1) 이라고 가정하고 다음 bar 부터 체결확인한다는 의미\n","        if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","            break        \n","\n","        # ------ dynamic arr info by ID ------ #\n","        #     1. 해당 id 로 config 재할당해야함\n","        #       a. use open_i1\n","        open_side = side_arr1[open_i1]\n","        id_idx = id_idx_arr1.astype(int)[open_i1]\n","        config = config_list[id_idx]\n","        selection_id = config.selection_id\n","        check_hlm = config.tr_set.check_hlm   \n","\n","        # check_net_hhm = 1 if (config.tr_set.wave_itv1 == config.tr_set.wave_itv2) and (config.tr_set.wave_period1 == config.tr_set.wave_period2) else 0\n","\n","        side_pos = 'short' if open_side == OrderSide.SELL else 'long'   \n","        if show_detail:\n","          print(\"============ op_idx1 : {} {} ============\".format(op_idx1, open_side))\n","     \n","        # if show_detail:\n","        #   print(\"check_hlm :\", check_hlm)\n","\n","        # ------ load tr_data ------ #\n","        tp_arr = res_df['{}_tp_{}'.format(side_pos, selection_id)].to_numpy()\n","        ep1_arr = res_df['{}_ep1_{}'.format(side_pos, selection_id)].to_numpy()\n","        ep2_arr = res_df['{}_ep2_{}'.format(side_pos, selection_id)].to_numpy()\n","        out_arr = res_df['{}_out_{}'.format(side_pos, selection_id)].to_numpy()\n","\n","        tr_arr = res_df['{}_tr_{}'.format(side_pos, selection_id)].to_numpy()  # just for p1_hhm\n","\n","        tp_1_ = res_df['{}_tp_1_{}'.format(side_pos, selection_id)].to_numpy()[op_idx1]  # for p2_box location & p1's exipiry\n","        tp_0_ = res_df['{}_tp_0_{}'.format(side_pos, selection_id)].to_numpy()[op_idx1]\n","        tp_gap_ = res_df['{}_tp_gap_{}'.format(side_pos, selection_id)].to_numpy()[op_idx1]    \n","\n","        # if not check_net_hhm:  # this phase exist for p1 entry (net hhm sync.) in p2_platform\n","        exec_j, ep_j, tp_j, out_j, entry_done, en_p, fee = check_entry_v5(res_df, config, op_idx1, tp_1_, tp_gap_, len_df, open_side,\n","                                                                                [*ohlc_list, ep1_arr], expiry_p2)        \n","        i = exec_j  # = entry_loop 를 돌고 나온 e_j\n","        if not entry_done:\n","            if show_detail:\n","              print(\"p1's expiry by expiry_p2 function in p1's loop : continue\")\n","            continue   \n","        # else:        \n","        #   tp_j = op_idx1\n","\n","        prev_open_i2 = open_i2\n","        net_p1_idx_list.append(op_idx1)\n","        if check_hlm in [0, 1]:\n","          i = op_idx1  # allow op_idx2 = op_idx1\n","        allow_exit = 1\n","        # ============ entry loop ============ #\n","        while 1:  # for p2's loop (allow retry)\n","\n","          # ============ get p2_info ============ #\n","          open_i2 += 1  # 확인 끝났으면 조기 이탈(+1), 다음 open_idx 조사 진행\n","          if open_i2 >= len_open_idx2:  # open_i2 소진\n","              break\n","\n","          if show_detail:\n","            print(\"open_i2 :\", open_i2, side_arr2[open_i2])\n","\n","          # ------ check side sync. ------ #\n","          if open_side != side_arr2[open_i2]:\n","            continue\n","\n","          op_idx2 = open_idx2[open_i2]  # open_i2 는 i 와 별개로 운영\n","          if op_idx2 < i:   # p1 execution 이후의 i 를 허용 (old, 이곳 i = op_idx1 + 1 or p2's exec_j or exit_loop's i + 1)\n","            continue\n","          \n","          if show_detail:\n","            print(\"op_idx1, op_idx2 :\", op_idx1, op_idx2, side_arr2[open_i2])\n","          \n","          i = op_idx2 + 1  # open_signal 이 close_bar.shift(1) 이라고 가정하고 다음 bar 부터 체결확인한다는 의미\n","          if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","              break\n","\n","          tp_ = tp_arr[op_idx1]          \n","          ep2_ = ep2_arr[op_idx2]\n","          out_ = out_arr[op_idx2]\n","\n","          out_1_ = res_df['{}_out_1_{}'.format(side_pos, selection_id)].to_numpy()[op_idx2]\n","          out_0_ = res_df['{}_out_0_{}'.format(side_pos, selection_id)].to_numpy()[op_idx2]\n","          out_gap_ = res_df['{}_out_gap_{}'.format(side_pos, selection_id)].to_numpy()[op_idx2]\n","          \n","          # ------ check p1's expiry - Todo, priority ------ # - p2_box 생성 이전의 hl_survey\n","          # 1. op_idx1 ~ op_idx2 까지의 hl_check \n","          if check_hlm:  # p1_hlm, p2_hlm\n","            if op_idx1 < op_idx2:\n","              expire, touch_idx = expiry_p1(res_df, config, op_idx1, op_idx2, tp_1_, tp_0_, tp_gap_, ohlc_list[1:3], open_side)\n","              if expire:   # p1's expiry\n","                  if show_detail:\n","                    print(\"expiry_p1, touch_idx = {} : break\".format(touch_idx))\n","                  i = touch_idx  #  + 1  --> 이거 아닌것 같음 # op_idx1 과 op_idx2 사이의 op_idx1' 을 살리기 위함, 즉 바로 다음 op_idx1 로 회귀 (건너뛰지 않고)\n","                  open_i2 = prev_open_i2\n","                  break   # change op_idx1\n","          \n","          # ------ point validation ------ # p1_loop 로 return 되는 정확한 i 를 반환하기 위해서 expiry_p1 에 순서 양보  # Todo, 새로운 tp, ep, out 에 대한 처리 필요 (p1_hlm 사용시)\n","          if open_side == OrderSide.SELL:\n","            if not (tp_ < ep2_):  # tr_set validation & reject hl_out open_exec.\n","              break  # change op_idx1\n","            elif not (ep2_ < out_ and close[op_idx2] < out_):\n","              continue  # change op_idx2\n","          else:\n","            if not (tp_ > ep2_):              \n","              break\n","            elif not (ep2_ > out_ and close[op_idx2] > out_):\n","              continue\n","\n","          if check_hlm == 2:\n","            # ------ p2_box location ------ #\n","            if open_side == OrderSide.SELL:\n","              if not ((tp_1_ + tp_gap_ * config.tr_set.p2_box_k1 <= out_1_) and (out_0_ <= tp_0_ - tp_gap_ * config.tr_set.p2_box_k2)):  # tp1, tp0 에 닿으면 expiry\n","                if show_detail:\n","                    print(\"p2_box rejection : continue\")\n","                continue\n","              else:                \n","                # ------ p1p2_low ------ #\n","                if not high[op_idx1:op_idx2 + 1].max() < tp_0_ - tp_gap_ * config.tr_set.p1p2_low:\n","                  if show_detail:\n","                    print(\"p1p2_low rejection : continue\")\n","                  continue\n","            else:\n","              if not ((tp_1_ - tp_gap_ * config.tr_set.p2_box_k1 >= out_1_) and (out_0_ >= tp_0_ + tp_gap_ * config.tr_set.p2_box_k2)):\n","                if show_detail:\n","                    print(\"p2_box rejection : continue\")\n","                continue\n","              else:\n","                # ------ p1p2_low ------ #\n","                if not low[op_idx1:op_idx2 + 1].min() > tp_0_ + tp_gap_ * config.tr_set.p1p2_low:\n","                  if show_detail:\n","                    print(\"p1p2_low rejection : continue\")\n","                  continue\n","\n","            # ------ check p2's expiry ------ #\n","            exec_j, ep_j, _, out_j, entry_done, en_p, fee = check_entry_v5(res_df, config, op_idx2, out_1_, out_gap_, len_df, open_side,\n","                                                                                    [*ohlc_list, ep2_arr], expiry_p2)   # tp_j 는 op_idx1 사용\n","            i = exec_j  # = entry_loop 를 돌고 나온 e_j\n","            if not entry_done:   # p2's expiry\n","                if show_detail:\n","                    print(\"expiry_p2, i = {} :continue\".format(i))\n","                continue  # change op_idx2            \n","            \n","          # ------ tr_threshold ------ #   # en_p 에 대해 하는게 맞을 것으로봄\n","          if check_hlm:\n","            if open_side == OrderSide.SELL:\n","              tr_ = abs((en_p / tp_ - config.trader_set.limit_fee - 1) / (en_p / out_ - config.trader_set.market_fee - 1))              \n","              if config.loc_set.point1.short_tr_thresh != \"None\":\n","                if tr_ < config.loc_set.point1.short_tr_thresh:\n","                  continue\n","            else:\n","              tr_ = abs((tp_ / en_p - config.trader_set.limit_fee - 1) / (out_ / en_p - config.trader_set.market_fee - 1))\n","              if config.loc_set.point1.short_tr_thresh != \"None\":  # thresh 여부는 short 기준 공통\n","                if tr_ < config.loc_set.point1.long_tr_thresh:\n","                  continue\n","          else:\n","            tr_ = tr_arr[op_idx1]\n","\n","          # ------ leverage ------ #\n","          # out = out_arr[out_j]  # lvrg_set use out on out_j (out_j shoud be based on p2)\n","          leverage = lvrg_set(res_df, config, open_side, en_p, out_, fee)  # res_df 변수 사용됨 - 주석 처리 된 상태일뿐\n","          if leverage is None:\n","              if show_detail:\n","                    print(\"leverage is None : continue\")\n","              if check_hlm:\n","                continue  # change op_idx2\n","              else:\n","                break   # change op_idx1\n","\n","          exit_done, cross_on = 0, 0\n","          # ------ check tpout_onexec ------ #\n","          # if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","          if config.ep_set.entry_type == \"LIMIT\":\n","              if config.tp_set.tp_onexec:  # dynamic 은 tp_onexec 사용하는 의미가 없음\n","                  tp_j = exec_j\n","              if config.out_set.out_onexec:  # dynamic 은 out_onexec 사용하는 의미가 없음\n","                  out_j = exec_j\n","\n","          # ============ exit loop ============ # --> p1_hlm 의 경우, 1번만 실행\n","          if not allow_exit:\n","            continue\n","\n","          while 1:\n","              if not config.tp_set.static_tp:  # 앞으로 왠만하면 static 만 사용할 예정\n","                  tp_j = i\n","              if not config.out_set.static_out:\n","                  out_j = i\n","\n","              # ------------ out ------------ #  # out 우선 (보수적 검증)\n","              # ------ signal_out ------ #\n","              if not exit_done:\n","                  exit_done, cross_on, ex_p, fee = check_signal_out_v3(res_df, config, open_i2, i, len_df, fee, open_side, cross_on, exit_done, [*ohlc_list, np_timeidx])\n","              # ------ hl_out ------ #\n","              if config.out_set.hl_out != \"None\":\n","                  if not exit_done:  # and i != len_df - 1:\n","                      exit_done, ex_p, fee = check_hl_out_v2(config, i, out_j, len_df, fee, open_side, exit_done, [*ohlc_list, out_arr])\n","\n","              # ------------ tp ------------ #\n","              if not config.tp_set.non_tp and i != exec_j:\n","                if not exit_done:\n","                  exit_done, ex_p, fee = check_limit_tp_exec(res_df, config, open_i2, i, tp_j, len_df, fee, open_side, exit_done,\n","                                                            [*ohlc_list, [tp_arr]])  # 여기서는 j -> i 로 변경해야함\n","                  # if config.tp_set.tp_type in ['LIMIT']:  # 'BOTH' -> 앞으로는, LIMIT 밖에 없을거라 주석처리함\n","                  # if not exit_done and config.tp_set.tp_type in ['MARKET', 'BOTH']:\n","\n","              if exit_done:  # 이 phase 는 exit_phase 뒤에도 있어야할 것 - entry_done var. 사용은 안하겠지만\n","                  # ------ append dynamic vars. ------ #\n","                  p1_idx_list.append(op_idx1)  # side, zone, start_ver arr 모두 openi_list 로 접근하기 위해 open_i 를 담음\n","                  p2_idx_list.append(op_idx2)\n","                  pair_idx_list.append([exec_j, i])  # entry & exit (체결 기준임)\n","                  pair_price_list.append([en_p, ex_p])\n","                  lvrg_list.append(leverage)\n","                  fee_list.append(fee)\n","                  tpout_list.append([tp_arr[tp_j], out_arr[out_j]])  # for tpout_line plot_check\n","                  tr_list.append(tr_)   # Todo, tr vectorize 불가함, 직접 구해주어야할 건데.. (오래걸리지 않을까 --> tr_set 데이터만 모아서 vecto 계산이 나을 것)\n","\n","                  # open_i += 1  # 다음 open_idx 조사 진행\n","                  break\n","\n","              # 1. 아래있으면, 체결 기준부터 tp, out 허용 -> tp 가 entry_idx 에 체결되는게 다소 염려되기는 함, 일단 진행 (그런 case 가 많지 않았으므로)\n","              # 2. 위에있으면, entry 다음 tick 부터 exit 허용\n","              i += 1\n","              if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","                  break\n","          \n","          if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","              break\n","\n","          if exit_done == 1:  # tp_done\n","            if show_detail:\n","                    print(\"exit_done = {}, i = {} : break\".format(exit_done, i))\n","            break   # change op_idx1\n","          else:\n","            if check_hlm:\n","              if check_hlm == 1:   # exit only once in p1_hlm mode\n","                allow_exit = 0\n","              if show_detail:\n","                      print(\"exit_done = {}, i = {} : continue\".format(exit_done, i))\n","              continue  # change op_idx2\n","            else:\n","              if show_detail:\n","                      print(\"exit_done = {}, i = {} : break\".format(exit_done, i))\n","              break   # change op_idx1    \n","\n","        if i >= len_df:  # or open_i >= len_open_idx:  # res_df 의 last_index 까지 돌아야함\n","            break\n","        else:\n","            continue\n","\n","    return np.array(net_p1_idx_list), np.array(p1_idx_list), np.array(p2_idx_list), np.array(pair_idx_list), np.array(pair_price_list), np.array(lvrg_list), np.array(\n","        fee_list), np.array(tpout_list), np.array(tr_list)\n","\n","\n","def check_entry_v5(res_df, config, op_idx, wave1, wave0, len_df, open_side, np_datas, expiry):\n","    open, high, low, close, ep_arr = np_datas\n","    ep_j = op_idx\n","    tp_j = op_idx\n","    out_j = op_idx\n","\n","    # print(\"ep_arr[op_idx] :\", ep_arr[op_idx])\n","\n","    selection_id = config.selection_id    \n","    # allow_ep_in = 0 if config.ep_set.point2.use_point2 else 1\n","    entry_done = 0\n","    ep = None\n","\n","    if config.ep_set.entry_type == \"LIMIT\":\n","        fee = config.trader_set.limit_fee\n","\n","        for e_j in range(op_idx + 1, len_df):\n","            # ------ index setting for dynamic options ------ #\n","            if not config.ep_set.static_ep:\n","                ep_j = e_j  # dynamic_ep 를 위한 ep_index var.\n","                out_j = e_j  # dynamic_out 를 위한 out_index var. - 조건식이 static_ep 와 같이 있는 이유 모름 => dynamic_lvrg 로 사료됨\n","\n","            if not config.tp_set.static_tp:\n","                tp_j = e_j\n","\n","            # ------ expire_k & expire_tick ------ # - limit 사용하면 default 로 expire_k 가 존재해야함\n","            if expiry(res_df, config, op_idx, e_j, wave1, wave0, [high, low], open_side):  # tp_j, \n","              break\n","\n","            # ------ point2 ------ #\n","            # if not allow_ep_in:\n","            #     allow_ep_in, out_j = ep_loc_point2(res_df, config, e_j, out_j, side=OrderSide.SELL)\n","            #     if allow_ep_in:\n","            #       if config.ep_set.point2.entry_type == \"LIMIT\":\n","            #         ep_j = e_j\n","            #         # print(\"e_j in point2 :\", e_j)\n","            #         continue\n","\n","            # ------ check ep_exec ------ #\n","            # if allow_ep_in:\n","              # if config.ep_set.point2.use_point2 and config.ep_set.point2.entry_type == 'MARKET':\n","              #   entry_done = 1\n","              #   ep = c[e_j]\n","              #   break\n","              # else:\n","\n","            if open_side == OrderSide.SELL:\n","              if high[e_j] >= ep_arr[ep_j]:\n","                  entry_done = 1\n","                  ep = ep_arr[ep_j]\n","                  if open[e_j] >= ep_arr[ep_j]:  # open comp 는 결국, 수익률에 얹어주는 logic (반보수) -> 사용 보류\n","                      ep = open[e_j]\n","                  break\n","            else:\n","              if low[e_j] <= ep_arr[ep_j]:\n","                  entry_done = 1\n","                  ep = ep_arr[ep_j]\n","                  if open[e_j] <= ep_arr[ep_j]:\n","                      ep = open[e_j]\n","                  break\n","\n","    else:  # market entry\n","        e_j = op_idx + 1\n","        entry_done = 1\n","        ep = close[op_idx]\n","        fee = config.trader_set.market_fee\n","\n","    return e_j, ep_j, tp_j, out_j, entry_done, ep, fee  # 다음 start_i <-- e_j 로 변경\n","    #   e_j => 다음 phase 의 시작 index <-> ep_j : ep 의 기준 index\n","    #   ep_j, tp_j, out_j 가 return 되어야함 - exit phase 에서 이어가기 위함\n","\n","\n","def check_limit_tp_exec(res_df, config, open_i, i, tp_j, len_df, fee, open_side, exit_done, np_datas):\n","\n","    open, high, low, close, tps = np_datas\n","    tp = None\n","    selection_id = config.selection_id\n","    len_tps = len(tps)\n","\n","    for tp_i, tp_arr in enumerate(tps):\n","\n","        #     decay adjustment    #\n","        #     tp_j includes dynamic_j - functionalize  #\n","        # try:\n","        #     if config.tr_set.decay_gap != \"None\":\n","        #         decay_share = (j - open_i) // config.tp_set.decay_term\n","        #         decay_remain = (j - open_i) % config.tp_set.decay_term\n","        #         if j != open_i and decay_remain == 0:\n","        #             if open_side == OrderSide.SELL:\n","        #                 tp_arr[tp_j] += res_df['short_tp_gap_{}'.format(selection_id)].iloc[open_i] * config.tr_set.decay_gap * decay_share\n","        #             else:\n","        #                 tp_arr[tp_j] -= res_df['long_tp_gap_{}'.format(selection_id)].iloc[open_i] * config.tr_set.decay_gap * decay_share\n","        # except:\n","        #     pass\n","\n","        if open_side == OrderSide.SELL:\n","            if low[i] <= tp_arr[tp_j]:  # and partial_tp_cnt == tp_i:  # we use static tp now\n","                # if low[i] <= tp_arr[i] <= h[i]: --> 이건 잘못되었음\n","                # partial_tp_cnt += 1 --> partial_tp 보류\n","\n","                # ------ dynamic tp ------ #\n","                if tp_arr[i] != tp_arr[i - 1] and not config.tp_set.static_tp:\n","                    # tp limit 이 불가한 경우 - open 이 이미, tp 를 넘은 경우\n","                    if open[i] < tp_arr[i]:\n","                        tp = open[i]\n","                    # tp limit 이 가능한 경우 - open 이 아직, tp 를 넘지 않은 경우\n","                    else:\n","                        tp = tp_arr[i]\n","\n","                # ------ static tp ------ #\n","                else:\n","                    #   tp limit 이 불가한 경우 - open 이 이미, tp 를 넘은 경우\n","                    if open[i] < tp_arr[tp_j]:  # static 해놓고 decay 사용하면 dynamic 이니까\n","                        if config.tr_set.decay_gap != \"None\" and decay_remain == 0:\n","                            tp = open[i]  # tp_j -> open_i 를 가리키기 때문에 decay 는 한번만 진행되는게 맞음\n","                        else:\n","                            tp = tp_arr[tp_j]\n","                    else:\n","                        tp = tp_arr[tp_j]\n","\n","                if tp_i == len_tps - 1:\n","                    exit_done = 1  # partial 을 고려해 exit_done = 1 상태는 tp_i 가 last_index 로 체결된 경우만 해당\n","\n","        else:\n","            if high[i] >= tp_arr[tp_j]:\n","                # ------ dynamic tp ------ #\n","                if tp_arr[i] != tp_arr[i - 1] and not config.tp_set.static_tp:\n","                    if open[i] > tp_arr[i]:\n","                        tp = open[i]\n","                    else:\n","                        tp = tp_arr[i]\n","\n","                # ------ static tp ------ #\n","                else:\n","                    if open[i] > tp_arr[tp_j]:\n","                        if config.tr_set.decay_gap != \"None\" and decay_remain == 0:\n","                            tp = open[i]\n","                        else:\n","                            tp = tp_arr[tp_j]\n","                    else:\n","                        tp = tp_arr[tp_j]\n","\n","                if tp_i == len_tps - 1:\n","                    exit_done = 1  # partial 을 고려해 exit_done = 1 상태는 tp_i 가 last_index 로 체결된 경우만 해당\n","\n","    if exit_done:\n","        fee += config.trader_set.limit_fee\n","\n","    return exit_done, tp, fee\n","\n","\n","def check_signal_out_v3(res_df, config, open_i, i, len_df, fee, open_side, cross_on, exit_done, np_datas):    \n","\n","    _, _, _, close, np_timeidx = np_datas\n","    ex_p = None\n","    selection_id = config.selection_id\n","\n","    # ------ timestamp ------ #\n","    if config.out_set.tf_exit != \"None\":\n","        if np_timeidx[i] % config.out_set.tf_exit == config.out_set.tf_exit - 1 and i != open_i:\n","            exit_done = -1\n","\n","    # ------ rsi ------ # -> vectorize 가능함 => 추후 적용\n","    if config.out_set.rsi_exit:\n","        rsi_T = res_df['rsi_T'].to_numpy()\n","\n","        if open_side == OrderSide.SELL:\n","            if (rsi_T[i - 1] >= 50 - config.loc_set.point.osc_band) & (rsi_T[i] < 50 - config.loc_set.point.osc_band):\n","                exit_done = -1\n","        else:\n","            if (rsi_T[i - 1] <= 50 + config.loc_set.point.osc_band) & (rsi_T[i] > 50 + config.loc_set.point.osc_band):\n","                exit_done = -1\n","\n","    # ------ heikin_ashi ------ #\n","    # if selection_id in ['v3_3']:\n","    #     if open_side == OrderSide.SELL:\n","    #       if (ha_o[i] < ha_c[i]):# & (ha_o[i] == ha_l[i]):   # 양봉 출현\n","    #           exit_done = -1\n","    #     else:\n","    #       if (ha_o[i] > ha_c[i]):# & (ha_o[i] == ha_h[i]):  # 음봉 출현\n","    #           exit_done = -1\n","\n","    # ------------ early out ------------ #\n","    # ------ bb ------ # --> cross_on 기능은 ide latency 개선 여부에 해당되지 않음\n","    if selection_id in ['v5_2']:\n","        bb_upper_5T = res_df['bb_upper_5T'].to_numpy()\n","        bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","\n","        if open_side == OrderSide.SELL:\n","            if close[i] < bb_lower_5T[i] < close[i - 1]:\n","                cross_on = 1\n","            if cross_on == 1 and close[i] > bb_upper_5T[i] > close[i - 1]:\n","                exit_done = -1\n","        else:\n","            if close[i] > bb_upper_5T[i] > close[i - 1]:\n","                cross_on = 1\n","            if cross_on == 1 and close[i] < bb_lower_5T[i] < close[i - 1]:\n","                exit_done = -1\n","\n","    if exit_done:\n","        ex_p = close[i]\n","        fee += config.trader_set.market_fee\n","\n","    return exit_done, cross_on, ex_p, fee\n","\n","\n","def check_hl_out_v2(config, i, out_j, len_df, fee, open_side, exit_done, np_datas):\n","\n","    open, high, low, close, out_arr = np_datas\n","    ex_p = None\n","\n","    if config.out_set.hl_out:\n","        if open_side == OrderSide.SELL:\n","            if high[i] >= out_arr[out_j]:  # check out only once\n","                exit_done = -1\n","        else:\n","            if low[i] <= out_arr[out_j]:  # check out only once\n","                exit_done = -1\n","    else:  # close_out\n","        if open_side == OrderSide.SELL:\n","            if close[i] >= out_arr[out_j]:  # check out only once\n","                exit_done = -1\n","        else:\n","            if close[i] <= out_arr[out_j]:  # check out only once\n","                ex_p = close[i]\n","                exit_done = -1\n","\n","    if exit_done:\n","        if config.out_set.hl_out:\n","            ex_p = out_arr[out_j]\n","        else:\n","            ex_p = close[i]\n","\n","        if open_side == OrderSide.SELL:\n","            if open[i] >= out_arr[out_j]:\n","                ex_p = open[i]\n","        else:\n","            if open[i] <= out_arr[out_j]:\n","                ex_p = open[i]\n","\n","        fee += config.trader_set.market_fee\n","\n","    return exit_done, ex_p, fee"]},{"cell_type":"markdown","metadata":{"id":"zQ-roiifspcX"},"source":["#### ep_loc.point & zone legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Js5eL87VspcX"},"outputs":[],"source":["\n","    # res_df['entry_{}'.format(selection_id)] = np.where((res_df['open'] >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 (res_df['close'] < res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(selection_id)] - 1, res_df['entry_{}'.format(selection_id)])\n","\n","    # res_df['entry_{}'.format(selection_id)] = np.where((res_df['open'] >= res_df['bb_lower_1m']) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['bb_lower_1m']) &\n","    #                 (res_df['close'] < res_df['bb_lower_1m'])\n","    #                 , res_df['entry_{}'.format(selection_id)] - 1, res_df['entry_{}'.format(selection_id)])\n","\n","    # res_df['entry_{}'.format(selection_id)] = np.where((res_df['open'] <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   (res_df['close'] > res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(selection_id)] + 1, res_df['entry_{}'.format(selection_id)])\n","\n","    # res_df['entry_{}'.format(selection_id)] = np.where((res_df['open'] <= res_df['bb_upper_1m']) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['bb_upper_1m']) &\n","    #                   (res_df['close'] > res_df['bb_upper_1m'])\n","    #                 , res_df['entry_{}'.format(selection_id)] + 1, res_df['entry_{}'.format(selection_id)])\n","\n","\n","    \n","   # --------------- ema --------------- #   \n","  # res_df['ema5_1m'] = ema(res_df['close'], 5).shift(1)\n","\n","  #   # --------------- cloud bline --------------- #   \n","  # res_df['cloud_bline_1m'] = cloud_bline(res_df, 26).shift(1)\n","  \n","    #       stochastic      #\n","  # res_df['stoch'] = stoch(res_df, 5, 3, 3)\n","\n","    #       fisher      #\n","  # res_df['fisher30'] = fisher(res_df, 30)\n","  # res_df['fisher60'] = fisher(res_df, 60)\n","  # res_df['fisher120'] = fisher(res_df, 120)\n","\n","    #       cctbbo      #\n","  # res_df['cctbbo'], _ = cct_bbo(res_df, 21, 13)\n","\n","    #       ema_roc      #\n","  # res_df['ema_roc'] = ema_roc(res_df['close'], 13, 9)\n","\n","\n","   # ------------------------------ htf data ------------------------------ #    \n","\n","  #             Todo              #\n","  # htf_df = pd.read_excel(date_path2 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # htf_df = pd.read_excel(date_path3 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # htf_df = pd.read_excel(date_path4 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # htf_df = pd.read_excel(date_path5 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # # # # htf_df = pd.read_excel(date_path6 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","\n","  # # ---- htf index slicing ---- #\n","  # htf_df = htf_df.loc[:res_df.index[-1]]\n","  \n","  # print(\"res_df.index[-1] :\", res_df.index[-1])\n","  # print(\"htf_df.index[-1] :\", htf_df.index[-1])\n","\n","  # res_df = dc_line(res_df, htf_df, '5m')\n","  # res_df = dc_level(res_df, '5m', 1)\n","\n","\n","  # # # if \"sma4\" in res_df.columns:\n","  # # #   res_df.drop(\"sma4\", axis=1, inplace=1)\n","\n","  # # htf_df['sma'] = htf_df['close'].rolling(60).mean()\n","  # # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, htf_df, [-1]), columns=['sma_30m']))\n","  \n","  # htf_df['stoch'] = stoch(htf_df, 13, 3, 3)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, htf_df, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","   \n","  # fifth_df['ema'] = ema(fifth_df['close'], 5)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, fifth_df, [-1]), columns=['ema5']))\n","\n","        # ------------------------------------ short ------------------------------------ # \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 0:\n","        #   mr_score += 1          \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_upper_1m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_upper_3m'].iloc[i] <= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_upper_5m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == 'MARKET':\n","        #   mr_const_cnt += 1\n","        #   if (res_df['close'].iloc[i] - res_df['short_tp'].iloc[i]) / (res_df['short_out'].iloc[i] - res_df['close'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error):  \n","        #     mr_score += 1\n","\n","           \n","        # ------- entry once ------- #   \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == 1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == -1:\n","        #     prev_entry_cnt += 1          \n","        # # # print(\"prev_entry_cnt :\", prev_entry_cnt)\n","\n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] < res_df['bb_lower_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_lower2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_base_1h'].iloc[i]:\n","\n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] < res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","  \n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['low'].iloc[i] > res_df['short_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1\n","\n","\n","\n","        # ------------------------------------ long ------------------------------------ # \n","          \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 1:\n","        #   mr_score += 1   \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 1:\n","        #   mr_score += 1     \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 1:\n","          # mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_lower_1m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_lower_3m'].iloc[i] >= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_lower_5m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == \"MARKET\":\n","          # mr_const_cnt += 1        \n","          # if (res_df['long_tp'].iloc[i] - res_df['close'].iloc[i]) / (res_df['close'].iloc[i] - res_df['long_out'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error): # 일반적으로 dr 상에서 tp 비율이 더 커짐 (tr 보다)\n","          #   mr_score += 1\n","\n","        # -------------- ep limit -------------- #    \n","        # mr_const_cnt += 1\n","        # # if (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # if config.ep_set.min_eplim_pct < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # # if 0 < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        #   # if res_df['st_gap_15m'].iloc[i] / res_df['open'].iloc[i] < 0:\n","        #   #   print(\"i, res_df['st_gap_15m'].iloc[i] :\", i, res_df['st_gap_15m'].iloc[i])\n","        #   mr_score += 1\n","\n","\n","        # -------------- entry once -------------- #    \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == -1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == 1:\n","        #     prev_entry_cnt += 1\n","          \n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","          \n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] > res_df['bb_upper_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_upper2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_base_1h'].iloc[i]:\n","        \n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] > res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","\n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['high'].iloc[i] < res_df['long_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","          \n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1"]},{"cell_type":"markdown","metadata":{"id":"qM6H6fmrKtsA"},"source":["#### legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":260,"status":"ok","timestamp":1653436951068,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"oLDZobRcgg6E","outputId":"2f07e665-41ba-4c7e-b5d7-43fc14d09cd5"},"outputs":[{"data":{"text/plain":["Rolling [window=100,center=False,axis=0,method=single]"]},"execution_count":92,"metadata":{},"output_type":"execute_result"}],"source":["res_df.low.rolling(100) #> 1000"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"uB-I09hKKvmu"},"outputs":[],"source":["def get_touch_idx_fill(tp_1_touch_idxs, net_p1_pair, net_p1_idx, len_df):\n","\n","    tp_1_touch_idx = np.full(len_df, np.nan)\n","    tp_1_touch_idx[net_p1_idx] = [np.nanmin(tp_1_touch_idxs[iin:iout]) for iin, iout in net_p1_pair]\n","    \n","    return fill_arr(tp_1_touch_idx)\n","    \n","def get_wave_bias_v5(res_df, config, high, low, len_df, short_net_p1_idx_arr, long_net_p1_idx_arr, short_p2_idx_arr, long_p2_idx_arr, short_obj,\n","                     long_obj):\n","    short_net_p1_idx = short_net_p1_idx_arr.astype(int)  # .reshape(-1, 1)\n","    short_p1_idx = short_obj[-1].astype(int).ravel()\n","    short_p2_idx = short_p2_idx_arr.astype(int).ravel()  # .reshape(-1, 1)\n","    short_en_idx = short_obj[2].astype(int)\n","\n","    short_tp_1 = ffill_line(res_df['short_tp_1_{}'.format(config.selection_id)].to_numpy(),\n","                            short_net_p1_idx)  # net_p1_idx ~ net_p1_idx' 사이에 대한 momentum 조사 (net 이유는 logic's validation)\n","    short_tp_0 = ffill_line(res_df['short_tp_0_{}'.format(config.selection_id)].to_numpy(), short_net_p1_idx)\n","    short_out_1 = ffill_line(res_df['short_out_1_{}'.format(config.selection_id)].to_numpy(),\n","                             short_p2_idx)  # 체결된, p2_idx ~ p2_idx' 사이에 대한 momentum 조사\n","    short_out_0 = ffill_line(res_df['short_out_0_{}'.format(config.selection_id)].to_numpy(), short_p2_idx)\n","    short_ep2_0 = ffill_line(res_df['short_ep2_0_{}'.format(config.selection_id)].to_numpy(), short_p2_idx)\n","    # short_net_wave_1 = ffill_line(res_df['short_wave_1_{}'.format(config.selection_id)].to_numpy(), short_op_idx)  # en_idx 에 sync 된 open_idx 를 사용해야함\n","    # short_net_wave_0 = ffill_line(res_df['short_wave_0_{}'.format(config.selection_id)].to_numpy(), short_op_idx)\n","\n","    long_net_p1_idx = long_net_p1_idx_arr.astype(int)  # .reshape(-1, 1)\n","    long_p1_idx = long_obj[-1].astype(int).ravel()\n","    long_p2_idx = long_p2_idx_arr.astype(int).ravel()  # .reshape(-1, 1)\n","    long_en_idx = long_obj[2].astype(int)\n","\n","    long_tp_1 = ffill_line(res_df['long_tp_1_{}'.format(config.selection_id)].to_numpy(), long_net_p1_idx)\n","    long_tp_0 = ffill_line(res_df['long_tp_0_{}'.format(config.selection_id)].to_numpy(), long_net_p1_idx)\n","    long_out_1 = ffill_line(res_df['long_out_1_{}'.format(config.selection_id)].to_numpy(), long_p2_idx)  # 체결된, p2_idx ~ p2_idx' 사이에 대한 momentum 조사\n","    long_out_0 = ffill_line(res_df['long_out_0_{}'.format(config.selection_id)].to_numpy(), long_p2_idx)\n","    long_ep2_0 = ffill_line(res_df['long_ep2_0_{}'.format(config.selection_id)].to_numpy(), long_p2_idx)\n","\n","    short_unq_p1_idx = np.unique(short_p1_idx)  # .reshape(-1, 1)   # 통일성을 위해 2d 로 설정\n","    long_unq_p1_idx = np.unique(long_p1_idx)  # .reshape(-1, 1)\n","\n","    bias_info_tick = config.tr_set.bias_info_tick\n","\n","    # print(\"long_net_p1_idx.shape :\", long_net_p1_idx.shape)\n","    # print(\"long_en_idx.shape :\", long_en_idx.shape)\n","\n","    # ================== touch idx ================== #\n","    # 1. min 에 초점을 맞추는 거니까, touch 없을시 len_df 로 설정\n","    # 2. future_data 사용이니까, shift(-bias_info_tick) 설정\n","    # 3. entry 다음 idx 부터 -> tp & out 체결 logic 이 현재 entry_idx 부터 되어있어서 취소\n","    # Todo, high 와 low 중 어디에 먼저닿느냐가 중요함을 key 로 잡고만든 logic 임\n","    len_df_range = np.arange(len_df)\n","    last_idx = len_df - 1  # nan 발생하면 대소 비교로 hhm 확인이 불가능해짐\n","    shift_range = bias_info_tick - 1  # entry_idx 까지 포함해서 wave_bias check\n","\n","    # ------------ pair & idxs ------------ #\n","    short_net_p1_pair = list(zip(short_net_p1_idx, np.append(short_net_p1_idx[1:], last_idx)))\n","    long_net_p1_pair = list(zip(long_net_p1_idx, np.append(long_net_p1_idx[1:], last_idx)))\n","\n","    short_p2_pair = list(zip(short_p2_idx, np.append(short_p2_idx[1:], last_idx)))\n","    long_p2_pair = list(zip(long_p2_idx, np.append(long_p2_idx[1:], last_idx)))\n","\n","    short_tp_1_touch_idxs = np.where(low <= short_tp_1, len_df_range,\n","                                     last_idx)  # .rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    short_tp_0_touch_idxs = np.where(high >= short_tp_0, len_df_range,\n","                                     last_idx)  # .rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    long_tp_1_touch_idxs = np.where(high >= long_tp_1, len_df_range,\n","                                    last_idx)  # .rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    long_tp_0_touch_idxs = np.where(low <= long_tp_0, len_df_range,\n","                                    last_idx)  # .rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","\n","    short_out_1_touch_idxs = np.where(low <= short_out_1, len_df_range,\n","                                      last_idx)  # .rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    short_out_0_touch_idxs = np.where(high >= short_out_0, len_df_range,\n","                                      last_idx)  # .rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    long_out_1_touch_idxs = np.where(high >= long_out_1, len_df_range,\n","                                     last_idx)  # .rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    long_out_0_touch_idxs = np.where(low <= long_out_0, len_df_range,\n","                                     last_idx)  # .rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","\n","    # ------------ min touch_idx ------------ #\n","    short_tp_1_touch_idx = get_touch_idx_fill(short_tp_1_touch_idxs, short_net_p1_pair, short_net_p1_idx, len_df)  # pair means 구간\n","    short_tp_0_touch_idx = get_touch_idx_fill(short_tp_0_touch_idxs, short_net_p1_pair, short_net_p1_idx, len_df)\n","    long_tp_1_touch_idx = get_touch_idx_fill(long_tp_1_touch_idxs, long_net_p1_pair, long_net_p1_idx, len_df)\n","    long_tp_0_touch_idx = get_touch_idx_fill(long_tp_0_touch_idxs, long_net_p1_pair, long_net_p1_idx, len_df)\n","\n","    short_out_1_touch_idx = get_touch_idx_fill(short_out_1_touch_idxs, short_p2_pair, short_p2_idx, len_df)  # pair means 구간\n","    short_out_0_touch_idx = get_touch_idx_fill(short_out_0_touch_idxs, short_p2_pair, short_p2_idx, len_df)\n","    long_out_1_touch_idx = get_touch_idx_fill(long_out_1_touch_idxs, long_p2_pair, long_p2_idx, len_df)\n","    long_out_0_touch_idx = get_touch_idx_fill(long_out_0_touch_idxs, long_p2_pair, long_p2_idx, len_df)\n","\n","    # ------------ point's touch_idx ------------ #\n","    short_tp_1_net_p1_touch_idx = short_tp_1_touch_idx[short_net_p1_idx]  # for tp_box's net_hhm\n","    short_tp_0_net_p1_touch_idx = short_tp_0_touch_idx[short_net_p1_idx]\n","    long_tp_1_net_p1_touch_idx = long_tp_1_touch_idx[long_net_p1_idx]\n","    long_tp_0_net_p1_touch_idx = long_tp_0_touch_idx[long_net_p1_idx]\n","    # print(\"long_tp_1_net_p1_touch_idx :\", long_tp_1_net_p1_touch_idx)\n","\n","    short_tp_1_unq_p1_touch_idx = short_tp_1_touch_idx[short_unq_p1_idx]  # p2 까지 체결된 p1's hhm\n","    short_tp_0_unq_p1_touch_idx = short_tp_0_touch_idx[short_unq_p1_idx]\n","    long_tp_1_unq_p1_touch_idx = long_tp_1_touch_idx[long_unq_p1_idx]\n","    long_tp_0_unq_p1_touch_idx = long_tp_0_touch_idx[long_unq_p1_idx]\n","\n","    short_tp_1_p2_touch_idx = short_tp_1_touch_idx[short_p2_idx]  # hlm 을 위한 hhm (on p2)\n","    short_tp_0_p2_touch_idx = short_tp_0_touch_idx[short_p2_idx]\n","    long_tp_1_p2_touch_idx = long_tp_1_touch_idx[long_p2_idx]\n","    long_tp_0_p2_touch_idx = long_tp_0_touch_idx[long_p2_idx]\n","\n","    short_out_1_p2_touch_idx = short_out_1_touch_idx[short_p2_idx]  # for out_box's executed_hhm\n","    short_out_0_p2_touch_idx = short_out_0_touch_idx[short_p2_idx]\n","    long_out_1_p2_touch_idx = long_out_1_touch_idx[long_p2_idx]\n","    long_out_0_p2_touch_idx = long_out_0_touch_idx[long_p2_idx]\n","\n","    # ------------------ bias_bool & hhm ------------------ #\n","    short_net_p1_true_bias_bool = short_tp_1_net_p1_touch_idx < short_tp_0_net_p1_touch_idx  # true_bias 의 조건\n","    short_net_p1_false_bias_bool = short_tp_1_net_p1_touch_idx >= short_tp_0_net_p1_touch_idx  # false_bias 의 조건, ~true_bias_bool 와 같지 않음, why ..? = en_idx\n","    long_net_p1_true_bias_bool = long_tp_1_net_p1_touch_idx < long_tp_0_net_p1_touch_idx\n","    long_net_p1_false_bias_bool = long_tp_1_net_p1_touch_idx >= long_tp_0_net_p1_touch_idx\n","\n","    short_unq_p1_true_bias_bool = short_tp_1_unq_p1_touch_idx < short_tp_0_unq_p1_touch_idx  # true_bias 의 조건\n","    short_unq_p1_false_bias_bool = short_tp_1_unq_p1_touch_idx >= short_tp_0_unq_p1_touch_idx  # false_bias 의 조건, ~true_bias_bool 와 같지 않음, why ..? = en_idx\n","    long_unq_p1_true_bias_bool = long_tp_1_unq_p1_touch_idx < long_tp_0_unq_p1_touch_idx\n","    long_unq_p1_false_bias_bool = long_tp_1_unq_p1_touch_idx >= long_tp_0_unq_p1_touch_idx\n","\n","    short_p2_true_bias_bool = short_tp_1_p2_touch_idx < short_tp_0_p2_touch_idx\n","    # short_p2_false_bias_bool = short_tp_1_p2_touch_idx >= short_tp_0_p2_touch_idx\n","    long_p2_true_bias_bool = long_tp_1_p2_touch_idx < long_tp_0_p2_touch_idx\n","    # long_p2_false_bias_bool = long_tp_1_p2_touch_idx >= long_tp_0_p2_touch_idx\n","\n","    # print(\"np.sum(long_p2_false_bias_bool != ~long_p2_true_bias_bool) :\", np.sum(long_p2_false_bias_bool != ~long_p2_true_bias_bool))\n","\n","    short_p2_out_true_bias_bool = short_out_1_p2_touch_idx < short_out_0_p2_touch_idx\n","    short_p2_out_false_bias_bool = short_out_1_p2_touch_idx >= short_out_0_p2_touch_idx\n","    long_p2_out_true_bias_bool = long_out_1_p2_touch_idx < long_out_0_p2_touch_idx\n","    long_p2_out_false_bias_bool = long_out_1_p2_touch_idx >= long_out_0_p2_touch_idx\n","\n","    short_tpbox_hhm = hhm(short_net_p1_true_bias_bool, short_net_p1_false_bias_bool)\n","    long_tpbox_hhm = hhm(long_net_p1_true_bias_bool, long_net_p1_false_bias_bool)\n","\n","    short_tpbox_p2exec_hhm = hhm(short_unq_p1_true_bias_bool, short_unq_p1_false_bias_bool)\n","    long_tpbox_p2exec_hhm = hhm(long_unq_p1_true_bias_bool, long_unq_p1_false_bias_bool)\n","\n","    # short_p2_hhm = hhm(short_p2_true_bias_bool, short_p2_false_bias_bool)\n","    # long_p2_hhm = hhm(long_p2_true_bias_bool, long_p2_false_bias_bool)\n","\n","    short_outbox_hhm = hhm(short_p2_out_true_bias_bool, short_p2_out_false_bias_bool)\n","    long_outbox_hhm = hhm(long_p2_out_true_bias_bool, long_p2_out_false_bias_bool)\n","\n","    # print(\"short_tpbox_hhm, short_p2_hhm, short_outbox_hhm :\", short_tpbox_hhm, short_p2_hhm, short_outbox_hhm)\n","\n","    return short_tpbox_hhm, long_tpbox_hhm, short_tpbox_p2exec_hhm, long_tpbox_p2exec_hhm, short_outbox_hhm, long_outbox_hhm, short_p2_true_bias_bool, long_p2_true_bias_bool, \\\n","           short_tp_1[short_en_idx], short_tp_0[short_en_idx], long_tp_1[long_en_idx], long_tp_0[long_en_idx], \\\n","           short_out_1[short_en_idx], short_out_0[short_en_idx], long_out_1[long_en_idx], long_out_0[long_en_idx], short_ep2_0[short_en_idx], \\\n","           long_ep2_0[long_en_idx]  # plot_check 을 위해 en_idx 넣음"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FuIwazc3P5d1"},"outputs":[],"source":["def get_wave_bias_v4(res_df, config, high, low, len_df, short_net_p1_idx_arr, long_net_p1_idx_arr, short_p2_idx_arr, long_p2_idx_arr, short_obj,\n","                     long_obj):\n","    short_net_p1_idx = short_net_p1_idx_arr.astype(int) #.reshape(-1, 1)\n","    short_p1_idx = short_obj[-1].astype(int).ravel()\n","    short_p2_idx = short_p2_idx_arr.astype(int).ravel() #.reshape(-1, 1)\n","    short_en_idx = short_obj[2].astype(int)\n","\n","    short_tp_1 = ffill_line(res_df['short_tp_1_{}'.format(config.selection_id)].to_numpy(),\n","                            short_net_p1_idx)  # net_p1_idx ~ net_p1_idx' 사이에 대한 momentum 조사 (net 이유는 logic's validation)\n","    short_tp_0 = ffill_line(res_df['short_tp_0_{}'.format(config.selection_id)].to_numpy(), short_net_p1_idx)\n","    short_out_1 = ffill_line(res_df['short_out_1_{}'.format(config.selection_id)].to_numpy(),\n","                             short_p2_idx)  # 체결된, p2_idx ~ p2_idx' 사이에 대한 momentum 조사\n","    short_out_0 = ffill_line(res_df['short_out_0_{}'.format(config.selection_id)].to_numpy(), short_p2_idx)\n","    short_ep2_0 = ffill_line(res_df['short_ep2_0_{}'.format(config.selection_id)].to_numpy(), short_p2_idx)\n","    # short_net_wave_1 = ffill_line(res_df['short_wave_1_{}'.format(config.selection_id)].to_numpy(), short_op_idx)  # en_idx 에 sync 된 open_idx 를 사용해야함\n","    # short_net_wave_0 = ffill_line(res_df['short_wave_0_{}'.format(config.selection_id)].to_numpy(), short_op_idx)\n","\n","    long_net_p1_idx = long_net_p1_idx_arr.astype(int) #.reshape(-1, 1)\n","    long_p1_idx = long_obj[-1].astype(int).ravel()\n","    long_p2_idx = long_p2_idx_arr.astype(int).ravel() #.reshape(-1, 1)\n","    long_en_idx = long_obj[2].astype(int)\n","\n","    long_tp_1 = ffill_line(res_df['long_tp_1_{}'.format(config.selection_id)].to_numpy(), long_net_p1_idx)\n","    long_tp_0 = ffill_line(res_df['long_tp_0_{}'.format(config.selection_id)].to_numpy(), long_net_p1_idx)\n","    long_out_1 = ffill_line(res_df['long_out_1_{}'.format(config.selection_id)].to_numpy(), long_p2_idx)  # 체결된, p2_idx ~ p2_idx' 사이에 대한 momentum 조사\n","    long_out_0 = ffill_line(res_df['long_out_0_{}'.format(config.selection_id)].to_numpy(), long_p2_idx)\n","    long_ep2_0 = ffill_line(res_df['long_ep2_0_{}'.format(config.selection_id)].to_numpy(), long_p2_idx)\n","\n","    short_unq_p1_idx = np.unique(short_p1_idx)  #.reshape(-1, 1)  # 통일성을 위해 2d 로 설정\n","    long_unq_p1_idx = np.unique(long_p1_idx)  #.reshape(-1, 1)\n","\n","    bias_info_tick = config.tr_set.bias_info_tick\n","\n","    # print(\"long_net_p1_idx.shape :\", long_net_p1_idx.shape)\n","    # print(\"long_en_idx.shape :\", long_en_idx.shape)\n","\n","    # ------------------ touch idx ------------------ #\n","    # 1. min 에 초점을 맞추는 거니까, touch 없을시 len_df 로 설정\n","    # 2. future_data 사용이니까, shift(-bias_info_tick) 설정\n","    # 3. entry 다음 idx 부터 -> tp & out 체결 logic 이 현재 entry_idx 부터 되어있어서 취소\n","    # Todo, high 와 low 중 어디에 먼저닿느냐가 중요함을 key 로 잡고만든 logic 임\n","    len_df_range = np.arange(len_df)\n","    last_idx = len_df - 1\n","    shift_range = bias_info_tick - 1  # entry_idx 까지 포함해서 wave_bias check\n","\n","    short_tp_1_touch_idx = pd.Series(np.where(low <= short_tp_1, len_df_range, last_idx)).rolling(bias_info_tick, min_periods=1).min().shift(\n","        -shift_range).to_numpy()\n","    short_tp_0_touch_idx = pd.Series(np.where(high >= short_tp_0, len_df_range, last_idx)).rolling(bias_info_tick, min_periods=1).min().shift(\n","        -shift_range).to_numpy()\n","    long_tp_1_touch_idx = pd.Series(np.where(high >= long_tp_1, len_df_range, last_idx)).rolling(bias_info_tick, min_periods=1).min().shift(\n","        -shift_range).to_numpy()\n","    long_tp_0_touch_idx = pd.Series(np.where(low <= long_tp_0, len_df_range, last_idx)).rolling(bias_info_tick, min_periods=1).min().shift(\n","        -shift_range).to_numpy()\n","\n","    short_out_1_touch_idx = pd.Series(np.where(low <= short_out_1, len_df_range, last_idx)).rolling(bias_info_tick, min_periods=1).min().shift(\n","        -shift_range).to_numpy()\n","    short_out_0_touch_idx = pd.Series(np.where(high >= short_out_0, len_df_range, last_idx)).rolling(bias_info_tick, min_periods=1).min().shift(\n","        -shift_range).to_numpy()\n","    long_out_1_touch_idx = pd.Series(np.where(high >= long_out_1, len_df_range, last_idx)).rolling(bias_info_tick, min_periods=1).min().shift(\n","        -shift_range).to_numpy()\n","    long_out_0_touch_idx = pd.Series(np.where(low <= long_out_0, len_df_range, last_idx)).rolling(bias_info_tick, min_periods=1).min().shift(\n","        -shift_range).to_numpy()\n","\n","    short_tp_1_net_p1_touch_idx = short_tp_1_touch_idx[short_net_p1_idx]  # for tp_box's net_hhm\n","    short_tp_0_net_p1_touch_idx = short_tp_0_touch_idx[short_net_p1_idx]\n","    long_tp_1_net_p1_touch_idx = long_tp_1_touch_idx[long_net_p1_idx]\n","    long_tp_0_net_p1_touch_idx = long_tp_0_touch_idx[long_net_p1_idx]\n","\n","    short_tp_1_unq_p1_touch_idx = short_tp_1_touch_idx[short_unq_p1_idx]  # p2 까지 체결된 p1's hhm\n","    short_tp_0_unq_p1_touch_idx = short_tp_0_touch_idx[short_unq_p1_idx]\n","    long_tp_1_unq_p1_touch_idx = long_tp_1_touch_idx[long_unq_p1_idx]\n","    long_tp_0_unq_p1_touch_idx = long_tp_0_touch_idx[long_unq_p1_idx]\n","\n","    # print(np.sum(np.isnan(short_tp_1_unq_p1_touch_idx)))\n","    # print(np.sum(np.isnan(short_tp_0_unq_p1_touch_idx)))\n","    # print(np.sum(np.isnan(long_tp_1_unq_p1_touch_idx)))\n","    # print(np.sum(np.isnan(long_tp_0_unq_p1_touch_idx)))\n","\n","    short_tp_1_p2_touch_idx = short_tp_1_touch_idx[short_p2_idx]  # hlm 을 위한 hhm (on p2)\n","    short_tp_0_p2_touch_idx = short_tp_0_touch_idx[short_p2_idx]\n","    long_tp_1_p2_touch_idx = long_tp_1_touch_idx[long_p2_idx]\n","    long_tp_0_p2_touch_idx = long_tp_0_touch_idx[long_p2_idx]\n","\n","    short_out_1_p2_touch_idx = short_out_1_touch_idx[short_p2_idx]  # for out_box's executed_hhm\n","    short_out_0_p2_touch_idx = short_out_0_touch_idx[short_p2_idx]\n","    long_out_1_p2_touch_idx = long_out_1_touch_idx[long_p2_idx]\n","    long_out_0_p2_touch_idx = long_out_0_touch_idx[long_p2_idx]\n","\n","    # ------------------ bias_bool & hhm ------------------ #\n","    short_net_p1_true_bias_bool = short_tp_1_net_p1_touch_idx < short_tp_0_net_p1_touch_idx  # true_bias 의 조건\n","    short_net_p1_false_bias_bool = short_tp_1_net_p1_touch_idx >= short_tp_0_net_p1_touch_idx  # false_bias 의 조건, ~true_bias_bool 와 같지 않음, why ..? = nan value\n","    long_net_p1_true_bias_bool = long_tp_1_net_p1_touch_idx < long_tp_0_net_p1_touch_idx\n","    long_net_p1_false_bias_bool = long_tp_1_net_p1_touch_idx >= long_tp_0_net_p1_touch_idx\n","\n","    short_unq_p1_true_bias_bool = short_tp_1_unq_p1_touch_idx < short_tp_0_unq_p1_touch_idx  # true_bias 의 조건\n","    short_unq_p1_false_bias_bool = short_tp_1_unq_p1_touch_idx >= short_tp_0_unq_p1_touch_idx  # false_bias 의 조건, ~true_bias_bool 와 같지 않음, why ..? = nan value\n","    long_unq_p1_true_bias_bool = long_tp_1_unq_p1_touch_idx < long_tp_0_unq_p1_touch_idx\n","    long_unq_p1_false_bias_bool = long_tp_1_unq_p1_touch_idx >= long_tp_0_unq_p1_touch_idx\n","\n","    short_p2_true_bias_bool = short_tp_1_p2_touch_idx < short_tp_0_p2_touch_idx\n","    # short_p2_false_bias_bool = short_tp_1_p2_touch_idx >= short_tp_0_p2_touch_idx\n","    long_p2_true_bias_bool = long_tp_1_p2_touch_idx < long_tp_0_p2_touch_idx\n","    # long_p2_false_bias_bool = long_tp_1_p2_touch_idx >= long_tp_0_p2_touch_idx\n","\n","    short_p2_out_true_bias_bool = short_out_1_p2_touch_idx < short_out_0_p2_touch_idx\n","    short_p2_out_false_bias_bool = short_out_1_p2_touch_idx >= short_out_0_p2_touch_idx\n","    long_p2_out_true_bias_bool = long_out_1_p2_touch_idx < long_out_0_p2_touch_idx\n","    long_p2_out_false_bias_bool = long_out_1_p2_touch_idx >= long_out_0_p2_touch_idx\n","\n","    short_net_p1_hhm = hhm(short_net_p1_true_bias_bool, short_net_p1_false_bias_bool)\n","    long_net_p1_hhm = hhm(long_net_p1_true_bias_bool, long_net_p1_false_bias_bool)\n","\n","    short_p1_hhm = hhm(short_unq_p1_true_bias_bool, short_unq_p1_false_bias_bool)\n","    long_p1_hhm = hhm(long_unq_p1_true_bias_bool, long_unq_p1_false_bias_bool)\n","    \n","    # print(\"np.sum(short_net_p1_true_bias_bool) :\", np.sum(short_net_p1_true_bias_bool))\n","    # print(\"np.sum(long_net_p1_true_bias_bool) :\", np.sum(long_net_p1_true_bias_bool))\n","\n","    # print(\"np.sum(short_unq_p1_true_bias_bool) :\", np.sum(short_unq_p1_true_bias_bool))\n","    # print(\"np.sum(short_unq_p1_false_bias_bool) :\", np.sum(short_unq_p1_false_bias_bool))\n","    # print(\"np.sum(long_unq_p1_true_bias_bool) :\", np.sum(long_unq_p1_true_bias_bool))\n","    # print(\"np.sum(long_unq_p1_false_bias_bool) :\", np.sum(long_unq_p1_false_bias_bool))\n","\n","    # short_p2_hhm = hhm(short_p2_true_bias_bool, short_p2_false_bias_bool)\n","    # long_p2_hhm = hhm(long_p2_true_bias_bool, long_p2_false_bias_bool)\n","\n","    short_out_hhm = hhm(short_p2_out_true_bias_bool, short_p2_out_false_bias_bool)\n","    long_out_hhm = hhm(long_p2_out_true_bias_bool, long_p2_out_false_bias_bool)\n","\n","    # print(\"short_net_p1_hhm, short_p2_hhm, short_out_hhm :\", short_net_p1_hhm, short_p2_hhm, short_out_hhm)\n","\n","    return short_net_p1_hhm, long_net_p1_hhm, short_p1_hhm, long_p1_hhm, short_out_hhm, long_out_hhm, short_p2_true_bias_bool, long_p2_true_bias_bool, \\\n","           short_tp_1[short_en_idx], short_tp_0[short_en_idx], long_tp_1[long_en_idx], long_tp_0[long_en_idx], \\\n","           short_out_1[short_en_idx], short_out_0[short_en_idx], long_out_1[long_en_idx], long_out_0[long_en_idx], short_ep2_0[short_en_idx], \\\n","           long_ep2_0[long_en_idx]  # plot_check 을 위해 en_idx 넣음"]},{"cell_type":"markdown","metadata":{"id":"_blyFhQJUd5X"},"source":["#### dump"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6YcqQQzsl6Ys"},"outputs":[],"source":["\n","def hlm(pr_list, true_bool):   # true_pr in true_bias / true_bias\n","  true_bias_pr = pr_list[true_bool].ravel()\n","  print(\"len(pr_list) :\", len(pr_list))\n","  print(\"len(true_bias_pr) :\", len(true_bias_pr))\n","  print(\"np.sum(pr_list > 1) :\", np.sum(pr_list > 1))\n","  print(\"np.sum(true_bias_pr > 1) :\", np.sum(true_bias_pr > 1))\n","  return np.sum(true_bias_pr > 1) / len(true_bias_pr)  # 차원을 고려한 계산"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"t7a5Hyyyd5Lk"},"outputs":[],"source":["\n","def get_wave_bias_v5_1(res_df, config, high, low, len_df, short_net_p1_idx_arr, long_net_p1_idx_arr, short_p2_idx_arr, long_p2_idx_arr, short_obj, long_obj):\n","\n","    short_net_p1_idx = short_net_p1_idx_arr.astype(int) #.reshape(-1, 1)\n","    short_p1_idx = short_obj[-1].astype(int).ravel()\n","    short_p2_idx = short_p2_idx_arr.astype(int).ravel() #.reshape(-1, 1)\n","    short_en_idx = short_obj[2].astype(int)\n","\n","    short_prime_net_p1_bool = short_net_p1_idx - pd.Series(short_net_p1_idx).shift(1).to_numpy() > 1\n","    short_prime_net_p1_bool[0] = True\n","    short_prime_net_p1_idx = short_net_p1_idx[short_prime_net_p1_bool]\n","    \n","    short_prime_p2_bool = short_p2_idx - pd.Series(short_p2_idx).shift(1).to_numpy() > 1\n","    short_prime_p2_bool[0] = True\n","    short_prime_p2_idx = short_p2_idx[short_prime_p2_bool]\n","    \n","    short_tp_1 = ffill_line(res_df['short_tp_1_{}'.format(config.selection_id)].to_numpy(), short_prime_net_p1_idx)  # net_p1_idx ~ net_p1_idx' 사이에 대한 momentum 조사 (net 이유는 logic's validation)\n","    short_tp_0 = ffill_line(res_df['short_tp_0_{}'.format(config.selection_id)].to_numpy(), short_prime_net_p1_idx)\n","    short_out_1 = ffill_line(res_df['short_out_1_{}'.format(config.selection_id)].to_numpy(), short_prime_p2_idx)  # 체결된, p2_idx ~ p2_idx' 사이에 대한 momentum 조사\n","    short_out_0 = ffill_line(res_df['short_out_0_{}'.format(config.selection_id)].to_numpy(), short_prime_p2_idx)\n","    short_ep2_0 = ffill_line(res_df['short_ep2_0_{}'.format(config.selection_id)].to_numpy(), short_prime_p2_idx)\n","    # short_net_wave_1 = ffill_line(res_df['short_wave_1_{}'.format(config.selection_id)].to_numpy(), short_op_idx)  # en_idx 에 sync 된 open_idx 를 사용해야함\n","    # short_net_wave_0 = ffill_line(res_df['short_wave_0_{}'.format(config.selection_id)].to_numpy(), short_op_idx)\n","\n","    long_net_p1_idx = long_net_p1_idx_arr.astype(int) #.reshape(-1, 1)\n","    long_p1_idx = long_obj[-1].astype(int).ravel()\n","    long_p2_idx = long_p2_idx_arr.astype(int).ravel() #.reshape(-1, 1)\n","    long_en_idx = long_obj[2].astype(int)\n","\n","    long_prime_net_p1_bool = long_net_p1_idx - pd.Series(long_net_p1_idx).shift(1).to_numpy() > 1\n","    long_prime_net_p1_bool[0] = True\n","    long_prime_net_p1_idx = long_net_p1_idx[long_prime_net_p1_bool]\n","    \n","    long_prime_p2_bool = long_p2_idx - pd.Series(long_p2_idx).shift(1).to_numpy() > 1\n","    long_prime_p2_bool[0] = True\n","    long_prime_p2_idx = long_p2_idx[long_prime_p2_bool]\n","    \n","    long_tp_1 = ffill_line(res_df['long_tp_1_{}'.format(config.selection_id)].to_numpy(), long_prime_net_p1_idx)\n","    long_tp_0 = ffill_line(res_df['long_tp_0_{}'.format(config.selection_id)].to_numpy(), long_prime_net_p1_idx)\n","    long_out_1 = ffill_line(res_df['long_out_1_{}'.format(config.selection_id)].to_numpy(), long_prime_p2_idx)  # 체결된, p2_idx ~ p2_idx' 사이에 대한 momentum 조사\n","    long_out_0 = ffill_line(res_df['long_out_0_{}'.format(config.selection_id)].to_numpy(), long_prime_p2_idx)\n","    long_ep2_0 = ffill_line(res_df['long_ep2_0_{}'.format(config.selection_id)].to_numpy(), long_prime_p2_idx)\n","\n","    short_unq_p1_idx = np.unique(short_p1_idx)  #.reshape(-1, 1)   # 통일성을 위해 2d 로 설정\n","    long_unq_p1_idx = np.unique(long_p1_idx)  #.reshape(-1, 1)\n","\n","    bias_info_tick = config.tr_set.bias_info_tick\n","\n","    # print(\"long_net_p1_idx.shape :\", long_net_p1_idx.shape)\n","    # print(\"long_en_idx.shape :\", long_en_idx.shape)\n","\n","    # ================== touch idx ================== #\n","    # 1. min 에 초점을 맞추는 거니까, touch 없을시 len_df 로 설정\n","    # 2. future_data 사용이니까, shift(-bias_info_tick) 설정\n","    # 3. entry 다음 idx 부터 -> tp & out 체결 logic 이 현재 entry_idx 부터 되어있어서 취소\n","    # Todo, high 와 low 중 어디에 먼저닿느냐가 중요함을 key 로 잡고만든 logic 임\n","    len_df_range = np.arange(len_df)\n","    last_idx = len_df - 1  # nan 발생하면 대소 비교로 hhm 확인이 불가능해짐\n","    shift_range = bias_info_tick - 1  # entry_idx 까지 포함해서 wave_bias check\n","\n","    # ------------ pair & idxs ------------ #\n","    short_net_p1_pair = list(zip(short_net_p1_idx, np.append(short_net_p1_idx[1:], last_idx)))\n","    long_net_p1_pair = list(zip(long_net_p1_idx, np.append(long_net_p1_idx[1:], last_idx)))\n","\n","    short_p2_pair = list(zip(short_p2_idx, np.append(short_p2_idx[1:], last_idx)))\n","    long_p2_pair = list(zip(long_p2_idx, np.append(long_p2_idx[1:], last_idx)))\n","\n","    short_tp_1_touch_idxs = np.where(low <= short_tp_1, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    short_tp_0_touch_idxs = np.where(high >= short_tp_0, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    long_tp_1_touch_idxs = np.where(high >= long_tp_1, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    long_tp_0_touch_idxs = np.where(low <= long_tp_0, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","\n","    short_out_1_touch_idxs = np.where(low <= short_out_1, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    short_out_0_touch_idxs = np.where(high >= short_out_0, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    long_out_1_touch_idxs = np.where(high >= long_out_1, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    long_out_0_touch_idxs = np.where(low <= long_out_0, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","\n","    # ------------ min touch_idx ------------ #\n","    short_tp_1_touch_idx = get_touch_idx_fill(short_tp_1_touch_idxs, short_net_p1_pair, short_net_p1_idx, len_df)  # pair means 구간\n","    short_tp_0_touch_idx = get_touch_idx_fill(short_tp_0_touch_idxs, short_net_p1_pair, short_net_p1_idx, len_df)\n","    long_tp_1_touch_idx = get_touch_idx_fill(long_tp_1_touch_idxs, long_net_p1_pair, long_net_p1_idx, len_df)\n","    long_tp_0_touch_idx = get_touch_idx_fill(long_tp_0_touch_idxs, long_net_p1_pair, long_net_p1_idx, len_df)\n","\n","    short_out_1_touch_idx = get_touch_idx_fill(short_out_1_touch_idxs, short_p2_pair, short_p2_idx, len_df)  # pair means 구간\n","    short_out_0_touch_idx = get_touch_idx_fill(short_out_0_touch_idxs, short_p2_pair, short_p2_idx, len_df)\n","    long_out_1_touch_idx = get_touch_idx_fill(long_out_1_touch_idxs, long_p2_pair, long_p2_idx, len_df)\n","    long_out_0_touch_idx = get_touch_idx_fill(long_out_0_touch_idxs, long_p2_pair, long_p2_idx, len_df)\n","\n","    # ------------ point's touch_idx ------------ #\n","    short_tp_1_net_p1_touch_idx = short_tp_1_touch_idx[short_net_p1_idx]   # for tp_box's net_hhm\n","    short_tp_0_net_p1_touch_idx = short_tp_0_touch_idx[short_net_p1_idx]\n","    long_tp_1_net_p1_touch_idx = long_tp_1_touch_idx[long_net_p1_idx]\n","    long_tp_0_net_p1_touch_idx = long_tp_0_touch_idx[long_net_p1_idx]\n","    # print(\"long_tp_1_net_p1_touch_idx :\", long_tp_1_net_p1_touch_idx)\n","\n","    short_tp_1_unq_p1_touch_idx = short_tp_1_touch_idx[short_unq_p1_idx]    # p2 까지 체결된 p1's hhm\n","    short_tp_0_unq_p1_touch_idx = short_tp_0_touch_idx[short_unq_p1_idx]\n","    long_tp_1_unq_p1_touch_idx = long_tp_1_touch_idx[long_unq_p1_idx]\n","    long_tp_0_unq_p1_touch_idx = long_tp_0_touch_idx[long_unq_p1_idx]\n","\n","    short_tp_1_p2_touch_idx = short_tp_1_touch_idx[short_p2_idx]    # hlm 을 위한 hhm (on p2)\n","    short_tp_0_p2_touch_idx = short_tp_0_touch_idx[short_p2_idx]\n","    long_tp_1_p2_touch_idx = long_tp_1_touch_idx[long_p2_idx]\n","    long_tp_0_p2_touch_idx = long_tp_0_touch_idx[long_p2_idx]\n","\n","    short_out_1_p2_touch_idx = short_out_1_touch_idx[short_p2_idx]   # for out_box's executed_hhm\n","    short_out_0_p2_touch_idx = short_out_0_touch_idx[short_p2_idx]\n","    long_out_1_p2_touch_idx = long_out_1_touch_idx[long_p2_idx]\n","    long_out_0_p2_touch_idx = long_out_0_touch_idx[long_p2_idx]\n","\n","    # ------------------ bias_bool & hhm ------------------ #\n","    short_net_p1_true_bias_bool = short_tp_1_net_p1_touch_idx < short_tp_0_net_p1_touch_idx  # true_bias 의 조건\n","    short_net_p1_false_bias_bool = short_tp_1_net_p1_touch_idx >= short_tp_0_net_p1_touch_idx  # false_bias 의 조건, ~true_bias_bool 와 같지 않음, why ..? = en_idx\n","    long_net_p1_true_bias_bool = long_tp_1_net_p1_touch_idx < long_tp_0_net_p1_touch_idx\n","    long_net_p1_false_bias_bool = long_tp_1_net_p1_touch_idx >= long_tp_0_net_p1_touch_idx\n","\n","    short_unq_p1_true_bias_bool = short_tp_1_unq_p1_touch_idx < short_tp_0_unq_p1_touch_idx  # true_bias 의 조건\n","    short_unq_p1_false_bias_bool = short_tp_1_unq_p1_touch_idx >= short_tp_0_unq_p1_touch_idx  # false_bias 의 조건, ~true_bias_bool 와 같지 않음, why ..? = en_idx    \n","    long_unq_p1_true_bias_bool = long_tp_1_unq_p1_touch_idx < long_tp_0_unq_p1_touch_idx\n","    long_unq_p1_false_bias_bool = long_tp_1_unq_p1_touch_idx >= long_tp_0_unq_p1_touch_idx\n","\n","    short_p2_true_bias_bool = short_tp_1_p2_touch_idx < short_tp_0_p2_touch_idx\n","    short_p2_false_bias_bool = short_tp_1_p2_touch_idx >= short_tp_0_p2_touch_idx\n","    long_p2_true_bias_bool = long_tp_1_p2_touch_idx < long_tp_0_p2_touch_idx\n","    long_p2_false_bias_bool = long_tp_1_p2_touch_idx >= long_tp_0_p2_touch_idx\n","\n","    short_p2_out_true_bias_bool = short_out_1_p2_touch_idx < short_out_0_p2_touch_idx\n","    short_p2_out_false_bias_bool = short_out_1_p2_touch_idx >= short_out_0_p2_touch_idx\n","    long_p2_out_true_bias_bool = long_out_1_p2_touch_idx < long_out_0_p2_touch_idx\n","    long_p2_out_false_bias_bool = long_out_1_p2_touch_idx >= long_out_0_p2_touch_idx\n","\n","    short_net_p1_hhm = hhm(short_net_p1_true_bias_bool, short_net_p1_false_bias_bool)\n","    long_net_p1_hhm = hhm(long_net_p1_true_bias_bool, long_net_p1_false_bias_bool)\n","\n","    short_p1_hhm = hhm(short_unq_p1_true_bias_bool, short_unq_p1_false_bias_bool)\n","    long_p1_hhm = hhm(long_unq_p1_true_bias_bool, long_unq_p1_false_bias_bool)\n","\n","    # short_p2_hhm = hhm(short_p2_true_bias_bool, short_p2_false_bias_bool)\n","    # long_p2_hhm = hhm(long_p2_true_bias_bool, long_p2_false_bias_bool)\n","\n","    short_out_hhm = hhm(short_p2_out_true_bias_bool, short_p2_out_false_bias_bool)\n","    long_out_hhm = hhm(long_p2_out_true_bias_bool, long_p2_out_false_bias_bool)\n","\n","    # print(\"short_net_p1_hhm, short_p2_hhm, short_out_hhm :\", short_net_p1_hhm, short_p2_hhm, short_out_hhm)\n","\n","    return short_net_p1_hhm, long_net_p1_hhm, short_p1_hhm, long_p1_hhm, short_out_hhm, long_out_hhm, short_p2_true_bias_bool, long_p2_true_bias_bool, \\\n","          short_tp_1[short_en_idx], short_tp_0[short_en_idx], long_tp_1[long_en_idx], long_tp_0[long_en_idx], \\\n","          short_out_1[short_en_idx], short_out_0[short_en_idx], long_out_1[long_en_idx], long_out_0[long_en_idx], short_ep2_0[short_en_idx], long_ep2_0[long_en_idx]   # plot_check 을 위해 en_idx 넣음\n","          "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dsI-R8Zz7ls1"},"outputs":[],"source":["\n","        # tr_arr = res_df['{}_tr_{}'.format(side_pos, selection_id)].to_numpy()\n","\n","        # ------ point1 & 2's tp_j ------ #\n","        # point_idxgap = point_idxgap_arr[op_idx]\n","        # if np.isnan(point_idxgap):\n","        #     continue\n","        # else:\n","        #     # ------ allow point2 only next to point1 ------ #\n","        #     open_arr = res_df['{}_open_{}'.format(side_pos, selection_id)].to_numpy()\n","        #     tp_j = int(op_idx - point_idxgap)\n","        #     if np.sum(open_arr[tp_j:op_idx]) != 0:\n","        #         continue"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":157},"executionInfo":{"elapsed":350,"status":"ok","timestamp":1652751452213,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"gMur2u8WeQ2K","outputId":"7b506c38-7a8f-4bd1-a021-8a065d009882"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 1152x144 with 2 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# ------ bias frquency ------ #\n","len_df = len(res_df)\n","\n","plt.figure(figsize=(16, 2))\n","\n","ax1 = plt.subplot(121)\n","plt.fill_between(short_obj[-2].ravel(), 0, 1, where=short_bias_arr.ravel() > 0,\n","                facecolor='#00ff00', alpha=1, transform=ax1.get_xaxis_transform())   # 00ff00\n","# plt.fill_between(short_obj[-2].ravel(), 0, 1, where=short_bias_arr.ravel() < 1,\n","#                 facecolor='#ff00ff', alpha=1, transform=ax1.get_xaxis_transform())\n","\n","ax2 = plt.subplot(122)\n","plt.fill_between(long_obj[-2].ravel(), 0, 1, where=long_bias_arr.ravel() > 0,\n","                facecolor='#00ff00', alpha=1, transform=ax2.get_xaxis_transform())\n","plt.fill_between(long_obj[-2].ravel(), 0, 1, where=long_bias_arr.ravel() < 1,\n","                facecolor='#ff00ff', alpha=1, transform=ax2.get_xaxis_transform())\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":157},"executionInfo":{"elapsed":872,"status":"ok","timestamp":1652756329304,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"eoXMxRm3qdz2","outputId":"98c90b55-4c14-402c-e2d4-d7b88f9e2e62"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 1152x144 with 2 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# ------ bias frquency ------ #\n","len_df = len(res_df)\n","\n","plt.figure(figsize=(16, 2))\n","\n","ax1 = plt.subplot(121)\n","plt.fill_between(short_obj[-2].ravel(), 0, 1, where=short_bias_arr.ravel() > 0,\n","                facecolor='#00ff00', alpha=1, transform=ax1.get_xaxis_transform())   # 00ff00\n","# plt.fill_between(short_obj[-2].ravel(), 0, 1, where=short_bias_arr.ravel() < 1,\n","#                 facecolor='#ff00ff', alpha=1, transform=ax1.get_xaxis_transform())\n","\n","ax2 = plt.subplot(122)\n","plt.vlines(long_obj[-2][long_bias_arr], ymin=0, ymax=1, color='#00ff00')\n","plt.vlines(long_obj[-2][~long_bias_arr], ymin=0, ymax=1, color='#ff00ff')\n","# [plt.axvline(x_, color='#ff00ff') for x_, bias_ in zip(long_obj[-2], long_bias_arr) if not bias_]\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dm7ZqzS9vqhm"},"outputs":[],"source":["%timeit -n1 -r10 plt.vlines(long_obj[-2][long_bias_arr], ymin=0, ymax=1, color='#00ff00')  # 528 ms per loop --> 8.71 ms per loop\n","%timeit -n1 -r10 [plt.axvline(x_, color='#00ff00') for x_, bias_ in zip(long_obj[-2], long_bias_arr) if bias_]\n","\n","# np.sum(long_bias_arr == ~long_bias_arr)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qOE2YSzntx8v"},"outputs":[],"source":["# %timeit -n1 -r10 [plt.axvline(x_) for x_, bias_ in zip(long_obj[-2].ravel(), long_bias_arr.ravel()) if bias_]\n","%timeit -n1 -r10 plt.fill_between(long_obj[-2].ravel(), 0, 1, where=long_bias_arr.ravel() > 0, facecolor='#00ff00', alpha=1, transform=ax2.get_xaxis_transform())"]},{"cell_type":"markdown","metadata":{"id":"dHFkv6Ar1ojU"},"source":["## plot_check_v2"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FCpPCl931ojV"},"outputs":[],"source":["# res_df = wave_range_v4(res_df, 20, ltf_df=None, touch_lbperiod=50)\n","# res_df = h_candle_v4(res_df, 20, ltf_df=None, touch_lbperiod=50)\n","del np_plot_params"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rMIwv1Nr1ojX"},"outputs":[],"source":["# ------------------ plot_config ------------------ #\n","save_mode = 0\n","\n","front_plot = 0    # 0 : p1_tick, 1 : p2_tick\n","back_plot = 4     # 0 : post_plot_size, 1 : open, 2 : p2_tick, 3 : ep_tick, 4 : tp_tick, 5 : bias_tick (사용 금지)  \n","x_max = 500       # back_plot : 0 사용시, custom x_max 반영됨\n","\n","bias_plot = 0     # 1 : true_bias only, -1 : false_bias only, 0 : both\n","\n","pr_descend = 1   # 1 : 큰 pr 부터, -1 : 작은 pr 부터, 0 : 순서대로\n","\n","position = 1      # -1 : short, 0 & 1 : long\n","\n","x_margin_mult = 1/30\n","y_margin_mult = 1/30  # 0 \n","\n","prev_plotsize = 100 #  150 100 20 500 1000\n","post_plotsize = 160 # config.tr_set.bias_info_tick -> excessive bit 는 감당 못함\n","\n","inversion = 0\n","hedge = 0\n","\n","# ------ show or save ------ #\n","if save_mode:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".ftr\", \"\")\n","  shutil.rmtree(plot_check_dir, ignore_errors=True)  # remove existing dir\n","  os.makedirs(plot_check_dir)\n","  print(plot_check_dir)\n","else:\n","  plot_check_dir = None\n","\n","# ------------ 한 방향에 대해 plot_check 함 (by position var.) ------------ #\n","#   obj by position  \n","if position == -1:\n","  pos_str = \"SELL\"\n","  pr_, obj_ = short_pr, short_obj\n","  arr_list = [short_p2_idx_arr, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_bias_arr, short_tp_1, short_tp_0, short_out_1, short_out_0, short_ep2_0]\n","else:   # both option currently not supported\n","  pos_str = \"BUY\"\n","  pr_, obj_ = long_pr, long_obj\n","  arr_list = [long_p2_idx_arr, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_bias_arr, long_tp_1, long_tp_0, long_out_1, long_out_0, long_ep2_0]\n","\n","if pr_descend:\n","    if pr_descend == -1:\n","      pr_descend = 0\n","    pr, obj, [p2_idx_arr, lvrg_arr, fee_arr, tpout_arr, bias_arr, tp_1, tp_0, out_1, out_0, ep2_0] = sort_bypr_v4(pr_, obj_, arr_list, descending=pr_descend)  # --> pr_descend 의 의미가 사라짐.. (false -> true plot 으로 이동한 것뿐)\n","else:\n","  pr, obj, [p2_idx_arr, lvrg_arr, fee_arr, tpout_arr, bias_arr, tp_1, tp_0, out_1, out_0, ep2_0] = pr_, obj_, arr_list\n","\n","pr_msg = \"%s\\n {} ~ {} -> {:.5f}\\n lvrg : {}\\n fee : {:.4f}\" % (pos_str)  # = data_window, pos_str 으로 이곳에서 정의함\n","\n","\n","if front_plot == 0:\n","  front_idx = obj[4]      # left_margin 기준 - open_idx\n","else:\n","  front_idx = p2_idx_arr  # left_margin 기준 - p2_idx\n","\n","left_end_idx = front_idx - prev_plotsize  \n","right_end_idx = obj[3] + post_plotsize\n","invalid_left_end = np.sum(left_end_idx < 0)\n","\n","np_plot_params = np.hstack((left_end_idx, right_end_idx, pr, *obj, p2_idx_arr, lvrg_arr, fee_arr, tpout_arr, tp_1, tp_0, out_1, out_0, ep2_0))[invalid_left_end:]  # all arr should have same dimension\n","\n","if bias_plot:\n","  if bias_plot == 1:\n","    bias_idx = bias_arr[invalid_left_end:].ravel()  # true_bias 만 plot\n","  else:\n","    bias_idx = ~bias_arr[invalid_left_end:].ravel()  # false_bias 만 plot\n","\n","  np_plot_params = np_plot_params[bias_idx]"]},{"cell_type":"markdown","metadata":{"id":"-4CXGqEN1ojY"},"source":["### session_plot"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4,"status":"ok","timestamp":1656643001100,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"2bjxKCIh1ojZ","outputId":"ef05fe51-5ee2-4ead-e761-f50835819a3e"},"outputs":[{"output_type":"stream","name":"stderr","text":["/content/drive/My Drive/Colab Notebooks/JnQ/funcs/funcs_plot_check.py:10: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  step_col_arr = np.array(col_list)\n"]}],"source":["selection_id = config.selection_id\n","\n","# ============ make col_idx_dict config ============ #\n","nonstep_col_list = []\n","step_col_list = []\n","step_col_list2 = []\n","stepmark_col_list = []\n","data_window_p1_col_list = []\n","data_window_p2_col_list = []\n","\n","# ============ nonstep_col_list - add info(col, alpha, color, linewidth) ============ #\n","# nonstep_col_list.append([['close'], 1, '#ffffff', 2])\n","\n","# ============ step_col_list - add info(col, alpha, color, linewidth) ============ #\n","# ------ htf_candle ------ #\n","# hc_tf1 = '5T'\n","# hc_tf2 = '15T'\n","\n","# step_col_list.append([['open_{}'.format(hc_tf1), 'close_{}'.format(hc_tf1)], 1, '#ffffff', 2])\n","# step_col_list.append([['open_{}'.format(hc_tf2), 'close_{}'.format(hc_tf2)], 1, '#ffffff', 4])\n","\n","# ------ resi_sup ------ #\n","# rs_tf = 'T'\n","# step_col_list.append([['resi_{}'.format(rs_tf), 'sup_{}'.format(rs_tf)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['resi_out_{}'.format(rs_tf), 'sup_out_{}'.format(rs_tf)], 1, 'dodgerblue', 2])\n","\n","# ------ wave_base ------ #\n","wave_itv1 = config.tr_set.wave_itv1\n","wave_itv2 = config.tr_set.wave_itv2\n","wave_period1 = config.tr_set.wave_period1\n","wave_period2 = config.tr_set.wave_period2\n","\n","# step_col_list.append([['dc_base_{}{}'.format(wave_itv1, wave_period1)], 1, '#5b9cf6', 1])\n","# step_col_list.append([['dc_base_{}{}'.format(wave_itv2, wave_period2)], 1, '#5b9cf6', 5])\n","\n","# step_col_list.append([['wave_low_fill_{}{}'.format(wave_tf, wave_period)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['wave_high_fill_{}{}'.format(wave_tf, wave_period)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['dc_upper_{}{}'.format(wave_tf, wave_period), 'dc_lower_{}{}'.format(wave_tf, wave_period)], 1, '#ffeb3b', 1])\n","\n","# ------ dc ------ #\n","dc_tf1 = 'T'\n","dc_period1 = 10\n","dc_tf2 = 'T'\n","dc_period2 = config.loc_set.point2.csd_period if config.loc_set.point2.csd_period != \"None\" else wave_period2 \n","\n","# step_col_list.append([['dc_upper_{}{}'.format(dc_tf1, dc_period1), 'dc_lower_{}{}'.format(dc_tf1, dc_period1)], 1, '#ff00ff', 1]),  # inner #ffeb3b\n","# step_col_list.append([['dc_base_{}{}'.format(dc_tf1, dc_period1)], 1, '#ffee58', 3]) # ffee58 5b9cf6\n","# step_col_list.append([['dc_upper_{}{}'.format(dc_tf2, dc_period2), 'dc_lower_{}{}'.format(dc_tf2, dc_period2)], 1, '#ffee58', 2]),  # inner #ffeb3b\n","# step_col_list.append([['dc_base_{}{}'.format(dc_tf2, dc_period2)], 1, '#ffee58', 3]) # ffee58 5b9cf6\n","\n","# ------ bb ------ #\n","bb_tf1 = 'T'\n","bb_period1 = 100\n","\n","# step_col_list.append([['bb_upper_{}{}'.format(bb_tf1, bb_period1), 'bb_lower_{}{}'.format(bb_tf1, bb_period1)], 1, '#ffffff', 1])\n","# step_col_list.append([['bb_upper2_{}{}'.format(bb_tf1, bb_period1), 'bb_lower2_{}{}'.format(bb_tf1, bb_period1)], 1, '#ffffff', 1])\n","# step_col_list.append([['bb_upper3_{}{}'.format(bb_tf1, bb_period1), 'bb_lower3_{}{}'.format(bb_tf1, bb_period1)], 1, '#ffffff', 1])\n","# step_col_list.append([['bb_base_{}{}'.format(bb_tf1, bb_period1)], 1, '#00ff00', 1])\n","\n","\n","# ------ ema ------ #\n","# step_col_list.append([['ema_5T'], 1, '#03ed30', 2])\n","\n","# ============ step_col_list2 - add info(col, alpha, color, linewidth) ============ #\n","# ------ cci ------ #\n","step_col_list2.append([['cci_{}{}'.format(wave_itv1, wave_period1)], 1, '#00ff00', 3])\n","step_col_list2.append([['cci_{}{}'.format(wave_itv2, wave_period2)], 1, '#00ff00', 1])\n","\n","\n","# ============ stepmark_col_list - add info(col, alpha, color, linewidth, marker_style) ============ #\n","# stepmark_col_list.append([['sar_T'], 1, 'dodgerblue', 7])\n","\n","# ------ wave_range ------ #\n","stepmark_col_list.append([['wave_low_fill_{}{}'.format(wave_itv1, wave_period1)], 1, '#e91e63', 10, '*'])\n","stepmark_col_list.append([['wave_high_fill_{}{}'.format(wave_itv1, wave_period1)], 1, '#2962ff', 10, '*'])\n","\n","stepmark_col_list.append([['wave_low_fill_{}{}'.format(wave_itv2, wave_period2)], 1, '#ff00ff', 7, '*'])\n","stepmark_col_list.append([['wave_high_fill_{}{}'.format(wave_itv2, wave_period2)], 1, '#00ff00', 7, '*'])\n","  \n","# stepmark_col_list.append([['wave_co_marker_{}{}'.format(wave_itv1, wave_period1)], 1, '#00ff00', 3, 'o'])\n","# stepmark_col_list.append([['wave_cu_marker_{}{}'.format(wave_itv1, wave_period1)], 1, '#ff00ff', 3, 'o'])\n","\n","# ============ data_window_col_list ============ #\n","# ------ wrr ------ #\n","# data_window_col_list.append([['cu_wrr_21_{}{}'.format(wave_itv1, wave_period1)], 'cu_wrr_21_{}{}'.format(wave_itv1, wave_period1)])\n","# data_window_col_list.append([['co_wrr_21_{}{}'.format(wave_itv1, wave_period1)], 'co_wrr_21_{}{}'.format(wave_itv1, wave_period1)])\n","data_window_p1_col_list.append([['cu_wrr_32_{}{}'.format(wave_itv1, wave_period1)], 'cu_wrr_32_{}{}'.format(wave_itv1, wave_period1)])\n","data_window_p1_col_list.append([['co_wrr_32_{}{}'.format(wave_itv1, wave_period1)], 'co_wrr_32_{}{}'.format(wave_itv1, wave_period1)])\n","data_window_p2_col_list.append([['cu_wrr_32_{}{}'.format(wave_itv2, wave_period2)], 'cu_wrr_32_{}{}'.format(wave_itv2, wave_period2)])\n","data_window_p2_col_list.append([['co_wrr_32_{}{}'.format(wave_itv2, wave_period2)], 'co_wrr_32_{}{}'.format(wave_itv2, wave_period2)])\n","\n","try:   # wave_range 단독 실행의 경우 tr_arr 이 존재하지 않기 때문에 try 처리함\n","  res_df['short_tr_{}'.format(selection_id)].iloc[short_obj[-1].astype(int).ravel()] = short_tr_arr\n","  res_df['long_tr_{}'.format(selection_id)].iloc[long_obj[-1].astype(int).ravel()] = long_tr_arr\n","  data_window_p1_col_list.append([['short_tr_{}'.format(selection_id)], 'short_tr_{}'.format(selection_id)])\n","  data_window_p1_col_list.append([['long_tr_{}'.format(selection_id)], 'long_tr_{}'.format(selection_id)])\n","except:\n","  pass\n","\n","\n","# ====== str to numbcol ====== #\n","nonstep_col_arr = strcol_tonumb(res_df, nonstep_col_list)\n","step_col_arr = strcol_tonumb(res_df, step_col_list)\n","step_col_arr2 = strcol_tonumb(res_df, step_col_list2)\n","stepmark_col_arr = strcol_tonumb(res_df, stepmark_col_list)\n","data_window_p1_col_arr = strcol_tonumb(res_df, data_window_p1_col_list)\n","data_window_p2_col_arr = strcol_tonumb(res_df, data_window_p2_col_list)\n","\n","col_idx_dict = \\\n","{\n","  \"ohlc_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close']),\n","  # \"vp_col_idxs\": get_col_idxs(res_df, ['close', 'volume']),\n","  # \"ohlc_col_idxs\": get_col_idxs(res_df, ['haopen', 'hahigh', 'halow', 'haclose']),  # heikin-ashi ver.\n","  \"nonstep_col_info\": nonstep_col_arr,\n","  \"step_col_info\": step_col_arr,\n","  \"step_col_info2\": step_col_arr2,\n","  \"stepmark_col_info\": stepmark_col_arr,\n","  \"data_window_p1_col_info\": data_window_p1_col_arr,\n","  \"data_window_p2_col_info\": data_window_p2_col_arr,\n","  \"ylim_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close', 'short_tp_1_{}'.format(selection_id), 'long_tp_1_{}'.format(selection_id), 'short_tp_0_{}'.format(selection_id), 'long_tp_0_{}'.format(selection_id)])  \n","}   \n","#   'wave_low_fill_{}{}'.format(wave_itv2, wave_period2), 'wave_high_fill_{}{}'.format(wave_itv2, wave_period2)\n","#   'dc_upper_H', 'dc_lower_H', 'dc_upper_15T', 'dc_lower_15T', 'short_out_{}'.format(selection_id), 'long_out_{}'.format(selection_id)\n","#   'wave_1_{}'.format(wave_itv2), 'wave_0_{}'.format(wave_itv2), 'dc_upper_15T', 'dc_lower_15T'"]},{"cell_type":"markdown","metadata":{"id":"XfvH5ngyieS9"},"source":["#### session_plot main"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OCLMABZT1ojb","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"error","timestamp":1656643053154,"user_tz":-540,"elapsed":48795,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"8f71f2dd-c650-43d6-8b54-15fbf0715b85"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 4 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 4 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 4 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 4 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 4 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAB0EAAASICAYAAABlZLepAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nOzdeVhU9f4H8PcMMKOsorihSIKiggXeitRUVHIprzc1rVCTyspbmUs7v5u5ZS5dNbXyWhm5oLaq6VW7Nx0BlUJbIFncWIVBkGWYAQTFz++PridHBhgQBfH9ep7383DOdznfc6QnPnyZGRUAARERERERERERERERERFRM6Fu7AUQERERERERERERERERETUkboISERERERERERERERERUbPCTVAiIiIiIiIiIiIiIiIiala4CUpEREREREREREREREREzQo3QYmIiIiIiIiIiIiIiIioWeEmKBERERERERERERERERE1K9wEJSIiIiIiIiIiIiIiIqJmhZugREREN0BqaipKS0thNBpRUFCA3bt3o3PnzgAAnU6HqVOnmvUPCgpCZmYmACAyMhJvv/22WfsTTzyB06dPo2XLljfnBoiIiIiIiOimYQ1JRETU8LgJSkREdIOMHj0aTk5O6NixI86dO4c1a9ZYNe6ZZ57B7Nmz4evrCwBwc3PD8uXL8cwzz6CsrOxGLpmIiIiIiIgaCWtIIiKihsVNUCIiohusvLwcX3/9tVKQ1ubUqVNYtGgR1q9fD5VKhdWrV+Obb77BwYMHb+xCiYiIiIiIqNGxhiQiImoY3AQlIiK6wVq2bInHHnsMP/74o9VjVqxYAZVKha+//hr3338/XnvttRu4QiIiIiIiImoqWEMSERE1DNvGXgAREVFztWPHDly6dAkODg7Iy8vDiBEjrB57+fJlPP3000hISMDDDz8Mk8l0A1dKREREREREjY01JBERUcPiK0GJiIhukDFjxsDV1RUtWrTA9OnTERkZifbt2+PSpUuws7Mz62tnZ4eLFy+anUtMTAQAJCQk3LQ1ExERERERUeNgDUlERNSwuAlKRER0g12+fBnbt29HZWUlBgwYgIyMDNxxxx1mfbp27Yr09PTGWSARERERERE1GawhiYiIGgY3QYmIiG6Cv/3tb3B1dUVSUhK++OILPPXUU7j33nsBAN27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T173vERERDcLN0GJiIhqEBsbi5KSEgwdOlQ5N3HiRGzZskU5fvjhh/H111+jVatWiIiIwJYtWxAbG4s2bdpg3rx5eOKJJ2q8RmFhIe6///56r/GNN96A0WhEVlYWHBwczNZ2NT8/P6XwBoCUlBRUVFTAx8en3tcmIiIiIiKiP90KNeQLL7yA/Px8HDt2DOPGjau237U1ZFxcHDp06IDWrVvX+9pEREQ3EzdBiYiIarF161aEhIQAABwdHfHQQw9h69atSntMTAx27twJEUHbtm1x77334u2338bFixdx+PBhfPfddzXO7+rqisOHD9d7fUuXLoWTkxP69Omj/DWxJY6OjlXaDAYDnJyc6n1tIiIiIiIiMteUa8jVq1eje/fuaNeuHebMmYPPP/8c/fv3t9j32hryytesIYmI6FbBTVAiIqJabNmyBePGjYNGo8G4cePwyy+/ICMjQ2nPzMxUvnZ3d0dBQQHKysostt9Iv/32G8rKyqr9jBaTyQRnZ2ezc87OzjAajTdjeURERERERLeFplxD/vrrrygoKEBlZSX27t2LiIiIal8Nem0NeeVr1pBERHSr4CYoERFRLZKSkpCeno4HH3ywytsYAYCIKF/r9Xq0bt0aLVu2VM55eHjctLXa2trC29vbYltCQgL8/f2V465du0Kr1eLkyZM3a3lERERERETN3q1UQ4oIVCqVxbZra0h/f3/k5OSgoKDgZi2PiIjounATlIiIyApbtmzBzJkzMWjQIHz11VfV9svIyMCxY8cwb9482NnZoW/fvhg9evR1XVur1UKr1Vb5WqVS4bnnnkOrVq0AAPfeey9efPFF7N+/3+I8ERERGD16NAYMGAB7e3ssWLAA3377LUwm03Wtj4iIiIiIiMw1xRoSAB555BE4ODhApVJh2LBhmDx5crVvv7tx40ZMnToVvXr1gouLC9566y18/vnn17U2IiKim4mboERERFbYunUrgoKCcODAAeTn59fYd9KkSejXrx/y8/Pxzjvv4IsvvkB5eXm1/Y1GIwYMGFBt+4ULF1BSUgIAOHHiBC5cuKC0jR07FmfOnIHRaMTmzZuxZs0arFmzxuLciYmJ+Pvf/46IiAjk5ubCyckJL7zwglX3T0RERERERNZrqjXkzJkzkZWVhaKiIrz33nt49tlnERkZCeCPV6AajUbllajff/89li1bBp1Oh4yMDKSnp2Pu3LlWPwMiIqLGpgIgtfYiIiKietu2bRuSk5Mxb968xl4KERERERERNXGsIYmIiBoGXwlKRETUwO655x54eXlBpVJhxIgRePjhh7Fjx47GXhYRERERERE1QawhiYiIbgzbxl4AERFRc9OhQwd8++23aNOmDc6ePYvnn38ev/32W2Mvi4iIiIiIiJog1pBEREQ3Bt8Ol4iIiIiIiIiIiIiIiIiaFb4dLhERERERERERERERERE1K9wEJSKi21r//v1x8uRJGI1GPPzww429HCIiIiIiImrCWEMSERHdOrgJSkREt7UFC+1CXJkAACAASURBVBbggw8+gJOTE3bu3HlTrz106FAkJSWhpKQEBw4cQJcuXart6+npiQMHDqCkpARJSUkIDg42a581axb0ej0MBgPWr18PjUbTIGOJiIiIiIjoT6whWUMSEdGtRRiGYRjmds2pU6ckODj4pl+3TZs2UlRUJOPHjxetVivLli2TmJiYavsfOXJEli9fLi1atJBx48ZJYWGhuLm5CQAZPny45OTkiK+vr7Rq1Up0Op0sXry4QcYyDMMwDMMwDMMwf4Y1JGtIhmEY5pZKoy+AYRiGYRolp0+flsrKSiktLRWj0SgajUacnZ3l008/lezsbDl79qwsXLhQ1Gq1Muapp56SxMREKSgokH379kmXLl3qde1nn31WDh8+rBzb29tLaWmp9OjRo0rf7t27y4ULF8TR0VE5FxUVJdOmTRMAEhERIYsWLVLahg4dKnq9/rrHMgzDMAzDMAzDMH+GNSRrSIZhGObWCt8Ol4iIblvdunVDRkYGRo8eDScnJ1RUVODzzz/HpUuX0K1bN/Tp0wfDhw/HM888AwD429/+hv/7v//DuHHj0LZtW0RHR2Pr1q3Vzh8XF4eQkBCLbX5+foiLi1OOS0tLcebMGfj5+Vnsm5KSApPJZDb3lb7XzhUXF4cOHTqgdevW1zWWiIiIiIiI/sQakjUkERHdWrgJSkRE9D/t2rXDQw89hFmzZqG0tBR5eXlYuXIlHn/8cQDA3//+dyxevBjJycmorKzEu+++i4CAgGo/h8Xf37/aAtfR0REGg8HsnMFggJOTU537Xtt+5WsnJ6frGktERERERETVYw3JGpKIiJo228ZeABERUVPh6ekJOzs76PV65ZxarUZmZqbSvmrVKixfvlxpV6lU6NSpEzIyMup0LZPJBGdnZ7Nzzs7OMBqNde57bfuVr41G43WNJSIiIiIiouqxhmQNSURETRtfCUpERPQ/mZmZKC8vh5ubG1xdXeHq6goXFxf07t1baZ82bZrS5urqCnt7e8TExNT5WgkJCfD391eO7e3t4e3tjYSEBIt9vby84OjoqJzz9/dX+l47l7+/P3JyclBQUHBdY4mIiIiIiKh6rCFZQxIRUdPX6B9MyjAMwzCNldTUVAkODlaOd+zYIe+//744OTmJSqUSLy8vGTRokACQMWPGyO+//y6+vr4CQJydnWX8+PH1uq6bm5sUFRXJuHHjRKvVypIlSyQmJqba/jExMfLee++JVquVMWPGSGFhobi5uQkAGTFihOj1eunVq5e4uLjI/v37ZfHixQ0ylmEYhmEYhmEYhvkzrCFZQzIMwzC3VBp9AQzDMAzTaLm2gHV2dpaPPvpIMjMzpaioSH755Rd57LHHlPbJkydLfHy8GAwGycjIkPXr11c79/Hjx2XixInVtgcHB0tSUpKUlpaKTqcTT09PpW3t2rWydu1a5djT01N0Op2UlpZKcnKy2ZoByOzZsyUnJ0cMBoN89tlnotFoGmQswzAMwzAMwzAM82dYQ7KGZBiGYW6dqP73BRERERERERERERERERFRs8DPBCUiIiIiIiIiIiIiIiKiZoWboERERERERERERERERETUrHATlIiIiIiIiIiIiIiIiIiaFW6CEhEREREREREREREREVGzwk1QIiIiIiIiIiIiIiIiImpWuAlKRERERERERERERERERM0KN0GJiIis0KtXLxw9ehQFBQUoKCjAf//7X/Tq1Utpf/XVV/H777+juLgYKSkpePXVV62ad8GCBYiPj8fFixcxd+5cs7agoCBUVlbCaDQqmTJlCgCYnausrERpaalyPHHiRISGhuLSpUtm/YKCgup173Z2dvjqq6+QmpoKEal1HldXV3z77bcwmUxIS0tDSEiIWXtISAjS0tJgMpmwfft2uLq6Wj2WiIiIiIjoVsAakjUkERE1DcIwDMMwt1tsbGysOnclLi4u4unpKQBErVbLSy+9JHFxcUr7a6+9Jn369BEbGxvx8fGRtLQ0eeyxx2pdx5QpU2TkyJGyY8cOmTt3rllbUFCQZGZm1jpHamqqBAcHm50LDQ2V6OjoBnlWdnZ2MnPmTLn//vsl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YLHXhISEqHfv3po9e3a5jVkSX19fff311/rggw+0bt26Qvukp6dLsjxO6rJatWopLS1NkuX7QleuXFngnw8AAAAA2AtryLKPWRJb1pBX+uWXX3ThwgVNnTr1qnOZmZlat26dXnrpJd18880FzvXv319vvfWW7r33XiUkJFxT3gCAG5OrvRMAAKAk586dU1ZWlgIDA3Xo0CFJUpMmTRQbG1vitadPn1bdunVVvXp16yI2ICCgxOuMMaVqt2U8Z+fiP3vUo0cPNW3aVCdPnpRkWYC7uLgoODhYt956a5nGLI63t7e+/vprbdq0SW+++WaR/ZKTkxUXF6eQkBBt3bpVkmWxfflxRL169ZK/v79GjRolSfLz89P69es1Y8YMzZw5s8z5AQAAAEBZsIa07xqyMK6urmrWrFmR593c3BQUFKQDBw5Ikvr06aNFixapb9++OnjwYJlzBgDc2LgTFABQ6eXm5mr9+vWaPn26PD091aRJE73wwgtatWpVideePHlS+/bt05QpU+Tm5qbbb79d/fr1K/G6+Ph45eTkKCgoqEw59+jRQ02aNJEk+fv76+2339bGjRuLvWbhwoVq1qyZQkNDFRoaqgULFujLL79Unz59yjxmUby8vLRlyxbt2bNHEydOLLH/ihUr9Oqrr8rb21utWrXSk08+qWXLlkmyFEH/8pe/WPOOi4vT008/rXnz5kmSnJ2d5eHhIVdX1wL7AAAAAFARWEPadw3p5OSkp556St7e3pKkDh066Nlnn9W2bdskWb4ntUuXLnJzc1O1atU0fvx41a9fXz/88IMk6c4779Tq1as1cOBARUZGlilfAAAkiqAAgCri73//uzIyMnTs2DHt3r1ba9as0ZIlS2y69pFHHlHnzp2VkJCgN954Qx999JEyMzOLvebChQuaPn269uzZo6SkJHXq1KlU+bZv31579+5VRkaG9u7dq19//VXPPfdciXOePXvWGunp6bp48aLOnTtXpjE3b95c5OL0gQceUMeOHfX4448rLS3NGpc/4Tx06NACn7adPHmyjh49qujoaEVEROidd97Rli1bJEmJiYkF8s7JyVFSUpIyMjIkScOHD9fFixe1YMECde/eXRcvXtSiRYtsfzMBAAAAoJRYQ9p3DfnAAw/o6NGjSktL06pVqzR37lzNnTtXkuTh4aF58+YpISFBsbGxuu+++9S3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\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 4 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 4 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 4 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 4 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-75-0c210bfd33e7>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# p2_hlm 의 경우, tr 확인을 우해 session_plot 우선 실행 필요함\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0m_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mplot_check_v8\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mres_df\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparam_zip\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpr_msg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_margin_mult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_margin_mult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mback_plot\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mplot_check_dir\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcol_idx_dict\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mparam_zip\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp_plot_params\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp_plot_params\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-75-0c210bfd33e7>\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# p2_hlm 의 경우, tr 확인을 우해 session_plot 우선 실행 필요함\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0m_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mplot_check_v8\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mres_df\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparam_zip\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpr_msg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_margin_mult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_margin_mult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mback_plot\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mplot_check_dir\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcol_idx_dict\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mparam_zip\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp_plot_params\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp_plot_params\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/content/drive/My Drive/Colab Notebooks/JnQ/funcs/funcs_plot_check.py\u001b[0m in \u001b[0;36mplot_check_v8\u001b[0;34m(res_df, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, back_plot, plot_check_dir, **col_idx_dict)\u001b[0m\n\u001b[1;32m    510\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    511\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mplot_check_dir\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 512\u001b[0;31m     \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    513\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    514\u001b[0m   \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/pyplot.py\u001b[0m in \u001b[0;36mshow\u001b[0;34m(*args, **kw)\u001b[0m\n\u001b[1;32m    270\u001b[0m     \"\"\"\n\u001b[1;32m    271\u001b[0m     \u001b[0;32mglobal\u001b[0m \u001b[0m_show\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 272\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_show\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    273\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    274\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/ipykernel/pylab/backend_inline.py\u001b[0m in \u001b[0;36mshow\u001b[0;34m(close, block)\u001b[0m\n\u001b[1;32m     37\u001b[0m             display(\n\u001b[1;32m     38\u001b[0m                 \u001b[0mfigure_manager\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcanvas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 39\u001b[0;31m                 \u001b[0mmetadata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0m_fetch_figure_metadata\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigure_manager\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcanvas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     40\u001b[0m             )\n\u001b[1;32m     41\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/IPython/core/display.py\u001b[0m in \u001b[0;36mdisplay\u001b[0;34m(*objs, **kwargs)\u001b[0m\n\u001b[1;32m    304\u001b[0m             \u001b[0mpublish_display_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmetadata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmetadata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    305\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 306\u001b[0;31m             \u001b[0mformat_dict\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmd_dict\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minclude\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minclude\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexclude\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mexclude\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    307\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mformat_dict\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    308\u001b[0m                 \u001b[0;31m# nothing to display (e.g. _ipython_display_ took over)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/IPython/core/formatters.py\u001b[0m in \u001b[0;36mformat\u001b[0;34m(self, obj, include, exclude)\u001b[0m\n\u001b[1;32m    171\u001b[0m             \u001b[0mmd\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    172\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 173\u001b[0;31m                 \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mformatter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    174\u001b[0m             \u001b[0;32mexcept\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    175\u001b[0m                 \u001b[0;31m# FIXME: log the exception\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<decorator-gen-2>\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, obj)\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/IPython/core/formatters.py\u001b[0m in \u001b[0;36mcatch_format_error\u001b[0;34m(method, self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    215\u001b[0m     \u001b[0;34m\"\"\"show traceback on failed format call\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    216\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 217\u001b[0;31m         \u001b[0mr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    218\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mNotImplementedError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    219\u001b[0m         \u001b[0;31m# don't warn on NotImplementedErrors\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/IPython/core/formatters.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, obj)\u001b[0m\n\u001b[1;32m    332\u001b[0m                 \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    333\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 334\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mprinter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    335\u001b[0m             \u001b[0;31m# Finally look for special method names\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    336\u001b[0m             \u001b[0mmethod\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_real_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprint_method\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/IPython/core/pylabtools.py\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(fig)\u001b[0m\n\u001b[1;32m    239\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    240\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;34m'png'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mformats\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 241\u001b[0;31m         \u001b[0mpng_formatter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfor_type\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mFigure\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mprint_figure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'png'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    242\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;34m'retina'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mformats\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;34m'png2x'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mformats\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    243\u001b[0m         \u001b[0mpng_formatter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfor_type\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mFigure\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mretina_figure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/IPython/core/pylabtools.py\u001b[0m in \u001b[0;36mprint_figure\u001b[0;34m(fig, fmt, bbox_inches, **kwargs)\u001b[0m\n\u001b[1;32m    123\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    124\u001b[0m     \u001b[0mbytes_io\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mBytesIO\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 125\u001b[0;31m     \u001b[0mfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcanvas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprint_figure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbytes_io\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    126\u001b[0m     \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbytes_io\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetvalue\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    127\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mfmt\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'svg'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/backend_bases.py\u001b[0m in \u001b[0;36mprint_figure\u001b[0;34m(self, filename, dpi, facecolor, edgecolor, orientation, format, bbox_inches, **kwargs)\u001b[0m\n\u001b[1;32m   2124\u001b[0m                     \u001b[0morientation\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0morientation\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2125\u001b[0m                     \u001b[0mbbox_inches_restore\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0m_bbox_inches_restore\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2126\u001b[0;31m                     **kwargs)\n\u001b[0m\u001b[1;32m   2127\u001b[0m             \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2128\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mbbox_inches\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mrestore_bbox\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py\u001b[0m in \u001b[0;36mprint_png\u001b[0;34m(self, filename_or_obj, metadata, pil_kwargs, *args, **kwargs)\u001b[0m\n\u001b[1;32m    512\u001b[0m         }\n\u001b[1;32m    513\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 514\u001b[0;31m         \u001b[0mFigureCanvasAgg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    515\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mpil_kwargs\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    516\u001b[0m             \u001b[0;32mfrom\u001b[0m \u001b[0mPIL\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mImage\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py\u001b[0m in \u001b[0;36mdraw\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    391\u001b[0m              (self.toolbar._wait_cursor_for_draw_cm() if self.toolbar\n\u001b[1;32m    392\u001b[0m               else nullcontext()):\n\u001b[0;32m--> 393\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    394\u001b[0m             \u001b[0;31m# A GUI class may be need to update a window using this draw, so\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    395\u001b[0m             \u001b[0;31m# don't forget to call the superclass.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mdraw_wrapper\u001b[0;34m(artist, renderer, *args, **kwargs)\u001b[0m\n\u001b[1;32m     36\u001b[0m                 \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     37\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 38\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0martist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     39\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0martist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_agg_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/figure.py\u001b[0m in \u001b[0;36mdraw\u001b[0;34m(self, renderer)\u001b[0m\n\u001b[1;32m   1734\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpatch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1735\u001b[0m             mimage._draw_list_compositing_images(\n\u001b[0;32m-> 1736\u001b[0;31m                 renderer, self, artists, self.suppressComposite)\n\u001b[0m\u001b[1;32m   1737\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1738\u001b[0m             \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclose_group\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'figure'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/image.py\u001b[0m in \u001b[0;36m_draw_list_compositing_images\u001b[0;34m(renderer, parent, artists, suppress_composite)\u001b[0m\n\u001b[1;32m    135\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mnot_composite\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mhas_images\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    136\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0ma\u001b[0m \u001b[0;32min\u001b[0m \u001b[0martists\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 137\u001b[0;31m             \u001b[0ma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    138\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    139\u001b[0m         \u001b[0;31m# Composite any adjacent images together\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mdraw_wrapper\u001b[0;34m(artist, renderer, *args, **kwargs)\u001b[0m\n\u001b[1;32m     36\u001b[0m                 \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     37\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 38\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0martist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     39\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0martist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_agg_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/axes/_base.py\u001b[0m in \u001b[0;36mdraw\u001b[0;34m(self, renderer, inframe)\u001b[0m\n\u001b[1;32m   2628\u001b[0m             \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstop_rasterizing\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2629\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2630\u001b[0;31m         \u001b[0mmimage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_draw_list_compositing_images\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0martists\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2631\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2632\u001b[0m         \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclose_group\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'axes'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/image.py\u001b[0m in \u001b[0;36m_draw_list_compositing_images\u001b[0;34m(renderer, parent, artists, suppress_composite)\u001b[0m\n\u001b[1;32m    135\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mnot_composite\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mhas_images\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    136\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0ma\u001b[0m \u001b[0;32min\u001b[0m \u001b[0martists\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 137\u001b[0;31m             \u001b[0ma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    138\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    139\u001b[0m         \u001b[0;31m# Composite any adjacent images together\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mdraw_wrapper\u001b[0;34m(artist, renderer, *args, **kwargs)\u001b[0m\n\u001b[1;32m     36\u001b[0m                 \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     37\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 38\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0martist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     39\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0martist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_agg_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/lines.py\u001b[0m in \u001b[0;36mdraw\u001b[0;34m(self, renderer)\u001b[0m\n\u001b[1;32m    800\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    801\u001b[0m                 \u001b[0mgc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_dashes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dashOffset\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dashSeq\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 802\u001b[0;31m                 \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw_path\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtpath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maffine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfrozen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    803\u001b[0m                 \u001b[0mgc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrestore\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    804\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py\u001b[0m in \u001b[0;36mdraw_path\u001b[0;34m(self, gc, path, transform, rgbFace)\u001b[0m\n\u001b[1;32m    150\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    151\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 152\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_renderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw_path\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtransform\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrgbFace\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    153\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mOverflowError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    154\u001b[0m                 raise OverflowError(\"Exceeded cell block limit (set \"\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}],"source":["# p2_hlm 의 경우, tr 확인을 우해 session_plot 우선 실행 필요함\n","_ = [plot_check_v8(res_df, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, back_plot, plot_check_dir, **col_idx_dict) for param_zip in zip(np_plot_params, np_plot_params[::-1])]"]},{"cell_type":"markdown","metadata":{"id":"sZAYhcdoXnm4"},"source":["### whole_plot"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jjFziVVIhgSr"},"outputs":[],"source":["s_id = config.selection_id\n","\n","# ------------ make col_idx_dict config ------------ #\n","nonstep_col_list = []\n","step_col_list = []\n","stepmark_col_list = []\n","\n","# ============ nonstep_col_list - add info(col, alpha, color, linewidth) ============ #\n","# nonstep_col_list.append([['close'], 1, '#ffffff', 2])\n","\n","# ============ step_col_list - add info(col, alpha, color, linewidth) ============ #\n","# ------ htf_candle ------ #\n","hc_tf1 = '15T'\n","hc_tf2 = 'H'\n","hc_tf3 = '4H'\n","\n","step_col_list.append([['open_{}'.format(hc_tf1), 'close_{}'.format(hc_tf1)], 1, '#ffffff', 1])\n","step_col_list.append([['open_{}'.format(hc_tf2), 'close_{}'.format(hc_tf2)], 1, '#ffffff', 2])\n","# step_col_list.append([['open_{}'.format(hc_tf3), 'close_{}'.format(hc_tf3)], 1, '#ffffff', 4])\n","\n","# ------ resi_sup ------ #\n","# rs_tf = 'T'\n","# step_col_list.append([['resi_{}'.format(rs_tf), 'sup_{}'.format(rs_tf)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['resi_out_{}'.format(rs_tf), 'sup_out_{}'.format(rs_tf)], 1, 'dodgerblue', 2])\n","\n","# ------ wave_range ------ #\n","wave_tf1 = config_list[0].tr_set.p1_itv1\n","wave_period1, wave_period2 = config_list[0].tr_set.p1_period1, config_list[0].tr_set.p1_period2\n","\n","# step_col_list.append([['dc_upper_{}{}'.format(wave_tf1, wave_period1), 'dc_lower_{}{}'.format(wave_tf1, wave_period1)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['dc_upper_{}{}'.format(wave_tf1, wave_period2), 'dc_lower_{}{}'.format(wave_tf1, wave_period2)], 1, '#ffeb3b', 1])\n","\n","# step_col_list.append([['dc_upper_{}{}'.format(wave_tf2, wave_period2), 'dc_lower_{}{}'.format(wave_tf2, wave_period2)], 1, '#e65100', 2])\n","\n","# ------ dc ------ #\n","dc_tf1 = '5T'\n","dc_period1 = 20\n","dc_tf2 = 'H'\n","dc_period2 = 20\n","# step_col_list.append([['dc_upper_{}{}'.format(dc_tf1, dc_period1), 'dc_lower_{}{}'.format(dc_tf1, dc_period1)], 1, '#ffeb3b', 1]),  # inner\n","# step_col_list.append([['dc_base_{}{}'.format(dc_tf1, dc_period1)], 1, '#5b9cf6', 1])\n","step_col_list.append([['dc_upper_{}{}'.format(dc_tf2, dc_period2), 'dc_lower_{}{}'.format(dc_tf2, dc_period2)], 1, '#ff00ff', 4]),  # inner\n","step_col_list.append([['dc_base_{}{}'.format(dc_tf2, dc_period2)], 1, '#5b9cf6', 4])\n","\n","# ------ bb ------ #\n","bb_tf1 = 'T'\n","bb_period1 = 20\n","\n","# step_col_list.append([['bb_upper_{}{}'.format(bb_tf1, bb_period1), 'bb_lower_{}{}'.format(bb_tf1, bb_period1)], 1, '#ffffff', 1])\n","# step_col_list.append([['bb_base_{}{}'.format(bb_tf1, bb_period1)], 1, '#00ff00', 1])\n","\n","# step_col_list.append([['bb_upper_{}'.format(tf2), 'bb_lower_{}'.format(tf2)], 1, '#e91e63', 4])\n","\n","# ------ ema ------ #\n","# step_col_list.append([['ema_5T'], 1, '#03ed30', 2])\n","\n","# ============ stepmark_col_list - add info(col, alpha, color, linewidth) ============ #\n","# stepmark_col_list.append([['sar_T'], 1, 'dodgerblue', 7])\n","\n","\n","# ============ str to numbcol ============ #\n","nonstep_col_arr = strcol_tonumb(res_df, nonstep_col_list)\n","step_col_arr = strcol_tonumb(res_df, step_col_list)\n","stepmark_col_arr = strcol_tonumb(res_df, stepmark_col_list)\n","\n","col_idx_dict = \\\n","{\n","  \"ohlc_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close']),\n","  \"vp_col_idxs\": get_col_idxs(res_df, ['close', 'volume']),\n","  # \"ohlc_col_idxs\": get_col_idxs(res_df, ['haopen', 'hahigh', 'halow', 'haclose']),  # heikin-ashi ver.\n","  \"nonstep_col_info\": nonstep_col_arr,\n","  \"step_col_info\": step_col_arr,\n","  \"stepmark_col_info\": stepmark_col_arr,\n","  \"ylim_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close', 'dc_upper_15T4', 'dc_lower_15T4'])  # , 'dc_upper_H', 'dc_lower_H', 'dc_upper_15T', 'dc_lower_15T', 'short_out_{}'.format(selection_id), 'long_out_{}'.format(selection_id)\n","}   # , 'wave_1_{}'.format(wave_tf2), 'wave_0_{}'.format(wave_tf2), 'dc_upper_15T', 'dc_lower_15T'"]},{"cell_type":"markdown","metadata":{"id":"50HXDIdJij28"},"source":["#### whole_plot main"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-tbLsXN9eN2p"},"outputs":[],"source":["plot_op_idx_nums = 10\n","\n","win_idxs = (pr_ > 1).ravel()  # [-plot_op_idx_nums:]\n","selected_op_idxs = obj_[4].ravel().astype(int)  # [-plot_op_idx_nums:]\n","selected_ex_idxs = obj_[3].ravel().astype(int)  # [-plot_op_idx_nums:]\n","\n","len_idxs = len(win_idxs)\n","print(\"len_idxs :\", len_idxs)\n","\n","split_range = np.arange(plot_op_idx_nums, len_idxs, plot_op_idx_nums)\n","win_idxs_list = np.split(win_idxs, split_range, axis=0)\n","selected_op_idxs_list = np.split(selected_op_idxs, split_range, axis=0)\n","selected_ex_idxs_list = np.split(selected_ex_idxs, split_range, axis=0)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FtILHO-4kVlO"},"outputs":[],"source":["_ = [whole_plot_check(np_df, a, b, c, plot_check_dir=None, **col_idx_dict) for a, b, c in zip(win_idxs_list, selected_op_idxs_list, selected_ex_idxs_list)]"]},{"cell_type":"markdown","metadata":{"id":"iTW2ZuX61ojg"},"source":["### plot_funcs"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0l6joTK_1ojh"},"outputs":[],"source":["def whole_plot_check(data, win_idxs, selected_op_idxs, selected_ex_idxs, plot_check_dir=None, **col_idx_dict):\n","  # start_0 = time.time()\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(30, 12))\n","  nrows, ncols = 1, 1\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                          ncols=ncols,\n","                          #height_ratios=[31, 1]\n","                          )\n","\n","  ax = fig.add_subplot(gs[0])\n","\n","  # ------------ add_col section ------------ #\n","  a_data = data[selected_op_idxs[0]:selected_op_idxs[-1] + 1]\n","\n","  plot_op_idxs = selected_op_idxs - selected_op_idxs[0]  \n","  plot_win_op_idxs = plot_op_idxs[win_idxs]\n","  plot_loss_op_idxs = plot_op_idxs[~win_idxs]\n","\n","  plot_ex_idxs = selected_ex_idxs - selected_op_idxs[0]\n","  plot_win_ex_idxs = plot_ex_idxs[win_idxs]\n","  plot_loss_ex_idxs = plot_ex_idxs[~win_idxs]\n","\n","\n","  # ------ add cols ------ #\n","  [nonstep_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['nonstep_col_info']]\n","  [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","  [stepmark_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['stepmark_col_info']]\n","\n","  # [plt.axvline(op_idx, color='#00ff00') for op_idx in plot_win_op_idxs]\n","  # [plt.axvline(op_idx, color='#ff0000') for op_idx in plot_loss_op_idxs]\n","  [plt.axvspan(op_idx, ex_idx, alpha=0.5, color='#00ff00') for op_idx, ex_idx in zip(plot_win_op_idxs, plot_win_ex_idxs)]\n","  [plt.axvspan(op_idx, ex_idx, alpha=0.5, color='#ff0000') for op_idx, ex_idx in zip(plot_loss_op_idxs, plot_loss_ex_idxs)]\n","  \n","  plt.show()\n","\n","  if plot_check_dir is None:\n","    plt.show()\n","    print()\n","  else:\n","    fig_name = plot_check_dir + \"/whole_plot_{}.png\".format(selected_op_idxs[0])\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","  plt.close()\n","  # print(\"elapsed time :\", time.time() - start_0)\n","\n","  return\n","\n","def plot_check_v8(res_df, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, back_plot, plot_check_dir=None, **col_idx_dict):\n","  # start_0 = time.time()\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(30, 18))\n","  nrows, ncols = 2, 2\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                         ncols=ncols,\n","                         height_ratios=[3, 1]\n","                         )\n","  for gs_idx, params in enumerate(param_zip):\n","\n","    iin, iout, pr, en_p, ex_p, entry_idx, exit_idx, p1_idx, p2_idx, lvrg, fee, tp_line, out_line, tp_1, tp_0, out_1, out_0, ep2_0 = params\n","\n","    # print(\"en_p, ex_p :\", en_p, ex_p)\n","    # print(\"tp_line, out_line, ep2_0 :\", tp_line, out_line, ep2_0)\n","\n","    # temporary\n","    # if exit_idx - p1_idx < 50:\n","    # if exit_idx != entry_idx:\n","    # print(\"p1_idx :\", p1_idx)\n","    # if p1_idx != 370259:\n","    #   break\n","\n","    # ============ define ax1 & ax2 ============ #\n","    ax1 = fig.add_subplot(gs[gs_idx])\n","    ax2 = fig.add_subplot(gs[gs_idx + 2])\n","\n","    # ------ date range ------ #\n","    if back_plot == 0:\n","      iout = iin + x_max\n","      # print(\"iin, iout :\", iin, iout)\n","\n","    a_data = res_df.iloc[int(iin):int(iout + 1)].to_numpy()\n","    # a_data = data[iin:iout]\n","\n","    # ------------ add_col section ------------ #\n","    # ------ candles ------ #\n","    candle_plot_v2(ax1, a_data[:, col_idx_dict['ohlc_col_idxs']], alpha=1.0, wickwidth=1.0)\n","\n","    # ------ add cols ------ #\n","    [nonstep_col_plot_v2(ax1, a_data[:, params_[0]], *params_[1:]) for params_ in col_idx_dict['nonstep_col_info']]\n","    [step_col_plot_v2(ax1, a_data[:, params_[0]], *params_[1:]) for params_ in col_idx_dict['step_col_info']]\n","    [stepmark_col_plot_v2(ax1, a_data[:, params_[0]], *params_[1:]) for params_ in col_idx_dict['stepmark_col_info']]\n","\n","    [step_col_plot_v2(ax2, a_data[:, params_[0]], *params_[1:]) for params_ in col_idx_dict['step_col_info2']]\n","\n","    # ------ ep, tp + xlim ------ #\n","    try:\n","      eptp_hvline_v8(ax1, ax2, config, *params, back_plot, x_max, x_margin_mult, y_margin_mult, a_data, **col_idx_dict)\n","    except Exception as e:\n","      print(\"error in eptp_hvline :\", e)\n","\n","    #     Todo    #\n","    #     3. outer_price plot 일 경우, gs_idx + nrows 하면 됨\n","\n","    # ------ trade_info ------ #\n","    data_msg_list = [\"\\n {} : {:.3f}\".format(*params_[1:], *res_df.iloc[int(p1_idx), params_[0]]) for params_ in col_idx_dict['data_window_p1_col_info']]  # * for unsupported format for arr\n","    data_msg_list += [\"\\n {} : {:.3f}\".format(*params_[1:], *res_df.iloc[int(p2_idx), params_[0]]) for params_ in col_idx_dict['data_window_p2_col_info']]\n","    ps_msg_expand = pr_msg.format(p1_idx, exit_idx, pr, lvrg, fee) + ''.join(data_msg_list)\n","    \n","    ax1.set_title(ps_msg_expand)   # set_title on ax1\n","\n","  if plot_check_dir is None:\n","    plt.show()\n","    print()\n","  else:\n","    fig_name = plot_check_dir + \"/{}.png\".format(int(entry_idx))\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","  plt.close()\n","  # print(\"elapsed time :\", time.time() - start_0)\n","\n","  return\n","\n","def eptp_hvline_v8(ax1, ax2, config, iin, iout, pr, en_p, ex_p, entry_idx, exit_idx, p1_idx, p2_idx, lvrg, fee, tp_line, out_line, tp_1, tp_0, out_1, out_0, ep2_0,\n","                   back_plot, x_max, x_margin_mult, y_margin_mult, a_data, **col_idx_dict):\n","  # ------ get vertical ticks ------ #\n","  entry_tick = int(entry_idx - iin)\n","  exit_tick = entry_tick + int(exit_idx - entry_idx)\n","  p1_tick = entry_tick - int(entry_idx - p1_idx)\n","  p2_tick = p1_tick + int(p2_idx - p1_idx)\n","  bias_info_tick = entry_tick + config.tr_set.bias_info_tick\n","\n","  if back_plot == 1:\n","    x_max = p1_tick + 20\n","  elif back_plot == 2:\n","    x_max = p2_tick + 20 \n","  elif back_plot == 3:\n","    x_max = entry_tick + 20 \n","  elif back_plot == 4:\n","    x_max = exit_tick + 20\n","  elif back_plot == 5:\n","    x_max = bias_info_tick + 20\n","\n","  # ============ xlim ============ #\n","  if (iout - iin) > x_max:\n","    x_margin = x_max * x_margin_mult\n","    ax1.set_xlim(0 - x_margin, x_max + x_margin)\n","    ax2.set_xlim(0 - x_margin, x_max + x_margin)\n","  x0, x1 = ax1.get_xlim()\n","\n","  # ============ hlines ============ #\n","  # ------------ ax1 ------------ #\n","  # ------ entry & exit ------ #\n","  en_xmin = entry_tick / x1\n","  ex_xmin = exit_tick / x1\n","  ax1.axhline(en_p, x0, en_xmin, linewidth=2, linestyle='--', alpha=1, color='lime')  # en_p line axhline\n","  ax1.text(x0, en_p, 'en_p :\\n {:.3f} \\n epg2 {}'.format(en_p, config.tr_set.ep_gap2), ha='right', va='center', fontweight='bold', fontsize=15)  # en_p line label\n","  ax1.axhline(ex_p, ex_xmin, 1, linewidth=2, linestyle='--', alpha=1, color='lime')  # ex_p line axhline (signal 도 포괄함, 존재 의미)\n","  ax1.text(x1, ex_p, 'ex_p :\\n {}'.format(ex_p), ha='left', va='center', fontweight='bold', fontsize=15)  # ex_p line label\n","\n","  # ------ tpout_line ------ #\n","  ax1.axhline(tp_line, 0.05, 1, linewidth=2, linestyle='-', alpha=1, color='#00ff00')  # ep 와 gap 비교 용이하기 위해 ex_xmin -> 0.1 사용\n","  ax1.text(x0, tp_line, 'tpg {}'.format(config.tr_set.tp_gap), ha='right', va='center', fontweight='bold', fontsize=15, color='#00ff00')\n","  ax1.axhline(out_line, 0.05, 1, linewidth=2, linestyle='-', alpha=1, color='#ff0000')\n","  ax1.text(x0, out_line, 'outg {}'.format(config.tr_set.out_gap), ha='right', va='center', fontweight='bold', fontsize=15, color='#ff0000')\n","\n","  # ------ tp_box ------ #\n","  text_x_pos = (x0 + x1) * 0.1\n","  ax1.axhline(tp_1, 0.2, 1, linewidth=4, linestyle='-', alpha=1, color='#ffffff')\n","  ax1.text(text_x_pos, tp_1, ' tp_1', ha='right', va='bottom', fontweight='bold', fontsize=15)\n","  ax1.axhline(tp_0, 0.2, 1, linewidth=4, linestyle='-', alpha=1, color='#ffffff')\n","  ax1.text(text_x_pos, tp_0, ' tp_0', ha='right', va='bottom', fontweight='bold', fontsize=15)  \n","\n","  # ------ out_box ------ #\n","  # text_x_pos = (x0 + x1) * 0.1\n","  ax1.axhline(out_1, 0.2, 1, linewidth=2, linestyle='-', alpha=1, color='#ffffff')\n","  ax1.text(text_x_pos, out_1, ' out_1', ha='right', va='bottom', fontweight='bold', fontsize=15)\n","  ax1.axhline(out_0, 0.2, 1, linewidth=2, linestyle='-', alpha=1, color='#ffffff')\n","  ax1.text(text_x_pos, out_0, ' out_0', ha='right', va='bottom', fontweight='bold', fontsize=15)  \n","  # ------ ep_box ------ #\n","  # text_x_pos = (x0 + x1) * 0.1\n","  ax1.axhline(ep2_0, 0.2, 1, linewidth=1, linestyle='-', alpha=1, color='#ffffff')\n","  ax1.text(text_x_pos, ep2_0, ' ep2_0', ha='right', va='bottom', fontweight='bold', fontsize=15)\n","\n","  # ------------ ax2 ------------ #\n","  # ------ band ------ #\n","  ax2.axhline(100, color=\"#ffffff\")\n","  ax2.axhline(-100, color=\"#ffffff\")\n","\n","  # ============ ylim ============ # - ax1 only\n","  if back_plot:\n","    y_lim_data = a_data[:x_max + 1, col_idx_dict['ylim_col_idxs']]  # +1 for including p1_tick\n","  else:\n","    y_lim_data = a_data[:, col_idx_dict['ylim_col_idxs']]\n","  \n","  y_min = y_lim_data.min()\n","  y_max = y_lim_data.max()\n","  y_margin = (y_max - y_min) * y_margin_mult\n","  ax1.set_ylim(y_min - y_margin, y_max + y_margin)\n","\n","  # ============ vline (p1_tick, entry_tick, exit_tick) ============ # - add p1_tick on ax2\n","  y0, y1 = ax1.get_ylim()\n","  low_data = a_data[:exit_tick + 1, col_idx_dict['ohlc_col_idxs'][2]]  # +1 for including exit_tick\n","  p2_ymax, en_ymax, ex_ymax = [(low_data[tick_] - y0) / (y1 - y0) - .01 for tick_ in [p2_tick, entry_tick, exit_tick]]  # -.05 for margin\n","  if p1_tick > 0:\n","    p1_ymax = (low_data[p1_tick] - y0) / (y1 - y0) - .01\n","    ax1.axvline(p1_tick, 0, p1_ymax, alpha=1, linewidth=2, linestyle='--', color='#ff0000')  # 추후, tick 별 세부 정의가 달라질 수 있음을 고려해 multi_line 작성 유지\n","    ax2.axvline(p1_tick, 0, 1, alpha=1, linewidth=2, linestyle='--', color='#ff0000')\n","  ax1.axvline(p2_tick, 0, p2_ymax, alpha=1, linewidth=2, linestyle='--', color='#2196f3')\n","  ax1.axvline(entry_tick, 0, en_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  ax1.axvline(exit_tick, 0, ex_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  ax2.axvline(p2_tick, 0, 1, alpha=1, linewidth=2, linestyle='--', color='#2196f3')\n","  ax2.axvline(entry_tick, 0, 1, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  ax2.axvline(exit_tick, 0, 1, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  if back_plot == 5:\n","    ax1.axvline(bias_info_tick, alpha=1, linewidth=2, linestyle='-', color='#ffeb3b')\n","\n","  return"]},{"cell_type":"markdown","metadata":{"id":"8soVNGFt1ojj"},"source":["#### legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"narSQRCz1ojj"},"outputs":[],"source":["_ = [plot_check_v4(np_df, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir, 500, 0.07, 100, **col_idx_dict) for param_zip in zip(np_plot_params, np_plot_params[::-1])]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kLiEIiMW1ojk"},"outputs":[],"source":["def plot_check_v4(data, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir=None, vp_range=500, kde_factor=0.05, num_samples=100, **col_idx_dict):\n","  # start_0 = time.time()\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(30, 18))\n","  nrows, ncols = 2, 2\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                         ncols=ncols,\n","                         height_ratios=[3, 1]\n","                         )\n","  for gs_idx, params in enumerate(param_zip):\n","    ax = fig.add_subplot(gs[gs_idx])\n","    iin, iout, pr, ep, tp, entry_idx, exit_idx, open_idx, lvrg, fee, tp_line, out_line, bias_info, bias_thresh = params\n","\n","    # ------------ add_col section ------------ #\n","    iin, iout = int(iin), int(iout)\n","    a_data = data[iin:iout]\n","    # ------ candles ------ #\n","    candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","    \n","    # ------ add cols ------ #\n","    [nonstep_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['nonstep_col_info']]\n","    [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","    [stepmark_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['stepmark_col_info']]\n","\n","    # vp_data = data[iin - vp_range:iin, col_idx_dict['vp_col_idxs']]\n","    # vp_info = [vp_range, vp_data[:, 0], vp_data[:, 1], kde_factor, num_samples]\n","    vp_data = data[iin - vp_range:iin, col_idx_dict['vp_col_idxs']].T\n","    vp_info = [vp_range, *vp_data, kde_factor, num_samples]\n","\n","    # ------ ep, tp + xlim ------ #\n","    eptp_hvline_v4(config, ep, tp, entry_idx, exit_idx, open_idx, tp_line, out_line, bias_info, bias_thresh, \n","                   front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, vp_info, **col_idx_dict)        \n","\n","    #     Todo    #\n","    #     3. outer_price plot 일 경우, gs_idx + nrows 하면 됨\n","\n","    # ------ trade_info ------ #\n","    plt.title(pr_msg.format(entry_idx, exit_idx, pr, lvrg, fee))\n","\n","  if plot_check_dir is None:\n","    plt.show()\n","    print()\n","  else:\n","    fig_name = plot_check_dir +  \"/%s.png\" % int(entry_idx)\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","  plt.close()\n","  # print(\"elapsed time :\", time.time() - start_0)  \n","\n","  return\n","\n","def eptp_hvline_v4(config, en_p, ex_p, entry_idx, exit_idx, open_idx, tp_line, out_line, bias_info, bias_thresh, \n","                   front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, vp_info, **col_idx_dict):\n","  # ------ get vertical ticks ------ #\n","  entry_tick = int(entry_idx - iin)\n","  open_tick = entry_tick - int(entry_idx - open_idx)\n","  exit_tick = entry_tick + int(exit_idx - entry_idx)\n","\n","  if front_plot == 1:\n","    x_max = open_tick\n","  elif front_plot == 2:\n","    x_max = entry_tick\n","  if (iout - iin) > x_max:\n","    x_margin = x_max * x_margin_mult\n","    plt.xlim(0 - x_margin, x_max + x_margin)\n","  x0, x1 = plt.gca().get_xlim()\n","  # ------------ hlines ------------ #\n","  # ------ entry & exit ------ #\n","  en_xmin = entry_tick / x1\n","  ex_xmin = exit_tick / x1\n","  plt.axhline(en_p, x0, en_xmin, linewidth=2, linestyle='--', alpha=1, color='lime')  # en_p line axhline\n","  plt.text(x0, en_p, ' en_p :\\n {}'.format(en_p), ha='right', va='center', fontweight='bold')  # en_p line label\n","  plt.axhline(ex_p, ex_xmin, 1, linewidth=2, linestyle='--', alpha=1, color='lime')  # ex_p line axhline (signal 도 포괄함, 존재 의미)\n","  plt.text(x1, ex_p, ' ex_p :\\n {}'.format(ex_p), ha='left', va='center', fontweight='bold')  # ex_p line label\n","\n","  # ------ tpout_line ------ #\n","  plt.axhline(tp_line, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#00ff00')  # ep 와 gap 비교 용이하기 위해 ex_xmin -> 0.1 사용\n","  plt.text(x0, tp_line, ' %s' % config.tr_set.tp_gap, ha='left', va='center', fontweight='bold')\n","  plt.axhline(out_line, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#ff0000')\n","  plt.text(x0, out_line, ' %s' % config.tr_set.out_gap, ha='left', va='center', fontweight='bold')\n","\n","  # ------ bias_line ------ #\n","  plt.axhline(bias_info, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='dodgerblue')\n","  plt.text(x0, bias_info, ' bias_info', ha='left', va='center', fontweight='bold')\n","  plt.axhline(bias_thresh, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#ff8400')\n","  plt.text(x0, bias_thresh, ' bias_thresh', ha='left', va='center', fontweight='bold')\n","\n","  # ------ volume profile ------ #\n","  vp_range, close, volume, kde_factor, num_samples = vp_info\n","  if iin >= vp_range:\n","    start_0 = time.time()\n","    kde = stats.gaussian_kde(close, weights=volume, bw_method=kde_factor)\n","    kdx = np.linspace(close.min(), close.max(), num_samples)\n","    kdy = kde(kdx)\n","    print(\"kde elapsed_time :\", time.time() - start_0)\n","\n","    kdy_max = kdy.max()\n","    # peaks,_ = signal.find_peaks(kdy)\n","    peaks,_ = signal.find_peaks(kdy, prominence=kdy_max * 0.3)\n","    peak_list = kdx[peaks]   # peak_list\n","    [plt.axhline(peak, linewidth=6, linestyle='-', alpha=1, color='white') for peak in peak_list]\n","    \n","    kdy_ratio = entry_tick / kdy_max # 30 / 0.0001\n","    plt.plot(kdy * kdy_ratio, kdx, color='white')\n","    # plt.plot(pky, pkx, 'bo', color='yellow')\n","\n","  # ------ ylim ------ #\n","  if front_plot:\n","    y_lim_data = a_data[:x_max + 1, col_idx_dict['ylim_col_idxs']]  # +1 for including open_tick\n","  else:\n","    y_lim_data = a_data[:, col_idx_dict['ylim_col_idxs']]\n","  y_min = y_lim_data.min()\n","  y_max = y_lim_data.max()\n","  y_margin = (y_max - y_min) * y_margin_mult\n","  # plt.ylim(y_min - y_margin, y_max + y_margin)\n","\n","  # ------------ vline (open_tick, entry_tick, exit_tick) ------------ #\n","  y0, y1 = plt.gca().get_ylim()\n","  l_data = a_data[:exit_tick + 1, col_idx_dict['ohlc_col_idxs'][2]]  # +1 for including exit_tick\n","  open_ymax, en_ymax, ex_ymax = [(l_data[tick_] - y0) / (y1 - y0) - .01 for tick_ in [open_tick, entry_tick, exit_tick]]  # -.05 for margin\n","  plt.axvline(open_tick, 0, open_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')  # 추후, tick 별 세부 정의가 달라질 수 있음을 고려해 multi_line 작성 유지\n","  plt.axvline(entry_tick, 0, en_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  plt.axvline(exit_tick, 0, ex_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","\n","  return"]},{"cell_type":"markdown","metadata":{"id":"ddL_BC24buq0"},"source":["### dump"]},{"cell_type":"markdown","metadata":{"id":"zgTrEWWqbwsT"},"source":["#### whole_plot thing"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"M4zn8wxibzAR"},"outputs":[],"source":["fig = go.Figure(data=[go.Candlestick(x=t_df.index,\n","                open=t_df.open,\n","                high=t_df.high,\n","                low=t_df.low,\n","                close=t_df.close)])\n","\n","fig.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4IhBjPMobzAS"},"outputs":[],"source":["cf.go_offline()\n","init_notebook_mode()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"n9WZkE9wbzAS"},"outputs":[],"source":["qf = cf.QuantFig(t_df, title=\"Apple's stock price in 2021\", name='AAPL')\n","qf.iplot()"]},{"cell_type":"markdown","metadata":{"id":"zmYbP-Gc1ojs"},"source":["#### brief np_pr survey"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"82a8Km8z1ojs"},"outputs":[],"source":["# plot_pr_list[:100]\n","plt.plot(np_pr)\n","plt.axhline(1)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"5rdQZm_71ojv"},"source":["#### plot indi. legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"u11r-dU91ojw"},"outputs":[],"source":["\n","  # ---------------------- ma ---------------------- #\n","   # --------- ema --------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(ema_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  #   # --------- sma --------- #\n","  # alpha = 1\n","  # for sm_i, sma in enumerate(sma_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 4\n","  #   plt.step(np.arange(len(plot_df)), plot_df[sma].values, alpha=alpha, color='#e91e63', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  \n","  # ---------------------- cb ---------------------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(cb_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#5b9cf6', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","\n","  \n","  # ---------------------- sar ---------------------- #\n","  # alpha = 1\n","  # markersize = 5\n","  # for sar in sar_list:\n","  #   plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","  #   markersize += 1\n","  #   alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  # alpha = 0.7\n","  # for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","  #                     where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","  #                     where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","  #   alpha -= 0.05\n","  \n","\n","\n","  # ---------------------- outer price indi. ---------------------- #\n","  #           macd          #\n","  # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","    \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for stoch_ in stoch_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[stoch_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(stoch_upper, linestyle='--')\n","  # plt.axhline(stoch_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- cctbbo ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for cctbbo in cctbbo_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cctbbo].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(cctbbo_upper, linestyle='--')\n","  # plt.axhline(cctbbo_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- ema_roc ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for emaroc in emaroc_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[emaroc].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","  \n","  # ---------- bbw ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for bbwp_ in bbwp_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[bbwp_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(bbwp_thresh, linestyle='--')\n","\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n"]},{"cell_type":"markdown","metadata":{"id":"tApzvz_gK9lR"},"source":["## legacy"]},{"cell_type":"markdown","metadata":{"id":"OJqkmkpsLCYC"},"source":["### tr_tresh calc"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gcpo4MGd9Wm4"},"outputs":[],"source":["res_wr = 0.6\n","# tr_thresh = 1\n","# tr_thresh = ((1 - res_wr) / res_wr) ** 0.5\n","tr_thresh = ((1 - res_wr) / res_wr) + 0.01\n","# tr_thresh = 2.6\n","print(\"res_wr :\", res_wr)\n","print(\"tr_thresh :\", tr_thresh)\n","\n","\n","#   단리    #\n","trade_num = 1000\n","asset = 1 # thousand USDT\n","test_loss_gap = 0.95  # fee adjusted\n","test_pr_gap = 1 + (1 - test_loss_gap) * tr_thresh\n","\n","test_loss_cnt = trade_num * (1 - res_wr)\n","test_pr_cnt = trade_num * res_wr\n","\n","test_trade_list = [test_pr_gap] * int(test_pr_cnt) + [test_loss_gap] * int(test_loss_cnt)\n","random.shuffle(test_trade_list)\n","# print(\"len(test_trade_list) :\", len(test_trade_list))\n","print(test_trade_list[:10])\n","print()\n","\n","# print(\"%.5f\" % np.cumprod(test_trade_list)[-1])\n","for tr_thresh_ in np.arange(1, 3, 0.2):\n","  if (1 + (1 - test_loss_gap) * tr_thresh_) ** test_pr_cnt * test_loss_gap ** test_loss_cnt > 1:\n","    break\n","print(\"복리를 위한 tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumprod(test_trade_list)[-1] :\", np.cumprod(test_trade_list)[-1])\n","print(\"total_pr : \", np.cumprod(test_trade_list)[-1])\n","print()\n","#   복리 tr_thresh  #\n","#   1. trade_num 에 영향 받지 않음\n","#   2. loss_gap 에 비례함\n","\n","for tr_thresh_ in np.arange(1, 3, 0.01):\n","  if ((1 - test_loss_gap) * tr_thresh_) * test_pr_cnt + (test_loss_gap - 1) * test_loss_cnt > 0:\n","    break\n","np_test_trade = np.array(test_trade_list) - 1\n","print(np_test_trade[:10])\n","# print(\"%.3f\" % )\n","print(\"단리를 위한 tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumsum(np_test_trade)[-1] :\", np.cumsum(np_test_trade)[-1])\n","print(\"total_pr : \", 1 + np.cumsum(np_test_trade)[-1])\n"]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":["Ic1mfmwWCIBu","x2yj2SwAXDLp","14chOHeXh6JD","Q_1wJTcRYpm8","02DcTVB2cYuR","xpyP5t8Ht_pE","MuD_2vY7TI_8","983aUwM76s6X","_blyFhQJUd5X"],"name":"stem5_45_vec_backi2(0621_p1p2low).ipynb","provenance":[],"toc_visible":true,"authorship_tag":"ABX9TyPVX2/AyQfNQU75G1IHDEIB"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}