{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"6rmQpzEGXfCw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648527838130,"user_tz":-540,"elapsed":3234,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"f3de7830-2fce-4d55-8c22-aea956638be3"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","import os, sys\n","\n","current_path = '/content/drive/My Drive/Colab Notebooks/JnQ/'\n","\n","os.chdir(current_path)\n","\n","strat_pkg = 'IDE'\n","\n","mpl_finance_path = '/content/drive/My Drive/Colab Notebooks/JnQ/mpl_finance'\n","zigzag_path = '/content/drive/My Drive/Colab Notebooks/JnQ/zigzag'\n","\n","if mpl_finance_path not in sys.path:\n","\n","  try:\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ')\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ/{}'.format(strat_pkg))\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ/funcs')\n","    sys.path.insert(0, mpl_finance_path)\n","    sys.path.insert(0, zigzag_path)\n","    \n","  except Exception as e:\n","    print(e)"]},{"cell_type":"markdown","metadata":{"id":"8uqYv5StTazo"},"source":["# requirements"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9qGt60DKTZmf"},"outputs":[],"source":["#!pip install zigzag --target=$'/content/drive/My Drive/Colab Notebooks/JnQ/zigzag'\n","\n","# !pip install findiff\n","# import nvstrings, nvcategory, cudf\n","# import cuml\n","# import cudf\n","\n","import os\n","from funcs.funcs_idep import *\n","from funcs.funcs_duration_v2 import *\n","from funcs.funcs_plot_check import *\n","from funcs.funcs_pairing import *\n","# from funcs.funcs_ide import *\n","# from funcs.funcs_indicator_candlescore import *\n","from funcs.funcs_indicator import *\n","from funcs.funcs_trader import *\n","from ast import literal_eval\n","import logging\n","import importlib\n","\n","import mpl_finance as mf\n","import matplotlib.pyplot as plt\n","from matplotlib import gridspec\n","from zigzag import *\n","# from tqdm.notebook import tqdm\n","\n","import IPython\n","import IPython.display\n","\n","import numpy as np\n","# import jax.numpy as np\n","import pandas as pd\n","# import seaborn as sns\n","# import tensorflow as tf\n","from scipy import stats, signal\n","\n","import pickle\n","import shutil\n","import json\n","from easydict import EasyDict\n","import copy\n","\n","import datetime\n","from datetime import datetime\n","import random\n","import time\n","# import warnings\n","\n","# warnings.simplefilter(\"ignore\", category=RuntimeWarning)\n","\n","np.seterr(invalid=\"ignore\")\n","np.set_printoptions(suppress=True)\n","np.set_printoptions(linewidth=2000) \n","\n","pd.set_option('mode.chained_assignment',  None)\n","\n","pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)"]},{"cell_type":"markdown","metadata":{"id":"Ic1mfmwWCIBu"},"source":["# makeset - with to_htf dataframes"]},{"cell_type":"markdown","metadata":{"id":"AUSBU7T8Suzi"},"source":["## sync_check_make"]},{"cell_type":"code","source":["def imb_ratio_v2(df, itv):  # watch 3 candle\n","\n","  itv_num = to_itvnum(itv)\n","  b2_itv_num = itv_num * 2\n","\n","  b1_high = df['high_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_low = df['low_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_candle_range = b1_high - b1_low\n","\n","  high = df['high_{}'.format(itv)].to_numpy()\n","  low = df['low_{}'.format(itv)].to_numpy()\n","  b2_high = df['high_{}'.format(itv)].shift(b2_itv_num).to_numpy()\n","  b2_low = df['low_{}'.format(itv)].shift(b2_itv_num).to_numpy()\n","\n","  open = df['open_{}'.format(itv)].to_numpy()\n","  close = df['close_{}'.format(itv)].to_numpy()\n","\n","  # 추후에 통계 측정해야함 -> bir 에 따른 개별 trader 의 epout / tpep 이라던가 => short 에 양봉은 취급안함 (why use np.nan)\n","  df['short_ir2_{}'.format(itv)] = np.where(close < open, (b2_low - high) / b1_candle_range, np.nan) # close < open & close < b1_low\n","  df['long_ir2_{}'.format(itv)] = np.where(close > open, (low - b2_high) / b1_candle_range, np.nan) # close > open & close > b1_high\n","\n","  return"],"metadata":{"id":"Xkb_26IAFffi"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QmhLikYlSuzi"},"outputs":[],"source":["def sync_check_make(df):\n","\n","    make_itv_list = ['3T', '5T', '15T', '30T', 'H', '4H', 'D']\n","    offset_list = ['1h', '1h', '1h', '1h', '1h', '1h', '9h']\n","\n","    assert len(make_itv_list) == len(offset_list), \"length of itv & offset_list should be equal\"\n","        \n","    htf_df_list = [to_htf(df, itv_=itv_, offset=offset_) for itv_, offset_ in zip(make_itv_list, offset_list)]\n","\n","    df_3T, df_5T, df_15T, df_30T, df_H, df_4H, df_D = htf_df_list\n","\n","    for htf_df in htf_df_list:\n","      print(\"{} -> \".format(pd.infer_freq(htf_df.index)), htf_df.tail(1))\n","\n","    # heikinashi_v2(res_df_)\n","    # h_candle_v3(res_df, '5T')\n","\n","    # --------------- cbline --------------- #    \n","    # cloud_bline(df_3T, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_3T, [-1]), how='inner')\n","    # # cloud_bline(df_5T, 20)\n","    # # df = df.join(to_lower_tf_v2(df, df_5T, [-1]), how='inner')\n","    # cloud_bline(df_15T, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_15T, [-1]), how='inner')\n","    # cloud_bline(df_30T, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_30T, [-1]), how='inner')\n","    # cloud_bline(df_H, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_H, [-1]), how='inner')\n","    # cloud_bline(df_4H, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_4H, [-1]), how='inner')\n","\n","    # print(\"cbline phase done\")\n","    # --------------- sd_dc --------------- #\n","    # df = sd_dc(df, 20, 40)\n","    # df = sd_dc(df_5T, 20, 40, df)\n","    # df = sd_dc(df_H, 20, 40, df)\n","\n","    # print(\"sd_dc phase done\")\n","\n","    # --------------- imb_ratio --------------- #\n","    # imb_ratio(df, '5T')\n","    imb_ratio_v2(df, '5T')\n","    \n","    print(\"imb_ratio phase done\")\n","\n","    # --------------- rel_abs_ratio --------------- #\n","    # rel_abs_ratio(df, '5T', norm_period=120)\n","\n","    # --------------- normalize data --------------- #\n","    # itv = 'T'\n","    # lb_period = 15\n","    # target_col = 'close_{}{}'.format(itv, lb_period)\n","    # target_data = df['close'].diff(lb_period).to_numpy()\n","    # norm_data(df, target_data, target_col)    \n","    # print(\"normalize data phase done !\")\n","\n","    # --------------- lucid sar --------------- #\n","    # lucid_sar_v2(df)\n","    # lucid_sar_v2(df_3T)\n","    # df = df.join(to_lower_tf_v2(df, df_3T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_5T)\n","    # df = df.join(to_lower_tf_v2(df, df_5T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_15T)\n","    # df = df.join(to_lower_tf_v2(df, df_15T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_30T)\n","    # df = df.join(to_lower_tf_v2(df, df_30T, [-2, -1]), how='inner')       \n","\n","    # print(\"sar phase done\")\n","\n","    # --------------- supertrend --------------- #\n","    # df = st_price_line(df, df_3T, '3m')\n","    # df = st_price_line(df, df_5T, '5m')\n","    # df = st_price_line(df, df_15T, '15m')\n","    # df = st_price_line(df, df_30T, '30m')\n","    # df = st_price_line(df, df_H, '1h')\n","    # df = st_price_line(df, df_4H, '4h')\n","\n","    # print(\"supertrend phase done\")\n","\n","    # --------------- rsi --------------- #  \n","    # df['rsi_1m'] = rsi(df, 14)    \n","    # df_5T['rsi_5m'] = rsi(df_5T, 14)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1]), columns=['rsi_5m']))\n","    \n","    # print(\"rsi phase done\")\n","\n","\n","    # --------------- cci --------------- #  \n","    # df['cci_1m'] = cci(df, 20)\n","\n","    # print(\"cci phase done\")\n","\n","    # --------------- ema --------------- #      \n","    # df_5T['ema_5m'] = ema(df_5T['close'], 195)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1]), columns=['ema_5m']))\n","    \n","    # print(\"ema phase done\")\n","    \n","    # # --------------- bband --------------- #  \n","    # df = bb_width_v2(df, period, multiple)\n","\n","    # print(\"bband phase done\")\n","\n","    \n","    # --------------- stochastic --------------- #\n","    # df['stoch_1m'] = stoch(df, 13, 3, 3)\n","\n","    # df_5T['stoch'] = stoch(df_5T, 13, 3, 3)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","    # print(\"stoch phase done\")\n","\n","\n","    return df\n"]},{"cell_type":"markdown","metadata":{"id":"mEKyVbHWSuzi"},"source":["## make & save res_df (concat 생각하면, timeindex sync 맞춰야함)"]},{"cell_type":"markdown","metadata":{"id":"VdukVo5-Suzj"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11,"status":"error","timestamp":1636201718856,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"khKb9nhlSuzj","outputId":"02bf2c60-f298-4fe9-e6bb-78230ac1348c"},"outputs":[{"ename":"NameError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-5-ee034491b257>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0ma_day\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m3600\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m24\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtqdm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m   \u001b[0mkeys\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mfile_list\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'file_list' is not defined"]}],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  if '2021-07-01'.upper() not in file_list[i]:\n","  # if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    excel_name = key.replace(\".xlsx\", \"_st1h_backi2.xlsx\")\n","    excel_path = save_path + excel_name\n","\n","    if excel_name in exist_list:\n","      print(excel_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m 마지막 timeindex 의 date 기준, 08:59:59.999000 를 last timestamp 로 설정\n","      #      2. 시작 timestamp 는 모든 tf 의 가장 최근 시작 index,\n","      #       a. 1m 의 시작 timeindex 는 최소, htf 의 시작 timeindex 보다 interval 만큼 앞서야함\n","      #         i. 따라서 1m open_index, latest_open_index + 1d 를 하면 댐\n","      #           1. timestamp 으로 변환후 1day 를 더하고 datetime 으로 변환\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","    latest_open_index = sorted(open_indexes)[-1]\n","    \n","    open_ts = datetime.timestamp(latest_open_index)\n","    latest_open_index_1m = datetime.fromtimestamp(open_ts + a_day)\n","\n","    #   str 로 만들어 접근하면 불가함  #\n","    end_index = pd.to_datetime(str(df.index[-1]).split(\" \")[0] + \" 08:59:59.999000\")\n","    # break\n","\n","    sliced_df = df.loc[latest_open_index_1m:end_index] # to_lower_tf 의 기준 ltf\n","    sliced_second_df = second_df.loc[latest_open_index:end_index]\n","    sliced_third_df = third_df.loc[latest_open_index:end_index]\n","    sliced_fourth_df = fourth_df.loc[latest_open_index:end_index]\n","    sliced_fifth_df = fifth_df.loc[latest_open_index:end_index]\n","\n","    print(\"sliced index\")\n","    print(sliced_df.index[[0, -1]])\n","    print(sliced_second_df.index[[0, -1]])\n","    print(sliced_third_df.index[[0, -1]])\n","    print(sliced_fourth_df.index[[0, -1]])\n","    print(sliced_fifth_df.index[[0, -1]])\n","\n","    try:\n","      sliced_sixth_df = sixth_df.loc[latest_open_index:end_index]\n","      sliced_seventh_df = seventh_df.loc[latest_open_index:end_index]\n","\n","      print(sliced_sixth_df.index[[0, -1]])\n","      print(sliced_seventh_df.index[[0, -1]])\n","\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df, sliced_sixth_df, sliced_seventh_df)\n","    \n","    except:\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df)\n","\n","\n","\n","    res_df.to_excel(excel_path)\n","    print(excel_name, \"saved succesfully !\")"]},{"cell_type":"markdown","metadata":{"id":"Bw5JibDKSuzj"},"source":["### xlsx to feather"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":355,"referenced_widgets":["be2b848dbcb14a079a2b7bd605af6435"]},"id":"VA-_gcA7Suzj","outputId":"f6f3b55d-ec2c-4b2c-d62e-3de7c0384dc4"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"be2b848dbcb14a079a2b7bd605af6435","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/156 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["DatetimeIndex(['2021-06-28 00:00:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:02:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:04:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:14:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:29:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-09-14 03:59:59.999000', '2021-11-15 14:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-03-10 20:59:59.999000', '2021-11-15 16:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","\n","xlsx converted to feather !\n","DatetimeIndex(['2021-06-28 00:00:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:02:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:04:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:14:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:29:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-09-14 03:59:59.999000', '2021-11-15 14:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-03-10 20:59:59.999000', '2021-11-15 16:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","\n","xlsx converted to feather !\n"]}],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  # if '2021-07-01'.upper() not in file_list[i]:\n","  if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    feather_name = key.replace(\".xlsx\", \".ftr\")\n","    # feather_path = save_path + feather_name\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m 마지막 timeindex 의 date 기준, 08:59:59.999000 를 last timestamp 로 설정\n","      #      2. 시작 timestamp 는 모든 tf 의 가장 최근 시작 index,\n","      #       a. 1m 의 시작 timeindex 는 최소, htf 의 시작 timeindex 보다 interval 만큼 앞서야함\n","      #         i. 따라서 1m open_index, latest_open_index + 1d 를 하면 댐\n","      #           1. timestamp 으로 변환후 1day 를 더하고 datetime 으로 변환\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","\n","    df.reset_index().to_feather(date_path + feather_name, compression='lz4')\n","    second_df.reset_index().to_feather(date_path2 + feather_name, compression='lz4')\n","    third_df.reset_index().to_feather(date_path3 + feather_name, compression='lz4')\n","    fourth_df.reset_index().to_feather(date_path4 + feather_name, compression='lz4')\n","    fifth_df.reset_index().to_feather(date_path5 + feather_name, compression='lz4')\n","    sixth_df.reset_index().to_feather(date_path6 + feather_name, compression='lz4')\n","    seventh_df.reset_index().to_feather(date_path7 + feather_name, compression='lz4')\n","\n","    print(\"xlsx converted to feather !\")\n","    "]},{"cell_type":"markdown","metadata":{"id":"Pe0QpnORSuzk"},"source":["### add itv_name to ftr"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":223,"referenced_widgets":["e3225655da874b8d89cc8b2a381b3fb6"]},"executionInfo":{"elapsed":43664,"status":"ok","timestamp":1638246331122,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"M-gl30KxSuzk","outputId":"1cfcb580-8d25-4bd0-fdd0-213640779ce2"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"e3225655da874b8d89cc8b2a381b3fb6","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/175 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 BTCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 BCHUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 XRPUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 EOSUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 LTCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ETCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 LINKUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 XLMUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ADAUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ETHUSDT_1m.ftr\n"]}],"source":["save_path = './candlestick_concated/res_df/'\n","\n","# dir_path = \"bbdc3m_backi2\"\n","# date = '2021-10-10'\n","date = '2021-07-01'\n","\n","db_path = './candlestick_concated/database_bn/non_cum/%s/' % date\n","os.makedirs(os.path.join(db_path), exist_ok=True)\n","\n","# exist_list = os.listdir(os.path.join(save_path, dir_path))\n","# break\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","        \n","    df = shutil.copy(date_path + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n","    second_df = shutil.copy(date_path2 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval2))\n","    third_df = shutil.copy(date_path3 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval3))\n","    fourth_df = shutil.copy(date_path4 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval4))\n","    fifth_df = shutil.copy(date_path5 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval5))\n","    sixth_df = shutil.copy(date_path6 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval6))\n","    seventh_df = shutil.copy(date_path7 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval7))\n","\n","    print(\"copied to\" + db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n"]},{"cell_type":"markdown","metadata":{"id":"4oZ1ohTtSuzk"},"source":["### feather ver. (database to res_df)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":448,"referenced_widgets":["15a8f265417c47d88bf5b1907353afa8","4f4c5fba8f1d4543a46d6dd7e658b7b3","2d4fae08e5364faf83b0bcdc8e6ece4c","0f94b5763ea344adbb20cf3517a25d2f","e5594180fccb4d2787579ee6034cd6ab","af7a8b3e0365404ea9de8bea08d1a4a6","4f9b787786494e79959bc49b6da4ff4d","06f4ecc65be347ac80deee1965545f27","f8462155d04e4c8da2e4c26f02213bb4","18817cdc20574020976bc2f2c6acc6b2","fefe35e08d734a20aa38986f42f27b13"]},"executionInfo":{"elapsed":239284,"status":"ok","timestamp":1642739615683,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"vgVHpnUsSuzk","outputId":"6224eedf-c127-4d18-f095-3a543cd3f1f8"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"15a8f265417c47d88bf5b1907353afa8","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/7 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["3T ->                          open     high      low    close\n","index                                                  \n","2022-01-10 15:18:00  3163.02  3164.29  3162.41  3164.28\n","5T ->                          open     high      low    close\n","index                                                  \n","2022-01-10 15:15:00  3160.51  3164.29  3159.01  3164.28\n","15T ->                          open     high      low    close\n","index                                                  \n","2022-01-10 15:15:00  3160.51  3164.29  3159.01  3164.28\n","30T ->                         open     high      low    close\n","index                                                 \n","2022-01-10 15:00:00  3171.7  3173.11  3156.02  3164.28\n","H ->                         open     high      low    close\n","index                                                 \n","2022-01-10 15:00:00  3171.7  3173.11  3156.02  3164.28\n","4H ->                         open     high      low    close\n","index                                                 \n","2022-01-10 13:00:00  3153.0  3179.16  3149.95  3164.28\n","D ->                          open     high      low    close\n","index                                                  \n","2022-01-10 09:00:00  3149.99  3179.16  3125.88  3164.28\n","supertrend phase done\n","./candlestick_concated/res_df/st3m_backi2/noncat/cum/2022-01-10/2022-01-10 ETHUSDT.ftr saved succesfully !\n"]}],"source":["# db_path = './candlestick_concated/database_ub/' # upbit\n","db_path = './candlestick_concated/database_bn/'   # binance\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","save_dir_path = \"bb1d_backi2\"\n","date = '2022-02-17'\n","\n","# concat_path = 'noncat' # 새로운 cols 를 기존 cum/concat 에 붙이려는 경우\n","concat_path = 'concat'\n","cum_path = \"cum\"\n","# cum_path = \"non_cum\"  # non_cum 으로 진행하는 경우, row concat 용도이기 때문에 noncat -> concat 으로 변경 (base cols 를 모두 담고 있음)\n","\n","load_path = os.path.join(db_path, cum_path, date)\n","save_path = os.path.join(save_path, save_dir_path, concat_path, cum_path, date)\n","\n","os.makedirs(save_path, exist_ok=True)\n","\n","file_list = os.listdir(load_path)\n","exist_list = os.listdir(save_path)\n","# break\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","\n","    if \"_1m\" not in key:\n","      continue\n","\n","    # feather_name = key.replace(\".ftr\", \"_%.ftr\" % save_dir_path)\n","    feather_name = key.replace(\"_1m\", \"\")\n","    feather_path = os.path.join(save_path, feather_name)\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    df = pd.read_feather(os.path.join(load_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","    res_df = sync_check_make(df)\n","\n","    res_df.reset_index().to_feather(feather_path, compression='lz4')\n","    print(feather_path, \"saved succesfully !\")"]},{"cell_type":"markdown","source":["#### just add col to loaded df"],"metadata":{"id":"YxCPUzoyidwH"}},{"cell_type":"code","source":["res_df_ = sync_check_make(res_df_)"],"metadata":{"id":"odqVwQHpYo1M","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648517892817,"user_tz":-540,"elapsed":3624,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"72ed4b55-b943-4257-f1f2-8aca1b984be1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["3T ->                          open     high      low    close\n","index                                                  \n","2022-02-17 10:27:00  3148.85  3150.08  3146.38  3146.76\n","5T ->                          open     high      low    close\n","index                                                  \n","2022-02-17 10:25:00  3146.85  3150.08  3145.44  3146.76\n","15T ->                          open    high      low    close\n","index                                                 \n","2022-02-17 10:15:00  3143.99  3151.0  3139.14  3146.76\n","30T ->                         open     high      low    close\n","index                                                 \n","2022-02-17 10:00:00  3148.8  3158.68  3139.14  3146.76\n","H ->                         open     high      low    close\n","index                                                 \n","2022-02-17 10:00:00  3148.8  3158.68  3139.14  3146.76\n","4H ->                         open     high     low    close\n","index                                                \n","2022-02-17 09:00:00  3121.8  3158.68  3120.0  3146.76\n","D ->                         open     high     low    close\n","index                                                \n","2022-02-17 09:00:00  3121.8  3158.68  3120.0  3146.76\n","imb_ratio phase done\n"]}]},{"cell_type":"code","source":["res_df_.tail().iloc[:, -10:]"],"metadata":{"id":"3SKglsQCj5_x"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# ------------ save current res_df ------------ #\n","ftr_full_path = os.path.join(ftr_path, key)\n","res_df_.reset_index().to_feather(ftr_full_path, compression='lz4')  # key 잘 확인하고 저장\n","print(ftr_full_path, 'saved !')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XrgJPQRuisCa","executionInfo":{"status":"ok","timestamp":1648518115352,"user_tz":-540,"elapsed":3060,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"4d2f622d-94c5-41c7-bda2-899d2e425f15"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["./candlestick_concated/res_df/bb1d_backi2/concat/cum/2022-02-17/2022-02-17 ETHUSDT.ftr saved !\n"]}]},{"cell_type":"markdown","metadata":{"id":"E0n53hflJbnp"},"source":["### htf candle check"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":489,"status":"ok","timestamp":1642148504926,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"6xW0yugCWvGz","outputId":"58106ff9-9709-4a62-bca2-1f6795d13322"},"outputs":[{"name":"stdout","output_type":"stream","text":["itv_ : 3T\n","                        open     high      low    close\n","index                                                  \n","2022-01-10 15:06:00  3169.97  3170.22  3159.51  3161.22\n","2022-01-10 15:09:00  3161.22  3163.98  3161.22  3163.82\n","2022-01-10 15:12:00  3163.82  3163.83  3156.02  3160.49\n","2022-01-10 15:15:00  3160.51  3164.29  3159.01  3162.93\n","2022-01-10 15:18:00  3163.02  3164.29  3162.41  3164.28\n","                            open     high      low    close    volume\n","index                                                                \n","2022-01-10 15:08:59.999  3169.97  3170.22  3159.51  3161.22  4241.449\n","2022-01-10 15:11:59.999  3161.22  3163.98  3161.22  3163.82  1143.874\n","2022-01-10 15:14:59.999  3163.82  3163.83  3156.02  3160.49  2135.292\n","2022-01-10 15:17:59.999  3160.51  3164.29  3159.01  3162.93  1011.598\n","2022-01-10 15:20:59.999  3163.02  3164.29  3162.41  3163.82   466.868\n"]}],"source":["itv_list = ['3T', '5T', '15T', '30T', '1H', '4H']\n","comp_df_list = [second_df, third_df, fourth_df, fifth_df, sixth_df, seventh_df]\n","offset_list = ['1h', '2min', '2min', '2min', '2min', '2min']\n","# itv_list = ['4H']\n","# comp_df_list = [seventh_df]\n","\n","slice_len = 100\n","for itv_, comp_df_, offset in zip(itv_list, comp_df_list, offset_list):\n","\n","  print(\"itv_ :\", itv_)\n","\n","  # df = h_candle_v2(df, '3T')\n","  # end_ts = \n","  h_res_df = df.resample(itv_, offset=offset).agg({\n","          'open': 'first',\n","          'high': 'max',\n","          'low': 'min',\n","          'close': 'last'\n","      })\n","\n","  #   앞은 길이가 다르고, 뒤에서부터 잘라서 비교    #\n","  #   last_row 빼고는 동일, 4h 제외\n","  # print(df.tail())\n","  print(h_res_df.tail())\n","  print(comp_df_.tail())\n","  # # print(h_res_df.head())\n","  # # print(second_df.head())\n","\n","  # print(len(h_res_df))\n","  # print(len(second_df))\n","\n","  # print(h_res_df.values[-slice_len:])\n","  # print(second_df.iloc[:, :4].values[-slice_len:])\n","  # print(np.argwhere(h_res_df.values[-slice_len:] != comp_df_.iloc[:, :4].values[-slice_len:]))\n","  # print()\n","  break"]},{"cell_type":"markdown","metadata":{"id":"jTN3M842Suzl"},"source":["## concat & save new res_df"]},{"cell_type":"markdown","metadata":{"id":"MlFkpO1MSuzl"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"U-3QkfbFSuzl"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","dict_name = \"2021-07-01 ETHUSDT_bb15m_backi2_res_dfs.pkl\"\n","\n","#     load with pickle    #\n","with open(save_path + dict_name, 'rb') as f:\n","  saved_res_df_dict = pickle.load(f)\n","\n","print(dict_name, \"loaded !\")\n","res_df_files = os.listdir(save_path)\n","res_df_files.reverse()\n","\n","print(res_df_files)\n","\n","res_df_dict = {}\n","\n","base_postfix = '_bb15m_backi2.xlsx'\n","new_postfix = '_st1h_backi2.xlsx'\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for k_i, key in enumerate(res_df_files):\n","\n","  if '2021-07-01'.upper() not in key:\n","  # if '2021-10-10'.upper() not in key:\n","    continue\n","\n","  # if \"link\".upper() not in key:\n","  # if \"btc\".upper() not in key:\n","  #   continue\n","\n","  if new_postfix not in key:\n","    continue\n","\n","  # if key in \n","\n","  if sample_cnt == max_cnt:\n","    dict_name = \"%s_res_dfs.pkl\" % key.split(\".\")[0]\n","    print(\"dict_name :\", dict_name)\n","\n","  base_df = saved_res_df_dict[key.replace(new_postfix, base_postfix)]\n","  # base_df = pd.read_excel(save_path + key.replace(new_postfix, base_postfix), index_col=0)  \n","  res_df = pd.read_excel(save_path + key, index_col=0)  \n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  droped_new_res_df.head()\n","  # break\n","\n","  # res_df_dict[key] = res_df\n","  res_df_dict[key] = droped_new_res_df\n","  print(key, \"saved to dict !\")\n","\n","  #     save with pickle    #\n","  with open(save_path + dict_name, 'wb') as f:\n","    pickle.dump(res_df_dict, f)\n","\n","  sample_cnt -= 1\n","\n","  if sample_cnt <= 0:\n","    break\n"]},{"cell_type":"markdown","metadata":{"id":"t1E_eAyPSuzm"},"source":["### new col to latest feather (1m_indi. only)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xyI5NrM7Suzm"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","cum_dir = \"cum\"\n","\n","new_dir_path = \"rsi_backi2\"\n","base_dir_path = \"bbdc3m_backi2\"\n","\n","new_date = '2021-11-17'\n","\n","\n","\n","#     load ftr list    #\n","base_save_path = os.path.join(save_path, base_dir_path, \"concat/cum\", new_date)\n","new_save_path = base_save_path.replace(base_dir_path, new_dir_path)\n","\n","#     save to (new) cum dir    #\n","#      1. if dir. not exists, makedir\n","os.makedirs(new_save_path, exist_ok=True)\n","\n","ftr_list = [s for s in os.listdir(base_save_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_save_path, key), columns=None, use_threads=True).set_index(\"index\")\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  droped_new_res_df = sync_check(base_df)\n","\n","  # new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # # new_res_df.head()\n","\n","  # intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  # droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break\n","\n","  droped_new_res_df.reset_index().to_feather(os.path.join(new_save_path, key), compression='lz4')\n","\n","  print(os.path.join(new_save_path, key), \"saved !\")\n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"markdown","metadata":{"id":"nUs4fjVHSuzl"},"source":["### feather ver. (col concat)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2001,"status":"ok","timestamp":1642739652513,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"6cu-Y82iSuzl","outputId":"273507b8-0d33-48b5-d9c5-00547688ef73"},"outputs":[{"name":"stdout","output_type":"stream","text":["['2022-01-10 ETHUSDT.ftr']\n","./candlestick_concated/res_df/st3m_backi2/concat/cum/2022-01-10/2022-01-10 ETHUSDT.ftr saved !\n"]}],"source":["new_dir_path = \"st3m_backi2\"\n","base_dir_path = \"bb1d_backi2\"\n","\n","# new_date = \"2021-11-17\"\n","new_date = \"2022-01-10\"\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","save_path = './candlestick_concated/res_df/'\n","save_path = os.path.join(save_path, new_dir_path, \"concat/cum\", new_date)   \n","# save_path = os.path.join(save_path, new_dir_path, \"concat/non_cum\", new_date)   # row col 하려면 concat 맞음, noncum 사용\n","os.makedirs(save_path, exist_ok=True)\n","\n","\n","#     load ftr list    #\n","# ftr_list = [s for s in os.listdir(os.path.join(save_path, new_dir_path)) if \"ftr\" in s]\n","\n","noncat_path = save_path.replace(\"concat/\", \"noncat/\")\n","ftr_list = [s for s in os.listdir(noncat_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","  try:\n","\n","    #       read from base postfix's directory    #\n","    base_df = pd.read_feather(os.path.join(save_path.replace(new_dir_path, base_dir_path), key), columns=None, use_threads=True).set_index(\"index\")\n","    res_df = pd.read_feather(os.path.join(noncat_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","    # print(base_df.head())\n","    # print(res_df.head())\n","    # break\n","\n","    new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","    # new_res_df.head()\n","\n","    droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","    # droped_new_res_df.head()\n","    # break\n","\n","    droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","    # res_df_dict[key] = res_df\n","    # res_df_dict[key] = droped_new_res_df\n","    print(os.path.join(save_path, key), \"saved !\")\n","  \n","  except Exception as e:\n","    print(\"error occured ! :\", e)\n","  \n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"markdown","metadata":{"id":"WVAKq3i8Suzm"},"source":["### feather ver. (row concat) , database cum 도 호환가능"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7893,"status":"ok","timestamp":1645188189702,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"XG2p9OhhSuzm","outputId":"e67874ba-0710-4f38-966f-5ea7d42403cb"},"outputs":[{"output_type":"stream","name":"stdout","text":["['2022-02-17 ETHUSDT_1m.ftr']\n","                            open     high     low    close  volume\n","index                                                             \n","2019-11-27 16:45:59.999   146.00   146.00   146.0   146.00   0.010\n","2022-02-17 10:29:59.999  3146.86  3147.22  3146.4  3146.76  26.727\n","continuity checked !\n","./candlestick_concated/database_bn/cum/2022-02-17/2022-02-17 ETHUSDT_1m.ftr saved !\n"]}],"source":["save_path = './candlestick_concated/res_df/'        # cols 추가된 cum db 에 new_row's cols 기준으로 합치는 경우\n","save_path = './candlestick_concated/database_bn/'   # ohlcv cum db 만들 경우\n","\n","base_date = '2022-01-10'\n","new_date = '2022-02-17'\n","\n","#     load ftr list    #\n","if \"database\" in save_path:\n","  base_dir_path = \"\"\n","  new_dir_path = \"\"\n","  concat_dir = \"\"\n","else:\n","  base_dir_path = \"sar_backi2\"\n","  new_dir_path = \"bb4h_backi2\"  # dir_path 가 base / new 서로 달라질 수 있어서 분할함\n","  concat_dir = \"concat\"\n","\n","base_date_path = os.path.join(save_path, base_dir_path, concat_dir, \"cum\", base_date)      # 기존 cum db 와 new_date db 를 cum 진행\n","# base_date_path = os.path.join(save_path, base_dir_path, concat_dir, \"non_cum\", base_date)    # non_cum db 와 new_date db 를 cum 진행\n","\n","# new_date_path = os.path.join(save_path, new_dir_path, concat_dir, \"cum\", new_date)      # 상황별로 직접 선택해야할 듯\n","new_date_path = os.path.join(save_path, new_dir_path, concat_dir, \"non_cum\", new_date)\n","\n","\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","save_path = new_date_path.replace(\"non_cum\", \"cum\")   # non_cum 아니여도 무관\n","os.makedirs(save_path, exist_ok=True)   # noncat / concat 두가지 경우 존재가능할 것\n","# os.makedirs(os.path.join(save_path, dir_path, \"noncat/cum\", new_date), exist_ok=True)\n","\n","\n","ftr_list = [s for s in os.listdir(new_date_path) if \"ftr\" in s]\n","exist_list = os.listdir(save_path)\n","print(ftr_list)\n","# break\n","\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:   # date rejection\n","    continue\n","  if '1m' not in key:  # itv rejection\n","    continue\n","\n","  # if key in exist_list:\n","  #   print(key, \"already exist !\")\n","  #   continue\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_date_path, key.replace(new_date, base_date)), columns=None, use_threads=True).set_index(\"index\")   # key 에 new_date 담겨있음\n","  res_df = pd.read_feather(os.path.join(new_date_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break  \n","  \n","  print(droped_new_res_df.iloc[[0, -1]])  \n","\n","  # ------------- verify df continuity directly itv by itv ------------- #\n","  true_continue = True\n","  if \"_\" in key:\n","\n","    interval = key.split(\".\")[0].split(\"_\")[-1] \n","    itv_num = to_itvnum(interval)\n","\n","    # verified_df = consecutive_df(droped_new_res_df, to_itvnum(interval))\n","    # verified_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","    # res_df_dict[key] = res_df\n","    # res_df_dict[key] = droped_new_res_df  \n","\n","    np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","    ideal_ts_gap = 60 * itv_num\n","\n","    for ts_i in range(len(np_idx_ts)):\n","      \n","      if ts_i != 0:\n","        ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","\n","        if ts_gap > ideal_ts_gap or ts_gap < ideal_ts_gap:\n","        # if ts_gap == ideal_ts_gap:\n","          print(droped_new_res_df.index[ts_i - 1])\n","          print(droped_new_res_df.index[ts_i])\n","          # print(ts_gap)\n","          print(\"------------------ unideal ts_gap ------------------\")\n","          true_continue = False\n","\n","    print(\"continuity checked !\")\n","\n","  if true_continue:\n","    droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","  print(os.path.join(save_path, key), \"saved !\")\n","  \n"]},{"cell_type":"markdown","metadata":{"id":"L7l5CTJfSuzn"},"source":["### check continuity"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nGzMGyC3Suzn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1643987442996,"user_tz":-540,"elapsed":5408,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"4fface63-62d9-4e2a-e22d-bdd26f428e0e"},"outputs":[{"output_type":"stream","name":"stdout","text":["                             open    high       low     close   volume\n","index                                                                 \n","2020-09-14 16:00:59.999    3.2002    4.91    3.2002    3.2745  11567.0\n","2022-02-04 23:57:59.999  103.7500  103.75  103.6000  103.6000   6427.0\n","[1.60009926e+09 1.60009932e+09 1.60009938e+09 1.60009944e+09\n"," 1.60009950e+09 1.60009956e+09 1.60009962e+09 1.60009968e+09\n"," 1.60009974e+09 1.60009980e+09]\n"]}],"source":["# print(droped_new_res_df.columns)\n","\n","print(droped_new_res_df.iloc[[0, -1]])\n","\n","np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","\n","print(np_idx_ts[:10])\n","for ts_i in range(len(np_idx_ts)):\n","  \n","  if ts_i != 0:\n","    ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","\n","    if ts_gap > 60 or ts_gap < 60:\n","\n","      print(\"invalid ts_gap found !\")\n","    # if ts_gap == 60:\n","      print(droped_new_res_df.index[ts_i - 1])\n","      print(droped_new_res_df.index[ts_i])\n","      # print(ts_gap)\n","      print()\n"]},{"cell_type":"markdown","metadata":{"id":"x_XGJqBi8Jex"},"source":["### check length of front missing value + middle_data non_missing validity"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":311,"status":"ok","timestamp":1641887318959,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"yRNwqVeAu8X8","outputId":"fb236bde-4527-4bc7-eac4-4bee42532c5a"},"outputs":[{"name":"stdout","output_type":"stream","text":["2.167361111111111\n","38\n"]}],"source":["#       1. new_date 의 시작 timeidx 와 base_date end timeidx 의 최소 days' gap     #\n","#       2. new_date 의 시작 부분 indi. value 는 np.nan 으로 채워질 거기 때문에 계산해야함    #\n","\n","df_count = droped_new_res_df.count()\n","len_missing = df_count.max() - df_count.min()\n","print(len_missing / 1440)\n","\n","#       3. \n","missing_sliced_df = droped_new_res_df.iloc[len_missing:]\n","df_count2 = missing_sliced_df.count()\n","# print(df_count2)\n","print((df_count2.max() - df_count2.min()))    # this value should be zero !\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"AY7E2_hTBsyM"},"outputs":[],"source":["# df_count2.index[df_count2.argmin()]\n","# missing_sliced_df.head(5)\n","\n","stay_missed = np.sum(pd.isnull(missing_sliced_df), axis=0)\n","print(stay_missed)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"p9yqewOw9g33"},"outputs":[],"source":["stay_missed_cols = stay_missed[stay_missed != 0].index\n","\n","for sm_col in stay_missed_cols:\n","  \n","  row_idx = np.argwhere(pd.isnull(missing_sliced_df[sm_col].values))\n","\n","  plt.figure(figsize=(3,3))\n","  plt.plot(row_idx)\n","  plt.ylim(0, len(missing_sliced_df))\n","  plt.title(sm_col)\n","\n","  plt.show()\n"]},{"cell_type":"markdown","source":["## legacy"],"metadata":{"id":"MSUY4nnku3s9"}},{"cell_type":"markdown","source":["### mv files"],"metadata":{"id":"epgS5Dksu-HX"}},{"cell_type":"code","source":["df_path = './candlestick_concated/survey_df_v2'\n","files_ = os.listdir(df_path)"],"metadata":{"id":"aJcVpEdrslA5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dirs = [file_ for file_ in files_ if not file_.endswith('.ftr')]\n","files = [file_ for file_ in files_ if file_.endswith('.ftr')]"],"metadata":{"id":"cEKyEYkotFDy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dirs"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IgM79tcxtPVZ","executionInfo":{"status":"ok","timestamp":1644111921194,"user_tz":-540,"elapsed":4,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"84305b35-eb52-49fc-d5fd-fdbc64cc8679"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['2022-01-10 ETHUSDT', '2022-01-10 ETHUSDT_all', '2022-02-04 SOLUSDT']"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["def move_fn(dir_, file_):\n","  src_path = os.path.join(df_path, file_)\n","  dst_path = os.path.join(df_path, dir_, file_)\n","  shutil.move(src_path, dst_path)\n","  print(\"moved to {}\".format(dst_path))\n","\n","_ = [move_fn('2022-01-10 ETHUSDT_all', file_) for file_ in files if 'eth'.upper() in file_]\n","# sols\n"],"metadata":{"id":"M767iRtwtRQP"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Ci_jUnNTZbm9"},"source":["### load data (old)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":22503,"status":"ok","timestamp":1638246127510,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"_bXyS2yrZYC6","outputId":"b24a8a66-48b1-42b5-aa79-63f5a8542bac"},"outputs":[{"name":"stdout","output_type":"stream","text":["['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr']\n","['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 LTCUSDT.ftr']\n","['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 ETHUSDT.ftr']\n","['2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr']\n","['2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-08-31 SUSHIUSDT.xlsx', '2021-08-31 CVCUSDT.xlsx', '2021-08-31 BTSUSDT.xlsx', '2021-08-31 HOTUSDT.xlsx', '2021-08-31 ZRXUSDT.xlsx', '2021-08-31 QTUMUSDT.xlsx', '2021-08-31 IOTAUSDT.xlsx', '2021-08-31 BTCBUSD.xlsx', '2021-08-31 WAVESUSDT.xlsx', '2021-08-31 ADAUSDT.xlsx', '2021-08-31 LITUSDT.xlsx', '2021-08-31 XTZUSDT.xlsx', '2021-08-31 BNBUSDT.xlsx', '2021-08-31 AKROUSDT.xlsx', '2021-08-31 HNTUSDT.xlsx', '2021-08-31 ETCUSDT.xlsx', '2021-08-31 XMRUSDT.xlsx', '2021-08-31 YFIUSDT.xlsx', '2021-08-31 ETHUSDT.xlsx', '2021-08-31 ALICEUSDT.xlsx', '2021-08-31 ALPHAUSDT.xlsx', '2021-08-31 SFPUSDT.xlsx', '2021-08-31 REEFUSDT.xlsx', '2021-08-31 BATUSDT.xlsx', '2021-08-31 DOGEUSDT.xlsx', '2021-08-31 TRXUSDT.xlsx', '2021-08-31 RLCUSDT.xlsx', '2021-08-31 BTCSTUSDT.xlsx', '2021-08-31 STORJUSDT.xlsx', '2021-08-31 SNXUSDT.xlsx', '2021-08-31 XLMUSDT.xlsx', '2021-08-31 NEOUSDT.xlsx', '2021-08-31 UNFIUSDT.xlsx', '2021-08-31 SANDUSDT.xlsx', '2021-08-31 DASHUSDT.xlsx', '2021-08-31 KAVAUSDT.xlsx', '2021-08-31 RUNEUSDT.xlsx', '2021-08-31 CTKUSDT.xlsx', '2021-08-31 LINKUSDT.xlsx', '2021-08-31 CELRUSDT.xlsx', '2021-08-31 RSRUSDT.xlsx', '2021-08-31 DGBUSDT.xlsx', '2021-08-31 SKLUSDT.xlsx', '2021-08-31 RENUSDT.xlsx', '2021-08-31 TOMOUSDT.xlsx', '2021-08-31 MTLUSDT.xlsx', '2021-08-31 LTCUSDT.xlsx', '2021-08-31 DODOUSDT.xlsx', '2021-08-31 EGLDUSDT.xlsx', '2021-08-31 KSMUSDT.xlsx', '2021-08-31 ONTUSDT.xlsx', '2021-08-31 VETUSDT.xlsx', '2021-08-31 TRBUSDT.xlsx', '2021-08-31 MANAUSDT.xlsx', '2021-08-31 COTIUSDT.xlsx', '2021-08-31 CHRUSDT.xlsx', '2021-08-31 ETHUSDT_210924.xlsx', '2021-08-31 BAKEUSDT.xlsx', '2021-08-31 GRTUSDT.xlsx', '2021-08-31 FLMUSDT.xlsx', '2021-08-31 EOSUSDT.xlsx', '2021-08-31 OGNUSDT.xlsx', '2021-08-31 SCUSDT.xlsx', '2021-08-31 BALUSDT.xlsx', '2021-08-31 STMXUSDT.xlsx', '2021-08-31 BTTUSDT.xlsx', '2021-08-31 LUNAUSDT.xlsx', '2021-08-31 DENTUSDT.xlsx', '2021-08-31 KNCUSDT.xlsx', '2021-08-31 SRMUSDT.xlsx', '2021-08-31 ENJUSDT.xlsx', '2021-08-31 ZENUSDT.xlsx', '2021-08-31 ATOMUSDT.xlsx', '2021-08-31 NEARUSDT.xlsx', '2021-08-31 BCHUSDT.xlsx', '2021-08-31 IOSTUSDT.xlsx', '2021-08-31 HBARUSDT.xlsx', '2021-08-31 ZECUSDT.xlsx', '2021-08-31 1000SHIBUSDT.xlsx', '2021-08-31 TLMUSDT.xlsx', '2021-08-31 BZRXUSDT.xlsx', '2021-08-31 ETHBUSD.xlsx', '2021-08-31 AAVEUSDT.xlsx', '2021-08-31 GTCUSDT.xlsx', '2021-08-31 ALGOUSDT.xlsx', '2021-08-31 ICPUSDT.xlsx', '2021-08-31 BTCUSDT_210924.xlsx', '2021-08-31 LRCUSDT.xlsx', '2021-08-31 AVAXUSDT.xlsx', '2021-08-31 MATICUSDT.xlsx', '2021-08-31 1INCHUSDT.xlsx', '2021-08-31 MKRUSDT.xlsx', '2021-08-31 THETAUSDT.xlsx', '2021-08-31 UNIUSDT.xlsx', '2021-08-31 LINAUSDT.xlsx', '2021-08-31 RVNUSDT.xlsx', '2021-08-31 FILUSDT.xlsx', '2021-08-31 NKNUSDT.xlsx', '2021-08-31 DEFIUSDT.xlsx', '2021-08-31 COMPUSDT.xlsx', '2021-08-31 BTCDOMUSDT.xlsx', '2021-08-31 SOLUSDT.xlsx', '2021-08-31 BTCUSDT.xlsx', '2021-08-31 OMGUSDT.xlsx', '2021-08-31 ICXUSDT.xlsx', '2021-08-31 BLZUSDT.xlsx', '2021-08-31 FTMUSDT.xlsx', '2021-08-31 YFIIUSDT.xlsx', '2021-08-31 KEEPUSDT.xlsx', '2021-08-31 BANDUSDT.xlsx', '2021-08-31 XRPUSDT.xlsx', '2021-08-31 SXPUSDT.xlsx', '2021-08-31 CRVUSDT.xlsx', '2021-08-31 BELUSDT.xlsx', '2021-08-31 DOTUSDT.xlsx', '2021-08-31 XEMUSDT.xlsx', '2021-08-31 ONEUSDT.xlsx', '2021-08-31 ZILUSDT.xlsx', '2021-08-31 AXSUSDT.xlsx', '2021-08-31 OCEANUSDT.xlsx', '2021-08-31 CHZUSDT.xlsx', '2021-08-31 ANKRUSDT.xlsx', '2021-08-31 SUSHIUSDT_res_dfs.pkl', '2021-07-01 ADAUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr']\n","['2021-07-01 BTCUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr']\n","['2021-02-07 BTC.xlsx', '2021-02-07 ETH.xlsx', '2021-02-11 BCHUSDT.xlsx', '2021-02-11 XRPUSDT.xlsx', '2021-02-11 EOSUSDT.xlsx', '2021-02-11 LTCUSDT.xlsx', '2021-02-11 ETCUSDT.xlsx', '2021-02-11 LINKUSDT.xlsx', '2021-02-11 XLMUSDT.xlsx', '2021-02-11 ADAUSDT.xlsx', '2021-02-11 XMRUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr']\n","['2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx']\n"]}],"source":["interval = '1m'\n","date_path = './candlestick_concated/%s/quant_v2/' % interval\n","file_list = os.listdir(date_path)\n","print((file_list))\n","\n","interval2 = '3m'\n","date_path2 = './candlestick_concated/%s/quant_v2/' % interval2\n","file_list2 = os.listdir(date_path2)\n","print((file_list2))\n","\n","interval3 = '5m'\n","date_path3 = './candlestick_concated/%s/quant_v2/' % interval3\n","file_list3 = os.listdir(date_path3)\n","print((file_list3))\n","\n","interval4 = '15m'\n","date_path4 = './candlestick_concated/%s/quant_v2/' % interval4\n","file_list4 = os.listdir(date_path4)\n","print((file_list4))\n","\n","interval5 = '30m'\n","date_path5 = './candlestick_concated/%s/quant_v2/' % interval5\n","file_list5 = os.listdir(date_path5)\n","print((file_list5))\n","\n","interval6 = '1h'\n","date_path6 = './candlestick_concated/%s/quant_v2/' % interval6\n","file_list6 = os.listdir(date_path6)\n","print((file_list6))\n","\n","interval7 = '4h'\n","date_path7 = './candlestick_concated/%s/quant_v2/' % interval7\n","file_list7 = os.listdir(date_path7)\n","print((file_list7))\n","\n","interval8 = '1d'\n","date_path8 = './candlestick_concated/%s/quant_v2/' % interval8\n","file_list8 = os.listdir(date_path8)\n","print((file_list8))"]},{"cell_type":"markdown","metadata":{"id":"M8-EChy0VsDr"},"source":["## cudf"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":414,"status":"ok","timestamp":1638754008241,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"b09qAb1sVtRP","outputId":"3a824202-064a-4544-b791-ffc777bb3f9c"},"outputs":[{"name":"stdout","output_type":"stream","text":["usage: conda [-h] [-V] command ...\n","conda: error: unrecognized arguments: -t=/content/notebooks\n"]}],"source":["# !conda install -c rapidsai-nightly -c nvidia -c numba -c conda-forge \\\n","#     cudf python=3.7 cudatoolkit=11.1 -t=$nb_path"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":413,"status":"ok","timestamp":1638754715310,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"Jnz6i7ZqRnb0","outputId":"207bc57b-a17a-4f67-fb26-24e46e2c6e26"},"outputs":[{"name":"stdout","output_type":"stream","text":["***********************************************************************\n","Woo! Your instance has the right kind of GPU, a Tesla P100-PCIE-16GB!\n","***********************************************************************\n","\n"]}],"source":["# !git clone https://github.com/rapidsai/rapidsai-csp-utils.git\n","!python rapidsai-csp-utils/colab/env-check.py"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4sKA_9Dbg4s2"},"outputs":[],"source":["# This will update the Colab environment and restart the kernel.  Don't run the next cell until you see the session crash.\n","!bash rapidsai-csp-utils/colab/update_gcc.sh\n","import os\n","os._exit(00)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"d1C4pNiBhYHX"},"outputs":[],"source":["# This will install CondaColab.  This will restart your kernel one last time.  Run this cell by itself and only run the next cell once you see the session crash.\n","import condacolab\n","condacolab.install()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":414,"status":"ok","timestamp":1638754863073,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"iGx3ACTvZqck","outputId":"e8379cc4-c325-4fe0-ac46-5fbbd7d38829"},"outputs":[{"name":"stdout","output_type":"stream","text":["✨🍰✨ Everything looks OK!\n"]}],"source":["# you can now run the rest of the cells as normal\n","import condacolab\n","condacolab.check()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oR8s7U8c7C28","outputId":"22be2731-fae1-45fc-f310-e48f60774bb2"},"outputs":[{"name":"stdout","output_type":"stream","text":["Installing RAPIDS Stable 21.10\n","Starting the RAPIDS install on Colab.  This will take about 15 minutes.\n","Collecting package metadata (current_repodata.json): ...working... done\n","Solving environment: ...working... WARNING conda.core.solve:_add_specs(611): pinned spec cudatoolkit=11.1 conflicts with explicit specs.  Overriding pinned spec.\n","failed with initial frozen solve. Retrying with flexible solve.\n","Solving environment: ...working... WARNING conda.core.solve:_add_specs(611): pinned spec cudatoolkit=11.1 conflicts with explicit specs.  Overriding pinned spec.\n","failed with repodata from current_repodata.json, will retry with next repodata source.\n","Collecting package metadata (repodata.json): ...working... done\n"]}],"source":["# Installing RAPIDS is now 'python rapidsai-csp-utils/colab/install_rapids.py <release> <packages>'\n","# The <release> options are 'stable' and 'nightly'.  Leaving it blank or adding any other words will default to stable.\n","# The <packages> option are default blank or 'core'.  By default, we install RAPIDSAI and BlazingSQL.  The 'core' option will install only RAPIDSAI and not include BlazingSQL, \n","!python rapidsai-csp-utils/colab/install_rapids.py stable\n","import os\n","os.environ['NUMBAPRO_NVVM'] = '/usr/local/cuda/nvvm/lib64/libnvvm.so'\n","os.environ['NUMBAPRO_LIBDEVICE'] = '/usr/local/cuda/nvvm/libdevice/'\n","os.environ['CONDA_PREFIX'] = '/usr/local'"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kWsxi4ZpKtGt"},"outputs":[],"source":["import shutil\n","import sys\n","\n","colab_env = \"/usr/lib\"\n","\n","rapids_path = os.path.join(current_path, \"rapidsai-csp-utils/lib\")\n","rapids_libs = os.listdir(rapids_path)\n","print(rapids_libs)\n","# break\n","\n","for lib_ in rapids_libs:\n","  try:\n","    shutil.copy(os.path.join(rapids_path, lib_), os.path.join(colab_env, lib_))\n","    sys.path.append(os.path.join(colab_env, lib_))\n","    print(\"copied to\" + os.path.join(colab_env, lib_))\n","  except Exception as e:\n","    print(e)"]},{"cell_type":"markdown","metadata":{"id":"Iy76iO7gztne"},"source":["## move legacy files"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hMRht32Czwry"},"outputs":[],"source":["# print()\n","cur_dir_list = os.listdir('.')\n","for f in cur_dir_list:\n","  if 'legacy' in f :\n","    # print(f)\n","    if os.path.isdir(current_path + f,):\n","      continue\n","\n","    shutil.move(current_path + f, current_path + 'legacy/' + f)\n","    print(\"moved to\" + current_path + 'legacy/' +  f)"]},{"cell_type":"markdown","metadata":{"id":"5duWn8t4BRyv"},"source":["# IDE platform\n"]},{"cell_type":"markdown","metadata":{"id":"6HOjnZjSgzk1"},"source":["## load ftr_list"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1854,"status":"ok","timestamp":1648527864938,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"7FPBG5Qqg2jB","outputId":"f2ee99a4-18b0-48b4-c03a-ea354315f287"},"outputs":[{"output_type":"stream","name":"stdout","text":["['2022-02-17 ETHUSDT.ftr']\n","2022-02-17 ETHUSDT.ftr loaded !\n","load res_df_ elapsed time : 1.5011954307556152\n"]}],"source":["save_path = './candlestick_concated/res_df/'\n","\n","dir_path = \"bb4h_backi2\"\n","dir_path = \"bb1d_backi2\"\n","date = \"2022-01-10\"\n","date = \"2022-02-17\"\n","\n","ftr_path = os.path.join(save_path, dir_path, \"concat/cum\", date)\n","\n","# ------ load ftr list ------ #\n","ftr_list = [s for s in os.listdir(ftr_path) if \"ftr\" in s if date in s]\n","# ftr_list = [s for s in os.listdir(os.path.join(save_path, dir_path)) if \"ftr\" in s if date in s]\n","print(ftr_list)\n","\n","start_0 = time.time()\n","key = ftr_list[0]  # tempoaray use single key\n","res_df_ = pd.read_feather(os.path.join(ftr_path, key), columns=None, use_threads=True).set_index(\"index\")\n","# print(res_df_.head())\n","print(key, \"loaded !\")\n","print(\"load res_df_ elapsed time :\", time.time() - start_0)"]},{"cell_type":"code","source":["res_df_.dtypes"],"metadata":{"id":"RQH_l4opEh_O"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### edit cols"],"metadata":{"id":"x2yj2SwAXDLp"}},{"cell_type":"code","source":["col_list = list(res_df_.columns)\n","# # [col_ for col_ in col_list if 'score' in col_]\n","\n","# ------ drop ------ #\n","# res_df_.drop([col_ for col_ in col_list if '20' in col_], inplace=True, axis=1)\n","# res_df_.drop([col_ for col_ in col_list if '40' in col_], inplace=True, axis=1)\n","\n","# ------ replace ------ #\n","for c_i, col_ in enumerate(col_list):\n","  # if 'eTa_5T' in col_:\n","  # if col_[-1] in ['m', 'h', 'd', 'H'] and '_' in col_:eTa_5T\n","  # if col_[0] in ['h'] and '_' in col_:\n","  if 'bir_' in col_:\n","\n","    col_list[c_i] = col_.replace('bir_', 'ir_')\n","    # col_list[c_i] = col_.replace('m', 'T').replace('h', 'H').replace('1T', 'T')\n","    # col_list[c_i] = col_.replace('1d', 'D')\n","    # col_list[c_i] = col_.replace('eTa_5T', 'ema_5T')\n","    # col_list[c_i] = col_list[c_i][1:]\n","    # print(col_list[c_i][0])\n","\n","res_df_.columns = col_list\n","# col_list[-2:] = ['resi_T', 'sup_T']"],"metadata":{"id":"x9wkWw15XCAm"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### lab"],"metadata":{"id":"14chOHeXh6JD"}},{"cell_type":"markdown","source":["#### imb."],"metadata":{"id":"c2729DJ6h720"}},{"cell_type":"code","source":["t_df = res_df_.iloc[-120:-100]\n","a_data = t_df.to_numpy()"],"metadata":{"id":"Rucj-iepiR_-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(15, 9))\n","nrows, ncols = 1, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        # height_ratios=[3, 1]\n","                        )\n","\n","ax = fig.add_subplot(gs[0])\n","\n","# ------ candles ------ #\n","candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","_ = [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]"],"metadata":{"id":"ktm1aB-Bh7GH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def imb_ratio(df, itv):\n","\n","  itv_num = to_itvnum(itv)\n","\n","  high = df['high_{}'.format(itv)].to_numpy()\n","  low = df['low_{}'.format(itv)].to_numpy()\n","  candle_range = high - low\n","\n","  open = df['open_{}'.format(itv)].to_numpy()\n","  close = df['close_{}'.format(itv)].to_numpy()\n","  b1_high = df['high_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_low = df['low_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","  # 추후에 통계 측정해야함 -> bir 에 따른 개별 trader 의 epout / tpep 이라던가 => short 에 양봉은 취급안함 (why use np.nan)\n","  df['short_ir_{}'.format(itv)] = np.where(close < open, (b1_low - close) / candle_range, np.nan) # close < open & close < b1_low\n","  df['long_ir_{}'.format(itv)] = np.where(close > open, (close - b1_high) / candle_range, np.nan) # close > open & close > b1_high\n","\n","  return"],"metadata":{"id":"I1Vq_BiKpY3P"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# imb_ratio(t_df, \"5T\")\n","\n","t_df.tail().iloc[:, -10:]\n","# t_df.iloc[:, -10:]\n","# t_df.dtypes"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":237},"id":"RVUs1YE_pgBI","executionInfo":{"status":"ok","timestamp":1648518199655,"user_tz":-540,"elapsed":359,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"db06dd75-67e9-4740-92ab-8b2db90145ba"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                         dc_upper_H40  dc_lower_H40  short_base_H  long_base_H  rel_ratio_5T  abs_ratio_5T  long_ir_5T  short_ir_5T  short_ir2_5T  long_ir2_5T\n","index                                                                                                                                                         \n","2022-02-17 08:45:59.999        3198.0       3024.24       3119.21     3105.515      0.967617      0.220549         NaN     0.429719       0.32513          NaN\n","2022-02-17 08:46:59.999        3198.0       3024.24       3119.21     3105.515      0.967617      0.220549         NaN     0.429719       0.32513          NaN\n","2022-02-17 08:47:59.999        3198.0       3024.24       3119.21     3105.515      0.967617      0.220549         NaN     0.429719       0.32513          NaN\n","2022-02-17 08:48:59.999        3198.0       3024.24       3119.21     3105.515      0.967617      0.220549         NaN     0.429719       0.32513          NaN\n","2022-02-17 08:49:59.999        3198.0       3024.24       3119.21     3105.515      0.967617      0.220549         NaN     0.429719       0.32513          NaN"],"text/html":["\n","  <div id=\"df-b56d7155-1d3f-4ee2-80ba-32d472e87cec\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>dc_upper_H40</th>\n","      <th>dc_lower_H40</th>\n","      <th>short_base_H</th>\n","      <th>long_base_H</th>\n","      <th>rel_ratio_5T</th>\n","      <th>abs_ratio_5T</th>\n","      <th>long_ir_5T</th>\n","      <th>short_ir_5T</th>\n","      <th>short_ir2_5T</th>\n","      <th>long_ir2_5T</th>\n","    </tr>\n","    <tr>\n","      <th>index</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2022-02-17 08:45:59.999</th>\n","      <td>3198.0</td>\n","      <td>3024.24</td>\n","      <td>3119.21</td>\n","      <td>3105.515</td>\n","      <td>0.967617</td>\n","      <td>0.220549</td>\n","      <td>NaN</td>\n","      <td>0.429719</td>\n","      <td>0.32513</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2022-02-17 08:46:59.999</th>\n","      <td>3198.0</td>\n","      <td>3024.24</td>\n","      <td>3119.21</td>\n","      <td>3105.515</td>\n","      <td>0.967617</td>\n","      <td>0.220549</td>\n","      <td>NaN</td>\n","      <td>0.429719</td>\n","      <td>0.32513</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2022-02-17 08:47:59.999</th>\n","      <td>3198.0</td>\n","      <td>3024.24</td>\n","      <td>3119.21</td>\n","      <td>3105.515</td>\n","      <td>0.967617</td>\n","      <td>0.220549</td>\n","      <td>NaN</td>\n","      <td>0.429719</td>\n","      <td>0.32513</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2022-02-17 08:48:59.999</th>\n","      <td>3198.0</td>\n","      <td>3024.24</td>\n","      <td>3119.21</td>\n","      <td>3105.515</td>\n","      <td>0.967617</td>\n","      <td>0.220549</td>\n","      <td>NaN</td>\n","      <td>0.429719</td>\n","      <td>0.32513</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2022-02-17 08:49:59.999</th>\n","      <td>3198.0</td>\n","      <td>3024.24</td>\n","      <td>3119.21</td>\n","      <td>3105.515</td>\n","      <td>0.967617</td>\n","      <td>0.220549</td>\n","      <td>NaN</td>\n","      <td>0.429719</td>\n","      <td>0.32513</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b56d7155-1d3f-4ee2-80ba-32d472e87cec')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-b56d7155-1d3f-4ee2-80ba-32d472e87cec button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-b56d7155-1d3f-4ee2-80ba-32d472e87cec');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":53}]},{"cell_type":"code","source":["# ------ rtc 1, 0 개념 ------ #\n","# short_rtc_1 = close\n","# short_rtc_0 = b1_low\n","\n","# long_rtc_1 = close\n","# long_rtc_0 = b1_high\n","\n","# rtc 로 활용하려면, col 로 추가해야할 것 -> 추가할만한 col_name 은 아님\n","# 1. h_candle 인 경우 -> ?\n","#   a. h_candle_v3 먹이고, open_{}.shift(num_itv).to_numpy() 진행 -> ex. res_df['close_{}'.format(hc_itv)].shift(itv_num).to_numpy() "],"metadata":{"id":"bieHiKjBkuFL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 1. 현재 종가 - 이전 고가 = imb_range (long)\n","long_imb_range = t_df.close - t_df.high.shift(1)\n","# 2. 이전 저가 - 현재 종가 - imb_range (short)\n","short_imb_range = t_df.low.shift(1) - t_df.close"],"metadata":{"id":"3X6bMXJIjPYy"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### zigzag"],"metadata":{"id":"LyGnAMvLYvOZ"}},{"cell_type":"code","source":["t_df = res_df_.iloc[-400:]\n","a_data = t_df.to_numpy()\n","\n","# wave_range(t_df)"],"metadata":{"id":"IYQSBLrSjmBo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["fill_wave_high = t_df.fill_wave_high.to_numpy()\n","fill_wave_low = t_df.fill_wave_low.to_numpy()\n","\n","plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(15, 9))\n","nrows, ncols = 1, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        # height_ratios=[3, 1]\n","                        )\n","\n","ax = fig.add_subplot(gs[0])\n","\n","# ------ candles ------ #\n","candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","_ = [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","\n","plt.step(np.arange(len(fill_wave_high)), fill_wave_high, alpha=1.0, color='magenta', linewidth=5)\n","plt.step(np.arange(len(fill_wave_low)), fill_wave_low, alpha=1.0, color='magenta', linewidth=5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":553},"executionInfo":{"status":"ok","timestamp":1648542856215,"user_tz":-540,"elapsed":2511,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"b739c7a9-115a-454f-c2b5-b6ec11695856","id":"7x80Xlje7j4Q"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7f33e05fe1d0>]"]},"metadata":{},"execution_count":151},{"output_type":"display_data","data":{"text/plain":["<Figure size 1080x648 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["\n","def fill_na(arr_, iin, iout, fill_value):\n","  arr_[iin:iout + 1] = fill_value\n","\n","  # 1. cross_point 찾기\n","  #   a. cross_over & cross_under\n","# def wave_range(t_df):\n","tf_entry = 'T'\n","tf_entry_num = to_itvnum(tf_entry)\n","base_shift_size = 3 # 3T used\n","\n","np_timeidx = np.array([intmin_np(date_) for date_ in t_df.index.to_numpy()])\n","\n","close = t_df.close.to_numpy()\n","b1_close = t_df.close.shift(tf_entry_num).to_numpy()  # 일단, 1 로 설정\n","dc_base_3T = t_df.dc_base_3T.to_numpy()\n","b1_dc_base_3T = t_df.dc_base_3T.shift(3).to_numpy()\n","\n","crossover = (close > dc_base_3T) & (b1_dc_base_3T > b1_close) & (np_timeidx % tf_entry_num == tf_entry_num - 1)\n","crossunder = (close < dc_base_3T) & (b1_dc_base_3T < b1_close) & (np_timeidx % tf_entry_num == tf_entry_num - 1)\n","\n","# 1. crossover ~ crossunder's high (over 과 under 의 index 포함해야함)\n","# 2. crossunder ~ crossover's low\n","high = t_df.high.to_numpy()\n","low = t_df.low.to_numpy()\n","\n","# print(np.sum(crossover))\n","# print(np.sum(crossunder))\n","\n","# pairing -> 더 긴 배열의 시작 index 가 더 작음\n","co_idx = np.argwhere(crossover)\n","cu_idx = np.argwhere(crossunder)\n","\n","print(co_idx)\n","print(cu_idx)\n","\n","# 2. 길이가 다른 경우\n","#  a. 길이가 긴 쪽이 먼저\n","if len(co_idx) > len(cu_idx):\n","  upper_zone = np.hstack((co_idx[:-1], cu_idx))  \n","  lower_zone = np.hstack((cu_idx, co_idx[1:]))  \n","elif len(co_idx) < len(cu_idx):\n","  upper_zone = np.hstack((co_idx, cu_idx[1:]))  \n","  lower_zone = np.hstack((cu_idx[:-1], co_idx))  \n","else:\n","  # 1. 길이가 같은 경우\n","  #   뭐가 먼저인지 판단하는 logic\n","  if co_idx[0] < cu_idx[0]:\n","    #   a. co 가 먼저인 경우\n","    upper_zone = np.hstack((co_idx, cu_idx))  \n","    lower_zone = np.hstack((cu_idx[:-1], co_idx[1:]))  \n","  else:\n","    #   b. cu 가 먼저인 경우\n","    upper_zone = np.hstack((co_idx[:-1], cu_idx[1:]))  \n","    lower_zone = np.hstack((cu_idx, co_idx))  \n","\n","# print(upper_zone)\n","# print(lower_zone)\n","\n","# make envelope\n","wave_high = np.full_like(high, np.nan)\n","wave_low = np.full_like(low, np.nan)\n","\n","fill_upper_zone = np.hstack((upper_zone[:-1, [1]], upper_zone[1:, [1]]))\n","fill_lower_zone = np.hstack((lower_zone[:-1, [1]], lower_zone[1:, [1]]))\n","\n","for items in zip(fill_upper_zone, upper_zone):\n","  print(items)\n","\n","[fill_na(wave_high, f_iin, f_iout, high[iin:iout + 1].max()) for (f_iin, f_iout), (iin, iout) in zip(fill_upper_zone, upper_zone)]\n","[fill_na(wave_low, f_iin, f_iout, low[iin:iout + 1].min()) for (f_iin, f_iout), (iin, iout) in zip(fill_lower_zone, lower_zone)]\n","# [high[iin:iout + 1].max() for iin, iout in upper_zone]\n","# [low[iin:iout + 1].min() for iin, iout in lower_zone]\n","\n","# t_df['fill_wave_high'] = pd.Series(wave_high).bfill().to_numpy()\n","# t_df['fill_wave_low'] = pd.Series(wave_low).bfill().to_numpy()\n","# t_df['fill_wave_high'] = pd.Series(wave_high).ffill().to_numpy()\n","# t_df['fill_wave_low'] = pd.Series(wave_low).ffill().to_numpy()\n","t_df['fill_wave_high'] = wave_high\n","t_df['fill_wave_low'] = wave_low\n","\n","  # return "],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":773},"id":"FjI2O1eCX7GB","executionInfo":{"status":"error","timestamp":1648542884373,"user_tz":-540,"elapsed":588,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"1792aa66-9ba0-41b9-8295-bcc5dfc69bb2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[214]\n"," [238]\n"," [243]\n"," [250]\n"," [254]\n"," [288]\n"," [292]\n"," [337]\n"," [340]]\n","[[ 88]\n"," [ 94]\n"," [ 96]\n"," [237]\n"," [240]\n"," [246]\n"," [251]\n"," [287]\n"," [291]\n"," [293]\n"," [339]]\n"]},{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-152-daf4d7f7b6e0>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     41\u001b[0m   \u001b[0mlower_zone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhstack\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcu_idx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mco_idx\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     42\u001b[0m \u001b[0;32melif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mco_idx\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcu_idx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 43\u001b[0;31m   \u001b[0mupper_zone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhstack\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mco_idx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcu_idx\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     44\u001b[0m   \u001b[0mlower_zone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhstack\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcu_idx\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mco_idx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     45\u001b[0m \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<__array_function__ internals>\u001b[0m in \u001b[0;36mhstack\u001b[0;34m(*args, **kwargs)\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/numpy/core/shape_base.py\u001b[0m in \u001b[0;36mhstack\u001b[0;34m(tup)\u001b[0m\n\u001b[1;32m    343\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0m_nx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconcatenate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marrs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    344\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 345\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0m_nx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconcatenate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marrs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    346\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    347\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<__array_function__ internals>\u001b[0m in \u001b[0;36mconcatenate\u001b[0;34m(*args, **kwargs)\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: all the input array dimensions for the concatenation axis must match exactly, but along dimension 0, the array at index 0 has size 9 and the array at index 1 has size 10"]}]},{"cell_type":"code","source":["wave_range(t_df)\n","\n","# print(lower_zone) # cu, co -> co, co[-1]\n","# fill_lower_zone = np.hstack((lower_zone[:-1, [1]], lower_zone[1:, [1]]))\n","# print(fill_lower_zone) # cu, co -> co, co[-1]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":450},"id":"qUy6D1Les5pE","executionInfo":{"status":"error","timestamp":1648541938153,"user_tz":-540,"elapsed":351,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"8b9cdef8-02a8-470d-f763-236f4edaa883"},"execution_count":null,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-139-fbfdf2c8b3f2>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mwave_range\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mt_df\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m# print(lower_zone) # cu, co -> co, co[-1]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m# fill_lower_zone = np.hstack((lower_zone[:-1, [1]], lower_zone[1:, [1]]))\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m# print(fill_lower_zone) # cu, co -> co, co[-1]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-138-8583f0d73e76>\u001b[0m in \u001b[0;36mwave_range\u001b[0;34m(t_df)\u001b[0m\n\u001b[1;32m     28\u001b[0m   \u001b[0;31m#  a. 길이가 긴 쪽이 먼저\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     29\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mco_idx\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcu_idx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 30\u001b[0;31m     \u001b[0mupper_zone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhstack\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mco_idx\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcu_idx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     31\u001b[0m     \u001b[0mlower_zone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhstack\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcu_idx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mco_idx\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     32\u001b[0m   \u001b[0;32melif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mco_idx\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcu_idx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<__array_function__ internals>\u001b[0m in \u001b[0;36mhstack\u001b[0;34m(*args, **kwargs)\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/numpy/core/shape_base.py\u001b[0m in \u001b[0;36mhstack\u001b[0;34m(tup)\u001b[0m\n\u001b[1;32m    343\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0m_nx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconcatenate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marrs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    344\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 345\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0m_nx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconcatenate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marrs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    346\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    347\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<__array_function__ internals>\u001b[0m in \u001b[0;36mconcatenate\u001b[0;34m(*args, **kwargs)\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: all the input array dimensions for the concatenation axis must match exactly, but along dimension 0, the array at index 0 has size 16 and the array at index 1 has size 11"]}]},{"cell_type":"code","source":["# high = t_df.high.to_numpy()\n","# low = t_df.low.to_numpy()\n","\n","# pivot_k = 0.001\n","# high_pivots = peak_valley_pivots(high, pivot_k, -pivot_k)\n","# low_pivots = peak_valley_pivots(low, pivot_k, -pivot_k)\n","# plot_pivots(high, high_pivots)\n","# plot_pivots(low, low_pivots)\n","\n","def plot_pivots(X, pivots):\n","    # plt.xlim(0, len(X))\n","    # plt.ylim(X.min()*0.99, X.max()*1.01)\n","    # plt.plot(np.arange(len(X)), X, 'k:', color='white')\n","    valid_idx = pivots != 0\n","    plt.plot(np.arange(len(X))[valid_idx], X[valid_idx], '-', color='white')\n","    # plt.scatter(np.arange(len(X))[pivots == 1], X[pivots == 1], color='g')\n","    # plt.scatter(np.arange(len(X))[pivots == -1], X[pivots == -1], color='r')"],"metadata":{"id":"1PwSHOShZJNm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X = res_df_.close.iloc[-100:].to_numpy()\n","# X = res_df_.close.to_numpy()\n","pivots = peak_valley_pivots(X, 0.0005, -0.0005)\n","pivots = peak_valley_pivots(X, 0.5, -0.5)"],"metadata":{"id":"4lZwODlFYxSL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plot_pivots(X, pivots)"],"metadata":{"id":"W_xx9XWXZKJ5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["t_df = res_df_.iloc[-100:]\n","t_df['date'] = t_df.index\n","data_x = t_df['date'].values\n","data_y = t_df['close'].values\n","peak_indexes = signal.argrelextrema(data_y, np.greater)\n","peak_indexes = peak_indexes[0]\n"," \n","# Find valleys(min).\n","valley_indexes = signal.argrelextrema(data_y, np.less)\n","valley_indexes = valley_indexes[0]\n"," \n","# Instantiate axes.\n","(fig, ax) = plt.subplots()\n"," \n","# Merge peaks and valleys data points using pandas.\n","df_peaks = pd.DataFrame({'date': data_x[peak_indexes], 'zigzag_y': data_y[peak_indexes]})\n","df_valleys = pd.DataFrame({'date': data_x[valley_indexes], 'zigzag_y': data_y[valley_indexes]})\n","df_peaks_valleys = pd.concat([df_peaks, df_valleys], axis=0, ignore_index=True, sort=True)\n"," \n","# Sort peak and valley datapoints by date.\n","df_peaks_valleys = df_peaks_valleys.sort_values(by=['date'])\n"," \n","# Plot zigzag trendline.\n","ax.plot(df_peaks_valleys['date'].values, df_peaks_valleys['zigzag_y'].values, \n","                                                        color='red', label=\"zigzag\")\n"," \n","# Plot close price line.\n","ax.plot(data_x, data_y, linestyle='dashed', color='black', label=\"Close Price\", linewidth=1)\n"," "],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"id":"ZAjpk42XarfY","executionInfo":{"status":"ok","timestamp":1647999471974,"user_tz":-540,"elapsed":935,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"471a5d20-9df5-4b2a-9d04-53cdb0e35c2f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7f82b6491790>]"]},"metadata":{},"execution_count":31},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["#### volume_profile"],"metadata":{"id":"EOXQbXixiQcK"}},{"cell_type":"code","source":["session_df = res_df_.iloc[-1440:] # 0.159 -> 0.024 (14400 -> 1440)\n","volume = session_df['volume'].to_numpy()\n","close = session_df['close'].to_numpy()\n","# px.histogram(session_df, x='volume', y='close', nbins=150, orientation='h').show()"],"metadata":{"id":"7pFuazxpgx9B"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["kde_factor = 0.05\n","num_samples = 100\n","\n","start_0 = time.time()\n","kde = stats.gaussian_kde(close,weights=volume,bw_method=kde_factor)\n","kdx = np.linspace(close.min(),close.max(),num_samples)\n","kdy = kde(kdx)\n","ticks_per_sample = (kdx.max() - kdx.min()) / num_samples\n","print(\"ticks_per_sample :\", ticks_per_sample)  # sample 당 가격\n","print(\"kdy elapsed_time :\", time.time() - start_0)"],"metadata":{"id":"SoPJkiyKiXLM","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1647259514394,"user_tz":-540,"elapsed":332,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"2e1d515d-7caf-4f82-b53b-a17f3e1d9ab9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["ticks_per_sample : 1.3911999999999989\n","kdy elapsed_time : 0.021226167678833008\n"]}]},{"cell_type":"code","source":["peaks,_ = signal.find_peaks(kdy)\n","pkx = kdx[peaks]\n","pky = kdy[peaks]\n","\n","plt.figure(figsize=(10,5))\n","# plt.hist(close, bins=num_samples, weights=volume, alpha=.8, color='#1592e6')\n","# plt.plot(kdx, kdy, color='white')\n","# plt.plot(pkx, pky, 'bo', color='yellow')\n","plt.plot(kdy, kdx, color='white')\n","plt.plot(pky, pkx, 'bo', color='yellow')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":320},"id":"mK2jBddAxJ14","executionInfo":{"status":"ok","timestamp":1647263622450,"user_tz":-540,"elapsed":362,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"74d7a810-1375-4db5-f74e-3cf58e0a0662"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 720x360 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["pkx"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"a8tpQZCy0SO1","executionInfo":{"status":"ok","timestamp":1647260132868,"user_tz":-540,"elapsed":326,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"24ee984e-db8d-4083-97a7-4d3ebb536d38"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([3059.93252525, 3068.3640404 , 3082.41656566, 3093.65858586, 3104.90060606, 3120.35838384, 3130.19515152, 3140.03191919, 3158.30020202, 3168.1369697 , 3176.56848485])"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["# ------ vp 의 indi. 화가 필요함 -> point 설정 ------ #\n","# 1. 4 level 은 미리 만들어놓는게 맞는걸로 보임 -> 추종하는 function 이 많음 (utils_tr, ep_out ...)\n","#   a. 4 level 에 국한하는게 아니라, 모든 peaks 에 대해 levels 설정\n","#   b. 각 session 별로 peak_list 가 주어질 것\n","#     i. prev_data 사용해야하는점 주의 (session vp 는 future_data)"],"metadata":{"id":"gfA946s8UgS0"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### legacy"],"metadata":{"id":"1MNVIExLULhJ"}},{"cell_type":"code","source":["from math import floor\n","\n","\n","def _calc_dev(base_price, price):\n","    return 100 * (price - base_price) / base_price\n","\n","\n","def zigzag(highs, lows, depth=10, dev_threshold=5):\n","    def pivots(src_raw, length, isHigh):\n","        src = list(reversed(src_raw))\n","        bar_index = list(range(len(src)))\n","        for start in range(0, len(src)):\n","            if start + 2 * length + 1 > len(src) - 1:\n","                return\n","            p = 0\n","            if length < len(src) - start:\n","                p = src[start + length]\n","            if length == 0:\n","                yield 0, p\n","            else:\n","                isFound = True\n","                for i in range(start, start + length):\n","                    if isHigh and src[i] > p:\n","                        isFound = False\n","                    if not isHigh and src[i] < p:\n","                        isFound = False\n","                for i in range(start + length + 1, start + 2 * length + 1):\n","                    if isHigh and src[i] >= p:\n","                        isFound = False\n","                    c = not isHigh and src[i] <= p\n","                    if c:\n","                        isFound = False\n","                if isFound:\n","                    yield (bar_index[start + length], p)\n","                else:\n","                    yield None, None\n","\n","    data_highs = [x for x in pivots(highs, floor(depth / 2), True) if x[0]]\n","    data_lows = [x for x in pivots(lows, floor(depth / 2), False) if x[0]]\n","\n","    raw_pairs = []\n","\n","    for i, (ind, p) in enumerate(data_highs):\n","        lows_d = sorted([(ind_l, p_l) for ind_l, p_l in data_lows if ind > ind_l], key=lambda x: x[0])\n","        if lows_d:\n","            lows = lows_d[-1]\n","\n","            if abs(_calc_dev(lows[1], p)) >= dev_threshold:\n","                raw_pairs.append(\n","                    ((ind, p),\n","                     (lows[0], lows[1]))\n","                )\n","\n","    result = []\n","\n","    for (i_h, p_h),(i_l, p_l) in raw_pairs:\n","        if not result:\n","            result.append(((i_h, p_h),(i_l, p_l)))\n","            continue\n","\n","        if i_l == result[-1][1][0]:\n","            if p_h > result[-1][0][1]:\n","                result = result[:-1]\n","            else:\n","                continue\n","\n","        result.append(((i_h, p_h),(i_l, p_l)))\n","\n","    return result\n","\n","# highs, lows = t_df.high.to_numpy(), t_df.low.to_numpy()\n","# zigzag(highs, lows, depth=5, dev_threshold=5)"],"metadata":{"id":"q1nEA19v7Qpj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["t_df = res_df_.iloc[-120:]\n","a_data = t_df.to_numpy()"],"metadata":{"id":"fGlmdyb97j4Q"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# import plotly.express as px\n","# import plotly.graph_objects as go\n","\n","def get_dist_plot(c, v, kx, ky):\n","    fig = go.Figure()\n","    fig.add_trace(go.Histogram(name='Vol Profile', x=c, y=v, nbinsx=150, \n","                               histfunc='sum', histnorm='probability density',\n","                               marker_color='#B0C4DE'))\n","    fig.add_trace(go.Scatter(name='KDE', x=kx, y=ky, mode='lines', marker_color='#D2691E'))    \n","\n","    peaks,_ = signal.find_peaks(kdy)\n","    pkx = kdx[peaks]\n","    pky = kdy[peaks]\n","    pk_marker_args=dict(size=10, color='black')\n","    fig.add_trace(go.Scatter(name=\"Peaks\", x=pkx, y=pky, mode='markers', marker=pk_marker_args))\n","    fig.show()\n","\n","    return fig"],"metadata":{"id":"ropzIp0wUPAA"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##### prominence_info"],"metadata":{"id":"3T-9FwWFXR4f"}},{"cell_type":"code","source":["start_0 = time.time()\n","min_prom = kdy.max() * 0.0\n","pipsize = 0.01\n","max_width_pips = 20\n","# width_range=(1, max_width_pips * pipsize / ticks_per_sample)\n","width_range= max_width_pips * pipsize / ticks_per_sample\n","peaks, peak_props = signal.find_peaks(kdy, prominence=min_prom, width=width_range)\n","\n","peak_x = kdx[peaks]\n","peak_y = kdy[peaks]\n","# ------ prominence lines ------ #\n","left_base = peak_props['left_bases']\n","right_base = peak_props['right_bases']\n","line_x = peak_x\n","line_y0 = peak_y\n","line_y1 = peak_y # - peak_props['prominences']\n","print(\"prom_line elapsed_time :\", time.time() - start_0)\n","\n","\n","for x, y0, y1 in zip(line_x, line_y0, line_y1):\n","    fig.add_shape(type='line',\n","        xref='x', yref='y',\n","        # x0=x, y0=y0, x1=x, y1=y1,\n","        x0=x, y0=0, x1=x, y1=y1,\n","        line=dict(\n","            color='red',\n","            width=2,\n","        )\n","    )\n","\n","# ------ width ------ #\n","left_ips = peak_props['left_ips']\n","right_ips = peak_props['right_ips']\n","# width_x0 = kdx.min() + (left_ips * ticks_per_sample)\n","# width_x1 = kdx.min() + (right_ips * ticks_per_sample)\n","width_x0 = kdx.min() + (left_base * ticks_per_sample)\n","width_x1 = kdx.min() + (right_base * ticks_per_sample)\n","\n","# int_from = kdx.min() + (left_base * ticks_per_sample)\n","# int_to = kdx.min() + (right_base * ticks_per_sample)\n","# [kde.integrate_box_1d(x0, x1) for x0, x1 in zip(int_from, int_to)]\n","\n","width_y = peak_props['width_heights']\n","\n","for x0, x1, y in zip(width_x0, width_x1, width_y):\n","    fig.add_shape(type='line',\n","        xref='x', yref='y',\n","        x0=x0, y0=y, x1=x1, y1=y,\n","        line=dict(\n","            color='red',\n","            width=2,\n","        )\n","    )\n","fig.show()"],"metadata":{"id":"RmBt2agljClE","colab":{"base_uri":"https://localhost:8080/","height":558},"executionInfo":{"status":"ok","timestamp":1647183981567,"user_tz":-540,"elapsed":781,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"c61b0e13-ab0a-4e56-8a44-8bc480ec31cc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["prom_line elapsed_time : 0.0005087852478027344\n"]},{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script src=\"https://cdn.plot.ly/plotly-2.8.3.min.js\"></script>                <div id=\"f0efc821-18d5-43b5-ad6e-1133ea0ad873\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"f0efc821-18d5-43b5-ad6e-1133ea0ad873\")) {                    Plotly.newPlot(                        \"f0efc821-18d5-43b5-ad6e-1133ea0ad873\",                        [{\"histfunc\":\"sum\",\"histnorm\":\"probability density\",\"marker\":{\"color\":\"#B0C4DE\"},\"name\":\"Vol Profile\",\"nbinsx\":150,\"x\":[3150.12,3150.91,3150.04,3152.76,3150.22,3148.21,3148.25,3148.3,3142.41,3145.56,3144.02,3145.11,3146.27,3142.97,3140.6,3142.02,3142.8,3141.34,3138.28,3138.09,3137.04,3135.5,3133.32,3134.84,3136.27,3137.1,3137.05,3139.74,3138.4,3138.17,3139.49,3141.68,3142.52,3143.14,3143.12,3142.4,3144.17,3142.7,3140.72,3138.89,3142.1,3140.96,3139.76,3138.51,3140.37,3139.0,3138.84,3138.57,3140.62,3143.09,3141.71,3140.05,3139.85,3139.12,3139.9,3139.24,3139.49,3138.88,3138.14,3136.66,3137.03,3138.04,3140.84,3138.27,3137.31,3139.03,3141.06,3141.5,3139.41,3137.62,3141.5,3142.8,3142.24,3143.42,3142.55,3143.9,3146.54,3146.38,3142.34,3144.01,3145.79,3147.35,3146.06,3146.75,3147.37,3153.62,3152.82,3154.53,3153.41,3154.3,3153.01,3156.01,3157.57,3157.36,3160.43,3159.0,3163.78,3164.2,3163.97,3168.45,3170.03,3169.46,3173.73,3169.48,3168.54,3167.57,3166.99,3164.73,3164.25,3166.33,3162.57,3156.97,3159.44,3159.19,3158.11,3156.97,3158.08,3158.32,3158.99,3157.01,3154.91,3147.89,3146.35,3142.36,3142.62,3138.81,3144.68,3143.32,3140.89,3140.16,3139.74,3140.33,3143.48,3145.12,3145.42,3147.13,3143.31,3144.88,3145.12,3143.89,3144.75,3143.91,3140.69,3141.35,3141.59,3141.62,3141.51,3141.96,3142.09,3140.61,3137.55,3138.18,3140.28,3139.39,3139.2,3139.85,3137.92,3138.08,3136.42,3134.93,3135.14,3133.15,3135.12,3133.37,3134.51,3131.06,3128.0,3126.97,3116.7,3122.46,3122.06,3118.8,3115.48,3119.5,3120.88,3110.75,3109.43,3107.1,3111.54,3107.5,3108.74,3111.3,3113.32,3115.38,3118.54,3115.27,3118.6,3120.1,3119.4,3119.35,3123.69,3123.54,3121.8,3121.82,3119.9,3122.01,3122.29,3119.64,3119.91,3118.67,3118.66,3119.45,3120.43,3122.38,3120.43,3121.94,3123.03,3123.6,3121.88,3123.81,3123.85,3121.51,3121.8,3122.29,3123.76,3127.99,3131.35,3131.12,3131.07,3132.76,3131.57,3131.8,3130.61,3134.68,3134.39,3132.91,3130.4,3129.86,3129.9,3129.38,3128.39,3125.57,3124.03,3123.68,3125.42,3125.98,3128.4,3130.98,3128.95,3129.26,3132.05,3131.17,3128.56,3126.45,3127.34,3128.33,3126.96,3128.84,3128.45,3128.34,3128.84,3126.09,3125.6,3125.95,3124.5,3122.44,3122.97,3128.29,3126.43,3127.98,3131.71,3132.68,3130.7,3129.63,3130.04,3129.68,3129.74,3129.36,3129.78,3128.6,3128.87,3130.34,3129.71,3127.47,3129.81,3129.16,3128.41,3126.57,3125.42,3128.63,3129.77,3130.9,3131.42,3129.66,3132.1,3130.24,3133.36,3138.65,3141.3,3144.9,3140.63,3141.08,3139.72,3142.67,3141.99,3140.43,3139.04,3134.85,3133.34,3133.14,3136.4,3138.89,3139.59,3143.64,3140.9,3140.38,3141.76,3140.14,3140.58,3137.29,3138.28,3138.27,3137.57,3139.11,3138.77,3138.93,3139.13,3139.57,3139.76,3141.02,3138.46,3138.77,3139.38,3135.77,3135.49,3136.19,3134.07,3135.5,3134.59,3134.37,3137.84,3139.81,3140.38,3143.15,3142.58,3143.12,3139.01,3137.68,3137.86,3137.6,3136.3,3136.34,3134.66,3136.0,3135.49,3133.83,3132.57,3127.5,3127.82,3130.61,3132.01,3126.05,3128.08,3127.75,3127.18,3128.5,3128.32,3129.79,3128.02,3129.28,3127.92,3129.56,3130.85,3131.61,3133.9,3133.36,3135.98,3136.89,3136.05,3138.23,3137.59,3139.65,3141.26,3140.09,3139.73,3139.13,3140.0,3138.28,3139.07,3140.15,3140.64,3141.14,3140.89,3141.56,3144.82,3146.11,3146.92,3147.37,3148.01,3148.11,3153.52,3153.63,3152.2,3145.75,3149.2,3150.38,3152.32,3148.33,3149.53,3151.03,3149.0,3148.97,3148.26,3148.09,3149.48,3150.14,3153.62,3154.73,3153.73,3154.58,3156.77,3157.02,3157.56,3159.21,3157.99,3157.28,3158.24,3157.75,3153.62,3156.32,3155.98,3156.09,3153.36,3154.85,3153.7,3153.26,3153.92,3152.18,3154.72,3153.76,3151.32,3147.99,3143.63,3142.84,3142.01,3142.34,3141.19,3144.4,3143.24,3146.07,3146.42,3142.71,3145.16,3144.34,3142.69,3139.69,3137.0,3139.75,3138.36,3137.76,3138.86,3141.21,3141.38,3147.22,3146.36,3145.32,3145.22,3143.33,3142.05,3138.36,3136.89,3138.59,3137.22,3138.73,3140.14,3140.55,3143.65,3142.01,3142.94,3141.82,3142.27,3142.38,3141.33,3139.54,3140.53,3141.91,3143.98,3145.27,3145.56,3145.8,3146.38,3146.33,3146.59,3148.72,3149.48,3149.99,3149.19,3147.89,3145.9,3144.89,3143.99,3144.38,3141.47,3141.26,3134.83,3136.75,3135.49,3137.49,3136.01,3138.03,3137.49,3135.5,3133.94,3131.24,3128.72,3131.32,3129.42,3129.77,3126.83,3127.0,3124.12,3125.0,3127.18,3130.0,3129.72,3129.07,3129.68,3129.97,3129.39,3130.92,3132.75,3132.92,3129.99,3133.15,3130.69,3132.15,3134.37,3132.81,3131.7,3130.61,3128.61,3128.99,3124.84,3116.56,3116.76,3116.92,3118.9,3119.05,3118.74,3118.24,3121.88,3121.41,3120.63,3119.45,3119.16,3117.66,3125.21,3122.01,3122.3,3122.27,3123.6,3123.71,3124.0,3126.14,3128.01,3125.94,3126.44,3128.0,3128.04,3128.5,3131.12,3129.44,3129.36,3130.58,3130.58,3130.74,3129.8,3130.8,3130.21,3130.0,3132.5,3132.77,3130.01,3138.72,3139.25,3138.11,3136.77,3136.71,3134.59,3135.98,3133.81,3131.4,3131.16,3133.29,3130.61,3132.0,3132.44,3133.58,3134.18,3133.44,3133.33,3135.37,3134.42,3132.16,3132.2,3130.93,3131.07,3128.89,3127.34,3129.46,3129.77,3130.33,3131.76,3132.28,3130.06,3132.43,3132.6,3134.33,3138.55,3138.49,3137.34,3135.68,3135.12,3133.0,3133.35,3135.1,3135.72,3135.45,3135.74,3134.31,3135.54,3135.0,3134.0,3135.5,3135.47,3138.57,3137.43,3137.26,3137.68,3134.65,3133.04,3134.23,3134.77,3137.77,3138.53,3137.99,3140.51,3141.66,3137.9,3130.11,3125.74,3126.7,3127.43,3126.03,3120.96,3121.81,3124.17,3124.31,3124.54,3125.11,3125.71,3126.3,3128.36,3129.59,3129.72,3130.19,3131.21,3130.5,3130.07,3129.81,3131.5,3134.35,3133.15,3135.09,3136.18,3132.93,3122.75,3122.1,3122.03,3121.84,3121.06,3118.65,3120.18,3119.31,3112.84,3117.62,3114.39,3114.41,3116.04,3117.45,3119.3,3120.57,3120.72,3121.07,3116.17,3110.8,3111.87,3110.61,3115.47,3117.35,3117.49,3117.32,3114.9,3112.16,3112.35,3108.01,3111.41,3109.76,3113.55,3118.27,3120.49,3119.38,3121.0,3119.82,3119.61,3118.49,3116.15,3116.56,3117.76,3115.36,3117.85,3117.1,3118.16,3118.6,3117.1,3114.79,3114.07,3116.16,3113.75,3112.4,3104.99,3118.68,3114.45,3103.37,3094.09,3103.67,3101.78,3098.48,3101.08,3101.52,3096.14,3095.06,3094.52,3093.74,3089.7,3094.76,3094.28,3082.9,3075.29,3071.6,3066.96,3068.99,3068.43,3072.83,3074.19,3068.47,3066.49,3068.45,3071.08,3072.8,3068.44,3067.71,3073.29,3073.62,3075.79,3074.76,3079.0,3077.27,3072.94,3073.42,3070.62,3070.97,3075.98,3073.64,3070.63,3073.96,3074.48,3076.25,3074.55,3072.14,3068.01,3068.44,3057.23,3061.75,3060.41,3060.23,3055.43,3062.96,3064.42,3063.7,3057.99,3057.97,3065.99,3069.05,3073.19,3068.84,3067.58,3067.45,3064.78,3066.87,3067.5,3068.74,3067.5,3070.61,3059.89,3062.56,3066.56,3065.24,3061.41,3060.9,3053.06,3061.95,3059.49,3056.27,3059.09,3059.6,3056.32,3057.96,3058.97,3061.6,3066.01,3068.68,3068.43,3070.66,3072.53,3070.4,3073.28,3072.86,3070.68,3067.65,3066.0,3066.25,3070.21,3071.52,3068.61,3064.15,3064.26,3063.48,3062.8,3060.3,3059.85,3060.47,3064.84,3065.03,3066.71,3066.55,3066.41,3065.24,3067.81,3066.93,3065.0,3067.85,3060.14,3062.51,3061.39,3064.93,3064.94,3066.09,3066.49,3067.75,3070.38,3067.84,3067.51,3072.07,3071.31,3070.05,3068.95,3068.57,3067.73,3068.88,3067.87,3067.89,3065.01,3066.0,3069.24,3065.3,3063.52,3063.06,3064.11,3064.99,3063.19,3062.69,3066.9,3066.87,3065.42,3058.47,3058.2,3068.7,3065.56,3065.52,3059.04,3060.61,3059.57,3058.08,3055.2,3053.72,3060.26,3055.86,3045.88,3046.6,3051.18,3052.99,3057.9,3056.38,3059.4,3061.48,3061.15,3064.36,3065.77,3066.35,3066.8,3067.68,3068.0,3065.05,3063.01,3066.42,3066.16,3064.8,3067.89,3066.3,3068.58,3064.81,3065.74,3064.23,3065.42,3070.43,3069.65,3070.48,3070.57,3073.44,3078.3,3082.89,3079.01,3080.76,3079.67,3082.0,3081.56,3082.01,3081.24,3078.61,3080.11,3080.95,3080.03,3080.65,3079.97,3078.86,3078.5,3078.6,3077.34,3077.0,3076.39,3076.45,3077.45,3076.23,3072.22,3073.67,3079.31,3077.21,3075.68,3076.91,3078.2,3075.92,3077.67,3076.33,3075.14,3076.47,3077.04,3080.69,3079.8,3080.33,3075.65,3074.66,3073.05,3070.38,3067.96,3068.78,3067.92,3069.26,3069.37,3070.76,3068.12,3069.49,3069.98,3071.78,3070.88,3068.71,3067.04,3069.34,3070.99,3070.39,3069.63,3068.6,3068.89,3070.08,3069.26,3069.57,3069.72,3069.53,3067.99,3069.23,3070.93,3071.33,3068.33,3066.84,3066.23,3066.76,3068.17,3070.0,3072.0,3075.66,3073.9,3073.99,3074.66,3074.0,3076.62,3077.82,3076.01,3076.18,3075.52,3075.42,3075.01,3075.67,3079.55,3078.46,3082.28,3080.74,3081.27,3083.38,3084.49,3086.42,3084.9,3086.53,3085.27,3084.7,3084.08,3084.82,3086.99,3092.0,3089.49,3089.26,3084.07,3084.44,3084.8,3083.55,3082.59,3082.36,3084.65,3086.97,3085.67,3085.43,3088.82,3089.81,3091.81,3093.96,3092.59,3093.58,3093.74,3092.61,3091.64,3091.26,3113.47,3104.88,3092.36,3101.44,3107.88,3113.58,3119.86,3128.34,3133.07,3128.34,3123.1,3129.07,3122.38,3127.43,3126.59,3132.79,3137.33,3143.07,3145.41,3147.86,3148.82,3157.67,3157.57,3160.7,3160.01,3163.6,3172.63,3171.77,3174.38,3176.44,3178.06,3179.99,3185.0,3176.75,3171.53,3179.12,3176.52,3168.9,3168.72,3170.03,3168.15,3165.58,3166.83,3167.56,3161.34,3162.78,3167.67,3162.8,3157.67,3155.79,3157.92,3161.37,3163.06,3165.11,3163.45,3164.45,3166.86,3166.61,3165.0,3167.59,3167.45,3164.59,3167.05,3172.29,3176.49,3170.87,3166.5,3165.51,3165.58,3164.96,3165.19,3161.59,3165.09,3162.72,3163.97,3162.62,3165.19,3165.77,3163.55,3173.99,3171.18,3170.87,3168.34,3169.49,3167.69,3169.72,3166.89,3168.42,3166.68,3168.84,3165.83,3162.55,3159.17,3160.93,3162.0,3160.83,3158.69,3159.99,3159.9,3159.88,3160.02,3158.98,3160.0,3158.01,3159.2,3158.6,3158.71,3156.25,3157.2,3156.77,3156.91,3156.6,3156.55,3153.94,3152.29,3151.49,3151.41,3146.89,3148.18,3147.2,3147.17,3147.89,3149.31,3151.59,3156.4,3153.84,3155.3,3155.23,3156.03,3156.24,3155.61,3158.4,3155.05,3155.38,3152.34,3152.18,3153.34,3152.91,3153.99,3151.52,3149.21,3152.48,3151.63,3150.9,3149.75,3148.0,3148.25,3149.4,3149.7,3148.41,3147.65,3146.06,3147.06,3147.41,3146.72,3145.51,3142.17,3142.8,3140.42,3139.24,3140.69,3140.67,3139.22,3136.44,3139.14,3137.55,3133.96,3131.83,3130.8,3130.95,3129.59,3127.0,3129.85,3133.0,3132.21,3132.15,3130.41,3132.9,3134.57,3139.85,3133.04,3138.13,3135.79,3136.96,3133.26,3129.64,3128.02,3127.75,3130.0,3132.21,3133.06,3132.06,3131.88,3132.99,3134.0,3135.79,3137.68,3136.0,3137.89,3133.88,3133.81,3133.84,3133.71,3138.28,3143.06,3144.0,3143.17,3143.02,3145.34,3144.83,3144.81,3144.61,3146.0,3147.91,3146.69,3145.03,3142.46,3142.5,3141.1,3140.17,3140.11,3141.4,3143.92,3144.66,3146.71,3148.95,3146.13,3135.82,3136.96,3139.34,3134.9,3134.48,3136.76,3137.37,3136.92,3136.99,3133.71,3134.44,3132.38,3135.25,3137.14,3135.07,3136.15,3136.15,3139.87,3138.92,3138.5,3141.6,3144.19,3145.44,3147.36,3147.51,3142.12,3143.94,3142.43,3142.02,3142.21,3144.66,3146.53,3144.3,3145.73,3145.94,3146.56,3145.42,3146.05,3150.58,3154.16,3151.01,3149.76,3150.51,3149.31,3146.43,3146.66,3147.47,3145.75,3146.7,3147.1,3143.28,3146.19,3145.38,3145.25,3140.13,3143.45,3140.18,3138.3,3139.7,3136.88,3132.99,3134.7,3135.09,3135.74,3129.89,3126.61,3123.87,3125.14,3119.64,3123.09,3123.35,3120.16,3121.8,3125.0,3132.0,3126.44,3124.57,3120.75,3125.9,3128.05,3127.12,3124.8,3126.19,3128.65,3130.03,3125.31,3125.8,3126.11,3123.22,3125.03,3126.05,3126.24,3129.98,3130.55,3130.97,3129.1,3129.66,3130.27,3130.36,3131.12,3136.13,3137.65,3133.69,3137.18,3137.25,3138.83,3138.58,3141.52,3139.41,3139.05,3137.7,3139.46,3139.8,3140.98,3139.78,3139.17,3140.0,3141.49,3138.86,3139.52,3140.5,3142.58,3142.34,3142.47,3142.91,3142.89,3144.0,3147.55,3148.71,3151.21,3150.66,3148.5,3148.96,3148.5,3150.32,3152.45,3150.83,3150.29,3151.2,3153.01,3152.48,3149.23,3147.45,3146.68,3157.71,3153.34,3147.37,3143.99,3141.45,3142.66,3146.98,3146.61,3148.46,3149.5,3149.29,3148.18,3145.05,3146.86,3145.76,3148.84,3149.31,3146.86,3146.76],\"y\":[1814.895,1182.023,1511.21,821.059,669.95,594.607,397.261,475.226,1430.563,1351.268,848.732,961.415,677.695,2241.498,771.686,3400.92,457.283,815.311,843.761,1456.898,1147.73,2592.488,939.438,695.06,664.589,839.272,344.224,524.897,1029.553,1257.254,764.586,1618.563,599.314,385.634,340.075,245.402,273.54,932.316,297.465,800.419,470.172,358.191,198.746,398.956,521.275,398.68,250.799,376.615,178.701,1034.812,349.27,365.934,193.939,199.584,148.806,343.965,258.079,238.408,273.382,508.892,455.586,1497.43,603.768,705.325,471.812,358.129,1222.79,447.666,603.433,350.189,684.554,404.765,918.631,713.382,803.374,220.673,1013.652,1757.238,887.223,420.149,422.235,642.444,379.785,126.201,499.773,2342.571,1945.816,1288.743,676.794,392.273,424.757,1084.062,1139.501,790.354,2007.705,1446.953,1842.648,777.958,945.39,2579.427,2955.737,1590.911,1476.864,2861.345,772.493,876.768,1835.01,875.833,585.31,765.122,767.852,1825.83,1060.932,682.04,688.755,737.484,429.945,293.821,300.116,1045.831,712.192,2711.994,2052.2,3340.02,897.035,2391.303,2186.713,1517.988,344.748,771.478,720.502,656.313,530.014,1327.673,508.321,904.994,1152.633,523.227,293.715,229.893,202.519,252.467,601.482,317.28,345.035,575.193,374.831,194.465,270.588,367.969,1280.729,1909.713,774.939,518.596,294.403,337.627,382.69,353.682,534.457,1713.387,360.944,713.113,1393.388,1289.595,610.727,739.131,1619.367,2194.335,8164.046,2879.21,2159.701,2512.548,3579.377,1841.206,2810.677,3893.288,1849.815,5497.891,2407.824,1844.752,1304.788,945.57,2745.772,2050.842,2354.528,1577.291,903.569,1269.654,2703.684,766.884,1965.466,1320.285,1111.835,521.223,822.176,942.413,497.538,499.364,222.856,316.366,355.702,243.842,362.266,593.914,349.424,308.565,540.138,769.079,463.481,163.895,237.299,285.424,466.1,224.654,493.52,1674.225,4063.392,1370.598,472.447,957.289,609.428,338.42,243.509,745.35,1417.319,762.417,553.865,616.945,305.569,511.777,416.061,2007.687,312.874,1760.715,470.299,170.102,514.177,647.315,425.481,274.85,415.924,896.493,396.062,588.357,231.181,273.932,245.847,212.412,116.329,109.858,274.394,323.434,335.066,347.193,459.166,944.41,601.327,889.712,412.644,317.84,986.261,934.932,572.116,181.168,460.876,145.156,108.878,210.202,77.92,295.25,300.008,412.518,463.649,312.424,342.369,602.553,325.602,288.656,458.643,344.168,189.501,378.501,506.806,405.58,266.931,508.179,577.092,1968.061,3128.798,2617.171,810.468,1071.792,482.71,702.007,298.08,1139.23,623.801,1162.914,1203.468,673.113,606.991,499.32,344.082,916.323,1133.798,236.462,323.745,227.404,305.618,859.751,541.196,262.919,221.3,135.795,94.984,185.741,146.342,216.582,150.862,227.198,373.705,332.486,216.229,778.895,1204.286,326.503,380.38,1047.579,257.681,288.363,944.527,1025.858,1888.092,606.18,219.281,573.418,618.131,579.352,643.473,227.201,596.85,266.111,593.418,412.236,518.62,714.492,807.998,1833.123,1485.911,696.152,1044.399,1178.696,682.768,339.908,614.242,333.987,289.083,426.036,434.767,363.008,294.274,249.675,759.092,233.645,259.457,692.772,530.582,751.244,252.918,324.292,565.306,530.138,634.433,621.443,362.445,1462.934,578.493,404.427,432.71,381.631,206.741,803.279,286.361,454.727,989.949,1000.012,534.381,1225.959,2611.002,1238.904,1808.266,2668.663,1734.437,1991.659,1533.497,673.975,1417.797,1002.213,689.714,474.831,775.993,612.321,674.988,586.885,486.539,6750.373,1240.763,1031.138,1064.433,810.097,2543.442,1714.432,1408.587,2076.241,891.454,802.952,990.123,356.49,909.726,969.575,1157.716,408.802,557.485,790.536,760.441,903.066,478.393,406.574,460.658,270.44,397.786,2943.217,4367.234,1259.451,1068.328,966.188,1414.714,579.827,511.738,412.874,654.607,675.654,504.93,356.198,858.616,1158.323,1447.125,787.173,728.954,636.948,628.265,669.612,465.412,1222.997,749.451,462.962,472.928,432.435,342.099,1618.728,2358.947,952.987,460.716,651.763,975.681,444.398,645.867,449.599,193.003,278.721,545.444,842.045,277.826,994.515,588.675,591.108,309.423,892.268,276.425,502.627,968.723,404.031,211.579,444.69,715.557,984.707,1097.859,551.379,692.514,900.106,360.002,948.053,805.637,489.368,1676.558,1304.157,367.592,283.184,1023.029,456.415,763.262,343.508,461.29,879.775,1776.793,1251.296,591.245,573.997,1673.844,1283.242,2767.718,1120.511,657.294,746.819,905.747,599.259,715.33,481.675,327.764,388.74,1256.088,1555.066,601.571,277.709,213.939,322.601,214.083,472.872,296.863,364.37,746.543,378.365,967.733,5140.211,4083.258,1994.542,1976.259,888.817,461.462,437.566,1416.611,716.221,1318.431,481.782,2014.435,936.676,1459.321,855.198,732.281,466.019,450.272,560.57,469.751,622.444,518.498,933.561,1274.182,362.645,417.461,200.685,1204.422,1085.208,437.325,388.368,522.196,414.681,402.1,458.488,176.931,774.455,662.126,617.206,452.137,4865.578,3871.135,1343.329,634.081,483.47,1681.018,514.598,502.913,1322.138,529.723,572.34,348.409,713.894,228.335,215.652,253.718,284.838,694.79,180.093,810.769,563.133,209.468,355.301,1084.715,204.09,893.371,557.044,320.725,236.971,360.995,404.746,202.665,416.594,295.445,369.598,1691.926,445.675,502.376,451.028,754.112,460.168,253.657,293.696,364.866,139.172,187.996,297.765,167.774,288.681,128.716,179.501,428.036,213.013,396.147,290.492,459.26,333.25,604.208,535.843,218.827,379.209,623.314,309.742,1047.188,2658.829,741.273,2765.267,2446.593,900.038,1232.736,817.002,2687.132,3309.465,1746.003,699.151,574.566,262.053,505.975,270.49,1023.427,533.5,488.001,536.457,432.03,945.469,1080.591,611.695,611.907,1095.621,485.481,688.799,375.255,1322.925,2347.935,1281.055,1713.871,563.816,371.289,1137.167,1011.662,433.968,4755.422,2060.545,1118.297,1058.42,991.226,512.798,725.336,476.284,633.408,903.175,644.941,2829.545,1218.33,1149.1,755.961,1252.379,2399.314,350.433,457.851,727.54,748.377,2585.751,4337.831,2453.675,1355.272,2073.169,1425.068,1751.715,901.639,353.899,368.582,636.142,1082.148,271.744,399.517,439.441,377.24,330.026,233.732,285.884,308.136,639.158,734.67,567.183,310.671,995.761,12392.217,5461.011,2988.344,5529.668,2618.77,11929.186,2928.894,5355.073,1533.817,2310.282,2210.125,1805.742,2500.52,3272.782,1332.249,2270.554,2483.668,8790.039,13105.425,16039.554,8317.661,6814.545,3909.444,2716.544,2823.368,2433.446,3042.327,4014.336,2680.476,2166.982,8299.153,2107.079,2585.491,3224.808,2437.339,2865.693,1574.387,2219.401,2214.305,2410.523,1263.301,1232.671,1213.058,1789.33,827.919,1530.653,1732.94,1439.558,1552.842,1345.879,1394.187,3147.626,6162.965,7032.083,1330.471,2505.725,7118.551,2288.653,1286.682,1102.423,3249.307,1670.88,2218.379,2946.052,2525.484,1719.79,1630.798,1474.484,1299.503,434.158,1462.856,1914.008,1336.711,872.552,2661.102,1921.851,1223.061,892.979,1675.459,2747.98,3398.563,4782.692,3130.671,914.08,3275.661,3677.987,1920.096,1582.481,626.202,1699.704,3016.389,2348.542,3936.201,1440.961,2551.41,2929.114,3910.54,1731.929,1423.134,1630.803,823.665,1596.309,1843.181,1446.542,850.694,2297.843,856.543,883.961,501.157,1621.147,856.971,707.791,1351.166,795.198,938.608,485.179,455.671,1061.071,580.457,263.109,715.892,1587.285,993.923,1251.255,2659.143,996.502,853.854,744.677,711.983,3232.026,3662.831,807.0,555.69,1043.709,1292.106,987.334,375.225,316.734,438.411,289.699,537.944,942.885,797.012,1077.267,379.583,611.293,521.083,934.505,1175.247,499.493,1141.633,563.435,872.319,811.753,773.096,1412.344,3620.225,4714.694,669.244,1065.55,1598.224,847.615,1923.708,1020.52,1883.069,3076.446,2134.064,1453.728,11270.233,2936.896,6307.007,2166.477,1551.387,1853.874,1372.167,2298.452,1069.092,896.017,1027.708,1205.234,1794.761,2595.809,890.418,848.032,650.893,1088.28,200.664,502.739,575.785,921.978,808.706,3029.201,602.68,309.435,495.715,959.404,569.062,492.893,686.058,1227.456,2415.351,6515.3,1556.79,953.548,1004.564,1320.414,4557.466,1098.609,911.352,1232.801,1241.033,1343.423,769.908,447.129,647.478,822.26,767.131,569.507,437.851,1190.093,378.865,290.814,440.004,366.664,1587.445,389.51,1948.052,1274.222,418.255,155.696,281.607,310.623,166.909,303.48,700.347,271.28,110.636,520.183,820.569,810.861,1088.369,858.322,1295.596,2094.312,1503.768,1037.796,500.033,559.479,227.634,704.975,702.474,560.973,1364.022,508.316,349.588,640.477,527.515,1470.646,248.411,315.355,194.49,727.557,208.254,329.772,769.204,559.27,220.603,179.101,514.706,337.329,450.668,1473.433,2256.979,539.366,738.786,421.76,808.357,281.104,544.472,1304.849,1022.835,193.211,205.636,773.849,215.729,546.43,625.921,225.712,512.885,292.199,264.804,592.964,1204.967,418.402,742.071,437.497,433.652,1078.844,331.74,1040.031,872.767,1004.157,722.758,430.616,408.399,245.932,484.168,3624.12,976.418,394.652,1682.369,625.343,239.747,380.251,1597.606,848.428,708.537,664.832,371.165,750.007,1026.259,843.009,1023.456,1917.749,952.579,870.347,502.286,1363.581,780.743,1448.612,12431.885,6893.299,8886.959,3907.062,9540.759,4740.252,5895.644,16625.626,6312.555,3615.152,3860.571,2514.261,2760.668,1523.597,1871.628,2528.961,7365.0,8920.169,5768.383,6710.649,3346.652,4463.499,3666.88,6450.55,4832.119,5510.211,8186.365,3537.525,8281.314,10045.157,6383.577,5079.938,3813.839,3660.97,5728.121,7917.184,2421.103,5177.868,3136.173,2217.563,3832.957,1720.129,1543.371,1636.799,8034.61,4788.474,3850.793,1514.508,5392.819,1927.194,1163.751,1585.945,1209.542,1998.829,877.24,823.488,781.809,826.931,913.803,742.025,3002.547,1367.89,1044.189,1100.946,2047.804,2818.993,1017.674,1889.338,1032.258,579.044,748.169,927.378,1345.4,516.194,810.503,845.27,650.086,556.495,716.068,3167.786,1365.503,1120.129,1632.121,494.557,495.811,356.546,271.948,320.235,366.049,349.466,550.775,843.882,2000.798,961.087,470.513,438.616,819.214,594.347,286.774,251.089,602.025,267.413,278.638,425.458,282.646,1696.154,921.061,374.925,625.157,346.19,1447.882,338.668,501.822,996.179,1126.58,967.442,927.906,4074.406,898.707,1271.993,720.906,758.176,506.787,1384.601,2630.754,1180.051,296.364,385.161,594.547,303.281,206.3,1509.706,417.533,430.407,350.638,614.913,217.67,109.158,296.924,307.087,827.106,850.038,562.773,402.213,853.225,619.708,185.33,229.867,207.248,255.341,347.69,914.271,348.17,280.522,461.744,242.677,1689.641,1235.344,943.835,1181.751,733.24,268.104,381.13,818.733,1090.052,548.373,754.94,989.387,773.47,1064.937,1070.959,703.035,2594.209,1302.569,682.392,552.382,309.738,466.737,793.098,2376.261,856.232,754.519,404.143,168.334,1477.862,943.652,711.273,1748.362,1006.485,789.572,594.946,279.75,178.433,290.649,215.983,493.113,338.384,762.448,611.586,1334.322,294.505,303.188,134.407,516.94,1550.403,1126.795,485.425,622.304,1249.031,373.648,346.683,211.699,519.095,1088.352,529.813,523.314,772.507,209.114,687.664,329.146,352.705,444.147,395.78,325.339,513.402,784.247,986.546,1584.942,2185.948,785.321,729.112,453.787,897.861,262.964,404.52,171.003,580.24,118.207,406.641,160.17,743.848,437.773,1369.397,191.219,1229.096,398.903,403.85,322.726,970.586,568.304,478.038,404.745,1239.612,454.913,442.573,288.41,264.373,524.088,130.674,443.39,586.952,167.731,307.728,263.88,311.737,866.873,1745.621,745.983,309.615,328.348,383.704,1118.281,450.373,387.296,188.089,629.117,158.39,829.748,364.026,136.85,324.278,1060.597,707.567,409.192,443.098,510.64,923.325,605.203,716.174,198.6,554.733,1635.338,1598.253,4035.924,1229.607,1608.824,2794.958,636.725,1971.132,1481.98,1093.152,3786.967,1736.518,1289.176,1179.711,677.348,1259.158,841.34,248.067,451.306,413.411,883.511,395.721,304.827,431.303,1106.7,599.37,354.735,747.528,810.7,835.158,481.175,629.481,323.974,608.739,557.978,525.368,1225.958,840.532,1067.311,718.545,716.335,312.894,563.057,1017.419,618.553,512.007,588.984,294.695,278.158,217.027,537.444,269.51,225.5,501.376,691.99,483.791,127.283,709.697,467.43,307.414,507.697,422.858,256.808,1153.716,1055.198,1414.849,1144.706,1064.626,623.477,877.503,444.839,742.027,415.472,677.548,1051.317,655.2,370.676,1077.143,1051.053,784.457,4542.468,1733.555,1213.929,1538.198,2121.016,918.853,882.448,654.86,1728.875,631.103,301.013,661.938,933.172,370.951,202.456,406.614,314.65,592.089,26.727],\"type\":\"histogram\"},{\"marker\":{\"color\":\"#D2691E\"},\"mode\":\"lines\",\"name\":\"KDE\",\"x\":[3045.88,3047.2852525252524,3048.690505050505,3050.0957575757575,3051.5010101010103,3052.9062626262626,3054.3115151515153,3055.7167676767676,3057.1220202020204,3058.5272727272727,3059.9325252525255,3061.337777777778,3062.7430303030305,3064.148282828283,3065.5535353535356,3066.958787878788,3068.3640404040407,3069.769292929293,3071.1745454545458,3072.579797979798,3073.9850505050504,3075.390303030303,3076.7955555555554,3078.200808080808,3079.6060606060605,3081.0113131313133,3082.4165656565656,3083.8218181818183,3085.2270707070707,3086.6323232323234,3088.0375757575757,3089.4428282828285,3090.848080808081,3092.2533333333336,3093.658585858586,3095.0638383838386,3096.469090909091,3097.8743434343437,3099.279595959596,3100.6848484848488,3102.090101010101,3103.4953535353534,3104.900606060606,3106.3058585858585,3107.711111111111,3109.1163636363635,3110.5216161616163,3111.9268686868686,3113.3321212121214,3114.7373737373737,3116.1426262626264,3117.5478787878787,3118.9531313131315,3120.358383838384,3121.7636363636366,3123.168888888889,3124.5741414141416,3125.979393939394,3127.3846464646467,3128.789898989899,3130.1951515151513,3131.600404040404,3133.0056565656564,3134.410909090909,3135.8161616161615,3137.2214141414142,3138.6266666666666,3140.0319191919193,3141.4371717171716,3142.8424242424244,3144.2476767676767,3145.6529292929295,3147.0581818181818,3148.4634343434345,3149.868686868687,3151.2739393939396,3152.679191919192,3154.0844444444447,3155.489696969697,3156.8949494949493,3158.300202020202,3159.7054545454544,3161.110707070707,3162.5159595959594,3163.921212121212,3165.3264646464645,3166.7317171717173,3168.1369696969696,3169.5422222222223,3170.9474747474746,3172.3527272727274,3173.7579797979797,3175.1632323232325,3176.568484848485,3177.9737373737375,3179.37898989899,3180.7842424242426,3182.189494949495,3183.5947474747472,3185.0],\"y\":[0.001832905419240713,0.0015170993773343943,0.0009811990405335794,0.0010910781869862753,0.001662787664619852,0.002276584209048065,0.003017679469815101,0.004091626542089751,0.005452920992053675,0.006818537038424319,0.0076664779747402535,0.007643887894555952,0.007344902200072563,0.00827273925583825,0.011220488982456029,0.01494681923660121,0.016672754263443067,0.015298211710060586,0.013000656836147326,0.01136447782936633,0.009905415113226086,0.007991277793749363,0.005915182769079316,0.004603614839180802,0.004340216581875808,0.004677084159634987,0.004804286094145265,0.003945664227425191,0.0025142257578005694,0.0014727830724446968,0.0011591657181478472,0.0015827815995405762,0.0026670028851318566,0.003810420375174876,0.004026389180218125,0.003107185282237217,0.001940076730122543,0.0013880150787554427,0.0015444989246854268,0.0023609061649200076,0.0037401025635127546,0.005029582983599697,0.005321434602966492,0.004778565138234207,0.004284633110071723,0.004142142333983544,0.004650245486454227,0.005790340541463709,0.0068018904562159735,0.007335214235017366,0.008011875247544532,0.009032977214800161,0.009862320541122151,0.01015891479438546,0.010077897051723251,0.009700191176833918,0.00944402389099212,0.010385374840307136,0.012487699392384763,0.014125807036359036,0.014335489751832464,0.013760773754902053,0.013070724606546664,0.012663567468535765,0.013407581002278695,0.0152918031502357,0.01671953731557649,0.01690758767766308,0.0165814827586469,0.01570664895796692,0.014255369464538745,0.013369278115428072,0.012993378487870194,0.011780241643981209,0.009592167939552232,0.007696976248164002,0.006823155935995189,0.006619023196157732,0.007110669748385475,0.008153180108070628,0.008357004173573936,0.007467120695723313,0.006541623694037697,0.005979030384818917,0.00565790251287167,0.005607397002735248,0.00599245781550611,0.006338445734583271,0.0060092038421343755,0.0053319582929410685,0.004754442260061802,0.004333231721163359,0.004227903631578969,0.004279536987396199,0.003930156107007355,0.0029754130410062354,0.0017041868280610027,0.0007672145372132436,0.0005056108010257643,0.0005155116532610217],\"type\":\"scatter\"},{\"marker\":{\"color\":\"black\",\"size\":10},\"mode\":\"markers\",\"name\":\"Peaks\",\"x\":[3059.9325252525255,3068.3640404040407,3082.4165656565656,3093.658585858586,3104.900606060606,3120.358383838384,3130.1951515151513,3140.0319191919193,3158.300202020202,3168.1369696969696,3176.568484848485],\"y\":[0.0076664779747402535,0.016672754263443067,0.004804286094145265,0.004026389180218125,0.005321434602966492,0.01015891479438546,0.014335489751832464,0.01690758767766308,0.008357004173573936,0.006338445734583271,0.004279536987396199],\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"shapes\":[{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3059.9325252525255,\"x1\":3059.9325252525255,\"xref\":\"x\",\"y0\":0,\"y1\":0.007344902200072563,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3068.3640404040407,\"x1\":3068.3640404040407,\"xref\":\"x\",\"y0\":0,\"y1\":0.001159165718147847,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3082.4165656565656,\"x1\":3082.4165656565656,\"xref\":\"x\",\"y0\":0,\"y1\":0.004340216581875808,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3093.658585858586,\"x1\":3093.658585858586,\"xref\":\"x\",\"y0\":0,\"y1\":0.0013880150787554425,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3104.900606060606,\"x1\":3104.900606060606,\"xref\":\"x\",\"y0\":0,\"y1\":0.004142142333983544,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3120.358383838384,\"x1\":3120.358383838384,\"xref\":\"x\",\"y0\":0,\"y1\":0.00944402389099212,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3130.1951515151513,\"x1\":3130.1951515151513,\"xref\":\"x\",\"y0\":0,\"y1\":0.012663567468535765,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3140.0319191919193,\"x1\":3140.0319191919193,\"xref\":\"x\",\"y0\":0,\"y1\":0.0009811990405335785,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3158.300202020202,\"x1\":3158.300202020202,\"xref\":\"x\",\"y0\":0,\"y1\":0.006619023196157732,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3168.1369696969696,\"x1\":3168.1369696969696,\"xref\":\"x\",\"y0\":0,\"y1\":0.005607397002735248,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3176.568484848485,\"x1\":3176.568484848485,\"xref\":\"x\",\"y0\":0,\"y1\":0.004227903631578969,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3062.5744,\"xref\":\"x\",\"y0\":0.007505690087406408,\"y1\":0.007505690087406408,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.008915959990795457,\"y1\":0.008915959990795457,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3079.2688000000003,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.0045722513380105365,\"y1\":0.0045722513380105365,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3097.3544,\"xref\":\"x\",\"y0\":0.002707202129486784,\"y1\":0.002707202129486784,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3108.484,\"xref\":\"x\",\"y0\":0.004731788468475018,\"y1\":0.004731788468475018,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3123.7872,\"xref\":\"x\",\"y0\":0.00980146934268879,\"y1\":0.00980146934268879,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3133.5256,\"xref\":\"x\",\"y0\":0.013499528610184115,\"y1\":0.013499528610184115,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.00894439335909833,\"y1\":0.00894439335909833,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3153.0024,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.007488013684865834,\"y1\":0.007488013684865834,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3164.132,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.005972921368659259,\"y1\":0.005972921368659259,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3173.8704,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.004253720309487584,\"y1\":0.004253720309487584,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3059.9325252525255,\"x1\":3059.9325252525255,\"xref\":\"x\",\"y0\":0,\"y1\":0.0076664779747402535,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3068.3640404040407,\"x1\":3068.3640404040407,\"xref\":\"x\",\"y0\":0,\"y1\":0.016672754263443067,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3082.4165656565656,\"x1\":3082.4165656565656,\"xref\":\"x\",\"y0\":0,\"y1\":0.004804286094145265,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3093.658585858586,\"x1\":3093.658585858586,\"xref\":\"x\",\"y0\":0,\"y1\":0.004026389180218125,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3104.900606060606,\"x1\":3104.900606060606,\"xref\":\"x\",\"y0\":0,\"y1\":0.005321434602966492,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3120.358383838384,\"x1\":3120.358383838384,\"xref\":\"x\",\"y0\":0,\"y1\":0.01015891479438546,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3130.1951515151513,\"x1\":3130.1951515151513,\"xref\":\"x\",\"y0\":0,\"y1\":0.014335489751832464,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3140.0319191919193,\"x1\":3140.0319191919193,\"xref\":\"x\",\"y0\":0,\"y1\":0.01690758767766308,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3158.300202020202,\"x1\":3158.300202020202,\"xref\":\"x\",\"y0\":0,\"y1\":0.008357004173573936,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3168.1369696969696,\"x1\":3168.1369696969696,\"xref\":\"x\",\"y0\":0,\"y1\":0.006338445734583271,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3176.568484848485,\"x1\":3176.568484848485,\"xref\":\"x\",\"y0\":0,\"y1\":0.004279536987396199,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3062.5744,\"xref\":\"x\",\"y0\":0.007505690087406408,\"y1\":0.007505690087406408,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.008915959990795457,\"y1\":0.008915959990795457,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3079.2688000000003,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.0045722513380105365,\"y1\":0.0045722513380105365,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3097.3544,\"xref\":\"x\",\"y0\":0.002707202129486784,\"y1\":0.002707202129486784,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3108.484,\"xref\":\"x\",\"y0\":0.004731788468475018,\"y1\":0.004731788468475018,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3123.7872,\"xref\":\"x\",\"y0\":0.00980146934268879,\"y1\":0.00980146934268879,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3133.5256,\"xref\":\"x\",\"y0\":0.013499528610184115,\"y1\":0.013499528610184115,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.00894439335909833,\"y1\":0.00894439335909833,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3153.0024,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.007488013684865834,\"y1\":0.007488013684865834,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3164.132,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.005972921368659259,\"y1\":0.005972921368659259,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3173.8704,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.004253720309487584,\"y1\":0.004253720309487584,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3059.9325252525255,\"x1\":3059.9325252525255,\"xref\":\"x\",\"y0\":0,\"y1\":0.0076664779747402535,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3068.3640404040407,\"x1\":3068.3640404040407,\"xref\":\"x\",\"y0\":0,\"y1\":0.016672754263443067,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3082.4165656565656,\"x1\":3082.4165656565656,\"xref\":\"x\",\"y0\":0,\"y1\":0.004804286094145265,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3093.658585858586,\"x1\":3093.658585858586,\"xref\":\"x\",\"y0\":0,\"y1\":0.004026389180218125,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3104.900606060606,\"x1\":3104.900606060606,\"xref\":\"x\",\"y0\":0,\"y1\":0.005321434602966492,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3120.358383838384,\"x1\":3120.358383838384,\"xref\":\"x\",\"y0\":0,\"y1\":0.01015891479438546,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3130.1951515151513,\"x1\":3130.1951515151513,\"xref\":\"x\",\"y0\":0,\"y1\":0.014335489751832464,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3140.0319191919193,\"x1\":3140.0319191919193,\"xref\":\"x\",\"y0\":0,\"y1\":0.01690758767766308,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3158.300202020202,\"x1\":3158.300202020202,\"xref\":\"x\",\"y0\":0,\"y1\":0.008357004173573936,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3168.1369696969696,\"x1\":3168.1369696969696,\"xref\":\"x\",\"y0\":0,\"y1\":0.006338445734583271,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3176.568484848485,\"x1\":3176.568484848485,\"xref\":\"x\",\"y0\":0,\"y1\":0.004279536987396199,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3062.5744,\"xref\":\"x\",\"y0\":0.007505690087406408,\"y1\":0.007505690087406408,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.008915959990795457,\"y1\":0.008915959990795457,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3079.2688000000003,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.0045722513380105365,\"y1\":0.0045722513380105365,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3097.3544,\"xref\":\"x\",\"y0\":0.002707202129486784,\"y1\":0.002707202129486784,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3108.484,\"xref\":\"x\",\"y0\":0.004731788468475018,\"y1\":0.004731788468475018,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3123.7872,\"xref\":\"x\",\"y0\":0.00980146934268879,\"y1\":0.00980146934268879,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3133.5256,\"xref\":\"x\",\"y0\":0.013499528610184115,\"y1\":0.013499528610184115,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.00894439335909833,\"y1\":0.00894439335909833,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3153.0024,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.007488013684865834,\"y1\":0.007488013684865834,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3164.132,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.005972921368659259,\"y1\":0.005972921368659259,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3173.8704,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.004253720309487584,\"y1\":0.004253720309487584,\"yref\":\"y\"}]},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('f0efc821-18d5-43b5-ad6e-1133ea0ad873');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}}]},{"cell_type":"code","source":["# peaks  # ndarray\n","# kdx  # ndarray\n","# kdy  # ndarray\n","# kdx.min()\n","left_base * ticks_per_sample\n","# volume"],"metadata":{"id":"zqj944n-WzyZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(peak_y)\n","print(peak_props['prominences'])\n","peak_props"],"metadata":{"id":"Rvqv0RGojo9h"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xpyP5t8Ht_pE","jp-MarkdownHeadingCollapsed":true,"tags":[]},"source":["### calc recursive indi's min_period"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":235},"executionInfo":{"elapsed":15,"status":"error","timestamp":1645810346810,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"N1Hbm4OA4Tkk","outputId":"e6a3fc2f-316c-4a0d-9c91-df759c816b88"},"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-4-c602b9e1b7e6>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mticker_prcn\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_precision_by_price\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mres_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclose\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mtarget_len\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m300000\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mslice_len_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m50\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m10000\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m100\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mslice_len_list\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minsert\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget_len\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'res_df' is not defined"]}],"source":["ticker_prcn = get_precision_by_price(res_df.close.iloc[-1]) + 2\n","\n","target_len = 300000\n","slice_len_list = list(range(50, 10000, 100))\n","slice_len_list.insert(0, target_len)\n","\n","start_0 = time.time()\n","# prev_int_, prev_pnts_ = None, None\n","offset = 1\n","\n","for sl_idx, sample_len in enumerate(slice_len_list):\n","\n","  sample_df = res_df.iloc[-sample_len -offset:-offset]\n","  sample_len2 = sample_len\n","\n","  # --------- input using indi.s --------- #\n","  # res = ema_v0(sample_df['close'], 190)\n","  res = rsi(sample_df, 14)\n","\n","    #    to_htf()    #\n","  # df_5T = to_htf(sample_df, itv_='5T', offset='1h')\n","  # sample_len2 = len(df_5T)\n","\n","  # # --------- input using htf_indi. --------- #\n","  # res = ema(df_5T['close'], 195)\n","  # -------------------------------------- #\n","\n","  res_last_row = res.iloc[-1]\n","  if pd.isnull(res_last_row):\n","    continue\n","\n","  # print(res_last_row)\n","  # break\n","\n","  # sample_df = sample_df.join(to_lower_tf_v2(sample_df, df_5T, [-1]), how='inner')\n","\n","\n","  #   자리수 분할 계산    #\n","  int_, points_ = str(res_last_row).split('.')\n","  pnts_ = points_[:ticker_prcn]\n","\n","  if sl_idx == 0:\n","    target_int_ = int_\n","    target_pnts_ = pnts_\n","    print(\"target {} ({}) -> {} {}\".format(sample_len, sample_len2, int_, points_))\n","\n","  else:\n","    if target_int_ == int_ and target_pnts_ == pnts_:\n","      # print(sample_len, \"({})\".format(sample_len2), '->', int_, pnts_, end='\\n\\n')\n","      print(\"{} ({}) -> {} {}\\n\".format(sample_len, sample_len2, int_, points_))\n","      break\n","\n","print(time.time() - start_0)  # (1301)(1361)(1301)"]},{"cell_type":"markdown","metadata":{"id":"rrIGjmUzqU-D","tags":[]},"source":["## import utils & config"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SeJan_0t95yL"},"outputs":[],"source":["frame_ver = \"0114_htf\"\n","ID_arr = np.array(['v3', 'v5_2'])\n","\n","utils_public_name = \"{}.utils.{}_utils_public\".format(strat_pkg, frame_ver)\n","utils_public_lib = importlib.import_module(utils_public_name)\n","utils_public = utils_public_lib   # temporary\n","\n","u_name_list = [\"{}.utils.{}_utils_{}\".format(strat_pkg, frame_ver, id_) for id_ in ID_arr]\n","utils_arr = np.array([importlib.import_module(u_name) for u_name in u_name_list])\n","\n","config_name_list = [\"{}_config_{}.json\".format(frame_ver, id_) for id_ in ID_arr]\n","cfg_path_list = [os.path.join(current_path, strat_pkg, \"config\", name_) for name_ in config_name_list]\n","cfg_file_list = [open(cfg_path) for cfg_path in cfg_path_list]\n","config_arr = np.array([EasyDict(json.load(cfg_)) for cfg_ in cfg_file_list])\n","\n","# ------ opened files should be closed --> 닫지 않으면 reopen 시 error occurs ------ #\n","_ = [cfg_.close() for cfg_ in cfg_file_list]\n","show_plot = 1   # idep's var - do not touch"]},{"cell_type":"markdown","metadata":{"id":"leSQlImg4_9L","jp-MarkdownHeadingCollapsed":true,"tags":[]},"source":["### utils_"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CB2yZdQ95Cdg"},"outputs":[],"source":["# from funcs.funcs_indicator_candlescore import *\n","# import numpy as np\n","\n","def get_line(touch, rtc_):\n","  touch_copy = touch.copy()\n","  touch_line = rtc_.copy()\n","\n","  nan_idx = np.isnan(touch_copy)\n","  touch_copy[nan_idx] = 0   # for indexing array\n","  touch_line[touch_copy.astype(int)]\n","  touch_line[nan_idx] = np.nan   # for true comp.\n","\n","  return touch_line\n","\n","\n","def enlist_rtc(res_df, config, np_timeidx):\n","    strat_version = config.strat_version\n","    # ------------ rtc_gap ------------ #    \n","    short_epout_1_, long_epout_1_ = 'short_epout_1_{}'.format(strat_version), 'long_epout_1_{}'.format(strat_version)\n","    short_epout_0_, long_epout_0_ = 'short_epout_0_{}'.format(strat_version), 'long_epout_0_{}'.format(strat_version)\n","    short_tp_1_, long_tp_1_ = 'short_tp_1_{}'.format(strat_version), 'long_tp_1_{}'.format(strat_version)\n","    short_tp_0_, long_tp_0_ = 'short_tp_0_{}'.format(strat_version), 'long_tp_0_{}'.format(strat_version)\n","\n","    b1_itv_num = to_itvnum(config.loc_set.point.epout_itv0)\n","    b2_itv_num = to_itvnum(config.loc_set.point.epout_itv0) * 2  # multi 2 for imb_v2\n","    \n","    res_df[short_tp_1_] = res_df['close_{}'.format(config.loc_set.point.tp_itv1)].shift(b1_itv_num)  # rtc 의 기준이 되어줌 (ei_k 도 포함)\n","    res_df[short_tp_0_] = res_df['low_{}'.format(config.loc_set.point.tp_itv0)].shift(b2_itv_num)\n","    res_df[long_tp_1_] = res_df['close_{}'.format(config.loc_set.point.tp_itv1)].shift(b1_itv_num)\n","    res_df[long_tp_0_] = res_df['high_{}'.format(config.loc_set.point.tp_itv0)].shift(b2_itv_num)\n","\n","    res_df[short_epout_1_] = res_df['high_{}'.format(config.loc_set.point.epout_itv1)]  # rtc 의 기준이 되어줌 (ei_k 도 포함)\n","    res_df[short_epout_0_] = res_df['low_{}'.format(config.loc_set.point.epout_itv0)].shift(b2_itv_num)\n","    res_df[long_epout_1_] = res_df['low_{}'.format(config.loc_set.point.epout_itv1)]\n","    res_df[long_epout_0_] = res_df['high_{}'.format(config.loc_set.point.epout_itv0)].shift(b2_itv_num)\n","\n","    # ------ inversion ------ #\n","    if config.pos_set.short_inversion or config.pos_set.long_inversion:\n","      res_df.rename({short_tp_1_: long_tp_1_, long_tp_1_: short_tp_1_}, axis=1, inplace=True)\n","      res_df.rename({short_tp_0_: long_tp_0_, long_tp_0_: short_tp_0_}, axis=1, inplace=True)\n","      res_df.rename({short_epout_1_: long_epout_1_, long_epout_1_: short_epout_1_}, axis=1, inplace=True)\n","      res_df.rename({short_epout_0_: long_epout_0_, long_epout_0_: short_epout_0_}, axis=1, inplace=True)\n","\n","    res_df['short_tp_gap_{}'.format(strat_version)] = abs(res_df[short_tp_1_] - res_df[short_tp_0_])\n","    res_df['long_tp_gap_{}'.format(strat_version)] = abs(res_df[long_tp_1_] - res_df[long_tp_0_])\n","    res_df['short_epout_gap_{}'.format(strat_version)] = abs(res_df[short_epout_1_] - res_df[short_epout_0_])\n","    res_df['long_epout_gap_{}'.format(strat_version)] = abs(res_df[long_epout_1_] - res_df[long_epout_0_])\n","    \n","    # ------------ dtk_gap ------------ #\n","    # res_df['short_dtk_1_{}'.format(strat_version)] = res_df['bb_lower_%s' % config.loc_set.zone.dtk_itv]\n","    # res_df['short_dtk_0_{}'.format(strat_version)] = res_df['dc_upper_%s' % config.loc_set.zone.dtk_itv]\n","    # res_df['long_dtk_1_{}'.format(strat_version)] = res_df['bb_upper_%s' % config.loc_set.zone.dtk_itv]\n","    # res_df['long_dtk_0_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.zone.dtk_itv]\n","\n","    # res_df['short_dtk_gap_{}'.format(strat_version)] = abs(\n","    #     res_df['short_dtk_0_{}'.format(strat_version)] - res_df['short_dtk_1_{}'.format(strat_version)])\n","    # res_df['long_dtk_gap_{}'.format(strat_version)] = abs(\n","    #     res_df['long_dtk_1_{}'.format(strat_version)] - res_df['long_dtk_0_{}'.format(strat_version)])\n","\n","    return\n","\n","\n","def enlist_tr(res_df, config, np_timeidx, mode='OPEN'):\n","    strat_version = config.strat_version\n","    # ---------------- point definition : get open_res ---------------- #    \n","    len_df = len(res_df)\n","    short_open_res = np.ones(len_df)\n","    long_open_res = np.ones(len_df)\n","    \n","    short_tp_1_col, short_tp_0_col, short_tp_gap_col = 'short_tp_1_{}'.format(strat_version), 'short_tp_0_{}'.format(strat_version), 'short_tp_gap_{}'.format(strat_version) \n","    long_tp_1_col, long_tp_0_col, long_tp_gap_col = 'long_tp_1_{}'.format(strat_version), 'long_tp_0_{}'.format(strat_version), 'long_tp_gap_{}'.format(strat_version) \n","    short_epout_1_col, short_epout_0_col, short_epout_gap_col = 'short_epout_1_{}'.format(strat_version), 'short_epout_0_{}'.format(strat_version), 'short_epout_gap_{}'.format(strat_version) \n","    long_epout_1_col, long_epout_0_col, long_epout_gap_col = 'long_epout_1_{}'.format(strat_version), 'long_epout_0_{}'.format(strat_version), 'long_epout_gap_{}'.format(strat_version) \n","\n","    data_cols = ['open', 'high', 'low']   # Todo - public_indi 이전에 해야할지도 모름 # 'close', 'haopen', 'hahigh', 'halow', 'haclose'\n","    tp_cols = [short_tp_1_col, short_tp_0_col, short_tp_gap_col, long_tp_1_col, long_tp_0_col, long_tp_gap_col]   # Todo - public_indi 이전에 해야할지도 모름\n","    epout_cols = [short_epout_1_col, short_epout_0_col, short_epout_gap_col, long_epout_1_col, long_epout_0_col, long_epout_gap_col]   # Todo - public_indi 이전에 해야할지도 모름\n","\n","    short_tp_1_, short_tp_0_, short_tp_gap_, long_tp_1_, long_tp_0_, long_tp_gap_ = [res_df[col_].to_numpy() for col_ in tp_cols]\n","    short_epout_1_, short_epout_0_, short_epout_gap_, long_epout_1_, long_epout_0_, long_epout_gap_ = [res_df[col_].to_numpy() for col_ in epout_cols]\n","    open, high, low = [res_df[col_].to_numpy() for col_ in data_cols]\n","\n","    tf_entry = to_itvnum(config.loc_set.point.tf_entry)\n","    short_open_res *= np_timeidx % tf_entry == tf_entry - 1\n","    # res_df['short_open_{}'.format(strat_version)] = short_open_res\n","\n","    long_open_res *= np_timeidx % tf_entry == tf_entry - 1 \n","    # res_df['long_open_{}'.format(strat_version)] = long_open_res\n","\n","    # --------------- tp --------------- #\n","    tpg = 1 + config.tr_set.tp_gap\n","    res_df['short_tp_{}'.format(strat_version)] = short_tp_1_ - short_tp_gap_ * tpg\n","    res_df['long_tp_{}'.format(strat_version)] = long_tp_1_ + long_tp_gap_ * tpg\n","\n","    # ---------------- epout ---------------- #\n","    # -------- limit_ep -------- #\n","    base_period = 'T'\n","    if config.ep_set.entry_type == \"LIMIT\":\n","      epg = 0.5 + config.tr_set.ep_gap\n","      res_df['short_ep_{}'.format(strat_version)] = short_epout_1_ + short_epout_gap_ * epg\n","      res_df['long_ep_{}'.format(strat_version)] = long_epout_1_ - long_epout_gap_ * epg\n","\n","    # -------- market_ep -------- #\n","    else:\n","        res_df['short_ep_{}'.format(strat_version)] = res_df['close']\n","        res_df['long_ep_{}'.format(strat_version)] = res_df['close']\n","\n","    # --------------- out --------------- #\n","    outg = config.tr_set.out_gap\n","    res_df['short_out_{}'.format(strat_version)] = short_epout_0_ + short_epout_gap_ * outg\n","    res_df['long_out_{}'.format(strat_version)] = long_epout_0_ - long_epout_gap_ * outg\n","\n","    # ------ validation ------ #\n","    short_tp_ = res_df['short_tp_{}'.format(strat_version)].to_numpy()\n","    short_ep_ = res_df['short_ep_{}'.format(strat_version)].to_numpy()\n","    short_out_ = res_df['short_out_{}'.format(strat_version)].to_numpy()\n","    short_open_res *= (short_tp_ < short_ep_) & (short_ep_ < short_out_)\n","    res_df['short_open_{}'.format(strat_version)] = short_open_res\n","\n","    long_tp_ = res_df['long_tp_{}'.format(strat_version)].to_numpy()\n","    long_ep_ = res_df['long_ep_{}'.format(strat_version)].to_numpy()\n","    long_out_ = res_df['long_out_{}'.format(strat_version)].to_numpy()\n","    long_open_res *= (long_tp_ > long_ep_) & (long_ep_ > long_out_)    \n","    res_df['long_open_{}'.format(strat_version)] = long_open_res\n","\n","    # ------ tr ------ #\n","    res_df['short_tr_{}'.format(strat_version)] = abs((short_ep_ / short_tp_ - config.trader_set.limit_fee - 1) / (short_ep_ / short_out_ - config.trader_set.market_fee - 1))\n","    res_df['long_tr_{}'.format(strat_version)] = abs((long_tp_ / long_ep_ - config.trader_set.limit_fee - 1) / (long_out_ / long_ep_ - config.trader_set.market_fee - 1))\n","    \n","    # -------- zoned_ep -------- #\n","    if config.tr_set.c_ep_gap != \"None\":\n","        # res_df['short_ep_org_{}'.format(strat_version)] = res_df['short_ep_{}'.format(strat_version)].copy()\n","        # res_df['long_ep_org_{}'.format(strat_version)] = res_df['long_ep_{}'.format(strat_version)].copy()\n","        res_df['short_ep2_{}'.format(strat_version)] = short_epout_1_ + short_epout_gap_ * config.tr_set.c_ep_gap\n","        res_df['long_ep2_{}'.format(strat_version)] = long_epout_1_ - long_epout_gap_ * config.tr_set.c_ep_gap\n","\n","    # -------- zoned_out -------- #\n","    if config.tr_set.t_out_gap != \"None\":\n","        # res_df['short_out_org_{}'.format(strat_version)] = res_df['short_out_{}'.format(strat_version)].copy()\n","        # res_df['long_out_org_{}'.format(strat_version)] = res_df['long_out_{}'.format(strat_version)].copy()\n","        res_df['short_out2_{}'.format(strat_version)] = res_df['short_epout_0_{}'.format(strat_version)] + res_df['short_epout_gap_{}'.format(strat_version)] * config.tr_set.t_out_gap\n","        res_df['long_out2_{}'.format(strat_version)] = res_df['long_epout_0_{}'.format(strat_version)] - res_df['long_epout_gap_{}'.format(strat_version)] * config.tr_set.t_out_gap\n","\n","    # --------------- bias --------------- #  Todo - 추후, bias_set 독립시키는게 좋지 않을까\n","    bias_info_tick = config.tr_set.bias_info_tick\n","    # ------ bias_info can use future_data ------ #\n","    # res_df['short_bias_info_{}'.format(strat_version)] = res_df['dc_lower_T'].shift(-bias_info_tick)  # open / ep_tick 으로부터 bias_info_tick 만큼\n","    # res_df['long_bias_info_{}'.format(strat_version)] = res_df['dc_upper_T'].shift(-bias_info_tick)\n","    res_df['short_bias_info_{}'.format(strat_version)] = res_df['low'].rolling(bias_info_tick).min().shift(-bias_info_tick)\n","    res_df['long_bias_info_{}'.format(strat_version)] = res_df['high'].rolling(bias_info_tick).max().shift(-bias_info_tick)\n","\n","    # bias_thresh 는 결국 tp 가 될 것\n","    res_df['short_bias_thresh_{}'.format(strat_version)] = res_df['short_tp_{}'.format(strat_version)]\n","    res_df['long_bias_thresh_{}'.format(strat_version)] = res_df['long_tp_{}'.format(strat_version)]\n","    # res_df['short_bias_thresh_{}'.format(strat_version)] = res_df['dc_lower_T'] - res_df['short_tp_gap_{}'.format(strat_version)] * config.tr_set.bias_gap\n","    # res_df['long_bias_thresh_{}'.format(strat_version)] = res_df['dc_upper_T'] + res_df['long_tp_gap_{}'.format(strat_version)] * config.tr_set.bias_gap \n","        \n","    return\n"]},{"cell_type":"markdown","metadata":{"id":"HKdUKKl-483N","jp-MarkdownHeadingCollapsed":true,"tags":[]},"source":["### utils_public"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nzOYWA2kqZ0d"},"outputs":[],"source":["# from funcs.funcs_indicator import *\n","# from funcs.funcs_trader import *\n","# import logging\n","# from ast import literal_eval\n","\n","sys_log = logging.getLogger()\n","\n","\n","class OrderSide:\n","    BUY = \"BUY\"\n","    SELL = \"SELL\"\n","    INVALID = None\n","\n","\n","def lvrg_set(res_df, config, open_side, ep_, out_, fee, limit_leverage=50):\n","    strat_version = config.strat_version\n","    if not pd.isnull(out_) and not config.lvrg_set.static_lvrg:\n","      if strat_version in ['v3']:\n","        if open_side == OrderSide.SELL:\n","          loss = out_ / ep_\n","        else:\n","          loss = ep_ / out_\n","      else:  # 이 phase 가 정석, 윗 phase 는 결과가 수익 극대화라 사용함\n","        if open_side == OrderSide.SELL:\n","          loss = ep_ / out_          \n","        else:\n","          loss = out_ / ep_\n","\n","        config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(loss - 1 - (fee + config.trader_set.market_fee))\n","\n","    if not config.lvrg_set.allow_float:\n","        config.lvrg_set.leverage = int(config.lvrg_set.leverage)\n","\n","    # ------------ leverage rejection ------------ #\n","    # 감당하기 힘든 fluc. 의 경우 진입하지 않음 - dynamic_lvrg 사용 경우\n","    if config.lvrg_set.leverage < 1 and config.lvrg_set.lvrg_rejection:\n","    # if config.lvrg_set.leverage >= 1 and config.lvrg_set.lvrg_rejection:\n","        return None\n","    config.lvrg_set.leverage = min(limit_leverage, max(config.lvrg_set.leverage, 1))\n","\n","    return config.lvrg_set.leverage\n","\n","\n","def sync_check(df_, config, order_side=\"OPEN\", row_slice=True):\n","    try:\n","        make_itv_list = [m_itv.replace('m', 'T') for m_itv in literal_eval(config.trader_set.itv_list)]\n","        row_list = literal_eval(config.trader_set.row_list)\n","        rec_row_list = literal_eval(config.trader_set.rec_row_list)\n","        offset_list = literal_eval(config.trader_set.offset_list)\n","\n","        assert len(make_itv_list) == len(offset_list), \"length of itv & offset_list should be equal\"\n","        htf_df_list = [to_htf(df_, itv_=itv_, offset=offset_) for itv_idx, (itv_, offset_)\n","                       in enumerate(zip(make_itv_list, offset_list)) if itv_idx != 0]  #\n","        htf_df_list.insert(0, df_)\n","\n","        # for htf_df_ in htf_df_list:\n","        #     print(htf_df_.tail())\n","\n","        #       Todo        #\n","        #        1. row_list calc.\n","        #           a. indi. 를 만들기 위한 최소 period 가 존재하고, 그 indi. 를 사용한 lb_period 가 존재함\n","        #           b. => default_period + lb_period\n","        #               i. from sync_check, public_indi, ep_point2, ep_dur 의 tf 별 max lb_period check\n","        #                   1. default_period + max lb_period check\n","        #                       a. 현재까지 lb_period_list\n","        #                           h_prev_idx (open / close) 60\n","        #                           dc_period 135\n","        #                           zone_dc_period 135\n","\n","        # --------- slicing (in trader phase only) --------- #\n","        #               --> latency 영향도가 높은 곳은 이곳\n","        if row_slice:   # recursive 가 아닌 indi. 의 latency 를 고려한 slicing\n","            df, df_5T, df_15T, df_30T, df_4H = [df_s.iloc[-row_list[row_idx]:].copy() for row_idx, df_s in enumerate(htf_df_list)]\n","            rec_df, rec_df_5T, rec_df_15T, rec_df_30T, rec_df_4H = [df_s.iloc[-rec_row_list[row_idx]:].copy() for row_idx, df_s in enumerate(htf_df_list)]\n","        else:\n","            df, df_5T, df_15T, df_30T, df_4H = htf_df_list\n","            rec_df, rec_df_5T, rec_df_15T, rec_df_30T, rec_df_4H = htf_df_list\n","\n","        # --------- add indi. --------- #\n","\n","        #        1. 필요한 indi. 는 enlist_epouttp & mr_check 보면서 삽입\n","        #        2. min use_rows 계산을 위해서, tf 별로 gathering 함        #\n","        start_0 = time.time()\n","\n","        df = dc_line(df, None, '1m', dc_period=20)\n","        df = bb_line(df, None, '1m')\n","        # print(df.tail())\n","\n","        df = dc_line(df, df_5T, '5T')\n","        df = bb_line(df, df_5T, '5T')\n","\n","        df = dc_line(df, df_15T, '15T')\n","        df = bb_line(df, df_15T, '15T')\n","\n","        df = bb_line(df, df_30T, '30T')\n","\n","        # print(time.time() - start_0)\n","\n","        # start_0 = time.time()\n","        df = bb_line(df, df_4H, '4H')\n","        # print(time.time() - start_0)\n","\n","        rec_df['rsi_1m'] = rsi(rec_df, 14)  # Todo - recursive, 250 period\n","        df = df.join(to_lower_tf_v2(df, rec_df.iloc[:, [-1]], [-1], backing_i=0), how='inner')  # <-- join same_tf manual\n","        # print(df.rsi_1m.tail())\n","\n","        if order_side in [\"OPEN\"]:\n","            rec_df_5T['ema_5T'] = ema(rec_df_5T['close'], 195)  # Todo - recursive, 1100 period (5T)\n","            df = df.join(to_lower_tf_v2(df, rec_df_5T, [-1]), how='inner')\n","\n","    except Exception as e:\n","        sys_log.error(\"error in sync_check :\", e)\n","    else:\n","        return df\n","\n","\n","def public_indi(res_df, config, np_timeidx, order_side=\"OPEN\"):\n","\n","    strat_version = config.strat_version\n","    res_df = dc_level(res_df, '5T', 1)\n","    res_df = bb_level(res_df, '5T', 1)\n","    # res_df = st_level(res_df, '5T', 1)\n","\n","    res_df = dc_level(res_df, '15T', 1)\n","    res_df = bb_level(res_df, '15T', 1)\n","    res_df = dtk_plot(res_df, dtk_itv2='15T', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line, np_timeidx=np_timeidx)\n","\n","    # res_df = st_level(res_df, '15T', 1)\n","\n","    # res_df = dc_level(res_df, '30T', 1)\n","    # res_df = bb_level(res_df, '30T', 1)\n","    # res_df = st_level(res_df, '30T', 1)\n","\n","    # res_df = bb_level(res_df, 'H', 1)\n","\n","    res_df = bb_level(res_df, '4H', 1)\n","\n","    res_df['dc_upper_v2'.format(strat_version)] = res_df['high'].rolling(config.loc_set.zone.dc_period).max()\n","    res_df['dc_lower_v2'.format(strat_version)] = res_df['low'].rolling(config.loc_set.zone.dc_period).min()\n","\n","    res_df['zone_dc_upper_v2'.format(strat_version)] = res_df['high'].rolling(config.loc_set.zone.zone_dc_period).max()\n","    res_df['zone_dc_lower_v2'.format(strat_version)] = res_df['low'].rolling(config.loc_set.zone.zone_dc_period).min()\n","\n","    if order_side in [\"OPEN\"]:\n","        candle_score_v2(res_df, 'T', unsigned=False)\n","\n","        h_candle_v3(res_df, '5T')\n","        h_candle_v3(res_df, '15T')\n","        h_candle_v3(res_df, 'H')\n","\n","        hc_itv = 'H'\n","        h_candle_col = ['open_{}'.format(hc_itv), 'high_{}'.format(hc_itv), 'low_{}'.format(hc_itv), 'close_{}'.format(hc_itv)]\n","        candle_score_v2(res_df, hc_itv, ohlc_col=h_candle_col, unsigned=False)\n","\n","    #     temp indi.    #\n","    # res_df[\"ma30_1m\"] = res_df['close'].rolling(30).mean()\n","    # res_df[\"ma60_1m\"] = res_df['close'].rolling(60).mean()\n","    # res_df = dtk_plot(res_df, dtk_itv2='15T', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line, np_timeidx=np_timeidx)\n","\n","    return\n","\n","def ep_out(res_df, config, op_idx, e_j, tp_j, np_datas, open_side):  \n","  h, l = np_datas\n","  strat_version = config.strat_version\n","  ep_out = 0\n","  \n","  if config.ep_set.ep_out_tick != \"None\":\n","    if e_j - op_idx >= config.ep_set.ep_out_tick:\n","      ep_out = 1\n","  \n","  if config.ep_set.ei_k != \"None\":\n","    if open_side == OrderSide.SELL:      \n","      short_tp_ = res_df['short_tp_{}'.format(strat_version)].to_numpy()  # id 에 따라 dynamic 변수라 이곳에서 numpy 화 진행\n","      short_tp_gap_ = res_df['short_tp_gap_{}'.format(strat_version)].to_numpy()\n","      if l[e_j] <= short_tp_[tp_j] + short_tp_gap_[tp_j] * config.ep_set.ei_k:\n","        ep_out = 1\n","    else:\n","      long_tp_ = res_df['long_tp_{}'.format(strat_version)].to_numpy()  # iloc 이 빠를까, to_numpy() 가 빠를까  # 3.94 ms --> 5.34 ms (iloc)\n","      long_tp_gap_ = res_df['long_tp_gap_{}'.format(strat_version)].to_numpy()\n","      if h[e_j] >= long_tp_[tp_j] - long_tp_gap_[tp_j] * config.ep_set.ei_k:\n","        ep_out = 1\n","  \n","  return ep_out\n","\n","def ep_loc_point2(res_df, config, i, out_j, point2_list, side=OrderSide.SELL):\n","  dc_upper_1T, dc_upper_15T, dc_lower_1T, dc_lower_15T, close, resi_T, sup_T, wick_score = point2_list\n","  allow_ep_in = 1\n","  if config.strat_version in ['v5_2']:\n","    if side == OrderSide.SELL:\n","      allow_ep_in *= (dc_upper_1T[i - 1] <= dc_upper_15T[i]) & \\\n","            (dc_upper_15T[i - 1] != dc_upper_15T[i])\n","    else:\n","      allow_ep_in *= (dc_lower_1T[i - 1] >= dc_lower_15T[i]) & \\\n","              (dc_lower_15T[i - 1] != dc_lower_15T[i])\n","\n","  if config.strat_version in ['v3_4']:\n","    wick_score_list = literal_eval(config.ep_set.point2.wick_score_list)\n","    if side == OrderSide.SELL:\n","      allow_ep_in *= close[i] < sup_T[i - 1]\n","      if len(wick_score_list) != 0:\n","        allow_ep_in *= wick_score[i] < -wick_score_list[0]\n","    else:\n","      allow_ep_in *= close[i] > resi_T[i - 1]\n","      if len(wick_score_list) != 0:\n","        allow_ep_in *= wick_score[i] > wick_score_list[0]\n","\n","  if allow_ep_in:\n","    out_j = i\n","  return allow_ep_in, out_j\n","\n","\n","# vectorized calc.\n","def ep_loc_v2(res_df, config, np_timeidx, show_detail=True, ep_loc_side=OrderSide.SELL):\n","    strat_version = config.strat_version\n","\n","    # ------- param init ------- #\n","    open_side = None\n","    len_df = len(res_df)\n","    mr_res = np.ones(len_df)\n","    zone_arr = np.full(len_df, 'n')\n","\n","    # ------ process 한번에 처리해서 param_check 만 ver. 별로 하면 될 것 ------ #\n","    #     => public_indi() 가 될 것\n","    #     1. 사용한 param 정보와 matching 된 data 병렬로 나열 logging 될 것\n","    tp_fee, out_fee = calc_tp_out_fee_v2(config)\n","\n","    # ------------ candle_score ------------ #    \n","    wick_score_list = literal_eval(config.loc_set.point.wick_score_list)\n","    if len(wick_score_list) != 0:\n","      score_itv_list = literal_eval(config.loc_set.point.score_itv_list)\n","      # ------ candle_score_v0 (1m initial tick 기준임) ------ #  Todo - higher timeframe 경우 back_data 사용해야함\n","      for wick_score_, score_itv_ in zip(wick_score_list, score_itv_list):\n","        wick_score = res_df['wick_score_{}'.format(score_itv_)].to_numpy()\n","        if ep_loc_side == OrderSide.SELL:\n","          mr_res *= wick_score <= -wick_score_\n","        else:\n","          mr_res *= wick_score >= wick_score_\n","\n","    # -------------- spread -------------- #\n","    if config.loc_set.zone.short_spread != \"None\":\n","      bb_base_5T = res_df['bb_base_5T'].to_numpy()  # to_numpy() 는 ep_loc 에서 진행됨\n","      bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","      bb_upper_5T = res_df['bb_upper_5T'].to_numpy()\n","      dc_lower_5T = res_df['dc_lower_5T'].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= (bb_base_5T - bb_lower_5T - tp_fee * bb_base_5T) / (bb_base_5T - bb_lower_5T + out_fee * bb_base_5T) >= config.loc_set.zone.short_spread\n","      else:\n","        # mr_res *= (bb_base_5T - dc_lower_5T - tp_fee * bb_upper_5T) / (bb_base_5T - dc_lower_5T + out_fee * bb_base_5T) >= config.loc_set.zone.long_spread\n","        mr_res *= (bb_upper_5T - dc_lower_5T - tp_fee * bb_upper_5T) / (bb_upper_5T - dc_lower_5T + out_fee * bb_upper_5T) >= config.loc_set.zone.long_spread\n","    \n","    # -------------- tr_thresh -------------- #\n","    if config.loc_set.zone.short_tr_thresh != \"None\" or config.loc_set.zone.long_tr_thresh != \"None\":\n","      if ep_loc_side == OrderSide.SELL:\n","        short_tr_ = res_df['short_tr_{}'.format(strat_version)].to_numpy()\n","        mr_res *= short_tr_ >= config.loc_set.zone.short_tr_thresh\n","      else:\n","        long_tr_ = res_df['long_tr_{}'.format(strat_version)].to_numpy()\n","        mr_res *= long_tr_ >= config.loc_set.zone.long_tr_thresh\n","\n","    # ------------ rtc_zone  ------------ #\n","    # ------ dtk ------ #\n","    if config.loc_set.zone.dt_k != \"None\":\n","      # ------ dc_v2 ------ #\n","      dc_lower_v2 = res_df['dc_lower_v2'.format(strat_version)].to_numpy()\n","      short_dtk_1_ = res_df['short_dtk_1_{}'.format(strat_version)].to_numpy() - \\\n","              res_df['short_dtk_gap_{}'.format(strat_version)].to_numpy() * config.loc_set.zone.dt_k\n","      dc_upper_v2 = res_df['dc_upper_v2'.format(strat_version)].to_numpy()\n","      long_dtk_1_ = res_df['long_dtk_1_{}'.format(strat_version)].to_numpy() + \\\n","              res_df['long_dtk_gap_{}'.format(strat_version)].to_numpy() * config.loc_set.zone.dt_k\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= dc_lower_v2 >= short_dtk_1_\n","      else:\n","        mr_res *= dc_upper_v2 <= long_dtk_1_\n","\n","    # ------------ zone rejection  ------------ #\n","    # config 로 통제할 수 없는 rejection 은 strat_version 으로 조건문을 나눔 (lvrg_set 과 동일)\n","    if config.loc_set.zone.zone_rejection:   \n","\n","        # ------------ imbalance ------------ #\n","        if config.loc_set.zone.ir != \"None\":\n","          itv = config.loc_set.point.tf_entry\n","          if ep_loc_side == OrderSide.SELL:    \n","            short_ir_ = res_df['short_ir2_{}'.format(itv)].to_numpy()\n","            # short_ir_ = res_df['short_ir_{}'.format(itv)].to_numpy()\n","            mr_res *= short_ir_ >= config.loc_set.zone.ir\n","            # mr_res *= short_ir_ <= config.loc_set.zone.ir\n","          else:\n","            long_ir_ = res_df['long_ir2_{}'.format(itv)].to_numpy()\n","            # long_ir_ = res_df['long_ir_{}'.format(itv)].to_numpy()\n","            mr_res *= long_ir_ >= config.loc_set.zone.ir\n","            # mr_res *= long_ir_ <= config.loc_set.zone.ir\n","\n","        # ------------ envelope ------------ #\n","        # ep_loc check 기준 idx 가 entry 기준이라는 걸 명심\n","        if strat_version in ['v3_2']:\n","          hc_itv = '15T'\n","          dc_itv = '15T'\n","          shift_num = [0, to_itvnum(hc_itv)]\n","          div_res = [1, 0]\n","          for itv_num, res in zip(shift_num, div_res):\n","            close_ = res_df['close_{}'.format(hc_itv)].shift(itv_num).to_numpy()  # close_bar timein 사용하는 경우, 특수로 shift(0) 사용가능\n","            if ep_loc_side == OrderSide.SELL:\n","              dc_lower_ = res_df['dc_lower_%s' % dc_itv].shift(itv_num).to_numpy()\n","              mr_res *= (close_ < dc_lower_) == res\n","            else:\n","              dc_upper_ = res_df['dc_upper_%s' % dc_itv].shift(itv_num).to_numpy()\n","              mr_res *= (close_ > dc_upper_) == res\n","\n","        # if strat_version in ['4']:  # 'v3_3', 'v3_4', \n","        #   hc_itv = '5T'\n","        #   dc_itv = '5T'\n","        #   itv_num = to_itvnum(hc_itv)\n","        #   close_ = res_df['close_{}'.format(hc_itv)].shift(itv_num).to_numpy()   # 따라서 future_data 사용시, shifting 필요함\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     dc_lower_ = res_df['dc_lower_%s' % dc_itv].shift(itv_num).to_numpy()\n","        #     mr_res *= close_ < dc_lower_\n","        #   else:\n","        #     dc_upper_ = res_df['dc_upper_%s' % dc_itv].shift(itv_num).to_numpy()\n","        #     mr_res *= close_ > dc_upper_\n","\n","        # ------------ swing_bias ------------ #  (old, baseline)\n","        # ------ cbline (dc_base) ------ #\n","        if strat_version in ['v3_5', '4']:\n","          dc_base_3T = res_df['dc_base_3T'].to_numpy()\n","          if ep_loc_side == OrderSide.SELL:\n","            # short_ep_ = res_df['short_ep_{}'.format(strat_version)].to_numpy()\n","            # mr_res *= short_ep_ <= dc_base_3T\n","            \n","            dc_base_3T_rollmin = res_df['dc_base_3T'].rolling(config.loc_set.zone.base_roll_period).min().to_numpy()\n","            mr_res *= dc_base_3T_rollmin == dc_base_3T\n","          else:\n","            # long_ep_ = res_df['long_ep_{}'.format(strat_version)].to_numpy()\n","            # mr_res *= long_ep_ >= dc_base_3T\n","            \n","            dc_base_3T_rollmax = res_df['dc_base_3T'].rolling(config.loc_set.zone.base_roll_period).max().to_numpy()\n","            mr_res *= dc_base_3T_rollmax == dc_base_3T\n","        \n","        # ------ ema ------ #\n","        # if strat_version in ['v5_2']: # 'v3'\n","        #   ema_5T = res_df['ema_5T'].to_numpy()\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     mr_res *= close < ema_5T\n","        #   else:\n","        #     mr_res *= close > ema_5T\n","\n","        # ------------ degree ------------ #        \n","        # ------ norm_body_ratio ------ #\n","        if config.loc_set.zone.abs_ratio != \"None\":\n","          itv = config.loc_set.point.tf_entry\n","          abs_ratio_ = res_df['abs_ratio_{}'.format(itv)].to_numpy()\n","          mr_res *= abs_ratio_ >= config.loc_set.zone.abs_ratio\n","          # mr_res *= abs_ratio_ <= config.loc_set.zone.abs_ratio\n","          \n","        # degree_list = literal_eval(config.loc_set.zone.degree_list)\n","        # if len(degree_list) != 0:\n","        # # if strat_version in ['v3_3', 'v3_4']:\n","        #   norm_close_15 = res_df['norm_close_15'].to_numpy()   # -> 이거 뭘로 만들었는지 불분명함,,\n","        #   b1_norm_close_15 = res_df['norm_close_15'].shift(15).to_numpy()\n","          \n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     mr_res *= norm_close_15 <= -degree_list[0]\n","        #     # mr_res *= b1_norm_close_15 <= -degree_list[1]\n","        #   else:\n","        #     mr_res *= norm_close_15 >= degree_list[0]\n","        #     # mr_res *= b1_norm_close_15 >= degree_list[1]\n","\n","        # ------ bb ------ #\n","        # close = res_df['close'].to_numpy()\n","\n","        # # if strat_version in ['v3_3']:\n","        # #   open = res_df['open'].to_numpy()\n","        # #   if ep_loc_side == OrderSide.SELL:\n","        # #     bb_lower_1m = res_df['bb_lower_1m'].to_numpy()\n","        # #     # mr_res *= close <= bb_lower_1m\n","        # #     mr_res *= open <= bb_lower_1m\n","        # #   else:\n","        # #     bb_upper_1m = res_df['bb_upper_1m'].to_numpy()\n","        # #     # mr_res *= close >= bb_upper_1m\n","        # #     mr_res *= open >= bb_upper_1m\n","\n","        # if strat_version in ['v5_2']:\n","        #   bb_upper2_ = res_df['bb_upper2_%s' % config.loc_set.zone.bbz_itv].to_numpy()\n","        #   bb_lower2_ = res_df['bb_lower2_%s' % config.loc_set.zone.bbz_itv].to_numpy()\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     mr_res *= bb_upper2_ < close\n","        #   else:\n","        #     mr_res *= bb_lower2_ > close\n","\n","        # ------ dc ------ #        \n","        # if strat_version in ['v3_3']:\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     dc_lower_ = res_df['dc_lower_1m'].to_numpy()\n","        #     b1_dc_lower_ = res_df['dc_lower_1m'].shift(1).to_numpy()\n","        #     mr_res *= dc_lower_ < b1_dc_lower_\n","        #   else:\n","        #     dc_upper_ = res_df['dc_upper_1m'].to_numpy()\n","        #     b1_dc_upper_ = res_df['dc_upper_1m'].shift(1).to_numpy()\n","        #     mr_res *= dc_upper_ > b1_dc_upper_\n","\n","        # ------ sar ------ #\n","        # if strat_version in ['v3_3']:\n","          # sar_uptrend_3T = res_df['sar_uptrend_3T'].to_numpy()\n","          # if ep_loc_side == OrderSide.SELL:\n","          #   mr_res *= sar_uptrend_3T == 0\n","          # else:\n","          #   mr_res *= sar_uptrend_3T == 1\n","\n","    # -------------- zoned tr_set - post_work -------------- #\n","    if config.tr_set.c_ep_gap != \"None\" or config.tr_set.t_out_gap != \"None\":\n","        #       by zone_dtk       #\n","        #         c_zone        #\n","        zone_dc_upper_v2_ = res_df['zone_dc_upper_v2'.format(strat_version)].to_numpy()\n","        long_dtk_plot_1 = res_df['long_dtk_plot_1'].to_numpy() + res_df['long_dtk_plot_gap'].to_numpy() * config.loc_set.zone.zone_dt_k\n","        zone_dc_lower_v2_ = res_df['zone_dc_lower_v2'.format(strat_version)].to_numpy()\n","        short_dtk_plot_1 = res_df['short_dtk_plot_1'].to_numpy() - res_df['short_dtk_plot_gap'].to_numpy() * config.loc_set.zone.zone_dt_k\n","        if ep_loc_side == OrderSide.SELL:\n","          zone_res = zone_dc_upper_v2_ > long_dtk_plot_1  # mr_res 와는 별개임\n","          pos = 'short'\n","        else:\n","          zone_res = zone_dc_lower_v2_ < short_dtk_plot_1\n","          pos = 'long'\n","\n","        # static 여부에 따른 vectorized adj. - dynamic 은 vectorize 불가\n","        if config.ep_set.static_ep and config.tr_set.c_ep_gap != \"None\":\n","          res_df['{}_ep_{}'.format(pos, strat_version)][zone_res] = res_df['{}_ep2_{}'.format(pos, strat_version)][zone_res]\n","        if config.out_set.static_out and config.tr_set.t_out_gap != \"None\":\n","          res_df['{}_out_{}'.format(pos, strat_version)][~zone_res] = res_df['{}_out2_{}'.format(pos, strat_version)][~zone_res]  # t_zone 에 대한 out2 setting \n","        zone_arr = np.where(zone_res == 1, 'c', 't')\n","\n","    return mr_res, zone_arr  # mr_res 의 True idx 가 open signal"]},{"cell_type":"markdown","metadata":{"id":"JjKHyqftzhD7","tags":[]},"source":["### set config (override available)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"q_4E-zH02WJy"},"outputs":[],"source":["#     caution : MARKET / LIMIT spelling   #\n","#      json doesn't support single quotes     #\n","\n","param_dict = \\\n","{\n","  \"strat_version\": \"4\",\n","  \"trader_set\": {\n","    \"run\": 1,\n","    \"df_log\": 0,\n","    \"open_index\": -1,\n","    \"complete_index\": -2,\n","    \"limit_fee\": 0.0002,\n","    \"market_fee\": 0.0004,\n","    \"initial_asset\": 3500,\n","    \"asset_changed\": 0,\n","    \"symbol\": \"ETHUSDT\",\n","    \"symbol_changed\": 0,\n","    \"itv_list\": \"['T', '5T', '15T', '30T', '4H']\",\n","    \"row_list\": \"[200, 160, 30, 25, 25]\",\n","    \"rec_row_list\": \"[250, 1100, 1, 1, 1]\",\n","    \"offset_list\": \"['1h', '1h', '1h', '1h', '1h']\",\n","    \"bar_close_second\": 59,\n","    \"realtime_term\": 0.01,\n","    \"api_retry_term\": 3,\n","    \"check_entry_sec\": 10,\n","    \"entry_execution_wait\": 60,\n","    \"breakout_qty_ratio\": 0.97,\n","    \"qty_check_term\": 30,\n","    \"exit_execution_wait\": 60,\n","    \"close_complete_term\": 5,\n","    \"save_stacked_df\": 0,\n","    \"stacked_df_exist\": 1\n","  },\n","  \"pos_set\": {\n","    \"short_inversion\": 0,\n","    \"long_inversion\": 0,\n","    \"short_ban\": 1,\n","    \"long_ban\": 0\n","  },\n","  \"loc_set\": {\n","    \"zone\": {\n","      \"short_spread\": \"None\",\n","      \"long_spread\": \"None\",\n","      \"short_tr_thresh\": \"None\",\n","      \"long_tr_thresh\": \"None\",\n","      \"dtk_itv\": \"5T\",\n","      \"dt_k\": \"None\",\n","      \"dc_period\": 135,\n","      \"use_dtk_line\": 0,\n","      \"zone_rejection\": 1,\n","      \"degree_list\": \"[]\",\n","      \"ir\": \"None\",\n","      \"abs_ratio\": \"None\",\n","      \"base_roll_period\": 50,\n","      \"gap_mply\": 1,\n","      \"hc_itv\": 60,\n","      \"bbz_itv\": \"None\",\n","      \"zone_dt_k\": 0.4,\n","      \"zone_dc_period\": 135\n","    },\n","    \"point\": {\n","      \"exp_itv\": \"5T\",\n","      \"tp_itv1\": \"5T\",\n","      \"tp_itv0\": \"5T\",\n","      \"epout_itv1\": \"5T\",\n","      \"epout_itv0\": \"5T\",\n","      \"tf_entry\": \"5T\",\n","      \"base_gap\": 0.1,\n","      \"wick_score_list\": \"[]\",\n","      \"body_score_list\": \"[]\",\n","      \"score_itv_list\": \"[]\",      \n","      \"osc_band\": 20\n","    }\n","  },\n","  \"tr_set\": {\n","    \"ep_gap\": 0,\n","    \"tp_gap\": 0,\n","    \"decay_gap\": \"None\",\n","    \"out_gap\": 0,\n","    \"c_ep_gap\": \"None\",\n","    \"t_out_gap\": \"None\",\n","    \"bias_gap\": 0,\n","    \"bias_info_tick\": 200\n","  }, \n","  \"ep_set\": {\n","    \"entry_type\": \"LIMIT\",\n","    \"static_ep\": 1,\n","    \"ei_k\": 0,\n","    \"ep_out_tick\": 30,    \n","    \"point2\": {\n","      \"use_point2\": 0,\n","      \"entry_type\": \"MARKET\",\n","      \"wick_score_list\": \"[]\",\n","      \"body_score_list\": \"[]\",\n","      \"score_itv_list\": \"['T']\"\n","    }\n","  },\n","  \"tp_set\": {\n","    \"non_tp\": 0,\n","    \"static_tp\": 1,\n","    \"tp_onexec\": 0,\n","    \"decay_term\": 60,\n","    \"p_ranges\": \"[1]\",\n","    \"p_qty\": \"[1]\"\n","  },\n","  \"out_set\": {\n","    \"hl_out\": 1,\n","    \"static_out\": 1,\n","    \"out_onexec\": 0,\n","    \"tf_exit\": \"None\",\n","    \"rsi_exit\": 0\n","  },\n","  \"lvrg_set\": {\n","    \"leverage\": 2,\n","    \"static_lvrg\": 0,\n","    \"allow_float\": 1,\n","    \"target_pct\": 0.01,\n","    \"lvrg_rejection\": 0\n","  }\n","}\n","\n","config = EasyDict(param_dict)\n","# param_json = json.dumps(param_dict, indent=2)"]},{"cell_type":"markdown","metadata":{"id":"dzla8i9_ysmP","jp-MarkdownHeadingCollapsed":true,"tags":[]},"source":["#### save config"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":217},"executionInfo":{"elapsed":4,"status":"error","timestamp":1648363232093,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"FlNGKvW_w2za","outputId":"62f43767-d42b-4391-b9fd-6b5ca72407d7"},"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-154-dda97ac9c505>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcfg_full_path\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'w'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mcfg\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m     \u001b[0mjson\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdump\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mconfig1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcfg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindent\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"{} dumped !\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcfg_full_path\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'config1' is not defined"]}],"source":["config_name = \"config_v5_2.1220_candlejson\"\n","# config_name = \"config_v3.json\"\n","cfg_full_path = os.path.join(current_path, \"config\", config_name)\n","\n","\n","with open(cfg_full_path, 'w') as cfg:\n","    json.dump(config1, cfg, indent=2)\n","    print(\"{} dumped !\".format(cfg_full_path))"]},{"cell_type":"markdown","metadata":{"id":"rLI8unIyroiC","tags":[]},"source":["## run"]},{"cell_type":"code","source":["funcs = [ep_out, ep_loc_point2, lvrg_set]\n","\n","id_idx_list = [0]  # ID_arr 에서 import 할 id_idx 선택\n","public_override = 1\n","utils_override = 1\n","config_override = 1\n","\n","# ------ config_list 와 같은 org_var 에 override 하는거 다시 생각하기 ------ #\n","ID_list = ID_arr[id_idx_list]\n","utils_list = utils_arr[id_idx_list]\n","config_list = config_arr[id_idx_list]\n","\n","if config_override or utils_override:\n","  assert len(config_list) == 1\n","  if config_override:\n","    config_list[0] = config\n","    ID_list[0] = config.strat_version\n","  \n","config = config_list[0]  # base config = config_list[0]\n","tp_fee, out_fee = calc_tp_out_fee_v2(config)   # -> rev_pr 때문에 일단 이곳에도 선언함\n","\n","# ------- inversion set ------- #\n","inversion = 0\n","fdist_thresh = 1\n","# ------- plot param ------- #\n","show_detail = 0\n","# ------- temp param ------- #\n","allow_osc_touch = 0\n","rsi_gap = 5\n","early_out_tpg = 0.36\n","\n","# ------- just printing config ------- #\n","# ['strat_version', 'pos_set', 'loc_set', 'tr_set', 'ep_set', 'tp_set', 'out_set', 'lvrg_set']\n","_ = [print(json.dumps(config[key_], indent=1), end=' ') for key_ in ['strat_version', 'loc_set', 'tr_set', 'ep_set', 'tp_set', 'out_set', 'lvrg_set']]"],"metadata":{"id":"qBJfPsmJzVIr","executionInfo":{"status":"ok","timestamp":1648528113992,"user_tz":-540,"elapsed":332,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"fff438a3-35d4-4247-d950-e5123e0ae83a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\"4\" {\n"," \"zone\": {\n","  \"short_spread\": \"None\",\n","  \"long_spread\": \"None\",\n","  \"short_tr_thresh\": \"None\",\n","  \"long_tr_thresh\": \"None\",\n","  \"dtk_itv\": \"5T\",\n","  \"dt_k\": \"None\",\n","  \"dc_period\": 135,\n","  \"use_dtk_line\": 0,\n","  \"zone_rejection\": 1,\n","  \"degree_list\": \"[]\",\n","  \"ir\": \"None\",\n","  \"abs_ratio\": \"None\",\n","  \"base_roll_period\": 50,\n","  \"gap_mply\": 1,\n","  \"hc_itv\": 60,\n","  \"bbz_itv\": \"None\",\n","  \"zone_dt_k\": 0.4,\n","  \"zone_dc_period\": 135\n"," },\n"," \"point\": {\n","  \"exp_itv\": \"5T\",\n","  \"tp_itv1\": \"5T\",\n","  \"tp_itv0\": \"5T\",\n","  \"epout_itv1\": \"5T\",\n","  \"epout_itv0\": \"5T\",\n","  \"tf_entry\": \"5T\",\n","  \"base_gap\": 0.1,\n","  \"wick_score_list\": \"[]\",\n","  \"body_score_list\": \"[]\",\n","  \"score_itv_list\": \"[]\",\n","  \"osc_band\": 20\n"," }\n","} {\n"," \"ep_gap\": 0,\n"," \"tp_gap\": 0,\n"," \"decay_gap\": \"None\",\n"," \"out_gap\": 0,\n"," \"c_ep_gap\": \"None\",\n"," \"t_out_gap\": \"None\",\n"," \"bias_gap\": 0,\n"," \"bias_info_tick\": 200\n","} {\n"," \"entry_type\": \"LIMIT\",\n"," \"static_ep\": 1,\n"," \"ei_k\": 0,\n"," \"ep_out_tick\": 30,\n"," \"point2\": {\n","  \"use_point2\": 0,\n","  \"entry_type\": \"MARKET\",\n","  \"wick_score_list\": \"[]\",\n","  \"body_score_list\": \"[]\",\n","  \"score_itv_list\": \"['T']\"\n"," }\n","} {\n"," \"non_tp\": 0,\n"," \"static_tp\": 1,\n"," \"tp_onexec\": 0,\n"," \"decay_term\": 60,\n"," \"p_ranges\": \"[1]\",\n"," \"p_qty\": \"[1]\"\n","} {\n"," \"hl_out\": 1,\n"," \"static_out\": 1,\n"," \"out_onexec\": 0,\n"," \"tf_exit\": \"None\",\n"," \"rsi_exit\": 0\n","} {\n"," \"leverage\": 2,\n"," \"static_lvrg\": 0,\n"," \"allow_float\": 1,\n"," \"target_pct\": 0.01,\n"," \"lvrg_rejection\": 0\n","} "]}]},{"cell_type":"code","source":["# ------ slicing res_df ------ #\n","res_df = res_df_.loc[pd.to_datetime(\"2020-09-05 00:00:59.999\"):] # pd.to_datetime(\"2022-01-10 00:00:59.999\"), pd.to_datetime(\"2021-10-04 02:39:59.999000\")\n","\n","np_timeidx = np.array([intmin_np(date_) for date_ in res_df.index.to_numpy()])\n","\n","# ------------ public_indi ------------ # - 딱히 반복될 이유가 없는 phase - annot. 달때, why 까지 적어주면 좋음\n","start_0 = time.time()\n","if public_override:\n","    public_indi(res_df, config, np_timeidx)  # 현재 대부분의 시간은 h_candle 에서 소비되고 있음\n","else:\n","    utils_public.public_indi(res_df, config, np_timeidx)\n","print(\"public_indi elapsed time :\", time.time() - start_0)\n","\n","# ------------ make data_list ------------ # - 반복될 이유가 없는 phase - public_indo 에 종속\n","start_0 = time.time()\n","ohlc_cols = ['open', 'high', 'low', 'close']\n","ohlc_list = [res_df[col_].to_numpy() for col_ in ohlc_cols]\n","point2_cols = ['dc_upper_T', 'dc_upper_15T', 'dc_lower_T', 'dc_lower_15T', 'close', 'resi_T', 'sup_T'] + ['wick_score_{}'.format(s_itv) for s_itv in literal_eval(config.ep_set.point2.score_itv_list)]\n","point2_list = [res_df[col_].to_numpy() for col_ in point2_cols]\n","market_data_cols = ['close', 'bb_lower_5T', 'bb_upper_5T', 'rsi_T', 'haopen', 'hahigh', 'halow', 'haclose']   # Todo - public_indi 이전에 해야할지도 모름\n","market_data_list = [res_df[col_].to_numpy() for col_ in market_data_cols]\n","print(\"make data_list elapsed time :\", time.time() - start_0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WstWVNihCNH8","executionInfo":{"status":"ok","timestamp":1648528120117,"user_tz":-540,"elapsed":4160,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"b08e85f2-f1b0-4ba2-e04d-74dca9d50390"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["public_indi elapsed time : 2.1613364219665527\n","make data_list elapsed time : 0.0016334056854248047\n"]}]},{"cell_type":"markdown","source":["### idep_plot"],"metadata":{"id":"RqRF1eyZ0xBL"}},{"cell_type":"code","source":["# ------ edit utils config ------ #\n","# config_list[0].loc_set.point.base_gap = -0.0\n","# config_list[0].tr_set.ep_gap = 0.5\n","# config_list[0].tr_set.tp_gap = 0\n","config_list[0].tr_set.out_gap = 0\n","# config_list[0].tr_set.bias_gap = 1.5\n","# config_list[0].tr_set.bias_info_tick = 200\n","# #  rs_channel_v2(res_df_, period=6, itv='T', type='OUT')"],"metadata":{"id":"_iYcJk8nK8Yq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["if utils_override:   # 현재, utils_override 하는 경우 1개의 ID 만 허용함 \n","  start_0 = time.time()\n","  enlist_rtc(res_df, config, np_timeidx)\n","  print(\"enlist_rtc elapsed time :\", time.time() - start_0)\n","  start_0 = time.time()\n","  enlist_tr(res_df, config, np_timeidx)    # 36995.0 -> 152766.0\n","  print(\"enlist_tr elapsed time :\", time.time() - start_0)\n","else:\n","    start_0 = time.time()\n","    for utils_, config_ in zip(utils_list, config_list):\n","        utils_.enlist_rtc(res_df, config_, np_timeidx)\n","        utils_.enlist_tr(res_df, config_, np_timeidx)\n","    print(\"elapsed time :\", time.time() - start_0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iI39YI_5GguK","executionInfo":{"status":"ok","timestamp":1648528120118,"user_tz":-540,"elapsed":9,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"0c9aee49-c59a-48a4-b336-0a5d11e96ba3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["enlist_rtc elapsed time : 0.056786298751831055\n","enlist_tr elapsed time : 0.18352580070495605\n"]}]},{"cell_type":"code","source":["# ------ edit loc_set config ------ #\n","# config_list[0].loc_set.zone.ir = \"None\" # \"None\" 0.8\n","# config_list[0].loc_set.zone.abs_ratio = \"None\"  # 0.7\n","config_list[0].loc_set.zone.short_tr_thresh = 2.5 # 0.8 # # 0.7 # tr_thresh 엄청 민감함\n","config_list[0].loc_set.zone.long_tr_thresh = 2.5 # 0.8 ## 0.7"],"metadata":{"id":"gfDSOGMd91rE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["open_info_df = get_open_info_df(ep_loc_v2, res_df, np_timeidx, ID_list, config_list, id_idx_list)  # --> point & dur. 관련 (loc_set) param 에 종속 (open_info 가 변경되는게 아니라면, 재실행할 필요없음)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9DPgykxQ92mU","executionInfo":{"status":"ok","timestamp":1648528121632,"user_tz":-540,"elapsed":1519,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"8f9d48c6-4298-43bd-950a-eb22d102674a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 1.1653594970703125\n"]}]},{"cell_type":"code","source":["# ------ edit entry & exit (ep, tp, out, ..) config ------ #\n","# config_list[0].ep_set.ei_k = 0.5\n","# config_list[0].ep_set.ep_out_tick = 20\n","# config_list[0].ep_set.point2.use_point2 = 1\n","# config_list[0].ep_set.point2.entry_type = \"LIMIT\"\n","# config_list[0].ep_set.point2.wick_score_list = str([])\n","# config_list[0].tp_set.static_tp = 1\n","# config_list[0].tp_set.non_tp = 0 # 0 1\n","config_list[0].tp_set.p_ranges = \"[1]\"\n","config_list[0].tp_set.p_qty = \"[1]\"\n","config_list[0].tp_set.p_ranges = \"[0.33, 0.66, 1]\"\n","config_list[0].tp_set.p_qty = \"[0.25, 0.25, 0.5]\"\n","# config_list[0].tp_set.p_ranges = \"[0.33, 0.6, 1]\"\n","# config_list[0].tp_set.p_qty = \"[1, 0.0, 0.00]\"\n","# config_list[0].out_set.hl_out = 1\n","# config_list[0].out_set.tf_exit = \"None\" # 15 \"None\"\n","# config_list[0].lvrg_set.static_lvrg = 0\n","# config_list[0].lvrg_set.target_pct = 0.005\n","# config_list[0].lvrg_set.lvrg_rejection = 0\n","# config_list[0].lvrg_set.allow_float = 1\n","# config_list[0].lvrg_set.leverage = 2"],"metadata":{"id":"KqVkg236t_f2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_bias_arr, long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_bias_arr = \\\n","get_res(res_df, open_info_df, ohlc_list, point2_list, market_data_list, config_list, np_timeidx, funcs, test_ratio=0.1, plot_is=1, signi=False)   # open 이 많을 수록 en_ex_pairing elapsed time : 11.58370590209961"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":606},"id":"HHq6cr9GPBot","outputId":"73fc5a70-2fc0-414c-babe-c63a02a0b267","executionInfo":{"status":"ok","timestamp":1648528226959,"user_tz":-540,"elapsed":4132,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 1.603762149810791\n","short_obj.shape : (2014, 5)\n","long_obj.shape : (2380, 5)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1728x576 with 6 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["idep_plot_v7 elapsed time : 1.88344407081604\n"]}]},{"cell_type":"markdown","source":["### statistics (stem 별로 진행)"],"metadata":{"id":"xgJ_cf1KY1b-"}},{"cell_type":"code","source":["strat_version = config.strat_version\n","\n","short_open_tp_gap = res_df['short_tp_gap_{}'.format(strat_version)].to_numpy()[short_obj[-1].astype(int)]  # use open_i\n","long_open_tp_gap = res_df['long_tp_gap_{}'.format(strat_version)].to_numpy()[long_obj[-1].astype(int)]\n","\n","short_open_epout_gap = res_df['short_epout_gap_{}'.format(strat_version)].to_numpy()[short_obj[-1].astype(int)]  # use open_i\n","long_open_epout_gap = res_df['long_epout_gap_{}'.format(strat_version)].to_numpy()[long_obj[-1].astype(int)]\n","\n","# ------ pairing 된 en, ex_idx 기준으로 survey 진행 ------ #\n","# 0. high, low (exit_done 까지의) -> partial (tpg) 과 outg survey 목표\n","#   a. short -> tpg - low, outg - high\n","#   b. long -> tpg - high, outg - low\n","short_max_tpg = get_max_tpg(\"SELL\", ohlc_list, short_pr, short_obj[:4], short_open_tp_gap)\n","long_max_tpg = get_max_tpg(\"BUY\", ohlc_list, long_pr, long_obj[:4], long_open_tp_gap)\n","\n","# ------ 0. tp 까지 도달하는 최소 idx 도출, en_idx 부터 ------ #\n","#   a. bias_info_tick 의 limit 을 정해주지 않으면 굉장히 길어질 수 있다고 봄\n","short_max_outg, short_outg_open_idx = get_max_outg(\"SELL\", config, ohlc_list, short_obj, short_tpout_arr, short_open_epout_gap)\n","long_max_outg, long_outg_open_idx = get_max_outg(\"BUY\", config, ohlc_list, long_obj, long_tpout_arr, long_open_epout_gap)"],"metadata":{"id":"bxixGieX1IIR"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### tpg survey for partial + outg justification"],"metadata":{"id":"AhR0wApIcK2M"}},{"cell_type":"code","source":["# 1. outg 는 partial 을 위한 histogram 작성 진행\n","# 현재, outg 내부에는 tp 한것과 out 한것이 공존하는 상태\n","bins = 10\n","max_plot_outg = 5\n","\n","titles = ['outg', 'tpg']\n","short_max_datas = [short_max_outg, short_max_tpg]\n","long_max_datas = [long_max_outg, long_max_tpg]\n","max_plot_gaps = [5, 3]\n","\n","for title, short_max_data, long_max_data, max_plot_gap in zip(titles, short_max_datas, long_max_datas, max_plot_gaps):\n","  short_plot_data = short_max_data[short_max_data <= max_plot_gap]  # nan 과 inf 때문에 이 방식 채택\n","  long_plot_data = long_max_data[long_max_data <= max_plot_gap]\n","  print(\"len(short_plot_data) :\", len(short_plot_data))\n","  print(\"len(long_plot_data) :\", len(long_plot_data))\n","\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(12, 5))\n","  nrows, ncols = 1, 2\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                          ncols=ncols\n","                          )\n","    \n","  plt.subplot(gs[0])\n","  kde_plot_v2(*np.unique(short_plot_data, return_counts=True))\n","\n","  plt.subplot(gs[1])\n","  kde_plot_v2(*np.unique(long_plot_data, return_counts=True))\n","\n","  plt.suptitle(title)\n","  plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":833},"id":"psuZMAgG4XOo","executionInfo":{"status":"ok","timestamp":1648519003004,"user_tz":-540,"elapsed":1607,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"cfb047d3-b536-46d6-d33f-758d0477ca7b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["len(short_plot_data) : 1803\n","len(long_plot_data) : 2077\n","pkx : [0.35353535 3.78787879]\n","pkx : [0.45446668 3.68622971]\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 864x360 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["len(short_plot_data) : 1714\n","len(long_plot_data) : 1931\n","pkx : [0.12766471 1.14218905]\n","pkx : [0.18256428]\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 864x360 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["#### outg survey for precision (eploc vars. dependency)"],"metadata":{"id":"1Qaz9Vv_cQkg"}},{"cell_type":"code","source":["# ------------ dependent vars. ------------ #\n","# res_df 에 존재하는 col 는 모두 사용가능함\n","# ------ 1. 도출한 outg 와 vars. pairing 진행 (by valid_idx) ------ #\n","public_cols = ['abs_ratio_5T', 'rel_ratio_5T']\n","devided_cols = ['ir2_5T', 'tr_{}'.format(strat_version)]\n","short_datas = [res_df[col].to_numpy() for col in public_cols] + [res_df['short_' + col].to_numpy() for col in devided_cols]\n","long_datas = [res_df[col].to_numpy() for col in public_cols] + [res_df['long_' + col].to_numpy() for col in devided_cols]"],"metadata":{"id":"aZcTnlbe_i_y"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["titles = public_cols +devided_cols\n","max_plot_outg = 10\n","\n","for title, short_data, long_data in zip(titles, short_datas, long_datas):\n","\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(12, 5))\n","  nrows, ncols = 1, 2\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                          ncols=ncols\n","                          )\n","    \n","  short_plot_idx = short_max_outg <= max_plot_outg\n","  long_plot_idx = long_max_outg <= max_plot_outg  # nan 과 inf 때문에 이 방식 채택\n","\n","  short_open_data = short_data[short_outg_open_idx]\n","  long_open_data = long_data[long_outg_open_idx]\n","  short_plot_idx *= ~np.isnan(short_open_data)\n","  long_plot_idx *= ~np.isnan(long_open_data)  # nan 과 inf 때문에 이 방식 채택\n","  \n","  plt.subplot(gs[0])\n","  x, y = short_max_outg[short_plot_idx].ravel(), short_open_data[short_plot_idx].ravel()\n","  # plt.bar(x, y, width=0.05)\n","  plt.scatter(x, y)\n","  plt.axvline(0.5, color='red', linewidth=3)\n","  plt.title(\"coef : {:0.3f}\".format(np.corrcoef(-x, y)[0, 1]))\n","  plt.xlim(0, max_plot_outg)\n","\n","  plt.subplot(gs[1])\n","  x, y = long_max_outg[long_plot_idx].ravel(), long_open_data[long_plot_idx].ravel()\n","  # plt.bar(x, y, width=0.05)\n","  plt.scatter(x, y)\n","  plt.axvline(0.5, color='red', linewidth=3)\n","  plt.title(\"coef : {:0.3f}\".format(np.corrcoef(-x, y)[0, 1]))\n","  plt.xlim(0, max_plot_outg)\n","\n","  plt.suptitle(title)\n","  plt.show()\n","\n","  print()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"T68QQbcGiupJ","executionInfo":{"status":"ok","timestamp":1648519421166,"user_tz":-540,"elapsed":2339,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"7486e5fb-a43e-42d1-8adb-442b6f9c53ca"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 864x360 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 864x360 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 864x360 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 864x360 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]}]},{"cell_type":"markdown","metadata":{"jp-MarkdownHeadingCollapsed":true,"tags":[],"id":"Ksth13T0spcQ"},"source":["### significance_v2"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pZlZCr2lspcR","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1648475796916,"user_tz":-540,"elapsed":36272,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"68741781-a5b2-4bbf-969c-aa76cce1522f"},"outputs":[{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 0.12546992301940918\n","short_obj.shape : (321, 5)\n","long_obj.shape : (79, 5)\n","idep_plot_v7 elapsed time : 0.05558323860168457\n","en_ex_pairing elapsed time : 0.1506824493408203\n","short_obj.shape : (320, 5)\n","long_obj.shape : (79, 5)\n","idep_plot_v7 elapsed time : 0.05311155319213867\n","en_ex_pairing elapsed time : 0.15595102310180664\n","short_obj.shape : (319, 5)\n","long_obj.shape : (79, 5)\n","idep_plot_v7 elapsed time : 0.0620722770690918\n","en_ex_pairing elapsed time : 0.17756962776184082\n","short_obj.shape : (318, 5)\n","long_obj.shape : (79, 5)\n","idep_plot_v7 elapsed time : 0.06081724166870117\n","en_ex_pairing elapsed time : 0.15336155891418457\n","short_obj.shape : (318, 5)\n","long_obj.shape : (79, 5)\n","idep_plot_v7 elapsed time : 0.06103086471557617\n","en_ex_pairing elapsed time : 0.13934898376464844\n","short_obj.shape : (318, 5)\n","long_obj.shape : (79, 5)\n","idep_plot_v7 elapsed time : 0.052596092224121094\n","en_ex_pairing elapsed time : 0.13417983055114746\n","short_obj.shape : (316, 5)\n","long_obj.shape : (79, 5)\n","idep_plot_v7 elapsed time : 0.05890154838562012\n","en_ex_pairing elapsed time : 0.15039658546447754\n","short_obj.shape : (316, 5)\n","long_obj.shape : (79, 5)\n","idep_plot_v7 elapsed time : 0.055268287658691406\n","en_ex_pairing elapsed time : 0.2337338924407959\n","short_obj.shape : (316, 5)\n","long_obj.shape : (76, 5)\n","idep_plot_v7 elapsed time : 0.0746006965637207\n","en_ex_pairing elapsed time : 0.15372467041015625\n","short_obj.shape : (316, 5)\n","long_obj.shape : (76, 5)\n","idep_plot_v7 elapsed time : 0.05689859390258789\n","en_ex_pairing elapsed time : 0.15026187896728516\n","short_obj.shape : (316, 5)\n","long_obj.shape : (76, 5)\n","idep_plot_v7 elapsed time : 0.05423426628112793\n","en_ex_pairing elapsed time : 0.14802074432373047\n","short_obj.shape : (313, 5)\n","long_obj.shape : (76, 5)\n","idep_plot_v7 elapsed time : 0.05224871635437012\n","en_ex_pairing elapsed time : 0.16050481796264648\n","short_obj.shape : (313, 5)\n","long_obj.shape : (76, 5)\n","idep_plot_v7 elapsed time : 0.05698084831237793\n","en_ex_pairing elapsed time : 0.14620733261108398\n","short_obj.shape : (313, 5)\n","long_obj.shape : (76, 5)\n","idep_plot_v7 elapsed time : 0.05830121040344238\n","en_ex_pairing elapsed time : 0.1689891815185547\n","short_obj.shape : (313, 5)\n","long_obj.shape : (76, 5)\n","idep_plot_v7 elapsed time : 0.054525136947631836\n","en_ex_pairing elapsed time : 0.15129899978637695\n","short_obj.shape : (313, 5)\n","long_obj.shape : (76, 5)\n","idep_plot_v7 elapsed time : 0.051932573318481445\n","en_ex_pairing elapsed time : 0.15005111694335938\n","short_obj.shape : (312, 5)\n","long_obj.shape : (76, 5)\n","idep_plot_v7 elapsed time : 0.05197954177856445\n","en_ex_pairing elapsed time : 0.15407109260559082\n","short_obj.shape : (312, 5)\n","long_obj.shape : (76, 5)\n","idep_plot_v7 elapsed time : 0.05168747901916504\n","en_ex_pairing elapsed time : 0.15861129760742188\n","short_obj.shape : (312, 5)\n","long_obj.shape : (76, 5)\n","idep_plot_v7 elapsed time : 0.05108237266540527\n","en_ex_pairing elapsed time : 0.15803098678588867\n","short_obj.shape : (311, 5)\n","long_obj.shape : (75, 5)\n","idep_plot_v7 elapsed time : 0.05026078224182129\n","en_ex_pairing elapsed time : 0.2809433937072754\n","short_obj.shape : (310, 5)\n","long_obj.shape : (75, 5)\n","idep_plot_v7 elapsed time : 0.05947279930114746\n","en_ex_pairing elapsed time : 0.1573343276977539\n","short_obj.shape : (310, 5)\n","long_obj.shape : (75, 5)\n","idep_plot_v7 elapsed time : 0.05375409126281738\n","en_ex_pairing elapsed time : 0.15929889678955078\n","short_obj.shape : (310, 5)\n","long_obj.shape : (75, 5)\n","idep_plot_v7 elapsed time : 0.05109763145446777\n","en_ex_pairing elapsed time : 0.3042771816253662\n","short_obj.shape : (310, 5)\n","long_obj.shape : (74, 5)\n","idep_plot_v7 elapsed time : 0.052201032638549805\n","en_ex_pairing elapsed time : 0.1651146411895752\n","short_obj.shape : (310, 5)\n","long_obj.shape : (73, 5)\n","idep_plot_v7 elapsed time : 0.05228471755981445\n","en_ex_pairing elapsed time : 0.16712021827697754\n","short_obj.shape : (310, 5)\n","long_obj.shape : (73, 5)\n","idep_plot_v7 elapsed time : 0.05307173728942871\n","en_ex_pairing elapsed time : 0.17056488990783691\n","short_obj.shape : (309, 5)\n","long_obj.shape : (73, 5)\n","idep_plot_v7 elapsed time : 0.054860591888427734\n","en_ex_pairing elapsed time : 0.1731855869293213\n","short_obj.shape : (309, 5)\n","long_obj.shape : (73, 5)\n","idep_plot_v7 elapsed time : 0.05188751220703125\n","en_ex_pairing elapsed time : 0.2066822052001953\n","short_obj.shape : (307, 5)\n","long_obj.shape : (73, 5)\n","idep_plot_v7 elapsed time : 0.052206993103027344\n","en_ex_pairing elapsed time : 0.21542644500732422\n","short_obj.shape : (305, 5)\n","long_obj.shape : (73, 5)\n","idep_plot_v7 elapsed time : 0.0515742301940918\n","en_ex_pairing elapsed time : 0.2231757640838623\n","short_obj.shape : (305, 5)\n","long_obj.shape : (73, 5)\n","idep_plot_v7 elapsed time : 0.05176353454589844\n","en_ex_pairing elapsed time : 0.22763919830322266\n","short_obj.shape : (305, 5)\n","long_obj.shape : (73, 5)\n","idep_plot_v7 elapsed time : 0.05284881591796875\n","en_ex_pairing elapsed time : 0.23392224311828613\n","short_obj.shape : (305, 5)\n","long_obj.shape : (73, 5)\n","idep_plot_v7 elapsed time : 0.05232071876525879\n","en_ex_pairing elapsed time : 0.22667837142944336\n","short_obj.shape : (305, 5)\n","long_obj.shape : (72, 5)\n","idep_plot_v7 elapsed time : 0.05263948440551758\n","en_ex_pairing elapsed time : 0.22528386116027832\n","short_obj.shape : (305, 5)\n","long_obj.shape : (71, 5)\n","idep_plot_v7 elapsed time : 0.05429387092590332\n","en_ex_pairing elapsed time : 0.22811079025268555\n","short_obj.shape : (305, 5)\n","long_obj.shape : (71, 5)\n","idep_plot_v7 elapsed time : 0.0518183708190918\n","en_ex_pairing elapsed time : 0.22673535346984863\n","short_obj.shape : (304, 5)\n","long_obj.shape : (71, 5)\n","idep_plot_v7 elapsed time : 0.05151653289794922\n","en_ex_pairing elapsed time : 0.23186588287353516\n","short_obj.shape : (300, 5)\n","long_obj.shape : (71, 5)\n","idep_plot_v7 elapsed time : 0.05172419548034668\n","en_ex_pairing elapsed time : 0.22980666160583496\n","short_obj.shape : (300, 5)\n","long_obj.shape : (71, 5)\n","idep_plot_v7 elapsed time : 0.051714181900024414\n","en_ex_pairing elapsed time : 0.253554105758667\n","short_obj.shape : (299, 5)\n","long_obj.shape : (70, 5)\n","idep_plot_v7 elapsed time : 0.05313372611999512\n","en_ex_pairing elapsed time : 0.25340700149536133\n","short_obj.shape : (298, 5)\n","long_obj.shape : (70, 5)\n","idep_plot_v7 elapsed time : 0.0524141788482666\n","en_ex_pairing elapsed time : 0.2624328136444092\n","short_obj.shape : (296, 5)\n","long_obj.shape : (70, 5)\n","idep_plot_v7 elapsed time : 0.05103349685668945\n","en_ex_pairing elapsed time : 0.33731818199157715\n","short_obj.shape : (295, 5)\n","long_obj.shape : (70, 5)\n","idep_plot_v7 elapsed time : 0.06306576728820801\n","en_ex_pairing elapsed time : 0.300152063369751\n","short_obj.shape : (295, 5)\n","long_obj.shape : (70, 5)\n","idep_plot_v7 elapsed time : 0.052240848541259766\n","en_ex_pairing elapsed time : 0.2935967445373535\n","short_obj.shape : (295, 5)\n","long_obj.shape : (70, 5)\n","idep_plot_v7 elapsed time : 0.05137443542480469\n","en_ex_pairing elapsed time : 0.3026313781738281\n","short_obj.shape : (295, 5)\n","long_obj.shape : (69, 5)\n","idep_plot_v7 elapsed time : 0.05121040344238281\n","en_ex_pairing elapsed time : 0.2918837070465088\n","short_obj.shape : (294, 5)\n","long_obj.shape : (69, 5)\n","idep_plot_v7 elapsed time : 0.050965309143066406\n","en_ex_pairing elapsed time : 0.29412388801574707\n","short_obj.shape : (294, 5)\n","long_obj.shape : (68, 5)\n","idep_plot_v7 elapsed time : 0.05300593376159668\n","en_ex_pairing elapsed time : 0.2958226203918457\n","short_obj.shape : (294, 5)\n","long_obj.shape : (68, 5)\n","idep_plot_v7 elapsed time : 0.050647735595703125\n","en_ex_pairing elapsed time : 0.3007543087005615\n","short_obj.shape : (291, 5)\n","long_obj.shape : (66, 5)\n","idep_plot_v7 elapsed time : 0.054917335510253906\n","en_ex_pairing elapsed time : 0.29646730422973633\n","short_obj.shape : (291, 5)\n","long_obj.shape : (66, 5)\n","idep_plot_v7 elapsed time : 0.05224108695983887\n","en_ex_pairing elapsed time : 0.29434776306152344\n","short_obj.shape : (289, 5)\n","long_obj.shape : (64, 5)\n","idep_plot_v7 elapsed time : 0.05420851707458496\n","en_ex_pairing elapsed time : 0.29868078231811523\n","short_obj.shape : (288, 5)\n","long_obj.shape : (64, 5)\n","idep_plot_v7 elapsed time : 0.051343441009521484\n","en_ex_pairing elapsed time : 0.29805707931518555\n","short_obj.shape : (288, 5)\n","long_obj.shape : (64, 5)\n","idep_plot_v7 elapsed time : 0.05766487121582031\n","en_ex_pairing elapsed time : 0.34276437759399414\n","short_obj.shape : (288, 5)\n","long_obj.shape : (64, 5)\n","idep_plot_v7 elapsed time : 0.05434679985046387\n","en_ex_pairing elapsed time : 0.2971630096435547\n","short_obj.shape : (287, 5)\n","long_obj.shape : (64, 5)\n","idep_plot_v7 elapsed time : 0.050774574279785156\n","en_ex_pairing elapsed time : 0.30985379219055176\n","short_obj.shape : (287, 5)\n","long_obj.shape : (64, 5)\n","idep_plot_v7 elapsed time : 0.05231809616088867\n","en_ex_pairing elapsed time : 0.3094515800476074\n","short_obj.shape : (287, 5)\n","long_obj.shape : (63, 5)\n","idep_plot_v7 elapsed time : 0.05340743064880371\n","en_ex_pairing elapsed time : 0.30649876594543457\n","short_obj.shape : (287, 5)\n","long_obj.shape : (63, 5)\n","idep_plot_v7 elapsed time : 0.05153775215148926\n","en_ex_pairing elapsed time : 0.30730175971984863\n","short_obj.shape : (287, 5)\n","long_obj.shape : (63, 5)\n","idep_plot_v7 elapsed time : 0.050971031188964844\n","en_ex_pairing elapsed time : 0.30872631072998047\n","short_obj.shape : (287, 5)\n","long_obj.shape : (63, 5)\n","idep_plot_v7 elapsed time : 0.05144381523132324\n","en_ex_pairing elapsed time : 0.3103930950164795\n","short_obj.shape : (286, 5)\n","long_obj.shape : (63, 5)\n","idep_plot_v7 elapsed time : 0.05235791206359863\n","en_ex_pairing elapsed time : 0.32521867752075195\n","short_obj.shape : (285, 5)\n","long_obj.shape : (62, 5)\n","idep_plot_v7 elapsed time : 0.05227184295654297\n","en_ex_pairing elapsed time : 0.31192827224731445\n","short_obj.shape : (285, 5)\n","long_obj.shape : (61, 5)\n","idep_plot_v7 elapsed time : 0.05195498466491699\n","en_ex_pairing elapsed time : 0.31708765029907227\n","short_obj.shape : (284, 5)\n","long_obj.shape : (61, 5)\n","idep_plot_v7 elapsed time : 0.05041360855102539\n","en_ex_pairing elapsed time : 0.31426167488098145\n","short_obj.shape : (283, 5)\n","long_obj.shape : (61, 5)\n","idep_plot_v7 elapsed time : 0.05189824104309082\n","en_ex_pairing elapsed time : 0.32106447219848633\n","short_obj.shape : (283, 5)\n","long_obj.shape : (60, 5)\n","idep_plot_v7 elapsed time : 0.05119442939758301\n","en_ex_pairing elapsed time : 0.31748223304748535\n","short_obj.shape : (282, 5)\n","long_obj.shape : (59, 5)\n","idep_plot_v7 elapsed time : 0.05166172981262207\n","en_ex_pairing elapsed time : 0.31339120864868164\n","short_obj.shape : (283, 5)\n","long_obj.shape : (58, 5)\n","idep_plot_v7 elapsed time : 0.05069899559020996\n","en_ex_pairing elapsed time : 0.3295121192932129\n","short_obj.shape : (282, 5)\n","long_obj.shape : (57, 5)\n","idep_plot_v7 elapsed time : 0.0545504093170166\n","en_ex_pairing elapsed time : 0.31866455078125\n","short_obj.shape : (282, 5)\n","long_obj.shape : (57, 5)\n","idep_plot_v7 elapsed time : 0.050830841064453125\n","en_ex_pairing elapsed time : 0.3158609867095947\n","short_obj.shape : (282, 5)\n","long_obj.shape : (57, 5)\n","idep_plot_v7 elapsed time : 0.05493021011352539\n","en_ex_pairing elapsed time : 0.32106924057006836\n","short_obj.shape : (281, 5)\n","long_obj.shape : (57, 5)\n","idep_plot_v7 elapsed time : 0.051671504974365234\n","en_ex_pairing elapsed time : 0.3730432987213135\n","short_obj.shape : (280, 5)\n","long_obj.shape : (57, 5)\n","idep_plot_v7 elapsed time : 0.059098243713378906\n","en_ex_pairing elapsed time : 0.32213497161865234\n","short_obj.shape : (279, 5)\n","long_obj.shape : (57, 5)\n","idep_plot_v7 elapsed time : 0.056359291076660156\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1728x576 with 36 Axes>"],"image/png":"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\n"},"metadata":{}}],"source":["# from google.colab import output\n","# ------------ survey param ------------ #\n","# itv_num_list = [1, 3, 5, 15]\n","# itv_list = ['15m', '30m', '1h', '4h']\n","# itv_list = ['3m', '5m', '15m', '30m', '1h', '4h']\n","val_list = np.arange(0.2, 1.0, 0.1)     # prcn 1\n","val_list = np.arange(0.0, 1.5, 0.02)  # prcn 2\n","# val_list = np.arange(-0.695, -0.75, -0.005)    # prcn 3\n","# val_list = np.arange(0.944, 0.945, 0.0001)    # prcn 4\n","# val_list = np.arange(70, 80, 1)   # prcn -1\n","# val_list = np.arange(200, 180, -5)   # prcn -2\n","\n","# ------------ get survey_res ------------ #\n","result = []\n","config_list_copy = copy.deepcopy(config_list)\n","for set_val in val_list:\n","  # ------------ open 결정 이전의 인자값 ------------ #\n","  # ------ point * mr_res ------ #\n","  # config_list_copy[0].loc_set.zone.degree_list = set_val\n","  # config_list_copy[0].loc_set.point2.wick_score_list = str([set_val])\n","  # config_list_copy[0].loc_set.zone.ir = set_val  \n","  # config_list_copy[0].loc_set.zone.abs_ratio = set_val  \n","  # open_info_df = get_open_info_df(ep_loc_v2, res_df, np_timeidx, ID_list, config_list_copy, id_idx_list)\n","\n","  # ------------ open 결정 이후의 인자값 ------------ #\n","  # ------ utils ------ #\n","  config_list_copy[0].tr_set.out_gap = set_val  \n","  for utils_, config_ in zip(utils_list, config_list_copy):\n","    # enlist_rtc(res_df, config_, np_timeidx)\n","    enlist_tr(res_df, config_, np_timeidx)\n","\n","  # ------ entry, exit (ep, tp, out vars.) ------ #\n","  # config_list_copy[0].ep_set.ep_out_tick = set_val  \n","\n","  try:\n","    result.append(get_res(res_df, open_info_df, ohlc_list, point2_list, market_data_list, config_list_copy, np_timeidx, funcs, test_ratio=0.3, plot_is=1, signi=True))\n","  except:\n","    pass\n","\n","survey_res_list = [np.array(result)[:, s_i::3] for s_i in range(3)]   # 3 for s, l, b\n","# short_res, long_res, both_res = survey_res_list\n","\n","# ------------ plot survey_res ------------ #\n","title_list = [\"short\", \"long\", \"both\"]\n","sub_title_list = ['prcn', 'rc', 'len_pr', 'dpf', 'wr', 'sr', 'acc_pr', 'sum_pr', 'min_pr', 'liqd', 'acc_mdd', 'sum_mdd']\n","space_ = \" \" * 120\n","\n","fig = plt.figure(figsize=(24, 8))\n","plt.style.use('dark_background')\n","gs = gridspec.GridSpec(nrows=1,\n","                        ncols=3,\n","                        # height_ratios=[1, 1, 1]\n","                      )\n","# nrows, ncols, h_r = 3, 3, [1, 1, 1]\n","nrows, ncols, h_r = 3, 4, [1, 1, 1]\n","# nrows, ncols, h_r = 4, 3, [1, 1, 1, 1]\n","# if d_idx == 0:\n","# else:\n","  # nrows, ncols, h_r = 2, 2, [1, 1]\n","\n","for d_idx, (title_name, survey_res) in enumerate(zip(title_list, survey_res_list)):  \n","  inner_gs = gs[d_idx].subgridspec(nrows=nrows,\n","                        ncols=ncols,\n","                        height_ratios=h_r\n","                      )\n","  for in_idx, (data_, sub_title) in enumerate(zip(survey_res.T, sub_title_list)):\n","    plt.subplot(inner_gs[in_idx])\n","    plt.plot(val_list[:len(result)], data_.ravel())  # 앞에서부터 len(result) 만큼만\n","    plt.title(sub_title)\n","\n","plt.suptitle(space_.join(title_list))\n","plt.show()\n","# print(\"\\n\")"]},{"cell_type":"markdown","source":["### legacy"],"metadata":{"id":"1GVZ03zDyU2N"}},{"cell_type":"markdown","source":["#### main_functions"],"metadata":{"id":"IWO7KkqltMFt"}},{"cell_type":"code","source":["def get_open_info_df(ep_loc_v2, res_df, np_timeidx, ID_list, config_list, id_idx_list):\n","  start_0 = time.time()\n","  # ------ get mr_res, zone_arr ------ #\n","  short_mr_res_obj = np.array([ep_loc_v2(res_df, config_, np_timeidx, show_detail=True, ep_loc_side=OrderSide.SELL) for config_ in config_list])\n","  long_mr_res_obj = np.array([ep_loc_v2(res_df, config_, np_timeidx, show_detail=True, ep_loc_side=OrderSide.BUY) for config_ in config_list])\n","  short_open_idx_list = [np.where(res_df['short_open_{}'.format(id)].to_numpy() * mr_res)[0] for id, mr_res in zip(ID_list, short_mr_res_obj[:, 0].astype(np.float64))]   # \"point * mr_Res\"\n","  long_open_idx_list = [np.where(res_df['long_open_{}'.format(id)].to_numpy() * mr_res)[0] for id, mr_res in zip(ID_list, long_mr_res_obj[:, 0].astype(np.float64))]  # zip 으로 zone (str) 과 묶어서 dtype 변경됨\n","\n","  # ------ open_info_arr ------ #\n","  short_side_list = [np.full(len(list_), OrderSide.SELL) for list_ in short_open_idx_list]\n","  long_side_list = [np.full(len(list_), OrderSide.BUY) for list_ in long_open_idx_list]\n","\n","  short_zone_list = [zone_res[short_open_idx] for zone_res, short_open_idx in zip(short_mr_res_obj[:, 1], short_open_idx_list)]\n","  long_zone_list = [zone_res[long_open_idx] for zone_res, long_open_idx in zip(long_mr_res_obj[:, 1], long_open_idx_list)]\n","\n","  short_id_list = [np.full(len(list_), id) for id, list_ in zip(ID_list, short_open_idx_list)]\n","  long_id_list = [np.full(len(list_), id) for id, list_ in zip(ID_list, long_open_idx_list)]\n","\n","  selected_id_idx = np.arange(len(id_idx_list))\n","  short_id_idx_list = [np.full(len(list_), id) for id, list_ in zip(selected_id_idx, short_open_idx_list)]\n","  long_id_idx_list = [np.full(len(list_), id) for id, list_ in zip(selected_id_idx, long_open_idx_list)]\n","\n","  # ------ get open_info_df ------ #\n","  #   series 만들어서 short / long 끼리 합치고 둘이 합치고, 중복은 우선 순위 정해서 제거\n","  short_open_df_list = [pd.DataFrame(index=index_, data=np.vstack((data_)).T, columns=['side', 'zone', 'id', 'id_idx']) for index_, data_ in zip(short_open_idx_list, zip(short_side_list, short_zone_list, short_id_list, short_id_idx_list))]\n","  long_open_df_list = [pd.DataFrame(index=index_, data=np.vstack((data_)).T, columns=['side', 'zone', 'id', 'id_idx']) for index_, data_ in zip(long_open_idx_list, zip(long_side_list, long_zone_list, long_id_list, long_id_idx_list))]\n","\n","  open_info_df = pd.concat(short_open_df_list + long_open_df_list)\n","  # ------ sorting + unique ------ #\n","  open_info_df.sort_index(inplace=True)\n","  # print(len(open_info_df))\n","  # print(len(open_info_df))\n","  # open_info_df.head()\n","  print(\"get_open_info_df elapsed time :\", time.time() - start_0)\n","  return open_info_df[~open_info_df.index.duplicated(keep='first')]  # 먼저 순서를 우선으로 지정  "],"metadata":{"id":"MY1csdNRLGsk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def get_res(res_df, open_info_df, ohlc_list, point2_list, market_data_list, config_list, np_timeidx, funcs, test_ratio=0.3, plot_is=True, signi=False):\n","  # ------------ make open_info_list ------------ #\n","  open_idx = open_info_df.index.to_numpy()\n","  len_df = len(res_df)\n","  s_idx = (open_idx < int(len_df * (1 - test_ratio))) == plot_is\n","  s_open_info_df = open_info_df[s_idx]\n","  s_open_idx = open_idx[s_idx]\n","\n","  open_info_list = [s_open_info_df[col_].to_numpy() for col_ in s_open_info_df.columns]\n","  side_arr, zone_arr, id_arr, id_idx_arr = open_info_list\n","\n","  # ------------ get paired_res ------------ #\n","  start_0 = time.time()\n","  paired_res = en_ex_pairing(res_df, s_open_idx, open_info_list, ohlc_list, point2_list, market_data_list, config_list, np_timeidx, funcs)\n","  # valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr = paired_res\n","  print(\"en_ex_pairing elapsed time :\", time.time() - start_0)  #  0.37 --> 0.3660471439361572 --> 0.21(lesser if)\n","\n","  # ------------ idep_plot ------------ #\n","  start_0 = time.time()\n","  h, l = ohlc_list[1:3]\n","  res = idep_plot_v7(len_df, config_list[0], h, l, s_open_idx, side_arr, paired_res, inversion=False, sample_ratio=1 - test_ratio, signi=signi)\n","  print(\"idep_plot_v7 elapsed time :\", time.time() - start_0)   # 1.40452 (v6) 1.4311 (v5)\n","\n","  return res"],"metadata":{"id":"eiQ36_SLLE3w"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def idep_plot_v7(len_df, config, h, l, open_idx, side_arr, paired_res, inversion=False, sample_ratio=0.7, title_position=(0.5, 0.5), fontsize=15, signi=False):\n","    if not signi:\n","        plt.style.use(['dark_background', 'fast'])\n","        fig = plt.figure(figsize=(24, 8))\n","        gs = gridspec.GridSpec(nrows=2,  # row 몇 개\n","                               ncols=3,  # col 몇 개\n","                               height_ratios=[10, 1]\n","                               # height_ratios=[10, 10, 1]\n","                               )\n","    gs_idx = 0\n","    # plt.suptitle(key)\n","    \n","    p_ranges, p_qty = literal_eval(config.tp_set.p_ranges), literal_eval(config.tp_set.p_qty)\n","    assert np.sum(p_qty) == 1.0\n","    assert len(p_ranges) == len(p_qty)\n","\n","    if sample_ratio is not None:\n","      sample_len = int(len_df * sample_ratio)\n","    else:\n","      sample_len = len_df\n","\n","    # ------ short & long data preparation ------ #\n","    # start_0 = time.time()\n","    valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr, bias_arr = paired_res    \n","    assert len(valid_openi_arr) != 0, \"assert len(valid_openi_arr) != 0\"    \n","    short_valid_openi_idx = np.where(side_arr[valid_openi_arr] == OrderSide.SELL)[0]  # valid_openi_arr 에 대한 idx, # side_arr,\n","    long_valid_openi_idx = np.where(side_arr[valid_openi_arr] == OrderSide.BUY)[0]\n","\n","    valid_open_idx = open_idx[valid_openi_arr].reshape(-1, 1)\n","\n","    short_obj = np.hstack((pair_price_arr, pair_idx_arr, valid_open_idx))[short_valid_openi_idx]\n","    long_obj = np.hstack((pair_price_arr, pair_idx_arr, valid_open_idx))[long_valid_openi_idx]\n","    both_obj = np.vstack((short_obj, long_obj))\n","    print(\"short_obj.shape :\", short_obj.shape)\n","    print(\"long_obj.shape :\", long_obj.shape)\n","\n","    short_obj, long_obj, both_obj = [np.split(obj_, 5, axis=1) for obj_ in [short_obj, long_obj, both_obj]]\n","\n","    short_lvrg_arr, long_lvrg_arr = [lvrg_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    short_fee_arr, long_fee_arr = [fee_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    short_tpout_arr, long_tpout_arr = [tpout_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    short_bias_arr, long_bias_arr = [bias_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    # print(\"long_bias_arr.shape :\", long_bias_arr.shape)    \n","    # print(\"elapsed time :\", time.time() - start_0)\n","\n","    short_true_bias_idx = short_bias_arr[:, 0] <= short_bias_arr[:, 1] # info, threshold (등호의 유무가 매우 유의미함)\n","    long_true_bias_idx = long_bias_arr[:, 0] >= long_bias_arr[:, 1]\n","\n","    # ------ plot_data ------ #\n","    try:\n","      # start_0 = time.time()\n","      short_pr, short_liqd = get_pr_v3(OrderSide.SELL, h, l, short_obj, short_tpout_arr, short_lvrg_arr, short_fee_arr, p_ranges, p_qty, inversion)\n","      short_total_pr = to_total_pr(len_df, short_pr, short_obj[-2])\n","      short_cum_pr = np.cumprod(short_total_pr)\n","      # short_liqd = liquidation_v2(OrderSide.SELL, h, short_obj[:4], short_lvrg_arr, short_fee_arr)\n","      short_prcn, short_rc = precision(short_pr, short_true_bias_idx), recall(short_true_bias_idx)\n","      if signi:\n","        short_idep_res_obj = (short_prcn, short_rc) + get_res_info_nb_v2(sample_len, short_pr, short_total_pr, short_cum_pr, short_liqd)\n","      else:\n","        gs_idx = plot_info_v4(gs, gs_idx, sample_len, short_pr, short_total_pr, short_cum_pr, short_liqd, short_prcn, short_rc, short_lvrg_arr[-1], title_position, fontsize)\n","      # print(\"elapsed time :\", time.time() - start_0)\n","\n","    except Exception as e:\n","      gs_idx += 1\n","      print(\"error in short plot_data :\", e)\n","\n","    try:\n","      # start_0 = time.time()\n","      long_pr, long_liqd = get_pr_v3(OrderSide.BUY, h, l, long_obj, long_tpout_arr, long_lvrg_arr, long_fee_arr, p_ranges, p_qty, inversion)\n","      long_total_pr = to_total_pr(len_df, long_pr, long_obj[-2])\n","      long_cum_pr = np.cumprod(long_total_pr)\n","      # long_liqd = liquidation_v2(OrderSide.BUY, l, long_obj[:4], long_lvrg_arr, long_fee_arr)\n","      long_prcn, long_rc = precision(long_pr, long_true_bias_idx), recall(long_true_bias_idx)\n","      if signi:\n","        long_idep_res_obj = (long_prcn, long_rc) + get_res_info_nb_v2(sample_len, long_pr, long_total_pr, long_cum_pr, long_liqd)\n","      else:\n","        gs_idx = plot_info_v4(gs, gs_idx, sample_len, long_pr, long_total_pr, long_cum_pr, long_liqd, long_prcn, long_rc, long_lvrg_arr[-1], title_position, fontsize)\n","      # print(\"elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","      gs_idx += 1\n","      print(\"error in long plot_data :\", e)\n","\n","    try:\n","      # start_0 = time.time()\n","      both_pr = np.vstack((short_pr, long_pr))  # for 2d shape, obj 를 1d 로 만들지 않는 이상, pr 은 2d 유지될 것\n","      both_total_pr = to_total_pr(len_df, both_pr, both_obj[-2])\n","      both_cum_pr = np.cumprod(both_total_pr)\n","      both_liqd = min(short_liqd, long_liqd)\n","      both_true_bias_idx = np.hstack((short_true_bias_idx, long_true_bias_idx))  # for 1d shape\n","      both_prcn, both_rc = precision(both_pr, both_true_bias_idx), recall(both_true_bias_idx)\n","      if signi:\n","        both_idep_res_obj = (both_prcn, both_rc) + get_res_info_nb_v2(sample_len, both_pr, both_total_pr, both_cum_pr, both_liqd)\n","      else:\n","        gs_idx = plot_info_v4(gs, gs_idx, sample_len, both_pr, both_total_pr, both_cum_pr, both_liqd, both_prcn, both_rc, lvrg_arr[-1], title_position, fontsize)\n","      # print(\"elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","      gs_idx += 1\n","      print(\"error in both plot_data :\", e)\n","\n","    if not signi:\n","        for obj, cum_pr in zip([short_obj, long_obj, both_obj], [short_cum_pr, long_cum_pr, both_cum_pr]):\n","          try:\n","            # start_0 = time.time()\n","            gs_idx = frq_dev_plot_v3(gs, gs_idx, len_df, sample_len, obj[-2], cum_pr[-1], fontsize)\n","            # print(\"elapsed time :\", time.time() - start_0)          \n","          except Exception as e:\n","            gs_idx += 1\n","            print(\"error in frq_dev_plot_v3 :\", e)\n","\n","        plt.show()\n","        plt.close()\n","        return short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_bias_arr, \\\n","                long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_bias_arr\n","    else:\n","        return [short_idep_res_obj[:-1], long_idep_res_obj[:-1], both_idep_res_obj[:-1]]"],"metadata":{"id":"xafHpMLwESKf"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### get paired_res function"],"metadata":{"id":"EFyWTuscH8VH"}},{"cell_type":"code","source":["def en_ex_pairing(res_df, open_idx, open_info_list, ohlc_list, point2_list, market_data_list, config_list, np_timeidx, funcs):  # 이미 충분히 줄여놓은 idx 임\n","    side_arr, zone_arr, id_arr, id_idx_arr = open_info_list\n","    id_idx_arr = id_idx_arr.astype(int)\n","\n","    ep_out, ep_loc_point2, lvrg_set = funcs\n","\n","    valid_openi_list, pair_idx_list, pair_price_list, lvrg_list, fee_list, tpout_list, bias_list = [[] for li in range(7)]\n","    len_df = len(res_df)\n","    len_open_idx = len(open_idx)\n","    i, open_i = 0, -1  # i for total_res_df indexing\n","\n","    while 1:\n","        # ------------ entry phase ------------ #\n","        open_i += 1  # 확인 끝났으면 조기 이탈(+1), 다음 open_idx 조사 진행\n","        if open_i >= len_open_idx:\n","          break\n","          \n","        # ------ ep_loc ------ #\n","        op_idx = open_idx[open_i]  # open_i 는 i 와 별개로 운영\n","        if op_idx < i:  # i = 이전 거래 끝난후의 res_df index - \"거래 종료후 거래 시작\", '<' : 거래 종료시점 진입 가능하다는 의미\n","            continue\n","\n","        # ------ dynamic data by ID ------ #\n","        #     1. 해당 id 로 config 재할당해야함\n","        id_idx = id_idx_arr[open_i]\n","        config = config_list[id_idx]\n","        strat_version = config.strat_version\n","        open_side = side_arr[open_i]\n","\n","        side_pos = 'short' if open_side == OrderSide.SELL else 'long'\n","        ep_arr = res_df['{}_ep_{}'.format(side_pos, strat_version)].to_numpy()  # Todo - while loop 내에서 to_numpy() 반복하느니, pd_indexing 이 낫지 않을까\n","        tp_arr = res_df['{}_tp_{}'.format(side_pos, strat_version)].to_numpy()  # => eptpout arr_list 만들어서 꺼내 사용하면 될 것\n","        out_arr = res_df['{}_out_{}'.format(side_pos, strat_version)].to_numpy()\n","        bias_info_arr = res_df['{}_bias_info_{}'.format(side_pos, strat_version)].to_numpy()  # ex. rolling(entry ~ end)'s high\n","        bias_thresh_arr = res_df['{}_bias_thresh_{}'.format(side_pos, strat_version)].to_numpy()  # ex. close + dc_T20 * 0.5\n","\n","        # ------ ei_k & point2 ------ #\n","        i = op_idx + 1  # open_signal 이 close_bar.shift(1) 이라고 가정하고 다음 bar 부터 체결확인한다는 의미\n","        if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","            break\n","        exec_j, ep_j, tp_j, out_j, entry_done, en_p, fee = check_eik_point2_exec(res_df, config, op_idx, len_df, open_side, [*ohlc_list, ep_arr], point2_list, ep_out, ep_loc_point2)\n","        i = exec_j\n","        \n","        if not entry_done:\n","            continue\n","\n","        # ------ leverage ------ #\n","        out = out_arr[out_j]  # lvrg_set use out on out_j\n","        leverage = lvrg_set(res_df, config, open_side, en_p, out, fee)  # res_df 변수 사용됨 - 주석 처리 된 상태일뿐\n","        if leverage is None:\n","            continue\n","\n","        exit_done, cross_on = 0, 0\n","        # ------ check tpout_onexec ------ #\n","        # if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","        if config.ep_set.entry_type == \"LIMIT\":\n","            if config.tp_set.tp_onexec:  # dynamic 은 tp_onexec 사용하는 의미가 없음\n","                tp_j = exec_j\n","            if config.out_set.out_onexec:  # dynamic 은 out_onexec 사용하는 의미가 없음\n","                out_j = exec_j\n","\n","        while 1:\n","            # ------------ exit phase ------------ #\n","            if not config.tp_set.static_tp:\n","                tp_j = i\n","            if not config.out_set.static_out:\n","                out_j = i\n","\n","            # ------------ tp ------------ #\n","            if not config.tp_set.non_tp and i != exec_j:\n","                exit_done, ex_p, fee = check_limit_tp_exec(res_df, config, open_i, i, tp_j, len_df, fee, open_side, exit_done, [*ohlc_list, [tp_arr]])  # 여기서는 j -> i 로 변경해야함\n","                # if config.tp_set.tp_type in ['LIMIT']:  # 'BOTH' -> 앞으로는, LIMIT 밖에 없을거라 주석처리함\n","                # if not exit_done and config.tp_set.tp_type in ['MARKET', 'BOTH']:\n","\n","            # ------------ out ------------ #\n","            # ------ signal_out ------ #\n","            if not exit_done:\n","              exit_done, cross_on, ex_p, fee = check_market_out_exec(config, open_i, i, len_df, fee, open_side, cross_on, exit_done, [np_timeidx, *market_data_list])\n","            # ------ hl_out ------ #\n","            if config.out_set.hl_out != \"None\":\n","              if not exit_done:  # and i != len_df - 1:                \n","                  exit_done, ex_p, fee = check_out(config, open_i, i, out_j, len_df, fee, open_side, exit_done, [*ohlc_list, out_arr])\n","\n","            if exit_done:  # 이 phase 는 exit_phase 뒤에도 있어야할 것 - entry_done var. 사용은 안하겠지만\n","                # ------ append dynamic vars. ------ #\n","                valid_openi_list.append(open_i)  # side, zone, start_ver arr 모두 openi_list 로 접근하기 위해 open_i 를 담음\n","                pair_idx_list.append([exec_j, i])  # entry & exit (체결 기준임)\n","                pair_price_list.append([en_p, ex_p])\n","                lvrg_list.append(leverage)\n","                fee_list.append(fee)\n","                tpout_list.append([tp_arr[tp_j], out_arr[out_j]])  # for tpout_line plot_check\n","                # bias_list.append([bias_info_arr[exec_j], bias_thresh_arr[exec_j]])  # backtest 에서만 가능한 future_data 사용\n","                bias_list.append([bias_info_arr[exec_j], tp_arr[tp_j]])  # tp = bias_thresh \n","\n","                # open_i += 1  # 다음 open_idx 조사 진행\n","                break\n","\n","            # 1. 아래있으면, 체결 기준부터 tp, out 허용\n","            # 2. 위에있으면, entry 다음 tick 부터 exit 허용\n","            i += 1\n","            if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","                break\n","                \n","        if i >= len_df: # or open_i >= len_open_idx:  # res_df 의 last_index 까지 돌아야함\n","            break\n","        else:\n","            continue\n","\n","    return np.array(valid_openi_list), np.array(pair_idx_list), np.array(pair_price_list), np.array(lvrg_list), np.array(fee_list), np.array(tpout_list), np.array(bias_list)\n","\n","\n","def check_eik_point2_exec(res_df, config, op_idx, len_df, open_side, np_datas, point2_list, ep_out, ep_loc_point2):\n","    o, h, l, c, ep_arr = np_datas\n","    ep_j = op_idx\n","    tp_j = op_idx\n","    out_j = op_idx\n","\n","    strat_version = config.strat_version    \n","    allow_ep_in = 0 if config.ep_set.point2.use_point2 else 1\n","    entry_done = 0\n","    ep = None\n","\n","    if config.ep_set.entry_type == \"LIMIT\":\n","        fee = config.trader_set.limit_fee\n","\n","        for e_j in range(op_idx + 1, len_df):\n","            # ------ index setting for dynamic options ------ #\n","            if not config.ep_set.static_ep:\n","                ep_j = e_j  # dynamic_ep 를 위한 ep_index var.\n","                out_j = e_j  # dynamic_out 를 위한 out_index var. - 조건식이 static_ep 와 같이 있는 이유 모름 => dynamic_lvrg 로 사료됨\n","\n","            if not config.tp_set.static_tp:\n","                tp_j = e_j\n","\n","            # ------ ei_k ------ # - limit 사용하면 default 로 ei_k 가 존재해야함\n","            if ep_out(res_df, config, op_idx, e_j, tp_j, [h, l], open_side):\n","              break\n","\n","            # ------ point2 ------ #\n","            if not allow_ep_in:\n","                allow_ep_in, out_j = ep_loc_point2(res_df, config, e_j, out_j, point2_list, side=open_side)\n","                if allow_ep_in:\n","                  if config.ep_set.point2.entry_type == \"LIMIT\":\n","                    ep_j = e_j\n","                    # print(\"e_j in point2 :\", e_j)\n","                    continue\n","\n","            # ------ check ep_exec ------ #\n","            if allow_ep_in:\n","              if config.ep_set.point2.use_point2 and config.ep_set.point2.entry_type == 'MARKET':\n","                entry_done = 1\n","                ep = c[e_j]\n","                break\n","              else:\n","                if open_side == OrderSide.SELL:\n","                    if h[e_j] >= ep_arr[ep_j]:\n","                        entry_done = 1\n","                        ep = ep_arr[ep_j]\n","                        if o[e_j] >= ep_arr[ep_j]:  # open comp 는 결국, 수익률에 얹어주는 logic (반보수) -> 사용 보류\n","                            ep = o[e_j]\n","                        break\n","                else:\n","                    if l[e_j] <= ep_arr[ep_j]:\n","                        entry_done = 1\n","                        ep = ep_arr[ep_j]\n","                        if o[e_j] <= ep_arr[ep_j]:\n","                            ep = o[e_j]\n","                        break\n","\n","    else:  # market entry\n","        e_j = op_idx + 1\n","        entry_done = 1\n","        ep = c[op_idx]\n","        fee = config.trader_set.market_fee\n","\n","    return e_j, ep_j, tp_j, out_j, entry_done, ep, fee  # 다음 start_i <-- e_j 로 변경\n","    #   e_j => 다음 phase 의 시작 index <-> ep_j : ep 의 기준 index\n","    #   ep_j, tp_j, out_j 가 return 되어야함 - exit phase 에서 이어가기 위함\n","\n","\n","def check_limit_tp_exec(res_df, config, open_i, j, tp_j, len_df, fee, open_side, exit_done, np_datas):\n","    o, h, l, c, tps = np_datas\n","    tp = None\n","    strat_version = config.strat_version\n","    len_tps = len(tps)\n","\n","    for tp_i, tp_arr in enumerate(tps):\n","        #     decay adjustment    #\n","        #     tp_j includes dynamic_j - functionalize  #\n","        try:\n","            if config.tr_set.decay_gap != \"None\":\n","                decay_share = (j - open_i) // config.tp_set.decay_term\n","                decay_remain = (j - open_i) % config.tp_set.decay_term\n","                if j != open_i and decay_remain == 0:\n","                    if open_side == OrderSide.SELL:\n","                        tp_arr[tp_j] += res_df['short_tp_gap_{}'.format(strat_version)].iloc[open_i] * config.tr_set.decay_gap * decay_share\n","                    else:\n","                        tp_arr[tp_j] -= res_df['long_tp_gap_{}'.format(strat_version)].iloc[open_i] * config.tr_set.decay_gap * decay_share\n","        except:\n","            pass\n","\n","        if open_side == OrderSide.SELL:\n","            if l[j] <= tp_arr[tp_j]:  # and partial_tp_cnt == tp_i:  # we use static tp now\n","                # if l[j] <= tp_arr[j] <= h[j]: --> 이건 잘못되었음\n","                # partial_tp_cnt += 1 --> partial_tp 보류\n","\n","                # ------ dynamic tp ------ #\n","                if tp_arr[j] != tp_arr[j - 1] and not config.tp_set.static_tp:\n","                    # tp limit 이 불가한 경우 - open 이 이미, tp 를 넘은 경우\n","                    if o[j] < tp_arr[j]:\n","                        tp = o[j]\n","                    # tp limit 이 가능한 경우 - open 이 아직, tp 를 넘지 않은 경우\n","                    else:\n","                        tp = tp_arr[j]\n","                # ------ static tp ------ #\n","                else:\n","                    #   tp limit 이 불가한 경우 - open 이 이미, tp 를 넘은 경우\n","                    if o[j] < tp_arr[tp_j]:  # static 해놓고 decay 사용하면 dynamic 이니까\n","                        if config.tr_set.decay_gap != \"None\" and decay_remain == 0:\n","                            tp = o[j]  # tp_j -> open_i 를 가리키기 때문에 decay 는 한번만 진행되는게 맞음\n","                        else:\n","                            tp = tp_arr[tp_j]\n","                    else:\n","                        tp = tp_arr[tp_j]\n","\n","                if tp_i == len_tps - 1:\n","                    exit_done = 1  # partial 을 고려해 exit_done = 1 상태는 tp_i 가 last_index 로 체결된 경우만 해당\n","\n","        else:\n","            if h[j] >= tp_arr[tp_j]:\n","                # ------ dynamic tp ------ #\n","                if tp_arr[j] != tp_arr[j - 1] and not config.tp_set.static_tp:\n","                    if o[j] > tp_arr[j]:\n","                        tp = o[j]\n","                    else:\n","                        tp = tp_arr[j]\n","\n","                # ------ static tp ------ #\n","                else:\n","                    if o[j] > tp_arr[tp_j]:\n","                        if config.tr_set.decay_gap != \"None\" and decay_remain == 0:\n","                            tp = o[j]\n","                        else:\n","                            tp = tp_arr[tp_j]\n","                    else:\n","                        tp = tp_arr[tp_j]\n","\n","                if tp_i == len_tps - 1:\n","                    exit_done = 1  # partial 을 고려해 exit_done = 1 상태는 tp_i 가 last_index 로 체결된 경우만 해당\n","\n","    if exit_done:\n","        fee += config.trader_set.limit_fee\n","\n","    return exit_done, tp, fee\n","\n","\n","def check_market_out_exec(config, open_i, j, len_df, fee, open_side, cross_on, exit_done, np_datas):\n","    np_timeidx, c, bb_lower_5T, bb_upper_5T, rsi_exit, ha_o, ha_h, ha_l, ha_c = np_datas\n","    ex_p = None\n","    strat_version = config.strat_version\n","\n","    # ------ timestamp ------ #\n","    if config.out_set.tf_exit != \"None\":\n","        if np_timeidx[j] % config.out_set.tf_exit == config.out_set.tf_exit - 1 and j != open_i:\n","            exit_done = 1\n","\n","    # ------ rsi ------ # -> vectorize 가능함 => 추후 적용\n","    if config.out_set.rsi_exit:\n","        if open_side == OrderSide.SELL:\n","            if (rsi_exit[j - 1] >= 50 - config.loc_set.point.osc_band) & (rsi_exit[j] < 50 - config.loc_set.point.osc_band):\n","                exit_done = 1\n","        else:\n","            if (rsi_exit[j - 1] <= 50 + config.loc_set.point.osc_band) & (rsi_exit[j] > 50 + config.loc_set.point.osc_band):\n","                exit_done = 1\n","\n","    # ------ heikin_ashi ------ #\n","    # if strat_version in ['v3_3']:\n","    #     if open_side == OrderSide.SELL:\n","    #       if (ha_o[j] < ha_c[j]):# & (ha_o[j] == ha_l[j]):   # 양봉 출현\n","    #           exit_done = 1\n","    #     else:\n","    #       if (ha_o[j] > ha_c[j]):# & (ha_o[j] == ha_h[j]):  # 음봉 출현\n","    #           exit_done = 1\n","\n","    # ------------ early out ------------ #\n","    # ------ bb ------ # --> cross_on 기능은 ide latency 개선 여부에 해당되지 않음\n","    if strat_version in ['v5_2']:\n","        if open_side == OrderSide.SELL:\n","            if c[j] < bb_lower_5T[j] < c[j - 1]:\n","                cross_on = 1\n","            if cross_on == 1 and c[j] > bb_upper_5T[j] > c[j - 1]:\n","                exit_done = 1\n","        else:\n","            if c[j] > bb_upper_5T[j] > c[j - 1]:\n","                cross_on = 1\n","            if cross_on == 1 and c[j] < bb_lower_5T[j] < c[j - 1]:\n","                exit_done = 1\n","\n","    if exit_done:\n","        ex_p = c[j]\n","        fee += config.trader_set.market_fee\n","\n","    return exit_done, cross_on, ex_p, fee\n","\n","\n","def check_out(config, open_i, j, out_j, len_df, fee, open_side, exit_done, np_datas):\n","    o, h, l, c, out_arr = np_datas\n","    ex_p = None\n","\n","    if config.out_set.hl_out:\n","        if open_side == OrderSide.SELL:\n","            if h[j] >= out_arr[out_j]:  # check out only once\n","                exit_done = 1\n","        else:\n","            if l[j] <= out_arr[out_j]:  # check out only once\n","                exit_done = 1\n","    else:  # close_out\n","        if open_side == OrderSide.SELL:\n","            if c[j] >= out_arr[out_j]:  # check out only once\n","                exit_done = 1\n","        else:\n","            if c[j] <= out_arr[out_j]:  # check out only once\n","                ex_p = c[j]\n","                exit_done = 1\n","\n","    if exit_done:\n","        if config.out_set.hl_out:\n","            ex_p = out_arr[out_j]\n","        else:\n","            ex_p = c[j]\n","\n","        if open_side == OrderSide.SELL:\n","            if o[j] >= out_arr[out_j]:\n","                ex_p = o[j]\n","        else:\n","            if o[j] <= out_arr[out_j]:\n","                ex_p = o[j]\n","\n","        fee += config.trader_set.market_fee\n","\n","    return exit_done, ex_p, fee"],"metadata":{"id":"qfbtFVMR01UJ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"jp-MarkdownHeadingCollapsed":true,"tags":[],"id":"zQ-roiifspcX"},"source":["#### ep_loc.point & zone legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Js5eL87VspcX"},"outputs":[],"source":["\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 (res_df['close'] < res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(strat_version)] - 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] >= res_df['bb_lower_1m']) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['bb_lower_1m']) &\n","    #                 (res_df['close'] < res_df['bb_lower_1m'])\n","    #                 , res_df['entry_{}'.format(strat_version)] - 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   (res_df['close'] > res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(strat_version)] + 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] <= res_df['bb_upper_1m']) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['bb_upper_1m']) &\n","    #                   (res_df['close'] > res_df['bb_upper_1m'])\n","    #                 , res_df['entry_{}'.format(strat_version)] + 1, res_df['entry_{}'.format(strat_version)])\n","\n","\n","    \n","   # --------------- ema --------------- #   \n","  # res_df['ema5_1m'] = ema(res_df['close'], 5).shift(1)\n","\n","  #   # --------------- cloud bline --------------- #   \n","  # res_df['cloud_bline_1m'] = cloud_bline(res_df, 26).shift(1)\n","  \n","    #       stochastic      #\n","  # res_df['stoch'] = stoch(res_df, 5, 3, 3)\n","\n","    #       fisher      #\n","  # res_df['fisher30'] = fisher(res_df, 30)\n","  # res_df['fisher60'] = fisher(res_df, 60)\n","  # res_df['fisher120'] = fisher(res_df, 120)\n","\n","    #       cctbbo      #\n","  # res_df['cctbbo'], _ = cct_bbo(res_df, 21, 13)\n","\n","    #       ema_roc      #\n","  # res_df['ema_roc'] = ema_roc(res_df['close'], 13, 9)\n","\n","\n","   # ------------------------------ htf data ------------------------------ #    \n","\n","  #             Todo              #\n","  # htf_df = pd.read_excel(date_path2 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # htf_df = pd.read_excel(date_path3 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # htf_df = pd.read_excel(date_path4 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # htf_df = pd.read_excel(date_path5 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # # # # htf_df = pd.read_excel(date_path6 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","\n","  # # ---- htf index slicing ---- #\n","  # htf_df = htf_df.loc[:res_df.index[-1]]\n","  \n","  # print(\"res_df.index[-1] :\", res_df.index[-1])\n","  # print(\"htf_df.index[-1] :\", htf_df.index[-1])\n","\n","  # res_df = dc_line(res_df, htf_df, '5m')\n","  # res_df = dc_level(res_df, '5m', 1)\n","\n","\n","  # # # if \"sma4\" in res_df.columns:\n","  # # #   res_df.drop(\"sma4\", axis=1, inplace=1)\n","\n","  # # htf_df['sma'] = htf_df['close'].rolling(60).mean()\n","  # # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, htf_df, [-1]), columns=['sma_30m']))\n","  \n","  # htf_df['stoch'] = stoch(htf_df, 13, 3, 3)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, htf_df, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","   \n","  # fifth_df['ema'] = ema(fifth_df['close'], 5)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, fifth_df, [-1]), columns=['ema5']))\n","\n","        # ------------------------------------ short ------------------------------------ # \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 0:\n","        #   mr_score += 1          \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_upper_1m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_upper_3m'].iloc[i] <= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_upper_5m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == 'MARKET':\n","        #   mr_const_cnt += 1\n","        #   if (res_df['close'].iloc[i] - res_df['short_tp'].iloc[i]) / (res_df['short_out'].iloc[i] - res_df['close'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error):  \n","        #     mr_score += 1\n","\n","           \n","        # ------- entry once ------- #   \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == 1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == -1:\n","        #     prev_entry_cnt += 1          \n","        # # # print(\"prev_entry_cnt :\", prev_entry_cnt)\n","\n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] < res_df['bb_lower_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_lower2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_base_1h'].iloc[i]:\n","\n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] < res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","  \n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['low'].iloc[i] > res_df['short_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1\n","\n","\n","\n","        # ------------------------------------ long ------------------------------------ # \n","          \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 1:\n","        #   mr_score += 1   \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 1:\n","        #   mr_score += 1     \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 1:\n","          # mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_lower_1m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_lower_3m'].iloc[i] >= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_lower_5m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == \"MARKET\":\n","          # mr_const_cnt += 1        \n","          # if (res_df['long_tp'].iloc[i] - res_df['close'].iloc[i]) / (res_df['close'].iloc[i] - res_df['long_out'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error): # 일반적으로 dr 상에서 tp 비율이 더 커짐 (tr 보다)\n","          #   mr_score += 1\n","\n","        # -------------- ep limit -------------- #    \n","        # mr_const_cnt += 1\n","        # # if (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # if config.ep_set.min_eplim_pct < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # # if 0 < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        #   # if res_df['st_gap_15m'].iloc[i] / res_df['open'].iloc[i] < 0:\n","        #   #   print(\"i, res_df['st_gap_15m'].iloc[i] :\", i, res_df['st_gap_15m'].iloc[i])\n","        #   mr_score += 1\n","\n","\n","        # -------------- entry once -------------- #    \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == -1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == 1:\n","        #     prev_entry_cnt += 1\n","          \n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","          \n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] > res_df['bb_upper_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_upper2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_base_1h'].iloc[i]:\n","        \n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] > res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","\n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['high'].iloc[i] < res_df['long_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","          \n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1"]},{"cell_type":"markdown","source":["#### dump"],"metadata":{"id":"_blyFhQJUd5X"}},{"cell_type":"code","source":["def get_max_outg(open_side, config, ohlc_list, obj, tpout_arr, out_gap):\n","\n","    h, l = ohlc_list[1:3]\n","    en_p, _, en_idxs, _, open_idxs = obj\n","\n","    if open_side == \"SELL\":\n","      idxgs = [np.argwhere(l[int(en_idx):int(en_idx + config.tr_set.bias_info_tick)] <= tpout_arr[i, 0]) for i, en_idx in enumerate(en_idxs)]\n","    else:\n","      idxgs = [np.argwhere(h[int(en_idx):int(en_idx + config.tr_set.bias_info_tick)] >= tpout_arr[i, 0]) for i, en_idx in enumerate(en_idxs)]\n","\n","    min_idxg = np.array([gaps.min() if len(gaps) != 0 else np.nan for gaps in idxgs])  # get 최소 idx_gap from en_idx\n","    nan_idx = np.isnan(min_idxg) # .astype(int)\n","    min_idxg[nan_idx] = 0  # fill na 0, for idex summation below\n","\n","    if open_side == \"SELL\":\n","      max_outg = np.array([np.max(h[int(en_idx):int(en_idx + idx_gap + 1)]) - ep_ for en_idx, idx_gap, ep_ in zip(en_idxs, min_idxg, en_p)]) / out_gap\n","    else:\n","      max_outg = np.array([ep_ - np.min(l[int(en_idx):int(en_idx + idx_gap + 1)]) for en_idx, idx_gap, ep_ in zip(en_idxs, min_idxg, en_p)]) / out_gap # out_idx 포함\n","\n","    return max_outg[~nan_idx], open_idxs[~nan_idx].astype(int)  # true_bias 의 outg data 만 사용\n","\n","def get_max_tpg(open_side, ohlc_list, pr_, obj, tp_gap):  # much faster\n","\n","    h, l = ohlc_list[1:3]\n","\n","    en_p = obj[0]\n","    # ex_p = obj[1]\n","\n","    np_obj = np.array(obj).T[0]\n","    assert len(np_obj.shape) == 2\n","\n","    # iin == iout 인 경우 분리\n","    en_idx = np_obj[:, 2]\n","    ex_idx = np_obj[:, 3]\n","    equal_idx = en_idx == ex_idx\n","\n","    if open_side == \"SELL\":\n","        min_low = np.full_like(en_p, np.nan)\n","        min_low[~equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)  # start from iin + 1\n","        max_tpg = (en_p - min_low) / tp_gap\n","    else:\n","        max_high = np.full_like(en_p, np.nan)\n","        max_high[~equal_idx] = np.array([np.max(h[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        max_tpg = (max_high - en_p) / tp_gap\n","\n","    return max_tpg[pr_ < 1]  # out 된 case 만 tpg 담음\n","    # return max_tpg"],"metadata":{"id":"0bIblGFW_J9y"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def get_max_tpg(open_side, ohlc_list, pr_, obj_, rtc_gap):  # much faster\n","    if type(obj_) == list:\n","        obj_ = list(zip(*obj_))\n","\n","    h, l = ohlc_list[1:3]\n","\n","    if open_side == \"SELL\":\n","      max_tpg = np.array([ep_ - np.min(l[int(iin):int(iout + 1)]) for ep_, _, iin, iout in obj_]) / rtc_gap # out 포함\n","      # max_outg = np.array([np.max(h[int(iin):int(iout + 1)]) - ep_ for ep_, _, iin, iout in obj_]) / rtc_gap\n","    else:\n","      max_tpg = np.array([np.max(h[int(iin):int(iout + 1)]) - ep_ for ep_, _, iin, iout in obj_]) / rtc_gap\n","      # max_outg = np.array([ep_ - np.min(l[int(iin):int(iout + 1)]) for ep_, _, iin, iout in obj_]) / rtc_gap\n","\n","    return max_tpg[pr_ < 1]  # out 된 case 만 tpg 담음"],"metadata":{"id":"yGm3hwHEJ1va"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["short_max_tpg = get_max_tpg(\"SELL\", ohlc_list, short_pr, short_obj[:4], short_open_rtc_gap)\n","long_max_tpg = get_max_tpg(\"BUY\", ohlc_list, long_pr, long_obj[:4], long_open_rtc_gap)"],"metadata":{"id":"eooryL32-zxp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["long_max_tpg"],"metadata":{"id":"yOMiuw7cJYmZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def get_pr_v3(open_side, h, l, obj, tpout, lvrg, fee, p_ranges, p_qty, inversion=False):  # --> 여기서 사용하는 ex_p = ex_p\n","\n","    en_p = obj[0]\n","    # ex_p = obj[1]\n","    tp, out = np.split(tpout, 2, axis=1)\n","    len_p = len(p_ranges)\n","    en_ps, tps, outs, lvrgs, fees = [np.tile(arr_, (1, len_p)) for arr_ in [en_p, tp, out, lvrg, fee]]\n","    \n","    np_obj = np.array(obj).T[0]\n","    assert len(np_obj.shape) == 2\n","    \n","    # iin == iout 인 경우 분리\n","    en_idx = np_obj[:, 2]\n","    ex_idx = np_obj[:, 3]\n","    equal_idx = en_idx == ex_idx\n","        \n","    if open_side == \"SELL\":\n","        p_tps = en_ps - (en_ps - tps) * p_ranges\n","        # min_low = np.array([np.min(l[int(iin):int(iout + 1)]) for _, _, iin, iout in list(zip(*obj[:4]))]).reshape(-1, 1)  # -> deprecated, start from iin + 1\n","        min_low = np.full_like(en_p, np.nan)\n","        min_low[~equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1) # start from iin + 1\n","        tp_idx = np.tile(min_low, (1, len_p)) <= p_tps\n","        \n","        # ------ liquidation ------ #\n","        max_high = np.full_like(en_p, np.nan)\n","        max_high[~equal_idx] = np.array([np.max(h[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        liqd = np.nanmin((en_p / max_high - fee - 1) * lvrg + 1)\n","    else:\n","        p_tps = en_ps + (tps - en_ps) * p_ranges\n","        # max_high = np.array([np.max(h[int(iin):int(iout + 1)]) for _, _, iin, iout in list(zip(*obj[:4]))]).reshape(-1, 1)\n","        max_high = np.full_like(en_p, np.nan)\n","        max_high[~equal_idx] = np.array([np.max(h[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        tp_idx = np.tile(max_high, (1, len_p)) >= p_tps\n","        # print(p_tps)\n","        # print(max_high)\n","\n","        # ------ liquidation ------ #\n","        min_low = np.full_like(en_p, np.nan)\n","        min_low[~equal_idx] = np.array([np.min(l[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        liqd = np.nanmin((min_low / en_p - fee - 1) * lvrg + 1)\n","\n","    ex_ps = outs.copy()\n","    ex_ps[tp_idx] = p_tps[tp_idx]\n","\n","    if open_side == \"SELL\":\n","        if not inversion:\n","            pr = ((en_ps / ex_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","        else:\n","            pr = ((ex_ps / en_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","    else:\n","        if not inversion:\n","            # print(fees)\n","            # print(p_qty)\n","            # print(p_qty * fees)\n","            pr = ((ex_ps / en_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","        else:\n","            pr = ((en_ps / ex_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","\n","    return pr.reshape(-1, 1), liqd"],"metadata":{"id":"SrGNSuOjCyPn"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["p_ranges, p_qty = [0.2, 0.6, 1], [1, 0.0, 0.00]\n","long_pr, long_liqd = get_pr_v3(OrderSide.BUY, h, l, long_obj, long_tpout_arr, long_lvrg_arr, long_fee_arr, p_ranges, p_qty, inversion)"],"metadata":{"id":"b5s3Us9VtlXH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["long_pr"],"metadata":{"id":"s1O_gGXVtrtz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def liquidation_v2(open_side, data_, obj_, lvrg, fee):  # v1 is deprecated\n","    if type(obj_) == list:\n","        obj = list(zip(*obj_))\n","\n","    np_obj = np.array(obj_).T[0]\n","    assert len(np_obj.shape) == 2\n","    \n","    en_p = obj_[0]\n","\n","    # iin == iout 인 경우 분리\n","    en_idx = np_obj[:, 2]\n","    ex_idx = np_obj[:, 3]\n","    equal_idx = en_idx == ex_idx\n","\n","    if open_side == \"SELL\":\n","        max_high = np.full_like(en_p, np.nan)\n","        max_high[~equal_idx] = np.array([np.max(data_[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        return np.nanmin((en_p / max_high - fee - 1) * lvrg + 1)\n","    else:\n","        min_low = np.full_like(en_p, np.nan)\n","        min_low[~equal_idx] = np.array([np.min(data_[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        return np.nanmin((min_low / en_p - fee - 1) * lvrg + 1)"],"metadata":{"id":"HBFh3FJLpYeZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["short_liqd = liquidation_v2(OrderSide.SELL, h, short_obj[:4], short_lvrg_arr, short_fee_arr)\n","long_liqd = liquidation_v2(OrderSide.BUY, l, long_obj[:4], long_lvrg_arr, long_fee_arr)\n","\n","print(short_liqd)\n","print(long_liqd)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GtajcCM49AGr","executionInfo":{"status":"ok","timestamp":1648462727490,"user_tz":-540,"elapsed":527,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"a0c857d5-83db-407c-f0dd-bb906de72f20"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(2005,)\n","(1724,)\n","0.9338351565411452\n","0.9832121539680836\n"]}]},{"cell_type":"code","source":["def liquidation_v2(open_side, data_, obj_, lvrg, fee):  # much faster\n","\n","    # if type(obj_) == list:\n","    #     obj_ = \n","    # if open_side == \"SELL\":\n","    #     return np.min([(ep_ / np.max(data_[int(iin):int(iout + 1)]) - fee - 1) * lvrg + 1 for ep_, _, iin, iout in obj_])\n","    # else:\n","    #     return np.min([(np.min(data_[int(iin):int(iout + 1)]) / ep_ - fee - 1) * lvrg + 1 for ep_, _, iin, iout in obj_])\n","\n","    np_obj = np.array(obj).T[0]\n","    assert len(np_obj.shape) == 2\n","\n","    en_p = obj_[0]  # 2d\n","\n","    print(np_obj.shape)\n","    \n","    # iin == iout 인 경우 분리\n","    en_idx = np_obj[:, 2]\n","    ex_idx = np_obj[:, 3]\n","    equal_idx = en_idx == ex_idx\n","    print(equal_idx)\n","        \n","    if open_side == \"SELL\":\n","        max_high = en_p.copy()\n","        max_high[~equal_idx] = np.array([np.max(data_[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)  # equal_idx 는 liqd 를 측정하지 않음\n","        return np.min((en_p / max_high - fee - 1) * lvrg + 1)\n","    else:\n","        min_low = en_p.copy()\n","        print(min_low)\n","\n","        # min_low[~equal_idx] = np.array([np.min(data_[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        print(data_)\n","        # res = np.array([np.min(data_[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        res = np.min([(np.min(data_[int(iin):int(iout)]) / ep_ - fee - 1) * lvrg + 1 for ep_, _, iin, iout in list(zip(*obj_)) if iin != iout])\n","        # print(min_low[~equal_idx])\n","        print(res)\n","        return np.min((min_low / en_p - fee - 1) * lvrg + 1)"],"metadata":{"id":"eMuRjqo_evR1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["h, l = ohlc_list[1:3]\n","long_liqd = liquidation_v2(OrderSide.BUY, l, long_obj[:4], long_lvrg_arr, long_fee_arr)"],"metadata":{"id":"uLMEbR_vij3L"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# np.array(long_obj)[:,(en_idx == ex_idx)].shape\n","long_np_obj = np.array(long_obj).T[0]"],"metadata":{"id":"ykrPUuxiXlLG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["long_np_obj[~equal_idx, :4]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MZiMIYLln8bB","executionInfo":{"status":"ok","timestamp":1648455838651,"user_tz":-540,"elapsed":401,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"3a2f1100-f1b1-4ad9-da2f-d50708a60ccd"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[   383.005,    381.73 ,     60.   ,     61.   ],\n","       [   386.33 ,    384.9  ,    105.   ,    107.   ],\n","       [   386.43 ,    385.24 ,    240.   ,    243.   ],\n","       ...,\n","       [  3806.905,   3863.8  , 679660.   , 679934.   ],\n","       [  3953.845,   3944.   , 680228.   , 680255.   ],\n","       [  4102.28 ,   4089.18 , 685040.   , 685167.   ]])"]},"metadata":{},"execution_count":507}]},{"cell_type":"code","source":["# for _, _, iin, iout in long_np_obj[~equal_idx, :4]:\n","#   print(iin, iout)"],"metadata":{"id":"r8rHPFeHm1DQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# long_np_obj.shape\n","# # long_np_obj.T[0]\n","long_np_obj\n","\n","en_idx = long_np_obj[:, 2]\n","ex_idx = long_np_obj[:, 3]\n","\n","# print(en_idx[:5])\n","# print(ex_idx[:5])\n","# np.sum(en_idx == ex_idx)\n","equal_idx = en_idx == ex_idx\n","equal_idx.shape\n","# en_idx"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Uyjsp9EyZ4GF","executionInfo":{"status":"ok","timestamp":1648453058391,"user_tz":-540,"elapsed":390,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"b15069ba-0057-4665-916c-f4417979cb88"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1724,)"]},"metadata":{},"execution_count":446}]},{"cell_type":"code","source":["# # for items in zip(long_np_obj[:4]):\n","# # for items in list(zip(*long_obj[:4])):\n","# for items in long_np_obj:\n","#   print(items)\n","#   break\n","equal_idx = equal_idx.ravel()"],"metadata":{"id":"_GrZgkaSZC2K"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["min_low = np.full_like(en_idx, np.nan)\n","min_low[~equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in long_np_obj[~equal_idx, :4]]).reshape(-1, 1)  # reshape for shape match\n","# min_low[equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in long_np_obj[equal_idx, :4]]).reshape(-1, 1)  # reshape for shape match # np.nan 은 비교에서 무조건 False 즉, out 처리될 것"],"metadata":{"id":"R1YRROdJYWkH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["long_liqd"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jFxV8dami0wn","executionInfo":{"status":"ok","timestamp":1648454521907,"user_tz":-540,"elapsed":3,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"896b3188-7179-4f33-c9e5-f259f5458436"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["-1.7472363139317024"]},"metadata":{},"execution_count":483}]},{"cell_type":"code","source":["short_outg_plot_data = short_max_outg[short_max_outg <= max_plot_outg]  # nan 과 inf 때문에 이 방식 채택\n","long_outg_plot_data = long_max_outg[long_max_outg <= max_plot_outg]\n","print(\"len(short_outg_plot_data) :\", len(short_outg_plot_data))\n","print(\"len(long_outg_plot_data) :\", len(long_outg_plot_data))\n","\n","plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(12, 5))\n","nrows, ncols = 1, 2\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        )\n","  \n","plt.subplot(gs[0])\n","kde_plot_v2(*np.unique(short_outg_plot_data, return_counts=True))\n","\n","plt.subplot(gs[1])\n","kde_plot_v2(*np.unique(long_outg_plot_data, return_counts=True))\n","\n","plt.suptitle('outg')\n","plt.show()"],"metadata":{"id":"mMsDJDmO5qNw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# --- tp > ep > out 검사 --- #\n","long_tp, long_out = np.split(long_tpout_arr, 2, axis=1)\n","long_ep = long_obj[0]"],"metadata":{"id":"BjxCPi96JbfS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(np.sum((long_tp <= long_ep)))\n","print(np.sum((long_ep <= long_out)))\n","print(len((long_ep <= long_out)))"],"metadata":{"id":"Q_wH04vCJzYu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def kde_plot_v2(v, c, kde_factor=0.15, num_samples=100):\n","\n","  # start_0 = time.time()\n","  kde = stats.gaussian_kde(v,weights=c,bw_method=kde_factor)\n","  kdx = np.linspace(v.min(),v.max(),num_samples)\n","  kdy = kde(kdx)\n","  ticks_per_sample = (kdx.max() - kdx.min()) / num_samples\n","  # print(\"ticks_per_sample :\", ticks_per_sample)  # sample 당 가격\n","  # print(\"kdy elapsed_time :\", time.time() - start_0)\n","\n","  peaks,_ = signal.find_peaks(kdy)\n","  pkx = kdx[peaks]\n","  pky = kdy[peaks]\n","  print(\"pkx :\", pkx)\n","\n","  # plt.figure(figsize=(10,5))\n","  plt.hist(v, weights=c, bins=num_samples, alpha=.8, edgecolor='black')\n","  plt.plot(kdx, kdy, color='white')\n","  plt.plot(pkx, pky, 'bo', color='yellow')\n","  # plt.show()\n"],"metadata":{"id":"YlENTUSXhBfa"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def get_max_outg(open_side, config, ohlc_list, obj, tpout_arr, rtc_gap):\n","\n","    h, l = ohlc_list[1:3]    \n","    en_p, _, en_idxs, _, open_idxs = obj\n","\n","    if open_side == \"SELL\":\n","      idxgs = [np.argwhere(l[int(en_idx) : int(en_idx + config.tr_set.bias_info_tick)] <= tpout_arr[i, 0]) for i, en_idx in enumerate(en_idxs)]\n","    else:\n","      idxgs = [np.argwhere(h[int(en_idx) : int(en_idx + config.tr_set.bias_info_tick)] >= tpout_arr[i, 0]) for i, en_idx in enumerate(en_idxs)]\n","\n","    min_idxg = np.array([gaps.min() if len(gaps) != 0 else np.nan for gaps in idxgs])  # get 최소 idx_gap from en_idx\n","    nan_idx = np.isnan(min_idxg) # .astype(int)\n","    min_idxg[nan_idx] = 0  # fill na 0, for idex summation below\n","\n","    if open_side == \"SELL\":\n","      max_outg = np.array([np.max(h[int(en_idx):int(en_idx + idx_gap + 1)]) - ep_ for en_idx, idx_gap, ep_ in zip(en_idxs, min_idxg, en_p)]) / rtc_gap\n","    else:\n","      max_outg = np.array([ep_ - np.min(l[int(en_idx):int(en_idx + idx_gap + 1)]) for en_idx, idx_gap, ep_ in zip(en_idxs, min_idxg, en_p)]) / rtc_gap # out_idx 포함\n","\n","    return max_outg[~nan_idx], open_idxs[~nan_idx].astype(int)  # true_bias 의 outg data 만 사용"],"metadata":{"id":"ZkbuBX1Ygzll"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["strat_version = config.strat_version\n","long_open_res = res_df['long_open_{}'.format(strat_version)].to_numpy().astype(bool)\n","\n","res_df['long_tp_{}'.format(strat_version)].to_numpy()[long_open_res]\n","res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res]\n","# res_df['long_ep_{}'.format(strat_version)].to_numpy()\n","# long_open_res\n","# res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res]\n","# np.sum(res_df['long_tp_{}'.format(strat_version)].to_numpy()[long_open_res] <= res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res])\n","# res = res_df['long_tp_{}'.format(strat_version)].to_numpy()[long_open_res] > res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res]\n","res = res_df['long_tp_{}'.format(strat_version)].to_numpy()[long_open_res] <= res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res]\n","\n","print(res_df['long_tp_{}'.format(strat_version)].to_numpy()[long_open_res][res])\n","print(res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res][res])\n","print(len(res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res][res]))\n","\n","# res = res_df['long_tp_{}'.format(strat_version)].to_numpy() > res_df['long_ep_{}'.format(strat_version)].to_numpy()\n","# res = res_df['long_ep_{}'.format(strat_version)].to_numpy() > res_df['long_out_{}'.format(strat_version)].to_numpy()\n","\n","# print(res_df['long_tp_{}'.format(strat_version)].to_numpy()[res])\n","# print(res_df['long_ep_{}'.format(strat_version)].to_numpy()[res])\n","# print(res_df['long_out_{}'.format(strat_version)].to_numpy()[res])\n","# print(len(res_df['long_ep_{}'.format(strat_version)].to_numpy()[res]))\n","# print(len(res_df['long_out_{}'.format(strat_version)].to_numpy()[res]))\n","\n","# assert np.sum(res_df['long_tp_{}'.format(strat_version)].to_numpy()[long_open_res] <= res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res]) == 0\n","# assert np.sum(res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res] <= res_df['long_out_{}'.format(strat_version)].to_numpy()[long_open_res]) == 0"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mYQgnD9CgC8b","executionInfo":{"status":"ok","timestamp":1648380698566,"user_tz":-540,"elapsed":479,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"e316919a-0e22-4266-ef24-185284cc8cb5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[ 390.58  387.91  344.81  346.25  334.7   351.81  366.07  367.09  372.83  372.08  384.92  387.79  374.12  365.82  364.87  359.06  386.58  381.46  384.71  385.    383.9   384.18  381.18  369.86  373.5   374.17  341.4   344.5   345.29  342.93  343.49  340.7   320.3   345.3   349.59  355.    352.    354.    357.96  358.21  355.    352.47  355.18  346.41  347.14  348.54  346.62  348.28  347.38  348.19  351.74  352.98  339.87  339.64  339.99  339.46  349.97  368.    375.85  374.3   367.2   383.8   386.25  385.31  384.97  377.3   377.85  380.28  378.    365.92  366.9   367.9   368.6   369.61  368.48  369.09  372.72  379.    379.17  375.2   379.09  380.52  397.42  417.13  418.05  413.6   412.26  411.7   408.6   406.29  405.5   383.74  388.2   386.95  387.    386.97  387.86  378.69  383.58  459.06  437.    445.    445.99  464.27  463.1   464.96  463.3   456.76  463.89  462.3   458.31  459.37  461.31  470.28  475.    591.54  601.95  619.3   609.46  573.21  512.97  554.39  588.37  593.83  571.43  593.31  589.71  552.62  551.44  563.9   573.    568.68  562.72  556.82  565.49  581.    592.74  651.18  644.2   646.4   607.89  606.5   615.    612.8   614.27  582.76  610.64  704.97  753.49  741.36  736.2   996.   1694.7  1686.52 1859.07 1818.7  1892.84 1930.29 1959.36 1639.28 1565.   1565.   1565.   1565.   1565.   1565.   1565.   1565.   1565.   1565.   1711.55 1783.83 1821.46 1834.   1623.93 1979.92 2062.   2204.69 2527.76 2720.47 3532.96 3890.   2778.64 2600.   2331.29 2175.   2140.   1963.91 1753.24 1969.43 2045.5  2158.   2250.   2280.78 2316.37 3180.   3141.93 3276.   3243.   3271.   3329.56 3236.   3275.94 3184.99 3410.   3963.04 3305.   3260.94 3636.28 3419.99 3400.   3383.32 3558.82 3499.   3503.68 4528.   4579.46 4492.13 4231.98 4373.8  3794.77 4082.93 4055.41 3782.   3745.   3163.98 3227.16 3302.58 3105.25 3078.   2621.06 2548.   2619.76 3116.4 ]\n","[ 390.58  387.91  344.81  346.25  334.7   351.81  366.07  367.09  372.83  372.08  384.92  387.79  374.12  365.82  364.87  359.06  386.58  381.46  384.71  385.    383.9   384.18  381.18  369.86  373.5   374.17  341.4   344.5   345.29  342.93  343.49  340.7   320.3   345.3   349.59  355.    352.    354.    357.96  358.21  355.    352.47  355.18  346.41  347.14  348.54  346.62  348.28  347.38  348.19  351.74  352.98  339.87  339.64  339.99  339.46  349.97  368.    375.85  374.3   367.2   383.8   386.25  385.31  384.97  377.3   377.85  380.28  378.    365.92  366.9   367.9   368.6   369.61  368.48  369.09  372.72  379.    379.17  375.2   379.09  380.52  397.42  417.13  418.05  413.6   412.26  411.7   408.6   406.29  405.5   383.74  388.2   386.95  387.    386.97  387.86  378.69  383.58  459.06  437.    445.    445.99  464.27  463.1   464.96  463.3   456.76  463.89  462.3   458.31  459.37  461.31  470.28  475.    591.54  601.95  619.3   609.46  573.21  512.97  554.39  588.37  593.83  571.43  593.31  589.71  552.62  551.44  563.9   573.    568.68  562.72  556.82  565.49  581.    592.74  651.18  644.2   646.4   607.89  606.5   615.    612.8   614.27  582.76  610.64  704.97  753.49  741.36  736.2   996.   1694.7  1686.52 1859.07 1818.7  1892.84 1930.29 1959.36 1639.28 1565.   1565.   1565.   1565.   1565.   1565.   1565.   1565.   1565.   1565.   1711.55 1783.83 1821.46 1834.   1623.93 1979.92 2062.   2204.69 2527.76 2720.47 3532.96 3890.   2778.64 2600.   2331.29 2175.   2140.   1963.91 1753.24 1969.43 2045.5  2158.   2250.   2280.78 2316.37 3180.   3141.93 3276.   3243.   3271.   3329.56 3236.   3275.94 3184.99 3410.   3963.04 3305.   3260.94 3636.28 3419.99 3400.   3383.32 3558.82 3499.   3503.68 4528.   4579.46 4492.13 4231.98 4373.8  3794.77 4082.93 4055.41 3782.   3745.   3163.98 3227.16 3302.58 3105.25 3078.   2621.06 2548.   2619.76 3116.4 ]\n","234\n"]}]},{"cell_type":"code","source":["# fig, axs=plt.subplots(1,2,sharey=True,tight_layout=True)\n","# axs[0].hist(short_max_outg,bins=100)\n","# axs[1].hist(abs_ratio_5T[short_outg_open_idx],bins=100)\n","# plt.show()"],"metadata":{"id":"57mFruHtCmmh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def kde_plot(plot_data, kde_factor=0.15, num_samples=100):\n","  v, c = np.unique(plot_data, return_counts=True)  \n","\n","  # start_0 = time.time()\n","  kde = stats.gaussian_kde(v,weights=c,bw_method=kde_factor)\n","  kdx = np.linspace(v.min(),v.max(),num_samples)\n","  kdy = kde(kdx)\n","  ticks_per_sample = (kdx.max() - kdx.min()) / num_samples\n","  # print(\"ticks_per_sample :\", ticks_per_sample)  # sample 당 가격\n","  # print(\"kdy elapsed_time :\", time.time() - start_0)\n","\n","  peaks,_ = signal.find_peaks(kdy)\n","  pkx = kdx[peaks]\n","  pky = kdy[peaks]\n","\n","  # plt.figure(figsize=(10,5))\n","  plt.hist(v, weights=c, bins=num_samples, alpha=.8, edgecolor='black')\n","  plt.plot(kdx, kdy, color='white')\n","  plt.plot(pkx, pky, 'bo', color='yellow')\n","  # plt.show()\n"],"metadata":{"id":"40MdGjCY1YtH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["v, c = np.unique(long_tpg_plot, return_counts=True)"],"metadata":{"id":"v2k6D7UceIK4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["kde_factor = 0.15\n","num_samples = 100\n","\n","start_0 = time.time()\n","kde = stats.gaussian_kde(v,weights=c,bw_method=kde_factor)\n","kdx = np.linspace(v.min(),v.max(),num_samples)\n","kdy = kde(kdx)\n","ticks_per_sample = (kdx.max() - kdx.min()) / num_samples\n","print(\"ticks_per_sample :\", ticks_per_sample)  # sample 당 가격\n","print(\"kdy elapsed_time :\", time.time() - start_0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648269301273,"user_tz":-540,"elapsed":424,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"991eb570-3633-49b7-9a91-02cb5d4fba43","id":"bJe1fSGFdUcj"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["ticks_per_sample : 0.047098781436344224\n","kdy elapsed_time : 0.013733863830566406\n"]}]},{"cell_type":"code","source":["peaks,_ = signal.find_peaks(kdy)\n","pkx = kdx[peaks]\n","pky = kdy[peaks]\n","\n","plt.figure(figsize=(10,5))\n","plt.hist(v, weights=c, bins=num_samples, alpha=.8, edgecolor='black')\n","plt.plot(kdx, kdy, color='white')\n","plt.plot(pkx, pky, 'bo', color='yellow')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":320},"executionInfo":{"status":"ok","timestamp":1648269365137,"user_tz":-540,"elapsed":954,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"db5fd5b3-4617-42f9-877c-c4b9b82adcef","id":"1Cby5teZdUcj"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 720x360 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["def max_tpout_gap(open_side, ohlc_list, obj_, rtc_gap):  # much faster\n","    if type(obj_) == list:\n","        obj_ = list(zip(*obj_))\n","\n","    h, l = ohlc_list[1:3]\n","\n","    if open_side == \"SELL\":\n","      max_tpg = np.array([ep_ - np.min(l[int(iin):int(iout + 1)]) for ep_, _, iin, iout in obj_]) / rtc_gap # out 포함\n","      max_outg = np.array([np.max(h[int(iin):int(iout + 1)]) - ep_ for ep_, _, iin, iout in obj_]) / rtc_gap\n","    else:\n","      max_tpg = np.array([np.max(h[int(iin):int(iout + 1)]) - ep_ for ep_, _, iin, iout in obj_]) / rtc_gap\n","      max_outg = np.array([ep_ - np.min(l[int(iin):int(iout + 1)]) for ep_, _, iin, iout in obj_]) / rtc_gap\n","\n","    return max_tpg, max_outg"],"metadata":{"id":"CfiSD0uwcNIZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["short_open_res = np.ones(len(res_df))\n","\n","strat_version = config.strat_version\n","\n","short_rtc_1_col, short_rtc_0_col, short_rtc_gap_col = 'short_rtc_1_{}'.format(strat_version), 'short_rtc_0_{}'.format(strat_version), 'short_rtc_gap_{}'.format(strat_version) \n","long_rtc_1_col, long_rtc_0_col, long_rtc_gap_col = 'long_rtc_1_{}'.format(strat_version), 'long_rtc_0_{}'.format(strat_version), 'long_rtc_gap_{}'.format(strat_version) \n","\n","short_rtc_1_col, short_rtc_0_col, short_rtc_gap_col = 'short_rtc_1_{}'.format(strat_version), 'short_rtc_0_{}'.format(strat_version), 'short_rtc_gap_{}'.format(strat_version) \n","long_rtc_1_col, long_rtc_0_col, long_rtc_gap_col = 'long_rtc_1_{}'.format(strat_version), 'long_rtc_0_{}'.format(strat_version), 'long_rtc_gap_{}'.format(strat_version) \n","\n","data_cols = ['open', 'high', 'low']   # Todo - public_indi 이전에 해야할지도 모름 # 'close', 'haopen', 'hahigh', 'halow', 'haclose'\n","rtc_cols = [short_rtc_1_col, short_rtc_0_col, short_rtc_gap_col, long_rtc_1_col, long_rtc_0_col, long_rtc_gap_col]   # Todo - public_indi 이전에 해야할지도 모름\n","\n","short_rtc_1_, short_rtc_0_, short_rtc_gap_, long_rtc_1_, long_rtc_0_, long_rtc_gap_ = [res_df[col_].to_numpy() for col_ in rtc_cols]\n","open, high, low = [res_df[col_].to_numpy() for col_ in data_cols]\n","short_base = (short_rtc_1_ + short_rtc_0_) / 2\n","long_base = (long_rtc_1_ + long_rtc_0_) / 2\n","# back_ha_o = res_df['haopen'].shift(1).to_numpy()\n","# back_ha_c = res_df['haclose'].shift(1).to_numpy()\n","\n","touch_period = 50\n","# short_open_res *= (back_ha_c >= back_ha_o) & (ha_o > ha_c)\n","# short_open_res *= ha_o == ha_h\n","# short_open_res *= np_timeidx % tf_entry == tf_entry - 1     \n","# short_a_touch = pd.Series(np.where(high >= short_rtc_0_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()  # min -> max\n","short_a_touch = pd.Series(np.where((high >= short_base_b) & (short_base_b >= open), np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).min().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨\n","short_b_touch = pd.Series(np.where(low <= short_rtc_1_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨\n","\n","short_a_touch_line = get_line(short_a_touch, short_rtc_0_)\n","short_b_touch_line = get_line(short_b_touch, short_rtc_1_)\n","short_en_p = (short_a_touch_line + short_b_touch_line) / 2\n","short_base_b = get_line(short_b_touch, short_base)\n","short_rtc_gap_b = get_line(short_b_touch, short_rtc_gap_)\n","short_open_res *= (high >= short_base_b) & (short_base_b >= open) & (short_a_touch < short_b_touch) & (short_base_b + config.loc_set.point.base_gap * short_rtc_gap_b >= short_base)\n","\n","res_df['short_open_{}'.format(strat_version)] = short_open_res"],"metadata":{"id":"r82KfqFqi9tp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# short_en_p == short_base_b\n","print(short_en_p[~np.isnan(short_en_p)])\n","print(short_base_b[~np.isnan(short_en_p)])\n","\n","np.sum((short_en_p[~np.isnan(short_en_p)] == short_base_b[~np.isnan(short_en_p)]) == 0) # => why ..?"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CgD4-ZKW11MQ","executionInfo":{"status":"ok","timestamp":1647925782107,"user_tz":-540,"elapsed":366,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"c126aabb-cb41-4392-a80c-53971b146c2c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[ 377.545  378.085  379.015 ... 3148.91  3148.91  3148.91 ]\n","[ 377.545  378.085  379.015 ... 3148.91  3148.91  3148.91 ]\n"]},{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":29}]},{"cell_type":"code","source":["true_idx = short_open_res == 1\n","\n","# print(((short_a_touch_line + short_b_touch_line) / 2)[true_idx][-100:])\n","print(short_en_p[true_idx][-100:])\n","# print(short_a_touch_line[true_idx][-100:])\n","\n","print(short_a_touch_line)\n","print(short_a_touch)\n","print(short_rtc_0_)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AIt9z1NRj5bJ","executionInfo":{"status":"ok","timestamp":1647565975814,"user_tz":-540,"elapsed":310,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"c1b83639-7041-4745-dacd-d9cff49a205d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[2934.59  2934.59  3028.59  3028.59  3028.59  3026.075 3026.075 3016.09  3014.67  3014.4   3014.4   3014.4   3014.4   3014.4   3014.4   3014.395 3014.315 3014.315 3030.235 3030.235 3030.235 3030.235 3051.18  3051.18  3051.18  3077.275 3076.77  3090.945 3105.1   3105.1   3105.1   3105.1   3105.1   3105.1   3099.205 3099.205 3099.205 3105.495 3105.495 3109.615 3127.43  3123.795 3123.795 3123.795 3112.695 3122.715 3122.715 3122.715 3122.715 3115.2   3114.93  3097.035 3115.31  3115.31  3114.245 3114.15  3114.15  3114.15  3112.2   3110.75  3110.75  3112.16  3112.16  3134.39  3134.39  3134.39  3127.905 3127.905 3127.905 3127.905 3128.595 3128.595 3138.59  3138.59  3147.47  3134.205 3133.04  3134.155 3131.105 3131.105 3131.105 3065.94  3065.94  3065.94  3065.51  3068.    3079.33  3079.33  3079.33  3099.805 3169.595 3169.595 3169.595 3169.04  3140.395 3140.395 3140.395 3148.91  3148.91  3148.91 ]\n","[    nan     nan     nan ... 3158.68 3158.68 3158.68]\n","[    nan     nan     nan ... 763812. 763812. 763812.]\n","[ 388.18  388.18  388.18 ... 3158.68 3158.68 3158.68]\n"]}]},{"cell_type":"code","source":["short_a_touch_line = get_line(short_a_touch, short_rtc_0_)\n","short_b_touch_line = get_line(short_b_touch, short_rtc_1_)\n","short_en_p = (short_a_touch_line + short_b_touch_line) / 2\n","\n","# print(((short_a_touch_line + short_b_touch_line) / 2)[true_idx][-100:])\n","# print(short_en_p[true_idx][-100:])\n","\n","print(short_a_touch_line)\n","print(short_a_touch)\n","print(short_rtc_0_)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GXbSWec4ik3g","executionInfo":{"status":"ok","timestamp":1647565931392,"user_tz":-540,"elapsed":2,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"547b0fc1-0e35-4387-e891-a3af42c18476"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[    nan     nan     nan ... 3158.68 3158.68 3158.68]\n","[    nan     nan     nan ... 763812. 763812. 763812.]\n","[ 388.18  388.18  388.18 ... 3158.68 3158.68 3158.68]\n"]}]},{"cell_type":"code","source":["def get_line(touch, rtc_):\n","  touch_copy = touch.copy()\n","  touch_line = rtc_.copy()\n","\n","  nan_idx = np.isnan(touch_copy)\n","  touch_copy[nan_idx] = 0   # for indexing array\n","  touch_line[touch_copy.astype(int)]\n","  touch_line[nan_idx] = np.nan   # for true comp.\n","\n","  return touch_line"],"metadata":{"id":"fx4iA-T1k6GS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# print(short_b_touch[-100:])\n","# print(short_base_b[-100:])\n","true_idx = short_open_res == 1\n","short_a_touch_line = get_line(short_a_touch, short_rtc_0_)\n","short_b_touch_line = get_line(short_b_touch, short_rtc_1_)\n","\n","print(len(short_a_touch_line))\n","print(len(short_b_touch_line))\n","print(((short_a_touch_line + short_b_touch_line) / 2)[true_idx][-100:])\n","\n","print(short_a_touch_line[true_idx][-100:])\n","print(short_b_touch_line[true_idx][-100:])\n","print(short_open_res[true_idx][-100:])\n","print(short_en_p[true_idx][-100:])"],"metadata":{"id":"Pk8i59oM4CFZ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##### partial"],"metadata":{"id":"8b4SbvPrAPR1"}},{"cell_type":"code","source":["def get_pr_v2(open_side, h, l, obj, tpout, lvrg, fee, p_ranges, p_qty, inversion=False):  # --> 여기서 사용하는 ex_p = ex_p\n","\n","    en_p = obj[0]\n","    # ex_p = obj[1]\n","    tp, out = np.split(tpout, 2, axis=1)\n","    len_p = len(p_ranges)\n","    en_ps, tps, outs, lvrgs, fees = [np.tile(arr_, (1, len_p)) for arr_ in [en_p, tp, out, lvrg, fee]]\n","    \n","    np_obj = np.array(obj).T[0]\n","    assert len(np_obj.shape) == 2\n","    \n","    # iin == iout 인 경우 분리\n","    en_idx = np_obj[:, 2]\n","    ex_idx = np_obj[:, 3]\n","    equal_idx = en_idx == ex_idx\n","        \n","    if open_side == \"SELL\":\n","        p_tps = en_ps - (en_ps - tps) * p_ranges\n","        # min_low = np.array([np.min(l[int(iin):int(iout + 1)]) for _, _, iin, iout in list(zip(*obj[:4]))]).reshape(-1, 1)  # -> deprecated, start from iin + 1\n","        min_low = np.full_like(en_p, np.nan)\n","        min_low[~equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        tp_idx = np.tile(min_low, (1, len_p)) <= p_tps\n","    else:\n","        p_tps = en_ps + (tps - en_ps) * p_ranges\n","        # max_high = np.array([np.max(h[int(iin):int(iout + 1)]) for _, _, iin, iout in list(zip(*obj[:4]))]).reshape(-1, 1)\n","        max_high = np.full_like(en_p, np.nan)\n","        max_high[~equal_idx] = np.array([np.max(h[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        tp_idx = np.tile(max_high, (1, len_p)) >= p_tps\n","\n","    ex_ps = outs.copy()\n","    ex_ps[tp_idx] = p_tps[tp_idx]\n","\n","    if open_side == \"SELL\":\n","        if not inversion:\n","            pr = ((en_ps / ex_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","        else:\n","            pr = ((ex_ps / en_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","    else:\n","        if not inversion:\n","            pr = ((ex_ps / en_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","        else:\n","            pr = ((en_ps / ex_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","\n","    return pr.reshape(-1, 1)"],"metadata":{"id":"M4MB0mryCiHC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def get_pr(open_side, en_p, ex_p, lvrg, fee, inversion=False):\n","  assert len(ex_p) == len(en_p)\n","  if open_side == \"SELL\":\n","\n","    if not inversion:\n","      pr = (en_p / ex_p - fee - 1) * lvrg + 1\n","    else:\n","      pr = (ex_p / en_p - fee - 1) * lvrg + 1\n","  else:\n","    if not inversion:\n","      pr = (ex_p / en_p - fee - 1) * lvrg + 1\n","    else:\n","      pr = (en_p / ex_p - fee - 1) * lvrg + 1\n","\n","  return pr\n"],"metadata":{"id":"2QuLj5hrjD9y"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 0. obj 를 out 과 tp 로 구분해야할 것 - pr 이용\n","# 1. out 을 한 경우\n","#   a. max high (long) 조사 (= max_tpg)\n","#     i. tp 단계별로 \"비교\" 진행, 만족하면 + profit (수정)\n","#     ii. max_gap 과 \n","# 2. tp 를 한 경우\n","#   a. tp 단계별로 + profit (수정)\n","\n","# tp 를 했는데 out 처리 된 경우 (fee 덕분에)\n","tp_idx = (long_pr > 1).ravel()\n","print(long_obj[0][tp_idx])\n","print(long_obj[0][~tp_idx])"],"metadata":{"id":"4whYwQmQ9oY1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# ex_ps = [en_p + (ex_p - en_p) * p_range for p_range in p_ranges]"],"metadata":{"id":"42V_JP1oGe4c"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# ------ vectorization for partial ------ # \n","en_p = long_obj[0]\n","ex_p = long_obj[1]\n","# tp = long_tpout_arr[:, 0]\n","# out = long_tpout_arr[:, 1]\n","tp, out = np.split(long_tpout_arr, 2, axis=1)\n","# tp = tp.ravel()\n","\n","# print(en_p)\n","# print(tp)\n","# print(out.shape)\n","\n","len_p = len(p_ranges)\n","en_ps = np.tile(en_p, (1, len_p))\n","tps = np.tile(tp, (1, len_p))\n","outs = np.tile(out, (1, len_p))\n","lvrgs = np.tile(long_lvrg_arr, (1, len_p))\n","fees = np.tile(long_fee_arr, (1, len_p))\n","print(lvrgs.shape)\n","print(fees.shape)\n","\n","p_tps = en_ps + (tps - en_ps) * p_ranges\n","\n","max_high = np.array([np.max(h[int(iin):int(iout + 1)]) for _, _, iin, iout in list(zip(*long_obj[:4]))]).reshape(-1, 1) # / rtc_gap\n","res = np.tile(max_high, (1, len_p)) >= p_tps\n","\n","ex_ps = outs.copy()\n","ex_ps[res] = p_tps[res]   # max_high 기준으로 체결된 만큼만 p_tp 로 변환, \"나머지는 outs\"\n","\n","# print(tps[0]))\n","# np.sum(tps1 != tps2)  # 0\n","# print(outs[0])\n","# print(outs)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"joaIDVNLqFqz","executionInfo":{"status":"ok","timestamp":1648451438059,"user_tz":-540,"elapsed":353,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"27ae7b8e-5f4e-4641-a062-746f5307bf7d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(1724, 1)\n","(1724, 1)\n"]}]},{"cell_type":"code","source":["h, l = ohlc_list[1:3]    \n","\n","en_idx = long_obj[2]\n","ex_idx = long_obj[3]\n","\n","# print(en_idx[:5])\n","# print(ex_idx[:5])\n","# np.sum(en_idx == ex_idx)\n","equal_idx = en_idx == ex_idx\n","equal_idx"],"metadata":{"id":"QI6uXYjtVWrw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["p_ranges = [1/3, 2/3, 1]\n","p_qty = [0.25, 0.25, 0.5]\n","p_ranges = [1] # [1/3, 2/3, 1] [1]\n","p_qty =  [1] # [0.25, 0.25, 0.5] [1]\n","# long_ppr[tp_idx] = tp_ppr(OrderSide.BUY, *long_obj[:2], p_ranges, p_qty, long_lvrg_arr, long_fee_arr, inversion)[tp_idx]"],"metadata":{"id":"TO3dF_3yum4s"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# tp_pr = (tps / en_ps - fees - 1) * lvrgs * p_qty\n","# tp_pr.sum(axis=1) + 1\n","\n","# out_pr = (outs / en_ps - fees - 1) * lvrgs * p_qty\n","# # print(out_pr)\n","# print(out_pr.sum(axis=1) + 1)\n","\n","pr = (ex_ps / en_ps - fees - 1) * lvrgs * p_qty\n","print(pr.sum(axis=1) + 1)\n","print(np.sum(pr, axis=1).reshape(-1, 1) + 1)\n","\n","pr = (ex_p / en_p - long_fee_arr - 1) * long_lvrg_arr\n","print((pr + 1).ravel()) \n","\n","print(np.sum((pr + 1).ravel() != (pr.sum(axis=1) + 1)))  # 0\n","get_pr_v2(OrderSide.BUY, h, l, long_obj, long_tpout_arr, long_lvrg_arr, long_fee_arr, p_ranges, p_qty, inversion)\n","get_pr_v2(OrderSide.SELL, h, l, short_obj, short_tpout_arr, short_lvrg_arr, short_fee_arr, p_ranges, p_qty, inversion)"],"metadata":{"id":"8LeNbPlJrIN-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pr = get_pr(OrderSide.SELL, *short_obj[:2], short_lvrg_arr, short_fee_arr, inversion)"],"metadata":{"id":"GNm_lN1-kJPW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(prs[:10])\n","print(pr[:10])\n","# print(np.sum(prs, axis=0))\n","# print((prs.sum(axis=0)))"],"metadata":{"id":"8il3UnQ6oyjC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["loss_tp_idx = (~tp_idx) * (res3 > 2)\n","print(len(res3[loss_tp_idx])) # tp 했으나, fee 때문에 out_idx 로 지정된 case 로 예상 - 8\n","\n","print(en_p[loss_tp_idx])\n","print(ex_p[loss_tp_idx])\n","ex_p[loss_tp_idx] / en_p[loss_tp_idx] - long_fee_arr.ravel()[loss_tp_idx]"],"metadata":{"id":"WOEmwtPErNgz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# ------ 이래서, 함수로 먼저 작성하면 debugging 하기 곤란하구나 ------ #\n","en_p = long_obj[0].ravel()\n","ex_p = long_obj[1].ravel()\n","# tp = long_tpout_arr[:, 0]\n","# out = long_tpout_arr[:, 1]\n","tp, out = np.split(long_tpout_arr, 2, axis=1)\n","tp = tp.ravel()\n","\n","print(en_p)\n","print(tp)\n","# print(out.shape)\n","\n","tps = np.vstack(np.array([en_p + (tp - en_p) * p_range for p_range in p_ranges])).T  # tp_ppr 로 나눌게 아니라, ex_ps 를 tps, replaced_outs 로 채우면 되지 않을까\n","outs = np.tile(out, (1, len(p_ranges)))\n","print(tps[0])\n","print(outs[0])\n","print(outs)"],"metadata":{"id":"A_Jn5zMYCtH0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["outs2 = outs.copy()\n","outs2[res] = tps[res]"],"metadata":{"id":"g5uLwyYnoApS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["h, l = ohlc_list[1:3]    \n","# max_high = np.array([np.max(h[int(iin):int(iout + 1)]) - ep_ for ep_, _, iin, iout in list(zip(*long_obj[:4]))]) # / rtc_gap\n","max_high = np.array([np.max(h[int(iin):int(iout + 1)]) for _, _, iin, iout in list(zip(*long_obj[:4]))]).reshape(-1, 1) # / rtc_gap\n","res = np.tile(max_high, (1, 3)) > tps"],"metadata":{"id":"r7koyseNF6J8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# tps\n","en_ps = np.tile(en_p, (1, len(p_ranges)))\n","print(en_ps.shape)\n","\n","# tps * p_qty"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"swCpmd0Jpfz4","executionInfo":{"status":"ok","timestamp":1648439562545,"user_tz":-540,"elapsed":365,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"6919faf2-a6a6-4adf-ad3f-6a9fbb6c05e2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(1, 46536)\n"]}]},{"cell_type":"code","source":["# print(max_high.shape)\n","# print(np.tile(max_high, (1, 3)).shape)\n","# print(tps.shape)\n","# print(res)\n","\n","# print(np.insert(res, 0, np.full_like(max_high, True), axis=1))\n","res2 = np.insert(res, 0, np.array([True]), axis=1)\n","# print(res2)\n","\n","res3 = np.array([np.argwhere(arr_).max() for arr_ in res2])  # 조건에 맞는 최대 index"],"metadata":{"id":"FrldeXRFGUD5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# res3\n","# tps\n","\n","# # 예로, res3 index = 2, -> 0, 1 까지는 tp + 2 는 out => ex_ps 에 들어있는 ex_p 가\n","# # 즉, outs * p_ranges 만큼의 array 에 res3_index 만틈 tp 로 채움\n","# if not inversion:\n","#   pr = np.array([(ex_p_ / en_p - fee - 1) * lvrg * qty for ex_p_, qty in zip(ex_ps, p_qty)]).sum(axis=0) + 1"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kPOrz6grkHI-","executionInfo":{"status":"ok","timestamp":1648438048923,"user_tz":-540,"elapsed":354,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"74916754-5f95-45aa-8a9c-1eff7e4639ba"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1, 1, 3, ..., 1, 0, 1])"]},"metadata":{},"execution_count":153}]},{"cell_type":"code","source":["long_ppr = long_pr.copy()"],"metadata":{"id":"wHnELMNyAc7D"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(long_pr[tp_idx])\n","print(long_ppr[tp_idx])\n","# print(np.sum(long_ppr[tp_idx] != long_pr[tp_idx]))"],"metadata":{"id":"w1PONy6jCJLQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["rtc_ranges = [1] # [1/3, 2/3, 1] * "],"metadata":{"id":"4WSFaUgg_jRd"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_ratio=0.3\n","plot_is=1\n","\n","open_idx = open_info_df.index.to_numpy()\n","len_df = len(res_df)\n","s_idx = (open_idx < int(len_df * (1 - test_ratio))) == plot_is\n","s_open_info_df = open_info_df[s_idx]\n","s_open_idx = open_idx[s_idx]\n","\n","open_info_list = [s_open_info_df[col_].to_numpy() for col_ in s_open_info_df.columns]\n","side_arr, zone_arr, id_arr, id_idx_arr = open_info_list\n","\n","# ------------ get paired_res ------------ #\n","start_0 = time.time()\n","paired_res = en_ex_pairing(res_df, s_open_idx, open_info_list, ohlc_list, point2_list, market_data_list, config_list, np_timeidx, funcs)\n","# valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr = paired_res\n","print(\"en_ex_pairing elapsed time :\", time.time() - start_0)  #  0.37 --> 0.3660471439361572 --> 0.21(lesser if)\n","\n","# ------------ idep_plot ------------ #\n","start_0 = time.time()\n","h, l = ohlc_list[1:3]\n","sample_ratio=1 - test_ratio\n","if sample_ratio is not None:\n","  sample_len = int(len_df * sample_ratio)\n","else:\n","  sample_len = len_df\n","\n","# ------ short & long data preparation ------ #\n","# start_0 = time.time()\n","valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr, bias_arr = paired_res    \n","assert len(valid_openi_arr) != 0, \"assert len(valid_openi_arr) != 0\"    \n","short_valid_openi_idx = np.where(side_arr[valid_openi_arr] == OrderSide.SELL)[0]  # valid_openi_arr 에 대한 idx, # side_arr,\n","long_valid_openi_idx = np.where(side_arr[valid_openi_arr] == OrderSide.BUY)[0]\n","\n","valid_open_idx = open_idx[valid_openi_arr].reshape(-1, 1)\n","\n","short_obj = np.hstack((pair_price_arr, pair_idx_arr, valid_open_idx))[short_valid_openi_idx]\n","long_obj = np.hstack((pair_price_arr, pair_idx_arr, valid_open_idx))[long_valid_openi_idx]\n","both_obj = np.vstack((short_obj, long_obj))\n","print(\"short_obj.shape :\", short_obj.shape)\n","print(\"long_obj.shape :\", long_obj.shape)\n","\n","short_obj, long_obj, both_obj = [np.split(obj_, 5, axis=1) for obj_ in [short_obj, long_obj, both_obj]]\n","\n","short_lvrg_arr, long_lvrg_arr = [lvrg_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","short_fee_arr, long_fee_arr = [fee_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","short_tpout_arr, long_tpout_arr = [tpout_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","short_bias_arr, long_bias_arr = [bias_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]"],"metadata":{"id":"qjpDlxCoInLJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(short_pr.shape)\n","short_total_pr = to_total_pr(len_df, short_pr, short_obj[-2])"],"metadata":{"id":"-sDSxVR91Vit"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(24, 8))\n","gs = gridspec.GridSpec(nrows=2,  # row 몇 개\n","                        ncols=3,  # col 몇 개\n","                        height_ratios=[10, 1]\n","                        # height_ratios=[10, 10, 1]\n","                        )\n","gs_idx = 0\n","signi = 0\n","title_position=(0.5, 0.5)\n","fontsize=15\n","\n","short_true_bias_idx = short_bias_arr[:, 0] <= short_bias_arr[:, 1] # info, threshold (등호의 유무가 매우 유의미함)\n","long_true_bias_idx = long_bias_arr[:, 0] >= long_bias_arr[:, 1]\n","\n","# ------ plot_data ------ #\n","try:\n","  # start_0 = time.time()\n","  short_pr = get_pr_v2(OrderSide.SELL, short_obj, short_tpout_arr, short_lvrg_arr, short_fee_arr, p_ranges, p_qty, inversion)\n","  print(\"get_pr_v2 pass\")\n","  short_total_pr = to_total_pr(len_df, short_pr, short_obj[-2])\n","  print(\"to_total_pr pass\")\n","  short_cum_pr = np.cumprod(short_total_pr)\n","  short_liqd = liquidation(OrderSide.SELL, h, short_obj[:4], short_lvrg_arr, short_fee_arr)\n","  short_prcn, short_rc = precision(short_pr, short_true_bias_idx), recall(short_true_bias_idx)\n","  if signi:\n","    short_idep_res_obj = (short_prcn, short_rc) + get_res_info_nb_v2(sample_len, short_pr, short_total_pr, short_cum_pr, short_liqd)\n","  else:\n","    gs_idx = plot_info_v4(gs, gs_idx, sample_len, short_pr, short_total_pr, short_cum_pr, short_liqd, short_prcn, short_rc, short_lvrg_arr[-1], title_position, fontsize)\n","  # print(\"elapsed time :\", time.time() - start_0)\n","\n","except Exception as e:\n","  gs_idx += 1\n","  print(\"error in short plot_data :\", e)\n","\n","try:\n","  # start_0 = time.time()\n","  long_pr = get_pr_v2(OrderSide.BUY, long_obj, long_tpout_arr, long_lvrg_arr, long_fee_arr, p_ranges, p_qty, inversion)\n","  long_total_pr = to_total_pr(len_df, long_pr, long_obj[-2])\n","  long_cum_pr = np.cumprod(long_total_pr)\n","  long_liqd = liquidation(OrderSide.BUY, l, long_obj[:4], long_lvrg_arr, long_fee_arr)\n","  long_prcn, long_rc = precision(long_pr, long_true_bias_idx), recall(long_true_bias_idx)\n","  if signi:\n","    long_idep_res_obj = (long_prcn, long_rc) + get_res_info_nb_v2(sample_len, long_pr, long_total_pr, long_cum_pr, long_liqd)\n","  else:\n","    gs_idx = plot_info_v4(gs, gs_idx, sample_len, long_pr, long_total_pr, long_cum_pr, long_liqd, long_prcn, long_rc, long_lvrg_arr[-1], title_position, fontsize)\n","  # print(\"elapsed time :\", time.time() - start_0)\n","except Exception as e:\n","  gs_idx += 1\n","  print(\"error in long plot_data :\", e)\n","\n","try:\n","  # start_0 = time.time()\n","  both_pr = np.vstack((short_pr, long_pr))  # for 2d shape, obj 를 1d 로 만들지 않는 이상, pr 은 2d 유지될 것\n","  both_total_pr = to_total_pr(len_df, both_pr, both_obj[-2])\n","  both_cum_pr = np.cumprod(both_total_pr)\n","  both_liqd = min(short_liqd, long_liqd)\n","  both_true_bias_idx = np.hstack((short_true_bias_idx, long_true_bias_idx))  # for 1d shape\n","  both_prcn, both_rc = precision(both_pr, both_true_bias_idx), recall(both_true_bias_idx)\n","  if signi:\n","    both_idep_res_obj = (both_prcn, both_rc) + get_res_info_nb_v2(sample_len, both_pr, both_total_pr, both_cum_pr, both_liqd)\n","  else:\n","    gs_idx = plot_info_v4(gs, gs_idx, sample_len, both_pr, both_total_pr, both_cum_pr, both_liqd, both_prcn, both_rc, lvrg_arr[-1], title_position, fontsize)\n","  # print(\"elapsed time :\", time.time() - start_0)\n","except Exception as e:\n","  gs_idx += 1\n","  print(\"error in both plot_data :\", e)\n"],"metadata":{"id":"Av-_aSFrpmrN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["if not signi:\n","    for obj, cum_pr in zip([short_obj, long_obj, both_obj], [short_cum_pr, long_cum_pr, both_cum_pr]):\n","      try:\n","        # start_0 = time.time()\n","        gs_idx = frq_dev_plot_v3(gs, gs_idx, len_df, sample_len, obj[-2], cum_pr[-1], fontsize)\n","        # print(\"elapsed time :\", time.time() - start_0)          \n","      except Exception as e:\n","        gs_idx += 1\n","        print(\"error in frq_dev_plot_v3 :\", e)\n","\n","    plt.show()\n","    plt.close()"],"metadata":{"id":"1Fyhq7RppAEj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["t_list = [1, 2]\n","t_list[:5] # 이게 되는구나.."],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qxuL0S9wq-ib","executionInfo":{"status":"ok","timestamp":1648121100587,"user_tz":-540,"elapsed":473,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"c1f7ff04-acc0-4d66-90be-8a6870ee8f9a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[1, 2]"]},"metadata":{},"execution_count":155}]},{"cell_type":"code","source":["def liquidation(open_side, data_, obj_, lvrg, fee):  # # 2.39 s ->  2.42 s per loop, (ep fee lvrg vectorize calc. 진행시)\n","    if type(obj_) == list:\n","        obj_ = list(zip(*obj_))\n","\n","    if open_side == \"SELL\":\n","        return np.min([(ep_ / np.max(data_[int(iin):int(iout + 1)]) - fee - 1) * lvrg + 1 for ep_, _, iin, iout in obj_]) # + 1 for zero-size array to reduction operation\n","    else:\n","        return np.min([(np.min(data_[int(iin):int(iout + 1)]) / ep_ - fee - 1) * lvrg + 1 for ep_, _, iin, iout in obj_])\n","    # if open_side == \"SELL\":\n","    #     return np.min([(ep_ / np.max(data_[int(iin):int(iout)]) - fee - 1) * lvrg + 1 for ep_, _, iin, iout in obj_])\n","    # else:\n","    #     return np.min([(np.min(data_[int(iin):int(iout)]) / ep_ - fee - 1) * lvrg + 1 for ep_, _, iin, iout in obj_])"],"metadata":{"id":"P5NzUYQct8LJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# short_bias_arr.shape\n","short_true_bias_idx = short_bias_arr[:, 0] < short_bias_arr[:, 1] # info, threshold\n","long_true_bias_idx = long_bias_arr[:, 0] > long_bias_arr[:, 1]"],"metadata":{"id":"r_4qlQjNI_Vl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# long_true_bias_idx\n","# np.hstack((short_true_bias_idx, long_true_bias_idx))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nOtoKX7fJUs6","executionInfo":{"status":"ok","timestamp":1646789605507,"user_tz":-540,"elapsed":340,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"b56e0cd9-46fd-4c3e-d85c-570aa18d3b52"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([False, False,  True,  True, False, False,  True,  True, False, False, False,  True, False,  True, False,  True, False,  True,  True,  True, False, False,  True,  True,  True, False, False,  True,  True, False,  True, False, False, False,  True, False, False,  True,  True, False, False,  True, False,  True,  True,  True,  True, False,  True,  True, False,  True,  True,  True, False, False,  True, False, False,  True,  True,  True,  True, False, False,  True, False,  True, False, False,  True, False, False, False,  True,  True,  True, False,  True, False, False,  True,  True, False, False, False,  True,  True, False,  True,  True,  True, False, False, False, False,  True, False, False,  True, False, False,  True,  True, False, False,  True,  True,  True,  True, False,  True, False,  True,  True, False, False,  True, False, False,  True,  True, False, False, False, False,  True,  True,  True, False, False, False,  True,  True, False, False,  True, False, False,  True,  True, False,  True, False, False, False,  True,  True, False,  True, False, False, False,  True,  True, False, False, False, False, False, False,  True, False,  True,  True,  True,  True,  True,  True, False,  True,  True,  True,  True,  True,  True,  True,  True, False,  True,  True, False, False, False, False,  True,  True,  True, False,  True,  True, False, False,  True,  True, False,  True, False, False,  True])"]},"metadata":{},"execution_count":127}]},{"cell_type":"code","source":["# print(len(long_pr))\n","# print(len(long_true_bias_idx))\n","print((long_pr.shape))\n","print((long_bias_arr.shape))\n","# print((long_true_bias_idx.shape))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"70wh4eysKqxw","executionInfo":{"status":"ok","timestamp":1647001266151,"user_tz":-540,"elapsed":436,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"d3e8b24f-e74e-415f-c7a9-20d8617d25c9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(9634, 1)\n","(9634, 2)\n"]}]},{"cell_type":"code","source":["print(len(long_pr[long_pr != 1]))\n","len(long_pr[long_pr > 1]) / len(long_pr[long_pr != 1])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OcR_qrEp7Rnu","executionInfo":{"status":"ok","timestamp":1647001306279,"user_tz":-540,"elapsed":348,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"3e8aa179-237a-48e8-a0d0-af56fa26bc5b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["9634\n"]},{"output_type":"execute_result","data":{"text/plain":["0.37315756695038405"]},"metadata":{},"execution_count":40}]},{"cell_type":"code","source":["print(np.sum(long_pr[long_true_bias_idx] > 1) / np.sum(long_true_bias_idx))\n","print(np.sum(long_true_bias_idx) / len(long_true_bias_idx))\n","# long_true_bias_pr = long_pr[long_true_bias_idx]\n","# len(long_true_bias_pr[long_true_bias_pr > 1])\n","# 30 / 66"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MkJS3UGONHJ8","executionInfo":{"status":"ok","timestamp":1646810691555,"user_tz":-540,"elapsed":3,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"aa99b628-93b5-4705-c27b-fe6f80f95df0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.39106145251396646\n","0.599163179916318\n"]}]},{"cell_type":"code","source":["print(get_recall(long_true_bias_idx))\n","print(get_precision(long_pr, long_true_bias_idx))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lvULyeNJKSeP","executionInfo":{"status":"ok","timestamp":1646788110286,"user_tz":-540,"elapsed":5,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"3b10bb5f-238e-4687-f38c-20037f2cded6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.5076923076923077\n","0.45454545454545453\n"]}]},{"cell_type":"code","source":["signi=False\n","if not signi:\n","    plt.style.use(['dark_background', 'fast'])\n","    fig = plt.figure(figsize=(24, 8))\n","    gs = gridspec.GridSpec(nrows=2,  # row 몇 개\n","                            ncols=3,  # col 몇 개\n","                            height_ratios=[10, 1]\n","                            # height_ratios=[10, 10, 1]\n","                            )\n","gs_idx = 0\n","title_position=(0.5, 0.5)\n","fontsize=15"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":33},"id":"Fs1RkHxQKjCX","executionInfo":{"status":"ok","timestamp":1646788777938,"user_tz":-540,"elapsed":349,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"491bcb64-df8e-4b20-a42f-b68e4c670a07"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1728x576 with 0 Axes>"]},"metadata":{}}]},{"cell_type":"code","source":["try:\n","  # start_0 = time.time()\n","  long_pr = get_pr(OrderSide.BUY, *long_obj[:2], long_lvrg_arr, long_fee_arr, inversion)\n","  long_total_pr = to_total_pr(len_df, long_pr, long_obj[-2])\n","  long_cum_pr = np.cumprod(long_total_pr)\n","  long_liqd = liquidation(OrderSide.BUY, l, long_obj[:4], long_lvrg_arr, long_fee_arr)\n","  long_prcn, long_rc = precision(long_pr, long_true_bias_idx), recall(long_true_bias_idx)\n","\n","  if signi:\n","    long_idep_res_obj = (long_prcn, long_rc) + get_res_info_nb_v2(sample_len, long_pr, long_total_pr, long_cum_pr, long_liqd)\n","  else:\n","    gs_idx = plot_info_v4(gs, gs_idx, sample_len, long_pr, long_total_pr, long_cum_pr, long_liqd, long_prcn, long_rc, long_lvrg_arr[-1], title_position, fontsize)\n","  # print(\"elapsed time :\", time.time() - start_0)\n","except Exception as e:\n","  gs_idx += 1\n","  print(e)\n","\n","# plt.show()"],"metadata":{"id":"X69t-H3tKJdm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def precision(pr_list, true_idx):\n","  true_bias_pr = pr_list[true_idx].ravel()\n","  return np.sum(true_bias_pr > 1) / len(true_bias_pr)  # 차원을 고려한 계산\n","\n","def recall(true_idx):\n","  return np.sum(true_idx) / len(true_idx) #  2.16 µs per loop (len) --> 3.78 µs per loop   # false_idx 중에서 tp 체결된 건을 더해주어야함\n","\n","def plot_info_v4(gs, gs_idx, sample_len, pr, total_pr, cum_pr, liqd, prcn, rc, leverage, title_position, fontsize):\n","  try:\n","    plt.subplot(gs[gs_idx])\n","    idep_res_obj = get_res_info_nb_v2(sample_len, pr, total_pr, cum_pr, liqd)\n","    plt.plot(cum_pr)\n","    plt.plot(idep_res_obj[-1], color='gold')\n","    if sample_len is not None:\n","      plt.axvline(sample_len, alpha=1., linestyle='--', color='#ffeb3b')\n","    # title_str = \"prcn : {:.3f} rc : {:.3f}\\n len_pr : {} dpf : {:.3f}\\n wr : {:.3f} sr : {:.3f}\\n acc_pr : {:.3f} sum_pr : {:.3f}\\n\" +\\\n","    #           \"min_pr : {:.3f} liqd : {:.3f}\\n acc_mdd : -{:.3f} sum_mdd : -{:.3f}\\n leverage {}\"\n","    title_str = \"prcn : {:.3f}\\n rc : {:.3f}\\n len_pr : {}\\n dpf : {:.3f}\\n wr : {:.3f}\\n sr : {:.3f}\\n acc_pr : {:.3f}\\n sum_pr : {:.3f}\\n\" +\\\n","              \"min_pr : {:.3f}\\n liqd : {:.3f}\\n acc_mdd : -{:.3f}\\n sum_mdd : -{:.3f}\\n leverage {}\"\n","    plt.title(title_str.format(prcn, rc, *idep_res_obj[:-1], leverage), position=title_position, fontsize=fontsize)\n","  except Exception as e:\n","    print(\"error in plot_info :\", e)\n","\n","  return gs_idx + 1"],"metadata":{"id":"J2nupeDOPdQI"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JNQxkb06ZdTe"},"source":["## plot_check_v2"]},{"cell_type":"code","source":["# ------------------ plot_config ------------------ #\n","save_mode = 0\n","front_plot = 0    # 0, 1, 2 (whole, open, ep_tick)\n","bias_plot = 0     # precision check : 1, recall check : 0\n","pr_descend = 1    # 1 -> 내림차순\n","position = 1      # -1 / 1, 0 (short / long)\n","# tf_plot = 1       # true - false plot\n","# pr_sort = 1     # -> default 1,  이상한 체결 확인하기 좋음\n","# wl_case = 1     # 1 / -1 / 0 (win loss study) --> oid\n","\n","x_max = 500\n","x_margin_mult = 1/30\n","y_margin_mult = 1/30  # 0 \n","\n","prev_plotsize = 100 #  100 20\n","# post_plotsize = 60\n","post_plotsize = config.tr_set.bias_info_tick\n","\n","inversion = 0\n","hedge = 0\n","\n","# ------ show or save ------ #\n","if save_mode:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".ftr\", \"\")\n","  shutil.rmtree(plot_check_dir, ignore_errors=True)  # remove existing dir\n","  os.makedirs(plot_check_dir)\n","  print(plot_check_dir)\n","else:\n","  plot_check_dir = None\n","\n","# ------------ 한 방향에 대해 plot_check 함 (by position var.) ------------ #\n","#   obj by position  \n","if position == -1:\n","  pos_str = \"SELL\"\n","  pr_, obj_ = short_pr, short_obj\n","  arr_list = [short_lvrg_arr, short_fee_arr, short_tpout_arr, short_bias_arr]\n","else:   # both option currently not supported\n","  pos_str = \"BUY\"\n","  pr_, obj_ = long_pr, long_obj\n","  arr_list = [long_lvrg_arr, long_fee_arr, long_tpout_arr, long_bias_arr]\n","pr, obj, [lvrg_arr, fee_arr, tpout_arr, bias_arr] = sort_bypr_v3(pr_, obj_, arr_list, descending=pr_descend)\n","\n","pr_msg = \"%s\\n {} ~ {} -> {:.5f}\\n lvrg : {}\\n fee : {:.4f}\" % (pos_str)  # pos_str 으로 이곳에서 정의함\n","\n","# ------------------ data chunknize ------------------ #\n","np_df = res_df.to_numpy()\n","\n","left_end_idx = obj[2] - prev_plotsize  # left_margin 기준 - entry_idx\n","right_end_idx = obj[3] + post_plotsize\n","invalid_left_end = np.sum(left_end_idx < 0)\n","\n","np_plot_params = np.hstack((left_end_idx, right_end_idx, pr, *obj, lvrg_arr, fee_arr, tpout_arr, bias_arr))[invalid_left_end:]\n","if bias_plot:\n","  bias_arr_ = bias_arr[invalid_left_end:]\n","  if position == -1:\n","    bias_idx = bias_arr_[:, 0] < bias_arr_[:, 1]\n","  else:\n","    bias_idx = bias_arr_[:, 0] > bias_arr_[:, 1]\n","  np_plot_params = np_plot_params[bias_idx]"],"metadata":{"id":"A6QSF9COaHO5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# ------------ make col_idx_dict config ------------ #\n","nonstep_col_list = []\n","step_col_list = []\n","stepmark_col_list = []\n","# ------ set period ------ #\n","hc_itv1 = '5T'\n","hc_itv2 = 'H'\n","\n","rs_itv = 'T'\n","\n","dc_itv = 'T'\n","hdc_itv = '5T'\n","hhdc_itv = 'H'\n","\n","sd_dc_itv = 'T'\n","sd_dc_period1, sd_dc_period2 = 20, 40\n","\n","cbline_itv = '3T'\n","\n","bb_itv = dc_itv\n","hbb_itv = hdc_itv\n","hhbb_itv = hhdc_itv\n","\n","\n","# ------ nonstep_col_list - add info(col, alpha, color, linewidth) ------ #\n","# nonstep_col_list.append([['close'], 1, '#ffffff', 2])\n","\n","# ------ step_col_list - add info(col, alpha, color, linewidth) ------ #\n","step_col_list.append([['open_{}'.format(hc_itv1), 'close_{}'.format(hc_itv1)], 1, '#ffffff', 2])\n","# step_col_list.append([['open_{}'.format(hc_itv2), 'close_{}'.format(hc_itv2)], 1, '#ffffff', 4])\n","\n","# step_col_list.append([['resi_{}'.format(rs_itv), 'sup_{}'.format(rs_itv)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['resi_out_{}'.format(rs_itv), 'sup_out_{}'.format(rs_itv)], 1, 'dodgerblue', 2])\n","\n","step_col_list.append([['dc_upper_{}'.format(dc_itv), 'dc_lower_{}'.format(dc_itv)], 1, '#ffeb3b', 2])\n","# step_col_list.append([['dc_upper_{}'.format(hdc_itv), 'dc_lower_{}'.format(hdc_itv)], 1, '#e65100', 2])\n","# step_col_list.append([['dc_upper_{}'.format(hhdc_itv), 'dc_lower_{}'.format(hhdc_itv)], 1, '#c2185b', 4])\n","\n","# step_col_list.append([['dc_upper_{}{}'.format(sd_dc_itv, sd_dc_period1), 'dc_lower_{}{}'.format(sd_dc_itv, sd_dc_period1)], 1, '#ffeb3b', 2])\n","# step_col_list.append([['dc_upper_{}{}'.format(sd_dc_itv, sd_dc_period2), 'dc_lower_{}{}'.format(sd_dc_itv, sd_dc_period2)], 1, '#e65100', 2])\n","# step_col_list.append([['short_base_{}'.format(sd_dc_itv)], 1, '#e70f20', 2])\n","# step_col_list.append([['long_base_{}'.format(sd_dc_itv)], 1, '#279e2c', 2])\n","\n","step_col_list.append([['dc_base_{}'.format(cbline_itv)], 1, '#5b9cf6', 2])\n","\n","# step_col_list.append([['bb_upper_{}'.format(bb_itv), 'bb_lower_{}'.format(bb_itv)], 1, '#ffffff', 1])\n","# step_col_list.append([['bb_upper_{}'.format(hbb_itv), 'bb_lower_{}'.format(hbb_itv)], 1, '#ff00ff', 2])\n","# step_col_list.append([['bb_upper_{}'.format(hhbb_itv), 'bb_lower_{}'.format(hhbb_itv)], 1, '#3179f5', 4])\n","\n","# step_col_list.append([['ema_5T'], 1, '#03ed30', 2])\n","\n","# ------ stepmark_col_list - add info(col, alpha, color, linewidth) ------ #\n","# stepmark_col_list.append([['sar_T'], 1, 'dodgerblue', 7])\n","\n","\n","# ------ str to numbcol ------ #\n","nonstep_col_arr = strcol_tonumb(res_df, nonstep_col_list)\n","step_col_arr = strcol_tonumb(res_df, step_col_list)\n","stepmark_col_arr = strcol_tonumb(res_df, stepmark_col_list)\n","\n","col_idx_dict = \\\n","{\n","  \"ohlc_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close']),\n","  \"vp_col_idxs\": get_col_idxs(res_df, ['close', 'volume']),\n","  # \"ohlc_col_idxs\": get_col_idxs(res_df, ['haopen', 'hahigh', 'halow', 'haclose']),  # heikin-ashi ver.\n","  \"nonstep_col_info\": nonstep_col_arr,\n","  \"step_col_info\": step_col_arr,\n","  \"stepmark_col_info\": stepmark_col_arr,\n","  \"ylim_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close'])  # , 'dc_upper_H', 'dc_lower_H', 'dc_upper_15T', 'dc_lower_15T'\n","}"],"metadata":{"id":"FnSydxFXn_f9","executionInfo":{"status":"ok","timestamp":1648528229478,"user_tz":-540,"elapsed":5,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"1c8bc0f0-500e-4c13-99ba-451b265aa2f4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/content/drive/My Drive/Colab Notebooks/JnQ/funcs/funcs_plot_check.py:10: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  step_col_arr = np.array(col_list)\n"]}]},{"cell_type":"markdown","source":["### plot"],"metadata":{"id":"E-VwJkNQbGI4"}},{"cell_type":"code","source":["_ = [plot_check_v3(np_df, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir, **col_idx_dict) for param_zip in zip(np_plot_params, np_plot_params[::-1])]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"Roy40BmByyZc","outputId":"4512634d-d92c-43fb-f8d8-3c687fceafbe","executionInfo":{"status":"error","timestamp":1648525823810,"user_tz":-540,"elapsed":395217,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### plot_funcs"],"metadata":{"id":"MQ8w8nWVXlGj"}},{"cell_type":"code","source":["def plot_check_v3(data, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir=None, **col_idx_dict):\n","  # start_0 = time.time()\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(30, 18))\n","  nrows, ncols = 2, 2\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                         ncols=ncols,\n","                         height_ratios=[3, 1]\n","                         )\n","  for gs_idx, params in enumerate(param_zip):\n","    ax = fig.add_subplot(gs[gs_idx])\n","    iin, iout, pr, ep, tp, entry_idx, exit_idx, open_idx, lvrg, fee, tp_line, out_line, bias_info, bias_thresh = params\n","\n","    # if ep > out_line:  # for tp > ep > out plot_check\n","    #   break\n","\n","    # ------------ add_col section ------------ #\n","    a_data = data[int(iin):int(iout + 1)]\n","    # a_data = data[iin:iout]\n","    # ------ candles ------ #\n","    candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","\n","    # ------ add cols ------ #\n","    [nonstep_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['nonstep_col_info']]\n","    [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","    [stepmark_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['stepmark_col_info']]\n","\n","    # ------ ep, tp + xlim ------ #\n","    try:\n","      eptp_hvline_v3(config, ep, tp, entry_idx, exit_idx, open_idx, tp_line, out_line, bias_info, bias_thresh,\n","                    front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, **col_idx_dict)\n","    except Exception as e:\n","      print(\"error in eptp_hvline_v3 :\", e)\n","\n","    #     Todo    #\n","    #     3. outer_price plot 일 경우, gs_idx + nrows 하면 됨\n","\n","    # ------ trade_info ------ #\n","    plt.title(pr_msg.format(entry_idx, exit_idx, pr, lvrg, fee))\n","\n","  if plot_check_dir is None:\n","    plt.show()\n","    print()\n","  else:\n","    fig_name = plot_check_dir + \"/%s.png\" % int(entry_idx)\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","  plt.close()\n","  # print(\"elapsed time :\", time.time() - start_0)\n","\n","  return\n","\n","def eptp_hvline_v3(config, en_p, ex_p, entry_idx, exit_idx, open_idx, tp_line, out_line, bias_info, bias_thresh,\n","                   front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, **col_idx_dict):\n","  # ------ get vertical ticks ------ #\n","  entry_tick = int(entry_idx - iin)\n","  open_tick = entry_tick - int(entry_idx - open_idx)\n","  exit_tick = entry_tick + int(exit_idx - entry_idx)\n","\n","  if front_plot == 1:\n","    x_max = open_tick\n","  elif front_plot == 2:\n","    x_max = entry_tick\n","  if (iout - iin) > x_max:\n","    x_margin = x_max * x_margin_mult\n","    plt.xlim(0 - x_margin, x_max + x_margin)\n","  x0, x1 = plt.gca().get_xlim()\n","  # ------------ hlines ------------ #\n","  # ------ entry & exit ------ #\n","  en_xmin = entry_tick / x1\n","  ex_xmin = exit_tick / x1\n","  plt.axhline(en_p, x0, en_xmin, linewidth=2, linestyle='--', alpha=1, color='lime')  # en_p line axhline\n","  plt.text(x0, en_p, 'en_p :\\n {}'.format(en_p), ha='right', va='center', fontweight='bold')  # en_p line label\n","  plt.axhline(ex_p, ex_xmin, 1, linewidth=2, linestyle='--', alpha=1, color='lime')  # ex_p line axhline (signal 도 포괄함, 존재 의미)\n","  plt.text(x1, ex_p, 'ex_p :\\n {}'.format(ex_p), ha='left', va='center', fontweight='bold')  # ex_p line label\n","\n","  # ------ tpout_line ------ #\n","  plt.axhline(tp_line, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#00ff00')  # ep 와 gap 비교 용이하기 위해 ex_xmin -> 0.1 사용\n","  plt.text(x0, tp_line, 'tpg %s' % config.tr_set.tp_gap, ha='right', va='center', fontweight='bold', fontsize=15)\n","  plt.axhline(out_line, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#ff0000')\n","  plt.text(x0, out_line, 'outg %s' % config.tr_set.out_gap, ha='right', va='center', fontweight='bold', fontsize=15)\n","\n","  # ------ bias_line ------ #\n","  plt.axhline(bias_info, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='dodgerblue')\n","  plt.text(x0, bias_info, ' bias_info', ha='left', va='center', fontweight='bold')\n","  plt.axhline(bias_thresh, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#ff8400')\n","  plt.text(x0, bias_thresh, ' bias_thresh', ha='left', va='center', fontweight='bold')\n","\n","  # ------ ylim ------ #\n","  if front_plot:\n","    y_lim_data = a_data[:x_max + 1, col_idx_dict['ylim_col_idxs']]  # +1 for including open_tick\n","  else:\n","    y_lim_data = a_data[:, col_idx_dict['ylim_col_idxs']]\n","  \n","  y_min = y_lim_data.min()\n","  y_max = y_lim_data.max()\n","  y_margin = (y_max - y_min) * y_margin_mult\n","  plt.ylim(y_min - y_margin, y_max + y_margin)\n","\n","  # ------------ vline (open_tick, entry_tick, exit_tick) ------------ #\n","  y0, y1 = plt.gca().get_ylim()\n","  l_data = a_data[:exit_tick + 1, col_idx_dict['ohlc_col_idxs'][2]]  # +1 for including exit_tick\n","  open_ymax, en_ymax, ex_ymax = [(l_data[tick_] - y0) / (y1 - y0) - .01 for tick_ in [open_tick, entry_tick, exit_tick]]  # -.05 for margin\n","  plt.axvline(open_tick, 0, open_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')  # 추후, tick 별 세부 정의가 달라질 수 있음을 고려해 multi_line 작성 유지\n","  plt.axvline(entry_tick, 0, en_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  plt.axvline(exit_tick, 0, ex_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","\n","  return"],"metadata":{"id":"cFt6CeZf4yEk"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### legacy"],"metadata":{"id":"q3zisNOTw3jM"}},{"cell_type":"code","source":["_ = [plot_check_v4(np_df, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir, 500, 0.07, 100, **col_idx_dict) for param_zip in zip(np_plot_params, np_plot_params[::-1])]"],"metadata":{"id":"fUFdJVrsw78h"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def plot_check_v4(data, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir=None, vp_range=500, kde_factor=0.05, num_samples=100, **col_idx_dict):\n","  # start_0 = time.time()\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(30, 18))\n","  nrows, ncols = 2, 2\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                         ncols=ncols,\n","                         height_ratios=[3, 1]\n","                         )\n","  for gs_idx, params in enumerate(param_zip):\n","    ax = fig.add_subplot(gs[gs_idx])\n","    iin, iout, pr, ep, tp, entry_idx, exit_idx, open_idx, lvrg, fee, tp_line, out_line, bias_info, bias_thresh = params\n","\n","    # ------------ add_col section ------------ #\n","    iin, iout = int(iin), int(iout)\n","    a_data = data[iin:iout]\n","    # ------ candles ------ #\n","    candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","    \n","    # ------ add cols ------ #\n","    [nonstep_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['nonstep_col_info']]\n","    [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","    [stepmark_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['stepmark_col_info']]\n","\n","    # vp_data = data[iin - vp_range:iin, col_idx_dict['vp_col_idxs']]\n","    # vp_info = [vp_range, vp_data[:, 0], vp_data[:, 1], kde_factor, num_samples]\n","    vp_data = data[iin - vp_range:iin, col_idx_dict['vp_col_idxs']].T\n","    vp_info = [vp_range, *vp_data, kde_factor, num_samples]\n","\n","    # ------ ep, tp + xlim ------ #\n","    eptp_hvline_v4(config, ep, tp, entry_idx, exit_idx, open_idx, tp_line, out_line, bias_info, bias_thresh, \n","                   front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, vp_info, **col_idx_dict)        \n","\n","    #     Todo    #\n","    #     3. outer_price plot 일 경우, gs_idx + nrows 하면 됨\n","\n","    # ------ trade_info ------ #\n","    plt.title(pr_msg.format(entry_idx, exit_idx, pr, lvrg, fee))\n","\n","  if plot_check_dir is None:\n","    plt.show()\n","    print()\n","  else:\n","    fig_name = plot_check_dir +  \"/%s.png\" % int(entry_idx)\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","  plt.close()\n","  # print(\"elapsed time :\", time.time() - start_0)  \n","\n","  return\n","\n","def eptp_hvline_v4(config, en_p, ex_p, entry_idx, exit_idx, open_idx, tp_line, out_line, bias_info, bias_thresh, \n","                   front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, vp_info, **col_idx_dict):\n","  # ------ get vertical ticks ------ #\n","  entry_tick = int(entry_idx - iin)\n","  open_tick = entry_tick - int(entry_idx - open_idx)\n","  exit_tick = entry_tick + int(exit_idx - entry_idx)\n","\n","  if front_plot == 1:\n","    x_max = open_tick\n","  elif front_plot == 2:\n","    x_max = entry_tick\n","  if (iout - iin) > x_max:\n","    x_margin = x_max * x_margin_mult\n","    plt.xlim(0 - x_margin, x_max + x_margin)\n","  x0, x1 = plt.gca().get_xlim()\n","  # ------------ hlines ------------ #\n","  # ------ entry & exit ------ #\n","  en_xmin = entry_tick / x1\n","  ex_xmin = exit_tick / x1\n","  plt.axhline(en_p, x0, en_xmin, linewidth=2, linestyle='--', alpha=1, color='lime')  # en_p line axhline\n","  plt.text(x0, en_p, ' en_p :\\n {}'.format(en_p), ha='right', va='center', fontweight='bold')  # en_p line label\n","  plt.axhline(ex_p, ex_xmin, 1, linewidth=2, linestyle='--', alpha=1, color='lime')  # ex_p line axhline (signal 도 포괄함, 존재 의미)\n","  plt.text(x1, ex_p, ' ex_p :\\n {}'.format(ex_p), ha='left', va='center', fontweight='bold')  # ex_p line label\n","\n","  # ------ tpout_line ------ #\n","  plt.axhline(tp_line, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#00ff00')  # ep 와 gap 비교 용이하기 위해 ex_xmin -> 0.1 사용\n","  plt.text(x0, tp_line, ' %s' % config.tr_set.tp_gap, ha='left', va='center', fontweight='bold')\n","  plt.axhline(out_line, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#ff0000')\n","  plt.text(x0, out_line, ' %s' % config.tr_set.out_gap, ha='left', va='center', fontweight='bold')\n","\n","  # ------ bias_line ------ #\n","  plt.axhline(bias_info, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='dodgerblue')\n","  plt.text(x0, bias_info, ' bias_info', ha='left', va='center', fontweight='bold')\n","  plt.axhline(bias_thresh, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#ff8400')\n","  plt.text(x0, bias_thresh, ' bias_thresh', ha='left', va='center', fontweight='bold')\n","\n","  # ------ volume profile ------ #\n","  vp_range, close, volume, kde_factor, num_samples = vp_info\n","  if iin >= vp_range:\n","    start_0 = time.time()\n","    kde = stats.gaussian_kde(close, weights=volume, bw_method=kde_factor)\n","    kdx = np.linspace(close.min(), close.max(), num_samples)\n","    kdy = kde(kdx)\n","    print(\"kde elapsed_time :\", time.time() - start_0)\n","\n","    kdy_max = kdy.max()\n","    # peaks,_ = signal.find_peaks(kdy)\n","    peaks,_ = signal.find_peaks(kdy, prominence=kdy_max * 0.3)\n","    peak_list = kdx[peaks]   # peak_list\n","    [plt.axhline(peak, linewidth=6, linestyle='-', alpha=1, color='white') for peak in peak_list]\n","    \n","    kdy_ratio = entry_tick / kdy_max # 30 / 0.0001\n","    plt.plot(kdy * kdy_ratio, kdx, color='white')\n","    # plt.plot(pky, pkx, 'bo', color='yellow')\n","\n","  # ------ ylim ------ #\n","  if front_plot:\n","    y_lim_data = a_data[:x_max + 1, col_idx_dict['ylim_col_idxs']]  # +1 for including open_tick\n","  else:\n","    y_lim_data = a_data[:, col_idx_dict['ylim_col_idxs']]\n","  y_min = y_lim_data.min()\n","  y_max = y_lim_data.max()\n","  y_margin = (y_max - y_min) * y_margin_mult\n","  # plt.ylim(y_min - y_margin, y_max + y_margin)\n","\n","  # ------------ vline (open_tick, entry_tick, exit_tick) ------------ #\n","  y0, y1 = plt.gca().get_ylim()\n","  l_data = a_data[:exit_tick + 1, col_idx_dict['ohlc_col_idxs'][2]]  # +1 for including exit_tick\n","  open_ymax, en_ymax, ex_ymax = [(l_data[tick_] - y0) / (y1 - y0) - .01 for tick_ in [open_tick, entry_tick, exit_tick]]  # -.05 for margin\n","  plt.axvline(open_tick, 0, open_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')  # 추후, tick 별 세부 정의가 달라질 수 있음을 고려해 multi_line 작성 유지\n","  plt.axvline(entry_tick, 0, en_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  plt.axvline(exit_tick, 0, ex_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","\n","  return"],"metadata":{"id":"ESReTMpP7SoO"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### sync_check"],"metadata":{"id":"X0FsT-8FZRti"}},{"cell_type":"code","source":["save_plot = 0\n","\n","open_idx_range = reversed(range(0, len(res_df), 1000))\n","plot_range = 100\n","\n","x_max = 400\n","\n","inversion = 0\n","hedge = 0\n","\n","\n","if save_plot:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".ftr\", \"\")\n","  try:\n","    os.mkdir(plot_check_dir)\n","  except:\n","\n","    #     remove existing dir   #\n","    shutil.rmtree(plot_check_dir)\n","    print(plot_check_dir, 'removed !')\n","    os.mkdir(plot_check_dir)\n","    # pass\n","    \n","\n","prev_plotsize = 30\n","post_plotsize = 20\n","\n","\n","\n","h_candle_intv1 = 15\n","h_candle_intv2 = 60\n","if 'hopen_{}'.format(h_candle_intv2) not in res_df.columns:\n","  res_df = h_candle(res_df, h_candle_intv1)\n","  res_df = h_candle(res_df, h_candle_intv2)\n","\n","res_df[\"ma30_1m\"] = res_df['close'].rolling(30).mean()\n","res_df[\"ma60_1m\"] = res_df['close'].rolling(60).mean()\n","\n","res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line)\n","# res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=1, use_dtk_line=1)\n","# break\n","\n","rtc_list = [\"short_tp_1_{}\".format(strat_version), \"short_tp_gap_{}\".format(strat_version), \"long_tp_1_{}\".format(strat_version), \"long_tp_gap_{}\".format(strat_version)]\n","# h_rtc_list = [\"h_short_tp_1\", \"h_short_tp_gap\", \"h_long_tp_1\", \"h_long_tp_gap\"]\n","dtk_list = [\"short_dtk_1_{}\".format(strat_version), \"short_dtk_gap_{}\".format(strat_version), \"long_dtk_1_{}\".format(strat_version), \"long_dtk_gap_{}\".format(strat_version),\n","            # \"short_dtk_1_line\", \"short_dtk_gap_line\", \"long_dtk_1_line\", \"long_dtk_gap_line\",\n","            \"short_dtk_plot_1\", \"short_dtk_plot_gap\", \"long_dtk_plot_1\", \"long_dtk_plot_gap\"]\n","dc_v2_list = ['dc_upper_v2_{}'.format(strat_version), 'dc_lower_v2_{}'.format(strat_version)]\n","\n","\n","ohlc_list = ['open', 'high', 'low', 'close'] # + basic_st_list\n","hcandle_list = ['hopen_%s' % h_candle_intv1, 'hclose_%s' % h_candle_intv1, 'hopen_%s' % h_candle_intv2, 'hclose_%s' % h_candle_intv2]\n","# hcandle_list = ['hopen_%s' % h_candle_intv1, 'hclose_%s' % h_candle_intv1, 'hhigh_%s' % h_candle_intv2, 'hlow_%s' % h_candle_intv2]\n","\n","# --------------------- dc & bb level --------------------- #\n","dc_interval = '1m'\n","hdc_interval = '5m'\n","hhdc_interval = '15m'\n","\n","st_list = ['st_base_%s' % hhdc_interval, 'st_upper_%s' % hhdc_interval, 'st_lower_%s' % hhdc_interval]\n","\n","dc_list = ['dc_upper_%s' % dc_interval, 'dc_lower_%s' % dc_interval]\n","hdc_list = ['dc_upper_%s' % hdc_interval, 'dc_lower_%s' % hdc_interval]\n","hhdc_list = ['dc_upper_%s' % hhdc_interval, 'dc_lower_%s' % hhdc_interval]\n","\n","bb_interval = dc_interval\n","hbb_interval = hdc_interval\n","hhbb_interval = hhdc_interval\n","\n","bb_list = ['bb_upper_%s' % bb_interval, 'bb_lower_%s' % bb_interval]\n","hbb_list = ['bb_upper_%s' % hbb_interval, 'bb_lower_%s' % hbb_interval]\n","hhbb_list = ['bb_upper_%s' % hhbb_interval, 'bb_lower_%s' % hhbb_interval]\n","\n","bbwp_list = ['bbwp', 'bbwp_ma']\n","\n","\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1']\n","senkoub_list = ['senkou_b1']\n","\n","sar_list = ['sar_3m', 'sar_5m', 'sar_15m']\n","\n","ma_list = ['ma30_1m', 'ma60_1m']\n","sma_list = ['sma_1m']\n","\n","ema_list = ['ema_5m']\n","# cb_list = ['cloud_bline_1m']\n","cb_list = ['cloud_bline_30m']\n","# cb_list = ['cloud_bline_5m']\n","\n","\n","\n","# -------------- under price phase -------------- #\n","# macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3']\n","# trix_list = ['trix1', 'trix2', 'trix3']\n","# stoch_list = ['stoch_5m']\n","# fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","# cctbbo_list = ['cctbbo']\n","# emaroc_list = ['ema_roc']\n","rsi_list = ['rsi_%s' % config.loc_set.point.exp_itv] \n","cci_list = ['cci_%s' % config.loc_set.point.exp_itv] \n","\n","\n","# -------------- summation -------------- #\n","# input_colname = ohlc_list + basic_st_list + pline_list + bb_list + hbb_list + sma_list + cb_list + stoch_list + sar_list + dc_list\n","input_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + hhdc_list + dtk_list + dc_v2_list + rsi_list + ema_list + ma_list + st_list# + cci_list\n","\n","# yrange_colname = ohlc_list + basic_st_list + pline_list # currently just used for ymin, ymax\n","yrange_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + hhdc_list + dc_v2_list + ema_list # currently just used for ymin, ymax\n","yrange_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + dc_v2_list + ema_list # currently just used for ymin, ymax\n","\n","\n","\n","odd_cnt = 0\n","obj_i = -1\n","rev_obj_i = 0\n","\n","#   지금, continue 발생시 true / false idx 가 같이 상승하는 문제\n","\n","# while 1:\n","for open_idx in open_idx_range:\n","\n","  # if obj_i >= len_obj or rev_obj_i >= len_obj:\n","  #   break\n","\n","  # if odd_cnt % 2 == 1 and tf_plot: #  loss plot 을 채워야하는 상황\n","  #   rev_obj_i += 1\n","\n","  # else:\n","  #   obj_i += 1\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","  \n","\n","  odd_cnt += 1\n","\n","  # break\n","\n","  print(\"open_idx :\", open_idx)\n","  \n","  plot_df = res_df.iloc[open_idx - prev_plotsize:open_idx + plot_range + post_plotsize][input_colname]\n","  \n","  odds = 1 if odd_cnt % 2 == 1 else 2\n","  if odds == 1:\n","\n","    plt.style.use('dark_background')\n","\n","    fig = plt.figure(figsize=(26, 18))\n","    \n","    gs = gridspec.GridSpec(nrows=2, # row 몇 개 \n","                        ncols=2, # col 몇 개 \n","                        height_ratios=[3, 1]\n","                        )\n","    \n","  ax = fig.add_subplot(gs[odds - 1])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='#26a69a', colordown='#ef5350', alpha=0.5)\n","\n","  # ---------- h_candle ---------- #\n","  alpha = 1\n","  lw = 1\n","  for cd_i, candle in enumerate(hcandle_list):\n","\n","    if cd_i == 2:\n","      lw = 2      \n","    plt.step(np.arange(len(plot_df)), plot_df[candle].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","\n","  # alpha = 0.1\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['hclose_60'].values, plot_df['hopen_60'].values, \n","  #                     where=1, facecolor='#ffffff', alpha=alpha)  \n","  \n","\n","   # --------- ma --------- #\n","  alpha = 1\n","  lw = 2\n","  for ma_i, item in enumerate(ma_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","   # --------- ema --------- #\n","  alpha = 1\n","  lw = 4\n","  for sm_i, item in enumerate(ema_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","    \n","   # --------- st --------- #\n","  alpha = 1\n","  lw = 2\n","  for sm_i, item in enumerate(st_list):\n","      plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#00ff00', linewidth=lw)\n","\n","  # ---------------------- dc_v2 ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(dc_v2_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","  # # ---------------------- dc ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(dc_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","  # # ---------------------- hdc ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(hdc_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#e65100', linewidth=lw)\n","\n","  # # ---------------------- hhdc ---------------------- #\n","  # alpha = 1\n","  # lw = 4\n","  # for sm_i, item in enumerate(hhdc_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#c2185b', linewidth=lw)\n","\n","\n","  # # ---------------------- bb ---------------------- #\n","  # alpha = 1\n","  # lw = 1\n","  # for sm_i, item in enumerate(bb_list):\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","\n","  # alpha = 0.2\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % bb_interval].values, plot_df['bb_lower_%s' % bb_interval].values, \n","  #                     where=plot_df['bb_upper_%s' % bb_interval].values >= plot_df['bb_lower_%s' % bb_interval].values, facecolor='#ffffff', alpha=alpha)   \n","\n","  # # ---------------------- hbb ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(hbb_list):\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ff00ff', linewidth=lw)\n","  \n","  # alpha = 0.2\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % hbb_interval].values, plot_df['bb_lower_%s' % hbb_interval].values, \n","  #                     where=plot_df['bb_upper_%s' % hbb_interval].values >= plot_df['bb_lower_%s' % hbb_interval].values, facecolor='#ff00ff', alpha=alpha) \n","  \n","  # # ---------------------- hhbb ---------------------- #\n","\n","  # alpha = 1\n","  # lw = 4\n","  # for sm_i, item in enumerate(hhbb_list):\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#3179f5', linewidth=lw)\n","  \n","  # alpha = 0.2\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % hhbb_interval].values, plot_df['bb_lower_%s' % hhbb_interval].values, \n","  #                     where=plot_df['bb_upper_%s' % hhbb_interval].values >= plot_df['bb_lower_%s' % hhbb_interval].values, facecolor='#3179f5', alpha=alpha) \n","  \n","  # ------------------- dtk_line (old, tp_line) ------------------- #\n","  \n","  # alpha = 1\n","  # lw = 2\n","  # rtc_ratio_list = [config.loc_set.zone.dt_k]\n","  \n","  # for rtc_k in rtc_ratio_list:    \n","  #   # plt.step(np.arange(len(plot_df)), plot_df['short_dtk_1_line'].values - plot_df['short_dtk_gap_line'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['long_dtk_1_line'].values + plot_df['long_dtk_gap_line'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","\n","  # hy_min = np.min(plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * rtc_k)\n","  # hy_max = np.max(plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * rtc_k)  \n","\n","  # alpha = 1\n","  # lw = 4\n","  # # h_rtc_ratio_list = [config.loc_set.zone.dt_k]\n","  # h_rtc_ratio_list = [config.loc_set.zone.zone_dt_k]\n","  # # h_rtc_ratio_list = [0.272, 0.36, 0.4, 0.5]\n","  \n","  # for h_rtc_k in h_rtc_ratio_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df['short_dtk_plot_1'].values - plot_df['short_dtk_plot_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['long_dtk_plot_1'].values + plot_df['long_dtk_plot_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['h_short_tp_1'].values - plot_df['h_short_tp_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['h_long_tp_1'].values + plot_df['h_long_tp_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","\n","  # # hy_min = np.min(plot_df['short_dtk_plot_1'].values - plot_df['short_dtk_plot_gap'].values * h_rtc_k)\n","  # # hy_max = np.max(plot_df['long_dtk_plot_1'].values + plot_df['long_dtk_plot_gap'].values * h_rtc_k)  \n","\n","  # ------------- y lim ------------- #  \n","  y_max = max(np.max(plot_df[yrange_colname]))\n","  y_min = min(np.min(plot_df[yrange_colname]))\n","  # y_max = max(y_max, y_max_)\n","  # y_min = min(y_min, y_min_)\n","  \n","  # hy_min = np.min(plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * 0.36)\n","  # hy_max = np.max(plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * 0.36)  \n","  # y_max = max(y_max, y_max_, hy_max)\n","  # y_min = min(y_min, y_min_, hy_min)\n","\n","  if np.isnan(y_max) or np.isnan(y_min):\n","    print('continued in yminmax')\n","    continue\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","\n","  plt.ylim(y_min, y_max)\n","\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  #           rsi          #    \n","  plt.subplot(gs[odds + 1])\n","  alpha = 1\n","  for rsi_ in rsi_list:\n","    plt.step(np.arange(len(plot_df)), plot_df[rsi_].values, 'g', alpha=alpha)\n","    # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","    alpha -= 0.2\n","  plt.axhline(50, linestyle='--')\n","  plt.axhline(50 + config.loc_set.point.osc_band, linestyle='--')\n","  plt.axhline(50 - config.loc_set.point.osc_band, linestyle='--')\n","  \n","  plt.axvline(prev_plotsize, linestyle='--')\n","  \n","  #           cci          #    \n","  # plt.subplot(gs[odds + 1])\n","  # alpha = 1\n","  # for cci_ in cci_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cci_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axhline(config.loc_set.point.osc_band, linestyle='--')\n","  # plt.axhline(-config.loc_set.point.osc_band, linestyle='--')\n","  \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","\n","\n","  if len(plot_df) > x_max:\n","    x_margin = x_max / 20\n","    plt.xlim(0 - x_margin, x_max + x_margin)\n","\n","\n","  if not save_plot:\n","    if odds == 2:\n","      plt.show()\n","      plt.close()\n","  \n","  else:\n","    # ---------- save mode ---------- #\n","    fig_name = plot_check_dir +  \"/%s.png\" % t_i\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","\n","  # plt.close()  \n","  print()\n","\n","  # break\n"],"metadata":{"id":"inQ6f-CDZYkr"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"13a-U32Uy50I"},"source":["### brief np_pr survey"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"L9LdjV2uUWnp"},"outputs":[],"source":["# plot_pr_list[:100]\n","plt.plot(np_pr)\n","plt.axhline(1)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"TBE0l6dHRYrE"},"source":["### close & pr comp."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":877},"executionInfo":{"elapsed":1436,"status":"ok","timestamp":1636355589887,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"-txULkhXRbz5","outputId":"7cda9fc7-4a4e-4c52-ffa3-a974b5f7c66f"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 3 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 3 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]}],"source":["#     chunky survey 필요함    #\n","chunk_size = 50000\n","\n","sync_pr = np.ones(len(res_df))\n","sync_tr = np.zeros(len(res_df))\n","# sync_tr = np.empty(len(res_df))\n","# sync_tr[:] = np.nan\n","\n","max_tr = np.max(tp_ratio_list)\n","min_tr = np.min(tp_ratio_list)\n","\n","for ck_i in range(0, len(res_df), chunk_size):\n","\n","  chunked_df = res_df.iloc[ck_i:ck_i + chunk_size]\n","  # break\n","\n","  for pr_, eptp_idx, tr_ in zip(pr_list[ck_i:ck_i + chunk_size], trade_list[ck_i:ck_i + chunk_size], tp_ratio_list[ck_i:ck_i + chunk_size]):\n","    # print(pr_, eptp_idx)\n","    sync_pr[eptp_idx[-1][0]] = pr_\n","    sync_tr[eptp_idx[-1][0]] = tr_\n","    # break\n","\n","  chunked_pr = sync_pr[ck_i:ck_i + chunk_size]\n","  chunked_tr = sync_tr[ck_i:ck_i + chunk_size]\n","  chunked_tr = np.where(np.isnan(chunked_tr), pd.Series(chunked_tr).shift(1), chunked_tr)\n","\n","  # plt.figure(figsize=(8, 6))\n","\n","  plt.subplot(311)\n","  plt.plot(np.arange(len(chunked_df)), chunked_df['close'])\n","  # plt.show()\n","\n","  plt.subplot(312)\n","  plt.plot(np.cumprod(chunked_pr))\n","  \n","  plt.subplot(313)\n","  plt.plot(chunked_tr)\n","  plt.ylim(min_tr + 0.5 * (max_tr - min_tr), max_tr)\n","  \n","  plt.show()\n","  print()\n"]},{"cell_type":"markdown","metadata":{"id":"Qys2Bw5Ou3u9"},"source":["### plot indi. legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pi5ntOOVu6JT"},"outputs":[],"source":["\n","  # ---------------------- ma ---------------------- #\n","   # --------- ema --------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(ema_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  #   # --------- sma --------- #\n","  # alpha = 1\n","  # for sm_i, sma in enumerate(sma_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 4\n","  #   plt.step(np.arange(len(plot_df)), plot_df[sma].values, alpha=alpha, color='#e91e63', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  \n","  # ---------------------- cb ---------------------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(cb_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#5b9cf6', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","\n","  \n","  # ---------------------- sar ---------------------- #\n","  # alpha = 1\n","  # markersize = 5\n","  # for sar in sar_list:\n","  #   plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","  #   markersize += 1\n","  #   alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  # alpha = 0.7\n","  # for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","  #                     where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","  #                     where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","  #   alpha -= 0.05\n","  \n","\n","\n","  # ---------------------- outer price indi. ---------------------- #\n","  #           macd          #\n","  # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","    \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for stoch_ in stoch_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[stoch_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(stoch_upper, linestyle='--')\n","  # plt.axhline(stoch_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- cctbbo ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for cctbbo in cctbbo_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cctbbo].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(cctbbo_upper, linestyle='--')\n","  # plt.axhline(cctbbo_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- ema_roc ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for emaroc in emaroc_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[emaroc].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","  \n","  # ---------- bbw ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for bbwp_ in bbwp_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[bbwp_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(bbwp_thresh, linestyle='--')\n","\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n"]},{"cell_type":"markdown","metadata":{"id":"cj9X6S1jJjER"},"source":["### plot nontp case"]},{"cell_type":"markdown","metadata":{"id":"tApzvz_gK9lR"},"source":["## legacy"]},{"cell_type":"markdown","metadata":{"id":"FaRGwR4NEop2"},"source":["### shifting"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"a8aYsjEgQnGF"},"outputs":[],"source":["org_res_df = res_df.copy()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":291,"status":"ok","timestamp":1626515312874,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"RF3RM2G2RCb1","outputId":"ba8f6a75-d4df-4f85-cd0f-190935341f7a"},"outputs":[{"name":"stdout","output_type":"stream","text":["                            open     high  ...  min_upper  max_lower\n","2021-06-30 23:55:59.999  0.27223  0.27281  ...   0.272145    0.27005\n","2021-06-30 23:56:59.999  0.27274  0.27290  ...   0.272145    0.27005\n","2021-06-30 23:57:59.999  0.27246  0.27257  ...   0.272523    0.27021\n","2021-06-30 23:58:59.999  0.27166  0.27183  ...   0.272523    0.27021\n","2021-06-30 23:59:59.999  0.27144  0.27211  ...   0.272523    0.27021\n","\n","[5 rows x 37 columns]\n","                            open     high  ...  min_upper  max_lower\n","2021-06-30 23:55:59.999  0.27223  0.27281  ...   0.272523    0.27021\n","2021-06-30 23:56:59.999  0.27274  0.27290  ...        NaN        NaN\n","2021-06-30 23:57:59.999  0.27246  0.27257  ...        NaN        NaN\n","2021-06-30 23:58:59.999  0.27166  0.27183  ...        NaN        NaN\n","2021-06-30 23:59:59.999  0.27144  0.27211  ...        NaN        NaN\n","\n","[5 rows x 37 columns]\n"]}],"source":["#         refresh res_df      #\n","res_df = org_res_df.copy()\n","print(org_res_df.tail(5))\n","\n","# break\n","\n","\n","shift_size = -4\n","# shift_size = -1\n","# shift_size = -7\n","# shift_size = +3\n","\n","res_df['min_upper'] = res_df['min_upper'].shift(shift_size)\n","res_df['max_lower'] = res_df['max_lower'].shift(shift_size)\n","res_df['minor_ST1_Trend'] = res_df['minor_ST1_Trend'].shift(shift_size)\n","res_df['minor_ST2_Trend'] = res_df['minor_ST2_Trend'].shift(shift_size)\n","res_df['minor_ST3_Trend'] = res_df['minor_ST3_Trend'].shift(shift_size)\n","res_df['middle_line'] = res_df['middle_line'].shift(shift_size)\n","\n","print(res_df.tail(5))"]},{"cell_type":"markdown","metadata":{"id":"2gxvme1PC6ha"},"source":["### load model"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5831,"status":"ok","timestamp":1628862368878,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"dtYdAuSsC72_","outputId":"e8dccc53-aaa7-4bab-ed8d-753f634c08d6"},"outputs":[{"name":"stdout","output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/resnet/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5\n","94773248/94765736 [==============================] - 1s 0us/step\n"]}],"source":["# model_name = 'inner_tick_cnnreg_lscalemm_prefee_gpu_%s_%s_%s_%s_%s.h5'\n","\n","# model = tf.keras.models.load_model(ckpt_path + model_name)\n","\n","from tensorflow.keras.applications.resnet50 import ResNet50\n","\n","model = ResNet50(weights='imagenet', include_top=False)\n","# model.summary()\n"]},{"cell_type":"markdown","metadata":{"id":"5la6usMOFzkX"},"source":["#### gen selected vector"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oQk3-jbKF8FB"},"outputs":[],"source":["def min_max_scale(npy_x):\n","\n","  return (npy_x - np.min(npy_x)) / (np.max(npy_x) - np.min(npy_x))\n","\n","def expand_dims(npy_x):\n","\n","  row, col = npy_x.shape\n","  npy_x2 = np.array(npy_x).reshape(-1, row, col, 1).astype(np.float32)\n","  # input_x = np.array(data_x).reshape(-1, row, col).astype(np.float32)\n","\n","  #     1c to 3c    #\n","  npy_x3 = npy_x2 * np.ones(3, dtype=np.float32)[None, None, None, :]\n","\n","  return npy_x3\n","\n","\n","def vector_dist(f1, f2):\n","  return np.linalg.norm(f1-f2)\n","\n","\n","\n","# ------------------------ params ------------------------  #\n","selected_i = 500\n","input_size = 100\n","\n","\n","\n","#   1. 선택된 인덱스를 입력받았을 때, input generating 형태만 만들어놓고,     #\n","#   1-1. input cols 필요함    #\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower']\n","# senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","# senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","\n","sma_list = ['sma']\n","\n","#     -------------- outer price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","cctbbo_list = ['cctbbo']\n","\n","selected_price_colname = basic_list + senkoua_list + senkoub_list + sar_list\n","selected_outprice_colname = [macd_list]\n","\n","\n","#         global scaling for outer price data       #\n","#         1. nan 처리       #\n","\n","# # print((np.isnan(df.values)))\n","# print(\"np.sum(np.isnan(df.values), axis=0) :\", np.sum(np.isnan(df.values), axis=0))\n","\n","# max_nan = np.max(np.sum(np.isnan(df.values), axis=0))\n","# # print(max_nan)\n","\n","# df = df.iloc[max_nan:-max_nan]\n","\n","# total_gdata = []\n","# for g_col in selected_outprice_colname:\n","\n","#   temp_data = min_max_scale(res_df[g_col])\n","#   total_gdata.append(temp_data)\n","\n","\n","\n","#   1-2. cols 에 따른, scaling method 구분함    #\n","onprice_input_x = min_max_scale(res_df[selected_price_colname].iloc[selected_i - input_size:selected_i].values)\n","print(onprice_input_x.shape)\n","\n","\n","#   2. plot_check 에서 본인이 원하는 shape 의 인덱스를 선택   #\n","#   3. vertorize, \n","#   3-1. input generator 를 이용해 entry signal 발생할 때마다 dist 비교 진행    #\n","re_onprice_input_x = expand_dims(onprice_input_x)\n","print(re_onprice_input_x.shape)\n","      \n","# break\n","\n","selected_vector = model.predict(re_onprice_input_x, verbose=1)\n","print(selected_vector.shape)"]},{"cell_type":"markdown","metadata":{"id":"OJqkmkpsLCYC"},"source":["### tr_tresh calc"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gcpo4MGd9Wm4"},"outputs":[],"source":["res_wr = 0.6\n","# tr_thresh = 1\n","# tr_thresh = ((1 - res_wr) / res_wr) ** 0.5\n","tr_thresh = ((1 - res_wr) / res_wr) + 0.01\n","# tr_thresh = 2.6\n","print(\"res_wr :\", res_wr)\n","print(\"tr_thresh :\", tr_thresh)\n","\n","\n","#   단리    #\n","trade_num = 1000\n","asset = 1 # thousand USDT\n","test_loss_gap = 0.95  # fee adjusted\n","test_pr_gap = 1 + (1 - test_loss_gap) * tr_thresh\n","\n","test_loss_cnt = trade_num * (1 - res_wr)\n","test_pr_cnt = trade_num * res_wr\n","\n","test_trade_list = [test_pr_gap] * int(test_pr_cnt) + [test_loss_gap] * int(test_loss_cnt)\n","random.shuffle(test_trade_list)\n","# print(\"len(test_trade_list) :\", len(test_trade_list))\n","print(test_trade_list[:10])\n","print()\n","\n","# print(\"%.5f\" % np.cumprod(test_trade_list)[-1])\n","for tr_thresh_ in np.arange(1, 3, 0.2):\n","  if (1 + (1 - test_loss_gap) * tr_thresh_) ** test_pr_cnt * test_loss_gap ** test_loss_cnt > 1:\n","    break\n","print(\"복리를 위한 tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumprod(test_trade_list)[-1] :\", np.cumprod(test_trade_list)[-1])\n","print(\"total_pr : \", np.cumprod(test_trade_list)[-1])\n","print()\n","#   복리 tr_thresh  #\n","#   1. trade_num 에 영향 받지 않음\n","#   2. loss_gap 에 비례함\n","\n","for tr_thresh_ in np.arange(1, 3, 0.01):\n","  if ((1 - test_loss_gap) * tr_thresh_) * test_pr_cnt + (test_loss_gap - 1) * test_loss_cnt > 0:\n","    break\n","np_test_trade = np.array(test_trade_list) - 1\n","print(np_test_trade[:10])\n","# print(\"%.3f\" % )\n","print(\"단리를 위한 tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumsum(np_test_trade)[-1] :\", np.cumsum(np_test_trade)[-1])\n","print(\"total_pr : \", 1 + np.cumsum(np_test_trade)[-1])\n"]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":["Ic1mfmwWCIBu","AUSBU7T8Suzi","VdukVo5-Suzj","Bw5JibDKSuzj","Pe0QpnORSuzk","E0n53hflJbnp","MlFkpO1MSuzl","t1E_eAyPSuzm","nUs4fjVHSuzl","WVAKq3i8Suzm","L7l5CTJfSuzn","x_XGJqBi8Jex","MSUY4nnku3s9","epgS5Dksu-HX","M8-EChy0VsDr","Iy76iO7gztne","x2yj2SwAXDLp","EOXQbXixiQcK","xpyP5t8Ht_pE","dzla8i9_ysmP","zQ-roiifspcX","X0FsT-8FZRti","13a-U32Uy50I","TBE0l6dHRYrE","Qys2Bw5Ou3u9","tApzvz_gK9lR","2gxvme1PC6ha","5la6usMOFzkX","OJqkmkpsLCYC"],"name":"ID4_vec_backi2(0328_imb_ v2).ipynb의 사본","toc_visible":true,"provenance":[],"machine_shape":"hm","authorship_tag":"ABX9TyN74nDsjZzv4cHmkt1OenKX"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}