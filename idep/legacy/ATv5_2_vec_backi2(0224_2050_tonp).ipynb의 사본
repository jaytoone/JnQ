{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":18478,"status":"ok","timestamp":1645698591949,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"6rmQpzEGXfCw","outputId":"1ead2629-5eb4-4603-a152-8cda5b56bfb5"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","import os, sys\n","\n","current_path = '/content/drive/My Drive/Colab Notebooks/JnQ/'\n","\n","os.chdir(current_path)\n","\n","strat_pkg = 'IDE'\n","\n","mpl_finance_path = '/content/drive/My Drive/Colab Notebooks/JnQ/mpl_finance'\n","\n","if mpl_finance_path not in sys.path:\n","\n","  try:\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ')\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ/{}'.format(strat_pkg))\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ/funcs')\n","    sys.path.insert(0, mpl_finance_path)\n","    \n","  except Exception as e:\n","    print(e)"]},{"cell_type":"markdown","metadata":{"id":"8uqYv5StTazo"},"source":["# requirements"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"9qGt60DKTZmf","executionInfo":{"status":"ok","timestamp":1645698619923,"user_tz":-540,"elapsed":27980,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"outputs":[],"source":["# !pip install findiff\n","\n","# import nvstrings, nvcategory, cudf\n","# import cuml\n","# import cudf\n","\n","import matplotlib.pyplot as plt\n","from matplotlib import gridspec\n","from tqdm.notebook import tqdm\n","from funcs.funcs_idep import *\n","from funcs.funcs_duration_v2 import *\n","from funcs.funcs_plot_check import *\n","# from funcs.funcs_ide import *\n","# from funcs.funcs_indicator_candlescore import *\n","from funcs.funcs_indicator import *\n","from funcs.funcs_trader import *\n","import logging\n","import importlib\n","\n","import mpl_finance as mf\n","import os\n","import datetime\n","\n","import IPython\n","import IPython.display\n","import matplotlib as mpl\n","\n","import numpy as np\n","# import jax.numpy as np\n","import pandas as pd\n","# import seaborn as sns\n","# import tensorflow as tf\n","\n","import pickle\n","import shutil\n","import json\n","from easydict import EasyDict\n","\n","# from trendln import trendln\n","\n","from datetime import datetime\n","import random\n","import time\n","import warnings\n","\n","warnings.simplefilter(\"ignore\", category=RuntimeWarning)\n","# mpl.rcParams['figure.figsize'] = (8, 6)\n","# mpl.rcParams['axes.grid'] = False\n","\n","np.seterr(invalid=\"ignore\")\n","pd.set_option('mode.chained_assignment',  None)\n","\n","pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)"]},{"cell_type":"markdown","metadata":{"id":"Ic1mfmwWCIBu"},"source":["# makeset - with to_htf dataframes"]},{"cell_type":"markdown","metadata":{"id":"AUSBU7T8Suzi"},"source":["## sync_check_make"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QmhLikYlSuzi"},"outputs":[],"source":["def sync_check_make(df):\n","\n","    make_itv_list = ['3T', '5T', '15T', '30T', 'H', '4H', 'D']\n","    offset_list = ['1h', '1h', '1h', '1h', '1h', '1h', '9h']\n","\n","    assert len(make_itv_list) == len(offset_list), \"length of itv & offset_list should be equal\"\n","        \n","    htf_df_list = [to_htf(df, itv_=itv_, offset=offset_) for itv_, offset_ in zip(make_itv_list, offset_list)]\n","\n","    df_3T, df_5T, df_15T, df_30T, df_H, df_4H, df_D = htf_df_list\n","\n","    for htf_df in htf_df_list:\n","      print(\"{} -> \".format(pd.infer_freq(htf_df.index)), htf_df.tail(1))\n","\n","    # return\n","\n","    #           supertrend          #\n","    # # print(df.head(100))\n","    # # return\n","    \n","    df = st_price_line(df, df_3T, '3m')\n","    # df = st_price_line(df, df_5T, '5m')\n","    # df = st_price_line(df, df_15T, '15m')\n","    # df = st_price_line(df, df_30T, '30m')\n","    # df = st_price_line(df, df_H, '1h')\n","    # df = st_price_line(df, df_4H, '4h')\n","\n","    print(\"supertrend phase done\")\n","\n","    # --------------- rsi --------------- #  \n","    # df['rsi_1m'] = rsi(df, 14)    \n","    # df_5T['rsi_5m'] = rsi(df_5T, 14)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1]), columns=['rsi_5m']))\n","    \n","    # print(\"rsi phase done\")\n","\n","\n","    # --------------- cci --------------- #  \n","    # df['cci_1m'] = cci(df, 20)\n","\n","    # print(\"cci phase done\")\n","\n","\n","    # --------------- ema --------------- #      \n","    # df_5T['ema_5m'] = ema(df_5T['close'], 195)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1]), columns=['ema_5m']))\n","    \n","    # print(\"ema phase done\")\n","\n","\n","    # # --------------- dc --------------- #  \n","    # df = dc_line(df, None, '1m', dc_period=20)\n","    # df = dc_line(df, df_3T, '3m', dc_period=20)\n","    # df = dc_line(df, df_5T, '5m', dc_period=20)\n","    # df = dc_line(df, df_15T, '15m', dc_period=20)\n","    # df = dc_line(df, df_30T, '30m', dc_period=20)\n","    # df = dc_line(df, df_H, '1h', dc_period=20)\n","    # df = dc_line(df, df_4H, '4h', dc_period=20)\n","    # df = dc_line(df, df_D, '1d', dc_period=20)\n","\n","    # print(\"dc phase done\")\n","    \n","    # # --------------- bband --------------- #  \n","    # df = bb_line(df, None, '1m')\n","    # df = bb_line(df, df_3T, '3m')\n","    # df = bb_line(df, df_5T, '5m')\n","    # df = bb_line(df, df_15T, '15m')\n","    # df = bb_line(df, df_30T, '30m')\n","    # df = bb_line(df, df_H, '1h')\n","    # df = bb_line(df, df_4H, '4h')\n","    # df = bb_line(df, df_D, '1d')\n","\n","    # print(\"bband phase done\")\n","\n","    # --------------- cbline --------------- #    \n","    # df_3T['cloud_bline_3m'] = cloud_bline(df_3T, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_3T, [-1]), columns=['cloud_bline_3m']))\n","    # df_5T['cloud_bline_5m'] = cloud_bline(df_5T, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1]), columns=['cloud_bline_5m']))\n","    # df_15T['cloud_bline_15m'] = cloud_bline(df_15T, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_15T, [-1]), columns=['cloud_bline_15m']))\n","    # df_30T['cloud_bline_30m'] = cloud_bline(df_30T, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_30T, [-1]), columns=['cloud_bline_30m']))\n","    # df_H['cloud_bline_1h'] = cloud_bline(df_H, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_H, [-1]), columns=['cloud_bline_1h']))\n","    # df_4H['cloud_bline_4h'] = cloud_bline(df_4H, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_4H, [-1]), columns=['cloud_bline_4h']))\n","\n","    # print(\"cbline phase done\")\n","    \n","\n","    #           lucid sar              #\n","    # df['sar_1m'], df['sar_uptrend_1m'] = lucid_sar(df, return_uptrend=True)\n","\n","    # df_3T['sar_3m'], df_3T['sar_uptrend_3m'] = lucid_sar(df_3T, af_initial=0.01, return_uptrend=True)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_3T, [-2, -1], backing_i=1), columns=['sar_3m', 'sar_uptrend_3m']))\n","\n","    # df_5T['sar_5m'], df_5T['sar_uptrend_5m'] = lucid_sar(df_5T, af_initial=0.01, return_uptrend=True)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-2, -1], backing_i=1), columns=['sar_5m', 'sar_uptrend_5m']))\n","\n","    # df_15T['sar_15m'], df_15T['sar_uptrend_15m'] = lucid_sar(df_15T, af_initial=0.01, return_uptrend=True)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_15T, [-2, -1], backing_i=1), columns=['sar_15m', 'sar_uptrend_15m']))\n","\n","    # df_4H['sar_4h'], df_4H['sar_uptrend_4h'] = lucid_sar(df_4H, return_uptrend=True)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_4H, [-2, -1], backing_i=1), columns=['sar_4h', 'sar_uptrend_4h']))\n","    \n","    # print(\"sar phase done\")\n","\n","    \n","    #           stochastic              #\n","    # df['stoch_1m'] = stoch(df, 13, 3, 3)\n","\n","    # df_5T['stoch'] = stoch(df_5T, 13, 3, 3)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","    # print(\"stoch phase done\")\n","\n","\n","    return df\n"]},{"cell_type":"markdown","metadata":{"id":"mEKyVbHWSuzi"},"source":["## make & save res_df (concat 생각하면, timeindex sync 맞춰야함)"]},{"cell_type":"markdown","metadata":{"id":"VdukVo5-Suzj"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11,"status":"error","timestamp":1636201718856,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"khKb9nhlSuzj","outputId":"02bf2c60-f298-4fe9-e6bb-78230ac1348c"},"outputs":[{"ename":"NameError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-5-ee034491b257>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0ma_day\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m3600\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m24\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtqdm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m   \u001b[0mkeys\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mfile_list\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'file_list' is not defined"]}],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  if '2021-07-01'.upper() not in file_list[i]:\n","  # if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    excel_name = key.replace(\".xlsx\", \"_st1h_backi2.xlsx\")\n","    excel_path = save_path + excel_name\n","\n","    if excel_name in exist_list:\n","      print(excel_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m 마지막 timeindex 의 date 기준, 08:59:59.999000 를 last timestamp 로 설정\n","      #      2. 시작 timestamp 는 모든 tf 의 가장 최근 시작 index,\n","      #       a. 1m 의 시작 timeindex 는 최소, htf 의 시작 timeindex 보다 interval 만큼 앞서야함\n","      #         i. 따라서 1m open_index, latest_open_index + 1d 를 하면 댐\n","      #           1. timestamp 으로 변환후 1day 를 더하고 datetime 으로 변환\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","    latest_open_index = sorted(open_indexes)[-1]\n","    \n","    open_ts = datetime.timestamp(latest_open_index)\n","    latest_open_index_1m = datetime.fromtimestamp(open_ts + a_day)\n","\n","    #   str 로 만들어 접근하면 불가함  #\n","    end_index = pd.to_datetime(str(df.index[-1]).split(\" \")[0] + \" 08:59:59.999000\")\n","    # break\n","\n","    sliced_df = df.loc[latest_open_index_1m:end_index] # to_lower_tf 의 기준 ltf\n","    sliced_second_df = second_df.loc[latest_open_index:end_index]\n","    sliced_third_df = third_df.loc[latest_open_index:end_index]\n","    sliced_fourth_df = fourth_df.loc[latest_open_index:end_index]\n","    sliced_fifth_df = fifth_df.loc[latest_open_index:end_index]\n","\n","    print(\"sliced index\")\n","    print(sliced_df.index[[0, -1]])\n","    print(sliced_second_df.index[[0, -1]])\n","    print(sliced_third_df.index[[0, -1]])\n","    print(sliced_fourth_df.index[[0, -1]])\n","    print(sliced_fifth_df.index[[0, -1]])\n","\n","    try:\n","      sliced_sixth_df = sixth_df.loc[latest_open_index:end_index]\n","      sliced_seventh_df = seventh_df.loc[latest_open_index:end_index]\n","\n","      print(sliced_sixth_df.index[[0, -1]])\n","      print(sliced_seventh_df.index[[0, -1]])\n","\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df, sliced_sixth_df, sliced_seventh_df)\n","    \n","    except:\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df)\n","\n","\n","\n","    res_df.to_excel(excel_path)\n","    print(excel_name, \"saved succesfully !\")"]},{"cell_type":"markdown","metadata":{"id":"Bw5JibDKSuzj"},"source":["### xlsx to feather"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":355,"referenced_widgets":["be2b848dbcb14a079a2b7bd605af6435"]},"id":"VA-_gcA7Suzj","outputId":"f6f3b55d-ec2c-4b2c-d62e-3de7c0384dc4"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"be2b848dbcb14a079a2b7bd605af6435","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/156 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["DatetimeIndex(['2021-06-28 00:00:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:02:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:04:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:14:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:29:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-09-14 03:59:59.999000', '2021-11-15 14:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-03-10 20:59:59.999000', '2021-11-15 16:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","\n","xlsx converted to feather !\n","DatetimeIndex(['2021-06-28 00:00:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:02:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:04:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:14:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:29:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-09-14 03:59:59.999000', '2021-11-15 14:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-03-10 20:59:59.999000', '2021-11-15 16:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","\n","xlsx converted to feather !\n"]}],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  # if '2021-07-01'.upper() not in file_list[i]:\n","  if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    feather_name = key.replace(\".xlsx\", \".ftr\")\n","    # feather_path = save_path + feather_name\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m 마지막 timeindex 의 date 기준, 08:59:59.999000 를 last timestamp 로 설정\n","      #      2. 시작 timestamp 는 모든 tf 의 가장 최근 시작 index,\n","      #       a. 1m 의 시작 timeindex 는 최소, htf 의 시작 timeindex 보다 interval 만큼 앞서야함\n","      #         i. 따라서 1m open_index, latest_open_index + 1d 를 하면 댐\n","      #           1. timestamp 으로 변환후 1day 를 더하고 datetime 으로 변환\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","\n","    df.reset_index().to_feather(date_path + feather_name, compression='lz4')\n","    second_df.reset_index().to_feather(date_path2 + feather_name, compression='lz4')\n","    third_df.reset_index().to_feather(date_path3 + feather_name, compression='lz4')\n","    fourth_df.reset_index().to_feather(date_path4 + feather_name, compression='lz4')\n","    fifth_df.reset_index().to_feather(date_path5 + feather_name, compression='lz4')\n","    sixth_df.reset_index().to_feather(date_path6 + feather_name, compression='lz4')\n","    seventh_df.reset_index().to_feather(date_path7 + feather_name, compression='lz4')\n","\n","    print(\"xlsx converted to feather !\")\n","    "]},{"cell_type":"markdown","metadata":{"id":"Pe0QpnORSuzk"},"source":["### add itv_name to ftr"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":223,"referenced_widgets":["e3225655da874b8d89cc8b2a381b3fb6"]},"executionInfo":{"elapsed":43664,"status":"ok","timestamp":1638246331122,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"M-gl30KxSuzk","outputId":"1cfcb580-8d25-4bd0-fdd0-213640779ce2"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"e3225655da874b8d89cc8b2a381b3fb6","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/175 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 BTCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 BCHUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 XRPUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 EOSUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 LTCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ETCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 LINKUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 XLMUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ADAUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ETHUSDT_1m.ftr\n"]}],"source":["save_path = './candlestick_concated/res_df/'\n","\n","# dir_path = \"bbdc3m_backi2\"\n","# date = '2021-10-10'\n","date = '2021-07-01'\n","\n","db_path = './candlestick_concated/database_bn/non_cum/%s/' % date\n","os.makedirs(os.path.join(db_path), exist_ok=True)\n","\n","# exist_list = os.listdir(os.path.join(save_path, dir_path))\n","# break\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","        \n","    df = shutil.copy(date_path + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n","    second_df = shutil.copy(date_path2 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval2))\n","    third_df = shutil.copy(date_path3 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval3))\n","    fourth_df = shutil.copy(date_path4 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval4))\n","    fifth_df = shutil.copy(date_path5 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval5))\n","    sixth_df = shutil.copy(date_path6 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval6))\n","    seventh_df = shutil.copy(date_path7 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval7))\n","\n","    print(\"copied to\" + db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n"]},{"cell_type":"markdown","metadata":{"id":"4oZ1ohTtSuzk"},"source":["### feather ver."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":448,"referenced_widgets":["15a8f265417c47d88bf5b1907353afa8","4f4c5fba8f1d4543a46d6dd7e658b7b3","2d4fae08e5364faf83b0bcdc8e6ece4c","0f94b5763ea344adbb20cf3517a25d2f","e5594180fccb4d2787579ee6034cd6ab","af7a8b3e0365404ea9de8bea08d1a4a6","4f9b787786494e79959bc49b6da4ff4d","06f4ecc65be347ac80deee1965545f27","f8462155d04e4c8da2e4c26f02213bb4","18817cdc20574020976bc2f2c6acc6b2","fefe35e08d734a20aa38986f42f27b13"]},"executionInfo":{"elapsed":239284,"status":"ok","timestamp":1642739615683,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"vgVHpnUsSuzk","outputId":"6224eedf-c127-4d18-f095-3a543cd3f1f8"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"15a8f265417c47d88bf5b1907353afa8","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/7 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["3T ->                          open     high      low    close\n","index                                                  \n","2022-01-10 15:18:00  3163.02  3164.29  3162.41  3164.28\n","5T ->                          open     high      low    close\n","index                                                  \n","2022-01-10 15:15:00  3160.51  3164.29  3159.01  3164.28\n","15T ->                          open     high      low    close\n","index                                                  \n","2022-01-10 15:15:00  3160.51  3164.29  3159.01  3164.28\n","30T ->                         open     high      low    close\n","index                                                 \n","2022-01-10 15:00:00  3171.7  3173.11  3156.02  3164.28\n","H ->                         open     high      low    close\n","index                                                 \n","2022-01-10 15:00:00  3171.7  3173.11  3156.02  3164.28\n","4H ->                         open     high      low    close\n","index                                                 \n","2022-01-10 13:00:00  3153.0  3179.16  3149.95  3164.28\n","D ->                          open     high      low    close\n","index                                                  \n","2022-01-10 09:00:00  3149.99  3179.16  3125.88  3164.28\n","supertrend phase done\n","./candlestick_concated/res_df/st3m_backi2/noncat/cum/2022-01-10/2022-01-10 ETHUSDT.ftr saved succesfully !\n"]}],"source":["# db_path = './candlestick_concated/database_ub/' # upbit\n","db_path = './candlestick_concated/database_bn/'   # binance\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","save_dir_path = \"st3m_backi2\"\n","\n","date = '2022-01-10'\n","\n","cum_path = \"cum\"\n","# cum_path = \"non_cum\"  # non_cum 으로 진행하는 경우, row concat 용도이기 때문에 noncat -> concat 으로 변경 (base cols 를 모두 담고 있음)\n","\n","concat_path = 'noncat' # 새로운 cols 를 기존 cum/concat 에 붙이려는 경우\n","# concat_path = 'concat'\n","\n","data_path = os.path.join(db_path, cum_path, date)\n","save_path = os.path.join(save_path, save_dir_path, concat_path, cum_path, date)\n","\n","os.makedirs(save_path, exist_ok=True)\n","\n","file_list = os.listdir(data_path)\n","exist_list = os.listdir(save_path)\n","# break\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","\n","    if \"_1m\" not in key:\n","      continue\n","\n","    # feather_name = key.replace(\".ftr\", \"_%.ftr\" % save_dir_path)\n","    feather_name = key.replace(\"_1m\", \"\")\n","    feather_path = os.path.join(save_path, feather_name)\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    df = pd.read_feather(os.path.join(data_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","    res_df = sync_check_make(df)\n","\n","    res_df.reset_index().to_feather(feather_path, compression='lz4')\n","    print(feather_path, \"saved succesfully !\")"]},{"cell_type":"markdown","metadata":{"id":"E0n53hflJbnp"},"source":["### htf candle check"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":489,"status":"ok","timestamp":1642148504926,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"6xW0yugCWvGz","outputId":"58106ff9-9709-4a62-bca2-1f6795d13322"},"outputs":[{"name":"stdout","output_type":"stream","text":["itv_ : 3T\n","                        open     high      low    close\n","index                                                  \n","2022-01-10 15:06:00  3169.97  3170.22  3159.51  3161.22\n","2022-01-10 15:09:00  3161.22  3163.98  3161.22  3163.82\n","2022-01-10 15:12:00  3163.82  3163.83  3156.02  3160.49\n","2022-01-10 15:15:00  3160.51  3164.29  3159.01  3162.93\n","2022-01-10 15:18:00  3163.02  3164.29  3162.41  3164.28\n","                            open     high      low    close    volume\n","index                                                                \n","2022-01-10 15:08:59.999  3169.97  3170.22  3159.51  3161.22  4241.449\n","2022-01-10 15:11:59.999  3161.22  3163.98  3161.22  3163.82  1143.874\n","2022-01-10 15:14:59.999  3163.82  3163.83  3156.02  3160.49  2135.292\n","2022-01-10 15:17:59.999  3160.51  3164.29  3159.01  3162.93  1011.598\n","2022-01-10 15:20:59.999  3163.02  3164.29  3162.41  3163.82   466.868\n"]}],"source":["itv_list = ['3T', '5T', '15T', '30T', '1H', '4H']\n","comp_df_list = [second_df, third_df, fourth_df, fifth_df, sixth_df, seventh_df]\n","offset_list = ['1h', '2min', '2min', '2min', '2min', '2min']\n","# itv_list = ['4H']\n","# comp_df_list = [seventh_df]\n","\n","slice_len = 100\n","for itv_, comp_df_, offset in zip(itv_list, comp_df_list, offset_list):\n","\n","  print(\"itv_ :\", itv_)\n","\n","  # df = h_candle_v2(df, '3T')\n","  # end_ts = \n","  h_res_df = df.resample(itv_, offset=offset).agg({\n","          'open': 'first',\n","          'high': 'max',\n","          'low': 'min',\n","          'close': 'last'\n","      })\n","\n","  #   앞은 길이가 다르고, 뒤에서부터 잘라서 비교    #\n","  #   last_row 빼고는 동일, 4h 제외\n","  # print(df.tail())\n","  print(h_res_df.tail())\n","  print(comp_df_.tail())\n","  # # print(h_res_df.head())\n","  # # print(second_df.head())\n","\n","  # print(len(h_res_df))\n","  # print(len(second_df))\n","\n","  # print(h_res_df.values[-slice_len:])\n","  # print(second_df.iloc[:, :4].values[-slice_len:])\n","  # print(np.argwhere(h_res_df.values[-slice_len:] != comp_df_.iloc[:, :4].values[-slice_len:]))\n","  # print()\n","  break"]},{"cell_type":"markdown","metadata":{"id":"jTN3M842Suzl"},"source":["## concat & save new res_df"]},{"cell_type":"markdown","metadata":{"id":"MlFkpO1MSuzl"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"U-3QkfbFSuzl"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","dict_name = \"2021-07-01 ETHUSDT_bb15m_backi2_res_dfs.pkl\"\n","\n","#     load with pickle    #\n","with open(save_path + dict_name, 'rb') as f:\n","  saved_res_df_dict = pickle.load(f)\n","\n","print(dict_name, \"loaded !\")\n","res_df_files = os.listdir(save_path)\n","res_df_files.reverse()\n","\n","print(res_df_files)\n","\n","res_df_dict = {}\n","\n","base_postfix = '_bb15m_backi2.xlsx'\n","new_postfix = '_st1h_backi2.xlsx'\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for k_i, key in enumerate(res_df_files):\n","\n","  if '2021-07-01'.upper() not in key:\n","  # if '2021-10-10'.upper() not in key:\n","    continue\n","\n","  # if \"link\".upper() not in key:\n","  # if \"btc\".upper() not in key:\n","  #   continue\n","\n","  if new_postfix not in key:\n","    continue\n","\n","  # if key in \n","\n","  if sample_cnt == max_cnt:\n","    dict_name = \"%s_res_dfs.pkl\" % key.split(\".\")[0]\n","    print(\"dict_name :\", dict_name)\n","\n","  base_df = saved_res_df_dict[key.replace(new_postfix, base_postfix)]\n","  # base_df = pd.read_excel(save_path + key.replace(new_postfix, base_postfix), index_col=0)  \n","  res_df = pd.read_excel(save_path + key, index_col=0)  \n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  droped_new_res_df.head()\n","  # break\n","\n","  # res_df_dict[key] = res_df\n","  res_df_dict[key] = droped_new_res_df\n","  print(key, \"saved to dict !\")\n","\n","  #     save with pickle    #\n","  with open(save_path + dict_name, 'wb') as f:\n","    pickle.dump(res_df_dict, f)\n","\n","  sample_cnt -= 1\n","\n","  if sample_cnt <= 0:\n","    break\n"]},{"cell_type":"markdown","metadata":{"id":"t1E_eAyPSuzm"},"source":["### new col to latest feather (1m_indi. only)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xyI5NrM7Suzm"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","cum_dir = \"cum\"\n","\n","new_dir_path = \"rsi_backi2\"\n","base_dir_path = \"bbdc3m_backi2\"\n","\n","new_date = '2021-11-17'\n","\n","\n","\n","#     load ftr list    #\n","base_save_path = os.path.join(save_path, base_dir_path, \"concat/cum\", new_date)\n","new_save_path = base_save_path.replace(base_dir_path, new_dir_path)\n","\n","#     save to (new) cum dir    #\n","#      1. if dir. not exists, makedir\n","os.makedirs(new_save_path, exist_ok=True)\n","\n","ftr_list = [s for s in os.listdir(base_save_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_save_path, key), columns=None, use_threads=True).set_index(\"index\")\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  droped_new_res_df = sync_check(base_df)\n","\n","  # new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # # new_res_df.head()\n","\n","  # intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  # droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break\n","\n","  droped_new_res_df.reset_index().to_feather(os.path.join(new_save_path, key), compression='lz4')\n","\n","  print(os.path.join(new_save_path, key), \"saved !\")\n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"markdown","metadata":{"id":"nUs4fjVHSuzl"},"source":["### feather ver. (col concat)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2001,"status":"ok","timestamp":1642739652513,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"6cu-Y82iSuzl","outputId":"273507b8-0d33-48b5-d9c5-00547688ef73"},"outputs":[{"name":"stdout","output_type":"stream","text":["['2022-01-10 ETHUSDT.ftr']\n","./candlestick_concated/res_df/st3m_backi2/concat/cum/2022-01-10/2022-01-10 ETHUSDT.ftr saved !\n"]}],"source":["new_dir_path = \"st3m_backi2\"\n","base_dir_path = \"bb1d_backi2\"\n","\n","# new_date = \"2021-11-17\"\n","new_date = \"2022-01-10\"\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","save_path = './candlestick_concated/res_df/'\n","save_path = os.path.join(save_path, new_dir_path, \"concat/cum\", new_date)   \n","# save_path = os.path.join(save_path, new_dir_path, \"concat/non_cum\", new_date)   # row col 하려면 concat 맞음, noncum 사용\n","os.makedirs(save_path, exist_ok=True)\n","\n","\n","#     load ftr list    #\n","# ftr_list = [s for s in os.listdir(os.path.join(save_path, new_dir_path)) if \"ftr\" in s]\n","\n","noncat_path = save_path.replace(\"concat/\", \"noncat/\")\n","ftr_list = [s for s in os.listdir(noncat_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","  try:\n","\n","    #       read from base postfix's directory    #\n","    base_df = pd.read_feather(os.path.join(save_path.replace(new_dir_path, base_dir_path), key), columns=None, use_threads=True).set_index(\"index\")\n","    res_df = pd.read_feather(os.path.join(noncat_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","    # print(base_df.head())\n","    # print(res_df.head())\n","    # break\n","\n","    new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","    # new_res_df.head()\n","\n","    droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","    # droped_new_res_df.head()\n","    # break\n","\n","    droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","    # res_df_dict[key] = res_df\n","    # res_df_dict[key] = droped_new_res_df\n","    print(os.path.join(save_path, key), \"saved !\")\n","  \n","  except Exception as e:\n","    print(\"error occured ! :\", e)\n","  \n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4GiF2NJPSuzm"},"outputs":[],"source":["print(*droped_new_res_df.columns, sep = '\\n')"]},{"cell_type":"markdown","metadata":{"id":"WVAKq3i8Suzm"},"source":["### feather ver. (row concat) , database cum 도 호환가능"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7893,"status":"ok","timestamp":1645188189702,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"XG2p9OhhSuzm","outputId":"e67874ba-0710-4f38-966f-5ea7d42403cb"},"outputs":[{"output_type":"stream","name":"stdout","text":["['2022-02-17 ETHUSDT_1m.ftr']\n","                            open     high     low    close  volume\n","index                                                             \n","2019-11-27 16:45:59.999   146.00   146.00   146.0   146.00   0.010\n","2022-02-17 10:29:59.999  3146.86  3147.22  3146.4  3146.76  26.727\n","continuity checked !\n","./candlestick_concated/database_bn/cum/2022-02-17/2022-02-17 ETHUSDT_1m.ftr saved !\n"]}],"source":["save_path = './candlestick_concated/res_df/'        # cols 추가된 cum db 에 new_row's cols 기준으로 합치는 경우\n","save_path = './candlestick_concated/database_bn/'   # ohlcv cum db 만들 경우\n","\n","base_date = '2022-01-10'\n","new_date = '2022-02-17'\n","\n","#     load ftr list    #\n","if \"database\" in save_path:\n","  base_dir_path = \"\"\n","  new_dir_path = \"\"\n","  concat_dir = \"\"\n","else:\n","  base_dir_path = \"sar_backi2\"\n","  new_dir_path = \"bb4h_backi2\"  # dir_path 가 base / new 서로 달라질 수 있어서 분할함\n","  concat_dir = \"concat\"\n","\n","base_date_path = os.path.join(save_path, base_dir_path, concat_dir, \"cum\", base_date)      # 기존 cum db 와 new_date db 를 cum 진행\n","# base_date_path = os.path.join(save_path, base_dir_path, concat_dir, \"non_cum\", base_date)    # non_cum db 와 new_date db 를 cum 진행\n","\n","# new_date_path = os.path.join(save_path, new_dir_path, concat_dir, \"cum\", new_date)      # 상황별로 직접 선택해야할 듯\n","new_date_path = os.path.join(save_path, new_dir_path, concat_dir, \"non_cum\", new_date)\n","\n","\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","save_path = new_date_path.replace(\"non_cum\", \"cum\")   # non_cum 아니여도 무관\n","os.makedirs(save_path, exist_ok=True)   # noncat / concat 두가지 경우 존재가능할 것\n","# os.makedirs(os.path.join(save_path, dir_path, \"noncat/cum\", new_date), exist_ok=True)\n","\n","\n","ftr_list = [s for s in os.listdir(new_date_path) if \"ftr\" in s]\n","exist_list = os.listdir(save_path)\n","print(ftr_list)\n","# break\n","\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:   # date rejection\n","    continue\n","  if '1m' not in key:  # itv rejection\n","    continue\n","\n","  # if key in exist_list:\n","  #   print(key, \"already exist !\")\n","  #   continue\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_date_path, key.replace(new_date, base_date)), columns=None, use_threads=True).set_index(\"index\")   # key 에 new_date 담겨있음\n","  res_df = pd.read_feather(os.path.join(new_date_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break  \n","  \n","  print(droped_new_res_df.iloc[[0, -1]])  \n","\n","  # ------------- verify df continuity directly itv by itv ------------- #\n","  true_continue = True\n","  if \"_\" in key:\n","\n","    interval = key.split(\".\")[0].split(\"_\")[-1] \n","    itv_num = to_itvnum(interval)\n","\n","    # verified_df = consecutive_df(droped_new_res_df, to_itvnum(interval))\n","    # verified_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","    # res_df_dict[key] = res_df\n","    # res_df_dict[key] = droped_new_res_df  \n","\n","    np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","    ideal_ts_gap = 60 * itv_num\n","\n","    for ts_i in range(len(np_idx_ts)):\n","      \n","      if ts_i != 0:\n","        ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","\n","        if ts_gap > ideal_ts_gap or ts_gap < ideal_ts_gap:\n","        # if ts_gap == ideal_ts_gap:\n","          print(droped_new_res_df.index[ts_i - 1])\n","          print(droped_new_res_df.index[ts_i])\n","          # print(ts_gap)\n","          print(\"------------------ unideal ts_gap ------------------\")\n","          true_continue = False\n","\n","    print(\"continuity checked !\")\n","\n","  if true_continue:\n","    droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","  print(os.path.join(save_path, key), \"saved !\")\n","  \n"]},{"cell_type":"markdown","metadata":{"id":"L7l5CTJfSuzn"},"source":["### check continuity"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nGzMGyC3Suzn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1643987442996,"user_tz":-540,"elapsed":5408,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"4fface63-62d9-4e2a-e22d-bdd26f428e0e"},"outputs":[{"output_type":"stream","name":"stdout","text":["                             open    high       low     close   volume\n","index                                                                 \n","2020-09-14 16:00:59.999    3.2002    4.91    3.2002    3.2745  11567.0\n","2022-02-04 23:57:59.999  103.7500  103.75  103.6000  103.6000   6427.0\n","[1.60009926e+09 1.60009932e+09 1.60009938e+09 1.60009944e+09\n"," 1.60009950e+09 1.60009956e+09 1.60009962e+09 1.60009968e+09\n"," 1.60009974e+09 1.60009980e+09]\n"]}],"source":["# print(droped_new_res_df.columns)\n","\n","print(droped_new_res_df.iloc[[0, -1]])\n","\n","np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","\n","print(np_idx_ts[:10])\n","for ts_i in range(len(np_idx_ts)):\n","  \n","  if ts_i != 0:\n","    ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","\n","    if ts_gap > 60 or ts_gap < 60:\n","\n","      print(\"invalid ts_gap found !\")\n","    # if ts_gap == 60:\n","      print(droped_new_res_df.index[ts_i - 1])\n","      print(droped_new_res_df.index[ts_i])\n","      # print(ts_gap)\n","      print()\n"]},{"cell_type":"markdown","metadata":{"id":"x_XGJqBi8Jex"},"source":["### check length of front missing value + middle_data non_missing validity"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":311,"status":"ok","timestamp":1641887318959,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"yRNwqVeAu8X8","outputId":"fb236bde-4527-4bc7-eac4-4bee42532c5a"},"outputs":[{"name":"stdout","output_type":"stream","text":["2.167361111111111\n","38\n"]}],"source":["#       1. new_date 의 시작 timeidx 와 base_date end timeidx 의 최소 days' gap     #\n","#       2. new_date 의 시작 부분 indi. value 는 np.nan 으로 채워질 거기 때문에 계산해야함    #\n","\n","df_count = droped_new_res_df.count()\n","len_missing = df_count.max() - df_count.min()\n","print(len_missing / 1440)\n","\n","#       3. \n","missing_sliced_df = droped_new_res_df.iloc[len_missing:]\n","df_count2 = missing_sliced_df.count()\n","# print(df_count2)\n","print((df_count2.max() - df_count2.min()))    # this value should be zero !\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"AY7E2_hTBsyM"},"outputs":[],"source":["# df_count2.index[df_count2.argmin()]\n","# missing_sliced_df.head(5)\n","\n","stay_missed = np.sum(pd.isnull(missing_sliced_df), axis=0)\n","print(stay_missed)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"p9yqewOw9g33"},"outputs":[],"source":["stay_missed_cols = stay_missed[stay_missed != 0].index\n","\n","for sm_col in stay_missed_cols:\n","  \n","  row_idx = np.argwhere(pd.isnull(missing_sliced_df[sm_col].values))\n","\n","  plt.figure(figsize=(3,3))\n","  plt.plot(row_idx)\n","  plt.ylim(0, len(missing_sliced_df))\n","  plt.title(sm_col)\n","\n","  plt.show()\n"]},{"cell_type":"markdown","source":["## legacy"],"metadata":{"id":"MSUY4nnku3s9"}},{"cell_type":"markdown","source":["### mv files"],"metadata":{"id":"epgS5Dksu-HX"}},{"cell_type":"code","source":["df_path = './candlestick_concated/survey_df_v2'\n","files_ = os.listdir(df_path)"],"metadata":{"id":"aJcVpEdrslA5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dirs = [file_ for file_ in files_ if not file_.endswith('.ftr')]\n","files = [file_ for file_ in files_ if file_.endswith('.ftr')]"],"metadata":{"id":"cEKyEYkotFDy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dirs"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IgM79tcxtPVZ","executionInfo":{"status":"ok","timestamp":1644111921194,"user_tz":-540,"elapsed":4,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"84305b35-eb52-49fc-d5fd-fdbc64cc8679"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['2022-01-10 ETHUSDT', '2022-01-10 ETHUSDT_all', '2022-02-04 SOLUSDT']"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["def move_fn(dir_, file_):\n","  src_path = os.path.join(df_path, file_)\n","  dst_path = os.path.join(df_path, dir_, file_)\n","  shutil.move(src_path, dst_path)\n","  print(\"moved to {}\".format(dst_path))\n","\n","_ = [move_fn('2022-01-10 ETHUSDT_all', file_) for file_ in files if 'eth'.upper() in file_]\n","# sols\n"],"metadata":{"id":"M767iRtwtRQP"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Ci_jUnNTZbm9"},"source":["### load data (old)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":22503,"status":"ok","timestamp":1638246127510,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"_bXyS2yrZYC6","outputId":"b24a8a66-48b1-42b5-aa79-63f5a8542bac"},"outputs":[{"name":"stdout","output_type":"stream","text":["['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr']\n","['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 LTCUSDT.ftr']\n","['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 ETHUSDT.ftr']\n","['2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr']\n","['2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-08-31 SUSHIUSDT.xlsx', '2021-08-31 CVCUSDT.xlsx', '2021-08-31 BTSUSDT.xlsx', '2021-08-31 HOTUSDT.xlsx', '2021-08-31 ZRXUSDT.xlsx', '2021-08-31 QTUMUSDT.xlsx', '2021-08-31 IOTAUSDT.xlsx', '2021-08-31 BTCBUSD.xlsx', '2021-08-31 WAVESUSDT.xlsx', '2021-08-31 ADAUSDT.xlsx', '2021-08-31 LITUSDT.xlsx', '2021-08-31 XTZUSDT.xlsx', '2021-08-31 BNBUSDT.xlsx', '2021-08-31 AKROUSDT.xlsx', '2021-08-31 HNTUSDT.xlsx', '2021-08-31 ETCUSDT.xlsx', '2021-08-31 XMRUSDT.xlsx', '2021-08-31 YFIUSDT.xlsx', '2021-08-31 ETHUSDT.xlsx', '2021-08-31 ALICEUSDT.xlsx', '2021-08-31 ALPHAUSDT.xlsx', '2021-08-31 SFPUSDT.xlsx', '2021-08-31 REEFUSDT.xlsx', '2021-08-31 BATUSDT.xlsx', '2021-08-31 DOGEUSDT.xlsx', '2021-08-31 TRXUSDT.xlsx', '2021-08-31 RLCUSDT.xlsx', '2021-08-31 BTCSTUSDT.xlsx', '2021-08-31 STORJUSDT.xlsx', '2021-08-31 SNXUSDT.xlsx', '2021-08-31 XLMUSDT.xlsx', '2021-08-31 NEOUSDT.xlsx', '2021-08-31 UNFIUSDT.xlsx', '2021-08-31 SANDUSDT.xlsx', '2021-08-31 DASHUSDT.xlsx', '2021-08-31 KAVAUSDT.xlsx', '2021-08-31 RUNEUSDT.xlsx', '2021-08-31 CTKUSDT.xlsx', '2021-08-31 LINKUSDT.xlsx', '2021-08-31 CELRUSDT.xlsx', '2021-08-31 RSRUSDT.xlsx', '2021-08-31 DGBUSDT.xlsx', '2021-08-31 SKLUSDT.xlsx', '2021-08-31 RENUSDT.xlsx', '2021-08-31 TOMOUSDT.xlsx', '2021-08-31 MTLUSDT.xlsx', '2021-08-31 LTCUSDT.xlsx', '2021-08-31 DODOUSDT.xlsx', '2021-08-31 EGLDUSDT.xlsx', '2021-08-31 KSMUSDT.xlsx', '2021-08-31 ONTUSDT.xlsx', '2021-08-31 VETUSDT.xlsx', '2021-08-31 TRBUSDT.xlsx', '2021-08-31 MANAUSDT.xlsx', '2021-08-31 COTIUSDT.xlsx', '2021-08-31 CHRUSDT.xlsx', '2021-08-31 ETHUSDT_210924.xlsx', '2021-08-31 BAKEUSDT.xlsx', '2021-08-31 GRTUSDT.xlsx', '2021-08-31 FLMUSDT.xlsx', '2021-08-31 EOSUSDT.xlsx', '2021-08-31 OGNUSDT.xlsx', '2021-08-31 SCUSDT.xlsx', '2021-08-31 BALUSDT.xlsx', '2021-08-31 STMXUSDT.xlsx', '2021-08-31 BTTUSDT.xlsx', '2021-08-31 LUNAUSDT.xlsx', '2021-08-31 DENTUSDT.xlsx', '2021-08-31 KNCUSDT.xlsx', '2021-08-31 SRMUSDT.xlsx', '2021-08-31 ENJUSDT.xlsx', '2021-08-31 ZENUSDT.xlsx', '2021-08-31 ATOMUSDT.xlsx', '2021-08-31 NEARUSDT.xlsx', '2021-08-31 BCHUSDT.xlsx', '2021-08-31 IOSTUSDT.xlsx', '2021-08-31 HBARUSDT.xlsx', '2021-08-31 ZECUSDT.xlsx', '2021-08-31 1000SHIBUSDT.xlsx', '2021-08-31 TLMUSDT.xlsx', '2021-08-31 BZRXUSDT.xlsx', '2021-08-31 ETHBUSD.xlsx', '2021-08-31 AAVEUSDT.xlsx', '2021-08-31 GTCUSDT.xlsx', '2021-08-31 ALGOUSDT.xlsx', '2021-08-31 ICPUSDT.xlsx', '2021-08-31 BTCUSDT_210924.xlsx', '2021-08-31 LRCUSDT.xlsx', '2021-08-31 AVAXUSDT.xlsx', '2021-08-31 MATICUSDT.xlsx', '2021-08-31 1INCHUSDT.xlsx', '2021-08-31 MKRUSDT.xlsx', '2021-08-31 THETAUSDT.xlsx', '2021-08-31 UNIUSDT.xlsx', '2021-08-31 LINAUSDT.xlsx', '2021-08-31 RVNUSDT.xlsx', '2021-08-31 FILUSDT.xlsx', '2021-08-31 NKNUSDT.xlsx', '2021-08-31 DEFIUSDT.xlsx', '2021-08-31 COMPUSDT.xlsx', '2021-08-31 BTCDOMUSDT.xlsx', '2021-08-31 SOLUSDT.xlsx', '2021-08-31 BTCUSDT.xlsx', '2021-08-31 OMGUSDT.xlsx', '2021-08-31 ICXUSDT.xlsx', '2021-08-31 BLZUSDT.xlsx', '2021-08-31 FTMUSDT.xlsx', '2021-08-31 YFIIUSDT.xlsx', '2021-08-31 KEEPUSDT.xlsx', '2021-08-31 BANDUSDT.xlsx', '2021-08-31 XRPUSDT.xlsx', '2021-08-31 SXPUSDT.xlsx', '2021-08-31 CRVUSDT.xlsx', '2021-08-31 BELUSDT.xlsx', '2021-08-31 DOTUSDT.xlsx', '2021-08-31 XEMUSDT.xlsx', '2021-08-31 ONEUSDT.xlsx', '2021-08-31 ZILUSDT.xlsx', '2021-08-31 AXSUSDT.xlsx', '2021-08-31 OCEANUSDT.xlsx', '2021-08-31 CHZUSDT.xlsx', '2021-08-31 ANKRUSDT.xlsx', '2021-08-31 SUSHIUSDT_res_dfs.pkl', '2021-07-01 ADAUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr']\n","['2021-07-01 BTCUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr']\n","['2021-02-07 BTC.xlsx', '2021-02-07 ETH.xlsx', '2021-02-11 BCHUSDT.xlsx', '2021-02-11 XRPUSDT.xlsx', '2021-02-11 EOSUSDT.xlsx', '2021-02-11 LTCUSDT.xlsx', '2021-02-11 ETCUSDT.xlsx', '2021-02-11 LINKUSDT.xlsx', '2021-02-11 XLMUSDT.xlsx', '2021-02-11 ADAUSDT.xlsx', '2021-02-11 XMRUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr']\n","['2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx']\n"]}],"source":["interval = '1m'\n","date_path = './candlestick_concated/%s/quant_v2/' % interval\n","file_list = os.listdir(date_path)\n","print((file_list))\n","\n","interval2 = '3m'\n","date_path2 = './candlestick_concated/%s/quant_v2/' % interval2\n","file_list2 = os.listdir(date_path2)\n","print((file_list2))\n","\n","interval3 = '5m'\n","date_path3 = './candlestick_concated/%s/quant_v2/' % interval3\n","file_list3 = os.listdir(date_path3)\n","print((file_list3))\n","\n","interval4 = '15m'\n","date_path4 = './candlestick_concated/%s/quant_v2/' % interval4\n","file_list4 = os.listdir(date_path4)\n","print((file_list4))\n","\n","interval5 = '30m'\n","date_path5 = './candlestick_concated/%s/quant_v2/' % interval5\n","file_list5 = os.listdir(date_path5)\n","print((file_list5))\n","\n","interval6 = '1h'\n","date_path6 = './candlestick_concated/%s/quant_v2/' % interval6\n","file_list6 = os.listdir(date_path6)\n","print((file_list6))\n","\n","interval7 = '4h'\n","date_path7 = './candlestick_concated/%s/quant_v2/' % interval7\n","file_list7 = os.listdir(date_path7)\n","print((file_list7))\n","\n","interval8 = '1d'\n","date_path8 = './candlestick_concated/%s/quant_v2/' % interval8\n","file_list8 = os.listdir(date_path8)\n","print((file_list8))"]},{"cell_type":"markdown","metadata":{"id":"M8-EChy0VsDr"},"source":["## cudf"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":414,"status":"ok","timestamp":1638754008241,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"b09qAb1sVtRP","outputId":"3a824202-064a-4544-b791-ffc777bb3f9c"},"outputs":[{"name":"stdout","output_type":"stream","text":["usage: conda [-h] [-V] command ...\n","conda: error: unrecognized arguments: -t=/content/notebooks\n"]}],"source":["# !conda install -c rapidsai-nightly -c nvidia -c numba -c conda-forge \\\n","#     cudf python=3.7 cudatoolkit=11.1 -t=$nb_path"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":413,"status":"ok","timestamp":1638754715310,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"Jnz6i7ZqRnb0","outputId":"207bc57b-a17a-4f67-fb26-24e46e2c6e26"},"outputs":[{"name":"stdout","output_type":"stream","text":["***********************************************************************\n","Woo! Your instance has the right kind of GPU, a Tesla P100-PCIE-16GB!\n","***********************************************************************\n","\n"]}],"source":["# !git clone https://github.com/rapidsai/rapidsai-csp-utils.git\n","!python rapidsai-csp-utils/colab/env-check.py"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4sKA_9Dbg4s2"},"outputs":[],"source":["# This will update the Colab environment and restart the kernel.  Don't run the next cell until you see the session crash.\n","!bash rapidsai-csp-utils/colab/update_gcc.sh\n","import os\n","os._exit(00)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"d1C4pNiBhYHX"},"outputs":[],"source":["# This will install CondaColab.  This will restart your kernel one last time.  Run this cell by itself and only run the next cell once you see the session crash.\n","import condacolab\n","condacolab.install()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":414,"status":"ok","timestamp":1638754863073,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"iGx3ACTvZqck","outputId":"e8379cc4-c325-4fe0-ac46-5fbbd7d38829"},"outputs":[{"name":"stdout","output_type":"stream","text":["✨🍰✨ Everything looks OK!\n"]}],"source":["# you can now run the rest of the cells as normal\n","import condacolab\n","condacolab.check()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oR8s7U8c7C28","outputId":"22be2731-fae1-45fc-f310-e48f60774bb2"},"outputs":[{"name":"stdout","output_type":"stream","text":["Installing RAPIDS Stable 21.10\n","Starting the RAPIDS install on Colab.  This will take about 15 minutes.\n","Collecting package metadata (current_repodata.json): ...working... done\n","Solving environment: ...working... WARNING conda.core.solve:_add_specs(611): pinned spec cudatoolkit=11.1 conflicts with explicit specs.  Overriding pinned spec.\n","failed with initial frozen solve. Retrying with flexible solve.\n","Solving environment: ...working... WARNING conda.core.solve:_add_specs(611): pinned spec cudatoolkit=11.1 conflicts with explicit specs.  Overriding pinned spec.\n","failed with repodata from current_repodata.json, will retry with next repodata source.\n","Collecting package metadata (repodata.json): ...working... done\n"]}],"source":["# Installing RAPIDS is now 'python rapidsai-csp-utils/colab/install_rapids.py <release> <packages>'\n","# The <release> options are 'stable' and 'nightly'.  Leaving it blank or adding any other words will default to stable.\n","# The <packages> option are default blank or 'core'.  By default, we install RAPIDSAI and BlazingSQL.  The 'core' option will install only RAPIDSAI and not include BlazingSQL, \n","!python rapidsai-csp-utils/colab/install_rapids.py stable\n","import os\n","os.environ['NUMBAPRO_NVVM'] = '/usr/local/cuda/nvvm/lib64/libnvvm.so'\n","os.environ['NUMBAPRO_LIBDEVICE'] = '/usr/local/cuda/nvvm/libdevice/'\n","os.environ['CONDA_PREFIX'] = '/usr/local'"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kWsxi4ZpKtGt"},"outputs":[],"source":["import shutil\n","import sys\n","\n","colab_env = \"/usr/lib\"\n","\n","rapids_path = os.path.join(current_path, \"rapidsai-csp-utils/lib\")\n","rapids_libs = os.listdir(rapids_path)\n","print(rapids_libs)\n","# break\n","\n","for lib_ in rapids_libs:\n","  try:\n","    shutil.copy(os.path.join(rapids_path, lib_), os.path.join(colab_env, lib_))\n","    sys.path.append(os.path.join(colab_env, lib_))\n","    print(\"copied to\" + os.path.join(colab_env, lib_))\n","  except Exception as e:\n","    print(e)"]},{"cell_type":"markdown","metadata":{"id":"Iy76iO7gztne"},"source":["## move legacy files"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hMRht32Czwry"},"outputs":[],"source":["# print()\n","cur_dir_list = os.listdir('.')\n","for f in cur_dir_list:\n","  if 'legacy' in f :\n","    # print(f)\n","    if os.path.isdir(current_path + f,):\n","      continue\n","\n","    shutil.move(current_path + f, current_path + 'legacy/' + f)\n","    print(\"moved to\" + current_path + 'legacy/' +  f)"]},{"cell_type":"markdown","metadata":{"id":"5duWn8t4BRyv"},"source":["# hvp platform"]},{"cell_type":"markdown","metadata":{"id":"6HOjnZjSgzk1"},"source":["## load ftr_list"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":995,"status":"ok","timestamp":1645698620916,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"7FPBG5Qqg2jB","outputId":"436ffcce-4615-4749-e6d0-fe4c7b55b6a8"},"outputs":[{"output_type":"stream","name":"stdout","text":["['2022-01-10 ETHUSDT.ftr']\n"]}],"source":["save_path = './candlestick_concated/res_df/'\n","\n","dir_path = \"bb4h_backi2\"\n","dir_path = \"bb1d_backi2\"\n","date = \"2022-01-10\"\n","\n","ftr_path = os.path.join(save_path, dir_path, \"concat/cum\", date)\n","\n","#     load ftr list    #\n","ftr_list = [s for s in os.listdir(ftr_path) if \"ftr\" in s if date in s]\n","# ftr_list = [s for s in os.listdir(os.path.join(save_path, dir_path)) if \"ftr\" in s if date in s]\n","print(ftr_list)"]},{"cell_type":"markdown","metadata":{"id":"xpyP5t8Ht_pE","jp-MarkdownHeadingCollapsed":true,"tags":[]},"source":["### calc recursive indi's min_period"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":47574,"status":"ok","timestamp":1642724608792,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"N1Hbm4OA4Tkk","outputId":"63604c28-1ea4-4b3f-a949-4eb3ca321618"},"outputs":[{"output_type":"stream","name":"stdout","text":["target 300000 (300000) -> 35 18185123158722\n","250 (250) -> 35 18185117654426\n","\n","47.042640686035156\n"]}],"source":["ticker_prcn = get_precision_by_price(res_df.close.iloc[-1]) + 2\n","\n","target_len = 300000\n","slice_len_list = list(range(50, 10000, 100))\n","slice_len_list.insert(0, target_len)\n","\n","start_0 = time.time()\n","# prev_int_, prev_pnts_ = None, None\n","offset = 1\n","\n","for sl_idx, sample_len in enumerate(slice_len_list):\n","\n","  sample_df = res_df.iloc[-sample_len -offset:-offset]\n","  sample_len2 = sample_len\n","\n","  # --------- input using indi.s --------- #\n","  # res = ema_v0(sample_df['close'], 190)\n","  res = rsi(sample_df, 14)\n","\n","    #    to_htf()    #\n","  # df_5T = to_htf(sample_df, itv_='5T', offset='1h')\n","  # sample_len2 = len(df_5T)\n","\n","  # # --------- input using htf_indi. --------- #\n","  # res = ema(df_5T['close'], 195)\n","  # -------------------------------------- #\n","\n","  res_last_row = res.iloc[-1]\n","  if pd.isnull(res_last_row):\n","    continue\n","\n","  # print(res_last_row)\n","  # break\n","\n","  # sample_df = sample_df.join(to_lower_tf_v2(sample_df, df_5T, [-1]), how='inner')\n","\n","\n","  #   자리수 분할 계산    #\n","  int_, points_ = str(res_last_row).split('.')\n","  pnts_ = points_[:ticker_prcn]\n","\n","  if sl_idx == 0:\n","    target_int_ = int_\n","    target_pnts_ = pnts_\n","    print(\"target {} ({}) -> {} {}\".format(sample_len, sample_len2, int_, points_))\n","\n","  else:\n","    if target_int_ == int_ and target_pnts_ == pnts_:\n","      # print(sample_len, \"({})\".format(sample_len2), '->', int_, pnts_, end='\\n\\n')\n","      print(\"{} ({}) -> {} {}\\n\".format(sample_len, sample_len2, int_, points_))\n","      break\n","\n","print(time.time() - start_0)  # (1301)(1361)(1301)"]},{"cell_type":"markdown","metadata":{"id":"rrIGjmUzqU-D","tags":[]},"source":["### import utils & config"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"SeJan_0t95yL","executionInfo":{"status":"ok","timestamp":1645698622924,"user_tz":-540,"elapsed":2010,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"outputs":[],"source":["frame_ver = \"0114_htf\"\n","ID_arr = np.array(['v3', 'v5_2'])\n","\n","utils_public_name = \"{}.utils.{}_utils_public\".format(strat_pkg, frame_ver)\n","utils_public_lib = importlib.import_module(utils_public_name)\n","utils_public = utils_public_lib   # temporary\n","\n","u_name_list = [\"{}.utils.{}_utils_{}\".format(strat_pkg, frame_ver, id_) for id_ in ID_arr]\n","# utils_list_ = \n","utils_arr = np.array([importlib.import_module(u_name) for u_name in u_name_list])\n","# [utils1, utils2, utils3] = utils_list   # temporary\n","\n","config_name_list = [\"{}_config_{}.json\".format(frame_ver, id_) for id_ in ID_arr]\n","cfg_path_list = [os.path.join(current_path, strat_pkg, \"config\", name_) for name_ in config_name_list]\n","cfg_file_list = [open(cfg_path) for cfg_path in cfg_path_list]\n","# config_list_ = \n","config_arr = np.array([EasyDict(json.load(cfg_)) for cfg_ in cfg_file_list])\n","# [config1, config2, config3] = config_list   # temporary\n","#       opened files should be closed --> 닫지 않으면 reopen 시 error occurs         #\n","_ = [cfg_.close() for cfg_ in cfg_file_list]\n","\n","show_plot = 1   # idep's var - do not touch"]},{"cell_type":"markdown","metadata":{"id":"leSQlImg4_9L","jp-MarkdownHeadingCollapsed":true,"tags":[]},"source":["#### utils_"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"CB2yZdQ95Cdg","executionInfo":{"status":"ok","timestamp":1645698623420,"user_tz":-540,"elapsed":499,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"outputs":[],"source":["# from funcs.funcs_indicator_candlescore import *\n","# import numpy as np\n","\n","\n","def enlist_rtc(res_df, config, np_timeidx):\n","\n","    strat_version = config.strat_version\n","\n","    res_df['short_rtc_1_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.point.outg_itv1]\n","    res_df['short_rtc_0_{}'.format(strat_version)] = res_df['bb_upper_%s' % config.loc_set.point.outg_itv0]\n","\n","    res_df['long_rtc_1_{}'.format(strat_version)] = res_df['bb_upper_%s' % config.loc_set.point.outg_itv1]\n","    res_df['long_rtc_0_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.point.outg_itv0]\n","\n","    #      entry reversion    #\n","    if config.ep_set.short_entry_score > 0:\n","        short_rtc_1_copy = res_df['short_rtc_1_{}'.format(strat_version)].copy()\n","        res_df['short_rtc_1_{}'.format(strat_version)] = res_df['long_rtc_1_{}'.format(strat_version)]\n","        res_df['long_rtc_1_{}'.format(strat_version)] = short_rtc_1_copy\n","\n","        short_rtc_0_copy = res_df['short_rtc_0_{}'.format(strat_version)].copy()\n","        res_df['short_rtc_0_{}'.format(strat_version)] = res_df['long_rtc_0_{}'.format(strat_version)]\n","        res_df['long_rtc_0_{}'.format(strat_version)] = short_rtc_0_copy\n","\n","    res_df['short_rtc_gap_{}'.format(strat_version)] = abs(\n","        res_df['short_rtc_0_{}'.format(strat_version)] - res_df['short_rtc_1_{}'.format(strat_version)])\n","    res_df['long_rtc_gap_{}'.format(strat_version)] = abs(\n","        res_df['long_rtc_1_{}'.format(strat_version)] - res_df['long_rtc_0_{}'.format(strat_version)])\n","\n","    res_df['h_short_rtc_1_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.point.tpg_itv1]\n","    # res_df['h_short_rtc_1_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.point.tpg_itv]\n","    res_df['h_short_rtc_0_{}'.format(strat_version)] = res_df['bb_upper_%s' % config.loc_set.point.tpg_itv0]\n","\n","    res_df['h_long_rtc_1_{}'.format(strat_version)] = res_df['bb_upper_%s' % config.loc_set.point.tpg_itv1]\n","    # res_df['h_long_rtc_1_{}'.format(strat_version)] = res_df['dc_upper_%s' % config.loc_set.point.tpg_itv]\n","    res_df['h_long_rtc_0_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.point.tpg_itv0]\n","\n","    #      entry reversion    #\n","    if config.ep_set.short_entry_score > 0:\n","        h_short_rtc_1_copy = res_df['h_short_rtc_1_{}'.format(strat_version)].copy()\n","        res_df['h_short_rtc_1_{}'.format(strat_version)] = res_df['h_long_rtc_1_{}'.format(strat_version)]\n","        res_df['h_long_rtc_1_{}'.format(strat_version)] = h_short_rtc_1_copy\n","\n","        h_short_rtc_0_copy = res_df['h_short_rtc_0_{}'.format(strat_version)].copy()\n","        res_df['h_short_rtc_0_{}'.format(strat_version)] = res_df['h_long_rtc_0_{}'.format(strat_version)]\n","        res_df['h_long_rtc_0_{}'.format(strat_version)] = h_short_rtc_0_copy\n","\n","    res_df['h_short_rtc_gap_{}'.format(strat_version)] = abs(\n","        res_df['h_short_rtc_0_{}'.format(strat_version)] - res_df['h_short_rtc_1_{}'.format(strat_version)])\n","    res_df['h_long_rtc_gap_{}'.format(strat_version)] = abs(\n","        res_df['h_long_rtc_1_{}'.format(strat_version)] - res_df['h_long_rtc_0_{}'.format(strat_version)])\n","\n","    res_df['short_dtk_1_{}'.format(strat_version)] = res_df['bb_lower_%s' % config.loc_set.zone.dtk_itv]\n","    res_df['short_dtk_0_{}'.format(strat_version)] = res_df['dc_upper_%s' % config.loc_set.zone.dtk_itv]\n","\n","    res_df['long_dtk_1_{}'.format(strat_version)] = res_df['bb_upper_%s' % config.loc_set.zone.dtk_itv]\n","    res_df['long_dtk_0_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.zone.dtk_itv]\n","\n","    res_df['short_dtk_gap_{}'.format(strat_version)] = abs(\n","        res_df['short_dtk_0_{}'.format(strat_version)] - res_df['short_dtk_1_{}'.format(strat_version)])\n","    res_df['long_dtk_gap_{}'.format(strat_version)] = abs(\n","        res_df['long_dtk_1_{}'.format(strat_version)] - res_df['long_dtk_0_{}'.format(strat_version)])\n","\n","    return res_df\n","\n","\n","def enlist_tr(res_df, config, np_timeidx, mode='OPEN'):\n","    strat_version = config.strat_version\n","\n","    res_df['short_open_{}'.format(strat_version)] = np.zeros(len(res_df))\n","    res_df['long_open_{}'.format(strat_version)] = np.zeros(len(res_df))\n","    res_df['h_entry_{}'.format(strat_version)] = np.zeros(len(res_df))\n","\n","    # -------- set ep level -------- #\n","\n","    #       limit ver.     #\n","    # res_df['short_ep_{}'.format(strat_version)] = res_df['short_rtc_1_{}'.format(strat_version)] + res_df['short_rtc_gap_{}'.format(strat_version)] * config.tr_set.ep_gap\n","    # res_df['long_ep_{}'.format(strat_version)] = res_df['long_rtc_1_{}'.format(strat_version)] - res_df['long_rtc_gap_{}'.format(strat_version)] * config.tr_set.ep_gap\n","\n","    res_df['short_ep_{}'.format(strat_version)] = res_df['close'] + res_df[\n","        'h_short_rtc_gap_{}'.format(strat_version)] * config.tr_set.ep_gap\n","    res_df['long_ep_{}'.format(strat_version)] = res_df['close'] - res_df[\n","        'h_long_rtc_gap_{}'.format(strat_version)] * config.tr_set.ep_gap\n","\n","    if config.tr_set.c_ep_gap != \"None\":\n","        res_df['short_ep_org_{}'.format(strat_version)] = res_df['short_ep_{}'.format(strat_version)].copy()\n","        res_df['long_ep_org_{}'.format(strat_version)] = res_df['long_ep_{}'.format(strat_version)].copy()\n","\n","        res_df['short_ep2_{}'.format(strat_version)] = res_df['h_short_rtc_1_{}'.format(strat_version)] + res_df[\n","            'h_short_rtc_gap_{}'.format(strat_version)] * config.tr_set.c_ep_gap\n","        res_df['long_ep2_{}'.format(strat_version)] = res_df['h_long_rtc_1_{}'.format(strat_version)] - res_df[\n","            'h_long_rtc_gap_{}'.format(strat_version)] * config.tr_set.c_ep_gap\n","\n","    res_df['short_spread_ep_{}'.format(strat_version)] = res_df[\n","        'bb_lower_5m']  # + res_df['h_short_rtc_gap_{}'.format(strat_version)] * config.loc_set.zone.spread_ep_gap\n","    res_df['long_spread_ep_{}'.format(strat_version)] = res_df[\n","        'bb_upper_5m']  # - res_df'h_long_rtc_gap_{}'.format(strat_version)] * config.loc_set.zone.spread_ep_gap\n","\n","    #       market ver.     #\n","    if config.ep_set.entry_type == \"MARKET\":\n","        res_df['short_ep_{}'.format(strat_version)] = res_df['close']\n","        res_df['long_ep_{}'.format(strat_version)] = res_df['close']\n","\n","    # ---------------------------------------- short = -1 ---------------------------------------- #\n","    # ---------------- ep_time  ---------------- #\n","\n","    rsi_upper = 50 + config.loc_set.point.osc_band\n","    rsi_lower = 50 - config.loc_set.point.osc_band\n","\n","    res_df['rsi_%s_shift' % config.loc_set.point.exp_itv] = res_df['rsi_%s' % config.loc_set.point.exp_itv].shift(\n","        config.loc_set.point.tf_entry)\n","\n","    res_df['short_open_{}'.format(strat_version)] = np.where(\n","        (res_df['rsi_%s_shift' % config.loc_set.point.exp_itv] >= rsi_upper) &\n","        (res_df['rsi_%s' % config.loc_set.point.exp_itv] < rsi_upper)\n","        , res_df['short_open_{}'.format(strat_version)] - 1, res_df['short_open_{}'.format(strat_version)])\n","\n","    res_df['short_open_{}'.format(strat_version)] = np.where((res_df['short_open_{}'.format(strat_version)] < 0) &\n","                                                        (np_timeidx % config.loc_set.point.tf_entry == (\n","                                                                    config.loc_set.point.tf_entry - 1))\n","                                                        , res_df['short_open_{}'.format(strat_version)] - 1,\n","                                                        res_df['short_open_{}'.format(strat_version)])\n","\n","    res_df['h_entry_{}'.format(strat_version)] = np.where(\n","        # (res_df['open'] >= res_df['bb_lower_%s' % config.loc_set.zone.dtk_itv]) &\n","        (res_df['close'].shift(config.loc_set.point.htf_entry * 1) >= res_df[\n","            'bb_lower_%s' % config.loc_set.zone.dtk_itv]) &\n","        (res_df['close'] < res_df['bb_lower_%s' % config.loc_set.zone.dtk_itv]) &\n","        (np_timeidx % config.loc_set.point.htf_entry == (config.loc_set.point.htf_entry - 1))\n","        , res_df['h_entry_{}'.format(strat_version)] - 1, res_df['h_entry_{}'.format(strat_version)])\n","\n","    # ---------------------------------------- long = 1 ---------------------------------------- #\n","    # ---------------------- ep_time ---------------------- #\n","    res_df['long_open_{}'.format(strat_version)] = np.where(\n","        (res_df['rsi_%s_shift' % config.loc_set.point.exp_itv] <= rsi_lower) &\n","        (res_df['rsi_%s' % config.loc_set.point.exp_itv] > rsi_lower)\n","        , res_df['long_open_{}'.format(strat_version)] + 1, res_df['long_open_{}'.format(strat_version)])\n","\n","    res_df['long_open_{}'.format(strat_version)] = np.where((res_df['long_open_{}'.format(strat_version)] > 0) &\n","                                                        (np_timeidx % config.loc_set.point.tf_entry == (\n","                                                                    config.loc_set.point.tf_entry - 1))\n","                                                        , res_df['long_open_{}'.format(strat_version)] + 1,\n","                                                        res_df['long_open_{}'.format(strat_version)])\n","\n","    res_df['h_entry_{}'.format(strat_version)] = np.where(\n","        # (res_df['open'] <= res_df['bb_upper_%s' % config.loc_set.zone.dtk_itv]) &\n","        (res_df['close'].shift(config.loc_set.point.htf_entry * 1) <= res_df[\n","            'bb_upper_%s' % config.loc_set.zone.dtk_itv]) &\n","        (res_df['close'] > res_df['bb_upper_%s' % config.loc_set.zone.dtk_itv]) &\n","        (np_timeidx % config.loc_set.point.htf_entry == (config.loc_set.point.htf_entry - 1))\n","        , res_df['h_entry_{}'.format(strat_version)] + 1, res_df['h_entry_{}'.format(strat_version)])\n","\n","    # ------------------------------ rtc tp & out ------------------------------ #\n","    # --------------- bb rtc out --------------- #\n","\n","    if config.loc_set.point.outg_dc_period != \"None\":\n","        res_df['short_rtc_0_{}'.format(strat_version)] = res_df['high'].rolling(\n","            config.loc_set.point.outg_dc_period).max()\n","        res_df['long_rtc_0_{}'.format(strat_version)] = res_df['low'].rolling(config.loc_set.point.outg_dc_period).min()\n","\n","    res_df['short_out_{}'.format(strat_version)] = res_df['short_rtc_0_{}'.format(strat_version)] + res_df[\n","        'short_rtc_gap_{}'.format(strat_version)] * config.tr_set.out_gap\n","    res_df['long_out_{}'.format(strat_version)] = res_df['long_rtc_0_{}'.format(strat_version)] - res_df[\n","        'long_rtc_gap_{}'.format(strat_version)] * config.tr_set.out_gap\n","\n","    if config.tr_set.t_out_gap != \"None\":\n","        res_df['short_out_org_{}'.format(strat_version)] = res_df['short_out_{}'.format(strat_version)].copy()\n","        res_df['long_out_org_{}'.format(strat_version)] = res_df['long_out_{}'.format(strat_version)].copy()\n","\n","        res_df['short_out2_{}'.format(strat_version)] = res_df['short_rtc_0_{}'.format(strat_version)] + res_df[\n","            'short_rtc_gap_{}'.format(strat_version)] * config.tr_set.t_out_gap\n","        res_df['long_out2_{}'.format(strat_version)] = res_df['long_rtc_0_{}'.format(strat_version)] - res_df[\n","            'long_rtc_gap_{}'.format(strat_version)] * config.tr_set.t_out_gap\n","\n","    # ------------------------------ tp ------------------------------ #\n","    # --------------- bb rtc tp --------------- #\n","    res_df['short_tp_{}'.format(strat_version)] = res_df['h_short_rtc_1_{}'.format(strat_version)] - res_df[\n","        'h_short_rtc_gap_{}'.format(strat_version)] * config.tr_set.tp_gap\n","    res_df['long_tp_{}'.format(strat_version)] = res_df['h_long_rtc_1_{}'.format(strat_version)] + res_df[\n","        'h_long_rtc_gap_{}'.format(strat_version)] * config.tr_set.tp_gap\n","        \n","    return res_df\n"]},{"cell_type":"markdown","metadata":{"id":"HKdUKKl-483N","jp-MarkdownHeadingCollapsed":true,"tags":[]},"source":["#### utils_public"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"nzOYWA2kqZ0d","executionInfo":{"status":"ok","timestamp":1645698624503,"user_tz":-540,"elapsed":1086,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"outputs":[],"source":["# from funcs.funcs_indicator import *\n","# from funcs.funcs_trader import *\n","# import logging\n","# from ast import literal_eval\n","\n","sys_log = logging.getLogger()\n","\n","\n","class OrderSide:\n","    BUY = \"BUY\"\n","    SELL = \"SELL\"\n","    INVALID = None\n","\n","\n","def lvrg_set(res_df, config, open_side, ep_, out_, fee, limit_leverage=50):\n","    strat_version = config.strat_version\n","    if not pd.isnull(out_) and not config.lvrg_set.static_lvrg:\n","        if open_side == OrderSide.SELL:\n","            if strat_version in ['v3']:\n","                # config.lvrg_set.leverage = config.lvrg_set.target_pct / (out_ / ep_ - 1 - (fee + config.trader_set.market_fee))\n","                config.lvrg_set.leverage = config.lvrg_set.target_pct / (\n","                        out_ / ep_ - 1 - (fee + config.trader_set.market_fee))\n","\n","                #     zone 에 따른 c_ep_gap 를 고려 (loss 완화 방향) / 윗 줄은 수익 극대화 방향\n","                # config.lvrg_set.leverage = config.lvrg_set.target_pct / (out_ / res_df['short_ep_org'].iloc[ep_j] - 1 - (fee + config.trader_set.market_fee))\n","            elif strat_version in ['v5_2', 'v7_3']:\n","                # config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(ep_ / out_ - 1 - (fee + config.trader_set.market_fee))\n","                config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(\n","                    ep_ / out_ - 1 - (fee + config.trader_set.market_fee))\n","                # config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(res_df['short_ep_org'].iloc[ep_j] / out_ - 1 - (fee + config.trader_set.market_fee))\n","        else:\n","            #   윗 phase 는 min_pr 의 오차가 커짐\n","            if strat_version in ['v3']:\n","                # config.lvrg_set.leverage = config.lvrg_set.target_pct / (ep_ / out_ - 1 - (fee + config.trader_set.market_fee))\n","                config.lvrg_set.leverage = config.lvrg_set.target_pct / (\n","                        ep_ / out_ - 1 - (fee + config.trader_set.market_fee))\n","                # config.lvrg_set.leverage = config.lvrg_set.target_pct / (res_df['long_ep_org'].iloc[ep_j] / out_ - 1 - (fee + config.trader_set.market_fee))\n","            elif strat_version in ['v5_2', 'v7_3']:\n","                # config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(out_ / ep_ - 1 - (fee + config.trader_set.market_fee))\n","                config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(\n","                    out_ / ep_ - 1 - (fee + config.trader_set.market_fee))\n","                # config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(out_ / res_df['long_ep_org'].iloc[ep_j] - 1 - (fee + config.trader_set.market_fee))\n","\n","    if not config.lvrg_set.allow_float:\n","        config.lvrg_set.leverage = int(config.lvrg_set.leverage)\n","\n","    # ------------ leverage rejection ------------ #\n","    #       Todo - return None ? -> 1 (일단 임시로 수정함)\n","    if config.lvrg_set.leverage < 1 and config.lvrg_set.lvrg_rejection:\n","        return 1\n","    config.lvrg_set.leverage = min(limit_leverage, max(config.lvrg_set.leverage, 1))\n","\n","    return config.lvrg_set.leverage\n","\n","\n","def sync_check(df_, config, order_side=\"OPEN\", row_slice=True):\n","    try:\n","        make_itv_list = [m_itv.replace('m', 'T') for m_itv in literal_eval(config.trader_set.itv_list)]\n","        row_list = literal_eval(config.trader_set.row_list)\n","        rec_row_list = literal_eval(config.trader_set.rec_row_list)\n","        offset_list = literal_eval(config.trader_set.offset_list)\n","\n","        assert len(make_itv_list) == len(offset_list), \"length of itv & offset_list should be equal\"\n","        htf_df_list = [to_htf(df_, itv_=itv_, offset=offset_) for itv_idx, (itv_, offset_)\n","                       in enumerate(zip(make_itv_list, offset_list)) if itv_idx != 0]  #\n","        htf_df_list.insert(0, df_)\n","\n","        # for htf_df_ in htf_df_list:\n","        #     print(htf_df_.tail())\n","\n","        #       Todo        #\n","        #        1. row_list calc.\n","        #           a. indi. 를 만들기 위한 최소 period 가 존재하고, 그 indi. 를 사용한 lb_period 가 존재함\n","        #           b. => default_period + lb_period\n","        #               i. from sync_check, public_indi, ep_point2, ep_dur 의 tf 별 max lb_period check\n","        #                   1. default_period + max lb_period check\n","        #                       a. 현재까지 lb_period_list\n","        #                           h_prev_idx (open / close) 60\n","        #                           dc_period 135\n","        #                           zone_dc_period 135\n","\n","        # --------- slicing (in trader phase only) --------- #\n","        #               --> latency 영향도가 높은 곳은 이곳\n","        if row_slice:   # recursive 가 아닌 indi. 의 latency 를 고려한 slicing\n","            df, df_5T, df_15T, df_30T, df_4H = [df_s.iloc[-row_list[row_idx]:].copy() for row_idx, df_s in enumerate(htf_df_list)]\n","            rec_df, rec_df_5T, rec_df_15T, rec_df_30T, rec_df_4H = [df_s.iloc[-rec_row_list[row_idx]:].copy() for row_idx, df_s in enumerate(htf_df_list)]\n","        else:\n","            df, df_5T, df_15T, df_30T, df_4H = htf_df_list\n","            rec_df, rec_df_5T, rec_df_15T, rec_df_30T, rec_df_4H = htf_df_list\n","\n","        # --------- add indi. --------- #\n","\n","        #        1. 필요한 indi. 는 enlist_epouttp & mr_check 보면서 삽입\n","        #        2. min use_rows 계산을 위해서, tf 별로 gathering 함        #\n","        start_0 = time.time()\n","\n","        df = dc_line(df, None, '1m', dc_period=20)\n","        df = bb_line(df, None, '1m')\n","        # print(df.tail())\n","\n","        df = dc_line(df, df_5T, '5m')\n","        df = bb_line(df, df_5T, '5m')\n","\n","        df = dc_line(df, df_15T, '15m')\n","        df = bb_line(df, df_15T, '15m')\n","\n","        df = bb_line(df, df_30T, '30m')\n","\n","        # print(time.time() - start_0)\n","\n","        # start_0 = time.time()\n","        df = bb_line(df, df_4H, '4h')\n","        # print(time.time() - start_0)\n","\n","        rec_df['rsi_1m'] = rsi(rec_df, 14)  # Todo - recursive, 250 period\n","        df = df.join(to_lower_tf_v2(df, rec_df.iloc[:, [-1]], [-1], backing_i=0), how='inner')  # <-- join same_tf manual\n","        # print(df.rsi_1m.tail())\n","\n","        if order_side in [\"OPEN\"]:\n","            rec_df_5T['ema_5m'] = ema(rec_df_5T['close'], 195)  # Todo - recursive, 1100 period (5T)\n","            df = df.join(to_lower_tf_v2(df, rec_df_5T, [-1]), how='inner')\n","\n","    except Exception as e:\n","        sys_log.error(\"error in sync_check :\", e)\n","    else:\n","        return df\n","\n","\n","def public_indi(res_df, config, np_timeidx, order_side=\"OPEN\"):\n","\n","    strat_version = config.strat_version\n","    res_df = dc_level(res_df, '5m', 1)\n","    res_df = bb_level(res_df, '5m', 1)\n","    # res_df = st_level(res_df, '5m', 1)\n","\n","    res_df = dc_level(res_df, '15m', 1)\n","    res_df = bb_level(res_df, '15m', 1)\n","    res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line, np_timeidx=np_timeidx)\n","\n","    # res_df = st_level(res_df, '15m', 1)\n","\n","    # res_df = dc_level(res_df, '30m', 1)\n","    # res_df = bb_level(res_df, '30m', 1)\n","    # res_df = st_level(res_df, '30m', 1)\n","\n","    # res_df = bb_level(res_df, '1h', 1)\n","\n","    res_df = bb_level(res_df, '4h', 1)\n","\n","    res_df['dc_upper_v2'.format(strat_version)] = res_df['high'].rolling(config.loc_set.zone.dc_period).max()\n","    res_df['dc_lower_v2'.format(strat_version)] = res_df['low'].rolling(config.loc_set.zone.dc_period).min()\n","\n","    res_df['zone_dc_upper_v2'.format(strat_version)] = res_df['high'].rolling(config.loc_set.zone.zone_dc_period).max()\n","    res_df['zone_dc_lower_v2'.format(strat_version)] = res_df['low'].rolling(config.loc_set.zone.zone_dc_period).min()\n","\n","    if order_side in [\"OPEN\"]:\n","        start_0 = time.time()\n","\n","        res_df[\"wick_score\"], res_df['body_score'] = candle_score(res_df, unsigned=False)\n","\n","        # print(\"~ wick_score() elapsed time : {}\".format(time.time() - start_0))\n","\n","        start_0 = time.time()\n","\n","        h_c_intv1 = '15T'\n","        h_c_intv2 = 'H'\n","        res_df = h_candle_v2(res_df, h_c_intv1)\n","        res_df = h_candle_v2(res_df, h_c_intv2)\n","\n","        # sys_log.warning(\"~ h_wick_score elapsed time : {}\".format(time.time() - start_0))\n","        # print(\"wick_score() ~ h_candle() elapsed time : {}\".format(time.time() - start_0))\n","\n","        h_candle_col = ['hopen_{}'.format(h_c_intv2), 'hhigh_{}'.format(h_c_intv2), 'hlow_{}'.format(h_c_intv2),\n","                        'hclose_{}'.format(h_c_intv2)]\n","\n","        res_df['h_wick_score'], res_df['h_body_score'] = candle_score(res_df, ohlc_col=h_candle_col, unsigned=False)\n","\n","    #     temp indi.    #\n","    # res_df[\"ma30_1m\"] = res_df['close'].rolling(30).mean()\n","    # res_df[\"ma60_1m\"] = res_df['close'].rolling(60).mean()\n","    # res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line, np_timeidx=np_timeidx)\n","\n","    return res_df\n","\n","\n","def ep_loc_point2(res_df, config, i, out_j, allow_ep_in, side=OrderSide.SELL):\n","    try:\n","        if side == OrderSide.SELL:\n","            if config.strat_version == 'v5_2' and allow_ep_in == 0:\n","                if (res_df['dc_upper_1m'].iloc[i - 1] <= res_df['dc_upper_15m'].iloc[i]) & \\\n","                        (res_df['dc_upper_15m'].iloc[i - 1] != res_df['dc_upper_15m'].iloc[i]):\n","                    # if (res_df['dc_upper_1m'].iloc[e_j - 1] <= res_df['dc_upper_5m'].iloc[e_j]) & \\\n","                    #     (res_df['dc_upper_5m'].iloc[e_j - 1] != res_df['dc_upper_5m'].iloc[e_j]):\n","                    # (res_df['dc_upper_15m'].iloc[e_j] <= res_df['ema_5m'].iloc[e_j]):\n","                    pass  # 일단, pass (non_logging)\n","                else:\n","                    return 0, out_j  # input out_j could be initial_i\n","                # if res_df['ema_5m'].iloc[i] + res_df['dc_gap_5m'].iloc[i] * config.loc_set.point2.ce_gap <= res_df['close'].iloc[i]:\n","                #   pass\n","                # else:\n","                #   return 0, out_j\n","                # if res_df['bb_upper_5m'].iloc[i] <= res_df['ema_5m'].iloc[i]:\n","                #   pass\n","                # else:\n","                #   return 0, out_j\n","\n","                return 1, i  # i = e_j\n","        else:\n","            if config.strat_version == 'v5_2' and allow_ep_in == 0:\n","                if (res_df['dc_lower_1m'].iloc[i - 1] >= res_df['dc_lower_15m'].iloc[i]) & \\\n","                        (res_df['dc_lower_15m'].iloc[i - 1] != res_df['dc_lower_15m'].iloc[i]):\n","                    pass\n","                else:\n","                    return 0, out_j  # input out_j could be initial_i\n","\n","    except Exception as e:\n","        sys_log.error(\"error in ep_loc_point2 :\", e)\n","\n","    return 1, out_j  # allow_ep_in, out_j (for idep)\n","\n","\n","\n","def ep_loc_v2(res_df, config, np_timeidx, show_detail=True, ep_loc_side=OrderSide.SELL):\n","    strat_version = config.strat_version\n","\n","    # ------- param init ------- #\n","    open_side = None\n","    len_df = len(res_df)\n","    mr_res = np.ones(len_df)\n","    zone_arr = np.full(len_df, 'n')\n","\n","    # ------ process 한번에 처리해서 param_check 만 ver. 별로 하면 될 것 ------ #\n","    #     => public_indi() 가 될 것\n","    #     1. 사용한 param 정보와 matching 된 data 병렬로 나열 logging 될 것\n","    #     2. binarize 할 것 => short 와 long 은 같은 조건식 사용할 수 있게됨 - 보류 (생각보다 상반된 조건식이 많음)\n","    #       a. 조건식이 다른 경우는 ?\n","    tp_fee, out_fee = calc_tp_out_fee(config)\n","\n","    # -------------- candle_score -------------- #\n","    if config.loc_set.point.wick_score != \"None\":\n","      # -------------- candle_score_v0 (1m initial tick 기준임)  -------------- #\n","      if strat_version in ['v5_2', '1_1']:\n","        wick_score = res_df['wick_score'].to_numpy()\n","        if ep_loc_side == OrderSide.SELL:\n","          mr_res *= wick_score <= -config.loc_set.point.wick_score\n","        else:\n","          mr_res *= wick_score >= config.loc_set.point.wick_score\n","\n","    # -------------- spread scheduling -------------- #\n","    if config.loc_set.zone.short_spread != \"None\":\n","      bb_base_5m = res_df['bb_base_5m'].to_numpy()  # to_numpy() 는 ep_loc 에서 진행됨\n","      bb_lower_5m = res_df['bb_lower_5m'].to_numpy()\n","      bb_upper_5m = res_df['bb_upper_5m'].to_numpy()\n","      dc_lower_5m = res_df['dc_lower_5m'].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= (bb_base_5m - bb_lower_5m - tp_fee * bb_base_5m) / (bb_base_5m - bb_lower_5m + out_fee * bb_base_5m) >= config.loc_set.zone.short_spread\n","      else:\n","        mr_res *= (bb_base_5m - dc_lower_5m - tp_fee * bb_upper_5m) / (bb_base_5m - dc_lower_5m + out_fee * bb_base_5m) >= config.loc_set.zone.short_spread\n","\n","    # -------------- dtk -------------- #\n","    if config.loc_set.zone.dt_k != \"None\":\n","        # ------ dc_v2 ------ #\n","      dc_lower_v2 = res_df['dc_lower_v2'.format(strat_version)].to_numpy()\n","      short_dtk_1_ = res_df['short_dtk_1_{}'.format(strat_version)].to_numpy() - \\\n","              res_df['short_dtk_gap_{}'.format(strat_version)].to_numpy() * config.loc_set.zone.dt_k\n","      dc_upper_v2 = res_df['dc_upper_v2'.format(strat_version)].to_numpy()\n","      long_dtk_1_ = res_df['long_dtk_1_{}'.format(strat_version)].to_numpy() + \\\n","              res_df['long_dtk_gap_{}'.format(strat_version)].to_numpy() * config.loc_set.zone.dt_k\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= dc_lower_v2 >= short_dtk_1_\n","      else:\n","        mr_res *= dc_upper_v2 <= long_dtk_1_\n","\n","    # -------------- zone rejection  -------------- #\n","    if config.loc_set.zone.zone_rejection:\n","        #       config 로 통제할 수 없는 rejection 은 strat_version 으로 조건문을 나눔 (lvrg_set 과 동일)\n","        # ------------ by bb ------------ #\n","        # ------ bb & close ------ #\n","        close = res_df['close'].to_numpy()\n","\n","        if strat_version in ['v5_2']:\n","          bb_upper2_ = res_df['bb_upper2_%s' % config.loc_set.zone.bbz_itv].to_numpy()\n","          bb_lower2_ = res_df['bb_lower2_%s' % config.loc_set.zone.bbz_itv].to_numpy()\n","          if ep_loc_side == OrderSide.SELL:\n","            mr_res *= bb_upper2_ < close\n","          else:\n","            mr_res *= bb_lower2_ > close\n","\n","        # ------ close, bb & ema ------ #\n","        if strat_version in ['v5_2']:\n","          ema_5m = res_df['ema_5m'].to_numpy()\n","          if ep_loc_side == OrderSide.SELL:\n","            mr_res *= close < ema_5m\n","          else:\n","            mr_res *= close > ema_5m\n","\n","    # -------------- zoned tr_set - post_work -------------- #\n","    if config.tr_set.c_ep_gap != \"None\":\n","        #       by zone_dtk       #\n","        #         c_zone        #\n","        zone_dc_upper_v2_ = res_df['zone_dc_upper_v2'.format(strat_version)].to_numpy()\n","        long_dtk_plot_1 = res_df['long_dtk_plot_1'].to_numpy() + res_df['long_dtk_plot_gap'].to_numpy() * config.loc_set.zone.zone_dt_k\n","        zone_dc_lower_v2_ = res_df['zone_dc_lower_v2'.format(strat_version)].to_numpy()\n","        short_dtk_plot_ = res_df['short_dtk_plot_1'].to_numpy() - res_df['short_dtk_plot_gap'].to_numpy() * config.loc_set.zone.zone_dt_k\n","        if ep_loc_side == OrderSide.SELL:\n","          zone_res = zone_dc_upper_v2_ > long_dtk_plot_  # mr_res 와는 별개임\n","          # 지금의 생각은, dynamic 이여도, 그대로 ep2 를 입히면 될 것으로 보이는데, 어차피 zone_res 가 True 인 곳은 모두 c_zone 이니까\n","          res_df['short_ep_{}'.format(strat_version)][zone_res] = res_df['short_ep2_{}'.format(strat_version)][zone_res]\n","          res_df['short_out_{}'.format(strat_version)][~zone_res] = res_df['short_out2_{}'.format(strat_version)][~zone_res]  # t_zone 에 대한 out2 setting   \n","        else:\n","          zone_res = zone_dc_lower_v2_ < short_dtk_plot_\n","          res_df['long_ep_{}'.format(strat_version)] = res_df['long_ep2_{}'.format(strat_version)]\n","          res_df['long_out_{}'.format(strat_version)][~zone_res] = res_df['long_out2_{}'.format(strat_version)][~zone_res]  # t_zone 에 대한 out2 setting        \n","        zone_arr = np.where(zone_res == 1, 'c', 't')\n","\n","    return mr_res, zone_arr  # mr_res 의 True idx 가 open signal"]},{"cell_type":"markdown","metadata":{"id":"o5psPOVOCA1c","jp-MarkdownHeadingCollapsed":true,"tags":[]},"source":["#### utils_ override"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5q1V5vTjQszK"},"outputs":[],"source":["#     to utils2     #\n","utils2.enlist_rtc = enlist_rtc\n","\n","\n","#     when using override = 1   #\n","# enlist_rtc = utils2.enlist_rtc\n","# # enlist_rtc = enlist_rtc\n","# enlist_tr = utils2.enlist_tr"]},{"cell_type":"markdown","metadata":{"id":"wmnyUTS-yjF1","jp-MarkdownHeadingCollapsed":true,"tags":[]},"source":["### config"]},{"cell_type":"markdown","metadata":{"id":"JjKHyqftzhD7","tags":[]},"source":["#### set config (override available)"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"q_4E-zH02WJy","executionInfo":{"status":"ok","timestamp":1645698624989,"user_tz":-540,"elapsed":489,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"outputs":[],"source":["#     caution : MARKET / LIMIT spelling   #\n","#      json doesn't support single quotes     #\n","\n","param_dict = \\\n","{\n","  \"strat_version\": \"v5_2\",\n","  \"trader_set\": {\n","    \"run\": 1,\n","    \"df_log\": 0,\n","    \"open_index\": -1,\n","    \"complete_index\": -2,\n","    \"limit_fee\": 0.0002,\n","    \"market_fee\": 0.0004,\n","    \"initial_asset\": 3500,\n","    \"asset_changed\": 0,\n","    \"symbol\": \"ETHUSDT\",\n","    \"symbol_changed\": 0,\n","    \"itv_list\": [\n","      \"1m\",\n","      \"5m\",\n","      \"15m\",\n","      \"30m\",\n","      \"4h\"\n","    ],\n","    \"row_list\": [\n","      200,\n","      160,\n","      30,\n","      25,\n","      25\n","    ],\n","    \"rec_row_list\": [\n","      250,\n","      1100,\n","      1,\n","      1,\n","      1\n","    ],\n","    \"offset_list\": [\n","      \"1h\",\n","      \"1h\",\n","      \"1h\",\n","      \"1h\",\n","      \"1h\"\n","    ],\n","    \"rsi_out_stratver\": [\n","      \"v7_3\",\n","      \"1_1\"\n","    ],\n","    \"bar_close_second\": 59,\n","    \"realtime_term\": 0.01,\n","    \"api_retry_term\": 3,\n","    \"check_entry_sec\": 10,\n","    \"entry_execution_wait\": 60,\n","    \"breakout_qty_ratio\": 0.97,\n","    \"qty_check_term\": 30,\n","    \"exit_execution_wait\": 60,\n","    \"close_complete_term\": 5,\n","    \"save_stacked_df\": 0,\n","    \"stacked_df_exist\": 1\n","  },\n","  \"pos_set\": {\n","    \"short_inversion\": 0,\n","    \"long_inversion\": 0,\n","    \"short_ban\": 1,\n","    \"long_ban\": 0\n","  },\n","  \"loc_set\": {\n","    \"zone\": {\n","      \"short_spread\": \"None\",\n","      \"long_spread\": \"None\",\n","      \"tr_thresh\": \"None\",\n","      \"dtk_dc_itv\": \"None\",\n","      \"dtk_itv\": \"5m\",\n","      \"dt_k\": \"None\",\n","      \"dc_period\": 135,\n","      \"ei_k\": -0.66,\n","      \"use_dtk_line\": 0,\n","      \"zone_rejection\": 1,\n","      \"gap_mply\": 1,\n","      \"c_itv_ticks\": 60,\n","      \"ad_idx\": 19,\n","      \"bbz_itv\": \"15m\",\n","      \"zone_dt_k\": 0.4,\n","      \"zone_dc_period\": 135,\n","      \"dr_error\": 0.1,\n","      \"bbwp_thresh\": 0.5,\n","      \"entry_incycle\": 5,\n","      \"max_eplim_pct\": 0.05,\n","      \"min_eplim_pct\": 0.013\n","    },\n","    \"point\": {\n","      \"exp_itv\": \"1m\",\n","      \"tpg_itv1\": \"5m\",\n","      \"tpg_itv0\": \"5m\",\n","      \"outg_itv1\": \"5m\",\n","      \"outg_itv0\": \"5m\",\n","      \"outg_dc_period\": \"None\",\n","      \"tf_entry\": 1,\n","      \"htf_entry\": 15,\n","      \"wick_score\": 50,\n","      \"body_score\": \"None\",\n","      \"wick_score2\": \"None\",\n","      \"body_score2\": \"None\",\n","      \"osc_band\": 20\n","    },\n","    \"point2\": {\n","      \"ce_gap\": 0.5\n","    }\n","  },\n","  \"tr_set\": {\n","    \"ep_gap\": 0.0,\n","    \"tp_gap\": 0.0,\n","    \"decay_gap\": \"None\",\n","    \"out_gap\": 0.5,\n","    \"c_ep_gap\": \"None\",\n","    \"t_out_gap\": 0.0\n","  },\n","  \"ep_set\": {\n","    \"short_entry_score\": -2,\n","    \"entry_type\": \"LIMIT\",\n","    \"static_ep\": 1,\n","    \"tpout_onexec\": 0\n","  },\n","  \"tp_set\": {\n","    \"non_tp\": 0,\n","    \"tp_type\": \"BOTH\",\n","    \"static_tp\": 1,\n","    \"decay_term\": 60,\n","    \"time_tp\": 0,\n","    \"partial_num\": 1,\n","    \"partial_qty_divider\": 1.5\n","  },\n","  \"out_set\": {\n","    \"out_type\": \"MARKET\",\n","    \"use_out\": 1,\n","    \"static_out\": 1,\n","    \"hl_out\": 1,\n","    \"price_restoration\": 0,\n","    \"retouch\": 0,\n","    \"retouch_out_period\": 500,\n","    \"second_out\": 0,\n","    \"approval_st_gap\": 1.5,\n","    \"second_out_gap\": 0.5\n","  },\n","  \"lvrg_set\": {\n","    \"leverage\": 10,\n","    \"static_lvrg\": 1,\n","    \"allow_float\": 0,\n","    \"target_pct\": 0.1,\n","    \"lvrg_rejection\": 0\n","  }\n","}\n","\n","config = EasyDict(param_dict)\n","# param_json = json.dumps(param_dict, indent=2)"]},{"cell_type":"markdown","metadata":{"id":"dzla8i9_ysmP","jp-MarkdownHeadingCollapsed":true,"tags":[]},"source":["#### save config"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":544,"status":"ok","timestamp":1639994748940,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"FlNGKvW_w2za","outputId":"c575ce69-def0-4e6c-c949-a63707467b2e"},"outputs":[{"name":"stdout","output_type":"stream","text":["/content/drive/My Drive/Colab Notebooks/JnQ/config/config_v5_2.1220_candlejson dumped !\n"]}],"source":["config_name = \"config_v5_2.1220_candlejson\"\n","# config_name = \"config_v3.json\"\n","cfg_full_path = os.path.join(current_path, \"config\", config_name)\n","\n","\n","with open(cfg_full_path, 'w') as cfg:\n","    json.dump(config1, cfg, indent=2)\n","    print(\"{} dumped !\".format(cfg_full_path))"]},{"cell_type":"markdown","metadata":{"id":"rLI8unIyroiC","tags":[]},"source":["### run"]},{"cell_type":"code","source":["multi_mode = 0\n","id_idx_list = [1]    # 0, 1, 2... multi_mode 가 아닌 경우 필히 작성\n","public_override = 1\n","utils_override = 1\n","config_override = 1  # utils_public /utils / config 으로 세분화하는게 좋을 것으로 봄\n","\n","# ------ config_list 와 같은 org_var 에 override 하는거 다시 생각하기 ------ #\n","# if not multi_mode:  # override 하지않는 경우에 config[0] 만을 사용하니, config[0] 에 어떤 version 을 배치할지 선택\n","ID_list = ID_arr[id_idx_list]\n","utils_list = utils_arr[id_idx_list]\n","config_list = config_arr[id_idx_list]\n","\n","# if config_override:\n","#   config_list[0] = config\n","config = config_list[0]  # Todo - overide 시에도 multi 가 지원되도록 (multi 여부는 이제 id_idx_list 로 결정됨)\n","                         # custom base config, if use override -> set to config[0]\n","\n","tp_fee, out_fee = calc_tp_out_fee(config)   # -> rev_pr 때문에 일단 이곳에도 선언함\n","\n","# ------- inversion set ------- #\n","inversion = 0\n","fdist_thresh = 1\n","\n","# ------- plot param ------- #\n","fontsize = 15\n","show_detail = 0\n","title_position = (0.5, 0.5)\n","\n","# ------- temp param ------- #\n","rsi_out_stratver = ['v7_3', '1_1']\n","allow_osc_touch = 0\n","rsi_gap = 5\n","\n","early_out_tpg = 0.36\n","\n","# ------- survey param ------- #\n","itv_num_list = [1, 3, 5, 15]\n","\n","itv_list = ['15m', '30m', '1h', '4h']\n","# itv_list = ['3m', '5m', '15m', '30m', '1h', '4h']\n","\n","# x_val_list = np.arange(, 2.0, 0.1)     # prcn 1\n","x_val_list = np.arange(-0.69, -0.8, -0.01)  # prcn 2\n","# x_val_list = np.arange(-0.695, -0.75, -0.005)    # prcn 3\n","# x_val_list = np.arange(0.944, 0.945, 0.0001)    # prcn 4\n","# x_val_list = np.arange(1, 10, 1)   # prcn -1\n","x_val_list = np.arange(200, 180, -5)   # prcn -2\n","\n","y_val_cols = [\"wr\", \"sr\", \"frq\", \"dpf\", \"acc_pr\", \"sum_pr\", \"acc_mdd\", \"sum_mdd\", \"liqd\", \"min_pr\", \"tr\", \"dr\"]\n","y_rev_val_cols = [\"wr\", \"sr\", \"acc_pr\", \"sum_pr\", \"acc_mdd\", \"sum_mdd\", \"min_pr\"]"],"metadata":{"id":"qBJfPsmJzVIr","executionInfo":{"status":"ok","timestamp":1645702033663,"user_tz":-540,"elapsed":317,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"execution_count":114,"outputs":[]},{"cell_type":"code","source":["start_0 = time.time()\n","key = ftr_list[0]\n","res_df = pd.read_feather(os.path.join(ftr_path, key), columns=None, use_threads=True).set_index(\"index\") # .loc[pd.to_datetime(\"2021-07-10 04:59:59.999000\"):]\n","print(key, \"loaded !\")\n","print(\"load res_df elapsed time :\", time.time() - start_0)\n","\n","np_timeidx = np.array([intmin_np(date_) for date_ in res_df.index.to_numpy()])\n","\n","start_0 = time.time()\n","if public_override:\n","    res_df = public_indi(res_df, config, np_timeidx)  # 현재 대부분의 시간은 h_candle 에서 소비되고 있음\n","else:\n","    res_df = utils_public.public_indi(res_df, config, np_timeidx)\n","print(\"public_indi elapsed time :\", time.time() - start_0)\n","\n","# ------------ entlist rtc & tr 은 중복되는 여부에 따라 user 가 flexible coding 해야할 것 ------------ #\n","start_0 = time.time()\n","if utils_override:\n","    res_df = enlist_rtc(res_df, config, np_timeidx)\n","else:\n","    for utils_, config_ in zip(utils_list, config_list):   # recursively\n","        res_df = utils_.enlist_rtc(res_df, config_, np_timeidx)\n","        if not multi_mode:\n","            break\n","print(\"enlist_rtc elapsed time :\", time.time() - start_0)\n","\n","start_0 = time.time()\n","if utils_override:\n","    res_df = enlist_tr(res_df, config, np_timeidx)\n","else:\n","    for utils_, config_ in zip(utils_list, config_list):   # recursively\n","        res_df = utils_.enlist_tr(res_df, config_, np_timeidx)\n","        if not multi_mode:\n","            break\n","print(\"enlist_tr elapsed time :\", time.time() - start_0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WstWVNihCNH8","executionInfo":{"status":"ok","timestamp":1645698633345,"user_tz":-540,"elapsed":8360,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"c2fd0e71-1d40-4667-f4d5-2b4dbe3a118f"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["2022-01-10 ETHUSDT.ftr loaded !\n","load res_df elapsed time : 3.481558084487915\n","public_indi elapsed time : 2.7490487098693848\n","enlist_rtc elapsed time : 0.05620145797729492\n","enlist_tr elapsed time : 0.17583346366882324\n"]}]},{"cell_type":"markdown","source":["#### ep_loc mr_res"],"metadata":{"id":"RqRF1eyZ0xBL"}},{"cell_type":"code","source":["short_mr_res_obj = np.array([ep_loc_v2(res_df, config_, np_timeidx, show_detail=True, ep_loc_side=OrderSide.SELL) for config_ in config_list])\n","long_mr_res_obj = np.array([ep_loc_v2(res_df, config_, np_timeidx, show_detail=True, ep_loc_side=OrderSide.BUY) for config_ in config_list])\n","short_open_idx_list = [np.where(res_df['short_open_{}'.format(id)].to_numpy() * mr_res == config.ep_set.short_entry_score)[0] for id, mr_res in zip(ID_list, short_mr_res_obj[:, 0].astype(np.float64))]  # zip 으로 zone (str) 과 묶어서 dtype 변경됨\n","long_open_idx_list = [np.where(res_df['long_open_{}'.format(id)].to_numpy() * mr_res == -config.ep_set.short_entry_score)[0] for id, mr_res in zip(ID_list, long_mr_res_obj[:, 0].astype(np.float64))]"],"metadata":{"id":"MY1csdNRLGsk","executionInfo":{"status":"ok","timestamp":1645698634917,"user_tz":-540,"elapsed":1581,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["#   필요한 것   #\n","#     1. side_arr, start_ver_arr\n","short_side_list = [np.full(len(list_), OrderSide.SELL) for list_ in short_open_idx_list]\n","long_side_list = [np.full(len(list_), OrderSide.BUY) for list_ in long_open_idx_list]\n","\n","short_zone_list = [zone_res[short_open_idx] for zone_res, short_open_idx in zip(short_mr_res_obj[:, 1], short_open_idx_list)]\n","long_zone_list = [zone_res[long_open_idx] for zone_res, long_open_idx in zip(long_mr_res_obj[:, 1], long_open_idx_list)]\n","\n","short_id_list = [np.full(len(list_), id) for id, list_ in zip(ID_list, short_open_idx_list)]\n","long_id_list = [np.full(len(list_), id) for id, list_ in zip(ID_list, long_open_idx_list)]\n","\n","selected_id_idx = np.arange(len(id_idx_list))\n","short_id_idx_list = [np.full(len(list_), id) for id, list_ in zip(selected_id_idx, short_open_idx_list)]\n","long_id_idx_list = [np.full(len(list_), id) for id, list_ in zip(selected_id_idx, long_open_idx_list)]"],"metadata":{"id":"KXzVUQmT89oA","executionInfo":{"status":"ok","timestamp":1645698634918,"user_tz":-540,"elapsed":17,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["#   series 만들어서 short / long 끼리 합치고 둘이 합치고, 중복은 우선 순위 정해서 제거\n","short_open_df_list = [pd.DataFrame(index=index_, data=np.vstack((data_)).T, columns=['side', 'zone', 'id', 'id_idx']) for index_, data_ in zip(short_open_idx_list, zip(short_side_list, short_zone_list, short_id_list, short_id_idx_list))]\n","long_open_df_list = [pd.DataFrame(index=index_, data=np.vstack((data_)).T, columns=['side', 'zone', 'id', 'id_idx']) for index_, data_ in zip(long_open_idx_list, zip(long_side_list, long_zone_list, long_id_list, long_id_idx_list))]"],"metadata":{"id":"Bi_thncr_MIP","executionInfo":{"status":"ok","timestamp":1645698634919,"user_tz":-540,"elapsed":17,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["open_info_df = pd.concat(short_open_df_list + long_open_df_list)"],"metadata":{"id":"44rgbNuPYK3T","executionInfo":{"status":"ok","timestamp":1645698634919,"user_tz":-540,"elapsed":17,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["#   sorting + unique\n","open_info_df.sort_index(inplace=True)\n","print(len(open_info_df))\n","open_info_df[~open_info_df.index.duplicated(keep='first')]  # 먼저 순서를 우선으로 지정\n","print(len(open_info_df))"],"metadata":{"id":"420MVpkpZJeo","executionInfo":{"status":"ok","timestamp":1645698634920,"user_tz":-540,"elapsed":17,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"42f1e9b2-7dbb-4d89-d0d4-6a053ddfe515"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["356\n","356\n"]}]},{"cell_type":"code","source":["open_info_df.head()"],"metadata":{"id":"6Dhls5EYaQOb","executionInfo":{"status":"ok","timestamp":1645698634921,"user_tz":-540,"elapsed":17,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"colab":{"base_uri":"https://localhost:8080/","height":206},"outputId":"f68a9ee4-ce33-4515-c1d0-d75b43fab595"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/html":["\n","  <div id=\"df-4bb5585e-4fca-42f6-a9ae-f649b285e323\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>side</th>\n","      <th>zone</th>\n","      <th>id</th>\n","      <th>id_idx</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>7708</th>\n","      <td>BUY</td>\n","      <td>n</td>\n","      <td>v5_2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>7710</th>\n","      <td>BUY</td>\n","      <td>n</td>\n","      <td>v5_2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>8211</th>\n","      <td>BUY</td>\n","      <td>n</td>\n","      <td>v5_2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>8214</th>\n","      <td>BUY</td>\n","      <td>n</td>\n","      <td>v5_2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>12577</th>\n","      <td>BUY</td>\n","      <td>n</td>\n","      <td>v5_2</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4bb5585e-4fca-42f6-a9ae-f649b285e323')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-4bb5585e-4fca-42f6-a9ae-f649b285e323 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-4bb5585e-4fca-42f6-a9ae-f649b285e323');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["      side zone    id id_idx\n","7708   BUY    n  v5_2      0\n","7710   BUY    n  v5_2      0\n","8211   BUY    n  v5_2      0\n","8214   BUY    n  v5_2      0\n","12577  BUY    n  v5_2      0"]},"metadata":{},"execution_count":15}]},{"cell_type":"markdown","source":["##### main"],"metadata":{"id":"IWO7KkqltMFt"}},{"cell_type":"code","source":["# ------------ public announcement ------------ #\n","open_info_list = [open_info_df[col_].to_numpy() for col_ in open_info_df.columns]\n","side_arr, zone_arr, id_arr, id_idx_arr = open_info_list\n","\n","data_cols = ['open', 'high', 'low', 'close', 'bb_lower_5m', 'bb_upper_5m', 'rsi_1m']\n","data_list = [res_df[col_].to_numpy() for col_ in data_cols]\n","\n","h, l = data_list[1:3]\n","len_df = len(res_df)\n","\n","start_0 = time.time()\n","paired_res = en_ex_pairing(res_df, open_info_df.index, open_info_list, data_list, config_list, np_timeidx)\n","print(\"en_ex_pairing elapsed time :\", time.time() - start_0)  #  0.3660471439361572"],"metadata":{"id":"eiQ36_SLLE3w","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1645703315470,"user_tz":-540,"elapsed":828,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"8916f8fe-7aeb-4f64-c96e-e5d9ed6013b2"},"execution_count":137,"outputs":[{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 0.3660471439361572\n"]}]},{"cell_type":"code","source":["start_0 = time.time()\n","idep_plot_v4(len_df, h, l, side_arr, paired_res, inversion=False, sample_ratio=0.7)\n","print(\"idep_plot_v4 elapsed time :\", time.time() - start_0)\n","# %timeit -n1 -r1 idep_plot_v4(res_df, h, l, obj_list, inversion=False, sample_ratio=0.7)  # 2.23 s"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":536},"id":"H2zWz1VViHjc","executionInfo":{"status":"ok","timestamp":1645703374670,"user_tz":-540,"elapsed":3140,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"c57f4556-4f35-4f55-c306-5ec244124fb9"},"execution_count":138,"outputs":[{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 0.0004603862762451172\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1728x576 with 6 Axes>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["idep_plot_v4 elapsed time : 2.0947275161743164\n"]}]},{"cell_type":"code","source":["def idep_plot_v4(len_df, h, l, side_arr, paired_res, inversion=False, sample_ratio=0.7, title_position=(0.5, 0.5), fontsize=15):\n","\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(24, 8))\n","  gs = gridspec.GridSpec(nrows=2,  # row 몇 개\n","                          ncols=3,  # col 몇 개\n","                          height_ratios=[10, 1]\n","                          # height_ratios=[10, 10, 1]\n","                          )\n","  gs_idx = 0\n","  # plt.suptitle(key)\n","\n","  v_line = int(len_df * sample_ratio)  \n","\n","  # ------ short & long data preparation ------ #\n","  valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr = paired_res\n","  start_0 = time.time()\n","  short_valid_openi_idx = np.where(side_arr[valid_openi_arr] == OrderSide.SELL)[0]  # valid_openi_arr 에 대한 idx, # side_arr, \n","  long_valid_openi_idx = np.where(side_arr[valid_openi_arr] == OrderSide.BUY)[0]\n","\n","  short_obj = np.hstack((pair_price_arr[short_valid_openi_idx], pair_idx_arr[short_valid_openi_idx]))\n","  long_obj = np.hstack((pair_price_arr[long_valid_openi_idx], pair_idx_arr[long_valid_openi_idx]))\n","  both_obj = np.vstack((short_obj, long_obj))\n","\n","  short_obj, long_obj, both_obj = [np.split(obj_, 4, axis=1) for obj_ in [short_obj, long_obj, both_obj]]\n","\n","  short_lvrg_arr, long_lvrg_arr = [lvrg_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","  short_fee_arr, long_fee_arr = [fee_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","  print(\"en_ex_pairing elapsed time :\", time.time() - start_0)\n","  \n","  # short_obj, long_obj, both_obj = obj_list\n","\n","  # ------ plot_data ------ #\n","  s_liqd = liquidation(OrderSide.SELL, h, short_obj, short_lvrg_arr, short_fee_arr)\n","  short_pr = get_pr(OrderSide.SELL, *short_obj[:2], short_lvrg_arr, short_fee_arr, inversion)\n","  short_total_pr = to_total_pr(len_df, short_pr, short_obj[-1])\n","  short_cum_pr = np.cumprod(short_total_pr)\n","  gs_idx = plot_info_v2(gs, gs_idx, len_df, short_pr, short_total_pr, short_cum_pr, s_liqd, short_lvrg_arr[-1], v_line, title_position, fontsize)\n","\n","  l_liqd = liquidation(OrderSide.BUY, l, long_obj, long_lvrg_arr, long_fee_arr)\n","  long_pr = get_pr(OrderSide.BUY, *long_obj[:2], long_lvrg_arr, long_fee_arr, inversion)\n","  long_total_pr = to_total_pr(len_df, long_pr, long_obj[-1])\n","  long_cum_pr = np.cumprod(long_total_pr)\n","  gs_idx = plot_info_v2(gs, gs_idx, len_df, long_pr, long_total_pr, long_cum_pr, l_liqd, long_lvrg_arr[-1], v_line, title_position, fontsize)\n","\n","  b_liqd = min(s_liqd, l_liqd)\n","  both_pr = np.vstack((short_pr, long_pr))\n","  both_total_pr = to_total_pr(len_df, both_pr, both_obj[-1])\n","  both_cum_pr = np.cumprod(both_total_pr)\n","  gs_idx = plot_info_v2(gs, gs_idx, len_df, both_pr, both_total_pr, both_cum_pr, b_liqd, lvrg_arr[-1], v_line, title_position, fontsize)\n","\n","  gs_idx = frq_dev_plot_v2(gs, gs_idx, len_df, short_obj[-1], short_cum_pr[-1], fontsize)\n","  gs_idx = frq_dev_plot_v2(gs, gs_idx, len_df, long_obj[-1], long_cum_pr[-1], fontsize)\n","  gs_idx = frq_dev_plot_v2(gs, gs_idx, len_df, both_obj[-1], both_cum_pr[-1], fontsize)\n","\n","  plt.show()\n","  plt.close()"],"metadata":{"id":"6BHPh_RQPpme","executionInfo":{"status":"ok","timestamp":1645702965643,"user_tz":-540,"elapsed":326,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"execution_count":130,"outputs":[]},{"cell_type":"code","source":["def liquidation(open_side, data_, obj_, lvrg, fee):  # much faster\n","    if type(obj_) == list:\n","        obj_ = zip(*obj_)\n","\n","    if open_side == \"SELL\":\n","        return np.min([(ep_ / np.max(data_[int(iin):int(iout)]) - fee - 1) * lvrg + 1 for ep_, _, iin, iout in obj_])\n","    else:\n","        return np.min([(np.min(data_[int(iin):int(iout)]) / ep_ - fee - 1) * lvrg + 1 for ep_, _, iin, iout in obj_])\n","\n","def to_total_pr(len_df, pr, exit_idx):\n","  total_pr = np.ones(len_df)\n","  if type(exit_idx) != int:\n","    exit_idx = exit_idx.astype(int)\n","  total_pr[exit_idx] = pr\n","\n","  return total_pr\n","\n","\n","def frq_dev_plot_v2(gs, gs_idx, len_df, exit_idx, acc_pr, fontsize):\n","    plt.subplot(gs[gs_idx])\n","    frq_dev = np.zeros(len_df)\n","    if type(exit_idx) != int:\n","      exit_idx = exit_idx.astype(int)\n","    frq_dev[exit_idx] = 1\n","    plt.plot(frq_dev)\n","\n","    title_msg = \"periodic_pr\\n acc_day : {:.4f}\\n month : {:.4f}\\n year : {:.4f}\"  # \\n rev_acc_day : {:.4f}\\n month : {:.4f}\\n year : {:.4f}\"\n","    plt.title(title_msg.format(*get_period_pr(len_df, acc_pr), fontsize=fontsize))\n","\n","    return gs_idx + 1\n"],"metadata":{"id":"k1PNoAwPZ09U","executionInfo":{"status":"ok","timestamp":1645701531185,"user_tz":-540,"elapsed":341,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"execution_count":108,"outputs":[]},{"cell_type":"code","source":["def get_res_info_nb_v2(len_df, np_pr, total_pr, acc_pr, liqd):\n","    wr = len(np_pr[np_pr > 1]) / len(np_pr[np_pr != 1])\n","    sr = sharpe_ratio(np_pr)\n","    sum_pr = get_sum_pr_nb(total_pr)\n","    min_pr = np.min(np_pr)\n","\n","    len_pr = len(np_pr)\n","    assert len_pr != 0\n","    dpf = (len_df / 1440) / len_pr  # devision zero warning\n","\n","    acc_mdd = mdd(acc_pr)\n","    sum_mdd = mdd(sum_pr)\n","\n","    return len_pr, dpf, wr, sr, acc_pr[-1], sum_pr[-1], min_pr, liqd, acc_mdd, sum_mdd, sum_pr\n","    \n","def plot_info_v2(gs, gs_idx, len_df, pr, total_pr, cum_pr, liqd, leverage, vline, title_position, fontsize):\n","  try:\n","    plt.subplot(gs[gs_idx])\n","    idep_res_obj = get_res_info_nb_v2(len_df, pr, total_pr, cum_pr, liqd)\n","    plt.plot(cum_pr)\n","    plt.plot(idep_res_obj[-1], color='gold')\n","    if vline is not None:\n","      plt.axvline(vline, alpha=1., linestyle='--', color='#ffeb3b')\n","    title_str = \"len_pr : {}\\n dpf : {:.3f}\\n wr : {:.3f}\\n sr : {:.3f}\\n acc_pr : {:.3f}\\n sum_pr : {:.3f}\\n\" +\\\n","              \"min_pr : {:.3f}\\n liqd : {:.3f}\\n acc_mdd : -{:.3f}\\n sum_mdd : -{:.3f}\\n leverage {}\"\n","    plt.title(title_str.format(*idep_res_obj[:-1], leverage), position=title_position, fontsize=fontsize)\n","  except Exception as e:\n","    print(\"error in plot_info :\", e)\n","\n","  return gs_idx + 1"],"metadata":{"id":"WCl230N-bOTT"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### en_ex_pairing + check_functions"],"metadata":{"id":"1GVZ03zDyU2N"}},{"cell_type":"code","source":["def en_ex_pairing(res_df, open_idx, open_info_list, data_list, config_list, np_timeidx):  # 이미 충분히 줄여놓은 idx 임\n","  side_arr, zone_arr, id_arr, id_idx_arr = open_info_list\n","  id_idx_arr = id_idx_arr.astype(int)\n","\n","  o, h, l, c, bb_lower_5m, bb_upper_5m, rsi_exit = data_list\n","  \n","  valid_openi_list = []\n","  pair_idx_list = []\n","  pair_price_list = []\n","  lvrg_list, fee_list = [], []\n","  len_df = len(res_df)\n","  len_open_idx = len(open_idx)\n","  i, open_i = 0, 0  # i for total_res_df indexing\n","\n","  while 1:\n","    # ------------ entry phase ------------ #      \n","    # ------ ep_loc ------ #      \n","    op_idx = open_idx[open_i]   # open_i 는 i 와 별개로 운영\n","    if op_idx < i:   # i = 이전 거래 끝난후의 res_df index, '<' : 거래 종료시점 진입 가능하다는 의미\n","      open_i += 1\n","      if open_i >= len_open_idx:\n","        break\n","      continue\n","    \n","    #     1. 해당 id 로 config 재할당해야함 - 적정 config 를 뽑아내기 위한 id_idx_arr 도 필요할 것으로 보임\n","    id_idx = id_idx_arr[open_i]\n","    config = config_list[id_idx]\n","    strat_version = config.strat_version\n","    open_side = side_arr[open_i]\n","\n","    side_pos = 'short' if open_side == OrderSide.SELL else 'long'\n","    ep_arr = res_df['{}_ep_{}'.format(side_pos, strat_version)].to_numpy()  # Todo - while loop 내에서 to_numpy() 반복하느니, pd_indexing 이 낫지 않을까 \n","    tp_arr = res_df['{}_tp_{}'.format(side_pos, strat_version)].to_numpy()  # => eptpout arr_list 만들어서 꺼내 사용하면 될 것\n","    out_arr = res_df['{}_out_{}'.format(side_pos, strat_version)].to_numpy()\n","\n","    # ------ ei_k & point2 ------ #  \n","    i = op_idx + 1    # open_signal 이 close_bar.shift(1) 이라고 가정하고 다음 bar 부터 체결확인한다는 의미\n","    if i >= len_df:   # res_df 의 last_index 까지 돌아야함\n","      break\n","    exec_j, ep_j, tp_j, out_j, entry_done, ep, fee = check_eik_point2_exec(config, op_idx, len_df, open_side, o, h, l, c, ep_arr)      \n","    i = exec_j \n","\n","    if not entry_done:  # 이 phase 는 exit_phase 뒤에도 있어야할 것 - entry_done var. 사용은 안하겠지만\n","      open_i += 1   # 확인 끝났으면 조기 이탈(+1), 다음 open_idx 조사 진행 \n","      if open_i >= len_open_idx:\n","        break\n","      continue\n","    \n","    # ------ leverage ------ #      \n","    out = out_arr[out_j]\n","    if public_override:\n","        leverage = lvrg_set(res_df, config, open_side, ep, out, fee)  # res_df 변수 사용됨 - 주석 처리 된 상태일뿐\n","    else:\n","        leverage = utils_public.lvrg_set(res_df, config, open_side, ep, out, fee)\n","\n","    exit_done, cross_on = 0, 0\n","    while 1:\n","      # ------------ exit phase ------------ #\n","      i += 1  # entry 다음 tick 부터 exit 허용\n","      if i >= len_df:   # res_df 의 last_index 까지 돌아야함\n","        break\n","\n","      if config.tp_set.static_tp:\n","        if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","          tp_j = ep_j  # tpout_onexec = using dynamic_ep --> using ep_j 에 대한 이유\n","      else:\n","        tp_j = i          \n","\n","      if config.out_set.static_out:\n","        if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","          out_j = ep_j\n","        # else:  # --> referenced upper phase as initail_j / e_j (start of limit wait)\n","      else:\n","        out_j = i\n","\n","      # ------ limit_tp ------ #\n","      if not config.tp_set.non_tp:\n","        if config.tp_set.tp_type in ['LIMIT', 'BOTH']:\n","          exit_done, tp, fee = check_limit_tp_exec(config, open_i, i, tp_j, len_df, fee, open_side, exit_done, [tp_arr], [o, h, l, c])   # 여기서는 j -> i 로 변경해야함\n","      # ------ market_close ------ #\n","        # ------ market_tp ------ #\n","        if not exit_done and config.tp_set.tp_type in ['MARKET', 'BOTH']:\n","          exit_done, cross_on, tp, fee = check_market_tp_exec(config, open_i, i, len_df, fee, open_side, cross_on, exit_done, [np_timeidx, c, bb_lower_5m, bb_upper_5m, rsi_exit])\n","      # ------ out ------ #\n","      if not exit_done and config.out_set.use_out and i != len_df - 1:\n","        exit_done, tp, fee = check_out(config, open_i, i, out_j, len_df, fee, open_side, exit_done, [o, h, l, c, out_arr])          \n","\n","      if exit_done:  # 이 phase 는 exit_phase 뒤에도 있어야할 것 - entry_done var. 사용은 안하겠지만      \n","        # ------ append dynamic vars. ------ #\n","        valid_openi_list.append(open_i)   # side, zone, start_ver arr 모두 openi_list 로 접근하기 위해 open_i 를 담음\n","        pair_idx_list.append([exec_j, i])   # entry & exit (체결 기준임)\n","        pair_price_list.append([ep, tp])\n","        lvrg_list.append(leverage)\n","        fee_list.append(fee)\n","        \n","        open_i += 1   # 다음 open_idx 조사 진행 \n","        break\n","\n","    if i >= len_df or open_i >= len_open_idx:   # res_df 의 last_index 까지 돌아야함\n","      break\n","    else:\n","      continue\n","\n","  return np.array(valid_openi_list), np.array(pair_idx_list), np.array(pair_price_list), np.array(lvrg_list), np.array(fee_list)\n","\n","\n","def check_eik_point2_exec(config, op_idx, len_df, open_side, o, h, l, c, ep_arr):  \n","  ep_j = op_idx\n","  tp_j = op_idx\n","  out_j = op_idx\n","\n","  # allow_ep_in = 0 if strat_version in ['v5_2'] else 1\n","  allow_ep_in = 0\n","  entry_done = 0\n","  entry_open = 0\n","  ep = None\n","\n","  strat_version = config.strat_version\n","\n","  if config.ep_set.entry_type == \"LIMIT\":\n","    fee = config.trader_set.limit_fee\n","\n","    for e_j in range(op_idx + 1, len_df):\n","      # ------ index setting for dynamic options ------ #\n","      if not config.ep_set.static_ep:\n","          ep_j = e_j    # dynamic_ep 를 위한 ep_index var.\n","          out_j = e_j   # dynamic_out 를 위한 out_index var. - 조건식이 static_ep 와 같이 있는 이유 모름 => dynamic_lvrg 로 사료됨\n","\n","      if not config.tp_set.static_tp:\n","          tp_j = e_j\n","\n","      # if short_ep.iloc[initial_i] == np.inf:  #  np.inf caution\n","      #   break\n","      # ------ ei_k ------ # - limit 사용하면 default 로 ei_k 가 존재해야함\n","      #   Todo\n","      #    1. rtc_1 & gap => numpy 화 안해도 되나\n","      if open_side == OrderSide.SELL:\n","        if l[e_j] <= res_df['h_short_rtc_1_{}'.format(strat_version)].iloc[tp_j] - \\\n","                res_df['h_short_rtc_gap_{}'.format(strat_version)].iloc[tp_j] * config.loc_set.zone.ei_k:\n","            break\n","      else:\n","        if h[e_j] >= res_df['h_long_rtc_1_{}'.format(strat_version)].iloc[tp_j] + \\\n","                res_df['h_long_rtc_gap_{}'.format(strat_version)].iloc[tp_j] * config.loc_set.zone.ei_k:\n","            break\n","\n","      # ------ point2 ------ #\n","      if public_override:\n","          allow_ep_in, out_j = ep_loc_point2(res_df, config, e_j, out_j, allow_ep_in, side=open_side)\n","      else:\n","          allow_ep_in, out_j = utils_public.ep_loc_point2(res_df, config, e_j, out_j, allow_ep_in, side=open_side)\n","\n","      # ------ check ep_exec ------ #\n","      if open_side == OrderSide.SELL:      \n","        if allow_ep_in and h[e_j] >= ep_arr[ep_j]:\n","          entry_done = 1\n","          if o[e_j] >= ep_arr[ep_j]:\n","            ep = o[e_j]              \n","          else:\n","            ep = ep_arr[ep_j]\n","          break\n","      else:\n","        if allow_ep_in and l[e_j] <= ep_arr[ep_j]:\n","          entry_done = 1\n","          if o[e_j] <= ep_arr[ep_j]:\n","            ep = o[e_j]             \n","          else:\n","            ep = ep_arr[ep_j]\n","          break\n","\n","  else:  # market entry\n","    e_j = op_idx + 1\n","    entry_done = True\n","    ep = close[op_idx]\n","    fee = config.trader_set.market_fee\n","\n","  return e_j, ep_j, tp_j, out_j, entry_done, ep, fee    # 다음 start_i <-- e_j 로 변경\n","  #   e_j => 다음 phase 의 시작 index <-> ep_j : ep 의 기준 index\n","  #   ep_j, tp_j, out_j 가 return 되어야함 - exit phase 에서 이어가기 위함\n","\n","\n","def check_limit_tp_exec(config, open_i, j, tp_j, len_df, fee, open_side, exit_done, tps, np_datas):  \n","  o, h, l, c = np_datas\n","  tp = None\n","  strat_version = config.strat_version\n","  len_tps = len(tps)\n","\n","  for tp_i, tp_arr in enumerate(tps):  \n","    #     decay adjustment    #\n","    #     tp_j includes dynamic_j - functionalize  #\n","    try:\n","      if config.tr_set.decay_gap != \"None\":\n","        decay_share = (j - open_i) // config.tp_set.decay_term\n","        decay_remain = (j - open_i) % config.tp_set.decay_term\n","        if j != open_i and decay_remain == 0:\n","          if open_side == OrderSide.SELL: \n","            tp_arr[tp_j] += res_df['h_short_rtc_gap_{}'.format(strat_version)].iloc[open_i] * config.tr_set.decay_gap * decay_share\n","          else:\n","            tp_arr[tp_j] -= res_df['h_long_rtc_gap_{}'.format(strat_version)].iloc[open_i] * config.tr_set.decay_gap * decay_share\n","    except:\n","        pass\n","\n","    if open_side == OrderSide.SELL: \n","      if l[j] <= tp_arr[tp_j]: # and partial_tp_cnt == tp_i:  # we use static tp now\n","        # if l[j] <= tp_arr[j] <= h[j]: --> 이건 잘못되었음\n","        # partial_tp_cnt += 1 --> partial_tp 보류\n","\n","        # ------ dynamic tp ------ #\n","        if tp_arr[j] != tp_arr[j - 1] and not config.tp_set.static_tp:\n","          # tp limit 이 불가한 경우 - open 이 이미, tp 를 넘은 경우\n","          if o[j] < tp_arr[j]:\n","              tp = o[j]\n","          # tp limit 이 가능한 경우 - open 이 아직, tp 를 넘지 않은 경우\n","          else:\n","              tp = tp_arr[j]\n","        # ------ static tp ------ #\n","        else:\n","          #   tp limit 이 불가한 경우 - open 이 이미, tp 를 넘은 경우\n","          if o[j] < tp_arr[tp_j]:  # static 해놓고 decay 사용하면 dynamic 이니까\n","            if config.tr_set.decay_gap != \"None\" and decay_remain == 0:\n","                tp = o[j]  # tp_j -> open_i 를 가리키기 때문에 decay 는 한번만 진행되는게 맞음\n","            else:\n","                tp = tp_arr[tp_j]\n","          else:\n","              tp = tp_arr[tp_j]\n","        \n","        if tp_i == len_tps - 1:\n","          exit_done = 1  # partial 을 고려해 exit_done = 1 상태는 tp_i 가 last_index 로 체결된 경우만 해당\n","\n","    else:\n","      if h[j] >= tp_arr[tp_j]:\n","        # ------ dynamic tp ------ #\n","        if tp_arr[j] != tp_arr[j - 1] and not config.tp_set.static_tp:\n","          if o[j] > tp_arr[j]:\n","            tp = o[j]\n","          else:\n","            tp = tp_arr[j]\n","\n","        # ------ static tp ------ #\n","        else:\n","          if o[j] > tp_arr[tp_j]:\n","            if config.tr_set.decay_gap != \"None\" and decay_remain == 0:\n","                tp = o[j]\n","            else:\n","                tp = tp_arr[tp_j]\n","          else:\n","              tp = tp_arr[tp_j]\n","\n","        if tp_i == len_tps - 1:\n","          exit_done = 1  # partial 을 고려해 exit_done = 1 상태는 tp_i 가 last_index 로 체결된 경우만 해당\n","\n","  if exit_done:\n","    fee += config.trader_set.limit_fee\n","\n","  return exit_done, tp, fee\n","\n","\n","def check_market_tp_exec(config, open_i, j, len_df, fee, open_side, cross_on, exit_done, np_datas):  \n","  np_timeidx, c, bb_lower_5m, bb_upper_5m, rsi_exit = np_datas\n","  tp = None  \n","  strat_version = config.strat_version\n","\n","  # ------ timestamp ------ #\n","  if config.tp_set.time_tp:\n","    if np_timeidx[j] % config.loc_set.point.tf_entry == config.loc_set.point.tf_entry - 1 and j - open_i >= config.loc_set.point.tf_entry:\n","      exit_done = 1\n","\n","  # ------ rsi ------ # -> vectorize 가능함 => 추후 적용\n","  if strat_version in rsi_out_stratver:\n","    if open_side == OrderSide.SELL:\n","      if (rsi_exit[j - 1] >= 50 - config.loc_set.point.osc_band) & (rsi_exit[j] < 50 - config.loc_set.point.osc_band):\n","        exit_done = 1\n","    else:\n","      if (rsi_exit[j - 1] <= 50 + config.loc_set.point.osc_band) & (rsi_exit[j] > 50 + config.loc_set.point.osc_band):\n","        exit_done = 1\n","\n","  # ------------ early out ------------ #\n","  # ------ bb_upper early out ------ # --> cross_on 기능은 ide latency 개선 여부에 해당되지 않음\n","  if strat_version in ['v5_2']:\n","    if open_side == OrderSide.SELL:\n","      if c[j] < bb_lower_5m[j] < c[j - 1]:\n","        cross_on = 1\n","      if cross_on == 1 and c[j] > bb_upper_5m[j] > c[j - 1]:\n","        exit_done = 1\n","    else:\n","      if c[j] > bb_upper_5m[j] > c[j - 1]:\n","        cross_on = 1\n","      if cross_on == 1 and c[j] < bb_lower_5m[j] < c[j - 1]:\n","        exit_done = 1\n","\n","  if exit_done:\n","    tp = c[j]\n","    fee += config.trader_set.market_fee\n","\n","  return exit_done, cross_on, tp, fee\n","\n","\n","def check_out(config, open_i, j, out_j, len_df, fee, open_side, exit_done, np_datas):\n","  o, h, l, c, out_arr = np_datas\n","  tp = None\n","\n","  if config.out_set.hl_out:\n","    if open_side == OrderSide.SELL: \n","      if h[j] >= out_arr[out_j]:  # check out only once\n","        exit_done = 1\n","    else:\n","      if l[j] <= out_arr[out_j]:  # check out only once\n","        exit_done = 1\n","  else:  # close_out\n","    if open_side == OrderSide.SELL:\n","      if c[j] >= out_arr[out_j]:  # check out only once\n","        exit_done = 1\n","    else:\n","      if c[j] <= out_arr[out_j]:  # check out only once\n","        tp = c[j]\n","        exit_done = 1\n","        \n","  if exit_done:\n","    if config.out_set.hl_out:\n","      tp = out_arr[out_j]\n","    else:\n","      tp = c[j]\n","    \n","    if open_side == OrderSide.SELL:\n","      if o[j] >= out_arr[out_j]:\n","        tp = o[j]\n","    else:\n","      if o[j] <= out_arr[out_j]:\n","        tp = o[j]\n","\n","    fee += config.trader_set.market_fee\n","\n","  return exit_done, tp, fee\n"],"metadata":{"id":"qfbtFVMR01UJ","executionInfo":{"status":"ok","timestamp":1645703289974,"user_tz":-540,"elapsed":1726,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"execution_count":133,"outputs":[]},{"cell_type":"markdown","source":["#### garbage"],"metadata":{"id":"WC0ujlYg0DZD"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"TdAn2bHHBWMF"},"outputs":[],"source":["#       local env. 에서 load_data (.ftr) 는 colab (idep) 와 동기화되기 힘들 것 -> local 은 realtime\n","for key in ftr_list:\n","\n","    if config.trader_set.symbol in key:\n","        pass\n","    else:\n","        continue\n","\n","    \n","\n","    survey_df = pd.DataFrame(index=x_val_list, columns=y_val_cols)\n","    short_survey_df = pd.DataFrame(index=x_val_list, columns=y_val_cols)\n","    long_survey_df = pd.DataFrame(index=x_val_list, columns=y_val_cols)\n","    rev_survey_df = pd.DataFrame(index=x_val_list, columns=y_rev_val_cols)\n","    rev_short_survey_df = pd.DataFrame(index=x_val_list, columns=y_rev_val_cols)\n","    rev_long_survey_df = pd.DataFrame(index=x_val_list, columns=y_rev_val_cols)\n","\n","    for survey_i, just_loop in enumerate(range(1)):\n","    # for survey_i, config.loc_set.zone.tr_thresh in enumerate(x_val_list):\n","    # for survey_i, config.loc_set.zone.short_spread in enumerate(x_val_list):\n","    # for survey_i, config.loc_set.zone.long_spread in enumerate(x_val_list):\n","    # for survey_i, config.loc_set.zone.dt_k in enumerate(x_val_list):\n","    # for survey_i, config.loc_set.zone.dc_period in enumerate(x_val_list):\n","    # for survey_i, config.loc_set.zone.ei_k in enumerate(x_val_list):\n","    # for survey_i, config.loc_set.zone.dr_error in enumerate(x_val_list):\n","    # for survey_i, config.loc_set.zone.bbz_itv in enumerate(itv_list):\n","    # for survey_i, config.loc_set.zone.gap_mply in enumerate(x_val_list):\n","    # for survey_i, config.loc_set.zone.ad_idx in enumerate(x_val_list):\n","    # for survey_i, config.loc_set.point.tf_entry in enumerate(x_val_list):\n","    # for survey_i, config.loc_set.point.candle_ratio in enumerate(x_val_list):\n","    # for survey_i, config.loc_set.point.body_ratio in enumerate(x_val_list):\n","    # for survey_i, config.loc_set.point.candle_ratio2 in enumerate(x_val_list):\n","    # for survey_i, config.loc_set.point.body_ratio2 in enumerate(x_val_list):\n","    # for survey_i, config.loc_set.point.osc_band in enumerate(x_val_list):\n","    # for survey_i, config.loc_set.point2.ce_gap in enumerate(x_val_list):\n","    # for survey_i, config.tr_set.ep_gap in enumerate(x_val_list):\n","    # for survey_i, config.tr_set.out_gap in enumerate(x_val_list):\n","    # for survey_i, config.tr_set.tp_gap in enumerate(x_val_list):\n","    # for survey_i, config.lvrg_set.leverage in enumerate(x_val_list):\n","    # for survey_i, config.lvrg_set.target_pct in enumerate(x_val_list):\n","    # for survey_i, config.lvrg_set.target_pct in enumerate(x_val_list):\n","    # for survey_i, config.tp_set.decay_term in enumerate(x_val_list):\n","    # for survey_i, outg_dc_itv_num in enumerate(x_val_list):\n","    # for survey_i, exp_itv in enumerate(itv_list):\n","    # for survey_i, zone_dt_k in enumerate(x_val_list):\n","    # for survey_i, t_out_gap in enumerate(x_val_list):\n","    # for survey_i, zone_dc_period in enumerate(x_val_list):\n","    # for survey_i, early_out_tpg in enumerate(x_val_list):\n","    # for survey_i, ema_period in enumerate(x_val_list):\n","\n","      start_0 = time.time()\n","\n","      try:\n","\n","          print(\"config.strat_version :\", config.strat_version)\n","          print(\"config.loc_set.point.exp_itv :\", config.loc_set.point.exp_itv)\n","          print(\"config.loc_set.point.tpg_itv1 :\", config.loc_set.point.tpg_itv1)\n","          print(\"config.loc_set.point.tpg_itv0 :\", config.loc_set.point.tpg_itv0)\n","          print(\"config.loc_set.point.outg_itv1 :\", config.loc_set.point.outg_itv1)\n","          print(\"config.loc_set.point.outg_itv0 :\", config.loc_set.point.outg_itv0)\n","          print(\"config.loc_set.point.outg_dc_period :\", config.loc_set.point.outg_dc_period)\n","          print(\"-----------------------------------\")\n","          # print(\"dtk_dc_itv :\", dtk_dc_itv)\n","          # print(\"config.loc_set.dtk_dc_itv_num :\", config.loc_set.dtk_dc_itv_num :\",)\n","          print(\"config.loc_set.zone.short_spread :\", config.loc_set.zone.short_spread)\n","          print(\"config.loc_set.zone.long_spread :\", config.loc_set.zone.long_spread)\n","          print(\"config.loc_set.zone.tr_thresh :\", config.loc_set.zone.tr_thresh)\n","          print(\"config.loc_set.zone.dtk_itv :\", config.loc_set.zone.dtk_itv)\n","          print(\"config.loc_set.zone.dt_k :\", config.loc_set.zone.dt_k)\n","          print(\"config.loc_set.zone.ei_k :\", config.loc_set.zone.ei_k)\n","          print(\"config.loc_set.zone.dc_period :\", config.loc_set.zone.dc_period)\n","          print(\"config.loc_set.zone.use_dtk_line :\", config.loc_set.zone.use_dtk_line)\n","\n","          print(\"config.loc_set.zone.zone_rejection :\", config.loc_set.zone.zone_rejection)\n","          print(\"config.loc_set.zone.bbz_itv :\", config.loc_set.zone.bbz_itv)\n","          print(\"config.loc_set.zone.gap_mply :\", config.loc_set.zone.gap_mply)\n","          print(\"config.loc_set.zone.ad_idx :\", config.loc_set.zone.ad_idx)\n","          print(\"config.loc_set.zone.zone_dt_k :\", config.loc_set.zone.zone_dt_k)\n","          print(\"config.loc_set.zone.zone_dc_period :\", config.loc_set.zone.zone_dc_period)\n","          # print(\"config.loc_set.open_shift :\", config.loc_set.open_shift)\n","          print(\"-----------------------------------\")\n","          # print(\"config.ep_set.dr_error :\", config.ep_set.dr_error)\n","          print(\"config.loc_set.point.tf_entry :\", config.loc_set.point.tf_entry)\n","          print(\"config.loc_set.point.htf_entry :\", config.loc_set.point.htf_entry)\n","          print(\"config.loc_set.point.candle_ratio :\", config.loc_set.point.candle_ratio)\n","          print(\"config.loc_set.point.body_ratio :\", config.loc_set.point.body_ratio)\n","          print(\"config.loc_set.point.candle_ratio2 :\", config.loc_set.point.candle_ratio2)\n","          print(\"config.loc_set.point.body_ratio2 :\", config.loc_set.point.body_ratio2)\n","          print(\"config.loc_set.point.osc_band :\", config.loc_set.point.osc_band)\n","          print(\"config.loc_set.point2.ce_gap :\", config.loc_set.point2.ce_gap)\n","          print(\"config.tr_set.ep_gap :\", config.tr_set.ep_gap)\n","          print(\"config.tr_set.tp_gap :\", config.tr_set.tp_gap)\n","          print(\"config.tr_set.decay_gap :\", config.tr_set.decay_gap)\n","          print(\"config.tr_set.out_gap :\", config.tr_set.out_gap)\n","          print(\"config.tr_set.c_ep_gap :\", config.tr_set.c_ep_gap)\n","          print(\"config.tr_set.t_out_gap :\", config.tr_set.t_out_gap)\n","          print(\"-----------------------------------\")\n","          print(\"config.lvrg_set.leverage :\", config.lvrg_set.leverage)\n","          print(\"config.lvrg_set.static_lvrg :\", config.lvrg_set.static_lvrg)\n","          print(\"config.lvrg_set.target_pct :\", config.lvrg_set.target_pct)\n","          print(\"-----------------------------------\")\n","          print(\"config.ep_set.entry_type :\", config.ep_set.entry_type)\n","          print(\"config.tp_set.tp_type :\", config.tp_set.tp_type)\n","          print(\"config.tp_set.static_tp :\", config.tp_set.static_tp)\n","          print(\"config.tp_set.decay_term :\", config.tp_set.decay_term)\n","          print(\"rsi_out_stratver :\", rsi_out_stratver)\n","          print(\"config.out_set.use_out :\", config.out_set.use_out)\n","          print(\"config.out_set.out_type :\", config.out_set.out_type)\n","\n","      except Exception as e:\n","          print(e)\n","\n","      #       temp survey     #\n","      # if 'bb_upper_15m' in res_df.columns:\n","      #   res_df.drop(['bb_upper_15m', 'bb_lower_15m'], axis=1, inplace=True)\n","      # res_df = bb_level(res_df, '15m', config.loc_set.zone.gap_mply)\n","\n","      # ema_period = 155\n","      # print(\"ema_period :\", ema_period)\n","\n","      # df_5T = to_htf(res_df, '5T', offset='1h')\n","      # df_5T['ema_5m'] = ema(df_5T['close'], ema_period)   # ema formula issue\n","      # res_df.drop(['ema_5m'], axis=1, inplace=True, errors='ignore')\n","      # res_df = res_df.join(to_lower_tf_v2(res_df, df_5T, [-1]), how='inner')\n","\n","      \n","\n","      print(\"enlist_rtc ~ enlist_tr elapsed time :\", time.time() - start_0)\n","\n","      #       trading : 여기도 체결 결과에 대해 묘사함       #\n","      trade_list = []\n","      h_trade_list = []\n","      leverage_list = []\n","      fee_list = []\n","      short_fee_list = []\n","      long_fee_list = []\n","      open_list = []\n","      zone_list = []\n","      side_list = []\n","      strat_ver_list = []\n","\n","      tp_ratio_list = []\n","      short_tp_ratio_list = []\n","      long_tp_ratio_list = []\n","\n","      dr_list = []\n","      short_dr_list = []\n","      long_dr_list = []\n","\n","      liqd_list = []\n","      short_liqd_list = []\n","      long_liqd_list = []\n","\n","      nontp_liqd_list = []\n","      nontp_short_liqd_list = []\n","      nontp_long_liqd_list = []\n","\n","      nontp_pr_list = []\n","      nontp_short_pr_list = []\n","      nontp_long_pr_list = []\n","\n","      nontp_short_indexs = []\n","      nontp_long_indexs = []\n","\n","      nontp_short_ep_list = []\n","      nontp_long_ep_list = []\n","\n","      pr_list = []\n","      long_list = []\n","      short_list = []\n","\n","      h_pr_list = []\n","      h_long_list = []\n","      h_short_list = []\n","\n","      ep_tp_list = []\n","      h_ep_tp_list = []\n","      tp_state_list = []\n","\n","      i = 0\n","      while 1:\n","          # for i in range(len(res_df)):\n","\n","          run = 0\n","          open_side = None\n","\n","          for utils_, cfg_ in zip(utils_list, cfg_list):\n","\n","              #       entry_score     #\n","              if res_df['entry_{}'.format(cfg_.strat_version)][i] == cfg_.ep_set.short_entry_score:\n","\n","                  #       ep_loc      #\n","                  if public_override:\n","                      res_df, open_side, zone = short_ep_loc(res_df, cfg_,\n","                                                          i,\n","                                                          np_timeidx, show_detail)\n","                  else:\n","                      res_df, open_side, zone = utils_public.short_ep_loc(res_df, cfg_,\n","                                                                        i,\n","                                                                        np_timeidx, show_detail)\n","                  if open_side is not None:   # 조건 만족시 바로 break\n","                      #       assign      #\n","                      config = cfg_\n","                      break\n","\n","              #       entry_score     #\n","              elif res_df['entry_{}'.format(cfg_.strat_version)][i] == -cfg_.ep_set.short_entry_score:\n","\n","                  #       ep_loc      #\n","                  if public_override:\n","                      res_df, open_side, zone = long_ep_loc(res_df, cfg_,\n","                                                              i,\n","                                                              np_timeidx, show_detail)\n","                  else:\n","                      res_df, open_side, zone = utils_public.long_ep_loc(res_df, cfg_,\n","                                                                          i,\n","                                                                          np_timeidx, show_detail)\n","                  if open_side is not None:\n","                      #       assign      #\n","                      config = cfg_\n","                      break\n","\n","              if not multi_mode:\n","                  break\n","\n","          if open_side is None:\n","              i += 1\n","              if i >= len(res_df):\n","                  break\n","              continue\n","\n","          if open_side == utils_public.OrderSide.SELL:\n","\n","              initial_i = i\n","              # print(\"short_ep_loc passed !\")\n","\n","              # --------------------- config 가 확정된 이후의 setting --------------------- #\n","              strat_version = config.strat_version\n","\n","              # ------- tp / out fee calc ------- #\n","              tp_fee, out_fee = calc_tp_out_fee(config)\n","\n","              # p_i 의 용도 모르겠음\n","              # if config.out_set.static_out:\n","              #     p_i = initial_i\n","              # else:\n","              #     p_i = i\n","\n","              # ------- fee init ------- #\n","              if config.ep_set.entry_type == 'LIMIT':\n","                  fee = config.trader_set.limit_fee\n","              else:\n","                  fee = config.trader_set.market_fee\n","\n","              # --------------- set partial tp --------------- #\n","              short_tps = [res_df['short_tp_{}'.format(strat_version)]]\n","              # short_tps = [short_tp2, short_tp] # org\n","              # short_tps = [short_tp, short_tp2]\n","\n","              ep_j = initial_i\n","              out_j = initial_i\n","\n","              # -------------- limit waiting : limit_out -------------- #\n","\n","              if config.ep_set.entry_type == \"LIMIT\":\n","\n","                  # allow_ep_in = 0 if strat_version in ['v5_2'] else 1\n","                  allow_ep_in = 0\n","                  entry_done = 0\n","                  entry_open = 0\n","                  prev_sar = None\n","\n","                  # for e_j in range(i, len(res_df)): # entry_signal 이 open 기준 (해당 bar 에서 체결 가능함)\n","                  if i + 1 >= len(res_df):  # i should be checked if e_j starts from i+1\n","                      break\n","                  for e_j in range(i + 1, len(res_df)):  # entry signal이 close 기준 일 경우\n","\n","                      if not config.ep_set.static_ep:\n","                          ep_j = e_j\n","                          out_j = e_j\n","\n","                      if config.tp_set.static_tp:\n","                          # if config.ep_set.tpout_onexec:\n","                          #   tp_j = e_j\n","                          # else:\n","                          tp_j = initial_i\n","                      else:\n","                          tp_j = e_j\n","\n","                          #             1. ep 설정\n","                      # -------------- np.inf ep -------------- #\n","                      # if short_ep.iloc[initial_i] == np.inf:\n","                      #   break\n","\n","                      #     1. check ep_out     #\n","                      if res_df['low'].iloc[e_j] <= res_df['h_short_rtc_1_{}'.format(strat_version)].iloc[tp_j] - \\\n","                              res_df['h_short_rtc_gap_{}'.format(strat_version)].iloc[\n","                                  tp_j] * config.loc_set.zone.ei_k:\n","                          break\n","\n","                          # elif strat_version == 'v5_2':\n","                          # if res_df['low'].iloc[e_j] <= res_df['short_tp_{}'.format(strat_version)].iloc[tp_j]: # ep_out : tp_done\n","                          # # if np_timeidx[e_j] % config.loc_set.point.tf_entry == config.loc_set.point.tf_entry - 1:\n","                          #   break\n","\n","                          # elif (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[e_j - 1] >= 50 - config.loc_set.point.osc_band) & \\\n","                          #                  (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[e_j] < 50 - config.loc_set.point.osc_band):\n","                          #   break\n","\n","                      # if config.loc_set.zone.c_itv_ticks != \"None\":\n","\n","                      #   if np_timeidx[e_j] % config.loc_set.zone.c_itv_ticks == config.loc_set.zone.c_itv_ticks - 1:\n","                      #     break\n","\n","                      #     2. ep_loc.point2\n","                      if public_override:\n","                          allow_ep_in, out_j = short_point2(res_df, config, e_j, out_j, allow_ep_in)\n","                      else:\n","                          allow_ep_in, out_j = utils_public.short_point2(res_df, config, e_j, out_j,\n","                                                                          allow_ep_in)  # not defined yet,\n","\n","                      #     3. check ep_in       #\n","                      if allow_ep_in and res_df['high'].iloc[e_j] >= res_df['short_ep_{}'.format(strat_version)].iloc[\n","                          ep_j]:\n","                          entry_done = 1\n","                          # print(\"res_df['high'].iloc[e_j] :\", res_df['high'].iloc[e_j])\n","                          # print(\"e_j :\", e_j)\n","\n","                          #     이미, e_j open 이 ep 보다 높은 경우, entry[ep_j] => -2 로 변경   #\n","                          if res_df['open'].iloc[e_j] >= res_df['short_ep_{}'.format(strat_version)].iloc[ep_j]:\n","                              entry_open = 1\n","                          break\n","\n","                  i = e_j\n","                  # print(\"i = e_j :\", i)\n","\n","                  if entry_done:\n","                      pass\n","\n","                  else:\n","                      i += 1\n","                      if i >= len(res_df):\n","                          break\n","                      continue\n","\n","              # ----------------- end wait ----------------- #\n","\n","              # if e_j - initial_i >= 200:\n","              #   print(\"e_j, initial_i :\", e_j, initial_i)\n","              # print(\"e_j - initial_i :\", e_j - initial_i)\n","              # print()\n","\n","              open_list.append(initial_i)\n","              zone_list.append(zone)\n","              side_list.append('s')\n","              strat_ver_list.append(strat_version)\n","\n","              #     e_j 라는 변수는 MARKET 에 있어서 정의되서는 안되는 변수임   #\n","              if config.ep_set.entry_type == 'MARKET':\n","                  # try:\n","                  #   ep_list = [res_df['close'].iloc[e_j]]\n","                  # except Exception as e:\n","                  #   # print('error in ep_list (initial) :', e)\n","                  ep_list = [res_df['close'].iloc[ep_j]]\n","\n","              else:\n","                  if not entry_open:\n","                      ep_list = [res_df['short_ep_{}'.format(strat_version)].iloc[ep_j]]\n","\n","                  else:\n","                      #   ep_j 는 항상 있음, LIMIT 인 경우 e_j 도 항상 존재함 --> dynamic_ep 여부에 따라 ep_j = e_j 가 되는 경우만 존재할 뿐임\n","                      #   따라서, ep_j 로 통일 가능함 (dynamic_ep 인 경우, ep_j = e_j 되어있음)\n","                      fee = config.trader_set.market_fee\n","                      ep_list = [res_df['open'].iloc[e_j]]  # --> 체결이 되는 e_j idx 기준으로 하는게 맞음\n","\n","              if not config.lvrg_set.static_lvrg:\n","\n","                  ep_ = ep_list[0]\n","                  out_ = res_df['short_out_{}'.format(strat_version)].iloc[out_j]\n","                  if public_override:\n","                      config.lvrg_set.leverage = lvrg_set(res_df, config, \"SELL\", ep_, out_, fee)\n","                  else:\n","                      config.lvrg_set.leverage = utils_public.lvrg_set(res_df, config, \"SELL\", ep_, out_, fee)\n","\n","                  # -------------- leverage rejection -------------- #\n","                  if config.lvrg_set.leverage == None:\n","                      open_list.pop()\n","                      zone_list.pop()\n","                      side_list.pop()\n","                      strat_ver_list.pop()\n","\n","                      i += 1\n","                      if i >= len(res_df):\n","                          break\n","                      continue\n","\n","              leverage_list.append(config.lvrg_set.leverage)\n","\n","              # try:\n","              if config.ep_set.entry_type == \"MARKET\":\n","                  ep_idx_list = [\n","                      ep_j]  # ep_j 는 ep_type 유관하게 존재하는 변수니까 try 에 걸어두는게 맞음 <-- # market 인데, e_j 변수가 할당된 경우 고려해야함\n","              else:\n","                  ep_idx_list = [e_j]\n","\n","              out_idx_list = [out_j]\n","\n","              # except Exception as e:\n","              #   # print('error in ep_idx_list :', e)\n","              #   ep_idx_list = [e_j]\n","\n","              tp_list = []\n","              tp_idx_list = []\n","\n","              partial_tp_cnt = 0\n","              hedge_cnt = 1\n","\n","              h_ep, h_tp = None, None\n","              h_i, h_j = None, None\n","\n","              trade_done = 0\n","              cross_on = 0\n","              out = 0\n","              # config.out_set.retouch\n","\n","              #     Todo    #\n","              #      1. future_work : 상단의 retouch 와 겹침\n","              config.out_set.retouch = 0\n","\n","              if i == len(res_df) - 1:  # if j start from i + 1\n","                  open_list.pop()\n","                  zone_list.pop()\n","                  side_list.pop()\n","              for j in range(i + 1, len(res_df)):\n","\n","                  # for j in range(i, len(res_df)):\n","\n","                  if config.tp_set.static_tp:\n","                      if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","                          tp_j = ep_j  # tpout_onexec = using dynamic_ep --> using ep_j 에 대한 이유\n","                      else:\n","                          tp_j = initial_i\n","                  else:\n","                      tp_j = j\n","\n","                  if config.out_set.static_out:\n","                      if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","                          out_j = ep_j\n","                      # else:\n","                      #   out_j = initial_i   # --> referenced upper phase as initail_j / e_j (start of limit wait)\n","                  else:\n","                      out_j = j\n","\n","                  # -------------- sub ep -------------- #\n","                  # if res_df['high'].iloc[j - 1] <= res_df['sar2'].iloc[j - 1] and res_df['high'].iloc[j] > res_df['sar2'].iloc[j]:\n","\n","                  #   sub_ep = res_df['sar2'].iloc[j - 1]\n","\n","                  #   if sub_ep < ep_list[-1]:\n","                  #     ep_list.append(sub_ep)\n","                  #     ep_idx_list.append(j)\n","\n","                  # -------------- hedge only once -------------- #\n","                  #             일단, h_quantity 는 초기 진입과 동일하게 설정         #\n","                  # if res_df['high'].iloc[j] >= res_df['minor_ST2_Up'].iloc[j] and hedge_cnt == 1:\n","                  # if res_df['close'].iloc[j] >= res_df['minor_ST2_Up'].iloc[j] and hedge_cnt == 1:\n","                  # if res_df['close'].iloc[j] >= res_df['minor_ST3_Up'].iloc[j] and hedge_cnt == 1:\n","\n","                  #   h_ep = res_df['close'].iloc[j]\n","                  #   hedge_cnt -= 1\n","                  #   h_i = j\n","\n","                  # -------------- ultimate limit tp -------------- #\n","                  if not config.tp_set.non_tp:\n","\n","                      #               1. by price line             #\n","                      if config.tp_set.tp_type == 'LIMIT' or config.tp_set.tp_type == \"BOTH\":\n","\n","                          for s_i, short_tp_ in enumerate(short_tps):\n","\n","                              #     decay adjustment    #\n","                              #     tp_j includes dynamic_j   #\n","                              try:\n","                                  if config.tr_set.decay_gap != \"None\":\n","                                      decay_share = (j - initial_i) // config.tp_set.decay_term\n","                                      decay_remain = (j - initial_i) % config.tp_set.decay_term\n","                                      if j != initial_i and decay_remain == 0:\n","                                          short_tp_.iloc[tp_j] += \\\n","                                          res_df['h_short_rtc_gap_{}'.format(strat_version)].iloc[\n","                                              initial_i] * config.tr_set.decay_gap * decay_share\n","\n","                              except:\n","                                  pass\n","\n","                              if res_df['low'].iloc[j] <= short_tp_.iloc[\n","                                  tp_j] and partial_tp_cnt == s_i:  # we use static tp now\n","                                  # if res_df['low'].iloc[j] <= short_tp_.iloc[j]:\n","                                  # if res_df['low'].iloc[j] <= short_tp_.iloc[j] <= res_df['high'].iloc[j]: --> 이건 잘못되었음\n","\n","                                  if s_i == len(short_tps) - 1:\n","                                      trade_done = 1\n","\n","                                  partial_tp_cnt += 1\n","\n","                                  #         dynamic tp        #\n","                                  # if 0:\n","                                  if short_tp_.iloc[j] != short_tp_.iloc[j - 1] and not config.tp_set.static_tp:\n","\n","                                      #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 #\n","                                      # if res_df['open'].iloc[j] < short_tp_.iloc[initial_i]:\n","                                      if res_df['open'].iloc[j] < short_tp_.iloc[j]:\n","\n","                                          # tp = short_tp_.iloc[initial_i]\n","                                          tp = res_df['open'].iloc[j]\n","\n","                                          if trade_done:\n","                                              tp_state_list.append(\"d-short_open {}\".format(strat_version))\n","\n","                                      #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 #\n","                                      else:\n","\n","                                          # tp = short_tp_.iloc[initial_i]\n","                                          tp = short_tp_.iloc[j]\n","                                          # tp = res_df['open'].iloc[j]\n","\n","                                          if trade_done:\n","                                              tp_state_list.append(\"d-short_tp {}\".format(strat_version))\n","\n","                                  #         static tp         #\n","                                  else:\n","\n","                                      #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 #\n","                                      #   non_inversion 의 경우, short_tp 가 가능함   #\n","\n","                                      # if res_df['open'].iloc[j] < short_tp_.iloc[initial_i]:\n","                                      if res_df['open'].iloc[j] < short_tp_.iloc[tp_j]:\n","\n","                                          # tp = short_tp_.iloc[initial_i]\n","\n","                                          if config.tr_set.decay_gap != \"None\" and decay_remain == 0:\n","                                              tp = res_df['open'].iloc[\n","                                                  j]  # tp_j -> initial_i 를 가리키기 때문에 decay 는 한번만 진행되는게 맞음\n","                                          else:\n","                                              tp = short_tp_.iloc[tp_j]\n","\n","                                          if trade_done:\n","                                              tp_state_list.append(\"s-short_tp {}\".format(strat_version))\n","\n","                                      #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 #\n","                                      else:\n","\n","                                          # tp = short_tp_.iloc[initial_i]\n","                                          tp = short_tp_.iloc[tp_j]\n","\n","                                          # tp = res_df['open'].iloc[j]\n","\n","                                          if trade_done:\n","                                              tp_state_list.append(\"s-short_tp {}\".format(strat_version))\n","\n","                                  tp_list.append(tp)\n","                                  tp_idx_list.append(j)\n","                                  fee += config.trader_set.limit_fee\n","\n","                      #           2. by signal        #\n","                      if config.tp_set.tp_type == 'MARKET' or (config.tp_set.tp_type == \"BOTH\" and not trade_done):\n","\n","                          market_tp = 0\n","\n","                          # -------------- sar tp -------------- #\n","                          # if (res_df['high'].iloc[j] >= res_df['sar2'].iloc[j]) & \\\n","                          #   (res_df['high'].iloc[j - 1] < res_df['sar2'].iloc[j - 1]) & \\\n","                          #   (res_df['high'].iloc[j - 2] < res_df['sar2'].iloc[j - 2]):\n","\n","                          #       inversion     #\n","                          # if (res_df['low'].iloc[j] <= res_df['sar2'].iloc[j]) & \\\n","                          #   (res_df['low'].iloc[j - 1] > res_df['sar2'].iloc[j - 1]) & \\\n","                          #   (res_df['low'].iloc[j - 2] > res_df['sar2'].iloc[j - 2]):\n","\n","                          # ----------- st short ----------- #\n","                          # if res_df['close'].iloc[j] <= res_df['short_tp'].iloc[tp_j]:\n","\n","                          # -------------- sar pb tp -------------- #\n","                          # if res_df['low'].iloc[j] <= res_df['short_tp'].iloc[initial_i]:\n","\n","                          # -------------- st tp -------------- #\n","                          # if res_df['close'].iloc[j] > res_df['middle_line'].iloc[j]:\n","\n","                          # -------------- fisher tp -------------- #\n","                          # if entry[j] == 1:\n","\n","                          # -------------- timestamp -------------- #\n","                          if config.tp_set.time_tp:\n","                              if np_timeidx[\n","                                  j] % config.loc_set.zone.c_itv_ticks == config.loc_set.zone.c_itv_ticks - 1 and \\\n","                                      j - initial_i >= config.loc_set.zone.c_itv_ticks:\n","                                  market_tp = 1\n","\n","                                  # -------------- rsi -------------- #\n","                          if strat_version in rsi_out_stratver:\n","                              if (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[\n","                                      j - 1] >= 50 - config.loc_set.point.osc_band) & \\\n","                                      (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[\n","                                            j] < 50 - config.loc_set.point.osc_band):\n","                                  # if (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j - 1] <= 50 - config.loc_set.point.osc_band) & \\\n","                                  #                  (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j] > 50 - config.loc_set.point.osc_band):\n","                                  market_tp = 1\n","\n","                              # -------------- cci -------------- #\n","                              # if (res_df['cci_%s' % config.loc_set.point.exp_itv].iloc[j - 1] >= -config.loc_set.point.osc_band) & \\\n","                              #                  (res_df['cci_%s' % config.loc_set.point.exp_itv].iloc[j] < -config.loc_set.point.osc_band):\n","                              #   market_tp = 1\n","\n","                          # ---------------------------- early out ---------------------------- #\n","\n","                          # #         rsi slight touch        #\n","                          if allow_osc_touch:\n","                              if (np.min(res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[\n","                                          initial_i:j]) < 50 - config.loc_set.point.osc_band + rsi_gap) & \\\n","                                      (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j] >= 50):\n","                                  market_tp = 1\n","\n","                                  #           tp early out          #\n","                          # # if (np.min(res_df['low'].iloc[e_j:j]) < res_df['short_tp'].iloc[tp_j]) & \\\n","                          # if (np.min(res_df['low'].iloc[e_j:j]) < res_df['h_short_rtc_1'].iloc[tp_j] - res_df['h_short_rtc_gap'].iloc[tp_j] * early_out_tpg) & \\\n","                          #   (res_df['close'].iloc[j] >= res_df['short_ep'].iloc[ep_j]):\n","                          #   market_tp = 1\n","\n","                          # if strat_version == \"v7\":\n","                          #   if res_df['dc_upper_1m'].iloc[j] > res_df['dc_upper_5m'].iloc[j]:\n","                          #     market_tp = 1\n","\n","                          #         bb_upper early out        # --> cross_on 기능은 ide latency 개선 여부에 해당되지 않음\n","                          if strat_version in ['v5_2']:\n","                              if res_df['close'].iloc[j] < res_df['bb_lower_5m'].iloc[j] < res_df['close'].iloc[\n","                                  j - 1]:\n","                                  cross_on = 1\n","\n","                              if cross_on == 1 and res_df['close'].iloc[j] > res_df['bb_upper_5m'].iloc[j] > \\\n","                                      res_df['close'].iloc[j - 1]:\n","                                  market_tp = 1\n","\n","                          if market_tp:\n","\n","                              tp = res_df['close'].iloc[j]\n","                              # tp = res_df['open'].iloc[j]\n","                              trade_done = 1\n","\n","                              if trade_done:\n","                                  tp_state_list.append(\"short close tp\")\n","\n","                              tp_list.append(tp)\n","                              tp_idx_list.append(j)\n","                              fee += config.trader_set.market_fee\n","\n","                  # -------------- out -------------- #\n","                  if not trade_done and config.out_set.use_out and j != len(res_df) - 1:\n","\n","                      # -------------- macd -------------- #\n","                      # if res_df['macd_hist3'].iloc[j] > 0:  #  macd out\n","                      # if res_df['macd_hist3'].iloc[i] < 0 and res_df['macd_hist3'].iloc[j] > 0:\n","\n","                      # -------------- st config.out_set.retouch -------------- #\n","                      # out = 1 상태면 동일 tick 에서 config.out_set.retouch 를 조사할 거기 때문에, 먼저 검사함\n","                      # 그리고, out 기준이 close 라 이게 맞음\n","                      # close 가 short_out 보다 올라가있는 상태일테니 low 를 조사하는게 맞음\n","                      # if out and res_df['low'].iloc[j] <= short_out.iloc[out_j]:\n","                      #   config.out_set.retouch = 1\n","\n","                      # ------- 일정시간 이상, dynamic_out 적용 ------ #\n","                      try:\n","                          if j - out_idx >= config.out_set.retouch_out_period:\n","                              static_short_out = res_df['short_out_{}'.format(strat_version)].iloc[j]\n","\n","                      except Exception as e:\n","                          pass\n","\n","                          # ------- static out ------ #\n","                      try:\n","                          if out and res_df['low'].iloc[j] <= static_short_out:\n","                              config.out_set.retouch = 1\n","                      except Exception as e:\n","                          pass\n","\n","                          # ------- config.out_set.retouch out ------ #\n","                      # if out and res_df['low'].iloc[j] <= short_out2.iloc[out_j]:\n","                      #   config.out_set.retouch = 1\n","\n","                      # -------------- st -------------- #\n","                      # if res_df['close'].iloc[j] > res_df['middle_line'].iloc[j]:\n","                      # if res_df['close'].iloc[j] > res_df['minor_ST3_Up'].iloc[j]:\n","                      # if res_df['close'].iloc[j] > upper_middle.iloc[j]:\n","                      # if res_df['close'].iloc[j] > res_df['minor_ST1_Up'].iloc[j]:\n","                      if out == 0:\n","                          if config.out_set.hl_out:\n","                              if res_df['high'].iloc[j] >= res_df['short_out_{}'.format(strat_version)].iloc[\n","                                  out_j]:  # check out only once\n","                                  out = 1\n","\n","                          else:\n","                              if res_df['close'].iloc[j] >= res_df['short_out_{}'.format(strat_version)].iloc[\n","                                  out_j]:  # check out only once\n","                                  out = 1\n","\n","                          # out_idx = j\n","                          # static_short_out = short_out.iloc[out_j]\n","                          # if config.out_set.second_out:\n","                          # static_short_out = short_out.iloc[out_j] + res_df['st_gap'].iloc[out_j] * config.out_set.second_out_gap\n","\n","                      # if out == 0 and res_df['high'].iloc[j] >= short_out.iloc[out_j]: # check out only once\n","                      #   out = 1\n","\n","                      # -------------- sma -------------- #\n","                      # if res_df['close'].iloc[j] > res_df[sma].iloc[j]:\n","\n","                      # -------------- sar -------------- #\n","                      # if res_df['close'].iloc[j] > res_df['minor_ST3_Up'].iloc[j] \\\n","                      #   or res_df['sar2'].iloc[j] <= res_df['high'].iloc[j]:\n","                      # if res_df['close'].iloc[j] > short_out.iloc[initial_i]: # or \\\n","                      #   out = 1\n","                      # res_df['sar2_uptrend'].iloc[j] == 1: # or \\\n","\n","                      # if res_df['sar2_uptrend'].iloc[j] == 1:\n","\n","                      #   if prev_sar is None:\n","                      #     prev_sar = res_df['sar2'].iloc[j - 1]\n","\n","                      #   if res_df['close'].iloc[j] > prev_sar:\n","                      #     out = 1\n","\n","                      # else:\n","                      #   if res_df['close'].iloc[j] > res_df['sar2'].iloc[j]:\n","                      #     out = 1\n","\n","                      # -------------- hl -------------- #\n","                      # if res_df['close'].iloc[j] > short_out.iloc[tp_j]:\n","\n","                      # -------------- stoch -------------- #\n","                      # if res_df['stoch'].iloc[j - 2] >= res_df['stoch'].iloc[j - 1] and \\\n","                      #   res_df['stoch'].iloc[j - 1] < res_df['stoch'].iloc[j] and \\\n","                      #   res_df['stoch'].iloc[j - 1] <= stoch_lower:\n","                      #   out = 1\n","\n","                      # config.out_set.retouch 1 경우, config.out_set.retouch 조건도 있어야함\n","                      if out:\n","                          if config.out_set.retouch:\n","                              if config.out_set.retouch:\n","                                  pass\n","                              else:\n","                                  continue\n","\n","                          else:\n","                              pass\n","\n","                          if config.out_set.price_restoration:\n","                              tp = res_df['short_out_{}'.format(strat_version)].iloc[out_j]\n","                              if config.out_set.second_out:\n","                                  tp = res_df['short_out2_{}'.format(strat_version)].iloc[out_j]\n","\n","                              # if res_df['close'].iloc[j] > tp: # 이 경우를 protect 하는건 insane 임\n","                              #   tp = res_df['close'].iloc[j]\n","\n","                          else:\n","\n","                              if res_df['open'].iloc[j] >= res_df['short_out_{}'.format(strat_version)].iloc[out_j]:\n","                                  tp = res_df['open'].iloc[j]\n","                              else:\n","                                  if config.out_set.hl_out:\n","                                      tp = res_df['short_out_{}'.format(strat_version)].iloc[out_j]\n","                                  else:\n","                                      tp = res_df['close'].iloc[j]\n","\n","                              # if not config.out_set.static_out:\n","                              #   if res_df['open'].iloc[j] >= res_df['short_out_{}'.format(strat_version)].iloc[out_j]: # close 기준이라 이런 조건을 못씀, 차라리 j 를 i 부터 시작\n","                              #     tp = res_df['open'].iloc[j]\n","                              #   else:\n","                              #     tp = res_df['close'].iloc[j]\n","\n","                              # else:\n","                              #   tp = res_df['close'].iloc[j]\n","\n","                          if config.out_set.retouch:  # out 과 open 비교\n","                              if config.out_set.second_out:\n","                                  if res_df['open'].iloc[j] <= res_df['short_out2_{}'.format(strat_version)].iloc[\n","                                      out_j]:\n","                                      tp = res_df['open'].iloc[j]\n","                              else:\n","                                  if res_df['open'].iloc[j] <= res_df['short_out_{}'.format(strat_version)].iloc[\n","                                      out_j]:\n","                                      tp = res_df['open'].iloc[j]\n","\n","                              try:  # static_short_out 인 경우, open 도 고려한 tp set\n","                                  if res_df['open'].iloc[j] <= static_short_out:\n","                                      tp = res_df['open'].iloc[j]\n","                                  else:\n","                                      tp = static_short_out\n","                              except Exception as e:\n","                                  pass\n","\n","                          trade_done = 1\n","                          tp_state_list.append(\"short close_out {}\".format(strat_version))\n","\n","                          tp_list.append(tp)\n","                          tp_idx_list.append(j)\n","                          fee += config.trader_set.market_fee\n","\n","                  # -------------- non tp -------------- #\n","                  if j == len(res_df) - 1:\n","                      trade_done = 1\n","                      tp = res_df['close'].iloc[j]\n","                      tp_list.append(tp)\n","                      tp_idx_list.append(j)\n","                      fee += config.trader_set.market_fee\n","\n","                  # -------------- append trade data -------------- #\n","                  if trade_done:\n","\n","                      # --------------- tp_ratio info --------------- #\n","                      #         Todo        #\n","                      #          short_out 에 대한 정보는 존재함,\n","                      #          short_tp 에 대한 정보는 존재함,\n","                      #       => initial_i 기준으로 ,dynamic | static set 을 tp 와 out 에 각각 적용\n","                      #          config.lvrg_set.leverage 는 initial_i 기준으로 적용되니까\n","                      #          적용된 tp & out 으로 abs((tp - ep) / (ep - out)) 계산\n","                      try:\n","                          if config.out_set.use_out:\n","                              done_tp = res_df['short_tp_{}'.format(strat_version)].iloc[tp_j]\n","                              done_out = res_df['short_out_{}'.format(strat_version)].iloc[out_j]\n","\n","                              if done_out <= ep_list[0]:  # loss > 1\n","                                  dr = np.nan\n","                                  tp_ratio = np.nan\n","                              else:\n","                                  dr = ((ep_list[0] - done_tp) / (done_out - ep_list[0]))\n","                                  tp_ratio = ((ep_list[0] - done_tp - tp_fee * ep_list[0]) / (\n","                                              done_out - ep_list[0] + out_fee * ep_list[0]))\n","\n","                          else:\n","                              dr = np.nan\n","                              tp_ratio = np.nan\n","\n","\n","                      except Exception as e:\n","                          dr = np.nan\n","                          tp_ratio = np.nan\n","\n","                      tp_ratio_list.append(tp_ratio)\n","                      short_tp_ratio_list.append(tp_ratio)\n","                      dr_list.append(dr)\n","                      short_dr_list.append(dr)\n","\n","                      # -------------------- partial tp -------------------- #\n","                      #        1. len(tp_list) 에 대응하는 qty_list 를 만들어야함    #\n","                      #        2. temp_pr_list 를 만들어 총합 + 1 을 pr_list 에 저장      #\n","                      #        2-1. temp_pr = sum((ep / tp_list[i] - fee - 1) * qty_list[i])   #\n","                      #        3. temp_pr_list 의 첫 tp 에는 r_qty 를 할당함        #\n","                      qty_list = []\n","                      temp_pr_list = []\n","                      r_qty = 1\n","                      for q_i in range(len(tp_list) - 1, -1, -1):\n","\n","                          if len(tp_list) == 1:\n","                              temp_qty = r_qty\n","                          else:\n","                              if q_i != 0:\n","                                  temp_qty = r_qty / config.tp_set.partial_qty_divider\n","                              else:\n","                                  temp_qty = r_qty\n","\n","                          temp_pr = (ep_list[0] / tp_list[q_i] - fee - 1) * temp_qty * config.lvrg_set.leverage\n","                          # temp_pr = (ep_list[0] / tp_list[q_i] - fee - 1) * temp_qty\n","                          r_qty -= temp_qty\n","\n","                          temp_pr_list.append(temp_pr)\n","                          qty_list.append(temp_qty)\n","\n","                      # if len(temp_pr_list) == 1:\n","                      #   print(\"qty_list :\", qty_list)\n","                      #   print(\"temp_pr_list :\", temp_pr_list)\n","\n","                      temp_pr = sum(temp_pr_list) + 1\n","\n","                      # -------------------- sub ep -> pr calc -------------------- #\n","                      if len(ep_list) > 1:\n","\n","                          p_ep_pr = []\n","                          for sub_ep_ in ep_list:\n","                              sub_pr = (sub_ep_ / tp - fee - 1) * config.lvrg_set.leverage\n","                              p_ep_pr.append(sub_pr)\n","\n","                          temp_pr = sum(p_ep_pr) + 1\n","\n","                          print(\"temp_pr :\", temp_pr)\n","\n","                      # ------------ hedge + non_hedge pr summation ------------ #\n","                      #         hedge pr direction is opposite to the origin       #\n","                      hedge_pr = 1\n","                      if hedge_cnt == 0:\n","                          #       hedge tp      #\n","                          h_tp = res_df['close'].iloc[j]\n","                          hedge_pr = (h_tp / h_ep - fee - 1) * config.lvrg_set.leverage  # hedge long\n","                          temp_pr += hedge_pr\n","                          h_j = j\n","\n","                      # hh = max(res_df['high'].iloc[i:j + 1])\n","                      hh = max(res_df['high'].iloc[i:j])  # pos. 정리하기 바로 직전까지\n","                      short_liq = (ep_list[0] / hh - fee - 1) * config.lvrg_set.leverage + 1\n","\n","                      if j != len(res_df) - 1:\n","\n","                          # ep_tp_list.append((ep, tp_list))\n","                          ep_tp_list.append((ep_list, tp_list))\n","                          # trade_list.append([initial_i, i, j])\n","                          # trade_list.append((ep_idx_list, tp_idx_list))\n","                          trade_list.append((ep_idx_list, out_idx_list, tp_idx_list))\n","\n","                          liqd_list.append(short_liq)\n","                          short_liqd_list.append(short_liq)\n","\n","                          h_ep_tp_list.append(\n","                              (h_ep, h_tp))  # hedge 도 ep_tp_list 처럼 변경해주어야하는데 아직 안건드림, 딱히 사용할 일이 없어보여\n","                          h_trade_list.append([initial_i, h_i, h_j])\n","\n","                          pr_list.append(temp_pr)\n","                          fee_list.append(fee)\n","                          short_list.append(temp_pr)\n","                          short_fee_list.append(fee)\n","\n","                          h_pr_list.append(hedge_pr)\n","                          h_short_list.append(hedge_pr)\n","\n","                          i = j\n","                          break\n","\n","                      else:\n","\n","                          # ep_tp_list.append((ep_list, tp_list))\n","                          # trade_list.append((ep_idx_list, tp_idx_list))\n","                          # plot_check 때문에, pr_list 까지 하게되면 acc_pr eval 이 꼬이게댐\n","\n","                          # pr_list 를 넣지 않을거니까, open_list 에서 해당 idx 는 pop\n","                          open_list.pop()\n","                          zone_list.pop()\n","                          side_list.pop()\n","                          strat_ver_list.pop()\n","\n","                          #         tp 미체결 survey        #\n","                          nontp_liqd_list.append(short_liq)\n","                          nontp_short_liqd_list.append(short_liq)\n","                          nontp_short_indexs.append(i)\n","                          nontp_short_ep_list.append(ep_list[0])\n","\n","                          nontp_short_pr = (ep_list[0] / tp - fee - 1) * config.lvrg_set.leverage + 1\n","                          nontp_pr_list.append(nontp_short_pr)\n","                          nontp_short_pr_list.append(nontp_short_pr)\n","\n","\n","          #                  long  phase                #\n","          elif open_side == utils_public.OrderSide.BUY:\n","\n","              initial_i = i\n","              # print(\"long_ep_loc passed !\")\n","\n","              strat_version = config.strat_version\n","\n","              # ------- tp / out fee calc ------- #\n","              tp_fee, out_fee = calc_tp_out_fee(config)\n","\n","              # ------- fee init ------- #\n","              if config.ep_set.entry_type == 'LIMIT':\n","                  fee = config.trader_set.limit_fee\n","              else:\n","                  fee = config.trader_set.market_fee\n","\n","              # --------------- set partial tp --------------- #\n","              long_tps = [res_df['long_tp_{}'.format(strat_version)]]\n","              # long_tps = [long_tp2, long_tp]\n","              # long_tps = [long_tp, long_tp2]\n","              # print(\"i after long_ep_loc :\", i)\n","\n","              # if config.out_set.static_out:\n","              #     p_i = initial_i\n","              # else:\n","              #     p_i = i\n","\n","              ep_j = initial_i\n","              out_j = initial_i\n","\n","              # -------------- limit waiting const. -------------- #\n","              if config.ep_set.entry_type == \"LIMIT\":\n","\n","                  # allow_ep_in = 0 if strat_version in ['v5_2'] else 1\n","                  allow_ep_in = 0\n","                  entry_done = 0\n","                  entry_open = 0\n","                  prev_sar = None\n","\n","                  # for e_j in range(i, len(res_df)):\n","\n","                  if i + 1 >= len(res_df):  # i should be checked if e_j starts from i+1\n","                      break\n","                  for e_j in range(i + 1, len(res_df)):  # entry 가 close 기준일 경우 사용 (open 기준일 경우 i 부터 시작해도 무방함)\n","\n","                      if not config.ep_set.static_ep:\n","                          ep_j = e_j\n","                          out_j = e_j\n","\n","                      if config.tp_set.static_tp:\n","                          # if config.ep_set.tpout_onexec:\n","                          #   tp_j = e_j\n","                          # else:\n","                          tp_j = initial_i\n","                      else:\n","                          tp_j = e_j\n","\n","                          #          np.inf ep         #\n","                      # if long_ep.iloc[initial_i] == np.inf:\n","                      #   break\n","\n","                      #     1. check ep_out     #\n","                      if res_df['high'].iloc[e_j] >= res_df['h_long_rtc_1_{}'.format(strat_version)].iloc[tp_j] + \\\n","                              res_df['h_long_rtc_gap_{}'.format(strat_version)].iloc[tp_j] * config.loc_set.zone.ei_k:\n","                          # if res_df['high'].iloc[e_j] >= res_df['long_tp_{}'.format(strat_version)].iloc[tp_j]:\n","                          # if np_timeidx[e_j] % config.loc_set.point.tf_entry == config.loc_set.point.tf_entry - 1:\n","                          break\n","\n","                          # elif (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[e_j - 1] <= 50 + config.loc_set.point.osc_band) & \\\n","                          #                  (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[e_j] > 50 + config.loc_set.point.osc_band):\n","                          #   break\n","\n","                      # if config.loc_set.zone.c_itv_ticks != \"None\":\n","\n","                      #   if np_timeidx[e_j] % config.loc_set.zone.c_itv_ticks == config.loc_set.zone.c_itv_ticks - 1:\n","                      #     break\n","\n","                      #     2. ep_loc.point2\n","                      if public_override:\n","                          allow_ep_in, out_j = long_point2(res_df, config, e_j, out_j, allow_ep_in)\n","                      else:\n","                          allow_ep_in, out_j = utils_public.long_point2(res_df, config, e_j, out_j,\n","                                                                        allow_ep_in)  # not defined yet,\n","\n","                      #     3. check ep_in      #\n","                      if allow_ep_in and res_df['low'].iloc[e_j] <= res_df['long_ep_{}'.format(strat_version)].iloc[\n","                          ep_j]:\n","                          entry_done = 1\n","                          # print(\"e_j :\", e_j)\n","\n","                          #     이미, e_j open 이 ep 보다 낮은 경우, entry[initial_i] => -2 로 변경   #\n","                          if res_df['open'].iloc[e_j] <= res_df['long_ep_{}'.format(strat_version)].iloc[ep_j]:\n","                              entry_open = 1\n","\n","                          break\n","\n","                  i = e_j\n","                  # print(\"i = e_j :\", i)\n","\n","                  if entry_done:\n","                      pass\n","                      # print(\"i, entry_done :\", i, entry_done)\n","\n","                  else:\n","                      i += 1\n","                      if i >= len(res_df):\n","                          # print(\"i :\", i)\n","                          break\n","\n","                      # print(\"i in continue :\", i)\n","                      continue\n","\n","              # ---------------- end wait ---------------- #\n","              # if e_j - initial_i >= 200:\n","              #   print(\"e_j, initial_i :\", e_j, initial_i)\n","\n","              # print(i)\n","\n","              open_list.append(initial_i)\n","              zone_list.append(zone)\n","              side_list.append('l')\n","              strat_ver_list.append(strat_version)\n","\n","              if config.ep_set.entry_type == 'MARKET':\n","                  ep_list = [res_df['close'].iloc[ep_j]]\n","              else:\n","                  if not entry_open:\n","                      ep_list = [res_df['long_ep_{}'.format(strat_version)].iloc[\n","                                      ep_j]]  # dynamic_ep 인 경우에도 e_j 가 ep_j 로 대응되기 때문에 ep_j 만 사용해도 무관\n","                  else:\n","                      # try:\n","                      #   ep_list = [res_df['open'].iloc[e_j]]\n","                      # except Exception as e:\n","                      fee = config.trader_set.market_fee\n","                      ep_list = [res_df['open'].iloc[e_j]]  # --> 체결이 되는 e_j idx 기준으로 하는게 맞음\n","\n","              if not config.lvrg_set.static_lvrg:\n","\n","                  ep_ = ep_list[0]\n","                  out_ = res_df['long_out_{}'.format(strat_version)].iloc[out_j]\n","                  if public_override:\n","                      config.lvrg_set.leverage = lvrg_set(res_df, config, \"BUY\", ep_, out_, fee)\n","                  else:\n","                      config.lvrg_set.leverage = utils_public.lvrg_set(res_df, config, \"BUY\", ep_, out_, fee)\n","\n","                  # -------------- leverage rejection -------------- #\n","                  if config.lvrg_set.leverage == None:\n","                      open_list.pop()\n","                      zone_list.pop()\n","                      side_list.pop()\n","                      strat_ver_list.pop()\n","\n","                      i += 1\n","                      if i >= len(res_df):\n","                          break\n","                      continue\n","\n","              leverage_list.append(config.lvrg_set.leverage)\n","\n","              if config.ep_set.entry_type == \"MARKET\":\n","                  ep_idx_list = [ep_j]\n","              else:\n","                  ep_idx_list = [e_j]\n","\n","              out_idx_list = [out_j]\n","\n","              tp_list = []\n","              tp_idx_list = []\n","\n","              partial_tp_cnt = 0\n","              hedge_cnt = 1\n","\n","              h_ep, h_tp = None, None\n","              h_i, h_j = None, None\n","\n","              trade_done = 0\n","              cross_on = 0\n","              out = 0\n","              config.out_set.retouch = 0\n","\n","              if i == len(res_df) - 1:  # if j start from i + 1\n","                  open_list.pop()\n","                  zone_list.pop()\n","                  side_list.pop()\n","                  strat_ver_list.pop()\n","\n","              for j in range(i + 1, len(res_df)):\n","\n","                  # for j in range(i, len(res_df)):\n","\n","                  if config.tp_set.static_tp:\n","                      if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","                          tp_j = ep_j\n","                      else:\n","                          tp_j = initial_i\n","                  else:\n","                      tp_j = j\n","\n","                  if config.out_set.static_out:\n","                      if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","                          out_j = ep_j\n","                      # else:\n","                      #   out_j = initial_i\n","                  else:\n","                      out_j = j\n","\n","                      # -------------- hedge only once -------------- #\n","                  #             일단, h_quantity 는 초기 진입과 동일하게 설정         #\n","                  # if res_df['low'].iloc[j] <= res_df['minor_ST2_Down'].iloc[j] and hedge_cnt == 1:\n","                  # if res_df['close'].iloc[j] <= res_df['minor_ST2_Down'].iloc[j] and hedge_cnt == 1:\n","                  # if res_df['close'].iloc[j] <= res_df['minor_ST3_Down'].iloc[j] and hedge_cnt == 1:\n","\n","                  #   h_ep = res_df['close'].iloc[j]\n","                  #   hedge_cnt -= 1\n","                  #   h_i = j\n","\n","                  # -------------- sub ep -------------- #\n","                  # if res_df['low'].iloc[j - 1] >= res_df['sar2'].iloc[j - 1] and res_df['low'].iloc[j] < res_df['sar2'].iloc[j]:\n","\n","                  #   sub_ep = res_df['sar2'].iloc[j - 1]\n","\n","                  #   if sub_ep > ep_list[-1]:\n","                  #     ep_list.append(sub_ep)\n","                  #     ep_idx_list.append(j)\n","\n","                  # -------------- ultimate tp -------------- #\n","                  if not config.tp_set.non_tp:\n","                      #            1. by level          #\n","                      if config.tp_set.tp_type == \"LIMIT\" or config.tp_set.tp_type == \"BOTH\":\n","\n","                          for l_i, long_tp_ in enumerate(long_tps):\n","\n","                              #     decay adjustment    #\n","                              #     tp_j includes dynamic_j   #\n","                              try:\n","                                  if config.tr_set.decay_gap != \"None\":\n","                                      decay_share = (j - initial_i) // config.tp_set.decay_term\n","                                      decay_remain = (j - initial_i) % config.tp_set.decay_term\n","                                      if j != initial_i and decay_remain == 0:\n","                                          long_tp_.iloc[tp_j] -= \\\n","                                          res_df['h_long_rtc_gap_{}'.format(strat_version)].iloc[\n","                                              initial_i] * config.tr_set.decay_gap * decay_share\n","\n","                              except:\n","                                  pass\n","\n","                              if res_df['high'].iloc[j] >= long_tp_.iloc[tp_j] and partial_tp_cnt == l_i:\n","                                  # if res_df['high'].iloc[j] >= long_tp.iloc[j]:\n","\n","                                  if l_i == len(long_tps) - 1:\n","                                      trade_done = 1\n","\n","                                  partial_tp_cnt += 1\n","\n","                                  #         dynamic tp        #\n","                                  # if 0:\n","                                  if long_tp_.iloc[j] != long_tp_.iloc[j - 1] and not config.tp_set.static_tp:\n","\n","                                      #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 #\n","                                      # if res_df['open'].iloc[j] >= long_tp_.iloc[initial_i]:\n","                                      if res_df['open'].iloc[j] >= long_tp_.iloc[j]:\n","\n","                                          # tp = long_tp_.iloc[initial_i]\n","                                          tp = res_df['open'].iloc[j]\n","\n","                                          if trade_done:\n","                                              tp_state_list.append(\"d-long_open {}\".format(strat_version))\n","\n","\n","                                      #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 #\n","                                      else:\n","\n","                                          # tp = long_tp_.iloc[initial_i]\n","                                          tp = long_tp_.iloc[j]\n","                                          # tp = res_df['open'].iloc[j]\n","\n","                                          if trade_done:\n","                                              tp_state_list.append(\"d-long_tp {}\".format(strat_version))\n","\n","                                  #         static tp         #\n","                                  else:\n","\n","                                      #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 #\n","                                      #   non_inversion 의 경우, short_tp 가 가능함   #\n","\n","                                      if res_df['open'].iloc[j] >= long_tp_.iloc[tp_j]:\n","                                          # if res_df['open'].iloc[j] >= long_tp_.iloc[initial_i]:\n","\n","                                          # tp = long_tp_.iloc[initial_i]\n","\n","                                          if config.tr_set.decay_gap != \"None\" and decay_remain == 0:\n","                                              tp = res_df['open'].iloc[j]\n","                                          else:\n","                                              tp = long_tp_.iloc[tp_j]\n","\n","                                          if trade_done:\n","                                              tp_state_list.append(\"s-long_tp {}\".format(strat_version))\n","\n","\n","                                      #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 #\n","                                      else:\n","\n","                                          # tp = long_tp_.iloc[initial_i]\n","                                          tp = long_tp_.iloc[tp_j]\n","\n","                                          # tp = res_df['open'].iloc[j]\n","\n","                                          if trade_done:\n","                                              tp_state_list.append(\"s-long_tp {}\".format(strat_version))\n","\n","                                  tp_list.append(tp)\n","                                  tp_idx_list.append(j)\n","                                  fee += config.trader_set.limit_fee\n","\n","                      #           2. by time        #\n","                      if config.tp_set.tp_type == 'MARKET' or (config.tp_set.tp_type == \"BOTH\" and not trade_done):\n","\n","                          market_tp = 0\n","\n","                          # -------------- sar tp -------------- #\n","                          # if (res_df['low'].iloc[j] <= res_df['sar2'].iloc[j]) & \\\n","                          #   (res_df['low'].iloc[j - 1] > res_df['sar2'].iloc[j - 1]) & \\\n","                          #   (res_df['low'].iloc[j - 2] > res_df['sar2'].iloc[j - 2]):\n","\n","                          #       inversion     #\n","                          # if (res_df['high'].iloc[j] >= res_df['sar2'].iloc[j]) & \\\n","                          #   (res_df['high'].iloc[j - 1] < res_df['sar2'].iloc[j - 1]) & \\\n","                          #   (res_df['high'].iloc[j - 2] < res_df['sar2'].iloc[j - 2]):\n","\n","                          # ----------- st long ----------- #\n","                          # if res_df['close'].iloc[j] >= res_df['long_tp'].iloc[tp_j]:\n","\n","                          # -------------- sar pb tp -------------- #\n","                          # if res_df['high'].iloc[j] >= res_df['long_tp'].iloc[initial_i]:\n","\n","                          # -------------- st tp -------------- #\n","                          # if res_df['close'].iloc[j] < res_df['middle_line'].iloc[j]:\n","\n","                          # -------------- fisher tp -------------- #\n","                          # if entry[j] == -1:\n","\n","                          # -------------- timestamp -------------- #\n","                          if config.tp_set.time_tp:\n","                              if np_timeidx[\n","                                  j] % config.loc_set.zone.c_itv_ticks == config.loc_set.zone.c_itv_ticks - 1 and \\\n","                                      j - initial_i >= config.loc_set.zone.c_itv_ticks:\n","                                  market_tp = 1\n","\n","                          # -------------- rsi -------------- #\n","                          if strat_version in rsi_out_stratver:\n","                              if (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[\n","                                      j - 1] <= 50 + config.loc_set.point.osc_band) & \\\n","                                      (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[\n","                                            j] > 50 + config.loc_set.point.osc_band):\n","                                  # if (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j - 1] >= 50 + config.loc_set.point.osc_band) & \\\n","                                  #                  (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j] < 50 + config.loc_set.point.osc_band):\n","                                  market_tp = 1\n","\n","                              # -------------- cci -------------- #\n","                              # if (res_df['cci_%s' % config.loc_set.point.exp_itv].iloc[j - 1] <= config.loc_set.point.osc_band) & \\\n","                              #                  (res_df['cci_%s' % config.loc_set.point.exp_itv].iloc[j] > config.loc_set.point.osc_band):\n","                              #   market_tp = 1\n","\n","                          # ---------------------------- early out phase ---------------------------- #\n","\n","                          #        osc slight touch     #\n","                          if allow_osc_touch:\n","                              if (np.max(res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[\n","                                          initial_i:j]) > 50 + config.loc_set.point.osc_band - rsi_gap) & \\\n","                                      (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j] <= 50):\n","                                  market_tp = 1\n","\n","                          #         tp early out        #\n","                          # # if (np.max(res_df['high'].iloc[e_j:j]) > res_df['long_tp'].iloc[tp_j]) & \\\n","                          # if (np.max(res_df['high'].iloc[e_j:j]) > res_df['h_long_rtc_1'].iloc[tp_j] + res_df['h_long_rtc_gap'].iloc[tp_j] * early_out_tpg) & \\\n","                          #   (res_df['close'].iloc[j] <= res_df['long_ep'].iloc[ep_j]):\n","                          #   market_tp = 1\n","\n","                          # if strat_version == \"v7\":\n","                          #   if res_df['dc_lower_1m'].iloc[j] < res_df['dc_lower_5m'].iloc[j]:\n","                          #     market_tp = 1\n","\n","                          #         bb_upper early out        #\n","                          if strat_version in ['v5_2']:\n","                              if res_df['close'].iloc[j] > res_df['bb_upper_5m'].iloc[j] > res_df['close'].iloc[\n","                                  j - 1]:\n","                                  cross_on = 1\n","\n","                              if cross_on == 1 and res_df['close'].iloc[j] < res_df['bb_lower_5m'].iloc[j] < \\\n","                                      res_df['close'].iloc[j - 1]:\n","                                  market_tp = 1\n","\n","                          if market_tp:\n","\n","                              tp = res_df['close'].iloc[j]\n","                              # tp = res_df['open'].iloc[j]\n","                              trade_done = 1\n","\n","                              if trade_done:\n","                                  tp_state_list.append(\"long close tp {}\".format(strat_version))\n","                                  # print(\"early_out passed !\")\n","\n","                              tp_list.append(tp)\n","                              tp_idx_list.append(j)\n","                              fee += config.trader_set.market_fee\n","\n","                  # -------------- out -------------- #\n","                  if not trade_done and config.out_set.use_out and j != len(res_df) - 1:\n","\n","                      # -------------- macd -------------- #\n","                      # if res_df['macd_hist3'].iloc[j] < 0:\n","                      # # if res_df['macd_hist3'].iloc[i] > 0 and res_df['macd_hist3'].iloc[j] < 0:\n","\n","                      # -------------- st config.out_set.retouch -------------- #\n","                      # out = 1 상태면 동일 tick 에서 config.out_set.retouch 를 조사할 거기 때문에, 먼저 검사함\n","                      # 그리고, out 기준이 close 라 이게 맞음\n","                      # close 가 long_out 보다 내려가있는 상태일테니 high 를 조사하는게 맞음\n","                      # if out and res_df['high'].iloc[j] >= long_out.iloc[out_j]:\n","                      #   config.out_set.retouch = 1\n","\n","                      # ------- 일정시간 이상, dynamic_out 적용 ------ #\n","                      try:\n","                          if j - out_idx >= config.out_set.retouch_out_period:\n","                              static_long_out = res_df['long_out_{}'.format(strat_version)].iloc[j]\n","\n","                      except Exception as e:\n","                          pass\n","\n","                          # ------- static out ------ #\n","                      try:\n","                          if out and res_df['high'].iloc[j] >= static_long_out:\n","                              config.out_set.retouch = 1\n","                      except Exception as e:\n","                          pass\n","\n","                          # ------- config.out_set.retouch out ------ #\n","                      # if out and res_df['high'].iloc[j] >= long_out2.iloc[out_j]:\n","                      #   config.out_set.retouch = 1\n","\n","                      # -------------- st -------------- #\n","                      # if res_df['close'].iloc[j] < res_df['middle_line'].iloc[j]:\n","                      # if res_df['close'].iloc[j] < res_df['minor_ST3_Down'].iloc[j]:\n","                      # if res_df['close'].iloc[j] < lower_middle.iloc[j]:\n","                      # if res_df['close'].iloc[j] < res_df['minor_ST1_Down'].iloc[j]:\n","                      if out == 0:\n","                          if config.out_set.hl_out:\n","                              if res_df['low'].iloc[j] <= res_df['long_out_{}'.format(strat_version)].iloc[\n","                                  out_j]:  # check out only once\n","                                  out = 1\n","\n","                          else:\n","                              if res_df['close'].iloc[j] <= res_df['long_out_{}'.format(strat_version)].iloc[\n","                                  out_j]:  # check out only once\n","                                  out = 1\n","\n","                          # out_idx = j\n","                          # static_long_out = long_out.iloc[out_j]\n","                          # if config.out_set.second_out:\n","                          # static_long_out = long_out.iloc[out_j] - res_df['st_gap'].iloc[out_j] * config.out_set.second_out_gap\n","\n","                      # if out == 0 and res_df['low'].iloc[j] <= long_out.iloc[out_j]: # check out only once\n","                      #   out = 1\n","\n","                      # -------------- sma -------------- #\n","                      # if res_df['close'].iloc[j] < res_df[sma].iloc[j]:\n","\n","                      # -------------- sar -------------- #\n","                      # if res_df['close'].iloc[j] < res_df['minor_ST3_Down'].iloc[j] \\\n","                      #   or res_df['sar2'].iloc[j] >= res_df['low'].iloc[j]:\n","                      # if res_df['close'].iloc[j] < long_out.iloc[initial_i]: # or \\\n","                      #   #  res_df['close'].iloc[j] < res_df['sar2'].iloc[j]:\n","                      #   #  res_df['sar2_uptrend'].iloc[j] == 0 or \\\n","                      #   out = 1\n","\n","                      # if res_df['sar2_uptrend'].iloc[j] == 0:\n","\n","                      #     if prev_sar is None:\n","                      #       prev_sar = res_df['sar2'].iloc[j - 1]\n","\n","                      #     if res_df['close'].iloc[j] < prev_sar:\n","                      #       out = 1\n","\n","                      # else:\n","                      #   if res_df['close'].iloc[j] < res_df['sar2'].iloc[j]:\n","                      #     out = 1\n","\n","                      # -------------- hl -------------- #\n","                      # if res_df['close'].iloc[j] < long_out.iloc[tp_j]:\n","\n","                      # -------------- stoch -------------- #\n","                      # if res_df['stoch'].iloc[j - 2] <= res_df['stoch'].iloc[j - 1] and \\\n","                      #   res_df['stoch'].iloc[j - 1] > res_df['stoch'].iloc[j] and \\\n","                      #   res_df['stoch'].iloc[j - 1] >= stoch_upper:\n","                      #   out = 1\n","\n","                      # config.out_set.retouch 1 경우, config.out_set.retouch 조건도 있어야함\n","                      if out:\n","                          if config.out_set.retouch:\n","                              if config.out_set.retouch:\n","                                  pass\n","                              else:\n","                                  continue\n","\n","                          else:\n","                              pass\n","\n","                          if config.out_set.price_restoration:\n","                              tp = res_df['long_out_{}'.format(strat_version)].iloc[out_j]\n","                              if config.out_set.second_out:\n","                                  tp = res_df['long_out2_{}'.format(strat_version)].iloc[out_j]\n","\n","                              # if res_df['close'].iloc[j] < tp: # 이 경우를 protect 하는건 insane 임\n","                              # # if res_df['high'].iloc[j] < tp: # --> config.out_set.hl_out 사용시 이 조건은 valid 함\n","                              #   tp = res_df['close'].iloc[j]\n","\n","                          else:\n","\n","                              if res_df['open'].iloc[j] <= res_df['long_out_{}'.format(strat_version)].iloc[out_j]:\n","                                  tp = res_df['open'].iloc[j]\n","                              else:\n","                                  if config.out_set.hl_out:\n","                                      tp = res_df['long_out_{}'.format(strat_version)].iloc[out_j]\n","                                  else:\n","                                      tp = res_df['close'].iloc[j]\n","\n","                              # if not config.out_set.static_out:\n","                              #   if res_df['open'].iloc[j] <= res_df['long_out'].iloc[out_j]: # dynamic close out 의 open 고려\n","                              #     tp = res_df['open'].iloc[j]\n","                              #   else:\n","                              #     tp = res_df['close'].iloc[j]\n","\n","                              # else:\n","                              #   tp = res_df['close'].iloc[j]\n","\n","                          if config.out_set.retouch:  # out 과 open 비교\n","                              if config.out_set.second_out:  # long_out = sell\n","                                  # config.out_set.second_out 은 기본적으로 limit 이라 이 구조가 가능함\n","                                  if res_df['open'].iloc[j] >= res_df['long_out2_{}'.format(strat_version)].iloc[\n","                                      out_j]:  # dynamic_out 일 경우 고려해야함\n","                                      tp = res_df['open'].iloc[j]\n","                              else:\n","                                  if res_df['open'].iloc[j] >= res_df['long_out_{}'.format(strat_version)].iloc[\n","                                      out_j]:  # dynamic_out 일 경우 고려해야함\n","                                      tp = res_df['open'].iloc[j]\n","\n","                              try:\n","                                  if res_df['open'].iloc[j] >= static_long_out:\n","                                      tp = res_df['open'].iloc[j]\n","                                  else:\n","                                      tp = static_long_out\n","                              except Exception as e:\n","                                  pass\n","\n","                          # tp = res_df['open'].iloc[j]\n","                          tp_state_list.append(\"long close_out {}\".format(strat_version))\n","                          trade_done = 1\n","\n","                          tp_list.append(tp)\n","                          tp_idx_list.append(j)\n","                          fee += config.trader_set.market_fee\n","\n","                  # -------------- non tp -------------- #\n","                  if j == len(res_df) - 1:\n","                      trade_done = 1\n","                      tp = res_df['close'].iloc[j]\n","                      tp_list.append(tp)\n","                      tp_idx_list.append(j)\n","                      fee += config.trader_set.market_fee\n","\n","                  if trade_done:\n","\n","                      # --------------- tp_ratio info --------------- #\n","                      try:\n","                          if config.out_set.use_out:\n","                              done_tp = res_df['long_tp_{}'.format(strat_version)].iloc[tp_j]\n","                              done_out = res_df['long_out_{}'.format(strat_version)].iloc[out_j]\n","\n","                              if done_out >= ep_list[0]:  # loss >= 1\n","                                  tp_ratio = np.nan\n","                                  dr = np.nan\n","                                  # print(\"loss >= 1\")\n","                              else:\n","                                  tp_ratio = ((done_tp - ep_list[0] - tp_fee * ep_list[0]) / (\n","                                              ep_list[0] - done_out + out_fee * ep_list[0]))\n","                                  dr = ((done_tp - ep_list[0]) / (ep_list[0] - done_out))\n","\n","                          else:\n","                              dr = np.nan\n","                              tp_ratio = np.nan\n","\n","                      except Exception as e:\n","                          print(\"error in tr phase :\", e)\n","                          dr = np.nan\n","                          tp_ratio = np.nan\n","\n","                      tp_ratio_list.append(tp_ratio)\n","                      long_tp_ratio_list.append(tp_ratio)\n","                      dr_list.append(dr)\n","                      long_dr_list.append(dr)\n","\n","                      qty_list = []\n","                      temp_pr_list = []\n","                      r_qty = 1\n","                      for q_i in range(len(tp_list) - 1, -1, -1):\n","\n","                          if len(tp_list) == 1:\n","                              temp_qty = r_qty\n","                          else:\n","                              if q_i != 0:\n","                                  temp_qty = r_qty / config.tp_set.partial_qty_divider\n","                              else:\n","                                  temp_qty = r_qty\n","\n","                          # temp_pr = (tp_list[q_i] / ep_list[0] - fee - 1) * temp_qty\n","                          temp_pr = (tp_list[q_i] / ep_list[0] - fee - 1) * temp_qty * config.lvrg_set.leverage\n","                          r_qty -= temp_qty\n","\n","                          temp_pr_list.append(temp_pr)\n","\n","                      temp_pr = sum(temp_pr_list) + 1\n","\n","                      # -------------------- sub ep -> pr calc -------------------- #\n","                      if len(ep_list) > 1:\n","\n","                          p_ep_pr = []\n","                          for sub_ep_ in ep_list:\n","                              sub_pr = (tp / sub_ep_ - fee - 1) * config.lvrg_set.leverage\n","                              p_ep_pr.append(sub_pr)\n","\n","                          temp_pr = sum(p_ep_pr) + 1\n","\n","                          print(\"temp_pr :\", temp_pr)\n","\n","                      # ------------ hedge + non_hedge pr summation ------------ #\n","                      #         hedge pr direction is opposite to the origin       #\n","                      hedge_pr = 1\n","                      if hedge_cnt == 0:\n","                          #       hedge tp      #\n","                          h_tp = res_df['close'].iloc[j]\n","                          hedge_pr = (h_ep / h_tp - fee - 1) * config.lvrg_set.leverage  # hedge short\n","                          temp_pr += hedge_pr\n","                          h_j = j\n","\n","                      # ll = min(res_df['low'].iloc[i:j + 1])\n","                      ll = min(res_df['low'].iloc[i:j])  # pos. 정리하기 바로 직전까지\n","                      long_liq = (ll / ep_list[0] - fee - 1) * config.lvrg_set.leverage + 1\n","\n","                      if j != len(res_df) - 1:\n","\n","                          ep_tp_list.append((ep_list, tp_list))\n","                          # trade_list.append((ep_idx_list, tp_idx_list))\n","                          trade_list.append((ep_idx_list, out_idx_list, tp_idx_list))\n","\n","                          liqd_list.append(long_liq)\n","                          long_liqd_list.append(long_liq)\n","\n","                          h_ep_tp_list.append((h_ep, h_tp))\n","                          h_trade_list.append([initial_i, h_i, h_j])\n","\n","                          pr_list.append(temp_pr)\n","                          fee_list.append(fee)\n","                          long_list.append(temp_pr)\n","                          long_fee_list.append(fee)\n","\n","                          h_pr_list.append(hedge_pr)\n","                          h_long_list.append(hedge_pr)\n","\n","                          i = j\n","                          break\n","\n","                      else:\n","\n","                          # ep_tp_list.append((ep_list, tp_list))\n","                          # trade_list.append((ep_idx_list, tp_idx_list))\n","\n","                          # pr_list 를 넣지 않을거니까, open_list 에서 해당 idx 는 pop\n","                          open_list.pop()\n","                          zone_list.pop()\n","                          side_list.pop()\n","                          strat_ver_list.pop()\n","\n","                          #         tp 미체결 survey        #\n","                          nontp_liqd_list.append(long_liq)\n","                          nontp_long_liqd_list.append(long_liq)\n","                          nontp_long_indexs.append(i)\n","                          nontp_long_ep_list.append(ep_list[0])\n","\n","                          nontp_long_pr = (tp / ep_list[0] - fee - 1) * config.lvrg_set.leverage + 1\n","                          nontp_pr_list.append(nontp_long_pr)\n","                          nontp_long_pr_list.append(nontp_long_pr)\n","\n","                      if len(open_list) > len(trade_list):\n","                          print('debug from index :', i)\n","                          print(len(open_list), len(trade_list))\n","                          print(\"len(res_df) :\", len(res_df))\n","                          assert len(open_list) == len(trade_list), 'stopped'\n","\n","          i += 1  # if entry starts with prev trade's close, do not use it !\n","          # print(\"i in end :\", i)\n","          if i >= len(res_df):\n","              break\n","\n","      # -------------------- result analysis -------------------- #\n","      # try:\n","      print(\"elapsed_time :\", time.time() - start_0)\n","\n","      plt.style.use('default')\n","      # mpl.rcParams.update(mpl.rcParamsDefault)\n","\n","      fig = plt.figure(figsize=(14, 10))\n","\n","      gs = gridspec.GridSpec(nrows=3,  # row 몇 개\n","                              ncols=3,  # col 몇 개\n","                              height_ratios=[10, 10, 1]\n","                              )\n","      # plt.figure(figsize=(16, 12))\n","      # plt.figure(figsize=(12, 8))\n","      # plt.figure(figsize=(10, 6))\n","      plt.suptitle(key)\n","\n","      try:\n","          np_pr = np.array(pr_list)\n","\n","          sr = sharpe_ratio(np_pr)\n","\n","          dpf = (len(res_df) / 1440) / len(np_pr)\n","\n","          np_zone_list = np.array(zone_list)\n","          # np_pr_list = np.array(pr_list)\n","          np_side_list = np.array(side_list)\n","\n","          t_w = np.sum(np.where((np_zone_list == 't') & (np_pr > 1), 1, 0))\n","          c_w = np.sum(np.where((np_zone_list == 'c') & (np_pr > 1), 1, 0))\n","          t_ls = np.sum(np.where((np_zone_list == 't') & (np_pr < 1), 1, 0))\n","          c_ls = np.sum(np.where((np_zone_list == 'c') & (np_pr < 1), 1, 0))\n","\n","          # np_pr = (np.array(pr_list) - 1) * config.lvrg_set.leverage + 1\n","\n","          # ----- fake_pr ----- #\n","          # np_pr = np.where(np_pr > 1, 1 + (np_pr - 1) * 3, np_pr)\n","\n","          total_pr = np.cumprod(np_pr)\n","\n","          for_sum_pr = np_pr - 1\n","          for_sum_pr[0] = 1\n","          sum_pr = np.cumsum(for_sum_pr)\n","          sum_pr = np.where(sum_pr < 0, 0, sum_pr)\n","\n","          wr = len(np_pr[np_pr > 1]) / len(np_pr[np_pr != 1])\n","\n","          total_rollmax_pr = np.maximum.accumulate(total_pr)\n","          total_acc_mdd = np.max((total_rollmax_pr - total_pr) / total_rollmax_pr)\n","          total_rollmax_sumpr = np.maximum.accumulate(sum_pr)\n","          total_sum_mdd = np.max((total_rollmax_sumpr - sum_pr) / total_rollmax_sumpr)\n","\n","          np_tp_ratio_list = np.array(tp_ratio_list)  # 초기에 tr 을 정하는거라 mean 사용하는게 맞음\n","          mean_tr = np.mean(np_tp_ratio_list[np.isnan(np_tp_ratio_list) == 0])\n","\n","          np_dr_list = np.array(dr_list)  # 초기에 tr 을 정하는거라 mean 사용하는게 맞음\n","          mean_dr = np.mean(np_dr_list[np.isnan(np_dr_list) == 0])\n","\n","          # pr_gap = (np_pr - 1) / config.lvrg_set.leverage + fee\n","          # tp_gap_ = pr_gap[pr_gap > 0]\n","          # # mean_config.tr_set.tp_gap = np.mean(pr_gap[pr_gap > 0])\n","          # mean_ls_gap = np.mean(pr_gap[pr_gap < 0])\n","\n","          # ---- profit fee ratio ---- #\n","          # mean_pgfr = np.mean((tp_gap_ - fee) / abs(tp_gap_ + fee))\n","\n","          plt.subplot(gs[0])\n","          plt.plot(total_pr)\n","          plt.plot(sum_pr, color='gold')\n","          if len(nontp_liqd_list) != 0:\n","              plt.title(\n","                  \"wr : %.3f\\n len(td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (wr, len(np_pr[np_pr != 1]), dpf, np.min(np_pr), total_pr[-1], sum_pr[-1], sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (total_acc_mdd, total_sum_mdd, config.lvrg_set.leverage, min(liqd_list), mean_tr, mean_dr) + \\\n","                  \"\\n nontp_liqd_cnt : %s\\nnontp_liqd : %.3f\\nontp_liqd_pr : %.3f\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_liqd_list), min(nontp_liqd_list), min(nontp_pr_list), t_w, c_w, t_ls, c_ls),\n","                  position=title_position, fontsize=fontsize)\n","          else:\n","              plt.title(\n","                  \"wr : %.3f\\n len(td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (wr, len(np_pr[np_pr != 1]), dpf, np.min(np_pr), total_pr[-1], sum_pr[-1], sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (total_acc_mdd, total_sum_mdd, config.lvrg_set.leverage, min(liqd_list), mean_tr, mean_dr) + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_liqd_list), t_w, c_w, t_ls, c_ls),\n","                  position=title_position, fontsize=fontsize)\n","          # plt.show()\n","\n","          survey_df.iloc[survey_i] = wr, sr, len(np_pr[np_pr != 1]), dpf, \\\n","                                      total_pr[-1], sum_pr[-1], total_acc_mdd, total_sum_mdd, min(liqd_list), np.min(\n","              np_pr), mean_tr, mean_dr\n","\n","          print('supblot231 passed')\n","\n","      except Exception as e:\n","          print(\"error in 231 :\", e)\n","\n","      try:\n","          #         short only      #\n","          short_np_pr = np.array(short_list)\n","\n","          short_sr = sharpe_ratio(short_np_pr)\n","\n","          short_dpf = (len(res_df) / 1440) / len(short_np_pr)\n","\n","          short_total_pr = np.cumprod(short_np_pr)\n","\n","          short_for_sum_pr = short_np_pr - 1\n","          short_for_sum_pr[0] = 1\n","          short_sum_pr = np.cumsum(short_for_sum_pr)\n","          short_sum_pr = np.where(short_sum_pr < 0, 0, short_sum_pr)\n","\n","          short_wr = len(short_np_pr[short_np_pr > 1]) / len(short_np_pr[short_np_pr != 1])\n","\n","          t_w_s = np.sum(np.where((np_zone_list == 't') & (np_pr > 1) & (np_side_list == 's'), 1, 0))\n","          c_w_s = np.sum(np.where((np_zone_list == 'c') & (np_pr > 1) & (np_side_list == 's'), 1, 0))\n","          t_ls_s = np.sum(np.where((np_zone_list == 't') & (np_pr < 1) & (np_side_list == 's'), 1, 0))\n","          c_ls_s = np.sum(np.where((np_zone_list == 'c') & (np_pr < 1) & (np_side_list == 's'), 1, 0))\n","\n","          short_rollmax_pr = np.maximum.accumulate(short_total_pr)\n","          short_acc_mdd = np.max((short_rollmax_pr - short_total_pr) / short_rollmax_pr)\n","          short_rollmax_sumpr = np.maximum.accumulate(short_sum_pr)\n","          short_sum_mdd = np.max((short_rollmax_sumpr - short_sum_pr) / short_rollmax_sumpr)\n","\n","          np_short_tp_ratio_list = np.array(short_tp_ratio_list)\n","          mean_short_tr = np.mean(np_short_tp_ratio_list[np.isnan(np_short_tp_ratio_list) == 0])\n","\n","          np_short_dr_list = np.array(short_dr_list)\n","          mean_short_dr = np.mean(np_short_dr_list[np.isnan(np_short_dr_list) == 0])\n","\n","          # short_pr_gap = (short_np_pr - 1) / config.lvrg_set.leverage + fee\n","          # short_tp_gap = short_pr_gap[short_pr_gap > 0]\n","          # # mean_short_tp_gap = np.mean(short_pr_gap[short_pr_gap > 0])\n","          # # mean_short_ls_gap = np.mean(short_pr_gap[short_pr_gap < 0])\n","\n","          # mean_short_pgfr = np.mean((short_tp_gap - fee) / abs(short_tp_gap + fee))\n","\n","          # plt.subplot(232)\n","          plt.subplot(gs[1])\n","          plt.plot(short_total_pr)\n","          plt.plot(short_sum_pr, color='gold')\n","          if len(nontp_short_liqd_list) != 0:\n","\n","              max_nontp_short_term = len(res_df) - nontp_short_indexs[0]\n","\n","              plt.title(\n","                  \"wr : %.3f\\nlen(short_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (short_wr, len(short_np_pr[short_np_pr != 1]), short_dpf, np.min(short_np_pr), short_total_pr[-1],\n","                      short_sum_pr[-1], short_sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (short_acc_mdd, short_sum_mdd, config.lvrg_set.leverage, min(short_liqd_list), mean_short_tr,\n","                      mean_short_dr) + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n nontp_liqd : %.3f\\n nontp_liqd_pr : %.3f\\n max_nontp_term : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_short_liqd_list), min(nontp_short_liqd_list), min(nontp_short_pr_list),\n","                      max_nontp_short_term, t_w_s, c_w_s, t_ls_s, c_ls_s),\n","                  position=title_position, fontsize=fontsize)\n","          else:\n","              plt.title(\n","                  \"wr : %.3f\\nlen(short_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (short_wr, len(short_np_pr[short_np_pr != 1]), short_dpf, np.min(short_np_pr), short_total_pr[-1],\n","                      short_sum_pr[-1], short_sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (short_acc_mdd, short_sum_mdd, config.lvrg_set.leverage, min(short_liqd_list), mean_short_tr,\n","                      mean_short_dr) + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_short_liqd_list), t_w_s, c_w_s, t_ls_s, c_ls_s),\n","                  position=title_position, fontsize=fontsize)\n","\n","          short_survey_df.iloc[survey_i] = short_wr, short_sr, len(short_np_pr[short_np_pr != 1]), short_dpf, \\\n","                                            short_total_pr[-1], short_sum_pr[-1], short_acc_mdd, short_sum_mdd, min(\n","              short_liqd_list), np.min(short_np_pr), mean_short_tr, mean_short_dr\n","\n","          print('supblot232 passed')\n","\n","      except Exception as e:\n","          print(\"error in 232 :\", e)\n","\n","      try:\n","          #         long only      #\n","          long_np_pr = np.array(long_list)\n","          # long_np_pr = (np.array(long_list) - 1) * config.lvrg_set.leverage + 1\n","\n","          long_sr = sharpe_ratio(long_np_pr)\n","\n","          long_dpf = (len(res_df) / 1440) / len(long_np_pr)\n","\n","          long_total_pr = np.cumprod(long_np_pr)\n","\n","          long_for_sum_pr = long_np_pr - 1\n","          long_for_sum_pr[0] = 1\n","          long_sum_pr = np.cumsum(long_for_sum_pr)\n","          long_sum_pr = np.where(long_sum_pr < 0, 0, long_sum_pr)\n","\n","          long_wr = len(long_np_pr[long_np_pr > 1]) / len(long_np_pr[long_np_pr != 1])\n","\n","          t_w_l = np.sum(np.where((np_zone_list == 't') & (np_pr > 1) & (np_side_list == 'l'), 1, 0))\n","          c_w_l = np.sum(np.where((np_zone_list == 'c') & (np_pr > 1) & (np_side_list == 'l'), 1, 0))\n","          t_ls_l = np.sum(np.where((np_zone_list == 't') & (np_pr < 1) & (np_side_list == 'l'), 1, 0))\n","          c_ls_l = np.sum(np.where((np_zone_list == 'c') & (np_pr < 1) & (np_side_list == 'l'), 1, 0))\n","\n","          long_rollmax_pr = np.maximum.accumulate(long_total_pr)\n","          long_acc_mdd = np.max((long_rollmax_pr - long_total_pr) / long_rollmax_pr)\n","          long_rollmax_sumpr = np.maximum.accumulate(long_sum_pr)\n","          long_sum_mdd = np.max((long_rollmax_sumpr - long_sum_pr) / long_rollmax_sumpr)\n","\n","          np_long_tp_ratio_list = np.array(long_tp_ratio_list)\n","          mean_long_tr = np.mean(np_long_tp_ratio_list[np.isnan(np_long_tp_ratio_list) == 0])\n","\n","          np_long_dr_list = np.array(long_dr_list)\n","          mean_long_dr = np.mean(np_long_dr_list[np.isnan(np_long_dr_list) == 0])\n","\n","          # long_pr_gap = (long_np_pr - 1) / config.lvrg_set.leverage + fee\n","          # long_tp_gap = long_pr_gap[long_pr_gap > 0]\n","          # # mean_long_tp_gap = np.mean(long_pr_gap[long_pr_gap > 0])\n","          # # mean_long_ls_gap = np.mean(long_pr_gap[long_pr_gap < 0])\n","\n","          # mean_long_pgfr = np.mean((long_tp_gap - fee) / abs(long_tp_gap + fee))\n","\n","          plt.subplot(gs[2])\n","          plt.plot(long_total_pr)\n","          plt.plot(long_sum_pr, color='gold')\n","          if len(nontp_long_liqd_list) != 0:\n","\n","              max_nontp_long_term = len(res_df) - nontp_long_indexs[0]\n","\n","              plt.title(\n","                  \"wr : %.3f\\nlen(long_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (long_wr, len(long_np_pr[long_np_pr != 1]), long_dpf, np.min(long_np_pr), long_total_pr[-1],\n","                      long_sum_pr[-1], long_sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (long_acc_mdd, long_sum_mdd, config.lvrg_set.leverage, min(long_liqd_list), mean_long_tr,\n","                      mean_long_dr) + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n nontp_liqd : %.3f\\n nontp_liqd_pr : %.3f\\n max_nontp_term : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (\n","                  len(nontp_long_liqd_list), min(nontp_long_liqd_list), min(nontp_long_pr_list), max_nontp_long_term,\n","                  t_w_l, c_w_l, t_ls_l, c_ls_l),\n","                  position=title_position, fontsize=fontsize)\n","          else:\n","              plt.title(\n","                  \"wr : %.3f\\nlen(long_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (long_wr, len(long_np_pr[long_np_pr != 1]), long_dpf, np.min(long_np_pr), long_total_pr[-1],\n","                      long_sum_pr[-1], long_sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (long_acc_mdd, long_sum_mdd, config.lvrg_set.leverage, min(long_liqd_list), mean_long_tr,\n","                      mean_long_dr) + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_long_liqd_list), t_w_l, c_w_l, t_ls_l, c_ls_l),\n","                  position=title_position, fontsize=fontsize)\n","\n","          long_survey_df.iloc[survey_i] = long_wr, long_sr, len(long_np_pr[long_np_pr != 1]), long_dpf, \\\n","                                          long_total_pr[-1], long_sum_pr[-1], long_acc_mdd, long_sum_mdd, min(\n","              long_liqd_list), np.min(long_np_pr), mean_long_tr, mean_long_dr\n","\n","          print('supblot233 passed')\n","\n","      except Exception as e:\n","          print(\"error in 233 :\", e)\n","\n","      try:\n","          #     reversion adjustment      #\n","          # rev_np_pr = 1 / (np.array(pr_list) + fee) - fee\n","          rev_fee = tp_fee + out_fee - np.array(fee_list)\n","          rev_np_pr = (1 / ((np.array(pr_list) - 1) / config.lvrg_set.leverage + np.array(\n","              fee_list) + 1) - rev_fee - 1) * config.lvrg_set.leverage + 1\n","          # rev_np_pr = (1 / (np.array(pr_list) + fee) - fee - 1) * config.lvrg_set.leverage + 1\n","\n","          rev_sr = sharpe_ratio(rev_np_pr)\n","\n","          rev_total_pr = np.cumprod(rev_np_pr)\n","          rev_wr = len(rev_np_pr[rev_np_pr > 1]) / len(rev_np_pr[rev_np_pr != 1])\n","\n","          rev_total_for_sum_pr = rev_np_pr - 1\n","          rev_total_for_sum_pr[0] = 1\n","          rev_total_sum_pr = np.cumsum(rev_total_for_sum_pr)\n","          rev_total_sum_pr = np.where(rev_total_sum_pr < 0, 0, rev_total_sum_pr)\n","\n","          rev_rollmax_pr = np.maximum.accumulate(rev_total_pr)\n","          rev_acc_mdd = np.max((rev_rollmax_pr - rev_total_pr) / rev_rollmax_pr)\n","          rev_rollmax_sumpr = np.maximum.accumulate(rev_total_sum_pr)\n","          rev_sum_mdd = np.max((rev_rollmax_sumpr - rev_total_sum_pr) / rev_rollmax_sumpr)\n","\n","          plt.subplot(gs[3])\n","\n","          plt.plot(rev_total_pr)\n","          plt.plot(rev_total_sum_pr, color='gold')\n","\n","          plt.title(\n","              \"wr : %.3f\\n sr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n min_pr : %.3f\"\n","              % (rev_wr, rev_sr, rev_total_pr[-1], rev_total_sum_pr[-1],\n","                  rev_acc_mdd, rev_sum_mdd, np.min(rev_np_pr)), fontsize=fontsize)\n","\n","          rev_survey_df.iloc[survey_i] = rev_wr, rev_sr, rev_total_pr[-1], rev_total_sum_pr[\n","              -1], rev_acc_mdd, rev_sum_mdd, np.min(rev_np_pr)\n","\n","      except Exception as e:\n","          print(\"error in 234 :\", e)\n","\n","      try:\n","          #         short       #\n","          # rev_short_np_pr = 1 / (np.array(short_list) + fee) - fee\n","          rev_short_fee = tp_fee + out_fee - np.array(short_fee_list)\n","          rev_short_np_pr = (1 / ((np.array(short_list) - 1) / config.lvrg_set.leverage + np.array(\n","              short_fee_list) + 1) - rev_short_fee - 1) * config.lvrg_set.leverage + 1\n","          # rev_short_np_pr = (1 / (np.array(short_list) + fee) - fee - 1) * config.lvrg_set.leverage + 1\n","\n","          rev_short_sr = sharpe_ratio(rev_short_np_pr)\n","\n","          short_rev_total_pr = np.cumprod(rev_short_np_pr)\n","          rev_short_wr = len(rev_short_np_pr[rev_short_np_pr > 1]) / len(rev_short_np_pr[rev_short_np_pr != 1])\n","\n","          rev_short_for_sum_pr = rev_short_np_pr - 1\n","          rev_short_for_sum_pr[0] = 1\n","          short_rev_sum_pr = np.cumsum(rev_short_for_sum_pr)\n","          short_rev_sum_pr = np.where(short_rev_sum_pr < 0, 0, short_rev_sum_pr)\n","\n","          short_rev_rollmax_pr = np.maximum.accumulate(short_rev_total_pr)\n","          short_rev_acc_mdd = np.max((short_rev_rollmax_pr - short_rev_total_pr) / short_rev_rollmax_pr)\n","          short_rev_rollmax_sumpr = np.maximum.accumulate(short_rev_sum_pr)\n","          short_rev_sum_mdd = np.max((short_rev_rollmax_sumpr - short_rev_sum_pr) / short_rev_rollmax_sumpr)\n","\n","          plt.subplot(gs[4])\n","\n","          plt.plot(short_rev_total_pr)\n","          plt.plot(short_rev_sum_pr, color='gold')\n","\n","          plt.title(\n","              \"wr : %.3f\\n sr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n min_pr : %.3f\"\n","              % (rev_short_wr, rev_short_sr, short_rev_total_pr[-1], short_rev_sum_pr[-1],\n","                  short_rev_acc_mdd, short_rev_sum_mdd, np.min(rev_short_np_pr)), fontsize=fontsize)\n","\n","          rev_short_survey_df.iloc[survey_i] = rev_short_wr, rev_short_sr, short_rev_total_pr[-1], short_rev_sum_pr[\n","              -1], short_rev_acc_mdd, short_rev_sum_mdd, np.min(rev_short_np_pr)\n","\n","      except Exception as e:\n","          print(\"error in 235 :\", e)\n","\n","      try:\n","          #         long       #\n","          # rev_long_np_pr = 1 / (np.array(long_list) + fee) - fee\n","          rev_long_fee = tp_fee + out_fee - np.array(long_fee_list)\n","          rev_long_np_pr = (1 / ((np.array(long_list) - 1) / config.lvrg_set.leverage + np.array(\n","              long_fee_list) + 1) - rev_long_fee - 1) * config.lvrg_set.leverage + 1\n","\n","          rev_long_sr = sharpe_ratio(rev_long_np_pr)\n","\n","          long_rev_total_pr = np.cumprod(rev_long_np_pr)\n","          rev_long_wr = len(rev_long_np_pr[rev_long_np_pr > 1]) / len(rev_long_np_pr[rev_long_np_pr != 1])\n","\n","          rev_long_for_sum_pr = rev_long_np_pr - 1\n","          rev_long_for_sum_pr[0] = 1\n","          long_rev_sum_pr = np.cumsum(rev_long_for_sum_pr)\n","          long_rev_sum_pr = np.where(long_rev_sum_pr < 0, 0, long_rev_sum_pr)\n","\n","          long_rev_rollmax_pr = np.maximum.accumulate(long_rev_total_pr)\n","          long_rev_acc_mdd = np.max((long_rev_rollmax_pr - long_rev_total_pr) / long_rev_rollmax_pr)\n","          long_rev_rollmax_sumpr = np.maximum.accumulate(long_rev_sum_pr)\n","          long_rev_sum_mdd = np.max((long_rev_rollmax_sumpr - long_rev_sum_pr) / long_rev_rollmax_sumpr)\n","\n","          plt.subplot(gs[5])\n","\n","          plt.plot(long_rev_total_pr)\n","          plt.plot(long_rev_sum_pr, color='gold')\n","\n","          plt.title(\n","              \"wr : %.3f\\n sr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n min_pr : %.3f\"\n","              % (rev_long_wr, rev_long_sr, long_rev_total_pr[-1], long_rev_sum_pr[-1],\n","                  long_rev_acc_mdd, long_rev_sum_mdd, np.min(rev_long_np_pr)), fontsize=fontsize)\n","\n","          rev_long_survey_df.iloc[survey_i] = rev_long_wr, rev_long_sr, long_rev_total_pr[-1], long_rev_sum_pr[\n","              -1], long_rev_acc_mdd, long_rev_sum_mdd, np.min(rev_long_np_pr)\n","\n","      except Exception as e:\n","          print(\"error in 236 :\", e)\n","\n","      try:\n","          gs_idx_list = [6, 7, 8]\n","          total_pr_list = [total_pr, short_total_pr, long_total_pr]\n","          rev_total_pr_list = [rev_total_pr, short_rev_total_pr, long_rev_total_pr]\n","          zip_obj = zip(gs_idx_list, frq_dev_plot(res_df, trade_list, side_list, plot=False), total_pr_list, rev_total_pr_list)\n","          [p_pr_plot(gs[gs_idx], frq_dev, res_df, total_pr, rev_total_pr, fontsize) for gs_idx, frq_dev, total_pr, rev_total_pr in zip_obj]     \n","\n","      except Exception as e:\n","          print(\"error in frq_dev_plot :\", e)\n","\n","      if show_plot:\n","          plt.show()\n","\n","      try:\n","\n","          h_np_pr = np.array(h_pr_list)\n","          # h_rev_np_pr = 1 / (np.array(h_pr_list) + fee) - fee    # define, for plot_check below cell\n","          h_rev_np_pr = (1 / (\n","                      (np.array(h_pr_list) - 1) / config.lvrg_set.leverage + np.array(fee_list) + 1) - np.array(\n","              fee_list) - 1) * config.lvrg_set.leverage + 1\n","\n","          # --------------------- h pr plot --------------------- #\n","          if len(h_np_pr[h_np_pr != 1]) != 0:\n","\n","              plt.figure(figsize=(16, 12))\n","              plt.suptitle(key + \" hedge\")\n","\n","              h_total_pr = np.cumprod(h_np_pr)\n","              h_wr = len(h_np_pr[h_np_pr > 1]) / len(h_np_pr[h_np_pr != 1])\n","\n","              plt.subplot(gs[0])\n","\n","              plt.plot(h_total_pr)\n","              plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (\n","              h_wr, np.min(h_np_pr), h_total_pr[-1], config.lvrg_set.leverage))\n","              # plt.show()\n","\n","              #         short only      #\n","              h_short_np_pr = np.array(h_short_list)\n","\n","              short_h_total_pr = np.cumprod(h_short_np_pr)\n","              h_short_wr = len(h_short_np_pr[h_short_np_pr > 1]) / len(h_short_np_pr[h_short_np_pr != 1])\n","\n","              plt.subplot(gs[1])\n","              plt.plot(short_h_total_pr)\n","              plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (\n","              h_short_wr, np.min(h_short_np_pr), short_h_total_pr[-1], config.lvrg_set.leverage))\n","\n","              #         long only      #\n","              h_long_np_pr = np.array(h_long_list)\n","\n","              long_h_total_pr = np.cumprod(h_long_np_pr)\n","              h_long_wr = len(h_long_np_pr[h_long_np_pr > 1]) / len(h_long_np_pr[h_long_np_pr != 1])\n","\n","              plt.subplot(gs[2])\n","              plt.plot(long_h_total_pr)\n","              plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (\n","              h_long_wr, np.min(h_long_np_pr), long_h_total_pr[-1], config.lvrg_set.leverage))\n","\n","              #     reversion adjustment      #\n","\n","              h_rev_total_pr = np.cumprod(h_rev_np_pr)\n","              h_rev_wr = len(h_rev_np_pr[h_rev_np_pr > 1]) / len(h_rev_np_pr[h_rev_np_pr != 1])\n","\n","              plt.subplot(gs[3])\n","              plt.plot(h_rev_total_pr)\n","              plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (\n","              h_rev_wr, np.min(h_rev_np_pr), h_rev_total_pr[-1], config.lvrg_set.leverage))\n","\n","              #         short       #\n","              # h_rev_short_np_pr = 1 / (np.array(h_short_list) + fee) - fee\n","              h_rev_short_np_pr = (1 / ((np.array(h_short_list) - 1) / config.lvrg_set.leverage + np.array(\n","                  short_fee_list) + 1) - np.array(short_fee_list) - 1) * config.lvrg_set.leverage + 1\n","\n","              short_h_rev_total_pr = np.cumprod(h_rev_short_np_pr)\n","              h_rev_short_wr = len(h_rev_short_np_pr[h_rev_short_np_pr > 1]) / len(\n","                  h_rev_short_np_pr[h_rev_short_np_pr != 1])\n","\n","              plt.subplot(gs[4])\n","              plt.plot(short_h_rev_total_pr)\n","              plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (\n","              h_rev_short_wr, np.min(h_rev_short_np_pr), short_h_rev_total_pr[-1], config.lvrg_set.leverage))\n","\n","              #         long       #\n","              # h_rev_long_np_pr = 1 / (np.array(h_long_list) + fee) - fee\n","              h_rev_long_np_pr = (1 / ((np.array(h_long_list) - 1) / config.lvrg_set.leverage + np.array(\n","                  long_fee_list) + 1) - np.array(long_fee_list) - 1) * config.lvrg_set.leverage + 1\n","\n","              long_h_rev_total_pr = np.cumprod(h_rev_long_np_pr)\n","              h_rev_long_wr = len(h_rev_long_np_pr[h_rev_long_np_pr > 1]) / len(\n","                  h_rev_long_np_pr[h_rev_long_np_pr != 1])\n","\n","              plt.subplot(gs[5])\n","              plt.plot(long_h_rev_total_pr)\n","              plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (\n","              h_rev_long_wr, np.min(h_rev_long_np_pr), long_h_rev_total_pr[-1], config.lvrg_set.leverage))\n","\n","              if show_plot:\n","                  plt.show()\n","\n","      except Exception as e:\n","          print('error in h_pr plot :', e)\n","\n","      print()\n","\n","      # ---------- to this line ---------- #\n","\n","    # print()\n","\n","\n","  # break # pair loop"]},{"cell_type":"code","source":["\n","def p_pr_plot(gs_, frq_dev_, res_df, pr_, rev_pr_, fontsize_):\n","    try:\n","        plt.subplot(gs_)\n","        plt.plot(frq_dev_)\n","\n","        title_msg = \"periodic_pr\\n acc_day : {:.4f}\\n month : {:.4f}\\n year : {:.4f}\\n rev_acc_day : {:.4f}\\n month : {:.4f}\\n year : {:.4f}\"\n","        len_df = len(res_df)\n","        plt.title(title_msg.format(*get_period_pr(len_df, pr_[-1]), *get_period_pr(len_df, rev_pr_[-1])), fontsize=fontsize_)\n","\n","    except Exception as e:\n","        print(\"error in p_pr_plot :\", e)\n","\n","    return"],"metadata":{"id":"ciUelfVkwZd_"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"jp-MarkdownHeadingCollapsed":true,"tags":[],"id":"Ksth13T0spcQ"},"source":["#### check statistical significance"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":5469,"status":"ok","timestamp":1642724193285,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"outputId":"7fa93b50-e52e-447b-e186-296e478d1daa","id":"pZlZCr2lspcR"},"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 3000x1000 with 36 Axes>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","\n"]},{"output_type":"display_data","data":{"image/png":"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g40xxtx///03ncuIESOMMcb4+/vbjDds2NAYY8ysWbNsxj/66CNjjDEPPPCAdWzPnj0mIiIi19qenp7GxcXFZszf39+kpqaat956y2bMGGP69+9v978bgiAIgiAIgnC2CA0NNcYY895779mMt2nTxhhjzFNPPWUz3rlzZ5txHx8fk5qaaiZNmmQzb+TIkSY7O9tUrlz5pvIoXry4McaYESNGXHeexWLJVfeUKlUqVw6TJ082xhjTpk0b65i3t7eJiYkxR44csdYq7du3N8YYEx0dbby8vGy+V8+ePY0xxrRv397uf08EQRAEQRAE4axxpQbo3LmzzfjYsWNNcnKyqV69us34e++9ZzIzM02lSpWMJNOpUydjjDHdunWzmbd8+XITHR19S7lERETYvB8yZMgQY4wxTz/9tHXM3d3dbNiwwVy4cMEULVrUSP/3PkhcXJzx9fW1zu3evXuu3Hbt2mWOHz9uvL29rWPt2rUzxhhjsVjs/vdBEARB3HywnR8A3IIZM2bY3H7yySfl6uqqsLAwlSxZ0hpnz57V4cOH9eCDD1rnLlmyRF27dpW3t7d1rE+fPjp58qTN1oC368oWF5MnT7YZ/+STTyRJ3bp1u+EaGRkZMsZIklxdXVWiRAldvHhRBw8eVNOmTe84RwAAAAB55/PPP7e53atXL/3555/673//a1OfbNu2TcnJydb6JDk5WT///LN69+5tc/8+ffpo8+bNOnHixE19/9TUVKWnp+uBBx6w2S7wavbt22dT98THx+vgwYOqWrWqdaxr167asmWLNmzYYB27dOmSZs2apcDAQNWtW9dmzfnz5ystLe2mcgUAAACQv44cOaKVK1fajPXq1UuRkZFKTEy0qVlWrVold3d3tWvXTpL022+/KS4uTn369LHe19fXV506ddLixYvvKK+uXbvqzJkzWrhwoXUsKytLU6dOlY+PT67twBcvXqw///zTejsyMlKSrLVM+fLl1bBhQ3355Ze6dOmSdd66deu0e/fuO8oVAJD/aKICgFvw972ra9SoIVdXV0VHRys+Pt4m6tatqzJlyljnLl68WEWKFNFjjz0mSfL29lbXrl21ZMmSPMnN399f2dnZio6OthmPjY1VYmKi/P39b7iGi4uLhg0bpkOHDik9PV0JCQmKj49Xo0aNVLx48TzJEwAAAMCdy8zM1MmTJ23GatSo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\n","text/plain":["<Figure size 3000x1000 with 21 Axes>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","\n"]}],"source":["# print(survey_df)\n","\n","plt.style.use('dark_background')\n","\n","title_name_list = [[\"total\", \"short\", \"long\"], [\"rev_total\", \"rev_short\", \"rev_long\"]]\n","survey_dfs_list = [[survey_df, short_survey_df, long_survey_df], [rev_survey_df, rev_short_survey_df, rev_long_survey_df]]\n","# title_name = \n","# survey_df_list = \n","\n","space_ = \" \" * 140\n","\n","for d_idx, (title_name, survey_dfs) in enumerate(zip(title_name_list, survey_dfs_list)):\n","\n","  fig = plt.figure(figsize=(30, 10))\n","\n","  gs = gridspec.GridSpec(nrows=1, # row 몇 개 \n","                          ncols=3, # col 몇 개 \n","                          # height_ratios=[1, 1, 1]\n","                        )\n","\n","  # gs = fig.add_gridspec(1, 3, wspace=0, hspace=0)\n","\n","  # nrows, ncols, h_r = 3, 3, [1, 1, 1]\n","  nrows, ncols, h_r = 3, 4, [1, 1, 1]\n","  # nrows, ncols, h_r = 4, 3, [1, 1, 1, 1]\n","\n","  # if d_idx == 0:\n","  # else:\n","    # nrows, ncols, h_r = 2, 2, [1, 1]\n","\n","  for gs_idx, (title, s_df) in enumerate(zip(title_name, survey_dfs)):  \n","\n","\n","    inner_gs = gs[gs_idx].subgridspec(nrows=nrows, # row 몇 개 \n","                          ncols=ncols, # col 몇 개 \n","                          height_ratios=h_r\n","                        )\n","\n","    for col_idx, s_cols in enumerate(s_df.columns):\n","      plt.subplot(inner_gs[col_idx])\n","      plt.plot(s_df[s_cols])\n","      plt.title(s_cols)\n","\n","  # plt.suptitle(\"total\" + \" \" * 140 + \"short\" + \" \" * 140 + \"long\")\n","  plt.suptitle(space_.join(title_name))\n","  plt.show()\n","  print(\"\\n\")"]},{"cell_type":"markdown","metadata":{"id":"Up1TNNxbfKbk","jp-MarkdownHeadingCollapsed":true,"tags":[]},"source":["#### fucntional res_plot()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YEruNXz_jYo4"},"outputs":[],"source":["# t_w_s = np.sum(np.where((np_zone_list == 't') & (np_pr > 1) & (np_side_list == 's'), 1, 0))\n","# t_w_s2 = np.sum(np.where((np_zone_list == 't') & (np_pr > 1) & (np_side_list in ['s']), 1, 0))\n","# t_w_s == t_w_s2\n","\n","# tc_zone_wl(np_zone_list, np_pr, np_side_list, zone=['l', 's'])\n","res_info(np_pr, tp_ratio_list, dr_list)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"WQ0ISsnIdwH7"},"outputs":[],"source":["def tc_zone_wl(np_zone_list, np_pr, np_side_list, zone=['l', 's']):  \n","\n","  t_w_s = np.sum(np.where((np_zone_list == 't') & (np_pr > 1) & (np_side_list in zone), 1, 0))\n","  c_w_s = np.sum(np.where((np_zone_list == 'c') & (np_pr > 1) & (np_side_list in zone), 1, 0))\n","  t_ls_s = np.sum(np.where((np_zone_list == 't') & (np_pr < 1) & (np_side_list in zone), 1, 0))\n","  c_ls_s = np.sum(np.where((np_zone_list == 'c') & (np_pr < 1) & (np_side_list in zone), 1, 0))\n","\n","  return t_w, c_w, t_ls, c_ls\n","\n","\n","def res_info(np_pr, tp_ratio_list, dr_list):\n","\n","  total_pr = np.cumprod(np_pr)\n","\n","  for_sum_pr = np_pr - 1\n","  for_sum_pr[0] = 1\n","  sum_pr = np.cumsum(for_sum_pr)\n","  sum_pr = np.where(sum_pr < 0, 0, sum_pr)\n","\n","  wr = len(np_pr[np_pr > 1]) / len(np_pr[np_pr != 1])\n","  \n","  total_rollmax_pr = np.maximum.accumulate(total_pr)\n","  total_acc_mdd = np.max((total_rollmax_pr - total_pr) / total_rollmax_pr)\n","  total_rollmax_sumpr = np.maximum.accumulate(sum_pr)\n","  total_sum_mdd = np.max((total_rollmax_sumpr - sum_pr) / total_rollmax_sumpr)\n","\n","  np_tp_ratio_list = np.array(tp_ratio_list) # 초기에 tr 을 정하는거라 mean 사용하는게 맞음\n","  mean_tr = np.mean(np_tp_ratio_list[np.isnan(np_tp_ratio_list) == 0])\n","\n","  np_dr_list = np.array(dr_list) # 초기에 tr 을 정하는거라 mean 사용하는게 맞음\n","  mean_dr = np.mean(np_dr_list[np.isnan(np_dr_list) == 0])\n","\n","  return total_pr, sum_pr, wr, total_acc_mdd, total_sum_mdd, mean_tr, mean_dr\n","\n","\n","# def res_plot(res_df, pr_list, zone_list, side_list, tp_ratio_list, dr_list, nontp_liqd_list, nontp_pr_list, config, liqd_list):\n","def res_plot():\n","\n","    fontsize = 10\n","    plt.style.use('default')\n","    # mpl.rcParams.update(mpl.rcParamsDefault)\n","\n","    fig = plt.figure(figsize=(14, 10))\n","\n","    gs = gridspec.GridSpec(nrows=3, # row 몇 개 \n","                            ncols=3, # col 몇 개 \n","                            height_ratios=[10, 10, 1]\n","                          )\n","    # plt.figure(figsize=(16, 12))\n","    # plt.figure(figsize=(12, 8))\n","    # plt.figure(figsize=(10, 6))\n","    plt.suptitle(key)\n","\n","    try:\n","      np_pr = np.array(pr_list)\n","\n","      sr = sharpe_ratio(np_pr)\n","\n","      dpf = (len(res_df) / 1440) / len(np_pr)\n","\n","      np_zone_list = np.array(zone_list)\n","      # np_pr_list = np.array(pr_list)\n","      np_side_list = np.array(side_list)\n","\n","      t_w = np.sum(np.where((np_zone_list == 't') & (np_pr > 1), 1, 0))\n","      c_w = np.sum(np.where((np_zone_list == 'c') & (np_pr > 1), 1, 0))\n","      t_ls = np.sum(np.where((np_zone_list == 't') & (np_pr < 1), 1, 0))\n","      c_ls = np.sum(np.where((np_zone_list == 'c') & (np_pr < 1), 1, 0))\n","\n","      # np_pr = (np.array(pr_list) - 1) * config.lvrg_set.leverage + 1\n","\n","      # ----- fake_pr ----- #\n","      # np_pr = np.where(np_pr > 1, 1 + (np_pr - 1) * 3, np_pr)\n","\n","      total_pr = np.cumprod(np_pr)\n","\n","      for_sum_pr = np_pr - 1\n","      for_sum_pr[0] = 1\n","      sum_pr = np.cumsum(for_sum_pr)\n","      sum_pr = np.where(sum_pr < 0, 0, sum_pr)\n","\n","      wr = len(np_pr[np_pr > 1]) / len(np_pr[np_pr != 1])\n","      \n","      total_rollmax_pr = np.maximum.accumulate(total_pr)\n","      total_acc_mdd = np.max((total_rollmax_pr - total_pr) / total_rollmax_pr)\n","      total_rollmax_sumpr = np.maximum.accumulate(sum_pr)\n","      total_sum_mdd = np.max((total_rollmax_sumpr - sum_pr) / total_rollmax_sumpr)\n","\n","      np_tp_ratio_list = np.array(tp_ratio_list) # 초기에 tr 을 정하는거라 mean 사용하는게 맞음\n","      mean_tr = np.mean(np_tp_ratio_list[np.isnan(np_tp_ratio_list) == 0])\n","\n","      np_dr_list = np.array(dr_list) # 초기에 tr 을 정하는거라 mean 사용하는게 맞음\n","      mean_dr = np.mean(np_dr_list[np.isnan(np_dr_list) == 0])\n","\n","      # pr_gap = (np_pr - 1) / config.lvrg_set.leverage + fee\n","      # tp_gap_ = pr_gap[pr_gap > 0]\n","      # # mean_config.tr_set.tp_gap = np.mean(pr_gap[pr_gap > 0])\n","      # mean_ls_gap = np.mean(pr_gap[pr_gap < 0])\n","\n","      # ---- profit fee ratio ---- #\n","      # mean_pgfr = np.mean((tp_gap_ - fee) / abs(tp_gap_ + fee))\n","\n","      plt.subplot(gs[0])\n","      plt.plot(total_pr)\n","      plt.plot(sum_pr, color='gold')\n","      if len(nontp_liqd_list) != 0:\n","        plt.title(\"wr : %.3f\\n len(td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (wr, len(np_pr[np_pr != 1]), dpf, np.min(np_pr), total_pr[-1], sum_pr[-1], sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (total_acc_mdd, total_sum_mdd, config.lvrg_set.leverage, min(liqd_list), mean_tr, mean_dr)  + \\\n","                  \"\\n nontp_liqd_cnt : %s\\nnontp_liqd : %.3f\\nontp_liqd_pr : %.3f\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_liqd_list), min(nontp_liqd_list), min(nontp_pr_list), t_w, c_w, t_ls, c_ls) ,\n","                  position=title_position, fontsize=fontsize)\n","      else:\n","        plt.title(\"wr : %.3f\\n len(td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\" \n","                  % (wr, len(np_pr[np_pr != 1]), dpf, np.min(np_pr), total_pr[-1], sum_pr[-1], sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (total_acc_mdd, total_sum_mdd, config.lvrg_set.leverage, min(liqd_list), mean_tr, mean_dr)  + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_liqd_list), t_w, c_w, t_ls, c_ls) ,\n","                  position=title_position, fontsize=fontsize)\n","      # plt.show()\n","\n","      survey_df.iloc[survey_i] = wr, sr, len(np_pr[np_pr != 1]), dpf, \\\n","        total_pr[-1], sum_pr[-1], total_acc_mdd, total_sum_mdd, min(liqd_list), np.min(np_pr), mean_tr, mean_dr\n","\n","      print('supblot231 passed')\n","\n","    except Exception as e:\n","      print(\"error in 231 :\", e)\n","\n","\n","    try:\n","      #         short only      #\n","      short_np_pr = np.array(short_list)\n","\n","      short_sr = sharpe_ratio(short_np_pr)\n","\n","      short_dpf = (len(res_df) / 1440) / len(short_np_pr)\n","\n","      short_total_pr = np.cumprod(short_np_pr)\n","      \n","      short_for_sum_pr = short_np_pr - 1\n","      short_for_sum_pr[0] = 1\n","      short_sum_pr = np.cumsum(short_for_sum_pr)\n","      short_sum_pr = np.where(short_sum_pr < 0, 0, short_sum_pr)\n","\n","      short_wr = len(short_np_pr[short_np_pr > 1]) / len(short_np_pr[short_np_pr != 1])\n","      \n","      t_w_s = np.sum(np.where((np_zone_list == 't') & (np_pr > 1) & (np_side_list == 's'), 1, 0))\n","      c_w_s = np.sum(np.where((np_zone_list == 'c') & (np_pr > 1) & (np_side_list == 's'), 1, 0))\n","      t_ls_s = np.sum(np.where((np_zone_list == 't') & (np_pr < 1) & (np_side_list == 's'), 1, 0))\n","      c_ls_s = np.sum(np.where((np_zone_list == 'c') & (np_pr < 1) & (np_side_list == 's'), 1, 0))\n","\n","      short_rollmax_pr = np.maximum.accumulate(short_total_pr)\n","      short_acc_mdd = np.max((short_rollmax_pr - short_total_pr) / short_rollmax_pr)\n","      short_rollmax_sumpr = np.maximum.accumulate(short_sum_pr)\n","      short_sum_mdd = np.max((short_rollmax_sumpr - short_sum_pr) / short_rollmax_sumpr)\n","\n","      np_short_tp_ratio_list = np.array(short_tp_ratio_list)\n","      mean_short_tr = np.mean(np_short_tp_ratio_list[np.isnan(np_short_tp_ratio_list) == 0])\n","      \n","      np_short_dr_list = np.array(short_dr_list)\n","      mean_short_dr = np.mean(np_short_dr_list[np.isnan(np_short_dr_list) == 0])\n","      \n","      # short_pr_gap = (short_np_pr - 1) / config.lvrg_set.leverage + fee\n","      # short_tp_gap = short_pr_gap[short_pr_gap > 0]\n","      # # mean_short_tp_gap = np.mean(short_pr_gap[short_pr_gap > 0])\n","      # # mean_short_ls_gap = np.mean(short_pr_gap[short_pr_gap < 0])\n","\n","      # mean_short_pgfr = np.mean((short_tp_gap - fee) / abs(short_tp_gap + fee))\n","      \n","      # plt.subplot(232)\n","      plt.subplot(gs[1])\n","      plt.plot(short_total_pr)\n","      plt.plot(short_sum_pr, color='gold')\n","      if len(nontp_short_liqd_list) != 0:   \n","\n","        max_nontp_short_term = len(res_df) - nontp_short_indexs[0]\n","        \n","        plt.title(\"wr : %.3f\\nlen(short_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (short_wr, len(short_np_pr[short_np_pr != 1]), short_dpf, np.min(short_np_pr), short_total_pr[-1], short_sum_pr[-1], short_sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (short_acc_mdd, short_sum_mdd, config.lvrg_set.leverage, min(short_liqd_list), mean_short_tr, mean_short_dr) + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n nontp_liqd : %.3f\\n nontp_liqd_pr : %.3f\\n max_nontp_term : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_short_liqd_list), min(nontp_short_liqd_list), min(nontp_short_pr_list), max_nontp_short_term, t_w_s, c_w_s, t_ls_s, c_ls_s) ,\n","                  position=title_position, fontsize=fontsize)\n","      else:\n","        plt.title(\"wr : %.3f\\nlen(short_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (short_wr, len(short_np_pr[short_np_pr != 1]), short_dpf, np.min(short_np_pr), short_total_pr[-1], short_sum_pr[-1], short_sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (short_acc_mdd, short_sum_mdd, config.lvrg_set.leverage, min(short_liqd_list), mean_short_tr, mean_short_dr) + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_short_liqd_list), t_w_s, c_w_s, t_ls_s, c_ls_s),\n","                  position=title_position, fontsize=fontsize)\n","   \n","      short_survey_df.iloc[survey_i] = short_wr, short_sr, len(short_np_pr[short_np_pr != 1]), short_dpf, \\\n","        short_total_pr[-1], short_sum_pr[-1], short_acc_mdd, short_sum_mdd, min(short_liqd_list), np.min(short_np_pr), mean_short_tr, mean_short_dr\n","        \n","      print('supblot232 passed')\n","    \n","    except Exception as e:\n","      print(\"error in 232 :\", e)\n","\n","    try:\n","      #         long only      #\n","      long_np_pr = np.array(long_list)\n","      # long_np_pr = (np.array(long_list) - 1) * config.lvrg_set.leverage + 1\n","\n","      long_sr = sharpe_ratio(long_np_pr)\n","\n","      long_dpf = (len(res_df) / 1440) / len(long_np_pr)\n","\n","      long_total_pr = np.cumprod(long_np_pr)\n","      \n","      long_for_sum_pr = long_np_pr - 1\n","      long_for_sum_pr[0] = 1\n","      long_sum_pr = np.cumsum(long_for_sum_pr)\n","      long_sum_pr = np.where(long_sum_pr < 0, 0, long_sum_pr)\n","\n","      long_wr = len(long_np_pr[long_np_pr > 1]) / len(long_np_pr[long_np_pr != 1])\n","\n","      t_w_l = np.sum(np.where((np_zone_list == 't') & (np_pr > 1) & (np_side_list == 'l'), 1, 0))\n","      c_w_l = np.sum(np.where((np_zone_list == 'c') & (np_pr > 1) & (np_side_list == 'l'), 1, 0))\n","      t_ls_l = np.sum(np.where((np_zone_list == 't') & (np_pr < 1) & (np_side_list == 'l'), 1, 0))\n","      c_ls_l = np.sum(np.where((np_zone_list == 'c') & (np_pr < 1) & (np_side_list == 'l'), 1, 0))\n","\n","      long_rollmax_pr = np.maximum.accumulate(long_total_pr)\n","      long_acc_mdd = np.max((long_rollmax_pr - long_total_pr) / long_rollmax_pr)\n","      long_rollmax_sumpr = np.maximum.accumulate(long_sum_pr)\n","      long_sum_mdd = np.max((long_rollmax_sumpr - long_sum_pr) / long_rollmax_sumpr)\n","\n","      np_long_tp_ratio_list = np.array(long_tp_ratio_list)\n","      mean_long_tr = np.mean(np_long_tp_ratio_list[np.isnan(np_long_tp_ratio_list) == 0])\n","      \n","      np_long_dr_list = np.array(long_dr_list)\n","      mean_long_dr = np.mean(np_long_dr_list[np.isnan(np_long_dr_list) == 0])\n","\n","      # long_pr_gap = (long_np_pr - 1) / config.lvrg_set.leverage + fee\n","      # long_tp_gap = long_pr_gap[long_pr_gap > 0]\n","      # # mean_long_tp_gap = np.mean(long_pr_gap[long_pr_gap > 0])\n","      # # mean_long_ls_gap = np.mean(long_pr_gap[long_pr_gap < 0])\n","\n","      # mean_long_pgfr = np.mean((long_tp_gap - fee) / abs(long_tp_gap + fee))\n","\n","      plt.subplot(gs[2])\n","      plt.plot(long_total_pr)\n","      plt.plot(long_sum_pr, color='gold')\n","      if len(nontp_long_liqd_list) != 0:\n","\n","        max_nontp_long_term = len(res_df) - nontp_long_indexs[0]\n","\n","        plt.title(\"wr : %.3f\\nlen(long_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (long_wr, len(long_np_pr[long_np_pr != 1]), long_dpf, np.min(long_np_pr), long_total_pr[-1], long_sum_pr[-1], long_sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (long_acc_mdd, long_sum_mdd, config.lvrg_set.leverage, min(long_liqd_list), mean_long_tr, mean_long_dr)  + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n nontp_liqd : %.3f\\n nontp_liqd_pr : %.3f\\n max_nontp_term : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_long_liqd_list), min(nontp_long_liqd_list), min(nontp_long_pr_list), max_nontp_long_term, t_w_l, c_w_l, t_ls_l, c_ls_l) ,\n","                  position=title_position, fontsize=fontsize)\n","      else:\n","        plt.title(\"wr : %.3f\\nlen(long_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (long_wr, len(long_np_pr[long_np_pr != 1]), long_dpf, np.min(long_np_pr), long_total_pr[-1], long_sum_pr[-1], long_sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (long_acc_mdd, long_sum_mdd, config.lvrg_set.leverage, min(long_liqd_list), mean_long_tr, mean_long_dr) + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_long_liqd_list), t_w_l, c_w_l, t_ls_l, c_ls_l),\n","                  position=title_position, fontsize=fontsize)\n","\n","      long_survey_df.iloc[survey_i] = long_wr, long_sr, len(long_np_pr[long_np_pr != 1]), long_dpf, \\\n","        long_total_pr[-1], long_sum_pr[-1], long_acc_mdd, long_sum_mdd, min(long_liqd_list), np.min(long_np_pr), mean_long_tr, mean_long_dr\n","\n","      print('supblot233 passed')\n","\n","    except Exception as e:\n","      print(\"error in 233 :\", e)\n","\n","\n","    try:\n","      #     reversion adjustment      #\n","      # rev_np_pr = 1 / (np.array(pr_list) + fee) - fee\n","      rev_fee = tp_fee + out_fee - np.array(fee_list)\n","      rev_np_pr = (1 / ((np.array(pr_list) - 1) / config.lvrg_set.leverage + np.array(fee_list) + 1) - rev_fee - 1) * config.lvrg_set.leverage + 1\n","      # rev_np_pr = (1 / (np.array(pr_list) + fee) - fee - 1) * config.lvrg_set.leverage + 1\n","          \n","      rev_sr = sharpe_ratio(rev_np_pr)\n","\n","      rev_total_pr = np.cumprod(rev_np_pr)\n","      rev_wr = len(rev_np_pr[rev_np_pr > 1]) / len(rev_np_pr[rev_np_pr != 1])\n","\n","      rev_total_for_sum_pr = rev_np_pr - 1\n","      rev_total_for_sum_pr[0] = 1\n","      rev_total_sum_pr = np.cumsum(rev_total_for_sum_pr)\n","      rev_total_sum_pr = np.where(rev_total_sum_pr < 0, 0, rev_total_sum_pr)\n","\n","      rev_rollmax_pr = np.maximum.accumulate(rev_total_pr)\n","      rev_acc_mdd = np.max((rev_rollmax_pr - rev_total_pr) / rev_rollmax_pr)\n","      rev_rollmax_sumpr = np.maximum.accumulate(rev_total_sum_pr)\n","      rev_sum_mdd = np.max((rev_rollmax_sumpr - rev_total_sum_pr) / rev_rollmax_sumpr)\n","\n","      plt.subplot(gs[3])\n","\n","      plt.plot(rev_total_pr)\n","      plt.plot(rev_total_sum_pr, color='gold')\n","\n","      plt.title(\"wr : %.3f\\n sr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n min_pr : %.3f\" \n","                % (rev_wr, rev_sr, rev_total_pr[-1], rev_total_sum_pr[-1], \n","                   rev_acc_mdd, rev_sum_mdd, np.min(rev_np_pr)), fontsize=fontsize)\n","      \n","      rev_survey_df.iloc[survey_i] = rev_wr, rev_sr, rev_total_pr[-1], rev_total_sum_pr[-1], rev_acc_mdd, rev_sum_mdd, np.min(rev_np_pr)\n","\n","    except Exception as e:\n","      print(\"error in 234 :\", e)\n","\n","    try:\n","      #         short       #\n","      # rev_short_np_pr = 1 / (np.array(short_list) + fee) - fee\n","      rev_short_fee = tp_fee + out_fee - np.array(short_fee_list)\n","      rev_short_np_pr = (1 / ((np.array(short_list) - 1) / config.lvrg_set.leverage + np.array(short_fee_list) + 1) - rev_short_fee - 1) * config.lvrg_set.leverage + 1\n","      # rev_short_np_pr = (1 / (np.array(short_list) + fee) - fee - 1) * config.lvrg_set.leverage + 1\n","      \n","      rev_short_sr = sharpe_ratio(rev_short_np_pr)\n","          \n","      short_rev_total_pr = np.cumprod(rev_short_np_pr)\n","      rev_short_wr = len(rev_short_np_pr[rev_short_np_pr > 1]) / len(rev_short_np_pr[rev_short_np_pr != 1])\n","\n","      rev_short_for_sum_pr = rev_short_np_pr - 1\n","      rev_short_for_sum_pr[0] = 1\n","      short_rev_sum_pr = np.cumsum(rev_short_for_sum_pr)\n","      short_rev_sum_pr = np.where(short_rev_sum_pr < 0, 0, short_rev_sum_pr)\n","\n","      short_rev_rollmax_pr = np.maximum.accumulate(short_rev_total_pr)\n","      short_rev_acc_mdd = np.max((short_rev_rollmax_pr - short_rev_total_pr) / short_rev_rollmax_pr)\n","      short_rev_rollmax_sumpr = np.maximum.accumulate(short_rev_sum_pr)\n","      short_rev_sum_mdd = np.max((short_rev_rollmax_sumpr - short_rev_sum_pr) / short_rev_rollmax_sumpr)\n","\n","      plt.subplot(gs[4])\n","\n","      plt.plot(short_rev_total_pr)\n","      plt.plot(short_rev_sum_pr, color='gold')\n","\n","      plt.title(\"wr : %.3f\\n sr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n min_pr : %.3f\" \n","                % (rev_short_wr, rev_short_sr, short_rev_total_pr[-1], short_rev_sum_pr[-1], \n","                   short_rev_acc_mdd, short_rev_sum_mdd, np.min(rev_short_np_pr)), fontsize=fontsize)\n","      \n","      rev_short_survey_df.iloc[survey_i] = rev_short_wr, rev_short_sr, short_rev_total_pr[-1], short_rev_sum_pr[-1], short_rev_acc_mdd, short_rev_sum_mdd, np.min(rev_short_np_pr)\n","\n","    except Exception as e:\n","      print(\"error in 235 :\", e)\n","\n","    try:\n","      #         long       #\n","      # rev_long_np_pr = 1 / (np.array(long_list) + fee) - fee\n","      rev_long_fee = tp_fee + out_fee - np.array(long_fee_list)\n","      rev_long_np_pr = (1 / ((np.array(long_list) - 1) / config.lvrg_set.leverage + np.array(long_fee_list) + 1) - rev_long_fee - 1) * config.lvrg_set.leverage + 1\n","          \n","      rev_long_sr = sharpe_ratio(rev_long_np_pr)\n","\n","      long_rev_total_pr = np.cumprod(rev_long_np_pr)\n","      rev_long_wr = len(rev_long_np_pr[rev_long_np_pr > 1]) / len(rev_long_np_pr[rev_long_np_pr != 1])\n","\n","      rev_long_for_sum_pr = rev_long_np_pr - 1\n","      rev_long_for_sum_pr[0] = 1\n","      long_rev_sum_pr = np.cumsum(rev_long_for_sum_pr)\n","      long_rev_sum_pr = np.where(long_rev_sum_pr < 0, 0, long_rev_sum_pr)\n","\n","      long_rev_rollmax_pr = np.maximum.accumulate(long_rev_total_pr)\n","      long_rev_acc_mdd = np.max((long_rev_rollmax_pr - long_rev_total_pr) / long_rev_rollmax_pr)\n","      long_rev_rollmax_sumpr = np.maximum.accumulate(long_rev_sum_pr)\n","      long_rev_sum_mdd = np.max((long_rev_rollmax_sumpr - long_rev_sum_pr) / long_rev_rollmax_sumpr)\n","\n","      plt.subplot(gs[5])\n","\n","      plt.plot(long_rev_total_pr)\n","      plt.plot(long_rev_sum_pr, color='gold')\n","\n","      plt.title(\"wr : %.3f\\n sr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n min_pr : %.3f\" \n","                % (rev_long_wr, rev_long_sr, long_rev_total_pr[-1], long_rev_sum_pr[-1], \n","                   long_rev_acc_mdd, long_rev_sum_mdd, np.min(rev_long_np_pr)), fontsize=fontsize)\n","      \n","      rev_long_survey_df.iloc[survey_i] = rev_long_wr, rev_long_sr, long_rev_total_pr[-1], long_rev_sum_pr[-1], long_rev_acc_mdd, long_rev_sum_mdd, np.min(rev_long_np_pr)\n","      \n","    except Exception as e:\n","      print(\"error in 236 :\", e)\n","\n","    if show_plot:\n","      \n","      frq_dev, s_frq_dev, l_frq_dev = frq_dev_plot(res_df, trade_list, side_list, plot=False)      \n","      plt.subplot(gs[6])\n","      plt.plot(frq_dev)\n","\n","      plt.subplot(gs[7])\n","      plt.plot(s_frq_dev)\n","\n","      plt.subplot(gs[8])\n","      plt.plot(l_frq_dev)\n","\n","      plt.show()\n","    \n","\n","    try:\n","\n","      h_np_pr = np.array(h_pr_list)\n","      # h_rev_np_pr = 1 / (np.array(h_pr_list) + fee) - fee    # define, for plot_check below cell\n","      h_rev_np_pr = (1 / ((np.array(h_pr_list) - 1) / config.lvrg_set.leverage + np.array(fee_list) + 1) - np.array(fee_list) - 1) * config.lvrg_set.leverage + 1\n","\n","      # --------------------- h pr plot --------------------- #\n","      if len(h_np_pr[h_np_pr != 1]) != 0:\n","\n","        plt.figure(figsize=(16, 12))\n","        plt.suptitle(key + \" hedge\")\n","\n","        h_total_pr = np.cumprod(h_np_pr)\n","        h_wr = len(h_np_pr[h_np_pr > 1]) / len(h_np_pr[h_np_pr != 1])\n","\n","        plt.subplot(gs[0])\n","\n","        plt.plot(h_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_wr, np.min(h_np_pr), h_total_pr[-1], config.lvrg_set.leverage))\n","        # plt.show()\n","\n","        #         short only      #\n","        h_short_np_pr = np.array(h_short_list)\n","\n","        short_h_total_pr = np.cumprod(h_short_np_pr)\n","        h_short_wr = len(h_short_np_pr[h_short_np_pr > 1]) / len(h_short_np_pr[h_short_np_pr != 1])\n","        \n","        plt.subplot(gs[1])\n","        plt.plot(short_h_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_short_wr, np.min(h_short_np_pr), short_h_total_pr[-1], config.lvrg_set.leverage))\n","\n","        #         long only      #\n","        h_long_np_pr = np.array(h_long_list)\n","\n","        long_h_total_pr = np.cumprod(h_long_np_pr)\n","        h_long_wr = len(h_long_np_pr[h_long_np_pr > 1]) / len(h_long_np_pr[h_long_np_pr != 1])\n","        \n","        plt.subplot(gs[2])\n","        plt.plot(long_h_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_long_wr, np.min(h_long_np_pr), long_h_total_pr[-1], config.lvrg_set.leverage))\n","\n","\n","        #     reversion adjustment      #\n","            \n","        h_rev_total_pr = np.cumprod(h_rev_np_pr)\n","        h_rev_wr = len(h_rev_np_pr[h_rev_np_pr > 1]) / len(h_rev_np_pr[h_rev_np_pr != 1])\n","\n","        plt.subplot(gs[3])\n","        plt.plot(h_rev_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_rev_wr, np.min(h_rev_np_pr), h_rev_total_pr[-1], config.lvrg_set.leverage))\n","\n","        #         short       #\n","        # h_rev_short_np_pr = 1 / (np.array(h_short_list) + fee) - fee\n","        h_rev_short_np_pr =  (1 / ((np.array(h_short_list) - 1) / config.lvrg_set.leverage + np.array(short_fee_list) + 1) - np.array(short_fee_list) - 1) * config.lvrg_set.leverage + 1\n","           \n","        short_h_rev_total_pr = np.cumprod(h_rev_short_np_pr)\n","        h_rev_short_wr = len(h_rev_short_np_pr[h_rev_short_np_pr > 1]) / len(h_rev_short_np_pr[h_rev_short_np_pr != 1])\n","\n","        plt.subplot(gs[4])\n","        plt.plot(short_h_rev_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_rev_short_wr, np.min(h_rev_short_np_pr), short_h_rev_total_pr[-1], config.lvrg_set.leverage))\n","\n","        #         long       #\n","        # h_rev_long_np_pr = 1 / (np.array(h_long_list) + fee) - fee\n","        h_rev_long_np_pr =  (1 / ((np.array(h_long_list) - 1) / config.lvrg_set.leverage + np.array(long_fee_list) + 1) - np.array(long_fee_list) - 1) * config.lvrg_set.leverage + 1\n","            \n","        long_h_rev_total_pr = np.cumprod(h_rev_long_np_pr)\n","        h_rev_long_wr = len(h_rev_long_np_pr[h_rev_long_np_pr > 1]) / len(h_rev_long_np_pr[h_rev_long_np_pr != 1])\n","\n","        plt.subplot(gs[5])\n","        plt.plot(long_h_rev_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_rev_long_wr, np.min(h_rev_long_np_pr), long_h_rev_total_pr[-1], config.lvrg_set.leverage))\n","        \n","        if show_plot:\n","          plt.show()\n","          \n","    except Exception as e:\n","      print('error in h_pr plot :', e)   "]},{"cell_type":"markdown","metadata":{"jp-MarkdownHeadingCollapsed":true,"tags":[],"id":"zQ-roiifspcX"},"source":["#### ep_loc.point & zone legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Js5eL87VspcX"},"outputs":[],"source":["\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 (res_df['close'] < res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(strat_version)] - 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] >= res_df['bb_lower_1m']) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['bb_lower_1m']) &\n","    #                 (res_df['close'] < res_df['bb_lower_1m'])\n","    #                 , res_df['entry_{}'.format(strat_version)] - 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   (res_df['close'] > res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(strat_version)] + 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] <= res_df['bb_upper_1m']) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['bb_upper_1m']) &\n","    #                   (res_df['close'] > res_df['bb_upper_1m'])\n","    #                 , res_df['entry_{}'.format(strat_version)] + 1, res_df['entry_{}'.format(strat_version)])\n","\n","\n","    \n","   # --------------- ema --------------- #   \n","  # res_df['ema5_1m'] = ema(res_df['close'], 5).shift(1)\n","\n","  #   # --------------- cloud bline --------------- #   \n","  # res_df['cloud_bline_1m'] = cloud_bline(res_df, 26).shift(1)\n","  \n","    #       stochastic      #\n","  # res_df['stoch'] = stoch(res_df, 5, 3, 3)\n","\n","    #       fisher      #\n","  # res_df['fisher30'] = fisher(res_df, 30)\n","  # res_df['fisher60'] = fisher(res_df, 60)\n","  # res_df['fisher120'] = fisher(res_df, 120)\n","\n","    #       cctbbo      #\n","  # res_df['cctbbo'], _ = cct_bbo(res_df, 21, 13)\n","\n","    #       ema_roc      #\n","  # res_df['ema_roc'] = ema_roc(res_df['close'], 13, 9)\n","\n","\n","   # ------------------------------ htf data ------------------------------ #    \n","\n","  #             Todo              #\n","  # htf_df = pd.read_excel(date_path2 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # htf_df = pd.read_excel(date_path3 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # htf_df = pd.read_excel(date_path4 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # htf_df = pd.read_excel(date_path5 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # # # # htf_df = pd.read_excel(date_path6 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","\n","  # # ---- htf index slicing ---- #\n","  # htf_df = htf_df.loc[:res_df.index[-1]]\n","  \n","  # print(\"res_df.index[-1] :\", res_df.index[-1])\n","  # print(\"htf_df.index[-1] :\", htf_df.index[-1])\n","\n","  # res_df = dc_line(res_df, htf_df, '5m')\n","  # res_df = dc_level(res_df, '5m', 1)\n","\n","\n","  # # # if \"sma4\" in res_df.columns:\n","  # # #   res_df.drop(\"sma4\", axis=1, inplace=1)\n","\n","  # # htf_df['sma'] = htf_df['close'].rolling(60).mean()\n","  # # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, htf_df, [-1]), columns=['sma_30m']))\n","  \n","  # htf_df['stoch'] = stoch(htf_df, 13, 3, 3)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, htf_df, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","   \n","  # fifth_df['ema'] = ema(fifth_df['close'], 5)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, fifth_df, [-1]), columns=['ema5']))\n","\n","        # ------------------------------------ short ------------------------------------ # \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 0:\n","        #   mr_score += 1          \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_upper_1m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_upper_3m'].iloc[i] <= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_upper_5m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == 'MARKET':\n","        #   mr_const_cnt += 1\n","        #   if (res_df['close'].iloc[i] - res_df['short_tp'].iloc[i]) / (res_df['short_out'].iloc[i] - res_df['close'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error):  \n","        #     mr_score += 1\n","\n","           \n","        # ------- entry once ------- #   \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == 1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == -1:\n","        #     prev_entry_cnt += 1          \n","        # # # print(\"prev_entry_cnt :\", prev_entry_cnt)\n","\n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] < res_df['bb_lower_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_lower2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_base_1h'].iloc[i]:\n","\n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] < res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","  \n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['low'].iloc[i] > res_df['short_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1\n","\n","\n","\n","        # ------------------------------------ long ------------------------------------ # \n","          \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 1:\n","        #   mr_score += 1   \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 1:\n","        #   mr_score += 1     \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 1:\n","          # mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_lower_1m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_lower_3m'].iloc[i] >= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_lower_5m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == \"MARKET\":\n","          # mr_const_cnt += 1        \n","          # if (res_df['long_tp'].iloc[i] - res_df['close'].iloc[i]) / (res_df['close'].iloc[i] - res_df['long_out'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error): # 일반적으로 dr 상에서 tp 비율이 더 커짐 (tr 보다)\n","          #   mr_score += 1\n","\n","        # -------------- ep limit -------------- #    \n","        # mr_const_cnt += 1\n","        # # if (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # if config.ep_set.min_eplim_pct < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # # if 0 < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        #   # if res_df['st_gap_15m'].iloc[i] / res_df['open'].iloc[i] < 0:\n","        #   #   print(\"i, res_df['st_gap_15m'].iloc[i] :\", i, res_df['st_gap_15m'].iloc[i])\n","        #   mr_score += 1\n","\n","\n","        # -------------- entry once -------------- #    \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == -1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == 1:\n","        #     prev_entry_cnt += 1\n","          \n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","          \n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] > res_df['bb_upper_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_upper2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_base_1h'].iloc[i]:\n","        \n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] > res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","\n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['high'].iloc[i] < res_df['long_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","          \n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1"]},{"cell_type":"markdown","metadata":{"id":"MteLY9PS2ZeK"},"source":["##### check statistical significance"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":6961,"status":"ok","timestamp":1642590194232,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"NzbWuwSw2jaj","outputId":"732156c4-d74c-4c27-deb6-42ed7fd354c7"},"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 3000x1000 with 36 Axes>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 3000x1000 with 21 Axes>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","\n"]}],"source":["# print(survey_df)\n","\n","plt.style.use('dark_background')\n","\n","title_name_list = [[\"total\", \"short\", \"long\"], [\"rev_total\", \"rev_short\", \"rev_long\"]]\n","survey_dfs_list = [[survey_df, short_survey_df, long_survey_df], [rev_survey_df, rev_short_survey_df, rev_long_survey_df]]\n","# title_name = \n","# survey_df_list = \n","\n","space_ = \" \" * 140\n","\n","for d_idx, (title_name, survey_dfs) in enumerate(zip(title_name_list, survey_dfs_list)):\n","\n","  fig = plt.figure(figsize=(30, 10))\n","\n","  gs = gridspec.GridSpec(nrows=1, # row 몇 개 \n","                          ncols=3, # col 몇 개 \n","                          # height_ratios=[1, 1, 1]\n","                        )\n","\n","  # gs = fig.add_gridspec(1, 3, wspace=0, hspace=0)\n","\n","  # nrows, ncols, h_r = 3, 3, [1, 1, 1]\n","  nrows, ncols, h_r = 3, 4, [1, 1, 1]\n","  # nrows, ncols, h_r = 4, 3, [1, 1, 1, 1]\n","\n","  # if d_idx == 0:\n","  # else:\n","    # nrows, ncols, h_r = 2, 2, [1, 1]\n","\n","  for gs_idx, (title, s_df) in enumerate(zip(title_name, survey_dfs)):  \n","\n","\n","    inner_gs = gs[gs_idx].subgridspec(nrows=nrows, # row 몇 개 \n","                          ncols=ncols, # col 몇 개 \n","                          height_ratios=h_r\n","                        )\n","\n","    for col_idx, s_cols in enumerate(s_df.columns):\n","      plt.subplot(inner_gs[col_idx])\n","      plt.plot(s_df[s_cols])\n","      plt.title(s_cols)\n","\n","  # plt.suptitle(\"total\" + \" \" * 140 + \"short\" + \" \" * 140 + \"long\")\n","  plt.suptitle(space_.join(title_name))\n","  plt.show()\n","  print(\"\\n\")"]},{"cell_type":"markdown","metadata":{"id":"o-XjNS1L31YB"},"source":["##### ep_loc.point & zone legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"taB2j7kT33iN"},"outputs":[],"source":["\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 (res_df['close'] < res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(strat_version)] - 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] >= res_df['bb_lower_1m']) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['bb_lower_1m']) &\n","    #                 (res_df['close'] < res_df['bb_lower_1m'])\n","    #                 , res_df['entry_{}'.format(strat_version)] - 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   (res_df['close'] > res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(strat_version)] + 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] <= res_df['bb_upper_1m']) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['bb_upper_1m']) &\n","    #                   (res_df['close'] > res_df['bb_upper_1m'])\n","    #                 , res_df['entry_{}'.format(strat_version)] + 1, res_df['entry_{}'.format(strat_version)])\n","\n","\n","    \n","   # --------------- ema --------------- #   \n","  # res_df['ema5_1m'] = ema(res_df['close'], 5).shift(1)\n","\n","  #   # --------------- cloud bline --------------- #   \n","  # res_df['cloud_bline_1m'] = cloud_bline(res_df, 26).shift(1)\n","  \n","    #       stochastic      #\n","  # res_df['stoch'] = stoch(res_df, 5, 3, 3)\n","\n","    #       fisher      #\n","  # res_df['fisher30'] = fisher(res_df, 30)\n","  # res_df['fisher60'] = fisher(res_df, 60)\n","  # res_df['fisher120'] = fisher(res_df, 120)\n","\n","    #       cctbbo      #\n","  # res_df['cctbbo'], _ = cct_bbo(res_df, 21, 13)\n","\n","    #       ema_roc      #\n","  # res_df['ema_roc'] = ema_roc(res_df['close'], 13, 9)\n","\n","\n","   # ------------------------------ htf data ------------------------------ #    \n","\n","  #             Todo              #\n","  # htf_df = pd.read_excel(date_path2 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # htf_df = pd.read_excel(date_path3 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # htf_df = pd.read_excel(date_path4 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # htf_df = pd.read_excel(date_path5 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # # # # htf_df = pd.read_excel(date_path6 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","\n","  # # ---- htf index slicing ---- #\n","  # htf_df = htf_df.loc[:res_df.index[-1]]\n","  \n","  # print(\"res_df.index[-1] :\", res_df.index[-1])\n","  # print(\"htf_df.index[-1] :\", htf_df.index[-1])\n","\n","  # res_df = dc_line(res_df, htf_df, '5m')\n","  # res_df = dc_level(res_df, '5m', 1)\n","\n","\n","  # # # if \"sma4\" in res_df.columns:\n","  # # #   res_df.drop(\"sma4\", axis=1, inplace=1)\n","\n","  # # htf_df['sma'] = htf_df['close'].rolling(60).mean()\n","  # # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, htf_df, [-1]), columns=['sma_30m']))\n","  \n","  # htf_df['stoch'] = stoch(htf_df, 13, 3, 3)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, htf_df, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","   \n","  # fifth_df['ema'] = ema(fifth_df['close'], 5)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, fifth_df, [-1]), columns=['ema5']))\n","\n","        # ------------------------------------ short ------------------------------------ # \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 0:\n","        #   mr_score += 1          \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_upper_1m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_upper_3m'].iloc[i] <= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_upper_5m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == 'MARKET':\n","        #   mr_const_cnt += 1\n","        #   if (res_df['close'].iloc[i] - res_df['short_tp'].iloc[i]) / (res_df['short_out'].iloc[i] - res_df['close'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error):  \n","        #     mr_score += 1\n","\n","           \n","        # ------- entry once ------- #   \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == 1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == -1:\n","        #     prev_entry_cnt += 1          \n","        # # # print(\"prev_entry_cnt :\", prev_entry_cnt)\n","\n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] < res_df['bb_lower_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_lower2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_base_1h'].iloc[i]:\n","\n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] < res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","  \n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['low'].iloc[i] > res_df['short_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1\n","\n","\n","\n","        # ------------------------------------ long ------------------------------------ # \n","          \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 1:\n","        #   mr_score += 1   \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 1:\n","        #   mr_score += 1     \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 1:\n","          # mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_lower_1m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_lower_3m'].iloc[i] >= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_lower_5m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == \"MARKET\":\n","          # mr_const_cnt += 1        \n","          # if (res_df['long_tp'].iloc[i] - res_df['close'].iloc[i]) / (res_df['close'].iloc[i] - res_df['long_out'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error): # 일반적으로 dr 상에서 tp 비율이 더 커짐 (tr 보다)\n","          #   mr_score += 1\n","\n","        # -------------- ep limit -------------- #    \n","        # mr_const_cnt += 1\n","        # # if (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # if config.ep_set.min_eplim_pct < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # # if 0 < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        #   # if res_df['st_gap_15m'].iloc[i] / res_df['open'].iloc[i] < 0:\n","        #   #   print(\"i, res_df['st_gap_15m'].iloc[i] :\", i, res_df['st_gap_15m'].iloc[i])\n","        #   mr_score += 1\n","\n","\n","        # -------------- entry once -------------- #    \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == -1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == 1:\n","        #     prev_entry_cnt += 1\n","          \n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","          \n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] > res_df['bb_upper_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_upper2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_base_1h'].iloc[i]:\n","        \n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] > res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","\n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['high'].iloc[i] < res_df['long_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","          \n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1"]},{"cell_type":"markdown","metadata":{"id":"-IbP_Z3Dlwk4"},"source":["### nontp survey"]},{"cell_type":"markdown","metadata":{"id":"FxJ1y8v2fkCR"},"source":["##### term & liqd"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":614},"executionInfo":{"elapsed":8,"status":"ok","timestamp":1628300788555,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"-qIWa48pl1GO","outputId":"b2687c93-e070-4d45-8a67-4cc783fd78f1"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 360x720 with 2 Axes>"]},"metadata":{"tags":[]},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]}],"source":["# print(nontp_long_indexs)\n","\n","plot_size = 100\n","\n","for s_i in range(plot_size, len(trade_list), plot_size):\n","\n","  slice_trade_list = trade_list[s_i - plot_size:s_i]\n","  slice_liqd_list = liqd_list[s_i - plot_size:s_i]\n","\n","  # print(len(slice_trade_list))\n","  np_trade = np.array(slice_trade_list)\n","  trade_term = np_trade[:, [2]] - np_trade[:, [1]]\n","\n","  plt.figure(figsize=(5, 10))\n","  plt.subplot(211)\n","  plt.bar(np.arange(len(trade_term)), trade_term.reshape(-1,), width=1, color='b')\n","\n","  # plt.plot(trade_term.reshape(-1,))\n","  plt.ylim(0, 1000)\n","  # plt.show()\n","  # print()\n","\n","  plt.subplot(212)\n","  # print(len(liqd_list))\n","  # plt.bar(np.arange(len(liqd_list)), liqd_list)\n","  plt.bar(np.arange(len(slice_liqd_list)), np.array(slice_liqd_list), width=1, color='r')\n","  # plt.plot(slice_liqd_list)\n","  plt.show()\n","\n","print()"]},{"cell_type":"markdown","metadata":{"id":"VBwVaUkvfnOd"},"source":["##### check nontp index"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":454,"status":"ok","timestamp":1628220543161,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"mRCMBOU4frNY","outputId":"ce4a9c9b-3589-40b3-8a19-4be03d5b9a1e"},"outputs":[{"name":"stdout","output_type":"stream","text":["32747\n"]}],"source":["# np_nontp_short_indexs = np.array(nontp_short_indexs)\n","# np_nontp_long_indexs = np.array(nontp_long_indexs)\n","\n","# short_til_term = len(res_df) - np_nontp_short_indexs\n","# long_til_term = len(res_df) - np_nontp_long_indexs\n","\n","max_nontp_short_term = len(res_df) - nontp_short_indexs[0]\n","max_nontp_long_term = len(res_df) - nontp_long_indexs[0]\n","\n","print(max_nontp_long_term)"]},{"cell_type":"markdown","metadata":{"id":"tApzvz_gK9lR"},"source":["## basic strategy"]},{"cell_type":"markdown","metadata":{"id":"FaRGwR4NEop2"},"source":["### shifting"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"a8aYsjEgQnGF"},"outputs":[],"source":["org_res_df = res_df.copy()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":291,"status":"ok","timestamp":1626515312874,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"RF3RM2G2RCb1","outputId":"ba8f6a75-d4df-4f85-cd0f-190935341f7a"},"outputs":[{"name":"stdout","output_type":"stream","text":["                            open     high  ...  min_upper  max_lower\n","2021-06-30 23:55:59.999  0.27223  0.27281  ...   0.272145    0.27005\n","2021-06-30 23:56:59.999  0.27274  0.27290  ...   0.272145    0.27005\n","2021-06-30 23:57:59.999  0.27246  0.27257  ...   0.272523    0.27021\n","2021-06-30 23:58:59.999  0.27166  0.27183  ...   0.272523    0.27021\n","2021-06-30 23:59:59.999  0.27144  0.27211  ...   0.272523    0.27021\n","\n","[5 rows x 37 columns]\n","                            open     high  ...  min_upper  max_lower\n","2021-06-30 23:55:59.999  0.27223  0.27281  ...   0.272523    0.27021\n","2021-06-30 23:56:59.999  0.27274  0.27290  ...        NaN        NaN\n","2021-06-30 23:57:59.999  0.27246  0.27257  ...        NaN        NaN\n","2021-06-30 23:58:59.999  0.27166  0.27183  ...        NaN        NaN\n","2021-06-30 23:59:59.999  0.27144  0.27211  ...        NaN        NaN\n","\n","[5 rows x 37 columns]\n"]}],"source":["#         refresh res_df      #\n","res_df = org_res_df.copy()\n","print(org_res_df.tail(5))\n","\n","# break\n","\n","\n","shift_size = -4\n","# shift_size = -1\n","# shift_size = -7\n","# shift_size = +3\n","\n","res_df['min_upper'] = res_df['min_upper'].shift(shift_size)\n","res_df['max_lower'] = res_df['max_lower'].shift(shift_size)\n","res_df['minor_ST1_Trend'] = res_df['minor_ST1_Trend'].shift(shift_size)\n","res_df['minor_ST2_Trend'] = res_df['minor_ST2_Trend'].shift(shift_size)\n","res_df['minor_ST3_Trend'] = res_df['minor_ST3_Trend'].shift(shift_size)\n","res_df['middle_line'] = res_df['middle_line'].shift(shift_size)\n","\n","print(res_df.tail(5))"]},{"cell_type":"markdown","metadata":{"id":"2gxvme1PC6ha"},"source":["### load model"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5831,"status":"ok","timestamp":1628862368878,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"dtYdAuSsC72_","outputId":"e8dccc53-aaa7-4bab-ed8d-753f634c08d6"},"outputs":[{"name":"stdout","output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/resnet/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5\n","94773248/94765736 [==============================] - 1s 0us/step\n"]}],"source":["# model_name = 'inner_tick_cnnreg_lscalemm_prefee_gpu_%s_%s_%s_%s_%s.h5'\n","\n","# model = tf.keras.models.load_model(ckpt_path + model_name)\n","\n","from tensorflow.keras.applications.resnet50 import ResNet50\n","\n","model = ResNet50(weights='imagenet', include_top=False)\n","# model.summary()\n"]},{"cell_type":"markdown","metadata":{"id":"5la6usMOFzkX"},"source":["#### gen selected vector"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oQk3-jbKF8FB"},"outputs":[],"source":["def min_max_scale(npy_x):\n","\n","  return (npy_x - np.min(npy_x)) / (np.max(npy_x) - np.min(npy_x))\n","\n","def expand_dims(npy_x):\n","\n","  row, col = npy_x.shape\n","  npy_x2 = np.array(npy_x).reshape(-1, row, col, 1).astype(np.float32)\n","  # input_x = np.array(data_x).reshape(-1, row, col).astype(np.float32)\n","\n","  #     1c to 3c    #\n","  npy_x3 = npy_x2 * np.ones(3, dtype=np.float32)[None, None, None, :]\n","\n","  return npy_x3\n","\n","\n","def vector_dist(f1, f2):\n","  return np.linalg.norm(f1-f2)\n","\n","\n","\n","# ------------------------ params ------------------------  #\n","selected_i = 500\n","input_size = 100\n","\n","\n","\n","#   1. 선택된 인덱스를 입력받았을 때, input generating 형태만 만들어놓고,     #\n","#   1-1. input cols 필요함    #\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower']\n","# senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","# senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","\n","sma_list = ['sma']\n","\n","#     -------------- outer price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","cctbbo_list = ['cctbbo']\n","\n","selected_price_colname = basic_list + senkoua_list + senkoub_list + sar_list\n","selected_outprice_colname = [macd_list]\n","\n","\n","#         global scaling for outer price data       #\n","#         1. nan 처리       #\n","\n","# # print((np.isnan(df.values)))\n","# print(\"np.sum(np.isnan(df.values), axis=0) :\", np.sum(np.isnan(df.values), axis=0))\n","\n","# max_nan = np.max(np.sum(np.isnan(df.values), axis=0))\n","# # print(max_nan)\n","\n","# df = df.iloc[max_nan:-max_nan]\n","\n","# total_gdata = []\n","# for g_col in selected_outprice_colname:\n","\n","#   temp_data = min_max_scale(res_df[g_col])\n","#   total_gdata.append(temp_data)\n","\n","\n","\n","#   1-2. cols 에 따른, scaling method 구분함    #\n","onprice_input_x = min_max_scale(res_df[selected_price_colname].iloc[selected_i - input_size:selected_i].values)\n","print(onprice_input_x.shape)\n","\n","\n","#   2. plot_check 에서 본인이 원하는 shape 의 인덱스를 선택   #\n","#   3. vertorize, \n","#   3-1. input generator 를 이용해 entry signal 발생할 때마다 dist 비교 진행    #\n","re_onprice_input_x = expand_dims(onprice_input_x)\n","print(re_onprice_input_x.shape)\n","      \n","# break\n","\n","selected_vector = model.predict(re_onprice_input_x, verbose=1)\n","print(selected_vector.shape)"]},{"cell_type":"markdown","metadata":{"id":"OJqkmkpsLCYC"},"source":["### tr_tresh calc"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gcpo4MGd9Wm4"},"outputs":[],"source":["res_wr = 0.6\n","# tr_thresh = 1\n","# tr_thresh = ((1 - res_wr) / res_wr) ** 0.5\n","tr_thresh = ((1 - res_wr) / res_wr) + 0.01\n","# tr_thresh = 2.6\n","print(\"res_wr :\", res_wr)\n","print(\"tr_thresh :\", tr_thresh)\n","\n","\n","#   단리    #\n","trade_num = 1000\n","asset = 1 # thousand USDT\n","test_loss_gap = 0.95  # fee adjusted\n","test_pr_gap = 1 + (1 - test_loss_gap) * tr_thresh\n","\n","test_loss_cnt = trade_num * (1 - res_wr)\n","test_pr_cnt = trade_num * res_wr\n","\n","test_trade_list = [test_pr_gap] * int(test_pr_cnt) + [test_loss_gap] * int(test_loss_cnt)\n","random.shuffle(test_trade_list)\n","# print(\"len(test_trade_list) :\", len(test_trade_list))\n","print(test_trade_list[:10])\n","print()\n","\n","# print(\"%.5f\" % np.cumprod(test_trade_list)[-1])\n","for tr_thresh_ in np.arange(1, 3, 0.2):\n","  if (1 + (1 - test_loss_gap) * tr_thresh_) ** test_pr_cnt * test_loss_gap ** test_loss_cnt > 1:\n","    break\n","print(\"복리를 위한 tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumprod(test_trade_list)[-1] :\", np.cumprod(test_trade_list)[-1])\n","print(\"total_pr : \", np.cumprod(test_trade_list)[-1])\n","print()\n","#   복리 tr_thresh  #\n","#   1. trade_num 에 영향 받지 않음\n","#   2. loss_gap 에 비례함\n","\n","for tr_thresh_ in np.arange(1, 3, 0.01):\n","  if ((1 - test_loss_gap) * tr_thresh_) * test_pr_cnt + (test_loss_gap - 1) * test_loss_cnt > 0:\n","    break\n","np_test_trade = np.array(test_trade_list) - 1\n","print(np_test_trade[:10])\n","# print(\"%.3f\" % )\n","print(\"단리를 위한 tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumsum(np_test_trade)[-1] :\", np.cumsum(np_test_trade)[-1])\n","print(\"total_pr : \", 1 + np.cumsum(np_test_trade)[-1])\n"]},{"cell_type":"markdown","metadata":{"id":"JNQxkb06ZdTe"},"source":["# traded section plot"]},{"cell_type":"markdown","metadata":{"id":"UmH_Pb5BZUtm"},"source":["## plot with off-color st with dash"]},{"cell_type":"markdown","metadata":{"id":"5z4L3MMYmUI0"},"source":["### sorted plot_check"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":432},"executionInfo":{"elapsed":6740,"status":"error","timestamp":1645338181195,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"Qv1MM2MemZnF","outputId":"7ea6772a-6ae7-4e6a-ab73-ea657decf33e"},"outputs":[{"output_type":"stream","name":"stdout","text":["open_side_ : 2.0\n","np_timeidx[open_idx] : 56\n","open_idx, ep_idx_list_[0], tp_idx_list_[-1] : 164516 164520 164712\n"]},{"output_type":"error","ename":"KeyError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-32-78a774d6723c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    221\u001b[0m   \u001b[0;31m# break\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    222\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 223\u001b[0;31m   \u001b[0mplot_df\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mres_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mopen_idx\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mprev_plotsize\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mtp_idx_list_\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mpost_plotsize\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0minput_colname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    224\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    225\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3462\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_iterator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3463\u001b[0m                 \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3464\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_listlike_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3465\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3466\u001b[0m         \u001b[0;31m# take() does not accept boolean indexers\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_get_listlike_indexer\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1312\u001b[0m             \u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnew_indexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reindex_non_unique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1313\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1314\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_read_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1315\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1316\u001b[0m         if needs_i8_conversion(ax.dtype) or isinstance(\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_validate_read_indexer\u001b[0;34m(self, key, indexer, axis)\u001b[0m\n\u001b[1;32m   1375\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1376\u001b[0m             \u001b[0mnot_found\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mensure_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mmissing_mask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnonzero\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1377\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"{not_found} not in index\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1378\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1379\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: \"['dc_upper_v2_v5_2', 'dc_lower_v2_v5_2'] not in index\""]}],"source":["assert len(open_list) == len(trade_list), \"len(open_list) != len(trade_list)\"\n","assert len(tp_state_list) == len(fee_list), \"len(tp_state_list) != len(fee_list)\"\n","\n","if multi_mode:\n","  strat_version = \"v3\"\n","\n","save_plot = 0\n","tf_plot = 1\n","pr_sort = 1     # 이상한 체결 확인하기 좋음\n","pr_descend = 1  # 1 -> 내림차순\n","# wl_case = 1     # 1 / -1 / 0 (win loss study)\n","position = 1    # -1 / 1 / 0 (short / long / both)\n","\n","x_max = 500\n","x_margin = x_max / 30\n","only_loc_plot = 1 # limit plot_range til loc_set idx = replacing x_max value\n","\n","inversion = 0\n","hedge = 0\n","\n","\n","if save_plot:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".ftr\", \"\")\n","  try:\n","    os.mkdir(plot_check_dir)\n","  except:\n","\n","    #     remove existing dir   #\n","    shutil.rmtree(plot_check_dir)\n","    print(plot_check_dir, 'removed !')\n","    os.mkdir(plot_check_dir)\n","    # pass\n","    \n","\n","prev_plotsize = 130\n","post_plotsize = 120\n","\n","\n","if position == -1:\n","  position = config.ep_set.short_entry_score\n","elif position == 1:\n","  position = -config.ep_set.short_entry_score\n","\n","\n","if inversion:  \n","\n","    plot_pr_list = rev_np_pr\n","    h_plot_pr_list = h_rev_np_pr  # hedge\n","\n","else:\n","\n","    plot_pr_list = np_pr\n","    try:\n","      h_plot_pr_list = h_np_pr\n","    except Exception as e:\n","      print(\"error in h_plot_pr :\", e)\n","      h_plot_pr_list = np_pr\n","\n","\n","h_candle_intv1 = '15T'\n","h_candle_intv2 = 'H'\n","if 'hopen_{}'.format(h_candle_intv2) not in res_df.columns:\n","  # res_df = h_candle_v2(res_df, h_candle_intv1)\n","  res_df = h_candle_v2(res_df, h_candle_intv2)\n","\n","res_df[\"ma30_1m\"] = res_df['close'].rolling(30).mean()\n","res_df[\"ma60_1m\"] = res_df['close'].rolling(60).mean()\n","\n","res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line, np_timeidx=np_timeidx)\n","# res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=1, use_dtk_line=1)\n","# break\n","\n","rtc_list = [\"short_tp_1_{}\".format(strat_version), \"short_tp_gap_{}\".format(strat_version), \"long_tp_1_{}\".format(strat_version), \"long_tp_gap_{}\".format(strat_version)]\n","# h_rtc_list = [\"h_short_tp_1\", \"h_short_tp_gap\", \"h_long_tp_1\", \"h_long_tp_gap\"]\n","dtk_list = [\"short_dtk_1_{}\".format(strat_version), \"short_dtk_gap_{}\".format(strat_version), \"long_dtk_1_{}\".format(strat_version), \"long_dtk_gap_{}\".format(strat_version),\n","            # \"short_dtk_1_line\", \"short_dtk_gap_line\", \"long_dtk_1_line\", \"long_dtk_gap_line\",\n","            \"short_dtk_plot_1\", \"short_dtk_plot_gap\", \"long_dtk_plot_1\", \"long_dtk_plot_gap\"]\n","dc_v2_list = ['dc_upper_v2_{}'.format(strat_version), 'dc_lower_v2_{}'.format(strat_version)]\n","\n","\n","ohlc_list = ['open', 'high', 'low', 'close'] # + basic_st_list\n","hcandle_list = ['hopen_%s' % h_candle_intv1, 'hclose_%s' % h_candle_intv1, 'hopen_%s' % h_candle_intv2, 'hclose_%s' % h_candle_intv2]\n","# hcandle_list = ['hopen_%s' % h_candle_intv1, 'hclose_%s' % h_candle_intv1, 'hhigh_%s' % h_candle_intv2, 'hlow_%s' % h_candle_intv2]\n","\n","# --------------------- dc & bb level --------------------- #\n","dc_interval = '30m'\n","hdc_interval = '1h'\n","hhdc_interval = '4h'\n","\n","st_list = ['st_base_%s' % hhdc_interval, 'st_upper_%s' % hhdc_interval, 'st_lower_%s' % hhdc_interval]\n","\n","dc_list = ['dc_upper_%s' % dc_interval, 'dc_lower_%s' % dc_interval]\n","hdc_list = ['dc_upper_%s' % hdc_interval, 'dc_lower_%s' % hdc_interval]\n","hhdc_list = ['dc_upper_%s' % hhdc_interval, 'dc_lower_%s' % hhdc_interval]\n","\n","bb_interval = dc_interval\n","hbb_interval = hdc_interval\n","hhbb_interval = hhdc_interval\n","\n","bb_list = ['bb_upper_%s' % bb_interval, 'bb_lower_%s' % bb_interval]\n","hbb_list = ['bb_upper_%s' % hbb_interval, 'bb_lower_%s' % hbb_interval]\n","hhbb_list = ['bb_upper_%s' % hhbb_interval, 'bb_lower_%s' % hhbb_interval]\n","\n","bbwp_list = ['bbwp', 'bbwp_ma']\n","\n","\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1']\n","senkoub_list = ['senkou_b1']\n","\n","sar_list = ['sar_3m', 'sar_5m', 'sar_15m']\n","\n","ma_list = ['ma30_1m', 'ma60_1m']\n","sma_list = ['sma_1m']\n","\n","ema_list = ['ema_5m']\n","# cb_list = ['cloud_bline_1m']\n","cb_list = ['cloud_bline_30m']\n","# cb_list = ['cloud_bline_5m']\n","\n","\n","\n","# -------------- under price phase -------------- #\n","# macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3']\n","# trix_list = ['trix1', 'trix2', 'trix3']\n","# stoch_list = ['stoch_5m']\n","# fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","# cctbbo_list = ['cctbbo']\n","# emaroc_list = ['ema_roc']\n","rsi_list = ['rsi_%s' % config.loc_set.point.exp_itv] \n","cci_list = ['cci_%s' % config.loc_set.point.exp_itv] \n","\n","\n","# -------------- summation -------------- #\n","# input_colname = ohlc_list + basic_st_list + pline_list + bb_list + hbb_list + sma_list + cb_list + stoch_list + sar_list + dc_list\n","input_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + hhdc_list + dtk_list + dc_v2_list + rsi_list + ema_list + ma_list# + st_list# + cci_list\n","\n","# yrange_colname = ohlc_list + basic_st_list + pline_list # currently just used for ymin, ymax\n","yrange_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + hhdc_list + dc_v2_list + ema_list # currently just used for ymin, ymax\n","yrange_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + dc_v2_list + ema_list # currently just used for ymin, ymax\n","\n","\n","# aggr_obj = dict(zip(plot_pr_list, open_list, enumerate(trade_list)))\n","aggr_obj = dict(zip(plot_pr_list, zip(open_list, enumerate(trade_list))))\n","sorted_obj = sorted(aggr_obj.items(), key=(lambda x: x[0]), reverse=pr_descend)\n","\n","# print(aggr_obj)\n","# print(sorted_obj)\n","\n","if pr_sort:\n","  iter_obj = sorted_obj\n","else:\n","  iter_obj = aggr_obj.items()\n","\n","odd_cnt = 0\n","obj_i = -1\n","rev_obj_i = 0\n","len_obj = len(sorted_obj)\n","\n","#   지금, continue 발생시 true / false idx 가 같이 상승하는 문제\n","\n","# for temp_pr, (open_idx, (t_i, (ep_idx_list_, tp_idx_list_))) in iter_obj:  # 0.699700153073042, (291402, (3014, ([370012], [370014])))\n","# for obj_i, (temp_pr, (open_idx, (t_i, (ep_idx_list_, out_idx_list_, tp_idx_list_)))) in enumerate(iter_obj):  # 0.699700153073042, (291402, (3014, ([370012], [370014])))\n","# for temp_pr, (open_idx, (t_i, (ep_idx_list_, out_idx_list_, tp_idx_list_))) in iter_obj:  # 0.699700153073042, (291402, (3014, ([370012], [370014])))\n","\n","while 1:\n","\n","  if obj_i >= len_obj or rev_obj_i >= len_obj:\n","    break\n","\n","  if odd_cnt % 2 == 1 and tf_plot: #  loss plot 을 채워야하는 상황\n","    rev_obj_i += 1\n","    temp_pr, (open_idx, (t_i, (ep_idx_list_, out_idx_list_, tp_idx_list_))) = sorted_obj[-rev_obj_i]\n","    if temp_pr > 1.0:\n","      continue  \n","\n","  else:\n","    obj_i += 1\n","    temp_pr, (open_idx, (t_i, (ep_idx_list_, out_idx_list_, tp_idx_list_))) = sorted_obj[obj_i]\n","    if temp_pr < 1.0:\n","      continue  \n","\n","  if not(i >= prev_plotsize):\n","    continue\n","  \n","  #   open size indexing by open_idx    #\n","  open_side_ = res_df['entry_{}'.format(strat_version)].iloc[open_idx]\n","\n","  # ---------- const. zone ---------- #\n","\n","  if position != 0:\n","    if open_side_ != position:\n","      continue\n","\n","  if multi_mode:\n","    if not strat_version in tp_state_list[t_i]:\n","    # if tp_state_list[t_i] != 'long close tp':\n","    # if tp_state_list[t_i] != 's-long_tp':\n","      continue\n","\n","  # if open_idx == 63901:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","\n","  # if tp_ratio_list[t_i] > 0.4:\n","  #   continue\n","\n"," \n","  # print(\"open_idx :\", open_idx)\n","  print(\"open_side_ :\", open_side_)\n","  print(\"np_timeidx[open_idx] :\", np_timeidx[open_idx])\n","  print(\"open_idx, ep_idx_list_[0], tp_idx_list_[-1] :\", open_idx, ep_idx_list_[0], tp_idx_list_[-1])\n","  #   const. 에 합하는 조건 나올때까지 loop 돌리고, const. phase 통과시 odd_cnt += 1,\n","  #   => odd_cnt 로 gs_plot 을 채운다는 느낌 \n","  #   odds = 1 -> wl_case == 1 만 허용, odds = 2 -> wl_case == -1 만 허용\n","  odd_cnt += 1\n","\n","  # break\n","\n","  plot_df = res_df.iloc[open_idx - prev_plotsize:tp_idx_list_[-1] + post_plotsize][input_colname]\n","\n","\n","  #       keep off-color st with another variable         #\n","  # st_trend_plot_df = res_df[['ST1_Trend%s' % basic_st_interval, 'ST2_Trend%s' % basic_st_interval, 'ST3_Trend%s' % basic_st_interval]].iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","\n","  # fig = trendln.plot_support_resistance(plot_df['close'], accuracy=8, fromwindows=0, numbest=1,  window=30) # requires matplotlib - pip install matplotlib\n","  \n","  odds = 1 if odd_cnt % 2 == 1 else 2\n","  if odds == 1:\n","\n","    plt.style.use('dark_background')\n","\n","    fig = plt.figure(figsize=(26, 18))\n","    \n","    gs = gridspec.GridSpec(nrows=2, # row 몇 개 \n","                        ncols=2, # col 몇 개 \n","                        height_ratios=[3, 1]\n","                        )\n","    \n","  ax = fig.add_subplot(gs[odds - 1])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='#26a69a', colordown='#ef5350', alpha=0.5)\n","\n","  # ---------- h_candle ---------- #\n","  alpha = 1\n","  lw = 1\n","  for cd_i, candle in enumerate(hcandle_list):\n","\n","    if cd_i == 2:\n","      lw = 2      \n","    plt.step(np.arange(len(plot_df)), plot_df[candle].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","\n","  # alpha = 0.1\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['hclose_60'].values, plot_df['hopen_60'].values, \n","  #                     where=1, facecolor='#ffffff', alpha=alpha)  \n","  \n","\n","   # --------- ma --------- #\n","  alpha = 1\n","  lw = 2\n","  for ma_i, item in enumerate(ma_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","   # --------- ema --------- #\n","  alpha = 1\n","  lw = 4\n","  for sm_i, item in enumerate(ema_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","    \n","   # --------- st --------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(st_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#00ff00', linewidth=lw)\n","\n","  # ---------------------- dc_v2 ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(dc_v2_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","  # ---------------------- dc ---------------------- #\n","  alpha = 1\n","  lw = 2\n","  for sm_i, item in enumerate(dc_list):\n","      plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","  # ---------------------- hdc ---------------------- #\n","  alpha = 1\n","  lw = 2\n","  for sm_i, item in enumerate(hdc_list):\n","      plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#e65100', linewidth=lw)\n","\n","  # ---------------------- hhdc ---------------------- #\n","  alpha = 1\n","  lw = 4\n","  for sm_i, item in enumerate(hhdc_list):\n","      plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#c2185b', linewidth=lw)\n","\n","\n","  # ---------------------- bb ---------------------- #\n","  alpha = 1\n","  lw = 1\n","  for sm_i, item in enumerate(bb_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","\n","  alpha = 0.2\n","  plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % bb_interval].values, plot_df['bb_lower_%s' % bb_interval].values, \n","                      where=plot_df['bb_upper_%s' % bb_interval].values >= plot_df['bb_lower_%s' % bb_interval].values, facecolor='#ffffff', alpha=alpha)   \n","\n","  # ---------------------- hbb ---------------------- #\n","  alpha = 1\n","  lw = 2\n","  for sm_i, item in enumerate(hbb_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ff00ff', linewidth=lw)\n","  \n","  alpha = 0.2\n","  plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % hbb_interval].values, plot_df['bb_lower_%s' % hbb_interval].values, \n","                      where=plot_df['bb_upper_%s' % hbb_interval].values >= plot_df['bb_lower_%s' % hbb_interval].values, facecolor='#ff00ff', alpha=alpha) \n","  \n","  # ---------------------- hhbb ---------------------- #\n","\n","  alpha = 1\n","  lw = 4\n","  for sm_i, item in enumerate(hhbb_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#3179f5', linewidth=lw)\n","  \n","  alpha = 0.2\n","  plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % hhbb_interval].values, plot_df['bb_lower_%s' % hhbb_interval].values, \n","                      where=plot_df['bb_upper_%s' % hhbb_interval].values >= plot_df['bb_lower_%s' % hhbb_interval].values, facecolor='#3179f5', alpha=alpha) \n","  \n","  # ------------------- dtk_line (old, tp_line) ------------------- #\n","  \n","  # alpha = 1\n","  # lw = 2\n","  # rtc_ratio_list = [config.loc_set.zone.dt_k]\n","  \n","  # for rtc_k in rtc_ratio_list:    \n","  #   # plt.step(np.arange(len(plot_df)), plot_df['short_dtk_1_line'].values - plot_df['short_dtk_gap_line'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['long_dtk_1_line'].values + plot_df['long_dtk_gap_line'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","\n","  # hy_min = np.min(plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * rtc_k)\n","  # hy_max = np.max(plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * rtc_k)  \n","\n","  # alpha = 1\n","  # lw = 4\n","  # # h_rtc_ratio_list = [config.loc_set.zone.dt_k]\n","  # h_rtc_ratio_list = [config.loc_set.zone.zone_dt_k]\n","  # # h_rtc_ratio_list = [0.272, 0.36, 0.4, 0.5]\n","  \n","  # for h_rtc_k in h_rtc_ratio_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df['short_dtk_plot_1'].values - plot_df['short_dtk_plot_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['long_dtk_plot_1'].values + plot_df['long_dtk_plot_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['h_short_tp_1'].values - plot_df['h_short_tp_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['h_long_tp_1'].values + plot_df['h_long_tp_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","\n","  # # hy_min = np.min(plot_df['short_dtk_plot_1'].values - plot_df['short_dtk_plot_gap'].values * h_rtc_k)\n","  # # hy_max = np.max(plot_df['long_dtk_plot_1'].values + plot_df['long_dtk_plot_gap'].values * h_rtc_k)  \n","\n","  # ------------------------------------------------------------- #\n","\n","\n","  # ------------- ep ------------- #\n","  # if i != initial_i:\n","  # if len(ep_idx_list_) > 1:\n","  \n","    #        initial order         #\n","  plt.axvline(prev_plotsize, alpha=0.5, linestyle='--', color='#ffeb3b')\n","\n","  for ep_i in range(len(ep_idx_list_)):\n","    # plt.axvline(prev_plotsize + (ep_idx_list_[ep_i] - ep_idx_list_[0]), alpha=0.7, linestyle='--', color='#ffeb3b')\n","    plt.axvline(prev_plotsize + (ep_idx_list_[ep_i] - open_idx), alpha=0.7, linestyle='--', color='#ffeb3b')\n","\n","  # plt.axvline(prev_plotsize, alpha=0.5, linestyle='--')\n","\n","  # ------------- x lim ------------- #\n","  if only_loc_plot:\n","    x_max = prev_plotsize + (ep_idx_list_[0] - open_idx)\n","\n","  if len(plot_df) > x_max:\n","    plt.xlim(0 - x_margin, x_max + x_margin)\n","\n","  x0,x1 = plt.gca().get_xlim()\n","\n","  # ep_xmin = (prev_plotsize + (ep_idx_list_[ep_i] - ep_idx_list_[0])) / x1\n","  ep_xmin = (prev_plotsize + (ep_idx_list_[ep_i] - open_idx)) / x1\n","  plt.axhline(ep_tp_list[t_i][0], linestyle='--', xmin=ep_xmin, xmax=1, alpha=1, color='lime')  # ep line axhline  \n","  plt.text(x1, ep_tp_list[t_i][0][0], ' ep :\\n %s' % ep_tp_list[t_i][0][0], ha='left', va='center', fontweight='bold') # ep line label\n","\n","  \n","  # ------------- tp ------------- #\n","  for sub_i in range(len(ep_tp_list[t_i][1])):\n","\n","    # tp_xmin = (prev_plotsize + (tp_idx_list_[sub_i] - ep_idx_list_[0])) / x1\n","    tp_xmin = (prev_plotsize + (tp_idx_list_[sub_i] - open_idx)) / x1\n","    plt.axhline(ep_tp_list[t_i][1][sub_i], linestyle='--', xmin=tp_xmin , xmax=1, alpha=1, color='lime')  # tp line axhline\n","    plt.text(x1, ep_tp_list[t_i][1][sub_i], ' tp :\\n %s' % ep_tp_list[t_i][1][sub_i], ha='left', va='center', fontweight='bold') # tp line label\n","     \n","    # plt.axvline(prev_plotsize + (tp_idx_list_[sub_i] - ep_idx_list_[0]), alpha=1., linestyle='--', color='#ffeb3b', zorder=2)\n","    plt.axvline(prev_plotsize + (tp_idx_list_[sub_i] - open_idx), alpha=1., linestyle='--', color='#ffeb3b', zorder=2)\n","\n","\n","  # ------------- rtc horizontal range ------------- # --> open_idx 로 할지는 추후 수정 권고 (ep_loc.point2 에 의해 진입 기준 point 가 변경될 수 있음)\n","  # rtc_ratio_list = [0.272, 0.36, 0.4, 0.5]\n","  rtc_ratio_list = [0.]\n","  if open_side_ == config.ep_set.short_entry_score:\n","    # plt.axhline(res_df['short_rtc_1'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    # plt.axhline(res_df['short_rtc_0'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    out_line = res_df['short_out_{}'.format(strat_version)].iloc[out_idx_list_[0]]\n","    plt.axhline(out_line, linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    plt.text(x0, out_line, ' %s' % config.tr_set.out_gap, ha='left', va='center', fontweight='bold')\n","\n","    for rtc_k in rtc_ratio_list:\n","      plt.axhline(res_df['h_short_rtc_1_{}'.format(strat_version)].iloc[open_idx] - res_df['h_short_rtc_gap_{}'.format(strat_version)].iloc[open_idx] * rtc_k, linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","      plt.text(x0, res_df['h_short_rtc_1_{}'.format(strat_version)].iloc[open_idx] - res_df['h_short_rtc_gap_{}'.format(strat_version)].iloc[open_idx] * rtc_k, ' %s' % rtc_k, ha='left', va='center', fontweight='bold')\n","      \n","    y_max = out_line\n","    y_min = res_df['h_short_rtc_1_{}'.format(strat_version)].iloc[tp_idx_list_[-1]] - res_df['h_short_rtc_gap_{}'.format(strat_version)].iloc[tp_idx_list_[-1]] * rtc_k\n","\n","    print(\"short_tp :\", res_df['short_tp_{}'.format(strat_version)].iloc[tp_idx_list_[-1]])\n","    print(\"short_out :\", out_line)\n","\n","  else:\n","    # plt.axhline(res_df['long_rtc_1'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    # plt.axhline(res_df['long_rtc_0'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff') \n","    out_line = res_df['long_out_{}'.format(strat_version)].iloc[out_idx_list_[0]]\n","    plt.axhline(out_line, linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    plt.text(x0, out_line, ' %s' % config.tr_set.out_gap, ha='left', va='center', fontweight='bold')\n","\n","    for rtc_k in rtc_ratio_list:\n","      plt.axhline(res_df['h_long_rtc_1_{}'.format(strat_version)].iloc[open_idx] + res_df['h_long_rtc_gap_{}'.format(strat_version)].iloc[open_idx] * rtc_k, linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","      plt.text(x0, res_df['h_long_rtc_1_{}'.format(strat_version)].iloc[open_idx] + res_df['h_long_rtc_gap_{}'.format(strat_version)].iloc[open_idx] * rtc_k, ' %s' % rtc_k, ha='left', va='center', fontweight='bold')\n","\n","    y_max = res_df['h_long_rtc_1_{}'.format(strat_version)].iloc[tp_idx_list_[-1]] + res_df['h_long_rtc_gap_{}'.format(strat_version)].iloc[tp_idx_list_[-1]] * rtc_k\n","    y_min = out_line\n","\n","    print(\"long_tp :\", res_df['long_tp_{}'.format(strat_version)].iloc[tp_idx_list_[-1]])\n","    print(\"long_out :\", out_line)\n","  \n","    # t_tr = ((res_df['long_tp'].iloc[open_idx] - res_df['close'].iloc[open_idx] - tp_fee * res_df['close'].iloc[open_idx]) / (res_df['close'].iloc[open_idx] - res_df['long_out'].iloc[open_idx] + out_fee * res_df['close'].iloc[open_idx]))\n","    # t_dr = ((res_df['long_tp'].iloc[open_idx] - res_df['close'].iloc[open_idx]) / (res_df['close'].iloc[open_idx] - res_df['long_out'].iloc[open_idx]))     \n","    # print(\"t_tr :\", t_tr)\n","    # print(\"t_dr :\", t_dr)\n","\n","  #         hedge ep & tp         #\n","  h_i = h_trade_list[t_i][1]\n","  if h_i is not None:\n","    # plt.axvline(prev_plotsize + (h_i - ep_idx_list_[0]), linestyle='--')\n","    plt.axvline(prev_plotsize + (h_i - open_idx), linestyle='--')\n","    plt.axhline(h_ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='magenta')  # ep line axhline\n","    plt.axhline(h_ep_tp_list[t_i][1], linestyle='-', xmin=0.85, xmax=1, linewidth=3, color='magenta')  # tp line axhline\n","\n","  \n","  #         check pr        #\n","  if not config.lvrg_set.static_lvrg:\n","    \n","    #   list length 만 sync 맞으면 t_i 걱정 안해도됨, zip 해서 순서가 바뀌었을 뿐, original serialized order 에서 t_i 로 indexing 하는 것뿐임   #\n","    plt.title(\"%s ~ %s -> %.5f\\n %s\\n h_pr : %.5f\\n lvrg : %s\\ntp_ratio : %.3f\\n dr : %.3f\\n fee : %.4f\" % (ep_idx_list_[0], tp_idx_list_[-1], plot_pr_list[t_i], tp_state_list[t_i], \n","                                                                                                h_plot_pr_list[t_i], leverage_list[t_i], tp_ratio_list[t_i], dr_list[t_i], fee_list[t_i]))\n","\n","    print(\"short real pr :\", (ep_tp_list[t_i][0] / ep_tp_list[t_i][1][sub_i] - fee_list[t_i] - 1) * leverage_list[t_i] + 1)\n","    print(\"long real pr :\", (ep_tp_list[t_i][1][sub_i] / ep_tp_list[t_i][0] - fee_list[t_i] - 1) * leverage_list[t_i] + 1)    \n","\n","  else:\n","    plt.title(\"%s ~ %s -> %.5f\\n %s\\n h_pr : %.5f\\n tp_ratio : %.3f\\n dr : %.3f\\n fee : %.4f\" % (ep_idx_list_[0], tp_idx_list_[-1], plot_pr_list[t_i], tp_state_list[t_i], \n","                                                                                     h_plot_pr_list[t_i], tp_ratio_list[t_i], dr_list[t_i], fee_list[t_i]))\n","\n","    print(\"short real pr :\", (ep_tp_list[t_i][0] / ep_tp_list[t_i][1][sub_i] - fee_list[t_i] - 1) * config.lvrg_set.leverage + 1)\n","    print(\"long real pr :\", (ep_tp_list[t_i][1][sub_i] / ep_tp_list[t_i][0] - fee_list[t_i] - 1) * config.lvrg_set.leverage + 1)\n","  \n","  # ------------- y lim ------------- #  \n","  y_max_ = max(np.max(plot_df[yrange_colname]))\n","  y_min_ = min(np.min(plot_df[yrange_colname]))\n","  y_max = max(y_max, y_max_)\n","  y_min = min(y_min, y_min_)\n","  y_range = y_max - y_min\n","  y_margin = y_range / 20\n","  \n","  # hy_min = np.min(plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * 0.36)\n","  # hy_max = np.max(plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * 0.36)  \n","  # y_max = max(y_max, y_max_, hy_max)\n","  # y_min = min(y_min, y_min_, hy_min)\n","\n","  if np.isnan(y_max) or np.isnan(y_min):\n","    print('continued in yminmax')\n","    continue\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","\n","  plt.ylim(y_min - y_margin, y_max + y_margin)\n","\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  #           rsi          #    \n","  plt.subplot(gs[odds + 1])\n","  alpha = 1\n","  for rsi_ in rsi_list:\n","    plt.step(np.arange(len(plot_df)), plot_df[rsi_].values, 'g', alpha=alpha)\n","    # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","    alpha -= 0.2\n","  plt.axhline(50, linestyle='--')\n","  plt.axhline(50 + config.loc_set.point.osc_band, linestyle='--')\n","  plt.axhline(50 - config.loc_set.point.osc_band, linestyle='--')\n","  \n","  plt.axvline(prev_plotsize, linestyle='--')\n","  \n","  #           cci          #    \n","  # plt.subplot(gs[odds + 1])\n","  # alpha = 1\n","  # for cci_ in cci_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cci_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axhline(config.loc_set.point.osc_band, linestyle='--')\n","  # plt.axhline(-config.loc_set.point.osc_band, linestyle='--')\n","  \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","\n","\n","  #     vline open     #\n","  for ep_i in range(len(ep_idx_list_)):\n","    plt.axvline(prev_plotsize + (ep_idx_list_[ep_i] - open_idx), alpha=0.7, linestyle='--', color='#ffeb3b')\n","  \n","  #     vline close     #\n","  for sub_i in range(len(ep_tp_list[t_i][1])):\n","    plt.axvline(prev_plotsize + (tp_idx_list_[sub_i] - open_idx), alpha=1., linestyle='--', color='#ffeb3b', zorder=2)\n","\n","  if len(plot_df) > x_max:\n","    plt.xlim(0 - x_margin, x_max + x_margin)\n","\n","\n","  if not save_plot:\n","    if odds == 2:\n","      plt.show()\n","      plt.close()\n","  \n","  else:\n","    # ---------- save mode ---------- #\n","    fig_name = plot_check_dir +  \"/%s.png\" % t_i\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","\n","  # plt.close()  \n","  print()\n","\n","  # break\n"]},{"cell_type":"markdown","source":["### sync_check"],"metadata":{"id":"X0FsT-8FZRti"}},{"cell_type":"code","source":["if multi_mode:\n","  strat_version = \"v3\"\n","\n","save_plot = 0\n","\n","open_idx_range = reversed(range(0, len(res_df), 1000))\n","plot_range = 100\n","\n","x_max = 400\n","\n","inversion = 0\n","hedge = 0\n","\n","\n","if save_plot:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".ftr\", \"\")\n","  try:\n","    os.mkdir(plot_check_dir)\n","  except:\n","\n","    #     remove existing dir   #\n","    shutil.rmtree(plot_check_dir)\n","    print(plot_check_dir, 'removed !')\n","    os.mkdir(plot_check_dir)\n","    # pass\n","    \n","\n","prev_plotsize = 30\n","post_plotsize = 20\n","\n","\n","\n","h_candle_intv1 = 15\n","h_candle_intv2 = 60\n","if 'hopen_{}'.format(h_candle_intv2) not in res_df.columns:\n","  res_df = h_candle(res_df, h_candle_intv1)\n","  res_df = h_candle(res_df, h_candle_intv2)\n","\n","res_df[\"ma30_1m\"] = res_df['close'].rolling(30).mean()\n","res_df[\"ma60_1m\"] = res_df['close'].rolling(60).mean()\n","\n","res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line)\n","# res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=1, use_dtk_line=1)\n","# break\n","\n","rtc_list = [\"short_tp_1_{}\".format(strat_version), \"short_tp_gap_{}\".format(strat_version), \"long_tp_1_{}\".format(strat_version), \"long_tp_gap_{}\".format(strat_version)]\n","# h_rtc_list = [\"h_short_tp_1\", \"h_short_tp_gap\", \"h_long_tp_1\", \"h_long_tp_gap\"]\n","dtk_list = [\"short_dtk_1_{}\".format(strat_version), \"short_dtk_gap_{}\".format(strat_version), \"long_dtk_1_{}\".format(strat_version), \"long_dtk_gap_{}\".format(strat_version),\n","            # \"short_dtk_1_line\", \"short_dtk_gap_line\", \"long_dtk_1_line\", \"long_dtk_gap_line\",\n","            \"short_dtk_plot_1\", \"short_dtk_plot_gap\", \"long_dtk_plot_1\", \"long_dtk_plot_gap\"]\n","dc_v2_list = ['dc_upper_v2_{}'.format(strat_version), 'dc_lower_v2_{}'.format(strat_version)]\n","\n","\n","ohlc_list = ['open', 'high', 'low', 'close'] # + basic_st_list\n","hcandle_list = ['hopen_%s' % h_candle_intv1, 'hclose_%s' % h_candle_intv1, 'hopen_%s' % h_candle_intv2, 'hclose_%s' % h_candle_intv2]\n","# hcandle_list = ['hopen_%s' % h_candle_intv1, 'hclose_%s' % h_candle_intv1, 'hhigh_%s' % h_candle_intv2, 'hlow_%s' % h_candle_intv2]\n","\n","# --------------------- dc & bb level --------------------- #\n","dc_interval = '1m'\n","hdc_interval = '5m'\n","hhdc_interval = '15m'\n","\n","st_list = ['st_base_%s' % hhdc_interval, 'st_upper_%s' % hhdc_interval, 'st_lower_%s' % hhdc_interval]\n","\n","dc_list = ['dc_upper_%s' % dc_interval, 'dc_lower_%s' % dc_interval]\n","hdc_list = ['dc_upper_%s' % hdc_interval, 'dc_lower_%s' % hdc_interval]\n","hhdc_list = ['dc_upper_%s' % hhdc_interval, 'dc_lower_%s' % hhdc_interval]\n","\n","bb_interval = dc_interval\n","hbb_interval = hdc_interval\n","hhbb_interval = hhdc_interval\n","\n","bb_list = ['bb_upper_%s' % bb_interval, 'bb_lower_%s' % bb_interval]\n","hbb_list = ['bb_upper_%s' % hbb_interval, 'bb_lower_%s' % hbb_interval]\n","hhbb_list = ['bb_upper_%s' % hhbb_interval, 'bb_lower_%s' % hhbb_interval]\n","\n","bbwp_list = ['bbwp', 'bbwp_ma']\n","\n","\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1']\n","senkoub_list = ['senkou_b1']\n","\n","sar_list = ['sar_3m', 'sar_5m', 'sar_15m']\n","\n","ma_list = ['ma30_1m', 'ma60_1m']\n","sma_list = ['sma_1m']\n","\n","ema_list = ['ema_5m']\n","# cb_list = ['cloud_bline_1m']\n","cb_list = ['cloud_bline_30m']\n","# cb_list = ['cloud_bline_5m']\n","\n","\n","\n","# -------------- under price phase -------------- #\n","# macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3']\n","# trix_list = ['trix1', 'trix2', 'trix3']\n","# stoch_list = ['stoch_5m']\n","# fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","# cctbbo_list = ['cctbbo']\n","# emaroc_list = ['ema_roc']\n","rsi_list = ['rsi_%s' % config.loc_set.point.exp_itv] \n","cci_list = ['cci_%s' % config.loc_set.point.exp_itv] \n","\n","\n","# -------------- summation -------------- #\n","# input_colname = ohlc_list + basic_st_list + pline_list + bb_list + hbb_list + sma_list + cb_list + stoch_list + sar_list + dc_list\n","input_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + hhdc_list + dtk_list + dc_v2_list + rsi_list + ema_list + ma_list + st_list# + cci_list\n","\n","# yrange_colname = ohlc_list + basic_st_list + pline_list # currently just used for ymin, ymax\n","yrange_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + hhdc_list + dc_v2_list + ema_list # currently just used for ymin, ymax\n","yrange_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + dc_v2_list + ema_list # currently just used for ymin, ymax\n","\n","\n","\n","odd_cnt = 0\n","obj_i = -1\n","rev_obj_i = 0\n","\n","#   지금, continue 발생시 true / false idx 가 같이 상승하는 문제\n","\n","# while 1:\n","for open_idx in open_idx_range:\n","\n","  # if obj_i >= len_obj or rev_obj_i >= len_obj:\n","  #   break\n","\n","  # if odd_cnt % 2 == 1 and tf_plot: #  loss plot 을 채워야하는 상황\n","  #   rev_obj_i += 1\n","\n","  # else:\n","  #   obj_i += 1\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","  \n","\n","  odd_cnt += 1\n","\n","  # break\n","\n","  print(\"open_idx :\", open_idx)\n","  \n","  plot_df = res_df.iloc[open_idx - prev_plotsize:open_idx + plot_range + post_plotsize][input_colname]\n","  \n","  odds = 1 if odd_cnt % 2 == 1 else 2\n","  if odds == 1:\n","\n","    plt.style.use('dark_background')\n","\n","    fig = plt.figure(figsize=(26, 18))\n","    \n","    gs = gridspec.GridSpec(nrows=2, # row 몇 개 \n","                        ncols=2, # col 몇 개 \n","                        height_ratios=[3, 1]\n","                        )\n","    \n","  ax = fig.add_subplot(gs[odds - 1])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='#26a69a', colordown='#ef5350', alpha=0.5)\n","\n","  # ---------- h_candle ---------- #\n","  alpha = 1\n","  lw = 1\n","  for cd_i, candle in enumerate(hcandle_list):\n","\n","    if cd_i == 2:\n","      lw = 2      \n","    plt.step(np.arange(len(plot_df)), plot_df[candle].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","\n","  # alpha = 0.1\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['hclose_60'].values, plot_df['hopen_60'].values, \n","  #                     where=1, facecolor='#ffffff', alpha=alpha)  \n","  \n","\n","   # --------- ma --------- #\n","  alpha = 1\n","  lw = 2\n","  for ma_i, item in enumerate(ma_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","   # --------- ema --------- #\n","  alpha = 1\n","  lw = 4\n","  for sm_i, item in enumerate(ema_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","    \n","   # --------- st --------- #\n","  alpha = 1\n","  lw = 2\n","  for sm_i, item in enumerate(st_list):\n","      plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#00ff00', linewidth=lw)\n","\n","  # ---------------------- dc_v2 ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(dc_v2_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","  # # ---------------------- dc ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(dc_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","  # # ---------------------- hdc ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(hdc_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#e65100', linewidth=lw)\n","\n","  # # ---------------------- hhdc ---------------------- #\n","  # alpha = 1\n","  # lw = 4\n","  # for sm_i, item in enumerate(hhdc_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#c2185b', linewidth=lw)\n","\n","\n","  # # ---------------------- bb ---------------------- #\n","  # alpha = 1\n","  # lw = 1\n","  # for sm_i, item in enumerate(bb_list):\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","\n","  # alpha = 0.2\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % bb_interval].values, plot_df['bb_lower_%s' % bb_interval].values, \n","  #                     where=plot_df['bb_upper_%s' % bb_interval].values >= plot_df['bb_lower_%s' % bb_interval].values, facecolor='#ffffff', alpha=alpha)   \n","\n","  # # ---------------------- hbb ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(hbb_list):\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ff00ff', linewidth=lw)\n","  \n","  # alpha = 0.2\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % hbb_interval].values, plot_df['bb_lower_%s' % hbb_interval].values, \n","  #                     where=plot_df['bb_upper_%s' % hbb_interval].values >= plot_df['bb_lower_%s' % hbb_interval].values, facecolor='#ff00ff', alpha=alpha) \n","  \n","  # # ---------------------- hhbb ---------------------- #\n","\n","  # alpha = 1\n","  # lw = 4\n","  # for sm_i, item in enumerate(hhbb_list):\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#3179f5', linewidth=lw)\n","  \n","  # alpha = 0.2\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % hhbb_interval].values, plot_df['bb_lower_%s' % hhbb_interval].values, \n","  #                     where=plot_df['bb_upper_%s' % hhbb_interval].values >= plot_df['bb_lower_%s' % hhbb_interval].values, facecolor='#3179f5', alpha=alpha) \n","  \n","  # ------------------- dtk_line (old, tp_line) ------------------- #\n","  \n","  # alpha = 1\n","  # lw = 2\n","  # rtc_ratio_list = [config.loc_set.zone.dt_k]\n","  \n","  # for rtc_k in rtc_ratio_list:    \n","  #   # plt.step(np.arange(len(plot_df)), plot_df['short_dtk_1_line'].values - plot_df['short_dtk_gap_line'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['long_dtk_1_line'].values + plot_df['long_dtk_gap_line'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","\n","  # hy_min = np.min(plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * rtc_k)\n","  # hy_max = np.max(plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * rtc_k)  \n","\n","  # alpha = 1\n","  # lw = 4\n","  # # h_rtc_ratio_list = [config.loc_set.zone.dt_k]\n","  # h_rtc_ratio_list = [config.loc_set.zone.zone_dt_k]\n","  # # h_rtc_ratio_list = [0.272, 0.36, 0.4, 0.5]\n","  \n","  # for h_rtc_k in h_rtc_ratio_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df['short_dtk_plot_1'].values - plot_df['short_dtk_plot_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['long_dtk_plot_1'].values + plot_df['long_dtk_plot_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['h_short_tp_1'].values - plot_df['h_short_tp_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['h_long_tp_1'].values + plot_df['h_long_tp_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","\n","  # # hy_min = np.min(plot_df['short_dtk_plot_1'].values - plot_df['short_dtk_plot_gap'].values * h_rtc_k)\n","  # # hy_max = np.max(plot_df['long_dtk_plot_1'].values + plot_df['long_dtk_plot_gap'].values * h_rtc_k)  \n","\n","  # ------------- y lim ------------- #  \n","  y_max = max(np.max(plot_df[yrange_colname]))\n","  y_min = min(np.min(plot_df[yrange_colname]))\n","  # y_max = max(y_max, y_max_)\n","  # y_min = min(y_min, y_min_)\n","  \n","  # hy_min = np.min(plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * 0.36)\n","  # hy_max = np.max(plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * 0.36)  \n","  # y_max = max(y_max, y_max_, hy_max)\n","  # y_min = min(y_min, y_min_, hy_min)\n","\n","  if np.isnan(y_max) or np.isnan(y_min):\n","    print('continued in yminmax')\n","    continue\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","\n","  plt.ylim(y_min, y_max)\n","\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  #           rsi          #    \n","  plt.subplot(gs[odds + 1])\n","  alpha = 1\n","  for rsi_ in rsi_list:\n","    plt.step(np.arange(len(plot_df)), plot_df[rsi_].values, 'g', alpha=alpha)\n","    # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","    alpha -= 0.2\n","  plt.axhline(50, linestyle='--')\n","  plt.axhline(50 + config.loc_set.point.osc_band, linestyle='--')\n","  plt.axhline(50 - config.loc_set.point.osc_band, linestyle='--')\n","  \n","  plt.axvline(prev_plotsize, linestyle='--')\n","  \n","  #           cci          #    \n","  # plt.subplot(gs[odds + 1])\n","  # alpha = 1\n","  # for cci_ in cci_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cci_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axhline(config.loc_set.point.osc_band, linestyle='--')\n","  # plt.axhline(-config.loc_set.point.osc_band, linestyle='--')\n","  \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","\n","\n","  if len(plot_df) > x_max:\n","    x_margin = x_max / 20\n","    plt.xlim(0 - x_margin, x_max + x_margin)\n","\n","\n","  if not save_plot:\n","    if odds == 2:\n","      plt.show()\n","      plt.close()\n","  \n","  else:\n","    # ---------- save mode ---------- #\n","    fig_name = plot_check_dir +  \"/%s.png\" % t_i\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","\n","  # plt.close()  \n","  print()\n","\n","  # break\n"],"metadata":{"id":"inQ6f-CDZYkr"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"13a-U32Uy50I"},"source":["### brief np_pr survey"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"L9LdjV2uUWnp"},"outputs":[],"source":["# plot_pr_list[:100]\n","\n","plt.plot(np_pr)\n","plt.axhline(1)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"TBE0l6dHRYrE"},"source":["### whole pr & chart sync"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":877},"executionInfo":{"elapsed":1436,"status":"ok","timestamp":1636355589887,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"-txULkhXRbz5","outputId":"7cda9fc7-4a4e-4c52-ffa3-a974b5f7c66f"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 3 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 3 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]}],"source":["#     chunky survey 필요함    #\n","chunk_size = 50000\n","\n","sync_pr = np.ones(len(res_df))\n","sync_tr = np.zeros(len(res_df))\n","# sync_tr = np.empty(len(res_df))\n","# sync_tr[:] = np.nan\n","\n","max_tr = np.max(tp_ratio_list)\n","min_tr = np.min(tp_ratio_list)\n","\n","for ck_i in range(0, len(res_df), chunk_size):\n","\n","  chunked_df = res_df.iloc[ck_i:ck_i + chunk_size]\n","  # break\n","\n","  for pr_, eptp_idx, tr_ in zip(pr_list[ck_i:ck_i + chunk_size], trade_list[ck_i:ck_i + chunk_size], tp_ratio_list[ck_i:ck_i + chunk_size]):\n","    # print(pr_, eptp_idx)\n","    sync_pr[eptp_idx[-1][0]] = pr_\n","    sync_tr[eptp_idx[-1][0]] = tr_\n","    # break\n","\n","  chunked_pr = sync_pr[ck_i:ck_i + chunk_size]\n","  chunked_tr = sync_tr[ck_i:ck_i + chunk_size]\n","  chunked_tr = np.where(np.isnan(chunked_tr), pd.Series(chunked_tr).shift(1), chunked_tr)\n","\n","  # plt.figure(figsize=(8, 6))\n","\n","  plt.subplot(311)\n","  plt.plot(np.arange(len(chunked_df)), chunked_df['close'])\n","  # plt.show()\n","\n","  plt.subplot(312)\n","  plt.plot(np.cumprod(chunked_pr))\n","  \n","  plt.subplot(313)\n","  plt.plot(chunked_tr)\n","  plt.ylim(min_tr + 0.5 * (max_tr - min_tr), max_tr)\n","  \n","  plt.show()\n","  print()\n"]},{"cell_type":"markdown","metadata":{"id":"Qys2Bw5Ou3u9"},"source":["### plot indi. legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pi5ntOOVu6JT"},"outputs":[],"source":["\n","  # ---------------------- ma ---------------------- #\n","   # --------- ema --------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(ema_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  #   # --------- sma --------- #\n","  # alpha = 1\n","  # for sm_i, sma in enumerate(sma_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 4\n","  #   plt.step(np.arange(len(plot_df)), plot_df[sma].values, alpha=alpha, color='#e91e63', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  \n","  # ---------------------- cb ---------------------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(cb_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#5b9cf6', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","\n","  \n","  # ---------------------- sar ---------------------- #\n","  # alpha = 1\n","  # markersize = 5\n","  # for sar in sar_list:\n","  #   plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","  #   markersize += 1\n","  #   alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  # alpha = 0.7\n","  # for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","  #                     where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","  #                     where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","  #   alpha -= 0.05\n","  \n","\n","\n","  # ---------------------- outer price indi. ---------------------- #\n","  #           macd          #\n","  # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","    \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for stoch_ in stoch_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[stoch_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(stoch_upper, linestyle='--')\n","  # plt.axhline(stoch_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- cctbbo ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for cctbbo in cctbbo_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cctbbo].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(cctbbo_upper, linestyle='--')\n","  # plt.axhline(cctbbo_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- ema_roc ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for emaroc in emaroc_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[emaroc].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","  \n","  # ---------- bbw ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for bbwp_ in bbwp_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[bbwp_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(bbwp_thresh, linestyle='--')\n","\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n"]},{"cell_type":"markdown","metadata":{"id":"59nW2aKYzkN8"},"source":["### plot all indicator (stepline ver.)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":828},"executionInfo":{"elapsed":3326,"status":"ok","timestamp":1631665238032,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"JDH4rXgNzno6","outputId":"3ee8589d-27d7-4433-ed78-7bb1233cf175"},"outputs":[{"name":"stdout","output_type":"stream","text":["short real pr : [0.95849245]\n","long real pr : [1.0378222]\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 864x1152 with 2 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]}],"source":["save_plot = False\n","\n","\n","if save_plot:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".xlsx\", \"\")\n","  try:\n","    os.mkdir(plot_check_dir)\n","  except:\n","\n","    #     remove existing dir   #\n","    shutil.rmtree(plot_check_dir)\n","    print(plot_check_dir, 'removed !')\n","    os.mkdir(plot_check_dir)\n","    # pass\n","    \n","# prev_plotsize = 120\n","prev_plotsize = 150\n","post_plotsize = 20\n","\n","# inversion = True\n","inversion = False\n","\n","# hedge = True\n","# hedge = False\n","\n","\n","if inversion:  \n","\n","    plot_pr_list = rev_np_pr\n","    h_plot_pr_list = h_rev_np_pr  # hedge\n","\n","else:\n","\n","    plot_pr_list = np_pr\n","    try:\n","      h_plot_pr_list = h_np_pr\n","    except Exception as e:\n","      print(\"error in h_plot_pr :\", e)\n","      h_plot_pr_list = np_pr\n","\n","\n","#         select plot columns       #\n","major_st_list = ['major_ST1_Up', 'major_ST1_Down', 'major_ST2_Up', 'major_ST2_Down', 'major_ST3_Up', 'major_ST3_Down',\n","                 'major_middle_line', 'major_upper_middle', 'major_lower_middle']\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower'] # + major_st_list\n","\n","\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1',  'senkou_a2']\n","senkoub_list = ['senkou_b1',  'senkou_b2']\n","\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1']\n","\n","# ma_list = ['sma1', 'sma4']\n","ma_list = ['ema5']\n","\n","\n","#     -------------- under price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","# macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3']\n","# trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","trix_list = ['trix1', 'trix2', 'trix3']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","cctbbo_list = ['cctbbo']\n","emaroc_list = ['ema_roc']\n","\n","\n","#       \n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols + ichimoku_cols2\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + trix_list\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + ma_list\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + ma_list + macd_list + stoch_list + fisher_list + cctbbo_list\n","input_colname = basic_list + major_st_list + senkoua_list + senkoub_list + sar_list + stoch_list + fisher_list + emaroc_list\n","price_colname = basic_list + senkoua_list + senkoub_list + sar_list # currently just used for ymin, ymax\n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols\n","\n","\n","\n","\n","# for t_i, (initial_i, i, j) in enumerate(trade_list):\n","for t_i, (ep_idx_list_, tp_idx_list_) in enumerate(trade_list):\n","  # print(i, j)\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","\n","  # if i <= 4860:\n","  # if i == 1536:\n","  # if 100 < i < 1860:\n","  if ep_idx_list_[0] == 370530:\n","    pass\n","  else:\n","    continue\n","\n","  # if tp_state_list[t_i] != 'd-open':\n","  #   continue\n","\n","  # if (entry[i] == -1) and res_df['close'].iloc[i - 1] > short_ep.iloc[i]:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  # if plot_pr_list[t_i] > 0.5:\n","  # if plot_pr_list[t_i] > 1.0:\n","  # # if plot_pr_list[t_i] < 1.0:\n","  #   continue\n","\n","  # plot_df = res_df.iloc[i - prev_plotsize:j + post_plotsize, input_cols]\n","  plot_df = res_df.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize][input_colname]\n","\n","\n","  #       keep off-color st with another variable         #\n","  # st_trend_plot_df = res_df.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize, [7, 10, 13]]\n","  # st_trend_plot_df = res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend']].iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  st_trend_plot_df = res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend', 'major_ST1_Trend', 'major_ST2_Trend', 'major_ST3_Trend']].iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  # htf_st_trend_plot_df = res_df[['major_ST1_Trend', 'major_ST2_Trend', 'major_ST3_Trend']].iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","\n","  # y_max = np.max(plot_df.iloc[:, [4, 6, 8]])\n","  # y_min = np.min(plot_df.iloc[:, [5, 7, 9]])\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  \n","  # y_max = max(np.max(plot_df.iloc[:, [4, 6, 8]]))\n","  # y_min = min(np.min(plot_df.iloc[:, [5, 7, 9]]))\n","  \n","  y_max = max(np.max(plot_df[price_colname]))\n","  y_min = min(np.min(plot_df[price_colname]))\n","\n","  if np.isnan(y_max) or np.isnan(y_min):\n","    continue\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","  \n","  plot_df[\"off_color_upper_st1\"] = np.where(st_trend_plot_df['minor_ST1_Trend'] == 1, plot_df['minor_ST1_Up'], np.nan)\n","  plot_df[\"off_color_upper_st2\"] = np.where(st_trend_plot_df['minor_ST2_Trend'] == 1, plot_df['minor_ST2_Up'], np.nan)\n","  plot_df[\"off_color_upper_st3\"] = np.where(st_trend_plot_df['minor_ST3_Trend'] == 1, plot_df['minor_ST3_Up'], np.nan)\n","  plot_df[\"off_color_lower_st1\"] = np.where(st_trend_plot_df['minor_ST1_Trend'] == -1, plot_df['minor_ST1_Down'], np.nan)\n","  plot_df[\"off_color_lower_st2\"] = np.where(st_trend_plot_df['minor_ST2_Trend'] == -1, plot_df['minor_ST2_Down'], np.nan)\n","  plot_df[\"off_color_lower_st3\"] = np.where(st_trend_plot_df['minor_ST3_Trend'] == -1, plot_df['minor_ST3_Down'], np.nan)\n","\n","  plot_df[\"off_color_upper_hst1\"] = np.where(st_trend_plot_df['major_ST1_Trend'] == 1, plot_df['major_ST1_Up'], np.nan)\n","  plot_df[\"off_color_upper_hst2\"] = np.where(st_trend_plot_df['major_ST2_Trend'] == 1, plot_df['major_ST2_Up'], np.nan)\n","  plot_df[\"off_color_upper_hst3\"] = np.where(st_trend_plot_df['major_ST3_Trend'] == 1, plot_df['major_ST3_Up'], np.nan)\n","  plot_df[\"off_color_lower_hst1\"] = np.where(st_trend_plot_df['major_ST1_Trend'] == -1, plot_df['major_ST1_Down'], np.nan)\n","  plot_df[\"off_color_lower_hst2\"] = np.where(st_trend_plot_df['major_ST2_Trend'] == -1, plot_df['major_ST2_Down'], np.nan)\n","  plot_df[\"off_color_lower_hst3\"] = np.where(st_trend_plot_df['major_ST3_Trend'] == -1, plot_df['major_ST3_Down'], np.nan)\n","\n","\n","  #       replace st values with np.nan, using st trend     #\n","  plot_df['minor_ST1_Up'] = np.where(st_trend_plot_df['minor_ST1_Trend'] == 1, np.nan, plot_df['minor_ST1_Up'])\n","  plot_df['minor_ST2_Up'] = np.where(st_trend_plot_df['minor_ST2_Trend'] == 1, np.nan, plot_df['minor_ST2_Up'])\n","  plot_df['minor_ST3_Up'] = np.where(st_trend_plot_df['minor_ST3_Trend'] == 1, np.nan, plot_df['minor_ST3_Up'])\n","  plot_df['minor_ST1_Down'] = np.where(st_trend_plot_df['minor_ST1_Trend'] == -1, np.nan, plot_df['minor_ST1_Down'])\n","  plot_df['minor_ST2_Down'] = np.where(st_trend_plot_df['minor_ST2_Trend'] == -1, np.nan, plot_df['minor_ST2_Down'])\n","  plot_df['minor_ST3_Down'] = np.where(st_trend_plot_df['minor_ST3_Trend'] == -1, np.nan, plot_df['minor_ST3_Down'])\n","\n","  plot_df['major_ST1_Up'] = np.where(st_trend_plot_df['major_ST1_Trend'] == 1, np.nan, plot_df['major_ST1_Up'])\n","  plot_df['major_ST2_Up'] = np.where(st_trend_plot_df['major_ST2_Trend'] == 1, np.nan, plot_df['major_ST2_Up'])\n","  plot_df['major_ST3_Up'] = np.where(st_trend_plot_df['major_ST3_Trend'] == 1, np.nan, plot_df['major_ST3_Up'])\n","  plot_df['major_ST1_Down'] = np.where(st_trend_plot_df['major_ST1_Trend'] == -1, np.nan, plot_df['major_ST1_Down'])\n","  plot_df['major_ST2_Down'] = np.where(st_trend_plot_df['major_ST2_Trend'] == -1, np.nan, plot_df['major_ST2_Down'])\n","  plot_df['major_ST3_Down'] = np.where(st_trend_plot_df['major_ST3_Trend'] == -1, np.nan, plot_df['major_ST3_Down'])\n","\n","\n","  plot_short_ep = short_ep.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  plot_long_ep = long_ep.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","\n","  plot_upper_middle = (plot_df['middle_line'] + plot_df['min_upper']) / 2\n","  plot_lower_middle = (plot_df['middle_line'] + plot_df['max_lower']) / 2\n","\n","  plot_short_tp = short_tp.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  plot_long_tp = long_tp.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]  \n","\n","\n","  # fig = trendln.plot_support_resistance(plot_df['close'], accuracy=8, fromwindows=False, numbest=1,  window=30) # requires matplotlib - pip install matplotlib\n","\n","  fig = plt.figure(figsize=(12, 16))\n","  \n","  gs = gridspec.GridSpec(nrows=3, # row 몇 개 \n","                       ncols=1, # col 몇 개 \n","                       height_ratios=[3, 1, 1]\n","                      )\n","  \n","  # fig = plt.figure(figsize=(8, 12))\n","  # ax = fig.add_subplot(111)\n","  # ax = fig.add_subplot(311)\n","  ax = fig.add_subplot(gs[0])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='r', colordown='b')\n","\n","  plt.step(plot_df[['minor_ST1_Up', 'minor_ST2_Up', 'minor_ST3_Up']].values, 'r', alpha=1)  # upper on color\n","  plt.step(plot_df[['minor_ST1_Down', 'minor_ST2_Down', 'minor_ST3_Down']].values, 'b', alpha=1)  # lower on color\n","  \n","  plt.step(plot_df[['major_ST1_Up', 'major_ST2_Up', 'major_ST3_Up']].values, 'r', alpha=1, linewidth=3)  # major upper on color\n","  plt.step(plot_df[['major_ST1_Down', 'major_ST2_Down', 'major_ST3_Down']].values, 'b', alpha=1, linewidth=3)  # major lower on color\n","\n","  plt.step(plot_df[['middle_line']].values, 'fuchsia', alpha=1)  # middle \n","  plt.step(plot_df[['major_middle_line']].values, 'fuchsia', alpha=1, linewidth=3)  # major_middle \n","  \n","  plt.step(plot_df[['off_color_upper_st1', 'off_color_upper_st2', 'off_color_upper_st3']].values, 'r', alpha=1, linestyle=':')  # upper off color\n","  plt.step(plot_df[['off_color_lower_st1', 'off_color_lower_st2', 'off_color_lower_st3']].values, 'b', alpha=1, linestyle=':')  # lower off color\n","  \n","  plt.step(plot_df[['off_color_upper_hst1', 'off_color_upper_hst2', 'off_color_upper_hst3']].values, 'r', alpha=1, linestyle=':', linewidth=3)  # major upper off color\n","  plt.step(plot_df[['off_color_lower_hst1', 'off_color_lower_hst2', 'off_color_lower_hst3']].values, 'b', alpha=1, linestyle=':', linewidth=3)  # major lower off color\n","\n","\n","  # plt.step(np.arange(len(plot_df)), plot_short_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","  # plt.step(np.arange(len(plot_df)),plot_long_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","\n","  plt.step(np.arange(len(plot_df)), plot_upper_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","  plt.step(np.arange(len(plot_df)), plot_lower_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","\n","  plt.step(plot_df[['major_upper_middle']].values, 'g', linestyle='--', alpha=1, linewidth=3)  # major_middle \n","  plt.step(plot_df[['major_lower_middle']].values, 'g', linestyle='--', alpha=1, linewidth=3)  # major_middle \n","  \n","\n","  # plt.step(np.arange(len(plot_df)), plot_short_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","  # plt.step(np.arange(len(plot_df)), plot_long_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","\n","\n","\n","  # ---------------------- on price indicator part ---------------------- #\n","\n","  # ---------------------- sma ---------------------- #\n","  # alpha = 1\n","  # for sm_i, sma in enumerate(ma_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[sma].values, alpha=alpha, color='black', linewidth=lw)\n","  #   alpha -= 0.2\n","  \n","  #               sar               #\n","  alpha = 1\n","  markersize = 5\n","  for sar in sar_list:\n","    plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","    markersize += 1\n","    alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  alpha = 0.7\n","  for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","                      where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","                      where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","    alpha -= 0.05\n","  \n","  # ------------------------------------------------------------- #\n","\n","\n","  #       ep & tp     #\n","  # if i != initial_i:\n","  # if len(ep_idx_list_) > 1:\n","  \n","  # ------------- initial order ------------- #\n","  plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  for ep_i in range(len(ep_idx_list_)):\n","    plt.axvline(prev_plotsize + (ep_idx_list_[ep_i] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","\n","  # plt.axvline(prev_plotsize, alpha=0.5, linestyle='--')\n","  plt.axhline(ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='lime')  # ep line axhline\n","\n","  for sub_i in range(len(ep_tp_list[t_i][1])):\n","    plt.axhline(ep_tp_list[t_i][1][sub_i], linestyle='-', xmin=0.75 + 0.05 * (sub_i + 1) , xmax=1, linewidth=3, color='lime')  # tp line axhline\n","    # plt.axhline(ep_tp_list[t_i][1], linestyle='-', xmin=0.9, xmax=1, linewidth=3)  # tp line axhline  \n","    plt.axvline(prev_plotsize + (tp_idx_list_[sub_i] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","\n","\n","  #         hedge ep & tp         #\n","  h_i = h_trade_list[t_i][1]\n","  if h_i is not None:\n","    plt.axvline(prev_plotsize + (h_i - ep_idx_list_[0]), linestyle='--')\n","    plt.axhline(h_ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='magenta')  # ep line axhline\n","    plt.axhline(h_ep_tp_list[t_i][1], linestyle='-', xmin=0.85, xmax=1, linewidth=3, color='magenta')  # tp line axhline\n","\n","  \n","  #         check pr        #\n","  if not static_lvrg:\n","    plt.title(\"%s ~ %s -> %.5f\\n %s\\n h_pr : %.5f\\nlvrg : %s\\ntp_ratio : %.2f\" % (ep_idx_list_[0], tp_idx_list_[-1], plot_pr_list[t_i], tp_state_list[t_i], h_plot_pr_list[t_i], lvrg_list[t_i], tp_ratio_list[t_i]))\n","  else:\n","    plt.title(\"%s ~ %s -> %.5f\\n %s\\n h_pr : %.5f\\ntp_ratio : %.2f\" % (ep_idx_list_[0], tp_idx_list_[-1], plot_pr_list[t_i], tp_state_list[t_i], h_plot_pr_list[t_i], tp_ratio_list[t_i]))\n","\n","  print(\"short real pr :\", (ep_tp_list[t_i][0] / ep_tp_list[t_i][1][sub_i] - fee - 1) * lvrg + 1)\n","  print(\"long real pr :\", (ep_tp_list[t_i][1][sub_i] / ep_tp_list[t_i][0] - fee - 1) * lvrg + 1)\n","\n","  #           y lim         #\n","  plt.ylim(y_min, y_max)\n","\n","\n","  # ---------------------- outer price indi. ---------------------- #\n","  #           macd          #\n","  # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","    \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for stoch in stoch_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[stoch].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(stoch_upper, linestyle='--')\n","  # plt.axhline(stoch_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- cctbbo ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for cctbbo in cctbbo_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cctbbo].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(cctbbo_upper, linestyle='--')\n","  # plt.axhline(cctbbo_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- ema_roc ---------- #  \n","  plt.subplot(gs[1])\n","  alpha = 1\n","  for emaroc in emaroc_list:\n","    plt.step(np.arange(len(plot_df)), plot_df[emaroc].values, 'g', alpha=alpha)\n","    # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","    alpha -= 0.2\n","  plt.axvline(prev_plotsize, linestyle='--')\n","  plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","  plt.axhline(0, linestyle='--')\n","\n","\n","\n","\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  if not save_plot:\n","    plt.show()\n","  \n","  else:\n","    # ---------- save mode ---------- #\n","    fig_name = plot_check_dir +  \"/%s.png\" % t_i\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","\n","  \n","  plt.close()\n","  print()\n","\n","  # break\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KGuJu2j4Aby9"},"outputs":[],"source":["# print()\n","for item in os.listdir(current_path + \"plot_check/\"):\n","  if item.endswith('png'):\n","    os.remove(current_path + \"plot_check/\" + item)\n","    print(current_path + \"plot_check/\" + item, \"removed !\")"]},{"cell_type":"markdown","metadata":{"id":"cj9X6S1jJjER"},"source":["### plot nontp case"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Gb1jGrS4Jl8A"},"outputs":[],"source":["prev_plotsize = 50\n","\n","# inversion = True\n","inversion = False\n","\n","# hedge = True\n","# hedge = False\n","\n","short_ver = False\n","\n","\n","if inversion:  \n","\n","    plot_pr_list = rev_np_pr\n","    h_plot_pr_list = h_rev_np_pr  # hedge\n","\n","else:\n","\n","    plot_pr_list = np_pr\n","    h_plot_pr_list = h_np_pr\n","\n","\n","\n","#         select plot columns       #\n","# basic_cols = [0, 1, 2, 3, 5, 6, 8, 9, 11, 12, 14] # you don't need to touch\n","\n","# sar_cols = [15, 18] # 15 ~ 19\n","# ichimoku_cols = [20, 21]  # 20 ~ 29\n","# # ichimoku_cols = [22, 23]  # 20 ~ 29\n","# ichimoku_cols2 = [22, 23]  # 20 ~ 29\n","# macd_cols = [30]  # 30 ~ 34\n","\n","# print(res_df.columns[basic_cols])\n","# break\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower']\n","# senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","# senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","\n","#     -------------- under price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher']\n","cctbbo_list = ['cctbbo']\n","\n","\n","#       \n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols + ichimoku_cols2\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + trix_list\n","input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + stoch_list + fisher_list + cctbbo_list\n","price_colname = basic_list + senkoua_list + senkoub_list + sar_list \n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols\n","\n","\n","if short_ver:\n","  nontp_indexs = nontp_short_indexs\n","  nontp_liqd_list = nontp_short_liqd_list\n","  nontp_pr_list = nontp_short_pr_list\n","  nontp_ep = nontp_short_ep_list\n","else:\n","  nontp_indexs = nontp_long_indexs\n","  nontp_liqd_list = nontp_long_liqd_list\n","  nontp_pr_list = nontp_long_pr_list\n","  nontp_ep = nontp_long_ep_list\n","\n","\n","for t_i, i in enumerate(nontp_indexs):\n","\n","  j = len(res_df) - 1\n","\n","  # print(i, j)\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","\n","  # if i <= 4860:\n","  # if i == 1536:\n","  # # if 1800 < i < 1860:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  # if tp_state_list[t_i] != 'd-open':\n","  #   continue\n","\n","  # if (entry[i] == -1) and res_df['close'].iloc[i - 1] > upper_ep.iloc[i]:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  # if plot_pr_list[t_i] > 0.5:\n","  # if plot_pr_list[t_i] > 1.0:\n","  # # if plot_pr_list[t_i] < 1.0:\n","  #   continue\n","\n","  # plot_df = res_df.iloc[i - prev_plotsize:j + 1, input_cols]\n","  plot_df = res_df.iloc[i - prev_plotsize:j + 1][input_colname]\n","\n","\n","  #       keep off-color st with another variable         #\n","  st_trend_plot_df = res_df.iloc[i - prev_plotsize:j + 1, [7, 10, 13]]\n","\n","  # y_max = np.max(plot_df.iloc[:, [4, 6, 8]])\n","  # y_min = np.min(plot_df.iloc[:, [5, 7, 9]])\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  \n","  # y_max = max(np.max(plot_df.iloc[:, [4, 6, 8]]))\n","  # y_min = min(np.min(plot_df.iloc[:, [5, 7, 9]]))\n","  \n","  y_max = max(np.max(plot_df[price_colname]))\n","  y_min = min(np.min(plot_df[price_colname]))\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","\n","  plot_df[\"off_color_upper_st1\"] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, plot_df.iloc[:, [4]], np.nan)\n","  plot_df[\"off_color_upper_st2\"] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, plot_df.iloc[:, [6]], np.nan)\n","  plot_df[\"off_color_upper_st3\"] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, plot_df.iloc[:, [8]], np.nan)\n","  plot_df[\"off_color_lower_st1\"] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, plot_df.iloc[:, [5]], np.nan)\n","  plot_df[\"off_color_lower_st2\"] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, plot_df.iloc[:, [7]], np.nan)\n","  plot_df[\"off_color_lower_st3\"] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, plot_df.iloc[:, [9]], np.nan)\n","\n","\n","  #       replace st values with np.nan, using st trend     #\n","  plot_df.iloc[:, [4]] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, np.nan, plot_df.iloc[:, [4]])\n","  plot_df.iloc[:, [6]] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, np.nan, plot_df.iloc[:, [6]])\n","  plot_df.iloc[:, [8]] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, np.nan, plot_df.iloc[:, [8]])\n","  plot_df.iloc[:, [5]] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, np.nan, plot_df.iloc[:, [5]])\n","  plot_df.iloc[:, [7]] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, np.nan, plot_df.iloc[:, [7]])\n","  plot_df.iloc[:, [9]] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, np.nan, plot_df.iloc[:, [9]])\n","\n","\n","  plot_upper_ep = upper_ep.iloc[i - prev_plotsize:j + 1]\n","  plot_lower_ep = lower_ep.iloc[i - prev_plotsize:j + 1]\n","\n","  plot_upper_middle = (plot_df['middle_line'] + plot_df['min_upper']) / 2\n","  plot_lower_middle = (plot_df['middle_line'] + plot_df['max_lower']) / 2\n","\n","  plot_short_tp = short_tp.iloc[i - prev_plotsize:j + 1]\n","  plot_long_tp = long_tp.iloc[i - prev_plotsize:j + 1]  \n","\n","\n","\n","  # fig = plt.figure(figsize=(12, 16))\n","  fig = plt.figure(figsize=(12, 16))\n","  \n","  gs = gridspec.GridSpec(nrows=3, # row 몇 개 \n","                       ncols=1, # col 몇 개 \n","                       height_ratios=[3, 1, 1]\n","                      )\n","  \n","  # fig = plt.figure(figsize=(8, 12))\n","  # ax = fig.add_subplot(111)\n","  # ax = fig.add_subplot(311)\n","  ax = fig.add_subplot(gs[0])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='r', colordown='b')\n","\n","  # print(plot_df.values[:, 4:])\n","  plt.step(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper on color\n","  # plt.plot(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper on color\n","  plt.step(plot_df.values[:, [5, 7, 9]], 'b', alpha=1)  # lower on color\n","  plt.step(plot_df.values[:, [10]], 'fuchsia', alpha=1)  # middle\n","  \n","  plt.step(plot_df.values[:, -6:-3], 'r', alpha=1, linestyle=':')  # upper off color\n","  plt.step(plot_df.values[:, -3:], 'b', alpha=1, linestyle=':')  # lower off color\n","\n","\n","\n","  # plt.step(np.arange(len(plot_df)), plot_upper_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","  # plt.step(np.arange(len(plot_df)),plot_lower_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","\n","  plt.step(np.arange(len(plot_df)), plot_upper_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","  plt.step(np.arange(len(plot_df)), plot_lower_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","\n","  # plt.step(np.arange(len(plot_df)), plot_short_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","  # plt.step(np.arange(len(plot_df)), plot_long_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","\n","\n","\n","  # ---------------------- indicator part ---------------------- #\n","  \n","  #               sar               #\n","  alpha = 1\n","  markersize = 5\n","  for sar in sar_list:\n","    plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","    markersize += 1\n","    alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  alpha = 0.7\n","  for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","                      where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","                      where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","    alpha -= 0.05\n","  \n","  # ------------------------------------------------------------- #\n","\n","\n","  #       ep & tp     #\n","  if i != initial_i:\n","    plt.axvline(prev_plotsize - (i - initial_i), alpha=0.5, linestyle='--')\n","  plt.axvline(prev_plotsize, alpha=0.5, linestyle='--')\n","  plt.axhline(nontp_ep[t_i], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='lime')  # ep line axhline\n","\n","  # for sub_i in range(len(ep_tp_list[t_i][1])):\n","  #   plt.axhline(ep_tp_list[t_i][1][sub_i], linestyle='-', xmin=0.75 + 0.05 * (sub_i + 1) , xmax=1, linewidth=3, color='lime')  # tp line axhline\n","    # plt.axhline(ep_tp_list[t_i][1], linestyle='-', xmin=0.9, xmax=1, linewidth=3)  # tp line axhline    \n","\n","  #         hedge ep & tp         #\n","  # h_i = h_trade_list[t_i][1]\n","  # if h_i is not None:\n","  #   plt.axvline(prev_plotsize + (h_i - i), linestyle='--')\n","  #   plt.axhline(h_ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='magenta')  # ep line axhline\n","  #   plt.axhline(h_ep_tp_list[t_i][1], linestyle='-', xmin=0.85, xmax=1, linewidth=3, color='magenta')  # tp line axhline\n","\n","  \n","  #         check pr        #\n","  plt.title(\"%s ~ %s -> liqd : %.2f\\npr : %.2f\" % (i, j, nontp_liqd_list[t_i], nontp_pr_list[t_i]))\n","\n","  #           y lim         #\n","  plt.ylim(y_min, y_max)\n","\n","\n","  # #           macd          #\n","  # # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # plt.subplot(313)\n","  plt.subplot(gs[1])\n","  alpha = 1\n","  for stoch in stoch_list:\n","    plt.step(np.arange(len(plot_df)), plot_df[stoch].values, 'g', alpha=alpha)\n","    # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","    alpha -= 0.2\n","  plt.axvline(prev_plotsize, linestyle='--')\n","  plt.axhline(50, linestyle='--')\n","  plt.axhline(stoch_upper, linestyle='--')\n","  plt.axhline(stoch_lower, linestyle='--')\n","\n","\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  plt.show()\n","  # plt.draw()\n","  plt.close()\n","  print()\n","\n","  # break\n"]},{"cell_type":"markdown","metadata":{"id":"-g7YY5BvMcLS"},"source":["### show detail values"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":255,"status":"ok","timestamp":1625228960601,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"5TxQ3rDnKMa7","outputId":"422ac214-8c88-4f39-ec3a-7c823574f6da"},"outputs":[{"name":"stdout","output_type":"stream","text":["upper_ep.iloc[i] : 2348.266954813089\n","short_tp.iloc[j] : 2205.609333246829\n"]}],"source":["i, j = 27267, 27268\n","print(\"upper_ep.iloc[i] :\", upper_ep.iloc[i])\n","print(\"short_tp.iloc[j] :\", short_tp.iloc[j])"]},{"cell_type":"markdown","metadata":{"id":"7AIl6EBuZNOL"},"source":["## none plot off-color st"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yaVxrNGzZgrF"},"outputs":[],"source":["prev_plotsize = 50\n","\n","for t_i, (i, j) in enumerate(trade_list):\n","  # print(i, j)\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","\n","  # if pr_list[t_i] >= 1:\n","  #   continue\n","\n","  plot_df = res_df.iloc[i - prev_plotsize:j + 1, [0, 1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 16]]\n","\n","  #       replace st values with np.nan, using st trend     #\n","  st_trend_plot_df = res_df.iloc[i - prev_plotsize:j + 1, [7, 10, 13]]\n","  plot_df.iloc[:, [4]] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, np.nan, plot_df.iloc[:, [4]])\n","  plot_df.iloc[:, [6]] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, np.nan, plot_df.iloc[:, [6]])\n","  plot_df.iloc[:, [8]] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, np.nan, plot_df.iloc[:, [8]])\n","  plot_df.iloc[:, [5]] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, np.nan, plot_df.iloc[:, [5]])\n","  plot_df.iloc[:, [7]] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, np.nan, plot_df.iloc[:, [7]])\n","  plot_df.iloc[:, [9]] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, np.nan, plot_df.iloc[:, [9]])\n","\n","\n","  plot_upper_ep = upper_ep.iloc[i - prev_plotsize:j + 1]\n","  plot_lower_ep = lower_ep.iloc[i - prev_plotsize:j + 1]\n","\n","  fig = plt.figure(figsize=(8, 6))\n","  ax = fig.add_subplot(111)\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='r', colordown='b')\n","\n","  # print(plot_df.values[:, 4:])\n","  plt.plot(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper\n","  plt.plot(plot_df.values[:, [5, 7, 9]], 'b', alpha=1)  # lower\n","  plt.plot(plot_df.values[:, [10]], 'g', alpha=1)  # middle\n","\n","  plt.plot(plot_df.values[:, [11]], 'c*', alpha=1, markersize=5)  # sar mic\n","  plt.plot(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  plt.plot(plot_upper_ep.values, alpha=1, linestyle='--')  # ep\n","  plt.plot(plot_lower_ep.values, alpha=1, linestyle='--')  # ep\n","\n","  plt.axvline(prev_plotsize, linestyle='--')\n","\n","  plt.title(\"%s ~ %s -> %.5f\" % (i, j, pr_list[t_i]))\n","  plt.show()\n","  # plt.draw()\n","  plt.close()"]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":["Ic1mfmwWCIBu","AUSBU7T8Suzi","mEKyVbHWSuzi","VdukVo5-Suzj","Bw5JibDKSuzj","Pe0QpnORSuzk","4oZ1ohTtSuzk","E0n53hflJbnp","jTN3M842Suzl","MlFkpO1MSuzl","t1E_eAyPSuzm","nUs4fjVHSuzl","WVAKq3i8Suzm","L7l5CTJfSuzn","x_XGJqBi8Jex","M8-EChy0VsDr","xpyP5t8Ht_pE","o5psPOVOCA1c","dzla8i9_ysmP","WC0ujlYg0DZD","Up1TNNxbfKbk","zQ-roiifspcX","FxJ1y8v2fkCR","VBwVaUkvfnOd","tApzvz_gK9lR","FaRGwR4NEop2","2gxvme1PC6ha","5la6usMOFzkX","OJqkmkpsLCYC","JNQxkb06ZdTe"],"name":"ATv5_2_backi2(0224_2050_tonp).ipynb","toc_visible":true,"provenance":[],"authorship_tag":"ABX9TyN1ZWPmnni+r9q+9YeO4lpB"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}