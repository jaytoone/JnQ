{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"6rmQpzEGXfCw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648859561352,"user_tz":-540,"elapsed":17161,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"f3f4d57d-891e-42ee-d0e3-7516c123c7bb"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","import os, sys\n","\n","current_path = '/content/drive/My Drive/Colab Notebooks/JnQ/'\n","\n","os.chdir(current_path)\n","\n","strat_pkg = 'IDE'\n","\n","mpl_finance_path = '/content/drive/My Drive/Colab Notebooks/JnQ/mpl_finance'\n","zigzag_path = '/content/drive/My Drive/Colab Notebooks/JnQ/zigzag'\n","\n","if mpl_finance_path not in sys.path:\n","\n","  try:\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ')\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ/{}'.format(strat_pkg))\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ/funcs')\n","    sys.path.insert(0, mpl_finance_path)\n","    sys.path.insert(0, zigzag_path)\n","    \n","  except Exception as e:\n","    print(e)"]},{"cell_type":"markdown","metadata":{"id":"8uqYv5StTazo"},"source":["# requirements"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"9qGt60DKTZmf","executionInfo":{"status":"ok","timestamp":1648859572418,"user_tz":-540,"elapsed":5261,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["#!pip install zigzag --target=$'/content/drive/My Drive/Colab Notebooks/JnQ/zigzag'\n","\n","# !pip install findiff\n","# import nvstrings, nvcategory, cudf\n","# import cuml\n","# import cudf\n","\n","import os\n","from funcs.funcs_idep import *\n","from funcs.funcs_duration_v2 import *\n","from funcs.funcs_plot_check import *\n","from funcs.funcs_pairing import *\n","# from funcs.funcs_ide import *\n","# from funcs.funcs_indicator_candlescore import *\n","from funcs.funcs_indicator import *\n","from funcs.funcs_trader import *\n","from ast import literal_eval\n","import logging\n","import importlib\n","\n","import mpl_finance as mf\n","import matplotlib.pyplot as plt\n","from matplotlib import gridspec\n","# from zigzag import *\n","# from tqdm.notebook import tqdm\n","\n","import IPython\n","import IPython.display\n","\n","import numpy as np\n","# import jax.numpy as np\n","import pandas as pd\n","# import seaborn as sns\n","# import tensorflow as tf\n","from scipy import stats, signal\n","\n","import pickle\n","import shutil\n","import json\n","from easydict import EasyDict\n","import copy\n","\n","import datetime\n","from datetime import datetime\n","import random\n","import time\n","# import warnings\n","\n","# warnings.simplefilter(\"ignore\", category=RuntimeWarning)\n","\n","np.seterr(invalid=\"ignore\")\n","np.set_printoptions(suppress=True)\n","np.set_printoptions(linewidth=2000) \n","\n","pd.set_option('mode.chained_assignment',  None)\n","\n","pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)"]},{"cell_type":"markdown","metadata":{"id":"Ic1mfmwWCIBu"},"source":["# makeset - with to_htf dataframes"]},{"cell_type":"markdown","metadata":{"id":"AUSBU7T8Suzi"},"source":["## sync_check_make"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QmhLikYlSuzi"},"outputs":[],"source":["def sync_check_make(df):\n","\n","    make_itv_list = ['3T', '5T', '15T', '30T', 'H', '4H', 'D']\n","    offset_list = ['1h', '1h', '1h', '1h', '1h', '1h', '9h']\n","\n","    assert len(make_itv_list) == len(offset_list), \"length of itv & offset_list should be equal\"\n","        \n","    htf_df_list = [to_htf(df, itv_=itv_, offset=offset_) for itv_, offset_ in zip(make_itv_list, offset_list)]\n","\n","    df_3T, df_5T, df_15T, df_30T, df_H, df_4H, df_D = htf_df_list\n","\n","    for htf_df in htf_df_list:\n","      print(\"{} -> \".format(pd.infer_freq(htf_df.index)), htf_df.tail(1))\n","\n","    # heikinashi_v2(res_df_)\n","    # h_candle_v3(res_df, '5T')\n","\n","    # --------------- wave_range --------------- #\n","    # df = wave_range(df, 20, 40, ltf_df=None, touch_lbperiod=50)\n","\n","    # print(\"wave_range phase done\")\n","\n","\n","    # --------------- cbline --------------- #    \n","    # cloud_bline(df_3T, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_3T, [-1]), how='inner')\n","    # # cloud_bline(df_5T, 20)\n","    # # df = df.join(to_lower_tf_v2(df, df_5T, [-1]), how='inner')\n","    # cloud_bline(df_15T, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_15T, [-1]), how='inner')\n","    # cloud_bline(df_30T, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_30T, [-1]), how='inner')\n","    # cloud_bline(df_H, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_H, [-1]), how='inner')\n","    # cloud_bline(df_4H, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_4H, [-1]), how='inner')\n","\n","    # print(\"cbline phase done\")\n","\n","    # --------------- sd_dc --------------- #\n","    # df = sd_dc(df, 20, 40)\n","    # df = sd_dc(df, 20, 20)\n","    # df = sd_dc(df_5T, 20, 40, df)\n","    # df = sd_dc(df_H, 20, 40, df)\n","\n","    # print(\"sd_dc phase done\")\n","\n","    # --------------- imb_ratio --------------- #\n","    # imb_ratio(df, '5T')\n","    # imb_ratio_v3(df, \"5T\")\n","    imb_ratio_v4(df, \"5T\")\n","\n","    # imb_ratio(df, 'H')\n","    # imb_ratio_v2(df, '5T')\n","    \n","    print(\"imb_ratio phase done\")\n","\n","    # --------------- rel_abs_ratio --------------- #\n","    # rel_abs_ratio(df, '5T', norm_period=120)\n","\n","    # --------------- normalize data --------------- #\n","    # itv = 'T'\n","    # lb_period = 15\n","    # target_col = 'close_{}{}'.format(itv, lb_period)\n","    # target_data = df['close'].diff(lb_period).to_numpy()\n","    # norm_data(df, target_data, target_col)    \n","    # print(\"normalize data phase done !\")\n","\n","    # --------------- lucid sar --------------- #\n","    # lucid_sar_v2(df)\n","    # lucid_sar_v2(df_3T)\n","    # df = df.join(to_lower_tf_v2(df, df_3T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_5T)\n","    # df = df.join(to_lower_tf_v2(df, df_5T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_15T)\n","    # df = df.join(to_lower_tf_v2(df, df_15T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_30T)\n","    # df = df.join(to_lower_tf_v2(df, df_30T, [-2, -1]), how='inner')       \n","\n","    # print(\"sar phase done\")\n","\n","    # --------------- supertrend --------------- #\n","    # df = st_price_line(df, df_3T, '3m')\n","    # df = st_price_line(df, df_5T, '5m')\n","    # df = st_price_line(df, df_15T, '15m')\n","    # df = st_price_line(df, df_30T, '30m')\n","    # df = st_price_line(df, df_H, '1h')\n","    # df = st_price_line(df, df_4H, '4h')\n","\n","    # print(\"supertrend phase done\")\n","\n","    # --------------- rsi --------------- #  \n","    # df['rsi_1m'] = rsi(df, 14)    \n","    # df_5T['rsi_5m'] = rsi(df_5T, 14)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1]), columns=['rsi_5m']))\n","    \n","    # print(\"rsi phase done\")\n","\n","\n","    # --------------- cci --------------- #  \n","    # df['cci_1m'] = cci(df, 20)\n","\n","    # print(\"cci phase done\")\n","\n","    # --------------- ema --------------- #      \n","    # df_5T['ema_5m'] = ema(df_5T['close'], 195)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1]), columns=['ema_5m']))\n","    \n","    # print(\"ema phase done\")\n","    \n","    # # --------------- bband --------------- #  \n","    # df = bb_width_v2(df, period, multiple)\n","\n","    # print(\"bband phase done\")\n","\n","    \n","    # --------------- stochastic --------------- #\n","    # df['stoch_1m'] = stoch(df, 13, 3, 3)\n","\n","    # df_5T['stoch'] = stoch(df_5T, 13, 3, 3)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","    # print(\"stoch phase done\")\n","\n","\n","    return df\n"]},{"cell_type":"markdown","metadata":{"id":"mEKyVbHWSuzi"},"source":["## make & save res_df (concat 생각하면, timeindex sync 맞춰야함)"]},{"cell_type":"markdown","metadata":{"id":"VdukVo5-Suzj"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11,"status":"error","timestamp":1636201718856,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"khKb9nhlSuzj","outputId":"02bf2c60-f298-4fe9-e6bb-78230ac1348c"},"outputs":[{"ename":"NameError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-5-ee034491b257>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0ma_day\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m3600\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m24\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtqdm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m   \u001b[0mkeys\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mfile_list\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'file_list' is not defined"]}],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  if '2021-07-01'.upper() not in file_list[i]:\n","  # if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    excel_name = key.replace(\".xlsx\", \"_st1h_backi2.xlsx\")\n","    excel_path = save_path + excel_name\n","\n","    if excel_name in exist_list:\n","      print(excel_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m 마지막 timeindex 의 date 기준, 08:59:59.999000 를 last timestamp 로 설정\n","      #      2. 시작 timestamp 는 모든 tf 의 가장 최근 시작 index,\n","      #       a. 1m 의 시작 timeindex 는 최소, htf 의 시작 timeindex 보다 interval 만큼 앞서야함\n","      #         i. 따라서 1m open_index, latest_open_index + 1d 를 하면 댐\n","      #           1. timestamp 으로 변환후 1day 를 더하고 datetime 으로 변환\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","    latest_open_index = sorted(open_indexes)[-1]\n","    \n","    open_ts = datetime.timestamp(latest_open_index)\n","    latest_open_index_1m = datetime.fromtimestamp(open_ts + a_day)\n","\n","    #   str 로 만들어 접근하면 불가함  #\n","    end_index = pd.to_datetime(str(df.index[-1]).split(\" \")[0] + \" 08:59:59.999000\")\n","    # break\n","\n","    sliced_df = df.loc[latest_open_index_1m:end_index] # to_lower_tf 의 기준 ltf\n","    sliced_second_df = second_df.loc[latest_open_index:end_index]\n","    sliced_third_df = third_df.loc[latest_open_index:end_index]\n","    sliced_fourth_df = fourth_df.loc[latest_open_index:end_index]\n","    sliced_fifth_df = fifth_df.loc[latest_open_index:end_index]\n","\n","    print(\"sliced index\")\n","    print(sliced_df.index[[0, -1]])\n","    print(sliced_second_df.index[[0, -1]])\n","    print(sliced_third_df.index[[0, -1]])\n","    print(sliced_fourth_df.index[[0, -1]])\n","    print(sliced_fifth_df.index[[0, -1]])\n","\n","    try:\n","      sliced_sixth_df = sixth_df.loc[latest_open_index:end_index]\n","      sliced_seventh_df = seventh_df.loc[latest_open_index:end_index]\n","\n","      print(sliced_sixth_df.index[[0, -1]])\n","      print(sliced_seventh_df.index[[0, -1]])\n","\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df, sliced_sixth_df, sliced_seventh_df)\n","    \n","    except:\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df)\n","\n","\n","\n","    res_df.to_excel(excel_path)\n","    print(excel_name, \"saved succesfully !\")"]},{"cell_type":"markdown","metadata":{"id":"Bw5JibDKSuzj"},"source":["### xlsx to feather"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":355,"referenced_widgets":["be2b848dbcb14a079a2b7bd605af6435"]},"id":"VA-_gcA7Suzj","outputId":"f6f3b55d-ec2c-4b2c-d62e-3de7c0384dc4"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"be2b848dbcb14a079a2b7bd605af6435","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/156 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["DatetimeIndex(['2021-06-28 00:00:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:02:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:04:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:14:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:29:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-09-14 03:59:59.999000', '2021-11-15 14:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-03-10 20:59:59.999000', '2021-11-15 16:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","\n","xlsx converted to feather !\n","DatetimeIndex(['2021-06-28 00:00:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:02:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:04:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:14:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:29:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-09-14 03:59:59.999000', '2021-11-15 14:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-03-10 20:59:59.999000', '2021-11-15 16:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","\n","xlsx converted to feather !\n"]}],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  # if '2021-07-01'.upper() not in file_list[i]:\n","  if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    feather_name = key.replace(\".xlsx\", \".ftr\")\n","    # feather_path = save_path + feather_name\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m 마지막 timeindex 의 date 기준, 08:59:59.999000 를 last timestamp 로 설정\n","      #      2. 시작 timestamp 는 모든 tf 의 가장 최근 시작 index,\n","      #       a. 1m 의 시작 timeindex 는 최소, htf 의 시작 timeindex 보다 interval 만큼 앞서야함\n","      #         i. 따라서 1m open_index, latest_open_index + 1d 를 하면 댐\n","      #           1. timestamp 으로 변환후 1day 를 더하고 datetime 으로 변환\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","\n","    df.reset_index().to_feather(date_path + feather_name, compression='lz4')\n","    second_df.reset_index().to_feather(date_path2 + feather_name, compression='lz4')\n","    third_df.reset_index().to_feather(date_path3 + feather_name, compression='lz4')\n","    fourth_df.reset_index().to_feather(date_path4 + feather_name, compression='lz4')\n","    fifth_df.reset_index().to_feather(date_path5 + feather_name, compression='lz4')\n","    sixth_df.reset_index().to_feather(date_path6 + feather_name, compression='lz4')\n","    seventh_df.reset_index().to_feather(date_path7 + feather_name, compression='lz4')\n","\n","    print(\"xlsx converted to feather !\")\n","    "]},{"cell_type":"markdown","metadata":{"id":"Pe0QpnORSuzk"},"source":["### add itv_name to ftr"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":223,"referenced_widgets":["e3225655da874b8d89cc8b2a381b3fb6"]},"executionInfo":{"elapsed":43664,"status":"ok","timestamp":1638246331122,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"M-gl30KxSuzk","outputId":"1cfcb580-8d25-4bd0-fdd0-213640779ce2"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"e3225655da874b8d89cc8b2a381b3fb6","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/175 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 BTCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 BCHUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 XRPUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 EOSUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 LTCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ETCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 LINKUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 XLMUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ADAUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ETHUSDT_1m.ftr\n"]}],"source":["save_path = './candlestick_concated/res_df/'\n","\n","# dir_path = \"bbdc3m_backi2\"\n","# date = '2021-10-10'\n","date = '2021-07-01'\n","\n","db_path = './candlestick_concated/database_bn/non_cum/%s/' % date\n","os.makedirs(os.path.join(db_path), exist_ok=True)\n","\n","# exist_list = os.listdir(os.path.join(save_path, dir_path))\n","# break\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","        \n","    df = shutil.copy(date_path + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n","    second_df = shutil.copy(date_path2 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval2))\n","    third_df = shutil.copy(date_path3 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval3))\n","    fourth_df = shutil.copy(date_path4 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval4))\n","    fifth_df = shutil.copy(date_path5 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval5))\n","    sixth_df = shutil.copy(date_path6 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval6))\n","    seventh_df = shutil.copy(date_path7 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval7))\n","\n","    print(\"copied to\" + db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n"]},{"cell_type":"markdown","metadata":{"id":"4oZ1ohTtSuzk"},"source":["### feather ver. (database to res_df)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vgVHpnUsSuzk"},"outputs":[],"source":["# db_path = './candlestick_concated/database_ub/' # upbit\n","db_path = './candlestick_concated/database_bn/'   # binance\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","save_dir_path = \"bb1d_backi2\"\n","date = '2022-02-17'\n","\n","# concat_path = 'noncat' # 새로운 cols 를 기존 cum/concat 에 붙이려는 경우\n","concat_path = 'concat'\n","cum_path = \"cum\"\n","# cum_path = \"non_cum\"  # non_cum 으로 진행하는 경우, row concat 용도이기 때문에 noncat -> concat 으로 변경 (base cols 를 모두 담고 있음)\n","\n","load_path = os.path.join(db_path, cum_path, date)\n","save_path = os.path.join(save_path, save_dir_path, concat_path, cum_path, date)\n","\n","os.makedirs(save_path, exist_ok=True)\n","\n","file_list = os.listdir(load_path)\n","exist_list = os.listdir(save_path)\n","# break\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","\n","    if \"_1m\" not in key:\n","      continue\n","\n","    # feather_name = key.replace(\".ftr\", \"_%.ftr\" % save_dir_path)\n","    feather_name = key.replace(\"_1m\", \"\")\n","    feather_path = os.path.join(save_path, feather_name)\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    df = pd.read_feather(os.path.join(load_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","    res_df = sync_check_make(df)\n","\n","    res_df.reset_index().to_feather(feather_path, compression='lz4')\n","    print(feather_path, \"saved succesfully !\")"]},{"cell_type":"markdown","source":["#### just add col to loaded df"],"metadata":{"id":"YxCPUzoyidwH"}},{"cell_type":"code","source":["res_df_ = sync_check_make(res_df_)  # suffix duplication 유의"],"metadata":{"id":"odqVwQHpYo1M","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648807669750,"user_tz":-540,"elapsed":3919,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"ec5b80e3-1094-45b0-9d16-7b68dc24fc99"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["3T ->                          open     high      low    close\n","index                                                  \n","2022-02-17 10:27:00  3148.85  3150.08  3146.38  3146.76\n","5T ->                          open     high      low    close\n","index                                                  \n","2022-02-17 10:25:00  3146.85  3150.08  3145.44  3146.76\n","15T ->                          open    high      low    close\n","index                                                 \n","2022-02-17 10:15:00  3143.99  3151.0  3139.14  3146.76\n","30T ->                         open     high      low    close\n","index                                                 \n","2022-02-17 10:00:00  3148.8  3158.68  3139.14  3146.76\n","H ->                         open     high      low    close\n","index                                                 \n","2022-02-17 10:00:00  3148.8  3158.68  3139.14  3146.76\n","4H ->                         open     high     low    close\n","index                                                \n","2022-02-17 09:00:00  3121.8  3158.68  3120.0  3146.76\n","D ->                         open     high     low    close\n","index                                                \n","2022-02-17 09:00:00  3121.8  3158.68  3120.0  3146.76\n","imb_ratio phase done\n"]}]},{"cell_type":"code","source":["res_df_.tail().iloc[:, -10:]\n","# res_df_.dtypes"],"metadata":{"id":"3SKglsQCj5_x","colab":{"base_uri":"https://localhost:8080/","height":237},"executionInfo":{"status":"ok","timestamp":1648807669751,"user_tz":-540,"elapsed":8,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"5d372ef3-e8bb-4302-dc73-d63015c7db41"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                         long_wave_1_T  long_wave_0_T  long_wave_point_T  short_ir_H  long_ir_H  body_rel_ratio_5T  short_ir3_5T  long_ir3_5T  short_ir4_5T  long_ir4_5T\n","index                                                                                                                                                                   \n","2022-02-17 10:25:59.999        3158.68        3114.98              False   -1.369498        NaN           0.056604    -27.444444          NaN     -1.553459          NaN\n","2022-02-17 10:26:59.999        3158.68        3114.98              False   -1.369498        NaN           0.056604    -27.444444          NaN     -1.553459          NaN\n","2022-02-17 10:27:59.999        3158.68        3114.98              False   -1.369498        NaN           0.056604    -27.444444          NaN     -1.553459          NaN\n","2022-02-17 10:28:59.999        3158.68        3114.98              False   -1.369498        NaN           0.056604    -27.444444          NaN     -1.553459          NaN\n","2022-02-17 10:29:59.999        3158.68        3114.98              False   -1.369498        NaN           0.056604    -27.444444          NaN     -1.553459          NaN"],"text/html":["\n","  <div id=\"df-7599f554-5d7d-4cf6-b40f-734ab64ce1ab\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>long_wave_1_T</th>\n","      <th>long_wave_0_T</th>\n","      <th>long_wave_point_T</th>\n","      <th>short_ir_H</th>\n","      <th>long_ir_H</th>\n","      <th>body_rel_ratio_5T</th>\n","      <th>short_ir3_5T</th>\n","      <th>long_ir3_5T</th>\n","      <th>short_ir4_5T</th>\n","      <th>long_ir4_5T</th>\n","    </tr>\n","    <tr>\n","      <th>index</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2022-02-17 10:25:59.999</th>\n","      <td>3158.68</td>\n","      <td>3114.98</td>\n","      <td>False</td>\n","      <td>-1.369498</td>\n","      <td>NaN</td>\n","      <td>0.056604</td>\n","      <td>-27.444444</td>\n","      <td>NaN</td>\n","      <td>-1.553459</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2022-02-17 10:26:59.999</th>\n","      <td>3158.68</td>\n","      <td>3114.98</td>\n","      <td>False</td>\n","      <td>-1.369498</td>\n","      <td>NaN</td>\n","      <td>0.056604</td>\n","      <td>-27.444444</td>\n","      <td>NaN</td>\n","      <td>-1.553459</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2022-02-17 10:27:59.999</th>\n","      <td>3158.68</td>\n","      <td>3114.98</td>\n","      <td>False</td>\n","      <td>-1.369498</td>\n","      <td>NaN</td>\n","      <td>0.056604</td>\n","      <td>-27.444444</td>\n","      <td>NaN</td>\n","      <td>-1.553459</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2022-02-17 10:28:59.999</th>\n","      <td>3158.68</td>\n","      <td>3114.98</td>\n","      <td>False</td>\n","      <td>-1.369498</td>\n","      <td>NaN</td>\n","      <td>0.056604</td>\n","      <td>-27.444444</td>\n","      <td>NaN</td>\n","      <td>-1.553459</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2022-02-17 10:29:59.999</th>\n","      <td>3158.68</td>\n","      <td>3114.98</td>\n","      <td>False</td>\n","      <td>-1.369498</td>\n","      <td>NaN</td>\n","      <td>0.056604</td>\n","      <td>-27.444444</td>\n","      <td>NaN</td>\n","      <td>-1.553459</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7599f554-5d7d-4cf6-b40f-734ab64ce1ab')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-7599f554-5d7d-4cf6-b40f-734ab64ce1ab button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-7599f554-5d7d-4cf6-b40f-734ab64ce1ab');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":121}]},{"cell_type":"code","source":["# ------------ save current res_df ------------ #\n","ftr_full_path = os.path.join(ftr_path, key)\n","res_df_.reset_index().to_feather(ftr_full_path, compression='lz4')  # key 잘 확인하고 저장\n","print(ftr_full_path, 'saved !')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XrgJPQRuisCa","executionInfo":{"status":"ok","timestamp":1648807677144,"user_tz":-540,"elapsed":2144,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"ac54ae29-4979-45ab-b76c-9eb3fb09f113"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["./candlestick_concated/res_df/bb1d_backi2/concat/cum/2022-02-17/2022-02-17 ETHUSDT.ftr saved !\n"]}]},{"cell_type":"markdown","metadata":{"id":"E0n53hflJbnp"},"source":["### htf candle check"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":489,"status":"ok","timestamp":1642148504926,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"6xW0yugCWvGz","outputId":"58106ff9-9709-4a62-bca2-1f6795d13322"},"outputs":[{"name":"stdout","output_type":"stream","text":["itv_ : 3T\n","                        open     high      low    close\n","index                                                  \n","2022-01-10 15:06:00  3169.97  3170.22  3159.51  3161.22\n","2022-01-10 15:09:00  3161.22  3163.98  3161.22  3163.82\n","2022-01-10 15:12:00  3163.82  3163.83  3156.02  3160.49\n","2022-01-10 15:15:00  3160.51  3164.29  3159.01  3162.93\n","2022-01-10 15:18:00  3163.02  3164.29  3162.41  3164.28\n","                            open     high      low    close    volume\n","index                                                                \n","2022-01-10 15:08:59.999  3169.97  3170.22  3159.51  3161.22  4241.449\n","2022-01-10 15:11:59.999  3161.22  3163.98  3161.22  3163.82  1143.874\n","2022-01-10 15:14:59.999  3163.82  3163.83  3156.02  3160.49  2135.292\n","2022-01-10 15:17:59.999  3160.51  3164.29  3159.01  3162.93  1011.598\n","2022-01-10 15:20:59.999  3163.02  3164.29  3162.41  3163.82   466.868\n"]}],"source":["itv_list = ['3T', '5T', '15T', '30T', '1H', '4H']\n","comp_df_list = [second_df, third_df, fourth_df, fifth_df, sixth_df, seventh_df]\n","offset_list = ['1h', '2min', '2min', '2min', '2min', '2min']\n","# itv_list = ['4H']\n","# comp_df_list = [seventh_df]\n","\n","slice_len = 100\n","for itv_, comp_df_, offset in zip(itv_list, comp_df_list, offset_list):\n","\n","  print(\"itv_ :\", itv_)\n","\n","  # df = h_candle_v2(df, '3T')\n","  # end_ts = \n","  h_res_df = df.resample(itv_, offset=offset).agg({\n","          'open': 'first',\n","          'high': 'max',\n","          'low': 'min',\n","          'close': 'last'\n","      })\n","\n","  #   앞은 길이가 다르고, 뒤에서부터 잘라서 비교    #\n","  #   last_row 빼고는 동일, 4h 제외\n","  # print(df.tail())\n","  print(h_res_df.tail())\n","  print(comp_df_.tail())\n","  # # print(h_res_df.head())\n","  # # print(second_df.head())\n","\n","  # print(len(h_res_df))\n","  # print(len(second_df))\n","\n","  # print(h_res_df.values[-slice_len:])\n","  # print(second_df.iloc[:, :4].values[-slice_len:])\n","  # print(np.argwhere(h_res_df.values[-slice_len:] != comp_df_.iloc[:, :4].values[-slice_len:]))\n","  # print()\n","  break"]},{"cell_type":"markdown","metadata":{"id":"jTN3M842Suzl"},"source":["## concat & save new res_df"]},{"cell_type":"markdown","metadata":{"id":"MlFkpO1MSuzl"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"U-3QkfbFSuzl"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","dict_name = \"2021-07-01 ETHUSDT_bb15m_backi2_res_dfs.pkl\"\n","\n","#     load with pickle    #\n","with open(save_path + dict_name, 'rb') as f:\n","  saved_res_df_dict = pickle.load(f)\n","\n","print(dict_name, \"loaded !\")\n","res_df_files = os.listdir(save_path)\n","res_df_files.reverse()\n","\n","print(res_df_files)\n","\n","res_df_dict = {}\n","\n","base_postfix = '_bb15m_backi2.xlsx'\n","new_postfix = '_st1h_backi2.xlsx'\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for k_i, key in enumerate(res_df_files):\n","\n","  if '2021-07-01'.upper() not in key:\n","  # if '2021-10-10'.upper() not in key:\n","    continue\n","\n","  # if \"link\".upper() not in key:\n","  # if \"btc\".upper() not in key:\n","  #   continue\n","\n","  if new_postfix not in key:\n","    continue\n","\n","  # if key in \n","\n","  if sample_cnt == max_cnt:\n","    dict_name = \"%s_res_dfs.pkl\" % key.split(\".\")[0]\n","    print(\"dict_name :\", dict_name)\n","\n","  base_df = saved_res_df_dict[key.replace(new_postfix, base_postfix)]\n","  # base_df = pd.read_excel(save_path + key.replace(new_postfix, base_postfix), index_col=0)  \n","  res_df = pd.read_excel(save_path + key, index_col=0)  \n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  droped_new_res_df.head()\n","  # break\n","\n","  # res_df_dict[key] = res_df\n","  res_df_dict[key] = droped_new_res_df\n","  print(key, \"saved to dict !\")\n","\n","  #     save with pickle    #\n","  with open(save_path + dict_name, 'wb') as f:\n","    pickle.dump(res_df_dict, f)\n","\n","  sample_cnt -= 1\n","\n","  if sample_cnt <= 0:\n","    break\n"]},{"cell_type":"markdown","metadata":{"id":"t1E_eAyPSuzm"},"source":["### new col to latest feather (1m_indi. only)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xyI5NrM7Suzm"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","cum_dir = \"cum\"\n","\n","new_dir_path = \"rsi_backi2\"\n","base_dir_path = \"bbdc3m_backi2\"\n","\n","new_date = '2021-11-17'\n","\n","\n","\n","#     load ftr list    #\n","base_save_path = os.path.join(save_path, base_dir_path, \"concat/cum\", new_date)\n","new_save_path = base_save_path.replace(base_dir_path, new_dir_path)\n","\n","#     save to (new) cum dir    #\n","#      1. if dir. not exists, makedir\n","os.makedirs(new_save_path, exist_ok=True)\n","\n","ftr_list = [s for s in os.listdir(base_save_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_save_path, key), columns=None, use_threads=True).set_index(\"index\")\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  droped_new_res_df = sync_check(base_df)\n","\n","  # new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # # new_res_df.head()\n","\n","  # intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  # droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break\n","\n","  droped_new_res_df.reset_index().to_feather(os.path.join(new_save_path, key), compression='lz4')\n","\n","  print(os.path.join(new_save_path, key), \"saved !\")\n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"markdown","metadata":{"id":"nUs4fjVHSuzl"},"source":["### feather ver. (col concat)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2001,"status":"ok","timestamp":1642739652513,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"6cu-Y82iSuzl","outputId":"273507b8-0d33-48b5-d9c5-00547688ef73"},"outputs":[{"name":"stdout","output_type":"stream","text":["['2022-01-10 ETHUSDT.ftr']\n","./candlestick_concated/res_df/st3m_backi2/concat/cum/2022-01-10/2022-01-10 ETHUSDT.ftr saved !\n"]}],"source":["new_dir_path = \"st3m_backi2\"\n","base_dir_path = \"bb1d_backi2\"\n","\n","# new_date = \"2021-11-17\"\n","new_date = \"2022-01-10\"\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","save_path = './candlestick_concated/res_df/'\n","save_path = os.path.join(save_path, new_dir_path, \"concat/cum\", new_date)   \n","# save_path = os.path.join(save_path, new_dir_path, \"concat/non_cum\", new_date)   # row col 하려면 concat 맞음, noncum 사용\n","os.makedirs(save_path, exist_ok=True)\n","\n","\n","#     load ftr list    #\n","# ftr_list = [s for s in os.listdir(os.path.join(save_path, new_dir_path)) if \"ftr\" in s]\n","\n","noncat_path = save_path.replace(\"concat/\", \"noncat/\")\n","ftr_list = [s for s in os.listdir(noncat_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","  try:\n","\n","    #       read from base postfix's directory    #\n","    base_df = pd.read_feather(os.path.join(save_path.replace(new_dir_path, base_dir_path), key), columns=None, use_threads=True).set_index(\"index\")\n","    res_df = pd.read_feather(os.path.join(noncat_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","    # print(base_df.head())\n","    # print(res_df.head())\n","    # break\n","\n","    new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","    # new_res_df.head()\n","\n","    droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","    # droped_new_res_df.head()\n","    # break\n","\n","    droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","    # res_df_dict[key] = res_df\n","    # res_df_dict[key] = droped_new_res_df\n","    print(os.path.join(save_path, key), \"saved !\")\n","  \n","  except Exception as e:\n","    print(\"error occured ! :\", e)\n","  \n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"markdown","metadata":{"id":"WVAKq3i8Suzm"},"source":["### feather ver. (row concat) , database cum 도 호환가능"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7893,"status":"ok","timestamp":1645188189702,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"XG2p9OhhSuzm","outputId":"e67874ba-0710-4f38-966f-5ea7d42403cb"},"outputs":[{"output_type":"stream","name":"stdout","text":["['2022-02-17 ETHUSDT_1m.ftr']\n","                            open     high     low    close  volume\n","index                                                             \n","2019-11-27 16:45:59.999   146.00   146.00   146.0   146.00   0.010\n","2022-02-17 10:29:59.999  3146.86  3147.22  3146.4  3146.76  26.727\n","continuity checked !\n","./candlestick_concated/database_bn/cum/2022-02-17/2022-02-17 ETHUSDT_1m.ftr saved !\n"]}],"source":["save_path = './candlestick_concated/res_df/'        # cols 추가된 cum db 에 new_row's cols 기준으로 합치는 경우\n","save_path = './candlestick_concated/database_bn/'   # ohlcv cum db 만들 경우\n","\n","base_date = '2022-01-10'\n","new_date = '2022-02-17'\n","\n","#     load ftr list    #\n","if \"database\" in save_path:\n","  base_dir_path = \"\"\n","  new_dir_path = \"\"\n","  concat_dir = \"\"\n","else:\n","  base_dir_path = \"sar_backi2\"\n","  new_dir_path = \"bb4h_backi2\"  # dir_path 가 base / new 서로 달라질 수 있어서 분할함\n","  concat_dir = \"concat\"\n","\n","base_date_path = os.path.join(save_path, base_dir_path, concat_dir, \"cum\", base_date)      # 기존 cum db 와 new_date db 를 cum 진행\n","# base_date_path = os.path.join(save_path, base_dir_path, concat_dir, \"non_cum\", base_date)    # non_cum db 와 new_date db 를 cum 진행\n","\n","# new_date_path = os.path.join(save_path, new_dir_path, concat_dir, \"cum\", new_date)      # 상황별로 직접 선택해야할 듯\n","new_date_path = os.path.join(save_path, new_dir_path, concat_dir, \"non_cum\", new_date)\n","\n","\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","save_path = new_date_path.replace(\"non_cum\", \"cum\")   # non_cum 아니여도 무관\n","os.makedirs(save_path, exist_ok=True)   # noncat / concat 두가지 경우 존재가능할 것\n","# os.makedirs(os.path.join(save_path, dir_path, \"noncat/cum\", new_date), exist_ok=True)\n","\n","\n","ftr_list = [s for s in os.listdir(new_date_path) if \"ftr\" in s]\n","exist_list = os.listdir(save_path)\n","print(ftr_list)\n","# break\n","\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:   # date rejection\n","    continue\n","  if '1m' not in key:  # itv rejection\n","    continue\n","\n","  # if key in exist_list:\n","  #   print(key, \"already exist !\")\n","  #   continue\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_date_path, key.replace(new_date, base_date)), columns=None, use_threads=True).set_index(\"index\")   # key 에 new_date 담겨있음\n","  res_df = pd.read_feather(os.path.join(new_date_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break  \n","  \n","  print(droped_new_res_df.iloc[[0, -1]])  \n","\n","  # ------------- verify df continuity directly itv by itv ------------- #\n","  true_continue = True\n","  if \"_\" in key:\n","\n","    interval = key.split(\".\")[0].split(\"_\")[-1] \n","    itv_num = to_itvnum(interval)\n","\n","    # verified_df = consecutive_df(droped_new_res_df, to_itvnum(interval))\n","    # verified_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","    # res_df_dict[key] = res_df\n","    # res_df_dict[key] = droped_new_res_df  \n","\n","    np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","    ideal_ts_gap = 60 * itv_num\n","\n","    for ts_i in range(len(np_idx_ts)):\n","      \n","      if ts_i != 0:\n","        ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","\n","        if ts_gap > ideal_ts_gap or ts_gap < ideal_ts_gap:\n","        # if ts_gap == ideal_ts_gap:\n","          print(droped_new_res_df.index[ts_i - 1])\n","          print(droped_new_res_df.index[ts_i])\n","          # print(ts_gap)\n","          print(\"------------------ unideal ts_gap ------------------\")\n","          true_continue = False\n","\n","    print(\"continuity checked !\")\n","\n","  if true_continue:\n","    droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","  print(os.path.join(save_path, key), \"saved !\")\n","  \n"]},{"cell_type":"markdown","metadata":{"id":"L7l5CTJfSuzn"},"source":["### check continuity"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nGzMGyC3Suzn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1643987442996,"user_tz":-540,"elapsed":5408,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"4fface63-62d9-4e2a-e22d-bdd26f428e0e"},"outputs":[{"output_type":"stream","name":"stdout","text":["                             open    high       low     close   volume\n","index                                                                 \n","2020-09-14 16:00:59.999    3.2002    4.91    3.2002    3.2745  11567.0\n","2022-02-04 23:57:59.999  103.7500  103.75  103.6000  103.6000   6427.0\n","[1.60009926e+09 1.60009932e+09 1.60009938e+09 1.60009944e+09\n"," 1.60009950e+09 1.60009956e+09 1.60009962e+09 1.60009968e+09\n"," 1.60009974e+09 1.60009980e+09]\n"]}],"source":["# print(droped_new_res_df.columns)\n","\n","print(droped_new_res_df.iloc[[0, -1]])\n","\n","np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","\n","print(np_idx_ts[:10])\n","for ts_i in range(len(np_idx_ts)):\n","  \n","  if ts_i != 0:\n","    ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","\n","    if ts_gap > 60 or ts_gap < 60:\n","\n","      print(\"invalid ts_gap found !\")\n","    # if ts_gap == 60:\n","      print(droped_new_res_df.index[ts_i - 1])\n","      print(droped_new_res_df.index[ts_i])\n","      # print(ts_gap)\n","      print()\n"]},{"cell_type":"markdown","metadata":{"id":"x_XGJqBi8Jex"},"source":["### check length of front missing value + middle_data non_missing validity"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":311,"status":"ok","timestamp":1641887318959,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"yRNwqVeAu8X8","outputId":"fb236bde-4527-4bc7-eac4-4bee42532c5a"},"outputs":[{"name":"stdout","output_type":"stream","text":["2.167361111111111\n","38\n"]}],"source":["#       1. new_date 의 시작 timeidx 와 base_date end timeidx 의 최소 days' gap     #\n","#       2. new_date 의 시작 부분 indi. value 는 np.nan 으로 채워질 거기 때문에 계산해야함    #\n","\n","df_count = droped_new_res_df.count()\n","len_missing = df_count.max() - df_count.min()\n","print(len_missing / 1440)\n","\n","#       3. \n","missing_sliced_df = droped_new_res_df.iloc[len_missing:]\n","df_count2 = missing_sliced_df.count()\n","# print(df_count2)\n","print((df_count2.max() - df_count2.min()))    # this value should be zero !\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"AY7E2_hTBsyM"},"outputs":[],"source":["# df_count2.index[df_count2.argmin()]\n","# missing_sliced_df.head(5)\n","\n","stay_missed = np.sum(pd.isnull(missing_sliced_df), axis=0)\n","print(stay_missed)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"p9yqewOw9g33"},"outputs":[],"source":["stay_missed_cols = stay_missed[stay_missed != 0].index\n","\n","for sm_col in stay_missed_cols:\n","  \n","  row_idx = np.argwhere(pd.isnull(missing_sliced_df[sm_col].values))\n","\n","  plt.figure(figsize=(3,3))\n","  plt.plot(row_idx)\n","  plt.ylim(0, len(missing_sliced_df))\n","  plt.title(sm_col)\n","\n","  plt.show()\n"]},{"cell_type":"markdown","source":["## legacy"],"metadata":{"id":"MSUY4nnku3s9"}},{"cell_type":"markdown","source":["### mv files"],"metadata":{"id":"epgS5Dksu-HX"}},{"cell_type":"code","source":["df_path = './candlestick_concated/survey_df_v2'\n","files_ = os.listdir(df_path)"],"metadata":{"id":"aJcVpEdrslA5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dirs = [file_ for file_ in files_ if not file_.endswith('.ftr')]\n","files = [file_ for file_ in files_ if file_.endswith('.ftr')]"],"metadata":{"id":"cEKyEYkotFDy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dirs"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IgM79tcxtPVZ","executionInfo":{"status":"ok","timestamp":1644111921194,"user_tz":-540,"elapsed":4,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"84305b35-eb52-49fc-d5fd-fdbc64cc8679"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['2022-01-10 ETHUSDT', '2022-01-10 ETHUSDT_all', '2022-02-04 SOLUSDT']"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["def move_fn(dir_, file_):\n","  src_path = os.path.join(df_path, file_)\n","  dst_path = os.path.join(df_path, dir_, file_)\n","  shutil.move(src_path, dst_path)\n","  print(\"moved to {}\".format(dst_path))\n","\n","_ = [move_fn('2022-01-10 ETHUSDT_all', file_) for file_ in files if 'eth'.upper() in file_]\n","# sols\n"],"metadata":{"id":"M767iRtwtRQP"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Ci_jUnNTZbm9"},"source":["### load data (old)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":22503,"status":"ok","timestamp":1638246127510,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"_bXyS2yrZYC6","outputId":"b24a8a66-48b1-42b5-aa79-63f5a8542bac"},"outputs":[{"name":"stdout","output_type":"stream","text":["['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr']\n","['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 LTCUSDT.ftr']\n","['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 ETHUSDT.ftr']\n","['2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr']\n","['2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-08-31 SUSHIUSDT.xlsx', '2021-08-31 CVCUSDT.xlsx', '2021-08-31 BTSUSDT.xlsx', '2021-08-31 HOTUSDT.xlsx', '2021-08-31 ZRXUSDT.xlsx', '2021-08-31 QTUMUSDT.xlsx', '2021-08-31 IOTAUSDT.xlsx', '2021-08-31 BTCBUSD.xlsx', '2021-08-31 WAVESUSDT.xlsx', '2021-08-31 ADAUSDT.xlsx', '2021-08-31 LITUSDT.xlsx', '2021-08-31 XTZUSDT.xlsx', '2021-08-31 BNBUSDT.xlsx', '2021-08-31 AKROUSDT.xlsx', '2021-08-31 HNTUSDT.xlsx', '2021-08-31 ETCUSDT.xlsx', '2021-08-31 XMRUSDT.xlsx', '2021-08-31 YFIUSDT.xlsx', '2021-08-31 ETHUSDT.xlsx', '2021-08-31 ALICEUSDT.xlsx', '2021-08-31 ALPHAUSDT.xlsx', '2021-08-31 SFPUSDT.xlsx', '2021-08-31 REEFUSDT.xlsx', '2021-08-31 BATUSDT.xlsx', '2021-08-31 DOGEUSDT.xlsx', '2021-08-31 TRXUSDT.xlsx', '2021-08-31 RLCUSDT.xlsx', '2021-08-31 BTCSTUSDT.xlsx', '2021-08-31 STORJUSDT.xlsx', '2021-08-31 SNXUSDT.xlsx', '2021-08-31 XLMUSDT.xlsx', '2021-08-31 NEOUSDT.xlsx', '2021-08-31 UNFIUSDT.xlsx', '2021-08-31 SANDUSDT.xlsx', '2021-08-31 DASHUSDT.xlsx', '2021-08-31 KAVAUSDT.xlsx', '2021-08-31 RUNEUSDT.xlsx', '2021-08-31 CTKUSDT.xlsx', '2021-08-31 LINKUSDT.xlsx', '2021-08-31 CELRUSDT.xlsx', '2021-08-31 RSRUSDT.xlsx', '2021-08-31 DGBUSDT.xlsx', '2021-08-31 SKLUSDT.xlsx', '2021-08-31 RENUSDT.xlsx', '2021-08-31 TOMOUSDT.xlsx', '2021-08-31 MTLUSDT.xlsx', '2021-08-31 LTCUSDT.xlsx', '2021-08-31 DODOUSDT.xlsx', '2021-08-31 EGLDUSDT.xlsx', '2021-08-31 KSMUSDT.xlsx', '2021-08-31 ONTUSDT.xlsx', '2021-08-31 VETUSDT.xlsx', '2021-08-31 TRBUSDT.xlsx', '2021-08-31 MANAUSDT.xlsx', '2021-08-31 COTIUSDT.xlsx', '2021-08-31 CHRUSDT.xlsx', '2021-08-31 ETHUSDT_210924.xlsx', '2021-08-31 BAKEUSDT.xlsx', '2021-08-31 GRTUSDT.xlsx', '2021-08-31 FLMUSDT.xlsx', '2021-08-31 EOSUSDT.xlsx', '2021-08-31 OGNUSDT.xlsx', '2021-08-31 SCUSDT.xlsx', '2021-08-31 BALUSDT.xlsx', '2021-08-31 STMXUSDT.xlsx', '2021-08-31 BTTUSDT.xlsx', '2021-08-31 LUNAUSDT.xlsx', '2021-08-31 DENTUSDT.xlsx', '2021-08-31 KNCUSDT.xlsx', '2021-08-31 SRMUSDT.xlsx', '2021-08-31 ENJUSDT.xlsx', '2021-08-31 ZENUSDT.xlsx', '2021-08-31 ATOMUSDT.xlsx', '2021-08-31 NEARUSDT.xlsx', '2021-08-31 BCHUSDT.xlsx', '2021-08-31 IOSTUSDT.xlsx', '2021-08-31 HBARUSDT.xlsx', '2021-08-31 ZECUSDT.xlsx', '2021-08-31 1000SHIBUSDT.xlsx', '2021-08-31 TLMUSDT.xlsx', '2021-08-31 BZRXUSDT.xlsx', '2021-08-31 ETHBUSD.xlsx', '2021-08-31 AAVEUSDT.xlsx', '2021-08-31 GTCUSDT.xlsx', '2021-08-31 ALGOUSDT.xlsx', '2021-08-31 ICPUSDT.xlsx', '2021-08-31 BTCUSDT_210924.xlsx', '2021-08-31 LRCUSDT.xlsx', '2021-08-31 AVAXUSDT.xlsx', '2021-08-31 MATICUSDT.xlsx', '2021-08-31 1INCHUSDT.xlsx', '2021-08-31 MKRUSDT.xlsx', '2021-08-31 THETAUSDT.xlsx', '2021-08-31 UNIUSDT.xlsx', '2021-08-31 LINAUSDT.xlsx', '2021-08-31 RVNUSDT.xlsx', '2021-08-31 FILUSDT.xlsx', '2021-08-31 NKNUSDT.xlsx', '2021-08-31 DEFIUSDT.xlsx', '2021-08-31 COMPUSDT.xlsx', '2021-08-31 BTCDOMUSDT.xlsx', '2021-08-31 SOLUSDT.xlsx', '2021-08-31 BTCUSDT.xlsx', '2021-08-31 OMGUSDT.xlsx', '2021-08-31 ICXUSDT.xlsx', '2021-08-31 BLZUSDT.xlsx', '2021-08-31 FTMUSDT.xlsx', '2021-08-31 YFIIUSDT.xlsx', '2021-08-31 KEEPUSDT.xlsx', '2021-08-31 BANDUSDT.xlsx', '2021-08-31 XRPUSDT.xlsx', '2021-08-31 SXPUSDT.xlsx', '2021-08-31 CRVUSDT.xlsx', '2021-08-31 BELUSDT.xlsx', '2021-08-31 DOTUSDT.xlsx', '2021-08-31 XEMUSDT.xlsx', '2021-08-31 ONEUSDT.xlsx', '2021-08-31 ZILUSDT.xlsx', '2021-08-31 AXSUSDT.xlsx', '2021-08-31 OCEANUSDT.xlsx', '2021-08-31 CHZUSDT.xlsx', '2021-08-31 ANKRUSDT.xlsx', '2021-08-31 SUSHIUSDT_res_dfs.pkl', '2021-07-01 ADAUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr']\n","['2021-07-01 BTCUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr']\n","['2021-02-07 BTC.xlsx', '2021-02-07 ETH.xlsx', '2021-02-11 BCHUSDT.xlsx', '2021-02-11 XRPUSDT.xlsx', '2021-02-11 EOSUSDT.xlsx', '2021-02-11 LTCUSDT.xlsx', '2021-02-11 ETCUSDT.xlsx', '2021-02-11 LINKUSDT.xlsx', '2021-02-11 XLMUSDT.xlsx', '2021-02-11 ADAUSDT.xlsx', '2021-02-11 XMRUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr']\n","['2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx']\n"]}],"source":["interval = '1m'\n","date_path = './candlestick_concated/%s/quant_v2/' % interval\n","file_list = os.listdir(date_path)\n","print((file_list))\n","\n","interval2 = '3m'\n","date_path2 = './candlestick_concated/%s/quant_v2/' % interval2\n","file_list2 = os.listdir(date_path2)\n","print((file_list2))\n","\n","interval3 = '5m'\n","date_path3 = './candlestick_concated/%s/quant_v2/' % interval3\n","file_list3 = os.listdir(date_path3)\n","print((file_list3))\n","\n","interval4 = '15m'\n","date_path4 = './candlestick_concated/%s/quant_v2/' % interval4\n","file_list4 = os.listdir(date_path4)\n","print((file_list4))\n","\n","interval5 = '30m'\n","date_path5 = './candlestick_concated/%s/quant_v2/' % interval5\n","file_list5 = os.listdir(date_path5)\n","print((file_list5))\n","\n","interval6 = '1h'\n","date_path6 = './candlestick_concated/%s/quant_v2/' % interval6\n","file_list6 = os.listdir(date_path6)\n","print((file_list6))\n","\n","interval7 = '4h'\n","date_path7 = './candlestick_concated/%s/quant_v2/' % interval7\n","file_list7 = os.listdir(date_path7)\n","print((file_list7))\n","\n","interval8 = '1d'\n","date_path8 = './candlestick_concated/%s/quant_v2/' % interval8\n","file_list8 = os.listdir(date_path8)\n","print((file_list8))"]},{"cell_type":"markdown","metadata":{"id":"M8-EChy0VsDr"},"source":["### cudf"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":414,"status":"ok","timestamp":1638754008241,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"b09qAb1sVtRP","outputId":"3a824202-064a-4544-b791-ffc777bb3f9c"},"outputs":[{"name":"stdout","output_type":"stream","text":["usage: conda [-h] [-V] command ...\n","conda: error: unrecognized arguments: -t=/content/notebooks\n"]}],"source":["# !conda install -c rapidsai-nightly -c nvidia -c numba -c conda-forge \\\n","#     cudf python=3.7 cudatoolkit=11.1 -t=$nb_path"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":413,"status":"ok","timestamp":1638754715310,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"Jnz6i7ZqRnb0","outputId":"207bc57b-a17a-4f67-fb26-24e46e2c6e26"},"outputs":[{"name":"stdout","output_type":"stream","text":["***********************************************************************\n","Woo! Your instance has the right kind of GPU, a Tesla P100-PCIE-16GB!\n","***********************************************************************\n","\n"]}],"source":["# !git clone https://github.com/rapidsai/rapidsai-csp-utils.git\n","!python rapidsai-csp-utils/colab/env-check.py"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4sKA_9Dbg4s2"},"outputs":[],"source":["# This will update the Colab environment and restart the kernel.  Don't run the next cell until you see the session crash.\n","!bash rapidsai-csp-utils/colab/update_gcc.sh\n","import os\n","os._exit(00)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"d1C4pNiBhYHX"},"outputs":[],"source":["# This will install CondaColab.  This will restart your kernel one last time.  Run this cell by itself and only run the next cell once you see the session crash.\n","import condacolab\n","condacolab.install()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":414,"status":"ok","timestamp":1638754863073,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"iGx3ACTvZqck","outputId":"e8379cc4-c325-4fe0-ac46-5fbbd7d38829"},"outputs":[{"name":"stdout","output_type":"stream","text":["✨🍰✨ Everything looks OK!\n"]}],"source":["# you can now run the rest of the cells as normal\n","import condacolab\n","condacolab.check()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oR8s7U8c7C28","outputId":"22be2731-fae1-45fc-f310-e48f60774bb2"},"outputs":[{"name":"stdout","output_type":"stream","text":["Installing RAPIDS Stable 21.10\n","Starting the RAPIDS install on Colab.  This will take about 15 minutes.\n","Collecting package metadata (current_repodata.json): ...working... done\n","Solving environment: ...working... WARNING conda.core.solve:_add_specs(611): pinned spec cudatoolkit=11.1 conflicts with explicit specs.  Overriding pinned spec.\n","failed with initial frozen solve. Retrying with flexible solve.\n","Solving environment: ...working... WARNING conda.core.solve:_add_specs(611): pinned spec cudatoolkit=11.1 conflicts with explicit specs.  Overriding pinned spec.\n","failed with repodata from current_repodata.json, will retry with next repodata source.\n","Collecting package metadata (repodata.json): ...working... done\n"]}],"source":["# Installing RAPIDS is now 'python rapidsai-csp-utils/colab/install_rapids.py <release> <packages>'\n","# The <release> options are 'stable' and 'nightly'.  Leaving it blank or adding any other words will default to stable.\n","# The <packages> option are default blank or 'core'.  By default, we install RAPIDSAI and BlazingSQL.  The 'core' option will install only RAPIDSAI and not include BlazingSQL, \n","!python rapidsai-csp-utils/colab/install_rapids.py stable\n","import os\n","os.environ['NUMBAPRO_NVVM'] = '/usr/local/cuda/nvvm/lib64/libnvvm.so'\n","os.environ['NUMBAPRO_LIBDEVICE'] = '/usr/local/cuda/nvvm/libdevice/'\n","os.environ['CONDA_PREFIX'] = '/usr/local'"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kWsxi4ZpKtGt"},"outputs":[],"source":["import shutil\n","import sys\n","\n","colab_env = \"/usr/lib\"\n","\n","rapids_path = os.path.join(current_path, \"rapidsai-csp-utils/lib\")\n","rapids_libs = os.listdir(rapids_path)\n","print(rapids_libs)\n","# break\n","\n","for lib_ in rapids_libs:\n","  try:\n","    shutil.copy(os.path.join(rapids_path, lib_), os.path.join(colab_env, lib_))\n","    sys.path.append(os.path.join(colab_env, lib_))\n","    print(\"copied to\" + os.path.join(colab_env, lib_))\n","  except Exception as e:\n","    print(e)"]},{"cell_type":"markdown","metadata":{"id":"Iy76iO7gztne"},"source":["### move legacy files"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hMRht32Czwry"},"outputs":[],"source":["# print()\n","cur_dir_list = os.listdir('.')\n","for f in cur_dir_list:\n","  if 'legacy' in f :\n","    # print(f)\n","    if os.path.isdir(current_path + f,):\n","      continue\n","\n","    shutil.move(current_path + f, current_path + 'legacy/' + f)\n","    print(\"moved to\" + current_path + 'legacy/' +  f)"]},{"cell_type":"markdown","metadata":{"id":"5duWn8t4BRyv"},"source":["# IDE platform\n"]},{"cell_type":"markdown","metadata":{"id":"6HOjnZjSgzk1"},"source":["## load ftr_list"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4464,"status":"ok","timestamp":1648859576879,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"7FPBG5Qqg2jB","outputId":"4c283edb-c9fe-487e-e77a-c6a4daf3dc8d"},"outputs":[{"output_type":"stream","name":"stdout","text":["['2022-02-17 ETHUSDT.ftr']\n","2022-02-17 ETHUSDT.ftr loaded !\n","load res_df_ elapsed time : 3.2503600120544434\n"]}],"source":["save_path = './candlestick_concated/res_df/'\n","\n","dir_path = \"bb4h_backi2\"\n","dir_path = \"bb1d_backi2\"\n","date = \"2022-01-10\"\n","date = \"2022-02-17\"\n","\n","ftr_path = os.path.join(save_path, dir_path, \"concat/cum\", date)\n","\n","# ------ load ftr list ------ #\n","ftr_list = [s for s in os.listdir(ftr_path) if \"ftr\" in s if date in s]\n","# ftr_list = [s for s in os.listdir(os.path.join(save_path, dir_path)) if \"ftr\" in s if date in s]\n","print(ftr_list)\n","\n","start_0 = time.time()\n","key = ftr_list[0]  # tempoaray use single key\n","res_df_ = pd.read_feather(os.path.join(ftr_path, key), columns=None, use_threads=True).set_index(\"index\")\n","# print(res_df_.head())\n","print(key, \"loaded !\")\n","print(\"load res_df_ elapsed time :\", time.time() - start_0)"]},{"cell_type":"code","source":["res_df_.dtypes"],"metadata":{"id":"RQH_l4opEh_O"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### edit cols"],"metadata":{"id":"x2yj2SwAXDLp"}},{"cell_type":"code","source":["col_list = list(res_df_.columns)\n","# # [col_ for col_ in col_list if 'score' in col_]\n","\n","# ------ drop ------ #\n","# res_df_.drop([col_ for col_ in col_list if '_T20' in col_], inplace=True, axis=1)\n","# res_df_.drop([col_ for col_ in col_list if '_T40' in col_], inplace=True, axis=1)\n","res_df_.drop([col_ for col_ in col_list if 'base_T' in col_], inplace=True, axis=1)\n","\n","# ------ replace ------ #\n","# for c_i, col_ in enumerate(col_list):\n","#   # if 'eTa_5T' in col_:\n","#   # if col_[-1] in ['m', 'h', 'd', 'H'] and '_' in col_:eTa_5T\n","#   # if col_[0] in ['h'] and '_' in col_:\n","#   if 'bir_' in col_:\n","\n","#     col_list[c_i] = col_.replace('bir_', 'ir_')\n","#     # col_list[c_i] = col_.replace('m', 'T').replace('h', 'H').replace('1T', 'T')\n","#     # col_list[c_i] = col_.replace('1d', 'D')\n","#     # col_list[c_i] = col_.replace('eTa_5T', 'ema_5T')\n","#     # col_list[c_i] = col_list[c_i][1:]\n","#     # print(col_list[c_i][0])\n","# res_df_.columns = col_list\n","# col_list[-2:] = ['resi_T', 'sup_T']"],"metadata":{"id":"x9wkWw15XCAm"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### lab"],"metadata":{"id":"14chOHeXh6JD"}},{"cell_type":"markdown","source":["#### imb."],"metadata":{"id":"c2729DJ6h720"}},{"cell_type":"code","source":["t_df = res_df_.iloc[-120:-100]\n","a_data = t_df.to_numpy()"],"metadata":{"id":"Rucj-iepiR_-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(15, 9))\n","nrows, ncols = 1, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        # height_ratios=[3, 1]\n","                        )\n","\n","ax = fig.add_subplot(gs[0])\n","\n","# ------ candles ------ #\n","candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","_ = [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]"],"metadata":{"id":"ktm1aB-Bh7GH","colab":{"base_uri":"https://localhost:8080/","height":537},"executionInfo":{"status":"ok","timestamp":1648801482583,"user_tz":-540,"elapsed":5,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"6aba1d34-3575-486a-9c29-941dc18a00fc"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1080x648 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["def imb_ratio_v4(df, itv):\n","\n","  itv_num = to_itvnum(itv)\n","\n","  close = df['close_{}'.format(itv)].to_numpy()\n","  open = df['open_{}'.format(itv)].to_numpy()\n","\n","  b1_close = df['close_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_open = df['open_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_high = df['high_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_low = df['low_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","  body_range = abs(close - open)\n","  b1_body_range = abs(b1_close - b1_open)\n","\n","  df['body_rel_ratio_{}'.format(itv)] = body_range / b1_body_range\n","\n","  short_body_range = np.where(close <= b1_low, body_range, b1_body_range)\n","  long_body_range = np.where(close >= b1_high, body_range, b1_body_range)\n","\n","  # 추후에 통계 측정해야함 -> bir 에 따른 개별 trader 의 epout / tpep 이라던가 => short 에 양봉은 취급안함 (why use np.nan)\n","  df['short_ir_{}'.format(itv)] = np.where(close < open, (b1_low - close) / short_body_range, np.nan) # close < open & close < b1_low\n","  df['long_ir_{}'.format(itv)] = np.where(close > open, (close - b1_high) / long_body_range, np.nan) # close > open & close > b1_high\n","\n","  return"],"metadata":{"id":"jMQBhQ1Ljt5Y"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def imb_ratio_v3(df, itv):\n","\n","  itv_num = to_itvnum(itv)\n","\n","  # high = df['high_{}'.format(itv)].to_numpy()\n","  # low = df['low_{}'.format(itv)].to_numpy()\n","  # candle_range = high - low\n","\n","  close = df['close_{}'.format(itv)].to_numpy()\n","  open = df['open_{}'.format(itv)].to_numpy()\n","\n","  b1_close = df['close_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_open = df['open_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_high = df['high_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_low = df['low_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","  body_range = abs(close - open)\n","  b1_body_range = abs(b1_close - b1_open)\n","\n","  df['body_rel_ratio_{}'.format(itv)] = body_range / b1_body_range\n","\n","  short_body_ratio = np.where(close <= b1_low, body_range, b1_body_range)\n","  long_body_range = np.where(close >= b1_high, body_range, b1_body_range)\n","\n","  # 추후에 통계 측정해야함 -> bir 에 따른 개별 trader 의 epout / tpep 이라던가 => short 에 양봉은 취급안함 (why use np.nan)\n","  df['short_ir_{}'.format(itv)] = np.where(close < open, (b1_low - close) / body_range, np.nan) # close < open & close < b1_low\n","  df['long_ir_{}'.format(itv)] = np.where(close > open, (close - b1_high) / body_range, np.nan) # close > open & close > b1_high\n","\n","  return"],"metadata":{"id":"I1Vq_BiKpY3P"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["imb_ratio(t_df, \"5T\")\n","# imb_ratio_v3(t_df, \"5T\")\n","# imb_ratio_v4(t_df, \"5T\")\n","\n","t_df.tail(100).short_ir_5T  # .461871\n","# t_df.iloc[:, -10:]\n","# t_df.dtypes"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mtnMUkhwkdrE","executionInfo":{"status":"ok","timestamp":1648807273349,"user_tz":-540,"elapsed":372,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"b7cff2cd-63d3-4109-8753-d2192079e565"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["index\n","2022-02-17 08:30:59.999         NaN\n","2022-02-17 08:31:59.999         NaN\n","2022-02-17 08:32:59.999         NaN\n","2022-02-17 08:33:59.999         NaN\n","2022-02-17 08:34:59.999         NaN\n","2022-02-17 08:35:59.999   -0.022654\n","2022-02-17 08:36:59.999   -0.022654\n","2022-02-17 08:37:59.999   -0.022654\n","2022-02-17 08:38:59.999   -0.022654\n","2022-02-17 08:39:59.999   -0.022654\n","2022-02-17 08:40:59.999    0.559585\n","2022-02-17 08:41:59.999    0.559585\n","2022-02-17 08:42:59.999    0.559585\n","2022-02-17 08:43:59.999    0.559585\n","2022-02-17 08:44:59.999    0.559585\n","2022-02-17 08:45:59.999    0.429719\n","2022-02-17 08:46:59.999    0.429719\n","2022-02-17 08:47:59.999    0.429719\n","2022-02-17 08:48:59.999    0.429719\n","2022-02-17 08:49:59.999    0.429719\n","Name: short_ir_5T, dtype: float64"]},"metadata":{},"execution_count":116}]},{"cell_type":"code","source":["# imb_ratio(t_df, \"5T\")\n","# imb_ratio_v3(t_df, \"5T\")\n","imb_ratio_v4(t_df, \"5T\")\n","\n","t_df.tail(100).short_ir_5T  # .461871\n","# t_df.iloc[:, -10:]\n","# t_df.dtypes"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RVUs1YE_pgBI","executionInfo":{"status":"ok","timestamp":1648807284664,"user_tz":-540,"elapsed":375,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"0ad635a5-e0b9-40c9-c28f-6ebae5494c7b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["index\n","2022-02-17 08:30:59.999         NaN\n","2022-02-17 08:31:59.999         NaN\n","2022-02-17 08:32:59.999         NaN\n","2022-02-17 08:33:59.999         NaN\n","2022-02-17 08:34:59.999         NaN\n","2022-02-17 08:35:59.999   -0.030303\n","2022-02-17 08:36:59.999   -0.030303\n","2022-02-17 08:37:59.999   -0.030303\n","2022-02-17 08:38:59.999   -0.030303\n","2022-02-17 08:39:59.999   -0.030303\n","2022-02-17 08:40:59.999    0.621583\n","2022-02-17 08:41:59.999    0.621583\n","2022-02-17 08:42:59.999    0.621583\n","2022-02-17 08:43:59.999    0.621583\n","2022-02-17 08:44:59.999    0.621583\n","2022-02-17 08:45:59.999    1.000000\n","2022-02-17 08:46:59.999    1.000000\n","2022-02-17 08:47:59.999    1.000000\n","2022-02-17 08:48:59.999    1.000000\n","2022-02-17 08:49:59.999    1.000000\n","Name: short_ir_5T, dtype: float64"]},"metadata":{},"execution_count":117}]},{"cell_type":"code","source":["# ------ rtc 1, 0 개념 ------ #\n","# short_rtc_1 = close\n","# short_rtc_0 = b1_low\n","\n","# long_rtc_1 = close\n","# long_rtc_0 = b1_high\n","\n","# rtc 로 활용하려면, col 로 추가해야할 것 -> 추가할만한 col_name 은 아님\n","# 1. h_candle 인 경우 -> ?\n","#   a. h_candle_v3 먹이고, open_{}.shift(num_itv).to_numpy() 진행 -> ex. res_df['close_{}'.format(hc_itv)].shift(itv_num).to_numpy() "],"metadata":{"id":"bieHiKjBkuFL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 1. 현재 종가 - 이전 고가 = imb_range (long)\n","long_imb_range = t_df.close - t_df.high.shift(1)\n","# 2. 이전 저가 - 현재 종가 - imb_range (short)\n","short_imb_range = t_df.low.shift(1) - t_df.close"],"metadata":{"id":"3X6bMXJIjPYy"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### zigzag"],"metadata":{"id":"LyGnAMvLYvOZ"}},{"cell_type":"code","source":["def sd_dc(df, period1, period2, ltf_df=None):\n","    assert period1 <= period2, \"assert period1 <= period2\"\n","    donchian_channel_v2(df, period1)\n","    donchian_channel_v2(df, period2)\n","    itv = pd.infer_freq(df.index)\n","    if itv != 'T':\n","      assert ltf_df is not None, \"assert ltf_df is not None\"\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, df, [-4, -3, -2, -1]), how='inner')\n","    else:\n","      ltf_df = df\n","\n","    ltf_df['short_base_{}'.format(itv)] = (ltf_df['dc_lower_{}{}'.format(itv, period1)].to_numpy() + ltf_df['dc_upper_{}{}'.format(itv, period2)].to_numpy()) / 2\n","    ltf_df['long_base_{}'.format(itv)] = (ltf_df['dc_upper_{}{}'.format(itv, period1)].to_numpy() + ltf_df['dc_lower_{}{}'.format(itv, period2)].to_numpy()) / 2\n","\n","    return ltf_df\n","\n","\n","def donchian_channel_v2(df, period):\n","  itv = pd.infer_freq(df.index)\n","  upper_name = 'dc_upper_{}{}'.format(itv, period)\n","  lower_name = 'dc_lower_{}{}'.format(itv, period)\n","\n","  df.drop([upper_name, lower_name], inplace=True, axis=1, errors='ignore')\n","\n","  df[upper_name] = df['high'].rolling(period).max()\n","  df[lower_name] = df['low'].rolling(period).min()\n","\n","  return\n","\n","def wave_range(df, period1, period2, ltf_df=None, touch_lbperiod=50):\n","    assert period1 <= period2, \"assert period1 <= period2\"\n","    donchian_channel_v2(df, period1)\n","    donchian_channel_v2(df, period2)\n","    itv = pd.infer_freq(df.index)\n","    if itv != 'T':\n","      assert ltf_df is not None, \"assert ltf_df is not None\"\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, df, [-4, -3, -2, -1]), how='inner')\n","    else:\n","      ltf_df = df\n","\n","    short_tp_1_, short_tp_0_ = ltf_df['dc_lower_{}{}'.format(itv, period1)].to_numpy(), ltf_df['dc_upper_{}{}'.format(itv, period2)].to_numpy()\n","    long_tp_1_, long_tp_0_ = ltf_df['dc_upper_{}{}'.format(itv, period1)].to_numpy(), ltf_df['dc_lower_{}{}'.format(itv, period2)].to_numpy()\n","\n","    ltf_df['short_base_{}'.format(itv)] = (short_tp_1_ + short_tp_0_) / 2  # dc_base touch 사용하면 point 를 좀 더 일찍 잡을 수 있음\n","    ltf_df['long_base_{}'.format(itv)] = (long_tp_1_ + long_tp_0_) / 2\n","    \n","    short_base = ltf_df['short_base_{}'.format(itv)].to_numpy()\n","    long_base = ltf_df['long_base_{}'.format(itv)].to_numpy()\n","\n","    len_df = len(ltf_df)   \n","    short_open_res = np.ones(len_df)\n","    long_open_res = np.ones(len_df)\n","    \n","    data_cols = ['open', 'high', 'low']\n","    open, high, low = [ltf_df[col_].to_numpy() for col_ in data_cols]\n","\n","    short_a_touch_idx = pd.Series(np.where(high >= short_tp_0_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()  # min -> max\n","    short_b_touch_idx = pd.Series(np.where(low <= short_tp_1_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨    \n","    short_open_res *= (high >= short_base) & (short_base >= open) & (short_a_touch_idx < short_b_touch_idx)\n","\n","    ltf_df['short_wave_1_{}'.format(itv)] = pd.Series(get_line(short_b_touch_idx, short_tp_1_)).ffill().to_numpy()   # ffill() 다음 to_numpy() 안하면 None 값\n","    ltf_df['short_wave_0_{}'.format(itv)] = pd.Series(get_line(short_a_touch_idx, short_tp_0_)).ffill().to_numpy()\n","    ltf_df['short_wave_point_{}'.format(itv)] = short_open_res.astype(bool)\n","\n","    long_a_touch_idx = pd.Series(np.where(low <= long_tp_0_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()       \n","    long_b_touch_idx = pd.Series(np.where(high >= long_tp_1_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()    \n","    long_open_res *= (open >= long_base) & (long_base >= low) & (long_a_touch_idx < long_b_touch_idx)\n","\n","    ltf_df['long_wave_1_{}'.format(itv)] = pd.Series(get_line(long_b_touch_idx, long_tp_1_)).ffill().to_numpy()\n","    ltf_df['long_wave_0_{}'.format(itv)] = pd.Series(get_line(long_a_touch_idx, long_tp_0_)).ffill().to_numpy()\n","    ltf_df['long_wave_point_{}'.format(itv)] = long_open_res.astype(bool)\n","\n","    return ltf_df\n","\n","def wave_range_v2(df, period1, ltf_df=None, touch_lbperiod=50):  # v2 for period1 only\n","\n","  donchian_channel_v2(df, period1) \n","\n","  itv = pd.infer_freq(df.index)\n","  if itv != 'T':\n","    assert ltf_df is not None, \"assert ltf_df is not None\"\n","    try:\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, df, [-2, -1]), how='inner')\n","    except Exception as e:\n","      print(\"error in wave_range_v2's join() :\", e)\n","  else:\n","    ltf_df = df    \n","\n","  dc_lower_, dc_upper_ = ltf_df['dc_lower_{}{}'.format(itv, period1)].to_numpy(), ltf_df['dc_upper_{}{}'.format(itv, period1)].to_numpy()\n","\n","  # print(ltf_df.tail().iloc[:, -4:])\n","\n","  ltf_df['wave_base_{}'.format(itv)] = (dc_lower_ + dc_upper_) / 2  # dc_base touch 사용하면 point 를 좀 더 일찍 잡을 수 있음\n","  \n","  wave_base_ = ltf_df['wave_base_{}'.format(itv)].to_numpy()\n","  # short_base_ = ltf_df['short_base__{}'.format(itv)].to_numpy()\n","  # long_base_ = ltf_df['long_base__{}'.format(itv)].to_numpy()\n","\n","  len_df = len(ltf_df)   \n","  short_open_res = np.ones(len_df)\n","  long_open_res = np.ones(len_df)\n","  \n","  data_cols = ['open', 'high', 'low']\n","  open, high, low = [ltf_df[col_].to_numpy() for col_ in data_cols]\n","\n","  dc_upper_touch_idx = pd.Series(np.where(high >= dc_upper_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()  # min -> max\n","  dc_lower_touch_idx = pd.Series(np.where(low <= dc_lower_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨    \n","  \n","  ltf_df['wave_upper_{}'.format(itv)] = pd.Series(get_line(dc_upper_touch_idx, dc_upper_)).ffill().to_numpy() \n","  ltf_df['wave_lower_{}'.format(itv)] = pd.Series(get_line(dc_lower_touch_idx, dc_lower_)).ffill().to_numpy() \n","\n","  short_open_res *= (high >= wave_base_) & (wave_base_ >= open) & (dc_upper_touch_idx < dc_lower_touch_idx)\n","  ltf_df['short_wave_point_{}'.format(itv)] = short_open_res.astype(bool)\n","\n","  long_open_res *= (open >= wave_base_) & (wave_base_ >= low) & (dc_lower_touch_idx < dc_upper_touch_idx)\n","  ltf_df['long_wave_point_{}'.format(itv)] = long_open_res.astype(bool)\n","\n","  return ltf_df\n","\n","def wave_range_v3(df, period1, ltf_df=None, touch_lbperiod=50):  # v2 for period1 only\n","\n","  itv = pd.infer_freq(df.index)\n","\n","  donchian_channel_v2(df, period1) \n","  dc_lower_, dc_upper_ = df['dc_lower_{}{}'.format(itv, period1)].to_numpy(), df['dc_upper_{}{}'.format(itv, period1)].to_numpy()\n","\n","  df['wave_base_{}'.format(itv)] = (dc_lower_ + dc_upper_) / 2  # dc_base touch 사용하면 point 를 좀 더 일찍 잡을 수 있음  \n","  wave_base_ = df['wave_base_{}'.format(itv)].to_numpy()\n","  # short_base_ = df['short_base__{}'.format(itv)].to_numpy()\n","  # long_base_ = df['long_base__{}'.format(itv)].to_numpy()\n","\n","  len_df = len(df)   \n","  short_open_res = np.ones(len_df)\n","  long_open_res = np.ones(len_df)\n","  \n","  data_cols = ['open', 'high', 'low']\n","  open, high, low = [df[col_].to_numpy() for col_ in data_cols]\n","\n","  dc_upper_touch_idx = pd.Series(np.where(high >= dc_upper_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()  # min -> max\n","  dc_lower_touch_idx = pd.Series(np.where(low <= dc_lower_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨    \n","  \n","  df['wave_upper_{}'.format(itv)] = pd.Series(get_line(dc_upper_touch_idx, dc_upper_)).ffill().to_numpy() \n","  df['wave_lower_{}'.format(itv)] = pd.Series(get_line(dc_lower_touch_idx, dc_lower_)).ffill().to_numpy() \n","\n","  short_open_res *= (high >= wave_base_) & (wave_base_ >= open) & (dc_upper_touch_idx < dc_lower_touch_idx)\n","  df['short_wave_point_{}'.format(itv)] = short_open_res\n","\n","  long_open_res *= (open >= wave_base_) & (wave_base_ >= low) & (dc_lower_touch_idx < dc_upper_touch_idx)\n","  df['long_wave_point_{}'.format(itv)] = long_open_res\n","\n","  if itv != 'T':\n","    assert ltf_df is not None, \"assert ltf_df is not None\"\n","\n","    join_cols = np.arange(-7, 0 ,1).astype(int)\n","    ltf_df.drop(df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","    try:\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, df, join_cols), how='inner')\n","      # ltf_df = ltf_df.merge(to_lower_tf_v2(ltf_df, df, [-7, -6, -5, -4, -3, -2, -1]), how='inner')\n","    except Exception as e:\n","      print(\"error in wave_range_v3's join() :\", e)\n","  else:\n","    ltf_df = df    \n","\n","  return ltf_df"],"metadata":{"id":"7_FX0rIP_vyE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["res = wave_range_v3(to_htf(res_df, '5T', '1h'), 12, ltf_df=res_df, touch_lbperiod=50)\n","# res = wave_range_v3(res_df, 12, ltf_df=None, touch_lbperiod=50)"],"metadata":{"id":"-AmhhMxC-ltr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(res.tail(100).iloc[:, -7:])"],"metadata":{"id":"gGDf6iBxFP_s"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["res.dtypes\n","# type(np.arange(-7,0,1).astype(int)[0])"],"metadata":{"id":"ZoS_76wwAXhj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def to_lower_tf_v2(ltf_df, htf_df, column, backing_i=1, show_info=False):\n","    #       Todo        #\n","    #        1. 현재 downsampled df 만 허용, direct_df 사용시 issue 발생 가능할 것\n","    assert type(column[0]) in [int, np.int64], \"column value should be integer\"\n","    # if not replace_last_idx:\n","    #     assert datetime.timestamp(htf_df.index[-1]) >= datetime.timestamp(\n","    #         ltf_df.index[-1]), \"htf_lastidx should >= ltf_lastidx\"  # data sync confirmation\n","    #   htf idx ts 가 ltf 보다 작을 경우, intersec_idx 를 구할 수 없음\n","\n","    #   downsampled htf_df 만 허용 - 통일성\n","    #   non_resampled df 사용시 \"cannot reindex a non-unique index with a method or limit\" 라는 error_msg 확인\n","\n","    cols = htf_df.columns[column]  # to_lower_tf_v1 의 int col 반영\n","\n","    ltf_itv = pd.infer_freq(ltf_df.index)\n","    assert ltf_itv == 'T', \"currently only -> 'T' allowed..\"\n","\n","    if show_info:\n","        print(\"backing_i :\", backing_i)\n","\n","    #        1. htf last_ts_idx 의 second 가 :00 format (all rows same format)이 아닌 경우, bfill() 시 NaN 발생\n","    #           --> 상관 없음, 다른 윈인임\n","    #        2. single positional indexer is out-of-bounds => 대게 len(data) 부족 문제임 (row 증분)\n","    # iloc 뒤에 붙여야함, 아니면 timeidx 정상 출력 안됨\n","\n","    renamed_last_row = htf_df.rename(index={htf_df.index[-1]: ltf_df.index[-1]}, inplace=False).iloc[[-1]]\n","    if htf_df.index[-1] != renamed_last_row.index[-1]:  # cannot reindex a non-unique index with a method or limit 방지\n","        htf_df = htf_df.append(renamed_last_row)\n","\n","    # print(htf_df.tail())\n","\n","    # downsampled htf 의 freq_offset 기준으로 앞에서 뒤로 채우는게 맞음\n","    # --> hh:mm:00 format 을 사용해서 그럼 (59:999 면 bfill() 이였을 것)\n","    resampled_df = htf_df[cols].shift(backing_i).resample(ltf_itv).ffill()\n","    # print(resampled_df.tail())\n","    # print()\n","\n","    #        2. htf 가 downsampled 된 df 를 default 로 사용하기에, slicing 불필요해짐\n","    #        3. Shape of passed values is (799, 3), indices imply (3000, 3) -> len(ltf_df) > len(resampled_df) 란 의미\n","    #        4. solution => reindexing for inner join   #\n","    #         a. len(resampled_df) > len(ltf_df) 경우 slicing 진행\n","    #           -> ltf_index 를 다가져와도 resampled_indx 를 채울 수 없음 => error\n","    #           i. resampled length 를 ltf length 로 줄임\n","    #               1. 이미 htf_indi. 는 계산된 상태이고, \n","    #                   a. trader - 마지막 index 만 사용, 전혀 무리없음\n","    #                   b. idep - resampled_df.head(itv) 만큼만 소실된 것 -> 큰 무리없음\n","    #         b. len(resampled_df) < len(ltf_df)-> 상관없음 (ltf_index 에서 resampled_df length 만큼만 때가면 되니까)\n","    if len(resampled_df) > len(ltf_df):\n","        resampled_df = resampled_df.iloc[-len(ltf_df):]\n","    # print(\"len(ltf_df) :\", len(ltf_df))\n","    # print(\"len(resampled_df) :\", len(resampled_df))\n","    resampled_df.index = ltf_df.index[-len(resampled_df):]\n","    # assert len(ltf_df) <= len(resampled_df), \"for join method, assert len(ltf_df) <= len(resampled_df)\"\n","\n","    #       check last row's validity       #\n","    assert np.sum(\n","        pd.isnull(resampled_df.iloc[-1].values)) == 0, \"np.nan value occured, more {} rows might be reguired\".format(\n","        cols)\n","\n","    # if datetime.timestamp(htf_df.index[-1]) < datetime.timestamp(ltf_df.index[-1]):\n","    #     # resampled_df.rename(index={resampled_df.index[-1]: ltf_df.index[-1]}, inplace=True)\n","    #     print(resampled_df.tail())\n","    #     print(\"-----------\")\n","\n","    #        1. 필요한 len 계산해서 pre_proc. 진행 --> open_idx 를 동일하게 맞춰놓았고, shift 적용 상태이기 때문에 불필요함\n","\n","    #        1. ltf_df 의 마지막 timeidx 와 sync. 맞춰주어야함\n","    #           a. itv '1T' 가 아닌경우, 교집합 timeidx 가 존재하지 않을 수 있음\n","    # ltf_lastidx = ltf_df.tail(1).resample('1T').asfreq().index\n","    # intersec_idx_arr = np.argwhere(resampled_df.index == ltf_lastidx.item())\n","    # intersec_idx = intersec_idx_arr.item()\n","    # print(\"intersec_idx :\", intersec_idx)\n","    # print(\"len(resampled_df) :\", len(resampled_df))\n","    #\n","    # assert len(intersec_idx_arr) >= 1, \"len(intersec_idx_arr) is zero\"\n","    #\n","    # sliced_resampled_df = resampled_df[:intersec_idx + 1]\n","    # return sliced_resampled_df.values[-len(ltf_df):]\n","\n","    # return resampled_df.values[-len(ltf_df):]\n","    return resampled_df"],"metadata":{"id":"Z7bHV8CvC7eF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 1. base_touch_idx 기준으로, 작정한다음, np.nan value 를 ffill() 진행\n","strat_version = config.strat_version\n","len_df = len(res_df)\n","short_open_res = np.ones(len_df)\n","long_open_res = np.ones(len_df)\n","\n","short_tp_1_col, short_tp_0_col, short_tp_gap_col = 'short_tp_1_{}'.format(strat_version), 'short_tp_0_{}'.format(strat_version), 'short_tp_gap_{}'.format(strat_version) \n","long_tp_1_col, long_tp_0_col, long_tp_gap_col = 'long_tp_1_{}'.format(strat_version), 'long_tp_0_{}'.format(strat_version), 'long_tp_gap_{}'.format(strat_version) \n","short_epout_1_col, short_epout_0_col, short_epout_gap_col = 'short_epout_1_{}'.format(strat_version), 'short_epout_0_{}'.format(strat_version), 'short_epout_gap_{}'.format(strat_version) \n","long_epout_1_col, long_epout_0_col, long_epout_gap_col = 'long_epout_1_{}'.format(strat_version), 'long_epout_0_{}'.format(strat_version), 'long_epout_gap_{}'.format(strat_version) \n","\n","data_cols = ['open', 'high', 'low']   # Todo - public_indi 이전에 해야할지도 모름 # 'close', 'haopen', 'hahigh', 'halow', 'haclose'\n","tp_cols = [short_tp_1_col, short_tp_0_col, short_tp_gap_col, long_tp_1_col, long_tp_0_col, long_tp_gap_col]   # Todo - public_indi 이전에 해야할지도 모름\n","epout_cols = [short_epout_1_col, short_epout_0_col, short_epout_gap_col, long_epout_1_col, long_epout_0_col, long_epout_gap_col]   # Todo - public_indi 이전에 해야할지도 모름\n","\n","short_tp_1_, short_tp_0_, short_tp_gap_, long_tp_1_, long_tp_0_, long_tp_gap_ = [res_df[col_].to_numpy() for col_ in tp_cols]\n","short_epout_1_, short_epout_0_, short_epout_gap_, long_epout_1_, long_epout_0_, long_epout_gap_ = [res_df[col_].to_numpy() for col_ in epout_cols]\n","open, high, low = [res_df[col_].to_numpy() for col_ in data_cols]\n","\n","short_base = (short_tp_1_ + short_tp_0_) / 2\n","long_base = (long_tp_1_ + long_tp_0_) / 2\n","\n","touch_period = 50\n","\n","short_a_touch_idx = pd.Series(np.where(high >= short_tp_0_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()  # min -> max\n","short_b_touch_idx = pd.Series(np.where(low <= short_tp_1_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨\n","\n","short_en_p = (get_line(short_a_touch_idx, short_tp_0_) + get_line(short_b_touch_idx, short_tp_1_)) / 2\n","short_base_b = get_line(short_b_touch_idx, short_base)   # 현재, en_p == base_b, why ..?\n","short_tp_0_touch = get_line(short_a_touch_idx, short_tp_0_)\n","short_tp_1_touch = get_line(short_b_touch_idx, short_tp_1_)\n","short_tp_gap_b = get_line(short_b_touch_idx, short_tp_gap_)\n","short_open_res *= (high >= short_base) & (short_base >= open) & (short_a_touch_idx < short_b_touch_idx) #& (short_base_b + config.loc_set.point.base_gap * short_tp_gap_b >= short_base)\n","# short_open_res *= (high >= short_base_b) & (short_base_b >= low) & (short_a_touch_idx < short_b_touch_idx) & (short_base_b + config.loc_set.point.base_gap * short_tp_gap_b >= short_base)\n","\n","len_df = len(res_df)\n","long_a_touch_idx = pd.Series(np.where(low <= long_tp_0_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()       \n","long_b_touch_idx = pd.Series(np.where(high >= long_tp_1_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()\n","\n","long_en_p = (get_line(long_a_touch_idx, long_tp_0_) + get_line(long_b_touch_idx, long_tp_1_)) / 2\n","long_base_b = get_line(long_b_touch_idx, long_base)\n","long_tp_0_touch = get_line(long_a_touch_idx, long_tp_0_)\n","long_tp_1_touch = get_line(long_b_touch_idx, long_tp_1_)\n","long_tp_gap_b = get_line(long_b_touch_idx, long_tp_gap_)\n","long_open_res *= (open >= long_base) & (long_base >= low) & (long_a_touch_idx < long_b_touch_idx) # & (long_base_b - config.loc_set.point.base_gap * long_tp_gap_b <= long_base)\n","# long_open_res *= (open >= long_base) & (long_base >= low) # & (long_a_touch_idx < long_b_touch_idx) # & (long_base_b - config.loc_set.point.base_gap * long_tp_gap_b <= long_base)\n","# long_open_res *= (high >= long_base) & (long_base >= low) & (long_a_touch_idx < long_b_touch_idx) # & (long_base_b - config.loc_set.point.base_gap * long_tp_gap_b <= long_base)\n"],"metadata":{"id":"WA094Xin1FGr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["i = random.randint(0, len(res_df))\n","\n","plot_size = 200\n","t_df = res_df.iloc[i - plot_size:i]\n","a_data = t_df.to_numpy()"],"metadata":{"id":"t4P2qIYAFiDm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(15, 9))\n","nrows, ncols = 1, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        # height_ratios=[3, 1]\n","                        )\n","\n","ax = fig.add_subplot(gs[0])\n","\n","# ------ candles ------ #\n","candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","_ = [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","\n","t_df = wave_range(t_df, 20, 20, ltf_df=None, touch_lbperiod=50)\n","\n","plt.step(np.arange(len(t_df.short_wave_1_T.to_numpy())), t_df.short_wave_1_T.to_numpy(), alpha=1.0, color='blue', linewidth=2)\n","plt.step(np.arange(len(t_df.short_wave_0_T.to_numpy())), t_df.short_wave_0_T.to_numpy(), alpha=1.0, color='blue', linewidth=2)\n","plt.step(np.arange(len(t_df.long_wave_1_T.to_numpy())), t_df.long_wave_1_T.to_numpy(), alpha=1.0, color='yellow', linewidth=2)\n","plt.step(np.arange(len(t_df.long_wave_0_T.to_numpy())), t_df.long_wave_0_T.to_numpy(), alpha=1.0, color='yellow', linewidth=2)\n","\n","short_open_plot_idx = t_df.short_wave_point_T\n","long_open_plot_idx = t_df.long_wave_point_T\n","plt.step(np.arange(len(short_base[i - plot_size:i]))[short_open_plot_idx], short_base[i - plot_size:i][short_open_plot_idx], \"o\", alpha=1.0, color='#ff00ff', markersize=11)\n","plt.step(np.arange(len(long_base[i - plot_size:i]))[long_open_plot_idx], long_base[i - plot_size:i][long_open_plot_idx], \"o\", alpha=1.0, color='#00ff00', markersize=11)\n","\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":537},"executionInfo":{"status":"ok","timestamp":1648599806041,"user_tz":-540,"elapsed":977,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"90f467c9-ddb1-4f51-933f-b32de99a8c41","id":"7x80Xlje7j4Q"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1080x648 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["t_df.short_wave_point_T == short_open_res.astype(bool)[i - plot_size:i]\n","t_df.long_wave_point_T[50:] == long_open_res.astype(bool)[i - plot_size:i][50:]\n","\n","# short_open_plot_idx = short_open_res.astype(bool)[i - plot_size:i]\n","# long_open_plot_idx = long_open_res.astype(bool)[i - plot_size:i]\n","\n","# short_open_plot_idx = t_df.short_wave_point_T\n","# # long_open_plot_idx = t_df.long_wave_point_T"],"metadata":{"id":"NXPgF90xMzas"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# long_a_touch_idx[-plot_size:]\n","touch_idx_copy = long_a_touch_idx.copy()\n","# touch_line = long_tp_0_.copy()\n","touch_line = np.full_like(long_tp_0_, np.nan)\n","\n","nan_idx = np.isnan(touch_idx_copy)  # touch_period 동안 touch 이력이 없는 point\n","touch_idx_copy[nan_idx] = 0   # for indexing array\n","\n","int_touch_idx_copy = touch_idx_copy.astype(int)\n","# print(int_touch_idx_copy[-plot_size:])\n","print(touch_line[int_touch_idx_copy])\n","\n","touch_line = long_tp_0_[int_touch_idx_copy]\n","# touch_line[nan_idx] = np.nan   # for true comp.\n","# print(touch_idx_copy[-plot_size:])\n","print(touch_line[int_touch_idx_copy])\n","print(touch_line[-plot_size:])\n","\n","# long_tp_0_[long_a_touch_idx.astype(int)]"],"metadata":{"id":"2OLM9XOI-HO5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def get_line(touch_idx, rtc_):\n","  touch_idx_copy = touch_idx.copy()\n","  touch_line = np.full_like(rtc_, np.nan)\n","\n","  nan_idx = np.isnan(touch_idx_copy)\n","  touch_idx_copy[nan_idx] = 0   # for indexing array\n","  touch_line = rtc_[touch_idx_copy.astype(int)]\n","  touch_line[nan_idx] = np.nan   # for true comp.\n","\n","  return touch_line"],"metadata":{"id":"3cvi-eFR9Jsm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# high = t_df.high.to_numpy()\n","# low = t_df.low.to_numpy()\n","\n","# pivot_k = 0.001\n","# high_pivots = peak_valley_pivots(high, pivot_k, -pivot_k)\n","# low_pivots = peak_valley_pivots(low, pivot_k, -pivot_k)\n","# plot_pivots(high, high_pivots)\n","# plot_pivots(low, low_pivots)\n","\n","def plot_pivots(X, pivots):\n","    # plt.xlim(0, len(X))\n","    # plt.ylim(X.min()*0.99, X.max()*1.01)\n","    # plt.plot(np.arange(len(X)), X, 'k:', color='white')\n","    valid_idx = pivots != 0\n","    plt.plot(np.arange(len(X))[valid_idx], X[valid_idx], '-', color='white')\n","    # plt.scatter(np.arange(len(X))[pivots == 1], X[pivots == 1], color='g')\n","    # plt.scatter(np.arange(len(X))[pivots == -1], X[pivots == -1], color='r')"],"metadata":{"id":"1PwSHOShZJNm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X = res_df_.close.iloc[-100:].to_numpy()\n","# X = res_df_.close.to_numpy()\n","pivots = peak_valley_pivots(X, 0.0005, -0.0005)\n","pivots = peak_valley_pivots(X, 0.5, -0.5)"],"metadata":{"id":"4lZwODlFYxSL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plot_pivots(X, pivots)"],"metadata":{"id":"W_xx9XWXZKJ5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["t_df = res_df_.iloc[-100:]\n","t_df['date'] = t_df.index\n","data_x = t_df['date'].values\n","data_y = t_df['close'].values\n","peak_indexes = signal.argrelextrema(data_y, np.greater)\n","peak_indexes = peak_indexes[0]\n"," \n","# Find valleys(min).\n","valley_indexes = signal.argrelextrema(data_y, np.less)\n","valley_indexes = valley_indexes[0]\n"," \n","# Instantiate axes.\n","(fig, ax) = plt.subplots()\n"," \n","# Merge peaks and valleys data points using pandas.\n","df_peaks = pd.DataFrame({'date': data_x[peak_indexes], 'zigzag_y': data_y[peak_indexes]})\n","df_valleys = pd.DataFrame({'date': data_x[valley_indexes], 'zigzag_y': data_y[valley_indexes]})\n","df_peaks_valleys = pd.concat([df_peaks, df_valleys], axis=0, ignore_index=True, sort=True)\n"," \n","# Sort peak and valley datapoints by date.\n","df_peaks_valleys = df_peaks_valleys.sort_values(by=['date'])\n"," \n","# Plot zigzag trendline.\n","ax.plot(df_peaks_valleys['date'].values, df_peaks_valleys['zigzag_y'].values, \n","                                                        color='red', label=\"zigzag\")\n"," \n","# Plot close price line.\n","ax.plot(data_x, data_y, linestyle='dashed', color='black', label=\"Close Price\", linewidth=1)\n"," "],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"id":"ZAjpk42XarfY","executionInfo":{"status":"ok","timestamp":1647999471974,"user_tz":-540,"elapsed":935,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"471a5d20-9df5-4b2a-9d04-53cdb0e35c2f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7f82b6491790>]"]},"metadata":{},"execution_count":31},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["#### volume_profile"],"metadata":{"id":"EOXQbXixiQcK"}},{"cell_type":"code","source":["session_df = res_df_.iloc[-1440:] # 0.159 -> 0.024 (14400 -> 1440)\n","volume = session_df['volume'].to_numpy()\n","close = session_df['close'].to_numpy()\n","# px.histogram(session_df, x='volume', y='close', nbins=150, orientation='h').show()"],"metadata":{"id":"7pFuazxpgx9B"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["kde_factor = 0.05\n","num_samples = 100\n","\n","start_0 = time.time()\n","kde = stats.gaussian_kde(close,weights=volume,bw_method=kde_factor)\n","kdx = np.linspace(close.min(),close.max(),num_samples)\n","kdy = kde(kdx)\n","ticks_per_sample = (kdx.max() - kdx.min()) / num_samples\n","print(\"ticks_per_sample :\", ticks_per_sample)  # sample 당 가격\n","print(\"kdy elapsed_time :\", time.time() - start_0)"],"metadata":{"id":"SoPJkiyKiXLM","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1647259514394,"user_tz":-540,"elapsed":332,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"2e1d515d-7caf-4f82-b53b-a17f3e1d9ab9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["ticks_per_sample : 1.3911999999999989\n","kdy elapsed_time : 0.021226167678833008\n"]}]},{"cell_type":"code","source":["peaks,_ = signal.find_peaks(kdy)\n","pkx = kdx[peaks]\n","pky = kdy[peaks]\n","\n","plt.figure(figsize=(10,5))\n","# plt.hist(close, bins=num_samples, weights=volume, alpha=.8, color='#1592e6')\n","# plt.plot(kdx, kdy, color='white')\n","# plt.plot(pkx, pky, 'bo', color='yellow')\n","plt.plot(kdy, kdx, color='white')\n","plt.plot(pky, pkx, 'bo', color='yellow')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":320},"id":"mK2jBddAxJ14","executionInfo":{"status":"ok","timestamp":1647263622450,"user_tz":-540,"elapsed":362,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"74d7a810-1375-4db5-f74e-3cf58e0a0662"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 720x360 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["pkx"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"a8tpQZCy0SO1","executionInfo":{"status":"ok","timestamp":1647260132868,"user_tz":-540,"elapsed":326,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"24ee984e-db8d-4083-97a7-4d3ebb536d38"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([3059.93252525, 3068.3640404 , 3082.41656566, 3093.65858586, 3104.90060606, 3120.35838384, 3130.19515152, 3140.03191919, 3158.30020202, 3168.1369697 , 3176.56848485])"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["# ------ vp 의 indi. 화가 필요함 -> point 설정 ------ #\n","# 1. 4 level 은 미리 만들어놓는게 맞는걸로 보임 -> 추종하는 function 이 많음 (utils_tr, ep_out ...)\n","#   a. 4 level 에 국한하는게 아니라, 모든 peaks 에 대해 levels 설정\n","#   b. 각 session 별로 peak_list 가 주어질 것\n","#     i. prev_data 사용해야하는점 주의 (session vp 는 future_data)"],"metadata":{"id":"gfA946s8UgS0"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### legacy"],"metadata":{"id":"1MNVIExLULhJ"}},{"cell_type":"code","source":["from math import floor\n","\n","\n","def _calc_dev(base_price, price):\n","    return 100 * (price - base_price) / base_price\n","\n","\n","def zigzag(highs, lows, depth=10, dev_threshold=5):\n","    def pivots(src_raw, length, isHigh):\n","        src = list(reversed(src_raw))\n","        bar_index = list(range(len(src)))\n","        for start in range(0, len(src)):\n","            if start + 2 * length + 1 > len(src) - 1:\n","                return\n","            p = 0\n","            if length < len(src) - start:\n","                p = src[start + length]\n","            if length == 0:\n","                yield 0, p\n","            else:\n","                isFound = True\n","                for i in range(start, start + length):\n","                    if isHigh and src[i] > p:\n","                        isFound = False\n","                    if not isHigh and src[i] < p:\n","                        isFound = False\n","                for i in range(start + length + 1, start + 2 * length + 1):\n","                    if isHigh and src[i] >= p:\n","                        isFound = False\n","                    c = not isHigh and src[i] <= p\n","                    if c:\n","                        isFound = False\n","                if isFound:\n","                    yield (bar_index[start + length], p)\n","                else:\n","                    yield None, None\n","\n","    data_highs = [x for x in pivots(highs, floor(depth / 2), True) if x[0]]\n","    data_lows = [x for x in pivots(lows, floor(depth / 2), False) if x[0]]\n","\n","    raw_pairs = []\n","\n","    for i, (ind, p) in enumerate(data_highs):\n","        lows_d = sorted([(ind_l, p_l) for ind_l, p_l in data_lows if ind > ind_l], key=lambda x: x[0])\n","        if lows_d:\n","            lows = lows_d[-1]\n","\n","            if abs(_calc_dev(lows[1], p)) >= dev_threshold:\n","                raw_pairs.append(\n","                    ((ind, p),\n","                     (lows[0], lows[1]))\n","                )\n","\n","    result = []\n","\n","    for (i_h, p_h),(i_l, p_l) in raw_pairs:\n","        if not result:\n","            result.append(((i_h, p_h),(i_l, p_l)))\n","            continue\n","\n","        if i_l == result[-1][1][0]:\n","            if p_h > result[-1][0][1]:\n","                result = result[:-1]\n","            else:\n","                continue\n","\n","        result.append(((i_h, p_h),(i_l, p_l)))\n","\n","    return result\n","\n","# highs, lows = t_df.high.to_numpy(), t_df.low.to_numpy()\n","# zigzag(highs, lows, depth=5, dev_threshold=5)"],"metadata":{"id":"q1nEA19v7Qpj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["t_df = res_df_.iloc[-120:]\n","a_data = t_df.to_numpy()"],"metadata":{"id":"fGlmdyb97j4Q"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# import plotly.express as px\n","# import plotly.graph_objects as go\n","\n","def get_dist_plot(c, v, kx, ky):\n","    fig = go.Figure()\n","    fig.add_trace(go.Histogram(name='Vol Profile', x=c, y=v, nbinsx=150, \n","                               histfunc='sum', histnorm='probability density',\n","                               marker_color='#B0C4DE'))\n","    fig.add_trace(go.Scatter(name='KDE', x=kx, y=ky, mode='lines', marker_color='#D2691E'))    \n","\n","    peaks,_ = signal.find_peaks(kdy)\n","    pkx = kdx[peaks]\n","    pky = kdy[peaks]\n","    pk_marker_args=dict(size=10, color='black')\n","    fig.add_trace(go.Scatter(name=\"Peaks\", x=pkx, y=pky, mode='markers', marker=pk_marker_args))\n","    fig.show()\n","\n","    return fig"],"metadata":{"id":"ropzIp0wUPAA"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##### prominence_info"],"metadata":{"id":"3T-9FwWFXR4f"}},{"cell_type":"code","source":["start_0 = time.time()\n","min_prom = kdy.max() * 0.0\n","pipsize = 0.01\n","max_width_pips = 20\n","# width_range=(1, max_width_pips * pipsize / ticks_per_sample)\n","width_range= max_width_pips * pipsize / ticks_per_sample\n","peaks, peak_props = signal.find_peaks(kdy, prominence=min_prom, width=width_range)\n","\n","peak_x = kdx[peaks]\n","peak_y = kdy[peaks]\n","# ------ prominence lines ------ #\n","left_base = peak_props['left_bases']\n","right_base = peak_props['right_bases']\n","line_x = peak_x\n","line_y0 = peak_y\n","line_y1 = peak_y # - peak_props['prominences']\n","print(\"prom_line elapsed_time :\", time.time() - start_0)\n","\n","\n","for x, y0, y1 in zip(line_x, line_y0, line_y1):\n","    fig.add_shape(type='line',\n","        xref='x', yref='y',\n","        # x0=x, y0=y0, x1=x, y1=y1,\n","        x0=x, y0=0, x1=x, y1=y1,\n","        line=dict(\n","            color='red',\n","            width=2,\n","        )\n","    )\n","\n","# ------ width ------ #\n","left_ips = peak_props['left_ips']\n","right_ips = peak_props['right_ips']\n","# width_x0 = kdx.min() + (left_ips * ticks_per_sample)\n","# width_x1 = kdx.min() + (right_ips * ticks_per_sample)\n","width_x0 = kdx.min() + (left_base * ticks_per_sample)\n","width_x1 = kdx.min() + (right_base * ticks_per_sample)\n","\n","# int_from = kdx.min() + (left_base * ticks_per_sample)\n","# int_to = kdx.min() + (right_base * ticks_per_sample)\n","# [kde.integrate_box_1d(x0, x1) for x0, x1 in zip(int_from, int_to)]\n","\n","width_y = peak_props['width_heights']\n","\n","for x0, x1, y in zip(width_x0, width_x1, width_y):\n","    fig.add_shape(type='line',\n","        xref='x', yref='y',\n","        x0=x0, y0=y, x1=x1, y1=y,\n","        line=dict(\n","            color='red',\n","            width=2,\n","        )\n","    )\n","fig.show()"],"metadata":{"id":"RmBt2agljClE","colab":{"base_uri":"https://localhost:8080/","height":558},"executionInfo":{"status":"ok","timestamp":1647183981567,"user_tz":-540,"elapsed":781,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"c61b0e13-ab0a-4e56-8a44-8bc480ec31cc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["prom_line elapsed_time : 0.0005087852478027344\n"]},{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script src=\"https://cdn.plot.ly/plotly-2.8.3.min.js\"></script>                <div id=\"f0efc821-18d5-43b5-ad6e-1133ea0ad873\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"f0efc821-18d5-43b5-ad6e-1133ea0ad873\")) {                    Plotly.newPlot(                        \"f0efc821-18d5-43b5-ad6e-1133ea0ad873\",                        [{\"histfunc\":\"sum\",\"histnorm\":\"probability density\",\"marker\":{\"color\":\"#B0C4DE\"},\"name\":\"Vol Profile\",\"nbinsx\":150,\"x\":[3150.12,3150.91,3150.04,3152.76,3150.22,3148.21,3148.25,3148.3,3142.41,3145.56,3144.02,3145.11,3146.27,3142.97,3140.6,3142.02,3142.8,3141.34,3138.28,3138.09,3137.04,3135.5,3133.32,3134.84,3136.27,3137.1,3137.05,3139.74,3138.4,3138.17,3139.49,3141.68,3142.52,3143.14,3143.12,3142.4,3144.17,3142.7,3140.72,3138.89,3142.1,3140.96,3139.76,3138.51,3140.37,3139.0,3138.84,3138.57,3140.62,3143.09,3141.71,3140.05,3139.85,3139.12,3139.9,3139.24,3139.49,3138.88,3138.14,3136.66,3137.03,3138.04,3140.84,3138.27,3137.31,3139.03,3141.06,3141.5,3139.41,3137.62,3141.5,3142.8,3142.24,3143.42,3142.55,3143.9,3146.54,3146.38,3142.34,3144.01,3145.79,3147.35,3146.06,3146.75,3147.37,3153.62,3152.82,3154.53,3153.41,3154.3,3153.01,3156.01,3157.57,3157.36,3160.43,3159.0,3163.78,3164.2,3163.97,3168.45,3170.03,3169.46,3173.73,3169.48,3168.54,3167.57,3166.99,3164.73,3164.25,3166.33,3162.57,3156.97,3159.44,3159.19,3158.11,3156.97,3158.08,3158.32,3158.99,3157.01,3154.91,3147.89,3146.35,3142.36,3142.62,3138.81,3144.68,3143.32,3140.89,3140.16,3139.74,3140.33,3143.48,3145.12,3145.42,3147.13,3143.31,3144.88,3145.12,3143.89,3144.75,3143.91,3140.69,3141.35,3141.59,3141.62,3141.51,3141.96,3142.09,3140.61,3137.55,3138.18,3140.28,3139.39,3139.2,3139.85,3137.92,3138.08,3136.42,3134.93,3135.14,3133.15,3135.12,3133.37,3134.51,3131.06,3128.0,3126.97,3116.7,3122.46,3122.06,3118.8,3115.48,3119.5,3120.88,3110.75,3109.43,3107.1,3111.54,3107.5,3108.74,3111.3,3113.32,3115.38,3118.54,3115.27,3118.6,3120.1,3119.4,3119.35,3123.69,3123.54,3121.8,3121.82,3119.9,3122.01,3122.29,3119.64,3119.91,3118.67,3118.66,3119.45,3120.43,3122.38,3120.43,3121.94,3123.03,3123.6,3121.88,3123.81,3123.85,3121.51,3121.8,3122.29,3123.76,3127.99,3131.35,3131.12,3131.07,3132.76,3131.57,3131.8,3130.61,3134.68,3134.39,3132.91,3130.4,3129.86,3129.9,3129.38,3128.39,3125.57,3124.03,3123.68,3125.42,3125.98,3128.4,3130.98,3128.95,3129.26,3132.05,3131.17,3128.56,3126.45,3127.34,3128.33,3126.96,3128.84,3128.45,3128.34,3128.84,3126.09,3125.6,3125.95,3124.5,3122.44,3122.97,3128.29,3126.43,3127.98,3131.71,3132.68,3130.7,3129.63,3130.04,3129.68,3129.74,3129.36,3129.78,3128.6,3128.87,3130.34,3129.71,3127.47,3129.81,3129.16,3128.41,3126.57,3125.42,3128.63,3129.77,3130.9,3131.42,3129.66,3132.1,3130.24,3133.36,3138.65,3141.3,3144.9,3140.63,3141.08,3139.72,3142.67,3141.99,3140.43,3139.04,3134.85,3133.34,3133.14,3136.4,3138.89,3139.59,3143.64,3140.9,3140.38,3141.76,3140.14,3140.58,3137.29,3138.28,3138.27,3137.57,3139.11,3138.77,3138.93,3139.13,3139.57,3139.76,3141.02,3138.46,3138.77,3139.38,3135.77,3135.49,3136.19,3134.07,3135.5,3134.59,3134.37,3137.84,3139.81,3140.38,3143.15,3142.58,3143.12,3139.01,3137.68,3137.86,3137.6,3136.3,3136.34,3134.66,3136.0,3135.49,3133.83,3132.57,3127.5,3127.82,3130.61,3132.01,3126.05,3128.08,3127.75,3127.18,3128.5,3128.32,3129.79,3128.02,3129.28,3127.92,3129.56,3130.85,3131.61,3133.9,3133.36,3135.98,3136.89,3136.05,3138.23,3137.59,3139.65,3141.26,3140.09,3139.73,3139.13,3140.0,3138.28,3139.07,3140.15,3140.64,3141.14,3140.89,3141.56,3144.82,3146.11,3146.92,3147.37,3148.01,3148.11,3153.52,3153.63,3152.2,3145.75,3149.2,3150.38,3152.32,3148.33,3149.53,3151.03,3149.0,3148.97,3148.26,3148.09,3149.48,3150.14,3153.62,3154.73,3153.73,3154.58,3156.77,3157.02,3157.56,3159.21,3157.99,3157.28,3158.24,3157.75,3153.62,3156.32,3155.98,3156.09,3153.36,3154.85,3153.7,3153.26,3153.92,3152.18,3154.72,3153.76,3151.32,3147.99,3143.63,3142.84,3142.01,3142.34,3141.19,3144.4,3143.24,3146.07,3146.42,3142.71,3145.16,3144.34,3142.69,3139.69,3137.0,3139.75,3138.36,3137.76,3138.86,3141.21,3141.38,3147.22,3146.36,3145.32,3145.22,3143.33,3142.05,3138.36,3136.89,3138.59,3137.22,3138.73,3140.14,3140.55,3143.65,3142.01,3142.94,3141.82,3142.27,3142.38,3141.33,3139.54,3140.53,3141.91,3143.98,3145.27,3145.56,3145.8,3146.38,3146.33,3146.59,3148.72,3149.48,3149.99,3149.19,3147.89,3145.9,3144.89,3143.99,3144.38,3141.47,3141.26,3134.83,3136.75,3135.49,3137.49,3136.01,3138.03,3137.49,3135.5,3133.94,3131.24,3128.72,3131.32,3129.42,3129.77,3126.83,3127.0,3124.12,3125.0,3127.18,3130.0,3129.72,3129.07,3129.68,3129.97,3129.39,3130.92,3132.75,3132.92,3129.99,3133.15,3130.69,3132.15,3134.37,3132.81,3131.7,3130.61,3128.61,3128.99,3124.84,3116.56,3116.76,3116.92,3118.9,3119.05,3118.74,3118.24,3121.88,3121.41,3120.63,3119.45,3119.16,3117.66,3125.21,3122.01,3122.3,3122.27,3123.6,3123.71,3124.0,3126.14,3128.01,3125.94,3126.44,3128.0,3128.04,3128.5,3131.12,3129.44,3129.36,3130.58,3130.58,3130.74,3129.8,3130.8,3130.21,3130.0,3132.5,3132.77,3130.01,3138.72,3139.25,3138.11,3136.77,3136.71,3134.59,3135.98,3133.81,3131.4,3131.16,3133.29,3130.61,3132.0,3132.44,3133.58,3134.18,3133.44,3133.33,3135.37,3134.42,3132.16,3132.2,3130.93,3131.07,3128.89,3127.34,3129.46,3129.77,3130.33,3131.76,3132.28,3130.06,3132.43,3132.6,3134.33,3138.55,3138.49,3137.34,3135.68,3135.12,3133.0,3133.35,3135.1,3135.72,3135.45,3135.74,3134.31,3135.54,3135.0,3134.0,3135.5,3135.47,3138.57,3137.43,3137.26,3137.68,3134.65,3133.04,3134.23,3134.77,3137.77,3138.53,3137.99,3140.51,3141.66,3137.9,3130.11,3125.74,3126.7,3127.43,3126.03,3120.96,3121.81,3124.17,3124.31,3124.54,3125.11,3125.71,3126.3,3128.36,3129.59,3129.72,3130.19,3131.21,3130.5,3130.07,3129.81,3131.5,3134.35,3133.15,3135.09,3136.18,3132.93,3122.75,3122.1,3122.03,3121.84,3121.06,3118.65,3120.18,3119.31,3112.84,3117.62,3114.39,3114.41,3116.04,3117.45,3119.3,3120.57,3120.72,3121.07,3116.17,3110.8,3111.87,3110.61,3115.47,3117.35,3117.49,3117.32,3114.9,3112.16,3112.35,3108.01,3111.41,3109.76,3113.55,3118.27,3120.49,3119.38,3121.0,3119.82,3119.61,3118.49,3116.15,3116.56,3117.76,3115.36,3117.85,3117.1,3118.16,3118.6,3117.1,3114.79,3114.07,3116.16,3113.75,3112.4,3104.99,3118.68,3114.45,3103.37,3094.09,3103.67,3101.78,3098.48,3101.08,3101.52,3096.14,3095.06,3094.52,3093.74,3089.7,3094.76,3094.28,3082.9,3075.29,3071.6,3066.96,3068.99,3068.43,3072.83,3074.19,3068.47,3066.49,3068.45,3071.08,3072.8,3068.44,3067.71,3073.29,3073.62,3075.79,3074.76,3079.0,3077.27,3072.94,3073.42,3070.62,3070.97,3075.98,3073.64,3070.63,3073.96,3074.48,3076.25,3074.55,3072.14,3068.01,3068.44,3057.23,3061.75,3060.41,3060.23,3055.43,3062.96,3064.42,3063.7,3057.99,3057.97,3065.99,3069.05,3073.19,3068.84,3067.58,3067.45,3064.78,3066.87,3067.5,3068.74,3067.5,3070.61,3059.89,3062.56,3066.56,3065.24,3061.41,3060.9,3053.06,3061.95,3059.49,3056.27,3059.09,3059.6,3056.32,3057.96,3058.97,3061.6,3066.01,3068.68,3068.43,3070.66,3072.53,3070.4,3073.28,3072.86,3070.68,3067.65,3066.0,3066.25,3070.21,3071.52,3068.61,3064.15,3064.26,3063.48,3062.8,3060.3,3059.85,3060.47,3064.84,3065.03,3066.71,3066.55,3066.41,3065.24,3067.81,3066.93,3065.0,3067.85,3060.14,3062.51,3061.39,3064.93,3064.94,3066.09,3066.49,3067.75,3070.38,3067.84,3067.51,3072.07,3071.31,3070.05,3068.95,3068.57,3067.73,3068.88,3067.87,3067.89,3065.01,3066.0,3069.24,3065.3,3063.52,3063.06,3064.11,3064.99,3063.19,3062.69,3066.9,3066.87,3065.42,3058.47,3058.2,3068.7,3065.56,3065.52,3059.04,3060.61,3059.57,3058.08,3055.2,3053.72,3060.26,3055.86,3045.88,3046.6,3051.18,3052.99,3057.9,3056.38,3059.4,3061.48,3061.15,3064.36,3065.77,3066.35,3066.8,3067.68,3068.0,3065.05,3063.01,3066.42,3066.16,3064.8,3067.89,3066.3,3068.58,3064.81,3065.74,3064.23,3065.42,3070.43,3069.65,3070.48,3070.57,3073.44,3078.3,3082.89,3079.01,3080.76,3079.67,3082.0,3081.56,3082.01,3081.24,3078.61,3080.11,3080.95,3080.03,3080.65,3079.97,3078.86,3078.5,3078.6,3077.34,3077.0,3076.39,3076.45,3077.45,3076.23,3072.22,3073.67,3079.31,3077.21,3075.68,3076.91,3078.2,3075.92,3077.67,3076.33,3075.14,3076.47,3077.04,3080.69,3079.8,3080.33,3075.65,3074.66,3073.05,3070.38,3067.96,3068.78,3067.92,3069.26,3069.37,3070.76,3068.12,3069.49,3069.98,3071.78,3070.88,3068.71,3067.04,3069.34,3070.99,3070.39,3069.63,3068.6,3068.89,3070.08,3069.26,3069.57,3069.72,3069.53,3067.99,3069.23,3070.93,3071.33,3068.33,3066.84,3066.23,3066.76,3068.17,3070.0,3072.0,3075.66,3073.9,3073.99,3074.66,3074.0,3076.62,3077.82,3076.01,3076.18,3075.52,3075.42,3075.01,3075.67,3079.55,3078.46,3082.28,3080.74,3081.27,3083.38,3084.49,3086.42,3084.9,3086.53,3085.27,3084.7,3084.08,3084.82,3086.99,3092.0,3089.49,3089.26,3084.07,3084.44,3084.8,3083.55,3082.59,3082.36,3084.65,3086.97,3085.67,3085.43,3088.82,3089.81,3091.81,3093.96,3092.59,3093.58,3093.74,3092.61,3091.64,3091.26,3113.47,3104.88,3092.36,3101.44,3107.88,3113.58,3119.86,3128.34,3133.07,3128.34,3123.1,3129.07,3122.38,3127.43,3126.59,3132.79,3137.33,3143.07,3145.41,3147.86,3148.82,3157.67,3157.57,3160.7,3160.01,3163.6,3172.63,3171.77,3174.38,3176.44,3178.06,3179.99,3185.0,3176.75,3171.53,3179.12,3176.52,3168.9,3168.72,3170.03,3168.15,3165.58,3166.83,3167.56,3161.34,3162.78,3167.67,3162.8,3157.67,3155.79,3157.92,3161.37,3163.06,3165.11,3163.45,3164.45,3166.86,3166.61,3165.0,3167.59,3167.45,3164.59,3167.05,3172.29,3176.49,3170.87,3166.5,3165.51,3165.58,3164.96,3165.19,3161.59,3165.09,3162.72,3163.97,3162.62,3165.19,3165.77,3163.55,3173.99,3171.18,3170.87,3168.34,3169.49,3167.69,3169.72,3166.89,3168.42,3166.68,3168.84,3165.83,3162.55,3159.17,3160.93,3162.0,3160.83,3158.69,3159.99,3159.9,3159.88,3160.02,3158.98,3160.0,3158.01,3159.2,3158.6,3158.71,3156.25,3157.2,3156.77,3156.91,3156.6,3156.55,3153.94,3152.29,3151.49,3151.41,3146.89,3148.18,3147.2,3147.17,3147.89,3149.31,3151.59,3156.4,3153.84,3155.3,3155.23,3156.03,3156.24,3155.61,3158.4,3155.05,3155.38,3152.34,3152.18,3153.34,3152.91,3153.99,3151.52,3149.21,3152.48,3151.63,3150.9,3149.75,3148.0,3148.25,3149.4,3149.7,3148.41,3147.65,3146.06,3147.06,3147.41,3146.72,3145.51,3142.17,3142.8,3140.42,3139.24,3140.69,3140.67,3139.22,3136.44,3139.14,3137.55,3133.96,3131.83,3130.8,3130.95,3129.59,3127.0,3129.85,3133.0,3132.21,3132.15,3130.41,3132.9,3134.57,3139.85,3133.04,3138.13,3135.79,3136.96,3133.26,3129.64,3128.02,3127.75,3130.0,3132.21,3133.06,3132.06,3131.88,3132.99,3134.0,3135.79,3137.68,3136.0,3137.89,3133.88,3133.81,3133.84,3133.71,3138.28,3143.06,3144.0,3143.17,3143.02,3145.34,3144.83,3144.81,3144.61,3146.0,3147.91,3146.69,3145.03,3142.46,3142.5,3141.1,3140.17,3140.11,3141.4,3143.92,3144.66,3146.71,3148.95,3146.13,3135.82,3136.96,3139.34,3134.9,3134.48,3136.76,3137.37,3136.92,3136.99,3133.71,3134.44,3132.38,3135.25,3137.14,3135.07,3136.15,3136.15,3139.87,3138.92,3138.5,3141.6,3144.19,3145.44,3147.36,3147.51,3142.12,3143.94,3142.43,3142.02,3142.21,3144.66,3146.53,3144.3,3145.73,3145.94,3146.56,3145.42,3146.05,3150.58,3154.16,3151.01,3149.76,3150.51,3149.31,3146.43,3146.66,3147.47,3145.75,3146.7,3147.1,3143.28,3146.19,3145.38,3145.25,3140.13,3143.45,3140.18,3138.3,3139.7,3136.88,3132.99,3134.7,3135.09,3135.74,3129.89,3126.61,3123.87,3125.14,3119.64,3123.09,3123.35,3120.16,3121.8,3125.0,3132.0,3126.44,3124.57,3120.75,3125.9,3128.05,3127.12,3124.8,3126.19,3128.65,3130.03,3125.31,3125.8,3126.11,3123.22,3125.03,3126.05,3126.24,3129.98,3130.55,3130.97,3129.1,3129.66,3130.27,3130.36,3131.12,3136.13,3137.65,3133.69,3137.18,3137.25,3138.83,3138.58,3141.52,3139.41,3139.05,3137.7,3139.46,3139.8,3140.98,3139.78,3139.17,3140.0,3141.49,3138.86,3139.52,3140.5,3142.58,3142.34,3142.47,3142.91,3142.89,3144.0,3147.55,3148.71,3151.21,3150.66,3148.5,3148.96,3148.5,3150.32,3152.45,3150.83,3150.29,3151.2,3153.01,3152.48,3149.23,3147.45,3146.68,3157.71,3153.34,3147.37,3143.99,3141.45,3142.66,3146.98,3146.61,3148.46,3149.5,3149.29,3148.18,3145.05,3146.86,3145.76,3148.84,3149.31,3146.86,3146.76],\"y\":[1814.895,1182.023,1511.21,821.059,669.95,594.607,397.261,475.226,1430.563,1351.268,848.732,961.415,677.695,2241.498,771.686,3400.92,457.283,815.311,843.761,1456.898,1147.73,2592.488,939.438,695.06,664.589,839.272,344.224,524.897,1029.553,1257.254,764.586,1618.563,599.314,385.634,340.075,245.402,273.54,932.316,297.465,800.419,470.172,358.191,198.746,398.956,521.275,398.68,250.799,376.615,178.701,1034.812,349.27,365.934,193.939,199.584,148.806,343.965,258.079,238.408,273.382,508.892,455.586,1497.43,603.768,705.325,471.812,358.129,1222.79,447.666,603.433,350.189,684.554,404.765,918.631,713.382,803.374,220.673,1013.652,1757.238,887.223,420.149,422.235,642.444,379.785,126.201,499.773,2342.571,1945.816,1288.743,676.794,392.273,424.757,1084.062,1139.501,790.354,2007.705,1446.953,1842.648,777.958,945.39,2579.427,2955.737,1590.911,1476.864,2861.345,772.493,876.768,1835.01,875.833,585.31,765.122,767.852,1825.83,1060.932,682.04,688.755,737.484,429.945,293.821,300.116,1045.831,712.192,2711.994,2052.2,3340.02,897.035,2391.303,2186.713,1517.988,344.748,771.478,720.502,656.313,530.014,1327.673,508.321,904.994,1152.633,523.227,293.715,229.893,202.519,252.467,601.482,317.28,345.035,575.193,374.831,194.465,270.588,367.969,1280.729,1909.713,774.939,518.596,294.403,337.627,382.69,353.682,534.457,1713.387,360.944,713.113,1393.388,1289.595,610.727,739.131,1619.367,2194.335,8164.046,2879.21,2159.701,2512.548,3579.377,1841.206,2810.677,3893.288,1849.815,5497.891,2407.824,1844.752,1304.788,945.57,2745.772,2050.842,2354.528,1577.291,903.569,1269.654,2703.684,766.884,1965.466,1320.285,1111.835,521.223,822.176,942.413,497.538,499.364,222.856,316.366,355.702,243.842,362.266,593.914,349.424,308.565,540.138,769.079,463.481,163.895,237.299,285.424,466.1,224.654,493.52,1674.225,4063.392,1370.598,472.447,957.289,609.428,338.42,243.509,745.35,1417.319,762.417,553.865,616.945,305.569,511.777,416.061,2007.687,312.874,1760.715,470.299,170.102,514.177,647.315,425.481,274.85,415.924,896.493,396.062,588.357,231.181,273.932,245.847,212.412,116.329,109.858,274.394,323.434,335.066,347.193,459.166,944.41,601.327,889.712,412.644,317.84,986.261,934.932,572.116,181.168,460.876,145.156,108.878,210.202,77.92,295.25,300.008,412.518,463.649,312.424,342.369,602.553,325.602,288.656,458.643,344.168,189.501,378.501,506.806,405.58,266.931,508.179,577.092,1968.061,3128.798,2617.171,810.468,1071.792,482.71,702.007,298.08,1139.23,623.801,1162.914,1203.468,673.113,606.991,499.32,344.082,916.323,1133.798,236.462,323.745,227.404,305.618,859.751,541.196,262.919,221.3,135.795,94.984,185.741,146.342,216.582,150.862,227.198,373.705,332.486,216.229,778.895,1204.286,326.503,380.38,1047.579,257.681,288.363,944.527,1025.858,1888.092,606.18,219.281,573.418,618.131,579.352,643.473,227.201,596.85,266.111,593.418,412.236,518.62,714.492,807.998,1833.123,1485.911,696.152,1044.399,1178.696,682.768,339.908,614.242,333.987,289.083,426.036,434.767,363.008,294.274,249.675,759.092,233.645,259.457,692.772,530.582,751.244,252.918,324.292,565.306,530.138,634.433,621.443,362.445,1462.934,578.493,404.427,432.71,381.631,206.741,803.279,286.361,454.727,989.949,1000.012,534.381,1225.959,2611.002,1238.904,1808.266,2668.663,1734.437,1991.659,1533.497,673.975,1417.797,1002.213,689.714,474.831,775.993,612.321,674.988,586.885,486.539,6750.373,1240.763,1031.138,1064.433,810.097,2543.442,1714.432,1408.587,2076.241,891.454,802.952,990.123,356.49,909.726,969.575,1157.716,408.802,557.485,790.536,760.441,903.066,478.393,406.574,460.658,270.44,397.786,2943.217,4367.234,1259.451,1068.328,966.188,1414.714,579.827,511.738,412.874,654.607,675.654,504.93,356.198,858.616,1158.323,1447.125,787.173,728.954,636.948,628.265,669.612,465.412,1222.997,749.451,462.962,472.928,432.435,342.099,1618.728,2358.947,952.987,460.716,651.763,975.681,444.398,645.867,449.599,193.003,278.721,545.444,842.045,277.826,994.515,588.675,591.108,309.423,892.268,276.425,502.627,968.723,404.031,211.579,444.69,715.557,984.707,1097.859,551.379,692.514,900.106,360.002,948.053,805.637,489.368,1676.558,1304.157,367.592,283.184,1023.029,456.415,763.262,343.508,461.29,879.775,1776.793,1251.296,591.245,573.997,1673.844,1283.242,2767.718,1120.511,657.294,746.819,905.747,599.259,715.33,481.675,327.764,388.74,1256.088,1555.066,601.571,277.709,213.939,322.601,214.083,472.872,296.863,364.37,746.543,378.365,967.733,5140.211,4083.258,1994.542,1976.259,888.817,461.462,437.566,1416.611,716.221,1318.431,481.782,2014.435,936.676,1459.321,855.198,732.281,466.019,450.272,560.57,469.751,622.444,518.498,933.561,1274.182,362.645,417.461,200.685,1204.422,1085.208,437.325,388.368,522.196,414.681,402.1,458.488,176.931,774.455,662.126,617.206,452.137,4865.578,3871.135,1343.329,634.081,483.47,1681.018,514.598,502.913,1322.138,529.723,572.34,348.409,713.894,228.335,215.652,253.718,284.838,694.79,180.093,810.769,563.133,209.468,355.301,1084.715,204.09,893.371,557.044,320.725,236.971,360.995,404.746,202.665,416.594,295.445,369.598,1691.926,445.675,502.376,451.028,754.112,460.168,253.657,293.696,364.866,139.172,187.996,297.765,167.774,288.681,128.716,179.501,428.036,213.013,396.147,290.492,459.26,333.25,604.208,535.843,218.827,379.209,623.314,309.742,1047.188,2658.829,741.273,2765.267,2446.593,900.038,1232.736,817.002,2687.132,3309.465,1746.003,699.151,574.566,262.053,505.975,270.49,1023.427,533.5,488.001,536.457,432.03,945.469,1080.591,611.695,611.907,1095.621,485.481,688.799,375.255,1322.925,2347.935,1281.055,1713.871,563.816,371.289,1137.167,1011.662,433.968,4755.422,2060.545,1118.297,1058.42,991.226,512.798,725.336,476.284,633.408,903.175,644.941,2829.545,1218.33,1149.1,755.961,1252.379,2399.314,350.433,457.851,727.54,748.377,2585.751,4337.831,2453.675,1355.272,2073.169,1425.068,1751.715,901.639,353.899,368.582,636.142,1082.148,271.744,399.517,439.441,377.24,330.026,233.732,285.884,308.136,639.158,734.67,567.183,310.671,995.761,12392.217,5461.011,2988.344,5529.668,2618.77,11929.186,2928.894,5355.073,1533.817,2310.282,2210.125,1805.742,2500.52,3272.782,1332.249,2270.554,2483.668,8790.039,13105.425,16039.554,8317.661,6814.545,3909.444,2716.544,2823.368,2433.446,3042.327,4014.336,2680.476,2166.982,8299.153,2107.079,2585.491,3224.808,2437.339,2865.693,1574.387,2219.401,2214.305,2410.523,1263.301,1232.671,1213.058,1789.33,827.919,1530.653,1732.94,1439.558,1552.842,1345.879,1394.187,3147.626,6162.965,7032.083,1330.471,2505.725,7118.551,2288.653,1286.682,1102.423,3249.307,1670.88,2218.379,2946.052,2525.484,1719.79,1630.798,1474.484,1299.503,434.158,1462.856,1914.008,1336.711,872.552,2661.102,1921.851,1223.061,892.979,1675.459,2747.98,3398.563,4782.692,3130.671,914.08,3275.661,3677.987,1920.096,1582.481,626.202,1699.704,3016.389,2348.542,3936.201,1440.961,2551.41,2929.114,3910.54,1731.929,1423.134,1630.803,823.665,1596.309,1843.181,1446.542,850.694,2297.843,856.543,883.961,501.157,1621.147,856.971,707.791,1351.166,795.198,938.608,485.179,455.671,1061.071,580.457,263.109,715.892,1587.285,993.923,1251.255,2659.143,996.502,853.854,744.677,711.983,3232.026,3662.831,807.0,555.69,1043.709,1292.106,987.334,375.225,316.734,438.411,289.699,537.944,942.885,797.012,1077.267,379.583,611.293,521.083,934.505,1175.247,499.493,1141.633,563.435,872.319,811.753,773.096,1412.344,3620.225,4714.694,669.244,1065.55,1598.224,847.615,1923.708,1020.52,1883.069,3076.446,2134.064,1453.728,11270.233,2936.896,6307.007,2166.477,1551.387,1853.874,1372.167,2298.452,1069.092,896.017,1027.708,1205.234,1794.761,2595.809,890.418,848.032,650.893,1088.28,200.664,502.739,575.785,921.978,808.706,3029.201,602.68,309.435,495.715,959.404,569.062,492.893,686.058,1227.456,2415.351,6515.3,1556.79,953.548,1004.564,1320.414,4557.466,1098.609,911.352,1232.801,1241.033,1343.423,769.908,447.129,647.478,822.26,767.131,569.507,437.851,1190.093,378.865,290.814,440.004,366.664,1587.445,389.51,1948.052,1274.222,418.255,155.696,281.607,310.623,166.909,303.48,700.347,271.28,110.636,520.183,820.569,810.861,1088.369,858.322,1295.596,2094.312,1503.768,1037.796,500.033,559.479,227.634,704.975,702.474,560.973,1364.022,508.316,349.588,640.477,527.515,1470.646,248.411,315.355,194.49,727.557,208.254,329.772,769.204,559.27,220.603,179.101,514.706,337.329,450.668,1473.433,2256.979,539.366,738.786,421.76,808.357,281.104,544.472,1304.849,1022.835,193.211,205.636,773.849,215.729,546.43,625.921,225.712,512.885,292.199,264.804,592.964,1204.967,418.402,742.071,437.497,433.652,1078.844,331.74,1040.031,872.767,1004.157,722.758,430.616,408.399,245.932,484.168,3624.12,976.418,394.652,1682.369,625.343,239.747,380.251,1597.606,848.428,708.537,664.832,371.165,750.007,1026.259,843.009,1023.456,1917.749,952.579,870.347,502.286,1363.581,780.743,1448.612,12431.885,6893.299,8886.959,3907.062,9540.759,4740.252,5895.644,16625.626,6312.555,3615.152,3860.571,2514.261,2760.668,1523.597,1871.628,2528.961,7365.0,8920.169,5768.383,6710.649,3346.652,4463.499,3666.88,6450.55,4832.119,5510.211,8186.365,3537.525,8281.314,10045.157,6383.577,5079.938,3813.839,3660.97,5728.121,7917.184,2421.103,5177.868,3136.173,2217.563,3832.957,1720.129,1543.371,1636.799,8034.61,4788.474,3850.793,1514.508,5392.819,1927.194,1163.751,1585.945,1209.542,1998.829,877.24,823.488,781.809,826.931,913.803,742.025,3002.547,1367.89,1044.189,1100.946,2047.804,2818.993,1017.674,1889.338,1032.258,579.044,748.169,927.378,1345.4,516.194,810.503,845.27,650.086,556.495,716.068,3167.786,1365.503,1120.129,1632.121,494.557,495.811,356.546,271.948,320.235,366.049,349.466,550.775,843.882,2000.798,961.087,470.513,438.616,819.214,594.347,286.774,251.089,602.025,267.413,278.638,425.458,282.646,1696.154,921.061,374.925,625.157,346.19,1447.882,338.668,501.822,996.179,1126.58,967.442,927.906,4074.406,898.707,1271.993,720.906,758.176,506.787,1384.601,2630.754,1180.051,296.364,385.161,594.547,303.281,206.3,1509.706,417.533,430.407,350.638,614.913,217.67,109.158,296.924,307.087,827.106,850.038,562.773,402.213,853.225,619.708,185.33,229.867,207.248,255.341,347.69,914.271,348.17,280.522,461.744,242.677,1689.641,1235.344,943.835,1181.751,733.24,268.104,381.13,818.733,1090.052,548.373,754.94,989.387,773.47,1064.937,1070.959,703.035,2594.209,1302.569,682.392,552.382,309.738,466.737,793.098,2376.261,856.232,754.519,404.143,168.334,1477.862,943.652,711.273,1748.362,1006.485,789.572,594.946,279.75,178.433,290.649,215.983,493.113,338.384,762.448,611.586,1334.322,294.505,303.188,134.407,516.94,1550.403,1126.795,485.425,622.304,1249.031,373.648,346.683,211.699,519.095,1088.352,529.813,523.314,772.507,209.114,687.664,329.146,352.705,444.147,395.78,325.339,513.402,784.247,986.546,1584.942,2185.948,785.321,729.112,453.787,897.861,262.964,404.52,171.003,580.24,118.207,406.641,160.17,743.848,437.773,1369.397,191.219,1229.096,398.903,403.85,322.726,970.586,568.304,478.038,404.745,1239.612,454.913,442.573,288.41,264.373,524.088,130.674,443.39,586.952,167.731,307.728,263.88,311.737,866.873,1745.621,745.983,309.615,328.348,383.704,1118.281,450.373,387.296,188.089,629.117,158.39,829.748,364.026,136.85,324.278,1060.597,707.567,409.192,443.098,510.64,923.325,605.203,716.174,198.6,554.733,1635.338,1598.253,4035.924,1229.607,1608.824,2794.958,636.725,1971.132,1481.98,1093.152,3786.967,1736.518,1289.176,1179.711,677.348,1259.158,841.34,248.067,451.306,413.411,883.511,395.721,304.827,431.303,1106.7,599.37,354.735,747.528,810.7,835.158,481.175,629.481,323.974,608.739,557.978,525.368,1225.958,840.532,1067.311,718.545,716.335,312.894,563.057,1017.419,618.553,512.007,588.984,294.695,278.158,217.027,537.444,269.51,225.5,501.376,691.99,483.791,127.283,709.697,467.43,307.414,507.697,422.858,256.808,1153.716,1055.198,1414.849,1144.706,1064.626,623.477,877.503,444.839,742.027,415.472,677.548,1051.317,655.2,370.676,1077.143,1051.053,784.457,4542.468,1733.555,1213.929,1538.198,2121.016,918.853,882.448,654.86,1728.875,631.103,301.013,661.938,933.172,370.951,202.456,406.614,314.65,592.089,26.727],\"type\":\"histogram\"},{\"marker\":{\"color\":\"#D2691E\"},\"mode\":\"lines\",\"name\":\"KDE\",\"x\":[3045.88,3047.2852525252524,3048.690505050505,3050.0957575757575,3051.5010101010103,3052.9062626262626,3054.3115151515153,3055.7167676767676,3057.1220202020204,3058.5272727272727,3059.9325252525255,3061.337777777778,3062.7430303030305,3064.148282828283,3065.5535353535356,3066.958787878788,3068.3640404040407,3069.769292929293,3071.1745454545458,3072.579797979798,3073.9850505050504,3075.390303030303,3076.7955555555554,3078.200808080808,3079.6060606060605,3081.0113131313133,3082.4165656565656,3083.8218181818183,3085.2270707070707,3086.6323232323234,3088.0375757575757,3089.4428282828285,3090.848080808081,3092.2533333333336,3093.658585858586,3095.0638383838386,3096.469090909091,3097.8743434343437,3099.279595959596,3100.6848484848488,3102.090101010101,3103.4953535353534,3104.900606060606,3106.3058585858585,3107.711111111111,3109.1163636363635,3110.5216161616163,3111.9268686868686,3113.3321212121214,3114.7373737373737,3116.1426262626264,3117.5478787878787,3118.9531313131315,3120.358383838384,3121.7636363636366,3123.168888888889,3124.5741414141416,3125.979393939394,3127.3846464646467,3128.789898989899,3130.1951515151513,3131.600404040404,3133.0056565656564,3134.410909090909,3135.8161616161615,3137.2214141414142,3138.6266666666666,3140.0319191919193,3141.4371717171716,3142.8424242424244,3144.2476767676767,3145.6529292929295,3147.0581818181818,3148.4634343434345,3149.868686868687,3151.2739393939396,3152.679191919192,3154.0844444444447,3155.489696969697,3156.8949494949493,3158.300202020202,3159.7054545454544,3161.110707070707,3162.5159595959594,3163.921212121212,3165.3264646464645,3166.7317171717173,3168.1369696969696,3169.5422222222223,3170.9474747474746,3172.3527272727274,3173.7579797979797,3175.1632323232325,3176.568484848485,3177.9737373737375,3179.37898989899,3180.7842424242426,3182.189494949495,3183.5947474747472,3185.0],\"y\":[0.001832905419240713,0.0015170993773343943,0.0009811990405335794,0.0010910781869862753,0.001662787664619852,0.002276584209048065,0.003017679469815101,0.004091626542089751,0.005452920992053675,0.006818537038424319,0.0076664779747402535,0.007643887894555952,0.007344902200072563,0.00827273925583825,0.011220488982456029,0.01494681923660121,0.016672754263443067,0.015298211710060586,0.013000656836147326,0.01136447782936633,0.009905415113226086,0.007991277793749363,0.005915182769079316,0.004603614839180802,0.004340216581875808,0.004677084159634987,0.004804286094145265,0.003945664227425191,0.0025142257578005694,0.0014727830724446968,0.0011591657181478472,0.0015827815995405762,0.0026670028851318566,0.003810420375174876,0.004026389180218125,0.003107185282237217,0.001940076730122543,0.0013880150787554427,0.0015444989246854268,0.0023609061649200076,0.0037401025635127546,0.005029582983599697,0.005321434602966492,0.004778565138234207,0.004284633110071723,0.004142142333983544,0.004650245486454227,0.005790340541463709,0.0068018904562159735,0.007335214235017366,0.008011875247544532,0.009032977214800161,0.009862320541122151,0.01015891479438546,0.010077897051723251,0.009700191176833918,0.00944402389099212,0.010385374840307136,0.012487699392384763,0.014125807036359036,0.014335489751832464,0.013760773754902053,0.013070724606546664,0.012663567468535765,0.013407581002278695,0.0152918031502357,0.01671953731557649,0.01690758767766308,0.0165814827586469,0.01570664895796692,0.014255369464538745,0.013369278115428072,0.012993378487870194,0.011780241643981209,0.009592167939552232,0.007696976248164002,0.006823155935995189,0.006619023196157732,0.007110669748385475,0.008153180108070628,0.008357004173573936,0.007467120695723313,0.006541623694037697,0.005979030384818917,0.00565790251287167,0.005607397002735248,0.00599245781550611,0.006338445734583271,0.0060092038421343755,0.0053319582929410685,0.004754442260061802,0.004333231721163359,0.004227903631578969,0.004279536987396199,0.003930156107007355,0.0029754130410062354,0.0017041868280610027,0.0007672145372132436,0.0005056108010257643,0.0005155116532610217],\"type\":\"scatter\"},{\"marker\":{\"color\":\"black\",\"size\":10},\"mode\":\"markers\",\"name\":\"Peaks\",\"x\":[3059.9325252525255,3068.3640404040407,3082.4165656565656,3093.658585858586,3104.900606060606,3120.358383838384,3130.1951515151513,3140.0319191919193,3158.300202020202,3168.1369696969696,3176.568484848485],\"y\":[0.0076664779747402535,0.016672754263443067,0.004804286094145265,0.004026389180218125,0.005321434602966492,0.01015891479438546,0.014335489751832464,0.01690758767766308,0.008357004173573936,0.006338445734583271,0.004279536987396199],\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"shapes\":[{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3059.9325252525255,\"x1\":3059.9325252525255,\"xref\":\"x\",\"y0\":0,\"y1\":0.007344902200072563,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3068.3640404040407,\"x1\":3068.3640404040407,\"xref\":\"x\",\"y0\":0,\"y1\":0.001159165718147847,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3082.4165656565656,\"x1\":3082.4165656565656,\"xref\":\"x\",\"y0\":0,\"y1\":0.004340216581875808,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3093.658585858586,\"x1\":3093.658585858586,\"xref\":\"x\",\"y0\":0,\"y1\":0.0013880150787554425,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3104.900606060606,\"x1\":3104.900606060606,\"xref\":\"x\",\"y0\":0,\"y1\":0.004142142333983544,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3120.358383838384,\"x1\":3120.358383838384,\"xref\":\"x\",\"y0\":0,\"y1\":0.00944402389099212,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3130.1951515151513,\"x1\":3130.1951515151513,\"xref\":\"x\",\"y0\":0,\"y1\":0.012663567468535765,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3140.0319191919193,\"x1\":3140.0319191919193,\"xref\":\"x\",\"y0\":0,\"y1\":0.0009811990405335785,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3158.300202020202,\"x1\":3158.300202020202,\"xref\":\"x\",\"y0\":0,\"y1\":0.006619023196157732,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3168.1369696969696,\"x1\":3168.1369696969696,\"xref\":\"x\",\"y0\":0,\"y1\":0.005607397002735248,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3176.568484848485,\"x1\":3176.568484848485,\"xref\":\"x\",\"y0\":0,\"y1\":0.004227903631578969,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3062.5744,\"xref\":\"x\",\"y0\":0.007505690087406408,\"y1\":0.007505690087406408,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.008915959990795457,\"y1\":0.008915959990795457,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3079.2688000000003,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.0045722513380105365,\"y1\":0.0045722513380105365,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3097.3544,\"xref\":\"x\",\"y0\":0.002707202129486784,\"y1\":0.002707202129486784,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3108.484,\"xref\":\"x\",\"y0\":0.004731788468475018,\"y1\":0.004731788468475018,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3123.7872,\"xref\":\"x\",\"y0\":0.00980146934268879,\"y1\":0.00980146934268879,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3133.5256,\"xref\":\"x\",\"y0\":0.013499528610184115,\"y1\":0.013499528610184115,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.00894439335909833,\"y1\":0.00894439335909833,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3153.0024,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.007488013684865834,\"y1\":0.007488013684865834,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3164.132,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.005972921368659259,\"y1\":0.005972921368659259,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3173.8704,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.004253720309487584,\"y1\":0.004253720309487584,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3059.9325252525255,\"x1\":3059.9325252525255,\"xref\":\"x\",\"y0\":0,\"y1\":0.0076664779747402535,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3068.3640404040407,\"x1\":3068.3640404040407,\"xref\":\"x\",\"y0\":0,\"y1\":0.016672754263443067,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3082.4165656565656,\"x1\":3082.4165656565656,\"xref\":\"x\",\"y0\":0,\"y1\":0.004804286094145265,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3093.658585858586,\"x1\":3093.658585858586,\"xref\":\"x\",\"y0\":0,\"y1\":0.004026389180218125,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3104.900606060606,\"x1\":3104.900606060606,\"xref\":\"x\",\"y0\":0,\"y1\":0.005321434602966492,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3120.358383838384,\"x1\":3120.358383838384,\"xref\":\"x\",\"y0\":0,\"y1\":0.01015891479438546,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3130.1951515151513,\"x1\":3130.1951515151513,\"xref\":\"x\",\"y0\":0,\"y1\":0.014335489751832464,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3140.0319191919193,\"x1\":3140.0319191919193,\"xref\":\"x\",\"y0\":0,\"y1\":0.01690758767766308,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3158.300202020202,\"x1\":3158.300202020202,\"xref\":\"x\",\"y0\":0,\"y1\":0.008357004173573936,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3168.1369696969696,\"x1\":3168.1369696969696,\"xref\":\"x\",\"y0\":0,\"y1\":0.006338445734583271,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3176.568484848485,\"x1\":3176.568484848485,\"xref\":\"x\",\"y0\":0,\"y1\":0.004279536987396199,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3062.5744,\"xref\":\"x\",\"y0\":0.007505690087406408,\"y1\":0.007505690087406408,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.008915959990795457,\"y1\":0.008915959990795457,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3079.2688000000003,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.0045722513380105365,\"y1\":0.0045722513380105365,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3097.3544,\"xref\":\"x\",\"y0\":0.002707202129486784,\"y1\":0.002707202129486784,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3108.484,\"xref\":\"x\",\"y0\":0.004731788468475018,\"y1\":0.004731788468475018,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3123.7872,\"xref\":\"x\",\"y0\":0.00980146934268879,\"y1\":0.00980146934268879,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3133.5256,\"xref\":\"x\",\"y0\":0.013499528610184115,\"y1\":0.013499528610184115,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.00894439335909833,\"y1\":0.00894439335909833,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3153.0024,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.007488013684865834,\"y1\":0.007488013684865834,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3164.132,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.005972921368659259,\"y1\":0.005972921368659259,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3173.8704,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.004253720309487584,\"y1\":0.004253720309487584,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3059.9325252525255,\"x1\":3059.9325252525255,\"xref\":\"x\",\"y0\":0,\"y1\":0.0076664779747402535,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3068.3640404040407,\"x1\":3068.3640404040407,\"xref\":\"x\",\"y0\":0,\"y1\":0.016672754263443067,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3082.4165656565656,\"x1\":3082.4165656565656,\"xref\":\"x\",\"y0\":0,\"y1\":0.004804286094145265,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3093.658585858586,\"x1\":3093.658585858586,\"xref\":\"x\",\"y0\":0,\"y1\":0.004026389180218125,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3104.900606060606,\"x1\":3104.900606060606,\"xref\":\"x\",\"y0\":0,\"y1\":0.005321434602966492,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3120.358383838384,\"x1\":3120.358383838384,\"xref\":\"x\",\"y0\":0,\"y1\":0.01015891479438546,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3130.1951515151513,\"x1\":3130.1951515151513,\"xref\":\"x\",\"y0\":0,\"y1\":0.014335489751832464,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3140.0319191919193,\"x1\":3140.0319191919193,\"xref\":\"x\",\"y0\":0,\"y1\":0.01690758767766308,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3158.300202020202,\"x1\":3158.300202020202,\"xref\":\"x\",\"y0\":0,\"y1\":0.008357004173573936,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3168.1369696969696,\"x1\":3168.1369696969696,\"xref\":\"x\",\"y0\":0,\"y1\":0.006338445734583271,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3176.568484848485,\"x1\":3176.568484848485,\"xref\":\"x\",\"y0\":0,\"y1\":0.004279536987396199,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3062.5744,\"xref\":\"x\",\"y0\":0.007505690087406408,\"y1\":0.007505690087406408,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.008915959990795457,\"y1\":0.008915959990795457,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3079.2688000000003,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.0045722513380105365,\"y1\":0.0045722513380105365,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3097.3544,\"xref\":\"x\",\"y0\":0.002707202129486784,\"y1\":0.002707202129486784,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3108.484,\"xref\":\"x\",\"y0\":0.004731788468475018,\"y1\":0.004731788468475018,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3123.7872,\"xref\":\"x\",\"y0\":0.00980146934268879,\"y1\":0.00980146934268879,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3133.5256,\"xref\":\"x\",\"y0\":0.013499528610184115,\"y1\":0.013499528610184115,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.00894439335909833,\"y1\":0.00894439335909833,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3153.0024,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.007488013684865834,\"y1\":0.007488013684865834,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3164.132,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.005972921368659259,\"y1\":0.005972921368659259,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3173.8704,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.004253720309487584,\"y1\":0.004253720309487584,\"yref\":\"y\"}]},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('f0efc821-18d5-43b5-ad6e-1133ea0ad873');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}}]},{"cell_type":"code","source":["# peaks  # ndarray\n","# kdx  # ndarray\n","# kdy  # ndarray\n","# kdx.min()\n","left_base * ticks_per_sample\n","# volume"],"metadata":{"id":"zqj944n-WzyZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(peak_y)\n","print(peak_props['prominences'])\n","peak_props"],"metadata":{"id":"Rvqv0RGojo9h"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##### dump"],"metadata":{"id":"qsyPhNR8yP1c"}},{"cell_type":"code","source":["\n","def fill_na(arr_, iin, iout, fill_value):\n","  arr_[iin:iout + 1] = fill_value\n","\n","  # 1. cross_point 찾기\n","  #   a. cross_over & cross_under\n","# def wave_range(t_df):\n","tf_entry = 'T'\n","tf_entry_num = to_itvnum(tf_entry)\n","base_shift_size = 3 # 3T used\n","\n","np_timeidx = np.array([intmin_np(date_) for date_ in t_df.index.to_numpy()])\n","\n","close = t_df.close.to_numpy()\n","b1_close = t_df.close.shift(tf_entry_num).to_numpy()  # 일단, 1 로 설정\n","dc_base_3T = t_df.dc_base_3T.to_numpy()\n","b1_dc_base_3T = t_df.dc_base_3T.shift(3).to_numpy()\n","\n","crossover = (close > dc_base_3T) & (b1_dc_base_3T > b1_close) & (np_timeidx % tf_entry_num == tf_entry_num - 1)\n","crossunder = (close < dc_base_3T) & (b1_dc_base_3T < b1_close) & (np_timeidx % tf_entry_num == tf_entry_num - 1)\n","\n","# 1. crossover ~ crossunder's high (over 과 under 의 index 포함해야함)\n","# 2. crossunder ~ crossover's low\n","high = t_df.high.to_numpy()\n","low = t_df.low.to_numpy()\n","\n","# print(np.sum(crossover))\n","# print(np.sum(crossunder))\n","\n","# pairing -> 더 긴 배열의 시작 index 가 더 작음\n","co_idx = np.argwhere(crossover)\n","cu_idx = np.argwhere(crossunder)\n","\n","print(co_idx)\n","print(cu_idx)\n","\n","# 2. 길이가 다른 경우\n","#  a. 길이가 긴 쪽이 먼저\n","if len(co_idx) > len(cu_idx):\n","  upper_zone = np.hstack((co_idx[:-1], cu_idx))  \n","  lower_zone = np.hstack((cu_idx, co_idx[1:]))  \n","elif len(co_idx) < len(cu_idx):\n","  upper_zone = np.hstack((co_idx, cu_idx[1:]))  \n","  lower_zone = np.hstack((cu_idx[:-1], co_idx))  \n","else:\n","  # 1. 길이가 같은 경우\n","  #   뭐가 먼저인지 판단하는 logic\n","  if co_idx[0] < cu_idx[0]:\n","    #   a. co 가 먼저인 경우\n","    upper_zone = np.hstack((co_idx, cu_idx))  \n","    lower_zone = np.hstack((cu_idx[:-1], co_idx[1:]))  \n","  else:\n","    #   b. cu 가 먼저인 경우\n","    upper_zone = np.hstack((co_idx[:-1], cu_idx[1:]))  \n","    lower_zone = np.hstack((cu_idx, co_idx))  \n","\n","# print(upper_zone)\n","# print(lower_zone)\n","\n","# make envelope\n","wave_high = np.full_like(high, np.nan)\n","wave_low = np.full_like(low, np.nan)\n","\n","fill_upper_zone = np.hstack((upper_zone[:-1, [1]], upper_zone[1:, [1]]))\n","fill_lower_zone = np.hstack((lower_zone[:-1, [1]], lower_zone[1:, [1]]))\n","\n","for items in zip(fill_upper_zone, upper_zone):\n","  print(items)\n","\n","[fill_na(wave_high, f_iin, f_iout, high[iin:iout + 1].max()) for (f_iin, f_iout), (iin, iout) in zip(fill_upper_zone, upper_zone)]\n","[fill_na(wave_low, f_iin, f_iout, low[iin:iout + 1].min()) for (f_iin, f_iout), (iin, iout) in zip(fill_lower_zone, lower_zone)]\n","# [high[iin:iout + 1].max() for iin, iout in upper_zone]\n","# [low[iin:iout + 1].min() for iin, iout in lower_zone]\n","\n","# t_df['fill_wave_high'] = pd.Series(wave_high).bfill().to_numpy()\n","# t_df['fill_wave_low'] = pd.Series(wave_low).bfill().to_numpy()\n","# t_df['fill_wave_high'] = pd.Series(wave_high).ffill().to_numpy()\n","# t_df['fill_wave_low'] = pd.Series(wave_low).ffill().to_numpy()\n","t_df['fill_wave_high'] = wave_high\n","t_df['fill_wave_low'] = wave_low\n","\n","  # return "],"metadata":{"id":"9VOxiJB1yUTI"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xpyP5t8Ht_pE","jp-MarkdownHeadingCollapsed":true,"tags":[]},"source":["### calc recursive indi's min_period"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"N1Hbm4OA4Tkk"},"outputs":[],"source":["ticker_prcn = get_precision_by_price(res_df.close.iloc[-1]) + 2\n","\n","target_len = 300000\n","slice_len_list = list(range(50, 10000, 100))\n","slice_len_list.insert(0, target_len)\n","\n","start_0 = time.time()\n","# prev_int_, prev_pnts_ = None, None\n","offset = 1\n","\n","for sl_idx, sample_len in enumerate(slice_len_list):\n","\n","  sample_df = res_df.iloc[-sample_len -offset:-offset]\n","  sample_len2 = sample_len\n","\n","  # --------- input using indi.s --------- #\n","  # res = ema_v0(sample_df['close'], 190)\n","  res = rsi(sample_df, 14)\n","\n","    #    to_htf()    #\n","  # df_5T = to_htf(sample_df, itv_='5T', offset='1h')\n","  # sample_len2 = len(df_5T)\n","\n","  # # --------- input using htf_indi. --------- #\n","  # res = ema(df_5T['close'], 195)\n","  # -------------------------------------- #\n","\n","  res_last_row = res.iloc[-1]\n","  if pd.isnull(res_last_row):\n","    continue\n","\n","  # print(res_last_row)\n","  # break\n","\n","  # sample_df = sample_df.join(to_lower_tf_v2(sample_df, df_5T, [-1]), how='inner')\n","\n","\n","  #   자리수 분할 계산    #\n","  int_, points_ = str(res_last_row).split('.')\n","  pnts_ = points_[:ticker_prcn]\n","\n","  if sl_idx == 0:\n","    target_int_ = int_\n","    target_pnts_ = pnts_\n","    print(\"target {} ({}) -> {} {}\".format(sample_len, sample_len2, int_, points_))\n","\n","  else:\n","    if target_int_ == int_ and target_pnts_ == pnts_:\n","      # print(sample_len, \"({})\".format(sample_len2), '->', int_, pnts_, end='\\n\\n')\n","      print(\"{} ({}) -> {} {}\\n\".format(sample_len, sample_len2, int_, points_))\n","      break\n","\n","print(time.time() - start_0)  # (1301)(1361)(1301)"]},{"cell_type":"markdown","metadata":{"id":"rrIGjmUzqU-D","tags":[]},"source":["## import utils & config"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"SeJan_0t95yL","executionInfo":{"status":"ok","timestamp":1648859579719,"user_tz":-540,"elapsed":2842,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["frame_ver = \"0114_htf\"\n","ID_arr = np.array(['v3', 'v5_2'])\n","\n","utils_public_name = \"{}.utils.{}_utils_public\".format(strat_pkg, frame_ver)\n","utils_public_lib = importlib.import_module(utils_public_name)\n","utils_public = utils_public_lib   # temporary\n","\n","u_name_list = [\"{}.utils.{}_utils_{}\".format(strat_pkg, frame_ver, id_) for id_ in ID_arr]\n","utils_arr = np.array([importlib.import_module(u_name) for u_name in u_name_list])\n","\n","config_name_list = [\"{}_config_{}.json\".format(frame_ver, id_) for id_ in ID_arr]\n","cfg_path_list = [os.path.join(current_path, strat_pkg, \"config\", name_) for name_ in config_name_list]\n","cfg_file_list = [open(cfg_path) for cfg_path in cfg_path_list]\n","config_arr = np.array([EasyDict(json.load(cfg_)) for cfg_ in cfg_file_list])\n","\n","# ------ opened files should be closed --> 닫지 않으면 reopen 시 error occurs ------ #\n","_ = [cfg_.close() for cfg_ in cfg_file_list]\n","show_plot = 1   # idep's var - do not touch"]},{"cell_type":"markdown","metadata":{"id":"leSQlImg4_9L","jp-MarkdownHeadingCollapsed":true,"tags":[]},"source":["### utils_"]},{"cell_type":"code","execution_count":36,"metadata":{"id":"CB2yZdQ95Cdg","executionInfo":{"status":"ok","timestamp":1648861193625,"user_tz":-540,"elapsed":552,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# from funcs.funcs_indicator_candlescore import *\n","# import numpy as np\n","\n","def get_line(touch_idx, rtc_):\n","  touch_idx_copy = touch_idx.copy()\n","  touch_line = np.full_like(rtc_, np.nan)\n","\n","  nan_idx = np.isnan(touch_idx_copy)\n","  touch_idx_copy[nan_idx] = 0   # for indexing array\n","  touch_line = rtc_[touch_idx_copy.astype(int)]\n","  touch_line[nan_idx] = np.nan   # for true comp.\n","\n","  return touch_line\n","\n","\n","def enlist_rtc(res_df, config, np_timeidx):\n","    strat_version = config.strat_version\n","    # ------------ rtc_gap ------------ #    \n","    short_epout_1_, long_epout_1_ = 'short_epout_1_{}'.format(strat_version), 'long_epout_1_{}'.format(strat_version)\n","    short_epout_0_, long_epout_0_ = 'short_epout_0_{}'.format(strat_version), 'long_epout_0_{}'.format(strat_version)\n","    short_tp_1_, long_tp_1_ = 'short_tp_1_{}'.format(strat_version), 'long_tp_1_{}'.format(strat_version)\n","    short_tp_0_, long_tp_0_ = 'short_tp_0_{}'.format(strat_version), 'long_tp_0_{}'.format(strat_version)\n","        \n","    b1_itv_num = to_itvnum(config.loc_set.point.epout_itv0)\n","    # b2_itv_num = to_itvnum(config.loc_set.point.epout_itv0) * 2  # multi 2 for imb_v2\n","    \n","    res_df[short_tp_1_] = res_df['close_{}'.format(config.loc_set.point.tp_itv1)]  # rtc 의 기준이 되어줌 (ei_k 도 포함)\n","    res_df[short_tp_0_] = res_df['low_{}'.format(config.loc_set.point.tp_itv0)].shift(b1_itv_num)\n","    res_df[long_tp_1_] = res_df['close_{}'.format(config.loc_set.point.tp_itv1)]\n","    res_df[long_tp_0_] = res_df['high_{}'.format(config.loc_set.point.tp_itv0)].shift(b1_itv_num)\n","\n","    # res_df[short_epout_1_] = res_df['close_{}'.format(config.loc_set.point.epout_itv1)]  # rtc 의 기준이 되어줌 (ei_k 도 포함)\n","    # res_df[short_epout_0_] = res_df['low_{}'.format(config.loc_set.point.epout_itv0)].shift(b1_itv_num)\n","    # res_df[long_epout_1_] = res_df['close_{}'.format(config.loc_set.point.epout_itv1)]\n","    # res_df[long_epout_0_] = res_df['high_{}'.format(config.loc_set.point.epout_itv0)].shift(b1_itv_num)\n","\n","    wave_itv = 'T'\n","    res_df[short_epout_1_] = res_df['wave_lower_{}'.format(wave_itv)]  # rtc 의 기준이 되어줌 (ei_k 도 포함)\n","    res_df[short_epout_0_] = res_df['wave_upper_{}'.format(wave_itv)]\n","    res_df[long_epout_1_] = res_df['wave_upper_{}'.format(wave_itv)]\n","    res_df[long_epout_0_] = res_df['wave_lower_{}'.format(wave_itv)]\n","\n","    # ------ inversion ------ #\n","    if config.pos_set.short_inversion or config.pos_set.long_inversion:\n","      res_df.rename({short_tp_1_: long_tp_1_, long_tp_1_: short_tp_1_}, axis=1, inplace=True)\n","      res_df.rename({short_tp_0_: long_tp_0_, long_tp_0_: short_tp_0_}, axis=1, inplace=True)\n","      res_df.rename({short_epout_1_: long_epout_1_, long_epout_1_: short_epout_1_}, axis=1, inplace=True)\n","      res_df.rename({short_epout_0_: long_epout_0_, long_epout_0_: short_epout_0_}, axis=1, inplace=True)\n","\n","    res_df['short_tp_gap_{}'.format(strat_version)] = abs(res_df[short_tp_1_] - res_df[short_tp_0_])\n","    res_df['long_tp_gap_{}'.format(strat_version)] = abs(res_df[long_tp_1_] - res_df[long_tp_0_])\n","    res_df['short_epout_gap_{}'.format(strat_version)] = abs(res_df[short_epout_1_] - res_df[short_epout_0_])\n","    res_df['long_epout_gap_{}'.format(strat_version)] = abs(res_df[long_epout_1_] - res_df[long_epout_0_])\n","    \n","    # ------------ dtk_gap ------------ #\n","    # res_df['short_dtk_1_{}'.format(strat_version)] = res_df['bb_lower_%s' % config.loc_set.zone.dtk_itv]\n","    # res_df['short_dtk_0_{}'.format(strat_version)] = res_df['dc_upper_%s' % config.loc_set.zone.dtk_itv]\n","    # res_df['long_dtk_1_{}'.format(strat_version)] = res_df['bb_upper_%s' % config.loc_set.zone.dtk_itv]\n","    # res_df['long_dtk_0_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.zone.dtk_itv]\n","\n","    # res_df['short_dtk_gap_{}'.format(strat_version)] = abs(\n","    #     res_df['short_dtk_0_{}'.format(strat_version)] - res_df['short_dtk_1_{}'.format(strat_version)])\n","    # res_df['long_dtk_gap_{}'.format(strat_version)] = abs(\n","    #     res_df['long_dtk_1_{}'.format(strat_version)] - res_df['long_dtk_0_{}'.format(strat_version)])\n","\n","    return res_df\n","\n","\n","def enlist_tr(res_df, config, np_timeidx, mode='OPEN'):\n","    strat_version = config.strat_version\n","    # ---------------- point definition : get open_res ---------------- #    \n","    len_df = len(res_df)\n","    short_open_res = np.ones(len_df)\n","    long_open_res = np.ones(len_df)\n","    \n","    short_tp_1_col, short_tp_0_col, short_tp_gap_col = 'short_tp_1_{}'.format(strat_version), 'short_tp_0_{}'.format(strat_version), 'short_tp_gap_{}'.format(strat_version) \n","    long_tp_1_col, long_tp_0_col, long_tp_gap_col = 'long_tp_1_{}'.format(strat_version), 'long_tp_0_{}'.format(strat_version), 'long_tp_gap_{}'.format(strat_version) \n","    short_epout_1_col, short_epout_0_col, short_epout_gap_col = 'short_epout_1_{}'.format(strat_version), 'short_epout_0_{}'.format(strat_version), 'short_epout_gap_{}'.format(strat_version) \n","    long_epout_1_col, long_epout_0_col, long_epout_gap_col = 'long_epout_1_{}'.format(strat_version), 'long_epout_0_{}'.format(strat_version), 'long_epout_gap_{}'.format(strat_version) \n","\n","    tp_cols = [short_tp_1_col, short_tp_0_col, short_tp_gap_col, long_tp_1_col, long_tp_0_col, long_tp_gap_col]   # Todo - public_indi 이전에 해야할지도 모름\n","    epout_cols = [short_epout_1_col, short_epout_0_col, short_epout_gap_col, long_epout_1_col, long_epout_0_col, long_epout_gap_col]   # Todo - public_indi 이전에 해야할지도 모름\n","    # data_cols = ['open', 'high', 'low']   # Todo - public_indi 이전에 해야할지도 모름 # 'close', 'haopen', 'hahigh', 'halow', 'haclose'\n","    data_cols = ['open_{}'.format(config.loc_set.point.epout_itv0), 'close_{}'.format(config.loc_set.point.epout_itv0)]   # Todo - public_indi 이전에 해야할지도 모름 # 'close', 'haopen', 'hahigh', 'halow', 'haclose'\n","\n","    short_tp_1_, short_tp_0_, short_tp_gap_, long_tp_1_, long_tp_0_, long_tp_gap_ = [res_df[col_].to_numpy() for col_ in tp_cols]\n","    short_epout_1_, short_epout_0_, short_epout_gap_, long_epout_1_, long_epout_0_, long_epout_gap_ = [res_df[col_].to_numpy() for col_ in epout_cols]\n","    \n","    b1_itv_num = to_itvnum(config.loc_set.point.epout_itv0)\n","    b1_open_, b1_close_ = [res_df[col_].shift(b1_itv_num).to_numpy() for col_ in data_cols]\n","        \n","    tf_entry = to_itvnum(config.loc_set.point.tf_entry)\n","    short_open_res *= np_timeidx % tf_entry == tf_entry - 1\n","    short_open_res *= b1_open_ <= b1_close_\n","\n","    long_open_res *= np_timeidx % tf_entry == tf_entry - 1 \n","    long_open_res *= b1_open_ >= b1_close_   # 이전 candle 음봉\n","\n","        # --------------- tp --------------- #\n","    tpg = config.tr_set.tp_gap\n","    res_df['short_tp_{}'.format(strat_version)] = short_tp_1_ - short_tp_gap_ * tpg\n","    res_df['long_tp_{}'.format(strat_version)] = long_tp_1_ + long_tp_gap_ * tpg\n","\n","    # ---------------- epout ---------------- #\n","    # -------- limit_ep -------- #\n","    if config.ep_set.entry_type == \"LIMIT\":\n","      epg = config.tr_set.ep_gap\n","      res_df['short_ep_{}'.format(strat_version)] = short_epout_0_ + short_epout_gap_ * epg\n","      res_df['long_ep_{}'.format(strat_version)] = long_epout_0_ - long_epout_gap_ * epg\n","    \n","    # -------- market_ep -------- #\n","    else:\n","        res_df['short_ep_{}'.format(strat_version)] = res_df['close']\n","        res_df['long_ep_{}'.format(strat_version)] = res_df['close']\n","\n","    # --------------- out --------------- #\n","    outg = config.tr_set.out_gap\n","    res_df['short_out_{}'.format(strat_version)] = short_epout_0_ + short_epout_gap_ * outg\n","    res_df['long_out_{}'.format(strat_version)] = long_epout_0_ - long_epout_gap_ * outg\n","\n","    # ------ validation ------ #\n","    short_tp_ = res_df['short_tp_{}'.format(strat_version)].to_numpy()\n","    short_ep_ = res_df['short_ep_{}'.format(strat_version)].to_numpy()\n","    short_out_ = res_df['short_out_{}'.format(strat_version)].to_numpy()\n","    short_open_res *= (short_tp_ < short_ep_) & (short_ep_ < short_out_)\n","    res_df['short_open_{}'.format(strat_version)] = short_open_res\n","\n","    long_tp_ = res_df['long_tp_{}'.format(strat_version)].to_numpy()\n","    long_ep_ = res_df['long_ep_{}'.format(strat_version)].to_numpy()\n","    long_out_ = res_df['long_out_{}'.format(strat_version)].to_numpy()\n","    long_open_res *= (long_tp_ > long_ep_) & (long_ep_ > long_out_)    \n","    res_df['long_open_{}'.format(strat_version)] = long_open_res\n","\n","    # ------ tr ------ #\n","    res_df['short_tr_{}'.format(strat_version)] = abs((short_ep_ / short_tp_ - config.trader_set.limit_fee - 1) / (short_ep_ / short_out_ - config.trader_set.market_fee - 1))\n","    res_df['long_tr_{}'.format(strat_version)] = abs((long_tp_ / long_ep_ - config.trader_set.limit_fee - 1) / (long_out_ / long_ep_ - config.trader_set.market_fee - 1))\n","    \n","    # -------- zoned_ep -------- #\n","    if config.tr_set.c_ep_gap != \"None\":\n","        # res_df['short_ep_org_{}'.format(strat_version)] = res_df['short_ep_{}'.format(strat_version)].copy()\n","        # res_df['long_ep_org_{}'.format(strat_version)] = res_df['long_ep_{}'.format(strat_version)].copy()\n","        res_df['short_ep2_{}'.format(strat_version)] = short_epout_1_ + short_epout_gap_ * config.tr_set.c_ep_gap\n","        res_df['long_ep2_{}'.format(strat_version)] = long_epout_1_ - long_epout_gap_ * config.tr_set.c_ep_gap\n","\n","    # -------- zoned_out -------- #\n","    if config.tr_set.t_out_gap != \"None\":\n","        # res_df['short_out_org_{}'.format(strat_version)] = res_df['short_out_{}'.format(strat_version)].copy()\n","        # res_df['long_out_org_{}'.format(strat_version)] = res_df['long_out_{}'.format(strat_version)].copy()\n","        res_df['short_out2_{}'.format(strat_version)] = res_df['short_epout_0_{}'.format(strat_version)] + res_df['short_epout_gap_{}'.format(strat_version)] * config.tr_set.t_out_gap\n","        res_df['long_out2_{}'.format(strat_version)] = res_df['long_epout_0_{}'.format(strat_version)] - res_df['long_epout_gap_{}'.format(strat_version)] * config.tr_set.t_out_gap\n","\n","    # --------------- bias --------------- #  Todo - 추후, bias_set 독립시키는게 좋지 않을까\n","    bias_info_tick = config.tr_set.bias_info_tick\n","    # ------ bias_info can use future_data ------ #\n","    # res_df['short_bias_info_{}'.format(strat_version)] = res_df['dc_lower_T'].shift(-bias_info_tick)  # open / ep_tick 으로부터 bias_info_tick 만큼\n","    # res_df['long_bias_info_{}'.format(strat_version)] = res_df['dc_upper_T'].shift(-bias_info_tick)\n","    res_df['short_bias_info_{}'.format(strat_version)] = res_df['low'].rolling(bias_info_tick).min().shift(-bias_info_tick)\n","    res_df['long_bias_info_{}'.format(strat_version)] = res_df['high'].rolling(bias_info_tick).max().shift(-bias_info_tick)\n","\n","    # bias_thresh 는 결국 tp 가 될 것\n","    res_df['short_bias_thresh_{}'.format(strat_version)] = res_df['short_tp_{}'.format(strat_version)]\n","    res_df['long_bias_thresh_{}'.format(strat_version)] = res_df['long_tp_{}'.format(strat_version)]\n","    # res_df['short_bias_thresh_{}'.format(strat_version)] = res_df['dc_lower_T'] - res_df['short_tp_gap_{}'.format(strat_version)] * config.tr_set.bias_gap\n","    # res_df['long_bias_thresh_{}'.format(strat_version)] = res_df['dc_upper_T'] + res_df['long_tp_gap_{}'.format(strat_version)] * config.tr_set.bias_gap \n","        \n","    return res_df\n"]},{"cell_type":"markdown","metadata":{"id":"HKdUKKl-483N","jp-MarkdownHeadingCollapsed":true,"tags":[]},"source":["### utils_public"]},{"cell_type":"code","execution_count":50,"metadata":{"id":"nzOYWA2kqZ0d","executionInfo":{"status":"ok","timestamp":1648861596042,"user_tz":-540,"elapsed":1957,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# from funcs.funcs_indicator import *\n","# from funcs.funcs_trader import *\n","# import logging\n","# from ast import literal_eval\n","\n","sys_log = logging.getLogger()\n","\n","\n","class OrderSide:\n","    BUY = \"BUY\"\n","    SELL = \"SELL\"\n","    INVALID = None\n","\n","\n","def lvrg_set(res_df, config, open_side, ep_, out_, fee, limit_leverage=50):\n","    strat_version = config.strat_version\n","    if not pd.isnull(out_) and not config.lvrg_set.static_lvrg:\n","      if strat_version in ['v3']:\n","        if open_side == OrderSide.SELL:\n","          loss = out_ / ep_\n","        else:\n","          loss = ep_ / out_\n","      else:  # 이 phase 가 정석, 윗 phase 는 결과가 수익 극대화라 사용함\n","        if open_side == OrderSide.SELL:\n","          loss = ep_ / out_          \n","        else:\n","          loss = out_ / ep_\n","\n","        config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(loss - 1 - (fee + config.trader_set.market_fee))\n","\n","    if not config.lvrg_set.allow_float:\n","        config.lvrg_set.leverage = int(config.lvrg_set.leverage)\n","\n","    # ------------ leverage rejection ------------ #\n","    # 감당하기 힘든 fluc. 의 경우 진입하지 않음 - dynamic_lvrg 사용 경우\n","    if config.lvrg_set.leverage < 1 and config.lvrg_set.lvrg_rejection:\n","    # if config.lvrg_set.leverage >= 1 and config.lvrg_set.lvrg_rejection:\n","        return None\n","    config.lvrg_set.leverage = min(limit_leverage, max(config.lvrg_set.leverage, 1))\n","\n","    return config.lvrg_set.leverage\n","\n","\n","def sync_check(df_, config, order_side=\"OPEN\", row_slice=True):\n","    try:\n","        make_itv_list = [m_itv.replace('m', 'T') for m_itv in literal_eval(config.trader_set.itv_list)]\n","        row_list = literal_eval(config.trader_set.row_list)\n","        rec_row_list = literal_eval(config.trader_set.rec_row_list)\n","        offset_list = literal_eval(config.trader_set.offset_list)\n","\n","        assert len(make_itv_list) == len(offset_list), \"length of itv & offset_list should be equal\"\n","        htf_df_list = [to_htf(df_, itv_=itv_, offset=offset_) for itv_idx, (itv_, offset_)\n","                       in enumerate(zip(make_itv_list, offset_list)) if itv_idx != 0]  #\n","        htf_df_list.insert(0, df_)\n","\n","        # for htf_df_ in htf_df_list:\n","        #     print(htf_df_.tail())\n","\n","        #       Todo        #\n","        #        1. row_list calc.\n","        #           a. indi. 를 만들기 위한 최소 period 가 존재하고, 그 indi. 를 사용한 lb_period 가 존재함\n","        #           b. => default_period + lb_period\n","        #               i. from sync_check, public_indi, ep_point2, ep_dur 의 tf 별 max lb_period check\n","        #                   1. default_period + max lb_period check\n","        #                       a. 현재까지 lb_period_list\n","        #                           h_prev_idx (open / close) 60\n","        #                           dc_period 135\n","        #                           zone_dc_period 135\n","\n","        # --------- slicing (in trader phase only) --------- #\n","        #               --> latency 영향도가 높은 곳은 이곳\n","        if row_slice:   # recursive 가 아닌 indi. 의 latency 를 고려한 slicing\n","            df, df_5T, df_15T, df_30T, df_4H = [df_s.iloc[-row_list[row_idx]:].copy() for row_idx, df_s in enumerate(htf_df_list)]\n","            rec_df, rec_df_5T, rec_df_15T, rec_df_30T, rec_df_4H = [df_s.iloc[-rec_row_list[row_idx]:].copy() for row_idx, df_s in enumerate(htf_df_list)]\n","        else:\n","            df, df_5T, df_15T, df_30T, df_4H = htf_df_list\n","            rec_df, rec_df_5T, rec_df_15T, rec_df_30T, rec_df_4H = htf_df_list\n","\n","        # --------- add indi. --------- #\n","\n","        #        1. 필요한 indi. 는 enlist_epouttp & mr_check 보면서 삽입\n","        #        2. min use_rows 계산을 위해서, tf 별로 gathering 함        #\n","        start_0 = time.time()\n","\n","        df = dc_line(df, None, '1m', dc_period=20)\n","        df = bb_line(df, None, '1m')\n","        # print(df.tail())\n","\n","        df = dc_line(df, df_5T, '5T')\n","        df = bb_line(df, df_5T, '5T')\n","\n","        df = dc_line(df, df_15T, '15T')\n","        df = bb_line(df, df_15T, '15T')\n","\n","        df = bb_line(df, df_30T, '30T')\n","\n","        # print(time.time() - start_0)\n","\n","        # start_0 = time.time()\n","        df = bb_line(df, df_4H, '4H')\n","        # print(time.time() - start_0)\n","\n","        rec_df['rsi_1m'] = rsi(rec_df, 14)  # Todo - recursive, 250 period\n","        df = df.join(to_lower_tf_v2(df, rec_df.iloc[:, [-1]], [-1], backing_i=0), how='inner')  # <-- join same_tf manual\n","        # print(df.rsi_1m.tail())\n","\n","        if order_side in [\"OPEN\"]:\n","            rec_df_5T['ema_5T'] = ema(rec_df_5T['close'], 195)  # Todo - recursive, 1100 period (5T)\n","            df = df.join(to_lower_tf_v2(df, rec_df_5T, [-1]), how='inner')\n","\n","    except Exception as e:\n","        sys_log.error(\"error in sync_check :\", e)\n","    else:\n","        return df\n","\n","\n","def public_indi(res_df, config, np_timeidx, order_side=\"OPEN\"):\n","\n","    strat_version = config.strat_version\n","\n","    res_df = wave_range_v3(res_df, 12, ltf_df=None, touch_lbperiod=20)\n","    # res_df = wave_range_v3(to_htf(res_df, itv_='5T', offset='1h'), 20, ltf_df=res_df, touch_lbperiod=100)\n","    \n","    # res_df = dc_level(res_df, '5T', 1)\n","    # res_df = bb_level(res_df, '5T', 1)\n","    # res_df = st_level(res_df, '5T', 1)\n","\n","    # res_df = dc_level(res_df, '15T', 1)\n","    # res_df = bb_level(res_df, '15T', 1)\n","    # res_df = dtk_plot(res_df, dtk_itv2='15T', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line, np_timeidx=np_timeidx)\n","\n","    # res_df = st_level(res_df, '15T', 1)\n","\n","    # res_df = dc_level(res_df, '30T', 1)\n","    # res_df = bb_level(res_df, '30T', 1)\n","    # res_df = st_level(res_df, '30T', 1)\n","\n","    # res_df = bb_level(res_df, 'H', 1)\n","\n","    # res_df = bb_level(res_df, '4H', 1)\n","\n","    # res_df['dc_upper_v2'.format(strat_version)] = res_df['high'].rolling(config.loc_set.zone.dc_period).max()\n","    # res_df['dc_lower_v2'.format(strat_version)] = res_df['low'].rolling(config.loc_set.zone.dc_period).min()\n","\n","    # res_df['zone_dc_upper_v2'.format(strat_version)] = res_df['high'].rolling(config.loc_set.zone.zone_dc_period).max()\n","    # res_df['zone_dc_lower_v2'.format(strat_version)] = res_df['low'].rolling(config.loc_set.zone.zone_dc_period).min()\n","\n","    if order_side in [\"OPEN\"]:\n","        h_candle_v3(res_df, '5T')\n","        h_candle_v3(res_df, '15T')\n","        h_candle_v3(res_df, 'H')\n","\n","        # candle_score_v2(res_df, 'T', unsigned=False)\n","\n","        # hc_itv = 'H'\n","        # h_candle_col = ['open_{}'.format(hc_itv), 'high_{}'.format(hc_itv), 'low_{}'.format(hc_itv), 'close_{}'.format(hc_itv)]\n","        # candle_score_v2(res_df, hc_itv, ohlc_col=h_candle_col, unsigned=False)\n","\n","    #     temp indi.    #\n","    # res_df[\"ma30_1m\"] = res_df['close'].rolling(30).mean()\n","    # res_df[\"ma60_1m\"] = res_df['close'].rolling(60).mean()\n","    # res_df = dtk_plot(res_df, dtk_itv2='15T', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line, np_timeidx=np_timeidx)\n","\n","    return res_df\n","\n","def ep_out(res_df, config, op_idx, e_j, tp_j, np_datas, open_side):  \n","  h, l = np_datas\n","  strat_version = config.strat_version\n","  ep_out = 0\n","  \n","  if config.ep_set.ep_out_tick != \"None\":\n","    if e_j - op_idx >= config.ep_set.ep_out_tick:\n","      ep_out = 1\n","  \n","  if config.ep_set.ei_k != \"None\":\n","    if open_side == OrderSide.SELL:      \n","      short_tp_ = res_df['short_tp_{}'.format(strat_version)].to_numpy()  # id 에 따라 dynamic 변수라 이곳에서 numpy 화 진행\n","      short_tp_gap_ = res_df['short_tp_gap_{}'.format(strat_version)].to_numpy()\n","      if l[e_j] <= short_tp_[tp_j] + short_tp_gap_[tp_j] * config.ep_set.ei_k:\n","        ep_out = 1\n","    else:\n","      long_tp_ = res_df['long_tp_{}'.format(strat_version)].to_numpy()  # iloc 이 빠를까, to_numpy() 가 빠를까  # 3.94 ms --> 5.34 ms (iloc)\n","      long_tp_gap_ = res_df['long_tp_gap_{}'.format(strat_version)].to_numpy()\n","      if h[e_j] >= long_tp_[tp_j] - long_tp_gap_[tp_j] * config.ep_set.ei_k:\n","        ep_out = 1\n","  \n","  return ep_out\n","\n","def ep_loc_point2(res_df, config, i, out_j, point2_list, side=OrderSide.SELL):\n","  dc_upper_1T, dc_upper_15T, dc_lower_1T, dc_lower_15T, close, resi_T, sup_T, wick_score = point2_list\n","  allow_ep_in = 1\n","  if config.strat_version in ['v5_2']:\n","    if side == OrderSide.SELL:\n","      allow_ep_in *= (dc_upper_1T[i - 1] <= dc_upper_15T[i]) & \\\n","            (dc_upper_15T[i - 1] != dc_upper_15T[i])\n","    else:\n","      allow_ep_in *= (dc_lower_1T[i - 1] >= dc_lower_15T[i]) & \\\n","              (dc_lower_15T[i - 1] != dc_lower_15T[i])\n","\n","  if config.strat_version in ['v3_4']:\n","    wick_score_list = literal_eval(config.ep_set.point2.wick_score_list)\n","    if side == OrderSide.SELL:\n","      allow_ep_in *= close[i] < sup_T[i - 1]\n","      if len(wick_score_list) != 0:\n","        allow_ep_in *= wick_score[i] < -wick_score_list[0]\n","    else:\n","      allow_ep_in *= close[i] > resi_T[i - 1]\n","      if len(wick_score_list) != 0:\n","        allow_ep_in *= wick_score[i] > wick_score_list[0]\n","\n","  if allow_ep_in:\n","    out_j = i\n","  return allow_ep_in, out_j\n","\n","\n","# vectorized calc.\n","def ep_loc_v2(res_df, config, np_timeidx, show_detail=True, ep_loc_side=OrderSide.SELL):\n","    strat_version = config.strat_version\n","\n","    # ------- param init ------- #\n","    open_side = None\n","    len_df = len(res_df)\n","    mr_res = np.ones(len_df)\n","    zone_arr = np.full(len_df, 'n')\n","\n","    # ------ process 한번에 처리해서 param_check 만 ver. 별로 하면 될 것 ------ #\n","    #     => public_indi() 가 될 것\n","    #     1. 사용한 param 정보와 matching 된 data 병렬로 나열 logging 될 것\n","    tp_fee, out_fee = calc_tp_out_fee_v2(config)\n","\n","    # ------------ candle_score ------------ #    \n","    wick_score_list = literal_eval(config.loc_set.point.wick_score_list)\n","    if len(wick_score_list) != 0:\n","      score_itv_list = literal_eval(config.loc_set.point.score_itv_list)\n","      # ------ candle_score_v0 (1m initial tick 기준임) ------ #  Todo - higher timeframe 경우 back_data 사용해야함\n","      for wick_score_, score_itv_ in zip(wick_score_list, score_itv_list):\n","        wick_score = res_df['wick_score_{}'.format(score_itv_)].to_numpy()\n","        if ep_loc_side == OrderSide.SELL:\n","          mr_res *= wick_score <= -wick_score_\n","        else:\n","          mr_res *= wick_score >= wick_score_\n","\n","    # -------------- spread -------------- #\n","    if config.loc_set.zone.short_spread != \"None\":\n","      bb_base_5T = res_df['bb_base_5T'].to_numpy()  # to_numpy() 는 ep_loc 에서 진행됨\n","      bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","      bb_upper_5T = res_df['bb_upper_5T'].to_numpy()\n","      dc_lower_5T = res_df['dc_lower_5T'].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= (bb_base_5T - bb_lower_5T - tp_fee * bb_base_5T) / (bb_base_5T - bb_lower_5T + out_fee * bb_base_5T) >= config.loc_set.zone.short_spread\n","      else:\n","        # mr_res *= (bb_base_5T - dc_lower_5T - tp_fee * bb_upper_5T) / (bb_base_5T - dc_lower_5T + out_fee * bb_base_5T) >= config.loc_set.zone.long_spread\n","        mr_res *= (bb_upper_5T - dc_lower_5T - tp_fee * bb_upper_5T) / (bb_upper_5T - dc_lower_5T + out_fee * bb_upper_5T) >= config.loc_set.zone.long_spread\n","    \n","    # -------------- tr_thresh -------------- #\n","    if config.loc_set.zone.short_tr_thresh != \"None\" or config.loc_set.zone.long_tr_thresh != \"None\":\n","      if ep_loc_side == OrderSide.SELL:\n","        short_tr_ = res_df['short_tr_{}'.format(strat_version)].to_numpy()\n","        mr_res *= short_tr_ >= config.loc_set.zone.short_tr_thresh\n","      else:\n","        long_tr_ = res_df['long_tr_{}'.format(strat_version)].to_numpy()\n","        mr_res *= long_tr_ >= config.loc_set.zone.long_tr_thresh\n","\n","    # ------------ rtc_zone  ------------ #\n","    # ------ dtk ------ #\n","    if config.loc_set.zone.dt_k != \"None\":\n","      # ------ dc_v2 ------ #\n","      dc_lower_v2 = res_df['dc_lower_v2'.format(strat_version)].to_numpy()\n","      short_dtk_1_ = res_df['short_dtk_1_{}'.format(strat_version)].to_numpy() - \\\n","              res_df['short_dtk_gap_{}'.format(strat_version)].to_numpy() * config.loc_set.zone.dt_k\n","      dc_upper_v2 = res_df['dc_upper_v2'.format(strat_version)].to_numpy()\n","      long_dtk_1_ = res_df['long_dtk_1_{}'.format(strat_version)].to_numpy() + \\\n","              res_df['long_dtk_gap_{}'.format(strat_version)].to_numpy() * config.loc_set.zone.dt_k\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= dc_lower_v2 >= short_dtk_1_\n","      else:\n","        mr_res *= dc_upper_v2 <= long_dtk_1_\n","\n","    # ------------ zone rejection  ------------ #\n","    # config 로 통제할 수 없는 rejection 은 strat_version 으로 조건문을 나눔 (lvrg_set 과 동일)\n","    if config.loc_set.zone.zone_rejection:   \n","     \n","        # ------------------ biaser ------------------ #\n","        # ------------ imbalance_ratio ------------ #\n","        if config.loc_set.zone.ir != \"None\":\n","          itv = config.loc_set.point.tf_entry\n","          itv_num = to_itvnum(itv)\n","          if ep_loc_side == OrderSide.SELL:    \n","            short_ir_ = res_df['short_ir_{}'.format(itv)].to_numpy()\n","            # short_ir_ = res_df['short_ir_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","            # mr_res *= short_ir_ >= config.loc_set.zone.ir     # greater\n","            mr_res *= short_ir_ <= config.loc_set.zone.ir   # lesser\n","          else:\n","            long_ir_ = res_df['long_ir_{}'.format(itv)].to_numpy()\n","            # long_ir_ = res_df['long_ir_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","            # mr_res *= long_ir_ >= config.loc_set.zone.ir\n","            mr_res *= long_ir_ <= config.loc_set.zone.ir\n","\n","        # ------------ body_rel_ratio ------------ #\n","        if config.loc_set.zone.brr != \"None\":\n","          body_rel_ratio_ = res_df['body_rel_ratio_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","          mr_res *= body_rel_ratio_ >= config.loc_set.zone.brr\n","\n","        # ------ cbline (dc_base) ------ #\n","        # if strat_version in ['v3_5', '4_3']:\n","        #   dc_base_3T = res_df['dc_base_3T'].to_numpy()\n","        #   wave_base_ = res_df['wave_base_{}'.format(config.loc_set.point.tp_itv0)].to_numpy()\n","\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     mr_res *= wave_base_ <= dc_base_3T\n","            \n","        #     dc_base_3T_rollmin = res_df['dc_base_3T'].rolling(config.loc_set.zone.base_roll_period).min().to_numpy()\n","        #     mr_res *= dc_base_3T_rollmin == dc_base_3T\n","        #   else:\n","        #     mr_res *= wave_base_ >= dc_base_3T\n","            \n","        #     dc_base_3T_rollmax = res_df['dc_base_3T'].rolling(config.loc_set.zone.base_roll_period).max().to_numpy()\n","        #     mr_res *= dc_base_3T_rollmax == dc_base_3T\n","        \n","        # ------ dc_base ------ #        \n","        # if strat_version in ['4']:  # 'v3_3', 'v3_4', \n","        #   hc_itv = '5T'\n","        #   dc_itv = '5T'\n","        #   itv_num = to_itvnum(hc_itv)\n","        #   close_ = res_df['close_{}'.format(hc_itv)].shift(itv_num).to_numpy()   # 따라서 future_data 사용시, shifting 필요함\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     dc_lower_ = res_df['dc_lower_%s' % dc_itv].shift(itv_num).to_numpy()\n","        #     mr_res *= close_ < dc_lower_\n","        #   else:\n","        #     dc_upper_ = res_df['dc_upper_%s' % dc_itv].shift(itv_num).to_numpy()\n","        #     mr_res *= close_ > dc_upper_\n","        \n","        # ------ ema ------ #\n","        # if strat_version in ['v5_2']: # 'v3'\n","        #   ema_5T = res_df['ema_5T'].to_numpy()\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     mr_res *= close < ema_5T\n","        #   else:\n","        #     mr_res *= close > ema_5T\n","\n","        # ------------------ swing_middle ------------------ #\n","        # ------------ envelope ------------ #\n","        # ep_loc check 기준 idx 가 entry 기준이라는 걸 명심\n","        if strat_version in ['v3_2']:\n","          hc_itv = '15T'\n","          dc_itv = '15T'\n","          shift_num = [0, to_itvnum(hc_itv)]\n","          div_res = [1, 0]\n","          for itv_num, res in zip(shift_num, div_res):\n","            close_ = res_df['close_{}'.format(hc_itv)].shift(itv_num).to_numpy()  # close_bar timein 사용하는 경우, 특수로 shift(0) 사용가능\n","            if ep_loc_side == OrderSide.SELL:\n","              dc_lower_ = res_df['dc_lower_%s' % dc_itv].shift(itv_num).to_numpy()\n","              mr_res *= (close_ < dc_lower_) == res\n","            else:\n","              dc_upper_ = res_df['dc_upper_%s' % dc_itv].shift(itv_num).to_numpy()\n","              mr_res *= (close_ > dc_upper_) == res\n","              \n","        # ------ bb ------ #\n","        # close = res_df['close'].to_numpy()\n","\n","        # if strat_version in ['v3_3']:\n","        #   open = res_df['open'].to_numpy()\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     bb_lower_1m = res_df['bb_lower_1m'].to_numpy()\n","        #     # mr_res *= close <= bb_lower_1m\n","        #     mr_res *= open <= bb_lower_1m\n","        #   else:\n","        #     bb_upper_1m = res_df['bb_upper_1m'].to_numpy()\n","        #     # mr_res *= close >= bb_upper_1m\n","        #     mr_res *= open >= bb_upper_1m\n","\n","        if strat_version in ['4_1']:\n","          if ep_loc_side == OrderSide.SELL:\n","            bb_lower_15T = res_df['bb_lower_15T'].to_numpy()\n","            short_ep_ = res_df['short_ep_{}'.format(strat_version)].to_numpy()\n","            mr_res *= bb_lower_15T >= short_ep_\n","          else:\n","            bb_upper_15T = res_df['bb_upper_15T'].to_numpy()\n","            long_ep_ = res_df['long_ep_{}'.format(strat_version)].to_numpy()\n","            mr_res *= bb_upper_15T <= long_ep_\n","\n","        # if strat_version in ['v5_2']:\n","        #   bb_upper2_ = res_df['bb_upper2_%s' % config.loc_set.zone.bbz_itv].to_numpy()\n","        #   bb_lower2_ = res_df['bb_lower2_%s' % config.loc_set.zone.bbz_itv].to_numpy()\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     mr_res *= bb_upper2_ < close\n","        #   else:\n","        #     mr_res *= bb_lower2_ > close\n","\n","        # ------------ degree ------------ #        \n","        # ------ norm_body_ratio ------ #\n","        if config.loc_set.zone.abs_ratio != \"None\":\n","          itv = config.loc_set.point.tf_entry\n","          abs_ratio_ = res_df['abs_ratio_{}'.format(itv)].to_numpy()\n","          mr_res *= abs_ratio_ >= config.loc_set.zone.abs_ratio\n","          # mr_res *= abs_ratio_ <= config.loc_set.zone.abs_ratio\n","          \n","        # degree_list = literal_eval(config.loc_set.zone.degree_list)\n","        # if len(degree_list) != 0:\n","        # # if strat_version in ['v3_3', 'v3_4']:\n","        #   norm_close_15 = res_df['norm_close_15'].to_numpy()   # -> 이거 뭘로 만들었는지 불분명함,,\n","        #   b1_norm_close_15 = res_df['norm_close_15'].shift(15).to_numpy()\n","          \n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     mr_res *= norm_close_15 <= -degree_list[0]\n","        #     # mr_res *= b1_norm_close_15 <= -degree_list[1]\n","        #   else:\n","        #     mr_res *= norm_close_15 >= degree_list[0]\n","        #     # mr_res *= b1_norm_close_15 >= degree_list[1]\n","\n","        # ------ dc ------ #        \n","        # if strat_version in ['v3_3']:\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     dc_lower_ = res_df['dc_lower_1m'].to_numpy()\n","        #     b1_dc_lower_ = res_df['dc_lower_1m'].shift(1).to_numpy()\n","        #     mr_res *= dc_lower_ < b1_dc_lower_\n","        #   else:\n","        #     dc_upper_ = res_df['dc_upper_1m'].to_numpy()\n","        #     b1_dc_upper_ = res_df['dc_upper_1m'].shift(1).to_numpy()\n","        #     mr_res *= dc_upper_ > b1_dc_upper_\n","\n","        # ------ sar ------ #\n","        # if strat_version in ['v3_3']:\n","          # sar_uptrend_3T = res_df['sar_uptrend_3T'].to_numpy()\n","          # if ep_loc_side == OrderSide.SELL:\n","          #   mr_res *= sar_uptrend_3T == 0\n","          # else:\n","          #   mr_res *= sar_uptrend_3T == 1\n","         \n","    # -------------- zoned tr_set - post_work -------------- #\n","    if config.tr_set.c_ep_gap != \"None\" or config.tr_set.t_out_gap != \"None\":\n","        #       by zone_dtk       #\n","        #         c_zone        #\n","        zone_dc_upper_v2_ = res_df['zone_dc_upper_v2'.format(strat_version)].to_numpy()\n","        long_dtk_plot_1 = res_df['long_dtk_plot_1'].to_numpy() + res_df['long_dtk_plot_gap'].to_numpy() * config.loc_set.zone.zone_dt_k\n","        zone_dc_lower_v2_ = res_df['zone_dc_lower_v2'.format(strat_version)].to_numpy()\n","        short_dtk_plot_1 = res_df['short_dtk_plot_1'].to_numpy() - res_df['short_dtk_plot_gap'].to_numpy() * config.loc_set.zone.zone_dt_k\n","        if ep_loc_side == OrderSide.SELL:\n","          zone_res = zone_dc_upper_v2_ > long_dtk_plot_1  # mr_res 와는 별개임\n","          pos = 'short'\n","        else:\n","          zone_res = zone_dc_lower_v2_ < short_dtk_plot_1\n","          pos = 'long'\n","\n","        # static 여부에 따른 vectorized adj. - dynamic 은 vectorize 불가\n","        if config.ep_set.static_ep and config.tr_set.c_ep_gap != \"None\":\n","          res_df['{}_ep_{}'.format(pos, strat_version)][zone_res] = res_df['{}_ep2_{}'.format(pos, strat_version)][zone_res]\n","        if config.out_set.static_out and config.tr_set.t_out_gap != \"None\":\n","          res_df['{}_out_{}'.format(pos, strat_version)][~zone_res] = res_df['{}_out2_{}'.format(pos, strat_version)][~zone_res]  # t_zone 에 대한 out2 setting \n","        zone_arr = np.where(zone_res == 1, 'c', 't')\n","\n","    return mr_res, zone_arr  # mr_res 의 True idx 가 open signal"]},{"cell_type":"markdown","metadata":{"id":"JjKHyqftzhD7","tags":[]},"source":["### set config (override available)"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"q_4E-zH02WJy","executionInfo":{"status":"ok","timestamp":1648859649656,"user_tz":-540,"elapsed":394,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["#     caution : MARKET / LIMIT spelling   #\n","#      json doesn't support single quotes     #\n","\n","param_dict = \\\n","{\n","  \"strat_version\": \"4_5\",\n","  \"trader_set\": {\n","    \"run\": 1,\n","    \"df_log\": 0,\n","    \"open_index\": -1,\n","    \"complete_index\": -2,\n","    \"limit_fee\": 0.0002,\n","    \"market_fee\": 0.0004,\n","    \"initial_asset\": 3500,\n","    \"asset_changed\": 0,\n","    \"symbol\": \"ETHUSDT\",\n","    \"symbol_changed\": 0,\n","    \"itv_list\": \"['T', '5T', '15T', '30T', '4H']\",\n","    \"row_list\": \"[200, 160, 30, 25, 25]\",\n","    \"rec_row_list\": \"[250, 1100, 1, 1, 1]\",\n","    \"offset_list\": \"['1h', '1h', '1h', '1h', '1h']\",\n","    \"bar_close_second\": 59,\n","    \"realtime_term\": 0.01,\n","    \"api_retry_term\": 3,\n","    \"check_entry_sec\": 10,\n","    \"entry_execution_wait\": 60,\n","    \"breakout_qty_ratio\": 0.97,\n","    \"qty_check_term\": 30,\n","    \"exit_execution_wait\": 60,\n","    \"close_complete_term\": 5,\n","    \"save_stacked_df\": 0,\n","    \"stacked_df_exist\": 1\n","  },\n","  \"pos_set\": {\n","    \"short_inversion\": 0,\n","    \"long_inversion\": 0,\n","    \"short_ban\": 1,\n","    \"long_ban\": 0\n","  },\n","  \"loc_set\": {\n","    \"zone\": {\n","      \"short_spread\": \"None\",\n","      \"long_spread\": \"None\",\n","      \"short_tr_thresh\": \"None\",\n","      \"long_tr_thresh\": \"None\",\n","      \"dtk_itv\": \"5T\",\n","      \"dt_k\": \"None\",\n","      \"dc_period\": 135,\n","      \"use_dtk_line\": 0,\n","      \"zone_rejection\": 1,\n","      \"degree_list\": \"[]\",\n","      \"ir\": \"None\",\n","      \"abs_ratio\": \"None\",\n","      \"base_roll_period\": 50,\n","      \"gap_mply\": 1,\n","      \"hc_itv\": 60,\n","      \"zone_dt_k\": 0.4,\n","      \"zone_dc_period\": 135\n","    },\n","    \"point\": {\n","      \"exp_itv\": \"5T\",\n","      \"tp_itv1\": \"5T\",\n","      \"tp_itv0\": \"5T\",\n","      \"epout_itv1\": \"5T\",\n","      \"epout_itv0\": \"5T\",\n","      \"tf_entry\": \"5T\",\n","      \"base_gap\": 0.1,\n","      \"wick_score_list\": \"[]\",\n","      \"body_score_list\": \"[]\",\n","      \"score_itv_list\": \"[]\",      \n","      \"osc_band\": 20\n","    }\n","  },\n","  \"tr_set\": {\n","    \"ep_gap\": -0.5,\n","    \"tp_gap\": 0,\n","    \"decay_gap\": \"None\",\n","    \"out_gap\": 0,\n","    \"c_ep_gap\": \"None\",\n","    \"t_out_gap\": \"None\",\n","    \"bias_gap\": 0,\n","    \"bias_info_tick\": 20\n","  }, \n","  \"ep_set\": {\n","    \"entry_type\": \"LIMIT\",\n","    \"static_ep\": 1,\n","    \"ei_k\": -1,\n","    \"ep_out_tick\": 10,    \n","    \"point2\": {\n","      \"use_point2\": 0,\n","      \"entry_type\": \"MARKET\",\n","      \"wick_score_list\": \"[]\",\n","      \"body_score_list\": \"[]\",\n","      \"score_itv_list\": \"['T']\"\n","    }\n","  },\n","  \"tp_set\": {\n","    \"non_tp\": 0,\n","    \"static_tp\": 1,\n","    \"tp_onexec\": 0,\n","    \"decay_term\": 60,\n","    \"p_ranges\": \"[1]\",\n","    \"p_qty\": \"[1]\"\n","  },\n","  \"out_set\": {\n","    \"hl_out\": 1,\n","    \"static_out\": 1,\n","    \"out_onexec\": 0,\n","    \"tf_exit\": \"None\",\n","    \"rsi_exit\": 0\n","  },\n","  \"lvrg_set\": {\n","    \"leverage\": 2,\n","    \"static_lvrg\": 1,\n","    \"allow_float\": 0,\n","    \"target_pct\": 0.01,\n","    \"lvrg_rejection\": 0\n","  }\n","}\n","\n","config = EasyDict(param_dict)\n","# param_json = json.dumps(param_dict, indent=2)"]},{"cell_type":"markdown","metadata":{"id":"dzla8i9_ysmP","jp-MarkdownHeadingCollapsed":true,"tags":[]},"source":["#### save config"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FlNGKvW_w2za"},"outputs":[],"source":["config_name = \"config_v5_2.1220_candlejson\"\n","# config_name = \"config_v3.json\"\n","cfg_full_path = os.path.join(current_path, \"config\", config_name)\n","\n","\n","with open(cfg_full_path, 'w') as cfg:\n","    json.dump(config1, cfg, indent=2)\n","    print(\"{} dumped !\".format(cfg_full_path))"]},{"cell_type":"markdown","metadata":{"id":"rLI8unIyroiC","tags":[]},"source":["## run"]},{"cell_type":"code","source":["funcs = [ep_out, ep_loc_point2, lvrg_set]\n","\n","id_idx_list = [0]  # ID_arr 에서 import 할 id_idx 선택\n","public_override = 1\n","utils_override = 1\n","config_override = 1\n","\n","# ------ config_list 와 같은 org_var 에 override 하는거 다시 생각하기 ------ #\n","ID_list = ID_arr[id_idx_list]\n","utils_list = utils_arr[id_idx_list]\n","config_list = config_arr[id_idx_list]\n","\n","if config_override or utils_override:\n","  assert len(config_list) == 1\n","  if config_override:\n","    config_list[0] = config\n","    ID_list[0] = config.strat_version\n","  \n","config = config_list[0]  # base config = config_list[0]\n","tp_fee, out_fee = calc_tp_out_fee_v2(config)   # -> rev_pr 때문에 일단 이곳에도 선언함\n","\n","# ------- inversion set ------- #\n","inversion = 0\n","fdist_thresh = 1\n","# ------- plot param ------- #\n","show_detail = 0\n","# ------- temp param ------- #\n","allow_osc_touch = 0\n","rsi_gap = 5\n","early_out_tpg = 0.36\n","\n","# ------- just printing config ------- #\n","# ['strat_version', 'pos_set', 'loc_set', 'tr_set', 'ep_set', 'tp_set', 'out_set', 'lvrg_set']\n","_ = [print(json.dumps(config[key_], indent=1), end=' ') for key_ in ['strat_version', 'loc_set', 'tr_set', 'ep_set', 'tp_set', 'out_set', 'lvrg_set']]"],"metadata":{"id":"qBJfPsmJzVIr","executionInfo":{"status":"ok","timestamp":1648862181344,"user_tz":-540,"elapsed":4,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"5d61f710-61fc-40ef-e18f-47efc739cbee"},"execution_count":67,"outputs":[{"output_type":"stream","name":"stdout","text":["\"4_5\" {\n"," \"zone\": {\n","  \"short_spread\": \"None\",\n","  \"long_spread\": \"None\",\n","  \"short_tr_thresh\": \"None\",\n","  \"long_tr_thresh\": \"None\",\n","  \"dtk_itv\": \"5T\",\n","  \"dt_k\": \"None\",\n","  \"dc_period\": 135,\n","  \"use_dtk_line\": 0,\n","  \"zone_rejection\": 1,\n","  \"degree_list\": \"[]\",\n","  \"ir\": \"None\",\n","  \"abs_ratio\": \"None\",\n","  \"base_roll_period\": 50,\n","  \"gap_mply\": 1,\n","  \"hc_itv\": 60,\n","  \"zone_dt_k\": 0.4,\n","  \"zone_dc_period\": 135,\n","  \"brr\": \"None\"\n"," },\n"," \"point\": {\n","  \"exp_itv\": \"5T\",\n","  \"tp_itv1\": \"5T\",\n","  \"tp_itv0\": \"5T\",\n","  \"epout_itv1\": \"5T\",\n","  \"epout_itv0\": \"5T\",\n","  \"tf_entry\": \"5T\",\n","  \"base_gap\": 0.1,\n","  \"wick_score_list\": \"[]\",\n","  \"body_score_list\": \"[]\",\n","  \"score_itv_list\": \"[]\",\n","  \"osc_band\": 20\n"," }\n","} {\n"," \"ep_gap\": 0.0,\n"," \"tp_gap\": 0,\n"," \"decay_gap\": \"None\",\n"," \"out_gap\": 0.3,\n"," \"c_ep_gap\": \"None\",\n"," \"t_out_gap\": \"None\",\n"," \"bias_gap\": 0,\n"," \"bias_info_tick\": 20\n","} {\n"," \"entry_type\": \"LIMIT\",\n"," \"static_ep\": 1,\n"," \"ei_k\": -1,\n"," \"ep_out_tick\": 10,\n"," \"point2\": {\n","  \"use_point2\": 0,\n","  \"entry_type\": \"MARKET\",\n","  \"wick_score_list\": \"[]\",\n","  \"body_score_list\": \"[]\",\n","  \"score_itv_list\": \"['T']\"\n"," }\n","} {\n"," \"non_tp\": 0,\n"," \"static_tp\": 1,\n"," \"tp_onexec\": 0,\n"," \"decay_term\": 60,\n"," \"p_ranges\": \"[1]\",\n"," \"p_qty\": \"[1]\"\n","} {\n"," \"hl_out\": 1,\n"," \"static_out\": 1,\n"," \"out_onexec\": 0,\n"," \"tf_exit\": \"None\",\n"," \"rsi_exit\": 0\n","} {\n"," \"leverage\": 2,\n"," \"static_lvrg\": 1,\n"," \"allow_float\": 0,\n"," \"target_pct\": 0.01,\n"," \"lvrg_rejection\": 0\n","} "]}]},{"cell_type":"code","source":["# ------ slicing res_df ------ #\n","res_df = res_df_.loc[pd.to_datetime(\"2020-09-05 00:00:59.999\"):] # pd.to_datetime(\"2022-01-10 00:00:59.999\"), pd.to_datetime(\"2021-10-04 02:39:59.999000\")\n","\n","np_timeidx = np.array([intmin_np(date_) for date_ in res_df.index.to_numpy()])\n","\n","# ------------ public_indi ------------ # - 딱히 반복될 이유가 없는 phase - annot. 달때, why 까지 적어주면 좋음\n","start_0 = time.time()\n","if public_override:\n","    res_df = public_indi(res_df, config, np_timeidx)  # 현재 대부분의 시간은 h_candle 에서 소비되고 있음\n","else:\n","    res_df = utils_public.public_indi(res_df, config, np_timeidx)\n","print(\"public_indi elapsed time :\", time.time() - start_0)\n","\n","# ------------ make data_list ------------ # - 반복될 이유가 없는 phase - public_indo 에 종속\n","start_0 = time.time()\n","ohlc_cols = ['open', 'high', 'low', 'close']\n","ohlc_list = [res_df[col_].to_numpy() for col_ in ohlc_cols]\n","point2_cols = ['dc_upper_T', 'dc_upper_15T', 'dc_lower_T', 'dc_lower_15T', 'close', 'resi_T', 'sup_T'] #+ ['wick_score_{}'.format(s_itv) for s_itv in literal_eval(config.ep_set.point2.score_itv_list)]\n","point2_list = [res_df[col_].to_numpy() for col_ in point2_cols]\n","market_data_cols = ['close', 'bb_lower_5T', 'bb_upper_5T', 'rsi_T', 'haopen', 'hahigh', 'halow', 'haclose']   # Todo - public_indi 이전에 해야할지도 모름\n","market_data_list = [res_df[col_].to_numpy() for col_ in market_data_cols]\n","print(\"make data_list elapsed time :\", time.time() - start_0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WstWVNihCNH8","executionInfo":{"status":"ok","timestamp":1648859806887,"user_tz":-540,"elapsed":2159,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"c16f4a98-b564-4aca-de6f-e021f40ec365"},"execution_count":27,"outputs":[{"output_type":"stream","name":"stdout","text":["public_indi elapsed time : 1.092897891998291\n","make data_list elapsed time : 0.0009157657623291016\n"]}]},{"cell_type":"markdown","source":["### idep_plot"],"metadata":{"id":"RqRF1eyZ0xBL"}},{"cell_type":"code","source":["# ------ edit utils config ------ #\n","# config_list[0].loc_set.point.base_gap = -0.0\n","config_list[0].tr_set.ep_gap = 0.0\n","# # config_list[0].tr_set.tp_gap = 0\n","config_list[0].tr_set.out_gap = 0.3\n","# config_list[0].tr_set.bias_gap = 1.5\n","# config_list[0].tr_set.bias_info_tick = 200\n","# #  rs_channel_v2(res_df_, period=6, itv='T', type='OUT')"],"metadata":{"id":"_iYcJk8nK8Yq","executionInfo":{"status":"ok","timestamp":1648859765394,"user_tz":-540,"elapsed":509,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"execution_count":20,"outputs":[]},{"cell_type":"code","source":["if utils_override:   # 현재, utils_override 하는 경우 1개의 ID 만 허용함 \n","  start_0 = time.time()\n","  res_df = enlist_rtc(res_df, config, np_timeidx)\n","  print(\"enlist_rtc elapsed time :\", time.time() - start_0)\n","  start_0 = time.time()\n","  res_df = enlist_tr(res_df, config, np_timeidx)    # 36995.0 -> 152766.0\n","  print(\"enlist_tr elapsed time :\", time.time() - start_0)\n","else:\n","    start_0 = time.time()\n","    for utils_, config_ in zip(utils_list, config_list):\n","        res_df = utils_.enlist_rtc(res_df, config_, np_timeidx)\n","        res_df = utils_.enlist_tr(res_df, config_, np_timeidx)\n","    print(\"elapsed time :\", time.time() - start_0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iI39YI_5GguK","executionInfo":{"status":"ok","timestamp":1648861195804,"user_tz":-540,"elapsed":369,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"1c390ea4-04ae-420a-b025-5206fecdead7"},"execution_count":37,"outputs":[{"output_type":"stream","name":"stdout","text":["enlist_rtc elapsed time : 0.044905662536621094\n","enlist_tr elapsed time : 0.14291715621948242\n"]}]},{"cell_type":"code","source":["# ------ edit loc_set config ------ #\n","# config_list[0].loc_set.zone.brr = \"None\" # \"None\" 0.8\n","config_list[0].loc_set.zone.ir = -0.5 # \"None\" 0.8\n","# config_list[0].loc_set.zone.abs_ratio = \"None\"  # 0.7\n","config_list[0].loc_set.zone.short_tr_thresh = 2 # 0.55 # 0.8 # # 0.7 # tr_thresh 엄청 민감함\n","config_list[0].loc_set.zone.long_tr_thresh = 2 # 0.53 # 0.8 ## 0.7\n","# config_list[0].loc_set.zone.base_roll_period = 60"],"metadata":{"id":"gfDSOGMd91rE","executionInfo":{"status":"ok","timestamp":1648862304708,"user_tz":-540,"elapsed":381,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"execution_count":75,"outputs":[]},{"cell_type":"code","source":["open_info_df = get_open_info_df(ep_loc_v2, res_df, np_timeidx, ID_list, config_list, id_idx_list)  # --> point * dur. 관련 (loc_set) param 에 종속 (open_info 가 변경되는게 아니라면, 재실행할 필요없음)"],"metadata":{"id":"9DPgykxQ92mU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648862305959,"user_tz":-540,"elapsed":1257,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"d6785210-9443-4d51-c457-8a63b2d15328"},"execution_count":76,"outputs":[{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9298501014709473\n"]}]},{"cell_type":"code","source":["# ------ edit entry & exit (ep, tp, out, ..) config ------ #\n","# config_list[0].ep_set.ei_k = -1\n","# config_list[0].ep_set.ep_out_tick = 10\n","# # config_list[0].ep_set.point2.use_point2 = 1\n","# # config_list[0].ep_set.point2.entry_type = \"LIMIT\"\n","# # config_list[0].ep_set.point2.wick_score_list = str([])\n","# # config_list[0].tp_set.static_tp = 1\n","# # config_list[0].tp_set.non_tp = 0 # 0 1\n","# config_list[0].tp_set.p_ranges = \"[1]\"\n","# config_list[0].tp_set.p_qty = \"[1]\"\n","# # config_list[0].tp_set.p_ranges = \"[0.33, 0.66, 1]\"\n","# # config_list[0].tp_set.p_qty = \"[0.25, 0.25, 0.5]\"\n","# # config_list[0].tp_set.p_ranges = \"[0.2, 1]\"\n","# # config_list[0].tp_set.p_qty = \"[0.2, 0.8]\"\n","# # config_list[0].out_set.hl_out = 1\n","# # config_list[0].out_set.tf_exit = \"None\" # 15 \"None\"\n","# config_list[0].lvrg_set.leverage = 2\n","# config_list[0].lvrg_set.static_lvrg = 1\n","# config_list[0].lvrg_set.target_pct = 0.01\n","# config_list[0].lvrg_set.allow_float = 1\n","# # config_list[0].lvrg_set.lvrg_rejection = 0"],"metadata":{"id":"KqVkg236t_f2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_ratio = 0.1\n","short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_bias_arr, long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_bias_arr = \\\n","get_res(res_df, open_info_df, ohlc_list, point2_list, market_data_list, config_list, np_timeidx, funcs, test_ratio=test_ratio, plot_is=1, signi=False)   # open 이 많을 수록 en_ex_pairing elapsed time : 11.58370590209961"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":606},"id":"HHq6cr9GPBot","outputId":"12c9a9db-bdf1-461a-8765-0cf5795e3359","executionInfo":{"status":"ok","timestamp":1648862308364,"user_tz":-540,"elapsed":2407,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"execution_count":77,"outputs":[{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 0.4394702911376953\n","short_obj.shape : (60, 5)\n","long_obj.shape : (60, 5)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1728x576 with 6 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["idep_plot_v7 elapsed time : 1.5761604309082031\n"]}]},{"cell_type":"markdown","source":["### statistics (stem 별로 진행)"],"metadata":{"id":"xgJ_cf1KY1b-"}},{"cell_type":"code","source":["strat_version = config.strat_version\n","\n","short_open_i = short_obj[-1].astype(int)\n","long_open_i = long_obj[-1].astype(int)\n","\n","short_open_tp_1 = res_df['short_tp_1_{}'.format(strat_version)].to_numpy()[short_open_i]\n","long_open_tp_1 = res_df['long_tp_1_{}'.format(strat_version)].to_numpy()[long_open_i]\n","\n","short_open_tp_gap = res_df['short_tp_gap_{}'.format(strat_version)].to_numpy()[short_open_i]  # use open_i\n","long_open_tp_gap = res_df['long_tp_gap_{}'.format(strat_version)].to_numpy()[long_open_i]\n","\n","short_open_epout_0 = res_df['short_epout_0_{}'.format(strat_version)].to_numpy()[short_open_i]\n","long_open_epout_0 = res_df['long_epout_0_{}'.format(strat_version)].to_numpy()[long_open_i]\n","\n","short_open_epout_gap = res_df['short_epout_gap_{}'.format(strat_version)].to_numpy()[short_open_i]  # use open_i\n","long_open_epout_gap = res_df['long_epout_gap_{}'.format(strat_version)].to_numpy()[long_open_i]\n","\n","# ------ pairing 된 en, ex_idx 기준으로 survey 진행 ------ #\n","# 0. high, low (exit_done 까지의) -> partial (tpg) 과 outg survey 목표\n","#   a. short -> tpg - low, outg - high\n","#   b. long -> tpg - high, outg - low\n","short_max_tpg = get_max_tpg_v2(\"SELL\", ohlc_list, short_pr, short_obj[:4], short_open_tp_1, short_open_tp_gap)\n","long_max_tpg = get_max_tpg_v2(\"BUY\", ohlc_list, long_pr, long_obj[:4], long_open_tp_1, long_open_tp_gap)\n","\n","# ------ 0. tp 까지 도달하는 최소 idx 도출, en_idx 부터 ------ #\n","#   a. bias_info_tick 의 limit 을 정해주지 않으면 굉장히 길어질 수 있다고 봄\n","short_max_outg, short_outg_open_idx = get_max_outg_v2(\"SELL\", config, ohlc_list, short_obj, short_tpout_arr, short_open_epout_0, short_open_epout_gap)\n","long_max_outg, long_outg_open_idx = get_max_outg_v2(\"BUY\", config, ohlc_list, long_obj, long_tpout_arr, long_open_epout_0, long_open_epout_gap)"],"metadata":{"id":"bxixGieX1IIR","executionInfo":{"status":"ok","timestamp":1648862209229,"user_tz":-540,"elapsed":365,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"execution_count":71,"outputs":[]},{"cell_type":"markdown","source":["#### tpg survey for partial + outg justification"],"metadata":{"id":"AhR0wApIcK2M"}},{"cell_type":"code","source":["# 1. outg 는 partial 을 위한 histogram 작성 진행\n","# 현재, outg 내부에는 tp 한것과 out 한것이 공존하는 상태\n","bins = 10\n","max_plot_outg = 5\n","\n","titles = ['outg', 'tpg']\n","short_max_datas = [short_max_outg, short_max_tpg]\n","long_max_datas = [long_max_outg, long_max_tpg]\n","max_plot_gaps = [5, 3]\n","\n","plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(12, 8))\n","nrows, ncols = 2, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        )\n","  \n","for ings_idx, (title, short_max_data, long_max_data, max_plot_gap) in enumerate(zip(titles, short_max_datas, long_max_datas, max_plot_gaps)):\n","\n","  inner_gs = gs[ings_idx].subgridspec(nrows=1, ncols=2)\n","\n","  print(len(long_max_data))\n","\n","  short_plot_idx = short_max_data <= max_plot_gap\n","  long_plot_idx = long_max_data <= max_plot_gap\n","\n","  print(np.sum(long_plot_idx))    \n","\n","  short_plot_idx *= ~np.isnan(short_max_data)\n","  long_plot_idx *= ~np.isnan(long_max_data)  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_plot_idx *= ~np.isinf(short_max_data)\n","  long_plot_idx *= ~np.isinf(long_max_data)  # nan 과 inf 때문에 이 방식 채택\n","  \n","  print(np.sum(long_plot_idx))\n","    \n","  plt.subplot(inner_gs[0])\n","  kde_plot_v2(*np.unique(short_max_data[short_plot_idx], return_counts=True))\n","  plt.title('short_' + title)\n","\n","  plt.subplot(inner_gs[1])\n","  kde_plot_v2(*np.unique(long_max_data[long_plot_idx], return_counts=True))\n","  plt.title('long_' + title)\n","\n","  print()\n","\n","# plt.suptitle(title)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":742},"id":"psuZMAgG4XOo","executionInfo":{"status":"ok","timestamp":1648862213160,"user_tz":-540,"elapsed":1614,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"db48a2ab-510a-4582-d111-9bc0b4001a8f"},"execution_count":72,"outputs":[{"output_type":"stream","name":"stdout","text":["131\n","131\n","131\n","131\n","pkx : [0.06896891 0.71267874 1.03453365]\n","pkx : [0.06806157 0.56717973 0.95286195 1.15704666 1.42929293 1.67885201 1.90572391]\n","\n","353\n","284\n","284\n","284\n","pkx : [-57.00438628 -51.3767061  -49.26632604 -35.1971256  -30.27290545 -19.0175451  -13.38986493  -2.13450458]\n","pkx : [-128.4949495   -53.55451955  -44.98989899  -36.42527843  -23.57834758   -2.16679617]\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 864x576 with 4 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["#### outg survey for precision (eploc vars. dependency)"],"metadata":{"id":"1Qaz9Vv_cQkg"}},{"cell_type":"code","source":["# ------------ dependent vars. ------------ #\n","# res_df 에 존재하는 col 는 모두 사용가능함\n","# ------ 1. 도출한 outg 와 vars. pairing 진행 (by valid_idx) ------ #\n","devided_cols = ['tr_{}'.format(strat_version), 'ir_5T']  # tr has the priority\n","public_cols = ['abs_ratio_5T', 'rel_ratio_5T', 'body_rel_ratio_5T']\n","\n","short_datas = [res_df['short_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","long_datas = [res_df['long_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","\n","titles = devided_cols + public_cols"],"metadata":{"id":"aZcTnlbe_i_y","executionInfo":{"status":"ok","timestamp":1648862223579,"user_tz":-540,"elapsed":511,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"execution_count":73,"outputs":[]},{"cell_type":"code","source":["plot_data_range = (-10, 100)\n","plot_outg_range = (0, 10)\n","\n","current_outg = config.tr_set.out_gap\n","\n","plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(12, 18))\n","nrows, ncols = len(short_datas), 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        )\n","\n","for ings_idx, (title, short_data, long_data) in enumerate(zip(titles, short_datas, long_datas)):\n","  inner_gs = gs[ings_idx].subgridspec(nrows=1, ncols=2)\n","\n","  print(len(long_max_outg))\n","\n","  short_plot_idx = (plot_outg_range[0] <= short_max_outg) & (short_max_outg <= plot_outg_range[1])\n","  long_plot_idx = (plot_outg_range[0] <= long_max_outg) & (long_max_outg <= plot_outg_range[1])  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_open_data = short_data[short_outg_open_idx]\n","  long_open_data = long_data[long_outg_open_idx]\n","  \n","  short_plot_idx *= (plot_data_range[0] <= short_open_data) * (short_open_data <= plot_data_range[1])\n","  long_plot_idx *= (plot_data_range[0] <= long_open_data) * (long_open_data <= plot_data_range[1]) # nan 과 inf 때문에 이 방식 채택\n","\n","  short_plot_idx *= ~np.isnan(short_open_data)\n","  long_plot_idx *= ~np.isnan(long_open_data)  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_plot_idx *= ~np.isinf(short_open_data)\n","  long_plot_idx *= ~np.isinf(long_open_data)  # nan 과 inf 때문에 이 방식 채택\n","  \n","  print(np.sum(long_plot_idx))\n","\n","  plt.subplot(inner_gs[0])  \n","  x, y = short_max_outg[short_plot_idx].ravel(), short_open_data[short_plot_idx].ravel()\n","  # plt.bar(x, y, width=0.05)\n","  plt.scatter(x, y)\n","  plt.axvline(current_outg, color='red', linewidth=3)\n","  plt.title(\"{} coef : {:0.3f}\".format(title, np.corrcoef(-x, y)[0, 1]))\n","  # plt.xlim(0, max_plot_outg)  \n","\n","  plt.subplot(inner_gs[1])    \n","  x, y = long_max_outg[long_plot_idx].ravel(), long_open_data[long_plot_idx].ravel()\n","  # plt.bar(x, y, width=0.05)\n","  plt.scatter(x, y)\n","  plt.axvline(current_outg, color='red', linewidth=3)\n","  plt.title(\"{} coef : {:0.3f}\".format(title, np.corrcoef(-x, y)[0, 1]))\n","  # plt.xlim(0, max_plot_outg)\n","\n","  print()  \n","\n","# plt.suptitle(title)\n","plt.show()\n","# print()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"FxMbzDSnpNX2","executionInfo":{"status":"ok","timestamp":1648862225234,"user_tz":-540,"elapsed":1293,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"b23fbe25-98f6-4e1f-d5a6-f8a074e4d06f"},"execution_count":74,"outputs":[{"output_type":"stream","name":"stdout","text":["131\n","131\n","131\n","131\n","\n","131\n","131\n","126\n","126\n","\n","131\n","131\n","131\n","131\n","\n","131\n","131\n","131\n","131\n","\n","131\n","131\n","130\n","130\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 864x1296 with 10 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"jp-MarkdownHeadingCollapsed":true,"tags":[],"id":"Ksth13T0spcQ"},"source":["### significance_v2"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pZlZCr2lspcR"},"outputs":[],"source":["# from google.colab import output\n","# ------------ survey param ------------ #\n","# itv_num_list = [1, 3, 5, 15]\n","# itv_list = ['15m', '30m', '1h', '4h']\n","# itv_list = ['3m', '5m', '15m', '30m', '1h', '4h']\n","val_list = np.arange(0, 4.0, 0.1)     # prcn 1\n","# val_list = np.arange(0.0, 4., 0.03)  # prcn 2\n","# val_list = np.arange(-0.695, -0.75, -0.005)    # prcn 3\n","# val_list = np.arange(0.944, 0.945, 0.0001)    # prcn 4\n","# val_list = np.arange(70, 80, 1)   # prcn -1\n","# val_list = np.arange(200, 180, -5)   # prcn -2\n","\n","# ------------ get survey_res ------------ #\n","result = []\n","config_list_copy = copy.deepcopy(config_list)\n","for set_val in val_list:\n","  # ------------ open 결정 이전의 인자값 ------------ #\n","  # ------ point * mr_res ------ #\n","  # config_list_copy[0].loc_set.zone.degree_list = set_val\n","  # config_list_copy[0].loc_set.point2.wick_score_list = str([set_val])\n","  # config_list_copy[0].loc_set.zone.ir = set_val  \n","  # config_list_copy[0].loc_set.zone.abs_ratio = set_val  \n","\n","  # ------------ open 결정 이후의 인자값 ------------ #\n","  # ------ utils ------ #\n","  # config_list_copy[0].tr_set.out_gap = set_val  \n","  config_list_copy[0].tr_set.ep_gap = set_val \n","\n","  # ------ entry, exit (ep, tp, out vars.) ------ #\n","  # config_list_copy[0].ep_set.ep_out_tick = set_val  \n"," \n","  for utils_, config_ in zip(utils_list, config_list_copy):\n","    # enlist_rtc(res_df, config_, np_timeidx)\n","    enlist_tr(res_df, config_, np_timeidx)\n","  open_info_df = get_open_info_df(ep_loc_v2, res_df, np_timeidx, ID_list, config_list_copy, id_idx_list)   # point * mr_res 이기 때문에 utils_tr & rtc 의 영향을 충분히 받음\n","\n","  try:\n","    result.append(get_res(res_df, open_info_df, ohlc_list, point2_list, market_data_list, config_list_copy, np_timeidx, funcs, test_ratio=test_ratio, plot_is=1, signi=True))\n","  except:\n","    pass\n","\n","survey_res_list = [np.array(result)[:, s_i::3] for s_i in range(3)]   # 3 for s, l, b\n","# short_res, long_res, both_res = survey_res_list\n","\n","# ------------ plot survey_res ------------ #\n","title_list = [\"short\", \"long\", \"both\"]\n","sub_title_list = ['prcn', 'rc', 'len_pr', 'dpf', 'wr', 'sr', 'acc_pr', 'sum_pr', 'min_pr', 'liqd', 'acc_mdd', 'sum_mdd']\n","space_ = \" \" * 120\n","\n","fig = plt.figure(figsize=(24, 8))\n","plt.style.use('dark_background')\n","gs = gridspec.GridSpec(nrows=1,\n","                        ncols=3,\n","                        # height_ratios=[1, 1, 1]\n","                      )\n","# nrows, ncols, h_r = 3, 3, [1, 1, 1]\n","nrows, ncols, h_r = 3, 4, [1, 1, 1]\n","# nrows, ncols, h_r = 4, 3, [1, 1, 1, 1]\n","# if d_idx == 0:\n","# else:\n","  # nrows, ncols, h_r = 2, 2, [1, 1]\n","\n","for d_idx, (title_name, survey_res) in enumerate(zip(title_list, survey_res_list)):  \n","  inner_gs = gs[d_idx].subgridspec(nrows=nrows,\n","                        ncols=ncols,\n","                        height_ratios=h_r\n","                      )\n","  for in_idx, (data_, sub_title) in enumerate(zip(survey_res.T, sub_title_list)):\n","    plt.subplot(inner_gs[in_idx])\n","    x, y = val_list[:len(result)], data_.ravel()\n","    plt.plot(x, y)  # 앞에서부터 len(result) 만큼만    \n","    plt.title(sub_title + '_{:.2f}'.format(x[np.argmax(y)]))\n","    # plt.title(sub_title)\n","\n","plt.suptitle(space_.join(title_list))\n","plt.show()\n","# print(\"\\n\")"]},{"cell_type":"code","source":["\n","# ------------ plot survey_res ------------ #\n","title_list = [\"short\", \"long\", \"both\"]\n","sub_title_list = ['prcn', 'rc', 'len_pr', 'dpf', 'wr', 'sr', 'acc_pr', 'sum_pr', 'min_pr', 'liqd', 'acc_mdd', 'sum_mdd']\n","space_ = \" \" * 120\n","\n","fig = plt.figure(figsize=(24, 8))\n","plt.style.use('dark_background')\n","gs = gridspec.GridSpec(nrows=1,\n","                        ncols=3,\n","                        # height_ratios=[1, 1, 1]\n","                      )\n","# nrows, ncols, h_r = 3, 3, [1, 1, 1]\n","nrows, ncols, h_r = 3, 4, [1, 1, 1]\n","# nrows, ncols, h_r = 4, 3, [1, 1, 1, 1]\n","# if d_idx == 0:\n","# else:\n","  # nrows, ncols, h_r = 2, 2, [1, 1]\n","\n","for d_idx, (title_name, survey_res) in enumerate(zip(title_list, survey_res_list)):  \n","  inner_gs = gs[d_idx].subgridspec(nrows=nrows,\n","                        ncols=ncols,\n","                        height_ratios=h_r\n","                      )\n","  for in_idx, (data_, sub_title) in enumerate(zip(survey_res.T, sub_title_list)):\n","    plt.subplot(inner_gs[in_idx])\n","    x, y = val_list[:len(result)], data_.ravel()\n","    plt.plot(x, y)  # 앞에서부터 len(result) 만큼만    \n","    plt.title(sub_title + '_{:.2f}'.format(x[np.argmax(y)]))\n","    # plt.title(sub_title)\n","\n","plt.suptitle(space_.join(title_list))\n","plt.show()\n","# print(\"\\n\")"],"metadata":{"id":"yxbSDqkl3-4n"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### legacy"],"metadata":{"id":"1GVZ03zDyU2N"}},{"cell_type":"markdown","source":["#### main_functions"],"metadata":{"id":"IWO7KkqltMFt"}},{"cell_type":"code","source":["def get_open_info_df(ep_loc_v2, res_df, np_timeidx, ID_list, config_list, id_idx_list):\n","  start_0 = time.time()\n","  # ------ get mr_res, zone_arr ------ #\n","  short_mr_res_obj = np.array([ep_loc_v2(res_df, config_, np_timeidx, show_detail=True, ep_loc_side=OrderSide.SELL) for config_ in config_list])\n","  long_mr_res_obj = np.array([ep_loc_v2(res_df, config_, np_timeidx, show_detail=True, ep_loc_side=OrderSide.BUY) for config_ in config_list])\n","  short_open_idx_list = [np.where(res_df['short_open_{}'.format(id)].to_numpy() * mr_res)[0] for id, mr_res in zip(ID_list, short_mr_res_obj[:, 0].astype(np.float64))]   # \"point * mr_Res\"\n","  long_open_idx_list = [np.where(res_df['long_open_{}'.format(id)].to_numpy() * mr_res)[0] for id, mr_res in zip(ID_list, long_mr_res_obj[:, 0].astype(np.float64))]  # zip 으로 zone (str) 과 묶어서 dtype 변경됨\n","\n","  # ------ open_info_arr ------ #\n","  short_side_list = [np.full(len(list_), OrderSide.SELL) for list_ in short_open_idx_list]\n","  long_side_list = [np.full(len(list_), OrderSide.BUY) for list_ in long_open_idx_list]\n","\n","  short_zone_list = [zone_res[short_open_idx] for zone_res, short_open_idx in zip(short_mr_res_obj[:, 1], short_open_idx_list)]\n","  long_zone_list = [zone_res[long_open_idx] for zone_res, long_open_idx in zip(long_mr_res_obj[:, 1], long_open_idx_list)]\n","\n","  short_id_list = [np.full(len(list_), id) for id, list_ in zip(ID_list, short_open_idx_list)]\n","  long_id_list = [np.full(len(list_), id) for id, list_ in zip(ID_list, long_open_idx_list)]\n","\n","  selected_id_idx = np.arange(len(id_idx_list))\n","  short_id_idx_list = [np.full(len(list_), id) for id, list_ in zip(selected_id_idx, short_open_idx_list)]\n","  long_id_idx_list = [np.full(len(list_), id) for id, list_ in zip(selected_id_idx, long_open_idx_list)]\n","\n","  # ------ get open_info_df ------ #\n","  #   series 만들어서 short / long 끼리 합치고 둘이 합치고, 중복은 우선 순위 정해서 제거\n","  short_open_df_list = [pd.DataFrame(index=index_, data=np.vstack((data_)).T, columns=['side', 'zone', 'id', 'id_idx']) for index_, data_ in zip(short_open_idx_list, zip(short_side_list, short_zone_list, short_id_list, short_id_idx_list))]\n","  long_open_df_list = [pd.DataFrame(index=index_, data=np.vstack((data_)).T, columns=['side', 'zone', 'id', 'id_idx']) for index_, data_ in zip(long_open_idx_list, zip(long_side_list, long_zone_list, long_id_list, long_id_idx_list))]\n","\n","  open_info_df = pd.concat(short_open_df_list + long_open_df_list)\n","  # ------ sorting + unique ------ #\n","  open_info_df.sort_index(inplace=True)\n","  # print(len(open_info_df))\n","  # print(len(open_info_df))\n","  # open_info_df.head()\n","  print(\"get_open_info_df elapsed time :\", time.time() - start_0)\n","  return open_info_df[~open_info_df.index.duplicated(keep='first')]  # 먼저 순서를 우선으로 지정  "],"metadata":{"id":"MY1csdNRLGsk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def get_res(res_df, open_info_df, ohlc_list, point2_list, market_data_list, config_list, np_timeidx, funcs, test_ratio=0.3, plot_is=True, signi=False):\n","  # ------------ make open_info_list ------------ #\n","  open_idx = open_info_df.index.to_numpy()\n","  len_df = len(res_df)\n","  s_idx = (open_idx < int(len_df * (1 - test_ratio))) == plot_is\n","  s_open_info_df = open_info_df[s_idx]\n","  s_open_idx = open_idx[s_idx]\n","\n","  open_info_list = [s_open_info_df[col_].to_numpy() for col_ in s_open_info_df.columns]\n","  side_arr, zone_arr, id_arr, id_idx_arr = open_info_list\n","\n","  # ------------ get paired_res ------------ #\n","  start_0 = time.time()\n","  paired_res = en_ex_pairing(res_df, s_open_idx, open_info_list, ohlc_list, point2_list, market_data_list, config_list, np_timeidx, funcs)\n","  # valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr = paired_res\n","  print(\"en_ex_pairing elapsed time :\", time.time() - start_0)  #  0.37 --> 0.3660471439361572 --> 0.21(lesser if)\n","\n","  # ------------ idep_plot ------------ #\n","  start_0 = time.time()\n","  h, l = ohlc_list[1:3]\n","  res = idep_plot_v7(len_df, config_list[0], h, l, s_open_idx, side_arr, paired_res, inversion=False, sample_ratio=1 - test_ratio, signi=signi)\n","  print(\"idep_plot_v7 elapsed time :\", time.time() - start_0)   # 1.40452 (v6) 1.4311 (v5)\n","\n","  return res"],"metadata":{"id":"eiQ36_SLLE3w"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def idep_plot_v7(len_df, config, h, l, open_idx, side_arr, paired_res, inversion=False, sample_ratio=0.7, title_position=(0.5, 0.5), fontsize=15, signi=False):\n","    if not signi:\n","        plt.style.use(['dark_background', 'fast'])\n","        fig = plt.figure(figsize=(24, 8))\n","        gs = gridspec.GridSpec(nrows=2,  # row 몇 개\n","                               ncols=3,  # col 몇 개\n","                               height_ratios=[10, 1]\n","                               # height_ratios=[10, 10, 1]\n","                               )\n","    gs_idx = 0\n","    # plt.suptitle(key)\n","    \n","    p_ranges, p_qty = literal_eval(config.tp_set.p_ranges), literal_eval(config.tp_set.p_qty)\n","    assert np.sum(p_qty) == 1.0\n","    assert len(p_ranges) == len(p_qty)\n","\n","    if sample_ratio is not None:\n","      sample_len = int(len_df * sample_ratio)\n","    else:\n","      sample_len = len_df\n","\n","    # ------ short & long data preparation ------ #\n","    # start_0 = time.time()\n","    valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr, bias_arr = paired_res    \n","    assert len(valid_openi_arr) != 0, \"assert len(valid_openi_arr) != 0\"    \n","    short_valid_openi_idx = np.where(side_arr[valid_openi_arr] == OrderSide.SELL)[0]  # valid_openi_arr 에 대한 idx, # side_arr,\n","    long_valid_openi_idx = np.where(side_arr[valid_openi_arr] == OrderSide.BUY)[0]\n","\n","    valid_open_idx = open_idx[valid_openi_arr].reshape(-1, 1)\n","\n","    short_obj = np.hstack((pair_price_arr, pair_idx_arr, valid_open_idx))[short_valid_openi_idx]\n","    long_obj = np.hstack((pair_price_arr, pair_idx_arr, valid_open_idx))[long_valid_openi_idx]\n","    both_obj = np.vstack((short_obj, long_obj))\n","    print(\"short_obj.shape :\", short_obj.shape)\n","    print(\"long_obj.shape :\", long_obj.shape)\n","\n","    short_obj, long_obj, both_obj = [np.split(obj_, 5, axis=1) for obj_ in [short_obj, long_obj, both_obj]]\n","\n","    short_lvrg_arr, long_lvrg_arr = [lvrg_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    short_fee_arr, long_fee_arr = [fee_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    short_tpout_arr, long_tpout_arr = [tpout_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    short_bias_arr, long_bias_arr = [bias_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    # print(\"long_bias_arr.shape :\", long_bias_arr.shape)    \n","    # print(\"elapsed time :\", time.time() - start_0)\n","\n","    short_true_bias_idx = short_bias_arr[:, 0] <= short_bias_arr[:, 1] # info, threshold (등호의 유무가 매우 유의미함)\n","    long_true_bias_idx = long_bias_arr[:, 0] >= long_bias_arr[:, 1]\n","\n","    # ------ plot_data ------ #\n","    try:\n","      # start_0 = time.time()\n","      short_pr, short_liqd = get_pr_v3(OrderSide.SELL, h, l, short_obj, short_tpout_arr, short_lvrg_arr, short_fee_arr, p_ranges, p_qty, inversion)\n","      short_total_pr = to_total_pr(len_df, short_pr, short_obj[-2])\n","      short_cum_pr = np.cumprod(short_total_pr)\n","      # short_liqd = liquidation_v2(OrderSide.SELL, h, short_obj[:4], short_lvrg_arr, short_fee_arr)\n","      short_prcn, short_rc = precision(short_pr, short_true_bias_idx), recall(short_true_bias_idx)\n","      if signi:\n","        short_idep_res_obj = (short_prcn, short_rc) + get_res_info_nb_v2(sample_len, short_pr, short_total_pr, short_cum_pr, short_liqd)\n","      else:\n","        gs_idx = plot_info_v4(gs, gs_idx, sample_len, short_pr, short_total_pr, short_cum_pr, short_liqd, short_prcn, short_rc, short_lvrg_arr[-1], title_position, fontsize)\n","      # print(\"elapsed time :\", time.time() - start_0)\n","\n","    except Exception as e:\n","      gs_idx += 1\n","      print(\"error in short plot_data :\", e)\n","\n","    try:\n","      # start_0 = time.time()\n","      long_pr, long_liqd = get_pr_v3(OrderSide.BUY, h, l, long_obj, long_tpout_arr, long_lvrg_arr, long_fee_arr, p_ranges, p_qty, inversion)\n","      long_total_pr = to_total_pr(len_df, long_pr, long_obj[-2])\n","      long_cum_pr = np.cumprod(long_total_pr)\n","      # long_liqd = liquidation_v2(OrderSide.BUY, l, long_obj[:4], long_lvrg_arr, long_fee_arr)\n","      long_prcn, long_rc = precision(long_pr, long_true_bias_idx), recall(long_true_bias_idx)\n","      if signi:\n","        long_idep_res_obj = (long_prcn, long_rc) + get_res_info_nb_v2(sample_len, long_pr, long_total_pr, long_cum_pr, long_liqd)\n","      else:\n","        gs_idx = plot_info_v4(gs, gs_idx, sample_len, long_pr, long_total_pr, long_cum_pr, long_liqd, long_prcn, long_rc, long_lvrg_arr[-1], title_position, fontsize)\n","      # print(\"elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","      gs_idx += 1\n","      print(\"error in long plot_data :\", e)\n","\n","    try:\n","      # start_0 = time.time()\n","      both_pr = np.vstack((short_pr, long_pr))  # for 2d shape, obj 를 1d 로 만들지 않는 이상, pr 은 2d 유지될 것\n","      both_total_pr = to_total_pr(len_df, both_pr, both_obj[-2])\n","      both_cum_pr = np.cumprod(both_total_pr)\n","      both_liqd = min(short_liqd, long_liqd)\n","      both_true_bias_idx = np.hstack((short_true_bias_idx, long_true_bias_idx))  # for 1d shape\n","      both_prcn, both_rc = precision(both_pr, both_true_bias_idx), recall(both_true_bias_idx)\n","      if signi:\n","        both_idep_res_obj = (both_prcn, both_rc) + get_res_info_nb_v2(sample_len, both_pr, both_total_pr, both_cum_pr, both_liqd)\n","      else:\n","        gs_idx = plot_info_v4(gs, gs_idx, sample_len, both_pr, both_total_pr, both_cum_pr, both_liqd, both_prcn, both_rc, lvrg_arr[-1], title_position, fontsize)\n","      # print(\"elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","      gs_idx += 1\n","      print(\"error in both plot_data :\", e)\n","\n","    if not signi:\n","        for obj, cum_pr in zip([short_obj, long_obj, both_obj], [short_cum_pr, long_cum_pr, both_cum_pr]):\n","          try:\n","            # start_0 = time.time()\n","            gs_idx = frq_dev_plot_v3(gs, gs_idx, len_df, sample_len, obj[-2], cum_pr[-1], fontsize)\n","            # print(\"elapsed time :\", time.time() - start_0)          \n","          except Exception as e:\n","            gs_idx += 1\n","            print(\"error in frq_dev_plot_v3 :\", e)\n","\n","        plt.show()\n","        plt.close()\n","        return short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_bias_arr, \\\n","                long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_bias_arr\n","    else:\n","        return [short_idep_res_obj[:-1], long_idep_res_obj[:-1], both_idep_res_obj[:-1]]"],"metadata":{"id":"xafHpMLwESKf"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### get paired_res function"],"metadata":{"id":"EFyWTuscH8VH"}},{"cell_type":"code","source":["def en_ex_pairing(res_df, open_idx, open_info_list, ohlc_list, point2_list, market_data_list, config_list, np_timeidx, funcs):  # 이미 충분히 줄여놓은 idx 임\n","    side_arr, zone_arr, id_arr, id_idx_arr = open_info_list\n","    id_idx_arr = id_idx_arr.astype(int)\n","\n","    ep_out, ep_loc_point2, lvrg_set = funcs\n","\n","    valid_openi_list, pair_idx_list, pair_price_list, lvrg_list, fee_list, tpout_list, bias_list = [[] for li in range(7)]\n","    len_df = len(res_df)\n","    len_open_idx = len(open_idx)\n","    i, open_i = 0, -1  # i for total_res_df indexing\n","\n","    while 1:\n","        # ------------ entry phase ------------ #\n","        open_i += 1  # 확인 끝났으면 조기 이탈(+1), 다음 open_idx 조사 진행\n","        if open_i >= len_open_idx:\n","          break\n","          \n","        # ------ ep_loc ------ #\n","        op_idx = open_idx[open_i]  # open_i 는 i 와 별개로 운영\n","        if op_idx < i:  # i = 이전 거래 끝난후의 res_df index - \"거래 종료후 거래 시작\", '<' : 거래 종료시점 진입 가능하다는 의미\n","            continue\n","\n","        # ------ dynamic data by ID ------ #\n","        #     1. 해당 id 로 config 재할당해야함\n","        id_idx = id_idx_arr[open_i]\n","        config = config_list[id_idx]\n","        strat_version = config.strat_version\n","        open_side = side_arr[open_i]\n","\n","        side_pos = 'short' if open_side == OrderSide.SELL else 'long'\n","        ep_arr = res_df['{}_ep_{}'.format(side_pos, strat_version)].to_numpy()  # Todo - while loop 내에서 to_numpy() 반복하느니, pd_indexing 이 낫지 않을까\n","        tp_arr = res_df['{}_tp_{}'.format(side_pos, strat_version)].to_numpy()  # => eptpout arr_list 만들어서 꺼내 사용하면 될 것\n","        out_arr = res_df['{}_out_{}'.format(side_pos, strat_version)].to_numpy()\n","        bias_info_arr = res_df['{}_bias_info_{}'.format(side_pos, strat_version)].to_numpy()  # ex. rolling(entry ~ end)'s high\n","        bias_thresh_arr = res_df['{}_bias_thresh_{}'.format(side_pos, strat_version)].to_numpy()  # ex. close + dc_T20 * 0.5\n","\n","        # ------ ei_k & point2 ------ #\n","        i = op_idx + 1  # open_signal 이 close_bar.shift(1) 이라고 가정하고 다음 bar 부터 체결확인한다는 의미\n","        if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","            break\n","        exec_j, ep_j, tp_j, out_j, entry_done, en_p, fee = check_eik_point2_exec(res_df, config, op_idx, len_df, open_side, [*ohlc_list, ep_arr], point2_list, ep_out, ep_loc_point2)\n","        i = exec_j\n","        \n","        if not entry_done:\n","            continue\n","\n","        # ------ leverage ------ #\n","        out = out_arr[out_j]  # lvrg_set use out on out_j\n","        leverage = lvrg_set(res_df, config, open_side, en_p, out, fee)  # res_df 변수 사용됨 - 주석 처리 된 상태일뿐\n","        if leverage is None:\n","            continue\n","\n","        exit_done, cross_on = 0, 0\n","        # ------ check tpout_onexec ------ #\n","        # if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","        if config.ep_set.entry_type == \"LIMIT\":\n","            if config.tp_set.tp_onexec:  # dynamic 은 tp_onexec 사용하는 의미가 없음\n","                tp_j = exec_j\n","            if config.out_set.out_onexec:  # dynamic 은 out_onexec 사용하는 의미가 없음\n","                out_j = exec_j\n","\n","        while 1:\n","            # ------------ exit phase ------------ #\n","            if not config.tp_set.static_tp:\n","                tp_j = i\n","            if not config.out_set.static_out:\n","                out_j = i\n","\n","            # ------------ tp ------------ #\n","            if not config.tp_set.non_tp and i != exec_j:\n","                exit_done, ex_p, fee = check_limit_tp_exec(res_df, config, open_i, i, tp_j, len_df, fee, open_side, exit_done, [*ohlc_list, [tp_arr]])  # 여기서는 j -> i 로 변경해야함\n","                # if config.tp_set.tp_type in ['LIMIT']:  # 'BOTH' -> 앞으로는, LIMIT 밖에 없을거라 주석처리함\n","                # if not exit_done and config.tp_set.tp_type in ['MARKET', 'BOTH']:\n","\n","            # ------------ out ------------ #\n","            # ------ signal_out ------ #\n","            if not exit_done:\n","              exit_done, cross_on, ex_p, fee = check_market_out_exec(config, open_i, i, len_df, fee, open_side, cross_on, exit_done, [np_timeidx, *market_data_list])\n","            # ------ hl_out ------ #\n","            if config.out_set.hl_out != \"None\":\n","              if not exit_done:  # and i != len_df - 1:                \n","                  exit_done, ex_p, fee = check_out(config, open_i, i, out_j, len_df, fee, open_side, exit_done, [*ohlc_list, out_arr])\n","\n","            if exit_done:  # 이 phase 는 exit_phase 뒤에도 있어야할 것 - entry_done var. 사용은 안하겠지만\n","                # ------ append dynamic vars. ------ #\n","                valid_openi_list.append(open_i)  # side, zone, start_ver arr 모두 openi_list 로 접근하기 위해 open_i 를 담음\n","                pair_idx_list.append([exec_j, i])  # entry & exit (체결 기준임)\n","                pair_price_list.append([en_p, ex_p])\n","                lvrg_list.append(leverage)\n","                fee_list.append(fee)\n","                tpout_list.append([tp_arr[tp_j], out_arr[out_j]])  # for tpout_line plot_check\n","                # bias_list.append([bias_info_arr[exec_j], bias_thresh_arr[exec_j]])  # backtest 에서만 가능한 future_data 사용\n","                bias_list.append([bias_info_arr[exec_j], tp_arr[tp_j]])  # bias_info 는 entry_idx 부터 & tp = bias_thresh \n","\n","                # open_i += 1  # 다음 open_idx 조사 진행\n","                break\n","\n","            # 1. 아래있으면, 체결 기준부터 tp, out 허용\n","            # 2. 위에있으면, entry 다음 tick 부터 exit 허용\n","            i += 1\n","            if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","                break\n","                \n","        if i >= len_df: # or open_i >= len_open_idx:  # res_df 의 last_index 까지 돌아야함\n","            break\n","        else:\n","            continue\n","\n","    return np.array(valid_openi_list), np.array(pair_idx_list), np.array(pair_price_list), np.array(lvrg_list), np.array(fee_list), np.array(tpout_list), np.array(bias_list)\n","\n","\n","def check_eik_point2_exec(res_df, config, op_idx, len_df, open_side, np_datas, point2_list, ep_out, ep_loc_point2):\n","    o, h, l, c, ep_arr = np_datas\n","    ep_j = op_idx\n","    tp_j = op_idx\n","    out_j = op_idx\n","\n","    strat_version = config.strat_version    \n","    allow_ep_in = 0 if config.ep_set.point2.use_point2 else 1\n","    entry_done = 0\n","    ep = None\n","\n","    if config.ep_set.entry_type == \"LIMIT\":\n","        fee = config.trader_set.limit_fee\n","\n","        for e_j in range(op_idx + 1, len_df):\n","            # ------ index setting for dynamic options ------ #\n","            if not config.ep_set.static_ep:\n","                ep_j = e_j  # dynamic_ep 를 위한 ep_index var.\n","                out_j = e_j  # dynamic_out 를 위한 out_index var. - 조건식이 static_ep 와 같이 있는 이유 모름 => dynamic_lvrg 로 사료됨\n","\n","            if not config.tp_set.static_tp:\n","                tp_j = e_j\n","\n","            # ------ ei_k ------ # - limit 사용하면 default 로 ei_k 가 존재해야함\n","            if ep_out(res_df, config, op_idx, e_j, tp_j, [h, l], open_side):\n","              break\n","\n","            # ------ point2 ------ #\n","            if not allow_ep_in:\n","                allow_ep_in, out_j = ep_loc_point2(res_df, config, e_j, out_j, point2_list, side=open_side)\n","                if allow_ep_in:\n","                  if config.ep_set.point2.entry_type == \"LIMIT\":\n","                    ep_j = e_j\n","                    # print(\"e_j in point2 :\", e_j)\n","                    continue\n","\n","            # ------ check ep_exec ------ #\n","            if allow_ep_in:\n","              if config.ep_set.point2.use_point2 and config.ep_set.point2.entry_type == 'MARKET':\n","                entry_done = 1\n","                ep = c[e_j]\n","                break\n","              else:\n","                if open_side == OrderSide.SELL:\n","                    if h[e_j] >= ep_arr[ep_j]:\n","                        entry_done = 1\n","                        ep = ep_arr[ep_j]\n","                        if o[e_j] >= ep_arr[ep_j]:  # open comp 는 결국, 수익률에 얹어주는 logic (반보수) -> 사용 보류\n","                            ep = o[e_j]\n","                        break\n","                else:\n","                    if l[e_j] <= ep_arr[ep_j]:\n","                        entry_done = 1\n","                        ep = ep_arr[ep_j]\n","                        if o[e_j] <= ep_arr[ep_j]:\n","                            ep = o[e_j]\n","                        break\n","\n","    else:  # market entry\n","        e_j = op_idx + 1\n","        entry_done = 1\n","        ep = c[op_idx]\n","        fee = config.trader_set.market_fee\n","\n","    return e_j, ep_j, tp_j, out_j, entry_done, ep, fee  # 다음 start_i <-- e_j 로 변경\n","    #   e_j => 다음 phase 의 시작 index <-> ep_j : ep 의 기준 index\n","    #   ep_j, tp_j, out_j 가 return 되어야함 - exit phase 에서 이어가기 위함\n","\n","\n","def check_limit_tp_exec(res_df, config, open_i, j, tp_j, len_df, fee, open_side, exit_done, np_datas):\n","    o, h, l, c, tps = np_datas\n","    tp = None\n","    strat_version = config.strat_version\n","    len_tps = len(tps)\n","\n","    for tp_i, tp_arr in enumerate(tps):\n","        #     decay adjustment    #\n","        #     tp_j includes dynamic_j - functionalize  #\n","        try:\n","            if config.tr_set.decay_gap != \"None\":\n","                decay_share = (j - open_i) // config.tp_set.decay_term\n","                decay_remain = (j - open_i) % config.tp_set.decay_term\n","                if j != open_i and decay_remain == 0:\n","                    if open_side == OrderSide.SELL:\n","                        tp_arr[tp_j] += res_df['short_tp_gap_{}'.format(strat_version)].iloc[open_i] * config.tr_set.decay_gap * decay_share\n","                    else:\n","                        tp_arr[tp_j] -= res_df['long_tp_gap_{}'.format(strat_version)].iloc[open_i] * config.tr_set.decay_gap * decay_share\n","        except:\n","            pass\n","\n","        if open_side == OrderSide.SELL:\n","            if l[j] <= tp_arr[tp_j]:  # and partial_tp_cnt == tp_i:  # we use static tp now\n","                # if l[j] <= tp_arr[j] <= h[j]: --> 이건 잘못되었음\n","                # partial_tp_cnt += 1 --> partial_tp 보류\n","\n","                # ------ dynamic tp ------ #\n","                if tp_arr[j] != tp_arr[j - 1] and not config.tp_set.static_tp:\n","                    # tp limit 이 불가한 경우 - open 이 이미, tp 를 넘은 경우\n","                    if o[j] < tp_arr[j]:\n","                        tp = o[j]\n","                    # tp limit 이 가능한 경우 - open 이 아직, tp 를 넘지 않은 경우\n","                    else:\n","                        tp = tp_arr[j]\n","                # ------ static tp ------ #\n","                else:\n","                    #   tp limit 이 불가한 경우 - open 이 이미, tp 를 넘은 경우\n","                    if o[j] < tp_arr[tp_j]:  # static 해놓고 decay 사용하면 dynamic 이니까\n","                        if config.tr_set.decay_gap != \"None\" and decay_remain == 0:\n","                            tp = o[j]  # tp_j -> open_i 를 가리키기 때문에 decay 는 한번만 진행되는게 맞음\n","                        else:\n","                            tp = tp_arr[tp_j]\n","                    else:\n","                        tp = tp_arr[tp_j]\n","\n","                if tp_i == len_tps - 1:\n","                    exit_done = 1  # partial 을 고려해 exit_done = 1 상태는 tp_i 가 last_index 로 체결된 경우만 해당\n","\n","        else:\n","            if h[j] >= tp_arr[tp_j]:\n","                # ------ dynamic tp ------ #\n","                if tp_arr[j] != tp_arr[j - 1] and not config.tp_set.static_tp:\n","                    if o[j] > tp_arr[j]:\n","                        tp = o[j]\n","                    else:\n","                        tp = tp_arr[j]\n","\n","                # ------ static tp ------ #\n","                else:\n","                    if o[j] > tp_arr[tp_j]:\n","                        if config.tr_set.decay_gap != \"None\" and decay_remain == 0:\n","                            tp = o[j]\n","                        else:\n","                            tp = tp_arr[tp_j]\n","                    else:\n","                        tp = tp_arr[tp_j]\n","\n","                if tp_i == len_tps - 1:\n","                    exit_done = 1  # partial 을 고려해 exit_done = 1 상태는 tp_i 가 last_index 로 체결된 경우만 해당\n","\n","    if exit_done:\n","        fee += config.trader_set.limit_fee\n","\n","    return exit_done, tp, fee\n","\n","\n","def check_market_out_exec(config, open_i, j, len_df, fee, open_side, cross_on, exit_done, np_datas):\n","    np_timeidx, c, bb_lower_5T, bb_upper_5T, rsi_exit, ha_o, ha_h, ha_l, ha_c = np_datas\n","    ex_p = None\n","    strat_version = config.strat_version\n","\n","    # ------ timestamp ------ #\n","    if config.out_set.tf_exit != \"None\":\n","        if np_timeidx[j] % config.out_set.tf_exit == config.out_set.tf_exit - 1 and j != open_i:\n","            exit_done = 1\n","\n","    # ------ rsi ------ # -> vectorize 가능함 => 추후 적용\n","    if config.out_set.rsi_exit:\n","        if open_side == OrderSide.SELL:\n","            if (rsi_exit[j - 1] >= 50 - config.loc_set.point.osc_band) & (rsi_exit[j] < 50 - config.loc_set.point.osc_band):\n","                exit_done = 1\n","        else:\n","            if (rsi_exit[j - 1] <= 50 + config.loc_set.point.osc_band) & (rsi_exit[j] > 50 + config.loc_set.point.osc_band):\n","                exit_done = 1\n","\n","    # ------ heikin_ashi ------ #\n","    # if strat_version in ['v3_3']:\n","    #     if open_side == OrderSide.SELL:\n","    #       if (ha_o[j] < ha_c[j]):# & (ha_o[j] == ha_l[j]):   # 양봉 출현\n","    #           exit_done = 1\n","    #     else:\n","    #       if (ha_o[j] > ha_c[j]):# & (ha_o[j] == ha_h[j]):  # 음봉 출현\n","    #           exit_done = 1\n","\n","    # ------------ early out ------------ #\n","    # ------ bb ------ # --> cross_on 기능은 ide latency 개선 여부에 해당되지 않음\n","    if strat_version in ['v5_2']:\n","        if open_side == OrderSide.SELL:\n","            if c[j] < bb_lower_5T[j] < c[j - 1]:\n","                cross_on = 1\n","            if cross_on == 1 and c[j] > bb_upper_5T[j] > c[j - 1]:\n","                exit_done = 1\n","        else:\n","            if c[j] > bb_upper_5T[j] > c[j - 1]:\n","                cross_on = 1\n","            if cross_on == 1 and c[j] < bb_lower_5T[j] < c[j - 1]:\n","                exit_done = 1\n","\n","    if exit_done:\n","        ex_p = c[j]\n","        fee += config.trader_set.market_fee\n","\n","    return exit_done, cross_on, ex_p, fee\n","\n","\n","def check_out(config, open_i, j, out_j, len_df, fee, open_side, exit_done, np_datas):\n","    o, h, l, c, out_arr = np_datas\n","    ex_p = None\n","\n","    if config.out_set.hl_out:\n","        if open_side == OrderSide.SELL:\n","            if h[j] >= out_arr[out_j]:  # check out only once\n","                exit_done = 1\n","        else:\n","            if l[j] <= out_arr[out_j]:  # check out only once\n","                exit_done = 1\n","    else:  # close_out\n","        if open_side == OrderSide.SELL:\n","            if c[j] >= out_arr[out_j]:  # check out only once\n","                exit_done = 1\n","        else:\n","            if c[j] <= out_arr[out_j]:  # check out only once\n","                ex_p = c[j]\n","                exit_done = 1\n","\n","    if exit_done:\n","        if config.out_set.hl_out:\n","            ex_p = out_arr[out_j]\n","        else:\n","            ex_p = c[j]\n","\n","        if open_side == OrderSide.SELL:\n","            if o[j] >= out_arr[out_j]:\n","                ex_p = o[j]\n","        else:\n","            if o[j] <= out_arr[out_j]:\n","                ex_p = o[j]\n","\n","        fee += config.trader_set.market_fee\n","\n","    return exit_done, ex_p, fee"],"metadata":{"id":"qfbtFVMR01UJ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"jp-MarkdownHeadingCollapsed":true,"tags":[],"id":"zQ-roiifspcX"},"source":["#### ep_loc.point & zone legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Js5eL87VspcX"},"outputs":[],"source":["\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 (res_df['close'] < res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(strat_version)] - 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] >= res_df['bb_lower_1m']) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['bb_lower_1m']) &\n","    #                 (res_df['close'] < res_df['bb_lower_1m'])\n","    #                 , res_df['entry_{}'.format(strat_version)] - 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   (res_df['close'] > res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(strat_version)] + 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] <= res_df['bb_upper_1m']) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['bb_upper_1m']) &\n","    #                   (res_df['close'] > res_df['bb_upper_1m'])\n","    #                 , res_df['entry_{}'.format(strat_version)] + 1, res_df['entry_{}'.format(strat_version)])\n","\n","\n","    \n","   # --------------- ema --------------- #   \n","  # res_df['ema5_1m'] = ema(res_df['close'], 5).shift(1)\n","\n","  #   # --------------- cloud bline --------------- #   \n","  # res_df['cloud_bline_1m'] = cloud_bline(res_df, 26).shift(1)\n","  \n","    #       stochastic      #\n","  # res_df['stoch'] = stoch(res_df, 5, 3, 3)\n","\n","    #       fisher      #\n","  # res_df['fisher30'] = fisher(res_df, 30)\n","  # res_df['fisher60'] = fisher(res_df, 60)\n","  # res_df['fisher120'] = fisher(res_df, 120)\n","\n","    #       cctbbo      #\n","  # res_df['cctbbo'], _ = cct_bbo(res_df, 21, 13)\n","\n","    #       ema_roc      #\n","  # res_df['ema_roc'] = ema_roc(res_df['close'], 13, 9)\n","\n","\n","   # ------------------------------ htf data ------------------------------ #    \n","\n","  #             Todo              #\n","  # htf_df = pd.read_excel(date_path2 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # htf_df = pd.read_excel(date_path3 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # htf_df = pd.read_excel(date_path4 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # htf_df = pd.read_excel(date_path5 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # # # # htf_df = pd.read_excel(date_path6 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","\n","  # # ---- htf index slicing ---- #\n","  # htf_df = htf_df.loc[:res_df.index[-1]]\n","  \n","  # print(\"res_df.index[-1] :\", res_df.index[-1])\n","  # print(\"htf_df.index[-1] :\", htf_df.index[-1])\n","\n","  # res_df = dc_line(res_df, htf_df, '5m')\n","  # res_df = dc_level(res_df, '5m', 1)\n","\n","\n","  # # # if \"sma4\" in res_df.columns:\n","  # # #   res_df.drop(\"sma4\", axis=1, inplace=1)\n","\n","  # # htf_df['sma'] = htf_df['close'].rolling(60).mean()\n","  # # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, htf_df, [-1]), columns=['sma_30m']))\n","  \n","  # htf_df['stoch'] = stoch(htf_df, 13, 3, 3)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, htf_df, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","   \n","  # fifth_df['ema'] = ema(fifth_df['close'], 5)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, fifth_df, [-1]), columns=['ema5']))\n","\n","        # ------------------------------------ short ------------------------------------ # \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 0:\n","        #   mr_score += 1          \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_upper_1m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_upper_3m'].iloc[i] <= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_upper_5m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == 'MARKET':\n","        #   mr_const_cnt += 1\n","        #   if (res_df['close'].iloc[i] - res_df['short_tp'].iloc[i]) / (res_df['short_out'].iloc[i] - res_df['close'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error):  \n","        #     mr_score += 1\n","\n","           \n","        # ------- entry once ------- #   \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == 1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == -1:\n","        #     prev_entry_cnt += 1          \n","        # # # print(\"prev_entry_cnt :\", prev_entry_cnt)\n","\n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] < res_df['bb_lower_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_lower2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_base_1h'].iloc[i]:\n","\n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] < res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","  \n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['low'].iloc[i] > res_df['short_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1\n","\n","\n","\n","        # ------------------------------------ long ------------------------------------ # \n","          \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 1:\n","        #   mr_score += 1   \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 1:\n","        #   mr_score += 1     \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 1:\n","          # mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_lower_1m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_lower_3m'].iloc[i] >= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_lower_5m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == \"MARKET\":\n","          # mr_const_cnt += 1        \n","          # if (res_df['long_tp'].iloc[i] - res_df['close'].iloc[i]) / (res_df['close'].iloc[i] - res_df['long_out'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error): # 일반적으로 dr 상에서 tp 비율이 더 커짐 (tr 보다)\n","          #   mr_score += 1\n","\n","        # -------------- ep limit -------------- #    \n","        # mr_const_cnt += 1\n","        # # if (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # if config.ep_set.min_eplim_pct < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # # if 0 < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        #   # if res_df['st_gap_15m'].iloc[i] / res_df['open'].iloc[i] < 0:\n","        #   #   print(\"i, res_df['st_gap_15m'].iloc[i] :\", i, res_df['st_gap_15m'].iloc[i])\n","        #   mr_score += 1\n","\n","\n","        # -------------- entry once -------------- #    \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == -1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == 1:\n","        #     prev_entry_cnt += 1\n","          \n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","          \n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] > res_df['bb_upper_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_upper2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_base_1h'].iloc[i]:\n","        \n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] > res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","\n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['high'].iloc[i] < res_df['long_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","          \n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1"]},{"cell_type":"markdown","source":["#### dump"],"metadata":{"id":"_blyFhQJUd5X"}},{"cell_type":"code","source":["titles = public_cols +devided_cols\n","max_plot_outg = 10\n","\n","for title, short_data, long_data in zip(titles, short_datas, long_datas):\n","\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(12, 5))\n","  nrows, ncols = 1, 2\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                          ncols=ncols\n","                          )\n","    \n","  print(len(long_max_outg))\n","\n","  short_plot_idx = short_max_outg <= max_plot_outg\n","  long_plot_idx = long_max_outg <= max_plot_outg  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_open_data = short_data[short_outg_open_idx]\n","  long_open_data = long_data[long_outg_open_idx]\n","  \n","  short_plot_idx *= short_open_data <= 10\n","  long_plot_idx *= long_open_data <= 10 # nan 과 inf 때문에 이 방식 채택\n","\n","  short_plot_idx *= ~np.isnan(short_open_data)\n","  long_plot_idx *= ~np.isnan(long_open_data)  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_plot_idx *= ~np.isinf(short_open_data)\n","  long_plot_idx *= ~np.isinf(long_open_data)  # nan 과 inf 때문에 이 방식 채택\n","  \n","  print(np.sum(long_plot_idx))\n","\n","  plt.subplot(gs[0])\n","  x, y = short_max_outg[short_plot_idx].ravel(), short_open_data[short_plot_idx].ravel()\n","  # plt.bar(x, y, width=0.05)\n","  plt.scatter(x, y)\n","  plt.axvline(0.5, color='red', linewidth=3)\n","  plt.title(\"coef : {:0.3f}\".format(np.corrcoef(-x, y)[0, 1]))\n","  plt.xlim(0, max_plot_outg)\n","\n","  plt.subplot(gs[1])\n","  x, y = long_max_outg[long_plot_idx].ravel(), long_open_data[long_plot_idx].ravel()\n","  # plt.bar(x, y, width=0.05)\n","  plt.scatter(x, y)\n","  plt.axvline(0.5, color='red', linewidth=3)\n","  plt.title(\"coef : {:0.3f}\".format(np.corrcoef(-x, y)[0, 1]))\n","  plt.xlim(0, max_plot_outg)\n","\n","  plt.suptitle(title)\n","  plt.show()\n","\n","  print()"],"metadata":{"id":"eCFQfLGBrwj2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def get_max_outg_v2(open_side, config, ohlc_list, obj, tpout_arr, epout_0, out_gap):\n","\n","    h, l = ohlc_list[1:3]\n","    _, _, en_idxs, _, open_idxs = obj\n","\n","    if open_side == \"SELL\":\n","      idxgs = [np.argwhere(l[int(en_idx):int(en_idx + config.tr_set.bias_info_tick)] <= tpout_arr[i, 0]) for i, en_idx in enumerate(en_idxs)]\n","    else:\n","      idxgs = [np.argwhere(h[int(en_idx):int(en_idx + config.tr_set.bias_info_tick)] >= tpout_arr[i, 0]) for i, en_idx in enumerate(en_idxs)]\n","\n","    min_idxg = np.array([gaps.min() if len(gaps) != 0 else np.nan for gaps in idxgs])  # get 최소 idx_gap from en_idx\n","    nan_idx = np.isnan(min_idxg) # .astype(int)\n","    min_idxg[nan_idx] = 0  # fill na 0, for idex summation below\n","\n","    if open_side == \"SELL\":      \n","      max_high = np.array([np.max(h[int(en_idx):int(en_idx + idx_gap + 1)]) for en_idx, idx_gap in zip(en_idxs, min_idxg)]).reshape(-1, 1)  # reshape is important in np boradcasting\n","      max_outg = (max_high - epout_0) / out_gap\n","    else:\n","      max_low = np.array([np.min(l[int(en_idx):int(en_idx + idx_gap + 1)]) for en_idx, idx_gap in zip(en_idxs, min_idxg)]).reshape(-1, 1)\n","      max_outg = (epout_0 - max_low) / out_gap # out_idx 포함\n","\n","    return max_outg[~nan_idx], open_idxs[~nan_idx].astype(int)  # true_bias 의 outg data 만 사용\n","\n","def get_max_tpg_v2(open_side, ohlc_list, pr_, obj, tp_1, tp_gap):  # much faster\n","\n","    h, l = ohlc_list[1:3]\n","\n","    # en_p = obj[0]\n","    # ex_p = obj[1]\n","\n","    np_obj = np.array(obj).T[0]\n","    assert len(np_obj.shape) == 2\n","\n","    # iin == iout 인 경우 분리\n","    en_idx = np_obj[:, 2]\n","    ex_idx = np_obj[:, 3]\n","    equal_idx = en_idx == ex_idx\n","\n","    if open_side == \"SELL\":\n","        min_low = np.full_like(tp_1, np.nan)\n","        # min_low[~equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)  # start from iin + 1\n","        min_low[~equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)  # start from iin + 1\n","        max_tpg = (tp_1 - min_low) / tp_gap\n","    else:\n","        max_high = np.full_like(tp_1, np.nan)\n","        # max_high[~equal_idx] = np.array([np.max(h[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        max_high[~equal_idx] = np.array([np.max(h[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        max_tpg = (max_high - tp_1) / tp_gap\n","\n","    return max_tpg[pr_ < 1]  # out 된 case 만 tpg 담음\n","    # return max_tpg"],"metadata":{"id":"183hY18cpUBu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["short_max_outg, short_outg_open_idx = get_max_outg_v2(\"SELL\", config, ohlc_list, short_obj, short_tpout_arr, short_open_epout_0, short_open_epout_gap)\n"],"metadata":{"id":"nYDgg3XEt116"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["strat_version = config.strat_version\n","len_df = len(res_df)\n","short_open_res = np.ones(len_df)\n","long_open_res = np.ones(len_df)\n","\n","short_tp_1_col, short_tp_0_col, short_tp_gap_col = 'short_tp_1_{}'.format(strat_version), 'short_tp_0_{}'.format(strat_version), 'short_tp_gap_{}'.format(strat_version) \n","long_tp_1_col, long_tp_0_col, long_tp_gap_col = 'long_tp_1_{}'.format(strat_version), 'long_tp_0_{}'.format(strat_version), 'long_tp_gap_{}'.format(strat_version) \n","short_epout_1_col, short_epout_0_col, short_epout_gap_col = 'short_epout_1_{}'.format(strat_version), 'short_epout_0_{}'.format(strat_version), 'short_epout_gap_{}'.format(strat_version) \n","long_epout_1_col, long_epout_0_col, long_epout_gap_col = 'long_epout_1_{}'.format(strat_version), 'long_epout_0_{}'.format(strat_version), 'long_epout_gap_{}'.format(strat_version) \n","\n","data_cols = ['open', 'high', 'low']   # Todo - public_indi 이전에 해야할지도 모름 # 'close', 'haopen', 'hahigh', 'halow', 'haclose'\n","tp_cols = [short_tp_1_col, short_tp_0_col, short_tp_gap_col, long_tp_1_col, long_tp_0_col, long_tp_gap_col]   # Todo - public_indi 이전에 해야할지도 모름\n","epout_cols = [short_epout_1_col, short_epout_0_col, short_epout_gap_col, long_epout_1_col, long_epout_0_col, long_epout_gap_col]   # Todo - public_indi 이전에 해야할지도 모름\n","\n","short_tp_1_, short_tp_0_, short_tp_gap_, long_tp_1_, long_tp_0_, long_tp_gap_ = [res_df[col_].to_numpy() for col_ in tp_cols]\n","short_epout_1_, short_epout_0_, short_epout_gap_, long_epout_1_, long_epout_0_, long_epout_gap_ = [res_df[col_].to_numpy() for col_ in epout_cols]\n","open, high, low = [res_df[col_].to_numpy() for col_ in data_cols]\n","\n","short_base = (short_tp_1_ + short_tp_0_) / 2\n","long_base = (long_tp_1_ + long_tp_0_) / 2\n","\n","touch_period = 50\n","\n","short_a_touch = pd.Series(np.where(high >= short_tp_0_, np.arange(len(res_df)), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()  # min -> max\n","short_b_touch = pd.Series(np.where(low <= short_tp_1_, np.arange(len(res_df)), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨\n","\n","short_en_p = (get_line(short_a_touch, short_tp_0_) + get_line(short_b_touch, short_tp_1_)) / 2\n","short_base_b = get_line(short_b_touch, short_base)\n","short_tp_gap_b = get_line(short_b_touch, short_tp_gap_)\n","short_open_res *= (high >= short_base_b) & (short_base_b >= open) & (short_a_touch < short_b_touch) & (short_base_b + config.loc_set.point.base_gap * short_tp_gap_b >= short_base)\n","\n","long_a_touch = pd.Series(np.where(low <= long_tp_0_, np.arange(len(res_df)), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()       \n","long_b_touch = pd.Series(np.where(high >= long_tp_1_, np.arange(len(res_df)), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()\n","\n","long_en_p = (get_line(long_a_touch, long_tp_0_) + get_line(long_b_touch, long_tp_1_)) / 2\n","long_base_b = get_line(long_b_touch, long_base)\n","long_tp_gap_b = get_line(long_b_touch, long_tp_gap_)\n","long_open_res *= (open >= long_base_b) & (long_base_b >= low) & (long_a_touch < long_b_touch) & (long_base_b - config.loc_set.point.base_gap * long_tp_gap_b <= long_base)"],"metadata":{"id":"19_q_5awv_Uu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(get_line(long_a_touch, long_tp_0_)[long_open_res.astype(bool)])\n","print(get_line(long_a_touch, long_tp_0_)[long_open_res.astype(bool)])\n","print(get_line(long_b_touch, long_tp_1_)[long_open_res.astype(bool)])\n","print(long_base_b[long_open_res.astype(bool)])\n","np.sum(long_en_p[long_open_res.astype(bool)] != long_base_b[long_open_res.astype(bool)])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5X-3R-rSwFDh","executionInfo":{"status":"ok","timestamp":1648558797859,"user_tz":-540,"elapsed":3,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"2053743d-9468-4bd6-c0e8-c2817b448ec6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[ 379.67  379.67  387.17 ... 3145.43 3145.43 3126.73]\n","[ 386.14  386.14  391.39 ... 3158.96 3158.96 3150.79]\n","[ 382.905  382.905  389.28  ... 3152.195 3152.195 3138.76 ]\n"]},{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":28}]},{"cell_type":"code","source":["def get_max_tpg(open_side, ohlc_list, pr_, obj_, rtc_gap):  # much faster\n","    if type(obj_) == list:\n","        obj_ = list(zip(*obj_))\n","\n","    h, l = ohlc_list[1:3]\n","\n","    if open_side == \"SELL\":\n","      max_tpg = np.array([ep_ - np.min(l[int(iin):int(iout + 1)]) for ep_, _, iin, iout in obj_]) / rtc_gap # out 포함\n","      # max_outg = np.array([np.max(h[int(iin):int(iout + 1)]) - ep_ for ep_, _, iin, iout in obj_]) / rtc_gap\n","    else:\n","      max_tpg = np.array([np.max(h[int(iin):int(iout + 1)]) - ep_ for ep_, _, iin, iout in obj_]) / rtc_gap\n","      # max_outg = np.array([ep_ - np.min(l[int(iin):int(iout + 1)]) for ep_, _, iin, iout in obj_]) / rtc_gap\n","\n","    return max_tpg[pr_ < 1]  # out 된 case 만 tpg 담음"],"metadata":{"id":"yGm3hwHEJ1va"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["short_max_tpg = get_max_tpg(\"SELL\", ohlc_list, short_pr, short_obj[:4], short_open_rtc_gap)\n","long_max_tpg = get_max_tpg(\"BUY\", ohlc_list, long_pr, long_obj[:4], long_open_rtc_gap)"],"metadata":{"id":"eooryL32-zxp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["long_max_tpg"],"metadata":{"id":"yOMiuw7cJYmZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def get_pr_v3(open_side, h, l, obj, tpout, lvrg, fee, p_ranges, p_qty, inversion=False):  # --> 여기서 사용하는 ex_p = ex_p\n","\n","    en_p = obj[0]\n","    # ex_p = obj[1]\n","    tp, out = np.split(tpout, 2, axis=1)\n","    len_p = len(p_ranges)\n","    en_ps, tps, outs, lvrgs, fees = [np.tile(arr_, (1, len_p)) for arr_ in [en_p, tp, out, lvrg, fee]]\n","    \n","    np_obj = np.array(obj).T[0]\n","    assert len(np_obj.shape) == 2\n","    \n","    # iin == iout 인 경우 분리\n","    en_idx = np_obj[:, 2]\n","    ex_idx = np_obj[:, 3]\n","    equal_idx = en_idx == ex_idx\n","        \n","    if open_side == \"SELL\":\n","        p_tps = en_ps - (en_ps - tps) * p_ranges\n","        # min_low = np.array([np.min(l[int(iin):int(iout + 1)]) for _, _, iin, iout in list(zip(*obj[:4]))]).reshape(-1, 1)  # -> deprecated, start from iin + 1\n","        min_low = np.full_like(en_p, np.nan)\n","        min_low[~equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1) # start from iin + 1\n","        tp_idx = np.tile(min_low, (1, len_p)) <= p_tps\n","        \n","        # ------ liquidation ------ #\n","        max_high = np.full_like(en_p, np.nan)\n","        max_high[~equal_idx] = np.array([np.max(h[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        liqd = np.nanmin((en_p / max_high - fee - 1) * lvrg + 1)\n","    else:\n","        p_tps = en_ps + (tps - en_ps) * p_ranges\n","        # max_high = np.array([np.max(h[int(iin):int(iout + 1)]) for _, _, iin, iout in list(zip(*obj[:4]))]).reshape(-1, 1)\n","        max_high = np.full_like(en_p, np.nan)\n","        max_high[~equal_idx] = np.array([np.max(h[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        tp_idx = np.tile(max_high, (1, len_p)) >= p_tps\n","        # print(p_tps)\n","        # print(max_high)\n","\n","        # ------ liquidation ------ #\n","        min_low = np.full_like(en_p, np.nan)\n","        min_low[~equal_idx] = np.array([np.min(l[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        liqd = np.nanmin((min_low / en_p - fee - 1) * lvrg + 1)\n","\n","    ex_ps = outs.copy()\n","    ex_ps[tp_idx] = p_tps[tp_idx]\n","\n","    if open_side == \"SELL\":\n","        if not inversion:\n","            pr = ((en_ps / ex_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","        else:\n","            pr = ((ex_ps / en_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","    else:\n","        if not inversion:\n","            # print(fees)\n","            # print(p_qty)\n","            # print(p_qty * fees)\n","            pr = ((ex_ps / en_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","        else:\n","            pr = ((en_ps / ex_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","\n","    return pr.reshape(-1, 1), liqd"],"metadata":{"id":"SrGNSuOjCyPn"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["p_ranges, p_qty = [0.2, 0.6, 1], [1, 0.0, 0.00]\n","long_pr, long_liqd = get_pr_v3(OrderSide.BUY, h, l, long_obj, long_tpout_arr, long_lvrg_arr, long_fee_arr, p_ranges, p_qty, inversion)"],"metadata":{"id":"b5s3Us9VtlXH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["long_pr"],"metadata":{"id":"s1O_gGXVtrtz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def liquidation_v2(open_side, data_, obj_, lvrg, fee):  # v1 is deprecated\n","    if type(obj_) == list:\n","        obj = list(zip(*obj_))\n","\n","    np_obj = np.array(obj_).T[0]\n","    assert len(np_obj.shape) == 2\n","    \n","    en_p = obj_[0]\n","\n","    # iin == iout 인 경우 분리\n","    en_idx = np_obj[:, 2]\n","    ex_idx = np_obj[:, 3]\n","    equal_idx = en_idx == ex_idx\n","\n","    if open_side == \"SELL\":\n","        max_high = np.full_like(en_p, np.nan)\n","        max_high[~equal_idx] = np.array([np.max(data_[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        return np.nanmin((en_p / max_high - fee - 1) * lvrg + 1)\n","    else:\n","        min_low = np.full_like(en_p, np.nan)\n","        min_low[~equal_idx] = np.array([np.min(data_[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        return np.nanmin((min_low / en_p - fee - 1) * lvrg + 1)"],"metadata":{"id":"HBFh3FJLpYeZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["short_liqd = liquidation_v2(OrderSide.SELL, h, short_obj[:4], short_lvrg_arr, short_fee_arr)\n","long_liqd = liquidation_v2(OrderSide.BUY, l, long_obj[:4], long_lvrg_arr, long_fee_arr)\n","\n","print(short_liqd)\n","print(long_liqd)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GtajcCM49AGr","executionInfo":{"status":"ok","timestamp":1648462727490,"user_tz":-540,"elapsed":527,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"a0c857d5-83db-407c-f0dd-bb906de72f20"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(2005,)\n","(1724,)\n","0.9338351565411452\n","0.9832121539680836\n"]}]},{"cell_type":"code","source":["def liquidation_v2(open_side, data_, obj_, lvrg, fee):  # much faster\n","\n","    # if type(obj_) == list:\n","    #     obj_ = \n","    # if open_side == \"SELL\":\n","    #     return np.min([(ep_ / np.max(data_[int(iin):int(iout + 1)]) - fee - 1) * lvrg + 1 for ep_, _, iin, iout in obj_])\n","    # else:\n","    #     return np.min([(np.min(data_[int(iin):int(iout + 1)]) / ep_ - fee - 1) * lvrg + 1 for ep_, _, iin, iout in obj_])\n","\n","    np_obj = np.array(obj).T[0]\n","    assert len(np_obj.shape) == 2\n","\n","    en_p = obj_[0]  # 2d\n","\n","    print(np_obj.shape)\n","    \n","    # iin == iout 인 경우 분리\n","    en_idx = np_obj[:, 2]\n","    ex_idx = np_obj[:, 3]\n","    equal_idx = en_idx == ex_idx\n","    print(equal_idx)\n","        \n","    if open_side == \"SELL\":\n","        max_high = en_p.copy()\n","        max_high[~equal_idx] = np.array([np.max(data_[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)  # equal_idx 는 liqd 를 측정하지 않음\n","        return np.min((en_p / max_high - fee - 1) * lvrg + 1)\n","    else:\n","        min_low = en_p.copy()\n","        print(min_low)\n","\n","        # min_low[~equal_idx] = np.array([np.min(data_[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        print(data_)\n","        # res = np.array([np.min(data_[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        res = np.min([(np.min(data_[int(iin):int(iout)]) / ep_ - fee - 1) * lvrg + 1 for ep_, _, iin, iout in list(zip(*obj_)) if iin != iout])\n","        # print(min_low[~equal_idx])\n","        print(res)\n","        return np.min((min_low / en_p - fee - 1) * lvrg + 1)"],"metadata":{"id":"eMuRjqo_evR1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["h, l = ohlc_list[1:3]\n","long_liqd = liquidation_v2(OrderSide.BUY, l, long_obj[:4], long_lvrg_arr, long_fee_arr)"],"metadata":{"id":"uLMEbR_vij3L"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# np.array(long_obj)[:,(en_idx == ex_idx)].shape\n","long_np_obj = np.array(long_obj).T[0]"],"metadata":{"id":"ykrPUuxiXlLG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["long_np_obj[~equal_idx, :4]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MZiMIYLln8bB","executionInfo":{"status":"ok","timestamp":1648455838651,"user_tz":-540,"elapsed":401,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"3a2f1100-f1b1-4ad9-da2f-d50708a60ccd"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[   383.005,    381.73 ,     60.   ,     61.   ],\n","       [   386.33 ,    384.9  ,    105.   ,    107.   ],\n","       [   386.43 ,    385.24 ,    240.   ,    243.   ],\n","       ...,\n","       [  3806.905,   3863.8  , 679660.   , 679934.   ],\n","       [  3953.845,   3944.   , 680228.   , 680255.   ],\n","       [  4102.28 ,   4089.18 , 685040.   , 685167.   ]])"]},"metadata":{},"execution_count":507}]},{"cell_type":"code","source":["# for _, _, iin, iout in long_np_obj[~equal_idx, :4]:\n","#   print(iin, iout)"],"metadata":{"id":"r8rHPFeHm1DQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# long_np_obj.shape\n","# # long_np_obj.T[0]\n","long_np_obj\n","\n","en_idx = long_np_obj[:, 2]\n","ex_idx = long_np_obj[:, 3]\n","\n","# print(en_idx[:5])\n","# print(ex_idx[:5])\n","# np.sum(en_idx == ex_idx)\n","equal_idx = en_idx == ex_idx\n","equal_idx.shape\n","# en_idx"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Uyjsp9EyZ4GF","executionInfo":{"status":"ok","timestamp":1648453058391,"user_tz":-540,"elapsed":390,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"b15069ba-0057-4665-916c-f4417979cb88"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1724,)"]},"metadata":{},"execution_count":446}]},{"cell_type":"code","source":["# # for items in zip(long_np_obj[:4]):\n","# # for items in list(zip(*long_obj[:4])):\n","# for items in long_np_obj:\n","#   print(items)\n","#   break\n","equal_idx = equal_idx.ravel()"],"metadata":{"id":"_GrZgkaSZC2K"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["min_low = np.full_like(en_idx, np.nan)\n","min_low[~equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in long_np_obj[~equal_idx, :4]]).reshape(-1, 1)  # reshape for shape match\n","# min_low[equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in long_np_obj[equal_idx, :4]]).reshape(-1, 1)  # reshape for shape match # np.nan 은 비교에서 무조건 False 즉, out 처리될 것"],"metadata":{"id":"R1YRROdJYWkH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["long_liqd"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jFxV8dami0wn","executionInfo":{"status":"ok","timestamp":1648454521907,"user_tz":-540,"elapsed":3,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"896b3188-7179-4f33-c9e5-f259f5458436"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["-1.7472363139317024"]},"metadata":{},"execution_count":483}]},{"cell_type":"code","source":["short_outg_plot_data = short_max_outg[short_max_outg <= max_plot_outg]  # nan 과 inf 때문에 이 방식 채택\n","long_outg_plot_data = long_max_outg[long_max_outg <= max_plot_outg]\n","print(\"len(short_outg_plot_data) :\", len(short_outg_plot_data))\n","print(\"len(long_outg_plot_data) :\", len(long_outg_plot_data))\n","\n","plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(12, 5))\n","nrows, ncols = 1, 2\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        )\n","  \n","plt.subplot(gs[0])\n","kde_plot_v2(*np.unique(short_outg_plot_data, return_counts=True))\n","\n","plt.subplot(gs[1])\n","kde_plot_v2(*np.unique(long_outg_plot_data, return_counts=True))\n","\n","plt.suptitle('outg')\n","plt.show()"],"metadata":{"id":"mMsDJDmO5qNw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# --- tp > ep > out 검사 --- #\n","long_tp, long_out = np.split(long_tpout_arr, 2, axis=1)\n","long_ep = long_obj[0]"],"metadata":{"id":"BjxCPi96JbfS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(np.sum((long_tp <= long_ep)))\n","print(np.sum((long_ep <= long_out)))\n","print(len((long_ep <= long_out)))"],"metadata":{"id":"Q_wH04vCJzYu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def kde_plot_v2(v, c, kde_factor=0.15, num_samples=100):\n","\n","  # start_0 = time.time()\n","  kde = stats.gaussian_kde(v,weights=c,bw_method=kde_factor)\n","  kdx = np.linspace(v.min(),v.max(),num_samples)\n","  kdy = kde(kdx)\n","  ticks_per_sample = (kdx.max() - kdx.min()) / num_samples\n","  # print(\"ticks_per_sample :\", ticks_per_sample)  # sample 당 가격\n","  # print(\"kdy elapsed_time :\", time.time() - start_0)\n","\n","  peaks,_ = signal.find_peaks(kdy)\n","  pkx = kdx[peaks]\n","  pky = kdy[peaks]\n","  print(\"pkx :\", pkx)\n","\n","  # plt.figure(figsize=(10,5))\n","  plt.hist(v, weights=c, bins=num_samples, alpha=.8, edgecolor='black')\n","  plt.plot(kdx, kdy, color='white')\n","  plt.plot(pkx, pky, 'bo', color='yellow')\n","  # plt.show()\n"],"metadata":{"id":"YlENTUSXhBfa"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def get_max_outg(open_side, config, ohlc_list, obj, tpout_arr, rtc_gap):\n","\n","    h, l = ohlc_list[1:3]    \n","    en_p, _, en_idxs, _, open_idxs = obj\n","\n","    if open_side == \"SELL\":\n","      idxgs = [np.argwhere(l[int(en_idx) : int(en_idx + config.tr_set.bias_info_tick)] <= tpout_arr[i, 0]) for i, en_idx in enumerate(en_idxs)]\n","    else:\n","      idxgs = [np.argwhere(h[int(en_idx) : int(en_idx + config.tr_set.bias_info_tick)] >= tpout_arr[i, 0]) for i, en_idx in enumerate(en_idxs)]\n","\n","    min_idxg = np.array([gaps.min() if len(gaps) != 0 else np.nan for gaps in idxgs])  # get 최소 idx_gap from en_idx\n","    nan_idx = np.isnan(min_idxg) # .astype(int)\n","    min_idxg[nan_idx] = 0  # fill na 0, for idex summation below\n","\n","    if open_side == \"SELL\":\n","      max_outg = np.array([np.max(h[int(en_idx):int(en_idx + idx_gap + 1)]) - ep_ for en_idx, idx_gap, ep_ in zip(en_idxs, min_idxg, en_p)]) / rtc_gap\n","    else:\n","      max_outg = np.array([ep_ - np.min(l[int(en_idx):int(en_idx + idx_gap + 1)]) for en_idx, idx_gap, ep_ in zip(en_idxs, min_idxg, en_p)]) / rtc_gap # out_idx 포함\n","\n","    return max_outg[~nan_idx], open_idxs[~nan_idx].astype(int)  # true_bias 의 outg data 만 사용"],"metadata":{"id":"ZkbuBX1Ygzll"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["strat_version = config.strat_version\n","long_open_res = res_df['long_open_{}'.format(strat_version)].to_numpy().astype(bool)\n","\n","res_df['long_tp_{}'.format(strat_version)].to_numpy()[long_open_res]\n","res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res]\n","# res_df['long_ep_{}'.format(strat_version)].to_numpy()\n","# long_open_res\n","# res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res]\n","# np.sum(res_df['long_tp_{}'.format(strat_version)].to_numpy()[long_open_res] <= res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res])\n","# res = res_df['long_tp_{}'.format(strat_version)].to_numpy()[long_open_res] > res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res]\n","res = res_df['long_tp_{}'.format(strat_version)].to_numpy()[long_open_res] <= res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res]\n","\n","print(res_df['long_tp_{}'.format(strat_version)].to_numpy()[long_open_res][res])\n","print(res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res][res])\n","print(len(res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res][res]))\n","\n","# res = res_df['long_tp_{}'.format(strat_version)].to_numpy() > res_df['long_ep_{}'.format(strat_version)].to_numpy()\n","# res = res_df['long_ep_{}'.format(strat_version)].to_numpy() > res_df['long_out_{}'.format(strat_version)].to_numpy()\n","\n","# print(res_df['long_tp_{}'.format(strat_version)].to_numpy()[res])\n","# print(res_df['long_ep_{}'.format(strat_version)].to_numpy()[res])\n","# print(res_df['long_out_{}'.format(strat_version)].to_numpy()[res])\n","# print(len(res_df['long_ep_{}'.format(strat_version)].to_numpy()[res]))\n","# print(len(res_df['long_out_{}'.format(strat_version)].to_numpy()[res]))\n","\n","# assert np.sum(res_df['long_tp_{}'.format(strat_version)].to_numpy()[long_open_res] <= res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res]) == 0\n","# assert np.sum(res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res] <= res_df['long_out_{}'.format(strat_version)].to_numpy()[long_open_res]) == 0"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mYQgnD9CgC8b","executionInfo":{"status":"ok","timestamp":1648380698566,"user_tz":-540,"elapsed":479,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"e316919a-0e22-4266-ef24-185284cc8cb5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[ 390.58  387.91  344.81  346.25  334.7   351.81  366.07  367.09  372.83  372.08  384.92  387.79  374.12  365.82  364.87  359.06  386.58  381.46  384.71  385.    383.9   384.18  381.18  369.86  373.5   374.17  341.4   344.5   345.29  342.93  343.49  340.7   320.3   345.3   349.59  355.    352.    354.    357.96  358.21  355.    352.47  355.18  346.41  347.14  348.54  346.62  348.28  347.38  348.19  351.74  352.98  339.87  339.64  339.99  339.46  349.97  368.    375.85  374.3   367.2   383.8   386.25  385.31  384.97  377.3   377.85  380.28  378.    365.92  366.9   367.9   368.6   369.61  368.48  369.09  372.72  379.    379.17  375.2   379.09  380.52  397.42  417.13  418.05  413.6   412.26  411.7   408.6   406.29  405.5   383.74  388.2   386.95  387.    386.97  387.86  378.69  383.58  459.06  437.    445.    445.99  464.27  463.1   464.96  463.3   456.76  463.89  462.3   458.31  459.37  461.31  470.28  475.    591.54  601.95  619.3   609.46  573.21  512.97  554.39  588.37  593.83  571.43  593.31  589.71  552.62  551.44  563.9   573.    568.68  562.72  556.82  565.49  581.    592.74  651.18  644.2   646.4   607.89  606.5   615.    612.8   614.27  582.76  610.64  704.97  753.49  741.36  736.2   996.   1694.7  1686.52 1859.07 1818.7  1892.84 1930.29 1959.36 1639.28 1565.   1565.   1565.   1565.   1565.   1565.   1565.   1565.   1565.   1565.   1711.55 1783.83 1821.46 1834.   1623.93 1979.92 2062.   2204.69 2527.76 2720.47 3532.96 3890.   2778.64 2600.   2331.29 2175.   2140.   1963.91 1753.24 1969.43 2045.5  2158.   2250.   2280.78 2316.37 3180.   3141.93 3276.   3243.   3271.   3329.56 3236.   3275.94 3184.99 3410.   3963.04 3305.   3260.94 3636.28 3419.99 3400.   3383.32 3558.82 3499.   3503.68 4528.   4579.46 4492.13 4231.98 4373.8  3794.77 4082.93 4055.41 3782.   3745.   3163.98 3227.16 3302.58 3105.25 3078.   2621.06 2548.   2619.76 3116.4 ]\n","[ 390.58  387.91  344.81  346.25  334.7   351.81  366.07  367.09  372.83  372.08  384.92  387.79  374.12  365.82  364.87  359.06  386.58  381.46  384.71  385.    383.9   384.18  381.18  369.86  373.5   374.17  341.4   344.5   345.29  342.93  343.49  340.7   320.3   345.3   349.59  355.    352.    354.    357.96  358.21  355.    352.47  355.18  346.41  347.14  348.54  346.62  348.28  347.38  348.19  351.74  352.98  339.87  339.64  339.99  339.46  349.97  368.    375.85  374.3   367.2   383.8   386.25  385.31  384.97  377.3   377.85  380.28  378.    365.92  366.9   367.9   368.6   369.61  368.48  369.09  372.72  379.    379.17  375.2   379.09  380.52  397.42  417.13  418.05  413.6   412.26  411.7   408.6   406.29  405.5   383.74  388.2   386.95  387.    386.97  387.86  378.69  383.58  459.06  437.    445.    445.99  464.27  463.1   464.96  463.3   456.76  463.89  462.3   458.31  459.37  461.31  470.28  475.    591.54  601.95  619.3   609.46  573.21  512.97  554.39  588.37  593.83  571.43  593.31  589.71  552.62  551.44  563.9   573.    568.68  562.72  556.82  565.49  581.    592.74  651.18  644.2   646.4   607.89  606.5   615.    612.8   614.27  582.76  610.64  704.97  753.49  741.36  736.2   996.   1694.7  1686.52 1859.07 1818.7  1892.84 1930.29 1959.36 1639.28 1565.   1565.   1565.   1565.   1565.   1565.   1565.   1565.   1565.   1565.   1711.55 1783.83 1821.46 1834.   1623.93 1979.92 2062.   2204.69 2527.76 2720.47 3532.96 3890.   2778.64 2600.   2331.29 2175.   2140.   1963.91 1753.24 1969.43 2045.5  2158.   2250.   2280.78 2316.37 3180.   3141.93 3276.   3243.   3271.   3329.56 3236.   3275.94 3184.99 3410.   3963.04 3305.   3260.94 3636.28 3419.99 3400.   3383.32 3558.82 3499.   3503.68 4528.   4579.46 4492.13 4231.98 4373.8  3794.77 4082.93 4055.41 3782.   3745.   3163.98 3227.16 3302.58 3105.25 3078.   2621.06 2548.   2619.76 3116.4 ]\n","234\n"]}]},{"cell_type":"code","source":["# fig, axs=plt.subplots(1,2,sharey=True,tight_layout=True)\n","# axs[0].hist(short_max_outg,bins=100)\n","# axs[1].hist(abs_ratio_5T[short_outg_open_idx],bins=100)\n","# plt.show()"],"metadata":{"id":"57mFruHtCmmh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def kde_plot(plot_data, kde_factor=0.15, num_samples=100):\n","  v, c = np.unique(plot_data, return_counts=True)  \n","\n","  # start_0 = time.time()\n","  kde = stats.gaussian_kde(v,weights=c,bw_method=kde_factor)\n","  kdx = np.linspace(v.min(),v.max(),num_samples)\n","  kdy = kde(kdx)\n","  ticks_per_sample = (kdx.max() - kdx.min()) / num_samples\n","  # print(\"ticks_per_sample :\", ticks_per_sample)  # sample 당 가격\n","  # print(\"kdy elapsed_time :\", time.time() - start_0)\n","\n","  peaks,_ = signal.find_peaks(kdy)\n","  pkx = kdx[peaks]\n","  pky = kdy[peaks]\n","\n","  # plt.figure(figsize=(10,5))\n","  plt.hist(v, weights=c, bins=num_samples, alpha=.8, edgecolor='black')\n","  plt.plot(kdx, kdy, color='white')\n","  plt.plot(pkx, pky, 'bo', color='yellow')\n","  # plt.show()\n"],"metadata":{"id":"40MdGjCY1YtH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["v, c = np.unique(long_tpg_plot, return_counts=True)"],"metadata":{"id":"v2k6D7UceIK4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["kde_factor = 0.15\n","num_samples = 100\n","\n","start_0 = time.time()\n","kde = stats.gaussian_kde(v,weights=c,bw_method=kde_factor)\n","kdx = np.linspace(v.min(),v.max(),num_samples)\n","kdy = kde(kdx)\n","ticks_per_sample = (kdx.max() - kdx.min()) / num_samples\n","print(\"ticks_per_sample :\", ticks_per_sample)  # sample 당 가격\n","print(\"kdy elapsed_time :\", time.time() - start_0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648269301273,"user_tz":-540,"elapsed":424,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"991eb570-3633-49b7-9a91-02cb5d4fba43","id":"bJe1fSGFdUcj"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["ticks_per_sample : 0.047098781436344224\n","kdy elapsed_time : 0.013733863830566406\n"]}]},{"cell_type":"code","source":["peaks,_ = signal.find_peaks(kdy)\n","pkx = kdx[peaks]\n","pky = kdy[peaks]\n","\n","plt.figure(figsize=(10,5))\n","plt.hist(v, weights=c, bins=num_samples, alpha=.8, edgecolor='black')\n","plt.plot(kdx, kdy, color='white')\n","plt.plot(pkx, pky, 'bo', color='yellow')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":320},"executionInfo":{"status":"ok","timestamp":1648269365137,"user_tz":-540,"elapsed":954,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"db5fd5b3-4617-42f9-877c-c4b9b82adcef","id":"1Cby5teZdUcj"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 720x360 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["def max_tpout_gap(open_side, ohlc_list, obj_, rtc_gap):  # much faster\n","    if type(obj_) == list:\n","        obj_ = list(zip(*obj_))\n","\n","    h, l = ohlc_list[1:3]\n","\n","    if open_side == \"SELL\":\n","      max_tpg = np.array([ep_ - np.min(l[int(iin):int(iout + 1)]) for ep_, _, iin, iout in obj_]) / rtc_gap # out 포함\n","      max_outg = np.array([np.max(h[int(iin):int(iout + 1)]) - ep_ for ep_, _, iin, iout in obj_]) / rtc_gap\n","    else:\n","      max_tpg = np.array([np.max(h[int(iin):int(iout + 1)]) - ep_ for ep_, _, iin, iout in obj_]) / rtc_gap\n","      max_outg = np.array([ep_ - np.min(l[int(iin):int(iout + 1)]) for ep_, _, iin, iout in obj_]) / rtc_gap\n","\n","    return max_tpg, max_outg"],"metadata":{"id":"CfiSD0uwcNIZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["short_open_res = np.ones(len(res_df))\n","\n","strat_version = config.strat_version\n","\n","short_rtc_1_col, short_rtc_0_col, short_rtc_gap_col = 'short_rtc_1_{}'.format(strat_version), 'short_rtc_0_{}'.format(strat_version), 'short_rtc_gap_{}'.format(strat_version) \n","long_rtc_1_col, long_rtc_0_col, long_rtc_gap_col = 'long_rtc_1_{}'.format(strat_version), 'long_rtc_0_{}'.format(strat_version), 'long_rtc_gap_{}'.format(strat_version) \n","\n","short_rtc_1_col, short_rtc_0_col, short_rtc_gap_col = 'short_rtc_1_{}'.format(strat_version), 'short_rtc_0_{}'.format(strat_version), 'short_rtc_gap_{}'.format(strat_version) \n","long_rtc_1_col, long_rtc_0_col, long_rtc_gap_col = 'long_rtc_1_{}'.format(strat_version), 'long_rtc_0_{}'.format(strat_version), 'long_rtc_gap_{}'.format(strat_version) \n","\n","data_cols = ['open', 'high', 'low']   # Todo - public_indi 이전에 해야할지도 모름 # 'close', 'haopen', 'hahigh', 'halow', 'haclose'\n","rtc_cols = [short_rtc_1_col, short_rtc_0_col, short_rtc_gap_col, long_rtc_1_col, long_rtc_0_col, long_rtc_gap_col]   # Todo - public_indi 이전에 해야할지도 모름\n","\n","short_rtc_1_, short_rtc_0_, short_rtc_gap_, long_rtc_1_, long_rtc_0_, long_rtc_gap_ = [res_df[col_].to_numpy() for col_ in rtc_cols]\n","open, high, low = [res_df[col_].to_numpy() for col_ in data_cols]\n","short_base = (short_rtc_1_ + short_rtc_0_) / 2\n","long_base = (long_rtc_1_ + long_rtc_0_) / 2\n","# back_ha_o = res_df['haopen'].shift(1).to_numpy()\n","# back_ha_c = res_df['haclose'].shift(1).to_numpy()\n","\n","touch_period = 50\n","# short_open_res *= (back_ha_c >= back_ha_o) & (ha_o > ha_c)\n","# short_open_res *= ha_o == ha_h\n","# short_open_res *= np_timeidx % tf_entry == tf_entry - 1     \n","# short_a_touch = pd.Series(np.where(high >= short_rtc_0_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()  # min -> max\n","short_a_touch = pd.Series(np.where((high >= short_base_b) & (short_base_b >= open), np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).min().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨\n","short_b_touch = pd.Series(np.where(low <= short_rtc_1_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨\n","\n","short_a_touch_line = get_line(short_a_touch, short_rtc_0_)\n","short_b_touch_line = get_line(short_b_touch, short_rtc_1_)\n","short_en_p = (short_a_touch_line + short_b_touch_line) / 2\n","short_base_b = get_line(short_b_touch, short_base)\n","short_rtc_gap_b = get_line(short_b_touch, short_rtc_gap_)\n","short_open_res *= (high >= short_base_b) & (short_base_b >= open) & (short_a_touch < short_b_touch) & (short_base_b + config.loc_set.point.base_gap * short_rtc_gap_b >= short_base)\n","\n","res_df['short_open_{}'.format(strat_version)] = short_open_res"],"metadata":{"id":"r82KfqFqi9tp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# short_en_p == short_base_b\n","print(short_en_p[~np.isnan(short_en_p)])\n","print(short_base_b[~np.isnan(short_en_p)])\n","\n","np.sum((short_en_p[~np.isnan(short_en_p)] == short_base_b[~np.isnan(short_en_p)]) == 0) # => why ..?"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CgD4-ZKW11MQ","executionInfo":{"status":"ok","timestamp":1647925782107,"user_tz":-540,"elapsed":366,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"c126aabb-cb41-4392-a80c-53971b146c2c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[ 377.545  378.085  379.015 ... 3148.91  3148.91  3148.91 ]\n","[ 377.545  378.085  379.015 ... 3148.91  3148.91  3148.91 ]\n"]},{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":29}]},{"cell_type":"code","source":["true_idx = short_open_res == 1\n","\n","# print(((short_a_touch_line + short_b_touch_line) / 2)[true_idx][-100:])\n","print(short_en_p[true_idx][-100:])\n","# print(short_a_touch_line[true_idx][-100:])\n","\n","print(short_a_touch_line)\n","print(short_a_touch)\n","print(short_rtc_0_)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AIt9z1NRj5bJ","executionInfo":{"status":"ok","timestamp":1647565975814,"user_tz":-540,"elapsed":310,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"c1b83639-7041-4745-dacd-d9cff49a205d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[2934.59  2934.59  3028.59  3028.59  3028.59  3026.075 3026.075 3016.09  3014.67  3014.4   3014.4   3014.4   3014.4   3014.4   3014.4   3014.395 3014.315 3014.315 3030.235 3030.235 3030.235 3030.235 3051.18  3051.18  3051.18  3077.275 3076.77  3090.945 3105.1   3105.1   3105.1   3105.1   3105.1   3105.1   3099.205 3099.205 3099.205 3105.495 3105.495 3109.615 3127.43  3123.795 3123.795 3123.795 3112.695 3122.715 3122.715 3122.715 3122.715 3115.2   3114.93  3097.035 3115.31  3115.31  3114.245 3114.15  3114.15  3114.15  3112.2   3110.75  3110.75  3112.16  3112.16  3134.39  3134.39  3134.39  3127.905 3127.905 3127.905 3127.905 3128.595 3128.595 3138.59  3138.59  3147.47  3134.205 3133.04  3134.155 3131.105 3131.105 3131.105 3065.94  3065.94  3065.94  3065.51  3068.    3079.33  3079.33  3079.33  3099.805 3169.595 3169.595 3169.595 3169.04  3140.395 3140.395 3140.395 3148.91  3148.91  3148.91 ]\n","[    nan     nan     nan ... 3158.68 3158.68 3158.68]\n","[    nan     nan     nan ... 763812. 763812. 763812.]\n","[ 388.18  388.18  388.18 ... 3158.68 3158.68 3158.68]\n"]}]},{"cell_type":"code","source":["short_a_touch_line = get_line(short_a_touch, short_rtc_0_)\n","short_b_touch_line = get_line(short_b_touch, short_rtc_1_)\n","short_en_p = (short_a_touch_line + short_b_touch_line) / 2\n","\n","# print(((short_a_touch_line + short_b_touch_line) / 2)[true_idx][-100:])\n","# print(short_en_p[true_idx][-100:])\n","\n","print(short_a_touch_line)\n","print(short_a_touch)\n","print(short_rtc_0_)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GXbSWec4ik3g","executionInfo":{"status":"ok","timestamp":1647565931392,"user_tz":-540,"elapsed":2,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"547b0fc1-0e35-4387-e891-a3af42c18476"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[    nan     nan     nan ... 3158.68 3158.68 3158.68]\n","[    nan     nan     nan ... 763812. 763812. 763812.]\n","[ 388.18  388.18  388.18 ... 3158.68 3158.68 3158.68]\n"]}]},{"cell_type":"code","source":["def get_line(touch, rtc_):\n","  touch_copy = touch.copy()\n","  touch_line = rtc_.copy()\n","\n","  nan_idx = np.isnan(touch_copy)\n","  touch_copy[nan_idx] = 0   # for indexing array\n","  touch_line[touch_copy.astype(int)]\n","  touch_line[nan_idx] = np.nan   # for true comp.\n","\n","  return touch_line"],"metadata":{"id":"fx4iA-T1k6GS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# print(short_b_touch[-100:])\n","# print(short_base_b[-100:])\n","true_idx = short_open_res == 1\n","short_a_touch_line = get_line(short_a_touch, short_rtc_0_)\n","short_b_touch_line = get_line(short_b_touch, short_rtc_1_)\n","\n","print(len(short_a_touch_line))\n","print(len(short_b_touch_line))\n","print(((short_a_touch_line + short_b_touch_line) / 2)[true_idx][-100:])\n","\n","print(short_a_touch_line[true_idx][-100:])\n","print(short_b_touch_line[true_idx][-100:])\n","print(short_open_res[true_idx][-100:])\n","print(short_en_p[true_idx][-100:])"],"metadata":{"id":"Pk8i59oM4CFZ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##### partial"],"metadata":{"id":"8b4SbvPrAPR1"}},{"cell_type":"code","source":["def get_pr_v2(open_side, h, l, obj, tpout, lvrg, fee, p_ranges, p_qty, inversion=False):  # --> 여기서 사용하는 ex_p = ex_p\n","\n","    en_p = obj[0]\n","    # ex_p = obj[1]\n","    tp, out = np.split(tpout, 2, axis=1)\n","    len_p = len(p_ranges)\n","    en_ps, tps, outs, lvrgs, fees = [np.tile(arr_, (1, len_p)) for arr_ in [en_p, tp, out, lvrg, fee]]\n","    \n","    np_obj = np.array(obj).T[0]\n","    assert len(np_obj.shape) == 2\n","    \n","    # iin == iout 인 경우 분리\n","    en_idx = np_obj[:, 2]\n","    ex_idx = np_obj[:, 3]\n","    equal_idx = en_idx == ex_idx\n","        \n","    if open_side == \"SELL\":\n","        p_tps = en_ps - (en_ps - tps) * p_ranges\n","        # min_low = np.array([np.min(l[int(iin):int(iout + 1)]) for _, _, iin, iout in list(zip(*obj[:4]))]).reshape(-1, 1)  # -> deprecated, start from iin + 1\n","        min_low = np.full_like(en_p, np.nan)\n","        min_low[~equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        tp_idx = np.tile(min_low, (1, len_p)) <= p_tps\n","    else:\n","        p_tps = en_ps + (tps - en_ps) * p_ranges\n","        # max_high = np.array([np.max(h[int(iin):int(iout + 1)]) for _, _, iin, iout in list(zip(*obj[:4]))]).reshape(-1, 1)\n","        max_high = np.full_like(en_p, np.nan)\n","        max_high[~equal_idx] = np.array([np.max(h[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        tp_idx = np.tile(max_high, (1, len_p)) >= p_tps\n","\n","    ex_ps = outs.copy()\n","    ex_ps[tp_idx] = p_tps[tp_idx]\n","\n","    if open_side == \"SELL\":\n","        if not inversion:\n","            pr = ((en_ps / ex_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","        else:\n","            pr = ((ex_ps / en_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","    else:\n","        if not inversion:\n","            pr = ((ex_ps / en_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","        else:\n","            pr = ((en_ps / ex_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","\n","    return pr.reshape(-1, 1)"],"metadata":{"id":"M4MB0mryCiHC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def get_pr(open_side, en_p, ex_p, lvrg, fee, inversion=False):\n","  assert len(ex_p) == len(en_p)\n","  if open_side == \"SELL\":\n","\n","    if not inversion:\n","      pr = (en_p / ex_p - fee - 1) * lvrg + 1\n","    else:\n","      pr = (ex_p / en_p - fee - 1) * lvrg + 1\n","  else:\n","    if not inversion:\n","      pr = (ex_p / en_p - fee - 1) * lvrg + 1\n","    else:\n","      pr = (en_p / ex_p - fee - 1) * lvrg + 1\n","\n","  return pr\n"],"metadata":{"id":"2QuLj5hrjD9y"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 0. obj 를 out 과 tp 로 구분해야할 것 - pr 이용\n","# 1. out 을 한 경우\n","#   a. max high (long) 조사 (= max_tpg)\n","#     i. tp 단계별로 \"비교\" 진행, 만족하면 + profit (수정)\n","#     ii. max_gap 과 \n","# 2. tp 를 한 경우\n","#   a. tp 단계별로 + profit (수정)\n","\n","# tp 를 했는데 out 처리 된 경우 (fee 덕분에)\n","tp_idx = (long_pr > 1).ravel()\n","print(long_obj[0][tp_idx])\n","print(long_obj[0][~tp_idx])"],"metadata":{"id":"4whYwQmQ9oY1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# ex_ps = [en_p + (ex_p - en_p) * p_range for p_range in p_ranges]"],"metadata":{"id":"42V_JP1oGe4c"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# ------ vectorization for partial ------ # \n","en_p = long_obj[0]\n","ex_p = long_obj[1]\n","# tp = long_tpout_arr[:, 0]\n","# out = long_tpout_arr[:, 1]\n","tp, out = np.split(long_tpout_arr, 2, axis=1)\n","# tp = tp.ravel()\n","\n","# print(en_p)\n","# print(tp)\n","# print(out.shape)\n","\n","len_p = len(p_ranges)\n","en_ps = np.tile(en_p, (1, len_p))\n","tps = np.tile(tp, (1, len_p))\n","outs = np.tile(out, (1, len_p))\n","lvrgs = np.tile(long_lvrg_arr, (1, len_p))\n","fees = np.tile(long_fee_arr, (1, len_p))\n","print(lvrgs.shape)\n","print(fees.shape)\n","\n","p_tps = en_ps + (tps - en_ps) * p_ranges\n","\n","max_high = np.array([np.max(h[int(iin):int(iout + 1)]) for _, _, iin, iout in list(zip(*long_obj[:4]))]).reshape(-1, 1) # / rtc_gap\n","res = np.tile(max_high, (1, len_p)) >= p_tps\n","\n","ex_ps = outs.copy()\n","ex_ps[res] = p_tps[res]   # max_high 기준으로 체결된 만큼만 p_tp 로 변환, \"나머지는 outs\"\n","\n","# print(tps[0]))\n","# np.sum(tps1 != tps2)  # 0\n","# print(outs[0])\n","# print(outs)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"joaIDVNLqFqz","executionInfo":{"status":"ok","timestamp":1648451438059,"user_tz":-540,"elapsed":353,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"27ae7b8e-5f4e-4641-a062-746f5307bf7d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(1724, 1)\n","(1724, 1)\n"]}]},{"cell_type":"code","source":["h, l = ohlc_list[1:3]    \n","\n","en_idx = long_obj[2]\n","ex_idx = long_obj[3]\n","\n","# print(en_idx[:5])\n","# print(ex_idx[:5])\n","# np.sum(en_idx == ex_idx)\n","equal_idx = en_idx == ex_idx\n","equal_idx"],"metadata":{"id":"QI6uXYjtVWrw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["p_ranges = [1/3, 2/3, 1]\n","p_qty = [0.25, 0.25, 0.5]\n","p_ranges = [1] # [1/3, 2/3, 1] [1]\n","p_qty =  [1] # [0.25, 0.25, 0.5] [1]\n","# long_ppr[tp_idx] = tp_ppr(OrderSide.BUY, *long_obj[:2], p_ranges, p_qty, long_lvrg_arr, long_fee_arr, inversion)[tp_idx]"],"metadata":{"id":"TO3dF_3yum4s"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# tp_pr = (tps / en_ps - fees - 1) * lvrgs * p_qty\n","# tp_pr.sum(axis=1) + 1\n","\n","# out_pr = (outs / en_ps - fees - 1) * lvrgs * p_qty\n","# # print(out_pr)\n","# print(out_pr.sum(axis=1) + 1)\n","\n","pr = (ex_ps / en_ps - fees - 1) * lvrgs * p_qty\n","print(pr.sum(axis=1) + 1)\n","print(np.sum(pr, axis=1).reshape(-1, 1) + 1)\n","\n","pr = (ex_p / en_p - long_fee_arr - 1) * long_lvrg_arr\n","print((pr + 1).ravel()) \n","\n","print(np.sum((pr + 1).ravel() != (pr.sum(axis=1) + 1)))  # 0\n","get_pr_v2(OrderSide.BUY, h, l, long_obj, long_tpout_arr, long_lvrg_arr, long_fee_arr, p_ranges, p_qty, inversion)\n","get_pr_v2(OrderSide.SELL, h, l, short_obj, short_tpout_arr, short_lvrg_arr, short_fee_arr, p_ranges, p_qty, inversion)"],"metadata":{"id":"8LeNbPlJrIN-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pr = get_pr(OrderSide.SELL, *short_obj[:2], short_lvrg_arr, short_fee_arr, inversion)"],"metadata":{"id":"GNm_lN1-kJPW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(prs[:10])\n","print(pr[:10])\n","# print(np.sum(prs, axis=0))\n","# print((prs.sum(axis=0)))"],"metadata":{"id":"8il3UnQ6oyjC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["loss_tp_idx = (~tp_idx) * (res3 > 2)\n","print(len(res3[loss_tp_idx])) # tp 했으나, fee 때문에 out_idx 로 지정된 case 로 예상 - 8\n","\n","print(en_p[loss_tp_idx])\n","print(ex_p[loss_tp_idx])\n","ex_p[loss_tp_idx] / en_p[loss_tp_idx] - long_fee_arr.ravel()[loss_tp_idx]"],"metadata":{"id":"WOEmwtPErNgz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# ------ 이래서, 함수로 먼저 작성하면 debugging 하기 곤란하구나 ------ #\n","en_p = long_obj[0].ravel()\n","ex_p = long_obj[1].ravel()\n","# tp = long_tpout_arr[:, 0]\n","# out = long_tpout_arr[:, 1]\n","tp, out = np.split(long_tpout_arr, 2, axis=1)\n","tp = tp.ravel()\n","\n","print(en_p)\n","print(tp)\n","# print(out.shape)\n","\n","tps = np.vstack(np.array([en_p + (tp - en_p) * p_range for p_range in p_ranges])).T  # tp_ppr 로 나눌게 아니라, ex_ps 를 tps, replaced_outs 로 채우면 되지 않을까\n","outs = np.tile(out, (1, len(p_ranges)))\n","print(tps[0])\n","print(outs[0])\n","print(outs)"],"metadata":{"id":"A_Jn5zMYCtH0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["outs2 = outs.copy()\n","outs2[res] = tps[res]"],"metadata":{"id":"g5uLwyYnoApS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["h, l = ohlc_list[1:3]    \n","# max_high = np.array([np.max(h[int(iin):int(iout + 1)]) - ep_ for ep_, _, iin, iout in list(zip(*long_obj[:4]))]) # / rtc_gap\n","max_high = np.array([np.max(h[int(iin):int(iout + 1)]) for _, _, iin, iout in list(zip(*long_obj[:4]))]).reshape(-1, 1) # / rtc_gap\n","res = np.tile(max_high, (1, 3)) > tps"],"metadata":{"id":"r7koyseNF6J8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# tps\n","en_ps = np.tile(en_p, (1, len(p_ranges)))\n","print(en_ps.shape)\n","\n","# tps * p_qty"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"swCpmd0Jpfz4","executionInfo":{"status":"ok","timestamp":1648439562545,"user_tz":-540,"elapsed":365,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"6919faf2-a6a6-4adf-ad3f-6a9fbb6c05e2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(1, 46536)\n"]}]},{"cell_type":"code","source":["# print(max_high.shape)\n","# print(np.tile(max_high, (1, 3)).shape)\n","# print(tps.shape)\n","# print(res)\n","\n","# print(np.insert(res, 0, np.full_like(max_high, True), axis=1))\n","res2 = np.insert(res, 0, np.array([True]), axis=1)\n","# print(res2)\n","\n","res3 = np.array([np.argwhere(arr_).max() for arr_ in res2])  # 조건에 맞는 최대 index"],"metadata":{"id":"FrldeXRFGUD5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# res3\n","# tps\n","\n","# # 예로, res3 index = 2, -> 0, 1 까지는 tp + 2 는 out => ex_ps 에 들어있는 ex_p 가\n","# # 즉, outs * p_ranges 만큼의 array 에 res3_index 만틈 tp 로 채움\n","# if not inversion:\n","#   pr = np.array([(ex_p_ / en_p - fee - 1) * lvrg * qty for ex_p_, qty in zip(ex_ps, p_qty)]).sum(axis=0) + 1"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kPOrz6grkHI-","executionInfo":{"status":"ok","timestamp":1648438048923,"user_tz":-540,"elapsed":354,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"74916754-5f95-45aa-8a9c-1eff7e4639ba"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1, 1, 3, ..., 1, 0, 1])"]},"metadata":{},"execution_count":153}]},{"cell_type":"code","source":["long_ppr = long_pr.copy()"],"metadata":{"id":"wHnELMNyAc7D"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(long_pr[tp_idx])\n","print(long_ppr[tp_idx])\n","# print(np.sum(long_ppr[tp_idx] != long_pr[tp_idx]))"],"metadata":{"id":"w1PONy6jCJLQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["rtc_ranges = [1] # [1/3, 2/3, 1] * "],"metadata":{"id":"4WSFaUgg_jRd"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_ratio=0.3\n","plot_is=1\n","\n","open_idx = open_info_df.index.to_numpy()\n","len_df = len(res_df)\n","s_idx = (open_idx < int(len_df * (1 - test_ratio))) == plot_is\n","s_open_info_df = open_info_df[s_idx]\n","s_open_idx = open_idx[s_idx]\n","\n","open_info_list = [s_open_info_df[col_].to_numpy() for col_ in s_open_info_df.columns]\n","side_arr, zone_arr, id_arr, id_idx_arr = open_info_list\n","\n","# ------------ get paired_res ------------ #\n","start_0 = time.time()\n","paired_res = en_ex_pairing(res_df, s_open_idx, open_info_list, ohlc_list, point2_list, market_data_list, config_list, np_timeidx, funcs)\n","# valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr = paired_res\n","print(\"en_ex_pairing elapsed time :\", time.time() - start_0)  #  0.37 --> 0.3660471439361572 --> 0.21(lesser if)\n","\n","# ------------ idep_plot ------------ #\n","start_0 = time.time()\n","h, l = ohlc_list[1:3]\n","sample_ratio=1 - test_ratio\n","if sample_ratio is not None:\n","  sample_len = int(len_df * sample_ratio)\n","else:\n","  sample_len = len_df\n","\n","# ------ short & long data preparation ------ #\n","# start_0 = time.time()\n","valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr, bias_arr = paired_res    \n","assert len(valid_openi_arr) != 0, \"assert len(valid_openi_arr) != 0\"    \n","short_valid_openi_idx = np.where(side_arr[valid_openi_arr] == OrderSide.SELL)[0]  # valid_openi_arr 에 대한 idx, # side_arr,\n","long_valid_openi_idx = np.where(side_arr[valid_openi_arr] == OrderSide.BUY)[0]\n","\n","valid_open_idx = open_idx[valid_openi_arr].reshape(-1, 1)\n","\n","short_obj = np.hstack((pair_price_arr, pair_idx_arr, valid_open_idx))[short_valid_openi_idx]\n","long_obj = np.hstack((pair_price_arr, pair_idx_arr, valid_open_idx))[long_valid_openi_idx]\n","both_obj = np.vstack((short_obj, long_obj))\n","print(\"short_obj.shape :\", short_obj.shape)\n","print(\"long_obj.shape :\", long_obj.shape)\n","\n","short_obj, long_obj, both_obj = [np.split(obj_, 5, axis=1) for obj_ in [short_obj, long_obj, both_obj]]\n","\n","short_lvrg_arr, long_lvrg_arr = [lvrg_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","short_fee_arr, long_fee_arr = [fee_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","short_tpout_arr, long_tpout_arr = [tpout_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","short_bias_arr, long_bias_arr = [bias_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]"],"metadata":{"id":"qjpDlxCoInLJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(short_pr.shape)\n","short_total_pr = to_total_pr(len_df, short_pr, short_obj[-2])"],"metadata":{"id":"-sDSxVR91Vit"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(24, 8))\n","gs = gridspec.GridSpec(nrows=2,  # row 몇 개\n","                        ncols=3,  # col 몇 개\n","                        height_ratios=[10, 1]\n","                        # height_ratios=[10, 10, 1]\n","                        )\n","gs_idx = 0\n","signi = 0\n","title_position=(0.5, 0.5)\n","fontsize=15\n","\n","short_true_bias_idx = short_bias_arr[:, 0] <= short_bias_arr[:, 1] # info, threshold (등호의 유무가 매우 유의미함)\n","long_true_bias_idx = long_bias_arr[:, 0] >= long_bias_arr[:, 1]\n","\n","# ------ plot_data ------ #\n","try:\n","  # start_0 = time.time()\n","  short_pr = get_pr_v2(OrderSide.SELL, short_obj, short_tpout_arr, short_lvrg_arr, short_fee_arr, p_ranges, p_qty, inversion)\n","  print(\"get_pr_v2 pass\")\n","  short_total_pr = to_total_pr(len_df, short_pr, short_obj[-2])\n","  print(\"to_total_pr pass\")\n","  short_cum_pr = np.cumprod(short_total_pr)\n","  short_liqd = liquidation(OrderSide.SELL, h, short_obj[:4], short_lvrg_arr, short_fee_arr)\n","  short_prcn, short_rc = precision(short_pr, short_true_bias_idx), recall(short_true_bias_idx)\n","  if signi:\n","    short_idep_res_obj = (short_prcn, short_rc) + get_res_info_nb_v2(sample_len, short_pr, short_total_pr, short_cum_pr, short_liqd)\n","  else:\n","    gs_idx = plot_info_v4(gs, gs_idx, sample_len, short_pr, short_total_pr, short_cum_pr, short_liqd, short_prcn, short_rc, short_lvrg_arr[-1], title_position, fontsize)\n","  # print(\"elapsed time :\", time.time() - start_0)\n","\n","except Exception as e:\n","  gs_idx += 1\n","  print(\"error in short plot_data :\", e)\n","\n","try:\n","  # start_0 = time.time()\n","  long_pr = get_pr_v2(OrderSide.BUY, long_obj, long_tpout_arr, long_lvrg_arr, long_fee_arr, p_ranges, p_qty, inversion)\n","  long_total_pr = to_total_pr(len_df, long_pr, long_obj[-2])\n","  long_cum_pr = np.cumprod(long_total_pr)\n","  long_liqd = liquidation(OrderSide.BUY, l, long_obj[:4], long_lvrg_arr, long_fee_arr)\n","  long_prcn, long_rc = precision(long_pr, long_true_bias_idx), recall(long_true_bias_idx)\n","  if signi:\n","    long_idep_res_obj = (long_prcn, long_rc) + get_res_info_nb_v2(sample_len, long_pr, long_total_pr, long_cum_pr, long_liqd)\n","  else:\n","    gs_idx = plot_info_v4(gs, gs_idx, sample_len, long_pr, long_total_pr, long_cum_pr, long_liqd, long_prcn, long_rc, long_lvrg_arr[-1], title_position, fontsize)\n","  # print(\"elapsed time :\", time.time() - start_0)\n","except Exception as e:\n","  gs_idx += 1\n","  print(\"error in long plot_data :\", e)\n","\n","try:\n","  # start_0 = time.time()\n","  both_pr = np.vstack((short_pr, long_pr))  # for 2d shape, obj 를 1d 로 만들지 않는 이상, pr 은 2d 유지될 것\n","  both_total_pr = to_total_pr(len_df, both_pr, both_obj[-2])\n","  both_cum_pr = np.cumprod(both_total_pr)\n","  both_liqd = min(short_liqd, long_liqd)\n","  both_true_bias_idx = np.hstack((short_true_bias_idx, long_true_bias_idx))  # for 1d shape\n","  both_prcn, both_rc = precision(both_pr, both_true_bias_idx), recall(both_true_bias_idx)\n","  if signi:\n","    both_idep_res_obj = (both_prcn, both_rc) + get_res_info_nb_v2(sample_len, both_pr, both_total_pr, both_cum_pr, both_liqd)\n","  else:\n","    gs_idx = plot_info_v4(gs, gs_idx, sample_len, both_pr, both_total_pr, both_cum_pr, both_liqd, both_prcn, both_rc, lvrg_arr[-1], title_position, fontsize)\n","  # print(\"elapsed time :\", time.time() - start_0)\n","except Exception as e:\n","  gs_idx += 1\n","  print(\"error in both plot_data :\", e)\n"],"metadata":{"id":"Av-_aSFrpmrN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["if not signi:\n","    for obj, cum_pr in zip([short_obj, long_obj, both_obj], [short_cum_pr, long_cum_pr, both_cum_pr]):\n","      try:\n","        # start_0 = time.time()\n","        gs_idx = frq_dev_plot_v3(gs, gs_idx, len_df, sample_len, obj[-2], cum_pr[-1], fontsize)\n","        # print(\"elapsed time :\", time.time() - start_0)          \n","      except Exception as e:\n","        gs_idx += 1\n","        print(\"error in frq_dev_plot_v3 :\", e)\n","\n","    plt.show()\n","    plt.close()"],"metadata":{"id":"1Fyhq7RppAEj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["t_list = [1, 2]\n","t_list[:5] # 이게 되는구나.."],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qxuL0S9wq-ib","executionInfo":{"status":"ok","timestamp":1648121100587,"user_tz":-540,"elapsed":473,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"c1f7ff04-acc0-4d66-90be-8a6870ee8f9a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[1, 2]"]},"metadata":{},"execution_count":155}]},{"cell_type":"code","source":["def liquidation(open_side, data_, obj_, lvrg, fee):  # # 2.39 s ->  2.42 s per loop, (ep fee lvrg vectorize calc. 진행시)\n","    if type(obj_) == list:\n","        obj_ = list(zip(*obj_))\n","\n","    if open_side == \"SELL\":\n","        return np.min([(ep_ / np.max(data_[int(iin):int(iout + 1)]) - fee - 1) * lvrg + 1 for ep_, _, iin, iout in obj_]) # + 1 for zero-size array to reduction operation\n","    else:\n","        return np.min([(np.min(data_[int(iin):int(iout + 1)]) / ep_ - fee - 1) * lvrg + 1 for ep_, _, iin, iout in obj_])\n","    # if open_side == \"SELL\":\n","    #     return np.min([(ep_ / np.max(data_[int(iin):int(iout)]) - fee - 1) * lvrg + 1 for ep_, _, iin, iout in obj_])\n","    # else:\n","    #     return np.min([(np.min(data_[int(iin):int(iout)]) / ep_ - fee - 1) * lvrg + 1 for ep_, _, iin, iout in obj_])"],"metadata":{"id":"P5NzUYQct8LJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# short_bias_arr.shape\n","short_true_bias_idx = short_bias_arr[:, 0] < short_bias_arr[:, 1] # info, threshold\n","long_true_bias_idx = long_bias_arr[:, 0] > long_bias_arr[:, 1]"],"metadata":{"id":"r_4qlQjNI_Vl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# long_true_bias_idx\n","# np.hstack((short_true_bias_idx, long_true_bias_idx))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nOtoKX7fJUs6","executionInfo":{"status":"ok","timestamp":1646789605507,"user_tz":-540,"elapsed":340,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"b56e0cd9-46fd-4c3e-d85c-570aa18d3b52"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([False, False,  True,  True, False, False,  True,  True, False, False, False,  True, False,  True, False,  True, False,  True,  True,  True, False, False,  True,  True,  True, False, False,  True,  True, False,  True, False, False, False,  True, False, False,  True,  True, False, False,  True, False,  True,  True,  True,  True, False,  True,  True, False,  True,  True,  True, False, False,  True, False, False,  True,  True,  True,  True, False, False,  True, False,  True, False, False,  True, False, False, False,  True,  True,  True, False,  True, False, False,  True,  True, False, False, False,  True,  True, False,  True,  True,  True, False, False, False, False,  True, False, False,  True, False, False,  True,  True, False, False,  True,  True,  True,  True, False,  True, False,  True,  True, False, False,  True, False, False,  True,  True, False, False, False, False,  True,  True,  True, False, False, False,  True,  True, False, False,  True, False, False,  True,  True, False,  True, False, False, False,  True,  True, False,  True, False, False, False,  True,  True, False, False, False, False, False, False,  True, False,  True,  True,  True,  True,  True,  True, False,  True,  True,  True,  True,  True,  True,  True,  True, False,  True,  True, False, False, False, False,  True,  True,  True, False,  True,  True, False, False,  True,  True, False,  True, False, False,  True])"]},"metadata":{},"execution_count":127}]},{"cell_type":"code","source":["# print(len(long_pr))\n","# print(len(long_true_bias_idx))\n","print((long_pr.shape))\n","print((long_bias_arr.shape))\n","# print((long_true_bias_idx.shape))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"70wh4eysKqxw","executionInfo":{"status":"ok","timestamp":1647001266151,"user_tz":-540,"elapsed":436,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"d3e8b24f-e74e-415f-c7a9-20d8617d25c9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(9634, 1)\n","(9634, 2)\n"]}]},{"cell_type":"code","source":["print(len(long_pr[long_pr != 1]))\n","len(long_pr[long_pr > 1]) / len(long_pr[long_pr != 1])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OcR_qrEp7Rnu","executionInfo":{"status":"ok","timestamp":1647001306279,"user_tz":-540,"elapsed":348,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"3e8aa179-237a-48e8-a0d0-af56fa26bc5b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["9634\n"]},{"output_type":"execute_result","data":{"text/plain":["0.37315756695038405"]},"metadata":{},"execution_count":40}]},{"cell_type":"code","source":["print(np.sum(long_pr[long_true_bias_idx] > 1) / np.sum(long_true_bias_idx))\n","print(np.sum(long_true_bias_idx) / len(long_true_bias_idx))\n","# long_true_bias_pr = long_pr[long_true_bias_idx]\n","# len(long_true_bias_pr[long_true_bias_pr > 1])\n","# 30 / 66"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MkJS3UGONHJ8","executionInfo":{"status":"ok","timestamp":1646810691555,"user_tz":-540,"elapsed":3,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"aa99b628-93b5-4705-c27b-fe6f80f95df0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.39106145251396646\n","0.599163179916318\n"]}]},{"cell_type":"code","source":["print(get_recall(long_true_bias_idx))\n","print(get_precision(long_pr, long_true_bias_idx))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lvULyeNJKSeP","executionInfo":{"status":"ok","timestamp":1646788110286,"user_tz":-540,"elapsed":5,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"3b10bb5f-238e-4687-f38c-20037f2cded6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.5076923076923077\n","0.45454545454545453\n"]}]},{"cell_type":"code","source":["signi=False\n","if not signi:\n","    plt.style.use(['dark_background', 'fast'])\n","    fig = plt.figure(figsize=(24, 8))\n","    gs = gridspec.GridSpec(nrows=2,  # row 몇 개\n","                            ncols=3,  # col 몇 개\n","                            height_ratios=[10, 1]\n","                            # height_ratios=[10, 10, 1]\n","                            )\n","gs_idx = 0\n","title_position=(0.5, 0.5)\n","fontsize=15"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":33},"id":"Fs1RkHxQKjCX","executionInfo":{"status":"ok","timestamp":1646788777938,"user_tz":-540,"elapsed":349,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"491bcb64-df8e-4b20-a42f-b68e4c670a07"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1728x576 with 0 Axes>"]},"metadata":{}}]},{"cell_type":"code","source":["try:\n","  # start_0 = time.time()\n","  long_pr = get_pr(OrderSide.BUY, *long_obj[:2], long_lvrg_arr, long_fee_arr, inversion)\n","  long_total_pr = to_total_pr(len_df, long_pr, long_obj[-2])\n","  long_cum_pr = np.cumprod(long_total_pr)\n","  long_liqd = liquidation(OrderSide.BUY, l, long_obj[:4], long_lvrg_arr, long_fee_arr)\n","  long_prcn, long_rc = precision(long_pr, long_true_bias_idx), recall(long_true_bias_idx)\n","\n","  if signi:\n","    long_idep_res_obj = (long_prcn, long_rc) + get_res_info_nb_v2(sample_len, long_pr, long_total_pr, long_cum_pr, long_liqd)\n","  else:\n","    gs_idx = plot_info_v4(gs, gs_idx, sample_len, long_pr, long_total_pr, long_cum_pr, long_liqd, long_prcn, long_rc, long_lvrg_arr[-1], title_position, fontsize)\n","  # print(\"elapsed time :\", time.time() - start_0)\n","except Exception as e:\n","  gs_idx += 1\n","  print(e)\n","\n","# plt.show()"],"metadata":{"id":"X69t-H3tKJdm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def precision(pr_list, true_idx):\n","  true_bias_pr = pr_list[true_idx].ravel()\n","  return np.sum(true_bias_pr > 1) / len(true_bias_pr)  # 차원을 고려한 계산\n","\n","def recall(true_idx):\n","  return np.sum(true_idx) / len(true_idx) #  2.16 µs per loop (len) --> 3.78 µs per loop   # false_idx 중에서 tp 체결된 건을 더해주어야함\n","\n","def plot_info_v4(gs, gs_idx, sample_len, pr, total_pr, cum_pr, liqd, prcn, rc, leverage, title_position, fontsize):\n","  try:\n","    plt.subplot(gs[gs_idx])\n","    idep_res_obj = get_res_info_nb_v2(sample_len, pr, total_pr, cum_pr, liqd)\n","    plt.plot(cum_pr)\n","    plt.plot(idep_res_obj[-1], color='gold')\n","    if sample_len is not None:\n","      plt.axvline(sample_len, alpha=1., linestyle='--', color='#ffeb3b')\n","    # title_str = \"prcn : {:.3f} rc : {:.3f}\\n len_pr : {} dpf : {:.3f}\\n wr : {:.3f} sr : {:.3f}\\n acc_pr : {:.3f} sum_pr : {:.3f}\\n\" +\\\n","    #           \"min_pr : {:.3f} liqd : {:.3f}\\n acc_mdd : -{:.3f} sum_mdd : -{:.3f}\\n leverage {}\"\n","    title_str = \"prcn : {:.3f}\\n rc : {:.3f}\\n len_pr : {}\\n dpf : {:.3f}\\n wr : {:.3f}\\n sr : {:.3f}\\n acc_pr : {:.3f}\\n sum_pr : {:.3f}\\n\" +\\\n","              \"min_pr : {:.3f}\\n liqd : {:.3f}\\n acc_mdd : -{:.3f}\\n sum_mdd : -{:.3f}\\n leverage {}\"\n","    plt.title(title_str.format(prcn, rc, *idep_res_obj[:-1], leverage), position=title_position, fontsize=fontsize)\n","  except Exception as e:\n","    print(\"error in plot_info :\", e)\n","\n","  return gs_idx + 1"],"metadata":{"id":"J2nupeDOPdQI"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JNQxkb06ZdTe"},"source":["## plot_check_v2"]},{"cell_type":"code","source":["# ------------------ plot_config ------------------ #\n","save_mode = 0\n","front_plot = 0    # 0, 1, 2 (whole, open, ep_tick + a)\n","bias_plot = 0     # = swing_bias -> precision check : 1, recall check : 0\n","pr_descend = 1    # 1 -> 내림차순\n","position = 1      # -1 / 1, 0 (short / long)\n","# tf_plot = 1       # true - false plot\n","# pr_sort = 1     # -> default 1,  이상한 체결 확인하기 좋음\n","# wl_case = 1     # 1 / -1 / 0 (win loss study) --> oid\n","\n","x_max = 500\n","x_margin_mult = 1/30\n","y_margin_mult = 1/30  # 0 \n","\n","prev_plotsize = 20 #  100 20\n","# post_plotsize = 60\n","post_plotsize = config.tr_set.bias_info_tick\n","\n","inversion = 0\n","hedge = 0\n","\n","# ------ show or save ------ #\n","if save_mode:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".ftr\", \"\")\n","  shutil.rmtree(plot_check_dir, ignore_errors=True)  # remove existing dir\n","  os.makedirs(plot_check_dir)\n","  print(plot_check_dir)\n","else:\n","  plot_check_dir = None\n","\n","# ------------ 한 방향에 대해 plot_check 함 (by position var.) ------------ #\n","#   obj by position  \n","if position == -1:\n","  pos_str = \"SELL\"\n","  pr_, obj_ = short_pr, short_obj\n","  arr_list = [short_lvrg_arr, short_fee_arr, short_tpout_arr, short_bias_arr]\n","else:   # both option currently not supported\n","  pos_str = \"BUY\"\n","  pr_, obj_ = long_pr, long_obj\n","  arr_list = [long_lvrg_arr, long_fee_arr, long_tpout_arr, long_bias_arr]\n","pr, obj, [lvrg_arr, fee_arr, tpout_arr, bias_arr] = sort_bypr_v3(pr_, obj_, arr_list, descending=pr_descend)\n","\n","pr_msg = \"%s\\n {} ~ {} -> {:.5f}\\n lvrg : {}\\n fee : {:.4f}\" % (pos_str)  # pos_str 으로 이곳에서 정의함\n","\n","# ------------------ data chunknize ------------------ #\n","np_df = res_df.to_numpy()\n","\n","left_end_idx = obj[2] - prev_plotsize  # left_margin 기준 - entry_idx\n","right_end_idx = obj[3] + post_plotsize\n","invalid_left_end = np.sum(left_end_idx < 0)\n","\n","np_plot_params = np.hstack((left_end_idx, right_end_idx, pr, *obj, lvrg_arr, fee_arr, tpout_arr, bias_arr))[invalid_left_end:]\n","if bias_plot:\n","  bias_arr_ = bias_arr[invalid_left_end:]\n","  if position == -1:\n","    bias_idx = bias_arr_[:, 0] < bias_arr_[:, 1]\n","  else:\n","    bias_idx = bias_arr_[:, 0] > bias_arr_[:, 1]\n","  np_plot_params = np_plot_params[bias_idx]"],"metadata":{"id":"A6QSF9COaHO5","executionInfo":{"status":"ok","timestamp":1648859817305,"user_tz":-540,"elapsed":604,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"execution_count":31,"outputs":[]},{"cell_type":"code","source":["# ------------ make col_idx_dict config ------------ #\n","nonstep_col_list = []\n","step_col_list = []\n","stepmark_col_list = []\n","# ------ set period ------ #\n","hc_itv1 = '5T'\n","hc_itv2 = 'H'\n","\n","rs_itv = 'T'\n","\n","dc_itv = 'T'\n","hdc_itv = '15T'\n","hhdc_itv = 'H'\n","\n","wave_itv1 = 'T'\n","wave_itv2 = '5T'\n","wave_period1, wave_period2 = 40, 20\n","\n","cbline_itv = 'T'\n","\n","bb_itv = dc_itv\n","hbb_itv = hdc_itv\n","hhbb_itv = hhdc_itv\n","\n","\n","# ------------ nonstep_col_list - add info(col, alpha, color, linewidth) ------------ #\n","# nonstep_col_list.append([['close'], 1, '#ffffff', 2])\n","\n","# ------------ step_col_list - add info(col, alpha, color, linewidth) ------------ #\n","# ------ htf_candle ------ #\n","step_col_list.append([['open_{}'.format(hc_itv1), 'close_{}'.format(hc_itv1)], 1, '#ffffff', 1])\n","# step_col_list.append([['open_{}'.format(hc_itv2), 'close_{}'.format(hc_itv2)], 1, '#ffffff', 2])\n","\n","# ------ resi_sup ------ #\n","# step_col_list.append([['resi_{}'.format(rs_itv), 'sup_{}'.format(rs_itv)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['resi_out_{}'.format(rs_itv), 'sup_out_{}'.format(rs_itv)], 1, 'dodgerblue', 2])\n","\n","# ------ wave - dc ------ #\n","# step_col_list.append([['dc_upper_{}{}'.format(wave_itv1, wave_period1), 'dc_lower_{}{}'.format(wave_itv1, wave_period1)], 1, '#ffeb3b', 2])\n","# step_col_list.append([['dc_upper_{}{}'.format(wave_itv2, wave_period2), 'dc_lower_{}{}'.format(wave_itv2, wave_period2)], 1, '#e65100', 2])\n","\n","# ------ wave ------ #\n","step_col_list.append([['wave_upper_{}'.format(wave_itv1), 'wave_upper_{}'.format(wave_itv1)], 1, '#ffeb3b', 3])\n","step_col_list.append([['wave_lower_{}'.format(wave_itv1), 'wave_lower_{}'.format(wave_itv1)], 1, '#ffeb3b', 3])\n","step_col_list.append([['wave_base_{}'.format(wave_itv1)], 1, '#279e2c', 2])\n","\n","# step_col_list.append([['wave_upper_{}'.format(wave_itv2), 'wave_upper_{}'.format(wave_itv2)], 1, '#f7525f', 3])\n","# step_col_list.append([['wave_lower_{}'.format(wave_itv2), 'wave_lower_{}'.format(wave_itv2)], 1, '#f7525f', 3])\n","# step_col_list.append([['wave_base_{}'.format(wave_itv2)], 1, '#279e2c', 2])\n","\n","# ------ dc_base : cbline ------ #\n","# step_col_list.append([['dc_base_{}'.format(cbline_itv)], 1, '#5b9cf6', 2])\n","\n","# ------ ema ------ #\n","# step_col_list.append([['ema_5T'], 1, '#03ed30', 2])\n","\n","# ------ dc ------ #\n","# step_col_list.append([['dc_upper_{}'.format(dc_itv), 'dc_lower_{}'.format(dc_itv)], 1, '#ffeb3b', 2])\n","# step_col_list.append([['dc_upper_{}'.format(hdc_itv), 'dc_lower_{}'.format(hdc_itv)], 1, '#e65100', 2])\n","# step_col_list.append([['dc_upper_{}'.format(hhdc_itv), 'dc_lower_{}'.format(hhdc_itv)], 1, '#c2185b', 4])\n","\n","# ------ bb ------ #\n","# step_col_list.append([['bb_upper_{}'.format(bb_itv), 'bb_lower_{}'.format(bb_itv)], 1, '#ffffff', 1])\n","# step_col_list.append([['bb_upper_{}'.format(hbb_itv), 'bb_lower_{}'.format(hbb_itv)], 1, '#ff00ff', 2])\n","# step_col_list.append([['bb_upper_{}'.format(hhbb_itv), 'bb_lower_{}'.format(hhbb_itv)], 1, '#3179f5', 4])\n","\n","# ------------ stepmark_col_list - add info(col, alpha, color, linewidth) ------------ #\n","# stepmark_col_list.append([['sar_T'], 1, 'dodgerblue', 7])\n","\n","\n","# ------ str to numbcol ------ #\n","nonstep_col_arr = strcol_tonumb(res_df, nonstep_col_list)\n","step_col_arr = strcol_tonumb(res_df, step_col_list)\n","stepmark_col_arr = strcol_tonumb(res_df, stepmark_col_list)\n","\n","col_idx_dict = \\\n","{\n","  \"ohlc_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close']),\n","  \"vp_col_idxs\": get_col_idxs(res_df, ['close', 'volume']),\n","  # \"ohlc_col_idxs\": get_col_idxs(res_df, ['haopen', 'hahigh', 'halow', 'haclose']),  # heikin-ashi ver.\n","  \"nonstep_col_info\": nonstep_col_arr,\n","  \"step_col_info\": step_col_arr,\n","  \"stepmark_col_info\": stepmark_col_arr,\n","  \"ylim_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close'])  # , 'dc_upper_H', 'dc_lower_H', 'dc_upper_15T', 'dc_lower_15T'\n","}   # , 'wave_upper_{}'.format(wave_itv2), 'wave_lower_{}'.format(wave_itv2), 'dc_upper_15T', 'dc_lower_15T'"],"metadata":{"id":"FnSydxFXn_f9","executionInfo":{"status":"ok","timestamp":1648859818476,"user_tz":-540,"elapsed":2,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"f2a35554-58c3-4bc8-fab4-32cfc7036148"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stderr","text":["/content/drive/My Drive/Colab Notebooks/JnQ/funcs/funcs_plot_check.py:10: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  step_col_arr = np.array(col_list)\n"]}]},{"cell_type":"markdown","source":["### plot"],"metadata":{"id":"E-VwJkNQbGI4"}},{"cell_type":"code","source":["_ = [plot_check_v3(np_df, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir, **col_idx_dict) for param_zip in zip(np_plot_params, np_plot_params[::-1])]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1QjE5kmNKe0KuULeHGfgndY28HO83l6JU"},"id":"Roy40BmByyZc","outputId":"f714da88-5ae0-49bb-c06d-57fa88d0d822","executionInfo":{"status":"ok","timestamp":1648859954520,"user_tz":-540,"elapsed":129950,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"execution_count":33,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"markdown","source":["### plot_funcs"],"metadata":{"id":"MQ8w8nWVXlGj"}},{"cell_type":"code","source":["def plot_check_v3(data, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir=None, **col_idx_dict):\n","  # start_0 = time.time()\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(30, 18))\n","  nrows, ncols = 2, 2\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                         ncols=ncols,\n","                         height_ratios=[3, 1]\n","                         )\n","  for gs_idx, params in enumerate(param_zip):\n","    ax = fig.add_subplot(gs[gs_idx])\n","    iin, iout, pr, ep, tp, entry_idx, exit_idx, open_idx, lvrg, fee, tp_line, out_line, bias_info, bias_thresh = params\n","\n","    # if ep > out_line:  # for tp > ep > out plot_check\n","    #   break\n","\n","    # ------------ add_col section ------------ #\n","    a_data = data[int(iin):int(iout + 1)]\n","    # a_data = data[iin:iout]\n","    # ------ candles ------ #\n","    candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","\n","    # ------ add cols ------ #\n","    [nonstep_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['nonstep_col_info']]\n","    [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","    [stepmark_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['stepmark_col_info']]\n","\n","    # ------ ep, tp + xlim ------ #\n","    try:\n","      eptp_hvline_v3(config, ep, tp, entry_idx, exit_idx, open_idx, tp_line, out_line, bias_info, bias_thresh,\n","                    front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, **col_idx_dict)\n","    except Exception as e:\n","      print(\"error in eptp_hvline_v3 :\", e)\n","\n","    #     Todo    #\n","    #     3. outer_price plot 일 경우, gs_idx + nrows 하면 됨\n","\n","    # ------ trade_info ------ #\n","    plt.title(pr_msg.format(entry_idx, exit_idx, pr, lvrg, fee))\n","\n","  if plot_check_dir is None:\n","    plt.show()\n","    print()\n","  else:\n","    fig_name = plot_check_dir + \"/%s.png\" % int(entry_idx)\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","  plt.close()\n","  # print(\"elapsed time :\", time.time() - start_0)\n","\n","  return\n","\n","def eptp_hvline_v3(config, en_p, ex_p, entry_idx, exit_idx, open_idx, tp_line, out_line, bias_info, bias_thresh,\n","                   front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, **col_idx_dict):\n","  # ------ get vertical ticks ------ #\n","  entry_tick = int(entry_idx - iin)\n","  open_tick = entry_tick - int(entry_idx - open_idx)\n","  exit_tick = entry_tick + int(exit_idx - entry_idx)\n","\n","  if front_plot == 1:\n","    x_max = open_tick\n","  elif front_plot == 2:\n","    x_max = entry_tick + 20  # temp\n","  if (iout - iin) > x_max:\n","    x_margin = x_max * x_margin_mult\n","    plt.xlim(0 - x_margin, x_max + x_margin)\n","  x0, x1 = plt.gca().get_xlim()\n","  # ------------ hlines ------------ #\n","  # ------ entry & exit ------ #\n","  en_xmin = entry_tick / x1\n","  ex_xmin = exit_tick / x1\n","  plt.axhline(en_p, x0, en_xmin, linewidth=2, linestyle='--', alpha=1, color='lime')  # en_p line axhline\n","  plt.text(x0, en_p, 'en_p :\\n {:.3f} \\n epg {}'.format(en_p, config.tr_set.ep_gap), ha='right', va='center', fontweight='bold', fontsize=15)  # en_p line label\n","  plt.axhline(ex_p, ex_xmin, 1, linewidth=2, linestyle='--', alpha=1, color='lime')  # ex_p line axhline (signal 도 포괄함, 존재 의미)\n","  plt.text(x1, ex_p, 'ex_p :\\n {}'.format(ex_p), ha='left', va='center', fontweight='bold')  # ex_p line label\n","\n","  # ------ tpout_line ------ #\n","  plt.axhline(tp_line, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#00ff00')  # ep 와 gap 비교 용이하기 위해 ex_xmin -> 0.1 사용\n","  plt.text(x0, tp_line, 'tpg {}'.format(config.tr_set.tp_gap), ha='right', va='center', fontweight='bold', fontsize=15)\n","  plt.axhline(out_line, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#ff0000')\n","  plt.text(x0, out_line, 'outg {}'.format(config.tr_set.out_gap), ha='right', va='center', fontweight='bold', fontsize=15)\n","\n","  # ------ bias_line ------ #\n","  plt.axhline(bias_info, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='dodgerblue')\n","  plt.text(x0, bias_info, ' bias_info', ha='left', va='center', fontweight='bold')\n","  plt.axhline(bias_thresh, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#ff8400')\n","  plt.text(x0, bias_thresh, ' bias_thresh', ha='left', va='center', fontweight='bold')\n","\n","  # ------ ylim ------ #\n","  if front_plot:\n","    y_lim_data = a_data[:x_max + 1, col_idx_dict['ylim_col_idxs']]  # +1 for including open_tick\n","  else:\n","    y_lim_data = a_data[:, col_idx_dict['ylim_col_idxs']]\n","  \n","  y_min = y_lim_data.min()\n","  y_max = y_lim_data.max()\n","  y_margin = (y_max - y_min) * y_margin_mult\n","  plt.ylim(y_min - y_margin, y_max + y_margin)\n","\n","  # ------------ vline (open_tick, entry_tick, exit_tick) ------------ #\n","  y0, y1 = plt.gca().get_ylim()\n","  l_data = a_data[:exit_tick + 1, col_idx_dict['ohlc_col_idxs'][2]]  # +1 for including exit_tick\n","  open_ymax, en_ymax, ex_ymax = [(l_data[tick_] - y0) / (y1 - y0) - .01 for tick_ in [open_tick, entry_tick, exit_tick]]  # -.05 for margin\n","  plt.axvline(open_tick, 0, open_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')  # 추후, tick 별 세부 정의가 달라질 수 있음을 고려해 multi_line 작성 유지\n","  plt.axvline(entry_tick, 0, en_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  plt.axvline(exit_tick, 0, ex_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","\n","  return"],"metadata":{"id":"cFt6CeZf4yEk"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### legacy"],"metadata":{"id":"q3zisNOTw3jM"}},{"cell_type":"code","source":["_ = [plot_check_v4(np_df, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir, 500, 0.07, 100, **col_idx_dict) for param_zip in zip(np_plot_params, np_plot_params[::-1])]"],"metadata":{"id":"fUFdJVrsw78h"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def plot_check_v4(data, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir=None, vp_range=500, kde_factor=0.05, num_samples=100, **col_idx_dict):\n","  # start_0 = time.time()\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(30, 18))\n","  nrows, ncols = 2, 2\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                         ncols=ncols,\n","                         height_ratios=[3, 1]\n","                         )\n","  for gs_idx, params in enumerate(param_zip):\n","    ax = fig.add_subplot(gs[gs_idx])\n","    iin, iout, pr, ep, tp, entry_idx, exit_idx, open_idx, lvrg, fee, tp_line, out_line, bias_info, bias_thresh = params\n","\n","    # ------------ add_col section ------------ #\n","    iin, iout = int(iin), int(iout)\n","    a_data = data[iin:iout]\n","    # ------ candles ------ #\n","    candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","    \n","    # ------ add cols ------ #\n","    [nonstep_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['nonstep_col_info']]\n","    [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","    [stepmark_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['stepmark_col_info']]\n","\n","    # vp_data = data[iin - vp_range:iin, col_idx_dict['vp_col_idxs']]\n","    # vp_info = [vp_range, vp_data[:, 0], vp_data[:, 1], kde_factor, num_samples]\n","    vp_data = data[iin - vp_range:iin, col_idx_dict['vp_col_idxs']].T\n","    vp_info = [vp_range, *vp_data, kde_factor, num_samples]\n","\n","    # ------ ep, tp + xlim ------ #\n","    eptp_hvline_v4(config, ep, tp, entry_idx, exit_idx, open_idx, tp_line, out_line, bias_info, bias_thresh, \n","                   front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, vp_info, **col_idx_dict)        \n","\n","    #     Todo    #\n","    #     3. outer_price plot 일 경우, gs_idx + nrows 하면 됨\n","\n","    # ------ trade_info ------ #\n","    plt.title(pr_msg.format(entry_idx, exit_idx, pr, lvrg, fee))\n","\n","  if plot_check_dir is None:\n","    plt.show()\n","    print()\n","  else:\n","    fig_name = plot_check_dir +  \"/%s.png\" % int(entry_idx)\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","  plt.close()\n","  # print(\"elapsed time :\", time.time() - start_0)  \n","\n","  return\n","\n","def eptp_hvline_v4(config, en_p, ex_p, entry_idx, exit_idx, open_idx, tp_line, out_line, bias_info, bias_thresh, \n","                   front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, vp_info, **col_idx_dict):\n","  # ------ get vertical ticks ------ #\n","  entry_tick = int(entry_idx - iin)\n","  open_tick = entry_tick - int(entry_idx - open_idx)\n","  exit_tick = entry_tick + int(exit_idx - entry_idx)\n","\n","  if front_plot == 1:\n","    x_max = open_tick\n","  elif front_plot == 2:\n","    x_max = entry_tick\n","  if (iout - iin) > x_max:\n","    x_margin = x_max * x_margin_mult\n","    plt.xlim(0 - x_margin, x_max + x_margin)\n","  x0, x1 = plt.gca().get_xlim()\n","  # ------------ hlines ------------ #\n","  # ------ entry & exit ------ #\n","  en_xmin = entry_tick / x1\n","  ex_xmin = exit_tick / x1\n","  plt.axhline(en_p, x0, en_xmin, linewidth=2, linestyle='--', alpha=1, color='lime')  # en_p line axhline\n","  plt.text(x0, en_p, ' en_p :\\n {}'.format(en_p), ha='right', va='center', fontweight='bold')  # en_p line label\n","  plt.axhline(ex_p, ex_xmin, 1, linewidth=2, linestyle='--', alpha=1, color='lime')  # ex_p line axhline (signal 도 포괄함, 존재 의미)\n","  plt.text(x1, ex_p, ' ex_p :\\n {}'.format(ex_p), ha='left', va='center', fontweight='bold')  # ex_p line label\n","\n","  # ------ tpout_line ------ #\n","  plt.axhline(tp_line, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#00ff00')  # ep 와 gap 비교 용이하기 위해 ex_xmin -> 0.1 사용\n","  plt.text(x0, tp_line, ' %s' % config.tr_set.tp_gap, ha='left', va='center', fontweight='bold')\n","  plt.axhline(out_line, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#ff0000')\n","  plt.text(x0, out_line, ' %s' % config.tr_set.out_gap, ha='left', va='center', fontweight='bold')\n","\n","  # ------ bias_line ------ #\n","  plt.axhline(bias_info, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='dodgerblue')\n","  plt.text(x0, bias_info, ' bias_info', ha='left', va='center', fontweight='bold')\n","  plt.axhline(bias_thresh, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#ff8400')\n","  plt.text(x0, bias_thresh, ' bias_thresh', ha='left', va='center', fontweight='bold')\n","\n","  # ------ volume profile ------ #\n","  vp_range, close, volume, kde_factor, num_samples = vp_info\n","  if iin >= vp_range:\n","    start_0 = time.time()\n","    kde = stats.gaussian_kde(close, weights=volume, bw_method=kde_factor)\n","    kdx = np.linspace(close.min(), close.max(), num_samples)\n","    kdy = kde(kdx)\n","    print(\"kde elapsed_time :\", time.time() - start_0)\n","\n","    kdy_max = kdy.max()\n","    # peaks,_ = signal.find_peaks(kdy)\n","    peaks,_ = signal.find_peaks(kdy, prominence=kdy_max * 0.3)\n","    peak_list = kdx[peaks]   # peak_list\n","    [plt.axhline(peak, linewidth=6, linestyle='-', alpha=1, color='white') for peak in peak_list]\n","    \n","    kdy_ratio = entry_tick / kdy_max # 30 / 0.0001\n","    plt.plot(kdy * kdy_ratio, kdx, color='white')\n","    # plt.plot(pky, pkx, 'bo', color='yellow')\n","\n","  # ------ ylim ------ #\n","  if front_plot:\n","    y_lim_data = a_data[:x_max + 1, col_idx_dict['ylim_col_idxs']]  # +1 for including open_tick\n","  else:\n","    y_lim_data = a_data[:, col_idx_dict['ylim_col_idxs']]\n","  y_min = y_lim_data.min()\n","  y_max = y_lim_data.max()\n","  y_margin = (y_max - y_min) * y_margin_mult\n","  # plt.ylim(y_min - y_margin, y_max + y_margin)\n","\n","  # ------------ vline (open_tick, entry_tick, exit_tick) ------------ #\n","  y0, y1 = plt.gca().get_ylim()\n","  l_data = a_data[:exit_tick + 1, col_idx_dict['ohlc_col_idxs'][2]]  # +1 for including exit_tick\n","  open_ymax, en_ymax, ex_ymax = [(l_data[tick_] - y0) / (y1 - y0) - .01 for tick_ in [open_tick, entry_tick, exit_tick]]  # -.05 for margin\n","  plt.axvline(open_tick, 0, open_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')  # 추후, tick 별 세부 정의가 달라질 수 있음을 고려해 multi_line 작성 유지\n","  plt.axvline(entry_tick, 0, en_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  plt.axvline(exit_tick, 0, ex_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","\n","  return"],"metadata":{"id":"ESReTMpP7SoO"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### sync_check"],"metadata":{"id":"X0FsT-8FZRti"}},{"cell_type":"code","source":["save_plot = 0\n","\n","open_idx_range = reversed(range(0, len(res_df), 1000))\n","plot_range = 100\n","\n","x_max = 400\n","\n","inversion = 0\n","hedge = 0\n","\n","\n","if save_plot:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".ftr\", \"\")\n","  try:\n","    os.mkdir(plot_check_dir)\n","  except:\n","\n","    #     remove existing dir   #\n","    shutil.rmtree(plot_check_dir)\n","    print(plot_check_dir, 'removed !')\n","    os.mkdir(plot_check_dir)\n","    # pass\n","    \n","\n","prev_plotsize = 30\n","post_plotsize = 20\n","\n","\n","\n","h_candle_intv1 = 15\n","h_candle_intv2 = 60\n","if 'hopen_{}'.format(h_candle_intv2) not in res_df.columns:\n","  res_df = h_candle(res_df, h_candle_intv1)\n","  res_df = h_candle(res_df, h_candle_intv2)\n","\n","res_df[\"ma30_1m\"] = res_df['close'].rolling(30).mean()\n","res_df[\"ma60_1m\"] = res_df['close'].rolling(60).mean()\n","\n","res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line)\n","# res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=1, use_dtk_line=1)\n","# break\n","\n","rtc_list = [\"short_tp_1_{}\".format(strat_version), \"short_tp_gap_{}\".format(strat_version), \"long_tp_1_{}\".format(strat_version), \"long_tp_gap_{}\".format(strat_version)]\n","# h_rtc_list = [\"h_short_tp_1\", \"h_short_tp_gap\", \"h_long_tp_1\", \"h_long_tp_gap\"]\n","dtk_list = [\"short_dtk_1_{}\".format(strat_version), \"short_dtk_gap_{}\".format(strat_version), \"long_dtk_1_{}\".format(strat_version), \"long_dtk_gap_{}\".format(strat_version),\n","            # \"short_dtk_1_line\", \"short_dtk_gap_line\", \"long_dtk_1_line\", \"long_dtk_gap_line\",\n","            \"short_dtk_plot_1\", \"short_dtk_plot_gap\", \"long_dtk_plot_1\", \"long_dtk_plot_gap\"]\n","dc_v2_list = ['dc_upper_v2_{}'.format(strat_version), 'dc_lower_v2_{}'.format(strat_version)]\n","\n","\n","ohlc_list = ['open', 'high', 'low', 'close'] # + basic_st_list\n","hcandle_list = ['hopen_%s' % h_candle_intv1, 'hclose_%s' % h_candle_intv1, 'hopen_%s' % h_candle_intv2, 'hclose_%s' % h_candle_intv2]\n","# hcandle_list = ['hopen_%s' % h_candle_intv1, 'hclose_%s' % h_candle_intv1, 'hhigh_%s' % h_candle_intv2, 'hlow_%s' % h_candle_intv2]\n","\n","# --------------------- dc & bb level --------------------- #\n","dc_interval = '1m'\n","hdc_interval = '5m'\n","hhdc_interval = '15m'\n","\n","st_list = ['st_base_%s' % hhdc_interval, 'st_upper_%s' % hhdc_interval, 'st_lower_%s' % hhdc_interval]\n","\n","dc_list = ['dc_upper_%s' % dc_interval, 'dc_lower_%s' % dc_interval]\n","hdc_list = ['dc_upper_%s' % hdc_interval, 'dc_lower_%s' % hdc_interval]\n","hhdc_list = ['dc_upper_%s' % hhdc_interval, 'dc_lower_%s' % hhdc_interval]\n","\n","bb_interval = dc_interval\n","hbb_interval = hdc_interval\n","hhbb_interval = hhdc_interval\n","\n","bb_list = ['bb_upper_%s' % bb_interval, 'bb_lower_%s' % bb_interval]\n","hbb_list = ['bb_upper_%s' % hbb_interval, 'bb_lower_%s' % hbb_interval]\n","hhbb_list = ['bb_upper_%s' % hhbb_interval, 'bb_lower_%s' % hhbb_interval]\n","\n","bbwp_list = ['bbwp', 'bbwp_ma']\n","\n","\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1']\n","senkoub_list = ['senkou_b1']\n","\n","sar_list = ['sar_3m', 'sar_5m', 'sar_15m']\n","\n","ma_list = ['ma30_1m', 'ma60_1m']\n","sma_list = ['sma_1m']\n","\n","ema_list = ['ema_5m']\n","# cb_list = ['cloud_bline_1m']\n","cb_list = ['cloud_bline_30m']\n","# cb_list = ['cloud_bline_5m']\n","\n","\n","\n","# -------------- under price phase -------------- #\n","# macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3']\n","# trix_list = ['trix1', 'trix2', 'trix3']\n","# stoch_list = ['stoch_5m']\n","# fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","# cctbbo_list = ['cctbbo']\n","# emaroc_list = ['ema_roc']\n","rsi_list = ['rsi_%s' % config.loc_set.point.exp_itv] \n","cci_list = ['cci_%s' % config.loc_set.point.exp_itv] \n","\n","\n","# -------------- summation -------------- #\n","# input_colname = ohlc_list + basic_st_list + pline_list + bb_list + hbb_list + sma_list + cb_list + stoch_list + sar_list + dc_list\n","input_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + hhdc_list + dtk_list + dc_v2_list + rsi_list + ema_list + ma_list + st_list# + cci_list\n","\n","# yrange_colname = ohlc_list + basic_st_list + pline_list # currently just used for ymin, ymax\n","yrange_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + hhdc_list + dc_v2_list + ema_list # currently just used for ymin, ymax\n","yrange_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + dc_v2_list + ema_list # currently just used for ymin, ymax\n","\n","\n","\n","odd_cnt = 0\n","obj_i = -1\n","rev_obj_i = 0\n","\n","#   지금, continue 발생시 true / false idx 가 같이 상승하는 문제\n","\n","# while 1:\n","for open_idx in open_idx_range:\n","\n","  # if obj_i >= len_obj or rev_obj_i >= len_obj:\n","  #   break\n","\n","  # if odd_cnt % 2 == 1 and tf_plot: #  loss plot 을 채워야하는 상황\n","  #   rev_obj_i += 1\n","\n","  # else:\n","  #   obj_i += 1\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","  \n","\n","  odd_cnt += 1\n","\n","  # break\n","\n","  print(\"open_idx :\", open_idx)\n","  \n","  plot_df = res_df.iloc[open_idx - prev_plotsize:open_idx + plot_range + post_plotsize][input_colname]\n","  \n","  odds = 1 if odd_cnt % 2 == 1 else 2\n","  if odds == 1:\n","\n","    plt.style.use('dark_background')\n","\n","    fig = plt.figure(figsize=(26, 18))\n","    \n","    gs = gridspec.GridSpec(nrows=2, # row 몇 개 \n","                        ncols=2, # col 몇 개 \n","                        height_ratios=[3, 1]\n","                        )\n","    \n","  ax = fig.add_subplot(gs[odds - 1])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='#26a69a', colordown='#ef5350', alpha=0.5)\n","\n","  # ---------- h_candle ---------- #\n","  alpha = 1\n","  lw = 1\n","  for cd_i, candle in enumerate(hcandle_list):\n","\n","    if cd_i == 2:\n","      lw = 2      \n","    plt.step(np.arange(len(plot_df)), plot_df[candle].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","\n","  # alpha = 0.1\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['hclose_60'].values, plot_df['hopen_60'].values, \n","  #                     where=1, facecolor='#ffffff', alpha=alpha)  \n","  \n","\n","   # --------- ma --------- #\n","  alpha = 1\n","  lw = 2\n","  for ma_i, item in enumerate(ma_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","   # --------- ema --------- #\n","  alpha = 1\n","  lw = 4\n","  for sm_i, item in enumerate(ema_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","    \n","   # --------- st --------- #\n","  alpha = 1\n","  lw = 2\n","  for sm_i, item in enumerate(st_list):\n","      plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#00ff00', linewidth=lw)\n","\n","  # ---------------------- dc_v2 ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(dc_v2_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","  # # ---------------------- dc ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(dc_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","  # # ---------------------- hdc ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(hdc_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#e65100', linewidth=lw)\n","\n","  # # ---------------------- hhdc ---------------------- #\n","  # alpha = 1\n","  # lw = 4\n","  # for sm_i, item in enumerate(hhdc_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#c2185b', linewidth=lw)\n","\n","\n","  # # ---------------------- bb ---------------------- #\n","  # alpha = 1\n","  # lw = 1\n","  # for sm_i, item in enumerate(bb_list):\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","\n","  # alpha = 0.2\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % bb_interval].values, plot_df['bb_lower_%s' % bb_interval].values, \n","  #                     where=plot_df['bb_upper_%s' % bb_interval].values >= plot_df['bb_lower_%s' % bb_interval].values, facecolor='#ffffff', alpha=alpha)   \n","\n","  # # ---------------------- hbb ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(hbb_list):\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ff00ff', linewidth=lw)\n","  \n","  # alpha = 0.2\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % hbb_interval].values, plot_df['bb_lower_%s' % hbb_interval].values, \n","  #                     where=plot_df['bb_upper_%s' % hbb_interval].values >= plot_df['bb_lower_%s' % hbb_interval].values, facecolor='#ff00ff', alpha=alpha) \n","  \n","  # # ---------------------- hhbb ---------------------- #\n","\n","  # alpha = 1\n","  # lw = 4\n","  # for sm_i, item in enumerate(hhbb_list):\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#3179f5', linewidth=lw)\n","  \n","  # alpha = 0.2\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % hhbb_interval].values, plot_df['bb_lower_%s' % hhbb_interval].values, \n","  #                     where=plot_df['bb_upper_%s' % hhbb_interval].values >= plot_df['bb_lower_%s' % hhbb_interval].values, facecolor='#3179f5', alpha=alpha) \n","  \n","  # ------------------- dtk_line (old, tp_line) ------------------- #\n","  \n","  # alpha = 1\n","  # lw = 2\n","  # rtc_ratio_list = [config.loc_set.zone.dt_k]\n","  \n","  # for rtc_k in rtc_ratio_list:    \n","  #   # plt.step(np.arange(len(plot_df)), plot_df['short_dtk_1_line'].values - plot_df['short_dtk_gap_line'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['long_dtk_1_line'].values + plot_df['long_dtk_gap_line'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","\n","  # hy_min = np.min(plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * rtc_k)\n","  # hy_max = np.max(plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * rtc_k)  \n","\n","  # alpha = 1\n","  # lw = 4\n","  # # h_rtc_ratio_list = [config.loc_set.zone.dt_k]\n","  # h_rtc_ratio_list = [config.loc_set.zone.zone_dt_k]\n","  # # h_rtc_ratio_list = [0.272, 0.36, 0.4, 0.5]\n","  \n","  # for h_rtc_k in h_rtc_ratio_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df['short_dtk_plot_1'].values - plot_df['short_dtk_plot_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['long_dtk_plot_1'].values + plot_df['long_dtk_plot_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['h_short_tp_1'].values - plot_df['h_short_tp_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['h_long_tp_1'].values + plot_df['h_long_tp_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","\n","  # # hy_min = np.min(plot_df['short_dtk_plot_1'].values - plot_df['short_dtk_plot_gap'].values * h_rtc_k)\n","  # # hy_max = np.max(plot_df['long_dtk_plot_1'].values + plot_df['long_dtk_plot_gap'].values * h_rtc_k)  \n","\n","  # ------------- y lim ------------- #  \n","  y_max = max(np.max(plot_df[yrange_colname]))\n","  y_min = min(np.min(plot_df[yrange_colname]))\n","  # y_max = max(y_max, y_max_)\n","  # y_min = min(y_min, y_min_)\n","  \n","  # hy_min = np.min(plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * 0.36)\n","  # hy_max = np.max(plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * 0.36)  \n","  # y_max = max(y_max, y_max_, hy_max)\n","  # y_min = min(y_min, y_min_, hy_min)\n","\n","  if np.isnan(y_max) or np.isnan(y_min):\n","    print('continued in yminmax')\n","    continue\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","\n","  plt.ylim(y_min, y_max)\n","\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  #           rsi          #    \n","  plt.subplot(gs[odds + 1])\n","  alpha = 1\n","  for rsi_ in rsi_list:\n","    plt.step(np.arange(len(plot_df)), plot_df[rsi_].values, 'g', alpha=alpha)\n","    # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","    alpha -= 0.2\n","  plt.axhline(50, linestyle='--')\n","  plt.axhline(50 + config.loc_set.point.osc_band, linestyle='--')\n","  plt.axhline(50 - config.loc_set.point.osc_band, linestyle='--')\n","  \n","  plt.axvline(prev_plotsize, linestyle='--')\n","  \n","  #           cci          #    \n","  # plt.subplot(gs[odds + 1])\n","  # alpha = 1\n","  # for cci_ in cci_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cci_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axhline(config.loc_set.point.osc_band, linestyle='--')\n","  # plt.axhline(-config.loc_set.point.osc_band, linestyle='--')\n","  \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","\n","\n","  if len(plot_df) > x_max:\n","    x_margin = x_max / 20\n","    plt.xlim(0 - x_margin, x_max + x_margin)\n","\n","\n","  if not save_plot:\n","    if odds == 2:\n","      plt.show()\n","      plt.close()\n","  \n","  else:\n","    # ---------- save mode ---------- #\n","    fig_name = plot_check_dir +  \"/%s.png\" % t_i\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","\n","  # plt.close()  \n","  print()\n","\n","  # break\n"],"metadata":{"id":"inQ6f-CDZYkr"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"13a-U32Uy50I"},"source":["### brief np_pr survey"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"L9LdjV2uUWnp"},"outputs":[],"source":["# plot_pr_list[:100]\n","plt.plot(np_pr)\n","plt.axhline(1)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"TBE0l6dHRYrE"},"source":["### close & pr comp."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":877},"executionInfo":{"elapsed":1436,"status":"ok","timestamp":1636355589887,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"-txULkhXRbz5","outputId":"7cda9fc7-4a4e-4c52-ffa3-a974b5f7c66f"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 3 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 3 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]}],"source":["#     chunky survey 필요함    #\n","chunk_size = 50000\n","\n","sync_pr = np.ones(len(res_df))\n","sync_tr = np.zeros(len(res_df))\n","# sync_tr = np.empty(len(res_df))\n","# sync_tr[:] = np.nan\n","\n","max_tr = np.max(tp_ratio_list)\n","min_tr = np.min(tp_ratio_list)\n","\n","for ck_i in range(0, len(res_df), chunk_size):\n","\n","  chunked_df = res_df.iloc[ck_i:ck_i + chunk_size]\n","  # break\n","\n","  for pr_, eptp_idx, tr_ in zip(pr_list[ck_i:ck_i + chunk_size], trade_list[ck_i:ck_i + chunk_size], tp_ratio_list[ck_i:ck_i + chunk_size]):\n","    # print(pr_, eptp_idx)\n","    sync_pr[eptp_idx[-1][0]] = pr_\n","    sync_tr[eptp_idx[-1][0]] = tr_\n","    # break\n","\n","  chunked_pr = sync_pr[ck_i:ck_i + chunk_size]\n","  chunked_tr = sync_tr[ck_i:ck_i + chunk_size]\n","  chunked_tr = np.where(np.isnan(chunked_tr), pd.Series(chunked_tr).shift(1), chunked_tr)\n","\n","  # plt.figure(figsize=(8, 6))\n","\n","  plt.subplot(311)\n","  plt.plot(np.arange(len(chunked_df)), chunked_df['close'])\n","  # plt.show()\n","\n","  plt.subplot(312)\n","  plt.plot(np.cumprod(chunked_pr))\n","  \n","  plt.subplot(313)\n","  plt.plot(chunked_tr)\n","  plt.ylim(min_tr + 0.5 * (max_tr - min_tr), max_tr)\n","  \n","  plt.show()\n","  print()\n"]},{"cell_type":"markdown","metadata":{"id":"Qys2Bw5Ou3u9"},"source":["### plot indi. legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pi5ntOOVu6JT"},"outputs":[],"source":["\n","  # ---------------------- ma ---------------------- #\n","   # --------- ema --------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(ema_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  #   # --------- sma --------- #\n","  # alpha = 1\n","  # for sm_i, sma in enumerate(sma_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 4\n","  #   plt.step(np.arange(len(plot_df)), plot_df[sma].values, alpha=alpha, color='#e91e63', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  \n","  # ---------------------- cb ---------------------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(cb_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#5b9cf6', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","\n","  \n","  # ---------------------- sar ---------------------- #\n","  # alpha = 1\n","  # markersize = 5\n","  # for sar in sar_list:\n","  #   plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","  #   markersize += 1\n","  #   alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  # alpha = 0.7\n","  # for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","  #                     where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","  #                     where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","  #   alpha -= 0.05\n","  \n","\n","\n","  # ---------------------- outer price indi. ---------------------- #\n","  #           macd          #\n","  # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","    \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for stoch_ in stoch_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[stoch_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(stoch_upper, linestyle='--')\n","  # plt.axhline(stoch_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- cctbbo ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for cctbbo in cctbbo_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cctbbo].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(cctbbo_upper, linestyle='--')\n","  # plt.axhline(cctbbo_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- ema_roc ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for emaroc in emaroc_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[emaroc].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","  \n","  # ---------- bbw ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for bbwp_ in bbwp_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[bbwp_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(bbwp_thresh, linestyle='--')\n","\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n"]},{"cell_type":"markdown","metadata":{"id":"cj9X6S1jJjER"},"source":["### plot nontp case"]},{"cell_type":"markdown","metadata":{"id":"tApzvz_gK9lR"},"source":["## legacy"]},{"cell_type":"markdown","metadata":{"id":"FaRGwR4NEop2"},"source":["### shifting"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"a8aYsjEgQnGF"},"outputs":[],"source":["org_res_df = res_df.copy()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":291,"status":"ok","timestamp":1626515312874,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"RF3RM2G2RCb1","outputId":"ba8f6a75-d4df-4f85-cd0f-190935341f7a"},"outputs":[{"name":"stdout","output_type":"stream","text":["                            open     high  ...  min_upper  max_lower\n","2021-06-30 23:55:59.999  0.27223  0.27281  ...   0.272145    0.27005\n","2021-06-30 23:56:59.999  0.27274  0.27290  ...   0.272145    0.27005\n","2021-06-30 23:57:59.999  0.27246  0.27257  ...   0.272523    0.27021\n","2021-06-30 23:58:59.999  0.27166  0.27183  ...   0.272523    0.27021\n","2021-06-30 23:59:59.999  0.27144  0.27211  ...   0.272523    0.27021\n","\n","[5 rows x 37 columns]\n","                            open     high  ...  min_upper  max_lower\n","2021-06-30 23:55:59.999  0.27223  0.27281  ...   0.272523    0.27021\n","2021-06-30 23:56:59.999  0.27274  0.27290  ...        NaN        NaN\n","2021-06-30 23:57:59.999  0.27246  0.27257  ...        NaN        NaN\n","2021-06-30 23:58:59.999  0.27166  0.27183  ...        NaN        NaN\n","2021-06-30 23:59:59.999  0.27144  0.27211  ...        NaN        NaN\n","\n","[5 rows x 37 columns]\n"]}],"source":["#         refresh res_df      #\n","res_df = org_res_df.copy()\n","print(org_res_df.tail(5))\n","\n","# break\n","\n","\n","shift_size = -4\n","# shift_size = -1\n","# shift_size = -7\n","# shift_size = +3\n","\n","res_df['min_upper'] = res_df['min_upper'].shift(shift_size)\n","res_df['max_lower'] = res_df['max_lower'].shift(shift_size)\n","res_df['minor_ST1_Trend'] = res_df['minor_ST1_Trend'].shift(shift_size)\n","res_df['minor_ST2_Trend'] = res_df['minor_ST2_Trend'].shift(shift_size)\n","res_df['minor_ST3_Trend'] = res_df['minor_ST3_Trend'].shift(shift_size)\n","res_df['middle_line'] = res_df['middle_line'].shift(shift_size)\n","\n","print(res_df.tail(5))"]},{"cell_type":"markdown","metadata":{"id":"2gxvme1PC6ha"},"source":["### load model"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5831,"status":"ok","timestamp":1628862368878,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"dtYdAuSsC72_","outputId":"e8dccc53-aaa7-4bab-ed8d-753f634c08d6"},"outputs":[{"name":"stdout","output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/resnet/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5\n","94773248/94765736 [==============================] - 1s 0us/step\n"]}],"source":["# model_name = 'inner_tick_cnnreg_lscalemm_prefee_gpu_%s_%s_%s_%s_%s.h5'\n","\n","# model = tf.keras.models.load_model(ckpt_path + model_name)\n","\n","from tensorflow.keras.applications.resnet50 import ResNet50\n","\n","model = ResNet50(weights='imagenet', include_top=False)\n","# model.summary()\n"]},{"cell_type":"markdown","metadata":{"id":"5la6usMOFzkX"},"source":["#### gen selected vector"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oQk3-jbKF8FB"},"outputs":[],"source":["def min_max_scale(npy_x):\n","\n","  return (npy_x - np.min(npy_x)) / (np.max(npy_x) - np.min(npy_x))\n","\n","def expand_dims(npy_x):\n","\n","  row, col = npy_x.shape\n","  npy_x2 = np.array(npy_x).reshape(-1, row, col, 1).astype(np.float32)\n","  # input_x = np.array(data_x).reshape(-1, row, col).astype(np.float32)\n","\n","  #     1c to 3c    #\n","  npy_x3 = npy_x2 * np.ones(3, dtype=np.float32)[None, None, None, :]\n","\n","  return npy_x3\n","\n","\n","def vector_dist(f1, f2):\n","  return np.linalg.norm(f1-f2)\n","\n","\n","\n","# ------------------------ params ------------------------  #\n","selected_i = 500\n","input_size = 100\n","\n","\n","\n","#   1. 선택된 인덱스를 입력받았을 때, input generating 형태만 만들어놓고,     #\n","#   1-1. input cols 필요함    #\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower']\n","# senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","# senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","\n","sma_list = ['sma']\n","\n","#     -------------- outer price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","cctbbo_list = ['cctbbo']\n","\n","selected_price_colname = basic_list + senkoua_list + senkoub_list + sar_list\n","selected_outprice_colname = [macd_list]\n","\n","\n","#         global scaling for outer price data       #\n","#         1. nan 처리       #\n","\n","# # print((np.isnan(df.values)))\n","# print(\"np.sum(np.isnan(df.values), axis=0) :\", np.sum(np.isnan(df.values), axis=0))\n","\n","# max_nan = np.max(np.sum(np.isnan(df.values), axis=0))\n","# # print(max_nan)\n","\n","# df = df.iloc[max_nan:-max_nan]\n","\n","# total_gdata = []\n","# for g_col in selected_outprice_colname:\n","\n","#   temp_data = min_max_scale(res_df[g_col])\n","#   total_gdata.append(temp_data)\n","\n","\n","\n","#   1-2. cols 에 따른, scaling method 구분함    #\n","onprice_input_x = min_max_scale(res_df[selected_price_colname].iloc[selected_i - input_size:selected_i].values)\n","print(onprice_input_x.shape)\n","\n","\n","#   2. plot_check 에서 본인이 원하는 shape 의 인덱스를 선택   #\n","#   3. vertorize, \n","#   3-1. input generator 를 이용해 entry signal 발생할 때마다 dist 비교 진행    #\n","re_onprice_input_x = expand_dims(onprice_input_x)\n","print(re_onprice_input_x.shape)\n","      \n","# break\n","\n","selected_vector = model.predict(re_onprice_input_x, verbose=1)\n","print(selected_vector.shape)"]},{"cell_type":"markdown","metadata":{"id":"OJqkmkpsLCYC"},"source":["### tr_tresh calc"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gcpo4MGd9Wm4"},"outputs":[],"source":["res_wr = 0.6\n","# tr_thresh = 1\n","# tr_thresh = ((1 - res_wr) / res_wr) ** 0.5\n","tr_thresh = ((1 - res_wr) / res_wr) + 0.01\n","# tr_thresh = 2.6\n","print(\"res_wr :\", res_wr)\n","print(\"tr_thresh :\", tr_thresh)\n","\n","\n","#   단리    #\n","trade_num = 1000\n","asset = 1 # thousand USDT\n","test_loss_gap = 0.95  # fee adjusted\n","test_pr_gap = 1 + (1 - test_loss_gap) * tr_thresh\n","\n","test_loss_cnt = trade_num * (1 - res_wr)\n","test_pr_cnt = trade_num * res_wr\n","\n","test_trade_list = [test_pr_gap] * int(test_pr_cnt) + [test_loss_gap] * int(test_loss_cnt)\n","random.shuffle(test_trade_list)\n","# print(\"len(test_trade_list) :\", len(test_trade_list))\n","print(test_trade_list[:10])\n","print()\n","\n","# print(\"%.5f\" % np.cumprod(test_trade_list)[-1])\n","for tr_thresh_ in np.arange(1, 3, 0.2):\n","  if (1 + (1 - test_loss_gap) * tr_thresh_) ** test_pr_cnt * test_loss_gap ** test_loss_cnt > 1:\n","    break\n","print(\"복리를 위한 tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumprod(test_trade_list)[-1] :\", np.cumprod(test_trade_list)[-1])\n","print(\"total_pr : \", np.cumprod(test_trade_list)[-1])\n","print()\n","#   복리 tr_thresh  #\n","#   1. trade_num 에 영향 받지 않음\n","#   2. loss_gap 에 비례함\n","\n","for tr_thresh_ in np.arange(1, 3, 0.01):\n","  if ((1 - test_loss_gap) * tr_thresh_) * test_pr_cnt + (test_loss_gap - 1) * test_loss_cnt > 0:\n","    break\n","np_test_trade = np.array(test_trade_list) - 1\n","print(np_test_trade[:10])\n","# print(\"%.3f\" % )\n","print(\"단리를 위한 tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumsum(np_test_trade)[-1] :\", np.cumsum(np_test_trade)[-1])\n","print(\"total_pr : \", 1 + np.cumsum(np_test_trade)[-1])\n"]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":["Ic1mfmwWCIBu","VdukVo5-Suzj","Bw5JibDKSuzj","Pe0QpnORSuzk","E0n53hflJbnp","MlFkpO1MSuzl","t1E_eAyPSuzm","nUs4fjVHSuzl","WVAKq3i8Suzm","L7l5CTJfSuzn","x_XGJqBi8Jex","epgS5Dksu-HX","x2yj2SwAXDLp","14chOHeXh6JD","xpyP5t8Ht_pE","dzla8i9_ysmP","zQ-roiifspcX","X0FsT-8FZRti","13a-U32Uy50I","TBE0l6dHRYrE","Qys2Bw5Ou3u9","tApzvz_gK9lR","2gxvme1PC6ha","5la6usMOFzkX","OJqkmkpsLCYC"],"name":"stem4_5_vec_backi2(0401_statsplot).ipynb","toc_visible":true,"provenance":[],"machine_shape":"hm","authorship_tag":"ABX9TyPrVyL3RaT8PWftUbUAAYyw"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}