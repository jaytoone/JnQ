{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"6rmQpzEGXfCw"},"outputs":[],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","import os, sys\n","\n","current_path = '/content/drive/My Drive/Colab Notebooks/JnQ/'\n","\n","os.chdir(current_path)\n","\n","nb_path = '/content/notebooks'\n","try:\n","  sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ')\n","  sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ/funcs')\n","  os.symlink('/content/drive/My Drive/Colab Notebooks/JnQ/mpl_finance', nb_path)\n","  sys.path.insert(0, nb_path)\n","except:\n","  pass"]},{"cell_type":"markdown","metadata":{"id":"8uqYv5StTazo"},"source":["# requirements"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9qGt60DKTZmf"},"outputs":[],"source":["# !pip install findiff\n","\n","# import nvstrings, nvcategory, cudf\n","# import cuml\n","# import cudf\n","\n","import matplotlib.pyplot as plt\n","from matplotlib import gridspec\n","from tqdm.notebook import tqdm\n","from funcs.funcs_indicator import *\n","from funcs.funcs_for_trade import *\n","\n","from utils import utils_v3_1216 as utils1\n","from utils import utils_v5_2_1216 as utils2\n","# from utils import utils_v7_3_1231_v7_3 as utils3\n","from utils import utils_public_0101_v7_3_log as utils_public\n","\n","import mpl_finance as mf\n","import os\n","import datetime\n","\n","import IPython\n","import IPython.display\n","import matplotlib as mpl\n","\n","import numpy as np\n","# import jax.numpy as np\n","import pandas as pd\n","import seaborn as sns\n","# import tensorflow as tf\n","\n","import pickle\n","import shutil\n","import json\n","from easydict import EasyDict\n","\n","# from trendln import trendln\n","\n","from datetime import datetime\n","import random\n","import time\n","\n","# mpl.rcParams['figure.figsize'] = (8, 6)\n","# mpl.rcParams['axes.grid'] = False\n","\n","np.seterr(invalid=\"ignore\")\n","\n","pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)"]},{"cell_type":"markdown","metadata":{"id":"M8-EChy0VsDr"},"source":["## cudf"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":414,"status":"ok","timestamp":1638754008241,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"b09qAb1sVtRP","outputId":"3a824202-064a-4544-b791-ffc777bb3f9c"},"outputs":[{"name":"stdout","output_type":"stream","text":["usage: conda [-h] [-V] command ...\n","conda: error: unrecognized arguments: -t=/content/notebooks\n"]}],"source":["# !conda install -c rapidsai-nightly -c nvidia -c numba -c conda-forge \\\n","#     cudf python=3.7 cudatoolkit=11.1 -t=$nb_path"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":413,"status":"ok","timestamp":1638754715310,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"Jnz6i7ZqRnb0","outputId":"207bc57b-a17a-4f67-fb26-24e46e2c6e26"},"outputs":[{"name":"stdout","output_type":"stream","text":["***********************************************************************\n","Woo! Your instance has the right kind of GPU, a Tesla P100-PCIE-16GB!\n","***********************************************************************\n","\n"]}],"source":["# !git clone https://github.com/rapidsai/rapidsai-csp-utils.git\n","!python rapidsai-csp-utils/colab/env-check.py"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4sKA_9Dbg4s2"},"outputs":[],"source":["# This will update the Colab environment and restart the kernel.  Don't run the next cell until you see the session crash.\n","!bash rapidsai-csp-utils/colab/update_gcc.sh\n","import os\n","os._exit(00)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"d1C4pNiBhYHX"},"outputs":[],"source":["# This will install CondaColab.  This will restart your kernel one last time.  Run this cell by itself and only run the next cell once you see the session crash.\n","import condacolab\n","condacolab.install()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":414,"status":"ok","timestamp":1638754863073,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"iGx3ACTvZqck","outputId":"e8379cc4-c325-4fe0-ac46-5fbbd7d38829"},"outputs":[{"name":"stdout","output_type":"stream","text":["‚ú®üç∞‚ú® Everything looks OK!\n"]}],"source":["# you can now run the rest of the cells as normal\n","import condacolab\n","condacolab.check()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oR8s7U8c7C28","outputId":"22be2731-fae1-45fc-f310-e48f60774bb2"},"outputs":[{"name":"stdout","output_type":"stream","text":["Installing RAPIDS Stable 21.10\n","Starting the RAPIDS install on Colab.  This will take about 15 minutes.\n","Collecting package metadata (current_repodata.json): ...working... done\n","Solving environment: ...working... WARNING conda.core.solve:_add_specs(611): pinned spec cudatoolkit=11.1 conflicts with explicit specs.  Overriding pinned spec.\n","failed with initial frozen solve. Retrying with flexible solve.\n","Solving environment: ...working... WARNING conda.core.solve:_add_specs(611): pinned spec cudatoolkit=11.1 conflicts with explicit specs.  Overriding pinned spec.\n","failed with repodata from current_repodata.json, will retry with next repodata source.\n","Collecting package metadata (repodata.json): ...working... done\n"]}],"source":["# Installing RAPIDS is now 'python rapidsai-csp-utils/colab/install_rapids.py <release> <packages>'\n","# The <release> options are 'stable' and 'nightly'.  Leaving it blank or adding any other words will default to stable.\n","# The <packages> option are default blank or 'core'.  By default, we install RAPIDSAI and BlazingSQL.  The 'core' option will install only RAPIDSAI and not include BlazingSQL, \n","!python rapidsai-csp-utils/colab/install_rapids.py stable\n","import os\n","os.environ['NUMBAPRO_NVVM'] = '/usr/local/cuda/nvvm/lib64/libnvvm.so'\n","os.environ['NUMBAPRO_LIBDEVICE'] = '/usr/local/cuda/nvvm/libdevice/'\n","os.environ['CONDA_PREFIX'] = '/usr/local'"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kWsxi4ZpKtGt"},"outputs":[],"source":["import shutil\n","import sys\n","\n","colab_env = \"/usr/lib\"\n","\n","rapids_path = os.path.join(current_path, \"rapidsai-csp-utils/lib\")\n","rapids_libs = os.listdir(rapids_path)\n","print(rapids_libs)\n","# break\n","\n","for lib_ in rapids_libs:\n","  try:\n","    shutil.copy(os.path.join(rapids_path, lib_), os.path.join(colab_env, lib_))\n","    sys.path.append(os.path.join(colab_env, lib_))\n","    print(\"copied to\" + os.path.join(colab_env, lib_))\n","  except Exception as e:\n","    print(e)"]},{"cell_type":"markdown","metadata":{"id":"Iy76iO7gztne"},"source":["## move legacy files"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hMRht32Czwry"},"outputs":[],"source":["# print()\n","cur_dir_list = os.listdir('.')\n","for f in cur_dir_list:\n","  if 'legacy' in f :\n","    # print(f)\n","    if os.path.isdir(current_path + f,):\n","      continue\n","\n","    shutil.move(current_path + f, current_path + 'legacy/' + f)\n","    print(\"moved to\" + current_path + 'legacy/' +  f)"]},{"cell_type":"markdown","metadata":{"id":"Ic1mfmwWCIBu"},"source":["# makeset"]},{"cell_type":"markdown","metadata":{"id":"Ci_jUnNTZbm9"},"source":["## load data"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":22503,"status":"ok","timestamp":1638246127510,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"_bXyS2yrZYC6","outputId":"b24a8a66-48b1-42b5-aa79-63f5a8542bac"},"outputs":[{"name":"stdout","output_type":"stream","text":["['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr']\n","['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 LTCUSDT.ftr']\n","['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 ETHUSDT.ftr']\n","['2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr']\n","['2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-08-31 SUSHIUSDT.xlsx', '2021-08-31 CVCUSDT.xlsx', '2021-08-31 BTSUSDT.xlsx', '2021-08-31 HOTUSDT.xlsx', '2021-08-31 ZRXUSDT.xlsx', '2021-08-31 QTUMUSDT.xlsx', '2021-08-31 IOTAUSDT.xlsx', '2021-08-31 BTCBUSD.xlsx', '2021-08-31 WAVESUSDT.xlsx', '2021-08-31 ADAUSDT.xlsx', '2021-08-31 LITUSDT.xlsx', '2021-08-31 XTZUSDT.xlsx', '2021-08-31 BNBUSDT.xlsx', '2021-08-31 AKROUSDT.xlsx', '2021-08-31 HNTUSDT.xlsx', '2021-08-31 ETCUSDT.xlsx', '2021-08-31 XMRUSDT.xlsx', '2021-08-31 YFIUSDT.xlsx', '2021-08-31 ETHUSDT.xlsx', '2021-08-31 ALICEUSDT.xlsx', '2021-08-31 ALPHAUSDT.xlsx', '2021-08-31 SFPUSDT.xlsx', '2021-08-31 REEFUSDT.xlsx', '2021-08-31 BATUSDT.xlsx', '2021-08-31 DOGEUSDT.xlsx', '2021-08-31 TRXUSDT.xlsx', '2021-08-31 RLCUSDT.xlsx', '2021-08-31 BTCSTUSDT.xlsx', '2021-08-31 STORJUSDT.xlsx', '2021-08-31 SNXUSDT.xlsx', '2021-08-31 XLMUSDT.xlsx', '2021-08-31 NEOUSDT.xlsx', '2021-08-31 UNFIUSDT.xlsx', '2021-08-31 SANDUSDT.xlsx', '2021-08-31 DASHUSDT.xlsx', '2021-08-31 KAVAUSDT.xlsx', '2021-08-31 RUNEUSDT.xlsx', '2021-08-31 CTKUSDT.xlsx', '2021-08-31 LINKUSDT.xlsx', '2021-08-31 CELRUSDT.xlsx', '2021-08-31 RSRUSDT.xlsx', '2021-08-31 DGBUSDT.xlsx', '2021-08-31 SKLUSDT.xlsx', '2021-08-31 RENUSDT.xlsx', '2021-08-31 TOMOUSDT.xlsx', '2021-08-31 MTLUSDT.xlsx', '2021-08-31 LTCUSDT.xlsx', '2021-08-31 DODOUSDT.xlsx', '2021-08-31 EGLDUSDT.xlsx', '2021-08-31 KSMUSDT.xlsx', '2021-08-31 ONTUSDT.xlsx', '2021-08-31 VETUSDT.xlsx', '2021-08-31 TRBUSDT.xlsx', '2021-08-31 MANAUSDT.xlsx', '2021-08-31 COTIUSDT.xlsx', '2021-08-31 CHRUSDT.xlsx', '2021-08-31 ETHUSDT_210924.xlsx', '2021-08-31 BAKEUSDT.xlsx', '2021-08-31 GRTUSDT.xlsx', '2021-08-31 FLMUSDT.xlsx', '2021-08-31 EOSUSDT.xlsx', '2021-08-31 OGNUSDT.xlsx', '2021-08-31 SCUSDT.xlsx', '2021-08-31 BALUSDT.xlsx', '2021-08-31 STMXUSDT.xlsx', '2021-08-31 BTTUSDT.xlsx', '2021-08-31 LUNAUSDT.xlsx', '2021-08-31 DENTUSDT.xlsx', '2021-08-31 KNCUSDT.xlsx', '2021-08-31 SRMUSDT.xlsx', '2021-08-31 ENJUSDT.xlsx', '2021-08-31 ZENUSDT.xlsx', '2021-08-31 ATOMUSDT.xlsx', '2021-08-31 NEARUSDT.xlsx', '2021-08-31 BCHUSDT.xlsx', '2021-08-31 IOSTUSDT.xlsx', '2021-08-31 HBARUSDT.xlsx', '2021-08-31 ZECUSDT.xlsx', '2021-08-31 1000SHIBUSDT.xlsx', '2021-08-31 TLMUSDT.xlsx', '2021-08-31 BZRXUSDT.xlsx', '2021-08-31 ETHBUSD.xlsx', '2021-08-31 AAVEUSDT.xlsx', '2021-08-31 GTCUSDT.xlsx', '2021-08-31 ALGOUSDT.xlsx', '2021-08-31 ICPUSDT.xlsx', '2021-08-31 BTCUSDT_210924.xlsx', '2021-08-31 LRCUSDT.xlsx', '2021-08-31 AVAXUSDT.xlsx', '2021-08-31 MATICUSDT.xlsx', '2021-08-31 1INCHUSDT.xlsx', '2021-08-31 MKRUSDT.xlsx', '2021-08-31 THETAUSDT.xlsx', '2021-08-31 UNIUSDT.xlsx', '2021-08-31 LINAUSDT.xlsx', '2021-08-31 RVNUSDT.xlsx', '2021-08-31 FILUSDT.xlsx', '2021-08-31 NKNUSDT.xlsx', '2021-08-31 DEFIUSDT.xlsx', '2021-08-31 COMPUSDT.xlsx', '2021-08-31 BTCDOMUSDT.xlsx', '2021-08-31 SOLUSDT.xlsx', '2021-08-31 BTCUSDT.xlsx', '2021-08-31 OMGUSDT.xlsx', '2021-08-31 ICXUSDT.xlsx', '2021-08-31 BLZUSDT.xlsx', '2021-08-31 FTMUSDT.xlsx', '2021-08-31 YFIIUSDT.xlsx', '2021-08-31 KEEPUSDT.xlsx', '2021-08-31 BANDUSDT.xlsx', '2021-08-31 XRPUSDT.xlsx', '2021-08-31 SXPUSDT.xlsx', '2021-08-31 CRVUSDT.xlsx', '2021-08-31 BELUSDT.xlsx', '2021-08-31 DOTUSDT.xlsx', '2021-08-31 XEMUSDT.xlsx', '2021-08-31 ONEUSDT.xlsx', '2021-08-31 ZILUSDT.xlsx', '2021-08-31 AXSUSDT.xlsx', '2021-08-31 OCEANUSDT.xlsx', '2021-08-31 CHZUSDT.xlsx', '2021-08-31 ANKRUSDT.xlsx', '2021-08-31 SUSHIUSDT_res_dfs.pkl', '2021-07-01 ADAUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr']\n","['2021-07-01 BTCUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr']\n","['2021-02-07 BTC.xlsx', '2021-02-07 ETH.xlsx', '2021-02-11 BCHUSDT.xlsx', '2021-02-11 XRPUSDT.xlsx', '2021-02-11 EOSUSDT.xlsx', '2021-02-11 LTCUSDT.xlsx', '2021-02-11 ETCUSDT.xlsx', '2021-02-11 LINKUSDT.xlsx', '2021-02-11 XLMUSDT.xlsx', '2021-02-11 ADAUSDT.xlsx', '2021-02-11 XMRUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr']\n","['2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx']\n"]}],"source":["interval = '1m'\n","date_path = './candlestick_concated/%s/quant_v2/' % interval\n","file_list = os.listdir(date_path)\n","print((file_list))\n","\n","interval2 = '3m'\n","date_path2 = './candlestick_concated/%s/quant_v2/' % interval2\n","file_list2 = os.listdir(date_path2)\n","print((file_list2))\n","\n","interval3 = '5m'\n","date_path3 = './candlestick_concated/%s/quant_v2/' % interval3\n","file_list3 = os.listdir(date_path3)\n","print((file_list3))\n","\n","interval4 = '15m'\n","date_path4 = './candlestick_concated/%s/quant_v2/' % interval4\n","file_list4 = os.listdir(date_path4)\n","print((file_list4))\n","\n","interval5 = '30m'\n","date_path5 = './candlestick_concated/%s/quant_v2/' % interval5\n","file_list5 = os.listdir(date_path5)\n","print((file_list5))\n","\n","interval6 = '1h'\n","date_path6 = './candlestick_concated/%s/quant_v2/' % interval6\n","file_list6 = os.listdir(date_path6)\n","print((file_list6))\n","\n","interval7 = '4h'\n","date_path7 = './candlestick_concated/%s/quant_v2/' % interval7\n","file_list7 = os.listdir(date_path7)\n","print((file_list7))\n","\n","interval8 = '1d'\n","date_path8 = './candlestick_concated/%s/quant_v2/' % interval8\n","file_list8 = os.listdir(date_path8)\n","print((file_list8))"]},{"cell_type":"markdown","metadata":{"id":"AUSBU7T8Suzi"},"source":["## basic_func"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QmhLikYlSuzi"},"outputs":[],"source":["def sync_check(df, second_df=None, third_df=None, fourth_df=None, fifth_df=None,\n","               sixth_df=None, seventh_df=None, eighth_df=None):\n","\n","    #           supertrend          #\n","    # df = st_price_line(df, second_df, '3m')\n","    # # print(df.head(100))\n","    # # return\n","\n","    # df = st_price_line(df, third_df, '5m')\n","    # df = st_price_line(df, fourth_df, '15m')\n","    # df = st_price_line(df, fifth_df, '30m')\n","    # df = st_price_line(df, sixth_df, '1h')\n","    # df = st_price_line(df, seventh_df, '4h')\n","\n","    # print(\"supertrend phase done\")\n","\n","    # --------------- rsi --------------- #  \n","    # df['rsi_1m'] = rsi(df, 14)    \n","    # third_df['rsi_5m'] = rsi(third_df, 14)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-1]), columns=['rsi_5m']))\n","    \n","    # print(\"rsi phase done\")\n","\n","\n","    # --------------- cci --------------- #  \n","    # df['cci_1m'] = cci(df, 20)\n","\n","    # print(\"cci phase done\")\n","\n","\n","    # --------------- ema --------------- #      \n","    # third_df['ema_5m'] = ema(third_df['close'], 200)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-1]), columns=['ema_5m']))\n","    \n","    # print(\"ema phase done\")\n","\n","\n","    # # --------------- dc --------------- #  \n","    # df = dc_line(df, None, '1m', dc_period=20)\n","    # df = dc_line(df, second_df, '3m', dc_period=20)\n","    # df = dc_line(df, third_df, '5m', dc_period=20)\n","    # df = dc_line(df, fourth_df, '15m', dc_period=20)\n","    # df = dc_line(df, fifth_df, '30m', dc_period=20)\n","    # df = dc_line(df, sixth_df, '1h', dc_period=20)\n","    # df = dc_line(df, seventh_df, '4h', dc_period=20)\n","\n","    # print(\"dc phase done\")\n","    \n","    # # --------------- bband --------------- #  \n","    # df = bb_line(df, None, '1m')\n","    # df = bb_line(df, second_df, '3m')\n","    # df = bb_line(df, third_df, '5m')\n","    # df = bb_line(df, fourth_df, '15m')\n","    # df = bb_line(df, fifth_df, '30m')\n","    # df = bb_line(df, sixth_df, '1h')\n","    # df = bb_line(df, seventh_df, '4h')\n","\n","    # print(\"bband phase done\")\n","\n","    # --------------- cbline --------------- #    \n","    # second_df['cloud_bline_3m'] = cloud_bline(second_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, second_df, [-1]), columns=['cloud_bline_3m']))\n","    # third_df['cloud_bline_5m'] = cloud_bline(third_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-1]), columns=['cloud_bline_5m']))\n","    # fourth_df['cloud_bline_15m'] = cloud_bline(fourth_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, fourth_df, [-1]), columns=['cloud_bline_15m']))\n","    # fifth_df['cloud_bline_30m'] = cloud_bline(fifth_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, fifth_df, [-1]), columns=['cloud_bline_30m']))\n","    # sixth_df['cloud_bline_1h'] = cloud_bline(sixth_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, sixth_df, [-1]), columns=['cloud_bline_1h']))\n","    # seventh_df['cloud_bline_4h'] = cloud_bline(seventh_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, seventh_df, [-1]), columns=['cloud_bline_4h']))\n","\n","    # print(\"cbline phase done\")\n","    \n","\n","    #           lucid sar              #\n","    # df['sar_1m'], df['sar_uptrend_1m'] = lucid_sar(df, return_uptrend=True)\n","\n","    second_df['sar_3m'], second_df['sar_uptrend_3m'] = lucid_sar(second_df, af_initial=0.01, return_uptrend=True)\n","    df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, second_df, [-2, -1], backing_i=-2), columns=['sar_3m', 'sar_uptrend_3m']))\n","\n","    third_df['sar_5m'], third_df['sar_uptrend_5m'] = lucid_sar(third_df, af_initial=0.01, return_uptrend=True)\n","    df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-2, -1], backing_i=-2), columns=['sar_5m', 'sar_uptrend_5m']))\n","\n","    fourth_df['sar_15m'], fourth_df['sar_uptrend_15m'] = lucid_sar(fourth_df, af_initial=0.01, return_uptrend=True)\n","    df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, fourth_df, [-2, -1], backing_i=-2), columns=['sar_15m', 'sar_uptrend_15m']))\n","\n","    # seventh_df['sar_4h'], seventh_df['sar_uptrend_4h'] = lucid_sar(seventh_df, return_uptrend=True)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, seventh_df, [-2, -1], backing_i=-2), columns=['sar_4h', 'sar_uptrend_4h']))\n","    \n","    print(\"sar phase done\")\n","\n","    \n","    #           stochastic              #\n","    # df['stoch_1m'] = stoch(df, 13, 3, 3)\n","\n","    # third_df['stoch'] = stoch(third_df, 13, 3, 3)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","    # print(\"stoch phase done\")\n","\n","\n","    return df\n"]},{"cell_type":"markdown","metadata":{"id":"mEKyVbHWSuzi"},"source":["## make & save res_df (concat ÏÉùÍ∞ÅÌïòÎ©¥, timeindex sync ÎßûÏ∂∞ÏïºÌï®)"]},{"cell_type":"markdown","metadata":{"id":"VdukVo5-Suzj"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11,"status":"error","timestamp":1636201718856,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"khKb9nhlSuzj","outputId":"02bf2c60-f298-4fe9-e6bb-78230ac1348c"},"outputs":[{"ename":"NameError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-5-ee034491b257>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0ma_day\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m3600\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m24\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtqdm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m   \u001b[0mkeys\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mfile_list\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'file_list' is not defined"]}],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  if '2021-07-01'.upper() not in file_list[i]:\n","  # if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    excel_name = key.replace(\".xlsx\", \"_st1h_backi2.xlsx\")\n","    excel_path = save_path + excel_name\n","\n","    if excel_name in exist_list:\n","      print(excel_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m ÎßàÏßÄÎßâ timeindex Ïùò date Í∏∞Ï§Ä, 08:59:59.999000 Î•º last timestamp Î°ú ÏÑ§Ï†ï\n","      #      2. ÏãúÏûë timestamp Îäî Î™®Îì† tf Ïùò Í∞ÄÏû• ÏµúÍ∑º ÏãúÏûë index,\n","      #       a. 1m Ïùò ÏãúÏûë timeindex Îäî ÏµúÏÜå, htf Ïùò ÏãúÏûë timeindex Î≥¥Îã§ interval ÎßåÌÅº ÏïûÏÑúÏïºÌï®\n","      #         i. Îî∞ÎùºÏÑú 1m open_index, latest_open_index + 1d Î•º ÌïòÎ©¥ Îåê\n","      #           1. timestamp ÏúºÎ°ú Î≥ÄÌôòÌõÑ 1day Î•º ÎçîÌïòÍ≥† datetime ÏúºÎ°ú Î≥ÄÌôò\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","    latest_open_index = sorted(open_indexes)[-1]\n","    \n","    open_ts = datetime.timestamp(latest_open_index)\n","    latest_open_index_1m = datetime.fromtimestamp(open_ts + a_day)\n","\n","    #   str Î°ú ÎßåÎì§Ïñ¥ Ï†ëÍ∑ºÌïòÎ©¥ Î∂àÍ∞ÄÌï®  #\n","    end_index = pd.to_datetime(str(df.index[-1]).split(\" \")[0] + \" 08:59:59.999000\")\n","    # break\n","\n","    sliced_df = df.loc[latest_open_index_1m:end_index] # to_lower_tf Ïùò Í∏∞Ï§Ä ltf\n","    sliced_second_df = second_df.loc[latest_open_index:end_index]\n","    sliced_third_df = third_df.loc[latest_open_index:end_index]\n","    sliced_fourth_df = fourth_df.loc[latest_open_index:end_index]\n","    sliced_fifth_df = fifth_df.loc[latest_open_index:end_index]\n","\n","    print(\"sliced index\")\n","    print(sliced_df.index[[0, -1]])\n","    print(sliced_second_df.index[[0, -1]])\n","    print(sliced_third_df.index[[0, -1]])\n","    print(sliced_fourth_df.index[[0, -1]])\n","    print(sliced_fifth_df.index[[0, -1]])\n","\n","    try:\n","      sliced_sixth_df = sixth_df.loc[latest_open_index:end_index]\n","      sliced_seventh_df = seventh_df.loc[latest_open_index:end_index]\n","\n","      print(sliced_sixth_df.index[[0, -1]])\n","      print(sliced_seventh_df.index[[0, -1]])\n","\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df, sliced_sixth_df, sliced_seventh_df)\n","    \n","    except:\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df)\n","\n","\n","\n","    res_df.to_excel(excel_path)\n","    print(excel_name, \"saved succesfully !\")"]},{"cell_type":"markdown","metadata":{"id":"Bw5JibDKSuzj"},"source":["### xlsx to feather"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":355},"id":"VA-_gcA7Suzj","outputId":"f6f3b55d-ec2c-4b2c-d62e-3de7c0384dc4"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"be2b848dbcb14a079a2b7bd605af6435","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/156 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["DatetimeIndex(['2021-06-28 00:00:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:02:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:04:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:14:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:29:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-09-14 03:59:59.999000', '2021-11-15 14:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-03-10 20:59:59.999000', '2021-11-15 16:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","\n","xlsx converted to feather !\n","DatetimeIndex(['2021-06-28 00:00:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:02:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:04:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:14:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:29:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-09-14 03:59:59.999000', '2021-11-15 14:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-03-10 20:59:59.999000', '2021-11-15 16:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","\n","xlsx converted to feather !\n"]}],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  # if '2021-07-01'.upper() not in file_list[i]:\n","  if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    feather_name = key.replace(\".xlsx\", \".ftr\")\n","    # feather_path = save_path + feather_name\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m ÎßàÏßÄÎßâ timeindex Ïùò date Í∏∞Ï§Ä, 08:59:59.999000 Î•º last timestamp Î°ú ÏÑ§Ï†ï\n","      #      2. ÏãúÏûë timestamp Îäî Î™®Îì† tf Ïùò Í∞ÄÏû• ÏµúÍ∑º ÏãúÏûë index,\n","      #       a. 1m Ïùò ÏãúÏûë timeindex Îäî ÏµúÏÜå, htf Ïùò ÏãúÏûë timeindex Î≥¥Îã§ interval ÎßåÌÅº ÏïûÏÑúÏïºÌï®\n","      #         i. Îî∞ÎùºÏÑú 1m open_index, latest_open_index + 1d Î•º ÌïòÎ©¥ Îåê\n","      #           1. timestamp ÏúºÎ°ú Î≥ÄÌôòÌõÑ 1day Î•º ÎçîÌïòÍ≥† datetime ÏúºÎ°ú Î≥ÄÌôò\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","\n","    df.reset_index().to_feather(date_path + feather_name, compression='lz4')\n","    second_df.reset_index().to_feather(date_path2 + feather_name, compression='lz4')\n","    third_df.reset_index().to_feather(date_path3 + feather_name, compression='lz4')\n","    fourth_df.reset_index().to_feather(date_path4 + feather_name, compression='lz4')\n","    fifth_df.reset_index().to_feather(date_path5 + feather_name, compression='lz4')\n","    sixth_df.reset_index().to_feather(date_path6 + feather_name, compression='lz4')\n","    seventh_df.reset_index().to_feather(date_path7 + feather_name, compression='lz4')\n","\n","    print(\"xlsx converted to feather !\")\n","    "]},{"cell_type":"markdown","metadata":{"id":"Pe0QpnORSuzk"},"source":["### add itv_name to ftr"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":223},"executionInfo":{"elapsed":43664,"status":"ok","timestamp":1638246331122,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"M-gl30KxSuzk","outputId":"1cfcb580-8d25-4bd0-fdd0-213640779ce2"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"e3225655da874b8d89cc8b2a381b3fb6","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/175 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 BTCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 BCHUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 XRPUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 EOSUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 LTCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ETCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 LINKUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 XLMUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ADAUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ETHUSDT_1m.ftr\n"]}],"source":["save_path = './candlestick_concated/res_df/'\n","\n","# dir_path = \"bbdc3m_backi2\"\n","# date = '2021-10-10'\n","date = '2021-07-01'\n","\n","db_path = './candlestick_concated/database_bn/non_cum/%s/' % date\n","os.makedirs(os.path.join(db_path), exist_ok=True)\n","\n","# exist_list = os.listdir(os.path.join(save_path, dir_path))\n","# break\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","        \n","    df = shutil.copy(date_path + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n","    second_df = shutil.copy(date_path2 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval2))\n","    third_df = shutil.copy(date_path3 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval3))\n","    fourth_df = shutil.copy(date_path4 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval4))\n","    fifth_df = shutil.copy(date_path5 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval5))\n","    sixth_df = shutil.copy(date_path6 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval6))\n","    seventh_df = shutil.copy(date_path7 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval7))\n","\n","    print(\"copied to\" + db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n"]},{"cell_type":"markdown","metadata":{"id":"4oZ1ohTtSuzk"},"source":["### feather ver."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"vgVHpnUsSuzk","outputId":"d5b68380-22d9-4ddd-b4c9-3efca2ef4a27"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"465133d6c5694a1ca7b7135eaaac8b1d","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/70 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["DatetimeIndex(['2020-09-05 00:00:59.999000', '2021-11-17 00:47:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:02:59.999000', '2021-11-17 00:53:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:04:59.999000', '2021-11-17 00:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:14:59.999000', '2021-11-17 01:14:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:29:59.999000', '2021-11-17 01:29:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 00:59:59.999000', '2021-11-17 01:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-17 04:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","\n","sliced index\n","DatetimeIndex(['2020-09-06 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:80: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:83: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:86: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"]},{"name":"stdout","output_type":"stream","text":["sar phase done\n","./candlestick_concated/res_df/sar2_backi2/noncat/cum/2021-11-17/2021-11-17 ETHUSDT.ftr saved succesfully !\n","DatetimeIndex(['2020-09-05 00:00:59.999000', '2021-11-17 00:47:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:02:59.999000', '2021-11-17 00:53:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:04:59.999000', '2021-11-17 00:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:14:59.999000', '2021-11-17 01:14:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:29:59.999000', '2021-11-17 01:29:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 00:59:59.999000', '2021-11-17 01:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-17 04:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","\n","sliced index\n","DatetimeIndex(['2020-09-06 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","sar phase done\n","./candlestick_concated/res_df/sar2_backi2/noncat/cum/2021-11-17/2021-11-17 BTCUSDT.ftr saved succesfully !\n","DatetimeIndex(['2020-09-05 00:00:59.999000', '2021-11-17 00:47:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:02:59.999000', '2021-11-17 00:53:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:04:59.999000', '2021-11-17 00:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:14:59.999000', '2021-11-17 01:14:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:29:59.999000', '2021-11-17 01:29:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 00:59:59.999000', '2021-11-17 01:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-17 04:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","\n","sliced index\n","DatetimeIndex(['2020-09-06 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n"]}],"source":["# db_path = './candlestick_concated/database_ub/'\n","db_path = './candlestick_concated/database_bn/'\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","save_dir_path = \"sar2_backi2\"\n","\n","date = '2021-11-17'\n","\n","data_path = os.path.join(db_path, \"cum\", date) \n","save_path = os.path.join(save_path, save_dir_path, 'noncat/cum', date)\n","os.makedirs(save_path, exist_ok=True)\n","\n","file_list = os.listdir(data_path)\n","exist_list = os.listdir(save_path)\n","# break\n","\n","interval = '1m'\n","interval2 = '3m'\n","interval3 = '5m'\n","interval4 = '15m'\n","interval5 = '30m'\n","interval6 = '1h'\n","interval7 = '4h'\n","interval8 = '1d'\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","\n","    if \"_1m\" not in key:\n","      continue\n","\n","    # feather_name = key.replace(\".ftr\", \"_%.ftr\" % save_dir_path)\n","    feather_name = key.replace(\"_1m\", \"\")\n","    feather_path = os.path.join(save_path, feather_name)\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    end_indexes = []\n","    \n","    df = pd.read_feather(os.path.join(data_path, key), columns=None, use_threads=True).set_index(\"index\")\n","    second_df = pd.read_feather(os.path.join(data_path, key.replace(interval, interval2)), columns=None, use_threads=True).set_index(\"index\")\n","    third_df = pd.read_feather(os.path.join(data_path, key.replace(interval, interval3)), columns=None, use_threads=True).set_index(\"index\")\n","    fourth_df = pd.read_feather(os.path.join(data_path, key.replace(interval, interval4)), columns=None, use_threads=True).set_index(\"index\")\n","    fifth_df = pd.read_feather(os.path.join(data_path, key.replace(interval, interval5)), columns=None, use_threads=True).set_index(\"index\")\n","        \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    end_indexes.append(df.index[-1])\n","    end_indexes.append(second_df.index[-1])\n","    end_indexes.append(third_df.index[-1])\n","    end_indexes.append(fourth_df.index[-1])\n","    end_indexes.append(fifth_df.index[-1])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m ÎßàÏßÄÎßâ timeindex Ïùò date Í∏∞Ï§Ä, 08:59:59.999000 Î•º last timestamp Î°ú ÏÑ§Ï†ï\n","      #      2. ÏãúÏûë timestamp Îäî Î™®Îì† tf Ïùò Í∞ÄÏû• ÏµúÍ∑º ÏãúÏûë index,\n","      #       a. 1m Ïùò ÏãúÏûë timeindex Îäî ÏµúÏÜå, htf Ïùò ÏãúÏûë timeindex Î≥¥Îã§ interval ÎßåÌÅº ÏïûÏÑúÏïºÌï®\n","      #         i. Îî∞ÎùºÏÑú 1m open_index, latest_open_index + 1d Î•º ÌïòÎ©¥ Îåê\n","      #           1. timestamp ÏúºÎ°ú Î≥ÄÌôòÌõÑ 1day Î•º ÎçîÌïòÍ≥† datetime ÏúºÎ°ú Î≥ÄÌôò\n","      sixth_df = pd.read_feather(os.path.join(data_path, key.replace(interval, interval6)), columns=None, use_threads=True).set_index(\"index\")\n","      seventh_df = pd.read_feather(os.path.join(data_path, key.replace(interval, interval7)), columns=None, use_threads=True).set_index(\"index\")\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","      end_indexes.append(sixth_df.index[-1])\n","      end_indexes.append(seventh_df.index[-1])\n","\n","    except Exception as e:\n","      print(e)\n","\n","    latest_open_index = sorted(open_indexes)[-1]\n","    recent_end_index = sorted(end_indexes)[0]\n","    \n","    open_ts = datetime.timestamp(latest_open_index)\n","    latest_open_index_1m = datetime.fromtimestamp(open_ts + a_day)\n","\n","    end_ts = datetime.timestamp(recent_end_index)\n","    recent_end_index_1m = datetime.fromtimestamp(end_ts - a_day)\n","\n","    #   str Î°ú ÎßåÎì§Ïñ¥ Ï†ëÍ∑ºÌïòÎ©¥ Î∂àÍ∞ÄÌï®  #\n","    #   latest_open_index_1m ÏùÄ latest_open_index Î≥¥Îã§ ÌÅ¨Í∏∞Îßå ÌïòÎ©¥ Îê®   # (9:00:00 ÍµêÏ≤¥ ÌïÑÏöîÏóÜÏù¥)\n","    if \"999000\" in str(df.index[-1]):\n","      # end_index = pd.to_datetime(str(df.index[-1]).split(\" \")[0] + \" 08:59:59.999000\")\n","      end_index = pd.to_datetime(str(recent_end_index_1m).split(\" \")[0] + \" 08:59:59.999000\")\n","    else:\n","      # end_index = pd.to_datetime(str(df.index[-1]).split(\" \")[0] + \" 09:00:00\")\n","      end_index = pd.to_datetime(str(recent_end_index_1m).split(\" \")[0] + \" 09:00:00\")\n","      # end_index = pd.to_datetime(\"2021-11-15\" + \" 09:00:00\")\n","\n","    #   ***** 1m open_idx Îäî htf Î≥¥Îã§ Ïª§ÏïºÌï® --> to_lower_tf Î•º ÏÇ¨Ïö©ÌïòÍ∏∞ ÏúÑÌï®ÏûÑ   #\n","    sliced_df = df.loc[latest_open_index_1m:end_index] # to_lower_tf Ïùò Í∏∞Ï§Ä ltf\n","\n","    sliced_second_df = second_df.loc[latest_open_index:end_index]\n","    sliced_third_df = third_df.loc[latest_open_index:end_index]\n","    sliced_fourth_df = fourth_df.loc[latest_open_index:end_index]\n","    sliced_fifth_df = fifth_df.loc[latest_open_index:end_index]\n","\n","    print(\"sliced index\")\n","    print(sliced_df.index[[0, -1]])\n","    print(sliced_second_df.index[[0, -1]])\n","    print(sliced_third_df.index[[0, -1]])\n","    print(sliced_fourth_df.index[[0, -1]])\n","    print(sliced_fifth_df.index[[0, -1]])\n","\n","    try:\n","      sliced_sixth_df = sixth_df.loc[latest_open_index:end_index]\n","      sliced_seventh_df = seventh_df.loc[latest_open_index:end_index]\n","\n","      print(sliced_sixth_df.index[[0, -1]])\n","      print(sliced_seventh_df.index[[0, -1]])\n","\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df, sliced_sixth_df, sliced_seventh_df)\n","    \n","    except:\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df)\n","\n","\n","\n","    # res_df.to_feather(feather_path)\n","    res_df.reset_index().to_feather(feather_path, compression='lz4')\n","    print(feather_path, \"saved succesfully !\")"]},{"cell_type":"markdown","metadata":{"id":"jTN3M842Suzl"},"source":["## concat & save new res_df"]},{"cell_type":"markdown","metadata":{"id":"MlFkpO1MSuzl"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"U-3QkfbFSuzl"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","dict_name = \"2021-07-01 ETHUSDT_bb15m_backi2_res_dfs.pkl\"\n","\n","#     load with pickle    #\n","with open(save_path + dict_name, 'rb') as f:\n","  saved_res_df_dict = pickle.load(f)\n","\n","print(dict_name, \"loaded !\")\n","res_df_files = os.listdir(save_path)\n","res_df_files.reverse()\n","\n","print(res_df_files)\n","\n","res_df_dict = {}\n","\n","base_postfix = '_bb15m_backi2.xlsx'\n","new_postfix = '_st1h_backi2.xlsx'\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for k_i, key in enumerate(res_df_files):\n","\n","  if '2021-07-01'.upper() not in key:\n","  # if '2021-10-10'.upper() not in key:\n","    continue\n","\n","  # if \"link\".upper() not in key:\n","  # if \"btc\".upper() not in key:\n","  #   continue\n","\n","  if new_postfix not in key:\n","    continue\n","\n","  # if key in \n","\n","  if sample_cnt == max_cnt:\n","    dict_name = \"%s_res_dfs.pkl\" % key.split(\".\")[0]\n","    print(\"dict_name :\", dict_name)\n","\n","  base_df = saved_res_df_dict[key.replace(new_postfix, base_postfix)]\n","  # base_df = pd.read_excel(save_path + key.replace(new_postfix, base_postfix), index_col=0)  \n","  res_df = pd.read_excel(save_path + key, index_col=0)  \n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  droped_new_res_df.head()\n","  # break\n","\n","  # res_df_dict[key] = res_df\n","  res_df_dict[key] = droped_new_res_df\n","  print(key, \"saved to dict !\")\n","\n","  #     save with pickle    #\n","  with open(save_path + dict_name, 'wb') as f:\n","    pickle.dump(res_df_dict, f)\n","\n","  sample_cnt -= 1\n","\n","  if sample_cnt <= 0:\n","    break\n"]},{"cell_type":"markdown","metadata":{"id":"t1E_eAyPSuzm"},"source":["### new col to latest feather (1m_indi. only)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xyI5NrM7Suzm"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","cum_dir = \"cum\"\n","\n","new_dir_path = \"rsi_backi2\"\n","base_dir_path = \"bbdc3m_backi2\"\n","\n","new_date = '2021-11-17'\n","\n","\n","\n","#     load ftr list    #\n","base_save_path = os.path.join(save_path, base_dir_path, \"concat/cum\", new_date)\n","new_save_path = base_save_path.replace(base_dir_path, new_dir_path)\n","\n","#     save to (new) cum dir    #\n","#      1. if dir. not exists, makedir\n","os.makedirs(new_save_path, exist_ok=True)\n","\n","ftr_list = [s for s in os.listdir(base_save_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_save_path, key), columns=None, use_threads=True).set_index(\"index\")\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  droped_new_res_df = sync_check(base_df)\n","\n","  # new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # # new_res_df.head()\n","\n","  # intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  # droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break\n","\n","  droped_new_res_df.reset_index().to_feather(os.path.join(new_save_path, key), compression='lz4')\n","\n","  print(os.path.join(new_save_path, key), \"saved !\")\n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"markdown","metadata":{"id":"nUs4fjVHSuzl"},"source":["### feather ver. (col concat)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":20739,"status":"ok","timestamp":1640781341331,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"6cu-Y82iSuzl","outputId":"23c07b95-bf94-462c-e915-7f00810353b5"},"outputs":[{"name":"stdout","output_type":"stream","text":["['2021-11-17 ETHUSDT.ftr', '2021-11-17 BTCUSDT.ftr', '2021-11-17 ETCUSDT.ftr']\n","./candlestick_concated/res_df/sar2_backi2/concat/cum/2021-11-17/2021-11-17 ETHUSDT.ftr saved !\n","./candlestick_concated/res_df/sar2_backi2/concat/cum/2021-11-17/2021-11-17 BTCUSDT.ftr saved !\n","./candlestick_concated/res_df/sar2_backi2/concat/cum/2021-11-17/2021-11-17 ETCUSDT.ftr saved !\n"]}],"source":["new_dir_path = \"sar2_backi2\"\n","base_dir_path = \"cci_backi2\"\n","\n","# new_date = \"2021-07-01\"\n","new_date = \"2021-11-17\"\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","save_path = './candlestick_concated/res_df/'\n","save_path = os.path.join(save_path, new_dir_path, \"concat/cum\", new_date)\n","os.makedirs(save_path, exist_ok=True)\n","\n","\n","#     load ftr list    #\n","# ftr_list = [s for s in os.listdir(os.path.join(save_path, new_dir_path)) if \"ftr\" in s]\n","\n","noncat_path = save_path.replace(\"concat/\", \"noncat/\")\n","ftr_list = [s for s in os.listdir(noncat_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(save_path.replace(new_dir_path, base_dir_path), key), columns=None, use_threads=True).set_index(\"index\")\n","  res_df = pd.read_feather(os.path.join(noncat_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break\n","\n","  droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","  # res_df_dict[key] = res_df\n","  # res_df_dict[key] = droped_new_res_df\n","  print(os.path.join(save_path, key), \"saved !\")\n","  \n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":454,"status":"ok","timestamp":1640781345898,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"4GiF2NJPSuzm","outputId":"7c7d3818-14d4-400f-a2f7-475fa21d3063"},"outputs":[{"data":{"text/plain":["Index(['dc_upper_1m', 'dc_lower_1m', 'dc_base_1m', 'dc_upper_3m', 'dc_lower_3m', 'dc_base_3m', 'dc_upper_5m', 'dc_lower_5m', 'dc_base_5m', 'dc_upper_15m', 'dc_lower_15m', 'dc_base_15m', 'dc_upper_30m', 'dc_lower_30m', 'dc_base_30m', 'dc_upper_1h', 'dc_lower_1h', 'dc_base_1h', 'dc_upper_4h', 'dc_lower_4h', 'dc_base_4h', 'bb_upper_1m', 'bb_lower_1m', 'bb_upper_3m', 'bb_lower_3m', 'bb_upper_5m', 'bb_lower_5m', 'bb_upper_15m', 'bb_lower_15m', 'bb_upper_30m', 'bb_lower_30m', 'bb_upper_1h', 'bb_lower_1h', 'bb_upper_4h', 'bb_lower_4h', 'rsi_1m', 'rsi_5m', 'ema_5m', 'cci_1m', 'open', 'high', 'low', 'close', 'volume', 'sar_3m', 'sar_uptrend_3m', 'sar_5m', 'sar_uptrend_5m', 'sar_15m', 'sar_uptrend_15m'], dtype='object')"]},"execution_count":4,"metadata":{},"output_type":"execute_result"}],"source":["droped_new_res_df.columns"]},{"cell_type":"markdown","metadata":{"id":"WVAKq3i8Suzm"},"source":["### feather ver. (row concat) , database cum ÎèÑ Ìò∏ÌôòÍ∞ÄÎä•"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XG2p9OhhSuzm"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","save_path = './candlestick_concated/database_bn/'\n","\n","new_date = '2021-11-17'\n","# base_date = '2021-10-10'\n","base_date = '2021-07-01'\n","\n","#     load ftr list    #\n","if \"database\" in save_path:\n","  dir_path = \"\"\n","  concat_dir = \"\"\n","else:\n","  dir_path = \"bbdc3m_backi2\"\n","  concat_dir = \"concat\"\n","\n","# base_date_path = os.path.join(save_path, dir_path, concat_dir, \"cum\", base_date)    # --> base ÎèÑ non_cum Í∞ÄÎä•Ìï®\n","base_date_path = os.path.join(save_path, dir_path, concat_dir, \"non_cum\", base_date)    # --> base ÎèÑ non_cum Í∞ÄÎä•Ìï®\n","# new_date_path = os.path.join(save_path, dir_path, concat_dir, \"non_cum\", new_date)\n","new_date_path = os.path.join(save_path, dir_path, concat_dir, \"cum\", new_date)    # --> cum Í∞ÄÎä•Ìï®\n","  \n","\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","save_path = new_date_path.replace(\"non_cum\", \"cum\")\n","os.makedirs(save_path, exist_ok=True)   # noncat / concat ÎëêÍ∞ÄÏßÄ Í≤ΩÏö∞ Ï°¥Ïû¨Í∞ÄÎä•Ìï† Í≤É\n","# os.makedirs(os.path.join(save_path, dir_path, \"noncat/cum\", new_date), exist_ok=True)\n","\n","\n","ftr_list = [s for s in os.listdir(new_date_path) if \"ftr\" in s]\n","exist_list = os.listdir(save_path)\n","print(ftr_list)\n","# break\n","\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","  # if key in exist_list:\n","  #   print(key, \"already exist !\")\n","  #   continue\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_date_path, key.replace(new_date, base_date)), columns=None, use_threads=True).set_index(\"index\")\n","  res_df = pd.read_feather(os.path.join(new_date_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break\n","  \n","  interval = key.split(\".\")[0].split(\"_\")[-1] \n","  itv_num = to_itvnum(interval)\n","\n","  # verified_df = consecutive_df(droped_new_res_df, to_itvnum(interval))\n","\n","  # verified_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","  # res_df_dict[key] = res_df\n","  # res_df_dict[key] = droped_new_res_df\n","  \n","  print(droped_new_res_df.iloc[[0, -1]])\n","\n","  np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","  ideal_ts_gap = 60 * itv_num\n","\n","  for ts_i in range(len(np_idx_ts)):\n","    \n","    if ts_i != 0:\n","      ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","\n","      if ts_gap > ideal_ts_gap or ts_gap < ideal_ts_gap:\n","      # if ts_gap == ideal_ts_gap:\n","        print(droped_new_res_df.index[ts_i - 1])\n","        print(droped_new_res_df.index[ts_i])\n","        # print(ts_gap)\n","        print(\"-------------------- unideal ts_gap --------------------\")\n","\n","  droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","  print(os.path.join(save_path, key), \"saved !\")\n","  \n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"markdown","metadata":{"id":"L7l5CTJfSuzn"},"source":["### check continuity"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2412,"status":"ok","timestamp":1640781357243,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"nGzMGyC3Suzn","outputId":"8867353a-59f8-475a-bc4f-326da4bb4e5d"},"outputs":[{"name":"stdout","output_type":"stream","text":["                         dc_upper_1m  dc_lower_1m  dc_base_1m  dc_upper_3m  dc_lower_3m  dc_base_3m  dc_upper_5m  dc_lower_5m  dc_base_5m  dc_upper_15m  dc_lower_15m  dc_base_15m  dc_upper_30m  dc_lower_30m  dc_base_30m  dc_upper_1h  dc_lower_1h  dc_base_1h  dc_upper_4h  dc_lower_4h  dc_base_4h  bb_upper_1m  bb_lower_1m  bb_upper_3m  bb_lower_3m  bb_upper_5m  bb_lower_5m  bb_upper_15m  bb_lower_15m  bb_upper_30m  bb_lower_30m  bb_upper_1h  bb_lower_1h  bb_upper_4h  bb_lower_4h     rsi_1m     rsi_5m     ema_5m      cci_1m    open    high     low   close   volume     sar_3m  sar_uptrend_3m     sar_5m  sar_uptrend_5m    sar_15m  sar_uptrend_15m\n","indexn","2020-09-06 04:59:59.999          NaN          NaN         NaN        5.034        4.824       4.929        5.066        4.824       4.945         5.286         4.824        5.055         5.286         4.824        5.055        5.418        4.847      5.1325          NaN          NaN         NaN          NaN          NaN     4.947881     4.851019     5.013865     4.873635      5.217982      4.976818      5.229521      5.026779     5.333309     5.116591          NaN          NaN        NaN  37.362911   5.149668         NaN   4.898   4.918   4.896   4.911  5890.23   4.977421           False   4.824960            True   5.166939            False\n","2021-11-16 08:59:59.999        55.01       54.735     54.8725       55.149       54.741      54.945       55.149       54.555      54.852        55.285        54.205       54.745        56.353        54.205       55.279       56.634       54.205     55.4195       56.933         53.7     55.3165    54.995519    54.879381    55.056293    54.898407    55.071791    54.818409     55.099366     54.797334     55.514173     54.812127    56.180214    55.162286    56.046519    55.180481  41.796641  50.365261  55.351019 -203.887438  54.771  54.850  54.764  54.849  1217.71  54.746353            True  55.129004           False  55.181733            False\n","[1.59936840e+09 1.59936846e+09 1.59936852e+09 1.59936858e+09\n"," 1.59936864e+09 1.59936870e+09 1.59936876e+09 1.59936882e+09\n"," 1.59936888e+09 1.59936894e+09]\n"]}],"source":["# print(droped_new_res_df.columns)\n","\n","print(droped_new_res_df.iloc[[0, -1]])\n","\n","np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","\n","print(np_idx_ts[:10])\n","for ts_i in range(len(np_idx_ts)):\n","  \n","  if ts_i != 0:\n","    ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","\n","    if ts_gap > 60 or ts_gap < 60:\n","    # if ts_gap == 60:\n","      print(droped_new_res_df.index[ts_i - 1])\n","      print(droped_new_res_df.index[ts_i])\n","      # print(ts_gap)\n","      print()\n"]},{"cell_type":"markdown","metadata":{"id":"qNGeuYuGDXfv"},"source":["# pr check with strategy"]},{"cell_type":"markdown","metadata":{"id":"6HOjnZjSgzk1"},"source":["## load ftr_list"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1641046964968,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"7FPBG5Qqg2jB","outputId":"facfac25-a46b-4fea-c1e3-69de56bcc943"},"outputs":[{"output_type":"stream","name":"stdout","text":["['2021-11-17 ETHUSDT.ftr', '2021-11-17 BTCUSDT.ftr', '2021-11-17 ETCUSDT.ftr']\n"]}],"source":["save_path = './candlestick_concated/res_df/'\n","\n","dir_path = \"sar2_backi2\"\n","\n","date = \"2021-11-17\"\n","\n","ftr_path = os.path.join(save_path, dir_path, \"concat/cum\", date)\n","\n","#     load ftr list    #\n","ftr_list = [s for s in os.listdir(ftr_path) if \"ftr\" in s if date in s]\n","# ftr_list = [s for s in os.listdir(os.path.join(save_path, dir_path)) if \"ftr\" in s if date in s]\n","print(ftr_list)"]},{"cell_type":"markdown","metadata":{"id":"5duWn8t4BRyv"},"source":["## hvp platform"]},{"cell_type":"markdown","metadata":{"id":"wmnyUTS-yjF1"},"source":["##### config"]},{"cell_type":"markdown","metadata":{"id":"JjKHyqftzhD7"},"source":["###### set config (override available)"]},{"cell_type":"code","execution_count":21,"metadata":{"executionInfo":{"elapsed":334,"status":"ok","timestamp":1641044812537,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"q_4E-zH02WJy"},"outputs":[],"source":["#     caution : MARKET / LIMIT spelling   #\n","#      json doesn't support single quotes     #\n","\n","param_dict = \\\n","{\n","  \"strat_version\": \"v7_3\",\n","  \"trader_set\": {\n","    \"run\": 1,\n","    \"df_log\": 0,\n","    \"last_index\": -2,\n","    \"limit_fee\": 0.0002,\n","    \"market_fee\": 0.0004,\n","    \"initial_asset\": 3000,\n","    \"asset_changed\": 1,\n","    \"symbol\": \"ETHUSDT\",\n","    \"symbol_changed\": 0,\n","    \"interval_list\": [\n","      \"1m\",\n","      \"5m\",\n","      \"15m\"\n","    ],\n","    \"row_list\": [\n","      200,\n","      100,\n","      100\n","    ],\n","    \"bar_close_second\": 59,\n","    \"realtime_term\": 0.01,\n","    \"api_retry_term\": 3,\n","    \"check_entry_sec\": 10,\n","    \"entry_execution_wait\": 60,\n","    \"breakout_qty_ratio\": 0.97,\n","    \"qty_check_term\": 30,\n","    \"exit_execution_wait\": 60,\n","    \"close_complete_term\": 5,\n","    \"save_stacked_df\": 0,\n","    \"stacked_df_exist\": 1\n","  },\n","  \"pos_set\": {\n","    \"short_inversion\": 0,\n","    \"long_inversion\": 0,\n","    \"short_ban\": 1,\n","    \"long_ban\": 0\n","  },\n","  \"loc_set\": {\n","    \"zone\": {\n","      \"dtk_itv\": \"5m\",\n","      \"short_spread\": \"None\",\n","      \"long_spread\": \"None\",\n","      \"tr_thresh\": \"None\",\n","      \"dtk_dc_itv\": \"None\",\n","      \"dt_k\": \"None\",\n","      \"dc_period\": 135,\n","      \"ei_k\": -0.0,\n","      \"use_dtk_line\": 0,\n","      \"zone_rejection\": 1,\n","      \"gap_mply\": 1,\n","      \"c_itv_ticks\": 60,\n","      \"ad_idx\": 19,\n","      \"bbz_itv\": \"15m\",\n","      \"zone_dt_k\": 0.4,\n","      \"zone_dc_period\": 135,\n","      \"dr_error\": 0.1,\n","      \"bbwp_thresh\": 0.5,\n","      \"entry_incycle\": 5,\n","      \"max_eplim_pct\": 0.05,\n","      \"min_eplim_pct\": 0.013\n","    },\n","    \"point\": {\n","      \"exp_itv\": \"1m\",\n","      \"tpg_itv\": \"5m\",\n","      \"outg_itv\": \"5m\",\n","      \"outg_dc_period\": \"None\",\n","      \"tf_entry\": 1,\n","      \"htf_entry\": 15,\n","      \"candle_ratio\": 80,\n","      \"candle_ratio2\": \"None\",\n","      \"osc_band\": 20\n","    }\n","  },\n","  \"tr_set\": {\n","    \"ep_gap\": 0.0,\n","    \"tp_gap\": 0.0,\n","    \"out_gap\": 0.5,\n","    \"c_ep_gap\": \"None\",\n","    \"t_out_gap\": -0.0\n","  },\n","  \"ep_set\": {\n","    \"short_entry_score\": -2,\n","    \"entry_type\": \"LIMIT\",\n","    \"static_ep\": 1,\n","    \"tpout_onexec\": 0\n","  },\n","  \"tp_set\": {\n","    \"non_tp\": 0,\n","    \"tp_type\": \"MARKET\",\n","    \"static_tp\": 1,\n","    \"time_tp\": 0,\n","    \"partial_num\": 1,\n","    \"partial_qty_divider\": 1.5\n","  },\n","  \"out_set\": {\n","    \"out_type\": \"MARKET\",\n","    \"use_out\": 1,\n","    \"static_out\": 1,\n","    \"hl_out\": 1,\n","    \"price_restoration\": 0,\n","    \"retouch\": 0,\n","    \"retouch_out_period\": 500,\n","    \"second_out\": 0,\n","    \"approval_st_gap\": 1.5,\n","    \"second_out_gap\": 0.5\n","  },\n","  \"lvrg_set\": {\n","    \"leverage\": 10,\n","    \"static_lvrg\": 1,\n","    \"allow_float\": 0,\n","    \"target_pct\": 0.1,\n","    \"lvrg_rejection\": 0\n","  }\n","}\n","\n","config1 = EasyDict(param_dict)\n","# param_json = json.dumps(param_dict, indent=2)"]},{"cell_type":"markdown","metadata":{"id":"dzla8i9_ysmP"},"source":["###### save config"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":544,"status":"ok","timestamp":1639994748940,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"FlNGKvW_w2za","outputId":"c575ce69-def0-4e6c-c949-a63707467b2e"},"outputs":[{"name":"stdout","output_type":"stream","text":["/content/drive/My Drive/Colab Notebooks/JnQ/config/config_v5_2.1220_candlejson dumped !\n"]}],"source":["config_name = \"config_v5_2.1220_candlejson\"\n","# config_name = \"config_v3.json\"\n","cfg_full_path = os.path.join(current_path, \"config\", config_name)\n","\n","\n","with open(cfg_full_path, 'w') as cfg:\n","    json.dump(config1, cfg, indent=2)\n","    print(\"{} dumped !\".format(cfg_full_path))"]},{"cell_type":"markdown","metadata":{"id":"vOVr2jLczFQJ"},"source":["###### load config"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1641046966469,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"uPpMThtZzGtZ","outputId":"60921547-d153-474f-d5f1-e256db7a821b"},"outputs":[{"output_type":"stream","name":"stdout","text":["v3\n","v5_2\n","v7_3\n"]}],"source":["config1_name = \"config_v3_1231_v7_3.json\"\n","config2_name = \"config_v5_2_1231_v7_3.json\"\n","config3_name = \"config_v7_3_1231_v7_3.json\"\n","cfg_full_path1 = os.path.join(current_path, \"config\", config1_name)\n","cfg_full_path2 = os.path.join(current_path, \"config\", config2_name)\n","cfg_full_path3 = os.path.join(current_path, \"config\", config3_name)\n","\n","with open(cfg_full_path1, 'r') as cfg:\n","    config1 = EasyDict(json.load(cfg))\n","with open(cfg_full_path2, 'r') as cfg:\n","    config2 = EasyDict(json.load(cfg))\n","with open(cfg_full_path3, 'r') as cfg:\n","    config3 = EasyDict(json.load(cfg))\n","  \n","print(config1.strat_version)\n","print(config2.strat_version)\n","print(config3.strat_version)"]},{"cell_type":"markdown","metadata":{"id":"rrIGjmUzqU-D"},"source":["##### utils override"]},{"cell_type":"markdown","metadata":{"id":"leSQlImg4_9L"},"source":["###### utils_"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CB2yZdQ95Cdg"},"outputs":[],"source":["\n","def enlist_rtc(res_df, config):\n","\n","    strat_version = config.strat_version\n","\n","    # res_df['short_rtc_1_{}'.format(strat_version)] = res_df['bb_lower_%s' % config.loc_set.point.tpg_itv]\n","    res_df['short_rtc_1_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.point.tpg_itv]\n","    res_df['short_rtc_0_{}'.format(strat_version)] = res_df['dc_upper_%s' % config.loc_set.point.outg_itv]\n","\n","    # res_df['long_rtc_1_{}'.format(strat_version)] = res_df['bb_upper_%s' % config.loc_set.point.tpg_itv]\n","    res_df['long_rtc_1_{}'.format(strat_version)] = res_df['dc_upper_%s' % config.loc_set.point.tpg_itv]\n","    res_df['long_rtc_0_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.point.outg_itv]\n","    \n","    #      entry reversion    #\n","    if config.ep_set.short_entry_score > 0:      \n","      short_rtc_1_copy = res_df['short_rtc_1_{}'.format(strat_version)].copy()\n","      res_df['short_rtc_1_{}'.format(strat_version)] = res_df['long_rtc_1_{}'.format(strat_version)]\n","      res_df['long_rtc_1_{}'.format(strat_version)] = short_rtc_1_copy\n","\n","      short_rtc_0_copy = res_df['short_rtc_0_{}'.format(strat_version)].copy()\n","      res_df['short_rtc_0_{}'.format(strat_version)] = res_df['long_rtc_0_{}'.format(strat_version)]\n","      res_df['long_rtc_0_{}'.format(strat_version)] = short_rtc_0_copy\n","\n","    res_df['short_rtc_gap_{}'.format(strat_version)] = abs(res_df['short_rtc_0_{}'.format(strat_version)] - res_df['short_rtc_1_{}'.format(strat_version)])\n","    res_df['long_rtc_gap_{}'.format(strat_version)] = abs(res_df['long_rtc_1_{}'.format(strat_version)] - res_df['long_rtc_0_{}'.format(strat_version)])\n","\n","    res_df['h_short_rtc_1_{}'.format(strat_version)] = res_df['bb_lower_%s' % config.loc_set.point.tpg_itv]\n","    # res_df['h_short_rtc_1_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.point.tpg_itv]\n","    res_df['h_short_rtc_0_{}'.format(strat_version)] = res_df['dc_upper_%s' % config.loc_set.point.tpg_itv]\n","\n","    res_df['h_long_rtc_1_{}'.format(strat_version)] = res_df['bb_upper_%s' % config.loc_set.point.tpg_itv]\n","    # res_df['h_long_rtc_1_{}'.format(strat_version)] = res_df['dc_upper_%s' % config.loc_set.point.tpg_itv]\n","    res_df['h_long_rtc_0_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.point.tpg_itv]\n","\n","    #      entry reversion    #\n","    if config.ep_set.short_entry_score > 0:      \n","      h_short_rtc_1_copy = res_df['h_short_rtc_1_{}'.format(strat_version)].copy()\n","      res_df['h_short_rtc_1_{}'.format(strat_version)] = res_df['h_long_rtc_1_{}'.format(strat_version)]\n","      res_df['h_long_rtc_1_{}'.format(strat_version)] = h_short_rtc_1_copy\n","\n","      h_short_rtc_0_copy = res_df['h_short_rtc_0_{}'.format(strat_version)].copy()\n","      res_df['h_short_rtc_0_{}'.format(strat_version)] = res_df['h_long_rtc_0_{}'.format(strat_version)]\n","      res_df['h_long_rtc_0_{}'.format(strat_version)] = h_short_rtc_0_copy\n","\n","    res_df['h_short_rtc_gap_{}'.format(strat_version)] = abs(res_df['h_short_rtc_0_{}'.format(strat_version)] - res_df['h_short_rtc_1_{}'.format(strat_version)])\n","    res_df['h_long_rtc_gap_{}'.format(strat_version)] = abs(res_df['h_long_rtc_1_{}'.format(strat_version)] - res_df['h_long_rtc_0_{}'.format(strat_version)])   \n","\n","    res_df['short_dtk_1_{}'.format(strat_version)] = res_df['bb_lower_%s' % config.loc_set.zone.dtk_itv]\n","    res_df['short_dtk_0_{}'.format(strat_version)] = res_df['dc_upper_%s' % config.loc_set.zone.dtk_itv]\n","    res_df['short_dtk_gap_{}'.format(strat_version)] = res_df['short_dtk_0_{}'.format(strat_version)] - res_df['short_dtk_1_{}'.format(strat_version)]\n","\n","    res_df['long_dtk_1_{}'.format(strat_version)] = res_df['bb_upper_%s' % config.loc_set.zone.dtk_itv]\n","    res_df['long_dtk_0_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.zone.dtk_itv]\n","    res_df['long_dtk_gap_{}'.format(strat_version)] = res_df['long_dtk_1_{}'.format(strat_version)] - res_df['long_dtk_0_{}'.format(strat_version)]\n","\n","    return res_df\n","\n","\n","def enlist_tr(res_df, config, np_timeidx):\n","\n","    strat_version = config.strat_version\n","\n","    res_df['entry_{}'.format(strat_version)] = np.zeros(len(res_df))\n","    res_df['h_entry_{}'.format(strat_version)] = np.zeros(len(res_df))\n","\n","    # -------- set ep level -------- #\n","\n","    #       limit ver.     #\n","    # res_df['short_ep_{}'.format(strat_version)] = res_df['h_short_rtc_1_{}'.format(strat_version)] + res_df['h_short_rtc_gap_{}'.format(strat_version)] * config.tr_set.ep_gap\n","    # res_df['long_ep_{}'.format(strat_version)] = res_df['h_long_rtc_1_{}'.format(strat_version)] - res_df['h_long_rtc_gap_{}'.format(strat_version)] * config.tr_set.ep_gap\n","\n","    res_df['short_ep_{}'.format(strat_version)] = res_df['close'] #+ res_df['h_short_rtc_gap'] * config.tr_set.ep_gap\n","    res_df['long_ep_{}'.format(strat_version)] = res_df['close'] #- res_df['h_long_rtc_gap'] * config.tr_set.ep_gap\n","\n","\n","    if config.tr_set.c_ep_gap != \"None\":\n","        res_df['short_ep_org_{}'.format(strat_version)] = res_df['short_ep_{}'.format(strat_version)].copy()\n","        res_df['long_ep_org_{}'.format(strat_version)] = res_df['long_ep_{}'.format(strat_version)].copy()\n","\n","        res_df['short_ep2_{}'.format(strat_version)] = res_df['h_short_rtc_1_{}'.format(strat_version)] + res_df['h_short_rtc_gap_{}'.format(strat_version)] * config.tr_set.c_ep_gap\n","        res_df['long_ep2_{}'.format(strat_version)] = res_df['h_long_rtc_1_{}'.format(strat_version)] - res_df['h_long_rtc_gap_{}'.format(strat_version)] * config.tr_set.c_ep_gap\n","\n","    res_df['short_spread_ep_{}'.format(strat_version)] = res_df['bb_lower_5m'] #+ res_df['h_short_rtc_gap'] * config.loc_set.zone.spread_ep_gap\n","    res_df['long_spread_ep_{}'.format(strat_version)] = res_df['bb_upper_5m']  #- res_df['h_long_rtc_gap'] * config.loc_set.zone.spread_ep_gap\n","\n","    #       market ver.     #\n","    if config.ep_set.entry_type == \"MARKET\":\n","        res_df['short_ep_{}'.format(strat_version)] = res_df['close']\n","        res_df['long_ep_{}'.format(strat_version)] = res_df['close']\n","\n","    # ---------------------------------------- short = -1 ---------------------------------------- #\n","    # ---------------- ep_time  ---------------- #\n","\n","    # cci_upper = 150\n","    # cci_lower = -150\n","    cci_upper = config.loc_set.point.osc_band\n","    cci_lower = -config.loc_set.point.osc_band\n","\n","    res_df['cci_%s_shift' % config.loc_set.point.exp_itv] = res_df['cci_%s' % config.loc_set.point.exp_itv].shift(config.loc_set.point.tf_entry)\n","\n","    res_df['entry_{}'.format(strat_version)] = np.where((res_df['cci_%s_shift' % config.loc_set.point.exp_itv] >= cci_upper) &\n","                              (res_df['cci_%s' % config.loc_set.point.exp_itv] < cci_upper)\n","                              , res_df['entry_{}'.format(strat_version)] - 1, res_df['entry_{}'.format(strat_version)])\n","\n","    res_df['entry_{}'.format(strat_version)] = np.where((res_df['entry_{}'.format(strat_version)] < 0) &\n","                              (np_timeidx % config.loc_set.point.tf_entry == (config.loc_set.point.tf_entry - 1))\n","                              , res_df['entry_{}'.format(strat_version)] - 1, res_df['entry_{}'.format(strat_version)])\n","    \n","    res_df['h_entry_{}'.format(strat_version)] = np.where(  # (res_df['open'] >= res_df['bb_lower_%s' % config.loc_set.zone.dtk_itv]) &\n","        (res_df['close'].shift(config.loc_set.point.htf_entry * 1) >= res_df['bb_lower_%s' % config.loc_set.zone.dtk_itv]) &\n","        (res_df['close'] < res_df['bb_lower_%s' % config.loc_set.zone.dtk_itv]) &\n","        (np_timeidx % config.loc_set.point.htf_entry == (config.loc_set.point.htf_entry - 1))\n","        , res_df['h_entry_{}'.format(strat_version)] - 1, res_df['h_entry_{}'.format(strat_version)])\n","\n","    # ---------------------------------------- long = 1 ---------------------------------------- #\n","    # ---------------------- ep_time ---------------------- #\n","\n","    res_df['entry_{}'.format(strat_version)] = np.where((res_df['cci_%s_shift' % config.loc_set.point.exp_itv] <= cci_lower) &\n","                              (res_df['cci_%s' % config.loc_set.point.exp_itv] > cci_lower)\n","                              , res_df['entry_{}'.format(strat_version)] + 1, res_df['entry_{}'.format(strat_version)])\n","\n","    res_df['entry_{}'.format(strat_version)] = np.where((res_df['entry_{}'.format(strat_version)] > 0) &\n","                              (np_timeidx % config.loc_set.point.tf_entry == (config.loc_set.point.tf_entry - 1))\n","                              , res_df['entry_{}'.format(strat_version)] + 1, res_df['entry_{}'.format(strat_version)])\n","      \n","    res_df['h_entry_{}'.format(strat_version)] = np.where(  # (res_df['open'] <= res_df['bb_upper_%s' % config.loc_set.zone.dtk_itv]) &\n","        (res_df['close'].shift(config.loc_set.point.htf_entry * 1) <= res_df['bb_upper_%s' % config.loc_set.zone.dtk_itv]) &\n","        (res_df['close'] > res_df['bb_upper_%s' % config.loc_set.zone.dtk_itv]) &\n","        (np_timeidx % config.loc_set.point.htf_entry == (config.loc_set.point.htf_entry - 1))\n","        , res_df['h_entry_{}'.format(strat_version)] + 1, res_df['h_entry_{}'.format(strat_version)])\n","\n","    # ------------------------------ rtc tp & out ------------------------------ #\n","    # --------------- bb rtc out --------------- #\n","\n","    if config.loc_set.point.outg_dc_period != \"None\":\n","        res_df['short_rtc_0_{}'.format(strat_version)] = res_df['high'].rolling(config.loc_set.point.outg_dc_period).max()\n","        res_df['long_rtc_0_{}'.format(strat_version)] = res_df['low'].rolling(config.loc_set.point.outg_dc_period).min()\n","\n","    # res_df['short_out_{}'.format(strat_version)] = res_df['short_rtc_0_{}'.format(strat_version)] + res_df['short_rtc_gap_{}'.format(strat_version)] * config.tr_set.out_gap\n","    # res_df['long_out_{}'.format(strat_version)] = res_df['long_rtc_0_{}'.format(strat_version)] - res_df['long_rtc_gap_{}'.format(strat_version)] * config.tr_set.out_gap\n","    \n","    res_df['short_out_{}'.format(strat_version)] = res_df['short_ep_{}'.format(strat_version)] + res_df['short_rtc_gap_{}'.format(strat_version)] * config.tr_set.out_gap\n","    res_df['long_out_{}'.format(strat_version)] = res_df['long_ep_{}'.format(strat_version)] - res_df['long_rtc_gap_{}'.format(strat_version)] * config.tr_set.out_gap\n","\n","    if config.tr_set.t_out_gap != \"None\":\n","        res_df['short_out_org_{}'.format(strat_version)] = res_df['short_out_{}'.format(strat_version)].copy()\n","        res_df['long_out_org_{}'.format(strat_version)] = res_df['long_out_{}'.format(strat_version)].copy()\n","\n","        res_df['short_out2_{}'.format(strat_version)] = res_df['short_rtc_0_{}'.format(strat_version)] + res_df['short_rtc_gap_{}'.format(strat_version)] * config.tr_set.t_out_gap\n","        res_df['long_out2_{}'.format(strat_version)] = res_df['long_rtc_0_{}'.format(strat_version)] - res_df['long_rtc_gap_{}'.format(strat_version)] * config.tr_set.t_out_gap\n","\n","    # ------------------------------ tp ------------------------------ #\n","    # --------------- bb rtc tp --------------- #\n","    res_df['short_tp_{}'.format(strat_version)] = res_df['h_short_rtc_1_{}'.format(strat_version)] - res_df['h_short_rtc_gap_{}'.format(strat_version)] * config.tr_set.tp_gap\n","    res_df['long_tp_{}'.format(strat_version)] = res_df['h_long_rtc_1_{}'.format(strat_version)] + res_df['h_long_rtc_gap_{}'.format(strat_version)] * config.tr_set.tp_gap\n","\n","    # --------------- set tp_line / dtk_line --------------- #\n","    # res_df['short_tp_1_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == -1, res_df['short_rtc_1_{}'.format(strat_version)], np.nan)\n","    # res_df['short_tp_1_{}'.format(strat_version)] = ffill(res_df['short_tp_1_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","    # res_df['short_tp_gap_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == -1, res_df['h_short_rtc_gap_{}'.format(strat_version)], np.nan)  # ltf_gap ÏùÄ out ÏùÑ ÏúÑÌïú gap ÏûÑ\n","    # res_df['short_tp_gap_{}'.format(strat_version)] = ffill(res_df['short_tp_gap_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","\n","    # res_df['long_tp_1_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == 1, res_df['long_rtc_1_{}'.format(strat_version)], np.nan)\n","    # res_df['long_tp_1_{}'.format(strat_version)] = ffill(res_df['long_tp_1_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","    # res_df['long_tp_gap_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == 1, res_df['h_long_rtc_gap_{}'.format(strat_version)], np.nan)\n","    # res_df['long_tp_gap_{}'.format(strat_version)] = ffill(res_df['long_tp_gap_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","\n","    # res_df['h_short_tp_1_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == -1, res_df['h_short_rtc_1_{}'.format(strat_version)], np.nan)\n","    # res_df['h_short_tp_1_{}'.format(strat_version)] = ffill(res_df['h_short_tp_1_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","    # res_df['h_short_tp_gap_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == -1, res_df['h_short_rtc_gap_{}'.format(strat_version)], np.nan)\n","    # res_df['h_short_tp_gap_{}'.format(strat_version)] = ffill(res_df['h_short_tp_gap_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","\n","    # res_df['h_long_tp_1_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == 1, res_df['h_long_rtc_1_{}'.format(strat_version)], np.nan)\n","    # res_df['h_long_tp_1_{}'.format(strat_version)] = ffill(res_df['h_long_tp_1_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","    # res_df['h_long_tp_gap_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == 1, res_df['h_long_rtc_gap_{}'.format(strat_version)], np.nan)\n","    # res_df['h_long_tp_gap_{}'.format(strat_version)] = ffill(res_df['h_long_tp_gap_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","   \n","\n","    if config.loc_set.zone.use_dtk_line:\n","      res_df['short_dtk_1_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == -1, res_df['short_dtk_1_{}'.format(strat_version)], np.nan)\n","      res_df['short_dtk_1_{}'.format(strat_version)] = ffill(res_df['short_dtk_1_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","      res_df['short_dtk_gap_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == -1, res_df['short_dtk_gap_{}'.format(strat_version)], np.nan)\n","      res_df['short_dtk_gap_{}'.format(strat_version)] = ffill(res_df['short_dtk_gap_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","\n","      res_df['long_dtk_1_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == 1, res_df['long_dtk_1_{}'.format(strat_version)], np.nan)\n","      res_df['long_dtk_1_{}'.format(strat_version)] = ffill(res_df['long_dtk_1_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","      res_df['long_dtk_gap_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == 1, res_df['long_dtk_gap_{}'.format(strat_version)], np.nan)\n","      res_df['long_dtk_gap_{}'.format(strat_version)] = ffill(res_df['long_dtk_gap_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","\n","    res_df['dc_upper_v2_{}'.format(strat_version)] = res_df['high'].rolling(config.loc_set.zone.dc_period).max()\n","    res_df['dc_lower_v2_{}'.format(strat_version)] = res_df['low'].rolling(config.loc_set.zone.dc_period).min()\n","    \n","    res_df['zone_dc_upper_v2_{}'.format(strat_version)] = res_df['high'].rolling(config.loc_set.zone.zone_dc_period).max()\n","    res_df['zone_dc_lower_v2_{}'.format(strat_version)] = res_df['low'].rolling(config.loc_set.zone.zone_dc_period).min()\n","\n","    return res_df\n"]},{"cell_type":"markdown","metadata":{"id":"o5psPOVOCA1c"},"source":["###### utils_ override"]},{"cell_type":"code","execution_count":25,"metadata":{"executionInfo":{"elapsed":435,"status":"ok","timestamp":1641046404233,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"5q1V5vTjQszK"},"outputs":[],"source":["enlist_rtc = utils2.enlist_rtc\n","# enlist_rtc = enlist_rtc\n","enlist_tr = utils2.enlist_tr"]},{"cell_type":"markdown","metadata":{"id":"HKdUKKl-483N"},"source":["###### utils_public"]},{"cell_type":"code","execution_count":29,"metadata":{"executionInfo":{"elapsed":3725,"status":"ok","timestamp":1641046780262,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"nzOYWA2kqZ0d"},"outputs":[],"source":["\n","class OrderSide:\n","    BUY = \"BUY\"\n","    SELL = \"SELL\"\n","    INVALID = None\n","\n","\n","def lvrg_set(res_df, config, open_side, ep_, out_, fee, limit_leverage=50):\n","\n","    strat_version = config.strat_version\n","\n","    if open_side == OrderSide.SELL:\n","\n","        if strat_version in [\"v3\"]:\n","            # config.lvrg_set.leverage = config.lvrg_set.target_pct / (out_ / ep_ - 1 - (fee + config.trader_set.market_fee))\n","            config.lvrg_set.leverage = config.lvrg_set.target_pct / (\n","                        out_ / ep_ - 1 - (fee + config.trader_set.market_fee))\n","\n","            #     zone Ïóê Îî∞Î•∏ c_ep_gap Î•º Í≥†Î†§ (loss ÏôÑÌôî Î∞©Ìñ•) / Ïúó Ï§ÑÏùÄ ÏàòÏùµ Í∑πÎåÄÌôî Î∞©Ìñ•\n","            # config.lvrg_set.leverage = config.lvrg_set.target_pct / (out_ / res_df['short_ep_org'].iloc[ep_j] - 1 - (fee + config.trader_set.market_fee))\n","\n","        elif strat_version in [\"v5_2\", \"v7_3\"]:\n","            # config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(ep_ / out_ - 1 - (fee + config.trader_set.market_fee))\n","            config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(\n","                ep_ / out_ - 1 - (fee + config.trader_set.market_fee))\n","            # config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(res_df['short_ep_org'].iloc[ep_j] / out_ - 1 - (fee + config.trader_set.market_fee))\n","\n","    else:\n","        #   Ïúó phase Îäî min_pr Ïùò Ïò§Ï∞®Í∞Ä Ïª§Ïßê\n","        if strat_version in [\"v3\"]:\n","            # config.lvrg_set.leverage = config.lvrg_set.target_pct / (ep_ / out_ - 1 - (fee + config.trader_set.market_fee))\n","            config.lvrg_set.leverage = config.lvrg_set.target_pct / (\n","                        ep_ / out_ - 1 - (fee + config.trader_set.market_fee))\n","            # config.lvrg_set.leverage = config.lvrg_set.target_pct / (res_df['long_ep_org'].iloc[ep_j] / out_ - 1 - (fee + config.trader_set.market_fee))\n","\n","        elif strat_version in [\"v5_2\", \"v7_3\"]:\n","            # config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(out_ / ep_ - 1 - (fee + config.trader_set.market_fee))\n","            config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(\n","                out_ / ep_ - 1 - (fee + config.trader_set.market_fee))\n","            # config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(out_ / res_df['long_ep_org'].iloc[ep_j] - 1 - (fee + config.trader_set.market_fee))\n","\n","    if not config.lvrg_set.allow_float:\n","        config.lvrg_set.leverage = int(config.lvrg_set.leverage)\n","\n","    # -------------- leverage rejection -------------- #\n","    if config.lvrg_set.leverage < 1 and config.lvrg_set.lvrg_rejection:\n","        return None\n","\n","    config.lvrg_set.leverage = max(config.lvrg_set.leverage, 1)\n","\n","    config.lvrg_set.leverage = min(limit_leverage, config.lvrg_set.leverage)\n","\n","    return config.lvrg_set.leverage\n","\n","\n","def public_indi(res_df):\n","\n","    res_df = bb_level(res_df, '5m', 1)\n","    res_df = dc_level(res_df, '5m', 1)\n","    res_df = bb_level(res_df, '15m', 1)\n","    res_df = dc_level(res_df, '15m', 1)\n","    # res_df = bb_level(res_df, '30m', 1)\n","    # res_df = dc_level(res_df, '30m', 1)\n","\n","    res_df[\"candle_ratio\"] = candle_ratio(res_df)\n","\n","    start_0 = time.time()\n","\n","    h_c_intv1 = 15\n","    h_c_intv2 = 60\n","    res_df = h_candle(res_df, h_c_intv1)\n","    res_df = h_candle(res_df, h_c_intv2)\n","    h_candle_col = ['hopen_{}'.format(h_c_intv2), 'hhigh_{}'.format(h_c_intv2), 'hlow_{}'.format(h_c_intv2), 'hclose_{}'.format(h_c_intv2)]\n","\n","    res_df['h_candle_ratio'] = candle_ratio(res_df, ohlc_col=h_candle_col, unsigned=0)\n","\n","    print(\"~ h_candle_ratio elapsed time :\", time.time() - start_0)\n","\n","    #     temp indi.    #\n","    # res_df[\"ma30_1m\"] = res_df['close'].rolling(30).mean()\n","    # res_df[\"ma60_1m\"] = res_df['close'].rolling(60).mean()\n","    # res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line)\n","\n","    print(\"~ dtk_plot elapsed time :\", time.time() - start_0)\n","\n","    return res_df\n","\n","\n","def short_ep_loc(res_df, config, i, np_timeidx, show_detail=True):\n","\n","    strat_version = config.strat_version\n","\n","    # ------- param init ------- #\n","    open_side = None\n","\n","    mr_const_cnt = 0\n","    mr_score = 0\n","    zone = 'n'\n","\n","    if config.ep_set.entry_type == 'MARKET':\n","        if config.tp_set.tp_type != 'MARKET':\n","            tp_fee = config.trader_set.market_fee + config.trader_set.limit_fee\n","        else:\n","            tp_fee = config.trader_set.market_fee + config.trader_set.market_fee\n","        out_fee = config.trader_set.market_fee + config.trader_set.market_fee\n","    else:\n","        if config.tp_set.tp_type != 'MARKET':\n","            tp_fee = config.trader_set.limit_fee + config.trader_set.limit_fee\n","        else:\n","            tp_fee = config.trader_set.limit_fee + config.trader_set.market_fee\n","        out_fee = config.trader_set.limit_fee + config.trader_set.market_fee\n","\n","\n","    # -------------- candle_ratio -------------- #\n","    # if config.loc_set.zone.c_itv_ticks != \"None\":\n","    if config.loc_set.point.candle_ratio != \"None\":\n","\n","      # -------------- candle_ratio_v0 (1m initial tick Í∏∞Ï§ÄÏûÑ)  -------------- #\n","      if strat_version in ['v5_2']:\n","        mr_const_cnt += 1\n","        if res_df['candle_ratio'].iloc[i] >= config.loc_set.point.candle_ratio:      \n","          mr_score += 1\n","\n","      # -------------- candle_ratio_v1 (previous)  -------------- #\n","      if strat_version in ['v7_3']:\n","        mr_const_cnt += 1\n","        prev_hclose_idx = i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)\n","        if res_df['h_candle_ratio'].iloc[prev_hclose_idx] <= -config.loc_set.point.candle_ratio:\n","          mr_score += 1\n","\n","    if config.loc_set.point.candle_ratio2 != \"None\":\n","\n","        #     candle_ratio_v2 (current)     #\n","      mr_const_cnt += 1\n","      prev_hclose_idx = i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)\n","      hc_res_df = res_df.iloc[prev_hclose_idx + 1:i + 1].copy()\n","      ho = hc_res_df['open'].iloc[0]\n","      hh = hc_res_df['high'].max()\n","      hl = hc_res_df['low'].min()\n","      hc = hc_res_df['close'].iloc[-1]\n","      # score = candle_score(ho, hh, hl, hc, updown='down', unsigned=False)\n","      score = candle_score(ho, hh, hl, ho, updown=None, unsigned=False)\n","      if score <= -config.loc_set.point.candle_ratio2:\n","        mr_score += 1\n","\n","    \n","    # # -------------- tr scheduling -------------- #\n","    # if config.loc_set.zone.tr_thresh != \"None\":\n","\n","    #   mr_const_cnt += 1\n","    #   tr = ((done_tp - ep_list[0] - tp_fee * ep_list[0]) / (ep_list[0] - done_out + out_fee * ep_list[0]))\n","\n","    # -------------- spread scheduling -------------- #\n","    if config.loc_set.zone.short_spread != \"None\":\n","\n","        mr_const_cnt += 1\n","\n","        spread = (res_df['bb_base_5m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] - tp_fee * res_df['bb_base_5m'].iloc[\n","            # spread = (res_df['bb_base_5m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] - out_fee * res_df['bb_base_5m'].iloc[\n","            # i]) / (res_df['bb_base_5m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] + tp_fee *\n","            i]) / (res_df['bb_base_5m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] + out_fee *\n","                  res_df['bb_base_5m'].iloc[i])\n","        # spread = (res_df['bb_base_15m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] - tp_fee * res_df['bb_base_15m'].iloc[\n","        #     i]) / (res_df['bb_base_15m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] + out_fee *\n","        #             res_df['bb_base_15m'].iloc[i])\n","\n","        # spread = (res_df['dc_upper_5m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] - tp_fee * res_df['bb_lower_5m'].iloc[\n","        #     i]) / (res_df['dc_upper_5m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] + out_fee *\n","        #             res_df['bb_lower_5m'].iloc[i])\n","        # spread = (res_df['short_rtc_gap'].iloc[i] * (0.443) - tp_fee * res_df['short_ep'].iloc[\n","        #     i]) / (res_df['short_rtc_gap'].iloc[i] * (0.417) + out_fee * res_df['short_ep'].iloc[i])\n","\n","        # spread = (res_df['dc_upper_15m'].iloc[i] - res_df['dc_lower_5m'].iloc[i] - tp_fee * res_df['dc_lower_5m'].iloc[\n","        #     i]) / (res_df['dc_upper_15m'].iloc[i] - res_df['dc_lower_5m'].iloc[i] + out_fee *\n","        #             res_df['dc_lower_5m'].iloc[i])\n","        # spread = ((res_df['dc_upper_15m'].iloc[i] - res_df['dc_lower_5m'].iloc[i])/2 - tp_fee * res_df['dc_lower_5m'].iloc[\n","        #     i]) / ((res_df['dc_upper_15m'].iloc[i] - res_df['dc_lower_5m'].iloc[i])/2 + out_fee *\n","        #             res_df['dc_lower_5m'].iloc[i])\n","\n","        if spread >= config.loc_set.zone.short_spread:\n","            mr_score += 1\n","\n","        if show_detail:\n","            print(\"spread :\", spread)\n","\n","    # -------------- dtk -------------- #\n","    if config.loc_set.zone.dt_k != \"None\":\n","\n","        mr_const_cnt += 1\n","        # if res_df['dc_lower_%s' % config.loc_set.zone.dtk_dc_itv].iloc[i] >= res_df['short_rtc_1'].iloc[i] - res_df['h_short_rtc_gap'].iloc[i] * config.loc_set.zone.dt_k:\n","        #     dtk_v1 & v2 platform     #\n","        if config.loc_set.zone.dtk_dc_itv != \"None\":\n","            dc = res_df['dc_lower_%s' % config.loc_set.zone.dtk_dc_itv].iloc[i]\n","            dt_k = res_df['short_dtk_1_{}'.format(strat_version)].iloc[i] - \\\n","                  res_df['short_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k\n","            if dc >= dt_k:\n","                mr_score += 1\n","\n","                #     dc_v2   #\n","        else:\n","            dc = res_df['dc_lower_v2_{}'.format(strat_version)].iloc[i]\n","            dt_k = res_df['short_dtk_1_{}'.format(strat_version)].iloc[i] - \\\n","                  res_df['short_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k\n","            if dc >= dt_k:\n","                # if res_df['dc_lower_v2_{}'.format(strat_version)].iloc[i] >= res_df['short_dtk_1_{}'.format(strat_version)].iloc[i] - res_df['short_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k and \\\n","                # res_df['dc_upper_v2_{}'.format(strat_version)].iloc[i] <= res_df['long_dtk_1_{}'.format(strat_version)].iloc[i] + res_df['long_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k:\n","                mr_score += 1\n","\n","        if show_detail:\n","            print(\"dc :\", dc)\n","            print(\"dt_k :\", dt_k)\n","            \n","      # -------------- candle_dt_k -------------- #\n","    # mr_const_cnt += 1\n","    # # if res_df['dc_lower_1m'].iloc[i] >= res_df['hclose_60'].iloc[i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)]:\n","    # if res_df['dc_lower_1m'].iloc[i] >= res_df['hlow_60'].iloc[i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)]:\n","    #   mr_score += 1        \n","\n","    # mr_const_cnt += 1\n","    # if res_df['dc_upper_1m'].iloc[i] <= res_df['hhigh_60'].iloc[i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)]:\n","    # # if res_df['dc_upper_1m'].iloc[i] <= res_df['hopen_60'].iloc[i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)]:\n","    #   mr_score += 1  \n","\n","\n","    # -------------- zone rejection  -------------- #\n","    if config.loc_set.zone.zone_rejection:\n","\n","        #       config Î°ú ÌÜµÏ†úÌï† Ïàò ÏóÜÎäî rejection ÏùÄ strat_version ÏúºÎ°ú Ï°∞Í±¥Î¨∏ÏùÑ ÎÇòÎàî (lvrg_set Í≥º ÎèôÏùº)\n","\n","        # --------- by bb --------- # \n","\n","          #     bb & close   #\n","        if strat_version in [\"v5_2\"]:\n","          mr_const_cnt += 1\n","          # if res_df['close'].iloc[i] < res_df['bb_lower_%s' % config.loc_set.zone.bbz_itv].iloc[i]:   # org\n","          # if res_df['close'].iloc[i] > res_df['bb_lower_%s' % config.loc_set.zone.bbz_itv].iloc[i]:  # inv\n","          # if res_df['close'].iloc[i] > res_df['bb_upper_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","          if res_df['close'].iloc[i] > res_df['bb_upper2_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","          # if res_df['close'].iloc[i] > res_df['bb_upper3_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","            mr_score += 1\n","\n","          #     bb & bb   #           \n","        if strat_version in [\"v7_3\"]:\n","\n","          mr_const_cnt += 1\n","          if res_df['bb_upper_5m'].iloc[i] < res_df['bb_base_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","          # if res_df['bb_upper_1m'].iloc[i] < res_df['bb_lower_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","            mr_score += 1\n","\n","            #     bb & ep   #\n","          mr_const_cnt += 1\n","          # if res_df['short_ep_{}'.format(strat_version)].iloc[i] < res_df['bb_base_15m'].iloc[i]:\n","          # if res_df['short_ep_{}'.format(strat_version)].iloc[i] < res_df['bb_base_15m'].iloc[i] + res_df['bb_gap_15m'].iloc[i]:\n","          # if res_df['short_ep_{}'.format(strat_version)].iloc[i] < res_df['bb_base_5m'].iloc[i]:\n","          if res_df['short_ep_{}'.format(strat_version)].iloc[i] < res_df['bb_upper_5m'].iloc[i]:\n","              mr_score += 1\n","\n","            #     bb & dc   #\n","          mr_const_cnt += 1\n","          # if res_df['bb_base_%s' % config.loc_set.zone.bbz_itv].iloc[i] <= res_df['dc_upper_1m'].iloc[i] <= res_df['bb_upper_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","          \n","          prev_hopen_idx = i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1 + config.loc_set.zone.c_itv_ticks) + config.loc_set.zone.ad_idx\n","          # if res_df['dc_upper_5m'].iloc[prev_hopen_idx] < res_df['bb_upper_15m'].iloc[i]:\n","          if res_df['dc_upper_5m'].iloc[prev_hopen_idx] < res_df['bb_upper_15m'].iloc[prev_hopen_idx]:\n","            mr_score += 1\n","\n","          # --------- by ema --------- # \n","\n","          #    bb & ema   #\n","        if strat_version in [\"v7_3\"]:\n","          mr_const_cnt += 1\n","          if res_df['dc_upper_5m'].iloc[i] < res_df['ema_5m'].iloc[i]:\n","          # if res_df['bb_upper_15m'].iloc[i] < res_df['ema_5m'].iloc[i]:\n","            mr_score += 1\n","\n","          #    close & ema   #\n","        if strat_version in [\"v5_2\"]:\n","          mr_const_cnt += 1\n","          # if res_df['short_ep'].iloc[i] < res_df['ema_5m'].iloc[i]:\n","          if res_df['close'].iloc[i] < res_df['ema_5m'].iloc[i]:\n","              mr_score += 1\n","\n","\n","        # --------- by dc --------- # \n","        \n","          #     descending dc    #\n","        # mr_const_cnt += 1\n","        # if res_df['dc_lower_5m'].iloc[i] <= res_df['dc_lower_5m'].iloc[i - 50 : i].min():\n","        #   mr_score += 1\n","\n","        # --------- by candle --------- #\n","        # mr_const_cnt += 1\n","        # if res_df['short_ep_{}'.format(strat_version)].iloc[i] <= res_df['hclose_60'].iloc[i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)]:\n","        #     mr_score += 1\n","\n","        # --------- by macd --------- #\n","        # mr_const_cnt += 1\n","        # if res_df['ma30_1m'].iloc[i] < res_df['ma60_1m'].iloc[i]:\n","        #     mr_score += 1\n","\n","\n","        # --------- by zone_dtk --------- #\n","        # mr_const_cnt += 1\n","        # if res_df['zone_dc_upper_v2_{}'.format(strat_version)].iloc[i] < res_df['long_dtk_plot_1'].iloc[i] + res_df['long_dtk_plot_gap'].iloc[\n","        #     i] * config.loc_set.zone.zone_dt_k:\n","        #   mr_score += 1\n","\n","    # -------------- zoned tr_set - post_Work -------------- #\n","    if config.tr_set.c_ep_gap != \"None\":\n","\n","        #       by bb       # \n","        # if res_df['close'].iloc[i] > res_df['bb_lower_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","\n","        #       by zone_dtk       #\n","\n","        #         c_zone        #\n","        if res_df['zone_dc_upper_v2_{}'.format(strat_version)].iloc[i] > res_df['long_dtk_plot_1'].iloc[i] + \\\n","                res_df['long_dtk_plot_gap'].iloc[\n","                    i] * config.loc_set.zone.zone_dt_k:\n","\n","            if config.ep_set.static_ep:\n","                res_df['short_ep_{}'.format(strat_version)].iloc[i] = res_df['short_ep2_{}'.format(strat_version)].iloc[\n","                    i]\n","            else:\n","                res_df['short_ep_{}'.format(strat_version)] = res_df['short_ep2_{}'.format(strat_version)]\n","\n","            if config.out_set.static_out:\n","                res_df['short_out_{}'.format(strat_version)].iloc[i] = \\\n","                res_df['short_out_org_{}'.format(strat_version)].iloc[i]\n","            else:\n","                res_df['short_out_{}'.format(strat_version)] = res_df['short_out_org_{}'.format(strat_version)]\n","\n","            zone = 'c'\n","\n","        #         t_zone        #\n","        else:\n","\n","            # mr_const_cnt += 1   # zone_rejection - temporary\n","\n","            if config.ep_set.static_ep:\n","                res_df['short_ep_{}'.format(strat_version)].iloc[i] = \\\n","                res_df['short_ep_org_{}'.format(strat_version)].iloc[i]\n","            else:\n","                res_df['short_ep_{}'.format(strat_version)] = res_df['short_ep_org_{}'.format(strat_version)]\n","\n","            if config.out_set.static_out:\n","                res_df['short_out_{}'.format(strat_version)].iloc[i] = \\\n","                res_df['short_out2_{}'.format(strat_version)].iloc[i]\n","            else:\n","                res_df['short_out_{}'.format(strat_version)] = res_df['short_out2_{}'.format(strat_version)]\n","\n","            zone = 't'\n","\n","    if mr_const_cnt == mr_score:\n","        open_side = OrderSide.SELL\n","\n","    return res_df, open_side, zone\n","\n","\n","def long_ep_loc(res_df, config, i, np_timeidx, show_detail=True):\n","\n","    strat_version = config.strat_version\n","\n","    # ------- param init ------- #\n","    open_side = None\n","\n","    mr_const_cnt = 0\n","    mr_score = 0\n","    zone = 'n'\n","\n","    if config.ep_set.entry_type == 'MARKET':\n","        if config.tp_set.tp_type != 'MARKET':\n","            tp_fee = config.trader_set.market_fee + config.trader_set.limit_fee\n","        else:\n","            tp_fee = config.trader_set.market_fee + config.trader_set.market_fee\n","        out_fee = config.trader_set.market_fee + config.trader_set.market_fee\n","    else:\n","        if config.tp_set.tp_type != 'MARKET':\n","            tp_fee = config.trader_set.limit_fee + config.trader_set.limit_fee\n","        else:\n","            tp_fee = config.trader_set.limit_fee + config.trader_set.market_fee\n","        out_fee = config.trader_set.limit_fee + config.trader_set.market_fee\n","\n","\n","    # -------------- candle_ratio -------------- #\n","    # if config.loc_set.zone.c_itv_ticks != \"None\":\n","    if config.loc_set.point.candle_ratio != \"None\":\n","\n","      # -------------- candle_ratio_v0 (1m initial tick Í∏∞Ï§ÄÏûÑ)  -------------- #\n","      if strat_version in ['v5_2']:\n","        mr_const_cnt += 1\n","        if res_df['candle_ratio'].iloc[i] >= config.loc_set.point.candle_ratio:\n","          mr_score += 1\n","\n","      # -------------- candle_ratio_v1 (previous)  -------------- #\n","      if strat_version in ['v7_3']:\n","        mr_const_cnt += 1\n","        prev_hclose_idx = i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)\n","        if res_df['h_candle_ratio'].iloc[prev_hclose_idx] >= config.loc_set.point.candle_ratio:\n","          mr_score += 1\n","\n","    if config.loc_set.point.candle_ratio2 != \"None\":\n","\n","      #     candle_ratio_v2 (current)     #\n","      mr_const_cnt += 1\n","      prev_hclose_idx = i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)\n","      hc_res_df = res_df.iloc[prev_hclose_idx + 1:i + 1].copy()\n","      ho = hc_res_df['open'].iloc[0]\n","      hc = hc_res_df['close'].iloc[-1]\n","      hh = hc_res_df['high'].max()\n","      hl = hc_res_df['low'].min()\n","      # score = candle_score(ho, hh, hl, hc, updown='up', unsigned=False)\n","      score = candle_score(ho, hh, hl, ho, updown=None, unsigned=False)\n","      if score >= config.loc_set.point.candle_ratio2:\n","        mr_score += 1\n","\n","    # -------------- spread scheduling -------------- #\n","    if config.loc_set.zone.long_spread != \"None\":\n","\n","        mr_const_cnt += 1\n","\n","        # spread = (res_df['bb_upper_5m'].iloc[i] - res_df['bb_base_5m'].iloc[i] - tp_fee * res_df['bb_base_5m'].iloc[\n","        #     i]) / (res_df['bb_base_5m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] + out_fee *\n","        #             res_df['bb_base_5m'].iloc[i])\n","        # spread = (res_df['bb_upper_5m'].iloc[i] - res_df['bb_base_15m'].iloc[i] - tp_fee * res_df['bb_base_15m'].iloc[\n","        #     i]) / (res_df['bb_upper_5m'].iloc[i] - res_df['bb_base_15m'].iloc[i] + out_fee *\n","        #             res_df['bb_base_15m'].iloc[i])\n","\n","        spread = (res_df['bb_upper_5m'].iloc[i] - res_df['dc_lower_5m'].iloc[i] - tp_fee * res_df['bb_upper_5m'].iloc[\n","            # spread = (res_df['bb_upper_5m'].iloc[i] - res_df['dc_lower_5m'].iloc[i] - out_fee * res_df['bb_upper_5m'].iloc[\n","            # i]) / (res_df['bb_upper_5m'].iloc[i] - res_df['dc_lower_5m'].iloc[i] + tp_fee *\n","            i]) / (res_df['bb_upper_5m'].iloc[i] - res_df['dc_lower_5m'].iloc[i] + out_fee *\n","                  res_df['bb_upper_5m'].iloc[i])\n","        # spread = (res_df['long_rtc_gap'].iloc[i] * (0.443) - tp_fee * res_df['long_ep'].iloc[\n","        #     i]) / (res_df['long_rtc_gap'].iloc[i] * (0.417) + out_fee * res_df['long_ep'].iloc[i])\n","\n","        # spread = (res_df['dc_upper_5m'].iloc[i] - res_df['dc_lower_15m'].iloc[i] - tp_fee * res_df['dc_upper_5m'].iloc[\n","        #     i]) / (res_df['dc_upper_5m'].iloc[i] - res_df['dc_lower_15m'].iloc[i] + out_fee *\n","        #             res_df['dc_upper_5m'].iloc[i])\n","        # spread = ((res_df['dc_upper_5m'].iloc[i] - res_df['dc_lower_15m'].iloc[i])/2 - tp_fee * res_df['dc_upper_5m'].iloc[\n","        #     i]) / ((res_df['dc_upper_5m'].iloc[i] - res_df['dc_lower_15m'].iloc[i])/2 + out_fee *\n","        #             res_df['dc_upper_5m'].iloc[i])\n","\n","        if spread >= config.loc_set.zone.long_spread:\n","            mr_score += 1\n","\n","        if show_detail:\n","            print(\"spread :\", spread)\n","\n","    # -------------- dtk -------------- #\n","    if config.loc_set.zone.dt_k != \"None\":\n","\n","        mr_const_cnt += 1\n","        # if res_df['dc_upper_%s' % config.loc_set.zone.dtk_dc_itv].iloc[i] <= res_df['long_rtc_1'].iloc[i] + res_df['long_rtc_gap'].iloc[i] * config.loc_set.zone.dt_k:\n","        #     dtk_v1 & v2 platform    #\n","        if config.loc_set.zone.dtk_dc_itv != \"None\":\n","            dc = res_df['dc_upper_%s' % config.loc_set.zone.dtk_dc_itv].iloc[i]\n","            dt_k = res_df['long_dtk_1_{}'.format(strat_version)].iloc[i] + \\\n","                  res_df['long_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k\n","            if dc <= dt_k:\n","                mr_score += 1\n","\n","        else:\n","            #     dc_v2     #\n","            dc = res_df['dc_upper_v2_{}'.format(strat_version)].iloc[i]\n","            dt_k = res_df['long_dtk_1_{}'.format(strat_version)].iloc[i] + \\\n","                  res_df['long_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k\n","            if dc <= dt_k:\n","                # if res_df['dc_upper_v2_{}'.format(strat_version)].iloc[i] >= res_df['long_dtk_1_{}'.format(strat_version)].iloc[i] + res_df['long_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k:\n","\n","                # if res_df['dc_upper_v2_{}'.format(strat_version)].iloc[i] <= res_df['long_dtk_1_{}'.format(strat_version)].iloc[i] + res_df['long_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k and \\\n","                #   res_df['dc_lower_v2_{}'.format(strat_version)].iloc[i] >= res_df['short_dtk_1_{}'.format(strat_version)].iloc[i] - res_df['short_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k:\n","\n","                mr_score += 1\n","\n","        if show_detail:\n","            print(\"dc :\", dc)\n","            print(\"dt_k :\", dt_k)\n","\n","      # -------------- candle_dt_k -------------- #\n","    # mr_const_cnt += 1\n","    # # if res_df['dc_upper_1m'].iloc[i] <= res_df['hclose_60'].iloc[i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)]:\n","    # if res_df['dc_upper_1m'].iloc[i] <= res_df['hhigh_60'].iloc[i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)]:\n","    #   mr_score += 1  \n","\n","    # mr_const_cnt += 1\n","    # if res_df['dc_lower_1m'].iloc[i] >= res_df['hlow_60'].iloc[i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)]:\n","    # # if res_df['dc_lower_1m'].iloc[i] >= res_df['hopen_60'].iloc[i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)]:\n","    #   mr_score += 1  \n","\n","    # -------------- zone rejection  -------------- #\n","    if config.loc_set.zone.zone_rejection:\n","\n","        # --------- by bb --------- #    \n","        \n","          #     bb & close   #\n","        if strat_version in [\"v5_2\"]:\n","\n","          mr_const_cnt += 1\n","          # if res_df['close'].iloc[i] > res_df['bb_upper_%s' % config.loc_set.zone.bbz_itv].iloc[i]:    # org\n","          # if res_df['close'].iloc[i] < res_df['bb_upper_%s' % config.loc_set.zone.bbz_itv].iloc[i]:  # inv\n","          # if res_df['close'].iloc[i] < res_df['bb_lower_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","          if res_df['close'].iloc[i] < res_df['bb_lower2_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","          # if res_df['close'].iloc[i] < res_df['bb_lower3_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","              mr_score += 1\n","\n","          #     bb & bb   #\n","        if strat_version in [\"v7_3\"]:\n","\n","          mr_const_cnt += 1\n","          if  res_df['bb_lower_5m'].iloc[i] > res_df['bb_base_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","          # if res_df['bb_lower_1m'].iloc[i] > res_df['bb_upper_%s' % config.loc_set.zone.bbz_itv].iloc[i]:            \n","              mr_score += 1        \n","\n","            #     bb & ep   #\n","          mr_const_cnt += 1\n","          # if res_df['long_ep_{}'.format(strat_version)].iloc[i] > res_df['bb_base_15m'].iloc[i]:\n","          # if res_df['long_ep_{}'.format(strat_version)].iloc[i] > res_df['bb_base_15m'].iloc[i] + res_df['bb_gap_15m'].iloc[i]:\n","          # if res_df['long_ep_{}'.format(strat_version)].iloc[i] > res_df['bb_base_5m'].iloc[i]:\n","          if res_df['long_ep_{}'.format(strat_version)].iloc[i] > res_df['bb_lower_5m'].iloc[i]:\n","              mr_score += 1\n","          \n","            #     bb & dc   #\n","          mr_const_cnt += 1\n","          # if res_df['bb_base_%s' % config.loc_set.zone.bbz_itv].iloc[i] >= res_df['dc_lower_1m'].iloc[i] >= res_df['bb_lower_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","\n","          prev_hopen_idx = i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1 + config.loc_set.zone.c_itv_ticks) + config.loc_set.zone.ad_idx\n","          # if res_df['dc_lower_5m'].iloc[prev_hopen_idx] > res_df['bb_lower_15m'].iloc[i]:\n","          if res_df['dc_lower_5m'].iloc[prev_hopen_idx] > res_df['bb_lower_15m'].iloc[prev_hopen_idx]:\n","            mr_score += 1\n","\n","        # --------- by ema --------- # \n","\n","          #     bb & ema   #\n","        if strat_version in [\"v7_3\"]:\n","\n","          mr_const_cnt += 1\n","          if res_df['dc_lower_5m'].iloc[i] > res_df['ema_5m'].iloc[i]:\n","          # if res_df['bb_lower_15m'].iloc[i] > res_df['ema_5m'].iloc[i]:\n","            mr_score += 1\n","\n","          #     close & ema     #\n","        if strat_version in [\"v5_2\"]:\n","\n","          mr_const_cnt += 1\n","          # if  res_df['long_ep'].iloc[i] > res_df['ema_5m'].iloc[i]:\n","          if res_df['close'].iloc[i] > res_df['ema_5m'].iloc[i]:\n","              mr_score += 1\n","        \n","          \n","        # --------- by dc --------- # \n","\n","          #     ascending dc    #\n","        # mr_const_cnt += 1\n","        # if res_df['dc_upper_5m'].iloc[i] >= res_df['dc_upper_5m'].iloc[i - 50 : i].max():\n","        #   mr_score += 1\n","          \n","        # --------- by candle --------- #\n","        # mr_const_cnt += 1\n","        # if res_df['long_ep_{}'.format(strat_version)].iloc[i] >= res_df['hclose_60'].iloc[i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)]:\n","        #     mr_score += 1\n","        \n","        # --------- by macd --------- #\n","        # mr_const_cnt += 1\n","        # if res_df['ma30_1m'].iloc[i] > res_df['ma60_1m'].iloc[i]:\n","        #     mr_score += 1\n","\n","        # --------- by zone_dtk --------- #\n","        # mr_const_cnt += 1\n","        # if res_df['zone_dc_lower_v2_{}'.format(strat_version)].iloc[i] > res_df['short_dtk_plot_1'].iloc[i] - res_df['short_dtk_plot_gap'].iloc[i] * config.loc_set.zone.zone_dt_k:\n","        #   mr_score += 1\n","\n","    # -------------- zoned tr_set - post_work -------------- #\n","    if config.tr_set.c_ep_gap != \"None\":\n","        #       by bb       # \n","        # if res_df['close'].iloc[i] < res_df['bb_upper_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","\n","        #       by zone_dtk       #\n","\n","        #         c_zone        #\n","        if res_df['zone_dc_lower_v2_{}'.format(strat_version)].iloc[i] < res_df['short_dtk_plot_1'].iloc[i] - \\\n","                res_df['short_dtk_plot_gap'].iloc[i] * config.loc_set.zone.zone_dt_k:\n","\n","            if config.ep_set.static_ep:\n","                res_df['long_ep_{}'.format(strat_version)].iloc[i] = res_df['long_ep2_{}'.format(strat_version)].iloc[i]\n","            else:\n","                res_df['long_ep_{}'.format(strat_version)] = res_df['long_ep2_{}'.format(strat_version)]\n","\n","            if config.out_set.static_out:\n","                res_df['long_out_{}'.format(strat_version)].iloc[i] = \\\n","                res_df['long_out_org_{}'.format(strat_version)].iloc[i]\n","            else:\n","                res_df['long_out_{}'.format(strat_version)] = res_df['long_out_org_{}'.format(strat_version)]\n","\n","            zone = 'c'\n","\n","            # mr_const_cnt += 1\n","            # dc_lb_period = 100\n","            # if np.sum((res_df['dc_upper_15m'] > res_df['dc_upper_15m'].shift(15)).iloc[i - dc_lb_period:i]) == 0:\n","            #   mr_score += 1\n","\n","            #         t_zone        #\n","        else:\n","\n","            # mr_const_cnt += 1   # zone_rejection - temporary\n","\n","            if config.ep_set.static_ep:\n","                res_df['long_ep_{}'.format(strat_version)].iloc[i] = \\\n","                res_df['long_ep_org_{}'.format(strat_version)].iloc[i]\n","            else:\n","                res_df['long_ep_{}'.format(strat_version)] = res_df['long_ep_org_{}'.format(strat_version)]\n","\n","            if config.out_set.static_out:\n","                res_df['long_out_{}'.format(strat_version)].iloc[i] = res_df['long_out2_{}'.format(strat_version)].iloc[\n","                    i]\n","            else:\n","                res_df['long_out_{}'.format(strat_version)] = res_df['long_out2_{}'.format(strat_version)]\n","\n","            zone = 't'\n","\n","    if mr_const_cnt == mr_score:\n","        open_side = OrderSide.BUY\n","\n","    return res_df, open_side, zone"]},{"cell_type":"markdown","metadata":{"id":"rLI8unIyroiC"},"source":["##### run"]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"TdAn2bHHBWMF","executionInfo":{"status":"ok","timestamp":1641047074654,"user_tz":-540,"elapsed":94876,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"0dcd8739-ae54-495f-deba-da18c3fad6f0"},"outputs":[{"output_type":"stream","name":"stdout","text":["2021-11-17 ETHUSDT.ftr loaded !\n","~ load res_df elapsed time : 0.8229761123657227\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:670: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  iloc._setitem_with_indexer(indexer, value)\n"]},{"output_type":"stream","name":"stdout","text":["load_df ~ enlist_rtc elapsed time : 22.686705827713013\n","config.loc_set.point.exp_itv : 5m\n","config.loc_set.point.tpg_itv : 5m\n","config.loc_set.point.outg_itv : 5m\n","config.loc_set.point.outg_dc_period : None\n","config.loc_set.zone.dtk_itv : 5m\n","-----------------------------------\n","config.loc_set.zone.tr_thresh : None\n","config.loc_set.zone.short_spread : 0.915\n","config.loc_set.zone.long_spread : 0.953\n","config.loc_set.zone.dt_k : 0.225\n","config.loc_set.zone.ei_k : 0.095\n","config.loc_set.zone.dc_period : 135\n","config.loc_set.zone.use_dtk_line : 0\n","config.loc_set.zone.zone_rejection : 0\n","config.loc_set.zone.bbz_itv : None\n","config.loc_set.zone.gap_mply : 1\n","config.loc_set.zone.ad_idx : 19\n","config.loc_set.zone.zone_dt_k : 0.4\n","config.loc_set.zone.zone_dc_period : 135\n","-----------------------------------\n","config.loc_set.point.tf_entry : 5\n","config.loc_set.point.htf_entry : 15\n","config.loc_set.point.candle_ratio : None\n","config.loc_set.point.candle_ratio2 : None\n","config.loc_set.point.osc_band : 20\n","config.tr_set.ep_gap : 0.083\n","config.tr_set.tp_gap : 0.36\n","config.tr_set.out_gap : -0.5\n","config.tr_set.c_ep_gap : 0.232\n","config.tr_set.t_out_gap : -0.5\n","-----------------------------------\n","config.lvrg_set.leverage : 2\n","config.lvrg_set.static_lvrg : 0\n","config.lvrg_set.target_pct : 0.12\n","-----------------------------------\n","config.ep_set.entry_type : LIMIT\n","config.tp_set.tp_type : LIMIT\n","config.out_set.out_type : MARKET\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:670: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  iloc._setitem_with_indexer(indexer, value)\n"]},{"output_type":"stream","name":"stdout","text":["elapsed_time : 32.408631563186646\n","supblot231 passed\n","supblot232 passed\n","supblot233 passed\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1600x1200 with 6 Axes>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]}],"source":["config = config1  # custom base config, if use override -> set to config1\n","\n","multi_mode = 1\n","strat_switch = 0\n","override = 0\n","\n","if strat_switch:    # override ÌïòÏßÄÏïäÎäî Í≤ΩÏö∞Ïóê config1 ÎßåÏùÑ ÏÇ¨Ïö©ÌïòÎãà, config1 Ïóê Ïñ¥Îñ§ version ÏùÑ Î∞∞ÏπòÌï†ÏßÄ ÏÑ†ÌÉù\n","  utils1 = utils2\n","  config1 = config3\n","\n","# ------- tp / out fee calc ------- #\n","if config.ep_set.entry_type == 'MARKET':\n","  if config.tp_set.tp_type != 'MARKET':   # Todo : Ïã§Ï†úÎ°ú, tp_fee Í∞Ä ÏïÑÎãå spread const. Î•º ÏúÑÌïú spread_fee1 ÏûÑ (Ï∂îÌõÑ ÏàòÏ†ï Í∂åÍ≥†)\n","    tp_fee = config.trader_set.market_fee + config.trader_set.limit_fee\n","  else:\n","    tp_fee = config.trader_set.market_fee + config.trader_set.market_fee\n","  out_fee = config.trader_set.market_fee + config.trader_set.market_fee\n","else:\n","  if config.tp_set.tp_type != 'MARKET':\n","    tp_fee = config.trader_set.limit_fee + config.trader_set.limit_fee\n","  else:\n","    tp_fee = config.trader_set.limit_fee + config.trader_set.market_fee\n","  out_fee = config.trader_set.limit_fee + config.trader_set.market_fee\n","  \n","\n","# ------- inversion set ------- #\n","inversion = 0\n","fdist_thresh = 1\n","\n","title_position = (0.30, 1)\n","show_plot = 1\n","show_detail = 0\n","\n","for key in ftr_list:\n","\n","  if config.trader_set.symbol in key:\n","    pass\n","  else:\n","    continue\n","\n","  start_0 = time.time()\n","\n","  res_df = pd.read_feather(os.path.join(ftr_path, key), columns=None, use_threads=True).set_index(\"index\") #.loc[pd.to_datetime(\"2021-07-10 04:59:59.999000\"):]\n","  print(key, \"loaded !\")\n","  # break\n","\n","  print(\"~ load res_df elapsed time :\", time.time() - start_0)\n","  \n","  # print(\"res_df.columns :\", res_df.columns)  \n","  # print(res_df.tail(100))\n","  # print(\"res_df.index[0] :\", res_df.index[0])\n","  # # print(\"intmin(res_df.index[0]) :\", intmin(res_df.index[0]))\n","  # break\n","\n","  start_0 = time.time()\n","\n","  # -------------------- additional indi. -------------------- #    \n","  np_timeidx = np.array(list(map(lambda x : intmin(x), res_df.index)))  # Ïù¥Í≥≥Ïóê latency Ï°∞Í∏à ÏûàÏùå\n","\n","  if override:\n","    res_df = public_indi(res_df)\n","  else:\n","    res_df = utils_public.public_indi(res_df)\n","  \n","\n","  # -------------------- entlist rtc & tr ÏùÄ Ï§ëÎ≥µÎêòÎäî Ïó¨Î∂ÄÏóê Îî∞Îùº user Í∞Ä flexible coding Ìï¥ÏïºÌï† Í≤É -------------------- #    \n","  if override:\n","    res_df = enlist_rtc(res_df, config1)\n","  else:\n","    res_df = utils1.enlist_rtc(res_df, config1)\n","    if multi_mode:\n","      res_df = utils2.enlist_rtc(res_df, config2)\n","      res_df = utils2.enlist_rtc(res_df, config3)   # form Í∞ôÏùÄ Í≤ΩÏö∞, Í∞ôÏùÄ utils ÏÇ¨Ïö© - config Îßå Î≥ÄÍ≤Ω\n","\n","  print(\"load_df ~ enlist_rtc elapsed time :\", time.time() - start_0)\n","\n","  #   temp param    #\n","  allow_osc_touch = 0\n","  rsi_gap = 5\n","\n","  early_out_tpg = 0.36\n","\n","  itv_num_list = [1, 3, 5, 15]\n","\n","  itv_list = ['15m', '30m', '1h', '4h']\n","  # itv_list = ['3m', '5m', '15m', '30m', '1h', '4h']\n","\n","  # x_val_list = np.arange(0.0, -1., -0.1)     # prcn 1\n","  x_val_list = np.arange(0.0, 0.5, 0.05)     # prcn 2\n","  # x_val_list = np.arange(-0.64, -0.7, -0.001)    # prcn 3\n","  # x_val_list = np.arange(0.944, 0.945, 0.0001)    # prcn 4\n","  # x_val_list = np.arange(20, 15, -1)   # prcn -1\n","  # x_val_list = np.arange(160, 250, 5)   # prcn -2\n","\n","  y_val_cols = [\"wr\", \"sr\", \"frq\", \"dpf\", \"acc_pr\", \"sum_pr\", \"acc_mdd\", \"sum_mdd\", \"liqd\", \"min_pr\", \"tr\", \"dr\"]\n","  y_rev_val_cols = [\"wr\", \"sr\", \"acc_pr\", \"sum_pr\", \"acc_mdd\", \"sum_mdd\", \"min_pr\"]\n","\n","  survey_df = pd.DataFrame(index=x_val_list, columns=y_val_cols)\n","  short_survey_df = pd.DataFrame(index=x_val_list, columns=y_val_cols)\n","  long_survey_df = pd.DataFrame(index=x_val_list, columns=y_val_cols)\n","  rev_survey_df = pd.DataFrame(index=x_val_list, columns=y_rev_val_cols)\n","  rev_short_survey_df = pd.DataFrame(index=x_val_list, columns=y_rev_val_cols)\n","  rev_long_survey_df = pd.DataFrame(index=x_val_list, columns=y_rev_val_cols)\n","\n","  for survey_i, just_loop in enumerate(range(1)):\n","  # for survey_i, config.loc_set.zone.tr_thresh in enumerate(x_val_list): \n","  # for survey_i, config.loc_set.zone.short_spread in enumerate(x_val_list): \n","  # for survey_i, config.loc_set.zone.long_spread in enumerate(x_val_list): \n","  # for survey_i, config.loc_set.zone.dt_k in enumerate(x_val_list):\n","  # for survey_i, config.loc_set.zone.dc_period in enumerate(x_val_list):\n","  # for survey_i, config.loc_set.zone.ei_k in enumerate(x_val_list):   \n","  # for survey_i, config.loc_set.zone.dr_error in enumerate(x_val_list): \n","  # for survey_i, config.loc_set.zone.bbz_itv in enumerate(itv_list):\n","  # for survey_i, config.loc_set.zone.gap_mply in enumerate(x_val_list):\n","  # for survey_i, config.loc_set.zone.ad_idx in enumerate(x_val_list):\n","  # for survey_i, config.loc_set.point.tf_entry in enumerate(x_val_list):\n","  # for survey_i, config.loc_set.point.candle_ratio in enumerate(x_val_list):\n","  # for survey_i, config.loc_set.point.candle_ratio2 in enumerate(x_val_list):\n","  # for survey_i, config.loc_set.point.osc_band in enumerate(x_val_list):\n","  # for survey_i, config.tr_set.ep_gap in enumerate(x_val_list): \n","  # for survey_i, config.tr_set.out_gap in enumerate(x_val_list): \n","  # for survey_i, config.tr_set.tp_gap in enumerate(x_val_list): \n","  # for survey_i, config.lvrg_set.leverage in enumerate(x_val_list):\n","  # for survey_i, config.lvrg_set.target_pct in enumerate(x_val_list):   \n","  # for survey_i, outg_dc_itv_num in enumerate(x_val_list): \n","  # for survey_i, exp_itv in enumerate(itv_list): \n","  # for survey_i, zone_dt_k in enumerate(x_val_list): \n","  # for survey_i, t_out_gap in enumerate(x_val_list): \n","  # for survey_i, zone_dc_period in enumerate(x_val_list): \n","  # for survey_i, early_out_tpg in enumerate(x_val_list): \n","  \n","    start_0 = time.time()\n","\n","    print(\"config.loc_set.point.exp_itv :\", config.loc_set.point.exp_itv)\n","    print(\"config.loc_set.point.tpg_itv :\", config.loc_set.point.tpg_itv)\n","    print(\"config.loc_set.point.outg_itv :\", config.loc_set.point.outg_itv)\n","    print(\"config.loc_set.point.outg_dc_period :\", config.loc_set.point.outg_dc_period)\n","    print(\"config.loc_set.zone.dtk_itv :\", config.loc_set.zone.dtk_itv)\n","    print(\"-----------------------------------\")    \n","    # print(\"dtk_dc_itv :\", dtk_dc_itv)    \n","    # print(\"config.loc_set.dtk_dc_itv_num :\", config.loc_set.dtk_dc_itv_num :\",)\n","    print(\"config.loc_set.zone.tr_thresh :\", config.loc_set.zone.tr_thresh)\n","    print(\"config.loc_set.zone.short_spread :\", config.loc_set.zone.short_spread)\n","    print(\"config.loc_set.zone.long_spread :\", config.loc_set.zone.long_spread)\n","    print(\"config.loc_set.zone.dt_k :\", config.loc_set.zone.dt_k)\n","    print(\"config.loc_set.zone.ei_k :\", config.loc_set.zone.ei_k)\n","    print(\"config.loc_set.zone.dc_period :\", config.loc_set.zone.dc_period)\n","    print(\"config.loc_set.zone.use_dtk_line :\", config.loc_set.zone.use_dtk_line)\n","\n","    print(\"config.loc_set.zone.zone_rejection :\", config.loc_set.zone.zone_rejection)\n","    print(\"config.loc_set.zone.bbz_itv :\", config.loc_set.zone.bbz_itv)\n","    print(\"config.loc_set.zone.gap_mply :\", config.loc_set.zone.gap_mply)\n","    print(\"config.loc_set.zone.ad_idx :\", config.loc_set.zone.ad_idx)\n","    print(\"config.loc_set.zone.zone_dt_k :\", config.loc_set.zone.zone_dt_k)\n","    print(\"config.loc_set.zone.zone_dc_period :\", config.loc_set.zone.zone_dc_period)\n","    # print(\"config.loc_set.open_shift :\", config.loc_set.open_shift)\n","    print(\"-----------------------------------\")\n","    # print(\"config.ep_set.dr_error :\", config.ep_set.dr_error)\n","    print(\"config.loc_set.point.tf_entry :\", config.loc_set.point.tf_entry)\n","    print(\"config.loc_set.point.htf_entry :\", config.loc_set.point.htf_entry)\n","    print(\"config.loc_set.point.candle_ratio :\", config.loc_set.point.candle_ratio)\n","    print(\"config.loc_set.point.candle_ratio2 :\", config.loc_set.point.candle_ratio2)\n","    print(\"config.loc_set.point.osc_band :\", config.loc_set.point.osc_band)\n","    print(\"config.tr_set.ep_gap :\", config.tr_set.ep_gap)\n","    print(\"config.tr_set.tp_gap :\", config.tr_set.tp_gap)  \n","    print(\"config.tr_set.out_gap :\", config.tr_set.out_gap)\n","    print(\"config.tr_set.c_ep_gap :\", config.tr_set.c_ep_gap)\n","    print(\"config.tr_set.t_out_gap :\", config.tr_set.t_out_gap)\n","    print(\"-----------------------------------\")\n","    print(\"config.lvrg_set.leverage :\", config.lvrg_set.leverage)\n","    print(\"config.lvrg_set.static_lvrg :\", config.lvrg_set.static_lvrg)\n","    print(\"config.lvrg_set.target_pct :\", config.lvrg_set.target_pct)\n","    print(\"-----------------------------------\")\n","    print(\"config.ep_set.entry_type :\", config.ep_set.entry_type)\n","    print(\"config.tp_set.tp_type :\", config.tp_set.tp_type)\n","    print(\"config.out_set.out_type :\", config.out_set.out_type)\n","    \n","    # print(\"early_out_tpg :\", early_out_tpg)\n","\n","    # res_df = bb_level(res_df, '15m', config.loc_set.zone.gap_mply)\n","    \n","    # rsi_upper = 50 + config.loc_set.point.osc_band\n","    # rsi_lower = 50 - config.loc_set.point.osc_band\n","\n","    if override:\n","      res_df = enlist_tr(res_df, config1, np_timeidx)\n","    else:\n","      res_df = utils1.enlist_tr(res_df, config1, np_timeidx)\n","      if multi_mode:\n","        res_df = utils2.enlist_tr(res_df, config2, np_timeidx)\n","        res_df = utils2.enlist_tr(res_df, config3, np_timeidx)\n","\n","\n","    #       trading : Ïó¨Í∏∞ÎèÑ Ï≤¥Í≤∞ Í≤∞Í≥ºÏóê ÎåÄÌï¥ Î¨òÏÇ¨Ìï®       #\n","    trade_list = []\n","    h_trade_list = []\n","    leverage_list = []\n","    fee_list = []\n","    short_fee_list = []\n","    long_fee_list = []\n","    open_list = []\n","    zone_list = []\n","    side_list = []\n","\n","    tp_ratio_list = []\n","    short_tp_ratio_list = []\n","    long_tp_ratio_list = []\n","\n","    dr_list = []\n","    short_dr_list = []\n","    long_dr_list = []\n","\n","    liqd_list = []\n","    short_liqd_list = []\n","    long_liqd_list = []\n","\n","    nontp_liqd_list = []\n","    nontp_short_liqd_list = []\n","    nontp_long_liqd_list = []\n","\n","    nontp_pr_list = []\n","    nontp_short_pr_list = []\n","    nontp_long_pr_list = []\n","\n","    nontp_short_indexs = []\n","    nontp_long_indexs = []\n","\n","    nontp_short_ep_list = []\n","    nontp_long_ep_list = []\n","\n","    pr_list = []\n","    long_list = []\n","    short_list = []\n","\n","    h_pr_list = []\n","    h_long_list = []\n","    h_short_list = []\n","\n","    ep_tp_list = []\n","    h_ep_tp_list = []\n","    tp_state_list = []\n","\n","    i = 0\n","    while 1:\n","    # for i in range(len(res_df)):  \n","\n","      run = 0\n","      # if res_df['entry_{}'.format(config.strat_version)][i] == config.ep_set.short_entry_score: \n","      if multi_mode:\n","        if res_df['entry_{}'.format(config1.strat_version)][i] == config1.ep_set.short_entry_score or \\\n","            res_df['entry_{}'.format(config2.strat_version)][i] == config2.ep_set.short_entry_score: \n","          run = -1\n","        elif res_df['entry_{}'.format(config1.strat_version)][i] == -config1.ep_set.short_entry_score or \\\n","          res_df['entry_{}'.format(config2.strat_version)][i] == -config2.ep_set.short_entry_score: \n","          run = 1 \n","      else:\n","        if res_df['entry_{}'.format(config1.strat_version)][i] == config1.ep_set.short_entry_score:\n","          run = -1\n","        elif res_df['entry_{}'.format(config1.strat_version)][i] == -config1.ep_set.short_entry_score:\n","          run = 1\n","\n","      if run == -1:\n","        # print(\"i in short :\", i)\n","\n","        #     Ïù¥Í≥≥ÏóêÏÑú ÏÇ¨Ïö©Îê† config Í∞Ä Ï†ïÌï¥Ïßê    #\n","        if res_df['entry_{}'.format(config1.strat_version)][i] == config1.ep_set.short_entry_score:\n","          config = config1\n","        else:\n","          config = config2  # Í∏∞Î≥∏ setting ÏùÄ lower version strat. ÏúºÎ°ú ÏÑ§Ï†ïÌï®\n","\n","        # strat_version = config.strat_version\n","    \n","\n","        initial_i = i\n","\n","\n","        if override:\n","          res_df, open_side, zone = short_ep_loc(res_df, config, i, np_timeidx, show_detail)          \n","        else:\n","          #       config Îäî ep_loc ÏùÑ ÌÜµÌï¥ Ïû¨Ï†ïÏùò Îê† Ïàò ÏûàÏùå      #\n","          res_df, open_side, zone = utils_public.short_ep_loc(res_df, config, i, np_timeidx, show_detail)\n","          if multi_mode:\n","            if config.strat_version == 'v5_2' and open_side is None:\n","              res_df, open_side, zone = utils_public.short_ep_loc(res_df, config3, i, np_timeidx, show_detail)\n","\n","              if open_side is not None:  # Ïù¥ ÌòïÌÉúÎ•º Ïú†ÏßÄÌïòÎäî Ïù¥Ïú†Îäî, ÏïÑÎûòÏùò summation form ÏùÑ Íπ®Îú®Î¶¨ÏßÄ ÏïäÍ∏∞ ÏúÑÌï®\n","                config = config3 \n","\n","\n","        # -------------- mr_score summation -------------- #\n","        if open_side is not None:     \n","          pass\n","\n","        else:\n","          i += 1\n","          if i >= len(res_df):\n","            break\n","          continue\n","\n","        # --------------------- config Í∞Ä ÌôïÏ†ïÎêú Ïù¥ÌõÑÏùò setting --------------------- #\n","        strat_version = config.strat_version\n","        \n","        # p_i Ïùò Ïö©ÎèÑ Î™®Î•¥Í≤†Ïùå\n","        if config.out_set.static_out:\n","          p_i = initial_i  \n","        else:\n","          p_i = i\n","\n","        # ------- fee init ------- #\n","        if config.ep_set.entry_type == 'LIMIT':\n","          fee = config.trader_set.limit_fee\n","        else:\n","          fee = config.trader_set.market_fee\n","        \n","        # --------------- set partial tp --------------- #\n","        short_tps = [res_df['short_tp_{}'.format(strat_version)]]\n","        long_tps = [res_df['long_tp_{}'.format(strat_version)]]\n","\n","        # short_tps = [short_tp2, short_tp] # org\n","        # long_tps = [long_tp2, long_tp]\n","        \n","        # short_tps = [short_tp, short_tp2]\n","        # long_tps = [long_tp, long_tp2]\n","\n","\n","        ep_j = initial_i\n","        out_j = initial_i\n","\n","        # -------------- limit waiting : limit_out -------------- #\n","\n","        if config.ep_set.entry_type == \"LIMIT\":\n","\n","          allow_ep_in = 0 if strat_version in [\"v5_2\"] else 1\n","          entry_done = 0\n","          entry_open = 0\n","          prev_sar = None\n","\n","          # for e_j in range(i, len(res_df)): # entry_signal Ïù¥ open Í∏∞Ï§Ä (Ìï¥Îãπ bar ÏóêÏÑú Ï≤¥Í≤∞ Í∞ÄÎä•Ìï®)\n","          if i + 1 >= len(res_df):  # i should be checked if e_j starts from i+1\n","            break\n","          for e_j in range(i + 1, len(res_df)): # entry signalÏù¥ close Í∏∞Ï§Ä Ïùº Í≤ΩÏö∞\n","        \n","            if not config.ep_set.static_ep:\n","              ep_j = e_j\n","              out_j = e_j\n","\n","            if config.tp_set.static_tp:\n","              # if config.ep_set.tpout_onexec:\n","              #   tp_j = e_j\n","              # else:\n","                tp_j = initial_i\n","            else:\n","              tp_j = e_j  \n","\n","            #             1. ep ÏÑ§Ï†ï \n","            # -------------- np.inf ep -------------- #\n","            # if short_ep.iloc[initial_i] == np.inf:\n","            #   break\n","\n","\n","            #     1. check ep_out     #\n","            if config.loc_set.zone.ei_k != \"None\":\n","\n","              # if strat_version == \"v3\":\n","              if res_df['low'].iloc[e_j] <= res_df['h_short_rtc_1_{}'.format(strat_version)].iloc[tp_j] - \\\n","                res_df['h_short_rtc_gap_{}'.format(strat_version)].iloc[tp_j] * config.loc_set.zone.ei_k:\n","                break\n","\n","              # elif strat_version == \"v5_2\":\n","              # if res_df['low'].iloc[e_j] <= res_df['short_tp_{}'.format(strat_version)].iloc[tp_j]: # ep_out : tp_done\n","              # # if np_timeidx[e_j] % config.loc_set.point.tf_entry == config.loc_set.point.tf_entry - 1:\n","              #   break\n","\n","              # elif (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[e_j - 1] >= 50 - config.loc_set.point.osc_band) & \\\n","              #                  (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[e_j] < 50 - config.loc_set.point.osc_band):\n","              #   break\n","\n","            # if config.loc_set.zone.c_itv_ticks != \"None\":\n","\n","            #   if np_timeidx[e_j] % config.loc_set.zone.c_itv_ticks == config.loc_set.zone.c_itv_ticks - 1:\n","            #     break\n","\n","            #     2. ep_loc.point2\n","            if strat_version == \"v5_2\" and allow_ep_in == 0:\n","              if (res_df['dc_upper_1m'].iloc[e_j - 1] <= res_df['dc_upper_15m'].iloc[e_j]) & \\\n","                  (res_df['dc_upper_15m'].iloc[e_j - 1] != res_df['dc_upper_15m'].iloc[e_j]): # & \\\n","                  # (res_df['dc_upper_15m'].iloc[e_j] <= res_df['ema_5m'].iloc[e_j]):\n","                allow_ep_in = 1\n","                out_j = e_j\n","                # ep_j = e_j\n","                # continue  # limit entry Ïùò Í≤ΩÏö∞ ep_loc.point2 ÏôÑÎ£å ÏãúÏ†ê Ïù¥ÌõÑÎ°ú ÏßÑÏûÖÏù¥ Í∞ÄÎä•Ìïú Ï†ê\n","\n","              #     2-1. ep_out (ep_loc2) by ep_loc.point\n","              # if allow_ep_in and config.loc_set.zone.tr_thresh != \"None\":\n","              #   ep_ = res_df['close'].iloc[ep_j - 1]\n","              #   tr = ((res_df['short_tp_{}'.format(strat_version)].iloc[tp_j] - ep_ - tp_fee * ep_) / (ep_ - res_df['short_out_{}'.format(strat_version)].iloc[out_j] + out_fee * ep_))\n","              #   if tr < config.loc_set.zone.tr_thresh:\n","              #     break\n","\n","            #     3. check ep_in       #\n","            if allow_ep_in and res_df['high'].iloc[e_j] >= res_df['short_ep_{}'.format(strat_version)].iloc[ep_j]:\n","              entry_done = 1\n","              # print(\"res_df['high'].iloc[e_j] :\", res_df['high'].iloc[e_j])\n","              # print(\"e_j :\", e_j)\n","\n","              #     Ïù¥ÎØ∏, e_j open Ïù¥ ep Î≥¥Îã§ ÎÜíÏùÄ Í≤ΩÏö∞, entry[ep_j] => -2 Î°ú Î≥ÄÍ≤Ω   #\n","              if res_df['open'].iloc[e_j] >= res_df['short_ep_{}'.format(strat_version)].iloc[ep_j]:\n","                entry_open = 1\n","              break\n","\n","\n","          i = e_j\n","          # print(\"i = e_j :\", i)\n","\n","          if entry_done:      \n","            pass\n","\n","          else:\n","            i += 1\n","            if i >= len(res_df):\n","              break\n","            continue\n","\n","        # ----------------- end wait ----------------- #\n","\n","        # if e_j - initial_i >= 200:\n","        #   print(\"e_j, initial_i :\", e_j, initial_i)\n","        # print(\"e_j - initial_i :\", e_j - initial_i)\n","        # print()\n","\n","        open_list.append(initial_i)\n","        zone_list.append(zone)\n","        side_list.append('s')\n","        \n","        #     e_j ÎùºÎäî Î≥ÄÏàòÎäî MARKET Ïóê ÏûàÏñ¥ÏÑú Ï†ïÏùòÎêòÏÑúÎäî ÏïàÎêòÎäî Î≥ÄÏàòÏûÑ   #\n","        if config.ep_set.entry_type == 'MARKET':\n","          # try:\n","          #   ep_list = [res_df['close'].iloc[e_j]]\n","          # except Exception as e:\n","          #   # print('error in ep_list (initial) :', e)\n","          ep_list = [res_df['close'].iloc[ep_j]]\n","\n","        else:          \n","          if not entry_open:\n","            ep_list = [res_df['short_ep_{}'.format(strat_version)].iloc[ep_j]]\n","          \n","          else:\n","            #   ep_j Îäî Ìï≠ÏÉÅ ÏûàÏùå, LIMIT Ïù∏ Í≤ΩÏö∞ e_j ÎèÑ Ìï≠ÏÉÅ Ï°¥Ïû¨Ìï® --> dynamic_ep Ïó¨Î∂ÄÏóê Îî∞Îùº ep_j = e_j Í∞Ä ÎêòÎäî Í≤ΩÏö∞Îßå Ï°¥Ïû¨Ìï† ÎøêÏûÑ \n","            #   Îî∞ÎùºÏÑú, ep_j Î°ú ÌÜµÏùº Í∞ÄÎä•Ìï® (dynamic_ep Ïù∏ Í≤ΩÏö∞, ep_j = e_j ÎêòÏñ¥ÏûàÏùå)\n","            fee = config.trader_set.market_fee\n","            ep_list = [res_df['open'].iloc[e_j]]  # --> Ï≤¥Í≤∞Ïù¥ ÎêòÎäî e_j idx Í∏∞Ï§ÄÏúºÎ°ú ÌïòÎäîÍ≤å ÎßûÏùå\n","\n","        if not config.lvrg_set.static_lvrg:\n","\n","          ep_ = ep_list[0]\n","          out_ = res_df['short_out_{}'.format(strat_version)].iloc[out_j]\n","          if override:\n","            config.lvrg_set.leverage = lvrg_set(res_df, config, \"SELL\", ep_, out_, fee)\n","          else:\n","            config.lvrg_set.leverage = utils_public.lvrg_set(res_df, config, \"SELL\", ep_, out_, fee)\n","\n","          # -------------- leverage rejection -------------- #\n","          if config.lvrg_set.leverage == None:\n","            open_list.pop()\n","            zone_list.pop()\n","            side_list.pop()\n","            i += 1\n","            if i >= len(res_df):\n","              break\n","            continue          \n","        \n","        leverage_list.append(config.lvrg_set.leverage)\n","\n","        # try:\n","        if config.ep_set.entry_type == \"MARKET\":\n","          ep_idx_list = [ep_j]  # ep_j Îäî ep_type Ïú†Í¥ÄÌïòÍ≤å Ï°¥Ïû¨ÌïòÎäî Î≥ÄÏàòÎãàÍπå try Ïóê Í±∏Ïñ¥ÎëêÎäîÍ≤å ÎßûÏùå <-- # market Ïù∏Îç∞, e_j Î≥ÄÏàòÍ∞Ä Ìï†ÎãπÎêú Í≤ΩÏö∞ Í≥†Î†§Ìï¥ÏïºÌï®\n","        else:\n","          ep_idx_list = [e_j]\n","\n","        out_idx_list = [out_j]\n","\n","        # except Exception as e:\n","        #   # print('error in ep_idx_list :', e)        \n","        #   ep_idx_list = [e_j]\n","\n","        tp_list = []\n","        tp_idx_list = []\n","\n","        partial_tp_cnt = 0\n","        hedge_cnt = 1\n","\n","        h_ep, h_tp = None, None\n","        h_i, h_j = None, None\n","        \n","        trade_done = 0\n","        cross_on = 0\n","        out = 0\n","        # config.out_set.retouch\n","\n","        #     Todo    #\n","        #      1. future_work : ÏÉÅÎã®Ïùò retouch ÏôÄ Í≤πÏπ® \n","        config.out_set.retouch = 0\n","        \n","\n","        if i == len(res_df) - 1: # if j start from i + 1 \n","          open_list.pop()       \n","          zone_list.pop()       \n","          side_list.pop()       \n","        for j in range(i + 1, len(res_df)):\n","\n","        # for j in range(i, len(res_df)):\n","\n","          if config.tp_set.static_tp:\n","            if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","              tp_j = ep_j  # tpout_onexec = using dynamic_ep --> using ep_j Ïóê ÎåÄÌïú Ïù¥Ïú†\n","            else:\n","              tp_j = initial_i\n","          else:\n","            tp_j = j\n","\n","          if config.out_set.static_out:\n","            if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","              out_j = ep_j\n","            # else:           \n","            #   out_j = initial_i   # --> referenced upper phase as initail_j / e_j (start of limit wait)\n","          else:\n","            out_j = j\n","\n","\n","          # -------------- sub ep -------------- #\n","          # if res_df['high'].iloc[j - 1] <= res_df['sar2'].iloc[j - 1] and res_df['high'].iloc[j] > res_df['sar2'].iloc[j]:\n","            \n","          #   sub_ep = res_df['sar2'].iloc[j - 1]\n","\n","          #   if sub_ep < ep_list[-1]:\n","          #     ep_list.append(sub_ep)\n","          #     ep_idx_list.append(j)\n","\n","          \n","          # -------------- hedge only once -------------- #\n","          #             ÏùºÎã®, h_quantity Îäî Ï¥àÍ∏∞ ÏßÑÏûÖÍ≥º ÎèôÏùºÌïòÍ≤å ÏÑ§Ï†ï         #\n","          # if res_df['high'].iloc[j] >= res_df['minor_ST2_Up'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] >= res_df['minor_ST2_Up'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] >= res_df['minor_ST3_Up'].iloc[j] and hedge_cnt == 1:\n","\n","          #   h_ep = res_df['close'].iloc[j]\n","          #   hedge_cnt -= 1\n","          #   h_i = j\n","\n","\n","          # -------------- ultimate limit tp -------------- #\n","          if not config.tp_set.non_tp:\n","\n","            #               1. by price line             #\n","            if config.tp_set.tp_type == 'LIMIT' or config.tp_set.tp_type == \"BOTH\":\n","\n","              for s_i, short_tp_ in enumerate(short_tps):\n","\n","                if res_df['low'].iloc[j] <= short_tp_.iloc[tp_j] and partial_tp_cnt == s_i: # we use static tp now\n","                # if res_df['low'].iloc[j] <= short_tp_.iloc[j]:\n","                # if res_df['low'].iloc[j] <= short_tp_.iloc[j] <= res_df['high'].iloc[j]: --> Ïù¥Í±¥ ÏûòÎ™ªÎêòÏóàÏùå\n","\n","                  if s_i == len(short_tps) - 1:\n","                    trade_done = 1\n","                  \n","                  partial_tp_cnt += 1\n","\n","                  #         dynamic tp        #\n","                  # if 0:\n","                  if short_tp_.iloc[j] != short_tp_.iloc[j - 1] and not config.tp_set.static_tp:\n","\n","                    #   tp limit Ïù¥ Î∂àÍ∞ÄÌïú Í≤ΩÏö∞ = open Ïù¥ Ïù¥ÎØ∏, tp Î•º ÎÑòÏùÄ Í≤ΩÏö∞ # \n","                    # if res_df['open'].iloc[j] < short_tp_.iloc[initial_i]:\n","                    if res_df['open'].iloc[j] < short_tp_.iloc[j]:\n","\n","                      # tp = short_tp_.iloc[initial_i]\n","                      tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"d-short_open {}\".format(strat_version))\n","\n","                    #   tp limit Ïù¥ Í∞ÄÎä•Ìïú Í≤ΩÏö∞ = open Ïù¥ ÏïÑÏßÅ, tp Î•º ÎÑòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ # \n","                    else:\n","\n","                      # tp = short_tp_.iloc[initial_i]\n","                      tp = short_tp_.iloc[j]\n","                      # tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"d-short_tp {}\".format(strat_version))\n","\n","                  #         static tp         #\n","                  else:\n","                    \n","                    #   tp limit Ïù¥ Î∂àÍ∞ÄÌïú Í≤ΩÏö∞ = open Ïù¥ Ïù¥ÎØ∏, tp Î•º ÎÑòÏùÄ Í≤ΩÏö∞ # \n","                    #   non_inversion Ïùò Í≤ΩÏö∞, short_tp Í∞Ä Í∞ÄÎä•Ìï®   #              \n","\n","                    # if res_df['open'].iloc[j] < short_tp_.iloc[initial_i]:\n","                    if res_df['open'].iloc[j] < short_tp_.iloc[tp_j]:\n","\n","                      # tp = short_tp_.iloc[initial_i]\n","                      tp = short_tp_.iloc[tp_j]\n","\n","                      # tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"s-short_tp {}\".format(strat_version))\n","\n","                    #   tp limit Ïù¥ Í∞ÄÎä•Ìïú Í≤ΩÏö∞ = open Ïù¥ ÏïÑÏßÅ, tp Î•º ÎÑòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ # \n","                    else:\n","\n","                      # tp = short_tp_.iloc[initial_i]\n","                      tp = short_tp_.iloc[tp_j]\n","\n","                      # tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"s-short_tp {}\".format(strat_version))   \n","\n","                  tp_list.append(tp)     \n","                  tp_idx_list.append(j)\n","                  fee += config.trader_set.limit_fee\n","\n","\n","            #           2. by signal        #\n","            if config.tp_set.tp_type == 'MARKET' or (config.tp_set.tp_type == \"BOTH\" and not trade_done):\n","\n","              market_tp = 0\n","\n","              # -------------- sar tp -------------- #\n","              # if (res_df['high'].iloc[j] >= res_df['sar2'].iloc[j]) & \\\n","              #   (res_df['high'].iloc[j - 1] < res_df['sar2'].iloc[j - 1]) & \\\n","              #   (res_df['high'].iloc[j - 2] < res_df['sar2'].iloc[j - 2]):\n","\n","              #       inversion     #\n","              # if (res_df['low'].iloc[j] <= res_df['sar2'].iloc[j]) & \\\n","              #   (res_df['low'].iloc[j - 1] > res_df['sar2'].iloc[j - 1]) & \\\n","              #   (res_df['low'].iloc[j - 2] > res_df['sar2'].iloc[j - 2]):\n","              \n","              # ----------- st short ----------- #\n","              # if res_df['close'].iloc[j] <= res_df['short_tp'].iloc[tp_j]:\n","              \n","              # -------------- sar pb tp -------------- #\n","              # if res_df['low'].iloc[j] <= res_df['short_tp'].iloc[initial_i]:\n","\n","              # -------------- st tp -------------- #\n","              # if res_df['close'].iloc[j] > res_df['middle_line'].iloc[j]:       \n","\n","              # -------------- fisher tp -------------- #            \n","              # if entry[j] == 1:\n","              \n","              # -------------- timestamp -------------- #\n","              if config.tp_set.time_tp:\n","                if np_timeidx[j] % config.loc_set.zone.c_itv_ticks == config.loc_set.zone.c_itv_ticks - 1 and \\\n","                  j - initial_i >= config.loc_set.zone.c_itv_ticks:\n","                  market_tp = 1     \n","\n","              # -------------- rsi -------------- #\n","              if strat_version in [\"v7_3\"]:\n","                if (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j - 1] >= 50 - config.loc_set.point.osc_band) & \\\n","                                (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j] < 50 - config.loc_set.point.osc_band):   \n","                # if (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j - 1] <= 50 - config.loc_set.point.osc_band) & \\\n","                #                  (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j] > 50 - config.loc_set.point.osc_band):                            \n","                  market_tp = 1\n","\n","                # -------------- cci -------------- #\n","                # if (res_df['cci_%s' % config.loc_set.point.exp_itv].iloc[j - 1] >= -config.loc_set.point.osc_band) & \\\n","                #                  (res_df['cci_%s' % config.loc_set.point.exp_itv].iloc[j] < -config.loc_set.point.osc_band):                            \n","                #   market_tp = 1 \n","\n","              # ---------------------------- early out ---------------------------- #\n","\n","              # #         rsi slight touch        #\n","              if allow_osc_touch:\n","                if (np.min(res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[initial_i:j]) < 50 - config.loc_set.point.osc_band + rsi_gap) & \\\n","                  (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j] >= 50):\n","                  market_tp = 1              \n","                           \n","              #           tp early out          #\n","              # # if (np.min(res_df['low'].iloc[e_j:j]) < res_df['short_tp'].iloc[tp_j]) & \\\n","              # if (np.min(res_df['low'].iloc[e_j:j]) < res_df['h_short_rtc_1'].iloc[tp_j] - res_df['h_short_rtc_gap'].iloc[tp_j] * early_out_tpg) & \\\n","              #   (res_df['close'].iloc[j] >= res_df['short_ep'].iloc[ep_j]):\n","              #   market_tp = 1 \n","\n","              # if strat_version == \"v7\":\n","              #   if res_df['dc_upper_1m'].iloc[j] > res_df['dc_upper_5m'].iloc[j]:\n","              #     market_tp = 1\n","\n","              #         bb_upper early out        #\n","              if strat_version in [\"v5_2\"]:\n","                if res_df['close'].iloc[j] < res_df['bb_lower_5m'].iloc[j] < res_df['close'].iloc[j - 1]:\n","                  cross_on = 1\n","\n","                if cross_on == 1 and res_df['close'].iloc[j] > res_df['bb_upper_5m'].iloc[j] > res_df['close'].iloc[j - 1]:\n","                  market_tp = 1\n","\n","              if market_tp:\n","                \n","                tp = res_df['close'].iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                trade_done = 1\n","\n","                if trade_done:\n","                  tp_state_list.append(\"short close tp\")\n","\n","                tp_list.append(tp) \n","                tp_idx_list.append(j)\n","                fee += config.trader_set.market_fee\n","\n","\n","                  \n","          # -------------- out -------------- #\n","          if not trade_done and config.out_set.use_out and j != len(res_df) - 1:\n","\n","            # -------------- macd -------------- #\n","            # if res_df['macd_hist3'].iloc[j] > 0:  #  macd out\n","            # if res_df['macd_hist3'].iloc[i] < 0 and res_df['macd_hist3'].iloc[j] > 0:\n","\n","            # -------------- st config.out_set.retouch -------------- #\n","            # out = 1 ÏÉÅÌÉúÎ©¥ ÎèôÏùº tick ÏóêÏÑú config.out_set.retouch Î•º Ï°∞ÏÇ¨Ìï† Í±∞Í∏∞ ÎïåÎ¨∏Ïóê, Î®ºÏ†Ä Í≤ÄÏÇ¨Ìï®\n","            # Í∑∏Î¶¨Í≥†, out Í∏∞Ï§ÄÏù¥ close Îùº Ïù¥Í≤å ÎßûÏùå \n","            # close Í∞Ä short_out Î≥¥Îã§ Ïò¨ÎùºÍ∞ÄÏûàÎäî ÏÉÅÌÉúÏùºÌÖåÎãà low Î•º Ï°∞ÏÇ¨ÌïòÎäîÍ≤å ÎßûÏùå           \n","            # if out and res_df['low'].iloc[j] <= short_out.iloc[out_j]:\n","            #   config.out_set.retouch = 1\n","\n","            \n","             # ------- ÏùºÏ†ïÏãúÍ∞Ñ Ïù¥ÏÉÅ, dynamic_out Ï†ÅÏö© ------ #\n","            try:\n","              if j - out_idx >= config.out_set.retouch_out_period:\n","                static_short_out = res_df['short_out_{}'.format(strat_version)].iloc[j]\n","            \n","            except Exception as e:\n","              pass\n","\n","              # ------- static out ------ #\n","            try:\n","              if out and res_df['low'].iloc[j] <= static_short_out:\n","                config.out_set.retouch = 1\n","            except Exception as e:\n","              pass\n","\n","            \n","              # ------- config.out_set.retouch out ------ #\n","            # if out and res_df['low'].iloc[j] <= short_out2.iloc[out_j]:\n","            #   config.out_set.retouch = 1\n","\n","\n","            # -------------- st -------------- #\n","            # if res_df['close'].iloc[j] > res_df['middle_line'].iloc[j]:    \n","            # if res_df['close'].iloc[j] > res_df['minor_ST3_Up'].iloc[j]:\n","            # if res_df['close'].iloc[j] > upper_middle.iloc[j]:\n","            # if res_df['close'].iloc[j] > res_df['minor_ST1_Up'].iloc[j]:\n","            if out == 0:              \n","              if config.out_set.hl_out:\n","                if res_df['high'].iloc[j] >= res_df['short_out_{}'.format(strat_version)].iloc[out_j]: # check out only once\n","                  out = 1\n","\n","              else:\n","                if res_df['close'].iloc[j] >= res_df['short_out_{}'.format(strat_version)].iloc[out_j]: # check out only once\n","                  out = 1\n","\n","              # out_idx = j\n","              # static_short_out = short_out.iloc[out_j]\n","              # if config.out_set.second_out:              \n","                # static_short_out = short_out.iloc[out_j] + res_df['st_gap'].iloc[out_j] * config.out_set.second_out_gap\n","            \n","            # if out == 0 and res_df['high'].iloc[j] >= short_out.iloc[out_j]: # check out only once\n","            #   out = 1\n","             \n","\n","            # -------------- sma -------------- #\n","            # if res_df['close'].iloc[j] > res_df[sma].iloc[j]:\n","\n","            # -------------- sar -------------- #\n","            # if res_df['close'].iloc[j] > res_df['minor_ST3_Up'].iloc[j] \\\n","            #   or res_df['sar2'].iloc[j] <= res_df['high'].iloc[j]:\n","            # if res_df['close'].iloc[j] > short_out.iloc[initial_i]: # or \\\n","            #   out = 1\n","              # res_df['sar2_uptrend'].iloc[j] == 1: # or \\\n","\n","            # if res_df['sar2_uptrend'].iloc[j] == 1:\n","\n","            #   if prev_sar is None:\n","            #     prev_sar = res_df['sar2'].iloc[j - 1]\n","              \n","            #   if res_df['close'].iloc[j] > prev_sar:\n","            #     out = 1\n","\n","            # else:\n","            #   if res_df['close'].iloc[j] > res_df['sar2'].iloc[j]:\n","            #     out = 1\n","              \n","            # -------------- hl -------------- #\n","            # if res_df['close'].iloc[j] > short_out.iloc[tp_j]:\n","            \n","            # -------------- stoch -------------- #\n","            # if res_df['stoch'].iloc[j - 2] >= res_df['stoch'].iloc[j - 1] and \\\n","            #   res_df['stoch'].iloc[j - 1] < res_df['stoch'].iloc[j] and \\\n","            #   res_df['stoch'].iloc[j - 1] <= stoch_lower:\n","            #   out = 1\n","\n","            # config.out_set.retouch 1 Í≤ΩÏö∞, config.out_set.retouch Ï°∞Í±¥ÎèÑ ÏûàÏñ¥ÏïºÌï®\n","            if out:\n","              if config.out_set.retouch:\n","                if config.out_set.retouch:\n","                  pass\n","                else:\n","                    continue\n","\n","              else:\n","                pass\n","\n","              if config.out_set.price_restoration:\n","                tp = res_df['short_out_{}'.format(strat_version)].iloc[out_j]\n","                if config.out_set.second_out:\n","                  tp = res_df['short_out2_{}'.format(strat_version)].iloc[out_j]\n","                \n","                # if res_df['close'].iloc[j] > tp: # Ïù¥ Í≤ΩÏö∞Î•º protect ÌïòÎäîÍ±¥ insane ÏûÑ\n","                #   tp = res_df['close'].iloc[j]\n","\n","              else:\n","                \n","                if res_df['open'].iloc[j] >= res_df['short_out_{}'.format(strat_version)].iloc[out_j]:\n","                  tp = res_df['open'].iloc[j]\n","                else:\n","                  if config.out_set.hl_out:\n","                    tp = res_df['short_out_{}'.format(strat_version)].iloc[out_j]\n","                  else:\n","                    tp = res_df['close'].iloc[j]\n","                \n","                # if not config.out_set.static_out:\n","                #   if res_df['open'].iloc[j] >= res_df['short_out_{}'.format(strat_version)].iloc[out_j]: # close Í∏∞Ï§ÄÏù¥Îùº Ïù¥Îü∞ Ï°∞Í±¥ÏùÑ Î™ªÏîÄ, Ï∞®ÎùºÎ¶¨ j Î•º i Î∂ÄÌÑ∞ ÏãúÏûë\n","                #     tp = res_df['open'].iloc[j]\n","                #   else:\n","                #     tp = res_df['close'].iloc[j]\n","\n","                # else:\n","                #   tp = res_df['close'].iloc[j]\n","\n","              \n","              if config.out_set.retouch: # out Í≥º open ÎπÑÍµê\n","                if config.out_set.second_out:\n","                  if res_df['open'].iloc[j] <= res_df['short_out2_{}'.format(strat_version)].iloc[out_j]:\n","                    tp = res_df['open'].iloc[j]\n","                else:\n","                  if res_df['open'].iloc[j] <= res_df['short_out_{}'.format(strat_version)].iloc[out_j]:\n","                    tp = res_df['open'].iloc[j]\n","\n","                try: # static_short_out Ïù∏ Í≤ΩÏö∞, open ÎèÑ Í≥†Î†§Ìïú tp set\n","                  if res_df['open'].iloc[j] <= static_short_out:\n","                    tp = res_df['open'].iloc[j]\n","                  else:\n","                    tp = static_short_out\n","                except Exception as e:\n","                  pass\n","\n","              trade_done = 1\n","              tp_state_list.append(\"short close_out {}\".format(strat_version))\n","            \n","\n","              tp_list.append(tp) \n","              tp_idx_list.append(j)\n","              fee += config.trader_set.market_fee\n","\n","\n","          # -------------- non tp -------------- #\n","          if j == len(res_df) - 1:\n","            trade_done = 1\n","            tp = res_df['close'].iloc[j]\n","            tp_list.append(tp) \n","            tp_idx_list.append(j)\n","            fee += config.trader_set.market_fee\n","          \n","\n","\n","          # -------------- append trade data -------------- #\n","          if trade_done:\n","\n","            # --------------- tp_ratio info --------------- #\n","            #         Todo        #\n","            #          short_out Ïóê ÎåÄÌïú Ï†ïÎ≥¥Îäî Ï°¥Ïû¨Ìï®,\n","            #          short_tp Ïóê ÎåÄÌïú Ï†ïÎ≥¥Îäî Ï°¥Ïû¨Ìï®,\n","            #       => initial_i Í∏∞Ï§ÄÏúºÎ°ú ,dynamic | static set ÏùÑ tp ÏôÄ out Ïóê Í∞ÅÍ∞Å Ï†ÅÏö©\n","            #          config.lvrg_set.leverage Îäî initial_i Í∏∞Ï§ÄÏúºÎ°ú Ï†ÅÏö©ÎêòÎãàÍπå\n","            #          Ï†ÅÏö©Îêú tp & out ÏúºÎ°ú abs((tp - ep) / (ep - out)) Í≥ÑÏÇ∞\n","            try:\n","              if config.out_set.use_out:\n","                done_tp = res_df['short_tp_{}'.format(strat_version)].iloc[tp_j]\n","                done_out = res_df['short_out_{}'.format(strat_version)].iloc[out_j]\n","\n","                if done_out <= ep_list[0]: # loss > 1\n","                  dr = np.nan\n","                  tp_ratio = np.nan\n","                else:                \n","                  dr = ((ep_list[0] - done_tp) / (done_out - ep_list[0]))\n","                  tp_ratio = ((ep_list[0] - done_tp - tp_fee * ep_list[0]) / (done_out - ep_list[0] + out_fee * ep_list[0]))\n","                \n","              else:\n","                dr = np.nan\n","                tp_ratio = np.nan  \n","\n","\n","            except Exception as e:\n","              dr = np.nan \n","              tp_ratio = np.nan  \n","            \n","            tp_ratio_list.append(tp_ratio)\n","            short_tp_ratio_list.append(tp_ratio)     \n","            dr_list.append(dr)\n","            short_dr_list.append(dr)   \n","\n","\n","            # -------------------- partial tp -------------------- #\n","            #        1. len(tp_list) Ïóê ÎåÄÏùëÌïòÎäî qty_list Î•º ÎßåÎì§Ïñ¥ÏïºÌï®    #\n","            #        2. temp_pr_list Î•º ÎßåÎì§Ïñ¥ Ï¥ùÌï© + 1 ÏùÑ pr_list Ïóê Ï†ÄÏû•      #\n","            #        2-1. temp_pr = sum((ep / tp_list[i] - fee - 1) * qty_list[i])   #\n","            #        3. temp_pr_list Ïùò Ï≤´ tp ÏóêÎäî r_qty Î•º Ìï†ÎãπÌï®        #\n","            qty_list = []\n","            temp_pr_list = []\n","            r_qty = 1\n","            for q_i in range(len(tp_list) - 1, -1, -1):\n","\n","              if len(tp_list) == 1:\n","                temp_qty = r_qty\n","              else:\n","                if q_i !=0:\n","                  temp_qty = r_qty / config.tp_set.partial_qty_divider\n","                else:\n","                  temp_qty = r_qty\n","\n","              temp_pr = (ep_list[0] / tp_list[q_i] - fee - 1) * temp_qty * config.lvrg_set.leverage\n","              # temp_pr = (ep_list[0] / tp_list[q_i] - fee - 1) * temp_qty\n","              r_qty -= temp_qty\n","\n","              temp_pr_list.append(temp_pr)\n","              qty_list.append(temp_qty)\n","\n","            # if len(temp_pr_list) == 1:\n","            #   print(\"qty_list :\", qty_list)\n","            #   print(\"temp_pr_list :\", temp_pr_list)\n","\n","            temp_pr = sum(temp_pr_list) + 1\n","\n","            # -------------------- sub ep -> pr calc -------------------- #\n","            if len(ep_list) > 1:\n","            \n","              p_ep_pr = []\n","              for sub_ep_ in ep_list:\n","                sub_pr = (sub_ep_ / tp - fee - 1) * config.lvrg_set.leverage\n","                p_ep_pr.append(sub_pr)\n","\n","              temp_pr = sum(p_ep_pr) + 1\n","\n","              print(\"temp_pr :\", temp_pr)\n","\n","            # ------------ hedge + non_hedge pr summation ------------ #\n","            #         hedge pr direction is opposite to the origin       #\n","            hedge_pr = 1\n","            if hedge_cnt == 0:\n","\n","              #       hedge tp      #\n","              h_tp = res_df['close'].iloc[j]\n","              hedge_pr = (h_tp / h_ep - fee - 1) * config.lvrg_set.leverage  # hedge long\n","              temp_pr += hedge_pr\n","              h_j = j\n","\n","            \n","            # hh = max(res_df['high'].iloc[i:j + 1])\n","            hh = max(res_df['high'].iloc[i:j])    # pos. Ï†ïÎ¶¨ÌïòÍ∏∞ Î∞îÎ°ú ÏßÅÏ†ÑÍπåÏßÄ\n","            short_liq = (ep_list[0] / hh - fee - 1) * config.lvrg_set.leverage + 1\n","\n","            if j != len(res_df) - 1:\n","\n","              # ep_tp_list.append((ep, tp_list))  \n","              ep_tp_list.append((ep_list, tp_list))  \n","              # trade_list.append([initial_i, i, j])\n","              # trade_list.append((ep_idx_list, tp_idx_list))\n","              trade_list.append((ep_idx_list, out_idx_list, tp_idx_list))\n","\n","              liqd_list.append(short_liq)\n","              short_liqd_list.append(short_liq)\n","\n","              h_ep_tp_list.append((h_ep, h_tp))      # hedge ÎèÑ ep_tp_list Ï≤òÎüº Î≥ÄÍ≤ΩÌï¥Ï£ºÏñ¥ÏïºÌïòÎäîÎç∞ ÏïÑÏßÅ ÏïàÍ±¥ÎìúÎ¶º, Îî±Ìûà ÏÇ¨Ïö©Ìï† ÏùºÏù¥ ÏóÜÏñ¥Î≥¥Ïó¨   \n","              h_trade_list.append([initial_i, h_i, h_j])                \n","\n","              pr_list.append(temp_pr)\n","              fee_list.append(fee)\n","              short_list.append(temp_pr)\n","              short_fee_list.append(fee)\n","\n","              h_pr_list.append(hedge_pr)\n","              h_short_list.append(hedge_pr)\n","\n","              i = j\n","              break\n","\n","            else:\n","\n","              # ep_tp_list.append((ep_list, tp_list))\n","              # trade_list.append((ep_idx_list, tp_idx_list))\n","              # plot_check ÎïåÎ¨∏Ïóê, pr_list ÍπåÏßÄ ÌïòÍ≤åÎêòÎ©¥ acc_pr eval Ïù¥ Íº¨Ïù¥Í≤åÎåê\n","          \n","              # pr_list Î•º ÎÑ£ÏßÄ ÏïäÏùÑÍ±∞ÎãàÍπå, open_list ÏóêÏÑú Ìï¥Îãπ idx Îäî pop\n","              open_list.pop()\n","              zone_list.pop()\n","              side_list.pop()\n","              \n","              #         tp ÎØ∏Ï≤¥Í≤∞ survey        #\n","              nontp_liqd_list.append(short_liq)\n","              nontp_short_liqd_list.append(short_liq)\n","              nontp_short_indexs.append(i)\n","              nontp_short_ep_list.append(ep_list[0])\n","\n","              nontp_short_pr = (ep_list[0] / tp - fee - 1) * config.lvrg_set.leverage + 1\n","              nontp_pr_list.append(nontp_short_pr)\n","              nontp_short_pr_list.append(nontp_short_pr)\n","\n","\n","      #                  long  phase                #\n","      # elif res_df['entry'][i] == -config.ep_set.short_entry_score:       \n","      # elif res_df['entry_{}'.format(config1.strat_version)][i] == -config1.ep_set.short_entry_score or \\\n","      #     res_df['entry_{}'.format(config2.strat_version)][i] == -config2.ep_set.short_entry_score: \n","      elif run == 1:\n","      \n","        #     Ïù¥Í≥≥ÏóêÏÑú ÏÇ¨Ïö©Îê† config Í∞Ä Ï†ïÌï¥Ïßê    #\n","        if res_df['entry_{}'.format(config1.strat_version)][i] == -config1.ep_set.short_entry_score:\n","          config = config1\n","        else:\n","          config = config2\n","\n","\n","        initial_i = i\n","\n","\n","        if override:\n","          res_df, open_side, zone = long_ep_loc(res_df, config, i, np_timeidx, show_detail)\n","        else:          \n","          res_df, open_side, zone = utils_public.long_ep_loc(res_df, config, i, np_timeidx, show_detail)\n","          if multi_mode:\n","            if config.strat_version == 'v5_2' and open_side is None:\n","              res_df, open_side, zone = utils_public.long_ep_loc(res_df, config3, i, np_timeidx, show_detail)\n","\n","              if open_side is not None: \n","                config = config3\n","\n","\n","        # -------------- mr_score summation -------------- #\n","        if open_side is not None:        \n","          pass\n","        \n","        else:\n","          i += 1\n","          if i >= len(res_df):\n","            break\n","          continue\n","\n","        strat_version = config.strat_version\n","\n","        # ------- fee init ------- #\n","        if config.ep_set.entry_type == 'LIMIT':\n","          fee = config.trader_set.limit_fee\n","        else:\n","          fee = config.trader_set.market_fee\n","        \n","        # --------------- set partial tp --------------- #\n","        short_tps = [res_df['short_tp_{}'.format(strat_version)]]\n","        long_tps = [res_df['long_tp_{}'.format(strat_version)]]\n","\n","        # short_tps = [short_tp2, short_tp] # org\n","        # long_tps = [long_tp2, long_tp]\n","        \n","        # short_tps = [short_tp, short_tp2]\n","        # long_tps = [long_tp, long_tp2]\n","        # print(\"i after long_ep_loc :\", i)\n","\n","        if config.out_set.static_out:\n","          p_i = initial_i\n","        else:\n","          p_i = i\n","\n","        ep_j = initial_i\n","        out_j = initial_i\n","      \n","        # -------------- limit waiting const. -------------- #      \n","        if config.ep_set.entry_type == \"LIMIT\":\n","\n","          allow_ep_in = 0 if strat_version in [\"v5_2\"] else 1\n","          entry_done = 0\n","          entry_open = 0\n","          prev_sar = None\n","\n","          # for e_j in range(i, len(res_df)):   \n","\n","          if i + 1 >= len(res_df):  # i should be checked if e_j starts from i+1\n","            break\n","          for e_j in range(i + 1, len(res_df)):  # entry Í∞Ä close Í∏∞Ï§ÄÏùº Í≤ΩÏö∞ ÏÇ¨Ïö© (open Í∏∞Ï§ÄÏùº Í≤ΩÏö∞ i Î∂ÄÌÑ∞ ÏãúÏûëÌï¥ÎèÑ Î¨¥Î∞©Ìï®)\n","            \n","            if not config.ep_set.static_ep:\n","              ep_j = e_j  \n","              out_j = e_j\n","            \n","            if config.tp_set.static_tp:\n","              # if config.ep_set.tpout_onexec:\n","              #   tp_j = e_j\n","              # else:\n","                tp_j = initial_i\n","            else:\n","              tp_j = e_j  \n","\n","            \n","            #          np.inf ep         #\n","            # if long_ep.iloc[initial_i] == np.inf:\n","            #   break\n","            \n","            #     1. check ep_out     #\n","            if config.loc_set.zone.ei_k != \"None\":\n","\n","              if res_df['high'].iloc[e_j] >= res_df['h_long_rtc_1_{}'.format(strat_version)].iloc[tp_j] + \\\n","                res_df['h_long_rtc_gap_{}'.format(strat_version)].iloc[tp_j] * config.loc_set.zone.ei_k:\n","              # if res_df['high'].iloc[e_j] >= res_df['long_tp_{}'.format(strat_version)].iloc[tp_j]:                \n","              # if np_timeidx[e_j] % config.loc_set.point.tf_entry == config.loc_set.point.tf_entry - 1:\n","                break\n","\n","              # elif (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[e_j - 1] <= 50 + config.loc_set.point.osc_band) & \\\n","              #                  (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[e_j] > 50 + config.loc_set.point.osc_band):\n","              #   break            \n","\n","            # if config.loc_set.zone.c_itv_ticks != \"None\":\n","\n","            #   if np_timeidx[e_j] % config.loc_set.zone.c_itv_ticks == config.loc_set.zone.c_itv_ticks - 1:\n","            #     break\n","\n","            #     2. ep_loc.point2\n","            if strat_version == \"v5_2\" and allow_ep_in == 0:\n","              if (res_df['dc_lower_1m'].iloc[e_j - 1] >= res_df['dc_lower_15m'].iloc[e_j]) & \\\n","                  (res_df['dc_lower_15m'].iloc[e_j - 1] != res_df['dc_lower_15m'].iloc[e_j]): # & \\\n","                  # (res_df['dc_lower_15m'].iloc[e_j] >= res_df['ema_5m'].iloc[e_j]):\n","                allow_ep_in = 1\n","                out_j = e_j\n","                # ep_j = e_j\n","                # continue  # limit entry Ïùò Í≤ΩÏö∞ ep_loc.point2 ÏôÑÎ£å ÏãúÏ†ê Ïù¥ÌõÑÎ°ú ÏßÑÏûÖÏù¥ Í∞ÄÎä•Ìïú Ï†ê\n","                #     htf indi. Í∞Ä backi2 Í∏∞Ï§ÄÏù¥Îùº continue ÌïòÏßÄ ÏïäÏïÑÎèÑ Îê®\n","              \n","              #     2-1. ep_out (ep_loc2) by ep_loc.point\n","              # if allow_ep_in and config.loc_set.zone.tr_thresh != \"None\":\n","              #   ep_ = res_df['close'].iloc[ep_j - 1]\n","              #   tr = ((res_df['long_tp_{}'.format(strat_version)].iloc[tp_j] - ep_ - tp_fee * ep_) / (ep_ - res_df['long_out_{}'.format(strat_version)].iloc[out_j] + out_fee * ep_))\n","              #   # print(\"tr in long :\", tr)\n","              #   if tr < config.loc_set.zone.tr_thresh:\n","              #     break\n","\n","            #     3. check ep_in      #\n","            if allow_ep_in and res_df['low'].iloc[e_j] <= res_df['long_ep_{}'.format(strat_version)].iloc[ep_j]:\n","              entry_done = 1\n","              # print(\"e_j :\", e_j)\n","              \n","              #     Ïù¥ÎØ∏, e_j open Ïù¥ ep Î≥¥Îã§ ÎÇÆÏùÄ Í≤ΩÏö∞, entry[initial_i] => -2 Î°ú Î≥ÄÍ≤Ω   #\n","              if res_df['open'].iloc[e_j] <= res_df['long_ep_{}'.format(strat_version)].iloc[ep_j]:\n","                entry_open = 1\n","\n","              break\n","\n","\n","          i = e_j\n","          # print(\"i = e_j :\", i)\n","\n","          if entry_done:      \n","            pass\n","            # print(\"i, entry_done :\", i, entry_done)\n","\n","          else:\n","            i += 1\n","            if i >= len(res_df):\n","              # print(\"i :\", i)\n","              break\n","\n","            # print(\"i in continue :\", i)          \n","            continue\n","\n","\n","        # ---------------- end wait ---------------- #\n","        # if e_j - initial_i >= 200:\n","        #   print(\"e_j, initial_i :\", e_j, initial_i)\n","        \n","        # print(i)\n","\n","        open_list.append(initial_i)\n","        zone_list.append(zone)\n","        side_list.append('l')\n","\n","        if config.ep_set.entry_type == 'MARKET':\n","          ep_list = [res_df['close'].iloc[ep_j]]\n","        else:\n","          if not entry_open:\n","            ep_list = [res_df['long_ep_{}'.format(strat_version)].iloc[ep_j]]    # dynamic_ep Ïù∏ Í≤ΩÏö∞ÏóêÎèÑ e_j Í∞Ä ep_j Î°ú ÎåÄÏùëÎêòÍ∏∞ ÎïåÎ¨∏Ïóê ep_j Îßå ÏÇ¨Ïö©Ìï¥ÎèÑ Î¨¥Í¥Ä\n","          else:\n","            # try:\n","            #   ep_list = [res_df['open'].iloc[e_j]]\n","            # except Exception as e:\n","            fee = config.trader_set.market_fee\n","            ep_list = [res_df['open'].iloc[e_j]]  # --> Ï≤¥Í≤∞Ïù¥ ÎêòÎäî e_j idx Í∏∞Ï§ÄÏúºÎ°ú ÌïòÎäîÍ≤å ÎßûÏùå\n","\n","        if not config.lvrg_set.static_lvrg:\n","\n","          ep_ = ep_list[0]\n","          out_ = res_df['long_out_{}'.format(strat_version)].iloc[out_j]\n","          if override:\n","            config.lvrg_set.leverage = lvrg_set(res_df, config, \"BUY\", ep_, out_, fee)\n","          else:\n","            config.lvrg_set.leverage = utils_public.lvrg_set(res_df, config, \"BUY\", ep_, out_, fee)\n","\n","          # -------------- leverage rejection -------------- #\n","          if config.lvrg_set.leverage == None:\n","            open_list.pop()\n","            zone_list.pop()\n","            side_list.pop()\n","            i += 1\n","            if i >= len(res_df):\n","              break\n","            continue   \n","\n","        leverage_list.append(config.lvrg_set.leverage)\n","          \n","        if config.ep_set.entry_type == \"MARKET\":\n","          ep_idx_list = [ep_j]\n","        else:\n","          ep_idx_list = [e_j]\n","\n","        out_idx_list = [out_j]\n","\n","        tp_list = []\n","        tp_idx_list = []\n","\n","        partial_tp_cnt = 0\n","        hedge_cnt = 1\n","\n","        h_ep, h_tp = None, None        \n","        h_i, h_j = None, None      \n","\n","        trade_done = 0\n","        cross_on = 0\n","        out = 0          \n","        config.out_set.retouch = 0\n","\n","\n","        if i == len(res_df) - 1: # if j start from i + 1 \n","          open_list.pop()\n","          zone_list.pop()\n","          side_list.pop()\n","\n","        for j in range(i + 1, len(res_df)):\n","\n","        # for j in range(i, len(res_df)):  \n","          \n","          if config.tp_set.static_tp:\n","            if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","              tp_j = ep_j\n","            else:\n","              tp_j = initial_i\n","          else:\n","            tp_j = j\n","\n","          if config.out_set.static_out:\n","            if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","              out_j = ep_j\n","            # else:           \n","            #   out_j = initial_i\n","          else:\n","            out_j = j   \n","\n","          # -------------- hedge only once -------------- #\n","          #             ÏùºÎã®, h_quantity Îäî Ï¥àÍ∏∞ ÏßÑÏûÖÍ≥º ÎèôÏùºÌïòÍ≤å ÏÑ§Ï†ï         #\n","          # if res_df['low'].iloc[j] <= res_df['minor_ST2_Down'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] <= res_df['minor_ST2_Down'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] <= res_df['minor_ST3_Down'].iloc[j] and hedge_cnt == 1:\n","\n","          #   h_ep = res_df['close'].iloc[j]\n","          #   hedge_cnt -= 1\n","          #   h_i = j\n","\n","          # -------------- sub ep -------------- #\n","          # if res_df['low'].iloc[j - 1] >= res_df['sar2'].iloc[j - 1] and res_df['low'].iloc[j] < res_df['sar2'].iloc[j]:\n","            \n","          #   sub_ep = res_df['sar2'].iloc[j - 1]\n","\n","          #   if sub_ep > ep_list[-1]:\n","          #     ep_list.append(sub_ep)\n","          #     ep_idx_list.append(j)\n","\n","\n","          # -------------- ultimate tp -------------- #\n","          if not config.tp_set.non_tp:\n","            #            1. by level          #\n","            if config.tp_set.tp_type == \"LIMIT\" or config.tp_set.tp_type == \"BOTH\":\n","              \n","\n","              for l_i, long_tp_ in enumerate(long_tps):\n","\n","                if res_df['high'].iloc[j] >= long_tp_.iloc[tp_j] and partial_tp_cnt == l_i:\n","                # if res_df['high'].iloc[j] >= long_tp.iloc[j]:\n","\n","                  if l_i == len(long_tps) - 1:\n","                    trade_done = 1\n","\n","                  partial_tp_cnt += 1\n","\n","                  #         dynamic tp        #\n","                  # if 0:\n","                  if long_tp_.iloc[j] != long_tp_.iloc[j - 1] and not config.tp_set.static_tp:\n","\n","                    #   tp limit Ïù¥ Î∂àÍ∞ÄÌïú Í≤ΩÏö∞ = open Ïù¥ Ïù¥ÎØ∏, tp Î•º ÎÑòÏùÄ Í≤ΩÏö∞ # \n","                    # if res_df['open'].iloc[j] >= long_tp_.iloc[initial_i]:\n","                    if res_df['open'].iloc[j] >= long_tp_.iloc[j]:\n","\n","                      # tp = long_tp_.iloc[initial_i]\n","                      tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"d-long_open {}\".format(strat_version))\n","\n","                    \n","                    #   tp limit Ïù¥ Í∞ÄÎä•Ìïú Í≤ΩÏö∞ = open Ïù¥ ÏïÑÏßÅ, tp Î•º ÎÑòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ # \n","                    else:\n","                      \n","                      # tp = long_tp_.iloc[initial_i]\n","                      tp = long_tp_.iloc[j]\n","                      # tp = res_df['open'].iloc[j]\n","                      \n","                      if trade_done:\n","                        tp_state_list.append(\"d-long_tp {}\".format(strat_version))\n","\n","                  #         static tp         #\n","                  else:\n","\n","                    #   tp limit Ïù¥ Î∂àÍ∞ÄÌïú Í≤ΩÏö∞ = open Ïù¥ Ïù¥ÎØ∏, tp Î•º ÎÑòÏùÄ Í≤ΩÏö∞ # \n","                    #   non_inversion Ïùò Í≤ΩÏö∞, short_tp Í∞Ä Í∞ÄÎä•Ìï®   #\n","\n","                    if res_df['open'].iloc[j] >= long_tp_.iloc[tp_j]:\n","                    # if res_df['open'].iloc[j] >= long_tp_.iloc[initial_i]:\n","\n","                      # tp = long_tp_.iloc[initial_i]\n","                      tp = long_tp_.iloc[tp_j]\n","\n","                      # tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"s-long_tp {}\".format(strat_version))\n","\n","                    \n","                    #   tp limit Ïù¥ Í∞ÄÎä•Ìïú Í≤ΩÏö∞ = open Ïù¥ ÏïÑÏßÅ, tp Î•º ÎÑòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ # \n","                    else:\n","                      \n","                      # tp = long_tp_.iloc[initial_i]\n","                      tp = long_tp_.iloc[tp_j]\n","\n","                      # tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"s-long_tp {}\".format(strat_version))         \n","                  \n","                  tp_list.append(tp)\n","                  tp_idx_list.append(j)\n","                  fee += config.trader_set.limit_fee\n","\n","            #           2. by time        #\n","            if config.tp_set.tp_type == 'MARKET' or (config.tp_set.tp_type == \"BOTH\" and not trade_done):\n","\n","              market_tp = 0\n","\n","              # -------------- sar tp -------------- #\n","              # if (res_df['low'].iloc[j] <= res_df['sar2'].iloc[j]) & \\\n","              #   (res_df['low'].iloc[j - 1] > res_df['sar2'].iloc[j - 1]) & \\\n","              #   (res_df['low'].iloc[j - 2] > res_df['sar2'].iloc[j - 2]):\n","              \n","              #       inversion     #\n","              # if (res_df['high'].iloc[j] >= res_df['sar2'].iloc[j]) & \\\n","              #   (res_df['high'].iloc[j - 1] < res_df['sar2'].iloc[j - 1]) & \\\n","              #   (res_df['high'].iloc[j - 2] < res_df['sar2'].iloc[j - 2]):\n","\n","\n","              # ----------- st long ----------- #\n","              # if res_df['close'].iloc[j] >= res_df['long_tp'].iloc[tp_j]:\n","\n","              # -------------- sar pb tp -------------- #\n","              # if res_df['high'].iloc[j] >= res_df['long_tp'].iloc[initial_i]:\n","\n","              # -------------- st tp -------------- #\n","              # if res_df['close'].iloc[j] < res_df['middle_line'].iloc[j]:\n","\n","              # -------------- fisher tp -------------- #\n","              # if entry[j] == -1:\n","              \n","              # -------------- timestamp -------------- #\n","              if config.tp_set.time_tp:\n","                if np_timeidx[j] % config.loc_set.zone.c_itv_ticks == config.loc_set.zone.c_itv_ticks - 1 and \\\n","                  j - initial_i >= config.loc_set.zone.c_itv_ticks:\n","                  market_tp = 1\n","\n","              # -------------- rsi -------------- #\n","              if strat_version in ['v7_3']:\n","                if (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j - 1] <= 50 + config.loc_set.point.osc_band) & \\\n","                                (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j] > 50 + config.loc_set.point.osc_band):\n","                # if (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j - 1] >= 50 + config.loc_set.point.osc_band) & \\\n","                #                  (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j] < 50 + config.loc_set.point.osc_band):\n","                  market_tp = 1\n","\n","                # -------------- cci -------------- #\n","                # if (res_df['cci_%s' % config.loc_set.point.exp_itv].iloc[j - 1] <= config.loc_set.point.osc_band) & \\\n","                #                  (res_df['cci_%s' % config.loc_set.point.exp_itv].iloc[j] > config.loc_set.point.osc_band):\n","                #   market_tp = 1\n","\n","              # ---------------------------- early out phase ---------------------------- #\n","\n","              #        osc slight touch     #\n","              if allow_osc_touch:\n","                if (np.max(res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[initial_i:j]) > 50 + config.loc_set.point.osc_band - rsi_gap) & \\\n","                  (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j] <= 50):\n","                  market_tp = 1\n","\n","              #         tp early out        #\n","              # # if (np.max(res_df['high'].iloc[e_j:j]) > res_df['long_tp'].iloc[tp_j]) & \\\n","              # if (np.max(res_df['high'].iloc[e_j:j]) > res_df['h_long_rtc_1'].iloc[tp_j] + res_df['h_long_rtc_gap'].iloc[tp_j] * early_out_tpg) & \\\n","              #   (res_df['close'].iloc[j] <= res_df['long_ep'].iloc[ep_j]):\n","              #   market_tp = 1 \n","\n","              # if strat_version == \"v7\":\n","              #   if res_df['dc_lower_1m'].iloc[j] < res_df['dc_lower_5m'].iloc[j]:\n","              #     market_tp = 1\n","\n","\n","              #         bb_upper early out        #\n","              if strat_version in [\"v5_2\"]:\n","                if res_df['close'].iloc[j] > res_df['bb_upper_5m'].iloc[j] > res_df['close'].iloc[j - 1]:\n","                  cross_on = 1\n","\n","                if cross_on == 1 and res_df['close'].iloc[j] < res_df['bb_lower_5m'].iloc[j] < res_df['close'].iloc[j - 1]:\n","                  market_tp = 1\n","                              \n","              if market_tp:\n","\n","                tp = res_df['close'].iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                trade_done = 1\n","\n","                if trade_done:\n","                  tp_state_list.append(\"long close tp {}\".format(strat_version))\n","                  # print(\"early_out passed !\")\n","\n","                tp_list.append(tp) \n","                tp_idx_list.append(j)\n","                fee += config.trader_set.market_fee\n","\n","\n","\n","          # -------------- out -------------- #\n","          if not trade_done and config.out_set.use_out and j != len(res_df) - 1:              \n","\n","            # -------------- macd -------------- #\n","            # if res_df['macd_hist3'].iloc[j] < 0:\n","            # # if res_df['macd_hist3'].iloc[i] > 0 and res_df['macd_hist3'].iloc[j] < 0:\n","\n","            # -------------- st config.out_set.retouch -------------- #\n","            # out = 1 ÏÉÅÌÉúÎ©¥ ÎèôÏùº tick ÏóêÏÑú config.out_set.retouch Î•º Ï°∞ÏÇ¨Ìï† Í±∞Í∏∞ ÎïåÎ¨∏Ïóê, Î®ºÏ†Ä Í≤ÄÏÇ¨Ìï®\n","            # Í∑∏Î¶¨Í≥†, out Í∏∞Ï§ÄÏù¥ close Îùº Ïù¥Í≤å ÎßûÏùå \n","            # close Í∞Ä long_out Î≥¥Îã§ ÎÇ¥Î†§Í∞ÄÏûàÎäî ÏÉÅÌÉúÏùºÌÖåÎãà high Î•º Ï°∞ÏÇ¨ÌïòÎäîÍ≤å ÎßûÏùå           \n","            # if out and res_df['high'].iloc[j] >= long_out.iloc[out_j]:\n","            #   config.out_set.retouch = 1\n","\n","            \n","            # ------- ÏùºÏ†ïÏãúÍ∞Ñ Ïù¥ÏÉÅ, dynamic_out Ï†ÅÏö© ------ #\n","            try:\n","              if j - out_idx >= config.out_set.retouch_out_period:\n","                static_long_out = res_df['long_out_{}'.format(strat_version)].iloc[j]\n","            \n","            except Exception as e:\n","              pass\n","\n","              # ------- static out ------ #\n","            try:\n","              if out and res_df['high'].iloc[j] >= static_long_out:\n","                config.out_set.retouch = 1\n","            except Exception as e:\n","              pass\n","\n","              # ------- config.out_set.retouch out ------ #\n","            # if out and res_df['high'].iloc[j] >= long_out2.iloc[out_j]:\n","            #   config.out_set.retouch = 1\n","\n","\n","\n","            # -------------- st -------------- #\n","            # if res_df['close'].iloc[j] < res_df['middle_line'].iloc[j]:\n","            # if res_df['close'].iloc[j] < res_df['minor_ST3_Down'].iloc[j]:\n","            # if res_df['close'].iloc[j] < lower_middle.iloc[j]:\n","            # if res_df['close'].iloc[j] < res_df['minor_ST1_Down'].iloc[j]:\n","            if out == 0:\n","              if config.out_set.hl_out:\n","                if res_df['low'].iloc[j] <= res_df['long_out_{}'.format(strat_version)].iloc[out_j]: # check out only once\n","                  out = 1\n","\n","              else:\n","                if res_df['close'].iloc[j] <= res_df['long_out_{}'.format(strat_version)].iloc[out_j]: # check out only once\n","                  out = 1\n","\n","              # out_idx = j\n","              # static_long_out = long_out.iloc[out_j]\n","              # if config.out_set.second_out:\n","              # static_long_out = long_out.iloc[out_j] - res_df['st_gap'].iloc[out_j] * config.out_set.second_out_gap\n","\n","            # if out == 0 and res_df['low'].iloc[j] <= long_out.iloc[out_j]: # check out only once\n","            #   out = 1            \n","            \n","\n","\n","            # -------------- sma -------------- #\n","            # if res_df['close'].iloc[j] < res_df[sma].iloc[j]:\n","\n","            # -------------- sar -------------- #\n","            # if res_df['close'].iloc[j] < res_df['minor_ST3_Down'].iloc[j] \\\n","            #   or res_df['sar2'].iloc[j] >= res_df['low'].iloc[j]:\n","            # if res_df['close'].iloc[j] < long_out.iloc[initial_i]: # or \\\n","            #   #  res_df['close'].iloc[j] < res_df['sar2'].iloc[j]:\n","            #   #  res_df['sar2_uptrend'].iloc[j] == 0 or \\\n","            #   out = 1\n","            \n","            # if res_df['sar2_uptrend'].iloc[j] == 0:\n","\n","            #     if prev_sar is None:\n","            #       prev_sar = res_df['sar2'].iloc[j - 1]\n","                \n","            #     if res_df['close'].iloc[j] < prev_sar:\n","            #       out = 1\n","\n","            # else:\n","            #   if res_df['close'].iloc[j] < res_df['sar2'].iloc[j]:\n","            #     out = 1\n","\n","            # -------------- hl -------------- #\n","            # if res_df['close'].iloc[j] < long_out.iloc[tp_j]:\n","\n","            # -------------- stoch -------------- #\n","            # if res_df['stoch'].iloc[j - 2] <= res_df['stoch'].iloc[j - 1] and \\\n","            #   res_df['stoch'].iloc[j - 1] > res_df['stoch'].iloc[j] and \\\n","            #   res_df['stoch'].iloc[j - 1] >= stoch_upper:\n","            #   out = 1\n","\n","            # config.out_set.retouch 1 Í≤ΩÏö∞, config.out_set.retouch Ï°∞Í±¥ÎèÑ ÏûàÏñ¥ÏïºÌï®\n","            if out:\n","              if config.out_set.retouch:\n","                if config.out_set.retouch:\n","                  pass\n","                else:\n","                    continue\n","\n","              else:\n","                pass\n","\n","              if config.out_set.price_restoration:\n","                tp = res_df['long_out_{}'.format(strat_version)].iloc[out_j]\n","                if config.out_set.second_out:\n","                  tp = res_df['long_out2_{}'.format(strat_version)].iloc[out_j]\n","\n","                # if res_df['close'].iloc[j] < tp: # Ïù¥ Í≤ΩÏö∞Î•º protect ÌïòÎäîÍ±¥ insane ÏûÑ\n","                # # if res_df['high'].iloc[j] < tp: # --> config.out_set.hl_out ÏÇ¨Ïö©Ïãú Ïù¥ Ï°∞Í±¥ÏùÄ valid Ìï®\n","                #   tp = res_df['close'].iloc[j]\n","\n","              else:\n","\n","                if res_df['open'].iloc[j] <= res_df['long_out_{}'.format(strat_version)].iloc[out_j]:\n","                  tp = res_df['open'].iloc[j]\n","                else:\n","                  if config.out_set.hl_out:\n","                    tp = res_df['long_out_{}'.format(strat_version)].iloc[out_j]\n","                  else:\n","                    tp = res_df['close'].iloc[j]\n","\n","                # if not config.out_set.static_out:\n","                #   if res_df['open'].iloc[j] <= res_df['long_out'].iloc[out_j]: # dynamic close out Ïùò open Í≥†Î†§\n","                #     tp = res_df['open'].iloc[j]\n","                #   else:\n","                #     tp = res_df['close'].iloc[j]\n","\n","                # else:\n","                #   tp = res_df['close'].iloc[j]\n","\n","              if config.out_set.retouch: # out Í≥º open ÎπÑÍµê\n","                if config.out_set.second_out:  # long_out = sell\n","                # config.out_set.second_out ÏùÄ Í∏∞Î≥∏Ï†ÅÏúºÎ°ú limit Ïù¥Îùº Ïù¥ Íµ¨Ï°∞Í∞Ä Í∞ÄÎä•Ìï®\n","                  if res_df['open'].iloc[j] >= res_df['long_out2_{}'.format(strat_version)].iloc[out_j]: # dynamic_out Ïùº Í≤ΩÏö∞ Í≥†Î†§Ìï¥ÏïºÌï®\n","                    tp = res_df['open'].iloc[j]\n","                else:\n","                  if res_df['open'].iloc[j] >= res_df['long_out_{}'.format(strat_version)].iloc[out_j]: # dynamic_out Ïùº Í≤ΩÏö∞ Í≥†Î†§Ìï¥ÏïºÌï®\n","                    tp = res_df['open'].iloc[j]\n","\n","                try:\n","                  if res_df['open'].iloc[j] >= static_long_out:\n","                    tp = res_df['open'].iloc[j]\n","                  else:\n","                    tp = static_long_out\n","                except Exception as e:\n","                  pass\n","\n","              # tp = res_df['open'].iloc[j]\n","              tp_state_list.append(\"long close_out {}\".format(strat_version))\n","              trade_done = 1\n","\n","              tp_list.append(tp)\n","              tp_idx_list.append(j)\n","              fee += config.trader_set.market_fee\n","\n","          \n","          # -------------- non tp -------------- #\n","          if j == len(res_df) - 1:\n","            trade_done = 1\n","            tp = res_df['close'].iloc[j]\n","            tp_list.append(tp) \n","            tp_idx_list.append(j)\n","            fee += config.trader_set.market_fee\n","\n","\n","          if trade_done:\n","\n","            # --------------- tp_ratio info --------------- #\n","            try:\n","              if config.out_set.use_out:\n","                done_tp = res_df['long_tp_{}'.format(strat_version)].iloc[tp_j]\n","                done_out = res_df['long_out_{}'.format(strat_version)].iloc[out_j]\n","\n","                if done_out >= ep_list[0]: # loss >= 1\n","                  tp_ratio = np.nan\n","                  dr = np.nan\n","                  # print(\"loss >= 1\")\n","                else:\n","                  tp_ratio = ((done_tp - ep_list[0] - tp_fee * ep_list[0]) / (ep_list[0] - done_out + out_fee * ep_list[0]))                \n","                  dr = ((done_tp - ep_list[0]) / (ep_list[0] - done_out))          \n","\n","              else:      \n","                dr = np.nan\n","                tp_ratio = np.nan\n","\n","            except Exception as e:\n","              print(\"error in tr phase :\", e)\n","              dr = np.nan              \n","              tp_ratio = np.nan\n","            \n","            tp_ratio_list.append(tp_ratio)\n","            long_tp_ratio_list.append(tp_ratio)\n","            dr_list.append(dr)\n","            long_dr_list.append(dr)\n","\n","\n","            qty_list = []\n","            temp_pr_list = []\n","            r_qty = 1\n","            for q_i in range(len(tp_list) - 1, -1, -1):\n","\n","              if len(tp_list) == 1:\n","                temp_qty = r_qty\n","              else:\n","                if q_i !=0:\n","                  temp_qty = r_qty / config.tp_set.partial_qty_divider\n","                else:\n","                  temp_qty = r_qty\n","\n","              # temp_pr = (tp_list[q_i] / ep_list[0] - fee - 1) * temp_qty\n","              temp_pr = (tp_list[q_i] / ep_list[0] - fee - 1) * temp_qty * config.lvrg_set.leverage\n","              r_qty -= temp_qty\n","\n","              temp_pr_list.append(temp_pr)\n","\n","            temp_pr = sum(temp_pr_list) + 1\n","\n","            # -------------------- sub ep -> pr calc -------------------- #\n","            if len(ep_list) > 1:\n","            \n","              p_ep_pr = []\n","              for sub_ep_ in ep_list:\n","                sub_pr = (tp / sub_ep_ - fee - 1) * config.lvrg_set.leverage\n","                p_ep_pr.append(sub_pr)\n","\n","              temp_pr = sum(p_ep_pr) + 1\n","\n","              print(\"temp_pr :\", temp_pr)\n","\n","            # ------------ hedge + non_hedge pr summation ------------ #\n","            #         hedge pr direction is opposite to the origin       #\n","            hedge_pr = 1\n","            if hedge_cnt == 0:\n","\n","              #       hedge tp      #\n","              h_tp = res_df['close'].iloc[j]\n","              hedge_pr = (h_ep / h_tp - fee - 1) * config.lvrg_set.leverage  # hedge short\n","              temp_pr += hedge_pr\n","              h_j = j\n","\n","\n","            # ll = min(res_df['low'].iloc[i:j + 1])\n","            ll = min(res_df['low'].iloc[i:j])   # pos. Ï†ïÎ¶¨ÌïòÍ∏∞ Î∞îÎ°ú ÏßÅÏ†ÑÍπåÏßÄ\n","            long_liq = (ll / ep_list[0] - fee - 1) * config.lvrg_set.leverage + 1\n","\n","            if j != len(res_df) - 1:\n","\n","              ep_tp_list.append((ep_list, tp_list))\n","              # trade_list.append((ep_idx_list, tp_idx_list))\n","              trade_list.append((ep_idx_list, out_idx_list, tp_idx_list))\n","\n","              liqd_list.append(long_liq)\n","              long_liqd_list.append(long_liq)\n","\n","              h_ep_tp_list.append((h_ep, h_tp))        \n","              h_trade_list.append([initial_i, h_i, h_j])                \n","\n","              pr_list.append(temp_pr)\n","              fee_list.append(fee)\n","              long_list.append(temp_pr)\n","              long_fee_list.append(fee)\n","\n","              h_pr_list.append(hedge_pr)\n","              h_long_list.append(hedge_pr)                    \n","\n","              i = j\n","              break\n","            \n","            else:\n","\n","              # ep_tp_list.append((ep_list, tp_list))\n","              # trade_list.append((ep_idx_list, tp_idx_list))\n","              \n","              # pr_list Î•º ÎÑ£ÏßÄ ÏïäÏùÑÍ±∞ÎãàÍπå, open_list ÏóêÏÑú Ìï¥Îãπ idx Îäî pop\n","              open_list.pop()\n","              zone_list.pop()\n","              side_list.pop()\n","          \n","              #         tp ÎØ∏Ï≤¥Í≤∞ survey        #\n","              nontp_liqd_list.append(long_liq)\n","              nontp_long_liqd_list.append(long_liq)\n","              nontp_long_indexs.append(i)\n","              nontp_long_ep_list.append(ep_list[0])\n","              \n","              nontp_long_pr = (tp / ep_list[0] - fee - 1) * config.lvrg_set.leverage + 1\n","              nontp_pr_list.append(nontp_long_pr)\n","              nontp_long_pr_list.append(nontp_long_pr)\n","\n","            if len(open_list) > len(trade_list):\n","              print('debug from index :', i)\n","              print(len(open_list), len(trade_list))\n","              print(\"len(res_df) :\", len(res_df))\n","              assert len(open_list) == len(trade_list), 'stopped'\n","      \n","      i += 1  # if entry starts with prev trade's close, do not use it ! \n","      # print(\"i in end :\", i)\n","      if i >= len(res_df):\n","        break\n","\n","\n","\n","    # -------------------- result analysis -------------------- #\n","    # try:\n","    print(\"elapsed_time :\", time.time() - start_0)\n","\n","    plt.style.use('default')\n","    # mpl.rcParams.update(mpl.rcParamsDefault)\n","\n","    plt.figure(figsize=(16, 12))\n","    # plt.figure(figsize=(12, 8))\n","    # plt.figure(figsize=(10, 6))\n","    plt.suptitle(key)\n","\n","    try:\n","      np_pr = np.array(pr_list)\n","\n","      sr = sharpe_ratio(np_pr)\n","\n","      dpf = (len(res_df) / 1440) / len(np_pr)\n","\n","      np_zone_list = np.array(zone_list)\n","      # np_pr_list = np.array(pr_list)\n","      np_side_list = np.array(side_list)\n","\n","      t_w = np.sum(np.where((np_zone_list == 't') & (np_pr > 1), 1, 0))\n","      c_w = np.sum(np.where((np_zone_list == 'c') & (np_pr > 1), 1, 0))\n","      t_ls = np.sum(np.where((np_zone_list == 't') & (np_pr < 1), 1, 0))\n","      c_ls = np.sum(np.where((np_zone_list == 'c') & (np_pr < 1), 1, 0))\n","\n","      # np_pr = (np.array(pr_list) - 1) * config.lvrg_set.leverage + 1\n","\n","      # ----- fake_pr ----- #\n","      # np_pr = np.where(np_pr > 1, 1 + (np_pr - 1) * 3, np_pr)\n","\n","      total_pr = np.cumprod(np_pr)\n","\n","      for_sum_pr = np_pr - 1\n","      for_sum_pr[0] = 1\n","      sum_pr = np.cumsum(for_sum_pr)\n","      sum_pr = np.where(sum_pr < 0, 0, sum_pr)\n","\n","      wr = len(np_pr[np_pr > 1]) / len(np_pr[np_pr != 1])\n","      \n","      total_rollmax_pr = np.maximum.accumulate(total_pr)\n","      total_acc_mdd = np.max((total_rollmax_pr - total_pr) / total_rollmax_pr)\n","      total_rollmax_sumpr = np.maximum.accumulate(sum_pr)\n","      total_sum_mdd = np.max((total_rollmax_sumpr - sum_pr) / total_rollmax_sumpr)\n","\n","      np_tp_ratio_list = np.array(tp_ratio_list) # Ï¥àÍ∏∞Ïóê tr ÏùÑ Ï†ïÌïòÎäîÍ±∞Îùº mean ÏÇ¨Ïö©ÌïòÎäîÍ≤å ÎßûÏùå\n","      mean_tr = np.mean(np_tp_ratio_list[np.isnan(np_tp_ratio_list) == 0])\n","\n","      np_dr_list = np.array(dr_list) # Ï¥àÍ∏∞Ïóê tr ÏùÑ Ï†ïÌïòÎäîÍ±∞Îùº mean ÏÇ¨Ïö©ÌïòÎäîÍ≤å ÎßûÏùå\n","      mean_dr = np.mean(np_dr_list[np.isnan(np_dr_list) == 0])\n","\n","      # pr_gap = (np_pr - 1) / config.lvrg_set.leverage + fee\n","      # tp_gap_ = pr_gap[pr_gap > 0]\n","      # # mean_config.tr_set.tp_gap = np.mean(pr_gap[pr_gap > 0])\n","      # mean_ls_gap = np.mean(pr_gap[pr_gap < 0])\n","\n","      # ---- profit fee ratio ---- #\n","      # mean_pgfr = np.mean((tp_gap_ - fee) / abs(tp_gap_ + fee))\n","\n","      # plt.subplot(121)\n","      plt.subplot(231)\n","      plt.plot(total_pr)\n","      plt.plot(sum_pr, color='gold')\n","      if len(nontp_liqd_list) != 0:\n","        plt.title(\"wr : %.3f\\n len(td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (wr, len(np_pr[np_pr != 1]), dpf, np.min(np_pr), total_pr[-1], sum_pr[-1], sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (total_acc_mdd, total_sum_mdd, config.lvrg_set.leverage, min(liqd_list), mean_tr, mean_dr)  + \\\n","                  \"\\n nontp_liqd_cnt : %s\\nnontp_liqd : %.3f\\nontp_liqd_pr : %.3f\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_liqd_list), min(nontp_liqd_list), min(nontp_pr_list), t_w, c_w, t_ls, c_ls) ,\n","                  position=title_position)\n","      else:\n","        plt.title(\"wr : %.3f\\n len(td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\" \n","                  % (wr, len(np_pr[np_pr != 1]), dpf, np.min(np_pr), total_pr[-1], sum_pr[-1], sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (total_acc_mdd, total_sum_mdd, config.lvrg_set.leverage, min(liqd_list), mean_tr, mean_dr)  + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_liqd_list), t_w, c_w, t_ls, c_ls) ,\n","                  position=title_position)\n","                  # \"\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\\n nontp_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  # % (config.lvrg_set.leverage, min(liqd_list), mean_tr, mean_dr, len(nontp_liqd_list), t_w, c_w, t_ls, c_ls), \n","                  # position=title_position)\n","      # plt.show()\n","\n","      survey_df.iloc[survey_i] = wr, sr, len(np_pr[np_pr != 1]), dpf, \\\n","        total_pr[-1], sum_pr[-1], total_acc_mdd, total_sum_mdd, min(liqd_list), np.min(np_pr), mean_tr, mean_dr\n","\n","      print('supblot231 passed')\n","\n","    except Exception as e:\n","      print(\"error in 231 :\", e)\n","\n","\n","    try:\n","      #         short only      #\n","      short_np_pr = np.array(short_list)\n","\n","      short_sr = sharpe_ratio(short_np_pr)\n","\n","      short_dpf = (len(res_df) / 1440) / len(short_np_pr)\n","\n","      short_total_pr = np.cumprod(short_np_pr)\n","      \n","      short_for_sum_pr = short_np_pr - 1\n","      short_for_sum_pr[0] = 1\n","      short_sum_pr = np.cumsum(short_for_sum_pr)\n","      short_sum_pr = np.where(short_sum_pr < 0, 0, short_sum_pr)\n","\n","      short_wr = len(short_np_pr[short_np_pr > 1]) / len(short_np_pr[short_np_pr != 1])\n","      \n","      t_w_s = np.sum(np.where((np_zone_list == 't') & (np_pr > 1) & (np_side_list == 's'), 1, 0))\n","      c_w_s = np.sum(np.where((np_zone_list == 'c') & (np_pr > 1) & (np_side_list == 's'), 1, 0))\n","      t_ls_s = np.sum(np.where((np_zone_list == 't') & (np_pr < 1) & (np_side_list == 's'), 1, 0))\n","      c_ls_s = np.sum(np.where((np_zone_list == 'c') & (np_pr < 1) & (np_side_list == 's'), 1, 0))\n","\n","      short_rollmax_pr = np.maximum.accumulate(short_total_pr)\n","      short_acc_mdd = np.max((short_rollmax_pr - short_total_pr) / short_rollmax_pr)\n","      short_rollmax_sumpr = np.maximum.accumulate(short_sum_pr)\n","      short_sum_mdd = np.max((short_rollmax_sumpr - short_sum_pr) / short_rollmax_sumpr)\n","\n","      np_short_tp_ratio_list = np.array(short_tp_ratio_list)\n","      mean_short_tr = np.mean(np_short_tp_ratio_list[np.isnan(np_short_tp_ratio_list) == 0])\n","      \n","      np_short_dr_list = np.array(short_dr_list)\n","      mean_short_dr = np.mean(np_short_dr_list[np.isnan(np_short_dr_list) == 0])\n","      \n","      # short_pr_gap = (short_np_pr - 1) / config.lvrg_set.leverage + fee\n","      # short_tp_gap = short_pr_gap[short_pr_gap > 0]\n","      # # mean_short_tp_gap = np.mean(short_pr_gap[short_pr_gap > 0])\n","      # # mean_short_ls_gap = np.mean(short_pr_gap[short_pr_gap < 0])\n","\n","      # mean_short_pgfr = np.mean((short_tp_gap - fee) / abs(short_tp_gap + fee))\n","      \n","      plt.subplot(232)\n","      plt.plot(short_total_pr)\n","      plt.plot(short_sum_pr, color='gold')\n","      if len(nontp_short_liqd_list) != 0:   \n","\n","        max_nontp_short_term = len(res_df) - nontp_short_indexs[0]\n","        \n","        plt.title(\"wr : %.3f\\nlen(short_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (short_wr, len(short_np_pr[short_np_pr != 1]), short_dpf, np.min(short_np_pr), short_total_pr[-1], short_sum_pr[-1], short_sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (short_acc_mdd, short_sum_mdd, config.lvrg_set.leverage, min(short_liqd_list), mean_short_tr, mean_short_dr) + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n nontp_liqd : %.3f\\n nontp_liqd_pr : %.3f\\n max_nontp_term : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_short_liqd_list), min(nontp_short_liqd_list), min(nontp_short_pr_list), max_nontp_short_term, t_w_s, c_w_s, t_ls_s, c_ls_s) ,\n","                  position=title_position)\n","                  # \"\\n leverage %s\\nliqd : %.3f\\nmean_tr : %.3f\\n mean_dr : %.3f\\n nontp_short_liqd_cnt : %s\\nnontp_short_liqd : %.3f\\nontp_short_liqd_pr : %.3f\\nmax_nontp_short_term : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  # % (config.lvrg_set.leverage, min(short_liqd_list), mean_short_tr, mean_short_dr, \n","                  #    len(nontp_short_liqd_list), min(nontp_short_liqd_list), min(nontp_short_pr_list), max_nontp_short_term, t_w_s, c_w_s, t_ls_s, c_ls_s),\n","                  # position=title_position)\n","      else:\n","        plt.title(\"wr : %.3f\\nlen(short_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (short_wr, len(short_np_pr[short_np_pr != 1]), short_dpf, np.min(short_np_pr), short_total_pr[-1], short_sum_pr[-1], short_sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (short_acc_mdd, short_sum_mdd, config.lvrg_set.leverage, min(short_liqd_list), mean_short_tr, mean_short_dr) + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_short_liqd_list), t_w_s, c_w_s, t_ls_s, c_ls_s),\n","                  position=title_position)\n","   \n","      short_survey_df.iloc[survey_i] = short_wr, short_sr, len(short_np_pr[short_np_pr != 1]), short_dpf, \\\n","        short_total_pr[-1], short_sum_pr[-1], short_acc_mdd, short_sum_mdd, min(short_liqd_list), np.min(short_np_pr), mean_short_tr, mean_short_dr\n","        \n","      print('supblot232 passed')\n","    \n","    except Exception as e:\n","      print(\"error in 232 :\", e)\n","\n","    try:\n","      #         long only      #\n","      long_np_pr = np.array(long_list)\n","      # long_np_pr = (np.array(long_list) - 1) * config.lvrg_set.leverage + 1\n","\n","      long_sr = sharpe_ratio(long_np_pr)\n","\n","      long_dpf = (len(res_df) / 1440) / len(long_np_pr)\n","\n","      long_total_pr = np.cumprod(long_np_pr)\n","      \n","      long_for_sum_pr = long_np_pr - 1\n","      long_for_sum_pr[0] = 1\n","      long_sum_pr = np.cumsum(long_for_sum_pr)\n","      long_sum_pr = np.where(long_sum_pr < 0, 0, long_sum_pr)\n","\n","      long_wr = len(long_np_pr[long_np_pr > 1]) / len(long_np_pr[long_np_pr != 1])\n","\n","      t_w_l = np.sum(np.where((np_zone_list == 't') & (np_pr > 1) & (np_side_list == 'l'), 1, 0))\n","      c_w_l = np.sum(np.where((np_zone_list == 'c') & (np_pr > 1) & (np_side_list == 'l'), 1, 0))\n","      t_ls_l = np.sum(np.where((np_zone_list == 't') & (np_pr < 1) & (np_side_list == 'l'), 1, 0))\n","      c_ls_l = np.sum(np.where((np_zone_list == 'c') & (np_pr < 1) & (np_side_list == 'l'), 1, 0))\n","\n","      long_rollmax_pr = np.maximum.accumulate(long_total_pr)\n","      long_acc_mdd = np.max((long_rollmax_pr - long_total_pr) / long_rollmax_pr)\n","      long_rollmax_sumpr = np.maximum.accumulate(long_sum_pr)\n","      long_sum_mdd = np.max((long_rollmax_sumpr - long_sum_pr) / long_rollmax_sumpr)\n","\n","      np_long_tp_ratio_list = np.array(long_tp_ratio_list)\n","      mean_long_tr = np.mean(np_long_tp_ratio_list[np.isnan(np_long_tp_ratio_list) == 0])\n","      \n","      np_long_dr_list = np.array(long_dr_list)\n","      mean_long_dr = np.mean(np_long_dr_list[np.isnan(np_long_dr_list) == 0])\n","\n","      # long_pr_gap = (long_np_pr - 1) / config.lvrg_set.leverage + fee\n","      # long_tp_gap = long_pr_gap[long_pr_gap > 0]\n","      # # mean_long_tp_gap = np.mean(long_pr_gap[long_pr_gap > 0])\n","      # # mean_long_ls_gap = np.mean(long_pr_gap[long_pr_gap < 0])\n","\n","      # mean_long_pgfr = np.mean((long_tp_gap - fee) / abs(long_tp_gap + fee))\n","\n","      plt.subplot(233)\n","      plt.plot(long_total_pr)\n","      plt.plot(long_sum_pr, color='gold')\n","      if len(nontp_long_liqd_list) != 0:\n","\n","        max_nontp_long_term = len(res_df) - nontp_long_indexs[0]\n","\n","        plt.title(\"wr : %.3f\\nlen(long_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (long_wr, len(long_np_pr[long_np_pr != 1]), long_dpf, np.min(long_np_pr), long_total_pr[-1], long_sum_pr[-1], long_sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (long_acc_mdd, long_sum_mdd, config.lvrg_set.leverage, min(long_liqd_list), mean_long_tr, mean_long_dr)  + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n nontp_liqd : %.3f\\n nontp_liqd_pr : %.3f\\n max_nontp_term : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_long_liqd_list), min(nontp_long_liqd_list), min(nontp_long_pr_list), max_nontp_long_term, t_w_l, c_w_l, t_ls_l, c_ls_l) ,\n","                  position=title_position)\n","                  # \"\\n leverage %s\\nliqd : %.3f\\nmean_tr : %.3f\\n mean_dr : %.3f\\n nontp_long_liqd_cnt : %s\\nnontp_long_liqd : %.3f\\nontp_long_liqd_pr : %.3f\\nmax_nontp_long_term : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  # % (config.lvrg_set.leverage, min(long_liqd_list), mean_long_tr, mean_long_dr, \n","                  #    len(nontp_long_liqd_list), min(nontp_long_liqd_list), min(nontp_long_pr_list), max_nontp_long_term, t_w_l, c_w_l, t_ls_l, c_ls_l),\n","                  # position=title_position)\n","      else:\n","        plt.title(\"wr : %.3f\\nlen(long_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (long_wr, len(long_np_pr[long_np_pr != 1]), long_dpf, np.min(long_np_pr), long_total_pr[-1], long_sum_pr[-1], long_sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (long_acc_mdd, long_sum_mdd, config.lvrg_set.leverage, min(long_liqd_list), mean_long_tr, mean_long_dr) + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_long_liqd_list), t_w_l, c_w_l, t_ls_l, c_ls_l),\n","                  position=title_position)\n","                  # \"\\n leverage %s\\nliqd : %.3f\\nmean_tr : %.3f\\n mean_dr : %.3f\\n nontp_long_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\" \n","                  # % (config.lvrg_set.leverage, min(long_liqd_list), mean_long_tr, mean_long_dr, len(nontp_long_liqd_list), t_w_l, c_w_l, t_ls_l, c_ls_l),\n","                  # position=title_position)\n","\n","      long_survey_df.iloc[survey_i] = long_wr, long_sr, len(long_np_pr[long_np_pr != 1]), long_dpf, \\\n","        long_total_pr[-1], long_sum_pr[-1], long_acc_mdd, long_sum_mdd, min(long_liqd_list), np.min(long_np_pr), mean_long_tr, mean_long_dr\n","\n","      print('supblot233 passed')\n","\n","    except Exception as e:\n","      print(\"error in 233 :\", e)\n","\n","\n","    try:\n","      #     reversion adjustment      #\n","      # rev_np_pr = 1 / (np.array(pr_list) + fee) - fee\n","      rev_fee = tp_fee + out_fee - np.array(fee_list)\n","      rev_np_pr = (1 / ((np.array(pr_list) - 1) / config.lvrg_set.leverage + np.array(fee_list) + 1) - rev_fee - 1) * config.lvrg_set.leverage + 1\n","      # rev_np_pr = (1 / (np.array(pr_list) + fee) - fee - 1) * config.lvrg_set.leverage + 1\n","          \n","      rev_sr = sharpe_ratio(rev_np_pr)\n","\n","      rev_total_pr = np.cumprod(rev_np_pr)\n","      rev_wr = len(rev_np_pr[rev_np_pr > 1]) / len(rev_np_pr[rev_np_pr != 1])\n","\n","      rev_total_for_sum_pr = rev_np_pr - 1\n","      rev_total_for_sum_pr[0] = 1\n","      rev_total_sum_pr = np.cumsum(rev_total_for_sum_pr)\n","      rev_total_sum_pr = np.where(rev_total_sum_pr < 0, 0, rev_total_sum_pr)\n","\n","      rev_rollmax_pr = np.maximum.accumulate(rev_total_pr)\n","      rev_acc_mdd = np.max((rev_rollmax_pr - rev_total_pr) / rev_rollmax_pr)\n","      rev_rollmax_sumpr = np.maximum.accumulate(rev_total_sum_pr)\n","      rev_sum_mdd = np.max((rev_rollmax_sumpr - rev_total_sum_pr) / rev_rollmax_sumpr)\n","\n","      # plt.subplot(122)\n","      plt.subplot(234)\n","      plt.plot(rev_total_pr)\n","      plt.plot(rev_total_sum_pr, color='gold')\n","\n","      plt.title(\"wr : %.3f\\n sr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n min_pr : %.3f\" \n","                % (rev_wr, rev_sr, rev_total_pr[-1], rev_total_sum_pr[-1], rev_acc_mdd, rev_sum_mdd, np.min(rev_np_pr)))\n","      \n","      rev_survey_df.iloc[survey_i] = rev_wr, rev_sr, rev_total_pr[-1], rev_total_sum_pr[-1], rev_acc_mdd, rev_sum_mdd, np.min(rev_np_pr)\n","\n","    except Exception as e:\n","      print(\"error in 234 :\", e)\n","\n","    try:\n","      #         short       #\n","      # rev_short_np_pr = 1 / (np.array(short_list) + fee) - fee\n","      rev_short_fee = tp_fee + out_fee - np.array(short_fee_list)\n","      rev_short_np_pr = (1 / ((np.array(short_list) - 1) / config.lvrg_set.leverage + np.array(short_fee_list) + 1) - rev_short_fee - 1) * config.lvrg_set.leverage + 1\n","      # rev_short_np_pr = (1 / (np.array(short_list) + fee) - fee - 1) * config.lvrg_set.leverage + 1\n","      \n","      rev_short_sr = sharpe_ratio(rev_short_np_pr)\n","          \n","      short_rev_total_pr = np.cumprod(rev_short_np_pr)\n","      rev_short_wr = len(rev_short_np_pr[rev_short_np_pr > 1]) / len(rev_short_np_pr[rev_short_np_pr != 1])\n","\n","      rev_short_for_sum_pr = rev_short_np_pr - 1\n","      rev_short_for_sum_pr[0] = 1\n","      short_rev_sum_pr = np.cumsum(rev_short_for_sum_pr)\n","      short_rev_sum_pr = np.where(short_rev_sum_pr < 0, 0, short_rev_sum_pr)\n","\n","      short_rev_rollmax_pr = np.maximum.accumulate(short_rev_total_pr)\n","      short_rev_acc_mdd = np.max((short_rev_rollmax_pr - short_rev_total_pr) / short_rev_rollmax_pr)\n","      short_rev_rollmax_sumpr = np.maximum.accumulate(short_rev_sum_pr)\n","      short_rev_sum_mdd = np.max((short_rev_rollmax_sumpr - short_rev_sum_pr) / short_rev_rollmax_sumpr)\n","\n","      # plt.subplot(122)\n","      plt.subplot(235)\n","      plt.plot(short_rev_total_pr)\n","      plt.plot(short_rev_sum_pr, color='gold')\n","\n","      plt.title(\"wr : %.3f\\n sr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n min_pr : %.3f\" \n","                % (rev_short_wr, rev_short_sr, short_rev_total_pr[-1], short_rev_sum_pr[-1], short_rev_acc_mdd, short_rev_sum_mdd, np.min(rev_short_np_pr)))\n","      \n","      rev_short_survey_df.iloc[survey_i] = rev_short_wr, rev_short_sr, short_rev_total_pr[-1], short_rev_sum_pr[-1], short_rev_acc_mdd, short_rev_sum_mdd, np.min(rev_short_np_pr)\n","\n","    except Exception as e:\n","      print(\"error in 235 :\", e)\n","\n","    try:\n","      #         long       #\n","      # rev_long_np_pr = 1 / (np.array(long_list) + fee) - fee\n","      rev_long_fee = tp_fee + out_fee - np.array(long_fee_list)\n","      rev_long_np_pr = (1 / ((np.array(long_list) - 1) / config.lvrg_set.leverage + np.array(long_fee_list) + 1) - rev_long_fee - 1) * config.lvrg_set.leverage + 1\n","          \n","      rev_long_sr = sharpe_ratio(rev_long_np_pr)\n","\n","      long_rev_total_pr = np.cumprod(rev_long_np_pr)\n","      rev_long_wr = len(rev_long_np_pr[rev_long_np_pr > 1]) / len(rev_long_np_pr[rev_long_np_pr != 1])\n","\n","      rev_long_for_sum_pr = rev_long_np_pr - 1\n","      rev_long_for_sum_pr[0] = 1\n","      long_rev_sum_pr = np.cumsum(rev_long_for_sum_pr)\n","      long_rev_sum_pr = np.where(long_rev_sum_pr < 0, 0, long_rev_sum_pr)\n","\n","      long_rev_rollmax_pr = np.maximum.accumulate(long_rev_total_pr)\n","      long_rev_acc_mdd = np.max((long_rev_rollmax_pr - long_rev_total_pr) / long_rev_rollmax_pr)\n","      long_rev_rollmax_sumpr = np.maximum.accumulate(long_rev_sum_pr)\n","      long_rev_sum_mdd = np.max((long_rev_rollmax_sumpr - long_rev_sum_pr) / long_rev_rollmax_sumpr)\n","\n","      # plt.subplot(122)\n","      plt.subplot(236)\n","      plt.plot(long_rev_total_pr)\n","      plt.plot(long_rev_sum_pr, color='gold')\n","\n","      plt.title(\"wr : %.3f\\n sr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n min_pr : %.3f\" \n","                % (rev_long_wr, rev_long_sr, long_rev_total_pr[-1], long_rev_sum_pr[-1], long_rev_acc_mdd, long_rev_sum_mdd, np.min(rev_long_np_pr)))\n","      \n","      rev_long_survey_df.iloc[survey_i] = rev_long_wr, rev_long_sr, long_rev_total_pr[-1], long_rev_sum_pr[-1], long_rev_acc_mdd, long_rev_sum_mdd, np.min(rev_long_np_pr)\n","      \n","    except Exception as e:\n","      print(\"error in 236 :\", e)\n","\n","    if show_plot:\n","      plt.show()\n","    \n","\n","    try:\n","\n","      h_np_pr = np.array(h_pr_list)\n","      # h_rev_np_pr = 1 / (np.array(h_pr_list) + fee) - fee    # define, for plot_check below cell\n","      h_rev_np_pr = (1 / ((np.array(h_pr_list) - 1) / config.lvrg_set.leverage + np.array(fee_list) + 1) - np.array(fee_list) - 1) * config.lvrg_set.leverage + 1\n","\n","      # --------------------- h pr plot --------------------- #\n","      if len(h_np_pr[h_np_pr != 1]) != 0:\n","\n","        plt.figure(figsize=(16, 12))\n","        plt.suptitle(key + \" hedge\")\n","\n","        h_total_pr = np.cumprod(h_np_pr)\n","        h_wr = len(h_np_pr[h_np_pr > 1]) / len(h_np_pr[h_np_pr != 1])\n","\n","        # plt.subplot(121)\n","        plt.subplot(231)\n","        plt.plot(h_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_wr, np.min(h_np_pr), h_total_pr[-1], config.lvrg_set.leverage))\n","        # plt.show()\n","\n","        #         short only      #\n","        h_short_np_pr = np.array(h_short_list)\n","\n","        short_h_total_pr = np.cumprod(h_short_np_pr)\n","        h_short_wr = len(h_short_np_pr[h_short_np_pr > 1]) / len(h_short_np_pr[h_short_np_pr != 1])\n","        \n","        plt.subplot(232)\n","        plt.plot(short_h_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_short_wr, np.min(h_short_np_pr), short_h_total_pr[-1], config.lvrg_set.leverage))\n","\n","        #         long only      #\n","        h_long_np_pr = np.array(h_long_list)\n","\n","        long_h_total_pr = np.cumprod(h_long_np_pr)\n","        h_long_wr = len(h_long_np_pr[h_long_np_pr > 1]) / len(h_long_np_pr[h_long_np_pr != 1])\n","        \n","        plt.subplot(233)\n","        plt.plot(long_h_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_long_wr, np.min(h_long_np_pr), long_h_total_pr[-1], config.lvrg_set.leverage))\n","\n","\n","        #     reversion adjustment      #\n","            \n","        h_rev_total_pr = np.cumprod(h_rev_np_pr)\n","        h_rev_wr = len(h_rev_np_pr[h_rev_np_pr > 1]) / len(h_rev_np_pr[h_rev_np_pr != 1])\n","\n","        # plt.subplot(122)\n","        plt.subplot(234)\n","        plt.plot(h_rev_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_rev_wr, np.min(h_rev_np_pr), h_rev_total_pr[-1], config.lvrg_set.leverage))\n","\n","        #         short       #\n","        # h_rev_short_np_pr = 1 / (np.array(h_short_list) + fee) - fee\n","        h_rev_short_np_pr =  (1 / ((np.array(h_short_list) - 1) / config.lvrg_set.leverage + np.array(short_fee_list) + 1) - np.array(short_fee_list) - 1) * config.lvrg_set.leverage + 1\n","           \n","        short_h_rev_total_pr = np.cumprod(h_rev_short_np_pr)\n","        h_rev_short_wr = len(h_rev_short_np_pr[h_rev_short_np_pr > 1]) / len(h_rev_short_np_pr[h_rev_short_np_pr != 1])\n","\n","        # plt.subplot(122)\n","        plt.subplot(235)\n","        plt.plot(short_h_rev_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_rev_short_wr, np.min(h_rev_short_np_pr), short_h_rev_total_pr[-1], config.lvrg_set.leverage))\n","\n","        #         long       #\n","        # h_rev_long_np_pr = 1 / (np.array(h_long_list) + fee) - fee\n","        h_rev_long_np_pr =  (1 / ((np.array(h_long_list) - 1) / config.lvrg_set.leverage + np.array(long_fee_list) + 1) - np.array(long_fee_list) - 1) * config.lvrg_set.leverage + 1\n","            \n","        long_h_rev_total_pr = np.cumprod(h_rev_long_np_pr)\n","        h_rev_long_wr = len(h_rev_long_np_pr[h_rev_long_np_pr > 1]) / len(h_rev_long_np_pr[h_rev_long_np_pr != 1])\n","\n","        # plt.subplot(122)\n","        plt.subplot(236)\n","        plt.plot(long_h_rev_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_rev_long_wr, np.min(h_rev_long_np_pr), long_h_rev_total_pr[-1], config.lvrg_set.leverage))\n","        \n","        if show_plot:\n","          plt.show()\n","          \n","    except Exception as e:\n","      print('error in h_pr plot :', e)   \n","    \n","    print()\n","\n","\n","  # break # pair loop"]},{"cell_type":"markdown","metadata":{"id":"MteLY9PS2ZeK"},"source":["##### check statistical significance"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":6764,"status":"ok","timestamp":1641002042651,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"NzbWuwSw2jaj","outputId":"17ae2028-db9f-4044-a63e-f96145bb4724"},"outputs":[{"data":{"image/png":"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bB06dMiqPz4+XhcuXJC/v7/NfTg4OGj48OH6888/lZ6ernPnzuns2bNq2rSpvL298yt0AAAAALcoIyNDo0aN0v3336/4+HitXbtWr776qnx9fa8be+zYsev6Lly4oDJlylj+9vf314EDB64bl7P039/ziJiYmH/6EgAAAAAUAH9/fx08eNByc3WOG53r/z1/yCm6yskfcsb//RrEjfoAACiMKLQCAFzn70nT7RgzZoymTZumdevW6YknnlCXLl103333ac+ePXJ05GsHAAAAKAymT5+uOnXqaPTo0UpLS9PEiRO1b98+NWvWzGpcdnZ2rts7ODjc8XOnpqbe8bYAAAAACq/8yB8AAChsuOINAMXQjQqpYmNjVaJECdWuXduqv0KFCipTpoxiY2Nt7iMkJES///67nn32WX377bf69ddf9dtvv9lckgQAAABAwTpy5IimTp2qrl27qlGjRnJxcdHIkSNvez+xsbGqW7fudf316tWzPG7LP7nZAwAAAED+iI2NVe3ata8rlLqdc/2/70+SAgICrnsstz4AAAojCq0AoBjKWfv878VPy5YtkyQNHz7cqn/EiBGSpKVLl1rtI7fiqezs7OuSrpCQEFWpUuWfBw4AAADgHytZsqRcXV2t+g4fPqykpKTr+m/FsmXL1KpVK7Vu3drS5+7uroEDByomJkbR0dE293GjHAUAAACAeZYtW6aKFSuqd+/elr4SJUropZdeUlJSktauXXtb+zt16pSioqL01FNPycPDw9J/9913q0mTJnkWNwAA+cnJ7AAAAAVv+/btkqRJkybpm2++UWZmpsLCwrR7927NmzdPgwYNUunSpbV27Vq1bNlS/fv3148//qg1a9ZY7eP555/X2LFjdejQIZ05c0bh4eH65ZdfFBoaqi+//FIbN25U48aN1bdvXx0+fNikVwsAAADgr+rUqaPffvtN3333naKjo5WVlaWHHnpIfn5++uabb257f++++64ef/xxLV++XDNmzND58+fVr18/1ahRQ4888sgtzVa1a9cuZWVladSoUfL29lZ6erp+//13JSQk3MlLBAAAAJAHPv/8cw0aNEjz5s1TUFCQjh49qpCQELVv317Dhg3T5cuXb3ufY8aM0U8//aQNGzZo7ty5KlOmjIYMGaKoqCiVKlUqH14FAAB5z6DRaDRa8Wtjx441jh8/bmRlZRmG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gHnsoyHwfZQW33/d4PsoPf4OyJww36XH30EFub8P3D+qDb6P0uPvQDf4PkqL7z+ZGrnnrNz3DzCPfXwQc3gP5L6Pct+/2pL7+8D9Mw9yfx/kvn+AYfZRAUDobetEREREREREREREREREREREREQywEsHEhERERERERERERERERERERERPQAnWhERERERERERERERERERERERET0AJ1oRERERERERERERERERERERERE9ACdaERERERERERERERERERERERERPQAnWhmYo6Mjvv/+e+Tk5CA7Oxtr166Fra3tfZ8THR0NIYRWWblypYEiNm3jx49HYmIiCgsLceTIEXTr1u2+7YcMGYKzZ8+isLAQJ0+exNNPP22gSPVHXznn5eWFHTt2ID8/H+np6fjkk09gYWGhz12p0cPuo6OjI5YuXYpz586hoKAAV69exZIlS2Bvb6/V7t73QAiBYcOG6Xt39JK3c+fORWpqKgoKCvDrr7+iZcuW+grfZLA/Njz2yfrBXDYs5jGZO/Y5hsd+R/5jGrmNZwCOaQyFfbLhsU/WPeax4TGPyZTI/TwQkN+5IM8Dqyf3XJZbHgPM5eowj6u2Zx4zjysZSx4D8stlY85jwWK4smvXLnHixAnRvXt38fjjj4vz58+L9evX3/c50dHR4quvvhKurq6aYmdnJ/m+GHsZOnSoKCoqEm+88YZo06aN+Oqrr8TNmzeFi4tLte0DAgJEaWmpmDJlivDz8xOhoaGiuLhYtGvXTvJ9qUvRR84plUpx8uRJsXfvXtGxY0cRFBQkMjIyxMcff2wS+9iuXTuxZcsW8eyzz4rmzZuLvn37ioSEBLF582atdkIIMWrUKK33wdra2uTydtq0aSI7O1s8//zzon379mLbtm3i0qVLet8XYy/sjw1b2CfrrzCXDVeYxyws7HMMXdjv6C/vjGlMI6fxjL7ylmMa3eQOwD65LoV9sn4K89iwhXnMYmpF7ueBj7KPxnwuyPNA881lOeUxc5l5zDxmHptyHsstl408j6VPaHMpfn5+QgghunTpoqkbMGCAUKvVwt3dvcbnRUdHi8WLF0sev6mVI0eOiGXLlmnuKxQKkZycLKZPn15t+40bN4rt27dr1R0+fFisXLlS8n151KKvnAsKChJlZWWicePGmrpx48aJW7duCUtLS5PYx3vLkCFDRFFRkbCwsNDU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sLAwiX3s06ePqIm3t7cAIAYMGCCOHz8ucnNzRV5enjhx4oQYO3asUCgUJpm3c+fOFdevXxeFhYXi119/Fa1atZI8N6Uu7I8NX9gn66cwlw1bmMcs5l7Y5xi+sN+R/5hGbuMZfeUtxzSG+9tgqbmwT9Z9YR4bvjCPWUypyP088FH20djPBXkeaJ65LLc8Zi4zj5nHzGNTzWM55rKx5rHizg0iIiIiIiIiIiIiIiIiIiIiIiKqgVLqAIiIiIiIiIiIiIiIiIiIiIiIiIwdJ1oRERERERERERERERERERERERE9ACdaERERyVRISAiEqN0VgoUQCAkJ0XNERHUzatQoCCHg7e39wLaJiYkIDw83QFREREREpA8cz5AccUxDREREZD44piE54pimAidaERERERERERERERERERERERERPQAnWhERERERERERERERERERERERET0AJ1qR3lhbW0OhUEgdBpFOWVhYwNLSUuowiIiIiEjPOJ4hOeJ4hoiIiMh8cExDcsQxDRERGQNOtDIiTZs2xYoVK3Du3DkUFBQgKysLmzZtqvb6lg4ODggLC0NiYiKKioqQlJSEiIgIODk5adpYW1sjJCQECQkJKCwsRGpqKrZu3YrmzZvXOqbo6GicOnUK/v7+OHjwIAoKCnD58mWMGzdOq12fPn0ghMCwYcMwb948JCcno6CgAPb29o/+hpBJadCgARYvXqzJyfT0dOzduxedO3cGUPM1WKOjoxEdHa25X5lLL7/8Mj766CMkJycjNzcXmzdvhr29PaysrLB48WKkp6cjLy8P33zzDaysrB4q1vDwcOTl5cHHxwd79uzB7du3kZKSgtmzZ2u18/b2hhACkydPxnvvvYeLFy+iuLgYbdu2fYR3iIyFMfe17du3x/79+5Gfn48LFy5g8ODBAIAnn3wSR44cQUFBAc6dO4fAwMAq23j88cdx9OhRFBYW4uLFixg7dmy1r2VlZYWwsDBkZGQgNzcXP//8Mzw9PWsdK0nHFPtZLy8vbN++HXl5eUhOTsb48eMBAI899hj27duH27dv48qVK3j11VerbKNt27bYt28fCgoKkJSUhFmzZkGprP7UddasWUhKSkJ+fj5+++039tNEEjHmYyzHM/Qgpnic5XjGPBlzX8vxDD2IKfa1HNMQmRdjPs5yTEMPYorHWY5pzJMx97Uc09CDmGJf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CxcusI7J6HgeSErAOialYJuGKsLjDpkC/36SUvA7GlICHpNJCYxVx4roaJWQkABfX1/ZNfA0Gg3i4+NlmbsSVPb5azQaJCQkmDUnOdYy61h6llbLcqxjgLUsNUurY0Cetcw6lt79fgdS1DHJB485VBP3+x34+Pjg4sWLSElJqdG2R40ahVOnTuHIkSMVrlNQUICCggL94+zsbFnWA2tZWjwPNA7WsfQs7TxQjnUMsJalZonHZJIPKY47Sj9mKH3/AP79BPh7VgJL+/sp1Xmgtf+e5c7S6hjgMdkUlL5/gPnOLRTR0QqArBt42dnZii1kOajo85fqdyLXWmYdS8+SalmudQywlqVmSXUMyLeWWcfSK+93wN8JVYbHHKqp8n4HeXl5KCoqgre3t8Fyb29vJCYm3nd7zs7O+M9//oMPP/yw2rnItY4B1rLUeB5oHKxj6VnSeaBc6xhgLUvN0o7JJB9SHXeUfsxQ+v4B/PsJWO/vWUks6e+nlOeB1vp7VgpLqmOAx2RTUfr+AaY/t1AbbUtEREREREREZBEKCwsRGxuLHj166JepVCr06NEDUVFR933t888/DwcHB3z//femTpOIiIiIiIiIiIhIVtjRioiIiIiIiEiBFi5ciNGjR+Pll19GYGAgli5dChcXF6xevRoAsGbNGsybN6/M60aNGoWtW7ciLS3N3CkTERERERERERERWTQbALOkTsKaFRcX48CBAyguLpY6FavEz984+DlKj78D4+DnKC1+/sbBz1F6/B2QNWG9S+9+v4OzZ88iIyMD06dPx5QpUwAAw4cPx8WLFwEAEydORHFxMbZt26Z/TYsWLfDZZ5/hnXfewT///GOenbAArGVp8fM3Dn6O0uPvwDj4OUqLnz/JjdJrVun7B1jHPlbGGj4Dpe+j0vevqpT+OXD/rIPSPwel7x9gnn1UARAm2zoREREREREREREREREREREREZECcOpAIiIiIiIiIiIiIiIiIiIiIiKiSrCjFRERERERERERERERERERERERUSXY0YqIiIiIiIiIiIiIiIiIiIiIiKgS7GhFRERERERERERERERERERERERUCXa0MjMPDw98//33yMzMRHp6OlatWgUXF5f7viYyMhJCCINYunSpmTKWt/HjxyMuLg5arRbR0dEICgq67/qDBw/GuXPnoNVqcerUKfTt29dMmcoL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0bVrVxESEiL+/PNPsWzZMkn3RYo+ZuHChSI3N1c8+eSTolevXmLv3r3i8uXLwsHBQfZ8MsvWmWNmmTlmjpljS86xtWXZzHMsf6CbU7Vr107s2LFDFBYWivz8fPHFF18IR0dH3eNeXl5CCCGGDh0qAAhPT09x7NgxkZOTI0pKSkRycrIIDQ0VKpVK9n2xhHrttdfE1atXRWlpqYiKihIDBw7UPRYRESG2bNmit/6kSZNEYmKiKC0tFXFxcWLMmDGy74M5FnNs+mKWjV/MsemLOZammGXTFnPMau7FPsf0xX5HmmKWTVvMsTTFHJu+mGXjF3Ns+mKOWZZUUvURnTp1Evv37xe3bt0SarVarF69Wtja2lrEPg4dOlTUxcvLSwAQo0aNEmfPnhWFhYWiqKhInDt3TsyaNUvY2NhIvj9S9DHvv/++yMjIECUlJeLw4cOiW7dusmeTWbbuHDPLzDFzzBxbao6tMcvmmmOb238hIiIiIiIiIiIiIiIiIiIiIiKiOijkbgAREREREREREREREREREREREZG540ArIiIiIiIiIiIiIiIiIiIiIiKiBnCgFRERERERERERERERERERERERUQM40IqIiIiIiIiIiIiIiIiIiIiIiKgBHGhFRERERERERERERERERERERETUAA60IiIiIiIiIiIiIiIiIiIiIiIiagAHWhERERERERERERERERERERERETWAA62IiIiIiIiIiIiIiIiIiIiIiIgawIFWREREREREREREREREREREREREDeBAKyIiIiIiIiIiIiIiIiIiIiIiogZwoBUREREREREREREREREREREREVED/h+9fB625AkBXwAAAABJRU5ErkJggg==\n","text/plain":["<Figure size 3000x1000 with 36 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n","\n"]},{"data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAACVEAAAKBCAYAAABUY3m1AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAPYQAAD2EBqD+naQAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nOzdeXyNZ/rH8W8WSYggYqeSqL0ouqitoZYW1VLb6EZX2mEoph3bRKu0RqujOh3VEtrpD0FrGkWVCWJtq7Y2tcVBEkQSEUEi2/37g5yZ0yQEkZNzzuf9el2vOve5nydX4umTcznXuW83SUYAAAAAAAAAAAAAAAAA4KLc7Z0AAAAAAAAAAAAAAAAAANgTTVQAAAAAAAAAAAAAAAAAXBpNVAAAAAAAAAAAAAAAAABcGk1UAAAAAAAAAAAAAAAAAFwaTVQAAAAAAAAAAAAAAAAAXBpNVAAAAAAAAAAAAAAAAABcGk1UAAAAAAAAAAAAAAAAAFwaTVQAAAAAAAAAAAAAAAAAXBpNVAAAAAAAAAAAAAAAAABcGk1UAAAbgYGBMsZoyJAh9k4FAAAAQClnsVgUERFh7zQAAAAAuKDIyEhFRkbaOw0AgBOhiQoASpG2bdsqNDRUFStWvOlzvPLKKzRAAQAAAHA6TZo0UWhoqAIDA+2dCgAAAAAAAJwQTVQAUIq0a9dOU6ZMUaVKlW76HK+++qqGDh1afEkBAAAAQCnQtGlTTZkyRUFBQfZOBQAAAAAAAE6IJioAKEC5cuXsnQIAAAAASKI+8fb2lpubm73TAAAAAFAIHx8fe6cAAECxoIkKgMsLDQ2VMUZNmjTRl19+qbNnz2rLli3W55966in99NNPunTpkpKTk7V48WLVqVPH+vycOXOUlpamsmXL5jv3//3f/+nUqVNyd7/+7TY0NFTvvfeeJOnYsWMyxsgYY92qwsPDQ5MmTdKRI0eUkZEhi8WiadOmycvLy3oOi8WiZs2aqVOnTtbj8/YD9/f318yZM7Vv3z6lpaUpNTVVq1evVosWLW7uBwcAAACg2IWFhSktLU316tXTt99+q/Pnz+vLL7+UJLm5uWnUqFH65ZdflJ6ertOnT2vu3Lk2K9lGREQoJiamwHNv27ZNP/74Y5FzqV69uhYsWKDY2FhlZGTo5MmTWrlyZYHb6bVv3147d+5Uenq6YmJi9Mwzz+SbExwcrPDwcCUnJ+vixYvavn27evbsaTMnJCRExhgNGjRIU6dOVVxcnC5duqQ//elPWr58uSRp48aN1nonJCSkyN8PAAAAgFtnsVgUERGh7t2768cff1R6erqGDRsmSapYsaI++OADnThxQhkZGTp8+LBef/1164ciPD09lZycrAULFuQ7r5+fn9LT0zVz5sxbyq9q1ar67LPPdPr0aaWnp2vPnj169tlnbeYEBgbKGKOxY8fqpZdesr7v8sMPP+jee+/Nd87+/fvr119/VXp6uvbv368+ffooLCxMFovllnIFAJQ+nvZOAABKi2XLlunw4cOaMGGC9QX9hAkTNHXqVIWHh+uzzz5T1apVNXLkSG3evFmtWrVSamqqli5dqhEjRqhXr17Wf9SXpLJly6p3795auHChcnNzr/v1v/rqKzVs2FBPPvmkRo8eraSkJElSYmKiJOmzzz7T0KFDtWzZMr3//vtq06aNJkyYoCZNmuiJJ56QJI0ePVpz5szRhQsXNG3aNElSQkKCJKlevXrq06ePli1bJovFourVq2vYsGHatGmTmjZtqlOnThXfDxMAAADATfP09NR3332nLVu2aNy4cbp06ZIk6ZNPPtHQoUMVFhamDz/8UMHBwRoxYoRatWql9u3bKzs7W0uXLtUXX3yhe++9Vz/99JP1nHXr1lXbtm01bty4IuexYsUK3XXXXZozZ46OHTumatWqqVu3bqpbt66OHz9unVe/fn0tX75c8+fP16JFi/T8889r4cKF2rVrl6KjoyVJ1apV07Zt21SuXDl9+OGHSk5O1pAhQ/TNN9+of//+Wrlypc3Xnjx5sjIzM/Xee+/J29tb69at0+zZszVq1ChNmzZNv/32myRZ/wsAAACg5DRq1EiLFy/WJ598ok8//VQHDx5U2bJltWnTJtWuXVuffPKJTpw4oXbt2umdd95RzZo19dprryk7O1tff/21nnjiCQ0bNkxZWVnWc/bp00c+Pj5asmTJTefl4+OjjRs3qn79+vroo49ksVg0YMAALVq0SJUqVdKHH35oM//JJ5+Un5+fPvnkExlj9Prrr+urr75SvXr1lJ2dLUnq2bOnli5dqv3792v8+PHy9/fX/PnzFR8ff9N5AgBKN0MQBOHKERoaaowx5ssvv7QZr1u3rsnKyjLjx4+3Gb/rrrtMZmam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\n","text/plain":["<Figure size 3000x1000 with 21 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n","\n"]}],"source":["# print(survey_df)\n","\n","plt.style.use('dark_background')\n","\n","title_name_list = [[\"total\", \"short\", \"long\"], [\"rev_total\", \"rev_short\", \"rev_long\"]]\n","survey_dfs_list = [[survey_df, short_survey_df, long_survey_df], [rev_survey_df, rev_short_survey_df, rev_long_survey_df]]\n","# title_name = \n","# survey_df_list = \n","\n","space_ = \" \" * 140\n","\n","for d_idx, (title_name, survey_dfs) in enumerate(zip(title_name_list, survey_dfs_list)):\n","\n","  fig = plt.figure(figsize=(30, 10))\n","\n","  gs = gridspec.GridSpec(nrows=1, # row Î™á Í∞ú \n","                          ncols=3, # col Î™á Í∞ú \n","                          # height_ratios=[1, 1, 1]\n","                        )\n","\n","  # gs = fig.add_gridspec(1, 3, wspace=0, hspace=0)\n","\n","  # nrows, ncols, h_r = 3, 3, [1, 1, 1]\n","  nrows, ncols, h_r = 3, 4, [1, 1, 1]\n","  # nrows, ncols, h_r = 4, 3, [1, 1, 1, 1]\n","\n","  # if d_idx == 0:\n","  # else:\n","    # nrows, ncols, h_r = 2, 2, [1, 1]\n","\n","  for gs_idx, (title, s_df) in enumerate(zip(title_name, survey_dfs)):  \n","\n","\n","    inner_gs = gs[gs_idx].subgridspec(nrows=nrows, # row Î™á Í∞ú \n","                          ncols=ncols, # col Î™á Í∞ú \n","                          height_ratios=h_r\n","                        )\n","\n","    for col_idx, s_cols in enumerate(s_df.columns):\n","      plt.subplot(inner_gs[col_idx])\n","      plt.plot(s_df[s_cols])\n","      plt.title(s_cols)\n","\n","  # plt.suptitle(\"total\" + \" \" * 140 + \"short\" + \" \" * 140 + \"long\")\n","  plt.suptitle(space_.join(title_name))\n","  plt.show()\n","  print(\"\\n\")"]},{"cell_type":"markdown","metadata":{"id":"GZ0y_x9ugOUD"},"source":["##### check dent_detph"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":693},"executionInfo":{"elapsed":1409,"status":"ok","timestamp":1640358130016,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"ETgm1avml0fE","outputId":"8e4dd6ea-1fe7-4895-9842-400ae913fbc4"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 400x800 with 2 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["max_dd : 0.2515057036519577\n"]}],"source":["target_pr = long_total_pr\n","\n","plt.figure(figsize=(4, 8))\n","gs = gridspec.GridSpec(nrows=2,\n","                        ncols=1,\n","                        height_ratios=[1, 1]\n","                      )\n","\n","plt.subplot(gs[0])\n","plt.plot(target_pr)\n","h_roll = pd.Series(target_pr).rolling(10).max()\n","plt.plot(h_roll)\n","# plt.show()\n","# print()\n","\n","plt.subplot(gs[1])\n","dent_depth = target_pr / h_roll\n","plt.plot(dent_depth)\n","plt.show()\n","\n","rolling_max = np.maximum.accumulate(long_total_pr)\n","max_dd = np.max((rolling_max - long_total_pr)/rolling_max)\n","print(\"max_dd :\", max_dd)"]},{"cell_type":"markdown","metadata":{"id":"v2Gjv019AEz8"},"source":["##### check frequency "]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":464},"executionInfo":{"elapsed":720,"status":"ok","timestamp":1636862363013,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"atdBjod9-e21","outputId":"5925d52a-da23-40cd-a9b3-6c0323024bc0"},"outputs":[{"name":"stdout","output_type":"stream","text":["[0. 0. 0. ... 0. 0. 0.]\n","(70, 1)\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["total_len = np.zeros(len(res_df))\n","print(total_len)\n","np_trade_list = np.array(trade_list)\n","# print(np_trade_list.shape)\n","print(np_trade_list[:, [0], [0]].shape)\n","total_len[np_trade_list[:, [0], [0]]] = 1\n","\n","plt.plot(total_len)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"zItdCdJXhQtu"},"source":["##### candle study (ÎÇúÏàò ÏÉùÏÑ±ÏùÑ ÌÜµÌï¥ candle strength ratio Î•º serialize Ìï† Ïàò ÏûàÏñ¥ÏïºÌï®)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OTM-5HpehcSB"},"outputs":[],"source":["# wick_score -> Ï†ïÏàòÏûêÎ¶¨, body_score -> ÏÜåÏàòÏ†ê ÏûêÎ¶¨\n","# def candle_strn_ratio(ohlc_data):\n","\n","#   # o, h, l, c = ohlc_data\n","#   if type(ohlc_data) != np.array:\n","#     ohlc_data = np.array(ohlc_data)\n","\n","#   o, h, l, c = np.split(ohlc_data, 4, axis=1)\n","#   #   check up / downward\n","#   # up = 1 if c >= o else 0\n","#   up = np.where(c >= o, 1, 0)\n","\n","#   total_len = h - l\n","#   upper_wick = (h - np.maximum(c, o)) / total_len\n","#   lower_wick = (np.minimum(c, o) - l) / total_len\n","#   body = abs(c - o) / total_len\n","\n","#   # if up:\n","    \n","#   # else:\n","    \n","#   up_score = (1 - upper_wick) * 100 + body\n","#   dn_score = (1 - lower_wick) * 100 + body\n","#   score = np.where(up, up_score, dn_score)  \n","\n","#   return score\n","\n","\n","def candle_strn_ratio(res_df, plot_check=0):\n","  \n","  ohlc_col = [\"open\", \"high\", \"low\", \"close\"]\n","  ohlcs = res_df[ohlc_col]\n","  o, h, l, c = np.split(ohlcs.values, 4, axis=1)\n","\n","  # if type(ohlc_data) != np.array:\n","  #   ohlc_data = np.array(ohlc_data)\n","\n","  #   check up / downward\n","  up = np.where(c >= o, 1, 0)\n","\n","  total_len = h - l\n","  upper_wick = (h - np.maximum(c, o)) / total_len\n","  lower_wick = (np.minimum(c, o) - l) / total_len\n","  body = abs(c - o) / total_len\n","    \n","  up_score = (1 - upper_wick) * 100 + body\n","  dn_score = (1 - lower_wick) * 100 + body\n","  score = np.where(up, up_score, dn_score)  \n","\n","  if plot_check:\n","    fig = plt.figure(figsize=(14, 18))\n","      \n","    gs = gridspec.GridSpec(nrows=3, # row Î™á Í∞ú \n","                          ncols=1, # col Î™á Í∞ú \n","                          height_ratios=[3, 1, 1]\n","                        )\n","\n","    ax = fig.add_subplot(gs[0])\n","\n","    # fig.show()\n","    # fig.canvas.draw()\n","\n","    temp_ohlc = ohlcs.values\n","    index = np.arange(len(temp_ohlc))\n","    candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","    mf.candlestick_ohlc(ax, candle, width=0.5, colorup='#26a69a', colordown='#ef5350', alpha=0.5)\n","\n","    plt.show()\n","\n","  return score"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":1080,"status":"ok","timestamp":1639793188612,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"KGJbx4BgKHKd","outputId":"892bab00-7b08-400f-89a6-f7a9de25d951"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 1400x1800 with 1 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["[[ 97.40707965]\n"," [ 93.03448276]\n"," [ 65.23144105]\n"," [ 87.89839572]\n"," [ 98.6984127 ]\n"," [ 42.30612245]\n"," [ 92.01176471]\n"," [ 97.25819672]\n"," [ 48.76363636]\n"," [ 45.27299703]\n"," [ 78.11056511]\n"," [ 65.07943925]\n"," [ 89.64356436]\n"," [ 88.06410256]\n"," [ 87.93854749]\n"," [ 96.70093458]\n"," [100.79865772]\n"," [ 36.16981132]\n"," [ 82.87234043]\n"," [ 93.57608696]]\n"]}],"source":["#   plot_check    #\n","print(candle_strn_ratio(res_df.iloc[:20], 1))\n","# break\n","# ohlc_data\n","\n","# fig = plt.figure(figsize=(14, 18))\n","  \n","# gs = gridspec.GridSpec(nrows=3, # row Î™á Í∞ú \n","#                       ncols=1, # col Î™á Í∞ú \n","#                       height_ratios=[3, 1, 1]\n","#                     )\n","\n","# ax = fig.add_subplot(gs[0])\n","\n","# # fig.show()\n","# # fig.canvas.draw()\n","\n","# temp_ohlc = ohlc_data.values\n","# index = np.arange(len(temp_ohlc))\n","# candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","# mf.candlestick_ohlc(ax, candle, width=0.5, colorup='#26a69a', colordown='#ef5350', alpha=0.5)\n","\n","# plt.show()"]},{"cell_type":"markdown","metadata":{"id":"o-XjNS1L31YB"},"source":["##### ep_loc.point & zone legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"taB2j7kT33iN"},"outputs":[],"source":["\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 (res_df['close'] < res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(strat_version)] - 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] >= res_df['bb_lower_1m']) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['bb_lower_1m']) &\n","    #                 (res_df['close'] < res_df['bb_lower_1m'])\n","    #                 , res_df['entry_{}'.format(strat_version)] - 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   (res_df['close'] > res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(strat_version)] + 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] <= res_df['bb_upper_1m']) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['bb_upper_1m']) &\n","    #                   (res_df['close'] > res_df['bb_upper_1m'])\n","    #                 , res_df['entry_{}'.format(strat_version)] + 1, res_df['entry_{}'.format(strat_version)])\n","\n","\n","    \n","   # --------------- ema --------------- #   \n","  # res_df['ema5_1m'] = ema(res_df['close'], 5).shift(1)\n","\n","  #   # --------------- cloud bline --------------- #   \n","  # res_df['cloud_bline_1m'] = cloud_bline(res_df, 26).shift(1)\n","  \n","    #       stochastic      #\n","  # res_df['stoch'] = stoch(res_df, 5, 3, 3)\n","\n","    #       fisher      #\n","  # res_df['fisher30'] = fisher(res_df, 30)\n","  # res_df['fisher60'] = fisher(res_df, 60)\n","  # res_df['fisher120'] = fisher(res_df, 120)\n","\n","    #       cctbbo      #\n","  # res_df['cctbbo'], _ = cct_bbo(res_df, 21, 13)\n","\n","    #       ema_roc      #\n","  # res_df['ema_roc'] = ema_roc(res_df['close'], 13, 9)\n","\n","\n","   # ------------------------------ htf data ------------------------------ #    \n","\n","  #             Todo              #\n","  # htf_df = pd.read_excel(date_path2 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # htf_df = pd.read_excel(date_path3 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # htf_df = pd.read_excel(date_path4 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # htf_df = pd.read_excel(date_path5 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # # # # htf_df = pd.read_excel(date_path6 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","\n","  # # ---- htf index slicing ---- #\n","  # htf_df = htf_df.loc[:res_df.index[-1]]\n","  \n","  # print(\"res_df.index[-1] :\", res_df.index[-1])\n","  # print(\"htf_df.index[-1] :\", htf_df.index[-1])\n","\n","  # res_df = dc_line(res_df, htf_df, '5m')\n","  # res_df = dc_level(res_df, '5m', 1)\n","\n","\n","  # # # if \"sma4\" in res_df.columns:\n","  # # #   res_df.drop(\"sma4\", axis=1, inplace=1)\n","\n","  # # htf_df['sma'] = htf_df['close'].rolling(60).mean()\n","  # # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf(res_df, htf_df, [-1]), columns=['sma_30m']))\n","  \n","  # htf_df['stoch'] = stoch(htf_df, 13, 3, 3)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf(res_df, htf_df, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","   \n","  # fifth_df['ema'] = ema(fifth_df['close'], 5)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf(res_df, fifth_df, [-1]), columns=['ema5']))\n","\n","        # ------------------------------------ short ------------------------------------ # \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 0:\n","        #   mr_score += 1          \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_upper_1m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_upper_3m'].iloc[i] <= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_upper_5m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == 'MARKET':\n","        #   mr_const_cnt += 1\n","        #   if (res_df['close'].iloc[i] - res_df['short_tp'].iloc[i]) / (res_df['short_out'].iloc[i] - res_df['close'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error):  \n","        #     mr_score += 1\n","\n","           \n","        # ------- entry once ------- #   \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == 1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == -1:\n","        #     prev_entry_cnt += 1          \n","        # # # print(\"prev_entry_cnt :\", prev_entry_cnt)\n","\n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] < res_df['bb_lower_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_lower2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_base_1h'].iloc[i]:\n","\n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] < res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","  \n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['low'].iloc[i] > res_df['short_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1\n","\n","\n","\n","        # ------------------------------------ long ------------------------------------ # \n","          \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 1:\n","        #   mr_score += 1   \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 1:\n","        #   mr_score += 1     \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 1:\n","          # mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_lower_1m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_lower_3m'].iloc[i] >= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_lower_5m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == \"MARKET\":\n","          # mr_const_cnt += 1        \n","          # if (res_df['long_tp'].iloc[i] - res_df['close'].iloc[i]) / (res_df['close'].iloc[i] - res_df['long_out'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error): # ÏùºÎ∞òÏ†ÅÏúºÎ°ú dr ÏÉÅÏóêÏÑú tp ÎπÑÏú®Ïù¥ Îçî Ïª§Ïßê (tr Î≥¥Îã§)\n","          #   mr_score += 1\n","\n","        # -------------- ep limit -------------- #    \n","        # mr_const_cnt += 1\n","        # # if (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # if config.ep_set.min_eplim_pct < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # # if 0 < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        #   # if res_df['st_gap_15m'].iloc[i] / res_df['open'].iloc[i] < 0:\n","        #   #   print(\"i, res_df['st_gap_15m'].iloc[i] :\", i, res_df['st_gap_15m'].iloc[i])\n","        #   mr_score += 1\n","\n","\n","        # -------------- entry once -------------- #    \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == -1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == 1:\n","        #     prev_entry_cnt += 1\n","          \n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","          \n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] > res_df['bb_upper_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_upper2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_base_1h'].iloc[i]:\n","        \n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] > res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","\n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['high'].iloc[i] < res_df['long_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","          \n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1"]},{"cell_type":"markdown","metadata":{"id":"-IbP_Z3Dlwk4"},"source":["### nontp survey"]},{"cell_type":"markdown","metadata":{"id":"FxJ1y8v2fkCR"},"source":["##### term & liqd"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":614},"executionInfo":{"elapsed":8,"status":"ok","timestamp":1628300788555,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"-qIWa48pl1GO","outputId":"b2687c93-e070-4d45-8a67-4cc783fd78f1"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 360x720 with 2 Axes>"]},"metadata":{"tags":[]},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]}],"source":["# print(nontp_long_indexs)\n","\n","plot_size = 100\n","\n","for s_i in range(plot_size, len(trade_list), plot_size):\n","\n","  slice_trade_list = trade_list[s_i - plot_size:s_i]\n","  slice_liqd_list = liqd_list[s_i - plot_size:s_i]\n","\n","  # print(len(slice_trade_list))\n","  np_trade = np.array(slice_trade_list)\n","  trade_term = np_trade[:, [2]] - np_trade[:, [1]]\n","\n","  plt.figure(figsize=(5, 10))\n","  plt.subplot(211)\n","  plt.bar(np.arange(len(trade_term)), trade_term.reshape(-1,), width=1, color='b')\n","\n","  # plt.plot(trade_term.reshape(-1,))\n","  plt.ylim(0, 1000)\n","  # plt.show()\n","  # print()\n","\n","  plt.subplot(212)\n","  # print(len(liqd_list))\n","  # plt.bar(np.arange(len(liqd_list)), liqd_list)\n","  plt.bar(np.arange(len(slice_liqd_list)), np.array(slice_liqd_list), width=1, color='r')\n","  # plt.plot(slice_liqd_list)\n","  plt.show()\n","\n","print()"]},{"cell_type":"markdown","metadata":{"id":"VBwVaUkvfnOd"},"source":["##### check nontp index"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":454,"status":"ok","timestamp":1628220543161,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"mRCMBOU4frNY","outputId":"ce4a9c9b-3589-40b3-8a19-4be03d5b9a1e"},"outputs":[{"name":"stdout","output_type":"stream","text":["32747\n"]}],"source":["# np_nontp_short_indexs = np.array(nontp_short_indexs)\n","# np_nontp_long_indexs = np.array(nontp_long_indexs)\n","\n","# short_til_term = len(res_df) - np_nontp_short_indexs\n","# long_til_term = len(res_df) - np_nontp_long_indexs\n","\n","max_nontp_short_term = len(res_df) - nontp_short_indexs[0]\n","max_nontp_long_term = len(res_df) - nontp_long_indexs[0]\n","\n","print(max_nontp_long_term)"]},{"cell_type":"markdown","metadata":{"id":"tApzvz_gK9lR"},"source":["## basic strategy"]},{"cell_type":"markdown","metadata":{"id":"FaRGwR4NEop2"},"source":["### shifting"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"a8aYsjEgQnGF"},"outputs":[],"source":["org_res_df = res_df.copy()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":291,"status":"ok","timestamp":1626515312874,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"RF3RM2G2RCb1","outputId":"ba8f6a75-d4df-4f85-cd0f-190935341f7a"},"outputs":[{"name":"stdout","output_type":"stream","text":["                            open     high  ...  min_upper  max_lower\n","2021-06-30 23:55:59.999  0.27223  0.27281  ...   0.272145    0.27005\n","2021-06-30 23:56:59.999  0.27274  0.27290  ...   0.272145    0.27005\n","2021-06-30 23:57:59.999  0.27246  0.27257  ...   0.272523    0.27021\n","2021-06-30 23:58:59.999  0.27166  0.27183  ...   0.272523    0.27021\n","2021-06-30 23:59:59.999  0.27144  0.27211  ...   0.272523    0.27021\n","\n","[5 rows x 37 columns]\n","                            open     high  ...  min_upper  max_lower\n","2021-06-30 23:55:59.999  0.27223  0.27281  ...   0.272523    0.27021\n","2021-06-30 23:56:59.999  0.27274  0.27290  ...        NaN        NaN\n","2021-06-30 23:57:59.999  0.27246  0.27257  ...        NaN        NaN\n","2021-06-30 23:58:59.999  0.27166  0.27183  ...        NaN        NaN\n","2021-06-30 23:59:59.999  0.27144  0.27211  ...        NaN        NaN\n","\n","[5 rows x 37 columns]\n"]}],"source":["#         refresh res_df      #\n","res_df = org_res_df.copy()\n","print(org_res_df.tail(5))\n","\n","# break\n","\n","\n","shift_size = -4\n","# shift_size = -1\n","# shift_size = -7\n","# shift_size = +3\n","\n","res_df['min_upper'] = res_df['min_upper'].shift(shift_size)\n","res_df['max_lower'] = res_df['max_lower'].shift(shift_size)\n","res_df['minor_ST1_Trend'] = res_df['minor_ST1_Trend'].shift(shift_size)\n","res_df['minor_ST2_Trend'] = res_df['minor_ST2_Trend'].shift(shift_size)\n","res_df['minor_ST3_Trend'] = res_df['minor_ST3_Trend'].shift(shift_size)\n","res_df['middle_line'] = res_df['middle_line'].shift(shift_size)\n","\n","print(res_df.tail(5))"]},{"cell_type":"markdown","metadata":{"id":"2gxvme1PC6ha"},"source":["### load model"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5831,"status":"ok","timestamp":1628862368878,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"dtYdAuSsC72_","outputId":"e8dccc53-aaa7-4bab-ed8d-753f634c08d6"},"outputs":[{"name":"stdout","output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/resnet/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5\n","94773248/94765736 [==============================] - 1s 0us/step\n"]}],"source":["# model_name = 'inner_tick_cnnreg_lscalemm_prefee_gpu_%s_%s_%s_%s_%s.h5'\n","\n","# model = tf.keras.models.load_model(ckpt_path + model_name)\n","\n","from tensorflow.keras.applications.resnet50 import ResNet50\n","\n","model = ResNet50(weights='imagenet', include_top=False)\n","# model.summary()\n"]},{"cell_type":"markdown","metadata":{"id":"5la6usMOFzkX"},"source":["#### gen selected vector"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oQk3-jbKF8FB"},"outputs":[],"source":["def min_max_scale(npy_x):\n","\n","  return (npy_x - np.min(npy_x)) / (np.max(npy_x) - np.min(npy_x))\n","\n","def expand_dims(npy_x):\n","\n","  row, col = npy_x.shape\n","  npy_x2 = np.array(npy_x).reshape(-1, row, col, 1).astype(np.float32)\n","  # input_x = np.array(data_x).reshape(-1, row, col).astype(np.float32)\n","\n","  #     1c to 3c    #\n","  npy_x3 = npy_x2 * np.ones(3, dtype=np.float32)[None, None, None, :]\n","\n","  return npy_x3\n","\n","\n","def vector_dist(f1, f2):\n","  return np.linalg.norm(f1-f2)\n","\n","\n","\n","# ------------------------ params ------------------------  #\n","selected_i = 500\n","input_size = 100\n","\n","\n","\n","#   1. ÏÑ†ÌÉùÎêú Ïù∏Îç±Ïä§Î•º ÏûÖÎ†•Î∞õÏïòÏùÑ Îïå, input generating ÌòïÌÉúÎßå ÎßåÎì§Ïñ¥ÎÜìÍ≥†,     #\n","#   1-1. input cols ÌïÑÏöîÌï®    #\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower']\n","# senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","# senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","\n","sma_list = ['sma']\n","\n","#     -------------- outer price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","cctbbo_list = ['cctbbo']\n","\n","selected_price_colname = basic_list + senkoua_list + senkoub_list + sar_list\n","selected_outprice_colname = [macd_list]\n","\n","\n","#         global scaling for outer price data       #\n","#         1. nan Ï≤òÎ¶¨       #\n","\n","# # print((np.isnan(df.values)))\n","# print(\"np.sum(np.isnan(df.values), axis=0) :\", np.sum(np.isnan(df.values), axis=0))\n","\n","# max_nan = np.max(np.sum(np.isnan(df.values), axis=0))\n","# # print(max_nan)\n","\n","# df = df.iloc[max_nan:-max_nan]\n","\n","# total_gdata = []\n","# for g_col in selected_outprice_colname:\n","\n","#   temp_data = min_max_scale(res_df[g_col])\n","#   total_gdata.append(temp_data)\n","\n","\n","\n","#   1-2. cols Ïóê Îî∞Î•∏, scaling method Íµ¨Î∂ÑÌï®    #\n","onprice_input_x = min_max_scale(res_df[selected_price_colname].iloc[selected_i - input_size:selected_i].values)\n","print(onprice_input_x.shape)\n","\n","\n","#   2. plot_check ÏóêÏÑú Î≥∏Ïù∏Ïù¥ ÏõêÌïòÎäî shape Ïùò Ïù∏Îç±Ïä§Î•º ÏÑ†ÌÉù   #\n","#   3. vertorize, \n","#   3-1. input generator Î•º Ïù¥Ïö©Ìï¥ entry signal Î∞úÏÉùÌï† ÎïåÎßàÎã§ dist ÎπÑÍµê ÏßÑÌñâ    #\n","re_onprice_input_x = expand_dims(onprice_input_x)\n","print(re_onprice_input_x.shape)\n","      \n","# break\n","\n","selected_vector = model.predict(re_onprice_input_x, verbose=1)\n","print(selected_vector.shape)"]},{"cell_type":"markdown","metadata":{"id":"OJqkmkpsLCYC"},"source":["### tr_tresh calc"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":446,"status":"ok","timestamp":1636015063790,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"gcpo4MGd9Wm4","outputId":"434b56b3-3a3c-45c1-f559-42681fea5f05"},"outputs":[{"name":"stdout","output_type":"stream","text":["res_wr : 0.6\n","tr_thresh : 0.6766666666666667\n","[0.95, 1.0338333333333334, 0.95, 0.95, 1.0338333333333334, 0.95, 0.95, 1.0338333333333334, 0.95, 1.0338333333333334]\n","\n","Î≥µÎ¶¨Î•º ÏúÑÌïú tr_thresh_ : 1.0\n","np.cumprod(test_trade_list)[-1] : 0.5751227991397774\n","total_pr :  0.5751227991397774\n","\n","[-0.05        0.03383333 -0.05       -0.05        0.03383333 -0.05\n"," -0.05        0.03383333 -0.05        0.03383333]\n","Îã®Î¶¨Î•º ÏúÑÌïú tr_thresh_ : 1.0\n","np.cumsum(np_test_trade)[-1] : 0.30000000000001137\n","total_pr :  1.3000000000000114\n"]}],"source":["res_wr = 0.6\n","# tr_thresh = 1\n","# tr_thresh = ((1 - res_wr) / res_wr) ** 0.5\n","tr_thresh = ((1 - res_wr) / res_wr) + 0.01\n","# tr_thresh = 2.6\n","print(\"res_wr :\", res_wr)\n","print(\"tr_thresh :\", tr_thresh)\n","\n","\n","#   Îã®Î¶¨    #\n","trade_num = 1000\n","asset = 1 # thousand USDT\n","test_loss_gap = 0.95  # fee adjusted\n","test_pr_gap = 1 + (1 - test_loss_gap) * tr_thresh\n","\n","test_loss_cnt = trade_num * (1 - res_wr)\n","test_pr_cnt = trade_num * res_wr\n","\n","test_trade_list = [test_pr_gap] * int(test_pr_cnt) + [test_loss_gap] * int(test_loss_cnt)\n","random.shuffle(test_trade_list)\n","# print(\"len(test_trade_list) :\", len(test_trade_list))\n","print(test_trade_list[:10])\n","print()\n","\n","# print(\"%.5f\" % np.cumprod(test_trade_list)[-1])\n","for tr_thresh_ in np.arange(1, 3, 0.2):\n","  if (1 + (1 - test_loss_gap) * tr_thresh_) ** test_pr_cnt * test_loss_gap ** test_loss_cnt > 1:\n","    break\n","print(\"Î≥µÎ¶¨Î•º ÏúÑÌïú tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumprod(test_trade_list)[-1] :\", np.cumprod(test_trade_list)[-1])\n","print(\"total_pr : \", np.cumprod(test_trade_list)[-1])\n","print()\n","#   Î≥µÎ¶¨ tr_thresh  #\n","#   1. trade_num Ïóê ÏòÅÌñ• Î∞õÏßÄ ÏïäÏùå\n","#   2. loss_gap Ïóê ÎπÑÎ°ÄÌï®\n","\n","for tr_thresh_ in np.arange(1, 3, 0.01):\n","  if ((1 - test_loss_gap) * tr_thresh_) * test_pr_cnt + (test_loss_gap - 1) * test_loss_cnt > 0:\n","    break\n","np_test_trade = np.array(test_trade_list) - 1\n","print(np_test_trade[:10])\n","# print(\"%.3f\" % )\n","print(\"Îã®Î¶¨Î•º ÏúÑÌïú tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumsum(np_test_trade)[-1] :\", np.cumsum(np_test_trade)[-1])\n","print(\"total_pr : \", 1 + np.cumsum(np_test_trade)[-1])\n"]},{"cell_type":"markdown","metadata":{"id":"JNQxkb06ZdTe"},"source":["# traded section plot"]},{"cell_type":"markdown","metadata":{"id":"UmH_Pb5BZUtm"},"source":["## plot with off-color st with dash"]},{"cell_type":"markdown","metadata":{"id":"5z4L3MMYmUI0"},"source":["### sorted plot_check"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":9045,"status":"error","timestamp":1640954026443,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"Qv1MM2MemZnF","outputId":"523a123a-3c10-4336-fb43-e1a32103bb52"},"outputs":[{"name":"stdout","output_type":"stream","text":["open_side : -2.0\n","np_timeidx[open_idx] : 3\n","open_idx, ep_idx_list_[0], tp_idx_list_[-1] : 528844 528856 528924\n"]},{"ename":"AttributeError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-11-edde03cbc2c2>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    243\u001b[0m   \u001b[0mindex\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtemp_ohlc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    244\u001b[0m   \u001b[0mcandle\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhstack\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtemp_ohlc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 245\u001b[0;31m   \u001b[0mmf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcandlestick_ohlc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcandle\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwidth\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.5\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolorup\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'#26a69a'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolordown\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'#ef5350'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0malpha\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    246\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    247\u001b[0m   \u001b[0;31m# ---------- h_candle ---------- #\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: module 'mpl_finance' has no attribute 'candlestick_ohlc'"]},{"data":{"image/png":"\n","text/plain":["<Figure size 2600x1800 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["assert len(open_list) == len(trade_list), \"len(open_list) != len(trade_list)\"\n","assert len(tp_state_list) == len(fee_list), \"len(tp_state_list) != len(fee_list)\"\n","\n","if multi_mode:\n","  strat_version = \"v3\"\n","\n","save_plot = 0\n","tf_plot = 1\n","pr_sort = 1     # Ïù¥ÏÉÅÌïú Ï≤¥Í≤∞ ÌôïÏù∏ÌïòÍ∏∞ Ï¢ãÏùå\n","pr_descend = 1  # 1 -> ÎÇ¥Î¶ºÏ∞®Ïàú\n","# wl_case = 1     # 1 / -1 / 0 (win loss study)\n","position = -1    # -1 / 1 / 0 (short / long / both)\n","\n","inversion = 0\n","hedge = 0\n","\n","\n","if save_plot:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".ftr\", \"\")\n","  try:\n","    os.mkdir(plot_check_dir)\n","  except:\n","\n","    #     remove existing dir   #\n","    shutil.rmtree(plot_check_dir)\n","    print(plot_check_dir, 'removed !')\n","    os.mkdir(plot_check_dir)\n","    # pass\n","    \n","\n","prev_plotsize = 130\n","post_plotsize = 120\n","\n","\n","if position == -1:\n","  position = config.ep_set.short_entry_score\n","elif position == 1:\n","  position = -config.ep_set.short_entry_score\n","\n","\n","if inversion:  \n","\n","    plot_pr_list = rev_np_pr\n","    h_plot_pr_list = h_rev_np_pr  # hedge\n","\n","else:\n","\n","    plot_pr_list = np_pr\n","    try:\n","      h_plot_pr_list = h_np_pr\n","    except Exception as e:\n","      print(\"error in h_plot_pr :\", e)\n","      h_plot_pr_list = np_pr\n","\n","\n","h_candle_intv1 = 15\n","h_candle_intv2 = 60\n","if 'hopen_{}'.format(h_candle_intv2) not in res_df.columns:\n","  res_df = h_candle(res_df, h_candle_intv1)\n","  res_df = h_candle(res_df, h_candle_intv2)\n","\n","res_df[\"ma30_1m\"] = res_df['close'].rolling(30).mean()\n","res_df[\"ma60_1m\"] = res_df['close'].rolling(60).mean()\n","\n","res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line)\n","# res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=1, use_dtk_line=1)\n","# break\n","\n","rtc_list = [\"short_tp_1_{}\".format(strat_version), \"short_tp_gap_{}\".format(strat_version), \"long_tp_1_{}\".format(strat_version), \"long_tp_gap_{}\".format(strat_version)]\n","# h_rtc_list = [\"h_short_tp_1\", \"h_short_tp_gap\", \"h_long_tp_1\", \"h_long_tp_gap\"]\n","dtk_list = [\"short_dtk_1_{}\".format(strat_version), \"short_dtk_gap_{}\".format(strat_version), \"long_dtk_1_{}\".format(strat_version), \"long_dtk_gap_{}\".format(strat_version),\n","            # \"short_dtk_1_line\", \"short_dtk_gap_line\", \"long_dtk_1_line\", \"long_dtk_gap_line\",\n","            \"short_dtk_plot_1\", \"short_dtk_plot_gap\", \"long_dtk_plot_1\", \"long_dtk_plot_gap\"]\n","dc_v2_list = ['dc_upper_v2_{}'.format(strat_version), 'dc_lower_v2_{}'.format(strat_version)]\n","\n","\n","ohlc_list = ['open', 'high', 'low', 'close'] # + basic_st_list\n","hcandle_list = ['hopen_%s' % h_candle_intv1, 'hclose_%s' % h_candle_intv1, 'hopen_%s' % h_candle_intv2, 'hclose_%s' % h_candle_intv2]\n","# hcandle_list = ['hopen_%s' % h_candle_intv1, 'hclose_%s' % h_candle_intv1, 'hhigh_%s' % h_candle_intv2, 'hlow_%s' % h_candle_intv2]\n","\n","# --------------------- dc & bb level --------------------- #\n","dc_interval = '1m'\n","hdc_interval = '5m'\n","hhdc_interval = '15m'\n","\n","dc_list = ['dc_upper_%s' % dc_interval, 'dc_lower_%s' % dc_interval]\n","hdc_list = ['dc_upper_%s' % hdc_interval, 'dc_lower_%s' % hdc_interval]\n","hhdc_list = ['dc_upper_%s' % hhdc_interval, 'dc_lower_%s' % hhdc_interval]\n","\n","bb_interval = dc_interval\n","hbb_interval = hdc_interval\n","hhbb_interval = hhdc_interval\n","\n","bb_list = ['bb_upper_%s' % bb_interval, 'bb_lower_%s' % bb_interval]\n","hbb_list = ['bb_upper_%s' % hbb_interval, 'bb_lower_%s' % hbb_interval]\n","hhbb_list = ['bb_upper_%s' % hhbb_interval, 'bb_lower_%s' % hhbb_interval]\n","\n","bbwp_list = ['bbwp', 'bbwp_ma']\n","\n","\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1']\n","senkoub_list = ['senkou_b1']\n","\n","sar_list = ['sar_3m', 'sar_5m', 'sar_15m']\n","\n","ma_list = ['ma30_1m', 'ma60_1m']\n","sma_list = ['sma_1m']\n","\n","ema_list = ['ema_5m']\n","# cb_list = ['cloud_bline_1m']\n","cb_list = ['cloud_bline_30m']\n","# cb_list = ['cloud_bline_5m']\n","\n","\n","\n","# -------------- under price phase -------------- #\n","# macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3']\n","# trix_list = ['trix1', 'trix2', 'trix3']\n","# stoch_list = ['stoch_5m']\n","# fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","# cctbbo_list = ['cctbbo']\n","# emaroc_list = ['ema_roc']\n","rsi_list = ['rsi_%s' % config.loc_set.point.exp_itv] \n","cci_list = ['cci_%s' % config.loc_set.point.exp_itv] \n","\n","\n","# -------------- summation -------------- #\n","# input_colname = ohlc_list + basic_st_list + pline_list + bb_list + hbb_list + sma_list + cb_list + stoch_list + sar_list + dc_list\n","input_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + hhdc_list + dtk_list + dc_v2_list + rsi_list + ema_list + cci_list + ma_list\n","\n","# yrange_colname = ohlc_list + basic_st_list + pline_list # currently just used for ymin, ymax\n","yrange_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + hhdc_list + dc_v2_list + ema_list # currently just used for ymin, ymax\n","yrange_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + dc_v2_list + ema_list # currently just used for ymin, ymax\n","\n","\n","# aggr_obj = dict(zip(plot_pr_list, open_list, enumerate(trade_list)))\n","aggr_obj = dict(zip(plot_pr_list, zip(open_list, enumerate(trade_list))))\n","sorted_obj = sorted(aggr_obj.items(), key=(lambda x: x[0]), reverse=pr_descend)\n","\n","# print(aggr_obj)\n","# print(sorted_obj)\n","\n","if pr_sort:\n","  iter_obj = sorted_obj\n","else:\n","  iter_obj = aggr_obj.items()\n","\n","odd_cnt = 0\n","obj_i = -1\n","rev_obj_i = 0\n","len_obj = len(sorted_obj)\n","\n","#   ÏßÄÍ∏à, continue Î∞úÏÉùÏãú true / false idx Í∞Ä Í∞ôÏù¥ ÏÉÅÏäπÌïòÎäî Î¨∏Ï†ú\n","\n","# for temp_pr, (open_idx, (t_i, (ep_idx_list_, tp_idx_list_))) in iter_obj:  # 0.699700153073042, (291402, (3014, ([370012], [370014])))\n","# for obj_i, (temp_pr, (open_idx, (t_i, (ep_idx_list_, out_idx_list_, tp_idx_list_)))) in enumerate(iter_obj):  # 0.699700153073042, (291402, (3014, ([370012], [370014])))\n","# for temp_pr, (open_idx, (t_i, (ep_idx_list_, out_idx_list_, tp_idx_list_))) in iter_obj:  # 0.699700153073042, (291402, (3014, ([370012], [370014])))\n","\n","while 1:\n","\n","  if obj_i >= len_obj or rev_obj_i >= len_obj:\n","    break\n","\n","  if odd_cnt % 2 == 1 and tf_plot: #  loss plot ÏùÑ Ï±ÑÏõåÏïºÌïòÎäî ÏÉÅÌô©\n","    rev_obj_i += 1\n","    temp_pr, (open_idx, (t_i, (ep_idx_list_, out_idx_list_, tp_idx_list_))) = sorted_obj[-rev_obj_i]\n","    if temp_pr > 1.0:\n","      continue  \n","\n","  else:\n","    obj_i += 1\n","    temp_pr, (open_idx, (t_i, (ep_idx_list_, out_idx_list_, tp_idx_list_))) = sorted_obj[obj_i]\n","    if temp_pr < 1.0:\n","      continue  \n","\n","  if not(i >= prev_plotsize):\n","    continue\n","  \n","  #   open size indexing by open_idx    #\n","  open_side_ = res_df['entry_{}'.format(strat_version)].iloc[open_idx]\n","\n","  # ---------- const. zone ---------- #\n","\n","  if position != 0:\n","    if open_side_ != position:\n","      continue\n","\n","  if multi_mode:\n","    if not strat_version in tp_state_list[t_i]:\n","    # if tp_state_list[t_i] != 'long close tp':\n","    # if tp_state_list[t_i] != 's-long_tp':\n","      continue\n","\n","  # if open_idx == 63901:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","\n","  # if tp_ratio_list[t_i] > 0.4:\n","  #   continue\n","\n"," \n","  # print(\"open_idx :\", open_idx)\n","  print(\"open_side_ :\", open_side_)\n","  print(\"np_timeidx[open_idx] :\", np_timeidx[open_idx])\n","  print(\"open_idx, ep_idx_list_[0], tp_idx_list_[-1] :\", open_idx, ep_idx_list_[0], tp_idx_list_[-1])\n","  #   const. Ïóê Ìï©ÌïòÎäî Ï°∞Í±¥ ÎÇòÏò¨ÎïåÍπåÏßÄ loop ÎèåÎ¶¨Í≥†, const. phase ÌÜµÍ≥ºÏãú odd_cnt += 1,\n","  #   => odd_cnt Î°ú gs_plot ÏùÑ Ï±ÑÏö¥Îã§Îäî ÎäêÎÇå \n","  #   odds = 1 -> wl_case == 1 Îßå ÌóàÏö©, odds = 2 -> wl_case == -1 Îßå ÌóàÏö©\n","  odd_cnt += 1\n","\n","  # break\n","\n","  plot_df = res_df.iloc[open_idx - prev_plotsize:tp_idx_list_[-1] + post_plotsize][input_colname]\n","\n","\n","  #       keep off-color st with another variable         #\n","  # st_trend_plot_df = res_df[['ST1_Trend%s' % basic_st_interval, 'ST2_Trend%s' % basic_st_interval, 'ST3_Trend%s' % basic_st_interval]].iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","\n","  # fig = trendln.plot_support_resistance(plot_df['close'], accuracy=8, fromwindows=0, numbest=1,  window=30) # requires matplotlib - pip install matplotlib\n","  \n","  odds = 1 if odd_cnt % 2 == 1 else 2\n","  if odds == 1:\n","\n","    plt.style.use('dark_background')\n","\n","    fig = plt.figure(figsize=(26, 18))\n","    \n","    gs = gridspec.GridSpec(nrows=2, # row Î™á Í∞ú \n","                        ncols=2, # col Î™á Í∞ú \n","                        height_ratios=[3, 1]\n","                        )\n","    \n","  ax = fig.add_subplot(gs[odds - 1])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='#26a69a', colordown='#ef5350', alpha=0.5)\n","\n","  # ---------- h_candle ---------- #\n","  alpha = 1\n","  lw = 1\n","  for cd_i, candle in enumerate(hcandle_list):\n","\n","    if cd_i == 2:\n","      lw = 2      \n","    plt.step(np.arange(len(plot_df)), plot_df[candle].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","\n","  # alpha = 0.1\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['hclose_60'].values, plot_df['hopen_60'].values, \n","  #                     where=1, facecolor='#ffffff', alpha=alpha)  \n","  \n","\n","   # --------- ma --------- #\n","  alpha = 1\n","  lw = 2\n","  for ma_i, item in enumerate(ma_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","   # --------- ema --------- #\n","  alpha = 1\n","  lw = 4\n","  for sm_i, item in enumerate(ema_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","    \n","  # ---------------------- dc_v2 ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(dc_v2_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","  # ---------------------- dc ---------------------- #\n","  alpha = 1\n","  lw = 2\n","  for sm_i, item in enumerate(dc_list):\n","      plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","  # ---------------------- hdc ---------------------- #\n","  alpha = 1\n","  lw = 2\n","  for sm_i, item in enumerate(hdc_list):\n","      plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#e65100', linewidth=lw)\n","\n","  # ---------------------- hhdc ---------------------- #\n","  alpha = 1\n","  lw = 4\n","  for sm_i, item in enumerate(hhdc_list):\n","      plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#c2185b', linewidth=lw)\n","\n","\n","  # ---------------------- bb ---------------------- #\n","  alpha = 1\n","  lw = 1\n","  for sm_i, item in enumerate(bb_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","\n","  alpha = 0.2\n","  plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % bb_interval].values, plot_df['bb_lower_%s' % bb_interval].values, \n","                      where=plot_df['bb_upper_%s' % bb_interval].values >= plot_df['bb_lower_%s' % bb_interval].values, facecolor='#ffffff', alpha=alpha)   \n","\n","  # ---------------------- hbb ---------------------- #\n","  alpha = 1\n","  lw = 2\n","  for sm_i, item in enumerate(hbb_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ff00ff', linewidth=lw)\n","  \n","  alpha = 0.2\n","  plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % hbb_interval].values, plot_df['bb_lower_%s' % hbb_interval].values, \n","                      where=plot_df['bb_upper_%s' % hbb_interval].values >= plot_df['bb_lower_%s' % hbb_interval].values, facecolor='#ff00ff', alpha=alpha) \n","  \n","  # ---------------------- hhbb ---------------------- #\n","\n","  alpha = 1\n","  lw = 4\n","  for sm_i, item in enumerate(hhbb_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#3179f5', linewidth=lw)\n","  \n","  alpha = 0.2\n","  plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % hhbb_interval].values, plot_df['bb_lower_%s' % hhbb_interval].values, \n","                      where=plot_df['bb_upper_%s' % hhbb_interval].values >= plot_df['bb_lower_%s' % hhbb_interval].values, facecolor='#3179f5', alpha=alpha) \n","  \n","  # ------------------- dtk_line (old, tp_line) ------------------- #\n","  \n","  # alpha = 1\n","  # lw = 2\n","  # rtc_ratio_list = [config.loc_set.zone.dt_k]\n","  \n","  # for rtc_k in rtc_ratio_list:    \n","  #   # plt.step(np.arange(len(plot_df)), plot_df['short_dtk_1_line'].values - plot_df['short_dtk_gap_line'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['long_dtk_1_line'].values + plot_df['long_dtk_gap_line'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","\n","  # hy_min = np.min(plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * rtc_k)\n","  # hy_max = np.max(plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * rtc_k)  \n","\n","  # alpha = 1\n","  # lw = 4\n","  # # h_rtc_ratio_list = [config.loc_set.zone.dt_k]\n","  # h_rtc_ratio_list = [config.loc_set.zone.zone_dt_k]\n","  # # h_rtc_ratio_list = [0.272, 0.36, 0.4, 0.5]\n","  \n","  # for h_rtc_k in h_rtc_ratio_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df['short_dtk_plot_1'].values - plot_df['short_dtk_plot_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['long_dtk_plot_1'].values + plot_df['long_dtk_plot_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['h_short_tp_1'].values - plot_df['h_short_tp_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['h_long_tp_1'].values + plot_df['h_long_tp_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","\n","  # # hy_min = np.min(plot_df['short_dtk_plot_1'].values - plot_df['short_dtk_plot_gap'].values * h_rtc_k)\n","  # # hy_max = np.max(plot_df['long_dtk_plot_1'].values + plot_df['long_dtk_plot_gap'].values * h_rtc_k)  \n","\n","  # ------------------------------------------------------------- #\n","\n","\n","  # ------------- ep ------------- #\n","  # if i != initial_i:\n","  # if len(ep_idx_list_) > 1:\n","  \n","    #        initial order         #\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='#ffeb3b')\n","  plt.axvline(prev_plotsize, alpha=0.5, linestyle='--', color='#ffeb3b')\n","\n","  for ep_i in range(len(ep_idx_list_)):\n","    # plt.axvline(prev_plotsize + (ep_idx_list_[ep_i] - ep_idx_list_[0]), alpha=0.7, linestyle='--', color='#ffeb3b')\n","    plt.axvline(prev_plotsize + (ep_idx_list_[ep_i] - open_idx), alpha=0.7, linestyle='--', color='#ffeb3b')\n","\n","  # plt.axvline(prev_plotsize, alpha=0.5, linestyle='--')\n","\n","  x0,x1 = plt.gca().get_xlim()\n","\n","  # ep_xmin = (prev_plotsize + (ep_idx_list_[ep_i] - ep_idx_list_[0])) / x1\n","  ep_xmin = (prev_plotsize + (ep_idx_list_[ep_i] - open_idx)) / x1\n","  plt.axhline(ep_tp_list[t_i][0], linestyle='--', xmin=ep_xmin, xmax=1, alpha=1, color='lime')  # ep line axhline  \n","  plt.text(x1, ep_tp_list[t_i][0][0], ' ep :\\n %s' % ep_tp_list[t_i][0][0], ha='left', va='center', fontweight='bold') # ep line label\n","\n","  \n","  # ------------- tp ------------- #\n","  for sub_i in range(len(ep_tp_list[t_i][1])):\n","\n","    # tp_xmin = (prev_plotsize + (tp_idx_list_[sub_i] - ep_idx_list_[0])) / x1\n","    tp_xmin = (prev_plotsize + (tp_idx_list_[sub_i] - open_idx)) / x1\n","    plt.axhline(ep_tp_list[t_i][1][sub_i], linestyle='--', xmin=tp_xmin , xmax=1, alpha=1, color='lime')  # tp line axhline\n","    plt.text(x1, ep_tp_list[t_i][1][sub_i], ' tp :\\n %s' % ep_tp_list[t_i][1][sub_i], ha='left', va='center', fontweight='bold') # tp line label\n","     \n","    # plt.axvline(prev_plotsize + (tp_idx_list_[sub_i] - ep_idx_list_[0]), alpha=1., linestyle='--', color='#ffeb3b', zorder=2)\n","    plt.axvline(prev_plotsize + (tp_idx_list_[sub_i] - open_idx), alpha=1., linestyle='--', color='#ffeb3b', zorder=2)\n","\n","\n","  # ------------- rtc horizontal range ------------- # --> open_idx Î°ú Ìï†ÏßÄÎäî Ï∂îÌõÑ ÏàòÏ†ï Í∂åÍ≥† (ep_loc.point2 Ïóê ÏùòÌï¥ ÏßÑÏûÖ Í∏∞Ï§Ä point Í∞Ä Î≥ÄÍ≤ΩÎê† Ïàò ÏûàÏùå)\n","  # rtc_ratio_list = [0.272, 0.36, 0.4, 0.5]\n","  rtc_ratio_list = [0.]\n","  if open_side_ == config.ep_set.short_entry_score:\n","    # plt.axhline(res_df['short_rtc_1'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    # plt.axhline(res_df['short_rtc_0'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    out_line = res_df['short_out_{}'.format(strat_version)].iloc[out_idx_list_[0]]\n","    plt.axhline(out_line, linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    plt.text(x0, out_line, ' %s' % config.tr_set.out_gap, ha='left', va='center', fontweight='bold')\n","\n","    for rtc_k in rtc_ratio_list:\n","      plt.axhline(res_df['h_short_rtc_1_{}'.format(strat_version)].iloc[open_idx] - res_df['h_short_rtc_gap_{}'.format(strat_version)].iloc[open_idx] * rtc_k, linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","      plt.text(x0, res_df['h_short_rtc_1_{}'.format(strat_version)].iloc[open_idx] - res_df['h_short_rtc_gap_{}'.format(strat_version)].iloc[open_idx] * rtc_k, ' %s' % rtc_k, ha='left', va='center', fontweight='bold')\n","      \n","    y_max = out_line\n","    y_min = res_df['h_short_rtc_1_{}'.format(strat_version)].iloc[tp_idx_list_[-1]] - res_df['h_short_rtc_gap_{}'.format(strat_version)].iloc[tp_idx_list_[-1]] * rtc_k\n","\n","    print(\"short_tp :\", res_df['short_tp_{}'.format(strat_version)].iloc[tp_idx_list_[-1]])\n","    print(\"short_out :\", out_line)\n","\n","  else:\n","    # plt.axhline(res_df['long_rtc_1'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    # plt.axhline(res_df['long_rtc_0'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff') \n","    out_line = res_df['long_out_{}'.format(strat_version)].iloc[out_idx_list_[0]]\n","    plt.axhline(out_line, linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    plt.text(x0, out_line, ' %s' % config.tr_set.out_gap, ha='left', va='center', fontweight='bold')\n","\n","    for rtc_k in rtc_ratio_list:\n","      plt.axhline(res_df['h_long_rtc_1_{}'.format(strat_version)].iloc[open_idx] + res_df['h_long_rtc_gap_{}'.format(strat_version)].iloc[open_idx] * rtc_k, linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","      plt.text(x0, res_df['h_long_rtc_1_{}'.format(strat_version)].iloc[open_idx] + res_df['h_long_rtc_gap_{}'.format(strat_version)].iloc[open_idx] * rtc_k, ' %s' % rtc_k, ha='left', va='center', fontweight='bold')\n","\n","    y_max = res_df['h_long_rtc_1_{}'.format(strat_version)].iloc[tp_idx_list_[-1]] + res_df['h_long_rtc_gap_{}'.format(strat_version)].iloc[tp_idx_list_[-1]] * rtc_k\n","    y_min = out_line\n","\n","    print(\"long_tp :\", res_df['long_tp_{}'.format(strat_version)].iloc[tp_idx_list_[-1]])\n","    print(\"long_out :\", out_line)\n","  \n","    # t_tr = ((res_df['long_tp'].iloc[open_idx] - res_df['close'].iloc[open_idx] - tp_fee * res_df['close'].iloc[open_idx]) / (res_df['close'].iloc[open_idx] - res_df['long_out'].iloc[open_idx] + out_fee * res_df['close'].iloc[open_idx]))\n","    # t_dr = ((res_df['long_tp'].iloc[open_idx] - res_df['close'].iloc[open_idx]) / (res_df['close'].iloc[open_idx] - res_df['long_out'].iloc[open_idx]))     \n","    # print(\"t_tr :\", t_tr)\n","    # print(\"t_dr :\", t_dr)\n","\n","  #         hedge ep & tp         #\n","  h_i = h_trade_list[t_i][1]\n","  if h_i is not None:\n","    # plt.axvline(prev_plotsize + (h_i - ep_idx_list_[0]), linestyle='--')\n","    plt.axvline(prev_plotsize + (h_i - open_idx), linestyle='--')\n","    plt.axhline(h_ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='magenta')  # ep line axhline\n","    plt.axhline(h_ep_tp_list[t_i][1], linestyle='-', xmin=0.85, xmax=1, linewidth=3, color='magenta')  # tp line axhline\n","\n","  \n","  #         check pr        #\n","  if not config.lvrg_set.static_lvrg:\n","    \n","    #   list length Îßå sync ÎßûÏúºÎ©¥ t_i Í±±Ï†ï ÏïàÌï¥ÎèÑÎê®, zip Ìï¥ÏÑú ÏàúÏÑúÍ∞Ä Î∞îÎÄåÏóàÏùÑ Îøê, original serialized order ÏóêÏÑú t_i Î°ú indexing ÌïòÎäî Í≤ÉÎøêÏûÑ   #\n","    plt.title(\"%s ~ %s -> %.5f\\n %s\\n h_pr : %.5f\\n lvrg : %s\\ntp_ratio : %.3f\\n dr : %.3f\\n fee : %.4f\" % (ep_idx_list_[0], tp_idx_list_[-1], plot_pr_list[t_i], tp_state_list[t_i], \n","                                                                                                h_plot_pr_list[t_i], leverage_list[t_i], tp_ratio_list[t_i], dr_list[t_i], fee_list[t_i]))\n","\n","    print(\"short real pr :\", (ep_tp_list[t_i][0] / ep_tp_list[t_i][1][sub_i] - fee_list[t_i] - 1) * leverage_list[t_i] + 1)\n","    print(\"long real pr :\", (ep_tp_list[t_i][1][sub_i] / ep_tp_list[t_i][0] - fee_list[t_i] - 1) * leverage_list[t_i] + 1)    \n","\n","  else:\n","    plt.title(\"%s ~ %s -> %.5f\\n %s\\n h_pr : %.5f\\n tp_ratio : %.3f\\n dr : %.3f\\n fee : %.4f\" % (ep_idx_list_[0], tp_idx_list_[-1], plot_pr_list[t_i], tp_state_list[t_i], \n","                                                                                     h_plot_pr_list[t_i], tp_ratio_list[t_i], dr_list[t_i], fee_list[t_i]))\n","\n","    print(\"short real pr :\", (ep_tp_list[t_i][0] / ep_tp_list[t_i][1][sub_i] - fee_list[t_i] - 1) * config.lvrg_set.leverage + 1)\n","    print(\"long real pr :\", (ep_tp_list[t_i][1][sub_i] / ep_tp_list[t_i][0] - fee_list[t_i] - 1) * config.lvrg_set.leverage + 1)\n","  \n","  #           y lim           #  \n","  y_max_ = max(np.max(plot_df[yrange_colname]))\n","  y_min_ = min(np.min(plot_df[yrange_colname]))\n","  y_max = max(y_max, y_max_)\n","  y_min = min(y_min, y_min_)\n","  \n","  # hy_min = np.min(plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * 0.36)\n","  # hy_max = np.max(plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * 0.36)  \n","  # y_max = max(y_max, y_max_, hy_max)\n","  # y_min = min(y_min, y_min_, hy_min)\n","\n","  if np.isnan(y_max) or np.isnan(y_min):\n","    print('continued in yminmax')\n","    continue\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","\n","  plt.ylim(y_min, y_max)\n","\n","  #           x lim             #\n","  x_max = 500\n","  if len(plot_df) > x_max:\n","    plt.xlim(-10, x_max)\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  #           rsi          #    \n","  plt.subplot(gs[odds + 1])\n","  alpha = 1\n","  for rsi_ in rsi_list:\n","    plt.step(np.arange(len(plot_df)), plot_df[rsi_].values, 'g', alpha=alpha)\n","    # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","    alpha -= 0.2\n","  plt.axhline(50, linestyle='--')\n","  plt.axhline(50 + config.loc_set.point.osc_band, linestyle='--')\n","  plt.axhline(50 - config.loc_set.point.osc_band, linestyle='--')\n","  \n","  plt.axvline(prev_plotsize, linestyle='--')\n","  \n","  #           cci          #    \n","  # plt.subplot(gs[odds + 1])\n","  # alpha = 1\n","  # for cci_ in cci_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cci_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axhline(config.loc_set.point.osc_band, linestyle='--')\n","  # plt.axhline(-config.loc_set.point.osc_band, linestyle='--')\n","  \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","\n","\n","  #     vline open     #\n","  for ep_i in range(len(ep_idx_list_)):\n","    plt.axvline(prev_plotsize + (ep_idx_list_[ep_i] - open_idx), alpha=0.7, linestyle='--', color='#ffeb3b')\n","  \n","  #     vline close     #\n","  for sub_i in range(len(ep_tp_list[t_i][1])):\n","    plt.axvline(prev_plotsize + (tp_idx_list_[sub_i] - open_idx), alpha=1., linestyle='--', color='#ffeb3b', zorder=2)\n","\n","  if len(plot_df) > x_max:\n","    plt.xlim(-10, x_max)\n","\n","\n","  if not save_plot:\n","    if odds == 2:\n","      plt.show()\n","      plt.close()\n","  \n","  else:\n","    # ---------- save mode ---------- #\n","    fig_name = plot_check_dir +  \"/%s.png\" % t_i\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","\n","  # plt.close()  \n","  print()\n","\n","  # break\n"]},{"cell_type":"markdown","metadata":{"id":"13a-U32Uy50I"},"source":["### brief np_pr survey"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"L9LdjV2uUWnp"},"outputs":[],"source":["# plot_pr_list[:100]\n","\n","plt.plot(np_pr)\n","plt.axhline(1)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"TBE0l6dHRYrE"},"source":["### whole pr & chart sync"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":877},"executionInfo":{"elapsed":1436,"status":"ok","timestamp":1636355589887,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"-txULkhXRbz5","outputId":"7cda9fc7-4a4e-4c52-ffa3-a974b5f7c66f"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 3 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 3 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]}],"source":["#     chunky survey ÌïÑÏöîÌï®    #\n","chunk_size = 50000\n","\n","sync_pr = np.ones(len(res_df))\n","sync_tr = np.zeros(len(res_df))\n","# sync_tr = np.empty(len(res_df))\n","# sync_tr[:] = np.nan\n","\n","max_tr = np.max(tp_ratio_list)\n","min_tr = np.min(tp_ratio_list)\n","\n","for ck_i in range(0, len(res_df), chunk_size):\n","\n","  chunked_df = res_df.iloc[ck_i:ck_i + chunk_size]\n","  # break\n","\n","  for pr_, eptp_idx, tr_ in zip(pr_list[ck_i:ck_i + chunk_size], trade_list[ck_i:ck_i + chunk_size], tp_ratio_list[ck_i:ck_i + chunk_size]):\n","    # print(pr_, eptp_idx)\n","    sync_pr[eptp_idx[-1][0]] = pr_\n","    sync_tr[eptp_idx[-1][0]] = tr_\n","    # break\n","\n","  chunked_pr = sync_pr[ck_i:ck_i + chunk_size]\n","  chunked_tr = sync_tr[ck_i:ck_i + chunk_size]\n","  chunked_tr = np.where(np.isnan(chunked_tr), pd.Series(chunked_tr).shift(1), chunked_tr)\n","\n","  # plt.figure(figsize=(8, 6))\n","\n","  plt.subplot(311)\n","  plt.plot(np.arange(len(chunked_df)), chunked_df['close'])\n","  # plt.show()\n","\n","  plt.subplot(312)\n","  plt.plot(np.cumprod(chunked_pr))\n","  \n","  plt.subplot(313)\n","  plt.plot(chunked_tr)\n","  plt.ylim(min_tr + 0.5 * (max_tr - min_tr), max_tr)\n","  \n","  plt.show()\n","  print()\n"]},{"cell_type":"markdown","metadata":{"id":"Qys2Bw5Ou3u9"},"source":["### plot indi. legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pi5ntOOVu6JT"},"outputs":[],"source":["\n","  # ---------------------- ma ---------------------- #\n","   # --------- ema --------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(ema_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  #   # --------- sma --------- #\n","  # alpha = 1\n","  # for sm_i, sma in enumerate(sma_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 4\n","  #   plt.step(np.arange(len(plot_df)), plot_df[sma].values, alpha=alpha, color='#e91e63', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  \n","  # ---------------------- cb ---------------------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(cb_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#5b9cf6', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","\n","  \n","  # ---------------------- sar ---------------------- #\n","  # alpha = 1\n","  # markersize = 5\n","  # for sar in sar_list:\n","  #   plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","  #   markersize += 1\n","  #   alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  # alpha = 0.7\n","  # for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","  #                     where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","  #                     where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","  #   alpha -= 0.05\n","  \n","\n","\n","  # ---------------------- outer price indi. ---------------------- #\n","  #           macd          #\n","  # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","    \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for stoch_ in stoch_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[stoch_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(stoch_upper, linestyle='--')\n","  # plt.axhline(stoch_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- cctbbo ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for cctbbo in cctbbo_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cctbbo].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(cctbbo_upper, linestyle='--')\n","  # plt.axhline(cctbbo_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- ema_roc ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for emaroc in emaroc_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[emaroc].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","  \n","  # ---------- bbw ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for bbwp_ in bbwp_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[bbwp_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(bbwp_thresh, linestyle='--')\n","\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n"]},{"cell_type":"markdown","metadata":{"id":"59nW2aKYzkN8"},"source":["### plot all indicator (stepline ver.)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":828},"executionInfo":{"elapsed":3326,"status":"ok","timestamp":1631665238032,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"JDH4rXgNzno6","outputId":"3ee8589d-27d7-4433-ed78-7bb1233cf175"},"outputs":[{"name":"stdout","output_type":"stream","text":["short real pr : [0.95849245]\n","long real pr : [1.0378222]\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 864x1152 with 2 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]}],"source":["save_plot = False\n","\n","\n","if save_plot:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".xlsx\", \"\")\n","  try:\n","    os.mkdir(plot_check_dir)\n","  except:\n","\n","    #     remove existing dir   #\n","    shutil.rmtree(plot_check_dir)\n","    print(plot_check_dir, 'removed !')\n","    os.mkdir(plot_check_dir)\n","    # pass\n","    \n","# prev_plotsize = 120\n","prev_plotsize = 150\n","post_plotsize = 20\n","\n","# inversion = True\n","inversion = False\n","\n","# hedge = True\n","# hedge = False\n","\n","\n","if inversion:  \n","\n","    plot_pr_list = rev_np_pr\n","    h_plot_pr_list = h_rev_np_pr  # hedge\n","\n","else:\n","\n","    plot_pr_list = np_pr\n","    try:\n","      h_plot_pr_list = h_np_pr\n","    except Exception as e:\n","      print(\"error in h_plot_pr :\", e)\n","      h_plot_pr_list = np_pr\n","\n","\n","#         select plot columns       #\n","major_st_list = ['major_ST1_Up', 'major_ST1_Down', 'major_ST2_Up', 'major_ST2_Down', 'major_ST3_Up', 'major_ST3_Down',\n","                 'major_middle_line', 'major_upper_middle', 'major_lower_middle']\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower'] # + major_st_list\n","\n","\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1',  'senkou_a2']\n","senkoub_list = ['senkou_b1',  'senkou_b2']\n","\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1']\n","\n","# ma_list = ['sma1', 'sma4']\n","ma_list = ['ema5']\n","\n","\n","#     -------------- under price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","# macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3']\n","# trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","trix_list = ['trix1', 'trix2', 'trix3']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","cctbbo_list = ['cctbbo']\n","emaroc_list = ['ema_roc']\n","\n","\n","#       \n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols + ichimoku_cols2\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + trix_list\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + ma_list\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + ma_list + macd_list + stoch_list + fisher_list + cctbbo_list\n","input_colname = basic_list + major_st_list + senkoua_list + senkoub_list + sar_list + stoch_list + fisher_list + emaroc_list\n","price_colname = basic_list + senkoua_list + senkoub_list + sar_list # currently just used for ymin, ymax\n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols\n","\n","\n","\n","\n","# for t_i, (initial_i, i, j) in enumerate(trade_list):\n","for t_i, (ep_idx_list_, tp_idx_list_) in enumerate(trade_list):\n","  # print(i, j)\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","\n","  # if i <= 4860:\n","  # if i == 1536:\n","  # if 100 < i < 1860:\n","  if ep_idx_list_[0] == 370530:\n","    pass\n","  else:\n","    continue\n","\n","  # if tp_state_list[t_i] != 'd-open':\n","  #   continue\n","\n","  # if (entry[i] == -1) and res_df['close'].iloc[i - 1] > short_ep.iloc[i]:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  # if plot_pr_list[t_i] > 0.5:\n","  # if plot_pr_list[t_i] > 1.0:\n","  # # if plot_pr_list[t_i] < 1.0:\n","  #   continue\n","\n","  # plot_df = res_df.iloc[i - prev_plotsize:j + post_plotsize, input_cols]\n","  plot_df = res_df.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize][input_colname]\n","\n","\n","  #       keep off-color st with another variable         #\n","  # st_trend_plot_df = res_df.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize, [7, 10, 13]]\n","  # st_trend_plot_df = res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend']].iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  st_trend_plot_df = res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend', 'major_ST1_Trend', 'major_ST2_Trend', 'major_ST3_Trend']].iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  # htf_st_trend_plot_df = res_df[['major_ST1_Trend', 'major_ST2_Trend', 'major_ST3_Trend']].iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","\n","  # y_max = np.max(plot_df.iloc[:, [4, 6, 8]])\n","  # y_min = np.min(plot_df.iloc[:, [5, 7, 9]])\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  \n","  # y_max = max(np.max(plot_df.iloc[:, [4, 6, 8]]))\n","  # y_min = min(np.min(plot_df.iloc[:, [5, 7, 9]]))\n","  \n","  y_max = max(np.max(plot_df[price_colname]))\n","  y_min = min(np.min(plot_df[price_colname]))\n","\n","  if np.isnan(y_max) or np.isnan(y_min):\n","    continue\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","  \n","  plot_df[\"off_color_upper_st1\"] = np.where(st_trend_plot_df['minor_ST1_Trend'] == 1, plot_df['minor_ST1_Up'], np.nan)\n","  plot_df[\"off_color_upper_st2\"] = np.where(st_trend_plot_df['minor_ST2_Trend'] == 1, plot_df['minor_ST2_Up'], np.nan)\n","  plot_df[\"off_color_upper_st3\"] = np.where(st_trend_plot_df['minor_ST3_Trend'] == 1, plot_df['minor_ST3_Up'], np.nan)\n","  plot_df[\"off_color_lower_st1\"] = np.where(st_trend_plot_df['minor_ST1_Trend'] == -1, plot_df['minor_ST1_Down'], np.nan)\n","  plot_df[\"off_color_lower_st2\"] = np.where(st_trend_plot_df['minor_ST2_Trend'] == -1, plot_df['minor_ST2_Down'], np.nan)\n","  plot_df[\"off_color_lower_st3\"] = np.where(st_trend_plot_df['minor_ST3_Trend'] == -1, plot_df['minor_ST3_Down'], np.nan)\n","\n","  plot_df[\"off_color_upper_hst1\"] = np.where(st_trend_plot_df['major_ST1_Trend'] == 1, plot_df['major_ST1_Up'], np.nan)\n","  plot_df[\"off_color_upper_hst2\"] = np.where(st_trend_plot_df['major_ST2_Trend'] == 1, plot_df['major_ST2_Up'], np.nan)\n","  plot_df[\"off_color_upper_hst3\"] = np.where(st_trend_plot_df['major_ST3_Trend'] == 1, plot_df['major_ST3_Up'], np.nan)\n","  plot_df[\"off_color_lower_hst1\"] = np.where(st_trend_plot_df['major_ST1_Trend'] == -1, plot_df['major_ST1_Down'], np.nan)\n","  plot_df[\"off_color_lower_hst2\"] = np.where(st_trend_plot_df['major_ST2_Trend'] == -1, plot_df['major_ST2_Down'], np.nan)\n","  plot_df[\"off_color_lower_hst3\"] = np.where(st_trend_plot_df['major_ST3_Trend'] == -1, plot_df['major_ST3_Down'], np.nan)\n","\n","\n","  #       replace st values with np.nan, using st trend     #\n","  plot_df['minor_ST1_Up'] = np.where(st_trend_plot_df['minor_ST1_Trend'] == 1, np.nan, plot_df['minor_ST1_Up'])\n","  plot_df['minor_ST2_Up'] = np.where(st_trend_plot_df['minor_ST2_Trend'] == 1, np.nan, plot_df['minor_ST2_Up'])\n","  plot_df['minor_ST3_Up'] = np.where(st_trend_plot_df['minor_ST3_Trend'] == 1, np.nan, plot_df['minor_ST3_Up'])\n","  plot_df['minor_ST1_Down'] = np.where(st_trend_plot_df['minor_ST1_Trend'] == -1, np.nan, plot_df['minor_ST1_Down'])\n","  plot_df['minor_ST2_Down'] = np.where(st_trend_plot_df['minor_ST2_Trend'] == -1, np.nan, plot_df['minor_ST2_Down'])\n","  plot_df['minor_ST3_Down'] = np.where(st_trend_plot_df['minor_ST3_Trend'] == -1, np.nan, plot_df['minor_ST3_Down'])\n","\n","  plot_df['major_ST1_Up'] = np.where(st_trend_plot_df['major_ST1_Trend'] == 1, np.nan, plot_df['major_ST1_Up'])\n","  plot_df['major_ST2_Up'] = np.where(st_trend_plot_df['major_ST2_Trend'] == 1, np.nan, plot_df['major_ST2_Up'])\n","  plot_df['major_ST3_Up'] = np.where(st_trend_plot_df['major_ST3_Trend'] == 1, np.nan, plot_df['major_ST3_Up'])\n","  plot_df['major_ST1_Down'] = np.where(st_trend_plot_df['major_ST1_Trend'] == -1, np.nan, plot_df['major_ST1_Down'])\n","  plot_df['major_ST2_Down'] = np.where(st_trend_plot_df['major_ST2_Trend'] == -1, np.nan, plot_df['major_ST2_Down'])\n","  plot_df['major_ST3_Down'] = np.where(st_trend_plot_df['major_ST3_Trend'] == -1, np.nan, plot_df['major_ST3_Down'])\n","\n","\n","  plot_short_ep = short_ep.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  plot_long_ep = long_ep.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","\n","  plot_upper_middle = (plot_df['middle_line'] + plot_df['min_upper']) / 2\n","  plot_lower_middle = (plot_df['middle_line'] + plot_df['max_lower']) / 2\n","\n","  plot_short_tp = short_tp.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  plot_long_tp = long_tp.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]  \n","\n","\n","  # fig = trendln.plot_support_resistance(plot_df['close'], accuracy=8, fromwindows=False, numbest=1,  window=30) # requires matplotlib - pip install matplotlib\n","\n","  fig = plt.figure(figsize=(12, 16))\n","  \n","  gs = gridspec.GridSpec(nrows=3, # row Î™á Í∞ú \n","                       ncols=1, # col Î™á Í∞ú \n","                       height_ratios=[3, 1, 1]\n","                      )\n","  \n","  # fig = plt.figure(figsize=(8, 12))\n","  # ax = fig.add_subplot(111)\n","  # ax = fig.add_subplot(311)\n","  ax = fig.add_subplot(gs[0])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='r', colordown='b')\n","\n","  plt.step(plot_df[['minor_ST1_Up', 'minor_ST2_Up', 'minor_ST3_Up']].values, 'r', alpha=1)  # upper on color\n","  plt.step(plot_df[['minor_ST1_Down', 'minor_ST2_Down', 'minor_ST3_Down']].values, 'b', alpha=1)  # lower on color\n","  \n","  plt.step(plot_df[['major_ST1_Up', 'major_ST2_Up', 'major_ST3_Up']].values, 'r', alpha=1, linewidth=3)  # major upper on color\n","  plt.step(plot_df[['major_ST1_Down', 'major_ST2_Down', 'major_ST3_Down']].values, 'b', alpha=1, linewidth=3)  # major lower on color\n","\n","  plt.step(plot_df[['middle_line']].values, 'fuchsia', alpha=1)  # middle \n","  plt.step(plot_df[['major_middle_line']].values, 'fuchsia', alpha=1, linewidth=3)  # major_middle \n","  \n","  plt.step(plot_df[['off_color_upper_st1', 'off_color_upper_st2', 'off_color_upper_st3']].values, 'r', alpha=1, linestyle=':')  # upper off color\n","  plt.step(plot_df[['off_color_lower_st1', 'off_color_lower_st2', 'off_color_lower_st3']].values, 'b', alpha=1, linestyle=':')  # lower off color\n","  \n","  plt.step(plot_df[['off_color_upper_hst1', 'off_color_upper_hst2', 'off_color_upper_hst3']].values, 'r', alpha=1, linestyle=':', linewidth=3)  # major upper off color\n","  plt.step(plot_df[['off_color_lower_hst1', 'off_color_lower_hst2', 'off_color_lower_hst3']].values, 'b', alpha=1, linestyle=':', linewidth=3)  # major lower off color\n","\n","\n","  # plt.step(np.arange(len(plot_df)), plot_short_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","  # plt.step(np.arange(len(plot_df)),plot_long_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","\n","  plt.step(np.arange(len(plot_df)), plot_upper_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","  plt.step(np.arange(len(plot_df)), plot_lower_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","\n","  plt.step(plot_df[['major_upper_middle']].values, 'g', linestyle='--', alpha=1, linewidth=3)  # major_middle \n","  plt.step(plot_df[['major_lower_middle']].values, 'g', linestyle='--', alpha=1, linewidth=3)  # major_middle \n","  \n","\n","  # plt.step(np.arange(len(plot_df)), plot_short_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","  # plt.step(np.arange(len(plot_df)), plot_long_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","\n","\n","\n","  # ---------------------- on price indicator part ---------------------- #\n","\n","  # ---------------------- sma ---------------------- #\n","  # alpha = 1\n","  # for sm_i, sma in enumerate(ma_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[sma].values, alpha=alpha, color='black', linewidth=lw)\n","  #   alpha -= 0.2\n","  \n","  #               sar               #\n","  alpha = 1\n","  markersize = 5\n","  for sar in sar_list:\n","    plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","    markersize += 1\n","    alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  alpha = 0.7\n","  for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","                      where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","                      where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","    alpha -= 0.05\n","  \n","  # ------------------------------------------------------------- #\n","\n","\n","  #       ep & tp     #\n","  # if i != initial_i:\n","  # if len(ep_idx_list_) > 1:\n","  \n","  # ------------- initial order ------------- #\n","  plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  for ep_i in range(len(ep_idx_list_)):\n","    plt.axvline(prev_plotsize + (ep_idx_list_[ep_i] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","\n","  # plt.axvline(prev_plotsize, alpha=0.5, linestyle='--')\n","  plt.axhline(ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='lime')  # ep line axhline\n","\n","  for sub_i in range(len(ep_tp_list[t_i][1])):\n","    plt.axhline(ep_tp_list[t_i][1][sub_i], linestyle='-', xmin=0.75 + 0.05 * (sub_i + 1) , xmax=1, linewidth=3, color='lime')  # tp line axhline\n","    # plt.axhline(ep_tp_list[t_i][1], linestyle='-', xmin=0.9, xmax=1, linewidth=3)  # tp line axhline  \n","    plt.axvline(prev_plotsize + (tp_idx_list_[sub_i] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","\n","\n","  #         hedge ep & tp         #\n","  h_i = h_trade_list[t_i][1]\n","  if h_i is not None:\n","    plt.axvline(prev_plotsize + (h_i - ep_idx_list_[0]), linestyle='--')\n","    plt.axhline(h_ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='magenta')  # ep line axhline\n","    plt.axhline(h_ep_tp_list[t_i][1], linestyle='-', xmin=0.85, xmax=1, linewidth=3, color='magenta')  # tp line axhline\n","\n","  \n","  #         check pr        #\n","  if not static_lvrg:\n","    plt.title(\"%s ~ %s -> %.5f\\n %s\\n h_pr : %.5f\\nlvrg : %s\\ntp_ratio : %.2f\" % (ep_idx_list_[0], tp_idx_list_[-1], plot_pr_list[t_i], tp_state_list[t_i], h_plot_pr_list[t_i], lvrg_list[t_i], tp_ratio_list[t_i]))\n","  else:\n","    plt.title(\"%s ~ %s -> %.5f\\n %s\\n h_pr : %.5f\\ntp_ratio : %.2f\" % (ep_idx_list_[0], tp_idx_list_[-1], plot_pr_list[t_i], tp_state_list[t_i], h_plot_pr_list[t_i], tp_ratio_list[t_i]))\n","\n","  print(\"short real pr :\", (ep_tp_list[t_i][0] / ep_tp_list[t_i][1][sub_i] - fee - 1) * lvrg + 1)\n","  print(\"long real pr :\", (ep_tp_list[t_i][1][sub_i] / ep_tp_list[t_i][0] - fee - 1) * lvrg + 1)\n","\n","  #           y lim         #\n","  plt.ylim(y_min, y_max)\n","\n","\n","  # ---------------------- outer price indi. ---------------------- #\n","  #           macd          #\n","  # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","    \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for stoch in stoch_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[stoch].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(stoch_upper, linestyle='--')\n","  # plt.axhline(stoch_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- cctbbo ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for cctbbo in cctbbo_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cctbbo].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(cctbbo_upper, linestyle='--')\n","  # plt.axhline(cctbbo_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- ema_roc ---------- #  \n","  plt.subplot(gs[1])\n","  alpha = 1\n","  for emaroc in emaroc_list:\n","    plt.step(np.arange(len(plot_df)), plot_df[emaroc].values, 'g', alpha=alpha)\n","    # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","    alpha -= 0.2\n","  plt.axvline(prev_plotsize, linestyle='--')\n","  plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","  plt.axhline(0, linestyle='--')\n","\n","\n","\n","\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  if not save_plot:\n","    plt.show()\n","  \n","  else:\n","    # ---------- save mode ---------- #\n","    fig_name = plot_check_dir +  \"/%s.png\" % t_i\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","\n","  \n","  plt.close()\n","  print()\n","\n","  # break\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KGuJu2j4Aby9"},"outputs":[],"source":["# print()\n","for item in os.listdir(current_path + \"plot_check/\"):\n","  if item.endswith('png'):\n","    os.remove(current_path + \"plot_check/\" + item)\n","    print(current_path + \"plot_check/\" + item, \"removed !\")"]},{"cell_type":"markdown","metadata":{"id":"cj9X6S1jJjER"},"source":["### plot nontp case"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Gb1jGrS4Jl8A"},"outputs":[],"source":["prev_plotsize = 50\n","\n","# inversion = True\n","inversion = False\n","\n","# hedge = True\n","# hedge = False\n","\n","short_ver = False\n","\n","\n","if inversion:  \n","\n","    plot_pr_list = rev_np_pr\n","    h_plot_pr_list = h_rev_np_pr  # hedge\n","\n","else:\n","\n","    plot_pr_list = np_pr\n","    h_plot_pr_list = h_np_pr\n","\n","\n","\n","#         select plot columns       #\n","# basic_cols = [0, 1, 2, 3, 5, 6, 8, 9, 11, 12, 14] # you don't need to touch\n","\n","# sar_cols = [15, 18] # 15 ~ 19\n","# ichimoku_cols = [20, 21]  # 20 ~ 29\n","# # ichimoku_cols = [22, 23]  # 20 ~ 29\n","# ichimoku_cols2 = [22, 23]  # 20 ~ 29\n","# macd_cols = [30]  # 30 ~ 34\n","\n","# print(res_df.columns[basic_cols])\n","# break\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower']\n","# senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","# senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","\n","#     -------------- under price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher']\n","cctbbo_list = ['cctbbo']\n","\n","\n","#       \n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols + ichimoku_cols2\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + trix_list\n","input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + stoch_list + fisher_list + cctbbo_list\n","price_colname = basic_list + senkoua_list + senkoub_list + sar_list \n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols\n","\n","\n","if short_ver:\n","  nontp_indexs = nontp_short_indexs\n","  nontp_liqd_list = nontp_short_liqd_list\n","  nontp_pr_list = nontp_short_pr_list\n","  nontp_ep = nontp_short_ep_list\n","else:\n","  nontp_indexs = nontp_long_indexs\n","  nontp_liqd_list = nontp_long_liqd_list\n","  nontp_pr_list = nontp_long_pr_list\n","  nontp_ep = nontp_long_ep_list\n","\n","\n","for t_i, i in enumerate(nontp_indexs):\n","\n","  j = len(res_df) - 1\n","\n","  # print(i, j)\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","\n","  # if i <= 4860:\n","  # if i == 1536:\n","  # # if 1800 < i < 1860:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  # if tp_state_list[t_i] != 'd-open':\n","  #   continue\n","\n","  # if (entry[i] == -1) and res_df['close'].iloc[i - 1] > upper_ep.iloc[i]:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  # if plot_pr_list[t_i] > 0.5:\n","  # if plot_pr_list[t_i] > 1.0:\n","  # # if plot_pr_list[t_i] < 1.0:\n","  #   continue\n","\n","  # plot_df = res_df.iloc[i - prev_plotsize:j + 1, input_cols]\n","  plot_df = res_df.iloc[i - prev_plotsize:j + 1][input_colname]\n","\n","\n","  #       keep off-color st with another variable         #\n","  st_trend_plot_df = res_df.iloc[i - prev_plotsize:j + 1, [7, 10, 13]]\n","\n","  # y_max = np.max(plot_df.iloc[:, [4, 6, 8]])\n","  # y_min = np.min(plot_df.iloc[:, [5, 7, 9]])\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  \n","  # y_max = max(np.max(plot_df.iloc[:, [4, 6, 8]]))\n","  # y_min = min(np.min(plot_df.iloc[:, [5, 7, 9]]))\n","  \n","  y_max = max(np.max(plot_df[price_colname]))\n","  y_min = min(np.min(plot_df[price_colname]))\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","\n","  plot_df[\"off_color_upper_st1\"] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, plot_df.iloc[:, [4]], np.nan)\n","  plot_df[\"off_color_upper_st2\"] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, plot_df.iloc[:, [6]], np.nan)\n","  plot_df[\"off_color_upper_st3\"] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, plot_df.iloc[:, [8]], np.nan)\n","  plot_df[\"off_color_lower_st1\"] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, plot_df.iloc[:, [5]], np.nan)\n","  plot_df[\"off_color_lower_st2\"] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, plot_df.iloc[:, [7]], np.nan)\n","  plot_df[\"off_color_lower_st3\"] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, plot_df.iloc[:, [9]], np.nan)\n","\n","\n","  #       replace st values with np.nan, using st trend     #\n","  plot_df.iloc[:, [4]] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, np.nan, plot_df.iloc[:, [4]])\n","  plot_df.iloc[:, [6]] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, np.nan, plot_df.iloc[:, [6]])\n","  plot_df.iloc[:, [8]] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, np.nan, plot_df.iloc[:, [8]])\n","  plot_df.iloc[:, [5]] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, np.nan, plot_df.iloc[:, [5]])\n","  plot_df.iloc[:, [7]] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, np.nan, plot_df.iloc[:, [7]])\n","  plot_df.iloc[:, [9]] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, np.nan, plot_df.iloc[:, [9]])\n","\n","\n","  plot_upper_ep = upper_ep.iloc[i - prev_plotsize:j + 1]\n","  plot_lower_ep = lower_ep.iloc[i - prev_plotsize:j + 1]\n","\n","  plot_upper_middle = (plot_df['middle_line'] + plot_df['min_upper']) / 2\n","  plot_lower_middle = (plot_df['middle_line'] + plot_df['max_lower']) / 2\n","\n","  plot_short_tp = short_tp.iloc[i - prev_plotsize:j + 1]\n","  plot_long_tp = long_tp.iloc[i - prev_plotsize:j + 1]  \n","\n","\n","\n","  # fig = plt.figure(figsize=(12, 16))\n","  fig = plt.figure(figsize=(12, 16))\n","  \n","  gs = gridspec.GridSpec(nrows=3, # row Î™á Í∞ú \n","                       ncols=1, # col Î™á Í∞ú \n","                       height_ratios=[3, 1, 1]\n","                      )\n","  \n","  # fig = plt.figure(figsize=(8, 12))\n","  # ax = fig.add_subplot(111)\n","  # ax = fig.add_subplot(311)\n","  ax = fig.add_subplot(gs[0])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='r', colordown='b')\n","\n","  # print(plot_df.values[:, 4:])\n","  plt.step(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper on color\n","  # plt.plot(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper on color\n","  plt.step(plot_df.values[:, [5, 7, 9]], 'b', alpha=1)  # lower on color\n","  plt.step(plot_df.values[:, [10]], 'fuchsia', alpha=1)  # middle\n","  \n","  plt.step(plot_df.values[:, -6:-3], 'r', alpha=1, linestyle=':')  # upper off color\n","  plt.step(plot_df.values[:, -3:], 'b', alpha=1, linestyle=':')  # lower off color\n","\n","\n","\n","  # plt.step(np.arange(len(plot_df)), plot_upper_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","  # plt.step(np.arange(len(plot_df)),plot_lower_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","\n","  plt.step(np.arange(len(plot_df)), plot_upper_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","  plt.step(np.arange(len(plot_df)), plot_lower_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","\n","  # plt.step(np.arange(len(plot_df)), plot_short_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","  # plt.step(np.arange(len(plot_df)), plot_long_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","\n","\n","\n","  # ---------------------- indicator part ---------------------- #\n","  \n","  #               sar               #\n","  alpha = 1\n","  markersize = 5\n","  for sar in sar_list:\n","    plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","    markersize += 1\n","    alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  alpha = 0.7\n","  for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","                      where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","                      where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","    alpha -= 0.05\n","  \n","  # ------------------------------------------------------------- #\n","\n","\n","  #       ep & tp     #\n","  if i != initial_i:\n","    plt.axvline(prev_plotsize - (i - initial_i), alpha=0.5, linestyle='--')\n","  plt.axvline(prev_plotsize, alpha=0.5, linestyle='--')\n","  plt.axhline(nontp_ep[t_i], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='lime')  # ep line axhline\n","\n","  # for sub_i in range(len(ep_tp_list[t_i][1])):\n","  #   plt.axhline(ep_tp_list[t_i][1][sub_i], linestyle='-', xmin=0.75 + 0.05 * (sub_i + 1) , xmax=1, linewidth=3, color='lime')  # tp line axhline\n","    # plt.axhline(ep_tp_list[t_i][1], linestyle='-', xmin=0.9, xmax=1, linewidth=3)  # tp line axhline    \n","\n","  #         hedge ep & tp         #\n","  # h_i = h_trade_list[t_i][1]\n","  # if h_i is not None:\n","  #   plt.axvline(prev_plotsize + (h_i - i), linestyle='--')\n","  #   plt.axhline(h_ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='magenta')  # ep line axhline\n","  #   plt.axhline(h_ep_tp_list[t_i][1], linestyle='-', xmin=0.85, xmax=1, linewidth=3, color='magenta')  # tp line axhline\n","\n","  \n","  #         check pr        #\n","  plt.title(\"%s ~ %s -> liqd : %.2f\\npr : %.2f\" % (i, j, nontp_liqd_list[t_i], nontp_pr_list[t_i]))\n","\n","  #           y lim         #\n","  plt.ylim(y_min, y_max)\n","\n","\n","  # #           macd          #\n","  # # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # plt.subplot(313)\n","  plt.subplot(gs[1])\n","  alpha = 1\n","  for stoch in stoch_list:\n","    plt.step(np.arange(len(plot_df)), plot_df[stoch].values, 'g', alpha=alpha)\n","    # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","    alpha -= 0.2\n","  plt.axvline(prev_plotsize, linestyle='--')\n","  plt.axhline(50, linestyle='--')\n","  plt.axhline(stoch_upper, linestyle='--')\n","  plt.axhline(stoch_lower, linestyle='--')\n","\n","\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  plt.show()\n","  # plt.draw()\n","  plt.close()\n","  print()\n","\n","  # break\n"]},{"cell_type":"markdown","metadata":{"id":"-g7YY5BvMcLS"},"source":["### show detail values"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":255,"status":"ok","timestamp":1625228960601,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"5TxQ3rDnKMa7","outputId":"422ac214-8c88-4f39-ec3a-7c823574f6da"},"outputs":[{"name":"stdout","output_type":"stream","text":["upper_ep.iloc[i] : 2348.266954813089\n","short_tp.iloc[j] : 2205.609333246829\n"]}],"source":["i, j = 27267, 27268\n","print(\"upper_ep.iloc[i] :\", upper_ep.iloc[i])\n","print(\"short_tp.iloc[j] :\", short_tp.iloc[j])"]},{"cell_type":"markdown","metadata":{"id":"7AIl6EBuZNOL"},"source":["## none plot off-color st"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yaVxrNGzZgrF"},"outputs":[],"source":["prev_plotsize = 50\n","\n","for t_i, (i, j) in enumerate(trade_list):\n","  # print(i, j)\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","\n","  # if pr_list[t_i] >= 1:\n","  #   continue\n","\n","  plot_df = res_df.iloc[i - prev_plotsize:j + 1, [0, 1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 16]]\n","\n","  #       replace st values with np.nan, using st trend     #\n","  st_trend_plot_df = res_df.iloc[i - prev_plotsize:j + 1, [7, 10, 13]]\n","  plot_df.iloc[:, [4]] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, np.nan, plot_df.iloc[:, [4]])\n","  plot_df.iloc[:, [6]] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, np.nan, plot_df.iloc[:, [6]])\n","  plot_df.iloc[:, [8]] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, np.nan, plot_df.iloc[:, [8]])\n","  plot_df.iloc[:, [5]] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, np.nan, plot_df.iloc[:, [5]])\n","  plot_df.iloc[:, [7]] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, np.nan, plot_df.iloc[:, [7]])\n","  plot_df.iloc[:, [9]] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, np.nan, plot_df.iloc[:, [9]])\n","\n","\n","  plot_upper_ep = upper_ep.iloc[i - prev_plotsize:j + 1]\n","  plot_lower_ep = lower_ep.iloc[i - prev_plotsize:j + 1]\n","\n","  fig = plt.figure(figsize=(8, 6))\n","  ax = fig.add_subplot(111)\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='r', colordown='b')\n","\n","  # print(plot_df.values[:, 4:])\n","  plt.plot(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper\n","  plt.plot(plot_df.values[:, [5, 7, 9]], 'b', alpha=1)  # lower\n","  plt.plot(plot_df.values[:, [10]], 'g', alpha=1)  # middle\n","\n","  plt.plot(plot_df.values[:, [11]], 'c*', alpha=1, markersize=5)  # sar mic\n","  plt.plot(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  plt.plot(plot_upper_ep.values, alpha=1, linestyle='--')  # ep\n","  plt.plot(plot_lower_ep.values, alpha=1, linestyle='--')  # ep\n","\n","  plt.axvline(prev_plotsize, linestyle='--')\n","\n","  plt.title(\"%s ~ %s -> %.5f\" % (i, j, pr_list[t_i]))\n","  plt.show()\n","  # plt.draw()\n","  plt.close()"]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":["M8-EChy0VsDr","Iy76iO7gztne","Ic1mfmwWCIBu","Ci_jUnNTZbm9","AUSBU7T8Suzi","VdukVo5-Suzj","Bw5JibDKSuzj","Pe0QpnORSuzk","t1E_eAyPSuzm","dzla8i9_ysmP","vOVr2jLczFQJ","v2Gjv019AEz8","FxJ1y8v2fkCR","VBwVaUkvfnOd"],"name":"AT_single_v7_3_backi2(1229_limit_v5_2point_stratswitch).ipynb","toc_visible":true,"provenance":[],"authorship_tag":"ABX9TyPlTA45/wzGHlJdXbIIeJPp"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}