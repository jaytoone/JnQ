{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"AT_v2_backi2(1123_limit_opt).ipynb","provenance":[{"file_id":"1z4z_KLPzc6RWsxo3X_dHbpByxUAgjoMJ","timestamp":1583754134002}],"collapsed_sections":["Iy76iO7gztne","Ic1mfmwWCIBu","Ci_jUnNTZbm9","u6HJnX16i36D","aAzRBq67tBno","yBMOMttNKQmU","NYqoJuPowqHq","9Lbr-ZsJjzIT","XHtKmKvEj2TU","ShvMpmWtC_Uv","yvrNFdxrnVjt","JcKfLZ7QnYcK","o-XjNS1L31YB","FxJ1y8v2fkCR","VBwVaUkvfnOd","tApzvz_gK9lR","5la6usMOFzkX","OJqkmkpsLCYC","59nW2aKYzkN8","cj9X6S1jJjER","-g7YY5BvMcLS","7AIl6EBuZNOL"],"toc_visible":true,"machine_shape":"hm"},"kernelspec":{"display_name":"Python [conda env:tensorflow2_p36]","language":"python","name":"conda-env-tensorflow2_p36-py"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.5"},"widgets":{"application/vnd.jupyter.widget-state+json":{"be2b848dbcb14a079a2b7bd605af6435":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_2c7696db44fa402eafb2540c7a72d68c","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_502ec9042bab443e9407803d9ada1031","IPY_MODEL_75511cdf82714fb7be5b8688e396f69b","IPY_MODEL_b54d2eb7584d43e2916f69174d6e391d"]}},"2c7696db44fa402eafb2540c7a72d68c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"502ec9042bab443e9407803d9ada1031":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_view_name":"HTMLView","style":"IPY_MODEL_7abd42b3c95c48ac910b581b74ba9b57","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 88%","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_a742f61210f24d949aeb1b9f5cd1f6a5"}},"75511cdf82714fb7be5b8688e396f69b":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_view_name":"ProgressView","style":"IPY_MODEL_2ff55a21df7742519b138ca795ec3f6d","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"","max":156,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":137,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_9e7f44d996a341a19bf22f806da4756d"}},"b54d2eb7584d43e2916f69174d6e391d":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_view_name":"HTMLView","style":"IPY_MODEL_5552df18053d4d1294ea6a4185afee6e","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 137/156 [00:30&lt;00:05,  3.67it/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_196b72f68ba948ef96093981fbcd195f"}},"7abd42b3c95c48ac910b581b74ba9b57":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"a742f61210f24d949aeb1b9f5cd1f6a5":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"2ff55a21df7742519b138ca795ec3f6d":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"9e7f44d996a341a19bf22f806da4756d":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"5552df18053d4d1294ea6a4185afee6e":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"196b72f68ba948ef96093981fbcd195f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"4b9fd28b1ae746ce9ca1f8036d4a1b21":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_c4e566ca55694d5f8d4bc2d5d36db779","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_430c63e35e084967b02132c770e6f992","IPY_MODEL_d66fb6f54fbd4b35925c8158eaa9cd56","IPY_MODEL_38c2994d13cf497eb819621ee975b1a3"]}},"c4e566ca55694d5f8d4bc2d5d36db779":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"430c63e35e084967b02132c770e6f992":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_view_name":"HTMLView","style":"IPY_MODEL_0803835fd2b74e7ab47f3377a070e54c","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":"100%","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_16eb81859ced4750bdd70c42bb110b35"}},"d66fb6f54fbd4b35925c8158eaa9cd56":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_view_name":"ProgressView","style":"IPY_MODEL_2a7d21d5873a427a856d5c9333f7f2e7","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"success","max":175,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":175,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_456aa8c516c54b55850057c62a69664f"}},"38c2994d13cf497eb819621ee975b1a3":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_view_name":"HTMLView","style":"IPY_MODEL_1b1522effd6c4ff68a3f3eb465b3a292","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 175/175 [00:29&lt;00:00,  3.24it/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_4c873b8879684e4b93d0d4a878a7ba93"}},"0803835fd2b74e7ab47f3377a070e54c":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"16eb81859ced4750bdd70c42bb110b35":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"2a7d21d5873a427a856d5c9333f7f2e7":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"456aa8c516c54b55850057c62a69664f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"1b1522effd6c4ff68a3f3eb465b3a292":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"4c873b8879684e4b93d0d4a878a7ba93":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"7a7fb78777a940a48e2a2cdcb53bde0a":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_0ce1d2e75f734ae38fe940263261c784","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_ed2fb510d37440e7987b6e26fa662668","IPY_MODEL_00401d2e083e47c29d30208f5b5c9713","IPY_MODEL_8302017eb2794813942b10972320d68d"]}},"0ce1d2e75f734ae38fe940263261c784":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"ed2fb510d37440e7987b6e26fa662668":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_view_name":"HTMLView","style":"IPY_MODEL_0d6bdd0c1a904d51ae6a09aa64a4ec34","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":"100%","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_0472384556f44312ab880f5ef884739b"}},"00401d2e083e47c29d30208f5b5c9713":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_view_name":"ProgressView","style":"IPY_MODEL_faf1a4be84c643b1b7924834bda9eec7","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"success","max":91,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":91,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_51e6704cb6754a2593f98f92eb895e21"}},"8302017eb2794813942b10972320d68d":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_view_name":"HTMLView","style":"IPY_MODEL_8684cb508a9c415e9cab429f848dfdb0","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 91/91 [1:30:59&lt;00:00, 109.19s/it]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_075a5ac7292c4151a6e0ed5a4191f857"}},"0d6bdd0c1a904d51ae6a09aa64a4ec34":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"0472384556f44312ab880f5ef884739b":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"faf1a4be84c643b1b7924834bda9eec7":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"51e6704cb6754a2593f98f92eb895e21":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"8684cb508a9c415e9cab429f848dfdb0":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"075a5ac7292c4151a6e0ed5a4191f857":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}}}}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AK9FjWwLOyay","executionInfo":{"status":"ok","timestamp":1638101371332,"user_tz":-540,"elapsed":16069,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"5c2cdd92-71b4-4ec0-9b78-bbee8fd04a7d"},"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","import os, sys\n","\n","current_path = '/content/drive/My Drive/Colab Notebooks/JnQ/'\n","\n","os.chdir(current_path)"],"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"markdown","metadata":{"id":"8uqYv5StTazo"},"source":["# requirements"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9qGt60DKTZmf","executionInfo":{"status":"ok","timestamp":1638101395333,"user_tz":-540,"elapsed":19961,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"4ca6042d-0d0d-472e-d278-3b2c03cac5fa"},"source":["!pip install mpl_finance\n","# !pip install findiff\n","\n","import matplotlib.pyplot as plt\n","from matplotlib import gridspec\n","from tqdm.notebook import tqdm\n","from funcs_indicator import *\n","from funcs_for_trade import *\n","\n","import mpl_finance as mf\n","import os\n","import datetime\n","\n","import IPython\n","import IPython.display\n","import matplotlib as mpl\n","\n","import numpy as np\n","# import jax.numpy as np\n","import pandas as pd\n","import seaborn as sns\n","# import tensorflow as tf\n","\n","import pickle\n","import shutil\n","# import json\n","from easydict import EasyDict\n","\n","# from trendln import trendln\n","\n","from datetime import datetime\n","import random\n","import time\n","\n","# mpl.rcParams['figure.figsize'] = (8, 6)\n","# mpl.rcParams['axes.grid'] = False\n","\n","pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)"],"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting mpl_finance\n","  Downloading mpl_finance-0.10.1-py3-none-any.whl (8.4 kB)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.7/dist-packages (from mpl_finance) (3.2.2)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->mpl_finance) (1.3.2)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib->mpl_finance) (0.11.0)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->mpl_finance) (3.0.6)\n","Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->mpl_finance) (2.8.2)\n","Requirement already satisfied: numpy>=1.11 in /usr/local/lib/python3.7/dist-packages (from matplotlib->mpl_finance) (1.19.5)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.1->matplotlib->mpl_finance) (1.15.0)\n","Installing collected packages: mpl-finance\n","Successfully installed mpl-finance-0.10.1\n"]}]},{"cell_type":"markdown","metadata":{"id":"Iy76iO7gztne"},"source":["## move legacy files"]},{"cell_type":"code","metadata":{"id":"hMRht32Czwry"},"source":["# print()\n","cur_dir_list = os.listdir('.')\n","for f in cur_dir_list:\n","  if 'legacy' in f :\n","    # print(f)\n","    if os.path.isdir(current_path + f,):\n","      continue\n","\n","    shutil.move(current_path + f, current_path + 'legacy/' + f)\n","    print(\"moved to\" + current_path + 'legacy/' +  f)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Ic1mfmwWCIBu"},"source":["# makeset"]},{"cell_type":"markdown","metadata":{"id":"Ci_jUnNTZbm9"},"source":["## load data"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_bXyS2yrZYC6","executionInfo":{"status":"ok","timestamp":1637830667160,"user_tz":-540,"elapsed":11585,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"0b4d358b-d651-48ff-d480-b1d304af3558"},"source":["interval = '1m'\n","date_path = './candlestick_concated/%s/quant_v2/' % interval\n","file_list = os.listdir(date_path)\n","print((file_list))\n","\n","interval2 = '3m'\n","date_path2 = './candlestick_concated/%s/quant_v2/' % interval2\n","file_list2 = os.listdir(date_path2)\n","print((file_list2))\n","\n","interval3 = '5m'\n","date_path3 = './candlestick_concated/%s/quant_v2/' % interval3\n","file_list3 = os.listdir(date_path3)\n","print((file_list3))\n","\n","interval4 = '15m'\n","date_path4 = './candlestick_concated/%s/quant_v2/' % interval4\n","file_list4 = os.listdir(date_path4)\n","print((file_list4))\n","\n","interval5 = '30m'\n","date_path5 = './candlestick_concated/%s/quant_v2/' % interval5\n","file_list5 = os.listdir(date_path5)\n","print((file_list5))\n","\n","interval6 = '1h'\n","date_path6 = './candlestick_concated/%s/quant_v2/' % interval6\n","file_list6 = os.listdir(date_path6)\n","print((file_list6))\n","\n","interval7 = '4h'\n","date_path7 = './candlestick_concated/%s/quant_v2/' % interval7\n","file_list7 = os.listdir(date_path7)\n","print((file_list7))\n","\n","interval8 = '1d'\n","date_path8 = './candlestick_concated/%s/quant_v2/' % interval8\n","file_list8 = os.listdir(date_path8)\n","print((file_list8))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr']\n","['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 LTCUSDT.ftr']\n","['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 ETHUSDT.ftr']\n","['2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr']\n","['2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-08-31 SUSHIUSDT.xlsx', '2021-08-31 CVCUSDT.xlsx', '2021-08-31 BTSUSDT.xlsx', '2021-08-31 HOTUSDT.xlsx', '2021-08-31 ZRXUSDT.xlsx', '2021-08-31 QTUMUSDT.xlsx', '2021-08-31 IOTAUSDT.xlsx', '2021-08-31 BTCBUSD.xlsx', '2021-08-31 WAVESUSDT.xlsx', '2021-08-31 ADAUSDT.xlsx', '2021-08-31 LITUSDT.xlsx', '2021-08-31 XTZUSDT.xlsx', '2021-08-31 BNBUSDT.xlsx', '2021-08-31 AKROUSDT.xlsx', '2021-08-31 HNTUSDT.xlsx', '2021-08-31 ETCUSDT.xlsx', '2021-08-31 XMRUSDT.xlsx', '2021-08-31 YFIUSDT.xlsx', '2021-08-31 ETHUSDT.xlsx', '2021-08-31 ALICEUSDT.xlsx', '2021-08-31 ALPHAUSDT.xlsx', '2021-08-31 SFPUSDT.xlsx', '2021-08-31 REEFUSDT.xlsx', '2021-08-31 BATUSDT.xlsx', '2021-08-31 DOGEUSDT.xlsx', '2021-08-31 TRXUSDT.xlsx', '2021-08-31 RLCUSDT.xlsx', '2021-08-31 BTCSTUSDT.xlsx', '2021-08-31 STORJUSDT.xlsx', '2021-08-31 SNXUSDT.xlsx', '2021-08-31 XLMUSDT.xlsx', '2021-08-31 NEOUSDT.xlsx', '2021-08-31 UNFIUSDT.xlsx', '2021-08-31 SANDUSDT.xlsx', '2021-08-31 DASHUSDT.xlsx', '2021-08-31 KAVAUSDT.xlsx', '2021-08-31 RUNEUSDT.xlsx', '2021-08-31 CTKUSDT.xlsx', '2021-08-31 LINKUSDT.xlsx', '2021-08-31 CELRUSDT.xlsx', '2021-08-31 RSRUSDT.xlsx', '2021-08-31 DGBUSDT.xlsx', '2021-08-31 SKLUSDT.xlsx', '2021-08-31 RENUSDT.xlsx', '2021-08-31 TOMOUSDT.xlsx', '2021-08-31 MTLUSDT.xlsx', '2021-08-31 LTCUSDT.xlsx', '2021-08-31 DODOUSDT.xlsx', '2021-08-31 EGLDUSDT.xlsx', '2021-08-31 KSMUSDT.xlsx', '2021-08-31 ONTUSDT.xlsx', '2021-08-31 VETUSDT.xlsx', '2021-08-31 TRBUSDT.xlsx', '2021-08-31 MANAUSDT.xlsx', '2021-08-31 COTIUSDT.xlsx', '2021-08-31 CHRUSDT.xlsx', '2021-08-31 ETHUSDT_210924.xlsx', '2021-08-31 BAKEUSDT.xlsx', '2021-08-31 GRTUSDT.xlsx', '2021-08-31 FLMUSDT.xlsx', '2021-08-31 EOSUSDT.xlsx', '2021-08-31 OGNUSDT.xlsx', '2021-08-31 SCUSDT.xlsx', '2021-08-31 BALUSDT.xlsx', '2021-08-31 STMXUSDT.xlsx', '2021-08-31 BTTUSDT.xlsx', '2021-08-31 LUNAUSDT.xlsx', '2021-08-31 DENTUSDT.xlsx', '2021-08-31 KNCUSDT.xlsx', '2021-08-31 SRMUSDT.xlsx', '2021-08-31 ENJUSDT.xlsx', '2021-08-31 ZENUSDT.xlsx', '2021-08-31 ATOMUSDT.xlsx', '2021-08-31 NEARUSDT.xlsx', '2021-08-31 BCHUSDT.xlsx', '2021-08-31 IOSTUSDT.xlsx', '2021-08-31 HBARUSDT.xlsx', '2021-08-31 ZECUSDT.xlsx', '2021-08-31 1000SHIBUSDT.xlsx', '2021-08-31 TLMUSDT.xlsx', '2021-08-31 BZRXUSDT.xlsx', '2021-08-31 ETHBUSD.xlsx', '2021-08-31 AAVEUSDT.xlsx', '2021-08-31 GTCUSDT.xlsx', '2021-08-31 ALGOUSDT.xlsx', '2021-08-31 ICPUSDT.xlsx', '2021-08-31 BTCUSDT_210924.xlsx', '2021-08-31 LRCUSDT.xlsx', '2021-08-31 AVAXUSDT.xlsx', '2021-08-31 MATICUSDT.xlsx', '2021-08-31 1INCHUSDT.xlsx', '2021-08-31 MKRUSDT.xlsx', '2021-08-31 THETAUSDT.xlsx', '2021-08-31 UNIUSDT.xlsx', '2021-08-31 LINAUSDT.xlsx', '2021-08-31 RVNUSDT.xlsx', '2021-08-31 FILUSDT.xlsx', '2021-08-31 NKNUSDT.xlsx', '2021-08-31 DEFIUSDT.xlsx', '2021-08-31 COMPUSDT.xlsx', '2021-08-31 BTCDOMUSDT.xlsx', '2021-08-31 SOLUSDT.xlsx', '2021-08-31 BTCUSDT.xlsx', '2021-08-31 OMGUSDT.xlsx', '2021-08-31 ICXUSDT.xlsx', '2021-08-31 BLZUSDT.xlsx', '2021-08-31 FTMUSDT.xlsx', '2021-08-31 YFIIUSDT.xlsx', '2021-08-31 KEEPUSDT.xlsx', '2021-08-31 BANDUSDT.xlsx', '2021-08-31 XRPUSDT.xlsx', '2021-08-31 SXPUSDT.xlsx', '2021-08-31 CRVUSDT.xlsx', '2021-08-31 BELUSDT.xlsx', '2021-08-31 DOTUSDT.xlsx', '2021-08-31 XEMUSDT.xlsx', '2021-08-31 ONEUSDT.xlsx', '2021-08-31 ZILUSDT.xlsx', '2021-08-31 AXSUSDT.xlsx', '2021-08-31 OCEANUSDT.xlsx', '2021-08-31 CHZUSDT.xlsx', '2021-08-31 ANKRUSDT.xlsx', '2021-08-31 SUSHIUSDT_res_dfs.pkl', '2021-07-01 ADAUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr']\n","['2021-07-01 BTCUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr']\n","['2021-02-07 BTC.xlsx', '2021-02-07 ETH.xlsx', '2021-02-11 BCHUSDT.xlsx', '2021-02-11 XRPUSDT.xlsx', '2021-02-11 EOSUSDT.xlsx', '2021-02-11 LTCUSDT.xlsx', '2021-02-11 ETCUSDT.xlsx', '2021-02-11 LINKUSDT.xlsx', '2021-02-11 XLMUSDT.xlsx', '2021-02-11 ADAUSDT.xlsx', '2021-02-11 XMRUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr']\n","['2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx']\n"]}]},{"cell_type":"markdown","metadata":{"id":"EiXxraeZCj0c"},"source":["## basic_func"]},{"cell_type":"code","metadata":{"id":"mi8H188MCiaH","executionInfo":{"status":"ok","timestamp":1638101395334,"user_tz":-540,"elapsed":9,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"source":["def sync_check(df, second_df, third_df, fourth_df, fifth_df, sixth_df=None, seventh_df=None, eighth_df=None):\n","\n","    #           supertrend          #\n","    # df = st_price_line(df, second_df, '3m')\n","    # # print(df.head(100))\n","    # # return\n","\n","    # df = st_price_line(df, third_df, '5m')\n","    # df = st_price_line(df, fourth_df, '15m')\n","    # df = st_price_line(df, fifth_df, '30m')\n","    # df = st_price_line(df, sixth_df, '1h')\n","    # df = st_price_line(df, seventh_df, '4h')\n","\n","    # print(\"supertrend phase done\")\n","\n","    # --------------- dc --------------- #  \n","    df = dc_line(df, None, '1m', dc_period=20)\n","    df = dc_line(df, second_df, '3m', dc_period=20)\n","    df = dc_line(df, third_df, '5m', dc_period=20)\n","    df = dc_line(df, fourth_df, '15m', dc_period=20)\n","    df = dc_line(df, fifth_df, '30m', dc_period=20)\n","    df = dc_line(df, sixth_df, '1h', dc_period=20)\n","    df = dc_line(df, seventh_df, '4h', dc_period=20)\n","\n","    print(\"dc phase done\")\n","    \n","    # --------------- bband --------------- #  \n","    df = bb_line(df, None, '1m')\n","    df = bb_line(df, second_df, '3m')\n","    df = bb_line(df, third_df, '5m')\n","    df = bb_line(df, fourth_df, '15m')\n","    df = bb_line(df, fifth_df, '30m')\n","    df = bb_line(df, sixth_df, '1h')\n","    df = bb_line(df, seventh_df, '4h')\n","\n","    print(\"bband phase done\")\n","\n","    # --------------- cbline --------------- #    \n","    # second_df['cloud_bline_3m'] = cloud_bline(second_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, second_df, [-1]), columns=['cloud_bline_3m']))\n","    # third_df['cloud_bline_5m'] = cloud_bline(third_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-1]), columns=['cloud_bline_5m']))\n","    # fourth_df['cloud_bline_15m'] = cloud_bline(fourth_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, fourth_df, [-1]), columns=['cloud_bline_15m']))\n","    # fifth_df['cloud_bline_30m'] = cloud_bline(fifth_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, fifth_df, [-1]), columns=['cloud_bline_30m']))\n","    # sixth_df['cloud_bline_1h'] = cloud_bline(sixth_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, sixth_df, [-1]), columns=['cloud_bline_1h']))\n","    # seventh_df['cloud_bline_4h'] = cloud_bline(seventh_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, seventh_df, [-1]), columns=['cloud_bline_4h']))\n","\n","    # print(\"cbline phase done\")\n","    \n","\n","    #           lucid sar              #\n","    # df['sar_1m'], df['sar_uptrend_1m'] = lucid_sar(df, return_uptrend=True)\n","\n","    # third_df['sar_5m'], third_df['sar_uptrend_5m'] = lucid_sar(third_df, return_uptrend=True)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-2, -1], backing_i=-1), columns=['sar_5m', 'sar_uptrend_5m']))\n","\n","    # fourth_df['sar_15m'], fourth_df['sar_uptrend_15m'] = lucid_sar(fourth_df, return_uptrend=True)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, fourth_df, [-2, -1], backing_i=-1), columns=['sar_15m', 'sar_uptrend_15m']))\n","\n","    # seventh_df['sar_4h'], seventh_df['sar_uptrend_4h'] = lucid_sar(seventh_df, return_uptrend=True)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, seventh_df, [-2, -1], backing_i=-1), columns=['sar_4h', 'sar_uptrend_4h']))\n","    \n","    # print(\"sar phase done\")\n","\n","    \n","    #           stochastic              #\n","    # df['stoch_1m'] = stoch(df, 13, 3, 3)\n","\n","    # third_df['stoch'] = stoch(third_df, 13, 3, 3)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","    # print(\"stoch phase done\")\n","\n","\n","    return df\n"],"execution_count":5,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ZnrBE3etCpIA"},"source":["## make & save res_df (concat 생각하면, timeindex sync 맞춰야함)"]},{"cell_type":"markdown","metadata":{"id":"u6HJnX16i36D"},"source":["### old (xlsx)"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"X1g9vGP0UnTT","executionInfo":{"elapsed":11,"status":"error","timestamp":1636201718856,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"outputId":"02bf2c60-f298-4fe9-e6bb-78230ac1348c"},"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  if '2021-07-01'.upper() not in file_list[i]:\n","  # if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    excel_name = key.replace(\".xlsx\", \"_st1h_backi2.xlsx\")\n","    excel_path = save_path + excel_name\n","\n","    if excel_name in exist_list:\n","      print(excel_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m 마지막 timeindex 의 date 기준, 08:59:59.999000 를 last timestamp 로 설정\n","      #      2. 시작 timestamp 는 모든 tf 의 가장 최근 시작 index,\n","      #       a. 1m 의 시작 timeindex 는 최소, htf 의 시작 timeindex 보다 interval 만큼 앞서야함\n","      #         i. 따라서 1m open_index, latest_open_index + 1d 를 하면 댐\n","      #           1. timestamp 으로 변환후 1day 를 더하고 datetime 으로 변환\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","    latest_open_index = sorted(open_indexes)[-1]\n","    \n","    open_ts = datetime.timestamp(latest_open_index)\n","    latest_open_index_1m = datetime.fromtimestamp(open_ts + a_day)\n","\n","    #   str 로 만들어 접근하면 불가함  #\n","    end_index = pd.to_datetime(str(df.index[-1]).split(\" \")[0] + \" 08:59:59.999000\")\n","    # break\n","\n","    sliced_df = df.loc[latest_open_index_1m:end_index] # to_lower_tf 의 기준 ltf\n","    sliced_second_df = second_df.loc[latest_open_index:end_index]\n","    sliced_third_df = third_df.loc[latest_open_index:end_index]\n","    sliced_fourth_df = fourth_df.loc[latest_open_index:end_index]\n","    sliced_fifth_df = fifth_df.loc[latest_open_index:end_index]\n","\n","    print(\"sliced index\")\n","    print(sliced_df.index[[0, -1]])\n","    print(sliced_second_df.index[[0, -1]])\n","    print(sliced_third_df.index[[0, -1]])\n","    print(sliced_fourth_df.index[[0, -1]])\n","    print(sliced_fifth_df.index[[0, -1]])\n","\n","    try:\n","      sliced_sixth_df = sixth_df.loc[latest_open_index:end_index]\n","      sliced_seventh_df = seventh_df.loc[latest_open_index:end_index]\n","\n","      print(sliced_sixth_df.index[[0, -1]])\n","      print(sliced_seventh_df.index[[0, -1]])\n","\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df, sliced_sixth_df, sliced_seventh_df)\n","    \n","    except:\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df)\n","\n","\n","\n","    res_df.to_excel(excel_path)\n","    print(excel_name, \"saved succesfully !\")"],"execution_count":null,"outputs":[{"ename":"NameError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-5-ee034491b257>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0ma_day\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m3600\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m24\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtqdm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m   \u001b[0mkeys\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mfile_list\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'file_list' is not defined"]}]},{"cell_type":"markdown","metadata":{"id":"aAzRBq67tBno"},"source":["### xlsx to feather"]},{"cell_type":"code","metadata":{"id":"YJtFAah_tE0S","colab":{"base_uri":"https://localhost:8080/","height":355,"referenced_widgets":["be2b848dbcb14a079a2b7bd605af6435","2c7696db44fa402eafb2540c7a72d68c","502ec9042bab443e9407803d9ada1031","75511cdf82714fb7be5b8688e396f69b","b54d2eb7584d43e2916f69174d6e391d","7abd42b3c95c48ac910b581b74ba9b57","a742f61210f24d949aeb1b9f5cd1f6a5","2ff55a21df7742519b138ca795ec3f6d","9e7f44d996a341a19bf22f806da4756d","5552df18053d4d1294ea6a4185afee6e","196b72f68ba948ef96093981fbcd195f"]},"outputId":"f6f3b55d-ec2c-4b2c-d62e-3de7c0384dc4"},"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  # if '2021-07-01'.upper() not in file_list[i]:\n","  if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    feather_name = key.replace(\".xlsx\", \".ftr\")\n","    # feather_path = save_path + feather_name\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m 마지막 timeindex 의 date 기준, 08:59:59.999000 를 last timestamp 로 설정\n","      #      2. 시작 timestamp 는 모든 tf 의 가장 최근 시작 index,\n","      #       a. 1m 의 시작 timeindex 는 최소, htf 의 시작 timeindex 보다 interval 만큼 앞서야함\n","      #         i. 따라서 1m open_index, latest_open_index + 1d 를 하면 댐\n","      #           1. timestamp 으로 변환후 1day 를 더하고 datetime 으로 변환\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","\n","    df.reset_index().to_feather(date_path + feather_name, compression='lz4')\n","    second_df.reset_index().to_feather(date_path2 + feather_name, compression='lz4')\n","    third_df.reset_index().to_feather(date_path3 + feather_name, compression='lz4')\n","    fourth_df.reset_index().to_feather(date_path4 + feather_name, compression='lz4')\n","    fifth_df.reset_index().to_feather(date_path5 + feather_name, compression='lz4')\n","    sixth_df.reset_index().to_feather(date_path6 + feather_name, compression='lz4')\n","    seventh_df.reset_index().to_feather(date_path7 + feather_name, compression='lz4')\n","\n","    print(\"xlsx converted to feather !\")\n","    "],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"be2b848dbcb14a079a2b7bd605af6435","version_minor":0,"version_major":2},"text/plain":["  0%|          | 0/156 [00:00<?, ?it/s]"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["DatetimeIndex(['2021-06-28 00:00:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:02:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:04:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:14:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:29:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-09-14 03:59:59.999000', '2021-11-15 14:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-03-10 20:59:59.999000', '2021-11-15 16:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","\n","xlsx converted to feather !\n","DatetimeIndex(['2021-06-28 00:00:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:02:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:04:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:14:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:29:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-09-14 03:59:59.999000', '2021-11-15 14:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-03-10 20:59:59.999000', '2021-11-15 16:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","\n","xlsx converted to feather !\n"]}]},{"cell_type":"markdown","metadata":{"id":"yBMOMttNKQmU"},"source":["### add itv_name to ftr"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","referenced_widgets":["4b9fd28b1ae746ce9ca1f8036d4a1b21","c4e566ca55694d5f8d4bc2d5d36db779","430c63e35e084967b02132c770e6f992","d66fb6f54fbd4b35925c8158eaa9cd56","38c2994d13cf497eb819621ee975b1a3","0803835fd2b74e7ab47f3377a070e54c","16eb81859ced4750bdd70c42bb110b35","2a7d21d5873a427a856d5c9333f7f2e7","456aa8c516c54b55850057c62a69664f","1b1522effd6c4ff68a3f3eb465b3a292","4c873b8879684e4b93d0d4a878a7ba93"]},"id":"ihQzcsJkKd0K","executionInfo":{"status":"ok","timestamp":1637074788128,"user_tz":-540,"elapsed":29938,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"08e49ba1-0a82-44f5-8c73-4ea3c925d0a4"},"source":["save_path = './candlestick_concated/res_df/'\n","db_path = './candlestick_concated/database/'\n","\n","dir_path = \"bbdc3m_backi2\"\n","date = '2021-11-16'\n","os.makedirs(os.path.join(save_path, dir_path), exist_ok=True)\n","\n","exist_list = os.listdir(os.path.join(save_path, dir_path))\n","# break\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","        \n","    df = shutil.copy(date_path + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n","    second_df = shutil.copy(date_path2 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval2))\n","    third_df = shutil.copy(date_path3 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval3))\n","    fourth_df = shutil.copy(date_path4 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval4))\n","    fifth_df = shutil.copy(date_path5 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval5))\n","    sixth_df = shutil.copy(date_path6 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval6))\n","    seventh_df = shutil.copy(date_path7 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval7))\n","\n","    print(\"copied to\" + db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"4b9fd28b1ae746ce9ca1f8036d4a1b21","version_minor":0,"version_major":2},"text/plain":["  0%|          | 0/175 [00:00<?, ?it/s]"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["copied to./candlestick_concated/database/2021-11-16 ETCUSDT_1m.ftr\n","copied to./candlestick_concated/database/2021-11-16 BTCUSDT_1m.ftr\n","copied to./candlestick_concated/database/2021-11-16 ETHUSDT_1m.ftr\n","copied to./candlestick_concated/database/2021-11-16 ADAUSDT_1m.ftr\n","copied to./candlestick_concated/database/2021-11-16 XLMUSDT_1m.ftr\n","copied to./candlestick_concated/database/2021-11-16 LINKUSDT_1m.ftr\n","copied to./candlestick_concated/database/2021-11-16 LTCUSDT_1m.ftr\n","copied to./candlestick_concated/database/2021-11-16 EOSUSDT_1m.ftr\n","copied to./candlestick_concated/database/2021-11-16 XRPUSDT_1m.ftr\n","copied to./candlestick_concated/database/2021-11-16 BCHUSDT_1m.ftr\n"]}]},{"cell_type":"markdown","metadata":{"id":"QtiavGJOi8NV"},"source":["### feather ver."]},{"cell_type":"code","metadata":{"id":"LOS3BTNyVuQy"},"source":["np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), res_df.index)))\n","\n","print(np_idx_ts[:10])\n","for ts_i in range(len(np_idx_ts)):\n","  \n","  if ts_i != 0:\n","    ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","\n","    if ts_gap > 60:\n","    # if ts_gap < 60:\n","      print(res_df.index[ts_i - 1])\n","      print(res_df.index[ts_i])\n","      # print(ts_gap)\n","      print()\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1351,"referenced_widgets":["7a7fb78777a940a48e2a2cdcb53bde0a","0ce1d2e75f734ae38fe940263261c784","ed2fb510d37440e7987b6e26fa662668","00401d2e083e47c29d30208f5b5c9713","8302017eb2794813942b10972320d68d","0d6bdd0c1a904d51ae6a09aa64a4ec34","0472384556f44312ab880f5ef884739b","faf1a4be84c643b1b7924834bda9eec7","51e6704cb6754a2593f98f92eb895e21","8684cb508a9c415e9cab429f848dfdb0","075a5ac7292c4151a6e0ed5a4191f857"]},"id":"0g2fXaCmi9zN","executionInfo":{"status":"ok","timestamp":1637836127946,"user_tz":-540,"elapsed":5460799,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"00fa149c-aef4-47ae-da12-afc29680e941"},"source":["save_path = './candlestick_concated/res_df/'\n","\n","db_path = './candlestick_concated/database/'\n","\n","dir_path = \"bbdc3m_backi2\"\n","date = '2021-11-24'\n","os.makedirs(os.path.join(save_path, dir_path), exist_ok=True)\n","\n","file_list = os.listdir(db_path)\n","exist_list = os.listdir(os.path.join(save_path, dir_path))\n","# break\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","\n","    if \"_1m\" not in key:\n","      continue\n","\n","    # feather_name = key.replace(\".ftr\", \"_%.ftr\" % dir_path)\n","    feather_name = key.replace(\"_1m\", \"\")\n","    feather_path = os.path.join(save_path, dir_path, feather_name)\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_feather(db_path + key, columns=None, use_threads=True).set_index(\"index\")\n","    second_df = pd.read_feather(db_path + key.replace(interval, interval2), columns=None, use_threads=True).set_index(\"index\")\n","    third_df = pd.read_feather(db_path + key.replace(interval, interval3), columns=None, use_threads=True).set_index(\"index\")\n","    fourth_df = pd.read_feather(db_path + key.replace(interval, interval4), columns=None, use_threads=True).set_index(\"index\")\n","    fifth_df = pd.read_feather(db_path + key.replace(interval, interval5), columns=None, use_threads=True).set_index(\"index\")\n","        \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m 마지막 timeindex 의 date 기준, 08:59:59.999000 를 last timestamp 로 설정\n","      #      2. 시작 timestamp 는 모든 tf 의 가장 최근 시작 index,\n","      #       a. 1m 의 시작 timeindex 는 최소, htf 의 시작 timeindex 보다 interval 만큼 앞서야함\n","      #         i. 따라서 1m open_index, latest_open_index + 1d 를 하면 댐\n","      #           1. timestamp 으로 변환후 1day 를 더하고 datetime 으로 변환\n","      sixth_df = pd.read_feather(db_path + key.replace(interval, interval6), columns=None, use_threads=True).set_index(\"index\")\n","      seventh_df = pd.read_feather(db_path + key.replace(interval, interval7), columns=None, use_threads=True).set_index(\"index\")\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","    latest_open_index = sorted(open_indexes)[-1]\n","    \n","    open_ts = datetime.timestamp(latest_open_index)\n","    latest_open_index_1m = datetime.fromtimestamp(open_ts + a_day)\n","\n","    #   str 로 만들어 접근하면 불가함  #\n","    end_index = pd.to_datetime(str(df.index[-1]).split(\" \")[0] + \" 08:59:59.999000\")\n","    # break\n","\n","    sliced_df = df.loc[latest_open_index_1m:end_index] # to_lower_tf 의 기준 ltf\n","    sliced_second_df = second_df.loc[latest_open_index:end_index]\n","    sliced_third_df = third_df.loc[latest_open_index:end_index]\n","    sliced_fourth_df = fourth_df.loc[latest_open_index:end_index]\n","    sliced_fifth_df = fifth_df.loc[latest_open_index:end_index]\n","\n","    print(\"sliced index\")\n","    print(sliced_df.index[[0, -1]])\n","    print(sliced_second_df.index[[0, -1]])\n","    print(sliced_third_df.index[[0, -1]])\n","    print(sliced_fourth_df.index[[0, -1]])\n","    print(sliced_fifth_df.index[[0, -1]])\n","\n","    try:\n","      sliced_sixth_df = sixth_df.loc[latest_open_index:end_index]\n","      sliced_seventh_df = seventh_df.loc[latest_open_index:end_index]\n","\n","      print(sliced_sixth_df.index[[0, -1]])\n","      print(sliced_seventh_df.index[[0, -1]])\n","\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df, sliced_sixth_df, sliced_seventh_df)\n","    \n","    except:\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df)\n","\n","\n","\n","    # res_df.to_feather(feather_path)\n","    res_df.reset_index().to_feather(feather_path, compression='lz4')\n","    print(feather_name, \"saved succesfully !\")"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"7a7fb78777a940a48e2a2cdcb53bde0a","version_minor":0,"version_major":2},"text/plain":["  0%|          | 0/91 [00:00<?, ?it/s]"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["DatetimeIndex(['2021-01-29 00:00:59.999000', '2021-11-24 21:34:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-01-29 00:02:59.999000', '2021-11-24 21:44:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-01-29 00:04:59.999000', '2021-11-24 21:54:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-01-29 00:14:59.999000', '2021-11-24 21:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-01-29 00:29:59.999000', '2021-11-24 22:29:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-01-29 00:59:59.999000', '2021-11-24 22:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-01-29 04:59:59.999000', '2021-11-25 00:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","\n","sliced index\n","DatetimeIndex(['2021-01-30 04:59:59.999000', '2021-11-24 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-01-29 04:59:59.999000', '2021-11-24 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-01-29 04:59:59.999000', '2021-11-24 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-01-29 04:59:59.999000', '2021-11-24 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-01-29 04:59:59.999000', '2021-11-24 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-01-29 04:59:59.999000', '2021-11-24 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-01-29 04:59:59.999000', '2021-11-24 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n"]},{"output_type":"stream","name":"stderr","text":["/content/drive/My Drive/Colab Notebooks/JnQ/funcs_indicator.py:234: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  ltf_df[dc_upper], ltf_df[dc_lower], ltf_df[dc_base] = donchian_channel(ltf_df, dc_period)\n","/content/drive/My Drive/Colab Notebooks/JnQ/funcs_indicator.py:229: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  htf_df[dc_upper], htf_df[dc_lower], htf_df[dc_base] = donchian_channel(htf_df, dc_period)\n"]},{"output_type":"stream","name":"stdout","text":["dc phase done\n"]},{"output_type":"stream","name":"stderr","text":["/content/drive/My Drive/Colab Notebooks/JnQ/funcs_indicator.py:270: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  htf_df[bb_upper], htf_df[bb_lower], _ = bb_width(htf_df, 20, 1)\n"]},{"output_type":"stream","name":"stdout","text":["bband phase done\n","2021-11-24 ZECUSDT.ftr saved succesfully !\n","DatetimeIndex(['2021-01-29 00:00:59.999000', '2021-11-24 21:37:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-01-29 00:02:59.999000', '2021-11-24 21:47:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-01-29 00:04:59.999000', '2021-11-24 21:54:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-01-29 00:14:59.999000', '2021-11-24 21:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-01-29 00:29:59.999000', '2021-11-24 22:29:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-01-29 00:59:59.999000', '2021-11-24 22:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-01-29 04:59:59.999000', '2021-11-25 00:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","\n","sliced index\n","DatetimeIndex(['2021-01-30 04:59:59.999000', '2021-11-24 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-01-29 04:59:59.999000', '2021-11-24 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-01-29 04:59:59.999000', '2021-11-24 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-01-29 04:59:59.999000', '2021-11-24 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-01-29 04:59:59.999000', '2021-11-24 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-01-29 04:59:59.999000', '2021-11-24 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-01-29 04:59:59.999000', '2021-11-24 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","dc phase done\n","bband phase done\n","2021-11-24 BNBUSDT.ftr saved succesfully !\n","DatetimeIndex(['2021-01-29 00:00:59.999000', '2021-11-24 21:40:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-01-29 00:02:59.999000', '2021-11-24 21:47:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-01-29 00:04:59.999000', '2021-11-24 21:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-01-29 00:14:59.999000', '2021-11-24 22:14:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-01-29 00:29:59.999000', '2021-11-24 22:29:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-01-29 00:59:59.999000', '2021-11-24 22:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-01-29 04:59:59.999000', '2021-11-25 00:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","\n","sliced index\n","DatetimeIndex(['2021-01-30 04:59:59.999000', '2021-11-24 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-01-29 04:59:59.999000', '2021-11-24 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-01-29 04:59:59.999000', '2021-11-24 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-01-29 04:59:59.999000', '2021-11-24 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-01-29 04:59:59.999000', '2021-11-24 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-01-29 04:59:59.999000', '2021-11-24 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2021-01-29 04:59:59.999000', '2021-11-24 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","dc phase done\n","bband phase done\n","2021-11-24 RUNEUSDT.ftr saved succesfully !\n"]}]},{"cell_type":"markdown","metadata":{"id":"NYqoJuPowqHq"},"source":["## concat & save new res_df"]},{"cell_type":"markdown","metadata":{"id":"9Lbr-ZsJjzIT"},"source":["### old (xlsx)"]},{"cell_type":"code","metadata":{"id":"TRXKKMr0wwKF"},"source":["save_path = './candlestick_concated/res_df/'\n","\n","dict_name = \"2021-07-01 ETHUSDT_bb15m_backi2_res_dfs.pkl\"\n","\n","#     load with pickle    #\n","with open(save_path + dict_name, 'rb') as f:\n","  saved_res_df_dict = pickle.load(f)\n","\n","print(dict_name, \"loaded !\")\n","res_df_files = os.listdir(save_path)\n","res_df_files.reverse()\n","\n","print(res_df_files)\n","\n","res_df_dict = {}\n","\n","base_postfix = '_bb15m_backi2.xlsx'\n","new_postfix = '_st1h_backi2.xlsx'\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for k_i, key in enumerate(res_df_files):\n","\n","  if '2021-07-01'.upper() not in key:\n","  # if '2021-10-10'.upper() not in key:\n","    continue\n","\n","  # if \"link\".upper() not in key:\n","  # if \"btc\".upper() not in key:\n","  #   continue\n","\n","  if new_postfix not in key:\n","    continue\n","\n","  # if key in \n","\n","  if sample_cnt == max_cnt:\n","    dict_name = \"%s_res_dfs.pkl\" % key.split(\".\")[0]\n","    print(\"dict_name :\", dict_name)\n","\n","  base_df = saved_res_df_dict[key.replace(new_postfix, base_postfix)]\n","  # base_df = pd.read_excel(save_path + key.replace(new_postfix, base_postfix), index_col=0)  \n","  res_df = pd.read_excel(save_path + key, index_col=0)  \n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  droped_new_res_df.head()\n","  # break\n","\n","  # res_df_dict[key] = res_df\n","  res_df_dict[key] = droped_new_res_df\n","  print(key, \"saved to dict !\")\n","\n","  #     save with pickle    #\n","  with open(save_path + dict_name, 'wb') as f:\n","    pickle.dump(res_df_dict, f)\n","\n","  sample_cnt -= 1\n","\n","  if sample_cnt <= 0:\n","    break\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"XHtKmKvEj2TU"},"source":["### feather ver. (col concat)"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TswTadFXj35X","executionInfo":{"elapsed":48426,"status":"ok","timestamp":1636609438589,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"outputId":"4d48788f-2dbd-401a-c50e-cbf8e0d407e1"},"source":["save_path = './candlestick_concated/res_df/'\n","\n","concat_dir = \"concat\"\n","\n","dir_path = \"bbdc3m_backi2\"\n","base_dir_path = \"sar15m4h_backi2\"\n","\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","os.makedirs(os.path.join(save_path, dir_path, concat_dir), exist_ok=True)\n","\n","\n","#     load ftr list    #\n","ftr_list = [s for s in os.listdir(os.path.join(save_path, dir_path)) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","# dict_name = \"2021-07-01 ETHUSDT_bb15m_backi2_res_dfs.pkl\"\n","\n","# #     load with pickle    #\n","# with open(save_path + dict_name, 'rb') as f:\n","#   saved_res_df_dict = pickle.load(f)\n","\n","# print(dict_name, \"loaded !\")\n","# res_df_files = os.listdir(save_path)\n","# res_df_files.reverse()\n","\n","# print(res_df_files)\n","\n","# res_df_dict = {}\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for key in ftr_list:\n","\n","  if '2021-07-01'.upper() not in key:\n","  # if '2021-10-10'.upper() not in key:\n","    continue\n","\n","\n","  # if sample_cnt == max_cnt:\n","  #   dict_name = \"%s_res_dfs.pkl\" % key.split(\".\")[0]\n","  #   print(\"dict_name :\", dict_name)\n","\n","  # base_df = saved_res_df_dict[key.replace(new_postfix, base_postfix)]\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(save_path, base_dir_path, concat_dir, key), columns=None, use_threads=True).set_index(\"index\")\n","  # base_df = pd.read_excel(save_path + key.replace(new_postfix, base_postfix), index_col=0)  \n","  res_df = pd.read_feather(os.path.join(save_path, dir_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break\n","\n","  droped_new_res_df.reset_index().to_feather(os.path.join(save_path, dir_path, concat_dir, key), compression='lz4')\n","\n","  # res_df_dict[key] = res_df\n","  # res_df_dict[key] = droped_new_res_df\n","  print(key, \"saved !\")\n","\n","  # #     save with pickle    #\n","  # with open(save_path + dict_name, 'wb') as f:\n","  #   pickle.dump(res_df_dict, f)\n","\n","  sample_cnt -= 1\n","\n","  if sample_cnt <= 0:\n","    break\n"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["['2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr']\n","2021-07-01 BTCUSDT.ftr saved !\n","2021-07-01 BCHUSDT.ftr saved !\n","2021-07-01 XRPUSDT.ftr saved !\n","2021-07-01 EOSUSDT.ftr saved !\n","2021-07-01 LTCUSDT.ftr saved !\n","2021-07-01 ETCUSDT.ftr saved !\n","2021-07-01 LINKUSDT.ftr saved !\n","2021-07-01 XLMUSDT.ftr saved !\n","2021-07-01 ADAUSDT.ftr saved !\n","2021-07-01 ETHUSDT.ftr saved !\n"]}]},{"cell_type":"code","metadata":{"id":"WNLIzxy8ZED5"},"source":["print(base_df['dc_upper_5m'].tail(50))\n","print(res_df['dc_upper_5m'].tail(50))\n","# droped_new_res_df.tail()\n","# new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","#   # new_res_df.head()\n","\n","# droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","# droped_new_res_df.head()\n","# break"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"dOTNQDDy_XZj"},"source":["### feather ver. (row concat)"]},{"cell_type":"code","metadata":{"id":"uWpjGgdq_Zvh","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1637112633813,"user_tz":-540,"elapsed":15131,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"764f7ab6-7da8-4056-e446-9c40d5874e1c"},"source":["save_path = './candlestick_concated/res_df/'\n","\n","concat_dir = \"concat\"\n","\n","dir_path = \"bbdc3m_backi2\"\n","\n","new_date = '2021-11-17'\n","old_date = '2021-10-10'\n","\n","# base_dir_path = \"sar15m4h_backi2\"\n","\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","os.makedirs(os.path.join(save_path, dir_path, concat_dir), exist_ok=True)\n","\n","\n","#     load ftr list    #\n","ftr_list = [s for s in os.listdir(os.path.join(save_path, dir_path)) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","# dict_name = \"2021-07-01 ETHUSDT_bb15m_backi2_res_dfs.pkl\"\n","\n","# #     load with pickle    #\n","# with open(save_path + dict_name, 'rb') as f:\n","#   saved_res_df_dict = pickle.load(f)\n","\n","# print(dict_name, \"loaded !\")\n","# res_df_files = os.listdir(save_path)\n","# res_df_files.reverse()\n","\n","# print(res_df_files)\n","\n","# res_df_dict = {}\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(save_path, dir_path, concat_dir, key.replace(new_date, old_date)), columns=None, use_threads=True).set_index(\"index\")\n","  # base_df = pd.read_excel(save_path + key.replace(new_postfix, base_postfix), index_col=0)  \n","  res_df = pd.read_feather(os.path.join(save_path, dir_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break\n","\n","  droped_new_res_df.reset_index().to_feather(os.path.join(save_path, dir_path, concat_dir, key), compression='lz4')\n","\n","  # res_df_dict[key] = res_df\n","  # res_df_dict[key] = droped_new_res_df\n","  print(key, \"saved !\")\n","\n","  # #     save with pickle    #\n","  # with open(save_path + dict_name, 'wb') as f:\n","  #   pickle.dump(res_df_dict, f)\n","\n","  sample_cnt -= 1\n","\n","  if sample_cnt <= 0:\n","    break\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-17 ETHUSDT.ftr', '2021-11-17 BTCUSDT.ftr', '2021-11-17 ETCUSDT.ftr', '2021-11-17 ADAUSDT.ftr', '2021-11-17 XLMUSDT.ftr', '2021-11-17 LINKUSDT.ftr', '2021-11-17 LTCUSDT.ftr', '2021-11-17 EOSUSDT.ftr', '2021-11-17 XRPUSDT.ftr', '2021-11-17 BCHUSDT.ftr']\n","2021-11-17 ETHUSDT.ftr saved !\n","2021-11-17 BTCUSDT.ftr saved !\n","2021-11-17 ETCUSDT.ftr saved !\n","2021-11-17 ADAUSDT.ftr saved !\n","2021-11-17 XLMUSDT.ftr saved !\n","2021-11-17 LINKUSDT.ftr saved !\n","2021-11-17 LTCUSDT.ftr saved !\n","2021-11-17 EOSUSDT.ftr saved !\n","2021-11-17 XRPUSDT.ftr saved !\n","2021-11-17 BCHUSDT.ftr saved !\n"]}]},{"cell_type":"markdown","metadata":{"id":"gta7LLcranqj"},"source":["#### check continuity"]},{"cell_type":"code","metadata":{"id":"v2CQWaiGZ9Cx"},"source":["\n","print(droped_new_res_df.columns)\n","print()\n","# break\n","\n","print(base_df.tail().iloc[:, 0])\n","print(droped_new_res_df.iloc[len(base_df) - 1:len(base_df) + 100, 0].head())\n","\n","\n","#     check deserialized ts_idex    #\n","ts_index = pd.Series(list(map(lambda x : datetime.timestamp(x), droped_new_res_df.index)))\n","\n","for i in range(1, len(ts_index)):\n","  if ts_index[i - 1] > ts_index[i]:\n","    print(ts_index[i - 1] , ts_index[i])\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ShvMpmWtC_Uv"},"source":["## modify colname"]},{"cell_type":"markdown","metadata":{"id":"yvrNFdxrnVjt"},"source":["### old (xlsx)"]},{"cell_type":"code","metadata":{"id":"3SvktSAzDDrk"},"source":["pd.set_option('display.max_seq_items', None)\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","dict_name = \"2021-07-01 ETHUSDT_sarstoch_backi2_res_dfs.pkl\"\n","# new_dict_name = \"2021-07-01 ETHUSDT_bbline_backi2_res_dfs_colmod.pkl\"\n","\n","new_colname = ['open', 'high', 'low', 'close', 'volume', 'ST1_Up_3m', 'ST1_Down_3m',\n","       'ST1_Trend_3m', 'ST2_Up_3m', 'ST2_Down_3m', 'ST2_Trend_3m', 'ST3_Up_3m',\n","       'ST3_Down_3m', 'ST3_Trend_3m', 'min_upper_3m', 'max_lower_3m', 'middle_line_3m',\n","       'upper_middle_3m', 'lower_middle_3m', 'st_gap_3m', 'ST1_Up_30m', 'ST1_Down_30m',\n","       'ST1_Trend_30m', 'ST2_Up_30m', 'ST2_Down_30m', 'ST2_Trend_30m', 'ST3_Up_30m',\n","       'ST3_Down_30m', 'ST3_Trend_30m', 'min_upper_30m', 'max_lower_30m', 'middle_line_30m',\n","       'upper_middle_30m', 'lower_middle_30m', 'st_gap_30m', 'ST1_Up_4h', 'ST1_Down_4h',\n","       'ST1_Trend_4h', 'ST2_Up_4h', 'ST2_Down_4h', 'ST2_Trend_4h', 'ST3_Up_4h',\n","       'ST3_Down_4h', 'ST3_Trend_4h', 'min_upper_4h', 'max_lower_4h', 'middle_line_4h',\n","       'upper_middle_4h', 'lower_middle_4h', 'st_gap_4h', 'ST1_Up_1d', 'ST1_Down_1d',\n","       'ST1_Trend_1d', 'ST2_Up_1d', 'ST2_Down_1d', 'ST2_Trend_1d', 'ST3_Up_1d',\n","       'ST3_Down_1d', 'ST3_Trend_1d', 'min_upper_1d', 'max_lower_1d', 'middle_line_1d',\n","       'upper_middle_1d', 'lower_middle_1d', 'st_gap_1d', 'mmh_st1_1m', 'mmh_st2_1m',\n","       'norm_st_up_1m', 'norm_st_down_1m', 'norm_st_trend_1m', 'ST1_Up_5m', 'ST1_Down_5m',\n","       'ST1_Trend_5m', 'ST2_Up_5m', 'ST2_Down_5m', 'ST2_Trend_5m', 'ST3_Up_5m',\n","       'ST3_Down_5m', 'ST3_Trend_5m', 'min_upper_5m', 'max_lower_5m', 'middle_line_5m',\n","       'upper_middle_5m', 'lower_middle_5m', 'st_gap_5m',\n","       'bb_upper_1m', 'bb_lower_1m', 'bb_base_1m', 'bb_upper2_1m',\n","       'bb_upper3_1m', 'bb_lower2_1m', 'bb_lower3_1m', 'bb_upper_30m',\n","       'bb_lower_30m', 'bb_base_30m', 'bb_upper2_30m', 'bb_upper3_30m',\n","       'bb_lower2_30m', 'bb_lower3_30m']\n","\n","#     load with pickle    #\n","with open(save_path + dict_name, 'rb') as f:\n","  saved_res_df_dict = pickle.load(f)\n","\n","for key, res_df in saved_res_df_dict.items():\n","\n","  # if '_stline15_backi2' not in key:\n","  #   continue\n","\n","  # print(res_df.columns)\n","\n","  try:\n","\n","    #     rename whole cols   #\n","    # res_df.columns = new_colname\n","\n","    #     rename specific cols   #\n","    res_df.rename(columns={\"stoch5\" : \"stoch_30m\"}, inplace=True)\n","\n","\n","    #     drop cols   #\n","    # res_df.drop(['bb_upper', 'bb_lower'], axis=1, inplace=True)\n","    # break\n","\n","  except Exception as e:\n","    print(e)\n","\n","  \n","  # res_df_dict[key] = res_df\n","  saved_res_df_dict[key] = res_df\n","  print(key, \"modified & saved to dict !\")\n","\n","  #     save with pickle    #\n","  with open(save_path + dict_name, 'wb') as f:\n","    pickle.dump(saved_res_df_dict, f)\n","\n","# res_df.tail()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"0-wuP0cHSwvC"},"source":["# print(res_df.tail()) # 35215.568620 35182.644944\n","res_df.tail() # 35215.568620 35182.644944"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JcKfLZ7QnYcK"},"source":["### feather ver."]},{"cell_type":"code","metadata":{"id":"qcltRDX8nZ4e"},"source":["pd.set_option('display.max_seq_items', None)\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","dir_path = \"dc_backi2\"\n","concat_dir = \"concat\"\n","\n","#     load ftr list    #\n","ftr_list = [s for s in os.listdir(os.path.join(save_path, dir_path, concat_dir)) if \"ftr\" in s]\n","print(ftr_list)\n","\n","# dict_name = \"2021-07-01 ETHUSDT_sarstoch_backi2_res_dfs.pkl\"\n","\n","new_colname = ['open', 'high', 'low', 'close', 'volume', 'ST1_Up_3m', 'ST1_Down_3m',\n","       'ST1_Trend_3m', 'ST2_Up_3m', 'ST2_Down_3m', 'ST2_Trend_3m', 'ST3_Up_3m',\n","       'ST3_Down_3m', 'ST3_Trend_3m', 'min_upper_3m', 'max_lower_3m', 'middle_line_3m',\n","       'upper_middle_3m', 'lower_middle_3m', 'st_gap_3m', 'ST1_Up_30m', 'ST1_Down_30m',\n","       'ST1_Trend_30m', 'ST2_Up_30m', 'ST2_Down_30m', 'ST2_Trend_30m', 'ST3_Up_30m',\n","       'ST3_Down_30m', 'ST3_Trend_30m', 'min_upper_30m', 'max_lower_30m', 'middle_line_30m',\n","       'upper_middle_30m', 'lower_middle_30m', 'st_gap_30m', 'ST1_Up_4h', 'ST1_Down_4h',\n","       'ST1_Trend_4h', 'ST2_Up_4h', 'ST2_Down_4h', 'ST2_Trend_4h', 'ST3_Up_4h',\n","       'ST3_Down_4h', 'ST3_Trend_4h', 'min_upper_4h', 'max_lower_4h', 'middle_line_4h',\n","       'upper_middle_4h', 'lower_middle_4h', 'st_gap_4h', 'ST1_Up_1d', 'ST1_Down_1d',\n","       'ST1_Trend_1d', 'ST2_Up_1d', 'ST2_Down_1d', 'ST2_Trend_1d', 'ST3_Up_1d',\n","       'ST3_Down_1d', 'ST3_Trend_1d', 'min_upper_1d', 'max_lower_1d', 'middle_line_1d',\n","       'upper_middle_1d', 'lower_middle_1d', 'st_gap_1d', 'mmh_st1_1m', 'mmh_st2_1m',\n","       'norm_st_up_1m', 'norm_st_down_1m', 'norm_st_trend_1m', 'ST1_Up_5m', 'ST1_Down_5m',\n","       'ST1_Trend_5m', 'ST2_Up_5m', 'ST2_Down_5m', 'ST2_Trend_5m', 'ST3_Up_5m',\n","       'ST3_Down_5m', 'ST3_Trend_5m', 'min_upper_5m', 'max_lower_5m', 'middle_line_5m',\n","       'upper_middle_5m', 'lower_middle_5m', 'st_gap_5m',\n","       'bb_upper_1m', 'bb_lower_1m', 'bb_base_1m', 'bb_upper2_1m',\n","       'bb_upper3_1m', 'bb_lower2_1m', 'bb_lower3_1m', 'bb_upper_30m',\n","       'bb_lower_30m', 'bb_base_30m', 'bb_upper2_30m', 'bb_upper3_30m',\n","       'bb_lower2_30m', 'bb_lower3_30m']\n","\n","# #     load with pickle    #\n","# with open(save_path + dict_name, 'rb') as f:\n","#   saved_res_df_dict = pickle.load(f)\n","\n","for key in ftr_list:\n","\n","  res_df = pd.read_feather(os.path.join(save_path, dir_path, concat_dir, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","  try:\n","\n","    #     rename whole cols   #\n","    # res_df.columns = new_colname\n","\n","    #     rename specific cols   #\n","    res_df.rename(columns={\"stoch5\" : \"stoch_30m\"}, inplace=True)\n","\n","\n","    #     drop cols   #\n","    # res_df.drop(['bb_upper', 'bb_lower'], axis=1, inplace=True)\n","    # break\n","\n","  except Exception as e:\n","    print(e)\n","\n","  \n","  res_df.reset_index().to_feather(os.path.join(save_path, dir_path, concat_dir, key), compression='lz4')\n","\n","  # res_df_dict[key] = res_df\n","  # saved_res_df_dict[key] = res_df\n","  print(key, \"modified & saved !\")\n","\n","  # #     save with pickle    #\n","  # with open(save_path + dict_name, 'wb') as f:\n","  #   pickle.dump(saved_res_df_dict, f)\n","\n","# res_df.tail()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"qNGeuYuGDXfv"},"source":["# pr check with strategy"]},{"cell_type":"markdown","metadata":{"id":"6HOjnZjSgzk1"},"source":["## load ftr_list"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7FPBG5Qqg2jB","executionInfo":{"status":"ok","timestamp":1638101396512,"user_tz":-540,"elapsed":1185,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"096b862b-09ab-42b5-9029-cac51631d664"},"source":["save_path = './candlestick_concated/res_df/'\n","\n","dir_path = \"bbdc3m_backi2\"\n","# dir_path = \"sar15m4h_backi2\"\n","\n","date = \"11-17\"\n","date = \"11-24\"\n","# date = \"07-01\"\n","\n","#     load ftr list    #\n","ftr_list = [s for s in os.listdir(os.path.join(save_path, dir_path, \"concat\")) if \"ftr\" in s if date in s]\n","# ftr_list = [s for s in os.listdir(os.path.join(save_path, dir_path)) if \"ftr\" in s if date in s]\n","print(ftr_list)"],"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["['2021-11-24 ZECUSDT.ftr', '2021-11-24 BNBUSDT.ftr', '2021-11-24 RUNEUSDT.ftr']\n"]}]},{"cell_type":"markdown","metadata":{"id":"5duWn8t4BRyv"},"source":["## hvp platform"]},{"cell_type":"markdown","metadata":{"id":"wmnyUTS-yjF1"},"source":["##### config"]},{"cell_type":"code","metadata":{"id":"q_4E-zH02WJy","executionInfo":{"status":"ok","timestamp":1638107299761,"user_tz":-540,"elapsed":357,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"source":["#     caution : MARKET / LIMIT spelling   #\n","#      json doesn't support single quotes     #\n","\n","param_dict = \\\n","{\n","  \"init_set\": {\n","    \"run\": 1,\n","    \"df_log\": 0,\n","    \"bar_close_second\": 59,\n","    \"realtime_term\": 0.01,\n","    \"last_index\": -2,\n","    \"limit_fee\": 0.0002,\n","    \"market_fee\": 0.0004,\n","    \"initial_asset\": 1000,\n","    \"asset_changed\" : 1,\n","    \"symbol\": \"RUNEUSDT\",\n","    \"symbol_changed\": 0,\n","    \"interval_list\": [\n","      \"1m\",\n","      \"5m\",\n","      \"15m\"\n","    ],\n","    \"row_list\": [\n","      200,\n","      100,\n","      100\n","    ],\n","    \"api_retry_term\": 3,\n","    \"save_stacked_df\": 0,\n","    \"stacked_df_exist\": 1\n","  },\n","  \"loc_set\": {\n","    \"exp_itv\": \"5m\",\n","    \"tpg_itv\": \"5m\",\n","    \"outg_itv\": \"5m\",\n","    \"outg_dc_period\": \"None\",\n","    \"dtk_itv\": \"5m\",\n","    \"dtk_dc_itv\": \"None\",\n","    \"dt_k\": 0.225,\n","    \"dc_period\": 135,\n","    \"ei_k\": 0.095,\n","    \"use_dtk_line\": 0,\n","    \"spread\": 0.95,    \n","    \"spread_ep_gap\": 0.083,\n","    \"bbz_itv\": \"None\",\n","    \"zone_dt_k\": 0.4,\n","    \"zone_dc_period\": 135\n","  },\n","  \"tr_set\": {\n","    \"ep_gap\": 0.083,\n","    \"tp_gap\": 0.36,\n","    \"out_gap\": -0.5,\n","    \"c_ep_gap\": 0.232,\n","    \"t_out_gap\": -0.5\n","  },\n","  \"ep_set\": {\n","    \"short_entry_score\": -2,\n","    \"dr_error\": 0.1,\n","    \"bbwp_thresh\": 0.5,\n","    \"entry_incycle\": 5,\n","    \"tf_entry\": 5,\n","    \"htf_entry\": 15,\n","    \"entry_type\": \"LIMIT\",\n","    \"static_ep\": 1,\n","    \"tpout_onexec\": 0,\n","    \"max_eplim_pct\": 0.05,\n","    \"min_eplim_pct\": 0.013,\n","    \"short_inversion\": 0,\n","    \"long_inversion\": 0,\n","    \"check_entry_sec\": 10,\n","    \"entry_execution_wait\": 60,\n","    \"breakout_qty_ratio\": 0.97,\n","    \"qty_check_term\": 30\n","  },\n","  \"out_set\": {\n","    \"out_type\": \"MARKET\",\n","    \"exit_execution_wait\": 60,\n","    \"close_complete_term\": 5,\n","    \"use_out\": 1,\n","    \"static_out\": 1,\n","    \"hl_out\": 1,\n","    \"price_restoration\": 0,\n","    \"retouch\": 0,\n","    \"retouch_out_period\": 500,\n","    \"second_out\": 0,\n","    \"approval_st_gap\": 1.5,\n","    \"second_out_gap\": 0.5\n","  },\n","  \"tp_set\": {\n","    \"non_tp\": 0,\n","    \"tp_type\": \"LIMIT\",\n","    \"static_tp\": 1,\n","    \"partial_num\": 1,\n","    \"partial_qty_divider\": 1.5\n","  },\n","  \"lvrg_set\": {\n","    \"leverage\": 2,\n","    \"static_lvrg\": 0,\n","    \"allow_float\": 0,\n","    \"target_pct\": 0.1,\n","    \"lvrg_rejection\": 0\n","  }\n","}\n","\n","config = EasyDict(param_dict)\n","# param_json = json.dumps(param_dict, indent=2)"],"execution_count":36,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rrIGjmUzqU-D"},"source":["##### sync_funcs"]},{"cell_type":"code","metadata":{"id":"nzOYWA2kqZ0d","executionInfo":{"status":"ok","timestamp":1638101627052,"user_tz":-540,"elapsed":1599,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"source":["\n","class OrderSide:\n","    BUY = \"BUY\"\n","    SELL = \"SELL\"\n","    INVALID = None\n","\n","\n","def enlist_rtc(res_df, config):\n","\n","    res_df = bb_level(res_df, '5m', 1)\n","    res_df = dc_level(res_df, '5m', 1)\n","    res_df = bb_level(res_df, '15m', 1)\n","    res_df = dc_level(res_df, '15m', 1)\n","    res_df = bb_level(res_df, '30m', 1)\n","    res_df = dc_level(res_df, '30m', 1)\n","\n","    res_df['short_rtc_1'] = res_df['bb_lower_%s' % config.loc_set.tpg_itv]\n","    res_df['short_rtc_0'] = res_df['dc_upper_%s' % config.loc_set.outg_itv]\n","    res_df['short_rtc_gap'] = res_df['short_rtc_0'] - res_df['short_rtc_1']\n","\n","    res_df['h_short_rtc_1'] = res_df['bb_lower_%s' % config.loc_set.tpg_itv]\n","    res_df['h_short_rtc_0'] = res_df['dc_upper_%s' % config.loc_set.tpg_itv]\n","    res_df['h_short_rtc_gap'] = res_df['h_short_rtc_0'] - res_df['h_short_rtc_1']\n","\n","    res_df['long_rtc_1'] = res_df['bb_upper_%s' % config.loc_set.tpg_itv]\n","    res_df['long_rtc_0'] = res_df['dc_lower_%s' % config.loc_set.outg_itv]\n","    res_df['long_rtc_gap'] = res_df['long_rtc_1'] - res_df['long_rtc_0']\n","\n","    res_df['h_long_rtc_1'] = res_df['bb_upper_%s' % config.loc_set.tpg_itv]\n","    res_df['h_long_rtc_0'] = res_df['dc_lower_%s' % config.loc_set.tpg_itv]\n","    res_df['h_long_rtc_gap'] = res_df['h_long_rtc_1'] - res_df['h_long_rtc_0']\n","\n","    res_df['short_dtk_1'] = res_df['bb_lower_%s' % config.loc_set.dtk_itv]\n","    res_df['short_dtk_0'] = res_df['dc_upper_%s' % config.loc_set.dtk_itv]\n","    res_df['short_dtk_gap'] = res_df['short_dtk_0'] - res_df['short_dtk_1']\n","\n","    res_df['long_dtk_1'] = res_df['bb_upper_%s' % config.loc_set.dtk_itv]\n","    res_df['long_dtk_0'] = res_df['dc_lower_%s' % config.loc_set.dtk_itv]\n","    res_df['long_dtk_gap'] = res_df['long_dtk_1'] - res_df['long_dtk_0']\n","\n","    res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=15, use_dtk_line=config.loc_set.use_dtk_line)\n","\n","    return res_df\n","\n","\n","\n","def enlist_tr(res_df, config, np_timeidx):\n","\n","\n","    res_df['entry'] = np.zeros(len(res_df))\n","    res_df['h_entry'] = np.zeros(len(res_df))\n","\n","    # -------- set ep level -------- #\n","\n","    #       limit ver.     #\n","    #        bb ep         #\n","    res_df['short_ep'] = res_df['h_short_rtc_1'] + res_df['h_short_rtc_gap'] * config.tr_set.ep_gap\n","    res_df['long_ep'] = res_df['h_long_rtc_1'] - res_df['h_long_rtc_gap'] * config.tr_set.ep_gap\n","\n","    if config.tr_set.c_ep_gap != \"None\":\n","        res_df['short_ep_org'] = res_df['short_ep'].copy()\n","        res_df['long_ep_org'] = res_df['long_ep'].copy()\n","\n","        res_df['short_ep2'] = res_df['h_short_rtc_1'] + res_df['h_short_rtc_gap'] * config.tr_set.c_ep_gap\n","        res_df['long_ep2'] = res_df['h_long_rtc_1'] - res_df['h_long_rtc_gap'] * config.tr_set.c_ep_gap\n","\n","    res_df['short_tr_ep'] = res_df['h_short_rtc_1'] + res_df['h_short_rtc_gap'] * config.loc_set.spread_ep_gap\n","    res_df['long_tr_ep'] = res_df['h_long_rtc_1'] - res_df['h_long_rtc_gap'] * config.loc_set.spread_ep_gap\n","\n","    #       market ver.     #\n","    if config.ep_set.entry_type == \"MARKET\":\n","        res_df['short_ep'] = res_df['close']\n","        res_df['long_ep'] = res_df['close']\n","\n","    # ---------------------------------------- short = -1 ---------------------------------------- #\n","    # ---------------- ep_time  ---------------- #\n","    #        bb level entry      #\n","    # res_df['entry'] = np.where((res_df['close'].shift(config.ep_set.tf_entry * 1) >= res_df['bb_lower_%s' % config.loc_set.exp_itv]) &\n","    res_df['entry'] = np.where((res_df['open'] >= res_df['bb_lower_%s' % config.loc_set.exp_itv]) &\n","                               # (res_df['close'].shift(config.ep_set.tf_entry * 1) >= res_df['bb_lower_%s' % config.loc_set.exp_itv]) &\n","                               (res_df['close'] < res_df['bb_lower_%s' % config.loc_set.exp_itv])\n","                               , res_df['entry'] - 1, res_df['entry'])\n","\n","    res_df['entry'] = np.where((res_df['entry'] < 0) &\n","                               (np_timeidx % config.ep_set.tf_entry == (config.ep_set.tf_entry - 1))\n","                               , res_df['entry'] - 1, res_df['entry'])\n","\n","    # res_df['entry'] = np.where((res_df['open'] >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 # (res_df['close'].shift(config.ep_set.tf_entry * 1) <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 (res_df['close'] < res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry'] - 1, res_df['entry'])\n","\n","    # res_df['entry'] = np.where((res_df['open'] >= res_df['bb_lower_1m']) &\n","    #                 # (res_df['close'].shift(config.ep_set.tf_entry * 1) <= res_df['bb_lower_1m']) &\n","    #                 (res_df['close'] < res_df['bb_lower_1m'])\n","    #                 , res_df['entry'] - 1, res_df['entry'])\n","\n","    res_df['h_entry'] = np.where(  # (res_df['open'] >= res_df['bb_lower_%s' % config.loc_set.dtk_itv]) &\n","        (res_df['close'].shift(config.ep_set.htf_entry * 1) >= res_df['bb_lower_%s' % config.loc_set.dtk_itv]) &\n","        (res_df['close'] < res_df['bb_lower_%s' % config.loc_set.dtk_itv]) &\n","        (np_timeidx % config.ep_set.htf_entry == (config.ep_set.htf_entry - 1))\n","        , res_df['h_entry'] - 1, res_df['h_entry'])\n","\n","    # ---------------------------------------- long = 1 ---------------------------------------- #\n","    # ---------------------- ep_time ---------------------- #\n","\n","    #      bb level entry      #\n","    # res_df['entry'] = np.where((res_df['close'].shift(config.ep_set.tf_entry * 1) <= res_df['bb_upper_%s' % config.loc_set.exp_itv]) &\n","    res_df['entry'] = np.where((res_df['open'] <= res_df['bb_upper_%s' % config.loc_set.exp_itv]) &\n","                               # (res_df['close'].shift(config.ep_set.tf_entry * 1) <= res_df['bb_upper_%s' % config.loc_set.exp_itv]) &\n","                               (res_df['close'] > res_df['bb_upper_%s' % config.loc_set.exp_itv])\n","                               , res_df['entry'] + 1, res_df['entry'])\n","\n","    res_df['entry'] = np.where((res_df['entry'] > 0) &\n","                               (np_timeidx % config.ep_set.tf_entry == (config.ep_set.tf_entry - 1))\n","                               , res_df['entry'] + 1, res_df['entry'])\n","\n","    # res_df['entry'] = np.where((res_df['open'] <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   # (res_df['close'].shift(config.ep_set.tf_entry * 1) >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   (res_df['close'] > res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry'] + 1, res_df['entry'])\n","\n","    # res_df['entry'] = np.where((res_df['open'] <= res_df['bb_upper_1m']) &\n","    #                   # (res_df['close'].shift(config.ep_set.tf_entry * 1) >= res_df['bb_upper_1m']) &\n","    #                   (res_df['close'] > res_df['bb_upper_1m'])\n","    #                 , res_df['entry'] + 1, res_df['entry'])\n","\n","    res_df['h_entry'] = np.where(  # (res_df['open'] <= res_df['bb_upper_%s' % config.loc_set.dtk_itv]) &\n","        (res_df['close'].shift(config.ep_set.htf_entry * 1) <= res_df['bb_upper_%s' % config.loc_set.dtk_itv]) &\n","        (res_df['close'] > res_df['bb_upper_%s' % config.loc_set.dtk_itv]) &\n","        (np_timeidx % config.ep_set.htf_entry == (config.ep_set.htf_entry - 1))\n","        , res_df['h_entry'] + 1, res_df['h_entry'])\n","\n","    # ------------------------------ rtc tp & out ------------------------------ #\n","    # --------------- bb rtc out --------------- #\n","\n","    if config.loc_set.outg_dc_period != \"None\":\n","        res_df['short_rtc_0'] = res_df['high'].rolling(config.loc_set.outg_dc_period).max()\n","        res_df['long_rtc_0'] = res_df['low'].rolling(config.loc_set.outg_dc_period).min()\n","\n","    res_df['short_out'] = res_df['short_rtc_0'] + res_df['short_rtc_gap'] * config.tr_set.out_gap\n","    res_df['long_out'] = res_df['long_rtc_0'] - res_df['long_rtc_gap'] * config.tr_set.out_gap\n","\n","    if config.tr_set.t_out_gap != \"None\":\n","        res_df['short_out_org'] = res_df['short_out'].copy()\n","        res_df['long_out_org'] = res_df['long_out'].copy()\n","\n","        res_df['short_out2'] = res_df['short_rtc_0'] + res_df['short_rtc_gap'] * config.tr_set.t_out_gap\n","        res_df['long_out2'] = res_df['long_rtc_0'] - res_df['long_rtc_gap'] * config.tr_set.t_out_gap\n","\n","    # ------------------------------ tp ------------------------------ #\n","    # --------------- bb rtc tp --------------- #\n","    res_df['short_tp'] = res_df['h_short_rtc_1'] - res_df['h_short_rtc_gap'] * config.tr_set.tp_gap\n","    res_df['long_tp'] = res_df['h_long_rtc_1'] + res_df['h_long_rtc_gap'] * config.tr_set.tp_gap\n","\n","    # --------------- set tp_line / dtk_line --------------- #\n","    # res_df['short_tp_1'] = np.where(res_df['h_entry'] == -1, res_df['short_rtc_1'], np.nan)\n","    # res_df['short_tp_1'] = ffill(res_df['short_tp_1'].values.reshape(1, -1)).reshape(-1, 1)\n","    # res_df['short_tp_gap'] = np.where(res_df['h_entry'] == -1, res_df['h_short_rtc_gap'], np.nan)  # ltf_gap 은 out 을 위한 gap 임\n","    # res_df['short_tp_gap'] = ffill(res_df['short_tp_gap'].values.reshape(1, -1)).reshape(-1, 1)\n","\n","    # res_df['long_tp_1'] = np.where(res_df['h_entry'] == 1, res_df['long_rtc_1'], np.nan)\n","    # res_df['long_tp_1'] = ffill(res_df['long_tp_1'].values.reshape(1, -1)).reshape(-1, 1)\n","    # res_df['long_tp_gap'] = np.where(res_df['h_entry'] == 1, res_df['h_long_rtc_gap'], np.nan)\n","    # res_df['long_tp_gap'] = ffill(res_df['long_tp_gap'].values.reshape(1, -1)).reshape(-1, 1)\n","\n","    # res_df['h_short_tp_1'] = np.where(res_df['h_entry'] == -1, res_df['h_short_rtc_1'], np.nan)\n","    # res_df['h_short_tp_1'] = ffill(res_df['h_short_tp_1'].values.reshape(1, -1)).reshape(-1, 1)\n","    # res_df['h_short_tp_gap'] = np.where(res_df['h_entry'] == -1, res_df['h_short_rtc_gap'], np.nan)\n","    # res_df['h_short_tp_gap'] = ffill(res_df['h_short_tp_gap'].values.reshape(1, -1)).reshape(-1, 1)\n","\n","    # res_df['h_long_tp_1'] = np.where(res_df['h_entry'] == 1, res_df['h_long_rtc_1'], np.nan)\n","    # res_df['h_long_tp_1'] = ffill(res_df['h_long_tp_1'].values.reshape(1, -1)).reshape(-1, 1)\n","    # res_df['h_long_tp_gap'] = np.where(res_df['h_entry'] == 1, res_df['h_long_rtc_gap'], np.nan)\n","    # res_df['h_long_tp_gap'] = ffill(res_df['h_long_tp_gap'].values.reshape(1, -1)).reshape(-1, 1)\n","\n","    if config.loc_set.use_dtk_line:\n","        res_df['short_dtk_1'] = np.where(res_df['h_entry'] == -1, res_df['short_dtk_1'], np.nan)\n","        res_df['short_dtk_1'] = ffill(res_df['short_dtk_1'].values.reshape(1, -1)).reshape(-1, 1)\n","        res_df['short_dtk_gap'] = np.where(res_df['h_entry'] == -1, res_df['short_dtk_gap'], np.nan)\n","        res_df['short_dtk_gap'] = ffill(res_df['short_dtk_gap'].values.reshape(1, -1)).reshape(-1, 1)\n","\n","        res_df['long_dtk_1'] = np.where(res_df['h_entry'] == 1, res_df['long_dtk_1'], np.nan)\n","        res_df['long_dtk_1'] = ffill(res_df['long_dtk_1'].values.reshape(1, -1)).reshape(-1, 1)\n","        res_df['long_dtk_gap'] = np.where(res_df['h_entry'] == 1, res_df['long_dtk_gap'], np.nan)\n","        res_df['long_dtk_gap'] = ffill(res_df['long_dtk_gap'].values.reshape(1, -1)).reshape(-1, 1)\n","\n","    res_df['dc_upper_v2'] = res_df['high'].rolling(config.loc_set.dc_period).max()\n","    res_df['dc_lower_v2'] = res_df['low'].rolling(config.loc_set.dc_period).min()\n","    \n","    res_df['zone_dc_upper_v2'] = res_df['high'].rolling(config.loc_set.zone_dc_period).max()\n","    res_df['zone_dc_lower_v2'] = res_df['low'].rolling(config.loc_set.zone_dc_period).min()\n","\n","    return res_df\n","\n","\n","\n","def short_ep_loc(res_df, config, i):\n","\n","    # ------- param init ------- #\n","    open_side = None\n","\n","    mr_const_cnt = 0\n","    mr_score = 0\n","    zone = 'n'\n","\n","\n","    if config.ep_set.entry_type == 'MARKET':\n","        if config.tp_set.tp_type == 'LIMIT':\n","            tp_fee = config.init_set.market_fee + config.init_set.limit_fee\n","        else:\n","            tp_fee = config.init_set.market_fee + config.init_set.market_fee\n","        out_fee = config.init_set.market_fee + config.init_set.market_fee\n","    else:\n","        if config.tp_set.tp_type == 'LIMIT':\n","            tp_fee = config.init_set.limit_fee + config.init_set.limit_fee\n","        else:\n","            tp_fee = config.init_set.limit_fee + config.init_set.market_fee\n","        out_fee = config.init_set.limit_fee + config.init_set.market_fee\n","\n","\n","    # -------------- tr scheduling -------------- #\n","    if config.loc_set.spread != \"None\":\n","        mr_const_cnt += 1\n","\n","        if config.loc_set.spread_ep_gap != \"None\":\n","            if (res_df['short_tr_ep'].iloc[i] - res_df['short_tp'].iloc[i] - tp_fee * res_df['short_tr_ep'].iloc[\n","                i]) / (res_df['short_out'].iloc[i] - res_df['short_tr_ep'].iloc[i] + out_fee *\n","                       res_df['short_tr_ep'].iloc[i]) >= config.loc_set.spread:  # org\n","                      #  res_df['short_tr_ep'].iloc[i]) <= config.loc_set.spread:\n","                mr_score += 1\n","\n","        else:\n","            if (res_df['short_ep'].iloc[i] - res_df['short_tp'].iloc[i] - tp_fee * res_df['short_ep'].iloc[i]) / (\n","                    res_df['short_out'].iloc[i] - res_df['short_ep'].iloc[i] + out_fee * res_df['short_ep'].iloc[\n","                i]) >= config.loc_set.spread:\n","                # if (res_df['short_ep'].iloc[i] - res_df['short_tp'].iloc[i] - tp_fee * res_df['short_ep'].iloc[i]) / (res_df['short_out'].iloc[i] - res_df['short_ep'].iloc[i] + tp_fee * res_df['short_ep'].iloc[i]) >= config.loc_set.spread:\n","                # if (res_df['short_ep'].iloc[i] - res_df['short_tp'].iloc[i] - tp_fee * res_df['short_ep'].iloc[i]) / (res_df['short_out'].iloc[i] - res_df['short_ep'].iloc[i] + out_fee * res_df['short_ep'].iloc[i]) == config.loc_set.spread:\n","                # if (res_df['short_ep'].iloc[i] - res_df['short_tp'].iloc[i] - out_fee * res_df['short_ep'].iloc[i]) / (res_df['short_out'].iloc[i] - res_df['short_ep'].iloc[i] + out_fee * res_df['short_ep'].iloc[i]) >= config.loc_set.spread:\n","                mr_score += 1\n","\n","    # -------------- dtk -------------- #\n","    if config.loc_set.dt_k != \"None\":\n","        mr_const_cnt += 1\n","        # if res_df['dc_lower_%s' % config.loc_set.dtk_dc_itv].iloc[i] >= res_df['short_rtc_1'].iloc[i] - res_df['h_short_rtc_gap'].iloc[i] * config.loc_set.dt_k:\n","        #     dtk_v1 & v2 platform     #\n","        if config.loc_set.dtk_dc_itv != \"None\":\n","            if res_df['dc_lower_%s' % config.loc_set.dtk_dc_itv].iloc[i] >= res_df['short_dtk_1'].iloc[i] - \\\n","                    res_df['short_dtk_gap'].iloc[i] * config.loc_set.dt_k:\n","                mr_score += 1\n","\n","                #     dc_v2   #\n","        else:\n","            if res_df['dc_lower_v2'].iloc[i] >= res_df['short_dtk_1'].iloc[i] - res_df['short_dtk_gap'].iloc[   # org\n","            # if res_df['dc_lower_v2'].iloc[i] <= res_df['short_dtk_1'].iloc[i] - res_df['short_dtk_gap'].iloc[\n","                i] * config.loc_set.dt_k:\n","                # if res_df['dc_lower_v2'].iloc[i] >= res_df['short_dtk_1'].iloc[i] - res_df['short_dtk_gap'].iloc[i] * config.loc_set.dt_k and \\\n","                # res_df['dc_upper_v2'].iloc[i] <= res_df['long_dtk_1'].iloc[i] + res_df['long_dtk_gap'].iloc[i] * config.loc_set.dt_k:\n","\n","                mr_score += 1\n","\n","    # -------------- zone rejection  -------------- #\n","    if config.loc_set.bbz_itv != \"None\":\n","      mr_const_cnt += 1\n","\n","        #       by bb       # \n","      # if res_df['close'].iloc[i] < res_df['bb_lower_%s' % config.loc_set.bbz_itv].iloc[i]:   # org\n","      # if res_df['close'].iloc[i] > res_df['bb_lower_%s' % config.loc_set.bbz_itv].iloc[i]:  # inv\n","      # if res_df['close'].iloc[i] > res_df['bb_upper_%s' % config.loc_set.bbz_itv].iloc[i]:    \n","      # if res_df['close'].iloc[i] > res_df['bb_lower2_%s' % config.loc_set.bbz_itv].iloc[i]:\n","\n","        #       by zone_dtk       #\n","      if res_df['zone_dc_upper_v2'].iloc[i] < res_df['long_dtk_plot_1'].iloc[i] + res_df['long_dtk_plot_gap'].iloc[\n","          i] * config.loc_set.zone_dt_k:\n","\n","        mr_score += 1\n","\n","\n","    # -------------- zoning -------------- #\n","    if config.tr_set.c_ep_gap != \"None\":\n","\n","        #       by bb       # \n","        # if res_df['close'].iloc[i] > res_df['bb_lower_%s' % config.loc_set.bbz_itv].iloc[i]:\n","\n","        #       by zone_dtk       #\n","\n","          #         c_zone        #\n","        if res_df['zone_dc_upper_v2'].iloc[i] > res_df['long_dtk_plot_1'].iloc[i] + res_df['long_dtk_plot_gap'].iloc[\n","            i] * config.loc_set.zone_dt_k:\n","\n","            if config.ep_set.static_ep:\n","              res_df['short_ep'].iloc[i] = res_df['short_ep2'].iloc[i]\n","            else:\n","              res_df['short_ep'] = res_df['short_ep2']\n","              \n","            if config.out_set.static_out:\n","              res_df['short_out'].iloc[i] = res_df['short_out_org'].iloc[i]\n","            else:\n","              res_df['short_out'] = res_df['short_out_org']\n","\n","            zone = 'c'\n","\n","          #         t_zone        #\n","        else:\n","            if config.ep_set.static_ep:\n","              res_df['short_ep'].iloc[i] = res_df['short_ep_org'].iloc[i]\n","            else:\n","              res_df['short_ep'] = res_df['short_ep_org']\n","\n","            if config.out_set.static_out:\n","              res_df['short_out'].iloc[i] = res_df['short_out2'].iloc[i]\n","            else:\n","              res_df['short_out'] = res_df['short_out2']\n","\n","            zone = 't'\n","\n","    if mr_const_cnt == mr_score:\n","        open_side = OrderSide.SELL\n","\n","    return res_df, open_side, zone\n","\n","\n","\n","def long_ep_loc(res_df, config, i):\n","\n","    # ------- param init ------- #\n","    open_side = None\n","\n","    mr_const_cnt = 0\n","    mr_score = 0\n","    zone = 'n'\n","\n","\n","    if config.ep_set.entry_type == 'MARKET':\n","        if config.tp_set.tp_type == 'LIMIT':\n","            tp_fee = config.init_set.market_fee + config.init_set.limit_fee\n","        else:\n","            tp_fee = config.init_set.market_fee + config.init_set.market_fee\n","        out_fee = config.init_set.market_fee + config.init_set.market_fee\n","    else:\n","        if config.tp_set.tp_type == 'LIMIT':\n","            tp_fee = config.init_set.limit_fee + config.init_set.limit_fee\n","        else:\n","            tp_fee = config.init_set.limit_fee + config.init_set.market_fee\n","        out_fee = config.init_set.limit_fee + config.init_set.market_fee\n","\n","\n","    # -------------- tr scheduling -------------- #       \n","    if config.loc_set.spread != \"None\":   \n","\n","      mr_const_cnt += 1\n","      if config.loc_set.spread_ep_gap != \"None\":\n","        if (res_df['long_tp'].iloc[i] - res_df['long_tr_ep'].iloc[i] - tp_fee * res_df['long_tr_ep'].iloc[\n","          i]) / (res_df['long_tr_ep'].iloc[i] - res_df['long_out'].iloc[i] + out_fee * \n","                 res_df['long_tr_ep'].iloc[i]) >= config.loc_set.spread:  # org\n","                #  res_df['long_tr_ep'].iloc[i]) <= config.loc_set.spread:\n","          mr_score += 1\n","\n","      else:\n","        if (res_df['long_tp'].iloc[i] - res_df['long_ep'].iloc[i] - tp_fee * \n","            res_df['long_ep'].iloc[i]) / (res_df['long_ep'].iloc[i] - res_df['long_out'].iloc[i] + out_fee * \n","                                          res_df['long_ep'].iloc[i]) >= config.loc_set.spread:\n","      # if (res_df['long_tp'].iloc[i] - res_df['long_ep'].iloc[i] - tp_fee * res_df['long_ep'].iloc[i]) / (res_df['long_ep'].iloc[i] - res_df['long_out'].iloc[i] + tp_fee * res_df['long_ep'].iloc[i]) >= config.loc_set.spread:\n","      # if (res_df['long_tp'].iloc[i] - res_df['long_ep'].iloc[i] - tp_fee * res_df['long_ep'].iloc[i]) / (res_df['long_ep'].iloc[i] - res_df['long_out'].iloc[i] + out_fee * res_df['long_ep'].iloc[i]) == config.loc_set.spread:\n","      # if (res_df['long_tp'].iloc[i] - res_df['long_ep'].iloc[i] - out_fee * res_df['long_ep'].iloc[i]) / (res_df['long_ep'].iloc[i] - res_df['long_out'].iloc[i] + out_fee * res_df['long_ep'].iloc[i]) >= config.loc_set.spread:\n","          mr_score += 1\n","    \n","\n","    # -------------- dtk -------------- #\n","    if config.loc_set.dt_k != \"None\":  \n","\n","      mr_const_cnt += 1\n","      # if res_df['dc_upper_%s' % config.loc_set.dtk_dc_itv].iloc[i] <= res_df['long_rtc_1'].iloc[i] + res_df['long_rtc_gap'].iloc[i] * config.loc_set.dt_k:          \n","          #     dtk_v1 & v2 platform    #\n","      if config.loc_set.dtk_dc_itv != \"None\":\n","        if res_df['dc_upper_%s' % config.loc_set.dtk_dc_itv].iloc[i] <= res_df['long_dtk_1'].iloc[i] + res_df['long_dtk_gap'].iloc[i] * config.loc_set.dt_k:  \n","          mr_score += 1  \n","\n","      else:\n","          #     dc_v2     #\n","        if res_df['dc_upper_v2'].iloc[i] <= res_df['long_dtk_1'].iloc[i] + res_df['long_dtk_gap'].iloc[i] * config.loc_set.dt_k:  # org\n","        # if res_df['dc_upper_v2'].iloc[i] >= res_df['long_dtk_1'].iloc[i] + res_df['long_dtk_gap'].iloc[i] * config.loc_set.dt_k:\n","\n","        # if res_df['dc_upper_v2'].iloc[i] <= res_df['long_dtk_1'].iloc[i] + res_df['long_dtk_gap'].iloc[i] * config.loc_set.dt_k and \\\n","        #   res_df['dc_lower_v2'].iloc[i] >= res_df['short_dtk_1'].iloc[i] - res_df['short_dtk_gap'].iloc[i] * config.loc_set.dt_k:\n","\n","          mr_score += 1  \n","\n","    \n","    # -------------- zone rejection  -------------- #\n","    if config.loc_set.bbz_itv != \"None\":\n","      mr_const_cnt += 1\n","\n","        #       by bb       #       \n","      # if res_df['close'].iloc[i] > res_df['bb_upper_%s' % config.loc_set.bbz_itv].iloc[i]:    # org\n","      # if res_df['close'].iloc[i] < res_df['bb_upper_%s' % config.loc_set.bbz_itv].iloc[i]:  # inv\n","      # if res_df['close'].iloc[i] < res_df['bb_lower_%s' % config.loc_set.bbz_itv].iloc[i]:\n","      # if res_df['close'].iloc[i] < res_df['bb_upper2_%s' % config.loc_set.bbz_itv].iloc[i]:\n","\n","        #       by zone_dtk       #\n","      if res_df['zone_dc_lower_v2'].iloc[i] > res_df['short_dtk_plot_1'].iloc[i] - res_df['short_dtk_plot_gap'].iloc[i] * config.loc_set.zone_dt_k:\n","      \n","        mr_score += 1                   \n","\n","\n","    # -------------- zoning -------------- #\n","    if config.tr_set.c_ep_gap != \"None\":\n","        #       by bb       # \n","      # if res_df['close'].iloc[i] < res_df['bb_upper_%s' % config.loc_set.bbz_itv].iloc[i]:\n","\n","        #       by zone_dtk       #\n","\n","          #         c_zone        #\n","      if res_df['zone_dc_lower_v2'].iloc[i] < res_df['short_dtk_plot_1'].iloc[i] - res_df['short_dtk_plot_gap'].iloc[i] * config.loc_set.zone_dt_k:\n","        \n","        if config.ep_set.static_ep:\n","          res_df['long_ep'].iloc[i] = res_df['long_ep2'].iloc[i]\n","        else:\n","          res_df['long_ep'] = res_df['long_ep2']\n","          \n","        if config.out_set.static_out:\n","          res_df['long_out'].iloc[i] = res_df['long_out_org'].iloc[i]\n","        else:\n","          res_df['long_out'] = res_df['long_out_org']\n","\n","        zone = 'c'\n","\n","        # mr_const_cnt += 1\n","        # dc_lb_period = 100\n","        # if np.sum((res_df['dc_upper_15m'] > res_df['dc_upper_15m'].shift(15)).iloc[i - dc_lb_period:i]) == 0:\n","        #   mr_score += 1\n","        \n","\n","          #         t_zone        #\n","      else:\n","\n","        if config.ep_set.static_ep:\n","          res_df['long_ep'].iloc[i] = res_df['long_ep_org'].iloc[i]\n","        else:\n","          res_df['long_ep'] = res_df['long_ep_org']\n","\n","        if config.out_set.static_out:\n","          res_df['long_out'].iloc[i] = res_df['long_out2'].iloc[i]\n","        else:\n","          res_df['long_out'] = res_df['long_out2']\n","\n","        zone = 't'\n","\n","\n","    if mr_const_cnt == mr_score:\n","        open_side = OrderSide.BUY\n","\n","    return res_df, open_side, zone"],"execution_count":10,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rLI8unIyroiC"},"source":["##### run"]},{"cell_type":"code","metadata":{"id":"TdAn2bHHBWMF"},"source":["# ------- tp / out fee calc ------- #\n","if config.ep_set.entry_type == 'MARKET':\n","  if config.tp_set.tp_type == 'LIMIT':\n","    tp_fee = config.init_set.market_fee + config.init_set.limit_fee\n","  else:\n","    tp_fee = config.init_set.market_fee + config.init_set.market_fee\n","  out_fee = config.init_set.market_fee + config.init_set.market_fee\n","else:\n","  if config.tp_set.tp_type == 'LIMIT':\n","    tp_fee = config.init_set.limit_fee + config.init_set.limit_fee\n","  else:\n","    tp_fee = config.init_set.limit_fee + config.init_set.market_fee\n","  out_fee = config.init_set.limit_fee + config.init_set.market_fee\n","  \n","\n","# ------- inversion set ------- #\n","inversion = 0\n","fdist_thresh = 1\n","\n","show_plot = 1\n","title_position = (0.30, 1)\n","\n","for key in ftr_list:\n","\n","  if config.init_set.symbol in key:\n","    pass\n","  else:\n","    continue\n","\n","  # break\n","\n","  res_df = pd.read_feather(os.path.join(save_path, dir_path, \"concat\", key), columns=None, use_threads=True).set_index(\"index\")#.loc[pd.to_datetime(\"2021-07-10 04:59:59.999000\"):]\n","  print(key, \"loaded !\")\n","  \n","  # print(\"res_df.columns :\", res_df.columns)  \n","  # print(res_df.tail(100))\n","  # print(\"res_df.index[0] :\", res_df.index[0])\n","  # # print(\"intmin(res_df.index[0]) :\", intmin(res_df.index[0]))\n","  # break\n","\n","  # -------------------- additional indi. -------------------- #    \n","  np_timeidx = np.array(list(map(lambda x : intmin(x), res_df.index)))\n","  \n","  res_df = enlist_rtc(res_df, config)\n","\n","  itv_num_list = [1, 3, 5, 15]\n","\n","  itv_list = ['15m', '30m', '1h', '4h']\n","  # itv_list = ['3m', '5m', '15m', '30m', '1h', '4h']\n","\n","  # x_val_list = np.arange(0.083, -0.02, -0.01)\n","  # x_val_list = np.arange(0.9, 1.0, 0.01)\n","  # x_val_list = np.arange(-0.5, -0.7, -0.01)\n","  x_val_list = np.arange(0.225, 0.09, -0.01)\n","\n","  y_val_cols = [\"wr\", \"frq\", \"min_pr\", \"acc_pr\", \"sum_pr\", \"liqd\", \"tr\", \"dr\"]\n","  y_rev_val_cols = [\"wr\", \"min_pr\", \"acc_pr\", \"sum_pr\"]\n","\n","  survey_df = pd.DataFrame(index=x_val_list, columns=y_val_cols)\n","  short_survey_df = pd.DataFrame(index=x_val_list, columns=y_val_cols)\n","  long_survey_df = pd.DataFrame(index=x_val_list, columns=y_val_cols)\n","  rev_survey_df = pd.DataFrame(index=x_val_list, columns=y_rev_val_cols)\n","  rev_short_survey_df = pd.DataFrame(index=x_val_list, columns=y_rev_val_cols)\n","  rev_long_survey_df = pd.DataFrame(index=x_val_list, columns=y_rev_val_cols)\n","\n","  # for survey_i, just_loop in enumerate(range(1)):\n","  for survey_i, config.loc_set.dt_k in enumerate(x_val_list):\n","  # for survey_i, config.loc_set.dc_period in enumerate(x_val_list):\n","  # for survey_i, config.loc_set.ei_k in enumerate(x_val_list):    \n","  # for survey_i, config.loc_set.spread in enumerate(x_val_list): \n","  # for survey_i, config.loc_set.bbz_itv in enumerate(itv_list):\n","  # for survey_i, config.loc_set.open_shift in enumerate(x_val_list):\n","  # for survey_i, config.tr_set.ep_gap in enumerate(x_val_list): \n","  # for survey_i, config.tr_set.out_gap in enumerate(x_val_list): \n","  # for survey_i, config.tr_set.tp_gap in enumerate(x_val_list): \n","  # for survey_i, config.ep_set.tf_entry in enumerate(x_val_list):\n","  # for survey_i, config.ep_set.dr_error in enumerate(x_val_list): \n","  # for survey_i, config.lvrg_set.leverage in enumerate(x_val_list):\n","  # for survey_i, config.lvrg_set.target_pct in enumerate(x_val_list): \n","  # for survey_i, outg_dc_itv_num in enumerate(x_val_list): \n","  # for survey_i, exp_itv in enumerate(itv_list): \n","  # for survey_i, zone_dt_k in enumerate(x_val_list): \n","  # for survey_i, t_out_gap in enumerate(x_val_list): \n","  # for survey_i, zone_dc_period in enumerate(x_val_list): \n","  \n","    start_0 = time.time()\n","\n","    print(\"config.loc_set.exp_itv :\", config.loc_set.exp_itv)    \n","    print(\"config.loc_set.tpg_itv :\", config.loc_set.tpg_itv)    \n","    print(\"config.loc_set.outg_itv :\", config.loc_set.outg_itv)    \n","    print(\"config.loc_set.dtk_itv :\", config.loc_set.dtk_itv)    \n","    # print(\"dtk_dc_itv :\", dtk_dc_itv)    \n","    # print(\"config.loc_set.dtk_dc_itv_num :\", config.loc_set.dtk_dc_itv_num)        \n","    print(\"config.loc_set.dt_k :\", config.loc_set.dt_k)\n","    print(\"config.loc_set.ei_k :\", config.loc_set.ei_k)   \n","    print(\"config.loc_set.dc_period :\", config.loc_set.dc_period)    \n","    print(\"config.loc_set.use_dtk_line :\", config.loc_set.use_dtk_line)    \n","    print(\"config.loc_set.bbz_itv :\", config.loc_set.bbz_itv)    \n","    # print(\"config.loc_set.dtk_itv2 :\", config.loc_set.dtk_itv2)    \n","    \n","    # tp_lb_period = 100\n","    # res_df['low_lb'] = res_df['low'].rolling(tp_lb_period).min()\n","    # res_df['high_lb'] = res_df['high'].rolling(tp_lb_period).max()\n","    # config.tr_set.out_gap = config.tr_set.tp_gap / config.loc_set.spread\n","         \n","    print(\"config.loc_set.spread :\", config.loc_set.spread)\n","    print(\"config.loc_set.spread_ep_gap :\", config.loc_set.spread_ep_gap)\n","    # print(\"config.ep_set.dr_error :\", config.ep_set.dr_error)\n","    print(\"config.ep_set.tf_entry :\", config.ep_set.tf_entry)\n","    print(\"config.ep_set.htf_entry :\", config.ep_set.htf_entry)\n","    print(\"config.tr_set.ep_gap :\", config.tr_set.ep_gap)\n","    print(\"config.tr_set.out_gap :\", config.tr_set.out_gap)\n","    print(\"config.tr_set.tp_gap :\", config.tr_set.tp_gap)\n","    \n","    print(\"config.loc_set.outg_dc_period :\", config.loc_set.outg_dc_period)\n","    print(\"config.loc_set.zone_dt_k :\", config.loc_set.zone_dt_k)\n","    print(\"config.loc_set.zone_dc_period :\", config.loc_set.zone_dc_period)\n","    # print(\"config.loc_set.open_shift :\", config.loc_set.open_shift)\n","    print(\"config.tr_set.c_ep_gap :\", config.tr_set.c_ep_gap)\n","    print(\"config.tr_set.t_out_gap :\", config.tr_set.t_out_gap)\n","\n","    print(\"config.lvrg_set.leverage :\", config.lvrg_set.leverage)\n","    print(\"config.lvrg_set.target_pct :\", config.lvrg_set.target_pct)\n","\n","    # res_df['sma_1m'] = res_df['close'].rolling(sma_period).mean()  \n","    # res_df = bb_level(res_df, '5m', bbg)\n","    \n","    res_df = enlist_tr(res_df, config, np_timeidx)\n","\n","    # --------------- set partial tp --------------- #\n","    short_tps = [res_df['short_tp']]\n","    long_tps = [res_df['long_tp']]\n","\n","    # short_tps = [short_tp2]\n","    # long_tps = [long_tp2]\n","\n","    # short_tps = [short_tp2, short_tp] # org\n","    # long_tps = [long_tp2, long_tp]\n","    \n","    # short_tps = [short_tp, short_tp2]\n","    # long_tps = [long_tp, long_tp2]\n","\n","\n","\n","    #       trading : 여기도 체결 결과에 대해 묘사함       #\n","    trade_list = []\n","    h_trade_list = []\n","    leverage_list = []\n","    fee_list = []\n","    short_fee_list = []\n","    long_fee_list = []\n","    open_list = []\n","    zone_list = []\n","    side_list = []\n","\n","    tp_ratio_list = []\n","    short_tp_ratio_list = []\n","    long_tp_ratio_list = []\n","\n","    dr_list = []\n","    short_dr_list = []\n","    long_dr_list = []\n","\n","    liqd_list = []\n","    short_liqd_list = []\n","    long_liqd_list = []\n","\n","    nontp_liqd_list = []\n","    nontp_short_liqd_list = []\n","    nontp_long_liqd_list = []\n","\n","    nontp_pr_list = []\n","    nontp_short_pr_list = []\n","    nontp_long_pr_list = []\n","\n","    nontp_short_indexs = []\n","    nontp_long_indexs = []\n","\n","    nontp_short_ep_list = []\n","    nontp_long_ep_list = []\n","\n","    pr_list = []\n","    long_list = []\n","    short_list = []\n","\n","    h_pr_list = []\n","    h_long_list = []\n","    h_short_list = []\n","\n","    ep_tp_list = []\n","    h_ep_tp_list = []\n","    tp_state_list = []\n","\n","    i = 0\n","    while 1:\n","    # for i in range(len(res_df)):  \n","    \n","      # ------- fee init ------- #\n","      if config.ep_set.entry_type == 'LIMIT':\n","        fee = config.init_set.limit_fee\n","      else:\n","        fee = config.init_set.market_fee\n","\n","\n","      if res_df['entry'][i] == config.ep_set.short_entry_score: \n","\n","        # print(\"i in short :\", i)\n","\n","        initial_i = i\n","\n","        if config.out_set.static_out:\n","          p_i = initial_i\n","        else:\n","          p_i = i\n","\n","\n","        res_df, open_side_str, zone = short_ep_loc(res_df, config, i)\n","\n","\n","        # -------------- mr_score summation -------------- #\n","        if open_side_str is not None:          \n","          pass\n","\n","        else:\n","          i += 1\n","          if i >= len(res_df):\n","            break\n","          continue\n","\n","\n","        ep_j = initial_i # dynamic ep 를 위한 var.\n","\n","        # -------------- limit waiting : limit_out -------------- #\n","\n","        if config.ep_set.entry_type == \"LIMIT\":\n","\n","          entry_done = 0\n","          entry_open = 0\n","          prev_sar = None\n","\n","          # for e_j in range(i, len(res_df)): # entry_signal 이 open 기준 (해당 bar 에서 체결 가능함)\n","          if i + 1 >= len(res_df):  # i should be checked if e_j starts from i+1\n","            break\n","          for e_j in range(i + 1, len(res_df)): # entry signal이 close 기준 일 경우\n","        \n","            if not config.ep_set.static_ep:\n","              ep_j = e_j\n","\n","            if config.tp_set.static_tp:\n","              # if config.ep_set.tpout_onexec:\n","              #   tp_j = e_j\n","              # else:\n","                tp_j = initial_i\n","            else:\n","              tp_j = e_j  \n","\n","            #             1. ep 설정 \n","            # -------------- np.inf ep -------------- #\n","            # if short_ep.iloc[initial_i] == np.inf:\n","            #   break\n","\n","\n","            #             1. check ep_out      #\n","            if config.loc_set.ei_k != \"None\":\n","              if res_df['low'].iloc[e_j] <= res_df['h_short_rtc_1'].iloc[tp_j] - res_df['h_short_rtc_gap'].iloc[tp_j] * config.loc_set.ei_k:\n","              # if res_df['low'].iloc[e_j] <= res_df['short_tp'].iloc[tp_j]: # ep_out : tp_done\n","              # if np_timeidx[e_j] % config.ep_set.tf_entry == config.ep_set.tf_entry - 1:\n","                break\n","\n","            #             2. check ep_in       #\n","            if res_df['high'].iloc[e_j] >= res_df['short_ep'].iloc[ep_j]:\n","              entry_done = 1\n","              # print(\"res_df['high'].iloc[e_j] :\", res_df['high'].iloc[e_j])\n","              # print(\"e_j :\", e_j)\n","\n","              #     이미, e_j open 이 ep 보다 높은 경우, entry[ep_j] => -2 로 변경   #\n","              if res_df['open'].iloc[e_j] >= res_df['short_ep'].iloc[ep_j]:\n","                entry_open = 1\n","\n","              break\n","\n","\n","          i = e_j\n","          # print(\"i = e_j :\", i)\n","\n","          if entry_done:      \n","            pass\n","\n","          else:\n","            i += 1\n","            if i >= len(res_df):\n","              break\n","            continue\n","\n","        # ----------------- end wait ----------------- #\n","\n","        # if e_j - initial_i >= 200:\n","        #   print(\"e_j, initial_i :\", e_j, initial_i)\n","        # print(\"e_j - initial_i :\", e_j - initial_i)\n","        # print()\n","\n","        open_list.append(initial_i)\n","        zone_list.append(zone)\n","        side_list.append('s')\n","        \n","        if config.ep_set.entry_type is 'MARKET':\n","          try:\n","            ep_list = [res_df['close'].iloc[e_j]]\n","          except Exception as e:\n","            # print('error in ep_list (initial) :', e)\n","            ep_list = [res_df['close'].iloc[ep_j]]\n","\n","        else:          \n","          if not entry_open:\n","            ep_list = [res_df['short_ep'].iloc[ep_j]]\n","          \n","          #     Todo    #\n","          #      1. entry_score version 으로 재정의해야함\n","          #      2. below phase exists for open_price entry\n","          else:\n","            #   e_j 가 있는 경우, \n","            try:\n","              ep_list = [res_df['open'].iloc[e_j]]\n","            except Exception as e:\n","              ep_list = [res_df['open'].iloc[ep_j]]\n","\n","        if not config.lvrg_set.static_lvrg:\n","          config.lvrg_set.leverage = config.lvrg_set.target_pct / (res_df['short_out'].iloc[ep_j] / res_df['short_ep'].iloc[ep_j] - 1 - (fee + config.init_set.market_fee))\n","          # config.lvrg_set.leverage = config.lvrg_set.target_pct / (res_df['short_out'].iloc[ep_j] / res_df['short_ep_org'].iloc[ep_j] - 1 - (fee + config.init_set.market_fee))\n","\n","          # config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(res_df['short_ep'].iloc[ep_j] / res_df['short_out'].iloc[ep_j] - 1 - (fee + config.init_set.market_fee))\n","          # config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(res_df['short_ep_org'].iloc[ep_j] / res_df['short_out'].iloc[ep_j] - 1 - (fee + config.init_set.market_fee))\n","          \n","          if not config.lvrg_set.allow_float:\n","            config.lvrg_set.leverage = int(config.lvrg_set.leverage)\n","\n","          # -------------- leverage rejection -------------- #\n","          if config.lvrg_set.leverage < 1 and config.lvrg_set.lvrg_rejection:\n","            open_list.pop()\n","            zone_list.pop()\n","            side_list.pop()\n","            i += 1\n","            if i >= len(res_df):\n","              break\n","            continue\n","\n","          config.lvrg_set.leverage = max(config.lvrg_set.leverage, 1)\n","          leverage_list.append(config.lvrg_set.leverage)\n","        \n","        config.lvrg_set.leverage = min(50, config.lvrg_set.leverage)\n","\n","\n","        try:\n","          ep_idx_list = [e_j]\n","        except Exception as e:\n","          # print('error in ep_idx_list :', e)        \n","          ep_idx_list = [ep_j]\n","\n","        tp_list = []\n","        tp_idx_list = []\n","\n","        partial_tp_cnt = 0\n","        hedge_cnt = 1\n","\n","        h_ep, h_tp = None, None\n","        h_i, h_j = None, None\n","        \n","        trade_done = False\n","        out = False\n","        # config.out_set.retouch\n","\n","        #     Todo    #\n","        #      1. future_work : 상단의 retouch 와 겹침 \n","        config.out_set.retouch = False\n","        \n","\n","        if i == len(res_df) - 1: # if j start from i + 1 \n","          open_list.pop()       \n","          zone_list.pop()       \n","          side_list.pop()       \n","        for j in range(i + 1, len(res_df)):\n","\n","        # for j in range(i, len(res_df)):\n","\n","          if config.tp_set.static_tp:\n","            if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","              tp_j = e_j\n","            else:\n","              tp_j = initial_i\n","          else:\n","            tp_j = j\n","\n","          if config.out_set.static_out:\n","            if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","              out_j = e_j\n","            else:           \n","              out_j = initial_i\n","          else:\n","            out_j = j\n","\n","\n","          # -------------- sub ep -------------- #\n","          # if res_df['high'].iloc[j - 1] <= res_df['sar2'].iloc[j - 1] and res_df['high'].iloc[j] > res_df['sar2'].iloc[j]:\n","            \n","          #   sub_ep = res_df['sar2'].iloc[j - 1]\n","\n","          #   if sub_ep < ep_list[-1]:\n","          #     ep_list.append(sub_ep)\n","          #     ep_idx_list.append(j)\n","\n","          \n","          # -------------- hedge only once -------------- #\n","          #             일단, h_quantity 는 초기 진입과 동일하게 설정         #\n","          # if res_df['high'].iloc[j] >= res_df['minor_ST2_Up'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] >= res_df['minor_ST2_Up'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] >= res_df['minor_ST3_Up'].iloc[j] and hedge_cnt == 1:\n","\n","          #   h_ep = res_df['close'].iloc[j]\n","          #   hedge_cnt -= 1\n","          #   h_i = j\n","\n","\n","          # -------------- ultimate limit tp -------------- #\n","          if not config.tp_set.non_tp:\n","\n","            #               1. by price line             #\n","            if config.tp_set.tp_type != 'MARKET':\n","\n","              for s_i, short_tp_ in enumerate(short_tps):\n","\n","                if res_df['low'].iloc[j] <= short_tp_.iloc[tp_j] and partial_tp_cnt == s_i: # we use static tp now\n","                # if res_df['low'].iloc[j] <= short_tp_.iloc[j]:\n","                # if res_df['low'].iloc[j] <= short_tp_.iloc[j] <= res_df['high'].iloc[j]: --> 이건 잘못되었음\n","\n","                  if s_i == len(short_tps) - 1:\n","                    trade_done = 1\n","                  \n","                  partial_tp_cnt += 1\n","\n","                  #         dynamic tp        #\n","                  # if 0:\n","                  if short_tp_.iloc[j] != short_tp_.iloc[j - 1] and not config.tp_set.static_tp:\n","\n","                    #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","                    # if res_df['open'].iloc[j] < short_tp_.iloc[initial_i]:\n","                    if res_df['open'].iloc[j] < short_tp_.iloc[j]:\n","\n","                      # tp = short_tp_.iloc[initial_i]\n","                      tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"d-short_open\")\n","\n","                    #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","                    else:\n","\n","                      # tp = short_tp_.iloc[initial_i]\n","                      tp = short_tp_.iloc[j]\n","                      # tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"d-short_tp\")\n","\n","                  #         static tp         #\n","                  else:\n","                    \n","                    #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","                    #   non_inversion 의 경우, short_tp 가 가능함   #              \n","\n","                    # if res_df['open'].iloc[j] < short_tp_.iloc[initial_i]:\n","                    if res_df['open'].iloc[j] < short_tp_.iloc[tp_j]:\n","\n","                      # tp = short_tp_.iloc[initial_i]\n","                      tp = short_tp_.iloc[tp_j]\n","\n","                      # tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"s-short_tp\")\n","\n","                    #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","                    else:\n","\n","                      # tp = short_tp_.iloc[initial_i]\n","                      tp = short_tp_.iloc[tp_j]\n","\n","                      # tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"s-short_tp\")   \n","\n","                  tp_list.append(tp)     \n","                  tp_idx_list.append(j)\n","                  fee += config.init_set.limit_fee\n","\n","\n","            #           2. by signal        #\n","            else:\n","\n","\n","              # -------------- sar tp -------------- #\n","              # if (res_df['high'].iloc[j] >= res_df['sar2'].iloc[j]) & \\\n","              #   (res_df['high'].iloc[j - 1] < res_df['sar2'].iloc[j - 1]) & \\\n","              #   (res_df['high'].iloc[j - 2] < res_df['sar2'].iloc[j - 2]):\n","\n","              #       inversion     #\n","              # if (res_df['low'].iloc[j] <= res_df['sar2'].iloc[j]) & \\\n","              #   (res_df['low'].iloc[j - 1] > res_df['sar2'].iloc[j - 1]) & \\\n","              #   (res_df['low'].iloc[j - 2] > res_df['sar2'].iloc[j - 2]):\n","              \n","              # ----------- st short ----------- #\n","              # if res_df['close'].iloc[j] <= res_df['short_tp'].iloc[tp_j]:\n","              \n","              # -------------- sar pb tp -------------- #\n","              # if res_df['low'].iloc[j] <= res_df['short_tp'].iloc[initial_i]:\n","\n","              # -------------- st tp -------------- #\n","              # if res_df['close'].iloc[j] > res_df['middle_line'].iloc[j]:       \n","\n","              # -------------- fisher tp -------------- #            \n","              # if entry[j] == 1:\n","\n","              \n","              # -------------- timestamp -------------- #\n","              if np_timeidx[j] % config.ep_set.tf_entry == config.ep_set.tf_entry - 1:                  \n","                \n","                tp = res_df['close'].iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                trade_done = 1\n","\n","                if trade_done:\n","                  tp_state_list.append(\"short close tp\")\n","\n","                tp_list.append(tp) \n","                tp_idx_list.append(j)\n","                fee += config.init_set.market_fee\n","\n","\n","                  \n","          # -------------- out -------------- #\n","          if not trade_done and config.out_set.use_out and j != len(res_df) - 1:\n","\n","            # -------------- macd -------------- #\n","            # if res_df['macd_hist3'].iloc[j] > 0:  #  macd out\n","            # if res_df['macd_hist3'].iloc[i] < 0 and res_df['macd_hist3'].iloc[j] > 0:\n","\n","            # -------------- st config.out_set.retouch -------------- #\n","            # out = 1 상태면 동일 tick 에서 config.out_set.retouch 를 조사할 거기 때문에, 먼저 검사함\n","            # 그리고, out 기준이 close 라 이게 맞음 \n","            # close 가 short_out 보다 올라가있는 상태일테니 low 를 조사하는게 맞음           \n","            # if out and res_df['low'].iloc[j] <= short_out.iloc[out_j]:\n","            #   config.out_set.retouch = 1\n","\n","            \n","             # ------- 일정시간 이상, dynamic_out 적용 ------ #\n","            try:\n","              if j - out_idx >= config.out_set.retouch_out_period:\n","                static_short_out = res_df['short_out'].iloc[j]\n","            \n","            except Exception as e:\n","              pass\n","\n","              # ------- static out ------ #\n","            try:\n","              if out and res_df['low'].iloc[j] <= static_short_out:\n","                config.out_set.retouch = 1\n","            except Exception as e:\n","              pass\n","\n","            \n","              # ------- config.out_set.retouch out ------ #\n","            # if out and res_df['low'].iloc[j] <= short_out2.iloc[out_j]:\n","            #   config.out_set.retouch = 1\n","\n","\n","            # -------------- st -------------- #\n","            # if res_df['close'].iloc[j] > res_df['middle_line'].iloc[j]:    \n","            # if res_df['close'].iloc[j] > res_df['minor_ST3_Up'].iloc[j]:\n","            # if res_df['close'].iloc[j] > upper_middle.iloc[j]:\n","            # if res_df['close'].iloc[j] > res_df['minor_ST1_Up'].iloc[j]:\n","            if out == 0:              \n","              if config.out_set.hl_out:\n","                if res_df['high'].iloc[j] >= res_df['short_out'].iloc[out_j]: # check out only once\n","                  out = 1\n","\n","              else:\n","                if res_df['close'].iloc[j] >= res_df['short_out'].iloc[out_j]: # check out only once\n","                  out = 1\n","\n","              # out_idx = j\n","              # static_short_out = short_out.iloc[out_j]\n","              # if config.out_set.second_out:              \n","                # static_short_out = short_out.iloc[out_j] + res_df['st_gap'].iloc[out_j] * config.out_set.second_out_gap\n","            \n","            # if out == 0 and res_df['high'].iloc[j] >= short_out.iloc[out_j]: # check out only once\n","            #   out = 1\n","             \n","\n","            # -------------- sma -------------- #\n","            # if res_df['close'].iloc[j] > res_df[sma].iloc[j]:\n","\n","            # -------------- sar -------------- #\n","            # if res_df['close'].iloc[j] > res_df['minor_ST3_Up'].iloc[j] \\\n","            #   or res_df['sar2'].iloc[j] <= res_df['high'].iloc[j]:\n","            # if res_df['close'].iloc[j] > short_out.iloc[initial_i]: # or \\\n","            #   out = 1\n","              # res_df['sar2_uptrend'].iloc[j] == 1: # or \\\n","\n","            # if res_df['sar2_uptrend'].iloc[j] == 1:\n","\n","            #   if prev_sar is None:\n","            #     prev_sar = res_df['sar2'].iloc[j - 1]\n","              \n","            #   if res_df['close'].iloc[j] > prev_sar:\n","            #     out = 1\n","\n","            # else:\n","            #   if res_df['close'].iloc[j] > res_df['sar2'].iloc[j]:\n","            #     out = 1\n","              \n","            # -------------- hl -------------- #\n","            # if res_df['close'].iloc[j] > short_out.iloc[tp_j]:\n","            \n","            # -------------- stoch -------------- #\n","            # if res_df['stoch'].iloc[j - 2] >= res_df['stoch'].iloc[j - 1] and \\\n","            #   res_df['stoch'].iloc[j - 1] < res_df['stoch'].iloc[j] and \\\n","            #   res_df['stoch'].iloc[j - 1] <= stoch_lower:\n","            #   out = 1\n","\n","            # config.out_set.retouch 1 경우, config.out_set.retouch 조건도 있어야함\n","            if out:\n","              if config.out_set.retouch:\n","                if config.out_set.retouch:\n","                  pass\n","                else:\n","                    continue\n","\n","              else:\n","                pass\n","\n","              if config.out_set.price_restoration:\n","                tp = res_df['short_out'].iloc[out_j]\n","                if config.out_set.second_out:\n","                  tp = res_df['short_out2'].iloc[out_j]\n","                \n","                # if res_df['close'].iloc[j] > tp: # 이 경우를 protect 하는건 insane 임\n","                #   tp = res_df['close'].iloc[j]\n","\n","              else:\n","                \n","                if res_df['open'].iloc[j] >= res_df['short_out'].iloc[out_j]:\n","                  tp = res_df['open'].iloc[j]\n","                else:\n","                  if config.out_set.hl_out:\n","                    tp = res_df['short_out'].iloc[out_j]\n","                  else:\n","                    tp = res_df['close'].iloc[j]\n","                \n","                # if not config.out_set.static_out:\n","                #   if res_df['open'].iloc[j] >= res_df['short_out'].iloc[out_j]: # close 기준이라 이런 조건을 못씀, 차라리 j 를 i 부터 시작\n","                #     tp = res_df['open'].iloc[j]\n","                #   else:\n","                #     tp = res_df['close'].iloc[j]\n","\n","                # else:\n","                #   tp = res_df['close'].iloc[j]\n","\n","              \n","              if config.out_set.retouch: # out 과 open 비교\n","                if config.out_set.second_out:\n","                  if res_df['open'].iloc[j] <= res_df['short_out2'].iloc[out_j]:\n","                    tp = res_df['open'].iloc[j]\n","                else:\n","                  if res_df['open'].iloc[j] <= res_df['short_out'].iloc[out_j]:\n","                    tp = res_df['open'].iloc[j]\n","\n","                try: # static_short_out 인 경우, open 도 고려한 tp set\n","                  if res_df['open'].iloc[j] <= static_short_out:\n","                    tp = res_df['open'].iloc[j]\n","                  else:\n","                    tp = static_short_out\n","                except Exception as e:\n","                  pass\n","\n","              trade_done = 1\n","              tp_state_list.append(\"short close_out\")\n","            \n","\n","              tp_list.append(tp) \n","              tp_idx_list.append(j)\n","              fee += config.init_set.market_fee\n","\n","\n","          # -------------- non tp -------------- #\n","          if j == len(res_df) - 1:\n","            trade_done = 1\n","            tp = res_df['close'].iloc[j]\n","            tp_list.append(tp) \n","            tp_idx_list.append(j)\n","            fee += config.init_set.market_fee\n","          \n","\n","\n","          # -------------- append trade data -------------- #\n","          if trade_done:\n","\n","            # --------------- tp_ratio info --------------- #\n","            #         Todo        #\n","            #          short_out 에 대한 정보는 존재함,\n","            #          short_tp 에 대한 정보는 존재함,\n","            #       => initial_i 기준으로 ,dynamic | static set 을 tp 와 out 에 각각 적용\n","            #          config.lvrg_set.leverage 는 initial_i 기준으로 적용되니까\n","            #          적용된 tp & out 으로 abs((tp - ep) / (ep - out)) 계산\n","            try:\n","              done_tp = res_df['short_tp'].iloc[ep_j]\n","              done_out = res_df['short_out'].iloc[ep_j]\n","\n","              if done_out <= ep_list[0]: # loss > 1\n","                dr = np.nan\n","                tp_ratio = np.nan\n","              else:                \n","                dr = ((ep_list[0] - done_tp) / (done_out - ep_list[0]))\n","                tp_ratio = ((ep_list[0] - done_tp - tp_fee * ep_list[0]) / (done_out - ep_list[0] + out_fee * ep_list[0]))\n","\n","            except Exception as e:\n","              # pass    \n","              tp_ratio = np.nan  \n","            \n","            tp_ratio_list.append(tp_ratio)\n","            short_tp_ratio_list.append(tp_ratio)     \n","            dr_list.append(dr)\n","            short_dr_list.append(dr)   \n","\n","\n","            # -------------------- partial tp -------------------- #\n","            #        1. len(tp_list) 에 대응하는 qty_list 를 만들어야함    #\n","            #        2. temp_pr_list 를 만들어 총합 + 1 을 pr_list 에 저장      #\n","            #        2-1. temp_pr = sum((ep / tp_list[i] - fee - 1) * qty_list[i])   #\n","            #        3. temp_pr_list 의 첫 tp 에는 r_qty 를 할당함        #\n","            qty_list = []\n","            temp_pr_list = []\n","            r_qty = 1\n","            for q_i in range(len(tp_list) - 1, -1, -1):\n","\n","              if len(tp_list) == 1:\n","                temp_qty = r_qty\n","              else:\n","                if q_i !=0:\n","                  temp_qty = r_qty / config.tp_set.partial_qty_divider\n","                else:\n","                  temp_qty = r_qty\n","\n","              temp_pr = (ep_list[0] / tp_list[q_i] - fee - 1) * temp_qty * config.lvrg_set.leverage\n","              # temp_pr = (ep_list[0] / tp_list[q_i] - fee - 1) * temp_qty\n","              r_qty -= temp_qty\n","\n","              temp_pr_list.append(temp_pr)\n","              qty_list.append(temp_qty)\n","\n","            # if len(temp_pr_list) == 1:\n","            #   print(\"qty_list :\", qty_list)\n","            #   print(\"temp_pr_list :\", temp_pr_list)\n","\n","            temp_pr = sum(temp_pr_list) + 1\n","\n","            # -------------------- sub ep -> pr calc -------------------- #\n","            if len(ep_list) > 1:\n","            \n","              p_ep_pr = []\n","              for sub_ep_ in ep_list:\n","                sub_pr = (sub_ep_ / tp - fee - 1) * config.lvrg_set.leverage\n","                p_ep_pr.append(sub_pr)\n","\n","              temp_pr = sum(p_ep_pr) + 1\n","\n","              print(\"temp_pr :\", temp_pr)\n","\n","            # ------------ hedge + non_hedge pr summation ------------ #\n","            #         hedge pr direction is opposite to the origin       #\n","            hedge_pr = 1\n","            if hedge_cnt == 0:\n","\n","              #       hedge tp      #\n","              h_tp = res_df['close'].iloc[j]\n","              hedge_pr = (h_tp / h_ep - fee - 1) * config.lvrg_set.leverage  # hedge long\n","              temp_pr += hedge_pr\n","              h_j = j\n","\n","            \n","            hh = max(res_df['high'].iloc[i:j + 1])\n","            short_liq = (ep_list[0] / hh - fee - 1) * config.lvrg_set.leverage + 1\n","\n","            if j != len(res_df) - 1:\n","\n","              # ep_tp_list.append((ep, tp_list))  \n","              ep_tp_list.append((ep_list, tp_list))  \n","              # trade_list.append([initial_i, i, j])\n","              trade_list.append((ep_idx_list, tp_idx_list))\n","\n","              liqd_list.append(short_liq)\n","              short_liqd_list.append(short_liq)\n","\n","              h_ep_tp_list.append((h_ep, h_tp))      # hedge 도 ep_tp_list 처럼 변경해주어야하는데 아직 안건드림, 딱히 사용할 일이 없어보여   \n","              h_trade_list.append([initial_i, h_i, h_j])                \n","\n","              pr_list.append(temp_pr)\n","              fee_list.append(fee)\n","              short_list.append(temp_pr)\n","              short_fee_list.append(fee)\n","\n","              h_pr_list.append(hedge_pr)\n","              h_short_list.append(hedge_pr)\n","\n","              i = j\n","              break\n","\n","            else:\n","\n","              # ep_tp_list.append((ep_list, tp_list))\n","              # trade_list.append((ep_idx_list, tp_idx_list))\n","              # plot_check 때문에, pr_list 까지 하게되면 acc_pr eval 이 꼬이게댐\n","          \n","              # pr_list 를 넣지 않을거니까, open_list 에서 해당 idx 는 pop\n","              open_list.pop()\n","              zone_list.pop()\n","              side_list.pop()\n","              \n","              #         tp 미체결 survey        #\n","              nontp_liqd_list.append(short_liq)\n","              nontp_short_liqd_list.append(short_liq)\n","              nontp_short_indexs.append(i)\n","              nontp_short_ep_list.append(ep_list[0])\n","\n","              nontp_short_pr = (ep_list[0] / tp - fee - 1) * config.lvrg_set.leverage + 1\n","              nontp_pr_list.append(nontp_short_pr)\n","              nontp_short_pr_list.append(nontp_short_pr)\n","\n","\n","      #                  long  phase                #\n","      elif res_df['entry'][i] == -config.ep_set.short_entry_score: \n","      \n","\n","        initial_i = i\n","\n","        if config.out_set.static_out:\n","          p_i = initial_i\n","        else:\n","          p_i = i\n","\n","        \n","        res_df, open_side_str, zone = long_ep_loc(res_df, config, i)\n","\n","\n","        # -------------- mr_score summation -------------- #\n","        if open_side_str is not None:        \n","          pass\n","        \n","        else:\n","          i += 1\n","          if i >= len(res_df):\n","            break\n","          continue\n","\n","        # print(\"i after mrcheck :\", i)\n","\n","\n","        ep_j = initial_i\n","      \n","        # -------------- limit waiting const. -------------- #      \n","        if config.ep_set.entry_type == \"LIMIT\":\n","\n","          entry_done = 0\n","          entry_open = 0\n","          prev_sar = None\n","\n","          # for e_j in range(i, len(res_df)):   \n","\n","          if i + 1 >= len(res_df):  # i should be checked if e_j starts from i+1\n","            break\n","          for e_j in range(i + 1, len(res_df)):  # entry 가 close 기준일 경우 사용 (open 기준일 경우 i 부터 시작해도 무방함)\n","            \n","            if not config.ep_set.static_ep:\n","              ep_j = e_j  \n","            \n","            if config.tp_set.static_tp:\n","              # if config.ep_set.tpout_onexec:\n","              #   tp_j = e_j\n","              # else:\n","                tp_j = initial_i\n","            else:\n","              tp_j = e_j  \n","\n","            \n","            #          np.inf ep         #\n","            # if long_ep.iloc[initial_i] == np.inf:\n","            #   break\n","            \n","            #          1. check ep_out          #\n","            if config.loc_set.ei_k != \"None\":\n","              if res_df['high'].iloc[e_j] >= res_df['h_long_rtc_1'].iloc[tp_j] + res_df['h_long_rtc_gap'].iloc[tp_j] * config.loc_set.ei_k:\n","              # if res_df['high'].iloc[e_j] >= res_df['long_tp'].iloc[tp_j]:                \n","              # if np_timeidx[e_j] % config.ep_set.tf_entry == config.ep_set.tf_entry - 1:\n","                break\n","\n","            #          2. check ep_in          #\n","            if res_df['low'].iloc[e_j] <= res_df['long_ep'].iloc[ep_j]:\n","              entry_done = 1\n","              # print(\"e_j :\", e_j)\n","              \n","              #     이미, e_j open 이 ep 보다 낮은 경우, entry[initial_i] => -2 로 변경   #\n","              if res_df['open'].iloc[e_j] <= res_df['long_ep'].iloc[ep_j]:\n","                entry_open = 1\n","\n","              break\n","\n","\n","          i = e_j\n","          # print(\"i = e_j :\", i)\n","\n","          if entry_done:      \n","            pass\n","            # print(\"i, entry_done :\", i, entry_done)\n","\n","          else:\n","            i += 1\n","            if i >= len(res_df):\n","              # print(\"i :\", i)\n","              break\n","\n","            # print(\"i in continue :\", i)          \n","            continue\n","\n","\n","        # ---------------- end wait ---------------- #\n","        # if e_j - initial_i >= 200:\n","        #   print(\"e_j, initial_i :\", e_j, initial_i)\n","        \n","        # print(i)\n","\n","        open_list.append(initial_i)\n","        zone_list.append(zone)\n","        side_list.append('l')\n","\n","        if config.ep_set.entry_type is 'MARKET':\n","          try:\n","            ep_list = [res_df['close'].iloc[e_j]]\n","          except Exception as e:\n","            # print('error in ep_list (initial) :', e)\n","            ep_list = [res_df['close'].iloc[ep_j]]\n","        else:\n","          if not entry_open:\n","            ep_list = [res_df['long_ep'].iloc[ep_j]]\n","          else:\n","            try:\n","              ep_list = [res_df['open'].iloc[e_j]]\n","            except Exception as e:\n","              ep_list = [res_df['open'].iloc[ep_j]]\n","\n","        if not config.lvrg_set.static_lvrg:\n","          config.lvrg_set.leverage = config.lvrg_set.target_pct / (res_df['long_ep'].iloc[ep_j] / res_df['long_out'].iloc[ep_j] - 1 - (fee + config.init_set.market_fee))\n","          # config.lvrg_set.leverage = config.lvrg_set.target_pct / (res_df['long_ep_org'].iloc[ep_j] / res_df['long_out'].iloc[ep_j] - 1 - (fee + config.init_set.market_fee))\n","\n","          # config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(res_df['long_out'].iloc[ep_j] / res_df['long_ep'].iloc[ep_j] - 1 - (fee + config.init_set.market_fee))\n","          # config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(res_df['long_out'].iloc[ep_j] / res_df['long_ep_org'].iloc[ep_j] - 1 - (fee + config.init_set.market_fee))\n","          \n","          if not config.lvrg_set.allow_float:\n","            config.lvrg_set.leverage = int(config.lvrg_set.leverage)\n","\n","          # -------------- leverage rejection -------------- #\n","          if config.lvrg_set.leverage < 1 and config.lvrg_set.lvrg_rejection:\n","            open_list.pop()\n","            zone_list.pop()\n","            side_list.pop()\n","            i += 1\n","            if i >= len(res_df):\n","              break\n","            continue\n","\n","          config.lvrg_set.leverage = max(config.lvrg_set.leverage, 1)\n","          leverage_list.append(config.lvrg_set.leverage)\n","\n","        config.lvrg_set.leverage = min(50, config.lvrg_set.leverage)        \n","          \n","        try:\n","          ep_idx_list = [e_j]\n","        except Exception as e:\n","          # print('error in ep_idx_list :', e)\n","          ep_idx_list = [ep_j]\n","\n","        tp_list = []\n","        tp_idx_list = []\n","\n","        partial_tp_cnt = 0\n","        hedge_cnt = 1\n","\n","        h_ep, h_tp = None, None        \n","        h_i, h_j = None, None      \n","\n","        trade_done = False\n","        out = False          \n","        config.out_set.retouch = False\n","\n","\n","        if i == len(res_df) - 1: # if j start from i + 1 \n","          open_list.pop()\n","          zone_list.pop()\n","          side_list.pop()\n","\n","        for j in range(i + 1, len(res_df)):\n","\n","        # for j in range(i, len(res_df)):  \n","          \n","          if config.tp_set.static_tp:\n","            if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","              tp_j = e_j\n","            else:\n","              tp_j = initial_i\n","          else:\n","            tp_j = j\n","\n","          if config.out_set.static_out:\n","            if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","              out_j = e_j\n","            else:           \n","              out_j = initial_i\n","          else:\n","            out_j = j   \n","\n","          # -------------- hedge only once -------------- #\n","          #             일단, h_quantity 는 초기 진입과 동일하게 설정         #\n","          # if res_df['low'].iloc[j] <= res_df['minor_ST2_Down'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] <= res_df['minor_ST2_Down'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] <= res_df['minor_ST3_Down'].iloc[j] and hedge_cnt == 1:\n","\n","          #   h_ep = res_df['close'].iloc[j]\n","          #   hedge_cnt -= 1\n","          #   h_i = j\n","\n","          # -------------- sub ep -------------- #\n","          # if res_df['low'].iloc[j - 1] >= res_df['sar2'].iloc[j - 1] and res_df['low'].iloc[j] < res_df['sar2'].iloc[j]:\n","            \n","          #   sub_ep = res_df['sar2'].iloc[j - 1]\n","\n","          #   if sub_ep > ep_list[-1]:\n","          #     ep_list.append(sub_ep)\n","          #     ep_idx_list.append(j)\n","\n","\n","          # -------------- ultimate tp -------------- #\n","          if not config.tp_set.non_tp:\n","            #            1. by level          #\n","            if config.tp_set.tp_type != 'MARKET':\n","\n","              for l_i, long_tp_ in enumerate(long_tps):\n","\n","                if res_df['high'].iloc[j] >= long_tp_.iloc[tp_j] and partial_tp_cnt == l_i:\n","                # if res_df['high'].iloc[j] >= long_tp.iloc[j]:\n","\n","                  if l_i == len(long_tps) - 1:\n","                    trade_done = 1\n","\n","                  partial_tp_cnt += 1\n","\n","                  #         dynamic tp        #\n","                  # if 0:\n","                  if long_tp_.iloc[j] != long_tp_.iloc[j - 1] and not config.tp_set.static_tp:\n","\n","                    #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","                    # if res_df['open'].iloc[j] >= long_tp_.iloc[initial_i]:\n","                    if res_df['open'].iloc[j] >= long_tp_.iloc[j]:\n","\n","                      # tp = long_tp_.iloc[initial_i]\n","                      tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"d-long_open\")\n","\n","                    \n","                    #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","                    else:\n","                      \n","                      # tp = long_tp_.iloc[initial_i]\n","                      tp = long_tp_.iloc[j]\n","                      # tp = res_df['open'].iloc[j]\n","                      \n","                      if trade_done:\n","                        tp_state_list.append(\"d-long_tp\")\n","\n","                  #         static tp         #\n","                  else:\n","\n","                    #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","                    #   non_inversion 의 경우, short_tp 가 가능함   #\n","\n","                    if res_df['open'].iloc[j] >= long_tp_.iloc[tp_j]:\n","                    # if res_df['open'].iloc[j] >= long_tp_.iloc[initial_i]:\n","\n","                      # tp = long_tp_.iloc[initial_i]\n","                      tp = long_tp_.iloc[tp_j]\n","\n","                      # tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"s-long_tp\")\n","\n","                    \n","                    #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","                    else:\n","                      \n","                      # tp = long_tp_.iloc[initial_i]\n","                      tp = long_tp_.iloc[tp_j]\n","\n","                      # tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"s-long_tp\")         \n","                  \n","                  tp_list.append(tp)\n","                  tp_idx_list.append(j)\n","                  fee += config.init_set.limit_fee\n","\n","            #           2. by time        #\n","            else:\n","\n","              # -------------- sar tp -------------- #\n","              # if (res_df['low'].iloc[j] <= res_df['sar2'].iloc[j]) & \\\n","              #   (res_df['low'].iloc[j - 1] > res_df['sar2'].iloc[j - 1]) & \\\n","              #   (res_df['low'].iloc[j - 2] > res_df['sar2'].iloc[j - 2]):\n","              \n","              #       inversion     #\n","              # if (res_df['high'].iloc[j] >= res_df['sar2'].iloc[j]) & \\\n","              #   (res_df['high'].iloc[j - 1] < res_df['sar2'].iloc[j - 1]) & \\\n","              #   (res_df['high'].iloc[j - 2] < res_df['sar2'].iloc[j - 2]):\n","\n","\n","              # ----------- st long ----------- #\n","              # if res_df['close'].iloc[j] >= res_df['long_tp'].iloc[tp_j]:\n","\n","              # -------------- sar pb tp -------------- #\n","              # if res_df['high'].iloc[j] >= res_df['long_tp'].iloc[initial_i]:\n","\n","              # -------------- st tp -------------- #\n","              # if res_df['close'].iloc[j] < res_df['middle_line'].iloc[j]:\n","\n","              # -------------- fisher tp -------------- #\n","              # if entry[j] == -1:\n","              \n","              # -------------- timestamp -------------- #\n","              if np_timeidx[j] % config.ep_set.tf_entry == config.ep_set.tf_entry - 1:\n","                \n","                tp = res_df['close'].iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                trade_done = 1\n","\n","                if trade_done:\n","                  tp_state_list.append(\"long close tp\")\n","\n","                tp_list.append(tp) \n","                tp_idx_list.append(j)\n","                fee += config.init_set.market_fee\n","\n","\n","\n","          # -------------- out -------------- #\n","          if not trade_done and config.out_set.use_out and j != len(res_df) - 1:              \n","\n","            # -------------- macd -------------- #\n","            # if res_df['macd_hist3'].iloc[j] < 0:\n","            # # if res_df['macd_hist3'].iloc[i] > 0 and res_df['macd_hist3'].iloc[j] < 0:\n","\n","            # -------------- st config.out_set.retouch -------------- #\n","            # out = 1 상태면 동일 tick 에서 config.out_set.retouch 를 조사할 거기 때문에, 먼저 검사함\n","            # 그리고, out 기준이 close 라 이게 맞음 \n","            # close 가 long_out 보다 내려가있는 상태일테니 high 를 조사하는게 맞음           \n","            # if out and res_df['high'].iloc[j] >= long_out.iloc[out_j]:\n","            #   config.out_set.retouch = 1\n","\n","            \n","            # ------- 일정시간 이상, dynamic_out 적용 ------ #\n","            try:\n","              if j - out_idx >= config.out_set.retouch_out_period:\n","                static_long_out = res_df['long_out'].iloc[j]\n","            \n","            except Exception as e:\n","              pass\n","\n","              # ------- static out ------ #\n","            try:\n","              if out and res_df['high'].iloc[j] >= static_long_out:\n","                config.out_set.retouch = 1\n","            except Exception as e:\n","              pass\n","\n","              # ------- config.out_set.retouch out ------ #\n","            # if out and res_df['high'].iloc[j] >= long_out2.iloc[out_j]:\n","            #   config.out_set.retouch = 1\n","\n","\n","\n","            # -------------- st -------------- #\n","            # if res_df['close'].iloc[j] < res_df['middle_line'].iloc[j]:\n","            # if res_df['close'].iloc[j] < res_df['minor_ST3_Down'].iloc[j]:\n","            # if res_df['close'].iloc[j] < lower_middle.iloc[j]:\n","            # if res_df['close'].iloc[j] < res_df['minor_ST1_Down'].iloc[j]:\n","            if out == 0:\n","              if config.out_set.hl_out:\n","                if res_df['low'].iloc[j] <= res_df['long_out'].iloc[out_j]: # check out only once\n","                  out = 1\n","\n","              else:\n","                if res_df['close'].iloc[j] <= res_df['long_out'].iloc[out_j]: # check out only once\n","                  out = 1\n","\n","              # out_idx = j\n","              # static_long_out = long_out.iloc[out_j]\n","              # if config.out_set.second_out:\n","              # static_long_out = long_out.iloc[out_j] - res_df['st_gap'].iloc[out_j] * config.out_set.second_out_gap\n","\n","            # if out == 0 and res_df['low'].iloc[j] <= long_out.iloc[out_j]: # check out only once\n","            #   out = 1            \n","            \n","\n","\n","            # -------------- sma -------------- #\n","            # if res_df['close'].iloc[j] < res_df[sma].iloc[j]:\n","\n","            # -------------- sar -------------- #\n","            # if res_df['close'].iloc[j] < res_df['minor_ST3_Down'].iloc[j] \\\n","            #   or res_df['sar2'].iloc[j] >= res_df['low'].iloc[j]:\n","            # if res_df['close'].iloc[j] < long_out.iloc[initial_i]: # or \\\n","            #   #  res_df['close'].iloc[j] < res_df['sar2'].iloc[j]:\n","            #   #  res_df['sar2_uptrend'].iloc[j] == 0 or \\\n","            #   out = 1\n","            \n","            # if res_df['sar2_uptrend'].iloc[j] == 0:\n","\n","            #     if prev_sar is None:\n","            #       prev_sar = res_df['sar2'].iloc[j - 1]\n","                \n","            #     if res_df['close'].iloc[j] < prev_sar:\n","            #       out = 1\n","\n","            # else:\n","            #   if res_df['close'].iloc[j] < res_df['sar2'].iloc[j]:\n","            #     out = 1\n","\n","            # -------------- hl -------------- #\n","            # if res_df['close'].iloc[j] < long_out.iloc[tp_j]:\n","\n","            # -------------- stoch -------------- #\n","            # if res_df['stoch'].iloc[j - 2] <= res_df['stoch'].iloc[j - 1] and \\\n","            #   res_df['stoch'].iloc[j - 1] > res_df['stoch'].iloc[j] and \\\n","            #   res_df['stoch'].iloc[j - 1] >= stoch_upper:\n","            #   out = 1\n","\n","            # config.out_set.retouch 1 경우, config.out_set.retouch 조건도 있어야함\n","            if out:\n","              if config.out_set.retouch:\n","                if config.out_set.retouch:\n","                  pass\n","                else:\n","                    continue\n","\n","              else:\n","                pass\n","\n","              if config.out_set.price_restoration:\n","                tp = res_df['long_out'].iloc[out_j]\n","                if config.out_set.second_out:\n","                  tp = res_df['long_out2'].iloc[out_j]\n","\n","                # if res_df['close'].iloc[j] < tp: # 이 경우를 protect 하는건 insane 임\n","                # # if res_df['high'].iloc[j] < tp: # --> config.out_set.hl_out 사용시 이 조건은 valid 함\n","                #   tp = res_df['close'].iloc[j]\n","\n","              else:\n","\n","                if res_df['open'].iloc[j] <= res_df['long_out'].iloc[out_j]:\n","                  tp = res_df['open'].iloc[j]\n","                else:\n","                  if config.out_set.hl_out:\n","                    tp = res_df['long_out'].iloc[out_j]\n","                  else:\n","                    tp = res_df['close'].iloc[j]\n","\n","                # if not config.out_set.static_out:\n","                #   if res_df['open'].iloc[j] <= res_df['long_out'].iloc[out_j]: # dynamic close out 의 open 고려\n","                #     tp = res_df['open'].iloc[j]\n","                #   else:\n","                #     tp = res_df['close'].iloc[j]\n","\n","                # else:\n","                #   tp = res_df['close'].iloc[j]\n","\n","              if config.out_set.retouch: # out 과 open 비교\n","                if config.out_set.second_out:  # long_out = sell\n","                # config.out_set.second_out 은 기본적으로 limit 이라 이 구조가 가능함\n","                  if res_df['open'].iloc[j] >= res_df['long_out2'].iloc[out_j]: # dynamic_out 일 경우 고려해야함\n","                    tp = res_df['open'].iloc[j]\n","                else:\n","                  if res_df['open'].iloc[j] >= res_df['long_out'].iloc[out_j]: # dynamic_out 일 경우 고려해야함\n","                    tp = res_df['open'].iloc[j]\n","\n","                try:\n","                  if res_df['open'].iloc[j] >= static_long_out:\n","                    tp = res_df['open'].iloc[j]\n","                  else:\n","                    tp = static_long_out\n","                except Exception as e:\n","                  pass\n","\n","              # tp = res_df['open'].iloc[j]\n","              tp_state_list.append(\"long close_out\")\n","              trade_done = 1\n","\n","              tp_list.append(tp)\n","              tp_idx_list.append(j)\n","              fee += config.init_set.market_fee\n","\n","          \n","          # -------------- non tp -------------- #\n","          if j == len(res_df) - 1:\n","            trade_done = 1\n","            tp = res_df['close'].iloc[j]\n","            tp_list.append(tp) \n","            tp_idx_list.append(j)\n","            fee += config.init_set.market_fee\n","\n","\n","          if trade_done:\n","\n","            # --------------- tp_ratio info --------------- #\n","            try:\n","              done_tp = res_df['long_tp'].iloc[ep_j]\n","              done_out = res_df['long_out'].iloc[ep_j]\n","\n","              if done_out >= ep_list[0]: # loss >= 1\n","                tp_ratio = np.nan\n","                dr = np.nan\n","              else:\n","                tp_ratio = ((done_tp - ep_list[0] - tp_fee * ep_list[0]) / (ep_list[0] - done_out + out_fee * ep_list[0]))                \n","                dr = ((done_tp - ep_list[0]) / (ep_list[0] - done_out))                \n","\n","            except Exception as e:\n","              # pass \n","              tp_ratio = np.nan\n","            \n","            tp_ratio_list.append(tp_ratio)\n","            long_tp_ratio_list.append(tp_ratio)\n","            dr_list.append(dr)\n","            long_dr_list.append(dr)\n","\n","\n","            qty_list = []\n","            temp_pr_list = []\n","            r_qty = 1\n","            for q_i in range(len(tp_list) - 1, -1, -1):\n","\n","              if len(tp_list) == 1:\n","                temp_qty = r_qty\n","              else:\n","                if q_i !=0:\n","                  temp_qty = r_qty / config.tp_set.partial_qty_divider\n","                else:\n","                  temp_qty = r_qty\n","\n","              # temp_pr = (tp_list[q_i] / ep_list[0] - fee - 1) * temp_qty\n","              temp_pr = (tp_list[q_i] / ep_list[0] - fee - 1) * temp_qty * config.lvrg_set.leverage\n","              r_qty -= temp_qty\n","\n","              temp_pr_list.append(temp_pr)\n","\n","            temp_pr = sum(temp_pr_list) + 1\n","\n","            # -------------------- sub ep -> pr calc -------------------- #\n","            if len(ep_list) > 1:\n","            \n","              p_ep_pr = []\n","              for sub_ep_ in ep_list:\n","                sub_pr = (tp / sub_ep_ - fee - 1) * config.lvrg_set.leverage\n","                p_ep_pr.append(sub_pr)\n","\n","              temp_pr = sum(p_ep_pr) + 1\n","\n","              print(\"temp_pr :\", temp_pr)\n","\n","            # ------------ hedge + non_hedge pr summation ------------ #\n","            #         hedge pr direction is opposite to the origin       #\n","            hedge_pr = 1\n","            if hedge_cnt == 0:\n","\n","              #       hedge tp      #\n","              h_tp = res_df['close'].iloc[j]\n","              hedge_pr = (h_ep / h_tp - fee - 1) * config.lvrg_set.leverage  # hedge short\n","              temp_pr += hedge_pr\n","              h_j = j\n","\n","\n","            ll = min(res_df['low'].iloc[i:j + 1])\n","            long_liq = (ll / ep_list[0] - fee - 1) * config.lvrg_set.leverage + 1\n","\n","            if j != len(res_df) - 1:\n","\n","              ep_tp_list.append((ep_list, tp_list))\n","              trade_list.append((ep_idx_list, tp_idx_list))\n","\n","              liqd_list.append(long_liq)\n","              long_liqd_list.append(long_liq)\n","\n","              h_ep_tp_list.append((h_ep, h_tp))        \n","              h_trade_list.append([initial_i, h_i, h_j])                \n","\n","              pr_list.append(temp_pr)\n","              fee_list.append(fee)\n","              long_list.append(temp_pr)\n","              long_fee_list.append(fee)\n","\n","              h_pr_list.append(hedge_pr)\n","              h_long_list.append(hedge_pr)                    \n","\n","              i = j\n","              break\n","            \n","            else:\n","\n","              # ep_tp_list.append((ep_list, tp_list))\n","              # trade_list.append((ep_idx_list, tp_idx_list))\n","              \n","              # pr_list 를 넣지 않을거니까, open_list 에서 해당 idx 는 pop\n","              open_list.pop()\n","              zone_list.pop()\n","              side_list.pop()\n","          \n","              #         tp 미체결 survey        #\n","              nontp_liqd_list.append(long_liq)\n","              nontp_long_liqd_list.append(long_liq)\n","              nontp_long_indexs.append(i)\n","              nontp_long_ep_list.append(ep_list[0])\n","              \n","              nontp_long_pr = (tp / ep_list[0] - fee - 1) * config.lvrg_set.leverage + 1\n","              nontp_pr_list.append(nontp_long_pr)\n","              nontp_long_pr_list.append(nontp_long_pr)\n","\n","            if len(open_list) > len(trade_list):\n","              print('debug from index :', i)\n","              print(len(open_list), len(trade_list))\n","              print(\"len(res_df) :\", len(res_df))\n","              assert len(open_list) == len(trade_list), 'stopped'\n","      \n","      i += 1  # if entry starts with prev trade's close, do not use it ! \n","      # print(\"i in end :\", i)\n","      if i >= len(res_df):\n","        break\n","\n","\n","\n","    # -------------------- result analysis -------------------- #\n","    # try:\n","    print(\"elapsed_time :\", time.time() - start_0)\n","\n","    plt.style.use('default')\n","    # mpl.rcParams.update(mpl.rcParamsDefault)\n","\n","    plt.figure(figsize=(16, 12))\n","    # plt.figure(figsize=(12, 8))\n","    # plt.figure(figsize=(10, 6))\n","    plt.suptitle(key)\n","\n","    try:\n","      np_pr = np.array(pr_list)\n","      np_zone_list = np.array(zone_list)\n","      # np_pr_list = np.array(pr_list)\n","      np_side_list = np.array(side_list)\n","\n","      t_w = np.sum(np.where((np_zone_list == 't') & (np_pr > 1), 1, 0))\n","      c_w = np.sum(np.where((np_zone_list == 'c') & (np_pr > 1), 1, 0))\n","      t_ls = np.sum(np.where((np_zone_list == 't') & (np_pr < 1), 1, 0))\n","      c_ls = np.sum(np.where((np_zone_list == 'c') & (np_pr < 1), 1, 0))\n","\n","      # np_pr = (np.array(pr_list) - 1) * config.lvrg_set.leverage + 1\n","\n","      # ----- fake_pr ----- #\n","      # np_pr = np.where(np_pr > 1, 1 + (np_pr - 1) * 3, np_pr)\n","\n","      total_pr = np.cumprod(np_pr)\n","\n","      for_sum_pr = np_pr - 1\n","      for_sum_pr[0] = 1\n","      sum_pr = np.cumsum(for_sum_pr)\n","      sum_pr = np.where(sum_pr < 0, 0, sum_pr)\n","\n","      wr = len(np_pr[np_pr > 1]) / len(np_pr[np_pr != 1])\n","\n","      # mean_profit = np.mean(np_pr[np_pr > 1])\n","      # mean_loss = np.mean(np_pr[np_pr < 1])\n","      # cumprod_profit = np.cumprod(np_pr[np_pr > 1])[-1]\n","      # cumprod_loss = np.cumprod(np_pr[np_pr < 1])[-1]\n","      # pr_tr = cumprod_profit * cumprod_loss\n","\n","      np_tp_ratio_list = np.array(tp_ratio_list) # 초기에 tr 을 정하는거라 mean 사용하는게 맞음\n","      mean_tr = np.mean(np_tp_ratio_list[np.isnan(np_tp_ratio_list) == 0])\n","\n","      np_dr_list = np.array(dr_list) # 초기에 tr 을 정하는거라 mean 사용하는게 맞음\n","      mean_dr = np.mean(np_dr_list[np.isnan(np_dr_list) == 0])\n","\n","\n","      # pr_gap = (np_pr - 1) / config.lvrg_set.leverage + fee\n","      # tp_gap_ = pr_gap[pr_gap > 0]\n","      # # mean_config.tr_set.tp_gap = np.mean(pr_gap[pr_gap > 0])\n","      # mean_ls_gap = np.mean(pr_gap[pr_gap < 0])\n","\n","      # ---- profit fee ratio ---- #\n","      # mean_pgfr = np.mean((tp_gap_ - fee) / abs(tp_gap_ + fee))\n","\n","      # plt.subplot(121)\n","      plt.subplot(231)\n","      plt.plot(total_pr)\n","      plt.plot(sum_pr, color='gold')\n","      if len(nontp_liqd_list) != 0:\n","        plt.title(\"wr : %.3f\\nlen(td) : %s\\nmin_pr : %.3f\\nacc_pr : %.3f\\n sum_pr : %.3f\"\n","                  % (wr, len(np_pr[np_pr != 1]), np.min(np_pr), total_pr[-1], sum_pr[-1]) + \\\n","                  \"\\n leverage %s\\nliqd : %.3f\\nmean_tr : %.3f\\n mean_dr : %.3f\\n nontp_liqd_cnt : %s\\nnontp_liqd : %.3f\\nontp_liqd_pr : %.3f\\n tw cw tls cls : %s %s %s %s\" \n","                  % (config.lvrg_set.leverage, min(liqd_list), mean_tr, mean_dr, len(nontp_liqd_list), \n","                     min(nontp_liqd_list), min(nontp_pr_list), t_w, c_w, t_ls, c_ls),\n","                  position=title_position)\n","      else:\n","        plt.title(\"wr : %.3f\\nlen(td) : %s\\nmin_pr : %.3f\\nacc_pr : %.3f\\n sum_pr : %.3f\" \n","                  % (wr, len(np_pr[np_pr != 1]), np.min(np_pr), total_pr[-1], sum_pr[-1]) + \\\n","                  \"\\n leverage %s\\nliqd : %.3f\\nmean_tr : %.3f\\n mean_dr : %.3f\\n nontp_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (config.lvrg_set.leverage, min(liqd_list), mean_tr, mean_dr, len(nontp_liqd_list), t_w, c_w, t_ls, c_ls), \n","                  position=title_position)\n","      # plt.show()\n","\n","      survey_df.iloc[survey_i] = wr, len(np_pr[np_pr != 1]), np.min(np_pr), total_pr[-1], sum_pr[-1], min(liqd_list), mean_tr, mean_dr     \n","\n","      print('supblot231 passed')\n","\n","    except Exception as e:\n","      print(\"error in 231 :\", e)\n","\n","\n","    try:\n","      #         short only      #\n","      short_np_pr = np.array(short_list)\n","\n","      print(\"short_sr :\", sharpe_ratio(short_np_pr))\n","\n","      total_short_pr = np.cumprod(short_np_pr)\n","      \n","      short_for_sum_pr = short_np_pr - 1\n","      short_for_sum_pr[0] = 1\n","      short_sum_pr = np.cumsum(short_for_sum_pr)\n","      short_sum_pr = np.where(short_sum_pr < 0, 0, short_sum_pr)\n","\n","      short_wr = len(short_np_pr[short_np_pr > 1]) / len(short_np_pr[short_np_pr != 1])\n","      \n","      t_w_s = np.sum(np.where((np_zone_list == 't') & (np_pr > 1) & (np_side_list == 's'), 1, 0))\n","      c_w_s = np.sum(np.where((np_zone_list == 'c') & (np_pr > 1) & (np_side_list == 's'), 1, 0))\n","      t_ls_s = np.sum(np.where((np_zone_list == 't') & (np_pr < 1) & (np_side_list == 's'), 1, 0))\n","      c_ls_s = np.sum(np.where((np_zone_list == 'c') & (np_pr < 1) & (np_side_list == 's'), 1, 0))\n","      # short_cumprod_profit = np.cumprod(short_np_pr[short_np_pr > 1])[-1]\n","      # short_cumprod_loss = np.cumprod(short_np_pr[short_np_pr < 1])[-1]\n","      # short_pr_tr = short_cumprod_profit * short_cumprod_loss\n","\n","      np_short_tp_ratio_list = np.array(short_tp_ratio_list)\n","      mean_short_tr = np.mean(np_short_tp_ratio_list[np.isnan(np_short_tp_ratio_list) == 0])\n","      \n","      np_short_dr_list = np.array(short_dr_list)\n","      mean_short_dr = np.mean(np_short_dr_list[np.isnan(np_short_dr_list) == 0])\n","      \n","      # short_pr_gap = (short_np_pr - 1) / config.lvrg_set.leverage + fee\n","      # short_tp_gap = short_pr_gap[short_pr_gap > 0]\n","      # # mean_short_tp_gap = np.mean(short_pr_gap[short_pr_gap > 0])\n","      # # mean_short_ls_gap = np.mean(short_pr_gap[short_pr_gap < 0])\n","\n","      # mean_short_pgfr = np.mean((short_tp_gap - fee) / abs(short_tp_gap + fee))\n","      \n","      plt.subplot(232)\n","      plt.plot(total_short_pr)\n","      plt.plot(short_sum_pr, color='gold')\n","      if len(nontp_short_liqd_list) != 0:   \n","\n","        max_nontp_short_term = len(res_df) - nontp_short_indexs[0]\n","        \n","        plt.title(\"wr : %.3f\\nlen(short_td) : %s\\nmin_pr : %.3f\\nacc_pr : %.3f\\n sum_pr : %.3f\"\n","                  % (short_wr, len(short_np_pr[short_np_pr != 1]), np.min(short_np_pr), total_short_pr[-1], short_sum_pr[-1]) + \\\n","                  \"\\n leverage %s\\nliqd : %.3f\\nmean_tr : %.3f\\n mean_dr : %.3f\\n nontp_short_liqd_cnt : %s\\nnontp_short_liqd : %.3f\\nontp_short_liqd_pr : %.3f\\nmax_nontp_short_term : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (config.lvrg_set.leverage, min(short_liqd_list), mean_short_tr, mean_short_dr, \n","                     len(nontp_short_liqd_list), min(nontp_short_liqd_list), min(nontp_short_pr_list), max_nontp_short_term, t_w_s, c_w_s, t_ls_s, c_ls_s),\n","                  position=title_position)\n","      else:\n","        plt.title(\"wr : %.3f\\nlen(short_td) : %s\\nmin_pr : %.3f\\nacc_pr : %.3f\\n sum_pr : %.3f\"\n","                  % (short_wr, len(short_np_pr[short_np_pr != 1]), np.min(short_np_pr), total_short_pr[-1], short_sum_pr[-1]) + \\\n","                  \"\\n leverage %s\\nliqd : %.3f\\nmean_tr : %.3f\\n mean_dr : %.3f\\n nontp_short_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\" \n","                  % (config.lvrg_set.leverage, min(short_liqd_list), mean_short_tr, mean_short_dr, len(nontp_short_liqd_list), t_w_s, c_w_s, t_ls_s, c_ls_s),\n","                  position=title_position)\n","\n","      short_survey_df.iloc[survey_i] = short_wr, len(short_np_pr[short_np_pr != 1]), np.min(short_np_pr), total_short_pr[-1], short_sum_pr[-1], min(short_liqd_list), mean_short_tr, mean_short_dr     \n","\n","      print('supblot232 passed')\n","    \n","    except Exception as e:\n","      print(\"error in 232 :\", e)\n","\n","    try:\n","      #         long only      #\n","      long_np_pr = np.array(long_list)\n","      # long_np_pr = (np.array(long_list) - 1) * config.lvrg_set.leverage + 1\n","\n","      total_long_pr = np.cumprod(long_np_pr)\n","      \n","      long_for_sum_pr = long_np_pr - 1\n","      long_for_sum_pr[0] = 1\n","      long_sum_pr = np.cumsum(long_for_sum_pr)\n","      long_sum_pr = np.where(long_sum_pr < 0, 0, long_sum_pr)\n","\n","      long_wr = len(long_np_pr[long_np_pr > 1]) / len(long_np_pr[long_np_pr != 1])\n","\n","      t_w_l = np.sum(np.where((np_zone_list == 't') & (np_pr > 1) & (np_side_list == 'l'), 1, 0))\n","      c_w_l = np.sum(np.where((np_zone_list == 'c') & (np_pr > 1) & (np_side_list == 'l'), 1, 0))\n","      t_ls_l = np.sum(np.where((np_zone_list == 't') & (np_pr < 1) & (np_side_list == 'l'), 1, 0))\n","      c_ls_l = np.sum(np.where((np_zone_list == 'c') & (np_pr < 1) & (np_side_list == 'l'), 1, 0))\n","      # long_cumprod_profit = np.cumprod(long_np_pr[long_np_pr > 1])[-1]\n","      # long_cumprod_loss = np.cumprod(long_np_pr[long_np_pr < 1])[-1]\n","      # long_pr_tr = long_cumprod_profit * long_cumprod_loss\n","\n","      np_long_tp_ratio_list = np.array(long_tp_ratio_list)\n","      mean_long_tr = np.mean(np_long_tp_ratio_list[np.isnan(np_long_tp_ratio_list) == 0])\n","      \n","      np_long_dr_list = np.array(long_dr_list)\n","      mean_long_dr = np.mean(np_long_dr_list[np.isnan(np_long_dr_list) == 0])\n","\n","      # long_pr_gap = (long_np_pr - 1) / config.lvrg_set.leverage + fee\n","      # long_tp_gap = long_pr_gap[long_pr_gap > 0]\n","      # # mean_long_tp_gap = np.mean(long_pr_gap[long_pr_gap > 0])\n","      # # mean_long_ls_gap = np.mean(long_pr_gap[long_pr_gap < 0])\n","\n","      # mean_long_pgfr = np.mean((long_tp_gap - fee) / abs(long_tp_gap + fee))\n","\n","      plt.subplot(233)\n","      plt.plot(total_long_pr)\n","      plt.plot(long_sum_pr, color='gold')\n","      if len(nontp_long_liqd_list) != 0:\n","\n","        max_nontp_long_term = len(res_df) - nontp_long_indexs[0]\n","\n","        plt.title(\"wr : %.3f\\nlen(long_td) : %s\\nmin_pr : %.3f\\nacc_pr : %.3f\\n sum_pr : %.3f\"\n","                  % (long_wr, len(long_np_pr[long_np_pr != 1]), np.min(long_np_pr), total_long_pr[-1], long_sum_pr[-1]) + \\\n","                  \"\\n leverage %s\\nliqd : %.3f\\nmean_tr : %.3f\\n mean_dr : %.3f\\n nontp_long_liqd_cnt : %s\\nnontp_long_liqd : %.3f\\nontp_long_liqd_pr : %.3f\\nmax_nontp_long_term : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (config.lvrg_set.leverage, min(long_liqd_list), mean_long_tr, mean_long_dr, \n","                     len(nontp_long_liqd_list), min(nontp_long_liqd_list), min(nontp_long_pr_list), max_nontp_long_term, t_w_l, c_w_l, t_ls_l, c_ls_l),\n","                  position=title_position)\n","      else:\n","        plt.title(\"wr : %.3f\\nlen(long_td) : %s\\nmin_pr : %.3f\\nacc_pr : %.3f\\n sum_pr : %.3f\"\n","                  % (long_wr, len(long_np_pr[long_np_pr != 1]), np.min(long_np_pr), total_long_pr[-1], long_sum_pr[-1]) + \\\n","                  \"\\n leverage %s\\nliqd : %.3f\\nmean_tr : %.3f\\n mean_dr : %.3f\\n nontp_long_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\" \n","                  % (config.lvrg_set.leverage, min(long_liqd_list), mean_long_tr, mean_long_dr, len(nontp_long_liqd_list), t_w_l, c_w_l, t_ls_l, c_ls_l),\n","                  position=title_position)\n","\n","      long_survey_df.iloc[survey_i] = long_wr, len(long_np_pr[long_np_pr != 1]), np.min(long_np_pr), total_long_pr[-1], long_sum_pr[-1], min(long_liqd_list), mean_long_tr, mean_long_dr     \n","\n","      print('supblot233 passed')\n","\n","    except Exception as e:\n","      print(\"error in 233 :\", e)\n","\n","\n","    try:\n","      #     reversion adjustment      #\n","      # rev_np_pr = 1 / (np.array(pr_list) + fee) - fee\n","      rev_fee = tp_fee + out_fee - np.array(fee_list)\n","      rev_np_pr = (1 / ((np.array(pr_list) - 1) / config.lvrg_set.leverage + np.array(fee_list) + 1) - rev_fee - 1) * config.lvrg_set.leverage + 1\n","      # rev_np_pr = (1 / (np.array(pr_list) + fee) - fee - 1) * config.lvrg_set.leverage + 1\n","          \n","      rev_total_pr = np.cumprod(rev_np_pr)\n","      rev_wr = len(rev_np_pr[rev_np_pr > 1]) / len(rev_np_pr[rev_np_pr != 1])\n","\n","      rev_total_for_sum_pr = rev_np_pr - 1\n","      rev_total_for_sum_pr[0] = 1\n","      rev_total_sum_pr = np.cumsum(rev_total_for_sum_pr)\n","      rev_total_sum_pr = np.where(rev_total_sum_pr < 0, 0, rev_total_sum_pr)\n","\n","      # plt.subplot(122)\n","      plt.subplot(234)\n","      plt.plot(rev_total_pr)\n","      plt.plot(rev_total_sum_pr, color='gold')\n","\n","      plt.title(\"wr : %.3f\\nmin_pr : %.3f\\nacc_pr : %.3f\\n sum_pr : %.3f\" % (rev_wr, np.min(rev_np_pr), rev_total_pr[-1], rev_total_sum_pr[-1]))\n","      \n","      rev_survey_df.iloc[survey_i] = rev_wr, np.min(rev_np_pr), rev_total_pr[-1], rev_total_sum_pr[-1]\n","\n","    except Exception as e:\n","      print(\"error in 234 :\", e)\n","\n","    try:\n","      #         short       #\n","      # rev_short_np_pr = 1 / (np.array(short_list) + fee) - fee\n","      rev_short_fee = tp_fee + out_fee - np.array(short_fee_list)\n","      rev_short_np_pr = (1 / ((np.array(short_list) - 1) / config.lvrg_set.leverage + np.array(short_fee_list) + 1) - rev_short_fee - 1) * config.lvrg_set.leverage + 1\n","      # rev_short_np_pr = (1 / (np.array(short_list) + fee) - fee - 1) * config.lvrg_set.leverage + 1\n","          \n","      rev_total_short_pr = np.cumprod(rev_short_np_pr)\n","      rev_short_wr = len(rev_short_np_pr[rev_short_np_pr > 1]) / len(rev_short_np_pr[rev_short_np_pr != 1])\n","\n","      rev_short_for_sum_pr = rev_short_np_pr - 1\n","      rev_short_for_sum_pr[0] = 1\n","      rev_short_sum_pr = np.cumsum(rev_short_for_sum_pr)\n","      rev_short_sum_pr = np.where(rev_short_sum_pr < 0, 0, rev_short_sum_pr)\n","\n","      # plt.subplot(122)\n","      plt.subplot(235)\n","      plt.plot(rev_total_short_pr)\n","      plt.plot(rev_short_sum_pr, color='gold')\n","\n","      plt.title(\"wr : %.3f\\nmin_pr : %.3f\\nacc_pr : %.3f\\n sum_pr : %.3f\" % (rev_short_wr, np.min(rev_short_np_pr), rev_total_short_pr[-1], rev_short_sum_pr[-1]))\n","\n","      rev_short_survey_df.iloc[survey_i] = rev_short_wr, np.min(rev_short_np_pr), rev_total_short_pr[-1], rev_short_sum_pr[-1]\n","\n","    except Exception as e:\n","      print(\"error in 235 :\", e)\n","\n","    try:\n","      #         long       #\n","      # rev_long_np_pr = 1 / (np.array(long_list) + fee) - fee\n","      rev_long_fee = tp_fee + out_fee - np.array(long_fee_list)\n","      rev_long_np_pr = (1 / ((np.array(long_list) - 1) / config.lvrg_set.leverage + np.array(long_fee_list) + 1) - rev_long_fee - 1) * config.lvrg_set.leverage + 1\n","          \n","      rev_total_long_pr = np.cumprod(rev_long_np_pr)\n","      rev_long_wr = len(rev_long_np_pr[rev_long_np_pr > 1]) / len(rev_long_np_pr[rev_long_np_pr != 1])\n","\n","      rev_long_for_sum_pr = rev_long_np_pr - 1\n","      rev_long_for_sum_pr[0] = 1\n","      rev_long_sum_pr = np.cumsum(rev_long_for_sum_pr)\n","      rev_long_sum_pr = np.where(rev_long_sum_pr < 0, 0, rev_long_sum_pr)\n","\n","      # plt.subplot(122)\n","      plt.subplot(236)\n","      plt.plot(rev_total_long_pr)\n","      plt.plot(rev_long_sum_pr, color='gold')\n","\n","      plt.title(\"wr : %.3f\\nmin_pr : %.3f\\nacc_pr : %.3f\\n sum_pr : %.3f\" % (rev_long_wr, np.min(rev_long_np_pr), rev_total_long_pr[-1], rev_long_sum_pr[-1]))\n","      \n","      rev_long_survey_df.iloc[survey_i] = rev_long_wr, np.min(rev_long_np_pr), rev_total_long_pr[-1], rev_long_sum_pr[-1]\n","      \n","    except Exception as e:\n","      print(\"error in 236 :\", e)\n","\n","    if show_plot:\n","      plt.show()\n","    \n","\n","    try:\n","\n","      h_np_pr = np.array(h_pr_list)\n","      # h_rev_np_pr = 1 / (np.array(h_pr_list) + fee) - fee    # define, for plot_check below cell\n","      h_rev_np_pr = (1 / ((np.array(h_pr_list) - 1) / config.lvrg_set.leverage + np.array(fee_list) + 1) - np.array(fee_list) - 1) * config.lvrg_set.leverage + 1\n","\n","      # --------------------- h pr plot --------------------- #\n","      if len(h_np_pr[h_np_pr != 1]) != 0:\n","\n","        plt.figure(figsize=(16, 12))\n","        plt.suptitle(key + \" hedge\")\n","\n","        h_total_pr = np.cumprod(h_np_pr)\n","        h_wr = len(h_np_pr[h_np_pr > 1]) / len(h_np_pr[h_np_pr != 1])\n","\n","        # plt.subplot(121)\n","        plt.subplot(231)\n","        plt.plot(h_total_pr)\n","        plt.title(\"wr : %.3f\\nmin_pr : %.3f\\nacc_pr : %.3f\\n leverage %s\" % (h_wr, np.min(h_np_pr), h_total_pr[-1], config.lvrg_set.leverage))\n","        # plt.show()\n","\n","        #         short only      #\n","        h_short_np_pr = np.array(h_short_list)\n","\n","        h_total_short_pr = np.cumprod(h_short_np_pr)\n","        h_short_wr = len(h_short_np_pr[h_short_np_pr > 1]) / len(h_short_np_pr[h_short_np_pr != 1])\n","        \n","        plt.subplot(232)\n","        plt.plot(h_total_short_pr)\n","        plt.title(\"wr : %.3f\\nmin_pr : %.3f\\nacc_pr : %.3f\\n leverage %s\" % (h_short_wr, np.min(h_short_np_pr), h_total_short_pr[-1], config.lvrg_set.leverage))\n","\n","        #         long only      #\n","        h_long_np_pr = np.array(h_long_list)\n","\n","        h_total_long_pr = np.cumprod(h_long_np_pr)\n","        h_long_wr = len(h_long_np_pr[h_long_np_pr > 1]) / len(h_long_np_pr[h_long_np_pr != 1])\n","        \n","        plt.subplot(233)\n","        plt.plot(h_total_long_pr)\n","        plt.title(\"wr : %.3f\\nmin_pr : %.3f\\nacc_pr : %.3f\\n leverage %s\" % (h_long_wr, np.min(h_long_np_pr), h_total_long_pr[-1], config.lvrg_set.leverage))\n","\n","\n","        #     reversion adjustment      #\n","            \n","        h_rev_total_pr = np.cumprod(h_rev_np_pr)\n","        h_rev_wr = len(h_rev_np_pr[h_rev_np_pr > 1]) / len(h_rev_np_pr[h_rev_np_pr != 1])\n","\n","        # plt.subplot(122)\n","        plt.subplot(234)\n","        plt.plot(h_rev_total_pr)\n","        plt.title(\"wr : %.3f\\nmin_pr : %.3f\\nacc_pr : %.3f\\n leverage %s\" % (h_rev_wr, np.min(h_rev_np_pr), h_rev_total_pr[-1], config.lvrg_set.leverage))\n","\n","        #         short       #\n","        # h_rev_short_np_pr = 1 / (np.array(h_short_list) + fee) - fee\n","        h_rev_short_np_pr =  (1 / ((np.array(h_short_list) - 1) / config.lvrg_set.leverage + np.array(short_fee_list) + 1) - np.array(short_fee_list) - 1) * config.lvrg_set.leverage + 1\n","           \n","        h_rev_total_short_pr = np.cumprod(h_rev_short_np_pr)\n","        h_rev_short_wr = len(h_rev_short_np_pr[h_rev_short_np_pr > 1]) / len(h_rev_short_np_pr[h_rev_short_np_pr != 1])\n","\n","        # plt.subplot(122)\n","        plt.subplot(235)\n","        plt.plot(h_rev_total_short_pr)\n","        plt.title(\"wr : %.3f\\nmin_pr : %.3f\\nacc_pr : %.3f\\n leverage %s\" % (h_rev_short_wr, np.min(h_rev_short_np_pr), h_rev_total_short_pr[-1], config.lvrg_set.leverage))\n","\n","        #         long       #\n","        # h_rev_long_np_pr = 1 / (np.array(h_long_list) + fee) - fee\n","        h_rev_long_np_pr =  (1 / ((np.array(h_long_list) - 1) / config.lvrg_set.leverage + np.array(long_fee_list) + 1) - np.array(long_fee_list) - 1) * config.lvrg_set.leverage + 1\n","            \n","        h_rev_total_long_pr = np.cumprod(h_rev_long_np_pr)\n","        h_rev_long_wr = len(h_rev_long_np_pr[h_rev_long_np_pr > 1]) / len(h_rev_long_np_pr[h_rev_long_np_pr != 1])\n","\n","        # plt.subplot(122)\n","        plt.subplot(236)\n","        plt.plot(h_rev_total_long_pr)\n","        plt.title(\"wr : %.3f\\nmin_pr : %.3f\\nacc_pr : %.3f\\n leverage %s\" % (h_rev_long_wr, np.min(h_rev_long_np_pr), h_rev_total_long_pr[-1], config.lvrg_set.leverage))\n","        \n","        if show_plot:\n","          plt.show()\n","          \n","    except Exception as e:\n","      print('error in h_pr plot :', e)   \n","    \n","    print()\n","\n","\n","  # break # pair loop"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Fkz9oh69zP-Y","executionInfo":{"status":"ok","timestamp":1638108218127,"user_tz":-540,"elapsed":3,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"d6f40f23-c802-464e-e262-10990753dc02"},"source":["# plt.plot(np_pr_pct)\n","# plt.show()\n","\n","def sharpe_ratio(pr, risk_free_rate=0.0):\n","\n","    pr_pct = pr - 1\n","\n","    mean_pr_ = np.mean(pr_pct)\n","    s = np.std(pr_pct)\n","\n","    sr_ = (mean_pr_ - risk_free_rate) / s\n","\n","    # sr_ = len(pr_pct) **(1/2) * sr_\n","    \n","    return sr_\n","\n","sr = sharpe_ratio(np_pr)\n","print(\"sr :\", sr)"],"execution_count":50,"outputs":[{"output_type":"stream","name":"stdout","text":["sr : -0.16724821196004852\n"]}]},{"cell_type":"markdown","metadata":{"id":"MteLY9PS2ZeK"},"source":["##### check statistical significance"]},{"cell_type":"code","metadata":{"id":"NzbWuwSw2jaj","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1638104300371,"user_tz":-540,"elapsed":4713,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"c58ae4c1-0d7f-4650-e13b-542ea84f871f"},"source":["# print(survey_df)\n","\n","plt.style.use('dark_background')\n","\n","title_name_list = [[\"total\", \"short\", \"long\"], [\"rev_total\", \"rev_short\", \"rev_long\"]]\n","survey_dfs_list = [[survey_df, short_survey_df, long_survey_df], [rev_survey_df, rev_short_survey_df, rev_long_survey_df]]\n","# title_name = \n","# survey_df_list = \n","\n","space_ = \" \" * 140\n","\n","for d_idx, (title_name, survey_dfs) in enumerate(zip(title_name_list, survey_dfs_list)):\n","\n","  fig = plt.figure(figsize=(30, 10))\n","\n","  gs = gridspec.GridSpec(nrows=1, # row 몇 개 \n","                          ncols=3, # col 몇 개 \n","                          # height_ratios=[1, 1, 1]\n","                        )\n","\n","  # gs = fig.add_gridspec(1, 3, wspace=0, hspace=0)\n","\n","  if d_idx == 0:\n","    nrows, ncols, h_r = 3, 3, [1, 1, 1]\n","  else:\n","    nrows, ncols, h_r = 2, 2, [1, 1]\n","\n","  for gs_idx, (title, s_df) in enumerate(zip(title_name, survey_dfs)):  \n","\n","\n","    inner_gs = gs[gs_idx].subgridspec(nrows=nrows, # row 몇 개 \n","                          ncols=ncols, # col 몇 개 \n","                          height_ratios=h_r\n","                        )\n","\n","    for col_idx, s_cols in enumerate(s_df.columns):\n","      plt.subplot(inner_gs[col_idx])\n","      plt.plot(s_df[s_cols])\n","      plt.title(s_cols)\n","\n","  # plt.suptitle(\"total\" + \" \" * 140 + \"short\" + \" \" * 140 + \"long\")\n","  plt.suptitle(space_.join(title_name))\n","  plt.show()\n","  print(\"\\n\")"],"execution_count":33,"outputs":[{"output_type":"display_data","data":{"image/png":"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+sbckB6pVrHhnxUi9QwpNwwpViJ9MpTcMJQ4ifSNuUE1xT8rROoZSm4YSpxE+mYouWEocRKJoab5UW8WUVVccEpKisiREEmblZUV8vLyxA6jEuYwUc0wh4kMm1RzmMTHeZSoZqQ8jzKPiWpGqnnMHCaqGanmMImP8yhRzUh1HmUOE9UMc5jI8FWXx0YABP2Fo1sODg51nrSsrKyQkpICR0dHSU58YuG4qGeo42JlZYXU1FSxw9CIOax9HBfNDHFsmMMNE8dGPUMcF6nnMImP86hucGzUM8RxMYR5lHmsfRwX9Qx1XKSex8xh7eO4aGaIYyP1HCbxcR7VPo6LZoY4NlKfR5nDusGxUc8Qx6U+5zBgmK+JPnBc1DPUcalJHtebSlQAtDJp5eXlGdSLrC8cF/UMbVykHitzWHc4LpoZ0thIPU7msG5xbNQzpHExlDhJPJxHdYtjo54hjYshxMk81h2Oi3qGNi5Sj5U5rDscF80MaWwMJU4SD+dR3eG4aGZIYyP1OJnDusWxUc+QxkXqcWprgZchvSb6xHFRz9DGpSaxGushDiIiIiIiIiIiIiIiIiIiIiIiIsniIioiIiIiIiIiIiIiIiIiIiIiImrQTAB8LHYQUlFWVoajR4+irKxM7FAkheOiHsdFeviaqMdx0YxjIy18PTTj2KjHcSFSxZzQjGOjHsdFeviaqMdxUY/jIj18TdTjuGjGsSFSxZxQj+OiGcdGWvh6aMaxUY/jIj18TdTjuKhXX8fFCIAgdhBERERERERERERERERERERERERi4XZ+RERERERERERERERERERERETUoHERFRERERERERERERERERERERERNWhcREVERERERERERERERERERERERA0aF1EREREREREREREREREREREREVGDVm8XUc2YMQOJiYkoLCxEREQEevfurfHYjh074pdffkFiYiIEQcDs2bOfuk8p0/bY+Pv7QxAElRYbG6vLS9CJ2ozLu+++i+PHjyM7OxvZ2dk4dOiQ2uMDAgKQmpqKgoICHDp0CG5ubrq8hHqHeawec1g95rD0MIfVYw5rxjwmUsV5VD3Oo5pxHpUW5rBmzGP1mMPSwzxWjzmsHnOYSBXnUM04j6rHeVR6mMfqMYc1Yx5LC3NYPeawZszh/xHqWxszZoxQVFQkvPPOO4Knp6fwzTffCNnZ2YKNjY3a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Ii1gPhMREVFDxPdARPUDc5mIiIgaIr4HIqo/mM9ERLrBRVT01Pz9/fHFF18AAJKSkiAIAgRBgJOTEwRBwLp16/DWW2/hypUrKC4uho+Pj8gRE9GTnn32WZw9exaFhYWIj4/He++9V+kY5jMRERHVV7ynITJsvJ8hIiKihoz3M0SGj/c0RETSYSp2AGT49uzZA3d3d7z11luYM2cO7t27BwDIysoCADz//PMYM2YM1q9fj3v37iEpKUnEaInoSZ07d8bBgweRlZWFjz/+GKampggICEBGRkalY5nPREREVB/xnobIcPF+hoiIiBo63s8QGTbe0xARSY/Axva0be7cuYIgCIKTk5PK44IgCAqFQvD09BQ9RjY2NvVtz549QkFBgdCmTRvlYx4eHkJpaakgCILyMeYzGxsbGxsbW31uvKdhYzPMxvsZNjY2NjY2Njbez7CxGXLjPQ0bGxubtBq38yOdO3bsGGJjY8UOg4jUMDY2xvDhwxEaGoo7d+4oH79+/TrCw8MrHc98JiIiooaI74GIpIn3M0RERETV43sgIuniPQ0RkfRwERXpXGJiotghEJEGNjY2sLS0xM2bNyv97saNG5UeYz4TERFRQ8T3QETSxPsZIiIiourxPRCRdPGehohIeriIinSusLBQ7BCISEuYz0RERNQQ8T0QUf3AXCYiIqKGiO+BiOoP5jMRke5xERVpRfmWvERkaLKyslBQUID27dtX+l2HDh1EiIiIiIhIHLynITI8vJ8hIiIiKsf7GSLDxHsaIiLp4SIq0or8/HwAgLW1tciREFFtPHr0COHh4Rg1ahTatGmjfNzDwwPDhw8XMTIiIiIi/eI9DZHh4f0MERERUTnezxAZJt7TEBFJDxdRkVZERUUBAD755BOMHz8eY8eOhaWlpchREVFN+Pv7AwBOnDiBBQsWYPHixThy5AiuXr0qcmRERERE+sN7GiLDxPsZIiIiIt7PEBky3tMQEUmLqdgBUP1w/vx5LF26FNOmTYOPjw9MTEzg7OwsdlhEVAOXL1/G8OHDERQUhMDAQNy9exf+/v6wt7dH165dxQ6PiIiISC94T0NkmHg/Q0RERMT7GSJDxnsaIiJpMQLAjZKJiIiIiIiIiIiIiIiIiIiIiKjB4nZ+RERERERERERERERERERERETUoHERFRERERERERERERERERERERERNWhcREVERERERERERERERERERERERA0aF1EREREREREREREREREREREREVGDxkVURERERERERERERERERERERETUoHERFRERERERERERERERERERERERNWimYgegTQ4ODsjLyxM7DCLJsrKyQmpqqthhaMQcJqqa1HOYiIieDt8LEVXNEN4LMY+JqmYIeUxERHXH90JEVZP6eyHmMFHVpJ7DRKQd9WYRlYODA1JSUsQOg0jyHB0dJfkXPHOYqGakmsNERPR0+F6IqGak/F6IeUxUM1LOYyIiqju+FyKqGam+F2IOE9WMVHOYiLSn3iyiqlgZ7ejoyFXSRGpYWVkhJSVFsvnBHCaqmtRzmIiIng7fCxFVzRDeCzGPiapmCHlMRER1x/dCRFWT+nsh5jBR1aSew0SkPfVmEVWFvLw8Tl5EBow5TERERA0Z3wsRVW/gwIGYP38+evbsCQcHB4waNQp79+6t0bn9+/fHsWPHcOXKFXTv3l35uL+/Pz7++GOVY69fvw5PT89ax8c8JiIiooaM74WIDBtzmIiIGjpjsQMgIiIiIiIiIqopuVyOmJgYzJw5s1bnNW3aFN999x3+/PNPtb+/cuUK7OzslG3AgAHaCJeIiIiIiIiIiIgMRL2rREVERERERERE9deBAwdw4MCBWp+3ceNG/PjjjygrK8OoUaMq/V6hUCDh2bucAAAgAElEQVQjI6PG/ZmZmcHc3Fz5s5WVVa1jIiIiIiIiIiIiIulgJSoiIiIiIiIiqtfeeecduLq6IiAgQOMx7du3R0pKChISErBjxw60adOmyj4XLVqE3NxcZUtJSdF22ERERERERERERKRHXERFRERERERERPWWm5sbPv30U4wfPx5lZWVqj4mMjMQ777wDHx8fTJ8+HS4uLjhx4gQaN26ssd9Vq1ahSZMmyubo6KirSyAiIiIiIiIiIiI94HZ+RERERERERFQvGRsb48cff4S/vz9u3ryp8bh/bg94+fJlREZGIjk5GWPGjMHWrVvVnlNSUoKSkhKtx0xERERERERERETiaHCLqMwaNUJJYaHYYRBRHZk1skBJYZHYYRARERGJwtjEBDACHinUV9MhIlVWVlbo3bs3unfvjvXr1wMoX1hlbGyM0tJSDBs2DEeOHKl03sOHDxEXFwc3Nzetx2RqZgYFF18RERFRA2Vh1RhFeX+LHQYR1ZG5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\n","text/plain":["<Figure size 3000x1000 with 24 Axes>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 3000x1000 with 12 Axes>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","\n"]}]},{"cell_type":"markdown","metadata":{"id":"GZ0y_x9ugOUD"},"source":["##### check dent_detph"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":676},"id":"ETgm1avml0fE","executionInfo":{"status":"ok","timestamp":1637297839515,"user_tz":-540,"elapsed":593,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"9df7a819-691a-4fdc-93bb-d6489812419b"},"source":["target_pr = total_long_pr\n","\n","plt.figure(figsize=(4, 8))\n","gs = gridspec.GridSpec(nrows=2,\n","                        ncols=1,\n","                        height_ratios=[1, 1]\n","                      )\n","\n","plt.subplot(gs[0])\n","plt.plot(target_pr)\n","h_roll = pd.Series(target_pr).rolling(10).max()\n","plt.plot(h_roll)\n","# plt.show()\n","# print()\n","\n","plt.subplot(gs[1])\n","dent_depth = target_pr / h_roll\n","plt.plot(dent_depth)\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 400x800 with 2 Axes>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"v2Gjv019AEz8"},"source":["##### check frequency "]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":464},"id":"atdBjod9-e21","executionInfo":{"status":"ok","timestamp":1636862363013,"user_tz":-540,"elapsed":720,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"5925d52a-da23-40cd-a9b3-6c0323024bc0"},"source":["total_len = np.zeros(len(res_df))\n","print(total_len)\n","np_trade_list = np.array(trade_list)\n","# print(np_trade_list.shape)\n","print(np_trade_list[:, [0], [0]].shape)\n","total_len[np_trade_list[:, [0], [0]]] = 1\n","\n","plt.plot(total_len)\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[0. 0. 0. ... 0. 0. 0.]\n","(70, 1)\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"o-XjNS1L31YB"},"source":["##### ep const. legacy"]},{"cell_type":"code","metadata":{"id":"taB2j7kT33iN"},"source":["\n","   # --------------- ema --------------- #   \n","  # res_df['ema5_1m'] = ema(res_df['close'], 5).shift(1)\n","\n","  #   # --------------- cloud bline --------------- #   \n","  # res_df['cloud_bline_1m'] = cloud_bline(res_df, 26).shift(1)\n","  \n","    #       stochastic      #\n","  # res_df['stoch'] = stoch(res_df, 5, 3, 3)\n","\n","    #       fisher      #\n","  # res_df['fisher30'] = fisher(res_df, 30)\n","  # res_df['fisher60'] = fisher(res_df, 60)\n","  # res_df['fisher120'] = fisher(res_df, 120)\n","\n","    #       cctbbo      #\n","  # res_df['cctbbo'], _ = cct_bbo(res_df, 21, 13)\n","\n","    #       ema_roc      #\n","  # res_df['ema_roc'] = ema_roc(res_df['close'], 13, 9)\n","\n","\n","   # ------------------------------ htf data ------------------------------ #    \n","\n","  #             Todo              #\n","  # htf_df = pd.read_excel(date_path2 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # htf_df = pd.read_excel(date_path3 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # htf_df = pd.read_excel(date_path4 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # htf_df = pd.read_excel(date_path5 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # # # # htf_df = pd.read_excel(date_path6 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","\n","  # # ---- htf index slicing ---- #\n","  # htf_df = htf_df.loc[:res_df.index[-1]]\n","  \n","  # print(\"res_df.index[-1] :\", res_df.index[-1])\n","  # print(\"htf_df.index[-1] :\", htf_df.index[-1])\n","\n","  # res_df = dc_line(res_df, htf_df, '5m')\n","  # res_df = dc_level(res_df, '5m', 1)\n","\n","\n","  # # # if \"sma4\" in res_df.columns:\n","  # # #   res_df.drop(\"sma4\", axis=1, inplace=1)\n","\n","  # # htf_df['sma'] = htf_df['close'].rolling(60).mean()\n","  # # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf(res_df, htf_df, [-1]), columns=['sma_30m']))\n","  \n","  # htf_df['stoch'] = stoch(htf_df, 13, 3, 3)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf(res_df, htf_df, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","   \n","  # fifth_df['ema'] = ema(fifth_df['close'], 5)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf(res_df, fifth_df, [-1]), columns=['ema5']))\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == 'MARKET':\n","        #   mr_const_cnt += 1\n","        #   if (res_df['close'].iloc[i] - res_df['short_tp'].iloc[i]) / (res_df['short_out'].iloc[i] - res_df['close'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error):  \n","        #     mr_score += 1\n","\n","           \n","        # ------- entry once ------- #   \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == 1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == -1:\n","        #     prev_entry_cnt += 1          \n","        # # # print(\"prev_entry_cnt :\", prev_entry_cnt)\n","\n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] < res_df['bb_lower_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_lower2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_base_1h'].iloc[i]:\n","\n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] < res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","  \n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['low'].iloc[i] > res_df['short_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1\n","\n","\n","\n","          \n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == \"MARKET\":\n","          # mr_const_cnt += 1        \n","          # if (res_df['long_tp'].iloc[i] - res_df['close'].iloc[i]) / (res_df['close'].iloc[i] - res_df['long_out'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error): # 일반적으로 dr 상에서 tp 비율이 더 커짐 (tr 보다)\n","          #   mr_score += 1\n","\n","        # -------------- ep limit -------------- #    \n","        # mr_const_cnt += 1\n","        # # if (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # if config.ep_set.min_eplim_pct < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # # if 0 < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        #   # if res_df['st_gap_15m'].iloc[i] / res_df['open'].iloc[i] < 0:\n","        #   #   print(\"i, res_df['st_gap_15m'].iloc[i] :\", i, res_df['st_gap_15m'].iloc[i])\n","        #   mr_score += 1\n","\n","\n","        # -------------- entry once -------------- #    \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == -1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == 1:\n","        #     prev_entry_cnt += 1\n","          \n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","          \n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] > res_df['bb_upper_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_upper2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_base_1h'].iloc[i]:\n","        \n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] > res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","\n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['high'].iloc[i] < res_df['long_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","          \n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-IbP_Z3Dlwk4"},"source":["### nontp survey"]},{"cell_type":"markdown","metadata":{"id":"FxJ1y8v2fkCR"},"source":["##### term & liqd"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":614},"id":"-qIWa48pl1GO","executionInfo":{"elapsed":8,"status":"ok","timestamp":1628300788555,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"outputId":"b2687c93-e070-4d45-8a67-4cc783fd78f1"},"source":["# print(nontp_long_indexs)\n","\n","plot_size = 100\n","\n","for s_i in range(plot_size, len(trade_list), plot_size):\n","\n","  slice_trade_list = trade_list[s_i - plot_size:s_i]\n","  slice_liqd_list = liqd_list[s_i - plot_size:s_i]\n","\n","  # print(len(slice_trade_list))\n","  np_trade = np.array(slice_trade_list)\n","  trade_term = np_trade[:, [2]] - np_trade[:, [1]]\n","\n","  plt.figure(figsize=(5, 10))\n","  plt.subplot(211)\n","  plt.bar(np.arange(len(trade_term)), trade_term.reshape(-1,), width=1, color='b')\n","\n","  # plt.plot(trade_term.reshape(-1,))\n","  plt.ylim(0, 1000)\n","  # plt.show()\n","  # print()\n","\n","  plt.subplot(212)\n","  # print(len(liqd_list))\n","  # plt.bar(np.arange(len(liqd_list)), liqd_list)\n","  plt.bar(np.arange(len(slice_liqd_list)), np.array(slice_liqd_list), width=1, color='r')\n","  # plt.plot(slice_liqd_list)\n","  plt.show()\n","\n","print()"],"execution_count":null,"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 360x720 with 2 Axes>"]},"metadata":{"tags":[]},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]}]},{"cell_type":"markdown","metadata":{"id":"VBwVaUkvfnOd"},"source":["##### check nontp index"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mRCMBOU4frNY","executionInfo":{"elapsed":454,"status":"ok","timestamp":1628220543161,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"outputId":"ce4a9c9b-3589-40b3-8a19-4be03d5b9a1e"},"source":["# np_nontp_short_indexs = np.array(nontp_short_indexs)\n","# np_nontp_long_indexs = np.array(nontp_long_indexs)\n","\n","# short_til_term = len(res_df) - np_nontp_short_indexs\n","# long_til_term = len(res_df) - np_nontp_long_indexs\n","\n","max_nontp_short_term = len(res_df) - nontp_short_indexs[0]\n","max_nontp_long_term = len(res_df) - nontp_long_indexs[0]\n","\n","print(max_nontp_long_term)"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["32747\n"]}]},{"cell_type":"markdown","metadata":{"id":"tApzvz_gK9lR"},"source":["## basic strategy"]},{"cell_type":"markdown","metadata":{"id":"FaRGwR4NEop2"},"source":["### shifting"]},{"cell_type":"code","metadata":{"id":"a8aYsjEgQnGF"},"source":["org_res_df = res_df.copy()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RF3RM2G2RCb1","executionInfo":{"elapsed":291,"status":"ok","timestamp":1626515312874,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"outputId":"ba8f6a75-d4df-4f85-cd0f-190935341f7a"},"source":["#         refresh res_df      #\n","res_df = org_res_df.copy()\n","print(org_res_df.tail(5))\n","\n","# break\n","\n","\n","shift_size = -4\n","# shift_size = -1\n","# shift_size = -7\n","# shift_size = +3\n","\n","res_df['min_upper'] = res_df['min_upper'].shift(shift_size)\n","res_df['max_lower'] = res_df['max_lower'].shift(shift_size)\n","res_df['minor_ST1_Trend'] = res_df['minor_ST1_Trend'].shift(shift_size)\n","res_df['minor_ST2_Trend'] = res_df['minor_ST2_Trend'].shift(shift_size)\n","res_df['minor_ST3_Trend'] = res_df['minor_ST3_Trend'].shift(shift_size)\n","res_df['middle_line'] = res_df['middle_line'].shift(shift_size)\n","\n","print(res_df.tail(5))"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["                            open     high  ...  min_upper  max_lower\n","2021-06-30 23:55:59.999  0.27223  0.27281  ...   0.272145    0.27005\n","2021-06-30 23:56:59.999  0.27274  0.27290  ...   0.272145    0.27005\n","2021-06-30 23:57:59.999  0.27246  0.27257  ...   0.272523    0.27021\n","2021-06-30 23:58:59.999  0.27166  0.27183  ...   0.272523    0.27021\n","2021-06-30 23:59:59.999  0.27144  0.27211  ...   0.272523    0.27021\n","\n","[5 rows x 37 columns]\n","                            open     high  ...  min_upper  max_lower\n","2021-06-30 23:55:59.999  0.27223  0.27281  ...   0.272523    0.27021\n","2021-06-30 23:56:59.999  0.27274  0.27290  ...        NaN        NaN\n","2021-06-30 23:57:59.999  0.27246  0.27257  ...        NaN        NaN\n","2021-06-30 23:58:59.999  0.27166  0.27183  ...        NaN        NaN\n","2021-06-30 23:59:59.999  0.27144  0.27211  ...        NaN        NaN\n","\n","[5 rows x 37 columns]\n"]}]},{"cell_type":"markdown","metadata":{"id":"2gxvme1PC6ha"},"source":["### load model"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dtYdAuSsC72_","executionInfo":{"elapsed":5831,"status":"ok","timestamp":1628862368878,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"outputId":"e8dccc53-aaa7-4bab-ed8d-753f634c08d6"},"source":["# model_name = 'inner_tick_cnnreg_lscalemm_prefee_gpu_%s_%s_%s_%s_%s.h5'\n","\n","# model = tf.keras.models.load_model(ckpt_path + model_name)\n","\n","from tensorflow.keras.applications.resnet50 import ResNet50\n","\n","model = ResNet50(weights='imagenet', include_top=False)\n","# model.summary()\n"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/resnet/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5\n","94773248/94765736 [==============================] - 1s 0us/step\n"]}]},{"cell_type":"markdown","metadata":{"id":"5la6usMOFzkX"},"source":["#### gen selected vector"]},{"cell_type":"code","metadata":{"id":"oQk3-jbKF8FB"},"source":["def min_max_scale(npy_x):\n","\n","  return (npy_x - np.min(npy_x)) / (np.max(npy_x) - np.min(npy_x))\n","\n","def expand_dims(npy_x):\n","\n","  row, col = npy_x.shape\n","  npy_x2 = np.array(npy_x).reshape(-1, row, col, 1).astype(np.float32)\n","  # input_x = np.array(data_x).reshape(-1, row, col).astype(np.float32)\n","\n","  #     1c to 3c    #\n","  npy_x3 = npy_x2 * np.ones(3, dtype=np.float32)[None, None, None, :]\n","\n","  return npy_x3\n","\n","\n","def vector_dist(f1, f2):\n","  return np.linalg.norm(f1-f2)\n","\n","\n","\n","# ------------------------ params ------------------------  #\n","selected_i = 500\n","input_size = 100\n","\n","\n","\n","#   1. 선택된 인덱스를 입력받았을 때, input generating 형태만 만들어놓고,     #\n","#   1-1. input cols 필요함    #\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower']\n","# senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","# senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","\n","sma_list = ['sma']\n","\n","#     -------------- outer price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","cctbbo_list = ['cctbbo']\n","\n","selected_price_colname = basic_list + senkoua_list + senkoub_list + sar_list\n","selected_outprice_colname = [macd_list]\n","\n","\n","#         global scaling for outer price data       #\n","#         1. nan 처리       #\n","\n","# # print((np.isnan(df.values)))\n","# print(\"np.sum(np.isnan(df.values), axis=0) :\", np.sum(np.isnan(df.values), axis=0))\n","\n","# max_nan = np.max(np.sum(np.isnan(df.values), axis=0))\n","# # print(max_nan)\n","\n","# df = df.iloc[max_nan:-max_nan]\n","\n","# total_gdata = []\n","# for g_col in selected_outprice_colname:\n","\n","#   temp_data = min_max_scale(res_df[g_col])\n","#   total_gdata.append(temp_data)\n","\n","\n","\n","#   1-2. cols 에 따른, scaling method 구분함    #\n","onprice_input_x = min_max_scale(res_df[selected_price_colname].iloc[selected_i - input_size:selected_i].values)\n","print(onprice_input_x.shape)\n","\n","\n","#   2. plot_check 에서 본인이 원하는 shape 의 인덱스를 선택   #\n","#   3. vertorize, \n","#   3-1. input generator 를 이용해 entry signal 발생할 때마다 dist 비교 진행    #\n","re_onprice_input_x = expand_dims(onprice_input_x)\n","print(re_onprice_input_x.shape)\n","      \n","# break\n","\n","selected_vector = model.predict(re_onprice_input_x, verbose=1)\n","print(selected_vector.shape)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"OJqkmkpsLCYC"},"source":["### tr_tresh calc"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gcpo4MGd9Wm4","executionInfo":{"elapsed":446,"status":"ok","timestamp":1636015063790,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"outputId":"434b56b3-3a3c-45c1-f559-42681fea5f05"},"source":["res_wr = 0.6\n","# tr_thresh = 1\n","# tr_thresh = ((1 - res_wr) / res_wr) ** 0.5\n","tr_thresh = ((1 - res_wr) / res_wr) + 0.01\n","# tr_thresh = 2.6\n","print(\"res_wr :\", res_wr)\n","print(\"tr_thresh :\", tr_thresh)\n","\n","\n","#   단리    #\n","trade_num = 1000\n","asset = 1 # thousand USDT\n","test_loss_gap = 0.95  # fee adjusted\n","test_pr_gap = 1 + (1 - test_loss_gap) * tr_thresh\n","\n","test_loss_cnt = trade_num * (1 - res_wr)\n","test_pr_cnt = trade_num * res_wr\n","\n","test_trade_list = [test_pr_gap] * int(test_pr_cnt) + [test_loss_gap] * int(test_loss_cnt)\n","random.shuffle(test_trade_list)\n","# print(\"len(test_trade_list) :\", len(test_trade_list))\n","print(test_trade_list[:10])\n","print()\n","\n","# print(\"%.5f\" % np.cumprod(test_trade_list)[-1])\n","for tr_thresh_ in np.arange(1, 3, 0.2):\n","  if (1 + (1 - test_loss_gap) * tr_thresh_) ** test_pr_cnt * test_loss_gap ** test_loss_cnt > 1:\n","    break\n","print(\"복리를 위한 tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumprod(test_trade_list)[-1] :\", np.cumprod(test_trade_list)[-1])\n","print(\"total_pr : \", np.cumprod(test_trade_list)[-1])\n","print()\n","#   복리 tr_thresh  #\n","#   1. trade_num 에 영향 받지 않음\n","#   2. loss_gap 에 비례함\n","\n","for tr_thresh_ in np.arange(1, 3, 0.01):\n","  if ((1 - test_loss_gap) * tr_thresh_) * test_pr_cnt + (test_loss_gap - 1) * test_loss_cnt > 0:\n","    break\n","np_test_trade = np.array(test_trade_list) - 1\n","print(np_test_trade[:10])\n","# print(\"%.3f\" % )\n","print(\"단리를 위한 tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumsum(np_test_trade)[-1] :\", np.cumsum(np_test_trade)[-1])\n","print(\"total_pr : \", 1 + np.cumsum(np_test_trade)[-1])\n"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["res_wr : 0.6\n","tr_thresh : 0.6766666666666667\n","[0.95, 1.0338333333333334, 0.95, 0.95, 1.0338333333333334, 0.95, 0.95, 1.0338333333333334, 0.95, 1.0338333333333334]\n","\n","복리를 위한 tr_thresh_ : 1.0\n","np.cumprod(test_trade_list)[-1] : 0.5751227991397774\n","total_pr :  0.5751227991397774\n","\n","[-0.05        0.03383333 -0.05       -0.05        0.03383333 -0.05\n"," -0.05        0.03383333 -0.05        0.03383333]\n","단리를 위한 tr_thresh_ : 1.0\n","np.cumsum(np_test_trade)[-1] : 0.30000000000001137\n","total_pr :  1.3000000000000114\n"]}]},{"cell_type":"markdown","metadata":{"id":"JNQxkb06ZdTe"},"source":["# traded section plot"]},{"cell_type":"markdown","metadata":{"id":"UmH_Pb5BZUtm"},"source":["## plot with off-color st with dash"]},{"cell_type":"markdown","metadata":{"id":"5z4L3MMYmUI0"},"source":["### sorted plot_check"]},{"cell_type":"code","metadata":{"id":"L9LdjV2uUWnp"},"source":["# plot_pr_list[:100]\n","\n","plt.plot(np_pr)\n","plt.axhline(1)\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Qv1MM2MemZnF","colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1Hz8Kk4pW5trHiNiDG86MzJrQcE6mYXxS"},"executionInfo":{"status":"ok","timestamp":1638103160299,"user_tz":-540,"elapsed":61901,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"fcd73f82-b38d-442f-ab7a-3cd22ae356d1"},"source":["assert len(open_list) == len(trade_list), \"len(open_list) != len(trade_list)\"\n","\n","save_plot = 0\n","pr_sort = 0\n","pr_descend = 1\n","wl_case = -1\n","position = config.ep_set.short_entry_score  \n","# position = 0\n","\n","inversion = 0\n","hedge = 0\n","\n","if save_plot:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".ftr\", \"\")\n","  try:\n","    os.mkdir(plot_check_dir)\n","  except:\n","\n","    #     remove existing dir   #\n","    shutil.rmtree(plot_check_dir)\n","    print(plot_check_dir, 'removed !')\n","    os.mkdir(plot_check_dir)\n","    # pass\n","    \n","\n","prev_plotsize = 300\n","post_plotsize = 200\n","\n","\n","\n","if inversion:  \n","\n","    plot_pr_list = rev_np_pr\n","    h_plot_pr_list = h_rev_np_pr  # hedge\n","\n","else:\n","\n","    plot_pr_list = np_pr\n","    try:\n","      h_plot_pr_list = h_np_pr\n","    except Exception as e:\n","      print(\"error in h_plot_pr :\", e)\n","      h_plot_pr_list = np_pr\n","\n","\n","h_candle_intv1 = 5\n","h_candle_intv2 = 15\n","res_df = h_candle(res_df, h_candle_intv1)\n","res_df = h_candle(res_df, h_candle_intv2)\n","\n","\n","res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=15, use_dtk_line=config.loc_set.use_dtk_line)\n","# res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=1, use_dtk_line=1)\n","# break\n","\n","rtc_list = [\"short_tp_1\", \"short_tp_gap\", \"long_tp_1\", \"long_tp_gap\"]\n","# h_rtc_list = [\"h_short_tp_1\", \"h_short_tp_gap\", \"h_long_tp_1\", \"h_long_tp_gap\"]\n","dtk_list = [\"short_dtk_1\", \"short_dtk_gap\", \"long_dtk_1\", \"long_dtk_gap\",\n","            # \"short_dtk_1_line\", \"short_dtk_gap_line\", \"long_dtk_1_line\", \"long_dtk_gap_line\",\n","            \"short_dtk_plot_1\", \"short_dtk_plot_gap\", \"long_dtk_plot_1\", \"long_dtk_plot_gap\"]\n","dc_v2_list = ['dc_upper_v2', 'dc_lower_v2']\n","\n","\n","ohlc_list = ['open', 'high', 'low', 'close'] # + basic_st_list\n","hcandle_list = ['hopen_%s' % h_candle_intv1, 'hclose_%s' % h_candle_intv1, 'hopen_%s' % h_candle_intv2, 'hclose_%s' % h_candle_intv2]\n","\n","# --------------------- dc & bb level --------------------- #\n","dc_interval = '1m'\n","hdc_interval = '5m'\n","hhdc_interval = '30m'\n","\n","dc_list = ['dc_upper_%s' % dc_interval, 'dc_lower_%s' % dc_interval]\n","hdc_list = ['dc_upper_%s' % hdc_interval, 'dc_lower_%s' % hdc_interval]\n","hhdc_list = ['dc_upper_%s' % hhdc_interval, 'dc_lower_%s' % hhdc_interval]\n","\n","bb_interval = dc_interval\n","hbb_interval = hdc_interval\n","hhbb_interval = hhdc_interval\n","\n","bb_list = ['bb_upper_%s' % bb_interval, 'bb_lower_%s' % bb_interval]\n","hbb_list = ['bb_upper_%s' % hbb_interval, 'bb_lower_%s' % hbb_interval]\n","hhbb_list = ['bb_upper_%s' % hhbb_interval, 'bb_lower_%s' % hhbb_interval]\n","\n","bbwp_list = ['bbwp', 'bbwp_ma']\n","\n","\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1']\n","senkoub_list = ['senkou_b1']\n","\n","sar_list = ['sar_15m']\n","\n","# ma_list = ['sma1', 'sma4']\n","sma_list = ['sma_1m']\n","\n","# -------------- price rolling indi. -------------- #\n","ema_list = ['ema5_1m']\n","# cb_list = ['cloud_bline_1m']\n","cb_list = ['cloud_bline_30m']\n","# cb_list = ['cloud_bline_5m']\n","\n","\n","\n","# -------------- under price phase -------------- #\n","# macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist%s' % basic_st_interval]\n","# macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3']\n","# trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix%s' % basic_st_interval]\n","trix_list = ['trix1', 'trix2', 'trix3']\n","stoch_list = ['stoch_5m']\n","fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","cctbbo_list = ['cctbbo']\n","emaroc_list = ['ema_roc']\n","\n","\n","# -------------- summation -------------- #\n","# input_colname = ohlc_list + basic_st_list + pline_list + bb_list + hbb_list + sma_list + cb_list + stoch_list + sar_list + dc_list\n","input_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + hhdc_list + dtk_list + dc_v2_list #+ rtc_list #+ h_rtc_list\n","\n","# yrange_colname = ohlc_list + basic_st_list + pline_list # currently just used for ymin, ymax\n","yrange_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + hhdc_list + dc_v2_list # currently just used for ymin, ymax\n","\n","\n","# aggr_obj = dict(zip(plot_pr_list, open_list, enumerate(trade_list)))\n","aggr_obj = dict(zip(plot_pr_list, zip(open_list, enumerate(trade_list))))\n","\n","sorted_obj = sorted(aggr_obj.items(), key=(lambda x: x[0]), reverse=pr_descend)\n","# print(aggr_obj)\n","# print(sorted_obj)\n","\n","if pr_sort:\n","  iter_obj = sorted_obj\n","else:\n","  iter_obj = aggr_obj.items()\n","\n","for temp_pr, (open_idx, (t_i, (ep_idx_list_, tp_idx_list_))) in iter_obj:  # 0.699700153073042, (291402, (3014, ([370012], [370014])))\n","\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","\n","  if wl_case == 1:\n","    if plot_pr_list[t_i] < 1.0:\n","      continue  \n","  \n","  elif wl_case == -1:\n","    if plot_pr_list[t_i] > 1.0:\n","      continue  \n","  \n","  #   open size indexing by open_idx    #\n","  open_side = res_df['entry'].iloc[open_idx]\n","  print(\"open_side :\", open_side)\n","\n","\n","  # ---------- const. zone ---------- #\n","\n","  if position != 0:\n","    if open_side == -position:\n","      continue\n","\n","  # if open_idx == 63901:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  # if tp_state_list[t_i] != 'd-open':\n","\n","  # if tp_ratio_list[t_i] > 0.4:\n","  #   continue\n","\n"," \n","  # print(\"open_idx :\", open_idx)\n","  print(\"np_timeidx[open_idx] :\", np_timeidx[open_idx])\n","\n","\n","  plot_df = res_df.iloc[open_idx - prev_plotsize:tp_idx_list_[-1] + post_plotsize][input_colname]\n","\n","\n","  #       keep off-color st with another variable         #\n","  # st_trend_plot_df = res_df[['ST1_Trend%s' % basic_st_interval, 'ST2_Trend%s' % basic_st_interval, 'ST3_Trend%s' % basic_st_interval]].iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","\n","  # fig = trendln.plot_support_resistance(plot_df['close'], accuracy=8, fromwindows=0, numbest=1,  window=30) # requires matplotlib - pip install matplotlib\n","  \n","  plt.style.use('dark_background')\n","\n","  fig = plt.figure(figsize=(14, 18))\n","  \n","  gs = gridspec.GridSpec(nrows=3, # row 몇 개 \n","                       ncols=1, # col 몇 개 \n","                       height_ratios=[3, 1, 1]\n","                      )\n","  \n","  ax = fig.add_subplot(gs[0])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='#26a69a', colordown='#ef5350')\n","\n","  # ---------- h_candle ---------- #\n","  alpha = 1\n","  lw = 0.5\n","  for cd_i, candle in enumerate(hcandle_list):\n","\n","    if cd_i == 2:\n","      lw = 2      \n","    plt.step(np.arange(len(plot_df)), plot_df[candle].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","\n","  # alpha = 0.1\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['hclose_60'].values, plot_df['hopen_60'].values, \n","  #                     where=1, facecolor='#ffffff', alpha=alpha)  \n","  \n","\n","  \n","  # ---------------------- dc_v2 ---------------------- #\n","  alpha = 1\n","  lw = 2\n","  for sm_i, item in enumerate(dc_v2_list):\n","      plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","  # ---------------------- dc ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(dc_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","  # ---------------------- hdc ---------------------- #\n","  alpha = 1\n","  lw = 2\n","  for sm_i, item in enumerate(hdc_list):\n","      plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#e65100', linewidth=lw)\n","\n","  # ---------------------- hhdc ---------------------- #\n","  alpha = 1\n","  lw = 4\n","  for sm_i, item in enumerate(hhdc_list):\n","      plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#c2185b', linewidth=lw)\n","\n","\n","  # ---------------------- bb ---------------------- #\n","  alpha = 1\n","  lw = 1\n","  for sm_i, item in enumerate(bb_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","\n","  alpha = 0.2\n","  plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % bb_interval].values, plot_df['bb_lower_%s' % bb_interval].values, \n","                      where=plot_df['bb_upper_%s' % bb_interval].values >= plot_df['bb_lower_%s' % bb_interval].values, facecolor='#ffffff', alpha=alpha)   \n","\n","  # ---------------------- hbb ---------------------- #\n","  alpha = 1\n","  lw = 2\n","  for sm_i, item in enumerate(hbb_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ff00ff', linewidth=lw)\n","  \n","  alpha = 0.2\n","  plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % hbb_interval].values, plot_df['bb_lower_%s' % hbb_interval].values, \n","                      where=plot_df['bb_upper_%s' % hbb_interval].values >= plot_df['bb_lower_%s' % hbb_interval].values, facecolor='#ff00ff', alpha=alpha) \n","  \n","  # ---------------------- hhbb ---------------------- #\n","\n","  alpha = 1\n","  lw = 4\n","  for sm_i, item in enumerate(hhbb_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#3179f5', linewidth=lw)\n","  \n","  alpha = 0.2\n","  plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % hhbb_interval].values, plot_df['bb_lower_%s' % hhbb_interval].values, \n","                      where=plot_df['bb_upper_%s' % hhbb_interval].values >= plot_df['bb_lower_%s' % hhbb_interval].values, facecolor='#3179f5', alpha=alpha) \n","  \n","  # ------------------- dtk_line (old, tp_line) ------------------- #\n","  \n","  # alpha = 1\n","  # lw = 2\n","  # rtc_ratio_list = [config.loc_set.dt_k]\n","  \n","  # for rtc_k in rtc_ratio_list:    \n","  #   # plt.step(np.arange(len(plot_df)), plot_df['short_dtk_1_line'].values - plot_df['short_dtk_gap_line'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['long_dtk_1_line'].values + plot_df['long_dtk_gap_line'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","\n","  # hy_min = np.min(plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * rtc_k)\n","  # hy_max = np.max(plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * rtc_k)  \n","\n","  # alpha = 1\n","  # lw = 4\n","  # # h_rtc_ratio_list = [config.loc_set.dt_k]\n","  # h_rtc_ratio_list = [config.loc_set.zone_dt_k]\n","  # # h_rtc_ratio_list = [0.272, 0.36, 0.4, 0.5]\n","  \n","  # for h_rtc_k in h_rtc_ratio_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df['short_dtk_plot_1'].values - plot_df['short_dtk_plot_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['long_dtk_plot_1'].values + plot_df['long_dtk_plot_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['h_short_tp_1'].values - plot_df['h_short_tp_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['h_long_tp_1'].values + plot_df['h_long_tp_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","\n","  # # hy_min = np.min(plot_df['short_dtk_plot_1'].values - plot_df['short_dtk_plot_gap'].values * h_rtc_k)\n","  # # hy_max = np.max(plot_df['long_dtk_plot_1'].values + plot_df['long_dtk_plot_gap'].values * h_rtc_k)  \n","\n","  # ------------------------------------------------------------- #\n","\n","\n","  # ------------- ep ------------- #\n","  # if i != initial_i:\n","  # if len(ep_idx_list_) > 1:\n","  \n","    #        initial order         #\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='#ffeb3b')\n","  plt.axvline(prev_plotsize, alpha=0.5, linestyle='--', color='#ffeb3b')\n","\n","  for ep_i in range(len(ep_idx_list_)):\n","    # plt.axvline(prev_plotsize + (ep_idx_list_[ep_i] - ep_idx_list_[0]), alpha=0.7, linestyle='--', color='#ffeb3b')\n","    plt.axvline(prev_plotsize + (ep_idx_list_[ep_i] - open_idx), alpha=0.7, linestyle='--', color='#ffeb3b')\n","\n","  # plt.axvline(prev_plotsize, alpha=0.5, linestyle='--')\n","\n","  x0,x1 = plt.gca().get_xlim()\n","\n","  # ep_xmin = (prev_plotsize + (ep_idx_list_[ep_i] - ep_idx_list_[0])) / x1\n","  ep_xmin = (prev_plotsize + (ep_idx_list_[ep_i] - open_idx)) / x1\n","  plt.axhline(ep_tp_list[t_i][0], linestyle='--', xmin=ep_xmin, xmax=1, alpha=1, color='lime')  # ep line axhline  \n","  plt.text(x1, ep_tp_list[t_i][0][0], ' ep :\\n %s' % ep_tp_list[t_i][0][0], ha='left', va='center', fontweight='bold') # ep line label\n","\n","  \n","  # ------------- tp ------------- #\n","  for sub_i in range(len(ep_tp_list[t_i][1])):\n","\n","    # tp_xmin = (prev_plotsize + (tp_idx_list_[sub_i] - ep_idx_list_[0])) / x1\n","    tp_xmin = (prev_plotsize + (tp_idx_list_[sub_i] - open_idx)) / x1\n","    plt.axhline(ep_tp_list[t_i][1][sub_i], linestyle='--', xmin=tp_xmin , xmax=1, alpha=1, color='lime')  # tp line axhline\n","    plt.text(x1, ep_tp_list[t_i][1][sub_i], ' tp :\\n %s' % ep_tp_list[t_i][1][sub_i], ha='left', va='center', fontweight='bold') # tp line label\n","     \n","    # plt.axvline(prev_plotsize + (tp_idx_list_[sub_i] - ep_idx_list_[0]), alpha=1., linestyle='--', color='#ffeb3b', zorder=2)\n","    plt.axvline(prev_plotsize + (tp_idx_list_[sub_i] - open_idx), alpha=1., linestyle='--', color='#ffeb3b', zorder=2)\n","\n","\n","  # ------------- rtc horizontal range ------------- #\n","  # rtc_ratio_list = [-0.5, 0.272, 0.36, 0.4, 0.5]\n","  rtc_ratio_list = [0.272, 0.36, 0.4, 0.5]\n","  if open_side == config.ep_set.short_entry_score:\n","    # plt.axhline(res_df['short_rtc_1'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    # plt.axhline(res_df['short_rtc_0'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    plt.axhline(res_df['short_out'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    plt.text(x0, res_df['short_out'].iloc[open_idx], ' %s' % config.tr_set.out_gap, ha='left', va='center', fontweight='bold')\n","\n","    for rtc_k in rtc_ratio_list:\n","      plt.axhline(res_df['h_short_rtc_1'].iloc[open_idx] - res_df['h_short_rtc_gap'].iloc[open_idx] * rtc_k, linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","      plt.text(x0, res_df['h_short_rtc_1'].iloc[open_idx] - res_df['h_short_rtc_gap'].iloc[open_idx] * rtc_k, ' %s' % rtc_k, ha='left', va='center', fontweight='bold')\n","      \n","    y_max = res_df['h_short_rtc_0'].iloc[open_idx]\n","    y_min = res_df['h_short_rtc_1'].iloc[open_idx] - res_df['h_short_rtc_gap'].iloc[open_idx] * rtc_k\n","\n","    print(\"short_tp :\", res_df['short_tp'].iloc[open_idx])\n","    print(\"short_out :\", res_df['short_out'].iloc[open_idx])\n","\n","  else:\n","    # plt.axhline(res_df['long_rtc_1'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    # plt.axhline(res_df['long_rtc_0'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff') \n","    plt.axhline(res_df['long_out'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    plt.text(x0, res_df['long_out'].iloc[open_idx], ' %s' % config.tr_set.out_gap, ha='left', va='center', fontweight='bold')\n","\n","    for rtc_k in rtc_ratio_list:\n","      plt.axhline(res_df['h_long_rtc_1'].iloc[open_idx] + res_df['h_long_rtc_gap'].iloc[open_idx] * rtc_k, linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","      plt.text(x0, res_df['h_long_rtc_1'].iloc[open_idx] + res_df['h_long_rtc_gap'].iloc[open_idx] * rtc_k, ' %s' % rtc_k, ha='left', va='center', fontweight='bold')\n","\n","    y_max = res_df['h_long_rtc_1'].iloc[open_idx] + res_df['h_long_rtc_gap'].iloc[open_idx] * rtc_k\n","    y_min = res_df['h_long_rtc_0'].iloc[open_idx]\n","\n","    print(\"long_tp :\", res_df['long_tp'].iloc[open_idx])\n","    print(\"long_out :\", res_df['long_out'].iloc[open_idx])\n","  \n","    # t_tr = ((res_df['long_tp'].iloc[open_idx] - res_df['close'].iloc[open_idx] - tp_fee * res_df['close'].iloc[open_idx]) / (res_df['close'].iloc[open_idx] - res_df['long_out'].iloc[open_idx] + out_fee * res_df['close'].iloc[open_idx]))\n","    # t_dr = ((res_df['long_tp'].iloc[open_idx] - res_df['close'].iloc[open_idx]) / (res_df['close'].iloc[open_idx] - res_df['long_out'].iloc[open_idx]))     \n","    # print(\"t_tr :\", t_tr)\n","    # print(\"t_dr :\", t_dr)\n","\n","  #         hedge ep & tp         #\n","  h_i = h_trade_list[t_i][1]\n","  if h_i is not None:\n","    # plt.axvline(prev_plotsize + (h_i - ep_idx_list_[0]), linestyle='--')\n","    plt.axvline(prev_plotsize + (h_i - open_idx), linestyle='--')\n","    plt.axhline(h_ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='magenta')  # ep line axhline\n","    plt.axhline(h_ep_tp_list[t_i][1], linestyle='-', xmin=0.85, xmax=1, linewidth=3, color='magenta')  # tp line axhline\n","\n","  \n","  temp_pr = plot_pr_list[t_i]\n","  # if temp_pr > 1:\n","  #   temp_pr_gap = (temp_pr - 1) / lvrg + fee\n","  #   pgfr = (temp_pr_gap - fee) / abs(temp_pr_gap + fee)\n","  # else:\n","  #   pgfr = np.nan\n","\n","  #         check pr        #\n","  if not config.lvrg_set.static_lvrg:\n","    plt.title(\"%s ~ %s -> %.5f\\n %s\\n h_pr : %.5f\\n lvrg : %s\\ntp_ratio : %.3f\\n dr : %.3f\\n fee : %.4f\" % (ep_idx_list_[0], tp_idx_list_[-1], plot_pr_list[t_i], tp_state_list[t_i], \n","                                                                                                h_plot_pr_list[t_i], leverage_list[t_i], tp_ratio_list[t_i], dr_list[t_i], fee_list[t_i]))\n","\n","    print(\"short real pr :\", (ep_tp_list[t_i][0] / ep_tp_list[t_i][1][sub_i] - fee_list[t_i] - 1) * leverage_list[t_i] + 1)\n","    print(\"long real pr :\", (ep_tp_list[t_i][1][sub_i] / ep_tp_list[t_i][0] - fee_list[t_i] - 1) * leverage_list[t_i] + 1)    \n","\n","  else:\n","    plt.title(\"%s ~ %s -> %.5f\\n %s\\n h_pr : %.5f\\n tp_ratio : %.3f\\n dr : %.3f\\n fee : %.4f\" % (ep_idx_list_[0], tp_idx_list_[-1], plot_pr_list[t_i], tp_state_list[t_i], \n","                                                                                     h_plot_pr_list[t_i], tp_ratio_list[t_i], dr_list[t_i], fee_list[t_i]))\n","\n","    print(\"short real pr :\", (ep_tp_list[t_i][0] / ep_tp_list[t_i][1][sub_i] - fee_list[t_i] - 1) * config.lvrg_set.leverage + 1)\n","    print(\"long real pr :\", (ep_tp_list[t_i][1][sub_i] / ep_tp_list[t_i][0] - fee_list[t_i] - 1) * config.lvrg_set.leverage + 1)\n","  \n","  #           y lim           #  \n","  y_max_ = max(np.max(plot_df[yrange_colname]))\n","  y_min_ = min(np.min(plot_df[yrange_colname]))\n","  # y_max = max(y_max, y_max_, hy_max)\n","  # y_min = min(y_min, y_min_, hy_min)\n","\n","  if np.isnan(y_max) or np.isnan(y_min):\n","    print('continued in yminmax')\n","    continue\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","  \n","\n","  plt.ylim(y_min, y_max)\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  if not save_plot:\n","    plt.show()\n","  \n","  else:\n","    # ---------- save mode ---------- #\n","    fig_name = plot_check_dir +  \"/%s.png\" % t_i\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","\n","  \n","  plt.close()\n","  print()\n","\n","  # break\n"],"execution_count":31,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"TBE0l6dHRYrE"},"source":["### whole pr & chart sync"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":877},"id":"-txULkhXRbz5","executionInfo":{"elapsed":1436,"status":"ok","timestamp":1636355589887,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"outputId":"7cda9fc7-4a4e-4c52-ffa3-a974b5f7c66f"},"source":["#     chunky survey 필요함    #\n","chunk_size = 50000\n","\n","sync_pr = np.ones(len(res_df))\n","sync_tr = np.zeros(len(res_df))\n","# sync_tr = np.empty(len(res_df))\n","# sync_tr[:] = np.nan\n","\n","max_tr = np.max(tp_ratio_list)\n","min_tr = np.min(tp_ratio_list)\n","\n","for ck_i in range(0, len(res_df), chunk_size):\n","\n","  chunked_df = res_df.iloc[ck_i:ck_i + chunk_size]\n","  # break\n","\n","  for pr_, eptp_idx, tr_ in zip(pr_list[ck_i:ck_i + chunk_size], trade_list[ck_i:ck_i + chunk_size], tp_ratio_list[ck_i:ck_i + chunk_size]):\n","    # print(pr_, eptp_idx)\n","    sync_pr[eptp_idx[-1][0]] = pr_\n","    sync_tr[eptp_idx[-1][0]] = tr_\n","    # break\n","\n","  chunked_pr = sync_pr[ck_i:ck_i + chunk_size]\n","  chunked_tr = sync_tr[ck_i:ck_i + chunk_size]\n","  chunked_tr = np.where(np.isnan(chunked_tr), pd.Series(chunked_tr).shift(1), chunked_tr)\n","\n","  # plt.figure(figsize=(8, 6))\n","\n","  plt.subplot(311)\n","  plt.plot(np.arange(len(chunked_df)), chunked_df['close'])\n","  # plt.show()\n","\n","  plt.subplot(312)\n","  plt.plot(np.cumprod(chunked_pr))\n","  \n","  plt.subplot(313)\n","  plt.plot(chunked_tr)\n","  plt.ylim(min_tr + 0.5 * (max_tr - min_tr), max_tr)\n","  \n","  plt.show()\n","  print()\n"],"execution_count":null,"outputs":[{"data":{"image/png":"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\n","text/plain":["<Figure size 640x480 with 3 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 3 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]}]},{"cell_type":"markdown","metadata":{"id":"Qys2Bw5Ou3u9"},"source":["### plot indi. legacy"]},{"cell_type":"code","metadata":{"id":"pi5ntOOVu6JT"},"source":["\n","  # ---------------------- ma ---------------------- #\n","   # --------- ema --------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(ema_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  #   # --------- sma --------- #\n","  # alpha = 1\n","  # for sm_i, sma in enumerate(sma_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 4\n","  #   plt.step(np.arange(len(plot_df)), plot_df[sma].values, alpha=alpha, color='#e91e63', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  \n","  # ---------------------- cb ---------------------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(cb_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#5b9cf6', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","\n","  \n","  #               sar               #\n","  # alpha = 1\n","  # markersize = 5\n","  # for sar in sar_list:\n","  #   plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","  #   markersize += 1\n","  #   alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  # alpha = 0.7\n","  # for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","  #                     where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","  #                     where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","  #   alpha -= 0.05\n","  \n","\n","\n","  # ---------------------- outer price indi. ---------------------- #\n","  #           macd          #\n","  # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","    \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for stoch_ in stoch_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[stoch_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(stoch_upper, linestyle='--')\n","  # plt.axhline(stoch_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- cctbbo ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for cctbbo in cctbbo_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cctbbo].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(cctbbo_upper, linestyle='--')\n","  # plt.axhline(cctbbo_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- ema_roc ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for emaroc in emaroc_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[emaroc].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","  \n","  # ---------- bbw ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for bbwp_ in bbwp_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[bbwp_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(bbwp_thresh, linestyle='--')\n","\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"59nW2aKYzkN8"},"source":["### plot all indicator (stepline ver.)"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":828},"id":"JDH4rXgNzno6","executionInfo":{"elapsed":3326,"status":"ok","timestamp":1631665238032,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"outputId":"3ee8589d-27d7-4433-ed78-7bb1233cf175"},"source":["save_plot = False\n","\n","\n","if save_plot:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".xlsx\", \"\")\n","  try:\n","    os.mkdir(plot_check_dir)\n","  except:\n","\n","    #     remove existing dir   #\n","    shutil.rmtree(plot_check_dir)\n","    print(plot_check_dir, 'removed !')\n","    os.mkdir(plot_check_dir)\n","    # pass\n","    \n","# prev_plotsize = 120\n","prev_plotsize = 150\n","post_plotsize = 20\n","\n","# inversion = True\n","inversion = False\n","\n","# hedge = True\n","# hedge = False\n","\n","\n","if inversion:  \n","\n","    plot_pr_list = rev_np_pr\n","    h_plot_pr_list = h_rev_np_pr  # hedge\n","\n","else:\n","\n","    plot_pr_list = np_pr\n","    try:\n","      h_plot_pr_list = h_np_pr\n","    except Exception as e:\n","      print(\"error in h_plot_pr :\", e)\n","      h_plot_pr_list = np_pr\n","\n","\n","#         select plot columns       #\n","major_st_list = ['major_ST1_Up', 'major_ST1_Down', 'major_ST2_Up', 'major_ST2_Down', 'major_ST3_Up', 'major_ST3_Down',\n","                 'major_middle_line', 'major_upper_middle', 'major_lower_middle']\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower'] # + major_st_list\n","\n","\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1',  'senkou_a2']\n","senkoub_list = ['senkou_b1',  'senkou_b2']\n","\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1']\n","\n","# ma_list = ['sma1', 'sma4']\n","ma_list = ['ema5']\n","\n","\n","#     -------------- under price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","# macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3']\n","# trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","trix_list = ['trix1', 'trix2', 'trix3']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","cctbbo_list = ['cctbbo']\n","emaroc_list = ['ema_roc']\n","\n","\n","#       \n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols + ichimoku_cols2\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + trix_list\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + ma_list\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + ma_list + macd_list + stoch_list + fisher_list + cctbbo_list\n","input_colname = basic_list + major_st_list + senkoua_list + senkoub_list + sar_list + stoch_list + fisher_list + emaroc_list\n","price_colname = basic_list + senkoua_list + senkoub_list + sar_list # currently just used for ymin, ymax\n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols\n","\n","\n","\n","\n","# for t_i, (initial_i, i, j) in enumerate(trade_list):\n","for t_i, (ep_idx_list_, tp_idx_list_) in enumerate(trade_list):\n","  # print(i, j)\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","\n","  # if i <= 4860:\n","  # if i == 1536:\n","  # if 100 < i < 1860:\n","  if ep_idx_list_[0] == 370530:\n","    pass\n","  else:\n","    continue\n","\n","  # if tp_state_list[t_i] != 'd-open':\n","  #   continue\n","\n","  # if (entry[i] == -1) and res_df['close'].iloc[i - 1] > short_ep.iloc[i]:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  # if plot_pr_list[t_i] > 0.5:\n","  # if plot_pr_list[t_i] > 1.0:\n","  # # if plot_pr_list[t_i] < 1.0:\n","  #   continue\n","\n","  # plot_df = res_df.iloc[i - prev_plotsize:j + post_plotsize, input_cols]\n","  plot_df = res_df.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize][input_colname]\n","\n","\n","  #       keep off-color st with another variable         #\n","  # st_trend_plot_df = res_df.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize, [7, 10, 13]]\n","  # st_trend_plot_df = res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend']].iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  st_trend_plot_df = res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend', 'major_ST1_Trend', 'major_ST2_Trend', 'major_ST3_Trend']].iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  # htf_st_trend_plot_df = res_df[['major_ST1_Trend', 'major_ST2_Trend', 'major_ST3_Trend']].iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","\n","  # y_max = np.max(plot_df.iloc[:, [4, 6, 8]])\n","  # y_min = np.min(plot_df.iloc[:, [5, 7, 9]])\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  \n","  # y_max = max(np.max(plot_df.iloc[:, [4, 6, 8]]))\n","  # y_min = min(np.min(plot_df.iloc[:, [5, 7, 9]]))\n","  \n","  y_max = max(np.max(plot_df[price_colname]))\n","  y_min = min(np.min(plot_df[price_colname]))\n","\n","  if np.isnan(y_max) or np.isnan(y_min):\n","    continue\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","  \n","  plot_df[\"off_color_upper_st1\"] = np.where(st_trend_plot_df['minor_ST1_Trend'] == 1, plot_df['minor_ST1_Up'], np.nan)\n","  plot_df[\"off_color_upper_st2\"] = np.where(st_trend_plot_df['minor_ST2_Trend'] == 1, plot_df['minor_ST2_Up'], np.nan)\n","  plot_df[\"off_color_upper_st3\"] = np.where(st_trend_plot_df['minor_ST3_Trend'] == 1, plot_df['minor_ST3_Up'], np.nan)\n","  plot_df[\"off_color_lower_st1\"] = np.where(st_trend_plot_df['minor_ST1_Trend'] == -1, plot_df['minor_ST1_Down'], np.nan)\n","  plot_df[\"off_color_lower_st2\"] = np.where(st_trend_plot_df['minor_ST2_Trend'] == -1, plot_df['minor_ST2_Down'], np.nan)\n","  plot_df[\"off_color_lower_st3\"] = np.where(st_trend_plot_df['minor_ST3_Trend'] == -1, plot_df['minor_ST3_Down'], np.nan)\n","\n","  plot_df[\"off_color_upper_hst1\"] = np.where(st_trend_plot_df['major_ST1_Trend'] == 1, plot_df['major_ST1_Up'], np.nan)\n","  plot_df[\"off_color_upper_hst2\"] = np.where(st_trend_plot_df['major_ST2_Trend'] == 1, plot_df['major_ST2_Up'], np.nan)\n","  plot_df[\"off_color_upper_hst3\"] = np.where(st_trend_plot_df['major_ST3_Trend'] == 1, plot_df['major_ST3_Up'], np.nan)\n","  plot_df[\"off_color_lower_hst1\"] = np.where(st_trend_plot_df['major_ST1_Trend'] == -1, plot_df['major_ST1_Down'], np.nan)\n","  plot_df[\"off_color_lower_hst2\"] = np.where(st_trend_plot_df['major_ST2_Trend'] == -1, plot_df['major_ST2_Down'], np.nan)\n","  plot_df[\"off_color_lower_hst3\"] = np.where(st_trend_plot_df['major_ST3_Trend'] == -1, plot_df['major_ST3_Down'], np.nan)\n","\n","\n","  #       replace st values with np.nan, using st trend     #\n","  plot_df['minor_ST1_Up'] = np.where(st_trend_plot_df['minor_ST1_Trend'] == 1, np.nan, plot_df['minor_ST1_Up'])\n","  plot_df['minor_ST2_Up'] = np.where(st_trend_plot_df['minor_ST2_Trend'] == 1, np.nan, plot_df['minor_ST2_Up'])\n","  plot_df['minor_ST3_Up'] = np.where(st_trend_plot_df['minor_ST3_Trend'] == 1, np.nan, plot_df['minor_ST3_Up'])\n","  plot_df['minor_ST1_Down'] = np.where(st_trend_plot_df['minor_ST1_Trend'] == -1, np.nan, plot_df['minor_ST1_Down'])\n","  plot_df['minor_ST2_Down'] = np.where(st_trend_plot_df['minor_ST2_Trend'] == -1, np.nan, plot_df['minor_ST2_Down'])\n","  plot_df['minor_ST3_Down'] = np.where(st_trend_plot_df['minor_ST3_Trend'] == -1, np.nan, plot_df['minor_ST3_Down'])\n","\n","  plot_df['major_ST1_Up'] = np.where(st_trend_plot_df['major_ST1_Trend'] == 1, np.nan, plot_df['major_ST1_Up'])\n","  plot_df['major_ST2_Up'] = np.where(st_trend_plot_df['major_ST2_Trend'] == 1, np.nan, plot_df['major_ST2_Up'])\n","  plot_df['major_ST3_Up'] = np.where(st_trend_plot_df['major_ST3_Trend'] == 1, np.nan, plot_df['major_ST3_Up'])\n","  plot_df['major_ST1_Down'] = np.where(st_trend_plot_df['major_ST1_Trend'] == -1, np.nan, plot_df['major_ST1_Down'])\n","  plot_df['major_ST2_Down'] = np.where(st_trend_plot_df['major_ST2_Trend'] == -1, np.nan, plot_df['major_ST2_Down'])\n","  plot_df['major_ST3_Down'] = np.where(st_trend_plot_df['major_ST3_Trend'] == -1, np.nan, plot_df['major_ST3_Down'])\n","\n","\n","  plot_short_ep = short_ep.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  plot_long_ep = long_ep.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","\n","  plot_upper_middle = (plot_df['middle_line'] + plot_df['min_upper']) / 2\n","  plot_lower_middle = (plot_df['middle_line'] + plot_df['max_lower']) / 2\n","\n","  plot_short_tp = short_tp.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  plot_long_tp = long_tp.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]  \n","\n","\n","  # fig = trendln.plot_support_resistance(plot_df['close'], accuracy=8, fromwindows=False, numbest=1,  window=30) # requires matplotlib - pip install matplotlib\n","\n","  fig = plt.figure(figsize=(12, 16))\n","  \n","  gs = gridspec.GridSpec(nrows=3, # row 몇 개 \n","                       ncols=1, # col 몇 개 \n","                       height_ratios=[3, 1, 1]\n","                      )\n","  \n","  # fig = plt.figure(figsize=(8, 12))\n","  # ax = fig.add_subplot(111)\n","  # ax = fig.add_subplot(311)\n","  ax = fig.add_subplot(gs[0])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='r', colordown='b')\n","\n","  plt.step(plot_df[['minor_ST1_Up', 'minor_ST2_Up', 'minor_ST3_Up']].values, 'r', alpha=1)  # upper on color\n","  plt.step(plot_df[['minor_ST1_Down', 'minor_ST2_Down', 'minor_ST3_Down']].values, 'b', alpha=1)  # lower on color\n","  \n","  plt.step(plot_df[['major_ST1_Up', 'major_ST2_Up', 'major_ST3_Up']].values, 'r', alpha=1, linewidth=3)  # major upper on color\n","  plt.step(plot_df[['major_ST1_Down', 'major_ST2_Down', 'major_ST3_Down']].values, 'b', alpha=1, linewidth=3)  # major lower on color\n","\n","  plt.step(plot_df[['middle_line']].values, 'fuchsia', alpha=1)  # middle \n","  plt.step(plot_df[['major_middle_line']].values, 'fuchsia', alpha=1, linewidth=3)  # major_middle \n","  \n","  plt.step(plot_df[['off_color_upper_st1', 'off_color_upper_st2', 'off_color_upper_st3']].values, 'r', alpha=1, linestyle=':')  # upper off color\n","  plt.step(plot_df[['off_color_lower_st1', 'off_color_lower_st2', 'off_color_lower_st3']].values, 'b', alpha=1, linestyle=':')  # lower off color\n","  \n","  plt.step(plot_df[['off_color_upper_hst1', 'off_color_upper_hst2', 'off_color_upper_hst3']].values, 'r', alpha=1, linestyle=':', linewidth=3)  # major upper off color\n","  plt.step(plot_df[['off_color_lower_hst1', 'off_color_lower_hst2', 'off_color_lower_hst3']].values, 'b', alpha=1, linestyle=':', linewidth=3)  # major lower off color\n","\n","\n","  # plt.step(np.arange(len(plot_df)), plot_short_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","  # plt.step(np.arange(len(plot_df)),plot_long_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","\n","  plt.step(np.arange(len(plot_df)), plot_upper_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","  plt.step(np.arange(len(plot_df)), plot_lower_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","\n","  plt.step(plot_df[['major_upper_middle']].values, 'g', linestyle='--', alpha=1, linewidth=3)  # major_middle \n","  plt.step(plot_df[['major_lower_middle']].values, 'g', linestyle='--', alpha=1, linewidth=3)  # major_middle \n","  \n","\n","  # plt.step(np.arange(len(plot_df)), plot_short_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","  # plt.step(np.arange(len(plot_df)), plot_long_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","\n","\n","\n","  # ---------------------- on price indicator part ---------------------- #\n","\n","  # ---------------------- sma ---------------------- #\n","  # alpha = 1\n","  # for sm_i, sma in enumerate(ma_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[sma].values, alpha=alpha, color='black', linewidth=lw)\n","  #   alpha -= 0.2\n","  \n","  #               sar               #\n","  alpha = 1\n","  markersize = 5\n","  for sar in sar_list:\n","    plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","    markersize += 1\n","    alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  alpha = 0.7\n","  for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","                      where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","                      where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","    alpha -= 0.05\n","  \n","  # ------------------------------------------------------------- #\n","\n","\n","  #       ep & tp     #\n","  # if i != initial_i:\n","  # if len(ep_idx_list_) > 1:\n","  \n","  # ------------- initial order ------------- #\n","  plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  for ep_i in range(len(ep_idx_list_)):\n","    plt.axvline(prev_plotsize + (ep_idx_list_[ep_i] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","\n","  # plt.axvline(prev_plotsize, alpha=0.5, linestyle='--')\n","  plt.axhline(ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='lime')  # ep line axhline\n","\n","  for sub_i in range(len(ep_tp_list[t_i][1])):\n","    plt.axhline(ep_tp_list[t_i][1][sub_i], linestyle='-', xmin=0.75 + 0.05 * (sub_i + 1) , xmax=1, linewidth=3, color='lime')  # tp line axhline\n","    # plt.axhline(ep_tp_list[t_i][1], linestyle='-', xmin=0.9, xmax=1, linewidth=3)  # tp line axhline  \n","    plt.axvline(prev_plotsize + (tp_idx_list_[sub_i] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","\n","\n","  #         hedge ep & tp         #\n","  h_i = h_trade_list[t_i][1]\n","  if h_i is not None:\n","    plt.axvline(prev_plotsize + (h_i - ep_idx_list_[0]), linestyle='--')\n","    plt.axhline(h_ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='magenta')  # ep line axhline\n","    plt.axhline(h_ep_tp_list[t_i][1], linestyle='-', xmin=0.85, xmax=1, linewidth=3, color='magenta')  # tp line axhline\n","\n","  \n","  #         check pr        #\n","  if not static_lvrg:\n","    plt.title(\"%s ~ %s -> %.5f\\n %s\\n h_pr : %.5f\\nlvrg : %s\\ntp_ratio : %.2f\" % (ep_idx_list_[0], tp_idx_list_[-1], plot_pr_list[t_i], tp_state_list[t_i], h_plot_pr_list[t_i], lvrg_list[t_i], tp_ratio_list[t_i]))\n","  else:\n","    plt.title(\"%s ~ %s -> %.5f\\n %s\\n h_pr : %.5f\\ntp_ratio : %.2f\" % (ep_idx_list_[0], tp_idx_list_[-1], plot_pr_list[t_i], tp_state_list[t_i], h_plot_pr_list[t_i], tp_ratio_list[t_i]))\n","\n","  print(\"short real pr :\", (ep_tp_list[t_i][0] / ep_tp_list[t_i][1][sub_i] - fee - 1) * lvrg + 1)\n","  print(\"long real pr :\", (ep_tp_list[t_i][1][sub_i] / ep_tp_list[t_i][0] - fee - 1) * lvrg + 1)\n","\n","  #           y lim         #\n","  plt.ylim(y_min, y_max)\n","\n","\n","  # ---------------------- outer price indi. ---------------------- #\n","  #           macd          #\n","  # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","    \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for stoch in stoch_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[stoch].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(stoch_upper, linestyle='--')\n","  # plt.axhline(stoch_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- cctbbo ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for cctbbo in cctbbo_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cctbbo].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(cctbbo_upper, linestyle='--')\n","  # plt.axhline(cctbbo_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- ema_roc ---------- #  \n","  plt.subplot(gs[1])\n","  alpha = 1\n","  for emaroc in emaroc_list:\n","    plt.step(np.arange(len(plot_df)), plot_df[emaroc].values, 'g', alpha=alpha)\n","    # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","    alpha -= 0.2\n","  plt.axvline(prev_plotsize, linestyle='--')\n","  plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","  plt.axhline(0, linestyle='--')\n","\n","\n","\n","\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  if not save_plot:\n","    plt.show()\n","  \n","  else:\n","    # ---------- save mode ---------- #\n","    fig_name = plot_check_dir +  \"/%s.png\" % t_i\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","\n","  \n","  plt.close()\n","  print()\n","\n","  # break\n"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["short real pr : [0.95849245]\n","long real pr : [1.0378222]\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 864x1152 with 2 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]}]},{"cell_type":"code","metadata":{"id":"KGuJu2j4Aby9"},"source":["# print()\n","for item in os.listdir(current_path + \"plot_check/\"):\n","  if item.endswith('png'):\n","    os.remove(current_path + \"plot_check/\" + item)\n","    print(current_path + \"plot_check/\" + item, \"removed !\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"cj9X6S1jJjER"},"source":["### plot nontp case"]},{"cell_type":"code","metadata":{"id":"Gb1jGrS4Jl8A"},"source":["prev_plotsize = 50\n","\n","# inversion = True\n","inversion = False\n","\n","# hedge = True\n","# hedge = False\n","\n","short_ver = False\n","\n","\n","if inversion:  \n","\n","    plot_pr_list = rev_np_pr\n","    h_plot_pr_list = h_rev_np_pr  # hedge\n","\n","else:\n","\n","    plot_pr_list = np_pr\n","    h_plot_pr_list = h_np_pr\n","\n","\n","\n","#         select plot columns       #\n","# basic_cols = [0, 1, 2, 3, 5, 6, 8, 9, 11, 12, 14] # you don't need to touch\n","\n","# sar_cols = [15, 18] # 15 ~ 19\n","# ichimoku_cols = [20, 21]  # 20 ~ 29\n","# # ichimoku_cols = [22, 23]  # 20 ~ 29\n","# ichimoku_cols2 = [22, 23]  # 20 ~ 29\n","# macd_cols = [30]  # 30 ~ 34\n","\n","# print(res_df.columns[basic_cols])\n","# break\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower']\n","# senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","# senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","\n","#     -------------- under price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher']\n","cctbbo_list = ['cctbbo']\n","\n","\n","#       \n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols + ichimoku_cols2\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + trix_list\n","input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + stoch_list + fisher_list + cctbbo_list\n","price_colname = basic_list + senkoua_list + senkoub_list + sar_list \n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols\n","\n","\n","if short_ver:\n","  nontp_indexs = nontp_short_indexs\n","  nontp_liqd_list = nontp_short_liqd_list\n","  nontp_pr_list = nontp_short_pr_list\n","  nontp_ep = nontp_short_ep_list\n","else:\n","  nontp_indexs = nontp_long_indexs\n","  nontp_liqd_list = nontp_long_liqd_list\n","  nontp_pr_list = nontp_long_pr_list\n","  nontp_ep = nontp_long_ep_list\n","\n","\n","for t_i, i in enumerate(nontp_indexs):\n","\n","  j = len(res_df) - 1\n","\n","  # print(i, j)\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","\n","  # if i <= 4860:\n","  # if i == 1536:\n","  # # if 1800 < i < 1860:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  # if tp_state_list[t_i] != 'd-open':\n","  #   continue\n","\n","  # if (entry[i] == -1) and res_df['close'].iloc[i - 1] > upper_ep.iloc[i]:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  # if plot_pr_list[t_i] > 0.5:\n","  # if plot_pr_list[t_i] > 1.0:\n","  # # if plot_pr_list[t_i] < 1.0:\n","  #   continue\n","\n","  # plot_df = res_df.iloc[i - prev_plotsize:j + 1, input_cols]\n","  plot_df = res_df.iloc[i - prev_plotsize:j + 1][input_colname]\n","\n","\n","  #       keep off-color st with another variable         #\n","  st_trend_plot_df = res_df.iloc[i - prev_plotsize:j + 1, [7, 10, 13]]\n","\n","  # y_max = np.max(plot_df.iloc[:, [4, 6, 8]])\n","  # y_min = np.min(plot_df.iloc[:, [5, 7, 9]])\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  \n","  # y_max = max(np.max(plot_df.iloc[:, [4, 6, 8]]))\n","  # y_min = min(np.min(plot_df.iloc[:, [5, 7, 9]]))\n","  \n","  y_max = max(np.max(plot_df[price_colname]))\n","  y_min = min(np.min(plot_df[price_colname]))\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","\n","  plot_df[\"off_color_upper_st1\"] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, plot_df.iloc[:, [4]], np.nan)\n","  plot_df[\"off_color_upper_st2\"] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, plot_df.iloc[:, [6]], np.nan)\n","  plot_df[\"off_color_upper_st3\"] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, plot_df.iloc[:, [8]], np.nan)\n","  plot_df[\"off_color_lower_st1\"] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, plot_df.iloc[:, [5]], np.nan)\n","  plot_df[\"off_color_lower_st2\"] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, plot_df.iloc[:, [7]], np.nan)\n","  plot_df[\"off_color_lower_st3\"] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, plot_df.iloc[:, [9]], np.nan)\n","\n","\n","  #       replace st values with np.nan, using st trend     #\n","  plot_df.iloc[:, [4]] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, np.nan, plot_df.iloc[:, [4]])\n","  plot_df.iloc[:, [6]] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, np.nan, plot_df.iloc[:, [6]])\n","  plot_df.iloc[:, [8]] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, np.nan, plot_df.iloc[:, [8]])\n","  plot_df.iloc[:, [5]] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, np.nan, plot_df.iloc[:, [5]])\n","  plot_df.iloc[:, [7]] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, np.nan, plot_df.iloc[:, [7]])\n","  plot_df.iloc[:, [9]] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, np.nan, plot_df.iloc[:, [9]])\n","\n","\n","  plot_upper_ep = upper_ep.iloc[i - prev_plotsize:j + 1]\n","  plot_lower_ep = lower_ep.iloc[i - prev_plotsize:j + 1]\n","\n","  plot_upper_middle = (plot_df['middle_line'] + plot_df['min_upper']) / 2\n","  plot_lower_middle = (plot_df['middle_line'] + plot_df['max_lower']) / 2\n","\n","  plot_short_tp = short_tp.iloc[i - prev_plotsize:j + 1]\n","  plot_long_tp = long_tp.iloc[i - prev_plotsize:j + 1]  \n","\n","\n","\n","  # fig = plt.figure(figsize=(12, 16))\n","  fig = plt.figure(figsize=(12, 16))\n","  \n","  gs = gridspec.GridSpec(nrows=3, # row 몇 개 \n","                       ncols=1, # col 몇 개 \n","                       height_ratios=[3, 1, 1]\n","                      )\n","  \n","  # fig = plt.figure(figsize=(8, 12))\n","  # ax = fig.add_subplot(111)\n","  # ax = fig.add_subplot(311)\n","  ax = fig.add_subplot(gs[0])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='r', colordown='b')\n","\n","  # print(plot_df.values[:, 4:])\n","  plt.step(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper on color\n","  # plt.plot(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper on color\n","  plt.step(plot_df.values[:, [5, 7, 9]], 'b', alpha=1)  # lower on color\n","  plt.step(plot_df.values[:, [10]], 'fuchsia', alpha=1)  # middle\n","  \n","  plt.step(plot_df.values[:, -6:-3], 'r', alpha=1, linestyle=':')  # upper off color\n","  plt.step(plot_df.values[:, -3:], 'b', alpha=1, linestyle=':')  # lower off color\n","\n","\n","\n","  # plt.step(np.arange(len(plot_df)), plot_upper_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","  # plt.step(np.arange(len(plot_df)),plot_lower_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","\n","  plt.step(np.arange(len(plot_df)), plot_upper_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","  plt.step(np.arange(len(plot_df)), plot_lower_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","\n","  # plt.step(np.arange(len(plot_df)), plot_short_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","  # plt.step(np.arange(len(plot_df)), plot_long_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","\n","\n","\n","  # ---------------------- indicator part ---------------------- #\n","  \n","  #               sar               #\n","  alpha = 1\n","  markersize = 5\n","  for sar in sar_list:\n","    plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","    markersize += 1\n","    alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  alpha = 0.7\n","  for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","                      where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","                      where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","    alpha -= 0.05\n","  \n","  # ------------------------------------------------------------- #\n","\n","\n","  #       ep & tp     #\n","  if i != initial_i:\n","    plt.axvline(prev_plotsize - (i - initial_i), alpha=0.5, linestyle='--')\n","  plt.axvline(prev_plotsize, alpha=0.5, linestyle='--')\n","  plt.axhline(nontp_ep[t_i], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='lime')  # ep line axhline\n","\n","  # for sub_i in range(len(ep_tp_list[t_i][1])):\n","  #   plt.axhline(ep_tp_list[t_i][1][sub_i], linestyle='-', xmin=0.75 + 0.05 * (sub_i + 1) , xmax=1, linewidth=3, color='lime')  # tp line axhline\n","    # plt.axhline(ep_tp_list[t_i][1], linestyle='-', xmin=0.9, xmax=1, linewidth=3)  # tp line axhline    \n","\n","  #         hedge ep & tp         #\n","  # h_i = h_trade_list[t_i][1]\n","  # if h_i is not None:\n","  #   plt.axvline(prev_plotsize + (h_i - i), linestyle='--')\n","  #   plt.axhline(h_ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='magenta')  # ep line axhline\n","  #   plt.axhline(h_ep_tp_list[t_i][1], linestyle='-', xmin=0.85, xmax=1, linewidth=3, color='magenta')  # tp line axhline\n","\n","  \n","  #         check pr        #\n","  plt.title(\"%s ~ %s -> liqd : %.2f\\npr : %.2f\" % (i, j, nontp_liqd_list[t_i], nontp_pr_list[t_i]))\n","\n","  #           y lim         #\n","  plt.ylim(y_min, y_max)\n","\n","\n","  # #           macd          #\n","  # # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # plt.subplot(313)\n","  plt.subplot(gs[1])\n","  alpha = 1\n","  for stoch in stoch_list:\n","    plt.step(np.arange(len(plot_df)), plot_df[stoch].values, 'g', alpha=alpha)\n","    # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","    alpha -= 0.2\n","  plt.axvline(prev_plotsize, linestyle='--')\n","  plt.axhline(50, linestyle='--')\n","  plt.axhline(stoch_upper, linestyle='--')\n","  plt.axhline(stoch_lower, linestyle='--')\n","\n","\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  plt.show()\n","  # plt.draw()\n","  plt.close()\n","  print()\n","\n","  # break\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-g7YY5BvMcLS"},"source":["### show detail values"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5TxQ3rDnKMa7","executionInfo":{"elapsed":255,"status":"ok","timestamp":1625228960601,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"outputId":"422ac214-8c88-4f39-ec3a-7c823574f6da"},"source":["i, j = 27267, 27268\n","print(\"upper_ep.iloc[i] :\", upper_ep.iloc[i])\n","print(\"short_tp.iloc[j] :\", short_tp.iloc[j])"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["upper_ep.iloc[i] : 2348.266954813089\n","short_tp.iloc[j] : 2205.609333246829\n"]}]},{"cell_type":"markdown","metadata":{"id":"7AIl6EBuZNOL"},"source":["## none plot off-color st"]},{"cell_type":"code","metadata":{"id":"yaVxrNGzZgrF"},"source":["prev_plotsize = 50\n","\n","for t_i, (i, j) in enumerate(trade_list):\n","  # print(i, j)\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","\n","  # if pr_list[t_i] >= 1:\n","  #   continue\n","\n","  plot_df = res_df.iloc[i - prev_plotsize:j + 1, [0, 1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 16]]\n","\n","  #       replace st values with np.nan, using st trend     #\n","  st_trend_plot_df = res_df.iloc[i - prev_plotsize:j + 1, [7, 10, 13]]\n","  plot_df.iloc[:, [4]] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, np.nan, plot_df.iloc[:, [4]])\n","  plot_df.iloc[:, [6]] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, np.nan, plot_df.iloc[:, [6]])\n","  plot_df.iloc[:, [8]] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, np.nan, plot_df.iloc[:, [8]])\n","  plot_df.iloc[:, [5]] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, np.nan, plot_df.iloc[:, [5]])\n","  plot_df.iloc[:, [7]] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, np.nan, plot_df.iloc[:, [7]])\n","  plot_df.iloc[:, [9]] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, np.nan, plot_df.iloc[:, [9]])\n","\n","\n","  plot_upper_ep = upper_ep.iloc[i - prev_plotsize:j + 1]\n","  plot_lower_ep = lower_ep.iloc[i - prev_plotsize:j + 1]\n","\n","  fig = plt.figure(figsize=(8, 6))\n","  ax = fig.add_subplot(111)\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='r', colordown='b')\n","\n","  # print(plot_df.values[:, 4:])\n","  plt.plot(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper\n","  plt.plot(plot_df.values[:, [5, 7, 9]], 'b', alpha=1)  # lower\n","  plt.plot(plot_df.values[:, [10]], 'g', alpha=1)  # middle\n","\n","  plt.plot(plot_df.values[:, [11]], 'c*', alpha=1, markersize=5)  # sar mic\n","  plt.plot(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  plt.plot(plot_upper_ep.values, alpha=1, linestyle='--')  # ep\n","  plt.plot(plot_lower_ep.values, alpha=1, linestyle='--')  # ep\n","\n","  plt.axvline(prev_plotsize, linestyle='--')\n","\n","  plt.title(\"%s ~ %s -> %.5f\" % (i, j, pr_list[t_i]))\n","  plt.show()\n","  # plt.draw()\n","  plt.close()"],"execution_count":null,"outputs":[]}]}