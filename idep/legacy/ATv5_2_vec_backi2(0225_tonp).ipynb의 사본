{"cells":[{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":510745,"status":"ok","timestamp":1645833026685,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"6rmQpzEGXfCw","outputId":"15facc1d-4918-48d3-ecda-8817846b2caf"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","import os, sys\n","\n","current_path = '/content/drive/My Drive/Colab Notebooks/JnQ/'\n","\n","os.chdir(current_path)\n","\n","strat_pkg = 'IDE'\n","\n","mpl_finance_path = '/content/drive/My Drive/Colab Notebooks/JnQ/mpl_finance'\n","\n","if mpl_finance_path not in sys.path:\n","\n","  try:\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ')\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ/{}'.format(strat_pkg))\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ/funcs')\n","    sys.path.insert(0, mpl_finance_path)\n","    \n","  except Exception as e:\n","    print(e)"]},{"cell_type":"markdown","metadata":{"id":"8uqYv5StTazo"},"source":["# requirements"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"9qGt60DKTZmf","executionInfo":{"status":"ok","timestamp":1645833046398,"user_tz":-540,"elapsed":17523,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"outputs":[],"source":["# !pip install findiff\n","\n","# import nvstrings, nvcategory, cudf\n","# import cuml\n","# import cudf\n","\n","import matplotlib.pyplot as plt\n","from matplotlib import gridspec\n","from tqdm.notebook import tqdm\n","from funcs.funcs_idep import *\n","from funcs.funcs_duration_v2 import *\n","from funcs.funcs_plot_check import *\n","# from funcs.funcs_ide import *\n","# from funcs.funcs_indicator_candlescore import *\n","from funcs.funcs_indicator import *\n","from funcs.funcs_trader import *\n","import logging\n","import importlib\n","\n","import mpl_finance as mf\n","import os\n","import datetime\n","\n","import IPython\n","import IPython.display\n","import matplotlib as mpl\n","\n","import numpy as np\n","# import jax.numpy as np\n","import pandas as pd\n","# import seaborn as sns\n","# import tensorflow as tf\n","\n","import pickle\n","import shutil\n","import json\n","from easydict import EasyDict\n","\n","# from trendln import trendln\n","\n","from datetime import datetime\n","import random\n","import time\n","# import warnings\n","\n","# warnings.simplefilter(\"ignore\", category=RuntimeWarning)\n","\n","np.seterr(invalid=\"ignore\")\n","np.set_printoptions(suppress=True)\n","\n","pd.set_option('mode.chained_assignment',  None)\n","\n","pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)"]},{"cell_type":"markdown","metadata":{"id":"Ic1mfmwWCIBu"},"source":["# makeset - with to_htf dataframes"]},{"cell_type":"markdown","metadata":{"id":"AUSBU7T8Suzi"},"source":["## sync_check_make"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QmhLikYlSuzi"},"outputs":[],"source":["def sync_check_make(df):\n","\n","    make_itv_list = ['3T', '5T', '15T', '30T', 'H', '4H', 'D']\n","    offset_list = ['1h', '1h', '1h', '1h', '1h', '1h', '9h']\n","\n","    assert len(make_itv_list) == len(offset_list), \"length of itv & offset_list should be equal\"\n","        \n","    htf_df_list = [to_htf(df, itv_=itv_, offset=offset_) for itv_, offset_ in zip(make_itv_list, offset_list)]\n","\n","    df_3T, df_5T, df_15T, df_30T, df_H, df_4H, df_D = htf_df_list\n","\n","    for htf_df in htf_df_list:\n","      print(\"{} -> \".format(pd.infer_freq(htf_df.index)), htf_df.tail(1))\n","\n","    # return\n","\n","    #           supertrend          #\n","    # # print(df.head(100))\n","    # # return\n","    \n","    df = st_price_line(df, df_3T, '3m')\n","    # df = st_price_line(df, df_5T, '5m')\n","    # df = st_price_line(df, df_15T, '15m')\n","    # df = st_price_line(df, df_30T, '30m')\n","    # df = st_price_line(df, df_H, '1h')\n","    # df = st_price_line(df, df_4H, '4h')\n","\n","    print(\"supertrend phase done\")\n","\n","    # --------------- rsi --------------- #  \n","    # df['rsi_1m'] = rsi(df, 14)    \n","    # df_5T['rsi_5m'] = rsi(df_5T, 14)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1]), columns=['rsi_5m']))\n","    \n","    # print(\"rsi phase done\")\n","\n","\n","    # --------------- cci --------------- #  \n","    # df['cci_1m'] = cci(df, 20)\n","\n","    # print(\"cci phase done\")\n","\n","\n","    # --------------- ema --------------- #      \n","    # df_5T['ema_5m'] = ema(df_5T['close'], 195)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1]), columns=['ema_5m']))\n","    \n","    # print(\"ema phase done\")\n","\n","\n","    # # --------------- dc --------------- #  \n","    # df = dc_line(df, None, '1m', dc_period=20)\n","    # df = dc_line(df, df_3T, '3m', dc_period=20)\n","    # df = dc_line(df, df_5T, '5m', dc_period=20)\n","    # df = dc_line(df, df_15T, '15m', dc_period=20)\n","    # df = dc_line(df, df_30T, '30m', dc_period=20)\n","    # df = dc_line(df, df_H, '1h', dc_period=20)\n","    # df = dc_line(df, df_4H, '4h', dc_period=20)\n","    # df = dc_line(df, df_D, '1d', dc_period=20)\n","\n","    # print(\"dc phase done\")\n","    \n","    # # --------------- bband --------------- #  \n","    # df = bb_line(df, None, '1m')\n","    # df = bb_line(df, df_3T, '3m')\n","    # df = bb_line(df, df_5T, '5m')\n","    # df = bb_line(df, df_15T, '15m')\n","    # df = bb_line(df, df_30T, '30m')\n","    # df = bb_line(df, df_H, '1h')\n","    # df = bb_line(df, df_4H, '4h')\n","    # df = bb_line(df, df_D, '1d')\n","\n","    # print(\"bband phase done\")\n","\n","    # --------------- cbline --------------- #    \n","    # df_3T['cloud_bline_3m'] = cloud_bline(df_3T, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_3T, [-1]), columns=['cloud_bline_3m']))\n","    # df_5T['cloud_bline_5m'] = cloud_bline(df_5T, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1]), columns=['cloud_bline_5m']))\n","    # df_15T['cloud_bline_15m'] = cloud_bline(df_15T, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_15T, [-1]), columns=['cloud_bline_15m']))\n","    # df_30T['cloud_bline_30m'] = cloud_bline(df_30T, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_30T, [-1]), columns=['cloud_bline_30m']))\n","    # df_H['cloud_bline_1h'] = cloud_bline(df_H, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_H, [-1]), columns=['cloud_bline_1h']))\n","    # df_4H['cloud_bline_4h'] = cloud_bline(df_4H, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_4H, [-1]), columns=['cloud_bline_4h']))\n","\n","    # print(\"cbline phase done\")\n","    \n","\n","    #           lucid sar              #\n","    # df['sar_1m'], df['sar_uptrend_1m'] = lucid_sar(df, return_uptrend=True)\n","\n","    # df_3T['sar_3m'], df_3T['sar_uptrend_3m'] = lucid_sar(df_3T, af_initial=0.01, return_uptrend=True)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_3T, [-2, -1], backing_i=1), columns=['sar_3m', 'sar_uptrend_3m']))\n","\n","    # df_5T['sar_5m'], df_5T['sar_uptrend_5m'] = lucid_sar(df_5T, af_initial=0.01, return_uptrend=True)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-2, -1], backing_i=1), columns=['sar_5m', 'sar_uptrend_5m']))\n","\n","    # df_15T['sar_15m'], df_15T['sar_uptrend_15m'] = lucid_sar(df_15T, af_initial=0.01, return_uptrend=True)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_15T, [-2, -1], backing_i=1), columns=['sar_15m', 'sar_uptrend_15m']))\n","\n","    # df_4H['sar_4h'], df_4H['sar_uptrend_4h'] = lucid_sar(df_4H, return_uptrend=True)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_4H, [-2, -1], backing_i=1), columns=['sar_4h', 'sar_uptrend_4h']))\n","    \n","    # print(\"sar phase done\")\n","\n","    \n","    #           stochastic              #\n","    # df['stoch_1m'] = stoch(df, 13, 3, 3)\n","\n","    # df_5T['stoch'] = stoch(df_5T, 13, 3, 3)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","    # print(\"stoch phase done\")\n","\n","\n","    return df\n"]},{"cell_type":"markdown","metadata":{"id":"mEKyVbHWSuzi"},"source":["## make & save res_df (concat 생각하면, timeindex sync 맞춰야함)"]},{"cell_type":"markdown","metadata":{"id":"VdukVo5-Suzj"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11,"status":"error","timestamp":1636201718856,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"khKb9nhlSuzj","outputId":"02bf2c60-f298-4fe9-e6bb-78230ac1348c"},"outputs":[{"ename":"NameError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-5-ee034491b257>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0ma_day\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m3600\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m24\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtqdm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m   \u001b[0mkeys\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mfile_list\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'file_list' is not defined"]}],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  if '2021-07-01'.upper() not in file_list[i]:\n","  # if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    excel_name = key.replace(\".xlsx\", \"_st1h_backi2.xlsx\")\n","    excel_path = save_path + excel_name\n","\n","    if excel_name in exist_list:\n","      print(excel_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m 마지막 timeindex 의 date 기준, 08:59:59.999000 를 last timestamp 로 설정\n","      #      2. 시작 timestamp 는 모든 tf 의 가장 최근 시작 index,\n","      #       a. 1m 의 시작 timeindex 는 최소, htf 의 시작 timeindex 보다 interval 만큼 앞서야함\n","      #         i. 따라서 1m open_index, latest_open_index + 1d 를 하면 댐\n","      #           1. timestamp 으로 변환후 1day 를 더하고 datetime 으로 변환\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","    latest_open_index = sorted(open_indexes)[-1]\n","    \n","    open_ts = datetime.timestamp(latest_open_index)\n","    latest_open_index_1m = datetime.fromtimestamp(open_ts + a_day)\n","\n","    #   str 로 만들어 접근하면 불가함  #\n","    end_index = pd.to_datetime(str(df.index[-1]).split(\" \")[0] + \" 08:59:59.999000\")\n","    # break\n","\n","    sliced_df = df.loc[latest_open_index_1m:end_index] # to_lower_tf 의 기준 ltf\n","    sliced_second_df = second_df.loc[latest_open_index:end_index]\n","    sliced_third_df = third_df.loc[latest_open_index:end_index]\n","    sliced_fourth_df = fourth_df.loc[latest_open_index:end_index]\n","    sliced_fifth_df = fifth_df.loc[latest_open_index:end_index]\n","\n","    print(\"sliced index\")\n","    print(sliced_df.index[[0, -1]])\n","    print(sliced_second_df.index[[0, -1]])\n","    print(sliced_third_df.index[[0, -1]])\n","    print(sliced_fourth_df.index[[0, -1]])\n","    print(sliced_fifth_df.index[[0, -1]])\n","\n","    try:\n","      sliced_sixth_df = sixth_df.loc[latest_open_index:end_index]\n","      sliced_seventh_df = seventh_df.loc[latest_open_index:end_index]\n","\n","      print(sliced_sixth_df.index[[0, -1]])\n","      print(sliced_seventh_df.index[[0, -1]])\n","\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df, sliced_sixth_df, sliced_seventh_df)\n","    \n","    except:\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df)\n","\n","\n","\n","    res_df.to_excel(excel_path)\n","    print(excel_name, \"saved succesfully !\")"]},{"cell_type":"markdown","metadata":{"id":"Bw5JibDKSuzj"},"source":["### xlsx to feather"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":355,"referenced_widgets":["be2b848dbcb14a079a2b7bd605af6435"]},"id":"VA-_gcA7Suzj","outputId":"f6f3b55d-ec2c-4b2c-d62e-3de7c0384dc4"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"be2b848dbcb14a079a2b7bd605af6435","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/156 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["DatetimeIndex(['2021-06-28 00:00:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:02:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:04:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:14:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:29:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-09-14 03:59:59.999000', '2021-11-15 14:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-03-10 20:59:59.999000', '2021-11-15 16:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","\n","xlsx converted to feather !\n","DatetimeIndex(['2021-06-28 00:00:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:02:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:04:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:14:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:29:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-09-14 03:59:59.999000', '2021-11-15 14:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-03-10 20:59:59.999000', '2021-11-15 16:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","\n","xlsx converted to feather !\n"]}],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  # if '2021-07-01'.upper() not in file_list[i]:\n","  if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    feather_name = key.replace(\".xlsx\", \".ftr\")\n","    # feather_path = save_path + feather_name\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m 마지막 timeindex 의 date 기준, 08:59:59.999000 를 last timestamp 로 설정\n","      #      2. 시작 timestamp 는 모든 tf 의 가장 최근 시작 index,\n","      #       a. 1m 의 시작 timeindex 는 최소, htf 의 시작 timeindex 보다 interval 만큼 앞서야함\n","      #         i. 따라서 1m open_index, latest_open_index + 1d 를 하면 댐\n","      #           1. timestamp 으로 변환후 1day 를 더하고 datetime 으로 변환\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","\n","    df.reset_index().to_feather(date_path + feather_name, compression='lz4')\n","    second_df.reset_index().to_feather(date_path2 + feather_name, compression='lz4')\n","    third_df.reset_index().to_feather(date_path3 + feather_name, compression='lz4')\n","    fourth_df.reset_index().to_feather(date_path4 + feather_name, compression='lz4')\n","    fifth_df.reset_index().to_feather(date_path5 + feather_name, compression='lz4')\n","    sixth_df.reset_index().to_feather(date_path6 + feather_name, compression='lz4')\n","    seventh_df.reset_index().to_feather(date_path7 + feather_name, compression='lz4')\n","\n","    print(\"xlsx converted to feather !\")\n","    "]},{"cell_type":"markdown","metadata":{"id":"Pe0QpnORSuzk"},"source":["### add itv_name to ftr"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":223,"referenced_widgets":["e3225655da874b8d89cc8b2a381b3fb6"]},"executionInfo":{"elapsed":43664,"status":"ok","timestamp":1638246331122,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"M-gl30KxSuzk","outputId":"1cfcb580-8d25-4bd0-fdd0-213640779ce2"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"e3225655da874b8d89cc8b2a381b3fb6","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/175 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 BTCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 BCHUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 XRPUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 EOSUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 LTCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ETCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 LINKUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 XLMUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ADAUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ETHUSDT_1m.ftr\n"]}],"source":["save_path = './candlestick_concated/res_df/'\n","\n","# dir_path = \"bbdc3m_backi2\"\n","# date = '2021-10-10'\n","date = '2021-07-01'\n","\n","db_path = './candlestick_concated/database_bn/non_cum/%s/' % date\n","os.makedirs(os.path.join(db_path), exist_ok=True)\n","\n","# exist_list = os.listdir(os.path.join(save_path, dir_path))\n","# break\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","        \n","    df = shutil.copy(date_path + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n","    second_df = shutil.copy(date_path2 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval2))\n","    third_df = shutil.copy(date_path3 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval3))\n","    fourth_df = shutil.copy(date_path4 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval4))\n","    fifth_df = shutil.copy(date_path5 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval5))\n","    sixth_df = shutil.copy(date_path6 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval6))\n","    seventh_df = shutil.copy(date_path7 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval7))\n","\n","    print(\"copied to\" + db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n"]},{"cell_type":"markdown","metadata":{"id":"4oZ1ohTtSuzk"},"source":["### feather ver."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":448,"referenced_widgets":["15a8f265417c47d88bf5b1907353afa8","4f4c5fba8f1d4543a46d6dd7e658b7b3","2d4fae08e5364faf83b0bcdc8e6ece4c","0f94b5763ea344adbb20cf3517a25d2f","e5594180fccb4d2787579ee6034cd6ab","af7a8b3e0365404ea9de8bea08d1a4a6","4f9b787786494e79959bc49b6da4ff4d","06f4ecc65be347ac80deee1965545f27","f8462155d04e4c8da2e4c26f02213bb4","18817cdc20574020976bc2f2c6acc6b2","fefe35e08d734a20aa38986f42f27b13"]},"executionInfo":{"elapsed":239284,"status":"ok","timestamp":1642739615683,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"vgVHpnUsSuzk","outputId":"6224eedf-c127-4d18-f095-3a543cd3f1f8"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"15a8f265417c47d88bf5b1907353afa8","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/7 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["3T ->                          open     high      low    close\n","index                                                  \n","2022-01-10 15:18:00  3163.02  3164.29  3162.41  3164.28\n","5T ->                          open     high      low    close\n","index                                                  \n","2022-01-10 15:15:00  3160.51  3164.29  3159.01  3164.28\n","15T ->                          open     high      low    close\n","index                                                  \n","2022-01-10 15:15:00  3160.51  3164.29  3159.01  3164.28\n","30T ->                         open     high      low    close\n","index                                                 \n","2022-01-10 15:00:00  3171.7  3173.11  3156.02  3164.28\n","H ->                         open     high      low    close\n","index                                                 \n","2022-01-10 15:00:00  3171.7  3173.11  3156.02  3164.28\n","4H ->                         open     high      low    close\n","index                                                 \n","2022-01-10 13:00:00  3153.0  3179.16  3149.95  3164.28\n","D ->                          open     high      low    close\n","index                                                  \n","2022-01-10 09:00:00  3149.99  3179.16  3125.88  3164.28\n","supertrend phase done\n","./candlestick_concated/res_df/st3m_backi2/noncat/cum/2022-01-10/2022-01-10 ETHUSDT.ftr saved succesfully !\n"]}],"source":["# db_path = './candlestick_concated/database_ub/' # upbit\n","db_path = './candlestick_concated/database_bn/'   # binance\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","save_dir_path = \"st3m_backi2\"\n","\n","date = '2022-01-10'\n","\n","cum_path = \"cum\"\n","# cum_path = \"non_cum\"  # non_cum 으로 진행하는 경우, row concat 용도이기 때문에 noncat -> concat 으로 변경 (base cols 를 모두 담고 있음)\n","\n","concat_path = 'noncat' # 새로운 cols 를 기존 cum/concat 에 붙이려는 경우\n","# concat_path = 'concat'\n","\n","data_path = os.path.join(db_path, cum_path, date)\n","save_path = os.path.join(save_path, save_dir_path, concat_path, cum_path, date)\n","\n","os.makedirs(save_path, exist_ok=True)\n","\n","file_list = os.listdir(data_path)\n","exist_list = os.listdir(save_path)\n","# break\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","\n","    if \"_1m\" not in key:\n","      continue\n","\n","    # feather_name = key.replace(\".ftr\", \"_%.ftr\" % save_dir_path)\n","    feather_name = key.replace(\"_1m\", \"\")\n","    feather_path = os.path.join(save_path, feather_name)\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    df = pd.read_feather(os.path.join(data_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","    res_df = sync_check_make(df)\n","\n","    res_df.reset_index().to_feather(feather_path, compression='lz4')\n","    print(feather_path, \"saved succesfully !\")"]},{"cell_type":"markdown","metadata":{"id":"E0n53hflJbnp"},"source":["### htf candle check"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":489,"status":"ok","timestamp":1642148504926,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"6xW0yugCWvGz","outputId":"58106ff9-9709-4a62-bca2-1f6795d13322"},"outputs":[{"name":"stdout","output_type":"stream","text":["itv_ : 3T\n","                        open     high      low    close\n","index                                                  \n","2022-01-10 15:06:00  3169.97  3170.22  3159.51  3161.22\n","2022-01-10 15:09:00  3161.22  3163.98  3161.22  3163.82\n","2022-01-10 15:12:00  3163.82  3163.83  3156.02  3160.49\n","2022-01-10 15:15:00  3160.51  3164.29  3159.01  3162.93\n","2022-01-10 15:18:00  3163.02  3164.29  3162.41  3164.28\n","                            open     high      low    close    volume\n","index                                                                \n","2022-01-10 15:08:59.999  3169.97  3170.22  3159.51  3161.22  4241.449\n","2022-01-10 15:11:59.999  3161.22  3163.98  3161.22  3163.82  1143.874\n","2022-01-10 15:14:59.999  3163.82  3163.83  3156.02  3160.49  2135.292\n","2022-01-10 15:17:59.999  3160.51  3164.29  3159.01  3162.93  1011.598\n","2022-01-10 15:20:59.999  3163.02  3164.29  3162.41  3163.82   466.868\n"]}],"source":["itv_list = ['3T', '5T', '15T', '30T', '1H', '4H']\n","comp_df_list = [second_df, third_df, fourth_df, fifth_df, sixth_df, seventh_df]\n","offset_list = ['1h', '2min', '2min', '2min', '2min', '2min']\n","# itv_list = ['4H']\n","# comp_df_list = [seventh_df]\n","\n","slice_len = 100\n","for itv_, comp_df_, offset in zip(itv_list, comp_df_list, offset_list):\n","\n","  print(\"itv_ :\", itv_)\n","\n","  # df = h_candle_v2(df, '3T')\n","  # end_ts = \n","  h_res_df = df.resample(itv_, offset=offset).agg({\n","          'open': 'first',\n","          'high': 'max',\n","          'low': 'min',\n","          'close': 'last'\n","      })\n","\n","  #   앞은 길이가 다르고, 뒤에서부터 잘라서 비교    #\n","  #   last_row 빼고는 동일, 4h 제외\n","  # print(df.tail())\n","  print(h_res_df.tail())\n","  print(comp_df_.tail())\n","  # # print(h_res_df.head())\n","  # # print(second_df.head())\n","\n","  # print(len(h_res_df))\n","  # print(len(second_df))\n","\n","  # print(h_res_df.values[-slice_len:])\n","  # print(second_df.iloc[:, :4].values[-slice_len:])\n","  # print(np.argwhere(h_res_df.values[-slice_len:] != comp_df_.iloc[:, :4].values[-slice_len:]))\n","  # print()\n","  break"]},{"cell_type":"markdown","metadata":{"id":"jTN3M842Suzl"},"source":["## concat & save new res_df"]},{"cell_type":"markdown","metadata":{"id":"MlFkpO1MSuzl"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"U-3QkfbFSuzl"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","dict_name = \"2021-07-01 ETHUSDT_bb15m_backi2_res_dfs.pkl\"\n","\n","#     load with pickle    #\n","with open(save_path + dict_name, 'rb') as f:\n","  saved_res_df_dict = pickle.load(f)\n","\n","print(dict_name, \"loaded !\")\n","res_df_files = os.listdir(save_path)\n","res_df_files.reverse()\n","\n","print(res_df_files)\n","\n","res_df_dict = {}\n","\n","base_postfix = '_bb15m_backi2.xlsx'\n","new_postfix = '_st1h_backi2.xlsx'\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for k_i, key in enumerate(res_df_files):\n","\n","  if '2021-07-01'.upper() not in key:\n","  # if '2021-10-10'.upper() not in key:\n","    continue\n","\n","  # if \"link\".upper() not in key:\n","  # if \"btc\".upper() not in key:\n","  #   continue\n","\n","  if new_postfix not in key:\n","    continue\n","\n","  # if key in \n","\n","  if sample_cnt == max_cnt:\n","    dict_name = \"%s_res_dfs.pkl\" % key.split(\".\")[0]\n","    print(\"dict_name :\", dict_name)\n","\n","  base_df = saved_res_df_dict[key.replace(new_postfix, base_postfix)]\n","  # base_df = pd.read_excel(save_path + key.replace(new_postfix, base_postfix), index_col=0)  \n","  res_df = pd.read_excel(save_path + key, index_col=0)  \n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  droped_new_res_df.head()\n","  # break\n","\n","  # res_df_dict[key] = res_df\n","  res_df_dict[key] = droped_new_res_df\n","  print(key, \"saved to dict !\")\n","\n","  #     save with pickle    #\n","  with open(save_path + dict_name, 'wb') as f:\n","    pickle.dump(res_df_dict, f)\n","\n","  sample_cnt -= 1\n","\n","  if sample_cnt <= 0:\n","    break\n"]},{"cell_type":"markdown","metadata":{"id":"t1E_eAyPSuzm"},"source":["### new col to latest feather (1m_indi. only)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xyI5NrM7Suzm"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","cum_dir = \"cum\"\n","\n","new_dir_path = \"rsi_backi2\"\n","base_dir_path = \"bbdc3m_backi2\"\n","\n","new_date = '2021-11-17'\n","\n","\n","\n","#     load ftr list    #\n","base_save_path = os.path.join(save_path, base_dir_path, \"concat/cum\", new_date)\n","new_save_path = base_save_path.replace(base_dir_path, new_dir_path)\n","\n","#     save to (new) cum dir    #\n","#      1. if dir. not exists, makedir\n","os.makedirs(new_save_path, exist_ok=True)\n","\n","ftr_list = [s for s in os.listdir(base_save_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_save_path, key), columns=None, use_threads=True).set_index(\"index\")\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  droped_new_res_df = sync_check(base_df)\n","\n","  # new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # # new_res_df.head()\n","\n","  # intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  # droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break\n","\n","  droped_new_res_df.reset_index().to_feather(os.path.join(new_save_path, key), compression='lz4')\n","\n","  print(os.path.join(new_save_path, key), \"saved !\")\n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"markdown","metadata":{"id":"nUs4fjVHSuzl"},"source":["### feather ver. (col concat)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2001,"status":"ok","timestamp":1642739652513,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"6cu-Y82iSuzl","outputId":"273507b8-0d33-48b5-d9c5-00547688ef73"},"outputs":[{"name":"stdout","output_type":"stream","text":["['2022-01-10 ETHUSDT.ftr']\n","./candlestick_concated/res_df/st3m_backi2/concat/cum/2022-01-10/2022-01-10 ETHUSDT.ftr saved !\n"]}],"source":["new_dir_path = \"st3m_backi2\"\n","base_dir_path = \"bb1d_backi2\"\n","\n","# new_date = \"2021-11-17\"\n","new_date = \"2022-01-10\"\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","save_path = './candlestick_concated/res_df/'\n","save_path = os.path.join(save_path, new_dir_path, \"concat/cum\", new_date)   \n","# save_path = os.path.join(save_path, new_dir_path, \"concat/non_cum\", new_date)   # row col 하려면 concat 맞음, noncum 사용\n","os.makedirs(save_path, exist_ok=True)\n","\n","\n","#     load ftr list    #\n","# ftr_list = [s for s in os.listdir(os.path.join(save_path, new_dir_path)) if \"ftr\" in s]\n","\n","noncat_path = save_path.replace(\"concat/\", \"noncat/\")\n","ftr_list = [s for s in os.listdir(noncat_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","  try:\n","\n","    #       read from base postfix's directory    #\n","    base_df = pd.read_feather(os.path.join(save_path.replace(new_dir_path, base_dir_path), key), columns=None, use_threads=True).set_index(\"index\")\n","    res_df = pd.read_feather(os.path.join(noncat_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","    # print(base_df.head())\n","    # print(res_df.head())\n","    # break\n","\n","    new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","    # new_res_df.head()\n","\n","    droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","    # droped_new_res_df.head()\n","    # break\n","\n","    droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","    # res_df_dict[key] = res_df\n","    # res_df_dict[key] = droped_new_res_df\n","    print(os.path.join(save_path, key), \"saved !\")\n","  \n","  except Exception as e:\n","    print(\"error occured ! :\", e)\n","  \n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4GiF2NJPSuzm"},"outputs":[],"source":["print(*droped_new_res_df.columns, sep = '\\n')"]},{"cell_type":"markdown","metadata":{"id":"WVAKq3i8Suzm"},"source":["### feather ver. (row concat) , database cum 도 호환가능"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7893,"status":"ok","timestamp":1645188189702,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"XG2p9OhhSuzm","outputId":"e67874ba-0710-4f38-966f-5ea7d42403cb"},"outputs":[{"output_type":"stream","name":"stdout","text":["['2022-02-17 ETHUSDT_1m.ftr']\n","                            open     high     low    close  volume\n","index                                                             \n","2019-11-27 16:45:59.999   146.00   146.00   146.0   146.00   0.010\n","2022-02-17 10:29:59.999  3146.86  3147.22  3146.4  3146.76  26.727\n","continuity checked !\n","./candlestick_concated/database_bn/cum/2022-02-17/2022-02-17 ETHUSDT_1m.ftr saved !\n"]}],"source":["save_path = './candlestick_concated/res_df/'        # cols 추가된 cum db 에 new_row's cols 기준으로 합치는 경우\n","save_path = './candlestick_concated/database_bn/'   # ohlcv cum db 만들 경우\n","\n","base_date = '2022-01-10'\n","new_date = '2022-02-17'\n","\n","#     load ftr list    #\n","if \"database\" in save_path:\n","  base_dir_path = \"\"\n","  new_dir_path = \"\"\n","  concat_dir = \"\"\n","else:\n","  base_dir_path = \"sar_backi2\"\n","  new_dir_path = \"bb4h_backi2\"  # dir_path 가 base / new 서로 달라질 수 있어서 분할함\n","  concat_dir = \"concat\"\n","\n","base_date_path = os.path.join(save_path, base_dir_path, concat_dir, \"cum\", base_date)      # 기존 cum db 와 new_date db 를 cum 진행\n","# base_date_path = os.path.join(save_path, base_dir_path, concat_dir, \"non_cum\", base_date)    # non_cum db 와 new_date db 를 cum 진행\n","\n","# new_date_path = os.path.join(save_path, new_dir_path, concat_dir, \"cum\", new_date)      # 상황별로 직접 선택해야할 듯\n","new_date_path = os.path.join(save_path, new_dir_path, concat_dir, \"non_cum\", new_date)\n","\n","\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","save_path = new_date_path.replace(\"non_cum\", \"cum\")   # non_cum 아니여도 무관\n","os.makedirs(save_path, exist_ok=True)   # noncat / concat 두가지 경우 존재가능할 것\n","# os.makedirs(os.path.join(save_path, dir_path, \"noncat/cum\", new_date), exist_ok=True)\n","\n","\n","ftr_list = [s for s in os.listdir(new_date_path) if \"ftr\" in s]\n","exist_list = os.listdir(save_path)\n","print(ftr_list)\n","# break\n","\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:   # date rejection\n","    continue\n","  if '1m' not in key:  # itv rejection\n","    continue\n","\n","  # if key in exist_list:\n","  #   print(key, \"already exist !\")\n","  #   continue\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_date_path, key.replace(new_date, base_date)), columns=None, use_threads=True).set_index(\"index\")   # key 에 new_date 담겨있음\n","  res_df = pd.read_feather(os.path.join(new_date_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break  \n","  \n","  print(droped_new_res_df.iloc[[0, -1]])  \n","\n","  # ------------- verify df continuity directly itv by itv ------------- #\n","  true_continue = True\n","  if \"_\" in key:\n","\n","    interval = key.split(\".\")[0].split(\"_\")[-1] \n","    itv_num = to_itvnum(interval)\n","\n","    # verified_df = consecutive_df(droped_new_res_df, to_itvnum(interval))\n","    # verified_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","    # res_df_dict[key] = res_df\n","    # res_df_dict[key] = droped_new_res_df  \n","\n","    np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","    ideal_ts_gap = 60 * itv_num\n","\n","    for ts_i in range(len(np_idx_ts)):\n","      \n","      if ts_i != 0:\n","        ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","\n","        if ts_gap > ideal_ts_gap or ts_gap < ideal_ts_gap:\n","        # if ts_gap == ideal_ts_gap:\n","          print(droped_new_res_df.index[ts_i - 1])\n","          print(droped_new_res_df.index[ts_i])\n","          # print(ts_gap)\n","          print(\"------------------ unideal ts_gap ------------------\")\n","          true_continue = False\n","\n","    print(\"continuity checked !\")\n","\n","  if true_continue:\n","    droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","  print(os.path.join(save_path, key), \"saved !\")\n","  \n"]},{"cell_type":"markdown","metadata":{"id":"L7l5CTJfSuzn"},"source":["### check continuity"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nGzMGyC3Suzn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1643987442996,"user_tz":-540,"elapsed":5408,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"4fface63-62d9-4e2a-e22d-bdd26f428e0e"},"outputs":[{"output_type":"stream","name":"stdout","text":["                             open    high       low     close   volume\n","index                                                                 \n","2020-09-14 16:00:59.999    3.2002    4.91    3.2002    3.2745  11567.0\n","2022-02-04 23:57:59.999  103.7500  103.75  103.6000  103.6000   6427.0\n","[1.60009926e+09 1.60009932e+09 1.60009938e+09 1.60009944e+09\n"," 1.60009950e+09 1.60009956e+09 1.60009962e+09 1.60009968e+09\n"," 1.60009974e+09 1.60009980e+09]\n"]}],"source":["# print(droped_new_res_df.columns)\n","\n","print(droped_new_res_df.iloc[[0, -1]])\n","\n","np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","\n","print(np_idx_ts[:10])\n","for ts_i in range(len(np_idx_ts)):\n","  \n","  if ts_i != 0:\n","    ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","\n","    if ts_gap > 60 or ts_gap < 60:\n","\n","      print(\"invalid ts_gap found !\")\n","    # if ts_gap == 60:\n","      print(droped_new_res_df.index[ts_i - 1])\n","      print(droped_new_res_df.index[ts_i])\n","      # print(ts_gap)\n","      print()\n"]},{"cell_type":"markdown","metadata":{"id":"x_XGJqBi8Jex"},"source":["### check length of front missing value + middle_data non_missing validity"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":311,"status":"ok","timestamp":1641887318959,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"yRNwqVeAu8X8","outputId":"fb236bde-4527-4bc7-eac4-4bee42532c5a"},"outputs":[{"name":"stdout","output_type":"stream","text":["2.167361111111111\n","38\n"]}],"source":["#       1. new_date 의 시작 timeidx 와 base_date end timeidx 의 최소 days' gap     #\n","#       2. new_date 의 시작 부분 indi. value 는 np.nan 으로 채워질 거기 때문에 계산해야함    #\n","\n","df_count = droped_new_res_df.count()\n","len_missing = df_count.max() - df_count.min()\n","print(len_missing / 1440)\n","\n","#       3. \n","missing_sliced_df = droped_new_res_df.iloc[len_missing:]\n","df_count2 = missing_sliced_df.count()\n","# print(df_count2)\n","print((df_count2.max() - df_count2.min()))    # this value should be zero !\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"AY7E2_hTBsyM"},"outputs":[],"source":["# df_count2.index[df_count2.argmin()]\n","# missing_sliced_df.head(5)\n","\n","stay_missed = np.sum(pd.isnull(missing_sliced_df), axis=0)\n","print(stay_missed)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"p9yqewOw9g33"},"outputs":[],"source":["stay_missed_cols = stay_missed[stay_missed != 0].index\n","\n","for sm_col in stay_missed_cols:\n","  \n","  row_idx = np.argwhere(pd.isnull(missing_sliced_df[sm_col].values))\n","\n","  plt.figure(figsize=(3,3))\n","  plt.plot(row_idx)\n","  plt.ylim(0, len(missing_sliced_df))\n","  plt.title(sm_col)\n","\n","  plt.show()\n"]},{"cell_type":"markdown","source":["## legacy"],"metadata":{"id":"MSUY4nnku3s9"}},{"cell_type":"markdown","source":["### mv files"],"metadata":{"id":"epgS5Dksu-HX"}},{"cell_type":"code","source":["df_path = './candlestick_concated/survey_df_v2'\n","files_ = os.listdir(df_path)"],"metadata":{"id":"aJcVpEdrslA5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dirs = [file_ for file_ in files_ if not file_.endswith('.ftr')]\n","files = [file_ for file_ in files_ if file_.endswith('.ftr')]"],"metadata":{"id":"cEKyEYkotFDy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dirs"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IgM79tcxtPVZ","executionInfo":{"status":"ok","timestamp":1644111921194,"user_tz":-540,"elapsed":4,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"84305b35-eb52-49fc-d5fd-fdbc64cc8679"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['2022-01-10 ETHUSDT', '2022-01-10 ETHUSDT_all', '2022-02-04 SOLUSDT']"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["def move_fn(dir_, file_):\n","  src_path = os.path.join(df_path, file_)\n","  dst_path = os.path.join(df_path, dir_, file_)\n","  shutil.move(src_path, dst_path)\n","  print(\"moved to {}\".format(dst_path))\n","\n","_ = [move_fn('2022-01-10 ETHUSDT_all', file_) for file_ in files if 'eth'.upper() in file_]\n","# sols\n"],"metadata":{"id":"M767iRtwtRQP"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Ci_jUnNTZbm9"},"source":["### load data (old)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":22503,"status":"ok","timestamp":1638246127510,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"_bXyS2yrZYC6","outputId":"b24a8a66-48b1-42b5-aa79-63f5a8542bac"},"outputs":[{"name":"stdout","output_type":"stream","text":["['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr']\n","['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 LTCUSDT.ftr']\n","['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 ETHUSDT.ftr']\n","['2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr']\n","['2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-08-31 SUSHIUSDT.xlsx', '2021-08-31 CVCUSDT.xlsx', '2021-08-31 BTSUSDT.xlsx', '2021-08-31 HOTUSDT.xlsx', '2021-08-31 ZRXUSDT.xlsx', '2021-08-31 QTUMUSDT.xlsx', '2021-08-31 IOTAUSDT.xlsx', '2021-08-31 BTCBUSD.xlsx', '2021-08-31 WAVESUSDT.xlsx', '2021-08-31 ADAUSDT.xlsx', '2021-08-31 LITUSDT.xlsx', '2021-08-31 XTZUSDT.xlsx', '2021-08-31 BNBUSDT.xlsx', '2021-08-31 AKROUSDT.xlsx', '2021-08-31 HNTUSDT.xlsx', '2021-08-31 ETCUSDT.xlsx', '2021-08-31 XMRUSDT.xlsx', '2021-08-31 YFIUSDT.xlsx', '2021-08-31 ETHUSDT.xlsx', '2021-08-31 ALICEUSDT.xlsx', '2021-08-31 ALPHAUSDT.xlsx', '2021-08-31 SFPUSDT.xlsx', '2021-08-31 REEFUSDT.xlsx', '2021-08-31 BATUSDT.xlsx', '2021-08-31 DOGEUSDT.xlsx', '2021-08-31 TRXUSDT.xlsx', '2021-08-31 RLCUSDT.xlsx', '2021-08-31 BTCSTUSDT.xlsx', '2021-08-31 STORJUSDT.xlsx', '2021-08-31 SNXUSDT.xlsx', '2021-08-31 XLMUSDT.xlsx', '2021-08-31 NEOUSDT.xlsx', '2021-08-31 UNFIUSDT.xlsx', '2021-08-31 SANDUSDT.xlsx', '2021-08-31 DASHUSDT.xlsx', '2021-08-31 KAVAUSDT.xlsx', '2021-08-31 RUNEUSDT.xlsx', '2021-08-31 CTKUSDT.xlsx', '2021-08-31 LINKUSDT.xlsx', '2021-08-31 CELRUSDT.xlsx', '2021-08-31 RSRUSDT.xlsx', '2021-08-31 DGBUSDT.xlsx', '2021-08-31 SKLUSDT.xlsx', '2021-08-31 RENUSDT.xlsx', '2021-08-31 TOMOUSDT.xlsx', '2021-08-31 MTLUSDT.xlsx', '2021-08-31 LTCUSDT.xlsx', '2021-08-31 DODOUSDT.xlsx', '2021-08-31 EGLDUSDT.xlsx', '2021-08-31 KSMUSDT.xlsx', '2021-08-31 ONTUSDT.xlsx', '2021-08-31 VETUSDT.xlsx', '2021-08-31 TRBUSDT.xlsx', '2021-08-31 MANAUSDT.xlsx', '2021-08-31 COTIUSDT.xlsx', '2021-08-31 CHRUSDT.xlsx', '2021-08-31 ETHUSDT_210924.xlsx', '2021-08-31 BAKEUSDT.xlsx', '2021-08-31 GRTUSDT.xlsx', '2021-08-31 FLMUSDT.xlsx', '2021-08-31 EOSUSDT.xlsx', '2021-08-31 OGNUSDT.xlsx', '2021-08-31 SCUSDT.xlsx', '2021-08-31 BALUSDT.xlsx', '2021-08-31 STMXUSDT.xlsx', '2021-08-31 BTTUSDT.xlsx', '2021-08-31 LUNAUSDT.xlsx', '2021-08-31 DENTUSDT.xlsx', '2021-08-31 KNCUSDT.xlsx', '2021-08-31 SRMUSDT.xlsx', '2021-08-31 ENJUSDT.xlsx', '2021-08-31 ZENUSDT.xlsx', '2021-08-31 ATOMUSDT.xlsx', '2021-08-31 NEARUSDT.xlsx', '2021-08-31 BCHUSDT.xlsx', '2021-08-31 IOSTUSDT.xlsx', '2021-08-31 HBARUSDT.xlsx', '2021-08-31 ZECUSDT.xlsx', '2021-08-31 1000SHIBUSDT.xlsx', '2021-08-31 TLMUSDT.xlsx', '2021-08-31 BZRXUSDT.xlsx', '2021-08-31 ETHBUSD.xlsx', '2021-08-31 AAVEUSDT.xlsx', '2021-08-31 GTCUSDT.xlsx', '2021-08-31 ALGOUSDT.xlsx', '2021-08-31 ICPUSDT.xlsx', '2021-08-31 BTCUSDT_210924.xlsx', '2021-08-31 LRCUSDT.xlsx', '2021-08-31 AVAXUSDT.xlsx', '2021-08-31 MATICUSDT.xlsx', '2021-08-31 1INCHUSDT.xlsx', '2021-08-31 MKRUSDT.xlsx', '2021-08-31 THETAUSDT.xlsx', '2021-08-31 UNIUSDT.xlsx', '2021-08-31 LINAUSDT.xlsx', '2021-08-31 RVNUSDT.xlsx', '2021-08-31 FILUSDT.xlsx', '2021-08-31 NKNUSDT.xlsx', '2021-08-31 DEFIUSDT.xlsx', '2021-08-31 COMPUSDT.xlsx', '2021-08-31 BTCDOMUSDT.xlsx', '2021-08-31 SOLUSDT.xlsx', '2021-08-31 BTCUSDT.xlsx', '2021-08-31 OMGUSDT.xlsx', '2021-08-31 ICXUSDT.xlsx', '2021-08-31 BLZUSDT.xlsx', '2021-08-31 FTMUSDT.xlsx', '2021-08-31 YFIIUSDT.xlsx', '2021-08-31 KEEPUSDT.xlsx', '2021-08-31 BANDUSDT.xlsx', '2021-08-31 XRPUSDT.xlsx', '2021-08-31 SXPUSDT.xlsx', '2021-08-31 CRVUSDT.xlsx', '2021-08-31 BELUSDT.xlsx', '2021-08-31 DOTUSDT.xlsx', '2021-08-31 XEMUSDT.xlsx', '2021-08-31 ONEUSDT.xlsx', '2021-08-31 ZILUSDT.xlsx', '2021-08-31 AXSUSDT.xlsx', '2021-08-31 OCEANUSDT.xlsx', '2021-08-31 CHZUSDT.xlsx', '2021-08-31 ANKRUSDT.xlsx', '2021-08-31 SUSHIUSDT_res_dfs.pkl', '2021-07-01 ADAUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr']\n","['2021-07-01 BTCUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr']\n","['2021-02-07 BTC.xlsx', '2021-02-07 ETH.xlsx', '2021-02-11 BCHUSDT.xlsx', '2021-02-11 XRPUSDT.xlsx', '2021-02-11 EOSUSDT.xlsx', '2021-02-11 LTCUSDT.xlsx', '2021-02-11 ETCUSDT.xlsx', '2021-02-11 LINKUSDT.xlsx', '2021-02-11 XLMUSDT.xlsx', '2021-02-11 ADAUSDT.xlsx', '2021-02-11 XMRUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr']\n","['2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx']\n"]}],"source":["interval = '1m'\n","date_path = './candlestick_concated/%s/quant_v2/' % interval\n","file_list = os.listdir(date_path)\n","print((file_list))\n","\n","interval2 = '3m'\n","date_path2 = './candlestick_concated/%s/quant_v2/' % interval2\n","file_list2 = os.listdir(date_path2)\n","print((file_list2))\n","\n","interval3 = '5m'\n","date_path3 = './candlestick_concated/%s/quant_v2/' % interval3\n","file_list3 = os.listdir(date_path3)\n","print((file_list3))\n","\n","interval4 = '15m'\n","date_path4 = './candlestick_concated/%s/quant_v2/' % interval4\n","file_list4 = os.listdir(date_path4)\n","print((file_list4))\n","\n","interval5 = '30m'\n","date_path5 = './candlestick_concated/%s/quant_v2/' % interval5\n","file_list5 = os.listdir(date_path5)\n","print((file_list5))\n","\n","interval6 = '1h'\n","date_path6 = './candlestick_concated/%s/quant_v2/' % interval6\n","file_list6 = os.listdir(date_path6)\n","print((file_list6))\n","\n","interval7 = '4h'\n","date_path7 = './candlestick_concated/%s/quant_v2/' % interval7\n","file_list7 = os.listdir(date_path7)\n","print((file_list7))\n","\n","interval8 = '1d'\n","date_path8 = './candlestick_concated/%s/quant_v2/' % interval8\n","file_list8 = os.listdir(date_path8)\n","print((file_list8))"]},{"cell_type":"markdown","metadata":{"id":"M8-EChy0VsDr"},"source":["## cudf"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":414,"status":"ok","timestamp":1638754008241,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"b09qAb1sVtRP","outputId":"3a824202-064a-4544-b791-ffc777bb3f9c"},"outputs":[{"name":"stdout","output_type":"stream","text":["usage: conda [-h] [-V] command ...\n","conda: error: unrecognized arguments: -t=/content/notebooks\n"]}],"source":["# !conda install -c rapidsai-nightly -c nvidia -c numba -c conda-forge \\\n","#     cudf python=3.7 cudatoolkit=11.1 -t=$nb_path"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":413,"status":"ok","timestamp":1638754715310,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"Jnz6i7ZqRnb0","outputId":"207bc57b-a17a-4f67-fb26-24e46e2c6e26"},"outputs":[{"name":"stdout","output_type":"stream","text":["***********************************************************************\n","Woo! Your instance has the right kind of GPU, a Tesla P100-PCIE-16GB!\n","***********************************************************************\n","\n"]}],"source":["# !git clone https://github.com/rapidsai/rapidsai-csp-utils.git\n","!python rapidsai-csp-utils/colab/env-check.py"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4sKA_9Dbg4s2"},"outputs":[],"source":["# This will update the Colab environment and restart the kernel.  Don't run the next cell until you see the session crash.\n","!bash rapidsai-csp-utils/colab/update_gcc.sh\n","import os\n","os._exit(00)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"d1C4pNiBhYHX"},"outputs":[],"source":["# This will install CondaColab.  This will restart your kernel one last time.  Run this cell by itself and only run the next cell once you see the session crash.\n","import condacolab\n","condacolab.install()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":414,"status":"ok","timestamp":1638754863073,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"iGx3ACTvZqck","outputId":"e8379cc4-c325-4fe0-ac46-5fbbd7d38829"},"outputs":[{"name":"stdout","output_type":"stream","text":["✨🍰✨ Everything looks OK!\n"]}],"source":["# you can now run the rest of the cells as normal\n","import condacolab\n","condacolab.check()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oR8s7U8c7C28","outputId":"22be2731-fae1-45fc-f310-e48f60774bb2"},"outputs":[{"name":"stdout","output_type":"stream","text":["Installing RAPIDS Stable 21.10\n","Starting the RAPIDS install on Colab.  This will take about 15 minutes.\n","Collecting package metadata (current_repodata.json): ...working... done\n","Solving environment: ...working... WARNING conda.core.solve:_add_specs(611): pinned spec cudatoolkit=11.1 conflicts with explicit specs.  Overriding pinned spec.\n","failed with initial frozen solve. Retrying with flexible solve.\n","Solving environment: ...working... WARNING conda.core.solve:_add_specs(611): pinned spec cudatoolkit=11.1 conflicts with explicit specs.  Overriding pinned spec.\n","failed with repodata from current_repodata.json, will retry with next repodata source.\n","Collecting package metadata (repodata.json): ...working... done\n"]}],"source":["# Installing RAPIDS is now 'python rapidsai-csp-utils/colab/install_rapids.py <release> <packages>'\n","# The <release> options are 'stable' and 'nightly'.  Leaving it blank or adding any other words will default to stable.\n","# The <packages> option are default blank or 'core'.  By default, we install RAPIDSAI and BlazingSQL.  The 'core' option will install only RAPIDSAI and not include BlazingSQL, \n","!python rapidsai-csp-utils/colab/install_rapids.py stable\n","import os\n","os.environ['NUMBAPRO_NVVM'] = '/usr/local/cuda/nvvm/lib64/libnvvm.so'\n","os.environ['NUMBAPRO_LIBDEVICE'] = '/usr/local/cuda/nvvm/libdevice/'\n","os.environ['CONDA_PREFIX'] = '/usr/local'"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kWsxi4ZpKtGt"},"outputs":[],"source":["import shutil\n","import sys\n","\n","colab_env = \"/usr/lib\"\n","\n","rapids_path = os.path.join(current_path, \"rapidsai-csp-utils/lib\")\n","rapids_libs = os.listdir(rapids_path)\n","print(rapids_libs)\n","# break\n","\n","for lib_ in rapids_libs:\n","  try:\n","    shutil.copy(os.path.join(rapids_path, lib_), os.path.join(colab_env, lib_))\n","    sys.path.append(os.path.join(colab_env, lib_))\n","    print(\"copied to\" + os.path.join(colab_env, lib_))\n","  except Exception as e:\n","    print(e)"]},{"cell_type":"markdown","metadata":{"id":"Iy76iO7gztne"},"source":["## move legacy files"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hMRht32Czwry"},"outputs":[],"source":["# print()\n","cur_dir_list = os.listdir('.')\n","for f in cur_dir_list:\n","  if 'legacy' in f :\n","    # print(f)\n","    if os.path.isdir(current_path + f,):\n","      continue\n","\n","    shutil.move(current_path + f, current_path + 'legacy/' + f)\n","    print(\"moved to\" + current_path + 'legacy/' +  f)"]},{"cell_type":"markdown","metadata":{"id":"5duWn8t4BRyv"},"source":["# IDE platform\n"]},{"cell_type":"markdown","metadata":{"id":"6HOjnZjSgzk1"},"source":["## load ftr_list"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2761,"status":"ok","timestamp":1645833049156,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"7FPBG5Qqg2jB","outputId":"4780e831-7483-48ac-b3ae-0ab23bfd1907"},"outputs":[{"output_type":"stream","name":"stdout","text":["['2022-01-10 ETHUSDT.ftr']\n"]}],"source":["save_path = './candlestick_concated/res_df/'\n","\n","dir_path = \"bb4h_backi2\"\n","dir_path = \"bb1d_backi2\"\n","date = \"2022-01-10\"\n","\n","ftr_path = os.path.join(save_path, dir_path, \"concat/cum\", date)\n","\n","#     load ftr list    #\n","ftr_list = [s for s in os.listdir(ftr_path) if \"ftr\" in s if date in s]\n","# ftr_list = [s for s in os.listdir(os.path.join(save_path, dir_path)) if \"ftr\" in s if date in s]\n","print(ftr_list)"]},{"cell_type":"markdown","metadata":{"id":"xpyP5t8Ht_pE","jp-MarkdownHeadingCollapsed":true,"tags":[]},"source":["### calc recursive indi's min_period"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":235},"executionInfo":{"elapsed":15,"status":"error","timestamp":1645810346810,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"N1Hbm4OA4Tkk","outputId":"e6a3fc2f-316c-4a0d-9c91-df759c816b88"},"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-4-c602b9e1b7e6>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mticker_prcn\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_precision_by_price\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mres_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclose\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mtarget_len\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m300000\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mslice_len_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m50\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m10000\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m100\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mslice_len_list\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minsert\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget_len\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'res_df' is not defined"]}],"source":["ticker_prcn = get_precision_by_price(res_df.close.iloc[-1]) + 2\n","\n","target_len = 300000\n","slice_len_list = list(range(50, 10000, 100))\n","slice_len_list.insert(0, target_len)\n","\n","start_0 = time.time()\n","# prev_int_, prev_pnts_ = None, None\n","offset = 1\n","\n","for sl_idx, sample_len in enumerate(slice_len_list):\n","\n","  sample_df = res_df.iloc[-sample_len -offset:-offset]\n","  sample_len2 = sample_len\n","\n","  # --------- input using indi.s --------- #\n","  # res = ema_v0(sample_df['close'], 190)\n","  res = rsi(sample_df, 14)\n","\n","    #    to_htf()    #\n","  # df_5T = to_htf(sample_df, itv_='5T', offset='1h')\n","  # sample_len2 = len(df_5T)\n","\n","  # # --------- input using htf_indi. --------- #\n","  # res = ema(df_5T['close'], 195)\n","  # -------------------------------------- #\n","\n","  res_last_row = res.iloc[-1]\n","  if pd.isnull(res_last_row):\n","    continue\n","\n","  # print(res_last_row)\n","  # break\n","\n","  # sample_df = sample_df.join(to_lower_tf_v2(sample_df, df_5T, [-1]), how='inner')\n","\n","\n","  #   자리수 분할 계산    #\n","  int_, points_ = str(res_last_row).split('.')\n","  pnts_ = points_[:ticker_prcn]\n","\n","  if sl_idx == 0:\n","    target_int_ = int_\n","    target_pnts_ = pnts_\n","    print(\"target {} ({}) -> {} {}\".format(sample_len, sample_len2, int_, points_))\n","\n","  else:\n","    if target_int_ == int_ and target_pnts_ == pnts_:\n","      # print(sample_len, \"({})\".format(sample_len2), '->', int_, pnts_, end='\\n\\n')\n","      print(\"{} ({}) -> {} {}\\n\".format(sample_len, sample_len2, int_, points_))\n","      break\n","\n","print(time.time() - start_0)  # (1301)(1361)(1301)"]},{"cell_type":"markdown","metadata":{"id":"rrIGjmUzqU-D","tags":[]},"source":["## import utils & config"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"SeJan_0t95yL","executionInfo":{"status":"ok","timestamp":1645833054688,"user_tz":-540,"elapsed":5534,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"outputs":[],"source":["frame_ver = \"0114_htf\"\n","ID_arr = np.array(['v3', 'v5_2'])\n","\n","utils_public_name = \"{}.utils.{}_utils_public\".format(strat_pkg, frame_ver)\n","utils_public_lib = importlib.import_module(utils_public_name)\n","utils_public = utils_public_lib   # temporary\n","\n","u_name_list = [\"{}.utils.{}_utils_{}\".format(strat_pkg, frame_ver, id_) for id_ in ID_arr]\n","# utils_list_ = \n","utils_arr = np.array([importlib.import_module(u_name) for u_name in u_name_list])\n","# [utils1, utils2, utils3] = utils_list   # temporary\n","\n","config_name_list = [\"{}_config_{}.json\".format(frame_ver, id_) for id_ in ID_arr]\n","cfg_path_list = [os.path.join(current_path, strat_pkg, \"config\", name_) for name_ in config_name_list]\n","cfg_file_list = [open(cfg_path) for cfg_path in cfg_path_list]\n","# config_list_ = \n","config_arr = np.array([EasyDict(json.load(cfg_)) for cfg_ in cfg_file_list])\n","# [config1, config2, config3] = config_list   # temporary\n","#       opened files should be closed --> 닫지 않으면 reopen 시 error occurs         #\n","_ = [cfg_.close() for cfg_ in cfg_file_list]\n","\n","show_plot = 1   # idep's var - do not touch"]},{"cell_type":"markdown","metadata":{"id":"leSQlImg4_9L","jp-MarkdownHeadingCollapsed":true,"tags":[]},"source":["### utils_"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"CB2yZdQ95Cdg","executionInfo":{"status":"ok","timestamp":1645833054688,"user_tz":-540,"elapsed":11,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"outputs":[],"source":["# from funcs.funcs_indicator_candlescore import *\n","# import numpy as np\n","\n","\n","def enlist_rtc(res_df, config, np_timeidx):\n","\n","    strat_version = config.strat_version\n","\n","    res_df['short_rtc_1_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.point.outg_itv1]\n","    res_df['short_rtc_0_{}'.format(strat_version)] = res_df['bb_upper_%s' % config.loc_set.point.outg_itv0]\n","\n","    res_df['long_rtc_1_{}'.format(strat_version)] = res_df['bb_upper_%s' % config.loc_set.point.outg_itv1]\n","    res_df['long_rtc_0_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.point.outg_itv0]\n","\n","    #      entry reversion    #\n","    if config.ep_set.short_entry_score > 0:\n","        short_rtc_1_copy = res_df['short_rtc_1_{}'.format(strat_version)].copy()\n","        res_df['short_rtc_1_{}'.format(strat_version)] = res_df['long_rtc_1_{}'.format(strat_version)]\n","        res_df['long_rtc_1_{}'.format(strat_version)] = short_rtc_1_copy\n","\n","        short_rtc_0_copy = res_df['short_rtc_0_{}'.format(strat_version)].copy()\n","        res_df['short_rtc_0_{}'.format(strat_version)] = res_df['long_rtc_0_{}'.format(strat_version)]\n","        res_df['long_rtc_0_{}'.format(strat_version)] = short_rtc_0_copy\n","\n","    res_df['short_rtc_gap_{}'.format(strat_version)] = abs(\n","        res_df['short_rtc_0_{}'.format(strat_version)] - res_df['short_rtc_1_{}'.format(strat_version)])\n","    res_df['long_rtc_gap_{}'.format(strat_version)] = abs(\n","        res_df['long_rtc_1_{}'.format(strat_version)] - res_df['long_rtc_0_{}'.format(strat_version)])\n","\n","    res_df['h_short_rtc_1_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.point.tpg_itv1]\n","    # res_df['h_short_rtc_1_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.point.tpg_itv]\n","    res_df['h_short_rtc_0_{}'.format(strat_version)] = res_df['bb_upper_%s' % config.loc_set.point.tpg_itv0]\n","\n","    res_df['h_long_rtc_1_{}'.format(strat_version)] = res_df['bb_upper_%s' % config.loc_set.point.tpg_itv1]\n","    # res_df['h_long_rtc_1_{}'.format(strat_version)] = res_df['dc_upper_%s' % config.loc_set.point.tpg_itv]\n","    res_df['h_long_rtc_0_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.point.tpg_itv0]\n","\n","    #      entry reversion    #\n","    if config.ep_set.short_entry_score > 0:\n","        h_short_rtc_1_copy = res_df['h_short_rtc_1_{}'.format(strat_version)].copy()\n","        res_df['h_short_rtc_1_{}'.format(strat_version)] = res_df['h_long_rtc_1_{}'.format(strat_version)]\n","        res_df['h_long_rtc_1_{}'.format(strat_version)] = h_short_rtc_1_copy\n","\n","        h_short_rtc_0_copy = res_df['h_short_rtc_0_{}'.format(strat_version)].copy()\n","        res_df['h_short_rtc_0_{}'.format(strat_version)] = res_df['h_long_rtc_0_{}'.format(strat_version)]\n","        res_df['h_long_rtc_0_{}'.format(strat_version)] = h_short_rtc_0_copy\n","\n","    res_df['h_short_rtc_gap_{}'.format(strat_version)] = abs(\n","        res_df['h_short_rtc_0_{}'.format(strat_version)] - res_df['h_short_rtc_1_{}'.format(strat_version)])\n","    res_df['h_long_rtc_gap_{}'.format(strat_version)] = abs(\n","        res_df['h_long_rtc_1_{}'.format(strat_version)] - res_df['h_long_rtc_0_{}'.format(strat_version)])\n","\n","    res_df['short_dtk_1_{}'.format(strat_version)] = res_df['bb_lower_%s' % config.loc_set.zone.dtk_itv]\n","    res_df['short_dtk_0_{}'.format(strat_version)] = res_df['dc_upper_%s' % config.loc_set.zone.dtk_itv]\n","\n","    res_df['long_dtk_1_{}'.format(strat_version)] = res_df['bb_upper_%s' % config.loc_set.zone.dtk_itv]\n","    res_df['long_dtk_0_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.zone.dtk_itv]\n","\n","    res_df['short_dtk_gap_{}'.format(strat_version)] = abs(\n","        res_df['short_dtk_0_{}'.format(strat_version)] - res_df['short_dtk_1_{}'.format(strat_version)])\n","    res_df['long_dtk_gap_{}'.format(strat_version)] = abs(\n","        res_df['long_dtk_1_{}'.format(strat_version)] - res_df['long_dtk_0_{}'.format(strat_version)])\n","\n","    return res_df\n","\n","\n","def enlist_tr(res_df, config, np_timeidx, mode='OPEN'):\n","    strat_version = config.strat_version\n","\n","    res_df['short_open_{}'.format(strat_version)] = np.zeros(len(res_df))\n","    res_df['long_open_{}'.format(strat_version)] = np.zeros(len(res_df))\n","    res_df['h_entry_{}'.format(strat_version)] = np.zeros(len(res_df))\n","\n","    # -------- set ep level -------- #\n","\n","    #       limit ver.     #\n","    # res_df['short_ep_{}'.format(strat_version)] = res_df['short_rtc_1_{}'.format(strat_version)] + res_df['short_rtc_gap_{}'.format(strat_version)] * config.tr_set.ep_gap\n","    # res_df['long_ep_{}'.format(strat_version)] = res_df['long_rtc_1_{}'.format(strat_version)] - res_df['long_rtc_gap_{}'.format(strat_version)] * config.tr_set.ep_gap\n","\n","    res_df['short_ep_{}'.format(strat_version)] = res_df['close'] + res_df[\n","        'h_short_rtc_gap_{}'.format(strat_version)] * config.tr_set.ep_gap\n","    res_df['long_ep_{}'.format(strat_version)] = res_df['close'] - res_df[\n","        'h_long_rtc_gap_{}'.format(strat_version)] * config.tr_set.ep_gap\n","\n","    if config.tr_set.c_ep_gap != \"None\":\n","        res_df['short_ep_org_{}'.format(strat_version)] = res_df['short_ep_{}'.format(strat_version)].copy()\n","        res_df['long_ep_org_{}'.format(strat_version)] = res_df['long_ep_{}'.format(strat_version)].copy()\n","\n","        res_df['short_ep2_{}'.format(strat_version)] = res_df['h_short_rtc_1_{}'.format(strat_version)] + res_df[\n","            'h_short_rtc_gap_{}'.format(strat_version)] * config.tr_set.c_ep_gap\n","        res_df['long_ep2_{}'.format(strat_version)] = res_df['h_long_rtc_1_{}'.format(strat_version)] - res_df[\n","            'h_long_rtc_gap_{}'.format(strat_version)] * config.tr_set.c_ep_gap\n","\n","    res_df['short_spread_ep_{}'.format(strat_version)] = res_df[\n","        'bb_lower_5m']  # + res_df['h_short_rtc_gap_{}'.format(strat_version)] * config.loc_set.zone.spread_ep_gap\n","    res_df['long_spread_ep_{}'.format(strat_version)] = res_df[\n","        'bb_upper_5m']  # - res_df'h_long_rtc_gap_{}'.format(strat_version)] * config.loc_set.zone.spread_ep_gap\n","\n","    #       market ver.     #\n","    if config.ep_set.entry_type == \"MARKET\":\n","        res_df['short_ep_{}'.format(strat_version)] = res_df['close']\n","        res_df['long_ep_{}'.format(strat_version)] = res_df['close']\n","\n","    # ---------------------------------------- short = -1 ---------------------------------------- #\n","    # ---------------- ep_time  ---------------- #\n","\n","    rsi_upper = 50 + config.loc_set.point.osc_band\n","    rsi_lower = 50 - config.loc_set.point.osc_band\n","\n","    res_df['rsi_%s_shift' % config.loc_set.point.exp_itv] = res_df['rsi_%s' % config.loc_set.point.exp_itv].shift(\n","        config.loc_set.point.tf_entry)\n","\n","    res_df['short_open_{}'.format(strat_version)] = np.where(\n","        (res_df['rsi_%s_shift' % config.loc_set.point.exp_itv] >= rsi_upper) &\n","        (res_df['rsi_%s' % config.loc_set.point.exp_itv] < rsi_upper)\n","        , res_df['short_open_{}'.format(strat_version)] - 1, res_df['short_open_{}'.format(strat_version)])\n","\n","    res_df['short_open_{}'.format(strat_version)] = np.where((res_df['short_open_{}'.format(strat_version)] < 0) &\n","                                                        (np_timeidx % config.loc_set.point.tf_entry == (\n","                                                                    config.loc_set.point.tf_entry - 1))\n","                                                        , res_df['short_open_{}'.format(strat_version)] - 1,\n","                                                        res_df['short_open_{}'.format(strat_version)])\n","\n","    res_df['h_entry_{}'.format(strat_version)] = np.where(\n","        # (res_df['open'] >= res_df['bb_lower_%s' % config.loc_set.zone.dtk_itv]) &\n","        (res_df['close'].shift(config.loc_set.point.htf_entry * 1) >= res_df[\n","            'bb_lower_%s' % config.loc_set.zone.dtk_itv]) &\n","        (res_df['close'] < res_df['bb_lower_%s' % config.loc_set.zone.dtk_itv]) &\n","        (np_timeidx % config.loc_set.point.htf_entry == (config.loc_set.point.htf_entry - 1))\n","        , res_df['h_entry_{}'.format(strat_version)] - 1, res_df['h_entry_{}'.format(strat_version)])\n","\n","    # ---------------------------------------- long = 1 ---------------------------------------- #\n","    # ---------------------- ep_time ---------------------- #\n","    res_df['long_open_{}'.format(strat_version)] = np.where(\n","        (res_df['rsi_%s_shift' % config.loc_set.point.exp_itv] <= rsi_lower) &\n","        (res_df['rsi_%s' % config.loc_set.point.exp_itv] > rsi_lower)\n","        , res_df['long_open_{}'.format(strat_version)] + 1, res_df['long_open_{}'.format(strat_version)])\n","\n","    res_df['long_open_{}'.format(strat_version)] = np.where((res_df['long_open_{}'.format(strat_version)] > 0) &\n","                                                        (np_timeidx % config.loc_set.point.tf_entry == (\n","                                                                    config.loc_set.point.tf_entry - 1))\n","                                                        , res_df['long_open_{}'.format(strat_version)] + 1,\n","                                                        res_df['long_open_{}'.format(strat_version)])\n","\n","    res_df['h_entry_{}'.format(strat_version)] = np.where(\n","        # (res_df['open'] <= res_df['bb_upper_%s' % config.loc_set.zone.dtk_itv]) &\n","        (res_df['close'].shift(config.loc_set.point.htf_entry * 1) <= res_df[\n","            'bb_upper_%s' % config.loc_set.zone.dtk_itv]) &\n","        (res_df['close'] > res_df['bb_upper_%s' % config.loc_set.zone.dtk_itv]) &\n","        (np_timeidx % config.loc_set.point.htf_entry == (config.loc_set.point.htf_entry - 1))\n","        , res_df['h_entry_{}'.format(strat_version)] + 1, res_df['h_entry_{}'.format(strat_version)])\n","\n","    # ------------------------------ rtc tp & out ------------------------------ #\n","    # --------------- bb rtc out --------------- #\n","\n","    if config.loc_set.point.outg_dc_period != \"None\":\n","        res_df['short_rtc_0_{}'.format(strat_version)] = res_df['high'].rolling(\n","            config.loc_set.point.outg_dc_period).max()\n","        res_df['long_rtc_0_{}'.format(strat_version)] = res_df['low'].rolling(config.loc_set.point.outg_dc_period).min()\n","\n","    res_df['short_out_{}'.format(strat_version)] = res_df['short_rtc_0_{}'.format(strat_version)] + res_df[\n","        'short_rtc_gap_{}'.format(strat_version)] * config.tr_set.out_gap\n","    res_df['long_out_{}'.format(strat_version)] = res_df['long_rtc_0_{}'.format(strat_version)] - res_df[\n","        'long_rtc_gap_{}'.format(strat_version)] * config.tr_set.out_gap\n","\n","    if config.tr_set.t_out_gap != \"None\":\n","        res_df['short_out_org_{}'.format(strat_version)] = res_df['short_out_{}'.format(strat_version)].copy()\n","        res_df['long_out_org_{}'.format(strat_version)] = res_df['long_out_{}'.format(strat_version)].copy()\n","\n","        res_df['short_out2_{}'.format(strat_version)] = res_df['short_rtc_0_{}'.format(strat_version)] + res_df[\n","            'short_rtc_gap_{}'.format(strat_version)] * config.tr_set.t_out_gap\n","        res_df['long_out2_{}'.format(strat_version)] = res_df['long_rtc_0_{}'.format(strat_version)] - res_df[\n","            'long_rtc_gap_{}'.format(strat_version)] * config.tr_set.t_out_gap\n","\n","    # ------------------------------ tp ------------------------------ #\n","    # --------------- bb rtc tp --------------- #\n","    res_df['short_tp_{}'.format(strat_version)] = res_df['h_short_rtc_1_{}'.format(strat_version)] - res_df[\n","        'h_short_rtc_gap_{}'.format(strat_version)] * config.tr_set.tp_gap\n","    res_df['long_tp_{}'.format(strat_version)] = res_df['h_long_rtc_1_{}'.format(strat_version)] + res_df[\n","        'h_long_rtc_gap_{}'.format(strat_version)] * config.tr_set.tp_gap\n","        \n","    return res_df\n"]},{"cell_type":"markdown","metadata":{"id":"HKdUKKl-483N","jp-MarkdownHeadingCollapsed":true,"tags":[]},"source":["### utils_public"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"nzOYWA2kqZ0d","executionInfo":{"status":"ok","timestamp":1645833056544,"user_tz":-540,"elapsed":1866,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"outputs":[],"source":["# from funcs.funcs_indicator import *\n","# from funcs.funcs_trader import *\n","# import logging\n","# from ast import literal_eval\n","\n","sys_log = logging.getLogger()\n","\n","\n","class OrderSide:\n","    BUY = \"BUY\"\n","    SELL = \"SELL\"\n","    INVALID = None\n","\n","\n","def lvrg_set(res_df, config, open_side, ep_, out_, fee, limit_leverage=50):\n","    strat_version = config.strat_version\n","    if not pd.isnull(out_) and not config.lvrg_set.static_lvrg:\n","        if open_side == OrderSide.SELL:\n","            if strat_version in ['v3']:\n","                # config.lvrg_set.leverage = config.lvrg_set.target_pct / (out_ / ep_ - 1 - (fee + config.trader_set.market_fee))\n","                config.lvrg_set.leverage = config.lvrg_set.target_pct / (\n","                        out_ / ep_ - 1 - (fee + config.trader_set.market_fee))\n","\n","                #     zone 에 따른 c_ep_gap 를 고려 (loss 완화 방향) / 윗 줄은 수익 극대화 방향\n","                # config.lvrg_set.leverage = config.lvrg_set.target_pct / (out_ / res_df['short_ep_org'].iloc[ep_j] - 1 - (fee + config.trader_set.market_fee))\n","            elif strat_version in ['v5_2', 'v7_3']:\n","                # config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(ep_ / out_ - 1 - (fee + config.trader_set.market_fee))\n","                config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(\n","                    ep_ / out_ - 1 - (fee + config.trader_set.market_fee))\n","                # config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(res_df['short_ep_org'].iloc[ep_j] / out_ - 1 - (fee + config.trader_set.market_fee))\n","        else:\n","            #   윗 phase 는 min_pr 의 오차가 커짐\n","            if strat_version in ['v3']:\n","                # config.lvrg_set.leverage = config.lvrg_set.target_pct / (ep_ / out_ - 1 - (fee + config.trader_set.market_fee))\n","                config.lvrg_set.leverage = config.lvrg_set.target_pct / (\n","                        ep_ / out_ - 1 - (fee + config.trader_set.market_fee))\n","                # config.lvrg_set.leverage = config.lvrg_set.target_pct / (res_df['long_ep_org'].iloc[ep_j] / out_ - 1 - (fee + config.trader_set.market_fee))\n","            elif strat_version in ['v5_2', 'v7_3']:\n","                # config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(out_ / ep_ - 1 - (fee + config.trader_set.market_fee))\n","                config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(\n","                    out_ / ep_ - 1 - (fee + config.trader_set.market_fee))\n","                # config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(out_ / res_df['long_ep_org'].iloc[ep_j] - 1 - (fee + config.trader_set.market_fee))\n","\n","    if not config.lvrg_set.allow_float:\n","        config.lvrg_set.leverage = int(config.lvrg_set.leverage)\n","\n","    # ------------ leverage rejection ------------ #\n","    #       Todo - return None ? -> 1 (일단 임시로 수정함)\n","    if config.lvrg_set.leverage < 1 and config.lvrg_set.lvrg_rejection:\n","        return 1\n","    config.lvrg_set.leverage = min(limit_leverage, max(config.lvrg_set.leverage, 1))\n","\n","    return config.lvrg_set.leverage\n","\n","\n","def sync_check(df_, config, order_side=\"OPEN\", row_slice=True):\n","    try:\n","        make_itv_list = [m_itv.replace('m', 'T') for m_itv in literal_eval(config.trader_set.itv_list)]\n","        row_list = literal_eval(config.trader_set.row_list)\n","        rec_row_list = literal_eval(config.trader_set.rec_row_list)\n","        offset_list = literal_eval(config.trader_set.offset_list)\n","\n","        assert len(make_itv_list) == len(offset_list), \"length of itv & offset_list should be equal\"\n","        htf_df_list = [to_htf(df_, itv_=itv_, offset=offset_) for itv_idx, (itv_, offset_)\n","                       in enumerate(zip(make_itv_list, offset_list)) if itv_idx != 0]  #\n","        htf_df_list.insert(0, df_)\n","\n","        # for htf_df_ in htf_df_list:\n","        #     print(htf_df_.tail())\n","\n","        #       Todo        #\n","        #        1. row_list calc.\n","        #           a. indi. 를 만들기 위한 최소 period 가 존재하고, 그 indi. 를 사용한 lb_period 가 존재함\n","        #           b. => default_period + lb_period\n","        #               i. from sync_check, public_indi, ep_point2, ep_dur 의 tf 별 max lb_period check\n","        #                   1. default_period + max lb_period check\n","        #                       a. 현재까지 lb_period_list\n","        #                           h_prev_idx (open / close) 60\n","        #                           dc_period 135\n","        #                           zone_dc_period 135\n","\n","        # --------- slicing (in trader phase only) --------- #\n","        #               --> latency 영향도가 높은 곳은 이곳\n","        if row_slice:   # recursive 가 아닌 indi. 의 latency 를 고려한 slicing\n","            df, df_5T, df_15T, df_30T, df_4H = [df_s.iloc[-row_list[row_idx]:].copy() for row_idx, df_s in enumerate(htf_df_list)]\n","            rec_df, rec_df_5T, rec_df_15T, rec_df_30T, rec_df_4H = [df_s.iloc[-rec_row_list[row_idx]:].copy() for row_idx, df_s in enumerate(htf_df_list)]\n","        else:\n","            df, df_5T, df_15T, df_30T, df_4H = htf_df_list\n","            rec_df, rec_df_5T, rec_df_15T, rec_df_30T, rec_df_4H = htf_df_list\n","\n","        # --------- add indi. --------- #\n","\n","        #        1. 필요한 indi. 는 enlist_epouttp & mr_check 보면서 삽입\n","        #        2. min use_rows 계산을 위해서, tf 별로 gathering 함        #\n","        start_0 = time.time()\n","\n","        df = dc_line(df, None, '1m', dc_period=20)\n","        df = bb_line(df, None, '1m')\n","        # print(df.tail())\n","\n","        df = dc_line(df, df_5T, '5m')\n","        df = bb_line(df, df_5T, '5m')\n","\n","        df = dc_line(df, df_15T, '15m')\n","        df = bb_line(df, df_15T, '15m')\n","\n","        df = bb_line(df, df_30T, '30m')\n","\n","        # print(time.time() - start_0)\n","\n","        # start_0 = time.time()\n","        df = bb_line(df, df_4H, '4h')\n","        # print(time.time() - start_0)\n","\n","        rec_df['rsi_1m'] = rsi(rec_df, 14)  # Todo - recursive, 250 period\n","        df = df.join(to_lower_tf_v2(df, rec_df.iloc[:, [-1]], [-1], backing_i=0), how='inner')  # <-- join same_tf manual\n","        # print(df.rsi_1m.tail())\n","\n","        if order_side in [\"OPEN\"]:\n","            rec_df_5T['ema_5m'] = ema(rec_df_5T['close'], 195)  # Todo - recursive, 1100 period (5T)\n","            df = df.join(to_lower_tf_v2(df, rec_df_5T, [-1]), how='inner')\n","\n","    except Exception as e:\n","        sys_log.error(\"error in sync_check :\", e)\n","    else:\n","        return df\n","\n","\n","def public_indi(res_df, config, np_timeidx, order_side=\"OPEN\"):\n","\n","    strat_version = config.strat_version\n","    res_df = dc_level(res_df, '5m', 1)\n","    res_df = bb_level(res_df, '5m', 1)\n","    # res_df = st_level(res_df, '5m', 1)\n","\n","    res_df = dc_level(res_df, '15m', 1)\n","    res_df = bb_level(res_df, '15m', 1)\n","    res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line, np_timeidx=np_timeidx)\n","\n","    # res_df = st_level(res_df, '15m', 1)\n","\n","    # res_df = dc_level(res_df, '30m', 1)\n","    # res_df = bb_level(res_df, '30m', 1)\n","    # res_df = st_level(res_df, '30m', 1)\n","\n","    # res_df = bb_level(res_df, '1h', 1)\n","\n","    res_df = bb_level(res_df, '4h', 1)\n","\n","    res_df['dc_upper_v2'.format(strat_version)] = res_df['high'].rolling(config.loc_set.zone.dc_period).max()\n","    res_df['dc_lower_v2'.format(strat_version)] = res_df['low'].rolling(config.loc_set.zone.dc_period).min()\n","\n","    res_df['zone_dc_upper_v2'.format(strat_version)] = res_df['high'].rolling(config.loc_set.zone.zone_dc_period).max()\n","    res_df['zone_dc_lower_v2'.format(strat_version)] = res_df['low'].rolling(config.loc_set.zone.zone_dc_period).min()\n","\n","    if order_side in [\"OPEN\"]:\n","        start_0 = time.time()\n","\n","        res_df[\"wick_score\"], res_df['body_score'] = candle_score(res_df, unsigned=False)\n","\n","        # print(\"~ wick_score() elapsed time : {}\".format(time.time() - start_0))\n","\n","        start_0 = time.time()\n","\n","        h_c_intv1 = '15T'\n","        h_c_intv2 = 'H'\n","        res_df = h_candle_v2(res_df, h_c_intv1)\n","        res_df = h_candle_v2(res_df, h_c_intv2)\n","\n","        # sys_log.warning(\"~ h_wick_score elapsed time : {}\".format(time.time() - start_0))\n","        # print(\"wick_score() ~ h_candle() elapsed time : {}\".format(time.time() - start_0))\n","\n","        h_candle_col = ['hopen_{}'.format(h_c_intv2), 'hhigh_{}'.format(h_c_intv2), 'hlow_{}'.format(h_c_intv2),\n","                        'hclose_{}'.format(h_c_intv2)]\n","\n","        res_df['h_wick_score'], res_df['h_body_score'] = candle_score(res_df, ohlc_col=h_candle_col, unsigned=False)\n","\n","    #     temp indi.    #\n","    # res_df[\"ma30_1m\"] = res_df['close'].rolling(30).mean()\n","    # res_df[\"ma60_1m\"] = res_df['close'].rolling(60).mean()\n","    # res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line, np_timeidx=np_timeidx)\n","\n","    return res_df\n","\n","\n","def ep_loc_point2(res_df, config, i, out_j, allow_ep_in, side=OrderSide.SELL):\n","    try:\n","        if side == OrderSide.SELL:\n","            if config.strat_version == 'v5_2' and allow_ep_in == 0:\n","                if (res_df['dc_upper_1m'].iloc[i - 1] <= res_df['dc_upper_15m'].iloc[i]) & \\\n","                        (res_df['dc_upper_15m'].iloc[i - 1] != res_df['dc_upper_15m'].iloc[i]):\n","                    # if (res_df['dc_upper_1m'].iloc[e_j - 1] <= res_df['dc_upper_5m'].iloc[e_j]) & \\\n","                    #     (res_df['dc_upper_5m'].iloc[e_j - 1] != res_df['dc_upper_5m'].iloc[e_j]):\n","                    # (res_df['dc_upper_15m'].iloc[e_j] <= res_df['ema_5m'].iloc[e_j]):\n","                    pass  # 일단, pass (non_logging)\n","                else:\n","                    return 0, out_j  # input out_j could be initial_i\n","                # if res_df['ema_5m'].iloc[i] + res_df['dc_gap_5m'].iloc[i] * config.loc_set.point2.ce_gap <= res_df['close'].iloc[i]:\n","                #   pass\n","                # else:\n","                #   return 0, out_j\n","                # if res_df['bb_upper_5m'].iloc[i] <= res_df['ema_5m'].iloc[i]:\n","                #   pass\n","                # else:\n","                #   return 0, out_j\n","\n","                return 1, i  # i = e_j\n","        else:\n","            if config.strat_version == 'v5_2' and allow_ep_in == 0:\n","                if (res_df['dc_lower_1m'].iloc[i - 1] >= res_df['dc_lower_15m'].iloc[i]) & \\\n","                        (res_df['dc_lower_15m'].iloc[i - 1] != res_df['dc_lower_15m'].iloc[i]):\n","                    pass\n","                else:\n","                    return 0, out_j  # input out_j could be initial_i\n","\n","    except Exception as e:\n","        sys_log.error(\"error in ep_loc_point2 :\", e)\n","\n","    return 1, out_j  # allow_ep_in, out_j (for idep)\n","\n","\n","\n","def ep_loc_v2(res_df, config, np_timeidx, show_detail=True, ep_loc_side=OrderSide.SELL):\n","    strat_version = config.strat_version\n","\n","    # ------- param init ------- #\n","    open_side = None\n","    len_df = len(res_df)\n","    mr_res = np.ones(len_df)\n","    zone_arr = np.full(len_df, 'n')\n","\n","    # ------ process 한번에 처리해서 param_check 만 ver. 별로 하면 될 것 ------ #\n","    #     => public_indi() 가 될 것\n","    #     1. 사용한 param 정보와 matching 된 data 병렬로 나열 logging 될 것\n","    #     2. binarize 할 것 => short 와 long 은 같은 조건식 사용할 수 있게됨 - 보류 (생각보다 상반된 조건식이 많음)\n","    #       a. 조건식이 다른 경우는 ?\n","    tp_fee, out_fee = calc_tp_out_fee(config)\n","\n","    # -------------- candle_score -------------- #\n","    if config.loc_set.point.wick_score != \"None\":\n","      # -------------- candle_score_v0 (1m initial tick 기준임)  -------------- #\n","      if strat_version in ['v5_2', '1_1']:\n","        wick_score = res_df['wick_score'].to_numpy()\n","        if ep_loc_side == OrderSide.SELL:\n","          mr_res *= wick_score <= -config.loc_set.point.wick_score\n","        else:\n","          mr_res *= wick_score >= config.loc_set.point.wick_score\n","\n","    # -------------- spread scheduling -------------- #\n","    if config.loc_set.zone.short_spread != \"None\":\n","      bb_base_5m = res_df['bb_base_5m'].to_numpy()  # to_numpy() 는 ep_loc 에서 진행됨\n","      bb_lower_5m = res_df['bb_lower_5m'].to_numpy()\n","      bb_upper_5m = res_df['bb_upper_5m'].to_numpy()\n","      dc_lower_5m = res_df['dc_lower_5m'].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= (bb_base_5m - bb_lower_5m - tp_fee * bb_base_5m) / (bb_base_5m - bb_lower_5m + out_fee * bb_base_5m) >= config.loc_set.zone.short_spread\n","      else:\n","        mr_res *= (bb_base_5m - dc_lower_5m - tp_fee * bb_upper_5m) / (bb_base_5m - dc_lower_5m + out_fee * bb_base_5m) >= config.loc_set.zone.short_spread\n","\n","    # -------------- dtk -------------- #\n","    if config.loc_set.zone.dt_k != \"None\":\n","        # ------ dc_v2 ------ #\n","      dc_lower_v2 = res_df['dc_lower_v2'.format(strat_version)].to_numpy()\n","      short_dtk_1_ = res_df['short_dtk_1_{}'.format(strat_version)].to_numpy() - \\\n","              res_df['short_dtk_gap_{}'.format(strat_version)].to_numpy() * config.loc_set.zone.dt_k\n","      dc_upper_v2 = res_df['dc_upper_v2'.format(strat_version)].to_numpy()\n","      long_dtk_1_ = res_df['long_dtk_1_{}'.format(strat_version)].to_numpy() + \\\n","              res_df['long_dtk_gap_{}'.format(strat_version)].to_numpy() * config.loc_set.zone.dt_k\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= dc_lower_v2 >= short_dtk_1_\n","      else:\n","        mr_res *= dc_upper_v2 <= long_dtk_1_\n","\n","    # -------------- zone rejection  -------------- #\n","    if config.loc_set.zone.zone_rejection:\n","        #       config 로 통제할 수 없는 rejection 은 strat_version 으로 조건문을 나눔 (lvrg_set 과 동일)\n","        # ------------ by bb ------------ #\n","        # ------ bb & close ------ #\n","        close = res_df['close'].to_numpy()\n","\n","        if strat_version in ['v5_2']:\n","          bb_upper2_ = res_df['bb_upper2_%s' % config.loc_set.zone.bbz_itv].to_numpy()\n","          bb_lower2_ = res_df['bb_lower2_%s' % config.loc_set.zone.bbz_itv].to_numpy()\n","          if ep_loc_side == OrderSide.SELL:\n","            mr_res *= bb_upper2_ < close\n","          else:\n","            mr_res *= bb_lower2_ > close\n","\n","        # ------ close, bb & ema ------ #\n","        if strat_version in ['v5_2']:\n","          ema_5m = res_df['ema_5m'].to_numpy()\n","          if ep_loc_side == OrderSide.SELL:\n","            mr_res *= close < ema_5m\n","          else:\n","            mr_res *= close > ema_5m\n","\n","    # -------------- zoned tr_set - post_work -------------- #\n","    if config.tr_set.c_ep_gap != \"None\":\n","        #       by zone_dtk       #\n","        #         c_zone        #\n","        zone_dc_upper_v2_ = res_df['zone_dc_upper_v2'.format(strat_version)].to_numpy()\n","        long_dtk_plot_1 = res_df['long_dtk_plot_1'].to_numpy() + res_df['long_dtk_plot_gap'].to_numpy() * config.loc_set.zone.zone_dt_k\n","        zone_dc_lower_v2_ = res_df['zone_dc_lower_v2'.format(strat_version)].to_numpy()\n","        short_dtk_plot_ = res_df['short_dtk_plot_1'].to_numpy() - res_df['short_dtk_plot_gap'].to_numpy() * config.loc_set.zone.zone_dt_k\n","        if ep_loc_side == OrderSide.SELL:\n","          zone_res = zone_dc_upper_v2_ > long_dtk_plot_  # mr_res 와는 별개임\n","          # 지금의 생각은, dynamic 이여도, 그대로 ep2 를 입히면 될 것으로 보이는데, 어차피 zone_res 가 True 인 곳은 모두 c_zone 이니까\n","          res_df['short_ep_{}'.format(strat_version)][zone_res] = res_df['short_ep2_{}'.format(strat_version)][zone_res]\n","          res_df['short_out_{}'.format(strat_version)][~zone_res] = res_df['short_out2_{}'.format(strat_version)][~zone_res]  # t_zone 에 대한 out2 setting   \n","        else:\n","          zone_res = zone_dc_lower_v2_ < short_dtk_plot_\n","          res_df['long_ep_{}'.format(strat_version)] = res_df['long_ep2_{}'.format(strat_version)]\n","          res_df['long_out_{}'.format(strat_version)][~zone_res] = res_df['long_out2_{}'.format(strat_version)][~zone_res]  # t_zone 에 대한 out2 setting        \n","        zone_arr = np.where(zone_res == 1, 'c', 't')\n","\n","    return mr_res, zone_arr  # mr_res 의 True idx 가 open signal"]},{"cell_type":"markdown","metadata":{"id":"JjKHyqftzhD7","tags":[]},"source":["### set config (override available)"]},{"cell_type":"code","execution_count":8,"metadata":{"id":"q_4E-zH02WJy","executionInfo":{"status":"ok","timestamp":1645833057166,"user_tz":-540,"elapsed":623,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"outputs":[],"source":["#     caution : MARKET / LIMIT spelling   #\n","#      json doesn't support single quotes     #\n","\n","param_dict = \\\n","{\n","  \"strat_version\": \"v5_2\",\n","  \"trader_set\": {\n","    \"run\": 1,\n","    \"df_log\": 0,\n","    \"open_index\": -1,\n","    \"complete_index\": -2,\n","    \"limit_fee\": 0.0002,\n","    \"market_fee\": 0.0004,\n","    \"initial_asset\": 3500,\n","    \"asset_changed\": 0,\n","    \"symbol\": \"ETHUSDT\",\n","    \"symbol_changed\": 0,\n","    \"itv_list\": [\n","      \"1m\",\n","      \"5m\",\n","      \"15m\",\n","      \"30m\",\n","      \"4h\"\n","    ],\n","    \"row_list\": [\n","      200,\n","      160,\n","      30,\n","      25,\n","      25\n","    ],\n","    \"rec_row_list\": [\n","      250,\n","      1100,\n","      1,\n","      1,\n","      1\n","    ],\n","    \"offset_list\": [\n","      \"1h\",\n","      \"1h\",\n","      \"1h\",\n","      \"1h\",\n","      \"1h\"\n","    ],\n","    \"rsi_out_stratver\": [\n","      \"v7_3\",\n","      \"1_1\"\n","    ],\n","    \"bar_close_second\": 59,\n","    \"realtime_term\": 0.01,\n","    \"api_retry_term\": 3,\n","    \"check_entry_sec\": 10,\n","    \"entry_execution_wait\": 60,\n","    \"breakout_qty_ratio\": 0.97,\n","    \"qty_check_term\": 30,\n","    \"exit_execution_wait\": 60,\n","    \"close_complete_term\": 5,\n","    \"save_stacked_df\": 0,\n","    \"stacked_df_exist\": 1\n","  },\n","  \"pos_set\": {\n","    \"short_inversion\": 0,\n","    \"long_inversion\": 0,\n","    \"short_ban\": 1,\n","    \"long_ban\": 0\n","  },\n","  \"loc_set\": {\n","    \"zone\": {\n","      \"short_spread\": \"None\",\n","      \"long_spread\": \"None\",\n","      \"tr_thresh\": \"None\",\n","      \"dtk_dc_itv\": \"None\",\n","      \"dtk_itv\": \"5m\",\n","      \"dt_k\": \"None\",\n","      \"dc_period\": 135,\n","      \"ei_k\": -0.66,\n","      \"use_dtk_line\": 0,\n","      \"zone_rejection\": 1,\n","      \"gap_mply\": 1,\n","      \"c_itv_ticks\": 60,\n","      \"ad_idx\": 19,\n","      \"bbz_itv\": \"15m\",\n","      \"zone_dt_k\": 0.4,\n","      \"zone_dc_period\": 135,\n","      \"dr_error\": 0.1,\n","      \"bbwp_thresh\": 0.5,\n","      \"entry_incycle\": 5,\n","      \"max_eplim_pct\": 0.05,\n","      \"min_eplim_pct\": 0.013\n","    },\n","    \"point\": {\n","      \"exp_itv\": \"1m\",\n","      \"tpg_itv1\": \"5m\",\n","      \"tpg_itv0\": \"5m\",\n","      \"outg_itv1\": \"5m\",\n","      \"outg_itv0\": \"5m\",\n","      \"outg_dc_period\": \"None\",\n","      \"tf_entry\": 1,\n","      \"htf_entry\": 15,\n","      \"wick_score\": 50,\n","      \"body_score\": \"None\",\n","      \"wick_score2\": \"None\",\n","      \"body_score2\": \"None\",\n","      \"osc_band\": 20\n","    },\n","    \"point2\": {\n","      \"ce_gap\": 0.5\n","    }\n","  },\n","  \"tr_set\": {\n","    \"ep_gap\": 0.0,\n","    \"tp_gap\": 0.0,\n","    \"decay_gap\": \"None\",\n","    \"out_gap\": 0.5,\n","    \"c_ep_gap\": \"None\",\n","    \"t_out_gap\": 0.0\n","  },\n","  \"ep_set\": {\n","    \"short_entry_score\": -2,\n","    \"entry_type\": \"LIMIT\",\n","    \"static_ep\": 1,\n","    \"tpout_onexec\": 0\n","  },\n","  \"tp_set\": {\n","    \"non_tp\": 0,\n","    \"tp_type\": \"BOTH\",\n","    \"static_tp\": 1,\n","    \"decay_term\": 60,\n","    \"time_tp\": 0,\n","    \"partial_num\": 1,\n","    \"partial_qty_divider\": 1.5\n","  },\n","  \"out_set\": {\n","    \"out_type\": \"MARKET\",\n","    \"use_out\": 1,\n","    \"static_out\": 1,\n","    \"hl_out\": 1,\n","    \"price_restoration\": 0,\n","    \"retouch\": 0,\n","    \"retouch_out_period\": 500,\n","    \"second_out\": 0,\n","    \"approval_st_gap\": 1.5,\n","    \"second_out_gap\": 0.5\n","  },\n","  \"lvrg_set\": {\n","    \"leverage\": 10,\n","    \"static_lvrg\": 1,\n","    \"allow_float\": 0,\n","    \"target_pct\": 0.1,\n","    \"lvrg_rejection\": 0\n","  }\n","}\n","\n","config = EasyDict(param_dict)\n","# param_json = json.dumps(param_dict, indent=2)"]},{"cell_type":"markdown","metadata":{"id":"dzla8i9_ysmP","jp-MarkdownHeadingCollapsed":true,"tags":[]},"source":["#### save config"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":544,"status":"ok","timestamp":1639994748940,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"FlNGKvW_w2za","outputId":"c575ce69-def0-4e6c-c949-a63707467b2e"},"outputs":[{"name":"stdout","output_type":"stream","text":["/content/drive/My Drive/Colab Notebooks/JnQ/config/config_v5_2.1220_candlejson dumped !\n"]}],"source":["config_name = \"config_v5_2.1220_candlejson\"\n","# config_name = \"config_v3.json\"\n","cfg_full_path = os.path.join(current_path, \"config\", config_name)\n","\n","\n","with open(cfg_full_path, 'w') as cfg:\n","    json.dump(config1, cfg, indent=2)\n","    print(\"{} dumped !\".format(cfg_full_path))"]},{"cell_type":"markdown","metadata":{"id":"rLI8unIyroiC","tags":[]},"source":["## run"]},{"cell_type":"code","source":["multi_mode = 0\n","id_idx_list = [1]    # 0, 1, 2... multi_mode 가 아닌 경우 필히 작성\n","public_override = 1\n","utils_override = 1\n","config_override = 1  # utils_public /utils / config 으로 세분화하는게 좋을 것으로 봄\n","\n","# ------ config_list 와 같은 org_var 에 override 하는거 다시 생각하기 ------ #\n","# if not multi_mode:  # override 하지않는 경우에 config[0] 만을 사용하니, config[0] 에 어떤 version 을 배치할지 선택\n","ID_list = ID_arr[id_idx_list]\n","utils_list = utils_arr[id_idx_list]\n","config_list = config_arr[id_idx_list]\n","\n","# if config_override:\n","#   config_list[0] = config\n","config = config_list[0]  # Todo - overide 시에도 multi 가 지원되도록 (multi 여부는 이제 id_idx_list 로 결정됨)\n","                         # custom base config, if use override -> set to config[0]\n","\n","tp_fee, out_fee = calc_tp_out_fee(config)   # -> rev_pr 때문에 일단 이곳에도 선언함\n","\n","# ------- inversion set ------- #\n","inversion = 0\n","fdist_thresh = 1\n","\n","# ------- plot param ------- #\n","show_detail = 0\n","# fontsize = 15\n","# title_position = (0.5, 0.5)\n","\n","# ------- temp param ------- #\n","rsi_out_stratver = ['v7_3', '1_1']\n","allow_osc_touch = 0\n","rsi_gap = 5\n","\n","early_out_tpg = 0.36\n","\n","# ------- survey param ------- #\n","itv_num_list = [1, 3, 5, 15]\n","\n","itv_list = ['15m', '30m', '1h', '4h']\n","# itv_list = ['3m', '5m', '15m', '30m', '1h', '4h']\n","\n","# x_val_list = np.arange(, 2.0, 0.1)     # prcn 1\n","x_val_list = np.arange(-0.69, -0.8, -0.01)  # prcn 2\n","# x_val_list = np.arange(-0.695, -0.75, -0.005)    # prcn 3\n","# x_val_list = np.arange(0.944, 0.945, 0.0001)    # prcn 4\n","# x_val_list = np.arange(1, 10, 1)   # prcn -1\n","x_val_list = np.arange(200, 180, -5)   # prcn -2\n","\n","y_val_cols = [\"wr\", \"sr\", \"frq\", \"dpf\", \"acc_pr\", \"sum_pr\", \"acc_mdd\", \"sum_mdd\", \"liqd\", \"min_pr\", \"tr\", \"dr\"]\n","y_rev_val_cols = [\"wr\", \"sr\", \"acc_pr\", \"sum_pr\", \"acc_mdd\", \"sum_mdd\", \"min_pr\"]"],"metadata":{"id":"qBJfPsmJzVIr","executionInfo":{"status":"ok","timestamp":1645833057167,"user_tz":-540,"elapsed":10,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["start_0 = time.time()\n","key = ftr_list[0]\n","res_df = pd.read_feather(os.path.join(ftr_path, key), columns=None, use_threads=True).set_index(\"index\") # .loc[pd.to_datetime(\"2021-07-10 04:59:59.999000\"):]\n","print(key, \"loaded !\")\n","print(\"load res_df elapsed time :\", time.time() - start_0)\n","\n","np_timeidx = np.array([intmin_np(date_) for date_ in res_df.index.to_numpy()])\n","\n","start_0 = time.time()\n","if public_override:\n","    res_df = public_indi(res_df, config, np_timeidx)  # 현재 대부분의 시간은 h_candle 에서 소비되고 있음\n","else:\n","    res_df = utils_public.public_indi(res_df, config, np_timeidx)\n","print(\"public_indi elapsed time :\", time.time() - start_0)\n","\n","# ------------ entlist rtc & tr 은 중복되는 여부에 따라 user 가 flexible coding 해야할 것 ------------ #\n","start_0 = time.time()\n","if utils_override:\n","    res_df = enlist_rtc(res_df, config, np_timeidx)\n","else:\n","    for utils_, config_ in zip(utils_list, config_list):   # recursively\n","        res_df = utils_.enlist_rtc(res_df, config_, np_timeidx)\n","        if not multi_mode:\n","            break\n","print(\"enlist_rtc elapsed time :\", time.time() - start_0)\n","\n","start_0 = time.time()\n","if utils_override:\n","    res_df = enlist_tr(res_df, config, np_timeidx)\n","else:\n","    for utils_, config_ in zip(utils_list, config_list):   # recursively\n","        res_df = utils_.enlist_tr(res_df, config_, np_timeidx)\n","        if not multi_mode:\n","            break\n","print(\"enlist_tr elapsed time :\", time.time() - start_0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WstWVNihCNH8","executionInfo":{"status":"ok","timestamp":1645833067716,"user_tz":-540,"elapsed":10559,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"827ce24c-0840-4095-e5ba-aac13d2baaad"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["2022-01-10 ETHUSDT.ftr loaded !\n","load res_df elapsed time : 6.367329835891724\n","public_indi elapsed time : 2.4258370399475098\n","enlist_rtc elapsed time : 0.05350136756896973\n","enlist_tr elapsed time : 0.1734294891357422\n"]}]},{"cell_type":"markdown","source":["### ep_loc mr_res"],"metadata":{"id":"RqRF1eyZ0xBL"}},{"cell_type":"code","source":["# ------ get mr_res, zone_arr ------ #\n","short_mr_res_obj = np.array([ep_loc_v2(res_df, config_, np_timeidx, show_detail=True, ep_loc_side=OrderSide.SELL) for config_ in config_list])\n","long_mr_res_obj = np.array([ep_loc_v2(res_df, config_, np_timeidx, show_detail=True, ep_loc_side=OrderSide.BUY) for config_ in config_list])\n","short_open_idx_list = [np.where(res_df['short_open_{}'.format(id)].to_numpy() * mr_res == config.ep_set.short_entry_score)[0] for id, mr_res in zip(ID_list, short_mr_res_obj[:, 0].astype(np.float64))]  # zip 으로 zone (str) 과 묶어서 dtype 변경됨\n","long_open_idx_list = [np.where(res_df['long_open_{}'.format(id)].to_numpy() * mr_res == -config.ep_set.short_entry_score)[0] for id, mr_res in zip(ID_list, long_mr_res_obj[:, 0].astype(np.float64))]\n","\n","# ------ open_info_arr ------ #\n","short_side_list = [np.full(len(list_), OrderSide.SELL) for list_ in short_open_idx_list]\n","long_side_list = [np.full(len(list_), OrderSide.BUY) for list_ in long_open_idx_list]\n","\n","short_zone_list = [zone_res[short_open_idx] for zone_res, short_open_idx in zip(short_mr_res_obj[:, 1], short_open_idx_list)]\n","long_zone_list = [zone_res[long_open_idx] for zone_res, long_open_idx in zip(long_mr_res_obj[:, 1], long_open_idx_list)]\n","\n","short_id_list = [np.full(len(list_), id) for id, list_ in zip(ID_list, short_open_idx_list)]\n","long_id_list = [np.full(len(list_), id) for id, list_ in zip(ID_list, long_open_idx_list)]\n","\n","selected_id_idx = np.arange(len(id_idx_list))\n","short_id_idx_list = [np.full(len(list_), id) for id, list_ in zip(selected_id_idx, short_open_idx_list)]\n","long_id_idx_list = [np.full(len(list_), id) for id, list_ in zip(selected_id_idx, long_open_idx_list)]"],"metadata":{"id":"MY1csdNRLGsk","executionInfo":{"status":"ok","timestamp":1645833108940,"user_tz":-540,"elapsed":2131,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["#   series 만들어서 short / long 끼리 합치고 둘이 합치고, 중복은 우선 순위 정해서 제거\n","short_open_df_list = [pd.DataFrame(index=index_, data=np.vstack((data_)).T, columns=['side', 'zone', 'id', 'id_idx']) for index_, data_ in zip(short_open_idx_list, zip(short_side_list, short_zone_list, short_id_list, short_id_idx_list))]\n","long_open_df_list = [pd.DataFrame(index=index_, data=np.vstack((data_)).T, columns=['side', 'zone', 'id', 'id_idx']) for index_, data_ in zip(long_open_idx_list, zip(long_side_list, long_zone_list, long_id_list, long_id_idx_list))]"],"metadata":{"id":"Bi_thncr_MIP","executionInfo":{"status":"ok","timestamp":1645833109544,"user_tz":-540,"elapsed":2,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["open_info_df = pd.concat(short_open_df_list + long_open_df_list)\n","\n","# ------ sorting + unique ------ #\n","open_info_df.sort_index(inplace=True)\n","# print(len(open_info_df))\n","open_info_df[~open_info_df.index.duplicated(keep='first')]  # 먼저 순서를 우선으로 지정\n","# print(len(open_info_df))\n","\n","open_info_df.head()"],"metadata":{"id":"44rgbNuPYK3T","executionInfo":{"status":"ok","timestamp":1645833110003,"user_tz":-540,"elapsed":5,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"colab":{"base_uri":"https://localhost:8080/","height":206},"outputId":"356f6fe2-ca50-4e97-ea1b-8ed7a0b155aa"},"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/html":["\n","  <div id=\"df-aeb8e68a-86ea-4d21-956e-1ffb31748230\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>side</th>\n","      <th>zone</th>\n","      <th>id</th>\n","      <th>id_idx</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>7708</th>\n","      <td>BUY</td>\n","      <td>n</td>\n","      <td>v5_2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>7710</th>\n","      <td>BUY</td>\n","      <td>n</td>\n","      <td>v5_2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>8211</th>\n","      <td>BUY</td>\n","      <td>n</td>\n","      <td>v5_2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>8214</th>\n","      <td>BUY</td>\n","      <td>n</td>\n","      <td>v5_2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>12577</th>\n","      <td>BUY</td>\n","      <td>n</td>\n","      <td>v5_2</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-aeb8e68a-86ea-4d21-956e-1ffb31748230')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-aeb8e68a-86ea-4d21-956e-1ffb31748230 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-aeb8e68a-86ea-4d21-956e-1ffb31748230');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["      side zone    id id_idx\n","7708   BUY    n  v5_2      0\n","7710   BUY    n  v5_2      0\n","8211   BUY    n  v5_2      0\n","8214   BUY    n  v5_2      0\n","12577  BUY    n  v5_2      0"]},"metadata":{},"execution_count":13}]},{"cell_type":"markdown","source":["#### main"],"metadata":{"id":"IWO7KkqltMFt"}},{"cell_type":"code","source":["# ------------ public announcement ------------ #\n","open_info_list = [open_info_df[col_].to_numpy() for col_ in open_info_df.columns]\n","side_arr, zone_arr, id_arr, id_idx_arr = open_info_list\n","\n","data_cols = ['open', 'high', 'low', 'close', 'bb_lower_5m', 'bb_upper_5m', 'rsi_1m']\n","data_list = [res_df[col_].to_numpy() for col_ in data_cols]\n","\n","h, l = data_list[1:3]\n","len_df = len(res_df)\n","\n","start_0 = time.time()\n","paired_res = en_ex_pairing(res_df, open_info_df.index, open_info_list, data_list, config_list, np_timeidx)\n","print(\"en_ex_pairing elapsed time :\", time.time() - start_0)  #  0.37 --> 0.3660471439361572"],"metadata":{"id":"eiQ36_SLLE3w","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1645833120558,"user_tz":-540,"elapsed":460,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"41da14df-7e25-45db-d70e-57fdb00d0b9c"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 0.378861665725708\n"]}]},{"cell_type":"code","source":["start_0 = time.time()\n","short_pr, short_obj, short_lvrg_arr, short_fee_arr, long_pr, long_obj, long_lvrg_arr, long_fee_arr = \\\n","idep_plot_v4(len_df, h, l, side_arr, paired_res, inversion=False, sample_ratio=0.7)\n","print(\"idep_plot_v4 elapsed time :\", time.time() - start_0)\n","# %timeit -n1 -r1 idep_plot_v4(res_df, h, l, obj_list, inversion=False, sample_ratio=0.7)  # 2.23 s"],"metadata":{"id":"H2zWz1VViHjc","colab":{"base_uri":"https://localhost:8080/","height":557},"executionInfo":{"status":"ok","timestamp":1645833125989,"user_tz":-540,"elapsed":3524,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"8cfb9b7f-37ff-4805-97ea-d397944f7cb8"},"execution_count":17,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1728x576 with 6 Axes>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["idep_plot_v4 elapsed time : 2.271162271499634\n"]}]},{"cell_type":"code","source":["def idep_plot_v4(len_df, h, l, side_arr, paired_res, inversion=False, sample_ratio=0.7, title_position=(0.5, 0.5), fontsize=15):\n","\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(24, 8))\n","  gs = gridspec.GridSpec(nrows=2,  # row 몇 개\n","                          ncols=3,  # col 몇 개\n","                          height_ratios=[10, 1]\n","                          # height_ratios=[10, 10, 1]\n","                          )\n","  gs_idx = 0\n","  plt.suptitle(key)\n","\n","  v_line = int(len_df * sample_ratio)  \n","\n","  # ------ short & long data preparation ------ #\n","  # start_0 = time.time()\n","  valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr = paired_res\n","  short_valid_openi_idx = np.where(side_arr[valid_openi_arr] == OrderSide.SELL)[0]  # valid_openi_arr 에 대한 idx, # side_arr, \n","  long_valid_openi_idx = np.where(side_arr[valid_openi_arr] == OrderSide.BUY)[0]\n","\n","  short_\n","  short_obj = np.hstack((pair_price_arr[short_valid_openi_idx], pair_idx_arr[short_valid_openi_idx]))\n","  long_obj = np.hstack((pair_price_arr[long_valid_openi_idx], pair_idx_arr[long_valid_openi_idx]))\n","  both_obj = np.vstack((short_obj, long_obj))\n","\n","  short_obj, long_obj, both_obj = [np.split(obj_, 4, axis=1) for obj_ in [short_obj, long_obj, both_obj]]\n","\n","  short_lvrg_arr, long_lvrg_arr = [lvrg_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","  short_fee_arr, long_fee_arr = [fee_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","  # print(\"elapsed time :\", time.time() - start_0)\n","  \n","  # ------ plot_data ------ #\n","  # start_0 = time.time()\n","  s_liqd = liquidation(OrderSide.SELL, h, short_obj, short_lvrg_arr, short_fee_arr)\n","  short_pr = get_pr(OrderSide.SELL, *short_obj[:2], short_lvrg_arr, short_fee_arr, inversion)\n","  short_total_pr = to_total_pr(len_df, short_pr, short_obj[-1])\n","  short_cum_pr = np.cumprod(short_total_pr)\n","  gs_idx = plot_info_v2(gs, gs_idx, len_df, short_pr, short_total_pr, short_cum_pr, s_liqd, short_lvrg_arr[-1], v_line, title_position, fontsize)\n","  # print(\"elapsed time :\", time.time() - start_0)\n","\n","  # start_0 = time.time()\n","  l_liqd = liquidation(OrderSide.BUY, l, long_obj, long_lvrg_arr, long_fee_arr)\n","  long_pr = get_pr(OrderSide.BUY, *long_obj[:2], long_lvrg_arr, long_fee_arr, inversion)\n","  long_total_pr = to_total_pr(len_df, long_pr, long_obj[-1])\n","  long_cum_pr = np.cumprod(long_total_pr)\n","  gs_idx = plot_info_v2(gs, gs_idx, len_df, long_pr, long_total_pr, long_cum_pr, l_liqd, long_lvrg_arr[-1], v_line, title_position, fontsize)\n","  # print(\"elapsed time :\", time.time() - start_0)\n","\n","  # start_0 = time.time()\n","  b_liqd = min(s_liqd, l_liqd)\n","  both_pr = np.vstack((short_pr, long_pr))\n","  both_total_pr = to_total_pr(len_df, both_pr, both_obj[-1])\n","  both_cum_pr = np.cumprod(both_total_pr)\n","  gs_idx = plot_info_v2(gs, gs_idx, len_df, both_pr, both_total_pr, both_cum_pr, b_liqd, lvrg_arr[-1], v_line, title_position, fontsize)\n","  # print(\"elapsed time :\", time.time() - start_0)\n","\n","  # start_0 = time.time()\n","  gs_idx = frq_dev_plot_v2(gs, gs_idx, len_df, short_obj[-1], short_cum_pr[-1], fontsize)\n","  gs_idx = frq_dev_plot_v2(gs, gs_idx, len_df, long_obj[-1], long_cum_pr[-1], fontsize)\n","  gs_idx = frq_dev_plot_v2(gs, gs_idx, len_df, both_obj[-1], both_cum_pr[-1], fontsize)\n","  # print(\"elapsed time :\", time.time() - start_0)\n","\n","  plt.show()\n","  plt.close()\n","\n","  return short_pr, short_obj, short_lvrg_arr, short_fee_arr, long_pr, long_obj, long_lvrg_arr, long_fee_arr"],"metadata":{"id":"6BHPh_RQPpme","executionInfo":{"status":"ok","timestamp":1645833113941,"user_tz":-540,"elapsed":2,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"execution_count":14,"outputs":[]},{"cell_type":"markdown","source":["### en_ex_pairing + check_functions"],"metadata":{"id":"1GVZ03zDyU2N"}},{"cell_type":"code","source":["def en_ex_pairing(res_df, open_idx, open_info_list, data_list, config_list, np_timeidx):  # 이미 충분히 줄여놓은 idx 임\n","  side_arr, zone_arr, id_arr, id_idx_arr = open_info_list\n","  id_idx_arr = id_idx_arr.astype(int)\n","\n","  o, h, l, c, bb_lower_5m, bb_upper_5m, rsi_exit = data_list\n","  \n","  valid_openi_list = []\n","  pair_idx_list = []\n","  pair_price_list = []\n","  lvrg_list, fee_list = [], []\n","  len_df = len(res_df)\n","  len_open_idx = len(open_idx)\n","  i, open_i = 0, 0  # i for total_res_df indexing\n","\n","  while 1:\n","    # ------------ entry phase ------------ #      \n","    # ------ ep_loc ------ #      \n","    op_idx = open_idx[open_i]   # open_i 는 i 와 별개로 운영\n","    if op_idx < i:   # i = 이전 거래 끝난후의 res_df index, '<' : 거래 종료시점 진입 가능하다는 의미\n","      open_i += 1\n","      if open_i >= len_open_idx:\n","        break\n","      continue\n","    \n","    #     1. 해당 id 로 config 재할당해야함 - 적정 config 를 뽑아내기 위한 id_idx_arr 도 필요할 것으로 보임\n","    id_idx = id_idx_arr[open_i]\n","    config = config_list[id_idx]\n","    strat_version = config.strat_version\n","    open_side = side_arr[open_i]\n","\n","    side_pos = 'short' if open_side == OrderSide.SELL else 'long'\n","    ep_arr = res_df['{}_ep_{}'.format(side_pos, strat_version)].to_numpy()  # Todo - while loop 내에서 to_numpy() 반복하느니, pd_indexing 이 낫지 않을까 \n","    tp_arr = res_df['{}_tp_{}'.format(side_pos, strat_version)].to_numpy()  # => eptpout arr_list 만들어서 꺼내 사용하면 될 것\n","    out_arr = res_df['{}_out_{}'.format(side_pos, strat_version)].to_numpy()\n","\n","    # ------ ei_k & point2 ------ #  \n","    i = op_idx + 1    # open_signal 이 close_bar.shift(1) 이라고 가정하고 다음 bar 부터 체결확인한다는 의미\n","    if i >= len_df:   # res_df 의 last_index 까지 돌아야함\n","      break\n","    exec_j, ep_j, tp_j, out_j, entry_done, ep, fee = check_eik_point2_exec(config, op_idx, len_df, open_side, o, h, l, c, ep_arr)      \n","    i = exec_j \n","\n","    if not entry_done:  # 이 phase 는 exit_phase 뒤에도 있어야할 것 - entry_done var. 사용은 안하겠지만\n","      open_i += 1   # 확인 끝났으면 조기 이탈(+1), 다음 open_idx 조사 진행 \n","      if open_i >= len_open_idx:\n","        break\n","      continue\n","    \n","    # ------ leverage ------ #      \n","    out = out_arr[out_j]\n","    if public_override:\n","        leverage = lvrg_set(res_df, config, open_side, ep, out, fee)  # res_df 변수 사용됨 - 주석 처리 된 상태일뿐\n","    else:\n","        leverage = utils_public.lvrg_set(res_df, config, open_side, ep, out, fee)\n","\n","    exit_done, cross_on = 0, 0\n","    while 1:\n","      # ------------ exit phase ------------ #\n","      i += 1  # entry 다음 tick 부터 exit 허용\n","      if i >= len_df:   # res_df 의 last_index 까지 돌아야함\n","        break\n","\n","      if config.tp_set.static_tp:\n","        if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","          tp_j = ep_j  # tpout_onexec = using dynamic_ep --> using ep_j 에 대한 이유\n","      else:\n","        tp_j = i          \n","\n","      if config.out_set.static_out:\n","        if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","          out_j = ep_j\n","        # else:  # --> referenced upper phase as initail_j / e_j (start of limit wait)\n","      else:\n","        out_j = i\n","\n","      # ------ limit_tp ------ #\n","      if not config.tp_set.non_tp:\n","        if config.tp_set.tp_type in ['LIMIT', 'BOTH']:\n","          exit_done, tp, fee = check_limit_tp_exec(config, open_i, i, tp_j, len_df, fee, open_side, exit_done, [tp_arr], [o, h, l, c])   # 여기서는 j -> i 로 변경해야함\n","      # ------ market_close ------ #\n","        # ------ market_tp ------ #\n","        if not exit_done and config.tp_set.tp_type in ['MARKET', 'BOTH']:\n","          exit_done, cross_on, tp, fee = check_market_tp_exec(config, open_i, i, len_df, fee, open_side, cross_on, exit_done, [np_timeidx, c, bb_lower_5m, bb_upper_5m, rsi_exit])\n","      # ------ out ------ #\n","      if not exit_done and config.out_set.use_out and i != len_df - 1:\n","        exit_done, tp, fee = check_out(config, open_i, i, out_j, len_df, fee, open_side, exit_done, [o, h, l, c, out_arr])          \n","\n","      if exit_done:  # 이 phase 는 exit_phase 뒤에도 있어야할 것 - entry_done var. 사용은 안하겠지만      \n","        # ------ append dynamic vars. ------ #\n","        valid_openi_list.append(open_i)   # side, zone, start_ver arr 모두 openi_list 로 접근하기 위해 open_i 를 담음\n","        pair_idx_list.append([exec_j, i])   # entry & exit (체결 기준임)\n","        pair_price_list.append([ep, tp])\n","        lvrg_list.append(leverage)\n","        fee_list.append(fee)\n","        \n","        open_i += 1   # 다음 open_idx 조사 진행 \n","        break\n","\n","    if i >= len_df or open_i >= len_open_idx:   # res_df 의 last_index 까지 돌아야함\n","      break\n","    else:\n","      continue\n","\n","  return np.array(valid_openi_list), np.array(pair_idx_list), np.array(pair_price_list), np.array(lvrg_list), np.array(fee_list)\n","\n","\n","def check_eik_point2_exec(config, op_idx, len_df, open_side, o, h, l, c, ep_arr):  \n","  ep_j = op_idx\n","  tp_j = op_idx\n","  out_j = op_idx\n","\n","  # allow_ep_in = 0 if strat_version in ['v5_2'] else 1\n","  allow_ep_in = 0\n","  entry_done = 0\n","  entry_open = 0\n","  ep = None\n","\n","  strat_version = config.strat_version\n","\n","  if config.ep_set.entry_type == \"LIMIT\":\n","    fee = config.trader_set.limit_fee\n","\n","    for e_j in range(op_idx + 1, len_df):\n","      # ------ index setting for dynamic options ------ #\n","      if not config.ep_set.static_ep:\n","          ep_j = e_j    # dynamic_ep 를 위한 ep_index var.\n","          out_j = e_j   # dynamic_out 를 위한 out_index var. - 조건식이 static_ep 와 같이 있는 이유 모름 => dynamic_lvrg 로 사료됨\n","\n","      if not config.tp_set.static_tp:\n","          tp_j = e_j\n","\n","      # if short_ep.iloc[initial_i] == np.inf:  #  np.inf caution\n","      #   break\n","      # ------ ei_k ------ # - limit 사용하면 default 로 ei_k 가 존재해야함\n","      #   Todo\n","      #    1. rtc_1 & gap => numpy 화 안해도 되나\n","      if open_side == OrderSide.SELL:\n","        if l[e_j] <= res_df['h_short_rtc_1_{}'.format(strat_version)].iloc[tp_j] - \\\n","                res_df['h_short_rtc_gap_{}'.format(strat_version)].iloc[tp_j] * config.loc_set.zone.ei_k:\n","            break\n","      else:\n","        if h[e_j] >= res_df['h_long_rtc_1_{}'.format(strat_version)].iloc[tp_j] + \\\n","                res_df['h_long_rtc_gap_{}'.format(strat_version)].iloc[tp_j] * config.loc_set.zone.ei_k:\n","            break\n","\n","      # ------ point2 ------ #\n","      if public_override:\n","          allow_ep_in, out_j = ep_loc_point2(res_df, config, e_j, out_j, allow_ep_in, side=open_side)\n","      else:\n","          allow_ep_in, out_j = utils_public.ep_loc_point2(res_df, config, e_j, out_j, allow_ep_in, side=open_side)\n","\n","      # ------ check ep_exec ------ #\n","      if open_side == OrderSide.SELL:      \n","        if allow_ep_in and h[e_j] >= ep_arr[ep_j]:\n","          entry_done = 1\n","          if o[e_j] >= ep_arr[ep_j]:\n","            ep = o[e_j]              \n","          else:\n","            ep = ep_arr[ep_j]\n","          break\n","      else:\n","        if allow_ep_in and l[e_j] <= ep_arr[ep_j]:\n","          entry_done = 1\n","          if o[e_j] <= ep_arr[ep_j]:\n","            ep = o[e_j]             \n","          else:\n","            ep = ep_arr[ep_j]\n","          break\n","\n","  else:  # market entry\n","    e_j = op_idx + 1\n","    entry_done = True\n","    ep = c[op_idx]\n","    fee = config.trader_set.market_fee\n","\n","  return e_j, ep_j, tp_j, out_j, entry_done, ep, fee    # 다음 start_i <-- e_j 로 변경\n","  #   e_j => 다음 phase 의 시작 index <-> ep_j : ep 의 기준 index\n","  #   ep_j, tp_j, out_j 가 return 되어야함 - exit phase 에서 이어가기 위함\n","\n","\n","def check_limit_tp_exec(config, open_i, j, tp_j, len_df, fee, open_side, exit_done, tps, np_datas):  \n","  o, h, l, c = np_datas\n","  tp = None\n","  strat_version = config.strat_version\n","  len_tps = len(tps)\n","\n","  for tp_i, tp_arr in enumerate(tps):  \n","    #     decay adjustment    #\n","    #     tp_j includes dynamic_j - functionalize  #\n","    try:\n","      if config.tr_set.decay_gap != \"None\":\n","        decay_share = (j - open_i) // config.tp_set.decay_term\n","        decay_remain = (j - open_i) % config.tp_set.decay_term\n","        if j != open_i and decay_remain == 0:\n","          if open_side == OrderSide.SELL: \n","            tp_arr[tp_j] += res_df['h_short_rtc_gap_{}'.format(strat_version)].iloc[open_i] * config.tr_set.decay_gap * decay_share\n","          else:\n","            tp_arr[tp_j] -= res_df['h_long_rtc_gap_{}'.format(strat_version)].iloc[open_i] * config.tr_set.decay_gap * decay_share\n","    except:\n","        pass\n","\n","    if open_side == OrderSide.SELL: \n","      if l[j] <= tp_arr[tp_j]: # and partial_tp_cnt == tp_i:  # we use static tp now\n","        # if l[j] <= tp_arr[j] <= h[j]: --> 이건 잘못되었음\n","        # partial_tp_cnt += 1 --> partial_tp 보류\n","\n","        # ------ dynamic tp ------ #\n","        if tp_arr[j] != tp_arr[j - 1] and not config.tp_set.static_tp:\n","          # tp limit 이 불가한 경우 - open 이 이미, tp 를 넘은 경우\n","          if o[j] < tp_arr[j]:\n","              tp = o[j]\n","          # tp limit 이 가능한 경우 - open 이 아직, tp 를 넘지 않은 경우\n","          else:\n","              tp = tp_arr[j]\n","        # ------ static tp ------ #\n","        else:\n","          #   tp limit 이 불가한 경우 - open 이 이미, tp 를 넘은 경우\n","          if o[j] < tp_arr[tp_j]:  # static 해놓고 decay 사용하면 dynamic 이니까\n","            if config.tr_set.decay_gap != \"None\" and decay_remain == 0:\n","                tp = o[j]  # tp_j -> open_i 를 가리키기 때문에 decay 는 한번만 진행되는게 맞음\n","            else:\n","                tp = tp_arr[tp_j]\n","          else:\n","              tp = tp_arr[tp_j]\n","        \n","        if tp_i == len_tps - 1:\n","          exit_done = 1  # partial 을 고려해 exit_done = 1 상태는 tp_i 가 last_index 로 체결된 경우만 해당\n","\n","    else:\n","      if h[j] >= tp_arr[tp_j]:\n","        # ------ dynamic tp ------ #\n","        if tp_arr[j] != tp_arr[j - 1] and not config.tp_set.static_tp:\n","          if o[j] > tp_arr[j]:\n","            tp = o[j]\n","          else:\n","            tp = tp_arr[j]\n","\n","        # ------ static tp ------ #\n","        else:\n","          if o[j] > tp_arr[tp_j]:\n","            if config.tr_set.decay_gap != \"None\" and decay_remain == 0:\n","                tp = o[j]\n","            else:\n","                tp = tp_arr[tp_j]\n","          else:\n","              tp = tp_arr[tp_j]\n","\n","        if tp_i == len_tps - 1:\n","          exit_done = 1  # partial 을 고려해 exit_done = 1 상태는 tp_i 가 last_index 로 체결된 경우만 해당\n","\n","  if exit_done:\n","    fee += config.trader_set.limit_fee\n","\n","  return exit_done, tp, fee\n","\n","\n","def check_market_tp_exec(config, open_i, j, len_df, fee, open_side, cross_on, exit_done, np_datas):  \n","  np_timeidx, c, bb_lower_5m, bb_upper_5m, rsi_exit = np_datas\n","  tp = None  \n","  strat_version = config.strat_version\n","\n","  # ------ timestamp ------ #\n","  if config.tp_set.time_tp:\n","    if np_timeidx[j] % config.loc_set.point.tf_entry == config.loc_set.point.tf_entry - 1 and j - open_i >= config.loc_set.point.tf_entry:\n","      exit_done = 1\n","\n","  # ------ rsi ------ # -> vectorize 가능함 => 추후 적용\n","  if strat_version in rsi_out_stratver:\n","    if open_side == OrderSide.SELL:\n","      if (rsi_exit[j - 1] >= 50 - config.loc_set.point.osc_band) & (rsi_exit[j] < 50 - config.loc_set.point.osc_band):\n","        exit_done = 1\n","    else:\n","      if (rsi_exit[j - 1] <= 50 + config.loc_set.point.osc_band) & (rsi_exit[j] > 50 + config.loc_set.point.osc_band):\n","        exit_done = 1\n","\n","  # ------------ early out ------------ #\n","  # ------ bb_upper early out ------ # --> cross_on 기능은 ide latency 개선 여부에 해당되지 않음\n","  if strat_version in ['v5_2']:\n","    if open_side == OrderSide.SELL:\n","      if c[j] < bb_lower_5m[j] < c[j - 1]:\n","        cross_on = 1\n","      if cross_on == 1 and c[j] > bb_upper_5m[j] > c[j - 1]:\n","        exit_done = 1\n","    else:\n","      if c[j] > bb_upper_5m[j] > c[j - 1]:\n","        cross_on = 1\n","      if cross_on == 1 and c[j] < bb_lower_5m[j] < c[j - 1]:\n","        exit_done = 1\n","\n","  if exit_done:\n","    tp = c[j]\n","    fee += config.trader_set.market_fee\n","\n","  return exit_done, cross_on, tp, fee\n","\n","\n","def check_out(config, open_i, j, out_j, len_df, fee, open_side, exit_done, np_datas):\n","  o, h, l, c, out_arr = np_datas\n","  tp = None\n","\n","  if config.out_set.hl_out:\n","    if open_side == OrderSide.SELL: \n","      if h[j] >= out_arr[out_j]:  # check out only once\n","        exit_done = 1\n","    else:\n","      if l[j] <= out_arr[out_j]:  # check out only once\n","        exit_done = 1\n","  else:  # close_out\n","    if open_side == OrderSide.SELL:\n","      if c[j] >= out_arr[out_j]:  # check out only once\n","        exit_done = 1\n","    else:\n","      if c[j] <= out_arr[out_j]:  # check out only once\n","        tp = c[j]\n","        exit_done = 1\n","        \n","  if exit_done:\n","    if config.out_set.hl_out:\n","      tp = out_arr[out_j]\n","    else:\n","      tp = c[j]\n","    \n","    if open_side == OrderSide.SELL:\n","      if o[j] >= out_arr[out_j]:\n","        tp = o[j]\n","    else:\n","      if o[j] <= out_arr[out_j]:\n","        tp = o[j]\n","\n","    fee += config.trader_set.market_fee\n","\n","  return exit_done, tp, fee\n"],"metadata":{"id":"qfbtFVMR01UJ","executionInfo":{"status":"ok","timestamp":1645833117628,"user_tz":-540,"elapsed":1326,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"execution_count":15,"outputs":[]},{"cell_type":"markdown","source":["#### garbage"],"metadata":{"id":"WC0ujlYg0DZD"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"TdAn2bHHBWMF"},"outputs":[],"source":["#       local env. 에서 load_data (.ftr) 는 colab (idep) 와 동기화되기 힘들 것 -> local 은 realtime\n","for key in ftr_list:\n","\n","    if config.trader_set.symbol in key:\n","        pass\n","    else:\n","        continue\n","\n","    \n","\n","    survey_df = pd.DataFrame(index=x_val_list, columns=y_val_cols)\n","    short_survey_df = pd.DataFrame(index=x_val_list, columns=y_val_cols)\n","    long_survey_df = pd.DataFrame(index=x_val_list, columns=y_val_cols)\n","    rev_survey_df = pd.DataFrame(index=x_val_list, columns=y_rev_val_cols)\n","    rev_short_survey_df = pd.DataFrame(index=x_val_list, columns=y_rev_val_cols)\n","    rev_long_survey_df = pd.DataFrame(index=x_val_list, columns=y_rev_val_cols)\n","\n","    for survey_i, just_loop in enumerate(range(1)):\n","    # for survey_i, config.loc_set.zone.tr_thresh in enumerate(x_val_list):\n","    # for survey_i, config.loc_set.zone.short_spread in enumerate(x_val_list):\n","    # for survey_i, config.loc_set.zone.long_spread in enumerate(x_val_list):\n","    # for survey_i, config.loc_set.zone.dt_k in enumerate(x_val_list):\n","    # for survey_i, config.loc_set.zone.dc_period in enumerate(x_val_list):\n","    # for survey_i, config.loc_set.zone.ei_k in enumerate(x_val_list):\n","    # for survey_i, config.loc_set.zone.dr_error in enumerate(x_val_list):\n","    # for survey_i, config.loc_set.zone.bbz_itv in enumerate(itv_list):\n","    # for survey_i, config.loc_set.zone.gap_mply in enumerate(x_val_list):\n","    # for survey_i, config.loc_set.zone.ad_idx in enumerate(x_val_list):\n","    # for survey_i, config.loc_set.point.tf_entry in enumerate(x_val_list):\n","    # for survey_i, config.loc_set.point.candle_ratio in enumerate(x_val_list):\n","    # for survey_i, config.loc_set.point.body_ratio in enumerate(x_val_list):\n","    # for survey_i, config.loc_set.point.candle_ratio2 in enumerate(x_val_list):\n","    # for survey_i, config.loc_set.point.body_ratio2 in enumerate(x_val_list):\n","    # for survey_i, config.loc_set.point.osc_band in enumerate(x_val_list):\n","    # for survey_i, config.loc_set.point2.ce_gap in enumerate(x_val_list):\n","    # for survey_i, config.tr_set.ep_gap in enumerate(x_val_list):\n","    # for survey_i, config.tr_set.out_gap in enumerate(x_val_list):\n","    # for survey_i, config.tr_set.tp_gap in enumerate(x_val_list):\n","    # for survey_i, config.lvrg_set.leverage in enumerate(x_val_list):\n","    # for survey_i, config.lvrg_set.target_pct in enumerate(x_val_list):\n","    # for survey_i, config.lvrg_set.target_pct in enumerate(x_val_list):\n","    # for survey_i, config.tp_set.decay_term in enumerate(x_val_list):\n","    # for survey_i, outg_dc_itv_num in enumerate(x_val_list):\n","    # for survey_i, exp_itv in enumerate(itv_list):\n","    # for survey_i, zone_dt_k in enumerate(x_val_list):\n","    # for survey_i, t_out_gap in enumerate(x_val_list):\n","    # for survey_i, zone_dc_period in enumerate(x_val_list):\n","    # for survey_i, early_out_tpg in enumerate(x_val_list):\n","    # for survey_i, ema_period in enumerate(x_val_list):\n","\n","      start_0 = time.time()\n","\n","      try:\n","\n","          print(\"config.strat_version :\", config.strat_version)\n","          print(\"config.loc_set.point.exp_itv :\", config.loc_set.point.exp_itv)\n","          print(\"config.loc_set.point.tpg_itv1 :\", config.loc_set.point.tpg_itv1)\n","          print(\"config.loc_set.point.tpg_itv0 :\", config.loc_set.point.tpg_itv0)\n","          print(\"config.loc_set.point.outg_itv1 :\", config.loc_set.point.outg_itv1)\n","          print(\"config.loc_set.point.outg_itv0 :\", config.loc_set.point.outg_itv0)\n","          print(\"config.loc_set.point.outg_dc_period :\", config.loc_set.point.outg_dc_period)\n","          print(\"-----------------------------------\")\n","          # print(\"dtk_dc_itv :\", dtk_dc_itv)\n","          # print(\"config.loc_set.dtk_dc_itv_num :\", config.loc_set.dtk_dc_itv_num :\",)\n","          print(\"config.loc_set.zone.short_spread :\", config.loc_set.zone.short_spread)\n","          print(\"config.loc_set.zone.long_spread :\", config.loc_set.zone.long_spread)\n","          print(\"config.loc_set.zone.tr_thresh :\", config.loc_set.zone.tr_thresh)\n","          print(\"config.loc_set.zone.dtk_itv :\", config.loc_set.zone.dtk_itv)\n","          print(\"config.loc_set.zone.dt_k :\", config.loc_set.zone.dt_k)\n","          print(\"config.loc_set.zone.ei_k :\", config.loc_set.zone.ei_k)\n","          print(\"config.loc_set.zone.dc_period :\", config.loc_set.zone.dc_period)\n","          print(\"config.loc_set.zone.use_dtk_line :\", config.loc_set.zone.use_dtk_line)\n","\n","          print(\"config.loc_set.zone.zone_rejection :\", config.loc_set.zone.zone_rejection)\n","          print(\"config.loc_set.zone.bbz_itv :\", config.loc_set.zone.bbz_itv)\n","          print(\"config.loc_set.zone.gap_mply :\", config.loc_set.zone.gap_mply)\n","          print(\"config.loc_set.zone.ad_idx :\", config.loc_set.zone.ad_idx)\n","          print(\"config.loc_set.zone.zone_dt_k :\", config.loc_set.zone.zone_dt_k)\n","          print(\"config.loc_set.zone.zone_dc_period :\", config.loc_set.zone.zone_dc_period)\n","          # print(\"config.loc_set.open_shift :\", config.loc_set.open_shift)\n","          print(\"-----------------------------------\")\n","          # print(\"config.ep_set.dr_error :\", config.ep_set.dr_error)\n","          print(\"config.loc_set.point.tf_entry :\", config.loc_set.point.tf_entry)\n","          print(\"config.loc_set.point.htf_entry :\", config.loc_set.point.htf_entry)\n","          print(\"config.loc_set.point.candle_ratio :\", config.loc_set.point.candle_ratio)\n","          print(\"config.loc_set.point.body_ratio :\", config.loc_set.point.body_ratio)\n","          print(\"config.loc_set.point.candle_ratio2 :\", config.loc_set.point.candle_ratio2)\n","          print(\"config.loc_set.point.body_ratio2 :\", config.loc_set.point.body_ratio2)\n","          print(\"config.loc_set.point.osc_band :\", config.loc_set.point.osc_band)\n","          print(\"config.loc_set.point2.ce_gap :\", config.loc_set.point2.ce_gap)\n","          print(\"config.tr_set.ep_gap :\", config.tr_set.ep_gap)\n","          print(\"config.tr_set.tp_gap :\", config.tr_set.tp_gap)\n","          print(\"config.tr_set.decay_gap :\", config.tr_set.decay_gap)\n","          print(\"config.tr_set.out_gap :\", config.tr_set.out_gap)\n","          print(\"config.tr_set.c_ep_gap :\", config.tr_set.c_ep_gap)\n","          print(\"config.tr_set.t_out_gap :\", config.tr_set.t_out_gap)\n","          print(\"-----------------------------------\")\n","          print(\"config.lvrg_set.leverage :\", config.lvrg_set.leverage)\n","          print(\"config.lvrg_set.static_lvrg :\", config.lvrg_set.static_lvrg)\n","          print(\"config.lvrg_set.target_pct :\", config.lvrg_set.target_pct)\n","          print(\"-----------------------------------\")\n","          print(\"config.ep_set.entry_type :\", config.ep_set.entry_type)\n","          print(\"config.tp_set.tp_type :\", config.tp_set.tp_type)\n","          print(\"config.tp_set.static_tp :\", config.tp_set.static_tp)\n","          print(\"config.tp_set.decay_term :\", config.tp_set.decay_term)\n","          print(\"rsi_out_stratver :\", rsi_out_stratver)\n","          print(\"config.out_set.use_out :\", config.out_set.use_out)\n","          print(\"config.out_set.out_type :\", config.out_set.out_type)\n","\n","      except Exception as e:\n","          print(e)\n","\n","      #       temp survey     #\n","      # if 'bb_upper_15m' in res_df.columns:\n","      #   res_df.drop(['bb_upper_15m', 'bb_lower_15m'], axis=1, inplace=True)\n","      # res_df = bb_level(res_df, '15m', config.loc_set.zone.gap_mply)\n","\n","      # ema_period = 155\n","      # print(\"ema_period :\", ema_period)\n","\n","      # df_5T = to_htf(res_df, '5T', offset='1h')\n","      # df_5T['ema_5m'] = ema(df_5T['close'], ema_period)   # ema formula issue\n","      # res_df.drop(['ema_5m'], axis=1, inplace=True, errors='ignore')\n","      # res_df = res_df.join(to_lower_tf_v2(res_df, df_5T, [-1]), how='inner')\n","\n","      \n","\n","      print(\"enlist_rtc ~ enlist_tr elapsed time :\", time.time() - start_0)\n","\n","      #       trading : 여기도 체결 결과에 대해 묘사함       #\n","      trade_list = []\n","      h_trade_list = []\n","      leverage_list = []\n","      fee_list = []\n","      short_fee_list = []\n","      long_fee_list = []\n","      open_list = []\n","      zone_list = []\n","      side_list = []\n","      strat_ver_list = []\n","\n","      tp_ratio_list = []\n","      short_tp_ratio_list = []\n","      long_tp_ratio_list = []\n","\n","      dr_list = []\n","      short_dr_list = []\n","      long_dr_list = []\n","\n","      liqd_list = []\n","      short_liqd_list = []\n","      long_liqd_list = []\n","\n","      nontp_liqd_list = []\n","      nontp_short_liqd_list = []\n","      nontp_long_liqd_list = []\n","\n","      nontp_pr_list = []\n","      nontp_short_pr_list = []\n","      nontp_long_pr_list = []\n","\n","      nontp_short_indexs = []\n","      nontp_long_indexs = []\n","\n","      nontp_short_ep_list = []\n","      nontp_long_ep_list = []\n","\n","      pr_list = []\n","      long_list = []\n","      short_list = []\n","\n","      h_pr_list = []\n","      h_long_list = []\n","      h_short_list = []\n","\n","      ep_tp_list = []\n","      h_ep_tp_list = []\n","      tp_state_list = []\n","\n","      i = 0\n","      while 1:\n","          # for i in range(len(res_df)):\n","\n","          run = 0\n","          open_side = None\n","\n","          for utils_, cfg_ in zip(utils_list, cfg_list):\n","\n","              #       entry_score     #\n","              if res_df['entry_{}'.format(cfg_.strat_version)][i] == cfg_.ep_set.short_entry_score:\n","\n","                  #       ep_loc      #\n","                  if public_override:\n","                      res_df, open_side, zone = short_ep_loc(res_df, cfg_,\n","                                                          i,\n","                                                          np_timeidx, show_detail)\n","                  else:\n","                      res_df, open_side, zone = utils_public.short_ep_loc(res_df, cfg_,\n","                                                                        i,\n","                                                                        np_timeidx, show_detail)\n","                  if open_side is not None:   # 조건 만족시 바로 break\n","                      #       assign      #\n","                      config = cfg_\n","                      break\n","\n","              #       entry_score     #\n","              elif res_df['entry_{}'.format(cfg_.strat_version)][i] == -cfg_.ep_set.short_entry_score:\n","\n","                  #       ep_loc      #\n","                  if public_override:\n","                      res_df, open_side, zone = long_ep_loc(res_df, cfg_,\n","                                                              i,\n","                                                              np_timeidx, show_detail)\n","                  else:\n","                      res_df, open_side, zone = utils_public.long_ep_loc(res_df, cfg_,\n","                                                                          i,\n","                                                                          np_timeidx, show_detail)\n","                  if open_side is not None:\n","                      #       assign      #\n","                      config = cfg_\n","                      break\n","\n","              if not multi_mode:\n","                  break\n","\n","          if open_side is None:\n","              i += 1\n","              if i >= len(res_df):\n","                  break\n","              continue\n","\n","          if open_side == utils_public.OrderSide.SELL:\n","\n","              initial_i = i\n","              # print(\"short_ep_loc passed !\")\n","\n","              # --------------------- config 가 확정된 이후의 setting --------------------- #\n","              strat_version = config.strat_version\n","\n","              # ------- tp / out fee calc ------- #\n","              tp_fee, out_fee = calc_tp_out_fee(config)\n","\n","              # p_i 의 용도 모르겠음\n","              # if config.out_set.static_out:\n","              #     p_i = initial_i\n","              # else:\n","              #     p_i = i\n","\n","              # ------- fee init ------- #\n","              if config.ep_set.entry_type == 'LIMIT':\n","                  fee = config.trader_set.limit_fee\n","              else:\n","                  fee = config.trader_set.market_fee\n","\n","              # --------------- set partial tp --------------- #\n","              short_tps = [res_df['short_tp_{}'.format(strat_version)]]\n","              # short_tps = [short_tp2, short_tp] # org\n","              # short_tps = [short_tp, short_tp2]\n","\n","              ep_j = initial_i\n","              out_j = initial_i\n","\n","              # -------------- limit waiting : limit_out -------------- #\n","\n","              if config.ep_set.entry_type == \"LIMIT\":\n","\n","                  # allow_ep_in = 0 if strat_version in ['v5_2'] else 1\n","                  allow_ep_in = 0\n","                  entry_done = 0\n","                  entry_open = 0\n","                  prev_sar = None\n","\n","                  # for e_j in range(i, len(res_df)): # entry_signal 이 open 기준 (해당 bar 에서 체결 가능함)\n","                  if i + 1 >= len(res_df):  # i should be checked if e_j starts from i+1\n","                      break\n","                  for e_j in range(i + 1, len(res_df)):  # entry signal이 close 기준 일 경우\n","\n","                      if not config.ep_set.static_ep:\n","                          ep_j = e_j\n","                          out_j = e_j\n","\n","                      if config.tp_set.static_tp:\n","                          # if config.ep_set.tpout_onexec:\n","                          #   tp_j = e_j\n","                          # else:\n","                          tp_j = initial_i\n","                      else:\n","                          tp_j = e_j\n","\n","                          #             1. ep 설정\n","                      # -------------- np.inf ep -------------- #\n","                      # if short_ep.iloc[initial_i] == np.inf:\n","                      #   break\n","\n","                      #     1. check ep_out     #\n","                      if res_df['low'].iloc[e_j] <= res_df['h_short_rtc_1_{}'.format(strat_version)].iloc[tp_j] - \\\n","                              res_df['h_short_rtc_gap_{}'.format(strat_version)].iloc[\n","                                  tp_j] * config.loc_set.zone.ei_k:\n","                          break\n","\n","                          # elif strat_version == 'v5_2':\n","                          # if res_df['low'].iloc[e_j] <= res_df['short_tp_{}'.format(strat_version)].iloc[tp_j]: # ep_out : tp_done\n","                          # # if np_timeidx[e_j] % config.loc_set.point.tf_entry == config.loc_set.point.tf_entry - 1:\n","                          #   break\n","\n","                          # elif (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[e_j - 1] >= 50 - config.loc_set.point.osc_band) & \\\n","                          #                  (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[e_j] < 50 - config.loc_set.point.osc_band):\n","                          #   break\n","\n","                      # if config.loc_set.zone.c_itv_ticks != \"None\":\n","\n","                      #   if np_timeidx[e_j] % config.loc_set.zone.c_itv_ticks == config.loc_set.zone.c_itv_ticks - 1:\n","                      #     break\n","\n","                      #     2. ep_loc.point2\n","                      if public_override:\n","                          allow_ep_in, out_j = short_point2(res_df, config, e_j, out_j, allow_ep_in)\n","                      else:\n","                          allow_ep_in, out_j = utils_public.short_point2(res_df, config, e_j, out_j,\n","                                                                          allow_ep_in)  # not defined yet,\n","\n","                      #     3. check ep_in       #\n","                      if allow_ep_in and res_df['high'].iloc[e_j] >= res_df['short_ep_{}'.format(strat_version)].iloc[\n","                          ep_j]:\n","                          entry_done = 1\n","                          # print(\"res_df['high'].iloc[e_j] :\", res_df['high'].iloc[e_j])\n","                          # print(\"e_j :\", e_j)\n","\n","                          #     이미, e_j open 이 ep 보다 높은 경우, entry[ep_j] => -2 로 변경   #\n","                          if res_df['open'].iloc[e_j] >= res_df['short_ep_{}'.format(strat_version)].iloc[ep_j]:\n","                              entry_open = 1\n","                          break\n","\n","                  i = e_j\n","                  # print(\"i = e_j :\", i)\n","\n","                  if entry_done:\n","                      pass\n","\n","                  else:\n","                      i += 1\n","                      if i >= len(res_df):\n","                          break\n","                      continue\n","\n","              # ----------------- end wait ----------------- #\n","\n","              # if e_j - initial_i >= 200:\n","              #   print(\"e_j, initial_i :\", e_j, initial_i)\n","              # print(\"e_j - initial_i :\", e_j - initial_i)\n","              # print()\n","\n","              open_list.append(initial_i)\n","              zone_list.append(zone)\n","              side_list.append('s')\n","              strat_ver_list.append(strat_version)\n","\n","              #     e_j 라는 변수는 MARKET 에 있어서 정의되서는 안되는 변수임   #\n","              if config.ep_set.entry_type == 'MARKET':\n","                  # try:\n","                  #   ep_list = [res_df['close'].iloc[e_j]]\n","                  # except Exception as e:\n","                  #   # print('error in ep_list (initial) :', e)\n","                  ep_list = [res_df['close'].iloc[ep_j]]\n","\n","              else:\n","                  if not entry_open:\n","                      ep_list = [res_df['short_ep_{}'.format(strat_version)].iloc[ep_j]]\n","\n","                  else:\n","                      #   ep_j 는 항상 있음, LIMIT 인 경우 e_j 도 항상 존재함 --> dynamic_ep 여부에 따라 ep_j = e_j 가 되는 경우만 존재할 뿐임\n","                      #   따라서, ep_j 로 통일 가능함 (dynamic_ep 인 경우, ep_j = e_j 되어있음)\n","                      fee = config.trader_set.market_fee\n","                      ep_list = [res_df['open'].iloc[e_j]]  # --> 체결이 되는 e_j idx 기준으로 하는게 맞음\n","\n","              if not config.lvrg_set.static_lvrg:\n","\n","                  ep_ = ep_list[0]\n","                  out_ = res_df['short_out_{}'.format(strat_version)].iloc[out_j]\n","                  if public_override:\n","                      config.lvrg_set.leverage = lvrg_set(res_df, config, \"SELL\", ep_, out_, fee)\n","                  else:\n","                      config.lvrg_set.leverage = utils_public.lvrg_set(res_df, config, \"SELL\", ep_, out_, fee)\n","\n","                  # -------------- leverage rejection -------------- #\n","                  if config.lvrg_set.leverage == None:\n","                      open_list.pop()\n","                      zone_list.pop()\n","                      side_list.pop()\n","                      strat_ver_list.pop()\n","\n","                      i += 1\n","                      if i >= len(res_df):\n","                          break\n","                      continue\n","\n","              leverage_list.append(config.lvrg_set.leverage)\n","\n","              # try:\n","              if config.ep_set.entry_type == \"MARKET\":\n","                  ep_idx_list = [\n","                      ep_j]  # ep_j 는 ep_type 유관하게 존재하는 변수니까 try 에 걸어두는게 맞음 <-- # market 인데, e_j 변수가 할당된 경우 고려해야함\n","              else:\n","                  ep_idx_list = [e_j]\n","\n","              out_idx_list = [out_j]\n","\n","              # except Exception as e:\n","              #   # print('error in ep_idx_list :', e)\n","              #   ep_idx_list = [e_j]\n","\n","              tp_list = []\n","              tp_idx_list = []\n","\n","              partial_tp_cnt = 0\n","              hedge_cnt = 1\n","\n","              h_ep, h_tp = None, None\n","              h_i, h_j = None, None\n","\n","              trade_done = 0\n","              cross_on = 0\n","              out = 0\n","              # config.out_set.retouch\n","\n","              #     Todo    #\n","              #      1. future_work : 상단의 retouch 와 겹침\n","              config.out_set.retouch = 0\n","\n","              if i == len(res_df) - 1:  # if j start from i + 1\n","                  open_list.pop()\n","                  zone_list.pop()\n","                  side_list.pop()\n","              for j in range(i + 1, len(res_df)):\n","\n","                  # for j in range(i, len(res_df)):\n","\n","                  if config.tp_set.static_tp:\n","                      if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","                          tp_j = ep_j  # tpout_onexec = using dynamic_ep --> using ep_j 에 대한 이유\n","                      else:\n","                          tp_j = initial_i\n","                  else:\n","                      tp_j = j\n","\n","                  if config.out_set.static_out:\n","                      if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","                          out_j = ep_j\n","                      # else:\n","                      #   out_j = initial_i   # --> referenced upper phase as initail_j / e_j (start of limit wait)\n","                  else:\n","                      out_j = j\n","\n","                  # -------------- sub ep -------------- #\n","                  # if res_df['high'].iloc[j - 1] <= res_df['sar2'].iloc[j - 1] and res_df['high'].iloc[j] > res_df['sar2'].iloc[j]:\n","\n","                  #   sub_ep = res_df['sar2'].iloc[j - 1]\n","\n","                  #   if sub_ep < ep_list[-1]:\n","                  #     ep_list.append(sub_ep)\n","                  #     ep_idx_list.append(j)\n","\n","                  # -------------- hedge only once -------------- #\n","                  #             일단, h_quantity 는 초기 진입과 동일하게 설정         #\n","                  # if res_df['high'].iloc[j] >= res_df['minor_ST2_Up'].iloc[j] and hedge_cnt == 1:\n","                  # if res_df['close'].iloc[j] >= res_df['minor_ST2_Up'].iloc[j] and hedge_cnt == 1:\n","                  # if res_df['close'].iloc[j] >= res_df['minor_ST3_Up'].iloc[j] and hedge_cnt == 1:\n","\n","                  #   h_ep = res_df['close'].iloc[j]\n","                  #   hedge_cnt -= 1\n","                  #   h_i = j\n","\n","                  # -------------- ultimate limit tp -------------- #\n","                  if not config.tp_set.non_tp:\n","\n","                      #               1. by price line             #\n","                      if config.tp_set.tp_type == 'LIMIT' or config.tp_set.tp_type == \"BOTH\":\n","\n","                          for s_i, short_tp_ in enumerate(short_tps):\n","\n","                              #     decay adjustment    #\n","                              #     tp_j includes dynamic_j   #\n","                              try:\n","                                  if config.tr_set.decay_gap != \"None\":\n","                                      decay_share = (j - initial_i) // config.tp_set.decay_term\n","                                      decay_remain = (j - initial_i) % config.tp_set.decay_term\n","                                      if j != initial_i and decay_remain == 0:\n","                                          short_tp_.iloc[tp_j] += \\\n","                                          res_df['h_short_rtc_gap_{}'.format(strat_version)].iloc[\n","                                              initial_i] * config.tr_set.decay_gap * decay_share\n","\n","                              except:\n","                                  pass\n","\n","                              if res_df['low'].iloc[j] <= short_tp_.iloc[\n","                                  tp_j] and partial_tp_cnt == s_i:  # we use static tp now\n","                                  # if res_df['low'].iloc[j] <= short_tp_.iloc[j]:\n","                                  # if res_df['low'].iloc[j] <= short_tp_.iloc[j] <= res_df['high'].iloc[j]: --> 이건 잘못되었음\n","\n","                                  if s_i == len(short_tps) - 1:\n","                                      trade_done = 1\n","\n","                                  partial_tp_cnt += 1\n","\n","                                  #         dynamic tp        #\n","                                  # if 0:\n","                                  if short_tp_.iloc[j] != short_tp_.iloc[j - 1] and not config.tp_set.static_tp:\n","\n","                                      #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 #\n","                                      # if res_df['open'].iloc[j] < short_tp_.iloc[initial_i]:\n","                                      if res_df['open'].iloc[j] < short_tp_.iloc[j]:\n","\n","                                          # tp = short_tp_.iloc[initial_i]\n","                                          tp = res_df['open'].iloc[j]\n","\n","                                          if trade_done:\n","                                              tp_state_list.append(\"d-short_open {}\".format(strat_version))\n","\n","                                      #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 #\n","                                      else:\n","\n","                                          # tp = short_tp_.iloc[initial_i]\n","                                          tp = short_tp_.iloc[j]\n","                                          # tp = res_df['open'].iloc[j]\n","\n","                                          if trade_done:\n","                                              tp_state_list.append(\"d-short_tp {}\".format(strat_version))\n","\n","                                  #         static tp         #\n","                                  else:\n","\n","                                      #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 #\n","                                      #   non_inversion 의 경우, short_tp 가 가능함   #\n","\n","                                      # if res_df['open'].iloc[j] < short_tp_.iloc[initial_i]:\n","                                      if res_df['open'].iloc[j] < short_tp_.iloc[tp_j]:\n","\n","                                          # tp = short_tp_.iloc[initial_i]\n","\n","                                          if config.tr_set.decay_gap != \"None\" and decay_remain == 0:\n","                                              tp = res_df['open'].iloc[\n","                                                  j]  # tp_j -> initial_i 를 가리키기 때문에 decay 는 한번만 진행되는게 맞음\n","                                          else:\n","                                              tp = short_tp_.iloc[tp_j]\n","\n","                                          if trade_done:\n","                                              tp_state_list.append(\"s-short_tp {}\".format(strat_version))\n","\n","                                      #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 #\n","                                      else:\n","\n","                                          # tp = short_tp_.iloc[initial_i]\n","                                          tp = short_tp_.iloc[tp_j]\n","\n","                                          # tp = res_df['open'].iloc[j]\n","\n","                                          if trade_done:\n","                                              tp_state_list.append(\"s-short_tp {}\".format(strat_version))\n","\n","                                  tp_list.append(tp)\n","                                  tp_idx_list.append(j)\n","                                  fee += config.trader_set.limit_fee\n","\n","                      #           2. by signal        #\n","                      if config.tp_set.tp_type == 'MARKET' or (config.tp_set.tp_type == \"BOTH\" and not trade_done):\n","\n","                          market_tp = 0\n","\n","                          # -------------- sar tp -------------- #\n","                          # if (res_df['high'].iloc[j] >= res_df['sar2'].iloc[j]) & \\\n","                          #   (res_df['high'].iloc[j - 1] < res_df['sar2'].iloc[j - 1]) & \\\n","                          #   (res_df['high'].iloc[j - 2] < res_df['sar2'].iloc[j - 2]):\n","\n","                          #       inversion     #\n","                          # if (res_df['low'].iloc[j] <= res_df['sar2'].iloc[j]) & \\\n","                          #   (res_df['low'].iloc[j - 1] > res_df['sar2'].iloc[j - 1]) & \\\n","                          #   (res_df['low'].iloc[j - 2] > res_df['sar2'].iloc[j - 2]):\n","\n","                          # ----------- st short ----------- #\n","                          # if res_df['close'].iloc[j] <= res_df['short_tp'].iloc[tp_j]:\n","\n","                          # -------------- sar pb tp -------------- #\n","                          # if res_df['low'].iloc[j] <= res_df['short_tp'].iloc[initial_i]:\n","\n","                          # -------------- st tp -------------- #\n","                          # if res_df['close'].iloc[j] > res_df['middle_line'].iloc[j]:\n","\n","                          # -------------- fisher tp -------------- #\n","                          # if entry[j] == 1:\n","\n","                          # -------------- timestamp -------------- #\n","                          if config.tp_set.time_tp:\n","                              if np_timeidx[\n","                                  j] % config.loc_set.zone.c_itv_ticks == config.loc_set.zone.c_itv_ticks - 1 and \\\n","                                      j - initial_i >= config.loc_set.zone.c_itv_ticks:\n","                                  market_tp = 1\n","\n","                                  # -------------- rsi -------------- #\n","                          if strat_version in rsi_out_stratver:\n","                              if (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[\n","                                      j - 1] >= 50 - config.loc_set.point.osc_band) & \\\n","                                      (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[\n","                                            j] < 50 - config.loc_set.point.osc_band):\n","                                  # if (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j - 1] <= 50 - config.loc_set.point.osc_band) & \\\n","                                  #                  (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j] > 50 - config.loc_set.point.osc_band):\n","                                  market_tp = 1\n","\n","                              # -------------- cci -------------- #\n","                              # if (res_df['cci_%s' % config.loc_set.point.exp_itv].iloc[j - 1] >= -config.loc_set.point.osc_band) & \\\n","                              #                  (res_df['cci_%s' % config.loc_set.point.exp_itv].iloc[j] < -config.loc_set.point.osc_band):\n","                              #   market_tp = 1\n","\n","                          # ---------------------------- early out ---------------------------- #\n","\n","                          # #         rsi slight touch        #\n","                          if allow_osc_touch:\n","                              if (np.min(res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[\n","                                          initial_i:j]) < 50 - config.loc_set.point.osc_band + rsi_gap) & \\\n","                                      (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j] >= 50):\n","                                  market_tp = 1\n","\n","                                  #           tp early out          #\n","                          # # if (np.min(res_df['low'].iloc[e_j:j]) < res_df['short_tp'].iloc[tp_j]) & \\\n","                          # if (np.min(res_df['low'].iloc[e_j:j]) < res_df['h_short_rtc_1'].iloc[tp_j] - res_df['h_short_rtc_gap'].iloc[tp_j] * early_out_tpg) & \\\n","                          #   (res_df['close'].iloc[j] >= res_df['short_ep'].iloc[ep_j]):\n","                          #   market_tp = 1\n","\n","                          # if strat_version == \"v7\":\n","                          #   if res_df['dc_upper_1m'].iloc[j] > res_df['dc_upper_5m'].iloc[j]:\n","                          #     market_tp = 1\n","\n","                          #         bb_upper early out        # --> cross_on 기능은 ide latency 개선 여부에 해당되지 않음\n","                          if strat_version in ['v5_2']:\n","                              if res_df['close'].iloc[j] < res_df['bb_lower_5m'].iloc[j] < res_df['close'].iloc[\n","                                  j - 1]:\n","                                  cross_on = 1\n","\n","                              if cross_on == 1 and res_df['close'].iloc[j] > res_df['bb_upper_5m'].iloc[j] > \\\n","                                      res_df['close'].iloc[j - 1]:\n","                                  market_tp = 1\n","\n","                          if market_tp:\n","\n","                              tp = res_df['close'].iloc[j]\n","                              # tp = res_df['open'].iloc[j]\n","                              trade_done = 1\n","\n","                              if trade_done:\n","                                  tp_state_list.append(\"short close tp\")\n","\n","                              tp_list.append(tp)\n","                              tp_idx_list.append(j)\n","                              fee += config.trader_set.market_fee\n","\n","                  # -------------- out -------------- #\n","                  if not trade_done and config.out_set.use_out and j != len(res_df) - 1:\n","\n","                      # -------------- macd -------------- #\n","                      # if res_df['macd_hist3'].iloc[j] > 0:  #  macd out\n","                      # if res_df['macd_hist3'].iloc[i] < 0 and res_df['macd_hist3'].iloc[j] > 0:\n","\n","                      # -------------- st config.out_set.retouch -------------- #\n","                      # out = 1 상태면 동일 tick 에서 config.out_set.retouch 를 조사할 거기 때문에, 먼저 검사함\n","                      # 그리고, out 기준이 close 라 이게 맞음\n","                      # close 가 short_out 보다 올라가있는 상태일테니 low 를 조사하는게 맞음\n","                      # if out and res_df['low'].iloc[j] <= short_out.iloc[out_j]:\n","                      #   config.out_set.retouch = 1\n","\n","                      # ------- 일정시간 이상, dynamic_out 적용 ------ #\n","                      try:\n","                          if j - out_idx >= config.out_set.retouch_out_period:\n","                              static_short_out = res_df['short_out_{}'.format(strat_version)].iloc[j]\n","\n","                      except Exception as e:\n","                          pass\n","\n","                          # ------- static out ------ #\n","                      try:\n","                          if out and res_df['low'].iloc[j] <= static_short_out:\n","                              config.out_set.retouch = 1\n","                      except Exception as e:\n","                          pass\n","\n","                          # ------- config.out_set.retouch out ------ #\n","                      # if out and res_df['low'].iloc[j] <= short_out2.iloc[out_j]:\n","                      #   config.out_set.retouch = 1\n","\n","                      # -------------- st -------------- #\n","                      # if res_df['close'].iloc[j] > res_df['middle_line'].iloc[j]:\n","                      # if res_df['close'].iloc[j] > res_df['minor_ST3_Up'].iloc[j]:\n","                      # if res_df['close'].iloc[j] > upper_middle.iloc[j]:\n","                      # if res_df['close'].iloc[j] > res_df['minor_ST1_Up'].iloc[j]:\n","                      if out == 0:\n","                          if config.out_set.hl_out:\n","                              if res_df['high'].iloc[j] >= res_df['short_out_{}'.format(strat_version)].iloc[\n","                                  out_j]:  # check out only once\n","                                  out = 1\n","\n","                          else:\n","                              if res_df['close'].iloc[j] >= res_df['short_out_{}'.format(strat_version)].iloc[\n","                                  out_j]:  # check out only once\n","                                  out = 1\n","\n","                          # out_idx = j\n","                          # static_short_out = short_out.iloc[out_j]\n","                          # if config.out_set.second_out:\n","                          # static_short_out = short_out.iloc[out_j] + res_df['st_gap'].iloc[out_j] * config.out_set.second_out_gap\n","\n","                      # if out == 0 and res_df['high'].iloc[j] >= short_out.iloc[out_j]: # check out only once\n","                      #   out = 1\n","\n","                      # -------------- sma -------------- #\n","                      # if res_df['close'].iloc[j] > res_df[sma].iloc[j]:\n","\n","                      # -------------- sar -------------- #\n","                      # if res_df['close'].iloc[j] > res_df['minor_ST3_Up'].iloc[j] \\\n","                      #   or res_df['sar2'].iloc[j] <= res_df['high'].iloc[j]:\n","                      # if res_df['close'].iloc[j] > short_out.iloc[initial_i]: # or \\\n","                      #   out = 1\n","                      # res_df['sar2_uptrend'].iloc[j] == 1: # or \\\n","\n","                      # if res_df['sar2_uptrend'].iloc[j] == 1:\n","\n","                      #   if prev_sar is None:\n","                      #     prev_sar = res_df['sar2'].iloc[j - 1]\n","\n","                      #   if res_df['close'].iloc[j] > prev_sar:\n","                      #     out = 1\n","\n","                      # else:\n","                      #   if res_df['close'].iloc[j] > res_df['sar2'].iloc[j]:\n","                      #     out = 1\n","\n","                      # -------------- hl -------------- #\n","                      # if res_df['close'].iloc[j] > short_out.iloc[tp_j]:\n","\n","                      # -------------- stoch -------------- #\n","                      # if res_df['stoch'].iloc[j - 2] >= res_df['stoch'].iloc[j - 1] and \\\n","                      #   res_df['stoch'].iloc[j - 1] < res_df['stoch'].iloc[j] and \\\n","                      #   res_df['stoch'].iloc[j - 1] <= stoch_lower:\n","                      #   out = 1\n","\n","                      # config.out_set.retouch 1 경우, config.out_set.retouch 조건도 있어야함\n","                      if out:\n","                          if config.out_set.retouch:\n","                              if config.out_set.retouch:\n","                                  pass\n","                              else:\n","                                  continue\n","\n","                          else:\n","                              pass\n","\n","                          if config.out_set.price_restoration:\n","                              tp = res_df['short_out_{}'.format(strat_version)].iloc[out_j]\n","                              if config.out_set.second_out:\n","                                  tp = res_df['short_out2_{}'.format(strat_version)].iloc[out_j]\n","\n","                              # if res_df['close'].iloc[j] > tp: # 이 경우를 protect 하는건 insane 임\n","                              #   tp = res_df['close'].iloc[j]\n","\n","                          else:\n","\n","                              if res_df['open'].iloc[j] >= res_df['short_out_{}'.format(strat_version)].iloc[out_j]:\n","                                  tp = res_df['open'].iloc[j]\n","                              else:\n","                                  if config.out_set.hl_out:\n","                                      tp = res_df['short_out_{}'.format(strat_version)].iloc[out_j]\n","                                  else:\n","                                      tp = res_df['close'].iloc[j]\n","\n","                              # if not config.out_set.static_out:\n","                              #   if res_df['open'].iloc[j] >= res_df['short_out_{}'.format(strat_version)].iloc[out_j]: # close 기준이라 이런 조건을 못씀, 차라리 j 를 i 부터 시작\n","                              #     tp = res_df['open'].iloc[j]\n","                              #   else:\n","                              #     tp = res_df['close'].iloc[j]\n","\n","                              # else:\n","                              #   tp = res_df['close'].iloc[j]\n","\n","                          if config.out_set.retouch:  # out 과 open 비교\n","                              if config.out_set.second_out:\n","                                  if res_df['open'].iloc[j] <= res_df['short_out2_{}'.format(strat_version)].iloc[\n","                                      out_j]:\n","                                      tp = res_df['open'].iloc[j]\n","                              else:\n","                                  if res_df['open'].iloc[j] <= res_df['short_out_{}'.format(strat_version)].iloc[\n","                                      out_j]:\n","                                      tp = res_df['open'].iloc[j]\n","\n","                              try:  # static_short_out 인 경우, open 도 고려한 tp set\n","                                  if res_df['open'].iloc[j] <= static_short_out:\n","                                      tp = res_df['open'].iloc[j]\n","                                  else:\n","                                      tp = static_short_out\n","                              except Exception as e:\n","                                  pass\n","\n","                          trade_done = 1\n","                          tp_state_list.append(\"short close_out {}\".format(strat_version))\n","\n","                          tp_list.append(tp)\n","                          tp_idx_list.append(j)\n","                          fee += config.trader_set.market_fee\n","\n","                  # -------------- non tp -------------- #\n","                  if j == len(res_df) - 1:\n","                      trade_done = 1\n","                      tp = res_df['close'].iloc[j]\n","                      tp_list.append(tp)\n","                      tp_idx_list.append(j)\n","                      fee += config.trader_set.market_fee\n","\n","                  # -------------- append trade data -------------- #\n","                  if trade_done:\n","\n","                      # --------------- tp_ratio info --------------- #\n","                      #         Todo        #\n","                      #          short_out 에 대한 정보는 존재함,\n","                      #          short_tp 에 대한 정보는 존재함,\n","                      #       => initial_i 기준으로 ,dynamic | static set 을 tp 와 out 에 각각 적용\n","                      #          config.lvrg_set.leverage 는 initial_i 기준으로 적용되니까\n","                      #          적용된 tp & out 으로 abs((tp - ep) / (ep - out)) 계산\n","                      try:\n","                          if config.out_set.use_out:\n","                              done_tp = res_df['short_tp_{}'.format(strat_version)].iloc[tp_j]\n","                              done_out = res_df['short_out_{}'.format(strat_version)].iloc[out_j]\n","\n","                              if done_out <= ep_list[0]:  # loss > 1\n","                                  dr = np.nan\n","                                  tp_ratio = np.nan\n","                              else:\n","                                  dr = ((ep_list[0] - done_tp) / (done_out - ep_list[0]))\n","                                  tp_ratio = ((ep_list[0] - done_tp - tp_fee * ep_list[0]) / (\n","                                              done_out - ep_list[0] + out_fee * ep_list[0]))\n","\n","                          else:\n","                              dr = np.nan\n","                              tp_ratio = np.nan\n","\n","\n","                      except Exception as e:\n","                          dr = np.nan\n","                          tp_ratio = np.nan\n","\n","                      tp_ratio_list.append(tp_ratio)\n","                      short_tp_ratio_list.append(tp_ratio)\n","                      dr_list.append(dr)\n","                      short_dr_list.append(dr)\n","\n","                      # -------------------- partial tp -------------------- #\n","                      #        1. len(tp_list) 에 대응하는 qty_list 를 만들어야함    #\n","                      #        2. temp_pr_list 를 만들어 총합 + 1 을 pr_list 에 저장      #\n","                      #        2-1. temp_pr = sum((ep / tp_list[i] - fee - 1) * qty_list[i])   #\n","                      #        3. temp_pr_list 의 첫 tp 에는 r_qty 를 할당함        #\n","                      qty_list = []\n","                      temp_pr_list = []\n","                      r_qty = 1\n","                      for q_i in range(len(tp_list) - 1, -1, -1):\n","\n","                          if len(tp_list) == 1:\n","                              temp_qty = r_qty\n","                          else:\n","                              if q_i != 0:\n","                                  temp_qty = r_qty / config.tp_set.partial_qty_divider\n","                              else:\n","                                  temp_qty = r_qty\n","\n","                          temp_pr = (ep_list[0] / tp_list[q_i] - fee - 1) * temp_qty * config.lvrg_set.leverage\n","                          # temp_pr = (ep_list[0] / tp_list[q_i] - fee - 1) * temp_qty\n","                          r_qty -= temp_qty\n","\n","                          temp_pr_list.append(temp_pr)\n","                          qty_list.append(temp_qty)\n","\n","                      # if len(temp_pr_list) == 1:\n","                      #   print(\"qty_list :\", qty_list)\n","                      #   print(\"temp_pr_list :\", temp_pr_list)\n","\n","                      temp_pr = sum(temp_pr_list) + 1\n","\n","                      # -------------------- sub ep -> pr calc -------------------- #\n","                      if len(ep_list) > 1:\n","\n","                          p_ep_pr = []\n","                          for sub_ep_ in ep_list:\n","                              sub_pr = (sub_ep_ / tp - fee - 1) * config.lvrg_set.leverage\n","                              p_ep_pr.append(sub_pr)\n","\n","                          temp_pr = sum(p_ep_pr) + 1\n","\n","                          print(\"temp_pr :\", temp_pr)\n","\n","                      # ------------ hedge + non_hedge pr summation ------------ #\n","                      #         hedge pr direction is opposite to the origin       #\n","                      hedge_pr = 1\n","                      if hedge_cnt == 0:\n","                          #       hedge tp      #\n","                          h_tp = res_df['close'].iloc[j]\n","                          hedge_pr = (h_tp / h_ep - fee - 1) * config.lvrg_set.leverage  # hedge long\n","                          temp_pr += hedge_pr\n","                          h_j = j\n","\n","                      # hh = max(res_df['high'].iloc[i:j + 1])\n","                      hh = max(res_df['high'].iloc[i:j])  # pos. 정리하기 바로 직전까지\n","                      short_liq = (ep_list[0] / hh - fee - 1) * config.lvrg_set.leverage + 1\n","\n","                      if j != len(res_df) - 1:\n","\n","                          # ep_tp_list.append((ep, tp_list))\n","                          ep_tp_list.append((ep_list, tp_list))\n","                          # trade_list.append([initial_i, i, j])\n","                          # trade_list.append((ep_idx_list, tp_idx_list))\n","                          trade_list.append((ep_idx_list, out_idx_list, tp_idx_list))\n","\n","                          liqd_list.append(short_liq)\n","                          short_liqd_list.append(short_liq)\n","\n","                          h_ep_tp_list.append(\n","                              (h_ep, h_tp))  # hedge 도 ep_tp_list 처럼 변경해주어야하는데 아직 안건드림, 딱히 사용할 일이 없어보여\n","                          h_trade_list.append([initial_i, h_i, h_j])\n","\n","                          pr_list.append(temp_pr)\n","                          fee_list.append(fee)\n","                          short_list.append(temp_pr)\n","                          short_fee_list.append(fee)\n","\n","                          h_pr_list.append(hedge_pr)\n","                          h_short_list.append(hedge_pr)\n","\n","                          i = j\n","                          break\n","\n","                      else:\n","\n","                          # ep_tp_list.append((ep_list, tp_list))\n","                          # trade_list.append((ep_idx_list, tp_idx_list))\n","                          # plot_check 때문에, pr_list 까지 하게되면 acc_pr eval 이 꼬이게댐\n","\n","                          # pr_list 를 넣지 않을거니까, open_list 에서 해당 idx 는 pop\n","                          open_list.pop()\n","                          zone_list.pop()\n","                          side_list.pop()\n","                          strat_ver_list.pop()\n","\n","                          #         tp 미체결 survey        #\n","                          nontp_liqd_list.append(short_liq)\n","                          nontp_short_liqd_list.append(short_liq)\n","                          nontp_short_indexs.append(i)\n","                          nontp_short_ep_list.append(ep_list[0])\n","\n","                          nontp_short_pr = (ep_list[0] / tp - fee - 1) * config.lvrg_set.leverage + 1\n","                          nontp_pr_list.append(nontp_short_pr)\n","                          nontp_short_pr_list.append(nontp_short_pr)\n","\n","\n","          #                  long  phase                #\n","          elif open_side == utils_public.OrderSide.BUY:\n","\n","              initial_i = i\n","              # print(\"long_ep_loc passed !\")\n","\n","              strat_version = config.strat_version\n","\n","              # ------- tp / out fee calc ------- #\n","              tp_fee, out_fee = calc_tp_out_fee(config)\n","\n","              # ------- fee init ------- #\n","              if config.ep_set.entry_type == 'LIMIT':\n","                  fee = config.trader_set.limit_fee\n","              else:\n","                  fee = config.trader_set.market_fee\n","\n","              # --------------- set partial tp --------------- #\n","              long_tps = [res_df['long_tp_{}'.format(strat_version)]]\n","              # long_tps = [long_tp2, long_tp]\n","              # long_tps = [long_tp, long_tp2]\n","              # print(\"i after long_ep_loc :\", i)\n","\n","              # if config.out_set.static_out:\n","              #     p_i = initial_i\n","              # else:\n","              #     p_i = i\n","\n","              ep_j = initial_i\n","              out_j = initial_i\n","\n","              # -------------- limit waiting const. -------------- #\n","              if config.ep_set.entry_type == \"LIMIT\":\n","\n","                  # allow_ep_in = 0 if strat_version in ['v5_2'] else 1\n","                  allow_ep_in = 0\n","                  entry_done = 0\n","                  entry_open = 0\n","                  prev_sar = None\n","\n","                  # for e_j in range(i, len(res_df)):\n","\n","                  if i + 1 >= len(res_df):  # i should be checked if e_j starts from i+1\n","                      break\n","                  for e_j in range(i + 1, len(res_df)):  # entry 가 close 기준일 경우 사용 (open 기준일 경우 i 부터 시작해도 무방함)\n","\n","                      if not config.ep_set.static_ep:\n","                          ep_j = e_j\n","                          out_j = e_j\n","\n","                      if config.tp_set.static_tp:\n","                          # if config.ep_set.tpout_onexec:\n","                          #   tp_j = e_j\n","                          # else:\n","                          tp_j = initial_i\n","                      else:\n","                          tp_j = e_j\n","\n","                          #          np.inf ep         #\n","                      # if long_ep.iloc[initial_i] == np.inf:\n","                      #   break\n","\n","                      #     1. check ep_out     #\n","                      if res_df['high'].iloc[e_j] >= res_df['h_long_rtc_1_{}'.format(strat_version)].iloc[tp_j] + \\\n","                              res_df['h_long_rtc_gap_{}'.format(strat_version)].iloc[tp_j] * config.loc_set.zone.ei_k:\n","                          # if res_df['high'].iloc[e_j] >= res_df['long_tp_{}'.format(strat_version)].iloc[tp_j]:\n","                          # if np_timeidx[e_j] % config.loc_set.point.tf_entry == config.loc_set.point.tf_entry - 1:\n","                          break\n","\n","                          # elif (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[e_j - 1] <= 50 + config.loc_set.point.osc_band) & \\\n","                          #                  (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[e_j] > 50 + config.loc_set.point.osc_band):\n","                          #   break\n","\n","                      # if config.loc_set.zone.c_itv_ticks != \"None\":\n","\n","                      #   if np_timeidx[e_j] % config.loc_set.zone.c_itv_ticks == config.loc_set.zone.c_itv_ticks - 1:\n","                      #     break\n","\n","                      #     2. ep_loc.point2\n","                      if public_override:\n","                          allow_ep_in, out_j = long_point2(res_df, config, e_j, out_j, allow_ep_in)\n","                      else:\n","                          allow_ep_in, out_j = utils_public.long_point2(res_df, config, e_j, out_j,\n","                                                                        allow_ep_in)  # not defined yet,\n","\n","                      #     3. check ep_in      #\n","                      if allow_ep_in and res_df['low'].iloc[e_j] <= res_df['long_ep_{}'.format(strat_version)].iloc[\n","                          ep_j]:\n","                          entry_done = 1\n","                          # print(\"e_j :\", e_j)\n","\n","                          #     이미, e_j open 이 ep 보다 낮은 경우, entry[initial_i] => -2 로 변경   #\n","                          if res_df['open'].iloc[e_j] <= res_df['long_ep_{}'.format(strat_version)].iloc[ep_j]:\n","                              entry_open = 1\n","\n","                          break\n","\n","                  i = e_j\n","                  # print(\"i = e_j :\", i)\n","\n","                  if entry_done:\n","                      pass\n","                      # print(\"i, entry_done :\", i, entry_done)\n","\n","                  else:\n","                      i += 1\n","                      if i >= len(res_df):\n","                          # print(\"i :\", i)\n","                          break\n","\n","                      # print(\"i in continue :\", i)\n","                      continue\n","\n","              # ---------------- end wait ---------------- #\n","              # if e_j - initial_i >= 200:\n","              #   print(\"e_j, initial_i :\", e_j, initial_i)\n","\n","              # print(i)\n","\n","              open_list.append(initial_i)\n","              zone_list.append(zone)\n","              side_list.append('l')\n","              strat_ver_list.append(strat_version)\n","\n","              if config.ep_set.entry_type == 'MARKET':\n","                  ep_list = [res_df['close'].iloc[ep_j]]\n","              else:\n","                  if not entry_open:\n","                      ep_list = [res_df['long_ep_{}'.format(strat_version)].iloc[\n","                                      ep_j]]  # dynamic_ep 인 경우에도 e_j 가 ep_j 로 대응되기 때문에 ep_j 만 사용해도 무관\n","                  else:\n","                      # try:\n","                      #   ep_list = [res_df['open'].iloc[e_j]]\n","                      # except Exception as e:\n","                      fee = config.trader_set.market_fee\n","                      ep_list = [res_df['open'].iloc[e_j]]  # --> 체결이 되는 e_j idx 기준으로 하는게 맞음\n","\n","              if not config.lvrg_set.static_lvrg:\n","\n","                  ep_ = ep_list[0]\n","                  out_ = res_df['long_out_{}'.format(strat_version)].iloc[out_j]\n","                  if public_override:\n","                      config.lvrg_set.leverage = lvrg_set(res_df, config, \"BUY\", ep_, out_, fee)\n","                  else:\n","                      config.lvrg_set.leverage = utils_public.lvrg_set(res_df, config, \"BUY\", ep_, out_, fee)\n","\n","                  # -------------- leverage rejection -------------- #\n","                  if config.lvrg_set.leverage == None:\n","                      open_list.pop()\n","                      zone_list.pop()\n","                      side_list.pop()\n","                      strat_ver_list.pop()\n","\n","                      i += 1\n","                      if i >= len(res_df):\n","                          break\n","                      continue\n","\n","              leverage_list.append(config.lvrg_set.leverage)\n","\n","              if config.ep_set.entry_type == \"MARKET\":\n","                  ep_idx_list = [ep_j]\n","              else:\n","                  ep_idx_list = [e_j]\n","\n","              out_idx_list = [out_j]\n","\n","              tp_list = []\n","              tp_idx_list = []\n","\n","              partial_tp_cnt = 0\n","              hedge_cnt = 1\n","\n","              h_ep, h_tp = None, None\n","              h_i, h_j = None, None\n","\n","              trade_done = 0\n","              cross_on = 0\n","              out = 0\n","              config.out_set.retouch = 0\n","\n","              if i == len(res_df) - 1:  # if j start from i + 1\n","                  open_list.pop()\n","                  zone_list.pop()\n","                  side_list.pop()\n","                  strat_ver_list.pop()\n","\n","              for j in range(i + 1, len(res_df)):\n","\n","                  # for j in range(i, len(res_df)):\n","\n","                  if config.tp_set.static_tp:\n","                      if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","                          tp_j = ep_j\n","                      else:\n","                          tp_j = initial_i\n","                  else:\n","                      tp_j = j\n","\n","                  if config.out_set.static_out:\n","                      if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","                          out_j = ep_j\n","                      # else:\n","                      #   out_j = initial_i\n","                  else:\n","                      out_j = j\n","\n","                      # -------------- hedge only once -------------- #\n","                  #             일단, h_quantity 는 초기 진입과 동일하게 설정         #\n","                  # if res_df['low'].iloc[j] <= res_df['minor_ST2_Down'].iloc[j] and hedge_cnt == 1:\n","                  # if res_df['close'].iloc[j] <= res_df['minor_ST2_Down'].iloc[j] and hedge_cnt == 1:\n","                  # if res_df['close'].iloc[j] <= res_df['minor_ST3_Down'].iloc[j] and hedge_cnt == 1:\n","\n","                  #   h_ep = res_df['close'].iloc[j]\n","                  #   hedge_cnt -= 1\n","                  #   h_i = j\n","\n","                  # -------------- sub ep -------------- #\n","                  # if res_df['low'].iloc[j - 1] >= res_df['sar2'].iloc[j - 1] and res_df['low'].iloc[j] < res_df['sar2'].iloc[j]:\n","\n","                  #   sub_ep = res_df['sar2'].iloc[j - 1]\n","\n","                  #   if sub_ep > ep_list[-1]:\n","                  #     ep_list.append(sub_ep)\n","                  #     ep_idx_list.append(j)\n","\n","                  # -------------- ultimate tp -------------- #\n","                  if not config.tp_set.non_tp:\n","                      #            1. by level          #\n","                      if config.tp_set.tp_type == \"LIMIT\" or config.tp_set.tp_type == \"BOTH\":\n","\n","                          for l_i, long_tp_ in enumerate(long_tps):\n","\n","                              #     decay adjustment    #\n","                              #     tp_j includes dynamic_j   #\n","                              try:\n","                                  if config.tr_set.decay_gap != \"None\":\n","                                      decay_share = (j - initial_i) // config.tp_set.decay_term\n","                                      decay_remain = (j - initial_i) % config.tp_set.decay_term\n","                                      if j != initial_i and decay_remain == 0:\n","                                          long_tp_.iloc[tp_j] -= \\\n","                                          res_df['h_long_rtc_gap_{}'.format(strat_version)].iloc[\n","                                              initial_i] * config.tr_set.decay_gap * decay_share\n","\n","                              except:\n","                                  pass\n","\n","                              if res_df['high'].iloc[j] >= long_tp_.iloc[tp_j] and partial_tp_cnt == l_i:\n","                                  # if res_df['high'].iloc[j] >= long_tp.iloc[j]:\n","\n","                                  if l_i == len(long_tps) - 1:\n","                                      trade_done = 1\n","\n","                                  partial_tp_cnt += 1\n","\n","                                  #         dynamic tp        #\n","                                  # if 0:\n","                                  if long_tp_.iloc[j] != long_tp_.iloc[j - 1] and not config.tp_set.static_tp:\n","\n","                                      #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 #\n","                                      # if res_df['open'].iloc[j] >= long_tp_.iloc[initial_i]:\n","                                      if res_df['open'].iloc[j] >= long_tp_.iloc[j]:\n","\n","                                          # tp = long_tp_.iloc[initial_i]\n","                                          tp = res_df['open'].iloc[j]\n","\n","                                          if trade_done:\n","                                              tp_state_list.append(\"d-long_open {}\".format(strat_version))\n","\n","\n","                                      #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 #\n","                                      else:\n","\n","                                          # tp = long_tp_.iloc[initial_i]\n","                                          tp = long_tp_.iloc[j]\n","                                          # tp = res_df['open'].iloc[j]\n","\n","                                          if trade_done:\n","                                              tp_state_list.append(\"d-long_tp {}\".format(strat_version))\n","\n","                                  #         static tp         #\n","                                  else:\n","\n","                                      #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 #\n","                                      #   non_inversion 의 경우, short_tp 가 가능함   #\n","\n","                                      if res_df['open'].iloc[j] >= long_tp_.iloc[tp_j]:\n","                                          # if res_df['open'].iloc[j] >= long_tp_.iloc[initial_i]:\n","\n","                                          # tp = long_tp_.iloc[initial_i]\n","\n","                                          if config.tr_set.decay_gap != \"None\" and decay_remain == 0:\n","                                              tp = res_df['open'].iloc[j]\n","                                          else:\n","                                              tp = long_tp_.iloc[tp_j]\n","\n","                                          if trade_done:\n","                                              tp_state_list.append(\"s-long_tp {}\".format(strat_version))\n","\n","\n","                                      #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 #\n","                                      else:\n","\n","                                          # tp = long_tp_.iloc[initial_i]\n","                                          tp = long_tp_.iloc[tp_j]\n","\n","                                          # tp = res_df['open'].iloc[j]\n","\n","                                          if trade_done:\n","                                              tp_state_list.append(\"s-long_tp {}\".format(strat_version))\n","\n","                                  tp_list.append(tp)\n","                                  tp_idx_list.append(j)\n","                                  fee += config.trader_set.limit_fee\n","\n","                      #           2. by time        #\n","                      if config.tp_set.tp_type == 'MARKET' or (config.tp_set.tp_type == \"BOTH\" and not trade_done):\n","\n","                          market_tp = 0\n","\n","                          # -------------- sar tp -------------- #\n","                          # if (res_df['low'].iloc[j] <= res_df['sar2'].iloc[j]) & \\\n","                          #   (res_df['low'].iloc[j - 1] > res_df['sar2'].iloc[j - 1]) & \\\n","                          #   (res_df['low'].iloc[j - 2] > res_df['sar2'].iloc[j - 2]):\n","\n","                          #       inversion     #\n","                          # if (res_df['high'].iloc[j] >= res_df['sar2'].iloc[j]) & \\\n","                          #   (res_df['high'].iloc[j - 1] < res_df['sar2'].iloc[j - 1]) & \\\n","                          #   (res_df['high'].iloc[j - 2] < res_df['sar2'].iloc[j - 2]):\n","\n","                          # ----------- st long ----------- #\n","                          # if res_df['close'].iloc[j] >= res_df['long_tp'].iloc[tp_j]:\n","\n","                          # -------------- sar pb tp -------------- #\n","                          # if res_df['high'].iloc[j] >= res_df['long_tp'].iloc[initial_i]:\n","\n","                          # -------------- st tp -------------- #\n","                          # if res_df['close'].iloc[j] < res_df['middle_line'].iloc[j]:\n","\n","                          # -------------- fisher tp -------------- #\n","                          # if entry[j] == -1:\n","\n","                          # -------------- timestamp -------------- #\n","                          if config.tp_set.time_tp:\n","                              if np_timeidx[\n","                                  j] % config.loc_set.zone.c_itv_ticks == config.loc_set.zone.c_itv_ticks - 1 and \\\n","                                      j - initial_i >= config.loc_set.zone.c_itv_ticks:\n","                                  market_tp = 1\n","\n","                          # -------------- rsi -------------- #\n","                          if strat_version in rsi_out_stratver:\n","                              if (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[\n","                                      j - 1] <= 50 + config.loc_set.point.osc_band) & \\\n","                                      (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[\n","                                            j] > 50 + config.loc_set.point.osc_band):\n","                                  # if (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j - 1] >= 50 + config.loc_set.point.osc_band) & \\\n","                                  #                  (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j] < 50 + config.loc_set.point.osc_band):\n","                                  market_tp = 1\n","\n","                              # -------------- cci -------------- #\n","                              # if (res_df['cci_%s' % config.loc_set.point.exp_itv].iloc[j - 1] <= config.loc_set.point.osc_band) & \\\n","                              #                  (res_df['cci_%s' % config.loc_set.point.exp_itv].iloc[j] > config.loc_set.point.osc_band):\n","                              #   market_tp = 1\n","\n","                          # ---------------------------- early out phase ---------------------------- #\n","\n","                          #        osc slight touch     #\n","                          if allow_osc_touch:\n","                              if (np.max(res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[\n","                                          initial_i:j]) > 50 + config.loc_set.point.osc_band - rsi_gap) & \\\n","                                      (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j] <= 50):\n","                                  market_tp = 1\n","\n","                          #         tp early out        #\n","                          # # if (np.max(res_df['high'].iloc[e_j:j]) > res_df['long_tp'].iloc[tp_j]) & \\\n","                          # if (np.max(res_df['high'].iloc[e_j:j]) > res_df['h_long_rtc_1'].iloc[tp_j] + res_df['h_long_rtc_gap'].iloc[tp_j] * early_out_tpg) & \\\n","                          #   (res_df['close'].iloc[j] <= res_df['long_ep'].iloc[ep_j]):\n","                          #   market_tp = 1\n","\n","                          # if strat_version == \"v7\":\n","                          #   if res_df['dc_lower_1m'].iloc[j] < res_df['dc_lower_5m'].iloc[j]:\n","                          #     market_tp = 1\n","\n","                          #         bb_upper early out        #\n","                          if strat_version in ['v5_2']:\n","                              if res_df['close'].iloc[j] > res_df['bb_upper_5m'].iloc[j] > res_df['close'].iloc[\n","                                  j - 1]:\n","                                  cross_on = 1\n","\n","                              if cross_on == 1 and res_df['close'].iloc[j] < res_df['bb_lower_5m'].iloc[j] < \\\n","                                      res_df['close'].iloc[j - 1]:\n","                                  market_tp = 1\n","\n","                          if market_tp:\n","\n","                              tp = res_df['close'].iloc[j]\n","                              # tp = res_df['open'].iloc[j]\n","                              trade_done = 1\n","\n","                              if trade_done:\n","                                  tp_state_list.append(\"long close tp {}\".format(strat_version))\n","                                  # print(\"early_out passed !\")\n","\n","                              tp_list.append(tp)\n","                              tp_idx_list.append(j)\n","                              fee += config.trader_set.market_fee\n","\n","                  # -------------- out -------------- #\n","                  if not trade_done and config.out_set.use_out and j != len(res_df) - 1:\n","\n","                      # -------------- macd -------------- #\n","                      # if res_df['macd_hist3'].iloc[j] < 0:\n","                      # # if res_df['macd_hist3'].iloc[i] > 0 and res_df['macd_hist3'].iloc[j] < 0:\n","\n","                      # -------------- st config.out_set.retouch -------------- #\n","                      # out = 1 상태면 동일 tick 에서 config.out_set.retouch 를 조사할 거기 때문에, 먼저 검사함\n","                      # 그리고, out 기준이 close 라 이게 맞음\n","                      # close 가 long_out 보다 내려가있는 상태일테니 high 를 조사하는게 맞음\n","                      # if out and res_df['high'].iloc[j] >= long_out.iloc[out_j]:\n","                      #   config.out_set.retouch = 1\n","\n","                      # ------- 일정시간 이상, dynamic_out 적용 ------ #\n","                      try:\n","                          if j - out_idx >= config.out_set.retouch_out_period:\n","                              static_long_out = res_df['long_out_{}'.format(strat_version)].iloc[j]\n","\n","                      except Exception as e:\n","                          pass\n","\n","                          # ------- static out ------ #\n","                      try:\n","                          if out and res_df['high'].iloc[j] >= static_long_out:\n","                              config.out_set.retouch = 1\n","                      except Exception as e:\n","                          pass\n","\n","                          # ------- config.out_set.retouch out ------ #\n","                      # if out and res_df['high'].iloc[j] >= long_out2.iloc[out_j]:\n","                      #   config.out_set.retouch = 1\n","\n","                      # -------------- st -------------- #\n","                      # if res_df['close'].iloc[j] < res_df['middle_line'].iloc[j]:\n","                      # if res_df['close'].iloc[j] < res_df['minor_ST3_Down'].iloc[j]:\n","                      # if res_df['close'].iloc[j] < lower_middle.iloc[j]:\n","                      # if res_df['close'].iloc[j] < res_df['minor_ST1_Down'].iloc[j]:\n","                      if out == 0:\n","                          if config.out_set.hl_out:\n","                              if res_df['low'].iloc[j] <= res_df['long_out_{}'.format(strat_version)].iloc[\n","                                  out_j]:  # check out only once\n","                                  out = 1\n","\n","                          else:\n","                              if res_df['close'].iloc[j] <= res_df['long_out_{}'.format(strat_version)].iloc[\n","                                  out_j]:  # check out only once\n","                                  out = 1\n","\n","                          # out_idx = j\n","                          # static_long_out = long_out.iloc[out_j]\n","                          # if config.out_set.second_out:\n","                          # static_long_out = long_out.iloc[out_j] - res_df['st_gap'].iloc[out_j] * config.out_set.second_out_gap\n","\n","                      # if out == 0 and res_df['low'].iloc[j] <= long_out.iloc[out_j]: # check out only once\n","                      #   out = 1\n","\n","                      # -------------- sma -------------- #\n","                      # if res_df['close'].iloc[j] < res_df[sma].iloc[j]:\n","\n","                      # -------------- sar -------------- #\n","                      # if res_df['close'].iloc[j] < res_df['minor_ST3_Down'].iloc[j] \\\n","                      #   or res_df['sar2'].iloc[j] >= res_df['low'].iloc[j]:\n","                      # if res_df['close'].iloc[j] < long_out.iloc[initial_i]: # or \\\n","                      #   #  res_df['close'].iloc[j] < res_df['sar2'].iloc[j]:\n","                      #   #  res_df['sar2_uptrend'].iloc[j] == 0 or \\\n","                      #   out = 1\n","\n","                      # if res_df['sar2_uptrend'].iloc[j] == 0:\n","\n","                      #     if prev_sar is None:\n","                      #       prev_sar = res_df['sar2'].iloc[j - 1]\n","\n","                      #     if res_df['close'].iloc[j] < prev_sar:\n","                      #       out = 1\n","\n","                      # else:\n","                      #   if res_df['close'].iloc[j] < res_df['sar2'].iloc[j]:\n","                      #     out = 1\n","\n","                      # -------------- hl -------------- #\n","                      # if res_df['close'].iloc[j] < long_out.iloc[tp_j]:\n","\n","                      # -------------- stoch -------------- #\n","                      # if res_df['stoch'].iloc[j - 2] <= res_df['stoch'].iloc[j - 1] and \\\n","                      #   res_df['stoch'].iloc[j - 1] > res_df['stoch'].iloc[j] and \\\n","                      #   res_df['stoch'].iloc[j - 1] >= stoch_upper:\n","                      #   out = 1\n","\n","                      # config.out_set.retouch 1 경우, config.out_set.retouch 조건도 있어야함\n","                      if out:\n","                          if config.out_set.retouch:\n","                              if config.out_set.retouch:\n","                                  pass\n","                              else:\n","                                  continue\n","\n","                          else:\n","                              pass\n","\n","                          if config.out_set.price_restoration:\n","                              tp = res_df['long_out_{}'.format(strat_version)].iloc[out_j]\n","                              if config.out_set.second_out:\n","                                  tp = res_df['long_out2_{}'.format(strat_version)].iloc[out_j]\n","\n","                              # if res_df['close'].iloc[j] < tp: # 이 경우를 protect 하는건 insane 임\n","                              # # if res_df['high'].iloc[j] < tp: # --> config.out_set.hl_out 사용시 이 조건은 valid 함\n","                              #   tp = res_df['close'].iloc[j]\n","\n","                          else:\n","\n","                              if res_df['open'].iloc[j] <= res_df['long_out_{}'.format(strat_version)].iloc[out_j]:\n","                                  tp = res_df['open'].iloc[j]\n","                              else:\n","                                  if config.out_set.hl_out:\n","                                      tp = res_df['long_out_{}'.format(strat_version)].iloc[out_j]\n","                                  else:\n","                                      tp = res_df['close'].iloc[j]\n","\n","                              # if not config.out_set.static_out:\n","                              #   if res_df['open'].iloc[j] <= res_df['long_out'].iloc[out_j]: # dynamic close out 의 open 고려\n","                              #     tp = res_df['open'].iloc[j]\n","                              #   else:\n","                              #     tp = res_df['close'].iloc[j]\n","\n","                              # else:\n","                              #   tp = res_df['close'].iloc[j]\n","\n","                          if config.out_set.retouch:  # out 과 open 비교\n","                              if config.out_set.second_out:  # long_out = sell\n","                                  # config.out_set.second_out 은 기본적으로 limit 이라 이 구조가 가능함\n","                                  if res_df['open'].iloc[j] >= res_df['long_out2_{}'.format(strat_version)].iloc[\n","                                      out_j]:  # dynamic_out 일 경우 고려해야함\n","                                      tp = res_df['open'].iloc[j]\n","                              else:\n","                                  if res_df['open'].iloc[j] >= res_df['long_out_{}'.format(strat_version)].iloc[\n","                                      out_j]:  # dynamic_out 일 경우 고려해야함\n","                                      tp = res_df['open'].iloc[j]\n","\n","                              try:\n","                                  if res_df['open'].iloc[j] >= static_long_out:\n","                                      tp = res_df['open'].iloc[j]\n","                                  else:\n","                                      tp = static_long_out\n","                              except Exception as e:\n","                                  pass\n","\n","                          # tp = res_df['open'].iloc[j]\n","                          tp_state_list.append(\"long close_out {}\".format(strat_version))\n","                          trade_done = 1\n","\n","                          tp_list.append(tp)\n","                          tp_idx_list.append(j)\n","                          fee += config.trader_set.market_fee\n","\n","                  # -------------- non tp -------------- #\n","                  if j == len(res_df) - 1:\n","                      trade_done = 1\n","                      tp = res_df['close'].iloc[j]\n","                      tp_list.append(tp)\n","                      tp_idx_list.append(j)\n","                      fee += config.trader_set.market_fee\n","\n","                  if trade_done:\n","\n","                      # --------------- tp_ratio info --------------- #\n","                      try:\n","                          if config.out_set.use_out:\n","                              done_tp = res_df['long_tp_{}'.format(strat_version)].iloc[tp_j]\n","                              done_out = res_df['long_out_{}'.format(strat_version)].iloc[out_j]\n","\n","                              if done_out >= ep_list[0]:  # loss >= 1\n","                                  tp_ratio = np.nan\n","                                  dr = np.nan\n","                                  # print(\"loss >= 1\")\n","                              else:\n","                                  tp_ratio = ((done_tp - ep_list[0] - tp_fee * ep_list[0]) / (\n","                                              ep_list[0] - done_out + out_fee * ep_list[0]))\n","                                  dr = ((done_tp - ep_list[0]) / (ep_list[0] - done_out))\n","\n","                          else:\n","                              dr = np.nan\n","                              tp_ratio = np.nan\n","\n","                      except Exception as e:\n","                          print(\"error in tr phase :\", e)\n","                          dr = np.nan\n","                          tp_ratio = np.nan\n","\n","                      tp_ratio_list.append(tp_ratio)\n","                      long_tp_ratio_list.append(tp_ratio)\n","                      dr_list.append(dr)\n","                      long_dr_list.append(dr)\n","\n","                      qty_list = []\n","                      temp_pr_list = []\n","                      r_qty = 1\n","                      for q_i in range(len(tp_list) - 1, -1, -1):\n","\n","                          if len(tp_list) == 1:\n","                              temp_qty = r_qty\n","                          else:\n","                              if q_i != 0:\n","                                  temp_qty = r_qty / config.tp_set.partial_qty_divider\n","                              else:\n","                                  temp_qty = r_qty\n","\n","                          # temp_pr = (tp_list[q_i] / ep_list[0] - fee - 1) * temp_qty\n","                          temp_pr = (tp_list[q_i] / ep_list[0] - fee - 1) * temp_qty * config.lvrg_set.leverage\n","                          r_qty -= temp_qty\n","\n","                          temp_pr_list.append(temp_pr)\n","\n","                      temp_pr = sum(temp_pr_list) + 1\n","\n","                      # -------------------- sub ep -> pr calc -------------------- #\n","                      if len(ep_list) > 1:\n","\n","                          p_ep_pr = []\n","                          for sub_ep_ in ep_list:\n","                              sub_pr = (tp / sub_ep_ - fee - 1) * config.lvrg_set.leverage\n","                              p_ep_pr.append(sub_pr)\n","\n","                          temp_pr = sum(p_ep_pr) + 1\n","\n","                          print(\"temp_pr :\", temp_pr)\n","\n","                      # ------------ hedge + non_hedge pr summation ------------ #\n","                      #         hedge pr direction is opposite to the origin       #\n","                      hedge_pr = 1\n","                      if hedge_cnt == 0:\n","                          #       hedge tp      #\n","                          h_tp = res_df['close'].iloc[j]\n","                          hedge_pr = (h_ep / h_tp - fee - 1) * config.lvrg_set.leverage  # hedge short\n","                          temp_pr += hedge_pr\n","                          h_j = j\n","\n","                      # ll = min(res_df['low'].iloc[i:j + 1])\n","                      ll = min(res_df['low'].iloc[i:j])  # pos. 정리하기 바로 직전까지\n","                      long_liq = (ll / ep_list[0] - fee - 1) * config.lvrg_set.leverage + 1\n","\n","                      if j != len(res_df) - 1:\n","\n","                          ep_tp_list.append((ep_list, tp_list))\n","                          # trade_list.append((ep_idx_list, tp_idx_list))\n","                          trade_list.append((ep_idx_list, out_idx_list, tp_idx_list))\n","\n","                          liqd_list.append(long_liq)\n","                          long_liqd_list.append(long_liq)\n","\n","                          h_ep_tp_list.append((h_ep, h_tp))\n","                          h_trade_list.append([initial_i, h_i, h_j])\n","\n","                          pr_list.append(temp_pr)\n","                          fee_list.append(fee)\n","                          long_list.append(temp_pr)\n","                          long_fee_list.append(fee)\n","\n","                          h_pr_list.append(hedge_pr)\n","                          h_long_list.append(hedge_pr)\n","\n","                          i = j\n","                          break\n","\n","                      else:\n","\n","                          # ep_tp_list.append((ep_list, tp_list))\n","                          # trade_list.append((ep_idx_list, tp_idx_list))\n","\n","                          # pr_list 를 넣지 않을거니까, open_list 에서 해당 idx 는 pop\n","                          open_list.pop()\n","                          zone_list.pop()\n","                          side_list.pop()\n","                          strat_ver_list.pop()\n","\n","                          #         tp 미체결 survey        #\n","                          nontp_liqd_list.append(long_liq)\n","                          nontp_long_liqd_list.append(long_liq)\n","                          nontp_long_indexs.append(i)\n","                          nontp_long_ep_list.append(ep_list[0])\n","\n","                          nontp_long_pr = (tp / ep_list[0] - fee - 1) * config.lvrg_set.leverage + 1\n","                          nontp_pr_list.append(nontp_long_pr)\n","                          nontp_long_pr_list.append(nontp_long_pr)\n","\n","                      if len(open_list) > len(trade_list):\n","                          print('debug from index :', i)\n","                          print(len(open_list), len(trade_list))\n","                          print(\"len(res_df) :\", len(res_df))\n","                          assert len(open_list) == len(trade_list), 'stopped'\n","\n","          i += 1  # if entry starts with prev trade's close, do not use it !\n","          # print(\"i in end :\", i)\n","          if i >= len(res_df):\n","              break\n","\n","      # -------------------- result analysis -------------------- #\n","      # try:\n","      print(\"elapsed_time :\", time.time() - start_0)\n","\n","      plt.style.use('default')\n","      # mpl.rcParams.update(mpl.rcParamsDefault)\n","\n","      fig = plt.figure(figsize=(14, 10))\n","\n","      gs = gridspec.GridSpec(nrows=3,  # row 몇 개\n","                              ncols=3,  # col 몇 개\n","                              height_ratios=[10, 10, 1]\n","                              )\n","      # plt.figure(figsize=(16, 12))\n","      # plt.figure(figsize=(12, 8))\n","      # plt.figure(figsize=(10, 6))\n","      plt.suptitle(key)\n","\n","      try:\n","          np_pr = np.array(pr_list)\n","\n","          sr = sharpe_ratio(np_pr)\n","\n","          dpf = (len(res_df) / 1440) / len(np_pr)\n","\n","          np_zone_list = np.array(zone_list)\n","          # np_pr_list = np.array(pr_list)\n","          np_side_list = np.array(side_list)\n","\n","          t_w = np.sum(np.where((np_zone_list == 't') & (np_pr > 1), 1, 0))\n","          c_w = np.sum(np.where((np_zone_list == 'c') & (np_pr > 1), 1, 0))\n","          t_ls = np.sum(np.where((np_zone_list == 't') & (np_pr < 1), 1, 0))\n","          c_ls = np.sum(np.where((np_zone_list == 'c') & (np_pr < 1), 1, 0))\n","\n","          # np_pr = (np.array(pr_list) - 1) * config.lvrg_set.leverage + 1\n","\n","          # ----- fake_pr ----- #\n","          # np_pr = np.where(np_pr > 1, 1 + (np_pr - 1) * 3, np_pr)\n","\n","          total_pr = np.cumprod(np_pr)\n","\n","          for_sum_pr = np_pr - 1\n","          for_sum_pr[0] = 1\n","          sum_pr = np.cumsum(for_sum_pr)\n","          sum_pr = np.where(sum_pr < 0, 0, sum_pr)\n","\n","          wr = len(np_pr[np_pr > 1]) / len(np_pr[np_pr != 1])\n","\n","          total_rollmax_pr = np.maximum.accumulate(total_pr)\n","          total_acc_mdd = np.max((total_rollmax_pr - total_pr) / total_rollmax_pr)\n","          total_rollmax_sumpr = np.maximum.accumulate(sum_pr)\n","          total_sum_mdd = np.max((total_rollmax_sumpr - sum_pr) / total_rollmax_sumpr)\n","\n","          np_tp_ratio_list = np.array(tp_ratio_list)  # 초기에 tr 을 정하는거라 mean 사용하는게 맞음\n","          mean_tr = np.mean(np_tp_ratio_list[np.isnan(np_tp_ratio_list) == 0])\n","\n","          np_dr_list = np.array(dr_list)  # 초기에 tr 을 정하는거라 mean 사용하는게 맞음\n","          mean_dr = np.mean(np_dr_list[np.isnan(np_dr_list) == 0])\n","\n","          # pr_gap = (np_pr - 1) / config.lvrg_set.leverage + fee\n","          # tp_gap_ = pr_gap[pr_gap > 0]\n","          # # mean_config.tr_set.tp_gap = np.mean(pr_gap[pr_gap > 0])\n","          # mean_ls_gap = np.mean(pr_gap[pr_gap < 0])\n","\n","          # ---- profit fee ratio ---- #\n","          # mean_pgfr = np.mean((tp_gap_ - fee) / abs(tp_gap_ + fee))\n","\n","          plt.subplot(gs[0])\n","          plt.plot(total_pr)\n","          plt.plot(sum_pr, color='gold')\n","          if len(nontp_liqd_list) != 0:\n","              plt.title(\n","                  \"wr : %.3f\\n len(td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (wr, len(np_pr[np_pr != 1]), dpf, np.min(np_pr), total_pr[-1], sum_pr[-1], sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (total_acc_mdd, total_sum_mdd, config.lvrg_set.leverage, min(liqd_list), mean_tr, mean_dr) + \\\n","                  \"\\n nontp_liqd_cnt : %s\\nnontp_liqd : %.3f\\nontp_liqd_pr : %.3f\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_liqd_list), min(nontp_liqd_list), min(nontp_pr_list), t_w, c_w, t_ls, c_ls),\n","                  position=title_position, fontsize=fontsize)\n","          else:\n","              plt.title(\n","                  \"wr : %.3f\\n len(td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (wr, len(np_pr[np_pr != 1]), dpf, np.min(np_pr), total_pr[-1], sum_pr[-1], sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (total_acc_mdd, total_sum_mdd, config.lvrg_set.leverage, min(liqd_list), mean_tr, mean_dr) + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_liqd_list), t_w, c_w, t_ls, c_ls),\n","                  position=title_position, fontsize=fontsize)\n","          # plt.show()\n","\n","          survey_df.iloc[survey_i] = wr, sr, len(np_pr[np_pr != 1]), dpf, \\\n","                                      total_pr[-1], sum_pr[-1], total_acc_mdd, total_sum_mdd, min(liqd_list), np.min(\n","              np_pr), mean_tr, mean_dr\n","\n","          print('supblot231 passed')\n","\n","      except Exception as e:\n","          print(\"error in 231 :\", e)\n","\n","      try:\n","          #         short only      #\n","          short_np_pr = np.array(short_list)\n","\n","          short_sr = sharpe_ratio(short_np_pr)\n","\n","          short_dpf = (len(res_df) / 1440) / len(short_np_pr)\n","\n","          short_total_pr = np.cumprod(short_np_pr)\n","\n","          short_for_sum_pr = short_np_pr - 1\n","          short_for_sum_pr[0] = 1\n","          short_sum_pr = np.cumsum(short_for_sum_pr)\n","          short_sum_pr = np.where(short_sum_pr < 0, 0, short_sum_pr)\n","\n","          short_wr = len(short_np_pr[short_np_pr > 1]) / len(short_np_pr[short_np_pr != 1])\n","\n","          t_w_s = np.sum(np.where((np_zone_list == 't') & (np_pr > 1) & (np_side_list == 's'), 1, 0))\n","          c_w_s = np.sum(np.where((np_zone_list == 'c') & (np_pr > 1) & (np_side_list == 's'), 1, 0))\n","          t_ls_s = np.sum(np.where((np_zone_list == 't') & (np_pr < 1) & (np_side_list == 's'), 1, 0))\n","          c_ls_s = np.sum(np.where((np_zone_list == 'c') & (np_pr < 1) & (np_side_list == 's'), 1, 0))\n","\n","          short_rollmax_pr = np.maximum.accumulate(short_total_pr)\n","          short_acc_mdd = np.max((short_rollmax_pr - short_total_pr) / short_rollmax_pr)\n","          short_rollmax_sumpr = np.maximum.accumulate(short_sum_pr)\n","          short_sum_mdd = np.max((short_rollmax_sumpr - short_sum_pr) / short_rollmax_sumpr)\n","\n","          np_short_tp_ratio_list = np.array(short_tp_ratio_list)\n","          mean_short_tr = np.mean(np_short_tp_ratio_list[np.isnan(np_short_tp_ratio_list) == 0])\n","\n","          np_short_dr_list = np.array(short_dr_list)\n","          mean_short_dr = np.mean(np_short_dr_list[np.isnan(np_short_dr_list) == 0])\n","\n","          # short_pr_gap = (short_np_pr - 1) / config.lvrg_set.leverage + fee\n","          # short_tp_gap = short_pr_gap[short_pr_gap > 0]\n","          # # mean_short_tp_gap = np.mean(short_pr_gap[short_pr_gap > 0])\n","          # # mean_short_ls_gap = np.mean(short_pr_gap[short_pr_gap < 0])\n","\n","          # mean_short_pgfr = np.mean((short_tp_gap - fee) / abs(short_tp_gap + fee))\n","\n","          # plt.subplot(232)\n","          plt.subplot(gs[1])\n","          plt.plot(short_total_pr)\n","          plt.plot(short_sum_pr, color='gold')\n","          if len(nontp_short_liqd_list) != 0:\n","\n","              max_nontp_short_term = len(res_df) - nontp_short_indexs[0]\n","\n","              plt.title(\n","                  \"wr : %.3f\\nlen(short_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (short_wr, len(short_np_pr[short_np_pr != 1]), short_dpf, np.min(short_np_pr), short_total_pr[-1],\n","                      short_sum_pr[-1], short_sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (short_acc_mdd, short_sum_mdd, config.lvrg_set.leverage, min(short_liqd_list), mean_short_tr,\n","                      mean_short_dr) + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n nontp_liqd : %.3f\\n nontp_liqd_pr : %.3f\\n max_nontp_term : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_short_liqd_list), min(nontp_short_liqd_list), min(nontp_short_pr_list),\n","                      max_nontp_short_term, t_w_s, c_w_s, t_ls_s, c_ls_s),\n","                  position=title_position, fontsize=fontsize)\n","          else:\n","              plt.title(\n","                  \"wr : %.3f\\nlen(short_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (short_wr, len(short_np_pr[short_np_pr != 1]), short_dpf, np.min(short_np_pr), short_total_pr[-1],\n","                      short_sum_pr[-1], short_sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (short_acc_mdd, short_sum_mdd, config.lvrg_set.leverage, min(short_liqd_list), mean_short_tr,\n","                      mean_short_dr) + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_short_liqd_list), t_w_s, c_w_s, t_ls_s, c_ls_s),\n","                  position=title_position, fontsize=fontsize)\n","\n","          short_survey_df.iloc[survey_i] = short_wr, short_sr, len(short_np_pr[short_np_pr != 1]), short_dpf, \\\n","                                            short_total_pr[-1], short_sum_pr[-1], short_acc_mdd, short_sum_mdd, min(\n","              short_liqd_list), np.min(short_np_pr), mean_short_tr, mean_short_dr\n","\n","          print('supblot232 passed')\n","\n","      except Exception as e:\n","          print(\"error in 232 :\", e)\n","\n","      try:\n","          #         long only      #\n","          long_np_pr = np.array(long_list)\n","          # long_np_pr = (np.array(long_list) - 1) * config.lvrg_set.leverage + 1\n","\n","          long_sr = sharpe_ratio(long_np_pr)\n","\n","          long_dpf = (len(res_df) / 1440) / len(long_np_pr)\n","\n","          long_total_pr = np.cumprod(long_np_pr)\n","\n","          long_for_sum_pr = long_np_pr - 1\n","          long_for_sum_pr[0] = 1\n","          long_sum_pr = np.cumsum(long_for_sum_pr)\n","          long_sum_pr = np.where(long_sum_pr < 0, 0, long_sum_pr)\n","\n","          long_wr = len(long_np_pr[long_np_pr > 1]) / len(long_np_pr[long_np_pr != 1])\n","\n","          t_w_l = np.sum(np.where((np_zone_list == 't') & (np_pr > 1) & (np_side_list == 'l'), 1, 0))\n","          c_w_l = np.sum(np.where((np_zone_list == 'c') & (np_pr > 1) & (np_side_list == 'l'), 1, 0))\n","          t_ls_l = np.sum(np.where((np_zone_list == 't') & (np_pr < 1) & (np_side_list == 'l'), 1, 0))\n","          c_ls_l = np.sum(np.where((np_zone_list == 'c') & (np_pr < 1) & (np_side_list == 'l'), 1, 0))\n","\n","          long_rollmax_pr = np.maximum.accumulate(long_total_pr)\n","          long_acc_mdd = np.max((long_rollmax_pr - long_total_pr) / long_rollmax_pr)\n","          long_rollmax_sumpr = np.maximum.accumulate(long_sum_pr)\n","          long_sum_mdd = np.max((long_rollmax_sumpr - long_sum_pr) / long_rollmax_sumpr)\n","\n","          np_long_tp_ratio_list = np.array(long_tp_ratio_list)\n","          mean_long_tr = np.mean(np_long_tp_ratio_list[np.isnan(np_long_tp_ratio_list) == 0])\n","\n","          np_long_dr_list = np.array(long_dr_list)\n","          mean_long_dr = np.mean(np_long_dr_list[np.isnan(np_long_dr_list) == 0])\n","\n","          # long_pr_gap = (long_np_pr - 1) / config.lvrg_set.leverage + fee\n","          # long_tp_gap = long_pr_gap[long_pr_gap > 0]\n","          # # mean_long_tp_gap = np.mean(long_pr_gap[long_pr_gap > 0])\n","          # # mean_long_ls_gap = np.mean(long_pr_gap[long_pr_gap < 0])\n","\n","          # mean_long_pgfr = np.mean((long_tp_gap - fee) / abs(long_tp_gap + fee))\n","\n","          plt.subplot(gs[2])\n","          plt.plot(long_total_pr)\n","          plt.plot(long_sum_pr, color='gold')\n","          if len(nontp_long_liqd_list) != 0:\n","\n","              max_nontp_long_term = len(res_df) - nontp_long_indexs[0]\n","\n","              plt.title(\n","                  \"wr : %.3f\\nlen(long_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (long_wr, len(long_np_pr[long_np_pr != 1]), long_dpf, np.min(long_np_pr), long_total_pr[-1],\n","                      long_sum_pr[-1], long_sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (long_acc_mdd, long_sum_mdd, config.lvrg_set.leverage, min(long_liqd_list), mean_long_tr,\n","                      mean_long_dr) + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n nontp_liqd : %.3f\\n nontp_liqd_pr : %.3f\\n max_nontp_term : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (\n","                  len(nontp_long_liqd_list), min(nontp_long_liqd_list), min(nontp_long_pr_list), max_nontp_long_term,\n","                  t_w_l, c_w_l, t_ls_l, c_ls_l),\n","                  position=title_position, fontsize=fontsize)\n","          else:\n","              plt.title(\n","                  \"wr : %.3f\\nlen(long_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (long_wr, len(long_np_pr[long_np_pr != 1]), long_dpf, np.min(long_np_pr), long_total_pr[-1],\n","                      long_sum_pr[-1], long_sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (long_acc_mdd, long_sum_mdd, config.lvrg_set.leverage, min(long_liqd_list), mean_long_tr,\n","                      mean_long_dr) + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_long_liqd_list), t_w_l, c_w_l, t_ls_l, c_ls_l),\n","                  position=title_position, fontsize=fontsize)\n","\n","          long_survey_df.iloc[survey_i] = long_wr, long_sr, len(long_np_pr[long_np_pr != 1]), long_dpf, \\\n","                                          long_total_pr[-1], long_sum_pr[-1], long_acc_mdd, long_sum_mdd, min(\n","              long_liqd_list), np.min(long_np_pr), mean_long_tr, mean_long_dr\n","\n","          print('supblot233 passed')\n","\n","      except Exception as e:\n","          print(\"error in 233 :\", e)\n","\n","      try:\n","          #     reversion adjustment      #\n","          # rev_np_pr = 1 / (np.array(pr_list) + fee) - fee\n","          rev_fee = tp_fee + out_fee - np.array(fee_list)\n","          rev_np_pr = (1 / ((np.array(pr_list) - 1) / config.lvrg_set.leverage + np.array(\n","              fee_list) + 1) - rev_fee - 1) * config.lvrg_set.leverage + 1\n","          # rev_np_pr = (1 / (np.array(pr_list) + fee) - fee - 1) * config.lvrg_set.leverage + 1\n","\n","          rev_sr = sharpe_ratio(rev_np_pr)\n","\n","          rev_total_pr = np.cumprod(rev_np_pr)\n","          rev_wr = len(rev_np_pr[rev_np_pr > 1]) / len(rev_np_pr[rev_np_pr != 1])\n","\n","          rev_total_for_sum_pr = rev_np_pr - 1\n","          rev_total_for_sum_pr[0] = 1\n","          rev_total_sum_pr = np.cumsum(rev_total_for_sum_pr)\n","          rev_total_sum_pr = np.where(rev_total_sum_pr < 0, 0, rev_total_sum_pr)\n","\n","          rev_rollmax_pr = np.maximum.accumulate(rev_total_pr)\n","          rev_acc_mdd = np.max((rev_rollmax_pr - rev_total_pr) / rev_rollmax_pr)\n","          rev_rollmax_sumpr = np.maximum.accumulate(rev_total_sum_pr)\n","          rev_sum_mdd = np.max((rev_rollmax_sumpr - rev_total_sum_pr) / rev_rollmax_sumpr)\n","\n","          plt.subplot(gs[3])\n","\n","          plt.plot(rev_total_pr)\n","          plt.plot(rev_total_sum_pr, color='gold')\n","\n","          plt.title(\n","              \"wr : %.3f\\n sr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n min_pr : %.3f\"\n","              % (rev_wr, rev_sr, rev_total_pr[-1], rev_total_sum_pr[-1],\n","                  rev_acc_mdd, rev_sum_mdd, np.min(rev_np_pr)), fontsize=fontsize)\n","\n","          rev_survey_df.iloc[survey_i] = rev_wr, rev_sr, rev_total_pr[-1], rev_total_sum_pr[\n","              -1], rev_acc_mdd, rev_sum_mdd, np.min(rev_np_pr)\n","\n","      except Exception as e:\n","          print(\"error in 234 :\", e)\n","\n","      try:\n","          #         short       #\n","          # rev_short_np_pr = 1 / (np.array(short_list) + fee) - fee\n","          rev_short_fee = tp_fee + out_fee - np.array(short_fee_list)\n","          rev_short_np_pr = (1 / ((np.array(short_list) - 1) / config.lvrg_set.leverage + np.array(\n","              short_fee_list) + 1) - rev_short_fee - 1) * config.lvrg_set.leverage + 1\n","          # rev_short_np_pr = (1 / (np.array(short_list) + fee) - fee - 1) * config.lvrg_set.leverage + 1\n","\n","          rev_short_sr = sharpe_ratio(rev_short_np_pr)\n","\n","          short_rev_total_pr = np.cumprod(rev_short_np_pr)\n","          rev_short_wr = len(rev_short_np_pr[rev_short_np_pr > 1]) / len(rev_short_np_pr[rev_short_np_pr != 1])\n","\n","          rev_short_for_sum_pr = rev_short_np_pr - 1\n","          rev_short_for_sum_pr[0] = 1\n","          short_rev_sum_pr = np.cumsum(rev_short_for_sum_pr)\n","          short_rev_sum_pr = np.where(short_rev_sum_pr < 0, 0, short_rev_sum_pr)\n","\n","          short_rev_rollmax_pr = np.maximum.accumulate(short_rev_total_pr)\n","          short_rev_acc_mdd = np.max((short_rev_rollmax_pr - short_rev_total_pr) / short_rev_rollmax_pr)\n","          short_rev_rollmax_sumpr = np.maximum.accumulate(short_rev_sum_pr)\n","          short_rev_sum_mdd = np.max((short_rev_rollmax_sumpr - short_rev_sum_pr) / short_rev_rollmax_sumpr)\n","\n","          plt.subplot(gs[4])\n","\n","          plt.plot(short_rev_total_pr)\n","          plt.plot(short_rev_sum_pr, color='gold')\n","\n","          plt.title(\n","              \"wr : %.3f\\n sr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n min_pr : %.3f\"\n","              % (rev_short_wr, rev_short_sr, short_rev_total_pr[-1], short_rev_sum_pr[-1],\n","                  short_rev_acc_mdd, short_rev_sum_mdd, np.min(rev_short_np_pr)), fontsize=fontsize)\n","\n","          rev_short_survey_df.iloc[survey_i] = rev_short_wr, rev_short_sr, short_rev_total_pr[-1], short_rev_sum_pr[\n","              -1], short_rev_acc_mdd, short_rev_sum_mdd, np.min(rev_short_np_pr)\n","\n","      except Exception as e:\n","          print(\"error in 235 :\", e)\n","\n","      try:\n","          #         long       #\n","          # rev_long_np_pr = 1 / (np.array(long_list) + fee) - fee\n","          rev_long_fee = tp_fee + out_fee - np.array(long_fee_list)\n","          rev_long_np_pr = (1 / ((np.array(long_list) - 1) / config.lvrg_set.leverage + np.array(\n","              long_fee_list) + 1) - rev_long_fee - 1) * config.lvrg_set.leverage + 1\n","\n","          rev_long_sr = sharpe_ratio(rev_long_np_pr)\n","\n","          long_rev_total_pr = np.cumprod(rev_long_np_pr)\n","          rev_long_wr = len(rev_long_np_pr[rev_long_np_pr > 1]) / len(rev_long_np_pr[rev_long_np_pr != 1])\n","\n","          rev_long_for_sum_pr = rev_long_np_pr - 1\n","          rev_long_for_sum_pr[0] = 1\n","          long_rev_sum_pr = np.cumsum(rev_long_for_sum_pr)\n","          long_rev_sum_pr = np.where(long_rev_sum_pr < 0, 0, long_rev_sum_pr)\n","\n","          long_rev_rollmax_pr = np.maximum.accumulate(long_rev_total_pr)\n","          long_rev_acc_mdd = np.max((long_rev_rollmax_pr - long_rev_total_pr) / long_rev_rollmax_pr)\n","          long_rev_rollmax_sumpr = np.maximum.accumulate(long_rev_sum_pr)\n","          long_rev_sum_mdd = np.max((long_rev_rollmax_sumpr - long_rev_sum_pr) / long_rev_rollmax_sumpr)\n","\n","          plt.subplot(gs[5])\n","\n","          plt.plot(long_rev_total_pr)\n","          plt.plot(long_rev_sum_pr, color='gold')\n","\n","          plt.title(\n","              \"wr : %.3f\\n sr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n min_pr : %.3f\"\n","              % (rev_long_wr, rev_long_sr, long_rev_total_pr[-1], long_rev_sum_pr[-1],\n","                  long_rev_acc_mdd, long_rev_sum_mdd, np.min(rev_long_np_pr)), fontsize=fontsize)\n","\n","          rev_long_survey_df.iloc[survey_i] = rev_long_wr, rev_long_sr, long_rev_total_pr[-1], long_rev_sum_pr[\n","              -1], long_rev_acc_mdd, long_rev_sum_mdd, np.min(rev_long_np_pr)\n","\n","      except Exception as e:\n","          print(\"error in 236 :\", e)\n","\n","      try:\n","          gs_idx_list = [6, 7, 8]\n","          total_pr_list = [total_pr, short_total_pr, long_total_pr]\n","          rev_total_pr_list = [rev_total_pr, short_rev_total_pr, long_rev_total_pr]\n","          zip_obj = zip(gs_idx_list, frq_dev_plot(res_df, trade_list, side_list, plot=False), total_pr_list, rev_total_pr_list)\n","          [p_pr_plot(gs[gs_idx], frq_dev, res_df, total_pr, rev_total_pr, fontsize) for gs_idx, frq_dev, total_pr, rev_total_pr in zip_obj]     \n","\n","      except Exception as e:\n","          print(\"error in frq_dev_plot :\", e)\n","\n","      if show_plot:\n","          plt.show()\n","\n","      try:\n","\n","          h_np_pr = np.array(h_pr_list)\n","          # h_rev_np_pr = 1 / (np.array(h_pr_list) + fee) - fee    # define, for plot_check below cell\n","          h_rev_np_pr = (1 / (\n","                      (np.array(h_pr_list) - 1) / config.lvrg_set.leverage + np.array(fee_list) + 1) - np.array(\n","              fee_list) - 1) * config.lvrg_set.leverage + 1\n","\n","          # --------------------- h pr plot --------------------- #\n","          if len(h_np_pr[h_np_pr != 1]) != 0:\n","\n","              plt.figure(figsize=(16, 12))\n","              plt.suptitle(key + \" hedge\")\n","\n","              h_total_pr = np.cumprod(h_np_pr)\n","              h_wr = len(h_np_pr[h_np_pr > 1]) / len(h_np_pr[h_np_pr != 1])\n","\n","              plt.subplot(gs[0])\n","\n","              plt.plot(h_total_pr)\n","              plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (\n","              h_wr, np.min(h_np_pr), h_total_pr[-1], config.lvrg_set.leverage))\n","              # plt.show()\n","\n","              #         short only      #\n","              h_short_np_pr = np.array(h_short_list)\n","\n","              short_h_total_pr = np.cumprod(h_short_np_pr)\n","              h_short_wr = len(h_short_np_pr[h_short_np_pr > 1]) / len(h_short_np_pr[h_short_np_pr != 1])\n","\n","              plt.subplot(gs[1])\n","              plt.plot(short_h_total_pr)\n","              plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (\n","              h_short_wr, np.min(h_short_np_pr), short_h_total_pr[-1], config.lvrg_set.leverage))\n","\n","              #         long only      #\n","              h_long_np_pr = np.array(h_long_list)\n","\n","              long_h_total_pr = np.cumprod(h_long_np_pr)\n","              h_long_wr = len(h_long_np_pr[h_long_np_pr > 1]) / len(h_long_np_pr[h_long_np_pr != 1])\n","\n","              plt.subplot(gs[2])\n","              plt.plot(long_h_total_pr)\n","              plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (\n","              h_long_wr, np.min(h_long_np_pr), long_h_total_pr[-1], config.lvrg_set.leverage))\n","\n","              #     reversion adjustment      #\n","\n","              h_rev_total_pr = np.cumprod(h_rev_np_pr)\n","              h_rev_wr = len(h_rev_np_pr[h_rev_np_pr > 1]) / len(h_rev_np_pr[h_rev_np_pr != 1])\n","\n","              plt.subplot(gs[3])\n","              plt.plot(h_rev_total_pr)\n","              plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (\n","              h_rev_wr, np.min(h_rev_np_pr), h_rev_total_pr[-1], config.lvrg_set.leverage))\n","\n","              #         short       #\n","              # h_rev_short_np_pr = 1 / (np.array(h_short_list) + fee) - fee\n","              h_rev_short_np_pr = (1 / ((np.array(h_short_list) - 1) / config.lvrg_set.leverage + np.array(\n","                  short_fee_list) + 1) - np.array(short_fee_list) - 1) * config.lvrg_set.leverage + 1\n","\n","              short_h_rev_total_pr = np.cumprod(h_rev_short_np_pr)\n","              h_rev_short_wr = len(h_rev_short_np_pr[h_rev_short_np_pr > 1]) / len(\n","                  h_rev_short_np_pr[h_rev_short_np_pr != 1])\n","\n","              plt.subplot(gs[4])\n","              plt.plot(short_h_rev_total_pr)\n","              plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (\n","              h_rev_short_wr, np.min(h_rev_short_np_pr), short_h_rev_total_pr[-1], config.lvrg_set.leverage))\n","\n","              #         long       #\n","              # h_rev_long_np_pr = 1 / (np.array(h_long_list) + fee) - fee\n","              h_rev_long_np_pr = (1 / ((np.array(h_long_list) - 1) / config.lvrg_set.leverage + np.array(\n","                  long_fee_list) + 1) - np.array(long_fee_list) - 1) * config.lvrg_set.leverage + 1\n","\n","              long_h_rev_total_pr = np.cumprod(h_rev_long_np_pr)\n","              h_rev_long_wr = len(h_rev_long_np_pr[h_rev_long_np_pr > 1]) / len(\n","                  h_rev_long_np_pr[h_rev_long_np_pr != 1])\n","\n","              plt.subplot(gs[5])\n","              plt.plot(long_h_rev_total_pr)\n","              plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (\n","              h_rev_long_wr, np.min(h_rev_long_np_pr), long_h_rev_total_pr[-1], config.lvrg_set.leverage))\n","\n","              if show_plot:\n","                  plt.show()\n","\n","      except Exception as e:\n","          print('error in h_pr plot :', e)\n","\n","      print()\n","\n","      # ---------- to this line ---------- #\n","\n","    # print()\n","\n","\n","  # break # pair loop"]},{"cell_type":"code","source":["\n","def p_pr_plot(gs_, frq_dev_, res_df, pr_, rev_pr_, fontsize_):\n","    try:\n","        plt.subplot(gs_)\n","        plt.plot(frq_dev_)\n","\n","        title_msg = \"periodic_pr\\n acc_day : {:.4f}\\n month : {:.4f}\\n year : {:.4f}\\n rev_acc_day : {:.4f}\\n month : {:.4f}\\n year : {:.4f}\"\n","        len_df = len(res_df)\n","        plt.title(title_msg.format(*get_period_pr(len_df, pr_[-1]), *get_period_pr(len_df, rev_pr_[-1])), fontsize=fontsize_)\n","\n","    except Exception as e:\n","        print(\"error in p_pr_plot :\", e)\n","\n","    return"],"metadata":{"id":"ciUelfVkwZd_"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"jp-MarkdownHeadingCollapsed":true,"tags":[],"id":"Ksth13T0spcQ"},"source":["### check statistical significance"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pZlZCr2lspcR"},"outputs":[],"source":["# print(survey_df)\n","\n","plt.style.use('dark_background')\n","\n","title_name_list = [[\"total\", \"short\", \"long\"], [\"rev_total\", \"rev_short\", \"rev_long\"]]\n","survey_dfs_list = [[survey_df, short_survey_df, long_survey_df], [rev_survey_df, rev_short_survey_df, rev_long_survey_df]]\n","# title_name = \n","# survey_df_list = \n","\n","space_ = \" \" * 140\n","\n","for d_idx, (title_name, survey_dfs) in enumerate(zip(title_name_list, survey_dfs_list)):\n","\n","  fig = plt.figure(figsize=(30, 10))\n","\n","  gs = gridspec.GridSpec(nrows=1, # row 몇 개 \n","                          ncols=3, # col 몇 개 \n","                          # height_ratios=[1, 1, 1]\n","                        )\n","\n","  # gs = fig.add_gridspec(1, 3, wspace=0, hspace=0)\n","\n","  # nrows, ncols, h_r = 3, 3, [1, 1, 1]\n","  nrows, ncols, h_r = 3, 4, [1, 1, 1]\n","  # nrows, ncols, h_r = 4, 3, [1, 1, 1, 1]\n","\n","  # if d_idx == 0:\n","  # else:\n","    # nrows, ncols, h_r = 2, 2, [1, 1]\n","\n","  for gs_idx, (title, s_df) in enumerate(zip(title_name, survey_dfs)):  \n","\n","\n","    inner_gs = gs[gs_idx].subgridspec(nrows=nrows, # row 몇 개 \n","                          ncols=ncols, # col 몇 개 \n","                          height_ratios=h_r\n","                        )\n","\n","    for col_idx, s_cols in enumerate(s_df.columns):\n","      plt.subplot(inner_gs[col_idx])\n","      plt.plot(s_df[s_cols])\n","      plt.title(s_cols)\n","\n","  # plt.suptitle(\"total\" + \" \" * 140 + \"short\" + \" \" * 140 + \"long\")\n","  plt.suptitle(space_.join(title_name))\n","  plt.show()\n","  print(\"\\n\")"]},{"cell_type":"markdown","metadata":{"id":"Up1TNNxbfKbk","jp-MarkdownHeadingCollapsed":true,"tags":[]},"source":["#### fucntional res_plot()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YEruNXz_jYo4"},"outputs":[],"source":["# t_w_s = np.sum(np.where((np_zone_list == 't') & (np_pr > 1) & (np_side_list == 's'), 1, 0))\n","# t_w_s2 = np.sum(np.where((np_zone_list == 't') & (np_pr > 1) & (np_side_list in ['s']), 1, 0))\n","# t_w_s == t_w_s2\n","\n","# tc_zone_wl(np_zone_list, np_pr, np_side_list, zone=['l', 's'])\n","res_info(np_pr, tp_ratio_list, dr_list)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"WQ0ISsnIdwH7"},"outputs":[],"source":["def tc_zone_wl(np_zone_list, np_pr, np_side_list, zone=['l', 's']):  \n","\n","  t_w_s = np.sum(np.where((np_zone_list == 't') & (np_pr > 1) & (np_side_list in zone), 1, 0))\n","  c_w_s = np.sum(np.where((np_zone_list == 'c') & (np_pr > 1) & (np_side_list in zone), 1, 0))\n","  t_ls_s = np.sum(np.where((np_zone_list == 't') & (np_pr < 1) & (np_side_list in zone), 1, 0))\n","  c_ls_s = np.sum(np.where((np_zone_list == 'c') & (np_pr < 1) & (np_side_list in zone), 1, 0))\n","\n","  return t_w, c_w, t_ls, c_ls\n","\n","\n","def res_info(np_pr, tp_ratio_list, dr_list):\n","\n","  total_pr = np.cumprod(np_pr)\n","\n","  for_sum_pr = np_pr - 1\n","  for_sum_pr[0] = 1\n","  sum_pr = np.cumsum(for_sum_pr)\n","  sum_pr = np.where(sum_pr < 0, 0, sum_pr)\n","\n","  wr = len(np_pr[np_pr > 1]) / len(np_pr[np_pr != 1])\n","  \n","  total_rollmax_pr = np.maximum.accumulate(total_pr)\n","  total_acc_mdd = np.max((total_rollmax_pr - total_pr) / total_rollmax_pr)\n","  total_rollmax_sumpr = np.maximum.accumulate(sum_pr)\n","  total_sum_mdd = np.max((total_rollmax_sumpr - sum_pr) / total_rollmax_sumpr)\n","\n","  np_tp_ratio_list = np.array(tp_ratio_list) # 초기에 tr 을 정하는거라 mean 사용하는게 맞음\n","  mean_tr = np.mean(np_tp_ratio_list[np.isnan(np_tp_ratio_list) == 0])\n","\n","  np_dr_list = np.array(dr_list) # 초기에 tr 을 정하는거라 mean 사용하는게 맞음\n","  mean_dr = np.mean(np_dr_list[np.isnan(np_dr_list) == 0])\n","\n","  return total_pr, sum_pr, wr, total_acc_mdd, total_sum_mdd, mean_tr, mean_dr\n","\n","\n","# def res_plot(res_df, pr_list, zone_list, side_list, tp_ratio_list, dr_list, nontp_liqd_list, nontp_pr_list, config, liqd_list):\n","def res_plot():\n","\n","    fontsize = 10\n","    plt.style.use('default')\n","    # mpl.rcParams.update(mpl.rcParamsDefault)\n","\n","    fig = plt.figure(figsize=(14, 10))\n","\n","    gs = gridspec.GridSpec(nrows=3, # row 몇 개 \n","                            ncols=3, # col 몇 개 \n","                            height_ratios=[10, 10, 1]\n","                          )\n","    # plt.figure(figsize=(16, 12))\n","    # plt.figure(figsize=(12, 8))\n","    # plt.figure(figsize=(10, 6))\n","    plt.suptitle(key)\n","\n","    try:\n","      np_pr = np.array(pr_list)\n","\n","      sr = sharpe_ratio(np_pr)\n","\n","      dpf = (len(res_df) / 1440) / len(np_pr)\n","\n","      np_zone_list = np.array(zone_list)\n","      # np_pr_list = np.array(pr_list)\n","      np_side_list = np.array(side_list)\n","\n","      t_w = np.sum(np.where((np_zone_list == 't') & (np_pr > 1), 1, 0))\n","      c_w = np.sum(np.where((np_zone_list == 'c') & (np_pr > 1), 1, 0))\n","      t_ls = np.sum(np.where((np_zone_list == 't') & (np_pr < 1), 1, 0))\n","      c_ls = np.sum(np.where((np_zone_list == 'c') & (np_pr < 1), 1, 0))\n","\n","      # np_pr = (np.array(pr_list) - 1) * config.lvrg_set.leverage + 1\n","\n","      # ----- fake_pr ----- #\n","      # np_pr = np.where(np_pr > 1, 1 + (np_pr - 1) * 3, np_pr)\n","\n","      total_pr = np.cumprod(np_pr)\n","\n","      for_sum_pr = np_pr - 1\n","      for_sum_pr[0] = 1\n","      sum_pr = np.cumsum(for_sum_pr)\n","      sum_pr = np.where(sum_pr < 0, 0, sum_pr)\n","\n","      wr = len(np_pr[np_pr > 1]) / len(np_pr[np_pr != 1])\n","      \n","      total_rollmax_pr = np.maximum.accumulate(total_pr)\n","      total_acc_mdd = np.max((total_rollmax_pr - total_pr) / total_rollmax_pr)\n","      total_rollmax_sumpr = np.maximum.accumulate(sum_pr)\n","      total_sum_mdd = np.max((total_rollmax_sumpr - sum_pr) / total_rollmax_sumpr)\n","\n","      np_tp_ratio_list = np.array(tp_ratio_list) # 초기에 tr 을 정하는거라 mean 사용하는게 맞음\n","      mean_tr = np.mean(np_tp_ratio_list[np.isnan(np_tp_ratio_list) == 0])\n","\n","      np_dr_list = np.array(dr_list) # 초기에 tr 을 정하는거라 mean 사용하는게 맞음\n","      mean_dr = np.mean(np_dr_list[np.isnan(np_dr_list) == 0])\n","\n","      # pr_gap = (np_pr - 1) / config.lvrg_set.leverage + fee\n","      # tp_gap_ = pr_gap[pr_gap > 0]\n","      # # mean_config.tr_set.tp_gap = np.mean(pr_gap[pr_gap > 0])\n","      # mean_ls_gap = np.mean(pr_gap[pr_gap < 0])\n","\n","      # ---- profit fee ratio ---- #\n","      # mean_pgfr = np.mean((tp_gap_ - fee) / abs(tp_gap_ + fee))\n","\n","      plt.subplot(gs[0])\n","      plt.plot(total_pr)\n","      plt.plot(sum_pr, color='gold')\n","      if len(nontp_liqd_list) != 0:\n","        plt.title(\"wr : %.3f\\n len(td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (wr, len(np_pr[np_pr != 1]), dpf, np.min(np_pr), total_pr[-1], sum_pr[-1], sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (total_acc_mdd, total_sum_mdd, config.lvrg_set.leverage, min(liqd_list), mean_tr, mean_dr)  + \\\n","                  \"\\n nontp_liqd_cnt : %s\\nnontp_liqd : %.3f\\nontp_liqd_pr : %.3f\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_liqd_list), min(nontp_liqd_list), min(nontp_pr_list), t_w, c_w, t_ls, c_ls) ,\n","                  position=title_position, fontsize=fontsize)\n","      else:\n","        plt.title(\"wr : %.3f\\n len(td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\" \n","                  % (wr, len(np_pr[np_pr != 1]), dpf, np.min(np_pr), total_pr[-1], sum_pr[-1], sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (total_acc_mdd, total_sum_mdd, config.lvrg_set.leverage, min(liqd_list), mean_tr, mean_dr)  + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_liqd_list), t_w, c_w, t_ls, c_ls) ,\n","                  position=title_position, fontsize=fontsize)\n","      # plt.show()\n","\n","      survey_df.iloc[survey_i] = wr, sr, len(np_pr[np_pr != 1]), dpf, \\\n","        total_pr[-1], sum_pr[-1], total_acc_mdd, total_sum_mdd, min(liqd_list), np.min(np_pr), mean_tr, mean_dr\n","\n","      print('supblot231 passed')\n","\n","    except Exception as e:\n","      print(\"error in 231 :\", e)\n","\n","\n","    try:\n","      #         short only      #\n","      short_np_pr = np.array(short_list)\n","\n","      short_sr = sharpe_ratio(short_np_pr)\n","\n","      short_dpf = (len(res_df) / 1440) / len(short_np_pr)\n","\n","      short_total_pr = np.cumprod(short_np_pr)\n","      \n","      short_for_sum_pr = short_np_pr - 1\n","      short_for_sum_pr[0] = 1\n","      short_sum_pr = np.cumsum(short_for_sum_pr)\n","      short_sum_pr = np.where(short_sum_pr < 0, 0, short_sum_pr)\n","\n","      short_wr = len(short_np_pr[short_np_pr > 1]) / len(short_np_pr[short_np_pr != 1])\n","      \n","      t_w_s = np.sum(np.where((np_zone_list == 't') & (np_pr > 1) & (np_side_list == 's'), 1, 0))\n","      c_w_s = np.sum(np.where((np_zone_list == 'c') & (np_pr > 1) & (np_side_list == 's'), 1, 0))\n","      t_ls_s = np.sum(np.where((np_zone_list == 't') & (np_pr < 1) & (np_side_list == 's'), 1, 0))\n","      c_ls_s = np.sum(np.where((np_zone_list == 'c') & (np_pr < 1) & (np_side_list == 's'), 1, 0))\n","\n","      short_rollmax_pr = np.maximum.accumulate(short_total_pr)\n","      short_acc_mdd = np.max((short_rollmax_pr - short_total_pr) / short_rollmax_pr)\n","      short_rollmax_sumpr = np.maximum.accumulate(short_sum_pr)\n","      short_sum_mdd = np.max((short_rollmax_sumpr - short_sum_pr) / short_rollmax_sumpr)\n","\n","      np_short_tp_ratio_list = np.array(short_tp_ratio_list)\n","      mean_short_tr = np.mean(np_short_tp_ratio_list[np.isnan(np_short_tp_ratio_list) == 0])\n","      \n","      np_short_dr_list = np.array(short_dr_list)\n","      mean_short_dr = np.mean(np_short_dr_list[np.isnan(np_short_dr_list) == 0])\n","      \n","      # short_pr_gap = (short_np_pr - 1) / config.lvrg_set.leverage + fee\n","      # short_tp_gap = short_pr_gap[short_pr_gap > 0]\n","      # # mean_short_tp_gap = np.mean(short_pr_gap[short_pr_gap > 0])\n","      # # mean_short_ls_gap = np.mean(short_pr_gap[short_pr_gap < 0])\n","\n","      # mean_short_pgfr = np.mean((short_tp_gap - fee) / abs(short_tp_gap + fee))\n","      \n","      # plt.subplot(232)\n","      plt.subplot(gs[1])\n","      plt.plot(short_total_pr)\n","      plt.plot(short_sum_pr, color='gold')\n","      if len(nontp_short_liqd_list) != 0:   \n","\n","        max_nontp_short_term = len(res_df) - nontp_short_indexs[0]\n","        \n","        plt.title(\"wr : %.3f\\nlen(short_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (short_wr, len(short_np_pr[short_np_pr != 1]), short_dpf, np.min(short_np_pr), short_total_pr[-1], short_sum_pr[-1], short_sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (short_acc_mdd, short_sum_mdd, config.lvrg_set.leverage, min(short_liqd_list), mean_short_tr, mean_short_dr) + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n nontp_liqd : %.3f\\n nontp_liqd_pr : %.3f\\n max_nontp_term : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_short_liqd_list), min(nontp_short_liqd_list), min(nontp_short_pr_list), max_nontp_short_term, t_w_s, c_w_s, t_ls_s, c_ls_s) ,\n","                  position=title_position, fontsize=fontsize)\n","      else:\n","        plt.title(\"wr : %.3f\\nlen(short_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (short_wr, len(short_np_pr[short_np_pr != 1]), short_dpf, np.min(short_np_pr), short_total_pr[-1], short_sum_pr[-1], short_sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (short_acc_mdd, short_sum_mdd, config.lvrg_set.leverage, min(short_liqd_list), mean_short_tr, mean_short_dr) + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_short_liqd_list), t_w_s, c_w_s, t_ls_s, c_ls_s),\n","                  position=title_position, fontsize=fontsize)\n","   \n","      short_survey_df.iloc[survey_i] = short_wr, short_sr, len(short_np_pr[short_np_pr != 1]), short_dpf, \\\n","        short_total_pr[-1], short_sum_pr[-1], short_acc_mdd, short_sum_mdd, min(short_liqd_list), np.min(short_np_pr), mean_short_tr, mean_short_dr\n","        \n","      print('supblot232 passed')\n","    \n","    except Exception as e:\n","      print(\"error in 232 :\", e)\n","\n","    try:\n","      #         long only      #\n","      long_np_pr = np.array(long_list)\n","      # long_np_pr = (np.array(long_list) - 1) * config.lvrg_set.leverage + 1\n","\n","      long_sr = sharpe_ratio(long_np_pr)\n","\n","      long_dpf = (len(res_df) / 1440) / len(long_np_pr)\n","\n","      long_total_pr = np.cumprod(long_np_pr)\n","      \n","      long_for_sum_pr = long_np_pr - 1\n","      long_for_sum_pr[0] = 1\n","      long_sum_pr = np.cumsum(long_for_sum_pr)\n","      long_sum_pr = np.where(long_sum_pr < 0, 0, long_sum_pr)\n","\n","      long_wr = len(long_np_pr[long_np_pr > 1]) / len(long_np_pr[long_np_pr != 1])\n","\n","      t_w_l = np.sum(np.where((np_zone_list == 't') & (np_pr > 1) & (np_side_list == 'l'), 1, 0))\n","      c_w_l = np.sum(np.where((np_zone_list == 'c') & (np_pr > 1) & (np_side_list == 'l'), 1, 0))\n","      t_ls_l = np.sum(np.where((np_zone_list == 't') & (np_pr < 1) & (np_side_list == 'l'), 1, 0))\n","      c_ls_l = np.sum(np.where((np_zone_list == 'c') & (np_pr < 1) & (np_side_list == 'l'), 1, 0))\n","\n","      long_rollmax_pr = np.maximum.accumulate(long_total_pr)\n","      long_acc_mdd = np.max((long_rollmax_pr - long_total_pr) / long_rollmax_pr)\n","      long_rollmax_sumpr = np.maximum.accumulate(long_sum_pr)\n","      long_sum_mdd = np.max((long_rollmax_sumpr - long_sum_pr) / long_rollmax_sumpr)\n","\n","      np_long_tp_ratio_list = np.array(long_tp_ratio_list)\n","      mean_long_tr = np.mean(np_long_tp_ratio_list[np.isnan(np_long_tp_ratio_list) == 0])\n","      \n","      np_long_dr_list = np.array(long_dr_list)\n","      mean_long_dr = np.mean(np_long_dr_list[np.isnan(np_long_dr_list) == 0])\n","\n","      # long_pr_gap = (long_np_pr - 1) / config.lvrg_set.leverage + fee\n","      # long_tp_gap = long_pr_gap[long_pr_gap > 0]\n","      # # mean_long_tp_gap = np.mean(long_pr_gap[long_pr_gap > 0])\n","      # # mean_long_ls_gap = np.mean(long_pr_gap[long_pr_gap < 0])\n","\n","      # mean_long_pgfr = np.mean((long_tp_gap - fee) / abs(long_tp_gap + fee))\n","\n","      plt.subplot(gs[2])\n","      plt.plot(long_total_pr)\n","      plt.plot(long_sum_pr, color='gold')\n","      if len(nontp_long_liqd_list) != 0:\n","\n","        max_nontp_long_term = len(res_df) - nontp_long_indexs[0]\n","\n","        plt.title(\"wr : %.3f\\nlen(long_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (long_wr, len(long_np_pr[long_np_pr != 1]), long_dpf, np.min(long_np_pr), long_total_pr[-1], long_sum_pr[-1], long_sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (long_acc_mdd, long_sum_mdd, config.lvrg_set.leverage, min(long_liqd_list), mean_long_tr, mean_long_dr)  + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n nontp_liqd : %.3f\\n nontp_liqd_pr : %.3f\\n max_nontp_term : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_long_liqd_list), min(nontp_long_liqd_list), min(nontp_long_pr_list), max_nontp_long_term, t_w_l, c_w_l, t_ls_l, c_ls_l) ,\n","                  position=title_position, fontsize=fontsize)\n","      else:\n","        plt.title(\"wr : %.3f\\nlen(long_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (long_wr, len(long_np_pr[long_np_pr != 1]), long_dpf, np.min(long_np_pr), long_total_pr[-1], long_sum_pr[-1], long_sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (long_acc_mdd, long_sum_mdd, config.lvrg_set.leverage, min(long_liqd_list), mean_long_tr, mean_long_dr) + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_long_liqd_list), t_w_l, c_w_l, t_ls_l, c_ls_l),\n","                  position=title_position, fontsize=fontsize)\n","\n","      long_survey_df.iloc[survey_i] = long_wr, long_sr, len(long_np_pr[long_np_pr != 1]), long_dpf, \\\n","        long_total_pr[-1], long_sum_pr[-1], long_acc_mdd, long_sum_mdd, min(long_liqd_list), np.min(long_np_pr), mean_long_tr, mean_long_dr\n","\n","      print('supblot233 passed')\n","\n","    except Exception as e:\n","      print(\"error in 233 :\", e)\n","\n","\n","    try:\n","      #     reversion adjustment      #\n","      # rev_np_pr = 1 / (np.array(pr_list) + fee) - fee\n","      rev_fee = tp_fee + out_fee - np.array(fee_list)\n","      rev_np_pr = (1 / ((np.array(pr_list) - 1) / config.lvrg_set.leverage + np.array(fee_list) + 1) - rev_fee - 1) * config.lvrg_set.leverage + 1\n","      # rev_np_pr = (1 / (np.array(pr_list) + fee) - fee - 1) * config.lvrg_set.leverage + 1\n","          \n","      rev_sr = sharpe_ratio(rev_np_pr)\n","\n","      rev_total_pr = np.cumprod(rev_np_pr)\n","      rev_wr = len(rev_np_pr[rev_np_pr > 1]) / len(rev_np_pr[rev_np_pr != 1])\n","\n","      rev_total_for_sum_pr = rev_np_pr - 1\n","      rev_total_for_sum_pr[0] = 1\n","      rev_total_sum_pr = np.cumsum(rev_total_for_sum_pr)\n","      rev_total_sum_pr = np.where(rev_total_sum_pr < 0, 0, rev_total_sum_pr)\n","\n","      rev_rollmax_pr = np.maximum.accumulate(rev_total_pr)\n","      rev_acc_mdd = np.max((rev_rollmax_pr - rev_total_pr) / rev_rollmax_pr)\n","      rev_rollmax_sumpr = np.maximum.accumulate(rev_total_sum_pr)\n","      rev_sum_mdd = np.max((rev_rollmax_sumpr - rev_total_sum_pr) / rev_rollmax_sumpr)\n","\n","      plt.subplot(gs[3])\n","\n","      plt.plot(rev_total_pr)\n","      plt.plot(rev_total_sum_pr, color='gold')\n","\n","      plt.title(\"wr : %.3f\\n sr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n min_pr : %.3f\" \n","                % (rev_wr, rev_sr, rev_total_pr[-1], rev_total_sum_pr[-1], \n","                   rev_acc_mdd, rev_sum_mdd, np.min(rev_np_pr)), fontsize=fontsize)\n","      \n","      rev_survey_df.iloc[survey_i] = rev_wr, rev_sr, rev_total_pr[-1], rev_total_sum_pr[-1], rev_acc_mdd, rev_sum_mdd, np.min(rev_np_pr)\n","\n","    except Exception as e:\n","      print(\"error in 234 :\", e)\n","\n","    try:\n","      #         short       #\n","      # rev_short_np_pr = 1 / (np.array(short_list) + fee) - fee\n","      rev_short_fee = tp_fee + out_fee - np.array(short_fee_list)\n","      rev_short_np_pr = (1 / ((np.array(short_list) - 1) / config.lvrg_set.leverage + np.array(short_fee_list) + 1) - rev_short_fee - 1) * config.lvrg_set.leverage + 1\n","      # rev_short_np_pr = (1 / (np.array(short_list) + fee) - fee - 1) * config.lvrg_set.leverage + 1\n","      \n","      rev_short_sr = sharpe_ratio(rev_short_np_pr)\n","          \n","      short_rev_total_pr = np.cumprod(rev_short_np_pr)\n","      rev_short_wr = len(rev_short_np_pr[rev_short_np_pr > 1]) / len(rev_short_np_pr[rev_short_np_pr != 1])\n","\n","      rev_short_for_sum_pr = rev_short_np_pr - 1\n","      rev_short_for_sum_pr[0] = 1\n","      short_rev_sum_pr = np.cumsum(rev_short_for_sum_pr)\n","      short_rev_sum_pr = np.where(short_rev_sum_pr < 0, 0, short_rev_sum_pr)\n","\n","      short_rev_rollmax_pr = np.maximum.accumulate(short_rev_total_pr)\n","      short_rev_acc_mdd = np.max((short_rev_rollmax_pr - short_rev_total_pr) / short_rev_rollmax_pr)\n","      short_rev_rollmax_sumpr = np.maximum.accumulate(short_rev_sum_pr)\n","      short_rev_sum_mdd = np.max((short_rev_rollmax_sumpr - short_rev_sum_pr) / short_rev_rollmax_sumpr)\n","\n","      plt.subplot(gs[4])\n","\n","      plt.plot(short_rev_total_pr)\n","      plt.plot(short_rev_sum_pr, color='gold')\n","\n","      plt.title(\"wr : %.3f\\n sr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n min_pr : %.3f\" \n","                % (rev_short_wr, rev_short_sr, short_rev_total_pr[-1], short_rev_sum_pr[-1], \n","                   short_rev_acc_mdd, short_rev_sum_mdd, np.min(rev_short_np_pr)), fontsize=fontsize)\n","      \n","      rev_short_survey_df.iloc[survey_i] = rev_short_wr, rev_short_sr, short_rev_total_pr[-1], short_rev_sum_pr[-1], short_rev_acc_mdd, short_rev_sum_mdd, np.min(rev_short_np_pr)\n","\n","    except Exception as e:\n","      print(\"error in 235 :\", e)\n","\n","    try:\n","      #         long       #\n","      # rev_long_np_pr = 1 / (np.array(long_list) + fee) - fee\n","      rev_long_fee = tp_fee + out_fee - np.array(long_fee_list)\n","      rev_long_np_pr = (1 / ((np.array(long_list) - 1) / config.lvrg_set.leverage + np.array(long_fee_list) + 1) - rev_long_fee - 1) * config.lvrg_set.leverage + 1\n","          \n","      rev_long_sr = sharpe_ratio(rev_long_np_pr)\n","\n","      long_rev_total_pr = np.cumprod(rev_long_np_pr)\n","      rev_long_wr = len(rev_long_np_pr[rev_long_np_pr > 1]) / len(rev_long_np_pr[rev_long_np_pr != 1])\n","\n","      rev_long_for_sum_pr = rev_long_np_pr - 1\n","      rev_long_for_sum_pr[0] = 1\n","      long_rev_sum_pr = np.cumsum(rev_long_for_sum_pr)\n","      long_rev_sum_pr = np.where(long_rev_sum_pr < 0, 0, long_rev_sum_pr)\n","\n","      long_rev_rollmax_pr = np.maximum.accumulate(long_rev_total_pr)\n","      long_rev_acc_mdd = np.max((long_rev_rollmax_pr - long_rev_total_pr) / long_rev_rollmax_pr)\n","      long_rev_rollmax_sumpr = np.maximum.accumulate(long_rev_sum_pr)\n","      long_rev_sum_mdd = np.max((long_rev_rollmax_sumpr - long_rev_sum_pr) / long_rev_rollmax_sumpr)\n","\n","      plt.subplot(gs[5])\n","\n","      plt.plot(long_rev_total_pr)\n","      plt.plot(long_rev_sum_pr, color='gold')\n","\n","      plt.title(\"wr : %.3f\\n sr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n min_pr : %.3f\" \n","                % (rev_long_wr, rev_long_sr, long_rev_total_pr[-1], long_rev_sum_pr[-1], \n","                   long_rev_acc_mdd, long_rev_sum_mdd, np.min(rev_long_np_pr)), fontsize=fontsize)\n","      \n","      rev_long_survey_df.iloc[survey_i] = rev_long_wr, rev_long_sr, long_rev_total_pr[-1], long_rev_sum_pr[-1], long_rev_acc_mdd, long_rev_sum_mdd, np.min(rev_long_np_pr)\n","      \n","    except Exception as e:\n","      print(\"error in 236 :\", e)\n","\n","    if show_plot:\n","      \n","      frq_dev, s_frq_dev, l_frq_dev = frq_dev_plot(res_df, trade_list, side_list, plot=False)      \n","      plt.subplot(gs[6])\n","      plt.plot(frq_dev)\n","\n","      plt.subplot(gs[7])\n","      plt.plot(s_frq_dev)\n","\n","      plt.subplot(gs[8])\n","      plt.plot(l_frq_dev)\n","\n","      plt.show()\n","    \n","\n","    try:\n","\n","      h_np_pr = np.array(h_pr_list)\n","      # h_rev_np_pr = 1 / (np.array(h_pr_list) + fee) - fee    # define, for plot_check below cell\n","      h_rev_np_pr = (1 / ((np.array(h_pr_list) - 1) / config.lvrg_set.leverage + np.array(fee_list) + 1) - np.array(fee_list) - 1) * config.lvrg_set.leverage + 1\n","\n","      # --------------------- h pr plot --------------------- #\n","      if len(h_np_pr[h_np_pr != 1]) != 0:\n","\n","        plt.figure(figsize=(16, 12))\n","        plt.suptitle(key + \" hedge\")\n","\n","        h_total_pr = np.cumprod(h_np_pr)\n","        h_wr = len(h_np_pr[h_np_pr > 1]) / len(h_np_pr[h_np_pr != 1])\n","\n","        plt.subplot(gs[0])\n","\n","        plt.plot(h_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_wr, np.min(h_np_pr), h_total_pr[-1], config.lvrg_set.leverage))\n","        # plt.show()\n","\n","        #         short only      #\n","        h_short_np_pr = np.array(h_short_list)\n","\n","        short_h_total_pr = np.cumprod(h_short_np_pr)\n","        h_short_wr = len(h_short_np_pr[h_short_np_pr > 1]) / len(h_short_np_pr[h_short_np_pr != 1])\n","        \n","        plt.subplot(gs[1])\n","        plt.plot(short_h_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_short_wr, np.min(h_short_np_pr), short_h_total_pr[-1], config.lvrg_set.leverage))\n","\n","        #         long only      #\n","        h_long_np_pr = np.array(h_long_list)\n","\n","        long_h_total_pr = np.cumprod(h_long_np_pr)\n","        h_long_wr = len(h_long_np_pr[h_long_np_pr > 1]) / len(h_long_np_pr[h_long_np_pr != 1])\n","        \n","        plt.subplot(gs[2])\n","        plt.plot(long_h_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_long_wr, np.min(h_long_np_pr), long_h_total_pr[-1], config.lvrg_set.leverage))\n","\n","\n","        #     reversion adjustment      #\n","            \n","        h_rev_total_pr = np.cumprod(h_rev_np_pr)\n","        h_rev_wr = len(h_rev_np_pr[h_rev_np_pr > 1]) / len(h_rev_np_pr[h_rev_np_pr != 1])\n","\n","        plt.subplot(gs[3])\n","        plt.plot(h_rev_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_rev_wr, np.min(h_rev_np_pr), h_rev_total_pr[-1], config.lvrg_set.leverage))\n","\n","        #         short       #\n","        # h_rev_short_np_pr = 1 / (np.array(h_short_list) + fee) - fee\n","        h_rev_short_np_pr =  (1 / ((np.array(h_short_list) - 1) / config.lvrg_set.leverage + np.array(short_fee_list) + 1) - np.array(short_fee_list) - 1) * config.lvrg_set.leverage + 1\n","           \n","        short_h_rev_total_pr = np.cumprod(h_rev_short_np_pr)\n","        h_rev_short_wr = len(h_rev_short_np_pr[h_rev_short_np_pr > 1]) / len(h_rev_short_np_pr[h_rev_short_np_pr != 1])\n","\n","        plt.subplot(gs[4])\n","        plt.plot(short_h_rev_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_rev_short_wr, np.min(h_rev_short_np_pr), short_h_rev_total_pr[-1], config.lvrg_set.leverage))\n","\n","        #         long       #\n","        # h_rev_long_np_pr = 1 / (np.array(h_long_list) + fee) - fee\n","        h_rev_long_np_pr =  (1 / ((np.array(h_long_list) - 1) / config.lvrg_set.leverage + np.array(long_fee_list) + 1) - np.array(long_fee_list) - 1) * config.lvrg_set.leverage + 1\n","            \n","        long_h_rev_total_pr = np.cumprod(h_rev_long_np_pr)\n","        h_rev_long_wr = len(h_rev_long_np_pr[h_rev_long_np_pr > 1]) / len(h_rev_long_np_pr[h_rev_long_np_pr != 1])\n","\n","        plt.subplot(gs[5])\n","        plt.plot(long_h_rev_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_rev_long_wr, np.min(h_rev_long_np_pr), long_h_rev_total_pr[-1], config.lvrg_set.leverage))\n","        \n","        if show_plot:\n","          plt.show()\n","          \n","    except Exception as e:\n","      print('error in h_pr plot :', e)   "]},{"cell_type":"markdown","metadata":{"jp-MarkdownHeadingCollapsed":true,"tags":[],"id":"zQ-roiifspcX"},"source":["#### ep_loc.point & zone legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Js5eL87VspcX"},"outputs":[],"source":["\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 (res_df['close'] < res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(strat_version)] - 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] >= res_df['bb_lower_1m']) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['bb_lower_1m']) &\n","    #                 (res_df['close'] < res_df['bb_lower_1m'])\n","    #                 , res_df['entry_{}'.format(strat_version)] - 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   (res_df['close'] > res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(strat_version)] + 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] <= res_df['bb_upper_1m']) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['bb_upper_1m']) &\n","    #                   (res_df['close'] > res_df['bb_upper_1m'])\n","    #                 , res_df['entry_{}'.format(strat_version)] + 1, res_df['entry_{}'.format(strat_version)])\n","\n","\n","    \n","   # --------------- ema --------------- #   \n","  # res_df['ema5_1m'] = ema(res_df['close'], 5).shift(1)\n","\n","  #   # --------------- cloud bline --------------- #   \n","  # res_df['cloud_bline_1m'] = cloud_bline(res_df, 26).shift(1)\n","  \n","    #       stochastic      #\n","  # res_df['stoch'] = stoch(res_df, 5, 3, 3)\n","\n","    #       fisher      #\n","  # res_df['fisher30'] = fisher(res_df, 30)\n","  # res_df['fisher60'] = fisher(res_df, 60)\n","  # res_df['fisher120'] = fisher(res_df, 120)\n","\n","    #       cctbbo      #\n","  # res_df['cctbbo'], _ = cct_bbo(res_df, 21, 13)\n","\n","    #       ema_roc      #\n","  # res_df['ema_roc'] = ema_roc(res_df['close'], 13, 9)\n","\n","\n","   # ------------------------------ htf data ------------------------------ #    \n","\n","  #             Todo              #\n","  # htf_df = pd.read_excel(date_path2 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # htf_df = pd.read_excel(date_path3 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # htf_df = pd.read_excel(date_path4 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # htf_df = pd.read_excel(date_path5 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # # # # htf_df = pd.read_excel(date_path6 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","\n","  # # ---- htf index slicing ---- #\n","  # htf_df = htf_df.loc[:res_df.index[-1]]\n","  \n","  # print(\"res_df.index[-1] :\", res_df.index[-1])\n","  # print(\"htf_df.index[-1] :\", htf_df.index[-1])\n","\n","  # res_df = dc_line(res_df, htf_df, '5m')\n","  # res_df = dc_level(res_df, '5m', 1)\n","\n","\n","  # # # if \"sma4\" in res_df.columns:\n","  # # #   res_df.drop(\"sma4\", axis=1, inplace=1)\n","\n","  # # htf_df['sma'] = htf_df['close'].rolling(60).mean()\n","  # # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, htf_df, [-1]), columns=['sma_30m']))\n","  \n","  # htf_df['stoch'] = stoch(htf_df, 13, 3, 3)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, htf_df, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","   \n","  # fifth_df['ema'] = ema(fifth_df['close'], 5)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, fifth_df, [-1]), columns=['ema5']))\n","\n","        # ------------------------------------ short ------------------------------------ # \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 0:\n","        #   mr_score += 1          \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_upper_1m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_upper_3m'].iloc[i] <= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_upper_5m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == 'MARKET':\n","        #   mr_const_cnt += 1\n","        #   if (res_df['close'].iloc[i] - res_df['short_tp'].iloc[i]) / (res_df['short_out'].iloc[i] - res_df['close'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error):  \n","        #     mr_score += 1\n","\n","           \n","        # ------- entry once ------- #   \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == 1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == -1:\n","        #     prev_entry_cnt += 1          \n","        # # # print(\"prev_entry_cnt :\", prev_entry_cnt)\n","\n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] < res_df['bb_lower_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_lower2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_base_1h'].iloc[i]:\n","\n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] < res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","  \n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['low'].iloc[i] > res_df['short_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1\n","\n","\n","\n","        # ------------------------------------ long ------------------------------------ # \n","          \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 1:\n","        #   mr_score += 1   \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 1:\n","        #   mr_score += 1     \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 1:\n","          # mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_lower_1m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_lower_3m'].iloc[i] >= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_lower_5m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == \"MARKET\":\n","          # mr_const_cnt += 1        \n","          # if (res_df['long_tp'].iloc[i] - res_df['close'].iloc[i]) / (res_df['close'].iloc[i] - res_df['long_out'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error): # 일반적으로 dr 상에서 tp 비율이 더 커짐 (tr 보다)\n","          #   mr_score += 1\n","\n","        # -------------- ep limit -------------- #    \n","        # mr_const_cnt += 1\n","        # # if (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # if config.ep_set.min_eplim_pct < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # # if 0 < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        #   # if res_df['st_gap_15m'].iloc[i] / res_df['open'].iloc[i] < 0:\n","        #   #   print(\"i, res_df['st_gap_15m'].iloc[i] :\", i, res_df['st_gap_15m'].iloc[i])\n","        #   mr_score += 1\n","\n","\n","        # -------------- entry once -------------- #    \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == -1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == 1:\n","        #     prev_entry_cnt += 1\n","          \n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","          \n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] > res_df['bb_upper_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_upper2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_base_1h'].iloc[i]:\n","        \n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] > res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","\n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['high'].iloc[i] < res_df['long_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","          \n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1"]},{"cell_type":"markdown","metadata":{"id":"JNQxkb06ZdTe"},"source":["## plot_check_v2"]},{"cell_type":"code","source":["# ------------------ plot_config ------------------ #\n","save_plot = 0\n","tf_plot = 1       # true - false plot\n","pr_descend = 1    # 1 -> 내림차순\n","position = 1      # -1 / 1, 0 (short / long)\n","front_plot = 0    # ide -> 1 / logic 검수 -> 0  \"limit plot_range til loc_set idx = replacing x_max value\"\n","# pr_sort = 1     # -> default 1,  이상한 체결 확인하기 좋음\n","# wl_case = 1     # 1 / -1 / 0 (win loss study) --> oid\n","\n","x_max = 500\n","x_margin = x_max / 30\n","\n","prev_plotsize = 130\n","post_plotsize = 120\n","\n","inversion = 0\n","hedge = 0\n","\n","if save_plot:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".ftr\", \"\")\n","  try:\n","    os.mkdir(plot_check_dir)\n","  except:\n","    # ------ remove existing dir ------ #\n","    shutil.rmtree(plot_check_dir)\n","    print(plot_check_dir, 'removed !')\n","    os.mkdir(plot_check_dir)\n","    # pass\n","\n","# ------------ 한 방향에 대해 plot_check 함 (by position var.) ------------ #\n","#   obj by position  \n","if position == -1:\n","  pos_str = \"SELL\"\n","  pr, obj, lvrg_arr, fee_arr = sort_bypr_v2(short_pr, short_obj, short_lvrg_arr, short_fee_arr, descending=pr_descend)\n","else:   # both option currently not supported\n","  pos_str = \"BUY\"\n","  pr, obj, lvrg_arr, fee_arr = sort_bypr_v2(long_pr, long_obj, long_lvrg_arr, long_fee_arr, descending=pr_descend)\n","\n","pr_msg = \"%s\\n {} ~ {} -> {:.5f}\\n lvrg : {}\\n fee : {:.4f}\" % (pos_str)  # pos_str 으로 이곳에서 정의함\n","\n","# ------------------ data chunknize ------------------ #\n","left_end_idx = obj[2] - prev_plotsize\n","right_end_idx = obj[3] + post_plotsize\n","\n","np_plot_params = np.hstack((left_end_idx, right_end_idx, pr, *obj, lvrg_arr, fee_arr))[np.sum(left_end_idx < 0):]\n","np_df = res_df.to_numpy()"],"metadata":{"id":"A6QSF9COaHO5","executionInfo":{"status":"ok","timestamp":1645833134024,"user_tz":-540,"elapsed":832,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["plot_col_list = []\n","# ------ set period ------ #\n","dc_interval = '1m'\n","hdc_interval = '5m'\n","hhdc_interval = '15m'\n","\n","bb_interval = dc_interval\n","hbb_interval = hdc_interval\n","hhbb_interval = hhdc_interval\n","\n","# ------ add_col, alpha, color, linewidth ------ #\n","plot_col_list.append([['hopen_15T', 'hclose_15T'], 1, '#ffffff', 2])\n","plot_col_list.append([['hopen_H', 'hclose_H'], 1, '#ffffff', 4])\n","\n","plot_col_list.append([['dc_upper_%s' % dc_interval, 'dc_lower_%s' % dc_interval], 1, '#ffeb3b', 1])\n","plot_col_list.append([['dc_upper_%s' % hdc_interval, 'dc_lower_%s' % hdc_interval], 1, '#e65100', 2])\n","plot_col_list.append([['dc_upper_%s' % hhdc_interval, 'dc_lower_%s' % hhdc_interval], 1, '#c2185b', 4])\n","\n","plot_col_list.append([['bb_upper_%s' % bb_interval, 'bb_lower_%s' % bb_interval], 1, '#ffffff', 1])\n","plot_col_list.append([['bb_upper_%s' % hbb_interval, 'bb_lower_%s' % hbb_interval], 1, '#ff00ff', 2])\n","plot_col_list.append([['bb_upper_%s' % hhbb_interval, 'bb_lower_%s' % hhbb_interval], 1, '#3179f5', 4])\n","\n","plot_col_list.append([['ema_5m'], 1, '#03ed30', 4])\n","\n","# st_list = ['st_base_%s' % hhdc_interval, 'st_upper_%s' % hhdc_interval, 'st_lower_%s' % hhdc_interval]\n","plot_col_arr = np.array(plot_col_list)\n","plot_col_arr[:, 0] = [get_col_idxs(res_df, col_) for col_ in plot_col_arr[:, 0]]   # str_col to number\n","\n","# ------------ make col_idx_dict config ------------ #\n","col_idx_dict = \\\n","{\n","  \"ohlc_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close']),\n","  \"step_col_info\": plot_col_arr\n","}"],"metadata":{"id":"FnSydxFXn_f9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1645833135240,"user_tz":-540,"elapsed":2,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"ed852b22-a544-4228-d951-6115b4aa6939"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:26: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n"]}]},{"cell_type":"code","source":[" def col_step_plot(np_col, alpha=1, color='#ffffff', linewidth=2):\n","  # assert np_col.shape[-1] == 2, \"assert np_col.shape[-1] == 2\"\n","  try:\n","    plt.step(np.arange(len(np_col)), np_col, alpha=alpha, color=color, linewidth=linewidth)\n","  except Exception as e:\n","    print(\"error in col_step_plot :\", e)\n","\n","\n","def col_fillbw_plot(np_col, alpha=1, color='#ffffff', linewidth=2):\n","  # assert np_col.shape[-1] == 2, \"assert np_col.shape[-1] == 2\"\n","  try:\n","    plt.step(np.arange(len(np_col)), np_col, alpha=alpha, color=color, linewidth=linewidth)\n","  except Exception as e:\n","    print(\"error in col_fillbw_plot :\", e)\n","\n","\n"," def plot_check(data, iin, iout, pr, open_idx, ep, tp, entry_idx, exit_idx, lvrg, fee, pr_msg, x_max, x_margin, front_plot, **col_idx_dict):\n","  # start_0 = time.time()\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(30, 18))\n","  gs = gridspec.GridSpec(nrows=2,  # row 몇 개\n","                         ncols=2,  # col 몇 개\n","                         height_ratios=[3, 1]\n","                         )\n","\n","  ax = fig.add_subplot(gs[0])\n","  # ax = fig.add_subplot(gs[odds - 1])\n","\n","  # ------------ add_col section ------------ #\n","  a_data = data[int(iin):int(iout)]\n","  # a_data = data[iin:iout]\n","  # ------ candles ------ #\n","  candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax)\n","\n","  # [col_step_plot(a_data[:, hoc_col_idxs], square=sq) for (hoc_col_idxs, sq) in zip(col_idx_dict['hoc_col_idxs_list'], np.arange(3) + 1)]\n","  [col_step_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n"," \n","  #     Todo    # \n","  # # ------ ema ------ #\n","  # col_step_plot(a_data[:, hoc_col_idxs]) \n","\n","  # ------ ep, tp ------ #\n","  ep_tick = eptp_hvline(ep, tp, entry_idx, exit_idx, prev_plotsize)\n","  \n","  #     Todo    #\n","  #     2. y_lim by norm_range_cols\n","\n","  if front_plot:\n","    x_max = ep_tick\n","  if (iout - iin) > x_max:\n","    plt.xlim(0 - x_margin, x_max + x_margin)\n","\n","  # ------ check pr ------ #\n","  # if not config.lvrg_set.static_lvrg:\n","  plt.title(pr_msg.format(entry_idx, exit_idx, pr, lvrg, fee))\n","  plt.show()\n","  plt.close()\n","  # print(\"elapsed time :\", time.time() - start_0)"],"metadata":{"id":"ESReTMpP7SoO","executionInfo":{"status":"ok","timestamp":1645834676639,"user_tz":-540,"elapsed":3,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"execution_count":27,"outputs":[]},{"cell_type":"code","source":["[plot_check(np_df, *np_plot_param_, pr_msg, x_max, x_margin, front_plot, **col_idx_dict) for np_plot_param_ in np_plot_params]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"Roy40BmByyZc","executionInfo":{"status":"error","timestamp":1645834695248,"user_tz":-540,"elapsed":17326,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"d69042a2-29f9-4705-9231-f92b78b9bcdd"},"execution_count":28,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 2160x1296 with 1 Axes>"]},"metadata":{}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 2160x1296 with 1 Axes>"]},"metadata":{}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 2160x1296 with 1 Axes>"]},"metadata":{}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 2160x1296 with 1 Axes>"]},"metadata":{}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 2160x1296 with 1 Axes>"]},"metadata":{}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 2160x1296 with 1 Axes>"]},"metadata":{}},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-28-55c21400bc90>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;34m[\u001b[0m\u001b[0mplot_check\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp_df\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0mnp_plot_param_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpr_msg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_margin\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfront_plot\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcol_idx_dict\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mnp_plot_param_\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mnp_plot_params\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-28-55c21400bc90>\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;34m[\u001b[0m\u001b[0mplot_check\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp_df\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0mnp_plot_param_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpr_msg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_margin\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfront_plot\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcol_idx_dict\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mnp_plot_param_\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mnp_plot_params\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-27-20cb0ff02c21>\u001b[0m in \u001b[0;36mplot_check\u001b[0;34m(data, iin, iout, pr, ep, tp, entry_idx, exit_idx, lvrg, fee, pr_msg, x_max, x_margin, front_plot, **col_idx_dict)\u001b[0m\n\u001b[1;32m     31\u001b[0m  \u001b[0;31m# a_data = data[iin:iout]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     32\u001b[0m  \u001b[0;31m# ------ candles ------ #\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 33\u001b[0;31m  \u001b[0mcandle_plot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma_data\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol_idx_dict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'ohlc_col_idxs'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     34\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     35\u001b[0m  \u001b[0;31m# [col_step_plot(a_data[:, hoc_col_idxs], square=sq) for (hoc_col_idxs, sq) in zip(col_idx_dict['hoc_col_idxs_list'], np.arange(3) + 1)]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/content/drive/My Drive/Colab Notebooks/JnQ/funcs/funcs_plot_check.py\u001b[0m in \u001b[0;36mcandle_plot\u001b[0;34m(ohlc_np, ax)\u001b[0m\n\u001b[1;32m     80\u001b[0m   \u001b[0mindex\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mohlc_np\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     81\u001b[0m   \u001b[0mcandle\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhstack\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mohlc_np\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 82\u001b[0;31m   \u001b[0mmf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcandlestick_ohlc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcandle\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwidth\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.5\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolorup\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'#26a69a'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolordown\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'#ef5350'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0malpha\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     83\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     84\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/content/drive/My Drive/Colab Notebooks/JnQ/mpl_finance/mpl_finance.py\u001b[0m in \u001b[0;36mcandlestick_ohlc\u001b[0;34m(ax, quotes, width, colorup, colordown, alpha)\u001b[0m\n\u001b[1;32m    249\u001b[0m     return _candlestick(ax, quotes, width=width, colorup=colorup,\n\u001b[1;32m    250\u001b[0m                         \u001b[0mcolordown\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcolordown\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 251\u001b[0;31m                         alpha=alpha, ochl=False)\n\u001b[0m\u001b[1;32m    252\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    253\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/content/drive/My Drive/Colab Notebooks/JnQ/mpl_finance/mpl_finance.py\u001b[0m in \u001b[0;36m_candlestick\u001b[0;34m(ax, quotes, width, colorup, colordown, alpha, ochl)\u001b[0m\n\u001b[1;32m    326\u001b[0m         \u001b[0mpatches\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrect\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    327\u001b[0m         \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd_line\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvline\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 328\u001b[0;31m         \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd_patch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrect\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    329\u001b[0m     \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mautoscale_view\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    330\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/axes/_base.py\u001b[0m in \u001b[0;36madd_patch\u001b[0;34m(self, p)\u001b[0m\n\u001b[1;32m   1917\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_clip_path\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1918\u001b[0m             \u001b[0mp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_clip_path\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpatch\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1919\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_update_patch_limits\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1920\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpatches\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1921\u001b[0m         \u001b[0mp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_remove_method\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpatches\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mremove\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/axes/_base.py\u001b[0m in \u001b[0;36m_update_patch_limits\u001b[0;34m(self, patch)\u001b[0m\n\u001b[1;32m   1937\u001b[0m         \u001b[0mvertices\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpatch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_path\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvertices\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1938\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mvertices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1939\u001b[0;31m             \u001b[0mxys\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpatch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_patch_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvertices\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1940\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mpatch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_data_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransData\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1941\u001b[0m                 patch_to_data = (patch.get_data_transform() -\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 2160x1296 with 1 Axes>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"5z4L3MMYmUI0"},"source":["### sorted"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Qv1MM2MemZnF"},"outputs":[],"source":["assert len(open_list) == len(trade_list), \"len(open_list) != len(trade_list)\"\n","assert len(tp_state_list) == len(fee_list), \"len(tp_state_list) != len(fee_list)\"\n","\n","if multi_mode:\n","  strat_version = \"v3\"\n","\n","save_plot = 0\n","tf_plot = 1\n","pr_sort = 1     # 이상한 체결 확인하기 좋음\n","pr_descend = 1  # 1 -> 내림차순\n","# wl_case = 1     # 1 / -1 / 0 (win loss study)\n","position = 1    # -1 / 1 / 0 (short / long / both)\n","\n","x_max = 500\n","x_margin = x_max / 30\n","only_loc_plot = 1 # limit plot_range til loc_set idx = replacing x_max value\n","\n","inversion = 0\n","hedge = 0\n","\n","\n","if save_plot:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".ftr\", \"\")\n","  try:\n","    os.mkdir(plot_check_dir)\n","  except:\n","\n","    #     remove existing dir   #\n","    shutil.rmtree(plot_check_dir)\n","    print(plot_check_dir, 'removed !')\n","    os.mkdir(plot_check_dir)\n","    # pass\n","    \n","\n","prev_plotsize = 130\n","post_plotsize = 120\n","\n","\n","if position == -1:\n","  position = config.ep_set.short_entry_score\n","elif position == 1:\n","  position = -config.ep_set.short_entry_score\n","\n","\n","if inversion:  \n","\n","    plot_pr_list = rev_np_pr\n","    h_plot_pr_list = h_rev_np_pr  # hedge\n","\n","else:\n","\n","    plot_pr_list = np_pr\n","    try:\n","      h_plot_pr_list = h_np_pr\n","    except Exception as e:\n","      print(\"error in h_plot_pr :\", e)\n","      h_plot_pr_list = np_pr\n","\n","\n","h_candle_intv1 = '15T'\n","h_candle_intv2 = 'H'\n","if 'hopen_{}'.format(h_candle_intv2) not in res_df.columns:\n","  # res_df = h_candle_v2(res_df, h_candle_intv1)\n","  res_df = h_candle_v2(res_df, h_candle_intv2)\n","\n","res_df[\"ma30_1m\"] = res_df['close'].rolling(30).mean()\n","res_df[\"ma60_1m\"] = res_df['close'].rolling(60).mean()\n","\n","res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line, np_timeidx=np_timeidx)\n","# res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=1, use_dtk_line=1)\n","# break\n","\n","rtc_list = [\"short_tp_1_{}\".format(strat_version), \"short_tp_gap_{}\".format(strat_version), \"long_tp_1_{}\".format(strat_version), \"long_tp_gap_{}\".format(strat_version)]\n","# h_rtc_list = [\"h_short_tp_1\", \"h_short_tp_gap\", \"h_long_tp_1\", \"h_long_tp_gap\"]\n","dtk_list = [\"short_dtk_1_{}\".format(strat_version), \"short_dtk_gap_{}\".format(strat_version), \"long_dtk_1_{}\".format(strat_version), \"long_dtk_gap_{}\".format(strat_version),\n","            # \"short_dtk_1_line\", \"short_dtk_gap_line\", \"long_dtk_1_line\", \"long_dtk_gap_line\",\n","            \"short_dtk_plot_1\", \"short_dtk_plot_gap\", \"long_dtk_plot_1\", \"long_dtk_plot_gap\"]\n","dc_v2_list = ['dc_upper_v2_{}'.format(strat_version), 'dc_lower_v2_{}'.format(strat_version)]\n","\n","\n","ohlc_list = ['open', 'high', 'low', 'close'] # + basic_st_list\n","hcandle_list = ['hopen_%s' % h_candle_intv1, 'hclose_%s' % h_candle_intv1, 'hopen_%s' % h_candle_intv2, 'hclose_%s' % h_candle_intv2]\n","# hcandle_list = ['hopen_%s' % h_candle_intv1, 'hclose_%s' % h_candle_intv1, 'hhigh_%s' % h_candle_intv2, 'hlow_%s' % h_candle_intv2]\n","\n","# --------------------- dc & bb level --------------------- #\n","dc_interval = '30m'\n","hdc_interval = '1h'\n","hhdc_interval = '4h'\n","\n","st_list = ['st_base_%s' % hhdc_interval, 'st_upper_%s' % hhdc_interval, 'st_lower_%s' % hhdc_interval]\n","\n","dc_list = ['dc_upper_%s' % dc_interval, 'dc_lower_%s' % dc_interval]\n","hdc_list = ['dc_upper_%s' % hdc_interval, 'dc_lower_%s' % hdc_interval]\n","hhdc_list = ['dc_upper_%s' % hhdc_interval, 'dc_lower_%s' % hhdc_interval]\n","\n","bb_interval = dc_interval\n","hbb_interval = hdc_interval\n","hhbb_interval = hhdc_interval\n","\n","bb_list = ['bb_upper_%s' % bb_interval, 'bb_lower_%s' % bb_interval]\n","hbb_list = ['bb_upper_%s' % hbb_interval, 'bb_lower_%s' % hbb_interval]\n","hhbb_list = ['bb_upper_%s' % hhbb_interval, 'bb_lower_%s' % hhbb_interval]\n","\n","bbwp_list = ['bbwp', 'bbwp_ma']\n","\n","\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1']\n","senkoub_list = ['senkou_b1']\n","\n","sar_list = ['sar_3m', 'sar_5m', 'sar_15m']\n","\n","ma_list = ['ma30_1m', 'ma60_1m']\n","sma_list = ['sma_1m']\n","\n","ema_list = ['ema_5m']\n","# cb_list = ['cloud_bline_1m']\n","cb_list = ['cloud_bline_30m']\n","# cb_list = ['cloud_bline_5m']\n","\n","\n","\n","# -------------- under price phase -------------- #\n","# macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3']\n","# trix_list = ['trix1', 'trix2', 'trix3']\n","# stoch_list = ['stoch_5m']\n","# fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","# cctbbo_list = ['cctbbo']\n","# emaroc_list = ['ema_roc']\n","rsi_list = ['rsi_%s' % config.loc_set.point.exp_itv] \n","cci_list = ['cci_%s' % config.loc_set.point.exp_itv] \n","\n","\n","# -------------- summation -------------- #\n","# input_colname = ohlc_list + basic_st_list + pline_list + bb_list + hbb_list + sma_list + cb_list + stoch_list + sar_list + dc_list\n","input_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + hhdc_list + dtk_list + dc_v2_list + rsi_list + ema_list + ma_list# + st_list# + cci_list\n","\n","# yrange_colname = ohlc_list + basic_st_list + pline_list # currently just used for ymin, ymax\n","yrange_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + hhdc_list + dc_v2_list + ema_list # currently just used for ymin, ymax\n","yrange_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + dc_v2_list + ema_list # currently just used for ymin, ymax\n","\n","\n","# aggr_obj = dict(zip(plot_pr_list, open_list, enumerate(trade_list)))\n","aggr_obj = dict(zip(plot_pr_list, zip(open_list, enumerate(trade_list))))\n","sorted_obj = sorted(aggr_obj.items(), key=(lambda x: x[0]), reverse=pr_descend)\n","\n","# print(aggr_obj)\n","# print(sorted_obj)\n","\n","if pr_sort:\n","  iter_obj = sorted_obj\n","else:\n","  iter_obj = aggr_obj.items()\n","\n","odd_cnt = 0\n","obj_i = -1\n","rev_obj_i = 0\n","len_obj = len(sorted_obj)\n","\n","#   지금, continue 발생시 true / false idx 가 같이 상승하는 문제\n","\n","# for temp_pr, (open_idx, (t_i, (ep_idx_list_, tp_idx_list_))) in iter_obj:  # 0.699700153073042, (291402, (3014, ([370012], [370014])))\n","# for obj_i, (temp_pr, (open_idx, (t_i, (ep_idx_list_, out_idx_list_, tp_idx_list_)))) in enumerate(iter_obj):  # 0.699700153073042, (291402, (3014, ([370012], [370014])))\n","# for temp_pr, (open_idx, (t_i, (ep_idx_list_, out_idx_list_, tp_idx_list_))) in iter_obj:  # 0.699700153073042, (291402, (3014, ([370012], [370014])))\n","\n","while 1:\n","\n","  if obj_i >= len_obj or rev_obj_i >= len_obj:\n","    break\n","\n","  if odd_cnt % 2 == 1 and tf_plot: #  loss plot 을 채워야하는 상황\n","    rev_obj_i += 1\n","    temp_pr, (open_idx, (t_i, (ep_idx_list_, out_idx_list_, tp_idx_list_))) = sorted_obj[-rev_obj_i]\n","    if temp_pr > 1.0:\n","      continue  \n","\n","  else:\n","    obj_i += 1\n","    temp_pr, (open_idx, (t_i, (ep_idx_list_, out_idx_list_, tp_idx_list_))) = sorted_obj[obj_i]\n","    if temp_pr < 1.0:\n","      continue  \n","\n","  if not(i >= prev_plotsize):\n","    continue\n","  \n","  #   open size indexing by open_idx    #\n","  open_side_ = res_df['entry_{}'.format(strat_version)].iloc[open_idx]\n","\n","  # ---------- const. zone ---------- #\n","\n","  if position != 0:\n","    if open_side_ != position:\n","      continue\n","\n","  if multi_mode:\n","    if not strat_version in tp_state_list[t_i]:\n","    # if tp_state_list[t_i] != 'long close tp':\n","    # if tp_state_list[t_i] != 's-long_tp':\n","      continue\n","\n","  # if open_idx == 63901:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","\n","  # if tp_ratio_list[t_i] > 0.4:\n","  #   continue\n","\n"," \n","  # print(\"open_idx :\", open_idx)\n","  print(\"open_side_ :\", open_side_)\n","  print(\"np_timeidx[open_idx] :\", np_timeidx[open_idx])\n","  print(\"open_idx, ep_idx_list_[0], tp_idx_list_[-1] :\", open_idx, ep_idx_list_[0], tp_idx_list_[-1])\n","  #   const. 에 합하는 조건 나올때까지 loop 돌리고, const. phase 통과시 odd_cnt += 1,\n","  #   => odd_cnt 로 gs_plot 을 채운다는 느낌 \n","  #   odds = 1 -> wl_case == 1 만 허용, odds = 2 -> wl_case == -1 만 허용\n","  odd_cnt += 1\n","\n","  # break\n","\n","  plot_df = res_df.iloc[open_idx - prev_plotsize:tp_idx_list_[-1] + post_plotsize][input_colname]\n","\n","\n","  #       keep off-color st with another variable         #\n","  # st_trend_plot_df = res_df[['ST1_Trend%s' % basic_st_interval, 'ST2_Trend%s' % basic_st_interval, 'ST3_Trend%s' % basic_st_interval]].iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","\n","  # fig = trendln.plot_support_resistance(plot_df['close'], accuracy=8, fromwindows=0, numbest=1,  window=30) # requires matplotlib - pip install matplotlib\n","  \n","  odds = 1 if odd_cnt % 2 == 1 else 2\n","  if odds == 1:\n","\n","    plt.style.use('dark_background')\n","\n","    fig = plt.figure(figsize=(26, 18))\n","    \n","    gs = gridspec.GridSpec(nrows=2, # row 몇 개 \n","                        ncols=2, # col 몇 개 \n","                        height_ratios=[3, 1]\n","                        )\n","    \n","  ax = fig.add_subplot(gs[odds - 1])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='#26a69a', colordown='#ef5350', alpha=0.5)\n","\n","  # ---------- h_candle ---------- #\n","  alpha = 1\n","  lw = 1\n","  for cd_i, candle in enumerate(hcandle_list):\n","\n","    if cd_i == 2:\n","      lw = 2      \n","    plt.step(np.arange(len(plot_df)), plot_df[candle].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","\n","  # alpha = 0.1\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['hclose_60'].values, plot_df['hopen_60'].values, \n","  #                     where=1, facecolor='#ffffff', alpha=alpha)  \n","  \n","\n","   # --------- ma --------- #\n","  alpha = 1\n","  lw = 2\n","  for ma_i, item in enumerate(ma_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","   # --------- ema --------- #\n","  alpha = 1\n","  lw = 4\n","  for sm_i, item in enumerate(ema_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","    \n","   # --------- st --------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(st_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#00ff00', linewidth=lw)\n","\n","  # ---------------------- dc_v2 ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(dc_v2_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","  # ---------------------- dc ---------------------- #\n","  alpha = 1\n","  lw = 2\n","  for sm_i, item in enumerate(dc_list):\n","      plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","  # ---------------------- hdc ---------------------- #\n","  alpha = 1\n","  lw = 2\n","  for sm_i, item in enumerate(hdc_list):\n","      plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#e65100', linewidth=lw)\n","\n","  # ---------------------- hhdc ---------------------- #\n","  alpha = 1\n","  lw = 4\n","  for sm_i, item in enumerate(hhdc_list):\n","      plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#c2185b', linewidth=lw)\n","\n","\n","  # ---------------------- bb ---------------------- #\n","  alpha = 1\n","  lw = 1\n","  for sm_i, item in enumerate(bb_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","\n","  alpha = 0.2\n","  plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % bb_interval].values, plot_df['bb_lower_%s' % bb_interval].values, \n","                      where=plot_df['bb_upper_%s' % bb_interval].values >= plot_df['bb_lower_%s' % bb_interval].values, facecolor='#ffffff', alpha=alpha)   \n","\n","  # ---------------------- hbb ---------------------- #\n","  alpha = 1\n","  lw = 2\n","  for sm_i, item in enumerate(hbb_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ff00ff', linewidth=lw)\n","  \n","  alpha = 0.2\n","  plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % hbb_interval].values, plot_df['bb_lower_%s' % hbb_interval].values, \n","                      where=plot_df['bb_upper_%s' % hbb_interval].values >= plot_df['bb_lower_%s' % hbb_interval].values, facecolor='#ff00ff', alpha=alpha) \n","  \n","  # ---------------------- hhbb ---------------------- #\n","\n","  alpha = 1\n","  lw = 4\n","  for sm_i, item in enumerate(hhbb_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#3179f5', linewidth=lw)\n","  \n","  alpha = 0.2\n","  plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % hhbb_interval].values, plot_df['bb_lower_%s' % hhbb_interval].values, \n","                      where=plot_df['bb_upper_%s' % hhbb_interval].values >= plot_df['bb_lower_%s' % hhbb_interval].values, facecolor='#3179f5', alpha=alpha) \n","  \n","  # ------------------- dtk_line (old, tp_line) ------------------- #\n","  \n","  # alpha = 1\n","  # lw = 2\n","  # rtc_ratio_list = [config.loc_set.zone.dt_k]\n","  \n","  # for rtc_k in rtc_ratio_list:    \n","  #   # plt.step(np.arange(len(plot_df)), plot_df['short_dtk_1_line'].values - plot_df['short_dtk_gap_line'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['long_dtk_1_line'].values + plot_df['long_dtk_gap_line'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","\n","  # hy_min = np.min(plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * rtc_k)\n","  # hy_max = np.max(plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * rtc_k)  \n","\n","  # alpha = 1\n","  # lw = 4\n","  # # h_rtc_ratio_list = [config.loc_set.zone.dt_k]\n","  # h_rtc_ratio_list = [config.loc_set.zone.zone_dt_k]\n","  # # h_rtc_ratio_list = [0.272, 0.36, 0.4, 0.5]\n","  \n","  # for h_rtc_k in h_rtc_ratio_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df['short_dtk_plot_1'].values - plot_df['short_dtk_plot_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['long_dtk_plot_1'].values + plot_df['long_dtk_plot_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['h_short_tp_1'].values - plot_df['h_short_tp_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['h_long_tp_1'].values + plot_df['h_long_tp_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","\n","  # # hy_min = np.min(plot_df['short_dtk_plot_1'].values - plot_df['short_dtk_plot_gap'].values * h_rtc_k)\n","  # # hy_max = np.max(plot_df['long_dtk_plot_1'].values + plot_df['long_dtk_plot_gap'].values * h_rtc_k)  \n","\n","  # ------------------------------------------------------------- #\n","\n","\n","  # ------------- ep ------------- #\n","  # if i != initial_i:\n","  # if len(ep_idx_list_) > 1:\n","  \n","    #        initial order         #\n","  plt.axvline(prev_plotsize, alpha=0.5, linestyle='--', color='#ffeb3b')\n","\n","  for ep_i in range(len(ep_idx_list_)):\n","    # plt.axvline(prev_plotsize + (ep_idx_list_[ep_i] - ep_idx_list_[0]), alpha=0.7, linestyle='--', color='#ffeb3b')\n","    plt.axvline(prev_plotsize + (ep_idx_list_[ep_i] - open_idx), alpha=0.7, linestyle='--', color='#ffeb3b')\n","\n","  # plt.axvline(prev_plotsize, alpha=0.5, linestyle='--')\n","\n","  # ------------- x lim ------------- #\n","  if only_loc_plot:\n","    x_max = prev_plotsize + (ep_idx_list_[0] - open_idx)\n","\n","  if len(plot_df) > x_max:\n","    plt.xlim(0 - x_margin, x_max + x_margin)\n","\n","  x0,x1 = plt.gca().get_xlim()\n","\n","  # ep_xmin = (prev_plotsize + (ep_idx_list_[ep_i] - ep_idx_list_[0])) / x1\n","  ep_xmin = (prev_plotsize + (ep_idx_list_[ep_i] - open_idx)) / x1\n","  plt.axhline(ep_tp_list[t_i][0], linestyle='--', xmin=ep_xmin, xmax=1, alpha=1, color='lime')  # ep line axhline  \n","  plt.text(x1, ep_tp_list[t_i][0][0], ' ep :\\n %s' % ep_tp_list[t_i][0][0], ha='left', va='center', fontweight='bold') # ep line label\n","\n","  \n","  # ------------- tp ------------- #\n","  for sub_i in range(len(ep_tp_list[t_i][1])):\n","\n","    # tp_xmin = (prev_plotsize + (tp_idx_list_[sub_i] - ep_idx_list_[0])) / x1\n","    tp_xmin = (prev_plotsize + (tp_idx_list_[sub_i] - open_idx)) / x1\n","    plt.axhline(ep_tp_list[t_i][1][sub_i], linestyle='--', xmin=tp_xmin , xmax=1, alpha=1, color='lime')  # tp line axhline\n","    plt.text(x1, ep_tp_list[t_i][1][sub_i], ' tp :\\n %s' % ep_tp_list[t_i][1][sub_i], ha='left', va='center', fontweight='bold') # tp line label\n","     \n","    # plt.axvline(prev_plotsize + (tp_idx_list_[sub_i] - ep_idx_list_[0]), alpha=1., linestyle='--', color='#ffeb3b', zorder=2)\n","    plt.axvline(prev_plotsize + (tp_idx_list_[sub_i] - open_idx), alpha=1., linestyle='--', color='#ffeb3b', zorder=2)\n","\n","\n","  # ------------- rtc horizontal range ------------- # --> open_idx 로 할지는 추후 수정 권고 (ep_loc.point2 에 의해 진입 기준 point 가 변경될 수 있음)\n","  # rtc_ratio_list = [0.272, 0.36, 0.4, 0.5]\n","  rtc_ratio_list = [0.]\n","  if open_side_ == config.ep_set.short_entry_score:\n","    # plt.axhline(res_df['short_rtc_1'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    # plt.axhline(res_df['short_rtc_0'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    out_line = res_df['short_out_{}'.format(strat_version)].iloc[out_idx_list_[0]]\n","    plt.axhline(out_line, linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    plt.text(x0, out_line, ' %s' % config.tr_set.out_gap, ha='left', va='center', fontweight='bold')\n","\n","    for rtc_k in rtc_ratio_list:\n","      plt.axhline(res_df['h_short_rtc_1_{}'.format(strat_version)].iloc[open_idx] - res_df['h_short_rtc_gap_{}'.format(strat_version)].iloc[open_idx] * rtc_k, linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","      plt.text(x0, res_df['h_short_rtc_1_{}'.format(strat_version)].iloc[open_idx] - res_df['h_short_rtc_gap_{}'.format(strat_version)].iloc[open_idx] * rtc_k, ' %s' % rtc_k, ha='left', va='center', fontweight='bold')\n","      \n","    y_max = out_line\n","    y_min = res_df['h_short_rtc_1_{}'.format(strat_version)].iloc[tp_idx_list_[-1]] - res_df['h_short_rtc_gap_{}'.format(strat_version)].iloc[tp_idx_list_[-1]] * rtc_k\n","\n","    print(\"short_tp :\", res_df['short_tp_{}'.format(strat_version)].iloc[tp_idx_list_[-1]])\n","    print(\"short_out :\", out_line)\n","\n","  else:\n","    # plt.axhline(res_df['long_rtc_1'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    # plt.axhline(res_df['long_rtc_0'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff') \n","    out_line = res_df['long_out_{}'.format(strat_version)].iloc[out_idx_list_[0]]\n","    plt.axhline(out_line, linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    plt.text(x0, out_line, ' %s' % config.tr_set.out_gap, ha='left', va='center', fontweight='bold')\n","\n","    for rtc_k in rtc_ratio_list:\n","      plt.axhline(res_df['h_long_rtc_1_{}'.format(strat_version)].iloc[open_idx] + res_df['h_long_rtc_gap_{}'.format(strat_version)].iloc[open_idx] * rtc_k, linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","      plt.text(x0, res_df['h_long_rtc_1_{}'.format(strat_version)].iloc[open_idx] + res_df['h_long_rtc_gap_{}'.format(strat_version)].iloc[open_idx] * rtc_k, ' %s' % rtc_k, ha='left', va='center', fontweight='bold')\n","\n","    y_max = res_df['h_long_rtc_1_{}'.format(strat_version)].iloc[tp_idx_list_[-1]] + res_df['h_long_rtc_gap_{}'.format(strat_version)].iloc[tp_idx_list_[-1]] * rtc_k\n","    y_min = out_line\n","\n","    print(\"long_tp :\", res_df['long_tp_{}'.format(strat_version)].iloc[tp_idx_list_[-1]])\n","    print(\"long_out :\", out_line)\n","  \n","    # t_tr = ((res_df['long_tp'].iloc[open_idx] - res_df['close'].iloc[open_idx] - tp_fee * res_df['close'].iloc[open_idx]) / (res_df['close'].iloc[open_idx] - res_df['long_out'].iloc[open_idx] + out_fee * res_df['close'].iloc[open_idx]))\n","    # t_dr = ((res_df['long_tp'].iloc[open_idx] - res_df['close'].iloc[open_idx]) / (res_df['close'].iloc[open_idx] - res_df['long_out'].iloc[open_idx]))     \n","    # print(\"t_tr :\", t_tr)\n","    # print(\"t_dr :\", t_dr)\n","\n","  #         hedge ep & tp         #\n","  h_i = h_trade_list[t_i][1]\n","  if h_i is not None:\n","    # plt.axvline(prev_plotsize + (h_i - ep_idx_list_[0]), linestyle='--')\n","    plt.axvline(prev_plotsize + (h_i - open_idx), linestyle='--')\n","    plt.axhline(h_ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='magenta')  # ep line axhline\n","    plt.axhline(h_ep_tp_list[t_i][1], linestyle='-', xmin=0.85, xmax=1, linewidth=3, color='magenta')  # tp line axhline\n","\n","  \n","  #         check pr        #\n","  if not config.lvrg_set.static_lvrg:\n","    \n","    #   list length 만 sync 맞으면 t_i 걱정 안해도됨, zip 해서 순서가 바뀌었을 뿐, original serialized order 에서 t_i 로 indexing 하는 것뿐임   #\n","    plt.title(\"%s ~ %s -> %.5f\\n %s\\n h_pr : %.5f\\n lvrg : %s\\ntp_ratio : %.3f\\n dr : %.3f\\n fee : %.4f\" % (ep_idx_list_[0], tp_idx_list_[-1], plot_pr_list[t_i], tp_state_list[t_i], \n","                                                                                                h_plot_pr_list[t_i], leverage_list[t_i], tp_ratio_list[t_i], dr_list[t_i], fee_list[t_i]))\n","\n","    print(\"short real pr :\", (ep_tp_list[t_i][0] / ep_tp_list[t_i][1][sub_i] - fee_list[t_i] - 1) * leverage_list[t_i] + 1)\n","    print(\"long real pr :\", (ep_tp_list[t_i][1][sub_i] / ep_tp_list[t_i][0] - fee_list[t_i] - 1) * leverage_list[t_i] + 1)    \n","\n","  else:\n","    plt.title(\"%s ~ %s -> %.5f\\n %s\\n h_pr : %.5f\\n tp_ratio : %.3f\\n dr : %.3f\\n fee : %.4f\" % (ep_idx_list_[0], tp_idx_list_[-1], plot_pr_list[t_i], tp_state_list[t_i], \n","                                                                                     h_plot_pr_list[t_i], tp_ratio_list[t_i], dr_list[t_i], fee_list[t_i]))\n","\n","    print(\"short real pr :\", (ep_tp_list[t_i][0] / ep_tp_list[t_i][1][sub_i] - fee_list[t_i] - 1) * config.lvrg_set.leverage + 1)\n","    print(\"long real pr :\", (ep_tp_list[t_i][1][sub_i] / ep_tp_list[t_i][0] - fee_list[t_i] - 1) * config.lvrg_set.leverage + 1)\n","  \n","  # ------------- y lim ------------- #  \n","  y_max_ = max(np.max(plot_df[yrange_colname]))\n","  y_min_ = min(np.min(plot_df[yrange_colname]))\n","  y_max = max(y_max, y_max_)\n","  y_min = min(y_min, y_min_)\n","  y_range = y_max - y_min\n","  y_margin = y_range / 20\n","  \n","  # hy_min = np.min(plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * 0.36)\n","  # hy_max = np.max(plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * 0.36)  \n","  # y_max = max(y_max, y_max_, hy_max)\n","  # y_min = min(y_min, y_min_, hy_min)\n","\n","  if np.isnan(y_max) or np.isnan(y_min):\n","    print('continued in yminmax')\n","    continue\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","\n","  plt.ylim(y_min - y_margin, y_max + y_margin)\n","\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  #           rsi          #    \n","  plt.subplot(gs[odds + 1])\n","  alpha = 1\n","  for rsi_ in rsi_list:\n","    plt.step(np.arange(len(plot_df)), plot_df[rsi_].values, 'g', alpha=alpha)\n","    # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","    alpha -= 0.2\n","  plt.axhline(50, linestyle='--')\n","  plt.axhline(50 + config.loc_set.point.osc_band, linestyle='--')\n","  plt.axhline(50 - config.loc_set.point.osc_band, linestyle='--')\n","  \n","  plt.axvline(prev_plotsize, linestyle='--')\n","  \n","  #           cci          #    \n","  # plt.subplot(gs[odds + 1])\n","  # alpha = 1\n","  # for cci_ in cci_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cci_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axhline(config.loc_set.point.osc_band, linestyle='--')\n","  # plt.axhline(-config.loc_set.point.osc_band, linestyle='--')\n","  \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","\n","\n","  #     vline open     #\n","  for ep_i in range(len(ep_idx_list_)):\n","    plt.axvline(prev_plotsize + (ep_idx_list_[ep_i] - open_idx), alpha=0.7, linestyle='--', color='#ffeb3b')\n","  \n","  #     vline close     #\n","  for sub_i in range(len(ep_tp_list[t_i][1])):\n","    plt.axvline(prev_plotsize + (tp_idx_list_[sub_i] - open_idx), alpha=1., linestyle='--', color='#ffeb3b', zorder=2)\n","\n","  if len(plot_df) > x_max:\n","    plt.xlim(0 - x_margin, x_max + x_margin)\n","\n","\n","  if not save_plot:\n","    if odds == 2:\n","      plt.show()\n","      plt.close()\n","  \n","  else:\n","    # ---------- save mode ---------- #\n","    fig_name = plot_check_dir +  \"/%s.png\" % t_i\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","\n","  # plt.close()  \n","  print()\n","\n","  # break\n"]},{"cell_type":"markdown","source":["### sync_check"],"metadata":{"id":"X0FsT-8FZRti"}},{"cell_type":"code","source":["if multi_mode:\n","  strat_version = \"v3\"\n","\n","save_plot = 0\n","\n","open_idx_range = reversed(range(0, len(res_df), 1000))\n","plot_range = 100\n","\n","x_max = 400\n","\n","inversion = 0\n","hedge = 0\n","\n","\n","if save_plot:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".ftr\", \"\")\n","  try:\n","    os.mkdir(plot_check_dir)\n","  except:\n","\n","    #     remove existing dir   #\n","    shutil.rmtree(plot_check_dir)\n","    print(plot_check_dir, 'removed !')\n","    os.mkdir(plot_check_dir)\n","    # pass\n","    \n","\n","prev_plotsize = 30\n","post_plotsize = 20\n","\n","\n","\n","h_candle_intv1 = 15\n","h_candle_intv2 = 60\n","if 'hopen_{}'.format(h_candle_intv2) not in res_df.columns:\n","  res_df = h_candle(res_df, h_candle_intv1)\n","  res_df = h_candle(res_df, h_candle_intv2)\n","\n","res_df[\"ma30_1m\"] = res_df['close'].rolling(30).mean()\n","res_df[\"ma60_1m\"] = res_df['close'].rolling(60).mean()\n","\n","res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line)\n","# res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=1, use_dtk_line=1)\n","# break\n","\n","rtc_list = [\"short_tp_1_{}\".format(strat_version), \"short_tp_gap_{}\".format(strat_version), \"long_tp_1_{}\".format(strat_version), \"long_tp_gap_{}\".format(strat_version)]\n","# h_rtc_list = [\"h_short_tp_1\", \"h_short_tp_gap\", \"h_long_tp_1\", \"h_long_tp_gap\"]\n","dtk_list = [\"short_dtk_1_{}\".format(strat_version), \"short_dtk_gap_{}\".format(strat_version), \"long_dtk_1_{}\".format(strat_version), \"long_dtk_gap_{}\".format(strat_version),\n","            # \"short_dtk_1_line\", \"short_dtk_gap_line\", \"long_dtk_1_line\", \"long_dtk_gap_line\",\n","            \"short_dtk_plot_1\", \"short_dtk_plot_gap\", \"long_dtk_plot_1\", \"long_dtk_plot_gap\"]\n","dc_v2_list = ['dc_upper_v2_{}'.format(strat_version), 'dc_lower_v2_{}'.format(strat_version)]\n","\n","\n","ohlc_list = ['open', 'high', 'low', 'close'] # + basic_st_list\n","hcandle_list = ['hopen_%s' % h_candle_intv1, 'hclose_%s' % h_candle_intv1, 'hopen_%s' % h_candle_intv2, 'hclose_%s' % h_candle_intv2]\n","# hcandle_list = ['hopen_%s' % h_candle_intv1, 'hclose_%s' % h_candle_intv1, 'hhigh_%s' % h_candle_intv2, 'hlow_%s' % h_candle_intv2]\n","\n","# --------------------- dc & bb level --------------------- #\n","dc_interval = '1m'\n","hdc_interval = '5m'\n","hhdc_interval = '15m'\n","\n","st_list = ['st_base_%s' % hhdc_interval, 'st_upper_%s' % hhdc_interval, 'st_lower_%s' % hhdc_interval]\n","\n","dc_list = ['dc_upper_%s' % dc_interval, 'dc_lower_%s' % dc_interval]\n","hdc_list = ['dc_upper_%s' % hdc_interval, 'dc_lower_%s' % hdc_interval]\n","hhdc_list = ['dc_upper_%s' % hhdc_interval, 'dc_lower_%s' % hhdc_interval]\n","\n","bb_interval = dc_interval\n","hbb_interval = hdc_interval\n","hhbb_interval = hhdc_interval\n","\n","bb_list = ['bb_upper_%s' % bb_interval, 'bb_lower_%s' % bb_interval]\n","hbb_list = ['bb_upper_%s' % hbb_interval, 'bb_lower_%s' % hbb_interval]\n","hhbb_list = ['bb_upper_%s' % hhbb_interval, 'bb_lower_%s' % hhbb_interval]\n","\n","bbwp_list = ['bbwp', 'bbwp_ma']\n","\n","\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1']\n","senkoub_list = ['senkou_b1']\n","\n","sar_list = ['sar_3m', 'sar_5m', 'sar_15m']\n","\n","ma_list = ['ma30_1m', 'ma60_1m']\n","sma_list = ['sma_1m']\n","\n","ema_list = ['ema_5m']\n","# cb_list = ['cloud_bline_1m']\n","cb_list = ['cloud_bline_30m']\n","# cb_list = ['cloud_bline_5m']\n","\n","\n","\n","# -------------- under price phase -------------- #\n","# macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3']\n","# trix_list = ['trix1', 'trix2', 'trix3']\n","# stoch_list = ['stoch_5m']\n","# fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","# cctbbo_list = ['cctbbo']\n","# emaroc_list = ['ema_roc']\n","rsi_list = ['rsi_%s' % config.loc_set.point.exp_itv] \n","cci_list = ['cci_%s' % config.loc_set.point.exp_itv] \n","\n","\n","# -------------- summation -------------- #\n","# input_colname = ohlc_list + basic_st_list + pline_list + bb_list + hbb_list + sma_list + cb_list + stoch_list + sar_list + dc_list\n","input_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + hhdc_list + dtk_list + dc_v2_list + rsi_list + ema_list + ma_list + st_list# + cci_list\n","\n","# yrange_colname = ohlc_list + basic_st_list + pline_list # currently just used for ymin, ymax\n","yrange_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + hhdc_list + dc_v2_list + ema_list # currently just used for ymin, ymax\n","yrange_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + dc_v2_list + ema_list # currently just used for ymin, ymax\n","\n","\n","\n","odd_cnt = 0\n","obj_i = -1\n","rev_obj_i = 0\n","\n","#   지금, continue 발생시 true / false idx 가 같이 상승하는 문제\n","\n","# while 1:\n","for open_idx in open_idx_range:\n","\n","  # if obj_i >= len_obj or rev_obj_i >= len_obj:\n","  #   break\n","\n","  # if odd_cnt % 2 == 1 and tf_plot: #  loss plot 을 채워야하는 상황\n","  #   rev_obj_i += 1\n","\n","  # else:\n","  #   obj_i += 1\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","  \n","\n","  odd_cnt += 1\n","\n","  # break\n","\n","  print(\"open_idx :\", open_idx)\n","  \n","  plot_df = res_df.iloc[open_idx - prev_plotsize:open_idx + plot_range + post_plotsize][input_colname]\n","  \n","  odds = 1 if odd_cnt % 2 == 1 else 2\n","  if odds == 1:\n","\n","    plt.style.use('dark_background')\n","\n","    fig = plt.figure(figsize=(26, 18))\n","    \n","    gs = gridspec.GridSpec(nrows=2, # row 몇 개 \n","                        ncols=2, # col 몇 개 \n","                        height_ratios=[3, 1]\n","                        )\n","    \n","  ax = fig.add_subplot(gs[odds - 1])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='#26a69a', colordown='#ef5350', alpha=0.5)\n","\n","  # ---------- h_candle ---------- #\n","  alpha = 1\n","  lw = 1\n","  for cd_i, candle in enumerate(hcandle_list):\n","\n","    if cd_i == 2:\n","      lw = 2      \n","    plt.step(np.arange(len(plot_df)), plot_df[candle].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","\n","  # alpha = 0.1\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['hclose_60'].values, plot_df['hopen_60'].values, \n","  #                     where=1, facecolor='#ffffff', alpha=alpha)  \n","  \n","\n","   # --------- ma --------- #\n","  alpha = 1\n","  lw = 2\n","  for ma_i, item in enumerate(ma_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","   # --------- ema --------- #\n","  alpha = 1\n","  lw = 4\n","  for sm_i, item in enumerate(ema_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","    \n","   # --------- st --------- #\n","  alpha = 1\n","  lw = 2\n","  for sm_i, item in enumerate(st_list):\n","      plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#00ff00', linewidth=lw)\n","\n","  # ---------------------- dc_v2 ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(dc_v2_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","  # # ---------------------- dc ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(dc_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","  # # ---------------------- hdc ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(hdc_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#e65100', linewidth=lw)\n","\n","  # # ---------------------- hhdc ---------------------- #\n","  # alpha = 1\n","  # lw = 4\n","  # for sm_i, item in enumerate(hhdc_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#c2185b', linewidth=lw)\n","\n","\n","  # # ---------------------- bb ---------------------- #\n","  # alpha = 1\n","  # lw = 1\n","  # for sm_i, item in enumerate(bb_list):\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","\n","  # alpha = 0.2\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % bb_interval].values, plot_df['bb_lower_%s' % bb_interval].values, \n","  #                     where=plot_df['bb_upper_%s' % bb_interval].values >= plot_df['bb_lower_%s' % bb_interval].values, facecolor='#ffffff', alpha=alpha)   \n","\n","  # # ---------------------- hbb ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(hbb_list):\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ff00ff', linewidth=lw)\n","  \n","  # alpha = 0.2\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % hbb_interval].values, plot_df['bb_lower_%s' % hbb_interval].values, \n","  #                     where=plot_df['bb_upper_%s' % hbb_interval].values >= plot_df['bb_lower_%s' % hbb_interval].values, facecolor='#ff00ff', alpha=alpha) \n","  \n","  # # ---------------------- hhbb ---------------------- #\n","\n","  # alpha = 1\n","  # lw = 4\n","  # for sm_i, item in enumerate(hhbb_list):\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#3179f5', linewidth=lw)\n","  \n","  # alpha = 0.2\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % hhbb_interval].values, plot_df['bb_lower_%s' % hhbb_interval].values, \n","  #                     where=plot_df['bb_upper_%s' % hhbb_interval].values >= plot_df['bb_lower_%s' % hhbb_interval].values, facecolor='#3179f5', alpha=alpha) \n","  \n","  # ------------------- dtk_line (old, tp_line) ------------------- #\n","  \n","  # alpha = 1\n","  # lw = 2\n","  # rtc_ratio_list = [config.loc_set.zone.dt_k]\n","  \n","  # for rtc_k in rtc_ratio_list:    \n","  #   # plt.step(np.arange(len(plot_df)), plot_df['short_dtk_1_line'].values - plot_df['short_dtk_gap_line'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['long_dtk_1_line'].values + plot_df['long_dtk_gap_line'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","\n","  # hy_min = np.min(plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * rtc_k)\n","  # hy_max = np.max(plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * rtc_k)  \n","\n","  # alpha = 1\n","  # lw = 4\n","  # # h_rtc_ratio_list = [config.loc_set.zone.dt_k]\n","  # h_rtc_ratio_list = [config.loc_set.zone.zone_dt_k]\n","  # # h_rtc_ratio_list = [0.272, 0.36, 0.4, 0.5]\n","  \n","  # for h_rtc_k in h_rtc_ratio_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df['short_dtk_plot_1'].values - plot_df['short_dtk_plot_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['long_dtk_plot_1'].values + plot_df['long_dtk_plot_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['h_short_tp_1'].values - plot_df['h_short_tp_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['h_long_tp_1'].values + plot_df['h_long_tp_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","\n","  # # hy_min = np.min(plot_df['short_dtk_plot_1'].values - plot_df['short_dtk_plot_gap'].values * h_rtc_k)\n","  # # hy_max = np.max(plot_df['long_dtk_plot_1'].values + plot_df['long_dtk_plot_gap'].values * h_rtc_k)  \n","\n","  # ------------- y lim ------------- #  \n","  y_max = max(np.max(plot_df[yrange_colname]))\n","  y_min = min(np.min(plot_df[yrange_colname]))\n","  # y_max = max(y_max, y_max_)\n","  # y_min = min(y_min, y_min_)\n","  \n","  # hy_min = np.min(plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * 0.36)\n","  # hy_max = np.max(plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * 0.36)  \n","  # y_max = max(y_max, y_max_, hy_max)\n","  # y_min = min(y_min, y_min_, hy_min)\n","\n","  if np.isnan(y_max) or np.isnan(y_min):\n","    print('continued in yminmax')\n","    continue\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","\n","  plt.ylim(y_min, y_max)\n","\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  #           rsi          #    \n","  plt.subplot(gs[odds + 1])\n","  alpha = 1\n","  for rsi_ in rsi_list:\n","    plt.step(np.arange(len(plot_df)), plot_df[rsi_].values, 'g', alpha=alpha)\n","    # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","    alpha -= 0.2\n","  plt.axhline(50, linestyle='--')\n","  plt.axhline(50 + config.loc_set.point.osc_band, linestyle='--')\n","  plt.axhline(50 - config.loc_set.point.osc_band, linestyle='--')\n","  \n","  plt.axvline(prev_plotsize, linestyle='--')\n","  \n","  #           cci          #    \n","  # plt.subplot(gs[odds + 1])\n","  # alpha = 1\n","  # for cci_ in cci_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cci_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axhline(config.loc_set.point.osc_band, linestyle='--')\n","  # plt.axhline(-config.loc_set.point.osc_band, linestyle='--')\n","  \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","\n","\n","  if len(plot_df) > x_max:\n","    x_margin = x_max / 20\n","    plt.xlim(0 - x_margin, x_max + x_margin)\n","\n","\n","  if not save_plot:\n","    if odds == 2:\n","      plt.show()\n","      plt.close()\n","  \n","  else:\n","    # ---------- save mode ---------- #\n","    fig_name = plot_check_dir +  \"/%s.png\" % t_i\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","\n","  # plt.close()  \n","  print()\n","\n","  # break\n"],"metadata":{"id":"inQ6f-CDZYkr"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"13a-U32Uy50I"},"source":["### brief np_pr survey"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"L9LdjV2uUWnp"},"outputs":[],"source":["# plot_pr_list[:100]\n","\n","plt.plot(np_pr)\n","plt.axhline(1)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"TBE0l6dHRYrE"},"source":["### whole pr & chart sync"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":877},"executionInfo":{"elapsed":1436,"status":"ok","timestamp":1636355589887,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"-txULkhXRbz5","outputId":"7cda9fc7-4a4e-4c52-ffa3-a974b5f7c66f"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 3 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]},{"data":{"image/png":"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\n","text/plain":["<Figure size 640x480 with 3 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]}],"source":["#     chunky survey 필요함    #\n","chunk_size = 50000\n","\n","sync_pr = np.ones(len(res_df))\n","sync_tr = np.zeros(len(res_df))\n","# sync_tr = np.empty(len(res_df))\n","# sync_tr[:] = np.nan\n","\n","max_tr = np.max(tp_ratio_list)\n","min_tr = np.min(tp_ratio_list)\n","\n","for ck_i in range(0, len(res_df), chunk_size):\n","\n","  chunked_df = res_df.iloc[ck_i:ck_i + chunk_size]\n","  # break\n","\n","  for pr_, eptp_idx, tr_ in zip(pr_list[ck_i:ck_i + chunk_size], trade_list[ck_i:ck_i + chunk_size], tp_ratio_list[ck_i:ck_i + chunk_size]):\n","    # print(pr_, eptp_idx)\n","    sync_pr[eptp_idx[-1][0]] = pr_\n","    sync_tr[eptp_idx[-1][0]] = tr_\n","    # break\n","\n","  chunked_pr = sync_pr[ck_i:ck_i + chunk_size]\n","  chunked_tr = sync_tr[ck_i:ck_i + chunk_size]\n","  chunked_tr = np.where(np.isnan(chunked_tr), pd.Series(chunked_tr).shift(1), chunked_tr)\n","\n","  # plt.figure(figsize=(8, 6))\n","\n","  plt.subplot(311)\n","  plt.plot(np.arange(len(chunked_df)), chunked_df['close'])\n","  # plt.show()\n","\n","  plt.subplot(312)\n","  plt.plot(np.cumprod(chunked_pr))\n","  \n","  plt.subplot(313)\n","  plt.plot(chunked_tr)\n","  plt.ylim(min_tr + 0.5 * (max_tr - min_tr), max_tr)\n","  \n","  plt.show()\n","  print()\n"]},{"cell_type":"markdown","metadata":{"id":"Qys2Bw5Ou3u9"},"source":["### plot indi. legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pi5ntOOVu6JT"},"outputs":[],"source":["\n","  # ---------------------- ma ---------------------- #\n","   # --------- ema --------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(ema_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  #   # --------- sma --------- #\n","  # alpha = 1\n","  # for sm_i, sma in enumerate(sma_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 4\n","  #   plt.step(np.arange(len(plot_df)), plot_df[sma].values, alpha=alpha, color='#e91e63', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  \n","  # ---------------------- cb ---------------------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(cb_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#5b9cf6', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","\n","  \n","  # ---------------------- sar ---------------------- #\n","  # alpha = 1\n","  # markersize = 5\n","  # for sar in sar_list:\n","  #   plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","  #   markersize += 1\n","  #   alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  # alpha = 0.7\n","  # for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","  #                     where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","  #                     where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","  #   alpha -= 0.05\n","  \n","\n","\n","  # ---------------------- outer price indi. ---------------------- #\n","  #           macd          #\n","  # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","    \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for stoch_ in stoch_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[stoch_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(stoch_upper, linestyle='--')\n","  # plt.axhline(stoch_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- cctbbo ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for cctbbo in cctbbo_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cctbbo].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(cctbbo_upper, linestyle='--')\n","  # plt.axhline(cctbbo_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- ema_roc ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for emaroc in emaroc_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[emaroc].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","  \n","  # ---------- bbw ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for bbwp_ in bbwp_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[bbwp_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(bbwp_thresh, linestyle='--')\n","\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n"]},{"cell_type":"markdown","metadata":{"id":"59nW2aKYzkN8"},"source":["### plot all indicator (stepline ver.)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":828},"executionInfo":{"elapsed":3326,"status":"ok","timestamp":1631665238032,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"JDH4rXgNzno6","outputId":"3ee8589d-27d7-4433-ed78-7bb1233cf175"},"outputs":[{"name":"stdout","output_type":"stream","text":["short real pr : [0.95849245]\n","long real pr : [1.0378222]\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 864x1152 with 2 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]}],"source":["save_plot = False\n","\n","\n","if save_plot:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".xlsx\", \"\")\n","  try:\n","    os.mkdir(plot_check_dir)\n","  except:\n","\n","    #     remove existing dir   #\n","    shutil.rmtree(plot_check_dir)\n","    print(plot_check_dir, 'removed !')\n","    os.mkdir(plot_check_dir)\n","    # pass\n","    \n","# prev_plotsize = 120\n","prev_plotsize = 150\n","post_plotsize = 20\n","\n","# inversion = True\n","inversion = False\n","\n","# hedge = True\n","# hedge = False\n","\n","\n","if inversion:  \n","\n","    plot_pr_list = rev_np_pr\n","    h_plot_pr_list = h_rev_np_pr  # hedge\n","\n","else:\n","\n","    plot_pr_list = np_pr\n","    try:\n","      h_plot_pr_list = h_np_pr\n","    except Exception as e:\n","      print(\"error in h_plot_pr :\", e)\n","      h_plot_pr_list = np_pr\n","\n","\n","#         select plot columns       #\n","major_st_list = ['major_ST1_Up', 'major_ST1_Down', 'major_ST2_Up', 'major_ST2_Down', 'major_ST3_Up', 'major_ST3_Down',\n","                 'major_middle_line', 'major_upper_middle', 'major_lower_middle']\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower'] # + major_st_list\n","\n","\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1',  'senkou_a2']\n","senkoub_list = ['senkou_b1',  'senkou_b2']\n","\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1']\n","\n","# ma_list = ['sma1', 'sma4']\n","ma_list = ['ema5']\n","\n","\n","#     -------------- under price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","# macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3']\n","# trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","trix_list = ['trix1', 'trix2', 'trix3']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","cctbbo_list = ['cctbbo']\n","emaroc_list = ['ema_roc']\n","\n","\n","#       \n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols + ichimoku_cols2\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + trix_list\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + ma_list\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + ma_list + macd_list + stoch_list + fisher_list + cctbbo_list\n","input_colname = basic_list + major_st_list + senkoua_list + senkoub_list + sar_list + stoch_list + fisher_list + emaroc_list\n","price_colname = basic_list + senkoua_list + senkoub_list + sar_list # currently just used for ymin, ymax\n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols\n","\n","\n","\n","\n","# for t_i, (initial_i, i, j) in enumerate(trade_list):\n","for t_i, (ep_idx_list_, tp_idx_list_) in enumerate(trade_list):\n","  # print(i, j)\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","\n","  # if i <= 4860:\n","  # if i == 1536:\n","  # if 100 < i < 1860:\n","  if ep_idx_list_[0] == 370530:\n","    pass\n","  else:\n","    continue\n","\n","  # if tp_state_list[t_i] != 'd-open':\n","  #   continue\n","\n","  # if (entry[i] == -1) and res_df['close'].iloc[i - 1] > short_ep.iloc[i]:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  # if plot_pr_list[t_i] > 0.5:\n","  # if plot_pr_list[t_i] > 1.0:\n","  # # if plot_pr_list[t_i] < 1.0:\n","  #   continue\n","\n","  # plot_df = res_df.iloc[i - prev_plotsize:j + post_plotsize, input_cols]\n","  plot_df = res_df.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize][input_colname]\n","\n","\n","  #       keep off-color st with another variable         #\n","  # st_trend_plot_df = res_df.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize, [7, 10, 13]]\n","  # st_trend_plot_df = res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend']].iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  st_trend_plot_df = res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend', 'major_ST1_Trend', 'major_ST2_Trend', 'major_ST3_Trend']].iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  # htf_st_trend_plot_df = res_df[['major_ST1_Trend', 'major_ST2_Trend', 'major_ST3_Trend']].iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","\n","  # y_max = np.max(plot_df.iloc[:, [4, 6, 8]])\n","  # y_min = np.min(plot_df.iloc[:, [5, 7, 9]])\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  \n","  # y_max = max(np.max(plot_df.iloc[:, [4, 6, 8]]))\n","  # y_min = min(np.min(plot_df.iloc[:, [5, 7, 9]]))\n","  \n","  y_max = max(np.max(plot_df[price_colname]))\n","  y_min = min(np.min(plot_df[price_colname]))\n","\n","  if np.isnan(y_max) or np.isnan(y_min):\n","    continue\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","  \n","  plot_df[\"off_color_upper_st1\"] = np.where(st_trend_plot_df['minor_ST1_Trend'] == 1, plot_df['minor_ST1_Up'], np.nan)\n","  plot_df[\"off_color_upper_st2\"] = np.where(st_trend_plot_df['minor_ST2_Trend'] == 1, plot_df['minor_ST2_Up'], np.nan)\n","  plot_df[\"off_color_upper_st3\"] = np.where(st_trend_plot_df['minor_ST3_Trend'] == 1, plot_df['minor_ST3_Up'], np.nan)\n","  plot_df[\"off_color_lower_st1\"] = np.where(st_trend_plot_df['minor_ST1_Trend'] == -1, plot_df['minor_ST1_Down'], np.nan)\n","  plot_df[\"off_color_lower_st2\"] = np.where(st_trend_plot_df['minor_ST2_Trend'] == -1, plot_df['minor_ST2_Down'], np.nan)\n","  plot_df[\"off_color_lower_st3\"] = np.where(st_trend_plot_df['minor_ST3_Trend'] == -1, plot_df['minor_ST3_Down'], np.nan)\n","\n","  plot_df[\"off_color_upper_hst1\"] = np.where(st_trend_plot_df['major_ST1_Trend'] == 1, plot_df['major_ST1_Up'], np.nan)\n","  plot_df[\"off_color_upper_hst2\"] = np.where(st_trend_plot_df['major_ST2_Trend'] == 1, plot_df['major_ST2_Up'], np.nan)\n","  plot_df[\"off_color_upper_hst3\"] = np.where(st_trend_plot_df['major_ST3_Trend'] == 1, plot_df['major_ST3_Up'], np.nan)\n","  plot_df[\"off_color_lower_hst1\"] = np.where(st_trend_plot_df['major_ST1_Trend'] == -1, plot_df['major_ST1_Down'], np.nan)\n","  plot_df[\"off_color_lower_hst2\"] = np.where(st_trend_plot_df['major_ST2_Trend'] == -1, plot_df['major_ST2_Down'], np.nan)\n","  plot_df[\"off_color_lower_hst3\"] = np.where(st_trend_plot_df['major_ST3_Trend'] == -1, plot_df['major_ST3_Down'], np.nan)\n","\n","\n","  #       replace st values with np.nan, using st trend     #\n","  plot_df['minor_ST1_Up'] = np.where(st_trend_plot_df['minor_ST1_Trend'] == 1, np.nan, plot_df['minor_ST1_Up'])\n","  plot_df['minor_ST2_Up'] = np.where(st_trend_plot_df['minor_ST2_Trend'] == 1, np.nan, plot_df['minor_ST2_Up'])\n","  plot_df['minor_ST3_Up'] = np.where(st_trend_plot_df['minor_ST3_Trend'] == 1, np.nan, plot_df['minor_ST3_Up'])\n","  plot_df['minor_ST1_Down'] = np.where(st_trend_plot_df['minor_ST1_Trend'] == -1, np.nan, plot_df['minor_ST1_Down'])\n","  plot_df['minor_ST2_Down'] = np.where(st_trend_plot_df['minor_ST2_Trend'] == -1, np.nan, plot_df['minor_ST2_Down'])\n","  plot_df['minor_ST3_Down'] = np.where(st_trend_plot_df['minor_ST3_Trend'] == -1, np.nan, plot_df['minor_ST3_Down'])\n","\n","  plot_df['major_ST1_Up'] = np.where(st_trend_plot_df['major_ST1_Trend'] == 1, np.nan, plot_df['major_ST1_Up'])\n","  plot_df['major_ST2_Up'] = np.where(st_trend_plot_df['major_ST2_Trend'] == 1, np.nan, plot_df['major_ST2_Up'])\n","  plot_df['major_ST3_Up'] = np.where(st_trend_plot_df['major_ST3_Trend'] == 1, np.nan, plot_df['major_ST3_Up'])\n","  plot_df['major_ST1_Down'] = np.where(st_trend_plot_df['major_ST1_Trend'] == -1, np.nan, plot_df['major_ST1_Down'])\n","  plot_df['major_ST2_Down'] = np.where(st_trend_plot_df['major_ST2_Trend'] == -1, np.nan, plot_df['major_ST2_Down'])\n","  plot_df['major_ST3_Down'] = np.where(st_trend_plot_df['major_ST3_Trend'] == -1, np.nan, plot_df['major_ST3_Down'])\n","\n","\n","  plot_short_ep = short_ep.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  plot_long_ep = long_ep.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","\n","  plot_upper_middle = (plot_df['middle_line'] + plot_df['min_upper']) / 2\n","  plot_lower_middle = (plot_df['middle_line'] + plot_df['max_lower']) / 2\n","\n","  plot_short_tp = short_tp.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  plot_long_tp = long_tp.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]  \n","\n","\n","  # fig = trendln.plot_support_resistance(plot_df['close'], accuracy=8, fromwindows=False, numbest=1,  window=30) # requires matplotlib - pip install matplotlib\n","\n","  fig = plt.figure(figsize=(12, 16))\n","  \n","  gs = gridspec.GridSpec(nrows=3, # row 몇 개 \n","                       ncols=1, # col 몇 개 \n","                       height_ratios=[3, 1, 1]\n","                      )\n","  \n","  # fig = plt.figure(figsize=(8, 12))\n","  # ax = fig.add_subplot(111)\n","  # ax = fig.add_subplot(311)\n","  ax = fig.add_subplot(gs[0])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='r', colordown='b')\n","\n","  plt.step(plot_df[['minor_ST1_Up', 'minor_ST2_Up', 'minor_ST3_Up']].values, 'r', alpha=1)  # upper on color\n","  plt.step(plot_df[['minor_ST1_Down', 'minor_ST2_Down', 'minor_ST3_Down']].values, 'b', alpha=1)  # lower on color\n","  \n","  plt.step(plot_df[['major_ST1_Up', 'major_ST2_Up', 'major_ST3_Up']].values, 'r', alpha=1, linewidth=3)  # major upper on color\n","  plt.step(plot_df[['major_ST1_Down', 'major_ST2_Down', 'major_ST3_Down']].values, 'b', alpha=1, linewidth=3)  # major lower on color\n","\n","  plt.step(plot_df[['middle_line']].values, 'fuchsia', alpha=1)  # middle \n","  plt.step(plot_df[['major_middle_line']].values, 'fuchsia', alpha=1, linewidth=3)  # major_middle \n","  \n","  plt.step(plot_df[['off_color_upper_st1', 'off_color_upper_st2', 'off_color_upper_st3']].values, 'r', alpha=1, linestyle=':')  # upper off color\n","  plt.step(plot_df[['off_color_lower_st1', 'off_color_lower_st2', 'off_color_lower_st3']].values, 'b', alpha=1, linestyle=':')  # lower off color\n","  \n","  plt.step(plot_df[['off_color_upper_hst1', 'off_color_upper_hst2', 'off_color_upper_hst3']].values, 'r', alpha=1, linestyle=':', linewidth=3)  # major upper off color\n","  plt.step(plot_df[['off_color_lower_hst1', 'off_color_lower_hst2', 'off_color_lower_hst3']].values, 'b', alpha=1, linestyle=':', linewidth=3)  # major lower off color\n","\n","\n","  # plt.step(np.arange(len(plot_df)), plot_short_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","  # plt.step(np.arange(len(plot_df)),plot_long_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","\n","  plt.step(np.arange(len(plot_df)), plot_upper_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","  plt.step(np.arange(len(plot_df)), plot_lower_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","\n","  plt.step(plot_df[['major_upper_middle']].values, 'g', linestyle='--', alpha=1, linewidth=3)  # major_middle \n","  plt.step(plot_df[['major_lower_middle']].values, 'g', linestyle='--', alpha=1, linewidth=3)  # major_middle \n","  \n","\n","  # plt.step(np.arange(len(plot_df)), plot_short_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","  # plt.step(np.arange(len(plot_df)), plot_long_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","\n","\n","\n","  # ---------------------- on price indicator part ---------------------- #\n","\n","  # ---------------------- sma ---------------------- #\n","  # alpha = 1\n","  # for sm_i, sma in enumerate(ma_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[sma].values, alpha=alpha, color='black', linewidth=lw)\n","  #   alpha -= 0.2\n","  \n","  #               sar               #\n","  alpha = 1\n","  markersize = 5\n","  for sar in sar_list:\n","    plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","    markersize += 1\n","    alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  alpha = 0.7\n","  for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","                      where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","                      where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","    alpha -= 0.05\n","  \n","  # ------------------------------------------------------------- #\n","\n","\n","  #       ep & tp     #\n","  # if i != initial_i:\n","  # if len(ep_idx_list_) > 1:\n","  \n","  # ------------- initial order ------------- #\n","  plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  for ep_i in range(len(ep_idx_list_)):\n","    plt.axvline(prev_plotsize + (ep_idx_list_[ep_i] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","\n","  # plt.axvline(prev_plotsize, alpha=0.5, linestyle='--')\n","  plt.axhline(ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='lime')  # ep line axhline\n","\n","  for sub_i in range(len(ep_tp_list[t_i][1])):\n","    plt.axhline(ep_tp_list[t_i][1][sub_i], linestyle='-', xmin=0.75 + 0.05 * (sub_i + 1) , xmax=1, linewidth=3, color='lime')  # tp line axhline\n","    # plt.axhline(ep_tp_list[t_i][1], linestyle='-', xmin=0.9, xmax=1, linewidth=3)  # tp line axhline  \n","    plt.axvline(prev_plotsize + (tp_idx_list_[sub_i] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","\n","\n","  #         hedge ep & tp         #\n","  h_i = h_trade_list[t_i][1]\n","  if h_i is not None:\n","    plt.axvline(prev_plotsize + (h_i - ep_idx_list_[0]), linestyle='--')\n","    plt.axhline(h_ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='magenta')  # ep line axhline\n","    plt.axhline(h_ep_tp_list[t_i][1], linestyle='-', xmin=0.85, xmax=1, linewidth=3, color='magenta')  # tp line axhline\n","\n","  \n","  #         check pr        #\n","  if not static_lvrg:\n","    plt.title(\"%s ~ %s -> %.5f\\n %s\\n h_pr : %.5f\\nlvrg : %s\\ntp_ratio : %.2f\" % (ep_idx_list_[0], tp_idx_list_[-1], plot_pr_list[t_i], tp_state_list[t_i], h_plot_pr_list[t_i], lvrg_list[t_i], tp_ratio_list[t_i]))\n","  else:\n","    plt.title(\"%s ~ %s -> %.5f\\n %s\\n h_pr : %.5f\\ntp_ratio : %.2f\" % (ep_idx_list_[0], tp_idx_list_[-1], plot_pr_list[t_i], tp_state_list[t_i], h_plot_pr_list[t_i], tp_ratio_list[t_i]))\n","\n","  print(\"short real pr :\", (ep_tp_list[t_i][0] / ep_tp_list[t_i][1][sub_i] - fee - 1) * lvrg + 1)\n","  print(\"long real pr :\", (ep_tp_list[t_i][1][sub_i] / ep_tp_list[t_i][0] - fee - 1) * lvrg + 1)\n","\n","  #           y lim         #\n","  plt.ylim(y_min, y_max)\n","\n","\n","  # ---------------------- outer price indi. ---------------------- #\n","  #           macd          #\n","  # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","    \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for stoch in stoch_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[stoch].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(stoch_upper, linestyle='--')\n","  # plt.axhline(stoch_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- cctbbo ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for cctbbo in cctbbo_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cctbbo].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(cctbbo_upper, linestyle='--')\n","  # plt.axhline(cctbbo_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- ema_roc ---------- #  \n","  plt.subplot(gs[1])\n","  alpha = 1\n","  for emaroc in emaroc_list:\n","    plt.step(np.arange(len(plot_df)), plot_df[emaroc].values, 'g', alpha=alpha)\n","    # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","    alpha -= 0.2\n","  plt.axvline(prev_plotsize, linestyle='--')\n","  plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","  plt.axhline(0, linestyle='--')\n","\n","\n","\n","\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  if not save_plot:\n","    plt.show()\n","  \n","  else:\n","    # ---------- save mode ---------- #\n","    fig_name = plot_check_dir +  \"/%s.png\" % t_i\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","\n","  \n","  plt.close()\n","  print()\n","\n","  # break\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KGuJu2j4Aby9"},"outputs":[],"source":["# print()\n","for item in os.listdir(current_path + \"plot_check/\"):\n","  if item.endswith('png'):\n","    os.remove(current_path + \"plot_check/\" + item)\n","    print(current_path + \"plot_check/\" + item, \"removed !\")"]},{"cell_type":"markdown","metadata":{"id":"cj9X6S1jJjER"},"source":["### plot nontp case"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Gb1jGrS4Jl8A"},"outputs":[],"source":["prev_plotsize = 50\n","\n","# inversion = True\n","inversion = False\n","\n","# hedge = True\n","# hedge = False\n","\n","short_ver = False\n","\n","\n","if inversion:  \n","\n","    plot_pr_list = rev_np_pr\n","    h_plot_pr_list = h_rev_np_pr  # hedge\n","\n","else:\n","\n","    plot_pr_list = np_pr\n","    h_plot_pr_list = h_np_pr\n","\n","\n","\n","#         select plot columns       #\n","# basic_cols = [0, 1, 2, 3, 5, 6, 8, 9, 11, 12, 14] # you don't need to touch\n","\n","# sar_cols = [15, 18] # 15 ~ 19\n","# ichimoku_cols = [20, 21]  # 20 ~ 29\n","# # ichimoku_cols = [22, 23]  # 20 ~ 29\n","# ichimoku_cols2 = [22, 23]  # 20 ~ 29\n","# macd_cols = [30]  # 30 ~ 34\n","\n","# print(res_df.columns[basic_cols])\n","# break\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower']\n","# senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","# senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","\n","#     -------------- under price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher']\n","cctbbo_list = ['cctbbo']\n","\n","\n","#       \n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols + ichimoku_cols2\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + trix_list\n","input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + stoch_list + fisher_list + cctbbo_list\n","price_colname = basic_list + senkoua_list + senkoub_list + sar_list \n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols\n","\n","\n","if short_ver:\n","  nontp_indexs = nontp_short_indexs\n","  nontp_liqd_list = nontp_short_liqd_list\n","  nontp_pr_list = nontp_short_pr_list\n","  nontp_ep = nontp_short_ep_list\n","else:\n","  nontp_indexs = nontp_long_indexs\n","  nontp_liqd_list = nontp_long_liqd_list\n","  nontp_pr_list = nontp_long_pr_list\n","  nontp_ep = nontp_long_ep_list\n","\n","\n","for t_i, i in enumerate(nontp_indexs):\n","\n","  j = len(res_df) - 1\n","\n","  # print(i, j)\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","\n","  # if i <= 4860:\n","  # if i == 1536:\n","  # # if 1800 < i < 1860:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  # if tp_state_list[t_i] != 'd-open':\n","  #   continue\n","\n","  # if (entry[i] == -1) and res_df['close'].iloc[i - 1] > upper_ep.iloc[i]:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  # if plot_pr_list[t_i] > 0.5:\n","  # if plot_pr_list[t_i] > 1.0:\n","  # # if plot_pr_list[t_i] < 1.0:\n","  #   continue\n","\n","  # plot_df = res_df.iloc[i - prev_plotsize:j + 1, input_cols]\n","  plot_df = res_df.iloc[i - prev_plotsize:j + 1][input_colname]\n","\n","\n","  #       keep off-color st with another variable         #\n","  st_trend_plot_df = res_df.iloc[i - prev_plotsize:j + 1, [7, 10, 13]]\n","\n","  # y_max = np.max(plot_df.iloc[:, [4, 6, 8]])\n","  # y_min = np.min(plot_df.iloc[:, [5, 7, 9]])\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  \n","  # y_max = max(np.max(plot_df.iloc[:, [4, 6, 8]]))\n","  # y_min = min(np.min(plot_df.iloc[:, [5, 7, 9]]))\n","  \n","  y_max = max(np.max(plot_df[price_colname]))\n","  y_min = min(np.min(plot_df[price_colname]))\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","\n","  plot_df[\"off_color_upper_st1\"] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, plot_df.iloc[:, [4]], np.nan)\n","  plot_df[\"off_color_upper_st2\"] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, plot_df.iloc[:, [6]], np.nan)\n","  plot_df[\"off_color_upper_st3\"] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, plot_df.iloc[:, [8]], np.nan)\n","  plot_df[\"off_color_lower_st1\"] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, plot_df.iloc[:, [5]], np.nan)\n","  plot_df[\"off_color_lower_st2\"] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, plot_df.iloc[:, [7]], np.nan)\n","  plot_df[\"off_color_lower_st3\"] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, plot_df.iloc[:, [9]], np.nan)\n","\n","\n","  #       replace st values with np.nan, using st trend     #\n","  plot_df.iloc[:, [4]] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, np.nan, plot_df.iloc[:, [4]])\n","  plot_df.iloc[:, [6]] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, np.nan, plot_df.iloc[:, [6]])\n","  plot_df.iloc[:, [8]] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, np.nan, plot_df.iloc[:, [8]])\n","  plot_df.iloc[:, [5]] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, np.nan, plot_df.iloc[:, [5]])\n","  plot_df.iloc[:, [7]] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, np.nan, plot_df.iloc[:, [7]])\n","  plot_df.iloc[:, [9]] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, np.nan, plot_df.iloc[:, [9]])\n","\n","\n","  plot_upper_ep = upper_ep.iloc[i - prev_plotsize:j + 1]\n","  plot_lower_ep = lower_ep.iloc[i - prev_plotsize:j + 1]\n","\n","  plot_upper_middle = (plot_df['middle_line'] + plot_df['min_upper']) / 2\n","  plot_lower_middle = (plot_df['middle_line'] + plot_df['max_lower']) / 2\n","\n","  plot_short_tp = short_tp.iloc[i - prev_plotsize:j + 1]\n","  plot_long_tp = long_tp.iloc[i - prev_plotsize:j + 1]  \n","\n","\n","\n","  # fig = plt.figure(figsize=(12, 16))\n","  fig = plt.figure(figsize=(12, 16))\n","  \n","  gs = gridspec.GridSpec(nrows=3, # row 몇 개 \n","                       ncols=1, # col 몇 개 \n","                       height_ratios=[3, 1, 1]\n","                      )\n","  \n","  # fig = plt.figure(figsize=(8, 12))\n","  # ax = fig.add_subplot(111)\n","  # ax = fig.add_subplot(311)\n","  ax = fig.add_subplot(gs[0])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='r', colordown='b')\n","\n","  # print(plot_df.values[:, 4:])\n","  plt.step(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper on color\n","  # plt.plot(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper on color\n","  plt.step(plot_df.values[:, [5, 7, 9]], 'b', alpha=1)  # lower on color\n","  plt.step(plot_df.values[:, [10]], 'fuchsia', alpha=1)  # middle\n","  \n","  plt.step(plot_df.values[:, -6:-3], 'r', alpha=1, linestyle=':')  # upper off color\n","  plt.step(plot_df.values[:, -3:], 'b', alpha=1, linestyle=':')  # lower off color\n","\n","\n","\n","  # plt.step(np.arange(len(plot_df)), plot_upper_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","  # plt.step(np.arange(len(plot_df)),plot_lower_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","\n","  plt.step(np.arange(len(plot_df)), plot_upper_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","  plt.step(np.arange(len(plot_df)), plot_lower_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","\n","  # plt.step(np.arange(len(plot_df)), plot_short_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","  # plt.step(np.arange(len(plot_df)), plot_long_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","\n","\n","\n","  # ---------------------- indicator part ---------------------- #\n","  \n","  #               sar               #\n","  alpha = 1\n","  markersize = 5\n","  for sar in sar_list:\n","    plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","    markersize += 1\n","    alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  alpha = 0.7\n","  for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","                      where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","                      where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","    alpha -= 0.05\n","  \n","  # ------------------------------------------------------------- #\n","\n","\n","  #       ep & tp     #\n","  if i != initial_i:\n","    plt.axvline(prev_plotsize - (i - initial_i), alpha=0.5, linestyle='--')\n","  plt.axvline(prev_plotsize, alpha=0.5, linestyle='--')\n","  plt.axhline(nontp_ep[t_i], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='lime')  # ep line axhline\n","\n","  # for sub_i in range(len(ep_tp_list[t_i][1])):\n","  #   plt.axhline(ep_tp_list[t_i][1][sub_i], linestyle='-', xmin=0.75 + 0.05 * (sub_i + 1) , xmax=1, linewidth=3, color='lime')  # tp line axhline\n","    # plt.axhline(ep_tp_list[t_i][1], linestyle='-', xmin=0.9, xmax=1, linewidth=3)  # tp line axhline    \n","\n","  #         hedge ep & tp         #\n","  # h_i = h_trade_list[t_i][1]\n","  # if h_i is not None:\n","  #   plt.axvline(prev_plotsize + (h_i - i), linestyle='--')\n","  #   plt.axhline(h_ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='magenta')  # ep line axhline\n","  #   plt.axhline(h_ep_tp_list[t_i][1], linestyle='-', xmin=0.85, xmax=1, linewidth=3, color='magenta')  # tp line axhline\n","\n","  \n","  #         check pr        #\n","  plt.title(\"%s ~ %s -> liqd : %.2f\\npr : %.2f\" % (i, j, nontp_liqd_list[t_i], nontp_pr_list[t_i]))\n","\n","  #           y lim         #\n","  plt.ylim(y_min, y_max)\n","\n","\n","  # #           macd          #\n","  # # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # plt.subplot(313)\n","  plt.subplot(gs[1])\n","  alpha = 1\n","  for stoch in stoch_list:\n","    plt.step(np.arange(len(plot_df)), plot_df[stoch].values, 'g', alpha=alpha)\n","    # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","    alpha -= 0.2\n","  plt.axvline(prev_plotsize, linestyle='--')\n","  plt.axhline(50, linestyle='--')\n","  plt.axhline(stoch_upper, linestyle='--')\n","  plt.axhline(stoch_lower, linestyle='--')\n","\n","\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  plt.show()\n","  # plt.draw()\n","  plt.close()\n","  print()\n","\n","  # break\n"]},{"cell_type":"markdown","metadata":{"id":"tApzvz_gK9lR"},"source":["## legacy"]},{"cell_type":"markdown","metadata":{"id":"FaRGwR4NEop2"},"source":["### shifting"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"a8aYsjEgQnGF"},"outputs":[],"source":["org_res_df = res_df.copy()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":291,"status":"ok","timestamp":1626515312874,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"RF3RM2G2RCb1","outputId":"ba8f6a75-d4df-4f85-cd0f-190935341f7a"},"outputs":[{"name":"stdout","output_type":"stream","text":["                            open     high  ...  min_upper  max_lower\n","2021-06-30 23:55:59.999  0.27223  0.27281  ...   0.272145    0.27005\n","2021-06-30 23:56:59.999  0.27274  0.27290  ...   0.272145    0.27005\n","2021-06-30 23:57:59.999  0.27246  0.27257  ...   0.272523    0.27021\n","2021-06-30 23:58:59.999  0.27166  0.27183  ...   0.272523    0.27021\n","2021-06-30 23:59:59.999  0.27144  0.27211  ...   0.272523    0.27021\n","\n","[5 rows x 37 columns]\n","                            open     high  ...  min_upper  max_lower\n","2021-06-30 23:55:59.999  0.27223  0.27281  ...   0.272523    0.27021\n","2021-06-30 23:56:59.999  0.27274  0.27290  ...        NaN        NaN\n","2021-06-30 23:57:59.999  0.27246  0.27257  ...        NaN        NaN\n","2021-06-30 23:58:59.999  0.27166  0.27183  ...        NaN        NaN\n","2021-06-30 23:59:59.999  0.27144  0.27211  ...        NaN        NaN\n","\n","[5 rows x 37 columns]\n"]}],"source":["#         refresh res_df      #\n","res_df = org_res_df.copy()\n","print(org_res_df.tail(5))\n","\n","# break\n","\n","\n","shift_size = -4\n","# shift_size = -1\n","# shift_size = -7\n","# shift_size = +3\n","\n","res_df['min_upper'] = res_df['min_upper'].shift(shift_size)\n","res_df['max_lower'] = res_df['max_lower'].shift(shift_size)\n","res_df['minor_ST1_Trend'] = res_df['minor_ST1_Trend'].shift(shift_size)\n","res_df['minor_ST2_Trend'] = res_df['minor_ST2_Trend'].shift(shift_size)\n","res_df['minor_ST3_Trend'] = res_df['minor_ST3_Trend'].shift(shift_size)\n","res_df['middle_line'] = res_df['middle_line'].shift(shift_size)\n","\n","print(res_df.tail(5))"]},{"cell_type":"markdown","metadata":{"id":"2gxvme1PC6ha"},"source":["### load model"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5831,"status":"ok","timestamp":1628862368878,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"dtYdAuSsC72_","outputId":"e8dccc53-aaa7-4bab-ed8d-753f634c08d6"},"outputs":[{"name":"stdout","output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/resnet/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5\n","94773248/94765736 [==============================] - 1s 0us/step\n"]}],"source":["# model_name = 'inner_tick_cnnreg_lscalemm_prefee_gpu_%s_%s_%s_%s_%s.h5'\n","\n","# model = tf.keras.models.load_model(ckpt_path + model_name)\n","\n","from tensorflow.keras.applications.resnet50 import ResNet50\n","\n","model = ResNet50(weights='imagenet', include_top=False)\n","# model.summary()\n"]},{"cell_type":"markdown","metadata":{"id":"5la6usMOFzkX"},"source":["#### gen selected vector"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oQk3-jbKF8FB"},"outputs":[],"source":["def min_max_scale(npy_x):\n","\n","  return (npy_x - np.min(npy_x)) / (np.max(npy_x) - np.min(npy_x))\n","\n","def expand_dims(npy_x):\n","\n","  row, col = npy_x.shape\n","  npy_x2 = np.array(npy_x).reshape(-1, row, col, 1).astype(np.float32)\n","  # input_x = np.array(data_x).reshape(-1, row, col).astype(np.float32)\n","\n","  #     1c to 3c    #\n","  npy_x3 = npy_x2 * np.ones(3, dtype=np.float32)[None, None, None, :]\n","\n","  return npy_x3\n","\n","\n","def vector_dist(f1, f2):\n","  return np.linalg.norm(f1-f2)\n","\n","\n","\n","# ------------------------ params ------------------------  #\n","selected_i = 500\n","input_size = 100\n","\n","\n","\n","#   1. 선택된 인덱스를 입력받았을 때, input generating 형태만 만들어놓고,     #\n","#   1-1. input cols 필요함    #\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower']\n","# senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","# senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","\n","sma_list = ['sma']\n","\n","#     -------------- outer price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","cctbbo_list = ['cctbbo']\n","\n","selected_price_colname = basic_list + senkoua_list + senkoub_list + sar_list\n","selected_outprice_colname = [macd_list]\n","\n","\n","#         global scaling for outer price data       #\n","#         1. nan 처리       #\n","\n","# # print((np.isnan(df.values)))\n","# print(\"np.sum(np.isnan(df.values), axis=0) :\", np.sum(np.isnan(df.values), axis=0))\n","\n","# max_nan = np.max(np.sum(np.isnan(df.values), axis=0))\n","# # print(max_nan)\n","\n","# df = df.iloc[max_nan:-max_nan]\n","\n","# total_gdata = []\n","# for g_col in selected_outprice_colname:\n","\n","#   temp_data = min_max_scale(res_df[g_col])\n","#   total_gdata.append(temp_data)\n","\n","\n","\n","#   1-2. cols 에 따른, scaling method 구분함    #\n","onprice_input_x = min_max_scale(res_df[selected_price_colname].iloc[selected_i - input_size:selected_i].values)\n","print(onprice_input_x.shape)\n","\n","\n","#   2. plot_check 에서 본인이 원하는 shape 의 인덱스를 선택   #\n","#   3. vertorize, \n","#   3-1. input generator 를 이용해 entry signal 발생할 때마다 dist 비교 진행    #\n","re_onprice_input_x = expand_dims(onprice_input_x)\n","print(re_onprice_input_x.shape)\n","      \n","# break\n","\n","selected_vector = model.predict(re_onprice_input_x, verbose=1)\n","print(selected_vector.shape)"]},{"cell_type":"markdown","metadata":{"id":"OJqkmkpsLCYC"},"source":["### tr_tresh calc"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gcpo4MGd9Wm4"},"outputs":[],"source":["res_wr = 0.6\n","# tr_thresh = 1\n","# tr_thresh = ((1 - res_wr) / res_wr) ** 0.5\n","tr_thresh = ((1 - res_wr) / res_wr) + 0.01\n","# tr_thresh = 2.6\n","print(\"res_wr :\", res_wr)\n","print(\"tr_thresh :\", tr_thresh)\n","\n","\n","#   단리    #\n","trade_num = 1000\n","asset = 1 # thousand USDT\n","test_loss_gap = 0.95  # fee adjusted\n","test_pr_gap = 1 + (1 - test_loss_gap) * tr_thresh\n","\n","test_loss_cnt = trade_num * (1 - res_wr)\n","test_pr_cnt = trade_num * res_wr\n","\n","test_trade_list = [test_pr_gap] * int(test_pr_cnt) + [test_loss_gap] * int(test_loss_cnt)\n","random.shuffle(test_trade_list)\n","# print(\"len(test_trade_list) :\", len(test_trade_list))\n","print(test_trade_list[:10])\n","print()\n","\n","# print(\"%.5f\" % np.cumprod(test_trade_list)[-1])\n","for tr_thresh_ in np.arange(1, 3, 0.2):\n","  if (1 + (1 - test_loss_gap) * tr_thresh_) ** test_pr_cnt * test_loss_gap ** test_loss_cnt > 1:\n","    break\n","print(\"복리를 위한 tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumprod(test_trade_list)[-1] :\", np.cumprod(test_trade_list)[-1])\n","print(\"total_pr : \", np.cumprod(test_trade_list)[-1])\n","print()\n","#   복리 tr_thresh  #\n","#   1. trade_num 에 영향 받지 않음\n","#   2. loss_gap 에 비례함\n","\n","for tr_thresh_ in np.arange(1, 3, 0.01):\n","  if ((1 - test_loss_gap) * tr_thresh_) * test_pr_cnt + (test_loss_gap - 1) * test_loss_cnt > 0:\n","    break\n","np_test_trade = np.array(test_trade_list) - 1\n","print(np_test_trade[:10])\n","# print(\"%.3f\" % )\n","print(\"단리를 위한 tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumsum(np_test_trade)[-1] :\", np.cumsum(np_test_trade)[-1])\n","print(\"total_pr : \", 1 + np.cumsum(np_test_trade)[-1])\n"]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":["Ic1mfmwWCIBu","AUSBU7T8Suzi","mEKyVbHWSuzi","VdukVo5-Suzj","Bw5JibDKSuzj","Pe0QpnORSuzk","4oZ1ohTtSuzk","E0n53hflJbnp","jTN3M842Suzl","MlFkpO1MSuzl","t1E_eAyPSuzm","nUs4fjVHSuzl","WVAKq3i8Suzm","L7l5CTJfSuzn","x_XGJqBi8Jex","MSUY4nnku3s9","epgS5Dksu-HX","M8-EChy0VsDr","xpyP5t8Ht_pE","dzla8i9_ysmP","WC0ujlYg0DZD","Ksth13T0spcQ","Up1TNNxbfKbk","zQ-roiifspcX","X0FsT-8FZRti","59nW2aKYzkN8","cj9X6S1jJjER","tApzvz_gK9lR","FaRGwR4NEop2","2gxvme1PC6ha","5la6usMOFzkX","OJqkmkpsLCYC"],"name":"ATv5_2_backi2(0225_tonp).ipynb","toc_visible":true,"provenance":[],"authorship_tag":"ABX9TyPN6F3TkV0ZfWPIcy+7fl9B"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}