{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python [conda env:tensorflow2_p36]","language":"python","name":"conda-env-tensorflow2_p36-py"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.5"},"colab":{"name":"close_updown_cnn_eth_rapidascend_tvnon_shuffle.ipynb","provenance":[{"file_id":"1z4z_KLPzc6RWsxo3X_dHbpByxUAgjoMJ","timestamp":1583754134002}],"collapsed_sections":["6XibtKgphXyQ"],"toc_visible":true,"machine_shape":"hm"},"accelerator":"GPU","widgets":{"application/vnd.jupyter.widget-state+json":{"e240c935ea9641679219413f15ecd682":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_8bc00e073fc84af08671395921d68651","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_6bfb305c12a04f2fa6cab657ae10f7fa","IPY_MODEL_17e5961bf9af4f31ae47f26c78c9f386"]}},"8bc00e073fc84af08671395921d68651":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"6bfb305c12a04f2fa6cab657ae10f7fa":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_f8af0d0b39324b488f3845cbd9ce3adb","_dom_classes":[],"description":"100%","_model_name":"FloatProgressModel","bar_style":"success","max":17926,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":17926,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_75b217fb5bf543d7a3f6e5e1a0f19204"}},"17e5961bf9af4f31ae47f26c78c9f386":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_974e74f55b8d4df980a4e945988b41ac","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 17926/17926 [00:32&lt;00:00, 552.19it/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_a5b9c5d042c44f3b99b5d0f1033a41b9"}},"f8af0d0b39324b488f3845cbd9ce3adb":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"75b217fb5bf543d7a3f6e5e1a0f19204":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"974e74f55b8d4df980a4e945988b41ac":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"a5b9c5d042c44f3b99b5d0f1033a41b9":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}}}}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AK9FjWwLOyay","executionInfo":{"status":"ok","timestamp":1621947979803,"user_tz":-540,"elapsed":34928,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"7bc89f05-bc79-462c-9ac1-1671b768b836"},"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","import os, sys\n","\n","current_path = '/content/drive/My Drive/Colab Notebooks/300/'\n","\n","os.chdir(current_path)"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"8uqYv5StTazo"},"source":["### **Requirements**"]},{"cell_type":"code","metadata":{"id":"9qGt60DKTZmf"},"source":["# !pip install statsmodels==0.12.2\n","\n","# import statsmodels\n","# statsmodels.__version__"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"y7bVjhlwPI_-"},"source":["### load file list"]},{"cell_type":"code","metadata":{"id":"aDkU3tMiM2lO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621948055318,"user_tz":-540,"elapsed":1753,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"eb92ff8e-1061-4295-8a59-7eba0a228ee0"},"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","\n","interval = '30m'\n","date_path = './candlestick_concated/%s/2021-04-27/' % interval\n","file_list = os.listdir(date_path)\n","\n","print((file_list))"],"execution_count":3,"outputs":[{"output_type":"stream","text":["['2021-04-27 BTCUSDT.xlsx', '2021-04-27 ETHUSDT.xlsx', '2021-04-27 BCHUSDT.xlsx', '2021-04-27 XRPUSDT.xlsx', '2021-04-27 EOSUSDT.xlsx', '2021-04-27 LTCUSDT.xlsx', '2021-04-27 ETCUSDT.xlsx', '2021-04-27 LINKUSDT.xlsx', '2021-04-27 XLMUSDT.xlsx', '2021-04-27 ADAUSDT.xlsx', '2021-04-27 XMRUSDT.xlsx', '2021-04-27 SXPUSDT.xlsx', '2021-04-27 KAVAUSDT.xlsx', '2021-04-27 BANDUSDT.xlsx', '2021-04-27 DASHUSDT.xlsx', '2021-04-27 ZECUSDT.xlsx', '2021-04-27 XTZUSDT.xlsx', '2021-04-27 BNBUSDT.xlsx', '2021-04-27 ATOMUSDT.xlsx', '2021-04-27 ONTUSDT.xlsx', '2021-04-27 IOTAUSDT.xlsx', '2021-04-27 BATUSDT.xlsx', '2021-04-27 NEOUSDT.xlsx', '2021-04-27 QTUMUSDT.xlsx', '2021-04-27 WAVESUSDT.xlsx', '2021-04-27 MKRUSDT.xlsx', '2021-04-27 SNXUSDT.xlsx', '2021-04-27 DOTUSDT.xlsx', '2021-04-27 THETAUSDT.xlsx', '2021-04-27 ALGOUSDT.xlsx', '2021-04-27 KNCUSDT.xlsx', '2021-04-27 ZRXUSDT.xlsx', '2021-04-27 COMPUSDT.xlsx', '2021-04-27 OMGUSDT.xlsx']\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"VuyKlQtbotpi"},"source":["\n","from funcs_indicator import *\n","import matplotlib.pyplot as plt\n","\n","# import mpl_finance as mf\n","\n","\n","pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","start_stamp = 0\n","# start_stamp = datetime.timestamp(pd.to_datetime('2021-02-12'))\n","print(\"start_stamp :\", start_stamp)\n","# break\n","\n","np.random.shuffle(file_list)\n","candis = file_list\n","\n","long_index = 0\n","leverage = 5\n","prev_x = None\n","total_x = None\n","\n","seed = 1\n","random_state = 201\n","np.random.seed(seed)\n","\n","fee = 0.0006\n","lvrg = 5\n","\n","for i in range(len(candis)):\n","\n","  keys = [candis[i]]\n","\n","  if 'eth'.upper() not in candis[i]:\n","    continue\n","\n","  for key in keys:  \n","    \n","    ohlcv = pd.read_excel(date_path + key, index_col=0)\n","    print('len(ohlcv) :', len(ohlcv))\n","\n","        \n","    #       long      #\n","    pr = (ohlcv['close'].pct_change() - fee) * lvrg + 1\n","\n","    #       short       #\n","    s_pr = (-ohlcv['close'].pct_change() - fee) * lvrg + 1\n","\n","    org_wr = len(pr[pr > 1]) / len(pr[pr != 1])\n","\n","    plt.figure(figsize=(10, 5))\n","    plt.subplot(121)\n","    plt.plot(np.cumprod(pr))\n","    plt.title(\"%s\\norg_wr : %.3f\\n acc_pr : %.3f\" % (key, org_wr, np.cumprod(pr)[-1]))\n","\n","\n","    #                    strat                   #\n","\n","    # strat_pr = np.where((ohlcv['close'].shift(1) < ohlcv['close'].shift(2)) & \n","    #                     (ohlcv['close'].shift(2) < ohlcv['close'].shift(3)), pr, 1)\n","\n","\n","    # strat_pr = np.where((ohlcv['close'].shift(1) < ohlcv['close'].shift(2)) & \n","    #                     (ohlcv['close'].shift(2) > ohlcv['close'].shift(3)) & \n","    #                     (ohlcv['close'].shift(3) > ohlcv['close'].shift(4)) & \n","    #                     (ohlcv['close'].shift(4) < ohlcv['close'].shift(5)), pr, 1)\n","\n","\n","    strat_pr = np.where((ohlcv['close'].shift(1) < ohlcv['close'].shift(2)) & \n","                        (ohlcv['close'].shift(2) > ohlcv['close'].shift(3)) & \n","                        (ohlcv['close'].shift(3) > ohlcv['close'].shift(4)) & \n","                        (ohlcv['close'].shift(4) < ohlcv['close'].shift(5)) & \n","                        (ohlcv['close'].shift(5) < ohlcv['close'].shift(6)), pr, 1)\n","    \n","    # strat_pr = np.where((ohlcv['high'].shift(2) > ohlcv['high'].shift(3))& \n","    #                     (ohlcv['close'].shift(1) > ohlcv['close'].shift(2)), pr, 1)\n","\n","\n","    wr = len(strat_pr[strat_pr > 1]) / len(strat_pr[strat_pr != 1])\n","\n","    plt.subplot(122)\n","    plt.plot(np.cumprod(strat_pr))\n","    plt.title(\"%s\\norg_wr : %.3f\\n wr : %.5f\\nacc_pr : %.3f\" % (key, org_wr, wr, np.cumprod(strat_pr)[-1]))\n","\n","\n","    # #                  sl cut                #\n","    # sl_line = ohlcv['low'].rolling(250).min().shift(1)\n","    # # sl_line = ohlcv['low'].shift(1)\n","\n","    # strat_pr_sl = np.where((strat_pr != 1) & (sl_line > ohlcv['low']), \n","    #                      1 + lvrg * (sl_line / ohlcv['close'].shift(1) - 1 - fee), strat_pr)\n","\n","\n","    # wr_sl = len(strat_pr_sl[strat_pr_sl > 1]) / len(strat_pr_sl[strat_pr_sl != 1])\n","    # # wl_pr_ratio = np.mean(strat_pr[strat_pr > 1]) / np.mean(strat_pr[strat_pr < 1])\n","    # # wl_pr_ratio = np.cumprod(strat_pr[strat_pr > 1])[-1] / np.cumprod(strat_pr[strat_pr < 1])[-1]\n","\n","    # plt.subplot(122)\n","    # plt.plot(np.cumprod(strat_pr_sl))\n","    # plt.title(\"%s\\norg_pr : %.3f\\n wr : %.5f\\nacc_pr : %.3f\" % (key, org_wr, wr_sl, np.cumprod(strat_pr_sl)[-1]))\n","\n","\n","    plt.show()\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"9_FZuHIQqhn6"},"source":["### save npy"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"referenced_widgets":["e240c935ea9641679219413f15ecd682","8bc00e073fc84af08671395921d68651","6bfb305c12a04f2fa6cab657ae10f7fa","17e5961bf9af4f31ae47f26c78c9f386","f8af0d0b39324b488f3845cbd9ce3adb","75b217fb5bf543d7a3f6e5e1a0f19204","974e74f55b8d4df980a4e945988b41ac","a5b9c5d042c44f3b99b5d0f1033a41b9"]},"id":"Ysc1LdhWqjYk","executionInfo":{"status":"ok","timestamp":1621949846285,"user_tz":-540,"elapsed":45226,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"504dfafe-f39c-4688-a9f0-b2588a9b4e8c"},"source":["from sklearn.preprocessing import MinMaxScaler, MaxAbsScaler\n","import pickle\n","from sklearn.model_selection import train_test_split\n","from datetime import datetime\n","\n","from funcs_indicator import *\n","\n","def min_max_scale(npy_x):\n","\n","  return (npy_x - np.min(npy_x)) / (np.max(npy_x) - np.min(npy_x))\n","\n","\n","#       set data features : ohlc, v, ep\n","time_index = ohlcv.index[np.sum(np.isnan(pr)):]\n","\n","sliced_ohlcv = ohlcv[np.sum(np.isnan(pr)):]\n","\n","#       scale with price    #\n","ohlc = ohlcv.iloc[np.sum(np.isnan(pr)):, :4]      \n","\n","ha_ohlc = heikinashi(sliced_ohlcv).iloc[:, :4]\n","sar = lucid_sar(sliced_ohlcv)\n","ema1, ema2, ema3 = ema_ribbon(sliced_ohlcv)\n","senkou1, senkou2 = ichimoku(sliced_ohlcv)\n","\n","#     min max scale   #\n","vol = sliced_ohlcv.iloc[np.sum(np.isnan(pr)):, [4]]\n","\n","pr_list = pr[np.sum(np.isnan(pr)):]\n","print(\"len(ohlc) :\", len(ohlc))\n","print(\"len(pr) :\", len(pr))\n","\n","# break\n","\n","\n","#       set params    #\n","period = 45\n","key_i = i\n","\n","plotting = True\n","\n","data_x, data_pr, data_updown = [], [], []\n","data_index = []\n","\n","for i in range(period, len(ohlc)):\n","\n","  #   pr_list != 1 인 데이터만 사용한다\n","  # if 1:\n","  if pr_list[i] != 1:\n","\n","    min_max = MinMaxScaler()\n","    \n","    #   prediction 을 제외한 이전 데이터를 사용해야한다\n","    temp_ohlc = ohlc.iloc[i - period : i].values\n","    # temp_long_ep = long_ep[i - period : i]          \n","    temp_ha_ohlc = ha_ohlc.iloc[i - period : i].values\n","    temp_sar = sar.iloc[i - period : i].values.reshape(-1, 1)\n","    temp_ema1 = ema1.iloc[i - period : i].values.reshape(-1, 1)\n","    temp_ema2 = ema2.iloc[i - period : i].values.reshape(-1, 1)\n","    temp_ema3 = ema3.iloc[i - period : i].values.reshape(-1, 1)\n","    temp_senkou1 = senkou1.iloc[i - period : i].values.reshape(-1, 1)\n","    temp_senkou2 = senkou2.iloc[i - period : i].values.reshape(-1, 1)      \n","\n","    temp_close = min_max_scale(temp_ohlc[:, [3]])    \n","\n","    price_data = np.hstack((temp_ohlc, temp_ha_ohlc, temp_sar, temp_ema1, temp_ema2, temp_ema3, temp_senkou1, temp_senkou2))\n","\n","    if np.isnan(np.sum(price_data)):\n","      continue\n","\n","    # print(\"price_data[:10] :\", price_data[:10])\n","    # print(\"temp_ohlc.shape :\", temp_ohlc.shape)\n","    # print(\"temp_long_ep.shape :\", temp_long_ep.shape)\n","    # print(\"temp_ha_ohlc.shape :\", temp_ha_ohlc.shape)\n","    # print(\"price_data.shape :\", price_data.shape)\n","\n","    if plotting:\n","      plt.plot(price_data)\n","      plt.show()\n","\n","    ind_temp_ohlc = min_max_scale(temp_ohlc)\n","    temp_price_data = min_max_scale(price_data)\n","    # temp_price_data = (price_data - np.min(price_data)) / (np.max(price_data) - np.min(price_data))\n","\n","\n","    if plotting:\n","\n","      plt.plot(ind_temp_ohlc)\n","      plt.show()\n","      plt.plot(temp_price_data)\n","      plt.show()\n","\n","      plotting = False\n","    # break\n","\n","    #   vol -> min_max\n","    temp_vol = min_max.fit_transform(vol.iloc[i - period : i].values.reshape(-1, 1))\n","    \n","    #                   feature selection                   #        \n","    temp_data = np.hstack((ind_temp_ohlc, temp_vol))\n","\n","    # temp_data = trial_list[trial_number]\n","    # temp_data = np.hstack((temp_ohlc[:, [3]], temp_ohlc[:, [1]], temp_bbw))\n","    # temp_data = temp_ohlc[:, [3]]\n","    # temp_data = ind_temp_ohlc[:, [3]]\n","    # temp_data = temp_close\n","\n","    if np.isnan(np.sum(temp_data)):\n","      continue\n","\n","    data_x.append(temp_data)\n","    data_pr.append(pr_list[i])\n","    data_index.append(time_index[i])\n","    data_updown.append(ohlc['close'].iloc[i] / ohlc['open'].iloc[i])\n","\n","\n","print('np.array(data_x).shape :', np.array(data_x).shape)\n","# print(data_x[0])\n","\n","\n","#       Reshape data for image deep - learning     #\n","_, row, col = np.array(data_x).shape\n","\n","input_x = np.array(data_x).reshape(-1, row, col, 1).astype(np.float32)\n","# input_x = np.array(data_x).reshape(-1, row, col).astype(np.float32)\n","\n","#     1c to 3c    #\n","input_x = input_x * np.ones(3, dtype=np.float32)[None, None, None, :]\n","# input_x = np.array(resize_npy(input_x))\n","\n","\n","input_pr = np.array(data_pr).reshape(-1, 1).astype(np.float32)\n","input_ud = np.array(data_updown).reshape(-1, 1).astype(np.float32)\n","input_index = np.array(data_index).reshape(-1, 1)\n","print('input_x.shape :', input_x.shape)\n","print('input_x.dtype :', input_x.dtype)\n","print('input_pr.shape :', input_pr.shape)\n","print('input_ud.shape :', input_ud.shape)\n","print('input_index.shape :', input_index.shape)\n","\n","\n","# x_train_, x_test, pr_train_, pr_test, ud_train_, ud_test = train_test_split(input_x, input_pr, input_ud, test_size=0.4, shuffle=False, random_state=random_state)\n","# x_train, x_val, pr_train, pr_val, ud_train, ud_val = train_test_split(x_train_, pr_train_, ud_train_, test_size=0.25, shuffle=False, random_state=random_state)\n","\n","#     do stacking   #\n","# if prev_x is None:\n","prev_x = input_x\n","prev_pr = input_pr\n","prev_ud = input_ud\n","prev_index = input_index\n","\n","total_x = input_x\n","total_pr = input_pr\n","total_ud = input_ud\n","total_index = input_index\n","\n","# else:\n","#   total_x = np.vstack((prev_x, input_x))\n","#   total_pr = np.vstack((prev_pr, input_pr))\n","#   total_ud = np.vstack((prev_ud, input_ud)) \n","#   total_index = np.vstack((prev_index, input_index)) \n","\n","#   prev_x = total_x\n","#   prev_pr = total_pr\n","#   prev_ud = total_ud\n","#   prev_index = total_index\n","\n","print('total_x.shape :', total_x.shape)\n","print('total_pr.shape :', total_pr.shape)\n","print('total_ud.shape :', total_ud.shape)\n","print('prev_index.shape :', prev_index.shape)\n","\n","\n","# _, row, col, _ = input_x.shape\n","# _, row, col = input_x.shape\n","\n","#       split new test      #\n","\n","seed = 1\n","random_state = 201\n","np.random.seed(seed)\n","from sklearn.model_selection import train_test_split\n","\n","\n","#         get unique timestamp      #\n","print(np.unique(total_index, return_counts=True))\n","uniq_stamp = np.unique(total_index)\n","\n","#                 don't shuffle timeseries data                 #\n","stamp_train_, stamp_test = train_test_split(uniq_stamp, test_size=0.2, shuffle=False, random_state=random_state)\n","stamp_train, stamp_val = train_test_split(stamp_train_, test_size=0.25, shuffle=False, random_state=random_state)\n","\n","print(\"stamp_train.shape :\", stamp_train.shape)\n","print(\"stamp_val.shape :\", stamp_val.shape)\n","print(\"stamp_test.shape :\", stamp_test.shape)\n","# break\n","\n","\n","#         split data by stamp     #\n","x_train, x_val, x_test = [], [], []\n","pr_train, pr_val, pr_test = [], [], []\n","index_train, index_val, index_test = [], [], []\n","\n","\n","from tqdm.notebook import tqdm\n","\n","np.random.shuffle(total_index)\n","\n","for i in tqdm(range(len(total_index))):\n","\n","  if total_index[i] in stamp_train:\n","    x_train.append(total_x[i])\n","    pr_train.append(total_pr[i])\n","    index_train.append(total_index[i])\n","\n","  elif total_index[i] in stamp_val:\n","    x_val.append(total_x[i])\n","    pr_val.append(total_pr[i])\n","    index_val.append(total_index[i])\n","  \n","  elif total_index[i] in stamp_test:\n","    x_test.append(total_x[i])\n","    pr_test.append(total_pr[i])\n","    index_test.append(total_index[i])\n","\n","\n","x_train = np.array(x_train)\n","x_val = np.array(x_val)\n","x_test = np.array(x_test)\n","\n","pr_train = np.array(pr_train)\n","pr_val = np.array(pr_val)\n","pr_test = np.array(pr_test)\n","\n","index_train = np.array(index_train)\n","index_val = np.array(index_val)\n","index_test = np.array(index_test)\n","  \n","print(\"x_train.shape :\", x_train.shape) # x_train.shape : (3807, 90, 12, 3)\n","print(\"x_val.shape :\", x_val.shape) # x_train.shape : (3807, 90, 12, 3)\n","print(\"x_test.shape :\", x_test.shape) # x_train.shape : (3807, 90, 12, 3)\n","\n","symbol_name = key.split(' ')[1].split('.')[0]\n","\n","x_save_path = current_path + 'npy/' + '%s_cnn_updown_rascend_ohlcv_%s_tssplit.npy' % (period, symbol_name)\n","np.save(x_save_path, x_train)\n","np.save(x_save_path.replace('x_train', 'x_val'), x_val)\n","np.save(x_save_path.replace('x_train', 'x_test'), x_test)\n","# np.save(x_save_path.replace('x_train', 'new_input_x'), new_input_x)\n","print('x series saved !')\n","\n","pr_save_path = current_path + 'npy/' + '%s_cnn_updown_rascend_ohlcv_%s_tssplit.npy' % (period, symbol_name)\n","np.save(pr_save_path, pr_train)\n","np.save(pr_save_path.replace('pr_train', 'pr_val'), pr_val)\n","np.save(pr_save_path.replace('pr_train', 'pr_test'), pr_test)\n","# np.save(pr_save_path.replace('pr_train', 'new_input_pr'), new_input_pr)\n","print('pr series saved !')\n","      "],"execution_count":38,"outputs":[{"output_type":"stream","text":["len(ohlc) : 18047\n","len(pr) : 18048\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"stream","text":["np.array(data_x).shape : (17926, 45, 5)\n","input_x.shape : (17926, 45, 5, 3)\n","input_x.dtype : float32\n","input_pr.shape : (17926, 1)\n","input_ud.shape : (17926, 1)\n","input_index.shape : (17926, 1)\n","total_x.shape : (17926, 45, 5, 3)\n","total_pr.shape : (17926, 1)\n","total_ud.shape : (17926, 1)\n","prev_index.shape : (17926, 1)\n","(array([Timestamp('2020-04-19 13:29:59.999000'),\n","       Timestamp('2020-04-19 13:59:59.999000'),\n","       Timestamp('2020-04-19 14:29:59.999000'), ...,\n","       Timestamp('2021-04-27 22:59:59.999000'),\n","       Timestamp('2021-04-27 23:29:59.999000'),\n","       Timestamp('2021-04-27 23:59:59.999000')], dtype=object), array([1, 1, 1, ..., 1, 1, 1]))\n","stamp_train.shape : (10755,)\n","stamp_val.shape : (3585,)\n","stamp_test.shape : (3586,)\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"e240c935ea9641679219413f15ecd682","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=0.0, max=17926.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n","x_train.shape : (10755, 45, 5, 3)\n","x_val.shape : (3585, 45, 5, 3)\n","x_test.shape : (3586, 45, 5, 3)\n","x series saved !\n","pr series saved !\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"GmmgsEUMqUjN"},"source":["### **Model**"]},{"cell_type":"code","metadata":{"id":"mcDUjgQzqUSr","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621949381669,"user_tz":-540,"elapsed":3981,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"353f8e93-1ae1-45bd-abc5-df2b9fddc1fa"},"source":["import os\n","# os.environ[\"CUDA_DEVICE_ORDER\"]=\"PCI_BUS_ID\"   \n","# os.environ[\"CUDA_VISIBLE_DEVICES\"]=\"0\"\n","\n","%tensorflow_version 1.x\n","\n","import keras\n","import tensorflow as tf\n","\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import scipy.misc \n","from math import sqrt \n","import itertools\n","from IPython.display import display\n","\n","%matplotlib inline\n","\n","from keras.utils import plot_model\n","import keras.backend as K\n","from keras.models import Model, Sequential\n","import keras.layers as layers\n","from keras.optimizers import Adam, SGD\n","from keras.regularizers import l1, l2\n","\n","from sklearn.cluster import KMeans\n","from sklearn.metrics import silhouette_score\n","from sklearn.metrics import precision_score, recall_score, precision_recall_curve\n","from sklearn.metrics import confusion_matrix\n","from sklearn.metrics import plot_confusion_matrix\n","\n","\n","gdrive_path = current_path\n","\n","num_classes = 2\n","\n","def FER_Model(input_shape):\n","    # first input model\n","    visible = layers.Input(shape=input_shape, name='input')\n","    \n","    net = layers.Conv2D(32, kernel_size=3, padding='same', kernel_initializer='he_normal')(visible)\n","    # net = layers.Conv2D(256, kernel_size=3, padding='same', kernel_initializer='he_normal')(visible)\n","    # net = layers.BatchNormalization()(net)\n","    net = layers.LeakyReLU()(net)\n","\n","    net = layers.Conv2D(64, kernel_size=3, padding='same', kernel_initializer='he_normal')(net)\n","    # net = layers.Conv2D(128, kernel_size=3, padding='same', kernel_initializer='he_normal')(net)\n","    # net = layers.BatchNormalization()(net)\n","    # net = layers.Activation('relu')(net)\n","    net = layers.LeakyReLU()(net)\n","    # net = layers.MaxPool2D(pool_size=2)(net)\n","    # net = layers.AveragePooling2D(padding='same')(net)\n","\n","    shortcut_1 = net\n","\n","    # net = layers.Conv2D(64, kernel_size=3, padding='same', kernel_initializer='he_normal')(net)\n","    net = layers.Conv2D(128, kernel_size=3, padding='same', kernel_initializer='he_normal')(net)\n","    net = layers.LeakyReLU()(net)\n","\n","    net = layers.Conv2D(256, kernel_size=3, padding='same', kernel_initializer='he_normal')(net)\n","    # net = layers.BatchNormalization()(net)\n","    # net = layers.Activation('relu')(net)\n","    net = layers.LeakyReLU()(net)\n","    # net = layers.MaxPool2D(pool_size=2)(net)\n","\n","    shortcut_2 = net\n","\n","#     net = layers.Conv2D(256, kernel_size=3, padding='same')(net)\n","#     # net = layers.Activation('relu')(net)\n","#     net = layers.LeakyReLU()(net)\n","#     net = layers.MaxPool2D(pool_size=2)(net)\n","\n","#     shortcut_3 = net\n","\n","#     net = layers.Conv2D(128, kernel_size=1, padding='same')(net)\n","#     # net = layers.Activation('relu')(net)\n","#     net = layers.LeakyReLU()(net)\n","#     net = layers.MaxPool2D(pool_size=2)(net)\n","\n","    net = layers.Flatten()(net)\n","    net = layers.Dense(128)(net)\n","    net = layers.LeakyReLU()(net)\n","\n","    net = layers.Dense(64)(net)\n","    net = layers.LeakyReLU()(net)\n","\n","    net = layers.Dense(num_classes, activation='softmax')(net)\n","\n","    # create model \n","    model = Model(inputs=visible, outputs=net)\n","    # summary layers\n","    # print(model.summary())\n","    \n","    return model"],"execution_count":30,"outputs":[{"output_type":"stream","text":["TensorFlow 1.x selected.\n"],"name":"stdout"},{"output_type":"stream","text":["Using TensorFlow backend.\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"OgZyYJPg3RJa"},"source":["def resize_npy(x):\n","\n","  temp_x = []\n","\n","  for d_i, data in enumerate(x):\n","    # resized_data = cv2.resize(data, (row * 2, col * 2)) --> input image 홰손된다\n","    # resized_data = data.repeat(2, axis=0).repeat(2, axis=1)\n","    data = data.repeat(2, axis=0).repeat(2, axis=1)\n","    # resized_data = data.repeat(1, axis=0).repeat(1, axis=1)\n","    # cmapped = plt.cm.Set1(resized_data)[:, :, :3]  # Drop Alpha Channel\n","    \n","    if d_i == 0:\n","      plt.imshow(data)\n","      plt.show()\n","      # plt.imshow(resized_data)\n","      # plt.show()\n","    # print('resized_data.shape :', resized_data.shape)\n","    # break\n","    temp_x.append(data)\n","\n","  return temp_x"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"1pOkWbn6JQFN"},"source":["### load npy"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wIqpv89dJNZz","executionInfo":{"status":"ok","timestamp":1621942535092,"user_tz":-540,"elapsed":4258,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"bad0125d-4fcb-4323-8aff-6338b6de46ba"},"source":["from keras.utils import np_utils\n","\n","# from keras.preprocessing.image import ImageDataGenerator \n","from sklearn.utils import class_weight\n","\n","\n","symbol_name = \"SXPUSDT\"\n","period = 45\n","\n","\n","x_save_path = current_path + 'npy/' + '%s_cnn_updown_rascend_ohlcv_%s_tssplit.npy' % (period, symbol_name)\n","pr_save_path = current_path + 'npy/' + '%s_cnn_updown_rascend_ohlcv_%s_tssplit.npy' % (period, symbol_name)\n","\n","\n","x_train = np.load(x_save_path)\n","x_val = np.load(x_save_path.replace('x_train', 'x_val'))\n","x_test = np.load(x_save_path.replace('x_train', 'x_test'))\n","print('x series loaded !')\n","\n","\n","pr_train = np.load(pr_save_path)\n","pr_val = np.load(pr_save_path.replace('pr_train', 'pr_val'))\n","pr_test = np.load(pr_save_path.replace('pr_train', 'pr_test'))\n","print('y series loaded !')\n","\n","# total_x = np.vstack((x_train, x_val, x_test))\n","# total_pr = np.vstack((pr_train, pr_val, pr_test))\n","\n","# print(\"total_x.shape :\", total_x.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["x series loaded !\n","y series loaded !\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"7ccoStOwpf-q"},"source":["### rapid pr selection"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"id":"DK_DF7OtplHe","executionInfo":{"status":"ok","timestamp":1621949865361,"user_tz":-540,"elapsed":512,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"c13734d5-2a10-42f0-afa0-bc341c0bc52a"},"source":["plt.plot(pr)\n","plt.show()\n","\n","pr_thresh = 1.05\n","rapid_pct = len(pr[pr > pr_thresh]) / len(pr)\n","\n","print(rapid_pct)"],"execution_count":39,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"stream","text":["0.05319148936170213\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"i6xAZTmquAxx"},"source":["### class_weight & categorization"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"j7huC8gvUTNf","executionInfo":{"status":"ok","timestamp":1621949868877,"user_tz":-540,"elapsed":3,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"b3a2dd50-9325-4c29-8342-e0aaf83cb36a"},"source":["from keras.utils import np_utils\n","\n","# from keras.preprocessing.image import ImageDataGenerator \n","from sklearn.utils import class_weight\n","\n","\n","def class_ratio(in_list):\n","\n","  return in_list / in_list[1]\n","  \n","y_train = np.where(pr_train > pr_thresh, 1, 0)\n","y_test = np.where(pr_test > pr_thresh, 1, 0)\n","y_val = np.where(pr_val > pr_thresh, 1, 0)\n","\n","print('x_train.shape :', x_train.shape)\n","print('x_test.shape :', x_test.shape)\n","print('x_val.shape :', x_val.shape)\n","print('y_train.shape :', y_train.shape)\n","print('y_test.shape :', y_test.shape)\n","print('y_val.shape :', y_val.shape)\n","\n","# try:\n","print('np.unique(y_train, return_counts=True :', np.unique(y_train, return_counts=True), class_ratio(np.unique(y_train, return_counts=True)[1]))\n","print('np.unique(y_val, return_counts=True :', np.unique(y_val, return_counts=True), class_ratio(np.unique(y_val, return_counts=True)[1]))\n","print('np.unique(y_test, return_counts=True :', np.unique(y_test, return_counts=True), class_ratio(np.unique(y_test, return_counts=True)[1]))\n","\n","# except Exception as e:\n","  # print(e)\n","\n","label = y_train.reshape(-1, )\n","class_weights = class_weight.compute_class_weight('balanced', \n","                                                    classes=np.unique(label),\n","                                                    y=label)\n","class_weights = dict(enumerate(class_weights))\n","print('class_weights :', class_weights)\n","\n","# sample_weight = np.ones(shape=(len(y_train),))\n","# sample_weight[(y_train == 1).reshape(-1,)] = 1.5\n","# print('sample_weight[:20] :', sample_weight[:20])\n","\n","\n","print('np.isnan(np.sum(x_train)) :', np.isnan(np.sum(x_train)))\n","print('np.isnan(np.sum(x_val)) :', np.isnan(np.sum(x_val)))\n","print('np.isnan(np.sum(x_test)) :', np.isnan(np.sum(x_test)))\n","\n","print('np.isnan(np.sum(y_train)) :', np.isnan(np.sum(y_train)))\n","print('np.isnan(np.sum(y_val)) :', np.isnan(np.sum(y_val)))\n","print('np.isnan(np.sum(y_test)) :', np.isnan(np.sum(y_test)))\n","\n","y_train_ohe = np_utils.to_categorical(y_train, num_classes)\n","y_val_ohe = np_utils.to_categorical(y_val, num_classes)\n","y_test_ohe = np_utils.to_categorical(y_test, num_classes)\n","print('y_train_ohe.shape :', y_train_ohe.shape)\n","print('y_val_ohe.shape :', y_val_ohe.shape)\n","print('y_test_ohe.shape :', y_test_ohe.shape)"],"execution_count":40,"outputs":[{"output_type":"stream","text":["x_train.shape : (10755, 45, 5, 3)\n","x_test.shape : (3586, 45, 5, 3)\n","x_val.shape : (3585, 45, 5, 3)\n","y_train.shape : (10755, 1)\n","y_test.shape : (3586, 1)\n","y_val.shape : (3585, 1)\n","np.unique(y_train, return_counts=True : (array([0, 1]), array([10199,   556])) [18.34352518  1.        ]\n","np.unique(y_val, return_counts=True : (array([0, 1]), array([3389,  196])) [17.29081633  1.        ]\n","np.unique(y_test, return_counts=True : (array([0, 1]), array([3384,  202])) [16.75247525  1.        ]\n","class_weights : {0: 0.5272575742719875, 1: 9.671762589928058}\n","np.isnan(np.sum(x_train)) : False\n","np.isnan(np.sum(x_val)) : False\n","np.isnan(np.sum(x_test)) : False\n","np.isnan(np.sum(y_train)) : False\n","np.isnan(np.sum(y_val)) : False\n","np.isnan(np.sum(y_test)) : False\n","y_train_ohe.shape : (10755, 2)\n","y_val_ohe.shape : (3585, 2)\n","y_test_ohe.shape : (3586, 2)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"-4Ta-VQ7JX6A"},"source":["### train"]},{"cell_type":"code","metadata":{"id":"USEDmvAzJYxM","colab":{"base_uri":"https://localhost:8080/","height":614},"executionInfo":{"status":"error","timestamp":1621949923708,"user_tz":-540,"elapsed":21083,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"0087083b-aeb5-419b-de14-39b4bf49ff42"},"source":["\n","from keras.callbacks import ModelCheckpoint, EarlyStopping, TensorBoard\n","\n","ckpt_path = current_path + 'ckpt/'\n","board_path = current_path + 'graph/'\n","\n","batch_size = 512\n","\n","model = FER_Model(input_shape=x_train.shape[1:])\n","opt = Adam(lr=0.00001, decay=0.000005)\n","# opt = Adam(lr=0.001, decay=0.0005)\n","model.compile(loss='categorical_crossentropy', optimizer=opt, metrics=['accuracy'])\n","\n","model_name = 'classifier_%s_cnn_updown_rascend_%s_tvnon_shuffle.h5' % (period, symbol_name)\n","\n","\n","\n","checkpoint = ModelCheckpoint(ckpt_path + model_name, monitor='val_loss', verbose=1, save_best_only=True, mode='auto')\n","checkpoint2 = TensorBoard(log_dir=board_path,\n","                          histogram_freq=0,\n","                          write_graph=True,\n","                          write_images=True)\n","checkpoint3 = EarlyStopping(monitor='val_loss', patience=250)\n","callbacks_list = [checkpoint, checkpoint2, checkpoint3]\n","# callbacks_list = [checkpoint, checkpoint2]\n","\n","# keras.callbacks.Callback 로 부터 log 를 받아와 history log 를 작성할 수 있다.\n","\n","# we iterate 200 times over the entire training set\n","num_epochs = 1000                    \n","\n","history = model.fit(x_train, y_train_ohe,\n","                    steps_per_epoch=int(len(x_train) / batch_size), \n","                    epochs=num_epochs,  \n","                    verbose=2,  \n","                    callbacks=callbacks_list,\n","                    class_weight=class_weights,\n","                    validation_data=(x_val, y_val_ohe),  \n","                    validation_steps=int(len(x_val) / batch_size),\n","                    shuffle=False)"],"execution_count":41,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:From /tensorflow-1.15.2/python3.7/tensorflow_core/python/ops/resource_variable_ops.py:1630: calling BaseResourceVariable.__init__ (from tensorflow.python.ops.resource_variable_ops) with constraint is deprecated and will be removed in a future version.\n","Instructions for updating:\n","If using Keras pass *_constraint arguments to layers.\n","WARNING:tensorflow:From /tensorflow-1.15.2/python3.7/keras/backend/tensorflow_backend.py:422: The name tf.global_variables is deprecated. Please use tf.compat.v1.global_variables instead.\n","\n","Train on 10755 samples, validate on 3585 samples\n","WARNING:tensorflow:From /tensorflow-1.15.2/python3.7/keras/callbacks/tensorboard_v1.py:200: The name tf.summary.merge_all is deprecated. Please use tf.compat.v1.summary.merge_all instead.\n","\n","WARNING:tensorflow:From /tensorflow-1.15.2/python3.7/keras/callbacks/tensorboard_v1.py:203: The name tf.summary.FileWriter is deprecated. Please use tf.compat.v1.summary.FileWriter instead.\n","\n","Epoch 1/1000\n"],"name":"stdout"},{"output_type":"error","ename":"ResourceExhaustedError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mResourceExhaustedError\u001b[0m                    Traceback (most recent call last)","\u001b[0;32m<ipython-input-41-a6ea89b792a7>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     38\u001b[0m                     \u001b[0mvalidation_data\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_val\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_val_ohe\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     39\u001b[0m                     \u001b[0mvalidation_steps\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_val\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 40\u001b[0;31m                     shuffle=False)\n\u001b[0m","\u001b[0;32m/tensorflow-1.15.2/python3.7/keras/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_freq, max_queue_size, workers, use_multiprocessing, **kwargs)\u001b[0m\n\u001b[1;32m   1237\u001b[0m                                         \u001b[0msteps_per_epoch\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msteps_per_epoch\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1238\u001b[0m                                         \u001b[0mvalidation_steps\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mvalidation_steps\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1239\u001b[0;31m                                         validation_freq=validation_freq)\n\u001b[0m\u001b[1;32m   1240\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1241\u001b[0m     def evaluate(self,\n","\u001b[0;32m/tensorflow-1.15.2/python3.7/keras/engine/training_arrays.py\u001b[0m in \u001b[0;36mfit_loop\u001b[0;34m(model, fit_function, fit_inputs, out_labels, batch_size, epochs, verbose, callbacks, val_function, val_inputs, shuffle, initial_epoch, steps_per_epoch, validation_steps, validation_freq)\u001b[0m\n\u001b[1;32m    150\u001b[0m                 \u001b[0mbatch_logs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m'batch'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstep_index\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'size'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    151\u001b[0m                 \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_batch_hook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'train'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'begin'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstep_index\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch_logs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 152\u001b[0;31m                 \u001b[0mouts\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfit_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfit_inputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    153\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    154\u001b[0m                 \u001b[0mouts\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mto_list\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mouts\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/tensorflow-1.15.2/python3.7/tensorflow_core/python/keras/backend.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, inputs)\u001b[0m\n\u001b[1;32m   3474\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3475\u001b[0m     fetched = self._callable_fn(*array_vals,\n\u001b[0;32m-> 3476\u001b[0;31m                                 run_metadata=self.run_metadata)\n\u001b[0m\u001b[1;32m   3477\u001b[0m     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_fetch_callbacks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfetched\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fetches\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3478\u001b[0m     output_structure = nest.pack_sequence_as(\n","\u001b[0;32m/tensorflow-1.15.2/python3.7/tensorflow_core/python/client/session.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1470\u001b[0m         ret = tf_session.TF_SessionRunCallable(self._session._session,\n\u001b[1;32m   1471\u001b[0m                                                \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_handle\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1472\u001b[0;31m                                                run_metadata_ptr)\n\u001b[0m\u001b[1;32m   1473\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mrun_metadata\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1474\u001b[0m           \u001b[0mproto_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf_session\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTF_GetBuffer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrun_metadata_ptr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mResourceExhaustedError\u001b[0m: OOM when allocating tensor with shape[10755,57600] and type float on /job:localhost/replica:0/task:0/device:GPU:0 by allocator GPU_0_bfc\n\t [[{{node training/Adam/gradients/dense_1/MatMul_grad/MatMul}}]]\nHint: If you want to see a list of allocated tensors when OOM happens, add report_tensor_allocations_upon_oom to RunOptions for current allocation info.\n"]}]},{"cell_type":"markdown","metadata":{"id":"KIk0rYDvKfse"},"source":["### load model"]},{"cell_type":"code","metadata":{"id":"3jwBpTS0Kgt0"},"source":["ckpt_path = current_path + 'ckpt/'\n","board_path = current_path + 'graph/'\n","\n","# model_name = 'classifier_%s_lstm_close_updown_pr_robust_trial_%s_timesplit.h5' % (period, symbol_name)\n","\n","model = keras.models.load_model(ckpt_path + model_name)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"cPz7DZxeJc4P"},"source":["### test"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":838},"id":"baSlNaUxJd2r","executionInfo":{"status":"ok","timestamp":1621943481236,"user_tz":-540,"elapsed":7907,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"c1716967-797f-4eac-89af-263bf31b0f4c"},"source":["# x_test = new_input_x\n","# y_test = np.where(new_input_pr > 1, 1, 0)\n","# pr_test = new_input_pr\n","\n","# x_test = org_x_test\n","# y_test = org_y_test\n","# pr_test = org_pr_test\n","\n","# x_test = x_train\n","# y_test = y_train\n","# pr_test = pr_train\n","\n","# x_test = x_val\n","# y_test = y_val\n","# pr_test = pr_val\n","\n","# x_test = concat_x\n","# y_test = np.where(concat_pr > 1, 1, 0)\n","# pr_test = concat_pr\n","\n","test_result = model.predict(x_test)\n","# test_result = model.predict(test_set)\n","\n","print('test_result.shape :', test_result.shape)\n","# print('pr_val.shape :', pr_val.shape)\n","\n","y_score = test_result[:, [1]]\n","print('y_test[:5] :', y_test.reshape(-1,)[:5])\n","# print('np.unique(y_test) :', np.unique(y_test, return_counts=True))\n","print('y_score[:5] :', y_score[:5])\n","# print('np.unique(y_score) :', np.unique(y_score, return_counts=True))\n","\n","print('y_test.shape :', y_test.shape)\n","print('y_score.shape :', y_score.shape)\n","\n","print('len(y_test) :', len(y_test))\n","\n","#     precision recall curve   #\n","precision, recall, threshold = precision_recall_curve(y_test, y_score)\n","precision, recall = precision[:-1], recall[:-1]\n","\n","plt.plot(threshold, precision, label='precision')\n","plt.plot(threshold, recall, label='recall')\n","plt.legend()\n","plt.title('precision recall')\n","plt.show()\n","# print(y_pred)\n","\n","\n","# threshold = [0.65]\n","# print('threshold :', threshold)\n","# break\n","\n","acc_pr_bythr = []\n","new_thresh = []\n","\n","for thresh in threshold:\n","  \n","  # if thresh < 0.5:\n","  #     continue\n","\n","  y_pred = np.where(y_score[:, -1] > thresh, 1, 0)\n","  # print('y_pred.shape :', y_pred.shape)\n","  # print('y_pred :', y_pred)\n","\n","  #     compare precision     #\n","\n","  # print('precision :', precision_score(y_test, y_pred))\n","  # print('recall :', recall_score(y_test, y_pred))\n","  # print()\n","\n","  # print('np.isnan(np.sum(x_test)) :', np.isnan(np.sum(x_test)))\n","  # print('np.isnan(np.sum(y_test)) :', np.isnan(np.sum(y_test)))\n","\n","  # # plot_confusion_matrix(best_model, x_test, y_test, normalize=None)\n","  # # plt.show()  \n","  # print()\n","\n","  #     check win-ratio improvement     #\n","  cmat = confusion_matrix(y_test, y_pred)\n","  # print(cmat)\n","  # print(np.sum(cmat, axis=1))\n","\n","  test_size = len(y_test)\n","  test_pr_list = pr_test\n","  # print('origin ac_pr :', np.cumprod(test_pr_list)[-1])\n","\n","  org_wr = np.sum(cmat, axis=1)[-1] / sum(np.sum(cmat, axis=1))\n","  ml_wr = cmat[1][1] / np.sum(cmat, axis=0)[-1]\n","  # print('win ratio improvement %.2f --> %.2f' % (org_wr, ml_wr))\n","\n","  # print('pr_test.shape :', pr_test.shape)\n","\n","  # print(y_pred)\n","  # print(test_pr_list)\n","\n","  pred_pr_list = np.where(y_pred == 1, test_pr_list.reshape(-1, ), 1.0)\n","  # pred_pr_list = np.where(np.isnan(pred_pr_list), 1.0, pred_pr_list)\n","  # pred_pr_list = np.where(pred_pr_list == 0.0, 1.0, pred_pr_list)\n","  # print('pred_pr_list.shape :', pred_pr_list.shape)\n","\n","  # if np.cumprod(test_pr_list)[-1] < np.cumprod(pred_pr_list)[-1]:\n","  #   print('accum_pr increased ! : %.3f --> %.3f' % (np.cumprod(test_pr_list)[-1], np.cumprod(pred_pr_list)[-1]))\n","  #   print('thresh :', thresh)\n","    \n","  # if len(threshold) == 1:\n","#   plt.figure(figsize=(10, 5))\n","#   plt.subplot(121)\n","#   plt.plot(np.cumprod(test_pr_list))\n","#   plt.title('%.3f' % (np.cumprod(test_pr_list)[-1]))\n","# # plt.show()\n","\n","#   plt.subplot(122)\n","#   plt.plot(np.cumprod(pred_pr_list))\n","#   plt.title('%.3f' % (np.cumprod(pred_pr_list)[-1]))\n","#   # plt.axvline(len(org_pr_test), linestyle='--', color='r')\n","#   plt.show()\n","\n","\n","  acc_pr_bythr.append(np.cumprod(pred_pr_list)[-1])\n","  new_thresh.append(thresh)\n","\n","\n","print('acc_pr_bythr :', acc_pr_bythr)\n","\n","plt.figure(figsize=(10, 5))\n","plt.subplot(121)\n","plt.plot(threshold, precision, label='precision')\n","plt.plot(threshold, recall, label='recall')\n","plt.legend()\n","plt.title('precision recall')\n","# plt.show()\n","plt.subplot(122)\n","plt.plot(new_thresh, acc_pr_bythr)\n","plt.axhline(np.cumprod(test_pr_list)[-1], linestyle='--', color='r')\n","plt.title(symbol_name)\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["test_result.shape : (2603, 2)\n","y_test[:5] : [1 0 0 0 1]\n","y_score[:5] : [[0.42088738]\n"," [0.5014606 ]\n"," [0.4910003 ]\n"," [0.51449823]\n"," [0.4367385 ]]\n","y_test.shape : (2603, 1)\n","y_score.shape : (2603, 1)\n","len(y_test) : 2603\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:89: RuntimeWarning: invalid value encountered in long_scalars\n"],"name":"stderr"},{"output_type":"stream","text":["acc_pr_bythr : [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.7032485, 3.2765114, 3.1270857, 3.2260287, 3.465345, 3.3623445, 3.3198562, 3.280708, 3.1728182, 3.0980055, 3.1455245, 3.307006, 3.3948565, 2.9057145, 3.0631065, 2.953962, 2.9628494, 3.0692441, 2.7523713, 2.8060627, 2.7972806, 2.7685962, 2.8319967, 3.176758, 3.1670341, 3.0853467, 3.363135, 3.2380266, 3.1386585, 3.283307, 3.8936365, 3.6079721, 4.8327494, 4.8302503, 5.388807, 5.4050226, 5.5010657, 4.320297, 4.170579, 4.2277136, 4.079335, 4.140118, 3.9487543, 3.7488704, 3.6627836, 3.582028, 3.5563185, 3.2920084, 3.0666418, 2.8506887, 2.713311, 2.4784405, 2.243222, 2.1376734, 2.1057959, 1.7450807, 1.6853168, 1.6403815, 1.6223221, 1.669257, 1.5715758, 1.3977066, 1.6139226, 1.5690964, 1.5041066, 1.4599171, 1.2055184, 1.2231964, 1.2799335, 1.1823974, 1.3287609, 1.2606635, 1.2057, 1.3078759, 1.1773114, 1.2257504, 1.0846583, 1.0]\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 720x360 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"mVDwWWvE45Wr"},"source":["plt.subplot(122)\n","plt.plot(new_thresh, acc_pr_bythr)\n","plt.axhline(np.cumprod(test_pr_list)[-1], linestyle='--', color='r')\n","plt.axvline(new_thresh[np.argmax(acc_pr_bythr)], linestyle='--', color='r')\n","plt.title(symbol_name + '\\n' + str(new_thresh[np.argmax(acc_pr_bythr)]))\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":265},"id":"zejEkNZI4Kyv","executionInfo":{"status":"ok","timestamp":1620614941396,"user_tz":-540,"elapsed":1104,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"80ef829a-8d2e-468d-afb7-8a3423d979ef"},"source":["thresh = 0.5866\n","y_pred = np.where(y_score[:600, -1] > thresh, 1, 0)\n","# print('y_pred.shape :', y_pred.shape)\n","# print('y_pred :', y_pred)\n","\n","#     compare precision     #\n","\n","# print('precision :', precision_score(y_test, y_pred))\n","# print('recall :', recall_score(y_test, y_pred))\n","# print()\n","\n","# print('np.isnan(np.sum(x_test)) :', np.isnan(np.sum(x_test)))\n","# print('np.isnan(np.sum(y_test)) :', np.isnan(np.sum(y_test)))\n","\n","# # plot_confusion_matrix(best_model, x_test, y_test, normalize=None)\n","# # plt.show()  \n","# print()\n","\n","#     check win-ratio improvement     #\n","cmat = confusion_matrix(y_test[:len(y_pred)], y_pred)\n","# print(cmat)\n","# print(np.sum(cmat, axis=1))\n","\n","test_size = len(y_test[:len(y_pred)])\n","test_pr_list = pr_test[:len(y_pred)]\n","# print('origin ac_pr :', np.cumprod(test_pr_list)[-1])\n","\n","org_wr = np.sum(cmat, axis=1)[-1] / sum(np.sum(cmat, axis=1))\n","ml_wr = cmat[1][1] / np.sum(cmat, axis=0)[-1]\n","# print('win ratio improvement %.2f --> %.2f' % (org_wr, ml_wr))\n","\n","# print('pr_test.shape :', pr_test.shape)\n","\n","# print(y_pred)\n","# print(test_pr_list)\n","pred_pr_list = np.where(y_pred == 1, test_pr_list.reshape(-1, ), 1.0)\n","pred_pr_list = np.where(np.isnan(pred_pr_list), 1.0, pred_pr_list)\n","pred_pr_list = np.where(pred_pr_list == 0.0, 1.0, pred_pr_list)\n","\n","plt.plot(np.cumprod(pred_pr_list))\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"QYwWJxCSLF62"},"source":["min_max = MinMaxScaler()\n","cbo1 = min_max.fit_transform(cbo.values.reshape(-1, 1))\n","bbw1 = min_max.fit_transform(bbw.values.reshape(-1, 1))\n","\n","min_max = MinMaxScaler()\n","bbw2 = min_max.fit_transform(bbw.values.reshape(-1, 1))\n","\n","print(bbw1[-10:])\n","print(bbw2[-10:])\n","plt.plot(bbw1)\n","plt.plot(bbw2)\n","\n","plt.show()\n","\n","print(len(bbw1))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"6XibtKgphXyQ"},"source":["### Check shuffled index"]},{"cell_type":"code","metadata":{"id":"KH8eEW8ChZtV","colab":{"base_uri":"https://localhost:8080/","height":244},"executionInfo":{"status":"error","timestamp":1621939962590,"user_tz":-540,"elapsed":415,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"4e77ff24-c30b-4b2d-d516-cdb6b60466b1"},"source":["# print(index_val)\n","from datetime import datetime\n","\n","# print(index_test)\n","# print(index_train)\n","# print(index_val)\n","total_stamp = list(map(lambda x: datetime.timestamp(x[0]), input_index)) \n","timestamp_train = list(map(lambda x: datetime.timestamp(x[0]), index_train)) \n","timestamp_val = list(map(lambda x: datetime.timestamp(x[0]), index_val)) \n","timestamp_test = list(map(lambda x: datetime.timestamp(x[0]), index_test)) \n","# print(total_stamp)\n","# print(timestamp_train)\n","plt.figure(figsize=(40, 4))\n","plt.scatter(range(len(timestamp_train)), timestamp_train, label='train')\n","plt.scatter(range(len(timestamp_val)), timestamp_val, color='orange', label='val')\n","plt.scatter(range(len(timestamp_test)), timestamp_test, color='red', label='test')\n","plt.ylim(min(total_stamp), max(total_stamp))\n","plt.legend(fontsize=20)\n","\n","# print(new_input_index)"],"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-10-72a922dd9685>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m# print(index_train)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;31m# print(index_val)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0mtotal_stamp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mdatetime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtimestamp\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput_index\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m \u001b[0mtimestamp_train\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mdatetime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtimestamp\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0mtimestamp_val\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mdatetime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtimestamp\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex_val\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'input_index' is not defined"]}]},{"cell_type":"markdown","metadata":{"id":"b1UEFg1GVSLS"},"source":["### Load Data"]},{"cell_type":"code","metadata":{"id":"oa0CYY1zKH0l","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620033617416,"user_tz":-540,"elapsed":6824,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"54203fc6-893d-4a9f-d7f2-cc35eb640a39"},"source":["period = 45\n","\n","x_save_path = current_path + 'npy/' + '%s_rnn_close_updown_x_train_neo_timesplit.npy' % period\n","x_train = np.load(x_save_path)\n","x_val = np.load(x_save_path.replace('x_train', 'x_val'))\n","x_test = np.load(x_save_path.replace('x_train', 'x_test'))\n","print('x series loaded !')\n","\n","pr_save_path = current_path + 'npy/' + '%s_rnn_close_updown_pr_train_neo_timesplit.npy' % period\n","pr_train = np.load(pr_save_path)\n","pr_val = np.load(pr_save_path.replace('pr_train', 'pr_val'))\n","pr_test = np.load(pr_save_path.replace('pr_train', 'pr_test'))\n","print('y series loaded !')\n","\n","_, row, col = x_train.shape\n","\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["x series loaded !\n","y series loaded !\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"zscZynIgMbAq","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1620051746733,"user_tz":-540,"elapsed":5243,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"c236475b-70f6-4ba9-e175-72abc31c6800"},"source":["print(keras.__version__)\n","print(tf.__version__)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["2.3.1\n","1.15.2\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"-jo3k5MdhFyg"},"source":["#### **clustering output**"]},{"cell_type":"code","metadata":{"id":"njxxm-TJ-RP-"},"source":["# x_train_for_k = test_result.flatten().reshape(-1, 1)\n","x_train_for_k = test_result\n","print(x_train_for_k[:10])\n","# x_train_for_k = test_result[:, [1]]\n","pr_train = pr_test\n","\n","print('x_train_for_k.shape :', x_train_for_k.shape)\n","print('pr_train.shape :', pr_train.shape)\n","\n","K = range(2, 10)\n","s_dist = []\n","sil = []\n","for k in K:\n","  # if cen_data.shape[0] < k:\n","  #   break\n","\n","  km = KMeans(n_clusters=k)\n","  km = km.fit(x_train_for_k)\n","\n","  labels = km.labels_\n","  # print('len(labels) :', len(labels))\n","  # print('labels[:10] :', labels[:10])\n","  sil.append(silhouette_score(x_train_for_k, labels, metric='euclidean'))\n","\n","  # inertia = km.inertia_\n","  # s_dist.append(inertia)\n","\n","best_k = K[np.argmax(np.array(sil))]\n","\n","plt.figure(figsize=(10, 5))\n","plt.plot(K, sil)\n","plt.axvline(best_k, linestyle='--')\n","# plt.plot(K, s_dist)\n","plt.show()\n","\n","\n","\n","\n","\n","#   with best_k, label 별 pr_list 확인\n","km = KMeans(n_clusters=best_k)\n","km = km.fit(x_train_for_k)\n","\n","labels = km.labels_\n","\n","print(km.score(x_train_for_k))\n","print(len(labels), len(pr_train))\n","\n","\n","\n","\n","\n","#   label 별로 profit 을 저장, 승률을 확인한다\n","label_types = np.unique(labels, return_counts=False)\n","\n","label_pr_dict = {}\n","#   init dict   #\n","for label in label_types:\n","  label_pr_dict[label] = []\n","print(label_pr_dict)\n","# break\n","\n","for i, (label, pr) in enumerate(zip(labels, pr_train)):\n","  label_pr_dict[label].append(pr[0])\n","\n","  \n","# for label in label_types:\n","print(label_pr_dict)\n","\n","\n","\n","\n","\n","def win_ratio(list_x):\n","\n","  win_cnt = np.sum(np.array(list_x) > 1)\n","  return win_cnt / len(list_x)\n","\n","\n","def acc_pr(list_x):\n","\n","  return np.cumprod(np.array(list_x))[-1]\n","\n","\n","for key in label_pr_dict:\n","  \n","  print(key, ':', 'win_ratio : %.2f' % (win_ratio(label_pr_dict[key])), 'acc_pr : %.2f' % (acc_pr(label_pr_dict[key])))\n","\n","\n","\n","\n","\n","#     predict test && test 의 라벨에 따른 win_ratio 확인\n","# test_labels = km.predict(x_test)\n","# # print(test_labels)\n","\n","# label_pr_dict = {}\n","# #   init dict   #\n","# for label in label_types:\n","#   label_pr_dict[label] = []\n","# print(label_pr_dict)\n","# # break\n","\n","# for i, (label, pr) in enumerate(zip(test_labels, pr_test)):\n","#   label_pr_dict[label].append(pr[0])\n","\n","# for key in label_pr_dict:\n","\n","#   print(key, ':', 'win_ratio : %.2f' % (win_ratio(label_pr_dict[key])), 'acc_pr : %.2f' % (acc_pr(label_pr_dict[key])))\n","\n"],"execution_count":null,"outputs":[]}]}