{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"6rmQpzEGXfCw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1662344773985,"user_tz":-540,"elapsed":31801,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"35ee6078-9600-49d7-e560-ff0a1df3120d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","import os, sys\n","\n","current_path = '/content/drive/My Drive/Colab Notebooks/JnQ/'\n","\n","os.chdir(current_path)\n","\n","strat_pkg = 'IDE'\n","\n","mpl_finance_path = '/content/drive/My Drive/Colab Notebooks/JnQ/mpl_finance'\n","ta_lib_path = '/content/drive/My Drive/Colab Notebooks/JnQ/ta_lib'\n","\n","if mpl_finance_path not in sys.path:\n","\n","  try:\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ')\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ/{}'.format(strat_pkg))\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ/funcs')\n","    sys.path.insert(0, mpl_finance_path)\n","    sys.path.insert(0, ta_lib_path)\n","    \n","  except Exception as e:\n","    print(e)"]},{"cell_type":"markdown","metadata":{"id":"8uqYv5StTazo"},"source":["# requirements"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9qGt60DKTZmf"},"outputs":[],"source":["# !pip install zigzag --target=$'/content/drive/My Drive/Colab Notebooks/JnQ/zigzag'\n","# !pip install talib-binary --target=$'/content/drive/My Drive/Colab Notebooks/JnQ/ta_lib'\n","# !pip install findiff\n","\n","# import nvstrings, nvcategory, cudf\n","# import cuml\n","# import cudf\n","\n","import os\n","import talib\n","from funcs.funcs_idep import *\n","from funcs.funcs_duration_v2 import *\n","from funcs.funcs_plot_check import *\n","from funcs.funcs_pairing import *\n","# from funcs.funcs_ide import *\n","# from funcs.funcs_indicator_candlescore import *\n","from funcs.funcs_indicator import *\n","from funcs.funcs_trader import *\n","from ast import literal_eval\n","import logging\n","import importlib\n","\n","import mpl_finance as mf\n","import matplotlib.pyplot as plt\n","from matplotlib import gridspec\n","# from zigzag import *\n","# from tqdm.notebook import tqdm\n","\n","# import IPython\n","# import IPython.display\n","\n","import numpy as np\n","# import jax.numpy as np\n","import pandas as pd\n","# import seaborn as sns\n","# import tensorflow as tf\n","# from scipy import stats, signal\n","\n","import pickle\n","import shutil\n","import json\n","from easydict import EasyDict\n","import copy\n","\n","import datetime\n","from datetime import datetime\n","import random\n","import time\n","# import warnings\n","\n","# warnings.simplefilter(\"ignore\", category=RuntimeWarning)\n","\n","np.seterr(invalid=\"ignore\")\n","np.set_printoptions(suppress=True)\n","np.set_printoptions(linewidth=2000) \n","\n","pd.set_option('mode.chained_assignment',  None)\n","\n","pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)"]},{"cell_type":"markdown","metadata":{"id":"Ic1mfmwWCIBu"},"source":["# makeset - with to_htf dataframes"]},{"cell_type":"markdown","metadata":{"id":"AUSBU7T8Suzi"},"source":["## sync_check_make"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QmhLikYlSuzi"},"outputs":[],"source":["def sync_check_make(df):\n","\n","    make_itv_list = ['3T', '5T', '15T', '30T', 'H', '4H', 'D']\n","    offset_list = ['1h', '1h', '1h', '1h', '1h', '1h', '9h']\n","\n","    assert len(make_itv_list) == len(offset_list), \"length of itv & offset_list should be equal\"\n","        \n","    htf_df_list = [to_htf(df, itv_=itv_, offset=offset_) for itv_, offset_ in zip(make_itv_list, offset_list)]\n","\n","    df_3T, df_5T, df_15T, df_30T, df_H, df_4H, df_D = htf_df_list\n","\n","    for htf_df in htf_df_list:\n","      print(\"{} -> \".format(pd.infer_freq(htf_df.index)), htf_df.tail(1))\n","\n","    # heikinashi_v2(res_df_)\n","    # h_candle_v3(df, df_5T, '5T')\n","    # df = h_candle_v4(df, df_5T)\n","    # df = h_candle_v4(df, df_15T)\n","    # df = h_candle_v4(df, df_30T)\n","    # df = h_candle_v4(df, 'D')\n","\n","    # df = candle_pattern_pkg(df, df_5T)\n","    # df = candle_pattern_pkg(df, df_30T)\n","    # df = candle_pattern_pkg(df, df_H)\n","    # df = candle_pattern_pkg(df, df_4H)\n","    \n","    # --------------- stochastic --------------- #\n","    # df = stoch_v2(df)\n","    # df_5T['stoch'] = stoch(df_5T, 13, 3, 3)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","    # print(\"stoch phase done\")\n","\n","    # --------------- ma --------------- #  \n","    # df = ma(df, 60)\n","    # print(\"ma phase done\")\n","\n","    # df = macd_hist(df, 5, 35, 15)\n","    # print(\"macd_hist phase done\")\n","    \n","    # df = enough_space(df, '15T', 1)\n","    \n","    # --------------- dc --------------- #  \n","    dc_period = 1\n","    # df = donchian_channel_v4(df, dc_period)\n","    # df = dc_line(df, df_5T, '5T')  # join 사용시에만 return df 허용함\n","    # df = dc_line(df, df_15T, '15T')\n","    # df = dc_line_v2(df, df_H, 'H', dc_period=5)\n","\n","    # df = dc_line_v4(df, df, dc_period=10)\n","    # df = dc_line_v4(df, df, dc_period=20)\n","    # df = dc_line_v4(df, df, dc_period=100)\n","    # df = dc_line_v4(df, df_5T, dc_period=20)\n","    # df = dc_line_v4(df, df_15T, dc_period=20)\n","    df = dc_line_v4(df, df_H, dc_period=20)\n","    df = dc_line_v4(df, df_4H, dc_period=20)\n","    print(\"dc phase done\")\n","\n","    # --------------- bb --------------- #  \n","    bb_period = 100\n","\n","    # upper, base, lower = talib.BBANDS(res_df_.close, timeperiod=20, nbdevup=1, nbdevdn=1, matype=0)\n","    \n","    # df = bb_width_v3(df, period=60, multiple=1)\n","    # df = bb_line(df, df_5T, '5T')\n","    \n","    # df = bb_line_v3(df, df_15T, 60)\n","    \n","    # df = bb_line_v3(df, df, bb_period)\n","    # df = bb_level_v2(df, 'T', bb_period)\n","    # print(\"bb phase done\")\n","\n","    c_itv = '5T'\n","\n","    # df =  wick_ratio(df, c_itv)\n","    # df =  wick_ratio(df, c_itv)\n","\n","    bb_itv= 'T'\n","\n","    # df = candle_range_ratio(df, c_itv, bb_itv, bb_period)\n","    # # candle_pumping_ratio(df, c_itv, bb_itv, bb_period)\n","\n","    dc_itv= '15T'\n","    dc_period = 4\n","    # df = candle_pumping_ratio_v2(df, c_itv, dc_itv, dc_period)\n","    # print(\"candle_pumping_ratio_v2 phase done\")\n","\n","    # df = dc_over_body_ratio(df, c_itv, dc_itv, dc_period)\n","    # print(\"dc_over_body_ratio phase done\")\n","\n","    # df = body_rel_ratio(df, c_itv)\n","    # print(\"body_rel_ratio phase done\")\n","\n","    # --------------- cbline --------------- #    \n","    # cloud_bline(df_3T, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_3T, [-1]), how='inner')\n","    # # cloud_bline(df_5T, 20)\n","    # # df = df.join(to_lower_tf_v2(df, df_5T, [-1]), how='inner')\n","    # cloud_bline(df_15T, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_15T, [-1]), how='inner')\n","    # cloud_bline(df_30T, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_30T, [-1]), how='inner')\n","    # cloud_bline(df_H, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_H, [-1]), how='inner')\n","    # cloud_bline(df_4H, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_4H, [-1]), how='inner')\n","\n","    # print(\"cbline phase done\")\n","\n","\n","\n","    # --------------- sd_dc --------------- #\n","    # df = sd_dc(df, 20, 40)\n","    # df = sd_dc(df, 20, 20)\n","    # df = sd_dc(df_5T, 20, 40, df)\n","    # df = sd_dc(df_H, 20, 40, df)\n","\n","    # print(\"sd_dc phase done\")\n","\n","    # --------------- imb_ratio --------------- #\n","    # imb_ratio(df, '5T')\n","    # imb_ratio_v3(df, \"5T\")\n","    # imb_ratio_v4(df, \"5T\")\n","\n","    # imb_ratio(df, 'H')\n","    # imb_ratio_v2(df, '5T')\n","    \n","    # print(\"imb_ratio phase done\")\n","\n","    # --------------- rel_abs_ratio --------------- #\n","    # rel_abs_ratio(df, '5T', norm_period=120)\n","\n","    # --------------- normalize data --------------- #\n","    # itv = 'T'\n","    # lb_period = 15\n","    # target_col = 'close_{}{}'.format(itv, lb_period)\n","    # target_data = df['close'].diff(lb_period).to_numpy()\n","    # norm_data(df, target_data, target_col)    \n","    # print(\"normalize data phase done !\")\n","\n","    # --------------- lucid sar --------------- #\n","    # lucid_sar_v2(df)\n","    # lucid_sar_v2(df_3T)\n","    # df = df.join(to_lower_tf_v2(df, df_3T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_5T)\n","    # df = df.join(to_lower_tf_v2(df, df_5T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_15T)\n","    # df = df.join(to_lower_tf_v2(df, df_15T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_30T)\n","    # df = df.join(to_lower_tf_v2(df, df_30T, [-2, -1]), how='inner')       \n","\n","    # print(\"sar phase done\")\n","\n","    # --------------- supertrend --------------- #\n","    # df = st_price_line(df, df_3T, '3m')\n","    # df = st_price_line(df, df_5T, '5m')\n","    # df = st_price_line(df, df_15T, '15m')\n","    # df = st_price_line(df, df_30T, '30m')\n","    # df = st_price_line(df, df_H, '1h')\n","    # df = st_price_line(df, df_4H, '4h')\n","\n","    # print(\"supertrend phase done\")\n","\n","    # --------------- rsi --------------- #  \n","    # df['rsi_1m'] = rsi(df, 14)    \n","    # df_5T['rsi_5m'] = rsi(df_5T, 14)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1]), columns=['rsi_5m']))\n","    \n","    # print(\"rsi phase done\")\n","\n","\n","    # --------------- cci --------------- #  \n","    # df['cci_1m'] = cci(df, 20)\n","\n","    # print(\"cci phase done\")\n","\n","    # --------------- ema --------------- #      \n","    # df_5T['ema_5m'] = ema(df_5T['close'], 195)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1]), columns=['ema_5m']))\n","    \n","    # print(\"ema phase done\")        \n","\n","\n","    return df\n"]},{"cell_type":"markdown","metadata":{"id":"mEKyVbHWSuzi"},"source":["## make & save res_df (concat 생각하면, timeindex sync 맞춰야함)"]},{"cell_type":"markdown","metadata":{"id":"VdukVo5-Suzj"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"khKb9nhlSuzj"},"outputs":[],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  if '2021-07-01'.upper() not in file_list[i]:\n","  # if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    excel_name = key.replace(\".xlsx\", \"_st1h_backi2.xlsx\")\n","    excel_path = save_path + excel_name\n","\n","    if excel_name in exist_list:\n","      print(excel_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m 마지막 timeindex 의 date 기준, 08:59:59.999000 를 last timestamp 로 설정\n","      #      2. 시작 timestamp 는 모든 tf 의 가장 최근 시작 index,\n","      #       a. 1m 의 시작 timeindex 는 최소, htf 의 시작 timeindex 보다 interval 만큼 앞서야함\n","      #         i. 따라서 1m open_index, latest_open_index + 1d 를 하면 댐\n","      #           1. timestamp 으로 변환후 1day 를 더하고 datetime 으로 변환\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","    latest_open_index = sorted(open_indexes)[-1]\n","    \n","    open_ts = datetime.timestamp(latest_open_index)\n","    latest_open_index_1m = datetime.fromtimestamp(open_ts + a_day)\n","\n","    #   str 로 만들어 접근하면 불가함  #\n","    end_index = pd.to_datetime(str(df.index[-1]).split(\" \")[0] + \" 08:59:59.999000\")\n","    # break\n","\n","    sliced_df = df.loc[latest_open_index_1m:end_index] # to_lower_tf 의 기준 ltf\n","    sliced_second_df = second_df.loc[latest_open_index:end_index]\n","    sliced_third_df = third_df.loc[latest_open_index:end_index]\n","    sliced_fourth_df = fourth_df.loc[latest_open_index:end_index]\n","    sliced_fifth_df = fifth_df.loc[latest_open_index:end_index]\n","\n","    print(\"sliced index\")\n","    print(sliced_df.index[[0, -1]])\n","    print(sliced_second_df.index[[0, -1]])\n","    print(sliced_third_df.index[[0, -1]])\n","    print(sliced_fourth_df.index[[0, -1]])\n","    print(sliced_fifth_df.index[[0, -1]])\n","\n","    try:\n","      sliced_sixth_df = sixth_df.loc[latest_open_index:end_index]\n","      sliced_seventh_df = seventh_df.loc[latest_open_index:end_index]\n","\n","      print(sliced_sixth_df.index[[0, -1]])\n","      print(sliced_seventh_df.index[[0, -1]])\n","\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df, sliced_sixth_df, sliced_seventh_df)\n","    \n","    except:\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df)\n","\n","\n","\n","    res_df.to_excel(excel_path)\n","    print(excel_name, \"saved succesfully !\")"]},{"cell_type":"markdown","metadata":{"id":"Bw5JibDKSuzj"},"source":["### xlsx to feather"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VA-_gcA7Suzj"},"outputs":[],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  # if '2021-07-01'.upper() not in file_list[i]:\n","  if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    feather_name = key.replace(\".xlsx\", \".ftr\")\n","    # feather_path = save_path + feather_name\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m 마지막 timeindex 의 date 기준, 08:59:59.999000 를 last timestamp 로 설정\n","      #      2. 시작 timestamp 는 모든 tf 의 가장 최근 시작 index,\n","      #       a. 1m 의 시작 timeindex 는 최소, htf 의 시작 timeindex 보다 interval 만큼 앞서야함\n","      #         i. 따라서 1m open_index, latest_open_index + 1d 를 하면 댐\n","      #           1. timestamp 으로 변환후 1day 를 더하고 datetime 으로 변환\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","\n","    df.reset_index().to_feather(date_path + feather_name, compression='lz4')\n","    second_df.reset_index().to_feather(date_path2 + feather_name, compression='lz4')\n","    third_df.reset_index().to_feather(date_path3 + feather_name, compression='lz4')\n","    fourth_df.reset_index().to_feather(date_path4 + feather_name, compression='lz4')\n","    fifth_df.reset_index().to_feather(date_path5 + feather_name, compression='lz4')\n","    sixth_df.reset_index().to_feather(date_path6 + feather_name, compression='lz4')\n","    seventh_df.reset_index().to_feather(date_path7 + feather_name, compression='lz4')\n","\n","    print(\"xlsx converted to feather !\")\n","    "]},{"cell_type":"markdown","metadata":{"id":"Pe0QpnORSuzk"},"source":["### add itv_name to ftr"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"M-gl30KxSuzk"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","# dir_path = \"bbdc3m_backi2\"\n","# date = '2021-10-10'\n","date = '2021-07-01'\n","\n","db_path = './candlestick_concated/database_bn/non_cum/%s/' % date\n","os.makedirs(os.path.join(db_path), exist_ok=True)\n","\n","# exist_list = os.listdir(os.path.join(save_path, dir_path))\n","# break\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","        \n","    df = shutil.copy(date_path + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n","    second_df = shutil.copy(date_path2 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval2))\n","    third_df = shutil.copy(date_path3 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval3))\n","    fourth_df = shutil.copy(date_path4 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval4))\n","    fifth_df = shutil.copy(date_path5 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval5))\n","    sixth_df = shutil.copy(date_path6 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval6))\n","    seventh_df = shutil.copy(date_path7 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval7))\n","\n","    print(\"copied to\" + db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n"]},{"cell_type":"markdown","metadata":{"id":"4oZ1ohTtSuzk"},"source":["### feather ver. (database to res_df)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vgVHpnUsSuzk"},"outputs":[],"source":["# db_path = './candlestick_concated/database_ub/' # upbit\n","db_path = './candlestick_concated/database_bn/'   # binance\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","save_dir_path = \"bb1d_backi2\"\n","date = '2022-02-17'\n","\n","# concat_path = 'noncat' # 새로운 cols 를 기존 cum/concat 에 붙이려는 경우\n","concat_path = 'concat'\n","cum_path = \"cum\"\n","# cum_path = \"non_cum\"  # non_cum 으로 진행하는 경우, row concat 용도이기 때문에 noncat -> concat 으로 변경 (base cols 를 모두 담고 있음)\n","\n","load_path = os.path.join(db_path, cum_path, date)\n","save_path = os.path.join(save_path, save_dir_path, concat_path, cum_path, date)\n","\n","os.makedirs(save_path, exist_ok=True)\n","\n","file_list = os.listdir(load_path)\n","exist_list = os.listdir(save_path)\n","# break\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","\n","    if \"_1m\" not in key:\n","      continue\n","\n","    # feather_name = key.replace(\".ftr\", \"_%.ftr\" % save_dir_path)\n","    feather_name = key.replace(\"_1m\", \"\")\n","    feather_path = os.path.join(save_path, feather_name)\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    df = pd.read_feather(os.path.join(load_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","    res_df = sync_check_make(df)\n","\n","    res_df.reset_index().to_feather(feather_path, compression='lz4')\n","    print(feather_path, \"saved succesfully !\")"]},{"cell_type":"markdown","metadata":{"id":"YxCPUzoyidwH"},"source":["#### just add col to loaded df"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":620},"executionInfo":{"elapsed":3099,"status":"ok","timestamp":1662020383911,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"odqVwQHpYo1M","outputId":"a847fe3a-8ef4-42ef-8f5b-42a30e227a8c"},"outputs":[{"output_type":"stream","name":"stdout","text":["3T ->                          open     high      low    close\n","index                                                  \n","2022-04-27 08:45:00  2803.55  2803.97  2799.26  2800.43\n","5T ->                          open     high      low    close\n","index                                                  \n","2022-04-27 08:45:00  2803.55  2803.97  2799.26  2800.43\n","15T ->                          open     high      low    close\n","index                                                  \n","2022-04-27 08:45:00  2803.55  2803.97  2799.26  2800.43\n","30T ->                          open     high      low    close\n","index                                                  \n","2022-04-27 08:30:00  2783.61  2806.93  2780.79  2800.43\n","H ->                          open     high      low    close\n","index                                                  \n","2022-04-27 08:00:00  2819.33  2822.77  2761.27  2800.43\n","4H ->                          open    high      low    close\n","index                                                 \n","2022-04-27 05:00:00  2837.34  2855.0  2761.27  2800.43\n","D ->                          open    high      low    close\n","index                                                 \n","2022-04-26 09:00:00  3006.12  3043.0  2761.27  2800.43\n","dc phase done\n"]},{"output_type":"execute_result","data":{"text/plain":["                         dc_base_5T20  dc_upper_15T20  dc_lower_15T20  dc_base_15T20  dc_upper_H20  dc_lower_H20  dc_base_H20  dc_upper_4H20  dc_lower_4H20  dc_base_4H20\n","index                                                                                                                                                                    \n","2022-04-27 08:41:59.999       2802.88          2861.0         2761.27       2811.135        3020.4       2796.54      2908.47         3043.0         2791.3       2917.15\n","2022-04-27 08:42:59.999       2802.88          2861.0         2761.27       2811.135        3020.4       2796.54      2908.47         3043.0         2791.3       2917.15\n","2022-04-27 08:43:59.999       2802.88          2861.0         2761.27       2811.135        3020.4       2796.54      2908.47         3043.0         2791.3       2917.15\n","2022-04-27 08:44:59.999       2802.88          2861.0         2761.27       2811.135        3020.4       2796.54      2908.47         3043.0         2791.3       2917.15\n","2022-04-27 08:45:59.999       2802.88          2861.0         2761.27       2811.135        3020.4       2796.54      2908.47         3043.0         2791.3       2917.15"],"text/html":["\n","  <div id=\"df-82edc4cf-e480-4347-a215-ce711a8f52c5\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>dc_base_5T20</th>\n","      <th>dc_upper_15T20</th>\n","      <th>dc_lower_15T20</th>\n","      <th>dc_base_15T20</th>\n","      <th>dc_upper_H20</th>\n","      <th>dc_lower_H20</th>\n","      <th>dc_base_H20</th>\n","      <th>dc_upper_4H20</th>\n","      <th>dc_lower_4H20</th>\n","      <th>dc_base_4H20</th>\n","    </tr>\n","    <tr>\n","      <th>index</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2022-04-27 08:41:59.999</th>\n","      <td>2802.88</td>\n","      <td>2861.0</td>\n","      <td>2761.27</td>\n","      <td>2811.135</td>\n","      <td>3020.4</td>\n","      <td>2796.54</td>\n","      <td>2908.47</td>\n","      <td>3043.0</td>\n","      <td>2791.3</td>\n","      <td>2917.15</td>\n","    </tr>\n","    <tr>\n","      <th>2022-04-27 08:42:59.999</th>\n","      <td>2802.88</td>\n","      <td>2861.0</td>\n","      <td>2761.27</td>\n","      <td>2811.135</td>\n","      <td>3020.4</td>\n","      <td>2796.54</td>\n","      <td>2908.47</td>\n","      <td>3043.0</td>\n","      <td>2791.3</td>\n","      <td>2917.15</td>\n","    </tr>\n","    <tr>\n","      <th>2022-04-27 08:43:59.999</th>\n","      <td>2802.88</td>\n","      <td>2861.0</td>\n","      <td>2761.27</td>\n","      <td>2811.135</td>\n","      <td>3020.4</td>\n","      <td>2796.54</td>\n","      <td>2908.47</td>\n","      <td>3043.0</td>\n","      <td>2791.3</td>\n","      <td>2917.15</td>\n","    </tr>\n","    <tr>\n","      <th>2022-04-27 08:44:59.999</th>\n","      <td>2802.88</td>\n","      <td>2861.0</td>\n","      <td>2761.27</td>\n","      <td>2811.135</td>\n","      <td>3020.4</td>\n","      <td>2796.54</td>\n","      <td>2908.47</td>\n","      <td>3043.0</td>\n","      <td>2791.3</td>\n","      <td>2917.15</td>\n","    </tr>\n","    <tr>\n","      <th>2022-04-27 08:45:59.999</th>\n","      <td>2802.88</td>\n","      <td>2861.0</td>\n","      <td>2761.27</td>\n","      <td>2811.135</td>\n","      <td>3020.4</td>\n","      <td>2796.54</td>\n","      <td>2908.47</td>\n","      <td>3043.0</td>\n","      <td>2791.3</td>\n","      <td>2917.15</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-82edc4cf-e480-4347-a215-ce711a8f52c5')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-82edc4cf-e480-4347-a215-ce711a8f52c5 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-82edc4cf-e480-4347-a215-ce711a8f52c5');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":126}],"source":["res_df_ = sync_check_make(res_df_)  # suffix duplication 유의\n","res_df_.tail().iloc[:, -10:]\n","# res_df_.dtypes"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3SKglsQCj5_x"},"outputs":[],"source":["test_df_ = sync_check_make(res_df_.iloc[-4000:])  # suffix duplication 유의\n","test_df_.tail().iloc[:, -10:]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gOQxwYqK0jCS"},"outputs":[],"source":["# ------ validation ------ #\n","# res_df_.cppr_15T.describe()\n","print((res_df_.open_15T.to_numpy() - res_df_.close_15T.to_numpy())[-10:])\n","print((res_df_.dc_upper_15T4.to_numpy() - res_df_.dc_lower_15T4.to_numpy())[-10:])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RmiB5VU5DN6B"},"outputs":[],"source":["# np.where(res_df_.CDL3LINESTRIKE_15T) #.iloc[-1000:,]\n","\n","# CDL3LINESTRIKE = talib.CDL3LINESTRIKE(df_15T.open, df_15T.high, df_15T.low, df_15T.close)\n","for col in talib.get_function_groups()['Pattern Recognition']:  \n","  print(np.unique(res_df_[col + '_15T'].to_numpy(), return_counts=True))\n","\n","# CDLCLOSINGMARUBOZU = talib.CDLCLOSINGMARUBOZU(df_15T.open, df_15T.high, df_15T.low, df_15T.close)\n","# print(np.unique(CDLCLOSINGMARUBOZU.to_numpy(), return_counts=True))\n","# print(CDLCLOSINGMARUBOZU.tail(50))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2407,"status":"ok","timestamp":1662020394112,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"XrgJPQRuisCa","outputId":"b136b481-cf11-40ed-9bcc-1c12bad3129d"},"outputs":[{"output_type":"stream","name":"stdout","text":["./candlestick_concated/database_bn/cum/2022-04-27/2022-04-27 ETHUSDT_1m.ftr saved !\n"]}],"source":["# ------------ save current res_df ------------ #\n","ftr_path = os.path.join(save_path.replace(\"res_df\", \"database_bn\"), \"cum\", date)\n","ftr_full_path = os.path.join(ftr_path, key)\n","\n","res_df_.reset_index().to_feather(ftr_full_path, compression='lz4')  # key 잘 확인하고 저장\n","print(ftr_full_path, 'saved !')"]},{"cell_type":"markdown","metadata":{"id":"E0n53hflJbnp"},"source":["### htf candle check"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6xW0yugCWvGz"},"outputs":[],"source":["itv_list = ['3T', '5T', '15T', '30T', '1H', '4H']\n","comp_df_list = [second_df, third_df, fourth_df, fifth_df, sixth_df, seventh_df]\n","offset_list = ['1h', '2min', '2min', '2min', '2min', '2min']\n","# itv_list = ['4H']\n","# comp_df_list = [seventh_df]\n","\n","slice_len = 100\n","for itv_, comp_df_, offset in zip(itv_list, comp_df_list, offset_list):\n","\n","  print(\"itv_ :\", itv_)\n","\n","  # df = h_candle_v2(df, '3T')\n","  # end_ts = \n","  h_res_df = df.resample(itv_, offset=offset).agg({\n","          'open': 'first',\n","          'high': 'max',\n","          'low': 'min',\n","          'close': 'last'\n","      })\n","\n","  #   앞은 길이가 다르고, 뒤에서부터 잘라서 비교    #\n","  #   last_row 빼고는 동일, 4h 제외\n","  # print(df.tail())\n","  print(h_res_df.tail())\n","  print(comp_df_.tail())\n","  # # print(h_res_df.head())\n","  # # print(second_df.head())\n","\n","  # print(len(h_res_df))\n","  # print(len(second_df))\n","\n","  # print(h_res_df.values[-slice_len:])\n","  # print(second_df.iloc[:, :4].values[-slice_len:])\n","  # print(np.argwhere(h_res_df.values[-slice_len:] != comp_df_.iloc[:, :4].values[-slice_len:]))\n","  # print()\n","  break"]},{"cell_type":"markdown","metadata":{"id":"jTN3M842Suzl"},"source":["## concat & save new res_df"]},{"cell_type":"markdown","metadata":{"id":"MlFkpO1MSuzl"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"U-3QkfbFSuzl"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","dict_name = \"2021-07-01 ETHUSDT_bb15m_backi2_res_dfs.pkl\"\n","\n","#     load with pickle    #\n","with open(save_path + dict_name, 'rb') as f:\n","  saved_res_df_dict = pickle.load(f)\n","\n","print(dict_name, \"loaded !\")\n","res_df_files = os.listdir(save_path)\n","res_df_files.reverse()\n","\n","print(res_df_files)\n","\n","res_df_dict = {}\n","\n","base_postfix = '_bb15m_backi2.xlsx'\n","new_postfix = '_st1h_backi2.xlsx'\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for k_i, key in enumerate(res_df_files):\n","\n","  if '2021-07-01'.upper() not in key:\n","  # if '2021-10-10'.upper() not in key:\n","    continue\n","\n","  # if \"link\".upper() not in key:\n","  # if \"btc\".upper() not in key:\n","  #   continue\n","\n","  if new_postfix not in key:\n","    continue\n","\n","  # if key in \n","\n","  if sample_cnt == max_cnt:\n","    dict_name = \"%s_res_dfs.pkl\" % key.split(\".\")[0]\n","    print(\"dict_name :\", dict_name)\n","\n","  base_df = saved_res_df_dict[key.replace(new_postfix, base_postfix)]\n","  # base_df = pd.read_excel(save_path + key.replace(new_postfix, base_postfix), index_col=0)  \n","  res_df = pd.read_excel(save_path + key, index_col=0)  \n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  droped_new_res_df.head()\n","  # break\n","\n","  # res_df_dict[key] = res_df\n","  res_df_dict[key] = droped_new_res_df\n","  print(key, \"saved to dict !\")\n","\n","  #     save with pickle    #\n","  with open(save_path + dict_name, 'wb') as f:\n","    pickle.dump(res_df_dict, f)\n","\n","  sample_cnt -= 1\n","\n","  if sample_cnt <= 0:\n","    break\n"]},{"cell_type":"markdown","metadata":{"id":"t1E_eAyPSuzm"},"source":["### new col to latest feather (1m_indi. only)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xyI5NrM7Suzm"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","cum_dir = \"cum\"\n","\n","new_dir_path = \"rsi_backi2\"\n","base_dir_path = \"bbdc3m_backi2\"\n","\n","new_date = '2021-11-17'\n","\n","\n","\n","#     load ftr list    #\n","base_save_path = os.path.join(save_path, base_dir_path, \"concat/cum\", new_date)\n","new_save_path = base_save_path.replace(base_dir_path, new_dir_path)\n","\n","#     save to (new) cum dir    #\n","#      1. if dir. not exists, makedir\n","os.makedirs(new_save_path, exist_ok=True)\n","\n","ftr_list = [s for s in os.listdir(base_save_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_save_path, key), columns=None, use_threads=True).set_index(\"index\")\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  droped_new_res_df = sync_check(base_df)\n","\n","  # new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # # new_res_df.head()\n","\n","  # intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  # droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break\n","\n","  droped_new_res_df.reset_index().to_feather(os.path.join(new_save_path, key), compression='lz4')\n","\n","  print(os.path.join(new_save_path, key), \"saved !\")\n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"markdown","metadata":{"id":"nUs4fjVHSuzl"},"source":["### feather ver. (col concat)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6cu-Y82iSuzl"},"outputs":[],"source":["new_dir_path = \"st3m_backi2\"\n","base_dir_path = \"bb1d_backi2\"\n","\n","# new_date = \"2021-11-17\"\n","new_date = \"2022-01-10\"\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","save_path = './candlestick_concated/res_df/'\n","save_path = os.path.join(save_path, new_dir_path, \"concat/cum\", new_date)   \n","# save_path = os.path.join(save_path, new_dir_path, \"concat/non_cum\", new_date)   # row col 하려면 concat 맞음, noncum 사용\n","os.makedirs(save_path, exist_ok=True)\n","\n","\n","#     load ftr list    #\n","# ftr_list = [s for s in os.listdir(os.path.join(save_path, new_dir_path)) if \"ftr\" in s]\n","\n","noncat_path = save_path.replace(\"concat/\", \"noncat/\")\n","ftr_list = [s for s in os.listdir(noncat_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","  try:\n","\n","    #       read from base postfix's directory    #\n","    base_df = pd.read_feather(os.path.join(save_path.replace(new_dir_path, base_dir_path), key), columns=None, use_threads=True).set_index(\"index\")\n","    res_df = pd.read_feather(os.path.join(noncat_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","    # print(base_df.head())\n","    # print(res_df.head())\n","    # break\n","\n","    new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","    # new_res_df.head()\n","\n","    droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","    # droped_new_res_df.head()\n","    # break\n","\n","    droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","    # res_df_dict[key] = res_df\n","    # res_df_dict[key] = droped_new_res_df\n","    print(os.path.join(save_path, key), \"saved !\")\n","  \n","  except Exception as e:\n","    print(\"error occured ! :\", e)\n","  \n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"markdown","metadata":{"id":"WVAKq3i8Suzm"},"source":["### feather ver. (row concat) , database cum 도 호환가능"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XG2p9OhhSuzm"},"outputs":[],"source":["# save_path = './candlestick_concated/res_df/'        # cols 추가된 cum db 에 new_row's cols 기준으로 합치는 경우\n","save_path = './candlestick_concated/database_bn/'   # ohlcv cum db 만들 경우\n","\n","base_date = '2022-04-25'\n","# new_date = '2022-02-17'\n","new_date = '2022-04-27'\n","\n","# ------ load ftr list ------ #\n","if \"database\" in save_path:\n","  base_dir_path = \"\"\n","  new_dir_path = \"\"\n","  concat_dir = \"\"\n","else:\n","  base_dir_path = \"sar_backi2\"\n","  new_dir_path = \"bb4h_backi2\"  # dir_path 가 base / new 서로 달라질 수 있어서 분할함\n","  concat_dir = \"concat\"\n","\n","base_date_path = os.path.join(save_path, base_dir_path, concat_dir, \"cum\", base_date)      # 기존 cum db 와 new_date db 를 cum 진행\n","# base_date_path = os.path.join(save_path, base_dir_path, concat_dir, \"non_cum\", base_date)    # non_cum db 와 new_date db 를 cum 진행\n","\n","# new_date_path = os.path.join(save_path, new_dir_path, concat_dir, \"cum\", new_date)      # 상황별로 직접 선택해야할 듯\n","new_date_path = os.path.join(save_path, new_dir_path, concat_dir, \"non_cum\", new_date)\n","\n","\n","\n","# ------ save to (new) concat dir ------ #\n","#      1. if dir. not exists, makedir\n","save_path = new_date_path.replace(\"non_cum\", \"cum\")   # non_cum 아니여도 무관\n","os.makedirs(save_path, exist_ok=True)   # noncat / concat 두가지 경우 존재가능할 것\n","# os.makedirs(os.path.join(save_path, dir_path, \"noncat/cum\", new_date), exist_ok=True)\n","\n","\n","ftr_list = [s for s in os.listdir(new_date_path) if \"ftr\" in s]\n","exist_list = os.listdir(save_path)\n","print(ftr_list)\n","# break\n","\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:   # date rejection\n","    continue\n","  if '1m' not in key:  # itv rejection\n","    continue\n","\n","  # if key in exist_list:\n","  #   print(key, \"already exist !\")\n","  #   continue\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_date_path, key.replace(new_date, base_date)), columns=None, use_threads=True).set_index(\"index\")   # key 에 new_date 담겨있음\n","  res_df = pd.read_feather(os.path.join(new_date_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break  \n","  \n","  print(droped_new_res_df.iloc[[0, -1]])  \n","\n","  # ------------- verify df continuity directly itv by itv ------------- #\n","  true_continue = True\n","  if \"_\" in key:\n","\n","    # interval = key.split(\".\")[0].split(\"_\")[-1] \n","    # itv_num = to_itvnum(interval)\n","\n","    # verified_df = consecutive_df(droped_new_res_df, to_itvnum(interval))\n","    # verified_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","    # res_df_dict[key] = res_df\n","    # res_df_dict[key] = droped_new_res_df  \n","\n","    np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","    ideal_ts_gap = 60 # * itv_num\n","\n","    for ts_i in range(len(np_idx_ts)):\n","      \n","      if ts_i != 0:\n","        ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","        if ts_gap > ideal_ts_gap or ts_gap < ideal_ts_gap:\n","        # if ts_gap == ideal_ts_gap:\n","          print(droped_new_res_df.index[ts_i - 1])\n","          print(droped_new_res_df.index[ts_i])\n","          # print(ts_gap)\n","          print(\"------------------ unideal ts_gap ------------------\")\n","          true_continue = False\n","\n","    print(\"continuity checked !\")\n","\n","  if true_continue:\n","    droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","  print(os.path.join(save_path, key), \"saved !\")\n","  \n"]},{"cell_type":"markdown","metadata":{"id":"L7l5CTJfSuzn"},"source":["### check continuity"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"w-5jn9opBl73"},"outputs":[],"source":["droped_new_res_df = res_df_"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nGzMGyC3Suzn"},"outputs":[],"source":["# print(droped_new_res_df.columns)\n","\n","print(droped_new_res_df.iloc[[0, -1]])\n","\n","np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","\n","print(np_idx_ts[:10])\n","for ts_i in range(len(np_idx_ts)):\n","  \n","  if ts_i != 0:\n","    ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","\n","    if ts_gap > 60 or ts_gap < 60:\n","\n","      print(\"invalid ts_gap found !\")\n","    # if ts_gap == 60:\n","      print(droped_new_res_df.index[ts_i - 1])\n","      print(droped_new_res_df.index[ts_i])\n","      # print(ts_gap)\n","      print()\n"]},{"cell_type":"markdown","metadata":{"id":"x_XGJqBi8Jex"},"source":["### check length of front missing value + middle_data non_missing validity"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yRNwqVeAu8X8"},"outputs":[],"source":["#       1. new_date 의 시작 timeidx 와 base_date end timeidx 의 최소 days' gap     #\n","#       2. new_date 의 시작 부분 indi. value 는 np.nan 으로 채워질 거기 때문에 계산해야함    #\n","\n","df_count = droped_new_res_df.count()\n","len_missing = df_count.max() - df_count.min()\n","print(len_missing / 1440)\n","\n","#       3. \n","missing_sliced_df = droped_new_res_df.iloc[len_missing:]\n","df_count2 = missing_sliced_df.count()\n","# print(df_count2)\n","print((df_count2.max() - df_count2.min()))    # this value should be zero !\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"AY7E2_hTBsyM"},"outputs":[],"source":["# df_count2.index[df_count2.argmin()]\n","# missing_sliced_df.head(5)\n","\n","stay_missed = np.sum(pd.isnull(missing_sliced_df), axis=0)\n","print(stay_missed)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"p9yqewOw9g33"},"outputs":[],"source":["stay_missed_cols = stay_missed[stay_missed != 0].index\n","\n","for sm_col in stay_missed_cols:\n","  \n","  row_idx = np.argwhere(pd.isnull(missing_sliced_df[sm_col].values))\n","\n","  plt.figure(figsize=(3,3))\n","  plt.plot(row_idx)\n","  plt.ylim(0, len(missing_sliced_df))\n","  plt.title(sm_col)\n","\n","  plt.show()\n"]},{"cell_type":"markdown","metadata":{"id":"MSUY4nnku3s9"},"source":["## legacy"]},{"cell_type":"markdown","metadata":{"id":"epgS5Dksu-HX"},"source":["### mv files"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"aJcVpEdrslA5"},"outputs":[],"source":["df_path = './candlestick_concated/survey_df_v2'\n","files_ = os.listdir(df_path)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cEKyEYkotFDy"},"outputs":[],"source":["dirs = [file_ for file_ in files_ if not file_.endswith('.ftr')]\n","files = [file_ for file_ in files_ if file_.endswith('.ftr')]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"IgM79tcxtPVZ"},"outputs":[],"source":["dirs"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"M767iRtwtRQP"},"outputs":[],"source":["def move_fn(dir_, file_):\n","  src_path = os.path.join(df_path, file_)\n","  dst_path = os.path.join(df_path, dir_, file_)\n","  shutil.move(src_path, dst_path)\n","  print(\"moved to {}\".format(dst_path))\n","\n","_ = [move_fn('2022-01-10 ETHUSDT_all', file_) for file_ in files if 'eth'.upper() in file_]\n","# sols\n"]},{"cell_type":"markdown","metadata":{"id":"Iy76iO7gztne"},"source":["### move legacy files"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hMRht32Czwry"},"outputs":[],"source":["# print()\n","cur_dir_list = os.listdir('.')\n","for f in cur_dir_list:\n","  if 'legacy' in f :\n","    # print(f)\n","    if os.path.isdir(current_path + f,):\n","      continue\n","\n","    shutil.move(current_path + f, current_path + 'legacy/' + f)\n","    print(\"moved to\" + current_path + 'legacy/' +  f)"]},{"cell_type":"markdown","metadata":{"id":"5duWn8t4BRyv"},"source":["# IDE platform\n"]},{"cell_type":"markdown","metadata":{"id":"6HOjnZjSgzk1"},"source":["## load ftr_list"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4423,"status":"ok","timestamp":1662344796435,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"7FPBG5Qqg2jB","outputId":"257b76b7-1f79-49a9-b5a2-4c826739fb3d"},"outputs":[{"output_type":"stream","name":"stdout","text":["['2022-04-27 ETHUSDT_1m.ftr']\n","2022-04-27 ETHUSDT_1m.ftr loaded !\n","load res_df_ elapsed time : 3.857067823410034\n"]}],"source":["save_path = './candlestick_concated/database_bn/'\n","\n","# dir_path = \"bb1d_backi2\"\n","# date = \"2022-02-17\"\n","# ftr_path = os.path.join(save_path, dir_path, \"concat/cum\", date)\n","\n","# ------ 1T_database ------ #\n","# date = \"2022-04-27\"\n","# ftr_path = os.path.join(save_path, \"non_cum\", date)\n","\n","date = \"2022-04-27\"\n","# date = \"2022-02-17\"\n","ftr_path = os.path.join(save_path, \"cum\", date)\n","\n","# ------ load ftr list ------ #\n","ftr_list = [s for s in os.listdir(ftr_path) if \"ftr\" in s if date in s]\n","print(ftr_list)\n","\n","start_0 = time.time()\n","key = ftr_list[0]  # tempoaray use single key\n","res_df_ = pd.read_feather(os.path.join(ftr_path, key), columns=None, use_threads=True).set_index(\"index\")\n","# print(res_df_.head())\n","print(key, \"loaded !\")\n","print(\"load res_df_ elapsed time :\", time.time() - start_0)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RQH_l4opEh_O"},"outputs":[],"source":["res_df_.dtypes\n","# res_df_.index[[0, -1]]"]},{"cell_type":"markdown","metadata":{"id":"x2yj2SwAXDLp"},"source":["### edit cols"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"x9wkWw15XCAm","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1657898275247,"user_tz":-540,"elapsed":2,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"cf3fee46-d616-45e7-a3e2-3e0683513582"},"outputs":[{"output_type":"stream","name":"stdout","text":["['stoch_T1333']\n"]}],"source":["col_list = list(res_df_.columns)\n","\n","# ------ check target cols ------ #\n","print([col_ for col_ in col_list if 'stoch' in col_])\n","\n","# ------ drop ------ #\n","# res_df_.drop([col_ for col_ in col_list if 'open_15T' in col_], inplace=True, axis=1)\n","res_df_.drop([col_ for col_ in col_list if 'stoch' in col_], inplace=True, axis=1)\n","# res_df_.drop([col_ for col_ in col_list if '_T40' in col_], inplace=True, axis=1)\n","# res_df_.drop([col_ for col_ in col_list if 'long_base' in col_], inplace=True, axis=1)\n","# res_df_.drop([col_ for col_ in col_list[5:]], inplace=True, axis=1)\n","\n","# ------ replace ------ #\n","# for c_i, col_ in enumerate(col_list):\n","#   if 'basis' in col_:\n","# #   # if col_[-1] in ['m', 'h', 'd', 'H'] and '_' in col_:eTa_5T\n","# #   # if col_[0] in ['h'] and '_' in col_:\n","# #   if 'bir_' in col_:\n","\n","#     col_list[c_i] = col_.replace('basis', 'base')\n","# #     # col_list[c_i] = col_.replace('m', 'T').replace('h', 'H').replace('1T', 'T')\n","# #     # col_list[c_i] = col_.replace('1d', 'D')\n","# #     # col_list[c_i] = col_.replace('eTa_5T', 'ema_5T')\n","# #     # col_list[c_i] = col_list[c_i][1:]\n","# #     # print(col_list[c_i][0])\n","# res_df_.columns = col_list\n","# col_list[-2:] = ['resi_T', 'sup_T']"]},{"cell_type":"markdown","metadata":{"id":"14chOHeXh6JD"},"source":["### lab"]},{"cell_type":"markdown","metadata":{"id":"O87s8_EUakqS"},"source":["#### instant indi."]},{"cell_type":"code","source":["def get_wave_time_ratio(res_df, wave_itv1, wave_period1):\n","\n","  wave_cu_post_idx_fill_ = res_df['wave_cu_post_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy().astype(int)\n","  wave_co_post_idx_fill_ = res_df['wave_co_post_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy().astype(int)\n","\n","  wave_cu_idx_fill_ = res_df['wave_cu_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy().astype(int)\n","  wave_co_idx_fill_ = res_df['wave_co_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy().astype(int)\n","\n","  wave_valid_cu_post_idx_fill_ = np.where(wave_cu_post_idx_fill_ < 0, 0, wave_cu_post_idx_fill_)\n","  wave_valid_co_post_idx_fill_ = np.where(wave_co_post_idx_fill_ < 0, 0, wave_co_post_idx_fill_)\n","\n","  wave_valid_cu_idx_fill_ = np.where(wave_cu_idx_fill_ < 0, 0, wave_cu_idx_fill_)\n","  wave_valid_co_idx_fill_ = np.where(wave_co_idx_fill_ < 0, 0, wave_co_idx_fill_)\n","\n","  res_df['short_wave_time_ratio_{}{}'.format(wave_itv1, wave_period1)] = (wave_valid_co_post_idx_fill_ - wave_valid_cu_post_idx_fill_[wave_valid_co_post_idx_fill_[wave_valid_cu_idx_fill_]]) / (wave_valid_cu_idx_fill_ - wave_valid_co_post_idx_fill_)\n","  res_df['long_wave_time_ratio_{}{}'.format(wave_itv1, wave_period1)] = (wave_valid_cu_post_idx_fill_ - wave_valid_co_post_idx_fill_[wave_valid_cu_post_idx_fill_[wave_valid_co_idx_fill_]]) / (wave_valid_co_idx_fill_ - wave_valid_cu_post_idx_fill_)\n","\n","  return res_df"],"metadata":{"id":"Fg4JnLY6i99D"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def wave_range_cci_v4_1(t_df, wave_period):\n","    t_df = cci_v2(t_df, wave_period)\n","    itv = pd.infer_freq(t_df.index)\n","\n","    cci_ = t_df['cci_{}{}'.format(itv, wave_period)].to_numpy()\n","    b1_cci_ = t_df['cci_{}{}'.format(itv, wave_period)].shift(1).to_numpy()\n","\n","    baseline = 0\n","    band_width = 100\n","    upper_band = baseline + band_width\n","    lower_band = baseline - band_width\n","\n","    data_cols = ['open', 'high', 'low', 'close']\n","    ohlc_list = [t_df[col_].to_numpy() for col_ in data_cols]\n","    open, high, low, close = ohlc_list\n","\n","    # ============ modules ============ #\n","    # ------ define co, cu ------ # <- point missing 과 관련해 정교해아함\n","    cu_bool = (b1_cci_ > upper_band) & (upper_band > cci_)\n","    co_bool = (b1_cci_ < lower_band) & (lower_band < cci_)\n","\n","    return wave_publics_v2(t_df, cu_bool, co_bool, ohlc_list, wave_period)"],"metadata":{"id":"XkrbzNFKZhl0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def wave_publics_v2(t_df, cu_bool, co_bool, ohlc_list, wave_period):\n","    itv = pd.infer_freq(t_df.index)\n","\n","    len_df = len(t_df)\n","    len_df_range = np.arange(len_df).astype(int)\n","\n","    cu_idx = get_index_bybool(cu_bool, len_df_range)\n","    co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","    open, high, low, close = ohlc_list\n","\n","    cu_fill_idx, co_fill_idx, cu_prime_idx, co_prime_idx, cu_prime_fill_idx, co_prime_fill_idx, valid_cu_bool, valid_co_bool = get_terms_info_v4(\n","        cu_idx, co_idx, len_df, len_df_range)\n","    # cu_fill_idx, co_fill_idx, cu_prime_idx, co_prime_idx, cu_prime_fill_idx, co_prime_fill_idx, \\\n","    #   cu_post_idx, co_post_idx, cu_post_fill_idx, co_post_fill_idx, valid_cu_bool, valid_co_bool = get_terms_info_v5(cu_idx, co_idx, len_df, len_df_range)\n","\n","    # ------ get post_terms ------ #\n","    high_post_terms = np.vstack((co_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","    low_post_terms = np.vstack((cu_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)\n","\n","    high_post_terms_cnt = high_post_terms[:, 1] - high_post_terms[:, 0]\n","    low_post_terms_cnt = low_post_terms[:, 1] - low_post_terms[:, 0]\n","\n","    # ------ get post_idx ------ #\n","    paired_cu_post_idx = high_post_terms[:, 1]  # Todo, 여기는 cross_idx (위에서 vstack 으로 cross_idx 입력함)\n","    paired_co_post_idx = low_post_terms[:, 1]\n","\n","    cu_post_idx = np.full(len_df, np.nan)  # --> Todo, unavailable : not cross_idx\n","    co_post_idx = np.full(len_df, np.nan)\n","\n","    cu_post_idx[paired_cu_post_idx] = paired_cu_post_idx\n","    co_post_idx[paired_co_post_idx] = paired_co_post_idx\n","\n","    cu_post_fill_idx = fill_arr(cu_post_idx)\n","    co_post_fill_idx = fill_arr(co_post_idx)\n","\n","    # ------ get prime_terms ------ # # 기본은 아래 logic 으로 수행하고, update_hl 도 해당 term 구간의 hl 이 더 작거나 클경우 적용 가능할 것\n","    # high_prime_terms = np.vstack((co_prime_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","    # low_prime_terms = np.vstack((cu_prime_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)\n","\n","    # high_prime_terms_cnt = high_prime_terms[:, 1] - high_prime_terms[:, 0]\n","    # low_prime_terms_cnt = low_prime_terms[:, 1] - low_prime_terms[:, 0]\n","\n","    # paired_prime_cu_idx = high_prime_terms[:, 1]\n","    # paired_prime_co_idx = low_prime_terms[:, 1]\n","\n","    # ====== get wave_hl & terms ====== #\n","    wave_high_ = np.full(len_df, np.nan)\n","    wave_low_ = np.full(len_df, np.nan)\n","\n","    wave_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_post_terms])\n","    wave_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_post_terms])\n","\n","    wave_high_[paired_cu_post_idx] = wave_highs\n","    wave_low_[paired_co_post_idx] = wave_lows\n","\n","    wave_high_fill_ = fill_arr(wave_high_)\n","    wave_low_fill_ = fill_arr(wave_low_)\n","\n","    # ------ Todo, update_hl 에 대해서, post_terms_hl 적용 ------ #\n","    wave_high_terms_low_ = np.full(len_df, np.nan)\n","    wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","    wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_post_terms])  # for point rejection, Todo, min_max 설정 항상 주의\n","    wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_post_terms])\n","\n","    wave_high_terms_low_[paired_cu_post_idx] = wave_high_terms_lows\n","    wave_low_terms_high_[paired_co_post_idx] = wave_low_terms_highs\n","\n","    update_low_cu_bool = wave_high_terms_low_ < wave_low_fill_\n","    update_high_co_bool = wave_low_terms_high_ > wave_high_fill_\n","\n","    # ------ term cnt ------ #\n","    wave_high_terms_cnt_ = np.full(len_df, np.nan)\n","    wave_low_terms_cnt_ = np.full(len_df, np.nan)\n","\n","    wave_high_terms_cnt_[paired_cu_post_idx] = high_post_terms_cnt\n","    wave_low_terms_cnt_[paired_co_post_idx] = low_post_terms_cnt\n","\n","    wave_high_terms_cnt_fill_ = fill_arr(wave_high_terms_cnt_)\n","    wave_low_terms_cnt_fill_ = fill_arr(wave_low_terms_cnt_)\n","\n","    # ------ hl_fill 의 prime_idx 를 찾아야함 ------ #\n","    # b1_wave_high_fill_ = pd.Series(wave_high_fill_).shift(1).to_numpy()\n","    # b1_wave_low_fill_ = pd.Series(wave_low_fill_).shift(1).to_numpy()\n","    # wave_high_prime_idx = np.where((wave_high_fill_ != b1_wave_high_fill_) & ~np.isnan(wave_high_fill_), len_df_range, np.nan)\n","    # wave_low_prime_idx = np.where((wave_low_fill_ != b1_wave_low_fill_) & ~np.isnan(wave_low_fill_), len_df_range, np.nan)\n","    #\n","    # high_prime_idx_fill_ = fill_arr(wave_high_prime_idx)\n","    # low_prime_idx_fill_ = fill_arr(wave_low_prime_idx)\n","\n","    # ============ enlist to df_cols ============ #\n","    t_df['wave_high_fill_{}{}'.format(itv, wave_period)] = wave_high_fill_\n","    t_df['wave_low_fill_{}{}'.format(itv, wave_period)] = wave_low_fill_\n","    t_df['wave_high_terms_cnt_fill_{}{}'.format(itv, wave_period)] = wave_high_terms_cnt_fill_\n","    t_df['wave_low_terms_cnt_fill_{}{}'.format(itv, wave_period)] = wave_low_terms_cnt_fill_\n","\n","    t_df['wave_update_low_cu_bool_{}{}'.format(itv, wave_period)] = update_low_cu_bool  # temporary, for plot_check\n","    t_df['wave_update_high_co_bool_{}{}'.format(itv, wave_period)] = update_high_co_bool\n","\n","    t_df['wave_cu_{}{}'.format(itv, wave_period)] = cu_bool  # * ~update_low_cu_bool\n","    t_df['wave_co_{}{}'.format(itv, wave_period)] = co_bool  # * ~update_high_co_bool\n","    \n","    t_df['wave_cu_idx_fill_{}{}'.format(itv, wave_period)] = cu_fill_idx\n","    t_df['wave_co_idx_fill_{}{}'.format(itv, wave_period)] = co_fill_idx\n","\n","    t_df['wave_co_post_idx_{}{}'.format(itv, wave_period)] = co_post_idx  # paired_\n","    t_df['wave_cu_post_idx_{}{}'.format(itv, wave_period)] = cu_post_idx  # paired_\n","    t_df['wave_co_post_idx_fill_{}{}'.format(itv, wave_period)] = co_post_fill_idx\n","    t_df['wave_cu_post_idx_fill_{}{}'.format(itv, wave_period)] = cu_post_fill_idx\n","\n","    # Todo, idx 저장은 sync. 가 맞는 tf_df 에 대하여 적용하여야함\n","    # ------ for roll prev_hl ------ #\n","    # high_post_idx 를 위해 co_prime_idx 입력 = 뜻 : high_term's prime co_idx (high_prime_idx = wave_high 를 만들기 위한 가장 앞단의 co_idx)\n","    t_df['wave_co_prime_idx_{}{}'.format(itv,\n","                                         wave_period)] = co_prime_idx  # co_prime_idx wave_high_prime_idx  # high 갱신을 고려해, prev_hl 는 prime_idx 기준으로 진행\n","    t_df['wave_cu_prime_idx_{}{}'.format(itv,\n","                                         wave_period)] = cu_prime_idx  # cu_prime_idx wave_low_prime_idx  # cu_prime_idx's low 를 사용하겠다라는 의미, 즉 roll_prev 임\n","    t_df['wave_co_prime_idx_fill_{}{}'.format(itv, wave_period)] = co_prime_fill_idx  # co_prime_fill_idx high_prime_idx_fill_\n","    t_df['wave_cu_prime_idx_fill_{}{}'.format(itv, wave_period)] = cu_prime_fill_idx  # cu_prime_fill_idx low_prime_idx_fill_\n","\n","    # ------ for plot_checking ------ #\n","    t_df['wave_cu_marker_{}{}'.format(itv, wave_period)] = get_line(cu_idx, close)\n","    t_df['wave_co_marker_{}{}'.format(itv, wave_period)] = get_line(co_idx, close)\n","\n","    return t_df"],"metadata":{"id":"FdDkSxbaX4AI"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LyGnAMvLYvOZ"},"source":["#### wave_range"]},{"cell_type":"markdown","metadata":{"id":"O1uu9vQnY5dn"},"source":["##### plot_check"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YqBXjVPzdccC"},"outputs":[],"source":["i = random.randint(0, len(res_df))\n","# i = 235290, 512385\n","# i = 74470\n","# i = 82533\n","i = 387103\n","i = 370055\n","i = 159000\n","\n","plot_size = 300 # 1500 150\n","# t_df = res_df.iloc[i - plot_size:i + plot_size]\n","t_df = res_df.iloc[i - plot_size:i]\n","a_data = t_df.to_numpy()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"PgaNnempXRd_"},"outputs":[],"source":["wave_itv1, wave_period1 = 'T', 20\n","roll_hl_cnt = 3\n","\n","if wave_itv1 != 'T':\n","    offset = '1h' if wave_itv1 != 'D' else '9h'\n","    htf_df = to_htf(t_df, wave_itv1, offset=offset)  # to_htf 는 ohlc, 4개의 col 만 존재 (현재까지)\n","    # htf_df = wave_range_cci_v3(htf_df, wave_period1)\n","    htf_df = wave_range_dc_envel_v1(htf_df, wave_period1)\n","    \n","\n","    cols = list(htf_df.columns)  # 그냥 다 넣어버리기 (추후 혼란 방지)\n","\n","    valid_high_prime_idx, valid_low_prime_idx, roll_prev_high_idx_arr, roll_prev_low_idx_arr = roll_wave_hl_idx_v5(htf_df, wave_itv1, wave_period1, roll_hl_cnt=roll_hl_cnt)\n","\n","    htf_df = get_roll_wave_data_v2(htf_df, valid_high_prime_idx, roll_prev_high_idx_arr, 'wave_high_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","    cols += list(htf_df.columns[-roll_hl_cnt:])\n","\n","    htf_df = get_roll_wave_data_v2(htf_df, valid_low_prime_idx, roll_prev_low_idx_arr, 'wave_low_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","    cols += list(htf_df.columns[-roll_hl_cnt:])\n","\n","    htf_df = wave_range_ratio_v4_2(htf_df, wave_itv1, wave_period1, roll_hl_cnt=3)\n","    cols += list(htf_df.columns[-4:])  # wrr 은 4개의 cols\n","\n","    # ------ 필요한 cols 만 join (htf's idx 정보는 ltf 와 sync. 가 맞지 않음 - join 불가함) ------ #\n","    t_df.drop(cols, inplace=True, axis=1, errors='ignore')\n","    t_df = t_df.join(to_lower_tf_v3(t_df, htf_df, cols, backing_i=0), how='inner')\n","\n","else:  \n","  t_df = wave_range_cci_v4(t_df, wave_period1)\n","  # t_df = wave_range_stoch_v1(t_df, wave_period1)\n","  # t_df = wave_range_dc_envel_v1(t_df, wave_period1)\n","\n","  valid_high_prime_idx, valid_low_prime_idx, roll_prev_high_idx_arr, roll_prev_low_idx_arr = roll_wave_hl_idx_v5(t_df, wave_itv1, wave_period1, roll_hl_cnt=roll_hl_cnt)\n","  t_df = get_roll_wave_data_v2(t_df, valid_high_prime_idx, roll_prev_high_idx_arr, 'wave_high_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","  t_df = get_roll_wave_data_v2(t_df, valid_low_prime_idx, roll_prev_low_idx_arr, 'wave_low_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","\n","  t_df = wave_range_ratio_v4_2(t_df, wave_itv1, wave_period1, roll_hl_cnt=roll_hl_cnt)\n","\n","# t_df = wave_range_v11(t_df, config)\n","# t_df = wave_range_v11_2(t_df, config)\n","# t_df = wave_range_dcbase_v11_3(t_df, config, over_period=2)\n","# t_df = wave_range_cci_v1(t_df, wave_itv1, wave_period1)\n","# t_df = wave_range_v12(t_df, config, ltf_df=None)\n","# t_df = wave_range_v13(t_df, config, ltf_df=None, term_thresh=1)\n","# t_df = wave_range_v14(t_df, config, ltf_df=None, term_thresh1=1, term_thresh2=3)\n","# t_df = wave_range_v15(t_df, config, term_thresh1=2, term_thresh2=3)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":862},"executionInfo":{"elapsed":2482,"status":"ok","timestamp":1660482394219,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"-Dr_tTk9csFm","outputId":"cbbc017d-db06-458d-ce7d-d3ad9d67a7ad"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1080x1080 with 2 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(15, 15))\n","nrows, ncols = 2, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols,\n","                        height_ratios=[3, 1]\n","                        )\n","\n","ax = fig.add_subplot(gs[0])\n","\n","# ------ candles ------ #\n","candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","# _ = [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","\n","len_df = len(t_df)   \n","len_df_range = np.arange(len_df).astype(int)\n","\n","# ============ ============ ============ #\n","# ============ ============ ============ #\n","\n","wave_high_fill_ = t_df['wave_high_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_low_fill_ = t_df['wave_low_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_high_terms_cnt_fill_ = t_df['wave_high_terms_cnt_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_low_terms_cnt_fill_ = t_df['wave_low_terms_cnt_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","wave_cu_idx_ = get_index_bybool(t_df['wave_cu_{}{}'.format(wave_itv1, wave_period1)].to_numpy(), len_df_range)\n","wave_co_idx_ = get_index_bybool(t_df['wave_co_{}{}'.format(wave_itv1, wave_period1)].to_numpy(), len_df_range)\n","# wave_cu_bool_idx_ = get_index_bybool(t_df['wave_cu_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy(), len_df_range)\n","# wave_co_bool_idx_ = get_index_bybool(t_df['wave_co_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy(), len_df_range)\n","wave_update_low_cu_bool_idx_ = get_index_bybool(t_df['wave_update_low_cu_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy(), len_df_range)\n","wave_update_high_co_bool_idx_ = get_index_bybool(t_df['wave_update_high_co_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy(), len_df_range)\n","\n","wave_cu_prime_idx_ = t_df['wave_cu_prime_idx_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_co_prime_idx_ = t_df['wave_co_prime_idx_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_cu_prime_idx_fill_ = t_df['wave_cu_prime_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_co_prime_idx_fill_ = t_df['wave_co_prime_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","wave_cu_post_idx_ = t_df['wave_cu_post_idx_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_co_post_idx_ = t_df['wave_co_post_idx_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_cu_post_idx_fill_ = t_df['wave_cu_post_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_co_post_idx_fill_ = t_df['wave_co_post_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","wave_cu_marker_ = t_df['wave_cu_marker_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_co_marker_ = t_df['wave_co_marker_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","# high_prime_idx = t_df['wave_high_prime_idx_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","# low_prime_idx = t_df['wave_low_prime_idx_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","# high_prime_idx_fill = t_df['wave_high_prime_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","# low_prime_idx_fill = t_df['wave_low_prime_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","# ============ plot_check ============ #\n","# dc_base_ = t_df['dc_base_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","# plt.step(len_df_range, dc_base_, alpha=1.0, color='cyan', linewidth=1)\n","\n","plt.step(len_df_range, wave_cu_marker_, \"o\", alpha=1.0, color='#ff00ff', markersize=3)\n","plt.step(len_df_range, wave_co_marker_, \"o\", alpha=1.0, color='#00ff00', markersize=3)\n","\n","plt.step(len_df_range, t_df['dc_upper_{}{}'.format(wave_itv1, wave_period1)], color='#ffeb3b')\n","plt.step(len_df_range, t_df['dc_lower_{}{}'.format(wave_itv1, wave_period1)], color='#ffeb3b')\n","\n","# [plt.axvline(int(idx_), color=\"#ff0000\") for idx_ in wave_cu_bool_idx_ if not np.isnan(idx_)]\n","# [plt.axvline(int(idx_), color=\"#0000ff\") for idx_ in wave_co_bool_idx_ if not np.isnan(idx_)]\n","[plt.axvline(int(idx_), color=\"#ff0000\") for idx_ in wave_update_low_cu_bool_idx_ if not np.isnan(idx_)]\n","[plt.axvline(int(idx_), color=\"#0000ff\") for idx_ in wave_update_high_co_bool_idx_ if not np.isnan(idx_)]\n","\n","# [plt.axvline(int(idx_), color=\"#ff00ff\") for idx_ in wave_cu_idx_ if not np.isnan(idx_)]\n","# [plt.axvline(int(idx_), color=\"#00ff00\") for idx_ in wave_co_idx_ if not np.isnan(idx_)]\n","\n","# [plt.axvline(int(idx_), color=\"#00ff00\") for idx_ in wave_high_prime_idx if not np.isnan(idx_)]\n","# [plt.axvline(int(idx_), color=\"#ff00ff\") for idx_ in wave_low_prime_idx if not np.isnan(idx_)]\n","\n","plt.step(len_df_range, wave_high_fill_, \"*\", alpha=1.0, color='#00ff00', markersize=6)\n","plt.step(len_df_range, wave_low_fill_, \"*\", alpha=1.0, color='#ff00ff', markersize=6)\n","\n","# ------ data check in gs[0] ------ #\n","plt.axvline(wave_cu_post_idx_fill_[230], color='r')\n","plt.axvline(wave_cu_prime_idx_fill_[230])\n","\n","plt.xlim(0, len_df)\n","\n","plt.subplot(gs[1])\n","\n","# --- cci --- #\n","cci_ = t_df['cci_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","plt.step(len_df_range, cci_, alpha=1.0, color='yellow', linewidth=2)\n","plt.axhline(100, color=\"#ffffff\")\n","plt.axhline(-100, color=\"#ffffff\")\n","\n","# --- stoch --- #\n","# stoch_ = t_df['stoch_{}{}33'.format(wave_itv1, wave_period1)].to_numpy()\n","# plt.step(len_df_range, stoch_, alpha=1.0, color='yellow', linewidth=2)\n","# plt.axhline(67, color=\"#ffffff\")\n","# plt.axhline(33, color=\"#ffffff\")\n","\n","[plt.axvline(int(idx_), color=\"#ff00ff\") for idx_ in wave_cu_idx_ if not np.isnan(idx_)]\n","[plt.axvline(int(idx_), color=\"#00ff00\") for idx_ in wave_co_idx_ if not np.isnan(idx_)]   # long 이라서 초록색임\n","\n","# plt.step(len_df_range, wave_high_terms_cnt_fill_, alpha=1.0, color='yellow', linewidth=2)\n","# plt.step(len_df_range, wave_low_terms_cnt_fill_, alpha=1.0, color='yellow', linewidth=2)\n","# plt.step(len_df_range, wave_high_terms_cnt_fill_, \"*\", alpha=1.0, color='#00ff00', markersize=6)\n","# plt.step(len_df_range, wave_low_terms_cnt_fill_, \"*\", alpha=1.0, color='#ff00ff', markersize=6)\n","\n","\n","plt.xlim(0, len_df)  # for sync. with gs[0]\n","\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"c2yVTn1tnxMn"},"source":["###### data_window"]},{"cell_type":"code","source":["# print(valid_high_prime_idx)  # = valid_co_prime_idx\n","# print(roll_prev_high_idx_arr)   # = roll_prev_co_idx_arr\n","print(valid_low_prime_idx)  # = valid_co_prime_idx\n","print(roll_prev_low_idx_arr)   # = roll_prev_co_idx_arr"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6bra-Br3lq1h","executionInfo":{"status":"ok","timestamp":1660483201485,"user_tz":-540,"elapsed":351,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"8c90e368-24c7-439e-9733-567d4848859a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[ 39  45 124 164]\n","[[ 39  45 124]\n"," [ 45 124 164]]\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":345,"status":"ok","timestamp":1660484147094,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"0DgdFydfB1f-","outputId":"1677cb32-6a71-4292-b49a-204f7da8ed20"},"outputs":[{"output_type":"stream","name":"stdout","text":["145.0\n","239.0\n"]}],"source":["idx = 239\n","# print(wave_cu_post_idx_fill_[idx])\n","# print(wave_co_prime_idx_fill_[idx - 1])\n","# print(wave_co_post_idx_fill_[idx - 1])\n","# print(wave_co_prime_idx_fill_[idx])\n","print(wave_co_post_idx_fill_[int(wave_cu_post_idx_fill_[idx])])\n","print(wave_co_idx_[idx])\n","\n","# print(len(t_df))\n","# len(wave_co_prime_idx_fill_)"]},{"cell_type":"code","source":["wave_co_idx_[~np.isnan(wave_co_idx_)]"],"metadata":{"id":"7zLNu-8gjeJ1"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zj_d5wsfDzf_"},"outputs":[],"source":["roll_hl_cnt = 3\n","high_prime_idx = t_df['wave_high_prime_idx_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","low_prime_idx = t_df['wave_low_prime_idx_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","valid_high_prime_idx = high_prime_idx[~np.isnan(high_prime_idx)].astype(int)  # roll_high 를 위한 prime_idx\n","valid_low_prime_idx = low_prime_idx[~np.isnan(low_prime_idx)].astype(int)  # roll_low 를 위한 prime_idx\n","\n","roll_high_idx_arr = np.array([valid_high_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_high_prime_idx)) if\n","                              idx_ + 1 >= roll_hl_cnt])  # cnt 수를 만족시키기 위해 idx 제한\n","roll_low_idx_arr = np.array(\n","    [valid_low_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_low_prime_idx)) if idx_ + 1 >= roll_hl_cnt])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Z-EokTzIqb-T"},"outputs":[],"source":["%timeit -n1 -r1 wave_range_v10(res_df[-100000:], period1, ltf_df=None) # 23.7 s per loop\n","%timeit -n1 -r1 wave_range_v11(res_df[-100000:], period1, ltf_df=None) # 574 ms per loop"]},{"cell_type":"markdown","metadata":{"id":"Q_1wJTcRYpm8"},"source":["##### legacy"]},{"cell_type":"code","source":["def get_next_fibo_gap(x):\n","  if 0 < x < 0.214:\n","    return -0.786\n","  elif 0.214 < x < 0.382:\n","    return -0.618\n","  elif 0.382 < x < 0.5:\n","    return -0.5\n","  elif 0.5 < x < 0.618:\n","    return -0.382\n","  elif 0.618 < x < 0.764:\n","    return -0.236\n","  elif 0.764 < x < 1:\n","    return 0\n","  else:\n","    return np.nan # 일단은, wrr_32 < 1 만 허용키로.\n","\n","\n","def get_next_fibo_gap2(x):\n","  if 0 < x < 0.214:\n","    return -0.618\n","  elif 0.214 < x < 0.382:\n","    return -0.5\n","  elif 0.382 < x < 0.5:\n","    return -0.382\n","  elif 0.5 < x < 0.618:\n","    return -0.236\n","  elif 0.618 < x < 0.764:\n","    return 0\n","  elif 0.764 < x < 1:\n","    return 0\n","  else:\n","    return np.nan # 일단은, wrr_32 < 1 만 허용키로."],"metadata":{"id":"Bmp7faPhzydp"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"02DcTVB2cYuR"},"source":["##### dump"]},{"cell_type":"code","source":["roll_hl_cnt = 3\n","wave_itv = pd.infer_freq(t_df.index)\n","wave_period = config.tr_set.wave_period\n","\n","len_df = len(t_df)\n","\n","high_prime_idx = t_df['wave_high_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()   # cu_post_idx\n","low_prime_idx = t_df['wave_low_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()    \n","\n","valid_high_prime_idx = high_prime_idx[~np.isnan(high_prime_idx)].astype(int)  # roll_high 를 위한 prime_idx\n","valid_low_prime_idx = low_prime_idx[~np.isnan(low_prime_idx)].astype(int)  # roll_low 를 위한 prime_idx\n","\n","roll_high_idx_arr = np.array([valid_high_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_high_prime_idx)) if idx_ + 1 >= roll_hl_cnt])  # cnt 수를 만족시키기 위해 idx 제한\n","roll_low_idx_arr = np.array([valid_low_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_low_prime_idx)) if idx_ + 1 >= roll_hl_cnt])\n"],"metadata":{"id":"fjGcs9ngkh5s"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["t_df = cci_v2(t_df, wave_period)\n","\n","cci_ = t_df['cci_{}{}'.format(itv, wave_period)].to_numpy()\n","b1_cci_ = t_df['cci_{}{}'.format(itv, wave_period)].shift(1).to_numpy()\n","\n","band_width = 100\n","upper_band = band_width\n","lower_band = -band_width\n","\n","len_df = len(t_df)\n","len_df_range = np.arange(len_df).astype(int)\n","\n","data_cols = ['open', 'high', 'low', 'close']\n","open, high, low, close = [t_df[col_].to_numpy() for col_ in data_cols]\n","# b1_close = t_df.close.shift(itv_num).to_numpy()\n","\n","# ============ modules ============ #\n","# ------ define co, cu ------ # <- point missing 과 관련해 정교해아함\n","cu_bool = (b1_cci_ > upper_band) & (upper_band > cci_)\n","co_bool = (b1_cci_ < lower_band) & (lower_band < cci_)\n","\n","cu_idx = get_index_bybool(cu_bool, len_df_range)\n","co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","cu_fill_idx, co_fill_idx, cu_prime_idx, co_prime_idx, cu_prime_fill_idx, co_prime_fill_idx, valid_cu_bool, valid_co_bool = get_terms_info_v4(\n","    cu_idx, co_idx, len_df, len_df_range)\n","\n","# ------ get post_terms ------ #\n","high_post_terms = np.vstack((co_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","low_post_terms = np.vstack((cu_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)\n","\n","high_post_terms_cnt = high_post_terms[:, 1] - high_post_terms[:, 0]\n","low_post_terms_cnt = low_post_terms[:, 1] - low_post_terms[:, 0]\n","\n","paired_post_cu_idx = high_post_terms[:, 1]\n","paired_post_co_idx = low_post_terms[:, 1]\n","\n","# ------ get prime_terms ------ # # 기본은 아래 logic 으로 수행하고, update_hl 도 해당 term 구간의 hl 이 더 작거나 클경우 적용 가능할 것\n","# high_prime_terms = np.vstack((co_prime_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","# low_prime_terms = np.vstack((cu_prime_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)\n","\n","# high_prime_terms_cnt = high_prime_terms[:, 1] - high_prime_terms[:, 0]\n","# low_prime_terms_cnt = low_prime_terms[:, 1] - low_prime_terms[:, 0]\n","\n","# paired_prime_cu_idx = high_prime_terms[:, 1]\n","# paired_prime_co_idx = low_prime_terms[:, 1]\n","\n","# ====== get wave_hl & terms ====== #\n","wave_high_ = np.full(len_df, np.nan)\n","wave_low_ = np.full(len_df, np.nan)\n","\n","wave_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_post_terms])\n","wave_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_post_terms])\n","\n","wave_high_[paired_post_cu_idx] = wave_highs\n","wave_low_[paired_post_co_idx] = wave_lows\n","\n","wave_high_fill_ = fill_arr(wave_high_)\n","wave_low_fill_ = fill_arr(wave_low_)\n","\n","# ------ Todo, update_hl 에 대해서, post_terms_hl 적용 ------ #\n","wave_high_terms_low_ = np.full(len_df, np.nan)\n","wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_post_terms])  # for point rejection, Todo, min_max 설정 항상 주의\n","wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_post_terms])\n","\n","wave_high_terms_low_[paired_post_cu_idx] = wave_high_terms_lows\n","wave_low_terms_high_[paired_post_co_idx] = wave_low_terms_highs\n","\n","update_low_cu_bool = wave_high_terms_low_ < wave_low_fill_\n","update_high_co_bool = wave_low_terms_high_ > wave_high_fill_\n","\n","# ------ term cnt ------ #\n","wave_high_terms_cnt_ = np.full(len_df, np.nan)\n","wave_low_terms_cnt_ = np.full(len_df, np.nan)\n","\n","wave_high_terms_cnt_[paired_post_cu_idx] = high_post_terms_cnt\n","wave_low_terms_cnt_[paired_post_co_idx] = low_post_terms_cnt\n","\n","wave_high_terms_cnt_fill_ = fill_arr(wave_high_terms_cnt_)\n","wave_low_terms_cnt_fill_ = fill_arr(wave_low_terms_cnt_)\n","\n","# ------ hl_fill 의 prime_idx 를 찾아야함 ------ #\n","# b1_wave_high_fill_ = pd.Series(wave_high_fill_).shift(1).to_numpy()\n","# b1_wave_low_fill_ = pd.Series(wave_low_fill_).shift(1).to_numpy()\n","# wave_high_prime_idx = np.where((wave_high_fill_ != b1_wave_high_fill_) & ~np.isnan(wave_high_fill_), len_df_range, np.nan)\n","# wave_low_prime_idx = np.where((wave_low_fill_ != b1_wave_low_fill_) & ~np.isnan(wave_low_fill_), len_df_range, np.nan)\n","#\n","# high_prime_idx_fill_ = fill_arr(wave_high_prime_idx)\n","# low_prime_idx_fill_ = fill_arr(wave_low_prime_idx)\n","\n","# ============ enlist to df_cols ============ #\n","t_df['wave_high_fill_{}{}'.format(itv, wave_period)] = wave_high_fill_\n","t_df['wave_low_fill_{}{}'.format(itv, wave_period)] = wave_low_fill_\n","t_df['wave_high_terms_cnt_fill_{}{}'.format(itv, wave_period)] = wave_high_terms_cnt_fill_\n","t_df['wave_low_terms_cnt_fill_{}{}'.format(itv, wave_period)] = wave_low_terms_cnt_fill_\n","\n","# ------ for roll prev_hl ------ #\n","# high_post_idx 를 위해 co_prime_idx 입력\n","t_df['wave_high_prime_idx_{}{}'.format(itv, wave_period)] = co_prime_idx # co_prime_idx wave_high_prime_idx  # high 갱신을 고려해, prev_hl 는 prime_idx 기준으로 진행\n","t_df['wave_low_prime_idx_{}{}'.format(itv, wave_period)] = cu_prime_idx # cu_prime_idx wave_low_prime_idx  # cu_prime_idx's low 를 사용하겠다라는 의미, 즉 roll_prev 임\n","\n","# ------ for first_high ------ #\n","t_df['wave_high_prime_idx_fill_{}{}'.format(itv, wave_period)] = co_prime_fill_idx # co_prime_fill_idx high_prime_idx_fill_\n","t_df['wave_low_prime_idx_fill_{}{}'.format(itv, wave_period)] = cu_prime_fill_idx # cu_prime_fill_idx low_prime_idx_fill_\n","\n","# ------ for plot_checking ------ #\n","t_df['wave_cu_bool_{}{}'.format(itv, wave_period)] = cu_bool  # temporary, for plot_check\n","t_df['wave_co_bool_{}{}'.format(itv, wave_period)] = co_bool\n","t_df['wave_cu_{}{}'.format(itv, wave_period)] = cu_bool * ~update_low_cu_bool\n","t_df['wave_co_{}{}'.format(itv, wave_period)] = co_bool * ~update_high_co_bool\n","t_df['wave_cu_marker_{}{}'.format(itv, wave_period)] = get_line(cu_idx, close)\n","t_df['wave_co_marker_{}{}'.format(itv, wave_period)] = get_line(co_idx, close)\n","# t_df['update_low_cu_bool_{}{}'.format(itv, wave_period)] = update_low_cu_bool\n","# t_df['update_high_co_bool_{}{}'.format(itv, wave_period)] = update_high_co_bool\n","\n","if itv != 'T':\n","    join_cols = np.arange(-15, 0, 1).astype(int)  # wave vars. + wave_unit's col\n","    res_df.drop(t_df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","    try:\n","        res_df = res_df.join(to_lower_tf_v3(res_df, t_df, join_cols, backing_i=0), how='inner')\n","    except Exception as e:\n","        print(\"error in wave_range()'s join() :\", e)\n","\n","    return res_df\n","\n","else:\n","    return t_df"],"metadata":{"id":"CLYKs7ItkgIa"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Go7ARIUhfC1g"},"outputs":[],"source":["\n","\n","def get_roll_wave_data_v2(valid_prime_idx, roll_idx_arr, len_df, data, roll_prev_hl_cnt):\n","\n","    roll_data = pd.DataFrame(np.full((len_df, roll_prev_hl_cnt), np.nan))\n","    roll_data.iloc[valid_prime_idx[roll_prev_hl_cnt:], :] = data[roll_idx_arr]  # 제한된 idx 를 제외한 row 에 roll_hl 입력\n","\n","    return roll_data.ffill().to_numpy()\n","\n","def roll_wave_hl_v5(t_df, config, roll_prev_hl_cnt=3):\n","  \n","    wave_itv = pd.infer_freq(t_df.index)\n","    wave_period = config.tr_set.wave_period\n","\n","    len_df = len(t_df)\n","\n","    high_prime_idx = t_df['wave_high_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    low_prime_idx = t_df['wave_low_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()    \n","\n","    valid_high_prime_idx = high_prime_idx[~np.isnan(high_prime_idx)].astype(int)  # roll_high 를 위한 prime_idx\n","    valid_low_prime_idx = low_prime_idx[~np.isnan(low_prime_idx)].astype(int)  # roll_low 를 위한 prime_idx\n","\n","    roll_prev_high_idx_arr = np.array([valid_high_prime_idx[idx_ - roll_prev_hl_cnt:idx_] for idx_ in range(len(valid_high_prime_idx)) if idx_ >= roll_prev_hl_cnt])  # cnt 수를 만족시키기 위해 idx 제한\n","    roll_prev_low_idx_arr = np.array([valid_low_prime_idx[idx_ - roll_prev_hl_cnt:idx_] for idx_ in range(len(valid_low_prime_idx)) if idx_ >= roll_prev_hl_cnt])\n","\n","    return valid_high_prime_idx, valid_low_prime_idx, roll_prev_high_idx_arr, roll_prev_low_idx_arr"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pgA8QqyXZ66o"},"outputs":[],"source":["t_df[roll_cols].tail(100)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wF7fKJ3mOhaf"},"outputs":[],"source":["data_col = 'wave_high_fill_{}{}'.format(wave_itv1, wave_period1)\n","data = htf_df[data_col].to_numpy()\n","len_htf_df = len(htf_df)\n","\n","\n","roll_data = pd.DataFrame(index=htf_df.index, data=np.full((len_htf_df, roll_hl_cnt), np.nan))\n","roll_data.iloc[valid_high_prime_idx[roll_hl_cnt - 1:], :] = data[roll_prev_high_idx_arr]  # 제한된 idx 를 제외한 row 에 roll_hl 입력\n","\n","# roll_data.ffill()\n","htf_df[roll_cols] = roll_data.ffill()\n","htf_df[roll_cols]\n","\n","# htf_df[roll_cols] = np.nan\n","# htf_df[roll_cols].iloc[valid_high_prime_idx[roll_hl_cnt - 1:]] = data[roll_prev_high_idx_arr]  # 제한된 idx 를 제외한 row 에 roll_hl 입력\n","\n","# htf_df[roll_cols] = htf_df[roll_cols].ffill().to_numpy()\n","\n","# valid_high_prime_idx\n","# np.sum(~np.isnan(roll_high))\n","# htf_df[roll_cols]\n","# roll_prev_low_idx_arr"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3vHLGont-BFe"},"outputs":[],"source":["# t_df\n","to_lower_tf_v2(res_df, t_df, join_cols)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Mh3w2s-j34Zs"},"outputs":[],"source":["wave_post_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_post_terms])\n","wave_post_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_post_terms])\n","\n","# print(len(paired_cu_idx))\n","# print(len(wave_post_highs))\n","# print(len(cu_bool))\n","\n","update_paired_cu_bool = (cu_bool * (wave_high_terms_low_ < wave_low_fill_))[paired_cu_idx]\n","update_paired_cu_idx = paired_cu_idx[update_paired_cu_bool]\n","wave_high_[update_paired_cu_idx] = wave_post_highs[update_paired_cu_bool]\n","\n","update_paired_co_bool = (co_bool * (wave_low_terms_high_ > wave_high_fill_))[paired_co_idx]\n","update_paired_co_idx = paired_co_idx[update_paired_co_bool]\n","wave_low_[update_paired_co_idx] = wave_post_lows[update_paired_co_bool]\n","\n","wave_high_fill2_ = fill_arr(wave_high_)\n","wave_low_fill2_ = fill_arr(wave_low_)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1651799326382,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"eQ06-kWq4m6F","outputId":"5c5df956-4fbd-4aa4-e1d6-dc5d0c23ac19"},"outputs":[{"name":"stdout","output_type":"stream","text":["11\n","11\n"]}],"source":["# wave_post_highs\n","# update_cu_bool = (cu_bool * (wave_high_terms_low_ < wave_low_fill_))[paired_cu_idx]\n","# print(paired_cu_idx[update_cu_bool])\n","# print(paired_cu_idx)\n","print(len(update_paired_cu_idx))\n","print(len(wave_post_highs[update_paired_cu_bool]))\n","# print(high_prime_terms[:, 1])\n","# print(high_post_terms[:, 1])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SUFmr9Z_kcCN"},"outputs":[],"source":["cu_idx = get_index_bybool(cu_bool, len_df_range)\n","co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","cu_fill_idx = fill_arr(cu_idx)\n","co_fill_idx = fill_arr(co_idx)\n","\n","notnan_cu_bool = ~np.isnan(cu_idx)\n","notnan_co_bool = ~np.isnan(co_idx)\n","\n","# ------ 생략된 idx 에 대한 prime_idx 탐색 ------ #\n","high_bool = cu_fill_idx < co_fill_idx  # 이렇게 해야 high_terms[:, 1] 이 cu_idx 가 나옴\n","low_bool = co_fill_idx < cu_fill_idx\n","\n","high_terms_vec = get_index_bybool(high_bool, len_df_range)\n","low_terms_vec = get_index_bybool(low_bool, len_df_range) # -> low_terms\n","\n","high_terms_list = using_clump(high_terms_vec)\n","low_terms_list = using_clump(low_terms_vec)\n","\n","valid_cu_prime_idx = np.array([terms.min() for terms in low_terms_list])\n","valid_co_prime_idx = np.array([terms.min() for terms in high_terms_list])\n","\n","cu_prime_idx = np.full(len_df, np.nan)\n","co_prime_idx = np.full(len_df, np.nan)\n","\n","cu_prime_idx[valid_cu_prime_idx] = valid_cu_prime_idx\n","co_prime_idx[valid_co_prime_idx] = valid_co_prime_idx\n","\n","cu_prime_fill_idx = fill_arr(cu_prime_idx)\n","co_prime_fill_idx = fill_arr(co_prime_idx)\n","\n","# ------ get co, cu terms_v2 ------ # # 기본은 아래 logic 으로 수행하고, update_hl 도 해당 term 구간의 hl 이 더 작거나 클경우 적용 가능할 것\n","valid_cu_bool = notnan_cu_bool * ~np.isnan(co_fill_idx) * ~np.isnan(co_prime_fill_idx)\n","valid_co_bool = notnan_co_bool * ~np.isnan(cu_fill_idx) * ~np.isnan(cu_prime_fill_idx)\n","\n","high_post_terms = np.vstack((co_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","low_post_terms = np.vstack((cu_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)\n","\n","high_terms_cnt = high_post_terms[:, 1] - high_post_terms[:, 0] \n","low_terms_cnt = low_post_terms[:, 1] - low_post_terms[:, 0] \n","\n","high_prime_terms = np.vstack((co_prime_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","low_prime_terms = np.vstack((cu_prime_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_3pOQtt2ttfk"},"outputs":[],"source":["# co_prime_idx\n","# co_prime_fill_idx\n","high_prime_terms"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6,"status":"ok","timestamp":1651756811396,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"kKaD1fK3WPRP","outputId":"bbe470f3-17d0-4029-97e9-2fb383a0c752"},"outputs":[{"data":{"text/plain":["array([nan,  2.,  7.,  2.,  4.,  2.,  7.,  5.,  4.,  6.,  9.,  2.,  5., 11., 14.])"]},"execution_count":79,"metadata":{},"output_type":"execute_result"}],"source":["#  get_index_bybool(notnan_cu_bool, len_df_range)\n","valid_cu_idx = cu_idx[notnan_cu_bool]\n","valid_shift_cu_idx = pd.Series(valid_cu_idx).shift(1).to_numpy()\n","valid_co_idx = co_idx[notnan_co_bool]\n","valid_shift_co_idx = pd.Series(valid_co_idx).shift(1).to_numpy()\n","\n","valid_cu_idx - valid_shift_cu_idx\n","valid_co_idx - valid_shift_co_idx"]},{"cell_type":"markdown","metadata":{"id":"1MNVIExLULhJ"},"source":["#### legacy"]},{"cell_type":"markdown","metadata":{"id":"EOXQbXixiQcK"},"source":["##### volume_profile"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7pFuazxpgx9B"},"outputs":[],"source":["session_df = res_df_.iloc[-1440:] # 0.159 -> 0.024 (14400 -> 1440)\n","volume = session_df['volume'].to_numpy()\n","close = session_df['close'].to_numpy()\n","# px.histogram(session_df, x='volume', y='close', nbins=150, orientation='h').show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SoPJkiyKiXLM"},"outputs":[],"source":["kde_factor = 0.05\n","num_samples = 100\n","\n","start_0 = time.time()\n","kde = stats.gaussian_kde(close,weights=volume,bw_method=kde_factor)\n","kdx = np.linspace(close.min(),close.max(),num_samples)\n","kdy = kde(kdx)\n","ticks_per_sample = (kdx.max() - kdx.min()) / num_samples\n","print(\"ticks_per_sample :\", ticks_per_sample)  # sample 당 가격\n","print(\"kdy elapsed_time :\", time.time() - start_0)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mK2jBddAxJ14"},"outputs":[],"source":["peaks,_ = signal.find_peaks(kdy)\n","pkx = kdx[peaks]\n","pky = kdy[peaks]\n","\n","plt.figure(figsize=(10,5))\n","# plt.hist(close, bins=num_samples, weights=volume, alpha=.8, color='#1592e6')\n","# plt.plot(kdx, kdy, color='white')\n","# plt.plot(pkx, pky, 'bo', color='yellow')\n","plt.plot(kdy, kdx, color='white')\n","plt.plot(pky, pkx, 'bo', color='yellow')\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"a8tpQZCy0SO1"},"outputs":[],"source":["pkx"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gfA946s8UgS0"},"outputs":[],"source":["# ------ vp 의 indi. 화가 필요함 -> point 설정 ------ #\n","# 1. 4 level 은 미리 만들어놓는게 맞는걸로 보임 -> 추종하는 function 이 많음 (utils_tr, ep_out ...)\n","#   a. 4 level 에 국한하는게 아니라, 모든 peaks 에 대해 levels 설정\n","#   b. 각 session 별로 peak_list 가 주어질 것\n","#     i. prev_data 사용해야하는점 주의 (session vp 는 future_data)"]},{"cell_type":"markdown","metadata":{"id":"3T-9FwWFXR4f"},"source":["###### prominence_info"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RmBt2agljClE"},"outputs":[],"source":["start_0 = time.time()\n","min_prom = kdy.max() * 0.0\n","pipsize = 0.01\n","max_width_pips = 20\n","# width_range=(1, max_width_pips * pipsize / ticks_per_sample)\n","width_range= max_width_pips * pipsize / ticks_per_sample\n","peaks, peak_props = signal.find_peaks(kdy, prominence=min_prom, width=width_range)\n","\n","peak_x = kdx[peaks]\n","peak_y = kdy[peaks]\n","# ------ prominence lines ------ #\n","left_base = peak_props['left_bases']\n","right_base = peak_props['right_bases']\n","line_x = peak_x\n","line_y0 = peak_y\n","line_y1 = peak_y # - peak_props['prominences']\n","print(\"prom_line elapsed_time :\", time.time() - start_0)\n","\n","\n","for x, y0, y1 in zip(line_x, line_y0, line_y1):\n","    fig.add_shape(type='line',\n","        xref='x', yref='y',\n","        # x0=x, y0=y0, x1=x, y1=y1,\n","        x0=x, y0=0, x1=x, y1=y1,\n","        line=dict(\n","            color='red',\n","            width=2,\n","        )\n","    )\n","\n","# ------ width ------ #\n","left_ips = peak_props['left_ips']\n","right_ips = peak_props['right_ips']\n","# width_x0 = kdx.min() + (left_ips * ticks_per_sample)\n","# width_x1 = kdx.min() + (right_ips * ticks_per_sample)\n","width_x0 = kdx.min() + (left_base * ticks_per_sample)\n","width_x1 = kdx.min() + (right_base * ticks_per_sample)\n","\n","# int_from = kdx.min() + (left_base * ticks_per_sample)\n","# int_to = kdx.min() + (right_base * ticks_per_sample)\n","# [kde.integrate_box_1d(x0, x1) for x0, x1 in zip(int_from, int_to)]\n","\n","width_y = peak_props['width_heights']\n","\n","for x0, x1, y in zip(width_x0, width_x1, width_y):\n","    fig.add_shape(type='line',\n","        xref='x', yref='y',\n","        x0=x0, y0=y, x1=x1, y1=y,\n","        line=dict(\n","            color='red',\n","            width=2,\n","        )\n","    )\n","fig.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zqj944n-WzyZ"},"outputs":[],"source":["# peaks  # ndarray\n","# kdx  # ndarray\n","# kdy  # ndarray\n","# kdx.min()\n","left_base * ticks_per_sample\n","# volume"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Rvqv0RGojo9h"},"outputs":[],"source":["print(peak_y)\n","print(peak_props['prominences'])\n","peak_props"]},{"cell_type":"markdown","metadata":{"id":"c2729DJ6h720"},"source":["##### imb."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Rucj-iepiR_-"},"outputs":[],"source":["t_df = res_df_.iloc[-120:-100]\n","a_data = t_df.to_numpy()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ktm1aB-Bh7GH"},"outputs":[],"source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(15, 9))\n","nrows, ncols = 1, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        # height_ratios=[3, 1]\n","                        )\n","\n","ax = fig.add_subplot(gs[0])\n","\n","# ------ candles ------ #\n","candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","_ = [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jMQBhQ1Ljt5Y"},"outputs":[],"source":["def imb_ratio_v4(df, itv):\n","\n","  itv_num = to_itvnum(itv)\n","\n","  close = df['close_{}'.format(itv)].to_numpy()\n","  open = df['open_{}'.format(itv)].to_numpy()\n","\n","  b1_close = df['close_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_open = df['open_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_high = df['high_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_low = df['low_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","  body_range = abs(close - open)\n","  b1_body_range = abs(b1_close - b1_open)\n","\n","  df['body_rel_ratio_{}'.format(itv)] = body_range / b1_body_range\n","\n","  short_body_range = np.where(close <= b1_low, body_range, b1_body_range)\n","  long_body_range = np.where(close >= b1_high, body_range, b1_body_range)\n","\n","  # 추후에 통계 측정해야함 -> bir 에 따른 개별 trader 의 epout / tpep 이라던가 => short 에 양봉은 취급안함 (why use np.nan)\n","  df['short_ir_{}'.format(itv)] = np.where(close < open, (b1_low - close) / short_body_range, np.nan) # close < open & close < b1_low\n","  df['long_ir_{}'.format(itv)] = np.where(close > open, (close - b1_high) / long_body_range, np.nan) # close > open & close > b1_high\n","\n","  return"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"I1Vq_BiKpY3P"},"outputs":[],"source":["def imb_ratio_v3(df, itv):\n","\n","  itv_num = to_itvnum(itv)\n","\n","  # high = df['high_{}'.format(itv)].to_numpy()\n","  # low = df['low_{}'.format(itv)].to_numpy()\n","  # candle_range = high - low\n","\n","  close = df['close_{}'.format(itv)].to_numpy()\n","  open = df['open_{}'.format(itv)].to_numpy()\n","\n","  b1_close = df['close_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_open = df['open_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_high = df['high_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_low = df['low_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","  body_range = abs(close - open)\n","  b1_body_range = abs(b1_close - b1_open)\n","\n","  df['body_rel_ratio_{}'.format(itv)] = body_range / b1_body_range\n","\n","  short_body_ratio = np.where(close <= b1_low, body_range, b1_body_range)\n","  long_body_range = np.where(close >= b1_high, body_range, b1_body_range)\n","\n","  # 추후에 통계 측정해야함 -> bir 에 따른 개별 trader 의 epout / tpep 이라던가 => short 에 양봉은 취급안함 (why use np.nan)\n","  df['short_ir_{}'.format(itv)] = np.where(close < open, (b1_low - close) / body_range, np.nan) # close < open & close < b1_low\n","  df['long_ir_{}'.format(itv)] = np.where(close > open, (close - b1_high) / body_range, np.nan) # close > open & close > b1_high\n","\n","  return"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mtnMUkhwkdrE"},"outputs":[],"source":["imb_ratio(t_df, \"5T\")\n","# imb_ratio_v3(t_df, \"5T\")\n","# imb_ratio_v4(t_df, \"5T\")\n","\n","t_df.tail(100).short_ir_5T  # .461871\n","# t_df.iloc[:, -10:]\n","# t_df.dtypes"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RVUs1YE_pgBI"},"outputs":[],"source":["# imb_ratio(t_df, \"5T\")\n","# imb_ratio_v3(t_df, \"5T\")\n","imb_ratio_v4(t_df, \"5T\")\n","\n","t_df.tail(100).short_ir_5T  # .461871\n","# t_df.iloc[:, -10:]\n","# t_df.dtypes"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"bieHiKjBkuFL"},"outputs":[],"source":["# ------ rtc 1, 0 개념 ------ #\n","# short_rtc_1 = close\n","# short_rtc_0 = b1_low\n","\n","# long_rtc_1 = close\n","# long_rtc_0 = b1_high\n","\n","# rtc 로 활용하려면, col 로 추가해야할 것 -> 추가할만한 col_name 은 아님\n","# 1. h_candle 인 경우 -> ?\n","#   a. h_candle_v3 먹이고, open_{}.shift(num_itv).to_numpy() 진행 -> ex. res_df['close_{}'.format(hc_itv)].shift(itv_num).to_numpy() "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3X6bMXJIjPYy"},"outputs":[],"source":["# 1. 현재 종가 - 이전 고가 = imb_range (long)\n","long_imb_range = t_df.close - t_df.high.shift(1)\n","# 2. 이전 저가 - 현재 종가 - imb_range (short)\n","short_imb_range = t_df.low.shift(1) - t_df.close"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"q1nEA19v7Qpj"},"outputs":[],"source":["from math import floor\n","\n","\n","def _calc_dev(base_price, price):\n","    return 100 * (price - base_price) / base_price\n","\n","\n","def zigzag(highs, lows, depth=10, dev_threshold=5):\n","    def pivots(src_raw, length, isHigh):\n","        src = list(reversed(src_raw))\n","        bar_index = list(range(len(src)))\n","        for start in range(0, len(src)):\n","            if start + 2 * length + 1 > len(src) - 1:\n","                return\n","            p = 0\n","            if length < len(src) - start:\n","                p = src[start + length]\n","            if length == 0:\n","                yield 0, p\n","            else:\n","                isFound = True\n","                for i in range(start, start + length):\n","                    if isHigh and src[i] > p:\n","                        isFound = False\n","                    if not isHigh and src[i] < p:\n","                        isFound = False\n","                for i in range(start + length + 1, start + 2 * length + 1):\n","                    if isHigh and src[i] >= p:\n","                        isFound = False\n","                    c = not isHigh and src[i] <= p\n","                    if c:\n","                        isFound = False\n","                if isFound:\n","                    yield (bar_index[start + length], p)\n","                else:\n","                    yield None, None\n","\n","    data_highs = [x for x in pivots(highs, floor(depth / 2), True) if x[0]]\n","    data_lows = [x for x in pivots(lows, floor(depth / 2), False) if x[0]]\n","\n","    raw_pairs = []\n","\n","    for i, (ind, p) in enumerate(data_highs):\n","        lows_d = sorted([(ind_l, p_l) for ind_l, p_l in data_lows if ind > ind_l], key=lambda x: x[0])\n","        if lows_d:\n","            lows = lows_d[-1]\n","\n","            if abs(_calc_dev(lows[1], p)) >= dev_threshold:\n","                raw_pairs.append(\n","                    ((ind, p),\n","                     (lows[0], lows[1]))\n","                )\n","\n","    result = []\n","\n","    for (i_h, p_h),(i_l, p_l) in raw_pairs:\n","        if not result:\n","            result.append(((i_h, p_h),(i_l, p_l)))\n","            continue\n","\n","        if i_l == result[-1][1][0]:\n","            if p_h > result[-1][0][1]:\n","                result = result[:-1]\n","            else:\n","                continue\n","\n","        result.append(((i_h, p_h),(i_l, p_l)))\n","\n","    return result\n","\n","# highs, lows = t_df.high.to_numpy(), t_df.low.to_numpy()\n","# zigzag(highs, lows, depth=5, dev_threshold=5)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fGlmdyb97j4Q"},"outputs":[],"source":["t_df = res_df_.iloc[-120:]\n","a_data = t_df.to_numpy()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ropzIp0wUPAA"},"outputs":[],"source":["# import plotly.express as px\n","# import plotly.graph_objects as go\n","\n","def get_dist_plot(c, v, kx, ky):\n","    fig = go.Figure()\n","    fig.add_trace(go.Histogram(name='Vol Profile', x=c, y=v, nbinsx=150, \n","                               histfunc='sum', histnorm='probability density',\n","                               marker_color='#B0C4DE'))\n","    fig.add_trace(go.Scatter(name='KDE', x=kx, y=ky, mode='lines', marker_color='#D2691E'))    \n","\n","    peaks,_ = signal.find_peaks(kdy)\n","    pkx = kdx[peaks]\n","    pky = kdy[peaks]\n","    pk_marker_args=dict(size=10, color='black')\n","    fig.add_trace(go.Scatter(name=\"Peaks\", x=pkx, y=pky, mode='markers', marker=pk_marker_args))\n","    fig.show()\n","\n","    return fig"]},{"cell_type":"markdown","metadata":{"id":"RZJ6uIA_VcJs"},"source":["##### instant."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nLWAP1Cl2Hvu"},"outputs":[],"source":["def wave_range_ratio(res_df, config, bb_itv, bb_period):\n","\n","  wave_itv = pd.infer_freq(res_df.index)\n","  wave_period = config.tr_set.wave_period\n","\n","  bb_upper_ = res_df['bb_upper_{}{}'.format(bb_itv, bb_period)].to_numpy()\n","  bb_lower_ = res_df['bb_lower_{}{}'.format(bb_itv, bb_period)].to_numpy()\n","  \n","  cu_prime_idx_fill_ = res_df['wave_cu_prime_idx_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","  co_prime_idx_fill_ = res_df['wave_co_prime_idx_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","\n","  cu_bb_range = get_line(co_prime_idx_fill_, bb_upper_) - get_line(co_prime_idx_fill_, bb_lower_)  # cu 에서 co_prime 의 bb_range 사용\n","  co_bb_range = get_line(cu_prime_idx_fill_, bb_upper_) - get_line(cu_prime_idx_fill_, bb_lower_)\n","\n","  wave_range = res_df['wave_high_fill_{}{}'.format(wave_itv, wave_period)].to_numpy() - res_df['wave_low_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","  \n","  res_df['cu_wrr_{}{}'.format(wave_itv, wave_period)] = wave_range / cu_bb_range   # for cu (currently, long)\n","  res_df['co_wrr_{}{}'.format(wave_itv, wave_period)] = wave_range / co_bb_range\n","\n","  return res_df"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"H_zPYIshbZgP"},"outputs":[],"source":["# Todo, future_data\n","def enough_space(res_df, itv, period):\n","\n","  dc_upper_ = res_df['dc_upper_{}{}'.format(itv, period)].to_numpy()\n","  dc_base_ = res_df['dc_base_{}{}'.format(itv, period)].to_numpy()\n","  dc_lower_ = res_df['dc_lower_{}{}'.format(itv, period)].to_numpy()  \n","  high_ = res_df['high_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","  low_ = res_df['low_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","\n","  half_dc_gap = dc_upper_ - dc_base_\n","\n","  res_df['cu_es_{}{}'.format(itv, period)] = (low_ - dc_lower_) / half_dc_gap\n","  res_df['co_es_{}{}'.format(itv, period)] = (dc_upper_ - high_) / half_dc_gap\n","\n","  return res_df"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"o3IUBc59VR5D"},"outputs":[],"source":["# Todo, future_data\n","def candle_range_ratio(res_df, c_itv, bb_itv, bb_period):\n","\n","  itv_num = to_itvnum(c_itv)\n","\n","  b1_bb_upper_ = res_df['bb_upper_{}{}'.format(bb_itv, bb_period)].shift(itv_num).to_numpy()\n","  b1_bb_lower_ = res_df['bb_lower_{}{}'.format(bb_itv, bb_period)].shift(itv_num).to_numpy()\n","  bb_range = b1_bb_upper_ - b1_bb_lower_   # <-- h_candle's open_idx 의 bb_gap 사용\n","\n","  high_ = res_df['high_{}'.format(c_itv)].to_numpy()\n","  low_ = res_df['low_{}'.format(c_itv)].to_numpy()\n","  candle_range = high_ - low_  # 부호로 양 / 음봉 구분 (양봉 > 0)\n","  \n","  res_df['crr_{}'.format(c_itv)] = candle_range / bb_range\n","\n","  return res_df"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"u3yFd8Dcok5m"},"outputs":[],"source":["def body_rel_ratio(res_df, c_itv):\n","\n","  itv_num = to_itvnum(c_itv)\n","  \n","  b1_close_ = res_df['close_{}'.format(c_itv)].shift(itv_num).to_numpy()\n","  b1_open_ = res_df['open_{}'.format(c_itv)].shift(itv_num).to_numpy()\n","  b1_body_range = abs(b1_close_ - b1_open_)\n","\n","  close_ = res_df['close_{}'.format(c_itv)].to_numpy()\n","  open_ = res_df['open_{}'.format(c_itv)].to_numpy()\n","  body_range = abs(close_ - open_)\n","  \n","  res_df['body_rel_ratio_{}'.format(c_itv)] = body_range / b1_body_range\n","\n","  return res_df\n","\n","def dc_over_body_ratio(res_df, c_itv, dc_itv, dc_period):\n","  close_ = res_df['close_{}'.format(c_itv)].to_numpy()\n","  open_ = res_df['open_{}'.format(c_itv)].to_numpy()\n","  body_range = abs(close_ - open_)\n","  \n","  dc_upper_ = res_df['dc_upper_{}{}'.format(dc_itv, dc_period)].to_numpy()\n","  dc_lower_ = res_df['dc_lower_{}{}'.format(dc_itv, dc_period)].to_numpy() \n","\n","  res_df['dc_upper_{}{}_br'.format(dc_itv, dc_period)] = (close_ - dc_upper_) / body_range\n","  res_df['dc_lower_{}{}_br'.format(dc_itv, dc_period)] = (dc_lower_ - close_) / body_range\n","\n","  return res_df"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"JWj02LLGbnji"},"outputs":[],"source":["def candle_pumping_ratio_v2(res_df, c_itv, dc_itv, period):\n","\n","  res_df = dc_line_v3(res_df, dc_itv, dc_period=period)\n","\n","  dc_upper_ = res_df['dc_upper_{}{}'.format(dc_itv, period)].to_numpy()\n","  dc_lower_ = res_df['dc_lower_{}{}'.format(dc_itv, period)].to_numpy()\n","  dc_range = dc_upper_ - dc_lower_\n"," \n","  open_ = res_df['open_{}'.format(c_itv)].to_numpy()\n","  close_ = res_df['close_{}'.format(c_itv)].to_numpy()\n","  body = close_ - open_  # 부호로 양 / 음봉 구분 (양봉 > 0)\n","  \n","  res_df['cppr_{}'.format(c_itv)] = body / dc_range\n","\n","  return res_df\n","\n","\n","# Todo, future_data\n","def candle_pumping_ratio(res_df, c_itv, bb_itv, period):\n","\n","  itv_num = to_itvnum(c_itv)\n","\n","  # 여기에도 v2 처럼 bb_indi. 추가 (자동화)\n","\n","  b1_bb_upper_ = res_df['bb_upper_{}{}'.format(bb_itv, period)].shift(itv_num).to_numpy()\n","  b1_bb_lower_ = res_df['bb_lower_{}{}'.format(bb_itv, period)].shift(itv_num).to_numpy()\n","  bb_range = b1_bb_upper_ - b1_bb_lower_\n","\n","  open_ = res_df['open_{}'.format(c_itv)].to_numpy()\n","  close_ = res_df['close_{}'.format(c_itv)].to_numpy()\n","  body = close_ - open_  # 부호로 양 / 음봉 구분 (양봉 > 0)\n","  \n","  res_df['cppr_{}'.format(c_itv)] = body / bb_range\n","\n","  return res_df\n","\n","\n","def pumping_ratio(res_df, config, itv, period1, period2):\n","\n","  bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","  bb_upper_5T = res_df['bb_upper_5T'].to_numpy()\n","  bb_range = bb_upper_5T - bb_lower_5T\n","\n","  selection_id = config.selection_id\n","  \n","  res_df['short_ppr_{}'.format(selection_id)] = res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() / get_line(res_df['short_wave_high_idx_{}{}{}'.format(itv, period1, period2)].to_numpy(), bb_range)\n","  res_df['long_ppr_{}'.format(selection_id)] = res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() / get_line(res_df['long_wave_low_idx_{}{}{}'.format(itv, period1, period2)].to_numpy(), bb_range)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OpkclLSzazZ-"},"outputs":[],"source":["def wave_body_ratio(res_df_, itv, period):\n","  dc_upper_ = res_df_['dc_upper_{}{}'.format(itv, period)].to_numpy()\n","  dc_lower_ = res_df_['dc_lower_{}{}'.format(itv, period)].to_numpy()\n","  close_ = res_df_['close_{}'.format(itv)].to_numpy()\n","  open_ = res_df_['open_{}'.format(itv)].to_numpy()\n","\n","  dc_range = dc_upper_ - dc_lower_\n","  body_range = abs(close_ - open_)\n","\n","  res_df_['wave_body_ratio'] = body_range / dc_range\n","  res_df_['dc_upper_body_ratio'] = (np.maximum(close_, open_) - dc_upper_) / body_range\n","  res_df_['dc_lower_body_ratio'] = (dc_lower_) - np.minimum(close_, open_) / body_range\n","\n","  return"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0-zzitQRbnz8"},"outputs":[],"source":["# res_df_['wave_body_ratio'].tail(200)\n","\n","itv = 'H'\n","period = 5\n","wave_body_ratio(res_df_, itv, period)"]},{"cell_type":"markdown","metadata":{"id":"qsyPhNR8yP1c"},"source":["##### dump"]},{"cell_type":"markdown","metadata":{"id":"xpyP5t8Ht_pE"},"source":["### calc recursive indi's min_period"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"N1Hbm4OA4Tkk"},"outputs":[],"source":["ticker_prcn = get_precision_by_price(res_df.close.iloc[-1]) + 2\n","\n","target_len = 300000\n","slice_len_list = list(range(50, 10000, 100))\n","slice_len_list.insert(0, target_len)\n","\n","start_0 = time.time()\n","# prev_int_, prev_pnts_ = None, None\n","offset = 1\n","\n","for sl_idx, sample_len in enumerate(slice_len_list):\n","\n","  sample_df = res_df.iloc[-sample_len -offset:-offset]\n","  sample_len2 = sample_len\n","\n","  # --------- input using indi.s --------- #\n","  # res = ema_v0(sample_df['close'], 190)\n","  res = rsi(sample_df, 14)\n","\n","    #    to_htf()    #\n","  # df_5T = to_htf(sample_df, itv_='5T', offset='1h')\n","  # sample_len2 = len(df_5T)\n","\n","  # # --------- input using htf_indi. --------- #\n","  # res = ema(df_5T['close'], 195)\n","  # -------------------------------------- #\n","\n","  res_last_row = res.iloc[-1]\n","  if pd.isnull(res_last_row):\n","    continue\n","\n","  # print(res_last_row)\n","  # break\n","\n","  # sample_df = sample_df.join(to_lower_tf_v2(sample_df, df_5T, [-1]), how='inner')\n","\n","\n","  #   자리수 분할 계산    #\n","  int_, points_ = str(res_last_row).split('.')\n","  pnts_ = points_[:ticker_prcn]\n","\n","  if sl_idx == 0:\n","    target_int_ = int_\n","    target_pnts_ = pnts_\n","    print(\"target {} ({}) -> {} {}\".format(sample_len, sample_len2, int_, points_))\n","\n","  else:\n","    if target_int_ == int_ and target_pnts_ == pnts_:\n","      # print(sample_len, \"({})\".format(sample_len2), '->', int_, pnts_, end='\\n\\n')\n","      print(\"{} ({}) -> {} {}\\n\".format(sample_len, sample_len2, int_, points_))\n","      break\n","\n","print(time.time() - start_0)  # (1301)(1361)(1301)"]},{"cell_type":"markdown","metadata":{"id":"rrIGjmUzqU-D"},"source":["## import utils & config"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SeJan_0t95yL"},"outputs":[],"source":["frame_ver = \"0114_htf\"\n","ID_arr = np.array(['v3', 'v5_2'])\n","\n","utils_public_name = \"{}.utils.{}_utils_public\".format(strat_pkg, frame_ver)\n","utils_public_lib = importlib.import_module(utils_public_name)\n","utils_public = utils_public_lib   # temporary\n","\n","u_name_list = [\"{}.utils.{}_utils_{}\".format(strat_pkg, frame_ver, id_) for id_ in ID_arr]\n","utils_arr = np.array([importlib.import_module(u_name) for u_name in u_name_list])\n","\n","config_name_list = [\"{}_config_{}.json\".format(frame_ver, id_) for id_ in ID_arr]\n","cfg_path_list = [os.path.join(current_path, strat_pkg, \"config\", name_) for name_ in config_name_list]\n","cfg_file_list = [open(cfg_path) for cfg_path in cfg_path_list]\n","config_arr = np.array([EasyDict(json.load(cfg_)) for cfg_ in cfg_file_list])\n","\n","# ------ opened files should be closed --> 닫지 않으면 reopen 시 error occurs ------ #\n","_ = [cfg_.close() for cfg_ in cfg_file_list]\n","show_plot = 1   # idep's var - do not touch"]},{"cell_type":"markdown","metadata":{"id":"leSQlImg4_9L"},"source":["### utils_"]},{"cell_type":"code","execution_count":40,"metadata":{"id":"CB2yZdQ95Cdg","executionInfo":{"status":"ok","timestamp":1662348967263,"user_tz":-540,"elapsed":482,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# import pandas as pd\n","# import numpy as np\n","# import logging\n","\n","def enlist_tr(res_df, config, np_timeidx, mode='OPEN', show_detail=True):\n","\n","    # ================== enlist wave_unit ================== #\n","    selection_id = config.selection_id\n","    \n","    len_df = len(res_df)\n","    len_df_range = np.arange(len_df)\n","\n","    # if config.tr_set.check_hlm == 2:  # 동일한 param 으로도 p2_hlm 시도를 충분히 할 수 있음 (csdbox 와 같은)\n","    #   assert not (wave_itv1 == wave_itv2 and wave_period1 == wave_period2)\n","\n","    # ------------ get wave_features ------------ #      \n","    wave_itv1 = config.tr_set.wave_itv1\n","    wave_period1 = config.tr_set.wave_period1\n","    wave_itv2 = config.tr_set.wave_itv2\n","    wave_period2 = config.tr_set.wave_period2\n","    tc_period = config.tr_set.tc_period\n","    roll_hl_cnt = 3\n","\n","    roll_highs1 = [res_df['wave_high_fill_{}{}_-{}'.format(wave_itv1, wave_period1, cnt_ + 1)].to_numpy() for cnt_ in reversed(range(roll_hl_cnt))]\n","    roll_lows1 = [res_df['wave_low_fill_{}{}_-{}'.format(wave_itv1, wave_period1, cnt_ + 1)].to_numpy() for cnt_ in reversed(range(roll_hl_cnt))]\n","\n","    wave_high_fill1_ = res_df['wave_high_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    wave_low_fill1_ = res_df['wave_low_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","    roll_highs2 = [res_df['wave_high_fill_{}{}_-{}'.format(wave_itv2, wave_period2, cnt_ + 1)].to_numpy() for cnt_ in reversed(range(roll_hl_cnt))]\n","    roll_lows2 = [res_df['wave_low_fill_{}{}_-{}'.format(wave_itv2, wave_period2, cnt_ + 1)].to_numpy() for cnt_ in reversed(range(roll_hl_cnt))]\n","\n","    wave_high_fill2_ = res_df['wave_high_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","    wave_low_fill2_ = res_df['wave_low_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","    \n","    # res_df['short_wave_spread_fill_{}{}'.format(wave_itv1, wave_period1)] = roll_highs1[-1] / wave_low_fill1_\n","    # res_df['long_wave_spread_fill_{}{}'.format(wave_itv1, wave_period1)] = wave_high_fill1_ / roll_lows1[-1]\n","    res_df['short_wave_spread_fill_{}{}'.format(wave_itv1, wave_period1)] = wave_high_fill1_ / wave_low_fill1_\n","    res_df['long_wave_spread_fill_{}{}'.format(wave_itv1, wave_period1)] = wave_high_fill1_ / wave_low_fill1_\n","\n","    # ------------ enlist tr_unit ------------ #\n","    # cu's roll_high_[:, -1] = prev_high & cu's roll_low_[:, -1] = current_low\n","    # co's roll_low_[:, -1] = prev_low & co's roll_high_[:, -1] = current_high\n","    res_df['short_tp_1_{}'.format(selection_id)] = wave_low_fill1_   # wave_low_fill_ b2_low_5T\n","    res_df['short_tp_0_{}'.format(selection_id)] = roll_highs1[-1]   # roll_highs1[-1] wave_high_fill1_  # roll_high_[:, -2]\n","    res_df['long_tp_1_{}'.format(selection_id)] = wave_high_fill1_   # wave_high_fill_ b2_high_5T\n","    res_df['long_tp_0_{}'.format(selection_id)] = roll_lows1[-1]    # roll_lows1[-1]  wave_low_fill1_   # roll_low_[:, -2]\n","\n","    res_df['short_ep1_1_{}'.format(selection_id)] = wave_low_fill1_   # b2_low_5T\n","    res_df['short_ep1_0_{}'.format(selection_id)] = wave_high_fill1_  # roll_high_[:, -2]\n","    res_df['long_ep1_1_{}'.format(selection_id)] = wave_high_fill1_   # b2_high_5T\n","    res_df['long_ep1_0_{}'.format(selection_id)] = wave_low_fill1_    # roll_low_[:, -2]\n","\n","    # --> p2's ep use p1's ep\n","    # res_df['short_ep2_1_{}'.format(selection_id)] = wave_low_fill1_  # wave_low_fill2_   # b2_low_5T\n","    # res_df['short_ep2_0_{}'.format(selection_id)] = wave_high_fill1_ # wave_high_fill2_  # roll_high_[:, -2]\n","    # res_df['long_ep2_1_{}'.format(selection_id)] = wave_high_fill1_  # wave_high_fill2_   # b2_high_5T\n","    # res_df['long_ep2_0_{}'.format(selection_id)] = wave_low_fill1_   # wave_low_fill2_    # roll_low_[:, -2]\n","\n","    # --> out use p1's low, (allow prev_low as out for p1_hhm only)\n","    # res_df['short_out_1_{}'.format(selection_id)] = wave_low_fill1_   # wave_low_fill1_   # wave_low_fill2_   # b2_low_5T\n","    # res_df['short_out_0_{}'.format(selection_id)] = wave_high_fill1_ # roll_highs1[-1] if not config.tr_set.check_hlm else wave_high_fill1_   # roll_highs2[-1]  # roll_high_[:, -2]\n","    # res_df['long_out_1_{}'.format(selection_id)] = wave_high_fill1_   # wave_high_fill1_   # wave_high_fill2_   # b2_high_5T\n","    # res_df['long_out_0_{}'.format(selection_id)] = wave_low_fill1_ # roll_lows1[-1] if not config.tr_set.check_hlm else wave_low_fill1_   # roll_lows2[-1]    # roll_low_[:, -2]\n","    \n","    # below codes exist for p2_wave\n","    res_df['short_ep2_1_{}'.format(selection_id)] = wave_low_fill2_   # b2_low_5T\n","    res_df['short_ep2_0_{}'.format(selection_id)] = wave_high_fill2_  # roll_high_[:, -2]\n","    res_df['long_ep2_1_{}'.format(selection_id)] = wave_high_fill2_   # b2_high_5T\n","    res_df['long_ep2_0_{}'.format(selection_id)] = wave_low_fill2_    # roll_low_[:, -2]\n","\n","    res_df['short_out_1_{}'.format(selection_id)] = wave_low_fill2_\n","    res_df['short_out_0_{}'.format(selection_id)] = roll_highs2[-1]\n","    res_df['long_out_1_{}'.format(selection_id)] = wave_high_fill2_\n","    res_df['long_out_0_{}'.format(selection_id)] = roll_lows2[-1]\n","    \n","\n","    # --- inversion --- #\n","    if config.pos_set.short_inversion or config.pos_set.long_inversion:\n","        res_df.rename({short_tp_1_: long_tp_1_, long_tp_1_: short_tp_1_}, axis=1, inplace=True)\n","        res_df.rename({short_tp_0_: long_tp_0_, long_tp_0_: short_tp_0_}, axis=1, inplace=True)\n","        res_df.rename({short_epout_1_: long_epout_1_, long_epout_1_: short_epout_1_}, axis=1, inplace=True)\n","        res_df.rename({short_epout_0_: long_epout_0_, long_epout_0_: short_epout_0_}, axis=1, inplace=True)\n","\n","    res_df['short_tp_gap_{}'.format(selection_id)] = abs(res_df['short_tp_1_{}'.format(selection_id)] - res_df['short_tp_0_{}'.format(selection_id)])\n","    res_df['long_tp_gap_{}'.format(selection_id)] = abs(res_df['long_tp_1_{}'.format(selection_id)] - res_df['long_tp_0_{}'.format(selection_id)])\n","    res_df['short_ep1_gap_{}'.format(selection_id)] = abs(res_df['short_ep1_1_{}'.format(selection_id)] - res_df['short_ep1_0_{}'.format(selection_id)])\n","    res_df['long_ep1_gap_{}'.format(selection_id)] = abs(res_df['long_ep1_1_{}'.format(selection_id)] - res_df['long_ep1_0_{}'.format(selection_id)])\n","\n","    res_df['short_out_gap_{}'.format(selection_id)] = abs(res_df['short_out_1_{}'.format(selection_id)] - res_df['short_out_0_{}'.format(selection_id)])\n","    res_df['long_out_gap_{}'.format(selection_id)] = abs(res_df['long_out_1_{}'.format(selection_id)] - res_df['long_out_0_{}'.format(selection_id)])\n","    res_df['short_ep2_gap_{}'.format(selection_id)] = abs(res_df['short_ep2_1_{}'.format(selection_id)] - res_df['short_ep2_0_{}'.format(selection_id)])\n","    res_df['long_ep2_gap_{}'.format(selection_id)] = abs(res_df['long_ep2_1_{}'.format(selection_id)] - res_df['long_ep2_0_{}'.format(selection_id)])\n","\n","\n","    data_cols = ['open', 'high', 'low', 'close']  # Todo - public_indi 이전에 해야할지도 모름 # 'close', 'haopen', 'hahigh', 'halow', 'haclose'\n","    open, high, low, close = [res_df[col_].to_numpy() for col_ in data_cols]\n","\n","    # ================== point ================== #     \n","    short_open_res1 = np.ones(len_df) #.astype(object)\n","    long_open_res1 = np.ones(len_df)  #.astype(object)\n","    short_open_res2 = np.ones(len_df) #.astype(object)\n","    long_open_res2 = np.ones(len_df)  #.astype(object)\n","    \n","    # ------------ wave_point ------------ #\n","    notnan_cu = ~pd.isnull(res_df['wave_cu_{}{}'.format(wave_itv1, wave_period1)].to_numpy())  # isnull for object\n","    notnan_co = ~pd.isnull(res_df['wave_co_{}{}'.format(wave_itv1, wave_period1)].to_numpy())\n","    notnan_cu2 = ~pd.isnull(res_df['wave_cu_{}{}'.format(wave_itv2, wave_period2)].to_numpy())  # isnull for object\n","    notnan_co2 = ~pd.isnull(res_df['wave_co_{}{}'.format(wave_itv2, wave_period2)].to_numpy())\n","\n","    short_open_res1 *= res_df['wave_cu_{}{}'.format(wave_itv1, wave_period1)].to_numpy().astype(bool) * notnan_cu  # object로 변환되는 경우에 대응해, bool 로 재정의\n","    long_open_res1 *= res_df['wave_co_{}{}'.format(wave_itv1, wave_period1)].to_numpy().astype(bool) * notnan_co  # np.nan = bool type 으로 True 임..\n","    short_open_res2 *= res_df['wave_cu_{}{}'.format(wave_itv2, wave_period2)].to_numpy().astype(bool) * notnan_cu2  # object로 변환되는 경우에 대응해, bool 로 재정의\n","    long_open_res2 *= res_df['wave_co_{}{}'.format(wave_itv2, wave_period2)].to_numpy().astype(bool) * notnan_co2  # np.nan = bool type 으로 True 임..\n","    # short_open_res2 *= res_df['short_tc_{}{}'.format(wave_itv2, tc_period)].to_numpy()\n","    # long_open_res2 *= res_df['long_tc_{}{}'.format(wave_itv2, tc_period)].to_numpy()\n","\n","    if show_detail:\n","      sys_log.warning(\"wave_point\")\n","      sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","      sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))  \n","      sys_log.warning(\"np.sum(short_open_res2 == 1) : {}\".format(np.sum(short_open_res2 == 1)))\n","      sys_log.warning(\"np.sum(long_open_res2 == 1) : {}\".format(np.sum(long_open_res2 == 1)))  \n","    \n","    # ------ reject wave_update_hl ------ #\n","    notnan_update_low_cu = ~pd.isnull(res_df['wave_update_low_cu_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy())\n","    notnan_update_high_co = ~pd.isnull(res_df['wave_update_high_co_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy())\n","    notnan_update_low_cu2 = ~pd.isnull(res_df['wave_update_low_cu_bool_{}{}'.format(wave_itv2, wave_period2)].to_numpy())\n","    notnan_update_high_co2 = ~pd.isnull(res_df['wave_update_high_co_bool_{}{}'.format(wave_itv2, wave_period2)].to_numpy())\n","\n","    short_open_res1 *= ~(res_df['wave_update_low_cu_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy().astype(bool)) * notnan_update_low_cu\n","    long_open_res1 *= ~(res_df['wave_update_high_co_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy().astype(bool)) * notnan_update_high_co\n","    short_open_res2 *= ~(res_df['wave_update_low_cu_bool_{}{}'.format(wave_itv2, wave_period2)].to_numpy().astype(bool)) * notnan_update_low_cu2\n","    long_open_res2 *= ~(res_df['wave_update_high_co_bool_{}{}'.format(wave_itv2, wave_period2)].to_numpy().astype(bool)) * notnan_update_high_co2\n","\n","    # short_open_res1 *= ~res_df['wave_update_low_cu_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    # long_open_res1 *= ~res_df['wave_update_high_co_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    # short_open_res2 *= ~res_df['wave_update_low_cu_bool_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","    # long_open_res2 *= ~res_df['wave_update_high_co_bool_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","\n","    if show_detail:\n","      sys_log.warning(\"reject update_hl\")\n","      sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","      sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))  \n","      sys_log.warning(\"np.sum(short_open_res2 == 1) : {}\".format(np.sum(short_open_res2 == 1)))\n","      sys_log.warning(\"np.sum(long_open_res2 == 1) : {}\".format(np.sum(long_open_res2 == 1)))  \n","\n","    # ------ wave_itv ------ #    \n","    if wave_itv1 != 'T':      \n","      wave_itv1_num = to_itvnum(wave_itv1)\n","      short_open_res1 *= np_timeidx % wave_itv1_num == (wave_itv1_num - 1)\n","      long_open_res1 *= np_timeidx % wave_itv1_num == (wave_itv1_num - 1) \n","\n","      if show_detail:\n","        sys_log.warning(\"wave_itv1\")\n","        sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","        sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))  \n","    \n","    if wave_itv2 != 'T':\n","      wave_itv2_num = to_itvnum(wave_itv2)\n","      short_open_res2 *= np_timeidx % wave_itv2_num == (wave_itv2_num - 1)\n","      long_open_res2 *= np_timeidx % wave_itv2_num == (wave_itv2_num - 1) \n","\n","      if show_detail:\n","        sys_log.warning(\"wave_itv2\")\n","        sys_log.warning(\"np.sum(short_open_res2 == 1) : {}\".format(np.sum(short_open_res2 == 1)))\n","        sys_log.warning(\"np.sum(long_open_res2 == 1) : {}\".format(np.sum(long_open_res2 == 1)))\n","\n","    # ------ wave_mm ------ #\n","    wave_high_terms_cnt_fill1_ = res_df['wave_high_terms_cnt_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    wave_low_terms_cnt_fill1_ = res_df['wave_low_terms_cnt_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","    short_open_res1 *= (wave_high_terms_cnt_fill1_ > config.tr_set.wave_greater2) & (wave_low_terms_cnt_fill1_ > config.tr_set.wave_greater1)\n","    long_open_res1 *= (wave_low_terms_cnt_fill1_ > config.tr_set.wave_greater2) & (wave_high_terms_cnt_fill1_ > config.tr_set.wave_greater1)\n","\n","    # wave_high_terms_cnt_fill2_ = res_df['wave_high_terms_cnt_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","    # wave_low_terms_cnt_fill2_ = res_df['wave_low_terms_cnt_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","\n","    # short_open_res2 *= (wave_high_terms_cnt_fill2_ > config.tr_set.wave_greater2) & (wave_low_terms_cnt_fill2_ > config.tr_set.wave_greater1)\n","    # long_open_res2 *= (wave_low_terms_cnt_fill2_ > config.tr_set.wave_greater2) & (wave_high_terms_cnt_fill2_ > config.tr_set.wave_greater1)\n","\n","    if show_detail:\n","      sys_log.warning(\"wave_mm\")\n","      sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","      sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))\n","      # sys_log.warning(\"np.sum(short_open_res2 == 1) : {}\".format(np.sum(short_open_res2 == 1)))\n","      # sys_log.warning(\"np.sum(long_open_res2 == 1) : {}\".format(np.sum(long_open_res2 == 1)))\n","\n","    # ------ wave_length ------ #\n","    if config.tr_set.wave_length1 != \"None\": \n","      short_wave_length_fill_ = res_df['short_wave_length_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      long_wave_length_fill_ = res_df['long_wave_length_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","      short_open_res1 *= short_wave_length_fill_ >= config.tr_set.wave_length1\n","      long_open_res1 *= long_wave_length_fill_ >= config.tr_set.wave_length1\n","\n","      if show_detail:\n","        sys_log.warning(\"wave_length\")\n","        sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","        sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))\n","\n","    # ------ wave_spread ------ #\n","    if config.tr_set.wave_spread1 != \"None\":\n","      short_wave_spread_fill = res_df['short_wave_spread_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      long_wave_spread_fill = res_df['long_wave_spread_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","      short_open_res1 *= short_wave_spread_fill >= config.tr_set.wave_spread1\n","      long_open_res1 *= long_wave_spread_fill >= config.tr_set.wave_spread1\n","\n","      if show_detail:\n","        sys_log.warning(\"wave_spread\")\n","        sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","        sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))      \n","\n","    # ------ wave_time_ratio ------ #\n","    if config.tr_set.wave_time_ratio1 != \"None\":\n","      short_wave_time_ratio = res_df['short_wave_time_ratio_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      long_wave_time_ratio = res_df['long_wave_time_ratio_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","      short_open_res1 *= short_wave_time_ratio >= config.tr_set.wave_time_ratio1\n","      long_open_res1 *= long_wave_time_ratio >= config.tr_set.wave_time_ratio1\n","\n","      if show_detail:\n","        sys_log.warning(\"wave_time_ratio\")\n","        sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","        sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))   \n","\n","\n","    # ------------ 추세선 리스트 ------------ #\n","    # ------ ma & prev_low ------ #    \n","    # ma_period = 60\n","\n","    # short_prev_ma_ = res_df['short_ma_T{}_-1'.format(ma_period)].to_numpy()\n","    # long_prev_ma_ = res_df['long_ma_T{}_-1'.format(ma_period)].to_numpy()    \n","    \n","    # short_open_res1 *= short_prev_ma_ > roll_highs1[-1]  # Todo, index sync. 요망\n","    # long_open_res1 *= long_prev_ma_ < roll_lows1[-1]\n","\n","    # if show_detail:\n","    #   sys_log.warning(\"ma & prev_low\")\n","    #   sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","    #   sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))     \n","\n","\n","    # ================== tr_set ================== #\n","    # ------------ tp ------------ #\n","    tpg = config.tr_set.tp_gap\n","    res_df['short_tp_{}'.format(selection_id)] = res_df['short_tp_1_{}'.format(selection_id)].to_numpy() - res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * tpg\n","    res_df['long_tp_{}'.format(selection_id)] = res_df['long_tp_1_{}'.format(selection_id)].to_numpy() + res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * tpg\n","    # res_df['short_tp_{}'.format(selection_id)] = short_tp_1 - short_epout_gap * tpg\n","    # res_df['long_tp_{}'.format(selection_id)] = long_tp_1 + long_epout_gap * tpg\n","\n","    # ------ limit_ep1 ------ #\n","    if config.ep_set.entry_type == \"LIMIT\":\n","        epg1 = config.tr_set.ep_gap1\n","\n","        # ------ epbox as epg ------ #\n","        res_df['short_ep1_{}'.format(selection_id)] = res_df['short_ep1_0_{}'.format(selection_id)].to_numpy() + res_df['short_ep1_gap_{}'.format(selection_id)].to_numpy() * epg1\n","        res_df['long_ep1_{}'.format(selection_id)] = res_df['long_ep1_0_{}'.format(selection_id)].to_numpy() - res_df['long_ep1_gap_{}'.format(selection_id)].to_numpy() * epg1     \n","\n","        # ------ tpbox as epg ------ #\n","        # p1_hlm 을 위해선, tp_0 를 기준할 수 없음 --> ep1 & ep2 를 기준으로 진행\n","        # res_df['short_ep1_{}'.format(selection_id)] = res_df['short_ep1_0_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * epg1  # fibonacci 고려하면, tp / out gap 기준이 맞지 않을까\n","        # res_df['long_ep1_{}'.format(selection_id)] = res_df['long_ep1_0_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * epg1      \n","        \n","        # ------ fibo_ep ------ #\n","        # res_df['short_ep1_{}'.format(selection_id)] = res_df['short_tp_0_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * epg1  # fibonacci 고려하면, tp / out gap 기준이 맞지 않을까\n","        # res_df['long_ep1_{}'.format(selection_id)] = res_df['long_tp_0_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * epg1    \n","                \n","    # ------ market_ep1 ------ #\n","    else:\n","        res_df['short_ep1_{}'.format(selection_id)] = close\n","        res_df['long_ep1_{}'.format(selection_id)] = close\n","    \n","    # ------ limit_ep2 ------ #   \n","    if config.ep_set.point2.entry_type == \"LIMIT\":\n","        epg2 = config.tr_set.ep_gap2\n","\n","        # ------ epbox as epg ------ #\n","        res_df['short_ep2_{}'.format(selection_id)] = res_df['short_ep2_0_{}'.format(selection_id)].to_numpy() + res_df['short_ep2_gap_{}'.format(selection_id)].to_numpy() * epg2\n","        res_df['long_ep2_{}'.format(selection_id)] = res_df['long_ep2_0_{}'.format(selection_id)].to_numpy() - res_df['long_ep2_gap_{}'.format(selection_id)].to_numpy() * epg2  \n","\n","        # ------ outbox as epg ------ # --> ep1 & ep2 를 기준으로 진행\n","        # res_df['short_ep2_{}'.format(selection_id)] = res_df['short_ep2_0_{}'.format(selection_id)].to_numpy() + res_df['short_out_gap_{}'.format(selection_id)].to_numpy() * epg2\n","        # res_df['long_ep2_{}'.format(selection_id)] = res_df['long_ep2_0_{}'.format(selection_id)].to_numpy() - res_df['long_out_gap_{}'.format(selection_id)].to_numpy() * epg2  \n","        \n","        # ------ fibo_ep by tp_box ------ #\n","        # res_df['short_ep2_{}'.format(selection_id)] = res_df['short_tp_0_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * epg2  # fibonacci 고려하면, tp / out gap 기준이 맞지 않을까\n","        # res_df['long_ep2_{}'.format(selection_id)] = res_df['long_tp_0_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * epg2   \n","        \n","        # ------ fibo_ep by out_box ------ #        \n","        # res_df['short_ep2_{}'.format(selection_id)] = res_df['short_out_0_{}'.format(selection_id)].to_numpy() + res_df['short_out_gap_{}'.format(selection_id)].to_numpy() * epg2  # fibonacci 고려하면, tp / out gap 기준이 맞지 않을까\n","        # res_df['long_ep2_{}'.format(selection_id)] = res_df['long_out_0_{}'.format(selection_id)].to_numpy() - res_df['long_out_gap_{}'.format(selection_id)].to_numpy() * epg2   \n","\n","    # ------ market_ep2 ------ #\n","    else: \n","        res_df['short_ep2_{}'.format(selection_id)] = close\n","        res_df['long_ep2_{}'.format(selection_id)] = close\n","                \n","\n","    # ------------ out ------------ #\n","    outg = config.tr_set.out_gap\n","    # res_df['short_out_{}'.format(selection_id)] = short_tp_0 + short_tp_gap * outg            # 1. for hhm check -> 규칙성과 wave_range 기반 거래 기준의 hhm 확인\n","    # res_df['long_out_{}'.format(selection_id)] = long_tp_0 - long_tp_gap * outg\n","\n","    if config.tr_set.check_hlm == 0:\n","      res_df['short_out_{}'.format(selection_id)] = res_df['short_tp_0_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * outg\n","      res_df['long_out_{}'.format(selection_id)] = res_df['long_tp_0_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * outg\n","      \n","      # ------ ep1box as outg ------ #\n","      # res_df['short_out_{}'.format(selection_id)] = res_df['short_ep1_0_{}'.format(selection_id)].to_numpy() + res_df['short_ep1_gap_{}'.format(selection_id)].to_numpy() * outg\n","      # res_df['long_out_{}'.format(selection_id)] = res_df['long_ep1_0_{}'.format(selection_id)].to_numpy() - res_df['long_ep1_gap_{}'.format(selection_id)].to_numpy() * outg \n","\n","    elif config.tr_set.check_hlm == 1:    # for p1_hlm\n","      # ------ irregular - next_fibo ------ #\n","      # co_wrr_32_ = res_df['co_wrr_32_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      # cu_wrr_32_ = res_df['cu_wrr_32_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","      # short_next_fibo_outg = np.vectorize(get_next_fibo_gap2)(cu_wrr_32_)\n","      # long_next_fibo_outg = np.vectorize(get_next_fibo_gap2)(co_wrr_32_)\n","\n","      # res_df['short_out_{}'.format(selection_id)] = res_df['short_tp_0_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * short_next_fibo_outg  # ep 와 마찬가지로, tpg 기준 가능\n","      # res_df['long_out_{}'.format(selection_id)] = res_df['long_tp_0_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * long_next_fibo_outg \n","\n","      # ------ ep1box as outg ------ #\n","      # res_df['short_out_{}'.format(selection_id)] = res_df['short_ep1_0_{}'.format(selection_id)].to_numpy() + res_df['short_ep1_gap_{}'.format(selection_id)].to_numpy() * outg\n","      # res_df['long_out_{}'.format(selection_id)] = res_df['long_ep1_0_{}'.format(selection_id)].to_numpy() - res_df['long_ep1_gap_{}'.format(selection_id)].to_numpy() * outg \n","\n","      # ------ 1_tr - ep1box as outg ------ #\n","      # res_df['short_out_{}'.format(selection_id)] = res_df['short_ep1_0_{}'.format(selection_id)].to_numpy() + res_df['short_ep1_gap_{}'.format(selection_id)].to_numpy() * outg\n","      # res_df['long_out_{}'.format(selection_id)] = res_df['long_ep1_0_{}'.format(selection_id)].to_numpy() - res_df['long_ep1_gap_{}'.format(selection_id)].to_numpy() * outg \n","      \n","      # ------ 1_tr - auto_calculation by ep1 ------ #\n","      # res_df['short_out_{}'.format(selection_id)] = res_df['short_ep1_{}'.format(selection_id)] + (res_df['short_ep1_{}'.format(selection_id)].to_numpy() - res_df['short_tp_{}'.format(selection_id)].to_numpy())\n","      # res_df['long_out_{}'.format(selection_id)] = res_df['long_ep1_{}'.format(selection_id)].to_numpy() - (res_df['long_tp_{}'.format(selection_id)].to_numpy() - res_df['long_ep1_{}'.format(selection_id)].to_numpy())\n","\n","      # ------ tpbox as outg ------ #\n","      # res_df['short_out_{}'.format(selection_id)] = res_df['short_ep1_0_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * outg  # ep 와 마찬가지로, tpg 기준 가능\n","      # res_df['long_out_{}'.format(selection_id)] = res_df['long_ep1_0_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * outg \n","      \n","      # ------ fibo_out ------ #      \n","      res_df['short_out_{}'.format(selection_id)] = res_df['short_tp_0_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * outg  # ep 와 마찬가지로, tpg 기준 가능\n","      res_df['long_out_{}'.format(selection_id)] = res_df['long_tp_0_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * outg \n","    \n","    else:  # p2_hlm    \n","      # ------ outbox as out ------ #\n","      res_df['short_out_{}'.format(selection_id)] = res_df['short_out_0_{}'.format(selection_id)].to_numpy() + res_df['short_out_gap_{}'.format(selection_id)].to_numpy() * outg\n","      res_df['long_out_{}'.format(selection_id)] = res_df['long_out_0_{}'.format(selection_id)].to_numpy() - res_df['long_out_gap_{}'.format(selection_id)].to_numpy() * outg\n","\n","      # res_df['short_out_{}'.format(selection_id)] = res_df['short_tp_0_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * outg\n","      # res_df['long_out_{}'.format(selection_id)] = res_df['long_tp_0_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * outg\n","\n","      # ------ ep2box as out ------ #\n","      # res_df['short_out_{}'.format(selection_id)] = res_df['short_ep2_0_{}'.format(selection_id)].to_numpy() + res_df['short_ep2_gap_{}'.format(selection_id)].to_numpy() * outg   # p2's ep_box 를 out 으로 사용한다?\n","      # res_df['long_out_{}'.format(selection_id)] = res_df['long_ep2_0_{}'.format(selection_id)].to_numpy() - res_df['long_ep2_gap_{}'.format(selection_id)].to_numpy() * outg     \n","      \n","\n","    # ------------ point validation ------------ # - vecto. 로 미리 거를 수 있는걸 거르면 좋을 것\n","    short_tp_ = res_df['short_tp_{}'.format(selection_id)].to_numpy()\n","    short_ep1_ = res_df['short_ep1_{}'.format(selection_id)].to_numpy()\n","    short_ep2_ = res_df['short_ep2_{}'.format(selection_id)].to_numpy()\n","    short_out_ = res_df['short_out_{}'.format(selection_id)].to_numpy()\n","\n","    long_tp_ = res_df['long_tp_{}'.format(selection_id)].to_numpy()\n","    long_ep1_ = res_df['long_ep1_{}'.format(selection_id)].to_numpy()\n","    long_ep2_ = res_df['long_ep2_{}'.format(selection_id)].to_numpy()\n","    long_out_ = res_df['long_out_{}'.format(selection_id)].to_numpy()\n","\n","    # ------ p1 point_validation ------ #\n","    short_open_res1 *= (short_tp_ < short_ep1_) & (short_ep1_ < short_out_)  # tr_set validation reject nan data & 정상 거래 위한 tp > ep / --> p2_box location (cannot be vectorized)\n","    # short_open_res1 *= close < short_ep1_   # reject entry open_execution\n","    short_open_res1 *= close < short_out_ # res_df['short_ep1_0_{}'.format(selection_id)].to_numpy()   # reject hl_out open_execution -> close always < ep1_0 at wave_p1\n","    # short_out_  res_df['short_tp_0_{}'.format(selection_id)].to_numpy() res_df['short_ep1_0_{}'.format(selection_id)].to_numpy()\n","\n","    long_open_res1 *= (long_tp_ > long_ep1_) & (long_ep1_ > long_out_)  # (long_tp_ > long_ep_) # tr_set validation     \n","    # long_open_res1 *= close > long_ep1_  # reject entry open_execution    \n","    long_open_res1 *= close > long_out_ # res_df['long_ep1_0_{}'.format(selection_id)].to_numpy()  # reject hl_out open_execution  \n","    # long_out_ res_df['long_tp_0_{}'.format(selection_id)].to_numpy() res_df['long_ep1_0_{}'.format(selection_id)].to_numpy()\n","\n","    # ------ p2 point_validation ------ # --> executed in en_ex_pairing() function.\n","    # short_open_res2 *= (short_ep2_ < short_out_) # tr_set validation (short_tp_ < short_ep_) # --> p2_box location (cannot be vectorized)\n","    # short_open_res2 *= close < short_out_    # reject hl_out open_execution\n","\n","    # long_open_res2 *= (long_ep2_ > long_out_)  # tr_set validation (long_tp_ > long_ep_) &   # p2's ep & out cannot be vectorized\n","    # long_open_res2 *= close > long_out_    # reject hl_out open_execution\n","\n","    res_df['short_open1_{}'.format(selection_id)] = short_open_res1 * (not config.pos_set.short_ban)\n","    res_df['long_open1_{}'.format(selection_id)] = long_open_res1 * (not config.pos_set.long_ban)\n","    # print(\"res_df['long_open1_{}'.format(selection_id)].to_numpy() :\", res_df['long_open1_{}'.format(selection_id)].to_numpy()) \n","    res_df['short_open2_{}'.format(selection_id)] = short_open_res2\n","    res_df['long_open2_{}'.format(selection_id)] = long_open_res2\n","\n","    if show_detail:\n","      sys_log.warning(\"point validation\")\n","      sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","      sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))\n","      # sys_log.warning(\"np.sum(short_open_res2 == 1) : {}\".format(np.sum(short_open_res2 == 1)))\n","      # sys_log.warning(\"np.sum(long_open_res2 == 1) : {}\".format(np.sum(long_open_res2 == 1)))\n","    \n","    # ------------ higher_high momentum ------------ #\n","    # wb_tpg = config.tr_set.wb_tp_gap\n","    # wb_outg = config.tr_set.wb_out_gap\n","    # res_df['short_wave_1_{}'.format(selection_id)] = res_df['short_tp_1_{}'.format(selection_id)].to_numpy() - res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * wb_tpg\n","    # res_df['long_wave_1_{}'.format(selection_id)] = res_df['long_tp_1_{}'.format(selection_id)].to_numpy() + res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * wb_tpg\n","    \n","    # res_df['short_wave_0_{}'.format(selection_id)] = res_df['short_tp_0_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * wb_outg        # hhm check\n","    # res_df['long_wave_0_{}'.format(selection_id)] = res_df['long_tp_0_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * wb_outg\n","    # res_df['short_wave_0_{}'.format(selection_id)] = short_epout_0 + short_epout_gap * wb_outg\n","    # res_df['long_wave_0_{}'.format(selection_id)] = long_epout_0 - long_epout_gap * wb_outg\n","\n","    # ------ tr ------ #\n","    if config.tr_set.check_hlm == 2:\n","      res_df['short_tr_{}'.format(selection_id)] = np.nan\n","      res_df['long_tr_{}'.format(selection_id)] = np.nan\n","    else:      \n","      res_df['short_tr_{}'.format(selection_id)] = abs(\n","          (short_ep1_ / short_tp_ - config.trader_set.limit_fee - 1) / (short_ep1_ / short_out_ - config.trader_set.market_fee - 1))   # 이게 맞음, loss 의 분모 > 분자 & profit 의 분모 < 분자\n","      res_df['long_tr_{}'.format(selection_id)] = abs(\n","          (long_tp_ / long_ep1_ - config.trader_set.limit_fee - 1) / (long_out_ / long_ep1_ - config.trader_set.market_fee - 1))\n","\n","    # ------ zoned_ep ------ #\n","    # if config.tr_set.c_ep_gap != \"None\":\n","    #     # res_df['short_ep_org_{}'.format(selection_id)] = res_df['short_ep_{}'.format(selection_id)].copy()\n","    #     # res_df['long_ep_org_{}'.format(selection_id)] = res_df['long_ep_{}'.format(selection_id)].copy()\n","    #     res_df['short_ep2_{}'.format(selection_id)] = short_epout_1 + short_epout_gap * config.tr_set.c_ep_gap\n","    #     res_df['long_ep2_{}'.format(selection_id)] = long_epout_1 - long_epout_gap * config.tr_set.c_ep_gap\n","\n","    # # ------ zoned_out ------ #\n","    # if config.tr_set.t_out_gap != \"None\":\n","    #     # res_df['short_out_org_{}'.format(selection_id)] = res_df['short_out_{}'.format(selection_id)].copy()\n","    #     # res_df['long_out_org_{}'.format(selection_id)] = res_df['long_out_{}'.format(selection_id)].copy()\n","    #     res_df['short_out2_{}'.format(selection_id)] = short_epout_0 + short_epout_gap * config.tr_set.t_out_gap\n","    #     res_df['long_out2_{}'.format(selection_id)] = long_epout_0 - long_epout_gap * config.tr_set.t_out_gap\n","\n","    return res_df\n"]},{"cell_type":"markdown","metadata":{"id":"HuCb0phoPN83"},"source":["#### legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-DNPumVZi0xs"},"outputs":[],"source":["\n","\n","    # ------ wave_point 분리 ------ #\n","    # cci_ = res_df['cci_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    # b1_cci_ = res_df['cci_{}{}'.format(wave_itv1, wave_period1)].shift(1).to_numpy()        \n","    \n","    # band_width = 100\n","    # upper_band = band_width\n","    # lower_band = -band_width\n","\n","    # update_low_cu_bool = res_df['update_low_cu_bool_{}{}'.format(wave_itv1, wave_period1)]\n","    # update_high_co_bool = res_df['update_high_co_bool_{}{}'.format(wave_itv1, wave_period1)]\n","\n","    # short_open_res1 *= (b1_cci_ > upper_band) & (upper_band > cci_) & ~update_low_cu_bool\n","    # long_open_res1 *= (b1_cci_ < lower_band) & (lower_band < cci_) & ~update_high_co_bool   \n","\n","    \n","# ------------ csd ------------ #\n","    # ------ dc ------ #\n","    # dc_upper_ = res_df['dc_upper_T30'].to_numpy()    \n","    # dc_lower_ = res_df['dc_lower_T30'].to_numpy()    \n","\n","    # # Todo, post_cu ~ co 의 dc_lower == low (=touched) 여부 조사\n","    # short_open_idx1 = get_index_bybool(short_open_res1, len_df_range)\n","    # long_open_idx1 = get_index_bybool(long_open_res1, len_df_range)\n","    # wave_co_post_idx_fill_ = res_df['wave_co_post_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    # wave_cu_post_idx_fill_ = res_df['wave_cu_post_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()   # co_prime_idx (wave_high 정보를 지정하기 위한 front co_idx 지정)\n","\n","    # # 1. dc_lower == low 여부 조사, np.nan 덕분에 vectorize 불가하다고 봄\n","    # short_valid_idx_bool = ~(pd.isnull(wave_co_post_idx_fill_) | pd.isnull(short_open_idx1)) # get_index_bybool\n","    # dc_upper_touch = dc_upper_ <= high\n","    # dc_upper_touch_span = np.full(len_df, np.nan)\n","    # dc_upper_touch_span[short_valid_idx_bool] = [dc_upper_touch[int(iin):int(iout) + 1].sum() for iin, iout in zip(wave_co_post_idx_fill_, short_open_idx1) if not pd.isnull(iin) if not pd.isnull(iout)]\n","\n","    # long_valid_idx_bool = ~(pd.isnull(wave_cu_post_idx_fill_) | pd.isnull(long_open_idx1)) # get_index_bybool\n","    # dc_lower_touch = dc_lower_ >= low\n","    # dc_lower_touch_span = np.full(len_df, np.nan)\n","    # dc_lower_touch_span[long_valid_idx_bool] = [dc_lower_touch[int(iin):int(iout) + 1].sum() for iin, iout in zip(wave_cu_post_idx_fill_, long_open_idx1) if not pd.isnull(iin) if not pd.isnull(iout)]\n","\n","    # short_open_res1 *= dc_upper_touch_span == 0\n","    # long_open_res1 *= dc_lower_touch_span == 0\n","\n","    # if show_detail:\n","    #   sys_log.warning(\"csd - dc\")\n","    #   sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","    #   sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))\n","    #   # sys_log.warning(\"np.sum(short_open_res2 == 1) : {}\".format(np.sum(short_open_res2 == 1)))\n","    #   # sys_log.warning(\"np.sum(long_open_res2 == 1) : {}\".format(np.sum(long_open_res2 == 1)))   \n","    \n","    # ================== pattern depiction ================== #  \n","    # bb_upper_ = res_df['bb_upper_{}{}'.format('T', 60)].to_numpy()\n","    # bb_lower_ = res_df['bb_lower_{}{}'.format('T', 60)].to_numpy()\n","    # bb_upper2_ = res_df['bb_upper2_{}{}'.format('T', 60)].to_numpy()\n","    # bb_lower2_ = res_df['bb_lower2_{}{}'.format('T', 60)].to_numpy()\n","    # bb_upper3_ = res_df['bb_upper3_{}{}'.format('T', 60)].to_numpy()\n","    # bb_lower3_ = res_df['bb_lower3_{}{}'.format('T', 60)].to_numpy()\n","    \n","    # ------ 양 / 음봉 (long) ------ #\n","    # short_open_res1 *= close < open\n","    # long_open_res1 *= close > open\n","\n","    # if show_detail:\n","    #   sys_log.warning(\"close > open\")\n","    #   sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","    #   sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))\n","\n","    \n","    # # ------ even_break, hhhl (long) ------ #        \n","    # # cu's roll_high_[:, -1] = prev_high & cu's roll_low_[:, -1] = current_low\n","    # # co's roll_low_[:, -1] = prev_low & co's roll_high_[:, -1] = current_high\n","    # short_open_res1 *= (roll_low_[:, -2] > roll_low_[:, -1]) # & (roll_high_[:, -2] > roll_high_[:, -1])\n","    # long_open_res1 *= (roll_high_[:, -2] < roll_high_[:, -1]) # & (roll_low_[:, -2] < roll_low_[:, -1])\n","\n","    # if show_detail:\n","    #   sys_log.warning(\"even_break\")\n","    #   sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","    #   sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))\n","\n","    # # ------ roll_high < bb_upper2 (long) ------ #\n","    # short_open_res1 *= (roll_low_[:, -4] > roll_low_bb_lower2_[:, -4])\n","    # short_open_res1 *= (roll_low_[:, -3] > roll_low_bb_lower2_[:, -3])\n","    # short_open_res1 *= (roll_low_[:, -2] > roll_low_bb_lower2_[:, -2])\n","    # short_open_res1 *= (roll_low_[:, -1] > roll_low_bb_lower2_[:, -1])\n","\n","    # long_open_res1 *= (roll_high_[:, -4] < roll_high_bb_upper2_[:, -4])\n","    # long_open_res1 *= (roll_high_[:, -3] < roll_high_bb_upper2_[:, -3])\n","    # long_open_res1 *= (roll_high_[:, -2] < roll_high_bb_upper2_[:, -2])\n","    # long_open_res1 *= (roll_high_[:, -1] < roll_high_bb_upper2_[:, -1])\n","    \n","    # if show_detail:\n","    #   sys_log.warning(\"roll_high < bb_upper2\")\n","    #   sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","    #   sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))\n","\n","\n","    # ------ get candle_lastidx ------ #        \n","    # tf_entry = to_itvnum(config.loc_set.point.tf_entry)\n","    # b1_shift = np_timeidx % tf_entry + 1  # dynamic\n","    # b1_candle_lastidx = (len_df_range - b1_shift).astype(float)\n","    # b2_candle_lastidx = (len_df_range - (b1_shift + tf_entry)).astype(float)\n","    # b3_candle_lastidx = (len_df_range - (b1_shift + 2 * tf_entry)).astype(float)\n","    # b1_candle_lastidx[b1_candle_lastidx < 0] = np.nan\n","    # b2_candle_lastidx[b2_candle_lastidx < 0] = np.nan\n","    # b3_candle_lastidx[b3_candle_lastidx < 0] = np.nan\n","\n","    # high_5T = res_df['high_5T'].to_numpy()\n","    # low_5T = res_df['low_5T'].to_numpy()\n","\n","    # b2_high_5T = get_line(b2_candle_lastidx, high_5T)\n","    # b2_low_5T = get_line(b2_candle_lastidx, low_5T)\n","    \n","        # # ------ bb_stream ------ #        \n","        # roll_high_bb_upper_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, bb_upper_, roll_hl_cnt)\n","        # roll_low_bb_upper_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, bb_upper_, roll_hl_cnt)\n","        # roll_high_bb_upper2_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, bb_upper2_, roll_hl_cnt)\n","        # roll_low_bb_upper2_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, bb_upper2_, roll_hl_cnt)\n","\n","        # roll_high_bb_lower_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, bb_lower_, roll_hl_cnt)\n","        # roll_low_bb_lower_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, bb_lower_, roll_hl_cnt)\n","        # roll_high_bb_lower2_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, bb_lower2_, roll_hl_cnt)\n","        # roll_low_bb_lower2_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, bb_lower2_, roll_hl_cnt)\n","\n","        # wave_base_ = res_df['dc_base_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","\n","        # roll_high_wave_base_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, wave_base_, roll_hl_cnt)\n","        # roll_low_wave_base_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, wave_base_, roll_hl_cnt)\n","\n","        # short_open_res *= (roll_high_bb_lower_[:, -2] > roll_high_wave_base_[:, -2]) & (roll_high_wave_base_[:, -2] > roll_high_bb_lower2_[:, -2])\n","        # short_open_res *= (roll_low_bb_lower_[:, -1] > roll_low_wave_base_[:, -1]) & (roll_low_wave_base_[:, -1] > roll_low_bb_lower2_[:, -1])\n","        # short_open_res *= (roll_high_bb_lower_[:, -1] > roll_high_wave_base_[:, -1]) & (roll_high_wave_base_[:, -1] > roll_high_bb_lower2_[:, -1])\n","\n","        # long_open_res *= (roll_low_bb_upper_[:, -2] < roll_low_wave_base_[:, -2]) & (roll_low_wave_base_[:, -2] < roll_low_bb_upper2_[:, -2])\n","        # long_open_res *= (roll_high_bb_upper_[:, -1] < roll_high_wave_base_[:, -1]) & (roll_high_wave_base_[:, -1] < roll_high_bb_upper2_[:, -1])\n","        # long_open_res *= (roll_low_bb_upper_[:, -1] < roll_low_wave_base_[:, -1]) & (roll_low_wave_base_[:, -1] < roll_low_bb_upper2_[:, -1])\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"bb_stream\")\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))  \n","\n","        # ------ candle_pattern  ------ #   \n","        # b3_bb_upper_ = get_line(b3_candle_lastidx, bb_upper_)\n","        # b3_bb_lower_ = get_line(b3_candle_lastidx, bb_lower_)\n","        # b3_bb_upper2_ = get_line(b3_candle_lastidx, bb_upper2_)\n","        # b3_bb_lower2_ = get_line(b3_candle_lastidx, bb_lower2_)\n","        # b3_close = get_line(b3_candle_lastidx, close)\n","\n","        # b2_bb_upper2_ = get_line(b2_candle_lastidx, bb_upper2_)\n","        # b2_bb_lower2_ = get_line(b2_candle_lastidx, bb_lower2_)\n","        # b2_bb_upper3_ = get_line(b2_candle_lastidx, bb_upper3_)\n","        # b2_bb_lower3_ = get_line(b2_candle_lastidx, bb_lower3_)\n","        # b2_close = get_line(b2_candle_lastidx, close)\n","\n","        # b1_bb_upper_ = get_line(b1_candle_lastidx, bb_upper_)\n","        # b1_bb_lower_ = get_line(b1_candle_lastidx, bb_lower_)\n","        # b1_bb_upper2_ = get_line(b1_candle_lastidx, bb_upper2_)\n","        # b1_bb_lower2_ = get_line(b1_candle_lastidx, bb_lower2_)\n","        # b1_close = get_line(b1_candle_lastidx, close)\n","        # b1_high_5T = get_line(b1_candle_lastidx, high_5T)\n","        # b1_low_5T = get_line(b1_candle_lastidx, low_5T)\n","\n","        # short_open_res *= (b3_bb_lower_ > b3_close) & (b3_close > b3_bb_lower2_)\n","        # short_open_res *= (b2_bb_lower2_ > b2_close) & (b2_close > b2_bb_lower3_)\n","        # short_open_res *= (b1_bb_lower_ > b1_close) & (b1_close > b1_bb_lower2_)\n","\n","        # long_open_res *= (b3_bb_upper_ < b3_close) & (b3_close < b3_bb_upper2_)\n","        # long_open_res *= (b2_bb_upper2_ < b2_close) & (b2_close < b2_bb_upper3_)\n","        # long_open_res *= (b1_bb_upper_ < b1_close) & (b1_close < b1_bb_upper2_)\n","\n","        # # short_open_res *= (b2_low_5T < b1_low_5T) & (b2_close < b1_close)\n","        # # long_open_res *= (b2_high_5T > b1_high_5T) & (b2_close > b1_close)\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"candle_pattern\")\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1))) \n","\n","\n","        # ------ low_confirm ------ #\n","        # short_open_res *= b1_high_5T > wave_high_fill_\n","        # long_open_res *= b1_low_5T < wave_low_fill_\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"low_confirm\")\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1))) \n","        \n","        # ------ candle_ratio ------ #\n","        # b2_candle_range_5T = b2_high_5T - b2_low_5T\n","        # b1_candle_range_5T = b1_high_5T - b1_low_5T\n","        \n","        # short_open_res *= b1_candle_range_5T / b2_candle_range_5T < config.loc_set.point.crr\n","        # long_open_res *= b1_candle_range_5T / b2_candle_range_5T < config.loc_set.point.crr\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"candle_ratio\")\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1))) \n","\n","        # ------ wick_ratio ------ #\n","        # upper_wick_ratio_ = res_df['upper_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].to_numpy()\n","        # lower_wick_ratio_ = res_df['lower_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].to_numpy()\n","        # b2_upper_wick_ratio_ = get_line(b2_candle_lastidx, upper_wick_ratio_)\n","        # b2_lower_wick_ratio_ = get_line(b2_candle_lastidx, lower_wick_ratio_)\n","\n","        # short_open_res *= b2_upper_wick_ratio_ < config.loc_set.point.short_wick_ratio\n","        # long_open_res *= b2_upper_wick_ratio_ < config.loc_set.point.long_wick_ratio\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"wick_ratio\")\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1))) \n","\n","        # ------ large wave1_range ------ #          \n","        # roll_bb_upper_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, bb_upper_, roll_hl_cnt)\n","        # roll_bb_lower_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, bb_lower_, roll_hl_cnt)\n","        # roll_bb_upper3_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, bb_upper3_, roll_hl_cnt)\n","        # roll_bb_lower3_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, bb_lower3_, roll_hl_cnt)\n","\n","        # short_open_res *= (roll_bb_upper_[:, -2] < roll_high_[:, -2]) & (roll_low_[:, -1] < roll_bb_lower_[:, -1]) & (roll_low_[:, -1] > roll_bb_lower3_[:, -1])\n","        # long_open_res *= (roll_bb_upper_[:, -1] < roll_high_[:, -1]) & (roll_low_[:, -2] < roll_bb_lower_[:, -2]) & (roll_high_[:, -1] < roll_bb_upper3_[:, -1])\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","        \n","        # ------ low in bb_level3 ------ #  Todo, idx sync 맞춰야할 것\n","        # short_open_res *= (bb_upper2_ < wave_high_fill_) & (wave_high_fill_ < bb_upper3_)\n","        # long_open_res *= (bb_lower3_ < wave_low_fill_) & (wave_low_fill_ < bb_lower2_)\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ first_high ------ #        \n","        # wave_high_prime_idx_fill_= res_df['wave_high_prime_idx_fill_{}{}'.format(itv, period1)].to_numpy()\n","        # wave_low_prime_idx_fill_= res_df['wave_low_prime_idx_fill_{}{}'.format(itv, period1)].to_numpy()\n","        # cu_prime_wave_base = get_line(cu_prime_idx_fill_, wave_base_)\n","        # co_prime_wave_base = get_line(co_prime_idx_fill_, wave_base_)\n","\n","        # # short_open_res *= (co_roll_high_[:, -1] > dc_base_) & (dc_base_ > co_roll_low_[:, -1])\n","        # # long_open_res *= (cu_roll_low_[:, -1] < dc_base_) & (dc_base_ < cu_roll_high_[:, -1])\n","\n","        # short_open_res *= (cu_prime_wave_base > dc_base_) & (dc_base_ > co_prime_wave_base)\n","        # long_open_res *= (co_prime_wave_base < dc_base_) & (dc_base_ < cu_prime_wave_base)\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # cu_prime_dc_base = get_line(cu_prime_idx_fill_, dc_base_)        \n","        # co_prime_dc_base = get_line(co_prime_idx_fill_, dc_base_)\n","        \n","        # shift_size = to_itvnum(p1_itv1)\n","        # b1_dc_base_ = res_df['dc_base_{}{}'.format(p1_itv1, p1_period1)].shift(shift_size).to_numpy()\n","\n","        # short_open_res *= (b1_dc_base_ < dc_base_)\n","        # long_open_res *= (b1_dc_base_ > dc_base_)\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ b1_base_15T < wave_high ------ #\n","        # short_open_res *= (b1_dc_base_ > co_roll_low_[:, -1])\n","        # long_open_res *= (b1_dc_base_ < cu_roll_high_[:, -1])\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))   \n","        \n","        \n","    # b1_itv_num = to_itvnum(config.tr_set.p2_itv0)\n","    # b2_itv_num = to_itvnum(config.tr_set.p2_itv0) * 2  # multi 2 for imb_v2\n","\n","    # res_df[short_tp_1_] = res_df['dc_lower_{}{}'.format(itv, period1)]\n","    # res_df[short_tp_0_] = res_df['dc_upper_{}{}'.format(itv, period2)]\n","    # # res_df[short_tp_0_] = res_df['dc_upper_15T4']\n","    # res_df[long_tp_1_] = res_df['dc_upper_{}{}'.format(itv, period1)]\n","    # res_df[long_tp_0_] = res_df['dc_lower_{}{}'.format(itv, period2)]\n","    # # res_df[long_tp_0_] = res_df['dc_lower_15T4']\n","    \n","        # ------ base_cc ------ #\n","        dc_base_ = res_df['dc_base_{}{}'.format(p1_itv1, p1_period1)].to_numpy()\n","\n","        # close_ = res_df['close_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","        # b1_dc_base_ = res_df['dc_base_{}{}'.format(p1_itv1, p1_period1)].shift(tf_entry).to_numpy()\n","        # b1_close_ = res_df['close_{}'.format(config.loc_set.point.tf_entry)].shift(tf_entry).to_numpy()\n","\n","        # short_open_res *= ((b1_close_ > dc_base_) & (dc_base_ > close_)) | ((b1_close_ > b1_dc_base_) & (dc_base_ > close_))\n","        # long_open_res *= ((b1_close_ < dc_base_) & (dc_base_ < close_)) | ((b1_close_ < b1_dc_base_) & (dc_base_ < close_))\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","        \n","        # ------ tf_entry ------ #\n","        # tf_entry = to_itvnum(config.loc_set.point.tf_entry)\n","        \n","        # short_open_res *= np_timeidx % tf_entry == (tf_entry - 1)\n","        # long_open_res *= np_timeidx % tf_entry == (tf_entry - 1) \n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","    \n","        # ------ cppr 로 양음봉 check ------ # \n","        # tf_entry = to_itvnum(config.loc_set.point.tf_entry)\n","\n","        # res_df['b1_cppr_{}'.format(config.loc_set.point.tf_entry)] = res_df['cppr_{}'.format(config.loc_set.point.tf_entry)].shift(tf_entry)\n","        # b1_cppr_ = res_df['b1_cppr_{}'.format(config.loc_set.point.tf_entry)].to_numpy()  # check b1's cppr in ep_loc\n","        # cppr_ = res_df['cppr_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","        # short_open_res *= (b1_cppr_ > 0) & (cppr_ < 0)\n","        # long_open_res *= (b1_cppr_ < 0) & (cppr_ > 0)\n","\n","        # res_df['b1_updbr'] = res_df['dc_upper_15T4_br'].shift(tf_entry).to_numpy()\n","        # res_df['b1_lwdbr'] = res_df['dc_lower_15T4_br'].shift(tf_entry).to_numpy()\n","        \n","        # res_df['b1_updbr_cppr'] = b1_cppr_ * res_df['b1_updbr'].to_numpy()\n","        # res_df['b1_lwdbr_cppr'] = b1_cppr_ * res_df['b1_lwdbr'].to_numpy()\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ dc_cross ------ #\n","        # b1_dc_upper_15T4 = res_df['dc_upper_15T4'].shift(tf_entry).to_numpy()\n","        # b1_dc_lower_15T4 = res_df['dc_lower_15T4'].shift(tf_entry).to_numpy()\n","        # b1_high_ = res_df['high_{}'.format(config.loc_set.point.tf_entry)].shift(tf_entry).to_numpy()\n","        # b1_low_ = res_df['low_{}'.format(config.loc_set.point.tf_entry)].shift(tf_entry).to_numpy()\n","        # short_open_res *= b1_high_ > b1_dc_upper_15T4\n","        # long_open_res *= b1_low_ < b1_dc_lower_15T4\n","        \n","        # ------ dc_cc ------ #\n","        # b1_close_ = res_df['close_{}'.format(config.loc_set.point.tf_entry)].shift(tf_entry).to_numpy()\n","        # short_open_res *= b1_close_ > b1_dc_upper_15T4\n","        # long_open_res *= b1_close_ < b1_dc_lower_15T4\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ empty_space ------ #       \n","        # dc_upper_15T4 = res_df['dc_upper_15T4'].to_numpy()\n","        # dc_lower_15T4 = res_df['dc_lower_15T4'].to_numpy() \n","        # high_ = res_df['high_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","        # low_ = res_df['low_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","        # short_open_res *= high_ < dc_upper_15T4\n","        # long_open_res *= low_ > dc_lower_15T4\n","        \n","        # ------ candle_pattern ------ #  \n","        # pattern_column = \"{}_{}\".format(config.loc_set.point.candle_pattern, config.loc_set.point.tf_entry)\n","        # short_open_res *= res_df[pattern_column].to_numpy() < 0\n","        # long_open_res *= res_df[pattern_column].to_numpy() > 0\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","\n","        # ------ lower_touch > upper_touch (long) ------ #\n","        # short_open_res *= res_df['short_upper_touch_idx_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy() > res_df['short_lower_touch_idx_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy()\n","        # long_open_res *= res_df['long_lower_touch_idx_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy() > res_df['long_upper_touch_idx_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy()\n","\n","        # ------ base_3T cross ------ #\n","        # dc_base_3T = res_df['dc_base_3T'].to_numpy()\n","        # b1_close = res_df['close'].shift(1).to_numpy()\n","        # short_open_res *= (b1_close > dc_base_3T) & (dc_base_3T > close)\n","        # long_open_res *= (b1_close < dc_base_3T) & (dc_base_3T < close)\n","\n","        # ------ wave_low < base_5T (long) ------ #\n","        # dc_base_5T = res_df['dc_base_5T'].to_numpy()        \n","        # short_open_res *= res_df['short_upper_touch_line_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy() > dc_base_5T\n","        # long_open_res *= res_df['long_lower_touch_line_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy() < dc_base_5T      \n","\n","        # ------ ppr ------ #\n","        # pumping_ratio(res_df, config, p1_itv1, p1_period1, p1_period2)  "]},{"cell_type":"markdown","metadata":{"id":"aTV4h3LjTZBp"},"source":["#### dump"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dc49JPmoTaPQ"},"outputs":[],"source":["\n","    \n","    csd_period = 40\n","    res_df = dc_line_v4(res_df, res_df, dc_period=csd_period)\n","    \n","    dc_upper_ = res_df['dc_upper_T{}'.format(csd_period)].to_numpy()    \n","    dc_lower_ = res_df['dc_lower_T{}'.format(csd_period)].to_numpy()  \n","\n","    short_open_res2 *= dc_upper_touch_span == 0\n","    long_open_res2 *= dc_lower_touch_span == 0\n","\n","    # ------ csdbox ------ # --> 결국 dc's upper & lower\n","    if show_detail:\n","      sys_log.warning(\"csdbox\")\n","      # sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","      # sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))\n","      sys_log.warning(\"np.sum(short_open_res2 == 1) : {}\".format(np.sum(short_open_res2 == 1)))\n","      sys_log.warning(\"np.sum(long_open_res2 == 1) : {}\".format(np.sum(long_open_res2 == 1)))\n","      \n","    # olds,\n","    # np.nan - np.nan = np.nan -> vectorize 가능할 것 => xx\n","    # 1. wave_high_prime_idx_ ~ long_open_idx1 의 valid(not_non) 한 idx 를 max_dc_lower 와 min_low 의 비교값으로 채워넣음\n","    # valid_idx = ~(pd.isnull(wave_cu_post_idx_fill_) | pd.isnull(long_open_idx1))\n","    # max_dc_lower_ = [dc_lower_[int(iin):int(iout)].max() for iin, iout in zip(wave_cu_post_idx_fill_, long_open_idx1) if not pd.isnull(iin) if not pd.isnull(iout)]\n","    # min_low = [low[int(iin):int(iout)].min() for iin, iout in zip(wave_high_prime_idx_, long_open_idx1) if not pd.isnull(iin) if not pd.isnull(iout)]\n","    \n","    short_tp_1_, long_tp_1_ = 'short_tp_1_{}'.format(selection_id), 'long_tp_1_{}'.format(selection_id)\n","    short_tp_0_, long_tp_0_ = 'short_tp_0_{}'.format(selection_id), 'long_tp_0_{}'.format(selection_id)\n","    short_tp_gap_, long_tp_gap_ = 'short_tp_gap_{}'.format(selection_id), 'long_tp_gap_{}'.format(selection_id)\n","\n","    short_ep_1_, long_ep_1_ = 'short_ep_1_{}'.format(selection_id), 'long_ep_1_{}'.format(selection_id)\n","    short_ep_0_, long_ep_0_ = 'short_ep_0_{}'.format(selection_id), 'long_ep_0_{}'.format(selection_id)\n","    short_ep_gap_, long_ep_gap_ = 'short_ep_gap_{}'.format(selection_id), 'long_ep_gap_{}'.format(selection_id)\n","\n","    short_epout_1_, long_epout_1_ = 'short_epout_1_{}'.format(selection_id), 'long_epout_1_{}'.format(selection_id)\n","    short_epout_0_, long_epout_0_ = 'short_epout_0_{}'.format(selection_id), 'long_epout_0_{}'.format(selection_id)\n","    short_epout_gap_, long_epout_gap_ = 'short_epout_gap_{}'.format(selection_id), 'long_epout_gap_{}'.format(selection_id)\n","    \n","    # ================== convert unit -> numpy ================== #   \n","    # tp_cols = [short_tp_1_, short_tp_0_, short_tp_gap_, long_tp_1_, long_tp_0_, long_tp_gap_]\n","    # epout_cols = [short_epout_1_, short_epout_0_, short_epout_gap_, long_epout_1_, long_epout_0_, long_epout_gap_]\n","\n","    # short_tp_1, short_tp_0, short_tp_gap, long_tp_1, long_tp_0, long_tp_gap = [res_df[col_].to_numpy() for col_ in tp_cols]\n","    # short_epout_1, short_epout_0, short_epout_gap, long_epout_1, long_epout_0, long_epout_gap = [res_df[col_].to_numpy() for col_ in epout_cols]\n","\n","    if p2_itv1 != \"None\":  # vectorized point2\n","        short_point1_on2_idx = pd.Series(\n","            np.where(res_df['short_wave_point_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)], len_df_range, np.nan)).rolling(point1_to2_period,\n","                                                                                                                                    min_periods=1).max().to_numpy()  # period 내의 max_point1_idx\n","        long_point1_on2_idx = pd.Series(\n","            np.where(res_df['long_wave_point_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)], len_df_range, np.nan)).rolling(point1_to2_period,\n","                                                                                                                                   min_periods=1).max().to_numpy()\n","\n","        short_point2_idx = pd.Series(\n","            np.where(res_df['short_wave_point_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)], len_df_range, np.nan)).to_numpy()\n","        long_point2_idx = pd.Series(\n","            np.where(res_df['long_wave_point_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)], len_df_range, np.nan)).to_numpy()\n","\n","        res_df['short_point_idxgap_{}'.format(selection_id)] = short_point2_idx - short_point1_on2_idx\n","        res_df['long_point_idxgap_{}'.format(selection_id)] = long_point2_idx - long_point1_on2_idx\n","\n","        # ------ p1 & p2 ------ #\n","        short_open_res *= ~np.isnan(res_df['short_point_idxgap_{}'.format(selection_id)].to_numpy())\n","        long_open_res *= ~np.isnan(res_df['long_point_idxgap_{}'.format(selection_id)].to_numpy())\n","\n","        if show_detail:\n","          sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","          sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ p2 amax > p1_idx (long) ------ #\n","        short_open_res *= res_df['short_upper_touch_idx_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)].to_numpy() > short_point1_on2_idx\n","        long_open_res *= res_df['long_lower_touch_idx_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)].to_numpy() > long_point1_on2_idx\n","\n","        if show_detail:\n","          sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","          sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ higher low (long) ------ #\n","        # short_a_line1_on2_ = get_line(short_point1_on2_idx, res_df['short_a_line_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy())\n","        # long_a_line1_on2_ = get_line(long_point1_on2_idx, res_df['long_a_line_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy())\n","\n","        # short_a_line2_ = res_df['short_a_line_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)].to_numpy()\n","        # long_a_line2_ = res_df['long_a_line_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)].to_numpy()\n","\n","        # short_open_res *= short_a_line1_on2_ >= short_a_line2_\n","        # long_open_res *= long_a_line1_on2_ <= long_a_line2_\n","\n","        # print(np.sum(long_open_res == 1))\n","\n","        # ------ higher high (long) ------ #\n","        # short_open_res *= co_roll_low_[:, -2] > co_roll_low_[:, -1]\n","        # long_open_res *= cu_roll_high_[:, -2] < cu_roll_high_[:, -1]\n","\n","        # short_open_res *= co_roll_low_[:, -3] > co_roll_low_[:, -2]\n","        # long_open_res *= cu_roll_high_[:, -3] < cu_roll_high_[:, -2]\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ higher low (long) ------ # \n","        # short_open_res *= co_roll_high_[:, -2] > co_roll_high_[:, -1]\n","        # long_open_res *= cu_roll_low_[:, -2] < cu_roll_low_[:, -1]\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))  \n","\n","        # ------ tf2_base < wave_low ------ #\n","        # short_open_res *= (dc_base_ > co_roll_high_[:, -1])\n","        # long_open_res *= (dc_base_ < cu_roll_low_[:, -1])\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))  \n","\n","        # short_open_res *= (cu_prime_wave_base > cu_prime_dc_base) & (dc_base_ > co_prime_wave_base)\n","        # long_open_res *= (co_prime_wave_base < co_prime_dc_base) & (dc_base_ < cu_prime_wave_base)\n","\n","        short_open_res *= (co_prime_dc_base < co_roll_low_[:, -2])\n","        long_open_res *= (cu_prime_dc_base > cu_roll_high_[:, -2])  #  b1_cu_prime_idx’s tf2_base > b1_high -> b1 이 아님 (error)\n","\n","\n","        res_df[short_epout_1_] = res_df['short_wave_low_{}{}{}'.format(itv, period1, period2)]\n","        res_df[short_epout_0_] = res_df['short_new_wave_high_{}{}{}'.format(itv, period1, period2)]\n","        res_df[long_epout_1_] = res_df['long_wave_high_{}{}{}'.format(itv, period1, period2)]\n","        res_df[long_epout_0_] = res_df['long_new_wave_low_{}{}{}'.format(itv, period1, period2)]\n","        \n","        # ------ get candle_lastidx ------ #        \n","        tf_entry = to_itvnum(config.loc_set.point.tf_entry)\n","        b1_candle_shift = np_timeidx % tf_entry + 1\n","        b2_candle_shift = b1_candle_shift + tf_entry\n","        b3_candle_shift = b1_candle_shift + 2 * tf_entry\n","\n","        print(b3_candle_shift)\n","\n","        # bb_upper_ = res_df['bb_upper_{}{}'.format('T', 60)].to_numpy()\n","        # bb_lower_ = res_df['bb_lower_{}{}'.format('T', 60)].to_numpy()\n","        # bb_upper2_ = res_df['bb_upper2_{}{}'.format('T', 60)].to_numpy()\n","        # bb_lower2_ = res_df['bb_lower2_{}{}'.format('T', 60)].to_numpy()\n","        # bb_upper3_ = res_df['bb_upper3_{}{}'.format('T', 60)].to_numpy()\n","        # bb_lower3_ = res_df['bb_lower3_{}{}'.format('T', 60)].to_numpy()\n","\n","        # ------ compare by back_idx  ------ #   \n","        b3_bb_upper_ = res_df['bb_upper_{}{}'.format('T', 60)].shift(b3_candle_shift).to_numpy()\n","        b3_bb_lower_ = res_df['bb_lower_{}{}'.format('T', 60)].shift(b3_candle_shift).to_numpy()\n","        b3_bb_upper2_ = res_df['bb_upper2_{}{}'.format('T', 60)].shift(b3_candle_shift).to_numpy()\n","        b3_bb_lower2_ = res_df['bb_lower2_{}{}'.format('T', 60)].shift(b3_candle_shift).to_numpy()\n","        b3_close = res_df['close'].shift(b3_candle_shift).to_numpy()\n","\n","        b2_bb_upper2_ = res_df['bb_upper2_{}{}'.format('T', 60)].shift(b2_candle_shift).to_numpy()\n","        b2_bb_lower2_ = res_df['bb_lower2_{}{}'.format('T', 60)].shift(b2_candle_shift).to_numpy()\n","        b2_bb_upper3_ = res_df['bb_upper3_{}{}'.format('T', 60)].shift(b2_candle_shift).to_numpy()\n","        b2_bb_lower3_ = res_df['bb_lower3_{}{}'.format('T', 60)].shift(b2_candle_shift).to_numpy()\n","        b2_close = res_df['close'].shift(b2_candle_shift).to_numpy()\n","\n","        b1_bb_upper_ = res_df['bb_upper_{}{}'.format('T', 60)].shift(b1_candle_shift).to_numpy()\n","        b1_bb_lower_ = res_df['bb_lower_{}{}'.format('T', 60)].shift(b1_candle_shift).to_numpy()\n","        b1_bb_upper2_ = res_df['bb_upper2_{}{}'.format('T', 60)].shift(b1_candle_shift).to_numpy()\n","        b1_bb_lower2_ = res_df['bb_lower2_{}{}'.format('T', 60)].shift(b1_candle_shift).to_numpy()\n","        b1_close = res_df['close'].shift(b1_candle_shift).to_numpy()\n"]},{"cell_type":"markdown","metadata":{"id":"HKdUKKl-483N"},"source":["### utils_public"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nzOYWA2kqZ0d"},"outputs":[],"source":["# from funcs.funcs_indicator import *\n","# from funcs.funcs_trader import *\n","# import logging\n","# from ast import literal_eval\n","\n","pd.set_option('mode.chained_assignment',  None)\n","sys_log = logging.getLogger()\n","\n","\n","class OrderSide:\n","    BUY = \"BUY\"\n","    SELL = \"SELL\"\n","    INVALID = None\n","\n","\n","def lvrg_set(res_df, config, open_side, ep_, out_, fee, limit_leverage=50):\n","    selection_id = config.selection_id\n","    if not pd.isnull(out_) and not config.lvrg_set.static_lvrg:\n","        if selection_id in ['v3']:\n","            if open_side == OrderSide.SELL:\n","                loss = out_ / ep_\n","            else:\n","                loss = ep_ / out_\n","        else:  # 이 phase 가 정석, 윗 phase 는 결과가 수익 극대화라 사용함\n","            if open_side == OrderSide.SELL:\n","                loss = ep_ / out_\n","            else:\n","                loss = out_ / ep_\n","\n","        config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(loss - 1 - (fee + config.trader_set.market_fee))\n","\n","    # ------------ leverage rejection ------------ #\n","    # 감당하기 힘든 fluc. 의 경우 진입하지 않음 - dynamic_lvrg 사용 경우\n","    if config.lvrg_set.leverage < 1 and config.lvrg_set.lvrg_rejection:\n","        # if config.lvrg_set.leverage >= 1 and config.lvrg_set.lvrg_rejection:\n","        return None\n","\n","    if not config.lvrg_set.allow_float:\n","        config.lvrg_set.leverage = int(config.lvrg_set.leverage)\n","\n","    config.lvrg_set.leverage = min(limit_leverage, max(config.lvrg_set.leverage, 1))\n","\n","    return config.lvrg_set.leverage\n","\n","\n","def sync_check(df_, config, order_side=\"OPEN\", row_slice=True):\n","    try:\n","        make_itv_list = [m_itv.replace('m', 'T') for m_itv in literal_eval(config.trader_set.itv_list)]\n","        row_list = literal_eval(config.trader_set.row_list)\n","        rec_row_list = literal_eval(config.trader_set.rec_row_list)\n","        offset_list = literal_eval(config.trader_set.offset_list)\n","\n","        assert len(make_itv_list) == len(offset_list), \"length of itv & offset_list should be equal\"\n","        htf_df_list = [to_htf(df_, itv_=itv_, offset=offset_) for itv_idx, (itv_, offset_)\n","                       in enumerate(zip(make_itv_list, offset_list)) if itv_idx != 0]  #\n","        htf_df_list.insert(0, df_)\n","\n","        # for htf_df_ in htf_df_list:\n","        #     print(htf_df_.tail())\n","\n","        #       Todo        #\n","        #        1. row_list calc.\n","        #           a. indi. 를 만들기 위한 최소 period 가 존재하고, 그 indi. 를 사용한 lb_period 가 존재함\n","        #           b. => default_period + lb_period\n","        #               i. from sync_check, public_indi, ep_point2, ep_dur 의 tf 별 max lb_period check\n","        #                   1. default_period + max lb_period check\n","        #                       a. 현재까지 lb_period_list\n","        #                           h_prev_idx (open / close) 60\n","        #                           dc_period 135\n","        #                           zone_dc_period 135\n","\n","        # --------- slicing (in trader phase only) --------- #\n","        #               --> latency 영향도가 높은 곳은 이곳\n","        if row_slice:  # recursive 가 아닌 indi. 의 latency 를 고려한 slicing\n","            df, df_3T, df_5T, df_15T, df_30T, df_H, df_4H = [df_s.iloc[-row_list[row_idx]:].copy() for row_idx, df_s in enumerate(htf_df_list)]\n","            rec_df, rec_df_3T, rec_df_5T, rec_df_15T, rec_df_30T, rec_df_H, rec_df_4H = [df_s.iloc[-rec_row_list[row_idx]:].copy() for row_idx, df_s\n","                                                                                         in\n","                                                                                         enumerate(htf_df_list)]\n","        else:\n","            df, df_3T, df_5T, df_15T, df_30T, df_H, df_4H = htf_df_list\n","            rec_df, rec_df_3T, rec_df_5T, rec_df_15T, rec_df_30T, rec_df_H, rec_df_4H = htf_df_list\n","\n","        # --------- add indi. --------- #\n","\n","        #        1. 필요한 indi. 는 enlist_epouttp & mr_check 보면서 삽입\n","        #        2. min use_rows 계산을 위해서, tf 별로 gathering 함        #\n","        # start_0 = time.time()\n","\n","        # ------ T ------ #\n","        # df = dc_line(df, None, 'T', dc_period=20)\n","        # df = bb_line(df, None, 'T')\n","        #\n","        # ------ 3T ------ #\n","        # df = dc_line(df, df_3T, '3T')\n","\n","        # ------ 5T ------ #\n","        # h_candle_v3(df, '5T')\n","        df = dc_line(df, df_5T, '5T')\n","        df = bb_line(df, df_5T, '5T')\n","        #\n","        # ------ 15T ------ #\n","        # h_candle_v3(df, '15T')\n","        df = dc_line(df, df_15T, '15T')\n","        df = bb_line(df, df_15T, '15T')\n","        #\n","        # ------ 30T ------ #\n","        # df = bb_line(df, df_30T, '30T')\n","        #\n","        # ------ H ------ #\n","        # h_candle_v3(df, 'H')\n","        # df = dc_line(df, df_H, 'H')\n","\n","        # ------ 4H ------ #\n","        # df = bb_line(df, df_4H, '4H')\n","\n","        # rec_df['rsi_1m'] = rsi(rec_df, 14)  # Todo - recursive, 250 period\n","        # df = df.join(to_lower_tf_v2(df, rec_df.iloc[:, [-1]], [-1], backing_i=0), how='inner')  # <-- join same_tf manual\n","        #\n","        # if order_side in [\"OPEN\"]:\n","        #     rec_df_5T['ema_5T'] = ema(rec_df_5T['close'], 195)  # Todo - recursive, 1100 period (5T)\n","        #     df = df.join(to_lower_tf_v2(df, rec_df_5T, [-1]), how='inner')\n","\n","    except Exception as e:\n","        sys_log.error(\"error in sync_check :\", e)\n","    else:\n","        return df\n","\n","\n","    return wave_publics_v2(t_df, cu_bool, co_bool, ohlc_list, wave_period)\n","\n","def public_indi(res_df, config, np_timeidx, order_side=\"OPEN\"):\n","\n","    selection_id = config.selection_id\n","\n","    wave_itv1 = config.tr_set.wave_itv1\n","    wave_itv2 = config.tr_set.wave_itv2\n","    wave_period1 = config.tr_set.wave_period1\n","    wave_period2 = config.tr_set.wave_period2\n","    tc_period = config.tr_set.tc_period\n","    roll_hl_cnt = 3\n","  \n","    # assert to_itvnum(wave_itv1) > 1  # wave_itv2 == 'T' and \n","    # ====== public ====== #\n","    # res_df = wave_range_dcbase_v11_3(res_df, config, over_period=2) \n","    \n","    # ------------ wave_period1 ------------ #\n","    if to_itvnum(wave_itv1) > 1: \n","      offset = '1h' if wave_itv1 != 'D' else '9h'\n","      htf_df = to_htf(res_df, wave_itv1, offset=offset)\n","      htf_df = wave_range_cci_v4(htf_df, wave_period1)\n","      \n","      # cols = list(htf_df.columns[-15:-4])  # except idx col\n","      cols = list(htf_df.columns[4:])  # 15T_ohlc 를 제외한 wave_range_cci_v4 로 추가된 cols, 다 넣어버리기 (추후 혼란 방지)\n","\n","      valid_co_prime_idx, valid_cu_prime_idx, roll_co_idx_arr, roll_cu_idx_arr = roll_wave_hl_idx_v5(htf_df, wave_itv1, wave_period1, roll_hl_cnt=roll_hl_cnt)\n","\n","      htf_df = get_roll_wave_data_v2(htf_df, valid_co_prime_idx, roll_co_idx_arr, 'wave_high_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","      cols += list(htf_df.columns[-roll_hl_cnt:])\n","\n","      htf_df = get_roll_wave_data_v2(htf_df, valid_cu_prime_idx, roll_cu_idx_arr, 'wave_low_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","      cols += list(htf_df.columns[-roll_hl_cnt:])\n","\n","      htf_df = wave_range_ratio_v4_3(htf_df, wave_itv1, wave_period1, roll_hl_cnt=roll_hl_cnt)\n","      cols += list(htf_df.columns[-4:])\n","\n","      # ------ 필요한 cols 만 join (htf's idx 정보는 ltf 와 sync. 가 맞지 않음 - join 불가함) ------ #\n","      res_df.drop(cols, inplace=True, axis=1, errors='ignore')\n","      res_df = res_df.join(to_lower_tf_v3(res_df, htf_df, cols, backing_i=1), how='inner')\n","    else:\n","      # res_df = wave_range_cci_v4(res_df, wave_period1)\n","      res_df = wave_range_cci_v4_1(res_df, wave_period1)\n","      # res_df = wave_range_stoch_v1(res_df, wave_period1)\n","      # res_df = wave_range_dc_envel_v1(res_df, wave_period1)\n","\n","      res_df = get_wave_time_ratio(res_df, wave_itv1, wave_period1)\n","\n","      valid_co_prime_idx, valid_cu_prime_idx, roll_co_idx_arr, roll_cu_idx_arr = roll_wave_hl_idx_v5(res_df, wave_itv1, wave_period1, roll_hl_cnt=roll_hl_cnt)\n","\n","      # res_df = add_roll_idx(res_df, valid_cu_prime_idx, roll_cu_idx_arr, 'wave_cu_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","      # res_df = add_roll_idx(res_df, valid_co_prime_idx, roll_co_idx_arr, 'wave_co_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","\n","      res_df = get_roll_wave_data_v2(res_df, valid_co_prime_idx, roll_co_idx_arr, 'wave_high_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)  # Todo, 갱신되는 high 의 last_high 를 추리기 위해 co_prime 사용함\n","      res_df = get_roll_wave_data_v2(res_df, valid_cu_prime_idx, roll_cu_idx_arr, 'wave_low_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","      \n","      res_df = wave_range_ratio_v4_3(res_df, wave_itv1, wave_period1, roll_hl_cnt=roll_hl_cnt)\n","      res_df = get_wave_length(res_df, valid_co_prime_idx, valid_cu_prime_idx, roll_co_idx_arr, roll_cu_idx_arr, wave_itv1, wave_period1, roll_hl_cnt=roll_hl_cnt)\n","\n","      # res_df = tc_dc_base(res_df, tc_period)\n","      # res_df = tc_cci(res_df, tc_period)\n","      # res_df = tc_cci_v2(res_df, tc_period)\n","\n","      # ------ prev_low vs ma ------ #\n","      # ma_period = 60\n","      # res_df = ma(res_df, ma_period)\n","      \n","      # res_df['short_ma_T{}'.format(ma_period)] = res_df['ma_T{}'.format(ma_period)]\n","      # res_df['long_ma_T{}'.format(ma_period)] = res_df['ma_T{}'.format(ma_period)]\n","      \n","      # res_df = get_roll_wave_data_v2(res_df, valid_co_prime_idx, roll_co_idx_arr, 'short_ma_T{}'.format(ma_period), roll_hl_cnt)   # Todo, for index sync.\n","      # res_df = get_roll_wave_data_v2(res_df, valid_cu_prime_idx, roll_cu_idx_arr, 'long_ma_T{}'.format(ma_period), roll_hl_cnt)   # Todo, for index sync.\n","\n","    # ------------ wave_period2 ------------ #\n","    if wave_itv1 != wave_itv2 or wave_period1 != wave_period2:\n","      assert wave_itv2 == 'T'      \n","      \n","      res_df = wave_range_cci_v4_1(res_df, wave_period2, band_width=99)\n","\n","      valid_co_prime_idx, valid_cu_prime_idx, roll_co_idx_arr, roll_cu_idx_arr = roll_wave_hl_idx_v5(res_df, wave_itv2, wave_period2, roll_hl_cnt=roll_hl_cnt)\n","      res_df = get_roll_wave_data_v2(res_df, valid_co_prime_idx, roll_co_idx_arr, 'wave_high_fill_{}{}'.format(wave_itv2, wave_period2), roll_hl_cnt)\n","      res_df = get_roll_wave_data_v2(res_df, valid_cu_prime_idx, roll_cu_idx_arr, 'wave_low_fill_{}{}'.format(wave_itv2, wave_period2), roll_hl_cnt)\n","\n","      res_df = wave_range_ratio_v4_3(res_df, wave_itv2, wave_period2, roll_hl_cnt=roll_hl_cnt)\n","      \n","\n","    # ------ wave_loc_pct (bb) ------ #\n","    # res_df = wave_loc_pct_v2(res_df, config, 'T', 60)\n","    # res_df = wave_loc_pct(res_df, config, 'T', 60)\n","\n","    # future_cols = ['cu_es_15T1', 'co_es_15T1', 'upper_wick_ratio_15T', 'lower_wick_ratio_15T']\n","    # itv_list = ['15T', '15T', '15T', '15T']\n","    # res_df = backing_future_data(res_df, future_cols, itv_list)\n","\n","    # ====== intervaly ====== #    \n","    # ------ 5T ------ #\n","    # res_df = dc_level(res_df, '5T', 1)\n","    # res_df = bb_level(res_df, '5T', 1)\n","\n","    # res_df = st_level(res_df, '5T', 1)\n","\n","    # ------ 15T ------ #\n","    # res_df = dc_level(res_df, '15T', 1)\n","    # res_df = bb_level(res_df, '15T', 1)\n","    # res_df = dtk_plot(res_df, dtk_itv2='15T', hhtf_entry=15, use_dtk_line=config.loc_set.zone1.use_dtk_line, np_timeidx=np_timeidx)\n","\n","    # res_df = st_level(res_df, '15T', 1)\n","\n","    # ------ 30T ------ #\n","    # res_df = dc_level(res_df, '30T', 1)\n","    # res_df = bb_level(res_df, '30T', 1)\n","    # res_df = st_level(res_df, '30T', 1)\n","\n","    # ------ H ------ #\n","    # res_df = bb_level(res_df, 'H', 1)\n","\n","    # ------ 4H ------ #\n","    # res_df = bb_level(res_df, '4H', 1)\n","\n","    # res_df['dc_upper_v2'.format(selection_id)] = res_df['high'].rolling(config.loc_set.zone1.dc_period).max()   # Todo, consider dc_period\n","    # res_df['dc_lower_v2'.format(selection_id)] = res_df['low'].rolling(config.loc_set.zone1.dc_period).min()\n","\n","    # res_df['zone_dc_upper_v2'.format(selection_id)] = res_df['high'].rolling(config.loc_set.zone1.zone_dc_period).max()   # Todo, consider zone_dc_period\n","    # res_df['zone_dc_lower_v2'.format(selection_id)] = res_df['low'].rolling(config.loc_set.zone1.zone_dc_period).min()\n","\n","    # if order_side in [\"OPEN\"]:\n","        # candle_score_v3(res_df, 'T', unsigned=False)\n","        # candle_score_v3(res_df, config.loc_set.point1.exp_itv, unsigned=False)\n","\n","    #     temp indi.    #\n","    # res_df[\"ma30_1m\"] = res_df['close'].rolling(30).mean()\n","    # res_df[\"ma60_1m\"] = res_df['close'].rolling(60).mean()\n","    # res_df = dtk_plot(res_df, dtk_itv2='15T', hhtf_entry=15, use_dtk_line=config.loc_set.zone1.use_dtk_line, np_timeidx=np_timeidx)\n","\n","    return res_df\n","\n","\n","def expiry_v0(res_df, config, op_idx, e_j, tp_j, np_datas, open_side):\n","    high, low = np_datas\n","    selection_id = config.selection_id\n","    expire = 0\n","\n","    if config.tr_set.expire_tick != \"None\":\n","        if e_j - op_idx >= config.tr_set.expire_tick:\n","            expire = 1\n","\n","    if config.tr_set.expire_k1 != \"None\":\n","        if open_side == OrderSide.SELL:\n","            short_tp_1_ = res_df['short_tp_1_{}'.format(selection_id)].to_numpy()  # id 에 따라 dynamic 변수라 이곳에서 numpy 화 진행\n","            short_tp_gap_ = res_df['short_tp_gap_{}'.format(selection_id)].to_numpy()\n","            if low[e_j] <= short_tp_1_[tp_j] - short_tp_gap_[tp_j] * config.tr_set.expire_k1:\n","                expire = 1\n","        else:\n","            long_tp_1_ = res_df['long_tp_1_{}'.format(selection_id)].to_numpy()  # iloc 이 빠를까, to_numpy() 가 빠를까  # 3.94 ms --> 5.34 ms (iloc)\n","            long_tp_gap_ = res_df['long_tp_gap_{}'.format(selection_id)].to_numpy()\n","            if high[e_j] >= long_tp_1_[tp_j] + long_tp_gap_[tp_j] * config.tr_set.expire_k1:\n","                expire = 1\n","\n","    return expire\n","\n","\n","def expiry(res_df, config, op_idx, e_j, tp_j, np_datas, open_side):\n","    high, low = np_datas\n","    selection_id = config.selection_id\n","    expire = 0\n","\n","    if config.tr_set.expire_tick != \"None\":\n","        if e_j - op_idx >= config.tr_set.expire_tick:\n","            expire = 1\n","\n","    if config.tr_set.expire_k1 != \"None\":\n","        if open_side == OrderSide.SELL:\n","            short_tp_ = res_df['short_tp_{}'.format(selection_id)].to_numpy()  # id 에 따라 dynamic 변수라 이곳에서 numpy 화 진행\n","            short_tp_gap_ = res_df['short_tp_gap_{}'.format(selection_id)].to_numpy()\n","            if low[e_j] <= short_tp_[tp_j] + short_tp_gap_[tp_j] * config.tr_set.expire_k1:\n","                expire = 1\n","        else:\n","            long_tp_ = res_df['long_tp_{}'.format(selection_id)].to_numpy()  # iloc 이 빠를까, to_numpy() 가 빠를까  # 3.94 ms --> 5.34 ms (iloc)\n","            long_tp_gap_ = res_df['long_tp_gap_{}'.format(selection_id)].to_numpy()\n","            if high[e_j] >= long_tp_[tp_j] - long_tp_gap_[tp_j] * config.tr_set.expire_k1:\n","                expire = 1\n","\n","    return expire\n","\n","\n","# def expiry_p1(res_df, config, op_idx1, i, op_idx2, np_datas, open_side):\n","def expiry_p1(res_df, config, op_idx1, op_idx2, tp1, tp0, tp_gap, np_datas, open_side):\n","    high, low = np_datas\n","    selection_id = config.selection_id\n","    expire = 0\n","    touch_idx = None\n","\n","    # if config.tr_set.expire_tick != \"None\":\n","    #     if e_j - op_idx >= config.tr_set.expire_tick:\n","    #         expire = 1\n","\n","    # Todo, p1's tp1, 0 cannot be vectorized\n","    #   a. expiration 의 조건은 wave1, 0 의 broken\n","    idx_range = np.arange(op_idx1, op_idx2)\n","    if config.tr_set.expire_k1 != \"None\":\n","        if open_side == OrderSide.SELL:\n","            touch_idx = np.where((low[op_idx1:op_idx2] <= tp1 + tp_gap * config.tr_set.expire_k1) | \\\n","                                 (high[op_idx1:op_idx2] >= tp0 - tp_gap * config.tr_set.expire_k1),\n","                                 idx_range, np.nan)\n","            # if op_idx1 >= 16353:\n","            #   print(\"high[16353], tp0 :\", high[16353], tp0)\n","            if np.sum(~np.isnan(touch_idx)) > 0:  # touch 가 존재하면, \n","            # if low[op_idx1:op_idx2].min() <= tp1 + tp_gap * config.tr_set.expire_k1 or \\\n","            # high[op_idx1:op_idx2].max() >= tp0 - tp_gap * config.tr_set.expire_k1:   # p2_box loc. 이 있어서, op_idx2 + 1 안함\n","                expire = 1\n","        else:\n","            touch_idx = np.where((high[op_idx1:op_idx2] >= tp1 - tp_gap * config.tr_set.expire_k1) | \\\n","                                  (low[op_idx1:op_idx2] <= tp0 + tp_gap * config.tr_set.expire_k1),\n","                                  idx_range, np.nan)\n","            if np.sum(~np.isnan(touch_idx)) > 0:                                  \n","            # if high[op_idx1:op_idx2].max() >= tp1 - tp_gap * config.tr_set.expire_k1 or \\\n","            # low[op_idx1:op_idx2].min() <= tp0 + tp_gap * config.tr_set.expire_k1:\n","                expire = 1\n","\n","    return expire, np.nanmin(touch_idx)\n","\n","\n","def expiry_p2(res_df, config, op_idx, e_j, wave1, wave_gap, np_datas, open_side):\n","    high, low = np_datas\n","    selection_id = config.selection_id\n","    expire = 0\n","\n","    if config.tr_set.expire_tick != \"None\":\n","        if e_j - op_idx >= config.tr_set.expire_tick:\n","            expire = 1\n","\n","    if config.tr_set.expire_k2 != \"None\":\n","        if open_side == OrderSide.SELL:\n","            if low[e_j] <= wave1 + wave_gap * config.tr_set.expire_k2:\n","                expire = 1\n","        else:\n","            if high[e_j] >= wave1 - wave_gap * config.tr_set.expire_k2:\n","                expire = 1\n","\n","    return expire\n","\n","\n","# def ep_loc_point2_v2(res_df, config, i, out_j, side=OrderSide.SELL):\n","#     allow_ep_in = 1\n","#     if config.selection_id in ['v5_2']:\n","#         if side == OrderSide.SELL:\n","#             dc_upper_T = res_df['dc_upper_T'].to_numpy()\n","#             dc_upper_15T = res_df['dc_upper_15T'].to_numpy()\n","#             allow_ep_in *= (dc_upper_T[i - 1] <= dc_upper_15T[i]) & \\\n","#                            (dc_upper_15T[i - 1] != dc_upper_15T[i])\n","#         else:\n","#             dc_lower_T = res_df['dc_lower_T'].to_numpy()\n","#             dc_lower_15T = res_df['dc_lower_15T'].to_numpy()\n","#             allow_ep_in *= (dc_lower_T[i - 1] >= dc_lower_15T[i]) & \\\n","#                            (dc_lower_15T[i - 1] != dc_lower_15T[i])\n","\n","#     if config.selection_id in ['v3_4']:\n","#         wick_score_list = literal_eval(config.ep_set.point2.wick_score_list)\n","#         wick_scores = [res_df['wick_score_{}'.format(s_itv)].to_numpy() for s_itv in literal_eval(config.ep_set.point2.score_itv_list)]\n","#         close = res_df['close'].to_numpy()\n","#         if side == OrderSide.SELL:\n","#             sup_T = res_df['sup_T'].to_numpy()\n","#             allow_ep_in *= close[i] < sup_T[i - 1]\n","#             if len(wick_score_list) != 0:\n","#                 allow_ep_in *= wick_scores[0][i] < -wick_score_list[0]\n","#         else:\n","#             resi_T = res_df['resi_T'].to_numpy()\n","#             allow_ep_in *= close[i] > resi_T[i - 1]\n","#             if len(wick_score_list) != 0:\n","#                 allow_ep_in *= wick_scores[0][i] > wick_score_list[0]\n","\n","#     if allow_ep_in:\n","#         out_j = i\n","#     return allow_ep_in, out_j\n","\n","\n","# vectorized calc.\n","# multi-stem 에 따라 dynamic vars.가 입력되기 때문에 class 내부 vars. 로 종속시키지 않음\n","def ep_loc_p1_v3(res_df, config, np_timeidx, show_detail=True, ep_loc_side=OrderSide.SELL):\n","    # ------- param init ------- #\n","    selection_id = config.selection_id\n","    c_i = config.trader_set.complete_index\n","    len_df = len(res_df)\n","    mr_res = np.ones(len_df)\n","    zone_arr = np.full(len_df, 'n')\n","\n","    # ------ process 한번에 처리해서 param_check 만 ver. 별로 하면 될 것 ------ #\n","    #     => public_indi() 가 될 것\n","    #     1. 사용한 param 정보와 matching 된 data 병렬로 나열 logging 될 것\n","    tp_fee, out_fee = calc_tp_out_fee_v2(config)\n","\n","    # ============ tr_thresh ============ #  # vectorize allow only for p1_hhm\n","    if config.loc_set.point1.short_tr_thresh != \"None\":  #  and not config.tr_set.check_hlm:\n","        if ep_loc_side == OrderSide.SELL:\n","            short_tr_ = res_df['short_tr_{}'.format(selection_id)].to_numpy()\n","            mr_res *= short_tr_ >= config.loc_set.point1.short_tr_thresh\n","            # mr_res *= short_tr_ <= config.loc_set.point1.short_tr_thresh + 0.1\n","            if show_detail:\n","                sys_log.warning(\n","                    \"short_tr_ >= short_tr_thresh : {:.5f} {:.5f} ({})\".format(short_tr_[c_i], config.loc_set.point1.short_tr_thresh, mr_res[c_i]))\n","        else:\n","            long_tr_ = res_df['long_tr_{}'.format(selection_id)].to_numpy()\n","            mr_res *= long_tr_ >= config.loc_set.point1.long_tr_thresh\n","            # mr_res *= long_tr_ <= config.loc_set.point1.long_tr_thresh + 0.1\n","            if show_detail:\n","                sys_log.warning(\n","                    \"long_tr_ >= long_tr_thresh : {:.5f} {:.5f} ({})\".format(long_tr_[c_i], config.loc_set.point1.long_tr_thresh, mr_res[c_i]))\n","\n","    # ============ spread - independent to tr_set ============ #  --> Todo, 사용 안하고 싶은 wave_point1\n","    if config.loc_set.point1.short_spread != \"None\":\n","        if selection_id in ['v3']:\n","            if ep_loc_side == OrderSide.SELL:\n","                bb_base_5T = res_df['bb_base_5T'].to_numpy()  # to_numpy() 는 ep_loc 에서 진행됨\n","                bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","                short_spread = (bb_base_5T - bb_lower_5T - tp_fee * bb_base_5T) / (bb_base_5T - bb_lower_5T + out_fee * bb_base_5T)\n","                mr_res *= short_spread >= config.loc_set.point1.short_spread\n","                if show_detail:\n","                    sys_log.warning(\n","                        \"short_spread >= config.loc_set.point1.short_spread : {:.5f} {:.5f} ({})\".format(short_spread[c_i], config.loc_set.point1.short_spread, mr_res[c_i]))\n","            else:\n","                bb_upper_5T = res_df['bb_upper_5T'].to_numpy()\n","                dc_lower_5T = res_df['dc_lower_5T'].to_numpy()\n","                # mr_res *= (bb_base_5T - dc_lower_5T - tp_fee * bb_upper_5T) / (bb_base_5T - dc_lower_5T + out_fee * bb_base_5T) >= config.loc_set.point1.long_spread\n","                long_spread = (bb_upper_5T - dc_lower_5T - tp_fee * bb_upper_5T) / (bb_upper_5T - dc_lower_5T + out_fee * bb_upper_5T)\n","                mr_res *= long_spread >= config.loc_set.point1.long_spread\n","                if show_detail:\n","                    sys_log.warning(\n","                        \"long_spread >= config.loc_set.point1.long_spread : {:.5f} {:.5f} ({})\".format(long_spread[c_i], config.loc_set.point1.long_spread, mr_res[c_i]))                  \n","\n","    # ============ point1 ratios ============ #\n","    # ------ wave_range_ratio ------ #    \n","    if config.loc_set.point1.wrr_10 != \"None\":   # for excessive range rejection         \n","      wave_itv1 = config.tr_set.wave_itv1\n","      wave_period1 = config.tr_set.wave_period1\n","      co_wrr_10_ = res_df['co_wrr_10_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      cu_wrr_10_ = res_df['cu_wrr_10_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= cu_wrr_10_ <= config.loc_set.point1.wrr_10\n","        # mr_res *= cu_wrr_10_ >= config.loc_set.point1.wrr_10\n","        if show_detail:\n","            sys_log.warning(\"cu_wrr_10_ <= config.loc_set.point1.wrr_10 : {:.5f} {:.5f} ({})\".format(cu_wrr_10_[c_i], config.loc_set.point1.wrr_10, mr_res[c_i]))\n","      else:\n","        mr_res *= co_wrr_10_ <= config.loc_set.point1.wrr_10\n","        # mr_res *= co_wrr_10_ >= config.loc_set.point1.wrr_10\n","        if show_detail:\n","            sys_log.warning(\"co_wrr_10_ <= config.loc_set.point1.wrr_10 : {:.5f} {:.5f} ({})\".format(co_wrr_10_[c_i], config.loc_set.point1.wrr_10, mr_res[c_i]))\n","\n","    if config.loc_set.point1.wrr_21 != \"None\":   # for excessive range rejection         \n","      wave_itv1 = config.tr_set.wave_itv1\n","      wave_period1 = config.tr_set.wave_period1\n","      co_wrr_21_ = res_df['co_wrr_21_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      cu_wrr_21_ = res_df['cu_wrr_21_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= cu_wrr_21_ <= config.loc_set.point1.wrr_21\n","        # mr_res *= cu_wrr_21_ >= config.loc_set.point1.wrr_21\n","        if show_detail:\n","            sys_log.warning(\"cu_wrr_21_ <= config.loc_set.point1.wrr_21 : {:.5f} {:.5f} ({})\".format(cu_wrr_21_[c_i], config.loc_set.point1.wrr_21, mr_res[c_i]))\n","      else:\n","        mr_res *= co_wrr_21_ <= config.loc_set.point1.wrr_21\n","        # mr_res *= co_wrr_21_ >= config.loc_set.point1.wrr_21\n","        if show_detail:\n","            sys_log.warning(\"co_wrr_21_ <= config.loc_set.point1.wrr_21 : {:.5f} {:.5f} ({})\".format(co_wrr_21_[c_i], config.loc_set.point1.wrr_21, mr_res[c_i]))\n","\n","    if config.loc_set.point1.wrr_32 != \"None\":            \n","      wave_itv1 = config.tr_set.wave_itv1\n","      wave_period1 = config.tr_set.wave_period1\n","      co_wrr_32_ = res_df['co_wrr_32_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      cu_wrr_32_ = res_df['cu_wrr_32_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= cu_wrr_32_ <= config.loc_set.point1.wrr_32 #+ 0.1  # 0.1 0.05\n","        # mr_res *= (cu_wrr_32_ >= config.loc_set.point1.wrr_32) # & (cu_wrr_32_ <= 1)\n","        # mr_res *= cu_wrr_32_ >= config.loc_set.point1.wrr_32 - 0.1\n","        if show_detail:\n","            sys_log.warning(\"cu_wrr_32_ <= config.loc_set.point1.wrr_32 : {:.5f} {:.5f} ({})\".format(cu_wrr_32_[c_i], config.loc_set.point1.wrr_32, mr_res[c_i]))\n","      else:\n","        mr_res *= co_wrr_32_ <= config.loc_set.point1.wrr_32 #+ 0.1  # 0.1 0.05\n","        # mr_res *= (co_wrr_32_ >= config.loc_set.point1.wrr_32) # & (co_wrr_32_ <= 1)\n","        # mr_res *= co_wrr_32_ >= config.loc_set.point1.wrr_32 - 0.1\n","        if show_detail:\n","            sys_log.warning(\"co_wrr_32_ <= config.loc_set.point1.wrr_32 : {:.5f} {:.5f} ({})\".format(co_wrr_32_[c_i], config.loc_set.point1.wrr_32, mr_res[c_i]))\n","\n","    # ------ enough_space - Todo, future_data ------ #\n","    if config.loc_set.point1.co_es != \"None\":      \n","      itv, period1 = config.tr_set.p1_itv1, config.tr_set.p1_period1 \n","      b1_cu_es_ = res_df['b1_cu_es_{}{}'.format(itv, period1)].to_numpy()\n","      b1_co_es_ = res_df['b1_co_es_{}{}'.format(itv, period1)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= b1_co_es_ >= config.loc_set.point1.co_es\n","        mr_res *= b1_co_es_ <= config.loc_set.point1.co_es + 2\n","        if show_detail:\n","            sys_log.warning(\"b1_co_es_ >= config.loc_set.point1.co_es : {:.5f} {:.5f} ({})\".format(b1_co_es_[c_i], config.loc_set.point1.co_es, mr_res[c_i]))\n","      else:\n","        mr_res *= b1_cu_es_ >= config.loc_set.point1.cu_es\n","        mr_res *= b1_cu_es_ <= config.loc_set.point1.cu_es + 1\n","        if show_detail:\n","            sys_log.warning(\"b1_cu_es_ >= config.loc_set.point1.cu_es : {:.5f} {:.5f} ({})\".format(b1_cu_es_[c_i], config.loc_set.point1.cu_es, mr_res[c_i]))\n","\n","    # ------------ wick_ratio - Todo, future_data ------------ #\n","    # if config.loc_set.point1.short_wick_ratio != \"None\":\n","    #   b1_upper_wick_ratio_ = res_df['b1_upper_wick_ratio_{}'.format(config.loc_set.point1.wick_itv)].to_numpy()\n","    #   b1_lower_wick_ratio_ = res_df['b1_lower_wick_ratio_{}'.format(config.loc_set.point1.wick_itv)].to_numpy()      \n","    #   if ep_loc_side == OrderSide.SELL:\n","    #       # mr_res *= b1_upper_wick_ratio_ >= config.loc_set.point1.short_wick_ratio\n","    #       mr_res *= b1_lower_wick_ratio_ >= config.loc_set.point1.short_wick_ratio\n","    #       if show_detail:\n","    #           sys_log.warning(\"b1_lower_wick_ratio_ >= config.loc_set.point1.short_wick_ratio : {:.5f} {:.5f} ({})\".format(b1_lower_wick_ratio_[c_i], config.loc_set.point1.short_wick_ratio, mr_res[c_i]))\n","    #   else:\n","    #       # mr_res *= b1_lower_wick_ratio_ >= config.loc_set.point1.long_wick_ratio\n","    #       mr_res *= b1_upper_wick_ratio_ >= config.loc_set.point1.long_wick_ratio\n","    #       if show_detail:\n","    #           sys_log.warning(\"b1_upper_wick_ratio_ >= config.loc_set.point1.long_wick_ratio : {:.5f} {:.5f} ({})\".format(b1_upper_wick_ratio_[c_i], config.loc_set.point1.long_wick_ratio, mr_res[c_i]))\n","\n","    # ------ candle_range_ratio - Todo, future_data ------ #\n","    # if config.loc_set.point1.crr != \"None\":   \n","    #   tf_entry = to_itvnum(config.loc_set.point1.tf_entry)\n","    #   b1_crr_ = res_df['crr_{}'.format(config.loc_set.point1.tf_entry)].shift(tf_entry).to_numpy()\n","    #   mr_res *= b1_crr_ >= config.loc_set.point1.crr\n","    #   if show_detail:\n","    #       sys_log.warning(\"b1_crr_ >= config.loc_set.point1.crr : {:.5f} {:.5f} ({})\".format(b1_crr_[c_i], config.loc_set.point1.crr, mr_res[c_i]))\n","    \n","    # ------ dc_over_body_ratio ------ #\n","    if config.loc_set.point1.dbr != \"None\":\n","      b1_lwdbr = res_df['b1_lwdbr'].to_numpy()\n","      b1_updbr = res_df['b1_updbr'].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:        \n","        mr_res *= b1_lwdbr >= config.loc_set.point1.dbr\n","        if show_detail:\n","            sys_log.warning(\n","                \"b1_lwdbr >= config.loc_set.point1.dbr : {:.5f} {:.5f} ({})\".format(b1_lwdbr[c_i], config.loc_set.point1.dbr, mr_res[c_i]))\n","      else:\n","        mr_res *= b1_updbr >= config.loc_set.point1.dbr\n","        if show_detail:\n","            sys_log.warning(\n","                \"b1_updbr >= config.loc_set.point1.dbr : {:.5f} {:.5f} ({})\".format(b1_updbr[c_i], config.loc_set.point1.dbr, mr_res[c_i]))\n","            \n","    if config.loc_set.point1.dbr2 != \"None\":\n","      b1_lwdbr = res_df['b1_lwdbr'].to_numpy()\n","      b1_updbr = res_df['b1_updbr'].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:    \n","        mr_res *= b1_updbr >= config.loc_set.point1.dbr2\n","        if show_detail:\n","            sys_log.warning(\n","                \"b1_updbr >= config.loc_set.point1.dbr2 : {:.5f} {:.5f} ({})\".format(b1_updbr[c_i], config.loc_set.point1.dbr2, mr_res[c_i]))\n","      else:\n","        mr_res *= b1_lwdbr >= config.loc_set.point1.dbr2\n","        if show_detail:\n","            sys_log.warning(\n","                \"b1_lwdbr >= config.loc_set.point1.dbr2 : {:.5f} {:.5f} ({})\".format(b1_lwdbr[c_i], config.loc_set.point1.dbr2, mr_res[c_i]))\n","\n","    # ------ wick_body_ratio ------ #\n","    if config.loc_set.point1.wbr != \"None\":\n","        wave_body_ratio = res_df['wave_body_ratio'].to_numpy()\n","        mr_res *= wave_body_ratio >= config.loc_set.point1.wbr\n","        if show_detail:\n","            sys_log.warning(\n","                \"wave_body_ratio >= config.loc_set.point1.wbr : {:.5f} {:.5f} ({})\".format(wave_body_ratio[c_i], config.loc_set.point1.wbr, mr_res[c_i]))\n","            \n","    # ------ body_rel_ratio ------ #\n","    if config.loc_set.point1.brr != \"None\":\n","        body_rel_ratio_ = res_df['body_rel_ratio_{}'.format(config.loc_set.point1.tf_entry)].to_numpy()\n","        mr_res *= body_rel_ratio_ <= config.loc_set.point1.brr\n","        if show_detail:\n","            sys_log.warning(\n","                \"body_rel_ratio_ <= config.loc_set.point1.brr : {:.5f} {:.5f} ({})\".format(body_rel_ratio_[c_i], config.loc_set.point1.brr, mr_res[c_i]))\n","\n","    # ------ pumping_ratio ------ #\n","    if config.loc_set.point1.ppr != \"None\":\n","      if ep_loc_side == OrderSide.SELL:\n","        short_ppr_ = res_df['short_ppr_{}'.format(selection_id)].to_numpy()\n","        mr_res *= short_ppr_ >= config.loc_set.point1.ppr\n","        if show_detail:\n","            sys_log.warning(\"short_ppr_ >= config.loc_set.point1.ppr : {:.5f} {:.5f} ({})\".format(short_ppr_[c_i], config.loc_set.point1.ppr, mr_res[c_i]))\n","      else:\n","        long_ppr_ = res_df['long_ppr_{}'.format(selection_id)].to_numpy()\n","        mr_res *= long_ppr_ >= config.loc_set.point1.ppr\n","        if show_detail:\n","            sys_log.warning(\"long_ppr_ >= config.loc_set.point1.ppr : {:.5f} {:.5f} ({})\".format(long_ppr_[c_i], config.loc_set.point1.ppr, mr_res[c_i]))\n"," \n","    # ============ rtc_zone  ============ #  --> Todo, 사용 안하고 싶은 wave_dur., 추후 zone 으로 옮길 것\n","    # ------ dtk ------ #\n","    if config.loc_set.zone1.dt_k != \"None\":\n","        # ------ dc_v2 ------ #\n","        dc_lower_v2 = res_df['dc_lower_v2'.format(selection_id)].to_numpy()\n","        short_dtk_1_ = res_df['short_dtk_1_{}'.format(selection_id)].to_numpy() - \\\n","                       res_df['short_dtk_gap_{}'.format(selection_id)].to_numpy() * config.loc_set.zone1.dt_k\n","        dc_upper_v2 = res_df['dc_upper_v2'.format(selection_id)].to_numpy()\n","        long_dtk_1_ = res_df['long_dtk_1_{}'.format(selection_id)].to_numpy() + \\\n","                      res_df['long_dtk_gap_{}'.format(selection_id)].to_numpy() * config.loc_set.zone1.dt_k\n","        if ep_loc_side == OrderSide.SELL:\n","            mr_res *= dc_lower_v2 >= short_dtk_1_\n","            if show_detail:\n","                sys_log.warning(\n","                    \"dc_lower_v2 >= short_dtk_1_ : {:.5f} {:.5f} ({})\".format(dc_lower_v2[c_i], short_dtk_1_[c_i], mr_res[c_i]))\n","        else:\n","            mr_res *= dc_upper_v2 <= long_dtk_1_\n","            if show_detail:\n","                sys_log.warning(\n","                    \"dc_upper_v2 <= long_dtk_1_ : {:.5f} {:.5f} ({})\".format(dc_upper_v2[c_i], long_dtk_1_[c_i], mr_res[c_i]))\n","                \n","    # ============ zone ============ #\n","    # ------ config var. 이 등록되지 않은 dur. 은 selection_id 으로 조건문을 나눔 (lvrg_set 과 동일) ------ #\n","    if config.loc_set.zone1.use_zone:\n","\n","      # ------------ 추세선 리스트 on_price ------------ #\n","      wave_itv1 = config.tr_set.wave_itv1\n","      wave_period1 = config.tr_set.wave_period1      \n","      \n","      wave_high_fill1_ = res_df['wave_high_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      wave_low_fill1_ = res_df['wave_low_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","        # ------ ma ------ #\n","      # ma_period = 60\n","      # # res_df = ma(res_df, ma_period)       \n","      # ma_ = res_df['ma_T{}'.format(ma_period)].to_numpy()\n","\n","      # if ep_loc_side == OrderSide.SELL:\n","      #   mr_res *= wave_high_fill1_ < ma_\n","      #   if show_detail:\n","      #     sys_log.warning(\"wave_high_fill1_ < ma_ : {:.5f} {:.5f} ({})\".format(wave_high_fill1_[c_i], ma_[c_i], mr_res[c_i]))\n","      # else:\n","      #   mr_res *= wave_low_fill1_ > ma_\n","      #   if show_detail:\n","      #     sys_log.warning(\"wave_low_fill1_ > ma_ : {:.5f} {:.5f} ({})\".format(wave_low_fill1_[c_i], ma_[c_i], mr_res[c_i]))\n","        \n","        # ------ dc_base ------ #      \n","      # dc_base_ = res_df['dc_base_T30'].to_numpy()\n","\n","      # if ep_loc_side == OrderSide.SELL:\n","      #   mr_res *= wave_high_fill1_ < dc_base_\n","      #   if show_detail:\n","      #     sys_log.warning(\"wave_high_fill1_ < dc_base_ : {:.5f} {:.5f} ({})\".format(wave_high_fill1_[c_i], dc_base_[c_i], mr_res[c_i]))\n","      # else:\n","      #   mr_res *= wave_low_fill1_ > dc_base_\n","      #   if show_detail:\n","      #     sys_log.warning(\"wave_low_fill1_ > dc_base_ : {:.5f} {:.5f} ({})\".format(wave_low_fill1_[c_i], dc_base_[c_i], mr_res[c_i]))    \n","\n","      dc_base_T20 = res_df['dc_base_T20'].to_numpy()\n","      dc_base_5T20 = res_df['dc_base_5T20'].to_numpy()\n","      dc_base_15T20 = res_df['dc_base_15T20'].to_numpy()\n","\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= dc_base_T20 < dc_base_5T20\n","        if show_detail:\n","          sys_log.warning(\"dc_base_T20 < dc_base_5T20 : {:.5f} {:.5f} ({})\".format(dc_base_T20[c_i], dc_base_5T20[c_i], mr_res[c_i]))\n","      else:\n","        mr_res *= dc_base_T20 > dc_base_5T20\n","        if show_detail:\n","          sys_log.warning(\"dc_base_T20 > dc_base_5T20 : {:.5f} {:.5f} ({})\".format(dc_base_T20[c_i], dc_base_5T20[c_i], mr_res[c_i]))  \n","          \n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= dc_base_5T20 < dc_base_15T20\n","        if show_detail:\n","          sys_log.warning(\"dc_base_5T20 < dc_base_15T20 : {:.5f} {:.5f} ({})\".format(dc_base_5T20[c_i], dc_base_15T20[c_i], mr_res[c_i]))\n","      else:\n","        mr_res *= dc_base_5T20 > dc_base_15T20\n","        if show_detail: \n","          sys_log.warning(\"dc_base_5T20 > dc_base_15T20 : {:.5f} {:.5f} ({})\".format(dc_base_5T20[c_i], dc_base_15T20[c_i], mr_res[c_i]))  \n","      \n","      # ------------ out_price ------------ #\n","        # ------ macd ------ #\n","      # # macd_ = res_df['macd_T535'].to_numpy()\n","      # macd_ = res_df['macd_hist_T53515'].to_numpy()\n","\n","      # if ep_loc_side == OrderSide.SELL:\n","      #   mr_res *= macd_ < 0\n","      #   if show_detail:\n","      #     sys_log.warning(\"macd_ < 0 : {:.5f} {:.5f} ({})\".format(macd_[c_i], 0, mr_res[c_i]))\n","      # else:\n","      #   mr_res *= macd_ > 0\n","      #   if show_detail:\n","      #     sys_log.warning(\"macd_ > 0 : {:.5f} {:.5f} ({})\".format(macd_[c_i], 0, mr_res[c_i]))\n","\n","      # ------ bb_base uptrend ------ #\n","      # bb_base_T100 = res_df['bb_base_T100'].to_numpy()\n","      # b1_bb_base_T100 = res_df['bb_base_T100'].shift(1).to_numpy()\n","\n","      # lb_period = config.loc_set.zone1.bb_trend_period\n","      # bb_base_downtrend = pd.Series(b1_bb_base_T100 < bb_base_T100).rolling(lb_period).sum().to_numpy() == 0\n","      # bb_base_uptrend = pd.Series(b1_bb_base_T100 > bb_base_T100).rolling(lb_period).sum().to_numpy() == 0\n","\n","      # if ep_loc_side == OrderSide.SELL:\n","      #   mr_res *= bb_base_downtrend\n","      #   if show_detail:\n","      #       sys_log.warning(\"bb_base_downtrend : {:.5f} ({})\".format(bb_base_downtrend[c_i], mr_res[c_i]))       \n","      # else:\n","      #   mr_res *= bb_base_uptrend\n","      #   if show_detail:\n","      #       sys_log.warning(\"bb_base_uptrend : {:.5f} ({})\".format(bb_base_uptrend[c_i], mr_res[c_i]))    \n","\n","    # -------------- zoned tr_set - post_work -------------- #\n","    if config.tr_set.c_ep_gap != \"None\" or config.tr_set.t_out_gap != \"None\":\n","        #       by zone_dtk       #\n","        #         c_zone        #\n","        zone_dc_upper_v2_ = res_df['zone_dc_upper_v2'.format(selection_id)].to_numpy()\n","        long_dtk_plot_1 = res_df['long_dtk_plot_1'].to_numpy() + res_df['long_dtk_plot_gap'].to_numpy() * config.loc_set.zone1.zone_dt_k\n","        zone_dc_lower_v2_ = res_df['zone_dc_lower_v2'.format(selection_id)].to_numpy()\n","        short_dtk_plot_1 = res_df['short_dtk_plot_1'].to_numpy() - res_df['short_dtk_plot_gap'].to_numpy() * config.loc_set.zone1.zone_dt_k\n","        if ep_loc_side == OrderSide.SELL:\n","            zone_res = zone_dc_upper_v2_ > long_dtk_plot_1  # mr_res 와는 별개임\n","            pos = 'short'\n","        else:\n","            zone_res = zone_dc_lower_v2_ < short_dtk_plot_1\n","            pos = 'long'\n","\n","        # static 여부에 따른 vectorized adj. - dynamic 은 vectorize 불가\n","        if config.ep_set.static_ep and config.tr_set.c_ep_gap != \"None\":\n","            res_df['{}_ep_{}'.format(pos, selection_id)][zone_res] = res_df['{}_ep2_{}'.format(pos, selection_id)][zone_res]\n","        if config.out_set.static_out and config.tr_set.t_out_gap != \"None\":\n","            res_df['{}_out_{}'.format(pos, selection_id)][~zone_res] = res_df['{}_out2_{}'.format(pos, selection_id)][\n","                ~zone_res]  # t_zone 에 대한 out2 setting\n","        zone_arr = np.where(zone_res == 1, 'c', 't')\n","\n","    return mr_res, zone_arr  # mr_res 의 True idx 가 open signal\n","\n","\n","def ep_loc_p2_v3(res_df, config, np_timeidx, show_detail=True, ep_loc_side=OrderSide.SELL):\n","    # ------- param init ------- #\n","    selection_id = config.selection_id\n","    c_i = config.trader_set.complete_index\n","    len_df = len(res_df)\n","    mr_res = np.ones(len_df)\n","    zone_arr = np.full(len_df, 'n')\n","\n","    # ------ process 한번에 처리해서 param_check 만 ver. 별로 하면 될 것 ------ #\n","    #     => public_indi() 가 될 것\n","    #     1. 사용한 param 정보와 matching 된 data 병렬로 나열 logging 될 것\n","    # tp_fee, out_fee = calc_tp_out_fee_v2(config)\n","\n","    # ============ point1 ratios ============ #\n","    # ------ wave_range_ratio ------ #\n","    # if config.loc_set.point2.cu_wrr_21 != \"None\":   # for excessive range rejection         \n","    #   wave_itv1 = config.tr_set.wave_itv1\n","    #   wave_period1 = config.tr_set.wave_period1\n","    #   co_wrr_21_ = res_df['co_wrr_21_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    #   cu_wrr_21_ = res_df['cu_wrr_21_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    #   if ep_loc_side == OrderSide.SELL:\n","    #     mr_res *= cu_wrr_21_ <= config.loc_set.point2.cu_wrr_21\n","    #     mr_res *= cu_wrr_21_ >= config.loc_set.point2.cu_wrr_21 - 0.2\n","    #     if show_detail:\n","    #         sys_log.warning(\"cu_wrr_21_ <= config.loc_set.point2.cu_wrr_21 : {:.5f} {:.5f} ({})\".format(cu_wrr_21_[c_i], config.loc_set.point2.cu_wrr_21, mr_res[c_i]))\n","    #   else:\n","    #     mr_res *= co_wrr_21_ <= config.loc_set.point2.co_wrr_21\n","    #     mr_res *= co_wrr_21_ >= config.loc_set.point2.co_wrr_21 - 0.2\n","    #     if show_detail:\n","    #         sys_log.warning(\"co_wrr_21_ <= config.loc_set.point2.co_wrr_21 : {:.5f} {:.5f} ({})\".format(co_wrr_21_[c_i], config.loc_set.point2.co_wrr_21, mr_res[c_i]))\n","\n","    if config.loc_set.point2.wrr_32 != \"None\":            \n","      wave_itv2 = config.tr_set.wave_itv2\n","      wave_period2 = config.tr_set.wave_period2\n","      co_wrr_32_ = res_df['co_wrr_32_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","      cu_wrr_32_ = res_df['cu_wrr_32_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= cu_wrr_32_ <= config.loc_set.point2.wrr_32  #  + 0.1  # 0.1 0.05\n","        # mr_res *= cu_wrr_32_ >= config.loc_set.point2.wrr_32\n","        if show_detail:\n","            sys_log.warning(\"cu_wrr_32_ <= config.loc_set.point2.wrr_32 : {:.5f} {:.5f} ({})\".format(cu_wrr_32_[c_i], config.loc_set.point2.wrr_32, mr_res[c_i]))\n","      else:\n","        mr_res *= co_wrr_32_ <= config.loc_set.point2.wrr_32  #  + 0.1  # 0.1 0.05\n","        # mr_res *= co_wrr_32_ >= config.loc_set.point2.wrr_32\n","        if show_detail:\n","            sys_log.warning(\"co_wrr_32_ <= config.loc_set.point2.wrr_32 : {:.5f} {:.5f} ({})\".format(co_wrr_32_[c_i], config.loc_set.point2.wrr_32, mr_res[c_i]))\n","\n","    if config.loc_set.point2.csd_period != \"None\":\n","      wave_itv2 = config.tr_set.wave_itv2\n","      csd_period = config.loc_set.point2.csd_period\n","      \n","      res_df = dc_line_v4(res_df, res_df, dc_period=csd_period)\n","      dc_upper_ = res_df['dc_upper_{}{}'.format(wave_itv2, csd_period)].to_numpy()    \n","      dc_lower_ = res_df['dc_lower_{}{}'.format(wave_itv2, csd_period)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        csdbox = res_df['short_tp_1_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * config.loc_set.point2.csdbox_range\n","        mr_res *= dc_upper_ <= csdbox\n","        if show_detail:\n","            sys_log.warning(\"dc_upper_ <= csdbox : {:.5f} {:.5f} ({})\".format(dc_upper_[c_i], csdbox[c_i], mr_res[c_i]))\n","      else:\n","        csdbox = res_df['long_tp_1_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * config.loc_set.point2.csdbox_range\n","        mr_res *= dc_lower_ >= csdbox\n","        if show_detail:\n","            sys_log.warning(\"dc_lower_ >= csdbox : {:.5f} {:.5f} ({})\".format(dc_lower_[c_i], csdbox[c_i], mr_res[c_i]))\n","\n","    # ============ zone ============ #    \n","    # ------------ 추세선 리스트 on_price ------------ #\n","    if config.loc_set.zone2.use_zone:\n","      wave_itv1 = config.tr_set.wave_itv1\n","      wave_period1 = config.tr_set.wave_period1      \n","      \n","      wave_high_fill1_ = res_df['wave_high_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      wave_low_fill1_ = res_df['wave_low_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","      dc_base_T20 = res_df['dc_base_T20'].to_numpy()\n","      dc_base_5T20 = res_df['dc_base_5T20'].to_numpy()\n","      dc_base_15T20 = res_df['dc_base_15T20'].to_numpy()\n","      dc_base_H20 = res_df['dc_base_H20'].to_numpy()\n","      dc_base_4H20 = res_df['dc_base_4H20'].to_numpy()\n","\n","        # ------ ma ------ #\n","      # ma_period = 60\n","      # # res_df = ma(res_df, ma_period)       \n","      # ma_ = res_df['ma_T{}'.format(ma_period)].to_numpy()\n","\n","      # if ep_loc_side == OrderSide.SELL:\n","      #   mr_res *= wave_high_fill1_ < ma_\n","      #   if show_detail:\n","      #     sys_log.warning(\"wave_high_fill1_ < ma_ : {:.5f} {:.5f} ({})\".format(wave_high_fill1_[c_i], ma_[c_i], mr_res[c_i]))\n","      # else:\n","      #   mr_res *= wave_low_fill1_ > ma_\n","      #   if show_detail:\n","      #     sys_log.warning(\"wave_low_fill1_ > ma_ : {:.5f} {:.5f} ({})\".format(wave_low_fill1_[c_i], ma_[c_i], mr_res[c_i]))\n","        \n","        # ------ out0 & dcbase ------ #      \n","      if ep_loc_side == OrderSide.SELL:\n","        # mr_res *= wave_high_fill1_ < dc_base_5T20\n","        mr_res *= wave_high_fill1_ < dc_base_H20\n","        if show_detail:\n","          # sys_log.warning(\"wave_high_fill1_ < dc_base_5T20 : {:.5f} {:.5f} ({})\".format(wave_high_fill1_[c_i], dc_base_5T20[c_i], mr_res[c_i]))\n","          sys_log.warning(\"wave_high_fill1_ < dc_base_H20 : {:.5f} {:.5f} ({})\".format(wave_high_fill1_[c_i], dc_base_H20[c_i], mr_res[c_i]))\n","      else:\n","        # mr_res *= wave_low_fill1_ > dc_base_5T20\n","        mr_res *= wave_low_fill1_ > dc_base_H20\n","        if show_detail:\n","          # sys_log.warning(\"wave_low_fill1_ > dc_base_5T20 : {:.5f} {:.5f} ({})\".format(wave_low_fill1_[c_i], dc_base_5T20[c_i], mr_res[c_i]))\n","          sys_log.warning(\"wave_low_fill1_ > dc_base_H20 : {:.5f} {:.5f} ({})\".format(wave_low_fill1_[c_i], dc_base_H20[c_i], mr_res[c_i]))\n","\n","        # ------ dcbase ------ #\n","      if ep_loc_side == OrderSide.SELL:\n","        # mr_res *= dc_base_T20 < dc_base_5T20\n","      #   mr_res *= dc_base_5T20 < dc_base_15T20\n","        mr_res *= dc_base_15T20 < dc_base_H20\n","        if show_detail:\n","      #     sys_log.warning(\"dc_base_T20 < dc_base_5T20 : {:.5f} {:.5f} ({})\".format(dc_base_T20[c_i], dc_base_5T20[c_i], mr_res[c_i]))\n","      #     sys_log.warning(\"dc_base_5T20 < dc_base_15T20 : {:.5f} {:.5f} ({})\".format(dc_base_5T20[c_i], dc_base_15T20[c_i], mr_res[c_i]))\n","          sys_log.warning(\"dc_base_5T20 < dc_base_H20 : {:.5f} {:.5f} ({})\".format(dc_base_5T20[c_i], dc_base_H20[c_i], mr_res[c_i]))\n","      else:\n","      #   mr_res *= dc_base_T20 > dc_base_5T20\n","      #   mr_res *= dc_base_5T20 > dc_base_15T20\n","        mr_res *= dc_base_15T20 > dc_base_H20\n","        if show_detail:\n","      #     sys_log.warning(\"dc_base_T20 > dc_base_5T20 : {:.5f} {:.5f} ({})\".format(dc_base_T20[c_i], dc_base_5T20[c_i], mr_res[c_i]))  \n","      #     sys_log.warning(\"dc_base_5T20 > dc_base_15T20 : {:.5f} {:.5f} ({})\".format(dc_base_5T20[c_i], dc_base_15T20[c_i], mr_res[c_i]))\n","          sys_log.warning(\"dc_base_5T20 > dc_base_H20 : {:.5f} {:.5f} ({})\".format(dc_base_5T20[c_i], dc_base_H20[c_i], mr_res[c_i]))\n","      \n","\n","\n","    return mr_res, zone_arr  # mr_res 의 True idx 가 open signal"]},{"cell_type":"markdown","metadata":{"id":"EQ63Jwpvr7qA"},"source":["#### legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"csZwxsP5r_Pz"},"outputs":[],"source":["      \n","    # ------ hl_loc_pct ------ #\n","    if config.loc_set.zone.hl_loc_pct != \"None\":      \n","      wave_high_loc_pct_ = res_df['wave_high_loc_pct_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      wave_low_loc_pct_ = res_df['wave_low_loc_pct_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= wave_high_loc_pct_ >= config.loc_set.zone.hl_loc_pct\n","        mr_res *= wave_high_loc_pct_ <= config.loc_set.zone.hl_loc_pct + 0.5\n","        if show_detail:\n","            sys_log.warning(\"wave_high_loc_pct_ >= config.loc_set.zone.hl_loc_pct : {:.5f} {:.5f} ({})\".format(wave_high_loc_pct_[c_i], config.loc_set.zone.hl_loc_pct, mr_res[c_i]))\n","      else:\n","        mr_res *= wave_low_loc_pct_ >= config.loc_set.zone.hl_loc_pct\n","        mr_res *= wave_low_loc_pct_ <= config.loc_set.zone.hl_loc_pct + 0.5\n","        if show_detail:\n","            sys_log.warning(\"wave_low_loc_pct_ >= config.loc_set.zone.hl_loc_pct : {:.5f} {:.5f} ({})\".format(wave_low_loc_pct_[c_i], config.loc_set.zone.hl_loc_pct, mr_res[c_i]))\n","\n","            \n","        # ------------------ wave_biaser (sr_confirmer) ------------------ #\n","        if selection_id in ['3_9']:     \n","          itv, period1, period2 = config.tr_set.p1_itv1, config.tr_set.p1_period1, config.tr_set.p1_period2          \n","\n","          if ep_loc_side == OrderSide.SELL:\n","            short_wave_high_ = res_df['short_wave_high_{}{}{}'.format(itv, period1, period2)]\n","            bb_lower_5T_amax = get_line(res_df['short_wave_high_idx_{}{}{}'.format(itv, period1, period2)].to_numpy(), res_df['bb_lower_5T'].to_numpy())\n","            mr_res *= short_wave_high_ <= bb_lower_5T_amax\n","            if show_detail:\n","                sys_log.warning(\"short_wave_high_ <= bb_lower_5T_amax : {:.5f} {:.5f} ({})\".format(short_wave_high_[c_i], bb_lower_5T_amax[c_i], mr_res[c_i]))\n","          else:\n","            long_wave_low_ = res_df['long_wave_low_{}{}{}'.format(itv, period1, period2)]\n","            bb_upper_5T_amax = get_line(res_df['long_wave_low_idx_{}{}{}'.format(itv, period1, period2)].to_numpy(), res_df['bb_upper_5T'].to_numpy())\n","            mr_res *= long_wave_low_ >= bb_upper_5T_amax\n","            if show_detail:\n","                sys_log.warning(\"long_wave_low_ >= bb_upper_5T_amax : {:.5f} {:.5f} ({})\".format(long_wave_low_[c_i], bb_upper_5T_amax[c_i], mr_res[c_i]))\n","\n","\n","        if selection_id in ['4_3', '3_5', '3_51']:\n","            dc_base_T20 = res_df['dc_base_T20'].to_numpy()\n","            dc_base_3T20 = res_df['dc_base_3T20'].to_numpy()\n","            # b1_dc_base_3T20 = res_df['dc_base_3T20'].shift(3).to_numpy()\n","            # dc_base_5T = res_df['dc_base_5T'].to_numpy()\n","            # dc_base_15T = res_df['dc_base_15T'].to_numpy()\n","            # dc_base_30T = res_df['dc_base_30T'].to_numpy()\n","            dc_base_H20 = res_df['dc_base_H20'].to_numpy()\n","            # dc_base_4H = res_df['dc_base_4H'].to_numpy()\n","            # dc_base_D = res_df['dc_base_D'].to_numpy()\n","\n","            itv, period1, period2 = config.tr_set.p1_itv1, config.tr_set.p1_period1, config.tr_set.p1_period2\n","            if ep_loc_side == OrderSide.SELL:\n","                # ------ short_base_ <= dc_base_3T20 ------ #\n","                short_base_ = res_df['short_base_{}{}{}'.format(itv, period1, period2)].to_numpy()\n","                mr_res *= short_base_ <= dc_base_3T20\n","                if show_detail:\n","                    sys_log.warning(\"short_base_ <= dc_base_3T20 : {:.5f} {:.5f} ({})\".format(short_base_[c_i], dc_base_3T20[c_i], mr_res[c_i]))\n","\n","                # mr_res *= short_base_ <= dc_base_T20\n","                # if show_detail:\n","                #     sys_log.warning(\"short_base_ <= dc_base_T20 : {:.5f} {:.5f} ({})\".format(short_base_[c_i], dc_base_T20[c_i], mr_res[c_i]))\n","\n","                # ------ reject csd ------ #\n","                # dc_upper_ = res_df['dc_upper_{}{}'.format(itv, period1)].to_numpy()\n","                # mr_res *= dc_upper_ <= dc_base_3T\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_upper_ <= dc_base_3T20 : {:.5f} {:.5f} ({})\".format(dc_upper_[c_i], dc_base_3T[c_i], mr_res[c_i]))\n","\n","                # Todo, 부호 조심\n","                # dc_upper2_ = res_df['dc_upper_{}{}'.format(itv, period2)].to_numpy()\n","                # mr_res *= dc_upper2_ >= dc_base_H\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_upper2_ >= dc_base_H20 : {:.5f} {:.5f} ({})\".format(dc_upper2_[c_i], dc_base_H[c_i], mr_res[c_i]))  \n","\n","                # long 과 동일한 dur.\n","                dc_lower2_ = res_df['dc_lower_{}{}'.format(itv, period2)].to_numpy()\n","                mr_res *= dc_lower2_ >= dc_base_H20\n","                if show_detail:\n","                    sys_log.warning(\"dc_lower2_ >= dc_base_H20 : {:.5f} {:.5f} ({})\".format(dc_lower2_[c_i], dc_base_H20[c_i], mr_res[c_i]))  \n","\n","                # ------ consecutive base ascender ------ #\n","                # ------ 1. roll_min ------ #\n","                dc_base_3T20_rollmin = res_df['dc_base_3T20'].rolling(config.loc_set.zone.base_roll_period).min().to_numpy()\n","                mr_res *= dc_base_3T20_rollmin == dc_base_3T20\n","                if show_detail:\n","                    sys_log.warning(\n","                        \"dc_base_3T20_rollmin == dc_base_3T2020 : {:.5f} {:.5f} ({})\".format(dc_base_3T20_rollmin[c_i], dc_base_3T20[c_i], mr_res[c_i]))\n","            else:\n","                # ------ long_base >= dc_base_3T20 ------ #\n","                long_base_ = res_df['long_base_{}{}{}'.format(itv, period1, period2)].to_numpy()\n","                mr_res *= long_base_ >= dc_base_3T20\n","                if show_detail:\n","                    sys_log.warning(\"long_base_ >= dc_base_3T20 : {:.5f} {:.5f} ({})\".format(long_base_[c_i], dc_base_3T20[c_i], mr_res[c_i]))\n","\n","                # mr_res *= long_base_ >= dc_base_T20\n","                # if show_detail:\n","                #     sys_log.warning(\"long_base_ >= dc_base_T20 : {:.5f} {:.5f} ({})\".format(long_base_[c_i], dc_base_T20[c_i], mr_res[c_i]))\n","\n","                # ------ reject csd ------ #\n","                # dc_lower_ = res_df['dc_lower_{}{}'.format(itv, period1)].to_numpy()\n","                # mr_res *= dc_lower_ >= dc_base_3T\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_lower_ >= dc_base_3T20 : {:.5f} {:.5f} ({})\".format(dc_lower_[c_i], dc_base_3T[c_i], mr_res[c_i]))\n","\n","                dc_lower2_ = res_df['dc_lower_{}{}'.format(itv, period2)].to_numpy()\n","                mr_res *= dc_lower2_ >= dc_base_H20\n","                if show_detail:\n","                    sys_log.warning(\"dc_lower2_ >= dc_base_H20 : {:.5f} {:.5f} ({})\".format(dc_lower2_[c_i], dc_base_H20[c_i], mr_res[c_i]))\n","\n","                # bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","                # mr_res *= dc_lower2_ >= bb_lower_5T\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_lower2_ >= bb_lower_5T : {:.5f} {:.5f} ({})\".format(dc_lower2_[c_i], bb_lower_5T[c_i], mr_res[c_i]))\n","\n","                # ------ alignment ------ #\n","                # mr_res *= (dc_base_3T20 > dc_base_5T) & (dc_base_5T > dc_base_15T) & (dc_base_15T > dc_base_30T)\n","\n","                # ------ consecutive base ascender ------ #\n","                # ------ 1. roll_max ------ #\n","                dc_base_3T20_rollmax = res_df['dc_base_3T20'].rolling(config.loc_set.zone.base_roll_period).max().to_numpy()\n","                mr_res *= dc_base_3T20_rollmax == dc_base_3T20\n","                if show_detail:\n","                    sys_log.warning(\n","                        \"dc_base_3T20_rollmax == dc_base_3T2020 : {:.5f} {:.5f} ({})\".format(dc_base_3T20_rollmax[c_i], dc_base_3T20[c_i], mr_res[c_i]))\n","\n","                # ------ 2. roll_max_v2 - ascender  ------ #\n","                # dc_base_3T_ascend = (res_df['dc_base_3T'] >= res_df['dc_base_3T'].shift(3)).rolling(config.loc_set.zone.base_roll_period).sum().to_numpy()\n","                # # mr_res *= dc_base_3T_ascend == config.loc_set.zone.base_roll_period\n","                # mr_res *= dc_base_3T_ascend != config.loc_set.zone.base_roll_period\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_base_3T_ascend == config.loc_set.zone.base_roll_period : {:.5f} {:.5f} ({})\".format(dc_base_3T_ascend[c_i], config.loc_set.zone.base_roll_period, mr_res[c_i]))\n","\n","\n","    if config.loc_set.point.wrr != \"None\":            \n","      wave_itv = 'T'\n","      wave_period = config.tr_set.wave_period\n","      co_wrr_ = res_df['co_wrr_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","      cu_wrr_ = res_df['cu_wrr_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= co_wrr_ <= config.loc_set.point.wrr\n","        if show_detail:\n","            sys_log.warning(\"co_wrr_ <= config.loc_set.point.wrr : {:.5f} {:.5f} ({})\".format(co_wrr_[c_i], config.loc_set.point.wrr, mr_res[c_i]))\n","      else:\n","        mr_res *= cu_wrr_ <= config.loc_set.point.wrr\n","        if show_detail:\n","            sys_log.warning(\"cu_wrr_ <= config.loc_set.point.wrr : {:.5f} {:.5f} ({})\".format(cu_wrr_[c_i], config.loc_set.point.wrr, mr_res[c_i]))\n","            \n","      # if ep_loc_side == OrderSide.SELL:\n","      #   mr_res *= cu_es_ >= config.loc_set.point.cu_es\n","      #   mr_res *= cu_es_ <= config.loc_set.point.cu_es + 2\n","      #   if show_detail:\n","      #       sys_log.warning(\"cu_es_ >= config.loc_set.point.cu_es : {:.5f} {:.5f} ({})\".format(cu_es_[c_i], config.loc_set.point.cu_es, mr_res[c_i]))\n","      # else:\n","      #   mr_res *= co_es_ >= config.loc_set.point.co_es\n","      #   mr_res *= co_es_ <= config.loc_set.point.co_es + 1\n","      #   if show_detail:\n","      #       sys_log.warning(\"co_es_ >= config.loc_set.point.co_es : {:.5f} {:.5f} ({})\".format(co_es_[c_i], config.loc_set.point.co_es, mr_res[c_i]))\n","\n","\n","      if ep_loc_side == OrderSide.SELL:\n","          mr_res *= lower_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          # mr_res *= upper_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          if show_detail:\n","              sys_log.warning(\"upper_wick_ratio_ >= config.loc_set.point.wick_ratio : {:.5f} {:.5f} ({})\".format(upper_wick_ratio_[c_i], config.loc_set.point.wick_ratio, mr_res[c_i]))\n","      else:\n","          mr_res *= upper_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          mr_res *= upper_wick_ratio_ <= config.loc_set.point.wick_ratio + 0.1\n","          # mr_res *= lower_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          if show_detail:\n","              sys_log.warning(\"lower_wick_ratio_ >= config.loc_set.point.wick_ratio : {:.5f} {:.5f} ({})\".format(lower_wick_ratio_[c_i], config.loc_set.point.wick_ratio, mr_res[c_i]))\n","              \n","      crr_ = res_df['crr_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","      mr_res *= crr_ >= config.loc_set.point.crr\n","     \n","      if show_detail:\n","          sys_log.warning(\"crr_ >= config.loc_set.point.crr : {:.5f} {:.5f} ({})\".format(crr_[c_i], config.loc_set.point.crr, mr_res[c_i]))\n","\n","      b1_upper_wick_ratio_ = res_df['upper_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].shift(itv_num).to_numpy()\n","      b1_lower_wick_ratio_ = res_df['lower_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].shift(itv_num).to_numpy()\n","\n","      if ep_loc_side == OrderSide.SELL:\n","          upper_wick_ratio_ = res_df['upper_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].to_numpy()\n","          mr_res *= upper_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          if show_detail:\n","              sys_log.warning(\"upper_wick_ratio_ >= config.loc_set.point.wick_ratio : {:.5f} {:.5f} ({})\".format(upper_wick_ratio_[c_i], config.loc_set.point.wick_ratio, mr_res[c_i]))\n","      else:\n","          lower_wick_ratio_ = res_df['lower_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].to_numpy()\n","          mr_res *= lower_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          if show_detail:\n","              sys_log.warning(\"lower_wick_ratio_ >= config.loc_set.point.wick_ratio : {:.5f} {:.5f} ({})\".format(lower_wick_ratio_[c_i], config.loc_set.point.wick_ratio, mr_res[c_i]))\n","\n","    if config.loc_set.point.cppr != \"None\":   \n","      tf_entry = to_itvnum(config.loc_set.point.tf_entry)\n","      b1_cppr_ = res_df['b1_cppr_{}'.format(config.loc_set.point.tf_entry)].to_numpy()  # check b1's cppr in ep_loc\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= b1_cppr_ >= config.loc_set.point.cppr\n","        if show_detail:\n","            sys_log.warning(\"b1_cppr_ >= config.loc_set.point.cppr : {:.5f} {:.5f} ({})\".format(b1_cppr_[c_i], config.loc_set.point.cppr, mr_res[c_i]))\n","      else:\n","        mr_res *= b1_cppr_ <= -config.loc_set.point.cppr\n","        if show_detail:\n","            sys_log.warning(\"b1_cppr_ <= -config.loc_set.point.cppr : {:.5f} {:.5f} ({})\".format(b1_cppr_[c_i], config.loc_set.point.cppr, mr_res[c_i]))\n","            \n","    # ------------ candle_score ------------ #\n","    wick_score_list = literal_eval(config.loc_set.point.wick_score_list)\n","    if len(wick_score_list) != 0:\n","        score_itv_list = literal_eval(config.loc_set.point.score_itv_list)\n","        # ------ candle_score_v0 (1m initial tick 기준임) ------ #  Todo - higher timeframe 경우 back_data 사용해야함\n","        for wick_score_, score_itv_ in zip(wick_score_list, score_itv_list):\n","            wick_score = res_df['wick_score_{}'.format(score_itv_)].to_numpy()\n","            if ep_loc_side == OrderSide.SELL:\n","                mr_res *= wick_score <= -wick_score_\n","                if show_detail:\n","                    sys_log.warning(\"wick_score <= -wick_score_ : {:.5f} {:.5f} ({})\".format(wick_score[c_i], -wick_score_, mr_res[c_i]))\n","            else:\n","                mr_res *= wick_score >= wick_score_\n","                if show_detail:\n","                    sys_log.warning(\"wick_score >= wick_score_ : {:.5f} {:.5f} ({})\".format(wick_score[c_i], wick_score_, mr_res[c_i]))\n","            \n","\n","        # ------------------ swing_middle ------------------ #\n","        # ------------ 1. envelope ------------ #\n","\n","        # ------ a. dc ------ #\n","        # ep_loc check 기준 idx 가 entry 기준이라는 걸 명심\n","        if selection_id in ['v3_2']:\n","            hc_itv = '15T'\n","            dc_itv = '15T'\n","            shift_num = [0, to_itvnum(hc_itv)]\n","            div_res = [1, 0]\n","            for itv_num, res in zip(shift_num, div_res):\n","                close_ = res_df['close_{}'.format(hc_itv)].shift(itv_num).to_numpy()  # close_bar timein 사용하는 경우, 특수로 shift(0) 사용가능\n","                if ep_loc_side == OrderSide.SELL:\n","                    dc_lower_ = res_df['dc_lower_%s' % dc_itv].shift(itv_num).to_numpy()\n","                    mr_res *= (close_ < dc_lower_) == res\n","                else:\n","                    dc_upper_ = res_df['dc_upper_%s' % dc_itv].shift(itv_num).to_numpy()\n","                    mr_res *= (close_ > dc_upper_) == res\n","\n","        # ------------ 2. degree ------------ #\n","        # ------ a. norm_body_ratio ------ #\n","        if config.loc_set.zone.abs_ratio != \"None\":\n","            itv = config.loc_set.point.tf_entry\n","            abs_ratio_ = res_df['abs_ratio_{}'.format(itv)].to_numpy()\n","            mr_res *= abs_ratio_ >= config.loc_set.zone.abs_ratio\n","            # mr_res *= abs_ratio_ <= config.loc_set.zone.abs_ratio\n","\n","    # ------------ 2. imbalance_ratio ------------ #\n","    if config.loc_set.zone.ir != \"None\":\n","        itv = config.loc_set.point.tf_entry\n","        itv_num = to_itvnum(itv)\n","        if ep_loc_side == OrderSide.SELL:\n","            short_ir_ = res_df['short_ir_{}'.format(itv)].to_numpy()\n","            # short_ir_ = res_df['short_ir_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","            # mr_res *= short_ir_ >= config.loc_set.zone.ir     # greater\n","            mr_res *= short_ir_ <= config.loc_set.zone.ir  # lesser\n","            if show_detail:\n","                sys_log.warning(\n","                    \"short_ir_ <= config.loc_set.zone.ir : {:.5f} {:.5f} ({})\".format(short_ir_[c_i], config.loc_set.zone.ir, mr_res[c_i]))\n","        else:\n","            long_ir_ = res_df['long_ir_{}'.format(itv)].to_numpy()\n","            # long_ir_ = res_df['long_ir_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","            # mr_res *= long_ir_ >= config.loc_set.zone.ir\n","            mr_res *= long_ir_ <= config.loc_set.zone.ir\n","            if show_detail:\n","                sys_log.warning(\n","                    \"long_ir_ <= config.loc_set.zone.ir : {:.5f} {:.5f} ({})\".format(long_ir_[c_i], config.loc_set.zone.ir, mr_res[c_i]))\n","                \n","        # if selection_id in ['3_6']:\n","        #   itv, period1, period2 = config.loc_set.point.p1_itv0, config.loc_set.point.p1_period1, config.loc_set.point.p1_period2          \n","\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     high_5T = res_df['high_5T'].to_numpy()  # Todo, tf_entry - 1 open 기준이라 future_data 사용 가능\n","        #     short_base_ = res_df['short_base_{}{}{}'.format(itv, period1, period2)]\n","        #     mr_res *= high_5T < short_base_\n","        #     if show_detail:\n","        #         sys_log.warning(\n","        #             \"high_5T < short_base_ : {:.5f} {:.5f} ({})\".format(high_5T[c_i], short_base_[c_i], mr_res[c_i]))\n","        #   else:\n","        #     low_5T = res_df['low_5T'].to_numpy()  # Todo, tf_entry - 1 open 기준이라 future_data 사용 가능\n","        #     long_base_ = res_df['long_base_{}{}{}'.format(itv, period1, period2)]\n","        #     mr_res *= low_5T > long_base_\n","        #     if show_detail:\n","        #         sys_log.warning(\n","        #             \"low_5T > long_base_ : {:.5f} {:.5f} ({})\".format(low_5T[c_i], long_base_[c_i], mr_res[c_i]))'\n","        \n","        # ------ dc_base ------ #\n","        # if selection_id in ['4']:  # 'v3_3', 'v3_4',\n","        #   hc_itv = '5T'\n","        #   dc_itv = '5T'\n","        #   itv_num = to_itvnum(hc_itv)\n","        #   close_ = res_df['close_{}'.format(hc_itv)].shift(itv_num).to_numpy()   # 따라서 future_data 사용시, shifting 필요함\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     dc_lower_ = res_df['dc_lower_%s' % dc_itv].shift(itv_num).to_numpy()\n","        #     mr_res *= close_ < dc_lower_\n","        #   else:\n","        #     dc_upper_ = res_df['dc_upper_%s' % dc_itv].shift(itv_num).to_numpy()\n","        #     mr_res *= close_ > dc_upper_\n","\n","        # ------ ema ------ #\n","        # if selection_id in ['v5_2']: # 'v3'\n","        #   ema_5T = res_df['ema_5T'].to_numpy()\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     mr_res *= close < ema_5T\n","        #   else:\n","        #     mr_res *= close > ema_5T\n","        \n","        # ------ b. bb ------ #\n","        # close = res_df['close'].to_numpy()\n","\n","        # if selection_id in ['v3_3']:\n","        #   open = res_df['open'].to_numpy()\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     bb_lower_1m = res_df['bb_lower_1m'].to_numpy()\n","        #     # mr_res *= close <= bb_lower_1m\n","        #     mr_res *= open <= bb_lower_1m\n","        #   else:\n","        #     bb_upper_1m = res_df['bb_upper_1m'].to_numpy()\n","        #     # mr_res *= close >= bb_upper_1m\n","        #     mr_res *= open >= bb_upper_1m\n","\n","        if selection_id in ['4_1']:\n","            if ep_loc_side == OrderSide.SELL:\n","                bb_lower_15T = res_df['bb_lower_15T'].to_numpy()\n","                short_ep_ = res_df['short_ep_{}'.format(selection_id)].to_numpy()\n","                mr_res *= bb_lower_15T >= short_ep_\n","            else:\n","                bb_upper_15T = res_df['bb_upper_15T'].to_numpy()\n","                long_ep_ = res_df['long_ep_{}'.format(selection_id)].to_numpy()\n","                mr_res *= bb_upper_15T <= long_ep_\n","\n","        # if selection_id in ['v5_2']:\n","        #   bb_upper2_ = res_df['bb_upper2_%s' % config.loc_set.zone.bbz_itv].to_numpy()\n","        #   bb_lower2_ = res_df['bb_lower2_%s' % config.loc_set.zone.bbz_itv].to_numpy()\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     mr_res *= bb_upper2_ < close\n","        #   else:\n","        #     mr_res *= bb_lower2_ > close\n","\n","        # degree_list = literal_eval(config.loc_set.zone.degree_list)\n","        # if len(degree_list) != 0:\n","        # # if selection_id in ['v3_3', 'v3_4']:\n","        #   norm_close_15 = res_df['norm_close_15'].to_numpy()   # -> 이거 뭘로 만들었는지 불분명함,,\n","        #   b1_norm_close_15 = res_df['norm_close_15'].shift(15).to_numpy()\n","\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     mr_res *= norm_close_15 <= -degree_list[0]\n","        #     # mr_res *= b1_norm_close_15 <= -degree_list[1]\n","        #   else:\n","        #     mr_res *= norm_close_15 >= degree_list[0]\n","        #     # mr_res *= b1_norm_close_15 >= degree_list[1]\n","\n","        # ------ b. dc ------ #\n","        # if selection_id in ['v3_3']:\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     dc_lower_ = res_df['dc_lower_1m'].to_numpy()\n","        #     b1_dc_lower_ = res_df['dc_lower_1m'].shift(1).to_numpy()\n","        #     mr_res *= dc_lower_ < b1_dc_lower_\n","        #   else:\n","        #     dc_upper_ = res_df['dc_upper_1m'].to_numpy()\n","        #     b1_dc_upper_ = res_df['dc_upper_1m'].shift(1).to_numpy()\n","        #     mr_res *= dc_upper_ > b1_dc_upper_\n","\n","        # ------ c. sar ------ #\n","        # if selection_id in ['v3_3']:\n","        # sar_uptrend_3T = res_df['sar_uptrend_3T'].to_numpy()\n","        # if ep_loc_side == OrderSide.SELL:\n","        #   mr_res *= sar_uptrend_3T == 0\n","        # else:\n","        #   mr_res *= sar_uptrend_3T == 1"]},{"cell_type":"markdown","metadata":{"id":"JjKHyqftzhD7"},"source":["### set config (override available)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"q_4E-zH02WJy"},"outputs":[],"source":["#     caution : MARKET / LIMIT spelling   #\n","#      json doesn't support single quotes     #\n","\n","param_dict = {\n","  \"selection_id\": \"5_49\",\n","  \"trader_set\": {\n","    \"backtrade\": 0,\n","    \"back_data_path\": \"C:\\\\Users\\\\Lenovo\\\\PycharmProjects\\\\System_Trading\\\\JnQ\\\\candlestick_concated\\\\database_bn\\\\2022-02-17\\\\2022-02-17 ETHUSDT_1m.ftr\",\n","    \"start_datetime\": \"2020-09-05 00:00:59.999\",\n","    \"run\": 1,\n","    \"df_log\": 0,\n","    \"latest_index\": -1,\n","    \"complete_index\": -2,\n","    \"limit_fee\": 1e-10,\n","    \"market_fee\": 1e-10,\n","    \"initial_asset\": 24500,\n","    \"asset_changed\": 0,\n","    \"symbol\": \"ETHUSDT\",\n","    \"symbol_changed\": 0,\n","    \"itv_list\": \"['T', '3T', '5T', '15T', '30T', 'H', '4H']\",\n","    \"row_list\": \"[100, 50, 1, 1, 1, 50, 1]\",\n","    \"rec_row_list\": \"[1, 1, 1, 1, 1, 1, 1]\",\n","    \"offset_list\": \"['1h', '1h', '1h', '1h', '1h', '1h', '1h']\",\n","    \"bar_close_second\": 59,\n","    \"realtime_term\": 0.01,\n","    \"order_term\": 0.25,\n","    \"api_retry_term\": 1,\n","    \"check_entry_sec\": 10,\n","    \"entry_execution_wait\": 60,\n","    \"breakout_qty_ratio\": 0.97,\n","    \"qty_check_term\": 30,\n","    \"exit_execution_wait\": 60,\n","    \"close_complete_term\": 5,\n","    \"save_stacked_df\": 0,\n","    \"stacked_df_exist\": 1\n","  },\n","  \"pos_set\": {\n","    \"short_inversion\": 0,\n","    \"long_inversion\": 0,\n","    \"short_ban\": 0,\n","    \"long_ban\": 0\n","  },\n","  \"loc_set\": {      \n","    \"point1\": {\n","      \"exp_itv\": \"5T\",\n","      \"tf_entry\": \"15T\",\n","      \"candle_pattern\": \"CDLMARUBOZU\",\n","      \"short_spread\": \"None\",\n","      \"long_spread\": \"None\",\n","      \"short_tr_thresh\": \"None\",\n","      \"long_tr_thresh\": \"None\",\n","      \"short_wick_ratio\": \"None\",\n","      \"long_wick_ratio\": \"None\",\n","      \"wick_itv\": \"5T\",\n","      \"wrr_10\": \"None\",\n","      \"wrr_21\": \"None\",\n","      \"wrr_32\": 0.3,\n","      \"co_es\": \"None\",\n","      \"cu_es\": \"None\",\n","      \"crr\": \"None\",\n","      \"cppr\": \"None\",\n","      \"ppr\": \"None\",\n","      \"wbr\": \"None\",\n","      \"dbr\": \"None\",\n","      \"dbr2\": \"None\",\n","      \"brr\": \"None\",\n","      \"ir\": \"None\",\n","      \"abs_ratio\": \"None\"\n","    },\n","    \"point2\": {\n","      \"wrr_32\": \"None\",\n","      \"csdbox_range\": 0.3,\n","      \"short_tr_thresh\": \"None\",\n","      \"long_tr_thresh\": \"None\",\n","      \"csd_period\": \"None\"\n","    },\n","    \"zone1\": {\n","      \"use_zone\": 0,\n","      \"base_roll_period\": 50,\n","      \"degree_list\": \"[]\",\n","      \"dtk_itv\": \"5T\",\n","      \"dt_k\": \"None\",\n","      \"dc_period\": 135,\n","      \"use_dtk_line\": 0,\n","      \"zone_dt_k\": 0.4,\n","      \"zone_dc_period\": 135\n","    },\n","    \"zone2\": {\n","      \"use_zone\": 0\n","    }\n","  },\n","  \"tr_set\": {\n","    \"check_hlm\": 0,\n","    \"wave_itv1\" : \"T\",\n","    \"wave_period1\": 20,\n","    \"wave_length1\": \"None\",\n","    \"wave_spread1\": \"None\",\n","    \"wave_time_ratio1\": \"None\",\n","    \"wave_itv2\" : \"T\",    \n","    \"wave_period2\": 20,\n","    \"tc_period\": 20,\n","    \"wave_greater1\": 0,\n","    \"wave_greater2\": 0,\n","    \"wave_lesser1\": 2,\n","    \"wave_lesser2\": 2,\n","    \"expire_k1\": 0.0,\n","    \"expire_k2\": 0.0,\n","    \"expire_tick\": \"None\",\n","    \"p2_box_k1\" : 0,\n","    \"p2_box_k2\" : 0,\n","    \"p1p2_low\": 0.0,\n","    \"tp_gap\": 0.0,\n","    \"ep_gap1\": -0.12,\n","    \"ep_gap2\": -0.12,\n","    \"out_gap\": 0,\n","    \"decay_gap\": \"None\",\n","    \"c_ep_gap\": \"None\",\n","    \"t_out_gap\": \"None\",\n","    \"wb_tp_gap\": 0,\n","    \"wb_out_gap\": 0,\n","    \"bias_tick\": 100\n","  },\n","  \"ep_set\": {\n","    \"entry_type\": \"LIMIT\",\n","    \"static_ep\": 1,\n","    \"point2\": {\n","      \"entry_type\": \"MARKET\"\n","    }\n","  },\n","  \"tp_set\": {\n","    \"non_tp\": 0,\n","    \"static_tp\": 1,\n","    \"tp_onexec\": 0,\n","    \"decay_term\": 60,\n","    \"p_ranges\": \"[1]\",\n","    \"p_qty_ratio\": \"[1]\"\n","  },\n","  \"out_set\": {\n","    \"hl_out\": 1,\n","    \"static_out\": 1,\n","    \"out_onexec\": 0,\n","    \"tf_exit\": \"None\",\n","    \"rsi_exit\": 0\n","  },\n","  \"lvrg_set\": {\n","    \"static_lvrg\": 0,\n","    \"leverage\": 5,\n","    \"target_pct\": 0.03,\n","    \"allow_float\": 0,\n","    \"lvrg_rejection\": 0\n","  }\n","}\n","\n","config = EasyDict(param_dict)"]},{"cell_type":"markdown","metadata":{"id":"MuD_2vY7TI_8"},"source":["#### legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"EKag94Y2TMCO"},"outputs":[],"source":[",\n","      \"hc_itv\": 60,\n","      \"osc_band\": 20\n","      \n","      \"wick_score_list\": \"[]\",\n","      \"body_score_list\": \"[]\",\n","      \"score_itv_list\": \"[]\",,\n","\n","      \"wick_score_list\": \"[]\",\n","      \"body_score_list\": \"[]\",\n","      \"score_itv_list\": \"['T']\""]},{"cell_type":"markdown","metadata":{"id":"rLI8unIyroiC"},"source":["## run"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6,"status":"ok","timestamp":1662344800123,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"qBJfPsmJzVIr","outputId":"24210019-a1d8-406f-db49-a7b3425c957e"},"outputs":[{"output_type":"stream","name":"stdout","text":["\"5_49\" {\n"," \"point1\": {\n","  \"exp_itv\": \"5T\",\n","  \"tf_entry\": \"15T\",\n","  \"candle_pattern\": \"CDLMARUBOZU\",\n","  \"short_spread\": \"None\",\n","  \"long_spread\": \"None\",\n","  \"short_tr_thresh\": \"None\",\n","  \"long_tr_thresh\": \"None\",\n","  \"short_wick_ratio\": \"None\",\n","  \"long_wick_ratio\": \"None\",\n","  \"wick_itv\": \"5T\",\n","  \"wrr_10\": \"None\",\n","  \"wrr_21\": \"None\",\n","  \"wrr_32\": 0.3,\n","  \"co_es\": \"None\",\n","  \"cu_es\": \"None\",\n","  \"crr\": \"None\",\n","  \"cppr\": \"None\",\n","  \"ppr\": \"None\",\n","  \"wbr\": \"None\",\n","  \"dbr\": \"None\",\n","  \"dbr2\": \"None\",\n","  \"brr\": \"None\",\n","  \"ir\": \"None\",\n","  \"abs_ratio\": \"None\"\n"," },\n"," \"point2\": {\n","  \"wrr_32\": \"None\",\n","  \"csdbox_range\": 0.3,\n","  \"short_tr_thresh\": \"None\",\n","  \"long_tr_thresh\": \"None\",\n","  \"csd_period\": \"None\"\n"," },\n"," \"zone1\": {\n","  \"use_zone\": 0,\n","  \"base_roll_period\": 50,\n","  \"degree_list\": \"[]\",\n","  \"dtk_itv\": \"5T\",\n","  \"dt_k\": \"None\",\n","  \"dc_period\": 135,\n","  \"use_dtk_line\": 0,\n","  \"zone_dt_k\": 0.4,\n","  \"zone_dc_period\": 135\n"," },\n"," \"zone2\": {\n","  \"use_zone\": 0\n"," }\n","} {\n"," \"check_hlm\": 0,\n"," \"wave_itv1\": \"T\",\n"," \"wave_period1\": 20,\n"," \"wave_length1\": \"None\",\n"," \"wave_spread1\": \"None\",\n"," \"wave_time_ratio1\": \"None\",\n"," \"wave_itv2\": \"T\",\n"," \"wave_period2\": 20,\n"," \"tc_period\": 20,\n"," \"wave_greater1\": 0,\n"," \"wave_greater2\": 0,\n"," \"wave_lesser1\": 2,\n"," \"wave_lesser2\": 2,\n"," \"expire_k1\": 0.0,\n"," \"expire_k2\": 0.0,\n"," \"expire_tick\": \"None\",\n"," \"p2_box_k1\": 0,\n"," \"p2_box_k2\": 0,\n"," \"p1p2_low\": 0.0,\n"," \"tp_gap\": 0.0,\n"," \"ep_gap1\": -0.12,\n"," \"ep_gap2\": -0.12,\n"," \"out_gap\": 0,\n"," \"decay_gap\": \"None\",\n"," \"c_ep_gap\": \"None\",\n"," \"t_out_gap\": \"None\",\n"," \"wb_tp_gap\": 0,\n"," \"wb_out_gap\": 0,\n"," \"bias_tick\": 100\n","} {\n"," \"entry_type\": \"LIMIT\",\n"," \"static_ep\": 1,\n"," \"point2\": {\n","  \"entry_type\": \"MARKET\"\n"," }\n","} {\n"," \"non_tp\": 0,\n"," \"static_tp\": 1,\n"," \"tp_onexec\": 0,\n"," \"decay_term\": 60,\n"," \"p_ranges\": \"[1]\",\n"," \"p_qty_ratio\": \"[1]\"\n","} {\n"," \"hl_out\": 1,\n"," \"static_out\": 1,\n"," \"out_onexec\": 0,\n"," \"tf_exit\": \"None\",\n"," \"rsi_exit\": 0\n","} {\n"," \"static_lvrg\": 0,\n"," \"leverage\": 5,\n"," \"target_pct\": 0.03,\n"," \"allow_float\": 0,\n"," \"lvrg_rejection\": 0\n","} "]}],"source":["# funcs = [expire_v2, ep_loc_point2_v2, lvrg_set]  # expire for p1 & p2\n","funcs = [expiry_p1, expiry_p2, lvrg_set]     # expire for p1-only\n","# funcs = [expire_v0, ep_loc_point2_v2, lvrg_set]  # expire for v3\n","\n","id_idx_list = [0]  # ID_arr 에서 import 할 id_idx 선택\n","public_override = 1\n","utils_override = 1\n","config_override = 1\n","\n","# ------ config_list 와 같은 org_var 에 override 하는거 다시 생각하기 ------ #\n","ID_list = ID_arr[id_idx_list]\n","utils_list = utils_arr[id_idx_list]\n","config_list = config_arr[id_idx_list]\n","\n","if config_override or utils_override:\n","  assert len(config_list) == 1\n","  if config_override:    \n","    config_list[0] = config\n","    ID_list[0] = config.selection_id\n","  \n","config = config_list[0]  # base config = config_list[0]\n","tp_fee, out_fee = calc_tp_out_fee_v2(config)   # -> rev_pr 때문에 일단 이곳에도 선언함\n","\n","# ------- inversion set ------- #\n","inversion = 0\n","fdist_thresh = 1\n","# ------- plot param ------- #\n","show_detail = 0\n","# ------- temp param ------- #\n","allow_osc_touch = 0\n","rsi_gap = 5\n","\n","# ------- just printing config ------- #\n","_ = [print(json.dumps(config[key_], indent=1), end=' ') for key_ in ['selection_id', 'loc_set', 'tr_set', 'ep_set', 'tp_set', 'out_set', 'lvrg_set']] #  'trader_set',"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"afUV2b1jaggN"},"outputs":[],"source":["# config.trader_set.start_datetime = \"2020-09-05 00:00:59.999\" #  \"2020-09-05 00:00:59.999\" # 2022-02-01 16:34:59.999000 2022-01-14 16:34:59.999000  \"2020-09-05 00:00:59.999\" \"2022-01-10 00:00:59.999\" \"2021-10-04 02:39:59.999000\"\n","# ------ p1_hhm 의 경우 out_box 를 위해 wave_itv 1 & 2 를 동일하게 설정해야함 ------ #\n","config_list[0].tr_set.wave_itv1 = 'T'\n","config_list[0].tr_set.wave_period1 = 20\n","config_list[0].tr_set.wave_itv2 = 'T'\n","config_list[0].tr_set.wave_period2 = 4\n","config_list[0].tr_set.tc_period = 20"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3334,"status":"ok","timestamp":1662344829336,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"WstWVNihCNH8","outputId":"225fcf33-19f1-4727-a8bb-2ea035cafe86"},"outputs":[{"output_type":"stream","name":"stdout","text":["public_indi elapsed time : 1.624058485031128\n","make data_list elapsed time : 0.0002925395965576172\n"]}],"source":["# ------ slicing res_df ------ #\n","res_df = res_df_.loc[pd.to_datetime(config.trader_set.start_datetime):]\n","\n","np_timeidx = np.array([intmin_np(date_) for date_ in res_df.index.to_numpy()])\n","\n","# ------------ public_indi ------------ # - 딱히 반복될 이유가 없는 phase - annot. 달때, why 까지 적어주면 좋음\n","start_0 = time.time()\n","if public_override:\n","    res_df = public_indi(res_df, config_list[0], np_timeidx)  # 현재 대부분의 시간은 h_candle 에서 소비되고 있음\n","else:\n","    res_df = utils_public.public_indi(res_df, config_list[0], np_timeidx)\n","print(\"public_indi elapsed time :\", time.time() - start_0)\n","\n","# ------------ make data_list ------------ # - 반복될 이유가 없는 phase - public_indo 에 종속\n","start_0 = time.time()\n","ohlc_cols = ['open', 'high', 'low', 'close']\n","ohlc_list = [res_df[col_].to_numpy() for col_ in ohlc_cols]\n","print(\"make data_list elapsed time :\", time.time() - start_0)"]},{"cell_type":"code","source":["res_df.dtypes"],"metadata":{"id":"6NkldYL5SK2n"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"RqRF1eyZ0xBL"},"source":["### idep_plot"]},{"cell_type":"code","execution_count":80,"metadata":{"id":"_iYcJk8nK8Yq","executionInfo":{"status":"ok","timestamp":1662360293225,"user_tz":-540,"elapsed":285,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# ------ edit utils config ------ #\n","config_list[0].tr_set.check_hlm = 2\n","# config_list[0].loc_set.point.candle_pattern = talib.get_function_groups()['Pattern Recognition'][51]   # \"None\" # 0.5 0.7\n","# config_list[0].pos_set.short_ban = 0\n","# config_list[0].pos_set.long_ban = 0\n","# config_list[0].tr_set.wave_lesser = 3\n","config_list[0].tr_set.wave_length1 = \"None\"  # \"None\" 45 15 110 100 \n","# config_list[0].tr_set.wave_spread1 = \"None\"  # \"None\" 15 110 100 \n","config_list[0].tr_set.wave_time_ratio1 = \"None\"  # \"None\" 6\n","# config_list[0].tr_set.wave_greater1 = 0  # 0 50 \n","# config_list[0].tr_set.wave_greater2 = 0  # 10\n","# config_list[0].tr_set.p1_period1 = 5\n","# config_list[0].tr_set.p1_period2 = 5\n","# # config_list[0].tr_set.p2_period1 = 20\n","# # config_list[0].tr_set.p2_period2 = 20\n","config_list[0].ep_set.entry_type = \"MARKET\" # \"LIMIT\" # \"MARKET\"\n","config_list[0].ep_set.point2.entry_type = \"LIMIT\" # \"LIMIT\" # \"MARKET\"\n","# config_list[0].tr_set.tp_gap = 0.5\n","# config_list[0].tr_set.ep_gap1 = -0.12 # -0.8 -0.618 -0.23 -0.382 0.19 0.8 -0.12 -0.26\n","config_list[0].tr_set.ep_gap2 = -0.5 # -0.618 -0.23 -0.382 0.19 -0.5\n","# config_list[0].tr_set.out_gap = 0.2  # 0 -0.35 -0.6\n","# config_list[0].tr_set.wb_tp_gap = 0.5\n","# config_list[0].tr_set.wb_out_gap = -0.0\n","config_list[0].trader_set.limit_fee = 1e-10\n","config_list[0].trader_set.market_fee = 1e-10\n","# config_list[0].trader_set.limit_fee = 0.0002\n","# config_list[0].trader_set.market_fee = 0.0004\n","# config_list[0].loc_set.point.short_wick_ratio = 0.2 # \"None\" # 2.5\n","# config_list[0].loc_set.point.long_wick_ratio = 0.2 # \"None\" # 2.5\n","# config_list[0].loc_set.point.crr = 0.5"]},{"cell_type":"code","execution_count":81,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1271,"status":"ok","timestamp":1662360295564,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"iI39YI_5GguK","outputId":"1bd439fa-3453-4678-ebee-52656aaeb7f9"},"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42048\n","WARNING:root:np.sum(long_open_res2 == 1) : 42240\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:np.sum(short_open_res2 == 1) : 40427\n","WARNING:root:np.sum(long_open_res2 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n","WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 28319\n","WARNING:root:np.sum(long_open_res1 == 1) : 28683\n"]},{"output_type":"stream","name":"stdout","text":["enlist_tr elapsed time : 1.087360143661499\n"]}],"source":["if utils_override:   # 현재, utils_override 하는 경우 1개의 ID 만 허용함 \n","  # start_0 = time.time()\n","  # res_df = enlist_rtc(res_df, config_list[0], np_timeidx)\n","  # print(\"enlist_rtc elapsed time :\", time.time() - start_0)\n","  start_0 = time.time()\n","  res_df = enlist_tr(res_df, config_list[0], np_timeidx)    # 36995.0 -> 152766.0 # 4044 np.sum(long_open_res == 1) : 4325\n","  print(\"enlist_tr elapsed time :\", time.time() - start_0)\n","else:\n","    start_0 = time.time()\n","    for utils_, config_ in zip(utils_list, config_list):\n","        # res_df = utils_.enlist_rtc(res_df, config_, np_timeidx)\n","        res_df = utils_.enlist_tr(res_df, config_, np_timeidx)\n","    print(\"elapsed time :\", time.time() - start_0)"]},{"cell_type":"code","execution_count":98,"metadata":{"id":"gfDSOGMd91rE","executionInfo":{"status":"ok","timestamp":1662365027826,"user_tz":-540,"elapsed":321,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# ------ edit loc_set config ------ #\n","config_list[0].loc_set.point1.wrr_10 = \"None\" # \"None\" 0.3\n","config_list[0].loc_set.point1.wrr_21 = \"None\" # \"None\" \n","config_list[0].loc_set.point1.wrr_32 = 0.5 # \"None\" 1 0.5 0.482 0.302\n","config_list[0].loc_set.point2.wrr_32 = 1 # \"None\" 1 0.5 0.382 0.302 0.25\n","config_list[0].loc_set.point2.csd_period = \"None\"  # \"None\" 100\n","config_list[0].loc_set.zone1.use_zone = 0\n","config_list[0].loc_set.zone1.bb_trend_period = 150\n","# config_list[0].loc_set.zone1.hl_loc_pct = \"None\" # \"None\" 1 0.5\n","config_list[0].loc_set.zone2.use_zone = 0\n","# config_list[0].loc_set.point1.cu_es = \"None\" # \"None\" # -2\n","# config_list[0].loc_set.point1.co_es = \"None\" # \"None\" # -3\n","# config_list[0].loc_set.point1.cppr = 0.5   # \"None\" # 0.5 0.7\n","# config_list[0].loc_set.point1.wbr = \"None\" # 0.7\n","# config_list[0].loc_set.point1.dbr = \"None\"   # 0.7\n","# config_list[0].loc_set.point1.dbr2 = \"None\"  # 0.7\n","# config_list[0].loc_set.point1.brr = \"None\"   # 0.8\n","# config_list[0].loc_set.point1.ir = \"None\" # \"None\" 0.8\n","# config_list[0].loc_set.point1.wick_score_list = \"[]\"\n","# config_list[0].loc_set.point1.score_itv_list = \"['H']\"\n","# # config_list[0].loc_set.point1.abs_ratio = \"None\"  # 0.7\n","config_list[0].loc_set.point1.short_tr_thresh = \"None\"  #  \"None\" 0.5 2 0.8 # # 0.7  5 # tr_thresh 엄청 민감함\n","config_list[0].loc_set.point1.long_tr_thresh = 5  #  \"None\" 2 0.8 ## 0.7 5 \n","# # config_list[0].loc_set.zone1.base_roll_period = 60"]},{"cell_type":"code","execution_count":99,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4570,"status":"ok","timestamp":1662365032895,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"9DPgykxQ92mU","outputId":"b17540b1-1b2b-48a5-c86d-2afd82df6dfd"},"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.50000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.50000 (0.0)\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point2.wrr_32 : 0.54867 1.00000 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 2.36270809173584\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:co_wrr_32_ <= config.loc_set.point2.wrr_32 : 1.00000 1.00000 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 2.029419422149658\n"]}],"source":["open_info_df1 = get_open_info_df_v2(ep_loc_p1_v3, res_df, np_timeidx, ID_list, config_list, id_idx_list, open_num=1)  # --> point * dur. 관련 (loc_set) param 에 종속 (open_info 가 변경되는게 아니라면, 재실행할 필요없음)\n","open_info_df2 = get_open_info_df_v2(ep_loc_p2_v3, res_df, np_timeidx, ID_list, config_list, id_idx_list, open_num=2)\n","open_info_df_list = [open_info_df1, open_info_df2]"]},{"cell_type":"code","execution_count":105,"metadata":{"id":"KqVkg236t_f2","executionInfo":{"status":"ok","timestamp":1662365161041,"user_tz":-540,"elapsed":316,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# ------ edit entry & exit (ep, tp, out, ..) config ------ #\n","# config_list[0].tr_set.expire_k = -0.5\n","# config_list[0].tr_set.expire_tick = \"None\"\n","config_list[0].tr_set.p2_box_k1 = 0.0  # 0 default --> 0 ~ 1 사이 값 사용 tp_1 로부터 떨어지는 거리\n","# config_list[0].tr_set.p2_box_k2 = 0.0  # 0.5 0 default --> \"None\" 불가, 0 ~ 1 사이 값 사용 tp_0 로부터 떨어지는 거리, 본디 p2_box 는 p1_box 내부에 존재해야, 정확한 hhm 이 측정가능해짐\n","config_list[0].tr_set.p1p2_low = 0.5  # 0.5 0.7 0  0 is equal to \"None\", 마찬가지로 tp_0 로부터 떨어지는 거리\n","config_list[0].loc_set.point2.short_tr_thresh = \"None\"  #  \"None\" 0.5 2 0.8 # # 0.7 # tr_thresh 엄청 민감함\n","config_list[0].loc_set.point2.long_tr_thresh = \"None\"  #  \"None\" 2 0.8 ## 0.7\n","# # # config_list[0].ep_set.point2.entry_type = \"LIMIT\"\n","# # # config_list[0].ep_set.point2.wick_score_list = str([])\n","# # # config_list[0].tp_set.static_tp = 1\n","# # # config_list[0].tp_set.non_tp = 0 # 0 1\n","# config_list[0].tp_set.p_ranges = \"[1]\"\n","# config_list[0].tp_set.p_qty_ratio = \"[1]\"\n","# config_list[0].tp_set.p_ranges = \"[0.2, 0.66, 1]\"\n","# config_list[0].tp_set.p_qty_ratio = \"[0.25, 0.25, 0.5]\"\n","# config_list[0].tp_set.p_ranges = \"[0.66, 1]\"\n","# config_list[0].tp_set.p_qty_ratio = \"[0.3, 0.7]\"\n","# config_list[0].out_set.hl_out = 1\n","# # # config_list[0].out_set.tf_exit = \"None\" # 15 \"None\"\n","config_list[0].lvrg_set.static_lvrg = 0\n","config_list[0].lvrg_set.leverage = 1\n","config_list[0].lvrg_set.target_pct = 0.03 # 0.1 0.03\n","# # config_list[0].lvrg_set.allow_float = 0\n","# config_list[0].lvrg_set.lvrg_rejection = 0"]},{"cell_type":"code","source":["test_ratio = 0.0\n","short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_tr_arr, short_bias_arr, short_net_p1_bias_tick, short_p2exec_p1_bias_tick, short_net_p1_idx_arr, short_p2_idx_arr, short_tp_1, short_tp_0, short_out_1, short_out_0, short_ep2_0, \\\n","      long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_tr_arr, long_bias_arr, long_net_p1_bias_tick, long_p2exec_p1_bias_tick, long_net_p1_idx_arr, long_p2_idx_arr, long_tp_1, long_tp_0, long_out_1, long_out_0, long_ep2_0 = \\\n","get_res_v9(res_df, open_info_df_list, ohlc_list, config_list, np_timeidx, funcs, test_ratio=test_ratio, plot_is=1, signi=0, show_detail=0)   # open 이 많을 수록 en_ex_pairing elapsed time : 11.58370590209961"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":664},"id":"TvGs5mBxsuBK","executionInfo":{"status":"ok","timestamp":1662365175325,"user_tz":-540,"elapsed":13803,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"182faf5f-771b-4170-92c2-d22a7bdf0d6d"},"execution_count":106,"outputs":[{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 10.502665042877197\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1728x576 with 6 Axes>"],"image/png":"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WB95EBERNTissURERHWDNZaIiOoDLwVAREREREREREREpCcOrBIRERERERERERHpiQOrRERERERERERERHriwCoRERERERERERGRnjiwSkRERERERERERKQnDqwSERERERERERER6YkDq0RERERERERERER64sAqERERERERERERkZ44sEpERERERERERESkJw6sEhEREREREREREemJA6tEREREREREREREeuLAKhEREREREREREZGeOLBKREREREREREREpCcOrBIRERERERERERHpiQOrRERERERERERERHriwCoRERERERERERGRnjiwSkRERERERERERKQnDqwSERERERERERER6YkDq0RERERERERERER64sAqERERERERERERkZ44sEpERERERERERESkJw6sEhEREREREREREemJA6tEREREREREREREeuLAKhEREREREREREZGeajSwOmLECERFRSEmJgZz586t65yIiIgaDNZYIiKi2sf6SkRE9aHagVVzc3N88803GDVqFLp06YIJEyagc+fO9ZEbERHRQ401loiIqPaxvhIRUX2pdmC1b9++iI2NRUJCAu7cuYOdO3di9OjR9ZEbERHRQ401loiIqPaxvhIRUX2SquL555+XdevWKY8nTZokq1evrrCcn5+fBAUFSVBQkCQkJFTZJoPBYDAabgQFBRk8B2OJmtRY1lcGg8Fg1DRYY8uC57AMBoPBqO2orMbW2s2r1q1bB29vb3h7eyMzM7O2miUiImrQWF+JiIjqBmssERE9KMvqFkhOToaHh4fy2N3dHcnJyVWu4+XlhaCgoAfPrh65uLiYZDE1xbxNMWeAedcnU8wZYN415enpWW/bMnb61lhTrK8AXxv1yRRzBkwzb1PMGWDe9ckQObPGlmko57AAXxv1yRTzNsWcAeZdn0wxZ8D4amyVP3W1sLCQuLg4adOmjVhZWcmlS5ekS5cu9/XzWGMOU8zZVPM2xZyZN3Nm3oy6CH1rrKk+V8ybOT+MeZtizsybOTeUaCjnsKaatynmbKp5m2LOzJs5m1re1f5itbS0FK+99hp++eUXWFhYYP369bh8+XJ1qxEREVE1WGOJiIhqH+srERHVl2oHVgHg8OHDOHz4cF3nQkRE1OCwxhIREdU+1lciIqoPFgAW10XDFy9erItm65Qp5gyYZt6mmDPA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bubr4qFSvgJqn4sZzFhm7M8wY+Pb23rKV2BhZmzMbqx2dXVh5cqVyMvLg8lkgsvlwr1792K1vGb37t1DRUUFAKCiogJ3794Nz8885czhcCAUCmFiYgIPHz6E0+mE1WqF1WqF0+nEw4cPMTExgQ8fPsDhcAD49rS02Wv9aI/5unLlCvx+P86dO6eLupcvXw6LxQIAWLJkCbZt2wa/348nT56gvLz8hzXP7FNeXo7Hjx+H510uF8xmM/Ly8rBy5Up0dnZG7aFIe8xHdXU1cnJyYLfb4XK58PjxY/zzzz/K152cnIylS5eGf3Y6nejv71e6R968eYPR0VGsWrUKALBlyxY8f/5c6Zpn27NnT/i/UERbU5W6R0ZGUFJSgqSkJAD///tWvbdJO5UyVvVzAegvXwF9ZizzNb49woyNX93M18VDpXwF1D4XM5ixzNhomLHxP5N6yldg4WZsTL6sFfj2lLHBwUEJBoNSXV0ds3V/Nurr6+X169fy+fNnGR0dlf3798uyZcukvb1dXrx4IW1tbZKWlha+/tKlSxIMBqWvr0+KiorC8/v27ZNAICCBQED27t0bni8qKhKfzyfBYFAuXrwYno+2x89GaWmpiIj09vaK1+sVr9crZWVlSte9Zs0a8Xg80tvbKz6fT06ePCkAxG63i9vtlkAgII2NjWI2mwWAJCYmSmNjowQCAXG73WK328NrVVdXSzAYlIGBgfCT5aL1UKQ9tI6NGzeGv/hb9brtdrv09PRIT0+P9Pf3h9dVuUcAyNq1a6Wrq0t6e3ulpaVFrFar8jUDkOTkZHn79q2kpqbOa01V6j516pT4/X7x+Xxy/fp1MZvNyvc2x6+Nv5GxzNf41a33jGW+xuc9nxkbv7qZr4tn8DMsM1b1M82MZcZGGnrMV2DhZex//vcDEREREREREREREc3Tonl4FREREREREREREVGs8MYqERERERERERERkUa8sUpERERERERERESkEW+sEhEREREREREREWnEG6tEREREREREREREGvHGKhEREREREREREZFGvLFKREREREREREREpBFvrBIRERERERERERFp9F/YOfFqNVwy5AAAAABJRU5ErkJggg==\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 2.2191162109375\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8lYgsqH-rfAM"},"outputs":[],"source":["# ------ inversion ------ #\n","_ = get_res_v5(res_df, open_info_df, ohlc_list, config_list, np_timeidx, funcs, inversion=True, test_ratio=test_ratio, plot_is=1, signi=False)"]},{"cell_type":"markdown","metadata":{"id":"n6gc7lERC4VE"},"source":["### statistics (stem 별로 진행)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HHjIdn2MC4VE"},"outputs":[],"source":["selection_id = config.selection_id\n","\n","short_p1_idx = short_obj[-1].astype(int)\n","long_p1_idx = long_obj[-1].astype(int)\n","\n","short_open_tp_1 = res_df['short_tp_1_{}'.format(selection_id)].to_numpy()[short_p1_idx]\n","long_open_tp_1 = res_df['long_tp_1_{}'.format(selection_id)].to_numpy()[long_p1_idx]\n","\n","short_open_tp_0 = res_df['short_tp_0_{}'.format(selection_id)].to_numpy()[short_p1_idx]\n","long_open_tp_0 = res_df['long_tp_0_{}'.format(selection_id)].to_numpy()[long_p1_idx]\n","\n","short_open_tp_gap = res_df['short_tp_gap_{}'.format(selection_id)].to_numpy()[short_p1_idx]  # use open_i\n","long_open_tp_gap = res_df['long_tp_gap_{}'.format(selection_id)].to_numpy()[long_p1_idx]\n","\n","short_open_out_0 = res_df['short_out_0_{}'.format(selection_id)].to_numpy()[short_p1_idx]\n","long_open_out_0 = res_df['long_out_0_{}'.format(selection_id)].to_numpy()[long_p1_idx]\n","\n","short_open_out_gap = res_df['short_out_gap_{}'.format(selection_id)].to_numpy()[short_p1_idx]  # use open_i\n","long_open_out_gap = res_df['long_out_gap_{}'.format(selection_id)].to_numpy()[long_p1_idx]\n","\n","# ------ out case 의 max_high check (long) ------ #\n","short_max_tpg = get_max_tpg_v2(OrderSide.SELL, ohlc_list, short_pr, short_obj[:4], short_open_tp_1, short_open_tp_gap)\n","long_max_tpg = get_max_tpg_v2(OrderSide.BUY, ohlc_list, long_pr, long_obj[:4], long_open_tp_1, long_open_tp_gap)\n","# short_max_tpg = get_max_tpg_v2(OrderSide.SELL, ohlc_list, short_pr, short_obj[:4], short_open_tp_1, short_open_out_gap)\n","# long_max_tpg = get_max_tpg_v2(OrderSide.BUY, ohlc_list, long_pr, long_obj[:4], long_open_tp_1, long_open_out_gap)\n","\n","# ------ true_bias 의 outg 확인 ------ # --> 추후, outg 로 tp_gap / out_gap custom 여부를 위해, 본 cell 을 지우지 않음\n","short_max_outg = get_max_outg_v4(OrderSide.SELL, config, ohlc_list, short_obj, short_tpout_arr, short_open_tp_0, short_open_tp_gap)  # tp_box's mean_low 확인 위해 tp_gap 입력함\n","long_max_outg = get_max_outg_v4(OrderSide.BUY, config, ohlc_list, long_obj, long_tpout_arr, long_open_tp_0, long_open_tp_gap)\n","\n","current_tpg = config.tr_set.tp_gap\n","current_outg = config.tr_set.out_gap"]},{"cell_type":"markdown","metadata":{"id":"tOFkzUX2imQu"},"source":["#### consecutive dur. value survey on bias"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CgvSrXaZEkMZ"},"outputs":[],"source":["res_df.dtypes"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gnSvYKIzC4VF"},"outputs":[],"source":["# ------------ dependent vars. ------------ #\n","# res_df 에 존재하는 col 는 모두 사용가능함\n","\n","# ------ 1. 도출한 outg 와 vars. pairing 진행 (by valid_idx) ------ #\n","devided_cols, public_cols = [], []\n","\n","devided_cols.append('tr_{}'.format(selection_id))\n","\n","devided_cols.append('wave_length_fill_{}{}'.format(wave_itv1, wave_period1))\n","devided_cols.append('wave_spread_fill_{}{}'.format(wave_itv1, wave_period1))\n","\n","wave_itv1 = 'T'\n","wave_period1 = config.tr_set.wave_period1\n","\n","# public_cols.append('cu_wrr_21_{}{}'.format(wave_itv1, wave_period1))\n","public_cols.append('cu_wrr_32_{}{}'.format(wave_itv1, wave_period1))\n","# public_cols.append('co_wrr_21_{}{}'.format(wave_itv1, wave_period1))\n","public_cols.append('co_wrr_32_{}{}'.format(wave_itv1, wave_period1))\n","\n","# public_cols.append('wave_high_terms_cnt_fill_T5')\n","# public_cols.append('wave_low_terms_cnt_fill_T5')\n","# public_cols.append('wave_high_loc_pct_T5')\n","# public_cols.append('wave_low_loc_pct_T5')\n","\n","# public_cols.append('b1_co_es_15T1')\n","# public_cols.append('b1_cu_es_15T1')\n","# public_cols.append('b1_upper_wick_ratio_15T')\n","# public_cols.append('b1_lower_wick_ratio_15T')\n","\n","#  'co_wrr_T5', 'cu_wrr_T5', 'b1_cppr_15T', 'b1_updbr', 'b1_lwdbr', 'b1_updbr_cppr', 'b1_lwdbr_cppr' 'abs_ratio_5T', 'rel_ratio_5T', 'body_rel_ratio_5T'\n","\n","# devided_cols = ['tr_{}'.format(selection_id)]  # , 'ir_5T'\n","# public_cols = ['wave_high_terms_cnt_fill_T5', 'wave_low_terms_cnt_fill_T5', 'wave_high_loc_pct_T5', 'wave_low_loc_pct_T5', \n","#                'b1_co_es_15T1', 'b1_cu_es_15T1', 'b1_upper_wick_ratio_15T', 'b1_lower_wick_ratio_15T']\n","\n","short_datas = [res_df['short_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","long_datas = [res_df['long_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","\n","titles = devided_cols + public_cols"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":4479,"status":"ok","timestamp":1658034578976,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"Sahvc-R0jD1A","outputId":"d8b458c5-24c9-40d3-cc1d-5672d1432ae9"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/numpy/core/fromnumeric.py:3208: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  return asarray(a).size\n","/usr/local/lib/python3.7/dist-packages/matplotlib/cbook/__init__.py:1376: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  X = np.atleast_1d(X.T if isinstance(X, np.ndarray) else np.asarray(X))\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1008x1800 with 20 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(14, len(titles) * 5))\n","nrows, ncols = len(short_datas), 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        )\n","\n","num_samples = 30\n","alpha = 0.8\n","xmin = 0\n","xmax = 10\n","\n","for ings_idx, (title, short_data, long_data) in enumerate(zip(titles, short_datas, long_datas)):\n","  inner_gs = gs[ings_idx].subgridspec(nrows=2, ncols=2)\n","\n","  short_open_data = short_data[short_p1_idx]\n","  long_open_data = long_data[long_p1_idx]\n","\n","  short_true_data = short_open_data[short_bias_arr.ravel()]\n","  # short_false_data = short_open_data[short_false_bias_arr.ravel()]\n","  short_false_data = short_open_data[~short_bias_arr.ravel()]\n","  long_true_data = long_open_data[long_bias_arr.ravel()]\n","  # long_false_data = long_open_data[long_false_bias_arr.ravel()]\n","  long_false_data = long_open_data[~long_bias_arr.ravel()]\n","  \n","  short_true_valid_idx = np.ones_like(short_true_data).astype(bool)\n","  short_false_valid_idx = np.ones_like(short_false_data).astype(bool)\n","  long_true_valid_idx = np.ones_like(long_true_data).astype(bool)\n","  long_false_valid_idx = np.ones_like(long_false_data).astype(bool)\n","\n","  short_true_valid_idx *= ~np.isinf(short_true_data)\n","  short_false_valid_idx *= ~np.isinf(short_false_data)\n","  long_true_valid_idx *= ~np.isinf(long_true_data)\n","  long_false_valid_idx *= ~np.isinf(long_false_data)\n","\n","  try:\n","    short_true_valid_idx *= short_true_data > xmin\n","    short_false_valid_idx *= short_false_data > xmin\n","    long_true_valid_idx *= long_true_data > xmin\n","    long_false_valid_idx *= long_false_data > xmin\n","\n","  except:\n","    pass\n","\n","  try:\n","    short_true_valid_idx *= short_true_data < xmax\n","    short_false_valid_idx *= short_false_data < xmax\n","    long_true_valid_idx *= long_true_data < xmax\n","    long_false_valid_idx *= long_false_data < xmax\n","    \n","  except:\n","    pass\n","    \n","  plt.subplot(inner_gs[0])\n","  ns, bins, patches = plt.hist([short_true_data[short_true_valid_idx], short_false_data[short_false_valid_idx]], \n","           bins=num_samples, alpha=alpha, color=['#00ff00', '#ff0000'], edgecolor='black')  \n","  plt.title('short_' + title)  \n","\n","  plt.subplot(inner_gs[2])\n","  total_ns = np.sum(ns, axis=0)\n","  hist_ratio = ns[0] / total_ns\n","  # valid_idx = total_ns > 1\n","  valid_idx = np.full(len(hist_ratio), True)\n","  valid_hist_ratio = hist_ratio[valid_idx]\n","  plt.hist(bins[:-1][valid_idx], weights=valid_hist_ratio, bins=num_samples, color='#00ff00', edgecolor='black')\n","  plt.ylim(0, 1)\n","  \n","\n","  plt.subplot(inner_gs[1])\n","  ns, bins, patches = plt.hist([long_true_data[long_true_valid_idx], long_false_data[long_false_valid_idx]], \n","           bins=num_samples, alpha=alpha, color=['#00ff00', '#ff0000'], edgecolor='black')\n","  plt.title('long_' + title)\n","  \n","  plt.subplot(inner_gs[3])\n","  total_ns = np.sum(ns, axis=0)\n","  hist_ratio = ns[0] / total_ns\n","  # valid_idx = total_ns > 1\n","  valid_idx = np.full(len(hist_ratio), True)\n","  valid_hist_ratio = hist_ratio[valid_idx]\n","  plt.hist(bins[:-1][valid_idx], weights=valid_hist_ratio, bins=num_samples, color='#00ff00', edgecolor='black')\n","  plt.ylim(0, 1)\n","\n","  \n","# plt.suptitle(title)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"Arnb-kXlC4VF"},"source":["#### tpg & outg survey"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":881},"executionInfo":{"elapsed":2820,"status":"ok","timestamp":1659074362424,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"jHh0uFkXC4VF","outputId":"cf21f56c-faf2-471d-b7e0-5c16e0ff2bdd"},"outputs":[{"output_type":"stream","name":"stdout","text":["223\n","533\n","223\n","533\n","223\n","533\n","223\n","533\n","pkx : [0.05994977 0.14818175 0.35111529 0.74815919]\n","pkx : [0.09816775 0.30374184 0.78029994]\n","\n","56\n","84\n","56\n","84\n","56\n","84\n","56\n","84\n","pkx : [-0.23140658 -0.19827966 -0.16515274 -0.14385686 -0.11072994 -0.07287061 -0.01371539]\n","pkx : [-0.32640606 -0.24710795 -0.18102619 -0.11494443 -0.03234223]\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 864x576 with 4 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# 1. outg 는 partial 을 위한 histogram 작성 진행\n","# 현재, outg 내부에는 tp 한것과 out 한것이 공존하는 상태\n","titles = ['outg', 'tpg']\n","short_max_datas = [short_max_outg[short_bias_arr], short_max_tpg]\n","long_max_datas = [long_max_outg[long_bias_arr], long_max_tpg]\n","\n","# titles = ['tpg']\n","# short_max_datas = [short_max_tpg]\n","# long_max_datas = [long_max_tpg]\n","\n","plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(12, 8))\n","nrows, ncols = 2, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        )\n","  \n","for ings_idx, (title, short_max_data, long_max_data) in enumerate(zip(titles, short_max_datas, long_max_datas)):\n","\n","  inner_gs = gs[ings_idx].subgridspec(nrows=1, ncols=2)\n","  if ings_idx == 0:\n","    axvline = current_outg\n","    title_add = 'true_' + title\n","  else:\n","    axvline = current_tpg\n","    title_add = 'false_' + title\n","\n","  print(len(short_max_data))\n","  print(len(long_max_data))\n","\n","  short_plot_idx = np.ones_like(short_max_data).astype(bool)\n","  long_plot_idx = np.ones_like(long_max_data).astype(bool)\n","  # short_plot_idx = short_max_data <= axvline\n","  # long_plot_idx = long_max_data <= axvline\n","\n","  print(np.sum(short_plot_idx))\n","  print(np.sum(long_plot_idx))    \n","\n","  short_plot_idx *= ~np.isnan(short_max_data)\n","  long_plot_idx *= ~np.isnan(long_max_data)  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(short_plot_idx))\n","  print(np.sum(long_plot_idx))\n","\n","  short_plot_idx *= ~np.isinf(short_max_data)\n","  long_plot_idx *= ~np.isinf(long_max_data)  # nan 과 inf 때문에 이 방식 채택\n","  \n","  print(np.sum(short_plot_idx))\n","  print(np.sum(long_plot_idx))\n","    \n","  plt.subplot(inner_gs[0])\n","  kde_plot_v2(*np.unique(short_max_data[short_plot_idx], return_counts=True))\n","  plt.title('short_' + title_add)  \n","  plt.axvline(axvline, color='red', linewidth=3)\n","\n","  plt.subplot(inner_gs[1])\n","  kde_plot_v2(*np.unique(long_max_data[long_plot_idx], return_counts=True))\n","  plt.title('long_' + title_add)\n","  plt.axvline(axvline, color='red', linewidth=3)\n","\n","  print()\n","\n","# plt.suptitle(title)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"mScdfR9hmjVu"},"source":["#### legacy"]},{"cell_type":"markdown","metadata":{"id":"xivLUsSGC4VF"},"source":["##### outg survey for precision (eploc vars. dependency)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LB28R3QIjCDc"},"outputs":[],"source":["# ------------ dependent vars. ------------ #\n","# res_df 에 존재하는 col 는 모두 사용가능함\n","# ------ 1. 도출한 outg 와 vars. pairing 진행 (by valid_idx) ------ #\n","devided_cols = ['tr_{}'.format(strat_version)]  # , 'ir_5T'\n","public_cols = ['wave_body_ratio']  # 'abs_ratio_5T', 'rel_ratio_5T', 'body_rel_ratio_5T'\n","\n","short_datas = [res_df['short_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","long_datas = [res_df['long_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","\n","titles = devided_cols + public_cols"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nX9TpLcvFu7T"},"outputs":[],"source":["plot_outg_range = (-1, 10)\n","plot_data_range = (-10, 100)\n","\n","plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(12, 18))\n","nrows, ncols = len(short_datas), 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        )\n","\n","for ings_idx, (title, short_data, long_data) in enumerate(zip(titles, short_datas, long_datas)):\n","  inner_gs = gs[ings_idx].subgridspec(nrows=1, ncols=2)\n","\n","  print(len(long_max_outg))\n","\n","  short_plot_idx = (plot_outg_range[0] <= short_max_outg) & (short_max_outg <= plot_outg_range[1])\n","  long_plot_idx = (plot_outg_range[0] <= long_max_outg) & (long_max_outg <= plot_outg_range[1])  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_open_data = short_data[short_open_idx]\n","  long_open_data = long_data[long_open_idx]\n","  \n","  short_plot_idx *= (plot_data_range[0] <= short_open_data) * (short_open_data <= plot_data_range[1])\n","  long_plot_idx *= (plot_data_range[0] <= long_open_data) * (long_open_data <= plot_data_range[1]) # nan 과 inf 때문에 이 방식 채택\n","\n","  short_plot_idx *= ~np.isnan(short_open_data)\n","  long_plot_idx *= ~np.isnan(long_open_data)  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_plot_idx *= ~np.isinf(short_open_data)\n","  long_plot_idx *= ~np.isinf(long_open_data)  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_true_idx = short_plot_idx * short_true_open_idxth\n","  long_true_idx = long_plot_idx * long_true_open_idxth\n","  \n","  short_false_idx = short_plot_idx * ~short_true_open_idxth\n","  long_false_idx = long_plot_idx * ~long_true_open_idxth\n","\n","  plt.subplot(inner_gs[0])\n","  # ------ true_bias ------ #\n","  x, y = short_max_outg[short_true_idx].ravel(), short_open_data[short_true_idx].ravel()  \n","  plt.scatter(x, y, color='white', alpha=0.5)\n","  # ------ false_bias ------ #\n","  x, y = short_max_outg[short_false_idx].ravel(), short_open_data[short_false_idx].ravel()\n","  plt.scatter(x, y, color='fuchsia', alpha=0.3)\n","  plt.axvline(current_outg, color='red', linewidth=3)\n","  plt.title(\"{} coef : {:0.3f}\".format(title, np.corrcoef(-x, y)[0, 1]))\n","\n","  plt.subplot(inner_gs[1])    \n","  # ------ true_bias ------ #\n","  x, y = long_max_outg[long_true_idx].ravel(), long_open_data[long_true_idx].ravel()  \n","  plt.scatter(x, y, color='white', alpha=0.5)\n","  # ------ false_bias ------ #\n","  x, y = long_max_outg[long_false_idx].ravel(), long_open_data[long_false_idx].ravel()\n","  plt.scatter(x, y, color='fuchsia', alpha=0.3)\n","  plt.axvline(current_outg, color='red', linewidth=3)\n","  plt.title(\"{} coef : {:0.3f}\".format(title, np.corrcoef(-x, y)[0, 1]))\n","\n","  print()  \n","\n","# plt.suptitle(title)\n","plt.show()\n","# print()"]},{"cell_type":"markdown","metadata":{"id":"983aUwM76s6X"},"source":["#### dump"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"p_e8PtFXa7mc"},"outputs":[],"source":["# len(np.unique(long_obj[-1]))\n","p1_hhm_p1_idx = long_obj[-1]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nLZDkNNxbZPO"},"outputs":[],"source":["p1_hlm_p1_idx = long_obj[-1]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":261,"status":"ok","timestamp":1653452376525,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"WhCPOi1qbkHS","outputId":"e3b8db71-3e48-4177-a3fe-9f891a362596"},"outputs":[{"data":{"text/plain":["array([350065., 440065., 502833., 735204., 836258.])"]},"execution_count":161,"metadata":{},"output_type":"execute_result"}],"source":["# len(p1_hhm_p1_idx[~np.isin(p1_hhm_p1_idx, p1_hlm_p1_idx)])\n","p1_hlm_p1_idx[~np.isin(p1_hlm_p1_idx, p1_hhm_p1_idx)]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wgERZ65F5RBB"},"outputs":[],"source":["org_p1_idx = long_p2_idx_arr  # long_obj[-1]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rAao95SEnOY0"},"outputs":[],"source":["new_p1_idx = long_p2_idx_arr  # long_obj[-1]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":267,"status":"ok","timestamp":1653119592395,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"OEQ9KWXVnQ2J","outputId":"85c3e998-5c1e-4b5a-8366-28fe8cc3639b"},"outputs":[{"name":"stdout","output_type":"stream","text":["153\n","163\n"]},{"data":{"text/plain":["array([ 35609, 105164, 188999, 347399, 358994, 379304, 379544, 397274, 482474, 550919, 656774, 833129])"]},"execution_count":220,"metadata":{},"output_type":"execute_result"}],"source":["uniq_org_p1_idx = np.unique(org_p1_idx)\n","uniq_new_p1_idx = np.unique(new_p1_idx)\n","print(len(uniq_org_p1_idx))\n","print(len(uniq_new_p1_idx))\n","uniq_new_p1_idx[~np.isin(uniq_new_p1_idx, uniq_org_p1_idx)]\n","# np.unique(new_p1_idx).remove(np.unique(org_p1_idx))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hOtCGUeBQ4hn"},"outputs":[],"source":["open_idx = open_info_df.index.to_numpy()\n","# len_df = len(res_df)\n","# s_idx = (open_idx < int(len_df * (1 - test_ratio))) == plot_is\n","# s_open_info_df = open_info_df[s_idx]\n","# s_open_idx = open_idx[s_idx]\n","\n","# open_info_list = [s_open_info_df[col_].to_numpy() for col_ in s_open_info_df.columns]\n","# side_arr, zone_arr, id_arr, id_idx_arr = open_info_list\n","\n","long_open_ = res_df['long_open_{}'.format(config.selection_id)].to_numpy()\n","short_open_ = res_df['short_open_{}'.format(config.selection_id)].to_numpy()\n","\n","long_open_idx = get_index_bybool(long_open_, np.arange(len(res_df)))\n","short_open_idx = get_index_bybool(short_open_, np.arange(len(res_df)))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QPhjkZQhRLqr"},"outputs":[],"source":["valid_long_open_idx = long_open_idx[~np.isnan(long_open_idx)]\n","valid_short_open_idx = short_open_idx[~np.isnan(short_open_idx)]\n","\n","# print(valid_long_open_idx[valid_long_open_idx > 4000][:10])\n","# print(valid_short_open_idx[valid_short_open_idx > 4000][:10])\n","\n","print(open_idx[open_idx > 4000][:10])\n","\n","print(np.hstack((long_obj[-1], long_obj[3]))[:10])\n","print(np.hstack((short_obj[-1], short_obj[3]))[:10])\n","# print([:10])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cFd7Fz0Y6ucU"},"outputs":[],"source":["# short_max_outg, short_outg_open_idx = get_max_outg_v2(\"SELL\", config, ohlc_list, short_obj, short_tpout_arr, short_open_epout_0, short_open_epout_gap)\n","# long_max_outg, long_outg_open_idx = get_max_outg_v2(\"BUY\", config, ohlc_list, long_obj, long_tpout_arr, long_open_epout_0, long_open_epout_gap)\n","# short_max_outg, short_open_idx, short_true_open_idxth = get_max_outg_v3(\"SELL\", config, ohlc_list, short_obj, short_tpout_arr, short_open_epout_0, short_open_epout_gap)\n","# long_max_outg, long_open_idx, long_true_open_idxth = get_max_outg_v3(\"BUY\", config, ohlc_list, long_obj, long_tpout_arr, long_open_epout_0, long_open_epout_gap)"]},{"cell_type":"markdown","metadata":{"id":"EtjwB7Qk-Grj"},"source":["### significance_v4"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":54864,"status":"ok","timestamp":1660577567405,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"oVifICO4-Grk","outputId":"c82b56a6-e10b-4f3a-9364-41cbdffdb937"},"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42240\n","WARNING:root:np.sum(long_open_res2 == 1) : 42048\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n","WARNING:root:wave_time_ratio\n","WARNING:root:np.sum(short_open_res1 == 1) : 14684\n","WARNING:root:np.sum(long_open_res1 == 1) : 14406\n","WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 4860\n","WARNING:root:np.sum(long_open_res1 == 1) : 5720\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9912905693054199\n","get_open_info_df elapsed time : 1.119309425354004\n","en_ex_pairing elapsed time : 0.2864546775817871\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42240\n","WARNING:root:np.sum(long_open_res2 == 1) : 42048\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n","WARNING:root:wave_time_ratio\n","WARNING:root:np.sum(short_open_res1 == 1) : 13022\n","WARNING:root:np.sum(long_open_res1 == 1) : 12573\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.24003958702087402\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 4618\n","WARNING:root:np.sum(long_open_res1 == 1) : 5349\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9702315330505371\n","get_open_info_df elapsed time : 1.1136088371276855\n","en_ex_pairing elapsed time : 0.28760790824890137\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42240\n","WARNING:root:np.sum(long_open_res2 == 1) : 42048\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n","WARNING:root:wave_time_ratio\n","WARNING:root:np.sum(short_open_res1 == 1) : 11398\n","WARNING:root:np.sum(long_open_res1 == 1) : 10987\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.23279881477355957\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 4304\n","WARNING:root:np.sum(long_open_res1 == 1) : 4964\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9772036075592041\n","get_open_info_df elapsed time : 1.1121675968170166\n","en_ex_pairing elapsed time : 0.2862434387207031\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42240\n","WARNING:root:np.sum(long_open_res2 == 1) : 42048\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n","WARNING:root:wave_time_ratio\n","WARNING:root:np.sum(short_open_res1 == 1) : 9742\n","WARNING:root:np.sum(long_open_res1 == 1) : 9447\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.23788022994995117\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 3920\n","WARNING:root:np.sum(long_open_res1 == 1) : 4524\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9769313335418701\n","get_open_info_df elapsed time : 1.113098382949829\n","en_ex_pairing elapsed time : 0.29978251457214355\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42240\n","WARNING:root:np.sum(long_open_res2 == 1) : 42048\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n","WARNING:root:wave_time_ratio\n","WARNING:root:np.sum(short_open_res1 == 1) : 8494\n","WARNING:root:np.sum(long_open_res1 == 1) : 8127\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.24538660049438477\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 3588\n","WARNING:root:np.sum(long_open_res1 == 1) : 4104\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9852426052093506\n","get_open_info_df elapsed time : 1.1182096004486084\n","en_ex_pairing elapsed time : 0.256350040435791\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42240\n","WARNING:root:np.sum(long_open_res2 == 1) : 42048\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n","WARNING:root:wave_time_ratio\n","WARNING:root:np.sum(short_open_res1 == 1) : 7245\n","WARNING:root:np.sum(long_open_res1 == 1) : 6900\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.23582172393798828\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 3233\n","WARNING:root:np.sum(long_open_res1 == 1) : 3674\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9720909595489502\n","get_open_info_df elapsed time : 1.1168534755706787\n","en_ex_pairing elapsed time : 0.23292207717895508\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42240\n","WARNING:root:np.sum(long_open_res2 == 1) : 42048\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n","WARNING:root:wave_time_ratio\n","WARNING:root:np.sum(short_open_res1 == 1) : 6301\n","WARNING:root:np.sum(long_open_res1 == 1) : 5987\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.22757911682128906\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 2942\n","WARNING:root:np.sum(long_open_res1 == 1) : 3286\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9739437103271484\n","get_open_info_df elapsed time : 1.1390419006347656\n","en_ex_pairing elapsed time : 0.21771883964538574\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42240\n","WARNING:root:np.sum(long_open_res2 == 1) : 42048\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n","WARNING:root:wave_time_ratio\n","WARNING:root:np.sum(short_open_res1 == 1) : 5365\n","WARNING:root:np.sum(long_open_res1 == 1) : 5122\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.22835493087768555\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 2606\n","WARNING:root:np.sum(long_open_res1 == 1) : 2924\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9923019409179688\n","get_open_info_df elapsed time : 1.1408772468566895\n","en_ex_pairing elapsed time : 0.19428110122680664\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42240\n","WARNING:root:np.sum(long_open_res2 == 1) : 42048\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n","WARNING:root:wave_time_ratio\n","WARNING:root:np.sum(short_open_res1 == 1) : 4711\n","WARNING:root:np.sum(long_open_res1 == 1) : 4490\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.22899723052978516\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 2367\n","WARNING:root:np.sum(long_open_res1 == 1) : 2642\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9736478328704834\n","get_open_info_df elapsed time : 1.128516674041748\n","en_ex_pairing elapsed time : 0.1870872974395752\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42240\n","WARNING:root:np.sum(long_open_res2 == 1) : 42048\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n","WARNING:root:wave_time_ratio\n","WARNING:root:np.sum(short_open_res1 == 1) : 4042\n","WARNING:root:np.sum(long_open_res1 == 1) : 3853\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.22847270965576172\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 2100\n","WARNING:root:np.sum(long_open_res1 == 1) : 2331\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 1.0014326572418213\n","get_open_info_df elapsed time : 1.1383976936340332\n","en_ex_pairing elapsed time : 0.16617369651794434\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42240\n","WARNING:root:np.sum(long_open_res2 == 1) : 42048\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n","WARNING:root:wave_time_ratio\n","WARNING:root:np.sum(short_open_res1 == 1) : 3565\n","WARNING:root:np.sum(long_open_res1 == 1) : 3389\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.23203444480895996\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 1909\n","WARNING:root:np.sum(long_open_res1 == 1) : 2096\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9996623992919922\n","get_open_info_df elapsed time : 1.1266658306121826\n","en_ex_pairing elapsed time : 0.15009403228759766\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42240\n","WARNING:root:np.sum(long_open_res2 == 1) : 42048\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n","WARNING:root:wave_time_ratio\n","WARNING:root:np.sum(short_open_res1 == 1) : 3101\n","WARNING:root:np.sum(long_open_res1 == 1) : 2920\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.21766376495361328\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 1698\n","WARNING:root:np.sum(long_open_res1 == 1) : 1861\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9762172698974609\n","get_open_info_df elapsed time : 1.1154649257659912\n","en_ex_pairing elapsed time : 0.134476900100708\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42240\n","WARNING:root:np.sum(long_open_res2 == 1) : 42048\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n","WARNING:root:wave_time_ratio\n","WARNING:root:np.sum(short_open_res1 == 1) : 2761\n","WARNING:root:np.sum(long_open_res1 == 1) : 2587\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.2238919734954834\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 1550\n","WARNING:root:np.sum(long_open_res1 == 1) : 1665\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9701650142669678\n","get_open_info_df elapsed time : 1.120518445968628\n","en_ex_pairing elapsed time : 0.11980915069580078\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42240\n","WARNING:root:np.sum(long_open_res2 == 1) : 42048\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n","WARNING:root:wave_time_ratio\n","WARNING:root:np.sum(short_open_res1 == 1) : 2422\n","WARNING:root:np.sum(long_open_res1 == 1) : 2246\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.22379755973815918\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 1393\n","WARNING:root:np.sum(long_open_res1 == 1) : 1485\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9762673377990723\n","get_open_info_df elapsed time : 1.1230545043945312\n","en_ex_pairing elapsed time : 0.11132669448852539\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42240\n","WARNING:root:np.sum(long_open_res2 == 1) : 42048\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n","WARNING:root:wave_time_ratio\n","WARNING:root:np.sum(short_open_res1 == 1) : 2165\n","WARNING:root:np.sum(long_open_res1 == 1) : 2003\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.21326851844787598\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 1275\n","WARNING:root:np.sum(long_open_res1 == 1) : 1345\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9717617034912109\n","get_open_info_df elapsed time : 1.1186952590942383\n","en_ex_pairing elapsed time : 0.09841537475585938\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42240\n","WARNING:root:np.sum(long_open_res2 == 1) : 42048\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n","WARNING:root:wave_time_ratio\n","WARNING:root:np.sum(short_open_res1 == 1) : 1908\n","WARNING:root:np.sum(long_open_res1 == 1) : 1785\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.21537470817565918\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 1153\n","WARNING:root:np.sum(long_open_res1 == 1) : 1208\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.967862606048584\n","get_open_info_df elapsed time : 1.1132185459136963\n","en_ex_pairing elapsed time : 0.09138727188110352\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42240\n","WARNING:root:np.sum(long_open_res2 == 1) : 42048\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n","WARNING:root:wave_time_ratio\n","WARNING:root:np.sum(short_open_res1 == 1) : 1736\n","WARNING:root:np.sum(long_open_res1 == 1) : 1604\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.21971392631530762\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 1057\n","WARNING:root:np.sum(long_open_res1 == 1) : 1105\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9735586643218994\n","get_open_info_df elapsed time : 1.1202800273895264\n","en_ex_pairing elapsed time : 0.08235740661621094\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42240\n","WARNING:root:np.sum(long_open_res2 == 1) : 42048\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n","WARNING:root:wave_time_ratio\n","WARNING:root:np.sum(short_open_res1 == 1) : 1553\n","WARNING:root:np.sum(long_open_res1 == 1) : 1411\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.21437716484069824\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 957\n","WARNING:root:np.sum(long_open_res1 == 1) : 987\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9798078536987305\n","get_open_info_df elapsed time : 1.1410536766052246\n","en_ex_pairing elapsed time : 0.07582592964172363\n","idep_plot elapsed time : 0.21589303016662598\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1728x576 with 36 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# from google.colab import output\n","# ------------ survey param ------------ #\n","# itv_num_list = [1, 3, 5, 15]\n","# itv_list = ['15m', '30m', '1h', '4h']\n","# itv_list = ['3m', '5m', '15m', '30m', '1h', '4h']\n","val_list = np.arange(1, 10, 0.5)     # prcn 1\n","# val_list = np.arange(-0.5, 0.5, 0.05)  # prcn 2\n","# val_list = np.arange(-0.5, 0., 0.03)  # prcn 2\n","# val_list = np.arange(-0.5, -0.6, -0.005)    # prcn 3\n","# val_list = np.arange(0.944, 0.945, 0.0001)    # prcn 4\n","# val_list = np.arange(1, 10, 1)   # prcn -1\n","# val_list = np.arange(100, 120, 1)   # prcn -2\n","# val_list = talib.get_function_groups()['Pattern Recognition']\n","\n","# ------------ get survey_res ------------ #\n","result = []\n","res_shape = (3, 12)  # short, long, both x data\n","config_list_copy = copy.deepcopy(config_list)\n","for set_val in val_list:\n","  # ------------ open 결정 이전의 인자값 ------------ #\n","  # ------ point * dur. ------ #\n","  # config_list_copy[0].loc_set.point1.wrr_32 = set_val\n","  # config_list_copy[0].loc_set.point1.candle_pattern = set_val\n","  # config_list_copy[0].loc_set.zone.degree_list = set_val\n","  # config_list_copy[0].loc_set.point2.wick_score_list = str([set_val])\n","  # config_list_copy[0].loc_set.zone.ir = set_val  \n","  # config_list_copy[0].loc_set.zone.abs_ratio = set_val\n","\n","  # ------------ open 결정 이후의 인자값 ------------ #\n","  # ------ utils ------ #\n","  # config_list_copy[0].tr_set.tp_gap = set_val  \n","  # config_list_copy[0].tr_set.ep_gap1 = set_val \n","  # config_list_copy[0].tr_set.ep_gap2 = set_val \n","  # config_list_copy[0].tr_set.out_gap = set_val  \n","  # config_list_copy[0].tr_set.wave_length1 = set_val  \n","  config_list_copy[0].tr_set.wave_time_ratio1 = set_val\n","\n","  # config_list_copy[0].tr_set.tp_gap = abs(set_val) - 0.5\n","  # config_list_copy[0].tr_set.out_gap = set_val + 0.5\n","  # config_list_copy[0].tr_set.wb_tp_gap = config_list_copy[0].tr_set.tp_gap\n","  # config_list_copy[0].tr_set.wb_out_gap = config_list_copy[0].tr_set.out_gap\n","\n","  # ------ entry, exit (ep, tp, out vars.) ------ #\n","  # config_list_copy[0].tr_set.expire_k = set_val\n","  # config_list_copy[0].ep_set.expire_tick = set_val  \n"," \n","  for utils_, config_ in zip(utils_list, config_list_copy):\n","    enlist_tr(res_df, config_, np_timeidx)\n","  # open_info_df = get_open_info_df(ep_loc_v3, res_df, np_timeidx, ID_list, config_list_copy, id_idx_list)   # point * mr_res 이기 때문에 utils_tr & rtc 의 영향을 충분히 받음\n","  open_info_df1 = get_open_info_df_v2(ep_loc_p1_v3, res_df, np_timeidx, ID_list, config_list_copy, id_idx_list, open_num=1)  # --> point * dur. 관련 (loc_set) param 에 종속 (open_info 가 변경되는게 아니라면, 재실행할 필요없음)\n","  open_info_df2 = get_open_info_df_v2(ep_loc_p2_v3, res_df, np_timeidx, ID_list, config_list_copy, id_idx_list, open_num=2)\n","  open_info_df_list = [open_info_df1, open_info_df2]\n","\n","  try:\n","    result.append(get_res_v9(res_df, open_info_df_list, ohlc_list, config_list_copy, np_timeidx, funcs, test_ratio=test_ratio, plot_is=1, signi=True))    \n","  except:\n","    result.append(np.full(res_shape, np.nan))\n","    # pass\n","\n","survey_res_list = [np.array(result)[:, s_i::3] for s_i in range(3)]   # 3 for s, l, b\n","# short_res, long_res, both_res = survey_res_list\n","\n","# ------------ plot survey_res ------------ #\n","title_list = [\"short\", \"long\", \"both\"]\n","sub_title_list = ['hhm', 'hlm', 'frq', 'dpf', 'wr', 'sr', 'acc_pr', 'sum_pr', 'min_pr', 'liqd', 'acc_mdd', 'sum_mdd']\n","space_ = \" \" * 120\n","\n","fig = plt.figure(figsize=(24, 8))\n","plt.style.use('dark_background')\n","gs = gridspec.GridSpec(nrows=1,\n","                        ncols=3,\n","                        # height_ratios=[1, 1, 1]\n","                      )\n","# nrows, ncols, h_r = 3, 3, [1, 1, 1]\n","nrows, ncols, h_r = 3, 4, [1, 1, 1]\n","# nrows, ncols, h_r = 4, 3, [1, 1, 1, 1]\n","# if d_idx == 0:\n","# else:\n","  # nrows, ncols, h_r = 2, 2, [1, 1]\n","\n","for d_idx, (title_name, survey_res) in enumerate(zip(title_list, survey_res_list)):  \n","  inner_gs = gs[d_idx].subgridspec(nrows=nrows,\n","                        ncols=ncols,\n","                        height_ratios=h_r\n","                      )\n","  for in_idx, (data_, sub_title) in enumerate(zip(survey_res.T, sub_title_list)):\n","    plt.subplot(inner_gs[in_idx])\n","    data = data_.ravel()\n","    valid_idx = ~np.isnan(data)\n","    if np.sum(valid_idx) > 0:\n","      if type(val_list[0]) == str:\n","        x, y = np.arange(len(val_list))[valid_idx], data[valid_idx]\n","      else:\n","        x, y = val_list[valid_idx], data[valid_idx]\n","      plt.plot(x, y)  # 앞에서부터 len(result) 만큼만    \n","      plt.title(sub_title + '_{:.2f}'.format(x[np.argmax(y)]))\n","    else:\n","      plt.title(sub_title)\n","\n","plt.suptitle(space_.join(title_list))\n","plt.show()\n","# print(\"\\n\")"]},{"cell_type":"markdown","metadata":{"id":"EJ4f-3Zf4ImT"},"source":["### backtrader validation"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BPI-9QX74ImW"},"outputs":[],"source":["trade_log_name = \"ETHUSDT_1658210884.pkl\"\n","trade_log_dir_path = \"./trade_log/0717_5_47_trader\"\n","\n","with open(os.path.join(trade_log_dir_path, trade_log_name), 'rb') as f:\n","  trade_log = pickle.load(f)"]},{"cell_type":"code","source":["trade_log  # both pos_side's log"],"metadata":{"id":"9Kymnik4ZpA6"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DiTKuq9T4ImY","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658222594162,"user_tz":-540,"elapsed":431,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"a06c3f6a-311d-4a7d-c425-00563fd8980f"},"outputs":[{"output_type":"stream","name":"stdout","text":["lacked_open_ts : []\n","added_open_ts : ['2022-01-14 17:27:59.999000']\n","\n","lacked_entry_ts : []\n","added_entry_ts : ['2022-01-14 17:28:59.999000']\n","\n","lacked_exit_ts : []\n","added_exit_ts : ['2022-01-14 19:53:59.999000']\n","\n"]}],"source":["# 1. ts 에 pair 된 en_p, ex_p 만 비교하면 될 것\n","#   -> open_idx, en_idx, ex_idx 조회하면 될 것\n","\n","pos_side = \"SELL\" # BUY\n","val_obj = short_obj if pos_side == \"SELL\" else long_obj\n","\n","# ------ get idep trade_info ------ #\n","op_ts = list(map(lambda x : str(x), res_df.index[val_obj[4].astype(int).ravel()])) \n","en_ts = list(map(lambda x : str(x), res_df.index[val_obj[2].astype(int).ravel()])) \n","ex_ts = list(map(lambda x : str(x), res_df.index[val_obj[3].astype(int).ravel()])) \n","en_p = val_obj[0].ravel()\n","ex_p = val_obj[1].ravel()\n","\n","for order_type, ts_ in zip(['open', 'entry', 'exit'], [op_ts, en_ts, ex_ts]):\n","  trade_log_ts = [k for k, v in trade_log.items() if order_type in v if pos_side in v]\n","  lacked_ts = [ts for ts in ts_ if not ts in trade_log_ts]\n","  added_ts = [ts for ts in trade_log_ts if not ts in ts_]\n","\n","  print(\"lacked_{}_ts :\".format(order_type), lacked_ts)\n","  print(\"added_{}_ts :\".format(order_type), added_ts)\n","  print()"]},{"cell_type":"code","source":["# ex_ts\n","# [k for k, v in trade_log.items() if order_type in v if pos_side in v]\n","# list(trade_log.keys())[1]\n","res_df.iloc[-0:]"],"metadata":{"id":"ZlcPZeuO-UnB"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### check added_ts"],"metadata":{"id":"bPfWgZCI73LZ"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"VnTmGTJI4ImZ"},"outputs":[],"source":["keys = list(trade_log.keys())\n","\n","for k_i in range(len(keys)):\n","  if keys[k_i] in added_ts:\n","    # print(trade_log[keys[k_i]])\n","    # print(trade_log[keys[k_i + 1]])\n","    print(keys[k_i], trade_log[keys[k_i]])\n","    print(keys[k_i + 1], trade_log[keys[k_i + 1]])"]},{"cell_type":"markdown","source":["#### price sync_check"],"metadata":{"id":"yMFIedEG77Yt"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"Vn5x7mcP4ImZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658223074884,"user_tz":-540,"elapsed":378,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"96d56d1e-03f6-472a-cddd-5f449f3001ba"},"outputs":[{"output_type":"stream","name":"stdout","text":["2022-01-17 03:19:59.999000 -0.00580000000036307\n","\n","2022-01-18 16:49:59.999000 0.0\n","\n","2022-01-27 05:56:59.999000 -0.007399999999961437\n","\n","2022-01-27 11:51:59.999000 0.0\n","\n","2022-02-03 01:29:59.999000 0.0\n","\n","2022-02-05 10:58:59.999000 0.0\n","\n","2022-02-08 17:00:59.999000 -0.00559999999950378\n","\n","2022-02-13 07:03:59.999000 -0.003800000000410364\n","\n","2022-02-16 10:32:59.999000 -0.0039999999999054126\n","\n","2022-02-16 13:43:59.999000 0.0\n","\n"]}],"source":["accept_price_gap = 0.1\n","for i in range(len(en_ts)):\n","  try:\n","    print(en_ts[i], trade_log[en_ts[i]][0] - en_p[i])\n","    # print(trade_log[str(ex_ts[i])])\n","    # print(ex_ts[i], trade_log[ex_ts[i]][0] - ex_p[i])\n","    # print(ex_ts[i])\n","    print()\n","\n","  except Exception as e:\n","    print(e)\n"]},{"cell_type":"markdown","metadata":{"id":"1GVZ03zDyU2N"},"source":["### legacy"]},{"cell_type":"markdown","metadata":{"id":"IWO7KkqltMFt"},"source":["#### main_functions"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MY1csdNRLGsk"},"outputs":[],"source":["def get_open_info_df_v2(ep_loc_v2, res_df, np_timeidx, ID_list, config_list, id_idx_list, open_num=1):\n","  start_0 = time.time()\n","  # ------ get mr_res, zone_arr ------ #\n","  short_mr_res_obj = np.array([ep_loc_v2(res_df, config_, np_timeidx, show_detail=True, ep_loc_side=OrderSide.SELL) for config_ in config_list])\n","  long_mr_res_obj = np.array([ep_loc_v2(res_df, config_, np_timeidx, show_detail=True, ep_loc_side=OrderSide.BUY) for config_ in config_list])\n","  short_open_idx_list = [np.where(res_df['short_open{}_{}'.format(open_num, id)].to_numpy() * mr_res)[0] for id, mr_res in zip(ID_list, short_mr_res_obj[:, 0].astype(np.float64))]   # \"point * mr_Res\"\n","  long_open_idx_list = [np.where(res_df['long_open{}_{}'.format(open_num, id)].to_numpy() * mr_res)[0] for id, mr_res in zip(ID_list, long_mr_res_obj[:, 0].astype(np.float64))]  # zip 으로 zone (str) 과 묶어서 dtype 변경됨\n","\n","  # ------ open_info_arr ------ #\n","  short_side_list = [np.full(len(list_), OrderSide.SELL) for list_ in short_open_idx_list]\n","  long_side_list = [np.full(len(list_), OrderSide.BUY) for list_ in long_open_idx_list]\n","\n","  short_zone_list = [zone_res[short_open_idx] for zone_res, short_open_idx in zip(short_mr_res_obj[:, 1], short_open_idx_list)]\n","  long_zone_list = [zone_res[long_open_idx] for zone_res, long_open_idx in zip(long_mr_res_obj[:, 1], long_open_idx_list)]\n","\n","  short_id_list = [np.full(len(list_), id) for id, list_ in zip(ID_list, short_open_idx_list)]\n","  long_id_list = [np.full(len(list_), id) for id, list_ in zip(ID_list, long_open_idx_list)]\n","\n","  selected_id_idx = np.arange(len(id_idx_list))\n","  short_id_idx_list = [np.full(len(list_), id) for id, list_ in zip(selected_id_idx, short_open_idx_list)]\n","  long_id_idx_list = [np.full(len(list_), id) for id, list_ in zip(selected_id_idx, long_open_idx_list)]\n","\n","  # ------ get open_info_df ------ #\n","  #   series 만들어서 short / long 끼리 합치고 둘이 합치고, 중복은 우선 순위 정해서 제거\n","  short_open_df_list = [pd.DataFrame(index=index_, data=np.vstack((data_)).T, columns=['side', 'zone', 'id', 'id_idx']) for index_, data_ in zip(short_open_idx_list, zip(short_side_list, short_zone_list, short_id_list, short_id_idx_list))]\n","  long_open_df_list = [pd.DataFrame(index=index_, data=np.vstack((data_)).T, columns=['side', 'zone', 'id', 'id_idx']) for index_, data_ in zip(long_open_idx_list, zip(long_side_list, long_zone_list, long_id_list, long_id_idx_list))]\n","\n","  open_info_df = pd.concat(short_open_df_list + long_open_df_list)\n","  # ------ sorting + unique ------ #\n","  open_info_df.sort_index(inplace=True)\n","  # print(len(open_info_df))\n","  # print(len(open_info_df))\n","  # open_info_df.head()\n","  print(\"get_open_info_df elapsed time :\", time.time() - start_0)\n","  return open_info_df[~open_info_df.index.duplicated(keep='first')]  # 먼저 순서를 우선으로 지정  "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"eiQ36_SLLE3w"},"outputs":[],"source":["def get_res_v9(res_df, open_info_df_list, ohlc_list, config_list, np_timeidx, funcs, inversion=False, test_ratio=0.3, plot_is=True, signi=False, show_detail=False):\n","  # ------------ make open_info_list ------------ #\n","  open_idx1, open_idx2 = [open_info_df.index.to_numpy() for open_info_df in open_info_df_list]\n","  len_df = len(res_df)\n","\n","  sample_len = int(len_df * (1 - test_ratio))\n","  sample_idx1 = (open_idx1 < sample_len) == plot_is  # in / out sample plot 여부\n","  sample_open_idx1 = open_idx1[sample_idx1]  \n","  sample_idx2 = (open_idx2 < sample_len) == plot_is  # in / out sample plot 여부\n","\n","  # ------------ open_info_list 기준 = p1 ------------ #\n","  sample_open_info_df1, sample_open_info_df2 = [df_[idx_] for df_, idx_ in zip(open_info_df_list, [sample_idx1, sample_idx2])]\n","  open_info1 = [sample_open_info_df1[col_].to_numpy() for col_ in sample_open_info_df1.columns]\n","\n","  if config_list[0].tr_set.check_hlm in [0, 1]:   # 여기서 open_info 자동화하더라도, utils info 는 직접 실행해주어야함\n","    sample_open_idx2 = sample_open_idx1\n","    open_info2 = open_info1\n","  else:\n","    sample_open_idx2 = open_idx2[sample_idx2]\n","    open_info2 = [sample_open_info_df2[col_].to_numpy() for col_ in sample_open_info_df2.columns]\n","\n","  # ------------ get paired_res ------------ #\n","  start_0 = time.time()\n","  paired_res = en_ex_pairing_v9_4(res_df, [sample_open_idx1, sample_open_idx2], [open_info1, open_info2], ohlc_list, config_list, np_timeidx, funcs, show_detail)\n","  # valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr = paired_res\n","  print(\"en_ex_pairing elapsed time :\", time.time() - start_0)  #  0.37 --> 0.3660471439361572 --> 0.21(lesser if)\n","\n","  # ------------ idep_plot ------------ #\n","  start_0 = time.time()\n","  high, low = ohlc_list[1:3]\n","  res = idep_plot_v16_2(res_df, len_df, config_list[0], high, low, sample_open_info_df1, paired_res, inversion=inversion, sample_ratio=1 - test_ratio, signi=signi)\n","  print(\"idep_plot elapsed time :\", time.time() - start_0)   # 1.40452 (v6) 1.4311 (v5)\n","\n","  return res"]},{"cell_type":"code","source":["def plot_info_v9(gs, gs_idx, len_df, sample_len, tr, hhm, p2_hhm, out_hhm, mean_low, hlm, bars_in, net_p1_frq, pr, total_pr, cum_pr, liqd, leverage, title_position, fontsize):\n","  try:\n","    plt.subplot(gs[gs_idx])\n","    idep_res_obj = get_res_info_nb_v2(sample_len, pr, total_pr, cum_pr, liqd)\n","    plt.plot(cum_pr)\n","    plt.plot(idep_res_obj[-1], color='gold')\n","    if sample_len is not None:\n","      plt.axvline(sample_len, alpha=1., linestyle='--', color='#ffeb3b')\n","    plt.xlim(0, len_df)\n","\n","    title_str = \"tr : {:.3f}\\n tpbox_hhm : {:.3f}\\n tpbox_p2exec_hhm : {:.3f}\\n outbox_hhm : {:.3f}\\n tpbox_mean_low : {:.3f}\\n hlm : {:.3f}\\n bars_in : {:.3f}\\n net_p1_frq : {}\\n frq : {}\\n dpf : {:.3f}\\n wr : {:.3f}\\n sr : {:.3f}\\n acc_pr : {:.3f}\\n sum_pr : {:.3f}\\n\" +\\\n","              \"min_pr : {:.3f}\\n liqd : {:.3f}\\n acc_mdd : -{:.3f}\\n sum_mdd : -{:.3f}\\n leverage {:.3f}\"\n","    plt.title(title_str.format(tr, hhm, p2_hhm, out_hhm, mean_low, hlm, bars_in, net_p1_frq, *idep_res_obj[:-1], leverage), position=title_position, fontsize=fontsize)\n","  except Exception as e:\n","    print(\"error in plot_info :\", e)\n","\n","  return gs_idx + 1"],"metadata":{"id":"8hdpN7S8JJF-"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xafHpMLwESKf"},"outputs":[],"source":["def idep_plot_v16_2(res_df, len_df, config, high, low, open_info_df1, paired_res, inversion=False, sample_ratio=0.7, title_position=(0.5, 0.5),\n","                  fontsize=15, signi=False):  # open_idx, side_arr\n","    if not signi:\n","        plt.style.use(['dark_background', 'fast'])\n","        plt.figure(figsize=(24, 8))\n","        gs = gridspec.GridSpec(nrows=2,  # row 몇 개\n","                               ncols=3,  # col 몇 개\n","                               height_ratios=[10, 1]\n","                               # height_ratios=[10, 10, 1]\n","                               )\n","    gs_idx = 0\n","    # plt.suptitle(key)\n","\n","    p_ranges, p_qty_ratio = literal_eval(config.tp_set.p_ranges), literal_eval(config.tp_set.p_qty_ratio)\n","    assert np.sum(p_qty_ratio) == 1.0\n","    assert len(p_ranges) == len(p_qty_ratio)\n","\n","    if sample_ratio is not None:\n","        sample_len = int(len_df * sample_ratio)\n","    else:\n","        sample_len = len_df\n","\n","    # ------ short & long data preparation ------ #\n","    # start_0 = time.time()\n","\n","    net_p1_idx_arr, p1_idx_arr, p2_idx_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr, tr_arr = paired_res\n","    assert len(p1_idx_arr) != 0, \"assert len(p1_idx_arr) != 0\"\n","\n","    short_net_p1_idx_arr = net_p1_idx_arr[np.where(open_info_df1.side.loc[net_p1_idx_arr] == OrderSide.SELL)[0]]\n","    long_net_p1_idx_arr = net_p1_idx_arr[np.where(open_info_df1.side.loc[net_p1_idx_arr] == OrderSide.BUY)[0]]\n","\n","    short_net_p1_frq = len(short_net_p1_idx_arr)\n","    long_net_p1_frq = len(long_net_p1_idx_arr)\n","    # print(\"len(short_net_p1_true_bias_bool) :\", len(short_net_p1_idx_arr))\n","    # print(\"len(long_net_p1_true_bias_bool) :\", len(long_net_p1_idx_arr))\n","\n","    short_p1_openi_idx = np.where(open_info_df1.side.loc[p1_idx_arr] == OrderSide.SELL)[0]  # p1_idx_arr 에 대한 idx, # side_arr,\n","    long_p1_openi_idx = np.where(open_info_df1.side.loc[p1_idx_arr] == OrderSide.BUY)[0]\n","\n","    # p1_idx = open_idx[p1_openi_arr].reshape(-1, 1)   # != p1_idx_arr, p1_openi_arr 은 exit_done 기준임\n","\n","    np_obj = np.hstack((pair_price_arr, pair_idx_arr, p1_idx_arr.reshape(-1, 1)))  # p1_idx_arr is 1d, need to be changed to 2d (for stacking)\n","    short_obj = np_obj[short_p1_openi_idx]\n","    long_obj = np_obj[long_p1_openi_idx]\n","    both_obj = np.vstack((short_obj, long_obj))\n","    # print(\"short_obj.shape :\", short_obj.shape)\n","    # print(\"long_obj.shape :\", long_obj.shape)\n","\n","    short_obj, long_obj, both_obj = [np.split(obj_, 5, axis=1) for obj_ in [short_obj, long_obj, both_obj]]\n","\n","    short_p2_idx_arr, long_p2_idx_arr = [p2_idx_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_lvrg_arr, long_lvrg_arr = [lvrg_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_fee_arr, long_fee_arr = [fee_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_tpout_arr, long_tpout_arr = [tpout_arr[openi_idx_] for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    # short_bias_arr, long_bias_arr = [bias_arr[openi_idx_] for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_tr_arr, long_tr_arr = [tr_arr[openi_idx_] for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    # print(\"long_bias_arr.shape :\", long_bias_arr.shape)\n","    # print(\"short / long arr setting elapsed time :\", time.time() - start_0)\n","\n","    # start_0 = time.time()\n","\n","    short_tpbox_hhm, long_tpbox_hhm, short_tpbox_p2exec_hhm, long_tpbox_p2exec_hhm, short_outbox_hhm, long_outbox_hhm, \\\n","          short_net_p1_bias_tick, long_net_p1_bias_tick, short_p2exec_p1_bias_tick, long_p2exec_p1_bias_tick, short_p2_true_bias_bool, long_p2_true_bias_bool, \\\n","          short_tp_1, short_tp_0, long_tp_1, long_tp_0, short_out_1, short_out_0, long_out_1, long_out_0, short_ep2_0, long_ep2_0 = \\\n","      get_wave_bias_v6(res_df, config, high, low, len_df, short_net_p1_idx_arr, long_net_p1_idx_arr, short_p2_idx_arr, long_p2_idx_arr, short_obj, long_obj)\n","\n","    # print(\"get_wave_bias elapsed time :\", time.time() - start_0)\n","    # print(\"short_net_p1_bias_tick, long_net_p1_bias_tick, short_p2exec_p1_bias_tick, long_p2exec_p1_bias_tick :\", short_net_p1_bias_tick, long_net_p1_bias_tick, short_p2exec_p1_bias_tick, long_p2exec_p1_bias_tick)\n","\n","    len_short, len_long = len(short_p1_openi_idx), len(long_p1_openi_idx)\n","\n","    # ------ plot_data ------ #\n","    try:\n","        # start_0 = time.time()\n","        if len_short == 0:\n","            short_pr = []\n","            gs_idx += 1\n","        else:\n","            short_tr = short_tr_arr.mean()\n","            short_pr, short_liqd = get_pr_v4(OrderSide.SELL, high, low, short_obj, short_tpout_arr, short_lvrg_arr, short_fee_arr, p_ranges,\n","                                             p_qty_ratio, inversion)\n","            short_total_pr = to_total_pr(len_df, short_pr, short_obj[-2])\n","            short_cum_pr = np.cumprod(short_total_pr)\n","            short_hlm = hlm(short_pr, short_p2_true_bias_bool)\n","            short_trade_ticks = np.mean(short_obj[-2] - short_obj[-1])\n","            if signi:\n","                short_idep_res_obj = (short_tpbox_p2exec_hhm, short_hlm) + get_res_info_nb_v2(sample_len, short_pr, short_total_pr, short_cum_pr, short_liqd)\n","            else:\n","                gs_idx = plot_info_v8(gs, gs_idx, len_df, sample_len, short_tr, short_tpbox_hhm, short_tpbox_p2exec_hhm, short_outbox_hhm, short_hlm, short_trade_ticks, short_net_p1_frq, short_pr, short_total_pr,\n","                                      short_cum_pr, short_liqd, short_lvrg_arr.mean(), title_position, fontsize)\n","        # print(\"short plot_data elapsed time :\", time.time() - start_0)\n","\n","    except Exception as e:\n","        gs_idx += 1\n","        print(\"error in short plot_data :\", e)\n","\n","    try:\n","        # start_0 = time.time()\n","        if len_long == 0:\n","            long_pr = []\n","            gs_idx += 1\n","        else:\n","            long_tr = long_tr_arr.mean()\n","            long_pr, long_liqd = get_pr_v4(OrderSide.BUY, high, low, long_obj, long_tpout_arr, long_lvrg_arr, long_fee_arr, p_ranges, p_qty_ratio,\n","                                           inversion)\n","            long_total_pr = to_total_pr(len_df, long_pr, long_obj[-2])\n","            long_cum_pr = np.cumprod(long_total_pr)\n","            # long_hhm = long_net_p1_hhm\n","            long_hlm = hlm(long_pr, long_p2_true_bias_bool)\n","            long_trade_ticks = np.mean(long_obj[-2] - long_obj[-1])\n","            if signi:\n","                long_idep_res_obj = (long_tpbox_p2exec_hhm, long_hlm) + get_res_info_nb_v2(sample_len, long_pr, long_total_pr, long_cum_pr, long_liqd)\n","            else:\n","                gs_idx = plot_info_v8(gs, gs_idx, len_df, sample_len, long_tr, long_tpbox_hhm, long_tpbox_p2exec_hhm, long_outbox_hhm, long_hlm, long_trade_ticks, long_net_p1_frq, long_pr, long_total_pr,\n","                                      long_cum_pr, long_liqd, long_lvrg_arr.mean(), title_position, fontsize)\n","        # print(\"long plot_data elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","        gs_idx += 1\n","        print(\"error in long plot_data :\", e)\n","\n","    try:\n","        # start_0 = time.time()\n","        if len_short * len_long == 0:\n","            both_pr = []\n","            gs_idx += 1\n","        else:\n","            both_tr = (short_tr + long_tr) / 2\n","            both_pr = np.vstack((short_pr, long_pr))  # for 2d arr, obj 를 1d 로 만들지 않는 이상, pr 은 2d 유지될 것\n","            both_total_pr = to_total_pr(len_df, both_pr, both_obj[-2])\n","            both_cum_pr = np.cumprod(both_total_pr)\n","            both_liqd = min(short_liqd, long_liqd)\n","            both_p2_true_bias_bool = np.hstack((short_p2_true_bias_bool, long_p2_true_bias_bool))  # hstack for 1d arr, vstack for 2d arr\n","            both_tpbox_hhm = (short_tpbox_hhm + long_tpbox_hhm) / 2\n","            both_tpbox_p2exec_hhm, both_hlm = (short_tpbox_p2exec_hhm + long_tpbox_p2exec_hhm) / 2, (short_hlm + long_hlm) / 2\n","            both_outbox_hhm = (short_outbox_hhm + long_outbox_hhm) / 2\n","            both_trade_ticks = np.mean(both_obj[-2] - both_obj[-1])\n","            both_net_p1_frq = short_net_p1_frq + long_net_p1_frq\n","            if signi:\n","                both_idep_res_obj = (both_tpbox_p2exec_hhm, both_hlm) + get_res_info_nb_v2(sample_len, both_pr, both_total_pr, both_cum_pr, both_liqd)\n","            else:\n","                gs_idx = plot_info_v8(gs, gs_idx, len_df, sample_len, both_tr, both_tpbox_hhm, both_tpbox_p2exec_hhm, both_outbox_hhm, both_hlm, both_trade_ticks, both_net_p1_frq, both_pr, both_total_pr,\n","                                      both_cum_pr, both_liqd, lvrg_arr.mean(), title_position, fontsize)\n","        # print(\"both plot_data elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","        gs_idx += 1\n","        print(\"error in both plot_data :\", e)\n","\n","    if not signi:\n","        if len_short * len_long > 0:\n","            for obj, bias_arr, cum_pr in zip([short_obj, long_obj, both_obj], [short_p2_true_bias_bool, long_p2_true_bias_bool, both_p2_true_bias_bool],\n","                                             [short_cum_pr, long_cum_pr, both_cum_pr]):\n","                try:\n","                    # start_0 = time.time()\n","                    gs_idx = frq_dev_plot_v4(gs, gs_idx, len_df, sample_len, obj[-2], bias_arr, cum_pr[-1], fontsize)\n","                    # print(\"frq_dev_plot elapsed time :\", time.time() - start_0)\n","                except Exception as e:\n","                    gs_idx += 1\n","                    print(\"error in frq_dev_plot :\", e)\n","            plt.show()\n","            plt.close()\n","\n","        return short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_tr_arr, short_p2_true_bias_bool, short_net_p1_bias_tick, short_p2exec_p1_bias_tick, short_net_p1_idx_arr, short_p2_idx_arr, short_tp_1, short_tp_0, short_out_1, short_out_0, short_ep2_0, \\\n","               long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_tr_arr, long_p2_true_bias_bool, long_net_p1_bias_tick, long_p2exec_p1_bias_tick, long_net_p1_idx_arr, long_p2_idx_arr, long_tp_1, long_tp_0, long_out_1, long_out_0, long_ep2_0  # long_net_p1_idx_arr long_p2_idx_arr\n","\n","    else:\n","        return [short_idep_res_obj[:-1], long_idep_res_obj[:-1], both_idep_res_obj[:-1]]"]},{"cell_type":"markdown","metadata":{"id":"EFyWTuscH8VH"},"source":["#### get paired_res function"]},{"cell_type":"code","execution_count":48,"metadata":{"id":"qfbtFVMR01UJ","executionInfo":{"status":"ok","timestamp":1662358456946,"user_tz":-540,"elapsed":343,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["def en_ex_pairing_v9_4(res_df, open_idx_list, open_info_list, ohlc_list, config_list, np_timeidx, funcs, show_detail=False):  # 이미 충분히 줄여놓은 idx 임\n","\n","    open_info1, open_info2 = open_info_list\n","    side_arr1, _, _, id_idx_arr1 = open_info1\n","    side_arr2, _, _, _ = open_info2\n","\n","    expiry_p1, expiry_p2, lvrg_set = funcs\n","\n","    net_p1_idx_list, p1_idx_list, p2_idx_list, pair_idx_list, pair_price_list, lvrg_list, fee_list, tpout_list, tr_list = [[] for li in range(9)]\n","    len_df = len(res_df)\n","\n","    open, high, low, close = ohlc_list\n","    \n","    open_idx1, open_idx2 = open_idx_list\n","    len_open_idx1 = len(open_idx1)\n","    len_open_idx2 = len(open_idx2)\n","    i, open_i1, open_i2 = 0, -1, -1  # i for total_res_df indexing\n","\n","    while 1:   # for p1's loop\n","\n","        # Todo, \n","        #   1. (갱신) p1's open_i + 1 과 op_idx 를 꺼내오는 건, eik1 또는 tp 체결의 경우만 해당됨, \n","        #   2. out 의 경우 p2's op_idx 기준으로 retry 필요\n","        #     a. 또한, p2's op_idx > p1's op_idx\n","\n","        # ============ get p1_info ============ #\n","        # if eik1 or tp_done or first loop:\n","        open_i1 += 1  # 확인 끝났으면 조기 이탈(+1), 다음 open_idx 조사 진행\n","        if open_i1 >= len_open_idx1:\n","            break\n","\n","        if show_detail:\n","            print(\"open_i1 :\", open_i1, side_arr1[open_i1])\n","\n","        op_idx1 = open_idx1[open_i1]  # open_i1 는 i 와 별개로 운영\n","        if op_idx1 < i:  # i = 이전 거래 끝난후의 res_df index - \"거래 종료후 거래 시작\", '<' : 거래 종료시점 진입 가능하다는 의미\n","            continue\n","\n","        # ------ set loop index i ------ #\n","        i = op_idx1      # + 1 --> op_idx1 = op_idx2 가능함 # open_signal 이 close_bar.shift(1) 이라고 가정하고 다음 bar 부터 체결확인한다는 의미\n","        if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","            break        \n","\n","        # ------ dynamic arr info by ID ------ #\n","        #     1. 해당 id 로 config 재할당해야함\n","        #       a. use open_i1\n","        open_side = side_arr1[open_i1]\n","        id_idx = id_idx_arr1.astype(int)[open_i1]\n","        config = config_list[id_idx]\n","        selection_id = config.selection_id\n","        check_hlm = config.tr_set.check_hlm   \n","\n","        # check_net_hhm = 1 if (config.tr_set.wave_itv1 == config.tr_set.wave_itv2) and (config.tr_set.wave_period1 == config.tr_set.wave_period2) else 0\n","\n","        side_pos = 'short' if open_side == OrderSide.SELL else 'long'   \n","        if show_detail:\n","          print(\"============ op_idx1 : {} {} ============\".format(op_idx1, open_side))\n","     \n","        # if show_detail:\n","        #   print(\"check_hlm :\", check_hlm)\n","\n","        # ------ load tr_data ------ #\n","        tp_arr = res_df['{}_tp_{}'.format(side_pos, selection_id)].to_numpy()\n","        ep1_arr = res_df['{}_ep1_{}'.format(side_pos, selection_id)].to_numpy()\n","        ep2_arr = res_df['{}_ep2_{}'.format(side_pos, selection_id)].to_numpy()\n","        out_arr = res_df['{}_out_{}'.format(side_pos, selection_id)].to_numpy()\n","\n","        tr_arr = res_df['{}_tr_{}'.format(side_pos, selection_id)].to_numpy()  # just for p1_hhm\n","\n","        tp_1_ = res_df['{}_tp_1_{}'.format(side_pos, selection_id)].to_numpy()[op_idx1]  # for p2_box location & p1's exipiry\n","        tp_0_ = res_df['{}_tp_0_{}'.format(side_pos, selection_id)].to_numpy()[op_idx1]\n","        tp_gap_ = res_df['{}_tp_gap_{}'.format(side_pos, selection_id)].to_numpy()[op_idx1]    \n","\n","        # if not check_net_hhm:  # this phase exist for p1 entry (net hhm sync.) in p2_platform\n","        exec_j, ep_j, tp_j, out_j, entry_done, en_p, fee = check_entry_v6(res_df, config, config.ep_set.entry_type, op_idx1, tp_1_, tp_gap_, len_df, open_side,\n","                                                                                [*ohlc_list, ep1_arr], expiry_p2)        \n","        i = exec_j  # = entry_loop 를 돌고 나온 e_j\n","        if not entry_done:\n","            if show_detail:\n","              print(\"p1's expiry by expiry_p2 function in p1's loop : continue\")\n","            continue   \n","        # else:        \n","        #   tp_j = op_idx1\n","\n","        prev_open_i2 = open_i2\n","        net_p1_idx_list.append(op_idx1)\n","        # if check_hlm in [0, 1]:\n","        #   i = op_idx1  # allow op_idx2 = op_idx1\n","        allow_exit = 1\n","        # ============ entry loop ============ #\n","        while 1:  # for p2's loop (allow retry)\n","\n","          # ============ get p2_info ============ #\n","          if check_hlm in [1, 2]:\n","            open_i2 += 1  # 확인 끝났으면 조기 이탈(+1), 다음 open_idx 조사 진행\n","            if open_i2 >= len_open_idx2:  # open_i2 소진\n","                break\n","\n","            if show_detail:\n","              print(\"open_i2 :\", open_i2, side_arr2[open_i2])\n","\n","            # ------ check side sync. ------ #\n","            if open_side != side_arr2[open_i2]:\n","              continue\n","\n","            # ------ assert, op_idx2 >= exec_j ------ #\n","            op_idx2 = open_idx2[open_i2]  # open_i2 는 i 와 별개로 운영\n","            if check_hlm == 1 and allow_exit:\n","              if op_idx2 < op_idx1:\n","                continue\n","            else:\n","              if op_idx2 < i:   # p1 execution 이후의 i 를 허용 (old, 이곳 i = op_idx1 + 1 or p2's exec_j or exit_loop's i + 1)\n","                continue\n","            \n","            if check_hlm == 2:\n","              i = op_idx2 + 1  # open_signal 이 close_bar.shift(1) 이라고 가정하고 다음 bar 부터 체결확인한다는 의미\n","              if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","                  break\n","\n","            if show_detail:\n","              print(\"op_idx1, op_idx2 :\", op_idx1, op_idx2, side_arr2[open_i2])\n","              \n","          else:\n","            op_idx2 = op_idx1\n","\n","          tp_ = tp_arr[op_idx1]          \n","          ep2_ = ep2_arr[op_idx2]\n","          out_ = out_arr[op_idx2]\n","\n","          out_1_ = res_df['{}_out_1_{}'.format(side_pos, selection_id)].to_numpy()[op_idx2]\n","          out_0_ = res_df['{}_out_0_{}'.format(side_pos, selection_id)].to_numpy()[op_idx2]\n","          out_gap_ = res_df['{}_out_gap_{}'.format(side_pos, selection_id)].to_numpy()[op_idx2]  \n","\n","          # ------ const. for p2_wave ------ #\n","          wave_itv1 = config.tr_set.wave_itv1\n","          wave_period1 = config.tr_set.wave_period1\n","          wave_itv2 = config.tr_set.wave_itv2\n","          wave_period2 = config.tr_set.wave_period2\n","\n","          if check_hlm in [1, 2]:\n","            # ------ check p1's expiry - Todo, priority ------ # - p2_box 생성 이전의 hl_survey\n","            # 1. op_idx1 ~ op_idx2 까지의 hl_check \n","            # if check_hlm:  # p1_hlm, p2_hlm --> Todo, 이거를 왜 p1_hlm 에도 적용했는지 잘 모르겠음\n","            if op_idx1 < op_idx2:\n","              expire, touch_idx = expiry_p1(res_df, config, op_idx1, op_idx2, tp_1_, tp_0_, tp_gap_, ohlc_list[1:3], open_side)\n","              if expire:   # p1's expiry\n","                  if show_detail:\n","                    print(\"expiry_p1, touch_idx = {} : break\".format(touch_idx))\n","                  i = touch_idx  #  + 1  --> 이거 아닌것 같음 # op_idx1 과 op_idx2 사이의 op_idx1' 을 살리기 위함, 즉 바로 다음 op_idx1 로 회귀 (건너뛰지 않고)\n","                  open_i2 = prev_open_i2\n","                  break   # change op_idx1\n","\n","            if check_hlm == 2:\n","              # ------ p2 point_validation - vectorization unavailable ------ # p1_loop 로 return 되는 정확한 i 를 반환하기 위해서 expiry_p1 에 순서 양보  # Todo, 새로운 tp, ep, out 에 대한 처리 필요 (p1_hlm 사용시)\n","              if open_side == OrderSide.SELL:\n","                # --- p2_wave validation --- #\n","                wave_co_post_idx = res_df['wave_co_post_idx_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()[op_idx2]\n","                if not (op_idx1 < wave_co_post_idx):\n","                  if show_detail:\n","                    print(\"p2_wave validation : continue\")\n","                  continue  # change op_idx2\n","\n","                # --- p2_wave high validation --- #\n","                # wave_high_fill1_ = res_df['wave_high_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()[op_idx1]\n","                # wave_high_fill2_ = res_df['wave_high_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()[op_idx2]\n","                # if not (wave_high_fill1_ >= wave_high_fill2_):\n","                #   if show_detail:\n","                #     print(\"p2_wave high validation : continue\")\n","                #   continue  # change op_idx2\n","                  \n","                if not (tp_ < ep2_):  # tr_set validation & reject hl_out open_exec.\n","                  break  # change op_idx1\n","                elif not (ep2_ < out_ and close[op_idx2] < out_):\n","                  if show_detail:\n","                    print(\"point validation : continue\")\n","                  continue  # change op_idx2\n","              else:\n","                # --- p2_wave validation --- #\n","                wave_cu_post_idx = res_df['wave_cu_post_idx_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()[op_idx2]\n","                if not (op_idx1 < wave_cu_post_idx):\n","                  if show_detail:\n","                    print(\"p2_wave validation : continue\")\n","                  continue  # change op_idx2\n","                \n","                # --- p2_wave low validation --- #\n","                # wave_low_fill1_ = res_df['wave_low_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()[op_idx1]\n","                # wave_low_fill2_ = res_df['wave_low_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()[op_idx2]\n","                # if not (wave_low_fill1_ <= wave_low_fill2_):\n","                #   if show_detail:\n","                #     print(\"p2_wave low validation : continue\")\n","                #   continue  # change op_idx2\n","\n","                if not (tp_ > ep2_):              \n","                  break\n","                elif not (ep2_ > out_ and close[op_idx2] > out_):\n","                  if show_detail:\n","                    print(\"point validation : continue\")\n","                  continue\n","\n","              # ------ p2_box location ------ #\n","              if open_side == OrderSide.SELL:\n","                if not ((tp_1_ + tp_gap_ * config.tr_set.p2_box_k1 <= out_1_) and (out_0_ <= tp_0_ - tp_gap_ * config.tr_set.p2_box_k2)):  # tp1, tp0 에 닿으면 expiry\n","                # if not ((tp_1_ + tp_gap_ * config.tr_set.p2_box_k1 >= out_1_) and (out_0_ <= tp_0_ - tp_gap_ * config.tr_set.p2_box_k2)):  # tp1, tp0 에 닿으면 expiry\n","                  if show_detail:\n","                      print(\"p2_box rejection : continue\")\n","                  continue\n","                else:                \n","                  # ------ p1p2_low ------ #\n","                  if not high[op_idx1:op_idx2 + 1].max() < tp_0_ - tp_gap_ * config.tr_set.p1p2_low:\n","                    if show_detail:\n","                      print(\"p1p2_low rejection : continue\")\n","                    continue\n","              else:\n","                if not ((tp_1_ - tp_gap_ * config.tr_set.p2_box_k1 >= out_1_) and (out_0_ >= tp_0_ + tp_gap_ * config.tr_set.p2_box_k2)):\n","                # if not ((tp_1_ - tp_gap_ * config.tr_set.p2_box_k1 <= out_1_) and (out_0_ >= tp_0_ + tp_gap_ * config.tr_set.p2_box_k2)):\n","                  if show_detail:\n","                      print(\"p2_box rejection : continue\")\n","                  continue\n","                else:\n","                  # ------ p1p2_low ------ #\n","                  if not low[op_idx1:op_idx2 + 1].min() > tp_0_ + tp_gap_ * config.tr_set.p1p2_low:\n","                    if show_detail:\n","                      print(\"p1p2_low rejection : continue\")\n","                    continue\n","\n","              # ------ check p2's expiry ------ # - 현재, op_idx2 기준의 ep2_arr 을 사용 중임.\n","              # exec_j, ep_j, _, out_j, entry_done, en_p, fee = check_entry_v6(res_df, config, config.ep_set.point2.entry_type, op_idx2, tp_1_, tp_gap_, len_df, open_side,\n","              #                                                                         [*ohlc_list, ep2_arr], expiry_p2)   # Todo, tp_1 & tp_gap 사용이 맞을 것으로 봄                                                                                      \n","              exec_j, ep_j, _, out_j, entry_done, en_p, fee = check_entry_v6(res_df, config, config.ep_set.point2.entry_type, op_idx2, out_1_, out_gap_, len_df, open_side,\n","                                                                                      [*ohlc_list, ep2_arr], expiry_p2)   # Todo, tp_1 & tp_gap 사용이 맞을 것으로 봄\n","              i = exec_j  # = entry_loop 를 돌고 나온 e_j\n","              if not entry_done:   # p2's expiry\n","                  if show_detail:\n","                      print(\"expiry_p2, i = {} : continue\".format(i))\n","                  continue  # change op_idx2            \n","              \n","              # ------ devectorized tr_calc ------ # - en_p 에 대해 하는게 맞을 것으로봄\n","              if open_side == OrderSide.SELL:\n","                tr_ = abs((en_p / tp_ - config.trader_set.limit_fee - 1) / (en_p / out_ - config.trader_set.market_fee - 1))\n","              else:\n","                tr_ = abs((tp_ / en_p - config.trader_set.limit_fee - 1) / (out_ / en_p - config.trader_set.market_fee - 1))              \n","\n","              # ------ tr_threshold ------ #\n","              if config.loc_set.point2.short_tr_thresh != \"None\":\n","                if open_side == OrderSide.SELL:\n","                  if tr_ < config.loc_set.point2.short_tr_thresh:\n","                    if show_detail:\n","                      print(\"tr_threshold : continue\")\n","                    continue\n","                else:\n","                  if tr_ < config.loc_set.point2.long_tr_thresh:\n","                    if show_detail:\n","                      print(\"tr_threshold : continue\")\n","                    continue\n","                \n","          if not allow_exit:  # p1_hlm 의 경우, 한번 out 되면 price 가 wave_range 에 닿기전까지 retrade 를 허용하지 않는다. (expiry_p1 을 이용해 op_idx1 을 변경할 것)  \n","            if show_detail:\n","              print(\"allow_exit = {} : continue\".format(allow_exit))\n","            continue\n","\n","          if check_hlm in [0, 1]:\n","            tr_ = tr_arr[op_idx1]\n","\n","          # ------ leverage ------ #\n","          # out = out_arr[out_j]  # lvrg_set use out on out_j (out_j shoud be based on p2)\n","          leverage = lvrg_set(res_df, config, open_side, en_p, out_, fee)  # res_df 변수 사용됨 - 주석 처리 된 상태일뿐\n","          if leverage is None:\n","              if show_detail:\n","                    print(\"leverage is None : continue\")\n","              if check_hlm:\n","                continue  # change op_idx2\n","              else:\n","                break   # change op_idx1\n","\n","          exit_done, cross_on = 0, 0\n","          # ------ check tpout_onexec ------ #\n","          # if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","          if config.ep_set.entry_type == \"LIMIT\":\n","              if config.tp_set.tp_onexec:  # dynamic 은 tp_onexec 사용하는 의미가 없음\n","                  tp_j = exec_j\n","              if config.out_set.out_onexec:  # dynamic 은 out_onexec 사용하는 의미가 없음\n","                  out_j = exec_j\n","\n","          # ============ exit loop ============ #\n","          while 1:\n","            if not config.tp_set.static_tp:  # 앞으로 왠만하면 static 만 사용할 예정\n","                tp_j = i\n","            if not config.out_set.static_out:\n","                out_j = i\n","\n","            # ------------ out ------------ #  # out 우선 (보수적 검증)\n","            # ------ signal_out ------ #\n","            if not exit_done:\n","                exit_done, cross_on, ex_p, fee = check_signal_out_v3(res_df, config, open_i2, i, len_df, fee, open_side, cross_on, exit_done, [*ohlc_list, np_timeidx])\n","            # ------ hl_out ------ #\n","            if config.out_set.hl_out:\n","                if not exit_done:  # and i != len_df - 1:\n","                    exit_done, ex_p, fee = check_hl_out_v2(config, i, out_j, len_df, fee, open_side, exit_done, [*ohlc_list, out_arr])\n","\n","            # ------------ tp ------------ #\n","            if not config.tp_set.non_tp and i != exec_j:\n","              if not exit_done:\n","                exit_done, ex_p, fee = check_limit_tp_exec(res_df, config, open_i2, i, tp_j, len_df, fee, open_side, exit_done,\n","                                                          [*ohlc_list, [tp_arr]])  # 여기서는 j -> i 로 변경해야함\n","                # if config.tp_set.tp_type in ['LIMIT']:  # 'BOTH' -> 앞으로는, LIMIT 밖에 없을거라 주석처리함\n","                # if not exit_done and config.tp_set.tp_type in ['MARKET', 'BOTH']:\n","\n","            if exit_done:  # 이 phase 는 exit_phase 뒤에도 있어야할 것 - entry_done var. 사용은 안하겠지만\n","                # ------ append dynamic vars. ------ #\n","                p1_idx_list.append(op_idx1)  # side, zone, start_ver arr 모두 openi_list 로 접근하기 위해 open_i 를 담음\n","                p2_idx_list.append(op_idx2)\n","                pair_idx_list.append([exec_j, i])  # entry & exit (체결 기준임)\n","                pair_price_list.append([en_p, ex_p])\n","                lvrg_list.append(leverage)\n","                fee_list.append(fee)\n","                tpout_list.append([tp_arr[tp_j], out_arr[out_j]])  # for tpout_line plot_check\n","                tr_list.append(tr_)   # Todo, tr vectorize 불가함, 직접 구해주어야할 건데.. (오래걸리지 않을까 --> tr_set 데이터만 모아서 vecto 계산이 나을 것)\n","\n","                # open_i += 1  # 다음 open_idx 조사 진행\n","                break\n","\n","            # 1. 아래있으면, 체결 기준부터 tp, out 허용 -> tp 가 entry_idx 에 체결되는게 다소 염려되기는 함, 일단 진행 (그런 case 가 많지 않았으므로)\n","            # 2. 위에있으면, entry 다음 tick 부터 exit 허용\n","            i += 1\n","            if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","                break\n","          \n","          if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","              break\n","\n","          if exit_done == 1:  # tp_done 은 check_hlm 여부와 무관하게 op_idx1 을 변경함\n","            if show_detail:\n","                    print(\"exit_done = {}, i = {} : break\".format(exit_done, i))\n","            break   # change op_idx1\n","          else:  # exit_done -> -1 or 0 (0 means end of df) \n","            if check_hlm in [1, 2]:\n","              if check_hlm == 1:   # exit only once in p1_hlm mode\n","                allow_exit = 0\n","              if show_detail:\n","                      print(\"exit_done = {}, i = {} : continue\".format(exit_done, i))\n","              continue  # change op_idx2\n","            else:\n","              if show_detail:\n","                      print(\"exit_done = {}, i = {} : break\".format(exit_done, i))\n","              break   # change op_idx1    \n","\n","        # if op_idx1 >= 16355:\n","        #   break\n","\n","        if i >= len_df:  # or open_i >= len_open_idx:  # res_df 의 last_index 까지 돌아야함\n","            break\n","        else:\n","            continue\n","\n","    return np.array(net_p1_idx_list), np.array(p1_idx_list), np.array(p2_idx_list), np.array(pair_idx_list), np.array(pair_price_list), np.array(lvrg_list), np.array(\n","        fee_list), np.array(tpout_list), np.array(tr_list)\n","\n","\n","def check_entry_v6(res_df, config, entry_type, op_idx, wave1, wave_gap, len_df, open_side, np_datas, expiry):\n","    open, high, low, close, ep_arr = np_datas\n","    ep_j = op_idx\n","    tp_j = op_idx\n","    out_j = op_idx\n","\n","    # print(\"ep_arr[op_idx] :\", ep_arr[op_idx])\n","\n","    selection_id = config.selection_id    \n","    # allow_ep_in = 0 if config.ep_set.point2.use_point2 else 1\n","    entry_done = 0\n","    ep = None\n","\n","    if entry_type == \"LIMIT\":\n","        fee = config.trader_set.limit_fee\n","\n","        for e_j in range(op_idx + 1, len_df):\n","            # ------ index setting for dynamic options ------ #\n","            if not config.ep_set.static_ep:\n","                ep_j = e_j  # dynamic_ep 를 위한 ep_index var.\n","                out_j = e_j  # dynamic_out 를 위한 out_index var. - 조건식이 static_ep 와 같이 있는 이유 모름 => dynamic_lvrg 로 사료됨\n","\n","            if not config.tp_set.static_tp:\n","                tp_j = e_j\n","\n","            # ------ expire_k & expire_tick ------ # - limit 사용하면 default 로 expire_k 가 존재해야함\n","            if expiry(res_df, config, op_idx, e_j, wave1, wave_gap, [high, low], open_side):  # tp_j, \n","              break\n","\n","            # ------ point2 ------ #\n","            # if not allow_ep_in:\n","            #     allow_ep_in, out_j = ep_loc_point2(res_df, config, e_j, out_j, side=OrderSide.SELL)\n","            #     if allow_ep_in:\n","            #       if config.ep_set.point2.entry_type == \"LIMIT\":\n","            #         ep_j = e_j\n","            #         # print(\"e_j in point2 :\", e_j)\n","            #         continue\n","\n","            # ------ check ep_exec ------ #\n","            # if allow_ep_in:\n","              # if config.ep_set.point2.use_point2 and config.ep_set.point2.entry_type == 'MARKET':\n","              #   entry_done = 1\n","              #   ep = c[e_j]\n","              #   break\n","              # else:\n","\n","            if open_side == OrderSide.SELL:\n","              if high[e_j] >= ep_arr[ep_j]:\n","                  entry_done = 1\n","                  ep = ep_arr[ep_j]\n","                  if open[e_j] >= ep_arr[ep_j]:  # open comp 는 결국, 수익률에 얹어주는 logic (반보수) -> 사용 보류\n","                      ep = open[e_j]\n","                  break\n","            else:\n","              if low[e_j] <= ep_arr[ep_j]:\n","                  entry_done = 1\n","                  ep = ep_arr[ep_j]\n","                  if open[e_j] <= ep_arr[ep_j]:\n","                      ep = open[e_j]\n","                  break\n","\n","    else:  # market entry\n","        e_j = op_idx + 1\n","        entry_done = 1\n","        ep = close[op_idx]\n","        fee = config.trader_set.market_fee\n","\n","    return e_j, ep_j, tp_j, out_j, entry_done, ep, fee  # 다음 start_i <-- e_j 로 변경\n","    #   e_j => 다음 phase 의 시작 index <-> ep_j : ep 의 기준 index\n","    #   ep_j, tp_j, out_j 가 return 되어야함 - exit phase 에서 이어가기 위함\n","\n","\n","def check_limit_tp_exec(res_df, config, open_i, i, tp_j, len_df, fee, open_side, exit_done, np_datas):\n","\n","    open, high, low, close, tps = np_datas\n","    tp = None\n","    selection_id = config.selection_id\n","    len_tps = len(tps)\n","\n","    for tp_i, tp_arr in enumerate(tps):\n","\n","        #     decay adjustment    #\n","        #     tp_j includes dynamic_j - functionalize  #\n","        # try:\n","        #     if config.tr_set.decay_gap != \"None\":\n","        #         decay_share = (j - open_i) // config.tp_set.decay_term\n","        #         decay_remain = (j - open_i) % config.tp_set.decay_term\n","        #         if j != open_i and decay_remain == 0:\n","        #             if open_side == OrderSide.SELL:\n","        #                 tp_arr[tp_j] += res_df['short_tp_gap_{}'.format(selection_id)].iloc[open_i] * config.tr_set.decay_gap * decay_share\n","        #             else:\n","        #                 tp_arr[tp_j] -= res_df['long_tp_gap_{}'.format(selection_id)].iloc[open_i] * config.tr_set.decay_gap * decay_share\n","        # except:\n","        #     pass\n","\n","        if open_side == OrderSide.SELL:\n","            if low[i] <= tp_arr[tp_j]:  # and partial_tp_cnt == tp_i:  # we use static tp now\n","                # if low[i] <= tp_arr[i] <= h[i]: --> 이건 잘못되었음\n","                # partial_tp_cnt += 1 --> partial_tp 보류\n","\n","                # ------ dynamic tp ------ #\n","                if tp_arr[i] != tp_arr[i - 1] and not config.tp_set.static_tp:\n","                    # tp limit 이 불가한 경우 - open 이 이미, tp 를 넘은 경우\n","                    if open[i] < tp_arr[i]:\n","                        tp = open[i]\n","                    # tp limit 이 가능한 경우 - open 이 아직, tp 를 넘지 않은 경우\n","                    else:\n","                        tp = tp_arr[i]\n","\n","                # ------ static tp ------ #\n","                else:\n","                    #   tp limit 이 불가한 경우 - open 이 이미, tp 를 넘은 경우\n","                    if open[i] < tp_arr[tp_j]:  # static 해놓고 decay 사용하면 dynamic 이니까\n","                        if config.tr_set.decay_gap != \"None\" and decay_remain == 0:\n","                            tp = open[i]  # tp_j -> open_i 를 가리키기 때문에 decay 는 한번만 진행되는게 맞음\n","                        else:\n","                            tp = tp_arr[tp_j]\n","                    else:\n","                        tp = tp_arr[tp_j]\n","\n","                if tp_i == len_tps - 1:\n","                    exit_done = 1  # partial 을 고려해 exit_done = 1 상태는 tp_i 가 last_index 로 체결된 경우만 해당\n","\n","        else:\n","            if high[i] >= tp_arr[tp_j]:\n","                # ------ dynamic tp ------ #\n","                if tp_arr[i] != tp_arr[i - 1] and not config.tp_set.static_tp:\n","                    if open[i] > tp_arr[i]:\n","                        tp = open[i]\n","                    else:\n","                        tp = tp_arr[i]\n","\n","                # ------ static tp ------ #\n","                else:\n","                    if open[i] > tp_arr[tp_j]:\n","                        if config.tr_set.decay_gap != \"None\" and decay_remain == 0:\n","                            tp = open[i]\n","                        else:\n","                            tp = tp_arr[tp_j]\n","                    else:\n","                        tp = tp_arr[tp_j]\n","\n","                if tp_i == len_tps - 1:\n","                    exit_done = 1  # partial 을 고려해 exit_done = 1 상태는 tp_i 가 last_index 로 체결된 경우만 해당\n","\n","    if exit_done:\n","        fee += config.trader_set.limit_fee\n","\n","    return exit_done, tp, fee\n","\n","\n","def check_signal_out_v3(res_df, config, open_i, i, len_df, fee, open_side, cross_on, exit_done, np_datas):    \n","\n","    _, _, _, close, np_timeidx = np_datas\n","    ex_p = None\n","    selection_id = config.selection_id\n","\n","    # ------ timestamp ------ #\n","    if config.out_set.tf_exit != \"None\":\n","        if np_timeidx[i] % config.out_set.tf_exit == config.out_set.tf_exit - 1 and i != open_i:\n","            exit_done = -1\n","\n","    # ------ rsi ------ # -> vectorize 가능함 => 추후 적용\n","    if config.out_set.rsi_exit:\n","        rsi_T = res_df['rsi_T'].to_numpy()\n","\n","        if open_side == OrderSide.SELL:\n","            if (rsi_T[i - 1] >= 50 - config.loc_set.point.osc_band) & (rsi_T[i] < 50 - config.loc_set.point.osc_band):\n","                exit_done = -1\n","        else:\n","            if (rsi_T[i - 1] <= 50 + config.loc_set.point.osc_band) & (rsi_T[i] > 50 + config.loc_set.point.osc_band):\n","                exit_done = -1\n","\n","    # ------ heikin_ashi ------ #\n","    # if selection_id in ['v3_3']:\n","    #     if open_side == OrderSide.SELL:\n","    #       if (ha_o[i] < ha_c[i]):# & (ha_o[i] == ha_l[i]):   # 양봉 출현\n","    #           exit_done = -1\n","    #     else:\n","    #       if (ha_o[i] > ha_c[i]):# & (ha_o[i] == ha_h[i]):  # 음봉 출현\n","    #           exit_done = -1\n","\n","    # ------------ early out ------------ #\n","    # ------ bb ------ # --> cross_on 기능은 ide latency 개선 여부에 해당되지 않음\n","    if selection_id in ['v5_2']:\n","        bb_upper_5T = res_df['bb_upper_5T'].to_numpy()\n","        bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","\n","        if open_side == OrderSide.SELL:\n","            if close[i] < bb_lower_5T[i] < close[i - 1]:\n","                cross_on = 1\n","            if cross_on == 1 and close[i] > bb_upper_5T[i] > close[i - 1]:\n","                exit_done = -1\n","        else:\n","            if close[i] > bb_upper_5T[i] > close[i - 1]:\n","                cross_on = 1\n","            if cross_on == 1 and close[i] < bb_lower_5T[i] < close[i - 1]:\n","                exit_done = -1\n","\n","    if exit_done:\n","        ex_p = close[i]\n","        fee += config.trader_set.market_fee\n","\n","    return exit_done, cross_on, ex_p, fee\n","\n","\n","def check_hl_out_v2(config, i, out_j, len_df, fee, open_side, exit_done, np_datas):\n","\n","    open, high, low, close, out_arr = np_datas\n","    ex_p = None\n","\n","    if config.out_set.hl_out:\n","        if open_side == OrderSide.SELL:\n","            if high[i] >= out_arr[out_j]:  # check out only once\n","                exit_done = -1\n","        else:\n","            if low[i] <= out_arr[out_j]:  # check out only once\n","                exit_done = -1\n","    else:  # close_out\n","        if open_side == OrderSide.SELL:\n","            if close[i] >= out_arr[out_j]:  # check out only once\n","                exit_done = -1\n","        else:\n","            if close[i] <= out_arr[out_j]:  # check out only once\n","                ex_p = close[i]\n","                exit_done = -1\n","\n","    if exit_done:\n","        if config.out_set.hl_out:\n","            ex_p = out_arr[out_j]\n","        else:\n","            ex_p = close[i]\n","\n","        if open_side == OrderSide.SELL:\n","            if open[i] >= out_arr[out_j]:\n","                ex_p = open[i]\n","        else:\n","            if open[i] <= out_arr[out_j]:\n","                ex_p = open[i]\n","\n","        fee += config.trader_set.market_fee\n","\n","    return exit_done, ex_p, fee"]},{"cell_type":"markdown","metadata":{"id":"zQ-roiifspcX"},"source":["#### ep_loc.point & zone legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Js5eL87VspcX"},"outputs":[],"source":["\n","    # res_df['entry_{}'.format(selection_id)] = np.where((res_df['open'] >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 (res_df['close'] < res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(selection_id)] - 1, res_df['entry_{}'.format(selection_id)])\n","\n","    # res_df['entry_{}'.format(selection_id)] = np.where((res_df['open'] >= res_df['bb_lower_1m']) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['bb_lower_1m']) &\n","    #                 (res_df['close'] < res_df['bb_lower_1m'])\n","    #                 , res_df['entry_{}'.format(selection_id)] - 1, res_df['entry_{}'.format(selection_id)])\n","\n","    # res_df['entry_{}'.format(selection_id)] = np.where((res_df['open'] <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   (res_df['close'] > res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(selection_id)] + 1, res_df['entry_{}'.format(selection_id)])\n","\n","    # res_df['entry_{}'.format(selection_id)] = np.where((res_df['open'] <= res_df['bb_upper_1m']) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['bb_upper_1m']) &\n","    #                   (res_df['close'] > res_df['bb_upper_1m'])\n","    #                 , res_df['entry_{}'.format(selection_id)] + 1, res_df['entry_{}'.format(selection_id)])\n","\n","\n","    \n","   # --------------- ema --------------- #   \n","  # res_df['ema5_1m'] = ema(res_df['close'], 5).shift(1)\n","\n","  #   # --------------- cloud bline --------------- #   \n","  # res_df['cloud_bline_1m'] = cloud_bline(res_df, 26).shift(1)\n","  \n","    #       stochastic      #\n","  # res_df['stoch'] = stoch(res_df, 5, 3, 3)\n","\n","    #       fisher      #\n","  # res_df['fisher30'] = fisher(res_df, 30)\n","  # res_df['fisher60'] = fisher(res_df, 60)\n","  # res_df['fisher120'] = fisher(res_df, 120)\n","\n","    #       cctbbo      #\n","  # res_df['cctbbo'], _ = cct_bbo(res_df, 21, 13)\n","\n","    #       ema_roc      #\n","  # res_df['ema_roc'] = ema_roc(res_df['close'], 13, 9)\n","\n","\n","   # ------------------------------ htf data ------------------------------ #    \n","\n","  #             Todo              #\n","  # htf_df = pd.read_excel(date_path2 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # htf_df = pd.read_excel(date_path3 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # htf_df = pd.read_excel(date_path4 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # htf_df = pd.read_excel(date_path5 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # # # # htf_df = pd.read_excel(date_path6 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","\n","  # # ---- htf index slicing ---- #\n","  # htf_df = htf_df.loc[:res_df.index[-1]]\n","  \n","  # print(\"res_df.index[-1] :\", res_df.index[-1])\n","  # print(\"htf_df.index[-1] :\", htf_df.index[-1])\n","\n","  # res_df = dc_line(res_df, htf_df, '5m')\n","  # res_df = dc_level(res_df, '5m', 1)\n","\n","\n","  # # # if \"sma4\" in res_df.columns:\n","  # # #   res_df.drop(\"sma4\", axis=1, inplace=1)\n","\n","  # # htf_df['sma'] = htf_df['close'].rolling(60).mean()\n","  # # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, htf_df, [-1]), columns=['sma_30m']))\n","  \n","  # htf_df['stoch'] = stoch(htf_df, 13, 3, 3)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, htf_df, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","   \n","  # fifth_df['ema'] = ema(fifth_df['close'], 5)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, fifth_df, [-1]), columns=['ema5']))\n","\n","        # ------------------------------------ short ------------------------------------ # \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 0:\n","        #   mr_score += 1          \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_upper_1m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_upper_3m'].iloc[i] <= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_upper_5m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == 'MARKET':\n","        #   mr_const_cnt += 1\n","        #   if (res_df['close'].iloc[i] - res_df['short_tp'].iloc[i]) / (res_df['short_out'].iloc[i] - res_df['close'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error):  \n","        #     mr_score += 1\n","\n","           \n","        # ------- entry once ------- #   \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == 1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == -1:\n","        #     prev_entry_cnt += 1          \n","        # # # print(\"prev_entry_cnt :\", prev_entry_cnt)\n","\n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] < res_df['bb_lower_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_lower2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_base_1h'].iloc[i]:\n","\n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] < res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","  \n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['low'].iloc[i] > res_df['short_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1\n","\n","\n","\n","        # ------------------------------------ long ------------------------------------ # \n","          \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 1:\n","        #   mr_score += 1   \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 1:\n","        #   mr_score += 1     \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 1:\n","          # mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_lower_1m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_lower_3m'].iloc[i] >= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_lower_5m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == \"MARKET\":\n","          # mr_const_cnt += 1        \n","          # if (res_df['long_tp'].iloc[i] - res_df['close'].iloc[i]) / (res_df['close'].iloc[i] - res_df['long_out'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error): # 일반적으로 dr 상에서 tp 비율이 더 커짐 (tr 보다)\n","          #   mr_score += 1\n","\n","        # -------------- ep limit -------------- #    \n","        # mr_const_cnt += 1\n","        # # if (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # if config.ep_set.min_eplim_pct < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # # if 0 < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        #   # if res_df['st_gap_15m'].iloc[i] / res_df['open'].iloc[i] < 0:\n","        #   #   print(\"i, res_df['st_gap_15m'].iloc[i] :\", i, res_df['st_gap_15m'].iloc[i])\n","        #   mr_score += 1\n","\n","\n","        # -------------- entry once -------------- #    \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == -1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == 1:\n","        #     prev_entry_cnt += 1\n","          \n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","          \n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] > res_df['bb_upper_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_upper2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_base_1h'].iloc[i]:\n","        \n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] > res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","\n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['high'].iloc[i] < res_df['long_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","          \n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1"]},{"cell_type":"markdown","metadata":{"id":"qM6H6fmrKtsA"},"source":["#### legacy"]},{"cell_type":"code","source":["# np.nanmin([np.nan, 1])\n","np.nan <= np.nan"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AH3JXLkwL_B6","executionInfo":{"status":"ok","timestamp":1658884508950,"user_tz":-540,"elapsed":1076,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"0fa49ccd-e99c-44fd-ac0a-84441dd585d4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"uB-I09hKKvmu"},"outputs":[],"source":["def get_wave_bias_v6(res_df, config, high, low, len_df, short_net_p1_idx_arr, long_net_p1_idx_arr, short_p2_idx_arr, long_p2_idx_arr, short_obj,\n","                     long_obj):\n","    short_net_p1_idx = short_net_p1_idx_arr.astype(int)  # .reshape(-1, 1)\n","    short_p1_idx = short_obj[-1].astype(int).ravel()\n","    short_p2_idx = short_p2_idx_arr.astype(int).ravel()  # .reshape(-1, 1)\n","    short_en_idx = short_obj[2].astype(int)\n","\n","    short_tp_1 = ffill_line(res_df['short_tp_1_{}'.format(config.selection_id)].to_numpy(),\n","                            short_net_p1_idx)  # net_p1_idx ~ net_p1_idx' 사이에 대한 momentum 조사 (net 이유는 logic's validation)\n","    short_tp_0 = ffill_line(res_df['short_tp_0_{}'.format(config.selection_id)].to_numpy(), short_net_p1_idx)\n","    short_out_1 = ffill_line(res_df['short_out_1_{}'.format(config.selection_id)].to_numpy(),\n","                             short_p2_idx)  # 체결된, p2_idx ~ p2_idx' 사이에 대한 momentum 조사\n","    short_out_0 = ffill_line(res_df['short_out_0_{}'.format(config.selection_id)].to_numpy(), short_p2_idx)\n","    short_ep2_0 = ffill_line(res_df['short_ep2_0_{}'.format(config.selection_id)].to_numpy(), short_p2_idx)\n","    # short_net_wave_1 = ffill_line(res_df['short_wave_1_{}'.format(config.selection_id)].to_numpy(), short_op_idx)  # en_idx 에 sync 된 open_idx 를 사용해야함\n","    # short_net_wave_0 = ffill_line(res_df['short_wave_0_{}'.format(config.selection_id)].to_numpy(), short_op_idx)\n","\n","    long_net_p1_idx = long_net_p1_idx_arr.astype(int)  # .reshape(-1, 1)\n","    long_p1_idx = long_obj[-1].astype(int).ravel()\n","    long_p2_idx = long_p2_idx_arr.astype(int).ravel()  # .reshape(-1, 1)\n","    long_en_idx = long_obj[2].astype(int)\n","\n","    long_tp_1 = ffill_line(res_df['long_tp_1_{}'.format(config.selection_id)].to_numpy(), long_net_p1_idx)\n","    long_tp_0 = ffill_line(res_df['long_tp_0_{}'.format(config.selection_id)].to_numpy(), long_net_p1_idx)\n","    long_out_1 = ffill_line(res_df['long_out_1_{}'.format(config.selection_id)].to_numpy(), long_p2_idx)  # 체결된, p2_idx ~ p2_idx' 사이에 대한 momentum 조사\n","    long_out_0 = ffill_line(res_df['long_out_0_{}'.format(config.selection_id)].to_numpy(), long_p2_idx)\n","    long_ep2_0 = ffill_line(res_df['long_ep2_0_{}'.format(config.selection_id)].to_numpy(), long_p2_idx)\n","\n","    short_p2exec_p1_idx = np.unique(short_p1_idx)  # .reshape(-1, 1)   # 통일성을 위해 2d 로 설정\n","    long_p2exec_p1_idx = np.unique(long_p1_idx)  # .reshape(-1, 1)\n","\n","    # print(\"long_net_p1_idx.shape :\", long_net_p1_idx.shape)\n","    # print(\"long_en_idx.shape :\", long_en_idx.shape)\n","\n","    # ================== touch idx ================== #\n","    # 1. min 에 초점을 맞추는 거니까, touch 없을시 len_df 로 설정\n","    # 2. future_data 사용이니까, shift(-bias_info_tick) 설정 --> olds\n","    # 3. entry 다음 idx 부터 -> tp & out 체결 logic 이 현재 entry_idx 부터 되어있어서 취소\n","    # Todo, high 와 low 중 어디에 먼저닿느냐가 중요함을 key 로 잡고만든 logic 임\n","    len_df_range = np.arange(len_df)\n","    last_idx = len_df - 1  # nan 발생하면 대소 비교로 hhm 확인이 불가능해짐, np.nan <= np.nan --> false\n","\n","    # ------------ pair & idxs ------------ #\n","    short_net_p1_pair = list(zip(short_net_p1_idx, np.append(short_net_p1_idx[1:], last_idx)))   # p1's 1st & 2nd pair 위해서 last_idx 마지막에 붙여준 것\n","    long_net_p1_pair = list(zip(long_net_p1_idx, np.append(long_net_p1_idx[1:], last_idx)))\n","\n","    short_p2_pair = list(zip(short_p2_idx, np.append(short_p2_idx[1:], last_idx)))\n","    long_p2_pair = list(zip(long_p2_idx, np.append(long_p2_idx[1:], last_idx)))\n","\n","    short_tp_1_touch_idxs = np.where(low <= short_tp_1, len_df_range, last_idx)\n","    short_tp_0_touch_idxs = np.where(high >= short_tp_0, len_df_range, last_idx)\n","    long_tp_1_touch_idxs = np.where(high >= long_tp_1, len_df_range, last_idx)\n","    long_tp_0_touch_idxs = np.where(low <= long_tp_0, len_df_range, last_idx)\n","\n","    short_out_1_touch_idxs = np.where(low <= short_out_1, len_df_range, last_idx)\n","    short_out_0_touch_idxs = np.where(high >= short_out_0, len_df_range, last_idx)\n","    long_out_1_touch_idxs = np.where(high >= long_out_1, len_df_range, last_idx)\n","    long_out_0_touch_idxs = np.where(low <= long_out_0, len_df_range, last_idx)\n","\n","    # ------------ min touch_idx ------------ #\n","    short_tp_1_touch_idx = get_touch_idx_fill(short_tp_1_touch_idxs, short_net_p1_pair, short_net_p1_idx, len_df)  # pair means 구간\n","    short_tp_0_touch_idx = get_touch_idx_fill(short_tp_0_touch_idxs, short_net_p1_pair, short_net_p1_idx, len_df)\n","    long_tp_1_touch_idx = get_touch_idx_fill(long_tp_1_touch_idxs, long_net_p1_pair, long_net_p1_idx, len_df)\n","    long_tp_0_touch_idx = get_touch_idx_fill(long_tp_0_touch_idxs, long_net_p1_pair, long_net_p1_idx, len_df)\n","\n","    short_out_1_touch_idx = get_touch_idx_fill(short_out_1_touch_idxs, short_p2_pair, short_p2_idx, len_df)  # pair means 구간\n","    short_out_0_touch_idx = get_touch_idx_fill(short_out_0_touch_idxs, short_p2_pair, short_p2_idx, len_df)\n","    long_out_1_touch_idx = get_touch_idx_fill(long_out_1_touch_idxs, long_p2_pair, long_p2_idx, len_df)\n","    long_out_0_touch_idx = get_touch_idx_fill(long_out_0_touch_idxs, long_p2_pair, long_p2_idx, len_df)\n","\n","    # ------------ point's touch_idx ------------ #\n","    short_tp_1_net_p1_touch_idx = short_tp_1_touch_idx[short_net_p1_idx]  # for tp_box's net_hhm\n","    short_tp_0_net_p1_touch_idx = short_tp_0_touch_idx[short_net_p1_idx]\n","    long_tp_1_net_p1_touch_idx = long_tp_1_touch_idx[long_net_p1_idx]\n","    long_tp_0_net_p1_touch_idx = long_tp_0_touch_idx[long_net_p1_idx]\n","    # print(\"long_tp_1_net_p1_touch_idx :\", long_tp_1_net_p1_touch_idx)\n","\n","    short_tp_1_p2exec_p1_touch_idx = short_tp_1_touch_idx[short_p2exec_p1_idx]  # p2 까지 체결된 p1's hhm (p2 executed p1_hhm)\n","    short_tp_0_p2exec_p1_touch_idx = short_tp_0_touch_idx[short_p2exec_p1_idx]\n","    long_tp_1_p2exec_p1_touch_idx = long_tp_1_touch_idx[long_p2exec_p1_idx]\n","    long_tp_0_p2exec_p1_touch_idx = long_tp_0_touch_idx[long_p2exec_p1_idx]\n","\n","    short_tp_1_p2_touch_idx = short_tp_1_touch_idx[short_p2_idx]  # hlm 을 위한 hhm (on p2)\n","    short_tp_0_p2_touch_idx = short_tp_0_touch_idx[short_p2_idx]\n","    long_tp_1_p2_touch_idx = long_tp_1_touch_idx[long_p2_idx]\n","    long_tp_0_p2_touch_idx = long_tp_0_touch_idx[long_p2_idx]\n","\n","    short_out_1_p2_touch_idx = short_out_1_touch_idx[short_p2_idx]  # for out_box's executed_hhm\n","    short_out_0_p2_touch_idx = short_out_0_touch_idx[short_p2_idx]\n","    long_out_1_p2_touch_idx = long_out_1_touch_idx[long_p2_idx]\n","    long_out_0_p2_touch_idx = long_out_0_touch_idx[long_p2_idx]\n","\n","    # ------------ get wave's bias_tick ------------ #\n","    short_tp_1_net_p1_touch_idx2 = np.where(short_tp_1_net_p1_touch_idx == last_idx, np.nan, short_tp_1_net_p1_touch_idx)\n","    long_tp_1_net_p1_touch_idx2 = np.where(long_tp_1_net_p1_touch_idx == last_idx, np.nan, long_tp_1_net_p1_touch_idx)\n","\n","    short_tp_1_p2exec_p1_touch_idx2 = np.where(short_tp_1_p2exec_p1_touch_idx == last_idx, np.nan, short_tp_1_p2exec_p1_touch_idx)\n","    long_tp_1_p2exec_p1_touch_idx2 = np.where(long_tp_1_p2exec_p1_touch_idx == last_idx, np.nan, long_tp_1_p2exec_p1_touch_idx)\n","\n","    short_net_p1_bias_tick = short_tp_1_net_p1_touch_idx2 - short_net_p1_idx\n","    long_net_p1_bias_tick = long_tp_1_net_p1_touch_idx2 - long_net_p1_idx\n","\n","    short_p2exec_p1_bias_tick = short_tp_1_p2exec_p1_touch_idx2 - short_p2exec_p1_idx\n","    long_p2exec_p1_bias_tick = long_tp_1_p2exec_p1_touch_idx2 - long_p2exec_p1_idx\n","\n","    # ------------------ bias_bool & hhm ------------------ #\n","    short_net_p1_true_bias_bool = short_tp_1_net_p1_touch_idx < short_tp_0_net_p1_touch_idx  # true_bias 의 조건\n","    short_net_p1_false_bias_bool = short_tp_1_net_p1_touch_idx >= short_tp_0_net_p1_touch_idx  # false_bias 의 조건, ~true_bias_bool 와 같지 않음, why ..? = en_idx\n","    long_net_p1_true_bias_bool = long_tp_1_net_p1_touch_idx < long_tp_0_net_p1_touch_idx\n","    long_net_p1_false_bias_bool = long_tp_1_net_p1_touch_idx >= long_tp_0_net_p1_touch_idx\n","\n","    short_p2exec_p1_true_bias_bool = short_tp_1_p2exec_p1_touch_idx < short_tp_0_p2exec_p1_touch_idx  # true_bias 의 조건\n","    short_p2exec_p1_false_bias_bool = short_tp_1_p2exec_p1_touch_idx >= short_tp_0_p2exec_p1_touch_idx  # false_bias 의 조건, ~true_bias_bool 와 같지 않음, why ..? = en_idx\n","    long_p2exec_p1_true_bias_bool = long_tp_1_p2exec_p1_touch_idx < long_tp_0_p2exec_p1_touch_idx\n","    long_p2exec_p1_false_bias_bool = long_tp_1_p2exec_p1_touch_idx >= long_tp_0_p2exec_p1_touch_idx\n","\n","    short_p2_true_bias_bool = short_tp_1_p2_touch_idx < short_tp_0_p2_touch_idx\n","    # short_p2_false_bias_bool = short_tp_1_p2_touch_idx >= short_tp_0_p2_touch_idx\n","    long_p2_true_bias_bool = long_tp_1_p2_touch_idx < long_tp_0_p2_touch_idx\n","    # long_p2_false_bias_bool = long_tp_1_p2_touch_idx >= long_tp_0_p2_touch_idx\n","\n","    short_p2_out_true_bias_bool = short_out_1_p2_touch_idx < short_out_0_p2_touch_idx\n","    short_p2_out_false_bias_bool = short_out_1_p2_touch_idx >= short_out_0_p2_touch_idx\n","    long_p2_out_true_bias_bool = long_out_1_p2_touch_idx < long_out_0_p2_touch_idx\n","    long_p2_out_false_bias_bool = long_out_1_p2_touch_idx >= long_out_0_p2_touch_idx\n","\n","    short_tpbox_hhm = hhm(short_net_p1_true_bias_bool, short_net_p1_false_bias_bool)\n","    long_tpbox_hhm = hhm(long_net_p1_true_bias_bool, long_net_p1_false_bias_bool)\n","\n","    short_p2exec_tpbox_hhm = hhm(short_p2exec_p1_true_bias_bool, short_p2exec_p1_false_bias_bool)\n","    long_p2exec_tpbox_hhm = hhm(long_p2exec_p1_true_bias_bool, long_p2exec_p1_false_bias_bool)\n","\n","    # short_p2_hhm = hhm(short_p2_true_bias_bool, short_p2_false_bias_bool)\n","    # long_p2_hhm = hhm(long_p2_true_bias_bool, long_p2_false_bias_bool)\n","\n","    short_outbox_hhm = hhm(short_p2_out_true_bias_bool, short_p2_out_false_bias_bool)\n","    long_outbox_hhm = hhm(long_p2_out_true_bias_bool, long_p2_out_false_bias_bool)\n","\n","    # print(\"short_tpbox_hhm, short_p2_hhm, short_outbox_hhm :\", short_tpbox_hhm, short_p2_hhm, short_outbox_hhm)\n","\n","    return short_tpbox_hhm, long_tpbox_hhm, short_p2exec_tpbox_hhm, long_p2exec_tpbox_hhm, short_outbox_hhm, long_outbox_hhm, \\\n","           short_net_p1_bias_tick, long_net_p1_bias_tick, short_p2exec_p1_bias_tick, long_p2exec_p1_bias_tick, short_p2_true_bias_bool, long_p2_true_bias_bool, \\\n","           short_tp_1[short_en_idx], short_tp_0[short_en_idx], long_tp_1[long_en_idx], long_tp_0[long_en_idx], \\\n","           short_out_1[short_en_idx], short_out_0[short_en_idx], long_out_1[long_en_idx], long_out_0[long_en_idx], short_ep2_0[short_en_idx], long_ep2_0[long_en_idx]  # plot_check 을 위해 en_idx 넣음"]},{"cell_type":"code","source":["def idep_plot_v17(res_df, len_df, config, high, low, open_info_df1, paired_res, inversion=False, sample_ratio=0.7, title_position=(0.5, 0.5),\n","                  fontsize=15, signi=False):  # open_idx, side_arr\n","    if not signi:\n","        plt.style.use(['dark_background', 'fast'])\n","        plt.figure(figsize=(24, 8))\n","        gs = gridspec.GridSpec(nrows=2,  # row 몇 개\n","                               ncols=3,  # col 몇 개\n","                               height_ratios=[10, 1]\n","                               # height_ratios=[10, 10, 1]\n","                               )\n","    gs_idx = 0\n","    # plt.suptitle(key)\n","\n","    p_ranges, p_qty_ratio = literal_eval(config.tp_set.p_ranges), literal_eval(config.tp_set.p_qty_ratio)\n","    assert np.sum(p_qty_ratio) == 1.0\n","    assert len(p_ranges) == len(p_qty_ratio)\n","\n","    if sample_ratio is not None:\n","        sample_len = int(len_df * sample_ratio)\n","    else:\n","        sample_len = len_df\n","\n","    # ------ short & long data preparation ------ #\n","    # start_0 = time.time()\n","\n","    net_p1_idx_arr, p1_idx_arr, p2_idx_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr, tr_arr = paired_res\n","    assert len(p1_idx_arr) != 0, \"assert len(p1_idx_arr) != 0\"\n","\n","    short_net_p1_idx_arr = net_p1_idx_arr[np.where(open_info_df1.side.loc[net_p1_idx_arr] == OrderSide.SELL)[0]]\n","    long_net_p1_idx_arr = net_p1_idx_arr[np.where(open_info_df1.side.loc[net_p1_idx_arr] == OrderSide.BUY)[0]]\n","\n","    short_net_p1_frq = len(short_net_p1_idx_arr)\n","    long_net_p1_frq = len(long_net_p1_idx_arr)\n","    # print(\"short_net_p1_frq :\", short_net_p1_frq)\n","    # print(\"long_net_p1_frq :\", long_net_p1_frq)\n","\n","    short_p1_openi_idx = np.where(open_info_df1.side.loc[p1_idx_arr] == OrderSide.SELL)[0]  # p1_idx_arr 에 대한 idx, # side_arr,\n","    long_p1_openi_idx = np.where(open_info_df1.side.loc[p1_idx_arr] == OrderSide.BUY)[0]\n","\n","    # p1_idx = open_idx[p1_openi_arr].reshape(-1, 1)   # != p1_idx_arr, p1_openi_arr 은 exit_done 기준임\n","\n","    np_obj = np.hstack((pair_price_arr, pair_idx_arr, p1_idx_arr.reshape(-1, 1)))  # p1_idx_arr is 1d, need to be changed to 2d (for stacking)\n","    short_obj = np_obj[short_p1_openi_idx]\n","    long_obj = np_obj[long_p1_openi_idx]\n","    both_obj = np.vstack((short_obj, long_obj))\n","    print(\"short_obj.shape :\", short_obj.shape)\n","    print(\"long_obj.shape :\", long_obj.shape)\n","\n","    short_obj, long_obj, both_obj = [np.split(obj_, 5, axis=1) for obj_ in [short_obj, long_obj, both_obj]]\n","\n","    short_p2_idx_arr, long_p2_idx_arr = [p2_idx_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_lvrg_arr, long_lvrg_arr = [lvrg_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_fee_arr, long_fee_arr = [fee_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_tpout_arr, long_tpout_arr = [tpout_arr[openi_idx_] for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    # short_bias_arr, long_bias_arr = [bias_arr[openi_idx_] for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_tr_arr, long_tr_arr = [tr_arr[openi_idx_] for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    # print(\"long_bias_arr.shape :\", long_bias_arr.shape)\n","    # print(\"short / long arr setting elapsed time :\", time.time() - start_0)\n","\n","\n","    # ------ get hhm ------ #    \n","    # start_0 = time.time()\n","    short_tpbox_hhm, long_tpbox_hhm, short_tpbox_p2exec_hhm, long_tpbox_p2exec_hhm, short_outbox_hhm, long_outbox_hhm, short_p2_true_bias_bool, long_p2_true_bias_bool, \\\n","          short_tp_1, short_tp_0, long_tp_1, long_tp_0, short_out_1, short_out_0, long_out_1, long_out_0, short_ep2_0, long_ep2_0 = \\\n","      get_wave_bias_v5(res_df, config, high, low, len_df, short_net_p1_idx_arr, long_net_p1_idx_arr, short_p2_idx_arr, long_p2_idx_arr, short_obj, long_obj)\n","    # print(\"get_wave_bias elapsed time :\", time.time() - start_0)\n","\n","\n","    # ------ mean_low ------ #    \n","    # start_0 = time.time()\n","    selection_id = config.selection_id\n","\n","    short_p1_idx = short_obj[-1].astype(int)\n","    long_p1_idx = long_obj[-1].astype(int)    \n","\n","    short_open_tp_1 = res_df['short_tp_1_{}'.format(selection_id)].to_numpy()[short_p1_idx] # != short_tp_1\n","    long_open_tp_1 = res_df['long_tp_1_{}'.format(selection_id)].to_numpy()[long_p1_idx]\n","\n","    short_open_tp_0 = res_df['short_tp_0_{}'.format(selection_id)].to_numpy()[short_p1_idx]\n","    long_open_tp_0 = res_df['long_tp_0_{}'.format(selection_id)].to_numpy()[long_p1_idx]\n","\n","    short_open_tp_gap = res_df['short_tp_gap_{}'.format(selection_id)].to_numpy()[short_p1_idx]  # use open_i\n","    long_open_tp_gap = res_df['long_tp_gap_{}'.format(selection_id)].to_numpy()[long_p1_idx]\n","\n","    short_max_outg = get_max_outg_v4(OrderSide.SELL, config, ohlc_list, short_obj, short_tpout_arr, short_open_tp_0, short_open_tp_gap)  # tp_box's mean_low 확인 위해 tp_gap 입력함\n","    long_max_outg = get_max_outg_v4(OrderSide.BUY, config, ohlc_list, long_obj, long_tpout_arr, long_open_tp_0, long_open_tp_gap)\n","\n","    short_mean_low = short_max_outg[short_p2_true_bias_bool].mean()\n","    long_mean_low = long_max_outg[long_p2_true_bias_bool].mean()\n","    both_mean_low = (short_mean_low + long_mean_low) / 2\n","    # print(\"short_mean_low :\", short_mean_low)\n","    # print(\"long_mean_low :\", long_mean_low)\n","    # print(\"both_mean_low :\", both_mean_low)\n","    # print(\"mean_low elapsed time :\", time.time() - start_0)\n","\n","    # ------ plot_data ------ #\n","    len_short, len_long = len(short_p1_openi_idx), len(long_p1_openi_idx)\n","\n","    try:\n","        # start_0 = time.time()\n","        if len_short == 0:\n","            short_pr = []\n","            gs_idx += 1\n","        else:\n","            short_tr = short_tr_arr.mean()\n","            short_pr, short_liqd = get_pr_v4(OrderSide.SELL, high, low, short_obj, short_tpout_arr, short_lvrg_arr, short_fee_arr, p_ranges,\n","                                             p_qty_ratio, inversion)\n","            short_total_pr = to_total_pr(len_df, short_pr, short_obj[-2])\n","            short_cum_pr = np.cumprod(short_total_pr)\n","            short_hlm = hlm(short_pr, short_p2_true_bias_bool)\n","            short_trade_ticks = np.mean(short_obj[-2] - short_obj[-1])\n","            if signi:\n","                short_idep_res_obj = (short_tpbox_p2exec_hhm, short_hlm) + get_res_info_nb_v2(sample_len, short_pr, short_total_pr, short_cum_pr, short_liqd)\n","            else:\n","                gs_idx = plot_info_v9(gs, gs_idx, len_df, sample_len, short_tr, short_tpbox_hhm, short_tpbox_p2exec_hhm, short_outbox_hhm, short_mean_low, short_hlm, short_trade_ticks, short_net_p1_frq, short_pr, short_total_pr,\n","                                      short_cum_pr, short_liqd, short_lvrg_arr.mean(), title_position, fontsize)\n","        # print(\"short plot_data elapsed time :\", time.time() - start_0)\n","\n","    except Exception as e:\n","        gs_idx += 1\n","        print(\"error in short plot_data :\", e)\n","\n","    try:\n","        # start_0 = time.time()\n","        if len_long == 0:\n","            long_pr = []\n","            gs_idx += 1\n","        else:\n","            long_tr = long_tr_arr.mean()\n","            long_pr, long_liqd = get_pr_v4(OrderSide.BUY, high, low, long_obj, long_tpout_arr, long_lvrg_arr, long_fee_arr, p_ranges, p_qty_ratio,\n","                                           inversion)\n","            long_total_pr = to_total_pr(len_df, long_pr, long_obj[-2])\n","            long_cum_pr = np.cumprod(long_total_pr)\n","            # long_hhm = long_net_p1_hhm\n","            long_hlm = hlm(long_pr, long_p2_true_bias_bool)\n","            long_trade_ticks = np.mean(long_obj[-2] - long_obj[-1])\n","            if signi:\n","                long_idep_res_obj = (long_tpbox_p2exec_hhm, long_hlm) + get_res_info_nb_v2(sample_len, long_pr, long_total_pr, long_cum_pr, long_liqd)\n","            else:\n","                gs_idx = plot_info_v9(gs, gs_idx, len_df, sample_len, long_tr, long_tpbox_hhm, long_tpbox_p2exec_hhm, long_outbox_hhm, long_mean_low, long_hlm, long_trade_ticks, long_net_p1_frq, long_pr, long_total_pr,\n","                                      long_cum_pr, long_liqd, long_lvrg_arr.mean(), title_position, fontsize)\n","        # print(\"long plot_data elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","        gs_idx += 1\n","        print(\"error in long plot_data :\", e)\n","\n","    try:\n","        # start_0 = time.time()\n","        if len_short * len_long == 0:\n","            both_pr = []\n","            gs_idx += 1\n","        else:\n","            both_tr = (short_tr + long_tr) / 2\n","            both_pr = np.vstack((short_pr, long_pr))  # for 2d arr, obj 를 1d 로 만들지 않는 이상, pr 은 2d 유지될 것\n","            both_total_pr = to_total_pr(len_df, both_pr, both_obj[-2])\n","            both_cum_pr = np.cumprod(both_total_pr)\n","            both_liqd = min(short_liqd, long_liqd)\n","            both_p2_true_bias_bool = np.hstack((short_p2_true_bias_bool, long_p2_true_bias_bool))  # hstack for 1d arr, vstack for 2d arr\n","            both_tpbox_hhm = (short_tpbox_hhm + long_tpbox_hhm) / 2\n","            both_tpbox_p2exec_hhm, both_hlm = (short_tpbox_p2exec_hhm + long_tpbox_p2exec_hhm) / 2, (short_hlm + long_hlm) / 2\n","            both_outbox_hhm = (short_outbox_hhm + long_outbox_hhm) / 2\n","            both_trade_ticks = np.mean(both_obj[-2] - both_obj[-1])\n","            both_net_p1_frq = short_net_p1_frq + long_net_p1_frq\n","            if signi:\n","                both_idep_res_obj = (both_tpbox_p2exec_hhm, both_hlm) + get_res_info_nb_v2(sample_len, both_pr, both_total_pr, both_cum_pr, both_liqd)\n","            else:\n","                gs_idx = plot_info_v9(gs, gs_idx, len_df, sample_len, both_tr, both_tpbox_hhm, both_tpbox_p2exec_hhm, both_outbox_hhm, both_mean_low, both_hlm, both_trade_ticks, both_net_p1_frq, both_pr, both_total_pr,\n","                                      both_cum_pr, both_liqd, lvrg_arr.mean(), title_position, fontsize)\n","        # print(\"both plot_data elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","        gs_idx += 1\n","        print(\"error in both plot_data :\", e)\n","\n","    if not signi:\n","        if len_short * len_long > 0:\n","            for obj, bias_arr, cum_pr in zip([short_obj, long_obj, both_obj], [short_p2_true_bias_bool, long_p2_true_bias_bool, both_p2_true_bias_bool],\n","                                             [short_cum_pr, long_cum_pr, both_cum_pr]):\n","                try:\n","                    # start_0 = time.time()\n","                    gs_idx = frq_dev_plot_v4(gs, gs_idx, len_df, sample_len, obj[-2], bias_arr, cum_pr[-1], fontsize)\n","                    # print(\"frq_dev_plot elapsed time :\", time.time() - start_0)\n","                except Exception as e:\n","                    gs_idx += 1\n","                    print(\"error in frq_dev_plot :\", e)\n","            plt.show()\n","            plt.close()\n","\n","        return short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_tr_arr, short_p2_true_bias_bool, short_p2_idx_arr, short_tp_1, short_tp_0, short_out_1, short_out_0, short_ep2_0, \\\n","               long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_tr_arr, long_p2_true_bias_bool, long_p2_idx_arr, long_tp_1, long_tp_0, long_out_1, long_out_0, long_ep2_0  # long_net_p1_idx_arr long_p2_idx_arr\n","\n","    else:\n","        return [short_idep_res_obj[:-1], long_idep_res_obj[:-1], both_idep_res_obj[:-1]]"],"metadata":{"id":"Eos0FoAgrfW5"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":260,"status":"ok","timestamp":1653436951068,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"oLDZobRcgg6E","outputId":"2f07e665-41ba-4c7e-b5d7-43fc14d09cd5"},"outputs":[{"data":{"text/plain":["Rolling [window=100,center=False,axis=0,method=single]"]},"execution_count":92,"metadata":{},"output_type":"execute_result"}],"source":["res_df.low.rolling(100) #> 1000"]},{"cell_type":"markdown","metadata":{"id":"_blyFhQJUd5X"},"source":["#### dump"]},{"cell_type":"code","source":["def get_pr_v4(open_side, h, l, obj, tpout, lvrg, fee, p_ranges, p_qty_ratio, inversion=False):  # --> 여기서 사용하는 ex_p = ex_p\n","\n","    en_p = obj[0]\n","    # ex_p = obj[1]\n","    tp, out = np.split(tpout, 2, axis=1)\n","    len_p = len(p_ranges)\n","    en_ps, tps, outs, lvrgs, fees = [np.tile(arr_, (1, len_p)) for arr_ in [en_p, tp, out, lvrg, fee]]\n","\n","    np_obj = np.array(obj).T[0]\n","    assert len(np_obj.shape) == 2\n","\n","    # iin == iout 인 경우 분리\n","    en_idx = np_obj[:, 2]\n","    ex_idx = np_obj[:, 3]\n","    equal_idx = en_idx == ex_idx    # equal_idx 는 어차피 out 임\n","    issue_idx = en_idx > ex_idx    # equal_idx 는 어차피 out 임\n","\n","    print('pass')\n","    idx_gap_ = (ex_idx - en_idx)[~equal_idx]\n","    print(\"en_idx[issue_idx] :\", en_idx[issue_idx])\n","    print(\"ex_idx[issue_idx] :\", ex_idx[issue_idx])\n","    print(\"idx_gap_[idx_gap_ <= 0] :\", idx_gap_[idx_gap_ <= 0])\n","\n","    min_low = np.full_like(en_p, np.nan)\n","    min_low[~equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)  # start from iin + 1 (tp 체결을 entry_idx 부터 보지 않음)\n","    max_high = np.full_like(en_p, np.nan)\n","    max_high[~equal_idx] = np.array([np.max(h[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","\n","    if open_side == \"SELL\":\n","        p_tps = en_ps - (en_ps - tps) * p_ranges\n","        # min_low = np.full_like(en_p, np.nan)\n","        # min_low[~equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)  # start from iin + 1 (tp 체결을 entry_idx 부터 보지 않음)\n","        tp_idx = (np.tile(min_low, (1, len_p)) <= p_tps) * (np.tile(max_high, (1, len_p)) <= outs)  # entry_idx 포함해서 out touch 금지 (보수적 검증)\n","    else:\n","        p_tps = en_ps + (tps - en_ps) * p_ranges\n","        # max_high = np.full_like(en_p, np.nan)\n","        # max_high[~equal_idx] = np.array([np.max(h[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        tp_idx = (np.tile(max_high, (1, len_p)) >= p_tps) * (np.tile(min_low, (1, len_p)) >= outs)\n","\n","    ex_ps = outs.copy()\n","    ex_ps[tp_idx] = p_tps[tp_idx]\n","\n","    if open_side == \"SELL\":\n","        if not inversion:\n","            pr = ((en_ps / ex_ps - fees - 1) * lvrgs * p_qty_ratio).sum(axis=1) + 1\n","            # ------ liquidation ------ #\n","            max_high = np.full_like(en_p, np.nan)\n","            max_high[~equal_idx] = np.array([np.max(h[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","            liqd = np.nanmin((en_p / max_high - fee - 1) * lvrg + 1)\n","        else:\n","            pr = ((ex_ps / en_ps - fees - 1) * lvrgs * p_qty_ratio).sum(axis=1) + 1\n","            # ------ liquidation ------ #\n","            min_low = np.full_like(en_p, np.nan)\n","            min_low[~equal_idx] = np.array([np.min(l[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","            liqd = np.nanmin((min_low / en_p - fee - 1) * lvrg + 1)\n","    else:\n","        if not inversion:\n","            pr = ((ex_ps / en_ps - fees - 1) * lvrgs * p_qty_ratio).sum(axis=1) + 1\n","            # ------ liquidation ------ #\n","            min_low = np.full_like(en_p, np.nan)\n","            min_low[~equal_idx] = np.array([np.min(l[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","            liqd = np.nanmin((min_low / en_p - fee - 1) * lvrg + 1)\n","        else:\n","            pr = ((en_ps / ex_ps - fees - 1) * lvrgs * p_qty_ratio).sum(axis=1) + 1\n","            # ------ liquidation ------ #\n","            max_high = np.full_like(en_p, np.nan)\n","            max_high[~equal_idx] = np.array([np.max(h[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","            liqd = np.nanmin((en_p / max_high - fee - 1) * lvrg + 1)\n","\n","    return pr.reshape(-1, 1), liqd"],"metadata":{"id":"wDQWK3v5xOFa"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def idep_plot_v16(res_df, len_df, config, high, low, open_info_df1, paired_res, inversion=False, sample_ratio=0.7, title_position=(0.5, 0.5),\n","                  fontsize=15, signi=False):  # open_idx, side_arr\n","    if not signi:\n","        plt.style.use(['dark_background', 'fast'])\n","        plt.figure(figsize=(24, 8))\n","        gs = gridspec.GridSpec(nrows=2,  # row 몇 개\n","                               ncols=3,  # col 몇 개\n","                               height_ratios=[10, 1]\n","                               # height_ratios=[10, 10, 1]\n","                               )\n","    gs_idx = 0\n","    # plt.suptitle(key)\n","\n","    p_ranges, p_qty_ratio = literal_eval(config.tp_set.p_ranges), literal_eval(config.tp_set.p_qty_ratio)\n","    assert np.sum(p_qty_ratio) == 1.0\n","    assert len(p_ranges) == len(p_qty_ratio)\n","\n","    if sample_ratio is not None:\n","        sample_len = int(len_df * sample_ratio)\n","    else:\n","        sample_len = len_df\n","\n","    # ------ short & long data preparation ------ #\n","    # start_0 = time.time()\n","\n","    net_p1_idx_arr, p1_idx_arr, p2_idx_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr, tr_arr = paired_res\n","    assert len(p1_idx_arr) != 0, \"assert len(p1_idx_arr) != 0\"\n","\n","    short_net_p1_idx_arr = net_p1_idx_arr[np.where(open_info_df1.side.loc[net_p1_idx_arr] == OrderSide.SELL)[0]]\n","    long_net_p1_idx_arr = net_p1_idx_arr[np.where(open_info_df1.side.loc[net_p1_idx_arr] == OrderSide.BUY)[0]]\n","\n","    short_net_p1_frq = len(short_net_p1_idx_arr)\n","    long_net_p1_frq = len(long_net_p1_idx_arr)\n","    # print(\"len(short_net_p1_true_bias_bool) :\", len(short_net_p1_idx_arr))\n","    # print(\"len(long_net_p1_true_bias_bool) :\", len(long_net_p1_idx_arr))\n","\n","    short_p1_openi_idx = np.where(open_info_df1.side.loc[p1_idx_arr] == OrderSide.SELL)[0]  # p1_idx_arr 에 대한 idx, # side_arr,\n","    long_p1_openi_idx = np.where(open_info_df1.side.loc[p1_idx_arr] == OrderSide.BUY)[0]\n","\n","    # p1_idx = open_idx[p1_openi_arr].reshape(-1, 1)   # != p1_idx_arr, p1_openi_arr 은 exit_done 기준임\n","\n","    np_obj = np.hstack((pair_price_arr, pair_idx_arr, p1_idx_arr.reshape(-1, 1)))  # p1_idx_arr is 1d, need to be changed to 2d (for stacking)\n","    short_obj = np_obj[short_p1_openi_idx]\n","    long_obj = np_obj[long_p1_openi_idx]\n","    both_obj = np.vstack((short_obj, long_obj))\n","    print(\"short_obj.shape :\", short_obj.shape)\n","    print(\"long_obj.shape :\", long_obj.shape)\n","\n","    short_obj, long_obj, both_obj = [np.split(obj_, 5, axis=1) for obj_ in [short_obj, long_obj, both_obj]]\n","\n","    short_p2_idx_arr, long_p2_idx_arr = [p2_idx_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_lvrg_arr, long_lvrg_arr = [lvrg_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_fee_arr, long_fee_arr = [fee_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_tpout_arr, long_tpout_arr = [tpout_arr[openi_idx_] for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    # short_bias_arr, long_bias_arr = [bias_arr[openi_idx_] for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_tr_arr, long_tr_arr = [tr_arr[openi_idx_] for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    # print(\"long_bias_arr.shape :\", long_bias_arr.shape)\n","    # print(\"short / long arr setting elapsed time :\", time.time() - start_0)\n","\n","    # start_0 = time.time()\n","\n","    short_tpbox_hhm, long_tpbox_hhm, short_tpbox_p2exec_hhm, long_tpbox_p2exec_hhm, short_outbox_hhm, long_outbox_hhm, short_p2_true_bias_bool, long_p2_true_bias_bool, \\\n","          short_tp_1, short_tp_0, long_tp_1, long_tp_0, short_out_1, short_out_0, long_out_1, long_out_0, short_ep2_0, long_ep2_0 = \\\n","      get_wave_bias_v5(res_df, config, high, low, len_df, short_net_p1_idx_arr, long_net_p1_idx_arr, short_p2_idx_arr, long_p2_idx_arr, short_obj, long_obj)\n","\n","    # print(\"get_wave_bias elapsed time :\", time.time() - start_0)\n","\n","    len_short, len_long = len(short_p1_openi_idx), len(long_p1_openi_idx)\n","\n","    # ------ plot_data ------ #\n","    try:\n","        # start_0 = time.time()\n","        if len_short == 0:\n","            short_pr = []\n","            gs_idx += 1\n","        else:\n","            short_tr = short_tr_arr.mean()\n","            short_pr, short_liqd = get_pr_v4(OrderSide.SELL, high, low, short_obj, short_tpout_arr, short_lvrg_arr, short_fee_arr, p_ranges,\n","                                             p_qty_ratio, inversion)\n","            short_total_pr = to_total_pr(len_df, short_pr, short_obj[-2])\n","            short_cum_pr = np.cumprod(short_total_pr)\n","            short_hlm = hlm(short_pr, short_p2_true_bias_bool)\n","            short_trade_ticks = np.mean(short_obj[-2] - short_obj[-1])\n","            if signi:\n","                short_idep_res_obj = (short_tpbox_p2exec_hhm, short_hlm) + get_res_info_nb_v2(sample_len, short_pr, short_total_pr, short_cum_pr, short_liqd)\n","            else:\n","                gs_idx = plot_info_v8(gs, gs_idx, len_df, sample_len, short_tr, short_tpbox_hhm, short_tpbox_p2exec_hhm, short_outbox_hhm, short_hlm, short_trade_ticks, short_net_p1_frq, short_pr, short_total_pr,\n","                                      short_cum_pr, short_liqd, short_lvrg_arr.mean(), title_position, fontsize)\n","        # print(\"short plot_data elapsed time :\", time.time() - start_0)\n","\n","    except Exception as e:\n","        gs_idx += 1\n","        print(\"error in short plot_data :\", e)\n","\n","    try:\n","        # start_0 = time.time()\n","        if len_long == 0:\n","            long_pr = []\n","            gs_idx += 1\n","        else:\n","            long_tr = long_tr_arr.mean()\n","            long_pr, long_liqd = get_pr_v4(OrderSide.BUY, high, low, long_obj, long_tpout_arr, long_lvrg_arr, long_fee_arr, p_ranges, p_qty_ratio,\n","                                           inversion)\n","            long_total_pr = to_total_pr(len_df, long_pr, long_obj[-2])\n","            long_cum_pr = np.cumprod(long_total_pr)\n","            # long_hhm = long_net_p1_hhm\n","            long_hlm = hlm(long_pr, long_p2_true_bias_bool)\n","            long_trade_ticks = np.mean(long_obj[-2] - long_obj[-1])\n","            if signi:\n","                long_idep_res_obj = (long_tpbox_p2exec_hhm, long_hlm) + get_res_info_nb_v2(sample_len, long_pr, long_total_pr, long_cum_pr, long_liqd)\n","            else:\n","                gs_idx = plot_info_v8(gs, gs_idx, len_df, sample_len, long_tr, long_tpbox_hhm, long_tpbox_p2exec_hhm, long_outbox_hhm, long_hlm, long_trade_ticks, long_net_p1_frq, long_pr, long_total_pr,\n","                                      long_cum_pr, long_liqd, long_lvrg_arr.mean(), title_position, fontsize)\n","        # print(\"long plot_data elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","        gs_idx += 1\n","        print(\"error in long plot_data :\", e)\n","\n","    try:\n","        # start_0 = time.time()\n","        if len_short * len_long == 0:\n","            both_pr = []\n","            gs_idx += 1\n","        else:\n","            both_tr = (short_tr + long_tr) / 2\n","            both_pr = np.vstack((short_pr, long_pr))  # for 2d arr, obj 를 1d 로 만들지 않는 이상, pr 은 2d 유지될 것\n","            both_total_pr = to_total_pr(len_df, both_pr, both_obj[-2])\n","            both_cum_pr = np.cumprod(both_total_pr)\n","            both_liqd = min(short_liqd, long_liqd)\n","            both_p2_true_bias_bool = np.hstack((short_p2_true_bias_bool, long_p2_true_bias_bool))  # hstack for 1d arr, vstack for 2d arr\n","            both_tpbox_hhm = (short_tpbox_hhm + long_tpbox_hhm) / 2\n","            both_tpbox_p2exec_hhm, both_hlm = (short_tpbox_p2exec_hhm + long_tpbox_p2exec_hhm) / 2, (short_hlm + long_hlm) / 2\n","            both_outbox_hhm = (short_outbox_hhm + long_outbox_hhm) / 2\n","            both_trade_ticks = np.mean(both_obj[-2] - both_obj[-1])\n","            both_net_p1_frq = short_net_p1_frq + long_net_p1_frq\n","            if signi:\n","                both_idep_res_obj = (both_tpbox_p2exec_hhm, both_hlm) + get_res_info_nb_v2(sample_len, both_pr, both_total_pr, both_cum_pr, both_liqd)\n","            else:\n","                gs_idx = plot_info_v8(gs, gs_idx, len_df, sample_len, both_tr, both_tpbox_hhm, both_tpbox_p2exec_hhm, both_outbox_hhm, both_hlm, both_trade_ticks, both_net_p1_frq, both_pr, both_total_pr,\n","                                      both_cum_pr, both_liqd, lvrg_arr.mean(), title_position, fontsize)\n","        # print(\"both plot_data elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","        gs_idx += 1\n","        print(\"error in both plot_data :\", e)\n","\n","    if not signi:\n","        if len_short * len_long > 0:\n","            for obj, bias_arr, cum_pr in zip([short_obj, long_obj, both_obj], [short_p2_true_bias_bool, long_p2_true_bias_bool, both_p2_true_bias_bool],\n","                                             [short_cum_pr, long_cum_pr, both_cum_pr]):\n","                try:\n","                    # start_0 = time.time()\n","                    gs_idx = frq_dev_plot_v4(gs, gs_idx, len_df, sample_len, obj[-2], bias_arr, cum_pr[-1], fontsize)\n","                    # print(\"frq_dev_plot elapsed time :\", time.time() - start_0)\n","                except Exception as e:\n","                    gs_idx += 1\n","                    print(\"error in frq_dev_plot :\", e)\n","            plt.show()\n","            plt.close()\n","\n","        return short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_tr_arr, short_p2_true_bias_bool, short_p2_idx_arr, short_tp_1, short_tp_0, short_out_1, short_out_0, short_ep2_0, \\\n","               long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_tr_arr, long_p2_true_bias_bool, long_p2_idx_arr, long_tp_1, long_tp_0, long_out_1, long_out_0, long_ep2_0  # long_net_p1_idx_arr long_p2_idx_arr\n","\n","    else:\n","        return [short_idep_res_obj[:-1], long_idep_res_obj[:-1], both_idep_res_obj[:-1]]"],"metadata":{"id":"6G92q_bExTVn"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oE5zkT75Beiy"},"outputs":[],"source":["\n","# ------------ plot survey_res ------------ #\n","title_list = [\"short\", \"long\", \"both\"]\n","sub_title_list = ['prcn', 'wb', 'len_pr', 'dpf', 'wr', 'sr', 'acc_pr', 'sum_pr', 'min_pr', 'liqd', 'acc_mdd', 'sum_mdd']\n","space_ = \" \" * 120\n","\n","fig = plt.figure(figsize=(24, 8))\n","plt.style.use('dark_background')\n","gs = gridspec.GridSpec(nrows=1,\n","                        ncols=3,\n","                        # height_ratios=[1, 1, 1]\n","                      )\n","# nrows, ncols, h_r = 3, 3, [1, 1, 1]\n","nrows, ncols, h_r = 3, 4, [1, 1, 1]\n","# nrows, ncols, h_r = 4, 3, [1, 1, 1, 1]\n","# if d_idx == 0:\n","# else:\n","  # nrows, ncols, h_r = 2, 2, [1, 1]\n","\n","for d_idx, (title_name, survey_res) in enumerate(zip(title_list, survey_res_list)):  \n","  inner_gs = gs[d_idx].subgridspec(nrows=nrows,\n","                        ncols=ncols,\n","                        height_ratios=h_r\n","                      )\n","  for in_idx, (data_, sub_title) in enumerate(zip(survey_res.T, sub_title_list)):\n","    plt.subplot(inner_gs[in_idx])\n","    data = data_.ravel()\n","    valid_idx = ~np.isnan(data)\n","    if np.sum(valid_idx) > 0:\n","      if type(val_list[0]) == str:\n","        x, y = np.arange(len(val_list))[valid_idx], data[valid_idx]\n","      else:\n","        x, y = val_list[valid_idx], data[valid_idx]\n","      plt.plot(x, y)  # 앞에서부터 len(result) 만큼만    \n","      plt.title(sub_title + '_{:.2f}'.format(x[np.argmax(y)]))\n","    else:\n","      plt.title(sub_title)\n","\n","plt.suptitle(space_.join(title_list))\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pbYUlJl34ImU"},"outputs":[],"source":["# ------ open validation ------ #\n","pos_side = \"SELL\" # SELL BUY\n","\n","if pos_side == \"SELL\":\n","  open_ = res_df['short_open1_{}'.format(config.selection_id)].to_numpy()\n","  open_ts = list(map(lambda x : str(x), res_df.index[open_ == 1]))  \n","else:\n","  open_ = res_df['long_open1_{}'.format(config.selection_id)].to_numpy()\n","  open_ts = list(map(lambda x : str(x), res_df.index[open_ == 1]))  "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wyYMYcxx4ImV"},"outputs":[],"source":["pos_index = open_info_df1.side == pos_side\n","for ts in res_df.index[open_info_df1.index[pos_index]]:\n","  print(ts)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6YcqQQzsl6Ys"},"outputs":[],"source":["\n","def hlm(pr_list, true_bool):   # true_pr in true_bias / true_bias\n","  true_bias_pr = pr_list[true_bool].ravel()\n","  print(\"len(pr_list) :\", len(pr_list))\n","  print(\"len(true_bias_pr) :\", len(true_bias_pr))\n","  print(\"np.sum(pr_list > 1) :\", np.sum(pr_list > 1))\n","  print(\"np.sum(true_bias_pr > 1) :\", np.sum(true_bias_pr > 1))\n","  return np.sum(true_bias_pr > 1) / len(true_bias_pr)  # 차원을 고려한 계산"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"t7a5Hyyyd5Lk"},"outputs":[],"source":["\n","def get_wave_bias_v5_1(res_df, config, high, low, len_df, short_net_p1_idx_arr, long_net_p1_idx_arr, short_p2_idx_arr, long_p2_idx_arr, short_obj, long_obj):\n","\n","    short_net_p1_idx = short_net_p1_idx_arr.astype(int) #.reshape(-1, 1)\n","    short_p1_idx = short_obj[-1].astype(int).ravel()\n","    short_p2_idx = short_p2_idx_arr.astype(int).ravel() #.reshape(-1, 1)\n","    short_en_idx = short_obj[2].astype(int)\n","\n","    short_prime_net_p1_bool = short_net_p1_idx - pd.Series(short_net_p1_idx).shift(1).to_numpy() > 1\n","    short_prime_net_p1_bool[0] = True\n","    short_prime_net_p1_idx = short_net_p1_idx[short_prime_net_p1_bool]\n","    \n","    short_prime_p2_bool = short_p2_idx - pd.Series(short_p2_idx).shift(1).to_numpy() > 1\n","    short_prime_p2_bool[0] = True\n","    short_prime_p2_idx = short_p2_idx[short_prime_p2_bool]\n","    \n","    short_tp_1 = ffill_line(res_df['short_tp_1_{}'.format(config.selection_id)].to_numpy(), short_prime_net_p1_idx)  # net_p1_idx ~ net_p1_idx' 사이에 대한 momentum 조사 (net 이유는 logic's validation)\n","    short_tp_0 = ffill_line(res_df['short_tp_0_{}'.format(config.selection_id)].to_numpy(), short_prime_net_p1_idx)\n","    short_out_1 = ffill_line(res_df['short_out_1_{}'.format(config.selection_id)].to_numpy(), short_prime_p2_idx)  # 체결된, p2_idx ~ p2_idx' 사이에 대한 momentum 조사\n","    short_out_0 = ffill_line(res_df['short_out_0_{}'.format(config.selection_id)].to_numpy(), short_prime_p2_idx)\n","    short_ep2_0 = ffill_line(res_df['short_ep2_0_{}'.format(config.selection_id)].to_numpy(), short_prime_p2_idx)\n","    # short_net_wave_1 = ffill_line(res_df['short_wave_1_{}'.format(config.selection_id)].to_numpy(), short_op_idx)  # en_idx 에 sync 된 open_idx 를 사용해야함\n","    # short_net_wave_0 = ffill_line(res_df['short_wave_0_{}'.format(config.selection_id)].to_numpy(), short_op_idx)\n","\n","    long_net_p1_idx = long_net_p1_idx_arr.astype(int) #.reshape(-1, 1)\n","    long_p1_idx = long_obj[-1].astype(int).ravel()\n","    long_p2_idx = long_p2_idx_arr.astype(int).ravel() #.reshape(-1, 1)\n","    long_en_idx = long_obj[2].astype(int)\n","\n","    long_prime_net_p1_bool = long_net_p1_idx - pd.Series(long_net_p1_idx).shift(1).to_numpy() > 1\n","    long_prime_net_p1_bool[0] = True\n","    long_prime_net_p1_idx = long_net_p1_idx[long_prime_net_p1_bool]\n","    \n","    long_prime_p2_bool = long_p2_idx - pd.Series(long_p2_idx).shift(1).to_numpy() > 1\n","    long_prime_p2_bool[0] = True\n","    long_prime_p2_idx = long_p2_idx[long_prime_p2_bool]\n","    \n","    long_tp_1 = ffill_line(res_df['long_tp_1_{}'.format(config.selection_id)].to_numpy(), long_prime_net_p1_idx)\n","    long_tp_0 = ffill_line(res_df['long_tp_0_{}'.format(config.selection_id)].to_numpy(), long_prime_net_p1_idx)\n","    long_out_1 = ffill_line(res_df['long_out_1_{}'.format(config.selection_id)].to_numpy(), long_prime_p2_idx)  # 체결된, p2_idx ~ p2_idx' 사이에 대한 momentum 조사\n","    long_out_0 = ffill_line(res_df['long_out_0_{}'.format(config.selection_id)].to_numpy(), long_prime_p2_idx)\n","    long_ep2_0 = ffill_line(res_df['long_ep2_0_{}'.format(config.selection_id)].to_numpy(), long_prime_p2_idx)\n","\n","    short_unq_p1_idx = np.unique(short_p1_idx)  #.reshape(-1, 1)   # 통일성을 위해 2d 로 설정\n","    long_unq_p1_idx = np.unique(long_p1_idx)  #.reshape(-1, 1)\n","\n","    bias_info_tick = config.tr_set.bias_info_tick\n","\n","    # print(\"long_net_p1_idx.shape :\", long_net_p1_idx.shape)\n","    # print(\"long_en_idx.shape :\", long_en_idx.shape)\n","\n","    # ================== touch idx ================== #\n","    # 1. min 에 초점을 맞추는 거니까, touch 없을시 len_df 로 설정\n","    # 2. future_data 사용이니까, shift(-bias_info_tick) 설정\n","    # 3. entry 다음 idx 부터 -> tp & out 체결 logic 이 현재 entry_idx 부터 되어있어서 취소\n","    # Todo, high 와 low 중 어디에 먼저닿느냐가 중요함을 key 로 잡고만든 logic 임\n","    len_df_range = np.arange(len_df)\n","    last_idx = len_df - 1  # nan 발생하면 대소 비교로 hhm 확인이 불가능해짐\n","    shift_range = bias_info_tick - 1  # entry_idx 까지 포함해서 wave_bias check\n","\n","    # ------------ pair & idxs ------------ #\n","    short_net_p1_pair = list(zip(short_net_p1_idx, np.append(short_net_p1_idx[1:], last_idx)))\n","    long_net_p1_pair = list(zip(long_net_p1_idx, np.append(long_net_p1_idx[1:], last_idx)))\n","\n","    short_p2_pair = list(zip(short_p2_idx, np.append(short_p2_idx[1:], last_idx)))\n","    long_p2_pair = list(zip(long_p2_idx, np.append(long_p2_idx[1:], last_idx)))\n","\n","    short_tp_1_touch_idxs = np.where(low <= short_tp_1, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    short_tp_0_touch_idxs = np.where(high >= short_tp_0, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    long_tp_1_touch_idxs = np.where(high >= long_tp_1, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    long_tp_0_touch_idxs = np.where(low <= long_tp_0, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","\n","    short_out_1_touch_idxs = np.where(low <= short_out_1, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    short_out_0_touch_idxs = np.where(high >= short_out_0, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    long_out_1_touch_idxs = np.where(high >= long_out_1, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    long_out_0_touch_idxs = np.where(low <= long_out_0, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","\n","    # ------------ min touch_idx ------------ #\n","    short_tp_1_touch_idx = get_touch_idx_fill(short_tp_1_touch_idxs, short_net_p1_pair, short_net_p1_idx, len_df)  # pair means 구간\n","    short_tp_0_touch_idx = get_touch_idx_fill(short_tp_0_touch_idxs, short_net_p1_pair, short_net_p1_idx, len_df)\n","    long_tp_1_touch_idx = get_touch_idx_fill(long_tp_1_touch_idxs, long_net_p1_pair, long_net_p1_idx, len_df)\n","    long_tp_0_touch_idx = get_touch_idx_fill(long_tp_0_touch_idxs, long_net_p1_pair, long_net_p1_idx, len_df)\n","\n","    short_out_1_touch_idx = get_touch_idx_fill(short_out_1_touch_idxs, short_p2_pair, short_p2_idx, len_df)  # pair means 구간\n","    short_out_0_touch_idx = get_touch_idx_fill(short_out_0_touch_idxs, short_p2_pair, short_p2_idx, len_df)\n","    long_out_1_touch_idx = get_touch_idx_fill(long_out_1_touch_idxs, long_p2_pair, long_p2_idx, len_df)\n","    long_out_0_touch_idx = get_touch_idx_fill(long_out_0_touch_idxs, long_p2_pair, long_p2_idx, len_df)\n","\n","    # ------------ point's touch_idx ------------ #\n","    short_tp_1_net_p1_touch_idx = short_tp_1_touch_idx[short_net_p1_idx]   # for tp_box's net_hhm\n","    short_tp_0_net_p1_touch_idx = short_tp_0_touch_idx[short_net_p1_idx]\n","    long_tp_1_net_p1_touch_idx = long_tp_1_touch_idx[long_net_p1_idx]\n","    long_tp_0_net_p1_touch_idx = long_tp_0_touch_idx[long_net_p1_idx]\n","    # print(\"long_tp_1_net_p1_touch_idx :\", long_tp_1_net_p1_touch_idx)\n","\n","    short_tp_1_unq_p1_touch_idx = short_tp_1_touch_idx[short_unq_p1_idx]    # p2 까지 체결된 p1's hhm\n","    short_tp_0_unq_p1_touch_idx = short_tp_0_touch_idx[short_unq_p1_idx]\n","    long_tp_1_unq_p1_touch_idx = long_tp_1_touch_idx[long_unq_p1_idx]\n","    long_tp_0_unq_p1_touch_idx = long_tp_0_touch_idx[long_unq_p1_idx]\n","\n","    short_tp_1_p2_touch_idx = short_tp_1_touch_idx[short_p2_idx]    # hlm 을 위한 hhm (on p2)\n","    short_tp_0_p2_touch_idx = short_tp_0_touch_idx[short_p2_idx]\n","    long_tp_1_p2_touch_idx = long_tp_1_touch_idx[long_p2_idx]\n","    long_tp_0_p2_touch_idx = long_tp_0_touch_idx[long_p2_idx]\n","\n","    short_out_1_p2_touch_idx = short_out_1_touch_idx[short_p2_idx]   # for out_box's executed_hhm\n","    short_out_0_p2_touch_idx = short_out_0_touch_idx[short_p2_idx]\n","    long_out_1_p2_touch_idx = long_out_1_touch_idx[long_p2_idx]\n","    long_out_0_p2_touch_idx = long_out_0_touch_idx[long_p2_idx]\n","\n","    # ------------------ bias_bool & hhm ------------------ #\n","    short_net_p1_true_bias_bool = short_tp_1_net_p1_touch_idx < short_tp_0_net_p1_touch_idx  # true_bias 의 조건\n","    short_net_p1_false_bias_bool = short_tp_1_net_p1_touch_idx >= short_tp_0_net_p1_touch_idx  # false_bias 의 조건, ~true_bias_bool 와 같지 않음, why ..? = en_idx\n","    long_net_p1_true_bias_bool = long_tp_1_net_p1_touch_idx < long_tp_0_net_p1_touch_idx\n","    long_net_p1_false_bias_bool = long_tp_1_net_p1_touch_idx >= long_tp_0_net_p1_touch_idx\n","\n","    short_unq_p1_true_bias_bool = short_tp_1_unq_p1_touch_idx < short_tp_0_unq_p1_touch_idx  # true_bias 의 조건\n","    short_unq_p1_false_bias_bool = short_tp_1_unq_p1_touch_idx >= short_tp_0_unq_p1_touch_idx  # false_bias 의 조건, ~true_bias_bool 와 같지 않음, why ..? = en_idx    \n","    long_unq_p1_true_bias_bool = long_tp_1_unq_p1_touch_idx < long_tp_0_unq_p1_touch_idx\n","    long_unq_p1_false_bias_bool = long_tp_1_unq_p1_touch_idx >= long_tp_0_unq_p1_touch_idx\n","\n","    short_p2_true_bias_bool = short_tp_1_p2_touch_idx < short_tp_0_p2_touch_idx\n","    short_p2_false_bias_bool = short_tp_1_p2_touch_idx >= short_tp_0_p2_touch_idx\n","    long_p2_true_bias_bool = long_tp_1_p2_touch_idx < long_tp_0_p2_touch_idx\n","    long_p2_false_bias_bool = long_tp_1_p2_touch_idx >= long_tp_0_p2_touch_idx\n","\n","    short_p2_out_true_bias_bool = short_out_1_p2_touch_idx < short_out_0_p2_touch_idx\n","    short_p2_out_false_bias_bool = short_out_1_p2_touch_idx >= short_out_0_p2_touch_idx\n","    long_p2_out_true_bias_bool = long_out_1_p2_touch_idx < long_out_0_p2_touch_idx\n","    long_p2_out_false_bias_bool = long_out_1_p2_touch_idx >= long_out_0_p2_touch_idx\n","\n","    short_net_p1_hhm = hhm(short_net_p1_true_bias_bool, short_net_p1_false_bias_bool)\n","    long_net_p1_hhm = hhm(long_net_p1_true_bias_bool, long_net_p1_false_bias_bool)\n","\n","    short_p1_hhm = hhm(short_unq_p1_true_bias_bool, short_unq_p1_false_bias_bool)\n","    long_p1_hhm = hhm(long_unq_p1_true_bias_bool, long_unq_p1_false_bias_bool)\n","\n","    # short_p2_hhm = hhm(short_p2_true_bias_bool, short_p2_false_bias_bool)\n","    # long_p2_hhm = hhm(long_p2_true_bias_bool, long_p2_false_bias_bool)\n","\n","    short_out_hhm = hhm(short_p2_out_true_bias_bool, short_p2_out_false_bias_bool)\n","    long_out_hhm = hhm(long_p2_out_true_bias_bool, long_p2_out_false_bias_bool)\n","\n","    # print(\"short_net_p1_hhm, short_p2_hhm, short_out_hhm :\", short_net_p1_hhm, short_p2_hhm, short_out_hhm)\n","\n","    return short_net_p1_hhm, long_net_p1_hhm, short_p1_hhm, long_p1_hhm, short_out_hhm, long_out_hhm, short_p2_true_bias_bool, long_p2_true_bias_bool, \\\n","          short_tp_1[short_en_idx], short_tp_0[short_en_idx], long_tp_1[long_en_idx], long_tp_0[long_en_idx], \\\n","          short_out_1[short_en_idx], short_out_0[short_en_idx], long_out_1[long_en_idx], long_out_0[long_en_idx], short_ep2_0[short_en_idx], long_ep2_0[long_en_idx]   # plot_check 을 위해 en_idx 넣음\n","          "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dsI-R8Zz7ls1"},"outputs":[],"source":["\n","        # tr_arr = res_df['{}_tr_{}'.format(side_pos, selection_id)].to_numpy()\n","\n","        # ------ point1 & 2's tp_j ------ #\n","        # point_idxgap = point_idxgap_arr[op_idx]\n","        # if np.isnan(point_idxgap):\n","        #     continue\n","        # else:\n","        #     # ------ allow point2 only next to point1 ------ #\n","        #     open_arr = res_df['{}_open_{}'.format(side_pos, selection_id)].to_numpy()\n","        #     tp_j = int(op_idx - point_idxgap)\n","        #     if np.sum(open_arr[tp_j:op_idx]) != 0:\n","        #         continue"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":157},"executionInfo":{"elapsed":350,"status":"ok","timestamp":1652751452213,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"gMur2u8WeQ2K","outputId":"7b506c38-7a8f-4bd1-a021-8a065d009882"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 1152x144 with 2 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# ------ bias frquency ------ #\n","len_df = len(res_df)\n","\n","plt.figure(figsize=(16, 2))\n","\n","ax1 = plt.subplot(121)\n","plt.fill_between(short_obj[-2].ravel(), 0, 1, where=short_bias_arr.ravel() > 0,\n","                facecolor='#00ff00', alpha=1, transform=ax1.get_xaxis_transform())   # 00ff00\n","# plt.fill_between(short_obj[-2].ravel(), 0, 1, where=short_bias_arr.ravel() < 1,\n","#                 facecolor='#ff00ff', alpha=1, transform=ax1.get_xaxis_transform())\n","\n","ax2 = plt.subplot(122)\n","plt.fill_between(long_obj[-2].ravel(), 0, 1, where=long_bias_arr.ravel() > 0,\n","                facecolor='#00ff00', alpha=1, transform=ax2.get_xaxis_transform())\n","plt.fill_between(long_obj[-2].ravel(), 0, 1, where=long_bias_arr.ravel() < 1,\n","                facecolor='#ff00ff', alpha=1, transform=ax2.get_xaxis_transform())\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":157},"executionInfo":{"elapsed":872,"status":"ok","timestamp":1652756329304,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"eoXMxRm3qdz2","outputId":"98c90b55-4c14-402c-e2d4-d7b88f9e2e62"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 1152x144 with 2 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# ------ bias frquency ------ #\n","len_df = len(res_df)\n","\n","plt.figure(figsize=(16, 2))\n","\n","ax1 = plt.subplot(121)\n","plt.fill_between(short_obj[-2].ravel(), 0, 1, where=short_bias_arr.ravel() > 0,\n","                facecolor='#00ff00', alpha=1, transform=ax1.get_xaxis_transform())   # 00ff00\n","# plt.fill_between(short_obj[-2].ravel(), 0, 1, where=short_bias_arr.ravel() < 1,\n","#                 facecolor='#ff00ff', alpha=1, transform=ax1.get_xaxis_transform())\n","\n","ax2 = plt.subplot(122)\n","plt.vlines(long_obj[-2][long_bias_arr], ymin=0, ymax=1, color='#00ff00')\n","plt.vlines(long_obj[-2][~long_bias_arr], ymin=0, ymax=1, color='#ff00ff')\n","# [plt.axvline(x_, color='#ff00ff') for x_, bias_ in zip(long_obj[-2], long_bias_arr) if not bias_]\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dm7ZqzS9vqhm"},"outputs":[],"source":["%timeit -n1 -r10 plt.vlines(long_obj[-2][long_bias_arr], ymin=0, ymax=1, color='#00ff00')  # 528 ms per loop --> 8.71 ms per loop\n","%timeit -n1 -r10 [plt.axvline(x_, color='#00ff00') for x_, bias_ in zip(long_obj[-2], long_bias_arr) if bias_]\n","\n","# np.sum(long_bias_arr == ~long_bias_arr)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qOE2YSzntx8v"},"outputs":[],"source":["# %timeit -n1 -r10 [plt.axvline(x_) for x_, bias_ in zip(long_obj[-2].ravel(), long_bias_arr.ravel()) if bias_]\n","%timeit -n1 -r10 plt.fill_between(long_obj[-2].ravel(), 0, 1, where=long_bias_arr.ravel() > 0, facecolor='#00ff00', alpha=1, transform=ax2.get_xaxis_transform())"]},{"cell_type":"markdown","metadata":{"id":"dHFkv6Ar1ojU"},"source":["## plot_check_v3"]},{"cell_type":"code","execution_count":101,"metadata":{"id":"rMIwv1Nr1ojX","executionInfo":{"status":"ok","timestamp":1662365061433,"user_tz":-540,"elapsed":360,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# ------------------ plot_config ------------------ #\n","save_mode = 0\n","\n","front_plot = 0    # 0 : p1_tick, 1 : p2_tick\n","back_plot = 4     # 0 : post_plot_size, 1 : open, 2 : p2_tick, 3 : ep_tick, 4 : tp_tick\n","x_max = 300       # back_plot : 0 사용시, custom x_max 반영됨\n","\n","bias_plot = 1     # 1 : true_bias only, -1 : false_bias only, 0 : both\n","\n","pr_descend = 1   # 1 : 큰 pr 부터, -1 : 작은 pr 부터, 0 : 순서대로\n","\n","position = 1      # -1 : short, 0 & 1 : long\n","\n","x_margin_mult = 1/30\n","y_margin_mult = 1/30  # 0 \n","\n","prev_plotsize = 100 #  150 100 20 500 1000\n","post_plotsize = 200 #\n","\n","inversion = 0\n","hedge = 0\n","\n","# ------ show or save ------ #\n","if save_mode:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".ftr\", \"\")\n","  shutil.rmtree(plot_check_dir, ignore_errors=True)  # remove existing dir\n","  os.makedirs(plot_check_dir)\n","  print(plot_check_dir)\n","else:\n","  plot_check_dir = None\n","\n","# ------------ 한 방향에 대해 plot_check 함 (by position var.) ------------ #\n","#   obj by position  \n","if position == -1:\n","  pos_str = \"SELL\"\n","  pr_, obj_ = short_pr, short_obj\n","  arr_list = [short_p2_idx_arr, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_bias_arr, short_net_p1_bias_tick, short_tp_1, short_tp_0, short_out_1, short_out_0, short_ep2_0]\n","else:   # both option currently not supported\n","  pos_str = \"BUY\"\n","  pr_, obj_ = long_pr, long_obj\n","  arr_list = [long_p2_idx_arr, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_bias_arr, long_net_p1_bias_tick, long_tp_1, long_tp_0, long_out_1, long_out_0, long_ep2_0]\n","\n","if pr_descend:\n","  if pr_descend == -1:\n","    pr_descend = 0\n","  pr, obj, [p2_idx_arr, lvrg_arr, fee_arr, tpout_arr, bias_arr, bias_tick, tp_1, tp_0, out_1, out_0, ep2_0] = sort_bypr_v4(pr_, obj_, arr_list, descending=pr_descend)  # --> pr_descend 의 의미가 사라짐.. (false -> true plot 으로 이동한 것뿐)\n","else:\n","  pr, obj, [p2_idx_arr, lvrg_arr, fee_arr, tpout_arr, bias_arr, bias_tick, tp_1, tp_0, out_1, out_0, ep2_0] = pr_, obj_, arr_list\n","\n","pr_msg = \"%s\\n {} ~ {} -> {:.5f}\\n lvrg : {}\\n fee : {:.4f}\" % (pos_str)  # = data_window, pos_str 으로 이곳에서 정의함\n","\n","try:   # wave_range 단독 실행의 경우 tr_arr 이 존재하지 않기 때문에 try 처리함\n","  res_df['short_tr_{}'.format(selection_id)].iloc[short_obj[-1].astype(int).ravel()] = short_tr_arr\n","  res_df['long_tr_{}'.format(selection_id)].iloc[long_obj[-1].astype(int).ravel()] = long_tr_arr\n","except:\n","  pass\n","\n","if front_plot == 0:\n","  front_idx = obj[4]      # left_margin 기준 - open_idx\n","else:\n","  front_idx = p2_idx_arr  # left_margin 기준 - p2_idx\n","\n","left_end_idx = front_idx - prev_plotsize  \n","right_end_idx = obj[3] + post_plotsize\n","invalid_left_end = np.sum(left_end_idx < 0)\n","\n","np_plot_params = np.hstack((left_end_idx, right_end_idx, pr, *obj, p2_idx_arr, lvrg_arr, fee_arr, tpout_arr, tp_1, tp_0, out_1, out_0, ep2_0))[invalid_left_end:]  # all arr should have same dimension\n","# plot_idx = np.full(len(np_plot_params), True)\n","\n","if bias_plot:\n","  if bias_plot == 1:\n","    bias_idx = bias_arr[invalid_left_end:].ravel()  # true_bias 만 plot\n","  else:\n","    bias_idx = ~bias_arr[invalid_left_end:].ravel()  # false_bias 만 plot\n","  \n","  # trendy_idx = bias_tick[invalid_left_end:] < config.tr_set.bias_tick  # temp location\n","\n","  np_plot_params = np_plot_params[bias_idx] #  * trendy_idx]  "]},{"cell_type":"markdown","metadata":{"id":"-4CXGqEN1ojY"},"source":["### session_plot"]},{"cell_type":"code","execution_count":90,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":501,"status":"ok","timestamp":1662364271867,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"2bjxKCIh1ojZ","outputId":"82dd9416-72b1-48e4-a9b4-9f87f8195fa5"},"outputs":[{"output_type":"stream","name":"stderr","text":["/content/drive/My Drive/Colab Notebooks/JnQ/funcs/funcs_plot_check.py:11: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  step_col_arr = np.array(col_list)\n"]}],"source":["selection_id = config.selection_id\n","\n","# ============ make col_idx_dict config ============ #\n","nonstep_col_list = []\n","step_col_list = []\n","step_col_list2 = []\n","stepmark_col_list = []\n","data_window_p1_col_list = []\n","data_window_p2_col_list = []\n","\n","# ============ nonstep_col_list - add info(col, alpha, color, linewidth) ============ #\n","# nonstep_col_list.append([['close'], 1, '#ffffff', 2])\n","\n","# ============ step_col_list - add info(col, alpha, color, linewidth) ============ #\n","# ------ htf_candle ------ #\n","# hc_tf1 = '5T'\n","# hc_tf2 = '15T'\n","\n","# step_col_list.append([['open_{}'.format(hc_tf1), 'close_{}'.format(hc_tf1)], 1, '#ffffff', 2])\n","# step_col_list.append([['open_{}'.format(hc_tf2), 'close_{}'.format(hc_tf2)], 1, '#ffffff', 4])\n","\n","# ------ resi_sup ------ #\n","# rs_tf = 'T'\n","# step_col_list.append([['resi_{}'.format(rs_tf), 'sup_{}'.format(rs_tf)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['resi_out_{}'.format(rs_tf), 'sup_out_{}'.format(rs_tf)], 1, 'dodgerblue', 2])\n","\n","# ------ wave_base ------ #\n","wave_itv1 = config.tr_set.wave_itv1\n","wave_period1 = config.tr_set.wave_period1\n","wave_itv2 = config.tr_set.wave_itv2\n","wave_period2 = config.tr_set.wave_period2\n","\n","# step_col_list.append([['dc_base_{}{}'.format(wave_itv1, wave_period1)], 1, '#5b9cf6', 1])\n","# step_col_list.append([['dc_base_{}{}'.format(wave_itv2, wave_period2)], 1, '#5b9cf6', 5])\n","\n","# step_col_list.append([['wave_low_fill_{}{}'.format(wave_tf, wave_period)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['wave_high_fill_{}{}'.format(wave_tf, wave_period)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['dc_upper_{}{}'.format(wave_tf, wave_period), 'dc_lower_{}{}'.format(wave_tf, wave_period)], 1, '#ffeb3b', 1])\n","\n","# ------ dc ------ #\n","dc_tf1 = 'T'\n","dc_period1 = 20 # wave_period2  # 20\n","dc_tf2 = '5T'\n","dc_period2 = 20 # config.loc_set.point2.csd_period if config.loc_set.point2.csd_period != \"None\" else wave_period2 \n","dc_tf3 = '15T'\n","dc_period3 = 20\n","dc_tf3 = 'H'\n","dc_period3 = 20\n","\n","# step_col_list.append([['dc_upper_{}{}'.format(dc_tf1, dc_period1), 'dc_lower_{}{}'.format(dc_tf1, dc_period1)], 1, '#ff00ff', 1]),  # inner #ffeb3b\n","step_col_list.append([['dc_base_{}{}'.format(dc_tf1, dc_period1)], 1, '#5b9cf6', 1]) # ffee58 5b9cf6 \n","# step_col_list.append([['dc_upper_{}{}'.format(dc_tf2, dc_period2), 'dc_lower_{}{}'.format(dc_tf2, dc_period2)], 1, '#ffee58', 2]),  # inner #ffeb3b\n","step_col_list.append([['dc_base_{}{}'.format(dc_tf2, dc_period2)], 1, '#5b9cf6', 3]) # ffee58 5b9cf6\n","step_col_list.append([['dc_base_{}{}'.format(dc_tf3, dc_period3)], 1, '#5b9cf6', 5]) # ffee58 5b9cf6\n","# step_col_list.append([['dc_base_{}{}'.format(dc_tf3, dc_period3)], 1, '#5b9cf6', 7]) # ffee58 5b9cf6\n","\n","# ------ bb ------ #\n","bb_tf1 = 'T'\n","bb_period1 = 60\n","\n","# step_col_list.append([['bb_upper_{}{}'.format(bb_tf1, bb_period1), 'bb_lower_{}{}'.format(bb_tf1, bb_period1)], 1, '#ffffff', 1])\n","# step_col_list.append([['bb_upper2_{}{}'.format(bb_tf1, bb_period1), 'bb_lower2_{}{}'.format(bb_tf1, bb_period1)], 1, '#ffffff', 1])\n","# step_col_list.append([['bb_upper3_{}{}'.format(bb_tf1, bb_period1), 'bb_lower3_{}{}'.format(bb_tf1, bb_period1)], 1, '#ffffff', 1])\n","# step_col_list.append([['bb_base_{}{}'.format(bb_tf1, bb_period1)], 1, '#00ff00', 1])\n","\n","\n","# ------ ma / ema ------ #\n","# step_col_list.append([['ema_5T'], 1, '#03ed30', 2])\n","\n","ma_period = 60\n","step_col_list.append([['ma_T{}'.format(ma_period)], 1, '#03ed30', 2])\n","# step_col_list.append([['long_ma_T{}_-1'.format(ma_period)], 1, '#03ed30', 2])\n","\n","# ============ step_col_list2 - add info(col, alpha, color, linewidth) ============ #\n","# ------ cci ------ #\n","step_col_list2.append([['cci_{}{}'.format(wave_itv1, wave_period1)], 1, '#00ff00', 3])\n","step_col_list2.append([['cci_{}{}'.format(wave_itv2, wave_period2)], 1, '#00ff00', 1])\n","\n","# ------ stoch ------ #\n","# step_col_list2.append([['stoch_{}{}33'.format(wave_itv1, wave_period1)], 1, '#00ff00', 3])\n","\n","# ------ macd ------ #\n","# step_col_list2.append([['macd_T535'], 1, '#00ff00', 1])\n","\n","\n","# ============ stepmark_col_list - add info(col, alpha, color, linewidth, marker_style) ============ #\n","# stepmark_col_list.append([['sar_T'], 1, 'dodgerblue', 7])\n","\n","# ------ wave_range ------ #\n","stepmark_col_list.append([['wave_low_fill_{}{}'.format(wave_itv1, wave_period1)], 1, '#e91e63', 10, '*'])\n","stepmark_col_list.append([['wave_high_fill_{}{}'.format(wave_itv1, wave_period1)], 1, '#2962ff', 10, '*'])\n","\n","stepmark_col_list.append([['wave_low_fill_{}{}'.format(wave_itv2, wave_period2)], 1, '#ff00ff', 7, '*'])\n","stepmark_col_list.append([['wave_high_fill_{}{}'.format(wave_itv2, wave_period2)], 1, '#00ff00', 7, '*'])\n","  \n","# stepmark_col_list.append([['wave_co_marker_{}{}'.format(wave_itv1, wave_period1)], 1, '#00ff00', 3, 'o'])\n","# stepmark_col_list.append([['wave_cu_marker_{}{}'.format(wave_itv1, wave_period1)], 1, '#ff00ff', 3, 'o'])\n","\n","# ============ data_window_col_list ============ #\n","# ------ wrr ------ #\n","# data_window_col_list.append([['cu_wrr_21_{}{}'.format(wave_itv1, wave_period1)], 'cu_wrr_21_{}{}'.format(wave_itv1, wave_period1)])\n","# data_window_col_list.append([['co_wrr_21_{}{}'.format(wave_itv1, wave_period1)], 'co_wrr_21_{}{}'.format(wave_itv1, wave_period1)])\n","data_window_p1_col_list.append([['cu_wrr_32_{}{}'.format(wave_itv1, wave_period1)], 'cu_wrr_32_{}{}'.format(wave_itv1, wave_period1)])\n","data_window_p1_col_list.append([['co_wrr_32_{}{}'.format(wave_itv1, wave_period1)], 'co_wrr_32_{}{}'.format(wave_itv1, wave_period1)])\n","# data_window_p2_col_list.append([['cu_wrr_32_{}{}'.format(wave_itv2, wave_period2)], 'cu_wrr_32_{}{}'.format(wave_itv2, wave_period2)])\n","# data_window_p2_col_list.append([['co_wrr_32_{}{}'.format(wave_itv2, wave_period2)], 'co_wrr_32_{}{}'.format(wave_itv2, wave_period2)])\n","\n","data_window_p1_col_list.append([['short_tr_{}'.format(selection_id)], 'short_tr_{}'.format(selection_id)])\n","data_window_p1_col_list.append([['long_tr_{}'.format(selection_id)], 'long_tr_{}'.format(selection_id)])\n","\n","\n","# ====== str to numbcol ====== #\n","nonstep_col_arr = strcol_tonumb(res_df, nonstep_col_list)\n","step_col_arr = strcol_tonumb(res_df, step_col_list)\n","step_col_arr2 = strcol_tonumb(res_df, step_col_list2)\n","stepmark_col_arr = strcol_tonumb(res_df, stepmark_col_list)\n","data_window_p1_col_arr = strcol_tonumb(res_df, data_window_p1_col_list)\n","data_window_p2_col_arr = strcol_tonumb(res_df, data_window_p2_col_list)\n","\n","col_idx_dict = \\\n","{\n","  \"ohlc_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close']),\n","  \"vp_col_idxs\": get_col_idxs(res_df, ['close', 'volume']),\n","  \"post_cu_idx\": get_col_idxs(res_df, ['wave_cu_post_idx_fill_{}{}'.format(wave_itv1, wave_period1)]),\n","  \"post_co_idx\": get_col_idxs(res_df, ['wave_co_post_idx_fill_{}{}'.format(wave_itv1, wave_period1)]),\n","  # \"post_cu_idx\": get_col_idxs(res_df, ['wave_cu_prime_idx_fill_{}{}'.format(wave_itv1, wave_period1)]),\n","  # \"post_co_idx\": get_col_idxs(res_df, ['wave_co_prime_idx_fill_{}{}'.format(wave_itv1, wave_period1)]),\n","  # \"ohlc_col_idxs\": get_col_idxs(res_df, ['haopen', 'hahigh', 'halow', 'haclose']),  # heikin-ashi ver.\n","  \"nonstep_col_info\": nonstep_col_arr,\n","  \"step_col_info\": step_col_arr,\n","  \"step_col_info2\": step_col_arr2,\n","  \"stepmark_col_info\": stepmark_col_arr,\n","  \"data_window_p1_col_info\": data_window_p1_col_arr,\n","  \"data_window_p2_col_info\": data_window_p2_col_arr,\n","  \"ylim_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close', 'short_tp_1_{}'.format(selection_id), 'long_tp_1_{}'.format(selection_id), 'short_tp_0_{}'.format(selection_id), 'long_tp_0_{}'.format(selection_id)])  \n","}   \n","#   'wave_low_fill_{}{}'.format(wave_itv2, wave_period2), 'wave_high_fill_{}{}'.format(wave_itv2, wave_period2)\n","#   'dc_upper_H', 'dc_lower_H', 'dc_upper_15T', 'dc_lower_15T', 'short_out_{}'.format(selection_id), 'long_out_{}'.format(selection_id)\n","#   'wave_1_{}'.format(wave_itv2), 'wave_0_{}'.format(wave_itv2), 'dc_upper_15T', 'dc_lower_15T'"]},{"cell_type":"markdown","metadata":{"id":"XfvH5ngyieS9"},"source":["#### session_plot main"]},{"cell_type":"code","execution_count":102,"metadata":{"id":"OCLMABZT1ojb","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"error","timestamp":1662365111736,"user_tz":-540,"elapsed":47446,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"68f43062-5516-4509-ecaf-42ad922c7775"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 4 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 4 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 4 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 4 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 4 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 4 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 4 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 4 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 4 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-102-4ce521a836a6>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# p2_hlm 의 경우, tr 확인을 우해 session_plot 우선 실행 필요함\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0m_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mplot_check_v9\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mres_df\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparam_zip\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpr_msg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_margin_mult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_margin_mult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mback_plot\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mplot_check_dir\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcol_idx_dict\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mparam_zip\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp_plot_params\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp_plot_params\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-102-4ce521a836a6>\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# p2_hlm 의 경우, tr 확인을 우해 session_plot 우선 실행 필요함\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0m_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mplot_check_v9\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mres_df\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparam_zip\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpr_msg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_margin_mult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_margin_mult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mback_plot\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mplot_check_dir\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcol_idx_dict\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mparam_zip\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp_plot_params\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp_plot_params\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/content/drive/My Drive/Colab Notebooks/JnQ/funcs/funcs_plot_check.py\u001b[0m in \u001b[0;36mplot_check_v9\u001b[0;34m(res_df, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, back_plot, plot_check_dir, **col_idx_dict)\u001b[0m\n\u001b[1;32m    312\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    313\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mplot_check_dir\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 314\u001b[0;31m     \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    315\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    316\u001b[0m   \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/pyplot.py\u001b[0m in \u001b[0;36mshow\u001b[0;34m(*args, **kw)\u001b[0m\n\u001b[1;32m    270\u001b[0m     \"\"\"\n\u001b[1;32m    271\u001b[0m     \u001b[0;32mglobal\u001b[0m \u001b[0m_show\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 272\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_show\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    273\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    274\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/ipykernel/pylab/backend_inline.py\u001b[0m in \u001b[0;36mshow\u001b[0;34m(close, block)\u001b[0m\n\u001b[1;32m     41\u001b[0m             display(\n\u001b[1;32m     42\u001b[0m                 \u001b[0mfigure_manager\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcanvas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 43\u001b[0;31m                 \u001b[0mmetadata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0m_fetch_figure_metadata\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigure_manager\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcanvas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     44\u001b[0m             )\n\u001b[1;32m     45\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/IPython/core/display.py\u001b[0m in \u001b[0;36mdisplay\u001b[0;34m(include, exclude, metadata, transient, display_id, *objs, **kwargs)\u001b[0m\n\u001b[1;32m    311\u001b[0m             \u001b[0mpublish_display_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmetadata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmetadata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    312\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 313\u001b[0;31m             \u001b[0mformat_dict\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmd_dict\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minclude\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minclude\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexclude\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mexclude\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    314\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mformat_dict\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    315\u001b[0m                 \u001b[0;31m# nothing to display (e.g. _ipython_display_ took over)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/IPython/core/formatters.py\u001b[0m in \u001b[0;36mformat\u001b[0;34m(self, obj, include, exclude)\u001b[0m\n\u001b[1;32m    178\u001b[0m             \u001b[0mmd\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    179\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 180\u001b[0;31m                 \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mformatter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    181\u001b[0m             \u001b[0;32mexcept\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    182\u001b[0m                 \u001b[0;31m# FIXME: log the exception\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<decorator-gen-2>\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, obj)\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/IPython/core/formatters.py\u001b[0m in \u001b[0;36mcatch_format_error\u001b[0;34m(method, self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    222\u001b[0m     \u001b[0;34m\"\"\"show traceback on failed format call\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    223\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 224\u001b[0;31m         \u001b[0mr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    225\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mNotImplementedError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    226\u001b[0m         \u001b[0;31m# don't warn on NotImplementedErrors\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/IPython/core/formatters.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, obj)\u001b[0m\n\u001b[1;32m    339\u001b[0m                 \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    340\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 341\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mprinter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    342\u001b[0m             \u001b[0;31m# Finally look for special method names\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    343\u001b[0m             \u001b[0mmethod\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_real_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprint_method\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/IPython/core/pylabtools.py\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(fig)\u001b[0m\n\u001b[1;32m    242\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    243\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;34m'png'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mformats\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 244\u001b[0;31m         \u001b[0mpng_formatter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfor_type\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mFigure\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mprint_figure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'png'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    245\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;34m'retina'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mformats\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;34m'png2x'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mformats\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    246\u001b[0m         \u001b[0mpng_formatter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfor_type\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mFigure\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mlambda\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mretina_figure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/IPython/core/pylabtools.py\u001b[0m in \u001b[0;36mprint_figure\u001b[0;34m(fig, fmt, bbox_inches, **kwargs)\u001b[0m\n\u001b[1;32m    126\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    127\u001b[0m     \u001b[0mbytes_io\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mBytesIO\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 128\u001b[0;31m     \u001b[0mfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcanvas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprint_figure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbytes_io\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    129\u001b[0m     \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbytes_io\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetvalue\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    130\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mfmt\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'svg'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/backend_bases.py\u001b[0m in \u001b[0;36mprint_figure\u001b[0;34m(self, filename, dpi, facecolor, edgecolor, orientation, format, bbox_inches, **kwargs)\u001b[0m\n\u001b[1;32m   2124\u001b[0m                     \u001b[0morientation\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0morientation\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2125\u001b[0m                     \u001b[0mbbox_inches_restore\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0m_bbox_inches_restore\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2126\u001b[0;31m                     **kwargs)\n\u001b[0m\u001b[1;32m   2127\u001b[0m             \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2128\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mbbox_inches\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mrestore_bbox\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py\u001b[0m in \u001b[0;36mprint_png\u001b[0;34m(self, filename_or_obj, metadata, pil_kwargs, *args, **kwargs)\u001b[0m\n\u001b[1;32m    512\u001b[0m         }\n\u001b[1;32m    513\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 514\u001b[0;31m         \u001b[0mFigureCanvasAgg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    515\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mpil_kwargs\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    516\u001b[0m             \u001b[0;32mfrom\u001b[0m \u001b[0mPIL\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mImage\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py\u001b[0m in \u001b[0;36mdraw\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    391\u001b[0m              (self.toolbar._wait_cursor_for_draw_cm() if self.toolbar\n\u001b[1;32m    392\u001b[0m               else nullcontext()):\n\u001b[0;32m--> 393\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    394\u001b[0m             \u001b[0;31m# A GUI class may be need to update a window using this draw, so\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    395\u001b[0m             \u001b[0;31m# don't forget to call the superclass.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mdraw_wrapper\u001b[0;34m(artist, renderer, *args, **kwargs)\u001b[0m\n\u001b[1;32m     36\u001b[0m                 \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     37\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 38\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0martist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     39\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0martist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_agg_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/figure.py\u001b[0m in \u001b[0;36mdraw\u001b[0;34m(self, renderer)\u001b[0m\n\u001b[1;32m   1734\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpatch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1735\u001b[0m             mimage._draw_list_compositing_images(\n\u001b[0;32m-> 1736\u001b[0;31m                 renderer, self, artists, self.suppressComposite)\n\u001b[0m\u001b[1;32m   1737\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1738\u001b[0m             \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclose_group\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'figure'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/image.py\u001b[0m in \u001b[0;36m_draw_list_compositing_images\u001b[0;34m(renderer, parent, artists, suppress_composite)\u001b[0m\n\u001b[1;32m    135\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mnot_composite\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mhas_images\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    136\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0ma\u001b[0m \u001b[0;32min\u001b[0m \u001b[0martists\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 137\u001b[0;31m             \u001b[0ma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    138\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    139\u001b[0m         \u001b[0;31m# Composite any adjacent images together\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mdraw_wrapper\u001b[0;34m(artist, renderer, *args, **kwargs)\u001b[0m\n\u001b[1;32m     36\u001b[0m                 \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     37\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 38\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0martist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     39\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0martist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_agg_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/axes/_base.py\u001b[0m in \u001b[0;36mdraw\u001b[0;34m(self, renderer, inframe)\u001b[0m\n\u001b[1;32m   2628\u001b[0m             \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstop_rasterizing\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2629\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2630\u001b[0;31m         \u001b[0mmimage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_draw_list_compositing_images\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0martists\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2631\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2632\u001b[0m         \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclose_group\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'axes'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/image.py\u001b[0m in \u001b[0;36m_draw_list_compositing_images\u001b[0;34m(renderer, parent, artists, suppress_composite)\u001b[0m\n\u001b[1;32m    135\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mnot_composite\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mhas_images\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    136\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0ma\u001b[0m \u001b[0;32min\u001b[0m \u001b[0martists\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 137\u001b[0;31m             \u001b[0ma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    138\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    139\u001b[0m         \u001b[0;31m# Composite any adjacent images together\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mdraw_wrapper\u001b[0;34m(artist, renderer, *args, **kwargs)\u001b[0m\n\u001b[1;32m     36\u001b[0m                 \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     37\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 38\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0martist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     39\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0martist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_agg_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/axis.py\u001b[0m in \u001b[0;36mdraw\u001b[0;34m(self, renderer, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1225\u001b[0m         \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen_group\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m__name__\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgid\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_gid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1226\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1227\u001b[0;31m         \u001b[0mticks_to_draw\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_update_ticks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1228\u001b[0m         ticklabelBoxes, ticklabelBoxes2 = self._get_tick_bboxes(ticks_to_draw,\n\u001b[1;32m   1229\u001b[0m                                                                 renderer)\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/axis.py\u001b[0m in \u001b[0;36m_update_ticks\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1109\u001b[0m             \u001b[0mtick\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_label1\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1110\u001b[0m             \u001b[0mtick\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_label2\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1111\u001b[0;31m         \u001b[0mminor_locs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_minorticklocs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1112\u001b[0m         \u001b[0mminor_labels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mminor\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformatter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat_ticks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mminor_locs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1113\u001b[0m         \u001b[0mminor_ticks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_minor_ticks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mminor_locs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/axis.py\u001b[0m in \u001b[0;36mget_minorticklocs\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1351\u001b[0m         \u001b[0;34m\"\"\"Get the array of minor tick locations in data coordinates.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1352\u001b[0m         \u001b[0;31m# Remove minor ticks duplicating major ticks.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1353\u001b[0;31m         \u001b[0mmajor_locs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmajor\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlocator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1354\u001b[0m         \u001b[0mminor_locs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mminor\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlocator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1355\u001b[0m         \u001b[0mtransform\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_scale\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/ticker.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   2201\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__call__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2202\u001b[0m         \u001b[0mvmin\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvmax\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_view_interval\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2203\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtick_values\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvmin\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvmax\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2204\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2205\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mtick_values\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvmin\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvmax\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/ticker.py\u001b[0m in \u001b[0;36mtick_values\u001b[0;34m(self, vmin, vmax)\u001b[0m\n\u001b[1;32m   2209\u001b[0m         vmin, vmax = mtransforms.nonsingular(\n\u001b[1;32m   2210\u001b[0m             vmin, vmax, expander=1e-13, tiny=1e-14)\n\u001b[0;32m-> 2211\u001b[0;31m         \u001b[0mlocs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_raw_ticks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvmin\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvmax\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2212\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2213\u001b[0m         \u001b[0mprune\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_prune\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/ticker.py\u001b[0m in \u001b[0;36m_raw_ticks\u001b[0;34m(self, vmin, vmax)\u001b[0m\n\u001b[1;32m   2148\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_nbins\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'auto'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2149\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxis\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2150\u001b[0;31m                 nbins = np.clip(self.axis.get_tick_space(),\n\u001b[0m\u001b[1;32m   2151\u001b[0m                                 max(1, self._min_n_ticks - 1), 9)\n\u001b[1;32m   2152\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/axis.py\u001b[0m in \u001b[0;36mget_tick_space\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   2188\u001b[0m         \u001b[0mends\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransAxes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2189\u001b[0m         \u001b[0mlength\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mends\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mends\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdpi\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m72\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2190\u001b[0;31m         \u001b[0mtick\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_tick\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2191\u001b[0m         \u001b[0;31m# There is a heuristic here that the aspect ratio of tick text\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2192\u001b[0m         \u001b[0;31m# is no more than 3:1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/axis.py\u001b[0m in \u001b[0;36m_get_tick\u001b[0;34m(self, major)\u001b[0m\n\u001b[1;32m   1941\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1942\u001b[0m             \u001b[0mtick_kw\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_minor_tick_kw\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1943\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mXTick\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m''\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmajor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmajor\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mtick_kw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1944\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1945\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_get_label\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/axis.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, axes, loc, label, size, width, color, tickdir, pad, labelsize, labelcolor, zorder, gridOn, tick1On, tick2On, label1On, label2On, major, labelrotation, grid_color, grid_linestyle, grid_linewidth, grid_alpha, **kw)\u001b[0m\n\u001b[1;32m    155\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_tickdir\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtickdir\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    156\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 157\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtick1line\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_tick1line\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    158\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtick2line\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_tick2line\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    159\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgridline\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_gridline\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/axis.py\u001b[0m in \u001b[0;36m_get_tick1line\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    463\u001b[0m                           \u001b[0mlinestyle\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'None'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmarker\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_tickmarkers\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    464\u001b[0m                           \u001b[0mmarkersize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_size\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 465\u001b[0;31m                           markeredgewidth=self._width, zorder=self._zorder)\n\u001b[0m\u001b[1;32m    466\u001b[0m         \u001b[0ml\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_xaxis_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwhich\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'tick1'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    467\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_set_artist_props\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ml\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/lines.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, xdata, ydata, linewidth, linestyle, color, marker, markersize, markeredgewidth, markeredgecolor, markerfacecolor, markerfacecoloralt, fillstyle, antialiased, dash_capstyle, solid_capstyle, dash_joinstyle, solid_joinstyle, pickradius, drawstyle, markevery, **kwargs)\u001b[0m\n\u001b[1;32m    376\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_color\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    377\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_color\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcolor\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 378\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_marker\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mMarkerStyle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmarker\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfillstyle\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    379\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    380\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_markevery\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/markers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, marker, fillstyle)\u001b[0m\n\u001b[1;32m    223\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_marker_function\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    224\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_fillstyle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfillstyle\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 225\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_marker\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmarker\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    226\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    227\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_recache\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/markers.py\u001b[0m in \u001b[0;36mset_marker\u001b[0;34m(self, marker)\u001b[0m\n\u001b[1;32m    294\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    295\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_marker\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmarker\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 296\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_recache\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    297\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    298\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget_path\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/markers.py\u001b[0m in \u001b[0;36m_recache\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    236\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_capstyle\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'butt'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    237\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_filled\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 238\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_marker_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    239\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    240\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__bool__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/markers.py\u001b[0m in \u001b[0;36m_set_tickdown\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    732\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    733\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_set_tickdown\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 734\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_transform\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mAffine2D\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscale\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1.0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0;36m1.0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    735\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_snap_threshold\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1.0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    736\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_filled\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/transforms.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, matrix, **kwargs)\u001b[0m\n\u001b[1;32m   1842\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mmatrix\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1843\u001b[0m             \u001b[0;31m# A bit faster than np.identity(3).\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1844\u001b[0;31m             \u001b[0mmatrix\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mIdentityTransform\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_mtx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1845\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_mtx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmatrix\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1846\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_invalid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}],"source":["# p2_hlm 의 경우, tr 확인을 우해 session_plot 우선 실행 필요함\n","_ = [plot_check_v9(res_df, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, back_plot, plot_check_dir, **col_idx_dict) for param_zip in zip(np_plot_params, np_plot_params[::-1])]"]},{"cell_type":"markdown","metadata":{"id":"sZAYhcdoXnm4"},"source":["### whole_plot"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jjFziVVIhgSr"},"outputs":[],"source":["s_id = config.selection_id\n","\n","# ------------ make col_idx_dict config ------------ #\n","nonstep_col_list = []\n","step_col_list = []\n","stepmark_col_list = []\n","\n","# ============ nonstep_col_list - add info(col, alpha, color, linewidth) ============ #\n","# nonstep_col_list.append([['close'], 1, '#ffffff', 2])\n","\n","# ============ step_col_list - add info(col, alpha, color, linewidth) ============ #\n","# ------ htf_candle ------ #\n","hc_tf1 = '15T'\n","hc_tf2 = 'H'\n","hc_tf3 = '4H'\n","\n","step_col_list.append([['open_{}'.format(hc_tf1), 'close_{}'.format(hc_tf1)], 1, '#ffffff', 1])\n","step_col_list.append([['open_{}'.format(hc_tf2), 'close_{}'.format(hc_tf2)], 1, '#ffffff', 2])\n","# step_col_list.append([['open_{}'.format(hc_tf3), 'close_{}'.format(hc_tf3)], 1, '#ffffff', 4])\n","\n","# ------ resi_sup ------ #\n","# rs_tf = 'T'\n","# step_col_list.append([['resi_{}'.format(rs_tf), 'sup_{}'.format(rs_tf)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['resi_out_{}'.format(rs_tf), 'sup_out_{}'.format(rs_tf)], 1, 'dodgerblue', 2])\n","\n","# ------ wave_range ------ #\n","wave_tf1 = config_list[0].tr_set.p1_itv1\n","wave_period1, wave_period2 = config_list[0].tr_set.p1_period1, config_list[0].tr_set.p1_period2\n","\n","# step_col_list.append([['dc_upper_{}{}'.format(wave_tf1, wave_period1), 'dc_lower_{}{}'.format(wave_tf1, wave_period1)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['dc_upper_{}{}'.format(wave_tf1, wave_period2), 'dc_lower_{}{}'.format(wave_tf1, wave_period2)], 1, '#ffeb3b', 1])\n","\n","# step_col_list.append([['dc_upper_{}{}'.format(wave_tf2, wave_period2), 'dc_lower_{}{}'.format(wave_tf2, wave_period2)], 1, '#e65100', 2])\n","\n","# ------ dc ------ #\n","dc_tf1 = '5T'\n","dc_period1 = 20\n","dc_tf2 = 'H'\n","dc_period2 = 20\n","# step_col_list.append([['dc_upper_{}{}'.format(dc_tf1, dc_period1), 'dc_lower_{}{}'.format(dc_tf1, dc_period1)], 1, '#ffeb3b', 1]),  # inner\n","# step_col_list.append([['dc_base_{}{}'.format(dc_tf1, dc_period1)], 1, '#5b9cf6', 1])\n","step_col_list.append([['dc_upper_{}{}'.format(dc_tf2, dc_period2), 'dc_lower_{}{}'.format(dc_tf2, dc_period2)], 1, '#ff00ff', 4]),  # inner\n","step_col_list.append([['dc_base_{}{}'.format(dc_tf2, dc_period2)], 1, '#5b9cf6', 4])\n","\n","# ------ bb ------ #\n","bb_tf1 = 'T'\n","bb_period1 = 20\n","\n","# step_col_list.append([['bb_upper_{}{}'.format(bb_tf1, bb_period1), 'bb_lower_{}{}'.format(bb_tf1, bb_period1)], 1, '#ffffff', 1])\n","# step_col_list.append([['bb_base_{}{}'.format(bb_tf1, bb_period1)], 1, '#00ff00', 1])\n","\n","# step_col_list.append([['bb_upper_{}'.format(tf2), 'bb_lower_{}'.format(tf2)], 1, '#e91e63', 4])\n","\n","# ------ ema ------ #\n","# step_col_list.append([['ema_5T'], 1, '#03ed30', 2])\n","\n","# ============ stepmark_col_list - add info(col, alpha, color, linewidth) ============ #\n","# stepmark_col_list.append([['sar_T'], 1, 'dodgerblue', 7])\n","\n","\n","# ============ str to numbcol ============ #\n","nonstep_col_arr = strcol_tonumb(res_df, nonstep_col_list)\n","step_col_arr = strcol_tonumb(res_df, step_col_list)\n","stepmark_col_arr = strcol_tonumb(res_df, stepmark_col_list)\n","\n","col_idx_dict = \\\n","{\n","  \"ohlc_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close']),\n","  \"vp_col_idxs\": get_col_idxs(res_df, ['close', 'volume']),\n","  # \"ohlc_col_idxs\": get_col_idxs(res_df, ['haopen', 'hahigh', 'halow', 'haclose']),  # heikin-ashi ver.\n","  \"nonstep_col_info\": nonstep_col_arr,\n","  \"step_col_info\": step_col_arr,\n","  \"stepmark_col_info\": stepmark_col_arr,\n","  \"ylim_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close', 'dc_upper_15T4', 'dc_lower_15T4'])  # , 'dc_upper_H', 'dc_lower_H', 'dc_upper_15T', 'dc_lower_15T', 'short_out_{}'.format(selection_id), 'long_out_{}'.format(selection_id)\n","}   # , 'wave_1_{}'.format(wave_tf2), 'wave_0_{}'.format(wave_tf2), 'dc_upper_15T', 'dc_lower_15T'"]},{"cell_type":"markdown","metadata":{"id":"50HXDIdJij28"},"source":["#### whole_plot main"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-tbLsXN9eN2p"},"outputs":[],"source":["plot_op_idx_nums = 10\n","\n","win_idxs = (pr_ > 1).ravel()  # [-plot_op_idx_nums:]\n","selected_op_idxs = obj_[4].ravel().astype(int)  # [-plot_op_idx_nums:]\n","selected_ex_idxs = obj_[3].ravel().astype(int)  # [-plot_op_idx_nums:]\n","\n","len_idxs = len(win_idxs)\n","print(\"len_idxs :\", len_idxs)\n","\n","split_range = np.arange(plot_op_idx_nums, len_idxs, plot_op_idx_nums)\n","win_idxs_list = np.split(win_idxs, split_range, axis=0)\n","selected_op_idxs_list = np.split(selected_op_idxs, split_range, axis=0)\n","selected_ex_idxs_list = np.split(selected_ex_idxs, split_range, axis=0)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FtILHO-4kVlO"},"outputs":[],"source":["_ = [whole_plot_check(np_df, a, b, c, plot_check_dir=None, **col_idx_dict) for a, b, c in zip(win_idxs_list, selected_op_idxs_list, selected_ex_idxs_list)]"]},{"cell_type":"markdown","metadata":{"id":"iTW2ZuX61ojg"},"source":["### plot_funcs"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0l6joTK_1ojh"},"outputs":[],"source":["def whole_plot_check(data, win_idxs, selected_op_idxs, selected_ex_idxs, plot_check_dir=None, **col_idx_dict):\n","  # start_0 = time.time()\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(30, 12))\n","  nrows, ncols = 1, 1\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                          ncols=ncols,\n","                          #height_ratios=[31, 1]\n","                          )\n","\n","  ax = fig.add_subplot(gs[0])\n","\n","  # ------------ add_col section ------------ #\n","  a_data = data[selected_op_idxs[0]:selected_op_idxs[-1] + 1]\n","\n","  plot_op_idxs = selected_op_idxs - selected_op_idxs[0]  \n","  plot_win_op_idxs = plot_op_idxs[win_idxs]\n","  plot_loss_op_idxs = plot_op_idxs[~win_idxs]\n","\n","  plot_ex_idxs = selected_ex_idxs - selected_op_idxs[0]\n","  plot_win_ex_idxs = plot_ex_idxs[win_idxs]\n","  plot_loss_ex_idxs = plot_ex_idxs[~win_idxs]\n","\n","\n","  # ------ add cols ------ #\n","  [nonstep_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['nonstep_col_info']]\n","  [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","  [stepmark_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['stepmark_col_info']]\n","\n","  # [plt.axvline(op_idx, color='#00ff00') for op_idx in plot_win_op_idxs]\n","  # [plt.axvline(op_idx, color='#ff0000') for op_idx in plot_loss_op_idxs]\n","  [plt.axvspan(op_idx, ex_idx, alpha=0.5, color='#00ff00') for op_idx, ex_idx in zip(plot_win_op_idxs, plot_win_ex_idxs)]\n","  [plt.axvspan(op_idx, ex_idx, alpha=0.5, color='#ff0000') for op_idx, ex_idx in zip(plot_loss_op_idxs, plot_loss_ex_idxs)]\n","  \n","  plt.show()\n","\n","  if plot_check_dir is None:\n","    plt.show()\n","    print()\n","  else:\n","    fig_name = plot_check_dir + \"/whole_plot_{}.png\".format(selected_op_idxs[0])\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","  plt.close()\n","  # print(\"elapsed time :\", time.time() - start_0)\n","\n","  return\n","\n","def plot_check_v9(res_df, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, back_plot, plot_check_dir=None, **col_idx_dict):\n","  # start_0 = time.time()\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(30, 18))\n","  nrows, ncols = 2, 2\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                         ncols=ncols,\n","                         height_ratios=[3, 1]\n","                         )\n","  for gs_idx, params in enumerate(param_zip):\n","\n","    iin, iout, pr, en_p, ex_p, entry_idx, exit_idx, p1_idx, p2_idx, lvrg, fee, tp_line, out_line, tp_1, tp_0, out_1, out_0, ep2_0 = params\n","\n","    # print(\"en_p, ex_p :\", en_p, ex_p)\n","    # print(\"tp_line, out_line, ep2_0 :\", tp_line, out_line, ep2_0)\n","\n","    # temporary\n","    # if exit_idx - p1_idx < 50:\n","    # if exit_idx != entry_idx:\n","    # print(\"p1_idx :\", p1_idx)\n","    # if p1_idx != 370259:\n","    #   break\n","\n","    # ============ define ax1 & ax2 ============ #\n","    ax1 = fig.add_subplot(gs[gs_idx])\n","    ax2 = fig.add_subplot(gs[gs_idx + 2])\n","\n","    # ------ date range ------ #\n","    if back_plot == 0:\n","      iout = iin + x_max\n","      # print(\"iin, iout :\", iin, iout)\n","\n","    a_data = res_df.iloc[int(iin):int(iout + 1)].to_numpy()\n","    # a_data = data[iin:iout]\n","\n","    # ------------ add_col section ------------ #\n","    # ------ candles ------ #\n","    candle_plot_v2(ax1, a_data[:, col_idx_dict['ohlc_col_idxs']], alpha=1.0, wickwidth=1.0)\n","\n","    # ------ add cols ------ #\n","    [nonstep_col_plot_v2(ax1, a_data[:, params_[0]], *params_[1:]) for params_ in col_idx_dict['nonstep_col_info']]\n","    [step_col_plot_v2(ax1, a_data[:, params_[0]], *params_[1:]) for params_ in col_idx_dict['step_col_info']]\n","    [stepmark_col_plot_v2(ax1, a_data[:, params_[0]], *params_[1:]) for params_ in col_idx_dict['stepmark_col_info']]\n","\n","    [step_col_plot_v2(ax2, a_data[:, params_[0]], *params_[1:]) for params_ in col_idx_dict['step_col_info2']]\n","\n","    # ------ get vp_info ------ #\n","    kde_factor = 0.1   # 커질 수록 전체적인 bars_shape 이 곡선이됨, 커질수록 latency 좋아짐 (0.00003s 정도)\n","    num_samples = 100  # plot 되는 volume bars (y_axis) 와 비례관계\n","    # vp_data = data[iin - 500:iin, col_idx_dict['vp_col_idxs']].T  # Todo, vp_range should be calculated by wave_point\n","\n","    if tp_1 < out_0:  # SELL order\n","      post_co_idx = res_df.iloc[int(p1_idx), col_idx_dict['post_co_idx']]\n","      # vp_iin = res_df.iloc[int(p1_idx) - 1, col_idx_dict['post_cu_idx']].to_numpy()  # Todo, co_idx 와 co_post_idx 의 차별을 위해서 -1 해줌 <-- 중요 point\n","      vp_iin = res_df.iloc[post_co_idx, col_idx_dict['post_cu_idx']].to_numpy()  # Todo, co_idx 와 co_post_idx 의 차별을 위해서 -1 해줌 <-- 중요 point\n","    else:\n","      post_cu_idx = res_df.iloc[int(p1_idx), col_idx_dict['post_cu_idx']]\n","      # vp_iin = res_df.iloc[int(p1_idx) - 1, col_idx_dict['post_co_idx']].to_numpy()\n","      vp_iin = res_df.iloc[int(post_cu_idx), col_idx_dict['post_co_idx']].to_numpy()\n","    # print(\"iin, vp_iin, p1_idx :\", iin, vp_iin, p1_idx)\n","\n","    vp_data = res_df.iloc[int(vp_iin):int(p1_idx), col_idx_dict['vp_col_idxs']].to_numpy().T  # Todo, vp_range should be calculated by wave_point\n","    # print(\"vp_data :\", vp_data)\n","    # vp_info = [vp_range, *vp_data, kde_factor, num_samples]\n","    vp_info = [*vp_data, kde_factor, num_samples]\n","\n","    # ------ ep, tp + xlim ------ #\n","    try:\n","      eptp_hvline_v9_1(ax1, ax2, config, *params, back_plot, x_max, x_margin_mult, y_margin_mult, a_data, vp_info, **col_idx_dict)\n","    except Exception as e:\n","      print(\"error in eptp_hvline :\", e)\n","\n","    #     Todo    #\n","    #     3. outer_price plot 일 경우, gs_idx + nrows 하면 됨\n","\n","    # ------ trade_info ------ #\n","    data_msg_list = [\"\\n {} : {:.3f}\".format(*params_[1:], *res_df.iloc[int(p1_idx), params_[0]]) for params_ in col_idx_dict['data_window_p1_col_info']]  # * for unsupported format for arr\n","    data_msg_list += [\"\\n {} : {:.3f}\".format(*params_[1:], *res_df.iloc[int(p2_idx), params_[0]]) for params_ in col_idx_dict['data_window_p2_col_info']]\n","    ps_msg_expand = pr_msg.format(p1_idx, exit_idx, pr, lvrg, fee) + ''.join(data_msg_list)\n","    \n","    ax1.set_title(ps_msg_expand)   # set_title on ax1\n","\n","  if plot_check_dir is None:\n","    plt.show()\n","    print()\n","  else:\n","    fig_name = plot_check_dir + \"/{}.png\".format(int(entry_idx))\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","  plt.close()\n","  # print(\"elapsed time :\", time.time() - start_0)\n","\n","  return\n","\n","def eptp_hvline_v9_1(ax1, ax2, config, iin, iout, pr, en_p, ex_p, entry_idx, exit_idx, p1_idx, p2_idx, lvrg, fee, tp_line, out_line, tp_1, tp_0, out_1, out_0, ep2_0,\n","                   back_plot, x_max, x_margin_mult, y_margin_mult, a_data, vp_info, **col_idx_dict):\n","  # ------ get vertical ticks ------ #\n","  entry_tick = int(entry_idx - iin)\n","  exit_tick = entry_tick + int(exit_idx - entry_idx)\n","  p1_tick = entry_tick - int(entry_idx - p1_idx)\n","  p2_tick = p1_tick + int(p2_idx - p1_idx)\n","\n","  if back_plot == 1:\n","    x_max = p1_tick + 20\n","  elif back_plot == 2:\n","    x_max = p2_tick + 20 \n","  elif back_plot == 3:\n","    x_max = entry_tick + 20 \n","  elif back_plot == 4:\n","    x_max = exit_tick + 20\n","\n","  # ============ xlim ============ #\n","  if (iout - iin) > x_max:\n","    x_margin = x_max * x_margin_mult\n","    ax1.set_xlim(0 - x_margin, x_max + x_margin)\n","    ax2.set_xlim(0 - x_margin, x_max + x_margin)\n","  x0, x1 = ax1.get_xlim()\n","\n","  # ============ hlines ============ #\n","  # ------------ ax1 ------------ #\n","  # ------ entry & exit ------ #\n","  en_xmin = entry_tick / x1\n","  ex_xmin = exit_tick / x1\n","  ax1.axhline(en_p, x0, en_xmin, linewidth=2, linestyle='--', alpha=1, color='lime')  # en_p line axhline\n","  if config.tr_set.check_hlm in [0, 1]:\n","    ax1.text(x0, en_p, 'en_p :\\n {:.3f} \\n epg1 {}'.format(en_p, config.tr_set.ep_gap1), ha='right', va='center', fontweight='bold', fontsize=15)  # en_p line label\n","  else:\n","    ax1.text(x0, en_p, 'en_p :\\n {:.3f} \\n epg2 {}'.format(en_p, config.tr_set.ep_gap2), ha='right', va='center', fontweight='bold', fontsize=15)  # en_p line label\n","  ax1.axhline(ex_p, ex_xmin, 1, linewidth=2, linestyle='--', alpha=1, color='lime')  # ex_p line axhline (signal 도 포괄함, 존재 의미)\n","  ax1.text(x1, ex_p, 'ex_p :\\n {}'.format(ex_p), ha='left', va='center', fontweight='bold', fontsize=15)  # ex_p line label\n","\n","  # ------ tpout_line ------ #\n","  ax1.axhline(tp_line, 0.05, 1, linewidth=2, linestyle='-', alpha=1, color='#00ff00')  # ep 와 gap 비교 용이하기 위해 ex_xmin -> 0.1 사용\n","  ax1.text(x0, tp_line, 'tpg {}'.format(config.tr_set.tp_gap), ha='right', va='center', fontweight='bold', fontsize=15, color='#00ff00')\n","  ax1.axhline(out_line, 0.05, 1, linewidth=2, linestyle='-', alpha=1, color='#ff0000')\n","  ax1.text(x0, out_line, 'outg {}'.format(config.tr_set.out_gap), ha='right', va='center', fontweight='bold', fontsize=15, color='#ff0000')\n","\n","  # ------ tp_box ------ #\n","  text_x_pos = (x0 + x1) * 0.1\n","  ax1.axhline(tp_1, 0.2, 1, linewidth=4, linestyle='-', alpha=1, color='#ffffff')\n","  ax1.text(text_x_pos, tp_1, ' tp_1', ha='right', va='bottom', fontweight='bold', fontsize=15)\n","  ax1.axhline(tp_0, 0.2, 1, linewidth=4, linestyle='-', alpha=1, color='#ffffff')\n","  ax1.text(text_x_pos, tp_0, ' tp_0', ha='right', va='bottom', fontweight='bold', fontsize=15)  \n","\n","  # ------ out_box ------ #\n","  # text_x_pos = (x0 + x1) * 0.1\n","  ax1.axhline(out_1, 0.2, 1, linewidth=2, linestyle='-', alpha=1, color='#ffffff')\n","  ax1.text(text_x_pos, out_1, ' out_1', ha='right', va='bottom', fontweight='bold', fontsize=15)\n","  ax1.axhline(out_0, 0.2, 1, linewidth=2, linestyle='-', alpha=1, color='#ffffff')\n","  ax1.text(text_x_pos, out_0, ' out_0', ha='right', va='bottom', fontweight='bold', fontsize=15)  \n","  # ------ ep_box ------ #\n","  # text_x_pos = (x0 + x1) * 0.1\n","  ax1.axhline(ep2_0, 0.2, 1, linewidth=1, linestyle='-', alpha=1, color='#ffffff')\n","  ax1.text(text_x_pos, ep2_0, ' ep2_0', ha='right', va='bottom', fontweight='bold', fontsize=15)\n","  \n","  # ------ volume profile ------ #\n","  close, volume, kde_factor, num_samples = vp_info\n","  # if iin >= vp_range:\n","  # start_0 = time.time()\n","  kde = stats.gaussian_kde(close, weights=volume, bw_method=kde_factor)\n","  kdx = np.linspace(close.min(), close.max(), num_samples)\n","  kdy = kde(kdx)\n","  kdy_max = kdy.max()\n","  # print(\"kde elapsed_time :\", time.time() - start_0)\n","\n","  # peaks,_ = signal.find_peaks(kdy, prominence=kdy_max * 0.3)   # get peak_entries\n","  # peak_list = kdx[peaks]   # peak_list\n","  # [ax1.axhline(peak, linewidth=1, linestyle='-', alpha=1, color='orange') for peak in peak_list]\n","  \n","  kdy_ratio = p1_tick / kdy_max # 30 / 0.0001   # max_value 가 p1_tick 까지 닿을 수 있게.\n","  # print(\"kdx :\", kdx)\n","  # ax1.plot(kdy * kdy_ratio, kdx, color='white')  # Todo, bars 가능 ?\n","  # ax1.barh(kdy * kdy_ratio, kdx, color='white')  # Todo, bars 가능 ?\n","  ax1.barh(kdx, kdy * kdy_ratio, color='#00ff00', alpha=0.5)  # Todo, bars 가능 ?\n","\n","  # ------------ ax2 ------------ #\n","  # ------ cci_band ------ #\n","  ax2.axhline(100, color=\"#ffffff\")\n","  ax2.axhline(-100, color=\"#ffffff\")\n","\n","  # ------ stoch_band ------ #\n","  # ax2.axhline(67, color=\"#ffffff\")\n","  # ax2.axhline(33, color=\"#ffffff\")\n","  \n","  # ax2.axhline(0, color=\"#ffffff\")\n","\n","  # ============ ylim ============ # - ax1 only\n","  if back_plot:\n","    y_lim_data = a_data[:x_max + 1, col_idx_dict['ylim_col_idxs']]  # +1 for including p1_tick\n","  else:\n","    y_lim_data = a_data[:, col_idx_dict['ylim_col_idxs']]\n","  \n","  y_min = y_lim_data.min()\n","  y_max = y_lim_data.max()\n","  y_margin = (y_max - y_min) * y_margin_mult\n","  ax1.set_ylim(y_min - y_margin, y_max + y_margin)\n","\n","  # ============ vline (p1_tick, entry_tick, exit_tick) ============ # - add p1_tick on ax2\n","  y0, y1 = ax1.get_ylim()\n","  low_data = a_data[:exit_tick + 1, col_idx_dict['ohlc_col_idxs'][2]]  # +1 for including exit_tick\n","  p2_ymax, en_ymax, ex_ymax = [(low_data[tick_] - y0) / (y1 - y0) - .01 for tick_ in [p2_tick, entry_tick, exit_tick]]  # -.05 for margin\n","  if p1_tick > 0:\n","    p1_ymax = (low_data[p1_tick] - y0) / (y1 - y0) - .01\n","    ax1.axvline(p1_tick, 0, p1_ymax, alpha=1, linewidth=2, linestyle='--', color='#ff0000')  # 추후, tick 별 세부 정의가 달라질 수 있음을 고려해 multi_line 작성 유지\n","    ax2.axvline(p1_tick, 0, 1, alpha=1, linewidth=2, linestyle='--', color='#ff0000')\n","  ax1.axvline(p2_tick, 0, p2_ymax, alpha=1, linewidth=2, linestyle='--', color='#2196f3')\n","  ax1.axvline(entry_tick, 0, en_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  ax1.axvline(exit_tick, 0, ex_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  ax2.axvline(p2_tick, 0, 1, alpha=1, linewidth=2, linestyle='--', color='#2196f3')\n","  ax2.axvline(entry_tick, 0, 1, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  ax2.axvline(exit_tick, 0, 1, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","\n","  return"]},{"cell_type":"markdown","metadata":{"id":"8soVNGFt1ojj"},"source":["#### legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"narSQRCz1ojj"},"outputs":[],"source":["_ = [plot_check_v4(np_df, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir, 500, 0.07, 100, **col_idx_dict) for param_zip in zip(np_plot_params, np_plot_params[::-1])]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kLiEIiMW1ojk"},"outputs":[],"source":["def plot_check_v4(data, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir=None, vp_range=500, kde_factor=0.05, num_samples=100, **col_idx_dict):\n","  # start_0 = time.time()\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(30, 18))\n","  nrows, ncols = 2, 2\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                         ncols=ncols,\n","                         height_ratios=[3, 1]\n","                         )\n","  for gs_idx, params in enumerate(param_zip):\n","    ax = fig.add_subplot(gs[gs_idx])\n","    iin, iout, pr, ep, tp, entry_idx, exit_idx, open_idx, lvrg, fee, tp_line, out_line, bias_info, bias_thresh = params\n","\n","    # ------------ add_col section ------------ #\n","    iin, iout = int(iin), int(iout)\n","    a_data = data[iin:iout]\n","    # ------ candles ------ #\n","    candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","    \n","    # ------ add cols ------ #\n","    [nonstep_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['nonstep_col_info']]\n","    [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","    [stepmark_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['stepmark_col_info']]\n","\n","    # vp_data = data[iin - vp_range:iin, col_idx_dict['vp_col_idxs']]\n","    # vp_info = [vp_range, vp_data[:, 0], vp_data[:, 1], kde_factor, num_samples]\n","    vp_data = data[iin - vp_range:iin, col_idx_dict['vp_col_idxs']].T\n","    vp_info = [vp_range, *vp_data, kde_factor, num_samples]\n","\n","    # ------ ep, tp + xlim ------ #\n","    eptp_hvline_v4(config, ep, tp, entry_idx, exit_idx, open_idx, tp_line, out_line, bias_info, bias_thresh, \n","                   front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, vp_info, **col_idx_dict)        \n","\n","    #     Todo    #\n","    #     3. outer_price plot 일 경우, gs_idx + nrows 하면 됨\n","\n","    # ------ trade_info ------ #\n","    plt.title(pr_msg.format(entry_idx, exit_idx, pr, lvrg, fee))\n","\n","  if plot_check_dir is None:\n","    plt.show()\n","    print()\n","  else:\n","    fig_name = plot_check_dir +  \"/%s.png\" % int(entry_idx)\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","  plt.close()\n","  # print(\"elapsed time :\", time.time() - start_0)  \n","\n","  return\n","\n","def eptp_hvline_v4(config, en_p, ex_p, entry_idx, exit_idx, open_idx, tp_line, out_line, bias_info, bias_thresh, \n","                   front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, vp_info, **col_idx_dict):\n","  # ------ get vertical ticks ------ #\n","  entry_tick = int(entry_idx - iin)\n","  open_tick = entry_tick - int(entry_idx - open_idx)\n","  exit_tick = entry_tick + int(exit_idx - entry_idx)\n","\n","  if front_plot == 1:\n","    x_max = open_tick\n","  elif front_plot == 2:\n","    x_max = entry_tick\n","  if (iout - iin) > x_max:\n","    x_margin = x_max * x_margin_mult\n","    plt.xlim(0 - x_margin, x_max + x_margin)\n","  x0, x1 = plt.gca().get_xlim()\n","  # ------------ hlines ------------ #\n","  # ------ entry & exit ------ #\n","  en_xmin = entry_tick / x1\n","  ex_xmin = exit_tick / x1\n","  plt.axhline(en_p, x0, en_xmin, linewidth=2, linestyle='--', alpha=1, color='lime')  # en_p line axhline\n","  plt.text(x0, en_p, ' en_p :\\n {}'.format(en_p), ha='right', va='center', fontweight='bold')  # en_p line label\n","  plt.axhline(ex_p, ex_xmin, 1, linewidth=2, linestyle='--', alpha=1, color='lime')  # ex_p line axhline (signal 도 포괄함, 존재 의미)\n","  plt.text(x1, ex_p, ' ex_p :\\n {}'.format(ex_p), ha='left', va='center', fontweight='bold')  # ex_p line label\n","\n","  # ------ tpout_line ------ #\n","  plt.axhline(tp_line, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#00ff00')  # ep 와 gap 비교 용이하기 위해 ex_xmin -> 0.1 사용\n","  plt.text(x0, tp_line, ' %s' % config.tr_set.tp_gap, ha='left', va='center', fontweight='bold')\n","  plt.axhline(out_line, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#ff0000')\n","  plt.text(x0, out_line, ' %s' % config.tr_set.out_gap, ha='left', va='center', fontweight='bold')\n","\n","  # ------ bias_line ------ #\n","  plt.axhline(bias_info, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='dodgerblue')\n","  plt.text(x0, bias_info, ' bias_info', ha='left', va='center', fontweight='bold')\n","  plt.axhline(bias_thresh, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#ff8400')\n","  plt.text(x0, bias_thresh, ' bias_thresh', ha='left', va='center', fontweight='bold')\n","\n","  # ------ volume profile ------ #\n","  vp_range, close, volume, kde_factor, num_samples = vp_info\n","  if iin >= vp_range:\n","    start_0 = time.time()\n","    kde = stats.gaussian_kde(close, weights=volume, bw_method=kde_factor)\n","    kdx = np.linspace(close.min(), close.max(), num_samples)\n","    kdy = kde(kdx)\n","    print(\"kde elapsed_time :\", time.time() - start_0)\n","\n","    kdy_max = kdy.max()\n","    # peaks,_ = signal.find_peaks(kdy)\n","    peaks,_ = signal.find_peaks(kdy, prominence=kdy_max * 0.3)\n","    peak_list = kdx[peaks]   # peak_list\n","    [plt.axhline(peak, linewidth=6, linestyle='-', alpha=1, color='white') for peak in peak_list]\n","    \n","    kdy_ratio = entry_tick / kdy_max # 30 / 0.0001\n","    plt.plot(kdy * kdy_ratio, kdx, color='white')\n","    # plt.plot(pky, pkx, 'bo', color='yellow')\n","\n","  # ------ ylim ------ #\n","  if front_plot:\n","    y_lim_data = a_data[:x_max + 1, col_idx_dict['ylim_col_idxs']]  # +1 for including open_tick\n","  else:\n","    y_lim_data = a_data[:, col_idx_dict['ylim_col_idxs']]\n","  y_min = y_lim_data.min()\n","  y_max = y_lim_data.max()\n","  y_margin = (y_max - y_min) * y_margin_mult\n","  # plt.ylim(y_min - y_margin, y_max + y_margin)\n","\n","  # ------------ vline (open_tick, entry_tick, exit_tick) ------------ #\n","  y0, y1 = plt.gca().get_ylim()\n","  l_data = a_data[:exit_tick + 1, col_idx_dict['ohlc_col_idxs'][2]]  # +1 for including exit_tick\n","  open_ymax, en_ymax, ex_ymax = [(l_data[tick_] - y0) / (y1 - y0) - .01 for tick_ in [open_tick, entry_tick, exit_tick]]  # -.05 for margin\n","  plt.axvline(open_tick, 0, open_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')  # 추후, tick 별 세부 정의가 달라질 수 있음을 고려해 multi_line 작성 유지\n","  plt.axvline(entry_tick, 0, en_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  plt.axvline(exit_tick, 0, ex_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","\n","  return"]},{"cell_type":"markdown","metadata":{"id":"ddL_BC24buq0"},"source":["### dump"]},{"cell_type":"markdown","metadata":{"id":"zgTrEWWqbwsT"},"source":["#### whole_plot thing"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"M4zn8wxibzAR"},"outputs":[],"source":["fig = go.Figure(data=[go.Candlestick(x=t_df.index,\n","                open=t_df.open,\n","                high=t_df.high,\n","                low=t_df.low,\n","                close=t_df.close)])\n","\n","fig.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4IhBjPMobzAS"},"outputs":[],"source":["cf.go_offline()\n","init_notebook_mode()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"n9WZkE9wbzAS"},"outputs":[],"source":["qf = cf.QuantFig(t_df, title=\"Apple's stock price in 2021\", name='AAPL')\n","qf.iplot()"]},{"cell_type":"markdown","metadata":{"id":"zmYbP-Gc1ojs"},"source":["#### brief np_pr survey"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"82a8Km8z1ojs"},"outputs":[],"source":["# plot_pr_list[:100]\n","plt.plot(np_pr)\n","plt.axhline(1)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"5rdQZm_71ojv"},"source":["#### plot indi. legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"u11r-dU91ojw"},"outputs":[],"source":["\n","  # ---------------------- ma ---------------------- #\n","   # --------- ema --------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(ema_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  #   # --------- sma --------- #\n","  # alpha = 1\n","  # for sm_i, sma in enumerate(sma_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 4\n","  #   plt.step(np.arange(len(plot_df)), plot_df[sma].values, alpha=alpha, color='#e91e63', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  \n","  # ---------------------- cb ---------------------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(cb_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#5b9cf6', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","\n","  \n","  # ---------------------- sar ---------------------- #\n","  # alpha = 1\n","  # markersize = 5\n","  # for sar in sar_list:\n","  #   plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","  #   markersize += 1\n","  #   alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  # alpha = 0.7\n","  # for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","  #                     where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","  #                     where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","  #   alpha -= 0.05\n","  \n","\n","\n","  # ---------------------- outer price indi. ---------------------- #\n","  #           macd          #\n","  # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","    \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for stoch_ in stoch_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[stoch_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(stoch_upper, linestyle='--')\n","  # plt.axhline(stoch_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- cctbbo ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for cctbbo in cctbbo_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cctbbo].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(cctbbo_upper, linestyle='--')\n","  # plt.axhline(cctbbo_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- ema_roc ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for emaroc in emaroc_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[emaroc].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","  \n","  # ---------- bbw ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for bbwp_ in bbwp_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[bbwp_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(bbwp_thresh, linestyle='--')\n","\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n"]},{"cell_type":"markdown","metadata":{"id":"tApzvz_gK9lR"},"source":["## legacy"]},{"cell_type":"markdown","metadata":{"id":"OJqkmkpsLCYC"},"source":["### tr_tresh calc"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gcpo4MGd9Wm4"},"outputs":[],"source":["res_wr = 0.6\n","# tr_thresh = 1\n","# tr_thresh = ((1 - res_wr) / res_wr) ** 0.5\n","tr_thresh = ((1 - res_wr) / res_wr) + 0.01\n","# tr_thresh = 2.6\n","print(\"res_wr :\", res_wr)\n","print(\"tr_thresh :\", tr_thresh)\n","\n","\n","#   단리    #\n","trade_num = 1000\n","asset = 1 # thousand USDT\n","test_loss_gap = 0.95  # fee adjusted\n","test_pr_gap = 1 + (1 - test_loss_gap) * tr_thresh\n","\n","test_loss_cnt = trade_num * (1 - res_wr)\n","test_pr_cnt = trade_num * res_wr\n","\n","test_trade_list = [test_pr_gap] * int(test_pr_cnt) + [test_loss_gap] * int(test_loss_cnt)\n","random.shuffle(test_trade_list)\n","# print(\"len(test_trade_list) :\", len(test_trade_list))\n","print(test_trade_list[:10])\n","print()\n","\n","# print(\"%.5f\" % np.cumprod(test_trade_list)[-1])\n","for tr_thresh_ in np.arange(1, 3, 0.2):\n","  if (1 + (1 - test_loss_gap) * tr_thresh_) ** test_pr_cnt * test_loss_gap ** test_loss_cnt > 1:\n","    break\n","print(\"복리를 위한 tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumprod(test_trade_list)[-1] :\", np.cumprod(test_trade_list)[-1])\n","print(\"total_pr : \", np.cumprod(test_trade_list)[-1])\n","print()\n","#   복리 tr_thresh  #\n","#   1. trade_num 에 영향 받지 않음\n","#   2. loss_gap 에 비례함\n","\n","for tr_thresh_ in np.arange(1, 3, 0.01):\n","  if ((1 - test_loss_gap) * tr_thresh_) * test_pr_cnt + (test_loss_gap - 1) * test_loss_cnt > 0:\n","    break\n","np_test_trade = np.array(test_trade_list) - 1\n","print(np_test_trade[:10])\n","# print(\"%.3f\" % )\n","print(\"단리를 위한 tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumsum(np_test_trade)[-1] :\", np.cumsum(np_test_trade)[-1])\n","print(\"total_pr : \", 1 + np.cumsum(np_test_trade)[-1])\n"]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":["Ic1mfmwWCIBu","E0n53hflJbnp","MlFkpO1MSuzl","x2yj2SwAXDLp","14chOHeXh6JD","Q_1wJTcRYpm8","EOXQbXixiQcK","RZJ6uIA_VcJs","xpyP5t8Ht_pE","MuD_2vY7TI_8","983aUwM76s6X","_blyFhQJUd5X","50HXDIdJij28"],"provenance":[],"toc_visible":true,"authorship_tag":"ABX9TyOdQos2ArRe38mCC0Mnz36o"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}