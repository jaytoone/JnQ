{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"6rmQpzEGXfCw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1646475023410,"user_tz":-540,"elapsed":2966,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"5cd4596d-8b1b-4ee9-f51d-55eaf8bf23d5"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","import os, sys\n","\n","current_path = '/content/drive/My Drive/Colab Notebooks/JnQ/'\n","\n","os.chdir(current_path)\n","\n","strat_pkg = 'IDE'\n","\n","mpl_finance_path = '/content/drive/My Drive/Colab Notebooks/JnQ/mpl_finance'\n","\n","if mpl_finance_path not in sys.path:\n","\n","  try:\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ')\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ/{}'.format(strat_pkg))\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ/funcs')\n","    sys.path.insert(0, mpl_finance_path)\n","    \n","  except Exception as e:\n","    print(e)"]},{"cell_type":"markdown","metadata":{"id":"8uqYv5StTazo"},"source":["# requirements"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"9qGt60DKTZmf","executionInfo":{"status":"ok","timestamp":1646475023892,"user_tz":-540,"elapsed":486,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"outputs":[],"source":["# !pip install findiff\n","# import nvstrings, nvcategory, cudf\n","# import cuml\n","# import cudf\n","\n","import os\n","from funcs.funcs_idep import *\n","from funcs.funcs_duration_v2 import *\n","from funcs.funcs_plot_check import *\n","from funcs.funcs_pairing import *\n","# from funcs.funcs_ide import *\n","# from funcs.funcs_indicator_candlescore import *\n","from funcs.funcs_indicator import *\n","from funcs.funcs_trader import *\n","import logging\n","import importlib\n","\n","import mpl_finance as mf\n","import matplotlib.pyplot as plt\n","from matplotlib import gridspec\n","# from tqdm.notebook import tqdm\n","\n","import IPython\n","import IPython.display\n","\n","import numpy as np\n","# import jax.numpy as np\n","import pandas as pd\n","# import seaborn as sns\n","# import tensorflow as tf\n","\n","import pickle\n","import shutil\n","import json\n","from easydict import EasyDict\n","import copy\n","\n","import datetime\n","from datetime import datetime\n","import random\n","import time\n","# import warnings\n","\n","# warnings.simplefilter(\"ignore\", category=RuntimeWarning)\n","\n","np.seterr(invalid=\"ignore\")\n","np.set_printoptions(suppress=True)\n","np.set_printoptions(linewidth=2000) \n","\n","pd.set_option('mode.chained_assignment',  None)\n","\n","pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)"]},{"cell_type":"markdown","metadata":{"id":"Ic1mfmwWCIBu"},"source":["# makeset - with to_htf dataframes"]},{"cell_type":"markdown","metadata":{"id":"AUSBU7T8Suzi"},"source":["## sync_check_make"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QmhLikYlSuzi"},"outputs":[],"source":["def sync_check_make(df):\n","\n","    make_itv_list = ['3T', '5T', '15T', '30T', 'H', '4H', 'D']\n","    offset_list = ['1h', '1h', '1h', '1h', '1h', '1h', '9h']\n","\n","    assert len(make_itv_list) == len(offset_list), \"length of itv & offset_list should be equal\"\n","        \n","    htf_df_list = [to_htf(df, itv_=itv_, offset=offset_) for itv_, offset_ in zip(make_itv_list, offset_list)]\n","\n","    df_3T, df_5T, df_15T, df_30T, df_H, df_4H, df_D = htf_df_list\n","\n","    for htf_df in htf_df_list:\n","      print(\"{} -> \".format(pd.infer_freq(htf_df.index)), htf_df.tail(1))\n","\n","    # --------------- normalize data --------------- #\n","    lb_period = 15\n","    target_col = 'close_{}'.format(lb_period)\n","    target_data = df['close'].diff(lb_period).to_numpy()\n","    norm_data(df, target_data, target_col)    \n","    print(\"normalize data phase done !\")\n","\n","    # --------------- lucid sar --------------- #\n","    # lucid_sar_v2(df)\n","    # lucid_sar_v2(df_3T)\n","    # df = df.join(to_lower_tf_v2(df, df_3T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_5T)\n","    # df = df.join(to_lower_tf_v2(df, df_5T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_15T)\n","    # df = df.join(to_lower_tf_v2(df, df_15T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_30T)\n","    # df = df.join(to_lower_tf_v2(df, df_30T, [-2, -1]), how='inner')       \n","\n","    # print(\"sar phase done\")\n","\n","    # --------------- supertrend --------------- #\n","    # df = st_price_line(df, df_3T, '3m')\n","    # df = st_price_line(df, df_5T, '5m')\n","    # df = st_price_line(df, df_15T, '15m')\n","    # df = st_price_line(df, df_30T, '30m')\n","    # df = st_price_line(df, df_H, '1h')\n","    # df = st_price_line(df, df_4H, '4h')\n","\n","    # print(\"supertrend phase done\")\n","\n","    # --------------- rsi --------------- #  \n","    # df['rsi_1m'] = rsi(df, 14)    \n","    # df_5T['rsi_5m'] = rsi(df_5T, 14)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1]), columns=['rsi_5m']))\n","    \n","    # print(\"rsi phase done\")\n","\n","\n","    # --------------- cci --------------- #  \n","    # df['cci_1m'] = cci(df, 20)\n","\n","    # print(\"cci phase done\")\n","\n","\n","    # --------------- ema --------------- #      \n","    # df_5T['ema_5m'] = ema(df_5T['close'], 195)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1]), columns=['ema_5m']))\n","    \n","    # print(\"ema phase done\")\n","\n","\n","    # # --------------- dc --------------- #  \n","    # df = dc_line(df, None, '1m', dc_period=20)\n","    # df = dc_line(df, df_3T, '3m', dc_period=20)\n","    # df = dc_line(df, df_5T, '5m', dc_period=20)\n","    # df = dc_line(df, df_15T, '15m', dc_period=20)\n","    # df = dc_line(df, df_30T, '30m', dc_period=20)\n","    # df = dc_line(df, df_H, '1h', dc_period=20)\n","    # df = dc_line(df, df_4H, '4h', dc_period=20)\n","    # df = dc_line(df, df_D, '1d', dc_period=20)\n","\n","    # print(\"dc phase done\")\n","    \n","    # # --------------- bband --------------- #  \n","    # df = bb_width_v2(df, period, multiple)\n","\n","    # print(\"bband phase done\")\n","\n","    # --------------- cbline --------------- #    \n","    # df_3T['cloud_bline_3m'] = cloud_bline(df_3T, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_3T, [-1]), columns=['cloud_bline_3m']))\n","    # df_5T['cloud_bline_5m'] = cloud_bline(df_5T, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1]), columns=['cloud_bline_5m']))\n","    # df_15T['cloud_bline_15m'] = cloud_bline(df_15T, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_15T, [-1]), columns=['cloud_bline_15m']))\n","    # df_30T['cloud_bline_30m'] = cloud_bline(df_30T, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_30T, [-1]), columns=['cloud_bline_30m']))\n","    # df_H['cloud_bline_1h'] = cloud_bline(df_H, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_H, [-1]), columns=['cloud_bline_1h']))\n","    # df_4H['cloud_bline_4h'] = cloud_bline(df_4H, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_4H, [-1]), columns=['cloud_bline_4h']))\n","\n","    # print(\"cbline phase done\")\n","    \n","    \n","    # --------------- stochastic --------------- #\n","    # df['stoch_1m'] = stoch(df, 13, 3, 3)\n","\n","    # df_5T['stoch'] = stoch(df_5T, 13, 3, 3)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","    # print(\"stoch phase done\")\n","\n","\n","    return df\n"]},{"cell_type":"markdown","metadata":{"id":"mEKyVbHWSuzi"},"source":["## make & save res_df (concat 생각하면, timeindex sync 맞춰야함)"]},{"cell_type":"markdown","metadata":{"id":"VdukVo5-Suzj"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11,"status":"error","timestamp":1636201718856,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"khKb9nhlSuzj","outputId":"02bf2c60-f298-4fe9-e6bb-78230ac1348c"},"outputs":[{"ename":"NameError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-5-ee034491b257>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0ma_day\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m3600\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m24\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtqdm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m   \u001b[0mkeys\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mfile_list\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'file_list' is not defined"]}],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  if '2021-07-01'.upper() not in file_list[i]:\n","  # if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    excel_name = key.replace(\".xlsx\", \"_st1h_backi2.xlsx\")\n","    excel_path = save_path + excel_name\n","\n","    if excel_name in exist_list:\n","      print(excel_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m 마지막 timeindex 의 date 기준, 08:59:59.999000 를 last timestamp 로 설정\n","      #      2. 시작 timestamp 는 모든 tf 의 가장 최근 시작 index,\n","      #       a. 1m 의 시작 timeindex 는 최소, htf 의 시작 timeindex 보다 interval 만큼 앞서야함\n","      #         i. 따라서 1m open_index, latest_open_index + 1d 를 하면 댐\n","      #           1. timestamp 으로 변환후 1day 를 더하고 datetime 으로 변환\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","    latest_open_index = sorted(open_indexes)[-1]\n","    \n","    open_ts = datetime.timestamp(latest_open_index)\n","    latest_open_index_1m = datetime.fromtimestamp(open_ts + a_day)\n","\n","    #   str 로 만들어 접근하면 불가함  #\n","    end_index = pd.to_datetime(str(df.index[-1]).split(\" \")[0] + \" 08:59:59.999000\")\n","    # break\n","\n","    sliced_df = df.loc[latest_open_index_1m:end_index] # to_lower_tf 의 기준 ltf\n","    sliced_second_df = second_df.loc[latest_open_index:end_index]\n","    sliced_third_df = third_df.loc[latest_open_index:end_index]\n","    sliced_fourth_df = fourth_df.loc[latest_open_index:end_index]\n","    sliced_fifth_df = fifth_df.loc[latest_open_index:end_index]\n","\n","    print(\"sliced index\")\n","    print(sliced_df.index[[0, -1]])\n","    print(sliced_second_df.index[[0, -1]])\n","    print(sliced_third_df.index[[0, -1]])\n","    print(sliced_fourth_df.index[[0, -1]])\n","    print(sliced_fifth_df.index[[0, -1]])\n","\n","    try:\n","      sliced_sixth_df = sixth_df.loc[latest_open_index:end_index]\n","      sliced_seventh_df = seventh_df.loc[latest_open_index:end_index]\n","\n","      print(sliced_sixth_df.index[[0, -1]])\n","      print(sliced_seventh_df.index[[0, -1]])\n","\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df, sliced_sixth_df, sliced_seventh_df)\n","    \n","    except:\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df)\n","\n","\n","\n","    res_df.to_excel(excel_path)\n","    print(excel_name, \"saved succesfully !\")"]},{"cell_type":"markdown","metadata":{"id":"Bw5JibDKSuzj"},"source":["### xlsx to feather"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":355,"referenced_widgets":["be2b848dbcb14a079a2b7bd605af6435"]},"id":"VA-_gcA7Suzj","outputId":"f6f3b55d-ec2c-4b2c-d62e-3de7c0384dc4"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"be2b848dbcb14a079a2b7bd605af6435","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/156 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["DatetimeIndex(['2021-06-28 00:00:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:02:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:04:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:14:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:29:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-09-14 03:59:59.999000', '2021-11-15 14:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-03-10 20:59:59.999000', '2021-11-15 16:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","\n","xlsx converted to feather !\n","DatetimeIndex(['2021-06-28 00:00:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:02:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:04:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:14:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:29:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-09-14 03:59:59.999000', '2021-11-15 14:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-03-10 20:59:59.999000', '2021-11-15 16:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","\n","xlsx converted to feather !\n"]}],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  # if '2021-07-01'.upper() not in file_list[i]:\n","  if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    feather_name = key.replace(\".xlsx\", \".ftr\")\n","    # feather_path = save_path + feather_name\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m 마지막 timeindex 의 date 기준, 08:59:59.999000 를 last timestamp 로 설정\n","      #      2. 시작 timestamp 는 모든 tf 의 가장 최근 시작 index,\n","      #       a. 1m 의 시작 timeindex 는 최소, htf 의 시작 timeindex 보다 interval 만큼 앞서야함\n","      #         i. 따라서 1m open_index, latest_open_index + 1d 를 하면 댐\n","      #           1. timestamp 으로 변환후 1day 를 더하고 datetime 으로 변환\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","\n","    df.reset_index().to_feather(date_path + feather_name, compression='lz4')\n","    second_df.reset_index().to_feather(date_path2 + feather_name, compression='lz4')\n","    third_df.reset_index().to_feather(date_path3 + feather_name, compression='lz4')\n","    fourth_df.reset_index().to_feather(date_path4 + feather_name, compression='lz4')\n","    fifth_df.reset_index().to_feather(date_path5 + feather_name, compression='lz4')\n","    sixth_df.reset_index().to_feather(date_path6 + feather_name, compression='lz4')\n","    seventh_df.reset_index().to_feather(date_path7 + feather_name, compression='lz4')\n","\n","    print(\"xlsx converted to feather !\")\n","    "]},{"cell_type":"markdown","metadata":{"id":"Pe0QpnORSuzk"},"source":["### add itv_name to ftr"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":223,"referenced_widgets":["e3225655da874b8d89cc8b2a381b3fb6"]},"executionInfo":{"elapsed":43664,"status":"ok","timestamp":1638246331122,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"M-gl30KxSuzk","outputId":"1cfcb580-8d25-4bd0-fdd0-213640779ce2"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"e3225655da874b8d89cc8b2a381b3fb6","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/175 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 BTCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 BCHUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 XRPUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 EOSUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 LTCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ETCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 LINKUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 XLMUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ADAUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ETHUSDT_1m.ftr\n"]}],"source":["save_path = './candlestick_concated/res_df/'\n","\n","# dir_path = \"bbdc3m_backi2\"\n","# date = '2021-10-10'\n","date = '2021-07-01'\n","\n","db_path = './candlestick_concated/database_bn/non_cum/%s/' % date\n","os.makedirs(os.path.join(db_path), exist_ok=True)\n","\n","# exist_list = os.listdir(os.path.join(save_path, dir_path))\n","# break\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","        \n","    df = shutil.copy(date_path + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n","    second_df = shutil.copy(date_path2 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval2))\n","    third_df = shutil.copy(date_path3 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval3))\n","    fourth_df = shutil.copy(date_path4 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval4))\n","    fifth_df = shutil.copy(date_path5 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval5))\n","    sixth_df = shutil.copy(date_path6 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval6))\n","    seventh_df = shutil.copy(date_path7 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval7))\n","\n","    print(\"copied to\" + db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n"]},{"cell_type":"markdown","metadata":{"id":"4oZ1ohTtSuzk"},"source":["### feather ver. (database to res_df)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":448,"referenced_widgets":["15a8f265417c47d88bf5b1907353afa8","4f4c5fba8f1d4543a46d6dd7e658b7b3","2d4fae08e5364faf83b0bcdc8e6ece4c","0f94b5763ea344adbb20cf3517a25d2f","e5594180fccb4d2787579ee6034cd6ab","af7a8b3e0365404ea9de8bea08d1a4a6","4f9b787786494e79959bc49b6da4ff4d","06f4ecc65be347ac80deee1965545f27","f8462155d04e4c8da2e4c26f02213bb4","18817cdc20574020976bc2f2c6acc6b2","fefe35e08d734a20aa38986f42f27b13"]},"executionInfo":{"elapsed":239284,"status":"ok","timestamp":1642739615683,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"vgVHpnUsSuzk","outputId":"6224eedf-c127-4d18-f095-3a543cd3f1f8"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"15a8f265417c47d88bf5b1907353afa8","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/7 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["3T ->                          open     high      low    close\n","index                                                  \n","2022-01-10 15:18:00  3163.02  3164.29  3162.41  3164.28\n","5T ->                          open     high      low    close\n","index                                                  \n","2022-01-10 15:15:00  3160.51  3164.29  3159.01  3164.28\n","15T ->                          open     high      low    close\n","index                                                  \n","2022-01-10 15:15:00  3160.51  3164.29  3159.01  3164.28\n","30T ->                         open     high      low    close\n","index                                                 \n","2022-01-10 15:00:00  3171.7  3173.11  3156.02  3164.28\n","H ->                         open     high      low    close\n","index                                                 \n","2022-01-10 15:00:00  3171.7  3173.11  3156.02  3164.28\n","4H ->                         open     high      low    close\n","index                                                 \n","2022-01-10 13:00:00  3153.0  3179.16  3149.95  3164.28\n","D ->                          open     high      low    close\n","index                                                  \n","2022-01-10 09:00:00  3149.99  3179.16  3125.88  3164.28\n","supertrend phase done\n","./candlestick_concated/res_df/st3m_backi2/noncat/cum/2022-01-10/2022-01-10 ETHUSDT.ftr saved succesfully !\n"]}],"source":["# db_path = './candlestick_concated/database_ub/' # upbit\n","db_path = './candlestick_concated/database_bn/'   # binance\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","save_dir_path = \"bb1d_backi2\"\n","date = '2022-02-17'\n","\n","# concat_path = 'noncat' # 새로운 cols 를 기존 cum/concat 에 붙이려는 경우\n","concat_path = 'concat'\n","cum_path = \"cum\"\n","# cum_path = \"non_cum\"  # non_cum 으로 진행하는 경우, row concat 용도이기 때문에 noncat -> concat 으로 변경 (base cols 를 모두 담고 있음)\n","\n","load_path = os.path.join(db_path, cum_path, date)\n","save_path = os.path.join(save_path, save_dir_path, concat_path, cum_path, date)\n","\n","os.makedirs(save_path, exist_ok=True)\n","\n","file_list = os.listdir(load_path)\n","exist_list = os.listdir(save_path)\n","# break\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","\n","    if \"_1m\" not in key:\n","      continue\n","\n","    # feather_name = key.replace(\".ftr\", \"_%.ftr\" % save_dir_path)\n","    feather_name = key.replace(\"_1m\", \"\")\n","    feather_path = os.path.join(save_path, feather_name)\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    df = pd.read_feather(os.path.join(load_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","    res_df = sync_check_make(df)\n","\n","    res_df.reset_index().to_feather(feather_path, compression='lz4')\n","    print(feather_path, \"saved succesfully !\")"]},{"cell_type":"markdown","source":["#### just add col to loaded df"],"metadata":{"id":"YxCPUzoyidwH"}},{"cell_type":"code","source":["# heikinashi_v2(res_df_)\n","res_df_ = sync_check_make(res_df_)"],"metadata":{"id":"odqVwQHpYo1M","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1646391422965,"user_tz":-540,"elapsed":976,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"31c0e1c0-61b3-4234-d82d-1b82012568bd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["3T ->                          open     high      low    close\n","index                                                  \n","2022-02-17 10:27:00  3148.85  3150.08  3146.38  3146.76\n","5T ->                          open     high      low    close\n","index                                                  \n","2022-02-17 10:25:00  3146.85  3150.08  3145.44  3146.76\n","15T ->                          open    high      low    close\n","index                                                 \n","2022-02-17 10:15:00  3143.99  3151.0  3139.14  3146.76\n","30T ->                         open     high      low    close\n","index                                                 \n","2022-02-17 10:00:00  3148.8  3158.68  3139.14  3146.76\n","H ->                         open     high      low    close\n","index                                                 \n","2022-02-17 10:00:00  3148.8  3158.68  3139.14  3146.76\n","4H ->                         open     high     low    close\n","index                                                \n","2022-02-17 09:00:00  3121.8  3158.68  3120.0  3146.76\n","D ->                         open     high     low    close\n","index                                                \n","2022-02-17 09:00:00  3121.8  3158.68  3120.0  3146.76\n","normalize data phase done !\n"]}]},{"cell_type":"code","source":["res_df_.tail().iloc[:, -4:]"],"metadata":{"id":"3SKglsQCj5_x"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# ------------ save current res_df ------------ #\n","ftr_full_path = os.path.join(ftr_path, key)\n","res_df_.reset_index().to_feather(ftr_full_path, compression='lz4')  # key 잘 확인하고 저장\n","print(ftr_full_path, 'saved !')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XrgJPQRuisCa","executionInfo":{"status":"ok","timestamp":1646453828639,"user_tz":-540,"elapsed":2637,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"e66f64be-dbfa-484b-b268-e8917c1e02a8"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["./candlestick_concated/res_df/bb1d_backi2/concat/cum/2022-02-17/2022-02-17 ETHUSDT.ftr saved !\n"]}]},{"cell_type":"markdown","metadata":{"id":"E0n53hflJbnp"},"source":["### htf candle check"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":489,"status":"ok","timestamp":1642148504926,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"6xW0yugCWvGz","outputId":"58106ff9-9709-4a62-bca2-1f6795d13322"},"outputs":[{"name":"stdout","output_type":"stream","text":["itv_ : 3T\n","                        open     high      low    close\n","index                                                  \n","2022-01-10 15:06:00  3169.97  3170.22  3159.51  3161.22\n","2022-01-10 15:09:00  3161.22  3163.98  3161.22  3163.82\n","2022-01-10 15:12:00  3163.82  3163.83  3156.02  3160.49\n","2022-01-10 15:15:00  3160.51  3164.29  3159.01  3162.93\n","2022-01-10 15:18:00  3163.02  3164.29  3162.41  3164.28\n","                            open     high      low    close    volume\n","index                                                                \n","2022-01-10 15:08:59.999  3169.97  3170.22  3159.51  3161.22  4241.449\n","2022-01-10 15:11:59.999  3161.22  3163.98  3161.22  3163.82  1143.874\n","2022-01-10 15:14:59.999  3163.82  3163.83  3156.02  3160.49  2135.292\n","2022-01-10 15:17:59.999  3160.51  3164.29  3159.01  3162.93  1011.598\n","2022-01-10 15:20:59.999  3163.02  3164.29  3162.41  3163.82   466.868\n"]}],"source":["itv_list = ['3T', '5T', '15T', '30T', '1H', '4H']\n","comp_df_list = [second_df, third_df, fourth_df, fifth_df, sixth_df, seventh_df]\n","offset_list = ['1h', '2min', '2min', '2min', '2min', '2min']\n","# itv_list = ['4H']\n","# comp_df_list = [seventh_df]\n","\n","slice_len = 100\n","for itv_, comp_df_, offset in zip(itv_list, comp_df_list, offset_list):\n","\n","  print(\"itv_ :\", itv_)\n","\n","  # df = h_candle_v2(df, '3T')\n","  # end_ts = \n","  h_res_df = df.resample(itv_, offset=offset).agg({\n","          'open': 'first',\n","          'high': 'max',\n","          'low': 'min',\n","          'close': 'last'\n","      })\n","\n","  #   앞은 길이가 다르고, 뒤에서부터 잘라서 비교    #\n","  #   last_row 빼고는 동일, 4h 제외\n","  # print(df.tail())\n","  print(h_res_df.tail())\n","  print(comp_df_.tail())\n","  # # print(h_res_df.head())\n","  # # print(second_df.head())\n","\n","  # print(len(h_res_df))\n","  # print(len(second_df))\n","\n","  # print(h_res_df.values[-slice_len:])\n","  # print(second_df.iloc[:, :4].values[-slice_len:])\n","  # print(np.argwhere(h_res_df.values[-slice_len:] != comp_df_.iloc[:, :4].values[-slice_len:]))\n","  # print()\n","  break"]},{"cell_type":"markdown","metadata":{"id":"jTN3M842Suzl"},"source":["## concat & save new res_df"]},{"cell_type":"markdown","metadata":{"id":"MlFkpO1MSuzl"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"U-3QkfbFSuzl"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","dict_name = \"2021-07-01 ETHUSDT_bb15m_backi2_res_dfs.pkl\"\n","\n","#     load with pickle    #\n","with open(save_path + dict_name, 'rb') as f:\n","  saved_res_df_dict = pickle.load(f)\n","\n","print(dict_name, \"loaded !\")\n","res_df_files = os.listdir(save_path)\n","res_df_files.reverse()\n","\n","print(res_df_files)\n","\n","res_df_dict = {}\n","\n","base_postfix = '_bb15m_backi2.xlsx'\n","new_postfix = '_st1h_backi2.xlsx'\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for k_i, key in enumerate(res_df_files):\n","\n","  if '2021-07-01'.upper() not in key:\n","  # if '2021-10-10'.upper() not in key:\n","    continue\n","\n","  # if \"link\".upper() not in key:\n","  # if \"btc\".upper() not in key:\n","  #   continue\n","\n","  if new_postfix not in key:\n","    continue\n","\n","  # if key in \n","\n","  if sample_cnt == max_cnt:\n","    dict_name = \"%s_res_dfs.pkl\" % key.split(\".\")[0]\n","    print(\"dict_name :\", dict_name)\n","\n","  base_df = saved_res_df_dict[key.replace(new_postfix, base_postfix)]\n","  # base_df = pd.read_excel(save_path + key.replace(new_postfix, base_postfix), index_col=0)  \n","  res_df = pd.read_excel(save_path + key, index_col=0)  \n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  droped_new_res_df.head()\n","  # break\n","\n","  # res_df_dict[key] = res_df\n","  res_df_dict[key] = droped_new_res_df\n","  print(key, \"saved to dict !\")\n","\n","  #     save with pickle    #\n","  with open(save_path + dict_name, 'wb') as f:\n","    pickle.dump(res_df_dict, f)\n","\n","  sample_cnt -= 1\n","\n","  if sample_cnt <= 0:\n","    break\n"]},{"cell_type":"markdown","metadata":{"id":"t1E_eAyPSuzm"},"source":["### new col to latest feather (1m_indi. only)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xyI5NrM7Suzm"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","cum_dir = \"cum\"\n","\n","new_dir_path = \"rsi_backi2\"\n","base_dir_path = \"bbdc3m_backi2\"\n","\n","new_date = '2021-11-17'\n","\n","\n","\n","#     load ftr list    #\n","base_save_path = os.path.join(save_path, base_dir_path, \"concat/cum\", new_date)\n","new_save_path = base_save_path.replace(base_dir_path, new_dir_path)\n","\n","#     save to (new) cum dir    #\n","#      1. if dir. not exists, makedir\n","os.makedirs(new_save_path, exist_ok=True)\n","\n","ftr_list = [s for s in os.listdir(base_save_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_save_path, key), columns=None, use_threads=True).set_index(\"index\")\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  droped_new_res_df = sync_check(base_df)\n","\n","  # new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # # new_res_df.head()\n","\n","  # intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  # droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break\n","\n","  droped_new_res_df.reset_index().to_feather(os.path.join(new_save_path, key), compression='lz4')\n","\n","  print(os.path.join(new_save_path, key), \"saved !\")\n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"markdown","metadata":{"id":"nUs4fjVHSuzl"},"source":["### feather ver. (col concat)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2001,"status":"ok","timestamp":1642739652513,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"6cu-Y82iSuzl","outputId":"273507b8-0d33-48b5-d9c5-00547688ef73"},"outputs":[{"name":"stdout","output_type":"stream","text":["['2022-01-10 ETHUSDT.ftr']\n","./candlestick_concated/res_df/st3m_backi2/concat/cum/2022-01-10/2022-01-10 ETHUSDT.ftr saved !\n"]}],"source":["new_dir_path = \"st3m_backi2\"\n","base_dir_path = \"bb1d_backi2\"\n","\n","# new_date = \"2021-11-17\"\n","new_date = \"2022-01-10\"\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","save_path = './candlestick_concated/res_df/'\n","save_path = os.path.join(save_path, new_dir_path, \"concat/cum\", new_date)   \n","# save_path = os.path.join(save_path, new_dir_path, \"concat/non_cum\", new_date)   # row col 하려면 concat 맞음, noncum 사용\n","os.makedirs(save_path, exist_ok=True)\n","\n","\n","#     load ftr list    #\n","# ftr_list = [s for s in os.listdir(os.path.join(save_path, new_dir_path)) if \"ftr\" in s]\n","\n","noncat_path = save_path.replace(\"concat/\", \"noncat/\")\n","ftr_list = [s for s in os.listdir(noncat_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","  try:\n","\n","    #       read from base postfix's directory    #\n","    base_df = pd.read_feather(os.path.join(save_path.replace(new_dir_path, base_dir_path), key), columns=None, use_threads=True).set_index(\"index\")\n","    res_df = pd.read_feather(os.path.join(noncat_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","    # print(base_df.head())\n","    # print(res_df.head())\n","    # break\n","\n","    new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","    # new_res_df.head()\n","\n","    droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","    # droped_new_res_df.head()\n","    # break\n","\n","    droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","    # res_df_dict[key] = res_df\n","    # res_df_dict[key] = droped_new_res_df\n","    print(os.path.join(save_path, key), \"saved !\")\n","  \n","  except Exception as e:\n","    print(\"error occured ! :\", e)\n","  \n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"markdown","metadata":{"id":"WVAKq3i8Suzm"},"source":["### feather ver. (row concat) , database cum 도 호환가능"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7893,"status":"ok","timestamp":1645188189702,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"XG2p9OhhSuzm","outputId":"e67874ba-0710-4f38-966f-5ea7d42403cb"},"outputs":[{"output_type":"stream","name":"stdout","text":["['2022-02-17 ETHUSDT_1m.ftr']\n","                            open     high     low    close  volume\n","index                                                             \n","2019-11-27 16:45:59.999   146.00   146.00   146.0   146.00   0.010\n","2022-02-17 10:29:59.999  3146.86  3147.22  3146.4  3146.76  26.727\n","continuity checked !\n","./candlestick_concated/database_bn/cum/2022-02-17/2022-02-17 ETHUSDT_1m.ftr saved !\n"]}],"source":["save_path = './candlestick_concated/res_df/'        # cols 추가된 cum db 에 new_row's cols 기준으로 합치는 경우\n","save_path = './candlestick_concated/database_bn/'   # ohlcv cum db 만들 경우\n","\n","base_date = '2022-01-10'\n","new_date = '2022-02-17'\n","\n","#     load ftr list    #\n","if \"database\" in save_path:\n","  base_dir_path = \"\"\n","  new_dir_path = \"\"\n","  concat_dir = \"\"\n","else:\n","  base_dir_path = \"sar_backi2\"\n","  new_dir_path = \"bb4h_backi2\"  # dir_path 가 base / new 서로 달라질 수 있어서 분할함\n","  concat_dir = \"concat\"\n","\n","base_date_path = os.path.join(save_path, base_dir_path, concat_dir, \"cum\", base_date)      # 기존 cum db 와 new_date db 를 cum 진행\n","# base_date_path = os.path.join(save_path, base_dir_path, concat_dir, \"non_cum\", base_date)    # non_cum db 와 new_date db 를 cum 진행\n","\n","# new_date_path = os.path.join(save_path, new_dir_path, concat_dir, \"cum\", new_date)      # 상황별로 직접 선택해야할 듯\n","new_date_path = os.path.join(save_path, new_dir_path, concat_dir, \"non_cum\", new_date)\n","\n","\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","save_path = new_date_path.replace(\"non_cum\", \"cum\")   # non_cum 아니여도 무관\n","os.makedirs(save_path, exist_ok=True)   # noncat / concat 두가지 경우 존재가능할 것\n","# os.makedirs(os.path.join(save_path, dir_path, \"noncat/cum\", new_date), exist_ok=True)\n","\n","\n","ftr_list = [s for s in os.listdir(new_date_path) if \"ftr\" in s]\n","exist_list = os.listdir(save_path)\n","print(ftr_list)\n","# break\n","\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:   # date rejection\n","    continue\n","  if '1m' not in key:  # itv rejection\n","    continue\n","\n","  # if key in exist_list:\n","  #   print(key, \"already exist !\")\n","  #   continue\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_date_path, key.replace(new_date, base_date)), columns=None, use_threads=True).set_index(\"index\")   # key 에 new_date 담겨있음\n","  res_df = pd.read_feather(os.path.join(new_date_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break  \n","  \n","  print(droped_new_res_df.iloc[[0, -1]])  \n","\n","  # ------------- verify df continuity directly itv by itv ------------- #\n","  true_continue = True\n","  if \"_\" in key:\n","\n","    interval = key.split(\".\")[0].split(\"_\")[-1] \n","    itv_num = to_itvnum(interval)\n","\n","    # verified_df = consecutive_df(droped_new_res_df, to_itvnum(interval))\n","    # verified_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","    # res_df_dict[key] = res_df\n","    # res_df_dict[key] = droped_new_res_df  \n","\n","    np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","    ideal_ts_gap = 60 * itv_num\n","\n","    for ts_i in range(len(np_idx_ts)):\n","      \n","      if ts_i != 0:\n","        ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","\n","        if ts_gap > ideal_ts_gap or ts_gap < ideal_ts_gap:\n","        # if ts_gap == ideal_ts_gap:\n","          print(droped_new_res_df.index[ts_i - 1])\n","          print(droped_new_res_df.index[ts_i])\n","          # print(ts_gap)\n","          print(\"------------------ unideal ts_gap ------------------\")\n","          true_continue = False\n","\n","    print(\"continuity checked !\")\n","\n","  if true_continue:\n","    droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","  print(os.path.join(save_path, key), \"saved !\")\n","  \n"]},{"cell_type":"markdown","metadata":{"id":"L7l5CTJfSuzn"},"source":["### check continuity"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nGzMGyC3Suzn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1643987442996,"user_tz":-540,"elapsed":5408,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"4fface63-62d9-4e2a-e22d-bdd26f428e0e"},"outputs":[{"output_type":"stream","name":"stdout","text":["                             open    high       low     close   volume\n","index                                                                 \n","2020-09-14 16:00:59.999    3.2002    4.91    3.2002    3.2745  11567.0\n","2022-02-04 23:57:59.999  103.7500  103.75  103.6000  103.6000   6427.0\n","[1.60009926e+09 1.60009932e+09 1.60009938e+09 1.60009944e+09\n"," 1.60009950e+09 1.60009956e+09 1.60009962e+09 1.60009968e+09\n"," 1.60009974e+09 1.60009980e+09]\n"]}],"source":["# print(droped_new_res_df.columns)\n","\n","print(droped_new_res_df.iloc[[0, -1]])\n","\n","np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","\n","print(np_idx_ts[:10])\n","for ts_i in range(len(np_idx_ts)):\n","  \n","  if ts_i != 0:\n","    ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","\n","    if ts_gap > 60 or ts_gap < 60:\n","\n","      print(\"invalid ts_gap found !\")\n","    # if ts_gap == 60:\n","      print(droped_new_res_df.index[ts_i - 1])\n","      print(droped_new_res_df.index[ts_i])\n","      # print(ts_gap)\n","      print()\n"]},{"cell_type":"markdown","metadata":{"id":"x_XGJqBi8Jex"},"source":["### check length of front missing value + middle_data non_missing validity"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":311,"status":"ok","timestamp":1641887318959,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"yRNwqVeAu8X8","outputId":"fb236bde-4527-4bc7-eac4-4bee42532c5a"},"outputs":[{"name":"stdout","output_type":"stream","text":["2.167361111111111\n","38\n"]}],"source":["#       1. new_date 의 시작 timeidx 와 base_date end timeidx 의 최소 days' gap     #\n","#       2. new_date 의 시작 부분 indi. value 는 np.nan 으로 채워질 거기 때문에 계산해야함    #\n","\n","df_count = droped_new_res_df.count()\n","len_missing = df_count.max() - df_count.min()\n","print(len_missing / 1440)\n","\n","#       3. \n","missing_sliced_df = droped_new_res_df.iloc[len_missing:]\n","df_count2 = missing_sliced_df.count()\n","# print(df_count2)\n","print((df_count2.max() - df_count2.min()))    # this value should be zero !\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"AY7E2_hTBsyM"},"outputs":[],"source":["# df_count2.index[df_count2.argmin()]\n","# missing_sliced_df.head(5)\n","\n","stay_missed = np.sum(pd.isnull(missing_sliced_df), axis=0)\n","print(stay_missed)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"p9yqewOw9g33"},"outputs":[],"source":["stay_missed_cols = stay_missed[stay_missed != 0].index\n","\n","for sm_col in stay_missed_cols:\n","  \n","  row_idx = np.argwhere(pd.isnull(missing_sliced_df[sm_col].values))\n","\n","  plt.figure(figsize=(3,3))\n","  plt.plot(row_idx)\n","  plt.ylim(0, len(missing_sliced_df))\n","  plt.title(sm_col)\n","\n","  plt.show()\n"]},{"cell_type":"markdown","source":["## legacy"],"metadata":{"id":"MSUY4nnku3s9"}},{"cell_type":"markdown","source":["### mv files"],"metadata":{"id":"epgS5Dksu-HX"}},{"cell_type":"code","source":["df_path = './candlestick_concated/survey_df_v2'\n","files_ = os.listdir(df_path)"],"metadata":{"id":"aJcVpEdrslA5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dirs = [file_ for file_ in files_ if not file_.endswith('.ftr')]\n","files = [file_ for file_ in files_ if file_.endswith('.ftr')]"],"metadata":{"id":"cEKyEYkotFDy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dirs"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IgM79tcxtPVZ","executionInfo":{"status":"ok","timestamp":1644111921194,"user_tz":-540,"elapsed":4,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"84305b35-eb52-49fc-d5fd-fdbc64cc8679"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['2022-01-10 ETHUSDT', '2022-01-10 ETHUSDT_all', '2022-02-04 SOLUSDT']"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["def move_fn(dir_, file_):\n","  src_path = os.path.join(df_path, file_)\n","  dst_path = os.path.join(df_path, dir_, file_)\n","  shutil.move(src_path, dst_path)\n","  print(\"moved to {}\".format(dst_path))\n","\n","_ = [move_fn('2022-01-10 ETHUSDT_all', file_) for file_ in files if 'eth'.upper() in file_]\n","# sols\n"],"metadata":{"id":"M767iRtwtRQP"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Ci_jUnNTZbm9"},"source":["### load data (old)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":22503,"status":"ok","timestamp":1638246127510,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"_bXyS2yrZYC6","outputId":"b24a8a66-48b1-42b5-aa79-63f5a8542bac"},"outputs":[{"name":"stdout","output_type":"stream","text":["['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr']\n","['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 LTCUSDT.ftr']\n","['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 ETHUSDT.ftr']\n","['2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr']\n","['2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-08-31 SUSHIUSDT.xlsx', '2021-08-31 CVCUSDT.xlsx', '2021-08-31 BTSUSDT.xlsx', '2021-08-31 HOTUSDT.xlsx', '2021-08-31 ZRXUSDT.xlsx', '2021-08-31 QTUMUSDT.xlsx', '2021-08-31 IOTAUSDT.xlsx', '2021-08-31 BTCBUSD.xlsx', '2021-08-31 WAVESUSDT.xlsx', '2021-08-31 ADAUSDT.xlsx', '2021-08-31 LITUSDT.xlsx', '2021-08-31 XTZUSDT.xlsx', '2021-08-31 BNBUSDT.xlsx', '2021-08-31 AKROUSDT.xlsx', '2021-08-31 HNTUSDT.xlsx', '2021-08-31 ETCUSDT.xlsx', '2021-08-31 XMRUSDT.xlsx', '2021-08-31 YFIUSDT.xlsx', '2021-08-31 ETHUSDT.xlsx', '2021-08-31 ALICEUSDT.xlsx', '2021-08-31 ALPHAUSDT.xlsx', '2021-08-31 SFPUSDT.xlsx', '2021-08-31 REEFUSDT.xlsx', '2021-08-31 BATUSDT.xlsx', '2021-08-31 DOGEUSDT.xlsx', '2021-08-31 TRXUSDT.xlsx', '2021-08-31 RLCUSDT.xlsx', '2021-08-31 BTCSTUSDT.xlsx', '2021-08-31 STORJUSDT.xlsx', '2021-08-31 SNXUSDT.xlsx', '2021-08-31 XLMUSDT.xlsx', '2021-08-31 NEOUSDT.xlsx', '2021-08-31 UNFIUSDT.xlsx', '2021-08-31 SANDUSDT.xlsx', '2021-08-31 DASHUSDT.xlsx', '2021-08-31 KAVAUSDT.xlsx', '2021-08-31 RUNEUSDT.xlsx', '2021-08-31 CTKUSDT.xlsx', '2021-08-31 LINKUSDT.xlsx', '2021-08-31 CELRUSDT.xlsx', '2021-08-31 RSRUSDT.xlsx', '2021-08-31 DGBUSDT.xlsx', '2021-08-31 SKLUSDT.xlsx', '2021-08-31 RENUSDT.xlsx', '2021-08-31 TOMOUSDT.xlsx', '2021-08-31 MTLUSDT.xlsx', '2021-08-31 LTCUSDT.xlsx', '2021-08-31 DODOUSDT.xlsx', '2021-08-31 EGLDUSDT.xlsx', '2021-08-31 KSMUSDT.xlsx', '2021-08-31 ONTUSDT.xlsx', '2021-08-31 VETUSDT.xlsx', '2021-08-31 TRBUSDT.xlsx', '2021-08-31 MANAUSDT.xlsx', '2021-08-31 COTIUSDT.xlsx', '2021-08-31 CHRUSDT.xlsx', '2021-08-31 ETHUSDT_210924.xlsx', '2021-08-31 BAKEUSDT.xlsx', '2021-08-31 GRTUSDT.xlsx', '2021-08-31 FLMUSDT.xlsx', '2021-08-31 EOSUSDT.xlsx', '2021-08-31 OGNUSDT.xlsx', '2021-08-31 SCUSDT.xlsx', '2021-08-31 BALUSDT.xlsx', '2021-08-31 STMXUSDT.xlsx', '2021-08-31 BTTUSDT.xlsx', '2021-08-31 LUNAUSDT.xlsx', '2021-08-31 DENTUSDT.xlsx', '2021-08-31 KNCUSDT.xlsx', '2021-08-31 SRMUSDT.xlsx', '2021-08-31 ENJUSDT.xlsx', '2021-08-31 ZENUSDT.xlsx', '2021-08-31 ATOMUSDT.xlsx', '2021-08-31 NEARUSDT.xlsx', '2021-08-31 BCHUSDT.xlsx', '2021-08-31 IOSTUSDT.xlsx', '2021-08-31 HBARUSDT.xlsx', '2021-08-31 ZECUSDT.xlsx', '2021-08-31 1000SHIBUSDT.xlsx', '2021-08-31 TLMUSDT.xlsx', '2021-08-31 BZRXUSDT.xlsx', '2021-08-31 ETHBUSD.xlsx', '2021-08-31 AAVEUSDT.xlsx', '2021-08-31 GTCUSDT.xlsx', '2021-08-31 ALGOUSDT.xlsx', '2021-08-31 ICPUSDT.xlsx', '2021-08-31 BTCUSDT_210924.xlsx', '2021-08-31 LRCUSDT.xlsx', '2021-08-31 AVAXUSDT.xlsx', '2021-08-31 MATICUSDT.xlsx', '2021-08-31 1INCHUSDT.xlsx', '2021-08-31 MKRUSDT.xlsx', '2021-08-31 THETAUSDT.xlsx', '2021-08-31 UNIUSDT.xlsx', '2021-08-31 LINAUSDT.xlsx', '2021-08-31 RVNUSDT.xlsx', '2021-08-31 FILUSDT.xlsx', '2021-08-31 NKNUSDT.xlsx', '2021-08-31 DEFIUSDT.xlsx', '2021-08-31 COMPUSDT.xlsx', '2021-08-31 BTCDOMUSDT.xlsx', '2021-08-31 SOLUSDT.xlsx', '2021-08-31 BTCUSDT.xlsx', '2021-08-31 OMGUSDT.xlsx', '2021-08-31 ICXUSDT.xlsx', '2021-08-31 BLZUSDT.xlsx', '2021-08-31 FTMUSDT.xlsx', '2021-08-31 YFIIUSDT.xlsx', '2021-08-31 KEEPUSDT.xlsx', '2021-08-31 BANDUSDT.xlsx', '2021-08-31 XRPUSDT.xlsx', '2021-08-31 SXPUSDT.xlsx', '2021-08-31 CRVUSDT.xlsx', '2021-08-31 BELUSDT.xlsx', '2021-08-31 DOTUSDT.xlsx', '2021-08-31 XEMUSDT.xlsx', '2021-08-31 ONEUSDT.xlsx', '2021-08-31 ZILUSDT.xlsx', '2021-08-31 AXSUSDT.xlsx', '2021-08-31 OCEANUSDT.xlsx', '2021-08-31 CHZUSDT.xlsx', '2021-08-31 ANKRUSDT.xlsx', '2021-08-31 SUSHIUSDT_res_dfs.pkl', '2021-07-01 ADAUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr']\n","['2021-07-01 BTCUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr']\n","['2021-02-07 BTC.xlsx', '2021-02-07 ETH.xlsx', '2021-02-11 BCHUSDT.xlsx', '2021-02-11 XRPUSDT.xlsx', '2021-02-11 EOSUSDT.xlsx', '2021-02-11 LTCUSDT.xlsx', '2021-02-11 ETCUSDT.xlsx', '2021-02-11 LINKUSDT.xlsx', '2021-02-11 XLMUSDT.xlsx', '2021-02-11 ADAUSDT.xlsx', '2021-02-11 XMRUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr']\n","['2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx']\n"]}],"source":["interval = '1m'\n","date_path = './candlestick_concated/%s/quant_v2/' % interval\n","file_list = os.listdir(date_path)\n","print((file_list))\n","\n","interval2 = '3m'\n","date_path2 = './candlestick_concated/%s/quant_v2/' % interval2\n","file_list2 = os.listdir(date_path2)\n","print((file_list2))\n","\n","interval3 = '5m'\n","date_path3 = './candlestick_concated/%s/quant_v2/' % interval3\n","file_list3 = os.listdir(date_path3)\n","print((file_list3))\n","\n","interval4 = '15m'\n","date_path4 = './candlestick_concated/%s/quant_v2/' % interval4\n","file_list4 = os.listdir(date_path4)\n","print((file_list4))\n","\n","interval5 = '30m'\n","date_path5 = './candlestick_concated/%s/quant_v2/' % interval5\n","file_list5 = os.listdir(date_path5)\n","print((file_list5))\n","\n","interval6 = '1h'\n","date_path6 = './candlestick_concated/%s/quant_v2/' % interval6\n","file_list6 = os.listdir(date_path6)\n","print((file_list6))\n","\n","interval7 = '4h'\n","date_path7 = './candlestick_concated/%s/quant_v2/' % interval7\n","file_list7 = os.listdir(date_path7)\n","print((file_list7))\n","\n","interval8 = '1d'\n","date_path8 = './candlestick_concated/%s/quant_v2/' % interval8\n","file_list8 = os.listdir(date_path8)\n","print((file_list8))"]},{"cell_type":"markdown","metadata":{"id":"M8-EChy0VsDr"},"source":["## cudf"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":414,"status":"ok","timestamp":1638754008241,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"b09qAb1sVtRP","outputId":"3a824202-064a-4544-b791-ffc777bb3f9c"},"outputs":[{"name":"stdout","output_type":"stream","text":["usage: conda [-h] [-V] command ...\n","conda: error: unrecognized arguments: -t=/content/notebooks\n"]}],"source":["# !conda install -c rapidsai-nightly -c nvidia -c numba -c conda-forge \\\n","#     cudf python=3.7 cudatoolkit=11.1 -t=$nb_path"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":413,"status":"ok","timestamp":1638754715310,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"Jnz6i7ZqRnb0","outputId":"207bc57b-a17a-4f67-fb26-24e46e2c6e26"},"outputs":[{"name":"stdout","output_type":"stream","text":["***********************************************************************\n","Woo! Your instance has the right kind of GPU, a Tesla P100-PCIE-16GB!\n","***********************************************************************\n","\n"]}],"source":["# !git clone https://github.com/rapidsai/rapidsai-csp-utils.git\n","!python rapidsai-csp-utils/colab/env-check.py"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4sKA_9Dbg4s2"},"outputs":[],"source":["# This will update the Colab environment and restart the kernel.  Don't run the next cell until you see the session crash.\n","!bash rapidsai-csp-utils/colab/update_gcc.sh\n","import os\n","os._exit(00)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"d1C4pNiBhYHX"},"outputs":[],"source":["# This will install CondaColab.  This will restart your kernel one last time.  Run this cell by itself and only run the next cell once you see the session crash.\n","import condacolab\n","condacolab.install()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":414,"status":"ok","timestamp":1638754863073,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"iGx3ACTvZqck","outputId":"e8379cc4-c325-4fe0-ac46-5fbbd7d38829"},"outputs":[{"name":"stdout","output_type":"stream","text":["✨🍰✨ Everything looks OK!\n"]}],"source":["# you can now run the rest of the cells as normal\n","import condacolab\n","condacolab.check()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oR8s7U8c7C28","outputId":"22be2731-fae1-45fc-f310-e48f60774bb2"},"outputs":[{"name":"stdout","output_type":"stream","text":["Installing RAPIDS Stable 21.10\n","Starting the RAPIDS install on Colab.  This will take about 15 minutes.\n","Collecting package metadata (current_repodata.json): ...working... done\n","Solving environment: ...working... WARNING conda.core.solve:_add_specs(611): pinned spec cudatoolkit=11.1 conflicts with explicit specs.  Overriding pinned spec.\n","failed with initial frozen solve. Retrying with flexible solve.\n","Solving environment: ...working... WARNING conda.core.solve:_add_specs(611): pinned spec cudatoolkit=11.1 conflicts with explicit specs.  Overriding pinned spec.\n","failed with repodata from current_repodata.json, will retry with next repodata source.\n","Collecting package metadata (repodata.json): ...working... done\n"]}],"source":["# Installing RAPIDS is now 'python rapidsai-csp-utils/colab/install_rapids.py <release> <packages>'\n","# The <release> options are 'stable' and 'nightly'.  Leaving it blank or adding any other words will default to stable.\n","# The <packages> option are default blank or 'core'.  By default, we install RAPIDSAI and BlazingSQL.  The 'core' option will install only RAPIDSAI and not include BlazingSQL, \n","!python rapidsai-csp-utils/colab/install_rapids.py stable\n","import os\n","os.environ['NUMBAPRO_NVVM'] = '/usr/local/cuda/nvvm/lib64/libnvvm.so'\n","os.environ['NUMBAPRO_LIBDEVICE'] = '/usr/local/cuda/nvvm/libdevice/'\n","os.environ['CONDA_PREFIX'] = '/usr/local'"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kWsxi4ZpKtGt"},"outputs":[],"source":["import shutil\n","import sys\n","\n","colab_env = \"/usr/lib\"\n","\n","rapids_path = os.path.join(current_path, \"rapidsai-csp-utils/lib\")\n","rapids_libs = os.listdir(rapids_path)\n","print(rapids_libs)\n","# break\n","\n","for lib_ in rapids_libs:\n","  try:\n","    shutil.copy(os.path.join(rapids_path, lib_), os.path.join(colab_env, lib_))\n","    sys.path.append(os.path.join(colab_env, lib_))\n","    print(\"copied to\" + os.path.join(colab_env, lib_))\n","  except Exception as e:\n","    print(e)"]},{"cell_type":"markdown","metadata":{"id":"Iy76iO7gztne"},"source":["## move legacy files"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hMRht32Czwry"},"outputs":[],"source":["# print()\n","cur_dir_list = os.listdir('.')\n","for f in cur_dir_list:\n","  if 'legacy' in f :\n","    # print(f)\n","    if os.path.isdir(current_path + f,):\n","      continue\n","\n","    shutil.move(current_path + f, current_path + 'legacy/' + f)\n","    print(\"moved to\" + current_path + 'legacy/' +  f)"]},{"cell_type":"markdown","metadata":{"id":"5duWn8t4BRyv"},"source":["# IDE platform\n"]},{"cell_type":"markdown","metadata":{"id":"6HOjnZjSgzk1"},"source":["## load ftr_list"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3267,"status":"ok","timestamp":1646475028556,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"7FPBG5Qqg2jB","outputId":"bb4a65b3-73b3-4da8-d938-12c9b1317a64"},"outputs":[{"output_type":"stream","name":"stdout","text":["['2022-02-17 ETHUSDT.ftr']\n","2022-02-17 ETHUSDT.ftr loaded !\n","load res_df_ elapsed time : 2.795057535171509\n"]}],"source":["save_path = './candlestick_concated/res_df/'\n","\n","dir_path = \"bb4h_backi2\"\n","dir_path = \"bb1d_backi2\"\n","date = \"2022-01-10\"\n","date = \"2022-02-17\"\n","\n","ftr_path = os.path.join(save_path, dir_path, \"concat/cum\", date)\n","\n","# ------ load ftr list ------ #\n","ftr_list = [s for s in os.listdir(ftr_path) if \"ftr\" in s if date in s]\n","# ftr_list = [s for s in os.listdir(os.path.join(save_path, dir_path)) if \"ftr\" in s if date in s]\n","print(ftr_list)\n","\n","start_0 = time.time()\n","key = ftr_list[0]  # tempoaray use single key\n","res_df_ = pd.read_feather(os.path.join(ftr_path, key), columns=None, use_threads=True).set_index(\"index\")\n","# print(res_df_.head())\n","print(key, \"loaded !\")\n","print(\"load res_df_ elapsed time :\", time.time() - start_0)"]},{"cell_type":"code","source":["res_df_.dtypes\n","# col_list = list(res_df_.columns)\n","# col_list[-1] = 'norm_close_15'\n","# res_df_.columns = col_list"],"metadata":{"id":"RQH_l4opEh_O"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xpyP5t8Ht_pE","jp-MarkdownHeadingCollapsed":true,"tags":[]},"source":["### calc recursive indi's min_period"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":235},"executionInfo":{"elapsed":15,"status":"error","timestamp":1645810346810,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"N1Hbm4OA4Tkk","outputId":"e6a3fc2f-316c-4a0d-9c91-df759c816b88"},"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-4-c602b9e1b7e6>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mticker_prcn\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_precision_by_price\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mres_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclose\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mtarget_len\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m300000\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mslice_len_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m50\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m10000\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m100\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mslice_len_list\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minsert\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget_len\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'res_df' is not defined"]}],"source":["ticker_prcn = get_precision_by_price(res_df.close.iloc[-1]) + 2\n","\n","target_len = 300000\n","slice_len_list = list(range(50, 10000, 100))\n","slice_len_list.insert(0, target_len)\n","\n","start_0 = time.time()\n","# prev_int_, prev_pnts_ = None, None\n","offset = 1\n","\n","for sl_idx, sample_len in enumerate(slice_len_list):\n","\n","  sample_df = res_df.iloc[-sample_len -offset:-offset]\n","  sample_len2 = sample_len\n","\n","  # --------- input using indi.s --------- #\n","  # res = ema_v0(sample_df['close'], 190)\n","  res = rsi(sample_df, 14)\n","\n","    #    to_htf()    #\n","  # df_5T = to_htf(sample_df, itv_='5T', offset='1h')\n","  # sample_len2 = len(df_5T)\n","\n","  # # --------- input using htf_indi. --------- #\n","  # res = ema(df_5T['close'], 195)\n","  # -------------------------------------- #\n","\n","  res_last_row = res.iloc[-1]\n","  if pd.isnull(res_last_row):\n","    continue\n","\n","  # print(res_last_row)\n","  # break\n","\n","  # sample_df = sample_df.join(to_lower_tf_v2(sample_df, df_5T, [-1]), how='inner')\n","\n","\n","  #   자리수 분할 계산    #\n","  int_, points_ = str(res_last_row).split('.')\n","  pnts_ = points_[:ticker_prcn]\n","\n","  if sl_idx == 0:\n","    target_int_ = int_\n","    target_pnts_ = pnts_\n","    print(\"target {} ({}) -> {} {}\".format(sample_len, sample_len2, int_, points_))\n","\n","  else:\n","    if target_int_ == int_ and target_pnts_ == pnts_:\n","      # print(sample_len, \"({})\".format(sample_len2), '->', int_, pnts_, end='\\n\\n')\n","      print(\"{} ({}) -> {} {}\\n\".format(sample_len, sample_len2, int_, points_))\n","      break\n","\n","print(time.time() - start_0)  # (1301)(1361)(1301)"]},{"cell_type":"markdown","metadata":{"id":"rrIGjmUzqU-D","tags":[]},"source":["## import utils & config"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"SeJan_0t95yL","executionInfo":{"status":"ok","timestamp":1646475032096,"user_tz":-540,"elapsed":309,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"outputs":[],"source":["frame_ver = \"0114_htf\"\n","ID_arr = np.array(['v3', 'v5_2'])\n","\n","utils_public_name = \"{}.utils.{}_utils_public\".format(strat_pkg, frame_ver)\n","utils_public_lib = importlib.import_module(utils_public_name)\n","utils_public = utils_public_lib   # temporary\n","\n","u_name_list = [\"{}.utils.{}_utils_{}\".format(strat_pkg, frame_ver, id_) for id_ in ID_arr]\n","utils_arr = np.array([importlib.import_module(u_name) for u_name in u_name_list])\n","\n","config_name_list = [\"{}_config_{}.json\".format(frame_ver, id_) for id_ in ID_arr]\n","cfg_path_list = [os.path.join(current_path, strat_pkg, \"config\", name_) for name_ in config_name_list]\n","cfg_file_list = [open(cfg_path) for cfg_path in cfg_path_list]\n","config_arr = np.array([EasyDict(json.load(cfg_)) for cfg_ in cfg_file_list])\n","\n","# ------ opened files should be closed --> 닫지 않으면 reopen 시 error occurs ------ #\n","_ = [cfg_.close() for cfg_ in cfg_file_list]\n","show_plot = 1   # idep's var - do not touch"]},{"cell_type":"markdown","metadata":{"id":"leSQlImg4_9L","jp-MarkdownHeadingCollapsed":true,"tags":[]},"source":["### utils_"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"CB2yZdQ95Cdg","executionInfo":{"status":"ok","timestamp":1646475034120,"user_tz":-540,"elapsed":703,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"outputs":[],"source":["# from funcs.funcs_indicator_candlescore import *\n","# import numpy as np\n","\n","\n","def enlist_rtc(res_df, config, np_timeidx):\n","    strat_version = config.strat_version\n","    \n","    res_df['short_rtc_1_{}'.format(strat_version)] = res_df['bb_lower_%s' % config.loc_set.point.outg_itv1]\n","    res_df['short_rtc_0_{}'.format(strat_version)] = res_df['dc_upper_%s' % config.loc_set.point.outg_itv0]\n","\n","    res_df['long_rtc_1_{}'.format(strat_version)] = res_df['bb_upper_%s' % config.loc_set.point.outg_itv1]\n","    res_df['long_rtc_0_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.point.outg_itv0]\n","\n","    # ------ inversion ------ #\n","    if config.pos_set.short_inversion or config.pos_set.long_inversion:  # Todo - 추후 다른 변수로 변경해야함 (entry_score deprecated)\n","        short_rtc_1_copy = res_df['short_rtc_1_{}'.format(strat_version)].copy()\n","        res_df['short_rtc_1_{}'.format(strat_version)] = res_df['long_rtc_1_{}'.format(strat_version)]\n","        res_df['long_rtc_1_{}'.format(strat_version)] = short_rtc_1_copy\n","\n","        short_rtc_0_copy = res_df['short_rtc_0_{}'.format(strat_version)].copy()\n","        res_df['short_rtc_0_{}'.format(strat_version)] = res_df['long_rtc_0_{}'.format(strat_version)]\n","        res_df['long_rtc_0_{}'.format(strat_version)] = short_rtc_0_copy\n","\n","    res_df['short_rtc_gap_{}'.format(strat_version)] = abs(\n","        res_df['short_rtc_0_{}'.format(strat_version)] - res_df['short_rtc_1_{}'.format(strat_version)])\n","    res_df['long_rtc_gap_{}'.format(strat_version)] = abs(\n","        res_df['long_rtc_1_{}'.format(strat_version)] - res_df['long_rtc_0_{}'.format(strat_version)])\n","\n","    res_df['h_short_rtc_1_{}'.format(strat_version)] = res_df['bb_lower_%s' % config.loc_set.point.tpg_itv1]\n","    # res_df['h_short_rtc_1_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.point.tpg_itv]\n","    res_df['h_short_rtc_0_{}'.format(strat_version)] = res_df['dc_upper_%s' % config.loc_set.point.tpg_itv0]\n","\n","    res_df['h_long_rtc_1_{}'.format(strat_version)] = res_df['bb_upper_%s' % config.loc_set.point.tpg_itv1]\n","    # res_df['h_long_rtc_1_{}'.format(strat_version)] = res_df['dc_upper_%s' % config.loc_set.point.tpg_itv]\n","    res_df['h_long_rtc_0_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.point.tpg_itv0]\n","\n","    # ------ inversion ------ #\n","    if config.pos_set.short_inversion or config.pos_set.long_inversion:\n","        h_short_rtc_1_copy = res_df['h_short_rtc_1_{}'.format(strat_version)].copy()\n","        res_df['h_short_rtc_1_{}'.format(strat_version)] = res_df['h_long_rtc_1_{}'.format(strat_version)]\n","        res_df['h_long_rtc_1_{}'.format(strat_version)] = h_short_rtc_1_copy\n","\n","        h_short_rtc_0_copy = res_df['h_short_rtc_0_{}'.format(strat_version)].copy()\n","        res_df['h_short_rtc_0_{}'.format(strat_version)] = res_df['h_long_rtc_0_{}'.format(strat_version)]\n","        res_df['h_long_rtc_0_{}'.format(strat_version)] = h_short_rtc_0_copy\n","\n","    res_df['h_short_rtc_gap_{}'.format(strat_version)] = abs(\n","        res_df['h_short_rtc_0_{}'.format(strat_version)] - res_df['h_short_rtc_1_{}'.format(strat_version)])\n","    res_df['h_long_rtc_gap_{}'.format(strat_version)] = abs(\n","        res_df['h_long_rtc_1_{}'.format(strat_version)] - res_df['h_long_rtc_0_{}'.format(strat_version)])\n","\n","    res_df['short_dtk_1_{}'.format(strat_version)] = res_df['bb_lower_%s' % config.loc_set.zone.dtk_itv]\n","    res_df['short_dtk_0_{}'.format(strat_version)] = res_df['dc_upper_%s' % config.loc_set.zone.dtk_itv]\n","\n","    res_df['long_dtk_1_{}'.format(strat_version)] = res_df['bb_upper_%s' % config.loc_set.zone.dtk_itv]\n","    res_df['long_dtk_0_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.zone.dtk_itv]\n","\n","    res_df['short_dtk_gap_{}'.format(strat_version)] = abs(\n","        res_df['short_dtk_0_{}'.format(strat_version)] - res_df['short_dtk_1_{}'.format(strat_version)])\n","    res_df['long_dtk_gap_{}'.format(strat_version)] = abs(\n","        res_df['long_dtk_1_{}'.format(strat_version)] - res_df['long_dtk_0_{}'.format(strat_version)])\n","\n","    return res_df\n","\n","\n","def enlist_tr(res_df, config, np_timeidx, mode='OPEN'):\n","    strat_version = config.strat_version\n","    # ---------------- get open_res ---------------- #    \n","    len_df = len(res_df)\n","    short_open_res = np.ones(len_df)\n","    long_open_res = np.ones(len_df)\n","    \n","    data_cols = ['open', 'close', 'haopen', 'hahigh', 'halow', 'haclose']   # Todo - public_indi 이전에 해야할지도 모름\n","    o, c, ha_o, ha_h, ha_l, ha_c = [res_df[col_].to_numpy() for col_ in data_cols]\n","    back_ha_o = res_df['haopen'].shift(1).to_numpy()\n","    back_ha_c = res_df['haclose'].shift(1).to_numpy()\n","\n","    short_open_res *= (back_ha_c >= back_ha_o) & (ha_o > ha_c)\n","    # short_open_res *= ha_o == ha_h\n","    res_df['short_open_{}'.format(strat_version)] = short_open_res\n","\n","    long_open_res *= (back_ha_c <= back_ha_o) & (ha_o < ha_c)          \n","    # long_open_res *= ha_o == ha_l      \n","    res_df['long_open_{}'.format(strat_version)] = long_open_res\n","\n","    # ---------------- set ep level ---------------- #\n","    # -------- limit ver. -------- #\n","    if config.ep_set.entry_type == \"LIMIT\":\n","      res_df['short_ep_{}'.format(strat_version)] = res_df['h_short_rtc_1_{}'.format(strat_version)] + res_df['h_short_rtc_gap_{}'.format(strat_version)] * config.tr_set.ep_gap\n","      res_df['long_ep_{}'.format(strat_version)] = res_df['h_long_rtc_1_{}'.format(strat_version)] - res_df['h_long_rtc_gap_{}'.format(strat_version)] * config.tr_set.ep_gap\n","\n","      # res_df['short_ep_{}'.format(strat_version)] = res_df['close'] + res_df['h_short_rtc_gap_{}'.format(strat_version)] * config.tr_set.ep_gap\n","      # res_df['long_ep_{}'.format(strat_version)] = res_df['close'] - res_df['h_long_rtc_gap_{}'.format(strat_version)] * config.tr_set.ep_gap       \n","\n","    # -------- market ver. -------- #\n","    else:\n","        res_df['short_ep_{}'.format(strat_version)] = res_df['close']\n","        res_df['long_ep_{}'.format(strat_version)] = res_df['close']\n","\n","    # -------- zoned_ep -------- #\n","    if config.tr_set.c_ep_gap != \"None\":\n","        # res_df['short_ep_org_{}'.format(strat_version)] = res_df['short_ep_{}'.format(strat_version)].copy()\n","        # res_df['long_ep_org_{}'.format(strat_version)] = res_df['long_ep_{}'.format(strat_version)].copy()\n","        res_df['short_ep2_{}'.format(strat_version)] = res_df['h_short_rtc_1_{}'.format(strat_version)] + res_df[\n","            'h_short_rtc_gap_{}'.format(strat_version)] * config.tr_set.c_ep_gap\n","        res_df['long_ep2_{}'.format(strat_version)] = res_df['h_long_rtc_1_{}'.format(strat_version)] - res_df[\n","            'h_long_rtc_gap_{}'.format(strat_version)] * config.tr_set.c_ep_gap\n","\n","    # --------------- tp --------------- #\n","    res_df['short_tp_{}'.format(strat_version)] = res_df['h_short_rtc_1_{}'.format(strat_version)] - res_df[\n","        'h_short_rtc_gap_{}'.format(strat_version)] * config.tr_set.tp_gap\n","    res_df['long_tp_{}'.format(strat_version)] = res_df['h_long_rtc_1_{}'.format(strat_version)] + res_df[\n","        'h_long_rtc_gap_{}'.format(strat_version)] * config.tr_set.tp_gap\n","\n","    # --------------- out --------------- #\n","    if config.loc_set.point.outg_dc_period != \"None\":  # out 만 영향 줄려고 tp 까지 해놓고, rtc_0 변경 \n","        res_df['short_rtc_0_{}'.format(strat_version)] = res_df['high'].rolling(config.loc_set.point.outg_dc_period).max()\n","        res_df['long_rtc_0_{}'.format(strat_version)] = res_df['low'].rolling(config.loc_set.point.outg_dc_period).min()\n","\n","    res_df['short_out_{}'.format(strat_version)] = res_df['short_rtc_0_{}'.format(strat_version)] + res_df[\n","        'short_rtc_gap_{}'.format(strat_version)] * config.tr_set.out_gap\n","    res_df['long_out_{}'.format(strat_version)] = res_df['long_rtc_0_{}'.format(strat_version)] - res_df[\n","        'long_rtc_gap_{}'.format(strat_version)] * config.tr_set.out_gap\n","\n","    # -------- zoned_out -------- #\n","    if config.tr_set.t_out_gap != \"None\":\n","        # res_df['short_out_org_{}'.format(strat_version)] = res_df['short_out_{}'.format(strat_version)].copy()\n","        # res_df['long_out_org_{}'.format(strat_version)] = res_df['long_out_{}'.format(strat_version)].copy()\n","        res_df['short_out2_{}'.format(strat_version)] = res_df['short_rtc_0_{}'.format(strat_version)] + res_df[\n","            'short_rtc_gap_{}'.format(strat_version)] * config.tr_set.t_out_gap\n","        res_df['long_out2_{}'.format(strat_version)] = res_df['long_rtc_0_{}'.format(strat_version)] - res_df[\n","            'long_rtc_gap_{}'.format(strat_version)] * config.tr_set.t_out_gap\n","\n","        \n","    return res_df\n"]},{"cell_type":"markdown","metadata":{"id":"HKdUKKl-483N","jp-MarkdownHeadingCollapsed":true,"tags":[]},"source":["### utils_public"]},{"cell_type":"code","execution_count":43,"metadata":{"id":"nzOYWA2kqZ0d","executionInfo":{"status":"ok","timestamp":1646477800873,"user_tz":-540,"elapsed":3075,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"outputs":[],"source":["# from funcs.funcs_indicator import *\n","# from funcs.funcs_trader import *\n","# import logging\n","# from ast import literal_eval\n","\n","sys_log = logging.getLogger()\n","\n","\n","class OrderSide:\n","    BUY = \"BUY\"\n","    SELL = \"SELL\"\n","    INVALID = None\n","\n","\n","def lvrg_set(res_df, config, open_side, ep_, out_, fee, limit_leverage=50):\n","    strat_version = config.strat_version\n","    if not pd.isnull(out_) and not config.lvrg_set.static_lvrg:\n","        if open_side == OrderSide.SELL:\n","            if strat_version in ['v3']:\n","                # config.lvrg_set.leverage = config.lvrg_set.target_pct / (out_ / ep_ - 1 - (fee + config.trader_set.market_fee))\n","                config.lvrg_set.leverage = config.lvrg_set.target_pct / (\n","                        out_ / ep_ - 1 - (fee + config.trader_set.market_fee))\n","                #     zone 에 따른 c_ep_gap 를 고려 (loss 완화 방향) / 윗 줄은 수익 극대화 방향\n","                # config.lvrg_set.leverage = config.lvrg_set.target_pct / (out_ / res_df['short_ep_org'].iloc[ep_j] - 1 - (fee + config.trader_set.market_fee))\n","            elif strat_version in ['v5_2', 'v7_3']:\n","                # config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(ep_ / out_ - 1 - (fee + config.trader_set.market_fee))\n","                config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(\n","                    ep_ / out_ - 1 - (fee + config.trader_set.market_fee))\n","                # config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(res_df['short_ep_org'].iloc[ep_j] / out_ - 1 - (fee + config.trader_set.market_fee))\n","        else:\n","            #   윗 phase 는 min_pr 의 오차가 커짐\n","            if strat_version in ['v3']:\n","                # config.lvrg_set.leverage = config.lvrg_set.target_pct / (ep_ / out_ - 1 - (fee + config.trader_set.market_fee))\n","                config.lvrg_set.leverage = config.lvrg_set.target_pct / (\n","                        ep_ / out_ - 1 - (fee + config.trader_set.market_fee))\n","                # config.lvrg_set.leverage = config.lvrg_set.target_pct / (res_df['long_ep_org'].iloc[ep_j] / out_ - 1 - (fee + config.trader_set.market_fee))\n","            elif strat_version in ['v5_2', 'v7_3']:\n","                # config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(out_ / ep_ - 1 - (fee + config.trader_set.market_fee))\n","                config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(\n","                    out_ / ep_ - 1 - (fee + config.trader_set.market_fee))\n","                # config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(out_ / res_df['long_ep_org'].iloc[ep_j] - 1 - (fee + config.trader_set.market_fee))\n","\n","    if not config.lvrg_set.allow_float:\n","        config.lvrg_set.leverage = int(config.lvrg_set.leverage)\n","\n","    # ------------ leverage rejection ------------ #\n","    #       Todo - return None ? -> 1 (일단 임시로 수정함)\n","    if config.lvrg_set.leverage < 1 and config.lvrg_set.lvrg_rejection:\n","        return 1\n","    config.lvrg_set.leverage = min(limit_leverage, max(config.lvrg_set.leverage, 1))\n","\n","    return config.lvrg_set.leverage\n","\n","\n","def sync_check(df_, config, order_side=\"OPEN\", row_slice=True):\n","    try:\n","        make_itv_list = [m_itv.replace('m', 'T') for m_itv in literal_eval(config.trader_set.itv_list)]\n","        row_list = literal_eval(config.trader_set.row_list)\n","        rec_row_list = literal_eval(config.trader_set.rec_row_list)\n","        offset_list = literal_eval(config.trader_set.offset_list)\n","\n","        assert len(make_itv_list) == len(offset_list), \"length of itv & offset_list should be equal\"\n","        htf_df_list = [to_htf(df_, itv_=itv_, offset=offset_) for itv_idx, (itv_, offset_)\n","                       in enumerate(zip(make_itv_list, offset_list)) if itv_idx != 0]  #\n","        htf_df_list.insert(0, df_)\n","\n","        # for htf_df_ in htf_df_list:\n","        #     print(htf_df_.tail())\n","\n","        #       Todo        #\n","        #        1. row_list calc.\n","        #           a. indi. 를 만들기 위한 최소 period 가 존재하고, 그 indi. 를 사용한 lb_period 가 존재함\n","        #           b. => default_period + lb_period\n","        #               i. from sync_check, public_indi, ep_point2, ep_dur 의 tf 별 max lb_period check\n","        #                   1. default_period + max lb_period check\n","        #                       a. 현재까지 lb_period_list\n","        #                           h_prev_idx (open / close) 60\n","        #                           dc_period 135\n","        #                           zone_dc_period 135\n","\n","        # --------- slicing (in trader phase only) --------- #\n","        #               --> latency 영향도가 높은 곳은 이곳\n","        if row_slice:   # recursive 가 아닌 indi. 의 latency 를 고려한 slicing\n","            df, df_5T, df_15T, df_30T, df_4H = [df_s.iloc[-row_list[row_idx]:].copy() for row_idx, df_s in enumerate(htf_df_list)]\n","            rec_df, rec_df_5T, rec_df_15T, rec_df_30T, rec_df_4H = [df_s.iloc[-rec_row_list[row_idx]:].copy() for row_idx, df_s in enumerate(htf_df_list)]\n","        else:\n","            df, df_5T, df_15T, df_30T, df_4H = htf_df_list\n","            rec_df, rec_df_5T, rec_df_15T, rec_df_30T, rec_df_4H = htf_df_list\n","\n","        # --------- add indi. --------- #\n","\n","        #        1. 필요한 indi. 는 enlist_epouttp & mr_check 보면서 삽입\n","        #        2. min use_rows 계산을 위해서, tf 별로 gathering 함        #\n","        start_0 = time.time()\n","\n","        df = dc_line(df, None, '1m', dc_period=20)\n","        df = bb_line(df, None, '1m')\n","        # print(df.tail())\n","\n","        df = dc_line(df, df_5T, '5m')\n","        df = bb_line(df, df_5T, '5m')\n","\n","        df = dc_line(df, df_15T, '15m')\n","        df = bb_line(df, df_15T, '15m')\n","\n","        df = bb_line(df, df_30T, '30m')\n","\n","        # print(time.time() - start_0)\n","\n","        # start_0 = time.time()\n","        df = bb_line(df, df_4H, '4h')\n","        # print(time.time() - start_0)\n","\n","        rec_df['rsi_1m'] = rsi(rec_df, 14)  # Todo - recursive, 250 period\n","        df = df.join(to_lower_tf_v2(df, rec_df.iloc[:, [-1]], [-1], backing_i=0), how='inner')  # <-- join same_tf manual\n","        # print(df.rsi_1m.tail())\n","\n","        if order_side in [\"OPEN\"]:\n","            rec_df_5T['ema_5m'] = ema(rec_df_5T['close'], 195)  # Todo - recursive, 1100 period (5T)\n","            df = df.join(to_lower_tf_v2(df, rec_df_5T, [-1]), how='inner')\n","\n","    except Exception as e:\n","        sys_log.error(\"error in sync_check :\", e)\n","    else:\n","        return df\n","\n","\n","def public_indi(res_df, config, np_timeidx, order_side=\"OPEN\"):\n","\n","    strat_version = config.strat_version\n","    res_df = dc_level(res_df, '5m', 1)\n","    res_df = bb_level(res_df, '5m', 1)\n","    # res_df = st_level(res_df, '5m', 1)\n","\n","    res_df = dc_level(res_df, '15m', 1)\n","    res_df = bb_level(res_df, '15m', 1)\n","    res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line, np_timeidx=np_timeidx)\n","\n","    # res_df = st_level(res_df, '15m', 1)\n","\n","    # res_df = dc_level(res_df, '30m', 1)\n","    # res_df = bb_level(res_df, '30m', 1)\n","    # res_df = st_level(res_df, '30m', 1)\n","\n","    # res_df = bb_level(res_df, '1h', 1)\n","\n","    res_df = bb_level(res_df, '4h', 1)\n","\n","    res_df['dc_upper_v2'.format(strat_version)] = res_df['high'].rolling(config.loc_set.zone.dc_period).max()\n","    res_df['dc_lower_v2'.format(strat_version)] = res_df['low'].rolling(config.loc_set.zone.dc_period).min()\n","\n","    res_df['zone_dc_upper_v2'.format(strat_version)] = res_df['high'].rolling(config.loc_set.zone.zone_dc_period).max()\n","    res_df['zone_dc_lower_v2'.format(strat_version)] = res_df['low'].rolling(config.loc_set.zone.zone_dc_period).min()\n","\n","    if order_side in [\"OPEN\"]:\n","        start_0 = time.time()\n","\n","        res_df[\"wick_score\"], res_df['body_score'] = candle_score(res_df, unsigned=False)\n","\n","        # print(\"~ wick_score() elapsed time : {}\".format(time.time() - start_0))\n","\n","        start_0 = time.time()\n","\n","        res_df = h_candle_v2(res_df, '15T')\n","        res_df = h_candle_v2(res_df, 'H')\n","\n","        # sys_log.warning(\"~ h_wick_score elapsed time : {}\".format(time.time() - start_0))\n","        # print(\"wick_score() ~ h_candle() elapsed time : {}\".format(time.time() - start_0))\n","\n","        hc_itv = 'H'\n","        h_candle_col = ['hopen_{}'.format(hc_itv), 'hhigh_{}'.format(hc_itv), 'hlow_{}'.format(hc_itv),\n","                        'hclose_{}'.format(hc_itv)]\n","\n","        res_df['h_wick_score'], res_df['h_body_score'] = candle_score(res_df, ohlc_col=h_candle_col, unsigned=False)\n","\n","    #     temp indi.    #\n","    # res_df[\"ma30_1m\"] = res_df['close'].rolling(30).mean()\n","    # res_df[\"ma60_1m\"] = res_df['close'].rolling(60).mean()\n","    # res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line, np_timeidx=np_timeidx)\n","\n","    return res_df\n","\n","\n","def ep_loc_point2(res_df, config, i, out_j, side=OrderSide.SELL):\n","  allow_ep_in = 0\n","  if config.strat_version in ['v5_2']:\n","    if side == OrderSide.SELL:            \n","      if (res_df['dc_upper_1m'].iloc[i - 1] <= res_df['dc_upper_15m'].iloc[i]) & \\\n","              (res_df['dc_upper_15m'].iloc[i - 1] != res_df['dc_upper_15m'].iloc[i]):\n","        allow_ep_in = 1\n","    else:\n","      if (res_df['dc_lower_1m'].iloc[i - 1] >= res_df['dc_lower_15m'].iloc[i]) & \\\n","              (res_df['dc_lower_15m'].iloc[i - 1] != res_df['dc_lower_15m'].iloc[i]):\n","        allow_ep_in = 1\n","\n","  if allow_ep_in:\n","    out_j = i\n","  return allow_ep_in, out_j\n","\n","\n","# vectorized calc.\n","def ep_loc_v2(res_df, config, np_timeidx, show_detail=True, ep_loc_side=OrderSide.SELL):\n","    strat_version = config.strat_version\n","\n","    # ------- param init ------- #\n","    open_side = None\n","    len_df = len(res_df)\n","    mr_res = np.ones(len_df)\n","    zone_arr = np.full(len_df, 'n')\n","\n","    # ------ process 한번에 처리해서 param_check 만 ver. 별로 하면 될 것 ------ #\n","    #     => public_indi() 가 될 것\n","    #     1. 사용한 param 정보와 matching 된 data 병렬로 나열 logging 될 것\n","    #     2. binarize 할 것 => short 와 long 은 같은 조건식 사용할 수 있게됨 - 보류 (생각보다 상반된 조건식이 많음)\n","    #       a. 조건식이 다른 경우는 ?\n","    tp_fee, out_fee = calc_tp_out_fee(config)\n","\n","    # -------------- candle_score -------------- #\n","    if config.loc_set.point.wick_score != \"None\":\n","      # -------------- candle_score_v0 (1m initial tick 기준임)  -------------- #\n","      if strat_version in ['v5_2', '1_1']:\n","        wick_score = res_df['wick_score'].to_numpy()\n","        if ep_loc_side == OrderSide.SELL:\n","          mr_res *= wick_score <= -config.loc_set.point.wick_score\n","        else:\n","          mr_res *= wick_score >= config.loc_set.point.wick_score\n","\n","    # -------------- spread scheduling -------------- #\n","    if config.loc_set.zone.short_spread != \"None\":\n","      bb_base_5m = res_df['bb_base_5m'].to_numpy()  # to_numpy() 는 ep_loc 에서 진행됨\n","      bb_lower_5m = res_df['bb_lower_5m'].to_numpy()\n","      bb_upper_5m = res_df['bb_upper_5m'].to_numpy()\n","      dc_lower_5m = res_df['dc_lower_5m'].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= (bb_base_5m - bb_lower_5m - tp_fee * bb_base_5m) / (bb_base_5m - bb_lower_5m + out_fee * bb_base_5m) >= config.loc_set.zone.short_spread\n","      else:\n","        # mr_res *= (bb_base_5m - dc_lower_5m - tp_fee * bb_upper_5m) / (bb_base_5m - dc_lower_5m + out_fee * bb_base_5m) >= config.loc_set.zone.long_spread\n","        mr_res *= (bb_upper_5m - dc_lower_5m - tp_fee * bb_upper_5m) / (bb_upper_5m - dc_lower_5m + out_fee * bb_upper_5m) >= config.loc_set.zone.long_spread\n","\n","    # -------------- dtk -------------- #\n","    if config.loc_set.zone.dt_k != \"None\":\n","      # ------ dc_v2 ------ #\n","      dc_lower_v2 = res_df['dc_lower_v2'.format(strat_version)].to_numpy()\n","      short_dtk_1_ = res_df['short_dtk_1_{}'.format(strat_version)].to_numpy() - \\\n","              res_df['short_dtk_gap_{}'.format(strat_version)].to_numpy() * config.loc_set.zone.dt_k\n","      dc_upper_v2 = res_df['dc_upper_v2'.format(strat_version)].to_numpy()\n","      long_dtk_1_ = res_df['long_dtk_1_{}'.format(strat_version)].to_numpy() + \\\n","              res_df['long_dtk_gap_{}'.format(strat_version)].to_numpy() * config.loc_set.zone.dt_k\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= dc_lower_v2 >= short_dtk_1_\n","      else:\n","        mr_res *= dc_upper_v2 <= long_dtk_1_\n","\n","    # ------------ zone rejection  ------------ #\n","    # config 로 통제할 수 없는 rejection 은 strat_version 으로 조건문을 나눔 (lvrg_set 과 동일)\n","    if config.loc_set.zone.zone_rejection:        \n","        # ------ envel. ------ #\n","        # ep_loc check 기준 idx 가 entry 기준이라는 걸 명심\n","        if strat_version in ['v3_2']:\n","          hc_itv = '15T'\n","          dc_itv = '15m'\n","          shift_num = [0, to_itvnum(hc_itv)]\n","          div_res = [1, 0]\n","          for itv_num, res in zip(shift_num, div_res):\n","            hclose_H = res_df['hclose_{}'.format(hc_itv)].shift(itv_num).to_numpy()  # close_bar timein 사용하는 경우, 특수로 shift(0) 사용가능\n","            if ep_loc_side == OrderSide.SELL:\n","              dc_lower_ = res_df['dc_lower_%s' % dc_itv].shift(itv_num).to_numpy()\n","              mr_res *= (hclose_H < dc_lower_) == res\n","            else:\n","              dc_upper_ = res_df['dc_upper_%s' % dc_itv].shift(itv_num).to_numpy()\n","              mr_res *= (hclose_H > dc_upper_) == res\n","\n","        if strat_version in ['v3_3']:\n","          hc_itv = '15T'\n","          dc_itv = '15m'\n","          itv_num = to_itvnum(hc_itv)\n","          hclose_H = res_df['hclose_{}'.format(hc_itv)].shift(itv_num).to_numpy()   # 따라서 future_data 사용시, shifting 필요함\n","          if ep_loc_side == OrderSide.SELL:\n","            dc_lower_ = res_df['dc_lower_%s' % dc_itv].shift(itv_num).to_numpy()\n","            mr_res *= hclose_H < dc_lower_\n","          else:\n","            dc_upper_ = res_df['dc_upper_%s' % dc_itv].shift(itv_num).to_numpy()\n","            mr_res *= hclose_H > dc_upper_\n","\n","        # ------ degree ------ #\n","        if strat_version in ['v3_3']:\n","          norm_close_15 = res_df['norm_close_15'].to_numpy()\n","          b1_norm_close_15 = res_df['norm_close_15'].shift(15).to_numpy()\n","          if ep_loc_side == OrderSide.SELL:\n","            mr_res *= norm_close_15 <= -config.loc_set.zone.degree_list[0]\n","            # mr_res *= b1_norm_close_15 <= -config.loc_set.zone.degree_list[1]\n","          else:\n","            mr_res *= norm_close_15 >= config.loc_set.zone.degree_list[0]\n","            # mr_res *= b1_norm_close_15 >= config.loc_set.zone.degree_list[1]\n","\n","        # ------ bb ------ #\n","        close = res_df['close'].to_numpy()\n","\n","        # if strat_version in ['v3_3']:\n","        #   open = res_df['open'].to_numpy()\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     bb_lower_1m = res_df['bb_lower_1m'].to_numpy()\n","        #     # mr_res *= close <= bb_lower_1m\n","        #     mr_res *= open <= bb_lower_1m\n","        #   else:\n","        #     bb_upper_1m = res_df['bb_upper_1m'].to_numpy()\n","        #     # mr_res *= close >= bb_upper_1m\n","        #     mr_res *= open >= bb_upper_1m\n","\n","        if strat_version in ['v5_2']:\n","          bb_upper2_ = res_df['bb_upper2_%s' % config.loc_set.zone.bbz_itv].to_numpy()\n","          bb_lower2_ = res_df['bb_lower2_%s' % config.loc_set.zone.bbz_itv].to_numpy()\n","          if ep_loc_side == OrderSide.SELL:\n","            mr_res *= bb_upper2_ < close\n","          else:\n","            mr_res *= bb_lower2_ > close\n","\n","        # ------ dc ------ #        \n","        # if strat_version in ['v3_3']:\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     dc_lower_ = res_df['dc_lower_1m'].to_numpy()\n","        #     b1_dc_lower_ = res_df['dc_lower_1m'].shift(1).to_numpy()\n","        #     mr_res *= dc_lower_ < b1_dc_lower_\n","        #   else:\n","        #     dc_upper_ = res_df['dc_upper_1m'].to_numpy()\n","        #     b1_dc_upper_ = res_df['dc_upper_1m'].shift(1).to_numpy()\n","        #     mr_res *= dc_upper_ > b1_dc_upper_\n","\n","        # ------ sar ------ #\n","        # if strat_version in ['v3_3']:\n","          # sar_uptrend_3T = res_df['sar_uptrend_3T'].to_numpy()\n","          # if ep_loc_side == OrderSide.SELL:\n","          #   mr_res *= sar_uptrend_3T == 0\n","          # else:\n","          #   mr_res *= sar_uptrend_3T == 1\n","\n","        # ------ ema ------ #\n","        if strat_version in ['v5_2']: # 'v3'\n","          ema_5m = res_df['ema_5m'].to_numpy()\n","          if ep_loc_side == OrderSide.SELL:\n","            mr_res *= close < ema_5m\n","          else:\n","            mr_res *= close > ema_5m\n","\n","    # -------------- zoned tr_set - post_work -------------- #\n","    if config.tr_set.c_ep_gap != \"None\" or config.tr_set.t_out_gap != \"None\":\n","        #       by zone_dtk       #\n","        #         c_zone        #\n","        zone_dc_upper_v2_ = res_df['zone_dc_upper_v2'.format(strat_version)].to_numpy()\n","        long_dtk_plot_1 = res_df['long_dtk_plot_1'].to_numpy() + res_df['long_dtk_plot_gap'].to_numpy() * config.loc_set.zone.zone_dt_k\n","        zone_dc_lower_v2_ = res_df['zone_dc_lower_v2'.format(strat_version)].to_numpy()\n","        short_dtk_plot_1 = res_df['short_dtk_plot_1'].to_numpy() - res_df['short_dtk_plot_gap'].to_numpy() * config.loc_set.zone.zone_dt_k\n","        if ep_loc_side == OrderSide.SELL:\n","          zone_res = zone_dc_upper_v2_ > long_dtk_plot_1  # mr_res 와는 별개임\n","          pos = 'short'\n","        else:\n","          zone_res = zone_dc_lower_v2_ < short_dtk_plot_1\n","          pos = 'long'\n","\n","        # static 여부에 따른 vectorized adj. - dynamic 은 vectorize 불가\n","        if config.ep_set.static_ep and config.tr_set.c_ep_gap != \"None\":\n","          res_df['{}_ep_{}'.format(pos, strat_version)][zone_res] = res_df['{}_ep2_{}'.format(pos, strat_version)][zone_res]\n","        if config.out_set.static_out and config.tr_set.t_out_gap != \"None\":\n","          res_df['{}_out_{}'.format(pos, strat_version)][~zone_res] = res_df['{}_out2_{}'.format(pos, strat_version)][~zone_res]  # t_zone 에 대한 out2 setting \n","        zone_arr = np.where(zone_res == 1, 'c', 't')\n","\n","    return mr_res, zone_arr  # mr_res 의 True idx 가 open signal"]},{"cell_type":"markdown","metadata":{"id":"JjKHyqftzhD7","tags":[]},"source":["### set config (override available)"]},{"cell_type":"code","execution_count":44,"metadata":{"id":"q_4E-zH02WJy","executionInfo":{"status":"ok","timestamp":1646477824218,"user_tz":-540,"elapsed":330,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"outputs":[],"source":["#     caution : MARKET / LIMIT spelling   #\n","#      json doesn't support single quotes     #\n","\n","param_dict = \\\n","{\n","  \"strat_version\": \"v3_3\",\n","  \"trader_set\": {\n","    \"run\": 1,\n","    \"df_log\": 0,\n","    \"open_index\": -1,\n","    \"complete_index\": -2,\n","    \"limit_fee\": 0.0002,\n","    \"market_fee\": 0.0004,\n","    \"initial_asset\": 3500,\n","    \"asset_changed\": 0,\n","    \"symbol\": \"ETHUSDT\",\n","    \"symbol_changed\": 0,\n","    \"itv_list\": \"['1m', '5m', '15m', '30m', '4h']\",\n","    \"row_list\": \"[200, 160, 30, 25, 25]\",\n","    \"rec_row_list\": \"[250, 1100, 1, 1, 1]\",\n","    \"offset_list\": \"['1h', '1h', '1h', '1h', '1h']\",\n","    \"rsi_out_stratver\": [\n","      \"v7_3\",\n","      \"1_1\"\n","    ],\n","    \"bar_close_second\": 59,\n","    \"realtime_term\": 0.01,\n","    \"api_retry_term\": 3,\n","    \"check_entry_sec\": 10,\n","    \"entry_execution_wait\": 60,\n","    \"breakout_qty_ratio\": 0.97,\n","    \"qty_check_term\": 30,\n","    \"exit_execution_wait\": 60,\n","    \"close_complete_term\": 5,\n","    \"save_stacked_df\": 0,\n","    \"stacked_df_exist\": 1\n","  },\n","  \"pos_set\": {\n","    \"short_inversion\": 0,\n","    \"long_inversion\": 0,\n","    \"short_ban\": 1,\n","    \"long_ban\": 0\n","  },\n","  \"loc_set\": {\n","    \"zone\": {\n","      \"short_spread\": \"None\",\n","      \"long_spread\": \"None\",\n","      \"tr_thresh\": \"None\",\n","      \"dtk_itv\": \"5m\",\n","      \"dt_k\": \"None\",\n","      \"dc_period\": 135,\n","      \"ei_k\": 0.36,\n","      \"use_dtk_line\": 0,\n","      \"zone_rejection\": 1,\n","      \"degree_list\": [40, 0],\n","      \"gap_mply\": 1,\n","      \"hc_itv\": 60,\n","      \"bbz_itv\": \"None\",\n","      \"zone_dt_k\": 0.4,\n","      \"zone_dc_period\": 135\n","    },\n","    \"point\": {\n","      \"exp_itv\": \"5m\",\n","      \"tpg_itv1\": \"5m\",\n","      \"tpg_itv0\": \"5m\",\n","      \"outg_itv1\": \"5m\",\n","      \"outg_itv0\": \"1m\",\n","      \"outg_dc_period\": \"None\",\n","      \"tf_entry\": 15,\n","      \"wick_score\": \"None\",\n","      \"body_score\": \"None\",\n","      \"wick_score2\": \"None\",\n","      \"body_score2\": \"None\",\n","      \"osc_band\": 20\n","    },\n","    \"point2\": {\n","      \"ce_gap\": 0.5\n","    }\n","  },\n","  \"tr_set\": {\n","    \"ep_gap\": 0.083,\n","    \"tp_gap\": 0.36,\n","    \"decay_gap\": \"None\",\n","    \"out_gap\": -0.5,\n","    \"c_ep_gap\": 0.232,\n","    \"t_out_gap\": \"None\"\n","  },\n","  \"ep_set\": {\n","    \"entry_type\": \"MARKET\",\n","    \"static_ep\": 1,\n","    \"tpout_onexec\": 0\n","  },\n","  \"tp_set\": {\n","    \"non_tp\": 0,\n","    \"tp_type\": \"MARKET\",\n","    \"static_tp\": 1,\n","    \"decay_term\": 60,\n","    \"time_tp\": 1,\n","    \"partial_num\": 1,\n","    \"partial_qty_divider\": 1.5\n","  },\n","  \"out_set\": {\n","    \"out_type\": \"MARKET\",\n","    \"use_out\": 0,\n","    \"static_out\": 1,\n","    \"hl_out\": 1,\n","    \"price_restoration\": 0,\n","    \"retouch\": 0,\n","    \"retouch_out_period\": 500,\n","    \"second_out\": 0,\n","    \"approval_st_gap\": 1.5,\n","    \"second_out_gap\": 0.5\n","  },\n","  \"lvrg_set\": {\n","    \"leverage\": 2,\n","    \"static_lvrg\": 1,\n","    \"allow_float\": 0,\n","    \"target_pct\": 0.12,\n","    \"lvrg_rejection\": 0\n","  }\n","}\n","\n","config = EasyDict(param_dict)\n","# param_json = json.dumps(param_dict, indent=2)"]},{"cell_type":"markdown","metadata":{"id":"dzla8i9_ysmP","jp-MarkdownHeadingCollapsed":true,"tags":[]},"source":["#### save config"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":544,"status":"ok","timestamp":1639994748940,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"FlNGKvW_w2za","outputId":"c575ce69-def0-4e6c-c949-a63707467b2e"},"outputs":[{"name":"stdout","output_type":"stream","text":["/content/drive/My Drive/Colab Notebooks/JnQ/config/config_v5_2.1220_candlejson dumped !\n"]}],"source":["config_name = \"config_v5_2.1220_candlejson\"\n","# config_name = \"config_v3.json\"\n","cfg_full_path = os.path.join(current_path, \"config\", config_name)\n","\n","\n","with open(cfg_full_path, 'w') as cfg:\n","    json.dump(config1, cfg, indent=2)\n","    print(\"{} dumped !\".format(cfg_full_path))"]},{"cell_type":"markdown","metadata":{"id":"rLI8unIyroiC","tags":[]},"source":["## run"]},{"cell_type":"code","source":["id_idx_list = [0]  # ID_arr 에서 import 할 id_idx 선택\n","public_override = 1\n","utils_override = 1\n","config_override = 1\n","\n","# ------ config_list 와 같은 org_var 에 override 하는거 다시 생각하기 ------ #\n","ID_list = ID_arr[id_idx_list]\n","utils_list = utils_arr[id_idx_list]\n","config_list = config_arr[id_idx_list]\n","\n","if config_override or utils_override:\n","  assert len(config_list) == 1\n","  if config_override:\n","    config_list[0] = config\n","    ID_list[0] = config.strat_version\n","  \n","config = config_list[0]  # base config = config_list[0]\n","tp_fee, out_fee = calc_tp_out_fee(config)   # -> rev_pr 때문에 일단 이곳에도 선언함\n","\n","# ------- inversion set ------- #\n","inversion = 0\n","fdist_thresh = 1\n","# ------- plot param ------- #\n","show_detail = 0\n","# ------- temp param ------- #\n","allow_osc_touch = 0\n","rsi_gap = 5\n","early_out_tpg = 0.36\n","\n","# ['strat_version', 'pos_set', 'loc_set', 'tr_set', 'ep_set', 'tp_set', 'out_set', 'lvrg_set']\n","_ = [print(json.dumps(config[key_], indent=1), end=' ') for key_ in ['strat_version', 'loc_set', 'tr_set', 'ep_set', 'tp_set', 'out_set', 'lvrg_set']]"],"metadata":{"id":"qBJfPsmJzVIr","executionInfo":{"status":"ok","timestamp":1646477826885,"user_tz":-540,"elapsed":4,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"15ffcf77-5993-4a5b-c28c-35d6f2a9611f"},"execution_count":45,"outputs":[{"output_type":"stream","name":"stdout","text":["\"v3_3\" {\n"," \"zone\": {\n","  \"short_spread\": \"None\",\n","  \"long_spread\": \"None\",\n","  \"tr_thresh\": \"None\",\n","  \"dtk_itv\": \"5m\",\n","  \"dt_k\": \"None\",\n","  \"dc_period\": 135,\n","  \"ei_k\": 0.36,\n","  \"use_dtk_line\": 0,\n","  \"zone_rejection\": 1,\n","  \"degree_list\": [\n","   40,\n","   0\n","  ],\n","  \"gap_mply\": 1,\n","  \"hc_itv\": 60,\n","  \"bbz_itv\": \"None\",\n","  \"zone_dt_k\": 0.4,\n","  \"zone_dc_period\": 135\n"," },\n"," \"point\": {\n","  \"exp_itv\": \"5m\",\n","  \"tpg_itv1\": \"5m\",\n","  \"tpg_itv0\": \"5m\",\n","  \"outg_itv1\": \"5m\",\n","  \"outg_itv0\": \"1m\",\n","  \"outg_dc_period\": \"None\",\n","  \"tf_entry\": 15,\n","  \"wick_score\": \"None\",\n","  \"body_score\": \"None\",\n","  \"wick_score2\": \"None\",\n","  \"body_score2\": \"None\",\n","  \"osc_band\": 20\n"," },\n"," \"point2\": {\n","  \"ce_gap\": 0.5\n"," }\n","} {\n"," \"ep_gap\": 0.083,\n"," \"tp_gap\": 0.36,\n"," \"decay_gap\": \"None\",\n"," \"out_gap\": -0.5,\n"," \"c_ep_gap\": 0.232,\n"," \"t_out_gap\": \"None\"\n","} {\n"," \"entry_type\": \"MARKET\",\n"," \"static_ep\": 1,\n"," \"tpout_onexec\": 0\n","} {\n"," \"non_tp\": 0,\n"," \"tp_type\": \"MARKET\",\n"," \"static_tp\": 1,\n"," \"decay_term\": 60,\n"," \"time_tp\": 1,\n"," \"partial_num\": 1,\n"," \"partial_qty_divider\": 1.5\n","} {\n"," \"out_type\": \"MARKET\",\n"," \"use_out\": 0,\n"," \"static_out\": 1,\n"," \"hl_out\": 1,\n"," \"price_restoration\": 0,\n"," \"retouch\": 0,\n"," \"retouch_out_period\": 500,\n"," \"second_out\": 0,\n"," \"approval_st_gap\": 1.5,\n"," \"second_out_gap\": 0.5\n","} {\n"," \"leverage\": 2,\n"," \"static_lvrg\": 1,\n"," \"allow_float\": 0,\n"," \"target_pct\": 0.12,\n"," \"lvrg_rejection\": 0\n","} "]}]},{"cell_type":"code","source":["# ------ slicing res_df ------ #\n","res_df = res_df_.loc[pd.to_datetime(\"2020-09-05 00:00:59.999\"):] # pd.to_datetime(\"2022-01-10 00:00:59.999\"), pd.to_datetime(\"2021-10-04 02:39:59.999000\")\n","\n","np_timeidx = np.array([intmin_np(date_) for date_ in res_df.index.to_numpy()])\n","\n","funcs = [ep_loc_point2, lvrg_set]\n","# ------------ make data_list ------------ # - 반복될 이유가 없는 phase\n","ohlc_cols = ['open', 'high', 'low', 'close']\n","ohlc_list = [res_df[col_].to_numpy() for col_ in ohlc_cols]\n","market_data_cols = ['close', 'bb_lower_5m', 'bb_upper_5m', 'rsi_1m', 'haopen', 'hahigh', 'halow', 'haclose']   # Todo - public_indi 이전에 해야할지도 모름\n","market_data_list = [res_df[col_].to_numpy() for col_ in market_data_cols]\n","\n","# ------------ public_indi ------------ # - 반복될 이유가 없는 phase\n","start_0 = time.time()\n","if public_override:\n","    res_df = public_indi(res_df, config, np_timeidx)  # 현재 대부분의 시간은 h_candle 에서 소비되고 있음\n","else:\n","    res_df = utils_public.public_indi(res_df, config, np_timeidx)\n","print(\"public_indi elapsed time :\", time.time() - start_0)\n","\n","# ------------ entlist rtc & tr 은 중복되는 여부에 따라 user 가 flexible coding 해야할 것 ------------ #\n","if utils_override:   # 현재, utils_override 하는 경우 1개의 ID 만 허용함 \n","  start_0 = time.time()\n","  res_df = enlist_rtc(res_df, config, np_timeidx)\n","  print(\"enlist_rtc elapsed time :\", time.time() - start_0)\n","  start_0 = time.time()\n","  res_df = enlist_tr(res_df, config, np_timeidx)    \n","  print(\"enlist_tr elapsed time :\", time.time() - start_0)\n","else:\n","    start_0 = time.time()\n","    for utils_, config_ in zip(utils_list, config_list):\n","        res_df = utils_.enlist_rtc(res_df, config_, np_timeidx)\n","        res_df = utils_.enlist_tr(res_df, config_, np_timeidx)\n","    print(\"elapsed time :\", time.time() - start_0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WstWVNihCNH8","executionInfo":{"status":"ok","timestamp":1646475049221,"user_tz":-540,"elapsed":3389,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"4d9f27aa-1f56-47ba-e085-11464002da00"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["public_indi elapsed time : 1.8650166988372803\n","enlist_rtc elapsed time : 0.06110548973083496\n","enlist_tr elapsed time : 0.05869293212890625\n"]}]},{"cell_type":"markdown","source":["### idep_plot"],"metadata":{"id":"RqRF1eyZ0xBL"}},{"cell_type":"code","source":["open_info_df = get_open_info_df(ep_loc_v2, res_df, np_timeidx, ID_list, config_list, id_idx_list)\n","short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr = \\\n","get_res(res_df, open_info_df, ohlc_list, market_data_list, config_list, np_timeidx, funcs, test_ratio=0.3, plot_is=0, signi=False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":571},"id":"HHq6cr9GPBot","executionInfo":{"status":"ok","timestamp":1646477855568,"user_tz":-540,"elapsed":5672,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"73ad3338-684f-46d3-fdf8-d142666c851e"},"execution_count":47,"outputs":[{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 2.189755439758301\n","en_ex_pairing elapsed time : 0.04319596290588379\n","short_obj.shape : (109, 5)\n","long_obj.shape : (89, 5)\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1728x576 with 6 Axes>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"jp-MarkdownHeadingCollapsed":true,"tags":[],"id":"Ksth13T0spcQ"},"source":["### significance_v2"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pZlZCr2lspcR","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1646403826141,"user_tz":-540,"elapsed":13877,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"176fe69a-d121-453e-fee3-d0c8e49a48d4"},"outputs":[{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9030976295471191\n","en_ex_pairing elapsed time : 0.09671401977539062\n","short_obj.shape : (1276, 5)\n","long_obj.shape : (1723, 5)\n","get_open_info_df elapsed time : 0.9119112491607666\n","en_ex_pairing elapsed time : 0.08403468132019043\n","short_obj.shape : (1048, 5)\n","long_obj.shape : (1382, 5)\n","get_open_info_df elapsed time : 0.9051220417022705\n","en_ex_pairing elapsed time : 0.06450653076171875\n","short_obj.shape : (839, 5)\n","long_obj.shape : (1067, 5)\n","get_open_info_df elapsed time : 0.9076461791992188\n","en_ex_pairing elapsed time : 0.047382354736328125\n","short_obj.shape : (654, 5)\n","long_obj.shape : (815, 5)\n","get_open_info_df elapsed time : 0.9283490180969238\n","en_ex_pairing elapsed time : 0.03868675231933594\n","short_obj.shape : (504, 5)\n","long_obj.shape : (601, 5)\n","get_open_info_df elapsed time : 0.9096674919128418\n","en_ex_pairing elapsed time : 0.02606034278869629\n","short_obj.shape : (349, 5)\n","long_obj.shape : (430, 5)\n","get_open_info_df elapsed time : 0.9208331108093262\n","en_ex_pairing elapsed time : 0.01675558090209961\n","short_obj.shape : (244, 5)\n","long_obj.shape : (287, 5)\n","get_open_info_df elapsed time : 0.9046146869659424\n","en_ex_pairing elapsed time : 0.011451482772827148\n","short_obj.shape : (166, 5)\n","long_obj.shape : (183, 5)\n","get_open_info_df elapsed time : 0.9113998413085938\n","en_ex_pairing elapsed time : 0.0077266693115234375\n","short_obj.shape : (96, 5)\n","long_obj.shape : (116, 5)\n","get_open_info_df elapsed time : 0.9193143844604492\n","en_ex_pairing elapsed time : 0.004385232925415039\n","short_obj.shape : (53, 5)\n","long_obj.shape : (75, 5)\n"]},{"output_type":"display_data","data":{"image/png":"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Vo6YiIiofdi/fz+io6Nx6dIlHDhwABs2bAAA/PDDD9i8eTNOnz6NtLQ03Lt3D++99x4AZSmDL774Ar///jsUCgX69esn5SEQqSQtKIvTEhERERFppOXLl8PKygrTpk2TOhQiIiIiogZxJC0RERERaZQePXrAw8MDAODn54fp06fzjhciIiIiUmlyqQMgIiIiImpJRkZG2Lp1K2xsbJCXl4evv/4a+/fvlzosIiIiIqJGsdwBERERERERERERkYRY7oCIiIiIiIiIiIhIQkzSEhEREREREREREUmISVoiIiIiIiIiIiIiCTFJS0RERERERERERCQhJmmJiIiIiIiIiIiIJMQkLREREREREREREZGEmKQlIiIiIiIiIiIikhCTtEREREREREREREQSYpKWiIiIiIiIiIiISEJM0hIRERERERERERFJiElaIiIiIiIiIiIiIgkxSUtEREREREREREQkISZpiYiIiIiIiIiIiCTEJC0RERERERERERGRhJikJSIiIiIiIiIiIpIQk7REREREREREREREEmKSloiIiIiIiIiIiEhCTNISERERERERERERSYhJWiIiIiIiIiIiIiIJMUlLREREREREREREJCEmaYmIiIiIiIiIiIgkxCQtERERERERERERkYSYpCUiIiIiIiIiIiKSEJO0RERERERERERERBJikpaIiIiIiIiIiIhIQkzSEhEREREREREREUmISVoiIiIiIiIiIiIiCTFJS0RERERERERERCQhJmkBpKWlYdiwYVKHQS1k48aNWLp06WPX69ChA8LCwlBUVIQdO3a0QWRERO0P+1jNwj6WiEg1sH/VLOxfiQgA5FIHQCSV8ePHw9LSEubm5qiurpY6HCIiIo3BPpaIiKjlsX8l0mwcSatCZDKZ1CG0K46OjkhOTmbnpoL4WlBNPC+kzvj/27bYx6ouvhZUD88JqTP+/7Yt9q+qi68F1aRu54VJ2odoaWlh/vz5SE1NRUFBAbZv3w5TU1MAyjdDQRAwZcoU3Lx5E/n5+fj4448fu8+QkBDs3LkT27ZtQ3FxMaKjo+Hp6Sk+npaWhnnz5iE2NhZlZWVq9w+kCry9vREdHY3i4mJs27YNHTp0AAAMHjwYGRkZWLhwIfLz85GWloZJkyYBABYvXoxPP/0UEyZMQElJCd544w0pD0GjTZs2DWFhYeLvycnJ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D4Xn5Lkx7HPDYrFYzZXSruGA8VzHeW5YLBZL2aW067gxXcN5blgsVlvK6FfSFhUVQaVSAQAuXbqEjIwMuLm5CU7VOjNnzsT69esBAOvXr8esWbMEJ5IHzw0RkXIZwjUcMMzrOM8NEZGyGcJ13FCv4Tw3RNQWRt+kvZ6npycCAgJw9OhRAMDSpUuhVquxbt06vVniL0kSoqOjkZCQgCVLlgAAXFxcUFRUBODPFwUXFxeREe8KnhsiIuVSwjUcMM7rOM8NEZGyKeE6bqzXcJ4bIroTwpfz6kN16NBBSkhIkGbPni0BkJydnSVTU1PJxMREeu+996R169YJzwhA6t69uwRA6tq1q5SUlCSNGTNGKi8vb3JMWVmZ8Jw8N8ZxblgsFqu5Uso1HDC+6zjPDYvFYim7lHIdN8ZrOM8Ni8W6wxIeQHiZm5tLu3btkpYtW6bz+56enlJKSorwnDfW1bk2mZmZkqurqwT8OQMnMzNTeDaeG8M/NywWi9VcKfUaDhj+dZznhsVisZRdSr2OG8M1nOeGxWLdaXHcAYB169YhIyMDn3zyybU/c3V1vfb/s2fPRmpqqohoTdja2sLOzu7a/0+ePBmpqakICwvD448/DgB4/PHHsX37dpExZcVzQ0SkXEq5hgPGdx3nuSEiUjalXMeN8RrOc0NEbSG8UyyyRo0aJUmSJKnVakmlUkkqlUoKCQmRfvjhByk5OVlSq9XS9u3br32SJLK8vb2lpKQkKSkpSUpNTZVee+01CYDUuXNnKSYmRsrKypJ2794tderUSXhWnhvDPjcsFovVXCnpGg4Y13Wc54bFYrGUXUq6jhvbNZznhsVitaVMrvwPEREREREREREREQnAcQdEREREREREREREArFJS0RERERERERERCQQm7REREREREREREREArFJS0RERERERERERCQQm7REREREREREREREArFJS0RERERERERERCQQm7REREREREREREREAv0/9QETJCotFREAAAAASUVORK5CYII=\n","text/plain":["<Figure size 1728x576 with 30 Axes>"]},"metadata":{}}],"source":["# from google.colab import output\n","# ------------ survey param ------------ #\n","itv_num_list = [1, 3, 5, 15]\n","itv_list = ['15m', '30m', '1h', '4h']\n","# itv_list = ['3m', '5m', '15m', '30m', '1h', '4h']\n","# val_list = np.arange(, 2.0, 0.1)     # prcn 1\n","# val_list = np.arange(-0.69, -0.8, -0.01)  # prcn 2\n","# val_list = np.arange(-0.695, -0.75, -0.005)    # prcn 3\n","# val_list = np.arange(0.944, 0.945, 0.0001)    # prcn 4\n","val_list = np.arange(10, 60, 5)   # prcn -1\n","# val_list = np.arange(200, 180, -5)   # prcn -2\n","\n","# ------------ get survey_res ------------ #\n","result = []\n","config_list_copy = copy.deepcopy(config_list)\n","for set_val in val_list:\n","  config_list_copy[0].loc_set.zone.degree = set_val\n","  open_info_df = get_open_info_df(ep_loc_v2, res_df, np_timeidx, ID_list, config_list_copy, id_idx_list)\n","  result.append(get_res(res_df, open_info_df, ohlc_list, market_data_list, config_list_copy, np_timeidx, funcs, test_ratio=0.3, plot_is=1, signi=True))  \n","survey_res_list = [np.array(result)[:, s_i::3] for s_i in range(3)]   # 3 for s, l, b\n","# short_res, long_res, both_res = survey_res_list\n","\n","# ------------ plot survey_res ------------ #\n","title_list = [\"short\", \"long\", \"both\"]\n","sub_title_list = ['len_pr', 'dpf', 'wr', 'sr', 'acc_pr', 'sum_pr', 'min_pr', 'liqd', 'acc_mdd', 'sum_mdd']\n","space_ = \" \" * 120\n","\n","fig = plt.figure(figsize=(24, 8))\n","plt.style.use('dark_background')\n","gs = gridspec.GridSpec(nrows=1,\n","                        ncols=3,\n","                        # height_ratios=[1, 1, 1]\n","                      )\n","# nrows, ncols, h_r = 3, 3, [1, 1, 1]\n","nrows, ncols, h_r = 3, 4, [1, 1, 1]\n","# nrows, ncols, h_r = 4, 3, [1, 1, 1, 1]\n","# if d_idx == 0:\n","# else:\n","  # nrows, ncols, h_r = 2, 2, [1, 1]\n","\n","for d_idx, (title_name, survey_res) in enumerate(zip(title_list, survey_res_list)):  \n","  inner_gs = gs[d_idx].subgridspec(nrows=nrows,\n","                        ncols=ncols,\n","                        height_ratios=h_r\n","                      )\n","  for in_idx, (data_, sub_title) in enumerate(zip(survey_res.T, sub_title_list)):\n","    plt.subplot(inner_gs[in_idx])\n","    plt.plot(val_list, data_.ravel())\n","    plt.title(sub_title)\n","\n","plt.suptitle(space_.join(title_list))\n","plt.show()\n","# print(\"\\n\")"]},{"cell_type":"markdown","source":["### legacy"],"metadata":{"id":"1GVZ03zDyU2N"}},{"cell_type":"markdown","source":["#### main_functions"],"metadata":{"id":"IWO7KkqltMFt"}},{"cell_type":"code","source":["def get_open_info_df(ep_loc_v2, res_df, np_timeidx, ID_list, config_list, id_idx_list):\n","  start_0 = time.time()\n","  # ------ get mr_res, zone_arr ------ #\n","  short_mr_res_obj = np.array([ep_loc_v2(res_df, config_, np_timeidx, show_detail=True, ep_loc_side=OrderSide.SELL) for config_ in config_list])\n","  long_mr_res_obj = np.array([ep_loc_v2(res_df, config_, np_timeidx, show_detail=True, ep_loc_side=OrderSide.BUY) for config_ in config_list])\n","  short_open_idx_list = [np.where(res_df['short_open_{}'.format(id)].to_numpy() * mr_res)[0] for id, mr_res in zip(ID_list, short_mr_res_obj[:, 0].astype(np.float64))]  # zip 으로 zone (str) 과 묶어서 dtype 변경됨\n","  long_open_idx_list = [np.where(res_df['long_open_{}'.format(id)].to_numpy() * mr_res)[0] for id, mr_res in zip(ID_list, long_mr_res_obj[:, 0].astype(np.float64))]\n","\n","  # ------ open_info_arr ------ #\n","  short_side_list = [np.full(len(list_), OrderSide.SELL) for list_ in short_open_idx_list]\n","  long_side_list = [np.full(len(list_), OrderSide.BUY) for list_ in long_open_idx_list]\n","\n","  short_zone_list = [zone_res[short_open_idx] for zone_res, short_open_idx in zip(short_mr_res_obj[:, 1], short_open_idx_list)]\n","  long_zone_list = [zone_res[long_open_idx] for zone_res, long_open_idx in zip(long_mr_res_obj[:, 1], long_open_idx_list)]\n","\n","  short_id_list = [np.full(len(list_), id) for id, list_ in zip(ID_list, short_open_idx_list)]\n","  long_id_list = [np.full(len(list_), id) for id, list_ in zip(ID_list, long_open_idx_list)]\n","\n","  selected_id_idx = np.arange(len(id_idx_list))\n","  short_id_idx_list = [np.full(len(list_), id) for id, list_ in zip(selected_id_idx, short_open_idx_list)]\n","  long_id_idx_list = [np.full(len(list_), id) for id, list_ in zip(selected_id_idx, long_open_idx_list)]\n","\n","  # ------ get open_info_df ------ #\n","  #   series 만들어서 short / long 끼리 합치고 둘이 합치고, 중복은 우선 순위 정해서 제거\n","  short_open_df_list = [pd.DataFrame(index=index_, data=np.vstack((data_)).T, columns=['side', 'zone', 'id', 'id_idx']) for index_, data_ in zip(short_open_idx_list, zip(short_side_list, short_zone_list, short_id_list, short_id_idx_list))]\n","  long_open_df_list = [pd.DataFrame(index=index_, data=np.vstack((data_)).T, columns=['side', 'zone', 'id', 'id_idx']) for index_, data_ in zip(long_open_idx_list, zip(long_side_list, long_zone_list, long_id_list, long_id_idx_list))]\n","\n","  open_info_df = pd.concat(short_open_df_list + long_open_df_list)\n","  # ------ sorting + unique ------ #\n","  open_info_df.sort_index(inplace=True)\n","  # print(len(open_info_df))\n","  # print(len(open_info_df))\n","  # open_info_df.head()\n","  print(\"get_open_info_df elapsed time :\", time.time() - start_0)\n","  return open_info_df[~open_info_df.index.duplicated(keep='first')]  # 먼저 순서를 우선으로 지정  "],"metadata":{"id":"MY1csdNRLGsk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def get_res(res_df, open_info_df, ohlc_list, market_data_list, config_list, np_timeidx, funcs, test_ratio=0.3, plot_is=True, signi=False):\n","  # ------------ make open_info_list ------------ #\n","  open_idx = open_info_df.index.to_numpy()\n","  len_df = len(res_df)\n","  s_idx = (open_idx < int(len_df * (1 - test_ratio))) == plot_is\n","  s_open_info_df = open_info_df[s_idx]\n","  s_open_idx = open_idx[s_idx]\n","\n","  open_info_list = [s_open_info_df[col_].to_numpy() for col_ in s_open_info_df.columns]\n","  side_arr, zone_arr, id_arr, id_idx_arr = open_info_list\n","\n","  # ------------ get paired_res ------------ #\n","  start_0 = time.time()\n","  paired_res = en_ex_pairing(res_df, s_open_idx, open_info_list, ohlc_list, market_data_list, config_list, np_timeidx, funcs)\n","  # valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr = paired_res\n","  print(\"en_ex_pairing elapsed time :\", time.time() - start_0)  #  0.37 --> 0.3660471439361572 --> 0.21(lesser if)\n","\n","  # ------------ idep_plot ------------ #\n","  start_0 = time.time()\n","  h, l = ohlc_list[1:3]\n","  return idep_plot_v5(len_df, h, l, s_open_idx, side_arr, paired_res, inversion=False, sample_ratio=1 - test_ratio, signi=signi)"],"metadata":{"id":"eiQ36_SLLE3w","executionInfo":{"status":"ok","timestamp":1646475146113,"user_tz":-540,"elapsed":310,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["def idep_plot_v5(len_df, h, l, open_idx, side_arr, paired_res, inversion=False, sample_ratio=0.7, title_position=(0.5, 0.5), fontsize=15, signi=False):\n","    if not signi:\n","        plt.style.use(['dark_background', 'fast'])\n","        fig = plt.figure(figsize=(24, 8))\n","        gs = gridspec.GridSpec(nrows=2,  # row 몇 개\n","                               ncols=3,  # col 몇 개\n","                               height_ratios=[10, 1]\n","                               # height_ratios=[10, 10, 1]\n","                               )\n","    gs_idx = 0\n","    # plt.suptitle(key)\n","\n","    if sample_ratio is not None:\n","      sample_len = int(len_df * sample_ratio)\n","    else:\n","      sample_len = len_df\n","\n","    # ------ short & long data preparation ------ #\n","    # start_0 = time.time()\n","    valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr = paired_res\n","    short_valid_openi_idx = np.where(side_arr[valid_openi_arr] == OrderSide.SELL)[0]  # valid_openi_arr 에 대한 idx, # side_arr,\n","    long_valid_openi_idx = np.where(side_arr[valid_openi_arr] == OrderSide.BUY)[0]\n","\n","    valid_open_idx = open_idx[valid_openi_arr].reshape(-1, 1)\n","\n","    short_obj = np.hstack((pair_price_arr, pair_idx_arr, valid_open_idx))[short_valid_openi_idx]\n","    long_obj = np.hstack((pair_price_arr, pair_idx_arr, valid_open_idx))[long_valid_openi_idx]\n","    both_obj = np.vstack((short_obj, long_obj))\n","    print(\"short_obj.shape :\", short_obj.shape)\n","    print(\"long_obj.shape :\", long_obj.shape)\n","\n","    short_obj, long_obj, both_obj = [np.split(obj_, 5, axis=1) for obj_ in [short_obj, long_obj, both_obj]]\n","\n","    short_lvrg_arr, long_lvrg_arr = [lvrg_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    short_fee_arr, long_fee_arr = [fee_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    short_tpout_arr, long_tpout_arr = [tpout_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    # print(\"elapsed time :\", time.time() - start_0)\n","\n","    # ------ plot_data ------ #\n","    try:\n","      # start_0 = time.time()\n","      short_pr = get_pr(OrderSide.SELL, *short_obj[:2], short_lvrg_arr, short_fee_arr, inversion)\n","      short_total_pr = to_total_pr(len_df, short_pr, short_obj[-2])\n","      short_cum_pr = np.cumprod(short_total_pr)\n","      s_liqd = liquidation(OrderSide.SELL, h, short_obj[:4], short_lvrg_arr, short_fee_arr)\n","      if signi:\n","        short_idep_res_obj = get_res_info_nb_v2(sample_len, short_pr, short_total_pr, short_cum_pr, s_liqd)\n","      else:\n","        gs_idx = plot_info_v3(gs, gs_idx, sample_len, short_pr, short_total_pr, short_cum_pr, s_liqd, short_lvrg_arr[-1], title_position, fontsize)\n","      # print(\"elapsed time :\", time.time() - start_0)\n","    except:\n","      gs_idx += 1\n","\n","    try:\n","      # start_0 = time.time()\n","      long_pr = get_pr(OrderSide.BUY, *long_obj[:2], long_lvrg_arr, long_fee_arr, inversion)\n","      long_total_pr = to_total_pr(len_df, long_pr, long_obj[-2])\n","      long_cum_pr = np.cumprod(long_total_pr)\n","      l_liqd = liquidation(OrderSide.BUY, l, long_obj[:4], long_lvrg_arr, long_fee_arr)\n","      if signi:\n","        long_idep_res_obj = get_res_info_nb_v2(sample_len, long_pr, long_total_pr, long_cum_pr, l_liqd)\n","      else:\n","        gs_idx = plot_info_v3(gs, gs_idx, sample_len, long_pr, long_total_pr, long_cum_pr, l_liqd, long_lvrg_arr[-1], title_position, fontsize)\n","      # print(\"elapsed time :\", time.time() - start_0)\n","    except:\n","      gs_idx += 1\n","\n","    try:\n","      # start_0 = time.time()\n","      both_pr = np.vstack((short_pr, long_pr))\n","      both_total_pr = to_total_pr(len_df, both_pr, both_obj[-2])\n","      both_cum_pr = np.cumprod(both_total_pr)\n","      b_liqd = min(s_liqd, l_liqd)\n","      if signi:\n","        both_idep_res_obj = get_res_info_nb_v2(sample_len, both_pr, both_total_pr, both_cum_pr, b_liqd)\n","      else:\n","        gs_idx = plot_info_v3(gs, gs_idx, sample_len, both_pr, both_total_pr, both_cum_pr, b_liqd, lvrg_arr[-1], title_position, fontsize)\n","      # print(\"elapsed time :\", time.time() - start_0)\n","    except:\n","      gs_idx += 1\n","\n","    if not signi:\n","        for obj, cum_pr in zip([short_obj, long_obj, both_obj], [short_cum_pr, long_cum_pr, both_cum_pr]):\n","          try:\n","            # start_0 = time.time()\n","            gs_idx = frq_dev_plot_v3(gs, gs_idx, len_df, sample_len, obj[-2], cum_pr[-1], fontsize)\n","            # print(\"elapsed time :\", time.time() - start_0)\n","          except:\n","            gs_idx += 1\n","\n","        plt.show()\n","        plt.close()\n","        return short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr\n","    else:\n","        return [short_idep_res_obj[:-1], long_idep_res_obj[:-1], both_idep_res_obj[:-1]]"],"metadata":{"id":"xafHpMLwESKf"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### get paired_res function"],"metadata":{"id":"EFyWTuscH8VH"}},{"cell_type":"code","source":["def en_ex_pairing(res_df, open_idx, open_info_list, ohlc_list, market_data_list, config_list, np_timeidx, funcs):  # 이미 충분히 줄여놓은 idx 임\n","    side_arr, zone_arr, id_arr, id_idx_arr = open_info_list\n","    id_idx_arr = id_idx_arr.astype(int)\n","\n","    ep_loc_point2, lvrg_set = funcs\n","\n","    valid_openi_list, pair_idx_list, pair_price_list, lvrg_list, fee_list, tpout_list = [[] for li in range(6)]\n","    len_df = len(res_df)\n","    len_open_idx = len(open_idx)\n","    i, open_i = 0, 0  # i for total_res_df indexing\n","\n","    while 1:\n","        # ------------ entry phase ------------ #\n","        # ------ ep_loc ------ #\n","        op_idx = open_idx[open_i]  # open_i 는 i 와 별개로 운영\n","        if op_idx < i:  # i = 이전 거래 끝난후의 res_df index, '<' : 거래 종료시점 진입 가능하다는 의미\n","            open_i += 1\n","            if open_i >= len_open_idx:\n","                break\n","            continue\n","\n","        #     1. 해당 id 로 config 재할당해야함 - 적정 config 를 뽑아내기 위한 id_idx_arr 도 필요할 것으로 보임\n","        id_idx = id_idx_arr[open_i]\n","        config = config_list[id_idx]\n","        strat_version = config.strat_version\n","        open_side = side_arr[open_i]\n","\n","        side_pos = 'short' if open_side == OrderSide.SELL else 'long'\n","        ep_arr = res_df['{}_ep_{}'.format(side_pos, strat_version)].to_numpy()  # Todo - while loop 내에서 to_numpy() 반복하느니, pd_indexing 이 낫지 않을까\n","        tp_arr = res_df['{}_tp_{}'.format(side_pos, strat_version)].to_numpy()  # => eptpout arr_list 만들어서 꺼내 사용하면 될 것\n","        out_arr = res_df['{}_out_{}'.format(side_pos, strat_version)].to_numpy()\n","\n","        # ------ ei_k & point2 ------ #\n","        i = op_idx + 1  # open_signal 이 close_bar.shift(1) 이라고 가정하고 다음 bar 부터 체결확인한다는 의미\n","        if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","            break\n","        exec_j, ep_j, tp_j, out_j, entry_done, ep, fee = check_eik_point2_exec(res_df, config, op_idx, len_df, open_side, [*ohlc_list, ep_arr], ep_loc_point2)\n","        i = exec_j\n","\n","        if not entry_done:  # 이 phase 는 exit_phase 뒤에도 있어야할 것 - entry_done var. 사용은 안하겠지만\n","            open_i += 1  # 확인 끝났으면 조기 이탈(+1), 다음 open_idx 조사 진행\n","            if open_i >= len_open_idx:\n","                break\n","            continue\n","\n","        # ------ leverage ------ #\n","        out = out_arr[out_j]\n","        leverage = lvrg_set(res_df, config, open_side, ep, out, fee)  # res_df 변수 사용됨 - 주석 처리 된 상태일뿐\n","\n","        exit_done, cross_on = 0, 0\n","        # ------ cehck tpout_onexec ------ #\n","        if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","            if config.tp_set.static_tp:\n","                tp_j = ep_j  # tpout_onexec = using dynamic_ep --> using ep_j 에 대한 이유\n","            if config.out_set.static_out:\n","                out_j = ep_j\n","        while 1:\n","            # ------------ exit phase ------------ #\n","            i += 1  # entry 다음 tick 부터 exit 허용\n","            if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","                break\n","\n","            if not config.tp_set.static_tp:\n","                tp_j = i\n","            if not config.out_set.static_out:\n","                out_j = i\n","\n","            # ------------ tp ------------ #\n","            if not config.tp_set.non_tp:\n","                # ------ limit_tp ------ #\n","                if config.tp_set.tp_type in ['LIMIT', 'BOTH']:\n","                    exit_done, tp, fee = check_limit_tp_exec(res_df, config, open_i, i, tp_j, len_df, fee, open_side, exit_done, [*ohlc_list, [tp_arr]])  # 여기서는 j -> i 로 변경해야함\n","                # ------ market_tp ------ #\n","                if not exit_done and config.tp_set.tp_type in ['MARKET', 'BOTH']:\n","                    exit_done, cross_on, tp, fee = check_market_tp_exec(config, open_i, i, len_df, fee, open_side, cross_on, exit_done,\n","                                                                        [np_timeidx, *market_data_list])\n","            # ------ out ------ #\n","            if not exit_done and config.out_set.use_out and i != len_df - 1:\n","                exit_done, tp, fee = check_out(config, open_i, i, out_j, len_df, fee, open_side, exit_done, [*ohlc_list, out_arr])\n","\n","            if exit_done:  # 이 phase 는 exit_phase 뒤에도 있어야할 것 - entry_done var. 사용은 안하겠지만\n","                # ------ append dynamic vars. ------ #\n","                valid_openi_list.append(open_i)  # side, zone, start_ver arr 모두 openi_list 로 접근하기 위해 open_i 를 담음\n","                pair_idx_list.append([exec_j, i])  # entry & exit (체결 기준임)\n","                pair_price_list.append([ep, tp])\n","                lvrg_list.append(leverage)\n","                fee_list.append(fee)\n","                tpout_list.append([tp_arr[tp_j], out_arr[out_j]])  # for tpout_line plot_check\n","\n","                open_i += 1  # 다음 open_idx 조사 진행\n","                break\n","\n","        if i >= len_df or open_i >= len_open_idx:  # res_df 의 last_index 까지 돌아야함\n","            break\n","        else:\n","            continue\n","\n","    return np.array(valid_openi_list), np.array(pair_idx_list), np.array(pair_price_list), np.array(lvrg_list), np.array(fee_list), np.array(tpout_list)\n","\n","\n","def check_eik_point2_exec(res_df, config, op_idx, len_df, open_side, np_datas, ep_loc_point2):\n","    o, h, l, c, ep_arr = np_datas\n","    ep_j = op_idx\n","    tp_j = op_idx\n","    out_j = op_idx\n","\n","    strat_version = config.strat_version\n","    allow_ep_in = 0 if strat_version in ['v5_2'] else 1\n","    # allow_ep_in = 0\n","    entry_done = 0\n","    entry_open = 0\n","    ep = None\n","\n","    if config.ep_set.entry_type == \"LIMIT\":\n","        fee = config.trader_set.limit_fee\n","\n","        for e_j in range(op_idx + 1, len_df):\n","            # ------ index setting for dynamic options ------ #\n","            if not config.ep_set.static_ep:\n","                ep_j = e_j  # dynamic_ep 를 위한 ep_index var.\n","                out_j = e_j  # dynamic_out 를 위한 out_index var. - 조건식이 static_ep 와 같이 있는 이유 모름 => dynamic_lvrg 로 사료됨\n","\n","            if not config.tp_set.static_tp:\n","                tp_j = e_j\n","\n","            # if short_ep.iloc[initial_i] == np.inf:  #  np.inf caution\n","            #   break\n","            # ------ ei_k ------ # - limit 사용하면 default 로 ei_k 가 존재해야함\n","            #   Todo\n","            #    1. rtc_1 & gap => numpy 화 안해도 되나\n","            if open_side == OrderSide.SELL:\n","                if l[e_j] <= res_df['h_short_rtc_1_{}'.format(strat_version)].iloc[tp_j] - \\\n","                        res_df['h_short_rtc_gap_{}'.format(strat_version)].iloc[tp_j] * config.loc_set.zone.ei_k:\n","                    break\n","            else:\n","                if h[e_j] >= res_df['h_long_rtc_1_{}'.format(strat_version)].iloc[tp_j] + \\\n","                        res_df['h_long_rtc_gap_{}'.format(strat_version)].iloc[tp_j] * config.loc_set.zone.ei_k:\n","                    break\n","\n","            # ------ point2 ------ #\n","            if not allow_ep_in:\n","                allow_ep_in, out_j = ep_loc_point2(res_df, config, e_j, out_j, side=open_side)\n","\n","            # ------ check ep_exec ------ #\n","            if allow_ep_in:\n","                if open_side == OrderSide.SELL:\n","                    if h[e_j] >= ep_arr[ep_j]:\n","                        entry_done = 1\n","                        if o[e_j] >= ep_arr[ep_j]:\n","                            ep = o[e_j]\n","                        else:\n","                            ep = ep_arr[ep_j]\n","                        break\n","                else:\n","                    if l[e_j] <= ep_arr[ep_j]:\n","                        entry_done = 1\n","                        if o[e_j] <= ep_arr[ep_j]:\n","                            ep = o[e_j]\n","                        else:\n","                            ep = ep_arr[ep_j]\n","                        break\n","\n","    else:  # market entry\n","        e_j = op_idx + 1\n","        entry_done = True\n","        ep = c[op_idx]\n","        fee = config.trader_set.market_fee\n","\n","    return e_j, ep_j, tp_j, out_j, entry_done, ep, fee  # 다음 start_i <-- e_j 로 변경\n","    #   e_j => 다음 phase 의 시작 index <-> ep_j : ep 의 기준 index\n","    #   ep_j, tp_j, out_j 가 return 되어야함 - exit phase 에서 이어가기 위함\n","\n","\n","def check_limit_tp_exec(res_df, config, open_i, j, tp_j, len_df, fee, open_side, exit_done, np_datas):\n","    o, h, l, c, tps = np_datas\n","    tp = None\n","    strat_version = config.strat_version\n","    len_tps = len(tps)\n","\n","    for tp_i, tp_arr in enumerate(tps):\n","        #     decay adjustment    #\n","        #     tp_j includes dynamic_j - functionalize  #\n","        try:\n","            if config.tr_set.decay_gap != \"None\":\n","                decay_share = (j - open_i) // config.tp_set.decay_term\n","                decay_remain = (j - open_i) % config.tp_set.decay_term\n","                if j != open_i and decay_remain == 0:\n","                    if open_side == OrderSide.SELL:\n","                        tp_arr[tp_j] += res_df['h_short_rtc_gap_{}'.format(strat_version)].iloc[open_i] * config.tr_set.decay_gap * decay_share\n","                    else:\n","                        tp_arr[tp_j] -= res_df['h_long_rtc_gap_{}'.format(strat_version)].iloc[open_i] * config.tr_set.decay_gap * decay_share\n","        except:\n","            pass\n","\n","        if open_side == OrderSide.SELL:\n","            if l[j] <= tp_arr[tp_j]:  # and partial_tp_cnt == tp_i:  # we use static tp now\n","                # if l[j] <= tp_arr[j] <= h[j]: --> 이건 잘못되었음\n","                # partial_tp_cnt += 1 --> partial_tp 보류\n","\n","                # ------ dynamic tp ------ #\n","                if tp_arr[j] != tp_arr[j - 1] and not config.tp_set.static_tp:\n","                    # tp limit 이 불가한 경우 - open 이 이미, tp 를 넘은 경우\n","                    if o[j] < tp_arr[j]:\n","                        tp = o[j]\n","                    # tp limit 이 가능한 경우 - open 이 아직, tp 를 넘지 않은 경우\n","                    else:\n","                        tp = tp_arr[j]\n","                # ------ static tp ------ #\n","                else:\n","                    #   tp limit 이 불가한 경우 - open 이 이미, tp 를 넘은 경우\n","                    if o[j] < tp_arr[tp_j]:  # static 해놓고 decay 사용하면 dynamic 이니까\n","                        if config.tr_set.decay_gap != \"None\" and decay_remain == 0:\n","                            tp = o[j]  # tp_j -> open_i 를 가리키기 때문에 decay 는 한번만 진행되는게 맞음\n","                        else:\n","                            tp = tp_arr[tp_j]\n","                    else:\n","                        tp = tp_arr[tp_j]\n","\n","                if tp_i == len_tps - 1:\n","                    exit_done = 1  # partial 을 고려해 exit_done = 1 상태는 tp_i 가 last_index 로 체결된 경우만 해당\n","\n","        else:\n","            if h[j] >= tp_arr[tp_j]:\n","                # ------ dynamic tp ------ #\n","                if tp_arr[j] != tp_arr[j - 1] and not config.tp_set.static_tp:\n","                    if o[j] > tp_arr[j]:\n","                        tp = o[j]\n","                    else:\n","                        tp = tp_arr[j]\n","\n","                # ------ static tp ------ #\n","                else:\n","                    if o[j] > tp_arr[tp_j]:\n","                        if config.tr_set.decay_gap != \"None\" and decay_remain == 0:\n","                            tp = o[j]\n","                        else:\n","                            tp = tp_arr[tp_j]\n","                    else:\n","                        tp = tp_arr[tp_j]\n","\n","                if tp_i == len_tps - 1:\n","                    exit_done = 1  # partial 을 고려해 exit_done = 1 상태는 tp_i 가 last_index 로 체결된 경우만 해당\n","\n","    if exit_done:\n","        fee += config.trader_set.limit_fee\n","\n","    return exit_done, tp, fee\n","\n","\n","def check_market_tp_exec(config, open_i, j, len_df, fee, open_side, cross_on, exit_done, np_datas):\n","    np_timeidx, c, bb_lower_5m, bb_upper_5m, rsi_exit, ha_o, ha_h, ha_l, ha_c = np_datas\n","    tp = None\n","    strat_version = config.strat_version\n","\n","    # ------ timestamp ------ #\n","    if config.tp_set.time_tp:\n","        if np_timeidx[j] % config.loc_set.point.tf_entry == config.loc_set.point.tf_entry - 1 and j != open_i:\n","            exit_done = 1\n","\n","    # ------ rsi ------ # -> vectorize 가능함 => 추후 적용\n","    if strat_version in config.trader_set.rsi_out_stratver:\n","        if open_side == OrderSide.SELL:\n","            if (rsi_exit[j - 1] >= 50 - config.loc_set.point.osc_band) & (rsi_exit[j] < 50 - config.loc_set.point.osc_band):\n","                exit_done = 1\n","        else:\n","            if (rsi_exit[j - 1] <= 50 + config.loc_set.point.osc_band) & (rsi_exit[j] > 50 + config.loc_set.point.osc_band):\n","                exit_done = 1\n","\n","    # ------ heikin_ashi ------ #\n","    # if strat_version in ['v3_3']:\n","    #     if open_side == OrderSide.SELL:\n","    #       if (ha_o[j] < ha_c[j]):# & (ha_o[j] == ha_l[j]):   # 양봉 출현\n","    #           exit_done = 1\n","    #     else:\n","    #       if (ha_o[j] > ha_c[j]):# & (ha_o[j] == ha_h[j]):  # 음봉 출현\n","    #           exit_done = 1\n","\n","    # ------------ early out ------------ #\n","    # ------ bb ------ # --> cross_on 기능은 ide latency 개선 여부에 해당되지 않음\n","    if strat_version in ['v5_2']:\n","        if open_side == OrderSide.SELL:\n","            if c[j] < bb_lower_5m[j] < c[j - 1]:\n","                cross_on = 1\n","            if cross_on == 1 and c[j] > bb_upper_5m[j] > c[j - 1]:\n","                exit_done = 1\n","        else:\n","            if c[j] > bb_upper_5m[j] > c[j - 1]:\n","                cross_on = 1\n","            if cross_on == 1 and c[j] < bb_lower_5m[j] < c[j - 1]:\n","                exit_done = 1\n","\n","    if exit_done:\n","        tp = c[j]\n","        fee += config.trader_set.market_fee\n","\n","    return exit_done, cross_on, tp, fee\n","\n","\n","def check_out(config, open_i, j, out_j, len_df, fee, open_side, exit_done, np_datas):\n","    o, h, l, c, out_arr = np_datas\n","    tp = None\n","\n","    if config.out_set.hl_out:\n","        if open_side == OrderSide.SELL:\n","            if h[j] >= out_arr[out_j]:  # check out only once\n","                exit_done = 1\n","        else:\n","            if l[j] <= out_arr[out_j]:  # check out only once\n","                exit_done = 1\n","    else:  # close_out\n","        if open_side == OrderSide.SELL:\n","            if c[j] >= out_arr[out_j]:  # check out only once\n","                exit_done = 1\n","        else:\n","            if c[j] <= out_arr[out_j]:  # check out only once\n","                tp = c[j]\n","                exit_done = 1\n","\n","    if exit_done:\n","        if config.out_set.hl_out:\n","            tp = out_arr[out_j]\n","        else:\n","            tp = c[j]\n","\n","        if open_side == OrderSide.SELL:\n","            if o[j] >= out_arr[out_j]:\n","                tp = o[j]\n","        else:\n","            if o[j] <= out_arr[out_j]:\n","                tp = o[j]\n","\n","        fee += config.trader_set.market_fee\n","\n","    return exit_done, tp, fee\n"],"metadata":{"id":"qfbtFVMR01UJ","executionInfo":{"status":"ok","timestamp":1646476764939,"user_tz":-540,"elapsed":834,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"execution_count":24,"outputs":[]},{"cell_type":"markdown","source":["#### idep_plot function"],"metadata":{"id":"zhZuT7pbCj4h"}},{"cell_type":"code","source":["def idep_plot_v4(len_df, h, l, open_idx, side_arr, paired_res, inversion=False, sample_ratio=0.7, title_position=(0.5, 0.5), fontsize=15):\n","    plt.style.use(['dark_background', 'fast'])\n","    fig = plt.figure(figsize=(24, 8))\n","    gs = gridspec.GridSpec(nrows=2,  # row 몇 개\n","                           ncols=3,  # col 몇 개\n","                           height_ratios=[10, 1]\n","                           # height_ratios=[10, 10, 1]\n","                           )\n","    gs_idx = 0\n","    # plt.suptitle(key)\n","\n","    if sample_ratio is not None:\n","      sample_len = int(len_df * sample_ratio)\n","    else:\n","      sample_len = len_df\n","\n","    # ------ short & long data preparation ------ #\n","    # start_0 = time.time()\n","    valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr = paired_res\n","    short_valid_openi_idx = np.where(side_arr[valid_openi_arr] == OrderSide.SELL)[0]  # valid_openi_arr 에 대한 idx, # side_arr,\n","    long_valid_openi_idx = np.where(side_arr[valid_openi_arr] == OrderSide.BUY)[0]\n","\n","    valid_open_idx = open_idx[valid_openi_arr].reshape(-1, 1)\n","\n","    short_obj = np.hstack((pair_price_arr, pair_idx_arr, valid_open_idx))[short_valid_openi_idx]\n","    long_obj = np.hstack((pair_price_arr, pair_idx_arr, valid_open_idx))[long_valid_openi_idx]\n","    both_obj = np.vstack((short_obj, long_obj))\n","    print(\"short_obj.shape :\", short_obj.shape)\n","    print(\"long_obj.shape :\", long_obj.shape)\n","\n","    short_obj, long_obj, both_obj = [np.split(obj_, 5, axis=1) for obj_ in [short_obj, long_obj, both_obj]]\n","\n","    short_lvrg_arr, long_lvrg_arr = [lvrg_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    short_fee_arr, long_fee_arr = [fee_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    short_tpout_arr, long_tpout_arr = [tpout_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    # print(\"elapsed time :\", time.time() - start_0)\n","\n","    # ------ plot_data ------ #\n","    try:\n","      # start_0 = time.time()\n","      short_pr = get_pr(OrderSide.SELL, *short_obj[:2], short_lvrg_arr, short_fee_arr, inversion)\n","      short_total_pr = to_total_pr(len_df, short_pr, short_obj[-2])\n","      short_cum_pr = np.cumprod(short_total_pr)\n","      s_liqd = liquidation(OrderSide.SELL, h, short_obj[:4], short_lvrg_arr, short_fee_arr)\n","      gs_idx = plot_info_v3(gs, gs_idx, sample_len, short_pr, short_total_pr, short_cum_pr, s_liqd, short_lvrg_arr[-1], title_position, fontsize)\n","      # print(\"elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","      print(e)\n","      gs_idx += 1\n","\n","    try:\n","      # start_0 = time.time()\n","      long_pr = get_pr(OrderSide.BUY, *long_obj[:2], long_lvrg_arr, long_fee_arr, inversion)\n","      long_total_pr = to_total_pr(len_df, long_pr, long_obj[-2])\n","      long_cum_pr = np.cumprod(long_total_pr)\n","      l_liqd = liquidation(OrderSide.BUY, l, long_obj[:4], long_lvrg_arr, long_fee_arr)\n","      gs_idx = plot_info_v3(gs, gs_idx, sample_len, long_pr, long_total_pr, long_cum_pr, l_liqd, long_lvrg_arr[-1], title_position, fontsize)\n","      # print(\"elapsed time :\", time.time() - start_0)\n","    except:\n","      gs_idx += 1\n","\n","    try:\n","      # start_0 = time.time()\n","      both_pr = np.vstack((short_pr, long_pr))\n","      both_total_pr = to_total_pr(len_df, both_pr, both_obj[-2])\n","      both_cum_pr = np.cumprod(both_total_pr)\n","      b_liqd = min(s_liqd, l_liqd)\n","      gs_idx = plot_info_v3(gs, gs_idx, sample_len, both_pr, both_total_pr, both_cum_pr, b_liqd, lvrg_arr[-1], title_position, fontsize)\n","      # print(\"elapsed time :\", time.time() - start_0)\n","    except:\n","      gs_idx += 1\n","\n","    for obj, cum_pr in zip([short_obj, long_obj, both_obj], [short_cum_pr, long_cum_pr, both_cum_pr]):\n","      try:\n","        # start_0 = time.time()\n","        gs_idx = frq_dev_plot_v3(gs, gs_idx, len_df, sample_len, obj[-2], cum_pr[-1], fontsize)\n","        # print(\"elapsed time :\", time.time() - start_0)\n","      except:\n","        gs_idx += 1\n","\n","    plt.show()\n","    plt.close()\n","\n","    return short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr"],"metadata":{"id":"F5E9llWOTZi6","executionInfo":{"status":"ok","timestamp":1646476750995,"user_tz":-540,"elapsed":2,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"execution_count":23,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Up1TNNxbfKbk","jp-MarkdownHeadingCollapsed":true,"tags":[]},"source":["#### fucntional res_plot()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YEruNXz_jYo4"},"outputs":[],"source":["# t_w_s = np.sum(np.where((np_zone_list == 't') & (np_pr > 1) & (np_side_list == 's'), 1, 0))\n","# t_w_s2 = np.sum(np.where((np_zone_list == 't') & (np_pr > 1) & (np_side_list in ['s']), 1, 0))\n","# t_w_s == t_w_s2\n","\n","# tc_zone_wl(np_zone_list, np_pr, np_side_list, zone=['l', 's'])\n","res_info(np_pr, tp_ratio_list, dr_list)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"WQ0ISsnIdwH7"},"outputs":[],"source":["def tc_zone_wl(np_zone_list, np_pr, np_side_list, zone=['l', 's']):  \n","\n","  t_w_s = np.sum(np.where((np_zone_list == 't') & (np_pr > 1) & (np_side_list in zone), 1, 0))\n","  c_w_s = np.sum(np.where((np_zone_list == 'c') & (np_pr > 1) & (np_side_list in zone), 1, 0))\n","  t_ls_s = np.sum(np.where((np_zone_list == 't') & (np_pr < 1) & (np_side_list in zone), 1, 0))\n","  c_ls_s = np.sum(np.where((np_zone_list == 'c') & (np_pr < 1) & (np_side_list in zone), 1, 0))\n","\n","  return t_w, c_w, t_ls, c_ls\n","\n","\n","def res_info(np_pr, tp_ratio_list, dr_list):\n","\n","  total_pr = np.cumprod(np_pr)\n","\n","  for_sum_pr = np_pr - 1\n","  for_sum_pr[0] = 1\n","  sum_pr = np.cumsum(for_sum_pr)\n","  sum_pr = np.where(sum_pr < 0, 0, sum_pr)\n","\n","  wr = len(np_pr[np_pr > 1]) / len(np_pr[np_pr != 1])\n","  \n","  total_rollmax_pr = np.maximum.accumulate(total_pr)\n","  total_acc_mdd = np.max((total_rollmax_pr - total_pr) / total_rollmax_pr)\n","  total_rollmax_sumpr = np.maximum.accumulate(sum_pr)\n","  total_sum_mdd = np.max((total_rollmax_sumpr - sum_pr) / total_rollmax_sumpr)\n","\n","  np_tp_ratio_list = np.array(tp_ratio_list) # 초기에 tr 을 정하는거라 mean 사용하는게 맞음\n","  mean_tr = np.mean(np_tp_ratio_list[np.isnan(np_tp_ratio_list) == 0])\n","\n","  np_dr_list = np.array(dr_list) # 초기에 tr 을 정하는거라 mean 사용하는게 맞음\n","  mean_dr = np.mean(np_dr_list[np.isnan(np_dr_list) == 0])\n","\n","  return total_pr, sum_pr, wr, total_acc_mdd, total_sum_mdd, mean_tr, mean_dr\n","\n","\n","# def res_plot(res_df, pr_list, zone_list, side_list, tp_ratio_list, dr_list, nontp_liqd_list, nontp_pr_list, config, liqd_list):\n","def res_plot():\n","\n","    fontsize = 10\n","    plt.style.use('default')\n","    # mpl.rcParams.update(mpl.rcParamsDefault)\n","\n","    fig = plt.figure(figsize=(14, 10))\n","\n","    gs = gridspec.GridSpec(nrows=3, # row 몇 개 \n","                            ncols=3, # col 몇 개 \n","                            height_ratios=[10, 10, 1]\n","                          )\n","    # plt.figure(figsize=(16, 12))\n","    # plt.figure(figsize=(12, 8))\n","    # plt.figure(figsize=(10, 6))\n","    plt.suptitle(key)\n","\n","    try:\n","      np_pr = np.array(pr_list)\n","\n","      sr = sharpe_ratio(np_pr)\n","\n","      dpf = (len(res_df) / 1440) / len(np_pr)\n","\n","      np_zone_list = np.array(zone_list)\n","      # np_pr_list = np.array(pr_list)\n","      np_side_list = np.array(side_list)\n","\n","      t_w = np.sum(np.where((np_zone_list == 't') & (np_pr > 1), 1, 0))\n","      c_w = np.sum(np.where((np_zone_list == 'c') & (np_pr > 1), 1, 0))\n","      t_ls = np.sum(np.where((np_zone_list == 't') & (np_pr < 1), 1, 0))\n","      c_ls = np.sum(np.where((np_zone_list == 'c') & (np_pr < 1), 1, 0))\n","\n","      # np_pr = (np.array(pr_list) - 1) * config.lvrg_set.leverage + 1\n","\n","      # ----- fake_pr ----- #\n","      # np_pr = np.where(np_pr > 1, 1 + (np_pr - 1) * 3, np_pr)\n","\n","      total_pr = np.cumprod(np_pr)\n","\n","      for_sum_pr = np_pr - 1\n","      for_sum_pr[0] = 1\n","      sum_pr = np.cumsum(for_sum_pr)\n","      sum_pr = np.where(sum_pr < 0, 0, sum_pr)\n","\n","      wr = len(np_pr[np_pr > 1]) / len(np_pr[np_pr != 1])\n","      \n","      total_rollmax_pr = np.maximum.accumulate(total_pr)\n","      total_acc_mdd = np.max((total_rollmax_pr - total_pr) / total_rollmax_pr)\n","      total_rollmax_sumpr = np.maximum.accumulate(sum_pr)\n","      total_sum_mdd = np.max((total_rollmax_sumpr - sum_pr) / total_rollmax_sumpr)\n","\n","      np_tp_ratio_list = np.array(tp_ratio_list) # 초기에 tr 을 정하는거라 mean 사용하는게 맞음\n","      mean_tr = np.mean(np_tp_ratio_list[np.isnan(np_tp_ratio_list) == 0])\n","\n","      np_dr_list = np.array(dr_list) # 초기에 tr 을 정하는거라 mean 사용하는게 맞음\n","      mean_dr = np.mean(np_dr_list[np.isnan(np_dr_list) == 0])\n","\n","      # pr_gap = (np_pr - 1) / config.lvrg_set.leverage + fee\n","      # tp_gap_ = pr_gap[pr_gap > 0]\n","      # # mean_config.tr_set.tp_gap = np.mean(pr_gap[pr_gap > 0])\n","      # mean_ls_gap = np.mean(pr_gap[pr_gap < 0])\n","\n","      # ---- profit fee ratio ---- #\n","      # mean_pgfr = np.mean((tp_gap_ - fee) / abs(tp_gap_ + fee))\n","\n","      plt.subplot(gs[0])\n","      plt.plot(total_pr)\n","      plt.plot(sum_pr, color='gold')\n","      if len(nontp_liqd_list) != 0:\n","        plt.title(\"wr : %.3f\\n len(td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (wr, len(np_pr[np_pr != 1]), dpf, np.min(np_pr), total_pr[-1], sum_pr[-1], sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (total_acc_mdd, total_sum_mdd, config.lvrg_set.leverage, min(liqd_list), mean_tr, mean_dr)  + \\\n","                  \"\\n nontp_liqd_cnt : %s\\nnontp_liqd : %.3f\\nontp_liqd_pr : %.3f\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_liqd_list), min(nontp_liqd_list), min(nontp_pr_list), t_w, c_w, t_ls, c_ls) ,\n","                  position=title_position, fontsize=fontsize)\n","      else:\n","        plt.title(\"wr : %.3f\\n len(td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\" \n","                  % (wr, len(np_pr[np_pr != 1]), dpf, np.min(np_pr), total_pr[-1], sum_pr[-1], sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (total_acc_mdd, total_sum_mdd, config.lvrg_set.leverage, min(liqd_list), mean_tr, mean_dr)  + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_liqd_list), t_w, c_w, t_ls, c_ls) ,\n","                  position=title_position, fontsize=fontsize)\n","      # plt.show()\n","\n","      survey_df.iloc[survey_i] = wr, sr, len(np_pr[np_pr != 1]), dpf, \\\n","        total_pr[-1], sum_pr[-1], total_acc_mdd, total_sum_mdd, min(liqd_list), np.min(np_pr), mean_tr, mean_dr\n","\n","      print('supblot231 passed')\n","\n","    except Exception as e:\n","      print(\"error in 231 :\", e)\n","\n","\n","    try:\n","      #         short only      #\n","      short_np_pr = np.array(short_list)\n","\n","      short_sr = sharpe_ratio(short_np_pr)\n","\n","      short_dpf = (len(res_df) / 1440) / len(short_np_pr)\n","\n","      short_total_pr = np.cumprod(short_np_pr)\n","      \n","      short_for_sum_pr = short_np_pr - 1\n","      short_for_sum_pr[0] = 1\n","      short_sum_pr = np.cumsum(short_for_sum_pr)\n","      short_sum_pr = np.where(short_sum_pr < 0, 0, short_sum_pr)\n","\n","      short_wr = len(short_np_pr[short_np_pr > 1]) / len(short_np_pr[short_np_pr != 1])\n","      \n","      t_w_s = np.sum(np.where((np_zone_list == 't') & (np_pr > 1) & (np_side_list == 's'), 1, 0))\n","      c_w_s = np.sum(np.where((np_zone_list == 'c') & (np_pr > 1) & (np_side_list == 's'), 1, 0))\n","      t_ls_s = np.sum(np.where((np_zone_list == 't') & (np_pr < 1) & (np_side_list == 's'), 1, 0))\n","      c_ls_s = np.sum(np.where((np_zone_list == 'c') & (np_pr < 1) & (np_side_list == 's'), 1, 0))\n","\n","      short_rollmax_pr = np.maximum.accumulate(short_total_pr)\n","      short_acc_mdd = np.max((short_rollmax_pr - short_total_pr) / short_rollmax_pr)\n","      short_rollmax_sumpr = np.maximum.accumulate(short_sum_pr)\n","      short_sum_mdd = np.max((short_rollmax_sumpr - short_sum_pr) / short_rollmax_sumpr)\n","\n","      np_short_tp_ratio_list = np.array(short_tp_ratio_list)\n","      mean_short_tr = np.mean(np_short_tp_ratio_list[np.isnan(np_short_tp_ratio_list) == 0])\n","      \n","      np_short_dr_list = np.array(short_dr_list)\n","      mean_short_dr = np.mean(np_short_dr_list[np.isnan(np_short_dr_list) == 0])\n","      \n","      # short_pr_gap = (short_np_pr - 1) / config.lvrg_set.leverage + fee\n","      # short_tp_gap = short_pr_gap[short_pr_gap > 0]\n","      # # mean_short_tp_gap = np.mean(short_pr_gap[short_pr_gap > 0])\n","      # # mean_short_ls_gap = np.mean(short_pr_gap[short_pr_gap < 0])\n","\n","      # mean_short_pgfr = np.mean((short_tp_gap - fee) / abs(short_tp_gap + fee))\n","      \n","      # plt.subplot(232)\n","      plt.subplot(gs[1])\n","      plt.plot(short_total_pr)\n","      plt.plot(short_sum_pr, color='gold')\n","      if len(nontp_short_liqd_list) != 0:   \n","\n","        max_nontp_short_term = len(res_df) - nontp_short_indexs[0]\n","        \n","        plt.title(\"wr : %.3f\\nlen(short_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (short_wr, len(short_np_pr[short_np_pr != 1]), short_dpf, np.min(short_np_pr), short_total_pr[-1], short_sum_pr[-1], short_sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (short_acc_mdd, short_sum_mdd, config.lvrg_set.leverage, min(short_liqd_list), mean_short_tr, mean_short_dr) + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n nontp_liqd : %.3f\\n nontp_liqd_pr : %.3f\\n max_nontp_term : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_short_liqd_list), min(nontp_short_liqd_list), min(nontp_short_pr_list), max_nontp_short_term, t_w_s, c_w_s, t_ls_s, c_ls_s) ,\n","                  position=title_position, fontsize=fontsize)\n","      else:\n","        plt.title(\"wr : %.3f\\nlen(short_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (short_wr, len(short_np_pr[short_np_pr != 1]), short_dpf, np.min(short_np_pr), short_total_pr[-1], short_sum_pr[-1], short_sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (short_acc_mdd, short_sum_mdd, config.lvrg_set.leverage, min(short_liqd_list), mean_short_tr, mean_short_dr) + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_short_liqd_list), t_w_s, c_w_s, t_ls_s, c_ls_s),\n","                  position=title_position, fontsize=fontsize)\n","   \n","      short_survey_df.iloc[survey_i] = short_wr, short_sr, len(short_np_pr[short_np_pr != 1]), short_dpf, \\\n","        short_total_pr[-1], short_sum_pr[-1], short_acc_mdd, short_sum_mdd, min(short_liqd_list), np.min(short_np_pr), mean_short_tr, mean_short_dr\n","        \n","      print('supblot232 passed')\n","    \n","    except Exception as e:\n","      print(\"error in 232 :\", e)\n","\n","    try:\n","      #         long only      #\n","      long_np_pr = np.array(long_list)\n","      # long_np_pr = (np.array(long_list) - 1) * config.lvrg_set.leverage + 1\n","\n","      long_sr = sharpe_ratio(long_np_pr)\n","\n","      long_dpf = (len(res_df) / 1440) / len(long_np_pr)\n","\n","      long_total_pr = np.cumprod(long_np_pr)\n","      \n","      long_for_sum_pr = long_np_pr - 1\n","      long_for_sum_pr[0] = 1\n","      long_sum_pr = np.cumsum(long_for_sum_pr)\n","      long_sum_pr = np.where(long_sum_pr < 0, 0, long_sum_pr)\n","\n","      long_wr = len(long_np_pr[long_np_pr > 1]) / len(long_np_pr[long_np_pr != 1])\n","\n","      t_w_l = np.sum(np.where((np_zone_list == 't') & (np_pr > 1) & (np_side_list == 'l'), 1, 0))\n","      c_w_l = np.sum(np.where((np_zone_list == 'c') & (np_pr > 1) & (np_side_list == 'l'), 1, 0))\n","      t_ls_l = np.sum(np.where((np_zone_list == 't') & (np_pr < 1) & (np_side_list == 'l'), 1, 0))\n","      c_ls_l = np.sum(np.where((np_zone_list == 'c') & (np_pr < 1) & (np_side_list == 'l'), 1, 0))\n","\n","      long_rollmax_pr = np.maximum.accumulate(long_total_pr)\n","      long_acc_mdd = np.max((long_rollmax_pr - long_total_pr) / long_rollmax_pr)\n","      long_rollmax_sumpr = np.maximum.accumulate(long_sum_pr)\n","      long_sum_mdd = np.max((long_rollmax_sumpr - long_sum_pr) / long_rollmax_sumpr)\n","\n","      np_long_tp_ratio_list = np.array(long_tp_ratio_list)\n","      mean_long_tr = np.mean(np_long_tp_ratio_list[np.isnan(np_long_tp_ratio_list) == 0])\n","      \n","      np_long_dr_list = np.array(long_dr_list)\n","      mean_long_dr = np.mean(np_long_dr_list[np.isnan(np_long_dr_list) == 0])\n","\n","      # long_pr_gap = (long_np_pr - 1) / config.lvrg_set.leverage + fee\n","      # long_tp_gap = long_pr_gap[long_pr_gap > 0]\n","      # # mean_long_tp_gap = np.mean(long_pr_gap[long_pr_gap > 0])\n","      # # mean_long_ls_gap = np.mean(long_pr_gap[long_pr_gap < 0])\n","\n","      # mean_long_pgfr = np.mean((long_tp_gap - fee) / abs(long_tp_gap + fee))\n","\n","      plt.subplot(gs[2])\n","      plt.plot(long_total_pr)\n","      plt.plot(long_sum_pr, color='gold')\n","      if len(nontp_long_liqd_list) != 0:\n","\n","        max_nontp_long_term = len(res_df) - nontp_long_indexs[0]\n","\n","        plt.title(\"wr : %.3f\\nlen(long_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (long_wr, len(long_np_pr[long_np_pr != 1]), long_dpf, np.min(long_np_pr), long_total_pr[-1], long_sum_pr[-1], long_sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (long_acc_mdd, long_sum_mdd, config.lvrg_set.leverage, min(long_liqd_list), mean_long_tr, mean_long_dr)  + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n nontp_liqd : %.3f\\n nontp_liqd_pr : %.3f\\n max_nontp_term : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_long_liqd_list), min(nontp_long_liqd_list), min(nontp_long_pr_list), max_nontp_long_term, t_w_l, c_w_l, t_ls_l, c_ls_l) ,\n","                  position=title_position, fontsize=fontsize)\n","      else:\n","        plt.title(\"wr : %.3f\\nlen(long_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (long_wr, len(long_np_pr[long_np_pr != 1]), long_dpf, np.min(long_np_pr), long_total_pr[-1], long_sum_pr[-1], long_sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (long_acc_mdd, long_sum_mdd, config.lvrg_set.leverage, min(long_liqd_list), mean_long_tr, mean_long_dr) + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_long_liqd_list), t_w_l, c_w_l, t_ls_l, c_ls_l),\n","                  position=title_position, fontsize=fontsize)\n","\n","      long_survey_df.iloc[survey_i] = long_wr, long_sr, len(long_np_pr[long_np_pr != 1]), long_dpf, \\\n","        long_total_pr[-1], long_sum_pr[-1], long_acc_mdd, long_sum_mdd, min(long_liqd_list), np.min(long_np_pr), mean_long_tr, mean_long_dr\n","\n","      print('supblot233 passed')\n","\n","    except Exception as e:\n","      print(\"error in 233 :\", e)\n","\n","\n","    try:\n","      #     reversion adjustment      #\n","      # rev_np_pr = 1 / (np.array(pr_list) + fee) - fee\n","      rev_fee = tp_fee + out_fee - np.array(fee_list)\n","      rev_np_pr = (1 / ((np.array(pr_list) - 1) / config.lvrg_set.leverage + np.array(fee_list) + 1) - rev_fee - 1) * config.lvrg_set.leverage + 1\n","      # rev_np_pr = (1 / (np.array(pr_list) + fee) - fee - 1) * config.lvrg_set.leverage + 1\n","          \n","      rev_sr = sharpe_ratio(rev_np_pr)\n","\n","      rev_total_pr = np.cumprod(rev_np_pr)\n","      rev_wr = len(rev_np_pr[rev_np_pr > 1]) / len(rev_np_pr[rev_np_pr != 1])\n","\n","      rev_total_for_sum_pr = rev_np_pr - 1\n","      rev_total_for_sum_pr[0] = 1\n","      rev_total_sum_pr = np.cumsum(rev_total_for_sum_pr)\n","      rev_total_sum_pr = np.where(rev_total_sum_pr < 0, 0, rev_total_sum_pr)\n","\n","      rev_rollmax_pr = np.maximum.accumulate(rev_total_pr)\n","      rev_acc_mdd = np.max((rev_rollmax_pr - rev_total_pr) / rev_rollmax_pr)\n","      rev_rollmax_sumpr = np.maximum.accumulate(rev_total_sum_pr)\n","      rev_sum_mdd = np.max((rev_rollmax_sumpr - rev_total_sum_pr) / rev_rollmax_sumpr)\n","\n","      plt.subplot(gs[3])\n","\n","      plt.plot(rev_total_pr)\n","      plt.plot(rev_total_sum_pr, color='gold')\n","\n","      plt.title(\"wr : %.3f\\n sr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n min_pr : %.3f\" \n","                % (rev_wr, rev_sr, rev_total_pr[-1], rev_total_sum_pr[-1], \n","                   rev_acc_mdd, rev_sum_mdd, np.min(rev_np_pr)), fontsize=fontsize)\n","      \n","      rev_survey_df.iloc[survey_i] = rev_wr, rev_sr, rev_total_pr[-1], rev_total_sum_pr[-1], rev_acc_mdd, rev_sum_mdd, np.min(rev_np_pr)\n","\n","    except Exception as e:\n","      print(\"error in 234 :\", e)\n","\n","    try:\n","      #         short       #\n","      # rev_short_np_pr = 1 / (np.array(short_list) + fee) - fee\n","      rev_short_fee = tp_fee + out_fee - np.array(short_fee_list)\n","      rev_short_np_pr = (1 / ((np.array(short_list) - 1) / config.lvrg_set.leverage + np.array(short_fee_list) + 1) - rev_short_fee - 1) * config.lvrg_set.leverage + 1\n","      # rev_short_np_pr = (1 / (np.array(short_list) + fee) - fee - 1) * config.lvrg_set.leverage + 1\n","      \n","      rev_short_sr = sharpe_ratio(rev_short_np_pr)\n","          \n","      short_rev_total_pr = np.cumprod(rev_short_np_pr)\n","      rev_short_wr = len(rev_short_np_pr[rev_short_np_pr > 1]) / len(rev_short_np_pr[rev_short_np_pr != 1])\n","\n","      rev_short_for_sum_pr = rev_short_np_pr - 1\n","      rev_short_for_sum_pr[0] = 1\n","      short_rev_sum_pr = np.cumsum(rev_short_for_sum_pr)\n","      short_rev_sum_pr = np.where(short_rev_sum_pr < 0, 0, short_rev_sum_pr)\n","\n","      short_rev_rollmax_pr = np.maximum.accumulate(short_rev_total_pr)\n","      short_rev_acc_mdd = np.max((short_rev_rollmax_pr - short_rev_total_pr) / short_rev_rollmax_pr)\n","      short_rev_rollmax_sumpr = np.maximum.accumulate(short_rev_sum_pr)\n","      short_rev_sum_mdd = np.max((short_rev_rollmax_sumpr - short_rev_sum_pr) / short_rev_rollmax_sumpr)\n","\n","      plt.subplot(gs[4])\n","\n","      plt.plot(short_rev_total_pr)\n","      plt.plot(short_rev_sum_pr, color='gold')\n","\n","      plt.title(\"wr : %.3f\\n sr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n min_pr : %.3f\" \n","                % (rev_short_wr, rev_short_sr, short_rev_total_pr[-1], short_rev_sum_pr[-1], \n","                   short_rev_acc_mdd, short_rev_sum_mdd, np.min(rev_short_np_pr)), fontsize=fontsize)\n","      \n","      rev_short_survey_df.iloc[survey_i] = rev_short_wr, rev_short_sr, short_rev_total_pr[-1], short_rev_sum_pr[-1], short_rev_acc_mdd, short_rev_sum_mdd, np.min(rev_short_np_pr)\n","\n","    except Exception as e:\n","      print(\"error in 235 :\", e)\n","\n","    try:\n","      #         long       #\n","      # rev_long_np_pr = 1 / (np.array(long_list) + fee) - fee\n","      rev_long_fee = tp_fee + out_fee - np.array(long_fee_list)\n","      rev_long_np_pr = (1 / ((np.array(long_list) - 1) / config.lvrg_set.leverage + np.array(long_fee_list) + 1) - rev_long_fee - 1) * config.lvrg_set.leverage + 1\n","          \n","      rev_long_sr = sharpe_ratio(rev_long_np_pr)\n","\n","      long_rev_total_pr = np.cumprod(rev_long_np_pr)\n","      rev_long_wr = len(rev_long_np_pr[rev_long_np_pr > 1]) / len(rev_long_np_pr[rev_long_np_pr != 1])\n","\n","      rev_long_for_sum_pr = rev_long_np_pr - 1\n","      rev_long_for_sum_pr[0] = 1\n","      long_rev_sum_pr = np.cumsum(rev_long_for_sum_pr)\n","      long_rev_sum_pr = np.where(long_rev_sum_pr < 0, 0, long_rev_sum_pr)\n","\n","      long_rev_rollmax_pr = np.maximum.accumulate(long_rev_total_pr)\n","      long_rev_acc_mdd = np.max((long_rev_rollmax_pr - long_rev_total_pr) / long_rev_rollmax_pr)\n","      long_rev_rollmax_sumpr = np.maximum.accumulate(long_rev_sum_pr)\n","      long_rev_sum_mdd = np.max((long_rev_rollmax_sumpr - long_rev_sum_pr) / long_rev_rollmax_sumpr)\n","\n","      plt.subplot(gs[5])\n","\n","      plt.plot(long_rev_total_pr)\n","      plt.plot(long_rev_sum_pr, color='gold')\n","\n","      plt.title(\"wr : %.3f\\n sr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n min_pr : %.3f\" \n","                % (rev_long_wr, rev_long_sr, long_rev_total_pr[-1], long_rev_sum_pr[-1], \n","                   long_rev_acc_mdd, long_rev_sum_mdd, np.min(rev_long_np_pr)), fontsize=fontsize)\n","      \n","      rev_long_survey_df.iloc[survey_i] = rev_long_wr, rev_long_sr, long_rev_total_pr[-1], long_rev_sum_pr[-1], long_rev_acc_mdd, long_rev_sum_mdd, np.min(rev_long_np_pr)\n","      \n","    except Exception as e:\n","      print(\"error in 236 :\", e)\n","\n","    if show_plot:\n","      \n","      frq_dev, s_frq_dev, l_frq_dev = frq_dev_plot(res_df, trade_list, side_list, plot=False)      \n","      plt.subplot(gs[6])\n","      plt.plot(frq_dev)\n","\n","      plt.subplot(gs[7])\n","      plt.plot(s_frq_dev)\n","\n","      plt.subplot(gs[8])\n","      plt.plot(l_frq_dev)\n","\n","      plt.show()\n","    \n","\n","    try:\n","\n","      h_np_pr = np.array(h_pr_list)\n","      # h_rev_np_pr = 1 / (np.array(h_pr_list) + fee) - fee    # define, for plot_check below cell\n","      h_rev_np_pr = (1 / ((np.array(h_pr_list) - 1) / config.lvrg_set.leverage + np.array(fee_list) + 1) - np.array(fee_list) - 1) * config.lvrg_set.leverage + 1\n","\n","      # --------------------- h pr plot --------------------- #\n","      if len(h_np_pr[h_np_pr != 1]) != 0:\n","\n","        plt.figure(figsize=(16, 12))\n","        plt.suptitle(key + \" hedge\")\n","\n","        h_total_pr = np.cumprod(h_np_pr)\n","        h_wr = len(h_np_pr[h_np_pr > 1]) / len(h_np_pr[h_np_pr != 1])\n","\n","        plt.subplot(gs[0])\n","\n","        plt.plot(h_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_wr, np.min(h_np_pr), h_total_pr[-1], config.lvrg_set.leverage))\n","        # plt.show()\n","\n","        #         short only      #\n","        h_short_np_pr = np.array(h_short_list)\n","\n","        short_h_total_pr = np.cumprod(h_short_np_pr)\n","        h_short_wr = len(h_short_np_pr[h_short_np_pr > 1]) / len(h_short_np_pr[h_short_np_pr != 1])\n","        \n","        plt.subplot(gs[1])\n","        plt.plot(short_h_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_short_wr, np.min(h_short_np_pr), short_h_total_pr[-1], config.lvrg_set.leverage))\n","\n","        #         long only      #\n","        h_long_np_pr = np.array(h_long_list)\n","\n","        long_h_total_pr = np.cumprod(h_long_np_pr)\n","        h_long_wr = len(h_long_np_pr[h_long_np_pr > 1]) / len(h_long_np_pr[h_long_np_pr != 1])\n","        \n","        plt.subplot(gs[2])\n","        plt.plot(long_h_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_long_wr, np.min(h_long_np_pr), long_h_total_pr[-1], config.lvrg_set.leverage))\n","\n","\n","        #     reversion adjustment      #\n","            \n","        h_rev_total_pr = np.cumprod(h_rev_np_pr)\n","        h_rev_wr = len(h_rev_np_pr[h_rev_np_pr > 1]) / len(h_rev_np_pr[h_rev_np_pr != 1])\n","\n","        plt.subplot(gs[3])\n","        plt.plot(h_rev_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_rev_wr, np.min(h_rev_np_pr), h_rev_total_pr[-1], config.lvrg_set.leverage))\n","\n","        #         short       #\n","        # h_rev_short_np_pr = 1 / (np.array(h_short_list) + fee) - fee\n","        h_rev_short_np_pr =  (1 / ((np.array(h_short_list) - 1) / config.lvrg_set.leverage + np.array(short_fee_list) + 1) - np.array(short_fee_list) - 1) * config.lvrg_set.leverage + 1\n","           \n","        short_h_rev_total_pr = np.cumprod(h_rev_short_np_pr)\n","        h_rev_short_wr = len(h_rev_short_np_pr[h_rev_short_np_pr > 1]) / len(h_rev_short_np_pr[h_rev_short_np_pr != 1])\n","\n","        plt.subplot(gs[4])\n","        plt.plot(short_h_rev_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_rev_short_wr, np.min(h_rev_short_np_pr), short_h_rev_total_pr[-1], config.lvrg_set.leverage))\n","\n","        #         long       #\n","        # h_rev_long_np_pr = 1 / (np.array(h_long_list) + fee) - fee\n","        h_rev_long_np_pr =  (1 / ((np.array(h_long_list) - 1) / config.lvrg_set.leverage + np.array(long_fee_list) + 1) - np.array(long_fee_list) - 1) * config.lvrg_set.leverage + 1\n","            \n","        long_h_rev_total_pr = np.cumprod(h_rev_long_np_pr)\n","        h_rev_long_wr = len(h_rev_long_np_pr[h_rev_long_np_pr > 1]) / len(h_rev_long_np_pr[h_rev_long_np_pr != 1])\n","\n","        plt.subplot(gs[5])\n","        plt.plot(long_h_rev_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_rev_long_wr, np.min(h_rev_long_np_pr), long_h_rev_total_pr[-1], config.lvrg_set.leverage))\n","        \n","        if show_plot:\n","          plt.show()\n","          \n","    except Exception as e:\n","      print('error in h_pr plot :', e)   "]},{"cell_type":"markdown","metadata":{"jp-MarkdownHeadingCollapsed":true,"tags":[],"id":"zQ-roiifspcX"},"source":["#### ep_loc.point & zone legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Js5eL87VspcX"},"outputs":[],"source":["\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 (res_df['close'] < res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(strat_version)] - 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] >= res_df['bb_lower_1m']) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['bb_lower_1m']) &\n","    #                 (res_df['close'] < res_df['bb_lower_1m'])\n","    #                 , res_df['entry_{}'.format(strat_version)] - 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   (res_df['close'] > res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(strat_version)] + 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] <= res_df['bb_upper_1m']) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['bb_upper_1m']) &\n","    #                   (res_df['close'] > res_df['bb_upper_1m'])\n","    #                 , res_df['entry_{}'.format(strat_version)] + 1, res_df['entry_{}'.format(strat_version)])\n","\n","\n","    \n","   # --------------- ema --------------- #   \n","  # res_df['ema5_1m'] = ema(res_df['close'], 5).shift(1)\n","\n","  #   # --------------- cloud bline --------------- #   \n","  # res_df['cloud_bline_1m'] = cloud_bline(res_df, 26).shift(1)\n","  \n","    #       stochastic      #\n","  # res_df['stoch'] = stoch(res_df, 5, 3, 3)\n","\n","    #       fisher      #\n","  # res_df['fisher30'] = fisher(res_df, 30)\n","  # res_df['fisher60'] = fisher(res_df, 60)\n","  # res_df['fisher120'] = fisher(res_df, 120)\n","\n","    #       cctbbo      #\n","  # res_df['cctbbo'], _ = cct_bbo(res_df, 21, 13)\n","\n","    #       ema_roc      #\n","  # res_df['ema_roc'] = ema_roc(res_df['close'], 13, 9)\n","\n","\n","   # ------------------------------ htf data ------------------------------ #    \n","\n","  #             Todo              #\n","  # htf_df = pd.read_excel(date_path2 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # htf_df = pd.read_excel(date_path3 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # htf_df = pd.read_excel(date_path4 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # htf_df = pd.read_excel(date_path5 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # # # # htf_df = pd.read_excel(date_path6 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","\n","  # # ---- htf index slicing ---- #\n","  # htf_df = htf_df.loc[:res_df.index[-1]]\n","  \n","  # print(\"res_df.index[-1] :\", res_df.index[-1])\n","  # print(\"htf_df.index[-1] :\", htf_df.index[-1])\n","\n","  # res_df = dc_line(res_df, htf_df, '5m')\n","  # res_df = dc_level(res_df, '5m', 1)\n","\n","\n","  # # # if \"sma4\" in res_df.columns:\n","  # # #   res_df.drop(\"sma4\", axis=1, inplace=1)\n","\n","  # # htf_df['sma'] = htf_df['close'].rolling(60).mean()\n","  # # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, htf_df, [-1]), columns=['sma_30m']))\n","  \n","  # htf_df['stoch'] = stoch(htf_df, 13, 3, 3)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, htf_df, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","   \n","  # fifth_df['ema'] = ema(fifth_df['close'], 5)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, fifth_df, [-1]), columns=['ema5']))\n","\n","        # ------------------------------------ short ------------------------------------ # \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 0:\n","        #   mr_score += 1          \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_upper_1m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_upper_3m'].iloc[i] <= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_upper_5m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == 'MARKET':\n","        #   mr_const_cnt += 1\n","        #   if (res_df['close'].iloc[i] - res_df['short_tp'].iloc[i]) / (res_df['short_out'].iloc[i] - res_df['close'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error):  \n","        #     mr_score += 1\n","\n","           \n","        # ------- entry once ------- #   \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == 1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == -1:\n","        #     prev_entry_cnt += 1          \n","        # # # print(\"prev_entry_cnt :\", prev_entry_cnt)\n","\n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] < res_df['bb_lower_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_lower2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_base_1h'].iloc[i]:\n","\n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] < res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","  \n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['low'].iloc[i] > res_df['short_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1\n","\n","\n","\n","        # ------------------------------------ long ------------------------------------ # \n","          \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 1:\n","        #   mr_score += 1   \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 1:\n","        #   mr_score += 1     \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 1:\n","          # mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_lower_1m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_lower_3m'].iloc[i] >= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_lower_5m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == \"MARKET\":\n","          # mr_const_cnt += 1        \n","          # if (res_df['long_tp'].iloc[i] - res_df['close'].iloc[i]) / (res_df['close'].iloc[i] - res_df['long_out'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error): # 일반적으로 dr 상에서 tp 비율이 더 커짐 (tr 보다)\n","          #   mr_score += 1\n","\n","        # -------------- ep limit -------------- #    \n","        # mr_const_cnt += 1\n","        # # if (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # if config.ep_set.min_eplim_pct < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # # if 0 < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        #   # if res_df['st_gap_15m'].iloc[i] / res_df['open'].iloc[i] < 0:\n","        #   #   print(\"i, res_df['st_gap_15m'].iloc[i] :\", i, res_df['st_gap_15m'].iloc[i])\n","        #   mr_score += 1\n","\n","\n","        # -------------- entry once -------------- #    \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == -1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == 1:\n","        #     prev_entry_cnt += 1\n","          \n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","          \n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] > res_df['bb_upper_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_upper2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_base_1h'].iloc[i]:\n","        \n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] > res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","\n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['high'].iloc[i] < res_df['long_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","          \n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1"]},{"cell_type":"markdown","metadata":{"id":"JNQxkb06ZdTe"},"source":["## plot_check_v2"]},{"cell_type":"code","source":["# ------------------ plot_config ------------------ #\n","save_mode = 0\n","tf_plot = 1       # true - false plot\n","pr_descend = 1    # 1 -> 내림차순\n","position = 1      # -1 / 1, 0 (short / long)\n","front_plot = 0    # ide -> 1 / logic 검수 -> 0  \"limit plot_range til loc_set idx = replacing x_max value\"\n","# pr_sort = 1     # -> default 1,  이상한 체결 확인하기 좋음\n","# wl_case = 1     # 1 / -1 / 0 (win loss study) --> oid\n","\n","x_max = 500\n","x_margin_mult = 1/30\n","y_margin_mult = 1/30  # 0 \n","\n","prev_plotsize = 100\n","post_plotsize = 20\n","\n","inversion = 0\n","hedge = 0\n","\n","# ------ show or save ------ #\n","if save_mode:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".ftr\", \"\")\n","  shutil.rmtree(plot_check_dir, ignore_errors=True)  # remove existing dir\n","  os.makedirs(plot_check_dir)\n","  print(plot_check_dir)\n","else:\n","  plot_check_dir = None\n","\n","# ------------ 한 방향에 대해 plot_check 함 (by position var.) ------------ #\n","#   obj by position  \n","if position == -1:\n","  pos_str = \"SELL\"\n","  pr, obj, lvrg_arr, fee_arr, tpout_arr = sort_bypr_v2(short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, descending=pr_descend)\n","else:   # both option currently not supported\n","  pos_str = \"BUY\"\n","  pr, obj, lvrg_arr, fee_arr, tpout_arr = sort_bypr_v2(long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr, descending=pr_descend)\n","\n","pr_msg = \"%s\\n {} ~ {} -> {:.5f}\\n lvrg : {}\\n fee : {:.4f}\" % (pos_str)  # pos_str 으로 이곳에서 정의함\n","\n","# ------------------ data chunknize ------------------ #\n","left_end_idx = obj[2] - prev_plotsize  # left_margin 기준 - entry_idx\n","right_end_idx = obj[3] + post_plotsize\n","\n","np_plot_params = np.hstack((left_end_idx, right_end_idx, pr, *obj, lvrg_arr, fee_arr, tpout_arr))[np.sum(left_end_idx < 0):]\n","np_df = res_df.to_numpy()"],"metadata":{"id":"A6QSF9COaHO5","executionInfo":{"status":"ok","timestamp":1646477899793,"user_tz":-540,"elapsed":305,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"execution_count":48,"outputs":[]},{"cell_type":"code","source":["res_df = h_candle_v2(res_df, '5T')"],"metadata":{"id":"rAPpInvRsGjF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# ------------ make col_idx_dict config ------------ #\n","step_col_list = []\n","stepmark_col_list = []\n","# ------ set period ------ #\n","hc_itv1 = '5T'\n","hc_itv2 = '15T'\n","\n","dc_itv = '1m'\n","hdc_itv = '15m'\n","hhdc_itv = '1h'\n","\n","bb_itv = dc_itv\n","hbb_itv = hdc_itv\n","hhbb_itv = hhdc_itv\n","\n","# ------ step_col_list - add info(col, alpha, color, linewidth) ------ #\n","step_col_list.append([['hopen_{}'.format(hc_itv1), 'hclose_{}'.format(hc_itv1)], 1, '#ffffff', 2])\n","step_col_list.append([['hopen_{}'.format(hc_itv2), 'hclose_{}'.format(hc_itv2)], 1, '#ffffff', 4])\n","\n","# step_col_list.append([['dc_upper_%s' % dc_itv, 'dc_lower_%s' % dc_itv], 1, '#ffeb3b', 1])\n","step_col_list.append([['dc_upper_%s' % hdc_itv, 'dc_lower_%s' % hdc_itv], 1, '#e65100', 2])\n","# step_col_list.append([['dc_upper_%s' % hhdc_itv, 'dc_lower_%s' % hhdc_itv], 1, '#c2185b', 4])\n","\n","# step_col_list.append([['bb_upper_%s' % bb_itv, 'bb_lower_%s' % bb_itv], 1, '#ffffff', 1])\n","# step_col_list.append([['bb_upper_%s' % hbb_itv, 'bb_lower_%s' % hbb_itv], 1, '#ff00ff', 2])\n","# step_col_list.append([['bb_upper_%s' % hhbb_itv, 'bb_lower_%s' % hhbb_itv], 1, '#3179f5', 4])\n","\n","step_col_list.append([['ema_5m'], 1, '#03ed30', 2])\n","\n","# ------ stepmark_col_list - add info(col, alpha, color, linewidth) ------ #\n","# stepmark_col_list.append([['sar_T'], 1, 'dodgerblue', 7])\n","\n","step_col_arr = strcol_tonumb(res_df, step_col_list)\n","stepmark_col_arr = strcol_tonumb(res_df, stepmark_col_list)\n","\n","col_idx_dict = \\\n","{\n","  \"ohlc_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close']),\n","  # \"ohlc_col_idxs\": get_col_idxs(res_df, ['haopen', 'hahigh', 'halow', 'haclose']),  # heikin-ashi ver.\n","  \"step_col_info\": step_col_arr,\n","  \"stepmark_col_info\": stepmark_col_arr,\n","  \"ylim_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close'])  # , 'dc_upper_1h', 'dc_lower_1h', 'dc_upper_15m', 'dc_lower_15m'\n","}"],"metadata":{"id":"FnSydxFXn_f9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1646477958719,"user_tz":-540,"elapsed":297,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"27658400-ff20-401a-c56d-7f92e80dea37"},"execution_count":50,"outputs":[{"output_type":"stream","name":"stderr","text":["/content/drive/My Drive/Colab Notebooks/JnQ/funcs/funcs_plot_check.py:10: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  step_col_arr = np.array(col_list)\n"]}]},{"cell_type":"code","source":["_ = [plot_check_v2(np_df, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir, **col_idx_dict) for param_zip in zip(np_plot_params, np_plot_params[::-1])]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1-w3GdQ8wUd1-a0DfJqBTfnSyO3E1LQGU"},"id":"Roy40BmByyZc","executionInfo":{"status":"ok","timestamp":1646478062676,"user_tz":-540,"elapsed":101644,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"82855431-8be2-4344-da28-21bc5ecc67dc"},"execution_count":51,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"markdown","source":["### plot_funcs - legacy"],"metadata":{"id":"MQ8w8nWVXlGj"}},{"cell_type":"code","source":["def plot_check_v2(data, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir=None, **col_idx_dict):\n","  # start_0 = time.time()\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(30, 18))\n","  nrows, ncols = 2, 2\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                         ncols=ncols,\n","                         height_ratios=[3, 1]\n","                         )\n","  for gs_idx, params in enumerate(param_zip):\n","    ax = fig.add_subplot(gs[gs_idx])\n","    iin, iout, pr, ep, tp, entry_idx, exit_idx, open_idx, lvrg, fee, tp_line, out_line = params\n","\n","    # ------------ add_col section ------------ #\n","    a_data = data[int(iin):int(iout)]\n","    # a_data = data[iin:iout]\n","    # ------ candles ------ #\n","    candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","    \n","    # ------ add cols ------ #\n","    [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","    [stepmark_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['stepmark_col_info']]\n","\n","    # ------ ep, tp + xlim ------ #\n","    eptp_hvline_v2(config, ep, tp, entry_idx, exit_idx, open_idx, tp_line, out_line, front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, **col_idx_dict)    \n","\n","    #     Todo    #\n","    #     3. outer_price plot 일 경우, gs_idx + nrows 하면 됨\n","\n","    # ------ trade_info ------ #\n","    plt.title(pr_msg.format(entry_idx, exit_idx, pr, lvrg, fee))\n","\n","  if plot_check_dir is None:\n","    plt.show()\n","    print()\n","  else:\n","    fig_name = plot_check_dir +  \"/%s.png\" % int(entry_idx)\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","  plt.close()\n","  # print(\"elapsed time :\", time.time() - start_0)  \n","\n","  return\n","\n","\n","def eptp_hvline_v2(config, ep, tp, entry_idx, exit_idx, open_idx, tp_line, out_line, front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, **col_idx_dict):\n","  # ------ vline entry & exit ------ #\n","  ep_tick = int(entry_idx - iin)\n","  open_tick = ep_tick - int(entry_idx - open_idx)\n","  tp_tick = ep_tick + int(exit_idx - entry_idx)\n","\n","  if front_plot:\n","    x_max = ep_tick\n","  if (iout - iin) > x_max:\n","    x_margin = x_max * x_margin_mult\n","    plt.xlim(0 - x_margin, x_max + x_margin)\n","  x0, x1 = plt.gca().get_xlim()\n","  # ------ hline entry & exit ------ #\n","  ep_xmin = ep_tick / x1\n","  tp_xmin = tp_tick / x1\n","  plt.axhline(ep, linestyle='--', xmin=ep_xmin, xmax=1, alpha=1, color='lime')  # ep line axhline\n","  plt.text(x1, ep, ' ep :\\n {}'.format(ep), ha='left', va='center', fontweight='bold')  # ep line label\n","  plt.axhline(tp, linestyle='--', xmin=tp_xmin, xmax=1, alpha=1, color='lime')  # tp line axhline\n","  plt.text(x1, tp, ' tp :\\n {}'.format(tp), ha='left', va='center', fontweight='bold')  # tp line label\n","\n","  # ------ tpout_line ------ #\n","  plt.axhline(tp_line, linewidth=1, linestyle='-', alpha=1, color='#ffffff')\n","  plt.text(x0, tp_line, ' %s' % config.tr_set.tp_gap, ha='left', va='center', fontweight='bold')\n","  plt.axhline(out_line, linewidth=1, linestyle='-', alpha=1, color='#ffffff')\n","  plt.text(x0, out_line, ' %s' % config.tr_set.out_gap, ha='left', va='center', fontweight='bold')\n","  \n","  # ------ ylim ------ #\n","  if front_plot:      \n","    y_lim_data = a_data[:open_tick + 1, col_idx_dict['ylim_col_idxs']]  # +1 for including open_tick\n","  else:\n","    y_lim_data = a_data[:, col_idx_dict['ylim_col_idxs']]\n","  y_min = y_lim_data.min()\n","  y_max = y_lim_data.max()\n","  y_margin = (y_max - y_min) * y_margin_mult\n","  plt.ylim(y_min - y_margin, y_max + y_margin)\n","  \n","  # ------ open ep tp vline ------ #     \n","  y0, y1 = plt.gca().get_ylim()\n","  l_data = a_data[:tp_tick + 1, col_idx_dict['ohlc_col_idxs'][2]]  # +1 for including tp_tick\n","  open_ymax, ep_ymax, tp_ymax = [(l_data[tick_] - y0) / (y1 - y0) - .05 for tick_ in [open_tick, ep_tick, tp_tick]]  # -.05 for margin\n","  plt.axvline(open_tick, 0, open_ymax, alpha=1, linestyle='--', color='#ffeb3b')  # 추후, tick 별 세부 정의가 달라질 수 있음을 고려해 multi_line 작성 유지\n","  plt.axvline(ep_tick, 0, ep_ymax, alpha=1, linestyle='--', color='#ffeb3b')\n","  plt.axvline(tp_tick, 0, tp_ymax, alpha=1, linestyle='--', color='#ffeb3b')\n","\n","  return"],"metadata":{"id":"ESReTMpP7SoO","executionInfo":{"status":"ok","timestamp":1646475215904,"user_tz":-540,"elapsed":336,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"execution_count":16,"outputs":[]},{"cell_type":"markdown","source":["### sync_check"],"metadata":{"id":"X0FsT-8FZRti"}},{"cell_type":"code","source":["save_plot = 0\n","\n","open_idx_range = reversed(range(0, len(res_df), 1000))\n","plot_range = 100\n","\n","x_max = 400\n","\n","inversion = 0\n","hedge = 0\n","\n","\n","if save_plot:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".ftr\", \"\")\n","  try:\n","    os.mkdir(plot_check_dir)\n","  except:\n","\n","    #     remove existing dir   #\n","    shutil.rmtree(plot_check_dir)\n","    print(plot_check_dir, 'removed !')\n","    os.mkdir(plot_check_dir)\n","    # pass\n","    \n","\n","prev_plotsize = 30\n","post_plotsize = 20\n","\n","\n","\n","h_candle_intv1 = 15\n","h_candle_intv2 = 60\n","if 'hopen_{}'.format(h_candle_intv2) not in res_df.columns:\n","  res_df = h_candle(res_df, h_candle_intv1)\n","  res_df = h_candle(res_df, h_candle_intv2)\n","\n","res_df[\"ma30_1m\"] = res_df['close'].rolling(30).mean()\n","res_df[\"ma60_1m\"] = res_df['close'].rolling(60).mean()\n","\n","res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line)\n","# res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=1, use_dtk_line=1)\n","# break\n","\n","rtc_list = [\"short_tp_1_{}\".format(strat_version), \"short_tp_gap_{}\".format(strat_version), \"long_tp_1_{}\".format(strat_version), \"long_tp_gap_{}\".format(strat_version)]\n","# h_rtc_list = [\"h_short_tp_1\", \"h_short_tp_gap\", \"h_long_tp_1\", \"h_long_tp_gap\"]\n","dtk_list = [\"short_dtk_1_{}\".format(strat_version), \"short_dtk_gap_{}\".format(strat_version), \"long_dtk_1_{}\".format(strat_version), \"long_dtk_gap_{}\".format(strat_version),\n","            # \"short_dtk_1_line\", \"short_dtk_gap_line\", \"long_dtk_1_line\", \"long_dtk_gap_line\",\n","            \"short_dtk_plot_1\", \"short_dtk_plot_gap\", \"long_dtk_plot_1\", \"long_dtk_plot_gap\"]\n","dc_v2_list = ['dc_upper_v2_{}'.format(strat_version), 'dc_lower_v2_{}'.format(strat_version)]\n","\n","\n","ohlc_list = ['open', 'high', 'low', 'close'] # + basic_st_list\n","hcandle_list = ['hopen_%s' % h_candle_intv1, 'hclose_%s' % h_candle_intv1, 'hopen_%s' % h_candle_intv2, 'hclose_%s' % h_candle_intv2]\n","# hcandle_list = ['hopen_%s' % h_candle_intv1, 'hclose_%s' % h_candle_intv1, 'hhigh_%s' % h_candle_intv2, 'hlow_%s' % h_candle_intv2]\n","\n","# --------------------- dc & bb level --------------------- #\n","dc_interval = '1m'\n","hdc_interval = '5m'\n","hhdc_interval = '15m'\n","\n","st_list = ['st_base_%s' % hhdc_interval, 'st_upper_%s' % hhdc_interval, 'st_lower_%s' % hhdc_interval]\n","\n","dc_list = ['dc_upper_%s' % dc_interval, 'dc_lower_%s' % dc_interval]\n","hdc_list = ['dc_upper_%s' % hdc_interval, 'dc_lower_%s' % hdc_interval]\n","hhdc_list = ['dc_upper_%s' % hhdc_interval, 'dc_lower_%s' % hhdc_interval]\n","\n","bb_interval = dc_interval\n","hbb_interval = hdc_interval\n","hhbb_interval = hhdc_interval\n","\n","bb_list = ['bb_upper_%s' % bb_interval, 'bb_lower_%s' % bb_interval]\n","hbb_list = ['bb_upper_%s' % hbb_interval, 'bb_lower_%s' % hbb_interval]\n","hhbb_list = ['bb_upper_%s' % hhbb_interval, 'bb_lower_%s' % hhbb_interval]\n","\n","bbwp_list = ['bbwp', 'bbwp_ma']\n","\n","\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1']\n","senkoub_list = ['senkou_b1']\n","\n","sar_list = ['sar_3m', 'sar_5m', 'sar_15m']\n","\n","ma_list = ['ma30_1m', 'ma60_1m']\n","sma_list = ['sma_1m']\n","\n","ema_list = ['ema_5m']\n","# cb_list = ['cloud_bline_1m']\n","cb_list = ['cloud_bline_30m']\n","# cb_list = ['cloud_bline_5m']\n","\n","\n","\n","# -------------- under price phase -------------- #\n","# macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3']\n","# trix_list = ['trix1', 'trix2', 'trix3']\n","# stoch_list = ['stoch_5m']\n","# fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","# cctbbo_list = ['cctbbo']\n","# emaroc_list = ['ema_roc']\n","rsi_list = ['rsi_%s' % config.loc_set.point.exp_itv] \n","cci_list = ['cci_%s' % config.loc_set.point.exp_itv] \n","\n","\n","# -------------- summation -------------- #\n","# input_colname = ohlc_list + basic_st_list + pline_list + bb_list + hbb_list + sma_list + cb_list + stoch_list + sar_list + dc_list\n","input_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + hhdc_list + dtk_list + dc_v2_list + rsi_list + ema_list + ma_list + st_list# + cci_list\n","\n","# yrange_colname = ohlc_list + basic_st_list + pline_list # currently just used for ymin, ymax\n","yrange_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + hhdc_list + dc_v2_list + ema_list # currently just used for ymin, ymax\n","yrange_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + dc_v2_list + ema_list # currently just used for ymin, ymax\n","\n","\n","\n","odd_cnt = 0\n","obj_i = -1\n","rev_obj_i = 0\n","\n","#   지금, continue 발생시 true / false idx 가 같이 상승하는 문제\n","\n","# while 1:\n","for open_idx in open_idx_range:\n","\n","  # if obj_i >= len_obj or rev_obj_i >= len_obj:\n","  #   break\n","\n","  # if odd_cnt % 2 == 1 and tf_plot: #  loss plot 을 채워야하는 상황\n","  #   rev_obj_i += 1\n","\n","  # else:\n","  #   obj_i += 1\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","  \n","\n","  odd_cnt += 1\n","\n","  # break\n","\n","  print(\"open_idx :\", open_idx)\n","  \n","  plot_df = res_df.iloc[open_idx - prev_plotsize:open_idx + plot_range + post_plotsize][input_colname]\n","  \n","  odds = 1 if odd_cnt % 2 == 1 else 2\n","  if odds == 1:\n","\n","    plt.style.use('dark_background')\n","\n","    fig = plt.figure(figsize=(26, 18))\n","    \n","    gs = gridspec.GridSpec(nrows=2, # row 몇 개 \n","                        ncols=2, # col 몇 개 \n","                        height_ratios=[3, 1]\n","                        )\n","    \n","  ax = fig.add_subplot(gs[odds - 1])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='#26a69a', colordown='#ef5350', alpha=0.5)\n","\n","  # ---------- h_candle ---------- #\n","  alpha = 1\n","  lw = 1\n","  for cd_i, candle in enumerate(hcandle_list):\n","\n","    if cd_i == 2:\n","      lw = 2      \n","    plt.step(np.arange(len(plot_df)), plot_df[candle].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","\n","  # alpha = 0.1\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['hclose_60'].values, plot_df['hopen_60'].values, \n","  #                     where=1, facecolor='#ffffff', alpha=alpha)  \n","  \n","\n","   # --------- ma --------- #\n","  alpha = 1\n","  lw = 2\n","  for ma_i, item in enumerate(ma_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","   # --------- ema --------- #\n","  alpha = 1\n","  lw = 4\n","  for sm_i, item in enumerate(ema_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","    \n","   # --------- st --------- #\n","  alpha = 1\n","  lw = 2\n","  for sm_i, item in enumerate(st_list):\n","      plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#00ff00', linewidth=lw)\n","\n","  # ---------------------- dc_v2 ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(dc_v2_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","  # # ---------------------- dc ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(dc_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","  # # ---------------------- hdc ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(hdc_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#e65100', linewidth=lw)\n","\n","  # # ---------------------- hhdc ---------------------- #\n","  # alpha = 1\n","  # lw = 4\n","  # for sm_i, item in enumerate(hhdc_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#c2185b', linewidth=lw)\n","\n","\n","  # # ---------------------- bb ---------------------- #\n","  # alpha = 1\n","  # lw = 1\n","  # for sm_i, item in enumerate(bb_list):\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","\n","  # alpha = 0.2\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % bb_interval].values, plot_df['bb_lower_%s' % bb_interval].values, \n","  #                     where=plot_df['bb_upper_%s' % bb_interval].values >= plot_df['bb_lower_%s' % bb_interval].values, facecolor='#ffffff', alpha=alpha)   \n","\n","  # # ---------------------- hbb ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(hbb_list):\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ff00ff', linewidth=lw)\n","  \n","  # alpha = 0.2\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % hbb_interval].values, plot_df['bb_lower_%s' % hbb_interval].values, \n","  #                     where=plot_df['bb_upper_%s' % hbb_interval].values >= plot_df['bb_lower_%s' % hbb_interval].values, facecolor='#ff00ff', alpha=alpha) \n","  \n","  # # ---------------------- hhbb ---------------------- #\n","\n","  # alpha = 1\n","  # lw = 4\n","  # for sm_i, item in enumerate(hhbb_list):\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#3179f5', linewidth=lw)\n","  \n","  # alpha = 0.2\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % hhbb_interval].values, plot_df['bb_lower_%s' % hhbb_interval].values, \n","  #                     where=plot_df['bb_upper_%s' % hhbb_interval].values >= plot_df['bb_lower_%s' % hhbb_interval].values, facecolor='#3179f5', alpha=alpha) \n","  \n","  # ------------------- dtk_line (old, tp_line) ------------------- #\n","  \n","  # alpha = 1\n","  # lw = 2\n","  # rtc_ratio_list = [config.loc_set.zone.dt_k]\n","  \n","  # for rtc_k in rtc_ratio_list:    \n","  #   # plt.step(np.arange(len(plot_df)), plot_df['short_dtk_1_line'].values - plot_df['short_dtk_gap_line'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['long_dtk_1_line'].values + plot_df['long_dtk_gap_line'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","\n","  # hy_min = np.min(plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * rtc_k)\n","  # hy_max = np.max(plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * rtc_k)  \n","\n","  # alpha = 1\n","  # lw = 4\n","  # # h_rtc_ratio_list = [config.loc_set.zone.dt_k]\n","  # h_rtc_ratio_list = [config.loc_set.zone.zone_dt_k]\n","  # # h_rtc_ratio_list = [0.272, 0.36, 0.4, 0.5]\n","  \n","  # for h_rtc_k in h_rtc_ratio_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df['short_dtk_plot_1'].values - plot_df['short_dtk_plot_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['long_dtk_plot_1'].values + plot_df['long_dtk_plot_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['h_short_tp_1'].values - plot_df['h_short_tp_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['h_long_tp_1'].values + plot_df['h_long_tp_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","\n","  # # hy_min = np.min(plot_df['short_dtk_plot_1'].values - plot_df['short_dtk_plot_gap'].values * h_rtc_k)\n","  # # hy_max = np.max(plot_df['long_dtk_plot_1'].values + plot_df['long_dtk_plot_gap'].values * h_rtc_k)  \n","\n","  # ------------- y lim ------------- #  \n","  y_max = max(np.max(plot_df[yrange_colname]))\n","  y_min = min(np.min(plot_df[yrange_colname]))\n","  # y_max = max(y_max, y_max_)\n","  # y_min = min(y_min, y_min_)\n","  \n","  # hy_min = np.min(plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * 0.36)\n","  # hy_max = np.max(plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * 0.36)  \n","  # y_max = max(y_max, y_max_, hy_max)\n","  # y_min = min(y_min, y_min_, hy_min)\n","\n","  if np.isnan(y_max) or np.isnan(y_min):\n","    print('continued in yminmax')\n","    continue\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","\n","  plt.ylim(y_min, y_max)\n","\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  #           rsi          #    \n","  plt.subplot(gs[odds + 1])\n","  alpha = 1\n","  for rsi_ in rsi_list:\n","    plt.step(np.arange(len(plot_df)), plot_df[rsi_].values, 'g', alpha=alpha)\n","    # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","    alpha -= 0.2\n","  plt.axhline(50, linestyle='--')\n","  plt.axhline(50 + config.loc_set.point.osc_band, linestyle='--')\n","  plt.axhline(50 - config.loc_set.point.osc_band, linestyle='--')\n","  \n","  plt.axvline(prev_plotsize, linestyle='--')\n","  \n","  #           cci          #    \n","  # plt.subplot(gs[odds + 1])\n","  # alpha = 1\n","  # for cci_ in cci_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cci_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axhline(config.loc_set.point.osc_band, linestyle='--')\n","  # plt.axhline(-config.loc_set.point.osc_band, linestyle='--')\n","  \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","\n","\n","  if len(plot_df) > x_max:\n","    x_margin = x_max / 20\n","    plt.xlim(0 - x_margin, x_max + x_margin)\n","\n","\n","  if not save_plot:\n","    if odds == 2:\n","      plt.show()\n","      plt.close()\n","  \n","  else:\n","    # ---------- save mode ---------- #\n","    fig_name = plot_check_dir +  \"/%s.png\" % t_i\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","\n","  # plt.close()  \n","  print()\n","\n","  # break\n"],"metadata":{"id":"inQ6f-CDZYkr"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"13a-U32Uy50I"},"source":["### brief np_pr survey"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"L9LdjV2uUWnp"},"outputs":[],"source":["# plot_pr_list[:100]\n","plt.plot(np_pr)\n","plt.axhline(1)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"TBE0l6dHRYrE"},"source":["### close & pr comp."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":877},"executionInfo":{"elapsed":1436,"status":"ok","timestamp":1636355589887,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"-txULkhXRbz5","outputId":"7cda9fc7-4a4e-4c52-ffa3-a974b5f7c66f"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 3 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 3 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]}],"source":["#     chunky survey 필요함    #\n","chunk_size = 50000\n","\n","sync_pr = np.ones(len(res_df))\n","sync_tr = np.zeros(len(res_df))\n","# sync_tr = np.empty(len(res_df))\n","# sync_tr[:] = np.nan\n","\n","max_tr = np.max(tp_ratio_list)\n","min_tr = np.min(tp_ratio_list)\n","\n","for ck_i in range(0, len(res_df), chunk_size):\n","\n","  chunked_df = res_df.iloc[ck_i:ck_i + chunk_size]\n","  # break\n","\n","  for pr_, eptp_idx, tr_ in zip(pr_list[ck_i:ck_i + chunk_size], trade_list[ck_i:ck_i + chunk_size], tp_ratio_list[ck_i:ck_i + chunk_size]):\n","    # print(pr_, eptp_idx)\n","    sync_pr[eptp_idx[-1][0]] = pr_\n","    sync_tr[eptp_idx[-1][0]] = tr_\n","    # break\n","\n","  chunked_pr = sync_pr[ck_i:ck_i + chunk_size]\n","  chunked_tr = sync_tr[ck_i:ck_i + chunk_size]\n","  chunked_tr = np.where(np.isnan(chunked_tr), pd.Series(chunked_tr).shift(1), chunked_tr)\n","\n","  # plt.figure(figsize=(8, 6))\n","\n","  plt.subplot(311)\n","  plt.plot(np.arange(len(chunked_df)), chunked_df['close'])\n","  # plt.show()\n","\n","  plt.subplot(312)\n","  plt.plot(np.cumprod(chunked_pr))\n","  \n","  plt.subplot(313)\n","  plt.plot(chunked_tr)\n","  plt.ylim(min_tr + 0.5 * (max_tr - min_tr), max_tr)\n","  \n","  plt.show()\n","  print()\n"]},{"cell_type":"markdown","metadata":{"id":"Qys2Bw5Ou3u9"},"source":["### plot indi. legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pi5ntOOVu6JT"},"outputs":[],"source":["\n","  # ---------------------- ma ---------------------- #\n","   # --------- ema --------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(ema_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  #   # --------- sma --------- #\n","  # alpha = 1\n","  # for sm_i, sma in enumerate(sma_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 4\n","  #   plt.step(np.arange(len(plot_df)), plot_df[sma].values, alpha=alpha, color='#e91e63', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  \n","  # ---------------------- cb ---------------------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(cb_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#5b9cf6', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","\n","  \n","  # ---------------------- sar ---------------------- #\n","  # alpha = 1\n","  # markersize = 5\n","  # for sar in sar_list:\n","  #   plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","  #   markersize += 1\n","  #   alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  # alpha = 0.7\n","  # for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","  #                     where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","  #                     where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","  #   alpha -= 0.05\n","  \n","\n","\n","  # ---------------------- outer price indi. ---------------------- #\n","  #           macd          #\n","  # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","    \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for stoch_ in stoch_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[stoch_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(stoch_upper, linestyle='--')\n","  # plt.axhline(stoch_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- cctbbo ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for cctbbo in cctbbo_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cctbbo].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(cctbbo_upper, linestyle='--')\n","  # plt.axhline(cctbbo_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- ema_roc ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for emaroc in emaroc_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[emaroc].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","  \n","  # ---------- bbw ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for bbwp_ in bbwp_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[bbwp_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(bbwp_thresh, linestyle='--')\n","\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n"]},{"cell_type":"markdown","metadata":{"id":"cj9X6S1jJjER"},"source":["### plot nontp case"]},{"cell_type":"markdown","metadata":{"id":"tApzvz_gK9lR"},"source":["## legacy"]},{"cell_type":"markdown","metadata":{"id":"FaRGwR4NEop2"},"source":["### shifting"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"a8aYsjEgQnGF"},"outputs":[],"source":["org_res_df = res_df.copy()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":291,"status":"ok","timestamp":1626515312874,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"RF3RM2G2RCb1","outputId":"ba8f6a75-d4df-4f85-cd0f-190935341f7a"},"outputs":[{"name":"stdout","output_type":"stream","text":["                            open     high  ...  min_upper  max_lower\n","2021-06-30 23:55:59.999  0.27223  0.27281  ...   0.272145    0.27005\n","2021-06-30 23:56:59.999  0.27274  0.27290  ...   0.272145    0.27005\n","2021-06-30 23:57:59.999  0.27246  0.27257  ...   0.272523    0.27021\n","2021-06-30 23:58:59.999  0.27166  0.27183  ...   0.272523    0.27021\n","2021-06-30 23:59:59.999  0.27144  0.27211  ...   0.272523    0.27021\n","\n","[5 rows x 37 columns]\n","                            open     high  ...  min_upper  max_lower\n","2021-06-30 23:55:59.999  0.27223  0.27281  ...   0.272523    0.27021\n","2021-06-30 23:56:59.999  0.27274  0.27290  ...        NaN        NaN\n","2021-06-30 23:57:59.999  0.27246  0.27257  ...        NaN        NaN\n","2021-06-30 23:58:59.999  0.27166  0.27183  ...        NaN        NaN\n","2021-06-30 23:59:59.999  0.27144  0.27211  ...        NaN        NaN\n","\n","[5 rows x 37 columns]\n"]}],"source":["#         refresh res_df      #\n","res_df = org_res_df.copy()\n","print(org_res_df.tail(5))\n","\n","# break\n","\n","\n","shift_size = -4\n","# shift_size = -1\n","# shift_size = -7\n","# shift_size = +3\n","\n","res_df['min_upper'] = res_df['min_upper'].shift(shift_size)\n","res_df['max_lower'] = res_df['max_lower'].shift(shift_size)\n","res_df['minor_ST1_Trend'] = res_df['minor_ST1_Trend'].shift(shift_size)\n","res_df['minor_ST2_Trend'] = res_df['minor_ST2_Trend'].shift(shift_size)\n","res_df['minor_ST3_Trend'] = res_df['minor_ST3_Trend'].shift(shift_size)\n","res_df['middle_line'] = res_df['middle_line'].shift(shift_size)\n","\n","print(res_df.tail(5))"]},{"cell_type":"markdown","metadata":{"id":"2gxvme1PC6ha"},"source":["### load model"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5831,"status":"ok","timestamp":1628862368878,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"dtYdAuSsC72_","outputId":"e8dccc53-aaa7-4bab-ed8d-753f634c08d6"},"outputs":[{"name":"stdout","output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/resnet/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5\n","94773248/94765736 [==============================] - 1s 0us/step\n"]}],"source":["# model_name = 'inner_tick_cnnreg_lscalemm_prefee_gpu_%s_%s_%s_%s_%s.h5'\n","\n","# model = tf.keras.models.load_model(ckpt_path + model_name)\n","\n","from tensorflow.keras.applications.resnet50 import ResNet50\n","\n","model = ResNet50(weights='imagenet', include_top=False)\n","# model.summary()\n"]},{"cell_type":"markdown","metadata":{"id":"5la6usMOFzkX"},"source":["#### gen selected vector"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oQk3-jbKF8FB"},"outputs":[],"source":["def min_max_scale(npy_x):\n","\n","  return (npy_x - np.min(npy_x)) / (np.max(npy_x) - np.min(npy_x))\n","\n","def expand_dims(npy_x):\n","\n","  row, col = npy_x.shape\n","  npy_x2 = np.array(npy_x).reshape(-1, row, col, 1).astype(np.float32)\n","  # input_x = np.array(data_x).reshape(-1, row, col).astype(np.float32)\n","\n","  #     1c to 3c    #\n","  npy_x3 = npy_x2 * np.ones(3, dtype=np.float32)[None, None, None, :]\n","\n","  return npy_x3\n","\n","\n","def vector_dist(f1, f2):\n","  return np.linalg.norm(f1-f2)\n","\n","\n","\n","# ------------------------ params ------------------------  #\n","selected_i = 500\n","input_size = 100\n","\n","\n","\n","#   1. 선택된 인덱스를 입력받았을 때, input generating 형태만 만들어놓고,     #\n","#   1-1. input cols 필요함    #\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower']\n","# senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","# senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","\n","sma_list = ['sma']\n","\n","#     -------------- outer price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","cctbbo_list = ['cctbbo']\n","\n","selected_price_colname = basic_list + senkoua_list + senkoub_list + sar_list\n","selected_outprice_colname = [macd_list]\n","\n","\n","#         global scaling for outer price data       #\n","#         1. nan 처리       #\n","\n","# # print((np.isnan(df.values)))\n","# print(\"np.sum(np.isnan(df.values), axis=0) :\", np.sum(np.isnan(df.values), axis=0))\n","\n","# max_nan = np.max(np.sum(np.isnan(df.values), axis=0))\n","# # print(max_nan)\n","\n","# df = df.iloc[max_nan:-max_nan]\n","\n","# total_gdata = []\n","# for g_col in selected_outprice_colname:\n","\n","#   temp_data = min_max_scale(res_df[g_col])\n","#   total_gdata.append(temp_data)\n","\n","\n","\n","#   1-2. cols 에 따른, scaling method 구분함    #\n","onprice_input_x = min_max_scale(res_df[selected_price_colname].iloc[selected_i - input_size:selected_i].values)\n","print(onprice_input_x.shape)\n","\n","\n","#   2. plot_check 에서 본인이 원하는 shape 의 인덱스를 선택   #\n","#   3. vertorize, \n","#   3-1. input generator 를 이용해 entry signal 발생할 때마다 dist 비교 진행    #\n","re_onprice_input_x = expand_dims(onprice_input_x)\n","print(re_onprice_input_x.shape)\n","      \n","# break\n","\n","selected_vector = model.predict(re_onprice_input_x, verbose=1)\n","print(selected_vector.shape)"]},{"cell_type":"markdown","metadata":{"id":"OJqkmkpsLCYC"},"source":["### tr_tresh calc"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gcpo4MGd9Wm4"},"outputs":[],"source":["res_wr = 0.6\n","# tr_thresh = 1\n","# tr_thresh = ((1 - res_wr) / res_wr) ** 0.5\n","tr_thresh = ((1 - res_wr) / res_wr) + 0.01\n","# tr_thresh = 2.6\n","print(\"res_wr :\", res_wr)\n","print(\"tr_thresh :\", tr_thresh)\n","\n","\n","#   단리    #\n","trade_num = 1000\n","asset = 1 # thousand USDT\n","test_loss_gap = 0.95  # fee adjusted\n","test_pr_gap = 1 + (1 - test_loss_gap) * tr_thresh\n","\n","test_loss_cnt = trade_num * (1 - res_wr)\n","test_pr_cnt = trade_num * res_wr\n","\n","test_trade_list = [test_pr_gap] * int(test_pr_cnt) + [test_loss_gap] * int(test_loss_cnt)\n","random.shuffle(test_trade_list)\n","# print(\"len(test_trade_list) :\", len(test_trade_list))\n","print(test_trade_list[:10])\n","print()\n","\n","# print(\"%.5f\" % np.cumprod(test_trade_list)[-1])\n","for tr_thresh_ in np.arange(1, 3, 0.2):\n","  if (1 + (1 - test_loss_gap) * tr_thresh_) ** test_pr_cnt * test_loss_gap ** test_loss_cnt > 1:\n","    break\n","print(\"복리를 위한 tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumprod(test_trade_list)[-1] :\", np.cumprod(test_trade_list)[-1])\n","print(\"total_pr : \", np.cumprod(test_trade_list)[-1])\n","print()\n","#   복리 tr_thresh  #\n","#   1. trade_num 에 영향 받지 않음\n","#   2. loss_gap 에 비례함\n","\n","for tr_thresh_ in np.arange(1, 3, 0.01):\n","  if ((1 - test_loss_gap) * tr_thresh_) * test_pr_cnt + (test_loss_gap - 1) * test_loss_cnt > 0:\n","    break\n","np_test_trade = np.array(test_trade_list) - 1\n","print(np_test_trade[:10])\n","# print(\"%.3f\" % )\n","print(\"단리를 위한 tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumsum(np_test_trade)[-1] :\", np.cumsum(np_test_trade)[-1])\n","print(\"total_pr : \", 1 + np.cumsum(np_test_trade)[-1])\n"]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":["Ic1mfmwWCIBu","VdukVo5-Suzj","Bw5JibDKSuzj","Pe0QpnORSuzk","E0n53hflJbnp","MlFkpO1MSuzl","t1E_eAyPSuzm","WVAKq3i8Suzm","L7l5CTJfSuzn","x_XGJqBi8Jex","MSUY4nnku3s9","epgS5Dksu-HX","M8-EChy0VsDr","Iy76iO7gztne","xpyP5t8Ht_pE","dzla8i9_ysmP","Up1TNNxbfKbk","zQ-roiifspcX","X0FsT-8FZRti","13a-U32Uy50I","TBE0l6dHRYrE","Qys2Bw5Ou3u9","tApzvz_gK9lR","FaRGwR4NEop2","2gxvme1PC6ha","5la6usMOFzkX","OJqkmkpsLCYC"],"name":"IDv3_3_vec_backi2(0305_vline).ipynb","toc_visible":true,"provenance":[],"authorship_tag":"ABX9TyMnep3Y+nmemUJAkSXOuQk7"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}