{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"6rmQpzEGXfCw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653644575639,"user_tz":-540,"elapsed":26438,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"9e85dc1e-9bd3-4b70-abab-a30728a66caa"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","import os, sys\n","\n","current_path = '/content/drive/My Drive/Colab Notebooks/JnQ/'\n","\n","os.chdir(current_path)\n","\n","strat_pkg = 'IDE'\n","\n","mpl_finance_path = '/content/drive/My Drive/Colab Notebooks/JnQ/mpl_finance'\n","ta_lib_path = '/content/drive/My Drive/Colab Notebooks/JnQ/ta_lib'\n","\n","if mpl_finance_path not in sys.path:\n","\n","  try:\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ')\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ/{}'.format(strat_pkg))\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ/funcs')\n","    sys.path.insert(0, mpl_finance_path)\n","    sys.path.insert(0, ta_lib_path)\n","    \n","  except Exception as e:\n","    print(e)"]},{"cell_type":"markdown","metadata":{"id":"8uqYv5StTazo"},"source":["# requirements"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"9qGt60DKTZmf","executionInfo":{"status":"ok","timestamp":1653644610707,"user_tz":-540,"elapsed":35073,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# !pip install zigzag --target=$'/content/drive/My Drive/Colab Notebooks/JnQ/zigzag'\n","# !pip install talib-binary --target=$'/content/drive/My Drive/Colab Notebooks/JnQ/ta_lib'\n","# !pip install findiff\n","\n","# import nvstrings, nvcategory, cudf\n","# import cuml\n","# import cudf\n","\n","import os\n","import talib\n","from funcs.funcs_idep import *\n","from funcs.funcs_duration_v2 import *\n","from funcs.funcs_plot_check import *\n","from funcs.funcs_pairing import *\n","# from funcs.funcs_ide import *\n","# from funcs.funcs_indicator_candlescore import *\n","from funcs.funcs_indicator import *\n","from funcs.funcs_trader import *\n","from ast import literal_eval\n","import logging\n","import importlib\n","\n","import mpl_finance as mf\n","import matplotlib.pyplot as plt\n","from matplotlib import gridspec\n","# from zigzag import *\n","# from tqdm.notebook import tqdm\n","\n","# import IPython\n","# import IPython.display\n","\n","import numpy as np\n","# import jax.numpy as np\n","import pandas as pd\n","# import seaborn as sns\n","# import tensorflow as tf\n","# from scipy import stats, signal\n","\n","import pickle\n","import shutil\n","import json\n","from easydict import EasyDict\n","import copy\n","\n","import datetime\n","from datetime import datetime\n","import random\n","import time\n","# import warnings\n","\n","# warnings.simplefilter(\"ignore\", category=RuntimeWarning)\n","\n","np.seterr(invalid=\"ignore\")\n","np.set_printoptions(suppress=True)\n","np.set_printoptions(linewidth=2000) \n","\n","pd.set_option('mode.chained_assignment',  None)\n","\n","pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)"]},{"cell_type":"markdown","metadata":{"id":"Ic1mfmwWCIBu"},"source":["# makeset - with to_htf dataframes"]},{"cell_type":"markdown","metadata":{"id":"AUSBU7T8Suzi"},"source":["## sync_check_make"]},{"cell_type":"code","source":["\n","def bb_level_v2(res_df, itv, period):\n","\n","    bb_base = res_df['bb_base_{}{}'.format(itv, period)].to_numpy()\n","\n","    bb_upper2 = 'bb_upper2_{}{}'.format(itv, period)\n","    bb_lower2 = 'bb_lower2_{}{}'.format(itv, period)\n","    bb_upper3 = 'bb_upper3_{}{}'.format(itv, period)\n","    bb_lower3 = 'bb_lower3_{}{}'.format(itv, period)\n","\n","    level_gap = res_df['bb_upper_{}{}'.format(itv, period)].to_numpy() - bb_base\n","\n","    res_df[bb_upper2] = bb_base + level_gap * 2\n","    res_df[bb_lower2] = bb_base - level_gap * 2\n","\n","    res_df[bb_upper3] = bb_base + level_gap * 3\n","    res_df[bb_lower3] = bb_base - level_gap * 3\n","\n","    return res_df"],"metadata":{"id":"kuf6ZhccgRj9"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QmhLikYlSuzi"},"outputs":[],"source":["def sync_check_make(df):\n","\n","    make_itv_list = ['3T', '5T', '15T', '30T', 'H', '4H', 'D']\n","    offset_list = ['1h', '1h', '1h', '1h', '1h', '1h', '9h']\n","\n","    assert len(make_itv_list) == len(offset_list), \"length of itv & offset_list should be equal\"\n","        \n","    htf_df_list = [to_htf(df, itv_=itv_, offset=offset_) for itv_, offset_ in zip(make_itv_list, offset_list)]\n","\n","    df_3T, df_5T, df_15T, df_30T, df_H, df_4H, df_D = htf_df_list\n","\n","    for htf_df in htf_df_list:\n","      print(\"{} -> \".format(pd.infer_freq(htf_df.index)), htf_df.tail(1))\n","\n","    # heikinashi_v2(res_df_)\n","    # h_candle_v3(df, df_5T, '5T')\n","    # df = h_candle_v4(df, df_5T)\n","    # df = h_candle_v4(df, df_15T)\n","    # df = h_candle_v4(df, df_30T)\n","    # df = h_candle_v4(df, 'D')\n","\n","    # df = candle_pattern_pkg(df, df_5T)\n","    # df = candle_pattern_pkg(df, df_30T)\n","    # df = candle_pattern_pkg(df, df_H)\n","    # df = candle_pattern_pkg(df, df_4H)\n","\n","    \n","    # df = enough_space(df, '15T', 1)\n","    \n","    # --------------- dc --------------- #  \n","    dc_period = 1\n","    # df = donchian_channel_v4(df, dc_period)\n","    # df = dc_line(df, df_5T, '5T')  # join 사용시에만 return df 허용함\n","    # df = dc_line(df, df_15T, '15T')\n","    # df = dc_line_v2(df, df_H, 'H', dc_period=5)\n","\n","    # df = dc_line_v4(df, df_15T, dc_period=dc_period)\n","    # print(\"dc phase done\")\n","\n","    # --------------- bb --------------- #  \n","    bb_period = 20\n","\n","    # upper, base, lower = talib.BBANDS(res_df_.close, timeperiod=20, nbdevup=1, nbdevdn=1, matype=0)\n","    \n","    # df = bb_width_v3(df, period=60, multiple=1)\n","    # df = bb_line(df, df_5T, '5T')\n","    # df = bb_line_v3(df, df_15T, 60)\n","\n","    # df = bb_level_v2(df, 'T', 60)\n","    # print(\"bb phase done\")\n","\n","    c_itv = '5T'\n","\n","    # df =  wick_ratio(df, c_itv)\n","    df =  wick_ratio(df, c_itv)\n","\n","    bb_itv= 'T'\n","\n","    # df = candle_range_ratio(df, c_itv, bb_itv, bb_period)\n","    # # candle_pumping_ratio(df, c_itv, bb_itv, bb_period)\n","\n","    dc_itv= '15T'\n","    dc_period = 4\n","    # df = candle_pumping_ratio_v2(df, c_itv, dc_itv, dc_period)\n","    # print(\"candle_pumping_ratio_v2 phase done\")\n","\n","    # df = dc_over_body_ratio(df, c_itv, dc_itv, dc_period)\n","    # print(\"dc_over_body_ratio phase done\")\n","\n","    # df = body_rel_ratio(df, c_itv)\n","    # print(\"body_rel_ratio phase done\")\n","\n","    # --------------- cbline --------------- #    \n","    # cloud_bline(df_3T, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_3T, [-1]), how='inner')\n","    # # cloud_bline(df_5T, 20)\n","    # # df = df.join(to_lower_tf_v2(df, df_5T, [-1]), how='inner')\n","    # cloud_bline(df_15T, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_15T, [-1]), how='inner')\n","    # cloud_bline(df_30T, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_30T, [-1]), how='inner')\n","    # cloud_bline(df_H, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_H, [-1]), how='inner')\n","    # cloud_bline(df_4H, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_4H, [-1]), how='inner')\n","\n","    # print(\"cbline phase done\")\n","\n","\n","\n","    # --------------- sd_dc --------------- #\n","    # df = sd_dc(df, 20, 40)\n","    # df = sd_dc(df, 20, 20)\n","    # df = sd_dc(df_5T, 20, 40, df)\n","    # df = sd_dc(df_H, 20, 40, df)\n","\n","    # print(\"sd_dc phase done\")\n","\n","    # --------------- imb_ratio --------------- #\n","    # imb_ratio(df, '5T')\n","    # imb_ratio_v3(df, \"5T\")\n","    # imb_ratio_v4(df, \"5T\")\n","\n","    # imb_ratio(df, 'H')\n","    # imb_ratio_v2(df, '5T')\n","    \n","    # print(\"imb_ratio phase done\")\n","\n","    # --------------- rel_abs_ratio --------------- #\n","    # rel_abs_ratio(df, '5T', norm_period=120)\n","\n","    # --------------- normalize data --------------- #\n","    # itv = 'T'\n","    # lb_period = 15\n","    # target_col = 'close_{}{}'.format(itv, lb_period)\n","    # target_data = df['close'].diff(lb_period).to_numpy()\n","    # norm_data(df, target_data, target_col)    \n","    # print(\"normalize data phase done !\")\n","\n","    # --------------- lucid sar --------------- #\n","    # lucid_sar_v2(df)\n","    # lucid_sar_v2(df_3T)\n","    # df = df.join(to_lower_tf_v2(df, df_3T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_5T)\n","    # df = df.join(to_lower_tf_v2(df, df_5T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_15T)\n","    # df = df.join(to_lower_tf_v2(df, df_15T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_30T)\n","    # df = df.join(to_lower_tf_v2(df, df_30T, [-2, -1]), how='inner')       \n","\n","    # print(\"sar phase done\")\n","\n","    # --------------- supertrend --------------- #\n","    # df = st_price_line(df, df_3T, '3m')\n","    # df = st_price_line(df, df_5T, '5m')\n","    # df = st_price_line(df, df_15T, '15m')\n","    # df = st_price_line(df, df_30T, '30m')\n","    # df = st_price_line(df, df_H, '1h')\n","    # df = st_price_line(df, df_4H, '4h')\n","\n","    # print(\"supertrend phase done\")\n","\n","    # --------------- rsi --------------- #  \n","    # df['rsi_1m'] = rsi(df, 14)    \n","    # df_5T['rsi_5m'] = rsi(df_5T, 14)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1]), columns=['rsi_5m']))\n","    \n","    # print(\"rsi phase done\")\n","\n","\n","    # --------------- cci --------------- #  \n","    # df['cci_1m'] = cci(df, 20)\n","\n","    # print(\"cci phase done\")\n","\n","    # --------------- ema --------------- #      \n","    # df_5T['ema_5m'] = ema(df_5T['close'], 195)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1]), columns=['ema_5m']))\n","    \n","    # print(\"ema phase done\")\n","        \n","    # --------------- stochastic --------------- #\n","    # df['stoch_1m'] = stoch(df, 13, 3, 3)\n","\n","    # df_5T['stoch'] = stoch(df_5T, 13, 3, 3)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","    # print(\"stoch phase done\")\n","\n","\n","    return df\n"]},{"cell_type":"markdown","metadata":{"id":"mEKyVbHWSuzi"},"source":["## make & save res_df (concat 생각하면, timeindex sync 맞춰야함)"]},{"cell_type":"markdown","metadata":{"id":"VdukVo5-Suzj"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"khKb9nhlSuzj"},"outputs":[],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  if '2021-07-01'.upper() not in file_list[i]:\n","  # if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    excel_name = key.replace(\".xlsx\", \"_st1h_backi2.xlsx\")\n","    excel_path = save_path + excel_name\n","\n","    if excel_name in exist_list:\n","      print(excel_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m 마지막 timeindex 의 date 기준, 08:59:59.999000 를 last timestamp 로 설정\n","      #      2. 시작 timestamp 는 모든 tf 의 가장 최근 시작 index,\n","      #       a. 1m 의 시작 timeindex 는 최소, htf 의 시작 timeindex 보다 interval 만큼 앞서야함\n","      #         i. 따라서 1m open_index, latest_open_index + 1d 를 하면 댐\n","      #           1. timestamp 으로 변환후 1day 를 더하고 datetime 으로 변환\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","    latest_open_index = sorted(open_indexes)[-1]\n","    \n","    open_ts = datetime.timestamp(latest_open_index)\n","    latest_open_index_1m = datetime.fromtimestamp(open_ts + a_day)\n","\n","    #   str 로 만들어 접근하면 불가함  #\n","    end_index = pd.to_datetime(str(df.index[-1]).split(\" \")[0] + \" 08:59:59.999000\")\n","    # break\n","\n","    sliced_df = df.loc[latest_open_index_1m:end_index] # to_lower_tf 의 기준 ltf\n","    sliced_second_df = second_df.loc[latest_open_index:end_index]\n","    sliced_third_df = third_df.loc[latest_open_index:end_index]\n","    sliced_fourth_df = fourth_df.loc[latest_open_index:end_index]\n","    sliced_fifth_df = fifth_df.loc[latest_open_index:end_index]\n","\n","    print(\"sliced index\")\n","    print(sliced_df.index[[0, -1]])\n","    print(sliced_second_df.index[[0, -1]])\n","    print(sliced_third_df.index[[0, -1]])\n","    print(sliced_fourth_df.index[[0, -1]])\n","    print(sliced_fifth_df.index[[0, -1]])\n","\n","    try:\n","      sliced_sixth_df = sixth_df.loc[latest_open_index:end_index]\n","      sliced_seventh_df = seventh_df.loc[latest_open_index:end_index]\n","\n","      print(sliced_sixth_df.index[[0, -1]])\n","      print(sliced_seventh_df.index[[0, -1]])\n","\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df, sliced_sixth_df, sliced_seventh_df)\n","    \n","    except:\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df)\n","\n","\n","\n","    res_df.to_excel(excel_path)\n","    print(excel_name, \"saved succesfully !\")"]},{"cell_type":"markdown","metadata":{"id":"Bw5JibDKSuzj"},"source":["### xlsx to feather"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VA-_gcA7Suzj"},"outputs":[],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  # if '2021-07-01'.upper() not in file_list[i]:\n","  if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    feather_name = key.replace(\".xlsx\", \".ftr\")\n","    # feather_path = save_path + feather_name\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m 마지막 timeindex 의 date 기준, 08:59:59.999000 를 last timestamp 로 설정\n","      #      2. 시작 timestamp 는 모든 tf 의 가장 최근 시작 index,\n","      #       a. 1m 의 시작 timeindex 는 최소, htf 의 시작 timeindex 보다 interval 만큼 앞서야함\n","      #         i. 따라서 1m open_index, latest_open_index + 1d 를 하면 댐\n","      #           1. timestamp 으로 변환후 1day 를 더하고 datetime 으로 변환\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","\n","    df.reset_index().to_feather(date_path + feather_name, compression='lz4')\n","    second_df.reset_index().to_feather(date_path2 + feather_name, compression='lz4')\n","    third_df.reset_index().to_feather(date_path3 + feather_name, compression='lz4')\n","    fourth_df.reset_index().to_feather(date_path4 + feather_name, compression='lz4')\n","    fifth_df.reset_index().to_feather(date_path5 + feather_name, compression='lz4')\n","    sixth_df.reset_index().to_feather(date_path6 + feather_name, compression='lz4')\n","    seventh_df.reset_index().to_feather(date_path7 + feather_name, compression='lz4')\n","\n","    print(\"xlsx converted to feather !\")\n","    "]},{"cell_type":"markdown","metadata":{"id":"Pe0QpnORSuzk"},"source":["### add itv_name to ftr"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"M-gl30KxSuzk"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","# dir_path = \"bbdc3m_backi2\"\n","# date = '2021-10-10'\n","date = '2021-07-01'\n","\n","db_path = './candlestick_concated/database_bn/non_cum/%s/' % date\n","os.makedirs(os.path.join(db_path), exist_ok=True)\n","\n","# exist_list = os.listdir(os.path.join(save_path, dir_path))\n","# break\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","        \n","    df = shutil.copy(date_path + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n","    second_df = shutil.copy(date_path2 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval2))\n","    third_df = shutil.copy(date_path3 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval3))\n","    fourth_df = shutil.copy(date_path4 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval4))\n","    fifth_df = shutil.copy(date_path5 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval5))\n","    sixth_df = shutil.copy(date_path6 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval6))\n","    seventh_df = shutil.copy(date_path7 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval7))\n","\n","    print(\"copied to\" + db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n"]},{"cell_type":"markdown","metadata":{"id":"4oZ1ohTtSuzk"},"source":["### feather ver. (database to res_df)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vgVHpnUsSuzk"},"outputs":[],"source":["# db_path = './candlestick_concated/database_ub/' # upbit\n","db_path = './candlestick_concated/database_bn/'   # binance\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","save_dir_path = \"bb1d_backi2\"\n","date = '2022-02-17'\n","\n","# concat_path = 'noncat' # 새로운 cols 를 기존 cum/concat 에 붙이려는 경우\n","concat_path = 'concat'\n","cum_path = \"cum\"\n","# cum_path = \"non_cum\"  # non_cum 으로 진행하는 경우, row concat 용도이기 때문에 noncat -> concat 으로 변경 (base cols 를 모두 담고 있음)\n","\n","load_path = os.path.join(db_path, cum_path, date)\n","save_path = os.path.join(save_path, save_dir_path, concat_path, cum_path, date)\n","\n","os.makedirs(save_path, exist_ok=True)\n","\n","file_list = os.listdir(load_path)\n","exist_list = os.listdir(save_path)\n","# break\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","\n","    if \"_1m\" not in key:\n","      continue\n","\n","    # feather_name = key.replace(\".ftr\", \"_%.ftr\" % save_dir_path)\n","    feather_name = key.replace(\"_1m\", \"\")\n","    feather_path = os.path.join(save_path, feather_name)\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    df = pd.read_feather(os.path.join(load_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","    res_df = sync_check_make(df)\n","\n","    res_df.reset_index().to_feather(feather_path, compression='lz4')\n","    print(feather_path, \"saved succesfully !\")"]},{"cell_type":"markdown","metadata":{"id":"YxCPUzoyidwH"},"source":["#### just add col to loaded df"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"odqVwQHpYo1M","colab":{"base_uri":"https://localhost:8080/","height":602},"executionInfo":{"status":"ok","timestamp":1652066331412,"user_tz":-540,"elapsed":2108,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"90cf9151-9050-4f0c-fa54-9f9a9a9e38bb"},"outputs":[{"output_type":"stream","name":"stdout","text":["3T ->                          open     high      low    close\n","index                                                  \n","2022-04-27 08:45:00  2803.55  2803.97  2799.26  2800.43\n","5T ->                          open     high      low    close\n","index                                                  \n","2022-04-27 08:45:00  2803.55  2803.97  2799.26  2800.43\n","15T ->                          open     high      low    close\n","index                                                  \n","2022-04-27 08:45:00  2803.55  2803.97  2799.26  2800.43\n","30T ->                          open     high      low    close\n","index                                                  \n","2022-04-27 08:30:00  2783.61  2806.93  2780.79  2800.43\n","H ->                          open     high      low    close\n","index                                                  \n","2022-04-27 08:00:00  2819.33  2822.77  2761.27  2800.43\n","4H ->                          open    high      low    close\n","index                                                 \n","2022-04-27 05:00:00  2837.34  2855.0  2761.27  2800.43\n","D ->                          open    high      low    close\n","index                                                 \n","2022-04-26 09:00:00  3006.12  3043.0  2761.27  2800.43\n"]},{"output_type":"execute_result","data":{"text/plain":["                         bb_upper_T60  bb_lower_T60  bb_base_T60  bb_upper2_T60  bb_lower2_T60  bb_upper3_T60  bb_lower3_T60  upper_wick_ratio_5T  lower_wick_ratio_5T  candle_updown_5T\n","index                                                                                                                                                                                   \n","2022-04-27 08:41:59.999   2823.126867   2790.340133  2806.733500    2839.520235    2773.946765    2855.913602    2757.553398             0.354545             0.640260                 0\n","2022-04-27 08:42:59.999   2822.498326   2790.088008  2806.293167    2838.703485    2773.882848    2854.908644    2757.677689             0.354545             0.640260                 0\n","2022-04-27 08:43:59.999   2821.914551   2789.914116  2805.914333    2837.914768    2773.913898    2853.914986    2757.913681             0.354545             0.640260                 0\n","2022-04-27 08:44:59.999   2821.473171   2789.742162  2805.607667    2837.338676    2773.876657    2853.204181    2758.011153             0.354545             0.640260                 0\n","2022-04-27 08:45:59.999   2820.842501   2789.526499  2805.184500    2836.500502    2773.868498    2852.158503    2758.210497             0.089172             0.248408                 0"],"text/html":["\n","  <div id=\"df-882399d2-6441-4f90-a90e-e91ecbb1b52a\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>bb_upper_T60</th>\n","      <th>bb_lower_T60</th>\n","      <th>bb_base_T60</th>\n","      <th>bb_upper2_T60</th>\n","      <th>bb_lower2_T60</th>\n","      <th>bb_upper3_T60</th>\n","      <th>bb_lower3_T60</th>\n","      <th>upper_wick_ratio_5T</th>\n","      <th>lower_wick_ratio_5T</th>\n","      <th>candle_updown_5T</th>\n","    </tr>\n","    <tr>\n","      <th>index</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2022-04-27 08:41:59.999</th>\n","      <td>2823.126867</td>\n","      <td>2790.340133</td>\n","      <td>2806.733500</td>\n","      <td>2839.520235</td>\n","      <td>2773.946765</td>\n","      <td>2855.913602</td>\n","      <td>2757.553398</td>\n","      <td>0.354545</td>\n","      <td>0.640260</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2022-04-27 08:42:59.999</th>\n","      <td>2822.498326</td>\n","      <td>2790.088008</td>\n","      <td>2806.293167</td>\n","      <td>2838.703485</td>\n","      <td>2773.882848</td>\n","      <td>2854.908644</td>\n","      <td>2757.677689</td>\n","      <td>0.354545</td>\n","      <td>0.640260</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2022-04-27 08:43:59.999</th>\n","      <td>2821.914551</td>\n","      <td>2789.914116</td>\n","      <td>2805.914333</td>\n","      <td>2837.914768</td>\n","      <td>2773.913898</td>\n","      <td>2853.914986</td>\n","      <td>2757.913681</td>\n","      <td>0.354545</td>\n","      <td>0.640260</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2022-04-27 08:44:59.999</th>\n","      <td>2821.473171</td>\n","      <td>2789.742162</td>\n","      <td>2805.607667</td>\n","      <td>2837.338676</td>\n","      <td>2773.876657</td>\n","      <td>2853.204181</td>\n","      <td>2758.011153</td>\n","      <td>0.354545</td>\n","      <td>0.640260</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2022-04-27 08:45:59.999</th>\n","      <td>2820.842501</td>\n","      <td>2789.526499</td>\n","      <td>2805.184500</td>\n","      <td>2836.500502</td>\n","      <td>2773.868498</td>\n","      <td>2852.158503</td>\n","      <td>2758.210497</td>\n","      <td>0.089172</td>\n","      <td>0.248408</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-882399d2-6441-4f90-a90e-e91ecbb1b52a')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-882399d2-6441-4f90-a90e-e91ecbb1b52a button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-882399d2-6441-4f90-a90e-e91ecbb1b52a');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":94}],"source":["res_df_ = sync_check_make(res_df_)  # suffix duplication 유의\n","res_df_.tail().iloc[:, -10:]\n","# res_df_.dtypes"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3SKglsQCj5_x"},"outputs":[],"source":["test_df_ = sync_check_make(res_df_.iloc[-4000:])  # suffix duplication 유의\n","test_df_.tail().iloc[:, -10:]"]},{"cell_type":"code","source":["# ------ validation ------ #\n","# res_df_.cppr_15T.describe()\n","print((res_df_.open_15T.to_numpy() - res_df_.close_15T.to_numpy())[-10:])\n","print((res_df_.dc_upper_15T4.to_numpy() - res_df_.dc_lower_15T4.to_numpy())[-10:])"],"metadata":{"id":"gOQxwYqK0jCS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# np.where(res_df_.CDL3LINESTRIKE_15T) #.iloc[-1000:,]\n","\n","# CDL3LINESTRIKE = talib.CDL3LINESTRIKE(df_15T.open, df_15T.high, df_15T.low, df_15T.close)\n","for col in talib.get_function_groups()['Pattern Recognition']:  \n","  print(np.unique(res_df_[col + '_15T'].to_numpy(), return_counts=True))\n","\n","# CDLCLOSINGMARUBOZU = talib.CDLCLOSINGMARUBOZU(df_15T.open, df_15T.high, df_15T.low, df_15T.close)\n","# print(np.unique(CDLCLOSINGMARUBOZU.to_numpy(), return_counts=True))\n","# print(CDLCLOSINGMARUBOZU.tail(50))"],"metadata":{"id":"RmiB5VU5DN6B"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1071,"status":"ok","timestamp":1652066337627,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"XrgJPQRuisCa","outputId":"c3a01224-f5a8-442f-8300-805b0988100d"},"outputs":[{"output_type":"stream","name":"stdout","text":["./candlestick_concated/database_bn/cum/2022-04-27/2022-04-27 ETHUSDT_1m.ftr saved !\n"]}],"source":["# ------------ save current res_df ------------ #\n","ftr_path = os.path.join(save_path.replace(\"res_df\", \"database_bn\"), \"cum\", date)\n","ftr_full_path = os.path.join(ftr_path, key)\n","\n","res_df_.reset_index().to_feather(ftr_full_path, compression='lz4')  # key 잘 확인하고 저장\n","print(ftr_full_path, 'saved !')"]},{"cell_type":"markdown","metadata":{"id":"E0n53hflJbnp"},"source":["### htf candle check"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6xW0yugCWvGz"},"outputs":[],"source":["itv_list = ['3T', '5T', '15T', '30T', '1H', '4H']\n","comp_df_list = [second_df, third_df, fourth_df, fifth_df, sixth_df, seventh_df]\n","offset_list = ['1h', '2min', '2min', '2min', '2min', '2min']\n","# itv_list = ['4H']\n","# comp_df_list = [seventh_df]\n","\n","slice_len = 100\n","for itv_, comp_df_, offset in zip(itv_list, comp_df_list, offset_list):\n","\n","  print(\"itv_ :\", itv_)\n","\n","  # df = h_candle_v2(df, '3T')\n","  # end_ts = \n","  h_res_df = df.resample(itv_, offset=offset).agg({\n","          'open': 'first',\n","          'high': 'max',\n","          'low': 'min',\n","          'close': 'last'\n","      })\n","\n","  #   앞은 길이가 다르고, 뒤에서부터 잘라서 비교    #\n","  #   last_row 빼고는 동일, 4h 제외\n","  # print(df.tail())\n","  print(h_res_df.tail())\n","  print(comp_df_.tail())\n","  # # print(h_res_df.head())\n","  # # print(second_df.head())\n","\n","  # print(len(h_res_df))\n","  # print(len(second_df))\n","\n","  # print(h_res_df.values[-slice_len:])\n","  # print(second_df.iloc[:, :4].values[-slice_len:])\n","  # print(np.argwhere(h_res_df.values[-slice_len:] != comp_df_.iloc[:, :4].values[-slice_len:]))\n","  # print()\n","  break"]},{"cell_type":"markdown","metadata":{"id":"jTN3M842Suzl"},"source":["## concat & save new res_df"]},{"cell_type":"markdown","metadata":{"id":"MlFkpO1MSuzl"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"U-3QkfbFSuzl"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","dict_name = \"2021-07-01 ETHUSDT_bb15m_backi2_res_dfs.pkl\"\n","\n","#     load with pickle    #\n","with open(save_path + dict_name, 'rb') as f:\n","  saved_res_df_dict = pickle.load(f)\n","\n","print(dict_name, \"loaded !\")\n","res_df_files = os.listdir(save_path)\n","res_df_files.reverse()\n","\n","print(res_df_files)\n","\n","res_df_dict = {}\n","\n","base_postfix = '_bb15m_backi2.xlsx'\n","new_postfix = '_st1h_backi2.xlsx'\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for k_i, key in enumerate(res_df_files):\n","\n","  if '2021-07-01'.upper() not in key:\n","  # if '2021-10-10'.upper() not in key:\n","    continue\n","\n","  # if \"link\".upper() not in key:\n","  # if \"btc\".upper() not in key:\n","  #   continue\n","\n","  if new_postfix not in key:\n","    continue\n","\n","  # if key in \n","\n","  if sample_cnt == max_cnt:\n","    dict_name = \"%s_res_dfs.pkl\" % key.split(\".\")[0]\n","    print(\"dict_name :\", dict_name)\n","\n","  base_df = saved_res_df_dict[key.replace(new_postfix, base_postfix)]\n","  # base_df = pd.read_excel(save_path + key.replace(new_postfix, base_postfix), index_col=0)  \n","  res_df = pd.read_excel(save_path + key, index_col=0)  \n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  droped_new_res_df.head()\n","  # break\n","\n","  # res_df_dict[key] = res_df\n","  res_df_dict[key] = droped_new_res_df\n","  print(key, \"saved to dict !\")\n","\n","  #     save with pickle    #\n","  with open(save_path + dict_name, 'wb') as f:\n","    pickle.dump(res_df_dict, f)\n","\n","  sample_cnt -= 1\n","\n","  if sample_cnt <= 0:\n","    break\n"]},{"cell_type":"markdown","metadata":{"id":"t1E_eAyPSuzm"},"source":["### new col to latest feather (1m_indi. only)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xyI5NrM7Suzm"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","cum_dir = \"cum\"\n","\n","new_dir_path = \"rsi_backi2\"\n","base_dir_path = \"bbdc3m_backi2\"\n","\n","new_date = '2021-11-17'\n","\n","\n","\n","#     load ftr list    #\n","base_save_path = os.path.join(save_path, base_dir_path, \"concat/cum\", new_date)\n","new_save_path = base_save_path.replace(base_dir_path, new_dir_path)\n","\n","#     save to (new) cum dir    #\n","#      1. if dir. not exists, makedir\n","os.makedirs(new_save_path, exist_ok=True)\n","\n","ftr_list = [s for s in os.listdir(base_save_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_save_path, key), columns=None, use_threads=True).set_index(\"index\")\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  droped_new_res_df = sync_check(base_df)\n","\n","  # new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # # new_res_df.head()\n","\n","  # intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  # droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break\n","\n","  droped_new_res_df.reset_index().to_feather(os.path.join(new_save_path, key), compression='lz4')\n","\n","  print(os.path.join(new_save_path, key), \"saved !\")\n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"markdown","metadata":{"id":"nUs4fjVHSuzl"},"source":["### feather ver. (col concat)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6cu-Y82iSuzl"},"outputs":[],"source":["new_dir_path = \"st3m_backi2\"\n","base_dir_path = \"bb1d_backi2\"\n","\n","# new_date = \"2021-11-17\"\n","new_date = \"2022-01-10\"\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","save_path = './candlestick_concated/res_df/'\n","save_path = os.path.join(save_path, new_dir_path, \"concat/cum\", new_date)   \n","# save_path = os.path.join(save_path, new_dir_path, \"concat/non_cum\", new_date)   # row col 하려면 concat 맞음, noncum 사용\n","os.makedirs(save_path, exist_ok=True)\n","\n","\n","#     load ftr list    #\n","# ftr_list = [s for s in os.listdir(os.path.join(save_path, new_dir_path)) if \"ftr\" in s]\n","\n","noncat_path = save_path.replace(\"concat/\", \"noncat/\")\n","ftr_list = [s for s in os.listdir(noncat_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","  try:\n","\n","    #       read from base postfix's directory    #\n","    base_df = pd.read_feather(os.path.join(save_path.replace(new_dir_path, base_dir_path), key), columns=None, use_threads=True).set_index(\"index\")\n","    res_df = pd.read_feather(os.path.join(noncat_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","    # print(base_df.head())\n","    # print(res_df.head())\n","    # break\n","\n","    new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","    # new_res_df.head()\n","\n","    droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","    # droped_new_res_df.head()\n","    # break\n","\n","    droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","    # res_df_dict[key] = res_df\n","    # res_df_dict[key] = droped_new_res_df\n","    print(os.path.join(save_path, key), \"saved !\")\n","  \n","  except Exception as e:\n","    print(\"error occured ! :\", e)\n","  \n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"markdown","metadata":{"id":"WVAKq3i8Suzm"},"source":["### feather ver. (row concat) , database cum 도 호환가능"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XG2p9OhhSuzm"},"outputs":[],"source":["# save_path = './candlestick_concated/res_df/'        # cols 추가된 cum db 에 new_row's cols 기준으로 합치는 경우\n","save_path = './candlestick_concated/database_bn/'   # ohlcv cum db 만들 경우\n","\n","base_date = '2022-04-25'\n","# new_date = '2022-02-17'\n","new_date = '2022-04-27'\n","\n","# ------ load ftr list ------ #\n","if \"database\" in save_path:\n","  base_dir_path = \"\"\n","  new_dir_path = \"\"\n","  concat_dir = \"\"\n","else:\n","  base_dir_path = \"sar_backi2\"\n","  new_dir_path = \"bb4h_backi2\"  # dir_path 가 base / new 서로 달라질 수 있어서 분할함\n","  concat_dir = \"concat\"\n","\n","base_date_path = os.path.join(save_path, base_dir_path, concat_dir, \"cum\", base_date)      # 기존 cum db 와 new_date db 를 cum 진행\n","# base_date_path = os.path.join(save_path, base_dir_path, concat_dir, \"non_cum\", base_date)    # non_cum db 와 new_date db 를 cum 진행\n","\n","# new_date_path = os.path.join(save_path, new_dir_path, concat_dir, \"cum\", new_date)      # 상황별로 직접 선택해야할 듯\n","new_date_path = os.path.join(save_path, new_dir_path, concat_dir, \"non_cum\", new_date)\n","\n","\n","\n","# ------ save to (new) concat dir ------ #\n","#      1. if dir. not exists, makedir\n","save_path = new_date_path.replace(\"non_cum\", \"cum\")   # non_cum 아니여도 무관\n","os.makedirs(save_path, exist_ok=True)   # noncat / concat 두가지 경우 존재가능할 것\n","# os.makedirs(os.path.join(save_path, dir_path, \"noncat/cum\", new_date), exist_ok=True)\n","\n","\n","ftr_list = [s for s in os.listdir(new_date_path) if \"ftr\" in s]\n","exist_list = os.listdir(save_path)\n","print(ftr_list)\n","# break\n","\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:   # date rejection\n","    continue\n","  if '1m' not in key:  # itv rejection\n","    continue\n","\n","  # if key in exist_list:\n","  #   print(key, \"already exist !\")\n","  #   continue\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_date_path, key.replace(new_date, base_date)), columns=None, use_threads=True).set_index(\"index\")   # key 에 new_date 담겨있음\n","  res_df = pd.read_feather(os.path.join(new_date_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break  \n","  \n","  print(droped_new_res_df.iloc[[0, -1]])  \n","\n","  # ------------- verify df continuity directly itv by itv ------------- #\n","  true_continue = True\n","  if \"_\" in key:\n","\n","    # interval = key.split(\".\")[0].split(\"_\")[-1] \n","    # itv_num = to_itvnum(interval)\n","\n","    # verified_df = consecutive_df(droped_new_res_df, to_itvnum(interval))\n","    # verified_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","    # res_df_dict[key] = res_df\n","    # res_df_dict[key] = droped_new_res_df  \n","\n","    np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","    ideal_ts_gap = 60 # * itv_num\n","\n","    for ts_i in range(len(np_idx_ts)):\n","      \n","      if ts_i != 0:\n","        ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","        if ts_gap > ideal_ts_gap or ts_gap < ideal_ts_gap:\n","        # if ts_gap == ideal_ts_gap:\n","          print(droped_new_res_df.index[ts_i - 1])\n","          print(droped_new_res_df.index[ts_i])\n","          # print(ts_gap)\n","          print(\"------------------ unideal ts_gap ------------------\")\n","          true_continue = False\n","\n","    print(\"continuity checked !\")\n","\n","  if true_continue:\n","    droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","  print(os.path.join(save_path, key), \"saved !\")\n","  \n"]},{"cell_type":"markdown","metadata":{"id":"L7l5CTJfSuzn"},"source":["### check continuity"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"w-5jn9opBl73"},"outputs":[],"source":["droped_new_res_df = res_df_"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nGzMGyC3Suzn"},"outputs":[],"source":["# print(droped_new_res_df.columns)\n","\n","print(droped_new_res_df.iloc[[0, -1]])\n","\n","np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","\n","print(np_idx_ts[:10])\n","for ts_i in range(len(np_idx_ts)):\n","  \n","  if ts_i != 0:\n","    ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","\n","    if ts_gap > 60 or ts_gap < 60:\n","\n","      print(\"invalid ts_gap found !\")\n","    # if ts_gap == 60:\n","      print(droped_new_res_df.index[ts_i - 1])\n","      print(droped_new_res_df.index[ts_i])\n","      # print(ts_gap)\n","      print()\n"]},{"cell_type":"markdown","metadata":{"id":"x_XGJqBi8Jex"},"source":["### check length of front missing value + middle_data non_missing validity"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yRNwqVeAu8X8"},"outputs":[],"source":["#       1. new_date 의 시작 timeidx 와 base_date end timeidx 의 최소 days' gap     #\n","#       2. new_date 의 시작 부분 indi. value 는 np.nan 으로 채워질 거기 때문에 계산해야함    #\n","\n","df_count = droped_new_res_df.count()\n","len_missing = df_count.max() - df_count.min()\n","print(len_missing / 1440)\n","\n","#       3. \n","missing_sliced_df = droped_new_res_df.iloc[len_missing:]\n","df_count2 = missing_sliced_df.count()\n","# print(df_count2)\n","print((df_count2.max() - df_count2.min()))    # this value should be zero !\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"AY7E2_hTBsyM"},"outputs":[],"source":["# df_count2.index[df_count2.argmin()]\n","# missing_sliced_df.head(5)\n","\n","stay_missed = np.sum(pd.isnull(missing_sliced_df), axis=0)\n","print(stay_missed)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"p9yqewOw9g33"},"outputs":[],"source":["stay_missed_cols = stay_missed[stay_missed != 0].index\n","\n","for sm_col in stay_missed_cols:\n","  \n","  row_idx = np.argwhere(pd.isnull(missing_sliced_df[sm_col].values))\n","\n","  plt.figure(figsize=(3,3))\n","  plt.plot(row_idx)\n","  plt.ylim(0, len(missing_sliced_df))\n","  plt.title(sm_col)\n","\n","  plt.show()\n"]},{"cell_type":"markdown","metadata":{"id":"MSUY4nnku3s9"},"source":["## legacy"]},{"cell_type":"markdown","metadata":{"id":"epgS5Dksu-HX"},"source":["### mv files"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"aJcVpEdrslA5"},"outputs":[],"source":["df_path = './candlestick_concated/survey_df_v2'\n","files_ = os.listdir(df_path)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cEKyEYkotFDy"},"outputs":[],"source":["dirs = [file_ for file_ in files_ if not file_.endswith('.ftr')]\n","files = [file_ for file_ in files_ if file_.endswith('.ftr')]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"IgM79tcxtPVZ"},"outputs":[],"source":["dirs"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"M767iRtwtRQP"},"outputs":[],"source":["def move_fn(dir_, file_):\n","  src_path = os.path.join(df_path, file_)\n","  dst_path = os.path.join(df_path, dir_, file_)\n","  shutil.move(src_path, dst_path)\n","  print(\"moved to {}\".format(dst_path))\n","\n","_ = [move_fn('2022-01-10 ETHUSDT_all', file_) for file_ in files if 'eth'.upper() in file_]\n","# sols\n"]},{"cell_type":"markdown","metadata":{"id":"Iy76iO7gztne"},"source":["### move legacy files"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hMRht32Czwry"},"outputs":[],"source":["# print()\n","cur_dir_list = os.listdir('.')\n","for f in cur_dir_list:\n","  if 'legacy' in f :\n","    # print(f)\n","    if os.path.isdir(current_path + f,):\n","      continue\n","\n","    shutil.move(current_path + f, current_path + 'legacy/' + f)\n","    print(\"moved to\" + current_path + 'legacy/' +  f)"]},{"cell_type":"markdown","metadata":{"id":"5duWn8t4BRyv"},"source":["# IDE platform\n"]},{"cell_type":"markdown","metadata":{"id":"6HOjnZjSgzk1"},"source":["## load ftr_list"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"7FPBG5Qqg2jB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653644615803,"user_tz":-540,"elapsed":5102,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"d0643c40-ac9d-4c36-9aae-888d8c319358"},"outputs":[{"output_type":"stream","name":"stdout","text":["['2022-04-27 ETHUSDT_1m.ftr']\n","2022-04-27 ETHUSDT_1m.ftr loaded !\n","load res_df_ elapsed time : 3.3214223384857178\n"]}],"source":["save_path = './candlestick_concated/database_bn/'\n","\n","# dir_path = \"bb1d_backi2\"\n","# date = \"2022-02-17\"\n","# ftr_path = os.path.join(save_path, dir_path, \"concat/cum\", date)\n","\n","# ------ 1T_database ------ #\n","# date = \"2022-04-27\"\n","# ftr_path = os.path.join(save_path, \"non_cum\", date)\n","\n","date = \"2022-04-27\"\n","# date = \"2022-02-17\"\n","ftr_path = os.path.join(save_path, \"cum\", date)\n","\n","# ------ load ftr list ------ #\n","ftr_list = [s for s in os.listdir(ftr_path) if \"ftr\" in s if date in s]\n","print(ftr_list)\n","\n","start_0 = time.time()\n","key = ftr_list[0]  # tempoaray use single key\n","res_df_ = pd.read_feather(os.path.join(ftr_path, key), columns=None, use_threads=True).set_index(\"index\")\n","# print(res_df_.head())\n","print(key, \"loaded !\")\n","print(\"load res_df_ elapsed time :\", time.time() - start_0)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RQH_l4opEh_O"},"outputs":[],"source":["res_df_.dtypes"]},{"cell_type":"markdown","metadata":{"id":"x2yj2SwAXDLp"},"source":["### edit cols"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"x9wkWw15XCAm"},"outputs":[],"source":["col_list = list(res_df_.columns)\n","# # [col_ for col_ in col_list if 'score' in col_]\n","\n","# ------ drop ------ #\n","# res_df_.drop([col_ for col_ in col_list if 'open_15T' in col_], inplace=True, axis=1)\n","res_df_.drop([col_ for col_ in col_list if 'es' in col_], inplace=True, axis=1)\n","# res_df_.drop([col_ for col_ in col_list if '_T40' in col_], inplace=True, axis=1)\n","# res_df_.drop([col_ for col_ in col_list if 'long_base' in col_], inplace=True, axis=1)\n","# res_df_.drop([col_ for col_ in col_list[5:]], inplace=True, axis=1)\n","\n","# ------ replace ------ #\n","# for c_i, col_ in enumerate(col_list):\n","#   if 'basis' in col_:\n","# #   # if col_[-1] in ['m', 'h', 'd', 'H'] and '_' in col_:eTa_5T\n","# #   # if col_[0] in ['h'] and '_' in col_:\n","# #   if 'bir_' in col_:\n","\n","#     col_list[c_i] = col_.replace('basis', 'base')\n","# #     # col_list[c_i] = col_.replace('m', 'T').replace('h', 'H').replace('1T', 'T')\n","# #     # col_list[c_i] = col_.replace('1d', 'D')\n","# #     # col_list[c_i] = col_.replace('eTa_5T', 'ema_5T')\n","# #     # col_list[c_i] = col_list[c_i][1:]\n","# #     # print(col_list[c_i][0])\n","# res_df_.columns = col_list\n","# col_list[-2:] = ['resi_T', 'sup_T']"]},{"cell_type":"markdown","metadata":{"id":"14chOHeXh6JD"},"source":["### lab"]},{"cell_type":"markdown","metadata":{"id":"O87s8_EUakqS"},"source":["#### instant indi."]},{"cell_type":"code","source":["\n","\n","def wave_range_ratio_v4_2(res_df, wave_itv, wave_period, roll_hl_cnt=3):\n","\n","    wave_high_fill_ = res_df['wave_high_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    wave_low_fill_ = res_df['wave_low_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","\n","    roll_highs = [res_df['wave_high_fill_{}{}_-{}'.format(wave_itv, wave_period, cnt_ + 1)].to_numpy() for cnt_ in reversed(range(roll_hl_cnt))]\n","    roll_lows = [res_df['wave_low_fill_{}{}_-{}'.format(wave_itv, wave_period, cnt_ + 1)].to_numpy() for cnt_ in reversed(range(roll_hl_cnt))]\n","\n","    cu_wave1_range = roll_highs[-1] - roll_lows[-2]   # cu's roll_high_[:, -1] = prev_high & cu's roll_low_[:, -1] = current_low\n","    cu_wave2_range = roll_highs[-1] - wave_low_fill_     # for short, cu\n","    co_wave1_range = roll_highs[-2] - roll_lows[-1]   # co's roll_low_[:, -1] = prev_low & co's roll_high_[:, -1] = current_high\n","    co_wave2_range = wave_high_fill_ - roll_lows[-1]     # for long, co\n","    wave3_range = wave_high_fill_ - wave_low_fill_\n","\n","    res_df['cu_wrr_21_{}{}'.format(wave_itv, wave_period)] = cu_wave2_range / cu_wave1_range\n","    res_df['cu_wrr_32_{}{}'.format(wave_itv, wave_period)] = wave3_range / cu_wave2_range\n","\n","    res_df['co_wrr_21_{}{}'.format(wave_itv, wave_period)] = co_wave2_range / co_wave1_range\n","    res_df['co_wrr_32_{}{}'.format(wave_itv, wave_period)] = wave3_range / co_wave2_range\n","\n","    return res_df\n","\n","\n","def get_roll_wave_data_v2(res_df, valid_prime_idx, roll_idx_arr, data_col, roll_hl_cnt):\n","\n","    data = res_df[data_col].to_numpy()\n","    len_res_df = len(res_df)\n","    roll_cols = [data_col + '_-{}'.format(cnt_ + 1) for cnt_ in reversed(range(roll_hl_cnt))]\n","\n","    roll_data = pd.DataFrame(index=res_df.index, data=np.full((len_res_df, roll_hl_cnt), np.nan))\n","    roll_data.iloc[valid_prime_idx[roll_hl_cnt - 1:], :] = data[roll_idx_arr]  # 제한된 idx 를 제외한 row 에 roll_hl 입력\n","\n","    res_df[roll_cols] = roll_data.ffill()\n","\n","    return res_df\n","\n","def roll_wave_hl_idx_v4(t_df, wave_itv, wave_period, roll_hl_cnt=4):\n","\n","    high_prime_idx = t_df['wave_high_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    low_prime_idx = t_df['wave_low_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","\n","    valid_high_prime_idx = high_prime_idx[~np.isnan(high_prime_idx)].astype(int)  # roll_high 를 위한 prime_idx, this should be \"unique\"\n","    valid_low_prime_idx = low_prime_idx[~np.isnan(low_prime_idx)].astype(int)  # roll_low 를 위한 prime_idx\n","\n","    roll_high_idx_arr = np.array([valid_high_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_high_prime_idx)) if\n","                                  idx_ + 1 >= roll_hl_cnt])  # cnt 수를 만족시키기 위해 idx 제한\n","    roll_low_idx_arr = np.array(\n","        [valid_low_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_low_prime_idx)) if idx_ + 1 >= roll_hl_cnt])\n","    \n","    assert len(roll_high_idx_arr) > 0 and len(roll_low_idx_arr) > 0\n","\n","    return valid_high_prime_idx, valid_low_prime_idx, roll_high_idx_arr, roll_low_idx_arr\n","    \n","def to_lower_tf_v3(ltf_df, htf_df, cols, backing_i=1, show_info=False):\n","    ltf_itv = pd.infer_freq(ltf_df.index)\n","    assert ltf_itv == 'T', \"currently only -> 'T' allowed..\"\n","    # assert type(column[0]) in [int, np.int64], \"column value should be integer\"\n","\n","    # cols = htf_df.columns[column]  # to_lower_tf_v1 의 int col 반영\n","\n","    if show_info:\n","        print(\"backing_i :\", backing_i)\n","\n","    renamed_last_index = htf_df.rename(index={htf_df.index[-1]: ltf_df.index[-1]}, inplace=False).iloc[[-1]]\n","    if htf_df.index[-1] != renamed_last_index.index[-1]:  # cannot reindex a non-unique index with a method or limit 방지\n","        htf_df = htf_df.append(renamed_last_index)\n","\n","    downsampled_df = htf_df[cols].shift(backing_i).resample(ltf_itv).ffill()\n","\n","    if len(downsampled_df) > len(ltf_df):\n","        downsampled_df = downsampled_df.iloc[-len(ltf_df):]\n","\n","    downsampled_df.index = ltf_df.index[-len(downsampled_df):]\n","    # assert len(ltf_df) <= len(downsampled_df), \"for join method, assert len(ltf_df) <= len(downsampled_df)\"\n","\n","    # ------ check last row's validity ------ #\n","    assert np.sum(~pd.isnull(downsampled_df.iloc[-1].values)) > 0, \"assert np.sum(~pd.isnull(downsampled_df.iloc[-1].values)) > 0\"\n","\n","    return downsampled_df"],"metadata":{"id":"gWOmz--hNaSR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","def wave_range_cci_v2(t_df, wave_period):\n","\n","    t_df = cci_v2(t_df, wave_period)\n","    itv = pd.infer_freq(t_df.index)\n","\n","    cci_ = t_df['cci_{}{}'.format(itv, wave_period)].to_numpy()\n","    b1_cci_ = t_df['cci_{}{}'.format(itv, wave_period)].shift(1).to_numpy()\n","\n","    band_width = 100\n","    upper_band = band_width\n","    lower_band = -band_width\n","\n","    len_df = len(t_df)\n","    len_df_range = np.arange(len_df).astype(int)\n","\n","    data_cols = ['open', 'high', 'low', 'close']\n","    open, high, low, close = [t_df[col_].to_numpy() for col_ in data_cols]\n","    # b1_close = t_df.close.shift(itv_num).to_numpy()\n","\n","    # ============ modules ============ #\n","    # ------ define co, cu ------ # <- point missing 과 관련해 정교해아함\n","    cu_bool = (b1_cci_ > upper_band) & (upper_band > cci_)\n","    co_bool = (b1_cci_ < lower_band) & (lower_band < cci_)\n","\n","    cu_idx = get_index_bybool(cu_bool, len_df_range)\n","    co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","    cu_fill_idx, co_fill_idx, cu_prime_idx, co_prime_idx, cu_prime_fill_idx, co_prime_fill_idx, valid_cu_bool, valid_co_bool = get_terms_info_v4(\n","        cu_idx, co_idx, len_df, len_df_range)\n","\n","    # ------ get post_terms ------ #\n","    high_post_terms = np.vstack((co_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","    low_post_terms = np.vstack((cu_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)\n","\n","    high_post_terms_cnt = high_post_terms[:, 1] - high_post_terms[:, 0]\n","    low_post_terms_cnt = low_post_terms[:, 1] - low_post_terms[:, 0]\n","\n","    paired_post_cu_idx = high_post_terms[:, 1]\n","    paired_post_co_idx = low_post_terms[:, 1]\n","\n","    # ------ get prime_terms ------ # # 기본은 아래 logic 으로 수행하고, update_hl 도 해당 term 구간의 hl 이 더 작거나 클경우 적용 가능할 것\n","    # high_prime_terms = np.vstack((co_prime_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","    # low_prime_terms = np.vstack((cu_prime_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)\n","\n","    # high_prime_terms_cnt = high_prime_terms[:, 1] - high_prime_terms[:, 0]\n","    # low_prime_terms_cnt = low_prime_terms[:, 1] - low_prime_terms[:, 0]\n","\n","    # paired_prime_cu_idx = high_prime_terms[:, 1]\n","    # paired_prime_co_idx = low_prime_terms[:, 1]\n","\n","    # ====== get wave_hl & terms ====== #\n","    wave_high_ = np.full(len_df, np.nan)\n","    wave_low_ = np.full(len_df, np.nan)\n","\n","    wave_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_post_terms])\n","    wave_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_post_terms])\n","\n","    wave_high_[paired_post_cu_idx] = wave_highs\n","    wave_low_[paired_post_co_idx] = wave_lows\n","\n","    wave_high_fill_ = fill_arr(wave_high_)\n","    wave_low_fill_ = fill_arr(wave_low_)\n","\n","    # ------ Todo, update_hl 에 대해서, post_terms_hl 적용 ------ #\n","    wave_high_terms_low_ = np.full(len_df, np.nan)\n","    wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","    wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_post_terms])  # for point rejection, Todo, min_max 설정 항상 주의\n","    wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_post_terms])\n","\n","    wave_high_terms_low_[paired_post_cu_idx] = wave_high_terms_lows\n","    wave_low_terms_high_[paired_post_co_idx] = wave_low_terms_highs\n","\n","    update_low_cu_bool = wave_high_terms_low_ < wave_low_fill_\n","    update_high_co_bool = wave_low_terms_high_ > wave_high_fill_\n","\n","    # ------ term cnt ------ #\n","    wave_high_terms_cnt_ = np.full(len_df, np.nan)\n","    wave_low_terms_cnt_ = np.full(len_df, np.nan)\n","\n","    wave_high_terms_cnt_[paired_post_cu_idx] = high_post_terms_cnt\n","    wave_low_terms_cnt_[paired_post_co_idx] = low_post_terms_cnt\n","\n","    wave_high_terms_cnt_fill_ = fill_arr(wave_high_terms_cnt_)\n","    wave_low_terms_cnt_fill_ = fill_arr(wave_low_terms_cnt_)\n","\n","    # ------ hl_fill 의 prime_idx 를 찾아야함 ------ #\n","    # b1_wave_high_fill_ = pd.Series(wave_high_fill_).shift(1).to_numpy()\n","    # b1_wave_low_fill_ = pd.Series(wave_low_fill_).shift(1).to_numpy()\n","    # wave_high_prime_idx = np.where((wave_high_fill_ != b1_wave_high_fill_) & ~np.isnan(wave_high_fill_), len_df_range, np.nan)\n","    # wave_low_prime_idx = np.where((wave_low_fill_ != b1_wave_low_fill_) & ~np.isnan(wave_low_fill_), len_df_range, np.nan)\n","    #\n","    # high_prime_idx_fill_ = fill_arr(wave_high_prime_idx)\n","    # low_prime_idx_fill_ = fill_arr(wave_low_prime_idx)\n","\n","    # ============ enlist to df_cols ============ #\n","    t_df['wave_high_fill_{}{}'.format(itv, wave_period)] = wave_high_fill_\n","    t_df['wave_low_fill_{}{}'.format(itv, wave_period)] = wave_low_fill_\n","    t_df['wave_high_terms_cnt_fill_{}{}'.format(itv, wave_period)] = wave_high_terms_cnt_fill_\n","    t_df['wave_low_terms_cnt_fill_{}{}'.format(itv, wave_period)] = wave_low_terms_cnt_fill_\n","\n","    # ------ for plot_checking ------ #\n","    t_df['wave_update_low_cu_bool_{}{}'.format(itv, wave_period)] = update_low_cu_bool  # temporary, for plot_check\n","    t_df['wave_update_high_co_bool_{}{}'.format(itv, wave_period)] = update_high_co_bool\n","    t_df['wave_cu_{}{}'.format(itv, wave_period)] = cu_bool #* ~update_low_cu_bool\n","    t_df['wave_co_{}{}'.format(itv, wave_period)] = co_bool #* ~update_high_co_bool\n","    t_df['wave_cu_marker_{}{}'.format(itv, wave_period)] = get_line(cu_idx, close)\n","    t_df['wave_co_marker_{}{}'.format(itv, wave_period)] = get_line(co_idx, close)\n","    \n","    # Todo, idx 저장은 sync. 가 맞는 tf_df 에 대하여 적용하여야함\n","    # ------ for roll prev_hl ------ #\n","    # high_post_idx 를 위해 co_prime_idx 입력\n","    t_df['wave_high_prime_idx_{}{}'.format(itv, wave_period)] = co_prime_idx # co_prime_idx wave_high_prime_idx  # high 갱신을 고려해, prev_hl 는 prime_idx 기준으로 진행\n","    t_df['wave_low_prime_idx_{}{}'.format(itv, wave_period)] = cu_prime_idx # cu_prime_idx wave_low_prime_idx  # cu_prime_idx's low 를 사용하겠다라는 의미, 즉 roll_prev 임\n","\n","    # ------ for first_high ------ #\n","    t_df['wave_high_prime_idx_fill_{}{}'.format(itv, wave_period)] = co_prime_fill_idx # co_prime_fill_idx high_prime_idx_fill_\n","    t_df['wave_low_prime_idx_fill_{}{}'.format(itv, wave_period)] = cu_prime_fill_idx # cu_prime_fill_idx low_prime_idx_fill_\n","\n","\n","    return t_df"],"metadata":{"id":"euA18M1uyc3s"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LyGnAMvLYvOZ"},"source":["#### wave_range"]},{"cell_type":"markdown","source":["##### plot_check"],"metadata":{"id":"O1uu9vQnY5dn"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"YqBXjVPzdccC"},"outputs":[],"source":["i = random.randint(0, len(res_df))\n","# i = 235290, 512385\n","# i = 74470\n","# i = 82533\n","i = 387103\n","i = 370055\n","i = 370940\n","# i = 185369\n","i = 186060\n","\n","plot_size = 1500 # 1500 150\n","# t_df = res_df.iloc[i - plot_size:i + plot_size]\n","t_df = res_df.iloc[i - plot_size:i]\n","a_data = t_df.to_numpy()"]},{"cell_type":"code","source":["wave_itv1, wave_period1 = '15T', config.tr_set.wave_period1\n","\n","\n","if wave_itv1 != 'T':\n","    offset = '1h' if wave_itv1 != 'D' else '9h'\n","    htf_df = to_htf(t_df, wave_itv1, offset=offset)\n","    htf_df = wave_range_cci_v2(htf_df, wave_period1)\n","    \n","    cols = list(htf_df.columns[-15:-4])  # except idx col\n","\n","    roll_hl_cnt = 3\n","    valid_high_prime_idx, valid_low_prime_idx, roll_prev_high_idx_arr, roll_prev_low_idx_arr = roll_wave_hl_idx_v4(htf_df, wave_itv1, wave_period1, roll_hl_cnt=roll_hl_cnt)\n","\n","    htf_df = get_roll_wave_data_v2(htf_df, valid_high_prime_idx, roll_prev_high_idx_arr, 'wave_high_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","    cols += list(htf_df.columns[-roll_hl_cnt:])\n","\n","    htf_df = get_roll_wave_data_v2(htf_df, valid_low_prime_idx, roll_prev_low_idx_arr, 'wave_low_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","    cols += list(htf_df.columns[-roll_hl_cnt:])\n","\n","    htf_df = wave_range_ratio_v4_2(htf_df, wave_itv1, wave_period1, roll_hl_cnt=3)\n","    cols += list(htf_df.columns[-4:])\n","\n","    # ------ 필요한 cols 만 join (htf's idx 정보는 ltf 와 sync. 가 맞지 않음 - join 불가함) ------ #\n","    t_df.drop(cols, inplace=True, axis=1, errors='ignore')\n","    t_df = t_df.join(to_lower_tf_v3(t_df, htf_df, cols, backing_i=0), how='inner')\n","\n","else:  \n","  t_df = wave_range_cci_v2(t_df, wave_period1)\n","\n","# t_df = wave_range_v11(t_df, config)\n","# t_df = wave_range_v11_2(t_df, config)\n","# t_df = wave_range_dcbase_v11_3(t_df, config, over_period=2)\n","# t_df = wave_range_cci_v1(t_df, wave_itv1, wave_period1)\n","# t_df = wave_range_v12(t_df, config, ltf_df=None)\n","# t_df = wave_range_v13(t_df, config, ltf_df=None, term_thresh=1)\n","# t_df = wave_range_v14(t_df, config, ltf_df=None, term_thresh1=1, term_thresh2=3)\n","# t_df = wave_range_v15(t_df, config, term_thresh1=2, term_thresh2=3)\n"],"metadata":{"id":"PgaNnempXRd_"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-Dr_tTk9csFm","colab":{"base_uri":"https://localhost:8080/","height":862},"executionInfo":{"status":"ok","timestamp":1653286351313,"user_tz":-540,"elapsed":7228,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"b2a18374-e580-4874-f9fe-70a98375e8ad"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1080x1080 with 2 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(15, 15))\n","nrows, ncols = 2, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols,\n","                        height_ratios=[3, 1]\n","                        )\n","\n","ax = fig.add_subplot(gs[0])\n","\n","# ------ candles ------ #\n","candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","# _ = [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","\n","len_df = len(t_df)   \n","len_df_range = np.arange(len_df).astype(int)\n","\n","# ============ ============ ============ #\n","# ============ ============ ============ #\n","\n","wave_high_fill_ = t_df['wave_high_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_low_fill_ = t_df['wave_low_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_high_terms_cnt_fill_ = t_df['wave_high_terms_cnt_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_low_terms_cnt_fill_ = t_df['wave_low_terms_cnt_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","wave_cu_idx_ = get_index_bybool(t_df['wave_cu_{}{}'.format(wave_itv1, wave_period1)].to_numpy(), len_df_range)\n","wave_co_idx_ = get_index_bybool(t_df['wave_co_{}{}'.format(wave_itv1, wave_period1)].to_numpy(), len_df_range)\n","# wave_cu_bool_idx_ = get_index_bybool(t_df['wave_cu_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy(), len_df_range)\n","# wave_co_bool_idx_ = get_index_bybool(t_df['wave_co_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy(), len_df_range)\n","wave_update_low_cu_bool_idx_ = get_index_bybool(t_df['wave_update_low_cu_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy(), len_df_range)\n","wave_update_high_co_bool_idx_ = get_index_bybool(t_df['wave_update_high_co_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy(), len_df_range)\n","wave_cu_marker_ = t_df['wave_cu_marker_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_co_marker_ = t_df['wave_co_marker_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","# high_prime_idx = t_df['wave_high_prime_idx_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","# low_prime_idx = t_df['wave_low_prime_idx_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","# high_prime_idx_fill = t_df['wave_high_prime_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","# low_prime_idx_fill = t_df['wave_low_prime_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","# ============ plot_check ============ #\n","# dc_base_ = t_df['dc_base_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","# plt.step(len_df_range, dc_base_, alpha=1.0, color='cyan', linewidth=1)\n","\n","plt.step(len_df_range, wave_cu_marker_, \"o\", alpha=1.0, color='#ff00ff', markersize=3)\n","plt.step(len_df_range, wave_co_marker_, \"o\", alpha=1.0, color='#00ff00', markersize=3)\n","\n","# [plt.axvline(int(idx_), color=\"#ff0000\") for idx_ in wave_cu_bool_idx_ if not np.isnan(idx_)]\n","# [plt.axvline(int(idx_), color=\"#0000ff\") for idx_ in wave_co_bool_idx_ if not np.isnan(idx_)]\n","[plt.axvline(int(idx_), color=\"#ff0000\") for idx_ in wave_update_low_cu_bool_idx_ if not np.isnan(idx_)]\n","[plt.axvline(int(idx_), color=\"#0000ff\") for idx_ in wave_update_high_co_bool_idx_ if not np.isnan(idx_)]\n","\n","# [plt.axvline(int(idx_), color=\"#ff00ff\") for idx_ in wave_cu_idx_ if not np.isnan(idx_)]\n","# [plt.axvline(int(idx_), color=\"#00ff00\") for idx_ in wave_co_idx_ if not np.isnan(idx_)]\n","\n","# [plt.axvline(int(idx_), color=\"#00ff00\") for idx_ in wave_high_prime_idx if not np.isnan(idx_)]\n","# [plt.axvline(int(idx_), color=\"#ff00ff\") for idx_ in wave_low_prime_idx if not np.isnan(idx_)]\n","\n","plt.step(len_df_range, wave_high_fill_, \"*\", alpha=1.0, color='#00ff00', markersize=6)\n","plt.step(len_df_range, wave_low_fill_, \"*\", alpha=1.0, color='#ff00ff', markersize=6)\n","\n","plt.xlim(0, len_df)\n","\n","plt.subplot(gs[1])\n","cci_ = t_df['cci_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","plt.step(len_df_range, cci_, alpha=1.0, color='yellow', linewidth=2)\n","plt.axhline(100, color=\"#ffffff\")\n","plt.axhline(-100, color=\"#ffffff\")\n","[plt.axvline(int(idx_), color=\"#ff00ff\") for idx_ in wave_cu_idx_ if not np.isnan(idx_)]\n","[plt.axvline(int(idx_), color=\"#00ff00\") for idx_ in wave_co_idx_ if not np.isnan(idx_)]\n","\n","# plt.step(len_df_range, wave_high_terms_cnt_fill_, alpha=1.0, color='yellow', linewidth=2)\n","# plt.step(len_df_range, wave_low_terms_cnt_fill_, alpha=1.0, color='yellow', linewidth=2)\n","# plt.step(len_df_range, wave_high_terms_cnt_fill_, \"*\", alpha=1.0, color='#00ff00', markersize=6)\n","# plt.step(len_df_range, wave_low_terms_cnt_fill_, \"*\", alpha=1.0, color='#ff00ff', markersize=6)\n","\n","plt.xlim(0, len_df)  # for sync. with gs[0]\n","\n","plt.show()"]},{"cell_type":"markdown","source":["###### data_window"],"metadata":{"id":"c2yVTn1tnxMn"}},{"cell_type":"code","source":["idx_ = 990\n","\n","# t_df[roll_cols].iloc[idx_]\n","t_df.iloc[:, -4:].iloc[idx_]\n","\n","# roll_cnt = 3\n","# valid_high_prime_idx, valid_low_prime_idx, roll_prev_high_idx_arr, roll_prev_low_idx_arr = roll_wave_hl_v4(t_df, wave_itv1, wave_period1, roll_hl_cnt=roll_cnt)\n","# roll_high = get_roll_wave_data(valid_high_prime_idx, roll_prev_high_idx_arr, len_df, wave_high_fill_, roll_cnt)\n","# roll_low = get_roll_wave_data(valid_low_prime_idx, roll_prev_low_idx_arr, len_df, wave_low_fill_, roll_cnt)\n","\n","# print(roll_high[idx_])\n","# print(roll_low[idx_])\n","# roll_prev_high_idx_arr\n","# valid_high_prime_idx"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"I_ZNM9n7hFOf","executionInfo":{"status":"ok","timestamp":1652690281646,"user_tz":-540,"elapsed":3,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"aee10236-b76e-45db-f25d-4a3c6d352d69"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["cu_wrr_21_15T5    2.096046\n","cu_wrr_32_15T5    0.838580\n","co_wrr_21_15T5    0.780256\n","co_wrr_32_15T5    1.000000\n","Name: 2021-05-20 14:10:59.999000, dtype: float64"]},"metadata":{},"execution_count":64}]},{"cell_type":"code","source":["roll_hl_cnt = 3\n","high_prime_idx = t_df['wave_high_prime_idx_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","low_prime_idx = t_df['wave_low_prime_idx_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","valid_high_prime_idx = high_prime_idx[~np.isnan(high_prime_idx)].astype(int)  # roll_high 를 위한 prime_idx\n","valid_low_prime_idx = low_prime_idx[~np.isnan(low_prime_idx)].astype(int)  # roll_low 를 위한 prime_idx\n","\n","roll_high_idx_arr = np.array([valid_high_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_high_prime_idx)) if\n","                              idx_ + 1 >= roll_hl_cnt])  # cnt 수를 만족시키기 위해 idx 제한\n","roll_low_idx_arr = np.array(\n","    [valid_low_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_low_prime_idx)) if idx_ + 1 >= roll_hl_cnt])"],"metadata":{"id":"zj_d5wsfDzf_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["wave_co_bool_idx_[~np.isnan(wave_co_bool_idx_)]\n","# wave_cu_bool_idx_[~np.isnan(wave_cu_bool_idx_)]"],"metadata":{"id":"BvF0CoLn7bF3"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["%timeit -n1 -r1 wave_range_v10(res_df[-100000:], period1, ltf_df=None) # 23.7 s per loop\n","%timeit -n1 -r1 wave_range_v11(res_df[-100000:], period1, ltf_df=None) # 574 ms per loop"],"metadata":{"id":"Z-EokTzIqb-T"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["t_df = cci_v2(t_df, wave_period)\n","\n","cci_ = t_df['cci_{}{}'.format(itv, wave_period)].to_numpy()\n","b1_cci_ = t_df['cci_{}{}'.format(itv, wave_period)].shift(1).to_numpy()\n","\n","band_width = 100\n","upper_band = band_width\n","lower_band = -band_width\n","\n","len_df = len(t_df)\n","len_df_range = np.arange(len_df).astype(int)\n","\n","data_cols = ['open', 'high', 'low', 'close']\n","open, high, low, close = [t_df[col_].to_numpy() for col_ in data_cols]\n","# b1_close = t_df.close.shift(itv_num).to_numpy()\n","\n","# ============ modules ============ #\n","# ------ define co, cu ------ # <- point missing 과 관련해 정교해아함\n","cu_bool = (b1_cci_ > upper_band) & (upper_band > cci_)\n","co_bool = (b1_cci_ < lower_band) & (lower_band < cci_)\n","\n","cu_idx = get_index_bybool(cu_bool, len_df_range)\n","co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","cu_fill_idx, co_fill_idx, cu_prime_idx, co_prime_idx, cu_prime_fill_idx, co_prime_fill_idx, valid_cu_bool, valid_co_bool = get_terms_info_v4(\n","    cu_idx, co_idx, len_df, len_df_range)\n","\n","# ------ get post_terms ------ #\n","high_post_terms = np.vstack((co_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","low_post_terms = np.vstack((cu_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)\n","\n","high_post_terms_cnt = high_post_terms[:, 1] - high_post_terms[:, 0]\n","low_post_terms_cnt = low_post_terms[:, 1] - low_post_terms[:, 0]\n","\n","paired_post_cu_idx = high_post_terms[:, 1]\n","paired_post_co_idx = low_post_terms[:, 1]\n","\n","# ------ get prime_terms ------ # # 기본은 아래 logic 으로 수행하고, update_hl 도 해당 term 구간의 hl 이 더 작거나 클경우 적용 가능할 것\n","# high_prime_terms = np.vstack((co_prime_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","# low_prime_terms = np.vstack((cu_prime_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)\n","\n","# high_prime_terms_cnt = high_prime_terms[:, 1] - high_prime_terms[:, 0]\n","# low_prime_terms_cnt = low_prime_terms[:, 1] - low_prime_terms[:, 0]\n","\n","# paired_prime_cu_idx = high_prime_terms[:, 1]\n","# paired_prime_co_idx = low_prime_terms[:, 1]\n","\n","# ====== get wave_hl & terms ====== #\n","wave_high_ = np.full(len_df, np.nan)\n","wave_low_ = np.full(len_df, np.nan)\n","\n","wave_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_post_terms])\n","wave_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_post_terms])\n","\n","wave_high_[paired_post_cu_idx] = wave_highs\n","wave_low_[paired_post_co_idx] = wave_lows\n","\n","wave_high_fill_ = fill_arr(wave_high_)\n","wave_low_fill_ = fill_arr(wave_low_)\n","\n","# ------ Todo, update_hl 에 대해서, post_terms_hl 적용 ------ #\n","wave_high_terms_low_ = np.full(len_df, np.nan)\n","wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_post_terms])  # for point rejection, Todo, min_max 설정 항상 주의\n","wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_post_terms])\n","\n","wave_high_terms_low_[paired_post_cu_idx] = wave_high_terms_lows\n","wave_low_terms_high_[paired_post_co_idx] = wave_low_terms_highs\n","\n","update_low_cu_bool = wave_high_terms_low_ < wave_low_fill_\n","update_high_co_bool = wave_low_terms_high_ > wave_high_fill_\n","\n","# ------ term cnt ------ #\n","wave_high_terms_cnt_ = np.full(len_df, np.nan)\n","wave_low_terms_cnt_ = np.full(len_df, np.nan)\n","\n","wave_high_terms_cnt_[paired_post_cu_idx] = high_post_terms_cnt\n","wave_low_terms_cnt_[paired_post_co_idx] = low_post_terms_cnt\n","\n","wave_high_terms_cnt_fill_ = fill_arr(wave_high_terms_cnt_)\n","wave_low_terms_cnt_fill_ = fill_arr(wave_low_terms_cnt_)\n","\n","# ------ hl_fill 의 prime_idx 를 찾아야함 ------ #\n","# b1_wave_high_fill_ = pd.Series(wave_high_fill_).shift(1).to_numpy()\n","# b1_wave_low_fill_ = pd.Series(wave_low_fill_).shift(1).to_numpy()\n","# wave_high_prime_idx = np.where((wave_high_fill_ != b1_wave_high_fill_) & ~np.isnan(wave_high_fill_), len_df_range, np.nan)\n","# wave_low_prime_idx = np.where((wave_low_fill_ != b1_wave_low_fill_) & ~np.isnan(wave_low_fill_), len_df_range, np.nan)\n","#\n","# high_prime_idx_fill_ = fill_arr(wave_high_prime_idx)\n","# low_prime_idx_fill_ = fill_arr(wave_low_prime_idx)\n","\n","# ============ enlist to df_cols ============ #\n","t_df['wave_high_fill_{}{}'.format(itv, wave_period)] = wave_high_fill_\n","t_df['wave_low_fill_{}{}'.format(itv, wave_period)] = wave_low_fill_\n","t_df['wave_high_terms_cnt_fill_{}{}'.format(itv, wave_period)] = wave_high_terms_cnt_fill_\n","t_df['wave_low_terms_cnt_fill_{}{}'.format(itv, wave_period)] = wave_low_terms_cnt_fill_\n","\n","# ------ for roll prev_hl ------ #\n","# high_post_idx 를 위해 co_prime_idx 입력\n","t_df['wave_high_prime_idx_{}{}'.format(itv, wave_period)] = co_prime_idx # co_prime_idx wave_high_prime_idx  # high 갱신을 고려해, prev_hl 는 prime_idx 기준으로 진행\n","t_df['wave_low_prime_idx_{}{}'.format(itv, wave_period)] = cu_prime_idx # cu_prime_idx wave_low_prime_idx  # cu_prime_idx's low 를 사용하겠다라는 의미, 즉 roll_prev 임\n","\n","# ------ for first_high ------ #\n","t_df['wave_high_prime_idx_fill_{}{}'.format(itv, wave_period)] = co_prime_fill_idx # co_prime_fill_idx high_prime_idx_fill_\n","t_df['wave_low_prime_idx_fill_{}{}'.format(itv, wave_period)] = cu_prime_fill_idx # cu_prime_fill_idx low_prime_idx_fill_\n","\n","# ------ for plot_checking ------ #\n","t_df['wave_cu_bool_{}{}'.format(itv, wave_period)] = cu_bool  # temporary, for plot_check\n","t_df['wave_co_bool_{}{}'.format(itv, wave_period)] = co_bool\n","t_df['wave_cu_{}{}'.format(itv, wave_period)] = cu_bool * ~update_low_cu_bool\n","t_df['wave_co_{}{}'.format(itv, wave_period)] = co_bool * ~update_high_co_bool\n","t_df['wave_cu_marker_{}{}'.format(itv, wave_period)] = get_line(cu_idx, close)\n","t_df['wave_co_marker_{}{}'.format(itv, wave_period)] = get_line(co_idx, close)\n","# t_df['update_low_cu_bool_{}{}'.format(itv, wave_period)] = update_low_cu_bool\n","# t_df['update_high_co_bool_{}{}'.format(itv, wave_period)] = update_high_co_bool\n","\n","if itv != 'T':\n","    join_cols = np.arange(-15, 0, 1).astype(int)  # wave vars. + wave_unit's col\n","    res_df.drop(t_df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","    try:\n","        res_df = res_df.join(to_lower_tf_v3(res_df, t_df, join_cols, backing_i=0), how='inner')\n","    except Exception as e:\n","        print(\"error in wave_range()'s join() :\", e)\n","\n","    return res_df\n","\n","else:\n","    return t_df"],"metadata":{"id":"TqMmmSAGuChM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["roll_hl_cnt = 3\n","wave_itv = pd.infer_freq(t_df.index)\n","wave_period = config.tr_set.wave_period\n","\n","len_df = len(t_df)\n","\n","high_prime_idx = t_df['wave_high_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()   # cu_post_idx\n","low_prime_idx = t_df['wave_low_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()    \n","\n","valid_high_prime_idx = high_prime_idx[~np.isnan(high_prime_idx)].astype(int)  # roll_high 를 위한 prime_idx\n","valid_low_prime_idx = low_prime_idx[~np.isnan(low_prime_idx)].astype(int)  # roll_low 를 위한 prime_idx\n","\n","roll_high_idx_arr = np.array([valid_high_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_high_prime_idx)) if idx_ + 1 >= roll_hl_cnt])  # cnt 수를 만족시키기 위해 idx 제한\n","roll_low_idx_arr = np.array([valid_low_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_low_prime_idx)) if idx_ + 1 >= roll_hl_cnt])\n"],"metadata":{"id":"50ucQUF-Jixd"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##### legacy"],"metadata":{"id":"Q_1wJTcRYpm8"}},{"cell_type":"code","source":["\n","def get_roll_wave_data(valid_prime_idx, roll_idx_arr, len_df, data, roll_hl_cnt):\n","\n","    roll_data = pd.DataFrame(np.full((len_df, roll_hl_cnt), np.nan))\n","    roll_data.iloc[valid_prime_idx[roll_hl_cnt - 1:], :] = data[roll_idx_arr]  # 제한된 idx 를 제외한 row 에 roll_hl 입력\n","\n","    return roll_data.ffill().to_numpy()\n","\n","def roll_wave_hl_idx_v4(t_df, wave_itv, wave_period, roll_hl_cnt=4):\n","\n","    high_prime_idx = t_df['wave_high_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    low_prime_idx = t_df['wave_low_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","\n","    valid_high_prime_idx = high_prime_idx[~np.isnan(high_prime_idx)].astype(int)  # roll_high 를 위한 prime_idx, this should be \"unique\"\n","    valid_low_prime_idx = low_prime_idx[~np.isnan(low_prime_idx)].astype(int)  # roll_low 를 위한 prime_idx\n","\n","    roll_high_idx_arr = np.array([valid_high_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_high_prime_idx)) if\n","                                  idx_ + 1 >= roll_hl_cnt])  # cnt 수를 만족시키기 위해 idx 제한\n","    roll_low_idx_arr = np.array(\n","        [valid_low_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_low_prime_idx)) if idx_ + 1 >= roll_hl_cnt])\n","\n","    return valid_high_prime_idx, valid_low_prime_idx, roll_high_idx_arr, roll_low_idx_arr\n","    \n","def wave_range_ratio_v4_1(res_df, config, roll_hl_cnt=3):\n","    wave_itv = pd.infer_freq(res_df.index)\n","    wave_period = config.tr_set.wave_period\n","    len_df = len(res_df)\n","\n","    valid_high_prime_idx, valid_low_prime_idx, roll_high_idx_arr, roll_low_idx_arr = roll_wave_hl_v4(res_df, config, roll_hl_cnt=roll_hl_cnt)\n","\n","    wave_high_fill_ = res_df['wave_high_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    wave_low_fill_ = res_df['wave_low_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    roll_high_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, wave_high_fill_, roll_hl_cnt)\n","    roll_low_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, wave_low_fill_, roll_hl_cnt)\n","\n","    cu_wave1_range = roll_high_[:, -1] - roll_low_[:, -2]   # cu's roll_high_[:, -1] = prev_high & cu's roll_low_[:, -1] = current_low\n","    cu_wave2_range = roll_high_[:, -1] - wave_low_fill_     # for short, cu\n","    co_wave1_range = roll_high_[:, -2] - roll_low_[:, -1]   # co's roll_low_[:, -1] = prev_low & co's roll_high_[:, -1] = current_high\n","    co_wave2_range = wave_high_fill_ - roll_low_[:, -1]     # for long, co\n","    wave3_range = wave_high_fill_ - wave_low_fill_\n","\n","    res_df['cu_wrr_21_{}{}'.format(wave_itv, wave_period)] = cu_wave2_range / cu_wave1_range\n","    res_df['cu_wrr_32_{}{}'.format(wave_itv, wave_period)] = wave3_range / cu_wave2_range\n","\n","    res_df['co_wrr_21_{}{}'.format(wave_itv, wave_period)] = co_wave2_range / co_wave1_range\n","    res_df['co_wrr_32_{}{}'.format(wave_itv, wave_period)] = wave3_range / co_wave2_range\n","\n","    return res_df\n","\n","def wave_range_ratio_v4(res_df, config, roll_hl_cnt=3):\n","    wave_itv = pd.infer_freq(res_df.index)\n","    wave_period = config.tr_set.wave_period\n","    len_df = len(res_df)\n","\n","    valid_high_prime_idx, valid_low_prime_idx, roll_high_idx_arr, roll_low_idx_arr = roll_wave_hl_v4(res_df, config, roll_hl_cnt=roll_hl_cnt)\n","\n","    wave_high_fill_ = res_df['wave_high_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    wave_low_fill_ = res_df['wave_low_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    roll_high_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, wave_high_fill_, roll_hl_cnt)\n","    roll_low_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, wave_low_fill_, roll_hl_cnt)\n","\n","    wave1_range = roll_high_[:, -2] - roll_low_[:, -2]\n","    cu_wave2_range = roll_high_[:, -2] - roll_low_[:, -1]  # for short, cu\n","    co_wave2_range = roll_high_[:, -1] - roll_low_[:, -2]  # for long, co\n","    wave3_range = roll_high_[:, -1] - roll_low_[:, -1]\n","\n","    res_df['cu_wrr_21_{}{}'.format(wave_itv, wave_period)] = cu_wave2_range / wave1_range\n","    res_df['cu_wrr_32_{}{}'.format(wave_itv, wave_period)] = wave3_range / cu_wave2_range\n","\n","    res_df['co_wrr_21_{}{}'.format(wave_itv, wave_period)] = co_wave2_range / wave1_range\n","    res_df['co_wrr_32_{}{}'.format(wave_itv, wave_period)] = wave3_range / co_wave2_range\n","\n","    return res_df\n","\n","\n","def get_terms_info_v4(cu_idx, co_idx, len_df, len_df_range):\n","\n","    cu_fill_idx = fill_arr(cu_idx)\n","    co_fill_idx = fill_arr(co_idx)\n","\n","    notnan_cu_bool = ~np.isnan(cu_idx)\n","    notnan_co_bool = ~np.isnan(co_idx)\n","\n","    valid_cu_bool = notnan_cu_bool * ~np.isnan(co_fill_idx)  # high_terms 를 위해 pair 되는 fill & idx 의 nan 제거\n","    valid_co_bool = notnan_co_bool * ~np.isnan(cu_fill_idx)\n","\n","    # ------ 생략된 idx 에 대한 prime_idx 탐색 ------ #\n","    high_bool = cu_fill_idx < co_fill_idx  # 이렇게 해야 high_terms[:, 1] 이 cu_idx 가 나옴\n","    low_bool = co_fill_idx < cu_fill_idx\n","\n","    high_terms_vec = get_index_bybool(high_bool, len_df_range)\n","    low_terms_vec = get_index_bybool(low_bool, len_df_range)  # -> low_terms\n","\n","    high_terms_list = using_clump(high_terms_vec)\n","    low_terms_list = using_clump(low_terms_vec)\n","\n","    valid_co_prime_idx = np.array([terms.min() for terms in high_terms_list])\n","    valid_cu_prime_idx = np.array([terms.min() for terms in low_terms_list])\n","\n","    valid_co_post_idx = np.array([terms.max() for terms in high_terms_list])\n","    valid_cu_post_idx = np.array([terms.max() for terms in low_terms_list])\n","\n","    cu_prime_idx = np.full(len_df, np.nan)\n","    co_prime_idx = np.full(len_df, np.nan)\n","\n","    cu_prime_idx[valid_cu_prime_idx] = valid_cu_prime_idx\n","    co_prime_idx[valid_co_prime_idx] = valid_co_prime_idx\n","\n","    cu_prime_fill_idx = fill_arr(cu_prime_idx)\n","    co_prime_fill_idx = fill_arr(co_prime_idx)\n","\n","    # cu_post_idx = np.full(len_df, np.nan)\n","    # co_post_idx = np.full(len_df, np.nan)\n","\n","    # cu_post_idx[valid_cu_post_idx] = valid_cu_post_idx\n","    # co_post_idx[valid_co_post_idx] = valid_co_post_idx\n","\n","    # cu_post_fill_idx = fill_arr(cu_post_idx)\n","    # co_post_fill_idx = fill_arr(co_post_idx)\n","\n","    valid_cu_bool *= ~np.isnan(co_prime_fill_idx)\n","    valid_co_bool *= ~np.isnan(cu_prime_fill_idx)\n","\n","    return cu_fill_idx, co_fill_idx, cu_prime_idx, co_prime_idx, cu_prime_fill_idx, co_prime_fill_idx, valid_cu_bool, valid_co_bool\n","    # return cu_fill_idx, co_fill_idx, cu_prime_idx, co_prime_idx, cu_prime_fill_idx, co_prime_fill_idx, \\\n","    #         cu_post_idx, co_post_idx, cu_post_fill_idx, co_post_fill_idx, valid_cu_bool, valid_co_bool\n","\n","\n","def wave_range_dcbase_v11_3(res_df, config, itv='T', over_period=2):  # v2 for period1 only\n","\n","    if itv != 'T':\n","      offset = '1h' if itv != 'D' else '9h'\n","      t_df = to_htf(res_df, itv, offset=offset)\n","    else:\n","      t_df = res_df\n","\n","    period1 = config.tr_set.wave_period\n","    itv_num = to_itvnum(itv)\n","    # print(itv_num)\n","\n","    t_df = donchian_channel_v4(t_df, period1)\n","\n","    dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].to_numpy()\n","    # b1_dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].shift(itv_num).to_numpy()\n","\n","    len_df = len(t_df)\n","    len_df_range = np.arange(len_df).astype(int)\n","    # short_open_res = np.ones(len_df)\n","    # long_open_res = np.ones(len_df)\n","\n","    data_cols = ['open', 'high', 'low', 'close']\n","    open, high, low, close = [t_df[col_].to_numpy() for col_ in data_cols]\n","    # b1_close = t_df.close.shift(itv_num).to_numpy()\n","\n","    over_base = close > dc_base_\n","    prev_over_base = pd.Series(over_base).rolling(over_period).min().shift(1).to_numpy() == 1   # min = 1 => period's all-over, max = 0\n","    prev_under_base = pd.Series(over_base).rolling(over_period).max().shift(1).to_numpy() == 0  # max = 0 => period's all-under, \n","\n","    # ============ modules ============ #\n","    # ------ define co, cu ------ # <- point missing 과 관련해 정교해아함    \n","    cu_bool = prev_over_base & ~over_base\n","    co_bool = prev_under_base & over_base\n","\n","    cu_idx = get_index_bybool(cu_bool, len_df_range)\n","    co_idx = get_index_bybool(co_bool, len_df_range)\n","    \n","    cu_fill_idx, co_fill_idx, cu_prime_idx, co_prime_idx, cu_prime_fill_idx, co_prime_fill_idx, valid_cu_bool, valid_co_bool = get_terms_info_v4(cu_idx, co_idx, len_df, len_df_range)    \n","\n","    # ------ get post_terms ------ #\n","    high_post_terms = np.vstack((co_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","    low_post_terms = np.vstack((cu_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)\n","\n","    high_post_terms_cnt = high_post_terms[:, 1] - high_post_terms[:, 0]\n","    low_post_terms_cnt = low_post_terms[:, 1] - low_post_terms[:, 0]\n","\n","    paired_post_cu_idx = high_post_terms[:, 1]\n","    paired_post_co_idx = low_post_terms[:, 1]\n","\n","    # ------ get prime_terms ------ # # 기본은 아래 logic 으로 수행하고, update_hl 도 해당 term 구간의 hl 이 더 작거나 클경우 적용 가능할 것\n","    # high_prime_terms = np.vstack((co_prime_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","    # low_prime_terms = np.vstack((cu_prime_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)\n","    \n","    # high_prime_terms_cnt = high_prime_terms[:, 1] - high_prime_terms[:, 0]\n","    # low_prime_terms_cnt = low_prime_terms[:, 1] - low_prime_terms[:, 0]\n","\n","    # paired_prime_cu_idx = high_prime_terms[:, 1]\n","    # paired_prime_co_idx = low_prime_terms[:, 1]\n","\n","    # ====== get wave_hl & terms ====== #\n","    wave_high_ = np.full(len_df, np.nan)\n","    wave_low_ = np.full(len_df, np.nan)\n","\n","    wave_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_post_terms])\n","    wave_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_post_terms])\n","\n","    wave_high_[paired_post_cu_idx] = wave_highs\n","    wave_low_[paired_post_co_idx] = wave_lows\n","\n","    wave_high_fill_ = fill_arr(wave_high_)\n","    wave_low_fill_ = fill_arr(wave_low_)\n","\n","    # # ------ Todo, update_hl 에 대해서, post_terms_hl 적용 ------ #\n","    wave_high_terms_low_ = np.full(len_df, np.nan)\n","    wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","    wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_post_terms])  # for point rejection, Todo, min_max 설정 항상 주의\n","    wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_post_terms])\n","\n","    wave_high_terms_low_[paired_post_cu_idx] = wave_high_terms_lows\n","    wave_low_terms_high_[paired_post_co_idx] = wave_low_terms_highs\n","\n","    update_low_cu_bool = wave_high_terms_low_ < wave_low_fill_\n","    update_high_co_bool = wave_low_terms_high_ > wave_high_fill_\n","\n","    wave_high_fill_ = fill_arr(wave_high_)\n","    wave_low_fill_ = fill_arr(wave_low_)\n","\n","    wave_high_terms_cnt_ = np.full(len_df, np.nan)\n","    wave_low_terms_cnt_ = np.full(len_df, np.nan)\n","\n","    wave_high_terms_cnt_[paired_post_cu_idx] = high_post_terms_cnt\n","    wave_low_terms_cnt_[paired_post_co_idx] = low_post_terms_cnt\n","\n","    wave_high_terms_cnt_fill_ = fill_arr(wave_high_terms_cnt_)\n","    wave_low_terms_cnt_fill_ = fill_arr(wave_low_terms_cnt_)\n","\n","    # ------ hl_fill 의 prime_idx 를 찾아야함 ------ #\n","    b1_wave_high_fill_ = pd.Series(wave_high_fill_).shift(1).to_numpy()\n","    b1_wave_low_fill_ = pd.Series(wave_low_fill_).shift(1).to_numpy()\n","    wave_high_prime_idx = np.where((wave_high_fill_ != b1_wave_high_fill_) & ~np.isnan(wave_high_fill_), len_df_range, np.nan)\n","    wave_low_prime_idx = np.where((wave_low_fill_ != b1_wave_low_fill_) & ~np.isnan(wave_low_fill_), len_df_range, np.nan)\n","\n","    high_prime_idx_fill_ = fill_arr(wave_high_prime_idx)\n","    low_prime_idx_fill_ = fill_arr(wave_low_prime_idx)\n","\n","    # ============ enlist to df_cols ============ #\n","    t_df['wave_high_fill_{}{}'.format(itv, period1)] = wave_high_fill_\n","    t_df['wave_low_fill_{}{}'.format(itv, period1)] = wave_low_fill_\n","    t_df['wave_high_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_high_terms_cnt_fill_\n","    t_df['wave_low_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_low_terms_cnt_fill_\n","    t_df['wave_cu_{}{}'.format(itv, period1)] = cu_bool * ~update_low_cu_bool\n","    t_df['wave_co_{}{}'.format(itv, period1)] = co_bool * ~update_high_co_bool\n","    t_df['wave_cu_bool_{}{}'.format(itv, period1)] = cu_bool  # temporary, for plot_check\n","    t_df['wave_co_bool_{}{}'.format(itv, period1)] = co_bool\n","    t_df['wave_cu_marker_{}{}'.format(itv, period1)] = get_line(cu_idx, dc_base_)\n","    t_df['wave_co_marker_{}{}'.format(itv, period1)] = get_line(co_idx, dc_base_)\n","\n","    # ------ for roll prev_hl ------ #\n","    # high_post_idx 를 위해 co_prime_idx 입력\n","    t_df['wave_high_prime_idx_{}{}'.format(itv, period1)] = co_prime_idx # co_prime_idx wave_high_prime_idx  # high 갱신을 고려해, prev_hl 는 prime_idx 기준으로 진행\n","    t_df['wave_low_prime_idx_{}{}'.format(itv, period1)] = cu_prime_idx # cu_prime_idx wave_low_prime_idx  # cu_prime_idx's low 를 사용하겠다라는 의미, 즉 roll_prev 임\n","\n","    # ------ for first_high ------ #\n","    t_df['wave_high_prime_idx_fill_{}{}'.format(itv, period1)] = co_prime_fill_idx # co_prime_fill_idx high_prime_idx_fill_\n","    t_df['wave_low_prime_idx_fill_{}{}'.format(itv, period1)] = cu_prime_fill_idx # cu_prime_fill_idx low_prime_idx_fill_\n","    \n","    if itv != 'T':\n","        join_cols = np.arange(-17, 0, 1).astype(int)  # points & donchian_channels\n","        res_df.drop(t_df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","        try:\n","            res_df = res_df.join(to_lower_tf_v3(res_df, t_df, join_cols), how='inner')\n","        except Exception as e:\n","            print(\"error in wave_range()'s join() :\", e)\n","            \n","        return res_df\n","\n","    else:\n","        return t_df\n","\n","def wave_range_v11_2(res_df, config, itv='T'):  # v2 for period1 only\n","\n","    if itv != 'T':\n","      offset = '1h' if itv != 'D' else '9h'\n","      t_df = to_htf(res_df, itv, offset=offset)\n","    else:\n","      t_df = res_df\n","\n","    period1 = config.tr_set.wave_period\n","    itv_num = to_itvnum(itv)\n","    # print(itv_num)\n","\n","    t_df = donchian_channel_v4(t_df, period1)\n","\n","    dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].to_numpy()\n","    b1_dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].shift(itv_num).to_numpy()\n","\n","    len_df = len(t_df)\n","    len_df_range = np.arange(len_df).astype(int)\n","    # short_open_res = np.ones(len_df)\n","    # long_open_res = np.ones(len_df)\n","\n","    data_cols = ['open', 'high', 'low', 'close']\n","    open, high, low, close = [t_df[col_].to_numpy() for col_ in data_cols]\n","    b1_close = t_df.close.shift(itv_num).to_numpy()\n","\n","    # ============ modules ============ #\n","    # ------ define co, cu ------ # <- point missing 과 관련해 정교해아함\n","    cu_bool = ((b1_close > b1_dc_base_) & (dc_base_ > close)) | ((b1_close > dc_base_) & (dc_base_ > close))\n","    co_bool = (b1_close < b1_dc_base_) & (dc_base_ < close) | ((b1_close < dc_base_) & (dc_base_ < close))\n","    cu_idx = get_index_bybool(cu_bool, len_df_range)\n","    co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","    cu_fill_idx = fill_arr(cu_idx)\n","    co_fill_idx = fill_arr(co_idx)\n","\n","    # ------ get co, cu terms ------ #\n","    high_bool = cu_fill_idx < co_fill_idx\n","    low_bool = co_fill_idx < cu_fill_idx\n","\n","    high_terms_vec = get_index_bybool(high_bool, len_df_range)\n","    low_terms_vec = get_index_bybool(low_bool, len_df_range)  # -> low_terms\n","\n","    high_terms_list = using_clump(high_terms_vec)\n","    low_terms_list = using_clump(low_terms_vec)\n","\n","    high_terms = np.array([[terms.min(), terms.max() + 1] for terms in high_terms_list])\n","    low_terms = np.array([[terms.min(), terms.max() + 1] for terms in low_terms_list])\n","\n","    high_terms_cnt = high_terms[:, 1] - high_terms[:, 0]\n","    low_terms_cnt = low_terms[:, 1] - low_terms[:, 0]\n","\n","    wave_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_terms])\n","    wave_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_terms])\n","\n","    # ------ get valid_idx range (inner len_df) ------ #\n","    paired_cu_idx = high_terms[:, 1]\n","    paired_co_idx = low_terms[:, 1]\n","\n","    valid_cu_bool = paired_cu_idx < len_df\n","    valid_co_bool = paired_co_idx < len_df\n","\n","    paired_cu_valid_idx = paired_cu_idx[valid_cu_bool]\n","    paired_co_valid_idx = paired_co_idx[valid_co_bool]\n","\n","    # ------ get wave_hl & terms ------ #\n","    wave_high_ = np.full(len_df, np.nan)\n","    wave_low_ = np.full(len_df, np.nan)\n","\n","    wave_high_[paired_cu_valid_idx] = wave_highs[valid_cu_bool]\n","    wave_low_[paired_co_valid_idx] = wave_lows[valid_co_bool]\n","\n","    wave_high_fill_ = fill_arr(wave_high_)\n","    wave_low_fill_ = fill_arr(wave_low_)\n","\n","    wave_high_terms_cnt_ = np.full(len_df, np.nan)\n","    wave_low_terms_cnt_ = np.full(len_df, np.nan)\n","\n","    wave_high_terms_cnt_[paired_cu_valid_idx] = high_terms_cnt[valid_cu_bool]\n","    wave_low_terms_cnt_[paired_co_valid_idx] = low_terms_cnt[valid_co_bool]\n","\n","    wave_high_terms_cnt_fill_ = fill_arr(wave_high_terms_cnt_)\n","    wave_low_terms_cnt_fill_ = fill_arr(wave_low_terms_cnt_)\n","\n","    # ------ check update high & low (occurs by point missing) ------ #\n","    co_prime_idx = np.full(len_df, np.nan)\n","    co_prime_idx[paired_co_valid_idx] = paired_co_valid_idx\n","    co_prime_idx_fill_ = fill_arr(co_prime_idx)\n","    # valid_idx = co_idx > co_prime_idx_fill_\n","    valid_idx = cu_idx > co_prime_idx_fill_\n","\n","    update_low = np.full(len_df, np.nan)\n","    # update_low[valid_idx] = [low[iin:iout + 1].min() for iin, iout in zip(cu_prime_idx_fill_[valid_idx].astype(int), cu_idx[valid_idx].astype(int))]  # include open low\n","    # 1. 잘 생각해보면, cu_idx 에는 co_prime_idx_fill_ 을 사용하는게 맞음\n","    #   a. cu_idx 에 달려있는 low 가 co_prime_idx_fill_ 기준이니까\n","    update_low[valid_idx] = [low[iin:iout + 1].min() for iin, iout in zip(co_prime_idx_fill_[valid_idx].astype(int), cu_idx[valid_idx].astype(int))]  # high_terms' update_low\n","\n","    cu_prime_idx = np.full(len_df, np.nan)\n","    cu_prime_idx[paired_cu_valid_idx] = paired_cu_valid_idx\n","    cu_prime_idx_fill_ = fill_arr(cu_prime_idx)\n","    valid_idx = co_idx > cu_prime_idx_fill_\n","\n","    update_high = np.full(len_df, np.nan)\n","    update_high[valid_idx] = [high[iin:iout + 1].max() for iin, iout in zip(cu_prime_idx_fill_[valid_idx].astype(int), co_idx[valid_idx].astype(int))]\n","\n","    # ============ enlist to df_cols ============ #\n","    t_df['wave_high_fill_{}{}'.format(itv, period1)] = wave_high_fill_\n","    t_df['wave_low_fill_{}{}'.format(itv, period1)] = wave_low_fill_\n","    t_df['wave_high_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_high_terms_cnt_fill_\n","    t_df['wave_low_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_low_terms_cnt_fill_\n","    t_df['wave_cu_{}{}'.format(itv, period1)] = cu_bool * ~(update_low < wave_low_fill_)  # point_missing 으로 인한 low 갱신 회피\n","    t_df['wave_co_{}{}'.format(itv, period1)] = co_bool * ~(update_high > wave_high_fill_)\n","    t_df['wave_cu_bool_{}{}'.format(itv, period1)] = cu_bool  # temporary, for plot_check\n","    t_df['wave_co_bool_{}{}'.format(itv, period1)] = co_bool\n","    t_df['wave_cu_marker_{}{}'.format(itv, period1)] = get_line(cu_idx, dc_base_)\n","    t_df['wave_co_marker_{}{}'.format(itv, period1)] = get_line(co_idx, dc_base_)\n","\n","    # ------ for roll prev_hl ------ #\n","    t_df['wave_high_prime_idx_{}{}'.format(itv, period1)] = cu_prime_idx\n","    t_df['wave_low_prime_idx_{}{}'.format(itv, period1)] = co_prime_idx\n","\n","    # ------ for first_high ------ #\n","    t_df['wave_high_prime_idx_fill_{}{}'.format(itv, period1)] = cu_prime_idx_fill_\n","    t_df['wave_low_prime_idx_fill_{}{}'.format(itv, period1)] = co_prime_idx_fill_\n","    \n","    if itv != 'T':\n","        join_cols = np.arange(-17, 0, 1).astype(int)  # points & donchian_channels\n","        res_df.drop(t_df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","        try:\n","            res_df = res_df.join(to_lower_tf_v3(res_df, t_df, join_cols), how='inner')\n","        except Exception as e:\n","            print(\"error in wave_range()'s join() :\", e)\n","            \n","        return res_df\n","\n","    else:\n","        return t_df\n","\n"],"metadata":{"id":"RVFfP9VcDG2_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","\n","def roll_wave_hl_v3(t_df, config, roll_hl_cnt=4):\n","  \n","    wave_itv = pd.infer_freq(t_df.index)\n","    wave_period = config.tr_set.wave_period\n","\n","    len_df = len(t_df)\n","\n","    wave_high_fill_ = t_df['wave_high_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    wave_low_fill_ = t_df['wave_low_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    high_prime_idx = t_df['wave_high_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    low_prime_idx = t_df['wave_low_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()    \n","    high_prime_idx_fill_ = t_df['wave_high_prime_idx_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    low_prime_idx_fill_ = t_df['wave_low_prime_idx_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","\n","    valid_high_prime_idx = high_prime_idx[~np.isnan(high_prime_idx)].astype(int)  # roll_high 를 위한 prime_idx\n","    valid_low_prime_idx = low_prime_idx[~np.isnan(low_prime_idx)].astype(int)  # roll_low 를 위한 prime_idx\n","\n","    roll_high_idx_arr = np.array([valid_high_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_high_prime_idx)) if idx_ + 1 >= roll_hl_cnt])  # cnt 수를 만족시키기 위해 idx 제한\n","    roll_low_idx_arr = np.array([valid_low_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_low_prime_idx)) if idx_ + 1 >= roll_hl_cnt])\n","\n","    roll_high_ = pd.DataFrame(np.full((len_df, roll_hl_cnt), np.nan))\n","    roll_low_ = pd.DataFrame(np.full((len_df, roll_hl_cnt), np.nan))    \n","    roll_high_prime_idx_ = pd.DataFrame(np.full((len_df, roll_hl_cnt), np.nan))\n","    roll_low_prime_idx_ = pd.DataFrame(np.full((len_df, roll_hl_cnt), np.nan))\n","\n","    roll_high_.iloc[valid_high_prime_idx[roll_hl_cnt - 1:], :] = wave_high_fill_[roll_high_idx_arr]  # 제한된 idx 를 제외한 row 에 roll_hl 입력\n","    roll_low_.iloc[valid_low_prime_idx[roll_hl_cnt - 1:], :] = wave_low_fill_[roll_low_idx_arr]\n","    roll_high_prime_idx_.iloc[valid_high_prime_idx[roll_hl_cnt - 1:], :] = high_prime_idx_fill_[roll_high_idx_arr]  # 제한된 idx 를 제외한 row 에 roll_hl 입력\n","    roll_low_prime_idx_.iloc[valid_low_prime_idx[roll_hl_cnt - 1:], :] = low_prime_idx_fill_[roll_low_idx_arr]\n","\n","    return roll_high_.ffill().to_numpy(), roll_low_.ffill().to_numpy(), roll_high_prime_idx_.ffill().to_numpy(), roll_low_prime_idx_.ffill().to_numpy()  # t_df 에 hl_cnt 만큼 col 만들어야해서 numpy 로 뽑음\n","\n","\n","def wave_range_v15(res_df, config, itv='T', term_thresh1=1, term_thresh2=3):  # v2 for period1 only\n","  \n","    # itv = pd.infer_freq(t_df.index)\n","    if itv != 'T':\n","      offset = '1h' if itv != 'D' else '9h'\n","      t_df = to_htf(res_df, itv, offset=offset)\n","    else:\n","      t_df = res_df\n","\n","    period1 = config.tr_set.wave_period\n","    # print(period1)\n","\n","    itv_num = to_itvnum(itv)\n","    # print(itv_num)\n","\n","    t_df = donchian_channel_v4(t_df, period1)\n","\n","    dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].to_numpy()\n","    b1_dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].shift(itv_num).to_numpy()\n","\n","    len_df = len(t_df)\n","    len_df_range = np.arange(len_df).astype(int)\n","    # short_open_res = np.ones(len_df)\n","    # long_open_res = np.ones(len_df)\n","\n","    data_cols = ['open', 'high', 'low', 'close']\n","    open, high, low, close = [t_df[col_].to_numpy() for col_ in data_cols]\n","    b1_close = t_df.close.shift(itv_num).to_numpy()\n","\n","    # ============ modules ============ #\n","    # ------ define co, cu ------ # <- point missing 과 관련해 정교해아함\n","    cu_bool = ((b1_close > b1_dc_base_) & (dc_base_ > close)) | ((b1_close > dc_base_) & (dc_base_ > close))\n","    co_bool = (b1_close < b1_dc_base_) & (dc_base_ < close) | ((b1_close < dc_base_) & (dc_base_ < close))\n","\n","    cu_idx = get_index_bybool(cu_bool, len_df_range)  # for marking\n","    co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","    # high_terms, low_terms, high_terms_cnt, low_terms_cnt = get_terms_info(cu_bool, co_bool, len_df_range)\n","    # high_terms, low_terms, high_terms_cnt, low_terms_cnt, cu_idx_term, co_idx_term = get_terms_info_v2(cu_bool, co_bool, len_df_range)\n","    high_terms, low_terms, high_terms_cnt, low_terms_cnt, cu_idx_term, co_idx_term = get_terms_info_v3(cu_bool, co_bool, len_df, len_df_range)\n","\n","    paired_cu_idx1 = high_terms[:, 1]\n","    paired_co_idx1 = low_terms[:, 1]\n","\n","    # ------ 생략 이전 terms' hl ------ #\n","    wave_high_terms_low_ = np.full(len_df, np.nan)\n","    wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","    wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_terms])\n","    wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_terms])\n","\n","    wave_high_terms_low_[paired_cu_idx1] = wave_high_terms_lows\n","    wave_low_terms_high_[paired_co_idx1] = wave_low_terms_highs\n","\n","    # ------ 생략된 cu, co 에 대한 2nd pairing 진행 ------ #\n","    # cu_bool[high_terms[:, 1][high_terms_cnt <= term_thresh]] = False\n","    # co_bool[low_terms[:, 1][low_terms_cnt <= term_thresh]] = False\n","    cu_bool[high_terms[:, 1][(high_terms_cnt <= term_thresh1) & (cu_idx_term <= term_thresh2)]] = False\n","    co_bool[low_terms[:, 1][(low_terms_cnt <= term_thresh1) & (co_idx_term <= term_thresh2)]] = False\n","\n","    # high_terms, low_terms, high_terms_cnt, low_terms_cnt = get_terms_info(cu_bool, co_bool, len_df_range)\n","    # high_terms, low_terms, high_terms_cnt, low_terms_cnt, _, _ = get_terms_info_v2(cu_bool, co_bool, len_df_range)\n","    high_post_terms, low_post_terms, high_prime_terms_cnt, low_prime_terms_cnt, high_prime_terms, low_prime_terms, _, _ = get_terms_info_v3(cu_bool,\n","                                                                                                                                          co_bool,\n","                                                                                                                                          len_df,\n","                                                                                                                                          len_df_range,\n","                                                                                                                                          True)\n","\n","    paired_cu_idx2 = high_prime_terms[:, 1]\n","    paired_co_idx2 = low_prime_terms[:, 1]\n","\n","    # ====== get wave_hl & terms ====== #\n","    wave_high_ = np.full(len_df, np.nan)\n","    wave_low_ = np.full(len_df, np.nan)\n","\n","    wave_prime_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_prime_terms])\n","    wave_prime_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_prime_terms])\n","\n","    wave_high_[paired_cu_idx2] = wave_prime_highs\n","    wave_low_[paired_co_idx2] = wave_prime_lows\n","\n","    wave_high_fill_ = fill_arr(wave_high_)\n","    wave_low_fill_ = fill_arr(wave_low_)\n","\n","    # ------ Todo, update_hl 에 대해서, post_terms_hl 적용 ------ #\n","    wave_post_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_terms])  # 생략전 post_terms_hl 사용\n","    wave_post_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_terms])\n","\n","    update_low_cu_bool = wave_high_terms_low_ < wave_low_fill_\n","    update_high_co_bool = wave_low_terms_high_ > wave_high_fill_\n","\n","    update_paired_cu_bool = (cu_bool * update_low_cu_bool)[paired_cu_idx1]\n","    update_paired_cu_idx = paired_cu_idx1[update_paired_cu_bool]\n","    wave_high_[update_paired_cu_idx] = wave_post_highs[update_paired_cu_bool]\n","\n","    update_paired_co_bool = (co_bool * update_high_co_bool)[paired_co_idx1]\n","    update_paired_co_idx = paired_co_idx1[update_paired_co_bool]\n","    wave_low_[update_paired_co_idx] = wave_post_lows[update_paired_co_bool]\n","\n","    # wave_high_fill2_ = fill_arr(wave_high_)\n","    # wave_low_fill2_ = fill_arr(wave_low_)\n","    wave_high_fill_ = fill_arr(wave_high_)\n","    wave_low_fill_ = fill_arr(wave_low_)\n","\n","    # wave_high_terms_low_ = np.full(len_df, np.nan)\n","    # wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","    # wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_terms])  # for point rejection, Todo, min_max 설정 항상 주의\n","    # wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_terms])\n","\n","    # wave_high_terms_low_[paired_cu_idx] = wave_high_terms_lows\n","    # wave_low_terms_high_[paired_co_idx] = wave_low_terms_highs\n","\n","    wave_high_terms_cnt_ = np.full(len_df, np.nan)\n","    wave_low_terms_cnt_ = np.full(len_df, np.nan)\n","\n","    wave_high_terms_cnt_[paired_cu_idx2] = high_prime_terms_cnt\n","    wave_low_terms_cnt_[paired_co_idx2] = low_prime_terms_cnt\n","\n","    wave_high_terms_cnt_fill_ = fill_arr(wave_high_terms_cnt_)\n","    wave_low_terms_cnt_fill_ = fill_arr(wave_low_terms_cnt_)\n","\n","    # ------ hl_fill 의 prime_idx 를 찾아야함 ------ #\n","    b1_wave_high_fill_ = pd.Series(wave_high_fill_).shift(1).to_numpy()\n","    b1_wave_low_fill_ = pd.Series(wave_low_fill_).shift(1).to_numpy()\n","    wave_high_prime_idx = np.where((wave_high_fill_ != b1_wave_high_fill_) & ~np.isnan(wave_high_fill_), len_df_range, np.nan)\n","    wave_low_prime_idx = np.where((wave_low_fill_ != b1_wave_low_fill_) & ~np.isnan(wave_low_fill_), len_df_range, np.nan)\n","\n","    high_prime_idx_fill_ = fill_arr(wave_high_prime_idx)\n","    low_prime_idx_fill_ = fill_arr(wave_low_prime_idx)\n","\n","    # ============ enlist to df_cols ============ #\n","    t_df['wave_high_fill_{}{}'.format(itv, period1)] = wave_high_fill_\n","    t_df['wave_low_fill_{}{}'.format(itv, period1)] = wave_low_fill_\n","    # t_df['wave_high_fill2_{}{}'.format(itv, period1)] = wave_high_fill2_\n","    # t_df['wave_low_fill2_{}{}'.format(itv, period1)] = wave_low_fill2_\n","\n","    t_df['wave_high_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_high_terms_cnt_fill_\n","    t_df['wave_low_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_low_terms_cnt_fill_\n","    t_df['wave_cu_{}{}'.format(itv, period1)] = cu_bool * ~update_low_cu_bool\n","    t_df['wave_co_{}{}'.format(itv, period1)] = co_bool * ~update_high_co_bool\n","    t_df['wave_cu_bool_{}{}'.format(itv, period1)] = cu_bool  # temporary, for plot_check\n","    t_df['wave_co_bool_{}{}'.format(itv, period1)] = co_bool\n","    t_df['wave_cu_marker_{}{}'.format(itv, period1)] = get_line(cu_idx, dc_base_)\n","    t_df['wave_co_marker_{}{}'.format(itv, period1)] = get_line(co_idx, dc_base_)\n","\n","    # ------ for roll prev_hl ------ #\n","    t_df['wave_high_prime_idx_{}{}'.format(itv, period1)] = wave_high_prime_idx  # cu\n","    t_df['wave_low_prime_idx_{}{}'.format(itv, period1)] = wave_low_prime_idx\n","\n","    # ------ for first_high ------ #\n","    t_df['wave_high_prime_idx_fill_{}{}'.format(itv, period1)] = high_prime_idx_fill_\n","    t_df['wave_low_prime_idx_fill_{}{}'.format(itv, period1)] = low_prime_idx_fill_\n","    \n","    if itv != 'T':\n","        join_cols = np.arange(-17, 0, 1).astype(int)  # points & donchian_channels\n","        res_df.drop(t_df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","        try:\n","            res_df = res_df.join(to_lower_tf_v3(res_df, t_df, join_cols), how='inner')\n","        except Exception as e:\n","            print(\"error in wave_range()'s join() :\", e)\n","            \n","        return res_df\n","\n","    else:\n","        return t_df\n","\n","\n","def wave_range_ratio_v3(res_df, config):\n","    wave_itv = pd.infer_freq(res_df.index)\n","    wave_period = config.tr_set.wave_period\n","\n","    roll_high_, roll_low_, _, _ = roll_wave_hl_v3(res_df, config, roll_hl_cnt=4)\n","\n","    wave1_range = roll_high_[:, -2] - roll_low_[:, -2]\n","    cu_wave2_range = roll_high_[:, -2] - roll_low_[:, -1]  # for short, cu\n","    co_wave2_range = roll_high_[:, -1] - roll_low_[:, -2]  # for long, co\n","    wave3_range = roll_high_[:, -1] - roll_low_[:, -1]\n","\n","    res_df['cu_wrr_21_{}{}'.format(wave_itv, wave_period)] = cu_wave2_range / wave1_range\n","    res_df['cu_wrr_32_{}{}'.format(wave_itv, wave_period)] = wave3_range / cu_wave2_range\n","\n","    res_df['co_wrr_21_{}{}'.format(wave_itv, wave_period)] = co_wave2_range / wave1_range\n","    res_df['co_wrr_32_{}{}'.format(wave_itv, wave_period)] = wave3_range / co_wave2_range\n","\n","    return res_df\n","\n","def get_terms_info_v3(cu_bool, co_bool, len_df, len_df_range, prime_terms=False):\n","    cu_idx = get_index_bybool(cu_bool, len_df_range)\n","    co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","    cu_fill_idx = fill_arr(cu_idx)\n","    co_fill_idx = fill_arr(co_idx)\n","\n","    notnan_cu_bool = ~np.isnan(cu_idx)\n","    notnan_co_bool = ~np.isnan(co_idx)\n","\n","    valid_cu_bool = notnan_cu_bool * ~np.isnan(co_fill_idx)\n","    valid_co_bool = notnan_co_bool * ~np.isnan(cu_fill_idx)\n","\n","    if prime_terms:\n","        # ------ 생략된 idx 에 대한 prime_idx 탐색 ------ #\n","        high_bool = cu_fill_idx < co_fill_idx  # 이렇게 해야 high_terms[:, 1] 이 cu_idx 가 나옴\n","        low_bool = co_fill_idx < cu_fill_idx\n","\n","        high_terms_vec = get_index_bybool(high_bool, len_df_range)\n","        low_terms_vec = get_index_bybool(low_bool, len_df_range)  # -> low_terms\n","\n","        high_terms_list = using_clump(high_terms_vec)\n","        low_terms_list = using_clump(low_terms_vec)\n","\n","        valid_cu_prime_idx = np.array([terms.min() for terms in low_terms_list])\n","        valid_co_prime_idx = np.array([terms.min() for terms in high_terms_list])\n","\n","        cu_prime_idx = np.full(len_df, np.nan)\n","        co_prime_idx = np.full(len_df, np.nan)\n","\n","        cu_prime_idx[valid_cu_prime_idx] = valid_cu_prime_idx\n","        co_prime_idx[valid_co_prime_idx] = valid_co_prime_idx\n","\n","        cu_prime_fill_idx = fill_arr(cu_prime_idx)\n","        co_prime_fill_idx = fill_arr(co_prime_idx)\n","\n","        valid_cu_bool *= ~np.isnan(co_prime_fill_idx)\n","        valid_co_bool *= ~np.isnan(cu_prime_fill_idx)\n","\n","    high_post_terms = np.vstack((co_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","    low_post_terms = np.vstack((cu_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)\n","\n","    high_post_terms_cnt = high_post_terms[:, 1] - high_post_terms[:, 0]\n","    low_post_terms_cnt = low_post_terms[:, 1] - low_post_terms[:, 0]\n","\n","    # ------ co, cu idx's terms ------ #\n","    valid_cu_idx = cu_idx[valid_cu_bool]\n","    valid_co_idx = co_idx[valid_co_bool]\n","    valid_shift_cu_idx = pd.Series(valid_cu_idx).shift(1).to_numpy()\n","    valid_shift_co_idx = pd.Series(valid_co_idx).shift(1).to_numpy()\n","\n","    cu_idx_term = valid_cu_idx - valid_shift_cu_idx\n","    co_idx_term = valid_co_idx - valid_shift_co_idx\n","\n","    # ------ get co, cu terms_v2 ------ # # 기본은 아래 logic 으로 수행하고, update_hl 도 해당 term 구간의 hl 이 더 작거나 클경우 적용 가능할 것\n","    if prime_terms:\n","        high_prime_terms = np.vstack((co_prime_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","        low_prime_terms = np.vstack((cu_prime_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)\n","        \n","        high_prime_terms_cnt = high_prime_terms[:, 1] - high_prime_terms[:, 0]\n","        low_prime_terms_cnt = low_prime_terms[:, 1] - low_prime_terms[:, 0]\n","\n","        return high_post_terms, low_post_terms, high_prime_terms_cnt, low_prime_terms_cnt, high_prime_terms, low_prime_terms, cu_idx_term, co_idx_term\n","\n","    return high_post_terms, low_post_terms, high_post_terms_cnt, low_post_terms_cnt, cu_idx_term, co_idx_term\n","  \n","def wave_range_ratio_v2(res_df, config):\n","\n","    wave_itv = pd.infer_freq(res_df.index)\n","    wave_period = config.tr_set.wave_period\n","\n","    roll_high_, roll_low_ = roll_wave_hl_v2(res_df, config, roll_hl_cnt=4)\n","    \n","    wave1_range = roll_high_[:, -2] - roll_low_[:, -2]\n","    cu_wave2_range = roll_high_[:, -2] - roll_low_[:, -1]  # for short, cu\n","    co_wave2_range = roll_high_[:, -1] - roll_low_[:, -2]  # for long, co\n","    wave3_range = roll_high_[:, -1] - roll_low_[:, -1]\n","\n","    res_df['cu_wrr_21_{}{}'.format(wave_itv, wave_period)] = cu_wave2_range / wave1_range\n","    res_df['cu_wrr_32_{}{}'.format(wave_itv, wave_period)] = wave3_range / cu_wave2_range\n","\n","    res_df['co_wrr_21_{}{}'.format(wave_itv, wave_period)] = co_wave2_range / wave1_range\n","    res_df['co_wrr_32_{}{}'.format(wave_itv, wave_period)] = wave3_range / co_wave2_range\n","\n","    return res_df\n","    \n","def roll_wave_hl(t_df, config, roll_hl_cnt=4):\n","  \n","    wave_itv = pd.infer_freq(t_df.index)\n","    wave_period = config.tr_set.wave_period\n","\n","    len_df = len(t_df)\n","\n","    wave_high_fill_ = t_df['wave_high_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    wave_low_fill_ = t_df['wave_low_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    cu_prime_idx = t_df['wave_cu_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    co_prime_idx = t_df['wave_co_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","\n","    valid_cu_prime_idx = cu_prime_idx[~np.isnan(cu_prime_idx)].astype(int)  # -> 필요한 prev_hl 갯수만큼 각 index 기준으로 자르기\n","    valid_co_prime_idx = co_prime_idx[~np.isnan(co_prime_idx)].astype(int)  # -> 필요한 prev_hl 갯수만큼 각 index 기준으로 자르기\n","\n","    cu_roll_hl_idx_arr = np.array(\n","        [valid_cu_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_cu_prime_idx)) if idx_ + 1 >= roll_hl_cnt])\n","    co_roll_hl_idx_arr = np.array(\n","        [valid_co_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_co_prime_idx)) if idx_ + 1 >= roll_hl_cnt])\n","\n","    cu_roll_high_ = pd.DataFrame(np.full((len_df, roll_hl_cnt), np.nan))\n","    cu_roll_low_ = pd.DataFrame(np.full((len_df, roll_hl_cnt), np.nan))\n","    co_roll_high_ = pd.DataFrame(np.full((len_df, roll_hl_cnt), np.nan))\n","    co_roll_low_ = pd.DataFrame(np.full((len_df, roll_hl_cnt), np.nan))\n","\n","    cu_roll_high_.iloc[valid_cu_prime_idx[roll_hl_cnt - 1:], :] = wave_high_fill_[cu_roll_hl_idx_arr]\n","    cu_roll_low_.iloc[valid_cu_prime_idx[roll_hl_cnt - 1:], :] = wave_low_fill_[cu_roll_hl_idx_arr]\n","    co_roll_high_.iloc[valid_co_prime_idx[roll_hl_cnt - 1:], :] = wave_high_fill_[co_roll_hl_idx_arr]\n","    co_roll_low_.iloc[valid_co_prime_idx[roll_hl_cnt - 1:], :] = wave_low_fill_[co_roll_hl_idx_arr]\n","\n","    return cu_roll_high_.ffill().to_numpy(), cu_roll_low_.ffill().to_numpy(), co_roll_high_.ffill().to_numpy(), co_roll_low_.ffill().to_numpy()  # t_df 에 hl_cnt 만큼 col 만들어야해서 numpy 로 뽑음\n","\n","def backing_future_data(res_df, future_cols, itv_list): # itv 자동 조사 가능 ? (future_work)\n","  \n","    for col_, itv_ in zip(future_cols, itv_list):\n","        back_col_ = 'b1_' + col_\n","        res_df[back_col_] = res_df[col_].shift(to_itvnum(itv_))\n","\n","    return res_df\n","\n","\n","\n","def wave_loc_pct_v2(res_df, config, itv, period):\n","\n","    wave_itv = pd.infer_freq(res_df.index)\n","    wave_period = config.tr_set.wave_period\n","\n","    wave_high_fill_ = res_df['wave_high_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    wave_low_fill_ = res_df['wave_low_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","\n","    bb_upper_ = res_df['bb_upper_{}{}'.format(itv, period)].to_numpy()\n","    bb_lower_ = res_df['bb_lower_{}{}'.format(itv, period)].to_numpy()\n","\n","    bb_gap = bb_upper_ - bb_lower_\n","    \n","    cu_prime_idx_fill_ = res_df['wave_cu_prime_idx_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    co_prime_idx_fill_ = res_df['wave_co_prime_idx_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    cu_prime_bb_gap = get_line(cu_prime_idx_fill_, bb_gap)\n","    co_prime_bb_gap = get_line(co_prime_idx_fill_, bb_gap)\n","\n","    res_df['wave_high_loc_pct_{}{}'.format(wave_itv, wave_period)] = (bb_upper_ - wave_high_fill_) / cu_prime_bb_gap\n","    res_df['wave_low_loc_pct_{}{}'.format(wave_itv, wave_period)] = (wave_low_fill_ - bb_lower_) / co_prime_bb_gap\n","\n","    return res_df\n","\n","def wave_loc_pct(res_df, config, itv, period):\n","\n","    wave_itv = pd.infer_freq(res_df.index)\n","    wave_period = config.tr_set.wave_period\n","\n","    wave_high_fill_ = res_df['wave_high_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    wave_low_fill_ = res_df['wave_low_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","\n","    bb_upper_ = res_df['bb_upper_{}{}'.format(itv, period)].to_numpy()\n","    bb_lower_ = res_df['bb_lower_{}{}'.format(itv, period)].to_numpy()\n","\n","    bb_gap = bb_upper_ - bb_lower_\n","\n","    res_df['wave_high_loc_pct_{}{}'.format(wave_itv, wave_period)] = (bb_upper_ - wave_high_fill_) / bb_gap\n","    res_df['wave_low_loc_pct_{}{}'.format(wave_itv, wave_period)] = (wave_low_fill_ - bb_lower_) / bb_gap\n","\n","    return res_df\n","\n","\n","def get_terms_info_v2(cu_bool, co_bool, len_df_range):\n","\n","    cu_idx = get_index_bybool(cu_bool, len_df_range)\n","    co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","    cu_fill_idx = fill_arr(cu_idx)\n","    co_fill_idx = fill_arr(co_idx)\n","\n","    notnan_cu_bool = ~np.isnan(cu_idx)\n","    notnan_co_bool = ~np.isnan(co_idx)\n","  \n","    # ------ get co, cu terms_v2 ------ # # 기본은 아래 logic 으로 수행하고, update_hl 도 해당 term 구간의 hl 이 더 작거나 클경우 적용 가능할 것    \n","    valid_cu_bool = notnan_cu_bool * ~np.isnan(co_fill_idx)  # co 와 pair 가 가능한 cu_idx\n","    valid_co_bool = notnan_co_bool * ~np.isnan(cu_fill_idx)\n","\n","    high_terms = np.vstack((co_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","    low_terms = np.vstack((cu_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)\n","\n","    high_terms_cnt = high_terms[:, 1] - high_terms[:, 0] \n","    low_terms_cnt = low_terms[:, 1] - low_terms[:, 0] \n","\n","    # valid_cu_idx = cu_idx[notnan_cu_bool]\n","    # valid_co_idx = co_idx[notnan_co_bool]\n","    valid_cu_idx = cu_idx[valid_cu_bool]\n","    valid_co_idx = co_idx[valid_co_bool]\n","    valid_shift_cu_idx = pd.Series(valid_cu_idx).shift(1).to_numpy()\n","    valid_shift_co_idx = pd.Series(valid_co_idx).shift(1).to_numpy()\n","\n","    cu_idx_term = valid_cu_idx - valid_shift_cu_idx\n","    co_idx_term = valid_co_idx - valid_shift_co_idx\n","\n","    return high_terms, low_terms, high_terms_cnt, low_terms_cnt, cu_idx_term, co_idx_term\n","\n","def get_terms_info(cu_bool, co_bool, len_df_range):\n","\n","    cu_idx = get_index_bybool(cu_bool, len_df_range)\n","    co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","    cu_fill_idx = fill_arr(cu_idx)\n","    co_fill_idx = fill_arr(co_idx)\n","  \n","    # ------ get co, cu terms_v2 ------ # # 기본은 아래 logic 으로 수행하고, update_hl 도 해당 term 구간의 hl 이 더 작거나 클경우 적용 가능할 것\n","    valid_cu_idx = ~np.isnan(cu_idx) * ~np.isnan(co_fill_idx)\n","    valid_co_idx = ~np.isnan(co_idx) * ~np.isnan(cu_fill_idx)\n","\n","    high_terms = np.vstack((co_fill_idx[valid_cu_idx], cu_idx[valid_cu_idx])).T.astype(int)\n","    low_terms = np.vstack((cu_fill_idx[valid_co_idx], co_idx[valid_co_idx])).T.astype(int)\n","\n","    high_terms_cnt = high_terms[:, 1] - high_terms[:, 0] \n","    low_terms_cnt = low_terms[:, 1] - low_terms[:, 0] \n","\n","    return high_terms, low_terms, high_terms_cnt, low_terms_cnt\n","\n","\n","\n","def wave_range_v13(t_df, config, ltf_df=None, term_thresh=2):  # v2 for period1 only\n","\n","    itv = pd.infer_freq(t_df.index)\n","    period1 = config.tr_set.wave_period\n","    # print(period1)\n","\n","    itv_num = to_itvnum(itv)\n","    # print(itv_num)\n","\n","    t_df = donchian_channel_v4(t_df, period1) \n","\n","    dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].to_numpy()\n","    b1_dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].shift(itv_num).to_numpy()\n","\n","    len_df = len(t_df)   \n","    len_df_range = np.arange(len_df).astype(int)\n","    # short_open_res = np.ones(len_df)\n","    # long_open_res = np.ones(len_df)\n","\n","    data_cols = ['open', 'high', 'low', 'close']\n","    open, high, low, close = [t_df[col_].to_numpy() for col_ in data_cols]\n","    b1_close = t_df.close.shift(itv_num).to_numpy()\n","    \n","    # ============ modules ============ #  \n","    # ------ define co, cu ------ # <- point missing 과 관련해 정교해아함\n","    cu_bool = ((b1_close > b1_dc_base_) & (dc_base_ > close)) | ((b1_close > dc_base_) & (dc_base_ > close))\n","    co_bool = (b1_close < b1_dc_base_) & (dc_base_ < close) | ((b1_close < dc_base_) & (dc_base_ < close))\n","\n","    cu_idx = get_index_bybool(cu_bool, len_df_range)   # for marking\n","    co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","    high_terms, low_terms, high_terms_cnt, low_terms_cnt = get_terms_info(cu_bool, co_bool, len_df_range)\n","\n","    paired_cu_idx = high_terms[:, 1]\n","    paired_co_idx = low_terms[:, 1]\n","\n","    # ------ 생략 이전 terms' hl ------ #\n","    wave_high_terms_low_ = np.full(len_df, np.nan)\n","    wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","    wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_terms])\n","    wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_terms])  \n","\n","    wave_high_terms_low_[paired_cu_idx] = wave_high_terms_lows\n","    wave_low_terms_high_[paired_co_idx] = wave_low_terms_highs\n","\n","    # ------ 생략된 cu, co 에 대한 2nd pairing 진행 ------ #\n","    cu_bool[high_terms[:, 1][high_terms_cnt <= term_thresh]] = False\n","    co_bool[low_terms[:, 1][low_terms_cnt <= term_thresh]] = False  \n","    high_terms, low_terms, high_terms_cnt, low_terms_cnt = get_terms_info(cu_bool, co_bool, len_df_range)\n","    \n","    paired_cu_idx = high_terms[:, 1]\n","    paired_co_idx = low_terms[:, 1]\n","\n","    # ====== get wave_hl & terms ====== #\n","    wave_high_ = np.full(len_df, np.nan)\n","    wave_low_ = np.full(len_df, np.nan)\n","\n","    wave_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_terms])\n","    wave_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_terms])\n","\n","    wave_high_[paired_cu_idx] = wave_highs\n","    wave_low_[paired_co_idx] = wave_lows\n","\n","    wave_high_fill_ = fill_arr(wave_high_)\n","    wave_low_fill_ = fill_arr(wave_low_)\n","\n","    # wave_high_terms_low_ = np.full(len_df, np.nan)\n","    # wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","    # wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_terms])  # for point rejection, Todo, min_max 설정 항상 주의\n","    # wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_terms])\n","\n","    # wave_high_terms_low_[paired_cu_idx] = wave_high_terms_lows\n","    # wave_low_terms_high_[paired_co_idx] = wave_low_terms_highs\n","\n","    wave_high_terms_cnt_ = np.full(len_df, np.nan)\n","    wave_low_terms_cnt_ = np.full(len_df, np.nan)\n","\n","    wave_high_terms_cnt_[paired_cu_idx] = high_terms_cnt\n","    wave_low_terms_cnt_[paired_co_idx] = low_terms_cnt\n","\n","    wave_high_terms_cnt_fill_ = fill_arr(wave_high_terms_cnt_)\n","    wave_low_terms_cnt_fill_ = fill_arr(wave_low_terms_cnt_)\n","    \n","    # ------ hl_fill 의 prime_idx 를 찾아야함 ------ # \n","    b1_wave_high_fill_ = pd.Series(wave_high_fill_).shift(1).to_numpy()\n","    b1_wave_low_fill_ = pd.Series(wave_low_fill_).shift(1).to_numpy()\n","    wave_high_prime_idx = np.where((wave_high_fill_ != b1_wave_high_fill_) & ~np.isnan(wave_high_fill_), len_df_range, np.nan)\n","    wave_low_prime_idx = np.where((wave_low_fill_ != b1_wave_low_fill_) & ~np.isnan(wave_low_fill_), len_df_range, np.nan)\n","\n","    cu_prime_idx = wave_high_prime_idx\n","    cu_prime_idx_fill_ = fill_arr(cu_prime_idx)\n","\n","    co_prime_idx = wave_low_prime_idx\n","    co_prime_idx_fill_ = fill_arr(wave_low_prime_idx)  \n","\n","    # ============ enlist to df_cols ============ #       \n","    t_df['wave_high_fill_{}{}'.format(itv, period1)] = wave_high_fill_\n","    t_df['wave_low_fill_{}{}'.format(itv, period1)] = wave_low_fill_\n","\n","    t_df['wave_high_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_high_terms_cnt_fill_\n","    t_df['wave_low_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_low_terms_cnt_fill_\n","    t_df['wave_cu_{}{}'.format(itv, period1)] = cu_bool * (wave_high_terms_low_ >= wave_low_fill_)   # co ~ cu’s low 가 wave_low 갱신할 경우 point 에서 제외\n","    t_df['wave_co_{}{}'.format(itv, period1)] = co_bool * (wave_low_terms_high_ <= wave_high_fill_)\n","    t_df['wave_cu_bool_{}{}'.format(itv, period1)] = cu_bool   # temporary, for plot_check\n","    t_df['wave_co_bool_{}{}'.format(itv, period1)] = co_bool\n","    t_df['wave_cu_marker_{}{}'.format(itv, period1)] = get_line(cu_idx, dc_base_)\n","    t_df['wave_co_marker_{}{}'.format(itv, period1)] = get_line(co_idx, dc_base_)\n","\n","    # ------ for roll prev_hl ------ # \n","    t_df['wave_cu_prime_idx_{}{}'.format(itv, period1)] = cu_prime_idx\n","    t_df['wave_co_prime_idx_{}{}'.format(itv, period1)] = co_prime_idx\n","    \n","    # ------ for first_high ------ # \n","    t_df['wave_cu_prime_idx_fill_{}{}'.format(itv, period1)] = cu_prime_idx_fill_\n","    t_df['wave_co_prime_idx_fill_{}{}'.format(itv, period1)] = co_prime_idx_fill_\n","      \n","    if itv != 'T':\n","      assert ltf_df is not None, \"assert ltf_df is not None\"\n","      join_cols = np.arange(-15, 0 ,1).astype(int)  # points & donchian_channels\n","      ltf_df.drop(t_df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","      try:\n","        ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, t_df, join_cols), how='inner')\n","      except Exception as e:\n","        print(\"error in wave_range()'s join() :\", e)\n","    else:\n","      ltf_df = t_df    \n","\n","    return ltf_df\n"],"metadata":{"id":"841i4oo2abh-"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##### dump"],"metadata":{"id":"02DcTVB2cYuR"}},{"cell_type":"code","source":["\n","\n","def get_roll_wave_data_v2(valid_prime_idx, roll_idx_arr, len_df, data, roll_prev_hl_cnt):\n","\n","    roll_data = pd.DataFrame(np.full((len_df, roll_prev_hl_cnt), np.nan))\n","    roll_data.iloc[valid_prime_idx[roll_prev_hl_cnt:], :] = data[roll_idx_arr]  # 제한된 idx 를 제외한 row 에 roll_hl 입력\n","\n","    return roll_data.ffill().to_numpy()\n","\n","def roll_wave_hl_v5(t_df, config, roll_prev_hl_cnt=3):\n","  \n","    wave_itv = pd.infer_freq(t_df.index)\n","    wave_period = config.tr_set.wave_period\n","\n","    len_df = len(t_df)\n","\n","    high_prime_idx = t_df['wave_high_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    low_prime_idx = t_df['wave_low_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()    \n","\n","    valid_high_prime_idx = high_prime_idx[~np.isnan(high_prime_idx)].astype(int)  # roll_high 를 위한 prime_idx\n","    valid_low_prime_idx = low_prime_idx[~np.isnan(low_prime_idx)].astype(int)  # roll_low 를 위한 prime_idx\n","\n","    roll_prev_high_idx_arr = np.array([valid_high_prime_idx[idx_ - roll_prev_hl_cnt:idx_] for idx_ in range(len(valid_high_prime_idx)) if idx_ >= roll_prev_hl_cnt])  # cnt 수를 만족시키기 위해 idx 제한\n","    roll_prev_low_idx_arr = np.array([valid_low_prime_idx[idx_ - roll_prev_hl_cnt:idx_] for idx_ in range(len(valid_low_prime_idx)) if idx_ >= roll_prev_hl_cnt])\n","\n","    return valid_high_prime_idx, valid_low_prime_idx, roll_prev_high_idx_arr, roll_prev_low_idx_arr"],"metadata":{"id":"Go7ARIUhfC1g"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["t_df[roll_cols].tail(100)"],"metadata":{"id":"pgA8QqyXZ66o"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data_col = 'wave_high_fill_{}{}'.format(wave_itv1, wave_period1)\n","data = htf_df[data_col].to_numpy()\n","len_htf_df = len(htf_df)\n","\n","\n","roll_data = pd.DataFrame(index=htf_df.index, data=np.full((len_htf_df, roll_hl_cnt), np.nan))\n","roll_data.iloc[valid_high_prime_idx[roll_hl_cnt - 1:], :] = data[roll_prev_high_idx_arr]  # 제한된 idx 를 제외한 row 에 roll_hl 입력\n","\n","# roll_data.ffill()\n","htf_df[roll_cols] = roll_data.ffill()\n","htf_df[roll_cols]\n","\n","# htf_df[roll_cols] = np.nan\n","# htf_df[roll_cols].iloc[valid_high_prime_idx[roll_hl_cnt - 1:]] = data[roll_prev_high_idx_arr]  # 제한된 idx 를 제외한 row 에 roll_hl 입력\n","\n","# htf_df[roll_cols] = htf_df[roll_cols].ffill().to_numpy()\n","\n","# valid_high_prime_idx\n","# np.sum(~np.isnan(roll_high))\n","# htf_df[roll_cols]\n","# roll_prev_low_idx_arr"],"metadata":{"id":"wF7fKJ3mOhaf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# t_df\n","to_lower_tf_v2(res_df, t_df, join_cols)"],"metadata":{"id":"3vHLGont-BFe"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["wave_post_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_post_terms])\n","wave_post_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_post_terms])\n","\n","# print(len(paired_cu_idx))\n","# print(len(wave_post_highs))\n","# print(len(cu_bool))\n","\n","update_paired_cu_bool = (cu_bool * (wave_high_terms_low_ < wave_low_fill_))[paired_cu_idx]\n","update_paired_cu_idx = paired_cu_idx[update_paired_cu_bool]\n","wave_high_[update_paired_cu_idx] = wave_post_highs[update_paired_cu_bool]\n","\n","update_paired_co_bool = (co_bool * (wave_low_terms_high_ > wave_high_fill_))[paired_co_idx]\n","update_paired_co_idx = paired_co_idx[update_paired_co_bool]\n","wave_low_[update_paired_co_idx] = wave_post_lows[update_paired_co_bool]\n","\n","wave_high_fill2_ = fill_arr(wave_high_)\n","wave_low_fill2_ = fill_arr(wave_low_)"],"metadata":{"id":"Mh3w2s-j34Zs"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# wave_post_highs\n","# update_cu_bool = (cu_bool * (wave_high_terms_low_ < wave_low_fill_))[paired_cu_idx]\n","# print(paired_cu_idx[update_cu_bool])\n","# print(paired_cu_idx)\n","print(len(update_paired_cu_idx))\n","print(len(wave_post_highs[update_paired_cu_bool]))\n","# print(high_prime_terms[:, 1])\n","# print(high_post_terms[:, 1])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eQ06-kWq4m6F","executionInfo":{"status":"ok","timestamp":1651799326382,"user_tz":-540,"elapsed":3,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"5c5df956-4fbd-4aa4-e1d6-dc5d0c23ac19"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["11\n","11\n"]}]},{"cell_type":"code","source":["cu_idx = get_index_bybool(cu_bool, len_df_range)\n","co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","cu_fill_idx = fill_arr(cu_idx)\n","co_fill_idx = fill_arr(co_idx)\n","\n","notnan_cu_bool = ~np.isnan(cu_idx)\n","notnan_co_bool = ~np.isnan(co_idx)\n","\n","# ------ 생략된 idx 에 대한 prime_idx 탐색 ------ #\n","high_bool = cu_fill_idx < co_fill_idx  # 이렇게 해야 high_terms[:, 1] 이 cu_idx 가 나옴\n","low_bool = co_fill_idx < cu_fill_idx\n","\n","high_terms_vec = get_index_bybool(high_bool, len_df_range)\n","low_terms_vec = get_index_bybool(low_bool, len_df_range) # -> low_terms\n","\n","high_terms_list = using_clump(high_terms_vec)\n","low_terms_list = using_clump(low_terms_vec)\n","\n","valid_cu_prime_idx = np.array([terms.min() for terms in low_terms_list])\n","valid_co_prime_idx = np.array([terms.min() for terms in high_terms_list])\n","\n","cu_prime_idx = np.full(len_df, np.nan)\n","co_prime_idx = np.full(len_df, np.nan)\n","\n","cu_prime_idx[valid_cu_prime_idx] = valid_cu_prime_idx\n","co_prime_idx[valid_co_prime_idx] = valid_co_prime_idx\n","\n","cu_prime_fill_idx = fill_arr(cu_prime_idx)\n","co_prime_fill_idx = fill_arr(co_prime_idx)\n","\n","# ------ get co, cu terms_v2 ------ # # 기본은 아래 logic 으로 수행하고, update_hl 도 해당 term 구간의 hl 이 더 작거나 클경우 적용 가능할 것\n","valid_cu_bool = notnan_cu_bool * ~np.isnan(co_fill_idx) * ~np.isnan(co_prime_fill_idx)\n","valid_co_bool = notnan_co_bool * ~np.isnan(cu_fill_idx) * ~np.isnan(cu_prime_fill_idx)\n","\n","high_post_terms = np.vstack((co_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","low_post_terms = np.vstack((cu_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)\n","\n","high_terms_cnt = high_post_terms[:, 1] - high_post_terms[:, 0] \n","low_terms_cnt = low_post_terms[:, 1] - low_post_terms[:, 0] \n","\n","high_prime_terms = np.vstack((co_prime_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","low_prime_terms = np.vstack((cu_prime_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)"],"metadata":{"id":"SUFmr9Z_kcCN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# co_prime_idx\n","# co_prime_fill_idx\n","high_prime_terms"],"metadata":{"id":"_3pOQtt2ttfk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#  get_index_bybool(notnan_cu_bool, len_df_range)\n","valid_cu_idx = cu_idx[notnan_cu_bool]\n","valid_shift_cu_idx = pd.Series(valid_cu_idx).shift(1).to_numpy()\n","valid_co_idx = co_idx[notnan_co_bool]\n","valid_shift_co_idx = pd.Series(valid_co_idx).shift(1).to_numpy()\n","\n","valid_cu_idx - valid_shift_cu_idx\n","valid_co_idx - valid_shift_co_idx"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kKaD1fK3WPRP","executionInfo":{"status":"ok","timestamp":1651756811396,"user_tz":-540,"elapsed":6,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"bbe470f3-17d0-4029-97e9-2fb383a0c752"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([nan,  2.,  7.,  2.,  4.,  2.,  7.,  5.,  4.,  6.,  9.,  2.,  5., 11., 14.])"]},"metadata":{},"execution_count":79}]},{"cell_type":"code","source":["def wave_range_v14(t_df, config, ltf_df=None, term_thresh1=1, term_thresh2=3):  # v2 for period1 only\n","\n","  itv = pd.infer_freq(t_df.index)\n","  period1 = config.tr_set.wave_period\n","  # print(period1)\n","\n","  itv_num = to_itvnum(itv)\n","  # print(itv_num)\n","\n","  t_df = donchian_channel_v4(t_df, period1) \n","\n","  dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].to_numpy()\n","  b1_dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].shift(itv_num).to_numpy()\n","\n","  len_df = len(t_df)   \n","  len_df_range = np.arange(len_df).astype(int)\n","  # short_open_res = np.ones(len_df)\n","  # long_open_res = np.ones(len_df)\n","\n","  data_cols = ['open', 'high', 'low', 'close']\n","  open, high, low, close = [t_df[col_].to_numpy() for col_ in data_cols]\n","  b1_close = t_df.close.shift(itv_num).to_numpy()\n","  \n","  # ============ modules ============ #  \n","  # ------ define co, cu ------ # <- point missing 과 관련해 정교해아함\n","  cu_bool = ((b1_close > b1_dc_base_) & (dc_base_ > close)) | ((b1_close > dc_base_) & (dc_base_ > close))\n","  co_bool = (b1_close < b1_dc_base_) & (dc_base_ < close) | ((b1_close < dc_base_) & (dc_base_ < close))\n","\n","  cu_idx = get_index_bybool(cu_bool, len_df_range)   # for marking\n","  co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","  # high_terms, low_terms, high_terms_cnt, low_terms_cnt = get_terms_info(cu_bool, co_bool, len_df_range)\n","  # high_terms, low_terms, high_terms_cnt, low_terms_cnt, cu_idx_term, co_idx_term = get_terms_info_v2(cu_bool, co_bool, len_df_range)\n","  high_terms, low_terms, high_terms_cnt, low_terms_cnt, cu_idx_term, co_idx_term = get_terms_info_v3(cu_bool, co_bool, len_df_range)\n","\n","  paired_cu_idx = high_terms[:, 1]\n","  paired_co_idx = low_terms[:, 1]\n","\n","  # ------ 생략 이전 terms' hl ------ #\n","  wave_high_terms_low_ = np.full(len_df, np.nan)\n","  wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","  wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_terms])\n","  wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_terms])  \n","\n","  wave_high_terms_low_[paired_cu_idx] = wave_high_terms_lows\n","  wave_low_terms_high_[paired_co_idx] = wave_low_terms_highs\n","\n","  # ------ 생략된 cu, co 에 대한 2nd pairing 진행 ------ #\n","  # cu_bool[high_terms[:, 1][high_terms_cnt <= term_thresh]] = False\n","  # co_bool[low_terms[:, 1][low_terms_cnt <= term_thresh]] = False  \n","  cu_bool[high_terms[:, 1][(high_terms_cnt <= term_thresh1) & (cu_idx_term <= term_thresh2)]] = False\n","  co_bool[low_terms[:, 1][(low_terms_cnt <= term_thresh1) & (co_idx_term <= term_thresh2)]] = False  \n","\n","  # high_terms, low_terms, high_terms_cnt, low_terms_cnt = get_terms_info(cu_bool, co_bool, len_df_range)\n","  # high_terms, low_terms, high_terms_cnt, low_terms_cnt, _, _ = get_terms_info_v2(cu_bool, co_bool, len_df_range)\n","  high_post_terms, low_post_terms, high_terms_cnt, low_terms_cnt, high_prime_terms, low_prime_terms, cu_idx_term, co_idx_term = get_terms_info_v3(cu_bool, co_bool, len_df_range)\n","  \n","  paired_cu_idx = high_prime_terms[:, 1]\n","  paired_co_idx = low_prime_terms[:, 1]\n","\n","  # ====== get wave_hl & terms ====== #\n","  wave_high_ = np.full(len_df, np.nan)\n","  wave_low_ = np.full(len_df, np.nan)\n","\n","  wave_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_terms])\n","  wave_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_terms])\n","\n","  wave_high_[paired_cu_idx] = wave_highs\n","  wave_low_[paired_co_idx] = wave_lows\n","\n","  wave_high_fill_ = fill_arr(wave_high_)\n","  wave_low_fill_ = fill_arr(wave_low_)\n","\n","  # wave_high_terms_low_ = np.full(len_df, np.nan)\n","  # wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","  # wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_terms])  # for point rejection, Todo, min_max 설정 항상 주의\n","  # wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_terms])\n","\n","  # wave_high_terms_low_[paired_cu_idx] = wave_high_terms_lows\n","  # wave_low_terms_high_[paired_co_idx] = wave_low_terms_highs\n","\n","  wave_high_terms_cnt_ = np.full(len_df, np.nan)\n","  wave_low_terms_cnt_ = np.full(len_df, np.nan)\n","\n","  wave_high_terms_cnt_[paired_cu_idx] = high_terms_cnt\n","  wave_low_terms_cnt_[paired_co_idx] = low_terms_cnt\n","\n","  wave_high_terms_cnt_fill_ = fill_arr(wave_high_terms_cnt_)\n","  wave_low_terms_cnt_fill_ = fill_arr(wave_low_terms_cnt_)\n","  \n","  # ------ hl_fill 의 prime_idx 를 찾아야함 ------ # \n","  b1_wave_high_fill_ = pd.Series(wave_high_fill_).shift(1).to_numpy()\n","  b1_wave_low_fill_ = pd.Series(wave_low_fill_).shift(1).to_numpy()\n","  wave_high_prime_idx = np.where((wave_high_fill_ != b1_wave_high_fill_) & ~np.isnan(wave_high_fill_), len_df_range, np.nan)\n","  wave_low_prime_idx = np.where((wave_low_fill_ != b1_wave_low_fill_) & ~np.isnan(wave_low_fill_), len_df_range, np.nan)\n","\n","  cu_prime_idx = wave_high_prime_idx\n","  cu_prime_idx_fill_ = fill_arr(cu_prime_idx)\n","\n","  co_prime_idx = wave_low_prime_idx\n","  co_prime_idx_fill_ = fill_arr(wave_low_prime_idx)  \n","\n","  # ============ enlist to df_cols ============ #       \n","  t_df['wave_high_fill_{}{}'.format(itv, period1)] = wave_high_fill_\n","  t_df['wave_low_fill_{}{}'.format(itv, period1)] = wave_low_fill_\n","\n","  t_df['wave_high_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_high_terms_cnt_fill_\n","  t_df['wave_low_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_low_terms_cnt_fill_\n","  t_df['wave_cu_{}{}'.format(itv, period1)] = cu_bool * (wave_high_terms_low_ >= wave_low_fill_)   # co ~ cu’s low 가 wave_low 갱신할 경우 point 에서 제외\n","  t_df['wave_co_{}{}'.format(itv, period1)] = co_bool * (wave_low_terms_high_ <= wave_high_fill_)\n","  t_df['wave_cu_bool_{}{}'.format(itv, period1)] = cu_bool   # temporary, for plot_check\n","  t_df['wave_co_bool_{}{}'.format(itv, period1)] = co_bool\n","  t_df['wave_cu_marker_{}{}'.format(itv, period1)] = get_line(cu_idx, dc_base_)\n","  t_df['wave_co_marker_{}{}'.format(itv, period1)] = get_line(co_idx, dc_base_)\n","\n","  # ------ for roll prev_hl ------ # \n","  t_df['wave_cu_prime_idx_{}{}'.format(itv, period1)] = cu_prime_idx\n","  t_df['wave_co_prime_idx_{}{}'.format(itv, period1)] = co_prime_idx\n","  \n","  # ------ for first_high ------ # \n","  t_df['wave_cu_prime_idx_fill_{}{}'.format(itv, period1)] = cu_prime_idx_fill_\n","  t_df['wave_co_prime_idx_fill_{}{}'.format(itv, period1)] = co_prime_idx_fill_\n","    \n","  if itv != 'T':\n","    assert ltf_df is not None, \"assert ltf_df is not None\"\n","    join_cols = np.arange(-15, 0 ,1).astype(int)  # points & donchian_channels\n","    ltf_df.drop(t_df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","    try:\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, t_df, join_cols), how='inner')\n","    except Exception as e:\n","      print(\"error in wave_range()'s join() :\", e)\n","  else:\n","    ltf_df = t_df    \n","\n","  return ltf_df\n","  \n","def wave_range_v13(t_df, config, ltf_df=None, term_thresh=2):  # v2 for period1 only\n","\n","  itv = pd.infer_freq(t_df.index)\n","  period1 = config.tr_set.wave_period\n","  # print(period1)\n","\n","  itv_num = to_itvnum(itv)\n","  # print(itv_num)\n","\n","  t_df = donchian_channel_v4(t_df, period1) \n","\n","  dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].to_numpy()\n","  b1_dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].shift(itv_num).to_numpy()\n","\n","  len_df = len(t_df)   \n","  len_df_range = np.arange(len_df).astype(int)\n","  # short_open_res = np.ones(len_df)\n","  # long_open_res = np.ones(len_df)\n","\n","  data_cols = ['open', 'high', 'low', 'close']\n","  open, high, low, close = [t_df[col_].to_numpy() for col_ in data_cols]\n","  b1_close = t_df.close.shift(itv_num).to_numpy()\n","  \n","  # ============ modules ============ #  \n","  # ------ define co, cu ------ # <- point missing 과 관련해 정교해아함\n","  cu_bool = ((b1_close > b1_dc_base_) & (dc_base_ > close)) | ((b1_close > dc_base_) & (dc_base_ > close))\n","  co_bool = (b1_close < b1_dc_base_) & (dc_base_ < close) | ((b1_close < dc_base_) & (dc_base_ < close))\n","\n","  cu_idx = get_index_bybool(cu_bool, len_df_range)   # for marking\n","  co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","  high_terms, low_terms, high_terms_cnt, low_terms_cnt = get_terms_info(cu_bool, co_bool, len_df_range)\n","\n","  wave_high_terms_low_ = np.full(len_df, np.nan)\n","  wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","  wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_terms])  # 생략 이전 terms' hl\n","  wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_terms])  \n","\n","  paired_cu_idx = high_terms[:, 1]\n","  paired_co_idx = low_terms[:, 1]\n","\n","  wave_high_terms_low_[paired_cu_idx] = wave_high_terms_lows\n","  wave_low_terms_high_[paired_co_idx] = wave_low_terms_highs\n","\n","  # ------ add update_hl ------ #\n","  wave_high_ = np.full(len_df, np.nan)\n","  wave_low_ = np.full(len_df, np.nan)\n","\n","  wave_low_[paired_cu_idx] = wave_high_terms_lows  \n","  wave_high_[paired_co_idx] = wave_low_terms_highs\n","\n","  # ------ 생략된 cu, co 에 대한 2nd pairing 진행 ------ #\n","  cu_bool[high_terms[:, 1][high_terms_cnt <= term_thresh]] = False\n","  co_bool[low_terms[:, 1][low_terms_cnt <= term_thresh]] = False  \n","  high_terms, low_terms, high_terms_cnt, low_terms_cnt = get_terms_info(cu_bool, co_bool, len_df_range)\n","  \n","  paired_cu_idx = high_terms[:, 1]\n","  paired_co_idx = low_terms[:, 1]\n","\n","  # ====== get wave_hl & terms ====== #\n","  wave_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_terms])\n","  wave_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_terms])\n","\n","  wave_high_[paired_cu_idx] = wave_highs\n","  wave_low_[paired_co_idx] = wave_lows\n","\n","  wave_high_fill_ = fill_arr(wave_high_)\n","  wave_low_fill_ = fill_arr(wave_low_)\n","\n","  # wave_high_terms_low_ = np.full(len_df, np.nan)\n","  # wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","  # wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_terms])  # for point rejection, Todo, min_max 설정 항상 주의\n","  # wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_terms])\n","\n","  # wave_high_terms_low_[paired_cu_idx] = wave_high_terms_lows\n","  # wave_low_terms_high_[paired_co_idx] = wave_low_terms_highs\n","\n","  wave_high_terms_cnt_ = np.full(len_df, np.nan)\n","  wave_low_terms_cnt_ = np.full(len_df, np.nan)\n","\n","  wave_high_terms_cnt_[paired_cu_idx] = high_terms_cnt\n","  wave_low_terms_cnt_[paired_co_idx] = low_terms_cnt\n","\n","  wave_high_terms_cnt_fill_ = fill_arr(wave_high_terms_cnt_)\n","  wave_low_terms_cnt_fill_ = fill_arr(wave_low_terms_cnt_)\n","  \n","  # ------ hl_fill 의 prime_idx 를 찾아야함 ------ # \n","  b1_wave_high_fill_ = pd.Series(wave_high_fill_).shift(1).to_numpy()\n","  b1_wave_low_fill_ = pd.Series(wave_low_fill_).shift(1).to_numpy()\n","  wave_high_prime_idx = np.where((wave_high_fill_ != b1_wave_high_fill_) & ~np.isnan(wave_high_fill_), len_df_range, np.nan)\n","  wave_low_prime_idx = np.where((wave_low_fill_ != b1_wave_low_fill_) & ~np.isnan(wave_low_fill_), len_df_range, np.nan)\n","\n","  cu_prime_idx = wave_high_prime_idx\n","  cu_prime_idx_fill_ = fill_arr(cu_prime_idx)\n","\n","  co_prime_idx = wave_low_prime_idx\n","  co_prime_idx_fill_ = fill_arr(wave_low_prime_idx)  \n","\n","  # ============ enlist to df_cols ============ #       \n","  t_df['wave_high_fill_{}{}'.format(itv, period1)] = wave_high_fill_\n","  t_df['wave_low_fill_{}{}'.format(itv, period1)] = wave_low_fill_\n","\n","  t_df['wave_high_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_high_terms_cnt_fill_\n","  t_df['wave_low_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_low_terms_cnt_fill_\n","  t_df['wave_cu_{}{}'.format(itv, period1)] = cu_bool * (wave_high_terms_low_ >= wave_low_fill_)   # co ~ cu’s low 가 wave_low 갱신할 경우 point 에서 제외\n","  t_df['wave_co_{}{}'.format(itv, period1)] = co_bool * (wave_low_terms_high_ <= wave_high_fill_)\n","  t_df['wave_cu_bool_{}{}'.format(itv, period1)] = cu_bool   # temporary, for plot_check\n","  t_df['wave_co_bool_{}{}'.format(itv, period1)] = co_bool\n","  t_df['wave_cu_marker_{}{}'.format(itv, period1)] = get_line(cu_idx, dc_base_)\n","  t_df['wave_co_marker_{}{}'.format(itv, period1)] = get_line(co_idx, dc_base_)\n","\n","  # ------ for roll prev_hl ------ # \n","  t_df['wave_cu_prime_idx_{}{}'.format(itv, period1)] = cu_prime_idx\n","  t_df['wave_co_prime_idx_{}{}'.format(itv, period1)] = co_prime_idx\n","  \n","  # ------ for first_high ------ # \n","  t_df['wave_cu_prime_idx_fill_{}{}'.format(itv, period1)] = cu_prime_idx_fill_\n","  t_df['wave_co_prime_idx_fill_{}{}'.format(itv, period1)] = co_prime_idx_fill_\n","    \n","  if itv != 'T':\n","    assert ltf_df is not None, \"assert ltf_df is not None\"\n","    join_cols = np.arange(-15, 0 ,1).astype(int)  # points & donchian_channels\n","    ltf_df.drop(t_df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","    try:\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, t_df, join_cols), how='inner')\n","    except Exception as e:\n","      print(\"error in wave_range()'s join() :\", e)\n","  else:\n","    ltf_df = t_df    \n","\n","  return ltf_df\n","\n","\n","def wave_range_v12(t_df, config, ltf_df=None):  # v2 for period1 only\n","\n","  itv = pd.infer_freq(t_df.index)\n","  period1 = config.tr_set.wave_period\n","  # print(period1)\n","\n","  itv_num = to_itvnum(itv)\n","  # print(itv_num)\n","\n","  t_df = donchian_channel_v4(t_df, period1) \n","\n","  dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].to_numpy()\n","  b1_dc_base_ = t_df['dc_base_{}{}'.format(itv, period1)].shift(itv_num).to_numpy()\n","\n","  len_df = len(t_df)   \n","  len_df_range = np.arange(len_df).astype(int)\n","  # short_open_res = np.ones(len_df)\n","  # long_open_res = np.ones(len_df)\n","\n","  data_cols = ['open', 'high', 'low', 'close']\n","  open, high, low, close = [t_df[col_].to_numpy() for col_ in data_cols]\n","  b1_close = t_df.close.shift(itv_num).to_numpy()\n","  \n","  # ============ modules ============ #  \n","  # ------ define co, cu ------ # <- point missing 과 관련해 정교해아함\n","  cu_bool = ((b1_close > b1_dc_base_) & (dc_base_ > close)) | ((b1_close > dc_base_) & (dc_base_ > close))\n","  co_bool = (b1_close < b1_dc_base_) & (dc_base_ < close) | ((b1_close < dc_base_) & (dc_base_ < close))\n","\n","  # Todo, term 조정은 이 line 에서 해야할 것\n","  b1_cu_bool = pd.Series(cu_bool).shift(1).to_numpy()\n","  b1_co_bool = pd.Series(co_bool).shift(1).to_numpy()\n","\n","  cu_bool *= ~b1_co_bool.astype(bool)  # short_term point 생략\n","  co_bool *= ~b1_cu_bool.astype(bool)\n","\n","  cu_idx = get_index_bybool(cu_bool, len_df_range)\n","  co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","  cu_fill_idx = fill_arr(cu_idx)\n","  co_fill_idx = fill_arr(co_idx)\n","\n","  # ------ get co, cu terms ------ #\n","  high_bool = cu_fill_idx < co_fill_idx  # 이렇게 해야 high_terms[:, 1] 이 cu_idx 가 나옴\n","  low_bool = co_fill_idx < cu_fill_idx\n","\n","  high_terms_vec = get_index_bybool(high_bool, len_df_range)\n","  low_terms_vec = get_index_bybool(low_bool, len_df_range) # -> low_terms\n","\n","  high_terms_list = using_clump(high_terms_vec)\n","  low_terms_list = using_clump(low_terms_vec)\n","\n","  high_terms = np.array([[terms.min(), terms.max() + 1] for terms in high_terms_list])\n","  low_terms = np.array([[terms.min(), terms.max() + 1] for terms in low_terms_list])\n","\n","  high_terms_cnt = high_terms[:, 1] - high_terms[:, 0] \n","  low_terms_cnt = low_terms[:, 1] - low_terms[:, 0] \n","\n","  wave_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_terms])\n","  wave_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_terms])\n","\n","  # ------ get valid_idx range (inner len_df) ------ #\n","  paired_cu_idx = high_terms[:, 1]\n","  paired_co_idx = low_terms[:, 1]\n","\n","  valid_cu_bool = paired_cu_idx < len_df\n","  valid_co_bool = paired_co_idx < len_df\n","\n","  paired_cu_valid_idx = paired_cu_idx[valid_cu_bool]\n","  paired_co_valid_idx = paired_co_idx[valid_co_bool]\n","\n","  # ------ get wave_hl & terms ------ #\n","  wave_high_ = np.full(len_df, np.nan)\n","  wave_low_ = np.full(len_df, np.nan)\n","\n","  wave_high_[paired_cu_valid_idx] = wave_highs[valid_cu_bool]\n","  wave_low_[paired_co_valid_idx] = wave_lows[valid_co_bool]\n","\n","  wave_high_fill_ = fill_arr(wave_high_)\n","  wave_low_fill_ = fill_arr(wave_low_)\n","\n","  wave_high_terms_cnt_ = np.full(len_df, np.nan)\n","  wave_low_terms_cnt_ = np.full(len_df, np.nan)\n","\n","  wave_high_terms_cnt_[paired_cu_valid_idx] = high_terms_cnt[valid_cu_bool]\n","  wave_low_terms_cnt_[paired_co_valid_idx] = low_terms_cnt[valid_co_bool]\n","\n","  wave_high_terms_cnt_fill_ = fill_arr(wave_high_terms_cnt_)\n","  wave_low_terms_cnt_fill_ = fill_arr(wave_low_terms_cnt_)\n","\n","  # ------ check update high & low (occurs by point missing) ------ # \n","  co_prime_idx = np.full(len_df, np.nan)\n","  co_prime_idx[paired_co_valid_idx] = paired_co_valid_idx\n","  co_prime_idx_fill_ = fill_arr(co_prime_idx)\n","  # valid_idx = co_idx > co_prime_idx_fill_\n","  valid_idx = cu_idx > co_prime_idx_fill_\n","\n","  # update_low[valid_idx] = [low[iin:iout + 1].min() for iin, iout in zip(cu_prime_idx_fill_[valid_idx].astype(int), cu_idx[valid_idx].astype(int))]  # include open low\n","  # 1. 잘 생각해보면, cu_idx 에는 co_prime_idx_fill_ 을 사용하는게 맞음\n","  #   a. cu_idx 에 달려있는 low 가 co_prime_idx_fill_ 기준이니까\n","  # update_low = np.full(len_df, np.nan)\n","  # update_low[valid_idx] = [low[iin:iout + 1].min() for iin, iout in zip(co_prime_idx_fill_[valid_idx].astype(int), cu_idx[valid_idx].astype(int))]   # high 아닌가\n","  \n","  update_high = np.full(len_df, np.nan)\n","  update_high[valid_idx] = [high[iin:iout + 1].max() for iin, iout in zip(co_prime_idx_fill_[valid_idx].astype(int), cu_idx[valid_idx].astype(int))]   # high 아닌가 => 아님 update_low 이기 때문\n","  \n","  cu_prime_idx = np.full(len_df, np.nan)\n","  cu_prime_idx[paired_cu_valid_idx] = paired_cu_valid_idx\n","  cu_prime_idx_fill_ = fill_arr(cu_prime_idx)\n","  valid_idx = co_idx > cu_prime_idx_fill_\n","\n","  # update_high = np.full(len_df, np.nan)\n","  # update_high[valid_idx] = [high[iin:iout + 1].max() for iin, iout in zip(cu_prime_idx_fill_[valid_idx].astype(int), co_idx[valid_idx].astype(int))]\n","\n","  update_low = np.full(len_df, np.nan)\n","  update_low[valid_idx] = [low[iin:iout + 1].min() for iin, iout in zip(cu_prime_idx_fill_[valid_idx].astype(int), co_idx[valid_idx].astype(int))]\n","\n","  # ============ enlist to df_cols ============ #       \n","  t_df['wave_high_fill_{}{}'.format(itv, period1)] = wave_high_fill_\n","  t_df['wave_low_fill_{}{}'.format(itv, period1)] = wave_low_fill_\n","\n","  t_df['wave_update_high_fill_{}{}'.format(itv, period1)] = update_high\n","  t_df['wave_update_low_fill_{}{}'.format(itv, period1)] = update_low\n","\n","  t_df['wave_high_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_high_terms_cnt_fill_\n","  t_df['wave_low_terms_cnt_fill_{}{}'.format(itv, period1)] = wave_low_terms_cnt_fill_\n","  t_df['wave_cu_{}{}'.format(itv, period1)] = cu_bool * ~(update_low < wave_low_fill_)   # Todo, 이곳 다시 한번 확인 (old, point_missing 으로 인한 low 갱신 회피)\n","  t_df['wave_co_{}{}'.format(itv, period1)] = co_bool * ~(update_high > wave_high_fill_)\n","  t_df['wave_cu_marker_{}{}'.format(itv, period1)] = get_line(cu_idx, dc_base_)\n","  t_df['wave_co_marker_{}{}'.format(itv, period1)] = get_line(co_idx, dc_base_)\n","\n","  # ------ for roll prev_hl ------ # \n","  t_df['wave_cu_prime_idx_{}{}'.format(itv, period1)] = cu_prime_idx\n","  t_df['wave_co_prime_idx_{}{}'.format(itv, period1)] = co_prime_idx\n","  \n","  # ------ for first_high ------ # \n","  t_df['wave_cu_prime_idx_fill_{}{}'.format(itv, period1)] = cu_prime_idx_fill_\n","  t_df['wave_co_prime_idx_fill_{}{}'.format(itv, period1)] = co_prime_idx_fill_\n","    \n","  if itv != 'T':\n","    assert ltf_df is not None, \"assert ltf_df is not None\"\n","    join_cols = np.arange(-17, 0 ,1).astype(int)  # points & donchian_channels\n","    ltf_df.drop(t_df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","    try:\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, t_df, join_cols), how='inner')\n","    except Exception as e:\n","      print(\"error in wave_range()'s join() :\", e)\n","  else:\n","    ltf_df = t_df    \n","\n","  return ltf_df\n","\n","\n"],"metadata":{"id":"YoZpr7lDn7z-"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"1MNVIExLULhJ"},"source":["#### legacy"]},{"cell_type":"code","source":[""],"metadata":{"id":"1eZov-szzNuB"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"EOXQbXixiQcK"},"source":["##### volume_profile"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7pFuazxpgx9B"},"outputs":[],"source":["session_df = res_df_.iloc[-1440:] # 0.159 -> 0.024 (14400 -> 1440)\n","volume = session_df['volume'].to_numpy()\n","close = session_df['close'].to_numpy()\n","# px.histogram(session_df, x='volume', y='close', nbins=150, orientation='h').show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SoPJkiyKiXLM"},"outputs":[],"source":["kde_factor = 0.05\n","num_samples = 100\n","\n","start_0 = time.time()\n","kde = stats.gaussian_kde(close,weights=volume,bw_method=kde_factor)\n","kdx = np.linspace(close.min(),close.max(),num_samples)\n","kdy = kde(kdx)\n","ticks_per_sample = (kdx.max() - kdx.min()) / num_samples\n","print(\"ticks_per_sample :\", ticks_per_sample)  # sample 당 가격\n","print(\"kdy elapsed_time :\", time.time() - start_0)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mK2jBddAxJ14"},"outputs":[],"source":["peaks,_ = signal.find_peaks(kdy)\n","pkx = kdx[peaks]\n","pky = kdy[peaks]\n","\n","plt.figure(figsize=(10,5))\n","# plt.hist(close, bins=num_samples, weights=volume, alpha=.8, color='#1592e6')\n","# plt.plot(kdx, kdy, color='white')\n","# plt.plot(pkx, pky, 'bo', color='yellow')\n","plt.plot(kdy, kdx, color='white')\n","plt.plot(pky, pkx, 'bo', color='yellow')\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"a8tpQZCy0SO1"},"outputs":[],"source":["pkx"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gfA946s8UgS0"},"outputs":[],"source":["# ------ vp 의 indi. 화가 필요함 -> point 설정 ------ #\n","# 1. 4 level 은 미리 만들어놓는게 맞는걸로 보임 -> 추종하는 function 이 많음 (utils_tr, ep_out ...)\n","#   a. 4 level 에 국한하는게 아니라, 모든 peaks 에 대해 levels 설정\n","#   b. 각 session 별로 peak_list 가 주어질 것\n","#     i. prev_data 사용해야하는점 주의 (session vp 는 future_data)"]},{"cell_type":"markdown","metadata":{"id":"3T-9FwWFXR4f"},"source":["###### prominence_info"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RmBt2agljClE"},"outputs":[],"source":["start_0 = time.time()\n","min_prom = kdy.max() * 0.0\n","pipsize = 0.01\n","max_width_pips = 20\n","# width_range=(1, max_width_pips * pipsize / ticks_per_sample)\n","width_range= max_width_pips * pipsize / ticks_per_sample\n","peaks, peak_props = signal.find_peaks(kdy, prominence=min_prom, width=width_range)\n","\n","peak_x = kdx[peaks]\n","peak_y = kdy[peaks]\n","# ------ prominence lines ------ #\n","left_base = peak_props['left_bases']\n","right_base = peak_props['right_bases']\n","line_x = peak_x\n","line_y0 = peak_y\n","line_y1 = peak_y # - peak_props['prominences']\n","print(\"prom_line elapsed_time :\", time.time() - start_0)\n","\n","\n","for x, y0, y1 in zip(line_x, line_y0, line_y1):\n","    fig.add_shape(type='line',\n","        xref='x', yref='y',\n","        # x0=x, y0=y0, x1=x, y1=y1,\n","        x0=x, y0=0, x1=x, y1=y1,\n","        line=dict(\n","            color='red',\n","            width=2,\n","        )\n","    )\n","\n","# ------ width ------ #\n","left_ips = peak_props['left_ips']\n","right_ips = peak_props['right_ips']\n","# width_x0 = kdx.min() + (left_ips * ticks_per_sample)\n","# width_x1 = kdx.min() + (right_ips * ticks_per_sample)\n","width_x0 = kdx.min() + (left_base * ticks_per_sample)\n","width_x1 = kdx.min() + (right_base * ticks_per_sample)\n","\n","# int_from = kdx.min() + (left_base * ticks_per_sample)\n","# int_to = kdx.min() + (right_base * ticks_per_sample)\n","# [kde.integrate_box_1d(x0, x1) for x0, x1 in zip(int_from, int_to)]\n","\n","width_y = peak_props['width_heights']\n","\n","for x0, x1, y in zip(width_x0, width_x1, width_y):\n","    fig.add_shape(type='line',\n","        xref='x', yref='y',\n","        x0=x0, y0=y, x1=x1, y1=y,\n","        line=dict(\n","            color='red',\n","            width=2,\n","        )\n","    )\n","fig.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zqj944n-WzyZ"},"outputs":[],"source":["# peaks  # ndarray\n","# kdx  # ndarray\n","# kdy  # ndarray\n","# kdx.min()\n","left_base * ticks_per_sample\n","# volume"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Rvqv0RGojo9h"},"outputs":[],"source":["print(peak_y)\n","print(peak_props['prominences'])\n","peak_props"]},{"cell_type":"markdown","metadata":{"id":"c2729DJ6h720"},"source":["##### imb."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Rucj-iepiR_-"},"outputs":[],"source":["t_df = res_df_.iloc[-120:-100]\n","a_data = t_df.to_numpy()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ktm1aB-Bh7GH"},"outputs":[],"source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(15, 9))\n","nrows, ncols = 1, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        # height_ratios=[3, 1]\n","                        )\n","\n","ax = fig.add_subplot(gs[0])\n","\n","# ------ candles ------ #\n","candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","_ = [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jMQBhQ1Ljt5Y"},"outputs":[],"source":["def imb_ratio_v4(df, itv):\n","\n","  itv_num = to_itvnum(itv)\n","\n","  close = df['close_{}'.format(itv)].to_numpy()\n","  open = df['open_{}'.format(itv)].to_numpy()\n","\n","  b1_close = df['close_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_open = df['open_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_high = df['high_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_low = df['low_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","  body_range = abs(close - open)\n","  b1_body_range = abs(b1_close - b1_open)\n","\n","  df['body_rel_ratio_{}'.format(itv)] = body_range / b1_body_range\n","\n","  short_body_range = np.where(close <= b1_low, body_range, b1_body_range)\n","  long_body_range = np.where(close >= b1_high, body_range, b1_body_range)\n","\n","  # 추후에 통계 측정해야함 -> bir 에 따른 개별 trader 의 epout / tpep 이라던가 => short 에 양봉은 취급안함 (why use np.nan)\n","  df['short_ir_{}'.format(itv)] = np.where(close < open, (b1_low - close) / short_body_range, np.nan) # close < open & close < b1_low\n","  df['long_ir_{}'.format(itv)] = np.where(close > open, (close - b1_high) / long_body_range, np.nan) # close > open & close > b1_high\n","\n","  return"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"I1Vq_BiKpY3P"},"outputs":[],"source":["def imb_ratio_v3(df, itv):\n","\n","  itv_num = to_itvnum(itv)\n","\n","  # high = df['high_{}'.format(itv)].to_numpy()\n","  # low = df['low_{}'.format(itv)].to_numpy()\n","  # candle_range = high - low\n","\n","  close = df['close_{}'.format(itv)].to_numpy()\n","  open = df['open_{}'.format(itv)].to_numpy()\n","\n","  b1_close = df['close_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_open = df['open_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_high = df['high_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_low = df['low_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","  body_range = abs(close - open)\n","  b1_body_range = abs(b1_close - b1_open)\n","\n","  df['body_rel_ratio_{}'.format(itv)] = body_range / b1_body_range\n","\n","  short_body_ratio = np.where(close <= b1_low, body_range, b1_body_range)\n","  long_body_range = np.where(close >= b1_high, body_range, b1_body_range)\n","\n","  # 추후에 통계 측정해야함 -> bir 에 따른 개별 trader 의 epout / tpep 이라던가 => short 에 양봉은 취급안함 (why use np.nan)\n","  df['short_ir_{}'.format(itv)] = np.where(close < open, (b1_low - close) / body_range, np.nan) # close < open & close < b1_low\n","  df['long_ir_{}'.format(itv)] = np.where(close > open, (close - b1_high) / body_range, np.nan) # close > open & close > b1_high\n","\n","  return"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mtnMUkhwkdrE"},"outputs":[],"source":["imb_ratio(t_df, \"5T\")\n","# imb_ratio_v3(t_df, \"5T\")\n","# imb_ratio_v4(t_df, \"5T\")\n","\n","t_df.tail(100).short_ir_5T  # .461871\n","# t_df.iloc[:, -10:]\n","# t_df.dtypes"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RVUs1YE_pgBI"},"outputs":[],"source":["# imb_ratio(t_df, \"5T\")\n","# imb_ratio_v3(t_df, \"5T\")\n","imb_ratio_v4(t_df, \"5T\")\n","\n","t_df.tail(100).short_ir_5T  # .461871\n","# t_df.iloc[:, -10:]\n","# t_df.dtypes"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"bieHiKjBkuFL"},"outputs":[],"source":["# ------ rtc 1, 0 개념 ------ #\n","# short_rtc_1 = close\n","# short_rtc_0 = b1_low\n","\n","# long_rtc_1 = close\n","# long_rtc_0 = b1_high\n","\n","# rtc 로 활용하려면, col 로 추가해야할 것 -> 추가할만한 col_name 은 아님\n","# 1. h_candle 인 경우 -> ?\n","#   a. h_candle_v3 먹이고, open_{}.shift(num_itv).to_numpy() 진행 -> ex. res_df['close_{}'.format(hc_itv)].shift(itv_num).to_numpy() "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3X6bMXJIjPYy"},"outputs":[],"source":["# 1. 현재 종가 - 이전 고가 = imb_range (long)\n","long_imb_range = t_df.close - t_df.high.shift(1)\n","# 2. 이전 저가 - 현재 종가 - imb_range (short)\n","short_imb_range = t_df.low.shift(1) - t_df.close"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"q1nEA19v7Qpj"},"outputs":[],"source":["from math import floor\n","\n","\n","def _calc_dev(base_price, price):\n","    return 100 * (price - base_price) / base_price\n","\n","\n","def zigzag(highs, lows, depth=10, dev_threshold=5):\n","    def pivots(src_raw, length, isHigh):\n","        src = list(reversed(src_raw))\n","        bar_index = list(range(len(src)))\n","        for start in range(0, len(src)):\n","            if start + 2 * length + 1 > len(src) - 1:\n","                return\n","            p = 0\n","            if length < len(src) - start:\n","                p = src[start + length]\n","            if length == 0:\n","                yield 0, p\n","            else:\n","                isFound = True\n","                for i in range(start, start + length):\n","                    if isHigh and src[i] > p:\n","                        isFound = False\n","                    if not isHigh and src[i] < p:\n","                        isFound = False\n","                for i in range(start + length + 1, start + 2 * length + 1):\n","                    if isHigh and src[i] >= p:\n","                        isFound = False\n","                    c = not isHigh and src[i] <= p\n","                    if c:\n","                        isFound = False\n","                if isFound:\n","                    yield (bar_index[start + length], p)\n","                else:\n","                    yield None, None\n","\n","    data_highs = [x for x in pivots(highs, floor(depth / 2), True) if x[0]]\n","    data_lows = [x for x in pivots(lows, floor(depth / 2), False) if x[0]]\n","\n","    raw_pairs = []\n","\n","    for i, (ind, p) in enumerate(data_highs):\n","        lows_d = sorted([(ind_l, p_l) for ind_l, p_l in data_lows if ind > ind_l], key=lambda x: x[0])\n","        if lows_d:\n","            lows = lows_d[-1]\n","\n","            if abs(_calc_dev(lows[1], p)) >= dev_threshold:\n","                raw_pairs.append(\n","                    ((ind, p),\n","                     (lows[0], lows[1]))\n","                )\n","\n","    result = []\n","\n","    for (i_h, p_h),(i_l, p_l) in raw_pairs:\n","        if not result:\n","            result.append(((i_h, p_h),(i_l, p_l)))\n","            continue\n","\n","        if i_l == result[-1][1][0]:\n","            if p_h > result[-1][0][1]:\n","                result = result[:-1]\n","            else:\n","                continue\n","\n","        result.append(((i_h, p_h),(i_l, p_l)))\n","\n","    return result\n","\n","# highs, lows = t_df.high.to_numpy(), t_df.low.to_numpy()\n","# zigzag(highs, lows, depth=5, dev_threshold=5)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fGlmdyb97j4Q"},"outputs":[],"source":["t_df = res_df_.iloc[-120:]\n","a_data = t_df.to_numpy()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ropzIp0wUPAA"},"outputs":[],"source":["# import plotly.express as px\n","# import plotly.graph_objects as go\n","\n","def get_dist_plot(c, v, kx, ky):\n","    fig = go.Figure()\n","    fig.add_trace(go.Histogram(name='Vol Profile', x=c, y=v, nbinsx=150, \n","                               histfunc='sum', histnorm='probability density',\n","                               marker_color='#B0C4DE'))\n","    fig.add_trace(go.Scatter(name='KDE', x=kx, y=ky, mode='lines', marker_color='#D2691E'))    \n","\n","    peaks,_ = signal.find_peaks(kdy)\n","    pkx = kdx[peaks]\n","    pky = kdy[peaks]\n","    pk_marker_args=dict(size=10, color='black')\n","    fig.add_trace(go.Scatter(name=\"Peaks\", x=pkx, y=pky, mode='markers', marker=pk_marker_args))\n","    fig.show()\n","\n","    return fig"]},{"cell_type":"markdown","source":["##### instant."],"metadata":{"id":"RZJ6uIA_VcJs"}},{"cell_type":"code","source":["def wave_range_ratio(res_df, config, bb_itv, bb_period):\n","\n","  wave_itv = pd.infer_freq(res_df.index)\n","  wave_period = config.tr_set.wave_period\n","\n","  bb_upper_ = res_df['bb_upper_{}{}'.format(bb_itv, bb_period)].to_numpy()\n","  bb_lower_ = res_df['bb_lower_{}{}'.format(bb_itv, bb_period)].to_numpy()\n","  \n","  cu_prime_idx_fill_ = res_df['wave_cu_prime_idx_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","  co_prime_idx_fill_ = res_df['wave_co_prime_idx_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","\n","  cu_bb_range = get_line(co_prime_idx_fill_, bb_upper_) - get_line(co_prime_idx_fill_, bb_lower_)  # cu 에서 co_prime 의 bb_range 사용\n","  co_bb_range = get_line(cu_prime_idx_fill_, bb_upper_) - get_line(cu_prime_idx_fill_, bb_lower_)\n","\n","  wave_range = res_df['wave_high_fill_{}{}'.format(wave_itv, wave_period)].to_numpy() - res_df['wave_low_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","  \n","  res_df['cu_wrr_{}{}'.format(wave_itv, wave_period)] = wave_range / cu_bb_range   # for cu (currently, long)\n","  res_df['co_wrr_{}{}'.format(wave_itv, wave_period)] = wave_range / co_bb_range\n","\n","  return res_df"],"metadata":{"id":"nLWAP1Cl2Hvu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Todo, future_data\n","def enough_space(res_df, itv, period):\n","\n","  dc_upper_ = res_df['dc_upper_{}{}'.format(itv, period)].to_numpy()\n","  dc_base_ = res_df['dc_base_{}{}'.format(itv, period)].to_numpy()\n","  dc_lower_ = res_df['dc_lower_{}{}'.format(itv, period)].to_numpy()  \n","  high_ = res_df['high_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","  low_ = res_df['low_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","\n","  half_dc_gap = dc_upper_ - dc_base_\n","\n","  res_df['cu_es_{}{}'.format(itv, period)] = (low_ - dc_lower_) / half_dc_gap\n","  res_df['co_es_{}{}'.format(itv, period)] = (dc_upper_ - high_) / half_dc_gap\n","\n","  return res_df"],"metadata":{"id":"H_zPYIshbZgP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Todo, future_data\n","def candle_range_ratio(res_df, c_itv, bb_itv, bb_period):\n","\n","  itv_num = to_itvnum(c_itv)\n","\n","  b1_bb_upper_ = res_df['bb_upper_{}{}'.format(bb_itv, bb_period)].shift(itv_num).to_numpy()\n","  b1_bb_lower_ = res_df['bb_lower_{}{}'.format(bb_itv, bb_period)].shift(itv_num).to_numpy()\n","  bb_range = b1_bb_upper_ - b1_bb_lower_   # <-- h_candle's open_idx 의 bb_gap 사용\n","\n","  high_ = res_df['high_{}'.format(c_itv)].to_numpy()\n","  low_ = res_df['low_{}'.format(c_itv)].to_numpy()\n","  candle_range = high_ - low_  # 부호로 양 / 음봉 구분 (양봉 > 0)\n","  \n","  res_df['crr_{}'.format(c_itv)] = candle_range / bb_range\n","\n","  return res_df"],"metadata":{"id":"o3IUBc59VR5D"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def body_rel_ratio(res_df, c_itv):\n","\n","  itv_num = to_itvnum(c_itv)\n","  \n","  b1_close_ = res_df['close_{}'.format(c_itv)].shift(itv_num).to_numpy()\n","  b1_open_ = res_df['open_{}'.format(c_itv)].shift(itv_num).to_numpy()\n","  b1_body_range = abs(b1_close_ - b1_open_)\n","\n","  close_ = res_df['close_{}'.format(c_itv)].to_numpy()\n","  open_ = res_df['open_{}'.format(c_itv)].to_numpy()\n","  body_range = abs(close_ - open_)\n","  \n","  res_df['body_rel_ratio_{}'.format(c_itv)] = body_range / b1_body_range\n","\n","  return res_df\n","\n","def dc_over_body_ratio(res_df, c_itv, dc_itv, dc_period):\n","  close_ = res_df['close_{}'.format(c_itv)].to_numpy()\n","  open_ = res_df['open_{}'.format(c_itv)].to_numpy()\n","  body_range = abs(close_ - open_)\n","  \n","  dc_upper_ = res_df['dc_upper_{}{}'.format(dc_itv, dc_period)].to_numpy()\n","  dc_lower_ = res_df['dc_lower_{}{}'.format(dc_itv, dc_period)].to_numpy() \n","\n","  res_df['dc_upper_{}{}_br'.format(dc_itv, dc_period)] = (close_ - dc_upper_) / body_range\n","  res_df['dc_lower_{}{}_br'.format(dc_itv, dc_period)] = (dc_lower_ - close_) / body_range\n","\n","  return res_df"],"metadata":{"id":"u3yFd8Dcok5m"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def candle_pumping_ratio_v2(res_df, c_itv, dc_itv, period):\n","\n","  res_df = dc_line_v3(res_df, dc_itv, dc_period=period)\n","\n","  dc_upper_ = res_df['dc_upper_{}{}'.format(dc_itv, period)].to_numpy()\n","  dc_lower_ = res_df['dc_lower_{}{}'.format(dc_itv, period)].to_numpy()\n","  dc_range = dc_upper_ - dc_lower_\n"," \n","  open_ = res_df['open_{}'.format(c_itv)].to_numpy()\n","  close_ = res_df['close_{}'.format(c_itv)].to_numpy()\n","  body = close_ - open_  # 부호로 양 / 음봉 구분 (양봉 > 0)\n","  \n","  res_df['cppr_{}'.format(c_itv)] = body / dc_range\n","\n","  return res_df\n","\n","\n","# Todo, future_data\n","def candle_pumping_ratio(res_df, c_itv, bb_itv, period):\n","\n","  itv_num = to_itvnum(c_itv)\n","\n","  # 여기에도 v2 처럼 bb_indi. 추가 (자동화)\n","\n","  b1_bb_upper_ = res_df['bb_upper_{}{}'.format(bb_itv, period)].shift(itv_num).to_numpy()\n","  b1_bb_lower_ = res_df['bb_lower_{}{}'.format(bb_itv, period)].shift(itv_num).to_numpy()\n","  bb_range = b1_bb_upper_ - b1_bb_lower_\n","\n","  open_ = res_df['open_{}'.format(c_itv)].to_numpy()\n","  close_ = res_df['close_{}'.format(c_itv)].to_numpy()\n","  body = close_ - open_  # 부호로 양 / 음봉 구분 (양봉 > 0)\n","  \n","  res_df['cppr_{}'.format(c_itv)] = body / bb_range\n","\n","  return res_df\n","\n","\n","def pumping_ratio(res_df, config, itv, period1, period2):\n","\n","  bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","  bb_upper_5T = res_df['bb_upper_5T'].to_numpy()\n","  bb_range = bb_upper_5T - bb_lower_5T\n","\n","  selection_id = config.selection_id\n","  \n","  res_df['short_ppr_{}'.format(selection_id)] = res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() / get_line(res_df['short_wave_high_idx_{}{}{}'.format(itv, period1, period2)].to_numpy(), bb_range)\n","  res_df['long_ppr_{}'.format(selection_id)] = res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() / get_line(res_df['long_wave_low_idx_{}{}{}'.format(itv, period1, period2)].to_numpy(), bb_range)\n"],"metadata":{"id":"JWj02LLGbnji"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OpkclLSzazZ-"},"outputs":[],"source":["def wave_body_ratio(res_df_, itv, period):\n","  dc_upper_ = res_df_['dc_upper_{}{}'.format(itv, period)].to_numpy()\n","  dc_lower_ = res_df_['dc_lower_{}{}'.format(itv, period)].to_numpy()\n","  close_ = res_df_['close_{}'.format(itv)].to_numpy()\n","  open_ = res_df_['open_{}'.format(itv)].to_numpy()\n","\n","  dc_range = dc_upper_ - dc_lower_\n","  body_range = abs(close_ - open_)\n","\n","  res_df_['wave_body_ratio'] = body_range / dc_range\n","  res_df_['dc_upper_body_ratio'] = (np.maximum(close_, open_) - dc_upper_) / body_range\n","  res_df_['dc_lower_body_ratio'] = (dc_lower_) - np.minimum(close_, open_) / body_range\n","\n","  return"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0-zzitQRbnz8"},"outputs":[],"source":["# res_df_['wave_body_ratio'].tail(200)\n","\n","itv = 'H'\n","period = 5\n","wave_body_ratio(res_df_, itv, period)"]},{"cell_type":"markdown","metadata":{"id":"qsyPhNR8yP1c"},"source":["##### dump"]},{"cell_type":"markdown","metadata":{"id":"xpyP5t8Ht_pE"},"source":["### calc recursive indi's min_period"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"N1Hbm4OA4Tkk"},"outputs":[],"source":["ticker_prcn = get_precision_by_price(res_df.close.iloc[-1]) + 2\n","\n","target_len = 300000\n","slice_len_list = list(range(50, 10000, 100))\n","slice_len_list.insert(0, target_len)\n","\n","start_0 = time.time()\n","# prev_int_, prev_pnts_ = None, None\n","offset = 1\n","\n","for sl_idx, sample_len in enumerate(slice_len_list):\n","\n","  sample_df = res_df.iloc[-sample_len -offset:-offset]\n","  sample_len2 = sample_len\n","\n","  # --------- input using indi.s --------- #\n","  # res = ema_v0(sample_df['close'], 190)\n","  res = rsi(sample_df, 14)\n","\n","    #    to_htf()    #\n","  # df_5T = to_htf(sample_df, itv_='5T', offset='1h')\n","  # sample_len2 = len(df_5T)\n","\n","  # # --------- input using htf_indi. --------- #\n","  # res = ema(df_5T['close'], 195)\n","  # -------------------------------------- #\n","\n","  res_last_row = res.iloc[-1]\n","  if pd.isnull(res_last_row):\n","    continue\n","\n","  # print(res_last_row)\n","  # break\n","\n","  # sample_df = sample_df.join(to_lower_tf_v2(sample_df, df_5T, [-1]), how='inner')\n","\n","\n","  #   자리수 분할 계산    #\n","  int_, points_ = str(res_last_row).split('.')\n","  pnts_ = points_[:ticker_prcn]\n","\n","  if sl_idx == 0:\n","    target_int_ = int_\n","    target_pnts_ = pnts_\n","    print(\"target {} ({}) -> {} {}\".format(sample_len, sample_len2, int_, points_))\n","\n","  else:\n","    if target_int_ == int_ and target_pnts_ == pnts_:\n","      # print(sample_len, \"({})\".format(sample_len2), '->', int_, pnts_, end='\\n\\n')\n","      print(\"{} ({}) -> {} {}\\n\".format(sample_len, sample_len2, int_, points_))\n","      break\n","\n","print(time.time() - start_0)  # (1301)(1361)(1301)"]},{"cell_type":"markdown","metadata":{"id":"rrIGjmUzqU-D"},"source":["## import utils & config"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"SeJan_0t95yL","executionInfo":{"status":"ok","timestamp":1653644619966,"user_tz":-540,"elapsed":4167,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["frame_ver = \"0114_htf\"\n","ID_arr = np.array(['v3', 'v5_2'])\n","\n","utils_public_name = \"{}.utils.{}_utils_public\".format(strat_pkg, frame_ver)\n","utils_public_lib = importlib.import_module(utils_public_name)\n","utils_public = utils_public_lib   # temporary\n","\n","u_name_list = [\"{}.utils.{}_utils_{}\".format(strat_pkg, frame_ver, id_) for id_ in ID_arr]\n","utils_arr = np.array([importlib.import_module(u_name) for u_name in u_name_list])\n","\n","config_name_list = [\"{}_config_{}.json\".format(frame_ver, id_) for id_ in ID_arr]\n","cfg_path_list = [os.path.join(current_path, strat_pkg, \"config\", name_) for name_ in config_name_list]\n","cfg_file_list = [open(cfg_path) for cfg_path in cfg_path_list]\n","config_arr = np.array([EasyDict(json.load(cfg_)) for cfg_ in cfg_file_list])\n","\n","# ------ opened files should be closed --> 닫지 않으면 reopen 시 error occurs ------ #\n","_ = [cfg_.close() for cfg_ in cfg_file_list]\n","show_plot = 1   # idep's var - do not touch"]},{"cell_type":"markdown","metadata":{"id":"leSQlImg4_9L"},"source":["### utils_"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"CB2yZdQ95Cdg","executionInfo":{"status":"ok","timestamp":1653644621122,"user_tz":-540,"elapsed":1173,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# import pandas as pd\n","# import numpy as np\n","# import logging\n","\n","def enlist_tr(res_df, config, np_timeidx, mode='OPEN', show_detail=True):\n","\n","    # ================== enlist wave_unit ================== #\n","    selection_id = config.selection_id\n","    \n","    len_df = len(res_df)\n","    len_df_range = np.arange(len_df)\n","      \n","    wave_itv1 = config.tr_set.wave_itv1\n","    wave_period1 = config.tr_set.wave_period1\n","    wave_itv2 = config.tr_set.wave_itv2\n","    wave_period2 = config.tr_set.wave_period2\n","\n","    roll_hl_cnt = 3\n","\n","    roll_highs1 = [res_df['wave_high_fill_{}{}_-{}'.format(wave_itv1, wave_period1, cnt_ + 1)].to_numpy() for cnt_ in reversed(range(roll_hl_cnt))]\n","    roll_lows1 = [res_df['wave_low_fill_{}{}_-{}'.format(wave_itv1, wave_period1, cnt_ + 1)].to_numpy() for cnt_ in reversed(range(roll_hl_cnt))]\n","\n","    wave_high_fill1_ = res_df['wave_high_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    wave_low_fill1_ = res_df['wave_low_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","    roll_highs2 = [res_df['wave_high_fill_{}{}_-{}'.format(wave_itv2, wave_period2, cnt_ + 1)].to_numpy() for cnt_ in reversed(range(roll_hl_cnt))]\n","    roll_lows2 = [res_df['wave_low_fill_{}{}_-{}'.format(wave_itv2, wave_period2, cnt_ + 1)].to_numpy() for cnt_ in reversed(range(roll_hl_cnt))]\n","\n","    wave_high_fill2_ = res_df['wave_high_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","    wave_low_fill2_ = res_df['wave_low_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","    \n","    # cu's roll_high_[:, -1] = prev_high & cu's roll_low_[:, -1] = current_low\n","    # co's roll_low_[:, -1] = prev_low & co's roll_high_[:, -1] = current_high\n","    res_df['short_tp_1_{}'.format(selection_id)] = wave_low_fill1_      # wave_low_fill_ b2_low_5T\n","    res_df['short_tp_0_{}'.format(selection_id)] = roll_highs1[-1]   # roll_high_[:, -2] wave_high_fill_\n","    res_df['long_tp_1_{}'.format(selection_id)] = wave_high_fill1_      # wave_high_fill_ b2_high_5T\n","    res_df['long_tp_0_{}'.format(selection_id)] = roll_lows1[-1]     # roll_low_[:, -2]  wave_low_fill_\n","\n","    res_df['short_ep1_1_{}'.format(selection_id)] = wave_low_fill1_   # b2_low_5T\n","    res_df['short_ep1_0_{}'.format(selection_id)] = wave_high_fill1_  # roll_high_[:, -2]\n","    res_df['long_ep1_1_{}'.format(selection_id)] = wave_high_fill1_   # b2_high_5T\n","    res_df['long_ep1_0_{}'.format(selection_id)] = wave_low_fill1_    # roll_low_[:, -2]\n","\n","    res_df['short_ep2_1_{}'.format(selection_id)] = wave_low_fill2_   # b2_low_5T\n","    res_df['short_ep2_0_{}'.format(selection_id)] = wave_high_fill2_  # roll_high_[:, -2]\n","    res_df['long_ep2_1_{}'.format(selection_id)] = wave_high_fill2_   # b2_high_5T\n","    res_df['long_ep2_0_{}'.format(selection_id)] = wave_low_fill2_    # roll_low_[:, -2]\n","\n","    res_df['short_out_1_{}'.format(selection_id)] = wave_low_fill2_   # b2_low_5T\n","    res_df['short_out_0_{}'.format(selection_id)] = roll_highs2[-1]  # roll_high_[:, -2]\n","    res_df['long_out_1_{}'.format(selection_id)] = wave_high_fill2_   # b2_high_5T\n","    res_df['long_out_0_{}'.format(selection_id)] = roll_lows2[-1]    # roll_low_[:, -2]\n","\n","    # ------ inversion ------ #\n","    if config.pos_set.short_inversion or config.pos_set.long_inversion:\n","        res_df.rename({short_tp_1_: long_tp_1_, long_tp_1_: short_tp_1_}, axis=1, inplace=True)\n","        res_df.rename({short_tp_0_: long_tp_0_, long_tp_0_: short_tp_0_}, axis=1, inplace=True)\n","        res_df.rename({short_epout_1_: long_epout_1_, long_epout_1_: short_epout_1_}, axis=1, inplace=True)\n","        res_df.rename({short_epout_0_: long_epout_0_, long_epout_0_: short_epout_0_}, axis=1, inplace=True)\n","\n","    res_df['short_tp_gap_{}'.format(selection_id)] = abs(res_df['short_tp_1_{}'.format(selection_id)] - res_df['short_tp_0_{}'.format(selection_id)])\n","    res_df['long_tp_gap_{}'.format(selection_id)] = abs(res_df['long_tp_1_{}'.format(selection_id)] - res_df['long_tp_0_{}'.format(selection_id)])\n","    res_df['short_ep1_gap_{}'.format(selection_id)] = abs(res_df['short_ep1_1_{}'.format(selection_id)] - res_df['short_ep1_0_{}'.format(selection_id)])\n","    res_df['long_ep1_gap_{}'.format(selection_id)] = abs(res_df['long_ep1_1_{}'.format(selection_id)] - res_df['long_ep1_0_{}'.format(selection_id)])\n","    res_df['short_ep2_gap_{}'.format(selection_id)] = abs(res_df['short_ep2_1_{}'.format(selection_id)] - res_df['short_ep2_0_{}'.format(selection_id)])\n","    res_df['long_ep2_gap_{}'.format(selection_id)] = abs(res_df['long_ep2_1_{}'.format(selection_id)] - res_df['long_ep2_0_{}'.format(selection_id)])\n","    res_df['short_out_gap_{}'.format(selection_id)] = abs(res_df['short_out_1_{}'.format(selection_id)] - res_df['short_out_0_{}'.format(selection_id)])\n","    res_df['long_out_gap_{}'.format(selection_id)] = abs(res_df['long_out_1_{}'.format(selection_id)] - res_df['long_out_0_{}'.format(selection_id)])\n","\n","\n","    data_cols = ['open', 'high', 'low', 'close']  # Todo - public_indi 이전에 해야할지도 모름 # 'close', 'haopen', 'hahigh', 'halow', 'haclose'\n","    open, high, low, close = [res_df[col_].to_numpy() for col_ in data_cols]\n","\n","    # ================== point ================== #     \n","    short_open_res1 = np.ones(len_df) #.astype(object)\n","    long_open_res1 = np.ones(len_df)  #.astype(object)\n","    short_open_res2 = np.ones(len_df) #.astype(object)\n","    long_open_res2 = np.ones(len_df)  #.astype(object)\n","    \n","    # ------------ wave_point ------------ #\n","    notnan_cu = ~pd.isnull(res_df['wave_cu_{}{}'.format(wave_itv1, wave_period1)].to_numpy())  # isnull for object\n","    notnan_co = ~pd.isnull(res_df['wave_co_{}{}'.format(wave_itv1, wave_period1)].to_numpy())\n","\n","    short_open_res1 *= res_df['wave_cu_{}{}'.format(wave_itv1, wave_period1)].to_numpy().astype(bool) * notnan_cu  # object로 변환되는 경우에 대응해, bool 로 재정의\n","    long_open_res1 *= res_df['wave_co_{}{}'.format(wave_itv1, wave_period1)].to_numpy().astype(bool) * notnan_co  # np.nan = bool type 으로 True 임..\n","    short_open_res2 *= res_df['wave_cu_{}{}'.format(wave_itv2, wave_period2)].to_numpy().astype(bool) * notnan_cu\n","    long_open_res2 *= res_df['wave_co_{}{}'.format(wave_itv2, wave_period2)].to_numpy().astype(bool) * notnan_co\n","\n","    if show_detail:\n","      sys_log.warning(\"wave_point\")\n","      sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","      sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))  \n","      sys_log.warning(\"np.sum(short_open_res2 == 1) : {}\".format(np.sum(short_open_res2 == 1)))\n","      sys_log.warning(\"np.sum(long_open_res2 == 1) : {}\".format(np.sum(long_open_res2 == 1)))  \n","    \n","    # ------ reject update_hl ------ #\n","    notnan_update_low_cu = ~pd.isnull(res_df['wave_update_low_cu_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy())\n","    notnan_update_high_co = ~pd.isnull(res_df['wave_update_high_co_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy())\n","\n","    short_open_res1 *= ~(res_df['wave_update_low_cu_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy().astype(bool)) * notnan_update_low_cu\n","    long_open_res1 *= ~(res_df['wave_update_high_co_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy().astype(bool)) * notnan_update_high_co\n","    short_open_res2 *= ~(res_df['wave_update_low_cu_bool_{}{}'.format(wave_itv2, wave_period2)].to_numpy().astype(bool)) * notnan_update_low_cu\n","    long_open_res2 *= ~(res_df['wave_update_high_co_bool_{}{}'.format(wave_itv2, wave_period2)].to_numpy().astype(bool)) * notnan_update_high_co\n","\n","    # short_open_res1 *= ~res_df['wave_update_low_cu_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    # long_open_res1 *= ~res_df['wave_update_high_co_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    # short_open_res2 *= ~res_df['wave_update_low_cu_bool_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","    # long_open_res2 *= ~res_df['wave_update_high_co_bool_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","\n","    if show_detail:\n","      sys_log.warning(\"reject update_hl\")\n","      sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","      sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))  \n","      sys_log.warning(\"np.sum(short_open_res2 == 1) : {}\".format(np.sum(short_open_res2 == 1)))\n","      sys_log.warning(\"np.sum(long_open_res2 == 1) : {}\".format(np.sum(long_open_res2 == 1)))  \n","\n","    # ------ tf_entry ------ #    \n","    tf_entry = to_itvnum(config.loc_set.point1.tf_entry)\n","    if wave_itv1 != 'T':      \n","      short_open_res1 *= np_timeidx % tf_entry == (tf_entry - 1)\n","      long_open_res1 *= np_timeidx % tf_entry == (tf_entry - 1) \n","\n","      if show_detail:\n","        sys_log.warning(\"tf_entry\")\n","        sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","        sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))  \n","    \n","    if wave_itv2 != 'T':      \n","      short_open_res2 *= np_timeidx % tf_entry == (tf_entry - 1)\n","      long_open_res2 *= np_timeidx % tf_entry == (tf_entry - 1) \n","\n","      if show_detail:\n","        sys_log.warning(\"tf_entry\")\n","        sys_log.warning(\"np.sum(short_open_res2 == 1) : {}\".format(np.sum(short_open_res2 == 1)))\n","        sys_log.warning(\"np.sum(long_open_res2 == 1) : {}\".format(np.sum(long_open_res2 == 1)))\n","\n","    # ------ wave_point 분리 ------ #\n","    # cci_ = res_df['cci_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    # b1_cci_ = res_df['cci_{}{}'.format(wave_itv1, wave_period1)].shift(1).to_numpy()        \n","    \n","    # band_width = 100\n","    # upper_band = band_width\n","    # lower_band = -band_width\n","\n","    # update_low_cu_bool = res_df['update_low_cu_bool_{}{}'.format(wave_itv1, wave_period1)]\n","    # update_high_co_bool = res_df['update_high_co_bool_{}{}'.format(wave_itv1, wave_period1)]\n","\n","    # short_open_res1 *= (b1_cci_ > upper_band) & (upper_band > cci_) & ~update_low_cu_bool\n","    # long_open_res1 *= (b1_cci_ < lower_band) & (lower_band < cci_) & ~update_high_co_bool   \n","\n","    # ------ wave_mm ------ #\n","    wave_high_terms_cnt_fill1_ = res_df['wave_high_terms_cnt_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    wave_low_terms_cnt_fill1_ = res_df['wave_low_terms_cnt_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","    short_open_res1 *= (wave_high_terms_cnt_fill1_ > config.tr_set.wave_greater2) & (wave_low_terms_cnt_fill1_ > config.tr_set.wave_greater1)\n","    long_open_res1 *= (wave_low_terms_cnt_fill1_ > config.tr_set.wave_greater2) & (wave_high_terms_cnt_fill1_ > config.tr_set.wave_greater1)\n","\n","    wave_high_terms_cnt_fill2_ = res_df['wave_high_terms_cnt_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","    wave_low_terms_cnt_fill2_ = res_df['wave_low_terms_cnt_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","\n","    short_open_res2 *= (wave_high_terms_cnt_fill2_ > config.tr_set.wave_greater2) & (wave_low_terms_cnt_fill2_ > config.tr_set.wave_greater1)\n","    long_open_res2 *= (wave_low_terms_cnt_fill2_ > config.tr_set.wave_greater2) & (wave_high_terms_cnt_fill2_ > config.tr_set.wave_greater1)\n","\n","    if show_detail:\n","      sys_log.warning(\"wave_mm\")\n","      sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","      sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))\n","      sys_log.warning(\"np.sum(short_open_res2 == 1) : {}\".format(np.sum(short_open_res2 == 1)))\n","      sys_log.warning(\"np.sum(long_open_res2 == 1) : {}\".format(np.sum(long_open_res2 == 1)))\n","\n","    # ================== pattern depiction ================== #  \n","    # bb_upper_ = res_df['bb_upper_{}{}'.format('T', 60)].to_numpy()\n","    # bb_lower_ = res_df['bb_lower_{}{}'.format('T', 60)].to_numpy()\n","    # bb_upper2_ = res_df['bb_upper2_{}{}'.format('T', 60)].to_numpy()\n","    # bb_lower2_ = res_df['bb_lower2_{}{}'.format('T', 60)].to_numpy()\n","    # bb_upper3_ = res_df['bb_upper3_{}{}'.format('T', 60)].to_numpy()\n","    # bb_lower3_ = res_df['bb_lower3_{}{}'.format('T', 60)].to_numpy()\n","    \n","    # ------ 양 / 음봉 (long) ------ #\n","    # short_open_res1 *= close < open\n","    # long_open_res1 *= close > open\n","\n","    # if show_detail:\n","    #   sys_log.warning(\"close > open\")\n","    #   sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","    #   sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))\n","\n","    \n","    # # ------ even_break, hhhl (long) ------ #        \n","    # # cu's roll_high_[:, -1] = prev_high & cu's roll_low_[:, -1] = current_low\n","    # # co's roll_low_[:, -1] = prev_low & co's roll_high_[:, -1] = current_high\n","    # short_open_res1 *= (roll_low_[:, -2] > roll_low_[:, -1]) # & (roll_high_[:, -2] > roll_high_[:, -1])\n","    # long_open_res1 *= (roll_high_[:, -2] < roll_high_[:, -1]) # & (roll_low_[:, -2] < roll_low_[:, -1])\n","\n","    # if show_detail:\n","    #   sys_log.warning(\"even_break\")\n","    #   sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","    #   sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))\n","\n","    # # ------ roll_high < bb_upper2 (long) ------ #\n","    # short_open_res1 *= (roll_low_[:, -4] > roll_low_bb_lower2_[:, -4])\n","    # short_open_res1 *= (roll_low_[:, -3] > roll_low_bb_lower2_[:, -3])\n","    # short_open_res1 *= (roll_low_[:, -2] > roll_low_bb_lower2_[:, -2])\n","    # short_open_res1 *= (roll_low_[:, -1] > roll_low_bb_lower2_[:, -1])\n","\n","    # long_open_res1 *= (roll_high_[:, -4] < roll_high_bb_upper2_[:, -4])\n","    # long_open_res1 *= (roll_high_[:, -3] < roll_high_bb_upper2_[:, -3])\n","    # long_open_res1 *= (roll_high_[:, -2] < roll_high_bb_upper2_[:, -2])\n","    # long_open_res1 *= (roll_high_[:, -1] < roll_high_bb_upper2_[:, -1])\n","    \n","    # if show_detail:\n","    #   sys_log.warning(\"roll_high < bb_upper2\")\n","    #   sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","    #   sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))\n","\n","    # ------ base_15T < wave_base ------ #\n","    # dc_base_ = res_df['dc_base_{}{}'.format(p1_itv1, p1_period1)].to_numpy()\n","    # wave_base_ = res_df['dc_base_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","    # short_open_res1 *= (dc_base_ > wave_base_) & (dc_base_ > close)\n","    # long_open_res1 *= (dc_base_ < wave_base_) & (dc_base_ < close)\n","\n","    # if show_detail:\n","    #   sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","    #   sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))     \n","        \n","\n","    # ================== tr_set ================== #\n","    # ------------ tp ------------ #\n","    tpg = config.tr_set.tp_gap\n","    res_df['short_tp_{}'.format(selection_id)] = res_df['short_tp_1_{}'.format(selection_id)].to_numpy() - res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * tpg\n","    res_df['long_tp_{}'.format(selection_id)] = res_df['long_tp_1_{}'.format(selection_id)].to_numpy() + res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * tpg\n","    # res_df['short_tp_{}'.format(selection_id)] = short_tp_1 - short_epout_gap * tpg\n","    # res_df['long_tp_{}'.format(selection_id)] = long_tp_1 + long_epout_gap * tpg\n","\n","    # ------ limit_ep ------ #\n","    if config.ep_set.entry_type == \"LIMIT\":\n","        epg1 = config.tr_set.ep_gap1\n","        epg2 = config.tr_set.ep_gap2\n","\n","        res_df['short_ep1_{}'.format(selection_id)] = res_df['short_ep1_0_{}'.format(selection_id)].to_numpy() + res_df['short_ep1_gap_{}'.format(selection_id)].to_numpy() * epg1\n","        res_df['long_ep1_{}'.format(selection_id)] = res_df['long_ep1_0_{}'.format(selection_id)].to_numpy() - res_df['long_ep1_gap_{}'.format(selection_id)].to_numpy() * epg1        \n","        res_df['short_ep2_{}'.format(selection_id)] = res_df['short_ep2_0_{}'.format(selection_id)].to_numpy() + res_df['short_ep2_gap_{}'.format(selection_id)].to_numpy() * epg2\n","        res_df['long_ep2_{}'.format(selection_id)] = res_df['long_ep2_0_{}'.format(selection_id)].to_numpy() - res_df['long_ep2_gap_{}'.format(selection_id)].to_numpy() * epg2\n","        \n","        # res_df['short_ep_{}'.format(selection_id)] = short_tp_0 + short_tp_gap * epg\n","        # res_df['long_ep_{}'.format(selection_id)] = long_tp_0 - long_tp_gap * epg\n","        \n","        # wave_cu_marker_ = res_df['wave_cu_marker_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","        # wave_co_marker_ = res_df['wave_co_marker_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","        # res_df['short_ep_{}'.format(selection_id)] = wave_cu_marker_ + short_epout_gap * epg\n","        # res_df['long_ep_{}'.format(selection_id)] = wave_co_marker_ - long_epout_gap * epg\n","\n","    # ------ market_ep ------ #\n","    else:\n","        res_df['short_ep1_{}'.format(selection_id)] = close\n","        res_df['long_ep1_{}'.format(selection_id)] = close\n","        res_df['short_ep2_{}'.format(selection_id)] = close\n","        res_df['long_ep2_{}'.format(selection_id)] = close\n","\n","    # ------------ out ------------ #\n","    outg = config.tr_set.out_gap\n","    # res_df['short_out_{}'.format(selection_id)] = short_tp_0 + short_tp_gap * outg            # 1. for hhm check -> 규칙성과 wave_range 기반 거래 기준의 hhm 확인\n","    # res_df['long_out_{}'.format(selection_id)] = long_tp_0 - long_tp_gap * outg\n","    res_df['short_out_{}'.format(selection_id)] = res_df['short_out_0_{}'.format(selection_id)].to_numpy() + res_df['short_out_gap_{}'.format(selection_id)].to_numpy() * outg      # for p1_hhm, p2_hlm\n","    res_df['long_out_{}'.format(selection_id)] = res_df['long_out_0_{}'.format(selection_id)].to_numpy() - res_df['long_out_gap_{}'.format(selection_id)].to_numpy() * outg \n","    # res_df['short_out_{}'.format(selection_id)] = res_df['short_ep2_0_{}'.format(selection_id)].to_numpy() + res_df['short_ep2_gap_{}'.format(selection_id)].to_numpy() * outg    # for p1 hlm\n","    # res_df['long_out_{}'.format(selection_id)] = res_df['long_ep2_0_{}'.format(selection_id)].to_numpy() - res_df['long_ep2_gap_{}'.format(selection_id)].to_numpy() * outg \n","\n","    # ------------ point validation ------------ # - vecto. 로 미리 거를 수 있는걸 거르면 좋을 것\n","    short_tp_ = res_df['short_tp_{}'.format(selection_id)].to_numpy()\n","    short_ep1_ = res_df['short_ep1_{}'.format(selection_id)].to_numpy()\n","    short_ep2_ = res_df['short_ep2_{}'.format(selection_id)].to_numpy()\n","    short_out_ = res_df['short_out_{}'.format(selection_id)].to_numpy()\n","\n","    long_tp_ = res_df['long_tp_{}'.format(selection_id)].to_numpy()\n","    long_ep1_ = res_df['long_ep1_{}'.format(selection_id)].to_numpy()\n","    long_ep2_ = res_df['long_ep2_{}'.format(selection_id)].to_numpy()\n","    long_out_ = res_df['long_out_{}'.format(selection_id)].to_numpy()\n","\n","    short_open_res1 *= (short_tp_ < short_ep1_) # (short_ep_ < short_out_)  # tr_set validation reject nan data & 정상 거래 위한 tp > ep / --> p2_box location (cannot be vectorized)\n","    # short_open_res1 *= close < short_ep1_   # reject entry open_execution\n","    short_open_res1 *= close < res_df['short_ep1_0_{}'.format(selection_id)].to_numpy()   # reject hl_out open_execution -> close always < ep1_0 at wave_p1\n","    # short_out_  res_df['short_tp_0_{}'.format(selection_id)].to_numpy() res_df['short_ep1_0_{}'.format(selection_id)].to_numpy()\n","\n","    long_open_res1 *= (long_tp_ > long_ep1_) # (long_ep_ > long_out_)  # (long_tp_ > long_ep_) # tr_set validation     \n","    # long_open_res1 *= close > long_ep1_  # reject entry open_execution    \n","    long_open_res1 *= close > res_df['long_ep1_0_{}'.format(selection_id)].to_numpy()  # reject hl_out open_execution   \n","    # long_out_ res_df['long_tp_0_{}'.format(selection_id)].to_numpy() res_df['long_ep1_0_{}'.format(selection_id)].to_numpy()\n","\n","    short_open_res2 *= (short_ep2_ < short_out_) # tr_set validation (short_tp_ < short_ep_) # --> p2_box location (cannot be vectorized)\n","    short_open_res2 *= close < short_out_    # reject hl_out open_execution\n","\n","    long_open_res2 *= (long_ep2_ > long_out_)  # tr_set validation (long_tp_ > long_ep_) &   # p2's ep & out can be vectorized\n","    long_open_res2 *= close > long_out_    # reject hl_out open_execution\n","\n","    res_df['short_open1_{}'.format(selection_id)] = short_open_res1 * (not config.pos_set.short_ban)\n","    res_df['long_open1_{}'.format(selection_id)] = long_open_res1 * (not config.pos_set.long_ban) \n","    res_df['short_open2_{}'.format(selection_id)] = short_open_res2\n","    res_df['long_open2_{}'.format(selection_id)] = long_open_res2\n","\n","    if show_detail:\n","      sys_log.warning(\"point validation\")\n","      sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","      sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))\n","      sys_log.warning(\"np.sum(short_open_res2 == 1) : {}\".format(np.sum(short_open_res2 == 1)))\n","      sys_log.warning(\"np.sum(long_open_res2 == 1) : {}\".format(np.sum(long_open_res2 == 1)))\n","    \n","    # ------------ higher_high momentum ------------ #\n","    # wb_tpg = config.tr_set.wb_tp_gap\n","    # wb_outg = config.tr_set.wb_out_gap\n","    # res_df['short_wave_1_{}'.format(selection_id)] = res_df['short_tp_1_{}'.format(selection_id)].to_numpy() - res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * wb_tpg\n","    # res_df['long_wave_1_{}'.format(selection_id)] = res_df['long_tp_1_{}'.format(selection_id)].to_numpy() + res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * wb_tpg\n","    \n","    # res_df['short_wave_0_{}'.format(selection_id)] = res_df['short_tp_0_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * wb_outg        # hhm check\n","    # res_df['long_wave_0_{}'.format(selection_id)] = res_df['long_tp_0_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * wb_outg\n","    # res_df['short_wave_0_{}'.format(selection_id)] = short_epout_0 + short_epout_gap * wb_outg\n","    # res_df['long_wave_0_{}'.format(selection_id)] = long_epout_0 - long_epout_gap * wb_outg\n","\n","    # ------ tr ------ #\n","    # res_df['short_tr_{}'.format(selection_id)] = abs(\n","    #     (short_ep_ / short_tp_ - config.trader_set.limit_fee - 1) / (short_ep_ / short_out_ - config.trader_set.market_fee - 1))\n","    # res_df['long_tr_{}'.format(selection_id)] = abs(\n","    #     (long_tp_ / long_ep_ - config.trader_set.limit_fee - 1) / (long_out_ / long_ep_ - config.trader_set.market_fee - 1))\n","\n","    # ------ zoned_ep ------ #\n","    # if config.tr_set.c_ep_gap != \"None\":\n","    #     # res_df['short_ep_org_{}'.format(selection_id)] = res_df['short_ep_{}'.format(selection_id)].copy()\n","    #     # res_df['long_ep_org_{}'.format(selection_id)] = res_df['long_ep_{}'.format(selection_id)].copy()\n","    #     res_df['short_ep2_{}'.format(selection_id)] = short_epout_1 + short_epout_gap * config.tr_set.c_ep_gap\n","    #     res_df['long_ep2_{}'.format(selection_id)] = long_epout_1 - long_epout_gap * config.tr_set.c_ep_gap\n","\n","    # # ------ zoned_out ------ #\n","    # if config.tr_set.t_out_gap != \"None\":\n","    #     # res_df['short_out_org_{}'.format(selection_id)] = res_df['short_out_{}'.format(selection_id)].copy()\n","    #     # res_df['long_out_org_{}'.format(selection_id)] = res_df['long_out_{}'.format(selection_id)].copy()\n","    #     res_df['short_out2_{}'.format(selection_id)] = short_epout_0 + short_epout_gap * config.tr_set.t_out_gap\n","    #     res_df['long_out2_{}'.format(selection_id)] = long_epout_0 - long_epout_gap * config.tr_set.t_out_gap\n","\n","    return res_df\n"]},{"cell_type":"markdown","source":["#### legacy"],"metadata":{"id":"HuCb0phoPN83"}},{"cell_type":"code","source":["\n","    # ------ get candle_lastidx ------ #        \n","    # tf_entry = to_itvnum(config.loc_set.point.tf_entry)\n","    # b1_shift = np_timeidx % tf_entry + 1  # dynamic\n","    # b1_candle_lastidx = (len_df_range - b1_shift).astype(float)\n","    # b2_candle_lastidx = (len_df_range - (b1_shift + tf_entry)).astype(float)\n","    # b3_candle_lastidx = (len_df_range - (b1_shift + 2 * tf_entry)).astype(float)\n","    # b1_candle_lastidx[b1_candle_lastidx < 0] = np.nan\n","    # b2_candle_lastidx[b2_candle_lastidx < 0] = np.nan\n","    # b3_candle_lastidx[b3_candle_lastidx < 0] = np.nan\n","\n","    # high_5T = res_df['high_5T'].to_numpy()\n","    # low_5T = res_df['low_5T'].to_numpy()\n","\n","    # b2_high_5T = get_line(b2_candle_lastidx, high_5T)\n","    # b2_low_5T = get_line(b2_candle_lastidx, low_5T)\n","    \n","        # # ------ bb_stream ------ #        \n","        # roll_high_bb_upper_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, bb_upper_, roll_hl_cnt)\n","        # roll_low_bb_upper_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, bb_upper_, roll_hl_cnt)\n","        # roll_high_bb_upper2_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, bb_upper2_, roll_hl_cnt)\n","        # roll_low_bb_upper2_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, bb_upper2_, roll_hl_cnt)\n","\n","        # roll_high_bb_lower_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, bb_lower_, roll_hl_cnt)\n","        # roll_low_bb_lower_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, bb_lower_, roll_hl_cnt)\n","        # roll_high_bb_lower2_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, bb_lower2_, roll_hl_cnt)\n","        # roll_low_bb_lower2_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, bb_lower2_, roll_hl_cnt)\n","\n","        # wave_base_ = res_df['dc_base_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","\n","        # roll_high_wave_base_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, wave_base_, roll_hl_cnt)\n","        # roll_low_wave_base_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, wave_base_, roll_hl_cnt)\n","\n","        # short_open_res *= (roll_high_bb_lower_[:, -2] > roll_high_wave_base_[:, -2]) & (roll_high_wave_base_[:, -2] > roll_high_bb_lower2_[:, -2])\n","        # short_open_res *= (roll_low_bb_lower_[:, -1] > roll_low_wave_base_[:, -1]) & (roll_low_wave_base_[:, -1] > roll_low_bb_lower2_[:, -1])\n","        # short_open_res *= (roll_high_bb_lower_[:, -1] > roll_high_wave_base_[:, -1]) & (roll_high_wave_base_[:, -1] > roll_high_bb_lower2_[:, -1])\n","\n","        # long_open_res *= (roll_low_bb_upper_[:, -2] < roll_low_wave_base_[:, -2]) & (roll_low_wave_base_[:, -2] < roll_low_bb_upper2_[:, -2])\n","        # long_open_res *= (roll_high_bb_upper_[:, -1] < roll_high_wave_base_[:, -1]) & (roll_high_wave_base_[:, -1] < roll_high_bb_upper2_[:, -1])\n","        # long_open_res *= (roll_low_bb_upper_[:, -1] < roll_low_wave_base_[:, -1]) & (roll_low_wave_base_[:, -1] < roll_low_bb_upper2_[:, -1])\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"bb_stream\")\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))  \n","\n","        # ------ candle_pattern  ------ #   \n","        # b3_bb_upper_ = get_line(b3_candle_lastidx, bb_upper_)\n","        # b3_bb_lower_ = get_line(b3_candle_lastidx, bb_lower_)\n","        # b3_bb_upper2_ = get_line(b3_candle_lastidx, bb_upper2_)\n","        # b3_bb_lower2_ = get_line(b3_candle_lastidx, bb_lower2_)\n","        # b3_close = get_line(b3_candle_lastidx, close)\n","\n","        # b2_bb_upper2_ = get_line(b2_candle_lastidx, bb_upper2_)\n","        # b2_bb_lower2_ = get_line(b2_candle_lastidx, bb_lower2_)\n","        # b2_bb_upper3_ = get_line(b2_candle_lastidx, bb_upper3_)\n","        # b2_bb_lower3_ = get_line(b2_candle_lastidx, bb_lower3_)\n","        # b2_close = get_line(b2_candle_lastidx, close)\n","\n","        # b1_bb_upper_ = get_line(b1_candle_lastidx, bb_upper_)\n","        # b1_bb_lower_ = get_line(b1_candle_lastidx, bb_lower_)\n","        # b1_bb_upper2_ = get_line(b1_candle_lastidx, bb_upper2_)\n","        # b1_bb_lower2_ = get_line(b1_candle_lastidx, bb_lower2_)\n","        # b1_close = get_line(b1_candle_lastidx, close)\n","        # b1_high_5T = get_line(b1_candle_lastidx, high_5T)\n","        # b1_low_5T = get_line(b1_candle_lastidx, low_5T)\n","\n","        # short_open_res *= (b3_bb_lower_ > b3_close) & (b3_close > b3_bb_lower2_)\n","        # short_open_res *= (b2_bb_lower2_ > b2_close) & (b2_close > b2_bb_lower3_)\n","        # short_open_res *= (b1_bb_lower_ > b1_close) & (b1_close > b1_bb_lower2_)\n","\n","        # long_open_res *= (b3_bb_upper_ < b3_close) & (b3_close < b3_bb_upper2_)\n","        # long_open_res *= (b2_bb_upper2_ < b2_close) & (b2_close < b2_bb_upper3_)\n","        # long_open_res *= (b1_bb_upper_ < b1_close) & (b1_close < b1_bb_upper2_)\n","\n","        # # short_open_res *= (b2_low_5T < b1_low_5T) & (b2_close < b1_close)\n","        # # long_open_res *= (b2_high_5T > b1_high_5T) & (b2_close > b1_close)\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"candle_pattern\")\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1))) \n","\n","\n","        # ------ low_confirm ------ #\n","        # short_open_res *= b1_high_5T > wave_high_fill_\n","        # long_open_res *= b1_low_5T < wave_low_fill_\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"low_confirm\")\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1))) \n","        \n","        # ------ candle_ratio ------ #\n","        # b2_candle_range_5T = b2_high_5T - b2_low_5T\n","        # b1_candle_range_5T = b1_high_5T - b1_low_5T\n","        \n","        # short_open_res *= b1_candle_range_5T / b2_candle_range_5T < config.loc_set.point.crr\n","        # long_open_res *= b1_candle_range_5T / b2_candle_range_5T < config.loc_set.point.crr\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"candle_ratio\")\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1))) \n","\n","        # ------ wick_ratio ------ #\n","        # upper_wick_ratio_ = res_df['upper_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].to_numpy()\n","        # lower_wick_ratio_ = res_df['lower_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].to_numpy()\n","        # b2_upper_wick_ratio_ = get_line(b2_candle_lastidx, upper_wick_ratio_)\n","        # b2_lower_wick_ratio_ = get_line(b2_candle_lastidx, lower_wick_ratio_)\n","\n","        # short_open_res *= b2_upper_wick_ratio_ < config.loc_set.point.short_wick_ratio\n","        # long_open_res *= b2_upper_wick_ratio_ < config.loc_set.point.long_wick_ratio\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"wick_ratio\")\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1))) \n","\n","        # ------ large wave1_range ------ #          \n","        # roll_bb_upper_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, bb_upper_, roll_hl_cnt)\n","        # roll_bb_lower_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, bb_lower_, roll_hl_cnt)\n","        # roll_bb_upper3_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, bb_upper3_, roll_hl_cnt)\n","        # roll_bb_lower3_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, bb_lower3_, roll_hl_cnt)\n","\n","        # short_open_res *= (roll_bb_upper_[:, -2] < roll_high_[:, -2]) & (roll_low_[:, -1] < roll_bb_lower_[:, -1]) & (roll_low_[:, -1] > roll_bb_lower3_[:, -1])\n","        # long_open_res *= (roll_bb_upper_[:, -1] < roll_high_[:, -1]) & (roll_low_[:, -2] < roll_bb_lower_[:, -2]) & (roll_high_[:, -1] < roll_bb_upper3_[:, -1])\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","        \n","        # ------ low in bb_level3 ------ #  Todo, idx sync 맞춰야할 것\n","        # short_open_res *= (bb_upper2_ < wave_high_fill_) & (wave_high_fill_ < bb_upper3_)\n","        # long_open_res *= (bb_lower3_ < wave_low_fill_) & (wave_low_fill_ < bb_lower2_)\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ first_high ------ #        \n","        # wave_high_prime_idx_fill_= res_df['wave_high_prime_idx_fill_{}{}'.format(itv, period1)].to_numpy()\n","        # wave_low_prime_idx_fill_= res_df['wave_low_prime_idx_fill_{}{}'.format(itv, period1)].to_numpy()\n","        # cu_prime_wave_base = get_line(cu_prime_idx_fill_, wave_base_)\n","        # co_prime_wave_base = get_line(co_prime_idx_fill_, wave_base_)\n","\n","        # # short_open_res *= (co_roll_high_[:, -1] > dc_base_) & (dc_base_ > co_roll_low_[:, -1])\n","        # # long_open_res *= (cu_roll_low_[:, -1] < dc_base_) & (dc_base_ < cu_roll_high_[:, -1])\n","\n","        # short_open_res *= (cu_prime_wave_base > dc_base_) & (dc_base_ > co_prime_wave_base)\n","        # long_open_res *= (co_prime_wave_base < dc_base_) & (dc_base_ < cu_prime_wave_base)\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # cu_prime_dc_base = get_line(cu_prime_idx_fill_, dc_base_)        \n","        # co_prime_dc_base = get_line(co_prime_idx_fill_, dc_base_)\n","        \n","        # shift_size = to_itvnum(p1_itv1)\n","        # b1_dc_base_ = res_df['dc_base_{}{}'.format(p1_itv1, p1_period1)].shift(shift_size).to_numpy()\n","\n","        # short_open_res *= (b1_dc_base_ < dc_base_)\n","        # long_open_res *= (b1_dc_base_ > dc_base_)\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ b1_base_15T < wave_high ------ #\n","        # short_open_res *= (b1_dc_base_ > co_roll_low_[:, -1])\n","        # long_open_res *= (b1_dc_base_ < cu_roll_high_[:, -1])\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))   \n","        \n","        \n","    # b1_itv_num = to_itvnum(config.tr_set.p2_itv0)\n","    # b2_itv_num = to_itvnum(config.tr_set.p2_itv0) * 2  # multi 2 for imb_v2\n","\n","    # res_df[short_tp_1_] = res_df['dc_lower_{}{}'.format(itv, period1)]\n","    # res_df[short_tp_0_] = res_df['dc_upper_{}{}'.format(itv, period2)]\n","    # # res_df[short_tp_0_] = res_df['dc_upper_15T4']\n","    # res_df[long_tp_1_] = res_df['dc_upper_{}{}'.format(itv, period1)]\n","    # res_df[long_tp_0_] = res_df['dc_lower_{}{}'.format(itv, period2)]\n","    # # res_df[long_tp_0_] = res_df['dc_lower_15T4']\n","    \n","        # ------ base_cc ------ #\n","        dc_base_ = res_df['dc_base_{}{}'.format(p1_itv1, p1_period1)].to_numpy()\n","\n","        # close_ = res_df['close_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","        # b1_dc_base_ = res_df['dc_base_{}{}'.format(p1_itv1, p1_period1)].shift(tf_entry).to_numpy()\n","        # b1_close_ = res_df['close_{}'.format(config.loc_set.point.tf_entry)].shift(tf_entry).to_numpy()\n","\n","        # short_open_res *= ((b1_close_ > dc_base_) & (dc_base_ > close_)) | ((b1_close_ > b1_dc_base_) & (dc_base_ > close_))\n","        # long_open_res *= ((b1_close_ < dc_base_) & (dc_base_ < close_)) | ((b1_close_ < b1_dc_base_) & (dc_base_ < close_))\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","        \n","        # ------ tf_entry ------ #\n","        # tf_entry = to_itvnum(config.loc_set.point.tf_entry)\n","        \n","        # short_open_res *= np_timeidx % tf_entry == (tf_entry - 1)\n","        # long_open_res *= np_timeidx % tf_entry == (tf_entry - 1) \n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","    \n","        # ------ cppr 로 양음봉 check ------ # \n","        # tf_entry = to_itvnum(config.loc_set.point.tf_entry)\n","\n","        # res_df['b1_cppr_{}'.format(config.loc_set.point.tf_entry)] = res_df['cppr_{}'.format(config.loc_set.point.tf_entry)].shift(tf_entry)\n","        # b1_cppr_ = res_df['b1_cppr_{}'.format(config.loc_set.point.tf_entry)].to_numpy()  # check b1's cppr in ep_loc\n","        # cppr_ = res_df['cppr_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","        # short_open_res *= (b1_cppr_ > 0) & (cppr_ < 0)\n","        # long_open_res *= (b1_cppr_ < 0) & (cppr_ > 0)\n","\n","        # res_df['b1_updbr'] = res_df['dc_upper_15T4_br'].shift(tf_entry).to_numpy()\n","        # res_df['b1_lwdbr'] = res_df['dc_lower_15T4_br'].shift(tf_entry).to_numpy()\n","        \n","        # res_df['b1_updbr_cppr'] = b1_cppr_ * res_df['b1_updbr'].to_numpy()\n","        # res_df['b1_lwdbr_cppr'] = b1_cppr_ * res_df['b1_lwdbr'].to_numpy()\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ dc_cross ------ #\n","        # b1_dc_upper_15T4 = res_df['dc_upper_15T4'].shift(tf_entry).to_numpy()\n","        # b1_dc_lower_15T4 = res_df['dc_lower_15T4'].shift(tf_entry).to_numpy()\n","        # b1_high_ = res_df['high_{}'.format(config.loc_set.point.tf_entry)].shift(tf_entry).to_numpy()\n","        # b1_low_ = res_df['low_{}'.format(config.loc_set.point.tf_entry)].shift(tf_entry).to_numpy()\n","        # short_open_res *= b1_high_ > b1_dc_upper_15T4\n","        # long_open_res *= b1_low_ < b1_dc_lower_15T4\n","        \n","        # ------ dc_cc ------ #\n","        # b1_close_ = res_df['close_{}'.format(config.loc_set.point.tf_entry)].shift(tf_entry).to_numpy()\n","        # short_open_res *= b1_close_ > b1_dc_upper_15T4\n","        # long_open_res *= b1_close_ < b1_dc_lower_15T4\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ empty_space ------ #       \n","        # dc_upper_15T4 = res_df['dc_upper_15T4'].to_numpy()\n","        # dc_lower_15T4 = res_df['dc_lower_15T4'].to_numpy() \n","        # high_ = res_df['high_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","        # low_ = res_df['low_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","        # short_open_res *= high_ < dc_upper_15T4\n","        # long_open_res *= low_ > dc_lower_15T4\n","        \n","        # ------ candle_pattern ------ #  \n","        # pattern_column = \"{}_{}\".format(config.loc_set.point.candle_pattern, config.loc_set.point.tf_entry)\n","        # short_open_res *= res_df[pattern_column].to_numpy() < 0\n","        # long_open_res *= res_df[pattern_column].to_numpy() > 0\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","\n","        # ------ lower_touch > upper_touch (long) ------ #\n","        # short_open_res *= res_df['short_upper_touch_idx_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy() > res_df['short_lower_touch_idx_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy()\n","        # long_open_res *= res_df['long_lower_touch_idx_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy() > res_df['long_upper_touch_idx_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy()\n","\n","        # ------ base_3T cross ------ #\n","        # dc_base_3T = res_df['dc_base_3T'].to_numpy()\n","        # b1_close = res_df['close'].shift(1).to_numpy()\n","        # short_open_res *= (b1_close > dc_base_3T) & (dc_base_3T > close)\n","        # long_open_res *= (b1_close < dc_base_3T) & (dc_base_3T < close)\n","\n","        # ------ wave_low < base_5T (long) ------ #\n","        # dc_base_5T = res_df['dc_base_5T'].to_numpy()        \n","        # short_open_res *= res_df['short_upper_touch_line_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy() > dc_base_5T\n","        # long_open_res *= res_df['long_lower_touch_line_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy() < dc_base_5T      \n","\n","        # ------ ppr ------ #\n","        # pumping_ratio(res_df, config, p1_itv1, p1_period1, p1_period2)  "],"metadata":{"id":"-DNPumVZi0xs"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### dump"],"metadata":{"id":"aTV4h3LjTZBp"}},{"cell_type":"code","source":["\n","    \n","    short_tp_1_, long_tp_1_ = 'short_tp_1_{}'.format(selection_id), 'long_tp_1_{}'.format(selection_id)\n","    short_tp_0_, long_tp_0_ = 'short_tp_0_{}'.format(selection_id), 'long_tp_0_{}'.format(selection_id)\n","    short_tp_gap_, long_tp_gap_ = 'short_tp_gap_{}'.format(selection_id), 'long_tp_gap_{}'.format(selection_id)\n","\n","    short_ep_1_, long_ep_1_ = 'short_ep_1_{}'.format(selection_id), 'long_ep_1_{}'.format(selection_id)\n","    short_ep_0_, long_ep_0_ = 'short_ep_0_{}'.format(selection_id), 'long_ep_0_{}'.format(selection_id)\n","    short_ep_gap_, long_ep_gap_ = 'short_ep_gap_{}'.format(selection_id), 'long_ep_gap_{}'.format(selection_id)\n","\n","    short_epout_1_, long_epout_1_ = 'short_epout_1_{}'.format(selection_id), 'long_epout_1_{}'.format(selection_id)\n","    short_epout_0_, long_epout_0_ = 'short_epout_0_{}'.format(selection_id), 'long_epout_0_{}'.format(selection_id)\n","    short_epout_gap_, long_epout_gap_ = 'short_epout_gap_{}'.format(selection_id), 'long_epout_gap_{}'.format(selection_id)\n","    \n","    # ================== convert unit -> numpy ================== #   \n","    # tp_cols = [short_tp_1_, short_tp_0_, short_tp_gap_, long_tp_1_, long_tp_0_, long_tp_gap_]\n","    # epout_cols = [short_epout_1_, short_epout_0_, short_epout_gap_, long_epout_1_, long_epout_0_, long_epout_gap_]\n","\n","    # short_tp_1, short_tp_0, short_tp_gap, long_tp_1, long_tp_0, long_tp_gap = [res_df[col_].to_numpy() for col_ in tp_cols]\n","    # short_epout_1, short_epout_0, short_epout_gap, long_epout_1, long_epout_0, long_epout_gap = [res_df[col_].to_numpy() for col_ in epout_cols]\n","\n","    if p2_itv1 != \"None\":  # vectorized point2\n","        short_point1_on2_idx = pd.Series(\n","            np.where(res_df['short_wave_point_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)], len_df_range, np.nan)).rolling(point1_to2_period,\n","                                                                                                                                    min_periods=1).max().to_numpy()  # period 내의 max_point1_idx\n","        long_point1_on2_idx = pd.Series(\n","            np.where(res_df['long_wave_point_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)], len_df_range, np.nan)).rolling(point1_to2_period,\n","                                                                                                                                   min_periods=1).max().to_numpy()\n","\n","        short_point2_idx = pd.Series(\n","            np.where(res_df['short_wave_point_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)], len_df_range, np.nan)).to_numpy()\n","        long_point2_idx = pd.Series(\n","            np.where(res_df['long_wave_point_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)], len_df_range, np.nan)).to_numpy()\n","\n","        res_df['short_point_idxgap_{}'.format(selection_id)] = short_point2_idx - short_point1_on2_idx\n","        res_df['long_point_idxgap_{}'.format(selection_id)] = long_point2_idx - long_point1_on2_idx\n","\n","        # ------ p1 & p2 ------ #\n","        short_open_res *= ~np.isnan(res_df['short_point_idxgap_{}'.format(selection_id)].to_numpy())\n","        long_open_res *= ~np.isnan(res_df['long_point_idxgap_{}'.format(selection_id)].to_numpy())\n","\n","        if show_detail:\n","          sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","          sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ p2 amax > p1_idx (long) ------ #\n","        short_open_res *= res_df['short_upper_touch_idx_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)].to_numpy() > short_point1_on2_idx\n","        long_open_res *= res_df['long_lower_touch_idx_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)].to_numpy() > long_point1_on2_idx\n","\n","        if show_detail:\n","          sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","          sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ higher low (long) ------ #\n","        # short_a_line1_on2_ = get_line(short_point1_on2_idx, res_df['short_a_line_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy())\n","        # long_a_line1_on2_ = get_line(long_point1_on2_idx, res_df['long_a_line_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy())\n","\n","        # short_a_line2_ = res_df['short_a_line_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)].to_numpy()\n","        # long_a_line2_ = res_df['long_a_line_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)].to_numpy()\n","\n","        # short_open_res *= short_a_line1_on2_ >= short_a_line2_\n","        # long_open_res *= long_a_line1_on2_ <= long_a_line2_\n","\n","        # print(np.sum(long_open_res == 1))\n","\n","        # ------ higher high (long) ------ #\n","        # short_open_res *= co_roll_low_[:, -2] > co_roll_low_[:, -1]\n","        # long_open_res *= cu_roll_high_[:, -2] < cu_roll_high_[:, -1]\n","\n","        # short_open_res *= co_roll_low_[:, -3] > co_roll_low_[:, -2]\n","        # long_open_res *= cu_roll_high_[:, -3] < cu_roll_high_[:, -2]\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ higher low (long) ------ # \n","        # short_open_res *= co_roll_high_[:, -2] > co_roll_high_[:, -1]\n","        # long_open_res *= cu_roll_low_[:, -2] < cu_roll_low_[:, -1]\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))  \n","\n","        # ------ tf2_base < wave_low ------ #\n","        # short_open_res *= (dc_base_ > co_roll_high_[:, -1])\n","        # long_open_res *= (dc_base_ < cu_roll_low_[:, -1])\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))  \n","\n","        # short_open_res *= (cu_prime_wave_base > cu_prime_dc_base) & (dc_base_ > co_prime_wave_base)\n","        # long_open_res *= (co_prime_wave_base < co_prime_dc_base) & (dc_base_ < cu_prime_wave_base)\n","\n","        short_open_res *= (co_prime_dc_base < co_roll_low_[:, -2])\n","        long_open_res *= (cu_prime_dc_base > cu_roll_high_[:, -2])  #  b1_cu_prime_idx’s tf2_base > b1_high -> b1 이 아님 (error)\n","\n","\n","        res_df[short_epout_1_] = res_df['short_wave_low_{}{}{}'.format(itv, period1, period2)]\n","        res_df[short_epout_0_] = res_df['short_new_wave_high_{}{}{}'.format(itv, period1, period2)]\n","        res_df[long_epout_1_] = res_df['long_wave_high_{}{}{}'.format(itv, period1, period2)]\n","        res_df[long_epout_0_] = res_df['long_new_wave_low_{}{}{}'.format(itv, period1, period2)]\n","        \n","# ------ get candle_lastidx ------ #        \n","        tf_entry = to_itvnum(config.loc_set.point.tf_entry)\n","        b1_candle_shift = np_timeidx % tf_entry + 1\n","        b2_candle_shift = b1_candle_shift + tf_entry\n","        b3_candle_shift = b1_candle_shift + 2 * tf_entry\n","\n","        print(b3_candle_shift)\n","\n","        # bb_upper_ = res_df['bb_upper_{}{}'.format('T', 60)].to_numpy()\n","        # bb_lower_ = res_df['bb_lower_{}{}'.format('T', 60)].to_numpy()\n","        # bb_upper2_ = res_df['bb_upper2_{}{}'.format('T', 60)].to_numpy()\n","        # bb_lower2_ = res_df['bb_lower2_{}{}'.format('T', 60)].to_numpy()\n","        # bb_upper3_ = res_df['bb_upper3_{}{}'.format('T', 60)].to_numpy()\n","        # bb_lower3_ = res_df['bb_lower3_{}{}'.format('T', 60)].to_numpy()\n","\n","        # ------ compare by back_idx  ------ #   \n","        b3_bb_upper_ = res_df['bb_upper_{}{}'.format('T', 60)].shift(b3_candle_shift).to_numpy()\n","        b3_bb_lower_ = res_df['bb_lower_{}{}'.format('T', 60)].shift(b3_candle_shift).to_numpy()\n","        b3_bb_upper2_ = res_df['bb_upper2_{}{}'.format('T', 60)].shift(b3_candle_shift).to_numpy()\n","        b3_bb_lower2_ = res_df['bb_lower2_{}{}'.format('T', 60)].shift(b3_candle_shift).to_numpy()\n","        b3_close = res_df['close'].shift(b3_candle_shift).to_numpy()\n","\n","        b2_bb_upper2_ = res_df['bb_upper2_{}{}'.format('T', 60)].shift(b2_candle_shift).to_numpy()\n","        b2_bb_lower2_ = res_df['bb_lower2_{}{}'.format('T', 60)].shift(b2_candle_shift).to_numpy()\n","        b2_bb_upper3_ = res_df['bb_upper3_{}{}'.format('T', 60)].shift(b2_candle_shift).to_numpy()\n","        b2_bb_lower3_ = res_df['bb_lower3_{}{}'.format('T', 60)].shift(b2_candle_shift).to_numpy()\n","        b2_close = res_df['close'].shift(b2_candle_shift).to_numpy()\n","\n","        b1_bb_upper_ = res_df['bb_upper_{}{}'.format('T', 60)].shift(b1_candle_shift).to_numpy()\n","        b1_bb_lower_ = res_df['bb_lower_{}{}'.format('T', 60)].shift(b1_candle_shift).to_numpy()\n","        b1_bb_upper2_ = res_df['bb_upper2_{}{}'.format('T', 60)].shift(b1_candle_shift).to_numpy()\n","        b1_bb_lower2_ = res_df['bb_lower2_{}{}'.format('T', 60)].shift(b1_candle_shift).to_numpy()\n","        b1_close = res_df['close'].shift(b1_candle_shift).to_numpy()\n"],"metadata":{"id":"dc49JPmoTaPQ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"HKdUKKl-483N"},"source":["### utils_public"]},{"cell_type":"code","execution_count":24,"metadata":{"id":"nzOYWA2kqZ0d","executionInfo":{"status":"ok","timestamp":1653644808974,"user_tz":-540,"elapsed":3200,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# from funcs.funcs_indicator import *\n","# from funcs.funcs_trader import *\n","# import logging\n","# from ast import literal_eval\n","\n","pd.set_option('mode.chained_assignment',  None)\n","sys_log = logging.getLogger()\n","\n","\n","class OrderSide:\n","    BUY = \"BUY\"\n","    SELL = \"SELL\"\n","    INVALID = None\n","\n","\n","def lvrg_set(res_df, config, open_side, ep_, out_, fee, limit_leverage=50):\n","    selection_id = config.selection_id\n","    if not pd.isnull(out_) and not config.lvrg_set.static_lvrg:\n","        if selection_id in ['v3']:\n","            if open_side == OrderSide.SELL:\n","                loss = out_ / ep_\n","            else:\n","                loss = ep_ / out_\n","        else:  # 이 phase 가 정석, 윗 phase 는 결과가 수익 극대화라 사용함\n","            if open_side == OrderSide.SELL:\n","                loss = ep_ / out_\n","            else:\n","                loss = out_ / ep_\n","\n","        config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(loss - 1 - (fee + config.trader_set.market_fee))\n","\n","    # ------------ leverage rejection ------------ #\n","    # 감당하기 힘든 fluc. 의 경우 진입하지 않음 - dynamic_lvrg 사용 경우\n","    if config.lvrg_set.leverage < 1 and config.lvrg_set.lvrg_rejection:\n","        # if config.lvrg_set.leverage >= 1 and config.lvrg_set.lvrg_rejection:\n","        return None\n","\n","    if not config.lvrg_set.allow_float:\n","        config.lvrg_set.leverage = int(config.lvrg_set.leverage)\n","\n","    config.lvrg_set.leverage = min(limit_leverage, max(config.lvrg_set.leverage, 1))\n","\n","    return config.lvrg_set.leverage\n","\n","\n","def sync_check(df_, config, order_side=\"OPEN\", row_slice=True):\n","    try:\n","        make_itv_list = [m_itv.replace('m', 'T') for m_itv in literal_eval(config.trader_set.itv_list)]\n","        row_list = literal_eval(config.trader_set.row_list)\n","        rec_row_list = literal_eval(config.trader_set.rec_row_list)\n","        offset_list = literal_eval(config.trader_set.offset_list)\n","\n","        assert len(make_itv_list) == len(offset_list), \"length of itv & offset_list should be equal\"\n","        htf_df_list = [to_htf(df_, itv_=itv_, offset=offset_) for itv_idx, (itv_, offset_)\n","                       in enumerate(zip(make_itv_list, offset_list)) if itv_idx != 0]  #\n","        htf_df_list.insert(0, df_)\n","\n","        # for htf_df_ in htf_df_list:\n","        #     print(htf_df_.tail())\n","\n","        #       Todo        #\n","        #        1. row_list calc.\n","        #           a. indi. 를 만들기 위한 최소 period 가 존재하고, 그 indi. 를 사용한 lb_period 가 존재함\n","        #           b. => default_period + lb_period\n","        #               i. from sync_check, public_indi, ep_point2, ep_dur 의 tf 별 max lb_period check\n","        #                   1. default_period + max lb_period check\n","        #                       a. 현재까지 lb_period_list\n","        #                           h_prev_idx (open / close) 60\n","        #                           dc_period 135\n","        #                           zone_dc_period 135\n","\n","        # --------- slicing (in trader phase only) --------- #\n","        #               --> latency 영향도가 높은 곳은 이곳\n","        if row_slice:  # recursive 가 아닌 indi. 의 latency 를 고려한 slicing\n","            df, df_3T, df_5T, df_15T, df_30T, df_H, df_4H = [df_s.iloc[-row_list[row_idx]:].copy() for row_idx, df_s in enumerate(htf_df_list)]\n","            rec_df, rec_df_3T, rec_df_5T, rec_df_15T, rec_df_30T, rec_df_H, rec_df_4H = [df_s.iloc[-rec_row_list[row_idx]:].copy() for row_idx, df_s\n","                                                                                         in\n","                                                                                         enumerate(htf_df_list)]\n","        else:\n","            df, df_3T, df_5T, df_15T, df_30T, df_H, df_4H = htf_df_list\n","            rec_df, rec_df_3T, rec_df_5T, rec_df_15T, rec_df_30T, rec_df_H, rec_df_4H = htf_df_list\n","\n","        # --------- add indi. --------- #\n","\n","        #        1. 필요한 indi. 는 enlist_epouttp & mr_check 보면서 삽입\n","        #        2. min use_rows 계산을 위해서, tf 별로 gathering 함        #\n","        # start_0 = time.time()\n","\n","        # ------ T ------ #\n","        # df = dc_line(df, None, 'T', dc_period=20)\n","        # df = bb_line(df, None, 'T')\n","        #\n","        # ------ 3T ------ #\n","        # df = dc_line(df, df_3T, '3T')\n","\n","        # ------ 5T ------ #\n","        h_candle_v3(res_df, '5T')\n","        df = dc_line(df, df_5T, '5T')\n","        df = bb_line(df, df_5T, '5T')\n","        #\n","        # ------ 15T ------ #\n","        h_candle_v3(res_df, '15T')\n","        df = dc_line(df, df_15T, '15T')\n","        df = bb_line(df, df_15T, '15T')\n","        #\n","        # ------ 30T ------ #\n","        # df = bb_line(df, df_30T, '30T')\n","        #\n","        # ------ H ------ #\n","        h_candle_v3(res_df, 'H')\n","        # df = dc_line(df, df_H, 'H')\n","\n","        # ------ 4H ------ #\n","        # df = bb_line(df, df_4H, '4H')\n","\n","        # rec_df['rsi_1m'] = rsi(rec_df, 14)  # Todo - recursive, 250 period\n","        # df = df.join(to_lower_tf_v2(df, rec_df.iloc[:, [-1]], [-1], backing_i=0), how='inner')  # <-- join same_tf manual\n","        #\n","        # if order_side in [\"OPEN\"]:\n","        #     rec_df_5T['ema_5T'] = ema(rec_df_5T['close'], 195)  # Todo - recursive, 1100 period (5T)\n","        #     df = df.join(to_lower_tf_v2(df, rec_df_5T, [-1]), how='inner')\n","\n","    except Exception as e:\n","        sys_log.error(\"error in sync_check :\", e)\n","    else:\n","        return df\n","\n","\n","def public_indi(res_df, config, np_timeidx, order_side=\"OPEN\"):\n","\n","    selection_id = config.selection_id\n","\n","    wave_itv1 = config.tr_set.wave_itv1\n","    wave_itv2 = config.tr_set.wave_itv2\n","    wave_period1 = config.tr_set.wave_period1\n","    wave_period2 = config.tr_set.wave_period2\n","    roll_hl_cnt = 3\n","  \n","    # assert to_itvnum(wave_itv1) > 1  # wave_itv2 == 'T' and \n","    # ====== public ====== #\n","    # res_df = wave_range_dcbase_v11_3(res_df, config, over_period=2) \n","    \n","    # ------------ wave_period1 ------------ #\n","    if to_itvnum(wave_itv1) > 1: \n","      offset = '1h' if wave_itv1 != 'D' else '9h'\n","      htf_df = to_htf(res_df, wave_itv1, offset=offset)\n","      htf_df = wave_range_cci_v2(htf_df, wave_period1)\n","      \n","      cols = list(htf_df.columns[-15:-4])  # except idx col\n","\n","      valid_high_prime_idx, valid_low_prime_idx, roll_prev_high_idx_arr, roll_prev_low_idx_arr = roll_wave_hl_idx_v4(htf_df, wave_itv1, wave_period1, roll_hl_cnt=roll_hl_cnt)\n","\n","      htf_df = get_roll_wave_data_v2(htf_df, valid_high_prime_idx, roll_prev_high_idx_arr, 'wave_high_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","      cols += list(htf_df.columns[-roll_hl_cnt:])\n","\n","      htf_df = get_roll_wave_data_v2(htf_df, valid_low_prime_idx, roll_prev_low_idx_arr, 'wave_low_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","      cols += list(htf_df.columns[-roll_hl_cnt:])\n","\n","      htf_df = wave_range_ratio_v4_2(htf_df, wave_itv1, wave_period1, roll_hl_cnt=roll_hl_cnt)\n","      cols += list(htf_df.columns[-4:])\n","\n","      # ------ 필요한 cols 만 join (htf's idx 정보는 ltf 와 sync. 가 맞지 않음 - join 불가함) ------ #\n","      res_df.drop(cols, inplace=True, axis=1, errors='ignore')\n","      res_df = res_df.join(to_lower_tf_v3(res_df, htf_df, cols, backing_i=0), how='inner') \n","    else:\n","      res_df = wave_range_cci_v2(res_df, wave_period1)\n","\n","      valid_high_prime_idx, valid_low_prime_idx, roll_prev_high_idx_arr, roll_prev_low_idx_arr = roll_wave_hl_idx_v4(res_df, wave_itv1, wave_period1, roll_hl_cnt=roll_hl_cnt)\n","      res_df = get_roll_wave_data_v2(res_df, valid_high_prime_idx, roll_prev_high_idx_arr, 'wave_high_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","      res_df = get_roll_wave_data_v2(res_df, valid_low_prime_idx, roll_prev_low_idx_arr, 'wave_low_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","\n","      res_df = wave_range_ratio_v4_2(res_df, wave_itv1, wave_period1, roll_hl_cnt=roll_hl_cnt)\n","\n","    # ------------ wave_period2 ------------ #\n","    if wave_itv1 != wave_itv2 or wave_period1 != wave_period2:\n","      res_df = wave_range_cci_v2(res_df, wave_period2)\n","\n","      valid_high_prime_idx, valid_low_prime_idx, roll_prev_high_idx_arr, roll_prev_low_idx_arr = roll_wave_hl_idx_v4(res_df, wave_itv2, wave_period2, roll_hl_cnt=roll_hl_cnt)\n","      res_df = get_roll_wave_data_v2(res_df, valid_high_prime_idx, roll_prev_high_idx_arr, 'wave_high_fill_{}{}'.format(wave_itv2, wave_period2), roll_hl_cnt)\n","      res_df = get_roll_wave_data_v2(res_df, valid_low_prime_idx, roll_prev_low_idx_arr, 'wave_low_fill_{}{}'.format(wave_itv2, wave_period2), roll_hl_cnt)\n","\n","      res_df = wave_range_ratio_v4_2(res_df, wave_itv2, wave_period2, roll_hl_cnt=roll_hl_cnt)\n","\n","\n","    # ------ wave_loc_pct (bb) ------ #\n","    # res_df = wave_loc_pct_v2(res_df, config, 'T', 60)\n","    # res_df = wave_loc_pct(res_df, config, 'T', 60)\n","\n","    # future_cols = ['cu_es_15T1', 'co_es_15T1', 'upper_wick_ratio_15T', 'lower_wick_ratio_15T']\n","    # itv_list = ['15T', '15T', '15T', '15T']\n","    # res_df = backing_future_data(res_df, future_cols, itv_list)\n","\n","    # ====== intervaly ====== #    \n","    # ------ 5T ------ #\n","    # res_df = dc_level(res_df, '5T', 1)\n","    # res_df = bb_level(res_df, '5T', 1)\n","\n","    # res_df = st_level(res_df, '5T', 1)\n","\n","    # ------ 15T ------ #\n","    # res_df = dc_level(res_df, '15T', 1)\n","    # res_df = bb_level(res_df, '15T', 1)\n","    # res_df = dtk_plot(res_df, dtk_itv2='15T', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line, np_timeidx=np_timeidx)\n","\n","    # res_df = st_level(res_df, '15T', 1)\n","\n","    # ------ 30T ------ #\n","    # res_df = dc_level(res_df, '30T', 1)\n","    # res_df = bb_level(res_df, '30T', 1)\n","    # res_df = st_level(res_df, '30T', 1)\n","\n","    # ------ H ------ #\n","    # res_df = bb_level(res_df, 'H', 1)\n","\n","    # ------ 4H ------ #\n","    # res_df = bb_level(res_df, '4H', 1)\n","\n","    # res_df['dc_upper_v2'.format(selection_id)] = res_df['high'].rolling(config.loc_set.zone.dc_period).max()   # Todo, consider dc_period\n","    # res_df['dc_lower_v2'.format(selection_id)] = res_df['low'].rolling(config.loc_set.zone.dc_period).min()\n","\n","    # res_df['zone_dc_upper_v2'.format(selection_id)] = res_df['high'].rolling(config.loc_set.zone.zone_dc_period).max()   # Todo, consider zone_dc_period\n","    # res_df['zone_dc_lower_v2'.format(selection_id)] = res_df['low'].rolling(config.loc_set.zone.zone_dc_period).min()\n","\n","    # if order_side in [\"OPEN\"]:\n","        # candle_score_v3(res_df, 'T', unsigned=False)\n","        # candle_score_v3(res_df, config.loc_set.point1.exp_itv, unsigned=False)\n","\n","    #     temp indi.    #\n","    # res_df[\"ma30_1m\"] = res_df['close'].rolling(30).mean()\n","    # res_df[\"ma60_1m\"] = res_df['close'].rolling(60).mean()\n","    # res_df = dtk_plot(res_df, dtk_itv2='15T', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line, np_timeidx=np_timeidx)\n","\n","    return res_df\n","\n","\n","def expiry_v0(res_df, config, op_idx, e_j, tp_j, np_datas, open_side):\n","    high, low = np_datas\n","    selection_id = config.selection_id\n","    expire = 0\n","\n","    if config.tr_set.expire_tick != \"None\":\n","        if e_j - op_idx >= config.tr_set.expire_tick:\n","            expire = 1\n","\n","    if config.tr_set.expire_k1 != \"None\":\n","        if open_side == OrderSide.SELL:\n","            short_tp_1_ = res_df['short_tp_1_{}'.format(selection_id)].to_numpy()  # id 에 따라 dynamic 변수라 이곳에서 numpy 화 진행\n","            short_tp_gap_ = res_df['short_tp_gap_{}'.format(selection_id)].to_numpy()\n","            if low[e_j] <= short_tp_1_[tp_j] - short_tp_gap_[tp_j] * config.tr_set.expire_k1:\n","                expire = 1\n","        else:\n","            long_tp_1_ = res_df['long_tp_1_{}'.format(selection_id)].to_numpy()  # iloc 이 빠를까, to_numpy() 가 빠를까  # 3.94 ms --> 5.34 ms (iloc)\n","            long_tp_gap_ = res_df['long_tp_gap_{}'.format(selection_id)].to_numpy()\n","            if high[e_j] >= long_tp_1_[tp_j] + long_tp_gap_[tp_j] * config.tr_set.expire_k1:\n","                expire = 1\n","\n","    return expire\n","\n","\n","def expiry(res_df, config, op_idx, e_j, tp_j, np_datas, open_side):\n","    high, low = np_datas\n","    selection_id = config.selection_id\n","    expire = 0\n","\n","    if config.tr_set.expire_tick != \"None\":\n","        if e_j - op_idx >= config.tr_set.expire_tick:\n","            expire = 1\n","\n","    if config.tr_set.expire_k1 != \"None\":\n","        if open_side == OrderSide.SELL:\n","            short_tp_ = res_df['short_tp_{}'.format(selection_id)].to_numpy()  # id 에 따라 dynamic 변수라 이곳에서 numpy 화 진행\n","            short_tp_gap_ = res_df['short_tp_gap_{}'.format(selection_id)].to_numpy()\n","            if low[e_j] <= short_tp_[tp_j] + short_tp_gap_[tp_j] * config.tr_set.expire_k1:\n","                expire = 1\n","        else:\n","            long_tp_ = res_df['long_tp_{}'.format(selection_id)].to_numpy()  # iloc 이 빠를까, to_numpy() 가 빠를까  # 3.94 ms --> 5.34 ms (iloc)\n","            long_tp_gap_ = res_df['long_tp_gap_{}'.format(selection_id)].to_numpy()\n","            if high[e_j] >= long_tp_[tp_j] - long_tp_gap_[tp_j] * config.tr_set.expire_k1:\n","                expire = 1\n","\n","    return expire\n","\n","\n","# def expiry_p1(res_df, config, op_idx1, i, op_idx2, np_datas, open_side):\n","def expiry_p1(res_df, config, op_idx1, op_idx2, tp1, tp0, tp_gap, np_datas, open_side):\n","    high, low = np_datas\n","    selection_id = config.selection_id\n","    expire = 0\n","    touch_idx = None\n","\n","    # if config.tr_set.expire_tick != \"None\":\n","    #     if e_j - op_idx >= config.tr_set.expire_tick:\n","    #         expire = 1\n","\n","    # Todo, p1's tp1, 0 cannot be vectorized\n","    #   a. expiration 의 조건은 wave1, 0 의 broken\n","    idx_range = np.arange(op_idx1, op_idx2)\n","    if config.tr_set.expire_k1 != \"None\":\n","        if open_side == OrderSide.SELL:\n","            touch_idx = np.where((low[op_idx1:op_idx2] <= tp1 + tp_gap * config.tr_set.expire_k1) | \\\n","                                 (high[op_idx1:op_idx2] >= tp0 - tp_gap * config.tr_set.expire_k1),\n","                                 idx_range, np.nan)\n","            if np.sum(~np.isnan(touch_idx)) > 0:  # touch 가 존재하면, \n","            # if low[op_idx1:op_idx2].min() <= tp1 + tp_gap * config.tr_set.expire_k1 or \\\n","            # high[op_idx1:op_idx2].max() >= tp0 - tp_gap * config.tr_set.expire_k1:   # p2_box loc. 이 있어서, op_idx2 + 1 안함\n","                expire = 1\n","        else:\n","            touch_idx = np.where((high[op_idx1:op_idx2] >= tp1 - tp_gap * config.tr_set.expire_k1) | \\\n","                                  (low[op_idx1:op_idx2] <= tp0 + tp_gap * config.tr_set.expire_k1),\n","                                  idx_range, np.nan)\n","            if np.sum(~np.isnan(touch_idx)) > 0:                                  \n","            # if high[op_idx1:op_idx2].max() >= tp1 - tp_gap * config.tr_set.expire_k1 or \\\n","            # low[op_idx1:op_idx2].min() <= tp0 + tp_gap * config.tr_set.expire_k1:\n","                expire = 1\n","\n","    return expire, np.nanmin(touch_idx)\n","\n","\n","def expiry_p2(res_df, config, op_idx, e_j, wave1, wave2, np_datas, open_side):\n","    high, low = np_datas\n","    selection_id = config.selection_id\n","    expire = 0\n","\n","    if config.tr_set.expire_tick != \"None\":\n","        if e_j - op_idx >= config.tr_set.expire_tick:\n","            expire = 1\n","\n","    if config.tr_set.expire_k2 != \"None\":\n","        if open_side == OrderSide.SELL:\n","            if low[e_j] <= wave1 + wave2 * config.tr_set.expire_k2:\n","                expire = 1\n","        else:\n","            if high[e_j] >= wave1 - wave2 * config.tr_set.expire_k2:\n","                expire = 1\n","\n","    return expire\n","\n","\n","# def ep_loc_point2_v2(res_df, config, i, out_j, side=OrderSide.SELL):\n","#     allow_ep_in = 1\n","#     if config.selection_id in ['v5_2']:\n","#         if side == OrderSide.SELL:\n","#             dc_upper_T = res_df['dc_upper_T'].to_numpy()\n","#             dc_upper_15T = res_df['dc_upper_15T'].to_numpy()\n","#             allow_ep_in *= (dc_upper_T[i - 1] <= dc_upper_15T[i]) & \\\n","#                            (dc_upper_15T[i - 1] != dc_upper_15T[i])\n","#         else:\n","#             dc_lower_T = res_df['dc_lower_T'].to_numpy()\n","#             dc_lower_15T = res_df['dc_lower_15T'].to_numpy()\n","#             allow_ep_in *= (dc_lower_T[i - 1] >= dc_lower_15T[i]) & \\\n","#                            (dc_lower_15T[i - 1] != dc_lower_15T[i])\n","\n","#     if config.selection_id in ['v3_4']:\n","#         wick_score_list = literal_eval(config.ep_set.point2.wick_score_list)\n","#         wick_scores = [res_df['wick_score_{}'.format(s_itv)].to_numpy() for s_itv in literal_eval(config.ep_set.point2.score_itv_list)]\n","#         close = res_df['close'].to_numpy()\n","#         if side == OrderSide.SELL:\n","#             sup_T = res_df['sup_T'].to_numpy()\n","#             allow_ep_in *= close[i] < sup_T[i - 1]\n","#             if len(wick_score_list) != 0:\n","#                 allow_ep_in *= wick_scores[0][i] < -wick_score_list[0]\n","#         else:\n","#             resi_T = res_df['resi_T'].to_numpy()\n","#             allow_ep_in *= close[i] > resi_T[i - 1]\n","#             if len(wick_score_list) != 0:\n","#                 allow_ep_in *= wick_scores[0][i] > wick_score_list[0]\n","\n","#     if allow_ep_in:\n","#         out_j = i\n","#     return allow_ep_in, out_j\n","\n","\n","# vectorized calc.\n","# multi-stem 에 따라 dynamic vars.가 입력되기 때문에 class 내부 vars. 로 종속시키지 않음\n","def ep_loc_p1_v3(res_df, config, np_timeidx, show_detail=True, ep_loc_side=OrderSide.SELL):\n","    # ------- param init ------- #\n","    selection_id = config.selection_id\n","    c_i = config.trader_set.complete_index\n","    len_df = len(res_df)\n","    mr_res = np.ones(len_df)\n","    zone_arr = np.full(len_df, 'n')\n","\n","    # ------ process 한번에 처리해서 param_check 만 ver. 별로 하면 될 것 ------ #\n","    #     => public_indi() 가 될 것\n","    #     1. 사용한 param 정보와 matching 된 data 병렬로 나열 logging 될 것\n","    tp_fee, out_fee = calc_tp_out_fee_v2(config)\n","\n","    # ============ tr_thresh ============ #\n","    if config.loc_set.point1.short_tr_thresh != \"None\":\n","        if ep_loc_side == OrderSide.SELL:\n","            short_tr_ = res_df['short_tr_{}'.format(selection_id)].to_numpy()\n","            mr_res *= short_tr_ >= config.loc_set.point1.short_tr_thresh\n","            # mr_res *= short_tr_ <= config.loc_set.point1.short_tr_thresh + 0.1\n","            if show_detail:\n","                sys_log.warning(\n","                    \"short_tr_ >= short_tr_thresh : {:.5f} {:.5f} ({})\".format(short_tr_[c_i], config.loc_set.point1.short_tr_thresh, mr_res[c_i]))\n","        else:\n","            long_tr_ = res_df['long_tr_{}'.format(selection_id)].to_numpy()\n","            mr_res *= long_tr_ >= config.loc_set.point1.long_tr_thresh\n","            # mr_res *= long_tr_ <= config.loc_set.point1.long_tr_thresh + 0.1\n","            if show_detail:\n","                sys_log.warning(\n","                    \"long_tr_ >= long_tr_thresh : {:.5f} {:.5f} ({})\".format(long_tr_[c_i], config.loc_set.point1.long_tr_thresh, mr_res[c_i]))\n","\n","    # ============ spread - independent to tr_set ============ #  --> Todo, 사용 안하고 싶은 wave_point1\n","    if config.loc_set.point1.short_spread != \"None\":\n","        if selection_id in ['v3']:\n","            if ep_loc_side == OrderSide.SELL:\n","                bb_base_5T = res_df['bb_base_5T'].to_numpy()  # to_numpy() 는 ep_loc 에서 진행됨\n","                bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","                short_spread = (bb_base_5T - bb_lower_5T - tp_fee * bb_base_5T) / (bb_base_5T - bb_lower_5T + out_fee * bb_base_5T)\n","                mr_res *= short_spread >= config.loc_set.point1.short_spread\n","                if show_detail:\n","                    sys_log.warning(\n","                        \"short_spread >= config.loc_set.point1.short_spread : {:.5f} {:.5f} ({})\".format(short_spread[c_i], config.loc_set.point1.short_spread, mr_res[c_i]))\n","            else:\n","                bb_upper_5T = res_df['bb_upper_5T'].to_numpy()\n","                dc_lower_5T = res_df['dc_lower_5T'].to_numpy()\n","                # mr_res *= (bb_base_5T - dc_lower_5T - tp_fee * bb_upper_5T) / (bb_base_5T - dc_lower_5T + out_fee * bb_base_5T) >= config.loc_set.point1.long_spread\n","                long_spread = (bb_upper_5T - dc_lower_5T - tp_fee * bb_upper_5T) / (bb_upper_5T - dc_lower_5T + out_fee * bb_upper_5T)\n","                mr_res *= long_spread >= config.loc_set.point1.long_spread\n","                if show_detail:\n","                    sys_log.warning(\n","                        \"long_spread >= config.loc_set.point1.long_spread : {:.5f} {:.5f} ({})\".format(long_spread[c_i], config.loc_set.point1.long_spread, mr_res[c_i]))                  \n","\n","    # ============ point1 ratios ============ #\n","    # ------ wave_range_ratio ------ #\n","    if config.loc_set.point1.cu_wrr_21 != \"None\":   # for excessive range rejection         \n","      wave_itv1 = config.tr_set.wave_itv1\n","      wave_period1 = config.tr_set.wave_period1\n","      co_wrr_21_ = res_df['co_wrr_21_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      cu_wrr_21_ = res_df['cu_wrr_21_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= cu_wrr_21_ <= config.loc_set.point1.cu_wrr_21\n","        mr_res *= cu_wrr_21_ >= config.loc_set.point1.cu_wrr_21 - 0.2\n","        if show_detail:\n","            sys_log.warning(\"cu_wrr_21_ <= config.loc_set.point1.cu_wrr_21 : {:.5f} {:.5f} ({})\".format(cu_wrr_21_[c_i], config.loc_set.point1.cu_wrr_21, mr_res[c_i]))\n","      else:\n","        mr_res *= co_wrr_21_ <= config.loc_set.point1.co_wrr_21\n","        mr_res *= co_wrr_21_ >= config.loc_set.point1.co_wrr_21 - 0.2\n","        if show_detail:\n","            sys_log.warning(\"co_wrr_21_ <= config.loc_set.point1.co_wrr_21 : {:.5f} {:.5f} ({})\".format(co_wrr_21_[c_i], config.loc_set.point1.co_wrr_21, mr_res[c_i]))\n","\n","    if config.loc_set.point1.wrr_32 != \"None\":            \n","      wave_itv1 = config.tr_set.wave_itv1\n","      wave_period1 = config.tr_set.wave_period1\n","      co_wrr_32_ = res_df['co_wrr_32_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      cu_wrr_32_ = res_df['cu_wrr_32_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= cu_wrr_32_ <= config.loc_set.point1.wrr_32  # + 0.1  # 0.1 0.05\n","        # mr_res *= cu_wrr_32_ >= config.loc_set.point1.wrr_32\n","        if show_detail:\n","            sys_log.warning(\"cu_wrr_32_ <= config.loc_set.point1.wrr_32 : {:.5f} {:.5f} ({})\".format(cu_wrr_32_[c_i], config.loc_set.point1.wrr_32, mr_res[c_i]))\n","      else:\n","        mr_res *= co_wrr_32_ <= config.loc_set.point1.wrr_32  # + 0.1  # 0.1 0.05\n","        # mr_res *= co_wrr_32_ >= config.loc_set.point1.wrr_32\n","        if show_detail:\n","            sys_log.warning(\"co_wrr_32_ <= config.loc_set.point1.wrr_32 : {:.5f} {:.5f} ({})\".format(co_wrr_32_[c_i], config.loc_set.point1.wrr_32, mr_res[c_i]))\n","\n","    # ------ enough_space - Todo, future_data ------ #\n","    if config.loc_set.point1.co_es != \"None\":      \n","      itv, period1 = config.tr_set.p1_itv1, config.tr_set.p1_period1 \n","      b1_cu_es_ = res_df['b1_cu_es_{}{}'.format(itv, period1)].to_numpy()\n","      b1_co_es_ = res_df['b1_co_es_{}{}'.format(itv, period1)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= b1_co_es_ >= config.loc_set.point1.co_es\n","        mr_res *= b1_co_es_ <= config.loc_set.point1.co_es + 2\n","        if show_detail:\n","            sys_log.warning(\"b1_co_es_ >= config.loc_set.point1.co_es : {:.5f} {:.5f} ({})\".format(b1_co_es_[c_i], config.loc_set.point1.co_es, mr_res[c_i]))\n","      else:\n","        mr_res *= b1_cu_es_ >= config.loc_set.point1.cu_es\n","        mr_res *= b1_cu_es_ <= config.loc_set.point1.cu_es + 1\n","        if show_detail:\n","            sys_log.warning(\"b1_cu_es_ >= config.loc_set.point1.cu_es : {:.5f} {:.5f} ({})\".format(b1_cu_es_[c_i], config.loc_set.point1.cu_es, mr_res[c_i]))\n","\n","    # ------------ wick_ratio - Todo, future_data ------------ #\n","    # if config.loc_set.point1.short_wick_ratio != \"None\":\n","    #   b1_upper_wick_ratio_ = res_df['b1_upper_wick_ratio_{}'.format(config.loc_set.point1.wick_itv)].to_numpy()\n","    #   b1_lower_wick_ratio_ = res_df['b1_lower_wick_ratio_{}'.format(config.loc_set.point1.wick_itv)].to_numpy()      \n","    #   if ep_loc_side == OrderSide.SELL:\n","    #       # mr_res *= b1_upper_wick_ratio_ >= config.loc_set.point1.short_wick_ratio\n","    #       mr_res *= b1_lower_wick_ratio_ >= config.loc_set.point1.short_wick_ratio\n","    #       if show_detail:\n","    #           sys_log.warning(\"b1_lower_wick_ratio_ >= config.loc_set.point1.short_wick_ratio : {:.5f} {:.5f} ({})\".format(b1_lower_wick_ratio_[c_i], config.loc_set.point1.short_wick_ratio, mr_res[c_i]))\n","    #   else:\n","    #       # mr_res *= b1_lower_wick_ratio_ >= config.loc_set.point1.long_wick_ratio\n","    #       mr_res *= b1_upper_wick_ratio_ >= config.loc_set.point1.long_wick_ratio\n","    #       if show_detail:\n","    #           sys_log.warning(\"b1_upper_wick_ratio_ >= config.loc_set.point1.long_wick_ratio : {:.5f} {:.5f} ({})\".format(b1_upper_wick_ratio_[c_i], config.loc_set.point1.long_wick_ratio, mr_res[c_i]))\n","\n","    # ------ candle_range_ratio - Todo, future_data ------ #\n","    # if config.loc_set.point1.crr != \"None\":   \n","    #   tf_entry = to_itvnum(config.loc_set.point1.tf_entry)\n","    #   b1_crr_ = res_df['crr_{}'.format(config.loc_set.point1.tf_entry)].shift(tf_entry).to_numpy()\n","    #   mr_res *= b1_crr_ >= config.loc_set.point1.crr\n","    #   if show_detail:\n","    #       sys_log.warning(\"b1_crr_ >= config.loc_set.point1.crr : {:.5f} {:.5f} ({})\".format(b1_crr_[c_i], config.loc_set.point1.crr, mr_res[c_i]))\n","    \n","    # ------ dc_over_body_ratio ------ #\n","    if config.loc_set.point1.dbr != \"None\":\n","      b1_lwdbr = res_df['b1_lwdbr'].to_numpy()\n","      b1_updbr = res_df['b1_updbr'].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:        \n","        mr_res *= b1_lwdbr >= config.loc_set.point1.dbr\n","        if show_detail:\n","            sys_log.warning(\n","                \"b1_lwdbr >= config.loc_set.point1.dbr : {:.5f} {:.5f} ({})\".format(b1_lwdbr[c_i], config.loc_set.point1.dbr, mr_res[c_i]))\n","      else:\n","        mr_res *= b1_updbr >= config.loc_set.point1.dbr\n","        if show_detail:\n","            sys_log.warning(\n","                \"b1_updbr >= config.loc_set.point1.dbr : {:.5f} {:.5f} ({})\".format(b1_updbr[c_i], config.loc_set.point1.dbr, mr_res[c_i]))\n","            \n","    if config.loc_set.point1.dbr2 != \"None\":\n","      b1_lwdbr = res_df['b1_lwdbr'].to_numpy()\n","      b1_updbr = res_df['b1_updbr'].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:    \n","        mr_res *= b1_updbr >= config.loc_set.point1.dbr2\n","        if show_detail:\n","            sys_log.warning(\n","                \"b1_updbr >= config.loc_set.point1.dbr2 : {:.5f} {:.5f} ({})\".format(b1_updbr[c_i], config.loc_set.point1.dbr2, mr_res[c_i]))\n","      else:\n","        mr_res *= b1_lwdbr >= config.loc_set.point1.dbr2\n","        if show_detail:\n","            sys_log.warning(\n","                \"b1_lwdbr >= config.loc_set.point1.dbr2 : {:.5f} {:.5f} ({})\".format(b1_lwdbr[c_i], config.loc_set.point1.dbr2, mr_res[c_i]))\n","\n","    # ------ wick_body_ratio ------ #\n","    if config.loc_set.point1.wbr != \"None\":\n","        wave_body_ratio = res_df['wave_body_ratio'].to_numpy()\n","        mr_res *= wave_body_ratio >= config.loc_set.point1.wbr\n","        if show_detail:\n","            sys_log.warning(\n","                \"wave_body_ratio >= config.loc_set.point1.wbr : {:.5f} {:.5f} ({})\".format(wave_body_ratio[c_i], config.loc_set.point1.wbr, mr_res[c_i]))\n","            \n","    # ------ body_rel_ratio ------ #\n","    if config.loc_set.point1.brr != \"None\":\n","        body_rel_ratio_ = res_df['body_rel_ratio_{}'.format(config.loc_set.point1.tf_entry)].to_numpy()\n","        mr_res *= body_rel_ratio_ <= config.loc_set.point1.brr\n","        if show_detail:\n","            sys_log.warning(\n","                \"body_rel_ratio_ <= config.loc_set.point1.brr : {:.5f} {:.5f} ({})\".format(body_rel_ratio_[c_i], config.loc_set.point1.brr, mr_res[c_i]))\n","\n","    # ------ pumping_ratio ------ #\n","    if config.loc_set.point1.ppr != \"None\":\n","      if ep_loc_side == OrderSide.SELL:\n","        short_ppr_ = res_df['short_ppr_{}'.format(selection_id)].to_numpy()\n","        mr_res *= short_ppr_ >= config.loc_set.point1.ppr\n","        if show_detail:\n","            sys_log.warning(\"short_ppr_ >= config.loc_set.point1.ppr : {:.5f} {:.5f} ({})\".format(short_ppr_[c_i], config.loc_set.point1.ppr, mr_res[c_i]))\n","      else:\n","        long_ppr_ = res_df['long_ppr_{}'.format(selection_id)].to_numpy()\n","        mr_res *= long_ppr_ >= config.loc_set.point1.ppr\n","        if show_detail:\n","            sys_log.warning(\"long_ppr_ >= config.loc_set.point1.ppr : {:.5f} {:.5f} ({})\".format(long_ppr_[c_i], config.loc_set.point1.ppr, mr_res[c_i]))\n"," \n","    # ============ rtc_zone  ============ #  --> Todo, 사용 안하고 싶은 wave_dur., 추후 zone 으로 옮길 것\n","    # ------ dtk ------ #\n","    if config.loc_set.zone.dt_k != \"None\":\n","        # ------ dc_v2 ------ #\n","        dc_lower_v2 = res_df['dc_lower_v2'.format(selection_id)].to_numpy()\n","        short_dtk_1_ = res_df['short_dtk_1_{}'.format(selection_id)].to_numpy() - \\\n","                       res_df['short_dtk_gap_{}'.format(selection_id)].to_numpy() * config.loc_set.zone.dt_k\n","        dc_upper_v2 = res_df['dc_upper_v2'.format(selection_id)].to_numpy()\n","        long_dtk_1_ = res_df['long_dtk_1_{}'.format(selection_id)].to_numpy() + \\\n","                      res_df['long_dtk_gap_{}'.format(selection_id)].to_numpy() * config.loc_set.zone.dt_k\n","        if ep_loc_side == OrderSide.SELL:\n","            mr_res *= dc_lower_v2 >= short_dtk_1_\n","            if show_detail:\n","                sys_log.warning(\n","                    \"dc_lower_v2 >= short_dtk_1_ : {:.5f} {:.5f} ({})\".format(dc_lower_v2[c_i], short_dtk_1_[c_i], mr_res[c_i]))\n","        else:\n","            mr_res *= dc_upper_v2 <= long_dtk_1_\n","            if show_detail:\n","                sys_log.warning(\n","                    \"dc_upper_v2 <= long_dtk_1_ : {:.5f} {:.5f} ({})\".format(dc_upper_v2[c_i], long_dtk_1_[c_i], mr_res[c_i]))\n","                \n","    # ============ zone ============ #\n","    # ------ config var. 이 등록되지 않은 dur. 은 selection_id 으로 조건문을 나눔 (lvrg_set 과 동일) ------ #\n","    # if config.loc_set.zone.use_zone:\n","\n","\n","    # -------------- zoned tr_set - post_work -------------- #\n","    if config.tr_set.c_ep_gap != \"None\" or config.tr_set.t_out_gap != \"None\":\n","        #       by zone_dtk       #\n","        #         c_zone        #\n","        zone_dc_upper_v2_ = res_df['zone_dc_upper_v2'.format(selection_id)].to_numpy()\n","        long_dtk_plot_1 = res_df['long_dtk_plot_1'].to_numpy() + res_df['long_dtk_plot_gap'].to_numpy() * config.loc_set.zone.zone_dt_k\n","        zone_dc_lower_v2_ = res_df['zone_dc_lower_v2'.format(selection_id)].to_numpy()\n","        short_dtk_plot_1 = res_df['short_dtk_plot_1'].to_numpy() - res_df['short_dtk_plot_gap'].to_numpy() * config.loc_set.zone.zone_dt_k\n","        if ep_loc_side == OrderSide.SELL:\n","            zone_res = zone_dc_upper_v2_ > long_dtk_plot_1  # mr_res 와는 별개임\n","            pos = 'short'\n","        else:\n","            zone_res = zone_dc_lower_v2_ < short_dtk_plot_1\n","            pos = 'long'\n","\n","        # static 여부에 따른 vectorized adj. - dynamic 은 vectorize 불가\n","        if config.ep_set.static_ep and config.tr_set.c_ep_gap != \"None\":\n","            res_df['{}_ep_{}'.format(pos, selection_id)][zone_res] = res_df['{}_ep2_{}'.format(pos, selection_id)][zone_res]\n","        if config.out_set.static_out and config.tr_set.t_out_gap != \"None\":\n","            res_df['{}_out_{}'.format(pos, selection_id)][~zone_res] = res_df['{}_out2_{}'.format(pos, selection_id)][\n","                ~zone_res]  # t_zone 에 대한 out2 setting\n","        zone_arr = np.where(zone_res == 1, 'c', 't')\n","\n","    return mr_res, zone_arr  # mr_res 의 True idx 가 open signal\n","\n","\n","def ep_loc_p2_v3(res_df, config, np_timeidx, show_detail=True, ep_loc_side=OrderSide.SELL):\n","    # ------- param init ------- #\n","    selection_id = config.selection_id\n","    c_i = config.trader_set.complete_index\n","    len_df = len(res_df)\n","    mr_res = np.ones(len_df)\n","    zone_arr = np.full(len_df, 'n')\n","\n","    # ------ process 한번에 처리해서 param_check 만 ver. 별로 하면 될 것 ------ #\n","    #     => public_indi() 가 될 것\n","    #     1. 사용한 param 정보와 matching 된 data 병렬로 나열 logging 될 것\n","    # tp_fee, out_fee = calc_tp_out_fee_v2(config)\n","\n","    # ============ point1 ratios ============ #\n","    # ------ wave_range_ratio ------ #\n","    # if config.loc_set.point2.cu_wrr_21 != \"None\":   # for excessive range rejection         \n","    #   wave_itv1 = config.tr_set.wave_itv1\n","    #   wave_period1 = config.tr_set.wave_period1\n","    #   co_wrr_21_ = res_df['co_wrr_21_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    #   cu_wrr_21_ = res_df['cu_wrr_21_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    #   if ep_loc_side == OrderSide.SELL:\n","    #     mr_res *= cu_wrr_21_ <= config.loc_set.point2.cu_wrr_21\n","    #     mr_res *= cu_wrr_21_ >= config.loc_set.point2.cu_wrr_21 - 0.2\n","    #     if show_detail:\n","    #         sys_log.warning(\"cu_wrr_21_ <= config.loc_set.point2.cu_wrr_21 : {:.5f} {:.5f} ({})\".format(cu_wrr_21_[c_i], config.loc_set.point2.cu_wrr_21, mr_res[c_i]))\n","    #   else:\n","    #     mr_res *= co_wrr_21_ <= config.loc_set.point2.co_wrr_21\n","    #     mr_res *= co_wrr_21_ >= config.loc_set.point2.co_wrr_21 - 0.2\n","    #     if show_detail:\n","    #         sys_log.warning(\"co_wrr_21_ <= config.loc_set.point2.co_wrr_21 : {:.5f} {:.5f} ({})\".format(co_wrr_21_[c_i], config.loc_set.point2.co_wrr_21, mr_res[c_i]))\n","\n","    if config.loc_set.point2.wrr_32 != \"None\":            \n","      wave_itv2 = config.tr_set.wave_itv2\n","      wave_period2 = config.tr_set.wave_period2\n","      co_wrr_32_ = res_df['co_wrr_32_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","      cu_wrr_32_ = res_df['cu_wrr_32_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= cu_wrr_32_ <= config.loc_set.point2.wrr_32  #  + 0.1  # 0.1 0.05\n","        # mr_res *= cu_wrr_32_ >= config.loc_set.point2.wrr_32\n","        if show_detail:\n","            sys_log.warning(\"cu_wrr_32_ <= config.loc_set.point2.wrr_32 : {:.5f} {:.5f} ({})\".format(cu_wrr_32_[c_i], config.loc_set.point2.wrr_32, mr_res[c_i]))\n","      else:\n","        mr_res *= co_wrr_32_ <= config.loc_set.point2.wrr_32  #  + 0.1  # 0.1 0.05\n","        # mr_res *= co_wrr_32_ >= config.loc_set.point2.wrr_32\n","        if show_detail:\n","            sys_log.warning(\"co_wrr_32_ <= config.loc_set.point2.wrr_32 : {:.5f} {:.5f} ({})\".format(co_wrr_32_[c_i], config.loc_set.point2.wrr_32, mr_res[c_i]))\n","\n","\n","    return mr_res, zone_arr  # mr_res 의 True idx 가 open signal"]},{"cell_type":"markdown","source":["#### legacy"],"metadata":{"id":"EQ63Jwpvr7qA"}},{"cell_type":"code","source":["      \n","    # ------ hl_loc_pct ------ #\n","    if config.loc_set.zone.hl_loc_pct != \"None\":      \n","      wave_high_loc_pct_ = res_df['wave_high_loc_pct_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      wave_low_loc_pct_ = res_df['wave_low_loc_pct_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= wave_high_loc_pct_ >= config.loc_set.zone.hl_loc_pct\n","        mr_res *= wave_high_loc_pct_ <= config.loc_set.zone.hl_loc_pct + 0.5\n","        if show_detail:\n","            sys_log.warning(\"wave_high_loc_pct_ >= config.loc_set.zone.hl_loc_pct : {:.5f} {:.5f} ({})\".format(wave_high_loc_pct_[c_i], config.loc_set.zone.hl_loc_pct, mr_res[c_i]))\n","      else:\n","        mr_res *= wave_low_loc_pct_ >= config.loc_set.zone.hl_loc_pct\n","        mr_res *= wave_low_loc_pct_ <= config.loc_set.zone.hl_loc_pct + 0.5\n","        if show_detail:\n","            sys_log.warning(\"wave_low_loc_pct_ >= config.loc_set.zone.hl_loc_pct : {:.5f} {:.5f} ({})\".format(wave_low_loc_pct_[c_i], config.loc_set.zone.hl_loc_pct, mr_res[c_i]))\n","\n","            \n","        # ------------------ wave_biaser (sr_confirmer) ------------------ #\n","        if selection_id in ['3_9']:     \n","          itv, period1, period2 = config.tr_set.p1_itv1, config.tr_set.p1_period1, config.tr_set.p1_period2          \n","\n","          if ep_loc_side == OrderSide.SELL:\n","            short_wave_high_ = res_df['short_wave_high_{}{}{}'.format(itv, period1, period2)]\n","            bb_lower_5T_amax = get_line(res_df['short_wave_high_idx_{}{}{}'.format(itv, period1, period2)].to_numpy(), res_df['bb_lower_5T'].to_numpy())\n","            mr_res *= short_wave_high_ <= bb_lower_5T_amax\n","            if show_detail:\n","                sys_log.warning(\"short_wave_high_ <= bb_lower_5T_amax : {:.5f} {:.5f} ({})\".format(short_wave_high_[c_i], bb_lower_5T_amax[c_i], mr_res[c_i]))\n","          else:\n","            long_wave_low_ = res_df['long_wave_low_{}{}{}'.format(itv, period1, period2)]\n","            bb_upper_5T_amax = get_line(res_df['long_wave_low_idx_{}{}{}'.format(itv, period1, period2)].to_numpy(), res_df['bb_upper_5T'].to_numpy())\n","            mr_res *= long_wave_low_ >= bb_upper_5T_amax\n","            if show_detail:\n","                sys_log.warning(\"long_wave_low_ >= bb_upper_5T_amax : {:.5f} {:.5f} ({})\".format(long_wave_low_[c_i], bb_upper_5T_amax[c_i], mr_res[c_i]))\n","\n","\n","        if selection_id in ['4_3', '3_5', '3_51']:\n","            dc_base_T20 = res_df['dc_base_T20'].to_numpy()\n","            dc_base_3T20 = res_df['dc_base_3T20'].to_numpy()\n","            # b1_dc_base_3T20 = res_df['dc_base_3T20'].shift(3).to_numpy()\n","            # dc_base_5T = res_df['dc_base_5T'].to_numpy()\n","            # dc_base_15T = res_df['dc_base_15T'].to_numpy()\n","            # dc_base_30T = res_df['dc_base_30T'].to_numpy()\n","            dc_base_H20 = res_df['dc_base_H20'].to_numpy()\n","            # dc_base_4H = res_df['dc_base_4H'].to_numpy()\n","            # dc_base_D = res_df['dc_base_D'].to_numpy()\n","\n","            itv, period1, period2 = config.tr_set.p1_itv1, config.tr_set.p1_period1, config.tr_set.p1_period2\n","            if ep_loc_side == OrderSide.SELL:\n","                # ------ short_base_ <= dc_base_3T20 ------ #\n","                short_base_ = res_df['short_base_{}{}{}'.format(itv, period1, period2)].to_numpy()\n","                mr_res *= short_base_ <= dc_base_3T20\n","                if show_detail:\n","                    sys_log.warning(\"short_base_ <= dc_base_3T20 : {:.5f} {:.5f} ({})\".format(short_base_[c_i], dc_base_3T20[c_i], mr_res[c_i]))\n","\n","                # mr_res *= short_base_ <= dc_base_T20\n","                # if show_detail:\n","                #     sys_log.warning(\"short_base_ <= dc_base_T20 : {:.5f} {:.5f} ({})\".format(short_base_[c_i], dc_base_T20[c_i], mr_res[c_i]))\n","\n","                # ------ reject csd ------ #\n","                # dc_upper_ = res_df['dc_upper_{}{}'.format(itv, period1)].to_numpy()\n","                # mr_res *= dc_upper_ <= dc_base_3T\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_upper_ <= dc_base_3T20 : {:.5f} {:.5f} ({})\".format(dc_upper_[c_i], dc_base_3T[c_i], mr_res[c_i]))\n","\n","                # Todo, 부호 조심\n","                # dc_upper2_ = res_df['dc_upper_{}{}'.format(itv, period2)].to_numpy()\n","                # mr_res *= dc_upper2_ >= dc_base_H\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_upper2_ >= dc_base_H20 : {:.5f} {:.5f} ({})\".format(dc_upper2_[c_i], dc_base_H[c_i], mr_res[c_i]))  \n","\n","                # long 과 동일한 dur.\n","                dc_lower2_ = res_df['dc_lower_{}{}'.format(itv, period2)].to_numpy()\n","                mr_res *= dc_lower2_ >= dc_base_H20\n","                if show_detail:\n","                    sys_log.warning(\"dc_lower2_ >= dc_base_H20 : {:.5f} {:.5f} ({})\".format(dc_lower2_[c_i], dc_base_H20[c_i], mr_res[c_i]))  \n","\n","                # ------ consecutive base ascender ------ #\n","                # ------ 1. roll_min ------ #\n","                dc_base_3T20_rollmin = res_df['dc_base_3T20'].rolling(config.loc_set.zone.base_roll_period).min().to_numpy()\n","                mr_res *= dc_base_3T20_rollmin == dc_base_3T20\n","                if show_detail:\n","                    sys_log.warning(\n","                        \"dc_base_3T20_rollmin == dc_base_3T2020 : {:.5f} {:.5f} ({})\".format(dc_base_3T20_rollmin[c_i], dc_base_3T20[c_i], mr_res[c_i]))\n","            else:\n","                # ------ long_base >= dc_base_3T20 ------ #\n","                long_base_ = res_df['long_base_{}{}{}'.format(itv, period1, period2)].to_numpy()\n","                mr_res *= long_base_ >= dc_base_3T20\n","                if show_detail:\n","                    sys_log.warning(\"long_base_ >= dc_base_3T20 : {:.5f} {:.5f} ({})\".format(long_base_[c_i], dc_base_3T20[c_i], mr_res[c_i]))\n","\n","                # mr_res *= long_base_ >= dc_base_T20\n","                # if show_detail:\n","                #     sys_log.warning(\"long_base_ >= dc_base_T20 : {:.5f} {:.5f} ({})\".format(long_base_[c_i], dc_base_T20[c_i], mr_res[c_i]))\n","\n","                # ------ reject csd ------ #\n","                # dc_lower_ = res_df['dc_lower_{}{}'.format(itv, period1)].to_numpy()\n","                # mr_res *= dc_lower_ >= dc_base_3T\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_lower_ >= dc_base_3T20 : {:.5f} {:.5f} ({})\".format(dc_lower_[c_i], dc_base_3T[c_i], mr_res[c_i]))\n","\n","                dc_lower2_ = res_df['dc_lower_{}{}'.format(itv, period2)].to_numpy()\n","                mr_res *= dc_lower2_ >= dc_base_H20\n","                if show_detail:\n","                    sys_log.warning(\"dc_lower2_ >= dc_base_H20 : {:.5f} {:.5f} ({})\".format(dc_lower2_[c_i], dc_base_H20[c_i], mr_res[c_i]))\n","\n","                # bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","                # mr_res *= dc_lower2_ >= bb_lower_5T\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_lower2_ >= bb_lower_5T : {:.5f} {:.5f} ({})\".format(dc_lower2_[c_i], bb_lower_5T[c_i], mr_res[c_i]))\n","\n","                # ------ alignment ------ #\n","                # mr_res *= (dc_base_3T20 > dc_base_5T) & (dc_base_5T > dc_base_15T) & (dc_base_15T > dc_base_30T)\n","\n","                # ------ consecutive base ascender ------ #\n","                # ------ 1. roll_max ------ #\n","                dc_base_3T20_rollmax = res_df['dc_base_3T20'].rolling(config.loc_set.zone.base_roll_period).max().to_numpy()\n","                mr_res *= dc_base_3T20_rollmax == dc_base_3T20\n","                if show_detail:\n","                    sys_log.warning(\n","                        \"dc_base_3T20_rollmax == dc_base_3T2020 : {:.5f} {:.5f} ({})\".format(dc_base_3T20_rollmax[c_i], dc_base_3T20[c_i], mr_res[c_i]))\n","\n","                # ------ 2. roll_max_v2 - ascender  ------ #\n","                # dc_base_3T_ascend = (res_df['dc_base_3T'] >= res_df['dc_base_3T'].shift(3)).rolling(config.loc_set.zone.base_roll_period).sum().to_numpy()\n","                # # mr_res *= dc_base_3T_ascend == config.loc_set.zone.base_roll_period\n","                # mr_res *= dc_base_3T_ascend != config.loc_set.zone.base_roll_period\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_base_3T_ascend == config.loc_set.zone.base_roll_period : {:.5f} {:.5f} ({})\".format(dc_base_3T_ascend[c_i], config.loc_set.zone.base_roll_period, mr_res[c_i]))\n","\n","\n","    if config.loc_set.point.wrr != \"None\":            \n","      wave_itv = 'T'\n","      wave_period = config.tr_set.wave_period\n","      co_wrr_ = res_df['co_wrr_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","      cu_wrr_ = res_df['cu_wrr_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= co_wrr_ <= config.loc_set.point.wrr\n","        if show_detail:\n","            sys_log.warning(\"co_wrr_ <= config.loc_set.point.wrr : {:.5f} {:.5f} ({})\".format(co_wrr_[c_i], config.loc_set.point.wrr, mr_res[c_i]))\n","      else:\n","        mr_res *= cu_wrr_ <= config.loc_set.point.wrr\n","        if show_detail:\n","            sys_log.warning(\"cu_wrr_ <= config.loc_set.point.wrr : {:.5f} {:.5f} ({})\".format(cu_wrr_[c_i], config.loc_set.point.wrr, mr_res[c_i]))\n","            \n","      # if ep_loc_side == OrderSide.SELL:\n","      #   mr_res *= cu_es_ >= config.loc_set.point.cu_es\n","      #   mr_res *= cu_es_ <= config.loc_set.point.cu_es + 2\n","      #   if show_detail:\n","      #       sys_log.warning(\"cu_es_ >= config.loc_set.point.cu_es : {:.5f} {:.5f} ({})\".format(cu_es_[c_i], config.loc_set.point.cu_es, mr_res[c_i]))\n","      # else:\n","      #   mr_res *= co_es_ >= config.loc_set.point.co_es\n","      #   mr_res *= co_es_ <= config.loc_set.point.co_es + 1\n","      #   if show_detail:\n","      #       sys_log.warning(\"co_es_ >= config.loc_set.point.co_es : {:.5f} {:.5f} ({})\".format(co_es_[c_i], config.loc_set.point.co_es, mr_res[c_i]))\n","\n","\n","      if ep_loc_side == OrderSide.SELL:\n","          mr_res *= lower_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          # mr_res *= upper_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          if show_detail:\n","              sys_log.warning(\"upper_wick_ratio_ >= config.loc_set.point.wick_ratio : {:.5f} {:.5f} ({})\".format(upper_wick_ratio_[c_i], config.loc_set.point.wick_ratio, mr_res[c_i]))\n","      else:\n","          mr_res *= upper_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          mr_res *= upper_wick_ratio_ <= config.loc_set.point.wick_ratio + 0.1\n","          # mr_res *= lower_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          if show_detail:\n","              sys_log.warning(\"lower_wick_ratio_ >= config.loc_set.point.wick_ratio : {:.5f} {:.5f} ({})\".format(lower_wick_ratio_[c_i], config.loc_set.point.wick_ratio, mr_res[c_i]))\n","              \n","      crr_ = res_df['crr_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","      mr_res *= crr_ >= config.loc_set.point.crr\n","     \n","      if show_detail:\n","          sys_log.warning(\"crr_ >= config.loc_set.point.crr : {:.5f} {:.5f} ({})\".format(crr_[c_i], config.loc_set.point.crr, mr_res[c_i]))\n","\n","      b1_upper_wick_ratio_ = res_df['upper_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].shift(itv_num).to_numpy()\n","      b1_lower_wick_ratio_ = res_df['lower_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].shift(itv_num).to_numpy()\n","\n","      if ep_loc_side == OrderSide.SELL:\n","          upper_wick_ratio_ = res_df['upper_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].to_numpy()\n","          mr_res *= upper_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          if show_detail:\n","              sys_log.warning(\"upper_wick_ratio_ >= config.loc_set.point.wick_ratio : {:.5f} {:.5f} ({})\".format(upper_wick_ratio_[c_i], config.loc_set.point.wick_ratio, mr_res[c_i]))\n","      else:\n","          lower_wick_ratio_ = res_df['lower_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].to_numpy()\n","          mr_res *= lower_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          if show_detail:\n","              sys_log.warning(\"lower_wick_ratio_ >= config.loc_set.point.wick_ratio : {:.5f} {:.5f} ({})\".format(lower_wick_ratio_[c_i], config.loc_set.point.wick_ratio, mr_res[c_i]))\n","\n","    if config.loc_set.point.cppr != \"None\":   \n","      tf_entry = to_itvnum(config.loc_set.point.tf_entry)\n","      b1_cppr_ = res_df['b1_cppr_{}'.format(config.loc_set.point.tf_entry)].to_numpy()  # check b1's cppr in ep_loc\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= b1_cppr_ >= config.loc_set.point.cppr\n","        if show_detail:\n","            sys_log.warning(\"b1_cppr_ >= config.loc_set.point.cppr : {:.5f} {:.5f} ({})\".format(b1_cppr_[c_i], config.loc_set.point.cppr, mr_res[c_i]))\n","      else:\n","        mr_res *= b1_cppr_ <= -config.loc_set.point.cppr\n","        if show_detail:\n","            sys_log.warning(\"b1_cppr_ <= -config.loc_set.point.cppr : {:.5f} {:.5f} ({})\".format(b1_cppr_[c_i], config.loc_set.point.cppr, mr_res[c_i]))\n","            \n","    # ------------ candle_score ------------ #\n","    wick_score_list = literal_eval(config.loc_set.point.wick_score_list)\n","    if len(wick_score_list) != 0:\n","        score_itv_list = literal_eval(config.loc_set.point.score_itv_list)\n","        # ------ candle_score_v0 (1m initial tick 기준임) ------ #  Todo - higher timeframe 경우 back_data 사용해야함\n","        for wick_score_, score_itv_ in zip(wick_score_list, score_itv_list):\n","            wick_score = res_df['wick_score_{}'.format(score_itv_)].to_numpy()\n","            if ep_loc_side == OrderSide.SELL:\n","                mr_res *= wick_score <= -wick_score_\n","                if show_detail:\n","                    sys_log.warning(\"wick_score <= -wick_score_ : {:.5f} {:.5f} ({})\".format(wick_score[c_i], -wick_score_, mr_res[c_i]))\n","            else:\n","                mr_res *= wick_score >= wick_score_\n","                if show_detail:\n","                    sys_log.warning(\"wick_score >= wick_score_ : {:.5f} {:.5f} ({})\".format(wick_score[c_i], wick_score_, mr_res[c_i]))\n","            \n","\n","        # ------------------ swing_middle ------------------ #\n","        # ------------ 1. envelope ------------ #\n","\n","        # ------ a. dc ------ #\n","        # ep_loc check 기준 idx 가 entry 기준이라는 걸 명심\n","        if selection_id in ['v3_2']:\n","            hc_itv = '15T'\n","            dc_itv = '15T'\n","            shift_num = [0, to_itvnum(hc_itv)]\n","            div_res = [1, 0]\n","            for itv_num, res in zip(shift_num, div_res):\n","                close_ = res_df['close_{}'.format(hc_itv)].shift(itv_num).to_numpy()  # close_bar timein 사용하는 경우, 특수로 shift(0) 사용가능\n","                if ep_loc_side == OrderSide.SELL:\n","                    dc_lower_ = res_df['dc_lower_%s' % dc_itv].shift(itv_num).to_numpy()\n","                    mr_res *= (close_ < dc_lower_) == res\n","                else:\n","                    dc_upper_ = res_df['dc_upper_%s' % dc_itv].shift(itv_num).to_numpy()\n","                    mr_res *= (close_ > dc_upper_) == res\n","\n","        # ------------ 2. degree ------------ #\n","        # ------ a. norm_body_ratio ------ #\n","        if config.loc_set.zone.abs_ratio != \"None\":\n","            itv = config.loc_set.point.tf_entry\n","            abs_ratio_ = res_df['abs_ratio_{}'.format(itv)].to_numpy()\n","            mr_res *= abs_ratio_ >= config.loc_set.zone.abs_ratio\n","            # mr_res *= abs_ratio_ <= config.loc_set.zone.abs_ratio\n","\n","    # ------------ 2. imbalance_ratio ------------ #\n","    if config.loc_set.zone.ir != \"None\":\n","        itv = config.loc_set.point.tf_entry\n","        itv_num = to_itvnum(itv)\n","        if ep_loc_side == OrderSide.SELL:\n","            short_ir_ = res_df['short_ir_{}'.format(itv)].to_numpy()\n","            # short_ir_ = res_df['short_ir_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","            # mr_res *= short_ir_ >= config.loc_set.zone.ir     # greater\n","            mr_res *= short_ir_ <= config.loc_set.zone.ir  # lesser\n","            if show_detail:\n","                sys_log.warning(\n","                    \"short_ir_ <= config.loc_set.zone.ir : {:.5f} {:.5f} ({})\".format(short_ir_[c_i], config.loc_set.zone.ir, mr_res[c_i]))\n","        else:\n","            long_ir_ = res_df['long_ir_{}'.format(itv)].to_numpy()\n","            # long_ir_ = res_df['long_ir_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","            # mr_res *= long_ir_ >= config.loc_set.zone.ir\n","            mr_res *= long_ir_ <= config.loc_set.zone.ir\n","            if show_detail:\n","                sys_log.warning(\n","                    \"long_ir_ <= config.loc_set.zone.ir : {:.5f} {:.5f} ({})\".format(long_ir_[c_i], config.loc_set.zone.ir, mr_res[c_i]))\n","                \n","        # if selection_id in ['3_6']:\n","        #   itv, period1, period2 = config.loc_set.point.p1_itv0, config.loc_set.point.p1_period1, config.loc_set.point.p1_period2          \n","\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     high_5T = res_df['high_5T'].to_numpy()  # Todo, tf_entry - 1 open 기준이라 future_data 사용 가능\n","        #     short_base_ = res_df['short_base_{}{}{}'.format(itv, period1, period2)]\n","        #     mr_res *= high_5T < short_base_\n","        #     if show_detail:\n","        #         sys_log.warning(\n","        #             \"high_5T < short_base_ : {:.5f} {:.5f} ({})\".format(high_5T[c_i], short_base_[c_i], mr_res[c_i]))\n","        #   else:\n","        #     low_5T = res_df['low_5T'].to_numpy()  # Todo, tf_entry - 1 open 기준이라 future_data 사용 가능\n","        #     long_base_ = res_df['long_base_{}{}{}'.format(itv, period1, period2)]\n","        #     mr_res *= low_5T > long_base_\n","        #     if show_detail:\n","        #         sys_log.warning(\n","        #             \"low_5T > long_base_ : {:.5f} {:.5f} ({})\".format(low_5T[c_i], long_base_[c_i], mr_res[c_i]))'\n","        \n","        # ------ dc_base ------ #\n","        # if selection_id in ['4']:  # 'v3_3', 'v3_4',\n","        #   hc_itv = '5T'\n","        #   dc_itv = '5T'\n","        #   itv_num = to_itvnum(hc_itv)\n","        #   close_ = res_df['close_{}'.format(hc_itv)].shift(itv_num).to_numpy()   # 따라서 future_data 사용시, shifting 필요함\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     dc_lower_ = res_df['dc_lower_%s' % dc_itv].shift(itv_num).to_numpy()\n","        #     mr_res *= close_ < dc_lower_\n","        #   else:\n","        #     dc_upper_ = res_df['dc_upper_%s' % dc_itv].shift(itv_num).to_numpy()\n","        #     mr_res *= close_ > dc_upper_\n","\n","        # ------ ema ------ #\n","        # if selection_id in ['v5_2']: # 'v3'\n","        #   ema_5T = res_df['ema_5T'].to_numpy()\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     mr_res *= close < ema_5T\n","        #   else:\n","        #     mr_res *= close > ema_5T\n","        \n","        # ------ b. bb ------ #\n","        # close = res_df['close'].to_numpy()\n","\n","        # if selection_id in ['v3_3']:\n","        #   open = res_df['open'].to_numpy()\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     bb_lower_1m = res_df['bb_lower_1m'].to_numpy()\n","        #     # mr_res *= close <= bb_lower_1m\n","        #     mr_res *= open <= bb_lower_1m\n","        #   else:\n","        #     bb_upper_1m = res_df['bb_upper_1m'].to_numpy()\n","        #     # mr_res *= close >= bb_upper_1m\n","        #     mr_res *= open >= bb_upper_1m\n","\n","        if selection_id in ['4_1']:\n","            if ep_loc_side == OrderSide.SELL:\n","                bb_lower_15T = res_df['bb_lower_15T'].to_numpy()\n","                short_ep_ = res_df['short_ep_{}'.format(selection_id)].to_numpy()\n","                mr_res *= bb_lower_15T >= short_ep_\n","            else:\n","                bb_upper_15T = res_df['bb_upper_15T'].to_numpy()\n","                long_ep_ = res_df['long_ep_{}'.format(selection_id)].to_numpy()\n","                mr_res *= bb_upper_15T <= long_ep_\n","\n","        # if selection_id in ['v5_2']:\n","        #   bb_upper2_ = res_df['bb_upper2_%s' % config.loc_set.zone.bbz_itv].to_numpy()\n","        #   bb_lower2_ = res_df['bb_lower2_%s' % config.loc_set.zone.bbz_itv].to_numpy()\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     mr_res *= bb_upper2_ < close\n","        #   else:\n","        #     mr_res *= bb_lower2_ > close\n","\n","        # degree_list = literal_eval(config.loc_set.zone.degree_list)\n","        # if len(degree_list) != 0:\n","        # # if selection_id in ['v3_3', 'v3_4']:\n","        #   norm_close_15 = res_df['norm_close_15'].to_numpy()   # -> 이거 뭘로 만들었는지 불분명함,,\n","        #   b1_norm_close_15 = res_df['norm_close_15'].shift(15).to_numpy()\n","\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     mr_res *= norm_close_15 <= -degree_list[0]\n","        #     # mr_res *= b1_norm_close_15 <= -degree_list[1]\n","        #   else:\n","        #     mr_res *= norm_close_15 >= degree_list[0]\n","        #     # mr_res *= b1_norm_close_15 >= degree_list[1]\n","\n","        # ------ b. dc ------ #\n","        # if selection_id in ['v3_3']:\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     dc_lower_ = res_df['dc_lower_1m'].to_numpy()\n","        #     b1_dc_lower_ = res_df['dc_lower_1m'].shift(1).to_numpy()\n","        #     mr_res *= dc_lower_ < b1_dc_lower_\n","        #   else:\n","        #     dc_upper_ = res_df['dc_upper_1m'].to_numpy()\n","        #     b1_dc_upper_ = res_df['dc_upper_1m'].shift(1).to_numpy()\n","        #     mr_res *= dc_upper_ > b1_dc_upper_\n","\n","        # ------ c. sar ------ #\n","        # if selection_id in ['v3_3']:\n","        # sar_uptrend_3T = res_df['sar_uptrend_3T'].to_numpy()\n","        # if ep_loc_side == OrderSide.SELL:\n","        #   mr_res *= sar_uptrend_3T == 0\n","        # else:\n","        #   mr_res *= sar_uptrend_3T == 1"],"metadata":{"id":"csZwxsP5r_Pz"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JjKHyqftzhD7"},"source":["### set config (override available)"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"q_4E-zH02WJy","executionInfo":{"status":"ok","timestamp":1653644624184,"user_tz":-540,"elapsed":8,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["#     caution : MARKET / LIMIT spelling   #\n","#      json doesn't support single quotes     #\n","\n","param_dict = {\n","  \"selection_id\": \"5_45\",\n","  \"trader_set\": {\n","    \"backtrade\": 0,\n","    \"back_data_path\": \"C:\\\\Users\\\\Lenovo\\\\PycharmProjects\\\\System_Trading\\\\JnQ\\\\candlestick_concated\\\\database_bn\\\\2022-02-17\\\\2022-02-17 ETHUSDT_1m.ftr\",\n","    \"start_datetime\": \"2020-09-05 00:00:59.999\",\n","    \"run\": 1,\n","    \"df_log\": 0,\n","    \"latest_index\": -1,\n","    \"complete_index\": -2,\n","    \"limit_fee\": 1e-10,\n","    \"market_fee\": 1e-10,\n","    \"initial_asset\": 24500,\n","    \"asset_changed\": 0,\n","    \"symbol\": \"ETHUSDT\",\n","    \"symbol_changed\": 0,\n","    \"itv_list\": \"['T', '3T', '5T', '15T', '30T', 'H', '4H']\",\n","    \"row_list\": \"[100, 50, 1, 1, 1, 50, 1]\",\n","    \"rec_row_list\": \"[1, 1, 1, 1, 1, 1, 1]\",\n","    \"offset_list\": \"['1h', '1h', '1h', '1h', '1h', '1h', '1h']\",\n","    \"bar_close_second\": 59,\n","    \"realtime_term\": 0.01,\n","    \"order_term\": 0.25,\n","    \"api_retry_term\": 1,\n","    \"check_entry_sec\": 10,\n","    \"entry_execution_wait\": 60,\n","    \"breakout_qty_ratio\": 0.97,\n","    \"qty_check_term\": 30,\n","    \"exit_execution_wait\": 60,\n","    \"close_complete_term\": 5,\n","    \"save_stacked_df\": 0,\n","    \"stacked_df_exist\": 1\n","  },\n","  \"pos_set\": {\n","    \"short_inversion\": 0,\n","    \"long_inversion\": 0,\n","    \"short_ban\": 0,\n","    \"long_ban\": 0\n","  },\n","  \"loc_set\": {      \n","    \"point1\": {\n","      \"exp_itv\": \"5T\",\n","      \"tf_entry\": \"15T\",\n","      \"candle_pattern\": \"CDLMARUBOZU\",\n","      \"short_spread\": \"None\",\n","      \"long_spread\": \"None\",\n","      \"short_tr_thresh\": \"None\",\n","      \"long_tr_thresh\": \"None\",\n","      \"short_wick_ratio\": \"None\",\n","      \"long_wick_ratio\": \"None\",\n","      \"wick_itv\": \"5T\",\n","      \"cu_wrr_21\": \"None\",\n","      \"co_wrr_21\": \"None\",\n","      \"wrr_32\": 0.3,\n","      \"co_es\": \"None\",\n","      \"cu_es\": \"None\",\n","      \"crr\": \"None\",\n","      \"cppr\": \"None\",\n","      \"ppr\": \"None\",\n","      \"wbr\": \"None\",\n","      \"dbr\": \"None\",\n","      \"dbr2\": \"None\",\n","      \"brr\": \"None\",\n","      \"ir\": \"None\",\n","      \"abs_ratio\": \"None\"\n","    },\n","    \"point2\": {\n","      \"wrr_32\": 0.3,\n","    },\n","    \"zone\": {\n","      \"use_zone\": 0,\n","      \"base_roll_period\": 50,\n","      \"degree_list\": \"[]\",\n","      \"dtk_itv\": \"5T\",\n","      \"dt_k\": \"None\",\n","      \"dc_period\": 135,\n","      \"use_dtk_line\": 0,\n","      \"zone_dt_k\": 0.4,\n","      \"zone_dc_period\": 135\n","    }\n","  },\n","  \"tr_set\": {\n","    \"wave_itv1\" : 'T',\n","    \"wave_period1\": 20,\n","    \"wave_itv2\" : 'T',    \n","    \"wave_period2\": 20,\n","    \"wave_greater1\": 0,\n","    \"wave_greater2\": 0,\n","    \"wave_lesser1\": 2,\n","    \"wave_lesser2\": 2,\n","    \"expire_k1\": 0.0,\n","    \"expire_k2\": 0.0,\n","    \"expire_tick\": \"None\",\n","    \"p2_box_k1\" : 0,\n","    \"p2_box_k2\" : 0,\n","    \"tp_gap\": 0.0,\n","    \"ep_gap1\": -0.12,\n","    \"ep_gap2\": -0.12,\n","    \"out_gap\": 0,\n","    \"decay_gap\": \"None\",\n","    \"c_ep_gap\": \"None\",\n","    \"t_out_gap\": \"None\",\n","    \"wb_tp_gap\": 0,\n","    \"wb_out_gap\": 0,\n","    \"bias_info_tick\": 30000\n","  },\n","  \"ep_set\": {\n","    \"entry_type\": \"LIMIT\",\n","    \"static_ep\": 1,\n","    \"point2\": {\n","      \"use_point2\": 0,\n","      \"entry_type\": \"MARKET\"\n","    }\n","  },\n","  \"tp_set\": {\n","    \"non_tp\": 0,\n","    \"static_tp\": 1,\n","    \"tp_onexec\": 0,\n","    \"decay_term\": 60,\n","    \"p_ranges\": \"[1]\",\n","    \"p_qty_ratio\": \"[1]\"\n","  },\n","  \"out_set\": {\n","    \"hl_out\": 1,\n","    \"static_out\": 1,\n","    \"out_onexec\": 0,\n","    \"tf_exit\": \"None\",\n","    \"rsi_exit\": 0\n","  },\n","  \"lvrg_set\": {\n","    \"leverage\": 2,\n","    \"static_lvrg\": 0,\n","    \"allow_float\": 0,\n","    \"target_pct\": 0.03,\n","    \"lvrg_rejection\": 0\n","  }\n","}\n","\n","config = EasyDict(param_dict)"]},{"cell_type":"markdown","source":["#### legacy"],"metadata":{"id":"MuD_2vY7TI_8"}},{"cell_type":"code","source":[",\n","      \"hc_itv\": 60,\n","      \"osc_band\": 20\n","      \n","      \"wick_score_list\": \"[]\",\n","      \"body_score_list\": \"[]\",\n","      \"score_itv_list\": \"[]\",,\n","\n","      \"wick_score_list\": \"[]\",\n","      \"body_score_list\": \"[]\",\n","      \"score_itv_list\": \"['T']\""],"metadata":{"id":"EKag94Y2TMCO"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rLI8unIyroiC"},"source":["## run"]},{"cell_type":"code","execution_count":8,"metadata":{"id":"qBJfPsmJzVIr","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653644624185,"user_tz":-540,"elapsed":9,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"4ed084a8-7230-43ee-9706-49b0af65e9de"},"outputs":[{"output_type":"stream","name":"stdout","text":["\"5_45\" {\n"," \"point1\": {\n","  \"exp_itv\": \"5T\",\n","  \"tf_entry\": \"15T\",\n","  \"candle_pattern\": \"CDLMARUBOZU\",\n","  \"short_spread\": \"None\",\n","  \"long_spread\": \"None\",\n","  \"short_tr_thresh\": \"None\",\n","  \"long_tr_thresh\": \"None\",\n","  \"short_wick_ratio\": \"None\",\n","  \"long_wick_ratio\": \"None\",\n","  \"wick_itv\": \"5T\",\n","  \"cu_wrr_21\": \"None\",\n","  \"co_wrr_21\": \"None\",\n","  \"wrr_32\": 0.3,\n","  \"co_es\": \"None\",\n","  \"cu_es\": \"None\",\n","  \"crr\": \"None\",\n","  \"cppr\": \"None\",\n","  \"ppr\": \"None\",\n","  \"wbr\": \"None\",\n","  \"dbr\": \"None\",\n","  \"dbr2\": \"None\",\n","  \"brr\": \"None\",\n","  \"ir\": \"None\",\n","  \"abs_ratio\": \"None\"\n"," },\n"," \"point2\": {\n","  \"wrr_32\": 0.3\n"," },\n"," \"zone\": {\n","  \"use_zone\": 0,\n","  \"base_roll_period\": 50,\n","  \"degree_list\": \"[]\",\n","  \"dtk_itv\": \"5T\",\n","  \"dt_k\": \"None\",\n","  \"dc_period\": 135,\n","  \"use_dtk_line\": 0,\n","  \"zone_dt_k\": 0.4,\n","  \"zone_dc_period\": 135\n"," }\n","} {\n"," \"wave_itv1\": \"T\",\n"," \"wave_period1\": 20,\n"," \"wave_itv2\": \"T\",\n"," \"wave_period2\": 20,\n"," \"wave_greater1\": 0,\n"," \"wave_greater2\": 0,\n"," \"wave_lesser1\": 2,\n"," \"wave_lesser2\": 2,\n"," \"expire_k1\": 0.0,\n"," \"expire_k2\": 0.0,\n"," \"expire_tick\": \"None\",\n"," \"p2_box_k1\": 0,\n"," \"p2_box_k2\": 0,\n"," \"tp_gap\": 0.0,\n"," \"ep_gap1\": -0.12,\n"," \"ep_gap2\": -0.12,\n"," \"out_gap\": 0,\n"," \"decay_gap\": \"None\",\n"," \"c_ep_gap\": \"None\",\n"," \"t_out_gap\": \"None\",\n"," \"wb_tp_gap\": 0,\n"," \"wb_out_gap\": 0,\n"," \"bias_info_tick\": 30000\n","} {\n"," \"entry_type\": \"LIMIT\",\n"," \"static_ep\": 1,\n"," \"point2\": {\n","  \"use_point2\": 0,\n","  \"entry_type\": \"MARKET\"\n"," }\n","} {\n"," \"non_tp\": 0,\n"," \"static_tp\": 1,\n"," \"tp_onexec\": 0,\n"," \"decay_term\": 60,\n"," \"p_ranges\": \"[1]\",\n"," \"p_qty_ratio\": \"[1]\"\n","} {\n"," \"hl_out\": 1,\n"," \"static_out\": 1,\n"," \"out_onexec\": 0,\n"," \"tf_exit\": \"None\",\n"," \"rsi_exit\": 0\n","} {\n"," \"leverage\": 2,\n"," \"static_lvrg\": 0,\n"," \"allow_float\": 0,\n"," \"target_pct\": 0.03,\n"," \"lvrg_rejection\": 0\n","} "]}],"source":["# funcs = [expire_v2, ep_loc_point2_v2, lvrg_set]  # expire for p1 & p2\n","funcs = [expiry_p1, expiry_p2, lvrg_set]     # expire for p1-only\n","# funcs = [expire_v0, ep_loc_point2_v2, lvrg_set]  # expire for v3\n","\n","id_idx_list = [0]  # ID_arr 에서 import 할 id_idx 선택\n","public_override = 1\n","utils_override = 1\n","config_override = 1\n","\n","# ------ config_list 와 같은 org_var 에 override 하는거 다시 생각하기 ------ #\n","ID_list = ID_arr[id_idx_list]\n","utils_list = utils_arr[id_idx_list]\n","config_list = config_arr[id_idx_list]\n","\n","if config_override or utils_override:\n","  assert len(config_list) == 1\n","  if config_override:    \n","    config_list[0] = config\n","    ID_list[0] = config.selection_id\n","  \n","config = config_list[0]  # base config = config_list[0]\n","tp_fee, out_fee = calc_tp_out_fee_v2(config)   # -> rev_pr 때문에 일단 이곳에도 선언함\n","\n","# ------- inversion set ------- #\n","inversion = 0\n","fdist_thresh = 1\n","# ------- plot param ------- #\n","show_detail = 0\n","# ------- temp param ------- #\n","allow_osc_touch = 0\n","rsi_gap = 5\n","\n","# ------- just printing config ------- #\n","_ = [print(json.dumps(config[key_], indent=1), end=' ') for key_ in ['selection_id', 'loc_set', 'tr_set', 'ep_set', 'tp_set', 'out_set', 'lvrg_set']] #  'trader_set',"]},{"cell_type":"code","execution_count":33,"metadata":{"id":"afUV2b1jaggN","executionInfo":{"status":"ok","timestamp":1653645733466,"user_tz":-540,"elapsed":384,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# config.trader_set.start_datetime = \"2020-09-05 00:00:59.999\" #  \"2020-09-05 00:00:59.999\" # 2022-02-01 16:34:59.999000 2022-01-14 16:34:59.999000  \"2020-09-05 00:00:59.999\" \"2022-01-10 00:00:59.999\" \"2021-10-04 02:39:59.999000\"\n","config_list[0].tr_set.wave_itv1 = 'T'\n","config_list[0].tr_set.wave_period1 = 20\n","config_list[0].tr_set.wave_itv2 = 'T'\n","config_list[0].tr_set.wave_period2 = 20"]},{"cell_type":"code","execution_count":25,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4343,"status":"ok","timestamp":1653644819403,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"WstWVNihCNH8","outputId":"1e4168b7-d3ea-4626-b67a-8e94d68aa952"},"outputs":[{"output_type":"stream","name":"stdout","text":["public_indi elapsed time : 2.9470741748809814\n","make data_list elapsed time : 0.0001685619354248047\n"]}],"source":["# ------ slicing res_df ------ #\n","res_df = res_df_.loc[pd.to_datetime(config.trader_set.start_datetime):]\n","\n","np_timeidx = np.array([intmin_np(date_) for date_ in res_df.index.to_numpy()])\n","\n","# ------------ public_indi ------------ # - 딱히 반복될 이유가 없는 phase - annot. 달때, why 까지 적어주면 좋음\n","start_0 = time.time()\n","if public_override:\n","    res_df = public_indi(res_df, config_list[0], np_timeidx)  # 현재 대부분의 시간은 h_candle 에서 소비되고 있음\n","else:\n","    res_df = utils_public.public_indi(res_df, config_list[0], np_timeidx)\n","print(\"public_indi elapsed time :\", time.time() - start_0)\n","\n","# ------------ make data_list ------------ # - 반복될 이유가 없는 phase - public_indo 에 종속\n","start_0 = time.time()\n","ohlc_cols = ['open', 'high', 'low', 'close']\n","ohlc_list = [res_df[col_].to_numpy() for col_ in ohlc_cols]\n","print(\"make data_list elapsed time :\", time.time() - start_0)"]},{"cell_type":"markdown","metadata":{"id":"RqRF1eyZ0xBL"},"source":["### idep_plot"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_iYcJk8nK8Yq"},"outputs":[],"source":["# ------ edit utils config ------ #\n","# config_list[0].loc_set.point.candle_pattern = talib.get_function_groups()['Pattern Recognition'][51]   # \"None\" # 0.5 0.7\n","# config_list[0].pos_set.short_ban = 0\n","# config_list[0].tr_set.wave_lesser = 3\n","# config_list[0].tr_set.wave_greater1 = 0\n","# config_list[0].tr_set.wave_greater2 = 0\n","# config_list[0].tr_set.p1_period1 = 5\n","# config_list[0].tr_set.p1_period2 = 5\n","# # config_list[0].tr_set.p2_period1 = 20\n","# # config_list[0].tr_set.p2_period2 = 20\n","# config_list[0].ep_set.entry_type = \"LIMIT\" # \"LIMIT\" # \"MARKET\"\n","# config_list[0].tr_set.tp_gap = 0.5\n","# config_list[0].tr_set.ep_gap = -0.12 # -0.618 -0.23 -0.382 0.19 \n","# config_list[0].tr_set.out_gap = 0\n","# config_list[0].tr_set.wb_tp_gap = 0.5\n","# config_list[0].tr_set.wb_out_gap = -0.5\n","# config_list[0].tr_set.bias_info_tick = 30000\n","# config_list[0].trader_set.limit_fee = 1e-10 # 1e-10  0.0002\n","# config_list[0].trader_set.market_fee = 1e-10 # 1e-10  0.0004\n","\n","# config_list[0].loc_set.point.short_wick_ratio = 0.2 # \"None\" # 2.5\n","# config_list[0].loc_set.point.long_wick_ratio = 0.2 # \"None\" # 2.5\n","# config_list[0].loc_set.point.crr = 0.5"]},{"cell_type":"code","execution_count":34,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":452,"status":"ok","timestamp":1653645735687,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"iI39YI_5GguK","outputId":"ddd8da10-70eb-498f-8467-7c5579b92820"},"outputs":[{"output_type":"stream","name":"stderr","text":["wave_point\n","np.sum(short_open_res1 == 1) : 42048\n","np.sum(long_open_res1 == 1) : 42240\n","np.sum(short_open_res2 == 1) : 42048\n","np.sum(long_open_res2 == 1) : 42240\n","reject update_hl\n","np.sum(short_open_res1 == 1) : 40427\n","np.sum(long_open_res1 == 1) : 40130\n","np.sum(short_open_res2 == 1) : 40427\n","np.sum(long_open_res2 == 1) : 40130\n","wave_mm\n","np.sum(short_open_res1 == 1) : 40425\n","np.sum(long_open_res1 == 1) : 40128\n","np.sum(short_open_res2 == 1) : 40425\n","np.sum(long_open_res2 == 1) : 40128\n","point validation\n","np.sum(short_open_res1 == 1) : 40401\n","np.sum(long_open_res1 == 1) : 40115\n","np.sum(short_open_res2 == 1) : 24865\n","np.sum(long_open_res2 == 1) : 24969\n"]},{"output_type":"stream","name":"stdout","text":["enlist_tr elapsed time : 0.5026400089263916\n"]}],"source":["if utils_override:   # 현재, utils_override 하는 경우 1개의 ID 만 허용함 \n","  # start_0 = time.time()\n","  # res_df = enlist_rtc(res_df, config_list[0], np_timeidx)\n","  # print(\"enlist_rtc elapsed time :\", time.time() - start_0)\n","  start_0 = time.time()\n","  res_df = enlist_tr(res_df, config_list[0], np_timeidx)    # 36995.0 -> 152766.0 # 4044 np.sum(long_open_res == 1) : 4325\n","  print(\"enlist_tr elapsed time :\", time.time() - start_0)\n","else:\n","    start_0 = time.time()\n","    for utils_, config_ in zip(utils_list, config_list):\n","        # res_df = utils_.enlist_rtc(res_df, config_, np_timeidx)\n","        res_df = utils_.enlist_tr(res_df, config_, np_timeidx)\n","    print(\"elapsed time :\", time.time() - start_0)"]},{"cell_type":"code","execution_count":27,"metadata":{"id":"gfDSOGMd91rE","executionInfo":{"status":"ok","timestamp":1653644826469,"user_tz":-540,"elapsed":424,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# ------ edit loc_set config ------ #\n","config_list[0].loc_set.point1.cu_wrr_21 = \"None\" # \"None\" 5 2.5\n","config_list[0].loc_set.point1.co_wrr_21 = \"None\" # \"None\" 5 2.5\n","config_list[0].loc_set.point1.wrr_32 = 0.4 # \"None\" 1 0.5 0.382 0.302\n","config_list[0].loc_set.point2.wrr_32 = 0.5 # \"None\" 1 0.5 0.382 0.302 0.25\n","# config_list[0].loc_set.zone.hl_loc_pct = \"None\" # \"None\" 1 0.5\n","# config_list[0].loc_set.point1.cu_es = \"None\" # \"None\" # -2\n","# config_list[0].loc_set.point1.co_es = \"None\" # \"None\" # -3\n","# config_list[0].loc_set.point1.cppr = 0.5   # \"None\" # 0.5 0.7\n","# config_list[0].loc_set.point1.wbr = \"None\" # 0.7\n","# config_list[0].loc_set.point1.dbr = \"None\"   # 0.7\n","# config_list[0].loc_set.point1.dbr2 = \"None\"  # 0.7\n","# config_list[0].loc_set.point1.brr = \"None\"   # 0.8\n","# config_list[0].loc_set.point1.ir = \"None\" # \"None\" 0.8\n","# config_list[0].loc_set.point1.wick_score_list = \"[]\"\n","# config_list[0].loc_set.point1.score_itv_list = \"['H']\"\n","# # config_list[0].loc_set.point1.abs_ratio = \"None\"  # 0.7\n","config_list[0].loc_set.point1.short_tr_thresh = \"None\"  #  \"None\" 2 0.8 # # 0.7 # tr_thresh 엄청 민감함\n","config_list[0].loc_set.point1.long_tr_thresh = 1  #  \"None\" 2 0.8 ## 0.7\n","# config_list[0].loc_set.zone.use_zone = 0\n","# # config_list[0].loc_set.zone.base_roll_period = 60"]},{"cell_type":"code","execution_count":35,"metadata":{"executionInfo":{"elapsed":2377,"status":"ok","timestamp":1653645744706,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"9DPgykxQ92mU","colab":{"base_uri":"https://localhost:8080/"},"outputId":"f252a14a-93b6-4b20-a933-dc6d5d40803e"},"outputs":[{"output_type":"stream","name":"stderr","text":["cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.40000 (0.0)\n","co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.40000 (0.0)\n","cu_wrr_32_ <= config.loc_set.point2.wrr_32 : 0.54867 0.50000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 1.0997183322906494\n"]},{"output_type":"stream","name":"stderr","text":["co_wrr_32_ <= config.loc_set.point2.wrr_32 : 1.00000 0.50000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9876203536987305\n"]}],"source":["open_info_df1 = get_open_info_df_v2(ep_loc_p1_v3, res_df, np_timeidx, ID_list, config_list, id_idx_list, open_num=1)  # --> point * dur. 관련 (loc_set) param 에 종속 (open_info 가 변경되는게 아니라면, 재실행할 필요없음)\n","open_info_df2 = get_open_info_df_v2(ep_loc_p2_v3, res_df, np_timeidx, ID_list, config_list, id_idx_list, open_num=2)\n","open_info_df_list = [open_info_df1, open_info_df2]"]},{"cell_type":"code","execution_count":31,"metadata":{"id":"KqVkg236t_f2","executionInfo":{"status":"ok","timestamp":1653645272394,"user_tz":-540,"elapsed":436,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# ------ edit entry & exit (ep, tp, out, ..) config ------ #\n","# config_list[0].tr_set.expire_k = -0.5\n","# config_list[0].tr_set.expire_tick = \"None\"\n","# config_list[0].loc_set.tr_set.p2_box_k1 = 0\n","config_list[0].tr_set.p2_box_k2 = 0.0\n","# # # config_list[0].ep_set.point2.use_point2 = 1\n","# # # config_list[0].ep_set.point2.entry_type = \"LIMIT\"\n","# # # config_list[0].ep_set.point2.wick_score_list = str([])\n","# # # config_list[0].tp_set.static_tp = 1\n","# # # config_list[0].tp_set.non_tp = 0 # 0 1\n","# config_list[0].tp_set.p_ranges = \"[1]\"\n","# config_list[0].tp_set.p_qty_ratio = \"[1]\"\n","# config_list[0].tp_set.p_ranges = \"[0.2, 0.66, 1]\"\n","# config_list[0].tp_set.p_qty_ratio = \"[0.25, 0.25, 0.5]\"\n","# config_list[0].tp_set.p_ranges = \"[0.66, 1]\"\n","# config_list[0].tp_set.p_qty_ratio = \"[0.3, 0.7]\"\n","# # # config_list[0].out_set.hl_out = 1\n","# # # config_list[0].out_set.tf_exit = \"None\" # 15 \"None\"\n","# config_list[0].lvrg_set.leverage = 1\n","# config_list[0].lvrg_set.static_lvrg = 0\n","# config_list[0].lvrg_set.target_pct = 0.03\n","# # config_list[0].lvrg_set.allow_float = 0\n","# config_list[0].lvrg_set.lvrg_rejection = 0"]},{"cell_type":"code","execution_count":36,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":663},"executionInfo":{"elapsed":4820,"status":"ok","timestamp":1653645749524,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"HHq6cr9GPBot","outputId":"7dabc0c8-b75c-4ad2-e572-4ebd4763334e"},"outputs":[{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 2.2941181659698486\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1728x576 with 6 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 1.6426818370819092\n"]}],"source":["test_ratio = 0.0\n","short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_bias_arr, short_p2_idx_arr, short_tp_1, short_tp_0, short_out_1, short_out_0, short_ep2_0, \\\n","      long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_bias_arr, long_p2_idx_arr, long_tp_1, long_tp_0, long_out_1, long_out_0, long_ep2_0 = \\\n","get_res_v8(res_df, open_info_df_list, ohlc_list, config_list, np_timeidx, funcs, check_hlm=2, test_ratio=test_ratio, plot_is=1, signi=0, show_detail=0)   # open 이 많을 수록 en_ex_pairing elapsed time : 11.58370590209961"]},{"cell_type":"code","source":["~# ------ inversion ------ #\n","_ = get_res_v5(res_df, open_info_df, ohlc_list, config_list, np_timeidx, funcs, inversion=True, test_ratio=test_ratio, plot_is=1, signi=False)"],"metadata":{"id":"8lYgsqH-rfAM"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"n6gc7lERC4VE"},"source":["### statistics (stem 별로 진행)"]},{"cell_type":"code","execution_count":38,"metadata":{"id":"HHjIdn2MC4VE","executionInfo":{"status":"ok","timestamp":1653645779043,"user_tz":-540,"elapsed":2,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["selection_id = config.selection_id\n","\n","short_p1_idx = short_obj[-1].astype(int)\n","long_p1_idx = long_obj[-1].astype(int)\n","\n","short_open_tp_1 = res_df['short_tp_1_{}'.format(selection_id)].to_numpy()[short_p1_idx]\n","long_open_tp_1 = res_df['long_tp_1_{}'.format(selection_id)].to_numpy()[long_p1_idx]\n","\n","short_open_tp_0 = res_df['short_tp_0_{}'.format(selection_id)].to_numpy()[short_p1_idx]\n","long_open_tp_0 = res_df['long_tp_0_{}'.format(selection_id)].to_numpy()[long_p1_idx]\n","\n","short_open_tp_gap = res_df['short_tp_gap_{}'.format(selection_id)].to_numpy()[short_p1_idx]  # use open_i\n","long_open_tp_gap = res_df['long_tp_gap_{}'.format(selection_id)].to_numpy()[long_p1_idx]\n","\n","short_open_out_0 = res_df['short_out_0_{}'.format(selection_id)].to_numpy()[short_p1_idx]\n","long_open_out_0 = res_df['long_out_0_{}'.format(selection_id)].to_numpy()[long_p1_idx]\n","\n","short_open_out_gap = res_df['short_out_gap_{}'.format(selection_id)].to_numpy()[short_p1_idx]  # use open_i\n","long_open_out_gap = res_df['long_out_gap_{}'.format(selection_id)].to_numpy()[long_p1_idx]\n","\n","# ------ out case 의 max_high check (long) ------ #\n","short_max_tpg = get_max_tpg_v2(\"SELL\", ohlc_list, short_pr, short_obj[:4], short_open_tp_1, short_open_tp_gap)\n","long_max_tpg = get_max_tpg_v2(\"BUY\", ohlc_list, long_pr, long_obj[:4], long_open_tp_1, long_open_tp_gap)\n","# short_max_tpg = get_max_tpg_v2(\"SELL\", ohlc_list, short_pr, short_obj[:4], short_open_tp_1, short_open_out_gap)\n","# long_max_tpg = get_max_tpg_v2(\"BUY\", ohlc_list, long_pr, long_obj[:4], long_open_tp_1, long_open_out_gap)\n","\n","# ------ true_bias 의 outg 확인 ------ #\n","short_max_outg = get_max_outg_v4(\"SELL\", config, ohlc_list, short_obj, short_tpout_arr, short_open_tp_0, short_open_tp_gap)\n","long_max_outg = get_max_outg_v4(\"BUY\", config, ohlc_list, long_obj, long_tpout_arr, long_open_tp_0, long_open_tp_gap)\n","\n","current_tpg = config.tr_set.tp_gap\n","current_outg = config.tr_set.out_gap"]},{"cell_type":"markdown","source":["#### consecutive dur. value survey on bias"],"metadata":{"id":"tOFkzUX2imQu"}},{"cell_type":"code","source":["res_df.dtypes"],"metadata":{"id":"CgvSrXaZEkMZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":40,"metadata":{"id":"gnSvYKIzC4VF","colab":{"base_uri":"https://localhost:8080/","height":502},"executionInfo":{"status":"error","timestamp":1653645804082,"user_tz":-540,"elapsed":394,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"42094947-0ec1-4da1-9e6b-efb38d1d836a"},"outputs":[{"output_type":"error","ename":"KeyError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   3360\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3361\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3362\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'short_tr_5_45'","\nThe above exception was the direct cause of the following exception:\n","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-40-d5aec4c9a5f3>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     31\u001b[0m \u001b[0;31m#                'b1_co_es_15T1', 'b1_cu_es_15T1', 'b1_upper_wick_ratio_15T', 'b1_lower_wick_ratio_15T']\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     32\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 33\u001b[0;31m \u001b[0mshort_datas\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mres_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'short_'\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mcol\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_numpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mcol\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mdevided_cols\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mres_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_numpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mcol\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mpublic_cols\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     34\u001b[0m \u001b[0mlong_datas\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mres_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'long_'\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mcol\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_numpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mcol\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mdevided_cols\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mres_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_numpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mcol\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mpublic_cols\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     35\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-40-d5aec4c9a5f3>\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m     31\u001b[0m \u001b[0;31m#                'b1_co_es_15T1', 'b1_cu_es_15T1', 'b1_upper_wick_ratio_15T', 'b1_lower_wick_ratio_15T']\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     32\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 33\u001b[0;31m \u001b[0mshort_datas\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mres_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'short_'\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mcol\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_numpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mcol\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mdevided_cols\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mres_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_numpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mcol\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mpublic_cols\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     34\u001b[0m \u001b[0mlong_datas\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mres_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'long_'\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mcol\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_numpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mcol\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mdevided_cols\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mres_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_numpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mcol\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mpublic_cols\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     35\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3456\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3457\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3458\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3459\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3460\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   3361\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3362\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3363\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3364\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3365\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mis_scalar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0misna\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhasnans\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'short_tr_5_45'"]}],"source":["# ------------ dependent vars. ------------ #\n","# res_df 에 존재하는 col 는 모두 사용가능함\n","\n","# ------ 1. 도출한 outg 와 vars. pairing 진행 (by valid_idx) ------ #\n","devided_cols, public_cols = [], []\n","\n","devided_cols.append('tr_{}'.format(selection_id))\n","\n","wave_itv1 = 'T'\n","wave_period1 = config.tr_set.wave_period1\n","\n","# public_cols.append('cu_wrr_21_{}{}'.format(wave_itv1, wave_period1))\n","public_cols.append('cu_wrr_32_{}{}'.format(wave_itv1, wave_period1))\n","# public_cols.append('co_wrr_21_{}{}'.format(wave_itv1, wave_period1))\n","public_cols.append('co_wrr_32_{}{}'.format(wave_itv1, wave_period1))\n","\n","# public_cols.append('wave_high_terms_cnt_fill_T5')\n","# public_cols.append('wave_low_terms_cnt_fill_T5')\n","# public_cols.append('wave_high_loc_pct_T5')\n","# public_cols.append('wave_low_loc_pct_T5')\n","\n","# public_cols.append('b1_co_es_15T1')\n","# public_cols.append('b1_cu_es_15T1')\n","# public_cols.append('b1_upper_wick_ratio_15T')\n","# public_cols.append('b1_lower_wick_ratio_15T')\n","\n","#  'co_wrr_T5', 'cu_wrr_T5', 'b1_cppr_15T', 'b1_updbr', 'b1_lwdbr', 'b1_updbr_cppr', 'b1_lwdbr_cppr' 'abs_ratio_5T', 'rel_ratio_5T', 'body_rel_ratio_5T'\n","\n","# devided_cols = ['tr_{}'.format(selection_id)]  # , 'ir_5T'\n","# public_cols = ['wave_high_terms_cnt_fill_T5', 'wave_low_terms_cnt_fill_T5', 'wave_high_loc_pct_T5', 'wave_low_loc_pct_T5', \n","#                'b1_co_es_15T1', 'b1_cu_es_15T1', 'b1_upper_wick_ratio_15T', 'b1_lower_wick_ratio_15T']\n","\n","short_datas = [res_df['short_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","long_datas = [res_df['long_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","\n","titles = devided_cols + public_cols"]},{"cell_type":"code","source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(14, len(titles) * 5))\n","nrows, ncols = len(short_datas), 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        )\n","\n","num_samples = 30\n","alpha = 0.8\n","xmin = 0\n","xmax = 10\n","\n","for ings_idx, (title, short_data, long_data) in enumerate(zip(titles, short_datas, long_datas)):\n","  inner_gs = gs[ings_idx].subgridspec(nrows=2, ncols=2)\n","\n","  short_open_data = short_data[short_open_idx]\n","  long_open_data = long_data[long_open_idx]\n","\n","  short_true_data = short_open_data[short_bias_arr.ravel()]\n","  short_false_data = short_open_data[short_false_bias_arr.ravel()]\n","  long_true_data = long_open_data[long_bias_arr.ravel()]\n","  long_false_data = long_open_data[long_false_bias_arr.ravel()]\n","  \n","  short_true_valid_idx = np.ones_like(short_true_data).astype(bool)\n","  short_false_valid_idx = np.ones_like(short_false_data).astype(bool)\n","  long_true_valid_idx = np.ones_like(long_true_data).astype(bool)\n","  long_false_valid_idx = np.ones_like(long_false_data).astype(bool)\n","\n","  short_true_valid_idx *= ~np.isinf(short_true_data)\n","  short_false_valid_idx *= ~np.isinf(short_false_data)\n","  long_true_valid_idx *= ~np.isinf(long_true_data)\n","  long_false_valid_idx *= ~np.isinf(long_false_data)\n","\n","  try:\n","    short_true_valid_idx *= short_true_data > xmin\n","    short_false_valid_idx *= short_false_data > xmin\n","    long_true_valid_idx *= long_true_data > xmin\n","    long_false_valid_idx *= long_false_data > xmin\n","\n","  except:\n","    pass\n","\n","  try:\n","    short_true_valid_idx *= short_true_data < xmax\n","    short_false_valid_idx *= short_false_data < xmax\n","    long_true_valid_idx *= long_true_data < xmax\n","    long_false_valid_idx *= long_false_data < xmax\n","    \n","  except:\n","    pass\n","    \n","  plt.subplot(inner_gs[0])\n","  ns, bins, patches = plt.hist([short_true_data[short_true_valid_idx], short_false_data[short_false_valid_idx]], \n","           bins=num_samples, alpha=alpha, color=['#00ff00', '#ff0000'], edgecolor='black')  \n","  plt.title('short_' + title)  \n","\n","  plt.subplot(inner_gs[2])\n","  total_ns = np.sum(ns, axis=0)\n","  hist_ratio = ns[0] / total_ns\n","  # valid_idx = total_ns > 1\n","  valid_idx = np.full(len(hist_ratio), True)\n","  valid_hist_ratio = hist_ratio[valid_idx]\n","  plt.hist(bins[:-1][valid_idx], weights=valid_hist_ratio, bins=num_samples, color='#00ff00', edgecolor='black')\n","  plt.ylim(0, 1)\n","  \n","\n","  plt.subplot(inner_gs[1])\n","  ns, bins, patches = plt.hist([long_true_data[long_true_valid_idx], long_false_data[long_false_valid_idx]], \n","           bins=num_samples, alpha=alpha, color=['#00ff00', '#ff0000'], edgecolor='black')\n","  plt.title('long_' + title)\n","  \n","  plt.subplot(inner_gs[3])\n","  total_ns = np.sum(ns, axis=0)\n","  hist_ratio = ns[0] / total_ns\n","  # valid_idx = total_ns > 1\n","  valid_idx = np.full(len(hist_ratio), True)\n","  valid_hist_ratio = hist_ratio[valid_idx]\n","  plt.hist(bins[:-1][valid_idx], weights=valid_hist_ratio, bins=num_samples, color='#00ff00', edgecolor='black')\n","  plt.ylim(0, 1)\n","\n","  \n","# plt.suptitle(title)\n","plt.show()"],"metadata":{"id":"Sahvc-R0jD1A"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Arnb-kXlC4VF"},"source":["#### tpg & outg survey"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jHh0uFkXC4VF","colab":{"base_uri":"https://localhost:8080/","height":741},"executionInfo":{"status":"ok","timestamp":1652336000146,"user_tz":-540,"elapsed":2191,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"0f96fffd-6b9a-4f7e-88ff-692d53ae921e"},"outputs":[{"output_type":"stream","name":"stdout","text":["661\n","661\n","661\n","661\n","pkx : [0.16567421 0.37261006 0.43912516 0.62388931]\n","pkx : [0.13770337 0.25029868 0.60309732]\n","\n","293\n","293\n","293\n","293\n","pkx : [-0.52628423 -0.45473521 -0.33365224 -0.2070655  -0.1300127  -0.02544105]\n","pkx : [-0.46075458 -0.25025689 -0.14500805 -0.04852994]\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 864x576 with 4 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# 1. outg 는 partial 을 위한 histogram 작성 진행\n","# 현재, outg 내부에는 tp 한것과 out 한것이 공존하는 상태\n","titles = ['outg', 'tpg']\n","short_max_datas = [short_max_outg[short_bias_arr], short_max_tpg]\n","long_max_datas = [long_max_outg[long_bias_arr], long_max_tpg]\n","\n","# titles = ['tpg']\n","# short_max_datas = [short_max_tpg]\n","# long_max_datas = [long_max_tpg]\n","\n","plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(12, 8))\n","nrows, ncols = 2, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        )\n","  \n","for ings_idx, (title, short_max_data, long_max_data) in enumerate(zip(titles, short_max_datas, long_max_datas)):\n","\n","  inner_gs = gs[ings_idx].subgridspec(nrows=1, ncols=2)\n","  if ings_idx == 0:\n","    axvline = current_outg\n","    title_add = 'true_' + title\n","  else:\n","    axvline = current_tpg\n","    title_add = 'false_' + title\n","\n","  print(len(long_max_data))\n","\n","  short_plot_idx = np.ones_like(short_max_data).astype(bool)\n","  long_plot_idx = np.ones_like(long_max_data).astype(bool)\n","  # short_plot_idx = short_max_data <= axvline\n","  # long_plot_idx = long_max_data <= axvline\n","\n","  print(np.sum(long_plot_idx))    \n","\n","  short_plot_idx *= ~np.isnan(short_max_data)\n","  long_plot_idx *= ~np.isnan(long_max_data)  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_plot_idx *= ~np.isinf(short_max_data)\n","  long_plot_idx *= ~np.isinf(long_max_data)  # nan 과 inf 때문에 이 방식 채택\n","  \n","  print(np.sum(long_plot_idx))\n","    \n","  plt.subplot(inner_gs[0])\n","  kde_plot_v2(*np.unique(short_max_data[short_plot_idx], return_counts=True))\n","  plt.title('short_' + title_add)  \n","  plt.axvline(axvline, color='red', linewidth=3)\n","\n","  plt.subplot(inner_gs[1])\n","  kde_plot_v2(*np.unique(long_max_data[long_plot_idx], return_counts=True))\n","  plt.title('long_' + title_add)\n","  plt.axvline(axvline, color='red', linewidth=3)\n","\n","  print()\n","\n","# plt.suptitle(title)\n","plt.show()"]},{"cell_type":"markdown","source":["#### legacy"],"metadata":{"id":"mScdfR9hmjVu"}},{"cell_type":"markdown","metadata":{"id":"xivLUsSGC4VF"},"source":["##### outg survey for precision (eploc vars. dependency)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LB28R3QIjCDc"},"outputs":[],"source":["# ------------ dependent vars. ------------ #\n","# res_df 에 존재하는 col 는 모두 사용가능함\n","# ------ 1. 도출한 outg 와 vars. pairing 진행 (by valid_idx) ------ #\n","devided_cols = ['tr_{}'.format(strat_version)]  # , 'ir_5T'\n","public_cols = ['wave_body_ratio']  # 'abs_ratio_5T', 'rel_ratio_5T', 'body_rel_ratio_5T'\n","\n","short_datas = [res_df['short_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","long_datas = [res_df['long_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","\n","titles = devided_cols + public_cols"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nX9TpLcvFu7T"},"outputs":[],"source":["plot_outg_range = (-1, 10)\n","plot_data_range = (-10, 100)\n","\n","plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(12, 18))\n","nrows, ncols = len(short_datas), 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        )\n","\n","for ings_idx, (title, short_data, long_data) in enumerate(zip(titles, short_datas, long_datas)):\n","  inner_gs = gs[ings_idx].subgridspec(nrows=1, ncols=2)\n","\n","  print(len(long_max_outg))\n","\n","  short_plot_idx = (plot_outg_range[0] <= short_max_outg) & (short_max_outg <= plot_outg_range[1])\n","  long_plot_idx = (plot_outg_range[0] <= long_max_outg) & (long_max_outg <= plot_outg_range[1])  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_open_data = short_data[short_open_idx]\n","  long_open_data = long_data[long_open_idx]\n","  \n","  short_plot_idx *= (plot_data_range[0] <= short_open_data) * (short_open_data <= plot_data_range[1])\n","  long_plot_idx *= (plot_data_range[0] <= long_open_data) * (long_open_data <= plot_data_range[1]) # nan 과 inf 때문에 이 방식 채택\n","\n","  short_plot_idx *= ~np.isnan(short_open_data)\n","  long_plot_idx *= ~np.isnan(long_open_data)  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_plot_idx *= ~np.isinf(short_open_data)\n","  long_plot_idx *= ~np.isinf(long_open_data)  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_true_idx = short_plot_idx * short_true_open_idxth\n","  long_true_idx = long_plot_idx * long_true_open_idxth\n","  \n","  short_false_idx = short_plot_idx * ~short_true_open_idxth\n","  long_false_idx = long_plot_idx * ~long_true_open_idxth\n","\n","  plt.subplot(inner_gs[0])\n","  # ------ true_bias ------ #\n","  x, y = short_max_outg[short_true_idx].ravel(), short_open_data[short_true_idx].ravel()  \n","  plt.scatter(x, y, color='white', alpha=0.5)\n","  # ------ false_bias ------ #\n","  x, y = short_max_outg[short_false_idx].ravel(), short_open_data[short_false_idx].ravel()\n","  plt.scatter(x, y, color='fuchsia', alpha=0.3)\n","  plt.axvline(current_outg, color='red', linewidth=3)\n","  plt.title(\"{} coef : {:0.3f}\".format(title, np.corrcoef(-x, y)[0, 1]))\n","\n","  plt.subplot(inner_gs[1])    \n","  # ------ true_bias ------ #\n","  x, y = long_max_outg[long_true_idx].ravel(), long_open_data[long_true_idx].ravel()  \n","  plt.scatter(x, y, color='white', alpha=0.5)\n","  # ------ false_bias ------ #\n","  x, y = long_max_outg[long_false_idx].ravel(), long_open_data[long_false_idx].ravel()\n","  plt.scatter(x, y, color='fuchsia', alpha=0.3)\n","  plt.axvline(current_outg, color='red', linewidth=3)\n","  plt.title(\"{} coef : {:0.3f}\".format(title, np.corrcoef(-x, y)[0, 1]))\n","\n","  print()  \n","\n","# plt.suptitle(title)\n","plt.show()\n","# print()"]},{"cell_type":"markdown","source":["#### dump"],"metadata":{"id":"983aUwM76s6X"}},{"cell_type":"code","source":["# len(np.unique(long_obj[-1]))\n","p1_hhm_p1_idx = long_obj[-1]"],"metadata":{"id":"p_e8PtFXa7mc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["p1_hlm_p1_idx = long_obj[-1]"],"metadata":{"id":"nLZDkNNxbZPO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# len(p1_hhm_p1_idx[~np.isin(p1_hhm_p1_idx, p1_hlm_p1_idx)])\n","p1_hlm_p1_idx[~np.isin(p1_hlm_p1_idx, p1_hhm_p1_idx)]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WhCPOi1qbkHS","executionInfo":{"status":"ok","timestamp":1653452376525,"user_tz":-540,"elapsed":261,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"e3b8db71-3e48-4177-a3fe-9f891a362596"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([350065., 440065., 502833., 735204., 836258.])"]},"metadata":{},"execution_count":161}]},{"cell_type":"code","source":["org_p1_idx = long_p2_idx_arr  # long_obj[-1]"],"metadata":{"id":"wgERZ65F5RBB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["new_p1_idx = long_p2_idx_arr  # long_obj[-1]"],"metadata":{"id":"rAao95SEnOY0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["uniq_org_p1_idx = np.unique(org_p1_idx)\n","uniq_new_p1_idx = np.unique(new_p1_idx)\n","print(len(uniq_org_p1_idx))\n","print(len(uniq_new_p1_idx))\n","uniq_new_p1_idx[~np.isin(uniq_new_p1_idx, uniq_org_p1_idx)]\n","# np.unique(new_p1_idx).remove(np.unique(org_p1_idx))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OEQ9KWXVnQ2J","executionInfo":{"status":"ok","timestamp":1653119592395,"user_tz":-540,"elapsed":267,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"85c3e998-5c1e-4b5a-8366-28fe8cc3639b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["153\n","163\n"]},{"output_type":"execute_result","data":{"text/plain":["array([ 35609, 105164, 188999, 347399, 358994, 379304, 379544, 397274, 482474, 550919, 656774, 833129])"]},"metadata":{},"execution_count":220}]},{"cell_type":"code","source":["open_idx = open_info_df.index.to_numpy()\n","# len_df = len(res_df)\n","# s_idx = (open_idx < int(len_df * (1 - test_ratio))) == plot_is\n","# s_open_info_df = open_info_df[s_idx]\n","# s_open_idx = open_idx[s_idx]\n","\n","# open_info_list = [s_open_info_df[col_].to_numpy() for col_ in s_open_info_df.columns]\n","# side_arr, zone_arr, id_arr, id_idx_arr = open_info_list\n","\n","long_open_ = res_df['long_open_{}'.format(config.selection_id)].to_numpy()\n","short_open_ = res_df['short_open_{}'.format(config.selection_id)].to_numpy()\n","\n","long_open_idx = get_index_bybool(long_open_, np.arange(len(res_df)))\n","short_open_idx = get_index_bybool(short_open_, np.arange(len(res_df)))"],"metadata":{"id":"hOtCGUeBQ4hn"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["valid_long_open_idx = long_open_idx[~np.isnan(long_open_idx)]\n","valid_short_open_idx = short_open_idx[~np.isnan(short_open_idx)]\n","\n","# print(valid_long_open_idx[valid_long_open_idx > 4000][:10])\n","# print(valid_short_open_idx[valid_short_open_idx > 4000][:10])\n","\n","print(open_idx[open_idx > 4000][:10])\n","\n","print(np.hstack((long_obj[-1], long_obj[3]))[:10])\n","print(np.hstack((short_obj[-1], short_obj[3]))[:10])\n","# print([:10])"],"metadata":{"id":"QPhjkZQhRLqr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# short_max_outg, short_outg_open_idx = get_max_outg_v2(\"SELL\", config, ohlc_list, short_obj, short_tpout_arr, short_open_epout_0, short_open_epout_gap)\n","# long_max_outg, long_outg_open_idx = get_max_outg_v2(\"BUY\", config, ohlc_list, long_obj, long_tpout_arr, long_open_epout_0, long_open_epout_gap)\n","# short_max_outg, short_open_idx, short_true_open_idxth = get_max_outg_v3(\"SELL\", config, ohlc_list, short_obj, short_tpout_arr, short_open_epout_0, short_open_epout_gap)\n","# long_max_outg, long_open_idx, long_true_open_idxth = get_max_outg_v3(\"BUY\", config, ohlc_list, long_obj, long_tpout_arr, long_open_epout_0, long_open_epout_gap)"],"metadata":{"id":"cFd7Fz0Y6ucU"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"EtjwB7Qk-Grj"},"source":["### significance_v3"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oVifICO4-Grk","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1652442940773,"user_tz":-540,"elapsed":52000,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"5c9539c8-4fa9-4dd9-dbf0-a070618cccdf"},"outputs":[{"output_type":"stream","name":"stderr","text":["wave_point\n","np.sum(short_open_res == 1) : 79370\n","np.sum(long_open_res == 1) : 79066\n","wave_mm\n","np.sum(short_open_res == 1) : 79369\n","np.sum(long_open_res == 1) : 79062\n","point validation\n","np.sum(short_open_res == 1) : 78627\n","np.sum(long_open_res == 1) : 78425\n","cu_wrr_32_ <= config.loc_set.point.wrr_32 : 1.00000 -0.00000 (0.0)\n","co_wrr_32_ <= config.loc_set.point.wrr_32 : 0.18178 -0.00000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 1.6678133010864258\n","en_ex_pairing elapsed time : 0.00150299072265625\n","short_obj.shape : (0, 5)\n","long_obj.shape : (5, 5)\n"]},{"output_type":"stream","name":"stderr","text":["wave_point\n","np.sum(short_open_res == 1) : 79370\n","np.sum(long_open_res == 1) : 79066\n","wave_mm\n","np.sum(short_open_res == 1) : 79369\n","np.sum(long_open_res == 1) : 79062\n","point validation\n","np.sum(short_open_res == 1) : 78627\n","np.sum(long_open_res == 1) : 78425\n","cu_wrr_32_ <= config.loc_set.point.wrr_32 : 1.00000 0.05000 (0.0)\n","co_wrr_32_ <= config.loc_set.point.wrr_32 : 0.18178 0.05000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.938042402267456\n","en_ex_pairing elapsed time : 0.006476640701293945\n","short_obj.shape : (8, 5)\n","long_obj.shape : (38, 5)\n","idep_plot elapsed time : 0.15370750427246094\n"]},{"output_type":"stream","name":"stderr","text":["wave_point\n","np.sum(short_open_res == 1) : 79370\n","np.sum(long_open_res == 1) : 79066\n","wave_mm\n","np.sum(short_open_res == 1) : 79369\n","np.sum(long_open_res == 1) : 79062\n","point validation\n","np.sum(short_open_res == 1) : 78627\n","np.sum(long_open_res == 1) : 78425\n","cu_wrr_32_ <= config.loc_set.point.wrr_32 : 1.00000 0.10000 (0.0)\n","co_wrr_32_ <= config.loc_set.point.wrr_32 : 0.18178 0.10000 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9340569972991943\n","en_ex_pairing elapsed time : 0.03796505928039551\n","short_obj.shape : (72, 5)\n","long_obj.shape : (230, 5)\n","idep_plot elapsed time : 0.16156935691833496\n"]},{"output_type":"stream","name":"stderr","text":["wave_point\n","np.sum(short_open_res == 1) : 79370\n","np.sum(long_open_res == 1) : 79066\n","wave_mm\n","np.sum(short_open_res == 1) : 79369\n","np.sum(long_open_res == 1) : 79062\n","point validation\n","np.sum(short_open_res == 1) : 78627\n","np.sum(long_open_res == 1) : 78425\n","cu_wrr_32_ <= config.loc_set.point.wrr_32 : 1.00000 0.15000 (0.0)\n","co_wrr_32_ <= config.loc_set.point.wrr_32 : 0.18178 0.15000 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9375967979431152\n","en_ex_pairing elapsed time : 0.1277174949645996\n","short_obj.shape : (319, 5)\n","long_obj.shape : (655, 5)\n"]},{"output_type":"stream","name":"stderr","text":["wave_point\n","np.sum(short_open_res == 1) : 79370\n","np.sum(long_open_res == 1) : 79066\n","wave_mm\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.17165017127990723\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 79369\n","np.sum(long_open_res == 1) : 79062\n","point validation\n","np.sum(short_open_res == 1) : 78627\n","np.sum(long_open_res == 1) : 78425\n","cu_wrr_32_ <= config.loc_set.point.wrr_32 : 1.00000 0.20000 (0.0)\n","co_wrr_32_ <= config.loc_set.point.wrr_32 : 0.18178 0.20000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9565761089324951\n","en_ex_pairing elapsed time : 0.26297640800476074\n","short_obj.shape : (840, 5)\n","long_obj.shape : (1244, 5)\n","idep_plot elapsed time : 0.18038082122802734\n"]},{"output_type":"stream","name":"stderr","text":["wave_point\n","np.sum(short_open_res == 1) : 79370\n","np.sum(long_open_res == 1) : 79066\n","wave_mm\n","np.sum(short_open_res == 1) : 79369\n","np.sum(long_open_res == 1) : 79062\n","point validation\n","np.sum(short_open_res == 1) : 78627\n","np.sum(long_open_res == 1) : 78425\n","cu_wrr_32_ <= config.loc_set.point.wrr_32 : 1.00000 0.25000 (0.0)\n","co_wrr_32_ <= config.loc_set.point.wrr_32 : 0.18178 0.25000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9551839828491211\n","en_ex_pairing elapsed time : 0.4788327217102051\n","short_obj.shape : (1505, 5)\n","long_obj.shape : (2026, 5)\n","idep_plot elapsed time : 0.19758844375610352\n"]},{"output_type":"stream","name":"stderr","text":["wave_point\n","np.sum(short_open_res == 1) : 79370\n","np.sum(long_open_res == 1) : 79066\n","wave_mm\n","np.sum(short_open_res == 1) : 79369\n","np.sum(long_open_res == 1) : 79062\n","point validation\n","np.sum(short_open_res == 1) : 78627\n","np.sum(long_open_res == 1) : 78425\n","cu_wrr_32_ <= config.loc_set.point.wrr_32 : 1.00000 0.30000 (0.0)\n","co_wrr_32_ <= config.loc_set.point.wrr_32 : 0.18178 0.30000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9695498943328857\n","en_ex_pairing elapsed time : 0.6392936706542969\n","short_obj.shape : (2265, 5)\n","long_obj.shape : (2762, 5)\n"]},{"output_type":"stream","name":"stderr","text":["wave_point\n","np.sum(short_open_res == 1) : 79370\n","np.sum(long_open_res == 1) : 79066\n","wave_mm\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.21212220191955566\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 79369\n","np.sum(long_open_res == 1) : 79062\n","point validation\n","np.sum(short_open_res == 1) : 78627\n","np.sum(long_open_res == 1) : 78425\n","cu_wrr_32_ <= config.loc_set.point.wrr_32 : 1.00000 0.35000 (0.0)\n","co_wrr_32_ <= config.loc_set.point.wrr_32 : 0.18178 0.35000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9572036266326904\n","en_ex_pairing elapsed time : 0.8163747787475586\n","short_obj.shape : (3033, 5)\n","long_obj.shape : (3326, 5)\n"]},{"output_type":"stream","name":"stderr","text":["wave_point\n","np.sum(short_open_res == 1) : 79370\n","np.sum(long_open_res == 1) : 79066\n","wave_mm\n","np.sum(short_open_res == 1) : 79369\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.233687162399292\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(long_open_res == 1) : 79062\n","point validation\n","np.sum(short_open_res == 1) : 78627\n","np.sum(long_open_res == 1) : 78425\n","cu_wrr_32_ <= config.loc_set.point.wrr_32 : 1.00000 0.40000 (0.0)\n","co_wrr_32_ <= config.loc_set.point.wrr_32 : 0.18178 0.40000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9504046440124512\n","en_ex_pairing elapsed time : 0.9629926681518555\n","short_obj.shape : (3628, 5)\n","long_obj.shape : (3810, 5)\n"]},{"output_type":"stream","name":"stderr","text":["wave_point\n","np.sum(short_open_res == 1) : 79370\n","np.sum(long_open_res == 1) : 79066\n","wave_mm\n","np.sum(short_open_res == 1) : 79369\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.23377537727355957\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(long_open_res == 1) : 79062\n","point validation\n","np.sum(short_open_res == 1) : 78627\n","np.sum(long_open_res == 1) : 78425\n","cu_wrr_32_ <= config.loc_set.point.wrr_32 : 1.00000 0.45000 (0.0)\n","co_wrr_32_ <= config.loc_set.point.wrr_32 : 0.18178 0.45000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9773266315460205\n","en_ex_pairing elapsed time : 1.1199846267700195\n","short_obj.shape : (3987, 5)\n","long_obj.shape : (4096, 5)\n"]},{"output_type":"stream","name":"stderr","text":["wave_point\n","np.sum(short_open_res == 1) : 79370\n","np.sum(long_open_res == 1) : 79066\n","wave_mm\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.2484416961669922\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 79369\n","np.sum(long_open_res == 1) : 79062\n","point validation\n","np.sum(short_open_res == 1) : 78627\n","np.sum(long_open_res == 1) : 78425\n","cu_wrr_32_ <= config.loc_set.point.wrr_32 : 1.00000 0.50000 (0.0)\n","co_wrr_32_ <= config.loc_set.point.wrr_32 : 0.18178 0.50000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9605038166046143\n","en_ex_pairing elapsed time : 1.1008503437042236\n","short_obj.shape : (4218, 5)\n","long_obj.shape : (4177, 5)\n"]},{"output_type":"stream","name":"stderr","text":["wave_point\n","np.sum(short_open_res == 1) : 79370\n","np.sum(long_open_res == 1) : 79066\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.24922657012939453\n"]},{"output_type":"stream","name":"stderr","text":["wave_mm\n","np.sum(short_open_res == 1) : 79369\n","np.sum(long_open_res == 1) : 79062\n","point validation\n","np.sum(short_open_res == 1) : 78627\n","np.sum(long_open_res == 1) : 78425\n","cu_wrr_32_ <= config.loc_set.point.wrr_32 : 1.00000 0.55000 (0.0)\n","co_wrr_32_ <= config.loc_set.point.wrr_32 : 0.18178 0.55000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9583590030670166\n","en_ex_pairing elapsed time : 1.1536345481872559\n","short_obj.shape : (4339, 5)\n","long_obj.shape : (4220, 5)\n"]},{"output_type":"stream","name":"stderr","text":["wave_point\n","np.sum(short_open_res == 1) : 79370\n","np.sum(long_open_res == 1) : 79066\n","wave_mm\n","np.sum(short_open_res == 1) : 79369\n","np.sum(long_open_res == 1) : 79062\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.24882173538208008\n"]},{"output_type":"stream","name":"stderr","text":["point validation\n","np.sum(short_open_res == 1) : 78627\n","np.sum(long_open_res == 1) : 78425\n","cu_wrr_32_ <= config.loc_set.point.wrr_32 : 1.00000 0.60000 (0.0)\n","co_wrr_32_ <= config.loc_set.point.wrr_32 : 0.18178 0.60000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9655780792236328\n","en_ex_pairing elapsed time : 1.1792562007904053\n","short_obj.shape : (4433, 5)\n","long_obj.shape : (4239, 5)\n"]},{"output_type":"stream","name":"stderr","text":["wave_point\n","np.sum(short_open_res == 1) : 79370\n","np.sum(long_open_res == 1) : 79066\n","wave_mm\n","np.sum(short_open_res == 1) : 79369\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.25986385345458984\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(long_open_res == 1) : 79062\n","point validation\n","np.sum(short_open_res == 1) : 78627\n","np.sum(long_open_res == 1) : 78425\n","cu_wrr_32_ <= config.loc_set.point.wrr_32 : 1.00000 0.65000 (0.0)\n","co_wrr_32_ <= config.loc_set.point.wrr_32 : 0.18178 0.65000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9574406147003174\n","en_ex_pairing elapsed time : 1.2422080039978027\n","short_obj.shape : (4452, 5)\n","long_obj.shape : (4098, 5)\n"]},{"output_type":"stream","name":"stderr","text":["wave_point\n","np.sum(short_open_res == 1) : 79370\n","np.sum(long_open_res == 1) : 79066\n","wave_mm\n","np.sum(short_open_res == 1) : 79369\n","np.sum(long_open_res == 1) : 79062\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.2535998821258545\n"]},{"output_type":"stream","name":"stderr","text":["point validation\n","np.sum(short_open_res == 1) : 78627\n","np.sum(long_open_res == 1) : 78425\n","cu_wrr_32_ <= config.loc_set.point.wrr_32 : 1.00000 0.70000 (0.0)\n","co_wrr_32_ <= config.loc_set.point.wrr_32 : 0.18178 0.70000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9548816680908203\n","en_ex_pairing elapsed time : 1.1278448104858398\n","short_obj.shape : (4382, 5)\n","long_obj.shape : (3992, 5)\n"]},{"output_type":"stream","name":"stderr","text":["wave_point\n","np.sum(short_open_res == 1) : 79370\n","np.sum(long_open_res == 1) : 79066\n","wave_mm\n","np.sum(short_open_res == 1) : 79369\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.25209593772888184\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(long_open_res == 1) : 79062\n","point validation\n","np.sum(short_open_res == 1) : 78627\n","np.sum(long_open_res == 1) : 78425\n","cu_wrr_32_ <= config.loc_set.point.wrr_32 : 1.00000 0.75000 (0.0)\n","co_wrr_32_ <= config.loc_set.point.wrr_32 : 0.18178 0.75000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9675965309143066\n","en_ex_pairing elapsed time : 1.1214463710784912\n","short_obj.shape : (4253, 5)\n","long_obj.shape : (3882, 5)\n"]},{"output_type":"stream","name":"stderr","text":["wave_point\n","np.sum(short_open_res == 1) : 79370\n","np.sum(long_open_res == 1) : 79066\n","wave_mm\n","np.sum(short_open_res == 1) : 79369\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.2552158832550049\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(long_open_res == 1) : 79062\n","point validation\n","np.sum(short_open_res == 1) : 78627\n","np.sum(long_open_res == 1) : 78425\n","cu_wrr_32_ <= config.loc_set.point.wrr_32 : 1.00000 0.80000 (0.0)\n","co_wrr_32_ <= config.loc_set.point.wrr_32 : 0.18178 0.80000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 1.2942922115325928\n","en_ex_pairing elapsed time : 1.1557459831237793\n","short_obj.shape : (4074, 5)\n","long_obj.shape : (3755, 5)\n"]},{"output_type":"stream","name":"stderr","text":["wave_point\n","np.sum(short_open_res == 1) : 79370\n","np.sum(long_open_res == 1) : 79066\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.24727678298950195\n"]},{"output_type":"stream","name":"stderr","text":["wave_mm\n","np.sum(short_open_res == 1) : 79369\n","np.sum(long_open_res == 1) : 79062\n","point validation\n","np.sum(short_open_res == 1) : 78627\n","np.sum(long_open_res == 1) : 78425\n","cu_wrr_32_ <= config.loc_set.point.wrr_32 : 1.00000 0.85000 (0.0)\n","co_wrr_32_ <= config.loc_set.point.wrr_32 : 0.18178 0.85000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9597580432891846\n","en_ex_pairing elapsed time : 1.0517606735229492\n","short_obj.shape : (3823, 5)\n","long_obj.shape : (3569, 5)\n"]},{"output_type":"stream","name":"stderr","text":["wave_point\n","np.sum(short_open_res == 1) : 79370\n","np.sum(long_open_res == 1) : 79066\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.26427507400512695\n"]},{"output_type":"stream","name":"stderr","text":["wave_mm\n","np.sum(short_open_res == 1) : 79369\n","np.sum(long_open_res == 1) : 79062\n","point validation\n","np.sum(short_open_res == 1) : 78627\n","np.sum(long_open_res == 1) : 78425\n","cu_wrr_32_ <= config.loc_set.point.wrr_32 : 1.00000 0.90000 (1.0)\n","co_wrr_32_ <= config.loc_set.point.wrr_32 : 0.18178 0.90000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 1.0179243087768555\n","en_ex_pairing elapsed time : 1.0500407218933105\n","short_obj.shape : (3840, 5)\n","long_obj.shape : (3553, 5)\n"]},{"output_type":"stream","name":"stderr","text":["wave_point\n","np.sum(short_open_res == 1) : 79370\n","np.sum(long_open_res == 1) : 79066\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.25498342514038086\n"]},{"output_type":"stream","name":"stderr","text":["wave_mm\n","np.sum(short_open_res == 1) : 79369\n","np.sum(long_open_res == 1) : 79062\n","point validation\n","np.sum(short_open_res == 1) : 78627\n","np.sum(long_open_res == 1) : 78425\n","cu_wrr_32_ <= config.loc_set.point.wrr_32 : 1.00000 0.95000 (1.0)\n","co_wrr_32_ <= config.loc_set.point.wrr_32 : 0.18178 0.95000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 1.0456984043121338\n","en_ex_pairing elapsed time : 1.3167588710784912\n","short_obj.shape : (3666, 5)\n","long_obj.shape : (3300, 5)\n","idep_plot elapsed time : 0.2509620189666748\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1728x576 with 36 Axes>"],"image/png":"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YOPGjQCATZs2Ydu2bTh37hyioqKQlZWFKVOmAHjazcKSJUtw4cIFJCcno127dlKuApEsaOBpZ7tERERERNXWsmXL0KBBA4wZM0bqVIiIiIiISoVX7BIRERFRtePg4IAWLVoAANq0aYNx48bxzhoiIiIikhVtqRMgIiIiIlK1WrVqYdeuXTA3N0diYiJWrlyJQ4cOSZ0WEREREVGpsSsGIiIiIiIiIiIiIplhVwxEREREREREREREMsOGXSIiIiIiIiIiIiKZYcMuERERERERERERkcywYZeIiIiIiIiIiIhIZtiwS0RERERERERERCQzbNglIiIiIiIiIiIikhk27BIRERERERERERHJDBt2iYiIiIiIiIiIiGSGDbtEREREREREREREMsOGXSIiIiIiIiIiIiKZYcMuERERERERERERkcywYZeIiIiIiIiIiIhIZtiwS0RERERERERERCQzbNglIiIiIiIiIiIikhk27BIRERERERERERHJDBt2iYiIiIiIiIiIiGSGDbtEREREREREREREMsOGXSIiIiIiIiIiIiKZYcMuERERERERERERkcywYZeIiIiIiIiIiIhIZtiwS0RERERERERERCQzbNglIiIiIiIiIiIikhk27BIRERERERERERHJDBt2iYiIiIiIiIiIiGSGDbtEREREREREREREMsOGXSIiIiIiIiIiIiKZYcMuERERERERERERkcywYZeIiIiIiIiIiIhIZtiwS0TFioqKQvfu3aVOg5Rk8+bN8PLyKnG6GjVqwNfXF48fP8aePXtUkBkRUfXC+lr1sMYSEakH1tiqhfW1ZGzYldjw4cNx584dpKen4+DBgzA2Ni522n79+iEoKAhpaWm4cOECHB0dFa95eHggLy8PaWlpinB3d1fFKqgVIQSaNGkidRqkYsbGxjhw4ADS09Nx584dDB8+/JXTu7m54ezZs0hLS0NCQgKmTp2qeC0qKgoZGRmK7ejYsWOVnb7aGTJkCMzMzGBiYoKhQ4e+ctqy7MNcXFxw+fJlPHnyBJcvX4aLi4viNU9PT+Tk5BTahzVu3Fhp60TVD+ur8rHGVj/KrK/W1tY4ffo0njx5gtDQ0Gp70M0aS1UBa6zyscZWP6yxylWd6ysbdktJS0tL6fN0cnLC+vXr8f7778PMzAwZGRlYu3ZtkdM2bdoUO3bswIQJE2Bk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\n"},"metadata":{}}],"source":["# from google.colab import output\n","# ------------ survey param ------------ #\n","# itv_num_list = [1, 3, 5, 15]\n","# itv_list = ['15m', '30m', '1h', '4h']\n","# itv_list = ['3m', '5m', '15m', '30m', '1h', '4h']\n","# val_list = np.arange(-0.5, -0.9, -0.1)     # prcn 1\n","val_list = np.arange(-0.0, -0.5, -0.03)  # prcn 2\n","val_list = np.arange(-0.0, 1, 0.05)  # prcn 2\n","# val_list = np.arange(-0.5, -0.6, -0.005)    # prcn 3\n","# val_list = np.arange(0.944, 0.945, 0.0001)    # prcn 4\n","# val_list = np.arange(70, 80, 1)   # prcn -1\n","# val_list = np.arange(200, 180, -5)   # prcn -2\n","# val_list = talib.get_function_groups()['Pattern Recognition']\n","\n","# ------------ get survey_res ------------ #\n","result = []\n","res_shape = (3, 12)  # short, long, both x data\n","config_list_copy = copy.deepcopy(config_list)\n","for set_val in val_list:\n","  # ------------ open 결정 이전의 인자값 ------------ #\n","  # ------ point * dur. ------ #\n","  config_list_copy[0].loc_set.point.wrr_32 = set_val\n","  # config_list_copy[0].loc_set.point.candle_pattern = set_val\n","  # config_list_copy[0].loc_set.zone.degree_list = set_val\n","  # config_list_copy[0].loc_set.point2.wick_score_list = str([set_val])\n","  # config_list_copy[0].loc_set.zone.ir = set_val  \n","  # config_list_copy[0].loc_set.zone.abs_ratio = set_val  \n","\n","  # ------------ open 결정 이후의 인자값 ------------ #\n","  # ------ utils ------ #\n","  # config_list_copy[0].tr_set.tp_gap = set_val  \n","  # config_list_copy[0].tr_set.ep_gap = set_val \n","  # config_list_copy[0].tr_set.out_gap = set_val  \n","\n","  # config_list_copy[0].tr_set.tp_gap = abs(set_val) - 0.5\n","  # config_list_copy[0].tr_set.out_gap = set_val + 0.5\n","  # config_list_copy[0].tr_set.wb_tp_gap = config_list_copy[0].tr_set.tp_gap\n","  # config_list_copy[0].tr_set.wb_out_gap = config_list_copy[0].tr_set.out_gap\n","\n","  # ------ entry, exit (ep, tp, out vars.) ------ #\n","  # config_list_copy[0].tr_set.expire_k = set_val\n","  # config_list_copy[0].ep_set.expire_tick = set_val  \n"," \n","  for utils_, config_ in zip(utils_list, config_list_copy):\n","    # enlist_rtc(res_df, config_, np_timeidx)\n","    enlist_tr(res_df, config_, np_timeidx)\n","  open_info_df = get_open_info_df(ep_loc_v3, res_df, np_timeidx, ID_list, config_list_copy, id_idx_list)   # point * mr_res 이기 때문에 utils_tr & rtc 의 영향을 충분히 받음\n","\n","  try:\n","    result.append(get_res_v5(res_df, open_info_df, ohlc_list, config_list_copy, np_timeidx, funcs, test_ratio=test_ratio, plot_is=1, signi=True))    \n","  except:\n","    result.append(np.full(res_shape, np.nan))\n","    # pass\n","\n","survey_res_list = [np.array(result)[:, s_i::3] for s_i in range(3)]   # 3 for s, l, b\n","# short_res, long_res, both_res = survey_res_list\n","\n","# ------------ plot survey_res ------------ #\n","title_list = [\"short\", \"long\", \"both\"]\n","sub_title_list = ['hhm', 'hlm', 'len_pr', 'dpf', 'wr', 'sr', 'acc_pr', 'sum_pr', 'min_pr', 'liqd', 'acc_mdd', 'sum_mdd']\n","space_ = \" \" * 120\n","\n","fig = plt.figure(figsize=(24, 8))\n","plt.style.use('dark_background')\n","gs = gridspec.GridSpec(nrows=1,\n","                        ncols=3,\n","                        # height_ratios=[1, 1, 1]\n","                      )\n","# nrows, ncols, h_r = 3, 3, [1, 1, 1]\n","nrows, ncols, h_r = 3, 4, [1, 1, 1]\n","# nrows, ncols, h_r = 4, 3, [1, 1, 1, 1]\n","# if d_idx == 0:\n","# else:\n","  # nrows, ncols, h_r = 2, 2, [1, 1]\n","\n","for d_idx, (title_name, survey_res) in enumerate(zip(title_list, survey_res_list)):  \n","  inner_gs = gs[d_idx].subgridspec(nrows=nrows,\n","                        ncols=ncols,\n","                        height_ratios=h_r\n","                      )\n","  for in_idx, (data_, sub_title) in enumerate(zip(survey_res.T, sub_title_list)):\n","    plt.subplot(inner_gs[in_idx])\n","    data = data_.ravel()\n","    valid_idx = ~np.isnan(data)\n","    if np.sum(valid_idx) > 0:\n","      if type(val_list[0]) == str:\n","        x, y = np.arange(len(val_list))[valid_idx], data[valid_idx]\n","      else:\n","        x, y = val_list[valid_idx], data[valid_idx]\n","      plt.plot(x, y)  # 앞에서부터 len(result) 만큼만    \n","      plt.title(sub_title + '_{:.2f}'.format(x[np.argmax(y)]))\n","    else:\n","      plt.title(sub_title)\n","\n","plt.suptitle(space_.join(title_list))\n","plt.show()\n","# print(\"\\n\")"]},{"cell_type":"code","source":["\n","# ------------ plot survey_res ------------ #\n","title_list = [\"short\", \"long\", \"both\"]\n","sub_title_list = ['prcn', 'wb', 'len_pr', 'dpf', 'wr', 'sr', 'acc_pr', 'sum_pr', 'min_pr', 'liqd', 'acc_mdd', 'sum_mdd']\n","space_ = \" \" * 120\n","\n","fig = plt.figure(figsize=(24, 8))\n","plt.style.use('dark_background')\n","gs = gridspec.GridSpec(nrows=1,\n","                        ncols=3,\n","                        # height_ratios=[1, 1, 1]\n","                      )\n","# nrows, ncols, h_r = 3, 3, [1, 1, 1]\n","nrows, ncols, h_r = 3, 4, [1, 1, 1]\n","# nrows, ncols, h_r = 4, 3, [1, 1, 1, 1]\n","# if d_idx == 0:\n","# else:\n","  # nrows, ncols, h_r = 2, 2, [1, 1]\n","\n","for d_idx, (title_name, survey_res) in enumerate(zip(title_list, survey_res_list)):  \n","  inner_gs = gs[d_idx].subgridspec(nrows=nrows,\n","                        ncols=ncols,\n","                        height_ratios=h_r\n","                      )\n","  for in_idx, (data_, sub_title) in enumerate(zip(survey_res.T, sub_title_list)):\n","    plt.subplot(inner_gs[in_idx])\n","    data = data_.ravel()\n","    valid_idx = ~np.isnan(data)\n","    if np.sum(valid_idx) > 0:\n","      if type(val_list[0]) == str:\n","        x, y = np.arange(len(val_list))[valid_idx], data[valid_idx]\n","      else:\n","        x, y = val_list[valid_idx], data[valid_idx]\n","      plt.plot(x, y)  # 앞에서부터 len(result) 만큼만    \n","      plt.title(sub_title + '_{:.2f}'.format(x[np.argmax(y)]))\n","    else:\n","      plt.title(sub_title)\n","\n","plt.suptitle(space_.join(title_list))\n","plt.show()"],"metadata":{"id":"oE5zkT75Beiy"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"EJ4f-3Zf4ImT"},"source":["### backtrader validation"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pbYUlJl34ImU"},"outputs":[],"source":["# ------ open validation ------ #\n","long_open_ = res_df['long_open_{}'.format(config.selection_id)].to_numpy()\n","long_open_ts = list(map(lambda x : str(x), res_df.index[long_open_ == 1]))  "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wyYMYcxx4ImV"},"outputs":[],"source":["long_index = open_info_df.side == 'BUY'\n","\n","for ts in res_df.index[open_info_df.index[long_index]]:\n","  print(ts)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BPI-9QX74ImW"},"outputs":[],"source":["trade_log_name = \"ETHUSDT_1650120909.pkl\"\n","trade_log_dir_path = \"./trade_log/0405_wave_trader_realterm\"\n","\n","with open(os.path.join(trade_log_dir_path, trade_log_name), 'rb') as f:\n","  trade_log = pickle.load(f)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FMXhzaTK4ImX"},"outputs":[],"source":["trade_log"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DiTKuq9T4ImY"},"outputs":[],"source":["# 1. ts 에 pair 된 en_p, ex_p 만 비교하면 될 것\n","#   -> open_idx, en_idx, ex_idx 조회하면 될 것\n","\n","pos_side = \"BUY\" # SELL BUY\n","val_obj = short_obj if pos_side == \"SELL\" else long_obj\n","\n","# ------ get idep trade_info ------ #\n","en_ts = list(map(lambda x : str(x), res_df.index[val_obj[2].astype(int).ravel()])) \n","ex_ts = list(map(lambda x : str(x), res_df.index[val_obj[3].astype(int).ravel()])) \n","en_p = val_obj[0].ravel()\n","ex_p = val_obj[1].ravel()\n","\n","# ------ execute ts comparison ------ #\n","logged_en_ts = [k for k, v in trade_log.items() if 'entry' in v if pos_side in v]\n","\n","lacked_ts = [ts for ts in en_ts if not ts in logged_en_ts]   # trade_log 에 없는 거래\n","added_ts = [ts for ts in logged_en_ts if not ts in en_ts]    # trade_log 에만 있는 거래\n","\n","print(lacked_ts)\n","print(added_ts)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VnTmGTJI4ImZ"},"outputs":[],"source":["# ------ check added_ts ------ #\n","keys = list(trade_log.keys())\n","\n","for k_i in range(len(keys)):\n","  if keys[k_i] in added_ts:\n","    # print(trade_log[keys[k_i]])\n","    # print(trade_log[keys[k_i + 1]])\n","    print(keys[k_i], trade_log[keys[k_i]])\n","    print(keys[k_i + 1], trade_log[keys[k_i + 1]])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Vn5x7mcP4ImZ"},"outputs":[],"source":["# ------ price sync_check ------ #\n","accept_price_gap = 0.1\n","for i in range(len(en_ts)):\n","  try:\n","    print(en_ts[i], trade_log[en_ts[i]][0] - en_p[i])\n","    # print(trade_log[str(ex_ts[i])])\n","    # print(ex_ts[i], trade_log[ex_ts[i]][0] - ex_p[i])\n","    print(ex_ts[i])\n","    print()\n","\n","  except Exception as e:\n","    print(e)\n"]},{"cell_type":"markdown","metadata":{"id":"1GVZ03zDyU2N"},"source":["### legacy"]},{"cell_type":"markdown","metadata":{"id":"IWO7KkqltMFt"},"source":["#### main_functions"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MY1csdNRLGsk"},"outputs":[],"source":["def get_open_info_df_v2(ep_loc_v2, res_df, np_timeidx, ID_list, config_list, id_idx_list, open_num=1):\n","  start_0 = time.time()\n","  # ------ get mr_res, zone_arr ------ #\n","  short_mr_res_obj = np.array([ep_loc_v2(res_df, config_, np_timeidx, show_detail=True, ep_loc_side=OrderSide.SELL) for config_ in config_list])\n","  long_mr_res_obj = np.array([ep_loc_v2(res_df, config_, np_timeidx, show_detail=True, ep_loc_side=OrderSide.BUY) for config_ in config_list])\n","  short_open_idx_list = [np.where(res_df['short_open{}_{}'.format(open_num, id)].to_numpy() * mr_res)[0] for id, mr_res in zip(ID_list, short_mr_res_obj[:, 0].astype(np.float64))]   # \"point * mr_Res\"\n","  long_open_idx_list = [np.where(res_df['long_open{}_{}'.format(open_num, id)].to_numpy() * mr_res)[0] for id, mr_res in zip(ID_list, long_mr_res_obj[:, 0].astype(np.float64))]  # zip 으로 zone (str) 과 묶어서 dtype 변경됨\n","\n","  # ------ open_info_arr ------ #\n","  short_side_list = [np.full(len(list_), OrderSide.SELL) for list_ in short_open_idx_list]\n","  long_side_list = [np.full(len(list_), OrderSide.BUY) for list_ in long_open_idx_list]\n","\n","  short_zone_list = [zone_res[short_open_idx] for zone_res, short_open_idx in zip(short_mr_res_obj[:, 1], short_open_idx_list)]\n","  long_zone_list = [zone_res[long_open_idx] for zone_res, long_open_idx in zip(long_mr_res_obj[:, 1], long_open_idx_list)]\n","\n","  short_id_list = [np.full(len(list_), id) for id, list_ in zip(ID_list, short_open_idx_list)]\n","  long_id_list = [np.full(len(list_), id) for id, list_ in zip(ID_list, long_open_idx_list)]\n","\n","  selected_id_idx = np.arange(len(id_idx_list))\n","  short_id_idx_list = [np.full(len(list_), id) for id, list_ in zip(selected_id_idx, short_open_idx_list)]\n","  long_id_idx_list = [np.full(len(list_), id) for id, list_ in zip(selected_id_idx, long_open_idx_list)]\n","\n","  # ------ get open_info_df ------ #\n","  #   series 만들어서 short / long 끼리 합치고 둘이 합치고, 중복은 우선 순위 정해서 제거\n","  short_open_df_list = [pd.DataFrame(index=index_, data=np.vstack((data_)).T, columns=['side', 'zone', 'id', 'id_idx']) for index_, data_ in zip(short_open_idx_list, zip(short_side_list, short_zone_list, short_id_list, short_id_idx_list))]\n","  long_open_df_list = [pd.DataFrame(index=index_, data=np.vstack((data_)).T, columns=['side', 'zone', 'id', 'id_idx']) for index_, data_ in zip(long_open_idx_list, zip(long_side_list, long_zone_list, long_id_list, long_id_idx_list))]\n","\n","  open_info_df = pd.concat(short_open_df_list + long_open_df_list)\n","  # ------ sorting + unique ------ #\n","  open_info_df.sort_index(inplace=True)\n","  # print(len(open_info_df))\n","  # print(len(open_info_df))\n","  # open_info_df.head()\n","  print(\"get_open_info_df elapsed time :\", time.time() - start_0)\n","  return open_info_df[~open_info_df.index.duplicated(keep='first')]  # 먼저 순서를 우선으로 지정  "]},{"cell_type":"code","execution_count":21,"metadata":{"id":"eiQ36_SLLE3w","executionInfo":{"status":"ok","timestamp":1653629640520,"user_tz":-540,"elapsed":355,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["def get_res_v8(res_df, open_info_df_list, ohlc_list, config_list, np_timeidx, funcs, check_hlm=0, inversion=False, test_ratio=0.3, plot_is=True, signi=False, show_detail=False):\n","  # ------------ make open_info_list ------------ #\n","  open_idx1, open_idx2 = [open_info_df.index.to_numpy() for open_info_df in open_info_df_list]\n","  len_df = len(res_df)\n","\n","  sample_len = int(len_df * (1 - test_ratio))\n","  sample_idx1 = (open_idx1 < sample_len) == plot_is  # in / out sample plot 여부\n","  sample_open_idx1 = open_idx1[sample_idx1]  \n","  sample_idx2 = (open_idx2 < sample_len) == plot_is  # in / out sample plot 여부\n","\n","  # ------------ open_info_list 기준 = p1 ------------ #\n","  sample_open_info_df1, sample_open_info_df2 = [df_[idx_] for df_, idx_ in zip(open_info_df_list, [sample_idx1, sample_idx2])]\n","  open_info1 = [sample_open_info_df1[col_].to_numpy() for col_ in sample_open_info_df1.columns]\n","\n","  if check_hlm in [0, 1]:   # 여기서 open_info 자동화하더라도, utils info 는 직접 실행해주어야함\n","    sample_open_idx2 = sample_open_idx1\n","    open_info2 = open_info1\n","  else:\n","    sample_open_idx2 = open_idx2[sample_idx2]\n","    open_info2 = [sample_open_info_df2[col_].to_numpy() for col_ in sample_open_info_df2.columns]\n","\n","  # ------------ get paired_res ------------ #\n","  start_0 = time.time()\n","  paired_res = en_ex_pairing_v8(res_df, [sample_open_idx1, sample_open_idx2], [open_info1, open_info2], ohlc_list, config_list, np_timeidx, funcs, check_hlm, show_detail)\n","  # valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr = paired_res\n","  print(\"en_ex_pairing elapsed time :\", time.time() - start_0)  #  0.37 --> 0.3660471439361572 --> 0.21(lesser if)\n","\n","  # ------------ idep_plot ------------ #\n","  start_0 = time.time()\n","  high, low = ohlc_list[1:3]\n","  res = idep_plot_v16(res_df, len_df, config_list[0], high, low, sample_open_info_df1, paired_res, inversion=inversion, sample_ratio=1 - test_ratio, signi=signi)\n","  print(\"idep_plot elapsed time :\", time.time() - start_0)   # 1.40452 (v6) 1.4311 (v5)\n","\n","  return res"]},{"cell_type":"code","execution_count":22,"metadata":{"id":"xafHpMLwESKf","executionInfo":{"status":"ok","timestamp":1653629642539,"user_tz":-540,"elapsed":329,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["def idep_plot_v16(res_df, len_df, config, high, low, open_info_df1, paired_res, inversion=False, sample_ratio=0.7, title_position=(0.5, 0.5),\n","                  fontsize=15, signi=False):  # open_idx, side_arr\n","    if not signi:\n","        plt.style.use(['dark_background', 'fast'])\n","        plt.figure(figsize=(24, 8))\n","        gs = gridspec.GridSpec(nrows=2,  # row 몇 개\n","                               ncols=3,  # col 몇 개\n","                               height_ratios=[10, 1]\n","                               # height_ratios=[10, 10, 1]\n","                               )\n","    gs_idx = 0\n","    # plt.suptitle(key)\n","\n","    p_ranges, p_qty_ratio = literal_eval(config.tp_set.p_ranges), literal_eval(config.tp_set.p_qty_ratio)\n","    assert np.sum(p_qty_ratio) == 1.0\n","    assert len(p_ranges) == len(p_qty_ratio)\n","\n","    if sample_ratio is not None:\n","        sample_len = int(len_df * sample_ratio)\n","    else:\n","        sample_len = len_df\n","\n","    # ------ short & long data preparation ------ #\n","    # start_0 = time.time()\n","\n","    net_p1_idx_arr, p1_idx_arr, p2_idx_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr, tr_arr = paired_res\n","    assert len(p1_idx_arr) != 0, \"assert len(p1_idx_arr) != 0\"\n","\n","    short_net_p1_idx_arr = net_p1_idx_arr[np.where(open_info_df1.side.loc[net_p1_idx_arr] == OrderSide.SELL)[0]]\n","    long_net_p1_idx_arr = net_p1_idx_arr[np.where(open_info_df1.side.loc[net_p1_idx_arr] == OrderSide.BUY)[0]]\n","\n","    short_net_p1_frq = len(short_net_p1_idx_arr)\n","    long_net_p1_frq = len(long_net_p1_idx_arr)\n","    # print(\"len(short_net_p1_true_bias_bool) :\", len(short_net_p1_idx_arr))\n","    # print(\"len(long_net_p1_true_bias_bool) :\", len(long_net_p1_idx_arr))\n","\n","    short_p1_openi_idx = np.where(open_info_df1.side.loc[p1_idx_arr] == OrderSide.SELL)[0]  # p1_idx_arr 에 대한 idx, # side_arr,\n","    long_p1_openi_idx = np.where(open_info_df1.side.loc[p1_idx_arr] == OrderSide.BUY)[0]\n","\n","    # p1_idx = open_idx[p1_openi_arr].reshape(-1, 1)   # != p1_idx_arr, p1_openi_arr 은 exit_done 기준임\n","\n","    np_obj = np.hstack((pair_price_arr, pair_idx_arr, p1_idx_arr.reshape(-1, 1)))  # p1_idx_arr is 1d, need to be changed to 2d (for stacking)\n","    short_obj = np_obj[short_p1_openi_idx]\n","    long_obj = np_obj[long_p1_openi_idx]\n","    both_obj = np.vstack((short_obj, long_obj))\n","    # print(\"short_obj.shape :\", short_obj.shape)\n","    # print(\"long_obj.shape :\", long_obj.shape)\n","\n","    short_obj, long_obj, both_obj = [np.split(obj_, 5, axis=1) for obj_ in [short_obj, long_obj, both_obj]]\n","\n","    short_p2_idx_arr, long_p2_idx_arr = [p2_idx_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_lvrg_arr, long_lvrg_arr = [lvrg_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_fee_arr, long_fee_arr = [fee_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_tpout_arr, long_tpout_arr = [tpout_arr[openi_idx_] for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    # short_bias_arr, long_bias_arr = [bias_arr[openi_idx_] for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_tr_arr, long_tr_arr = [tr_arr[openi_idx_] for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    # print(\"long_bias_arr.shape :\", long_bias_arr.shape)\n","    # print(\"short / long arr setting elapsed time :\", time.time() - start_0)\n","\n","    # start_0 = time.time()\n","\n","    short_tpbox_hhm, long_tpbox_hhm, short_tpbox_p2exec_hhm, long_tpbox_p2exec_hhm, short_outbox_hhm, long_outbox_hhm, short_p2_true_bias_bool, long_p2_true_bias_bool, \\\n","          short_tp_1, short_tp_0, long_tp_1, long_tp_0, short_out_1, short_out_0, long_out_1, long_out_0, short_ep2_0, long_ep2_0 = \\\n","      get_wave_bias_v5(res_df, config, high, low, len_df, short_net_p1_idx_arr, long_net_p1_idx_arr, short_p2_idx_arr, long_p2_idx_arr, short_obj, long_obj)\n","\n","    # print(\"get_wave_bias elapsed time :\", time.time() - start_0)\n","\n","    len_short, len_long = len(short_p1_openi_idx), len(long_p1_openi_idx)\n","\n","    # ------ plot_data ------ #\n","    try:\n","        # start_0 = time.time()\n","        if len_short == 0:\n","            short_pr = []\n","            gs_idx += 1\n","        else:\n","            short_tr = short_tr_arr.mean()\n","            short_pr, short_liqd = get_pr_v4(OrderSide.SELL, high, low, short_obj, short_tpout_arr, short_lvrg_arr, short_fee_arr, p_ranges,\n","                                             p_qty_ratio, inversion)\n","            short_total_pr = to_total_pr(len_df, short_pr, short_obj[-2])\n","            short_cum_pr = np.cumprod(short_total_pr)\n","            short_hlm = hlm(short_pr, short_p2_true_bias_bool)\n","            short_trade_ticks = np.mean(short_obj[-2] - short_obj[-1])\n","            if signi:\n","                short_idep_res_obj = (short_tpbox_p2exec_hhm, short_hlm) + get_res_info_nb_v2(sample_len, short_pr, short_total_pr, short_cum_pr, short_liqd)\n","            else:\n","                gs_idx = plot_info_v8(gs, gs_idx, len_df, sample_len, short_tr, short_tpbox_hhm, short_tpbox_p2exec_hhm, short_outbox_hhm, short_hlm, short_trade_ticks, short_net_p1_frq, short_pr, short_total_pr,\n","                                      short_cum_pr, short_liqd, short_lvrg_arr.mean(), title_position, fontsize)\n","        # print(\"short plot_data elapsed time :\", time.time() - start_0)\n","\n","    except Exception as e:\n","        gs_idx += 1\n","        print(\"error in short plot_data :\", e)\n","\n","    try:\n","        # start_0 = time.time()\n","        if len_long == 0:\n","            long_pr = []\n","            gs_idx += 1\n","        else:\n","            long_tr = long_tr_arr.mean()\n","            long_pr, long_liqd = get_pr_v4(OrderSide.BUY, high, low, long_obj, long_tpout_arr, long_lvrg_arr, long_fee_arr, p_ranges, p_qty_ratio,\n","                                           inversion)\n","            long_total_pr = to_total_pr(len_df, long_pr, long_obj[-2])\n","            long_cum_pr = np.cumprod(long_total_pr)\n","            # long_hhm = long_net_p1_hhm\n","            long_hlm = hlm(long_pr, long_p2_true_bias_bool)\n","            long_trade_ticks = np.mean(long_obj[-2] - long_obj[-1])\n","            if signi:\n","                long_idep_res_obj = (long_tpbox_p2exec_hhm, long_hlm) + get_res_info_nb_v2(sample_len, long_pr, long_total_pr, long_cum_pr, long_liqd)\n","            else:\n","                gs_idx = plot_info_v8(gs, gs_idx, len_df, sample_len, long_tr, long_tpbox_hhm, long_tpbox_p2exec_hhm, long_outbox_hhm, long_hlm, long_trade_ticks, long_net_p1_frq, long_pr, long_total_pr,\n","                                      long_cum_pr, long_liqd, long_lvrg_arr.mean(), title_position, fontsize)\n","        # print(\"long plot_data elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","        gs_idx += 1\n","        print(\"error in long plot_data :\", e)\n","\n","    try:\n","        # start_0 = time.time()\n","        if len_short * len_long == 0:\n","            both_pr = []\n","            gs_idx += 1\n","        else:\n","            both_tr = (short_tr + long_tr) / 2\n","            both_pr = np.vstack((short_pr, long_pr))  # for 2d arr, obj 를 1d 로 만들지 않는 이상, pr 은 2d 유지될 것\n","            both_total_pr = to_total_pr(len_df, both_pr, both_obj[-2])\n","            both_cum_pr = np.cumprod(both_total_pr)\n","            both_liqd = min(short_liqd, long_liqd)\n","            both_p2_true_bias_bool = np.hstack((short_p2_true_bias_bool, long_p2_true_bias_bool))  # hstack for 1d arr, vstack for 2d arr\n","            both_tpbox_hhm = (short_tpbox_hhm + long_tpbox_hhm) / 2\n","            both_tpbox_p2exec_hhm, both_hlm = (short_tpbox_p2exec_hhm + long_tpbox_p2exec_hhm) / 2, (short_hlm + long_hlm) / 2\n","            both_outbox_hhm = (short_outbox_hhm + long_outbox_hhm) / 2\n","            both_trade_ticks = np.mean(both_obj[-2] - both_obj[-1])\n","            both_net_p1_frq = short_net_p1_frq + long_net_p1_frq\n","            if signi:\n","                both_idep_res_obj = (both_p2_hhm, both_hlm) + get_res_info_nb_v2(sample_len, both_pr, both_total_pr, both_cum_pr, both_liqd)\n","            else:\n","                gs_idx = plot_info_v8(gs, gs_idx, len_df, sample_len, both_tr, both_tpbox_hhm, both_tpbox_p2exec_hhm, both_outbox_hhm, both_hlm, both_trade_ticks, both_net_p1_frq, both_pr, both_total_pr,\n","                                      both_cum_pr, both_liqd, lvrg_arr.mean(), title_position, fontsize)\n","        # print(\"both plot_data elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","        gs_idx += 1\n","        print(\"error in both plot_data :\", e)\n","\n","    if not signi:\n","        if len_short * len_long > 0:\n","            for obj, bias_arr, cum_pr in zip([short_obj, long_obj, both_obj], [short_p2_true_bias_bool, long_p2_true_bias_bool, both_p2_true_bias_bool],\n","                                             [short_cum_pr, long_cum_pr, both_cum_pr]):\n","                try:\n","                    # start_0 = time.time()\n","                    gs_idx = frq_dev_plot_v4(gs, gs_idx, len_df, sample_len, obj[-2], bias_arr, cum_pr[-1], fontsize)\n","                    # print(\"frq_dev_plot elapsed time :\", time.time() - start_0)\n","                except Exception as e:\n","                    gs_idx += 1\n","                    print(\"error in frq_dev_plot :\", e)\n","            plt.show()\n","            plt.close()\n","\n","        return short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_p2_true_bias_bool, short_p2_idx_arr, short_tp_1, short_tp_0, short_out_1, short_out_0, short_ep2_0, \\\n","               long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_p2_true_bias_bool, long_p2_idx_arr, long_tp_1, long_tp_0, long_out_1, long_out_0, long_ep2_0  # long_net_p1_idx_arr long_p2_idx_arr\n","\n","    else:\n","        return [short_idep_res_obj[:-1], long_idep_res_obj[:-1], both_idep_res_obj[:-1]]"]},{"cell_type":"code","source":["def plot_info_v8(gs, gs_idx, len_df, sample_len, tr, hhm, p2_hhm, out_hhm, hlm, bars_in, net_p1_frq, pr, total_pr, cum_pr, liqd, leverage, title_position, fontsize):\n","  try:\n","    plt.subplot(gs[gs_idx])\n","    idep_res_obj = get_res_info_nb_v2(sample_len, pr, total_pr, cum_pr, liqd)\n","    plt.plot(cum_pr)\n","    plt.plot(idep_res_obj[-1], color='gold')\n","    if sample_len is not None:\n","      plt.axvline(sample_len, alpha=1., linestyle='--', color='#ffeb3b')\n","    plt.xlim(0, len_df)\n","\n","    title_str = \"tr : {:.3f}\\n tpbox_hhm : {:.3f}\\n tpbox_p2exec_hhm : {:.3f}\\n outbox_hhm : {:.3f}\\n hlm : {:.3f}\\n bars_in : {:.3f}\\n net_p1_frq : {}\\n frq : {}\\n dpf : {:.3f}\\n wr : {:.3f}\\n sr : {:.3f}\\n acc_pr : {:.3f}\\n sum_pr : {:.3f}\\n\" +\\\n","              \"min_pr : {:.3f}\\n liqd : {:.3f}\\n acc_mdd : -{:.3f}\\n sum_mdd : -{:.3f}\\n leverage {:.3f}\"\n","    plt.title(title_str.format(tr, hhm, p2_hhm, out_hhm, hlm, bars_in, net_p1_frq, *idep_res_obj[:-1], leverage), position=title_position, fontsize=fontsize) #, color='yellow')\n","  except Exception as e:\n","    print(\"error in plot_info :\", e)\n","\n","  return gs_idx + 1"],"metadata":{"id":"I9GysZ5_vv5J"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"EFyWTuscH8VH"},"source":["#### get paired_res function"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qfbtFVMR01UJ"},"outputs":[],"source":["def en_ex_pairing_v8(res_df, open_idx_list, open_info_list, ohlc_list, config_list, np_timeidx, funcs, check_hlm=0, show_detail=False):  # 이미 충분히 줄여놓은 idx 임\n","\n","    open_info1, open_info2 = open_info_list\n","    side_arr1, _, _, id_idx_arr1 = open_info1\n","    side_arr2, _, _, _ = open_info2\n","\n","    expiry_p1, expiry_p2, lvrg_set = funcs\n","\n","    net_p1_idx_list, p1_idx_list, p2_idx_list, pair_idx_list, pair_price_list, lvrg_list, fee_list, tpout_list, tr_list = [[] for li in range(9)]\n","    len_df = len(res_df)\n","\n","    close = ohlc_list[3]\n","    \n","    open_idx1, open_idx2 = open_idx_list\n","    len_open_idx1 = len(open_idx1)\n","    len_open_idx2 = len(open_idx2)\n","    i, open_i1, open_i2 = 0, -1, -1  # i for total_res_df indexing\n","\n","    while 1:   # for p1's loop\n","\n","        # Todo, \n","        #   1. (갱신) p1's open_i + 1 과 op_idx 를 꺼내오는 건, eik1 또는 tp 체결의 경우만 해당됨, \n","        #   2. out 의 경우 p2's op_idx 기준으로 retry 필요\n","        #     a. 또한, p2's op_idx > p1's op_idx\n","\n","        # ============ get p1_info ============ #\n","        # if eik1 or tp_done or first loop:\n","        open_i1 += 1  # 확인 끝났으면 조기 이탈(+1), 다음 open_idx 조사 진행\n","        if open_i1 >= len_open_idx1:\n","            break\n","\n","        op_idx1 = open_idx1[open_i1]  # open_i1 는 i 와 별개로 운영\n","        if op_idx1 < i:  # i = 이전 거래 끝난후의 res_df index - \"거래 종료후 거래 시작\", '<' : 거래 종료시점 진입 가능하다는 의미\n","            continue\n","\n","        # ------ set loop index i ------ #\n","        i = op_idx1      # + 1 --> op_idx1 = op_idx2 가능함 # open_signal 이 close_bar.shift(1) 이라고 가정하고 다음 bar 부터 체결확인한다는 의미\n","        if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","            break        \n","\n","        # ------ dynamic arr info by ID ------ #\n","        #     1. 해당 id 로 config 재할당해야함\n","        #       a. use open_i1\n","        open_side = side_arr1[open_i1]\n","        id_idx = id_idx_arr1.astype(int)[open_i1]\n","        config = config_list[id_idx]\n","        selection_id = config.selection_id\n","        # check_net_hhm = 1 if (config.tr_set.wave_itv1 == config.tr_set.wave_itv2) and (config.tr_set.wave_period1 == config.tr_set.wave_period2) else 0\n","\n","        side_pos = 'short' if open_side == OrderSide.SELL else 'long'   \n","        if show_detail:\n","          print(\"============ op_idx1 : {} {} ======\".format(op_idx1, open_side))\n","\n","        # ------ load tr_data ------ #\n","        tp_arr = res_df['{}_tp_{}'.format(side_pos, selection_id)].to_numpy()\n","        ep1_arr = res_df['{}_ep1_{}'.format(side_pos, selection_id)].to_numpy()\n","        ep2_arr = res_df['{}_ep2_{}'.format(side_pos, selection_id)].to_numpy()\n","        out_arr = res_df['{}_out_{}'.format(side_pos, selection_id)].to_numpy()\n","\n","        tp_1_ = res_df['{}_tp_1_{}'.format(side_pos, selection_id)].to_numpy()[op_idx1]  # for p2_box location & p1's exipiry\n","        tp_0_ = res_df['{}_tp_0_{}'.format(side_pos, selection_id)].to_numpy()[op_idx1]\n","        tp_gap_ = res_df['{}_tp_gap_{}'.format(side_pos, selection_id)].to_numpy()[op_idx1]    \n","\n","        # if not check_net_hhm:  # this phase exist for p1 entry (net hhm sync.) in p2_platform\n","        exec_j, ep_j, tp_j, out_j, entry_done, en_p, fee = check_entry_v5(res_df, config, op_idx1, tp_1_, tp_gap_, len_df, open_side,\n","                                                                                [*ohlc_list, ep1_arr], expiry_p2)        \n","        i = exec_j  # = entry_loop 를 돌고 나온 e_j\n","        if not entry_done:\n","            if show_detail:\n","              print(\"p1's expiry on p1_loop continue\")\n","            continue   \n","        # else:        \n","        #   tp_j = op_idx1\n","\n","        prev_open_i2 = open_i2\n","        net_p1_idx_list.append(op_idx1)\n","        if check_hlm in [0, 1]:\n","          i = op_idx1  # allow op_idx2 = op_idx1\n","        allow_exit = 1\n","        # ============ entry loop ============ #\n","        while 1:  # for p2's loop (allow retry)\n","\n","          # ============ get p2_info ============ #\n","          open_i2 += 1  # 확인 끝났으면 조기 이탈(+1), 다음 open_idx 조사 진행\n","          if open_i2 >= len_open_idx2:  # open_i2 소진\n","              break\n","\n","          if show_detail:\n","            print(\"open_i2 :\", open_i2, side_arr2[open_i2])\n","\n","          # ------ check side sync. ------ #\n","          if open_side != side_arr2[open_i2]:\n","            continue\n","\n","          op_idx2 = open_idx2[open_i2]  # open_i2 는 i 와 별개로 운영\n","          if op_idx2 < i:   # p1 execution 이후의 i 를 허용 (old, 이곳 i = op_idx1 + 1 or p2's exec_j or exit_loop's i + 1)\n","            continue\n","          \n","          if show_detail:\n","            print(\"op_idx1, op_idx2 :\", op_idx1, op_idx2, side_arr2[open_i2])\n","          \n","          i = op_idx2 + 1  # open_signal 이 close_bar.shift(1) 이라고 가정하고 다음 bar 부터 체결확인한다는 의미\n","          if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","              break\n","\n","          tp_ = tp_arr[op_idx1]          \n","          ep2_ = ep2_arr[op_idx2]\n","          out_ = out_arr[op_idx2]\n","\n","          out_1_ = res_df['{}_out_1_{}'.format(side_pos, selection_id)].to_numpy()[op_idx2]\n","          out_0_ = res_df['{}_out_0_{}'.format(side_pos, selection_id)].to_numpy()[op_idx2]\n","          out_gap_ = res_df['{}_out_gap_{}'.format(side_pos, selection_id)].to_numpy()[op_idx2]\n","          \n","          # ------ check p1's expiry - Todo, priority ------ # - p2_box 생성 이전의 hl_survey\n","          # 1. op_idx1 ~ op_idx2 까지의 hl_check \n","          # if not check_net_hhm:\n","          if check_hlm:  # p1_hlm, p2_hlm\n","            if op_idx1 < op_idx2:\n","              expire, touch_idx = expiry_p1(res_df, config, op_idx1, op_idx2, tp_1_, tp_0_, tp_gap_, ohlc_list[1:3], open_side)\n","              if expire:   # p1's expiry\n","                  if show_detail:\n","                    print(\"expiry_p1 break {}\".format(touch_idx))\n","                  i = touch_idx  #  + 1  --> 이거 아닌것 같음 # op_idx1 과 op_idx2 사이의 op_idx1' 을 살리기 위함, 즉 바로 다음 op_idx1 로 회귀 (건너뛰지 않고)\n","                  open_i2 = prev_open_i2\n","                  break   # change op_idx1\n","          \n","          # ------ point validation ------ # p1_loop 로 return 되는 정확한 i 를 반환하기 위해서 expiry_p1 에 순서 양보  # Todo, 새로운 tp, ep, out 에 대한 처리 필요 (p1_hlm 사용시)\n","          if open_side == OrderSide.SELL:\n","            if not (tp_ < ep2_):  # tr_set validation & reject hl_out open_exec.\n","              break  # change op_idx1\n","            elif not (ep2_ < out_ and close[op_idx2] < out_):\n","              continue  # change op_idx2\n","          else:\n","            if not (tp_ > ep2_):              \n","              break\n","            elif not (ep2_ > out_ and close[op_idx2] > out_):\n","              continue\n","\n","          # ------ tr_threshold ------ #\n","          if check_hlm:          \n","            if open_side == OrderSide.SELL:\n","              tr_ = abs((ep2_ / tp_ - config.trader_set.limit_fee - 1) / (ep2_ / out_ - config.trader_set.market_fee - 1))\n","              if tr_ < config.loc_set.point1.short_tr_thresh:\n","                continue\n","            else:\n","              tr_ = abs((tp_ / ep2_ - config.trader_set.limit_fee - 1) / (out_ / ep2_ - config.trader_set.market_fee - 1))\n","              if tr_ < config.loc_set.point1.long_tr_thresh:\n","                continue\n","\n","          if check_hlm == 2:\n","            # ------ p2_box location ------ #\n","            if open_side == OrderSide.SELL:\n","              if not ((tp_1_ + tp_gap_ * config.tr_set.p2_box_k1 <= out_1_) and (out_0_ <= tp_0_ - tp_gap_ * config.tr_set.p2_box_k2)):  # tp1, tp0 에 닿으면 expiry\n","                if show_detail:\n","                    print(\"p2_box continue\")\n","                continue\n","            else:\n","              if not ((tp_1_ - tp_gap_ * config.tr_set.p2_box_k1 >= out_1_) and (out_0_ >= tp_0_ + tp_gap_ * config.tr_set.p2_box_k2)):\n","                if show_detail:\n","                    print(\"p2_box continue\")\n","                continue\n","                  \n","            # ------ check p2's expiry ------ #\n","            exec_j, ep_j, _, out_j, entry_done, en_p, fee = check_entry_v5(res_df, config, op_idx2, out_1_, out_gap_, len_df, open_side,\n","                                                                                    [*ohlc_list, ep2_arr], expiry_p2)   # tp_j 는 op_idx1 사용\n","            i = exec_j  # = entry_loop 를 돌고 나온 e_j\n","            if not entry_done:   # p2's expiry\n","                if show_detail:\n","                    print(\"expiry_p2 continue {}\".format(i))\n","                continue  # change op_idx2\n","\n","          # ------ leverage ------ #\n","          # out = out_arr[out_j]  # lvrg_set use out on out_j (out_j shoud be based on p2)\n","          leverage = lvrg_set(res_df, config, open_side, en_p, out_, fee)  # res_df 변수 사용됨 - 주석 처리 된 상태일뿐\n","          if leverage is None:\n","              if show_detail:\n","                    print(\"leverage is None continue\")\n","              if check_hlm:\n","                continue  # change op_idx2\n","              else:\n","                break   # change op_idx1\n","\n","          exit_done, cross_on = 0, 0\n","          # ------ check tpout_onexec ------ #\n","          # if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","          if config.ep_set.entry_type == \"LIMIT\":\n","              if config.tp_set.tp_onexec:  # dynamic 은 tp_onexec 사용하는 의미가 없음\n","                  tp_j = exec_j\n","              if config.out_set.out_onexec:  # dynamic 은 out_onexec 사용하는 의미가 없음\n","                  out_j = exec_j\n","\n","          # ============ exit loop ============ # --> p1_hlm 의 경우, 1번만 실행\n","          if not allow_exit:\n","            continue\n","\n","          while 1:\n","              if not config.tp_set.static_tp:  # 앞으로 왠만하면 static 만 사용할 예정\n","                  tp_j = i\n","              if not config.out_set.static_out:\n","                  out_j = i\n","\n","              # ------------ out ------------ #  # out 우선 (보수적 검증)\n","              # ------ signal_out ------ #\n","              if not exit_done:\n","                  exit_done, cross_on, ex_p, fee = check_signal_out_v3(res_df, config, open_i2, i, len_df, fee, open_side, cross_on, exit_done, [*ohlc_list, np_timeidx])\n","              # ------ hl_out ------ #\n","              if config.out_set.hl_out != \"None\":\n","                  if not exit_done:  # and i != len_df - 1:\n","                      exit_done, ex_p, fee = check_hl_out_v2(config, i, out_j, len_df, fee, open_side, exit_done, [*ohlc_list, out_arr])\n","\n","              # ------------ tp ------------ #\n","              if not config.tp_set.non_tp and i != exec_j:\n","                if not exit_done:\n","                  exit_done, ex_p, fee = check_limit_tp_exec(res_df, config, open_i2, i, tp_j, len_df, fee, open_side, exit_done,\n","                                                            [*ohlc_list, [tp_arr]])  # 여기서는 j -> i 로 변경해야함\n","                  # if config.tp_set.tp_type in ['LIMIT']:  # 'BOTH' -> 앞으로는, LIMIT 밖에 없을거라 주석처리함\n","                  # if not exit_done and config.tp_set.tp_type in ['MARKET', 'BOTH']:\n","\n","              if exit_done:  # 이 phase 는 exit_phase 뒤에도 있어야할 것 - entry_done var. 사용은 안하겠지만\n","                  # ------ append dynamic vars. ------ #\n","                  p1_idx_list.append(op_idx1)  # side, zone, start_ver arr 모두 openi_list 로 접근하기 위해 open_i 를 담음\n","                  p2_idx_list.append(op_idx2)\n","                  pair_idx_list.append([exec_j, i])  # entry & exit (체결 기준임)\n","                  pair_price_list.append([en_p, ex_p])\n","                  lvrg_list.append(leverage)\n","                  fee_list.append(fee)\n","                  tpout_list.append([tp_arr[tp_j], out_arr[out_j]])  # for tpout_line plot_check\n","                  tr_list.append(tr_)   # Todo, tr vectorize 불가함, 직접 구해주어야할 건데.. (오래걸리지 않을까 --> tr_set 데이터만 모아서 vecto 계산이 나을 것)\n","\n","                  # open_i += 1  # 다음 open_idx 조사 진행\n","                  break\n","\n","              # 1. 아래있으면, 체결 기준부터 tp, out 허용 -> tp 가 entry_idx 에 체결되는게 다소 염려되기는 함, 일단 진행 (그런 case 가 많지 않았으므로)\n","              # 2. 위에있으면, entry 다음 tick 부터 exit 허용\n","              i += 1\n","              if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","                  break\n","          \n","          if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","              break\n","\n","          if exit_done == 1:  # tp_done\n","            if show_detail:\n","                    print(\"exit_done = {} break {}\".format(exit_done, i))\n","            break   # change op_idx1\n","          else:\n","            if check_hlm:\n","              if check_hlm == 1:   # exit only once in p1_hlm mode\n","                allow_exit = 0\n","              if show_detail:\n","                      print(\"exit_done = {} continue {}\".format(exit_done, i))\n","              continue  # change op_idx2\n","            else:\n","              if show_detail:\n","                      print(\"exit_done = {} break {}\".format(exit_done, i))\n","              break   # change op_idx1    \n","\n","        if i >= len_df:  # or open_i >= len_open_idx:  # res_df 의 last_index 까지 돌아야함\n","            break\n","        else:\n","            continue\n","\n","    return np.array(net_p1_idx_list), np.array(p1_idx_list), np.array(p2_idx_list), np.array(pair_idx_list), np.array(pair_price_list), np.array(lvrg_list), np.array(\n","        fee_list), np.array(tpout_list), np.array(tr_list)\n","\n","\n","def check_entry_v5(res_df, config, op_idx, wave1, wave0, len_df, open_side, np_datas, expiry):\n","    open, high, low, close, ep_arr = np_datas\n","    ep_j = op_idx\n","    tp_j = op_idx\n","    out_j = op_idx\n","\n","    # print(\"ep_arr[op_idx] :\", ep_arr[op_idx])\n","\n","    selection_id = config.selection_id    \n","    # allow_ep_in = 0 if config.ep_set.point2.use_point2 else 1\n","    entry_done = 0\n","    ep = None\n","\n","    if config.ep_set.entry_type == \"LIMIT\":\n","        fee = config.trader_set.limit_fee\n","\n","        for e_j in range(op_idx + 1, len_df):\n","            # ------ index setting for dynamic options ------ #\n","            if not config.ep_set.static_ep:\n","                ep_j = e_j  # dynamic_ep 를 위한 ep_index var.\n","                out_j = e_j  # dynamic_out 를 위한 out_index var. - 조건식이 static_ep 와 같이 있는 이유 모름 => dynamic_lvrg 로 사료됨\n","\n","            if not config.tp_set.static_tp:\n","                tp_j = e_j\n","\n","            # ------ expire_k & expire_tick ------ # - limit 사용하면 default 로 expire_k 가 존재해야함\n","            if expiry(res_df, config, op_idx, e_j, wave1, wave0, [high, low], open_side):  # tp_j, \n","              break\n","\n","            # ------ point2 ------ #\n","            # if not allow_ep_in:\n","            #     allow_ep_in, out_j = ep_loc_point2(res_df, config, e_j, out_j, side=OrderSide.SELL)\n","            #     if allow_ep_in:\n","            #       if config.ep_set.point2.entry_type == \"LIMIT\":\n","            #         ep_j = e_j\n","            #         # print(\"e_j in point2 :\", e_j)\n","            #         continue\n","\n","            # ------ check ep_exec ------ #\n","            # if allow_ep_in:\n","              # if config.ep_set.point2.use_point2 and config.ep_set.point2.entry_type == 'MARKET':\n","              #   entry_done = 1\n","              #   ep = c[e_j]\n","              #   break\n","              # else:\n","\n","            if open_side == OrderSide.SELL:\n","              if high[e_j] >= ep_arr[ep_j]:\n","                  entry_done = 1\n","                  ep = ep_arr[ep_j]\n","                  if open[e_j] >= ep_arr[ep_j]:  # open comp 는 결국, 수익률에 얹어주는 logic (반보수) -> 사용 보류\n","                      ep = open[e_j]\n","                  break\n","            else:\n","              if low[e_j] <= ep_arr[ep_j]:\n","                  entry_done = 1\n","                  ep = ep_arr[ep_j]\n","                  if open[e_j] <= ep_arr[ep_j]:\n","                      ep = open[e_j]\n","                  break\n","\n","    else:  # market entry\n","        e_j = op_idx + 1\n","        entry_done = 1\n","        ep = close[op_idx]\n","        fee = config.trader_set.market_fee\n","\n","    return e_j, ep_j, tp_j, out_j, entry_done, ep, fee  # 다음 start_i <-- e_j 로 변경\n","    #   e_j => 다음 phase 의 시작 index <-> ep_j : ep 의 기준 index\n","    #   ep_j, tp_j, out_j 가 return 되어야함 - exit phase 에서 이어가기 위함\n","\n","\n","def check_limit_tp_exec(res_df, config, open_i, i, tp_j, len_df, fee, open_side, exit_done, np_datas):\n","\n","    open, high, low, close, tps = np_datas\n","    tp = None\n","    selection_id = config.selection_id\n","    len_tps = len(tps)\n","\n","    for tp_i, tp_arr in enumerate(tps):\n","\n","        #     decay adjustment    #\n","        #     tp_j includes dynamic_j - functionalize  #\n","        # try:\n","        #     if config.tr_set.decay_gap != \"None\":\n","        #         decay_share = (j - open_i) // config.tp_set.decay_term\n","        #         decay_remain = (j - open_i) % config.tp_set.decay_term\n","        #         if j != open_i and decay_remain == 0:\n","        #             if open_side == OrderSide.SELL:\n","        #                 tp_arr[tp_j] += res_df['short_tp_gap_{}'.format(selection_id)].iloc[open_i] * config.tr_set.decay_gap * decay_share\n","        #             else:\n","        #                 tp_arr[tp_j] -= res_df['long_tp_gap_{}'.format(selection_id)].iloc[open_i] * config.tr_set.decay_gap * decay_share\n","        # except:\n","        #     pass\n","\n","        if open_side == OrderSide.SELL:\n","            if low[i] <= tp_arr[tp_j]:  # and partial_tp_cnt == tp_i:  # we use static tp now\n","                # if low[i] <= tp_arr[i] <= h[i]: --> 이건 잘못되었음\n","                # partial_tp_cnt += 1 --> partial_tp 보류\n","\n","                # ------ dynamic tp ------ #\n","                if tp_arr[i] != tp_arr[i - 1] and not config.tp_set.static_tp:\n","                    # tp limit 이 불가한 경우 - open 이 이미, tp 를 넘은 경우\n","                    if open[i] < tp_arr[i]:\n","                        tp = open[i]\n","                    # tp limit 이 가능한 경우 - open 이 아직, tp 를 넘지 않은 경우\n","                    else:\n","                        tp = tp_arr[i]\n","\n","                # ------ static tp ------ #\n","                else:\n","                    #   tp limit 이 불가한 경우 - open 이 이미, tp 를 넘은 경우\n","                    if open[i] < tp_arr[tp_j]:  # static 해놓고 decay 사용하면 dynamic 이니까\n","                        if config.tr_set.decay_gap != \"None\" and decay_remain == 0:\n","                            tp = open[i]  # tp_j -> open_i 를 가리키기 때문에 decay 는 한번만 진행되는게 맞음\n","                        else:\n","                            tp = tp_arr[tp_j]\n","                    else:\n","                        tp = tp_arr[tp_j]\n","\n","                if tp_i == len_tps - 1:\n","                    exit_done = 1  # partial 을 고려해 exit_done = 1 상태는 tp_i 가 last_index 로 체결된 경우만 해당\n","\n","        else:\n","            if high[i] >= tp_arr[tp_j]:\n","                # ------ dynamic tp ------ #\n","                if tp_arr[i] != tp_arr[i - 1] and not config.tp_set.static_tp:\n","                    if open[i] > tp_arr[i]:\n","                        tp = open[i]\n","                    else:\n","                        tp = tp_arr[i]\n","\n","                # ------ static tp ------ #\n","                else:\n","                    if open[i] > tp_arr[tp_j]:\n","                        if config.tr_set.decay_gap != \"None\" and decay_remain == 0:\n","                            tp = open[i]\n","                        else:\n","                            tp = tp_arr[tp_j]\n","                    else:\n","                        tp = tp_arr[tp_j]\n","\n","                if tp_i == len_tps - 1:\n","                    exit_done = 1  # partial 을 고려해 exit_done = 1 상태는 tp_i 가 last_index 로 체결된 경우만 해당\n","\n","    if exit_done:\n","        fee += config.trader_set.limit_fee\n","\n","    return exit_done, tp, fee\n","\n","\n","def check_signal_out_v3(res_df, config, open_i, i, len_df, fee, open_side, cross_on, exit_done, np_datas):    \n","\n","    _, _, _, close, np_timeidx = np_datas\n","    ex_p = None\n","    selection_id = config.selection_id\n","\n","    # ------ timestamp ------ #\n","    if config.out_set.tf_exit != \"None\":\n","        if np_timeidx[i] % config.out_set.tf_exit == config.out_set.tf_exit - 1 and i != open_i:\n","            exit_done = -1\n","\n","    # ------ rsi ------ # -> vectorize 가능함 => 추후 적용\n","    if config.out_set.rsi_exit:\n","        rsi_T = res_df['rsi_T'].to_numpy()\n","\n","        if open_side == OrderSide.SELL:\n","            if (rsi_T[i - 1] >= 50 - config.loc_set.point.osc_band) & (rsi_T[i] < 50 - config.loc_set.point.osc_band):\n","                exit_done = -1\n","        else:\n","            if (rsi_T[i - 1] <= 50 + config.loc_set.point.osc_band) & (rsi_T[i] > 50 + config.loc_set.point.osc_band):\n","                exit_done = -1\n","\n","    # ------ heikin_ashi ------ #\n","    # if selection_id in ['v3_3']:\n","    #     if open_side == OrderSide.SELL:\n","    #       if (ha_o[i] < ha_c[i]):# & (ha_o[i] == ha_l[i]):   # 양봉 출현\n","    #           exit_done = -1\n","    #     else:\n","    #       if (ha_o[i] > ha_c[i]):# & (ha_o[i] == ha_h[i]):  # 음봉 출현\n","    #           exit_done = -1\n","\n","    # ------------ early out ------------ #\n","    # ------ bb ------ # --> cross_on 기능은 ide latency 개선 여부에 해당되지 않음\n","    if selection_id in ['v5_2']:\n","        bb_upper_5T = res_df['bb_upper_5T'].to_numpy()\n","        bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","\n","        if open_side == OrderSide.SELL:\n","            if close[i] < bb_lower_5T[i] < close[i - 1]:\n","                cross_on = 1\n","            if cross_on == 1 and close[i] > bb_upper_5T[i] > close[i - 1]:\n","                exit_done = -1\n","        else:\n","            if close[i] > bb_upper_5T[i] > close[i - 1]:\n","                cross_on = 1\n","            if cross_on == 1 and close[i] < bb_lower_5T[i] < close[i - 1]:\n","                exit_done = -1\n","\n","    if exit_done:\n","        ex_p = close[i]\n","        fee += config.trader_set.market_fee\n","\n","    return exit_done, cross_on, ex_p, fee\n","\n","\n","def check_hl_out_v2(config, i, out_j, len_df, fee, open_side, exit_done, np_datas):\n","\n","    open, high, low, close, out_arr = np_datas\n","    ex_p = None\n","\n","    if config.out_set.hl_out:\n","        if open_side == OrderSide.SELL:\n","            if high[i] >= out_arr[out_j]:  # check out only once\n","                exit_done = -1\n","        else:\n","            if low[i] <= out_arr[out_j]:  # check out only once\n","                exit_done = -1\n","    else:  # close_out\n","        if open_side == OrderSide.SELL:\n","            if close[i] >= out_arr[out_j]:  # check out only once\n","                exit_done = -1\n","        else:\n","            if close[i] <= out_arr[out_j]:  # check out only once\n","                ex_p = close[i]\n","                exit_done = -1\n","\n","    if exit_done:\n","        if config.out_set.hl_out:\n","            ex_p = out_arr[out_j]\n","        else:\n","            ex_p = close[i]\n","\n","        if open_side == OrderSide.SELL:\n","            if open[i] >= out_arr[out_j]:\n","                ex_p = open[i]\n","        else:\n","            if open[i] <= out_arr[out_j]:\n","                ex_p = open[i]\n","\n","        fee += config.trader_set.market_fee\n","\n","    return exit_done, ex_p, fee"]},{"cell_type":"markdown","metadata":{"id":"zQ-roiifspcX"},"source":["#### ep_loc.point & zone legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Js5eL87VspcX"},"outputs":[],"source":["\n","    # res_df['entry_{}'.format(selection_id)] = np.where((res_df['open'] >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 (res_df['close'] < res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(selection_id)] - 1, res_df['entry_{}'.format(selection_id)])\n","\n","    # res_df['entry_{}'.format(selection_id)] = np.where((res_df['open'] >= res_df['bb_lower_1m']) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['bb_lower_1m']) &\n","    #                 (res_df['close'] < res_df['bb_lower_1m'])\n","    #                 , res_df['entry_{}'.format(selection_id)] - 1, res_df['entry_{}'.format(selection_id)])\n","\n","    # res_df['entry_{}'.format(selection_id)] = np.where((res_df['open'] <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   (res_df['close'] > res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(selection_id)] + 1, res_df['entry_{}'.format(selection_id)])\n","\n","    # res_df['entry_{}'.format(selection_id)] = np.where((res_df['open'] <= res_df['bb_upper_1m']) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['bb_upper_1m']) &\n","    #                   (res_df['close'] > res_df['bb_upper_1m'])\n","    #                 , res_df['entry_{}'.format(selection_id)] + 1, res_df['entry_{}'.format(selection_id)])\n","\n","\n","    \n","   # --------------- ema --------------- #   \n","  # res_df['ema5_1m'] = ema(res_df['close'], 5).shift(1)\n","\n","  #   # --------------- cloud bline --------------- #   \n","  # res_df['cloud_bline_1m'] = cloud_bline(res_df, 26).shift(1)\n","  \n","    #       stochastic      #\n","  # res_df['stoch'] = stoch(res_df, 5, 3, 3)\n","\n","    #       fisher      #\n","  # res_df['fisher30'] = fisher(res_df, 30)\n","  # res_df['fisher60'] = fisher(res_df, 60)\n","  # res_df['fisher120'] = fisher(res_df, 120)\n","\n","    #       cctbbo      #\n","  # res_df['cctbbo'], _ = cct_bbo(res_df, 21, 13)\n","\n","    #       ema_roc      #\n","  # res_df['ema_roc'] = ema_roc(res_df['close'], 13, 9)\n","\n","\n","   # ------------------------------ htf data ------------------------------ #    \n","\n","  #             Todo              #\n","  # htf_df = pd.read_excel(date_path2 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # htf_df = pd.read_excel(date_path3 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # htf_df = pd.read_excel(date_path4 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # htf_df = pd.read_excel(date_path5 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # # # # htf_df = pd.read_excel(date_path6 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","\n","  # # ---- htf index slicing ---- #\n","  # htf_df = htf_df.loc[:res_df.index[-1]]\n","  \n","  # print(\"res_df.index[-1] :\", res_df.index[-1])\n","  # print(\"htf_df.index[-1] :\", htf_df.index[-1])\n","\n","  # res_df = dc_line(res_df, htf_df, '5m')\n","  # res_df = dc_level(res_df, '5m', 1)\n","\n","\n","  # # # if \"sma4\" in res_df.columns:\n","  # # #   res_df.drop(\"sma4\", axis=1, inplace=1)\n","\n","  # # htf_df['sma'] = htf_df['close'].rolling(60).mean()\n","  # # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, htf_df, [-1]), columns=['sma_30m']))\n","  \n","  # htf_df['stoch'] = stoch(htf_df, 13, 3, 3)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, htf_df, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","   \n","  # fifth_df['ema'] = ema(fifth_df['close'], 5)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, fifth_df, [-1]), columns=['ema5']))\n","\n","        # ------------------------------------ short ------------------------------------ # \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 0:\n","        #   mr_score += 1          \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_upper_1m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_upper_3m'].iloc[i] <= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_upper_5m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == 'MARKET':\n","        #   mr_const_cnt += 1\n","        #   if (res_df['close'].iloc[i] - res_df['short_tp'].iloc[i]) / (res_df['short_out'].iloc[i] - res_df['close'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error):  \n","        #     mr_score += 1\n","\n","           \n","        # ------- entry once ------- #   \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == 1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == -1:\n","        #     prev_entry_cnt += 1          \n","        # # # print(\"prev_entry_cnt :\", prev_entry_cnt)\n","\n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] < res_df['bb_lower_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_lower2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_base_1h'].iloc[i]:\n","\n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] < res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","  \n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['low'].iloc[i] > res_df['short_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1\n","\n","\n","\n","        # ------------------------------------ long ------------------------------------ # \n","          \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 1:\n","        #   mr_score += 1   \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 1:\n","        #   mr_score += 1     \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 1:\n","          # mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_lower_1m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_lower_3m'].iloc[i] >= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_lower_5m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == \"MARKET\":\n","          # mr_const_cnt += 1        \n","          # if (res_df['long_tp'].iloc[i] - res_df['close'].iloc[i]) / (res_df['close'].iloc[i] - res_df['long_out'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error): # 일반적으로 dr 상에서 tp 비율이 더 커짐 (tr 보다)\n","          #   mr_score += 1\n","\n","        # -------------- ep limit -------------- #    \n","        # mr_const_cnt += 1\n","        # # if (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # if config.ep_set.min_eplim_pct < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # # if 0 < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        #   # if res_df['st_gap_15m'].iloc[i] / res_df['open'].iloc[i] < 0:\n","        #   #   print(\"i, res_df['st_gap_15m'].iloc[i] :\", i, res_df['st_gap_15m'].iloc[i])\n","        #   mr_score += 1\n","\n","\n","        # -------------- entry once -------------- #    \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == -1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == 1:\n","        #     prev_entry_cnt += 1\n","          \n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","          \n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] > res_df['bb_upper_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_upper2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_base_1h'].iloc[i]:\n","        \n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] > res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","\n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['high'].iloc[i] < res_df['long_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","          \n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1"]},{"cell_type":"markdown","source":["#### legacy"],"metadata":{"id":"qM6H6fmrKtsA"}},{"cell_type":"code","source":["res_df.low.rolling(100) #> 1000"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oLDZobRcgg6E","executionInfo":{"status":"ok","timestamp":1653436951068,"user_tz":-540,"elapsed":260,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"2f07e665-41ba-4c7e-b5d7-43fc14d09cd5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Rolling [window=100,center=False,axis=0,method=single]"]},"metadata":{},"execution_count":92}]},{"cell_type":"code","source":["def get_touch_idx_fill(tp_1_touch_idxs, net_p1_pair, net_p1_idx, len_df):\n","\n","    tp_1_touch_idx = np.full(len_df, np.nan)\n","    tp_1_touch_idx[net_p1_idx] = [np.nanmin(tp_1_touch_idxs[iin:iout]) for iin, iout in net_p1_pair]\n","    \n","    return fill_arr(tp_1_touch_idx)\n","    \n","def get_wave_bias_v5(res_df, config, high, low, len_df, short_net_p1_idx_arr, long_net_p1_idx_arr, short_p2_idx_arr, long_p2_idx_arr, short_obj,\n","                     long_obj):\n","    short_net_p1_idx = short_net_p1_idx_arr.astype(int)  # .reshape(-1, 1)\n","    short_p1_idx = short_obj[-1].astype(int).ravel()\n","    short_p2_idx = short_p2_idx_arr.astype(int).ravel()  # .reshape(-1, 1)\n","    short_en_idx = short_obj[2].astype(int)\n","\n","    short_tp_1 = ffill_line(res_df['short_tp_1_{}'.format(config.selection_id)].to_numpy(),\n","                            short_net_p1_idx)  # net_p1_idx ~ net_p1_idx' 사이에 대한 momentum 조사 (net 이유는 logic's validation)\n","    short_tp_0 = ffill_line(res_df['short_tp_0_{}'.format(config.selection_id)].to_numpy(), short_net_p1_idx)\n","    short_out_1 = ffill_line(res_df['short_out_1_{}'.format(config.selection_id)].to_numpy(),\n","                             short_p2_idx)  # 체결된, p2_idx ~ p2_idx' 사이에 대한 momentum 조사\n","    short_out_0 = ffill_line(res_df['short_out_0_{}'.format(config.selection_id)].to_numpy(), short_p2_idx)\n","    short_ep2_0 = ffill_line(res_df['short_ep2_0_{}'.format(config.selection_id)].to_numpy(), short_p2_idx)\n","    # short_net_wave_1 = ffill_line(res_df['short_wave_1_{}'.format(config.selection_id)].to_numpy(), short_op_idx)  # en_idx 에 sync 된 open_idx 를 사용해야함\n","    # short_net_wave_0 = ffill_line(res_df['short_wave_0_{}'.format(config.selection_id)].to_numpy(), short_op_idx)\n","\n","    long_net_p1_idx = long_net_p1_idx_arr.astype(int)  # .reshape(-1, 1)\n","    long_p1_idx = long_obj[-1].astype(int).ravel()\n","    long_p2_idx = long_p2_idx_arr.astype(int).ravel()  # .reshape(-1, 1)\n","    long_en_idx = long_obj[2].astype(int)\n","\n","    long_tp_1 = ffill_line(res_df['long_tp_1_{}'.format(config.selection_id)].to_numpy(), long_net_p1_idx)\n","    long_tp_0 = ffill_line(res_df['long_tp_0_{}'.format(config.selection_id)].to_numpy(), long_net_p1_idx)\n","    long_out_1 = ffill_line(res_df['long_out_1_{}'.format(config.selection_id)].to_numpy(), long_p2_idx)  # 체결된, p2_idx ~ p2_idx' 사이에 대한 momentum 조사\n","    long_out_0 = ffill_line(res_df['long_out_0_{}'.format(config.selection_id)].to_numpy(), long_p2_idx)\n","    long_ep2_0 = ffill_line(res_df['long_ep2_0_{}'.format(config.selection_id)].to_numpy(), long_p2_idx)\n","\n","    short_unq_p1_idx = np.unique(short_p1_idx)  # .reshape(-1, 1)   # 통일성을 위해 2d 로 설정\n","    long_unq_p1_idx = np.unique(long_p1_idx)  # .reshape(-1, 1)\n","\n","    bias_info_tick = config.tr_set.bias_info_tick\n","\n","    # print(\"long_net_p1_idx.shape :\", long_net_p1_idx.shape)\n","    # print(\"long_en_idx.shape :\", long_en_idx.shape)\n","\n","    # ================== touch idx ================== #\n","    # 1. min 에 초점을 맞추는 거니까, touch 없을시 len_df 로 설정\n","    # 2. future_data 사용이니까, shift(-bias_info_tick) 설정\n","    # 3. entry 다음 idx 부터 -> tp & out 체결 logic 이 현재 entry_idx 부터 되어있어서 취소\n","    # Todo, high 와 low 중 어디에 먼저닿느냐가 중요함을 key 로 잡고만든 logic 임\n","    len_df_range = np.arange(len_df)\n","    last_idx = len_df - 1  # nan 발생하면 대소 비교로 hhm 확인이 불가능해짐\n","    shift_range = bias_info_tick - 1  # entry_idx 까지 포함해서 wave_bias check\n","\n","    # ------------ pair & idxs ------------ #\n","    short_net_p1_pair = list(zip(short_net_p1_idx, np.append(short_net_p1_idx[1:], last_idx)))\n","    long_net_p1_pair = list(zip(long_net_p1_idx, np.append(long_net_p1_idx[1:], last_idx)))\n","\n","    short_p2_pair = list(zip(short_p2_idx, np.append(short_p2_idx[1:], last_idx)))\n","    long_p2_pair = list(zip(long_p2_idx, np.append(long_p2_idx[1:], last_idx)))\n","\n","    short_tp_1_touch_idxs = np.where(low <= short_tp_1, len_df_range,\n","                                     last_idx)  # .rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    short_tp_0_touch_idxs = np.where(high >= short_tp_0, len_df_range,\n","                                     last_idx)  # .rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    long_tp_1_touch_idxs = np.where(high >= long_tp_1, len_df_range,\n","                                    last_idx)  # .rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    long_tp_0_touch_idxs = np.where(low <= long_tp_0, len_df_range,\n","                                    last_idx)  # .rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","\n","    short_out_1_touch_idxs = np.where(low <= short_out_1, len_df_range,\n","                                      last_idx)  # .rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    short_out_0_touch_idxs = np.where(high >= short_out_0, len_df_range,\n","                                      last_idx)  # .rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    long_out_1_touch_idxs = np.where(high >= long_out_1, len_df_range,\n","                                     last_idx)  # .rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    long_out_0_touch_idxs = np.where(low <= long_out_0, len_df_range,\n","                                     last_idx)  # .rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","\n","    # ------------ min touch_idx ------------ #\n","    short_tp_1_touch_idx = get_touch_idx_fill(short_tp_1_touch_idxs, short_net_p1_pair, short_net_p1_idx, len_df)  # pair means 구간\n","    short_tp_0_touch_idx = get_touch_idx_fill(short_tp_0_touch_idxs, short_net_p1_pair, short_net_p1_idx, len_df)\n","    long_tp_1_touch_idx = get_touch_idx_fill(long_tp_1_touch_idxs, long_net_p1_pair, long_net_p1_idx, len_df)\n","    long_tp_0_touch_idx = get_touch_idx_fill(long_tp_0_touch_idxs, long_net_p1_pair, long_net_p1_idx, len_df)\n","\n","    short_out_1_touch_idx = get_touch_idx_fill(short_out_1_touch_idxs, short_p2_pair, short_p2_idx, len_df)  # pair means 구간\n","    short_out_0_touch_idx = get_touch_idx_fill(short_out_0_touch_idxs, short_p2_pair, short_p2_idx, len_df)\n","    long_out_1_touch_idx = get_touch_idx_fill(long_out_1_touch_idxs, long_p2_pair, long_p2_idx, len_df)\n","    long_out_0_touch_idx = get_touch_idx_fill(long_out_0_touch_idxs, long_p2_pair, long_p2_idx, len_df)\n","\n","    # ------------ point's touch_idx ------------ #\n","    short_tp_1_net_p1_touch_idx = short_tp_1_touch_idx[short_net_p1_idx]  # for tp_box's net_hhm\n","    short_tp_0_net_p1_touch_idx = short_tp_0_touch_idx[short_net_p1_idx]\n","    long_tp_1_net_p1_touch_idx = long_tp_1_touch_idx[long_net_p1_idx]\n","    long_tp_0_net_p1_touch_idx = long_tp_0_touch_idx[long_net_p1_idx]\n","    # print(\"long_tp_1_net_p1_touch_idx :\", long_tp_1_net_p1_touch_idx)\n","\n","    short_tp_1_unq_p1_touch_idx = short_tp_1_touch_idx[short_unq_p1_idx]  # p2 까지 체결된 p1's hhm\n","    short_tp_0_unq_p1_touch_idx = short_tp_0_touch_idx[short_unq_p1_idx]\n","    long_tp_1_unq_p1_touch_idx = long_tp_1_touch_idx[long_unq_p1_idx]\n","    long_tp_0_unq_p1_touch_idx = long_tp_0_touch_idx[long_unq_p1_idx]\n","\n","    short_tp_1_p2_touch_idx = short_tp_1_touch_idx[short_p2_idx]  # hlm 을 위한 hhm (on p2)\n","    short_tp_0_p2_touch_idx = short_tp_0_touch_idx[short_p2_idx]\n","    long_tp_1_p2_touch_idx = long_tp_1_touch_idx[long_p2_idx]\n","    long_tp_0_p2_touch_idx = long_tp_0_touch_idx[long_p2_idx]\n","\n","    short_out_1_p2_touch_idx = short_out_1_touch_idx[short_p2_idx]  # for out_box's executed_hhm\n","    short_out_0_p2_touch_idx = short_out_0_touch_idx[short_p2_idx]\n","    long_out_1_p2_touch_idx = long_out_1_touch_idx[long_p2_idx]\n","    long_out_0_p2_touch_idx = long_out_0_touch_idx[long_p2_idx]\n","\n","    # ------------------ bias_bool & hhm ------------------ #\n","    short_net_p1_true_bias_bool = short_tp_1_net_p1_touch_idx < short_tp_0_net_p1_touch_idx  # true_bias 의 조건\n","    short_net_p1_false_bias_bool = short_tp_1_net_p1_touch_idx >= short_tp_0_net_p1_touch_idx  # false_bias 의 조건, ~true_bias_bool 와 같지 않음, why ..? = en_idx\n","    long_net_p1_true_bias_bool = long_tp_1_net_p1_touch_idx < long_tp_0_net_p1_touch_idx\n","    long_net_p1_false_bias_bool = long_tp_1_net_p1_touch_idx >= long_tp_0_net_p1_touch_idx\n","\n","    short_unq_p1_true_bias_bool = short_tp_1_unq_p1_touch_idx < short_tp_0_unq_p1_touch_idx  # true_bias 의 조건\n","    short_unq_p1_false_bias_bool = short_tp_1_unq_p1_touch_idx >= short_tp_0_unq_p1_touch_idx  # false_bias 의 조건, ~true_bias_bool 와 같지 않음, why ..? = en_idx\n","    long_unq_p1_true_bias_bool = long_tp_1_unq_p1_touch_idx < long_tp_0_unq_p1_touch_idx\n","    long_unq_p1_false_bias_bool = long_tp_1_unq_p1_touch_idx >= long_tp_0_unq_p1_touch_idx\n","\n","    short_p2_true_bias_bool = short_tp_1_p2_touch_idx < short_tp_0_p2_touch_idx\n","    # short_p2_false_bias_bool = short_tp_1_p2_touch_idx >= short_tp_0_p2_touch_idx\n","    long_p2_true_bias_bool = long_tp_1_p2_touch_idx < long_tp_0_p2_touch_idx\n","    # long_p2_false_bias_bool = long_tp_1_p2_touch_idx >= long_tp_0_p2_touch_idx\n","\n","    short_p2_out_true_bias_bool = short_out_1_p2_touch_idx < short_out_0_p2_touch_idx\n","    short_p2_out_false_bias_bool = short_out_1_p2_touch_idx >= short_out_0_p2_touch_idx\n","    long_p2_out_true_bias_bool = long_out_1_p2_touch_idx < long_out_0_p2_touch_idx\n","    long_p2_out_false_bias_bool = long_out_1_p2_touch_idx >= long_out_0_p2_touch_idx\n","\n","    short_tpbox_hhm = hhm(short_net_p1_true_bias_bool, short_net_p1_false_bias_bool)\n","    long_tpbox_hhm = hhm(long_net_p1_true_bias_bool, long_net_p1_false_bias_bool)\n","\n","    short_tpbox_p2exec_hhm = hhm(short_unq_p1_true_bias_bool, short_unq_p1_false_bias_bool)\n","    long_tpbox_p2exec_hhm = hhm(long_unq_p1_true_bias_bool, long_unq_p1_false_bias_bool)\n","\n","    # short_p2_hhm = hhm(short_p2_true_bias_bool, short_p2_false_bias_bool)\n","    # long_p2_hhm = hhm(long_p2_true_bias_bool, long_p2_false_bias_bool)\n","\n","    short_outbox_hhm = hhm(short_p2_out_true_bias_bool, short_p2_out_false_bias_bool)\n","    long_outbox_hhm = hhm(long_p2_out_true_bias_bool, long_p2_out_false_bias_bool)\n","\n","    # print(\"short_tpbox_hhm, short_p2_hhm, short_outbox_hhm :\", short_tpbox_hhm, short_p2_hhm, short_outbox_hhm)\n","\n","    return short_tpbox_hhm, long_tpbox_hhm, short_tpbox_p2exec_hhm, long_tpbox_p2exec_hhm, short_outbox_hhm, long_outbox_hhm, short_p2_true_bias_bool, long_p2_true_bias_bool, \\\n","           short_tp_1[short_en_idx], short_tp_0[short_en_idx], long_tp_1[long_en_idx], long_tp_0[long_en_idx], \\\n","           short_out_1[short_en_idx], short_out_0[short_en_idx], long_out_1[long_en_idx], long_out_0[long_en_idx], short_ep2_0[short_en_idx], \\\n","           long_ep2_0[long_en_idx]  # plot_check 을 위해 en_idx 넣음"],"metadata":{"id":"uB-I09hKKvmu","executionInfo":{"status":"ok","timestamp":1653629956497,"user_tz":-540,"elapsed":828,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["def get_wave_bias_v4(res_df, config, high, low, len_df, short_net_p1_idx_arr, long_net_p1_idx_arr, short_p2_idx_arr, long_p2_idx_arr, short_obj,\n","                     long_obj):\n","    short_net_p1_idx = short_net_p1_idx_arr.astype(int) #.reshape(-1, 1)\n","    short_p1_idx = short_obj[-1].astype(int).ravel()\n","    short_p2_idx = short_p2_idx_arr.astype(int).ravel() #.reshape(-1, 1)\n","    short_en_idx = short_obj[2].astype(int)\n","\n","    short_tp_1 = ffill_line(res_df['short_tp_1_{}'.format(config.selection_id)].to_numpy(),\n","                            short_net_p1_idx)  # net_p1_idx ~ net_p1_idx' 사이에 대한 momentum 조사 (net 이유는 logic's validation)\n","    short_tp_0 = ffill_line(res_df['short_tp_0_{}'.format(config.selection_id)].to_numpy(), short_net_p1_idx)\n","    short_out_1 = ffill_line(res_df['short_out_1_{}'.format(config.selection_id)].to_numpy(),\n","                             short_p2_idx)  # 체결된, p2_idx ~ p2_idx' 사이에 대한 momentum 조사\n","    short_out_0 = ffill_line(res_df['short_out_0_{}'.format(config.selection_id)].to_numpy(), short_p2_idx)\n","    short_ep2_0 = ffill_line(res_df['short_ep2_0_{}'.format(config.selection_id)].to_numpy(), short_p2_idx)\n","    # short_net_wave_1 = ffill_line(res_df['short_wave_1_{}'.format(config.selection_id)].to_numpy(), short_op_idx)  # en_idx 에 sync 된 open_idx 를 사용해야함\n","    # short_net_wave_0 = ffill_line(res_df['short_wave_0_{}'.format(config.selection_id)].to_numpy(), short_op_idx)\n","\n","    long_net_p1_idx = long_net_p1_idx_arr.astype(int) #.reshape(-1, 1)\n","    long_p1_idx = long_obj[-1].astype(int).ravel()\n","    long_p2_idx = long_p2_idx_arr.astype(int).ravel() #.reshape(-1, 1)\n","    long_en_idx = long_obj[2].astype(int)\n","\n","    long_tp_1 = ffill_line(res_df['long_tp_1_{}'.format(config.selection_id)].to_numpy(), long_net_p1_idx)\n","    long_tp_0 = ffill_line(res_df['long_tp_0_{}'.format(config.selection_id)].to_numpy(), long_net_p1_idx)\n","    long_out_1 = ffill_line(res_df['long_out_1_{}'.format(config.selection_id)].to_numpy(), long_p2_idx)  # 체결된, p2_idx ~ p2_idx' 사이에 대한 momentum 조사\n","    long_out_0 = ffill_line(res_df['long_out_0_{}'.format(config.selection_id)].to_numpy(), long_p2_idx)\n","    long_ep2_0 = ffill_line(res_df['long_ep2_0_{}'.format(config.selection_id)].to_numpy(), long_p2_idx)\n","\n","    short_unq_p1_idx = np.unique(short_p1_idx)  #.reshape(-1, 1)  # 통일성을 위해 2d 로 설정\n","    long_unq_p1_idx = np.unique(long_p1_idx)  #.reshape(-1, 1)\n","\n","    bias_info_tick = config.tr_set.bias_info_tick\n","\n","    # print(\"long_net_p1_idx.shape :\", long_net_p1_idx.shape)\n","    # print(\"long_en_idx.shape :\", long_en_idx.shape)\n","\n","    # ------------------ touch idx ------------------ #\n","    # 1. min 에 초점을 맞추는 거니까, touch 없을시 len_df 로 설정\n","    # 2. future_data 사용이니까, shift(-bias_info_tick) 설정\n","    # 3. entry 다음 idx 부터 -> tp & out 체결 logic 이 현재 entry_idx 부터 되어있어서 취소\n","    # Todo, high 와 low 중 어디에 먼저닿느냐가 중요함을 key 로 잡고만든 logic 임\n","    len_df_range = np.arange(len_df)\n","    last_idx = len_df - 1\n","    shift_range = bias_info_tick - 1  # entry_idx 까지 포함해서 wave_bias check\n","\n","    short_tp_1_touch_idx = pd.Series(np.where(low <= short_tp_1, len_df_range, last_idx)).rolling(bias_info_tick, min_periods=1).min().shift(\n","        -shift_range).to_numpy()\n","    short_tp_0_touch_idx = pd.Series(np.where(high >= short_tp_0, len_df_range, last_idx)).rolling(bias_info_tick, min_periods=1).min().shift(\n","        -shift_range).to_numpy()\n","    long_tp_1_touch_idx = pd.Series(np.where(high >= long_tp_1, len_df_range, last_idx)).rolling(bias_info_tick, min_periods=1).min().shift(\n","        -shift_range).to_numpy()\n","    long_tp_0_touch_idx = pd.Series(np.where(low <= long_tp_0, len_df_range, last_idx)).rolling(bias_info_tick, min_periods=1).min().shift(\n","        -shift_range).to_numpy()\n","\n","    short_out_1_touch_idx = pd.Series(np.where(low <= short_out_1, len_df_range, last_idx)).rolling(bias_info_tick, min_periods=1).min().shift(\n","        -shift_range).to_numpy()\n","    short_out_0_touch_idx = pd.Series(np.where(high >= short_out_0, len_df_range, last_idx)).rolling(bias_info_tick, min_periods=1).min().shift(\n","        -shift_range).to_numpy()\n","    long_out_1_touch_idx = pd.Series(np.where(high >= long_out_1, len_df_range, last_idx)).rolling(bias_info_tick, min_periods=1).min().shift(\n","        -shift_range).to_numpy()\n","    long_out_0_touch_idx = pd.Series(np.where(low <= long_out_0, len_df_range, last_idx)).rolling(bias_info_tick, min_periods=1).min().shift(\n","        -shift_range).to_numpy()\n","\n","    short_tp_1_net_p1_touch_idx = short_tp_1_touch_idx[short_net_p1_idx]  # for tp_box's net_hhm\n","    short_tp_0_net_p1_touch_idx = short_tp_0_touch_idx[short_net_p1_idx]\n","    long_tp_1_net_p1_touch_idx = long_tp_1_touch_idx[long_net_p1_idx]\n","    long_tp_0_net_p1_touch_idx = long_tp_0_touch_idx[long_net_p1_idx]\n","\n","    short_tp_1_unq_p1_touch_idx = short_tp_1_touch_idx[short_unq_p1_idx]  # p2 까지 체결된 p1's hhm\n","    short_tp_0_unq_p1_touch_idx = short_tp_0_touch_idx[short_unq_p1_idx]\n","    long_tp_1_unq_p1_touch_idx = long_tp_1_touch_idx[long_unq_p1_idx]\n","    long_tp_0_unq_p1_touch_idx = long_tp_0_touch_idx[long_unq_p1_idx]\n","\n","    # print(np.sum(np.isnan(short_tp_1_unq_p1_touch_idx)))\n","    # print(np.sum(np.isnan(short_tp_0_unq_p1_touch_idx)))\n","    # print(np.sum(np.isnan(long_tp_1_unq_p1_touch_idx)))\n","    # print(np.sum(np.isnan(long_tp_0_unq_p1_touch_idx)))\n","\n","    short_tp_1_p2_touch_idx = short_tp_1_touch_idx[short_p2_idx]  # hlm 을 위한 hhm (on p2)\n","    short_tp_0_p2_touch_idx = short_tp_0_touch_idx[short_p2_idx]\n","    long_tp_1_p2_touch_idx = long_tp_1_touch_idx[long_p2_idx]\n","    long_tp_0_p2_touch_idx = long_tp_0_touch_idx[long_p2_idx]\n","\n","    short_out_1_p2_touch_idx = short_out_1_touch_idx[short_p2_idx]  # for out_box's executed_hhm\n","    short_out_0_p2_touch_idx = short_out_0_touch_idx[short_p2_idx]\n","    long_out_1_p2_touch_idx = long_out_1_touch_idx[long_p2_idx]\n","    long_out_0_p2_touch_idx = long_out_0_touch_idx[long_p2_idx]\n","\n","    # ------------------ bias_bool & hhm ------------------ #\n","    short_net_p1_true_bias_bool = short_tp_1_net_p1_touch_idx < short_tp_0_net_p1_touch_idx  # true_bias 의 조건\n","    short_net_p1_false_bias_bool = short_tp_1_net_p1_touch_idx >= short_tp_0_net_p1_touch_idx  # false_bias 의 조건, ~true_bias_bool 와 같지 않음, why ..? = nan value\n","    long_net_p1_true_bias_bool = long_tp_1_net_p1_touch_idx < long_tp_0_net_p1_touch_idx\n","    long_net_p1_false_bias_bool = long_tp_1_net_p1_touch_idx >= long_tp_0_net_p1_touch_idx\n","\n","    short_unq_p1_true_bias_bool = short_tp_1_unq_p1_touch_idx < short_tp_0_unq_p1_touch_idx  # true_bias 의 조건\n","    short_unq_p1_false_bias_bool = short_tp_1_unq_p1_touch_idx >= short_tp_0_unq_p1_touch_idx  # false_bias 의 조건, ~true_bias_bool 와 같지 않음, why ..? = nan value\n","    long_unq_p1_true_bias_bool = long_tp_1_unq_p1_touch_idx < long_tp_0_unq_p1_touch_idx\n","    long_unq_p1_false_bias_bool = long_tp_1_unq_p1_touch_idx >= long_tp_0_unq_p1_touch_idx\n","\n","    short_p2_true_bias_bool = short_tp_1_p2_touch_idx < short_tp_0_p2_touch_idx\n","    # short_p2_false_bias_bool = short_tp_1_p2_touch_idx >= short_tp_0_p2_touch_idx\n","    long_p2_true_bias_bool = long_tp_1_p2_touch_idx < long_tp_0_p2_touch_idx\n","    # long_p2_false_bias_bool = long_tp_1_p2_touch_idx >= long_tp_0_p2_touch_idx\n","\n","    short_p2_out_true_bias_bool = short_out_1_p2_touch_idx < short_out_0_p2_touch_idx\n","    short_p2_out_false_bias_bool = short_out_1_p2_touch_idx >= short_out_0_p2_touch_idx\n","    long_p2_out_true_bias_bool = long_out_1_p2_touch_idx < long_out_0_p2_touch_idx\n","    long_p2_out_false_bias_bool = long_out_1_p2_touch_idx >= long_out_0_p2_touch_idx\n","\n","    short_net_p1_hhm = hhm(short_net_p1_true_bias_bool, short_net_p1_false_bias_bool)\n","    long_net_p1_hhm = hhm(long_net_p1_true_bias_bool, long_net_p1_false_bias_bool)\n","\n","    short_p1_hhm = hhm(short_unq_p1_true_bias_bool, short_unq_p1_false_bias_bool)\n","    long_p1_hhm = hhm(long_unq_p1_true_bias_bool, long_unq_p1_false_bias_bool)\n","    \n","    # print(\"np.sum(short_net_p1_true_bias_bool) :\", np.sum(short_net_p1_true_bias_bool))\n","    # print(\"np.sum(long_net_p1_true_bias_bool) :\", np.sum(long_net_p1_true_bias_bool))\n","\n","    # print(\"np.sum(short_unq_p1_true_bias_bool) :\", np.sum(short_unq_p1_true_bias_bool))\n","    # print(\"np.sum(short_unq_p1_false_bias_bool) :\", np.sum(short_unq_p1_false_bias_bool))\n","    # print(\"np.sum(long_unq_p1_true_bias_bool) :\", np.sum(long_unq_p1_true_bias_bool))\n","    # print(\"np.sum(long_unq_p1_false_bias_bool) :\", np.sum(long_unq_p1_false_bias_bool))\n","\n","    # short_p2_hhm = hhm(short_p2_true_bias_bool, short_p2_false_bias_bool)\n","    # long_p2_hhm = hhm(long_p2_true_bias_bool, long_p2_false_bias_bool)\n","\n","    short_out_hhm = hhm(short_p2_out_true_bias_bool, short_p2_out_false_bias_bool)\n","    long_out_hhm = hhm(long_p2_out_true_bias_bool, long_p2_out_false_bias_bool)\n","\n","    # print(\"short_net_p1_hhm, short_p2_hhm, short_out_hhm :\", short_net_p1_hhm, short_p2_hhm, short_out_hhm)\n","\n","    return short_net_p1_hhm, long_net_p1_hhm, short_p1_hhm, long_p1_hhm, short_out_hhm, long_out_hhm, short_p2_true_bias_bool, long_p2_true_bias_bool, \\\n","           short_tp_1[short_en_idx], short_tp_0[short_en_idx], long_tp_1[long_en_idx], long_tp_0[long_en_idx], \\\n","           short_out_1[short_en_idx], short_out_0[short_en_idx], long_out_1[long_en_idx], long_out_0[long_en_idx], short_ep2_0[short_en_idx], \\\n","           long_ep2_0[long_en_idx]  # plot_check 을 위해 en_idx 넣음"],"metadata":{"id":"FuIwazc3P5d1"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"_blyFhQJUd5X"},"source":["#### dump"]},{"cell_type":"code","source":["\n","def hlm(pr_list, true_bool):   # true_pr in true_bias / true_bias\n","  true_bias_pr = pr_list[true_bool].ravel()\n","  print(\"len(pr_list) :\", len(pr_list))\n","  print(\"len(true_bias_pr) :\", len(true_bias_pr))\n","  print(\"np.sum(pr_list > 1) :\", np.sum(pr_list > 1))\n","  print(\"np.sum(true_bias_pr > 1) :\", np.sum(true_bias_pr > 1))\n","  return np.sum(true_bias_pr > 1) / len(true_bias_pr)  # 차원을 고려한 계산"],"metadata":{"id":"6YcqQQzsl6Ys","executionInfo":{"status":"ok","timestamp":1653630323394,"user_tz":-540,"elapsed":506,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"execution_count":28,"outputs":[]},{"cell_type":"code","source":["\n","def get_wave_bias_v5_1(res_df, config, high, low, len_df, short_net_p1_idx_arr, long_net_p1_idx_arr, short_p2_idx_arr, long_p2_idx_arr, short_obj, long_obj):\n","\n","    short_net_p1_idx = short_net_p1_idx_arr.astype(int) #.reshape(-1, 1)\n","    short_p1_idx = short_obj[-1].astype(int).ravel()\n","    short_p2_idx = short_p2_idx_arr.astype(int).ravel() #.reshape(-1, 1)\n","    short_en_idx = short_obj[2].astype(int)\n","\n","    short_prime_net_p1_bool = short_net_p1_idx - pd.Series(short_net_p1_idx).shift(1).to_numpy() > 1\n","    short_prime_net_p1_bool[0] = True\n","    short_prime_net_p1_idx = short_net_p1_idx[short_prime_net_p1_bool]\n","    \n","    short_prime_p2_bool = short_p2_idx - pd.Series(short_p2_idx).shift(1).to_numpy() > 1\n","    short_prime_p2_bool[0] = True\n","    short_prime_p2_idx = short_p2_idx[short_prime_p2_bool]\n","    \n","    short_tp_1 = ffill_line(res_df['short_tp_1_{}'.format(config.selection_id)].to_numpy(), short_prime_net_p1_idx)  # net_p1_idx ~ net_p1_idx' 사이에 대한 momentum 조사 (net 이유는 logic's validation)\n","    short_tp_0 = ffill_line(res_df['short_tp_0_{}'.format(config.selection_id)].to_numpy(), short_prime_net_p1_idx)\n","    short_out_1 = ffill_line(res_df['short_out_1_{}'.format(config.selection_id)].to_numpy(), short_prime_p2_idx)  # 체결된, p2_idx ~ p2_idx' 사이에 대한 momentum 조사\n","    short_out_0 = ffill_line(res_df['short_out_0_{}'.format(config.selection_id)].to_numpy(), short_prime_p2_idx)\n","    short_ep2_0 = ffill_line(res_df['short_ep2_0_{}'.format(config.selection_id)].to_numpy(), short_prime_p2_idx)\n","    # short_net_wave_1 = ffill_line(res_df['short_wave_1_{}'.format(config.selection_id)].to_numpy(), short_op_idx)  # en_idx 에 sync 된 open_idx 를 사용해야함\n","    # short_net_wave_0 = ffill_line(res_df['short_wave_0_{}'.format(config.selection_id)].to_numpy(), short_op_idx)\n","\n","    long_net_p1_idx = long_net_p1_idx_arr.astype(int) #.reshape(-1, 1)\n","    long_p1_idx = long_obj[-1].astype(int).ravel()\n","    long_p2_idx = long_p2_idx_arr.astype(int).ravel() #.reshape(-1, 1)\n","    long_en_idx = long_obj[2].astype(int)\n","\n","    long_prime_net_p1_bool = long_net_p1_idx - pd.Series(long_net_p1_idx).shift(1).to_numpy() > 1\n","    long_prime_net_p1_bool[0] = True\n","    long_prime_net_p1_idx = long_net_p1_idx[long_prime_net_p1_bool]\n","    \n","    long_prime_p2_bool = long_p2_idx - pd.Series(long_p2_idx).shift(1).to_numpy() > 1\n","    long_prime_p2_bool[0] = True\n","    long_prime_p2_idx = long_p2_idx[long_prime_p2_bool]\n","    \n","    long_tp_1 = ffill_line(res_df['long_tp_1_{}'.format(config.selection_id)].to_numpy(), long_prime_net_p1_idx)\n","    long_tp_0 = ffill_line(res_df['long_tp_0_{}'.format(config.selection_id)].to_numpy(), long_prime_net_p1_idx)\n","    long_out_1 = ffill_line(res_df['long_out_1_{}'.format(config.selection_id)].to_numpy(), long_prime_p2_idx)  # 체결된, p2_idx ~ p2_idx' 사이에 대한 momentum 조사\n","    long_out_0 = ffill_line(res_df['long_out_0_{}'.format(config.selection_id)].to_numpy(), long_prime_p2_idx)\n","    long_ep2_0 = ffill_line(res_df['long_ep2_0_{}'.format(config.selection_id)].to_numpy(), long_prime_p2_idx)\n","\n","    short_unq_p1_idx = np.unique(short_p1_idx)  #.reshape(-1, 1)   # 통일성을 위해 2d 로 설정\n","    long_unq_p1_idx = np.unique(long_p1_idx)  #.reshape(-1, 1)\n","\n","    bias_info_tick = config.tr_set.bias_info_tick\n","\n","    # print(\"long_net_p1_idx.shape :\", long_net_p1_idx.shape)\n","    # print(\"long_en_idx.shape :\", long_en_idx.shape)\n","\n","    # ================== touch idx ================== #\n","    # 1. min 에 초점을 맞추는 거니까, touch 없을시 len_df 로 설정\n","    # 2. future_data 사용이니까, shift(-bias_info_tick) 설정\n","    # 3. entry 다음 idx 부터 -> tp & out 체결 logic 이 현재 entry_idx 부터 되어있어서 취소\n","    # Todo, high 와 low 중 어디에 먼저닿느냐가 중요함을 key 로 잡고만든 logic 임\n","    len_df_range = np.arange(len_df)\n","    last_idx = len_df - 1  # nan 발생하면 대소 비교로 hhm 확인이 불가능해짐\n","    shift_range = bias_info_tick - 1  # entry_idx 까지 포함해서 wave_bias check\n","\n","    # ------------ pair & idxs ------------ #\n","    short_net_p1_pair = list(zip(short_net_p1_idx, np.append(short_net_p1_idx[1:], last_idx)))\n","    long_net_p1_pair = list(zip(long_net_p1_idx, np.append(long_net_p1_idx[1:], last_idx)))\n","\n","    short_p2_pair = list(zip(short_p2_idx, np.append(short_p2_idx[1:], last_idx)))\n","    long_p2_pair = list(zip(long_p2_idx, np.append(long_p2_idx[1:], last_idx)))\n","\n","    short_tp_1_touch_idxs = np.where(low <= short_tp_1, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    short_tp_0_touch_idxs = np.where(high >= short_tp_0, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    long_tp_1_touch_idxs = np.where(high >= long_tp_1, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    long_tp_0_touch_idxs = np.where(low <= long_tp_0, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","\n","    short_out_1_touch_idxs = np.where(low <= short_out_1, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    short_out_0_touch_idxs = np.where(high >= short_out_0, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    long_out_1_touch_idxs = np.where(high >= long_out_1, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    long_out_0_touch_idxs = np.where(low <= long_out_0, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","\n","    # ------------ min touch_idx ------------ #\n","    short_tp_1_touch_idx = get_touch_idx_fill(short_tp_1_touch_idxs, short_net_p1_pair, short_net_p1_idx, len_df)  # pair means 구간\n","    short_tp_0_touch_idx = get_touch_idx_fill(short_tp_0_touch_idxs, short_net_p1_pair, short_net_p1_idx, len_df)\n","    long_tp_1_touch_idx = get_touch_idx_fill(long_tp_1_touch_idxs, long_net_p1_pair, long_net_p1_idx, len_df)\n","    long_tp_0_touch_idx = get_touch_idx_fill(long_tp_0_touch_idxs, long_net_p1_pair, long_net_p1_idx, len_df)\n","\n","    short_out_1_touch_idx = get_touch_idx_fill(short_out_1_touch_idxs, short_p2_pair, short_p2_idx, len_df)  # pair means 구간\n","    short_out_0_touch_idx = get_touch_idx_fill(short_out_0_touch_idxs, short_p2_pair, short_p2_idx, len_df)\n","    long_out_1_touch_idx = get_touch_idx_fill(long_out_1_touch_idxs, long_p2_pair, long_p2_idx, len_df)\n","    long_out_0_touch_idx = get_touch_idx_fill(long_out_0_touch_idxs, long_p2_pair, long_p2_idx, len_df)\n","\n","    # ------------ point's touch_idx ------------ #\n","    short_tp_1_net_p1_touch_idx = short_tp_1_touch_idx[short_net_p1_idx]   # for tp_box's net_hhm\n","    short_tp_0_net_p1_touch_idx = short_tp_0_touch_idx[short_net_p1_idx]\n","    long_tp_1_net_p1_touch_idx = long_tp_1_touch_idx[long_net_p1_idx]\n","    long_tp_0_net_p1_touch_idx = long_tp_0_touch_idx[long_net_p1_idx]\n","    # print(\"long_tp_1_net_p1_touch_idx :\", long_tp_1_net_p1_touch_idx)\n","\n","    short_tp_1_unq_p1_touch_idx = short_tp_1_touch_idx[short_unq_p1_idx]    # p2 까지 체결된 p1's hhm\n","    short_tp_0_unq_p1_touch_idx = short_tp_0_touch_idx[short_unq_p1_idx]\n","    long_tp_1_unq_p1_touch_idx = long_tp_1_touch_idx[long_unq_p1_idx]\n","    long_tp_0_unq_p1_touch_idx = long_tp_0_touch_idx[long_unq_p1_idx]\n","\n","    short_tp_1_p2_touch_idx = short_tp_1_touch_idx[short_p2_idx]    # hlm 을 위한 hhm (on p2)\n","    short_tp_0_p2_touch_idx = short_tp_0_touch_idx[short_p2_idx]\n","    long_tp_1_p2_touch_idx = long_tp_1_touch_idx[long_p2_idx]\n","    long_tp_0_p2_touch_idx = long_tp_0_touch_idx[long_p2_idx]\n","\n","    short_out_1_p2_touch_idx = short_out_1_touch_idx[short_p2_idx]   # for out_box's executed_hhm\n","    short_out_0_p2_touch_idx = short_out_0_touch_idx[short_p2_idx]\n","    long_out_1_p2_touch_idx = long_out_1_touch_idx[long_p2_idx]\n","    long_out_0_p2_touch_idx = long_out_0_touch_idx[long_p2_idx]\n","\n","    # ------------------ bias_bool & hhm ------------------ #\n","    short_net_p1_true_bias_bool = short_tp_1_net_p1_touch_idx < short_tp_0_net_p1_touch_idx  # true_bias 의 조건\n","    short_net_p1_false_bias_bool = short_tp_1_net_p1_touch_idx >= short_tp_0_net_p1_touch_idx  # false_bias 의 조건, ~true_bias_bool 와 같지 않음, why ..? = en_idx\n","    long_net_p1_true_bias_bool = long_tp_1_net_p1_touch_idx < long_tp_0_net_p1_touch_idx\n","    long_net_p1_false_bias_bool = long_tp_1_net_p1_touch_idx >= long_tp_0_net_p1_touch_idx\n","\n","    short_unq_p1_true_bias_bool = short_tp_1_unq_p1_touch_idx < short_tp_0_unq_p1_touch_idx  # true_bias 의 조건\n","    short_unq_p1_false_bias_bool = short_tp_1_unq_p1_touch_idx >= short_tp_0_unq_p1_touch_idx  # false_bias 의 조건, ~true_bias_bool 와 같지 않음, why ..? = en_idx    \n","    long_unq_p1_true_bias_bool = long_tp_1_unq_p1_touch_idx < long_tp_0_unq_p1_touch_idx\n","    long_unq_p1_false_bias_bool = long_tp_1_unq_p1_touch_idx >= long_tp_0_unq_p1_touch_idx\n","\n","    short_p2_true_bias_bool = short_tp_1_p2_touch_idx < short_tp_0_p2_touch_idx\n","    short_p2_false_bias_bool = short_tp_1_p2_touch_idx >= short_tp_0_p2_touch_idx\n","    long_p2_true_bias_bool = long_tp_1_p2_touch_idx < long_tp_0_p2_touch_idx\n","    long_p2_false_bias_bool = long_tp_1_p2_touch_idx >= long_tp_0_p2_touch_idx\n","\n","    short_p2_out_true_bias_bool = short_out_1_p2_touch_idx < short_out_0_p2_touch_idx\n","    short_p2_out_false_bias_bool = short_out_1_p2_touch_idx >= short_out_0_p2_touch_idx\n","    long_p2_out_true_bias_bool = long_out_1_p2_touch_idx < long_out_0_p2_touch_idx\n","    long_p2_out_false_bias_bool = long_out_1_p2_touch_idx >= long_out_0_p2_touch_idx\n","\n","    short_net_p1_hhm = hhm(short_net_p1_true_bias_bool, short_net_p1_false_bias_bool)\n","    long_net_p1_hhm = hhm(long_net_p1_true_bias_bool, long_net_p1_false_bias_bool)\n","\n","    short_p1_hhm = hhm(short_unq_p1_true_bias_bool, short_unq_p1_false_bias_bool)\n","    long_p1_hhm = hhm(long_unq_p1_true_bias_bool, long_unq_p1_false_bias_bool)\n","\n","    # short_p2_hhm = hhm(short_p2_true_bias_bool, short_p2_false_bias_bool)\n","    # long_p2_hhm = hhm(long_p2_true_bias_bool, long_p2_false_bias_bool)\n","\n","    short_out_hhm = hhm(short_p2_out_true_bias_bool, short_p2_out_false_bias_bool)\n","    long_out_hhm = hhm(long_p2_out_true_bias_bool, long_p2_out_false_bias_bool)\n","\n","    # print(\"short_net_p1_hhm, short_p2_hhm, short_out_hhm :\", short_net_p1_hhm, short_p2_hhm, short_out_hhm)\n","\n","    return short_net_p1_hhm, long_net_p1_hhm, short_p1_hhm, long_p1_hhm, short_out_hhm, long_out_hhm, short_p2_true_bias_bool, long_p2_true_bias_bool, \\\n","          short_tp_1[short_en_idx], short_tp_0[short_en_idx], long_tp_1[long_en_idx], long_tp_0[long_en_idx], \\\n","          short_out_1[short_en_idx], short_out_0[short_en_idx], long_out_1[long_en_idx], long_out_0[long_en_idx], short_ep2_0[short_en_idx], long_ep2_0[long_en_idx]   # plot_check 을 위해 en_idx 넣음\n","          "],"metadata":{"id":"t7a5Hyyyd5Lk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","        # tr_arr = res_df['{}_tr_{}'.format(side_pos, selection_id)].to_numpy()\n","\n","        # ------ point1 & 2's tp_j ------ #\n","        # point_idxgap = point_idxgap_arr[op_idx]\n","        # if np.isnan(point_idxgap):\n","        #     continue\n","        # else:\n","        #     # ------ allow point2 only next to point1 ------ #\n","        #     open_arr = res_df['{}_open_{}'.format(side_pos, selection_id)].to_numpy()\n","        #     tp_j = int(op_idx - point_idxgap)\n","        #     if np.sum(open_arr[tp_j:op_idx]) != 0:\n","        #         continue"],"metadata":{"id":"dsI-R8Zz7ls1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# ------ bias frquency ------ #\n","len_df = len(res_df)\n","\n","plt.figure(figsize=(16, 2))\n","\n","ax1 = plt.subplot(121)\n","plt.fill_between(short_obj[-2].ravel(), 0, 1, where=short_bias_arr.ravel() > 0,\n","                facecolor='#00ff00', alpha=1, transform=ax1.get_xaxis_transform())   # 00ff00\n","# plt.fill_between(short_obj[-2].ravel(), 0, 1, where=short_bias_arr.ravel() < 1,\n","#                 facecolor='#ff00ff', alpha=1, transform=ax1.get_xaxis_transform())\n","\n","ax2 = plt.subplot(122)\n","plt.fill_between(long_obj[-2].ravel(), 0, 1, where=long_bias_arr.ravel() > 0,\n","                facecolor='#00ff00', alpha=1, transform=ax2.get_xaxis_transform())\n","plt.fill_between(long_obj[-2].ravel(), 0, 1, where=long_bias_arr.ravel() < 1,\n","                facecolor='#ff00ff', alpha=1, transform=ax2.get_xaxis_transform())\n","plt.show()"],"metadata":{"id":"gMur2u8WeQ2K","colab":{"base_uri":"https://localhost:8080/","height":157},"executionInfo":{"status":"ok","timestamp":1652751452213,"user_tz":-540,"elapsed":350,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"7b506c38-7a8f-4bd1-a021-8a065d009882"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1152x144 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# ------ bias frquency ------ #\n","len_df = len(res_df)\n","\n","plt.figure(figsize=(16, 2))\n","\n","ax1 = plt.subplot(121)\n","plt.fill_between(short_obj[-2].ravel(), 0, 1, where=short_bias_arr.ravel() > 0,\n","                facecolor='#00ff00', alpha=1, transform=ax1.get_xaxis_transform())   # 00ff00\n","# plt.fill_between(short_obj[-2].ravel(), 0, 1, where=short_bias_arr.ravel() < 1,\n","#                 facecolor='#ff00ff', alpha=1, transform=ax1.get_xaxis_transform())\n","\n","ax2 = plt.subplot(122)\n","plt.vlines(long_obj[-2][long_bias_arr], ymin=0, ymax=1, color='#00ff00')\n","plt.vlines(long_obj[-2][~long_bias_arr], ymin=0, ymax=1, color='#ff00ff')\n","# [plt.axvline(x_, color='#ff00ff') for x_, bias_ in zip(long_obj[-2], long_bias_arr) if not bias_]\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":157},"id":"eoXMxRm3qdz2","executionInfo":{"status":"ok","timestamp":1652756329304,"user_tz":-540,"elapsed":872,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"98c90b55-4c14-402c-e2d4-d7b88f9e2e62"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1152x144 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["%timeit -n1 -r10 plt.vlines(long_obj[-2][long_bias_arr], ymin=0, ymax=1, color='#00ff00')  # 528 ms per loop --> 8.71 ms per loop\n","%timeit -n1 -r10 [plt.axvline(x_, color='#00ff00') for x_, bias_ in zip(long_obj[-2], long_bias_arr) if bias_]\n","\n","# np.sum(long_bias_arr == ~long_bias_arr)"],"metadata":{"id":"dm7ZqzS9vqhm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# %timeit -n1 -r10 [plt.axvline(x_) for x_, bias_ in zip(long_obj[-2].ravel(), long_bias_arr.ravel()) if bias_]\n","%timeit -n1 -r10 plt.fill_between(long_obj[-2].ravel(), 0, 1, where=long_bias_arr.ravel() > 0, facecolor='#00ff00', alpha=1, transform=ax2.get_xaxis_transform())"],"metadata":{"id":"qOE2YSzntx8v"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"dHFkv6Ar1ojU"},"source":["## plot_check_v2"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FCpPCl931ojV"},"outputs":[],"source":["# res_df = wave_range_v4(res_df, 20, ltf_df=None, touch_lbperiod=50)\n","# res_df = h_candle_v4(res_df, 20, ltf_df=None, touch_lbperiod=50)\n","del np_plot_params"]},{"cell_type":"code","execution_count":38,"metadata":{"id":"rMIwv1Nr1ojX","executionInfo":{"status":"ok","timestamp":1653632441605,"user_tz":-540,"elapsed":324,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# ------------------ plot_config ------------------ #\n","save_mode = 0\n","\n","front_plot = 0    # 0 : p1_tick, 1 : p2_tick\n","back_plot = 4     # 0 : post_plot_size, 1 : open, 2 : p2_tick, 3 : ep_tick, 4 : tp_tick, 5 : bias_tick (사용 금지)\n","\n","bias_plot = 0     # 1 : true_bias only, -1 : false_bias only, 0 : both\n","\n","pr_descend = 0   # 1 : 큰 pr 부터, -1 : 작은 pr 부터, 0 : 순서대로\n","\n","position = 1      # -1 : short, 0 & 1 : long\n","\n","x_max = 500\n","x_margin_mult = 1/30\n","y_margin_mult = 1/30  # 0 \n","\n","prev_plotsize = 100 #  150 100 20 500\n","post_plotsize = 160 # config.tr_set.bias_info_tick -> excessive bit 는 감당 못함\n","\n","inversion = 0\n","hedge = 0\n","\n","# ------ show or save ------ #\n","if save_mode:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".ftr\", \"\")\n","  shutil.rmtree(plot_check_dir, ignore_errors=True)  # remove existing dir\n","  os.makedirs(plot_check_dir)\n","  print(plot_check_dir)\n","else:\n","  plot_check_dir = None\n","\n","# ------------ 한 방향에 대해 plot_check 함 (by position var.) ------------ #\n","#   obj by position  \n","if position == -1:\n","  pos_str = \"SELL\"\n","  pr_, obj_ = short_pr, short_obj\n","  arr_list = [short_p2_idx_arr, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_bias_arr, short_tp_1, short_tp_0, short_out_1, short_out_0, short_ep2_0]\n","else:   # both option currently not supported\n","  pos_str = \"BUY\"\n","  pr_, obj_ = long_pr, long_obj\n","  arr_list = [long_p2_idx_arr, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_bias_arr, long_tp_1, long_tp_0, long_out_1, long_out_0, long_ep2_0]\n","\n","if pr_descend:\n","    if pr_descend == -1:\n","      pr_descend = 0\n","    pr, obj, [p2_idx_arr, lvrg_arr, fee_arr, tpout_arr, bias_arr, tp_1, tp_0, out_1, out_0, ep2_0] = sort_bypr_v4(pr_, obj_, arr_list, descending=pr_descend)  # --> pr_descend 의 의미가 사라짐.. (false -> true plot 으로 이동한 것뿐)\n","else:\n","  pr, obj, [p2_idx_arr, lvrg_arr, fee_arr, tpout_arr, bias_arr, tp_1, tp_0, out_1, out_0, ep2_0] = pr_, obj_, arr_list\n","\n","pr_msg = \"%s\\n {} ~ {} -> {:.5f}\\n lvrg : {}\\n fee : {:.4f}\" % (pos_str)  # = data_window, pos_str 으로 이곳에서 정의함\n","\n","\n","if front_plot == 0:\n","  front_idx = obj[4]      # left_margin 기준 - open_idx\n","else:\n","  front_idx = p2_idx_arr  # left_margin 기준 - p2_idx\n","\n","left_end_idx = front_idx - prev_plotsize  \n","right_end_idx = obj[3] + post_plotsize\n","invalid_left_end = np.sum(left_end_idx < 0)\n","\n","np_plot_params = np.hstack((left_end_idx, right_end_idx, pr, *obj, p2_idx_arr, lvrg_arr, fee_arr, tpout_arr, tp_1, tp_0, out_1, out_0, ep2_0))[invalid_left_end:]  # all arr should have same dimension\n","\n","if bias_plot:\n","  if bias_plot == 1:\n","    bias_idx = bias_arr[invalid_left_end:].ravel()  # true_bias 만 plot\n","  else:\n","    bias_idx = ~bias_arr[invalid_left_end:].ravel()  # false_bias 만 plot\n","\n","  np_plot_params = np_plot_params[bias_idx]"]},{"cell_type":"markdown","metadata":{"id":"-4CXGqEN1ojY"},"source":["### session_plot"]},{"cell_type":"code","execution_count":31,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":380,"status":"ok","timestamp":1653630566818,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"outputId":"e7a2e86a-4425-45f4-d3f0-314f37eef292","id":"2bjxKCIh1ojZ"},"outputs":[{"output_type":"stream","name":"stderr","text":["/content/drive/My Drive/Colab Notebooks/JnQ/funcs/funcs_plot_check.py:10: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  step_col_arr = np.array(col_list)\n"]}],"source":["selection_id = config.selection_id\n","\n","# ============ make col_idx_dict config ============ #\n","nonstep_col_list = []\n","step_col_list = []\n","step_col_list2 = []\n","stepmark_col_list = []\n","data_window_p1_col_list = []\n","data_window_p2_col_list = []\n","\n","# ============ nonstep_col_list - add info(col, alpha, color, linewidth) ============ #\n","# nonstep_col_list.append([['close'], 1, '#ffffff', 2])\n","\n","# ============ step_col_list - add info(col, alpha, color, linewidth) ============ #\n","# ------ htf_candle ------ #\n","hc_tf1 = '5T'\n","hc_tf2 = '15T'\n","\n","# step_col_list.append([['open_{}'.format(hc_tf1), 'close_{}'.format(hc_tf1)], 1, '#ffffff', 2])\n","# step_col_list.append([['open_{}'.format(hc_tf2), 'close_{}'.format(hc_tf2)], 1, '#ffffff', 4])\n","\n","# ------ resi_sup ------ #\n","# rs_tf = 'T'\n","# step_col_list.append([['resi_{}'.format(rs_tf), 'sup_{}'.format(rs_tf)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['resi_out_{}'.format(rs_tf), 'sup_out_{}'.format(rs_tf)], 1, 'dodgerblue', 2])\n","\n","# ------ wave_base ------ #\n","wave_itv1 = config.tr_set.wave_itv1\n","wave_itv2 = config.tr_set.wave_itv2\n","wave_period1 = config.tr_set.wave_period1\n","wave_period2 = config.tr_set.wave_period2\n","\n","# step_col_list.append([['dc_base_{}{}'.format(wave_itv1, wave_period1)], 1, '#5b9cf6', 1])\n","# step_col_list.append([['dc_base_{}{}'.format(wave_itv2, wave_period2)], 1, '#5b9cf6', 5])\n","\n","# step_col_list.append([['wave_low_fill_{}{}'.format(wave_tf, wave_period)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['wave_high_fill_{}{}'.format(wave_tf, wave_period)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['dc_upper_{}{}'.format(wave_tf, wave_period), 'dc_lower_{}{}'.format(wave_tf, wave_period)], 1, '#ffeb3b', 1])\n","\n","# ------ dc ------ #\n","dc_tf1 = '5T'\n","dc_period1 = 1\n","dc_tf2 = '15T'\n","dc_period2 = 1\n","\n","# step_col_list.append([['dc_upper_{}{}'.format(dc_tf2, dc_period2), 'dc_lower_{}{}'.format(dc_tf2, dc_period2)], 1, '#ff00ff', 4]),  # inner #ffeb3b\n","# step_col_list.append([['dc_base_{}{}'.format(dc_tf2, dc_period2)], 1, '#ffee58', 3]) # ffee58 5b9cf6\n","\n","# ------ bb ------ #\n","bb_tf1 = 'T'\n","bb_period1 = 60\n","\n","# step_col_list.append([['bb_upper_{}{}'.format(bb_tf1, bb_period1), 'bb_lower_{}{}'.format(bb_tf1, bb_period1)], 1, '#ffffff', 1])\n","# step_col_list.append([['bb_upper2_{}{}'.format(bb_tf1, bb_period1), 'bb_lower2_{}{}'.format(bb_tf1, bb_period1)], 1, '#ffffff', 1])\n","# step_col_list.append([['bb_upper3_{}{}'.format(bb_tf1, bb_period1), 'bb_lower3_{}{}'.format(bb_tf1, bb_period1)], 1, '#ffffff', 1])\n","# step_col_list.append([['bb_base_{}{}'.format(bb_tf1, bb_period1)], 1, '#00ff00', 1])\n","\n","\n","# ------ ema ------ #\n","# step_col_list.append([['ema_5T'], 1, '#03ed30', 2])\n","\n","# ============ step_col_list2 - add info(col, alpha, color, linewidth) ============ #\n","# ------ cci ------ #\n","step_col_list2.append([['cci_{}{}'.format(wave_itv1, wave_period1)], 1, '#00ff00', 3])\n","step_col_list2.append([['cci_{}{}'.format(wave_itv2, wave_period2)], 1, '#00ff00', 1])\n","\n","\n","# ============ stepmark_col_list - add info(col, alpha, color, linewidth, marker_style) ============ #\n","# stepmark_col_list.append([['sar_T'], 1, 'dodgerblue', 7])\n","\n","# ------ wave_range ------ #\n","stepmark_col_list.append([['wave_low_fill_{}{}'.format(wave_itv1, wave_period1)], 1, '#e91e63', 10, '*'])\n","stepmark_col_list.append([['wave_high_fill_{}{}'.format(wave_itv1, wave_period1)], 1, '#2962ff', 10, '*'])\n","\n","stepmark_col_list.append([['wave_low_fill_{}{}'.format(wave_itv2, wave_period2)], 1, '#ff00ff', 7, '*'])\n","stepmark_col_list.append([['wave_high_fill_{}{}'.format(wave_itv2, wave_period2)], 1, '#00ff00', 7, '*'])\n","  \n","# stepmark_col_list.append([['wave_co_marker_{}{}'.format(wave_itv1, wave_period1)], 1, '#00ff00', 3, 'o'])\n","# stepmark_col_list.append([['wave_cu_marker_{}{}'.format(wave_itv1, wave_period1)], 1, '#ff00ff', 3, 'o'])\n","\n","# ============ data_window_col_list ============ #\n","# ------ wrr ------ #\n","# data_window_col_list.append([['cu_wrr_21_{}{}'.format(wave_itv1, wave_period1)], 'cu_wrr_21_{}{}'.format(wave_itv1, wave_period1)])\n","# data_window_col_list.append([['co_wrr_21_{}{}'.format(wave_itv1, wave_period1)], 'co_wrr_21_{}{}'.format(wave_itv1, wave_period1)])\n","data_window_p1_col_list.append([['cu_wrr_32_{}{}'.format(wave_itv1, wave_period1)], 'cu_wrr_32_{}{}'.format(wave_itv1, wave_period1)])\n","data_window_p1_col_list.append([['co_wrr_32_{}{}'.format(wave_itv1, wave_period1)], 'co_wrr_32_{}{}'.format(wave_itv1, wave_period1)])\n","data_window_p2_col_list.append([['cu_wrr_32_{}{}'.format(wave_itv2, wave_period2)], 'cu_wrr_32_{}{}'.format(wave_itv2, wave_period2)])\n","data_window_p2_col_list.append([['co_wrr_32_{}{}'.format(wave_itv2, wave_period2)], 'co_wrr_32_{}{}'.format(wave_itv2, wave_period2)])\n","\n","# data_window_col_list.append([['short_tr_{}'.format(selection_id)], 'short_tr_{}'.format(selection_id)])\n","# data_window_col_list.append([['long_tr_{}'.format(selection_id)], 'long_tr_{}'.format(selection_id)])\n","\n","\n","# ====== str to numbcol ====== #\n","nonstep_col_arr = strcol_tonumb(res_df, nonstep_col_list)\n","step_col_arr = strcol_tonumb(res_df, step_col_list)\n","step_col_arr2 = strcol_tonumb(res_df, step_col_list2)\n","stepmark_col_arr = strcol_tonumb(res_df, stepmark_col_list)\n","data_window_p1_col_arr = strcol_tonumb(res_df, data_window_p1_col_list)\n","data_window_p2_col_arr = strcol_tonumb(res_df, data_window_p2_col_list)\n","\n","col_idx_dict = \\\n","{\n","  \"ohlc_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close']),\n","  # \"vp_col_idxs\": get_col_idxs(res_df, ['close', 'volume']),\n","  # \"ohlc_col_idxs\": get_col_idxs(res_df, ['haopen', 'hahigh', 'halow', 'haclose']),  # heikin-ashi ver.\n","  \"nonstep_col_info\": nonstep_col_arr,\n","  \"step_col_info\": step_col_arr,\n","  \"step_col_info2\": step_col_arr2,\n","  \"stepmark_col_info\": stepmark_col_arr,\n","  \"data_window_p1_col_info\": data_window_p1_col_arr,\n","  \"data_window_p2_col_info\": data_window_p2_col_arr,\n","  \"ylim_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close', 'short_tp_1_{}'.format(selection_id), 'long_tp_1_{}'.format(selection_id), 'short_tp_0_{}'.format(selection_id), 'long_tp_0_{}'.format(selection_id)])  \n","}   \n","#   'wave_low_fill_{}{}'.format(wave_itv2, wave_period2), 'wave_high_fill_{}{}'.format(wave_itv2, wave_period2)\n","#   'dc_upper_H', 'dc_lower_H', 'dc_upper_15T', 'dc_lower_15T', 'short_out_{}'.format(selection_id), 'long_out_{}'.format(selection_id)\n","#   'wave_1_{}'.format(wave_itv2), 'wave_0_{}'.format(wave_itv2), 'dc_upper_15T', 'dc_lower_15T'"]},{"cell_type":"markdown","source":["#### session_plot main"],"metadata":{"id":"XfvH5ngyieS9"}},{"cell_type":"code","execution_count":39,"metadata":{"id":"OCLMABZT1ojb","colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1NZKWPcWegPj9Um5WBIn3VunbwtOB2R6o"},"executionInfo":{"status":"error","timestamp":1653632555938,"user_tz":-540,"elapsed":112893,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"c7fda866-642e-47e6-abf0-04b0d60fb0d4"},"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}],"source":["_ = [plot_check_v8(res_df, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, back_plot, plot_check_dir, **col_idx_dict) for param_zip in zip(np_plot_params, np_plot_params[::-1])]"]},{"cell_type":"markdown","source":["### whole_plot"],"metadata":{"id":"sZAYhcdoXnm4"}},{"cell_type":"code","source":["s_id = config.selection_id\n","\n","# ------------ make col_idx_dict config ------------ #\n","nonstep_col_list = []\n","step_col_list = []\n","stepmark_col_list = []\n","\n","# ============ nonstep_col_list - add info(col, alpha, color, linewidth) ============ #\n","# nonstep_col_list.append([['close'], 1, '#ffffff', 2])\n","\n","# ============ step_col_list - add info(col, alpha, color, linewidth) ============ #\n","# ------ htf_candle ------ #\n","hc_tf1 = '15T'\n","hc_tf2 = 'H'\n","hc_tf3 = '4H'\n","\n","step_col_list.append([['open_{}'.format(hc_tf1), 'close_{}'.format(hc_tf1)], 1, '#ffffff', 1])\n","step_col_list.append([['open_{}'.format(hc_tf2), 'close_{}'.format(hc_tf2)], 1, '#ffffff', 2])\n","# step_col_list.append([['open_{}'.format(hc_tf3), 'close_{}'.format(hc_tf3)], 1, '#ffffff', 4])\n","\n","# ------ resi_sup ------ #\n","# rs_tf = 'T'\n","# step_col_list.append([['resi_{}'.format(rs_tf), 'sup_{}'.format(rs_tf)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['resi_out_{}'.format(rs_tf), 'sup_out_{}'.format(rs_tf)], 1, 'dodgerblue', 2])\n","\n","# ------ wave_range ------ #\n","wave_tf1 = config_list[0].tr_set.p1_itv1\n","wave_period1, wave_period2 = config_list[0].tr_set.p1_period1, config_list[0].tr_set.p1_period2\n","\n","# step_col_list.append([['dc_upper_{}{}'.format(wave_tf1, wave_period1), 'dc_lower_{}{}'.format(wave_tf1, wave_period1)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['dc_upper_{}{}'.format(wave_tf1, wave_period2), 'dc_lower_{}{}'.format(wave_tf1, wave_period2)], 1, '#ffeb3b', 1])\n","\n","# step_col_list.append([['dc_upper_{}{}'.format(wave_tf2, wave_period2), 'dc_lower_{}{}'.format(wave_tf2, wave_period2)], 1, '#e65100', 2])\n","\n","# ------ dc ------ #\n","dc_tf1 = '5T'\n","dc_period1 = 20\n","dc_tf2 = 'H'\n","dc_period2 = 20\n","# step_col_list.append([['dc_upper_{}{}'.format(dc_tf1, dc_period1), 'dc_lower_{}{}'.format(dc_tf1, dc_period1)], 1, '#ffeb3b', 1]),  # inner\n","# step_col_list.append([['dc_base_{}{}'.format(dc_tf1, dc_period1)], 1, '#5b9cf6', 1])\n","step_col_list.append([['dc_upper_{}{}'.format(dc_tf2, dc_period2), 'dc_lower_{}{}'.format(dc_tf2, dc_period2)], 1, '#ff00ff', 4]),  # inner\n","step_col_list.append([['dc_base_{}{}'.format(dc_tf2, dc_period2)], 1, '#5b9cf6', 4])\n","\n","# ------ bb ------ #\n","bb_tf1 = 'T'\n","bb_period1 = 20\n","\n","# step_col_list.append([['bb_upper_{}{}'.format(bb_tf1, bb_period1), 'bb_lower_{}{}'.format(bb_tf1, bb_period1)], 1, '#ffffff', 1])\n","# step_col_list.append([['bb_base_{}{}'.format(bb_tf1, bb_period1)], 1, '#00ff00', 1])\n","\n","# step_col_list.append([['bb_upper_{}'.format(tf2), 'bb_lower_{}'.format(tf2)], 1, '#e91e63', 4])\n","\n","# ------ ema ------ #\n","# step_col_list.append([['ema_5T'], 1, '#03ed30', 2])\n","\n","# ============ stepmark_col_list - add info(col, alpha, color, linewidth) ============ #\n","# stepmark_col_list.append([['sar_T'], 1, 'dodgerblue', 7])\n","\n","\n","# ============ str to numbcol ============ #\n","nonstep_col_arr = strcol_tonumb(res_df, nonstep_col_list)\n","step_col_arr = strcol_tonumb(res_df, step_col_list)\n","stepmark_col_arr = strcol_tonumb(res_df, stepmark_col_list)\n","\n","col_idx_dict = \\\n","{\n","  \"ohlc_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close']),\n","  \"vp_col_idxs\": get_col_idxs(res_df, ['close', 'volume']),\n","  # \"ohlc_col_idxs\": get_col_idxs(res_df, ['haopen', 'hahigh', 'halow', 'haclose']),  # heikin-ashi ver.\n","  \"nonstep_col_info\": nonstep_col_arr,\n","  \"step_col_info\": step_col_arr,\n","  \"stepmark_col_info\": stepmark_col_arr,\n","  \"ylim_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close', 'dc_upper_15T4', 'dc_lower_15T4'])  # , 'dc_upper_H', 'dc_lower_H', 'dc_upper_15T', 'dc_lower_15T', 'short_out_{}'.format(selection_id), 'long_out_{}'.format(selection_id)\n","}   # , 'wave_1_{}'.format(wave_tf2), 'wave_0_{}'.format(wave_tf2), 'dc_upper_15T', 'dc_lower_15T'"],"metadata":{"id":"jjFziVVIhgSr"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### whole_plot main"],"metadata":{"id":"50HXDIdJij28"}},{"cell_type":"code","source":["plot_op_idx_nums = 10\n","\n","win_idxs = (pr_ > 1).ravel()  # [-plot_op_idx_nums:]\n","selected_op_idxs = obj_[4].ravel().astype(int)  # [-plot_op_idx_nums:]\n","selected_ex_idxs = obj_[3].ravel().astype(int)  # [-plot_op_idx_nums:]\n","\n","len_idxs = len(win_idxs)\n","print(\"len_idxs :\", len_idxs)\n","\n","split_range = np.arange(plot_op_idx_nums, len_idxs, plot_op_idx_nums)\n","win_idxs_list = np.split(win_idxs, split_range, axis=0)\n","selected_op_idxs_list = np.split(selected_op_idxs, split_range, axis=0)\n","selected_ex_idxs_list = np.split(selected_ex_idxs, split_range, axis=0)"],"metadata":{"id":"-tbLsXN9eN2p"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["_ = [whole_plot_check(np_df, a, b, c, plot_check_dir=None, **col_idx_dict) for a, b, c in zip(win_idxs_list, selected_op_idxs_list, selected_ex_idxs_list)]"],"metadata":{"id":"FtILHO-4kVlO"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"iTW2ZuX61ojg"},"source":["### plot_funcs"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0l6joTK_1ojh"},"outputs":[],"source":["def whole_plot_check(data, win_idxs, selected_op_idxs, selected_ex_idxs, plot_check_dir=None, **col_idx_dict):\n","  # start_0 = time.time()\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(30, 12))\n","  nrows, ncols = 1, 1\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                          ncols=ncols,\n","                          #height_ratios=[31, 1]\n","                          )\n","\n","  ax = fig.add_subplot(gs[0])\n","\n","  # ------------ add_col section ------------ #\n","  a_data = data[selected_op_idxs[0]:selected_op_idxs[-1] + 1]\n","\n","  plot_op_idxs = selected_op_idxs - selected_op_idxs[0]  \n","  plot_win_op_idxs = plot_op_idxs[win_idxs]\n","  plot_loss_op_idxs = plot_op_idxs[~win_idxs]\n","\n","  plot_ex_idxs = selected_ex_idxs - selected_op_idxs[0]\n","  plot_win_ex_idxs = plot_ex_idxs[win_idxs]\n","  plot_loss_ex_idxs = plot_ex_idxs[~win_idxs]\n","\n","\n","  # ------ add cols ------ #\n","  [nonstep_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['nonstep_col_info']]\n","  [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","  [stepmark_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['stepmark_col_info']]\n","\n","  # [plt.axvline(op_idx, color='#00ff00') for op_idx in plot_win_op_idxs]\n","  # [plt.axvline(op_idx, color='#ff0000') for op_idx in plot_loss_op_idxs]\n","  [plt.axvspan(op_idx, ex_idx, alpha=0.5, color='#00ff00') for op_idx, ex_idx in zip(plot_win_op_idxs, plot_win_ex_idxs)]\n","  [plt.axvspan(op_idx, ex_idx, alpha=0.5, color='#ff0000') for op_idx, ex_idx in zip(plot_loss_op_idxs, plot_loss_ex_idxs)]\n","  \n","  plt.show()\n","\n","  if plot_check_dir is None:\n","    plt.show()\n","    print()\n","  else:\n","    fig_name = plot_check_dir + \"/whole_plot_{}.png\".format(selected_op_idxs[0])\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","  plt.close()\n","  # print(\"elapsed time :\", time.time() - start_0)\n","\n","  return\n","\n","def plot_check_v8(res_df, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, back_plot, plot_check_dir=None, **col_idx_dict):\n","  # start_0 = time.time()\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(30, 18))\n","  nrows, ncols = 2, 2\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                         ncols=ncols,\n","                         height_ratios=[3, 1]\n","                         )\n","  for gs_idx, params in enumerate(param_zip):\n","\n","    iin, iout, pr, en_p, ex_p, entry_idx, exit_idx, p1_idx, p2_idx, lvrg, fee, tp_line, out_line, tp_1, tp_0, out_1, out_0, ep2_0 = params\n","\n","    # print(\"en_p, ex_p :\", en_p, ex_p)\n","    # print(\"tp_line, out_line, ep2_0 :\", tp_line, out_line, ep2_0)\n","\n","    # temporary\n","    # if exit_idx - p1_idx < 50:\n","    # if exit_idx != entry_idx:\n","    #   break\n","\n","    # ============ define ax1 & ax2 ============ #\n","    ax1 = fig.add_subplot(gs[gs_idx])\n","    ax2 = fig.add_subplot(gs[gs_idx + 2])\n","\n","    # ------ date range ------ #\n","    a_data = res_df.iloc[int(iin):int(iout + 1)].to_numpy()\n","    # a_data = data[iin:iout]\n","\n","    # ------------ add_col section ------------ #\n","    # ------ candles ------ #\n","    candle_plot_v2(ax1, a_data[:, col_idx_dict['ohlc_col_idxs']], alpha=1.0, wickwidth=1.0)\n","\n","    # ------ add cols ------ #\n","    [nonstep_col_plot_v2(ax1, a_data[:, params_[0]], *params_[1:]) for params_ in col_idx_dict['nonstep_col_info']]\n","    [step_col_plot_v2(ax1, a_data[:, params_[0]], *params_[1:]) for params_ in col_idx_dict['step_col_info']]\n","    [stepmark_col_plot_v2(ax1, a_data[:, params_[0]], *params_[1:]) for params_ in col_idx_dict['stepmark_col_info']]\n","\n","    [step_col_plot_v2(ax2, a_data[:, params_[0]], *params_[1:]) for params_ in col_idx_dict['step_col_info2']]\n","\n","    # ------ ep, tp + xlim ------ #\n","    try:\n","      eptp_hvline_v8(ax1, ax2, config, *params, back_plot, x_max, x_margin_mult, y_margin_mult, a_data, **col_idx_dict)\n","    except Exception as e:\n","      print(\"error in eptp_hvline :\", e)\n","\n","    #     Todo    #\n","    #     3. outer_price plot 일 경우, gs_idx + nrows 하면 됨\n","\n","    # ------ trade_info ------ #\n","    data_msg_list = [\"\\n {} : {:.3f}\".format(*params_[1:], *res_df.iloc[int(p1_idx), params_[0]]) for params_ in col_idx_dict['data_window_p1_col_info']]  # * for unsupported format for arr\n","    data_msg_list += [\"\\n {} : {:.3f}\".format(*params_[1:], *res_df.iloc[int(p2_idx), params_[0]]) for params_ in col_idx_dict['data_window_p2_col_info']]\n","    ps_msg_expand = pr_msg.format(p1_idx, exit_idx, pr, lvrg, fee) + ''.join(data_msg_list)\n","    \n","    ax1.set_title(ps_msg_expand)   # set_title on ax1\n","\n","  if plot_check_dir is None:\n","    plt.show()\n","    print()\n","  else:\n","    fig_name = plot_check_dir + \"/{}.png\".format(int(entry_idx))\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","  plt.close()\n","  # print(\"elapsed time :\", time.time() - start_0)\n","\n","  return\n","\n","def eptp_hvline_v8(ax1, ax2, config, iin, iout, pr, en_p, ex_p, entry_idx, exit_idx, p1_idx, p2_idx, lvrg, fee, tp_line, out_line, tp_1, tp_0, out_1, out_0, ep2_0,\n","                   back_plot, x_max, x_margin_mult, y_margin_mult, a_data, **col_idx_dict):\n","  # ------ get vertical ticks ------ #\n","  entry_tick = int(entry_idx - iin)\n","  exit_tick = entry_tick + int(exit_idx - entry_idx)\n","  p1_tick = entry_tick - int(entry_idx - p1_idx)\n","  p2_tick = p1_tick + int(p2_idx - p1_idx)\n","  bias_info_tick = entry_tick + config.tr_set.bias_info_tick\n","\n","  if back_plot == 1:\n","    x_max = p1_tick + 20\n","  elif back_plot == 2:\n","    x_max = p2_tick + 20 \n","  elif back_plot == 3:\n","    x_max = entry_tick + 20 \n","  elif back_plot == 4:\n","    x_max = exit_tick + 20\n","  elif back_plot == 5:\n","    x_max = bias_info_tick + 20\n","\n","  # ============ xlim ============ #\n","  if (iout - iin) > x_max:\n","    x_margin = x_max * x_margin_mult\n","    ax1.set_xlim(0 - x_margin, x_max + x_margin)\n","    ax2.set_xlim(0 - x_margin, x_max + x_margin)\n","  x0, x1 = ax1.get_xlim()\n","\n","  # ============ hlines ============ #\n","  # ------------ ax1 ------------ #\n","  # ------ entry & exit ------ #\n","  en_xmin = entry_tick / x1\n","  ex_xmin = exit_tick / x1\n","  ax1.axhline(en_p, x0, en_xmin, linewidth=2, linestyle='--', alpha=1, color='lime')  # en_p line axhline\n","  ax1.text(x0, en_p, 'en_p :\\n {:.3f} \\n epg {}'.format(en_p, config.tr_set.ep_gap2), ha='right', va='center', fontweight='bold', fontsize=15)  # en_p line label\n","  ax1.axhline(ex_p, ex_xmin, 1, linewidth=2, linestyle='--', alpha=1, color='lime')  # ex_p line axhline (signal 도 포괄함, 존재 의미)\n","  ax1.text(x1, ex_p, 'ex_p :\\n {}'.format(ex_p), ha='left', va='center', fontweight='bold', fontsize=15)  # ex_p line label\n","\n","  # ------ tpout_line ------ #\n","  ax1.axhline(tp_line, 0.05, 1, linewidth=2, linestyle='-', alpha=1, color='#00ff00')  # ep 와 gap 비교 용이하기 위해 ex_xmin -> 0.1 사용\n","  ax1.text(x0, tp_line, 'tpg {}'.format(config.tr_set.tp_gap), ha='right', va='center', fontweight='bold', fontsize=15, color='#00ff00')\n","  ax1.axhline(out_line, 0.05, 1, linewidth=2, linestyle='-', alpha=1, color='#ff0000')\n","  ax1.text(x0, out_line, 'outg {}'.format(config.tr_set.out_gap), ha='right', va='center', fontweight='bold', fontsize=15, color='#ff0000')\n","\n","  # ------ tp_box ------ #\n","  text_x_pos = (x0 + x1) * 0.1\n","  ax1.axhline(tp_1, 0.2, 1, linewidth=4, linestyle='-', alpha=1, color='#ffffff')\n","  ax1.text(text_x_pos, tp_1, ' tp_1', ha='right', va='bottom', fontweight='bold', fontsize=15)\n","  ax1.axhline(tp_0, 0.2, 1, linewidth=4, linestyle='-', alpha=1, color='#ffffff')\n","  ax1.text(text_x_pos, tp_0, ' tp_0', ha='right', va='bottom', fontweight='bold', fontsize=15)  \n","\n","  # ------ out_box ------ #\n","  # text_x_pos = (x0 + x1) * 0.1\n","  ax1.axhline(out_1, 0.2, 1, linewidth=2, linestyle='-', alpha=1, color='#ffffff')\n","  ax1.text(text_x_pos, out_1, ' out_1', ha='right', va='bottom', fontweight='bold', fontsize=15)\n","  ax1.axhline(out_0, 0.2, 1, linewidth=2, linestyle='-', alpha=1, color='#ffffff')\n","  ax1.text(text_x_pos, out_0, ' out_0', ha='right', va='bottom', fontweight='bold', fontsize=15)  \n","  # ------ ep_box ------ #\n","  # text_x_pos = (x0 + x1) * 0.1\n","  ax1.axhline(ep2_0, 0.2, 1, linewidth=1, linestyle='-', alpha=1, color='#ffffff')\n","  ax1.text(text_x_pos, ep2_0, ' ep2_0', ha='right', va='bottom', fontweight='bold', fontsize=15)\n","\n","  # ------------ ax2 ------------ #\n","  # ------ band ------ #\n","  ax2.axhline(100, color=\"#ffffff\")\n","  ax2.axhline(-100, color=\"#ffffff\")\n","\n","  # ============ ylim ============ # - ax1 only\n","  if back_plot:\n","    y_lim_data = a_data[:x_max + 1, col_idx_dict['ylim_col_idxs']]  # +1 for including p1_tick\n","  else:\n","    y_lim_data = a_data[:, col_idx_dict['ylim_col_idxs']]\n","  \n","  y_min = y_lim_data.min()\n","  y_max = y_lim_data.max()\n","  y_margin = (y_max - y_min) * y_margin_mult\n","  ax1.set_ylim(y_min - y_margin, y_max + y_margin)\n","\n","  # ============ vline (p1_tick, entry_tick, exit_tick) ============ # - add p1_tick on ax2\n","  y0, y1 = ax1.get_ylim()\n","  low_data = a_data[:exit_tick + 1, col_idx_dict['ohlc_col_idxs'][2]]  # +1 for including exit_tick\n","  p2_ymax, en_ymax, ex_ymax = [(low_data[tick_] - y0) / (y1 - y0) - .01 for tick_ in [p2_tick, entry_tick, exit_tick]]  # -.05 for margin\n","  if p1_tick > 0:\n","    p1_ymax = (low_data[p1_tick] - y0) / (y1 - y0) - .01\n","    ax1.axvline(p1_tick, 0, p1_ymax, alpha=1, linewidth=2, linestyle='--', color='#ff0000')  # 추후, tick 별 세부 정의가 달라질 수 있음을 고려해 multi_line 작성 유지\n","    ax2.axvline(p1_tick, 0, 1, alpha=1, linewidth=2, linestyle='--', color='#ff0000')\n","  ax1.axvline(p2_tick, 0, p2_ymax, alpha=1, linewidth=2, linestyle='--', color='#2196f3')\n","  ax1.axvline(entry_tick, 0, en_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  ax1.axvline(exit_tick, 0, ex_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  ax2.axvline(p2_tick, 0, 1, alpha=1, linewidth=2, linestyle='--', color='#2196f3')\n","  ax2.axvline(entry_tick, 0, 1, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  ax2.axvline(exit_tick, 0, 1, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  if back_plot == 5:\n","    ax1.axvline(bias_info_tick, alpha=1, linewidth=2, linestyle='-', color='#ffeb3b')\n","\n","  return"]},{"cell_type":"markdown","metadata":{"id":"8soVNGFt1ojj"},"source":["#### legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"narSQRCz1ojj"},"outputs":[],"source":["_ = [plot_check_v4(np_df, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir, 500, 0.07, 100, **col_idx_dict) for param_zip in zip(np_plot_params, np_plot_params[::-1])]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kLiEIiMW1ojk"},"outputs":[],"source":["def plot_check_v4(data, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir=None, vp_range=500, kde_factor=0.05, num_samples=100, **col_idx_dict):\n","  # start_0 = time.time()\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(30, 18))\n","  nrows, ncols = 2, 2\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                         ncols=ncols,\n","                         height_ratios=[3, 1]\n","                         )\n","  for gs_idx, params in enumerate(param_zip):\n","    ax = fig.add_subplot(gs[gs_idx])\n","    iin, iout, pr, ep, tp, entry_idx, exit_idx, open_idx, lvrg, fee, tp_line, out_line, bias_info, bias_thresh = params\n","\n","    # ------------ add_col section ------------ #\n","    iin, iout = int(iin), int(iout)\n","    a_data = data[iin:iout]\n","    # ------ candles ------ #\n","    candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","    \n","    # ------ add cols ------ #\n","    [nonstep_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['nonstep_col_info']]\n","    [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","    [stepmark_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['stepmark_col_info']]\n","\n","    # vp_data = data[iin - vp_range:iin, col_idx_dict['vp_col_idxs']]\n","    # vp_info = [vp_range, vp_data[:, 0], vp_data[:, 1], kde_factor, num_samples]\n","    vp_data = data[iin - vp_range:iin, col_idx_dict['vp_col_idxs']].T\n","    vp_info = [vp_range, *vp_data, kde_factor, num_samples]\n","\n","    # ------ ep, tp + xlim ------ #\n","    eptp_hvline_v4(config, ep, tp, entry_idx, exit_idx, open_idx, tp_line, out_line, bias_info, bias_thresh, \n","                   front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, vp_info, **col_idx_dict)        \n","\n","    #     Todo    #\n","    #     3. outer_price plot 일 경우, gs_idx + nrows 하면 됨\n","\n","    # ------ trade_info ------ #\n","    plt.title(pr_msg.format(entry_idx, exit_idx, pr, lvrg, fee))\n","\n","  if plot_check_dir is None:\n","    plt.show()\n","    print()\n","  else:\n","    fig_name = plot_check_dir +  \"/%s.png\" % int(entry_idx)\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","  plt.close()\n","  # print(\"elapsed time :\", time.time() - start_0)  \n","\n","  return\n","\n","def eptp_hvline_v4(config, en_p, ex_p, entry_idx, exit_idx, open_idx, tp_line, out_line, bias_info, bias_thresh, \n","                   front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, vp_info, **col_idx_dict):\n","  # ------ get vertical ticks ------ #\n","  entry_tick = int(entry_idx - iin)\n","  open_tick = entry_tick - int(entry_idx - open_idx)\n","  exit_tick = entry_tick + int(exit_idx - entry_idx)\n","\n","  if front_plot == 1:\n","    x_max = open_tick\n","  elif front_plot == 2:\n","    x_max = entry_tick\n","  if (iout - iin) > x_max:\n","    x_margin = x_max * x_margin_mult\n","    plt.xlim(0 - x_margin, x_max + x_margin)\n","  x0, x1 = plt.gca().get_xlim()\n","  # ------------ hlines ------------ #\n","  # ------ entry & exit ------ #\n","  en_xmin = entry_tick / x1\n","  ex_xmin = exit_tick / x1\n","  plt.axhline(en_p, x0, en_xmin, linewidth=2, linestyle='--', alpha=1, color='lime')  # en_p line axhline\n","  plt.text(x0, en_p, ' en_p :\\n {}'.format(en_p), ha='right', va='center', fontweight='bold')  # en_p line label\n","  plt.axhline(ex_p, ex_xmin, 1, linewidth=2, linestyle='--', alpha=1, color='lime')  # ex_p line axhline (signal 도 포괄함, 존재 의미)\n","  plt.text(x1, ex_p, ' ex_p :\\n {}'.format(ex_p), ha='left', va='center', fontweight='bold')  # ex_p line label\n","\n","  # ------ tpout_line ------ #\n","  plt.axhline(tp_line, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#00ff00')  # ep 와 gap 비교 용이하기 위해 ex_xmin -> 0.1 사용\n","  plt.text(x0, tp_line, ' %s' % config.tr_set.tp_gap, ha='left', va='center', fontweight='bold')\n","  plt.axhline(out_line, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#ff0000')\n","  plt.text(x0, out_line, ' %s' % config.tr_set.out_gap, ha='left', va='center', fontweight='bold')\n","\n","  # ------ bias_line ------ #\n","  plt.axhline(bias_info, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='dodgerblue')\n","  plt.text(x0, bias_info, ' bias_info', ha='left', va='center', fontweight='bold')\n","  plt.axhline(bias_thresh, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#ff8400')\n","  plt.text(x0, bias_thresh, ' bias_thresh', ha='left', va='center', fontweight='bold')\n","\n","  # ------ volume profile ------ #\n","  vp_range, close, volume, kde_factor, num_samples = vp_info\n","  if iin >= vp_range:\n","    start_0 = time.time()\n","    kde = stats.gaussian_kde(close, weights=volume, bw_method=kde_factor)\n","    kdx = np.linspace(close.min(), close.max(), num_samples)\n","    kdy = kde(kdx)\n","    print(\"kde elapsed_time :\", time.time() - start_0)\n","\n","    kdy_max = kdy.max()\n","    # peaks,_ = signal.find_peaks(kdy)\n","    peaks,_ = signal.find_peaks(kdy, prominence=kdy_max * 0.3)\n","    peak_list = kdx[peaks]   # peak_list\n","    [plt.axhline(peak, linewidth=6, linestyle='-', alpha=1, color='white') for peak in peak_list]\n","    \n","    kdy_ratio = entry_tick / kdy_max # 30 / 0.0001\n","    plt.plot(kdy * kdy_ratio, kdx, color='white')\n","    # plt.plot(pky, pkx, 'bo', color='yellow')\n","\n","  # ------ ylim ------ #\n","  if front_plot:\n","    y_lim_data = a_data[:x_max + 1, col_idx_dict['ylim_col_idxs']]  # +1 for including open_tick\n","  else:\n","    y_lim_data = a_data[:, col_idx_dict['ylim_col_idxs']]\n","  y_min = y_lim_data.min()\n","  y_max = y_lim_data.max()\n","  y_margin = (y_max - y_min) * y_margin_mult\n","  # plt.ylim(y_min - y_margin, y_max + y_margin)\n","\n","  # ------------ vline (open_tick, entry_tick, exit_tick) ------------ #\n","  y0, y1 = plt.gca().get_ylim()\n","  l_data = a_data[:exit_tick + 1, col_idx_dict['ohlc_col_idxs'][2]]  # +1 for including exit_tick\n","  open_ymax, en_ymax, ex_ymax = [(l_data[tick_] - y0) / (y1 - y0) - .01 for tick_ in [open_tick, entry_tick, exit_tick]]  # -.05 for margin\n","  plt.axvline(open_tick, 0, open_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')  # 추후, tick 별 세부 정의가 달라질 수 있음을 고려해 multi_line 작성 유지\n","  plt.axvline(entry_tick, 0, en_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  plt.axvline(exit_tick, 0, ex_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","\n","  return"]},{"cell_type":"markdown","source":["### dump"],"metadata":{"id":"ddL_BC24buq0"}},{"cell_type":"markdown","source":["#### whole_plot thing"],"metadata":{"id":"zgTrEWWqbwsT"}},{"cell_type":"code","source":["fig = go.Figure(data=[go.Candlestick(x=t_df.index,\n","                open=t_df.open,\n","                high=t_df.high,\n","                low=t_df.low,\n","                close=t_df.close)])\n","\n","fig.show()"],"metadata":{"id":"M4zn8wxibzAR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["cf.go_offline()\n","init_notebook_mode()"],"metadata":{"id":"4IhBjPMobzAS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["qf = cf.QuantFig(t_df, title=\"Apple's stock price in 2021\", name='AAPL')\n","qf.iplot()"],"metadata":{"id":"n9WZkE9wbzAS"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"zmYbP-Gc1ojs"},"source":["#### brief np_pr survey"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"82a8Km8z1ojs"},"outputs":[],"source":["# plot_pr_list[:100]\n","plt.plot(np_pr)\n","plt.axhline(1)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"5rdQZm_71ojv"},"source":["#### plot indi. legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"u11r-dU91ojw"},"outputs":[],"source":["\n","  # ---------------------- ma ---------------------- #\n","   # --------- ema --------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(ema_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  #   # --------- sma --------- #\n","  # alpha = 1\n","  # for sm_i, sma in enumerate(sma_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 4\n","  #   plt.step(np.arange(len(plot_df)), plot_df[sma].values, alpha=alpha, color='#e91e63', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  \n","  # ---------------------- cb ---------------------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(cb_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#5b9cf6', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","\n","  \n","  # ---------------------- sar ---------------------- #\n","  # alpha = 1\n","  # markersize = 5\n","  # for sar in sar_list:\n","  #   plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","  #   markersize += 1\n","  #   alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  # alpha = 0.7\n","  # for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","  #                     where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","  #                     where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","  #   alpha -= 0.05\n","  \n","\n","\n","  # ---------------------- outer price indi. ---------------------- #\n","  #           macd          #\n","  # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","    \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for stoch_ in stoch_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[stoch_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(stoch_upper, linestyle='--')\n","  # plt.axhline(stoch_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- cctbbo ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for cctbbo in cctbbo_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cctbbo].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(cctbbo_upper, linestyle='--')\n","  # plt.axhline(cctbbo_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- ema_roc ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for emaroc in emaroc_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[emaroc].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","  \n","  # ---------- bbw ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for bbwp_ in bbwp_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[bbwp_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(bbwp_thresh, linestyle='--')\n","\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n"]},{"cell_type":"markdown","metadata":{"id":"tApzvz_gK9lR"},"source":["## legacy"]},{"cell_type":"markdown","metadata":{"id":"OJqkmkpsLCYC"},"source":["### tr_tresh calc"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gcpo4MGd9Wm4"},"outputs":[],"source":["res_wr = 0.6\n","# tr_thresh = 1\n","# tr_thresh = ((1 - res_wr) / res_wr) ** 0.5\n","tr_thresh = ((1 - res_wr) / res_wr) + 0.01\n","# tr_thresh = 2.6\n","print(\"res_wr :\", res_wr)\n","print(\"tr_thresh :\", tr_thresh)\n","\n","\n","#   단리    #\n","trade_num = 1000\n","asset = 1 # thousand USDT\n","test_loss_gap = 0.95  # fee adjusted\n","test_pr_gap = 1 + (1 - test_loss_gap) * tr_thresh\n","\n","test_loss_cnt = trade_num * (1 - res_wr)\n","test_pr_cnt = trade_num * res_wr\n","\n","test_trade_list = [test_pr_gap] * int(test_pr_cnt) + [test_loss_gap] * int(test_loss_cnt)\n","random.shuffle(test_trade_list)\n","# print(\"len(test_trade_list) :\", len(test_trade_list))\n","print(test_trade_list[:10])\n","print()\n","\n","# print(\"%.5f\" % np.cumprod(test_trade_list)[-1])\n","for tr_thresh_ in np.arange(1, 3, 0.2):\n","  if (1 + (1 - test_loss_gap) * tr_thresh_) ** test_pr_cnt * test_loss_gap ** test_loss_cnt > 1:\n","    break\n","print(\"복리를 위한 tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumprod(test_trade_list)[-1] :\", np.cumprod(test_trade_list)[-1])\n","print(\"total_pr : \", np.cumprod(test_trade_list)[-1])\n","print()\n","#   복리 tr_thresh  #\n","#   1. trade_num 에 영향 받지 않음\n","#   2. loss_gap 에 비례함\n","\n","for tr_thresh_ in np.arange(1, 3, 0.01):\n","  if ((1 - test_loss_gap) * tr_thresh_) * test_pr_cnt + (test_loss_gap - 1) * test_loss_cnt > 0:\n","    break\n","np_test_trade = np.array(test_trade_list) - 1\n","print(np_test_trade[:10])\n","# print(\"%.3f\" % )\n","print(\"단리를 위한 tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumsum(np_test_trade)[-1] :\", np.cumsum(np_test_trade)[-1])\n","print(\"total_pr : \", 1 + np.cumsum(np_test_trade)[-1])\n"]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":["Ic1mfmwWCIBu","x2yj2SwAXDLp","14chOHeXh6JD","xpyP5t8Ht_pE","MuD_2vY7TI_8","983aUwM76s6X"],"name":"stem5_45_vec_backi2(0521_ep1n2).ipynb","toc_visible":true,"provenance":[],"authorship_tag":"ABX9TyOLwc/5vbm+9kKxfP88L8M7"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}