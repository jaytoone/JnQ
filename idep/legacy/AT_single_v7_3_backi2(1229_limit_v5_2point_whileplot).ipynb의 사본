{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"6rmQpzEGXfCw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1641045468648,"user_tz":-540,"elapsed":121348,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"f51e98e0-5554-48a4-81d0-cc4e7a6a5668"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","import os, sys\n","\n","current_path = '/content/drive/My Drive/Colab Notebooks/JnQ/'\n","\n","os.chdir(current_path)\n","\n","nb_path = '/content/notebooks'\n","try:\n","  sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ')\n","  sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ/funcs')\n","  os.symlink('/content/drive/My Drive/Colab Notebooks/JnQ/mpl_finance', nb_path)\n","  sys.path.insert(0, nb_path)\n","except:\n","  pass"]},{"cell_type":"markdown","metadata":{"id":"8uqYv5StTazo"},"source":["# requirements"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"9qGt60DKTZmf","executionInfo":{"status":"ok","timestamp":1641045506565,"user_tz":-540,"elapsed":5498,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"outputs":[],"source":["# !pip install findiff\n","\n","# import nvstrings, nvcategory, cudf\n","# import cuml\n","# import cudf\n","\n","import matplotlib.pyplot as plt\n","from matplotlib import gridspec\n","from tqdm.notebook import tqdm\n","from funcs.funcs_indicator import *\n","from funcs.funcs_for_trade import *\n","\n","from utils import utils_v3_1216 as utils1\n","from utils import utils_v5_2_1216 as utils2\n","# from utils import utils_v7_3_1231_v7_3 as utils2\n","from utils import utils_public_1231_v7_3 as utils_public\n","\n","import mpl_finance as mf\n","import os\n","import datetime\n","\n","import IPython\n","import IPython.display\n","import matplotlib as mpl\n","\n","import numpy as np\n","# import jax.numpy as np\n","import pandas as pd\n","import seaborn as sns\n","# import tensorflow as tf\n","\n","import pickle\n","import shutil\n","import json\n","from easydict import EasyDict\n","\n","# from trendln import trendln\n","\n","from datetime import datetime\n","import random\n","import time\n","\n","# mpl.rcParams['figure.figsize'] = (8, 6)\n","# mpl.rcParams['axes.grid'] = False\n","\n","np.seterr(invalid=\"ignore\")\n","\n","pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)"]},{"cell_type":"markdown","metadata":{"id":"M8-EChy0VsDr"},"source":["## cudf"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":414,"status":"ok","timestamp":1638754008241,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"b09qAb1sVtRP","outputId":"3a824202-064a-4544-b791-ffc777bb3f9c"},"outputs":[{"name":"stdout","output_type":"stream","text":["usage: conda [-h] [-V] command ...\n","conda: error: unrecognized arguments: -t=/content/notebooks\n"]}],"source":["# !conda install -c rapidsai-nightly -c nvidia -c numba -c conda-forge \\\n","#     cudf python=3.7 cudatoolkit=11.1 -t=$nb_path"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":413,"status":"ok","timestamp":1638754715310,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"Jnz6i7ZqRnb0","outputId":"207bc57b-a17a-4f67-fb26-24e46e2c6e26"},"outputs":[{"name":"stdout","output_type":"stream","text":["***********************************************************************\n","Woo! Your instance has the right kind of GPU, a Tesla P100-PCIE-16GB!\n","***********************************************************************\n","\n"]}],"source":["# !git clone https://github.com/rapidsai/rapidsai-csp-utils.git\n","!python rapidsai-csp-utils/colab/env-check.py"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4sKA_9Dbg4s2"},"outputs":[],"source":["# This will update the Colab environment and restart the kernel.  Don't run the next cell until you see the session crash.\n","!bash rapidsai-csp-utils/colab/update_gcc.sh\n","import os\n","os._exit(00)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"d1C4pNiBhYHX"},"outputs":[],"source":["# This will install CondaColab.  This will restart your kernel one last time.  Run this cell by itself and only run the next cell once you see the session crash.\n","import condacolab\n","condacolab.install()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":414,"status":"ok","timestamp":1638754863073,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"iGx3ACTvZqck","outputId":"e8379cc4-c325-4fe0-ac46-5fbbd7d38829"},"outputs":[{"name":"stdout","output_type":"stream","text":["‚ú®üç∞‚ú® Everything looks OK!\n"]}],"source":["# you can now run the rest of the cells as normal\n","import condacolab\n","condacolab.check()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oR8s7U8c7C28","outputId":"22be2731-fae1-45fc-f310-e48f60774bb2"},"outputs":[{"name":"stdout","output_type":"stream","text":["Installing RAPIDS Stable 21.10\n","Starting the RAPIDS install on Colab.  This will take about 15 minutes.\n","Collecting package metadata (current_repodata.json): ...working... done\n","Solving environment: ...working... WARNING conda.core.solve:_add_specs(611): pinned spec cudatoolkit=11.1 conflicts with explicit specs.  Overriding pinned spec.\n","failed with initial frozen solve. Retrying with flexible solve.\n","Solving environment: ...working... WARNING conda.core.solve:_add_specs(611): pinned spec cudatoolkit=11.1 conflicts with explicit specs.  Overriding pinned spec.\n","failed with repodata from current_repodata.json, will retry with next repodata source.\n","Collecting package metadata (repodata.json): ...working... done\n"]}],"source":["# Installing RAPIDS is now 'python rapidsai-csp-utils/colab/install_rapids.py <release> <packages>'\n","# The <release> options are 'stable' and 'nightly'.  Leaving it blank or adding any other words will default to stable.\n","# The <packages> option are default blank or 'core'.  By default, we install RAPIDSAI and BlazingSQL.  The 'core' option will install only RAPIDSAI and not include BlazingSQL, \n","!python rapidsai-csp-utils/colab/install_rapids.py stable\n","import os\n","os.environ['NUMBAPRO_NVVM'] = '/usr/local/cuda/nvvm/lib64/libnvvm.so'\n","os.environ['NUMBAPRO_LIBDEVICE'] = '/usr/local/cuda/nvvm/libdevice/'\n","os.environ['CONDA_PREFIX'] = '/usr/local'"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kWsxi4ZpKtGt"},"outputs":[],"source":["import shutil\n","import sys\n","\n","colab_env = \"/usr/lib\"\n","\n","rapids_path = os.path.join(current_path, \"rapidsai-csp-utils/lib\")\n","rapids_libs = os.listdir(rapids_path)\n","print(rapids_libs)\n","# break\n","\n","for lib_ in rapids_libs:\n","  try:\n","    shutil.copy(os.path.join(rapids_path, lib_), os.path.join(colab_env, lib_))\n","    sys.path.append(os.path.join(colab_env, lib_))\n","    print(\"copied to\" + os.path.join(colab_env, lib_))\n","  except Exception as e:\n","    print(e)"]},{"cell_type":"markdown","metadata":{"id":"Iy76iO7gztne"},"source":["## move legacy files"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hMRht32Czwry"},"outputs":[],"source":["# print()\n","cur_dir_list = os.listdir('.')\n","for f in cur_dir_list:\n","  if 'legacy' in f :\n","    # print(f)\n","    if os.path.isdir(current_path + f,):\n","      continue\n","\n","    shutil.move(current_path + f, current_path + 'legacy/' + f)\n","    print(\"moved to\" + current_path + 'legacy/' +  f)"]},{"cell_type":"markdown","metadata":{"id":"Ic1mfmwWCIBu"},"source":["# makeset"]},{"cell_type":"markdown","metadata":{"id":"Ci_jUnNTZbm9"},"source":["## load data"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":22503,"status":"ok","timestamp":1638246127510,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"_bXyS2yrZYC6","outputId":"b24a8a66-48b1-42b5-aa79-63f5a8542bac"},"outputs":[{"name":"stdout","output_type":"stream","text":["['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr']\n","['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 LTCUSDT.ftr']\n","['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 ETHUSDT.ftr']\n","['2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr']\n","['2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-08-31 SUSHIUSDT.xlsx', '2021-08-31 CVCUSDT.xlsx', '2021-08-31 BTSUSDT.xlsx', '2021-08-31 HOTUSDT.xlsx', '2021-08-31 ZRXUSDT.xlsx', '2021-08-31 QTUMUSDT.xlsx', '2021-08-31 IOTAUSDT.xlsx', '2021-08-31 BTCBUSD.xlsx', '2021-08-31 WAVESUSDT.xlsx', '2021-08-31 ADAUSDT.xlsx', '2021-08-31 LITUSDT.xlsx', '2021-08-31 XTZUSDT.xlsx', '2021-08-31 BNBUSDT.xlsx', '2021-08-31 AKROUSDT.xlsx', '2021-08-31 HNTUSDT.xlsx', '2021-08-31 ETCUSDT.xlsx', '2021-08-31 XMRUSDT.xlsx', '2021-08-31 YFIUSDT.xlsx', '2021-08-31 ETHUSDT.xlsx', '2021-08-31 ALICEUSDT.xlsx', '2021-08-31 ALPHAUSDT.xlsx', '2021-08-31 SFPUSDT.xlsx', '2021-08-31 REEFUSDT.xlsx', '2021-08-31 BATUSDT.xlsx', '2021-08-31 DOGEUSDT.xlsx', '2021-08-31 TRXUSDT.xlsx', '2021-08-31 RLCUSDT.xlsx', '2021-08-31 BTCSTUSDT.xlsx', '2021-08-31 STORJUSDT.xlsx', '2021-08-31 SNXUSDT.xlsx', '2021-08-31 XLMUSDT.xlsx', '2021-08-31 NEOUSDT.xlsx', '2021-08-31 UNFIUSDT.xlsx', '2021-08-31 SANDUSDT.xlsx', '2021-08-31 DASHUSDT.xlsx', '2021-08-31 KAVAUSDT.xlsx', '2021-08-31 RUNEUSDT.xlsx', '2021-08-31 CTKUSDT.xlsx', '2021-08-31 LINKUSDT.xlsx', '2021-08-31 CELRUSDT.xlsx', '2021-08-31 RSRUSDT.xlsx', '2021-08-31 DGBUSDT.xlsx', '2021-08-31 SKLUSDT.xlsx', '2021-08-31 RENUSDT.xlsx', '2021-08-31 TOMOUSDT.xlsx', '2021-08-31 MTLUSDT.xlsx', '2021-08-31 LTCUSDT.xlsx', '2021-08-31 DODOUSDT.xlsx', '2021-08-31 EGLDUSDT.xlsx', '2021-08-31 KSMUSDT.xlsx', '2021-08-31 ONTUSDT.xlsx', '2021-08-31 VETUSDT.xlsx', '2021-08-31 TRBUSDT.xlsx', '2021-08-31 MANAUSDT.xlsx', '2021-08-31 COTIUSDT.xlsx', '2021-08-31 CHRUSDT.xlsx', '2021-08-31 ETHUSDT_210924.xlsx', '2021-08-31 BAKEUSDT.xlsx', '2021-08-31 GRTUSDT.xlsx', '2021-08-31 FLMUSDT.xlsx', '2021-08-31 EOSUSDT.xlsx', '2021-08-31 OGNUSDT.xlsx', '2021-08-31 SCUSDT.xlsx', '2021-08-31 BALUSDT.xlsx', '2021-08-31 STMXUSDT.xlsx', '2021-08-31 BTTUSDT.xlsx', '2021-08-31 LUNAUSDT.xlsx', '2021-08-31 DENTUSDT.xlsx', '2021-08-31 KNCUSDT.xlsx', '2021-08-31 SRMUSDT.xlsx', '2021-08-31 ENJUSDT.xlsx', '2021-08-31 ZENUSDT.xlsx', '2021-08-31 ATOMUSDT.xlsx', '2021-08-31 NEARUSDT.xlsx', '2021-08-31 BCHUSDT.xlsx', '2021-08-31 IOSTUSDT.xlsx', '2021-08-31 HBARUSDT.xlsx', '2021-08-31 ZECUSDT.xlsx', '2021-08-31 1000SHIBUSDT.xlsx', '2021-08-31 TLMUSDT.xlsx', '2021-08-31 BZRXUSDT.xlsx', '2021-08-31 ETHBUSD.xlsx', '2021-08-31 AAVEUSDT.xlsx', '2021-08-31 GTCUSDT.xlsx', '2021-08-31 ALGOUSDT.xlsx', '2021-08-31 ICPUSDT.xlsx', '2021-08-31 BTCUSDT_210924.xlsx', '2021-08-31 LRCUSDT.xlsx', '2021-08-31 AVAXUSDT.xlsx', '2021-08-31 MATICUSDT.xlsx', '2021-08-31 1INCHUSDT.xlsx', '2021-08-31 MKRUSDT.xlsx', '2021-08-31 THETAUSDT.xlsx', '2021-08-31 UNIUSDT.xlsx', '2021-08-31 LINAUSDT.xlsx', '2021-08-31 RVNUSDT.xlsx', '2021-08-31 FILUSDT.xlsx', '2021-08-31 NKNUSDT.xlsx', '2021-08-31 DEFIUSDT.xlsx', '2021-08-31 COMPUSDT.xlsx', '2021-08-31 BTCDOMUSDT.xlsx', '2021-08-31 SOLUSDT.xlsx', '2021-08-31 BTCUSDT.xlsx', '2021-08-31 OMGUSDT.xlsx', '2021-08-31 ICXUSDT.xlsx', '2021-08-31 BLZUSDT.xlsx', '2021-08-31 FTMUSDT.xlsx', '2021-08-31 YFIIUSDT.xlsx', '2021-08-31 KEEPUSDT.xlsx', '2021-08-31 BANDUSDT.xlsx', '2021-08-31 XRPUSDT.xlsx', '2021-08-31 SXPUSDT.xlsx', '2021-08-31 CRVUSDT.xlsx', '2021-08-31 BELUSDT.xlsx', '2021-08-31 DOTUSDT.xlsx', '2021-08-31 XEMUSDT.xlsx', '2021-08-31 ONEUSDT.xlsx', '2021-08-31 ZILUSDT.xlsx', '2021-08-31 AXSUSDT.xlsx', '2021-08-31 OCEANUSDT.xlsx', '2021-08-31 CHZUSDT.xlsx', '2021-08-31 ANKRUSDT.xlsx', '2021-08-31 SUSHIUSDT_res_dfs.pkl', '2021-07-01 ADAUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr']\n","['2021-07-01 BTCUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr']\n","['2021-02-07 BTC.xlsx', '2021-02-07 ETH.xlsx', '2021-02-11 BCHUSDT.xlsx', '2021-02-11 XRPUSDT.xlsx', '2021-02-11 EOSUSDT.xlsx', '2021-02-11 LTCUSDT.xlsx', '2021-02-11 ETCUSDT.xlsx', '2021-02-11 LINKUSDT.xlsx', '2021-02-11 XLMUSDT.xlsx', '2021-02-11 ADAUSDT.xlsx', '2021-02-11 XMRUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr']\n","['2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx']\n"]}],"source":["interval = '1m'\n","date_path = './candlestick_concated/%s/quant_v2/' % interval\n","file_list = os.listdir(date_path)\n","print((file_list))\n","\n","interval2 = '3m'\n","date_path2 = './candlestick_concated/%s/quant_v2/' % interval2\n","file_list2 = os.listdir(date_path2)\n","print((file_list2))\n","\n","interval3 = '5m'\n","date_path3 = './candlestick_concated/%s/quant_v2/' % interval3\n","file_list3 = os.listdir(date_path3)\n","print((file_list3))\n","\n","interval4 = '15m'\n","date_path4 = './candlestick_concated/%s/quant_v2/' % interval4\n","file_list4 = os.listdir(date_path4)\n","print((file_list4))\n","\n","interval5 = '30m'\n","date_path5 = './candlestick_concated/%s/quant_v2/' % interval5\n","file_list5 = os.listdir(date_path5)\n","print((file_list5))\n","\n","interval6 = '1h'\n","date_path6 = './candlestick_concated/%s/quant_v2/' % interval6\n","file_list6 = os.listdir(date_path6)\n","print((file_list6))\n","\n","interval7 = '4h'\n","date_path7 = './candlestick_concated/%s/quant_v2/' % interval7\n","file_list7 = os.listdir(date_path7)\n","print((file_list7))\n","\n","interval8 = '1d'\n","date_path8 = './candlestick_concated/%s/quant_v2/' % interval8\n","file_list8 = os.listdir(date_path8)\n","print((file_list8))"]},{"cell_type":"markdown","metadata":{"id":"AUSBU7T8Suzi"},"source":["## basic_func"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QmhLikYlSuzi"},"outputs":[],"source":["def sync_check(df, second_df=None, third_df=None, fourth_df=None, fifth_df=None,\n","               sixth_df=None, seventh_df=None, eighth_df=None):\n","\n","    #           supertrend          #\n","    # df = st_price_line(df, second_df, '3m')\n","    # # print(df.head(100))\n","    # # return\n","\n","    # df = st_price_line(df, third_df, '5m')\n","    # df = st_price_line(df, fourth_df, '15m')\n","    # df = st_price_line(df, fifth_df, '30m')\n","    # df = st_price_line(df, sixth_df, '1h')\n","    # df = st_price_line(df, seventh_df, '4h')\n","\n","    # print(\"supertrend phase done\")\n","\n","    # --------------- rsi --------------- #  \n","    # df['rsi_1m'] = rsi(df, 14)    \n","    # third_df['rsi_5m'] = rsi(third_df, 14)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-1]), columns=['rsi_5m']))\n","    \n","    # print(\"rsi phase done\")\n","\n","\n","    # --------------- cci --------------- #  \n","    # df['cci_1m'] = cci(df, 20)\n","\n","    # print(\"cci phase done\")\n","\n","\n","    # --------------- ema --------------- #      \n","    # third_df['ema_5m'] = ema(third_df['close'], 200)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-1]), columns=['ema_5m']))\n","    \n","    # print(\"ema phase done\")\n","\n","\n","    # # --------------- dc --------------- #  \n","    # df = dc_line(df, None, '1m', dc_period=20)\n","    # df = dc_line(df, second_df, '3m', dc_period=20)\n","    # df = dc_line(df, third_df, '5m', dc_period=20)\n","    # df = dc_line(df, fourth_df, '15m', dc_period=20)\n","    # df = dc_line(df, fifth_df, '30m', dc_period=20)\n","    # df = dc_line(df, sixth_df, '1h', dc_period=20)\n","    # df = dc_line(df, seventh_df, '4h', dc_period=20)\n","\n","    # print(\"dc phase done\")\n","    \n","    # # --------------- bband --------------- #  \n","    # df = bb_line(df, None, '1m')\n","    # df = bb_line(df, second_df, '3m')\n","    # df = bb_line(df, third_df, '5m')\n","    # df = bb_line(df, fourth_df, '15m')\n","    # df = bb_line(df, fifth_df, '30m')\n","    # df = bb_line(df, sixth_df, '1h')\n","    # df = bb_line(df, seventh_df, '4h')\n","\n","    # print(\"bband phase done\")\n","\n","    # --------------- cbline --------------- #    \n","    # second_df['cloud_bline_3m'] = cloud_bline(second_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, second_df, [-1]), columns=['cloud_bline_3m']))\n","    # third_df['cloud_bline_5m'] = cloud_bline(third_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-1]), columns=['cloud_bline_5m']))\n","    # fourth_df['cloud_bline_15m'] = cloud_bline(fourth_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, fourth_df, [-1]), columns=['cloud_bline_15m']))\n","    # fifth_df['cloud_bline_30m'] = cloud_bline(fifth_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, fifth_df, [-1]), columns=['cloud_bline_30m']))\n","    # sixth_df['cloud_bline_1h'] = cloud_bline(sixth_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, sixth_df, [-1]), columns=['cloud_bline_1h']))\n","    # seventh_df['cloud_bline_4h'] = cloud_bline(seventh_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, seventh_df, [-1]), columns=['cloud_bline_4h']))\n","\n","    # print(\"cbline phase done\")\n","    \n","\n","    #           lucid sar              #\n","    # df['sar_1m'], df['sar_uptrend_1m'] = lucid_sar(df, return_uptrend=True)\n","\n","    second_df['sar_3m'], second_df['sar_uptrend_3m'] = lucid_sar(second_df, af_initial=0.01, return_uptrend=True)\n","    df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, second_df, [-2, -1], backing_i=-2), columns=['sar_3m', 'sar_uptrend_3m']))\n","\n","    third_df['sar_5m'], third_df['sar_uptrend_5m'] = lucid_sar(third_df, af_initial=0.01, return_uptrend=True)\n","    df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-2, -1], backing_i=-2), columns=['sar_5m', 'sar_uptrend_5m']))\n","\n","    fourth_df['sar_15m'], fourth_df['sar_uptrend_15m'] = lucid_sar(fourth_df, af_initial=0.01, return_uptrend=True)\n","    df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, fourth_df, [-2, -1], backing_i=-2), columns=['sar_15m', 'sar_uptrend_15m']))\n","\n","    # seventh_df['sar_4h'], seventh_df['sar_uptrend_4h'] = lucid_sar(seventh_df, return_uptrend=True)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, seventh_df, [-2, -1], backing_i=-2), columns=['sar_4h', 'sar_uptrend_4h']))\n","    \n","    print(\"sar phase done\")\n","\n","    \n","    #           stochastic              #\n","    # df['stoch_1m'] = stoch(df, 13, 3, 3)\n","\n","    # third_df['stoch'] = stoch(third_df, 13, 3, 3)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","    # print(\"stoch phase done\")\n","\n","\n","    return df\n"]},{"cell_type":"markdown","metadata":{"id":"mEKyVbHWSuzi"},"source":["## make & save res_df (concat ÏÉùÍ∞ÅÌïòÎ©¥, timeindex sync ÎßûÏ∂∞ÏïºÌï®)"]},{"cell_type":"markdown","metadata":{"id":"VdukVo5-Suzj"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11,"status":"error","timestamp":1636201718856,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"khKb9nhlSuzj","outputId":"02bf2c60-f298-4fe9-e6bb-78230ac1348c"},"outputs":[{"ename":"NameError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-5-ee034491b257>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0ma_day\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m3600\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m24\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtqdm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m   \u001b[0mkeys\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mfile_list\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'file_list' is not defined"]}],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  if '2021-07-01'.upper() not in file_list[i]:\n","  # if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    excel_name = key.replace(\".xlsx\", \"_st1h_backi2.xlsx\")\n","    excel_path = save_path + excel_name\n","\n","    if excel_name in exist_list:\n","      print(excel_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m ÎßàÏßÄÎßâ timeindex Ïùò date Í∏∞Ï§Ä, 08:59:59.999000 Î•º last timestamp Î°ú ÏÑ§Ï†ï\n","      #      2. ÏãúÏûë timestamp Îäî Î™®Îì† tf Ïùò Í∞ÄÏû• ÏµúÍ∑º ÏãúÏûë index,\n","      #       a. 1m Ïùò ÏãúÏûë timeindex Îäî ÏµúÏÜå, htf Ïùò ÏãúÏûë timeindex Î≥¥Îã§ interval ÎßåÌÅº ÏïûÏÑúÏïºÌï®\n","      #         i. Îî∞ÎùºÏÑú 1m open_index, latest_open_index + 1d Î•º ÌïòÎ©¥ Îåê\n","      #           1. timestamp ÏúºÎ°ú Î≥ÄÌôòÌõÑ 1day Î•º ÎçîÌïòÍ≥† datetime ÏúºÎ°ú Î≥ÄÌôò\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","    latest_open_index = sorted(open_indexes)[-1]\n","    \n","    open_ts = datetime.timestamp(latest_open_index)\n","    latest_open_index_1m = datetime.fromtimestamp(open_ts + a_day)\n","\n","    #   str Î°ú ÎßåÎì§Ïñ¥ Ï†ëÍ∑ºÌïòÎ©¥ Î∂àÍ∞ÄÌï®  #\n","    end_index = pd.to_datetime(str(df.index[-1]).split(\" \")[0] + \" 08:59:59.999000\")\n","    # break\n","\n","    sliced_df = df.loc[latest_open_index_1m:end_index] # to_lower_tf Ïùò Í∏∞Ï§Ä ltf\n","    sliced_second_df = second_df.loc[latest_open_index:end_index]\n","    sliced_third_df = third_df.loc[latest_open_index:end_index]\n","    sliced_fourth_df = fourth_df.loc[latest_open_index:end_index]\n","    sliced_fifth_df = fifth_df.loc[latest_open_index:end_index]\n","\n","    print(\"sliced index\")\n","    print(sliced_df.index[[0, -1]])\n","    print(sliced_second_df.index[[0, -1]])\n","    print(sliced_third_df.index[[0, -1]])\n","    print(sliced_fourth_df.index[[0, -1]])\n","    print(sliced_fifth_df.index[[0, -1]])\n","\n","    try:\n","      sliced_sixth_df = sixth_df.loc[latest_open_index:end_index]\n","      sliced_seventh_df = seventh_df.loc[latest_open_index:end_index]\n","\n","      print(sliced_sixth_df.index[[0, -1]])\n","      print(sliced_seventh_df.index[[0, -1]])\n","\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df, sliced_sixth_df, sliced_seventh_df)\n","    \n","    except:\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df)\n","\n","\n","\n","    res_df.to_excel(excel_path)\n","    print(excel_name, \"saved succesfully !\")"]},{"cell_type":"markdown","metadata":{"id":"Bw5JibDKSuzj"},"source":["### xlsx to feather"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":355,"referenced_widgets":["be2b848dbcb14a079a2b7bd605af6435"]},"id":"VA-_gcA7Suzj","outputId":"f6f3b55d-ec2c-4b2c-d62e-3de7c0384dc4"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"be2b848dbcb14a079a2b7bd605af6435","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/156 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["DatetimeIndex(['2021-06-28 00:00:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:02:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:04:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:14:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:29:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-09-14 03:59:59.999000', '2021-11-15 14:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-03-10 20:59:59.999000', '2021-11-15 16:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","\n","xlsx converted to feather !\n","DatetimeIndex(['2021-06-28 00:00:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:02:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:04:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:14:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:29:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-09-14 03:59:59.999000', '2021-11-15 14:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-03-10 20:59:59.999000', '2021-11-15 16:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","\n","xlsx converted to feather !\n"]}],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  # if '2021-07-01'.upper() not in file_list[i]:\n","  if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    feather_name = key.replace(\".xlsx\", \".ftr\")\n","    # feather_path = save_path + feather_name\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m ÎßàÏßÄÎßâ timeindex Ïùò date Í∏∞Ï§Ä, 08:59:59.999000 Î•º last timestamp Î°ú ÏÑ§Ï†ï\n","      #      2. ÏãúÏûë timestamp Îäî Î™®Îì† tf Ïùò Í∞ÄÏû• ÏµúÍ∑º ÏãúÏûë index,\n","      #       a. 1m Ïùò ÏãúÏûë timeindex Îäî ÏµúÏÜå, htf Ïùò ÏãúÏûë timeindex Î≥¥Îã§ interval ÎßåÌÅº ÏïûÏÑúÏïºÌï®\n","      #         i. Îî∞ÎùºÏÑú 1m open_index, latest_open_index + 1d Î•º ÌïòÎ©¥ Îåê\n","      #           1. timestamp ÏúºÎ°ú Î≥ÄÌôòÌõÑ 1day Î•º ÎçîÌïòÍ≥† datetime ÏúºÎ°ú Î≥ÄÌôò\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","\n","    df.reset_index().to_feather(date_path + feather_name, compression='lz4')\n","    second_df.reset_index().to_feather(date_path2 + feather_name, compression='lz4')\n","    third_df.reset_index().to_feather(date_path3 + feather_name, compression='lz4')\n","    fourth_df.reset_index().to_feather(date_path4 + feather_name, compression='lz4')\n","    fifth_df.reset_index().to_feather(date_path5 + feather_name, compression='lz4')\n","    sixth_df.reset_index().to_feather(date_path6 + feather_name, compression='lz4')\n","    seventh_df.reset_index().to_feather(date_path7 + feather_name, compression='lz4')\n","\n","    print(\"xlsx converted to feather !\")\n","    "]},{"cell_type":"markdown","metadata":{"id":"Pe0QpnORSuzk"},"source":["### add itv_name to ftr"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":223,"referenced_widgets":["e3225655da874b8d89cc8b2a381b3fb6"]},"executionInfo":{"elapsed":43664,"status":"ok","timestamp":1638246331122,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"M-gl30KxSuzk","outputId":"1cfcb580-8d25-4bd0-fdd0-213640779ce2"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"e3225655da874b8d89cc8b2a381b3fb6","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/175 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 BTCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 BCHUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 XRPUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 EOSUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 LTCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ETCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 LINKUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 XLMUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ADAUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ETHUSDT_1m.ftr\n"]}],"source":["save_path = './candlestick_concated/res_df/'\n","\n","# dir_path = \"bbdc3m_backi2\"\n","# date = '2021-10-10'\n","date = '2021-07-01'\n","\n","db_path = './candlestick_concated/database_bn/non_cum/%s/' % date\n","os.makedirs(os.path.join(db_path), exist_ok=True)\n","\n","# exist_list = os.listdir(os.path.join(save_path, dir_path))\n","# break\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","        \n","    df = shutil.copy(date_path + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n","    second_df = shutil.copy(date_path2 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval2))\n","    third_df = shutil.copy(date_path3 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval3))\n","    fourth_df = shutil.copy(date_path4 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval4))\n","    fifth_df = shutil.copy(date_path5 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval5))\n","    sixth_df = shutil.copy(date_path6 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval6))\n","    seventh_df = shutil.copy(date_path7 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval7))\n","\n","    print(\"copied to\" + db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n"]},{"cell_type":"markdown","metadata":{"id":"4oZ1ohTtSuzk"},"source":["### feather ver."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vgVHpnUsSuzk","colab":{"base_uri":"https://localhost:8080/","referenced_widgets":["465133d6c5694a1ca7b7135eaaac8b1d","ff574146d20e4417a77c960712b62a3d","0ddb8643e6c349c1988510c8edd3d2be","abff4093d3d944b1b6b215dcf854b412","13565b76d7cc4fb283dfa97525025b02","f1012a4b1d2444c5bab03bcdb9d88509","1bac9048c02c4e149da56377f26bc9bf","652413cf08824991a2383671e6bff080","dc5029eb74d041e68a1453f4371d2039","cc5fc80c98af438f9a64c588601c183b","d40f65ef68c64eefb1d054439204e234"],"height":1000},"outputId":"d5b68380-22d9-4ddd-b4c9-3efca2ef4a27"},"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"465133d6c5694a1ca7b7135eaaac8b1d","version_minor":0,"version_major":2},"text/plain":["  0%|          | 0/70 [00:00<?, ?it/s]"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["DatetimeIndex(['2020-09-05 00:00:59.999000', '2021-11-17 00:47:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:02:59.999000', '2021-11-17 00:53:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:04:59.999000', '2021-11-17 00:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:14:59.999000', '2021-11-17 01:14:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:29:59.999000', '2021-11-17 01:29:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 00:59:59.999000', '2021-11-17 01:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-17 04:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","\n","sliced index\n","DatetimeIndex(['2020-09-06 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:80: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:83: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:86: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"]},{"output_type":"stream","name":"stdout","text":["sar phase done\n","./candlestick_concated/res_df/sar2_backi2/noncat/cum/2021-11-17/2021-11-17 ETHUSDT.ftr saved succesfully !\n","DatetimeIndex(['2020-09-05 00:00:59.999000', '2021-11-17 00:47:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:02:59.999000', '2021-11-17 00:53:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:04:59.999000', '2021-11-17 00:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:14:59.999000', '2021-11-17 01:14:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:29:59.999000', '2021-11-17 01:29:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 00:59:59.999000', '2021-11-17 01:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-17 04:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","\n","sliced index\n","DatetimeIndex(['2020-09-06 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","sar phase done\n","./candlestick_concated/res_df/sar2_backi2/noncat/cum/2021-11-17/2021-11-17 BTCUSDT.ftr saved succesfully !\n","DatetimeIndex(['2020-09-05 00:00:59.999000', '2021-11-17 00:47:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:02:59.999000', '2021-11-17 00:53:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:04:59.999000', '2021-11-17 00:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:14:59.999000', '2021-11-17 01:14:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:29:59.999000', '2021-11-17 01:29:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 00:59:59.999000', '2021-11-17 01:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-17 04:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","\n","sliced index\n","DatetimeIndex(['2020-09-06 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n"]}],"source":["# db_path = './candlestick_concated/database_ub/'\n","db_path = './candlestick_concated/database_bn/'\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","save_dir_path = \"sar2_backi2\"\n","\n","date = '2021-11-17'\n","\n","data_path = os.path.join(db_path, \"cum\", date) \n","save_path = os.path.join(save_path, save_dir_path, 'noncat/cum', date)\n","os.makedirs(save_path, exist_ok=True)\n","\n","file_list = os.listdir(data_path)\n","exist_list = os.listdir(save_path)\n","# break\n","\n","interval = '1m'\n","interval2 = '3m'\n","interval3 = '5m'\n","interval4 = '15m'\n","interval5 = '30m'\n","interval6 = '1h'\n","interval7 = '4h'\n","interval8 = '1d'\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","\n","    if \"_1m\" not in key:\n","      continue\n","\n","    # feather_name = key.replace(\".ftr\", \"_%.ftr\" % save_dir_path)\n","    feather_name = key.replace(\"_1m\", \"\")\n","    feather_path = os.path.join(save_path, feather_name)\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    end_indexes = []\n","    \n","    df = pd.read_feather(os.path.join(data_path, key), columns=None, use_threads=True).set_index(\"index\")\n","    second_df = pd.read_feather(os.path.join(data_path, key.replace(interval, interval2)), columns=None, use_threads=True).set_index(\"index\")\n","    third_df = pd.read_feather(os.path.join(data_path, key.replace(interval, interval3)), columns=None, use_threads=True).set_index(\"index\")\n","    fourth_df = pd.read_feather(os.path.join(data_path, key.replace(interval, interval4)), columns=None, use_threads=True).set_index(\"index\")\n","    fifth_df = pd.read_feather(os.path.join(data_path, key.replace(interval, interval5)), columns=None, use_threads=True).set_index(\"index\")\n","        \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    end_indexes.append(df.index[-1])\n","    end_indexes.append(second_df.index[-1])\n","    end_indexes.append(third_df.index[-1])\n","    end_indexes.append(fourth_df.index[-1])\n","    end_indexes.append(fifth_df.index[-1])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m ÎßàÏßÄÎßâ timeindex Ïùò date Í∏∞Ï§Ä, 08:59:59.999000 Î•º last timestamp Î°ú ÏÑ§Ï†ï\n","      #      2. ÏãúÏûë timestamp Îäî Î™®Îì† tf Ïùò Í∞ÄÏû• ÏµúÍ∑º ÏãúÏûë index,\n","      #       a. 1m Ïùò ÏãúÏûë timeindex Îäî ÏµúÏÜå, htf Ïùò ÏãúÏûë timeindex Î≥¥Îã§ interval ÎßåÌÅº ÏïûÏÑúÏïºÌï®\n","      #         i. Îî∞ÎùºÏÑú 1m open_index, latest_open_index + 1d Î•º ÌïòÎ©¥ Îåê\n","      #           1. timestamp ÏúºÎ°ú Î≥ÄÌôòÌõÑ 1day Î•º ÎçîÌïòÍ≥† datetime ÏúºÎ°ú Î≥ÄÌôò\n","      sixth_df = pd.read_feather(os.path.join(data_path, key.replace(interval, interval6)), columns=None, use_threads=True).set_index(\"index\")\n","      seventh_df = pd.read_feather(os.path.join(data_path, key.replace(interval, interval7)), columns=None, use_threads=True).set_index(\"index\")\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","      end_indexes.append(sixth_df.index[-1])\n","      end_indexes.append(seventh_df.index[-1])\n","\n","    except Exception as e:\n","      print(e)\n","\n","    latest_open_index = sorted(open_indexes)[-1]\n","    recent_end_index = sorted(end_indexes)[0]\n","    \n","    open_ts = datetime.timestamp(latest_open_index)\n","    latest_open_index_1m = datetime.fromtimestamp(open_ts + a_day)\n","\n","    end_ts = datetime.timestamp(recent_end_index)\n","    recent_end_index_1m = datetime.fromtimestamp(end_ts - a_day)\n","\n","    #   str Î°ú ÎßåÎì§Ïñ¥ Ï†ëÍ∑ºÌïòÎ©¥ Î∂àÍ∞ÄÌï®  #\n","    #   latest_open_index_1m ÏùÄ latest_open_index Î≥¥Îã§ ÌÅ¨Í∏∞Îßå ÌïòÎ©¥ Îê®   # (9:00:00 ÍµêÏ≤¥ ÌïÑÏöîÏóÜÏù¥)\n","    if \"999000\" in str(df.index[-1]):\n","      # end_index = pd.to_datetime(str(df.index[-1]).split(\" \")[0] + \" 08:59:59.999000\")\n","      end_index = pd.to_datetime(str(recent_end_index_1m).split(\" \")[0] + \" 08:59:59.999000\")\n","    else:\n","      # end_index = pd.to_datetime(str(df.index[-1]).split(\" \")[0] + \" 09:00:00\")\n","      end_index = pd.to_datetime(str(recent_end_index_1m).split(\" \")[0] + \" 09:00:00\")\n","      # end_index = pd.to_datetime(\"2021-11-15\" + \" 09:00:00\")\n","\n","    #   ***** 1m open_idx Îäî htf Î≥¥Îã§ Ïª§ÏïºÌï® --> to_lower_tf Î•º ÏÇ¨Ïö©ÌïòÍ∏∞ ÏúÑÌï®ÏûÑ   #\n","    sliced_df = df.loc[latest_open_index_1m:end_index] # to_lower_tf Ïùò Í∏∞Ï§Ä ltf\n","\n","    sliced_second_df = second_df.loc[latest_open_index:end_index]\n","    sliced_third_df = third_df.loc[latest_open_index:end_index]\n","    sliced_fourth_df = fourth_df.loc[latest_open_index:end_index]\n","    sliced_fifth_df = fifth_df.loc[latest_open_index:end_index]\n","\n","    print(\"sliced index\")\n","    print(sliced_df.index[[0, -1]])\n","    print(sliced_second_df.index[[0, -1]])\n","    print(sliced_third_df.index[[0, -1]])\n","    print(sliced_fourth_df.index[[0, -1]])\n","    print(sliced_fifth_df.index[[0, -1]])\n","\n","    try:\n","      sliced_sixth_df = sixth_df.loc[latest_open_index:end_index]\n","      sliced_seventh_df = seventh_df.loc[latest_open_index:end_index]\n","\n","      print(sliced_sixth_df.index[[0, -1]])\n","      print(sliced_seventh_df.index[[0, -1]])\n","\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df, sliced_sixth_df, sliced_seventh_df)\n","    \n","    except:\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df)\n","\n","\n","\n","    # res_df.to_feather(feather_path)\n","    res_df.reset_index().to_feather(feather_path, compression='lz4')\n","    print(feather_path, \"saved succesfully !\")"]},{"cell_type":"markdown","metadata":{"id":"jTN3M842Suzl"},"source":["## concat & save new res_df"]},{"cell_type":"markdown","metadata":{"id":"MlFkpO1MSuzl"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"U-3QkfbFSuzl"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","dict_name = \"2021-07-01 ETHUSDT_bb15m_backi2_res_dfs.pkl\"\n","\n","#     load with pickle    #\n","with open(save_path + dict_name, 'rb') as f:\n","  saved_res_df_dict = pickle.load(f)\n","\n","print(dict_name, \"loaded !\")\n","res_df_files = os.listdir(save_path)\n","res_df_files.reverse()\n","\n","print(res_df_files)\n","\n","res_df_dict = {}\n","\n","base_postfix = '_bb15m_backi2.xlsx'\n","new_postfix = '_st1h_backi2.xlsx'\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for k_i, key in enumerate(res_df_files):\n","\n","  if '2021-07-01'.upper() not in key:\n","  # if '2021-10-10'.upper() not in key:\n","    continue\n","\n","  # if \"link\".upper() not in key:\n","  # if \"btc\".upper() not in key:\n","  #   continue\n","\n","  if new_postfix not in key:\n","    continue\n","\n","  # if key in \n","\n","  if sample_cnt == max_cnt:\n","    dict_name = \"%s_res_dfs.pkl\" % key.split(\".\")[0]\n","    print(\"dict_name :\", dict_name)\n","\n","  base_df = saved_res_df_dict[key.replace(new_postfix, base_postfix)]\n","  # base_df = pd.read_excel(save_path + key.replace(new_postfix, base_postfix), index_col=0)  \n","  res_df = pd.read_excel(save_path + key, index_col=0)  \n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  droped_new_res_df.head()\n","  # break\n","\n","  # res_df_dict[key] = res_df\n","  res_df_dict[key] = droped_new_res_df\n","  print(key, \"saved to dict !\")\n","\n","  #     save with pickle    #\n","  with open(save_path + dict_name, 'wb') as f:\n","    pickle.dump(res_df_dict, f)\n","\n","  sample_cnt -= 1\n","\n","  if sample_cnt <= 0:\n","    break\n"]},{"cell_type":"markdown","metadata":{"id":"t1E_eAyPSuzm"},"source":["### new col to latest feather (1m_indi. only)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xyI5NrM7Suzm"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","cum_dir = \"cum\"\n","\n","new_dir_path = \"rsi_backi2\"\n","base_dir_path = \"bbdc3m_backi2\"\n","\n","new_date = '2021-11-17'\n","\n","\n","\n","#     load ftr list    #\n","base_save_path = os.path.join(save_path, base_dir_path, \"concat/cum\", new_date)\n","new_save_path = base_save_path.replace(base_dir_path, new_dir_path)\n","\n","#     save to (new) cum dir    #\n","#      1. if dir. not exists, makedir\n","os.makedirs(new_save_path, exist_ok=True)\n","\n","ftr_list = [s for s in os.listdir(base_save_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_save_path, key), columns=None, use_threads=True).set_index(\"index\")\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  droped_new_res_df = sync_check(base_df)\n","\n","  # new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # # new_res_df.head()\n","\n","  # intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  # droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break\n","\n","  droped_new_res_df.reset_index().to_feather(os.path.join(new_save_path, key), compression='lz4')\n","\n","  print(os.path.join(new_save_path, key), \"saved !\")\n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"markdown","metadata":{"id":"nUs4fjVHSuzl"},"source":["### feather ver. (col concat)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6cu-Y82iSuzl","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1640781341331,"user_tz":-540,"elapsed":20739,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"23c07b95-bf94-462c-e915-7f00810353b5"},"outputs":[{"output_type":"stream","name":"stdout","text":["['2021-11-17 ETHUSDT.ftr', '2021-11-17 BTCUSDT.ftr', '2021-11-17 ETCUSDT.ftr']\n","./candlestick_concated/res_df/sar2_backi2/concat/cum/2021-11-17/2021-11-17 ETHUSDT.ftr saved !\n","./candlestick_concated/res_df/sar2_backi2/concat/cum/2021-11-17/2021-11-17 BTCUSDT.ftr saved !\n","./candlestick_concated/res_df/sar2_backi2/concat/cum/2021-11-17/2021-11-17 ETCUSDT.ftr saved !\n"]}],"source":["new_dir_path = \"sar2_backi2\"\n","base_dir_path = \"cci_backi2\"\n","\n","# new_date = \"2021-07-01\"\n","new_date = \"2021-11-17\"\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","save_path = './candlestick_concated/res_df/'\n","save_path = os.path.join(save_path, new_dir_path, \"concat/cum\", new_date)\n","os.makedirs(save_path, exist_ok=True)\n","\n","\n","#     load ftr list    #\n","# ftr_list = [s for s in os.listdir(os.path.join(save_path, new_dir_path)) if \"ftr\" in s]\n","\n","noncat_path = save_path.replace(\"concat/\", \"noncat/\")\n","ftr_list = [s for s in os.listdir(noncat_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(save_path.replace(new_dir_path, base_dir_path), key), columns=None, use_threads=True).set_index(\"index\")\n","  res_df = pd.read_feather(os.path.join(noncat_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break\n","\n","  droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","  # res_df_dict[key] = res_df\n","  # res_df_dict[key] = droped_new_res_df\n","  print(os.path.join(save_path, key), \"saved !\")\n","  \n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":454,"status":"ok","timestamp":1640781345898,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"4GiF2NJPSuzm","outputId":"7c7d3818-14d4-400f-a2f7-475fa21d3063"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['dc_upper_1m', 'dc_lower_1m', 'dc_base_1m', 'dc_upper_3m', 'dc_lower_3m', 'dc_base_3m', 'dc_upper_5m', 'dc_lower_5m', 'dc_base_5m', 'dc_upper_15m', 'dc_lower_15m', 'dc_base_15m', 'dc_upper_30m', 'dc_lower_30m', 'dc_base_30m', 'dc_upper_1h', 'dc_lower_1h', 'dc_base_1h', 'dc_upper_4h', 'dc_lower_4h', 'dc_base_4h', 'bb_upper_1m', 'bb_lower_1m', 'bb_upper_3m', 'bb_lower_3m', 'bb_upper_5m', 'bb_lower_5m', 'bb_upper_15m', 'bb_lower_15m', 'bb_upper_30m', 'bb_lower_30m', 'bb_upper_1h', 'bb_lower_1h', 'bb_upper_4h', 'bb_lower_4h', 'rsi_1m', 'rsi_5m', 'ema_5m', 'cci_1m', 'open', 'high', 'low', 'close', 'volume', 'sar_3m', 'sar_uptrend_3m', 'sar_5m', 'sar_uptrend_5m', 'sar_15m', 'sar_uptrend_15m'], dtype='object')"]},"metadata":{},"execution_count":4}],"source":["droped_new_res_df.columns"]},{"cell_type":"markdown","metadata":{"id":"WVAKq3i8Suzm"},"source":["### feather ver. (row concat) , database cum ÎèÑ Ìò∏ÌôòÍ∞ÄÎä•"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XG2p9OhhSuzm"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","save_path = './candlestick_concated/database_bn/'\n","\n","new_date = '2021-11-17'\n","# base_date = '2021-10-10'\n","base_date = '2021-07-01'\n","\n","#     load ftr list    #\n","if \"database\" in save_path:\n","  dir_path = \"\"\n","  concat_dir = \"\"\n","else:\n","  dir_path = \"bbdc3m_backi2\"\n","  concat_dir = \"concat\"\n","\n","# base_date_path = os.path.join(save_path, dir_path, concat_dir, \"cum\", base_date)    # --> base ÎèÑ non_cum Í∞ÄÎä•Ìï®\n","base_date_path = os.path.join(save_path, dir_path, concat_dir, \"non_cum\", base_date)    # --> base ÎèÑ non_cum Í∞ÄÎä•Ìï®\n","# new_date_path = os.path.join(save_path, dir_path, concat_dir, \"non_cum\", new_date)\n","new_date_path = os.path.join(save_path, dir_path, concat_dir, \"cum\", new_date)    # --> cum Í∞ÄÎä•Ìï®\n","  \n","\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","save_path = new_date_path.replace(\"non_cum\", \"cum\")\n","os.makedirs(save_path, exist_ok=True)   # noncat / concat ÎëêÍ∞ÄÏßÄ Í≤ΩÏö∞ Ï°¥Ïû¨Í∞ÄÎä•Ìï† Í≤É\n","# os.makedirs(os.path.join(save_path, dir_path, \"noncat/cum\", new_date), exist_ok=True)\n","\n","\n","ftr_list = [s for s in os.listdir(new_date_path) if \"ftr\" in s]\n","exist_list = os.listdir(save_path)\n","print(ftr_list)\n","# break\n","\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","  # if key in exist_list:\n","  #   print(key, \"already exist !\")\n","  #   continue\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_date_path, key.replace(new_date, base_date)), columns=None, use_threads=True).set_index(\"index\")\n","  res_df = pd.read_feather(os.path.join(new_date_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break\n","  \n","  interval = key.split(\".\")[0].split(\"_\")[-1] \n","  itv_num = to_itvnum(interval)\n","\n","  # verified_df = consecutive_df(droped_new_res_df, to_itvnum(interval))\n","\n","  # verified_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","  # res_df_dict[key] = res_df\n","  # res_df_dict[key] = droped_new_res_df\n","  \n","  print(droped_new_res_df.iloc[[0, -1]])\n","\n","  np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","  ideal_ts_gap = 60 * itv_num\n","\n","  for ts_i in range(len(np_idx_ts)):\n","    \n","    if ts_i != 0:\n","      ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","\n","      if ts_gap > ideal_ts_gap or ts_gap < ideal_ts_gap:\n","      # if ts_gap == ideal_ts_gap:\n","        print(droped_new_res_df.index[ts_i - 1])\n","        print(droped_new_res_df.index[ts_i])\n","        # print(ts_gap)\n","        print(\"-------------------- unideal ts_gap --------------------\")\n","\n","  droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","  print(os.path.join(save_path, key), \"saved !\")\n","  \n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"markdown","metadata":{"id":"L7l5CTJfSuzn"},"source":["### check continuity"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nGzMGyC3Suzn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1640781357243,"user_tz":-540,"elapsed":2412,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"8867353a-59f8-475a-bc4f-326da4bb4e5d"},"outputs":[{"output_type":"stream","name":"stdout","text":["                         dc_upper_1m  dc_lower_1m  dc_base_1m  dc_upper_3m  dc_lower_3m  dc_base_3m  dc_upper_5m  dc_lower_5m  dc_base_5m  dc_upper_15m  dc_lower_15m  dc_base_15m  dc_upper_30m  dc_lower_30m  dc_base_30m  dc_upper_1h  dc_lower_1h  dc_base_1h  dc_upper_4h  dc_lower_4h  dc_base_4h  bb_upper_1m  bb_lower_1m  bb_upper_3m  bb_lower_3m  bb_upper_5m  bb_lower_5m  bb_upper_15m  bb_lower_15m  bb_upper_30m  bb_lower_30m  bb_upper_1h  bb_lower_1h  bb_upper_4h  bb_lower_4h     rsi_1m     rsi_5m     ema_5m      cci_1m    open    high     low   close   volume     sar_3m  sar_uptrend_3m     sar_5m  sar_uptrend_5m    sar_15m  sar_uptrend_15m\n","index                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n","2020-09-06 04:59:59.999          NaN          NaN         NaN        5.034        4.824       4.929        5.066        4.824       4.945         5.286         4.824        5.055         5.286         4.824        5.055        5.418        4.847      5.1325          NaN          NaN         NaN          NaN          NaN     4.947881     4.851019     5.013865     4.873635      5.217982      4.976818      5.229521      5.026779     5.333309     5.116591          NaN          NaN        NaN  37.362911   5.149668         NaN   4.898   4.918   4.896   4.911  5890.23   4.977421           False   4.824960            True   5.166939            False\n","2021-11-16 08:59:59.999        55.01       54.735     54.8725       55.149       54.741      54.945       55.149       54.555      54.852        55.285        54.205       54.745        56.353        54.205       55.279       56.634       54.205     55.4195       56.933         53.7     55.3165    54.995519    54.879381    55.056293    54.898407    55.071791    54.818409     55.099366     54.797334     55.514173     54.812127    56.180214    55.162286    56.046519    55.180481  41.796641  50.365261  55.351019 -203.887438  54.771  54.850  54.764  54.849  1217.71  54.746353            True  55.129004           False  55.181733            False\n","[1.59936840e+09 1.59936846e+09 1.59936852e+09 1.59936858e+09\n"," 1.59936864e+09 1.59936870e+09 1.59936876e+09 1.59936882e+09\n"," 1.59936888e+09 1.59936894e+09]\n"]}],"source":["# print(droped_new_res_df.columns)\n","\n","print(droped_new_res_df.iloc[[0, -1]])\n","\n","np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","\n","print(np_idx_ts[:10])\n","for ts_i in range(len(np_idx_ts)):\n","  \n","  if ts_i != 0:\n","    ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","\n","    if ts_gap > 60 or ts_gap < 60:\n","    # if ts_gap == 60:\n","      print(droped_new_res_df.index[ts_i - 1])\n","      print(droped_new_res_df.index[ts_i])\n","      # print(ts_gap)\n","      print()\n"]},{"cell_type":"markdown","metadata":{"id":"qNGeuYuGDXfv"},"source":["# pr check with strategy"]},{"cell_type":"markdown","metadata":{"id":"6HOjnZjSgzk1"},"source":["## load ftr_list"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"7FPBG5Qqg2jB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1641045507758,"user_tz":-540,"elapsed":1197,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"cc245502-19a4-42e4-e812-50eefd586bcc"},"outputs":[{"output_type":"stream","name":"stdout","text":["['2021-11-17 ETHUSDT.ftr', '2021-11-17 BTCUSDT.ftr', '2021-11-17 ETCUSDT.ftr']\n"]}],"source":["save_path = './candlestick_concated/res_df/'\n","\n","dir_path = \"sar2_backi2\"\n","\n","date = \"2021-11-17\"\n","\n","ftr_path = os.path.join(save_path, dir_path, \"concat/cum\", date)\n","\n","#     load ftr list    #\n","ftr_list = [s for s in os.listdir(ftr_path) if \"ftr\" in s if date in s]\n","# ftr_list = [s for s in os.listdir(os.path.join(save_path, dir_path)) if \"ftr\" in s if date in s]\n","print(ftr_list)"]},{"cell_type":"markdown","metadata":{"id":"5duWn8t4BRyv"},"source":["## hvp platform"]},{"cell_type":"markdown","metadata":{"id":"wmnyUTS-yjF1"},"source":["##### config"]},{"cell_type":"markdown","source":["###### set config (override available)"],"metadata":{"id":"JjKHyqftzhD7"}},{"cell_type":"code","execution_count":9,"metadata":{"id":"q_4E-zH02WJy","executionInfo":{"status":"ok","timestamp":1641045768295,"user_tz":-540,"elapsed":362,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"outputs":[],"source":["#     caution : MARKET / LIMIT spelling   #\n","#      json doesn't support single quotes     #\n","\n","param_dict = \\\n","{\n","  \"strat_version\": \"v7_3\",\n","  \"trader_set\": {\n","    \"run\": 1,\n","    \"df_log\": 0,\n","    \"last_index\": -2,\n","    \"limit_fee\": 0.0002,\n","    \"market_fee\": 0.0004,\n","    \"initial_asset\": 3000,\n","    \"asset_changed\": 1,\n","    \"symbol\": \"ETHUSDT\",\n","    \"symbol_changed\": 0,\n","    \"interval_list\": [\n","      \"1m\",\n","      \"5m\",\n","      \"15m\"\n","    ],\n","    \"row_list\": [\n","      200,\n","      100,\n","      100\n","    ],\n","    \"bar_close_second\": 59,\n","    \"realtime_term\": 0.01,\n","    \"api_retry_term\": 3,\n","    \"check_entry_sec\": 10,\n","    \"entry_execution_wait\": 60,\n","    \"breakout_qty_ratio\": 0.97,\n","    \"qty_check_term\": 30,\n","    \"exit_execution_wait\": 60,\n","    \"close_complete_term\": 5,\n","    \"save_stacked_df\": 0,\n","    \"stacked_df_exist\": 1\n","  },\n","  \"pos_set\": {\n","    \"short_inversion\": 0,\n","    \"long_inversion\": 0,\n","    \"short_ban\": 1,\n","    \"long_ban\": 0\n","  },\n","  \"loc_set\": {\n","    \"zone\": {\n","      \"dtk_itv\": \"5m\",\n","      \"short_spread\": \"None\",\n","      \"long_spread\": \"None\",\n","      \"tr_thresh\": \"None\",\n","      \"dtk_dc_itv\": \"None\",\n","      \"dt_k\": \"None\",\n","      \"dc_period\": 135,\n","      \"ei_k\": -0.0,\n","      \"use_dtk_line\": 0,\n","      \"zone_rejection\": 1,\n","      \"gap_mply\": 1,\n","      \"c_itv_ticks\": 60,\n","      \"ad_idx\": 19,\n","      \"bbz_itv\": \"15m\",\n","      \"zone_dt_k\": 0.4,\n","      \"zone_dc_period\": 135,\n","      \"dr_error\": 0.1,\n","      \"bbwp_thresh\": 0.5,\n","      \"entry_incycle\": 5,\n","      \"max_eplim_pct\": 0.05,\n","      \"min_eplim_pct\": 0.013\n","    },\n","    \"point\": {\n","      \"exp_itv\": \"1m\",\n","      \"tpg_itv\": \"5m\",\n","      \"outg_itv\": \"5m\",\n","      \"outg_dc_period\": \"None\",\n","      \"tf_entry\": 1,\n","      \"htf_entry\": 15,\n","      \"candle_ratio\": 80,\n","      \"candle_ratio2\": \"None\",\n","      \"osc_band\": 20\n","    }\n","  },\n","  \"tr_set\": {\n","    \"ep_gap\": 0.0,\n","    \"tp_gap\": 0.0,\n","    \"out_gap\": 0.5,\n","    \"c_ep_gap\": \"None\",\n","    \"t_out_gap\": -0.0\n","  },\n","  \"ep_set\": {\n","    \"short_entry_score\": -2,\n","    \"entry_type\": \"LIMIT\",\n","    \"static_ep\": 1,\n","    \"tpout_onexec\": 0\n","  },\n","  \"tp_set\": {\n","    \"non_tp\": 0,\n","    \"tp_type\": \"MARKET\",\n","    \"static_tp\": 1,\n","    \"time_tp\": 0,\n","    \"partial_num\": 1,\n","    \"partial_qty_divider\": 1.5\n","  },\n","  \"out_set\": {\n","    \"out_type\": \"MARKET\",\n","    \"use_out\": 1,\n","    \"static_out\": 1,\n","    \"hl_out\": 1,\n","    \"price_restoration\": 0,\n","    \"retouch\": 0,\n","    \"retouch_out_period\": 500,\n","    \"second_out\": 0,\n","    \"approval_st_gap\": 1.5,\n","    \"second_out_gap\": 0.5\n","  },\n","  \"lvrg_set\": {\n","    \"leverage\": 10,\n","    \"static_lvrg\": 1,\n","    \"allow_float\": 0,\n","    \"target_pct\": 0.1,\n","    \"lvrg_rejection\": 0\n","  }\n","}\n","\n","config1 = EasyDict(param_dict)\n","# param_json = json.dumps(param_dict, indent=2)"]},{"cell_type":"markdown","source":["###### save config"],"metadata":{"id":"dzla8i9_ysmP"}},{"cell_type":"code","source":["config_name = \"config_v5_2.1220_candlejson\"\n","# config_name = \"config_v3.json\"\n","cfg_full_path = os.path.join(current_path, \"config\", config_name)\n","\n","\n","with open(cfg_full_path, 'w') as cfg:\n","    json.dump(config1, cfg, indent=2)\n","    print(\"{} dumped !\".format(cfg_full_path))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FlNGKvW_w2za","executionInfo":{"status":"ok","timestamp":1639994748940,"user_tz":-540,"elapsed":544,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"c575ce69-def0-4e6c-c949-a63707467b2e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/My Drive/Colab Notebooks/JnQ/config/config_v5_2.1220_candlejson dumped !\n"]}]},{"cell_type":"markdown","source":["###### load config"],"metadata":{"id":"vOVr2jLczFQJ"}},{"cell_type":"code","source":["config1_name = \"config_v3_1231_v7_3.json\"\n","config2_name = \"config_v5_2_1231_v7_3.json\"\n","config3_name = \"config_v7_3_1231_v7_3.json\"\n","cfg_full_path1 = os.path.join(current_path, \"config\", config1_name)\n","cfg_full_path2 = os.path.join(current_path, \"config\", config2_name)\n","cfg_full_path3 = os.path.join(current_path, \"config\", config3_name)\n","\n","with open(cfg_full_path1, 'r') as cfg:\n","    config1 = EasyDict(json.load(cfg))\n","with open(cfg_full_path2, 'r') as cfg:\n","    config2 = EasyDict(json.load(cfg))\n","with open(cfg_full_path3, 'r') as cfg:\n","    config3 = EasyDict(json.load(cfg))\n","  \n","print(config1.strat_version)\n","print(config2.strat_version)\n","print(config3.strat_version)"],"metadata":{"id":"uPpMThtZzGtZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1640944936366,"user_tz":-540,"elapsed":24,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"9d2d0a2f-9861-41bb-ef2c-869ff8fb48b0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["v3\n","v5_2\n","v7_3\n"]}]},{"cell_type":"markdown","metadata":{"id":"rrIGjmUzqU-D"},"source":["##### utils override"]},{"cell_type":"markdown","source":["###### utils_"],"metadata":{"id":"leSQlImg4_9L"}},{"cell_type":"code","source":["\n","def enlist_rtc(res_df, config):\n","\n","    strat_version = config.strat_version\n","\n","    # res_df['short_rtc_1_{}'.format(strat_version)] = res_df['bb_lower_%s' % config.loc_set.point.tpg_itv]\n","    res_df['short_rtc_1_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.point.tpg_itv]\n","    res_df['short_rtc_0_{}'.format(strat_version)] = res_df['dc_upper_%s' % config.loc_set.point.outg_itv]\n","\n","    # res_df['long_rtc_1_{}'.format(strat_version)] = res_df['bb_upper_%s' % config.loc_set.point.tpg_itv]\n","    res_df['long_rtc_1_{}'.format(strat_version)] = res_df['dc_upper_%s' % config.loc_set.point.tpg_itv]\n","    res_df['long_rtc_0_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.point.outg_itv]\n","    \n","    #      entry reversion    #\n","    if config.ep_set.short_entry_score > 0:      \n","      short_rtc_1_copy = res_df['short_rtc_1_{}'.format(strat_version)].copy()\n","      res_df['short_rtc_1_{}'.format(strat_version)] = res_df['long_rtc_1_{}'.format(strat_version)]\n","      res_df['long_rtc_1_{}'.format(strat_version)] = short_rtc_1_copy\n","\n","      short_rtc_0_copy = res_df['short_rtc_0_{}'.format(strat_version)].copy()\n","      res_df['short_rtc_0_{}'.format(strat_version)] = res_df['long_rtc_0_{}'.format(strat_version)]\n","      res_df['long_rtc_0_{}'.format(strat_version)] = short_rtc_0_copy\n","\n","    res_df['short_rtc_gap_{}'.format(strat_version)] = abs(res_df['short_rtc_0_{}'.format(strat_version)] - res_df['short_rtc_1_{}'.format(strat_version)])\n","    res_df['long_rtc_gap_{}'.format(strat_version)] = abs(res_df['long_rtc_1_{}'.format(strat_version)] - res_df['long_rtc_0_{}'.format(strat_version)])\n","\n","    res_df['h_short_rtc_1_{}'.format(strat_version)] = res_df['bb_lower_%s' % config.loc_set.point.tpg_itv]\n","    # res_df['h_short_rtc_1_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.point.tpg_itv]\n","    res_df['h_short_rtc_0_{}'.format(strat_version)] = res_df['dc_upper_%s' % config.loc_set.point.tpg_itv]\n","\n","    res_df['h_long_rtc_1_{}'.format(strat_version)] = res_df['bb_upper_%s' % config.loc_set.point.tpg_itv]\n","    # res_df['h_long_rtc_1_{}'.format(strat_version)] = res_df['dc_upper_%s' % config.loc_set.point.tpg_itv]\n","    res_df['h_long_rtc_0_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.point.tpg_itv]\n","\n","    #      entry reversion    #\n","    if config.ep_set.short_entry_score > 0:      \n","      h_short_rtc_1_copy = res_df['h_short_rtc_1_{}'.format(strat_version)].copy()\n","      res_df['h_short_rtc_1_{}'.format(strat_version)] = res_df['h_long_rtc_1_{}'.format(strat_version)]\n","      res_df['h_long_rtc_1_{}'.format(strat_version)] = h_short_rtc_1_copy\n","\n","      h_short_rtc_0_copy = res_df['h_short_rtc_0_{}'.format(strat_version)].copy()\n","      res_df['h_short_rtc_0_{}'.format(strat_version)] = res_df['h_long_rtc_0_{}'.format(strat_version)]\n","      res_df['h_long_rtc_0_{}'.format(strat_version)] = h_short_rtc_0_copy\n","\n","    res_df['h_short_rtc_gap_{}'.format(strat_version)] = abs(res_df['h_short_rtc_0_{}'.format(strat_version)] - res_df['h_short_rtc_1_{}'.format(strat_version)])\n","    res_df['h_long_rtc_gap_{}'.format(strat_version)] = abs(res_df['h_long_rtc_1_{}'.format(strat_version)] - res_df['h_long_rtc_0_{}'.format(strat_version)])   \n","\n","    res_df['short_dtk_1_{}'.format(strat_version)] = res_df['bb_lower_%s' % config.loc_set.zone.dtk_itv]\n","    res_df['short_dtk_0_{}'.format(strat_version)] = res_df['dc_upper_%s' % config.loc_set.zone.dtk_itv]\n","    res_df['short_dtk_gap_{}'.format(strat_version)] = res_df['short_dtk_0_{}'.format(strat_version)] - res_df['short_dtk_1_{}'.format(strat_version)]\n","\n","    res_df['long_dtk_1_{}'.format(strat_version)] = res_df['bb_upper_%s' % config.loc_set.zone.dtk_itv]\n","    res_df['long_dtk_0_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.zone.dtk_itv]\n","    res_df['long_dtk_gap_{}'.format(strat_version)] = res_df['long_dtk_1_{}'.format(strat_version)] - res_df['long_dtk_0_{}'.format(strat_version)]\n","\n","    return res_df\n","\n","\n","def enlist_tr(res_df, config, np_timeidx):\n","\n","    strat_version = config.strat_version\n","\n","    res_df['entry_{}'.format(strat_version)] = np.zeros(len(res_df))\n","    res_df['h_entry_{}'.format(strat_version)] = np.zeros(len(res_df))\n","\n","    # -------- set ep level -------- #\n","\n","    #       limit ver.     #\n","    # res_df['short_ep_{}'.format(strat_version)] = res_df['h_short_rtc_1_{}'.format(strat_version)] + res_df['h_short_rtc_gap_{}'.format(strat_version)] * config.tr_set.ep_gap\n","    # res_df['long_ep_{}'.format(strat_version)] = res_df['h_long_rtc_1_{}'.format(strat_version)] - res_df['h_long_rtc_gap_{}'.format(strat_version)] * config.tr_set.ep_gap\n","\n","    res_df['short_ep_{}'.format(strat_version)] = res_df['close'] #+ res_df['h_short_rtc_gap'] * config.tr_set.ep_gap\n","    res_df['long_ep_{}'.format(strat_version)] = res_df['close'] #- res_df['h_long_rtc_gap'] * config.tr_set.ep_gap\n","\n","\n","    if config.tr_set.c_ep_gap != \"None\":\n","        res_df['short_ep_org_{}'.format(strat_version)] = res_df['short_ep_{}'.format(strat_version)].copy()\n","        res_df['long_ep_org_{}'.format(strat_version)] = res_df['long_ep_{}'.format(strat_version)].copy()\n","\n","        res_df['short_ep2_{}'.format(strat_version)] = res_df['h_short_rtc_1_{}'.format(strat_version)] + res_df['h_short_rtc_gap_{}'.format(strat_version)] * config.tr_set.c_ep_gap\n","        res_df['long_ep2_{}'.format(strat_version)] = res_df['h_long_rtc_1_{}'.format(strat_version)] - res_df['h_long_rtc_gap_{}'.format(strat_version)] * config.tr_set.c_ep_gap\n","\n","    res_df['short_spread_ep_{}'.format(strat_version)] = res_df['bb_lower_5m'] #+ res_df['h_short_rtc_gap'] * config.loc_set.zone.spread_ep_gap\n","    res_df['long_spread_ep_{}'.format(strat_version)] = res_df['bb_upper_5m']  #- res_df['h_long_rtc_gap'] * config.loc_set.zone.spread_ep_gap\n","\n","    #       market ver.     #\n","    if config.ep_set.entry_type == \"MARKET\":\n","        res_df['short_ep_{}'.format(strat_version)] = res_df['close']\n","        res_df['long_ep_{}'.format(strat_version)] = res_df['close']\n","\n","    # ---------------------------------------- short = -1 ---------------------------------------- #\n","    # ---------------- ep_time  ---------------- #\n","\n","    # cci_upper = 150\n","    # cci_lower = -150\n","    cci_upper = config.loc_set.point.osc_band\n","    cci_lower = -config.loc_set.point.osc_band\n","\n","    res_df['cci_%s_shift' % config.loc_set.point.exp_itv] = res_df['cci_%s' % config.loc_set.point.exp_itv].shift(config.loc_set.point.tf_entry)\n","\n","    res_df['entry_{}'.format(strat_version)] = np.where((res_df['cci_%s_shift' % config.loc_set.point.exp_itv] >= cci_upper) &\n","                              (res_df['cci_%s' % config.loc_set.point.exp_itv] < cci_upper)\n","                              , res_df['entry_{}'.format(strat_version)] - 1, res_df['entry_{}'.format(strat_version)])\n","\n","    res_df['entry_{}'.format(strat_version)] = np.where((res_df['entry_{}'.format(strat_version)] < 0) &\n","                              (np_timeidx % config.loc_set.point.tf_entry == (config.loc_set.point.tf_entry - 1))\n","                              , res_df['entry_{}'.format(strat_version)] - 1, res_df['entry_{}'.format(strat_version)])\n","    \n","    res_df['h_entry_{}'.format(strat_version)] = np.where(  # (res_df['open'] >= res_df['bb_lower_%s' % config.loc_set.zone.dtk_itv]) &\n","        (res_df['close'].shift(config.loc_set.point.htf_entry * 1) >= res_df['bb_lower_%s' % config.loc_set.zone.dtk_itv]) &\n","        (res_df['close'] < res_df['bb_lower_%s' % config.loc_set.zone.dtk_itv]) &\n","        (np_timeidx % config.loc_set.point.htf_entry == (config.loc_set.point.htf_entry - 1))\n","        , res_df['h_entry_{}'.format(strat_version)] - 1, res_df['h_entry_{}'.format(strat_version)])\n","\n","    # ---------------------------------------- long = 1 ---------------------------------------- #\n","    # ---------------------- ep_time ---------------------- #\n","\n","    res_df['entry_{}'.format(strat_version)] = np.where((res_df['cci_%s_shift' % config.loc_set.point.exp_itv] <= cci_lower) &\n","                              (res_df['cci_%s' % config.loc_set.point.exp_itv] > cci_lower)\n","                              , res_df['entry_{}'.format(strat_version)] + 1, res_df['entry_{}'.format(strat_version)])\n","\n","    res_df['entry_{}'.format(strat_version)] = np.where((res_df['entry_{}'.format(strat_version)] > 0) &\n","                              (np_timeidx % config.loc_set.point.tf_entry == (config.loc_set.point.tf_entry - 1))\n","                              , res_df['entry_{}'.format(strat_version)] + 1, res_df['entry_{}'.format(strat_version)])\n","      \n","    res_df['h_entry_{}'.format(strat_version)] = np.where(  # (res_df['open'] <= res_df['bb_upper_%s' % config.loc_set.zone.dtk_itv]) &\n","        (res_df['close'].shift(config.loc_set.point.htf_entry * 1) <= res_df['bb_upper_%s' % config.loc_set.zone.dtk_itv]) &\n","        (res_df['close'] > res_df['bb_upper_%s' % config.loc_set.zone.dtk_itv]) &\n","        (np_timeidx % config.loc_set.point.htf_entry == (config.loc_set.point.htf_entry - 1))\n","        , res_df['h_entry_{}'.format(strat_version)] + 1, res_df['h_entry_{}'.format(strat_version)])\n","\n","    # ------------------------------ rtc tp & out ------------------------------ #\n","    # --------------- bb rtc out --------------- #\n","\n","    if config.loc_set.point.outg_dc_period != \"None\":\n","        res_df['short_rtc_0_{}'.format(strat_version)] = res_df['high'].rolling(config.loc_set.point.outg_dc_period).max()\n","        res_df['long_rtc_0_{}'.format(strat_version)] = res_df['low'].rolling(config.loc_set.point.outg_dc_period).min()\n","\n","    # res_df['short_out_{}'.format(strat_version)] = res_df['short_rtc_0_{}'.format(strat_version)] + res_df['short_rtc_gap_{}'.format(strat_version)] * config.tr_set.out_gap\n","    # res_df['long_out_{}'.format(strat_version)] = res_df['long_rtc_0_{}'.format(strat_version)] - res_df['long_rtc_gap_{}'.format(strat_version)] * config.tr_set.out_gap\n","    \n","    res_df['short_out_{}'.format(strat_version)] = res_df['short_ep_{}'.format(strat_version)] + res_df['short_rtc_gap_{}'.format(strat_version)] * config.tr_set.out_gap\n","    res_df['long_out_{}'.format(strat_version)] = res_df['long_ep_{}'.format(strat_version)] - res_df['long_rtc_gap_{}'.format(strat_version)] * config.tr_set.out_gap\n","\n","    if config.tr_set.t_out_gap != \"None\":\n","        res_df['short_out_org_{}'.format(strat_version)] = res_df['short_out_{}'.format(strat_version)].copy()\n","        res_df['long_out_org_{}'.format(strat_version)] = res_df['long_out_{}'.format(strat_version)].copy()\n","\n","        res_df['short_out2_{}'.format(strat_version)] = res_df['short_rtc_0_{}'.format(strat_version)] + res_df['short_rtc_gap_{}'.format(strat_version)] * config.tr_set.t_out_gap\n","        res_df['long_out2_{}'.format(strat_version)] = res_df['long_rtc_0_{}'.format(strat_version)] - res_df['long_rtc_gap_{}'.format(strat_version)] * config.tr_set.t_out_gap\n","\n","    # ------------------------------ tp ------------------------------ #\n","    # --------------- bb rtc tp --------------- #\n","    res_df['short_tp_{}'.format(strat_version)] = res_df['h_short_rtc_1_{}'.format(strat_version)] - res_df['h_short_rtc_gap_{}'.format(strat_version)] * config.tr_set.tp_gap\n","    res_df['long_tp_{}'.format(strat_version)] = res_df['h_long_rtc_1_{}'.format(strat_version)] + res_df['h_long_rtc_gap_{}'.format(strat_version)] * config.tr_set.tp_gap\n","\n","    # --------------- set tp_line / dtk_line --------------- #\n","    # res_df['short_tp_1_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == -1, res_df['short_rtc_1_{}'.format(strat_version)], np.nan)\n","    # res_df['short_tp_1_{}'.format(strat_version)] = ffill(res_df['short_tp_1_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","    # res_df['short_tp_gap_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == -1, res_df['h_short_rtc_gap_{}'.format(strat_version)], np.nan)  # ltf_gap ÏùÄ out ÏùÑ ÏúÑÌïú gap ÏûÑ\n","    # res_df['short_tp_gap_{}'.format(strat_version)] = ffill(res_df['short_tp_gap_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","\n","    # res_df['long_tp_1_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == 1, res_df['long_rtc_1_{}'.format(strat_version)], np.nan)\n","    # res_df['long_tp_1_{}'.format(strat_version)] = ffill(res_df['long_tp_1_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","    # res_df['long_tp_gap_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == 1, res_df['h_long_rtc_gap_{}'.format(strat_version)], np.nan)\n","    # res_df['long_tp_gap_{}'.format(strat_version)] = ffill(res_df['long_tp_gap_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","\n","    # res_df['h_short_tp_1_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == -1, res_df['h_short_rtc_1_{}'.format(strat_version)], np.nan)\n","    # res_df['h_short_tp_1_{}'.format(strat_version)] = ffill(res_df['h_short_tp_1_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","    # res_df['h_short_tp_gap_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == -1, res_df['h_short_rtc_gap_{}'.format(strat_version)], np.nan)\n","    # res_df['h_short_tp_gap_{}'.format(strat_version)] = ffill(res_df['h_short_tp_gap_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","\n","    # res_df['h_long_tp_1_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == 1, res_df['h_long_rtc_1_{}'.format(strat_version)], np.nan)\n","    # res_df['h_long_tp_1_{}'.format(strat_version)] = ffill(res_df['h_long_tp_1_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","    # res_df['h_long_tp_gap_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == 1, res_df['h_long_rtc_gap_{}'.format(strat_version)], np.nan)\n","    # res_df['h_long_tp_gap_{}'.format(strat_version)] = ffill(res_df['h_long_tp_gap_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","   \n","\n","    if config.loc_set.zone.use_dtk_line:\n","      res_df['short_dtk_1_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == -1, res_df['short_dtk_1_{}'.format(strat_version)], np.nan)\n","      res_df['short_dtk_1_{}'.format(strat_version)] = ffill(res_df['short_dtk_1_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","      res_df['short_dtk_gap_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == -1, res_df['short_dtk_gap_{}'.format(strat_version)], np.nan)\n","      res_df['short_dtk_gap_{}'.format(strat_version)] = ffill(res_df['short_dtk_gap_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","\n","      res_df['long_dtk_1_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == 1, res_df['long_dtk_1_{}'.format(strat_version)], np.nan)\n","      res_df['long_dtk_1_{}'.format(strat_version)] = ffill(res_df['long_dtk_1_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","      res_df['long_dtk_gap_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == 1, res_df['long_dtk_gap_{}'.format(strat_version)], np.nan)\n","      res_df['long_dtk_gap_{}'.format(strat_version)] = ffill(res_df['long_dtk_gap_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","\n","    res_df['dc_upper_v2_{}'.format(strat_version)] = res_df['high'].rolling(config.loc_set.zone.dc_period).max()\n","    res_df['dc_lower_v2_{}'.format(strat_version)] = res_df['low'].rolling(config.loc_set.zone.dc_period).min()\n","    \n","    res_df['zone_dc_upper_v2_{}'.format(strat_version)] = res_df['high'].rolling(config.loc_set.zone.zone_dc_period).max()\n","    res_df['zone_dc_lower_v2_{}'.format(strat_version)] = res_df['low'].rolling(config.loc_set.zone.zone_dc_period).min()\n","\n","    return res_df\n"],"metadata":{"id":"CB2yZdQ95Cdg"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["###### utils_ overide"],"metadata":{"id":"o5psPOVOCA1c"}},{"cell_type":"code","source":["enlist_rtc = utils2.enlist_rtc\n","# enlist_rtc = enlist_rtc\n","enlist_tr = utils2.enlist_tr"],"metadata":{"id":"5q1V5vTjQszK","executionInfo":{"status":"ok","timestamp":1641045521576,"user_tz":-540,"elapsed":333,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"execution_count":5,"outputs":[]},{"cell_type":"markdown","source":["###### utils_public"],"metadata":{"id":"HKdUKKl-483N"}},{"cell_type":"code","execution_count":7,"metadata":{"id":"nzOYWA2kqZ0d","executionInfo":{"status":"ok","timestamp":1641045594453,"user_tz":-540,"elapsed":2287,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"outputs":[],"source":["\n","class OrderSide:\n","    BUY = \"BUY\"\n","    SELL = \"SELL\"\n","    INVALID = None\n","\n","\n","def lvrg_set(res_df, config, open_side, ep_, out_, fee, limit_leverage=50):\n","\n","    strat_version = config.strat_version\n","\n","    if open_side == OrderSide.SELL:\n","\n","        if strat_version in [\"v3\"]:\n","            # config.lvrg_set.leverage = config.lvrg_set.target_pct / (out_ / ep_ - 1 - (fee + config.trader_set.market_fee))\n","            config.lvrg_set.leverage = config.lvrg_set.target_pct / (\n","                        out_ / ep_ - 1 - (fee + config.trader_set.market_fee))\n","\n","            #     zone Ïóê Îî∞Î•∏ c_ep_gap Î•º Í≥†Î†§ (loss ÏôÑÌôî Î∞©Ìñ•) / Ïúó Ï§ÑÏùÄ ÏàòÏùµ Í∑πÎåÄÌôî Î∞©Ìñ•\n","            # config.lvrg_set.leverage = config.lvrg_set.target_pct / (out_ / res_df['short_ep_org'].iloc[ep_j] - 1 - (fee + config.trader_set.market_fee))\n","\n","        elif strat_version in [\"v5_2\", \"v7\"]:\n","            # config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(ep_ / out_ - 1 - (fee + config.trader_set.market_fee))\n","            config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(\n","                ep_ / out_ - 1 - (fee + config.trader_set.market_fee))\n","            # config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(res_df['short_ep_org'].iloc[ep_j] / out_ - 1 - (fee + config.trader_set.market_fee))\n","\n","    else:\n","        #   Ïúó phase Îäî min_pr Ïùò Ïò§Ï∞®Í∞Ä Ïª§Ïßê\n","        if strat_version in [\"v3\"]:\n","            # config.lvrg_set.leverage = config.lvrg_set.target_pct / (ep_ / out_ - 1 - (fee + config.trader_set.market_fee))\n","            config.lvrg_set.leverage = config.lvrg_set.target_pct / (\n","                        ep_ / out_ - 1 - (fee + config.trader_set.market_fee))\n","            # config.lvrg_set.leverage = config.lvrg_set.target_pct / (res_df['long_ep_org'].iloc[ep_j] / out_ - 1 - (fee + config.trader_set.market_fee))\n","\n","        elif strat_version in [\"v5_2\", \"v7\"]:\n","            # config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(out_ / ep_ - 1 - (fee + config.trader_set.market_fee))\n","            config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(\n","                out_ / ep_ - 1 - (fee + config.trader_set.market_fee))\n","            # config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(out_ / res_df['long_ep_org'].iloc[ep_j] - 1 - (fee + config.trader_set.market_fee))\n","\n","    if not config.lvrg_set.allow_float:\n","        config.lvrg_set.leverage = int(config.lvrg_set.leverage)\n","\n","    # -------------- leverage rejection -------------- #\n","    if config.lvrg_set.leverage < 1 and config.lvrg_set.lvrg_rejection:\n","        return None\n","\n","    config.lvrg_set.leverage = max(config.lvrg_set.leverage, 1)\n","\n","    config.lvrg_set.leverage = min(limit_leverage, config.lvrg_set.leverage)\n","\n","    return config.lvrg_set.leverage\n","\n","\n","def public_indi(res_df):\n","\n","    res_df = bb_level(res_df, '5m', 1)\n","    res_df = dc_level(res_df, '5m', 1)\n","    res_df = bb_level(res_df, '15m', 1)\n","    res_df = dc_level(res_df, '15m', 1)\n","    # res_df = bb_level(res_df, '30m', 1)\n","    # res_df = dc_level(res_df, '30m', 1)\n","\n","    #     temp indi.    #\n","    # res_df[\"candle_ratio\"] = candle_ratio(res_df)\n","    # res_df[\"ma30_1m\"] = res_df['close'].rolling(30).mean()\n","    # res_df[\"ma60_1m\"] = res_df['close'].rolling(60).mean()\n","\n","    start_0 = time.time()\n","\n","    h_c_intv1 = 15\n","    h_c_intv2 = 60\n","    res_df = h_candle(res_df, h_c_intv1)\n","    res_df = h_candle(res_df, h_c_intv2)\n","    h_candle_col = ['hopen_{}'.format(h_c_intv2), 'hhigh_{}'.format(h_c_intv2), 'hlow_{}'.format(h_c_intv2), 'hclose_{}'.format(h_c_intv2)]\n","\n","    res_df['h_candle_ratio'] = candle_ratio(res_df, ohlc_col=h_candle_col, unsigned=0)\n","\n","    print(\"~ h_candle_ratio elapsed time :\", time.time() - start_0)\n","\n","    # temporary\n","    # res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line)\n","\n","    print(\"~ dtk_plot elapsed time :\", time.time() - start_0)\n","\n","    return res_df\n","\n","\n","def short_ep_loc(res_df, config, i, np_timeidx, show_detail=True):\n","\n","    strat_version = config.strat_version\n","\n","    # ------- param init ------- #\n","    open_side = None\n","\n","    mr_const_cnt = 0\n","    mr_score = 0\n","    zone = 'n'\n","\n","    if config.ep_set.entry_type == 'MARKET':\n","        if config.tp_set.tp_type != 'MARKET':\n","            tp_fee = config.trader_set.market_fee + config.trader_set.limit_fee\n","        else:\n","            tp_fee = config.trader_set.market_fee + config.trader_set.market_fee\n","        out_fee = config.trader_set.market_fee + config.trader_set.market_fee\n","    else:\n","        if config.tp_set.tp_type != 'MARKET':\n","            tp_fee = config.trader_set.limit_fee + config.trader_set.limit_fee\n","        else:\n","            tp_fee = config.trader_set.limit_fee + config.trader_set.market_fee\n","        out_fee = config.trader_set.limit_fee + config.trader_set.market_fee\n","\n","\n","    # -------------- candle_ratio -------------- #\n","    # if config.loc_set.zone.c_itv_ticks != \"None\":\n","    if config.loc_set.point.candle_ratio != \"None\":\n","\n","      # -------------- candle_ratio_v0 (1m initial tick Í∏∞Ï§ÄÏûÑ)  -------------- #\n","      # mr_const_cnt += 1\n","      # if res_df['candle_ratio'].iloc[i] >= config.loc_set.point.candle_ratio:      \n","        # mr_score += 1\n","\n","      # -------------- candle_ratio_v1 (previous)  -------------- #\n","      mr_const_cnt += 1\n","      prev_hclose_idx = i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)\n","      if res_df['h_candle_ratio'].iloc[prev_hclose_idx] <= -config.loc_set.point.candle_ratio:\n","        mr_score += 1\n","\n","    if config.loc_set.point.candle_ratio2 != \"None\":\n","\n","        #     candle_ratio_v2 (current)     #\n","      mr_const_cnt += 1\n","      prev_hclose_idx = i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)\n","      hc_res_df = res_df.iloc[prev_hclose_idx + 1:i + 1].copy()\n","      ho = hc_res_df['open'].iloc[0]\n","      hh = hc_res_df['high'].max()\n","      hl = hc_res_df['low'].min()\n","      hc = hc_res_df['close'].iloc[-1]\n","      # score = candle_score(ho, hh, hl, hc, updown='down', unsigned=False)\n","      score = candle_score(ho, hh, hl, ho, updown=None, unsigned=False)\n","      if score <= -config.loc_set.point.candle_ratio2:\n","        mr_score += 1\n","\n","    \n","    # # -------------- tr scheduling -------------- #\n","    # if config.loc_set.zone.tr_thresh != \"None\":\n","\n","    #   mr_const_cnt += 1\n","    #   tr = ((done_tp - ep_list[0] - tp_fee * ep_list[0]) / (ep_list[0] - done_out + out_fee * ep_list[0]))\n","\n","    # -------------- spread scheduling -------------- #\n","    if config.loc_set.zone.short_spread != \"None\":\n","\n","        mr_const_cnt += 1\n","\n","        spread = (res_df['bb_base_5m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] - tp_fee * res_df['bb_base_5m'].iloc[\n","            # spread = (res_df['bb_base_5m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] - out_fee * res_df['bb_base_5m'].iloc[\n","            # i]) / (res_df['bb_base_5m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] + tp_fee *\n","            i]) / (res_df['bb_base_5m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] + out_fee *\n","                  res_df['bb_base_5m'].iloc[i])\n","        # spread = (res_df['bb_base_15m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] - tp_fee * res_df['bb_base_15m'].iloc[\n","        #     i]) / (res_df['bb_base_15m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] + out_fee *\n","        #             res_df['bb_base_15m'].iloc[i])\n","\n","        # spread = (res_df['dc_upper_5m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] - tp_fee * res_df['bb_lower_5m'].iloc[\n","        #     i]) / (res_df['dc_upper_5m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] + out_fee *\n","        #             res_df['bb_lower_5m'].iloc[i])\n","        # spread = (res_df['short_rtc_gap'].iloc[i] * (0.443) - tp_fee * res_df['short_ep'].iloc[\n","        #     i]) / (res_df['short_rtc_gap'].iloc[i] * (0.417) + out_fee * res_df['short_ep'].iloc[i])\n","\n","        # spread = (res_df['dc_upper_15m'].iloc[i] - res_df['dc_lower_5m'].iloc[i] - tp_fee * res_df['dc_lower_5m'].iloc[\n","        #     i]) / (res_df['dc_upper_15m'].iloc[i] - res_df['dc_lower_5m'].iloc[i] + out_fee *\n","        #             res_df['dc_lower_5m'].iloc[i])\n","        # spread = ((res_df['dc_upper_15m'].iloc[i] - res_df['dc_lower_5m'].iloc[i])/2 - tp_fee * res_df['dc_lower_5m'].iloc[\n","        #     i]) / ((res_df['dc_upper_15m'].iloc[i] - res_df['dc_lower_5m'].iloc[i])/2 + out_fee *\n","        #             res_df['dc_lower_5m'].iloc[i])\n","\n","        if spread >= config.loc_set.zone.short_spread:\n","            mr_score += 1\n","\n","        if show_detail:\n","            print(\"spread :\", spread)\n","\n","    # -------------- dtk -------------- #\n","    if config.loc_set.zone.dt_k != \"None\":\n","\n","        mr_const_cnt += 1\n","        # if res_df['dc_lower_%s' % config.loc_set.zone.dtk_dc_itv].iloc[i] >= res_df['short_rtc_1'].iloc[i] - res_df['h_short_rtc_gap'].iloc[i] * config.loc_set.zone.dt_k:\n","        #     dtk_v1 & v2 platform     #\n","        if config.loc_set.zone.dtk_dc_itv != \"None\":\n","            dc = res_df['dc_lower_%s' % config.loc_set.zone.dtk_dc_itv].iloc[i]\n","            dt_k = res_df['short_dtk_1_{}'.format(strat_version)].iloc[i] - \\\n","                  res_df['short_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k\n","            if dc >= dt_k:\n","                mr_score += 1\n","\n","                #     dc_v2   #\n","        else:\n","            dc = res_df['dc_lower_v2_{}'.format(strat_version)].iloc[i]\n","            dt_k = res_df['short_dtk_1_{}'.format(strat_version)].iloc[i] - \\\n","                  res_df['short_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k\n","            if dc >= dt_k:\n","                # if res_df['dc_lower_v2_{}'.format(strat_version)].iloc[i] >= res_df['short_dtk_1_{}'.format(strat_version)].iloc[i] - res_df['short_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k and \\\n","                # res_df['dc_upper_v2_{}'.format(strat_version)].iloc[i] <= res_df['long_dtk_1_{}'.format(strat_version)].iloc[i] + res_df['long_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k:\n","                mr_score += 1\n","\n","        if show_detail:\n","            print(\"dc :\", dc)\n","            print(\"dt_k :\", dt_k)\n","            \n","      # -------------- candle_dt_k -------------- #\n","    # mr_const_cnt += 1\n","    # # if res_df['dc_lower_1m'].iloc[i] >= res_df['hclose_60'].iloc[i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)]:\n","    # if res_df['dc_lower_1m'].iloc[i] >= res_df['hlow_60'].iloc[i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)]:\n","    #   mr_score += 1        \n","\n","    # mr_const_cnt += 1\n","    # if res_df['dc_upper_1m'].iloc[i] <= res_df['hhigh_60'].iloc[i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)]:\n","    # # if res_df['dc_upper_1m'].iloc[i] <= res_df['hopen_60'].iloc[i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)]:\n","    #   mr_score += 1  \n","\n","\n","    # -------------- zone rejection  -------------- #\n","    if config.loc_set.zone.zone_rejection:\n","\n","        # --------- by bb --------- # \n","\n","          #     bb & close   #\n","        # mr_const_cnt += 1\n","        # # if res_df['close'].iloc[i] < res_df['bb_lower_%s' % config.loc_set.zone.bbz_itv].iloc[i]:   # org\n","        # # if res_df['close'].iloc[i] > res_df['bb_lower_%s' % config.loc_set.zone.bbz_itv].iloc[i]:  # inv\n","        # # if res_df['close'].iloc[i] > res_df['bb_upper_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_upper2_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_upper3_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","        #     mr_score += 1\n","\n","          #     bb & bb   #    \n","        mr_const_cnt += 1\n","        if res_df['bb_upper_5m'].iloc[i] < res_df['bb_base_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","        # if res_df['bb_upper_1m'].iloc[i] < res_df['bb_lower_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","            mr_score += 1\n","\n","          #     bb & ep   #\n","        mr_const_cnt += 1\n","        # if res_df['short_ep_{}'.format(strat_version)].iloc[i] < res_df['bb_base_15m'].iloc[i]:\n","        # if res_df['short_ep_{}'.format(strat_version)].iloc[i] < res_df['bb_base_15m'].iloc[i] + res_df['bb_gap_15m'].iloc[i]:\n","        # if res_df['short_ep_{}'.format(strat_version)].iloc[i] < res_df['bb_base_5m'].iloc[i]:\n","        if res_df['short_ep_{}'.format(strat_version)].iloc[i] < res_df['bb_upper_5m'].iloc[i]:\n","            mr_score += 1\n","\n","          #     bb & dc   #\n","        mr_const_cnt += 1\n","        # if res_df['bb_base_%s' % config.loc_set.zone.bbz_itv].iloc[i] <= res_df['dc_upper_1m'].iloc[i] <= res_df['bb_upper_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","        \n","        prev_hopen_idx = i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1 + config.loc_set.zone.c_itv_ticks) + config.loc_set.zone.ad_idx\n","        # if res_df['dc_upper_5m'].iloc[prev_hopen_idx] < res_df['bb_upper_15m'].iloc[i]:\n","        if res_df['dc_upper_5m'].iloc[prev_hopen_idx] < res_df['bb_upper_15m'].iloc[prev_hopen_idx]:\n","          mr_score += 1\n","\n","        # --------- by ema --------- # \n","\n","          #    bb & ema   #\n","        mr_const_cnt += 1\n","        # if res_df['bb_upper_15m'].iloc[i] < res_df['ema_5m'].iloc[i]:\n","        if res_df['dc_upper_5m'].iloc[i] < res_df['ema_5m'].iloc[i]:\n","          mr_score += 1\n","\n","        # --------- by dc --------- # \n","        \n","          #     descending dc    #\n","        # mr_const_cnt += 1\n","        # if res_df['dc_lower_5m'].iloc[i] <= res_df['dc_lower_5m'].iloc[i - 50 : i].min():\n","        #   mr_score += 1\n","\n","        # --------- by candle --------- #\n","        # mr_const_cnt += 1\n","        # if res_df['short_ep_{}'.format(strat_version)].iloc[i] <= res_df['hclose_60'].iloc[i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)]:\n","        #     mr_score += 1\n","\n","        # --------- by macd --------- #\n","        # mr_const_cnt += 1\n","        # if res_df['ma30_1m'].iloc[i] < res_df['ma60_1m'].iloc[i]:\n","        #     mr_score += 1\n","\n","        # --------- by ema --------- #\n","        # mr_const_cnt += 1\n","        # # if res_df['short_ep'].iloc[i] < res_df['ema_5m'].iloc[i]:\n","        # if res_df['close'].iloc[i] < res_df['ema_5m'].iloc[i]:\n","        #     mr_score += 1\n","\n","        # --------- by zone_dtk --------- #\n","        # mr_const_cnt += 1\n","        # if res_df['zone_dc_upper_v2_{}'.format(strat_version)].iloc[i] < res_df['long_dtk_plot_1'].iloc[i] + res_df['long_dtk_plot_gap'].iloc[\n","        #     i] * config.loc_set.zone.zone_dt_k:\n","        #   mr_score += 1\n","\n","    # -------------- zoned tr_set - post_Work -------------- #\n","    if config.tr_set.c_ep_gap != \"None\":\n","\n","        #       by bb       # \n","        # if res_df['close'].iloc[i] > res_df['bb_lower_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","\n","        #       by zone_dtk       #\n","\n","        #         c_zone        #\n","        if res_df['zone_dc_upper_v2_{}'.format(strat_version)].iloc[i] > res_df['long_dtk_plot_1'].iloc[i] + \\\n","                res_df['long_dtk_plot_gap'].iloc[\n","                    i] * config.loc_set.zone.zone_dt_k:\n","\n","            if config.ep_set.static_ep:\n","                res_df['short_ep_{}'.format(strat_version)].iloc[i] = res_df['short_ep2_{}'.format(strat_version)].iloc[\n","                    i]\n","            else:\n","                res_df['short_ep_{}'.format(strat_version)] = res_df['short_ep2_{}'.format(strat_version)]\n","\n","            if config.out_set.static_out:\n","                res_df['short_out_{}'.format(strat_version)].iloc[i] = \\\n","                res_df['short_out_org_{}'.format(strat_version)].iloc[i]\n","            else:\n","                res_df['short_out_{}'.format(strat_version)] = res_df['short_out_org_{}'.format(strat_version)]\n","\n","            zone = 'c'\n","\n","        #         t_zone        #\n","        else:\n","\n","            # mr_const_cnt += 1   # zone_rejection - temporary\n","\n","            if config.ep_set.static_ep:\n","                res_df['short_ep_{}'.format(strat_version)].iloc[i] = \\\n","                res_df['short_ep_org_{}'.format(strat_version)].iloc[i]\n","            else:\n","                res_df['short_ep_{}'.format(strat_version)] = res_df['short_ep_org_{}'.format(strat_version)]\n","\n","            if config.out_set.static_out:\n","                res_df['short_out_{}'.format(strat_version)].iloc[i] = \\\n","                res_df['short_out2_{}'.format(strat_version)].iloc[i]\n","            else:\n","                res_df['short_out_{}'.format(strat_version)] = res_df['short_out2_{}'.format(strat_version)]\n","\n","            zone = 't'\n","\n","    if mr_const_cnt == mr_score:\n","        open_side = OrderSide.SELL\n","\n","    return res_df, open_side, zone\n","\n","\n","def long_ep_loc(res_df, config, i, np_timeidx, show_detail=True):\n","\n","    strat_version = config.strat_version\n","\n","    # ------- param init ------- #\n","    open_side = None\n","\n","    mr_const_cnt = 0\n","    mr_score = 0\n","    zone = 'n'\n","\n","    if config.ep_set.entry_type == 'MARKET':\n","        if config.tp_set.tp_type != 'MARKET':\n","            tp_fee = config.trader_set.market_fee + config.trader_set.limit_fee\n","        else:\n","            tp_fee = config.trader_set.market_fee + config.trader_set.market_fee\n","        out_fee = config.trader_set.market_fee + config.trader_set.market_fee\n","    else:\n","        if config.tp_set.tp_type != 'MARKET':\n","            tp_fee = config.trader_set.limit_fee + config.trader_set.limit_fee\n","        else:\n","            tp_fee = config.trader_set.limit_fee + config.trader_set.market_fee\n","        out_fee = config.trader_set.limit_fee + config.trader_set.market_fee\n","\n","\n","    # -------------- candle_ratio -------------- #\n","    # if config.loc_set.zone.c_itv_ticks != \"None\":\n","    if config.loc_set.point.candle_ratio != \"None\":\n","\n","      # -------------- candle_ratio_v0 (1m initial tick Í∏∞Ï§ÄÏûÑ)  -------------- #\n","      # mr_const_cnt += 1\n","      # if res_df['candle_ratio'].iloc[i] >= config.loc_set.point.candle_ratio:\n","        # mr_score += 1\n","\n","      # -------------- candle_ratio_v1 (previous)  -------------- #\n","      mr_const_cnt += 1\n","      prev_hclose_idx = i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)\n","      if res_df['h_candle_ratio'].iloc[prev_hclose_idx] >= config.loc_set.point.candle_ratio:\n","        mr_score += 1\n","\n","    if config.loc_set.point.candle_ratio2 != \"None\":\n","\n","      #     candle_ratio_v2 (current)     #\n","      mr_const_cnt += 1\n","      prev_hclose_idx = i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)\n","      hc_res_df = res_df.iloc[prev_hclose_idx + 1:i + 1].copy()\n","      ho = hc_res_df['open'].iloc[0]\n","      hc = hc_res_df['close'].iloc[-1]\n","      hh = hc_res_df['high'].max()\n","      hl = hc_res_df['low'].min()\n","      # score = candle_score(ho, hh, hl, hc, updown='up', unsigned=False)\n","      score = candle_score(ho, hh, hl, ho, updown=None, unsigned=False)\n","      if score >= config.loc_set.point.candle_ratio2:\n","        mr_score += 1\n","\n","    # -------------- spread scheduling -------------- #\n","    if config.loc_set.zone.long_spread != \"None\":\n","\n","        mr_const_cnt += 1\n","\n","        # spread = (res_df['bb_upper_5m'].iloc[i] - res_df['bb_base_5m'].iloc[i] - tp_fee * res_df['bb_base_5m'].iloc[\n","        #     i]) / (res_df['bb_base_5m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] + out_fee *\n","        #             res_df['bb_base_5m'].iloc[i])\n","        # spread = (res_df['bb_upper_5m'].iloc[i] - res_df['bb_base_15m'].iloc[i] - tp_fee * res_df['bb_base_15m'].iloc[\n","        #     i]) / (res_df['bb_upper_5m'].iloc[i] - res_df['bb_base_15m'].iloc[i] + out_fee *\n","        #             res_df['bb_base_15m'].iloc[i])\n","\n","        spread = (res_df['bb_upper_5m'].iloc[i] - res_df['dc_lower_5m'].iloc[i] - tp_fee * res_df['bb_upper_5m'].iloc[\n","            # spread = (res_df['bb_upper_5m'].iloc[i] - res_df['dc_lower_5m'].iloc[i] - out_fee * res_df['bb_upper_5m'].iloc[\n","            # i]) / (res_df['bb_upper_5m'].iloc[i] - res_df['dc_lower_5m'].iloc[i] + tp_fee *\n","            i]) / (res_df['bb_upper_5m'].iloc[i] - res_df['dc_lower_5m'].iloc[i] + out_fee *\n","                  res_df['bb_upper_5m'].iloc[i])\n","        # spread = (res_df['long_rtc_gap'].iloc[i] * (0.443) - tp_fee * res_df['long_ep'].iloc[\n","        #     i]) / (res_df['long_rtc_gap'].iloc[i] * (0.417) + out_fee * res_df['long_ep'].iloc[i])\n","\n","        # spread = (res_df['dc_upper_5m'].iloc[i] - res_df['dc_lower_15m'].iloc[i] - tp_fee * res_df['dc_upper_5m'].iloc[\n","        #     i]) / (res_df['dc_upper_5m'].iloc[i] - res_df['dc_lower_15m'].iloc[i] + out_fee *\n","        #             res_df['dc_upper_5m'].iloc[i])\n","        # spread = ((res_df['dc_upper_5m'].iloc[i] - res_df['dc_lower_15m'].iloc[i])/2 - tp_fee * res_df['dc_upper_5m'].iloc[\n","        #     i]) / ((res_df['dc_upper_5m'].iloc[i] - res_df['dc_lower_15m'].iloc[i])/2 + out_fee *\n","        #             res_df['dc_upper_5m'].iloc[i])\n","\n","        if spread >= config.loc_set.zone.long_spread:\n","            mr_score += 1\n","\n","        if show_detail:\n","            print(\"spread :\", spread)\n","\n","    # -------------- dtk -------------- #\n","    if config.loc_set.zone.dt_k != \"None\":\n","\n","        mr_const_cnt += 1\n","        # if res_df['dc_upper_%s' % config.loc_set.zone.dtk_dc_itv].iloc[i] <= res_df['long_rtc_1'].iloc[i] + res_df['long_rtc_gap'].iloc[i] * config.loc_set.zone.dt_k:\n","        #     dtk_v1 & v2 platform    #\n","        if config.loc_set.zone.dtk_dc_itv != \"None\":\n","            dc = res_df['dc_upper_%s' % config.loc_set.zone.dtk_dc_itv].iloc[i]\n","            dt_k = res_df['long_dtk_1_{}'.format(strat_version)].iloc[i] + \\\n","                  res_df['long_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k\n","            if dc <= dt_k:\n","                mr_score += 1\n","\n","        else:\n","            #     dc_v2     #\n","            dc = res_df['dc_upper_v2_{}'.format(strat_version)].iloc[i]\n","            dt_k = res_df['long_dtk_1_{}'.format(strat_version)].iloc[i] + \\\n","                  res_df['long_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k\n","            if dc <= dt_k:\n","                # if res_df['dc_upper_v2_{}'.format(strat_version)].iloc[i] >= res_df['long_dtk_1_{}'.format(strat_version)].iloc[i] + res_df['long_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k:\n","\n","                # if res_df['dc_upper_v2_{}'.format(strat_version)].iloc[i] <= res_df['long_dtk_1_{}'.format(strat_version)].iloc[i] + res_df['long_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k and \\\n","                #   res_df['dc_lower_v2_{}'.format(strat_version)].iloc[i] >= res_df['short_dtk_1_{}'.format(strat_version)].iloc[i] - res_df['short_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k:\n","\n","                mr_score += 1\n","\n","        if show_detail:\n","            print(\"dc :\", dc)\n","            print(\"dt_k :\", dt_k)\n","\n","      # -------------- candle_dt_k -------------- #\n","    # mr_const_cnt += 1\n","    # # if res_df['dc_upper_1m'].iloc[i] <= res_df['hclose_60'].iloc[i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)]:\n","    # if res_df['dc_upper_1m'].iloc[i] <= res_df['hhigh_60'].iloc[i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)]:\n","    #   mr_score += 1  \n","\n","    # mr_const_cnt += 1\n","    # if res_df['dc_lower_1m'].iloc[i] >= res_df['hlow_60'].iloc[i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)]:\n","    # # if res_df['dc_lower_1m'].iloc[i] >= res_df['hopen_60'].iloc[i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)]:\n","    #   mr_score += 1  \n","\n","    # -------------- zone rejection  -------------- #\n","    if config.loc_set.zone.zone_rejection:\n","\n","        # --------- by bb --------- #    \n","        \n","          #     bb & close   #\n","        # mr_const_cnt += 1\n","        # # if res_df['close'].iloc[i] > res_df['bb_upper_%s' % config.loc_set.zone.bbz_itv].iloc[i]:    # org\n","        # # if res_df['close'].iloc[i] < res_df['bb_upper_%s' % config.loc_set.zone.bbz_itv].iloc[i]:  # inv\n","        # # if res_df['close'].iloc[i] < res_df['bb_lower_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_lower2_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_lower3_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","        #     mr_score += 1\n","\n","          #     bb & bb   #\n","        mr_const_cnt += 1\n","        if  res_df['bb_lower_5m'].iloc[i] > res_df['bb_base_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","        # if res_df['bb_lower_1m'].iloc[i] > res_df['bb_upper_%s' % config.loc_set.zone.bbz_itv].iloc[i]:            \n","            mr_score += 1        \n","\n","          #     bb & ep   #\n","        mr_const_cnt += 1\n","        # if res_df['long_ep_{}'.format(strat_version)].iloc[i] > res_df['bb_base_15m'].iloc[i]:\n","        # if res_df['long_ep_{}'.format(strat_version)].iloc[i] > res_df['bb_base_15m'].iloc[i] + res_df['bb_gap_15m'].iloc[i]:\n","        # if res_df['long_ep_{}'.format(strat_version)].iloc[i] > res_df['bb_base_5m'].iloc[i]:\n","        if res_df['long_ep_{}'.format(strat_version)].iloc[i] > res_df['bb_lower_5m'].iloc[i]:\n","            mr_score += 1\n","        \n","          #     bb & dc   #\n","        mr_const_cnt += 1\n","        # if res_df['bb_base_%s' % config.loc_set.zone.bbz_itv].iloc[i] >= res_df['dc_lower_1m'].iloc[i] >= res_df['bb_lower_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","\n","        prev_hopen_idx = i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1 + config.loc_set.zone.c_itv_ticks) + config.loc_set.zone.ad_idx\n","        # if res_df['dc_lower_5m'].iloc[prev_hopen_idx] > res_df['bb_lower_15m'].iloc[i]:\n","        if res_df['dc_lower_5m'].iloc[prev_hopen_idx] > res_df['bb_lower_15m'].iloc[prev_hopen_idx]:\n","          mr_score += 1\n","\n","        # --------- by ema --------- # \n","\n","          #     bb & ema   #\n","        mr_const_cnt += 1\n","        # if res_df['bb_lower_15m'].iloc[i] > res_df['ema_5m'].iloc[i]:\n","        if res_df['dc_lower_5m'].iloc[i] > res_df['ema_5m'].iloc[i]:\n","          mr_score += 1\n","          \n","        # --------- by dc --------- # \n","\n","          #     ascending dc    #\n","        # mr_const_cnt += 1\n","        # if res_df['dc_upper_5m'].iloc[i] >= res_df['dc_upper_5m'].iloc[i - 50 : i].max():\n","        #   mr_score += 1\n","          \n","        # --------- by candle --------- #\n","        # mr_const_cnt += 1\n","        # if res_df['long_ep_{}'.format(strat_version)].iloc[i] >= res_df['hclose_60'].iloc[i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)]:\n","        #     mr_score += 1\n","\n","        \n","        # --------- by macd --------- #\n","        # mr_const_cnt += 1\n","        # if res_df['ma30_1m'].iloc[i] > res_df['ma60_1m'].iloc[i]:\n","        #     mr_score += 1\n","\n","        # --------- by ema --------- #\n","        # mr_const_cnt += 1\n","        # # if  res_df['long_ep'].iloc[i] > res_df['ema_5m'].iloc[i]:\n","        # if res_df['close'].iloc[i] > res_df['ema_5m'].iloc[i]:\n","        #     mr_score += 1\n","\n","        # --------- by zone_dtk --------- #\n","        # mr_const_cnt += 1\n","        # if res_df['zone_dc_lower_v2_{}'.format(strat_version)].iloc[i] > res_df['short_dtk_plot_1'].iloc[i] - res_df['short_dtk_plot_gap'].iloc[i] * config.loc_set.zone.zone_dt_k:\n","        #   mr_score += 1\n","\n","    # -------------- zoned tr_set - post_work -------------- #\n","    if config.tr_set.c_ep_gap != \"None\":\n","        #       by bb       # \n","        # if res_df['close'].iloc[i] < res_df['bb_upper_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","\n","        #       by zone_dtk       #\n","\n","        #         c_zone        #\n","        if res_df['zone_dc_lower_v2_{}'.format(strat_version)].iloc[i] < res_df['short_dtk_plot_1'].iloc[i] - \\\n","                res_df['short_dtk_plot_gap'].iloc[i] * config.loc_set.zone.zone_dt_k:\n","\n","            if config.ep_set.static_ep:\n","                res_df['long_ep_{}'.format(strat_version)].iloc[i] = res_df['long_ep2_{}'.format(strat_version)].iloc[i]\n","            else:\n","                res_df['long_ep_{}'.format(strat_version)] = res_df['long_ep2_{}'.format(strat_version)]\n","\n","            if config.out_set.static_out:\n","                res_df['long_out_{}'.format(strat_version)].iloc[i] = \\\n","                res_df['long_out_org_{}'.format(strat_version)].iloc[i]\n","            else:\n","                res_df['long_out_{}'.format(strat_version)] = res_df['long_out_org_{}'.format(strat_version)]\n","\n","            zone = 'c'\n","\n","            # mr_const_cnt += 1\n","            # dc_lb_period = 100\n","            # if np.sum((res_df['dc_upper_15m'] > res_df['dc_upper_15m'].shift(15)).iloc[i - dc_lb_period:i]) == 0:\n","            #   mr_score += 1\n","\n","            #         t_zone        #\n","        else:\n","\n","            # mr_const_cnt += 1   # zone_rejection - temporary\n","\n","            if config.ep_set.static_ep:\n","                res_df['long_ep_{}'.format(strat_version)].iloc[i] = \\\n","                res_df['long_ep_org_{}'.format(strat_version)].iloc[i]\n","            else:\n","                res_df['long_ep_{}'.format(strat_version)] = res_df['long_ep_org_{}'.format(strat_version)]\n","\n","            if config.out_set.static_out:\n","                res_df['long_out_{}'.format(strat_version)].iloc[i] = res_df['long_out2_{}'.format(strat_version)].iloc[\n","                    i]\n","            else:\n","                res_df['long_out_{}'.format(strat_version)] = res_df['long_out2_{}'.format(strat_version)]\n","\n","            zone = 't'\n","\n","    if mr_const_cnt == mr_score:\n","        open_side = OrderSide.BUY\n","\n","    return res_df, open_side, zone"]},{"cell_type":"markdown","metadata":{"id":"rLI8unIyroiC"},"source":["##### run"]},{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"TdAn2bHHBWMF","outputId":"fa64fcb1-d4f1-4073-83f5-06754a415e5f","executionInfo":{"status":"ok","timestamp":1641045838194,"user_tz":-540,"elapsed":64321,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["2021-11-17 ETHUSDT.ftr loaded !\n","~ load res_df elapsed time : 0.44467639923095703\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:670: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  iloc._setitem_with_indexer(indexer, value)\n"]},{"output_type":"stream","name":"stdout","text":["~ h_candle_ratio elapsed time : 7.95762825012207\n","~ dtk_plot elapsed time : 7.958575963973999\n","load_df ~ enlist_rtc elapsed time : 11.35942029953003\n","config.loc_set.point.exp_itv : 1m\n","config.loc_set.point.tpg_itv : 5m\n","config.loc_set.point.outg_itv : 5m\n","config.loc_set.point.outg_dc_period : None\n","config.loc_set.zone.dtk_itv : 5m\n","-----------------------------------\n","config.loc_set.zone.tr_thresh : None\n","config.loc_set.zone.short_spread : None\n","config.loc_set.zone.long_spread : None\n","config.loc_set.zone.dt_k : None\n","config.loc_set.zone.ei_k : -0.0\n","config.loc_set.zone.dc_period : 135\n","config.loc_set.zone.use_dtk_line : 0\n","config.loc_set.zone.zone_rejection : 1\n","config.loc_set.zone.bbz_itv : 15m\n","config.loc_set.zone.gap_mply : 1\n","config.loc_set.zone.ad_idx : 19\n","config.loc_set.zone.zone_dt_k : 0.4\n","config.loc_set.zone.zone_dc_period : 135\n","-----------------------------------\n","config.loc_set.point.tf_entry : 1\n","config.loc_set.point.htf_entry : 15\n","config.loc_set.point.candle_ratio : 80\n","config.loc_set.point.candle_ratio2 : None\n","config.loc_set.point.osc_band : 20\n","config.tr_set.ep_gap : 0.0\n","config.tr_set.tp_gap : 0.0\n","config.tr_set.out_gap : 0.5\n","config.tr_set.c_ep_gap : None\n","config.tr_set.t_out_gap : -0.0\n","-----------------------------------\n","config.lvrg_set.leverage : 10\n","config.lvrg_set.static_lvrg : 1\n","config.lvrg_set.target_pct : 0.1\n","-----------------------------------\n","config.ep_set.entry_type : LIMIT\n","config.tp_set.tp_type : MARKET\n","config.out_set.out_type : MARKET\n","elapsed_time : 14.258243560791016\n","supblot231 passed\n","supblot232 passed\n","supblot233 passed\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1600x1200 with 6 Axes>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]}],"source":["config = config1\n","\n","multi_mode = 0\n","strat_switch = 0\n","override = 1\n","\n","if strat_switch:\n","  utils1_copy = utils1\n","  utils1 = utils2\n","  utils2 = utils1_copy\n","\n","  config1_copy = config1\n","  config1 = config2\n","  config2 = config1_copy\n","\n","# ------- tp / out fee calc ------- #\n","if config.ep_set.entry_type == 'MARKET':\n","  if config.tp_set.tp_type != 'MARKET':   # Todo : Ïã§Ï†úÎ°ú, tp_fee Í∞Ä ÏïÑÎãå spread const. Î•º ÏúÑÌïú spread_fee1 ÏûÑ (Ï∂îÌõÑ ÏàòÏ†ï Í∂åÍ≥†)\n","    tp_fee = config.trader_set.market_fee + config.trader_set.limit_fee\n","  else:\n","    tp_fee = config.trader_set.market_fee + config.trader_set.market_fee\n","  out_fee = config.trader_set.market_fee + config.trader_set.market_fee\n","else:\n","  if config.tp_set.tp_type != 'MARKET':\n","    tp_fee = config.trader_set.limit_fee + config.trader_set.limit_fee\n","  else:\n","    tp_fee = config.trader_set.limit_fee + config.trader_set.market_fee\n","  out_fee = config.trader_set.limit_fee + config.trader_set.market_fee\n","  \n","\n","# ------- inversion set ------- #\n","inversion = 0\n","fdist_thresh = 1\n","\n","title_position = (0.30, 1)\n","show_plot = 1\n","show_detail = 0\n","\n","for key in ftr_list:\n","\n","  if config.trader_set.symbol in key:\n","    pass\n","  else:\n","    continue\n","\n","  start_0 = time.time()\n","\n","  res_df = pd.read_feather(os.path.join(ftr_path, key), columns=None, use_threads=True).set_index(\"index\") #.loc[pd.to_datetime(\"2021-07-10 04:59:59.999000\"):]\n","  print(key, \"loaded !\")\n","  # break\n","\n","  print(\"~ load res_df elapsed time :\", time.time() - start_0)\n","  \n","  # print(\"res_df.columns :\", res_df.columns)  \n","  # print(res_df.tail(100))\n","  # print(\"res_df.index[0] :\", res_df.index[0])\n","  # # print(\"intmin(res_df.index[0]) :\", intmin(res_df.index[0]))\n","  # break\n","\n","  start_0 = time.time()\n","\n","  # -------------------- additional indi. -------------------- #    \n","  np_timeidx = np.array(list(map(lambda x : intmin(x), res_df.index)))  # Ïù¥Í≥≥Ïóê latency Ï°∞Í∏à ÏûàÏùå\n","\n","  if override:\n","    res_df = public_indi(res_df)\n","  else:\n","    res_df = utils_public.public_indi(res_df)\n","  \n","  if override:\n","    res_df = enlist_rtc(res_df, config1)\n","  else:\n","    res_df = utils1.enlist_rtc(res_df, config1)\n","    if multi_mode:\n","      res_df = utils2.enlist_rtc(res_df, config2)\n","\n","  print(\"load_df ~ enlist_rtc elapsed time :\", time.time() - start_0)\n","\n","  #   temp param    #\n","  allow_osc_touch = 0\n","  rsi_gap = 5\n","\n","  rsi_upper = 70\n","  rsi_lower = 30\n","\n","  early_out_tpg = 0.36\n","\n","  itv_num_list = [1, 3, 5, 15]\n","\n","  itv_list = ['15m', '30m', '1h', '4h']\n","  # itv_list = ['3m', '5m', '15m', '30m', '1h', '4h']\n","\n","  # x_val_list = np.arange(0.5, 2., 0.2)     # prcn 1\n","  x_val_list = np.arange(0.2, 0.5, 0.05)     # prcn 2\n","  # x_val_list = np.arange(-0.64, -0.7, -0.001)    # prcn 3\n","  # x_val_list = np.arange(0.944, 0.945, 0.0001)    # prcn 4\n","  # x_val_list = np.arange(0, -33, -3)   # prcn -1\n","  # x_val_list = np.arange(160, 250, 5)   # prcn -2\n","\n","  y_val_cols = [\"wr\", \"sr\", \"frq\", \"dpf\", \"acc_pr\", \"sum_pr\", \"acc_mdd\", \"sum_mdd\", \"liqd\", \"min_pr\", \"tr\", \"dr\"]\n","  y_rev_val_cols = [\"wr\", \"sr\", \"acc_pr\", \"sum_pr\", \"acc_mdd\", \"sum_mdd\", \"min_pr\"]\n","\n","  survey_df = pd.DataFrame(index=x_val_list, columns=y_val_cols)\n","  short_survey_df = pd.DataFrame(index=x_val_list, columns=y_val_cols)\n","  long_survey_df = pd.DataFrame(index=x_val_list, columns=y_val_cols)\n","  rev_survey_df = pd.DataFrame(index=x_val_list, columns=y_rev_val_cols)\n","  rev_short_survey_df = pd.DataFrame(index=x_val_list, columns=y_rev_val_cols)\n","  rev_long_survey_df = pd.DataFrame(index=x_val_list, columns=y_rev_val_cols)\n","\n","  for survey_i, just_loop in enumerate(range(1)):\n","  # for survey_i, config.loc_set.zone.tr_thresh in enumerate(x_val_list): \n","  # for survey_i, config.loc_set.zone.short_spread in enumerate(x_val_list): \n","  # for survey_i, config.loc_set.zone.long_spread in enumerate(x_val_list): \n","  # for survey_i, config.loc_set.zone.dt_k in enumerate(x_val_list):\n","  # for survey_i, config.loc_set.zone.dc_period in enumerate(x_val_list):\n","  # for survey_i, config.loc_set.zone.ei_k in enumerate(x_val_list):   \n","  # for survey_i, config.loc_set.zone.dr_error in enumerate(x_val_list): \n","  # for survey_i, config.loc_set.zone.bbz_itv in enumerate(itv_list):\n","  # for survey_i, config.loc_set.zone.gap_mply in enumerate(x_val_list):\n","  # for survey_i, config.loc_set.zone.ad_idx in enumerate(x_val_list):\n","  # for survey_i, config.loc_set.point.tf_entry in enumerate(x_val_list):\n","  # for survey_i, config.loc_set.point.candle_ratio in enumerate(x_val_list):\n","  # for survey_i, config.loc_set.point.candle_ratio2 in enumerate(x_val_list):\n","  # for survey_i, config.loc_set.point.osc_band in enumerate(x_val_list):\n","  # for survey_i, config.tr_set.ep_gap in enumerate(x_val_list): \n","  # for survey_i, config.tr_set.out_gap in enumerate(x_val_list): \n","  # for survey_i, config.tr_set.tp_gap in enumerate(x_val_list): \n","  # for survey_i, config.lvrg_set.leverage in enumerate(x_val_list):\n","  # for survey_i, config.lvrg_set.target_pct in enumerate(x_val_list):   \n","  # for survey_i, outg_dc_itv_num in enumerate(x_val_list): \n","  # for survey_i, exp_itv in enumerate(itv_list): \n","  # for survey_i, zone_dt_k in enumerate(x_val_list): \n","  # for survey_i, t_out_gap in enumerate(x_val_list): \n","  # for survey_i, zone_dc_period in enumerate(x_val_list): \n","  # for survey_i, early_out_tpg in enumerate(x_val_list): \n","  \n","    start_0 = time.time()\n","\n","    print(\"config.loc_set.point.exp_itv :\", config.loc_set.point.exp_itv)\n","    print(\"config.loc_set.point.tpg_itv :\", config.loc_set.point.tpg_itv)\n","    print(\"config.loc_set.point.outg_itv :\", config.loc_set.point.outg_itv)\n","    print(\"config.loc_set.point.outg_dc_period :\", config.loc_set.point.outg_dc_period)\n","    print(\"config.loc_set.zone.dtk_itv :\", config.loc_set.zone.dtk_itv)\n","    print(\"-----------------------------------\")    \n","    # print(\"dtk_dc_itv :\", dtk_dc_itv)    \n","    # print(\"config.loc_set.dtk_dc_itv_num :\", config.loc_set.dtk_dc_itv_num :\",)\n","    print(\"config.loc_set.zone.tr_thresh :\", config.loc_set.zone.tr_thresh)\n","    print(\"config.loc_set.zone.short_spread :\", config.loc_set.zone.short_spread)\n","    print(\"config.loc_set.zone.long_spread :\", config.loc_set.zone.long_spread)\n","    print(\"config.loc_set.zone.dt_k :\", config.loc_set.zone.dt_k)\n","    print(\"config.loc_set.zone.ei_k :\", config.loc_set.zone.ei_k)\n","    print(\"config.loc_set.zone.dc_period :\", config.loc_set.zone.dc_period)\n","    print(\"config.loc_set.zone.use_dtk_line :\", config.loc_set.zone.use_dtk_line)\n","\n","    print(\"config.loc_set.zone.zone_rejection :\", config.loc_set.zone.zone_rejection)\n","    print(\"config.loc_set.zone.bbz_itv :\", config.loc_set.zone.bbz_itv)\n","    print(\"config.loc_set.zone.gap_mply :\", config.loc_set.zone.gap_mply)\n","    print(\"config.loc_set.zone.ad_idx :\", config.loc_set.zone.ad_idx)\n","    print(\"config.loc_set.zone.zone_dt_k :\", config.loc_set.zone.zone_dt_k)\n","    print(\"config.loc_set.zone.zone_dc_period :\", config.loc_set.zone.zone_dc_period)\n","    # print(\"config.loc_set.open_shift :\", config.loc_set.open_shift)\n","    print(\"-----------------------------------\")\n","    # print(\"config.ep_set.dr_error :\", config.ep_set.dr_error)\n","    print(\"config.loc_set.point.tf_entry :\", config.loc_set.point.tf_entry)\n","    print(\"config.loc_set.point.htf_entry :\", config.loc_set.point.htf_entry)\n","    print(\"config.loc_set.point.candle_ratio :\", config.loc_set.point.candle_ratio)\n","    print(\"config.loc_set.point.candle_ratio2 :\", config.loc_set.point.candle_ratio2)\n","    print(\"config.loc_set.point.osc_band :\", config.loc_set.point.osc_band)\n","    print(\"config.tr_set.ep_gap :\", config.tr_set.ep_gap)\n","    print(\"config.tr_set.tp_gap :\", config.tr_set.tp_gap)  \n","    print(\"config.tr_set.out_gap :\", config.tr_set.out_gap)\n","    print(\"config.tr_set.c_ep_gap :\", config.tr_set.c_ep_gap)\n","    print(\"config.tr_set.t_out_gap :\", config.tr_set.t_out_gap)\n","    print(\"-----------------------------------\")\n","    print(\"config.lvrg_set.leverage :\", config.lvrg_set.leverage)\n","    print(\"config.lvrg_set.static_lvrg :\", config.lvrg_set.static_lvrg)\n","    print(\"config.lvrg_set.target_pct :\", config.lvrg_set.target_pct)\n","    print(\"-----------------------------------\")\n","    print(\"config.ep_set.entry_type :\", config.ep_set.entry_type)\n","    print(\"config.tp_set.tp_type :\", config.tp_set.tp_type)\n","    print(\"config.out_set.out_type :\", config.out_set.out_type)\n","    \n","    # print(\"early_out_tpg :\", early_out_tpg)\n","\n","    # res_df = bb_level(res_df, '15m', config.loc_set.zone.gap_mply)\n","    \n","    if override:\n","      res_df = enlist_tr(res_df, config1, np_timeidx)\n","    else:\n","      res_df = utils1.enlist_tr(res_df, config1, np_timeidx)\n","      if multi_mode:\n","        res_df = utils2.enlist_tr(res_df, config2, np_timeidx)\n","\n","\n","    #       trading : Ïó¨Í∏∞ÎèÑ Ï≤¥Í≤∞ Í≤∞Í≥ºÏóê ÎåÄÌï¥ Î¨òÏÇ¨Ìï®       #\n","    trade_list = []\n","    h_trade_list = []\n","    leverage_list = []\n","    fee_list = []\n","    short_fee_list = []\n","    long_fee_list = []\n","    open_list = []\n","    zone_list = []\n","    side_list = []\n","\n","    tp_ratio_list = []\n","    short_tp_ratio_list = []\n","    long_tp_ratio_list = []\n","\n","    dr_list = []\n","    short_dr_list = []\n","    long_dr_list = []\n","\n","    liqd_list = []\n","    short_liqd_list = []\n","    long_liqd_list = []\n","\n","    nontp_liqd_list = []\n","    nontp_short_liqd_list = []\n","    nontp_long_liqd_list = []\n","\n","    nontp_pr_list = []\n","    nontp_short_pr_list = []\n","    nontp_long_pr_list = []\n","\n","    nontp_short_indexs = []\n","    nontp_long_indexs = []\n","\n","    nontp_short_ep_list = []\n","    nontp_long_ep_list = []\n","\n","    pr_list = []\n","    long_list = []\n","    short_list = []\n","\n","    h_pr_list = []\n","    h_long_list = []\n","    h_short_list = []\n","\n","    ep_tp_list = []\n","    h_ep_tp_list = []\n","    tp_state_list = []\n","\n","    i = 0\n","    while 1:\n","    # for i in range(len(res_df)):  \n","\n","      run = 0\n","      # if res_df['entry_{}'.format(config.strat_version)][i] == config.ep_set.short_entry_score: \n","      if multi_mode:\n","        if res_df['entry_{}'.format(config1.strat_version)][i] == config1.ep_set.short_entry_score or \\\n","            res_df['entry_{}'.format(config2.strat_version)][i] == config2.ep_set.short_entry_score: \n","          run = -1\n","        elif res_df['entry_{}'.format(config1.strat_version)][i] == -config1.ep_set.short_entry_score or \\\n","          res_df['entry_{}'.format(config2.strat_version)][i] == -config2.ep_set.short_entry_score: \n","          run = 1 \n","      else:\n","        if res_df['entry_{}'.format(config1.strat_version)][i] == config1.ep_set.short_entry_score:\n","          run = -1\n","        elif res_df['entry_{}'.format(config1.strat_version)][i] == -config1.ep_set.short_entry_score:\n","          run = 1\n","\n","      if run == -1:\n","        # print(\"i in short :\", i)\n","\n","        #     Ïù¥Í≥≥ÏóêÏÑú ÏÇ¨Ïö©Îê† config Í∞Ä Ï†ïÌï¥Ïßê    #\n","        if res_df['entry_{}'.format(config1.strat_version)][i] == config1.ep_set.short_entry_score:\n","          config = config1\n","        else:\n","          config = config2  \n","\n","        strat_version = config.strat_version\n","    \n","        # ------- fee init ------- #\n","        if config.ep_set.entry_type == 'LIMIT':\n","          fee = config.trader_set.limit_fee\n","        else:\n","          fee = config.trader_set.market_fee\n","        \n","        # --------------- set partial tp --------------- #\n","        short_tps = [res_df['short_tp_{}'.format(strat_version)]]\n","        long_tps = [res_df['long_tp_{}'.format(strat_version)]]\n","\n","        # short_tps = [short_tp2, short_tp] # org\n","        # long_tps = [long_tp2, long_tp]\n","        \n","        # short_tps = [short_tp, short_tp2]\n","        # long_tps = [long_tp, long_tp2]\n","\n","        initial_i = i\n","\n","        if config.out_set.static_out:\n","          p_i = initial_i  # p_i Ïùò Ïö©ÎèÑ Î™®Î•¥Í≤†Ïùå\n","        else:\n","          p_i = i\n","\n","\n","        if override:\n","          res_df, open_side_str, zone = short_ep_loc(res_df, config, i, np_timeidx, show_detail)          \n","        else:\n","          #       config Îäî ep_loc ÏùÑ ÌÜµÌï¥ Ïû¨Ï†ïÏùò Îê† Ïàò ÏûàÏùå      #\n","          res_df, open_side_str, zone = utils_public.short_ep_loc(res_df, config, i, np_timeidx, show_detail)        \n","\n","\n","        # -------------- mr_score summation -------------- #\n","        if open_side_str is not None:          \n","          pass\n","\n","        else:\n","          i += 1\n","          if i >= len(res_df):\n","            break\n","          continue\n","\n","\n","        ep_j = initial_i\n","        out_j = initial_i\n","\n","        # -------------- limit waiting : limit_out -------------- #\n","\n","        if config.ep_set.entry_type == \"LIMIT\":\n","\n","          allow_ep_in = 0 if strat_version in [\"v5_2\"] else 1\n","          entry_done = 0\n","          entry_open = 0\n","          prev_sar = None\n","\n","          # for e_j in range(i, len(res_df)): # entry_signal Ïù¥ open Í∏∞Ï§Ä (Ìï¥Îãπ bar ÏóêÏÑú Ï≤¥Í≤∞ Í∞ÄÎä•Ìï®)\n","          if i + 1 >= len(res_df):  # i should be checked if e_j starts from i+1\n","            break\n","          for e_j in range(i + 1, len(res_df)): # entry signalÏù¥ close Í∏∞Ï§Ä Ïùº Í≤ΩÏö∞\n","        \n","            if not config.ep_set.static_ep:\n","              ep_j = e_j\n","              out_j = e_j\n","\n","            if config.tp_set.static_tp:\n","              # if config.ep_set.tpout_onexec:\n","              #   tp_j = e_j\n","              # else:\n","                tp_j = initial_i\n","            else:\n","              tp_j = e_j  \n","\n","            #             1. ep ÏÑ§Ï†ï \n","            # -------------- np.inf ep -------------- #\n","            # if short_ep.iloc[initial_i] == np.inf:\n","            #   break\n","\n","\n","            #     1. check ep_out     #\n","            if config.loc_set.zone.ei_k != \"None\":\n","\n","              # if strat_version == \"v3\":\n","              if res_df['low'].iloc[e_j] <= res_df['h_short_rtc_1_{}'.format(strat_version)].iloc[tp_j] - \\\n","                res_df['h_short_rtc_gap_{}'.format(strat_version)].iloc[tp_j] * config.loc_set.zone.ei_k:\n","                break\n","\n","              # elif strat_version == \"v5_2\":\n","              # if res_df['low'].iloc[e_j] <= res_df['short_tp_{}'.format(strat_version)].iloc[tp_j]: # ep_out : tp_done\n","              # # if np_timeidx[e_j] % config.loc_set.point.tf_entry == config.loc_set.point.tf_entry - 1:\n","              #   break\n","\n","              # elif (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[e_j - 1] >= rsi_lower) & \\\n","              #                  (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[e_j] < rsi_lower):\n","              #   break\n","\n","            # if config.loc_set.zone.c_itv_ticks != \"None\":\n","\n","            #   if np_timeidx[e_j] % config.loc_set.zone.c_itv_ticks == config.loc_set.zone.c_itv_ticks - 1:\n","            #     break\n","\n","            #     2. ep_loc.point2\n","            if strat_version == \"v5_2\" and allow_ep_in == 0:\n","              if (res_df['dc_upper_1m'].iloc[e_j - 1] <= res_df['dc_upper_15m'].iloc[e_j]) & \\\n","                  (res_df['dc_upper_15m'].iloc[e_j - 1] != res_df['dc_upper_15m'].iloc[e_j]): # & \\\n","                  # (res_df['dc_upper_15m'].iloc[e_j] <= res_df['ema_5m'].iloc[e_j]):\n","                allow_ep_in = 1\n","                out_j = e_j\n","                # ep_j = e_j\n","                # continue  # limit entry Ïùò Í≤ΩÏö∞ ep_loc.point2 ÏôÑÎ£å ÏãúÏ†ê Ïù¥ÌõÑÎ°ú ÏßÑÏûÖÏù¥ Í∞ÄÎä•Ìïú Ï†ê\n","\n","              #     2-1. ep_out (ep_loc2) by ep_loc.point\n","              # if allow_ep_in and config.loc_set.zone.tr_thresh != \"None\":\n","              #   ep_ = res_df['close'].iloc[ep_j - 1]\n","              #   tr = ((res_df['short_tp_{}'.format(strat_version)].iloc[tp_j] - ep_ - tp_fee * ep_) / (ep_ - res_df['short_out_{}'.format(strat_version)].iloc[out_j] + out_fee * ep_))\n","              #   if tr < config.loc_set.zone.tr_thresh:\n","              #     break\n","\n","            #     3. check ep_in       #\n","            if allow_ep_in and res_df['high'].iloc[e_j] >= res_df['short_ep_{}'.format(strat_version)].iloc[ep_j]:\n","              entry_done = 1\n","              # print(\"res_df['high'].iloc[e_j] :\", res_df['high'].iloc[e_j])\n","              # print(\"e_j :\", e_j)\n","\n","              #     Ïù¥ÎØ∏, e_j open Ïù¥ ep Î≥¥Îã§ ÎÜíÏùÄ Í≤ΩÏö∞, entry[ep_j] => -2 Î°ú Î≥ÄÍ≤Ω   #\n","              if res_df['open'].iloc[e_j] >= res_df['short_ep_{}'.format(strat_version)].iloc[ep_j]:\n","                entry_open = 1\n","              break\n","\n","\n","          i = e_j\n","          # print(\"i = e_j :\", i)\n","\n","          if entry_done:      \n","            pass\n","\n","          else:\n","            i += 1\n","            if i >= len(res_df):\n","              break\n","            continue\n","\n","        # ----------------- end wait ----------------- #\n","\n","        # if e_j - initial_i >= 200:\n","        #   print(\"e_j, initial_i :\", e_j, initial_i)\n","        # print(\"e_j - initial_i :\", e_j - initial_i)\n","        # print()\n","\n","        open_list.append(initial_i)\n","        zone_list.append(zone)\n","        side_list.append('s')\n","        \n","        #     e_j ÎùºÎäî Î≥ÄÏàòÎäî MARKET Ïóê ÏûàÏñ¥ÏÑú Ï†ïÏùòÎêòÏÑúÎäî ÏïàÎêòÎäî Î≥ÄÏàòÏûÑ   #\n","        if config.ep_set.entry_type == 'MARKET':\n","          # try:\n","          #   ep_list = [res_df['close'].iloc[e_j]]\n","          # except Exception as e:\n","          #   # print('error in ep_list (initial) :', e)\n","          ep_list = [res_df['close'].iloc[ep_j]]\n","\n","        else:          \n","          if not entry_open:\n","            ep_list = [res_df['short_ep_{}'.format(strat_version)].iloc[ep_j]]\n","          \n","          else:\n","            #   ep_j Îäî Ìï≠ÏÉÅ ÏûàÏùå, LIMIT Ïù∏ Í≤ΩÏö∞ e_j ÎèÑ Ìï≠ÏÉÅ Ï°¥Ïû¨Ìï® --> dynamic_ep Ïó¨Î∂ÄÏóê Îî∞Îùº ep_j = e_j Í∞Ä ÎêòÎäî Í≤ΩÏö∞Îßå Ï°¥Ïû¨Ìï† ÎøêÏûÑ \n","            #   Îî∞ÎùºÏÑú, ep_j Î°ú ÌÜµÏùº Í∞ÄÎä•Ìï® (dynamic_ep Ïù∏ Í≤ΩÏö∞, ep_j = e_j ÎêòÏñ¥ÏûàÏùå)\n","            fee = config.trader_set.market_fee\n","            ep_list = [res_df['open'].iloc[e_j]]  # --> Ï≤¥Í≤∞Ïù¥ ÎêòÎäî e_j idx Í∏∞Ï§ÄÏúºÎ°ú ÌïòÎäîÍ≤å ÎßûÏùå\n","\n","        if not config.lvrg_set.static_lvrg:\n","\n","          ep_ = ep_list[0]\n","          out_ = res_df['short_out_{}'.format(strat_version)].iloc[out_j]\n","          if override:\n","            config.lvrg_set.leverage = lvrg_set(res_df, config, \"SELL\", ep_, out_, fee)\n","          else:\n","            config.lvrg_set.leverage = utils_public.lvrg_set(res_df, config, \"SELL\", ep_, out_, fee)\n","\n","          # -------------- leverage rejection -------------- #\n","          if config.lvrg_set.leverage == None:\n","            open_list.pop()\n","            zone_list.pop()\n","            side_list.pop()\n","            i += 1\n","            if i >= len(res_df):\n","              break\n","            continue          \n","        \n","        leverage_list.append(config.lvrg_set.leverage)\n","\n","        # try:\n","        if config.ep_set.entry_type == \"MARKET\":\n","          ep_idx_list = [ep_j]  # ep_j Îäî ep_type Ïú†Í¥ÄÌïòÍ≤å Ï°¥Ïû¨ÌïòÎäî Î≥ÄÏàòÎãàÍπå try Ïóê Í±∏Ïñ¥ÎëêÎäîÍ≤å ÎßûÏùå <-- # market Ïù∏Îç∞, e_j Î≥ÄÏàòÍ∞Ä Ìï†ÎãπÎêú Í≤ΩÏö∞ Í≥†Î†§Ìï¥ÏïºÌï®\n","        else:\n","          ep_idx_list = [e_j]\n","\n","        out_idx_list = [out_j]\n","\n","        # except Exception as e:\n","        #   # print('error in ep_idx_list :', e)        \n","        #   ep_idx_list = [e_j]\n","\n","        tp_list = []\n","        tp_idx_list = []\n","\n","        partial_tp_cnt = 0\n","        hedge_cnt = 1\n","\n","        h_ep, h_tp = None, None\n","        h_i, h_j = None, None\n","        \n","        trade_done = 0\n","        cross_on = 0\n","        out = 0\n","        # config.out_set.retouch\n","\n","        #     Todo    #\n","        #      1. future_work : ÏÉÅÎã®Ïùò retouch ÏôÄ Í≤πÏπ® \n","        config.out_set.retouch = 0\n","        \n","\n","        if i == len(res_df) - 1: # if j start from i + 1 \n","          open_list.pop()       \n","          zone_list.pop()       \n","          side_list.pop()       \n","        for j in range(i + 1, len(res_df)):\n","\n","        # for j in range(i, len(res_df)):\n","\n","          if config.tp_set.static_tp:\n","            if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","              tp_j = ep_j  # tpout_onexec = using dynamic_ep --> using ep_j Ïóê ÎåÄÌïú Ïù¥Ïú†\n","            else:\n","              tp_j = initial_i\n","          else:\n","            tp_j = j\n","\n","          if config.out_set.static_out:\n","            if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","              out_j = ep_j\n","            # else:           \n","            #   out_j = initial_i   # --> referenced upper phase as initail_j / e_j (start of limit wait)\n","          else:\n","            out_j = j\n","\n","\n","          # -------------- sub ep -------------- #\n","          # if res_df['high'].iloc[j - 1] <= res_df['sar2'].iloc[j - 1] and res_df['high'].iloc[j] > res_df['sar2'].iloc[j]:\n","            \n","          #   sub_ep = res_df['sar2'].iloc[j - 1]\n","\n","          #   if sub_ep < ep_list[-1]:\n","          #     ep_list.append(sub_ep)\n","          #     ep_idx_list.append(j)\n","\n","          \n","          # -------------- hedge only once -------------- #\n","          #             ÏùºÎã®, h_quantity Îäî Ï¥àÍ∏∞ ÏßÑÏûÖÍ≥º ÎèôÏùºÌïòÍ≤å ÏÑ§Ï†ï         #\n","          # if res_df['high'].iloc[j] >= res_df['minor_ST2_Up'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] >= res_df['minor_ST2_Up'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] >= res_df['minor_ST3_Up'].iloc[j] and hedge_cnt == 1:\n","\n","          #   h_ep = res_df['close'].iloc[j]\n","          #   hedge_cnt -= 1\n","          #   h_i = j\n","\n","\n","          # -------------- ultimate limit tp -------------- #\n","          if not config.tp_set.non_tp:\n","\n","            #               1. by price line             #\n","            if config.tp_set.tp_type == 'LIMIT' or config.tp_set.tp_type == \"BOTH\":\n","\n","              for s_i, short_tp_ in enumerate(short_tps):\n","\n","                if res_df['low'].iloc[j] <= short_tp_.iloc[tp_j] and partial_tp_cnt == s_i: # we use static tp now\n","                # if res_df['low'].iloc[j] <= short_tp_.iloc[j]:\n","                # if res_df['low'].iloc[j] <= short_tp_.iloc[j] <= res_df['high'].iloc[j]: --> Ïù¥Í±¥ ÏûòÎ™ªÎêòÏóàÏùå\n","\n","                  if s_i == len(short_tps) - 1:\n","                    trade_done = 1\n","                  \n","                  partial_tp_cnt += 1\n","\n","                  #         dynamic tp        #\n","                  # if 0:\n","                  if short_tp_.iloc[j] != short_tp_.iloc[j - 1] and not config.tp_set.static_tp:\n","\n","                    #   tp limit Ïù¥ Î∂àÍ∞ÄÌïú Í≤ΩÏö∞ = open Ïù¥ Ïù¥ÎØ∏, tp Î•º ÎÑòÏùÄ Í≤ΩÏö∞ # \n","                    # if res_df['open'].iloc[j] < short_tp_.iloc[initial_i]:\n","                    if res_df['open'].iloc[j] < short_tp_.iloc[j]:\n","\n","                      # tp = short_tp_.iloc[initial_i]\n","                      tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"d-short_open {}\".format(strat_version))\n","\n","                    #   tp limit Ïù¥ Í∞ÄÎä•Ìïú Í≤ΩÏö∞ = open Ïù¥ ÏïÑÏßÅ, tp Î•º ÎÑòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ # \n","                    else:\n","\n","                      # tp = short_tp_.iloc[initial_i]\n","                      tp = short_tp_.iloc[j]\n","                      # tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"d-short_tp {}\".format(strat_version))\n","\n","                  #         static tp         #\n","                  else:\n","                    \n","                    #   tp limit Ïù¥ Î∂àÍ∞ÄÌïú Í≤ΩÏö∞ = open Ïù¥ Ïù¥ÎØ∏, tp Î•º ÎÑòÏùÄ Í≤ΩÏö∞ # \n","                    #   non_inversion Ïùò Í≤ΩÏö∞, short_tp Í∞Ä Í∞ÄÎä•Ìï®   #              \n","\n","                    # if res_df['open'].iloc[j] < short_tp_.iloc[initial_i]:\n","                    if res_df['open'].iloc[j] < short_tp_.iloc[tp_j]:\n","\n","                      # tp = short_tp_.iloc[initial_i]\n","                      tp = short_tp_.iloc[tp_j]\n","\n","                      # tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"s-short_tp {}\".format(strat_version))\n","\n","                    #   tp limit Ïù¥ Í∞ÄÎä•Ìïú Í≤ΩÏö∞ = open Ïù¥ ÏïÑÏßÅ, tp Î•º ÎÑòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ # \n","                    else:\n","\n","                      # tp = short_tp_.iloc[initial_i]\n","                      tp = short_tp_.iloc[tp_j]\n","\n","                      # tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"s-short_tp {}\".format(strat_version))   \n","\n","                  tp_list.append(tp)     \n","                  tp_idx_list.append(j)\n","                  fee += config.trader_set.limit_fee\n","\n","\n","            #           2. by signal        #\n","            if config.tp_set.tp_type == 'MARKET' or (config.tp_set.tp_type == \"BOTH\" and not trade_done):\n","\n","              market_tp = 0\n","\n","              # -------------- sar tp -------------- #\n","              # if (res_df['high'].iloc[j] >= res_df['sar2'].iloc[j]) & \\\n","              #   (res_df['high'].iloc[j - 1] < res_df['sar2'].iloc[j - 1]) & \\\n","              #   (res_df['high'].iloc[j - 2] < res_df['sar2'].iloc[j - 2]):\n","\n","              #       inversion     #\n","              # if (res_df['low'].iloc[j] <= res_df['sar2'].iloc[j]) & \\\n","              #   (res_df['low'].iloc[j - 1] > res_df['sar2'].iloc[j - 1]) & \\\n","              #   (res_df['low'].iloc[j - 2] > res_df['sar2'].iloc[j - 2]):\n","              \n","              # ----------- st short ----------- #\n","              # if res_df['close'].iloc[j] <= res_df['short_tp'].iloc[tp_j]:\n","              \n","              # -------------- sar pb tp -------------- #\n","              # if res_df['low'].iloc[j] <= res_df['short_tp'].iloc[initial_i]:\n","\n","              # -------------- st tp -------------- #\n","              # if res_df['close'].iloc[j] > res_df['middle_line'].iloc[j]:       \n","\n","              # -------------- fisher tp -------------- #            \n","              # if entry[j] == 1:\n","              \n","              # -------------- timestamp -------------- #\n","              if config.tp_set.time_tp:\n","                if np_timeidx[j] % config.loc_set.zone.c_itv_ticks == config.loc_set.zone.c_itv_ticks - 1 and \\\n","                  j - initial_i >= config.loc_set.zone.c_itv_ticks:\n","                  market_tp = 1     \n","\n","              # -------------- rsi -------------- #\n","              if (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j - 1] >= rsi_lower) & \\\n","                               (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j] < rsi_lower):   \n","              # if (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j - 1] <= rsi_lower) & \\\n","              #                  (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j] > rsi_lower):                            \n","                market_tp = 1\n","\n","              # -------------- cci -------------- #\n","              # if (res_df['cci_%s' % config.loc_set.point.exp_itv].iloc[j - 1] >= -config.loc_set.point.osc_band) & \\\n","              #                  (res_df['cci_%s' % config.loc_set.point.exp_itv].iloc[j] < -config.loc_set.point.osc_band):                            \n","              #   market_tp = 1 \n","\n","              # ---------------------------- early out ---------------------------- #\n","\n","              # #         rsi slight touch        #\n","              if allow_osc_touch:\n","                if (np.min(res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[initial_i:j]) < rsi_lower + rsi_gap) & \\\n","                  (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j] >= 50):\n","                  market_tp = 1              \n","                           \n","              #           tp early out          #\n","              # # if (np.min(res_df['low'].iloc[e_j:j]) < res_df['short_tp'].iloc[tp_j]) & \\\n","              # if (np.min(res_df['low'].iloc[e_j:j]) < res_df['h_short_rtc_1'].iloc[tp_j] - res_df['h_short_rtc_gap'].iloc[tp_j] * early_out_tpg) & \\\n","              #   (res_df['close'].iloc[j] >= res_df['short_ep'].iloc[ep_j]):\n","              #   market_tp = 1 \n","\n","              # if strat_version == \"v7\":\n","              #   if res_df['dc_upper_1m'].iloc[j] > res_df['dc_upper_5m'].iloc[j]:\n","              #     market_tp = 1\n","\n","              #         bb_upper early out        #\n","              if strat_version == \"v5_2\":\n","                if res_df['close'].iloc[j] < res_df['bb_lower_5m'].iloc[j] < res_df['close'].iloc[j - 1]:\n","                  cross_on = 1\n","\n","                if cross_on == 1 and res_df['close'].iloc[j] > res_df['bb_upper_5m'].iloc[j] > res_df['close'].iloc[j - 1]:\n","                  market_tp = 1\n","\n","              if market_tp:\n","                \n","                tp = res_df['close'].iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                trade_done = 1\n","\n","                if trade_done:\n","                  tp_state_list.append(\"short close tp\")\n","\n","                tp_list.append(tp) \n","                tp_idx_list.append(j)\n","                fee += config.trader_set.market_fee\n","\n","\n","                  \n","          # -------------- out -------------- #\n","          if not trade_done and config.out_set.use_out and j != len(res_df) - 1:\n","\n","            # -------------- macd -------------- #\n","            # if res_df['macd_hist3'].iloc[j] > 0:  #  macd out\n","            # if res_df['macd_hist3'].iloc[i] < 0 and res_df['macd_hist3'].iloc[j] > 0:\n","\n","            # -------------- st config.out_set.retouch -------------- #\n","            # out = 1 ÏÉÅÌÉúÎ©¥ ÎèôÏùº tick ÏóêÏÑú config.out_set.retouch Î•º Ï°∞ÏÇ¨Ìï† Í±∞Í∏∞ ÎïåÎ¨∏Ïóê, Î®ºÏ†Ä Í≤ÄÏÇ¨Ìï®\n","            # Í∑∏Î¶¨Í≥†, out Í∏∞Ï§ÄÏù¥ close Îùº Ïù¥Í≤å ÎßûÏùå \n","            # close Í∞Ä short_out Î≥¥Îã§ Ïò¨ÎùºÍ∞ÄÏûàÎäî ÏÉÅÌÉúÏùºÌÖåÎãà low Î•º Ï°∞ÏÇ¨ÌïòÎäîÍ≤å ÎßûÏùå           \n","            # if out and res_df['low'].iloc[j] <= short_out.iloc[out_j]:\n","            #   config.out_set.retouch = 1\n","\n","            \n","             # ------- ÏùºÏ†ïÏãúÍ∞Ñ Ïù¥ÏÉÅ, dynamic_out Ï†ÅÏö© ------ #\n","            try:\n","              if j - out_idx >= config.out_set.retouch_out_period:\n","                static_short_out = res_df['short_out_{}'.format(strat_version)].iloc[j]\n","            \n","            except Exception as e:\n","              pass\n","\n","              # ------- static out ------ #\n","            try:\n","              if out and res_df['low'].iloc[j] <= static_short_out:\n","                config.out_set.retouch = 1\n","            except Exception as e:\n","              pass\n","\n","            \n","              # ------- config.out_set.retouch out ------ #\n","            # if out and res_df['low'].iloc[j] <= short_out2.iloc[out_j]:\n","            #   config.out_set.retouch = 1\n","\n","\n","            # -------------- st -------------- #\n","            # if res_df['close'].iloc[j] > res_df['middle_line'].iloc[j]:    \n","            # if res_df['close'].iloc[j] > res_df['minor_ST3_Up'].iloc[j]:\n","            # if res_df['close'].iloc[j] > upper_middle.iloc[j]:\n","            # if res_df['close'].iloc[j] > res_df['minor_ST1_Up'].iloc[j]:\n","            if out == 0:              \n","              if config.out_set.hl_out:\n","                if res_df['high'].iloc[j] >= res_df['short_out_{}'.format(strat_version)].iloc[out_j]: # check out only once\n","                  out = 1\n","\n","              else:\n","                if res_df['close'].iloc[j] >= res_df['short_out_{}'.format(strat_version)].iloc[out_j]: # check out only once\n","                  out = 1\n","\n","              # out_idx = j\n","              # static_short_out = short_out.iloc[out_j]\n","              # if config.out_set.second_out:              \n","                # static_short_out = short_out.iloc[out_j] + res_df['st_gap'].iloc[out_j] * config.out_set.second_out_gap\n","            \n","            # if out == 0 and res_df['high'].iloc[j] >= short_out.iloc[out_j]: # check out only once\n","            #   out = 1\n","             \n","\n","            # -------------- sma -------------- #\n","            # if res_df['close'].iloc[j] > res_df[sma].iloc[j]:\n","\n","            # -------------- sar -------------- #\n","            # if res_df['close'].iloc[j] > res_df['minor_ST3_Up'].iloc[j] \\\n","            #   or res_df['sar2'].iloc[j] <= res_df['high'].iloc[j]:\n","            # if res_df['close'].iloc[j] > short_out.iloc[initial_i]: # or \\\n","            #   out = 1\n","              # res_df['sar2_uptrend'].iloc[j] == 1: # or \\\n","\n","            # if res_df['sar2_uptrend'].iloc[j] == 1:\n","\n","            #   if prev_sar is None:\n","            #     prev_sar = res_df['sar2'].iloc[j - 1]\n","              \n","            #   if res_df['close'].iloc[j] > prev_sar:\n","            #     out = 1\n","\n","            # else:\n","            #   if res_df['close'].iloc[j] > res_df['sar2'].iloc[j]:\n","            #     out = 1\n","              \n","            # -------------- hl -------------- #\n","            # if res_df['close'].iloc[j] > short_out.iloc[tp_j]:\n","            \n","            # -------------- stoch -------------- #\n","            # if res_df['stoch'].iloc[j - 2] >= res_df['stoch'].iloc[j - 1] and \\\n","            #   res_df['stoch'].iloc[j - 1] < res_df['stoch'].iloc[j] and \\\n","            #   res_df['stoch'].iloc[j - 1] <= stoch_lower:\n","            #   out = 1\n","\n","            # config.out_set.retouch 1 Í≤ΩÏö∞, config.out_set.retouch Ï°∞Í±¥ÎèÑ ÏûàÏñ¥ÏïºÌï®\n","            if out:\n","              if config.out_set.retouch:\n","                if config.out_set.retouch:\n","                  pass\n","                else:\n","                    continue\n","\n","              else:\n","                pass\n","\n","              if config.out_set.price_restoration:\n","                tp = res_df['short_out_{}'.format(strat_version)].iloc[out_j]\n","                if config.out_set.second_out:\n","                  tp = res_df['short_out2_{}'.format(strat_version)].iloc[out_j]\n","                \n","                # if res_df['close'].iloc[j] > tp: # Ïù¥ Í≤ΩÏö∞Î•º protect ÌïòÎäîÍ±¥ insane ÏûÑ\n","                #   tp = res_df['close'].iloc[j]\n","\n","              else:\n","                \n","                if res_df['open'].iloc[j] >= res_df['short_out_{}'.format(strat_version)].iloc[out_j]:\n","                  tp = res_df['open'].iloc[j]\n","                else:\n","                  if config.out_set.hl_out:\n","                    tp = res_df['short_out_{}'.format(strat_version)].iloc[out_j]\n","                  else:\n","                    tp = res_df['close'].iloc[j]\n","                \n","                # if not config.out_set.static_out:\n","                #   if res_df['open'].iloc[j] >= res_df['short_out_{}'.format(strat_version)].iloc[out_j]: # close Í∏∞Ï§ÄÏù¥Îùº Ïù¥Îü∞ Ï°∞Í±¥ÏùÑ Î™ªÏîÄ, Ï∞®ÎùºÎ¶¨ j Î•º i Î∂ÄÌÑ∞ ÏãúÏûë\n","                #     tp = res_df['open'].iloc[j]\n","                #   else:\n","                #     tp = res_df['close'].iloc[j]\n","\n","                # else:\n","                #   tp = res_df['close'].iloc[j]\n","\n","              \n","              if config.out_set.retouch: # out Í≥º open ÎπÑÍµê\n","                if config.out_set.second_out:\n","                  if res_df['open'].iloc[j] <= res_df['short_out2_{}'.format(strat_version)].iloc[out_j]:\n","                    tp = res_df['open'].iloc[j]\n","                else:\n","                  if res_df['open'].iloc[j] <= res_df['short_out_{}'.format(strat_version)].iloc[out_j]:\n","                    tp = res_df['open'].iloc[j]\n","\n","                try: # static_short_out Ïù∏ Í≤ΩÏö∞, open ÎèÑ Í≥†Î†§Ìïú tp set\n","                  if res_df['open'].iloc[j] <= static_short_out:\n","                    tp = res_df['open'].iloc[j]\n","                  else:\n","                    tp = static_short_out\n","                except Exception as e:\n","                  pass\n","\n","              trade_done = 1\n","              tp_state_list.append(\"short close_out {}\".format(strat_version))\n","            \n","\n","              tp_list.append(tp) \n","              tp_idx_list.append(j)\n","              fee += config.trader_set.market_fee\n","\n","\n","          # -------------- non tp -------------- #\n","          if j == len(res_df) - 1:\n","            trade_done = 1\n","            tp = res_df['close'].iloc[j]\n","            tp_list.append(tp) \n","            tp_idx_list.append(j)\n","            fee += config.trader_set.market_fee\n","          \n","\n","\n","          # -------------- append trade data -------------- #\n","          if trade_done:\n","\n","            # --------------- tp_ratio info --------------- #\n","            #         Todo        #\n","            #          short_out Ïóê ÎåÄÌïú Ï†ïÎ≥¥Îäî Ï°¥Ïû¨Ìï®,\n","            #          short_tp Ïóê ÎåÄÌïú Ï†ïÎ≥¥Îäî Ï°¥Ïû¨Ìï®,\n","            #       => initial_i Í∏∞Ï§ÄÏúºÎ°ú ,dynamic | static set ÏùÑ tp ÏôÄ out Ïóê Í∞ÅÍ∞Å Ï†ÅÏö©\n","            #          config.lvrg_set.leverage Îäî initial_i Í∏∞Ï§ÄÏúºÎ°ú Ï†ÅÏö©ÎêòÎãàÍπå\n","            #          Ï†ÅÏö©Îêú tp & out ÏúºÎ°ú abs((tp - ep) / (ep - out)) Í≥ÑÏÇ∞\n","            try:\n","              if config.out_set.use_out:\n","                done_tp = res_df['short_tp_{}'.format(strat_version)].iloc[tp_j]\n","                done_out = res_df['short_out_{}'.format(strat_version)].iloc[out_j]\n","\n","                if done_out <= ep_list[0]: # loss > 1\n","                  dr = np.nan\n","                  tp_ratio = np.nan\n","                else:                \n","                  dr = ((ep_list[0] - done_tp) / (done_out - ep_list[0]))\n","                  tp_ratio = ((ep_list[0] - done_tp - tp_fee * ep_list[0]) / (done_out - ep_list[0] + out_fee * ep_list[0]))\n","                \n","              else:\n","                dr = np.nan\n","                tp_ratio = np.nan  \n","\n","\n","            except Exception as e:\n","              dr = np.nan \n","              tp_ratio = np.nan  \n","            \n","            tp_ratio_list.append(tp_ratio)\n","            short_tp_ratio_list.append(tp_ratio)     \n","            dr_list.append(dr)\n","            short_dr_list.append(dr)   \n","\n","\n","            # -------------------- partial tp -------------------- #\n","            #        1. len(tp_list) Ïóê ÎåÄÏùëÌïòÎäî qty_list Î•º ÎßåÎì§Ïñ¥ÏïºÌï®    #\n","            #        2. temp_pr_list Î•º ÎßåÎì§Ïñ¥ Ï¥ùÌï© + 1 ÏùÑ pr_list Ïóê Ï†ÄÏû•      #\n","            #        2-1. temp_pr = sum((ep / tp_list[i] - fee - 1) * qty_list[i])   #\n","            #        3. temp_pr_list Ïùò Ï≤´ tp ÏóêÎäî r_qty Î•º Ìï†ÎãπÌï®        #\n","            qty_list = []\n","            temp_pr_list = []\n","            r_qty = 1\n","            for q_i in range(len(tp_list) - 1, -1, -1):\n","\n","              if len(tp_list) == 1:\n","                temp_qty = r_qty\n","              else:\n","                if q_i !=0:\n","                  temp_qty = r_qty / config.tp_set.partial_qty_divider\n","                else:\n","                  temp_qty = r_qty\n","\n","              temp_pr = (ep_list[0] / tp_list[q_i] - fee - 1) * temp_qty * config.lvrg_set.leverage\n","              # temp_pr = (ep_list[0] / tp_list[q_i] - fee - 1) * temp_qty\n","              r_qty -= temp_qty\n","\n","              temp_pr_list.append(temp_pr)\n","              qty_list.append(temp_qty)\n","\n","            # if len(temp_pr_list) == 1:\n","            #   print(\"qty_list :\", qty_list)\n","            #   print(\"temp_pr_list :\", temp_pr_list)\n","\n","            temp_pr = sum(temp_pr_list) + 1\n","\n","            # -------------------- sub ep -> pr calc -------------------- #\n","            if len(ep_list) > 1:\n","            \n","              p_ep_pr = []\n","              for sub_ep_ in ep_list:\n","                sub_pr = (sub_ep_ / tp - fee - 1) * config.lvrg_set.leverage\n","                p_ep_pr.append(sub_pr)\n","\n","              temp_pr = sum(p_ep_pr) + 1\n","\n","              print(\"temp_pr :\", temp_pr)\n","\n","            # ------------ hedge + non_hedge pr summation ------------ #\n","            #         hedge pr direction is opposite to the origin       #\n","            hedge_pr = 1\n","            if hedge_cnt == 0:\n","\n","              #       hedge tp      #\n","              h_tp = res_df['close'].iloc[j]\n","              hedge_pr = (h_tp / h_ep - fee - 1) * config.lvrg_set.leverage  # hedge long\n","              temp_pr += hedge_pr\n","              h_j = j\n","\n","            \n","            # hh = max(res_df['high'].iloc[i:j + 1])\n","            hh = max(res_df['high'].iloc[i:j])    # pos. Ï†ïÎ¶¨ÌïòÍ∏∞ Î∞îÎ°ú ÏßÅÏ†ÑÍπåÏßÄ\n","            short_liq = (ep_list[0] / hh - fee - 1) * config.lvrg_set.leverage + 1\n","\n","            if j != len(res_df) - 1:\n","\n","              # ep_tp_list.append((ep, tp_list))  \n","              ep_tp_list.append((ep_list, tp_list))  \n","              # trade_list.append([initial_i, i, j])\n","              # trade_list.append((ep_idx_list, tp_idx_list))\n","              trade_list.append((ep_idx_list, out_idx_list, tp_idx_list))\n","\n","              liqd_list.append(short_liq)\n","              short_liqd_list.append(short_liq)\n","\n","              h_ep_tp_list.append((h_ep, h_tp))      # hedge ÎèÑ ep_tp_list Ï≤òÎüº Î≥ÄÍ≤ΩÌï¥Ï£ºÏñ¥ÏïºÌïòÎäîÎç∞ ÏïÑÏßÅ ÏïàÍ±¥ÎìúÎ¶º, Îî±Ìûà ÏÇ¨Ïö©Ìï† ÏùºÏù¥ ÏóÜÏñ¥Î≥¥Ïó¨   \n","              h_trade_list.append([initial_i, h_i, h_j])                \n","\n","              pr_list.append(temp_pr)\n","              fee_list.append(fee)\n","              short_list.append(temp_pr)\n","              short_fee_list.append(fee)\n","\n","              h_pr_list.append(hedge_pr)\n","              h_short_list.append(hedge_pr)\n","\n","              i = j\n","              break\n","\n","            else:\n","\n","              # ep_tp_list.append((ep_list, tp_list))\n","              # trade_list.append((ep_idx_list, tp_idx_list))\n","              # plot_check ÎïåÎ¨∏Ïóê, pr_list ÍπåÏßÄ ÌïòÍ≤åÎêòÎ©¥ acc_pr eval Ïù¥ Íº¨Ïù¥Í≤åÎåê\n","          \n","              # pr_list Î•º ÎÑ£ÏßÄ ÏïäÏùÑÍ±∞ÎãàÍπå, open_list ÏóêÏÑú Ìï¥Îãπ idx Îäî pop\n","              open_list.pop()\n","              zone_list.pop()\n","              side_list.pop()\n","              \n","              #         tp ÎØ∏Ï≤¥Í≤∞ survey        #\n","              nontp_liqd_list.append(short_liq)\n","              nontp_short_liqd_list.append(short_liq)\n","              nontp_short_indexs.append(i)\n","              nontp_short_ep_list.append(ep_list[0])\n","\n","              nontp_short_pr = (ep_list[0] / tp - fee - 1) * config.lvrg_set.leverage + 1\n","              nontp_pr_list.append(nontp_short_pr)\n","              nontp_short_pr_list.append(nontp_short_pr)\n","\n","\n","      #                  long  phase                #\n","      # elif res_df['entry'][i] == -config.ep_set.short_entry_score:       \n","      # elif res_df['entry_{}'.format(config1.strat_version)][i] == -config1.ep_set.short_entry_score or \\\n","      #     res_df['entry_{}'.format(config2.strat_version)][i] == -config2.ep_set.short_entry_score: \n","      elif run == 1:\n","      \n","        #     Ïù¥Í≥≥ÏóêÏÑú ÏÇ¨Ïö©Îê† config Í∞Ä Ï†ïÌï¥Ïßê    #\n","        if res_df['entry_{}'.format(config1.strat_version)][i] == -config1.ep_set.short_entry_score:\n","          config = config1\n","        else:\n","          config = config2\n","\n","        strat_version = config.strat_version\n","    \n","        # ------- fee init ------- #\n","        if config.ep_set.entry_type == 'LIMIT':\n","          fee = config.trader_set.limit_fee\n","        else:\n","          fee = config.trader_set.market_fee\n","        \n","        # --------------- set partial tp --------------- #\n","        short_tps = [res_df['short_tp_{}'.format(strat_version)]]\n","        long_tps = [res_df['long_tp_{}'.format(strat_version)]]\n","\n","        # short_tps = [short_tp2, short_tp] # org\n","        # long_tps = [long_tp2, long_tp]\n","        \n","        # short_tps = [short_tp, short_tp2]\n","        # long_tps = [long_tp, long_tp2]\n","\n","        initial_i = i\n","\n","        if config.out_set.static_out:\n","          p_i = initial_i\n","        else:\n","          p_i = i\n","\n","\n","        if override:\n","          res_df, open_side_str, zone = long_ep_loc(res_df, config, i, np_timeidx, show_detail)\n","        else:          \n","          res_df, open_side_str, zone = utils_public.long_ep_loc(res_df, config, i, np_timeidx, show_detail)\n","\n","\n","        # -------------- mr_score summation -------------- #\n","        if open_side_str is not None:        \n","          pass\n","        \n","        else:\n","          i += 1\n","          if i >= len(res_df):\n","            break\n","          continue\n","\n","        # print(\"i after long_ep_loc :\", i)\n","\n","\n","        ep_j = initial_i\n","        out_j = initial_i\n","      \n","        # -------------- limit waiting const. -------------- #      \n","        if config.ep_set.entry_type == \"LIMIT\":\n","\n","          allow_ep_in = 0 if strat_version in [\"v5_2\"] else 1\n","          entry_done = 0\n","          entry_open = 0\n","          prev_sar = None\n","\n","          # for e_j in range(i, len(res_df)):   \n","\n","          if i + 1 >= len(res_df):  # i should be checked if e_j starts from i+1\n","            break\n","          for e_j in range(i + 1, len(res_df)):  # entry Í∞Ä close Í∏∞Ï§ÄÏùº Í≤ΩÏö∞ ÏÇ¨Ïö© (open Í∏∞Ï§ÄÏùº Í≤ΩÏö∞ i Î∂ÄÌÑ∞ ÏãúÏûëÌï¥ÎèÑ Î¨¥Î∞©Ìï®)\n","            \n","            if not config.ep_set.static_ep:\n","              ep_j = e_j  \n","              out_j = e_j\n","            \n","            if config.tp_set.static_tp:\n","              # if config.ep_set.tpout_onexec:\n","              #   tp_j = e_j\n","              # else:\n","                tp_j = initial_i\n","            else:\n","              tp_j = e_j  \n","\n","            \n","            #          np.inf ep         #\n","            # if long_ep.iloc[initial_i] == np.inf:\n","            #   break\n","            \n","            #     1. check ep_out     #\n","            if config.loc_set.zone.ei_k != \"None\":\n","\n","              if res_df['high'].iloc[e_j] >= res_df['h_long_rtc_1_{}'.format(strat_version)].iloc[tp_j] + \\\n","                res_df['h_long_rtc_gap_{}'.format(strat_version)].iloc[tp_j] * config.loc_set.zone.ei_k:\n","              # if res_df['high'].iloc[e_j] >= res_df['long_tp_{}'.format(strat_version)].iloc[tp_j]:                \n","              # if np_timeidx[e_j] % config.loc_set.point.tf_entry == config.loc_set.point.tf_entry - 1:\n","                break\n","\n","              # elif (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[e_j - 1] <= rsi_upper) & \\\n","              #                  (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[e_j] > rsi_upper):\n","              #   break            \n","\n","            # if config.loc_set.zone.c_itv_ticks != \"None\":\n","\n","            #   if np_timeidx[e_j] % config.loc_set.zone.c_itv_ticks == config.loc_set.zone.c_itv_ticks - 1:\n","            #     break\n","\n","            #     2. ep_loc.point2\n","            if strat_version == \"v5_2\" and allow_ep_in == 0:\n","              if (res_df['dc_lower_1m'].iloc[e_j - 1] >= res_df['dc_lower_15m'].iloc[e_j]) & \\\n","                  (res_df['dc_lower_15m'].iloc[e_j - 1] != res_df['dc_lower_15m'].iloc[e_j]): # & \\\n","                  # (res_df['dc_lower_15m'].iloc[e_j] >= res_df['ema_5m'].iloc[e_j]):\n","                allow_ep_in = 1\n","                out_j = e_j\n","                # ep_j = e_j\n","                # continue  # limit entry Ïùò Í≤ΩÏö∞ ep_loc.point2 ÏôÑÎ£å ÏãúÏ†ê Ïù¥ÌõÑÎ°ú ÏßÑÏûÖÏù¥ Í∞ÄÎä•Ìïú Ï†ê\n","                #     htf indi. Í∞Ä backi2 Í∏∞Ï§ÄÏù¥Îùº continue ÌïòÏßÄ ÏïäÏïÑÎèÑ Îê®\n","              \n","              #     2-1. ep_out (ep_loc2) by ep_loc.point\n","              # if allow_ep_in and config.loc_set.zone.tr_thresh != \"None\":\n","              #   ep_ = res_df['close'].iloc[ep_j - 1]\n","              #   tr = ((res_df['long_tp_{}'.format(strat_version)].iloc[tp_j] - ep_ - tp_fee * ep_) / (ep_ - res_df['long_out_{}'.format(strat_version)].iloc[out_j] + out_fee * ep_))\n","              #   # print(\"tr in long :\", tr)\n","              #   if tr < config.loc_set.zone.tr_thresh:\n","              #     break\n","\n","            #     3. check ep_in      #\n","            if allow_ep_in and res_df['low'].iloc[e_j] <= res_df['long_ep_{}'.format(strat_version)].iloc[ep_j]:\n","              entry_done = 1\n","              # print(\"e_j :\", e_j)\n","              \n","              #     Ïù¥ÎØ∏, e_j open Ïù¥ ep Î≥¥Îã§ ÎÇÆÏùÄ Í≤ΩÏö∞, entry[initial_i] => -2 Î°ú Î≥ÄÍ≤Ω   #\n","              if res_df['open'].iloc[e_j] <= res_df['long_ep_{}'.format(strat_version)].iloc[ep_j]:\n","                entry_open = 1\n","\n","              break\n","\n","\n","          i = e_j\n","          # print(\"i = e_j :\", i)\n","\n","          if entry_done:      \n","            pass\n","            # print(\"i, entry_done :\", i, entry_done)\n","\n","          else:\n","            i += 1\n","            if i >= len(res_df):\n","              # print(\"i :\", i)\n","              break\n","\n","            # print(\"i in continue :\", i)          \n","            continue\n","\n","\n","        # ---------------- end wait ---------------- #\n","        # if e_j - initial_i >= 200:\n","        #   print(\"e_j, initial_i :\", e_j, initial_i)\n","        \n","        # print(i)\n","\n","        open_list.append(initial_i)\n","        zone_list.append(zone)\n","        side_list.append('l')\n","\n","        if config.ep_set.entry_type == 'MARKET':\n","          ep_list = [res_df['close'].iloc[ep_j]]\n","        else:\n","          if not entry_open:\n","            ep_list = [res_df['long_ep_{}'.format(strat_version)].iloc[ep_j]]    # dynamic_ep Ïù∏ Í≤ΩÏö∞ÏóêÎèÑ e_j Í∞Ä ep_j Î°ú ÎåÄÏùëÎêòÍ∏∞ ÎïåÎ¨∏Ïóê ep_j Îßå ÏÇ¨Ïö©Ìï¥ÎèÑ Î¨¥Í¥Ä\n","          else:\n","            # try:\n","            #   ep_list = [res_df['open'].iloc[e_j]]\n","            # except Exception as e:\n","            fee = config.trader_set.market_fee\n","            ep_list = [res_df['open'].iloc[e_j]]  # --> Ï≤¥Í≤∞Ïù¥ ÎêòÎäî e_j idx Í∏∞Ï§ÄÏúºÎ°ú ÌïòÎäîÍ≤å ÎßûÏùå\n","\n","        if not config.lvrg_set.static_lvrg:\n","\n","          ep_ = ep_list[0]\n","          out_ = res_df['long_out_{}'.format(strat_version)].iloc[out_j]\n","          if override:\n","            config.lvrg_set.leverage = lvrg_set(res_df, config, \"BUY\", ep_, out_, fee)\n","          else:\n","            config.lvrg_set.leverage = utils_public.lvrg_set(res_df, config, \"BUY\", ep_, out_, fee)\n","\n","          # -------------- leverage rejection -------------- #\n","          if config.lvrg_set.leverage == None:\n","            open_list.pop()\n","            zone_list.pop()\n","            side_list.pop()\n","            i += 1\n","            if i >= len(res_df):\n","              break\n","            continue   \n","\n","        leverage_list.append(config.lvrg_set.leverage)\n","          \n","        if config.ep_set.entry_type == \"MARKET\":\n","          ep_idx_list = [ep_j]\n","        else:\n","          ep_idx_list = [e_j]\n","\n","        out_idx_list = [out_j]\n","\n","        tp_list = []\n","        tp_idx_list = []\n","\n","        partial_tp_cnt = 0\n","        hedge_cnt = 1\n","\n","        h_ep, h_tp = None, None        \n","        h_i, h_j = None, None      \n","\n","        trade_done = 0\n","        cross_on = 0\n","        out = 0          \n","        config.out_set.retouch = 0\n","\n","\n","        if i == len(res_df) - 1: # if j start from i + 1 \n","          open_list.pop()\n","          zone_list.pop()\n","          side_list.pop()\n","\n","        for j in range(i + 1, len(res_df)):\n","\n","        # for j in range(i, len(res_df)):  \n","          \n","          if config.tp_set.static_tp:\n","            if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","              tp_j = ep_j\n","            else:\n","              tp_j = initial_i\n","          else:\n","            tp_j = j\n","\n","          if config.out_set.static_out:\n","            if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","              out_j = ep_j\n","            # else:           \n","            #   out_j = initial_i\n","          else:\n","            out_j = j   \n","\n","          # -------------- hedge only once -------------- #\n","          #             ÏùºÎã®, h_quantity Îäî Ï¥àÍ∏∞ ÏßÑÏûÖÍ≥º ÎèôÏùºÌïòÍ≤å ÏÑ§Ï†ï         #\n","          # if res_df['low'].iloc[j] <= res_df['minor_ST2_Down'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] <= res_df['minor_ST2_Down'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] <= res_df['minor_ST3_Down'].iloc[j] and hedge_cnt == 1:\n","\n","          #   h_ep = res_df['close'].iloc[j]\n","          #   hedge_cnt -= 1\n","          #   h_i = j\n","\n","          # -------------- sub ep -------------- #\n","          # if res_df['low'].iloc[j - 1] >= res_df['sar2'].iloc[j - 1] and res_df['low'].iloc[j] < res_df['sar2'].iloc[j]:\n","            \n","          #   sub_ep = res_df['sar2'].iloc[j - 1]\n","\n","          #   if sub_ep > ep_list[-1]:\n","          #     ep_list.append(sub_ep)\n","          #     ep_idx_list.append(j)\n","\n","\n","          # -------------- ultimate tp -------------- #\n","          if not config.tp_set.non_tp:\n","            #            1. by level          #\n","            if config.tp_set.tp_type == \"LIMIT\" or config.tp_set.tp_type == \"BOTH\":\n","              \n","\n","              for l_i, long_tp_ in enumerate(long_tps):\n","\n","                if res_df['high'].iloc[j] >= long_tp_.iloc[tp_j] and partial_tp_cnt == l_i:\n","                # if res_df['high'].iloc[j] >= long_tp.iloc[j]:\n","\n","                  if l_i == len(long_tps) - 1:\n","                    trade_done = 1\n","\n","                  partial_tp_cnt += 1\n","\n","                  #         dynamic tp        #\n","                  # if 0:\n","                  if long_tp_.iloc[j] != long_tp_.iloc[j - 1] and not config.tp_set.static_tp:\n","\n","                    #   tp limit Ïù¥ Î∂àÍ∞ÄÌïú Í≤ΩÏö∞ = open Ïù¥ Ïù¥ÎØ∏, tp Î•º ÎÑòÏùÄ Í≤ΩÏö∞ # \n","                    # if res_df['open'].iloc[j] >= long_tp_.iloc[initial_i]:\n","                    if res_df['open'].iloc[j] >= long_tp_.iloc[j]:\n","\n","                      # tp = long_tp_.iloc[initial_i]\n","                      tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"d-long_open {}\".format(strat_version))\n","\n","                    \n","                    #   tp limit Ïù¥ Í∞ÄÎä•Ìïú Í≤ΩÏö∞ = open Ïù¥ ÏïÑÏßÅ, tp Î•º ÎÑòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ # \n","                    else:\n","                      \n","                      # tp = long_tp_.iloc[initial_i]\n","                      tp = long_tp_.iloc[j]\n","                      # tp = res_df['open'].iloc[j]\n","                      \n","                      if trade_done:\n","                        tp_state_list.append(\"d-long_tp {}\".format(strat_version))\n","\n","                  #         static tp         #\n","                  else:\n","\n","                    #   tp limit Ïù¥ Î∂àÍ∞ÄÌïú Í≤ΩÏö∞ = open Ïù¥ Ïù¥ÎØ∏, tp Î•º ÎÑòÏùÄ Í≤ΩÏö∞ # \n","                    #   non_inversion Ïùò Í≤ΩÏö∞, short_tp Í∞Ä Í∞ÄÎä•Ìï®   #\n","\n","                    if res_df['open'].iloc[j] >= long_tp_.iloc[tp_j]:\n","                    # if res_df['open'].iloc[j] >= long_tp_.iloc[initial_i]:\n","\n","                      # tp = long_tp_.iloc[initial_i]\n","                      tp = long_tp_.iloc[tp_j]\n","\n","                      # tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"s-long_tp {}\".format(strat_version))\n","\n","                    \n","                    #   tp limit Ïù¥ Í∞ÄÎä•Ìïú Í≤ΩÏö∞ = open Ïù¥ ÏïÑÏßÅ, tp Î•º ÎÑòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ # \n","                    else:\n","                      \n","                      # tp = long_tp_.iloc[initial_i]\n","                      tp = long_tp_.iloc[tp_j]\n","\n","                      # tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"s-long_tp {}\".format(strat_version))         \n","                  \n","                  tp_list.append(tp)\n","                  tp_idx_list.append(j)\n","                  fee += config.trader_set.limit_fee\n","\n","            #           2. by time        #\n","            if config.tp_set.tp_type == 'MARKET' or (config.tp_set.tp_type == \"BOTH\" and not trade_done):\n","\n","              market_tp = 0\n","\n","              # -------------- sar tp -------------- #\n","              # if (res_df['low'].iloc[j] <= res_df['sar2'].iloc[j]) & \\\n","              #   (res_df['low'].iloc[j - 1] > res_df['sar2'].iloc[j - 1]) & \\\n","              #   (res_df['low'].iloc[j - 2] > res_df['sar2'].iloc[j - 2]):\n","              \n","              #       inversion     #\n","              # if (res_df['high'].iloc[j] >= res_df['sar2'].iloc[j]) & \\\n","              #   (res_df['high'].iloc[j - 1] < res_df['sar2'].iloc[j - 1]) & \\\n","              #   (res_df['high'].iloc[j - 2] < res_df['sar2'].iloc[j - 2]):\n","\n","\n","              # ----------- st long ----------- #\n","              # if res_df['close'].iloc[j] >= res_df['long_tp'].iloc[tp_j]:\n","\n","              # -------------- sar pb tp -------------- #\n","              # if res_df['high'].iloc[j] >= res_df['long_tp'].iloc[initial_i]:\n","\n","              # -------------- st tp -------------- #\n","              # if res_df['close'].iloc[j] < res_df['middle_line'].iloc[j]:\n","\n","              # -------------- fisher tp -------------- #\n","              # if entry[j] == -1:\n","              \n","              # -------------- timestamp -------------- #\n","              if config.tp_set.time_tp:\n","                if np_timeidx[j] % config.loc_set.zone.c_itv_ticks == config.loc_set.zone.c_itv_ticks - 1 and \\\n","                  j - initial_i >= config.loc_set.zone.c_itv_ticks:\n","                  market_tp = 1\n","\n","              # -------------- rsi -------------- #\n","              if (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j - 1] <= rsi_upper) & \\\n","                               (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j] > rsi_upper):\n","              # if (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j - 1] >= rsi_upper) & \\\n","              #                  (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j] < rsi_upper):\n","                market_tp = 1\n","\n","               # -------------- cci -------------- #\n","              # if (res_df['cci_%s' % config.loc_set.point.exp_itv].iloc[j - 1] <= config.loc_set.point.osc_band) & \\\n","              #                  (res_df['cci_%s' % config.loc_set.point.exp_itv].iloc[j] > config.loc_set.point.osc_band):\n","              #   market_tp = 1\n","\n","              # ---------------------------- early out phase ---------------------------- #\n","\n","              #        osc slight touch     #\n","              if allow_osc_touch:\n","                if (np.max(res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[initial_i:j]) > rsi_upper - rsi_gap) & \\\n","                  (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j] <= 50):\n","                  market_tp = 1\n","\n","              #         tp early out        #\n","              # # if (np.max(res_df['high'].iloc[e_j:j]) > res_df['long_tp'].iloc[tp_j]) & \\\n","              # if (np.max(res_df['high'].iloc[e_j:j]) > res_df['h_long_rtc_1'].iloc[tp_j] + res_df['h_long_rtc_gap'].iloc[tp_j] * early_out_tpg) & \\\n","              #   (res_df['close'].iloc[j] <= res_df['long_ep'].iloc[ep_j]):\n","              #   market_tp = 1 \n","\n","              # if strat_version == \"v7\":\n","              #   if res_df['dc_lower_1m'].iloc[j] < res_df['dc_lower_5m'].iloc[j]:\n","              #     market_tp = 1\n","\n","\n","              #         bb_upper early out        #\n","              if strat_version == \"v5_2\":\n","                if res_df['close'].iloc[j] > res_df['bb_upper_5m'].iloc[j] > res_df['close'].iloc[j - 1]:\n","                  cross_on = 1\n","\n","                if cross_on == 1 and res_df['close'].iloc[j] < res_df['bb_lower_5m'].iloc[j] < res_df['close'].iloc[j - 1]:\n","                  market_tp = 1\n","                              \n","              if market_tp:\n","\n","                tp = res_df['close'].iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                trade_done = 1\n","\n","                if trade_done:\n","                  tp_state_list.append(\"long close tp {}\".format(strat_version))\n","                  # print(\"early_out passed !\")\n","\n","                tp_list.append(tp) \n","                tp_idx_list.append(j)\n","                fee += config.trader_set.market_fee\n","\n","\n","\n","          # -------------- out -------------- #\n","          if not trade_done and config.out_set.use_out and j != len(res_df) - 1:              \n","\n","            # -------------- macd -------------- #\n","            # if res_df['macd_hist3'].iloc[j] < 0:\n","            # # if res_df['macd_hist3'].iloc[i] > 0 and res_df['macd_hist3'].iloc[j] < 0:\n","\n","            # -------------- st config.out_set.retouch -------------- #\n","            # out = 1 ÏÉÅÌÉúÎ©¥ ÎèôÏùº tick ÏóêÏÑú config.out_set.retouch Î•º Ï°∞ÏÇ¨Ìï† Í±∞Í∏∞ ÎïåÎ¨∏Ïóê, Î®ºÏ†Ä Í≤ÄÏÇ¨Ìï®\n","            # Í∑∏Î¶¨Í≥†, out Í∏∞Ï§ÄÏù¥ close Îùº Ïù¥Í≤å ÎßûÏùå \n","            # close Í∞Ä long_out Î≥¥Îã§ ÎÇ¥Î†§Í∞ÄÏûàÎäî ÏÉÅÌÉúÏùºÌÖåÎãà high Î•º Ï°∞ÏÇ¨ÌïòÎäîÍ≤å ÎßûÏùå           \n","            # if out and res_df['high'].iloc[j] >= long_out.iloc[out_j]:\n","            #   config.out_set.retouch = 1\n","\n","            \n","            # ------- ÏùºÏ†ïÏãúÍ∞Ñ Ïù¥ÏÉÅ, dynamic_out Ï†ÅÏö© ------ #\n","            try:\n","              if j - out_idx >= config.out_set.retouch_out_period:\n","                static_long_out = res_df['long_out_{}'.format(strat_version)].iloc[j]\n","            \n","            except Exception as e:\n","              pass\n","\n","              # ------- static out ------ #\n","            try:\n","              if out and res_df['high'].iloc[j] >= static_long_out:\n","                config.out_set.retouch = 1\n","            except Exception as e:\n","              pass\n","\n","              # ------- config.out_set.retouch out ------ #\n","            # if out and res_df['high'].iloc[j] >= long_out2.iloc[out_j]:\n","            #   config.out_set.retouch = 1\n","\n","\n","\n","            # -------------- st -------------- #\n","            # if res_df['close'].iloc[j] < res_df['middle_line'].iloc[j]:\n","            # if res_df['close'].iloc[j] < res_df['minor_ST3_Down'].iloc[j]:\n","            # if res_df['close'].iloc[j] < lower_middle.iloc[j]:\n","            # if res_df['close'].iloc[j] < res_df['minor_ST1_Down'].iloc[j]:\n","            if out == 0:\n","              if config.out_set.hl_out:\n","                if res_df['low'].iloc[j] <= res_df['long_out_{}'.format(strat_version)].iloc[out_j]: # check out only once\n","                  out = 1\n","\n","              else:\n","                if res_df['close'].iloc[j] <= res_df['long_out_{}'.format(strat_version)].iloc[out_j]: # check out only once\n","                  out = 1\n","\n","              # out_idx = j\n","              # static_long_out = long_out.iloc[out_j]\n","              # if config.out_set.second_out:\n","              # static_long_out = long_out.iloc[out_j] - res_df['st_gap'].iloc[out_j] * config.out_set.second_out_gap\n","\n","            # if out == 0 and res_df['low'].iloc[j] <= long_out.iloc[out_j]: # check out only once\n","            #   out = 1            \n","            \n","\n","\n","            # -------------- sma -------------- #\n","            # if res_df['close'].iloc[j] < res_df[sma].iloc[j]:\n","\n","            # -------------- sar -------------- #\n","            # if res_df['close'].iloc[j] < res_df['minor_ST3_Down'].iloc[j] \\\n","            #   or res_df['sar2'].iloc[j] >= res_df['low'].iloc[j]:\n","            # if res_df['close'].iloc[j] < long_out.iloc[initial_i]: # or \\\n","            #   #  res_df['close'].iloc[j] < res_df['sar2'].iloc[j]:\n","            #   #  res_df['sar2_uptrend'].iloc[j] == 0 or \\\n","            #   out = 1\n","            \n","            # if res_df['sar2_uptrend'].iloc[j] == 0:\n","\n","            #     if prev_sar is None:\n","            #       prev_sar = res_df['sar2'].iloc[j - 1]\n","                \n","            #     if res_df['close'].iloc[j] < prev_sar:\n","            #       out = 1\n","\n","            # else:\n","            #   if res_df['close'].iloc[j] < res_df['sar2'].iloc[j]:\n","            #     out = 1\n","\n","            # -------------- hl -------------- #\n","            # if res_df['close'].iloc[j] < long_out.iloc[tp_j]:\n","\n","            # -------------- stoch -------------- #\n","            # if res_df['stoch'].iloc[j - 2] <= res_df['stoch'].iloc[j - 1] and \\\n","            #   res_df['stoch'].iloc[j - 1] > res_df['stoch'].iloc[j] and \\\n","            #   res_df['stoch'].iloc[j - 1] >= stoch_upper:\n","            #   out = 1\n","\n","            # config.out_set.retouch 1 Í≤ΩÏö∞, config.out_set.retouch Ï°∞Í±¥ÎèÑ ÏûàÏñ¥ÏïºÌï®\n","            if out:\n","              if config.out_set.retouch:\n","                if config.out_set.retouch:\n","                  pass\n","                else:\n","                    continue\n","\n","              else:\n","                pass\n","\n","              if config.out_set.price_restoration:\n","                tp = res_df['long_out_{}'.format(strat_version)].iloc[out_j]\n","                if config.out_set.second_out:\n","                  tp = res_df['long_out2_{}'.format(strat_version)].iloc[out_j]\n","\n","                # if res_df['close'].iloc[j] < tp: # Ïù¥ Í≤ΩÏö∞Î•º protect ÌïòÎäîÍ±¥ insane ÏûÑ\n","                # # if res_df['high'].iloc[j] < tp: # --> config.out_set.hl_out ÏÇ¨Ïö©Ïãú Ïù¥ Ï°∞Í±¥ÏùÄ valid Ìï®\n","                #   tp = res_df['close'].iloc[j]\n","\n","              else:\n","\n","                if res_df['open'].iloc[j] <= res_df['long_out_{}'.format(strat_version)].iloc[out_j]:\n","                  tp = res_df['open'].iloc[j]\n","                else:\n","                  if config.out_set.hl_out:\n","                    tp = res_df['long_out_{}'.format(strat_version)].iloc[out_j]\n","                  else:\n","                    tp = res_df['close'].iloc[j]\n","\n","                # if not config.out_set.static_out:\n","                #   if res_df['open'].iloc[j] <= res_df['long_out'].iloc[out_j]: # dynamic close out Ïùò open Í≥†Î†§\n","                #     tp = res_df['open'].iloc[j]\n","                #   else:\n","                #     tp = res_df['close'].iloc[j]\n","\n","                # else:\n","                #   tp = res_df['close'].iloc[j]\n","\n","              if config.out_set.retouch: # out Í≥º open ÎπÑÍµê\n","                if config.out_set.second_out:  # long_out = sell\n","                # config.out_set.second_out ÏùÄ Í∏∞Î≥∏Ï†ÅÏúºÎ°ú limit Ïù¥Îùº Ïù¥ Íµ¨Ï°∞Í∞Ä Í∞ÄÎä•Ìï®\n","                  if res_df['open'].iloc[j] >= res_df['long_out2_{}'.format(strat_version)].iloc[out_j]: # dynamic_out Ïùº Í≤ΩÏö∞ Í≥†Î†§Ìï¥ÏïºÌï®\n","                    tp = res_df['open'].iloc[j]\n","                else:\n","                  if res_df['open'].iloc[j] >= res_df['long_out_{}'.format(strat_version)].iloc[out_j]: # dynamic_out Ïùº Í≤ΩÏö∞ Í≥†Î†§Ìï¥ÏïºÌï®\n","                    tp = res_df['open'].iloc[j]\n","\n","                try:\n","                  if res_df['open'].iloc[j] >= static_long_out:\n","                    tp = res_df['open'].iloc[j]\n","                  else:\n","                    tp = static_long_out\n","                except Exception as e:\n","                  pass\n","\n","              # tp = res_df['open'].iloc[j]\n","              tp_state_list.append(\"long close_out {}\".format(strat_version))\n","              trade_done = 1\n","\n","              tp_list.append(tp)\n","              tp_idx_list.append(j)\n","              fee += config.trader_set.market_fee\n","\n","          \n","          # -------------- non tp -------------- #\n","          if j == len(res_df) - 1:\n","            trade_done = 1\n","            tp = res_df['close'].iloc[j]\n","            tp_list.append(tp) \n","            tp_idx_list.append(j)\n","            fee += config.trader_set.market_fee\n","\n","\n","          if trade_done:\n","\n","            # --------------- tp_ratio info --------------- #\n","            try:\n","              if config.out_set.use_out:\n","                done_tp = res_df['long_tp_{}'.format(strat_version)].iloc[tp_j]\n","                done_out = res_df['long_out_{}'.format(strat_version)].iloc[out_j]\n","\n","                if done_out >= ep_list[0]: # loss >= 1\n","                  tp_ratio = np.nan\n","                  dr = np.nan\n","                  # print(\"loss >= 1\")\n","                else:\n","                  tp_ratio = ((done_tp - ep_list[0] - tp_fee * ep_list[0]) / (ep_list[0] - done_out + out_fee * ep_list[0]))                \n","                  dr = ((done_tp - ep_list[0]) / (ep_list[0] - done_out))          \n","\n","              else:      \n","                dr = np.nan\n","                tp_ratio = np.nan\n","\n","            except Exception as e:\n","              print(\"error in tr phase :\", e)\n","              dr = np.nan              \n","              tp_ratio = np.nan\n","            \n","            tp_ratio_list.append(tp_ratio)\n","            long_tp_ratio_list.append(tp_ratio)\n","            dr_list.append(dr)\n","            long_dr_list.append(dr)\n","\n","\n","            qty_list = []\n","            temp_pr_list = []\n","            r_qty = 1\n","            for q_i in range(len(tp_list) - 1, -1, -1):\n","\n","              if len(tp_list) == 1:\n","                temp_qty = r_qty\n","              else:\n","                if q_i !=0:\n","                  temp_qty = r_qty / config.tp_set.partial_qty_divider\n","                else:\n","                  temp_qty = r_qty\n","\n","              # temp_pr = (tp_list[q_i] / ep_list[0] - fee - 1) * temp_qty\n","              temp_pr = (tp_list[q_i] / ep_list[0] - fee - 1) * temp_qty * config.lvrg_set.leverage\n","              r_qty -= temp_qty\n","\n","              temp_pr_list.append(temp_pr)\n","\n","            temp_pr = sum(temp_pr_list) + 1\n","\n","            # -------------------- sub ep -> pr calc -------------------- #\n","            if len(ep_list) > 1:\n","            \n","              p_ep_pr = []\n","              for sub_ep_ in ep_list:\n","                sub_pr = (tp / sub_ep_ - fee - 1) * config.lvrg_set.leverage\n","                p_ep_pr.append(sub_pr)\n","\n","              temp_pr = sum(p_ep_pr) + 1\n","\n","              print(\"temp_pr :\", temp_pr)\n","\n","            # ------------ hedge + non_hedge pr summation ------------ #\n","            #         hedge pr direction is opposite to the origin       #\n","            hedge_pr = 1\n","            if hedge_cnt == 0:\n","\n","              #       hedge tp      #\n","              h_tp = res_df['close'].iloc[j]\n","              hedge_pr = (h_ep / h_tp - fee - 1) * config.lvrg_set.leverage  # hedge short\n","              temp_pr += hedge_pr\n","              h_j = j\n","\n","\n","            # ll = min(res_df['low'].iloc[i:j + 1])\n","            ll = min(res_df['low'].iloc[i:j])   # pos. Ï†ïÎ¶¨ÌïòÍ∏∞ Î∞îÎ°ú ÏßÅÏ†ÑÍπåÏßÄ\n","            long_liq = (ll / ep_list[0] - fee - 1) * config.lvrg_set.leverage + 1\n","\n","            if j != len(res_df) - 1:\n","\n","              ep_tp_list.append((ep_list, tp_list))\n","              # trade_list.append((ep_idx_list, tp_idx_list))\n","              trade_list.append((ep_idx_list, out_idx_list, tp_idx_list))\n","\n","              liqd_list.append(long_liq)\n","              long_liqd_list.append(long_liq)\n","\n","              h_ep_tp_list.append((h_ep, h_tp))        \n","              h_trade_list.append([initial_i, h_i, h_j])                \n","\n","              pr_list.append(temp_pr)\n","              fee_list.append(fee)\n","              long_list.append(temp_pr)\n","              long_fee_list.append(fee)\n","\n","              h_pr_list.append(hedge_pr)\n","              h_long_list.append(hedge_pr)                    \n","\n","              i = j\n","              break\n","            \n","            else:\n","\n","              # ep_tp_list.append((ep_list, tp_list))\n","              # trade_list.append((ep_idx_list, tp_idx_list))\n","              \n","              # pr_list Î•º ÎÑ£ÏßÄ ÏïäÏùÑÍ±∞ÎãàÍπå, open_list ÏóêÏÑú Ìï¥Îãπ idx Îäî pop\n","              open_list.pop()\n","              zone_list.pop()\n","              side_list.pop()\n","          \n","              #         tp ÎØ∏Ï≤¥Í≤∞ survey        #\n","              nontp_liqd_list.append(long_liq)\n","              nontp_long_liqd_list.append(long_liq)\n","              nontp_long_indexs.append(i)\n","              nontp_long_ep_list.append(ep_list[0])\n","              \n","              nontp_long_pr = (tp / ep_list[0] - fee - 1) * config.lvrg_set.leverage + 1\n","              nontp_pr_list.append(nontp_long_pr)\n","              nontp_long_pr_list.append(nontp_long_pr)\n","\n","            if len(open_list) > len(trade_list):\n","              print('debug from index :', i)\n","              print(len(open_list), len(trade_list))\n","              print(\"len(res_df) :\", len(res_df))\n","              assert len(open_list) == len(trade_list), 'stopped'\n","      \n","      i += 1  # if entry starts with prev trade's close, do not use it ! \n","      # print(\"i in end :\", i)\n","      if i >= len(res_df):\n","        break\n","\n","\n","\n","    # -------------------- result analysis -------------------- #\n","    # try:\n","    print(\"elapsed_time :\", time.time() - start_0)\n","\n","    plt.style.use('default')\n","    # mpl.rcParams.update(mpl.rcParamsDefault)\n","\n","    plt.figure(figsize=(16, 12))\n","    # plt.figure(figsize=(12, 8))\n","    # plt.figure(figsize=(10, 6))\n","    plt.suptitle(key)\n","\n","    try:\n","      np_pr = np.array(pr_list)\n","\n","      sr = sharpe_ratio(np_pr)\n","\n","      dpf = (len(res_df) / 1440) / len(np_pr)\n","\n","      np_zone_list = np.array(zone_list)\n","      # np_pr_list = np.array(pr_list)\n","      np_side_list = np.array(side_list)\n","\n","      t_w = np.sum(np.where((np_zone_list == 't') & (np_pr > 1), 1, 0))\n","      c_w = np.sum(np.where((np_zone_list == 'c') & (np_pr > 1), 1, 0))\n","      t_ls = np.sum(np.where((np_zone_list == 't') & (np_pr < 1), 1, 0))\n","      c_ls = np.sum(np.where((np_zone_list == 'c') & (np_pr < 1), 1, 0))\n","\n","      # np_pr = (np.array(pr_list) - 1) * config.lvrg_set.leverage + 1\n","\n","      # ----- fake_pr ----- #\n","      # np_pr = np.where(np_pr > 1, 1 + (np_pr - 1) * 3, np_pr)\n","\n","      total_pr = np.cumprod(np_pr)\n","\n","      for_sum_pr = np_pr - 1\n","      for_sum_pr[0] = 1\n","      sum_pr = np.cumsum(for_sum_pr)\n","      sum_pr = np.where(sum_pr < 0, 0, sum_pr)\n","\n","      wr = len(np_pr[np_pr > 1]) / len(np_pr[np_pr != 1])\n","      \n","      total_rollmax_pr = np.maximum.accumulate(total_pr)\n","      total_acc_mdd = np.max((total_rollmax_pr - total_pr) / total_rollmax_pr)\n","      total_rollmax_sumpr = np.maximum.accumulate(sum_pr)\n","      total_sum_mdd = np.max((total_rollmax_sumpr - sum_pr) / total_rollmax_sumpr)\n","\n","      np_tp_ratio_list = np.array(tp_ratio_list) # Ï¥àÍ∏∞Ïóê tr ÏùÑ Ï†ïÌïòÎäîÍ±∞Îùº mean ÏÇ¨Ïö©ÌïòÎäîÍ≤å ÎßûÏùå\n","      mean_tr = np.mean(np_tp_ratio_list[np.isnan(np_tp_ratio_list) == 0])\n","\n","      np_dr_list = np.array(dr_list) # Ï¥àÍ∏∞Ïóê tr ÏùÑ Ï†ïÌïòÎäîÍ±∞Îùº mean ÏÇ¨Ïö©ÌïòÎäîÍ≤å ÎßûÏùå\n","      mean_dr = np.mean(np_dr_list[np.isnan(np_dr_list) == 0])\n","\n","      # pr_gap = (np_pr - 1) / config.lvrg_set.leverage + fee\n","      # tp_gap_ = pr_gap[pr_gap > 0]\n","      # # mean_config.tr_set.tp_gap = np.mean(pr_gap[pr_gap > 0])\n","      # mean_ls_gap = np.mean(pr_gap[pr_gap < 0])\n","\n","      # ---- profit fee ratio ---- #\n","      # mean_pgfr = np.mean((tp_gap_ - fee) / abs(tp_gap_ + fee))\n","\n","      # plt.subplot(121)\n","      plt.subplot(231)\n","      plt.plot(total_pr)\n","      plt.plot(sum_pr, color='gold')\n","      if len(nontp_liqd_list) != 0:\n","        plt.title(\"wr : %.3f\\n len(td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (wr, len(np_pr[np_pr != 1]), dpf, np.min(np_pr), total_pr[-1], sum_pr[-1], sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (total_acc_mdd, total_sum_mdd, config.lvrg_set.leverage, min(liqd_list), mean_tr, mean_dr)  + \\\n","                  \"\\n nontp_liqd_cnt : %s\\nnontp_liqd : %.3f\\nontp_liqd_pr : %.3f\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_liqd_list), min(nontp_liqd_list), min(nontp_pr_list), t_w, c_w, t_ls, c_ls) ,\n","                  position=title_position)\n","      else:\n","        plt.title(\"wr : %.3f\\n len(td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\" \n","                  % (wr, len(np_pr[np_pr != 1]), dpf, np.min(np_pr), total_pr[-1], sum_pr[-1], sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (total_acc_mdd, total_sum_mdd, config.lvrg_set.leverage, min(liqd_list), mean_tr, mean_dr)  + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_liqd_list), t_w, c_w, t_ls, c_ls) ,\n","                  position=title_position)\n","                  # \"\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\\n nontp_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  # % (config.lvrg_set.leverage, min(liqd_list), mean_tr, mean_dr, len(nontp_liqd_list), t_w, c_w, t_ls, c_ls), \n","                  # position=title_position)\n","      # plt.show()\n","\n","      survey_df.iloc[survey_i] = wr, sr, len(np_pr[np_pr != 1]), dpf, \\\n","        total_pr[-1], sum_pr[-1], total_acc_mdd, total_sum_mdd, min(liqd_list), np.min(np_pr), mean_tr, mean_dr\n","\n","      print('supblot231 passed')\n","\n","    except Exception as e:\n","      print(\"error in 231 :\", e)\n","\n","\n","    try:\n","      #         short only      #\n","      short_np_pr = np.array(short_list)\n","\n","      short_sr = sharpe_ratio(short_np_pr)\n","\n","      short_dpf = (len(res_df) / 1440) / len(short_np_pr)\n","\n","      short_total_pr = np.cumprod(short_np_pr)\n","      \n","      short_for_sum_pr = short_np_pr - 1\n","      short_for_sum_pr[0] = 1\n","      short_sum_pr = np.cumsum(short_for_sum_pr)\n","      short_sum_pr = np.where(short_sum_pr < 0, 0, short_sum_pr)\n","\n","      short_wr = len(short_np_pr[short_np_pr > 1]) / len(short_np_pr[short_np_pr != 1])\n","      \n","      t_w_s = np.sum(np.where((np_zone_list == 't') & (np_pr > 1) & (np_side_list == 's'), 1, 0))\n","      c_w_s = np.sum(np.where((np_zone_list == 'c') & (np_pr > 1) & (np_side_list == 's'), 1, 0))\n","      t_ls_s = np.sum(np.where((np_zone_list == 't') & (np_pr < 1) & (np_side_list == 's'), 1, 0))\n","      c_ls_s = np.sum(np.where((np_zone_list == 'c') & (np_pr < 1) & (np_side_list == 's'), 1, 0))\n","\n","      short_rollmax_pr = np.maximum.accumulate(short_total_pr)\n","      short_acc_mdd = np.max((short_rollmax_pr - short_total_pr) / short_rollmax_pr)\n","      short_rollmax_sumpr = np.maximum.accumulate(short_sum_pr)\n","      short_sum_mdd = np.max((short_rollmax_sumpr - short_sum_pr) / short_rollmax_sumpr)\n","\n","      np_short_tp_ratio_list = np.array(short_tp_ratio_list)\n","      mean_short_tr = np.mean(np_short_tp_ratio_list[np.isnan(np_short_tp_ratio_list) == 0])\n","      \n","      np_short_dr_list = np.array(short_dr_list)\n","      mean_short_dr = np.mean(np_short_dr_list[np.isnan(np_short_dr_list) == 0])\n","      \n","      # short_pr_gap = (short_np_pr - 1) / config.lvrg_set.leverage + fee\n","      # short_tp_gap = short_pr_gap[short_pr_gap > 0]\n","      # # mean_short_tp_gap = np.mean(short_pr_gap[short_pr_gap > 0])\n","      # # mean_short_ls_gap = np.mean(short_pr_gap[short_pr_gap < 0])\n","\n","      # mean_short_pgfr = np.mean((short_tp_gap - fee) / abs(short_tp_gap + fee))\n","      \n","      plt.subplot(232)\n","      plt.plot(short_total_pr)\n","      plt.plot(short_sum_pr, color='gold')\n","      if len(nontp_short_liqd_list) != 0:   \n","\n","        max_nontp_short_term = len(res_df) - nontp_short_indexs[0]\n","        \n","        plt.title(\"wr : %.3f\\nlen(short_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (short_wr, len(short_np_pr[short_np_pr != 1]), short_dpf, np.min(short_np_pr), short_total_pr[-1], short_sum_pr[-1], short_sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (short_acc_mdd, short_sum_mdd, config.lvrg_set.leverage, min(short_liqd_list), mean_short_tr, mean_short_dr) + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n nontp_liqd : %.3f\\n nontp_liqd_pr : %.3f\\n max_nontp_term : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_short_liqd_list), min(nontp_short_liqd_list), min(nontp_short_pr_list), max_nontp_short_term, t_w_s, c_w_s, t_ls_s, c_ls_s) ,\n","                  position=title_position)\n","                  # \"\\n leverage %s\\nliqd : %.3f\\nmean_tr : %.3f\\n mean_dr : %.3f\\n nontp_short_liqd_cnt : %s\\nnontp_short_liqd : %.3f\\nontp_short_liqd_pr : %.3f\\nmax_nontp_short_term : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  # % (config.lvrg_set.leverage, min(short_liqd_list), mean_short_tr, mean_short_dr, \n","                  #    len(nontp_short_liqd_list), min(nontp_short_liqd_list), min(nontp_short_pr_list), max_nontp_short_term, t_w_s, c_w_s, t_ls_s, c_ls_s),\n","                  # position=title_position)\n","      else:\n","        plt.title(\"wr : %.3f\\nlen(short_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (short_wr, len(short_np_pr[short_np_pr != 1]), short_dpf, np.min(short_np_pr), short_total_pr[-1], short_sum_pr[-1], short_sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (short_acc_mdd, short_sum_mdd, config.lvrg_set.leverage, min(short_liqd_list), mean_short_tr, mean_short_dr) + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_short_liqd_list), t_w_s, c_w_s, t_ls_s, c_ls_s),\n","                  position=title_position)\n","   \n","      short_survey_df.iloc[survey_i] = short_wr, short_sr, len(short_np_pr[short_np_pr != 1]), short_dpf, \\\n","        short_total_pr[-1], short_sum_pr[-1], short_acc_mdd, short_sum_mdd, min(short_liqd_list), np.min(short_np_pr), mean_short_tr, mean_short_dr\n","        \n","      print('supblot232 passed')\n","    \n","    except Exception as e:\n","      print(\"error in 232 :\", e)\n","\n","    try:\n","      #         long only      #\n","      long_np_pr = np.array(long_list)\n","      # long_np_pr = (np.array(long_list) - 1) * config.lvrg_set.leverage + 1\n","\n","      long_sr = sharpe_ratio(long_np_pr)\n","\n","      long_dpf = (len(res_df) / 1440) / len(long_np_pr)\n","\n","      long_total_pr = np.cumprod(long_np_pr)\n","      \n","      long_for_sum_pr = long_np_pr - 1\n","      long_for_sum_pr[0] = 1\n","      long_sum_pr = np.cumsum(long_for_sum_pr)\n","      long_sum_pr = np.where(long_sum_pr < 0, 0, long_sum_pr)\n","\n","      long_wr = len(long_np_pr[long_np_pr > 1]) / len(long_np_pr[long_np_pr != 1])\n","\n","      t_w_l = np.sum(np.where((np_zone_list == 't') & (np_pr > 1) & (np_side_list == 'l'), 1, 0))\n","      c_w_l = np.sum(np.where((np_zone_list == 'c') & (np_pr > 1) & (np_side_list == 'l'), 1, 0))\n","      t_ls_l = np.sum(np.where((np_zone_list == 't') & (np_pr < 1) & (np_side_list == 'l'), 1, 0))\n","      c_ls_l = np.sum(np.where((np_zone_list == 'c') & (np_pr < 1) & (np_side_list == 'l'), 1, 0))\n","\n","      long_rollmax_pr = np.maximum.accumulate(long_total_pr)\n","      long_acc_mdd = np.max((long_rollmax_pr - long_total_pr) / long_rollmax_pr)\n","      long_rollmax_sumpr = np.maximum.accumulate(long_sum_pr)\n","      long_sum_mdd = np.max((long_rollmax_sumpr - long_sum_pr) / long_rollmax_sumpr)\n","\n","      np_long_tp_ratio_list = np.array(long_tp_ratio_list)\n","      mean_long_tr = np.mean(np_long_tp_ratio_list[np.isnan(np_long_tp_ratio_list) == 0])\n","      \n","      np_long_dr_list = np.array(long_dr_list)\n","      mean_long_dr = np.mean(np_long_dr_list[np.isnan(np_long_dr_list) == 0])\n","\n","      # long_pr_gap = (long_np_pr - 1) / config.lvrg_set.leverage + fee\n","      # long_tp_gap = long_pr_gap[long_pr_gap > 0]\n","      # # mean_long_tp_gap = np.mean(long_pr_gap[long_pr_gap > 0])\n","      # # mean_long_ls_gap = np.mean(long_pr_gap[long_pr_gap < 0])\n","\n","      # mean_long_pgfr = np.mean((long_tp_gap - fee) / abs(long_tp_gap + fee))\n","\n","      plt.subplot(233)\n","      plt.plot(long_total_pr)\n","      plt.plot(long_sum_pr, color='gold')\n","      if len(nontp_long_liqd_list) != 0:\n","\n","        max_nontp_long_term = len(res_df) - nontp_long_indexs[0]\n","\n","        plt.title(\"wr : %.3f\\nlen(long_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (long_wr, len(long_np_pr[long_np_pr != 1]), long_dpf, np.min(long_np_pr), long_total_pr[-1], long_sum_pr[-1], long_sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (long_acc_mdd, long_sum_mdd, config.lvrg_set.leverage, min(long_liqd_list), mean_long_tr, mean_long_dr)  + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n nontp_liqd : %.3f\\n nontp_liqd_pr : %.3f\\n max_nontp_term : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_long_liqd_list), min(nontp_long_liqd_list), min(nontp_long_pr_list), max_nontp_long_term, t_w_l, c_w_l, t_ls_l, c_ls_l) ,\n","                  position=title_position)\n","                  # \"\\n leverage %s\\nliqd : %.3f\\nmean_tr : %.3f\\n mean_dr : %.3f\\n nontp_long_liqd_cnt : %s\\nnontp_long_liqd : %.3f\\nontp_long_liqd_pr : %.3f\\nmax_nontp_long_term : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  # % (config.lvrg_set.leverage, min(long_liqd_list), mean_long_tr, mean_long_dr, \n","                  #    len(nontp_long_liqd_list), min(nontp_long_liqd_list), min(nontp_long_pr_list), max_nontp_long_term, t_w_l, c_w_l, t_ls_l, c_ls_l),\n","                  # position=title_position)\n","      else:\n","        plt.title(\"wr : %.3f\\nlen(long_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (long_wr, len(long_np_pr[long_np_pr != 1]), long_dpf, np.min(long_np_pr), long_total_pr[-1], long_sum_pr[-1], long_sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (long_acc_mdd, long_sum_mdd, config.lvrg_set.leverage, min(long_liqd_list), mean_long_tr, mean_long_dr) + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_long_liqd_list), t_w_l, c_w_l, t_ls_l, c_ls_l),\n","                  position=title_position)\n","                  # \"\\n leverage %s\\nliqd : %.3f\\nmean_tr : %.3f\\n mean_dr : %.3f\\n nontp_long_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\" \n","                  # % (config.lvrg_set.leverage, min(long_liqd_list), mean_long_tr, mean_long_dr, len(nontp_long_liqd_list), t_w_l, c_w_l, t_ls_l, c_ls_l),\n","                  # position=title_position)\n","\n","      long_survey_df.iloc[survey_i] = long_wr, long_sr, len(long_np_pr[long_np_pr != 1]), long_dpf, \\\n","        long_total_pr[-1], long_sum_pr[-1], long_acc_mdd, long_sum_mdd, min(long_liqd_list), np.min(long_np_pr), mean_long_tr, mean_long_dr\n","\n","      print('supblot233 passed')\n","\n","    except Exception as e:\n","      print(\"error in 233 :\", e)\n","\n","\n","    try:\n","      #     reversion adjustment      #\n","      # rev_np_pr = 1 / (np.array(pr_list) + fee) - fee\n","      rev_fee = tp_fee + out_fee - np.array(fee_list)\n","      rev_np_pr = (1 / ((np.array(pr_list) - 1) / config.lvrg_set.leverage + np.array(fee_list) + 1) - rev_fee - 1) * config.lvrg_set.leverage + 1\n","      # rev_np_pr = (1 / (np.array(pr_list) + fee) - fee - 1) * config.lvrg_set.leverage + 1\n","          \n","      rev_sr = sharpe_ratio(rev_np_pr)\n","\n","      rev_total_pr = np.cumprod(rev_np_pr)\n","      rev_wr = len(rev_np_pr[rev_np_pr > 1]) / len(rev_np_pr[rev_np_pr != 1])\n","\n","      rev_total_for_sum_pr = rev_np_pr - 1\n","      rev_total_for_sum_pr[0] = 1\n","      rev_total_sum_pr = np.cumsum(rev_total_for_sum_pr)\n","      rev_total_sum_pr = np.where(rev_total_sum_pr < 0, 0, rev_total_sum_pr)\n","\n","      rev_rollmax_pr = np.maximum.accumulate(rev_total_pr)\n","      rev_acc_mdd = np.max((rev_rollmax_pr - rev_total_pr) / rev_rollmax_pr)\n","      rev_rollmax_sumpr = np.maximum.accumulate(rev_total_sum_pr)\n","      rev_sum_mdd = np.max((rev_rollmax_sumpr - rev_total_sum_pr) / rev_rollmax_sumpr)\n","\n","      # plt.subplot(122)\n","      plt.subplot(234)\n","      plt.plot(rev_total_pr)\n","      plt.plot(rev_total_sum_pr, color='gold')\n","\n","      plt.title(\"wr : %.3f\\n sr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n min_pr : %.3f\" \n","                % (rev_wr, rev_sr, rev_total_pr[-1], rev_total_sum_pr[-1], rev_acc_mdd, rev_sum_mdd, np.min(rev_np_pr)))\n","      \n","      rev_survey_df.iloc[survey_i] = rev_wr, rev_sr, rev_total_pr[-1], rev_total_sum_pr[-1], rev_acc_mdd, rev_sum_mdd, np.min(rev_np_pr)\n","\n","    except Exception as e:\n","      print(\"error in 234 :\", e)\n","\n","    try:\n","      #         short       #\n","      # rev_short_np_pr = 1 / (np.array(short_list) + fee) - fee\n","      rev_short_fee = tp_fee + out_fee - np.array(short_fee_list)\n","      rev_short_np_pr = (1 / ((np.array(short_list) - 1) / config.lvrg_set.leverage + np.array(short_fee_list) + 1) - rev_short_fee - 1) * config.lvrg_set.leverage + 1\n","      # rev_short_np_pr = (1 / (np.array(short_list) + fee) - fee - 1) * config.lvrg_set.leverage + 1\n","      \n","      rev_short_sr = sharpe_ratio(rev_short_np_pr)\n","          \n","      short_rev_total_pr = np.cumprod(rev_short_np_pr)\n","      rev_short_wr = len(rev_short_np_pr[rev_short_np_pr > 1]) / len(rev_short_np_pr[rev_short_np_pr != 1])\n","\n","      rev_short_for_sum_pr = rev_short_np_pr - 1\n","      rev_short_for_sum_pr[0] = 1\n","      short_rev_sum_pr = np.cumsum(rev_short_for_sum_pr)\n","      short_rev_sum_pr = np.where(short_rev_sum_pr < 0, 0, short_rev_sum_pr)\n","\n","      short_rev_rollmax_pr = np.maximum.accumulate(short_rev_total_pr)\n","      short_rev_acc_mdd = np.max((short_rev_rollmax_pr - short_rev_total_pr) / short_rev_rollmax_pr)\n","      short_rev_rollmax_sumpr = np.maximum.accumulate(short_rev_sum_pr)\n","      short_rev_sum_mdd = np.max((short_rev_rollmax_sumpr - short_rev_sum_pr) / short_rev_rollmax_sumpr)\n","\n","      # plt.subplot(122)\n","      plt.subplot(235)\n","      plt.plot(short_rev_total_pr)\n","      plt.plot(short_rev_sum_pr, color='gold')\n","\n","      plt.title(\"wr : %.3f\\n sr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n min_pr : %.3f\" \n","                % (rev_short_wr, rev_short_sr, short_rev_total_pr[-1], short_rev_sum_pr[-1], short_rev_acc_mdd, short_rev_sum_mdd, np.min(rev_short_np_pr)))\n","      \n","      rev_short_survey_df.iloc[survey_i] = rev_short_wr, rev_short_sr, short_rev_total_pr[-1], short_rev_sum_pr[-1], short_rev_acc_mdd, short_rev_sum_mdd, np.min(rev_short_np_pr)\n","\n","    except Exception as e:\n","      print(\"error in 235 :\", e)\n","\n","    try:\n","      #         long       #\n","      # rev_long_np_pr = 1 / (np.array(long_list) + fee) - fee\n","      rev_long_fee = tp_fee + out_fee - np.array(long_fee_list)\n","      rev_long_np_pr = (1 / ((np.array(long_list) - 1) / config.lvrg_set.leverage + np.array(long_fee_list) + 1) - rev_long_fee - 1) * config.lvrg_set.leverage + 1\n","          \n","      rev_long_sr = sharpe_ratio(rev_long_np_pr)\n","\n","      long_rev_total_pr = np.cumprod(rev_long_np_pr)\n","      rev_long_wr = len(rev_long_np_pr[rev_long_np_pr > 1]) / len(rev_long_np_pr[rev_long_np_pr != 1])\n","\n","      rev_long_for_sum_pr = rev_long_np_pr - 1\n","      rev_long_for_sum_pr[0] = 1\n","      long_rev_sum_pr = np.cumsum(rev_long_for_sum_pr)\n","      long_rev_sum_pr = np.where(long_rev_sum_pr < 0, 0, long_rev_sum_pr)\n","\n","      long_rev_rollmax_pr = np.maximum.accumulate(long_rev_total_pr)\n","      long_rev_acc_mdd = np.max((long_rev_rollmax_pr - long_rev_total_pr) / long_rev_rollmax_pr)\n","      long_rev_rollmax_sumpr = np.maximum.accumulate(long_rev_sum_pr)\n","      long_rev_sum_mdd = np.max((long_rev_rollmax_sumpr - long_rev_sum_pr) / long_rev_rollmax_sumpr)\n","\n","      # plt.subplot(122)\n","      plt.subplot(236)\n","      plt.plot(long_rev_total_pr)\n","      plt.plot(long_rev_sum_pr, color='gold')\n","\n","      plt.title(\"wr : %.3f\\n sr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n min_pr : %.3f\" \n","                % (rev_long_wr, rev_long_sr, long_rev_total_pr[-1], long_rev_sum_pr[-1], long_rev_acc_mdd, long_rev_sum_mdd, np.min(rev_long_np_pr)))\n","      \n","      rev_long_survey_df.iloc[survey_i] = rev_long_wr, rev_long_sr, long_rev_total_pr[-1], long_rev_sum_pr[-1], long_rev_acc_mdd, long_rev_sum_mdd, np.min(rev_long_np_pr)\n","      \n","    except Exception as e:\n","      print(\"error in 236 :\", e)\n","\n","    if show_plot:\n","      plt.show()\n","    \n","\n","    try:\n","\n","      h_np_pr = np.array(h_pr_list)\n","      # h_rev_np_pr = 1 / (np.array(h_pr_list) + fee) - fee    # define, for plot_check below cell\n","      h_rev_np_pr = (1 / ((np.array(h_pr_list) - 1) / config.lvrg_set.leverage + np.array(fee_list) + 1) - np.array(fee_list) - 1) * config.lvrg_set.leverage + 1\n","\n","      # --------------------- h pr plot --------------------- #\n","      if len(h_np_pr[h_np_pr != 1]) != 0:\n","\n","        plt.figure(figsize=(16, 12))\n","        plt.suptitle(key + \" hedge\")\n","\n","        h_total_pr = np.cumprod(h_np_pr)\n","        h_wr = len(h_np_pr[h_np_pr > 1]) / len(h_np_pr[h_np_pr != 1])\n","\n","        # plt.subplot(121)\n","        plt.subplot(231)\n","        plt.plot(h_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_wr, np.min(h_np_pr), h_total_pr[-1], config.lvrg_set.leverage))\n","        # plt.show()\n","\n","        #         short only      #\n","        h_short_np_pr = np.array(h_short_list)\n","\n","        short_h_total_pr = np.cumprod(h_short_np_pr)\n","        h_short_wr = len(h_short_np_pr[h_short_np_pr > 1]) / len(h_short_np_pr[h_short_np_pr != 1])\n","        \n","        plt.subplot(232)\n","        plt.plot(short_h_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_short_wr, np.min(h_short_np_pr), short_h_total_pr[-1], config.lvrg_set.leverage))\n","\n","        #         long only      #\n","        h_long_np_pr = np.array(h_long_list)\n","\n","        long_h_total_pr = np.cumprod(h_long_np_pr)\n","        h_long_wr = len(h_long_np_pr[h_long_np_pr > 1]) / len(h_long_np_pr[h_long_np_pr != 1])\n","        \n","        plt.subplot(233)\n","        plt.plot(long_h_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_long_wr, np.min(h_long_np_pr), long_h_total_pr[-1], config.lvrg_set.leverage))\n","\n","\n","        #     reversion adjustment      #\n","            \n","        h_rev_total_pr = np.cumprod(h_rev_np_pr)\n","        h_rev_wr = len(h_rev_np_pr[h_rev_np_pr > 1]) / len(h_rev_np_pr[h_rev_np_pr != 1])\n","\n","        # plt.subplot(122)\n","        plt.subplot(234)\n","        plt.plot(h_rev_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_rev_wr, np.min(h_rev_np_pr), h_rev_total_pr[-1], config.lvrg_set.leverage))\n","\n","        #         short       #\n","        # h_rev_short_np_pr = 1 / (np.array(h_short_list) + fee) - fee\n","        h_rev_short_np_pr =  (1 / ((np.array(h_short_list) - 1) / config.lvrg_set.leverage + np.array(short_fee_list) + 1) - np.array(short_fee_list) - 1) * config.lvrg_set.leverage + 1\n","           \n","        short_h_rev_total_pr = np.cumprod(h_rev_short_np_pr)\n","        h_rev_short_wr = len(h_rev_short_np_pr[h_rev_short_np_pr > 1]) / len(h_rev_short_np_pr[h_rev_short_np_pr != 1])\n","\n","        # plt.subplot(122)\n","        plt.subplot(235)\n","        plt.plot(short_h_rev_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_rev_short_wr, np.min(h_rev_short_np_pr), short_h_rev_total_pr[-1], config.lvrg_set.leverage))\n","\n","        #         long       #\n","        # h_rev_long_np_pr = 1 / (np.array(h_long_list) + fee) - fee\n","        h_rev_long_np_pr =  (1 / ((np.array(h_long_list) - 1) / config.lvrg_set.leverage + np.array(long_fee_list) + 1) - np.array(long_fee_list) - 1) * config.lvrg_set.leverage + 1\n","            \n","        long_h_rev_total_pr = np.cumprod(h_rev_long_np_pr)\n","        h_rev_long_wr = len(h_rev_long_np_pr[h_rev_long_np_pr > 1]) / len(h_rev_long_np_pr[h_rev_long_np_pr != 1])\n","\n","        # plt.subplot(122)\n","        plt.subplot(236)\n","        plt.plot(long_h_rev_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_rev_long_wr, np.min(h_rev_long_np_pr), long_h_rev_total_pr[-1], config.lvrg_set.leverage))\n","        \n","        if show_plot:\n","          plt.show()\n","          \n","    except Exception as e:\n","      print('error in h_pr plot :', e)   \n","    \n","    print()\n","\n","\n","  # break # pair loop"]},{"cell_type":"markdown","metadata":{"id":"MteLY9PS2ZeK"},"source":["##### check statistical significance"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"NzbWuwSw2jaj","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1640920294644,"user_tz":-540,"elapsed":7325,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"992b60c2-9d62-4c31-c257-0c73172a5b72"},"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 3000x1000 with 36 Axes>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 3000x1000 with 21 Axes>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","\n"]}],"source":["# print(survey_df)\n","\n","plt.style.use('dark_background')\n","\n","title_name_list = [[\"total\", \"short\", \"long\"], [\"rev_total\", \"rev_short\", \"rev_long\"]]\n","survey_dfs_list = [[survey_df, short_survey_df, long_survey_df], [rev_survey_df, rev_short_survey_df, rev_long_survey_df]]\n","# title_name = \n","# survey_df_list = \n","\n","space_ = \" \" * 140\n","\n","for d_idx, (title_name, survey_dfs) in enumerate(zip(title_name_list, survey_dfs_list)):\n","\n","  fig = plt.figure(figsize=(30, 10))\n","\n","  gs = gridspec.GridSpec(nrows=1, # row Î™á Í∞ú \n","                          ncols=3, # col Î™á Í∞ú \n","                          # height_ratios=[1, 1, 1]\n","                        )\n","\n","  # gs = fig.add_gridspec(1, 3, wspace=0, hspace=0)\n","\n","  # nrows, ncols, h_r = 3, 3, [1, 1, 1]\n","  nrows, ncols, h_r = 3, 4, [1, 1, 1]\n","  # nrows, ncols, h_r = 4, 3, [1, 1, 1, 1]\n","\n","  # if d_idx == 0:\n","  # else:\n","    # nrows, ncols, h_r = 2, 2, [1, 1]\n","\n","  for gs_idx, (title, s_df) in enumerate(zip(title_name, survey_dfs)):  \n","\n","\n","    inner_gs = gs[gs_idx].subgridspec(nrows=nrows, # row Î™á Í∞ú \n","                          ncols=ncols, # col Î™á Í∞ú \n","                          height_ratios=h_r\n","                        )\n","\n","    for col_idx, s_cols in enumerate(s_df.columns):\n","      plt.subplot(inner_gs[col_idx])\n","      plt.plot(s_df[s_cols])\n","      plt.title(s_cols)\n","\n","  # plt.suptitle(\"total\" + \" \" * 140 + \"short\" + \" \" * 140 + \"long\")\n","  plt.suptitle(space_.join(title_name))\n","  plt.show()\n","  print(\"\\n\")"]},{"cell_type":"markdown","metadata":{"id":"GZ0y_x9ugOUD"},"source":["##### check dent_detph"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":693},"executionInfo":{"elapsed":1409,"status":"ok","timestamp":1640358130016,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"ETgm1avml0fE","outputId":"8e4dd6ea-1fe7-4895-9842-400ae913fbc4"},"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 400x800 with 2 Axes>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["max_dd : 0.2515057036519577\n"]}],"source":["target_pr = long_total_pr\n","\n","plt.figure(figsize=(4, 8))\n","gs = gridspec.GridSpec(nrows=2,\n","                        ncols=1,\n","                        height_ratios=[1, 1]\n","                      )\n","\n","plt.subplot(gs[0])\n","plt.plot(target_pr)\n","h_roll = pd.Series(target_pr).rolling(10).max()\n","plt.plot(h_roll)\n","# plt.show()\n","# print()\n","\n","plt.subplot(gs[1])\n","dent_depth = target_pr / h_roll\n","plt.plot(dent_depth)\n","plt.show()\n","\n","rolling_max = np.maximum.accumulate(long_total_pr)\n","max_dd = np.max((rolling_max - long_total_pr)/rolling_max)\n","print(\"max_dd :\", max_dd)"]},{"cell_type":"markdown","metadata":{"id":"v2Gjv019AEz8"},"source":["##### check frequency "]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":464},"executionInfo":{"elapsed":720,"status":"ok","timestamp":1636862363013,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"atdBjod9-e21","outputId":"5925d52a-da23-40cd-a9b3-6c0323024bc0"},"outputs":[{"name":"stdout","output_type":"stream","text":["[0. 0. 0. ... 0. 0. 0.]\n","(70, 1)\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["total_len = np.zeros(len(res_df))\n","print(total_len)\n","np_trade_list = np.array(trade_list)\n","# print(np_trade_list.shape)\n","print(np_trade_list[:, [0], [0]].shape)\n","total_len[np_trade_list[:, [0], [0]]] = 1\n","\n","plt.plot(total_len)\n","plt.show()"]},{"cell_type":"markdown","source":["##### candle study (ÎÇúÏàò ÏÉùÏÑ±ÏùÑ ÌÜµÌï¥ candle strength ratio Î•º serialize Ìï† Ïàò ÏûàÏñ¥ÏïºÌï®)"],"metadata":{"id":"zItdCdJXhQtu"}},{"cell_type":"code","source":["# wick_score -> Ï†ïÏàòÏûêÎ¶¨, body_score -> ÏÜåÏàòÏ†ê ÏûêÎ¶¨\n","# def candle_strn_ratio(ohlc_data):\n","\n","#   # o, h, l, c = ohlc_data\n","#   if type(ohlc_data) != np.array:\n","#     ohlc_data = np.array(ohlc_data)\n","\n","#   o, h, l, c = np.split(ohlc_data, 4, axis=1)\n","#   #   check up / downward\n","#   # up = 1 if c >= o else 0\n","#   up = np.where(c >= o, 1, 0)\n","\n","#   total_len = h - l\n","#   upper_wick = (h - np.maximum(c, o)) / total_len\n","#   lower_wick = (np.minimum(c, o) - l) / total_len\n","#   body = abs(c - o) / total_len\n","\n","#   # if up:\n","    \n","#   # else:\n","    \n","#   up_score = (1 - upper_wick) * 100 + body\n","#   dn_score = (1 - lower_wick) * 100 + body\n","#   score = np.where(up, up_score, dn_score)  \n","\n","#   return score\n","\n","\n","def candle_strn_ratio(res_df, plot_check=0):\n","  \n","  ohlc_col = [\"open\", \"high\", \"low\", \"close\"]\n","  ohlcs = res_df[ohlc_col]\n","  o, h, l, c = np.split(ohlcs.values, 4, axis=1)\n","\n","  # if type(ohlc_data) != np.array:\n","  #   ohlc_data = np.array(ohlc_data)\n","\n","  #   check up / downward\n","  up = np.where(c >= o, 1, 0)\n","\n","  total_len = h - l\n","  upper_wick = (h - np.maximum(c, o)) / total_len\n","  lower_wick = (np.minimum(c, o) - l) / total_len\n","  body = abs(c - o) / total_len\n","    \n","  up_score = (1 - upper_wick) * 100 + body\n","  dn_score = (1 - lower_wick) * 100 + body\n","  score = np.where(up, up_score, dn_score)  \n","\n","  if plot_check:\n","    fig = plt.figure(figsize=(14, 18))\n","      \n","    gs = gridspec.GridSpec(nrows=3, # row Î™á Í∞ú \n","                          ncols=1, # col Î™á Í∞ú \n","                          height_ratios=[3, 1, 1]\n","                        )\n","\n","    ax = fig.add_subplot(gs[0])\n","\n","    # fig.show()\n","    # fig.canvas.draw()\n","\n","    temp_ohlc = ohlcs.values\n","    index = np.arange(len(temp_ohlc))\n","    candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","    mf.candlestick_ohlc(ax, candle, width=0.5, colorup='#26a69a', colordown='#ef5350', alpha=0.5)\n","\n","    plt.show()\n","\n","  return score"],"metadata":{"id":"OTM-5HpehcSB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#   plot_check    #\n","print(candle_strn_ratio(res_df.iloc[:20], 1))\n","# break\n","# ohlc_data\n","\n","# fig = plt.figure(figsize=(14, 18))\n","  \n","# gs = gridspec.GridSpec(nrows=3, # row Î™á Í∞ú \n","#                       ncols=1, # col Î™á Í∞ú \n","#                       height_ratios=[3, 1, 1]\n","#                     )\n","\n","# ax = fig.add_subplot(gs[0])\n","\n","# # fig.show()\n","# # fig.canvas.draw()\n","\n","# temp_ohlc = ohlc_data.values\n","# index = np.arange(len(temp_ohlc))\n","# candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","# mf.candlestick_ohlc(ax, candle, width=0.5, colorup='#26a69a', colordown='#ef5350', alpha=0.5)\n","\n","# plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"KGJbx4BgKHKd","executionInfo":{"status":"ok","timestamp":1639793188612,"user_tz":-540,"elapsed":1080,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"892bab00-7b08-400f-89a6-f7a9de25d951"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"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ACRA5AEAAABIgMgDAAAAkACRBwAAACABIg8AAABAAkQeAAAAgASIPAAAAAAJEHkAAAAAEiDyAAAAACRA5AEAAABIgMgDAAAAkACRBwAAACABIg8AAABAAkQeAAAAgASIPAAAAAAJEHkAAAAAEiDyAAAAACRA5AEAAABIgMgDAAAAkACRBwAAACABIg8AAABAAkQeAAAAgASIPAAAAAAJEHkAAAAAEiDyAAAAACRA5AEAAABIgMgDAAAAkACRBwAAACABIg8AAABAAkQeAAAAgASIPAAAAAAJEHkAAAAAEiDyAAAAACRA5AEAAABIgMgDAAAAkACRBwAAACABIg8AAABAAkQeAAAAgASIPAAAAAAJEHkAAAAAEiDyAAAAACRA5AEAAABIgMgDAAAAkACRBwAAACABIg8AAABAAkQeAAAAgASIPAAAAAAJEHkAAAAAEiDyAAAAACRA5AEAAABIgMgDAAAAkACRBwAAACABIg8AAABAAkQeAAAAgARkijzbtm2Lvr6+KJfLUS6Xo7+/P3bv3h0REUNDQ3HjjTfG8uXLo1QqxdKlS+Omm26K4eHhk15j//79cdVVV8Xb3va2mD9/fqxevTp++MMfnrl3BAAAADALZYo8ixcvjjvuuCO+//3vx/e+9734yEc+EmvXro1nn302Dh8+HIcPH4677rornnnmmfjmN78Zjz76aGzYsGFq///8z//E1VdfHUuXLo19+/bF448/Hj09PbF69eoYHx8/428OAAAAYLboaDabzem8wIIFC+LOO+88Kea84aGHHop169bF6Oho5PP5+N73vhdXXHFFvPjii7FkyZKIiDh48GD09fXFj3/847joootaOrNSqcS8efNieHg4yuXydMYHAACAiIjY9J098bUPrW73GMxy02kep31PnkajEQ8++GCMjo5Gf3//W655Y6B8Ph8REcuXL4/f+q3fiu3bt0e9Xo9qtRrbt2+PSy65JC688MJTnlWr1aJSqZz0AAAAAOAXMkeegwcPxty5c6NYLMamTZti165d0dvb+6Z1r776atx+++2xcePGqd/19PTE4OBg7NixI0qlUsydOzceffTR2L1791QIeitbt26NefPmTT3euAoIAAAAgNdljjzLly+PAwcOxL59+2Lz5s2xfv36OHTo0ElrKpVKrFmzJnp7e+PWW2+d+n21Wo0NGzbEBz7w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njw5lixZEtu3bz9kn29961uRy+UOeowdO3aQKuZoWLly5Zvm8KSTTjpkH+s9G0444YQ3zX0ul4tly5b12t56H5n+9V//NS666KKYPn165HK5+NGPfnTQ60mSxA033BDTpk2LYrEY5513Xjz33HOHHTftcQKD71Bz39nZGZ///Ofj1FNPjdra2pg+fXpcfvnl8eqrrx5yzP7sMxhch1vzV1xxxZvmcOHChYcd15of/g43973t83O5XKxevbrPMa354a+Sc7i2trZYtmxZHHPMMTF+/Pi4+OKL47XXXjvkuP09PvhNQp5h5Hvf+1785V/+ZaxYsSK2bdsW8+bNiwsuuCB27drVa/t/+7d/i4985CNx5ZVXxs9//vNYsmRJLFmyJJ555plBrpwj8cgjj8SyZcvi8ccfj02bNkVnZ2ecf/750dLScsh+pVIpdu7c2fN48cUXB6lijpY5c+YcNIePPvpon22t9+x48sknD5r3TZs2RUTEpZde2mcf633kaWlpiXnz5sU3v/nNXl//27/927j55pvjtttuiy1btkRtbW1ccMEF0dbW1ueYaY8TGBqHmvsDBw7Etm3b4vrrr49t27bFP/7jP8b27dvjD/7gDw47bpp9BoPvcGs+ImLhwoUHzeF3vvOdQ45pzY8Mh5v735zznTt3xh133BG5XC4uvvjiQ45rzQ9vlZzD/cVf/EX88z//c2zYsCEeeeSRePXVV+OP/uiPDjluf44P3iRh2DjrrLOSZcuW9fzc3d2dTJ8+Pbnxxht7bf+hD30oufDCCw96bsGCBcmnPvWpAa2TgbVr164kIpJHHnmkzzbr169PJkyYMIhVcbStWLEimTdvXsXtrffs+sxnPpO87W1vS8rlcq+vW+8jX0Qk99xzT8/P5XI5mTp1arJ69eqe5/bu3ZsUCoXkO9/5Tp/jpD1OYOj99tz35oknnkgiInnxxRf7bJN2n8HQ6m3ely5dmixevDjVONb8yFPJml+8eHFyzjnnHLKNNT/y/PY53N69e5MxY8YkGzZs6Gnzn//5n0lEJI899livY/T3+OC3uZJnmOjo6IitW7fGeeed1/NcVVVVnHfeefHYY4/12uexxx47qH1ExAUXXNBne0aGffv2RUREfX39Idvt378/Zs2aFTNmzIjFixfHL37xi8Eoj6Poueeei+nTp8eJJ54YH/3oR+Oll17qs631nk0dHR1x1113xcc//vHI5XJ9trPes2XHjh3R2Nh40JqeMGFCLFiwoM813Z/jBEaGffv2RS6Xi4kTJx6yXZp9BsPT5s2bY/LkyTF79uy4+uqr49e//nWfba35bHrttdfivvvuiyuvvPKwba35keW3z+G2bt0anZ2dB63hk046KWbOnNnnGu7P8UFvhDzDxK9+9avo7u6OKVOmHPT8lClTorGxsdc+jY2Nqdoz/JXL5bj22mvjd37nd+KUU07ps93s2bPjjjvuiB//+Mdx1113Rblcjve85z3xyiuvDGK1HIkFCxbEt771rbj//vtjzZo1sWPHjvjd3/3daG5u7rW99Z5NP/rRj2Lv3r1xxRVX9NnGes+eN9ZtmjXdn+MEhr+2trb4/Oc/Hx/5yEeiVCr12S7tPoPhZ+HChfHtb387Hnzwwfibv/mbeOSRR2LRokXR3d3da3trPpvuvPPOqKurO+xHdqz5kaW3c7jGxsbI5/NvCvAPd37/RptK+/SmJk3xwMBatmxZPPPMM4f9zG1DQ0M0NDT0/Pye97wn3vWud8XatWvjy1/+8kCXyVGwaNGinj/PnTs3FixYELNmzYrvf//7Ff12h2xYt25dLFq0KKZPn95nG+sdsqmzszM+9KEPRZIksWbNmkO2tc8Y+f74j/+458+nnnpqzJ07N972trfF5s2b49xzzx3CyhhMd9xxR3z0ox897BcoWPMjS6XncIPFlTzDxLHHHhvV1dVvutv2a6+9FlOnTu21z9SpU1O1Z3j79Kc/Hffee288/PDDcfzxx6fqO2bMmDj99NPj+eefH6DqGGgTJ06Md77znX3OofWePS+++GI88MAD8Wd/9mep+lnvI98b6zbNmu7PcQLD1xsBz4svvhibNm065FU8vTncPoPh78QTT4xjjz22zzm05rPnpz/9aWzfvj31fj/Cmh/O+jqHmzp1anR0dMTevXsPan+48/s32lTapzdCnmEin8/H/Pnz48EHH+x5rlwux4MPPnjQb3B/U0NDw0HtIyI2bdrUZ3uGpyRJ4tOf/nTcc8898dBDD8Vb3/rW1GN0d3fH008/HdOmTRuAChkM+/fvjxdeeKHPObTes2f9+vUxefLkuPDCC1P1s95Hvre+9a0xderUg9Z0U1NTbNmypc813Z/jBIanNwKe5557Lh544IE45phjUo9xuH0Gw98rr7wSv/71r/ucQ2s+e9atWxfz58+PefPmpe5rzQ8/hzuHmz9/fowZM+agNbx9+/Z46aWX+lzD/Tk+6E31ypUrV6Z7OwyUUqkU119/fcyYMSMKhUJcf/318dRTT8W6deti/Pjxcfnll8cTTzzRcyOm4447Lr74xS9GbW1t1NfXxy233BLf+973Yt26dTF58uQhfjdUatmyZfEP//AP8YMf/CCmT58e+/fvj/3790d1dXWMGTMmIuJNc/+lL30p2tvbI5fLxY4dO+Jzn/tcbNmyJdauXRtvectbhvLtUKHPfe5zUSgUIiLi2Wefjauuuip27doVt912W9TW1lrvGVcul+OKK66Iyy67LM4///yDXrPes2H//v3x7LPPRmNjY6xduzYWLFgQxWIxOjo6YuLEidHd3R1f/epX4+STT46Ojo748z//8zhw4EB84xvfiJqa1z9Nf+6550Zzc3OcddZZEXH44wSGh0PN/bhx4+KSSy6JrVu3xg9/+MMYN25cz34/n89HdXV1RLx57g+3z2DoHWreq6ur4wtf+EKUSqXo6uqKrVu3xpVXXhnjx4+Pr33ta9b8CHeouZ8wYUJEvH6i/vGPfzyWL18eZ5xxxpvGsOZHnsOdw40dOzZeffXVuOWWW+K0006L3bt3x6c+9amYMWNGrFixomeck046KY477rh417veFblcrqLjg8Pqz9eDMXC+8Y1vJDNnzkzy+Xxy1llnJY8//njPa7/3e7+XLF269KD23//+95N3vvOdST6fT+bMmZPcd999g1wxRyoien2sX7++p81vz/21117b8+9kypQpye///u8n27ZtG/zi6bcPf/jDybRp05J8Pp8cd9xxyYc//OHk+eef73ndes+2jRs3JhGRbN++/U2vWe/Z8PDDD/f6f/sbc1sul5Prr78+mTJlSlIoFJJzzz33Tf8eZs2alaxYseKg5w51nMDwcKi537FjR5/7/YcffrhnjN+e+8PtMxh6h5r3AwcOJOeff37ylre8JRkzZkwya9as5BOf+ETS2Nh40BjW/Mh0uP/vkyRJ1q5dmxSLxWTv3r29jmHNjzyVnMO1trYm11xzTTJp0qRk3LhxyR/+4R8mO3fufNM4v9mnkuODw8n978AAAAAAjGDuyQMAAACQAUIeAAAAgAwQ8gAAAABkgJAHAAAAIAOEPAAAAAAZIOQBAAAAyAAhDwAAAEAGCHkAAAAAMkDIAwAAAJABQh4AAACADBDyAAAAAGSAkAcAAAAgA/4fVPqOrUCDMe8AAAAASUVORK5CYII=\n","text/plain":["<Figure size 1400x1800 with 1 Axes>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["[[ 97.40707965]\n"," [ 93.03448276]\n"," [ 65.23144105]\n"," [ 87.89839572]\n"," [ 98.6984127 ]\n"," [ 42.30612245]\n"," [ 92.01176471]\n"," [ 97.25819672]\n"," [ 48.76363636]\n"," [ 45.27299703]\n"," [ 78.11056511]\n"," [ 65.07943925]\n"," [ 89.64356436]\n"," [ 88.06410256]\n"," [ 87.93854749]\n"," [ 96.70093458]\n"," [100.79865772]\n"," [ 36.16981132]\n"," [ 82.87234043]\n"," [ 93.57608696]]\n"]}]},{"cell_type":"markdown","metadata":{"id":"o-XjNS1L31YB"},"source":["##### ep_loc.point & zone legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"taB2j7kT33iN"},"outputs":[],"source":["\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 (res_df['close'] < res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(strat_version)] - 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] >= res_df['bb_lower_1m']) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['bb_lower_1m']) &\n","    #                 (res_df['close'] < res_df['bb_lower_1m'])\n","    #                 , res_df['entry_{}'.format(strat_version)] - 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   (res_df['close'] > res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(strat_version)] + 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] <= res_df['bb_upper_1m']) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['bb_upper_1m']) &\n","    #                   (res_df['close'] > res_df['bb_upper_1m'])\n","    #                 , res_df['entry_{}'.format(strat_version)] + 1, res_df['entry_{}'.format(strat_version)])\n","\n","\n","    \n","   # --------------- ema --------------- #   \n","  # res_df['ema5_1m'] = ema(res_df['close'], 5).shift(1)\n","\n","  #   # --------------- cloud bline --------------- #   \n","  # res_df['cloud_bline_1m'] = cloud_bline(res_df, 26).shift(1)\n","  \n","    #       stochastic      #\n","  # res_df['stoch'] = stoch(res_df, 5, 3, 3)\n","\n","    #       fisher      #\n","  # res_df['fisher30'] = fisher(res_df, 30)\n","  # res_df['fisher60'] = fisher(res_df, 60)\n","  # res_df['fisher120'] = fisher(res_df, 120)\n","\n","    #       cctbbo      #\n","  # res_df['cctbbo'], _ = cct_bbo(res_df, 21, 13)\n","\n","    #       ema_roc      #\n","  # res_df['ema_roc'] = ema_roc(res_df['close'], 13, 9)\n","\n","\n","   # ------------------------------ htf data ------------------------------ #    \n","\n","  #             Todo              #\n","  # htf_df = pd.read_excel(date_path2 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # htf_df = pd.read_excel(date_path3 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # htf_df = pd.read_excel(date_path4 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # htf_df = pd.read_excel(date_path5 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # # # # htf_df = pd.read_excel(date_path6 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","\n","  # # ---- htf index slicing ---- #\n","  # htf_df = htf_df.loc[:res_df.index[-1]]\n","  \n","  # print(\"res_df.index[-1] :\", res_df.index[-1])\n","  # print(\"htf_df.index[-1] :\", htf_df.index[-1])\n","\n","  # res_df = dc_line(res_df, htf_df, '5m')\n","  # res_df = dc_level(res_df, '5m', 1)\n","\n","\n","  # # # if \"sma4\" in res_df.columns:\n","  # # #   res_df.drop(\"sma4\", axis=1, inplace=1)\n","\n","  # # htf_df['sma'] = htf_df['close'].rolling(60).mean()\n","  # # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf(res_df, htf_df, [-1]), columns=['sma_30m']))\n","  \n","  # htf_df['stoch'] = stoch(htf_df, 13, 3, 3)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf(res_df, htf_df, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","   \n","  # fifth_df['ema'] = ema(fifth_df['close'], 5)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf(res_df, fifth_df, [-1]), columns=['ema5']))\n","\n","        # ------------------------------------ short ------------------------------------ # \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 0:\n","        #   mr_score += 1          \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_upper_1m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_upper_3m'].iloc[i] <= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_upper_5m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == 'MARKET':\n","        #   mr_const_cnt += 1\n","        #   if (res_df['close'].iloc[i] - res_df['short_tp'].iloc[i]) / (res_df['short_out'].iloc[i] - res_df['close'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error):  \n","        #     mr_score += 1\n","\n","           \n","        # ------- entry once ------- #   \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == 1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == -1:\n","        #     prev_entry_cnt += 1          \n","        # # # print(\"prev_entry_cnt :\", prev_entry_cnt)\n","\n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] < res_df['bb_lower_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_lower2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_base_1h'].iloc[i]:\n","\n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] < res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","  \n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['low'].iloc[i] > res_df['short_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1\n","\n","\n","\n","        # ------------------------------------ long ------------------------------------ # \n","          \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 1:\n","        #   mr_score += 1   \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 1:\n","        #   mr_score += 1     \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 1:\n","          # mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_lower_1m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_lower_3m'].iloc[i] >= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_lower_5m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == \"MARKET\":\n","          # mr_const_cnt += 1        \n","          # if (res_df['long_tp'].iloc[i] - res_df['close'].iloc[i]) / (res_df['close'].iloc[i] - res_df['long_out'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error): # ÏùºÎ∞òÏ†ÅÏúºÎ°ú dr ÏÉÅÏóêÏÑú tp ÎπÑÏú®Ïù¥ Îçî Ïª§Ïßê (tr Î≥¥Îã§)\n","          #   mr_score += 1\n","\n","        # -------------- ep limit -------------- #    \n","        # mr_const_cnt += 1\n","        # # if (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # if config.ep_set.min_eplim_pct < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # # if 0 < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        #   # if res_df['st_gap_15m'].iloc[i] / res_df['open'].iloc[i] < 0:\n","        #   #   print(\"i, res_df['st_gap_15m'].iloc[i] :\", i, res_df['st_gap_15m'].iloc[i])\n","        #   mr_score += 1\n","\n","\n","        # -------------- entry once -------------- #    \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == -1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == 1:\n","        #     prev_entry_cnt += 1\n","          \n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","          \n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] > res_df['bb_upper_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_upper2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_base_1h'].iloc[i]:\n","        \n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] > res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","\n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['high'].iloc[i] < res_df['long_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","          \n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1"]},{"cell_type":"markdown","metadata":{"id":"-IbP_Z3Dlwk4"},"source":["### nontp survey"]},{"cell_type":"markdown","metadata":{"id":"FxJ1y8v2fkCR"},"source":["##### term & liqd"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":614},"executionInfo":{"elapsed":8,"status":"ok","timestamp":1628300788555,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"-qIWa48pl1GO","outputId":"b2687c93-e070-4d45-8a67-4cc783fd78f1"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 360x720 with 2 Axes>"]},"metadata":{"tags":[]},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]}],"source":["# print(nontp_long_indexs)\n","\n","plot_size = 100\n","\n","for s_i in range(plot_size, len(trade_list), plot_size):\n","\n","  slice_trade_list = trade_list[s_i - plot_size:s_i]\n","  slice_liqd_list = liqd_list[s_i - plot_size:s_i]\n","\n","  # print(len(slice_trade_list))\n","  np_trade = np.array(slice_trade_list)\n","  trade_term = np_trade[:, [2]] - np_trade[:, [1]]\n","\n","  plt.figure(figsize=(5, 10))\n","  plt.subplot(211)\n","  plt.bar(np.arange(len(trade_term)), trade_term.reshape(-1,), width=1, color='b')\n","\n","  # plt.plot(trade_term.reshape(-1,))\n","  plt.ylim(0, 1000)\n","  # plt.show()\n","  # print()\n","\n","  plt.subplot(212)\n","  # print(len(liqd_list))\n","  # plt.bar(np.arange(len(liqd_list)), liqd_list)\n","  plt.bar(np.arange(len(slice_liqd_list)), np.array(slice_liqd_list), width=1, color='r')\n","  # plt.plot(slice_liqd_list)\n","  plt.show()\n","\n","print()"]},{"cell_type":"markdown","metadata":{"id":"VBwVaUkvfnOd"},"source":["##### check nontp index"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":454,"status":"ok","timestamp":1628220543161,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"mRCMBOU4frNY","outputId":"ce4a9c9b-3589-40b3-8a19-4be03d5b9a1e"},"outputs":[{"name":"stdout","output_type":"stream","text":["32747\n"]}],"source":["# np_nontp_short_indexs = np.array(nontp_short_indexs)\n","# np_nontp_long_indexs = np.array(nontp_long_indexs)\n","\n","# short_til_term = len(res_df) - np_nontp_short_indexs\n","# long_til_term = len(res_df) - np_nontp_long_indexs\n","\n","max_nontp_short_term = len(res_df) - nontp_short_indexs[0]\n","max_nontp_long_term = len(res_df) - nontp_long_indexs[0]\n","\n","print(max_nontp_long_term)"]},{"cell_type":"markdown","metadata":{"id":"tApzvz_gK9lR"},"source":["## basic strategy"]},{"cell_type":"markdown","metadata":{"id":"FaRGwR4NEop2"},"source":["### shifting"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"a8aYsjEgQnGF"},"outputs":[],"source":["org_res_df = res_df.copy()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":291,"status":"ok","timestamp":1626515312874,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"RF3RM2G2RCb1","outputId":"ba8f6a75-d4df-4f85-cd0f-190935341f7a"},"outputs":[{"name":"stdout","output_type":"stream","text":["                            open     high  ...  min_upper  max_lower\n","2021-06-30 23:55:59.999  0.27223  0.27281  ...   0.272145    0.27005\n","2021-06-30 23:56:59.999  0.27274  0.27290  ...   0.272145    0.27005\n","2021-06-30 23:57:59.999  0.27246  0.27257  ...   0.272523    0.27021\n","2021-06-30 23:58:59.999  0.27166  0.27183  ...   0.272523    0.27021\n","2021-06-30 23:59:59.999  0.27144  0.27211  ...   0.272523    0.27021\n","\n","[5 rows x 37 columns]\n","                            open     high  ...  min_upper  max_lower\n","2021-06-30 23:55:59.999  0.27223  0.27281  ...   0.272523    0.27021\n","2021-06-30 23:56:59.999  0.27274  0.27290  ...        NaN        NaN\n","2021-06-30 23:57:59.999  0.27246  0.27257  ...        NaN        NaN\n","2021-06-30 23:58:59.999  0.27166  0.27183  ...        NaN        NaN\n","2021-06-30 23:59:59.999  0.27144  0.27211  ...        NaN        NaN\n","\n","[5 rows x 37 columns]\n"]}],"source":["#         refresh res_df      #\n","res_df = org_res_df.copy()\n","print(org_res_df.tail(5))\n","\n","# break\n","\n","\n","shift_size = -4\n","# shift_size = -1\n","# shift_size = -7\n","# shift_size = +3\n","\n","res_df['min_upper'] = res_df['min_upper'].shift(shift_size)\n","res_df['max_lower'] = res_df['max_lower'].shift(shift_size)\n","res_df['minor_ST1_Trend'] = res_df['minor_ST1_Trend'].shift(shift_size)\n","res_df['minor_ST2_Trend'] = res_df['minor_ST2_Trend'].shift(shift_size)\n","res_df['minor_ST3_Trend'] = res_df['minor_ST3_Trend'].shift(shift_size)\n","res_df['middle_line'] = res_df['middle_line'].shift(shift_size)\n","\n","print(res_df.tail(5))"]},{"cell_type":"markdown","metadata":{"id":"2gxvme1PC6ha"},"source":["### load model"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5831,"status":"ok","timestamp":1628862368878,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"dtYdAuSsC72_","outputId":"e8dccc53-aaa7-4bab-ed8d-753f634c08d6"},"outputs":[{"name":"stdout","output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/resnet/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5\n","94773248/94765736 [==============================] - 1s 0us/step\n"]}],"source":["# model_name = 'inner_tick_cnnreg_lscalemm_prefee_gpu_%s_%s_%s_%s_%s.h5'\n","\n","# model = tf.keras.models.load_model(ckpt_path + model_name)\n","\n","from tensorflow.keras.applications.resnet50 import ResNet50\n","\n","model = ResNet50(weights='imagenet', include_top=False)\n","# model.summary()\n"]},{"cell_type":"markdown","metadata":{"id":"5la6usMOFzkX"},"source":["#### gen selected vector"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oQk3-jbKF8FB"},"outputs":[],"source":["def min_max_scale(npy_x):\n","\n","  return (npy_x - np.min(npy_x)) / (np.max(npy_x) - np.min(npy_x))\n","\n","def expand_dims(npy_x):\n","\n","  row, col = npy_x.shape\n","  npy_x2 = np.array(npy_x).reshape(-1, row, col, 1).astype(np.float32)\n","  # input_x = np.array(data_x).reshape(-1, row, col).astype(np.float32)\n","\n","  #     1c to 3c    #\n","  npy_x3 = npy_x2 * np.ones(3, dtype=np.float32)[None, None, None, :]\n","\n","  return npy_x3\n","\n","\n","def vector_dist(f1, f2):\n","  return np.linalg.norm(f1-f2)\n","\n","\n","\n","# ------------------------ params ------------------------  #\n","selected_i = 500\n","input_size = 100\n","\n","\n","\n","#   1. ÏÑ†ÌÉùÎêú Ïù∏Îç±Ïä§Î•º ÏûÖÎ†•Î∞õÏïòÏùÑ Îïå, input generating ÌòïÌÉúÎßå ÎßåÎì§Ïñ¥ÎÜìÍ≥†,     #\n","#   1-1. input cols ÌïÑÏöîÌï®    #\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower']\n","# senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","# senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","\n","sma_list = ['sma']\n","\n","#     -------------- outer price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","cctbbo_list = ['cctbbo']\n","\n","selected_price_colname = basic_list + senkoua_list + senkoub_list + sar_list\n","selected_outprice_colname = [macd_list]\n","\n","\n","#         global scaling for outer price data       #\n","#         1. nan Ï≤òÎ¶¨       #\n","\n","# # print((np.isnan(df.values)))\n","# print(\"np.sum(np.isnan(df.values), axis=0) :\", np.sum(np.isnan(df.values), axis=0))\n","\n","# max_nan = np.max(np.sum(np.isnan(df.values), axis=0))\n","# # print(max_nan)\n","\n","# df = df.iloc[max_nan:-max_nan]\n","\n","# total_gdata = []\n","# for g_col in selected_outprice_colname:\n","\n","#   temp_data = min_max_scale(res_df[g_col])\n","#   total_gdata.append(temp_data)\n","\n","\n","\n","#   1-2. cols Ïóê Îî∞Î•∏, scaling method Íµ¨Î∂ÑÌï®    #\n","onprice_input_x = min_max_scale(res_df[selected_price_colname].iloc[selected_i - input_size:selected_i].values)\n","print(onprice_input_x.shape)\n","\n","\n","#   2. plot_check ÏóêÏÑú Î≥∏Ïù∏Ïù¥ ÏõêÌïòÎäî shape Ïùò Ïù∏Îç±Ïä§Î•º ÏÑ†ÌÉù   #\n","#   3. vertorize, \n","#   3-1. input generator Î•º Ïù¥Ïö©Ìï¥ entry signal Î∞úÏÉùÌï† ÎïåÎßàÎã§ dist ÎπÑÍµê ÏßÑÌñâ    #\n","re_onprice_input_x = expand_dims(onprice_input_x)\n","print(re_onprice_input_x.shape)\n","      \n","# break\n","\n","selected_vector = model.predict(re_onprice_input_x, verbose=1)\n","print(selected_vector.shape)"]},{"cell_type":"markdown","metadata":{"id":"OJqkmkpsLCYC"},"source":["### tr_tresh calc"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":446,"status":"ok","timestamp":1636015063790,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"gcpo4MGd9Wm4","outputId":"434b56b3-3a3c-45c1-f559-42681fea5f05"},"outputs":[{"name":"stdout","output_type":"stream","text":["res_wr : 0.6\n","tr_thresh : 0.6766666666666667\n","[0.95, 1.0338333333333334, 0.95, 0.95, 1.0338333333333334, 0.95, 0.95, 1.0338333333333334, 0.95, 1.0338333333333334]\n","\n","Î≥µÎ¶¨Î•º ÏúÑÌïú tr_thresh_ : 1.0\n","np.cumprod(test_trade_list)[-1] : 0.5751227991397774\n","total_pr :  0.5751227991397774\n","\n","[-0.05        0.03383333 -0.05       -0.05        0.03383333 -0.05\n"," -0.05        0.03383333 -0.05        0.03383333]\n","Îã®Î¶¨Î•º ÏúÑÌïú tr_thresh_ : 1.0\n","np.cumsum(np_test_trade)[-1] : 0.30000000000001137\n","total_pr :  1.3000000000000114\n"]}],"source":["res_wr = 0.6\n","# tr_thresh = 1\n","# tr_thresh = ((1 - res_wr) / res_wr) ** 0.5\n","tr_thresh = ((1 - res_wr) / res_wr) + 0.01\n","# tr_thresh = 2.6\n","print(\"res_wr :\", res_wr)\n","print(\"tr_thresh :\", tr_thresh)\n","\n","\n","#   Îã®Î¶¨    #\n","trade_num = 1000\n","asset = 1 # thousand USDT\n","test_loss_gap = 0.95  # fee adjusted\n","test_pr_gap = 1 + (1 - test_loss_gap) * tr_thresh\n","\n","test_loss_cnt = trade_num * (1 - res_wr)\n","test_pr_cnt = trade_num * res_wr\n","\n","test_trade_list = [test_pr_gap] * int(test_pr_cnt) + [test_loss_gap] * int(test_loss_cnt)\n","random.shuffle(test_trade_list)\n","# print(\"len(test_trade_list) :\", len(test_trade_list))\n","print(test_trade_list[:10])\n","print()\n","\n","# print(\"%.5f\" % np.cumprod(test_trade_list)[-1])\n","for tr_thresh_ in np.arange(1, 3, 0.2):\n","  if (1 + (1 - test_loss_gap) * tr_thresh_) ** test_pr_cnt * test_loss_gap ** test_loss_cnt > 1:\n","    break\n","print(\"Î≥µÎ¶¨Î•º ÏúÑÌïú tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumprod(test_trade_list)[-1] :\", np.cumprod(test_trade_list)[-1])\n","print(\"total_pr : \", np.cumprod(test_trade_list)[-1])\n","print()\n","#   Î≥µÎ¶¨ tr_thresh  #\n","#   1. trade_num Ïóê ÏòÅÌñ• Î∞õÏßÄ ÏïäÏùå\n","#   2. loss_gap Ïóê ÎπÑÎ°ÄÌï®\n","\n","for tr_thresh_ in np.arange(1, 3, 0.01):\n","  if ((1 - test_loss_gap) * tr_thresh_) * test_pr_cnt + (test_loss_gap - 1) * test_loss_cnt > 0:\n","    break\n","np_test_trade = np.array(test_trade_list) - 1\n","print(np_test_trade[:10])\n","# print(\"%.3f\" % )\n","print(\"Îã®Î¶¨Î•º ÏúÑÌïú tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumsum(np_test_trade)[-1] :\", np.cumsum(np_test_trade)[-1])\n","print(\"total_pr : \", 1 + np.cumsum(np_test_trade)[-1])\n"]},{"cell_type":"markdown","metadata":{"id":"JNQxkb06ZdTe"},"source":["# traded section plot"]},{"cell_type":"markdown","metadata":{"id":"UmH_Pb5BZUtm"},"source":["## plot with off-color st with dash"]},{"cell_type":"markdown","metadata":{"id":"5z4L3MMYmUI0"},"source":["### sorted plot_check"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Qv1MM2MemZnF","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"error","timestamp":1640921788005,"user_tz":-540,"elapsed":63920,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"95ae9c21-b541-4204-a766-cb08b836c3b8"},"outputs":[],"source":["assert len(open_list) == len(trade_list), \"len(open_list) != len(trade_list)\"\n","assert len(tp_state_list) == len(fee_list), \"len(tp_state_list) != len(fee_list)\"\n","\n","if multi_mode:\n","  strat_version = \"v3\"\n","\n","save_plot = 0\n","tf_plot = 0\n","pr_sort = 1     # Ïù¥ÏÉÅÌïú Ï≤¥Í≤∞ ÌôïÏù∏ÌïòÍ∏∞ Ï¢ãÏùå\n","pr_descend = 1  # 1 -> ÎÇ¥Î¶ºÏ∞®Ïàú\n","# wl_case = 1     # 1 / -1 / 0 (win loss study)\n","position = 1    # -1 / 1 / 0 (short / long / both)\n","\n","inversion = 0\n","hedge = 0\n","\n","\n","if save_plot:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".ftr\", \"\")\n","  try:\n","    os.mkdir(plot_check_dir)\n","  except:\n","\n","    #     remove existing dir   #\n","    shutil.rmtree(plot_check_dir)\n","    print(plot_check_dir, 'removed !')\n","    os.mkdir(plot_check_dir)\n","    # pass\n","    \n","\n","prev_plotsize = 130\n","post_plotsize = 120\n","\n","\n","if position == -1:\n","  position = config.ep_set.short_entry_score\n","elif position == 1:\n","  position = -config.ep_set.short_entry_score\n","\n","\n","if inversion:  \n","\n","    plot_pr_list = rev_np_pr\n","    h_plot_pr_list = h_rev_np_pr  # hedge\n","\n","else:\n","\n","    plot_pr_list = np_pr\n","    try:\n","      h_plot_pr_list = h_np_pr\n","    except Exception as e:\n","      print(\"error in h_plot_pr :\", e)\n","      h_plot_pr_list = np_pr\n","\n","\n","h_candle_intv1 = 15\n","h_candle_intv2 = 60\n","if 'hopen_{}'.format(h_candle_intv2) not in res_df.columns:\n","  res_df = h_candle(res_df, h_candle_intv1)\n","  res_df = h_candle(res_df, h_candle_intv2)\n","\n","res_df[\"ma30_1m\"] = res_df['close'].rolling(30).mean()\n","res_df[\"ma60_1m\"] = res_df['close'].rolling(60).mean()\n","\n","res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line)\n","# res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=1, use_dtk_line=1)\n","# break\n","\n","rtc_list = [\"short_tp_1_{}\".format(strat_version), \"short_tp_gap_{}\".format(strat_version), \"long_tp_1_{}\".format(strat_version), \"long_tp_gap_{}\".format(strat_version)]\n","# h_rtc_list = [\"h_short_tp_1\", \"h_short_tp_gap\", \"h_long_tp_1\", \"h_long_tp_gap\"]\n","dtk_list = [\"short_dtk_1_{}\".format(strat_version), \"short_dtk_gap_{}\".format(strat_version), \"long_dtk_1_{}\".format(strat_version), \"long_dtk_gap_{}\".format(strat_version),\n","            # \"short_dtk_1_line\", \"short_dtk_gap_line\", \"long_dtk_1_line\", \"long_dtk_gap_line\",\n","            \"short_dtk_plot_1\", \"short_dtk_plot_gap\", \"long_dtk_plot_1\", \"long_dtk_plot_gap\"]\n","dc_v2_list = ['dc_upper_v2_{}'.format(strat_version), 'dc_lower_v2_{}'.format(strat_version)]\n","\n","\n","ohlc_list = ['open', 'high', 'low', 'close'] # + basic_st_list\n","hcandle_list = ['hopen_%s' % h_candle_intv1, 'hclose_%s' % h_candle_intv1, 'hopen_%s' % h_candle_intv2, 'hclose_%s' % h_candle_intv2]\n","# hcandle_list = ['hopen_%s' % h_candle_intv1, 'hclose_%s' % h_candle_intv1, 'hhigh_%s' % h_candle_intv2, 'hlow_%s' % h_candle_intv2]\n","\n","# --------------------- dc & bb level --------------------- #\n","dc_interval = '1m'\n","hdc_interval = '5m'\n","hhdc_interval = '15m'\n","\n","dc_list = ['dc_upper_%s' % dc_interval, 'dc_lower_%s' % dc_interval]\n","hdc_list = ['dc_upper_%s' % hdc_interval, 'dc_lower_%s' % hdc_interval]\n","hhdc_list = ['dc_upper_%s' % hhdc_interval, 'dc_lower_%s' % hhdc_interval]\n","\n","bb_interval = dc_interval\n","hbb_interval = hdc_interval\n","hhbb_interval = hhdc_interval\n","\n","bb_list = ['bb_upper_%s' % bb_interval, 'bb_lower_%s' % bb_interval]\n","hbb_list = ['bb_upper_%s' % hbb_interval, 'bb_lower_%s' % hbb_interval]\n","hhbb_list = ['bb_upper_%s' % hhbb_interval, 'bb_lower_%s' % hhbb_interval]\n","\n","bbwp_list = ['bbwp', 'bbwp_ma']\n","\n","\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1']\n","senkoub_list = ['senkou_b1']\n","\n","sar_list = ['sar_3m', 'sar_5m', 'sar_15m']\n","\n","ma_list = ['ma30_1m', 'ma60_1m']\n","sma_list = ['sma_1m']\n","\n","ema_list = ['ema_5m']\n","# cb_list = ['cloud_bline_1m']\n","cb_list = ['cloud_bline_30m']\n","# cb_list = ['cloud_bline_5m']\n","\n","\n","\n","# -------------- under price phase -------------- #\n","# macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3']\n","# trix_list = ['trix1', 'trix2', 'trix3']\n","# stoch_list = ['stoch_5m']\n","# fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","# cctbbo_list = ['cctbbo']\n","# emaroc_list = ['ema_roc']\n","rsi_list = ['rsi_%s' % config.loc_set.point.exp_itv] \n","cci_list = ['cci_%s' % config.loc_set.point.exp_itv] \n","\n","\n","# -------------- summation -------------- #\n","# input_colname = ohlc_list + basic_st_list + pline_list + bb_list + hbb_list + sma_list + cb_list + stoch_list + sar_list + dc_list\n","input_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + hhdc_list + dtk_list + dc_v2_list + rsi_list + ema_list + cci_list + ma_list\n","\n","# yrange_colname = ohlc_list + basic_st_list + pline_list # currently just used for ymin, ymax\n","yrange_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + hhdc_list + dc_v2_list + ema_list # currently just used for ymin, ymax\n","yrange_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + dc_v2_list + ema_list # currently just used for ymin, ymax\n","\n","\n","# aggr_obj = dict(zip(plot_pr_list, open_list, enumerate(trade_list)))\n","aggr_obj = dict(zip(plot_pr_list, zip(open_list, enumerate(trade_list))))\n","sorted_obj = sorted(aggr_obj.items(), key=(lambda x: x[0]), reverse=pr_descend)\n","\n","# print(aggr_obj)\n","# print(sorted_obj)\n","\n","if pr_sort:\n","  iter_obj = sorted_obj\n","else:\n","  iter_obj = aggr_obj.items()\n","\n","odd_cnt = 0\n","obj_i = -1\n","rev_obj_i = 0\n","len_obj = len(sorted_obj)\n","\n","#   ÏßÄÍ∏à, continue Î∞úÏÉùÏãú true / false idx Í∞Ä Í∞ôÏù¥ ÏÉÅÏäπÌïòÎäî Î¨∏Ï†ú\n","\n","# for temp_pr, (open_idx, (t_i, (ep_idx_list_, tp_idx_list_))) in iter_obj:  # 0.699700153073042, (291402, (3014, ([370012], [370014])))\n","# for obj_i, (temp_pr, (open_idx, (t_i, (ep_idx_list_, out_idx_list_, tp_idx_list_)))) in enumerate(iter_obj):  # 0.699700153073042, (291402, (3014, ([370012], [370014])))\n","# for temp_pr, (open_idx, (t_i, (ep_idx_list_, out_idx_list_, tp_idx_list_))) in iter_obj:  # 0.699700153073042, (291402, (3014, ([370012], [370014])))\n","\n","while 1:\n","\n","  if obj_i >= len_obj or rev_obj_i >= len_obj:\n","    break\n","\n","  if odd_cnt % 2 == 1 and tf_plot: #  loss plot ÏùÑ Ï±ÑÏõåÏïºÌïòÎäî ÏÉÅÌô©\n","    rev_obj_i += 1\n","    temp_pr, (open_idx, (t_i, (ep_idx_list_, out_idx_list_, tp_idx_list_))) = sorted_obj[-rev_obj_i]\n","    if temp_pr > 1.0:\n","      continue  \n","\n","  else:\n","    obj_i += 1\n","    temp_pr, (open_idx, (t_i, (ep_idx_list_, out_idx_list_, tp_idx_list_))) = sorted_obj[obj_i]\n","    if temp_pr < 1.0:\n","      continue  \n","\n","  if not(i >= prev_plotsize):\n","    continue\n","  \n","  #   open size indexing by open_idx    #\n","  open_side = res_df['entry_{}'.format(strat_version)].iloc[open_idx]\n","\n","  # ---------- const. zone ---------- #\n","\n","  if position != 0:\n","    if open_side != position:\n","      continue\n","\n","  if multi_mode:\n","    if not strat_version in tp_state_list[t_i]:\n","    # if tp_state_list[t_i] != 'long close tp':\n","    # if tp_state_list[t_i] != 's-long_tp':\n","      continue\n","\n","  # if open_idx == 63901:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","\n","  # if tp_ratio_list[t_i] > 0.4:\n","  #   continue\n","\n"," \n","  # print(\"open_idx :\", open_idx)\n","  print(\"open_side :\", open_side)\n","  print(\"np_timeidx[open_idx] :\", np_timeidx[open_idx])\n","  print(\"open_idx, ep_idx_list_[0], tp_idx_list_[-1] :\", open_idx, ep_idx_list_[0], tp_idx_list_[-1])\n","  #   const. Ïóê Ìï©ÌïòÎäî Ï°∞Í±¥ ÎÇòÏò¨ÎïåÍπåÏßÄ loop ÎèåÎ¶¨Í≥†, const. phase ÌÜµÍ≥ºÏãú odd_cnt += 1,\n","  #   => odd_cnt Î°ú gs_plot ÏùÑ Ï±ÑÏö¥Îã§Îäî ÎäêÎÇå \n","  #   odds = 1 -> wl_case == 1 Îßå ÌóàÏö©, odds = 2 -> wl_case == -1 Îßå ÌóàÏö©\n","  odd_cnt += 1\n","\n","  # break\n","\n","  plot_df = res_df.iloc[open_idx - prev_plotsize:tp_idx_list_[-1] + post_plotsize][input_colname]\n","\n","\n","  #       keep off-color st with another variable         #\n","  # st_trend_plot_df = res_df[['ST1_Trend%s' % basic_st_interval, 'ST2_Trend%s' % basic_st_interval, 'ST3_Trend%s' % basic_st_interval]].iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","\n","  # fig = trendln.plot_support_resistance(plot_df['close'], accuracy=8, fromwindows=0, numbest=1,  window=30) # requires matplotlib - pip install matplotlib\n","  \n","  odds = 1 if odd_cnt % 2 == 1 else 2\n","  if odds == 1:\n","\n","    plt.style.use('dark_background')\n","\n","    fig = plt.figure(figsize=(26, 18))\n","    \n","    gs = gridspec.GridSpec(nrows=2, # row Î™á Í∞ú \n","                        ncols=2, # col Î™á Í∞ú \n","                        height_ratios=[3, 1]\n","                        )\n","    \n","  ax = fig.add_subplot(gs[odds - 1])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='#26a69a', colordown='#ef5350', alpha=0.5)\n","\n","  # ---------- h_candle ---------- #\n","  alpha = 1\n","  lw = 1\n","  for cd_i, candle in enumerate(hcandle_list):\n","\n","    if cd_i == 2:\n","      lw = 2      \n","    plt.step(np.arange(len(plot_df)), plot_df[candle].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","\n","  # alpha = 0.1\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['hclose_60'].values, plot_df['hopen_60'].values, \n","  #                     where=1, facecolor='#ffffff', alpha=alpha)  \n","  \n","\n","   # --------- ma --------- #\n","  alpha = 1\n","  lw = 2\n","  for ma_i, item in enumerate(ma_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","   # --------- ema --------- #\n","  alpha = 1\n","  lw = 4\n","  for sm_i, item in enumerate(ema_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","    \n","  # ---------------------- dc_v2 ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(dc_v2_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","  # ---------------------- dc ---------------------- #\n","  alpha = 1\n","  lw = 2\n","  for sm_i, item in enumerate(dc_list):\n","      plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","  # ---------------------- hdc ---------------------- #\n","  alpha = 1\n","  lw = 2\n","  for sm_i, item in enumerate(hdc_list):\n","      plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#e65100', linewidth=lw)\n","\n","  # ---------------------- hhdc ---------------------- #\n","  alpha = 1\n","  lw = 4\n","  for sm_i, item in enumerate(hhdc_list):\n","      plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#c2185b', linewidth=lw)\n","\n","\n","  # ---------------------- bb ---------------------- #\n","  alpha = 1\n","  lw = 1\n","  for sm_i, item in enumerate(bb_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","\n","  alpha = 0.2\n","  plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % bb_interval].values, plot_df['bb_lower_%s' % bb_interval].values, \n","                      where=plot_df['bb_upper_%s' % bb_interval].values >= plot_df['bb_lower_%s' % bb_interval].values, facecolor='#ffffff', alpha=alpha)   \n","\n","  # ---------------------- hbb ---------------------- #\n","  alpha = 1\n","  lw = 2\n","  for sm_i, item in enumerate(hbb_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ff00ff', linewidth=lw)\n","  \n","  alpha = 0.2\n","  plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % hbb_interval].values, plot_df['bb_lower_%s' % hbb_interval].values, \n","                      where=plot_df['bb_upper_%s' % hbb_interval].values >= plot_df['bb_lower_%s' % hbb_interval].values, facecolor='#ff00ff', alpha=alpha) \n","  \n","  # ---------------------- hhbb ---------------------- #\n","\n","  alpha = 1\n","  lw = 4\n","  for sm_i, item in enumerate(hhbb_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#3179f5', linewidth=lw)\n","  \n","  alpha = 0.2\n","  plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % hhbb_interval].values, plot_df['bb_lower_%s' % hhbb_interval].values, \n","                      where=plot_df['bb_upper_%s' % hhbb_interval].values >= plot_df['bb_lower_%s' % hhbb_interval].values, facecolor='#3179f5', alpha=alpha) \n","  \n","  # ------------------- dtk_line (old, tp_line) ------------------- #\n","  \n","  # alpha = 1\n","  # lw = 2\n","  # rtc_ratio_list = [config.loc_set.zone.dt_k]\n","  \n","  # for rtc_k in rtc_ratio_list:    \n","  #   # plt.step(np.arange(len(plot_df)), plot_df['short_dtk_1_line'].values - plot_df['short_dtk_gap_line'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['long_dtk_1_line'].values + plot_df['long_dtk_gap_line'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","\n","  # hy_min = np.min(plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * rtc_k)\n","  # hy_max = np.max(plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * rtc_k)  \n","\n","  # alpha = 1\n","  # lw = 4\n","  # # h_rtc_ratio_list = [config.loc_set.zone.dt_k]\n","  # h_rtc_ratio_list = [config.loc_set.zone.zone_dt_k]\n","  # # h_rtc_ratio_list = [0.272, 0.36, 0.4, 0.5]\n","  \n","  # for h_rtc_k in h_rtc_ratio_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df['short_dtk_plot_1'].values - plot_df['short_dtk_plot_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['long_dtk_plot_1'].values + plot_df['long_dtk_plot_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['h_short_tp_1'].values - plot_df['h_short_tp_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['h_long_tp_1'].values + plot_df['h_long_tp_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","\n","  # # hy_min = np.min(plot_df['short_dtk_plot_1'].values - plot_df['short_dtk_plot_gap'].values * h_rtc_k)\n","  # # hy_max = np.max(plot_df['long_dtk_plot_1'].values + plot_df['long_dtk_plot_gap'].values * h_rtc_k)  \n","\n","  # ------------------------------------------------------------- #\n","\n","\n","  # ------------- ep ------------- #\n","  # if i != initial_i:\n","  # if len(ep_idx_list_) > 1:\n","  \n","    #        initial order         #\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='#ffeb3b')\n","  plt.axvline(prev_plotsize, alpha=0.5, linestyle='--', color='#ffeb3b')\n","\n","  for ep_i in range(len(ep_idx_list_)):\n","    # plt.axvline(prev_plotsize + (ep_idx_list_[ep_i] - ep_idx_list_[0]), alpha=0.7, linestyle='--', color='#ffeb3b')\n","    plt.axvline(prev_plotsize + (ep_idx_list_[ep_i] - open_idx), alpha=0.7, linestyle='--', color='#ffeb3b')\n","\n","  # plt.axvline(prev_plotsize, alpha=0.5, linestyle='--')\n","\n","  x0,x1 = plt.gca().get_xlim()\n","\n","  # ep_xmin = (prev_plotsize + (ep_idx_list_[ep_i] - ep_idx_list_[0])) / x1\n","  ep_xmin = (prev_plotsize + (ep_idx_list_[ep_i] - open_idx)) / x1\n","  plt.axhline(ep_tp_list[t_i][0], linestyle='--', xmin=ep_xmin, xmax=1, alpha=1, color='lime')  # ep line axhline  \n","  plt.text(x1, ep_tp_list[t_i][0][0], ' ep :\\n %s' % ep_tp_list[t_i][0][0], ha='left', va='center', fontweight='bold') # ep line label\n","\n","  \n","  # ------------- tp ------------- #\n","  for sub_i in range(len(ep_tp_list[t_i][1])):\n","\n","    # tp_xmin = (prev_plotsize + (tp_idx_list_[sub_i] - ep_idx_list_[0])) / x1\n","    tp_xmin = (prev_plotsize + (tp_idx_list_[sub_i] - open_idx)) / x1\n","    plt.axhline(ep_tp_list[t_i][1][sub_i], linestyle='--', xmin=tp_xmin , xmax=1, alpha=1, color='lime')  # tp line axhline\n","    plt.text(x1, ep_tp_list[t_i][1][sub_i], ' tp :\\n %s' % ep_tp_list[t_i][1][sub_i], ha='left', va='center', fontweight='bold') # tp line label\n","     \n","    # plt.axvline(prev_plotsize + (tp_idx_list_[sub_i] - ep_idx_list_[0]), alpha=1., linestyle='--', color='#ffeb3b', zorder=2)\n","    plt.axvline(prev_plotsize + (tp_idx_list_[sub_i] - open_idx), alpha=1., linestyle='--', color='#ffeb3b', zorder=2)\n","\n","\n","  # ------------- rtc horizontal range ------------- # --> open_idx Î°ú Ìï†ÏßÄÎäî Ï∂îÌõÑ ÏàòÏ†ï Í∂åÍ≥† (ep_loc.point2 Ïóê ÏùòÌï¥ ÏßÑÏûÖ Í∏∞Ï§Ä point Í∞Ä Î≥ÄÍ≤ΩÎê† Ïàò ÏûàÏùå)\n","  # rtc_ratio_list = [0.272, 0.36, 0.4, 0.5]\n","  rtc_ratio_list = [0.]\n","  if open_side == config.ep_set.short_entry_score:\n","    # plt.axhline(res_df['short_rtc_1'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    # plt.axhline(res_df['short_rtc_0'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    out_line = res_df['short_out_{}'.format(strat_version)].iloc[out_idx_list_[0]]\n","    plt.axhline(out_line, linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    plt.text(x0, out_line, ' %s' % config.tr_set.out_gap, ha='left', va='center', fontweight='bold')\n","\n","    for rtc_k in rtc_ratio_list:\n","      plt.axhline(res_df['h_short_rtc_1_{}'.format(strat_version)].iloc[open_idx] - res_df['h_short_rtc_gap_{}'.format(strat_version)].iloc[open_idx] * rtc_k, linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","      plt.text(x0, res_df['h_short_rtc_1_{}'.format(strat_version)].iloc[open_idx] - res_df['h_short_rtc_gap_{}'.format(strat_version)].iloc[open_idx] * rtc_k, ' %s' % rtc_k, ha='left', va='center', fontweight='bold')\n","      \n","    y_max = out_line\n","    y_min = res_df['h_short_rtc_1_{}'.format(strat_version)].iloc[tp_idx_list_[-1]] - res_df['h_short_rtc_gap_{}'.format(strat_version)].iloc[tp_idx_list_[-1]] * rtc_k\n","\n","    print(\"short_tp :\", res_df['short_tp_{}'.format(strat_version)].iloc[tp_idx_list_[-1]])\n","    print(\"short_out :\", out_line)\n","\n","  else:\n","    # plt.axhline(res_df['long_rtc_1'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    # plt.axhline(res_df['long_rtc_0'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff') \n","    out_line = res_df['long_out_{}'.format(strat_version)].iloc[out_idx_list_[0]]\n","    plt.axhline(out_line, linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    plt.text(x0, out_line, ' %s' % config.tr_set.out_gap, ha='left', va='center', fontweight='bold')\n","\n","    for rtc_k in rtc_ratio_list:\n","      plt.axhline(res_df['h_long_rtc_1_{}'.format(strat_version)].iloc[open_idx] + res_df['h_long_rtc_gap_{}'.format(strat_version)].iloc[open_idx] * rtc_k, linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","      plt.text(x0, res_df['h_long_rtc_1_{}'.format(strat_version)].iloc[open_idx] + res_df['h_long_rtc_gap_{}'.format(strat_version)].iloc[open_idx] * rtc_k, ' %s' % rtc_k, ha='left', va='center', fontweight='bold')\n","\n","    y_max = res_df['h_long_rtc_1_{}'.format(strat_version)].iloc[tp_idx_list_[-1]] + res_df['h_long_rtc_gap_{}'.format(strat_version)].iloc[tp_idx_list_[-1]] * rtc_k\n","    y_min = out_line\n","\n","    print(\"long_tp :\", res_df['long_tp_{}'.format(strat_version)].iloc[tp_idx_list_[-1]])\n","    print(\"long_out :\", out_line)\n","  \n","    # t_tr = ((res_df['long_tp'].iloc[open_idx] - res_df['close'].iloc[open_idx] - tp_fee * res_df['close'].iloc[open_idx]) / (res_df['close'].iloc[open_idx] - res_df['long_out'].iloc[open_idx] + out_fee * res_df['close'].iloc[open_idx]))\n","    # t_dr = ((res_df['long_tp'].iloc[open_idx] - res_df['close'].iloc[open_idx]) / (res_df['close'].iloc[open_idx] - res_df['long_out'].iloc[open_idx]))     \n","    # print(\"t_tr :\", t_tr)\n","    # print(\"t_dr :\", t_dr)\n","\n","  #         hedge ep & tp         #\n","  h_i = h_trade_list[t_i][1]\n","  if h_i is not None:\n","    # plt.axvline(prev_plotsize + (h_i - ep_idx_list_[0]), linestyle='--')\n","    plt.axvline(prev_plotsize + (h_i - open_idx), linestyle='--')\n","    plt.axhline(h_ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='magenta')  # ep line axhline\n","    plt.axhline(h_ep_tp_list[t_i][1], linestyle='-', xmin=0.85, xmax=1, linewidth=3, color='magenta')  # tp line axhline\n","\n","  \n","  #         check pr        #\n","  if not config.lvrg_set.static_lvrg:\n","    \n","    #   list length Îßå sync ÎßûÏúºÎ©¥ t_i Í±±Ï†ï ÏïàÌï¥ÎèÑÎê®, zip Ìï¥ÏÑú ÏàúÏÑúÍ∞Ä Î∞îÎÄåÏóàÏùÑ Îøê, original serialized order ÏóêÏÑú t_i Î°ú indexing ÌïòÎäî Í≤ÉÎøêÏûÑ   #\n","    plt.title(\"%s ~ %s -> %.5f\\n %s\\n h_pr : %.5f\\n lvrg : %s\\ntp_ratio : %.3f\\n dr : %.3f\\n fee : %.4f\" % (ep_idx_list_[0], tp_idx_list_[-1], plot_pr_list[t_i], tp_state_list[t_i], \n","                                                                                                h_plot_pr_list[t_i], leverage_list[t_i], tp_ratio_list[t_i], dr_list[t_i], fee_list[t_i]))\n","\n","    print(\"short real pr :\", (ep_tp_list[t_i][0] / ep_tp_list[t_i][1][sub_i] - fee_list[t_i] - 1) * leverage_list[t_i] + 1)\n","    print(\"long real pr :\", (ep_tp_list[t_i][1][sub_i] / ep_tp_list[t_i][0] - fee_list[t_i] - 1) * leverage_list[t_i] + 1)    \n","\n","  else:\n","    plt.title(\"%s ~ %s -> %.5f\\n %s\\n h_pr : %.5f\\n tp_ratio : %.3f\\n dr : %.3f\\n fee : %.4f\" % (ep_idx_list_[0], tp_idx_list_[-1], plot_pr_list[t_i], tp_state_list[t_i], \n","                                                                                     h_plot_pr_list[t_i], tp_ratio_list[t_i], dr_list[t_i], fee_list[t_i]))\n","\n","    print(\"short real pr :\", (ep_tp_list[t_i][0] / ep_tp_list[t_i][1][sub_i] - fee_list[t_i] - 1) * config.lvrg_set.leverage + 1)\n","    print(\"long real pr :\", (ep_tp_list[t_i][1][sub_i] / ep_tp_list[t_i][0] - fee_list[t_i] - 1) * config.lvrg_set.leverage + 1)\n","  \n","  #           y lim           #  \n","  y_max_ = max(np.max(plot_df[yrange_colname]))\n","  y_min_ = min(np.min(plot_df[yrange_colname]))\n","  y_max = max(y_max, y_max_)\n","  y_min = min(y_min, y_min_)\n","  \n","  # hy_min = np.min(plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * 0.36)\n","  # hy_max = np.max(plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * 0.36)  \n","  # y_max = max(y_max, y_max_, hy_max)\n","  # y_min = min(y_min, y_min_, hy_min)\n","\n","  if np.isnan(y_max) or np.isnan(y_min):\n","    print('continued in yminmax')\n","    continue\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","\n","  plt.ylim(y_min, y_max)\n","\n","  #           x lim             #\n","  x_max = 500\n","  if len(plot_df) > x_max:\n","    plt.xlim(-10, x_max)\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  #           rsi          #    \n","  plt.subplot(gs[odds + 1])\n","  alpha = 1\n","  for rsi_ in rsi_list:\n","    plt.step(np.arange(len(plot_df)), plot_df[rsi_].values, 'g', alpha=alpha)\n","    # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","    alpha -= 0.2\n","  plt.axhline(50, linestyle='--')\n","  plt.axhline(rsi_upper, linestyle='--')\n","  plt.axhline(rsi_lower, linestyle='--')\n","  \n","  plt.axvline(prev_plotsize, linestyle='--')\n","  \n","  #           cci          #    \n","  # plt.subplot(gs[odds + 1])\n","  # alpha = 1\n","  # for cci_ in cci_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cci_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axhline(config.loc_set.point.osc_band, linestyle='--')\n","  # plt.axhline(-config.loc_set.point.osc_band, linestyle='--')\n","  \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","\n","\n","  #     vline open     #\n","  for ep_i in range(len(ep_idx_list_)):\n","    plt.axvline(prev_plotsize + (ep_idx_list_[ep_i] - open_idx), alpha=0.7, linestyle='--', color='#ffeb3b')\n","  \n","  #     vline close     #\n","  for sub_i in range(len(ep_tp_list[t_i][1])):\n","    plt.axvline(prev_plotsize + (tp_idx_list_[sub_i] - open_idx), alpha=1., linestyle='--', color='#ffeb3b', zorder=2)\n","\n","  if len(plot_df) > x_max:\n","    plt.xlim(-10, x_max)\n","\n","\n","  if not save_plot:\n","    if odds == 2:\n","      plt.show()\n","      plt.close()\n","  \n","  else:\n","    # ---------- save mode ---------- #\n","    fig_name = plot_check_dir +  \"/%s.png\" % t_i\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","\n","  # plt.close()  \n","  print()\n","\n","  # break\n"]},{"cell_type":"markdown","metadata":{"id":"13a-U32Uy50I"},"source":["### brief np_pr survey"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"L9LdjV2uUWnp"},"outputs":[],"source":["# plot_pr_list[:100]\n","\n","plt.plot(np_pr)\n","plt.axhline(1)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"TBE0l6dHRYrE"},"source":["### whole pr & chart sync"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":877},"executionInfo":{"elapsed":1436,"status":"ok","timestamp":1636355589887,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"-txULkhXRbz5","outputId":"7cda9fc7-4a4e-4c52-ffa3-a974b5f7c66f"},"outputs":[{"data":{"image/png":"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\n","text/plain":["<Figure size 640x480 with 3 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 3 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]}],"source":["#     chunky survey ÌïÑÏöîÌï®    #\n","chunk_size = 50000\n","\n","sync_pr = np.ones(len(res_df))\n","sync_tr = np.zeros(len(res_df))\n","# sync_tr = np.empty(len(res_df))\n","# sync_tr[:] = np.nan\n","\n","max_tr = np.max(tp_ratio_list)\n","min_tr = np.min(tp_ratio_list)\n","\n","for ck_i in range(0, len(res_df), chunk_size):\n","\n","  chunked_df = res_df.iloc[ck_i:ck_i + chunk_size]\n","  # break\n","\n","  for pr_, eptp_idx, tr_ in zip(pr_list[ck_i:ck_i + chunk_size], trade_list[ck_i:ck_i + chunk_size], tp_ratio_list[ck_i:ck_i + chunk_size]):\n","    # print(pr_, eptp_idx)\n","    sync_pr[eptp_idx[-1][0]] = pr_\n","    sync_tr[eptp_idx[-1][0]] = tr_\n","    # break\n","\n","  chunked_pr = sync_pr[ck_i:ck_i + chunk_size]\n","  chunked_tr = sync_tr[ck_i:ck_i + chunk_size]\n","  chunked_tr = np.where(np.isnan(chunked_tr), pd.Series(chunked_tr).shift(1), chunked_tr)\n","\n","  # plt.figure(figsize=(8, 6))\n","\n","  plt.subplot(311)\n","  plt.plot(np.arange(len(chunked_df)), chunked_df['close'])\n","  # plt.show()\n","\n","  plt.subplot(312)\n","  plt.plot(np.cumprod(chunked_pr))\n","  \n","  plt.subplot(313)\n","  plt.plot(chunked_tr)\n","  plt.ylim(min_tr + 0.5 * (max_tr - min_tr), max_tr)\n","  \n","  plt.show()\n","  print()\n"]},{"cell_type":"markdown","metadata":{"id":"Qys2Bw5Ou3u9"},"source":["### plot indi. legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pi5ntOOVu6JT"},"outputs":[],"source":["\n","  # ---------------------- ma ---------------------- #\n","   # --------- ema --------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(ema_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  #   # --------- sma --------- #\n","  # alpha = 1\n","  # for sm_i, sma in enumerate(sma_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 4\n","  #   plt.step(np.arange(len(plot_df)), plot_df[sma].values, alpha=alpha, color='#e91e63', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  \n","  # ---------------------- cb ---------------------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(cb_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#5b9cf6', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","\n","  \n","  # ---------------------- sar ---------------------- #\n","  # alpha = 1\n","  # markersize = 5\n","  # for sar in sar_list:\n","  #   plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","  #   markersize += 1\n","  #   alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  # alpha = 0.7\n","  # for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","  #                     where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","  #                     where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","  #   alpha -= 0.05\n","  \n","\n","\n","  # ---------------------- outer price indi. ---------------------- #\n","  #           macd          #\n","  # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","    \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for stoch_ in stoch_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[stoch_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(stoch_upper, linestyle='--')\n","  # plt.axhline(stoch_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- cctbbo ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for cctbbo in cctbbo_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cctbbo].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(cctbbo_upper, linestyle='--')\n","  # plt.axhline(cctbbo_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- ema_roc ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for emaroc in emaroc_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[emaroc].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","  \n","  # ---------- bbw ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for bbwp_ in bbwp_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[bbwp_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(bbwp_thresh, linestyle='--')\n","\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n"]},{"cell_type":"markdown","metadata":{"id":"59nW2aKYzkN8"},"source":["### plot all indicator (stepline ver.)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":828},"executionInfo":{"elapsed":3326,"status":"ok","timestamp":1631665238032,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"JDH4rXgNzno6","outputId":"3ee8589d-27d7-4433-ed78-7bb1233cf175"},"outputs":[{"name":"stdout","output_type":"stream","text":["short real pr : [0.95849245]\n","long real pr : [1.0378222]\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 864x1152 with 2 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]}],"source":["save_plot = False\n","\n","\n","if save_plot:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".xlsx\", \"\")\n","  try:\n","    os.mkdir(plot_check_dir)\n","  except:\n","\n","    #     remove existing dir   #\n","    shutil.rmtree(plot_check_dir)\n","    print(plot_check_dir, 'removed !')\n","    os.mkdir(plot_check_dir)\n","    # pass\n","    \n","# prev_plotsize = 120\n","prev_plotsize = 150\n","post_plotsize = 20\n","\n","# inversion = True\n","inversion = False\n","\n","# hedge = True\n","# hedge = False\n","\n","\n","if inversion:  \n","\n","    plot_pr_list = rev_np_pr\n","    h_plot_pr_list = h_rev_np_pr  # hedge\n","\n","else:\n","\n","    plot_pr_list = np_pr\n","    try:\n","      h_plot_pr_list = h_np_pr\n","    except Exception as e:\n","      print(\"error in h_plot_pr :\", e)\n","      h_plot_pr_list = np_pr\n","\n","\n","#         select plot columns       #\n","major_st_list = ['major_ST1_Up', 'major_ST1_Down', 'major_ST2_Up', 'major_ST2_Down', 'major_ST3_Up', 'major_ST3_Down',\n","                 'major_middle_line', 'major_upper_middle', 'major_lower_middle']\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower'] # + major_st_list\n","\n","\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1',  'senkou_a2']\n","senkoub_list = ['senkou_b1',  'senkou_b2']\n","\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1']\n","\n","# ma_list = ['sma1', 'sma4']\n","ma_list = ['ema5']\n","\n","\n","#     -------------- under price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","# macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3']\n","# trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","trix_list = ['trix1', 'trix2', 'trix3']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","cctbbo_list = ['cctbbo']\n","emaroc_list = ['ema_roc']\n","\n","\n","#       \n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols + ichimoku_cols2\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + trix_list\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + ma_list\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + ma_list + macd_list + stoch_list + fisher_list + cctbbo_list\n","input_colname = basic_list + major_st_list + senkoua_list + senkoub_list + sar_list + stoch_list + fisher_list + emaroc_list\n","price_colname = basic_list + senkoua_list + senkoub_list + sar_list # currently just used for ymin, ymax\n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols\n","\n","\n","\n","\n","# for t_i, (initial_i, i, j) in enumerate(trade_list):\n","for t_i, (ep_idx_list_, tp_idx_list_) in enumerate(trade_list):\n","  # print(i, j)\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","\n","  # if i <= 4860:\n","  # if i == 1536:\n","  # if 100 < i < 1860:\n","  if ep_idx_list_[0] == 370530:\n","    pass\n","  else:\n","    continue\n","\n","  # if tp_state_list[t_i] != 'd-open':\n","  #   continue\n","\n","  # if (entry[i] == -1) and res_df['close'].iloc[i - 1] > short_ep.iloc[i]:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  # if plot_pr_list[t_i] > 0.5:\n","  # if plot_pr_list[t_i] > 1.0:\n","  # # if plot_pr_list[t_i] < 1.0:\n","  #   continue\n","\n","  # plot_df = res_df.iloc[i - prev_plotsize:j + post_plotsize, input_cols]\n","  plot_df = res_df.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize][input_colname]\n","\n","\n","  #       keep off-color st with another variable         #\n","  # st_trend_plot_df = res_df.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize, [7, 10, 13]]\n","  # st_trend_plot_df = res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend']].iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  st_trend_plot_df = res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend', 'major_ST1_Trend', 'major_ST2_Trend', 'major_ST3_Trend']].iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  # htf_st_trend_plot_df = res_df[['major_ST1_Trend', 'major_ST2_Trend', 'major_ST3_Trend']].iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","\n","  # y_max = np.max(plot_df.iloc[:, [4, 6, 8]])\n","  # y_min = np.min(plot_df.iloc[:, [5, 7, 9]])\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  \n","  # y_max = max(np.max(plot_df.iloc[:, [4, 6, 8]]))\n","  # y_min = min(np.min(plot_df.iloc[:, [5, 7, 9]]))\n","  \n","  y_max = max(np.max(plot_df[price_colname]))\n","  y_min = min(np.min(plot_df[price_colname]))\n","\n","  if np.isnan(y_max) or np.isnan(y_min):\n","    continue\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","  \n","  plot_df[\"off_color_upper_st1\"] = np.where(st_trend_plot_df['minor_ST1_Trend'] == 1, plot_df['minor_ST1_Up'], np.nan)\n","  plot_df[\"off_color_upper_st2\"] = np.where(st_trend_plot_df['minor_ST2_Trend'] == 1, plot_df['minor_ST2_Up'], np.nan)\n","  plot_df[\"off_color_upper_st3\"] = np.where(st_trend_plot_df['minor_ST3_Trend'] == 1, plot_df['minor_ST3_Up'], np.nan)\n","  plot_df[\"off_color_lower_st1\"] = np.where(st_trend_plot_df['minor_ST1_Trend'] == -1, plot_df['minor_ST1_Down'], np.nan)\n","  plot_df[\"off_color_lower_st2\"] = np.where(st_trend_plot_df['minor_ST2_Trend'] == -1, plot_df['minor_ST2_Down'], np.nan)\n","  plot_df[\"off_color_lower_st3\"] = np.where(st_trend_plot_df['minor_ST3_Trend'] == -1, plot_df['minor_ST3_Down'], np.nan)\n","\n","  plot_df[\"off_color_upper_hst1\"] = np.where(st_trend_plot_df['major_ST1_Trend'] == 1, plot_df['major_ST1_Up'], np.nan)\n","  plot_df[\"off_color_upper_hst2\"] = np.where(st_trend_plot_df['major_ST2_Trend'] == 1, plot_df['major_ST2_Up'], np.nan)\n","  plot_df[\"off_color_upper_hst3\"] = np.where(st_trend_plot_df['major_ST3_Trend'] == 1, plot_df['major_ST3_Up'], np.nan)\n","  plot_df[\"off_color_lower_hst1\"] = np.where(st_trend_plot_df['major_ST1_Trend'] == -1, plot_df['major_ST1_Down'], np.nan)\n","  plot_df[\"off_color_lower_hst2\"] = np.where(st_trend_plot_df['major_ST2_Trend'] == -1, plot_df['major_ST2_Down'], np.nan)\n","  plot_df[\"off_color_lower_hst3\"] = np.where(st_trend_plot_df['major_ST3_Trend'] == -1, plot_df['major_ST3_Down'], np.nan)\n","\n","\n","  #       replace st values with np.nan, using st trend     #\n","  plot_df['minor_ST1_Up'] = np.where(st_trend_plot_df['minor_ST1_Trend'] == 1, np.nan, plot_df['minor_ST1_Up'])\n","  plot_df['minor_ST2_Up'] = np.where(st_trend_plot_df['minor_ST2_Trend'] == 1, np.nan, plot_df['minor_ST2_Up'])\n","  plot_df['minor_ST3_Up'] = np.where(st_trend_plot_df['minor_ST3_Trend'] == 1, np.nan, plot_df['minor_ST3_Up'])\n","  plot_df['minor_ST1_Down'] = np.where(st_trend_plot_df['minor_ST1_Trend'] == -1, np.nan, plot_df['minor_ST1_Down'])\n","  plot_df['minor_ST2_Down'] = np.where(st_trend_plot_df['minor_ST2_Trend'] == -1, np.nan, plot_df['minor_ST2_Down'])\n","  plot_df['minor_ST3_Down'] = np.where(st_trend_plot_df['minor_ST3_Trend'] == -1, np.nan, plot_df['minor_ST3_Down'])\n","\n","  plot_df['major_ST1_Up'] = np.where(st_trend_plot_df['major_ST1_Trend'] == 1, np.nan, plot_df['major_ST1_Up'])\n","  plot_df['major_ST2_Up'] = np.where(st_trend_plot_df['major_ST2_Trend'] == 1, np.nan, plot_df['major_ST2_Up'])\n","  plot_df['major_ST3_Up'] = np.where(st_trend_plot_df['major_ST3_Trend'] == 1, np.nan, plot_df['major_ST3_Up'])\n","  plot_df['major_ST1_Down'] = np.where(st_trend_plot_df['major_ST1_Trend'] == -1, np.nan, plot_df['major_ST1_Down'])\n","  plot_df['major_ST2_Down'] = np.where(st_trend_plot_df['major_ST2_Trend'] == -1, np.nan, plot_df['major_ST2_Down'])\n","  plot_df['major_ST3_Down'] = np.where(st_trend_plot_df['major_ST3_Trend'] == -1, np.nan, plot_df['major_ST3_Down'])\n","\n","\n","  plot_short_ep = short_ep.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  plot_long_ep = long_ep.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","\n","  plot_upper_middle = (plot_df['middle_line'] + plot_df['min_upper']) / 2\n","  plot_lower_middle = (plot_df['middle_line'] + plot_df['max_lower']) / 2\n","\n","  plot_short_tp = short_tp.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  plot_long_tp = long_tp.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]  \n","\n","\n","  # fig = trendln.plot_support_resistance(plot_df['close'], accuracy=8, fromwindows=False, numbest=1,  window=30) # requires matplotlib - pip install matplotlib\n","\n","  fig = plt.figure(figsize=(12, 16))\n","  \n","  gs = gridspec.GridSpec(nrows=3, # row Î™á Í∞ú \n","                       ncols=1, # col Î™á Í∞ú \n","                       height_ratios=[3, 1, 1]\n","                      )\n","  \n","  # fig = plt.figure(figsize=(8, 12))\n","  # ax = fig.add_subplot(111)\n","  # ax = fig.add_subplot(311)\n","  ax = fig.add_subplot(gs[0])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='r', colordown='b')\n","\n","  plt.step(plot_df[['minor_ST1_Up', 'minor_ST2_Up', 'minor_ST3_Up']].values, 'r', alpha=1)  # upper on color\n","  plt.step(plot_df[['minor_ST1_Down', 'minor_ST2_Down', 'minor_ST3_Down']].values, 'b', alpha=1)  # lower on color\n","  \n","  plt.step(plot_df[['major_ST1_Up', 'major_ST2_Up', 'major_ST3_Up']].values, 'r', alpha=1, linewidth=3)  # major upper on color\n","  plt.step(plot_df[['major_ST1_Down', 'major_ST2_Down', 'major_ST3_Down']].values, 'b', alpha=1, linewidth=3)  # major lower on color\n","\n","  plt.step(plot_df[['middle_line']].values, 'fuchsia', alpha=1)  # middle \n","  plt.step(plot_df[['major_middle_line']].values, 'fuchsia', alpha=1, linewidth=3)  # major_middle \n","  \n","  plt.step(plot_df[['off_color_upper_st1', 'off_color_upper_st2', 'off_color_upper_st3']].values, 'r', alpha=1, linestyle=':')  # upper off color\n","  plt.step(plot_df[['off_color_lower_st1', 'off_color_lower_st2', 'off_color_lower_st3']].values, 'b', alpha=1, linestyle=':')  # lower off color\n","  \n","  plt.step(plot_df[['off_color_upper_hst1', 'off_color_upper_hst2', 'off_color_upper_hst3']].values, 'r', alpha=1, linestyle=':', linewidth=3)  # major upper off color\n","  plt.step(plot_df[['off_color_lower_hst1', 'off_color_lower_hst2', 'off_color_lower_hst3']].values, 'b', alpha=1, linestyle=':', linewidth=3)  # major lower off color\n","\n","\n","  # plt.step(np.arange(len(plot_df)), plot_short_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","  # plt.step(np.arange(len(plot_df)),plot_long_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","\n","  plt.step(np.arange(len(plot_df)), plot_upper_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","  plt.step(np.arange(len(plot_df)), plot_lower_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","\n","  plt.step(plot_df[['major_upper_middle']].values, 'g', linestyle='--', alpha=1, linewidth=3)  # major_middle \n","  plt.step(plot_df[['major_lower_middle']].values, 'g', linestyle='--', alpha=1, linewidth=3)  # major_middle \n","  \n","\n","  # plt.step(np.arange(len(plot_df)), plot_short_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","  # plt.step(np.arange(len(plot_df)), plot_long_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","\n","\n","\n","  # ---------------------- on price indicator part ---------------------- #\n","\n","  # ---------------------- sma ---------------------- #\n","  # alpha = 1\n","  # for sm_i, sma in enumerate(ma_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[sma].values, alpha=alpha, color='black', linewidth=lw)\n","  #   alpha -= 0.2\n","  \n","  #               sar               #\n","  alpha = 1\n","  markersize = 5\n","  for sar in sar_list:\n","    plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","    markersize += 1\n","    alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  alpha = 0.7\n","  for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","                      where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","                      where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","    alpha -= 0.05\n","  \n","  # ------------------------------------------------------------- #\n","\n","\n","  #       ep & tp     #\n","  # if i != initial_i:\n","  # if len(ep_idx_list_) > 1:\n","  \n","  # ------------- initial order ------------- #\n","  plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  for ep_i in range(len(ep_idx_list_)):\n","    plt.axvline(prev_plotsize + (ep_idx_list_[ep_i] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","\n","  # plt.axvline(prev_plotsize, alpha=0.5, linestyle='--')\n","  plt.axhline(ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='lime')  # ep line axhline\n","\n","  for sub_i in range(len(ep_tp_list[t_i][1])):\n","    plt.axhline(ep_tp_list[t_i][1][sub_i], linestyle='-', xmin=0.75 + 0.05 * (sub_i + 1) , xmax=1, linewidth=3, color='lime')  # tp line axhline\n","    # plt.axhline(ep_tp_list[t_i][1], linestyle='-', xmin=0.9, xmax=1, linewidth=3)  # tp line axhline  \n","    plt.axvline(prev_plotsize + (tp_idx_list_[sub_i] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","\n","\n","  #         hedge ep & tp         #\n","  h_i = h_trade_list[t_i][1]\n","  if h_i is not None:\n","    plt.axvline(prev_plotsize + (h_i - ep_idx_list_[0]), linestyle='--')\n","    plt.axhline(h_ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='magenta')  # ep line axhline\n","    plt.axhline(h_ep_tp_list[t_i][1], linestyle='-', xmin=0.85, xmax=1, linewidth=3, color='magenta')  # tp line axhline\n","\n","  \n","  #         check pr        #\n","  if not static_lvrg:\n","    plt.title(\"%s ~ %s -> %.5f\\n %s\\n h_pr : %.5f\\nlvrg : %s\\ntp_ratio : %.2f\" % (ep_idx_list_[0], tp_idx_list_[-1], plot_pr_list[t_i], tp_state_list[t_i], h_plot_pr_list[t_i], lvrg_list[t_i], tp_ratio_list[t_i]))\n","  else:\n","    plt.title(\"%s ~ %s -> %.5f\\n %s\\n h_pr : %.5f\\ntp_ratio : %.2f\" % (ep_idx_list_[0], tp_idx_list_[-1], plot_pr_list[t_i], tp_state_list[t_i], h_plot_pr_list[t_i], tp_ratio_list[t_i]))\n","\n","  print(\"short real pr :\", (ep_tp_list[t_i][0] / ep_tp_list[t_i][1][sub_i] - fee - 1) * lvrg + 1)\n","  print(\"long real pr :\", (ep_tp_list[t_i][1][sub_i] / ep_tp_list[t_i][0] - fee - 1) * lvrg + 1)\n","\n","  #           y lim         #\n","  plt.ylim(y_min, y_max)\n","\n","\n","  # ---------------------- outer price indi. ---------------------- #\n","  #           macd          #\n","  # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","    \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for stoch in stoch_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[stoch].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(stoch_upper, linestyle='--')\n","  # plt.axhline(stoch_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- cctbbo ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for cctbbo in cctbbo_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cctbbo].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(cctbbo_upper, linestyle='--')\n","  # plt.axhline(cctbbo_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- ema_roc ---------- #  \n","  plt.subplot(gs[1])\n","  alpha = 1\n","  for emaroc in emaroc_list:\n","    plt.step(np.arange(len(plot_df)), plot_df[emaroc].values, 'g', alpha=alpha)\n","    # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","    alpha -= 0.2\n","  plt.axvline(prev_plotsize, linestyle='--')\n","  plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","  plt.axhline(0, linestyle='--')\n","\n","\n","\n","\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  if not save_plot:\n","    plt.show()\n","  \n","  else:\n","    # ---------- save mode ---------- #\n","    fig_name = plot_check_dir +  \"/%s.png\" % t_i\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","\n","  \n","  plt.close()\n","  print()\n","\n","  # break\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KGuJu2j4Aby9"},"outputs":[],"source":["# print()\n","for item in os.listdir(current_path + \"plot_check/\"):\n","  if item.endswith('png'):\n","    os.remove(current_path + \"plot_check/\" + item)\n","    print(current_path + \"plot_check/\" + item, \"removed !\")"]},{"cell_type":"markdown","metadata":{"id":"cj9X6S1jJjER"},"source":["### plot nontp case"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Gb1jGrS4Jl8A"},"outputs":[],"source":["prev_plotsize = 50\n","\n","# inversion = True\n","inversion = False\n","\n","# hedge = True\n","# hedge = False\n","\n","short_ver = False\n","\n","\n","if inversion:  \n","\n","    plot_pr_list = rev_np_pr\n","    h_plot_pr_list = h_rev_np_pr  # hedge\n","\n","else:\n","\n","    plot_pr_list = np_pr\n","    h_plot_pr_list = h_np_pr\n","\n","\n","\n","#         select plot columns       #\n","# basic_cols = [0, 1, 2, 3, 5, 6, 8, 9, 11, 12, 14] # you don't need to touch\n","\n","# sar_cols = [15, 18] # 15 ~ 19\n","# ichimoku_cols = [20, 21]  # 20 ~ 29\n","# # ichimoku_cols = [22, 23]  # 20 ~ 29\n","# ichimoku_cols2 = [22, 23]  # 20 ~ 29\n","# macd_cols = [30]  # 30 ~ 34\n","\n","# print(res_df.columns[basic_cols])\n","# break\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower']\n","# senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","# senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","\n","#     -------------- under price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher']\n","cctbbo_list = ['cctbbo']\n","\n","\n","#       \n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols + ichimoku_cols2\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + trix_list\n","input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + stoch_list + fisher_list + cctbbo_list\n","price_colname = basic_list + senkoua_list + senkoub_list + sar_list \n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols\n","\n","\n","if short_ver:\n","  nontp_indexs = nontp_short_indexs\n","  nontp_liqd_list = nontp_short_liqd_list\n","  nontp_pr_list = nontp_short_pr_list\n","  nontp_ep = nontp_short_ep_list\n","else:\n","  nontp_indexs = nontp_long_indexs\n","  nontp_liqd_list = nontp_long_liqd_list\n","  nontp_pr_list = nontp_long_pr_list\n","  nontp_ep = nontp_long_ep_list\n","\n","\n","for t_i, i in enumerate(nontp_indexs):\n","\n","  j = len(res_df) - 1\n","\n","  # print(i, j)\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","\n","  # if i <= 4860:\n","  # if i == 1536:\n","  # # if 1800 < i < 1860:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  # if tp_state_list[t_i] != 'd-open':\n","  #   continue\n","\n","  # if (entry[i] == -1) and res_df['close'].iloc[i - 1] > upper_ep.iloc[i]:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  # if plot_pr_list[t_i] > 0.5:\n","  # if plot_pr_list[t_i] > 1.0:\n","  # # if plot_pr_list[t_i] < 1.0:\n","  #   continue\n","\n","  # plot_df = res_df.iloc[i - prev_plotsize:j + 1, input_cols]\n","  plot_df = res_df.iloc[i - prev_plotsize:j + 1][input_colname]\n","\n","\n","  #       keep off-color st with another variable         #\n","  st_trend_plot_df = res_df.iloc[i - prev_plotsize:j + 1, [7, 10, 13]]\n","\n","  # y_max = np.max(plot_df.iloc[:, [4, 6, 8]])\n","  # y_min = np.min(plot_df.iloc[:, [5, 7, 9]])\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  \n","  # y_max = max(np.max(plot_df.iloc[:, [4, 6, 8]]))\n","  # y_min = min(np.min(plot_df.iloc[:, [5, 7, 9]]))\n","  \n","  y_max = max(np.max(plot_df[price_colname]))\n","  y_min = min(np.min(plot_df[price_colname]))\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","\n","  plot_df[\"off_color_upper_st1\"] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, plot_df.iloc[:, [4]], np.nan)\n","  plot_df[\"off_color_upper_st2\"] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, plot_df.iloc[:, [6]], np.nan)\n","  plot_df[\"off_color_upper_st3\"] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, plot_df.iloc[:, [8]], np.nan)\n","  plot_df[\"off_color_lower_st1\"] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, plot_df.iloc[:, [5]], np.nan)\n","  plot_df[\"off_color_lower_st2\"] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, plot_df.iloc[:, [7]], np.nan)\n","  plot_df[\"off_color_lower_st3\"] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, plot_df.iloc[:, [9]], np.nan)\n","\n","\n","  #       replace st values with np.nan, using st trend     #\n","  plot_df.iloc[:, [4]] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, np.nan, plot_df.iloc[:, [4]])\n","  plot_df.iloc[:, [6]] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, np.nan, plot_df.iloc[:, [6]])\n","  plot_df.iloc[:, [8]] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, np.nan, plot_df.iloc[:, [8]])\n","  plot_df.iloc[:, [5]] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, np.nan, plot_df.iloc[:, [5]])\n","  plot_df.iloc[:, [7]] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, np.nan, plot_df.iloc[:, [7]])\n","  plot_df.iloc[:, [9]] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, np.nan, plot_df.iloc[:, [9]])\n","\n","\n","  plot_upper_ep = upper_ep.iloc[i - prev_plotsize:j + 1]\n","  plot_lower_ep = lower_ep.iloc[i - prev_plotsize:j + 1]\n","\n","  plot_upper_middle = (plot_df['middle_line'] + plot_df['min_upper']) / 2\n","  plot_lower_middle = (plot_df['middle_line'] + plot_df['max_lower']) / 2\n","\n","  plot_short_tp = short_tp.iloc[i - prev_plotsize:j + 1]\n","  plot_long_tp = long_tp.iloc[i - prev_plotsize:j + 1]  \n","\n","\n","\n","  # fig = plt.figure(figsize=(12, 16))\n","  fig = plt.figure(figsize=(12, 16))\n","  \n","  gs = gridspec.GridSpec(nrows=3, # row Î™á Í∞ú \n","                       ncols=1, # col Î™á Í∞ú \n","                       height_ratios=[3, 1, 1]\n","                      )\n","  \n","  # fig = plt.figure(figsize=(8, 12))\n","  # ax = fig.add_subplot(111)\n","  # ax = fig.add_subplot(311)\n","  ax = fig.add_subplot(gs[0])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='r', colordown='b')\n","\n","  # print(plot_df.values[:, 4:])\n","  plt.step(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper on color\n","  # plt.plot(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper on color\n","  plt.step(plot_df.values[:, [5, 7, 9]], 'b', alpha=1)  # lower on color\n","  plt.step(plot_df.values[:, [10]], 'fuchsia', alpha=1)  # middle\n","  \n","  plt.step(plot_df.values[:, -6:-3], 'r', alpha=1, linestyle=':')  # upper off color\n","  plt.step(plot_df.values[:, -3:], 'b', alpha=1, linestyle=':')  # lower off color\n","\n","\n","\n","  # plt.step(np.arange(len(plot_df)), plot_upper_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","  # plt.step(np.arange(len(plot_df)),plot_lower_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","\n","  plt.step(np.arange(len(plot_df)), plot_upper_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","  plt.step(np.arange(len(plot_df)), plot_lower_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","\n","  # plt.step(np.arange(len(plot_df)), plot_short_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","  # plt.step(np.arange(len(plot_df)), plot_long_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","\n","\n","\n","  # ---------------------- indicator part ---------------------- #\n","  \n","  #               sar               #\n","  alpha = 1\n","  markersize = 5\n","  for sar in sar_list:\n","    plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","    markersize += 1\n","    alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  alpha = 0.7\n","  for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","                      where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","                      where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","    alpha -= 0.05\n","  \n","  # ------------------------------------------------------------- #\n","\n","\n","  #       ep & tp     #\n","  if i != initial_i:\n","    plt.axvline(prev_plotsize - (i - initial_i), alpha=0.5, linestyle='--')\n","  plt.axvline(prev_plotsize, alpha=0.5, linestyle='--')\n","  plt.axhline(nontp_ep[t_i], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='lime')  # ep line axhline\n","\n","  # for sub_i in range(len(ep_tp_list[t_i][1])):\n","  #   plt.axhline(ep_tp_list[t_i][1][sub_i], linestyle='-', xmin=0.75 + 0.05 * (sub_i + 1) , xmax=1, linewidth=3, color='lime')  # tp line axhline\n","    # plt.axhline(ep_tp_list[t_i][1], linestyle='-', xmin=0.9, xmax=1, linewidth=3)  # tp line axhline    \n","\n","  #         hedge ep & tp         #\n","  # h_i = h_trade_list[t_i][1]\n","  # if h_i is not None:\n","  #   plt.axvline(prev_plotsize + (h_i - i), linestyle='--')\n","  #   plt.axhline(h_ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='magenta')  # ep line axhline\n","  #   plt.axhline(h_ep_tp_list[t_i][1], linestyle='-', xmin=0.85, xmax=1, linewidth=3, color='magenta')  # tp line axhline\n","\n","  \n","  #         check pr        #\n","  plt.title(\"%s ~ %s -> liqd : %.2f\\npr : %.2f\" % (i, j, nontp_liqd_list[t_i], nontp_pr_list[t_i]))\n","\n","  #           y lim         #\n","  plt.ylim(y_min, y_max)\n","\n","\n","  # #           macd          #\n","  # # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # plt.subplot(313)\n","  plt.subplot(gs[1])\n","  alpha = 1\n","  for stoch in stoch_list:\n","    plt.step(np.arange(len(plot_df)), plot_df[stoch].values, 'g', alpha=alpha)\n","    # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","    alpha -= 0.2\n","  plt.axvline(prev_plotsize, linestyle='--')\n","  plt.axhline(50, linestyle='--')\n","  plt.axhline(stoch_upper, linestyle='--')\n","  plt.axhline(stoch_lower, linestyle='--')\n","\n","\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  plt.show()\n","  # plt.draw()\n","  plt.close()\n","  print()\n","\n","  # break\n"]},{"cell_type":"markdown","metadata":{"id":"-g7YY5BvMcLS"},"source":["### show detail values"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":255,"status":"ok","timestamp":1625228960601,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"5TxQ3rDnKMa7","outputId":"422ac214-8c88-4f39-ec3a-7c823574f6da"},"outputs":[{"name":"stdout","output_type":"stream","text":["upper_ep.iloc[i] : 2348.266954813089\n","short_tp.iloc[j] : 2205.609333246829\n"]}],"source":["i, j = 27267, 27268\n","print(\"upper_ep.iloc[i] :\", upper_ep.iloc[i])\n","print(\"short_tp.iloc[j] :\", short_tp.iloc[j])"]},{"cell_type":"markdown","metadata":{"id":"7AIl6EBuZNOL"},"source":["## none plot off-color st"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yaVxrNGzZgrF"},"outputs":[],"source":["prev_plotsize = 50\n","\n","for t_i, (i, j) in enumerate(trade_list):\n","  # print(i, j)\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","\n","  # if pr_list[t_i] >= 1:\n","  #   continue\n","\n","  plot_df = res_df.iloc[i - prev_plotsize:j + 1, [0, 1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 16]]\n","\n","  #       replace st values with np.nan, using st trend     #\n","  st_trend_plot_df = res_df.iloc[i - prev_plotsize:j + 1, [7, 10, 13]]\n","  plot_df.iloc[:, [4]] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, np.nan, plot_df.iloc[:, [4]])\n","  plot_df.iloc[:, [6]] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, np.nan, plot_df.iloc[:, [6]])\n","  plot_df.iloc[:, [8]] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, np.nan, plot_df.iloc[:, [8]])\n","  plot_df.iloc[:, [5]] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, np.nan, plot_df.iloc[:, [5]])\n","  plot_df.iloc[:, [7]] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, np.nan, plot_df.iloc[:, [7]])\n","  plot_df.iloc[:, [9]] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, np.nan, plot_df.iloc[:, [9]])\n","\n","\n","  plot_upper_ep = upper_ep.iloc[i - prev_plotsize:j + 1]\n","  plot_lower_ep = lower_ep.iloc[i - prev_plotsize:j + 1]\n","\n","  fig = plt.figure(figsize=(8, 6))\n","  ax = fig.add_subplot(111)\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='r', colordown='b')\n","\n","  # print(plot_df.values[:, 4:])\n","  plt.plot(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper\n","  plt.plot(plot_df.values[:, [5, 7, 9]], 'b', alpha=1)  # lower\n","  plt.plot(plot_df.values[:, [10]], 'g', alpha=1)  # middle\n","\n","  plt.plot(plot_df.values[:, [11]], 'c*', alpha=1, markersize=5)  # sar mic\n","  plt.plot(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  plt.plot(plot_upper_ep.values, alpha=1, linestyle='--')  # ep\n","  plt.plot(plot_lower_ep.values, alpha=1, linestyle='--')  # ep\n","\n","  plt.axvline(prev_plotsize, linestyle='--')\n","\n","  plt.title(\"%s ~ %s -> %.5f\" % (i, j, pr_list[t_i]))\n","  plt.show()\n","  # plt.draw()\n","  plt.close()"]}],"metadata":{"colab":{"collapsed_sections":["M8-EChy0VsDr","Iy76iO7gztne","Ic1mfmwWCIBu","Ci_jUnNTZbm9","AUSBU7T8Suzi","VdukVo5-Suzj","Bw5JibDKSuzj","Pe0QpnORSuzk","t1E_eAyPSuzm","dzla8i9_ysmP","leSQlImg4_9L","v2Gjv019AEz8","FxJ1y8v2fkCR","VBwVaUkvfnOd"],"name":"AT_single_v7_3_backi2(1229_limit_v5_2point_whileplot).ipynbÏùò ÏÇ¨Î≥∏","toc_visible":true,"provenance":[],"authorship_tag":"ABX9TyPZz5syilydNjQP13/YapQF"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"widgets":{"application/vnd.jupyter.widget-state+json":{"465133d6c5694a1ca7b7135eaaac8b1d":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_ff574146d20e4417a77c960712b62a3d","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_0ddb8643e6c349c1988510c8edd3d2be","IPY_MODEL_abff4093d3d944b1b6b215dcf854b412","IPY_MODEL_13565b76d7cc4fb283dfa97525025b02"]}},"ff574146d20e4417a77c960712b62a3d":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"0ddb8643e6c349c1988510c8edd3d2be":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_view_name":"HTMLView","style":"IPY_MODEL_f1012a4b1d2444c5bab03bcdb9d88509","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"‚Äã","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":"  3%","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_1bac9048c02c4e149da56377f26bc9bf"}},"abff4093d3d944b1b6b215dcf854b412":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_view_name":"ProgressView","style":"IPY_MODEL_652413cf08824991a2383671e6bff080","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"","max":70,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":2,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_dc5029eb74d041e68a1453f4371d2039"}},"13565b76d7cc4fb283dfa97525025b02":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_view_name":"HTMLView","style":"IPY_MODEL_cc5fc80c98af438f9a64c588601c183b","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"‚Äã","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 2/70 [52:21&lt;29:35:42, 1566.80s/it]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_d40f65ef68c64eefb1d054439204e234"}},"f1012a4b1d2444c5bab03bcdb9d88509":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"1bac9048c02c4e149da56377f26bc9bf":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"652413cf08824991a2383671e6bff080":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"dc5029eb74d041e68a1453f4371d2039":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"cc5fc80c98af438f9a64c588601c183b":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"d40f65ef68c64eefb1d054439204e234":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}}}}},"nbformat":4,"nbformat_minor":0}