{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python [conda env:tensorflow2_p36]","language":"python","name":"conda-env-tensorflow2_p36-py"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.5"},"colab":{"name":"Make_model_MA_CROSS.ipynb의 사본","provenance":[{"file_id":"1z4z_KLPzc6RWsxo3X_dHbpByxUAgjoMJ","timestamp":1583754134002}],"collapsed_sections":[],"machine_shape":"hm"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"8s5fopqwFUf9","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1595863558052,"user_tz":-540,"elapsed":1193,"user":{"displayName":"JJANGJAE","photoUrl":"","userId":"08178289703395036410"}},"outputId":"a277f0f7-9c6b-45c2-af4c-64fdebb796db"},"source":["from google.colab import drive\n","\n","drive.mount('/content/gdrive')"],"execution_count":10,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"KQwMgn4DaMUd","colab_type":"text"},"source":["### LOAD DATA"]},{"cell_type":"code","metadata":{"id":"EskIm2u4aI7C","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":52},"executionInfo":{"status":"ok","timestamp":1595863581116,"user_tz":-540,"elapsed":2266,"user":{"displayName":"JJANGJAE","photoUrl":"","userId":"08178289703395036410"}},"outputId":"96b67821-b52e-4c36-d987-d7e9597c24ee"},"source":["import os\n","# os.environ[\"CUDA_DEVICE_ORDER\"]=\"PCI_BUS_ID\"   \n","# os.environ[\"CUDA_VISIBLE_DEVICES\"]=\"0\"\n","\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import scipy.misc \n","from math import sqrt \n","import itertools\n","from IPython.display import display\n","%tensorflow_version 1.x\n","%matplotlib inline\n","\n","input_data_length = 200\n","model_num = 129\n","num_classes = 2\n","\n","gdrive_path = '/content/gdrive/My Drive/Colab Notebooks/Project_Stock/'\n","\n","Made_X = np.load(gdrive_path + 'Made_X/Made_X %s_%s.npy' % (input_data_length, model_num))\n","Made_Y = np.load(gdrive_path + 'Made_X/Made_Y %s_%s.npy' % (input_data_length, model_num)).reshape(-1, 1)\n","\n","\n","#       dataset 분리      #\n","print(Made_X.shape)\n","print(Made_Y.shape)"],"execution_count":12,"outputs":[{"output_type":"stream","text":["(2155, 200, 18)\n","(2155, 1)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"59reTimsyjrQ","colab_type":"text"},"source":["### DATA CHECK"]},{"cell_type":"code","metadata":{"id":"dMoSdG5Qkilm","colab_type":"code","colab":{}},"source":["for i in range(len(Made_X)):\n","  print(i)\n","  # i = 3\n","  plt.plot(Made_X[i][:, [0, 1, 2, 3, 4, 5, 6]])\n","  plt.show()\n","  print()\n","  # break\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"GmmgsEUMqUjN","colab_type":"text"},"source":["### DATA PREPROCESSING"]},{"cell_type":"code","metadata":{"id":"mcDUjgQzqUSr","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":336},"executionInfo":{"status":"ok","timestamp":1595863588797,"user_tz":-540,"elapsed":1064,"user":{"displayName":"JJANGJAE","photoUrl":"","userId":"08178289703395036410"}},"outputId":"43538c5f-f6a4-48d9-e59f-ad1b66b1ba1d"},"source":["row = Made_X.shape[1]\n","col = Made_X.shape[2]\n","\n","from sklearn.model_selection import train_test_split\n","X_train, X_val, Y_train, Y_val = train_test_split(Made_X, Made_Y, test_size=0.3,\n","                                                   shuffle=False)\n","\n","X_train = X_train.astype('float32').reshape(-1, input_data_length, col, 1)\n","X_val = X_val.astype('float32').reshape(-1, input_data_length, col, 1)\n","print(X_train.shape)\n","print(X_val.shape)\n","\n","from keras.utils import np_utils\n","from keras.preprocessing.image import ImageDataGenerator \n","\n","# Data Class Weight\n","from sklearn.utils import class_weight\n","\n","# print(Y_train[:, 0])\n","class_weights = class_weight.compute_class_weight('balanced', \n","                                                  np.unique(Y_train[:, 0]),\n","                                                  Y_train[:, 0])\n","class_weights = dict(enumerate(class_weights))\n","print(class_weights)\n","# quit()\n","\n","Y_train_ = Y_train.astype('float32')\n","Y_val_ = Y_val.astype('float32')\n","Y_train = np_utils.to_categorical(Y_train, num_classes)\n","Y_val = np_utils.to_categorical(Y_val, num_classes)\n","print(Y_train.shape)\n","print(Y_val.shape)\n","# break\n","\n","datagen = ImageDataGenerator( \n","#     rotation_range = 60,\n","#     zoom_range = 0.6,\n","#     shear_range = 0.6,\n","#     horizontal_flip = True,\n","#     width_shift_range=0.6,\n","#     height_shift_range=0.6,\n","    fill_mode = 'nearest'\n","    )\n","\n","testgen = ImageDataGenerator( \n","    )\n","datagen.fit(X_train)\n","batch_size = 16\n","\n","for X_batch, _ in datagen.flow(X_train, Y_train, batch_size=9):\n","    for i in range(0, 9): \n","        plt.axis('off') \n","        plt.subplot(330 + 1 + i) \n","        plt.imshow(X_batch[i].reshape(row, col))\n","    plt.axis('off') \n","    plt.show() \n","    break\n","    \n","    \n","train_flow = datagen.flow(X_train, Y_train, batch_size=batch_size) \n","val_flow = testgen.flow(X_val, Y_val, batch_size=batch_size) "],"execution_count":13,"outputs":[{"output_type":"stream","text":["(1508, 200, 18, 1)\n","(647, 200, 18, 1)\n","{0: 0.6012759170653907, 1: 2.968503937007874}\n","(1508, 2)\n","(647, 2)\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 9 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"scrolled":false,"id":"2iYLNSeSEp7p","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1595864132887,"user_tz":-540,"elapsed":90424,"user":{"displayName":"JJANGJAE","photoUrl":"","userId":"08178289703395036410"}},"outputId":"39123bc7-4806-4079-fcdb-8da058482806"},"source":["from keras.utils import plot_model\n","import keras.backend as K\n","from keras.models import Model, Sequential\n","import keras.layers as layers\n","from keras.optimizers import Adam, SGD\n","from keras.regularizers import l1, l2\n","\n","def FER_Model(input_shape=(row, col, 1)):\n","    # first input model\n","    visible = layers.Input(shape=input_shape, name='input')\n","    \n","    net = layers.Conv2D(64, kernel_size=3, padding='same')(visible)\n","    # net = layers.Activation('relu')(net)\n","    net = layers.LeakyReLU()(net)\n","    net = layers.MaxPool2D(pool_size=2)(net)\n","\n","    shortcut_1 = net\n","\n","    net = layers.Conv2D(128, kernel_size=3, padding='same')(net)\n","    # net = layers.Activation('relu')(net)\n","    net = layers.LeakyReLU()(net)\n","    net = layers.MaxPool2D(pool_size=2)(net)\n","\n","    shortcut_2 = net\n","\n","#     net = layers.Conv2D(256, kernel_size=3, padding='same')(net)\n","#     # net = layers.Activation('relu')(net)\n","#     net = layers.LeakyReLU()(net)\n","#     net = layers.MaxPool2D(pool_size=2)(net)\n","\n","#     shortcut_3 = net\n","\n","#     net = layers.Conv2D(128, kernel_size=1, padding='same')(net)\n","#     # net = layers.Activation('relu')(net)\n","#     net = layers.LeakyReLU()(net)\n","#     net = layers.MaxPool2D(pool_size=2)(net)\n","\n","    net = layers.Flatten()(net)\n","    net = layers.Dense(64)(net)\n","    net = layers.LeakyReLU()(net)\n","    net = layers.Dense(num_classes, activation='sigmoid')(net)\n","\n","    # create model \n","    model = Model(inputs =visible, outputs = net)\n","    # summary layers\n","    print(model.summary())\n","    \n","    return model\n","\n","model = FER_Model()\n","opt = Adam(lr=0.001, decay=1e-6)\n","model.compile(loss='binary_crossentropy', optimizer=opt, metrics=['accuracy'])\n","  \n","from keras.callbacks import ModelCheckpoint, EarlyStopping, TensorBoard\n","filepath = gdrive_path + \"model/ma_cross %s_%s_ohlc.hdf5\" % (input_data_length, model_num)\n","checkpoint = ModelCheckpoint(filepath, monitor='val_loss', verbose=1, save_best_only=True, mode='auto')\n","checkpoint2 = TensorBoard(log_dir='Tensorboard_graph',\n","                          histogram_freq=0,\n","                          write_graph=True,\n","                          write_images=True)\n","checkpoint3 = EarlyStopping(monitor='val_loss', patience=30)\n","callbacks_list = [checkpoint, checkpoint2, checkpoint3]\n","\n","# keras.callbacks.Callback 로 부터 log 를 받아와 history log 를 작성할 수 있다.\n","\n","# we iterate 200 times over the entire training set\n","num_epochs = 200\n","history = model.fit_generator(train_flow, \n","                    steps_per_epoch=len(X_train) / batch_size, \n","                    epochs=num_epochs,  \n","                    verbose=2,  \n","                    callbacks=callbacks_list,\n","                    class_weight=class_weights,\n","                    validation_data=val_flow,  \n","                    validation_steps=len(X_val) / batch_size,\n","                    shuffle=False)\n","\n"],"execution_count":30,"outputs":[{"output_type":"stream","text":["Model: \"model_4\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","input (InputLayer)           (None, 200, 18, 1)        0         \n","_________________________________________________________________\n","conv2d_7 (Conv2D)            (None, 200, 18, 64)       640       \n","_________________________________________________________________\n","leaky_re_lu_10 (LeakyReLU)   (None, 200, 18, 64)       0         \n","_________________________________________________________________\n","max_pooling2d_7 (MaxPooling2 (None, 100, 9, 64)        0         \n","_________________________________________________________________\n","conv2d_8 (Conv2D)            (None, 100, 9, 128)       73856     \n","_________________________________________________________________\n","leaky_re_lu_11 (LeakyReLU)   (None, 100, 9, 128)       0         \n","_________________________________________________________________\n","max_pooling2d_8 (MaxPooling2 (None, 50, 4, 128)        0         \n","_________________________________________________________________\n","flatten_4 (Flatten)          (None, 25600)             0         \n","_________________________________________________________________\n","dense_7 (Dense)              (None, 64)                1638464   \n","_________________________________________________________________\n","leaky_re_lu_12 (LeakyReLU)   (None, 64)                0         \n","_________________________________________________________________\n","dense_8 (Dense)              (None, 2)                 130       \n","=================================================================\n","Total params: 1,713,090\n","Trainable params: 1,713,090\n","Non-trainable params: 0\n","_________________________________________________________________\n","None\n","Epoch 1/200\n"," - 1s - loss: 0.7049 - accuracy: 0.5172 - val_loss: 0.7603 - val_accuracy: 0.1978\n","\n","Epoch 00001: val_loss improved from inf to 0.76030, saving model to /content/gdrive/My Drive/Colab Notebooks/Project_Stock/model/ma_cross 200_129_ohlc.hdf5\n","Epoch 2/200\n"," - 1s - loss: 0.6986 - accuracy: 0.5212 - val_loss: 0.7179 - val_accuracy: 0.4575\n","\n","Epoch 00002: val_loss improved from 0.76030 to 0.71785, saving model to /content/gdrive/My Drive/Colab Notebooks/Project_Stock/model/ma_cross 200_129_ohlc.hdf5\n","Epoch 3/200\n"," - 1s - loss: 0.6832 - accuracy: 0.5172 - val_loss: 0.7430 - val_accuracy: 0.4250\n","\n","Epoch 00003: val_loss did not improve from 0.71785\n","Epoch 4/200\n"," - 1s - loss: 0.6690 - accuracy: 0.5315 - val_loss: 0.6609 - val_accuracy: 0.5556\n","\n","Epoch 00004: val_loss improved from 0.71785 to 0.66091, saving model to /content/gdrive/My Drive/Colab Notebooks/Project_Stock/model/ma_cross 200_129_ohlc.hdf5\n","Epoch 5/200\n"," - 1s - loss: 0.6693 - accuracy: 0.5567 - val_loss: 0.6040 - val_accuracy: 0.5247\n","\n","Epoch 00005: val_loss improved from 0.66091 to 0.60405, saving model to /content/gdrive/My Drive/Colab Notebooks/Project_Stock/model/ma_cross 200_129_ohlc.hdf5\n","Epoch 6/200\n"," - 1s - loss: 0.6522 - accuracy: 0.5670 - val_loss: 0.8880 - val_accuracy: 0.4289\n","\n","Epoch 00006: val_loss did not improve from 0.60405\n","Epoch 7/200\n"," - 1s - loss: 0.6385 - accuracy: 0.5889 - val_loss: 0.6021 - val_accuracy: 0.5363\n","\n","Epoch 00007: val_loss improved from 0.60405 to 0.60213, saving model to /content/gdrive/My Drive/Colab Notebooks/Project_Stock/model/ma_cross 200_129_ohlc.hdf5\n","Epoch 8/200\n"," - 1s - loss: 0.6268 - accuracy: 0.6403 - val_loss: 0.8030 - val_accuracy: 0.5549\n","\n","Epoch 00008: val_loss did not improve from 0.60213\n","Epoch 9/200\n"," - 1s - loss: 0.6019 - accuracy: 0.6293 - val_loss: 0.5691 - val_accuracy: 0.5920\n","\n","Epoch 00009: val_loss improved from 0.60213 to 0.56910, saving model to /content/gdrive/My Drive/Colab Notebooks/Project_Stock/model/ma_cross 200_129_ohlc.hdf5\n","Epoch 10/200\n"," - 1s - loss: 0.5840 - accuracy: 0.6721 - val_loss: 0.7644 - val_accuracy: 0.4722\n","\n","Epoch 00010: val_loss did not improve from 0.56910\n","Epoch 11/200\n"," - 1s - loss: 0.5585 - accuracy: 0.6691 - val_loss: 0.5195 - val_accuracy: 0.7573\n","\n","Epoch 00011: val_loss improved from 0.56910 to 0.51954, saving model to /content/gdrive/My Drive/Colab Notebooks/Project_Stock/model/ma_cross 200_129_ohlc.hdf5\n","Epoch 12/200\n"," - 1s - loss: 0.5060 - accuracy: 0.7278 - val_loss: 0.5848 - val_accuracy: 0.5649\n","\n","Epoch 00012: val_loss did not improve from 0.51954\n","Epoch 13/200\n"," - 1s - loss: 0.4556 - accuracy: 0.7765 - val_loss: 0.9531 - val_accuracy: 0.5240\n","\n","Epoch 00013: val_loss did not improve from 0.51954\n","Epoch 14/200\n"," - 1s - loss: 0.4141 - accuracy: 0.7888 - val_loss: 1.3255 - val_accuracy: 0.5495\n","\n","Epoch 00014: val_loss did not improve from 0.51954\n","Epoch 15/200\n"," - 1s - loss: 0.3533 - accuracy: 0.8180 - val_loss: 1.3267 - val_accuracy: 0.6368\n","\n","Epoch 00015: val_loss did not improve from 0.51954\n","Epoch 16/200\n"," - 1s - loss: 0.2923 - accuracy: 0.8568 - val_loss: 0.5197 - val_accuracy: 0.7202\n","\n","Epoch 00016: val_loss did not improve from 0.51954\n","Epoch 17/200\n"," - 1s - loss: 0.2356 - accuracy: 0.8966 - val_loss: 0.2554 - val_accuracy: 0.7141\n","\n","Epoch 00017: val_loss improved from 0.51954 to 0.25536, saving model to /content/gdrive/My Drive/Colab Notebooks/Project_Stock/model/ma_cross 200_129_ohlc.hdf5\n","Epoch 18/200\n"," - 1s - loss: 0.1862 - accuracy: 0.9171 - val_loss: 0.9584 - val_accuracy: 0.7141\n","\n","Epoch 00018: val_loss did not improve from 0.25536\n","Epoch 19/200\n"," - 1s - loss: 0.1492 - accuracy: 0.9357 - val_loss: 0.3161 - val_accuracy: 0.7280\n","\n","Epoch 00019: val_loss did not improve from 0.25536\n","Epoch 20/200\n"," - 1s - loss: 0.1205 - accuracy: 0.9483 - val_loss: 1.0057 - val_accuracy: 0.7264\n","\n","Epoch 00020: val_loss did not improve from 0.25536\n","Epoch 21/200\n"," - 1s - loss: 0.0803 - accuracy: 0.9649 - val_loss: 2.1616 - val_accuracy: 0.6600\n","\n","Epoch 00021: val_loss did not improve from 0.25536\n","Epoch 22/200\n"," - 1s - loss: 0.0626 - accuracy: 0.9768 - val_loss: 1.2209 - val_accuracy: 0.7048\n","\n","Epoch 00022: val_loss did not improve from 0.25536\n","Epoch 23/200\n"," - 1s - loss: 0.0478 - accuracy: 0.9838 - val_loss: 5.0958 - val_accuracy: 0.7434\n","\n","Epoch 00023: val_loss did not improve from 0.25536\n","Epoch 24/200\n"," - 1s - loss: 0.0249 - accuracy: 0.9927 - val_loss: 1.5246 - val_accuracy: 0.7179\n","\n","Epoch 00024: val_loss did not improve from 0.25536\n","Epoch 25/200\n"," - 1s - loss: 0.0212 - accuracy: 0.9950 - val_loss: 2.5750 - val_accuracy: 0.7666\n","\n","Epoch 00025: val_loss did not improve from 0.25536\n","Epoch 26/200\n"," - 1s - loss: 0.0070 - accuracy: 1.0000 - val_loss: 3.0415 - val_accuracy: 0.7658\n","\n","Epoch 00026: val_loss did not improve from 0.25536\n","Epoch 27/200\n"," - 1s - loss: 0.0019 - accuracy: 1.0000 - val_loss: 1.2410 - val_accuracy: 0.7597\n","\n","Epoch 00027: val_loss did not improve from 0.25536\n","Epoch 28/200\n"," - 1s - loss: 0.0011 - accuracy: 1.0000 - val_loss: 3.1453 - val_accuracy: 0.7635\n","\n","Epoch 00028: val_loss did not improve from 0.25536\n","Epoch 29/200\n"," - 1s - loss: 8.7261e-04 - accuracy: 1.0000 - val_loss: 0.9031 - val_accuracy: 0.7620\n","\n","Epoch 00029: val_loss did not improve from 0.25536\n","Epoch 30/200\n"," - 1s - loss: 7.0306e-04 - accuracy: 1.0000 - val_loss: 1.8652 - val_accuracy: 0.7597\n","\n","Epoch 00030: val_loss did not improve from 0.25536\n","Epoch 31/200\n"," - 1s - loss: 5.9050e-04 - accuracy: 1.0000 - val_loss: 1.5463 - val_accuracy: 0.7612\n","\n","Epoch 00031: val_loss did not improve from 0.25536\n","Epoch 32/200\n"," - 1s - loss: 5.1766e-04 - accuracy: 1.0000 - val_loss: 2.4935 - val_accuracy: 0.7620\n","\n","Epoch 00032: val_loss did not improve from 0.25536\n","Epoch 33/200\n"," - 1s - loss: 4.3543e-04 - accuracy: 1.0000 - val_loss: 4.4821 - val_accuracy: 0.7573\n","\n","Epoch 00033: val_loss did not improve from 0.25536\n","Epoch 34/200\n"," - 1s - loss: 3.8288e-04 - accuracy: 1.0000 - val_loss: 0.9313 - val_accuracy: 0.7573\n","\n","Epoch 00034: val_loss did not improve from 0.25536\n","Epoch 35/200\n"," - 1s - loss: 3.3470e-04 - accuracy: 1.0000 - val_loss: 4.1261 - val_accuracy: 0.7597\n","\n","Epoch 00035: val_loss did not improve from 0.25536\n","Epoch 36/200\n"," - 1s - loss: 2.9811e-04 - accuracy: 1.0000 - val_loss: 4.8026 - val_accuracy: 0.7597\n","\n","Epoch 00036: val_loss did not improve from 0.25536\n","Epoch 37/200\n"," - 1s - loss: 2.7225e-04 - accuracy: 1.0000 - val_loss: 0.5292 - val_accuracy: 0.7558\n","\n","Epoch 00037: val_loss did not improve from 0.25536\n","Epoch 38/200\n"," - 1s - loss: 2.4350e-04 - accuracy: 1.0000 - val_loss: 1.5766 - val_accuracy: 0.7581\n","\n","Epoch 00038: val_loss did not improve from 0.25536\n","Epoch 39/200\n"," - 1s - loss: 2.1482e-04 - accuracy: 1.0000 - val_loss: 1.3120 - val_accuracy: 0.7543\n","\n","Epoch 00039: val_loss did not improve from 0.25536\n","Epoch 40/200\n"," - 1s - loss: 1.9514e-04 - accuracy: 1.0000 - val_loss: 6.2238 - val_accuracy: 0.7519\n","\n","Epoch 00040: val_loss did not improve from 0.25536\n","Epoch 41/200\n"," - 1s - loss: 1.7970e-04 - accuracy: 1.0000 - val_loss: 2.1014 - val_accuracy: 0.7519\n","\n","Epoch 00041: val_loss did not improve from 0.25536\n","Epoch 42/200\n"," - 1s - loss: 1.6375e-04 - accuracy: 1.0000 - val_loss: 0.2367 - val_accuracy: 0.7535\n","\n","Epoch 00042: val_loss improved from 0.25536 to 0.23668, saving model to /content/gdrive/My Drive/Colab Notebooks/Project_Stock/model/ma_cross 200_129_ohlc.hdf5\n","Epoch 43/200\n"," - 1s - loss: 1.4865e-04 - accuracy: 1.0000 - val_loss: 0.0289 - val_accuracy: 0.7519\n","\n","Epoch 00043: val_loss improved from 0.23668 to 0.02886, saving model to /content/gdrive/My Drive/Colab Notebooks/Project_Stock/model/ma_cross 200_129_ohlc.hdf5\n","Epoch 44/200\n"," - 1s - loss: 1.3737e-04 - accuracy: 1.0000 - val_loss: 1.1856 - val_accuracy: 0.7527\n","\n","Epoch 00044: val_loss did not improve from 0.02886\n","Epoch 45/200\n"," - 1s - loss: 1.2579e-04 - accuracy: 1.0000 - val_loss: 1.0254 - val_accuracy: 0.7543\n","\n","Epoch 00045: val_loss did not improve from 0.02886\n","Epoch 46/200\n"," - 1s - loss: 1.1593e-04 - accuracy: 1.0000 - val_loss: 2.2672 - val_accuracy: 0.7558\n","\n","Epoch 00046: val_loss did not improve from 0.02886\n","Epoch 47/200\n"," - 1s - loss: 1.0729e-04 - accuracy: 1.0000 - val_loss: 5.8526 - val_accuracy: 0.7558\n","\n","Epoch 00047: val_loss did not improve from 0.02886\n","Epoch 48/200\n"," - 1s - loss: 9.9348e-05 - accuracy: 1.0000 - val_loss: 0.0059 - val_accuracy: 0.7558\n","\n","Epoch 00048: val_loss improved from 0.02886 to 0.00595, saving model to /content/gdrive/My Drive/Colab Notebooks/Project_Stock/model/ma_cross 200_129_ohlc.hdf5\n","Epoch 49/200\n"," - 1s - loss: 9.1976e-05 - accuracy: 1.0000 - val_loss: 1.0353 - val_accuracy: 0.7573\n","\n","Epoch 00049: val_loss did not improve from 0.00595\n","Epoch 50/200\n"," - 1s - loss: 8.6000e-05 - accuracy: 1.0000 - val_loss: 1.0389 - val_accuracy: 0.7550\n","\n","Epoch 00050: val_loss did not improve from 0.00595\n","Epoch 51/200\n"," - 1s - loss: 7.8917e-05 - accuracy: 1.0000 - val_loss: 2.7727 - val_accuracy: 0.7558\n","\n","Epoch 00051: val_loss did not improve from 0.00595\n","Epoch 52/200\n"," - 1s - loss: 7.3384e-05 - accuracy: 1.0000 - val_loss: 1.2914 - val_accuracy: 0.7566\n","\n","Epoch 00052: val_loss did not improve from 0.00595\n","Epoch 53/200\n"," - 1s - loss: 6.9162e-05 - accuracy: 1.0000 - val_loss: 1.4760 - val_accuracy: 0.7519\n","\n","Epoch 00053: val_loss did not improve from 0.00595\n","Epoch 54/200\n"," - 1s - loss: 6.4953e-05 - accuracy: 1.0000 - val_loss: 1.6075 - val_accuracy: 0.7527\n","\n","Epoch 00054: val_loss did not improve from 0.00595\n","Epoch 55/200\n"," - 1s - loss: 6.0090e-05 - accuracy: 1.0000 - val_loss: 6.7401 - val_accuracy: 0.7504\n","\n","Epoch 00055: val_loss did not improve from 0.00595\n","Epoch 56/200\n"," - 1s - loss: 5.6024e-05 - accuracy: 1.0000 - val_loss: 2.7546 - val_accuracy: 0.7573\n","\n","Epoch 00056: val_loss did not improve from 0.00595\n","Epoch 57/200\n"," - 1s - loss: 5.3356e-05 - accuracy: 1.0000 - val_loss: 0.3800 - val_accuracy: 0.7558\n","\n","Epoch 00057: val_loss did not improve from 0.00595\n","Epoch 58/200\n"," - 1s - loss: 4.9254e-05 - accuracy: 1.0000 - val_loss: 3.8460 - val_accuracy: 0.7550\n","\n","Epoch 00058: val_loss did not improve from 0.00595\n","Epoch 59/200\n"," - 1s - loss: 4.5775e-05 - accuracy: 1.0000 - val_loss: 1.7167 - val_accuracy: 0.7504\n","\n","Epoch 00059: val_loss did not improve from 0.00595\n","Epoch 60/200\n"," - 1s - loss: 4.3331e-05 - accuracy: 1.0000 - val_loss: 1.5288 - val_accuracy: 0.7519\n","\n","Epoch 00060: val_loss did not improve from 0.00595\n","Epoch 61/200\n"," - 1s - loss: 4.0203e-05 - accuracy: 1.0000 - val_loss: 1.8329 - val_accuracy: 0.7550\n","\n","Epoch 00061: val_loss did not improve from 0.00595\n","Epoch 62/200\n"," - 1s - loss: 3.7577e-05 - accuracy: 1.0000 - val_loss: 1.1134 - val_accuracy: 0.7558\n","\n","Epoch 00062: val_loss did not improve from 0.00595\n","Epoch 63/200\n"," - 1s - loss: 3.6051e-05 - accuracy: 1.0000 - val_loss: 0.6347 - val_accuracy: 0.7558\n","\n","Epoch 00063: val_loss did not improve from 0.00595\n","Epoch 64/200\n"," - 1s - loss: 3.3834e-05 - accuracy: 1.0000 - val_loss: 1.1866 - val_accuracy: 0.7519\n","\n","Epoch 00064: val_loss did not improve from 0.00595\n","Epoch 65/200\n"," - 1s - loss: 3.1460e-05 - accuracy: 1.0000 - val_loss: 4.8846 - val_accuracy: 0.7535\n","\n","Epoch 00065: val_loss did not improve from 0.00595\n","Epoch 66/200\n"," - 1s - loss: 2.9539e-05 - accuracy: 1.0000 - val_loss: 4.6174 - val_accuracy: 0.7519\n","\n","Epoch 00066: val_loss did not improve from 0.00595\n","Epoch 67/200\n"," - 1s - loss: 2.8108e-05 - accuracy: 1.0000 - val_loss: 1.1494 - val_accuracy: 0.7550\n","\n","Epoch 00067: val_loss did not improve from 0.00595\n","Epoch 68/200\n"," - 1s - loss: 2.6647e-05 - accuracy: 1.0000 - val_loss: 0.0022 - val_accuracy: 0.7535\n","\n","Epoch 00068: val_loss improved from 0.00595 to 0.00219, saving model to /content/gdrive/My Drive/Colab Notebooks/Project_Stock/model/ma_cross 200_129_ohlc.hdf5\n","Epoch 69/200\n"," - 1s - loss: 2.4772e-05 - accuracy: 1.0000 - val_loss: 0.0711 - val_accuracy: 0.7527\n","\n","Epoch 00069: val_loss did not improve from 0.00219\n","Epoch 70/200\n"," - 1s - loss: 2.3299e-05 - accuracy: 1.0000 - val_loss: 1.7549 - val_accuracy: 0.7519\n","\n","Epoch 00070: val_loss did not improve from 0.00219\n","Epoch 71/200\n"," - 1s - loss: 2.1973e-05 - accuracy: 1.0000 - val_loss: 3.4860 - val_accuracy: 0.7535\n","\n","Epoch 00071: val_loss did not improve from 0.00219\n","Epoch 72/200\n"," - 1s - loss: 2.0782e-05 - accuracy: 1.0000 - val_loss: 0.4207 - val_accuracy: 0.7527\n","\n","Epoch 00072: val_loss did not improve from 0.00219\n","Epoch 73/200\n"," - 1s - loss: 2.0045e-05 - accuracy: 1.0000 - val_loss: 1.2934 - val_accuracy: 0.7543\n","\n","Epoch 00073: val_loss did not improve from 0.00219\n","Epoch 74/200\n"," - 1s - loss: 1.8388e-05 - accuracy: 1.0000 - val_loss: 0.0342 - val_accuracy: 0.7519\n","\n","Epoch 00074: val_loss did not improve from 0.00219\n","Epoch 75/200\n"," - 1s - loss: 1.7351e-05 - accuracy: 1.0000 - val_loss: 1.8067 - val_accuracy: 0.7543\n","\n","Epoch 00075: val_loss did not improve from 0.00219\n","Epoch 76/200\n"," - 1s - loss: 1.6781e-05 - accuracy: 1.0000 - val_loss: 1.6435 - val_accuracy: 0.7504\n","\n","Epoch 00076: val_loss did not improve from 0.00219\n","Epoch 77/200\n"," - 1s - loss: 1.5792e-05 - accuracy: 1.0000 - val_loss: 2.5629 - val_accuracy: 0.7504\n","\n","Epoch 00077: val_loss did not improve from 0.00219\n","Epoch 78/200\n"," - 1s - loss: 1.4867e-05 - accuracy: 1.0000 - val_loss: 4.7273 - val_accuracy: 0.7558\n","\n","Epoch 00078: val_loss did not improve from 0.00219\n","Epoch 79/200\n"," - 1s - loss: 1.4428e-05 - accuracy: 1.0000 - val_loss: 0.4343 - val_accuracy: 0.7519\n","\n","Epoch 00079: val_loss did not improve from 0.00219\n","Epoch 80/200\n"," - 1s - loss: 1.3011e-05 - accuracy: 1.0000 - val_loss: 8.0358 - val_accuracy: 0.7535\n","\n","Epoch 00080: val_loss did not improve from 0.00219\n","Epoch 81/200\n"," - 1s - loss: 1.2400e-05 - accuracy: 1.0000 - val_loss: 0.0254 - val_accuracy: 0.7535\n","\n","Epoch 00081: val_loss did not improve from 0.00219\n","Epoch 82/200\n"," - 1s - loss: 1.1712e-05 - accuracy: 1.0000 - val_loss: 2.1668 - val_accuracy: 0.7535\n","\n","Epoch 00082: val_loss did not improve from 0.00219\n","Epoch 83/200\n"," - 1s - loss: 1.1002e-05 - accuracy: 1.0000 - val_loss: 1.1916 - val_accuracy: 0.7527\n","\n","Epoch 00083: val_loss did not improve from 0.00219\n","Epoch 84/200\n"," - 1s - loss: 1.0527e-05 - accuracy: 1.0000 - val_loss: 2.2086e-05 - val_accuracy: 0.7504\n","\n","Epoch 00084: val_loss improved from 0.00219 to 0.00002, saving model to /content/gdrive/My Drive/Colab Notebooks/Project_Stock/model/ma_cross 200_129_ohlc.hdf5\n","Epoch 85/200\n"," - 1s - loss: 9.9249e-06 - accuracy: 1.0000 - val_loss: 5.7380 - val_accuracy: 0.7519\n","\n","Epoch 00085: val_loss did not improve from 0.00002\n","Epoch 86/200\n"," - 1s - loss: 9.4011e-06 - accuracy: 1.0000 - val_loss: 4.0708 - val_accuracy: 0.7512\n","\n","Epoch 00086: val_loss did not improve from 0.00002\n","Epoch 87/200\n"," - 1s - loss: 8.9456e-06 - accuracy: 1.0000 - val_loss: 2.8936 - val_accuracy: 0.7512\n","\n","Epoch 00087: val_loss did not improve from 0.00002\n","Epoch 88/200\n"," - 1s - loss: 8.3739e-06 - accuracy: 1.0000 - val_loss: 1.2473 - val_accuracy: 0.7512\n","\n","Epoch 00088: val_loss did not improve from 0.00002\n","Epoch 89/200\n"," - 1s - loss: 7.8875e-06 - accuracy: 1.0000 - val_loss: 6.3682 - val_accuracy: 0.7519\n","\n","Epoch 00089: val_loss did not improve from 0.00002\n","Epoch 90/200\n"," - 1s - loss: 7.4325e-06 - accuracy: 1.0000 - val_loss: 0.5627 - val_accuracy: 0.7504\n","\n","Epoch 00090: val_loss did not improve from 0.00002\n","Epoch 91/200\n"," - 1s - loss: 7.1754e-06 - accuracy: 1.0000 - val_loss: 2.2941 - val_accuracy: 0.7519\n","\n","Epoch 00091: val_loss did not improve from 0.00002\n","Epoch 92/200\n"," - 1s - loss: 6.6914e-06 - accuracy: 1.0000 - val_loss: 0.1816 - val_accuracy: 0.7535\n","\n","Epoch 00092: val_loss did not improve from 0.00002\n","Epoch 93/200\n"," - 1s - loss: 6.4172e-06 - accuracy: 1.0000 - val_loss: 0.1941 - val_accuracy: 0.7519\n","\n","Epoch 00093: val_loss did not improve from 0.00002\n","Epoch 94/200\n"," - 1s - loss: 6.0194e-06 - accuracy: 1.0000 - val_loss: 2.5626 - val_accuracy: 0.7535\n","\n","Epoch 00094: val_loss did not improve from 0.00002\n","Epoch 95/200\n"," - 1s - loss: 5.7760e-06 - accuracy: 1.0000 - val_loss: 8.9970 - val_accuracy: 0.7535\n","\n","Epoch 00095: val_loss did not improve from 0.00002\n","Epoch 96/200\n"," - 1s - loss: 5.4040e-06 - accuracy: 1.0000 - val_loss: 4.7934 - val_accuracy: 0.7519\n","\n","Epoch 00096: val_loss did not improve from 0.00002\n","Epoch 97/200\n"," - 1s - loss: 5.0631e-06 - accuracy: 1.0000 - val_loss: 0.3939 - val_accuracy: 0.7535\n","\n","Epoch 00097: val_loss did not improve from 0.00002\n","Epoch 98/200\n"," - 1s - loss: 4.8421e-06 - accuracy: 1.0000 - val_loss: 3.7065 - val_accuracy: 0.7535\n","\n","Epoch 00098: val_loss did not improve from 0.00002\n","Epoch 99/200\n"," - 1s - loss: 4.6361e-06 - accuracy: 1.0000 - val_loss: 2.5491 - val_accuracy: 0.7535\n","\n","Epoch 00099: val_loss did not improve from 0.00002\n","Epoch 100/200\n"," - 1s - loss: 4.3428e-06 - accuracy: 1.0000 - val_loss: 2.8319e-09 - val_accuracy: 0.7519\n","\n","Epoch 00100: val_loss improved from 0.00002 to 0.00000, saving model to /content/gdrive/My Drive/Colab Notebooks/Project_Stock/model/ma_cross 200_129_ohlc.hdf5\n","Epoch 101/200\n"," - 1s - loss: 4.1387e-06 - accuracy: 1.0000 - val_loss: 5.0726 - val_accuracy: 0.7512\n","\n","Epoch 00101: val_loss did not improve from 0.00000\n","Epoch 102/200\n"," - 1s - loss: 3.9652e-06 - accuracy: 1.0000 - val_loss: 0.0057 - val_accuracy: 0.7512\n","\n","Epoch 00102: val_loss did not improve from 0.00000\n","Epoch 103/200\n"," - 1s - loss: 3.7249e-06 - accuracy: 1.0000 - val_loss: 2.9538 - val_accuracy: 0.7550\n","\n","Epoch 00103: val_loss did not improve from 0.00000\n","Epoch 104/200\n"," - 1s - loss: 3.5211e-06 - accuracy: 1.0000 - val_loss: 0.6313 - val_accuracy: 0.7527\n","\n","Epoch 00104: val_loss did not improve from 0.00000\n","Epoch 105/200\n"," - 1s - loss: 3.3083e-06 - accuracy: 1.0000 - val_loss: 1.5901 - val_accuracy: 0.7535\n","\n","Epoch 00105: val_loss did not improve from 0.00000\n","Epoch 106/200\n"," - 1s - loss: 3.1303e-06 - accuracy: 1.0000 - val_loss: 2.1852 - val_accuracy: 0.7535\n","\n","Epoch 00106: val_loss did not improve from 0.00000\n","Epoch 107/200\n"," - 1s - loss: 2.9520e-06 - accuracy: 1.0000 - val_loss: 3.7756 - val_accuracy: 0.7535\n","\n","Epoch 00107: val_loss did not improve from 0.00000\n","Epoch 108/200\n"," - 1s - loss: 2.7766e-06 - accuracy: 1.0000 - val_loss: 0.4603 - val_accuracy: 0.7496\n","\n","Epoch 00108: val_loss did not improve from 0.00000\n","Epoch 109/200\n"," - 1s - loss: 2.6755e-06 - accuracy: 1.0000 - val_loss: 2.7103 - val_accuracy: 0.7504\n","\n","Epoch 00109: val_loss did not improve from 0.00000\n","Epoch 110/200\n"," - 1s - loss: 2.5593e-06 - accuracy: 1.0000 - val_loss: 3.3593 - val_accuracy: 0.7566\n","\n","Epoch 00110: val_loss did not improve from 0.00000\n","Epoch 111/200\n"," - 1s - loss: 2.4043e-06 - accuracy: 1.0000 - val_loss: 2.2215 - val_accuracy: 0.7496\n","\n","Epoch 00111: val_loss did not improve from 0.00000\n","Epoch 112/200\n"," - 1s - loss: 2.2625e-06 - accuracy: 1.0000 - val_loss: 3.0400e-06 - val_accuracy: 0.7558\n","\n","Epoch 00112: val_loss did not improve from 0.00000\n","Epoch 113/200\n"," - 1s - loss: 2.1605e-06 - accuracy: 1.0000 - val_loss: 2.9777 - val_accuracy: 0.7512\n","\n","Epoch 00113: val_loss did not improve from 0.00000\n","Epoch 114/200\n"," - 1s - loss: 2.0479e-06 - accuracy: 1.0000 - val_loss: 1.0363e-05 - val_accuracy: 0.7512\n","\n","Epoch 00114: val_loss did not improve from 0.00000\n","Epoch 115/200\n"," - 1s - loss: 2.0020e-06 - accuracy: 1.0000 - val_loss: 3.1663 - val_accuracy: 0.7543\n","\n","Epoch 00115: val_loss did not improve from 0.00000\n","Epoch 116/200\n"," - 1s - loss: 1.8552e-06 - accuracy: 1.0000 - val_loss: 7.5561 - val_accuracy: 0.7481\n","\n","Epoch 00116: val_loss did not improve from 0.00000\n","Epoch 117/200\n"," - 1s - loss: 1.7966e-06 - accuracy: 1.0000 - val_loss: 2.6819 - val_accuracy: 0.7543\n","\n","Epoch 00117: val_loss did not improve from 0.00000\n","Epoch 118/200\n"," - 1s - loss: 1.6653e-06 - accuracy: 1.0000 - val_loss: 0.2268 - val_accuracy: 0.7527\n","\n","Epoch 00118: val_loss did not improve from 0.00000\n","Epoch 119/200\n"," - 1s - loss: 1.5922e-06 - accuracy: 1.0000 - val_loss: 1.1815 - val_accuracy: 0.7573\n","\n","Epoch 00119: val_loss did not improve from 0.00000\n","Epoch 120/200\n"," - 1s - loss: 1.4832e-06 - accuracy: 1.0000 - val_loss: 8.0064 - val_accuracy: 0.7519\n","\n","Epoch 00120: val_loss did not improve from 0.00000\n","Epoch 121/200\n"," - 1s - loss: 1.4008e-06 - accuracy: 1.0000 - val_loss: 4.2083 - val_accuracy: 0.7519\n","\n","Epoch 00121: val_loss did not improve from 0.00000\n","Epoch 122/200\n"," - 1s - loss: 1.3371e-06 - accuracy: 1.0000 - val_loss: 1.5429 - val_accuracy: 0.7535\n","\n","Epoch 00122: val_loss did not improve from 0.00000\n","Epoch 123/200\n"," - 1s - loss: 1.2607e-06 - accuracy: 1.0000 - val_loss: 0.2751 - val_accuracy: 0.7512\n","\n","Epoch 00123: val_loss did not improve from 0.00000\n","Epoch 124/200\n"," - 1s - loss: 1.2157e-06 - accuracy: 1.0000 - val_loss: 2.1791 - val_accuracy: 0.7488\n","\n","Epoch 00124: val_loss did not improve from 0.00000\n","Epoch 125/200\n"," - 1s - loss: 1.1463e-06 - accuracy: 1.0000 - val_loss: 2.1978 - val_accuracy: 0.7519\n","\n","Epoch 00125: val_loss did not improve from 0.00000\n","Epoch 126/200\n"," - 1s - loss: 1.0908e-06 - accuracy: 1.0000 - val_loss: 3.2185 - val_accuracy: 0.7543\n","\n","Epoch 00126: val_loss did not improve from 0.00000\n","Epoch 127/200\n"," - 1s - loss: 1.0416e-06 - accuracy: 1.0000 - val_loss: 10.5756 - val_accuracy: 0.7512\n","\n","Epoch 00127: val_loss did not improve from 0.00000\n","Epoch 128/200\n"," - 1s - loss: 9.8461e-07 - accuracy: 1.0000 - val_loss: 2.0272 - val_accuracy: 0.7512\n","\n","Epoch 00128: val_loss did not improve from 0.00000\n","Epoch 129/200\n"," - 1s - loss: 9.2354e-07 - accuracy: 1.0000 - val_loss: 3.1482 - val_accuracy: 0.7519\n","\n","Epoch 00129: val_loss did not improve from 0.00000\n","Epoch 130/200\n"," - 1s - loss: 8.9131e-07 - accuracy: 1.0000 - val_loss: 3.3986 - val_accuracy: 0.7512\n","\n","Epoch 00130: val_loss did not improve from 0.00000\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"SjR2mmM3h81C","colab_type":"text"},"source":["### CORR MAP"]},{"cell_type":"code","metadata":{"id":"a01LFE7QEp70","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1595863762931,"user_tz":-540,"elapsed":759,"user":{"displayName":"JJANGJAE","photoUrl":"","userId":"08178289703395036410"}}},"source":["from sklearn.metrics import confusion_matrix\n","import matplotlib.pyplot as plt\n","\n","def plot_confusion_matrix(y_test, y_pred, classes,\n","                          normalize=False,\n","                          title='Unnormalized confusion matrix',\n","                          cmap=plt.cm.Blues):\n","    cm = confusion_matrix(y_test, y_pred)\n","    \n","    if normalize:\n","        cm = np.round(cm.astype('float') / cm.sum(axis=1)[:, np.newaxis], 2)\n","        \n","    np.set_printoptions(precision=2)\n","        \n","    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n","    plt.title(title)\n","    plt.colorbar()\n","    tick_marks = np.arange(len(classes))\n","    plt.xticks(tick_marks, classes, rotation=45)\n","    plt.yticks(tick_marks, classes)\n","\n","    thresh = cm.min() + (cm.max() - cm.min()) / 2.\n","    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n","        plt.text(j, i, cm[i, j],\n","                 horizontalalignment=\"center\",\n","                 color=\"white\" if cm[i, j] > thresh else \"red\")\n","\n","    plt.tight_layout()\n","    plt.ylabel('True expression')\n","    plt.xlabel('Predicted expression')\n","    plt.show()"],"execution_count":15,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"YdgMobpNquuJ","colab_type":"text"},"source":["### LOAD MODEL"]},{"cell_type":"code","metadata":{"id":"vPhk-TwqqtYz","colab_type":"code","colab":{}},"source":["from keras.models import load_model\n","model = load_model(gdrive_path + 'model/ma_cross %s_%s_ohlc.hdf5' % (input_data_length, model_num))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"KUC9rWWCiAD_","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1595864146527,"user_tz":-540,"elapsed":791,"user":{"displayName":"JJANGJAE","photoUrl":"","userId":"08178289703395036410"}},"outputId":"2d16c02e-29c6-49ea-92e9-5c450bc7e07d"},"source":["confidence = 0.9\n","y_pred_ = model.predict(X_val, verbose=1)\n","y_pred = np.where(y_pred_[:, [-1]] <= confidence, 0, 1).reshape(-1, )\n","t_te = np.argmax(Y_val, axis=1)"],"execution_count":33,"outputs":[{"output_type":"stream","text":["647/647 [==============================] - 0s 100us/step\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"wcOzeUJTiDtF","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":311},"executionInfo":{"status":"ok","timestamp":1595864146827,"user_tz":-540,"elapsed":804,"user":{"displayName":"JJANGJAE","photoUrl":"","userId":"08178289703395036410"}},"outputId":"0f0d6f17-b21f-4c72-d43c-d276757cfa7b"},"source":["fig = plot_confusion_matrix(y_test=t_te, y_pred=y_pred,\n","                      classes=np.array(('0', '1')),\n","                      normalize=True,\n","                      cmap=plt.cm.Greys,\n","                      title='Average accuracy: ' + str(np.sum(y_pred == t_te)/len(t_te)) + '\\n')"],"execution_count":34,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"PATzh2prsRZ6","colab_type":"code","colab":{}},"source":[""],"execution_count":null,"outputs":[]}]}