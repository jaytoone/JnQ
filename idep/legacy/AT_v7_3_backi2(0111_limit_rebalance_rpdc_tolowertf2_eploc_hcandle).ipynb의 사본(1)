{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3166,"status":"ok","timestamp":1641882246301,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"6rmQpzEGXfCw","outputId":"9b2c44f8-a0fc-49ee-b1b9-0ec82441f2a7"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","import os, sys\n","\n","current_path = '/content/drive/My Drive/Colab Notebooks/JnQ/'\n","\n","os.chdir(current_path)\n","\n","mpl_finance_path = '/content/drive/My Drive/Colab Notebooks/JnQ/mpl_finance'\n","\n","if mpl_finance_path not in sys.path:\n","\n","  try:\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ')\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ/funcs')\n","    sys.path.insert(0, mpl_finance_path)\n","    \n","  except Exception as e:\n","    print(e)"]},{"cell_type":"markdown","metadata":{"id":"8uqYv5StTazo"},"source":["# requirements"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"9qGt60DKTZmf","executionInfo":{"status":"ok","timestamp":1641882246817,"user_tz":-540,"elapsed":521,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"outputs":[],"source":["# !pip install findiff\n","\n","# import nvstrings, nvcategory, cudf\n","# import cuml\n","# import cudf\n","\n","import matplotlib.pyplot as plt\n","from matplotlib import gridspec\n","from tqdm.notebook import tqdm\n","from funcs.funcs_ide import *\n","from funcs.funcs_indicator import *\n","from funcs.funcs_trader import *\n","import logging\n","\n","from utils import utils_v3_1216 as utils1\n","from utils import utils_v5_2_1216 as utils2\n","# from utils import utils_v7_3_1231_v7_3 as utils3\n","from utils import utils_public_0106_v7_3_candle2_1 as utils_public\n","\n","import mpl_finance as mf\n","import os\n","import datetime\n","\n","import IPython\n","import IPython.display\n","import matplotlib as mpl\n","\n","import numpy as np\n","# import jax.numpy as np\n","import pandas as pd\n","import seaborn as sns\n","# import tensorflow as tf\n","\n","import pickle\n","import shutil\n","import json\n","from easydict import EasyDict\n","\n","# from trendln import trendln\n","\n","from datetime import datetime\n","import random\n","import time\n","import warnings\n","\n","warnings.simplefilter(\"ignore\", category=RuntimeWarning)\n","# mpl.rcParams['figure.figsize'] = (8, 6)\n","# mpl.rcParams['axes.grid'] = False\n","\n","np.seterr(invalid=\"ignore\")\n","\n","pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)"]},{"cell_type":"markdown","metadata":{"id":"M8-EChy0VsDr"},"source":["## cudf"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":414,"status":"ok","timestamp":1638754008241,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"b09qAb1sVtRP","outputId":"3a824202-064a-4544-b791-ffc777bb3f9c"},"outputs":[{"name":"stdout","output_type":"stream","text":["usage: conda [-h] [-V] command ...\n","conda: error: unrecognized arguments: -t=/content/notebooks\n"]}],"source":["# !conda install -c rapidsai-nightly -c nvidia -c numba -c conda-forge \\\n","#     cudf python=3.7 cudatoolkit=11.1 -t=$nb_path"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":413,"status":"ok","timestamp":1638754715310,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"Jnz6i7ZqRnb0","outputId":"207bc57b-a17a-4f67-fb26-24e46e2c6e26"},"outputs":[{"name":"stdout","output_type":"stream","text":["***********************************************************************\n","Woo! Your instance has the right kind of GPU, a Tesla P100-PCIE-16GB!\n","***********************************************************************\n","\n"]}],"source":["# !git clone https://github.com/rapidsai/rapidsai-csp-utils.git\n","!python rapidsai-csp-utils/colab/env-check.py"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4sKA_9Dbg4s2"},"outputs":[],"source":["# This will update the Colab environment and restart the kernel.  Don't run the next cell until you see the session crash.\n","!bash rapidsai-csp-utils/colab/update_gcc.sh\n","import os\n","os._exit(00)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"d1C4pNiBhYHX"},"outputs":[],"source":["# This will install CondaColab.  This will restart your kernel one last time.  Run this cell by itself and only run the next cell once you see the session crash.\n","import condacolab\n","condacolab.install()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":414,"status":"ok","timestamp":1638754863073,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"iGx3ACTvZqck","outputId":"e8379cc4-c325-4fe0-ac46-5fbbd7d38829"},"outputs":[{"name":"stdout","output_type":"stream","text":["‚ú®üç∞‚ú® Everything looks OK!\n"]}],"source":["# you can now run the rest of the cells as normal\n","import condacolab\n","condacolab.check()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oR8s7U8c7C28","outputId":"22be2731-fae1-45fc-f310-e48f60774bb2"},"outputs":[{"name":"stdout","output_type":"stream","text":["Installing RAPIDS Stable 21.10\n","Starting the RAPIDS install on Colab.  This will take about 15 minutes.\n","Collecting package metadata (current_repodata.json): ...working... done\n","Solving environment: ...working... WARNING conda.core.solve:_add_specs(611): pinned spec cudatoolkit=11.1 conflicts with explicit specs.  Overriding pinned spec.\n","failed with initial frozen solve. Retrying with flexible solve.\n","Solving environment: ...working... WARNING conda.core.solve:_add_specs(611): pinned spec cudatoolkit=11.1 conflicts with explicit specs.  Overriding pinned spec.\n","failed with repodata from current_repodata.json, will retry with next repodata source.\n","Collecting package metadata (repodata.json): ...working... done\n"]}],"source":["# Installing RAPIDS is now 'python rapidsai-csp-utils/colab/install_rapids.py <release> <packages>'\n","# The <release> options are 'stable' and 'nightly'.  Leaving it blank or adding any other words will default to stable.\n","# The <packages> option are default blank or 'core'.  By default, we install RAPIDSAI and BlazingSQL.  The 'core' option will install only RAPIDSAI and not include BlazingSQL, \n","!python rapidsai-csp-utils/colab/install_rapids.py stable\n","import os\n","os.environ['NUMBAPRO_NVVM'] = '/usr/local/cuda/nvvm/lib64/libnvvm.so'\n","os.environ['NUMBAPRO_LIBDEVICE'] = '/usr/local/cuda/nvvm/libdevice/'\n","os.environ['CONDA_PREFIX'] = '/usr/local'"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kWsxi4ZpKtGt"},"outputs":[],"source":["import shutil\n","import sys\n","\n","colab_env = \"/usr/lib\"\n","\n","rapids_path = os.path.join(current_path, \"rapidsai-csp-utils/lib\")\n","rapids_libs = os.listdir(rapids_path)\n","print(rapids_libs)\n","# break\n","\n","for lib_ in rapids_libs:\n","  try:\n","    shutil.copy(os.path.join(rapids_path, lib_), os.path.join(colab_env, lib_))\n","    sys.path.append(os.path.join(colab_env, lib_))\n","    print(\"copied to\" + os.path.join(colab_env, lib_))\n","  except Exception as e:\n","    print(e)"]},{"cell_type":"markdown","metadata":{"id":"Iy76iO7gztne"},"source":["## move legacy files"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hMRht32Czwry"},"outputs":[],"source":["# print()\n","cur_dir_list = os.listdir('.')\n","for f in cur_dir_list:\n","  if 'legacy' in f :\n","    # print(f)\n","    if os.path.isdir(current_path + f,):\n","      continue\n","\n","    shutil.move(current_path + f, current_path + 'legacy/' + f)\n","    print(\"moved to\" + current_path + 'legacy/' +  f)"]},{"cell_type":"markdown","metadata":{"id":"Ic1mfmwWCIBu"},"source":["# makeset"]},{"cell_type":"markdown","metadata":{"id":"AUSBU7T8Suzi"},"source":["## sync_check_make"]},{"cell_type":"code","execution_count":63,"metadata":{"id":"QmhLikYlSuzi","executionInfo":{"status":"ok","timestamp":1641886871861,"user_tz":-540,"elapsed":316,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"outputs":[],"source":["def sync_check_make(df, second_df=None, third_df=None, fourth_df=None, fifth_df=None,\n","               sixth_df=None, seventh_df=None, eighth_df=None):\n","\n","    #           supertrend          #\n","    # df = st_price_line(df, second_df, '3m')\n","    # # print(df.head(100))\n","    # # return\n","\n","    # df = st_price_line(df, third_df, '5m')\n","    # df = st_price_line(df, fourth_df, '15m')\n","    # df = st_price_line(df, fifth_df, '30m')\n","    # df = st_price_line(df, sixth_df, '1h')\n","    # df = st_price_line(df, seventh_df, '4h')\n","\n","    # print(\"supertrend phase done\")\n","\n","    # --------------- rsi --------------- #  \n","    # df['rsi_1m'] = rsi(df, 14)    \n","    # third_df['rsi_5m'] = rsi(third_df, 14)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, third_df, [-1]), columns=['rsi_5m']))\n","    \n","    # print(\"rsi phase done\")\n","\n","\n","    # --------------- cci --------------- #  \n","    # df['cci_1m'] = cci(df, 20)\n","\n","    # print(\"cci phase done\")\n","\n","\n","    # --------------- ema --------------- #      \n","    # third_df['ema_5m'] = ema(third_df['close'], 200)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, third_df, [-1]), columns=['ema_5m']))\n","    \n","    # print(\"ema phase done\")\n","\n","\n","    # # --------------- dc --------------- #  \n","    # df = dc_line(df, None, '1m', dc_period=20)\n","    # df = dc_line(df, second_df, '3m', dc_period=20)\n","    # df = dc_line(df, third_df, '5m', dc_period=20)\n","    # df = dc_line(df, fourth_df, '15m', dc_period=20)\n","    # df = dc_line(df, fifth_df, '30m', dc_period=20)\n","    df = dc_line(df, sixth_df, '1h', dc_period=20)\n","    df = dc_line(df, seventh_df, '4h', dc_period=20)\n","\n","    print(\"dc phase done\")\n","    \n","    # # --------------- bband --------------- #  \n","    # df = bb_line(df, None, '1m')\n","    # df = bb_line(df, second_df, '3m')\n","    # df = bb_line(df, third_df, '5m')\n","    # df = bb_line(df, fourth_df, '15m')\n","    # df = bb_line(df, fifth_df, '30m')\n","    df = bb_line(df, sixth_df, '1h')\n","    df = bb_line(df, seventh_df, '4h')\n","\n","    print(\"bband phase done\")\n","\n","    # --------------- cbline --------------- #    \n","    # second_df['cloud_bline_3m'] = cloud_bline(second_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, second_df, [-1]), columns=['cloud_bline_3m']))\n","    # third_df['cloud_bline_5m'] = cloud_bline(third_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, third_df, [-1]), columns=['cloud_bline_5m']))\n","    # fourth_df['cloud_bline_15m'] = cloud_bline(fourth_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, fourth_df, [-1]), columns=['cloud_bline_15m']))\n","    # fifth_df['cloud_bline_30m'] = cloud_bline(fifth_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, fifth_df, [-1]), columns=['cloud_bline_30m']))\n","    # sixth_df['cloud_bline_1h'] = cloud_bline(sixth_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, sixth_df, [-1]), columns=['cloud_bline_1h']))\n","    # seventh_df['cloud_bline_4h'] = cloud_bline(seventh_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, seventh_df, [-1]), columns=['cloud_bline_4h']))\n","\n","    # print(\"cbline phase done\")\n","    \n","\n","    #           lucid sar              #\n","    # df['sar_1m'], df['sar_uptrend_1m'] = lucid_sar(df, return_uptrend=True)\n","\n","    # second_df['sar_3m'], second_df['sar_uptrend_3m'] = lucid_sar(second_df, af_initial=0.01, return_uptrend=True)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, second_df, [-2, -1], backing_i=1), columns=['sar_3m', 'sar_uptrend_3m']))\n","\n","    # third_df['sar_5m'], third_df['sar_uptrend_5m'] = lucid_sar(third_df, af_initial=0.01, return_uptrend=True)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, third_df, [-2, -1], backing_i=1), columns=['sar_5m', 'sar_uptrend_5m']))\n","\n","    # fourth_df['sar_15m'], fourth_df['sar_uptrend_15m'] = lucid_sar(fourth_df, af_initial=0.01, return_uptrend=True)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, fourth_df, [-2, -1], backing_i=1), columns=['sar_15m', 'sar_uptrend_15m']))\n","\n","    # seventh_df['sar_4h'], seventh_df['sar_uptrend_4h'] = lucid_sar(seventh_df, return_uptrend=True)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, seventh_df, [-2, -1], backing_i=1), columns=['sar_4h', 'sar_uptrend_4h']))\n","    \n","    # print(\"sar phase done\")\n","\n","    \n","    #           stochastic              #\n","    # df['stoch_1m'] = stoch(df, 13, 3, 3)\n","\n","    # third_df['stoch'] = stoch(third_df, 13, 3, 3)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, third_df, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","    # print(\"stoch phase done\")\n","\n","\n","    return df\n"]},{"cell_type":"markdown","metadata":{"id":"mEKyVbHWSuzi"},"source":["## make & save res_df (concat ÏÉùÍ∞ÅÌïòÎ©¥, timeindex sync ÎßûÏ∂∞ÏïºÌï®)"]},{"cell_type":"markdown","metadata":{"id":"VdukVo5-Suzj"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11,"status":"error","timestamp":1636201718856,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"khKb9nhlSuzj","outputId":"02bf2c60-f298-4fe9-e6bb-78230ac1348c"},"outputs":[{"ename":"NameError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-5-ee034491b257>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0ma_day\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m3600\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m24\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtqdm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m   \u001b[0mkeys\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mfile_list\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'file_list' is not defined"]}],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  if '2021-07-01'.upper() not in file_list[i]:\n","  # if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    excel_name = key.replace(\".xlsx\", \"_st1h_backi2.xlsx\")\n","    excel_path = save_path + excel_name\n","\n","    if excel_name in exist_list:\n","      print(excel_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m ÎßàÏßÄÎßâ timeindex Ïùò date Í∏∞Ï§Ä, 08:59:59.999000 Î•º last timestamp Î°ú ÏÑ§Ï†ï\n","      #      2. ÏãúÏûë timestamp Îäî Î™®Îì† tf Ïùò Í∞ÄÏû• ÏµúÍ∑º ÏãúÏûë index,\n","      #       a. 1m Ïùò ÏãúÏûë timeindex Îäî ÏµúÏÜå, htf Ïùò ÏãúÏûë timeindex Î≥¥Îã§ interval ÎßåÌÅº ÏïûÏÑúÏïºÌï®\n","      #         i. Îî∞ÎùºÏÑú 1m open_index, latest_open_index + 1d Î•º ÌïòÎ©¥ Îåê\n","      #           1. timestamp ÏúºÎ°ú Î≥ÄÌôòÌõÑ 1day Î•º ÎçîÌïòÍ≥† datetime ÏúºÎ°ú Î≥ÄÌôò\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","    latest_open_index = sorted(open_indexes)[-1]\n","    \n","    open_ts = datetime.timestamp(latest_open_index)\n","    latest_open_index_1m = datetime.fromtimestamp(open_ts + a_day)\n","\n","    #   str Î°ú ÎßåÎì§Ïñ¥ Ï†ëÍ∑ºÌïòÎ©¥ Î∂àÍ∞ÄÌï®  #\n","    end_index = pd.to_datetime(str(df.index[-1]).split(\" \")[0] + \" 08:59:59.999000\")\n","    # break\n","\n","    sliced_df = df.loc[latest_open_index_1m:end_index] # to_lower_tf Ïùò Í∏∞Ï§Ä ltf\n","    sliced_second_df = second_df.loc[latest_open_index:end_index]\n","    sliced_third_df = third_df.loc[latest_open_index:end_index]\n","    sliced_fourth_df = fourth_df.loc[latest_open_index:end_index]\n","    sliced_fifth_df = fifth_df.loc[latest_open_index:end_index]\n","\n","    print(\"sliced index\")\n","    print(sliced_df.index[[0, -1]])\n","    print(sliced_second_df.index[[0, -1]])\n","    print(sliced_third_df.index[[0, -1]])\n","    print(sliced_fourth_df.index[[0, -1]])\n","    print(sliced_fifth_df.index[[0, -1]])\n","\n","    try:\n","      sliced_sixth_df = sixth_df.loc[latest_open_index:end_index]\n","      sliced_seventh_df = seventh_df.loc[latest_open_index:end_index]\n","\n","      print(sliced_sixth_df.index[[0, -1]])\n","      print(sliced_seventh_df.index[[0, -1]])\n","\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df, sliced_sixth_df, sliced_seventh_df)\n","    \n","    except:\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df)\n","\n","\n","\n","    res_df.to_excel(excel_path)\n","    print(excel_name, \"saved succesfully !\")"]},{"cell_type":"markdown","metadata":{"id":"Bw5JibDKSuzj"},"source":["### xlsx to feather"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":355},"id":"VA-_gcA7Suzj","outputId":"f6f3b55d-ec2c-4b2c-d62e-3de7c0384dc4"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"be2b848dbcb14a079a2b7bd605af6435","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/156 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["DatetimeIndex(['2021-06-28 00:00:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:02:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:04:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:14:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:29:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-09-14 03:59:59.999000', '2021-11-15 14:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-03-10 20:59:59.999000', '2021-11-15 16:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","\n","xlsx converted to feather !\n","DatetimeIndex(['2021-06-28 00:00:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:02:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:04:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:14:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:29:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-09-14 03:59:59.999000', '2021-11-15 14:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-03-10 20:59:59.999000', '2021-11-15 16:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","\n","xlsx converted to feather !\n"]}],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  # if '2021-07-01'.upper() not in file_list[i]:\n","  if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    feather_name = key.replace(\".xlsx\", \".ftr\")\n","    # feather_path = save_path + feather_name\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m ÎßàÏßÄÎßâ timeindex Ïùò date Í∏∞Ï§Ä, 08:59:59.999000 Î•º last timestamp Î°ú ÏÑ§Ï†ï\n","      #      2. ÏãúÏûë timestamp Îäî Î™®Îì† tf Ïùò Í∞ÄÏû• ÏµúÍ∑º ÏãúÏûë index,\n","      #       a. 1m Ïùò ÏãúÏûë timeindex Îäî ÏµúÏÜå, htf Ïùò ÏãúÏûë timeindex Î≥¥Îã§ interval ÎßåÌÅº ÏïûÏÑúÏïºÌï®\n","      #         i. Îî∞ÎùºÏÑú 1m open_index, latest_open_index + 1d Î•º ÌïòÎ©¥ Îåê\n","      #           1. timestamp ÏúºÎ°ú Î≥ÄÌôòÌõÑ 1day Î•º ÎçîÌïòÍ≥† datetime ÏúºÎ°ú Î≥ÄÌôò\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","\n","    df.reset_index().to_feather(date_path + feather_name, compression='lz4')\n","    second_df.reset_index().to_feather(date_path2 + feather_name, compression='lz4')\n","    third_df.reset_index().to_feather(date_path3 + feather_name, compression='lz4')\n","    fourth_df.reset_index().to_feather(date_path4 + feather_name, compression='lz4')\n","    fifth_df.reset_index().to_feather(date_path5 + feather_name, compression='lz4')\n","    sixth_df.reset_index().to_feather(date_path6 + feather_name, compression='lz4')\n","    seventh_df.reset_index().to_feather(date_path7 + feather_name, compression='lz4')\n","\n","    print(\"xlsx converted to feather !\")\n","    "]},{"cell_type":"markdown","metadata":{"id":"Pe0QpnORSuzk"},"source":["### add itv_name to ftr"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":223,"referenced_widgets":["e3225655da874b8d89cc8b2a381b3fb6"]},"executionInfo":{"elapsed":43664,"status":"ok","timestamp":1638246331122,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"M-gl30KxSuzk","outputId":"1cfcb580-8d25-4bd0-fdd0-213640779ce2"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"e3225655da874b8d89cc8b2a381b3fb6","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/175 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 BTCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 BCHUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 XRPUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 EOSUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 LTCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ETCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 LINKUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 XLMUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ADAUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ETHUSDT_1m.ftr\n"]}],"source":["save_path = './candlestick_concated/res_df/'\n","\n","# dir_path = \"bbdc3m_backi2\"\n","# date = '2021-10-10'\n","date = '2021-07-01'\n","\n","db_path = './candlestick_concated/database_bn/non_cum/%s/' % date\n","os.makedirs(os.path.join(db_path), exist_ok=True)\n","\n","# exist_list = os.listdir(os.path.join(save_path, dir_path))\n","# break\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","        \n","    df = shutil.copy(date_path + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n","    second_df = shutil.copy(date_path2 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval2))\n","    third_df = shutil.copy(date_path3 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval3))\n","    fourth_df = shutil.copy(date_path4 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval4))\n","    fifth_df = shutil.copy(date_path5 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval5))\n","    sixth_df = shutil.copy(date_path6 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval6))\n","    seventh_df = shutil.copy(date_path7 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval7))\n","\n","    print(\"copied to\" + db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n"]},{"cell_type":"markdown","metadata":{"id":"4oZ1ohTtSuzk"},"source":["### feather ver."]},{"cell_type":"code","execution_count":64,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":587,"referenced_widgets":["3200455890c445beb1ffd6ad259b8cbb","7d96eec34cbe4cd482d6d0c6b3462d0d","24a6dcc4e3ba43d6a1ea15d14900cb66","fa2be8ab0fdd479294b35d7258bf5732","d8859185995d402d856b6bbc53e3c1ec","b52922864a824417bf4b46f1069334f2","186ae7bf0e7845af9e426a89e27b0164","25928e1f2017445a919af118620c0639","385ca486f82947f6960e8602c04c9eb8","8e37fa2709ef416f8b088205972d08c6","9ee7b2fa5ca3449da564d16ddc976c84"]},"id":"vgVHpnUsSuzk","outputId":"dc8c54d8-8a13-4111-c951-3f571d3e4048","executionInfo":{"status":"ok","timestamp":1641886901006,"user_tz":-540,"elapsed":25261,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"3200455890c445beb1ffd6ad259b8cbb","version_minor":0,"version_major":2},"text/plain":["  0%|          | 0/7 [00:00<?, ?it/s]"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["DatetimeIndex(['2020-09-05 00:00:59.999000', '2022-01-10 15:18:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:02:59.999000', '2022-01-10 15:20:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:04:59.999000', '2022-01-10 15:19:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:14:59.999000', '2022-01-10 15:29:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:29:59.999000', '2022-01-10 15:29:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 00:59:59.999000', '2022-01-10 15:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2022-01-10 16:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","\n","sliced index\n","DatetimeIndex(['2020-09-06 04:59:59.999000', '2022-01-09 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2022-01-09 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2022-01-09 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2022-01-09 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2022-01-09 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2022-01-09 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2022-01-09 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","dc phase done\n"]},{"output_type":"stream","name":"stderr","text":["/content/drive/My Drive/Colab Notebooks/JnQ/funcs/funcs_indicator.py:356: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  htf_df[dc_upper], htf_df[dc_lower], htf_df[dc_base] = donchian_channel(htf_df, dc_period)\n","/content/drive/My Drive/Colab Notebooks/JnQ/funcs/funcs_indicator.py:398: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  htf_df[bb_upper], htf_df[bb_lower], _ = bb_width(htf_df, 20, 1)\n"]},{"output_type":"stream","name":"stdout","text":["bband phase done\n","./candlestick_concated/res_df/bb4h_backi2/noncat/cum/2022-01-10/2022-01-10 ETHUSDT.ftr saved succesfully !\n"]}],"source":["# db_path = './candlestick_concated/database_ub/' # upbit\n","db_path = './candlestick_concated/database_bn/'   # binance\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","save_dir_path = \"bb4h_backi2\"\n","\n","# date = '2021-11-17'\n","date = '2022-01-10'\n","\n","cum_path = \"cum\"\n","# cum_path = \"non_cum\"  # non_cum ÏúºÎ°ú ÏßÑÌñâÌïòÎäî Í≤ΩÏö∞, row concat Ïö©ÎèÑÏù¥Í∏∞ ÎïåÎ¨∏Ïóê noncat -> concat ÏúºÎ°ú Î≥ÄÍ≤Ω (base cols Î•º Î™®Îëê Îã¥Í≥† ÏûàÏùå)\n","\n","concat_path = 'noncat' # non_cum ÎÅºÎ¶¨ cols cum ÌïòÎäî Í≤ΩÏö∞ noncat Ïù¥ ÎßûÏùå\n","# concat_path = 'concat'\n","\n","data_path = os.path.join(db_path, cum_path, date)\n","save_path = os.path.join(save_path, save_dir_path, concat_path, cum_path, date)\n","\n","os.makedirs(save_path, exist_ok=True)\n","\n","file_list = os.listdir(data_path)\n","exist_list = os.listdir(save_path)\n","# break\n","\n","interval = '1m'\n","interval2 = '3m'\n","interval3 = '5m'\n","interval4 = '15m'\n","interval5 = '30m'\n","interval6 = '1h'\n","interval7 = '4h'\n","interval8 = '1d'\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","\n","    if \"_1m\" not in key:\n","      continue\n","\n","    # feather_name = key.replace(\".ftr\", \"_%.ftr\" % save_dir_path)\n","    feather_name = key.replace(\"_1m\", \"\")\n","    feather_path = os.path.join(save_path, feather_name)\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    end_indexes = []\n","    \n","    df = pd.read_feather(os.path.join(data_path, key), columns=None, use_threads=True).set_index(\"index\")\n","    second_df = pd.read_feather(os.path.join(data_path, key.replace(interval, interval2)), columns=None, use_threads=True).set_index(\"index\")\n","    third_df = pd.read_feather(os.path.join(data_path, key.replace(interval, interval3)), columns=None, use_threads=True).set_index(\"index\")\n","    fourth_df = pd.read_feather(os.path.join(data_path, key.replace(interval, interval4)), columns=None, use_threads=True).set_index(\"index\")\n","    fifth_df = pd.read_feather(os.path.join(data_path, key.replace(interval, interval5)), columns=None, use_threads=True).set_index(\"index\")\n","        \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    end_indexes.append(df.index[-1])\n","    end_indexes.append(second_df.index[-1])\n","    end_indexes.append(third_df.index[-1])\n","    end_indexes.append(fourth_df.index[-1])\n","    end_indexes.append(fifth_df.index[-1])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m ÎßàÏßÄÎßâ timeindex Ïùò date Í∏∞Ï§Ä, 08:59:59.999000 Î•º last timestamp Î°ú ÏÑ§Ï†ï\n","      #      2. ÏãúÏûë timestamp Îäî Î™®Îì† tf Ïùò Í∞ÄÏû• ÏµúÍ∑º ÏãúÏûë index,\n","      #       a. 1m Ïùò ÏãúÏûë timeindex Îäî ÏµúÏÜå, htf Ïùò ÏãúÏûë timeindex Î≥¥Îã§ interval ÎßåÌÅº ÏïûÏÑúÏïºÌï®\n","      #         i. Îî∞ÎùºÏÑú 1m open_index, latest_open_index + 1d Î•º ÌïòÎ©¥ Îåê\n","      #           1. timestamp ÏúºÎ°ú Î≥ÄÌôòÌõÑ 1day Î•º ÎçîÌïòÍ≥† datetime ÏúºÎ°ú Î≥ÄÌôò\n","      sixth_df = pd.read_feather(os.path.join(data_path, key.replace(interval, interval6)), columns=None, use_threads=True).set_index(\"index\")\n","      seventh_df = pd.read_feather(os.path.join(data_path, key.replace(interval, interval7)), columns=None, use_threads=True).set_index(\"index\")\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","      end_indexes.append(sixth_df.index[-1])\n","      end_indexes.append(seventh_df.index[-1])\n","\n","    except Exception as e:\n","      print(e)\n","\n","    latest_open_index = sorted(open_indexes)[-1]\n","    recent_end_index = sorted(end_indexes)[0]\n","    \n","    open_ts = datetime.timestamp(latest_open_index)\n","    latest_open_index_1m = datetime.fromtimestamp(open_ts + a_day)\n","\n","    end_ts = datetime.timestamp(recent_end_index)\n","    recent_end_index_1m = datetime.fromtimestamp(end_ts - a_day)\n","\n","    #   str Î°ú ÎßåÎì§Ïñ¥ Ï†ëÍ∑ºÌïòÎ©¥ Î∂àÍ∞ÄÌï®  #\n","    #   latest_open_index_1m ÏùÄ latest_open_index Î≥¥Îã§ ÌÅ¨Í∏∞Îßå ÌïòÎ©¥ Îê®   # (9:00:00 ÍµêÏ≤¥ ÌïÑÏöîÏóÜÏù¥)\n","    if \"999000\" in str(df.index[-1]):\n","      # end_index = pd.to_datetime(str(df.index[-1]).split(\" \")[0] + \" 08:59:59.999000\")\n","      end_index = pd.to_datetime(str(recent_end_index_1m).split(\" \")[0] + \" 08:59:59.999000\")\n","    else:\n","      # end_index = pd.to_datetime(str(df.index[-1]).split(\" \")[0] + \" 09:00:00\")\n","      end_index = pd.to_datetime(str(recent_end_index_1m).split(\" \")[0] + \" 09:00:00\")\n","      # end_index = pd.to_datetime(\"2021-11-15\" + \" 09:00:00\")\n","\n","    #   ***** 1m open_idx Îäî htf Î≥¥Îã§ Ïª§ÏïºÌï® --> to_lower_tf Î•º ÏÇ¨Ïö©ÌïòÍ∏∞ ÏúÑÌï®ÏûÑ   #\n","    sliced_df = df.loc[latest_open_index_1m:end_index] # to_lower_tf Ïùò Í∏∞Ï§Ä ltf\n","\n","    sliced_second_df = second_df.loc[latest_open_index:end_index]\n","    sliced_third_df = third_df.loc[latest_open_index:end_index]\n","    sliced_fourth_df = fourth_df.loc[latest_open_index:end_index]\n","    sliced_fifth_df = fifth_df.loc[latest_open_index:end_index]\n","\n","    print(\"sliced index\")\n","    print(sliced_df.index[[0, -1]])\n","    print(sliced_second_df.index[[0, -1]])\n","    print(sliced_third_df.index[[0, -1]])\n","    print(sliced_fourth_df.index[[0, -1]])\n","    print(sliced_fifth_df.index[[0, -1]])\n","\n","    try:\n","      sliced_sixth_df = sixth_df.loc[latest_open_index:end_index]\n","      sliced_seventh_df = seventh_df.loc[latest_open_index:end_index]\n","\n","      print(sliced_sixth_df.index[[0, -1]])\n","      print(sliced_seventh_df.index[[0, -1]])\n","\n","      res_df = sync_check_make(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df, sliced_sixth_df, sliced_seventh_df)\n","    \n","    except:\n","      res_df = sync_check_make(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df)\n","\n","\n","\n","    # res_df.to_feather(feather_path)\n","    res_df.reset_index().to_feather(feather_path, compression='lz4')\n","    print(feather_path, \"saved succesfully !\")"]},{"cell_type":"markdown","metadata":{"id":"jTN3M842Suzl"},"source":["## concat & save new res_df"]},{"cell_type":"markdown","metadata":{"id":"MlFkpO1MSuzl"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"U-3QkfbFSuzl"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","dict_name = \"2021-07-01 ETHUSDT_bb15m_backi2_res_dfs.pkl\"\n","\n","#     load with pickle    #\n","with open(save_path + dict_name, 'rb') as f:\n","  saved_res_df_dict = pickle.load(f)\n","\n","print(dict_name, \"loaded !\")\n","res_df_files = os.listdir(save_path)\n","res_df_files.reverse()\n","\n","print(res_df_files)\n","\n","res_df_dict = {}\n","\n","base_postfix = '_bb15m_backi2.xlsx'\n","new_postfix = '_st1h_backi2.xlsx'\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for k_i, key in enumerate(res_df_files):\n","\n","  if '2021-07-01'.upper() not in key:\n","  # if '2021-10-10'.upper() not in key:\n","    continue\n","\n","  # if \"link\".upper() not in key:\n","  # if \"btc\".upper() not in key:\n","  #   continue\n","\n","  if new_postfix not in key:\n","    continue\n","\n","  # if key in \n","\n","  if sample_cnt == max_cnt:\n","    dict_name = \"%s_res_dfs.pkl\" % key.split(\".\")[0]\n","    print(\"dict_name :\", dict_name)\n","\n","  base_df = saved_res_df_dict[key.replace(new_postfix, base_postfix)]\n","  # base_df = pd.read_excel(save_path + key.replace(new_postfix, base_postfix), index_col=0)  \n","  res_df = pd.read_excel(save_path + key, index_col=0)  \n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  droped_new_res_df.head()\n","  # break\n","\n","  # res_df_dict[key] = res_df\n","  res_df_dict[key] = droped_new_res_df\n","  print(key, \"saved to dict !\")\n","\n","  #     save with pickle    #\n","  with open(save_path + dict_name, 'wb') as f:\n","    pickle.dump(res_df_dict, f)\n","\n","  sample_cnt -= 1\n","\n","  if sample_cnt <= 0:\n","    break\n"]},{"cell_type":"markdown","metadata":{"id":"t1E_eAyPSuzm"},"source":["### new col to latest feather (1m_indi. only)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xyI5NrM7Suzm"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","cum_dir = \"cum\"\n","\n","new_dir_path = \"rsi_backi2\"\n","base_dir_path = \"bbdc3m_backi2\"\n","\n","new_date = '2021-11-17'\n","\n","\n","\n","#     load ftr list    #\n","base_save_path = os.path.join(save_path, base_dir_path, \"concat/cum\", new_date)\n","new_save_path = base_save_path.replace(base_dir_path, new_dir_path)\n","\n","#     save to (new) cum dir    #\n","#      1. if dir. not exists, makedir\n","os.makedirs(new_save_path, exist_ok=True)\n","\n","ftr_list = [s for s in os.listdir(base_save_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_save_path, key), columns=None, use_threads=True).set_index(\"index\")\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  droped_new_res_df = sync_check(base_df)\n","\n","  # new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # # new_res_df.head()\n","\n","  # intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  # droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break\n","\n","  droped_new_res_df.reset_index().to_feather(os.path.join(new_save_path, key), compression='lz4')\n","\n","  print(os.path.join(new_save_path, key), \"saved !\")\n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"markdown","metadata":{"id":"nUs4fjVHSuzl"},"source":["### feather ver. (col concat)"]},{"cell_type":"code","execution_count":65,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3192,"status":"ok","timestamp":1641887167667,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"6cu-Y82iSuzl","outputId":"e43a8608-ffae-4fbe-8b71-88808e2ace49"},"outputs":[{"output_type":"stream","name":"stdout","text":["['2022-01-10 ETHUSDT.ftr']\n","./candlestick_concated/res_df/bb4h_backi2/concat/cum/2022-01-10/2022-01-10 ETHUSDT.ftr saved !\n"]}],"source":["new_dir_path = \"bb4h_backi2\"\n","base_dir_path = \"bb30m_backi2\"\n","\n","# new_date = \"2021-11-17\"\n","new_date = \"2022-01-10\"\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","save_path = './candlestick_concated/res_df/'\n","save_path = os.path.join(save_path, new_dir_path, \"concat/cum\", new_date)   \n","# save_path = os.path.join(save_path, new_dir_path, \"concat/non_cum\", new_date)   # row col ÌïòÎ†§Î©¥ concat ÎßûÏùå, noncum ÏÇ¨Ïö©\n","os.makedirs(save_path, exist_ok=True)\n","\n","\n","#     load ftr list    #\n","# ftr_list = [s for s in os.listdir(os.path.join(save_path, new_dir_path)) if \"ftr\" in s]\n","\n","noncat_path = save_path.replace(\"concat/\", \"noncat/\")\n","ftr_list = [s for s in os.listdir(noncat_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","  try:\n","\n","    #       read from base postfix's directory    #\n","    base_df = pd.read_feather(os.path.join(save_path.replace(new_dir_path, base_dir_path), key), columns=None, use_threads=True).set_index(\"index\")\n","    res_df = pd.read_feather(os.path.join(noncat_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","    # print(base_df.head())\n","    # print(res_df.head())\n","    # break\n","\n","    new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","    # new_res_df.head()\n","\n","    droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","    # droped_new_res_df.head()\n","    # break\n","\n","    droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","    # res_df_dict[key] = res_df\n","    # res_df_dict[key] = droped_new_res_df\n","    print(os.path.join(save_path, key), \"saved !\")\n","  \n","  except Exception as e:\n","    print(\"error occured ! :\", e)\n","  \n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4GiF2NJPSuzm"},"outputs":[],"source":["print(*droped_new_res_df.columns, sep = '\\n')"]},{"cell_type":"markdown","metadata":{"id":"WVAKq3i8Suzm"},"source":["### feather ver. (row concat) , database cum ÎèÑ Ìò∏ÌôòÍ∞ÄÎä•"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XG2p9OhhSuzm","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1641814155472,"user_tz":-540,"elapsed":24321,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"6073f6c9-5740-4aea-af6f-63c4a0aa371a"},"outputs":[{"output_type":"stream","name":"stdout","text":["['2022-01-10 ETHUSDT_1m.ftr', '2022-01-10 ETHUSDT_3m.ftr', '2022-01-10 ETHUSDT_5m.ftr', '2022-01-10 ETHUSDT_15m.ftr', '2022-01-10 ETHUSDT_30m.ftr', '2022-01-10 ETHUSDT_1h.ftr', '2022-01-10 ETHUSDT_4h.ftr']\n","                            open     high      low    close     volume\n","index                                                                 \n","2020-09-05 00:00:59.999   383.27   383.49   377.23   377.64  24429.574\n","2022-01-10 15:18:59.999  3163.02  3164.29  3162.41  3164.28    320.335\n","continuity checked !\n","./candlestick_concated/database_bn/cum/2022-01-10/2022-01-10 ETHUSDT_1m.ftr saved !\n","                            open     high      low    close    volume\n","index                                                                \n","2020-09-04 00:02:59.999   412.71   412.71   410.00   410.24  7853.327\n","2022-01-10 15:20:59.999  3163.02  3164.29  3162.41  3163.82   466.868\n","continuity checked !\n","./candlestick_concated/database_bn/cum/2022-01-10/2022-01-10 ETHUSDT_3m.ftr saved !\n","                            open     high      low    close     volume\n","index                                                                 \n","2020-09-04 00:04:59.999   412.71   412.71   409.29   409.84  12913.923\n","2022-01-10 15:19:59.999  3160.51  3164.29  3159.01  3162.13   1899.469\n","continuity checked !\n","./candlestick_concated/database_bn/cum/2022-01-10/2022-01-10 ETHUSDT_5m.ftr saved !\n","                            open     high      low    close     volume\n","index                                                                 \n","2020-09-04 00:14:59.999   412.71   412.71   406.60   407.08  56928.476\n","2022-01-10 15:29:59.999  3160.51  3165.25  3159.01  3165.24   2081.916\n","continuity checked !\n","./candlestick_concated/database_bn/cum/2022-01-10/2022-01-10 ETHUSDT_15m.ftr saved !\n","                            open     high      low    close      volume\n","index                                                                  \n","2020-09-04 00:29:59.999   412.71   412.71   401.35   408.05  165686.097\n","2022-01-10 15:29:59.999  3171.70  3173.11  3156.02  3165.88   11066.223\n","continuity checked !\n","./candlestick_concated/database_bn/cum/2022-01-10/2022-01-10 ETHUSDT_30m.ftr saved !\n","                            open     high      low    close      volume\n","index                                                                  \n","2020-09-05 00:59:59.999   383.27   385.84   371.49   384.28  323886.276\n","2022-01-10 15:59:59.999  3171.70  3173.11  3156.02  3166.05   11405.755\n","continuity checked !\n","./candlestick_concated/database_bn/cum/2022-01-10/2022-01-10 ETHUSDT_1h.ftr saved !\n","                            open     high      low    close      volume\n","index                                                                  \n","2020-09-05 04:59:59.999   384.48   392.70   376.26   391.27  559210.014\n","2022-01-10 16:59:59.999  3153.00  3179.16  3149.95  3165.07   79756.184\n","continuity checked !\n","./candlestick_concated/database_bn/cum/2022-01-10/2022-01-10 ETHUSDT_4h.ftr saved !\n"]}],"source":["save_path = './candlestick_concated/res_df/'        # cols Ï∂îÍ∞ÄÎêú cum db Ïóê new_row's cols Í∏∞Ï§ÄÏúºÎ°ú Ìï©ÏπòÎäî Í≤ΩÏö∞\n","save_path = './candlestick_concated/database_bn/'   # ohlcv cum db ÎßåÎì§ Í≤ΩÏö∞\n","\n","base_date = '2021-11-17'\n","new_date = '2022-01-10'\n","\n","#     load ftr list    #\n","if \"database\" in save_path:\n","  base_dir_path = \"\"\n","  new_dir_path = \"\"\n","  concat_dir = \"\"\n","else:\n","  base_dir_path = \"sar_backi2\"\n","  new_dir_path = \"bb4h_backi2\"  # dir_path Í∞Ä base / new ÏÑúÎ°ú Îã¨ÎùºÏßà Ïàò ÏûàÏñ¥ÏÑú Î∂ÑÌï†Ìï®\n","  concat_dir = \"concat\"\n","\n","base_date_path = os.path.join(save_path, base_dir_path, concat_dir, \"cum\", base_date)      # Í∏∞Ï°¥ cum db ÏôÄ new_date db Î•º cum ÏßÑÌñâ\n","# base_date_path = os.path.join(save_path, base_dir_path, concat_dir, \"non_cum\", base_date)    # non_cum db ÏôÄ new_date db Î•º cum ÏßÑÌñâ\n","\n","# new_date_path = os.path.join(save_path, new_dir_path, concat_dir, \"cum\", new_date)      # ÏÉÅÌô©Î≥ÑÎ°ú ÏßÅÏ†ë ÏÑ†ÌÉùÌï¥ÏïºÌï† ÎìØ\n","new_date_path = os.path.join(save_path, new_dir_path, concat_dir, \"non_cum\", new_date)\n","\n","\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","save_path = new_date_path.replace(\"non_cum\", \"cum\")\n","os.makedirs(save_path, exist_ok=True)   # noncat / concat ÎëêÍ∞ÄÏßÄ Í≤ΩÏö∞ Ï°¥Ïû¨Í∞ÄÎä•Ìï† Í≤É\n","# os.makedirs(os.path.join(save_path, dir_path, \"noncat/cum\", new_date), exist_ok=True)\n","\n","\n","ftr_list = [s for s in os.listdir(new_date_path) if \"ftr\" in s]\n","exist_list = os.listdir(save_path)\n","print(ftr_list)\n","# break\n","\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","  if key in exist_list:\n","    print(key, \"already exist !\")\n","    continue\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_date_path, key.replace(new_date, base_date)), columns=None, use_threads=True).set_index(\"index\")\n","  res_df = pd.read_feather(os.path.join(new_date_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break  \n","  \n","  print(droped_new_res_df.iloc[[0, -1]])  \n","\n","  # ------------- verify df continuity directly itv by itv ------------- #\n","  if \"_\" in key:\n","\n","    interval = key.split(\".\")[0].split(\"_\")[-1] \n","    itv_num = to_itvnum(interval)\n","\n","    # verified_df = consecutive_df(droped_new_res_df, to_itvnum(interval))\n","    # verified_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","    # res_df_dict[key] = res_df\n","    # res_df_dict[key] = droped_new_res_df  \n","\n","    np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","    ideal_ts_gap = 60 * itv_num\n","\n","    for ts_i in range(len(np_idx_ts)):\n","      \n","      if ts_i != 0:\n","        ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","\n","        if ts_gap > ideal_ts_gap or ts_gap < ideal_ts_gap:\n","        # if ts_gap == ideal_ts_gap:\n","          print(droped_new_res_df.index[ts_i - 1])\n","          print(droped_new_res_df.index[ts_i])\n","          # print(ts_gap)\n","          print(\"-------------------- unideal ts_gap --------------------\")\n","\n","    print(\"continuity checked !\")\n","\n","  droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","  print(os.path.join(save_path, key), \"saved !\")\n","  \n"]},{"cell_type":"markdown","metadata":{"id":"L7l5CTJfSuzn"},"source":["### check continuity"]},{"cell_type":"code","execution_count":69,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3116,"status":"ok","timestamp":1641887285134,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"nGzMGyC3Suzn","outputId":"66875dac-f13e-45af-b764-9c87d6580789"},"outputs":[{"output_type":"stream","name":"stdout","text":["                            rsi_1m     rsi_5m       ema_5m  dc_upper_1m  dc_lower_1m  dc_base_1m  dc_upper_3m  dc_lower_3m  dc_base_3m  dc_upper_5m  dc_lower_5m  dc_base_5m  dc_upper_15m  dc_lower_15m  dc_base_15m  dc_upper_30m  dc_lower_30m  dc_base_30m  bb_upper_1m  bb_lower_1m  bb_upper_3m  bb_lower_3m  bb_upper_5m  bb_lower_5m  bb_upper_15m  bb_lower_15m  bb_upper_30m  bb_lower_30m     open    high      low    close    volume  dc_upper_1h  dc_lower_1h  dc_base_1h  dc_upper_4h  dc_lower_4h  dc_base_4h  bb_upper_1h  bb_lower_1h  bb_upper_4h  bb_lower_4h\n","indexn","2020-09-06 04:59:59.999        NaN  40.105900   354.994166          NaN          NaN         NaN       335.31       310.88     323.095       341.70       307.36     324.530        360.43        307.36      333.895        376.00        307.36       341.68          NaN          NaN   324.794442   317.244558   332.493738   317.675262    356.720732    329.505268    362.785872    336.413128   321.28   323.5   321.24   323.42  3598.385       394.89       307.36     351.125          NaN          NaN         NaN   387.093735   348.862265          NaN          NaN\n","2022-01-09 08:59:59.999  32.338132  47.169338  3125.654146      3104.93       3076.8    3090.865      3120.24      3081.14    3100.690      3131.69      3081.14    3106.415       3131.69       2996.45     3064.070       3208.73       2996.45      3102.59  3100.038316  3083.586684  3105.323291  3089.019709  3116.334535  3094.372465   3102.812897   3023.518103   3159.245440   3038.726560  3082.60  3082.6  3076.80  3080.03  1522.340      3248.03      2996.45    3122.240      3833.55      2996.45      3415.0  3232.155402  3080.229598   3514.45839   3136.98661\n","[1.59936840e+09 1.59936846e+09 1.59936852e+09 1.59936858e+09\n"," 1.59936864e+09 1.59936870e+09 1.59936876e+09 1.59936882e+09\n"," 1.59936888e+09 1.59936894e+09]\n"]}],"source":["# print(droped_new_res_df.columns)\n","\n","print(droped_new_res_df.iloc[[0, -1]])\n","\n","np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","\n","print(np_idx_ts[:10])\n","for ts_i in range(len(np_idx_ts)):\n","  \n","  if ts_i != 0:\n","    ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","\n","    if ts_gap > 60 or ts_gap < 60:\n","    # if ts_gap == 60:\n","      print(droped_new_res_df.index[ts_i - 1])\n","      print(droped_new_res_df.index[ts_i])\n","      # print(ts_gap)\n","      print()\n"]},{"cell_type":"markdown","source":["### check length of front missing value + middle_data non_missing validity"],"metadata":{"id":"x_XGJqBi8Jex"}},{"cell_type":"code","source":["#       1. new_date Ïùò ÏãúÏûë timeidx ÏôÄ base_date end timeidx Ïùò ÏµúÏÜå days' gap     #\n","#       2. new_date Ïùò ÏãúÏûë Î∂ÄÎ∂Ñ indi. value Îäî np.nan ÏúºÎ°ú Ï±ÑÏõåÏßà Í±∞Í∏∞ ÎïåÎ¨∏Ïóê Í≥ÑÏÇ∞Ìï¥ÏïºÌï®    #\n","\n","df_count = droped_new_res_df.count()\n","len_missing = df_count.max() - df_count.min()\n","print(len_missing / 1440)\n","\n","#       3. \n","missing_sliced_df = droped_new_res_df.iloc[len_missing:]\n","df_count2 = missing_sliced_df.count()\n","# print(df_count2)\n","print((df_count2.max() - df_count2.min()))    # this value should be zero !\n"],"metadata":{"id":"yRNwqVeAu8X8","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1641887318959,"user_tz":-540,"elapsed":311,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"fb236bde-4527-4bc7-eac4-4bee42532c5a"},"execution_count":70,"outputs":[{"output_type":"stream","name":"stdout","text":["2.167361111111111\n","38\n"]}]},{"cell_type":"code","source":["# df_count2.index[df_count2.argmin()]\n","# missing_sliced_df.head(5)\n","\n","stay_missed = np.sum(pd.isnull(missing_sliced_df), axis=0)\n","print(stay_missed)"],"metadata":{"id":"AY7E2_hTBsyM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["stay_missed_cols = stay_missed[stay_missed != 0].index\n","\n","for sm_col in stay_missed_cols:\n","  \n","  row_idx = np.argwhere(pd.isnull(missing_sliced_df[sm_col].values))\n","\n","  plt.figure(figsize=(3,3))\n","  plt.plot(row_idx)\n","  plt.ylim(0, len(missing_sliced_df))\n","  plt.title(sm_col)\n","\n","  plt.show()\n"],"metadata":{"id":"p9yqewOw9g33"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Ci_jUnNTZbm9"},"source":["## load data (old)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":22503,"status":"ok","timestamp":1638246127510,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"_bXyS2yrZYC6","outputId":"b24a8a66-48b1-42b5-aa79-63f5a8542bac"},"outputs":[{"name":"stdout","output_type":"stream","text":["['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr']\n","['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 LTCUSDT.ftr']\n","['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 ETHUSDT.ftr']\n","['2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr']\n","['2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-08-31 SUSHIUSDT.xlsx', '2021-08-31 CVCUSDT.xlsx', '2021-08-31 BTSUSDT.xlsx', '2021-08-31 HOTUSDT.xlsx', '2021-08-31 ZRXUSDT.xlsx', '2021-08-31 QTUMUSDT.xlsx', '2021-08-31 IOTAUSDT.xlsx', '2021-08-31 BTCBUSD.xlsx', '2021-08-31 WAVESUSDT.xlsx', '2021-08-31 ADAUSDT.xlsx', '2021-08-31 LITUSDT.xlsx', '2021-08-31 XTZUSDT.xlsx', '2021-08-31 BNBUSDT.xlsx', '2021-08-31 AKROUSDT.xlsx', '2021-08-31 HNTUSDT.xlsx', '2021-08-31 ETCUSDT.xlsx', '2021-08-31 XMRUSDT.xlsx', '2021-08-31 YFIUSDT.xlsx', '2021-08-31 ETHUSDT.xlsx', '2021-08-31 ALICEUSDT.xlsx', '2021-08-31 ALPHAUSDT.xlsx', '2021-08-31 SFPUSDT.xlsx', '2021-08-31 REEFUSDT.xlsx', '2021-08-31 BATUSDT.xlsx', '2021-08-31 DOGEUSDT.xlsx', '2021-08-31 TRXUSDT.xlsx', '2021-08-31 RLCUSDT.xlsx', '2021-08-31 BTCSTUSDT.xlsx', '2021-08-31 STORJUSDT.xlsx', '2021-08-31 SNXUSDT.xlsx', '2021-08-31 XLMUSDT.xlsx', '2021-08-31 NEOUSDT.xlsx', '2021-08-31 UNFIUSDT.xlsx', '2021-08-31 SANDUSDT.xlsx', '2021-08-31 DASHUSDT.xlsx', '2021-08-31 KAVAUSDT.xlsx', '2021-08-31 RUNEUSDT.xlsx', '2021-08-31 CTKUSDT.xlsx', '2021-08-31 LINKUSDT.xlsx', '2021-08-31 CELRUSDT.xlsx', '2021-08-31 RSRUSDT.xlsx', '2021-08-31 DGBUSDT.xlsx', '2021-08-31 SKLUSDT.xlsx', '2021-08-31 RENUSDT.xlsx', '2021-08-31 TOMOUSDT.xlsx', '2021-08-31 MTLUSDT.xlsx', '2021-08-31 LTCUSDT.xlsx', '2021-08-31 DODOUSDT.xlsx', '2021-08-31 EGLDUSDT.xlsx', '2021-08-31 KSMUSDT.xlsx', '2021-08-31 ONTUSDT.xlsx', '2021-08-31 VETUSDT.xlsx', '2021-08-31 TRBUSDT.xlsx', '2021-08-31 MANAUSDT.xlsx', '2021-08-31 COTIUSDT.xlsx', '2021-08-31 CHRUSDT.xlsx', '2021-08-31 ETHUSDT_210924.xlsx', '2021-08-31 BAKEUSDT.xlsx', '2021-08-31 GRTUSDT.xlsx', '2021-08-31 FLMUSDT.xlsx', '2021-08-31 EOSUSDT.xlsx', '2021-08-31 OGNUSDT.xlsx', '2021-08-31 SCUSDT.xlsx', '2021-08-31 BALUSDT.xlsx', '2021-08-31 STMXUSDT.xlsx', '2021-08-31 BTTUSDT.xlsx', '2021-08-31 LUNAUSDT.xlsx', '2021-08-31 DENTUSDT.xlsx', '2021-08-31 KNCUSDT.xlsx', '2021-08-31 SRMUSDT.xlsx', '2021-08-31 ENJUSDT.xlsx', '2021-08-31 ZENUSDT.xlsx', '2021-08-31 ATOMUSDT.xlsx', '2021-08-31 NEARUSDT.xlsx', '2021-08-31 BCHUSDT.xlsx', '2021-08-31 IOSTUSDT.xlsx', '2021-08-31 HBARUSDT.xlsx', '2021-08-31 ZECUSDT.xlsx', '2021-08-31 1000SHIBUSDT.xlsx', '2021-08-31 TLMUSDT.xlsx', '2021-08-31 BZRXUSDT.xlsx', '2021-08-31 ETHBUSD.xlsx', '2021-08-31 AAVEUSDT.xlsx', '2021-08-31 GTCUSDT.xlsx', '2021-08-31 ALGOUSDT.xlsx', '2021-08-31 ICPUSDT.xlsx', '2021-08-31 BTCUSDT_210924.xlsx', '2021-08-31 LRCUSDT.xlsx', '2021-08-31 AVAXUSDT.xlsx', '2021-08-31 MATICUSDT.xlsx', '2021-08-31 1INCHUSDT.xlsx', '2021-08-31 MKRUSDT.xlsx', '2021-08-31 THETAUSDT.xlsx', '2021-08-31 UNIUSDT.xlsx', '2021-08-31 LINAUSDT.xlsx', '2021-08-31 RVNUSDT.xlsx', '2021-08-31 FILUSDT.xlsx', '2021-08-31 NKNUSDT.xlsx', '2021-08-31 DEFIUSDT.xlsx', '2021-08-31 COMPUSDT.xlsx', '2021-08-31 BTCDOMUSDT.xlsx', '2021-08-31 SOLUSDT.xlsx', '2021-08-31 BTCUSDT.xlsx', '2021-08-31 OMGUSDT.xlsx', '2021-08-31 ICXUSDT.xlsx', '2021-08-31 BLZUSDT.xlsx', '2021-08-31 FTMUSDT.xlsx', '2021-08-31 YFIIUSDT.xlsx', '2021-08-31 KEEPUSDT.xlsx', '2021-08-31 BANDUSDT.xlsx', '2021-08-31 XRPUSDT.xlsx', '2021-08-31 SXPUSDT.xlsx', '2021-08-31 CRVUSDT.xlsx', '2021-08-31 BELUSDT.xlsx', '2021-08-31 DOTUSDT.xlsx', '2021-08-31 XEMUSDT.xlsx', '2021-08-31 ONEUSDT.xlsx', '2021-08-31 ZILUSDT.xlsx', '2021-08-31 AXSUSDT.xlsx', '2021-08-31 OCEANUSDT.xlsx', '2021-08-31 CHZUSDT.xlsx', '2021-08-31 ANKRUSDT.xlsx', '2021-08-31 SUSHIUSDT_res_dfs.pkl', '2021-07-01 ADAUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr']\n","['2021-07-01 BTCUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr']\n","['2021-02-07 BTC.xlsx', '2021-02-07 ETH.xlsx', '2021-02-11 BCHUSDT.xlsx', '2021-02-11 XRPUSDT.xlsx', '2021-02-11 EOSUSDT.xlsx', '2021-02-11 LTCUSDT.xlsx', '2021-02-11 ETCUSDT.xlsx', '2021-02-11 LINKUSDT.xlsx', '2021-02-11 XLMUSDT.xlsx', '2021-02-11 ADAUSDT.xlsx', '2021-02-11 XMRUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr']\n","['2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx']\n"]}],"source":["interval = '1m'\n","date_path = './candlestick_concated/%s/quant_v2/' % interval\n","file_list = os.listdir(date_path)\n","print((file_list))\n","\n","interval2 = '3m'\n","date_path2 = './candlestick_concated/%s/quant_v2/' % interval2\n","file_list2 = os.listdir(date_path2)\n","print((file_list2))\n","\n","interval3 = '5m'\n","date_path3 = './candlestick_concated/%s/quant_v2/' % interval3\n","file_list3 = os.listdir(date_path3)\n","print((file_list3))\n","\n","interval4 = '15m'\n","date_path4 = './candlestick_concated/%s/quant_v2/' % interval4\n","file_list4 = os.listdir(date_path4)\n","print((file_list4))\n","\n","interval5 = '30m'\n","date_path5 = './candlestick_concated/%s/quant_v2/' % interval5\n","file_list5 = os.listdir(date_path5)\n","print((file_list5))\n","\n","interval6 = '1h'\n","date_path6 = './candlestick_concated/%s/quant_v2/' % interval6\n","file_list6 = os.listdir(date_path6)\n","print((file_list6))\n","\n","interval7 = '4h'\n","date_path7 = './candlestick_concated/%s/quant_v2/' % interval7\n","file_list7 = os.listdir(date_path7)\n","print((file_list7))\n","\n","interval8 = '1d'\n","date_path8 = './candlestick_concated/%s/quant_v2/' % interval8\n","file_list8 = os.listdir(date_path8)\n","print((file_list8))"]},{"cell_type":"markdown","metadata":{"id":"qNGeuYuGDXfv"},"source":["# pr check with strategy"]},{"cell_type":"markdown","metadata":{"id":"6HOjnZjSgzk1"},"source":["## load ftr_list"]},{"cell_type":"code","execution_count":84,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":311,"status":"ok","timestamp":1641887585293,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"7FPBG5Qqg2jB","outputId":"48de1090-ee72-4bd9-fb56-e3bbd24fd249"},"outputs":[{"output_type":"stream","name":"stdout","text":["['2022-01-10 ETHUSDT.ftr']\n"]}],"source":["save_path = './candlestick_concated/res_df/'\n","\n","dir_path = \"st5m_backi2\"\n","date = \"2021-11-17\"\n","\n","dir_path = \"bb4h_backi2\"\n","date = \"2022-01-10\"\n","\n","ftr_path = os.path.join(save_path, dir_path, \"concat/cum\", date)\n","\n","#     load ftr list    #\n","ftr_list = [s for s in os.listdir(ftr_path) if \"ftr\" in s if date in s]\n","# ftr_list = [s for s in os.listdir(os.path.join(save_path, dir_path)) if \"ftr\" in s if date in s]\n","print(ftr_list)"]},{"cell_type":"markdown","metadata":{"id":"5duWn8t4BRyv"},"source":["## hvp platform"]},{"cell_type":"markdown","metadata":{"id":"wmnyUTS-yjF1"},"source":["##### config"]},{"cell_type":"markdown","metadata":{"id":"JjKHyqftzhD7"},"source":["###### set config (override available)"]},{"cell_type":"code","execution_count":4,"metadata":{"executionInfo":{"elapsed":3,"status":"ok","timestamp":1641882250130,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"q_4E-zH02WJy"},"outputs":[],"source":["#     caution : MARKET / LIMIT spelling   #\n","#      json doesn't support single quotes     #\n","\n","param_dict = \\\n","{\n","  \"strat_version\": \"v5_2\",\n","  \"trader_set\": {\n","    \"run\": 1,\n","    \"df_log\": 0,\n","    \"last_index\": -2,\n","    \"limit_fee\": 0.0002,\n","    \"market_fee\": 0.0004,\n","    \"initial_asset\": 3000,\n","    \"asset_changed\": 0,\n","    \"symbol\": \"ETHUSDT\",\n","    \"symbol_changed\": 0,\n","    \"interval_list\": [\n","      \"1m\",\n","      \"5m\",\n","      \"15m\"\n","    ],\n","    \"row_list\": [\n","      200,\n","      100,\n","      100\n","    ],\n","    \"bar_close_second\": 59,\n","    \"realtime_term\": 0.01,\n","    \"api_retry_term\": 3,\n","    \"check_entry_sec\": 10,\n","    \"entry_execution_wait\": 60,\n","    \"breakout_qty_ratio\": 0.97,\n","    \"qty_check_term\": 30,\n","    \"exit_execution_wait\": 60,\n","    \"close_complete_term\": 5,\n","    \"save_stacked_df\": 0,\n","    \"stacked_df_exist\": 1\n","  },\n","  \"pos_set\": {\n","    \"short_inversion\": 0,\n","    \"long_inversion\": 0,\n","    \"short_ban\": 1,\n","    \"long_ban\": 0\n","  },\n","  \"loc_set\": {\n","    \"zone\": {\n","      \"short_spread\": \"None\",\n","      \"long_spread\": \"None\",\n","      \"tr_thresh\": \"None\",\n","      \"dtk_dc_itv\": \"None\",\n","      \"dtk_itv\": \"5m\",\n","      \"dt_k\": \"None\",\n","      \"dc_period\": 135,\n","      \"ei_k\": -0.66,\n","      \"use_dtk_line\": 0,\n","      \"zone_rejection\": 1,\n","      \"gap_mply\": 1,\n","      \"c_itv_ticks\": 60,\n","      \"ad_idx\": 19,\n","      \"bbz_itv\": \"15m\",\n","      \"zone_dt_k\": 0.4,\n","      \"zone_dc_period\": 135,\n","      \"dr_error\": 0.1,\n","      \"bbwp_thresh\": 0.5,\n","      \"entry_incycle\": 5,\n","      \"max_eplim_pct\": 0.05,\n","      \"min_eplim_pct\": 0.013\n","    },\n","    \"point\": {\n","      \"exp_itv\": \"1m\",\n","      \"tpg_itv1\": \"5m\",\n","      \"tpg_itv0\": \"5m\",\n","      \"outg_itv1\": \"5m\",\n","      \"outg_itv0\": \"5m\",\n","      \"outg_dc_period\": \"None\",\n","      \"tf_entry\": 1,\n","      \"htf_entry\": 15,\n","      \"candle_ratio\": 50,\n","      \"body_ratio\": \"None\",\n","      \"candle_ratio2\": \"None\",\n","      \"body_ratio2\": \"None\",\n","      \"osc_band\": 20\n","    }\n","  },\n","  \"tr_set\": {\n","    \"ep_gap\": 0.0,\n","    \"tp_gap\": 0.0,\n","    \"decay_gap\": \"None\",\n","    \"out_gap\": 0.5,\n","    \"c_ep_gap\": \"None\",\n","    \"t_out_gap\": 0.0\n","  },\n","  \"ep_set\": {\n","    \"short_entry_score\": -2,\n","    \"entry_type\": \"LIMIT\",\n","    \"static_ep\": 1,\n","    \"tpout_onexec\": 0\n","  },\n","  \"tp_set\": {\n","    \"non_tp\": 0,\n","    \"tp_type\": \"BOTH\",\n","    \"static_tp\": 1,\n","    \"decay_term\": 60,\n","    \"time_tp\": 0,\n","    \"partial_num\": 1,\n","    \"partial_qty_divider\": 1.5\n","  },\n","  \"out_set\": {\n","    \"out_type\": \"MARKET\",\n","    \"use_out\": 1,\n","    \"static_out\": 1,\n","    \"hl_out\": 1,\n","    \"price_restoration\": 0,\n","    \"retouch\": 0,\n","    \"retouch_out_period\": 500,\n","    \"second_out\": 0,\n","    \"approval_st_gap\": 1.5,\n","    \"second_out_gap\": 0.5\n","  },\n","  \"lvrg_set\": {\n","    \"leverage\": 10,\n","    \"static_lvrg\": 1,\n","    \"allow_float\": 0,\n","    \"target_pct\": 0.1,\n","    \"lvrg_rejection\": 0\n","  }\n","}\n","\n","config1 = EasyDict(param_dict)\n","# param_json = json.dumps(param_dict, indent=2)"]},{"cell_type":"markdown","metadata":{"id":"dzla8i9_ysmP"},"source":["###### save config"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":544,"status":"ok","timestamp":1639994748940,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"FlNGKvW_w2za","outputId":"c575ce69-def0-4e6c-c949-a63707467b2e"},"outputs":[{"name":"stdout","output_type":"stream","text":["/content/drive/My Drive/Colab Notebooks/JnQ/config/config_v5_2.1220_candlejson dumped !\n"]}],"source":["config_name = \"config_v5_2.1220_candlejson\"\n","# config_name = \"config_v3.json\"\n","cfg_full_path = os.path.join(current_path, \"config\", config_name)\n","\n","\n","with open(cfg_full_path, 'w') as cfg:\n","    json.dump(config1, cfg, indent=2)\n","    print(\"{} dumped !\".format(cfg_full_path))"]},{"cell_type":"markdown","metadata":{"id":"vOVr2jLczFQJ"},"source":["###### load config"]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1187,"status":"ok","timestamp":1641877763248,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"uPpMThtZzGtZ","outputId":"9bea69a0-816f-4d8d-9f29-5068bffd2f37"},"outputs":[{"output_type":"stream","name":"stdout","text":["v3\n","v5_2\n","v7_3\n"]}],"source":["config1_name = \"config_v3_1231_v7_3.json\"\n","config2_name = \"config_v5_2_1231_v7_3.json\"\n","config3_name = \"config_v7_3_1231_v7_3.json\"\n","cfg_full_path1 = os.path.join(current_path, \"config\", config1_name)\n","cfg_full_path2 = os.path.join(current_path, \"config\", config2_name)\n","cfg_full_path3 = os.path.join(current_path, \"config\", config3_name)\n","\n","with open(cfg_full_path1, 'r') as cfg:\n","    config1 = EasyDict(json.load(cfg))\n","with open(cfg_full_path2, 'r') as cfg:\n","    config2 = EasyDict(json.load(cfg))\n","with open(cfg_full_path3, 'r') as cfg:\n","    config3 = EasyDict(json.load(cfg))\n","  \n","print(config1.strat_version)\n","print(config2.strat_version)\n","print(config3.strat_version)"]},{"cell_type":"markdown","metadata":{"id":"rrIGjmUzqU-D"},"source":["##### utils override"]},{"cell_type":"markdown","metadata":{"id":"leSQlImg4_9L"},"source":["###### utils_"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"CB2yZdQ95Cdg","executionInfo":{"status":"ok","timestamp":1641882253373,"user_tz":-540,"elapsed":1593,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"outputs":[],"source":["\n","def enlist_rtc(res_df, config):\n","\n","    strat_version = config.strat_version\n","\n","    res_df['short_rtc_1_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.point.outg_itv1]\n","    res_df['short_rtc_0_{}'.format(strat_version)] = res_df['bb_upper_%s' % config.loc_set.point.outg_itv0]\n","\n","    res_df['long_rtc_1_{}'.format(strat_version)] = res_df['bb_upper_%s' % config.loc_set.point.outg_itv1]\n","    res_df['long_rtc_0_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.point.outg_itv0]\n","    \n","    #      entry reversion    #\n","    if config.ep_set.short_entry_score > 0:      \n","      short_rtc_1_copy = res_df['short_rtc_1_{}'.format(strat_version)].copy()\n","      res_df['short_rtc_1_{}'.format(strat_version)] = res_df['long_rtc_1_{}'.format(strat_version)]\n","      res_df['long_rtc_1_{}'.format(strat_version)] = short_rtc_1_copy\n","\n","      short_rtc_0_copy = res_df['short_rtc_0_{}'.format(strat_version)].copy()\n","      res_df['short_rtc_0_{}'.format(strat_version)] = res_df['long_rtc_0_{}'.format(strat_version)]\n","      res_df['long_rtc_0_{}'.format(strat_version)] = short_rtc_0_copy\n","\n","    res_df['short_rtc_gap_{}'.format(strat_version)] = abs(res_df['short_rtc_0_{}'.format(strat_version)] - res_df['short_rtc_1_{}'.format(strat_version)])\n","    res_df['long_rtc_gap_{}'.format(strat_version)] = abs(res_df['long_rtc_1_{}'.format(strat_version)] - res_df['long_rtc_0_{}'.format(strat_version)])\n","\n","    res_df['h_short_rtc_1_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.point.tpg_itv1]\n","    # res_df['h_short_rtc_1_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.point.tpg_itv]\n","    res_df['h_short_rtc_0_{}'.format(strat_version)] = res_df['bb_upper_%s' % config.loc_set.point.tpg_itv0]\n","\n","    res_df['h_long_rtc_1_{}'.format(strat_version)] = res_df['bb_upper_%s' % config.loc_set.point.tpg_itv1]\n","    # res_df['h_long_rtc_1_{}'.format(strat_version)] = res_df['dc_upper_%s' % config.loc_set.point.tpg_itv]\n","    res_df['h_long_rtc_0_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.point.tpg_itv0]\n","\n","    #      entry reversion    #\n","    if config.ep_set.short_entry_score > 0:      \n","      h_short_rtc_1_copy = res_df['h_short_rtc_1_{}'.format(strat_version)].copy()\n","      res_df['h_short_rtc_1_{}'.format(strat_version)] = res_df['h_long_rtc_1_{}'.format(strat_version)]\n","      res_df['h_long_rtc_1_{}'.format(strat_version)] = h_short_rtc_1_copy\n","\n","      h_short_rtc_0_copy = res_df['h_short_rtc_0_{}'.format(strat_version)].copy()\n","      res_df['h_short_rtc_0_{}'.format(strat_version)] = res_df['h_long_rtc_0_{}'.format(strat_version)]\n","      res_df['h_long_rtc_0_{}'.format(strat_version)] = h_short_rtc_0_copy\n","\n","    res_df['h_short_rtc_gap_{}'.format(strat_version)] = abs(res_df['h_short_rtc_0_{}'.format(strat_version)] - res_df['h_short_rtc_1_{}'.format(strat_version)])\n","    res_df['h_long_rtc_gap_{}'.format(strat_version)] = abs(res_df['h_long_rtc_1_{}'.format(strat_version)] - res_df['h_long_rtc_0_{}'.format(strat_version)])   \n","\n","    res_df['short_dtk_1_{}'.format(strat_version)] = res_df['bb_lower_%s' % config.loc_set.zone.dtk_itv]\n","    res_df['short_dtk_0_{}'.format(strat_version)] = res_df['dc_upper_%s' % config.loc_set.zone.dtk_itv]\n","\n","    res_df['long_dtk_1_{}'.format(strat_version)] = res_df['bb_upper_%s' % config.loc_set.zone.dtk_itv]\n","    res_df['long_dtk_0_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.zone.dtk_itv]\n","\n","    res_df['short_dtk_gap_{}'.format(strat_version)] = abs(res_df['short_dtk_0_{}'.format(strat_version)] - res_df['short_dtk_1_{}'.format(strat_version)])\n","    res_df['long_dtk_gap_{}'.format(strat_version)] = abs(res_df['long_dtk_1_{}'.format(strat_version)] - res_df['long_dtk_0_{}'.format(strat_version)])\n","\n","    return res_df\n","\n","\n","def enlist_tr(res_df, config, np_timeidx):\n","\n","    strat_version = config.strat_version\n","\n","    res_df['entry_{}'.format(strat_version)] = np.zeros(len(res_df))\n","    res_df['h_entry_{}'.format(strat_version)] = np.zeros(len(res_df))\n","\n","    # -------- set ep level -------- #\n","\n","    #       limit ver.     #\n","    res_df['short_ep_{}'.format(strat_version)] = res_df['short_rtc_1_{}'.format(strat_version)] + res_df['short_rtc_gap_{}'.format(strat_version)] * config.tr_set.ep_gap\n","    res_df['long_ep_{}'.format(strat_version)] = res_df['long_rtc_1_{}'.format(strat_version)] - res_df['long_rtc_gap_{}'.format(strat_version)] * config.tr_set.ep_gap\n","\n","    # res_df['short_ep_{}'.format(strat_version)] = res_df['close'] + res_df['h_short_rtc_gap_{}'.format(strat_version)] * config.tr_set.ep_gap\n","    # res_df['long_ep_{}'.format(strat_version)] = res_df['close'] - res_df['h_long_rtc_gap_{}'.format(strat_version)] * config.tr_set.ep_gap\n","\n","\n","    if config.tr_set.c_ep_gap != \"None\":\n","        res_df['short_ep_org_{}'.format(strat_version)] = res_df['short_ep_{}'.format(strat_version)].copy()\n","        res_df['long_ep_org_{}'.format(strat_version)] = res_df['long_ep_{}'.format(strat_version)].copy()\n","\n","        res_df['short_ep2_{}'.format(strat_version)] = res_df['h_short_rtc_1_{}'.format(strat_version)] + res_df['h_short_rtc_gap_{}'.format(strat_version)] * config.tr_set.c_ep_gap\n","        res_df['long_ep2_{}'.format(strat_version)] = res_df['h_long_rtc_1_{}'.format(strat_version)] - res_df['h_long_rtc_gap_{}'.format(strat_version)] * config.tr_set.c_ep_gap\n","\n","    res_df['short_spread_ep_{}'.format(strat_version)] = res_df['bb_lower_5m'] #+ res_df['h_short_rtc_gap_{}'.format(strat_version)] * config.loc_set.zone.spread_ep_gap\n","    res_df['long_spread_ep_{}'.format(strat_version)] = res_df['bb_upper_5m']  #- res_df'h_long_rtc_gap_{}'.format(strat_version)] * config.loc_set.zone.spread_ep_gap\n","\n","    #       market ver.     #\n","    if config.ep_set.entry_type == \"MARKET\":\n","        res_df['short_ep_{}'.format(strat_version)] = res_df['close']\n","        res_df['long_ep_{}'.format(strat_version)] = res_df['close']\n","\n","    # ---------------------------------------- short = -1 ---------------------------------------- #\n","    # ---------------- ep_time  ---------------- #\n","\n","    rsi_upper = 50 + config.loc_set.point.osc_band\n","    rsi_lower = 50 - config.loc_set.point.osc_band\n","\n","    res_df['rsi_%s_shift' % config.loc_set.point.exp_itv] = res_df['rsi_%s' % config.loc_set.point.exp_itv].shift(config.loc_set.point.tf_entry)\n","\n","    res_df['entry_{}'.format(strat_version)] = np.where((res_df['rsi_%s_shift' % config.loc_set.point.exp_itv] >= rsi_upper) &\n","                              (res_df['rsi_%s' % config.loc_set.point.exp_itv] < rsi_upper)\n","                              , res_df['entry_{}'.format(strat_version)] - 1, res_df['entry_{}'.format(strat_version)])\n","\n","    res_df['entry_{}'.format(strat_version)] = np.where((res_df['entry_{}'.format(strat_version)] < 0) &\n","                              (np_timeidx % config.loc_set.point.tf_entry == (config.loc_set.point.tf_entry - 1))\n","                              , res_df['entry_{}'.format(strat_version)] - 1, res_df['entry_{}'.format(strat_version)])\n","    \n","    res_df['h_entry_{}'.format(strat_version)] = np.where(  # (res_df['open'] >= res_df['bb_lower_%s' % config.loc_set.zone.dtk_itv]) &\n","        (res_df['close'].shift(config.loc_set.point.htf_entry * 1) >= res_df['bb_lower_%s' % config.loc_set.zone.dtk_itv]) &\n","        (res_df['close'] < res_df['bb_lower_%s' % config.loc_set.zone.dtk_itv]) &\n","        (np_timeidx % config.loc_set.point.htf_entry == (config.loc_set.point.htf_entry - 1))\n","        , res_df['h_entry_{}'.format(strat_version)] - 1, res_df['h_entry_{}'.format(strat_version)])\n","\n","    # ---------------------------------------- long = 1 ---------------------------------------- #\n","    # ---------------------- ep_time ---------------------- #\n","\n","    res_df['entry_{}'.format(strat_version)] = np.where((res_df['rsi_%s_shift' % config.loc_set.point.exp_itv] <= rsi_lower) &\n","                              (res_df['rsi_%s' % config.loc_set.point.exp_itv] > rsi_lower)\n","                              , res_df['entry_{}'.format(strat_version)] + 1, res_df['entry_{}'.format(strat_version)])\n","\n","    res_df['entry_{}'.format(strat_version)] = np.where((res_df['entry_{}'.format(strat_version)] > 0) &\n","                              (np_timeidx % config.loc_set.point.tf_entry == (config.loc_set.point.tf_entry - 1))\n","                              , res_df['entry_{}'.format(strat_version)] + 1, res_df['entry_{}'.format(strat_version)])\n","      \n","    res_df['h_entry_{}'.format(strat_version)] = np.where(  # (res_df['open'] <= res_df['bb_upper_%s' % config.loc_set.zone.dtk_itv]) &\n","        (res_df['close'].shift(config.loc_set.point.htf_entry * 1) <= res_df['bb_upper_%s' % config.loc_set.zone.dtk_itv]) &\n","        (res_df['close'] > res_df['bb_upper_%s' % config.loc_set.zone.dtk_itv]) &\n","        (np_timeidx % config.loc_set.point.htf_entry == (config.loc_set.point.htf_entry - 1))\n","        , res_df['h_entry_{}'.format(strat_version)] + 1, res_df['h_entry_{}'.format(strat_version)])\n","\n","    # ------------------------------ rtc tp & out ------------------------------ #\n","    # --------------- bb rtc out --------------- #\n","\n","    if config.loc_set.point.outg_dc_period != \"None\":\n","        res_df['short_rtc_0_{}'.format(strat_version)] = res_df['high'].rolling(config.loc_set.point.outg_dc_period).max()\n","        res_df['long_rtc_0_{}'.format(strat_version)] = res_df['low'].rolling(config.loc_set.point.outg_dc_period).min()\n","\n","    res_df['short_out_{}'.format(strat_version)] = res_df['short_rtc_0_{}'.format(strat_version)] + res_df['short_rtc_gap_{}'.format(strat_version)] * config.tr_set.out_gap\n","    res_df['long_out_{}'.format(strat_version)] = res_df['long_rtc_0_{}'.format(strat_version)] - res_df['long_rtc_gap_{}'.format(strat_version)] * config.tr_set.out_gap\n","\n","    if config.tr_set.t_out_gap != \"None\":\n","        res_df['short_out_org_{}'.format(strat_version)] = res_df['short_out_{}'.format(strat_version)].copy()\n","        res_df['long_out_org_{}'.format(strat_version)] = res_df['long_out_{}'.format(strat_version)].copy()\n","\n","        res_df['short_out2_{}'.format(strat_version)] = res_df['short_rtc_0_{}'.format(strat_version)] + res_df['short_rtc_gap_{}'.format(strat_version)] * config.tr_set.t_out_gap\n","        res_df['long_out2_{}'.format(strat_version)] = res_df['long_rtc_0_{}'.format(strat_version)] - res_df['long_rtc_gap_{}'.format(strat_version)] * config.tr_set.t_out_gap\n","\n","    # ------------------------------ tp ------------------------------ #\n","    # --------------- bb rtc tp --------------- #\n","    res_df['short_tp_{}'.format(strat_version)] = res_df['h_short_rtc_1_{}'.format(strat_version)] - res_df['h_short_rtc_gap_{}'.format(strat_version)] * config.tr_set.tp_gap\n","    res_df['long_tp_{}'.format(strat_version)] = res_df['h_long_rtc_1_{}'.format(strat_version)] + res_df['h_long_rtc_gap_{}'.format(strat_version)] * config.tr_set.tp_gap\n","\n","    # --------------- set tp_line / dtk_line --------------- #\n","    # res_df['short_tp_1_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == -1, res_df['short_rtc_1_{}'.format(strat_version)], np.nan)\n","    # res_df['short_tp_1_{}'.format(strat_version)] = ffill(res_df['short_tp_1_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","    # res_df['short_tp_gap_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == -1, res_df['h_short_rtc_gap_{}'.format(strat_version)], np.nan)  # ltf_gap ÏùÄ out ÏùÑ ÏúÑÌïú gap ÏûÑ\n","    # res_df['short_tp_gap_{}'.format(strat_version)] = ffill(res_df['short_tp_gap_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","\n","    # res_df['long_tp_1_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == 1, res_df['long_rtc_1_{}'.format(strat_version)], np.nan)\n","    # res_df['long_tp_1_{}'.format(strat_version)] = ffill(res_df['long_tp_1_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","    # res_df['long_tp_gap_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == 1, res_df['h_long_rtc_gap_{}'.format(strat_version)], np.nan)\n","    # res_df['long_tp_gap_{}'.format(strat_version)] = ffill(res_df['long_tp_gap_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","\n","    # res_df['h_short_tp_1_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == -1, res_df['h_short_rtc_1_{}'.format(strat_version)], np.nan)\n","    # res_df['h_short_tp_1_{}'.format(strat_version)] = ffill(res_df['h_short_tp_1_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","    # res_df['h_short_tp_gap_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == -1, res_df['h_short_rtc_gap_{}'.format(strat_version)], np.nan)\n","    # res_df['h_short_tp_gap_{}'.format(strat_version)] = ffill(res_df['h_short_tp_gap_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","\n","    # res_df['h_long_tp_1_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == 1, res_df['h_long_rtc_1_{}'.format(strat_version)], np.nan)\n","    # res_df['h_long_tp_1_{}'.format(strat_version)] = ffill(res_df['h_long_tp_1_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","    # res_df['h_long_tp_gap_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == 1, res_df['h_long_rtc_gap_{}'.format(strat_version)], np.nan)\n","    # res_df['h_long_tp_gap_{}'.format(strat_version)] = ffill(res_df['h_long_tp_gap_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","   \n","\n","    if config.loc_set.zone.use_dtk_line:\n","      res_df['short_dtk_1_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == -1, res_df['short_dtk_1_{}'.format(strat_version)], np.nan)\n","      res_df['short_dtk_1_{}'.format(strat_version)] = ffill(res_df['short_dtk_1_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","      res_df['short_dtk_gap_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == -1, res_df['short_dtk_gap_{}'.format(strat_version)], np.nan)\n","      res_df['short_dtk_gap_{}'.format(strat_version)] = ffill(res_df['short_dtk_gap_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","\n","      res_df['long_dtk_1_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == 1, res_df['long_dtk_1_{}'.format(strat_version)], np.nan)\n","      res_df['long_dtk_1_{}'.format(strat_version)] = ffill(res_df['long_dtk_1_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","      res_df['long_dtk_gap_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == 1, res_df['long_dtk_gap_{}'.format(strat_version)], np.nan)\n","      res_df['long_dtk_gap_{}'.format(strat_version)] = ffill(res_df['long_dtk_gap_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","\n","    res_df['dc_upper_v2_{}'.format(strat_version)] = res_df['high'].rolling(config.loc_set.zone.dc_period).max()\n","    res_df['dc_lower_v2_{}'.format(strat_version)] = res_df['low'].rolling(config.loc_set.zone.dc_period).min()\n","    \n","    res_df['zone_dc_upper_v2_{}'.format(strat_version)] = res_df['high'].rolling(config.loc_set.zone.zone_dc_period).max()\n","    res_df['zone_dc_lower_v2_{}'.format(strat_version)] = res_df['low'].rolling(config.loc_set.zone.zone_dc_period).min()\n","\n","    return res_df\n"]},{"cell_type":"markdown","metadata":{"id":"o5psPOVOCA1c"},"source":["###### utils_ override"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5q1V5vTjQszK"},"outputs":[],"source":["enlist_rtc = utils2.enlist_rtc\n","# enlist_rtc = enlist_rtc\n","enlist_tr = utils2.enlist_tr"]},{"cell_type":"markdown","metadata":{"id":"HKdUKKl-483N"},"source":["###### utils_public"]},{"cell_type":"code","execution_count":162,"metadata":{"executionInfo":{"elapsed":4840,"status":"ok","timestamp":1641896979383,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"nzOYWA2kqZ0d"},"outputs":[],"source":["sys_log3 = logging.getLogger()\n","\n","\n","class OrderSide:\n","    BUY = \"BUY\"\n","    SELL = \"SELL\"\n","    INVALID = None\n","\n","\n","def lvrg_set(res_df, config, open_side, ep_, out_, fee, limit_leverage=50):\n","\n","    strat_version = config.strat_version\n","\n","    if open_side == OrderSide.SELL:\n","\n","        if strat_version in ['v3']:\n","            # config.lvrg_set.leverage = config.lvrg_set.target_pct / (out_ / ep_ - 1 - (fee + config.trader_set.market_fee))\n","            config.lvrg_set.leverage = config.lvrg_set.target_pct / (\n","                        out_ / ep_ - 1 - (fee + config.trader_set.market_fee))\n","\n","            #     zone Ïóê Îî∞Î•∏ c_ep_gap Î•º Í≥†Î†§ (loss ÏôÑÌôî Î∞©Ìñ•) / Ïúó Ï§ÑÏùÄ ÏàòÏùµ Í∑πÎåÄÌôî Î∞©Ìñ•\n","            # config.lvrg_set.leverage = config.lvrg_set.target_pct / (out_ / res_df['short_ep_org'].iloc[ep_j] - 1 - (fee + config.trader_set.market_fee))\n","\n","        elif strat_version in ['v5_2', 'v7_3']:\n","            # config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(ep_ / out_ - 1 - (fee + config.trader_set.market_fee))\n","            config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(\n","                ep_ / out_ - 1 - (fee + config.trader_set.market_fee))\n","            # config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(res_df['short_ep_org'].iloc[ep_j] / out_ - 1 - (fee + config.trader_set.market_fee))\n","\n","    else:\n","        #   Ïúó phase Îäî min_pr Ïùò Ïò§Ï∞®Í∞Ä Ïª§Ïßê\n","        if strat_version in ['v3']:\n","            # config.lvrg_set.leverage = config.lvrg_set.target_pct / (ep_ / out_ - 1 - (fee + config.trader_set.market_fee))\n","            config.lvrg_set.leverage = config.lvrg_set.target_pct / (\n","                        ep_ / out_ - 1 - (fee + config.trader_set.market_fee))\n","            # config.lvrg_set.leverage = config.lvrg_set.target_pct / (res_df['long_ep_org'].iloc[ep_j] / out_ - 1 - (fee + config.trader_set.market_fee))\n","\n","        elif strat_version in ['v5_2', 'v7_3']:\n","            # config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(out_ / ep_ - 1 - (fee + config.trader_set.market_fee))\n","            config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(\n","                out_ / ep_ - 1 - (fee + config.trader_set.market_fee))\n","            # config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(out_ / res_df['long_ep_org'].iloc[ep_j] - 1 - (fee + config.trader_set.market_fee))\n","\n","    if not config.lvrg_set.allow_float:\n","        config.lvrg_set.leverage = int(config.lvrg_set.leverage)\n","\n","    # -------------- leverage rejection -------------- #\n","    if config.lvrg_set.leverage < 1 and config.lvrg_set.lvrg_rejection:\n","        return None\n","\n","    config.lvrg_set.leverage = max(config.lvrg_set.leverage, 1)\n","\n","    config.lvrg_set.leverage = min(limit_leverage, config.lvrg_set.leverage)\n","\n","    return config.lvrg_set.leverage\n","\n","\n","def sync_check(res_df_list, order_side=\"OPEN\"):\n","\n","    df, third_df, fourth_df = res_df_list\n","\n","    #       add indi. only      #\n","\n","    #       Todo : manual        #\n","    #        1. ÌïÑÏöîÌïú indi. Îäî enlist_epouttp & mr_check Î≥¥Î©¥ÏÑú ÏÇΩÏûÖ\n","    #        2. htf use_rows Îäî 1m use_rows Ïùò Í∏∏Ïù¥Î•º ÎßåÏ°±ÏãúÌÇ¨ Ïàò ÏûàÎäî Ï†ïÎèÑ\n","    #         a. 1m use_rows / htf_interval ÌïòÎ©¥ ÎåÄÎûµ ÎÇòÏò¥\n","    #         b. ÎòêÌïú, htf indi. Î•º ÏÉùÏÑ±ÌïòÍ∏∞ ÏúÑÌï¥ ÌïÑÏöîÌïú ÏµúÏÜå row Ïù¥ÏÉÅ\n","    df = dc_line(df, None, '1m', dc_period=20)\n","    df = bb_line(df, None, '1m')\n","    df = bb_line(df, third_df, '5m')\n","    df = dc_line(df, third_df, '5m')\n","    df = bb_line(df, fourth_df, '15m')\n","    df = dc_line(df, fourth_df, '15m')\n","\n","    df['rsi_1m'] = rsi(df, 14)\n","\n","    if order_side in [\"OPEN\"]:\n","\n","        third_df['ema_5m'] = ema(third_df['close'], 200)\n","        df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, third_df, [-1]), columns=['ema_5m']))\n","\n","    return df\n","\n","\n","def public_indi(res_df, order_side=\"OPEN\"):\n","\n","    res_df = bb_level(res_df, '5m', 1)\n","    res_df = dc_level(res_df, '5m', 1)\n","    res_df = bb_level(res_df, '15m', 1)\n","    res_df = dc_level(res_df, '15m', 1)\n","    # res_df = bb_level(res_df, '30m', 1)\n","    # res_df = dc_level(res_df, '30m', 1)\n","\n","    # res_df = st_level(res_df, '5m', 1)\n","    # res_df = st_level(res_df, '15m', 1)\n","    # res_df = st_level(res_df, '30m', 1)\n","\n","    if order_side in [\"OPEN\"]:\n","\n","        start_0 = time.time()\n","\n","        res_df[\"candle_ratio\"], res_df['body_ratio'] = candle_ratio(res_df, unsigned=False)\n","\n","        print(\"~ candle_ratio() elapsed time : {}\".format(time.time() - start_0))\n","\n","        start_0 = time.time()\n","\n","        # h_c_intv1 = 15\n","        # h_c_intv2 = 60\n","        # res_df = h_candle(res_df, h_c_intv1)\n","        # res_df = h_candle(res_df, h_c_intv2)\n","        \n","        h_c_intv1 = '15T'\n","        h_c_intv2 = 'H'\n","        res_df = h_candle_v2(res_df, h_c_intv1)\n","        res_df = h_candle_v2(res_df, h_c_intv2)\n","\n","        # sys_log3.warning(\"~ h_candle_ratio elapsed time : {}\".format(time.time() - start_0))\n","        print(\"candle_ratio() ~ h_candle() elapsed time : {}\".format(time.time() - start_0))\n","\n","        h_candle_col = ['hopen_{}'.format(h_c_intv2), 'hhigh_{}'.format(h_c_intv2), 'hlow_{}'.format(h_c_intv2), 'hclose_{}'.format(h_c_intv2)]\n","\n","        res_df['h_candle_ratio'], res_df['h_body_ratio'] = candle_ratio(res_df, ohlc_col=h_candle_col, unsigned=False)\n","\n","\n","    #     temp indi.    #\n","    # res_df[\"ma30_1m\"] = res_df['close'].rolling(30).mean()\n","    # res_df[\"ma60_1m\"] = res_df['close'].rolling(60).mean()\n","    res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line)\n","\n","    return res_df\n","\n","\n","def short_ep_loc(res_df, config, i, np_timeidx, show_detail=True):\n","\n","    strat_version = config.strat_version\n","\n","    # ------- param init ------- #\n","    open_side = None\n","\n","    # mr_const_cnt = 0\n","    # mr_score = 0\n","    zone = 'n'\n","\n","    if config.ep_set.entry_type == 'MARKET':\n","        if config.tp_set.tp_type != 'MARKET':\n","            tp_fee = config.trader_set.market_fee + config.trader_set.limit_fee\n","        else:\n","            tp_fee = config.trader_set.market_fee + config.trader_set.market_fee\n","        out_fee = config.trader_set.market_fee + config.trader_set.market_fee\n","    else:\n","        if config.tp_set.tp_type != 'MARKET':\n","            tp_fee = config.trader_set.limit_fee + config.trader_set.limit_fee\n","        else:\n","            tp_fee = config.trader_set.limit_fee + config.trader_set.market_fee\n","        out_fee = config.trader_set.limit_fee + config.trader_set.market_fee\n","\n","\n","    # -------------- candle_ratio -------------- #\n","    if config.loc_set.point.candle_ratio != \"None\":\n","\n","      # -------------- candle_ratio_v0 (1m initial tick Í∏∞Ï§ÄÏûÑ)  -------------- #\n","      if strat_version in ['v5_2', '1_1']:\n","        # \n","        candle_ratio_ = res_df['candle_ratio'].iloc[i]\n","        # body_ratio_ = res_df['body_ratio'].iloc[i]\n","\n","        if show_detail:\n","          sys_log3.warning(\"candle_ratio_ : {}\".format(candle_ratio_))\n","\n","        # if candle_ratio_ >= config.loc_set.point.candle_ratio:\n","        if candle_ratio_ <= -config.loc_set.point.candle_ratio:\n","          pass\n","\n","        else:\n","          return res_df, open_side, zone\n","\n","\n","      # -------------- candle_ratio_v1 (previous)  -------------- #\n","      if strat_version in ['v7_3', '2_2', 'v3']:\n","\n","        prev_hclose_idx = i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)\n","\n","        if prev_hclose_idx >= 0:\n","          \n","          h_candle_ratio_ = res_df['h_candle_ratio'].iloc[prev_hclose_idx]\n","          h_body_ratio_ = res_df['h_body_ratio'].iloc[prev_hclose_idx]\n","\n","          if strat_version in ['v7_3']:\n","            \n","            if show_detail:\n","                sys_log3.warning(\"h_candle_ratio_ : {}\".format(h_candle_ratio_))\n","\n","            \n","            if h_candle_ratio_ + h_body_ratio_/100 <= -config.loc_set.point.candle_ratio:\n","                pass\n","            else:\n","              return res_df, open_side, zone   \n","          \n","          elif strat_version in ['2_2', 'v3', '1_1']:\n","            \n","            if show_detail:\n","                sys_log3.warning(\"h_candle_ratio_ : {}\".format(h_candle_ratio_))\n","\n","            \n","            if h_candle_ratio_ <= -config.loc_set.point.candle_ratio:\n","                pass\n","            else:\n","              return res_df, open_side, zone   \n","\n","\n","            if config.loc_set.point.body_ratio != \"None\":\n","              \n","              if show_detail:\n","                  sys_log3.warning(\"h_body_ratio_ : {}\".format(h_body_ratio_))\n","\n","              \n","              if h_body_ratio_ >= config.loc_set.point.body_ratio:\n","                  pass\n","              else:\n","                return res_df, open_side, zone   \n","\n","\n","    if config.loc_set.point.candle_ratio2 != \"None\":\n","\n","        #     candle_ratio_v2 (current)     #\n","      prev_hclose_idx = i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)\n","\n","      if prev_hclose_idx >= -1:\n","        hc_res_df = res_df.iloc[prev_hclose_idx + 1:i + 1].copy()\n","        ho = hc_res_df['open'].iloc[0]\n","        hh = hc_res_df['high'].max()\n","        hl = hc_res_df['low'].min()\n","        hc = hc_res_df['close'].iloc[-1]\n","\n","\n","        if strat_version in ['1_3', '1_1']:\n","          score, body_score = candle_score(ho, hh, hl, hc, updown=None, unsigned=False)\n","        else:\n","          score, body_score = candle_score(ho, hh, hl, ho, updown=None, unsigned=False)\n","\n","        if show_detail:\n","          sys_log3.warning(\"candle_ratio2 : {}\".format(score))\n","\n","        \n","        if score <= -config.loc_set.point.candle_ratio2:\n","          pass\n","        else:\n","          return res_df, open_side, zone   \n","\n","        if config.loc_set.point.body_ratio2 != \"None\":\n","\n","          if show_detail:\n","            sys_log3.warning(\"body_ratio2 : {}\".format(body_score))\n","\n","          \n","          if ho > hc and body_score >= config.loc_set.point.body_ratio2:\n","            pass\n","          else:\n","            return res_df, open_side, zone   \n","\n","    \n","    # # -------------- tr scheduling -------------- #\n","    # if config.loc_set.zone.tr_thresh != \"None\":\n","\n","    #   \n","    #   tr = ((done_tp - ep_list[0] - tp_fee * ep_list[0]) / (ep_list[0] - done_out + out_fee * ep_list[0]))\n","\n","    # -------------- spread scheduling -------------- #\n","    if config.loc_set.zone.short_spread != \"None\":\n","\n","        \n","\n","        spread = (res_df['bb_base_5m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] - tp_fee * res_df['bb_base_5m'].iloc[\n","            # spread = (res_df['bb_base_5m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] - out_fee * res_df['bb_base_5m'].iloc[\n","            # i]) / (res_df['bb_base_5m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] + tp_fee *\n","            i]) / (res_df['bb_base_5m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] + out_fee *\n","                  res_df['bb_base_5m'].iloc[i])\n","        # spread = (res_df['bb_base_15m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] - tp_fee * res_df['bb_base_15m'].iloc[\n","        #     i]) / (res_df['bb_base_15m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] + out_fee *\n","        #             res_df['bb_base_15m'].iloc[i])\n","\n","        # spread = (res_df['dc_upper_5m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] - tp_fee * res_df['bb_lower_5m'].iloc[\n","        #     i]) / (res_df['dc_upper_5m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] + out_fee *\n","        #             res_df['bb_lower_5m'].iloc[i])\n","        # spread = (res_df['short_rtc_gap'].iloc[i] * (0.443) - tp_fee * res_df['short_ep'].iloc[\n","        #     i]) / (res_df['short_rtc_gap'].iloc[i] * (0.417) + out_fee * res_df['short_ep'].iloc[i])\n","\n","        # spread = (res_df['dc_upper_15m'].iloc[i] - res_df['dc_lower_5m'].iloc[i] - tp_fee * res_df['dc_lower_5m'].iloc[\n","        #     i]) / (res_df['dc_upper_15m'].iloc[i] - res_df['dc_lower_5m'].iloc[i] + out_fee *\n","        #             res_df['dc_lower_5m'].iloc[i])\n","        # spread = ((res_df['dc_upper_15m'].iloc[i] - res_df['dc_lower_5m'].iloc[i])/2 - tp_fee * res_df['dc_lower_5m'].iloc[\n","        #     i]) / ((res_df['dc_upper_15m'].iloc[i] - res_df['dc_lower_5m'].iloc[i])/2 + out_fee *\n","        #             res_df['dc_lower_5m'].iloc[i])\n","\n","        if show_detail:\n","            sys_log3.warning(\"spread : {}\".format(spread))\n","\n","        if spread >= config.loc_set.zone.short_spread:\n","            pass\n","        else:\n","          return res_df, open_side, zone   \n","\n","\n","    # -------------- dtk -------------- #\n","    if config.loc_set.zone.dt_k != \"None\":\n","\n","        \n","        # if res_df['dc_lower_%s' % config.loc_set.zone.dtk_dc_itv].iloc[i] >= res_df['short_rtc_1'].iloc[i] - res_df['h_short_rtc_gap'].iloc[i] * config.loc_set.zone.dt_k:\n","        #     dtk_v1 & v2 platform     #\n","        if config.loc_set.zone.dtk_dc_itv != \"None\":\n","            dc = res_df['dc_lower_%s' % config.loc_set.zone.dtk_dc_itv].iloc[i]\n","            dt_k = res_df['short_dtk_1_{}'.format(strat_version)].iloc[i] - \\\n","                  res_df['short_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k\n","                  \n","            if show_detail:\n","                sys_log3.warning(\"dc : {}\".format(dc))\n","                sys_log3.warning(\"dt_k : {}\".format(dt_k))\n","\n","            if dc >= dt_k:\n","                pass\n","            else:\n","              return res_df, open_side, zone   \n","\n","                #     dc_v2   #\n","        else:\n","            dc = res_df['dc_lower_v2_{}'.format(strat_version)].iloc[i]\n","            dt_k = res_df['short_dtk_1_{}'.format(strat_version)].iloc[i] - \\\n","                  res_df['short_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k\n","\n","            if show_detail:\n","                sys_log3.warning(\"dc : {}\".format(dc))\n","                sys_log3.warning(\"dt_k : {}\".format(dt_k))\n","\n","            if dc >= dt_k:\n","                # if res_df['dc_lower_v2_{}'.format(strat_version)].iloc[i] >= res_df['short_dtk_1_{}'.format(strat_version)].iloc[i] - res_df['short_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k and \\\n","                # res_df['dc_upper_v2_{}'.format(strat_version)].iloc[i] <= res_df['long_dtk_1_{}'.format(strat_version)].iloc[i] + res_df['long_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k:\n","                pass\n","            else:\n","              return res_df, open_side, zone   \n","\n","            \n","      # -------------- candle_dt_k -------------- #\n","    # \n","    # # if res_df['dc_lower_1m'].iloc[i] >= res_df['hclose_60'].iloc[i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)]:\n","    # if res_df['dc_lower_1m'].iloc[i] >= res_df['hlow_60'].iloc[i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)]:\n","    #   pass        \n","\n","    # \n","    # if res_df['dc_upper_1m'].iloc[i] <= res_df['hhigh_60'].iloc[i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)]:\n","    # # if res_df['dc_upper_1m'].iloc[i] <= res_df['hopen_60'].iloc[i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)]:\n","    #   pass  \n","\n","\n","    # -------------- zone rejection  -------------- #\n","    if config.loc_set.zone.zone_rejection:\n","\n","        #       config Î°ú ÌÜµÏ†úÌï† Ïàò ÏóÜÎäî rejection ÏùÄ strat_version ÏúºÎ°ú Ï°∞Í±¥Î¨∏ÏùÑ ÎÇòÎàî (lvrg_set Í≥º ÎèôÏùº)\n","\n","        # --------- by bb --------- # \n","\n","          #     bb & close   #\n","        if strat_version in ['v5_2']:\n","          \n","          # if res_df['close'].iloc[i] < res_df['bb_lower_%s' % config.loc_set.zone.bbz_itv].iloc[i]:   # org\n","          # if res_df['close'].iloc[i] > res_df['bb_lower_%s' % config.loc_set.zone.bbz_itv].iloc[i]:  # inv\n","          # if res_df['close'].iloc[i] > res_df['bb_upper_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","          if res_df['close'].iloc[i] > res_df['bb_upper2_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","          # if res_df['bb_upper3_%s' % config.loc_set.zone.bbz_itv].iloc[i] > res_df['close'].iloc[i] > res_df['bb_upper2_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","          # if res_df['close'].iloc[i] > res_df['bb_upper3_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","              pass\n","\n","              if show_detail:\n","                sys_log3.warning(\"bb & close passed\")\n","\n","          else:\n","            return res_df, open_side, zone   \n","\n","          #     bb & bb   #           \n","        if strat_version in ['v7_3', '1_1']:\n","\n","          \n","          if res_df['bb_upper_5m'].iloc[i] < res_df['bb_base_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","          # if res_df['bb_upper_1m'].iloc[i] < res_df['bb_lower_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","            pass\n","\n","            if show_detail:\n","                sys_log3.warning(\"bb & bb passed\")\n","                \n","          else:\n","            return res_df, open_side, zone   \n","\n","            #     bb & ep   #\n","          \n","          # if res_df['short_ep_{}'.format(strat_version)].iloc[i] < res_df['bb_base_15m'].iloc[i]:\n","          # if res_df['short_ep_{}'.format(strat_version)].iloc[i] < res_df['bb_base_15m'].iloc[i] + res_df['bb_gap_15m'].iloc[i]:\n","          # if res_df['short_ep_{}'.format(strat_version)].iloc[i] < res_df['bb_base_5m'].iloc[i]:\n","          if res_df['short_ep_{}'.format(strat_version)].iloc[i] < res_df['bb_upper_5m'].iloc[i]:\n","              pass\n","\n","              if show_detail:\n","                sys_log3.warning(\"bb & ep passed\")\n","                \n","          else:\n","            return res_df, open_side, zone   \n","\n","            #     bb & dc   #\n","          \n","          # if res_df['bb_base_%s' % config.loc_set.zone.bbz_itv].iloc[i] <= res_df['dc_upper_1m'].iloc[i] <= res_df['bb_upper_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","          \n","          prev_hopen_idx = i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1 + config.loc_set.zone.c_itv_ticks) + config.loc_set.zone.ad_idx\n","\n","          if prev_hopen_idx >= 0:\n","            # if res_df['dc_upper_5m'].iloc[prev_hopen_idx] < res_df['bb_upper_15m'].iloc[i]:\n","            if res_df['dc_upper_5m'].iloc[prev_hopen_idx] < res_df['bb_upper_15m'].iloc[prev_hopen_idx]:\n","              pass\n","\n","              if show_detail:\n","                  sys_log3.warning(\"bb & dc passed\")\n","                \n","            else:\n","              return res_df, open_side, zone   \n","\n","          # --------- by ema --------- # \n","\n","          #    bb & ema   #\n","        if strat_version in ['v7_3', '1_1']:\n","          \n","          # if res_df['bb_upper_15m'].iloc[i] < res_df['ema_5m'].iloc[i]:\n","          if res_df['dc_upper_5m'].iloc[i] < res_df['ema_5m'].iloc[i]:\n","            pass\n","\n","            if show_detail:\n","                sys_log3.warning(\"bb & ema passed\")\n","                \n","          else:\n","            return res_df, open_side, zone   \n","\n","          #    close & ema   #\n","        if strat_version in ['v5_2', 'v3']:\n","          \n","          # if res_df['short_ep'].iloc[i] < res_df['ema_5m'].iloc[i]:\n","          if res_df['close'].iloc[i] < res_df['ema_5m'].iloc[i]:\n","              pass\n","\n","              if show_detail:\n","                sys_log3.warning(\"close & ema passed\")\n","                \n","          else:\n","            return res_df, open_side, zone   \n","\n","        # --------- by st --------- # \n","        # if strat_version in ['v5_2']:\n","        #   \n","        #   if res_df['close'].iloc[i] < res_df['st_base_5m'].iloc[i]:\n","        #   # if res_df['close'].iloc[i] > res_df['st_base_5m'].iloc[i]:\n","        #       pass\n","\n","        #       if show_detail:\n","        #         sys_log3.warning(\"close & st passed\")\n","\n","        # --------- by dc --------- # \n","        \n","          #     descending dc    #\n","        # \n","        # if res_df['dc_lower_5m'].iloc[i] <= res_df['dc_lower_5m'].iloc[i - 50 : i].min():\n","        #   pass\n","\n","        # --------- by candle --------- #\n","        if strat_version in ['2_2']:\n","\n","          prev_hclose_idx = i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)\n","          if prev_hclose_idx >= 0:\n","            \n","            # if res_df['short_ep_{}'.format(strat_version)].iloc[i] <= res_df['hclose_60'].iloc[prev_hclose_idx)]:\n","            if res_df['close'].iloc[i] <= res_df['hclose_60'].iloc[prev_hclose_idx]:\n","                pass\n","                \n","            else:\n","              return res_df, open_side, zone   \n","\n","        # --------- by macd --------- #\n","        # \n","        # if res_df['ma30_1m'].iloc[i] < res_df['ma60_1m'].iloc[i]:\n","        #     pass\n","\n","\n","        # --------- by zone_dtk --------- #\n","        # \n","        # if res_df['zone_dc_upper_v2_{}'.format(strat_version)].iloc[i] < res_df['long_dtk_plot_1'].iloc[i] + res_df['long_dtk_plot_gap'].iloc[\n","        #     i] * config.loc_set.zone.zone_dt_k:\n","        #   pass\n","\n","    # -------------- zoned tr_set - post_Work -------------- #\n","    if config.tr_set.c_ep_gap != \"None\":\n","\n","        #       by bb       # \n","        # if res_df['close'].iloc[i] > res_df['bb_lower_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","\n","        #       by zone_dtk       #\n","\n","        #         c_zone        #\n","        if res_df['zone_dc_upper_v2_{}'.format(strat_version)].iloc[i] > res_df['long_dtk_plot_1'].iloc[i] + \\\n","                res_df['long_dtk_plot_gap'].iloc[\n","                    i] * config.loc_set.zone.zone_dt_k:\n","\n","            if config.ep_set.static_ep:\n","                res_df['short_ep_{}'.format(strat_version)].iloc[i] = res_df['short_ep2_{}'.format(strat_version)].iloc[\n","                    i]\n","            else:\n","                res_df['short_ep_{}'.format(strat_version)] = res_df['short_ep2_{}'.format(strat_version)]\n","\n","            if config.out_set.static_out:\n","                res_df['short_out_{}'.format(strat_version)].iloc[i] = \\\n","                res_df['short_out_org_{}'.format(strat_version)].iloc[i]\n","            else:\n","                res_df['short_out_{}'.format(strat_version)] = res_df['short_out_org_{}'.format(strat_version)]\n","\n","            zone = 'c'\n","\n","        #         t_zone        #\n","        else:\n","\n","            #    # zone_rejection - temporary\n","\n","            if config.ep_set.static_ep:\n","                res_df['short_ep_{}'.format(strat_version)].iloc[i] = \\\n","                res_df['short_ep_org_{}'.format(strat_version)].iloc[i]\n","            else:\n","                res_df['short_ep_{}'.format(strat_version)] = res_df['short_ep_org_{}'.format(strat_version)]\n","\n","            if config.out_set.static_out:\n","                res_df['short_out_{}'.format(strat_version)].iloc[i] = \\\n","                res_df['short_out2_{}'.format(strat_version)].iloc[i]\n","            else:\n","                res_df['short_out_{}'.format(strat_version)] = res_df['short_out2_{}'.format(strat_version)]\n","\n","            zone = 't'\n","\n","    return res_df, OrderSide.SELL, zone\n","\n","\n","def long_ep_loc(res_df, config, i, np_timeidx, show_detail=True):\n","\n","    strat_version = config.strat_version\n","\n","    # ------- param init ------- #\n","    open_side = None\n","\n","    # mr_const_cnt = 0\n","    # mr_score = 0\n","    zone = 'n'\n","\n","    if config.ep_set.entry_type == 'MARKET':\n","        if config.tp_set.tp_type != 'MARKET':\n","            tp_fee = config.trader_set.market_fee + config.trader_set.limit_fee\n","        else:\n","            tp_fee = config.trader_set.market_fee + config.trader_set.market_fee\n","        out_fee = config.trader_set.market_fee + config.trader_set.market_fee\n","    else:\n","        if config.tp_set.tp_type != 'MARKET':\n","            tp_fee = config.trader_set.limit_fee + config.trader_set.limit_fee\n","        else:\n","            tp_fee = config.trader_set.limit_fee + config.trader_set.market_fee\n","        out_fee = config.trader_set.limit_fee + config.trader_set.market_fee\n","\n","\n","    # -------------- candle_ratio -------------- #\n","    if config.loc_set.point.candle_ratio != \"None\":\n","\n","      # -------------- candle_ratio_v0 (1m initial tick Í∏∞Ï§ÄÏûÑ)  -------------- #\n","      if strat_version in ['v5_2', '1_1']:\n","        \n","        candle_ratio_ = res_df['candle_ratio'].iloc[i]\n","        # body_ratio_ = res_df['body_ratio'].iloc[i]\n","\n","        if show_detail:\n","            sys_log3.warning(\"candle_ratio_ : {}\".format(candle_ratio_))\n","\n","        if candle_ratio_ >= config.loc_set.point.candle_ratio:\n","          pass\n","                \n","        else:\n","          return res_df, open_side, zone   \n","\n","      # -------------- candle_ratio_v1 (previous)  -------------- #\n","      if strat_version in ['v7_3', '2_2', 'v3']:\n","\n","        prev_hclose_idx = i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)\n","        \n","        if prev_hclose_idx >= 0:\n","\n","          h_candle_ratio_ = res_df['h_candle_ratio'].iloc[prev_hclose_idx]\n","          h_body_ratio_ = res_df['h_body_ratio'].iloc[prev_hclose_idx]\n","\n","          if strat_version in ['v7_3']:\n","\n","            if show_detail:\n","              sys_log3.warning(\"h_candle_ratio_ : {}\".format(h_candle_ratio_))\n","\n","            \n","            if h_candle_ratio_ + h_body_ratio_/100 >= config.loc_set.point.candle_ratio:\n","              pass\n","                \n","            else:\n","              return res_df, open_side, zone   \n","\n","          elif strat_version in ['2_2', 'v3', '1_1']:\n","          \n","            if show_detail:\n","              sys_log3.warning(\"h_candle_ratio_ : {}\".format(h_candle_ratio_))    \n","\n","            \n","            if h_candle_ratio_ >= config.loc_set.point.candle_ratio:\n","              pass\n","                \n","            else:\n","              return res_df, open_side, zone   \n","    \n","\n","            if config.loc_set.point.body_ratio != \"None\":\n","              \n","              if show_detail:\n","                  sys_log3.warning(\"h_body_ratio_ : {}\".format(h_body_ratio_))\n","\n","              \n","              if h_body_ratio_ >= config.loc_set.point.body_ratio:\n","                  pass\n","                \n","              else:\n","                return res_df, open_side, zone   \n","\n","\n","    if config.loc_set.point.candle_ratio2 != \"None\":\n","\n","      #     candle_ratio_v2 (current)     #\n","      prev_hclose_idx = i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)\n","\n","      if prev_hclose_idx >= -1:\n","\n","        hc_res_df = res_df.iloc[prev_hclose_idx + 1:i + 1].copy()\n","        ho = hc_res_df['open'].iloc[0]\n","        hc = hc_res_df['close'].iloc[-1]\n","        hh = hc_res_df['high'].max()\n","        hl = hc_res_df['low'].min()\n","\n","        if strat_version in ['1_3', '1_1']:\n","          score, body_score = candle_score(ho, hh, hl, hc, updown=None, unsigned=False)\n","        else:\n","          score, body_score = candle_score(ho, hh, hl, ho, updown=None, unsigned=False)\n","        \n","        if show_detail:\n","          sys_log3.warning(\"candle_ratio_v2 : {}\".format(score))\n","\n","        \n","        if score >= config.loc_set.point.candle_ratio2:\n","          pass\n","                \n","        else:\n","          return res_df, open_side, zone   \n","\n","        # print(\"candle_ratio2 passed !\")\n","\n","        if config.loc_set.point.body_ratio2 != \"None\":\n","          \n","          if show_detail:\n","            sys_log3.warning(\"body_ratio2 : {}\".format(body_score))\n","\n","          \n","          if ho < hc and body_score >= config.loc_set.point.body_ratio2:\n","            pass\n","                \n","          else:\n","            return res_df, open_side, zone   \n","\n","\n","    # -------------- spread scheduling -------------- #\n","    if config.loc_set.zone.long_spread != \"None\":\n","\n","        \n","\n","        # spread = (res_df['bb_upper_5m'].iloc[i] - res_df['bb_base_5m'].iloc[i] - tp_fee * res_df['bb_base_5m'].iloc[\n","        #     i]) / (res_df['bb_base_5m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] + out_fee *\n","        #             res_df['bb_base_5m'].iloc[i])\n","        # spread = (res_df['bb_upper_5m'].iloc[i] - res_df['bb_base_15m'].iloc[i] - tp_fee * res_df['bb_base_15m'].iloc[\n","        #     i]) / (res_df['bb_upper_5m'].iloc[i] - res_df['bb_base_15m'].iloc[i] + out_fee *\n","        #             res_df['bb_base_15m'].iloc[i])\n","\n","        spread = (res_df['bb_upper_5m'].iloc[i] - res_df['dc_lower_5m'].iloc[i] - tp_fee * res_df['bb_upper_5m'].iloc[\n","            # spread = (res_df['bb_upper_5m'].iloc[i] - res_df['dc_lower_5m'].iloc[i] - out_fee * res_df['bb_upper_5m'].iloc[\n","            # i]) / (res_df['bb_upper_5m'].iloc[i] - res_df['dc_lower_5m'].iloc[i] + tp_fee *\n","            i]) / (res_df['bb_upper_5m'].iloc[i] - res_df['dc_lower_5m'].iloc[i] + out_fee *\n","                  res_df['bb_upper_5m'].iloc[i])\n","        # spread = (res_df['long_rtc_gap'].iloc[i] * (0.443) - tp_fee * res_df['long_ep'].iloc[\n","        #     i]) / (res_df['long_rtc_gap'].iloc[i] * (0.417) + out_fee * res_df['long_ep'].iloc[i])\n","\n","        # spread = (res_df['dc_upper_5m'].iloc[i] - res_df['dc_lower_15m'].iloc[i] - tp_fee * res_df['dc_upper_5m'].iloc[\n","        #     i]) / (res_df['dc_upper_5m'].iloc[i] - res_df['dc_lower_15m'].iloc[i] + out_fee *\n","        #             res_df['dc_upper_5m'].iloc[i])\n","        # spread = ((res_df['dc_upper_5m'].iloc[i] - res_df['dc_lower_15m'].iloc[i])/2 - tp_fee * res_df['dc_upper_5m'].iloc[\n","        #     i]) / ((res_df['dc_upper_5m'].iloc[i] - res_df['dc_lower_15m'].iloc[i])/2 + out_fee *\n","        #             res_df['dc_upper_5m'].iloc[i])\n","        \n","        if show_detail:\n","            sys_log3.warning(\"spread : {}\".format(spread))\n","\n","        if spread >= config.loc_set.zone.long_spread:\n","            pass\n","        else:\n","          return res_df, open_side, zone   \n","\n","\n","    # -------------- dtk -------------- #\n","    if config.loc_set.zone.dt_k != \"None\":\n","\n","        \n","        # if res_df['dc_upper_%s' % config.loc_set.zone.dtk_dc_itv].iloc[i] <= res_df['long_rtc_1'].iloc[i] + res_df['long_rtc_gap'].iloc[i] * config.loc_set.zone.dt_k:\n","        #     dtk_v1 & v2 platform    #\n","        if config.loc_set.zone.dtk_dc_itv != \"None\":\n","            dc = res_df['dc_upper_%s' % config.loc_set.zone.dtk_dc_itv].iloc[i]\n","            dt_k = res_df['long_dtk_1_{}'.format(strat_version)].iloc[i] + \\\n","                  res_df['long_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k\n","                  \n","            if show_detail:\n","                sys_log3.warning(\"dc : {}\".format(dc))\n","                sys_log3.warning(\"dt_k : {}\".format(dt_k))\n","\n","            if dc <= dt_k:\n","                pass\n","            else:\n","              return res_df, open_side, zone  \n","\n","        else:\n","            #     dc_v2     #\n","            dc = res_df['dc_upper_v2_{}'.format(strat_version)].iloc[i]\n","            dt_k = res_df['long_dtk_1_{}'.format(strat_version)].iloc[i] + \\\n","                  res_df['long_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k\n","\n","            if show_detail:\n","                sys_log3.warning(\"dc : {}\".format(dc))\n","                sys_log3.warning(\"dt_k : {}\".format(dt_k))\n","\n","            if dc <= dt_k:\n","                # if res_df['dc_upper_v2_{}'.format(strat_version)].iloc[i] >= res_df['long_dtk_1_{}'.format(strat_version)].iloc[i] + res_df['long_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k:\n","\n","                # if res_df['dc_upper_v2_{}'.format(strat_version)].iloc[i] <= res_df['long_dtk_1_{}'.format(strat_version)].iloc[i] + res_df['long_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k and \\\n","                #   res_df['dc_lower_v2_{}'.format(strat_version)].iloc[i] >= res_df['short_dtk_1_{}'.format(strat_version)].iloc[i] - res_df['short_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k:\n","\n","                pass\n","            else:\n","              return res_df, open_side, zone  \n","\n","      # -------------- candle_dt_k -------------- #\n","    # \n","    # # if res_df['dc_upper_1m'].iloc[i] <= res_df['hclose_60'].iloc[i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)]:\n","    # if res_df['dc_upper_1m'].iloc[i] <= res_df['hhigh_60'].iloc[i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)]:\n","    #   pass  \n","\n","    # \n","    # if res_df['dc_lower_1m'].iloc[i] >= res_df['hlow_60'].iloc[i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)]:\n","    # # if res_df['dc_lower_1m'].iloc[i] >= res_df['hopen_60'].iloc[i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)]:\n","    #   pass  \n","\n","    # -------------- zone rejection  -------------- #\n","    if config.loc_set.zone.zone_rejection:\n","\n","        # --------- by bb --------- #    \n","        \n","          #     bb & close   #\n","        if strat_version in ['v5_2']:\n","\n","          \n","          # if res_df['close'].iloc[i] > res_df['bb_upper_%s' % config.loc_set.zone.bbz_itv].iloc[i]:    # org\n","          # if res_df['close'].iloc[i] < res_df['bb_upper_%s' % config.loc_set.zone.bbz_itv].iloc[i]:  # inv\n","          # if res_df['close'].iloc[i] < res_df['bb_lower_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","          if res_df['close'].iloc[i] < res_df['bb_lower2_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","          # if res_df['bb_lower3_%s' % config.loc_set.zone.bbz_itv].iloc[i] < res_df['close'].iloc[i] < res_df['bb_lower2_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","          # if res_df['close'].iloc[i] < res_df['bb_lower3_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","              pass\n","\n","              if show_detail:\n","                  sys_log3.warning(\"bb & close passed\")\n","          else:\n","            return res_df, open_side, zone   \n","\n","          #     bb & bb   #\n","        if strat_version in ['v7_3', '1_1']:\n","\n","          \n","          if  res_df['bb_lower_5m'].iloc[i] > res_df['bb_base_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","          # if res_df['bb_lower_1m'].iloc[i] > res_df['bb_upper_%s' % config.loc_set.zone.bbz_itv].iloc[i]:            \n","              pass\n","\n","              if show_detail:\n","                  sys_log3.warning(\"bb & bb passed\")\n","          else:\n","            return res_df, open_side, zone   \n","\n","            #     bb & ep   #\n","          \n","          # if res_df['long_ep_{}'.format(strat_version)].iloc[i] > res_df['bb_base_15m'].iloc[i]:\n","          # if res_df['long_ep_{}'.format(strat_version)].iloc[i] > res_df['bb_base_15m'].iloc[i] + res_df['bb_gap_15m'].iloc[i]:\n","          # if res_df['long_ep_{}'.format(strat_version)].iloc[i] > res_df['bb_base_5m'].iloc[i]:\n","          if res_df['long_ep_{}'.format(strat_version)].iloc[i] > res_df['bb_lower_5m'].iloc[i]:\n","              pass\n","\n","              if show_detail:\n","                  sys_log3.warning(\"bb & ep passed\")\n","          else:\n","            return res_df, open_side, zone   \n","          \n","            #     bb & dc   #\n","          \n","          # if res_df['bb_base_%s' % config.loc_set.zone.bbz_itv].iloc[i] >= res_df['dc_lower_1m'].iloc[i] >= res_df['bb_lower_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","\n","          prev_hopen_idx = i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1 + config.loc_set.zone.c_itv_ticks) + config.loc_set.zone.ad_idx\n","          \n","          if prev_hopen_idx >= 0:            \n","            # if res_df['dc_lower_5m'].iloc[prev_hopen_idx] > res_df['bb_lower_15m'].iloc[i]:\n","            if res_df['dc_lower_5m'].iloc[prev_hopen_idx] > res_df['bb_lower_15m'].iloc[prev_hopen_idx]:\n","              pass\n","\n","              if show_detail:\n","                  sys_log3.warning(\"bb & dc passed\")\n","            else:\n","              return res_df, open_side, zone   \n","\n","        # --------- by ema --------- # \n","\n","          #     bb & ema   #\n","        if strat_version in ['v7_3', '1_1']:\n","\n","          \n","          # if res_df['bb_lower_15m'].iloc[i] > res_df['ema_5m'].iloc[i]:\n","          if res_df['dc_lower_5m'].iloc[i] > res_df['ema_5m'].iloc[i]:\n","            pass\n","\n","            if show_detail:\n","              sys_log3.warning(\"bb & ema passed\")\n","          else:\n","            return res_df, open_side, zone   \n","\n","          #     close & ema     #\n","        if strat_version in ['v5_2', 'v3']:\n","\n","          \n","          # if  res_df['long_ep'].iloc[i] > res_df['ema_5m'].iloc[i]:\n","          if res_df['close'].iloc[i] > res_df['ema_5m'].iloc[i]:\n","              pass\n","\n","              if show_detail:\n","                sys_log3.warning(\"close & ema passed\")\n","          else:\n","            return res_df, open_side, zone   \n","\n","        # if strat_version in [\"2_2\"]:\n","\n","        #   \n","        #   # if  res_df['long_ep'].iloc[i] > res_df['ema_5m'].iloc[i]:\n","        #   if res_df['close'].iloc[i] < res_df['ema_5m'].iloc[i]:\n","        #       pass\n","\n","        #       if show_detail:\n","        #         sys_log3.warning(\"close & ema passed\")\n","\n","        # --------- by st --------- # \n","        # if strat_version in ['v5_2']:\n","        #   \n","        #   if res_df['close'].iloc[i] > res_df['st_base_5m'].iloc[i]:\n","        #   # if res_df['close'].iloc[i] < res_df['st_base_15m'].iloc[i]:\n","        #       pass\n","\n","        #       if show_detail:\n","        #         sys_log3.warning(\"close & st passed\")\n","          \n","        # --------- by dc --------- # \n","\n","          #     ascending dc    #\n","        # \n","        # if res_df['dc_upper_5m'].iloc[i] >= res_df['dc_upper_5m'].iloc[i - 50 : i].max():\n","        #   pass          \n","\n","        # --------- by candle --------- #\n","        if strat_version in ['2_2']:\n","\n","          prev_hclose_idx = i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)\n","          if prev_hclose_idx >= 0:\n","            \n","            if res_df['close'].iloc[i] >= res_df['hclose_60'].iloc[prev_hclose_idx]:\n","                pass\n","            else:\n","              return res_df, open_side, zone   \n","        \n","        # --------- by macd --------- #\n","        # \n","        # if res_df['ma30_1m'].iloc[i] > res_df['ma60_1m'].iloc[i]:\n","        #     pass\n","\n","        # --------- by zone_dtk --------- #\n","        # \n","        # if res_df['zone_dc_lower_v2_{}'.format(strat_version)].iloc[i] > res_df['short_dtk_plot_1'].iloc[i] - res_df['short_dtk_plot_gap'].iloc[i] * config.loc_set.zone.zone_dt_k:\n","        #   pass\n","\n","    # -------------- zoned tr_set - post_work -------------- #\n","    if config.tr_set.c_ep_gap != \"None\":\n","        #       by bb       # \n","        # if res_df['close'].iloc[i] < res_df['bb_upper_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","\n","        #       by zone_dtk       #\n","\n","        #         c_zone        #\n","        if res_df['zone_dc_lower_v2_{}'.format(strat_version)].iloc[i] < res_df['short_dtk_plot_1'].iloc[i] - \\\n","                res_df['short_dtk_plot_gap'].iloc[i] * config.loc_set.zone.zone_dt_k:\n","\n","            if config.ep_set.static_ep:\n","                res_df['long_ep_{}'.format(strat_version)].iloc[i] = res_df['long_ep2_{}'.format(strat_version)].iloc[i]\n","            else:\n","                res_df['long_ep_{}'.format(strat_version)] = res_df['long_ep2_{}'.format(strat_version)]\n","\n","            if config.out_set.static_out:\n","                res_df['long_out_{}'.format(strat_version)].iloc[i] = \\\n","                res_df['long_out_org_{}'.format(strat_version)].iloc[i]\n","            else:\n","                res_df['long_out_{}'.format(strat_version)] = res_df['long_out_org_{}'.format(strat_version)]\n","\n","            zone = 'c'\n","\n","            # \n","            # dc_lb_period = 100\n","            # if np.sum((res_df['dc_upper_15m'] > res_df['dc_upper_15m'].shift(15)).iloc[i - dc_lb_period:i]) == 0:\n","            #   pass\n","\n","            #         t_zone        #\n","        else:\n","\n","            #    # zone_rejection - temporary\n","\n","            if config.ep_set.static_ep:\n","                res_df['long_ep_{}'.format(strat_version)].iloc[i] = \\\n","                res_df['long_ep_org_{}'.format(strat_version)].iloc[i]\n","            else:\n","                res_df['long_ep_{}'.format(strat_version)] = res_df['long_ep_org_{}'.format(strat_version)]\n","\n","            if config.out_set.static_out:\n","                res_df['long_out_{}'.format(strat_version)].iloc[i] = res_df['long_out2_{}'.format(strat_version)].iloc[\n","                    i]\n","            else:\n","                res_df['long_out_{}'.format(strat_version)] = res_df['long_out2_{}'.format(strat_version)]\n","\n","            zone = 't'\n","\n","    return res_df, OrderSide.BUY, zone\n"]},{"cell_type":"markdown","metadata":{"id":"rLI8unIyroiC"},"source":["##### run"]},{"cell_type":"code","source":["print(res_df[[\"open\", \"high\", \"low\", \"close\"]].tail())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MnhKTzK5meSL","executionInfo":{"status":"ok","timestamp":1641895586856,"user_tz":-540,"elapsed":336,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"e2e9a363-1db5-45fe-db33-6ae0f1f09338"},"execution_count":134,"outputs":[{"output_type":"stream","name":"stdout","text":["                            open     high      low    close\n","index                                                      \n","2022-01-09 08:55:59.999  3087.99  3088.07  3083.44  3084.29\n","2022-01-09 08:56:59.999  3084.14  3084.46  3082.22  3082.89\n","2022-01-09 08:57:59.999  3082.88  3083.49  3078.00  3082.97\n","2022-01-09 08:58:59.999  3082.97  3082.98  3078.82  3082.60\n","2022-01-09 08:59:59.999  3082.60  3082.60  3076.80  3080.03\n"]}]},{"cell_type":"code","source":["h_c_intv2 = 60\n","h_candle_col = ['hopen_{}'.format(h_c_intv2), 'hhigh_{}'.format(h_c_intv2), 'hlow_{}'.format(h_c_intv2), 'hclose_{}'.format(h_c_intv2)]\n","\n","back_idx = list(range(-1, -360, -60))\n","print(res_df[h_candle_col].iloc[back_idx])\n","\n","# print(res_df[h_candle_col].tail())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8yGX2RpBhRrF","executionInfo":{"status":"ok","timestamp":1641896198802,"user_tz":-540,"elapsed":335,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"3cd8c3e0-9dfe-4e8a-e528-9b9352aa279c"},"execution_count":158,"outputs":[{"output_type":"stream","name":"stdout","text":["                         hopen_60  hhigh_60  hlow_60  hclose_60\n","index                                                          \n","2022-01-09 08:59:59.999   3116.84   3118.53  3076.80    3080.03\n","2022-01-09 07:59:59.999   3077.67   3131.69  3075.00    3116.84\n","2022-01-09 06:59:59.999   3031.10   3104.83  3025.40    3077.72\n","2022-01-09 05:59:59.999   3028.14   3052.13  3002.14    3030.98\n","2022-01-09 04:59:59.999   3008.12   3057.00  2996.45    3028.14\n","2022-01-09 03:59:59.999   3038.40   3079.79  2998.81    3008.14\n"]}]},{"cell_type":"code","source":["print(h_res_df.tail())\n","# print(h_res_df.iloc[back_idx])\n","\n","# h_res_df2 = h_res_df.resample('T').bfill()\n","# print(h_res_df2.iloc[back_idx])\n","\n","itv2 = 'H'\n","h_candle_col = ['hopen_{}'.format(itv2), 'hhigh_{}'.format(itv2), 'hlow_{}'.format(itv2), 'hclose_{}'.format(itv2)]\n","\n","res_df_slice = res_df.iloc[:-5].copy()\n","print(h_candle_v2(res_df_slice, 'H')[h_candle_col].iloc[back_idx])\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FTkYuH4Xh_SS","executionInfo":{"status":"ok","timestamp":1641896139778,"user_tz":-540,"elapsed":798,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"7d1510d5-57e6-4737-e06e-313adff89fdf"},"execution_count":157,"outputs":[{"output_type":"stream","name":"stdout","text":["                        open     high      low    close\n","index                                                  \n","2022-01-09 04:00:00  3008.12  3057.00  2996.45  3028.14\n","2022-01-09 05:00:00  3028.14  3052.13  3002.14  3030.98\n","2022-01-09 06:00:00  3031.10  3104.83  3025.40  3077.72\n","2022-01-09 07:00:00  3077.67  3131.69  3075.00  3116.84\n","2022-01-09 08:00:00  3116.84  3118.53  3081.14  3087.99\n","                         hopen_H  hhigh_H   hlow_H  hclose_H\n","index                                                       \n","2022-01-09 08:54:59.999  3116.84  3118.53  3081.14   3087.99\n","2022-01-09 07:54:59.999  3077.67  3131.69  3075.00   3116.84\n","2022-01-09 06:54:59.999  3031.10  3104.83  3025.40   3077.72\n","2022-01-09 05:54:59.999  3028.14  3052.13  3002.14   3030.98\n","2022-01-09 04:54:59.999  3008.12  3057.00  2996.45   3028.14\n","2022-01-09 03:54:59.999  3038.40  3079.79  2998.81   3008.14\n"]}]},{"cell_type":"code","source":["h_res_df = res_df.resample('1H').agg({\n","    'open': 'first',\n","    'high': 'max',  \n","    'low': 'min',   \n","    'close': 'last'\n","})"],"metadata":{"id":"SAskuDFlhkxz","executionInfo":{"status":"ok","timestamp":1641894467011,"user_tz":-540,"elapsed":306,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"execution_count":105,"outputs":[]},{"cell_type":"code","source":["#     1. res_df last_idx Í∞Ä ÎÇòÎàÑÏñ¥Îñ®Ïñ¥ÏßÄÏßÄ ÏïäÏùÑ ÎïåÏùò Í≤ΩÏö∞Î•º Ï°∞ÏÇ¨Ìï¥ÏïºÌï®   #\n","#     2. Ïù¥Î°†Ï†ÅÏúºÎ°úÎäî, Ìï¥Îãπ itv ÎÇ¥Î∂ÄÍπåÏßÄÏùò ohlc rolling Í∏∞Ï§ÄÏúºÎ°ú h_candle ÏùÑ ÌòïÏÑ±Ìï®\n","# np.sum(res_df[h_candle_col].values != h_candle_v2(res_df, 'H')[h_candle_col].values)\n","np.sum(res_df_slice[h_candle_col].values != h_candle_v2(res_df_slice, 'H')[h_candle_col].values)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"71jyHk0GlNNJ","executionInfo":{"status":"ok","timestamp":1641896698271,"user_tz":-540,"elapsed":339,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"88d30137-b357-4f9a-e267-f7eb340a0d35"},"execution_count":160,"outputs":[{"output_type":"execute_result","data":{"text/plain":["6"]},"metadata":{},"execution_count":160}]},{"cell_type":"code","source":["h_candle_v2(res_df_slice, 'H')"],"metadata":{"id":"Yz54_H_soh9n"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(res_df_slice[[\"open\", \"high\", \"low\", \"close\"]].tail())\n","# h_candle_v2(res_df_slice, 'H')\n","\n","h_res_df = res_df_slice.resample('H').agg({\n","    'open': 'first',\n","    'high': 'max',  \n","    'low': 'min',   \n","    'close': 'last'\n","  })\n","\n","h_res_df2 = h_res_df.resample('T').bfill()\n","\n","itv = 'H'\n","h_candle_col = ['hopen_{}'.format(itv), 'hhigh_{}'.format(itv), 'hlow_{}'.format(itv), 'hclose_{}'.format(itv)]\n","\n","res_df[h_candle_col] = h_res_df2.values\n","# print(h_res_df.tail())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iqKk1U-snUht","executionInfo":{"status":"ok","timestamp":1641896047645,"user_tz":-540,"elapsed":302,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"b34f99d2-2aea-407a-d25b-59e9fff77254"},"execution_count":153,"outputs":[{"output_type":"stream","name":"stdout","text":["                            open     high      low    close\n","index                                                      \n","2022-01-09 08:50:59.999  3093.14  3093.14  3084.01  3087.17\n","2022-01-09 08:51:59.999  3087.17  3087.76  3081.14  3084.20\n","2022-01-09 08:52:59.999  3084.21  3087.82  3084.03  3084.90\n","2022-01-09 08:53:59.999  3084.90  3084.99  3081.27  3083.60\n","2022-01-09 08:54:59.999  3083.59  3087.99  3083.59  3087.99\n"]}]},{"cell_type":"code","source":["def h_candle_v2(res_df_, itv):\n","\n","  h_res_df = res_df_.resample(itv).agg({\n","    'open': 'first',\n","    'high': 'max',  \n","    'low': 'min',   \n","    'close': 'last'\n","  })\n","\n","  h_res_df2 = h_res_df.resample('T').bfill()\n","\n","  h_candle_col = ['hopen_{}'.format(itv), 'hhigh_{}'.format(itv), 'hlow_{}'.format(itv), 'hclose_{}'.format(itv)]\n","  \n","  res_df[h_candle_col] = h_res_df2.values\n","  \n","  return res_df_"],"metadata":{"id":"A8_PnJTmjhl6","executionInfo":{"status":"ok","timestamp":1641896846604,"user_tz":-540,"elapsed":321,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"execution_count":161,"outputs":[]},{"cell_type":"code","source":["# db_path = './candlestick_concated/database_ub/' # upbit\n","db_path = './candlestick_concated/database_bn/'   # binance\n","\n","# date = '2021-11-17'\n","date = '2022-01-10'\n","\n","cum_path = \"cum\"\n","# cum_path = \"non_cum\"  # non_cum ÏúºÎ°ú ÏßÑÌñâÌïòÎäî Í≤ΩÏö∞, row concat Ïö©ÎèÑÏù¥Í∏∞ ÎïåÎ¨∏Ïóê noncat -> concat ÏúºÎ°ú Î≥ÄÍ≤Ω (base cols Î•º Î™®Îëê Îã¥Í≥† ÏûàÏùå)\n","\n","data_path = os.path.join(db_path, cum_path, date)\n","\n","third_df = pd.read_feather(os.path.join(data_path, '2022-01-10 ETHUSDT_5m.ftr'), columns=None, use_threads=True).set_index(\"index\")\n","# seventh_df = pd.read_feather(os.path.join(data_path, '2022-01-10 ETHUSDT_4h.ftr'), columns=None, use_threads=True).set_index(\"index\")\n"],"metadata":{"id":"HUVqoRv3t6ga","executionInfo":{"status":"ok","timestamp":1641882259030,"user_tz":-540,"elapsed":6,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","execution_count":163,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"TdAn2bHHBWMF","executionInfo":{"status":"ok","timestamp":1641897034422,"user_tz":-540,"elapsed":42735,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"fba73fd8-e38d-459d-cf89-1bb2a7c0fd8b"},"outputs":[{"output_type":"stream","name":"stdout","text":["2022-01-10 ETHUSDT.ftr loaded !\n","~ load res_df elapsed time : 0.34727931022644043\n","~ candle_ratio() elapsed time : 0.1962294578552246\n","candle_ratio() ~ h_candle() elapsed time : 0.6076741218566895\n","load_df ~ enlist_rtc elapsed time : 7.64587926864624\n","config.strat_version : v5_2\n","config.loc_set.point.exp_itv : 1m\n","config.loc_set.point.tpg_itv1 : 5m\n","config.loc_set.point.tpg_itv0 : 5m\n","config.loc_set.point.outg_itv1 : 5m\n","config.loc_set.point.outg_itv0 : 5m\n","config.loc_set.point.outg_dc_period : None\n","-----------------------------------\n","config.loc_set.zone.short_spread : None\n","config.loc_set.zone.long_spread : None\n","config.loc_set.zone.tr_thresh : None\n","config.loc_set.zone.dtk_itv : 5m\n","config.loc_set.zone.dt_k : None\n","config.loc_set.zone.ei_k : -0.66\n","config.loc_set.zone.dc_period : 135\n","config.loc_set.zone.use_dtk_line : 0\n","config.loc_set.zone.zone_rejection : 1\n","config.loc_set.zone.bbz_itv : 15m\n","config.loc_set.zone.gap_mply : 1\n","config.loc_set.zone.ad_idx : 19\n","config.loc_set.zone.zone_dt_k : 0.4\n","config.loc_set.zone.zone_dc_period : 135\n","-----------------------------------\n","config.loc_set.point.tf_entry : 1\n","config.loc_set.point.htf_entry : 15\n","config.loc_set.point.candle_ratio : 50\n","config.loc_set.point.body_ratio : None\n","config.loc_set.point.candle_ratio2 : None\n","config.loc_set.point.body_ratio2 : None\n","config.loc_set.point.osc_band : 20\n","config.tr_set.ep_gap : 0.0\n","config.tr_set.tp_gap : 0.0\n","config.tr_set.decay_gap : None\n","config.tr_set.out_gap : 0.5\n","config.tr_set.c_ep_gap : None\n","config.tr_set.t_out_gap : 0.0\n","-----------------------------------\n","config.lvrg_set.leverage : 10\n","config.lvrg_set.static_lvrg : 1\n","config.lvrg_set.target_pct : 0.1\n","-----------------------------------\n","config.ep_set.entry_type : LIMIT\n","config.tp_set.tp_type : BOTH\n","config.tp_set.static_tp : 1\n","config.tp_set.decay_term : 60\n","rsi_out_stratver : ['v7_3', '1_1']\n","config.out_set.use_out : 1\n","config.out_set.out_type : MARKET\n","ema_period : 195\n","enlist_rtc ~ enlist_tr elapsed time : 0.8547165393829346\n","elapsed_time : 11.755086660385132\n","supblot231 passed\n","supblot232 passed\n","supblot233 passed\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1400x1000 with 9 Axes>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]}],"source":["config = config1  # custom base config, if use override -> set to config1\n","\n","multi_mode = 0\n","strat_switch = 0\n","override = 1\n","\n","if strat_switch:    # override ÌïòÏßÄÏïäÎäî Í≤ΩÏö∞Ïóê config1 ÎßåÏùÑ ÏÇ¨Ïö©ÌïòÎãà, config1 Ïóê Ïñ¥Îñ§ version ÏùÑ Î∞∞ÏπòÌï†ÏßÄ ÏÑ†ÌÉù\n","  utils1 = utils2\n","  config1 = config3\n","\n","# ------- tp / out fee calc ------- #\n","if config.ep_set.entry_type == 'MARKET':\n","  if config.tp_set.tp_type != 'MARKET':   # Todo : Ïã§Ï†úÎ°ú, tp_fee Í∞Ä ÏïÑÎãå spread const. Î•º ÏúÑÌïú spread_fee1 ÏûÑ (Ï∂îÌõÑ ÏàòÏ†ï Í∂åÍ≥†)\n","    tp_fee = config.trader_set.market_fee + config.trader_set.limit_fee\n","  else:\n","    tp_fee = config.trader_set.market_fee + config.trader_set.market_fee\n","  out_fee = config.trader_set.market_fee + config.trader_set.market_fee\n","else:\n","  if config.tp_set.tp_type != 'MARKET':\n","    tp_fee = config.trader_set.limit_fee + config.trader_set.limit_fee\n","  else:\n","    tp_fee = config.trader_set.limit_fee + config.trader_set.market_fee\n","  out_fee = config.trader_set.limit_fee + config.trader_set.market_fee\n","  \n","\n","# ------- inversion set ------- #\n","inversion = 0\n","fdist_thresh = 1\n","\n","# ------- plot param ------- #\n","title_position = (0.30, 1)\n","fontsize = 10\n","show_plot = 1\n","show_detail = 0\n","\n","# ------- temp param ------- #\n","rsi_out_stratver = ['v7_3', '1_1']\n","allow_osc_touch = 0\n","rsi_gap = 5\n","\n","early_out_tpg = 0.36\n","\n","# ------- survey param ------- #\n","itv_num_list = [1, 3, 5, 15]\n","\n","itv_list = ['15m', '30m', '1h', '4h']\n","# itv_list = ['3m', '5m', '15m', '30m', '1h', '4h']\n","\n","x_val_list = np.arange(0.3, 1., 0.1)     # prcn 1\n","x_val_list = np.arange(0.095, 0.3, 0.02)     # prcn 2\n","# x_val_list = np.arange(-0.64, -0.7, -0.001)    # prcn 3\n","# x_val_list = np.arange(0.944, 0.945, 0.0001)    # prcn 4\n","x_val_list = np.arange(1, 10, 1)   # prcn -1\n","x_val_list = np.arange(200, 10, -5)   # prcn -2\n","\n","y_val_cols = [\"wr\", \"sr\", \"frq\", \"dpf\", \"acc_pr\", \"sum_pr\", \"acc_mdd\", \"sum_mdd\", \"liqd\", \"min_pr\", \"tr\", \"dr\"]\n","y_rev_val_cols = [\"wr\", \"sr\", \"acc_pr\", \"sum_pr\", \"acc_mdd\", \"sum_mdd\", \"min_pr\"]\n","\n","\n","for key in ftr_list:\n","\n","  if config.trader_set.symbol in key:\n","    pass\n","  else:\n","    continue\n","\n","  start_0 = time.time()\n","\n","  res_df = pd.read_feather(os.path.join(ftr_path, key), columns=None, use_threads=True).set_index(\"index\") #.loc[pd.to_datetime(\"2021-07-10 04:59:59.999000\"):]\n","  print(key, \"loaded !\")\n","  # break\n","\n","  print(\"~ load res_df elapsed time :\", time.time() - start_0)\n","\n","  # -------------------- additional indi. -------------------- #    \n","  start_0 = time.time()\n","\n","  np_timeidx = np.array(list(map(lambda x : intmin(x), res_df.index)))  # Ïù¥Í≥≥Ïóê latency Ï°∞Í∏à ÏûàÏùå\n","\n","  if override:\n","    res_df = public_indi(res_df)\n","  else:\n","    res_df = utils_public.public_indi(res_df)\n","  \n","\n","  # -------------------- entlist rtc & tr ÏùÄ Ï§ëÎ≥µÎêòÎäî Ïó¨Î∂ÄÏóê Îî∞Îùº user Í∞Ä flexible coding Ìï¥ÏïºÌï† Í≤É -------------------- #    \n","  if override:\n","    res_df = enlist_rtc(res_df, config1)\n","  else:\n","    res_df = utils1.enlist_rtc(res_df, config1)\n","    if multi_mode:\n","      res_df = utils2.enlist_rtc(res_df, config2)\n","      res_df = utils2.enlist_rtc(res_df, config3)   # form Í∞ôÏùÄ Í≤ΩÏö∞, Í∞ôÏùÄ utils ÏÇ¨Ïö© - config Îßå Î≥ÄÍ≤Ω\n","\n","  print(\"load_df ~ enlist_rtc elapsed time :\", time.time() - start_0)  \n","\n","  survey_df = pd.DataFrame(index=x_val_list, columns=y_val_cols)\n","  short_survey_df = pd.DataFrame(index=x_val_list, columns=y_val_cols)\n","  long_survey_df = pd.DataFrame(index=x_val_list, columns=y_val_cols)\n","  rev_survey_df = pd.DataFrame(index=x_val_list, columns=y_rev_val_cols)\n","  rev_short_survey_df = pd.DataFrame(index=x_val_list, columns=y_rev_val_cols)\n","  rev_long_survey_df = pd.DataFrame(index=x_val_list, columns=y_rev_val_cols)\n","\n","  for survey_i, just_loop in enumerate(range(1)):\n","  # for survey_i, config.loc_set.zone.tr_thresh in enumerate(x_val_list): \n","  # for survey_i, config.loc_set.zone.short_spread in enumerate(x_val_list): \n","  # for survey_i, config.loc_set.zone.long_spread in enumerate(x_val_list): \n","  # for survey_i, config.loc_set.zone.dt_k in enumerate(x_val_list):\n","  # for survey_i, config.loc_set.zone.dc_period in enumerate(x_val_list):\n","  # for survey_i, config.loc_set.zone.ei_k in enumerate(x_val_list):   \n","  # for survey_i, config.loc_set.zone.dr_error in enumerate(x_val_list): \n","  # for survey_i, config.loc_set.zone.bbz_itv in enumerate(itv_list):\n","  # for survey_i, config.loc_set.zone.gap_mply in enumerate(x_val_list):\n","  # for survey_i, config.loc_set.zone.ad_idx in enumerate(x_val_list):\n","  # for survey_i, config.loc_set.point.tf_entry in enumerate(x_val_list):\n","  # for survey_i, config.loc_set.point.candle_ratio in enumerate(x_val_list):\n","  # for survey_i, config.loc_set.point.body_ratio in enumerate(x_val_list):\n","  # for survey_i, config.loc_set.point.candle_ratio2 in enumerate(x_val_list):\n","  # for survey_i, config.loc_set.point.body_ratio2 in enumerate(x_val_list):\n","  # for survey_i, config.loc_set.point.osc_band in enumerate(x_val_list):\n","  # for survey_i, config.tr_set.ep_gap in enumerate(x_val_list): \n","  # for survey_i, config.tr_set.out_gap in enumerate(x_val_list): \n","  # for survey_i, config.tr_set.tp_gap in enumerate(x_val_list): \n","  # for survey_i, config.lvrg_set.leverage in enumerate(x_val_list):\n","  # for survey_i, config.lvrg_set.target_pct in enumerate(x_val_list):   \n","  # for survey_i, config.lvrg_set.target_pct in enumerate(x_val_list):   \n","  # for survey_i, config.tp_set.decay_term in enumerate(x_val_list):   \n","  # for survey_i, outg_dc_itv_num in enumerate(x_val_list): \n","  # for survey_i, exp_itv in enumerate(itv_list): \n","  # for survey_i, zone_dt_k in enumerate(x_val_list): \n","  # for survey_i, t_out_gap in enumerate(x_val_list): \n","  # for survey_i, zone_dc_period in enumerate(x_val_list): \n","  # for survey_i, early_out_tpg in enumerate(x_val_list): \n","  # for survey_i, ema_period in enumerate(x_val_list): \n","  \n","    start_0 = time.time()\n","\n","    try:\n","      \n","      print(\"config.strat_version :\", config.strat_version)\n","      print(\"config.loc_set.point.exp_itv :\", config.loc_set.point.exp_itv)\n","      print(\"config.loc_set.point.tpg_itv1 :\", config.loc_set.point.tpg_itv1)\n","      print(\"config.loc_set.point.tpg_itv0 :\", config.loc_set.point.tpg_itv0)\n","      print(\"config.loc_set.point.outg_itv1 :\", config.loc_set.point.outg_itv1)\n","      print(\"config.loc_set.point.outg_itv0 :\", config.loc_set.point.outg_itv0)\n","      print(\"config.loc_set.point.outg_dc_period :\", config.loc_set.point.outg_dc_period)\n","      print(\"-----------------------------------\")    \n","      # print(\"dtk_dc_itv :\", dtk_dc_itv)    \n","      # print(\"config.loc_set.dtk_dc_itv_num :\", config.loc_set.dtk_dc_itv_num :\",)\n","      print(\"config.loc_set.zone.short_spread :\", config.loc_set.zone.short_spread)\n","      print(\"config.loc_set.zone.long_spread :\", config.loc_set.zone.long_spread)\n","      print(\"config.loc_set.zone.tr_thresh :\", config.loc_set.zone.tr_thresh)\n","      print(\"config.loc_set.zone.dtk_itv :\", config.loc_set.zone.dtk_itv)\n","      print(\"config.loc_set.zone.dt_k :\", config.loc_set.zone.dt_k)\n","      print(\"config.loc_set.zone.ei_k :\", config.loc_set.zone.ei_k)\n","      print(\"config.loc_set.zone.dc_period :\", config.loc_set.zone.dc_period)\n","      print(\"config.loc_set.zone.use_dtk_line :\", config.loc_set.zone.use_dtk_line)\n","\n","      print(\"config.loc_set.zone.zone_rejection :\", config.loc_set.zone.zone_rejection)\n","      print(\"config.loc_set.zone.bbz_itv :\", config.loc_set.zone.bbz_itv)\n","      print(\"config.loc_set.zone.gap_mply :\", config.loc_set.zone.gap_mply)\n","      print(\"config.loc_set.zone.ad_idx :\", config.loc_set.zone.ad_idx)\n","      print(\"config.loc_set.zone.zone_dt_k :\", config.loc_set.zone.zone_dt_k)\n","      print(\"config.loc_set.zone.zone_dc_period :\", config.loc_set.zone.zone_dc_period)\n","      # print(\"config.loc_set.open_shift :\", config.loc_set.open_shift)\n","      print(\"-----------------------------------\")\n","      # print(\"config.ep_set.dr_error :\", config.ep_set.dr_error)\n","      print(\"config.loc_set.point.tf_entry :\", config.loc_set.point.tf_entry)\n","      print(\"config.loc_set.point.htf_entry :\", config.loc_set.point.htf_entry)\n","      print(\"config.loc_set.point.candle_ratio :\", config.loc_set.point.candle_ratio)\n","      print(\"config.loc_set.point.body_ratio :\", config.loc_set.point.body_ratio)\n","      print(\"config.loc_set.point.candle_ratio2 :\", config.loc_set.point.candle_ratio2)\n","      print(\"config.loc_set.point.body_ratio2 :\", config.loc_set.point.body_ratio2)\n","      print(\"config.loc_set.point.osc_band :\", config.loc_set.point.osc_band)\n","      print(\"config.tr_set.ep_gap :\", config.tr_set.ep_gap)\n","      print(\"config.tr_set.tp_gap :\", config.tr_set.tp_gap)  \n","      print(\"config.tr_set.decay_gap :\", config.tr_set.decay_gap)  \n","      print(\"config.tr_set.out_gap :\", config.tr_set.out_gap)\n","      print(\"config.tr_set.c_ep_gap :\", config.tr_set.c_ep_gap)\n","      print(\"config.tr_set.t_out_gap :\", config.tr_set.t_out_gap)\n","      print(\"-----------------------------------\")\n","      print(\"config.lvrg_set.leverage :\", config.lvrg_set.leverage)\n","      print(\"config.lvrg_set.static_lvrg :\", config.lvrg_set.static_lvrg)\n","      print(\"config.lvrg_set.target_pct :\", config.lvrg_set.target_pct)\n","      print(\"-----------------------------------\")\n","      print(\"config.ep_set.entry_type :\", config.ep_set.entry_type)\n","      print(\"config.tp_set.tp_type :\", config.tp_set.tp_type)\n","      print(\"config.tp_set.static_tp :\", config.tp_set.static_tp)\n","      print(\"config.tp_set.decay_term :\", config.tp_set.decay_term)\n","      print(\"rsi_out_stratver :\", rsi_out_stratver)\n","      print(\"config.out_set.use_out :\", config.out_set.use_out)    \n","      print(\"config.out_set.out_type :\", config.out_set.out_type)\n","    \n","    except Exception as e:\n","      print(e)\n","\n","    #       temp survey     #\n","    # res_df = bb_level(res_df, '15m', config.loc_set.zone.gap_mply)\n","    \n","    ema_period = 195\n","    third_df['ema_5m'] = ema(third_df['close'], ema_period)\n","    if 'ema_5m' in res_df.columns:\n","      res_df.drop(['ema_5m'], axis=1, inplace=True)\n","    res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, third_df, [-1]), columns=['ema_5m']))\n","\n","    print(\"ema_period :\", ema_period)\n","    \n","    # rsi_upper = 50 + config.loc_set.point.osc_band\n","    # rsi_lower = 50 - config.loc_set.point.osc_band\n","\n","    if override:\n","      res_df = enlist_tr(res_df, config1, np_timeidx)\n","    else:\n","      res_df = utils1.enlist_tr(res_df, config1, np_timeidx)\n","      if multi_mode:\n","        res_df = utils2.enlist_tr(res_df, config2, np_timeidx)\n","        res_df = utils2.enlist_tr(res_df, config3, np_timeidx)\n","\n","    print(\"enlist_rtc ~ enlist_tr elapsed time :\", time.time() - start_0)  \n","\n","    #       trading : Ïó¨Í∏∞ÎèÑ Ï≤¥Í≤∞ Í≤∞Í≥ºÏóê ÎåÄÌï¥ Î¨òÏÇ¨Ìï®       #\n","    trade_list = []\n","    h_trade_list = []\n","    leverage_list = []\n","    fee_list = []\n","    short_fee_list = []\n","    long_fee_list = []\n","    open_list = []\n","    zone_list = []\n","    side_list = []\n","    strat_ver_list = []\n","\n","    tp_ratio_list = []\n","    short_tp_ratio_list = []\n","    long_tp_ratio_list = []\n","\n","    dr_list = []\n","    short_dr_list = []\n","    long_dr_list = []\n","\n","    liqd_list = []\n","    short_liqd_list = []\n","    long_liqd_list = []\n","\n","    nontp_liqd_list = []\n","    nontp_short_liqd_list = []\n","    nontp_long_liqd_list = []\n","\n","    nontp_pr_list = []\n","    nontp_short_pr_list = []\n","    nontp_long_pr_list = []\n","\n","    nontp_short_indexs = []\n","    nontp_long_indexs = []\n","\n","    nontp_short_ep_list = []\n","    nontp_long_ep_list = []\n","\n","    pr_list = []\n","    long_list = []\n","    short_list = []\n","\n","    h_pr_list = []\n","    h_long_list = []\n","    h_short_list = []\n","\n","    ep_tp_list = []\n","    h_ep_tp_list = []\n","    tp_state_list = []\n","\n","    i = 0\n","    while 1:\n","    # for i in range(len(res_df)):  \n","\n","      run = 0\n","      # if res_df['entry_{}'.format(config.strat_version)][i] == config.ep_set.short_entry_score: \n","      if multi_mode:\n","        if res_df['entry_{}'.format(config1.strat_version)][i] == config1.ep_set.short_entry_score or \\\n","            res_df['entry_{}'.format(config2.strat_version)][i] == config2.ep_set.short_entry_score: \n","          run = -1\n","        elif res_df['entry_{}'.format(config1.strat_version)][i] == -config1.ep_set.short_entry_score or \\\n","          res_df['entry_{}'.format(config2.strat_version)][i] == -config2.ep_set.short_entry_score: \n","          run = 1 \n","      else:\n","        if res_df['entry_{}'.format(config1.strat_version)][i] == config1.ep_set.short_entry_score:\n","          run = -1\n","        elif res_df['entry_{}'.format(config1.strat_version)][i] == -config1.ep_set.short_entry_score:\n","          run = 1\n","        #   print(\"run = 1, idx : {}\".format(i))\n","        #   print(\"res_df['entry_{}'.format(config1.strat_version)][i] :\", res_df['entry_{}'.format(config1.strat_version)][i])\n","\n","      if run == -1:        \n","\n","        #     Ïù¥Í≥≥ÏóêÏÑú ÏÇ¨Ïö©Îê† config Í∞Ä Ï†ïÌï¥Ïßê    #\n","        if res_df['entry_{}'.format(config1.strat_version)][i] == config1.ep_set.short_entry_score:\n","          config = config1\n","        else:\n","          config = config2  # Í∏∞Î≥∏ setting ÏùÄ lower version strat. ÏúºÎ°ú ÏÑ§Ï†ïÌï®\n","\n","        # strat_version = config.strat_version\n","    \n","\n","        initial_i = i\n","\n","\n","        if override:\n","          res_df, open_side, zone = short_ep_loc(res_df, config, i, np_timeidx, show_detail)          \n","        else:\n","          #       config Îäî ep_loc ÏùÑ ÌÜµÌï¥ Ïû¨Ï†ïÏùò Îê† Ïàò ÏûàÏùå      #\n","          res_df, open_side, zone = utils_public.short_ep_loc(res_df, config, i, np_timeidx, show_detail)\n","          if multi_mode:\n","            if config.strat_version == 'v5_2' and open_side is None:\n","              res_df, open_side, zone = utils_public.short_ep_loc(res_df, config3, i, np_timeidx, show_detail)\n","\n","              if open_side is not None:  # Ïù¥ ÌòïÌÉúÎ•º Ïú†ÏßÄÌïòÎäî Ïù¥Ïú†Îäî, ÏïÑÎûòÏùò summation form ÏùÑ Íπ®Îú®Î¶¨ÏßÄ ÏïäÍ∏∞ ÏúÑÌï®\n","                config = config3 \n","\n","\n","        # -------------- mr_score summation -------------- #\n","        if open_side is not None:     \n","          pass\n","\n","        else:\n","          i += 1\n","          if i >= len(res_df):\n","            break\n","          continue\n","\n","        # print(\"short_ep_loc passed !\")\n","\n","        # --------------------- config Í∞Ä ÌôïÏ†ïÎêú Ïù¥ÌõÑÏùò setting --------------------- #\n","        strat_version = config.strat_version\n","        \n","        # p_i Ïùò Ïö©ÎèÑ Î™®Î•¥Í≤†Ïùå\n","        if config.out_set.static_out:\n","          p_i = initial_i  \n","        else:\n","          p_i = i\n","\n","        # ------- fee init ------- #\n","        if config.ep_set.entry_type == 'LIMIT':\n","          fee = config.trader_set.limit_fee\n","        else:\n","          fee = config.trader_set.market_fee\n","        \n","        # --------------- set partial tp --------------- #\n","        short_tps = [res_df['short_tp_{}'.format(strat_version)]]\n","        # long_tps = [res_df['long_tp_{}'.format(strat_version)]]\n","\n","        # short_tps = [short_tp2, short_tp] # org\n","        # long_tps = [long_tp2, long_tp]\n","        \n","        # short_tps = [short_tp, short_tp2]\n","        # long_tps = [long_tp, long_tp2]\n","\n","\n","        ep_j = initial_i\n","        out_j = initial_i\n","\n","        # -------------- limit waiting : limit_out -------------- #\n","\n","        if config.ep_set.entry_type == \"LIMIT\":\n","\n","          allow_ep_in = 0 if strat_version in ['v5_2'] else 1\n","          # allow_ep_in = 1\n","          entry_done = 0\n","          entry_open = 0\n","          prev_sar = None\n","\n","          # for e_j in range(i, len(res_df)): # entry_signal Ïù¥ open Í∏∞Ï§Ä (Ìï¥Îãπ bar ÏóêÏÑú Ï≤¥Í≤∞ Í∞ÄÎä•Ìï®)\n","          if i + 1 >= len(res_df):  # i should be checked if e_j starts from i+1\n","            break\n","          for e_j in range(i + 1, len(res_df)): # entry signalÏù¥ close Í∏∞Ï§Ä Ïùº Í≤ΩÏö∞\n","        \n","            if not config.ep_set.static_ep:\n","              ep_j = e_j\n","              out_j = e_j\n","\n","            if config.tp_set.static_tp:\n","              # if config.ep_set.tpout_onexec:\n","              #   tp_j = e_j\n","              # else:\n","                tp_j = initial_i\n","            else:\n","              tp_j = e_j  \n","\n","            #             1. ep ÏÑ§Ï†ï \n","            # -------------- np.inf ep -------------- #\n","            # if short_ep.iloc[initial_i] == np.inf:\n","            #   break\n","\n","\n","            #     1. check ep_out     #\n","            if res_df['low'].iloc[e_j] <= res_df['h_short_rtc_1_{}'.format(strat_version)].iloc[tp_j] - \\\n","              res_df['h_short_rtc_gap_{}'.format(strat_version)].iloc[tp_j] * config.loc_set.zone.ei_k:\n","              break\n","\n","              # elif strat_version == 'v5_2':\n","              # if res_df['low'].iloc[e_j] <= res_df['short_tp_{}'.format(strat_version)].iloc[tp_j]: # ep_out : tp_done\n","              # # if np_timeidx[e_j] % config.loc_set.point.tf_entry == config.loc_set.point.tf_entry - 1:\n","              #   break\n","\n","              # elif (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[e_j - 1] >= 50 - config.loc_set.point.osc_band) & \\\n","              #                  (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[e_j] < 50 - config.loc_set.point.osc_band):\n","              #   break\n","\n","            # if config.loc_set.zone.c_itv_ticks != \"None\":\n","\n","            #   if np_timeidx[e_j] % config.loc_set.zone.c_itv_ticks == config.loc_set.zone.c_itv_ticks - 1:\n","            #     break\n","\n","            #     2. ep_loc.point2\n","            if strat_version =='v5_2' and allow_ep_in == 0:\n","              if (res_df['dc_upper_1m'].iloc[e_j - 1] <= res_df['dc_upper_15m'].iloc[e_j]) & \\\n","                  (res_df['dc_upper_15m'].iloc[e_j - 1] != res_df['dc_upper_15m'].iloc[e_j]): # & \\\n","              # if (res_df['dc_upper_1m'].iloc[e_j - 1] <= res_df['dc_upper_5m'].iloc[e_j]) & \\\n","              #     (res_df['dc_upper_5m'].iloc[e_j - 1] != res_df['dc_upper_5m'].iloc[e_j]): # & \\\n","                  # (res_df['dc_upper_15m'].iloc[e_j] <= res_df['ema_5m'].iloc[e_j]):\n","                allow_ep_in = 1\n","                out_j = e_j\n","                # ep_j = e_j\n","                # continue  # limit entry Ïùò Í≤ΩÏö∞ ep_loc.point2 ÏôÑÎ£å ÏãúÏ†ê Ïù¥ÌõÑÎ°ú ÏßÑÏûÖÏù¥ Í∞ÄÎä•Ìïú Ï†ê\n","\n","              #     2-1. ep_out (ep_loc2) by ep_loc.point\n","              # if allow_ep_in and config.loc_set.zone.tr_thresh != \"None\":\n","              #   ep_ = res_df['close'].iloc[ep_j - 1]\n","              #   tr = ((res_df['short_tp_{}'.format(strat_version)].iloc[tp_j] - ep_ - tp_fee * ep_) / (ep_ - res_df['short_out_{}'.format(strat_version)].iloc[out_j] + out_fee * ep_))\n","              #   if tr < config.loc_set.zone.tr_thresh:\n","              #     break\n","\n","            #     3. check ep_in       #\n","            if allow_ep_in and res_df['high'].iloc[e_j] >= res_df['short_ep_{}'.format(strat_version)].iloc[ep_j]:\n","              entry_done = 1\n","              # print(\"res_df['high'].iloc[e_j] :\", res_df['high'].iloc[e_j])\n","              # print(\"e_j :\", e_j)\n","\n","              #     Ïù¥ÎØ∏, e_j open Ïù¥ ep Î≥¥Îã§ ÎÜíÏùÄ Í≤ΩÏö∞, entry[ep_j] => -2 Î°ú Î≥ÄÍ≤Ω   #\n","              if res_df['open'].iloc[e_j] >= res_df['short_ep_{}'.format(strat_version)].iloc[ep_j]:\n","                entry_open = 1\n","              break\n","\n","\n","          i = e_j\n","          # print(\"i = e_j :\", i)\n","\n","          if entry_done:      \n","            pass\n","\n","          else:\n","            i += 1\n","            if i >= len(res_df):\n","              break\n","            continue\n","\n","        # ----------------- end wait ----------------- #\n","\n","        # if e_j - initial_i >= 200:\n","        #   print(\"e_j, initial_i :\", e_j, initial_i)\n","        # print(\"e_j - initial_i :\", e_j - initial_i)\n","        # print()\n","\n","        open_list.append(initial_i)\n","        zone_list.append(zone)\n","        side_list.append('s')\n","        strat_ver_list.append(strat_version)\n","        \n","        #     e_j ÎùºÎäî Î≥ÄÏàòÎäî MARKET Ïóê ÏûàÏñ¥ÏÑú Ï†ïÏùòÎêòÏÑúÎäî ÏïàÎêòÎäî Î≥ÄÏàòÏûÑ   #\n","        if config.ep_set.entry_type == 'MARKET':\n","          # try:\n","          #   ep_list = [res_df['close'].iloc[e_j]]\n","          # except Exception as e:\n","          #   # print('error in ep_list (initial) :', e)\n","          ep_list = [res_df['close'].iloc[ep_j]]\n","\n","        else:          \n","          if not entry_open:\n","            ep_list = [res_df['short_ep_{}'.format(strat_version)].iloc[ep_j]]\n","          \n","          else:\n","            #   ep_j Îäî Ìï≠ÏÉÅ ÏûàÏùå, LIMIT Ïù∏ Í≤ΩÏö∞ e_j ÎèÑ Ìï≠ÏÉÅ Ï°¥Ïû¨Ìï® --> dynamic_ep Ïó¨Î∂ÄÏóê Îî∞Îùº ep_j = e_j Í∞Ä ÎêòÎäî Í≤ΩÏö∞Îßå Ï°¥Ïû¨Ìï† ÎøêÏûÑ \n","            #   Îî∞ÎùºÏÑú, ep_j Î°ú ÌÜµÏùº Í∞ÄÎä•Ìï® (dynamic_ep Ïù∏ Í≤ΩÏö∞, ep_j = e_j ÎêòÏñ¥ÏûàÏùå)\n","            fee = config.trader_set.market_fee\n","            ep_list = [res_df['open'].iloc[e_j]]  # --> Ï≤¥Í≤∞Ïù¥ ÎêòÎäî e_j idx Í∏∞Ï§ÄÏúºÎ°ú ÌïòÎäîÍ≤å ÎßûÏùå\n","\n","        if not config.lvrg_set.static_lvrg:\n","\n","          ep_ = ep_list[0]\n","          out_ = res_df['short_out_{}'.format(strat_version)].iloc[out_j]\n","          if override:\n","            config.lvrg_set.leverage = lvrg_set(res_df, config, \"SELL\", ep_, out_, fee)\n","          else:\n","            config.lvrg_set.leverage = utils_public.lvrg_set(res_df, config, \"SELL\", ep_, out_, fee)\n","\n","          # -------------- leverage rejection -------------- #\n","          if config.lvrg_set.leverage == None:\n","            open_list.pop()\n","            zone_list.pop()\n","            side_list.pop()\n","            strat_ver_list.pop()\n","\n","            i += 1\n","            if i >= len(res_df):\n","              break\n","            continue          \n","        \n","        leverage_list.append(config.lvrg_set.leverage)\n","\n","        # try:\n","        if config.ep_set.entry_type == \"MARKET\":\n","          ep_idx_list = [ep_j]  # ep_j Îäî ep_type Ïú†Í¥ÄÌïòÍ≤å Ï°¥Ïû¨ÌïòÎäî Î≥ÄÏàòÎãàÍπå try Ïóê Í±∏Ïñ¥ÎëêÎäîÍ≤å ÎßûÏùå <-- # market Ïù∏Îç∞, e_j Î≥ÄÏàòÍ∞Ä Ìï†ÎãπÎêú Í≤ΩÏö∞ Í≥†Î†§Ìï¥ÏïºÌï®\n","        else:\n","          ep_idx_list = [e_j]\n","\n","        out_idx_list = [out_j]\n","\n","        # except Exception as e:\n","        #   # print('error in ep_idx_list :', e)        \n","        #   ep_idx_list = [e_j]\n","\n","        tp_list = []\n","        tp_idx_list = []\n","\n","        partial_tp_cnt = 0\n","        hedge_cnt = 1\n","\n","        h_ep, h_tp = None, None\n","        h_i, h_j = None, None\n","        \n","        trade_done = 0\n","        cross_on = 0\n","        out = 0\n","        # config.out_set.retouch\n","\n","        #     Todo    #\n","        #      1. future_work : ÏÉÅÎã®Ïùò retouch ÏôÄ Í≤πÏπ® \n","        config.out_set.retouch = 0\n","        \n","\n","        if i == len(res_df) - 1: # if j start from i + 1 \n","          open_list.pop()       \n","          zone_list.pop()       \n","          side_list.pop()       \n","        for j in range(i + 1, len(res_df)):\n","\n","        # for j in range(i, len(res_df)):\n","\n","          if config.tp_set.static_tp:\n","            if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","              tp_j = ep_j  # tpout_onexec = using dynamic_ep --> using ep_j Ïóê ÎåÄÌïú Ïù¥Ïú†\n","            else:\n","              tp_j = initial_i\n","          else:\n","            tp_j = j\n","\n","          if config.out_set.static_out:\n","            if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","              out_j = ep_j\n","            # else:           \n","            #   out_j = initial_i   # --> referenced upper phase as initail_j / e_j (start of limit wait)\n","          else:\n","            out_j = j\n","\n","\n","          # -------------- sub ep -------------- #\n","          # if res_df['high'].iloc[j - 1] <= res_df['sar2'].iloc[j - 1] and res_df['high'].iloc[j] > res_df['sar2'].iloc[j]:\n","            \n","          #   sub_ep = res_df['sar2'].iloc[j - 1]\n","\n","          #   if sub_ep < ep_list[-1]:\n","          #     ep_list.append(sub_ep)\n","          #     ep_idx_list.append(j)\n","\n","          \n","          # -------------- hedge only once -------------- #\n","          #             ÏùºÎã®, h_quantity Îäî Ï¥àÍ∏∞ ÏßÑÏûÖÍ≥º ÎèôÏùºÌïòÍ≤å ÏÑ§Ï†ï         #\n","          # if res_df['high'].iloc[j] >= res_df['minor_ST2_Up'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] >= res_df['minor_ST2_Up'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] >= res_df['minor_ST3_Up'].iloc[j] and hedge_cnt == 1:\n","\n","          #   h_ep = res_df['close'].iloc[j]\n","          #   hedge_cnt -= 1\n","          #   h_i = j\n","\n","\n","          # -------------- ultimate limit tp -------------- #\n","          if not config.tp_set.non_tp:\n","\n","            #               1. by price line             #\n","            if config.tp_set.tp_type == 'LIMIT' or config.tp_set.tp_type == \"BOTH\":\n","\n","              for s_i, short_tp_ in enumerate(short_tps):\n","\n","                #     decay adjustment    #\n","                #     tp_j includes dynamic_j   #\n","                try:\n","                  if config.tr_set.decay_gap != \"None\":\n","                    decay_share = (j - initial_i) // config.tp_set.decay_term\n","                    decay_remain = (j - initial_i) % config.tp_set.decay_term\n","                    if j != initial_i and decay_remain == 0:\n","                      short_tp_.iloc[tp_j] += res_df['h_short_rtc_gap_{}'.format(strat_version)].iloc[initial_i] * config.tr_set.decay_gap * decay_share\n","                \n","                except:\n","                  pass\n","\n","                if res_df['low'].iloc[j] <= short_tp_.iloc[tp_j] and partial_tp_cnt == s_i: # we use static tp now\n","                # if res_df['low'].iloc[j] <= short_tp_.iloc[j]:\n","                # if res_df['low'].iloc[j] <= short_tp_.iloc[j] <= res_df['high'].iloc[j]: --> Ïù¥Í±¥ ÏûòÎ™ªÎêòÏóàÏùå\n","\n","                  if s_i == len(short_tps) - 1:\n","                    trade_done = 1\n","                  \n","                  partial_tp_cnt += 1\n","\n","                  #         dynamic tp        #\n","                  # if 0:\n","                  if short_tp_.iloc[j] != short_tp_.iloc[j - 1] and not config.tp_set.static_tp:\n","\n","                    #   tp limit Ïù¥ Î∂àÍ∞ÄÌïú Í≤ΩÏö∞ = open Ïù¥ Ïù¥ÎØ∏, tp Î•º ÎÑòÏùÄ Í≤ΩÏö∞ # \n","                    # if res_df['open'].iloc[j] < short_tp_.iloc[initial_i]:\n","                    if res_df['open'].iloc[j] < short_tp_.iloc[j]:\n","\n","                      # tp = short_tp_.iloc[initial_i]\n","                      tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"d-short_open {}\".format(strat_version))\n","\n","                    #   tp limit Ïù¥ Í∞ÄÎä•Ìïú Í≤ΩÏö∞ = open Ïù¥ ÏïÑÏßÅ, tp Î•º ÎÑòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ # \n","                    else:\n","\n","                      # tp = short_tp_.iloc[initial_i]\n","                      tp = short_tp_.iloc[j]\n","                      # tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"d-short_tp {}\".format(strat_version))\n","\n","                  #         static tp         #\n","                  else:\n","                    \n","                    #   tp limit Ïù¥ Î∂àÍ∞ÄÌïú Í≤ΩÏö∞ = open Ïù¥ Ïù¥ÎØ∏, tp Î•º ÎÑòÏùÄ Í≤ΩÏö∞ # \n","                    #   non_inversion Ïùò Í≤ΩÏö∞, short_tp Í∞Ä Í∞ÄÎä•Ìï®   #              \n","\n","                    # if res_df['open'].iloc[j] < short_tp_.iloc[initial_i]:\n","                    if res_df['open'].iloc[j] < short_tp_.iloc[tp_j]:\n","\n","                      # tp = short_tp_.iloc[initial_i]\n","\n","                      if config.tr_set.decay_gap != \"None\" and decay_remain == 0:\n","                        tp = res_df['open'].iloc[j]  # tp_j -> initial_i Î•º Í∞ÄÎ¶¨ÌÇ§Í∏∞ ÎïåÎ¨∏Ïóê decay Îäî ÌïúÎ≤àÎßå ÏßÑÌñâÎêòÎäîÍ≤å ÎßûÏùå\n","                      else:\n","                        tp = short_tp_.iloc[tp_j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"s-short_tp {}\".format(strat_version))\n","\n","                    #   tp limit Ïù¥ Í∞ÄÎä•Ìïú Í≤ΩÏö∞ = open Ïù¥ ÏïÑÏßÅ, tp Î•º ÎÑòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ # \n","                    else:\n","\n","                      # tp = short_tp_.iloc[initial_i]\n","                      tp = short_tp_.iloc[tp_j]\n","\n","                      # tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"s-short_tp {}\".format(strat_version))   \n","\n","                  tp_list.append(tp)     \n","                  tp_idx_list.append(j)\n","                  fee += config.trader_set.limit_fee\n","\n","\n","            #           2. by signal        #\n","            if config.tp_set.tp_type == 'MARKET' or (config.tp_set.tp_type == \"BOTH\" and not trade_done):\n","\n","              market_tp = 0\n","\n","              # -------------- sar tp -------------- #\n","              # if (res_df['high'].iloc[j] >= res_df['sar2'].iloc[j]) & \\\n","              #   (res_df['high'].iloc[j - 1] < res_df['sar2'].iloc[j - 1]) & \\\n","              #   (res_df['high'].iloc[j - 2] < res_df['sar2'].iloc[j - 2]):\n","\n","              #       inversion     #\n","              # if (res_df['low'].iloc[j] <= res_df['sar2'].iloc[j]) & \\\n","              #   (res_df['low'].iloc[j - 1] > res_df['sar2'].iloc[j - 1]) & \\\n","              #   (res_df['low'].iloc[j - 2] > res_df['sar2'].iloc[j - 2]):\n","              \n","              # ----------- st short ----------- #\n","              # if res_df['close'].iloc[j] <= res_df['short_tp'].iloc[tp_j]:\n","              \n","              # -------------- sar pb tp -------------- #\n","              # if res_df['low'].iloc[j] <= res_df['short_tp'].iloc[initial_i]:\n","\n","              # -------------- st tp -------------- #\n","              # if res_df['close'].iloc[j] > res_df['middle_line'].iloc[j]:       \n","\n","              # -------------- fisher tp -------------- #            \n","              # if entry[j] == 1:\n","              \n","              # -------------- timestamp -------------- #\n","              if config.tp_set.time_tp:\n","                if np_timeidx[j] % config.loc_set.zone.c_itv_ticks == config.loc_set.zone.c_itv_ticks - 1 and \\\n","                  j - initial_i >= config.loc_set.zone.c_itv_ticks:\n","                  market_tp = 1     \n","\n","              # -------------- rsi -------------- #\n","              if strat_version in rsi_out_stratver:\n","                if (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j - 1] >= 50 - config.loc_set.point.osc_band) & \\\n","                                (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j] < 50 - config.loc_set.point.osc_band):   \n","                # if (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j - 1] <= 50 - config.loc_set.point.osc_band) & \\\n","                #                  (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j] > 50 - config.loc_set.point.osc_band):                            \n","                  market_tp = 1\n","\n","                # -------------- cci -------------- #\n","                # if (res_df['cci_%s' % config.loc_set.point.exp_itv].iloc[j - 1] >= -config.loc_set.point.osc_band) & \\\n","                #                  (res_df['cci_%s' % config.loc_set.point.exp_itv].iloc[j] < -config.loc_set.point.osc_band):                            \n","                #   market_tp = 1 \n","\n","              # ---------------------------- early out ---------------------------- #\n","\n","              # #         rsi slight touch        #\n","              if allow_osc_touch:\n","                if (np.min(res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[initial_i:j]) < 50 - config.loc_set.point.osc_band + rsi_gap) & \\\n","                  (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j] >= 50):\n","                  market_tp = 1              \n","                           \n","              #           tp early out          #\n","              # # if (np.min(res_df['low'].iloc[e_j:j]) < res_df['short_tp'].iloc[tp_j]) & \\\n","              # if (np.min(res_df['low'].iloc[e_j:j]) < res_df['h_short_rtc_1'].iloc[tp_j] - res_df['h_short_rtc_gap'].iloc[tp_j] * early_out_tpg) & \\\n","              #   (res_df['close'].iloc[j] >= res_df['short_ep'].iloc[ep_j]):\n","              #   market_tp = 1 \n","\n","              # if strat_version == \"v7\":\n","              #   if res_df['dc_upper_1m'].iloc[j] > res_df['dc_upper_5m'].iloc[j]:\n","              #     market_tp = 1\n","\n","              #         bb_upper early out        # --> cross_on Í∏∞Îä•ÏùÄ ide latency Í∞úÏÑ† Ïó¨Î∂ÄÏóê Ìï¥ÎãπÎêòÏßÄ ÏïäÏùå\n","              if strat_version in ['v5_2']:\n","                if res_df['close'].iloc[j] < res_df['bb_lower_5m'].iloc[j] < res_df['close'].iloc[j - 1]:\n","                  cross_on = 1\n","\n","                if cross_on == 1 and res_df['close'].iloc[j] > res_df['bb_upper_5m'].iloc[j] > res_df['close'].iloc[j - 1]:\n","                  market_tp = 1\n","\n","              if market_tp:\n","                \n","                tp = res_df['close'].iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                trade_done = 1\n","\n","                if trade_done:\n","                  tp_state_list.append(\"short close tp\")\n","\n","                tp_list.append(tp) \n","                tp_idx_list.append(j)\n","                fee += config.trader_set.market_fee\n","\n","\n","                  \n","          # -------------- out -------------- #\n","          if not trade_done and config.out_set.use_out and j != len(res_df) - 1:\n","\n","            # -------------- macd -------------- #\n","            # if res_df['macd_hist3'].iloc[j] > 0:  #  macd out\n","            # if res_df['macd_hist3'].iloc[i] < 0 and res_df['macd_hist3'].iloc[j] > 0:\n","\n","            # -------------- st config.out_set.retouch -------------- #\n","            # out = 1 ÏÉÅÌÉúÎ©¥ ÎèôÏùº tick ÏóêÏÑú config.out_set.retouch Î•º Ï°∞ÏÇ¨Ìï† Í±∞Í∏∞ ÎïåÎ¨∏Ïóê, Î®ºÏ†Ä Í≤ÄÏÇ¨Ìï®\n","            # Í∑∏Î¶¨Í≥†, out Í∏∞Ï§ÄÏù¥ close Îùº Ïù¥Í≤å ÎßûÏùå \n","            # close Í∞Ä short_out Î≥¥Îã§ Ïò¨ÎùºÍ∞ÄÏûàÎäî ÏÉÅÌÉúÏùºÌÖåÎãà low Î•º Ï°∞ÏÇ¨ÌïòÎäîÍ≤å ÎßûÏùå           \n","            # if out and res_df['low'].iloc[j] <= short_out.iloc[out_j]:\n","            #   config.out_set.retouch = 1\n","\n","            \n","             # ------- ÏùºÏ†ïÏãúÍ∞Ñ Ïù¥ÏÉÅ, dynamic_out Ï†ÅÏö© ------ #\n","            try:\n","              if j - out_idx >= config.out_set.retouch_out_period:\n","                static_short_out = res_df['short_out_{}'.format(strat_version)].iloc[j]\n","            \n","            except Exception as e:\n","              pass\n","\n","              # ------- static out ------ #\n","            try:\n","              if out and res_df['low'].iloc[j] <= static_short_out:\n","                config.out_set.retouch = 1\n","            except Exception as e:\n","              pass\n","\n","            \n","              # ------- config.out_set.retouch out ------ #\n","            # if out and res_df['low'].iloc[j] <= short_out2.iloc[out_j]:\n","            #   config.out_set.retouch = 1\n","\n","\n","            # -------------- st -------------- #\n","            # if res_df['close'].iloc[j] > res_df['middle_line'].iloc[j]:    \n","            # if res_df['close'].iloc[j] > res_df['minor_ST3_Up'].iloc[j]:\n","            # if res_df['close'].iloc[j] > upper_middle.iloc[j]:\n","            # if res_df['close'].iloc[j] > res_df['minor_ST1_Up'].iloc[j]:\n","            if out == 0:              \n","              if config.out_set.hl_out:\n","                if res_df['high'].iloc[j] >= res_df['short_out_{}'.format(strat_version)].iloc[out_j]: # check out only once\n","                  out = 1\n","\n","              else:\n","                if res_df['close'].iloc[j] >= res_df['short_out_{}'.format(strat_version)].iloc[out_j]: # check out only once\n","                  out = 1\n","\n","              # out_idx = j\n","              # static_short_out = short_out.iloc[out_j]\n","              # if config.out_set.second_out:              \n","                # static_short_out = short_out.iloc[out_j] + res_df['st_gap'].iloc[out_j] * config.out_set.second_out_gap\n","            \n","            # if out == 0 and res_df['high'].iloc[j] >= short_out.iloc[out_j]: # check out only once\n","            #   out = 1\n","             \n","\n","            # -------------- sma -------------- #\n","            # if res_df['close'].iloc[j] > res_df[sma].iloc[j]:\n","\n","            # -------------- sar -------------- #\n","            # if res_df['close'].iloc[j] > res_df['minor_ST3_Up'].iloc[j] \\\n","            #   or res_df['sar2'].iloc[j] <= res_df['high'].iloc[j]:\n","            # if res_df['close'].iloc[j] > short_out.iloc[initial_i]: # or \\\n","            #   out = 1\n","              # res_df['sar2_uptrend'].iloc[j] == 1: # or \\\n","\n","            # if res_df['sar2_uptrend'].iloc[j] == 1:\n","\n","            #   if prev_sar is None:\n","            #     prev_sar = res_df['sar2'].iloc[j - 1]\n","              \n","            #   if res_df['close'].iloc[j] > prev_sar:\n","            #     out = 1\n","\n","            # else:\n","            #   if res_df['close'].iloc[j] > res_df['sar2'].iloc[j]:\n","            #     out = 1\n","              \n","            # -------------- hl -------------- #\n","            # if res_df['close'].iloc[j] > short_out.iloc[tp_j]:\n","            \n","            # -------------- stoch -------------- #\n","            # if res_df['stoch'].iloc[j - 2] >= res_df['stoch'].iloc[j - 1] and \\\n","            #   res_df['stoch'].iloc[j - 1] < res_df['stoch'].iloc[j] and \\\n","            #   res_df['stoch'].iloc[j - 1] <= stoch_lower:\n","            #   out = 1\n","\n","            # config.out_set.retouch 1 Í≤ΩÏö∞, config.out_set.retouch Ï°∞Í±¥ÎèÑ ÏûàÏñ¥ÏïºÌï®\n","            if out:\n","              if config.out_set.retouch:\n","                if config.out_set.retouch:\n","                  pass\n","                else:\n","                    continue\n","\n","              else:\n","                pass\n","\n","              if config.out_set.price_restoration:\n","                tp = res_df['short_out_{}'.format(strat_version)].iloc[out_j]\n","                if config.out_set.second_out:\n","                  tp = res_df['short_out2_{}'.format(strat_version)].iloc[out_j]\n","                \n","                # if res_df['close'].iloc[j] > tp: # Ïù¥ Í≤ΩÏö∞Î•º protect ÌïòÎäîÍ±¥ insane ÏûÑ\n","                #   tp = res_df['close'].iloc[j]\n","\n","              else:\n","                \n","                if res_df['open'].iloc[j] >= res_df['short_out_{}'.format(strat_version)].iloc[out_j]:\n","                  tp = res_df['open'].iloc[j]\n","                else:\n","                  if config.out_set.hl_out:\n","                    tp = res_df['short_out_{}'.format(strat_version)].iloc[out_j]\n","                  else:\n","                    tp = res_df['close'].iloc[j]\n","                \n","                # if not config.out_set.static_out:\n","                #   if res_df['open'].iloc[j] >= res_df['short_out_{}'.format(strat_version)].iloc[out_j]: # close Í∏∞Ï§ÄÏù¥Îùº Ïù¥Îü∞ Ï°∞Í±¥ÏùÑ Î™ªÏîÄ, Ï∞®ÎùºÎ¶¨ j Î•º i Î∂ÄÌÑ∞ ÏãúÏûë\n","                #     tp = res_df['open'].iloc[j]\n","                #   else:\n","                #     tp = res_df['close'].iloc[j]\n","\n","                # else:\n","                #   tp = res_df['close'].iloc[j]\n","\n","              \n","              if config.out_set.retouch: # out Í≥º open ÎπÑÍµê\n","                if config.out_set.second_out:\n","                  if res_df['open'].iloc[j] <= res_df['short_out2_{}'.format(strat_version)].iloc[out_j]:\n","                    tp = res_df['open'].iloc[j]\n","                else:\n","                  if res_df['open'].iloc[j] <= res_df['short_out_{}'.format(strat_version)].iloc[out_j]:\n","                    tp = res_df['open'].iloc[j]\n","\n","                try: # static_short_out Ïù∏ Í≤ΩÏö∞, open ÎèÑ Í≥†Î†§Ìïú tp set\n","                  if res_df['open'].iloc[j] <= static_short_out:\n","                    tp = res_df['open'].iloc[j]\n","                  else:\n","                    tp = static_short_out\n","                except Exception as e:\n","                  pass\n","\n","              trade_done = 1\n","              tp_state_list.append(\"short close_out {}\".format(strat_version))\n","            \n","\n","              tp_list.append(tp) \n","              tp_idx_list.append(j)\n","              fee += config.trader_set.market_fee\n","\n","\n","          # -------------- non tp -------------- #\n","          if j == len(res_df) - 1:\n","            trade_done = 1\n","            tp = res_df['close'].iloc[j]\n","            tp_list.append(tp) \n","            tp_idx_list.append(j)\n","            fee += config.trader_set.market_fee\n","          \n","\n","\n","          # -------------- append trade data -------------- #\n","          if trade_done:\n","\n","            # --------------- tp_ratio info --------------- #\n","            #         Todo        #\n","            #          short_out Ïóê ÎåÄÌïú Ï†ïÎ≥¥Îäî Ï°¥Ïû¨Ìï®,\n","            #          short_tp Ïóê ÎåÄÌïú Ï†ïÎ≥¥Îäî Ï°¥Ïû¨Ìï®,\n","            #       => initial_i Í∏∞Ï§ÄÏúºÎ°ú ,dynamic | static set ÏùÑ tp ÏôÄ out Ïóê Í∞ÅÍ∞Å Ï†ÅÏö©\n","            #          config.lvrg_set.leverage Îäî initial_i Í∏∞Ï§ÄÏúºÎ°ú Ï†ÅÏö©ÎêòÎãàÍπå\n","            #          Ï†ÅÏö©Îêú tp & out ÏúºÎ°ú abs((tp - ep) / (ep - out)) Í≥ÑÏÇ∞\n","            try:\n","              if config.out_set.use_out:\n","                done_tp = res_df['short_tp_{}'.format(strat_version)].iloc[tp_j]\n","                done_out = res_df['short_out_{}'.format(strat_version)].iloc[out_j]\n","\n","                if done_out <= ep_list[0]: # loss > 1\n","                  dr = np.nan\n","                  tp_ratio = np.nan\n","                else:                \n","                  dr = ((ep_list[0] - done_tp) / (done_out - ep_list[0]))\n","                  tp_ratio = ((ep_list[0] - done_tp - tp_fee * ep_list[0]) / (done_out - ep_list[0] + out_fee * ep_list[0]))\n","                \n","              else:\n","                dr = np.nan\n","                tp_ratio = np.nan  \n","\n","\n","            except Exception as e:\n","              dr = np.nan \n","              tp_ratio = np.nan  \n","            \n","            tp_ratio_list.append(tp_ratio)\n","            short_tp_ratio_list.append(tp_ratio)     \n","            dr_list.append(dr)\n","            short_dr_list.append(dr)\n","\n","\n","            # -------------------- partial tp -------------------- #\n","            #        1. len(tp_list) Ïóê ÎåÄÏùëÌïòÎäî qty_list Î•º ÎßåÎì§Ïñ¥ÏïºÌï®    #\n","            #        2. temp_pr_list Î•º ÎßåÎì§Ïñ¥ Ï¥ùÌï© + 1 ÏùÑ pr_list Ïóê Ï†ÄÏû•      #\n","            #        2-1. temp_pr = sum((ep / tp_list[i] - fee - 1) * qty_list[i])   #\n","            #        3. temp_pr_list Ïùò Ï≤´ tp ÏóêÎäî r_qty Î•º Ìï†ÎãπÌï®        #\n","            qty_list = []\n","            temp_pr_list = []\n","            r_qty = 1\n","            for q_i in range(len(tp_list) - 1, -1, -1):\n","\n","              if len(tp_list) == 1:\n","                temp_qty = r_qty\n","              else:\n","                if q_i !=0:\n","                  temp_qty = r_qty / config.tp_set.partial_qty_divider\n","                else:\n","                  temp_qty = r_qty\n","\n","              temp_pr = (ep_list[0] / tp_list[q_i] - fee - 1) * temp_qty * config.lvrg_set.leverage\n","              # temp_pr = (ep_list[0] / tp_list[q_i] - fee - 1) * temp_qty\n","              r_qty -= temp_qty\n","\n","              temp_pr_list.append(temp_pr)\n","              qty_list.append(temp_qty)\n","\n","            # if len(temp_pr_list) == 1:\n","            #   print(\"qty_list :\", qty_list)\n","            #   print(\"temp_pr_list :\", temp_pr_list)\n","\n","            temp_pr = sum(temp_pr_list) + 1\n","\n","            # -------------------- sub ep -> pr calc -------------------- #\n","            if len(ep_list) > 1:\n","            \n","              p_ep_pr = []\n","              for sub_ep_ in ep_list:\n","                sub_pr = (sub_ep_ / tp - fee - 1) * config.lvrg_set.leverage\n","                p_ep_pr.append(sub_pr)\n","\n","              temp_pr = sum(p_ep_pr) + 1\n","\n","              print(\"temp_pr :\", temp_pr)\n","\n","            # ------------ hedge + non_hedge pr summation ------------ #\n","            #         hedge pr direction is opposite to the origin       #\n","            hedge_pr = 1\n","            if hedge_cnt == 0:\n","\n","              #       hedge tp      #\n","              h_tp = res_df['close'].iloc[j]\n","              hedge_pr = (h_tp / h_ep - fee - 1) * config.lvrg_set.leverage  # hedge long\n","              temp_pr += hedge_pr\n","              h_j = j\n","\n","            \n","            # hh = max(res_df['high'].iloc[i:j + 1])\n","            hh = max(res_df['high'].iloc[i:j])    # pos. Ï†ïÎ¶¨ÌïòÍ∏∞ Î∞îÎ°ú ÏßÅÏ†ÑÍπåÏßÄ\n","            short_liq = (ep_list[0] / hh - fee - 1) * config.lvrg_set.leverage + 1\n","\n","            if j != len(res_df) - 1:\n","\n","              # ep_tp_list.append((ep, tp_list))  \n","              ep_tp_list.append((ep_list, tp_list))  \n","              # trade_list.append([initial_i, i, j])\n","              # trade_list.append((ep_idx_list, tp_idx_list))\n","              trade_list.append((ep_idx_list, out_idx_list, tp_idx_list))\n","\n","              liqd_list.append(short_liq)\n","              short_liqd_list.append(short_liq)\n","\n","              h_ep_tp_list.append((h_ep, h_tp))      # hedge ÎèÑ ep_tp_list Ï≤òÎüº Î≥ÄÍ≤ΩÌï¥Ï£ºÏñ¥ÏïºÌïòÎäîÎç∞ ÏïÑÏßÅ ÏïàÍ±¥ÎìúÎ¶º, Îî±Ìûà ÏÇ¨Ïö©Ìï† ÏùºÏù¥ ÏóÜÏñ¥Î≥¥Ïó¨   \n","              h_trade_list.append([initial_i, h_i, h_j])                \n","\n","              pr_list.append(temp_pr)\n","              fee_list.append(fee)\n","              short_list.append(temp_pr)\n","              short_fee_list.append(fee)\n","\n","              h_pr_list.append(hedge_pr)\n","              h_short_list.append(hedge_pr)\n","\n","              i = j\n","              break\n","\n","            else:\n","\n","              # ep_tp_list.append((ep_list, tp_list))\n","              # trade_list.append((ep_idx_list, tp_idx_list))\n","              # plot_check ÎïåÎ¨∏Ïóê, pr_list ÍπåÏßÄ ÌïòÍ≤åÎêòÎ©¥ acc_pr eval Ïù¥ Íº¨Ïù¥Í≤åÎåê\n","          \n","              # pr_list Î•º ÎÑ£ÏßÄ ÏïäÏùÑÍ±∞ÎãàÍπå, open_list ÏóêÏÑú Ìï¥Îãπ idx Îäî pop\n","              open_list.pop()\n","              zone_list.pop()\n","              side_list.pop()\n","              strat_ver_list.pop()\n","              \n","              #         tp ÎØ∏Ï≤¥Í≤∞ survey        #\n","              nontp_liqd_list.append(short_liq)\n","              nontp_short_liqd_list.append(short_liq)\n","              nontp_short_indexs.append(i)\n","              nontp_short_ep_list.append(ep_list[0])\n","\n","              nontp_short_pr = (ep_list[0] / tp - fee - 1) * config.lvrg_set.leverage + 1\n","              nontp_pr_list.append(nontp_short_pr)\n","              nontp_short_pr_list.append(nontp_short_pr)\n","\n","\n","      #                  long  phase                #\n","      elif run == 1:\n","      \n","        #     Ïù¥Í≥≥ÏóêÏÑú ÏÇ¨Ïö©Îê† config Í∞Ä Ï†ïÌï¥Ïßê    #\n","        if res_df['entry_{}'.format(config1.strat_version)][i] == -config1.ep_set.short_entry_score:\n","          config = config1\n","        else:\n","          config = config2\n","\n","        # print(\"config = config1 phase passed !\")\n","\n","        initial_i = i\n","\n","\n","        if override:\n","          res_df, open_side, zone = long_ep_loc(res_df, config, i, np_timeidx, show_detail)\n","        else:          \n","          # print(\"long_ep_loc phase\")\n","\n","          res_df, open_side, zone = utils_public.long_ep_loc(res_df, config, i, np_timeidx, show_detail)\n","          if multi_mode:\n","            if config.strat_version == 'v5_2' and open_side is None:\n","              res_df, open_side, zone = utils_public.long_ep_loc(res_df, config3, i, np_timeidx, show_detail)\n","\n","              if open_side is not None: \n","                config = config3\n","\n","\n","        # -------------- mr_score summation -------------- #\n","        if open_side is not None:        \n","          pass\n","        \n","        else:\n","          i += 1\n","          if i >= len(res_df):\n","            break\n","          continue\n","\n","        # print(\"long_ep_loc passed !\")\n","\n","        strat_version = config.strat_version\n","\n","        # ------- fee init ------- #\n","        if config.ep_set.entry_type == 'LIMIT':\n","          fee = config.trader_set.limit_fee\n","        else:\n","          fee = config.trader_set.market_fee\n","        \n","        # --------------- set partial tp --------------- #\n","        short_tps = [res_df['short_tp_{}'.format(strat_version)]]\n","        long_tps = [res_df['long_tp_{}'.format(strat_version)]]\n","\n","        # short_tps = [short_tp2, short_tp] # org\n","        # long_tps = [long_tp2, long_tp]\n","        \n","        # short_tps = [short_tp, short_tp2]\n","        # long_tps = [long_tp, long_tp2]\n","        # print(\"i after long_ep_loc :\", i)\n","\n","        if config.out_set.static_out:\n","          p_i = initial_i\n","        else:\n","          p_i = i\n","\n","        ep_j = initial_i\n","        out_j = initial_i\n","      \n","        # -------------- limit waiting const. -------------- #      \n","        if config.ep_set.entry_type == \"LIMIT\":\n","\n","          allow_ep_in = 0 if strat_version in ['v5_2'] else 1\n","          # allow_ep_in = 1\n","          entry_done = 0\n","          entry_open = 0\n","          prev_sar = None\n","\n","          # for e_j in range(i, len(res_df)):   \n","\n","          if i + 1 >= len(res_df):  # i should be checked if e_j starts from i+1\n","            break\n","          for e_j in range(i + 1, len(res_df)):  # entry Í∞Ä close Í∏∞Ï§ÄÏùº Í≤ΩÏö∞ ÏÇ¨Ïö© (open Í∏∞Ï§ÄÏùº Í≤ΩÏö∞ i Î∂ÄÌÑ∞ ÏãúÏûëÌï¥ÎèÑ Î¨¥Î∞©Ìï®)\n","            \n","            if not config.ep_set.static_ep:\n","              ep_j = e_j  \n","              out_j = e_j\n","            \n","            if config.tp_set.static_tp:\n","              # if config.ep_set.tpout_onexec:\n","              #   tp_j = e_j\n","              # else:\n","                tp_j = initial_i\n","            else:\n","              tp_j = e_j  \n","\n","            \n","            #          np.inf ep         #\n","            # if long_ep.iloc[initial_i] == np.inf:\n","            #   break\n","            \n","            #     1. check ep_out     #\n","            if res_df['high'].iloc[e_j] >= res_df['h_long_rtc_1_{}'.format(strat_version)].iloc[tp_j] + \\\n","              res_df['h_long_rtc_gap_{}'.format(strat_version)].iloc[tp_j] * config.loc_set.zone.ei_k:\n","            # if res_df['high'].iloc[e_j] >= res_df['long_tp_{}'.format(strat_version)].iloc[tp_j]:                \n","            # if np_timeidx[e_j] % config.loc_set.point.tf_entry == config.loc_set.point.tf_entry - 1:\n","              break\n","\n","              # elif (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[e_j - 1] <= 50 + config.loc_set.point.osc_band) & \\\n","              #                  (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[e_j] > 50 + config.loc_set.point.osc_band):\n","              #   break            \n","\n","            # if config.loc_set.zone.c_itv_ticks != \"None\":\n","\n","            #   if np_timeidx[e_j] % config.loc_set.zone.c_itv_ticks == config.loc_set.zone.c_itv_ticks - 1:\n","            #     break\n","\n","            #     2. ep_loc.point2\n","            if strat_version =='v5_2' and allow_ep_in == 0:\n","              if (res_df['dc_lower_1m'].iloc[e_j - 1] >= res_df['dc_lower_15m'].iloc[e_j]) & \\\n","                  (res_df['dc_lower_15m'].iloc[e_j - 1] != res_df['dc_lower_15m'].iloc[e_j]): # & \\\n","              # if (res_df['dc_lower_1m'].iloc[e_j - 1] >= res_df['dc_lower_5m'].iloc[e_j]) & \\\n","              #     (res_df['dc_lower_5m'].iloc[e_j - 1] != res_df['dc_lower_5m'].iloc[e_j]): # & \\\n","                  # (res_df['dc_lower_15m'].iloc[e_j] >= res_df['ema_5m'].iloc[e_j]):\n","                allow_ep_in = 1\n","                out_j = e_j\n","                # ep_j = e_j\n","                # continue  # limit entry Ïùò Í≤ΩÏö∞ ep_loc.point2 ÏôÑÎ£å ÏãúÏ†ê Ïù¥ÌõÑÎ°ú ÏßÑÏûÖÏù¥ Í∞ÄÎä•Ìïú Ï†ê\n","                #     htf indi. Í∞Ä backi2 Í∏∞Ï§ÄÏù¥Îùº continue ÌïòÏßÄ ÏïäÏïÑÎèÑ Îê®\n","              \n","              #     2-1. ep_out (ep_loc2) by ep_loc.point\n","              # if allow_ep_in and config.loc_set.zone.tr_thresh != \"None\":\n","              #   ep_ = res_df['close'].iloc[ep_j - 1]\n","              #   tr = ((res_df['long_tp_{}'.format(strat_version)].iloc[tp_j] - ep_ - tp_fee * ep_) / (ep_ - res_df['long_out_{}'.format(strat_version)].iloc[out_j] + out_fee * ep_))\n","              #   # print(\"tr in long :\", tr)\n","              #   if tr < config.loc_set.zone.tr_thresh:\n","              #     break\n","\n","            #     3. check ep_in      #\n","            if allow_ep_in and res_df['low'].iloc[e_j] <= res_df['long_ep_{}'.format(strat_version)].iloc[ep_j]:\n","              entry_done = 1\n","              # print(\"e_j :\", e_j)\n","              \n","              #     Ïù¥ÎØ∏, e_j open Ïù¥ ep Î≥¥Îã§ ÎÇÆÏùÄ Í≤ΩÏö∞, entry[initial_i] => -2 Î°ú Î≥ÄÍ≤Ω   #\n","              if res_df['open'].iloc[e_j] <= res_df['long_ep_{}'.format(strat_version)].iloc[ep_j]:\n","                entry_open = 1\n","\n","              break\n","\n","\n","          i = e_j\n","          # print(\"i = e_j :\", i)\n","\n","          if entry_done:      \n","            pass\n","            # print(\"i, entry_done :\", i, entry_done)\n","\n","          else:\n","            i += 1\n","            if i >= len(res_df):\n","              # print(\"i :\", i)\n","              break\n","\n","            # print(\"i in continue :\", i)          \n","            continue\n","\n","\n","        # ---------------- end wait ---------------- #\n","        # if e_j - initial_i >= 200:\n","        #   print(\"e_j, initial_i :\", e_j, initial_i)\n","        \n","        # print(i)\n","\n","        open_list.append(initial_i)\n","        zone_list.append(zone)\n","        side_list.append('l')\n","        strat_ver_list.append(strat_version)\n","\n","        if config.ep_set.entry_type == 'MARKET':\n","          ep_list = [res_df['close'].iloc[ep_j]]\n","        else:\n","          if not entry_open:\n","            ep_list = [res_df['long_ep_{}'.format(strat_version)].iloc[ep_j]]    # dynamic_ep Ïù∏ Í≤ΩÏö∞ÏóêÎèÑ e_j Í∞Ä ep_j Î°ú ÎåÄÏùëÎêòÍ∏∞ ÎïåÎ¨∏Ïóê ep_j Îßå ÏÇ¨Ïö©Ìï¥ÎèÑ Î¨¥Í¥Ä\n","          else:\n","            # try:\n","            #   ep_list = [res_df['open'].iloc[e_j]]\n","            # except Exception as e:\n","            fee = config.trader_set.market_fee\n","            ep_list = [res_df['open'].iloc[e_j]]  # --> Ï≤¥Í≤∞Ïù¥ ÎêòÎäî e_j idx Í∏∞Ï§ÄÏúºÎ°ú ÌïòÎäîÍ≤å ÎßûÏùå\n","\n","        if not config.lvrg_set.static_lvrg:\n","\n","          ep_ = ep_list[0]\n","          out_ = res_df['long_out_{}'.format(strat_version)].iloc[out_j]\n","          if override:\n","            config.lvrg_set.leverage = lvrg_set(res_df, config, \"BUY\", ep_, out_, fee)\n","          else:\n","            config.lvrg_set.leverage = utils_public.lvrg_set(res_df, config, \"BUY\", ep_, out_, fee)\n","\n","          # -------------- leverage rejection -------------- #\n","          if config.lvrg_set.leverage == None:\n","            open_list.pop()\n","            zone_list.pop()\n","            side_list.pop()\n","            strat_ver_list.pop()\n","\n","            i += 1\n","            if i >= len(res_df):\n","              break\n","            continue   \n","\n","        leverage_list.append(config.lvrg_set.leverage)\n","          \n","        if config.ep_set.entry_type == \"MARKET\":\n","          ep_idx_list = [ep_j]\n","        else:\n","          ep_idx_list = [e_j]\n","\n","        out_idx_list = [out_j]\n","\n","        tp_list = []\n","        tp_idx_list = []\n","\n","        partial_tp_cnt = 0\n","        hedge_cnt = 1\n","\n","        h_ep, h_tp = None, None        \n","        h_i, h_j = None, None      \n","\n","        trade_done = 0\n","        cross_on = 0\n","        out = 0          \n","        config.out_set.retouch = 0\n","\n","\n","        if i == len(res_df) - 1: # if j start from i + 1 \n","          open_list.pop()\n","          zone_list.pop()\n","          side_list.pop()\n","          strat_ver_list.pop()\n","\n","        for j in range(i + 1, len(res_df)):\n","\n","        # for j in range(i, len(res_df)):  \n","          \n","          if config.tp_set.static_tp:\n","            if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","              tp_j = ep_j\n","            else:\n","              tp_j = initial_i\n","          else:\n","            tp_j = j\n","\n","          if config.out_set.static_out:\n","            if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","              out_j = ep_j\n","            # else:           \n","            #   out_j = initial_i\n","          else:\n","            out_j = j   \n","\n","          # -------------- hedge only once -------------- #\n","          #             ÏùºÎã®, h_quantity Îäî Ï¥àÍ∏∞ ÏßÑÏûÖÍ≥º ÎèôÏùºÌïòÍ≤å ÏÑ§Ï†ï         #\n","          # if res_df['low'].iloc[j] <= res_df['minor_ST2_Down'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] <= res_df['minor_ST2_Down'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] <= res_df['minor_ST3_Down'].iloc[j] and hedge_cnt == 1:\n","\n","          #   h_ep = res_df['close'].iloc[j]\n","          #   hedge_cnt -= 1\n","          #   h_i = j\n","\n","          # -------------- sub ep -------------- #\n","          # if res_df['low'].iloc[j - 1] >= res_df['sar2'].iloc[j - 1] and res_df['low'].iloc[j] < res_df['sar2'].iloc[j]:\n","            \n","          #   sub_ep = res_df['sar2'].iloc[j - 1]\n","\n","          #   if sub_ep > ep_list[-1]:\n","          #     ep_list.append(sub_ep)\n","          #     ep_idx_list.append(j)\n","\n","\n","          # -------------- ultimate tp -------------- #\n","          if not config.tp_set.non_tp:\n","            #            1. by level          #\n","            if config.tp_set.tp_type == \"LIMIT\" or config.tp_set.tp_type == \"BOTH\":\n","              \n","\n","              for l_i, long_tp_ in enumerate(long_tps):\n","              \n","                #     decay adjustment    #\n","                #     tp_j includes dynamic_j   #\n","                try:\n","                  if config.tr_set.decay_gap != \"None\":\n","                    decay_share = (j - initial_i) // config.tp_set.decay_term\n","                    decay_remain = (j - initial_i) % config.tp_set.decay_term\n","                    if j != initial_i and decay_remain == 0:\n","                      long_tp_.iloc[tp_j] -= res_df['h_long_rtc_gap_{}'.format(strat_version)].iloc[initial_i] * config.tr_set.decay_gap * decay_share\n","                \n","                except:\n","                  pass\n","\n","\n","                if res_df['high'].iloc[j] >= long_tp_.iloc[tp_j] and partial_tp_cnt == l_i:\n","                # if res_df['high'].iloc[j] >= long_tp.iloc[j]:\n","\n","                  if l_i == len(long_tps) - 1:\n","                    trade_done = 1\n","\n","                  partial_tp_cnt += 1\n","\n","                  #         dynamic tp        #\n","                  # if 0:\n","                  if long_tp_.iloc[j] != long_tp_.iloc[j - 1] and not config.tp_set.static_tp:\n","\n","                    #   tp limit Ïù¥ Î∂àÍ∞ÄÌïú Í≤ΩÏö∞ = open Ïù¥ Ïù¥ÎØ∏, tp Î•º ÎÑòÏùÄ Í≤ΩÏö∞ # \n","                    # if res_df['open'].iloc[j] >= long_tp_.iloc[initial_i]:\n","                    if res_df['open'].iloc[j] >= long_tp_.iloc[j]:\n","\n","                      # tp = long_tp_.iloc[initial_i]\n","                      tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"d-long_open {}\".format(strat_version))\n","\n","                    \n","                    #   tp limit Ïù¥ Í∞ÄÎä•Ìïú Í≤ΩÏö∞ = open Ïù¥ ÏïÑÏßÅ, tp Î•º ÎÑòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ # \n","                    else:\n","                      \n","                      # tp = long_tp_.iloc[initial_i]\n","                      tp = long_tp_.iloc[j]\n","                      # tp = res_df['open'].iloc[j]\n","                      \n","                      if trade_done:\n","                        tp_state_list.append(\"d-long_tp {}\".format(strat_version))\n","\n","                  #         static tp         #\n","                  else:\n","\n","                    #   tp limit Ïù¥ Î∂àÍ∞ÄÌïú Í≤ΩÏö∞ = open Ïù¥ Ïù¥ÎØ∏, tp Î•º ÎÑòÏùÄ Í≤ΩÏö∞ # \n","                    #   non_inversion Ïùò Í≤ΩÏö∞, short_tp Í∞Ä Í∞ÄÎä•Ìï®   #\n","\n","                    if res_df['open'].iloc[j] >= long_tp_.iloc[tp_j]:\n","                    # if res_df['open'].iloc[j] >= long_tp_.iloc[initial_i]:\n","\n","                      # tp = long_tp_.iloc[initial_i]\n","\n","                      if config.tr_set.decay_gap != \"None\" and decay_remain == 0:\n","                        tp = res_df['open'].iloc[j]\n","                      else:\n","                        tp = long_tp_.iloc[tp_j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"s-long_tp {}\".format(strat_version))\n","\n","                    \n","                    #   tp limit Ïù¥ Í∞ÄÎä•Ìïú Í≤ΩÏö∞ = open Ïù¥ ÏïÑÏßÅ, tp Î•º ÎÑòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ # \n","                    else:\n","                      \n","                      # tp = long_tp_.iloc[initial_i]\n","                      tp = long_tp_.iloc[tp_j]\n","\n","                      # tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"s-long_tp {}\".format(strat_version))         \n","                  \n","                  tp_list.append(tp)\n","                  tp_idx_list.append(j)\n","                  fee += config.trader_set.limit_fee\n","\n","            #           2. by time        #\n","            if config.tp_set.tp_type == 'MARKET' or (config.tp_set.tp_type == \"BOTH\" and not trade_done):\n","\n","              market_tp = 0\n","\n","              # -------------- sar tp -------------- #\n","              # if (res_df['low'].iloc[j] <= res_df['sar2'].iloc[j]) & \\\n","              #   (res_df['low'].iloc[j - 1] > res_df['sar2'].iloc[j - 1]) & \\\n","              #   (res_df['low'].iloc[j - 2] > res_df['sar2'].iloc[j - 2]):\n","              \n","              #       inversion     #\n","              # if (res_df['high'].iloc[j] >= res_df['sar2'].iloc[j]) & \\\n","              #   (res_df['high'].iloc[j - 1] < res_df['sar2'].iloc[j - 1]) & \\\n","              #   (res_df['high'].iloc[j - 2] < res_df['sar2'].iloc[j - 2]):\n","\n","\n","              # ----------- st long ----------- #\n","              # if res_df['close'].iloc[j] >= res_df['long_tp'].iloc[tp_j]:\n","\n","              # -------------- sar pb tp -------------- #\n","              # if res_df['high'].iloc[j] >= res_df['long_tp'].iloc[initial_i]:\n","\n","              # -------------- st tp -------------- #\n","              # if res_df['close'].iloc[j] < res_df['middle_line'].iloc[j]:\n","\n","              # -------------- fisher tp -------------- #\n","              # if entry[j] == -1:\n","              \n","              # -------------- timestamp -------------- #\n","              if config.tp_set.time_tp:\n","                if np_timeidx[j] % config.loc_set.zone.c_itv_ticks == config.loc_set.zone.c_itv_ticks - 1 and \\\n","                  j - initial_i >= config.loc_set.zone.c_itv_ticks:\n","                  market_tp = 1\n","\n","              # -------------- rsi -------------- #\n","              if strat_version in rsi_out_stratver:\n","                if (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j - 1] <= 50 + config.loc_set.point.osc_band) & \\\n","                                (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j] > 50 + config.loc_set.point.osc_band):\n","                # if (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j - 1] >= 50 + config.loc_set.point.osc_band) & \\\n","                #                  (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j] < 50 + config.loc_set.point.osc_band):\n","                  market_tp = 1\n","\n","                # -------------- cci -------------- #\n","                # if (res_df['cci_%s' % config.loc_set.point.exp_itv].iloc[j - 1] <= config.loc_set.point.osc_band) & \\\n","                #                  (res_df['cci_%s' % config.loc_set.point.exp_itv].iloc[j] > config.loc_set.point.osc_band):\n","                #   market_tp = 1\n","\n","              # ---------------------------- early out phase ---------------------------- #\n","\n","              #        osc slight touch     #\n","              if allow_osc_touch:\n","                if (np.max(res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[initial_i:j]) > 50 + config.loc_set.point.osc_band - rsi_gap) & \\\n","                  (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j] <= 50):\n","                  market_tp = 1\n","\n","              #         tp early out        #\n","              # # if (np.max(res_df['high'].iloc[e_j:j]) > res_df['long_tp'].iloc[tp_j]) & \\\n","              # if (np.max(res_df['high'].iloc[e_j:j]) > res_df['h_long_rtc_1'].iloc[tp_j] + res_df['h_long_rtc_gap'].iloc[tp_j] * early_out_tpg) & \\\n","              #   (res_df['close'].iloc[j] <= res_df['long_ep'].iloc[ep_j]):\n","              #   market_tp = 1 \n","\n","              # if strat_version == \"v7\":\n","              #   if res_df['dc_lower_1m'].iloc[j] < res_df['dc_lower_5m'].iloc[j]:\n","              #     market_tp = 1\n","\n","\n","              #         bb_upper early out        #\n","              if strat_version in ['v5_2']:\n","                if res_df['close'].iloc[j] > res_df['bb_upper_5m'].iloc[j] > res_df['close'].iloc[j - 1]:\n","                  cross_on = 1\n","\n","                if cross_on == 1 and res_df['close'].iloc[j] < res_df['bb_lower_5m'].iloc[j] < res_df['close'].iloc[j - 1]:\n","                  market_tp = 1\n","                              \n","              if market_tp:\n","\n","                tp = res_df['close'].iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                trade_done = 1\n","\n","                if trade_done:\n","                  tp_state_list.append(\"long close tp {}\".format(strat_version))\n","                  # print(\"early_out passed !\")\n","\n","                tp_list.append(tp) \n","                tp_idx_list.append(j)\n","                fee += config.trader_set.market_fee\n","\n","\n","\n","          # -------------- out -------------- #\n","          if not trade_done and config.out_set.use_out and j != len(res_df) - 1:              \n","\n","            # -------------- macd -------------- #\n","            # if res_df['macd_hist3'].iloc[j] < 0:\n","            # # if res_df['macd_hist3'].iloc[i] > 0 and res_df['macd_hist3'].iloc[j] < 0:\n","\n","            # -------------- st config.out_set.retouch -------------- #\n","            # out = 1 ÏÉÅÌÉúÎ©¥ ÎèôÏùº tick ÏóêÏÑú config.out_set.retouch Î•º Ï°∞ÏÇ¨Ìï† Í±∞Í∏∞ ÎïåÎ¨∏Ïóê, Î®ºÏ†Ä Í≤ÄÏÇ¨Ìï®\n","            # Í∑∏Î¶¨Í≥†, out Í∏∞Ï§ÄÏù¥ close Îùº Ïù¥Í≤å ÎßûÏùå \n","            # close Í∞Ä long_out Î≥¥Îã§ ÎÇ¥Î†§Í∞ÄÏûàÎäî ÏÉÅÌÉúÏùºÌÖåÎãà high Î•º Ï°∞ÏÇ¨ÌïòÎäîÍ≤å ÎßûÏùå           \n","            # if out and res_df['high'].iloc[j] >= long_out.iloc[out_j]:\n","            #   config.out_set.retouch = 1\n","\n","            \n","            # ------- ÏùºÏ†ïÏãúÍ∞Ñ Ïù¥ÏÉÅ, dynamic_out Ï†ÅÏö© ------ #\n","            try:\n","              if j - out_idx >= config.out_set.retouch_out_period:\n","                static_long_out = res_df['long_out_{}'.format(strat_version)].iloc[j]\n","            \n","            except Exception as e:\n","              pass\n","\n","              # ------- static out ------ #\n","            try:\n","              if out and res_df['high'].iloc[j] >= static_long_out:\n","                config.out_set.retouch = 1\n","            except Exception as e:\n","              pass\n","\n","              # ------- config.out_set.retouch out ------ #\n","            # if out and res_df['high'].iloc[j] >= long_out2.iloc[out_j]:\n","            #   config.out_set.retouch = 1\n","\n","\n","\n","            # -------------- st -------------- #\n","            # if res_df['close'].iloc[j] < res_df['middle_line'].iloc[j]:\n","            # if res_df['close'].iloc[j] < res_df['minor_ST3_Down'].iloc[j]:\n","            # if res_df['close'].iloc[j] < lower_middle.iloc[j]:\n","            # if res_df['close'].iloc[j] < res_df['minor_ST1_Down'].iloc[j]:\n","            if out == 0:\n","              if config.out_set.hl_out:\n","                if res_df['low'].iloc[j] <= res_df['long_out_{}'.format(strat_version)].iloc[out_j]: # check out only once\n","                  out = 1\n","\n","              else:\n","                if res_df['close'].iloc[j] <= res_df['long_out_{}'.format(strat_version)].iloc[out_j]: # check out only once\n","                  out = 1\n","\n","              # out_idx = j\n","              # static_long_out = long_out.iloc[out_j]\n","              # if config.out_set.second_out:\n","              # static_long_out = long_out.iloc[out_j] - res_df['st_gap'].iloc[out_j] * config.out_set.second_out_gap\n","\n","            # if out == 0 and res_df['low'].iloc[j] <= long_out.iloc[out_j]: # check out only once\n","            #   out = 1            \n","            \n","\n","\n","            # -------------- sma -------------- #\n","            # if res_df['close'].iloc[j] < res_df[sma].iloc[j]:\n","\n","            # -------------- sar -------------- #\n","            # if res_df['close'].iloc[j] < res_df['minor_ST3_Down'].iloc[j] \\\n","            #   or res_df['sar2'].iloc[j] >= res_df['low'].iloc[j]:\n","            # if res_df['close'].iloc[j] < long_out.iloc[initial_i]: # or \\\n","            #   #  res_df['close'].iloc[j] < res_df['sar2'].iloc[j]:\n","            #   #  res_df['sar2_uptrend'].iloc[j] == 0 or \\\n","            #   out = 1\n","            \n","            # if res_df['sar2_uptrend'].iloc[j] == 0:\n","\n","            #     if prev_sar is None:\n","            #       prev_sar = res_df['sar2'].iloc[j - 1]\n","                \n","            #     if res_df['close'].iloc[j] < prev_sar:\n","            #       out = 1\n","\n","            # else:\n","            #   if res_df['close'].iloc[j] < res_df['sar2'].iloc[j]:\n","            #     out = 1\n","\n","            # -------------- hl -------------- #\n","            # if res_df['close'].iloc[j] < long_out.iloc[tp_j]:\n","\n","            # -------------- stoch -------------- #\n","            # if res_df['stoch'].iloc[j - 2] <= res_df['stoch'].iloc[j - 1] and \\\n","            #   res_df['stoch'].iloc[j - 1] > res_df['stoch'].iloc[j] and \\\n","            #   res_df['stoch'].iloc[j - 1] >= stoch_upper:\n","            #   out = 1\n","\n","            # config.out_set.retouch 1 Í≤ΩÏö∞, config.out_set.retouch Ï°∞Í±¥ÎèÑ ÏûàÏñ¥ÏïºÌï®\n","            if out:\n","              if config.out_set.retouch:\n","                if config.out_set.retouch:\n","                  pass\n","                else:\n","                    continue\n","\n","              else:\n","                pass\n","\n","              if config.out_set.price_restoration:\n","                tp = res_df['long_out_{}'.format(strat_version)].iloc[out_j]\n","                if config.out_set.second_out:\n","                  tp = res_df['long_out2_{}'.format(strat_version)].iloc[out_j]\n","\n","                # if res_df['close'].iloc[j] < tp: # Ïù¥ Í≤ΩÏö∞Î•º protect ÌïòÎäîÍ±¥ insane ÏûÑ\n","                # # if res_df['high'].iloc[j] < tp: # --> config.out_set.hl_out ÏÇ¨Ïö©Ïãú Ïù¥ Ï°∞Í±¥ÏùÄ valid Ìï®\n","                #   tp = res_df['close'].iloc[j]\n","\n","              else:\n","\n","                if res_df['open'].iloc[j] <= res_df['long_out_{}'.format(strat_version)].iloc[out_j]:\n","                  tp = res_df['open'].iloc[j]\n","                else:\n","                  if config.out_set.hl_out:\n","                    tp = res_df['long_out_{}'.format(strat_version)].iloc[out_j]\n","                  else:\n","                    tp = res_df['close'].iloc[j]\n","\n","                # if not config.out_set.static_out:\n","                #   if res_df['open'].iloc[j] <= res_df['long_out'].iloc[out_j]: # dynamic close out Ïùò open Í≥†Î†§\n","                #     tp = res_df['open'].iloc[j]\n","                #   else:\n","                #     tp = res_df['close'].iloc[j]\n","\n","                # else:\n","                #   tp = res_df['close'].iloc[j]\n","\n","              if config.out_set.retouch: # out Í≥º open ÎπÑÍµê\n","                if config.out_set.second_out:  # long_out = sell\n","                # config.out_set.second_out ÏùÄ Í∏∞Î≥∏Ï†ÅÏúºÎ°ú limit Ïù¥Îùº Ïù¥ Íµ¨Ï°∞Í∞Ä Í∞ÄÎä•Ìï®\n","                  if res_df['open'].iloc[j] >= res_df['long_out2_{}'.format(strat_version)].iloc[out_j]: # dynamic_out Ïùº Í≤ΩÏö∞ Í≥†Î†§Ìï¥ÏïºÌï®\n","                    tp = res_df['open'].iloc[j]\n","                else:\n","                  if res_df['open'].iloc[j] >= res_df['long_out_{}'.format(strat_version)].iloc[out_j]: # dynamic_out Ïùº Í≤ΩÏö∞ Í≥†Î†§Ìï¥ÏïºÌï®\n","                    tp = res_df['open'].iloc[j]\n","\n","                try:\n","                  if res_df['open'].iloc[j] >= static_long_out:\n","                    tp = res_df['open'].iloc[j]\n","                  else:\n","                    tp = static_long_out\n","                except Exception as e:\n","                  pass\n","\n","              # tp = res_df['open'].iloc[j]\n","              tp_state_list.append(\"long close_out {}\".format(strat_version))\n","              trade_done = 1\n","\n","              tp_list.append(tp)\n","              tp_idx_list.append(j)\n","              fee += config.trader_set.market_fee\n","\n","          \n","          # -------------- non tp -------------- #\n","          if j == len(res_df) - 1:\n","            trade_done = 1\n","            tp = res_df['close'].iloc[j]\n","            tp_list.append(tp) \n","            tp_idx_list.append(j)\n","            fee += config.trader_set.market_fee\n","\n","\n","          if trade_done:\n","\n","            # --------------- tp_ratio info --------------- #\n","            try:\n","              if config.out_set.use_out:\n","                done_tp = res_df['long_tp_{}'.format(strat_version)].iloc[tp_j]\n","                done_out = res_df['long_out_{}'.format(strat_version)].iloc[out_j]\n","\n","                if done_out >= ep_list[0]: # loss >= 1\n","                  tp_ratio = np.nan\n","                  dr = np.nan\n","                  # print(\"loss >= 1\")\n","                else:\n","                  tp_ratio = ((done_tp - ep_list[0] - tp_fee * ep_list[0]) / (ep_list[0] - done_out + out_fee * ep_list[0]))                \n","                  dr = ((done_tp - ep_list[0]) / (ep_list[0] - done_out))          \n","\n","              else:      \n","                dr = np.nan\n","                tp_ratio = np.nan\n","\n","            except Exception as e:\n","              print(\"error in tr phase :\", e)\n","              dr = np.nan              \n","              tp_ratio = np.nan\n","            \n","            tp_ratio_list.append(tp_ratio)\n","            long_tp_ratio_list.append(tp_ratio)\n","            dr_list.append(dr)\n","            long_dr_list.append(dr)\n","\n","\n","            qty_list = []\n","            temp_pr_list = []\n","            r_qty = 1\n","            for q_i in range(len(tp_list) - 1, -1, -1):\n","\n","              if len(tp_list) == 1:\n","                temp_qty = r_qty\n","              else:\n","                if q_i !=0:\n","                  temp_qty = r_qty / config.tp_set.partial_qty_divider\n","                else:\n","                  temp_qty = r_qty\n","\n","              # temp_pr = (tp_list[q_i] / ep_list[0] - fee - 1) * temp_qty\n","              temp_pr = (tp_list[q_i] / ep_list[0] - fee - 1) * temp_qty * config.lvrg_set.leverage\n","              r_qty -= temp_qty\n","\n","              temp_pr_list.append(temp_pr)\n","\n","            temp_pr = sum(temp_pr_list) + 1\n","\n","            # -------------------- sub ep -> pr calc -------------------- #\n","            if len(ep_list) > 1:\n","            \n","              p_ep_pr = []\n","              for sub_ep_ in ep_list:\n","                sub_pr = (tp / sub_ep_ - fee - 1) * config.lvrg_set.leverage\n","                p_ep_pr.append(sub_pr)\n","\n","              temp_pr = sum(p_ep_pr) + 1\n","\n","              print(\"temp_pr :\", temp_pr)\n","\n","            # ------------ hedge + non_hedge pr summation ------------ #\n","            #         hedge pr direction is opposite to the origin       #\n","            hedge_pr = 1\n","            if hedge_cnt == 0:\n","\n","              #       hedge tp      #\n","              h_tp = res_df['close'].iloc[j]\n","              hedge_pr = (h_ep / h_tp - fee - 1) * config.lvrg_set.leverage  # hedge short\n","              temp_pr += hedge_pr\n","              h_j = j\n","\n","\n","            # ll = min(res_df['low'].iloc[i:j + 1])\n","            ll = min(res_df['low'].iloc[i:j])   # pos. Ï†ïÎ¶¨ÌïòÍ∏∞ Î∞îÎ°ú ÏßÅÏ†ÑÍπåÏßÄ\n","            long_liq = (ll / ep_list[0] - fee - 1) * config.lvrg_set.leverage + 1\n","\n","            if j != len(res_df) - 1:\n","\n","              ep_tp_list.append((ep_list, tp_list))\n","              # trade_list.append((ep_idx_list, tp_idx_list))\n","              trade_list.append((ep_idx_list, out_idx_list, tp_idx_list))\n","\n","              liqd_list.append(long_liq)\n","              long_liqd_list.append(long_liq)\n","\n","              h_ep_tp_list.append((h_ep, h_tp))        \n","              h_trade_list.append([initial_i, h_i, h_j])                \n","\n","              pr_list.append(temp_pr)\n","              fee_list.append(fee)\n","              long_list.append(temp_pr)\n","              long_fee_list.append(fee)\n","\n","              h_pr_list.append(hedge_pr)\n","              h_long_list.append(hedge_pr)                    \n","\n","              i = j\n","              break\n","            \n","            else:\n","\n","              # ep_tp_list.append((ep_list, tp_list))\n","              # trade_list.append((ep_idx_list, tp_idx_list))\n","              \n","              # pr_list Î•º ÎÑ£ÏßÄ ÏïäÏùÑÍ±∞ÎãàÍπå, open_list ÏóêÏÑú Ìï¥Îãπ idx Îäî pop\n","              open_list.pop()\n","              zone_list.pop()\n","              side_list.pop()\n","              strat_ver_list.pop()\n","          \n","              #         tp ÎØ∏Ï≤¥Í≤∞ survey        #\n","              nontp_liqd_list.append(long_liq)\n","              nontp_long_liqd_list.append(long_liq)\n","              nontp_long_indexs.append(i)\n","              nontp_long_ep_list.append(ep_list[0])\n","              \n","              nontp_long_pr = (tp / ep_list[0] - fee - 1) * config.lvrg_set.leverage + 1\n","              nontp_pr_list.append(nontp_long_pr)\n","              nontp_long_pr_list.append(nontp_long_pr)\n","\n","            if len(open_list) > len(trade_list):\n","              print('debug from index :', i)\n","              print(len(open_list), len(trade_list))\n","              print(\"len(res_df) :\", len(res_df))\n","              assert len(open_list) == len(trade_list), 'stopped'\n","      \n","      i += 1  # if entry starts with prev trade's close, do not use it ! \n","      # print(\"i in end :\", i)\n","      if i >= len(res_df):\n","        break\n","\n","\n","\n","    # -------------------- result analysis -------------------- #\n","    # try:\n","    print(\"elapsed_time :\", time.time() - start_0)\n","\n","    plt.style.use('default')\n","    # mpl.rcParams.update(mpl.rcParamsDefault)\n","\n","    fig = plt.figure(figsize=(14, 10))\n","\n","    gs = gridspec.GridSpec(nrows=3, # row Î™á Í∞ú \n","                            ncols=3, # col Î™á Í∞ú \n","                            height_ratios=[10, 10, 1]\n","                          )\n","    # plt.figure(figsize=(16, 12))\n","    # plt.figure(figsize=(12, 8))\n","    # plt.figure(figsize=(10, 6))\n","    plt.suptitle(key)\n","\n","    try:\n","      np_pr = np.array(pr_list)\n","\n","      sr = sharpe_ratio(np_pr)\n","\n","      dpf = (len(res_df) / 1440) / len(np_pr)\n","\n","      np_zone_list = np.array(zone_list)\n","      # np_pr_list = np.array(pr_list)\n","      np_side_list = np.array(side_list)\n","\n","      t_w = np.sum(np.where((np_zone_list == 't') & (np_pr > 1), 1, 0))\n","      c_w = np.sum(np.where((np_zone_list == 'c') & (np_pr > 1), 1, 0))\n","      t_ls = np.sum(np.where((np_zone_list == 't') & (np_pr < 1), 1, 0))\n","      c_ls = np.sum(np.where((np_zone_list == 'c') & (np_pr < 1), 1, 0))\n","\n","      # np_pr = (np.array(pr_list) - 1) * config.lvrg_set.leverage + 1\n","\n","      # ----- fake_pr ----- #\n","      # np_pr = np.where(np_pr > 1, 1 + (np_pr - 1) * 3, np_pr)\n","\n","      total_pr = np.cumprod(np_pr)\n","\n","      for_sum_pr = np_pr - 1\n","      for_sum_pr[0] = 1\n","      sum_pr = np.cumsum(for_sum_pr)\n","      sum_pr = np.where(sum_pr < 0, 0, sum_pr)\n","\n","      wr = len(np_pr[np_pr > 1]) / len(np_pr[np_pr != 1])\n","      \n","      total_rollmax_pr = np.maximum.accumulate(total_pr)\n","      total_acc_mdd = np.max((total_rollmax_pr - total_pr) / total_rollmax_pr)\n","      total_rollmax_sumpr = np.maximum.accumulate(sum_pr)\n","      total_sum_mdd = np.max((total_rollmax_sumpr - sum_pr) / total_rollmax_sumpr)\n","\n","      np_tp_ratio_list = np.array(tp_ratio_list) # Ï¥àÍ∏∞Ïóê tr ÏùÑ Ï†ïÌïòÎäîÍ±∞Îùº mean ÏÇ¨Ïö©ÌïòÎäîÍ≤å ÎßûÏùå\n","      mean_tr = np.mean(np_tp_ratio_list[np.isnan(np_tp_ratio_list) == 0])\n","\n","      np_dr_list = np.array(dr_list) # Ï¥àÍ∏∞Ïóê tr ÏùÑ Ï†ïÌïòÎäîÍ±∞Îùº mean ÏÇ¨Ïö©ÌïòÎäîÍ≤å ÎßûÏùå\n","      mean_dr = np.mean(np_dr_list[np.isnan(np_dr_list) == 0])\n","\n","      # pr_gap = (np_pr - 1) / config.lvrg_set.leverage + fee\n","      # tp_gap_ = pr_gap[pr_gap > 0]\n","      # # mean_config.tr_set.tp_gap = np.mean(pr_gap[pr_gap > 0])\n","      # mean_ls_gap = np.mean(pr_gap[pr_gap < 0])\n","\n","      # ---- profit fee ratio ---- #\n","      # mean_pgfr = np.mean((tp_gap_ - fee) / abs(tp_gap_ + fee))\n","\n","      plt.subplot(gs[0])\n","      plt.plot(total_pr)\n","      plt.plot(sum_pr, color='gold')\n","      if len(nontp_liqd_list) != 0:\n","        plt.title(\"wr : %.3f\\n len(td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (wr, len(np_pr[np_pr != 1]), dpf, np.min(np_pr), total_pr[-1], sum_pr[-1], sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (total_acc_mdd, total_sum_mdd, config.lvrg_set.leverage, min(liqd_list), mean_tr, mean_dr)  + \\\n","                  \"\\n nontp_liqd_cnt : %s\\nnontp_liqd : %.3f\\nontp_liqd_pr : %.3f\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_liqd_list), min(nontp_liqd_list), min(nontp_pr_list), t_w, c_w, t_ls, c_ls) ,\n","                  position=title_position, fontsize=fontsize)\n","      else:\n","        plt.title(\"wr : %.3f\\n len(td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\" \n","                  % (wr, len(np_pr[np_pr != 1]), dpf, np.min(np_pr), total_pr[-1], sum_pr[-1], sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (total_acc_mdd, total_sum_mdd, config.lvrg_set.leverage, min(liqd_list), mean_tr, mean_dr)  + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_liqd_list), t_w, c_w, t_ls, c_ls) ,\n","                  position=title_position, fontsize=fontsize)\n","      # plt.show()\n","\n","      survey_df.iloc[survey_i] = wr, sr, len(np_pr[np_pr != 1]), dpf, \\\n","        total_pr[-1], sum_pr[-1], total_acc_mdd, total_sum_mdd, min(liqd_list), np.min(np_pr), mean_tr, mean_dr\n","\n","      print('supblot231 passed')\n","\n","    except Exception as e:\n","      print(\"error in 231 :\", e)\n","\n","\n","    try:\n","      #         short only      #\n","      short_np_pr = np.array(short_list)\n","\n","      short_sr = sharpe_ratio(short_np_pr)\n","\n","      short_dpf = (len(res_df) / 1440) / len(short_np_pr)\n","\n","      short_total_pr = np.cumprod(short_np_pr)\n","      \n","      short_for_sum_pr = short_np_pr - 1\n","      short_for_sum_pr[0] = 1\n","      short_sum_pr = np.cumsum(short_for_sum_pr)\n","      short_sum_pr = np.where(short_sum_pr < 0, 0, short_sum_pr)\n","\n","      short_wr = len(short_np_pr[short_np_pr > 1]) / len(short_np_pr[short_np_pr != 1])\n","      \n","      t_w_s = np.sum(np.where((np_zone_list == 't') & (np_pr > 1) & (np_side_list == 's'), 1, 0))\n","      c_w_s = np.sum(np.where((np_zone_list == 'c') & (np_pr > 1) & (np_side_list == 's'), 1, 0))\n","      t_ls_s = np.sum(np.where((np_zone_list == 't') & (np_pr < 1) & (np_side_list == 's'), 1, 0))\n","      c_ls_s = np.sum(np.where((np_zone_list == 'c') & (np_pr < 1) & (np_side_list == 's'), 1, 0))\n","\n","      short_rollmax_pr = np.maximum.accumulate(short_total_pr)\n","      short_acc_mdd = np.max((short_rollmax_pr - short_total_pr) / short_rollmax_pr)\n","      short_rollmax_sumpr = np.maximum.accumulate(short_sum_pr)\n","      short_sum_mdd = np.max((short_rollmax_sumpr - short_sum_pr) / short_rollmax_sumpr)\n","\n","      np_short_tp_ratio_list = np.array(short_tp_ratio_list)\n","      mean_short_tr = np.mean(np_short_tp_ratio_list[np.isnan(np_short_tp_ratio_list) == 0])\n","      \n","      np_short_dr_list = np.array(short_dr_list)\n","      mean_short_dr = np.mean(np_short_dr_list[np.isnan(np_short_dr_list) == 0])\n","      \n","      # short_pr_gap = (short_np_pr - 1) / config.lvrg_set.leverage + fee\n","      # short_tp_gap = short_pr_gap[short_pr_gap > 0]\n","      # # mean_short_tp_gap = np.mean(short_pr_gap[short_pr_gap > 0])\n","      # # mean_short_ls_gap = np.mean(short_pr_gap[short_pr_gap < 0])\n","\n","      # mean_short_pgfr = np.mean((short_tp_gap - fee) / abs(short_tp_gap + fee))\n","      \n","      # plt.subplot(232)\n","      plt.subplot(gs[1])\n","      plt.plot(short_total_pr)\n","      plt.plot(short_sum_pr, color='gold')\n","      if len(nontp_short_liqd_list) != 0:   \n","\n","        max_nontp_short_term = len(res_df) - nontp_short_indexs[0]\n","        \n","        plt.title(\"wr : %.3f\\nlen(short_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (short_wr, len(short_np_pr[short_np_pr != 1]), short_dpf, np.min(short_np_pr), short_total_pr[-1], short_sum_pr[-1], short_sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (short_acc_mdd, short_sum_mdd, config.lvrg_set.leverage, min(short_liqd_list), mean_short_tr, mean_short_dr) + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n nontp_liqd : %.3f\\n nontp_liqd_pr : %.3f\\n max_nontp_term : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_short_liqd_list), min(nontp_short_liqd_list), min(nontp_short_pr_list), max_nontp_short_term, t_w_s, c_w_s, t_ls_s, c_ls_s) ,\n","                  position=title_position, fontsize=fontsize)\n","      else:\n","        plt.title(\"wr : %.3f\\nlen(short_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (short_wr, len(short_np_pr[short_np_pr != 1]), short_dpf, np.min(short_np_pr), short_total_pr[-1], short_sum_pr[-1], short_sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (short_acc_mdd, short_sum_mdd, config.lvrg_set.leverage, min(short_liqd_list), mean_short_tr, mean_short_dr) + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_short_liqd_list), t_w_s, c_w_s, t_ls_s, c_ls_s),\n","                  position=title_position, fontsize=fontsize)\n","   \n","      short_survey_df.iloc[survey_i] = short_wr, short_sr, len(short_np_pr[short_np_pr != 1]), short_dpf, \\\n","        short_total_pr[-1], short_sum_pr[-1], short_acc_mdd, short_sum_mdd, min(short_liqd_list), np.min(short_np_pr), mean_short_tr, mean_short_dr\n","        \n","      print('supblot232 passed')\n","    \n","    except Exception as e:\n","      print(\"error in 232 :\", e)\n","\n","    try:\n","      #         long only      #\n","      long_np_pr = np.array(long_list)\n","      # long_np_pr = (np.array(long_list) - 1) * config.lvrg_set.leverage + 1\n","\n","      long_sr = sharpe_ratio(long_np_pr)\n","\n","      long_dpf = (len(res_df) / 1440) / len(long_np_pr)\n","\n","      long_total_pr = np.cumprod(long_np_pr)\n","      \n","      long_for_sum_pr = long_np_pr - 1\n","      long_for_sum_pr[0] = 1\n","      long_sum_pr = np.cumsum(long_for_sum_pr)\n","      long_sum_pr = np.where(long_sum_pr < 0, 0, long_sum_pr)\n","\n","      long_wr = len(long_np_pr[long_np_pr > 1]) / len(long_np_pr[long_np_pr != 1])\n","\n","      t_w_l = np.sum(np.where((np_zone_list == 't') & (np_pr > 1) & (np_side_list == 'l'), 1, 0))\n","      c_w_l = np.sum(np.where((np_zone_list == 'c') & (np_pr > 1) & (np_side_list == 'l'), 1, 0))\n","      t_ls_l = np.sum(np.where((np_zone_list == 't') & (np_pr < 1) & (np_side_list == 'l'), 1, 0))\n","      c_ls_l = np.sum(np.where((np_zone_list == 'c') & (np_pr < 1) & (np_side_list == 'l'), 1, 0))\n","\n","      long_rollmax_pr = np.maximum.accumulate(long_total_pr)\n","      long_acc_mdd = np.max((long_rollmax_pr - long_total_pr) / long_rollmax_pr)\n","      long_rollmax_sumpr = np.maximum.accumulate(long_sum_pr)\n","      long_sum_mdd = np.max((long_rollmax_sumpr - long_sum_pr) / long_rollmax_sumpr)\n","\n","      np_long_tp_ratio_list = np.array(long_tp_ratio_list)\n","      mean_long_tr = np.mean(np_long_tp_ratio_list[np.isnan(np_long_tp_ratio_list) == 0])\n","      \n","      np_long_dr_list = np.array(long_dr_list)\n","      mean_long_dr = np.mean(np_long_dr_list[np.isnan(np_long_dr_list) == 0])\n","\n","      # long_pr_gap = (long_np_pr - 1) / config.lvrg_set.leverage + fee\n","      # long_tp_gap = long_pr_gap[long_pr_gap > 0]\n","      # # mean_long_tp_gap = np.mean(long_pr_gap[long_pr_gap > 0])\n","      # # mean_long_ls_gap = np.mean(long_pr_gap[long_pr_gap < 0])\n","\n","      # mean_long_pgfr = np.mean((long_tp_gap - fee) / abs(long_tp_gap + fee))\n","\n","      plt.subplot(gs[2])\n","      plt.plot(long_total_pr)\n","      plt.plot(long_sum_pr, color='gold')\n","      if len(nontp_long_liqd_list) != 0:\n","\n","        max_nontp_long_term = len(res_df) - nontp_long_indexs[0]\n","\n","        plt.title(\"wr : %.3f\\nlen(long_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (long_wr, len(long_np_pr[long_np_pr != 1]), long_dpf, np.min(long_np_pr), long_total_pr[-1], long_sum_pr[-1], long_sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (long_acc_mdd, long_sum_mdd, config.lvrg_set.leverage, min(long_liqd_list), mean_long_tr, mean_long_dr)  + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n nontp_liqd : %.3f\\n nontp_liqd_pr : %.3f\\n max_nontp_term : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_long_liqd_list), min(nontp_long_liqd_list), min(nontp_long_pr_list), max_nontp_long_term, t_w_l, c_w_l, t_ls_l, c_ls_l) ,\n","                  position=title_position, fontsize=fontsize)\n","      else:\n","        plt.title(\"wr : %.3f\\nlen(long_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (long_wr, len(long_np_pr[long_np_pr != 1]), long_dpf, np.min(long_np_pr), long_total_pr[-1], long_sum_pr[-1], long_sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (long_acc_mdd, long_sum_mdd, config.lvrg_set.leverage, min(long_liqd_list), mean_long_tr, mean_long_dr) + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_long_liqd_list), t_w_l, c_w_l, t_ls_l, c_ls_l),\n","                  position=title_position, fontsize=fontsize)\n","\n","      long_survey_df.iloc[survey_i] = long_wr, long_sr, len(long_np_pr[long_np_pr != 1]), long_dpf, \\\n","        long_total_pr[-1], long_sum_pr[-1], long_acc_mdd, long_sum_mdd, min(long_liqd_list), np.min(long_np_pr), mean_long_tr, mean_long_dr\n","\n","      print('supblot233 passed')\n","\n","    except Exception as e:\n","      print(\"error in 233 :\", e)\n","\n","\n","    try:\n","      #     reversion adjustment      #\n","      # rev_np_pr = 1 / (np.array(pr_list) + fee) - fee\n","      rev_fee = tp_fee + out_fee - np.array(fee_list)\n","      rev_np_pr = (1 / ((np.array(pr_list) - 1) / config.lvrg_set.leverage + np.array(fee_list) + 1) - rev_fee - 1) * config.lvrg_set.leverage + 1\n","      # rev_np_pr = (1 / (np.array(pr_list) + fee) - fee - 1) * config.lvrg_set.leverage + 1\n","          \n","      rev_sr = sharpe_ratio(rev_np_pr)\n","\n","      rev_total_pr = np.cumprod(rev_np_pr)\n","      rev_wr = len(rev_np_pr[rev_np_pr > 1]) / len(rev_np_pr[rev_np_pr != 1])\n","\n","      rev_total_for_sum_pr = rev_np_pr - 1\n","      rev_total_for_sum_pr[0] = 1\n","      rev_total_sum_pr = np.cumsum(rev_total_for_sum_pr)\n","      rev_total_sum_pr = np.where(rev_total_sum_pr < 0, 0, rev_total_sum_pr)\n","\n","      rev_rollmax_pr = np.maximum.accumulate(rev_total_pr)\n","      rev_acc_mdd = np.max((rev_rollmax_pr - rev_total_pr) / rev_rollmax_pr)\n","      rev_rollmax_sumpr = np.maximum.accumulate(rev_total_sum_pr)\n","      rev_sum_mdd = np.max((rev_rollmax_sumpr - rev_total_sum_pr) / rev_rollmax_sumpr)\n","\n","      plt.subplot(gs[3])\n","\n","      plt.plot(rev_total_pr)\n","      plt.plot(rev_total_sum_pr, color='gold')\n","\n","      plt.title(\"wr : %.3f\\n sr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n min_pr : %.3f\" \n","                % (rev_wr, rev_sr, rev_total_pr[-1], rev_total_sum_pr[-1], \n","                   rev_acc_mdd, rev_sum_mdd, np.min(rev_np_pr)), fontsize=fontsize)\n","      \n","      rev_survey_df.iloc[survey_i] = rev_wr, rev_sr, rev_total_pr[-1], rev_total_sum_pr[-1], rev_acc_mdd, rev_sum_mdd, np.min(rev_np_pr)\n","\n","    except Exception as e:\n","      print(\"error in 234 :\", e)\n","\n","    try:\n","      #         short       #\n","      # rev_short_np_pr = 1 / (np.array(short_list) + fee) - fee\n","      rev_short_fee = tp_fee + out_fee - np.array(short_fee_list)\n","      rev_short_np_pr = (1 / ((np.array(short_list) - 1) / config.lvrg_set.leverage + np.array(short_fee_list) + 1) - rev_short_fee - 1) * config.lvrg_set.leverage + 1\n","      # rev_short_np_pr = (1 / (np.array(short_list) + fee) - fee - 1) * config.lvrg_set.leverage + 1\n","      \n","      rev_short_sr = sharpe_ratio(rev_short_np_pr)\n","          \n","      short_rev_total_pr = np.cumprod(rev_short_np_pr)\n","      rev_short_wr = len(rev_short_np_pr[rev_short_np_pr > 1]) / len(rev_short_np_pr[rev_short_np_pr != 1])\n","\n","      rev_short_for_sum_pr = rev_short_np_pr - 1\n","      rev_short_for_sum_pr[0] = 1\n","      short_rev_sum_pr = np.cumsum(rev_short_for_sum_pr)\n","      short_rev_sum_pr = np.where(short_rev_sum_pr < 0, 0, short_rev_sum_pr)\n","\n","      short_rev_rollmax_pr = np.maximum.accumulate(short_rev_total_pr)\n","      short_rev_acc_mdd = np.max((short_rev_rollmax_pr - short_rev_total_pr) / short_rev_rollmax_pr)\n","      short_rev_rollmax_sumpr = np.maximum.accumulate(short_rev_sum_pr)\n","      short_rev_sum_mdd = np.max((short_rev_rollmax_sumpr - short_rev_sum_pr) / short_rev_rollmax_sumpr)\n","\n","      plt.subplot(gs[4])\n","\n","      plt.plot(short_rev_total_pr)\n","      plt.plot(short_rev_sum_pr, color='gold')\n","\n","      plt.title(\"wr : %.3f\\n sr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n min_pr : %.3f\" \n","                % (rev_short_wr, rev_short_sr, short_rev_total_pr[-1], short_rev_sum_pr[-1], \n","                   short_rev_acc_mdd, short_rev_sum_mdd, np.min(rev_short_np_pr)), fontsize=fontsize)\n","      \n","      rev_short_survey_df.iloc[survey_i] = rev_short_wr, rev_short_sr, short_rev_total_pr[-1], short_rev_sum_pr[-1], short_rev_acc_mdd, short_rev_sum_mdd, np.min(rev_short_np_pr)\n","\n","    except Exception as e:\n","      print(\"error in 235 :\", e)\n","\n","    try:\n","      #         long       #\n","      # rev_long_np_pr = 1 / (np.array(long_list) + fee) - fee\n","      rev_long_fee = tp_fee + out_fee - np.array(long_fee_list)\n","      rev_long_np_pr = (1 / ((np.array(long_list) - 1) / config.lvrg_set.leverage + np.array(long_fee_list) + 1) - rev_long_fee - 1) * config.lvrg_set.leverage + 1\n","          \n","      rev_long_sr = sharpe_ratio(rev_long_np_pr)\n","\n","      long_rev_total_pr = np.cumprod(rev_long_np_pr)\n","      rev_long_wr = len(rev_long_np_pr[rev_long_np_pr > 1]) / len(rev_long_np_pr[rev_long_np_pr != 1])\n","\n","      rev_long_for_sum_pr = rev_long_np_pr - 1\n","      rev_long_for_sum_pr[0] = 1\n","      long_rev_sum_pr = np.cumsum(rev_long_for_sum_pr)\n","      long_rev_sum_pr = np.where(long_rev_sum_pr < 0, 0, long_rev_sum_pr)\n","\n","      long_rev_rollmax_pr = np.maximum.accumulate(long_rev_total_pr)\n","      long_rev_acc_mdd = np.max((long_rev_rollmax_pr - long_rev_total_pr) / long_rev_rollmax_pr)\n","      long_rev_rollmax_sumpr = np.maximum.accumulate(long_rev_sum_pr)\n","      long_rev_sum_mdd = np.max((long_rev_rollmax_sumpr - long_rev_sum_pr) / long_rev_rollmax_sumpr)\n","\n","      plt.subplot(gs[5])\n","\n","      plt.plot(long_rev_total_pr)\n","      plt.plot(long_rev_sum_pr, color='gold')\n","\n","      plt.title(\"wr : %.3f\\n sr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n min_pr : %.3f\" \n","                % (rev_long_wr, rev_long_sr, long_rev_total_pr[-1], long_rev_sum_pr[-1], \n","                   long_rev_acc_mdd, long_rev_sum_mdd, np.min(rev_long_np_pr)), fontsize=fontsize)\n","      \n","      rev_long_survey_df.iloc[survey_i] = rev_long_wr, rev_long_sr, long_rev_total_pr[-1], long_rev_sum_pr[-1], long_rev_acc_mdd, long_rev_sum_mdd, np.min(rev_long_np_pr)\n","      \n","    except Exception as e:\n","      print(\"error in 236 :\", e)\n","\n","    if show_plot:\n","      \n","      try:\n","        frq_dev, s_frq_dev, l_frq_dev = frq_dev_plot(res_df, trade_list, side_list, plot=False)      \n","        plt.subplot(gs[6])\n","        plt.plot(frq_dev)\n","\n","        plt.subplot(gs[7])\n","        plt.plot(s_frq_dev)\n","\n","        plt.subplot(gs[8])\n","        plt.plot(l_frq_dev)\n","      \n","      except:\n","        pass\n","\n","      plt.show()\n","    \n","\n","    try:\n","\n","      h_np_pr = np.array(h_pr_list)\n","      # h_rev_np_pr = 1 / (np.array(h_pr_list) + fee) - fee    # define, for plot_check below cell\n","      h_rev_np_pr = (1 / ((np.array(h_pr_list) - 1) / config.lvrg_set.leverage + np.array(fee_list) + 1) - np.array(fee_list) - 1) * config.lvrg_set.leverage + 1\n","\n","      # --------------------- h pr plot --------------------- #\n","      if len(h_np_pr[h_np_pr != 1]) != 0:\n","\n","        plt.figure(figsize=(16, 12))\n","        plt.suptitle(key + \" hedge\")\n","\n","        h_total_pr = np.cumprod(h_np_pr)\n","        h_wr = len(h_np_pr[h_np_pr > 1]) / len(h_np_pr[h_np_pr != 1])\n","\n","        plt.subplot(gs[0])\n","\n","        plt.plot(h_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_wr, np.min(h_np_pr), h_total_pr[-1], config.lvrg_set.leverage))\n","        # plt.show()\n","\n","        #         short only      #\n","        h_short_np_pr = np.array(h_short_list)\n","\n","        short_h_total_pr = np.cumprod(h_short_np_pr)\n","        h_short_wr = len(h_short_np_pr[h_short_np_pr > 1]) / len(h_short_np_pr[h_short_np_pr != 1])\n","        \n","        plt.subplot(gs[1])\n","        plt.plot(short_h_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_short_wr, np.min(h_short_np_pr), short_h_total_pr[-1], config.lvrg_set.leverage))\n","\n","        #         long only      #\n","        h_long_np_pr = np.array(h_long_list)\n","\n","        long_h_total_pr = np.cumprod(h_long_np_pr)\n","        h_long_wr = len(h_long_np_pr[h_long_np_pr > 1]) / len(h_long_np_pr[h_long_np_pr != 1])\n","        \n","        plt.subplot(gs[2])\n","        plt.plot(long_h_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_long_wr, np.min(h_long_np_pr), long_h_total_pr[-1], config.lvrg_set.leverage))\n","\n","\n","        #     reversion adjustment      #\n","            \n","        h_rev_total_pr = np.cumprod(h_rev_np_pr)\n","        h_rev_wr = len(h_rev_np_pr[h_rev_np_pr > 1]) / len(h_rev_np_pr[h_rev_np_pr != 1])\n","\n","        plt.subplot(gs[3])\n","        plt.plot(h_rev_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_rev_wr, np.min(h_rev_np_pr), h_rev_total_pr[-1], config.lvrg_set.leverage))\n","\n","        #         short       #\n","        # h_rev_short_np_pr = 1 / (np.array(h_short_list) + fee) - fee\n","        h_rev_short_np_pr =  (1 / ((np.array(h_short_list) - 1) / config.lvrg_set.leverage + np.array(short_fee_list) + 1) - np.array(short_fee_list) - 1) * config.lvrg_set.leverage + 1\n","           \n","        short_h_rev_total_pr = np.cumprod(h_rev_short_np_pr)\n","        h_rev_short_wr = len(h_rev_short_np_pr[h_rev_short_np_pr > 1]) / len(h_rev_short_np_pr[h_rev_short_np_pr != 1])\n","\n","        plt.subplot(gs[4])\n","        plt.plot(short_h_rev_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_rev_short_wr, np.min(h_rev_short_np_pr), short_h_rev_total_pr[-1], config.lvrg_set.leverage))\n","\n","        #         long       #\n","        # h_rev_long_np_pr = 1 / (np.array(h_long_list) + fee) - fee\n","        h_rev_long_np_pr =  (1 / ((np.array(h_long_list) - 1) / config.lvrg_set.leverage + np.array(long_fee_list) + 1) - np.array(long_fee_list) - 1) * config.lvrg_set.leverage + 1\n","            \n","        long_h_rev_total_pr = np.cumprod(h_rev_long_np_pr)\n","        h_rev_long_wr = len(h_rev_long_np_pr[h_rev_long_np_pr > 1]) / len(h_rev_long_np_pr[h_rev_long_np_pr != 1])\n","\n","        plt.subplot(gs[5])\n","        plt.plot(long_h_rev_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_rev_long_wr, np.min(h_rev_long_np_pr), long_h_rev_total_pr[-1], config.lvrg_set.leverage))\n","        \n","        if show_plot:\n","          plt.show()\n","          \n","    except Exception as e:\n","      print('error in h_pr plot :', e)     \n","    \n","    print()\n","\n","    # print()\n","\n","\n","  # break # pair loop"]},{"cell_type":"markdown","source":["###### fucntional res_plot()"],"metadata":{"id":"Up1TNNxbfKbk"}},{"cell_type":"code","source":["# def res_plot(res_df, pr_list, zone_list, side_list, tp_ratio_list, dr_list, nontp_liqd_list, nontp_pr_list, config, liqd_list):\n","def res_plot():\n","\n","    fontsize = 10\n","    plt.style.use('default')\n","    # mpl.rcParams.update(mpl.rcParamsDefault)\n","\n","    fig = plt.figure(figsize=(14, 10))\n","\n","    gs = gridspec.GridSpec(nrows=3, # row Î™á Í∞ú \n","                            ncols=3, # col Î™á Í∞ú \n","                            height_ratios=[10, 10, 1]\n","                          )\n","    # plt.figure(figsize=(16, 12))\n","    # plt.figure(figsize=(12, 8))\n","    # plt.figure(figsize=(10, 6))\n","    plt.suptitle(key)\n","\n","    try:\n","      np_pr = np.array(pr_list)\n","\n","      sr = sharpe_ratio(np_pr)\n","\n","      dpf = (len(res_df) / 1440) / len(np_pr)\n","\n","      np_zone_list = np.array(zone_list)\n","      # np_pr_list = np.array(pr_list)\n","      np_side_list = np.array(side_list)\n","\n","      t_w = np.sum(np.where((np_zone_list == 't') & (np_pr > 1), 1, 0))\n","      c_w = np.sum(np.where((np_zone_list == 'c') & (np_pr > 1), 1, 0))\n","      t_ls = np.sum(np.where((np_zone_list == 't') & (np_pr < 1), 1, 0))\n","      c_ls = np.sum(np.where((np_zone_list == 'c') & (np_pr < 1), 1, 0))\n","\n","      # np_pr = (np.array(pr_list) - 1) * config.lvrg_set.leverage + 1\n","\n","      # ----- fake_pr ----- #\n","      # np_pr = np.where(np_pr > 1, 1 + (np_pr - 1) * 3, np_pr)\n","\n","      total_pr = np.cumprod(np_pr)\n","\n","      for_sum_pr = np_pr - 1\n","      for_sum_pr[0] = 1\n","      sum_pr = np.cumsum(for_sum_pr)\n","      sum_pr = np.where(sum_pr < 0, 0, sum_pr)\n","\n","      wr = len(np_pr[np_pr > 1]) / len(np_pr[np_pr != 1])\n","      \n","      total_rollmax_pr = np.maximum.accumulate(total_pr)\n","      total_acc_mdd = np.max((total_rollmax_pr - total_pr) / total_rollmax_pr)\n","      total_rollmax_sumpr = np.maximum.accumulate(sum_pr)\n","      total_sum_mdd = np.max((total_rollmax_sumpr - sum_pr) / total_rollmax_sumpr)\n","\n","      np_tp_ratio_list = np.array(tp_ratio_list) # Ï¥àÍ∏∞Ïóê tr ÏùÑ Ï†ïÌïòÎäîÍ±∞Îùº mean ÏÇ¨Ïö©ÌïòÎäîÍ≤å ÎßûÏùå\n","      mean_tr = np.mean(np_tp_ratio_list[np.isnan(np_tp_ratio_list) == 0])\n","\n","      np_dr_list = np.array(dr_list) # Ï¥àÍ∏∞Ïóê tr ÏùÑ Ï†ïÌïòÎäîÍ±∞Îùº mean ÏÇ¨Ïö©ÌïòÎäîÍ≤å ÎßûÏùå\n","      mean_dr = np.mean(np_dr_list[np.isnan(np_dr_list) == 0])\n","\n","      # pr_gap = (np_pr - 1) / config.lvrg_set.leverage + fee\n","      # tp_gap_ = pr_gap[pr_gap > 0]\n","      # # mean_config.tr_set.tp_gap = np.mean(pr_gap[pr_gap > 0])\n","      # mean_ls_gap = np.mean(pr_gap[pr_gap < 0])\n","\n","      # ---- profit fee ratio ---- #\n","      # mean_pgfr = np.mean((tp_gap_ - fee) / abs(tp_gap_ + fee))\n","\n","      plt.subplot(gs[0])\n","      plt.plot(total_pr)\n","      plt.plot(sum_pr, color='gold')\n","      if len(nontp_liqd_list) != 0:\n","        plt.title(\"wr : %.3f\\n len(td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (wr, len(np_pr[np_pr != 1]), dpf, np.min(np_pr), total_pr[-1], sum_pr[-1], sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (total_acc_mdd, total_sum_mdd, config.lvrg_set.leverage, min(liqd_list), mean_tr, mean_dr)  + \\\n","                  \"\\n nontp_liqd_cnt : %s\\nnontp_liqd : %.3f\\nontp_liqd_pr : %.3f\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_liqd_list), min(nontp_liqd_list), min(nontp_pr_list), t_w, c_w, t_ls, c_ls) ,\n","                  position=title_position, fontsize=fontsize)\n","      else:\n","        plt.title(\"wr : %.3f\\n len(td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\" \n","                  % (wr, len(np_pr[np_pr != 1]), dpf, np.min(np_pr), total_pr[-1], sum_pr[-1], sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (total_acc_mdd, total_sum_mdd, config.lvrg_set.leverage, min(liqd_list), mean_tr, mean_dr)  + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_liqd_list), t_w, c_w, t_ls, c_ls) ,\n","                  position=title_position, fontsize=fontsize)\n","      # plt.show()\n","\n","      survey_df.iloc[survey_i] = wr, sr, len(np_pr[np_pr != 1]), dpf, \\\n","        total_pr[-1], sum_pr[-1], total_acc_mdd, total_sum_mdd, min(liqd_list), np.min(np_pr), mean_tr, mean_dr\n","\n","      print('supblot231 passed')\n","\n","    except Exception as e:\n","      print(\"error in 231 :\", e)\n","\n","\n","    try:\n","      #         short only      #\n","      short_np_pr = np.array(short_list)\n","\n","      short_sr = sharpe_ratio(short_np_pr)\n","\n","      short_dpf = (len(res_df) / 1440) / len(short_np_pr)\n","\n","      short_total_pr = np.cumprod(short_np_pr)\n","      \n","      short_for_sum_pr = short_np_pr - 1\n","      short_for_sum_pr[0] = 1\n","      short_sum_pr = np.cumsum(short_for_sum_pr)\n","      short_sum_pr = np.where(short_sum_pr < 0, 0, short_sum_pr)\n","\n","      short_wr = len(short_np_pr[short_np_pr > 1]) / len(short_np_pr[short_np_pr != 1])\n","      \n","      t_w_s = np.sum(np.where((np_zone_list == 't') & (np_pr > 1) & (np_side_list == 's'), 1, 0))\n","      c_w_s = np.sum(np.where((np_zone_list == 'c') & (np_pr > 1) & (np_side_list == 's'), 1, 0))\n","      t_ls_s = np.sum(np.where((np_zone_list == 't') & (np_pr < 1) & (np_side_list == 's'), 1, 0))\n","      c_ls_s = np.sum(np.where((np_zone_list == 'c') & (np_pr < 1) & (np_side_list == 's'), 1, 0))\n","\n","      short_rollmax_pr = np.maximum.accumulate(short_total_pr)\n","      short_acc_mdd = np.max((short_rollmax_pr - short_total_pr) / short_rollmax_pr)\n","      short_rollmax_sumpr = np.maximum.accumulate(short_sum_pr)\n","      short_sum_mdd = np.max((short_rollmax_sumpr - short_sum_pr) / short_rollmax_sumpr)\n","\n","      np_short_tp_ratio_list = np.array(short_tp_ratio_list)\n","      mean_short_tr = np.mean(np_short_tp_ratio_list[np.isnan(np_short_tp_ratio_list) == 0])\n","      \n","      np_short_dr_list = np.array(short_dr_list)\n","      mean_short_dr = np.mean(np_short_dr_list[np.isnan(np_short_dr_list) == 0])\n","      \n","      # short_pr_gap = (short_np_pr - 1) / config.lvrg_set.leverage + fee\n","      # short_tp_gap = short_pr_gap[short_pr_gap > 0]\n","      # # mean_short_tp_gap = np.mean(short_pr_gap[short_pr_gap > 0])\n","      # # mean_short_ls_gap = np.mean(short_pr_gap[short_pr_gap < 0])\n","\n","      # mean_short_pgfr = np.mean((short_tp_gap - fee) / abs(short_tp_gap + fee))\n","      \n","      # plt.subplot(232)\n","      plt.subplot(gs[1])\n","      plt.plot(short_total_pr)\n","      plt.plot(short_sum_pr, color='gold')\n","      if len(nontp_short_liqd_list) != 0:   \n","\n","        max_nontp_short_term = len(res_df) - nontp_short_indexs[0]\n","        \n","        plt.title(\"wr : %.3f\\nlen(short_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (short_wr, len(short_np_pr[short_np_pr != 1]), short_dpf, np.min(short_np_pr), short_total_pr[-1], short_sum_pr[-1], short_sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (short_acc_mdd, short_sum_mdd, config.lvrg_set.leverage, min(short_liqd_list), mean_short_tr, mean_short_dr) + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n nontp_liqd : %.3f\\n nontp_liqd_pr : %.3f\\n max_nontp_term : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_short_liqd_list), min(nontp_short_liqd_list), min(nontp_short_pr_list), max_nontp_short_term, t_w_s, c_w_s, t_ls_s, c_ls_s) ,\n","                  position=title_position, fontsize=fontsize)\n","      else:\n","        plt.title(\"wr : %.3f\\nlen(short_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (short_wr, len(short_np_pr[short_np_pr != 1]), short_dpf, np.min(short_np_pr), short_total_pr[-1], short_sum_pr[-1], short_sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (short_acc_mdd, short_sum_mdd, config.lvrg_set.leverage, min(short_liqd_list), mean_short_tr, mean_short_dr) + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_short_liqd_list), t_w_s, c_w_s, t_ls_s, c_ls_s),\n","                  position=title_position, fontsize=fontsize)\n","   \n","      short_survey_df.iloc[survey_i] = short_wr, short_sr, len(short_np_pr[short_np_pr != 1]), short_dpf, \\\n","        short_total_pr[-1], short_sum_pr[-1], short_acc_mdd, short_sum_mdd, min(short_liqd_list), np.min(short_np_pr), mean_short_tr, mean_short_dr\n","        \n","      print('supblot232 passed')\n","    \n","    except Exception as e:\n","      print(\"error in 232 :\", e)\n","\n","    try:\n","      #         long only      #\n","      long_np_pr = np.array(long_list)\n","      # long_np_pr = (np.array(long_list) - 1) * config.lvrg_set.leverage + 1\n","\n","      long_sr = sharpe_ratio(long_np_pr)\n","\n","      long_dpf = (len(res_df) / 1440) / len(long_np_pr)\n","\n","      long_total_pr = np.cumprod(long_np_pr)\n","      \n","      long_for_sum_pr = long_np_pr - 1\n","      long_for_sum_pr[0] = 1\n","      long_sum_pr = np.cumsum(long_for_sum_pr)\n","      long_sum_pr = np.where(long_sum_pr < 0, 0, long_sum_pr)\n","\n","      long_wr = len(long_np_pr[long_np_pr > 1]) / len(long_np_pr[long_np_pr != 1])\n","\n","      t_w_l = np.sum(np.where((np_zone_list == 't') & (np_pr > 1) & (np_side_list == 'l'), 1, 0))\n","      c_w_l = np.sum(np.where((np_zone_list == 'c') & (np_pr > 1) & (np_side_list == 'l'), 1, 0))\n","      t_ls_l = np.sum(np.where((np_zone_list == 't') & (np_pr < 1) & (np_side_list == 'l'), 1, 0))\n","      c_ls_l = np.sum(np.where((np_zone_list == 'c') & (np_pr < 1) & (np_side_list == 'l'), 1, 0))\n","\n","      long_rollmax_pr = np.maximum.accumulate(long_total_pr)\n","      long_acc_mdd = np.max((long_rollmax_pr - long_total_pr) / long_rollmax_pr)\n","      long_rollmax_sumpr = np.maximum.accumulate(long_sum_pr)\n","      long_sum_mdd = np.max((long_rollmax_sumpr - long_sum_pr) / long_rollmax_sumpr)\n","\n","      np_long_tp_ratio_list = np.array(long_tp_ratio_list)\n","      mean_long_tr = np.mean(np_long_tp_ratio_list[np.isnan(np_long_tp_ratio_list) == 0])\n","      \n","      np_long_dr_list = np.array(long_dr_list)\n","      mean_long_dr = np.mean(np_long_dr_list[np.isnan(np_long_dr_list) == 0])\n","\n","      # long_pr_gap = (long_np_pr - 1) / config.lvrg_set.leverage + fee\n","      # long_tp_gap = long_pr_gap[long_pr_gap > 0]\n","      # # mean_long_tp_gap = np.mean(long_pr_gap[long_pr_gap > 0])\n","      # # mean_long_ls_gap = np.mean(long_pr_gap[long_pr_gap < 0])\n","\n","      # mean_long_pgfr = np.mean((long_tp_gap - fee) / abs(long_tp_gap + fee))\n","\n","      plt.subplot(gs[2])\n","      plt.plot(long_total_pr)\n","      plt.plot(long_sum_pr, color='gold')\n","      if len(nontp_long_liqd_list) != 0:\n","\n","        max_nontp_long_term = len(res_df) - nontp_long_indexs[0]\n","\n","        plt.title(\"wr : %.3f\\nlen(long_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (long_wr, len(long_np_pr[long_np_pr != 1]), long_dpf, np.min(long_np_pr), long_total_pr[-1], long_sum_pr[-1], long_sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (long_acc_mdd, long_sum_mdd, config.lvrg_set.leverage, min(long_liqd_list), mean_long_tr, mean_long_dr)  + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n nontp_liqd : %.3f\\n nontp_liqd_pr : %.3f\\n max_nontp_term : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_long_liqd_list), min(nontp_long_liqd_list), min(nontp_long_pr_list), max_nontp_long_term, t_w_l, c_w_l, t_ls_l, c_ls_l) ,\n","                  position=title_position, fontsize=fontsize)\n","      else:\n","        plt.title(\"wr : %.3f\\nlen(long_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (long_wr, len(long_np_pr[long_np_pr != 1]), long_dpf, np.min(long_np_pr), long_total_pr[-1], long_sum_pr[-1], long_sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (long_acc_mdd, long_sum_mdd, config.lvrg_set.leverage, min(long_liqd_list), mean_long_tr, mean_long_dr) + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_long_liqd_list), t_w_l, c_w_l, t_ls_l, c_ls_l),\n","                  position=title_position, fontsize=fontsize)\n","\n","      long_survey_df.iloc[survey_i] = long_wr, long_sr, len(long_np_pr[long_np_pr != 1]), long_dpf, \\\n","        long_total_pr[-1], long_sum_pr[-1], long_acc_mdd, long_sum_mdd, min(long_liqd_list), np.min(long_np_pr), mean_long_tr, mean_long_dr\n","\n","      print('supblot233 passed')\n","\n","    except Exception as e:\n","      print(\"error in 233 :\", e)\n","\n","\n","    try:\n","      #     reversion adjustment      #\n","      # rev_np_pr = 1 / (np.array(pr_list) + fee) - fee\n","      rev_fee = tp_fee + out_fee - np.array(fee_list)\n","      rev_np_pr = (1 / ((np.array(pr_list) - 1) / config.lvrg_set.leverage + np.array(fee_list) + 1) - rev_fee - 1) * config.lvrg_set.leverage + 1\n","      # rev_np_pr = (1 / (np.array(pr_list) + fee) - fee - 1) * config.lvrg_set.leverage + 1\n","          \n","      rev_sr = sharpe_ratio(rev_np_pr)\n","\n","      rev_total_pr = np.cumprod(rev_np_pr)\n","      rev_wr = len(rev_np_pr[rev_np_pr > 1]) / len(rev_np_pr[rev_np_pr != 1])\n","\n","      rev_total_for_sum_pr = rev_np_pr - 1\n","      rev_total_for_sum_pr[0] = 1\n","      rev_total_sum_pr = np.cumsum(rev_total_for_sum_pr)\n","      rev_total_sum_pr = np.where(rev_total_sum_pr < 0, 0, rev_total_sum_pr)\n","\n","      rev_rollmax_pr = np.maximum.accumulate(rev_total_pr)\n","      rev_acc_mdd = np.max((rev_rollmax_pr - rev_total_pr) / rev_rollmax_pr)\n","      rev_rollmax_sumpr = np.maximum.accumulate(rev_total_sum_pr)\n","      rev_sum_mdd = np.max((rev_rollmax_sumpr - rev_total_sum_pr) / rev_rollmax_sumpr)\n","\n","      plt.subplot(gs[3])\n","\n","      plt.plot(rev_total_pr)\n","      plt.plot(rev_total_sum_pr, color='gold')\n","\n","      plt.title(\"wr : %.3f\\n sr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n min_pr : %.3f\" \n","                % (rev_wr, rev_sr, rev_total_pr[-1], rev_total_sum_pr[-1], \n","                   rev_acc_mdd, rev_sum_mdd, np.min(rev_np_pr)), fontsize=fontsize)\n","      \n","      rev_survey_df.iloc[survey_i] = rev_wr, rev_sr, rev_total_pr[-1], rev_total_sum_pr[-1], rev_acc_mdd, rev_sum_mdd, np.min(rev_np_pr)\n","\n","    except Exception as e:\n","      print(\"error in 234 :\", e)\n","\n","    try:\n","      #         short       #\n","      # rev_short_np_pr = 1 / (np.array(short_list) + fee) - fee\n","      rev_short_fee = tp_fee + out_fee - np.array(short_fee_list)\n","      rev_short_np_pr = (1 / ((np.array(short_list) - 1) / config.lvrg_set.leverage + np.array(short_fee_list) + 1) - rev_short_fee - 1) * config.lvrg_set.leverage + 1\n","      # rev_short_np_pr = (1 / (np.array(short_list) + fee) - fee - 1) * config.lvrg_set.leverage + 1\n","      \n","      rev_short_sr = sharpe_ratio(rev_short_np_pr)\n","          \n","      short_rev_total_pr = np.cumprod(rev_short_np_pr)\n","      rev_short_wr = len(rev_short_np_pr[rev_short_np_pr > 1]) / len(rev_short_np_pr[rev_short_np_pr != 1])\n","\n","      rev_short_for_sum_pr = rev_short_np_pr - 1\n","      rev_short_for_sum_pr[0] = 1\n","      short_rev_sum_pr = np.cumsum(rev_short_for_sum_pr)\n","      short_rev_sum_pr = np.where(short_rev_sum_pr < 0, 0, short_rev_sum_pr)\n","\n","      short_rev_rollmax_pr = np.maximum.accumulate(short_rev_total_pr)\n","      short_rev_acc_mdd = np.max((short_rev_rollmax_pr - short_rev_total_pr) / short_rev_rollmax_pr)\n","      short_rev_rollmax_sumpr = np.maximum.accumulate(short_rev_sum_pr)\n","      short_rev_sum_mdd = np.max((short_rev_rollmax_sumpr - short_rev_sum_pr) / short_rev_rollmax_sumpr)\n","\n","      plt.subplot(gs[4])\n","\n","      plt.plot(short_rev_total_pr)\n","      plt.plot(short_rev_sum_pr, color='gold')\n","\n","      plt.title(\"wr : %.3f\\n sr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n min_pr : %.3f\" \n","                % (rev_short_wr, rev_short_sr, short_rev_total_pr[-1], short_rev_sum_pr[-1], \n","                   short_rev_acc_mdd, short_rev_sum_mdd, np.min(rev_short_np_pr)), fontsize=fontsize)\n","      \n","      rev_short_survey_df.iloc[survey_i] = rev_short_wr, rev_short_sr, short_rev_total_pr[-1], short_rev_sum_pr[-1], short_rev_acc_mdd, short_rev_sum_mdd, np.min(rev_short_np_pr)\n","\n","    except Exception as e:\n","      print(\"error in 235 :\", e)\n","\n","    try:\n","      #         long       #\n","      # rev_long_np_pr = 1 / (np.array(long_list) + fee) - fee\n","      rev_long_fee = tp_fee + out_fee - np.array(long_fee_list)\n","      rev_long_np_pr = (1 / ((np.array(long_list) - 1) / config.lvrg_set.leverage + np.array(long_fee_list) + 1) - rev_long_fee - 1) * config.lvrg_set.leverage + 1\n","          \n","      rev_long_sr = sharpe_ratio(rev_long_np_pr)\n","\n","      long_rev_total_pr = np.cumprod(rev_long_np_pr)\n","      rev_long_wr = len(rev_long_np_pr[rev_long_np_pr > 1]) / len(rev_long_np_pr[rev_long_np_pr != 1])\n","\n","      rev_long_for_sum_pr = rev_long_np_pr - 1\n","      rev_long_for_sum_pr[0] = 1\n","      long_rev_sum_pr = np.cumsum(rev_long_for_sum_pr)\n","      long_rev_sum_pr = np.where(long_rev_sum_pr < 0, 0, long_rev_sum_pr)\n","\n","      long_rev_rollmax_pr = np.maximum.accumulate(long_rev_total_pr)\n","      long_rev_acc_mdd = np.max((long_rev_rollmax_pr - long_rev_total_pr) / long_rev_rollmax_pr)\n","      long_rev_rollmax_sumpr = np.maximum.accumulate(long_rev_sum_pr)\n","      long_rev_sum_mdd = np.max((long_rev_rollmax_sumpr - long_rev_sum_pr) / long_rev_rollmax_sumpr)\n","\n","      plt.subplot(gs[5])\n","\n","      plt.plot(long_rev_total_pr)\n","      plt.plot(long_rev_sum_pr, color='gold')\n","\n","      plt.title(\"wr : %.3f\\n sr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n min_pr : %.3f\" \n","                % (rev_long_wr, rev_long_sr, long_rev_total_pr[-1], long_rev_sum_pr[-1], \n","                   long_rev_acc_mdd, long_rev_sum_mdd, np.min(rev_long_np_pr)), fontsize=fontsize)\n","      \n","      rev_long_survey_df.iloc[survey_i] = rev_long_wr, rev_long_sr, long_rev_total_pr[-1], long_rev_sum_pr[-1], long_rev_acc_mdd, long_rev_sum_mdd, np.min(rev_long_np_pr)\n","      \n","    except Exception as e:\n","      print(\"error in 236 :\", e)\n","\n","    if show_plot:\n","      \n","      frq_dev, s_frq_dev, l_frq_dev = frq_dev_plot(res_df, trade_list, side_list, plot=False)      \n","      plt.subplot(gs[6])\n","      plt.plot(frq_dev)\n","\n","      plt.subplot(gs[7])\n","      plt.plot(s_frq_dev)\n","\n","      plt.subplot(gs[8])\n","      plt.plot(l_frq_dev)\n","\n","      plt.show()\n","    \n","\n","    try:\n","\n","      h_np_pr = np.array(h_pr_list)\n","      # h_rev_np_pr = 1 / (np.array(h_pr_list) + fee) - fee    # define, for plot_check below cell\n","      h_rev_np_pr = (1 / ((np.array(h_pr_list) - 1) / config.lvrg_set.leverage + np.array(fee_list) + 1) - np.array(fee_list) - 1) * config.lvrg_set.leverage + 1\n","\n","      # --------------------- h pr plot --------------------- #\n","      if len(h_np_pr[h_np_pr != 1]) != 0:\n","\n","        plt.figure(figsize=(16, 12))\n","        plt.suptitle(key + \" hedge\")\n","\n","        h_total_pr = np.cumprod(h_np_pr)\n","        h_wr = len(h_np_pr[h_np_pr > 1]) / len(h_np_pr[h_np_pr != 1])\n","\n","        plt.subplot(gs[0])\n","\n","        plt.plot(h_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_wr, np.min(h_np_pr), h_total_pr[-1], config.lvrg_set.leverage))\n","        # plt.show()\n","\n","        #         short only      #\n","        h_short_np_pr = np.array(h_short_list)\n","\n","        short_h_total_pr = np.cumprod(h_short_np_pr)\n","        h_short_wr = len(h_short_np_pr[h_short_np_pr > 1]) / len(h_short_np_pr[h_short_np_pr != 1])\n","        \n","        plt.subplot(gs[1])\n","        plt.plot(short_h_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_short_wr, np.min(h_short_np_pr), short_h_total_pr[-1], config.lvrg_set.leverage))\n","\n","        #         long only      #\n","        h_long_np_pr = np.array(h_long_list)\n","\n","        long_h_total_pr = np.cumprod(h_long_np_pr)\n","        h_long_wr = len(h_long_np_pr[h_long_np_pr > 1]) / len(h_long_np_pr[h_long_np_pr != 1])\n","        \n","        plt.subplot(gs[2])\n","        plt.plot(long_h_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_long_wr, np.min(h_long_np_pr), long_h_total_pr[-1], config.lvrg_set.leverage))\n","\n","\n","        #     reversion adjustment      #\n","            \n","        h_rev_total_pr = np.cumprod(h_rev_np_pr)\n","        h_rev_wr = len(h_rev_np_pr[h_rev_np_pr > 1]) / len(h_rev_np_pr[h_rev_np_pr != 1])\n","\n","        plt.subplot(gs[3])\n","        plt.plot(h_rev_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_rev_wr, np.min(h_rev_np_pr), h_rev_total_pr[-1], config.lvrg_set.leverage))\n","\n","        #         short       #\n","        # h_rev_short_np_pr = 1 / (np.array(h_short_list) + fee) - fee\n","        h_rev_short_np_pr =  (1 / ((np.array(h_short_list) - 1) / config.lvrg_set.leverage + np.array(short_fee_list) + 1) - np.array(short_fee_list) - 1) * config.lvrg_set.leverage + 1\n","           \n","        short_h_rev_total_pr = np.cumprod(h_rev_short_np_pr)\n","        h_rev_short_wr = len(h_rev_short_np_pr[h_rev_short_np_pr > 1]) / len(h_rev_short_np_pr[h_rev_short_np_pr != 1])\n","\n","        plt.subplot(gs[4])\n","        plt.plot(short_h_rev_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_rev_short_wr, np.min(h_rev_short_np_pr), short_h_rev_total_pr[-1], config.lvrg_set.leverage))\n","\n","        #         long       #\n","        # h_rev_long_np_pr = 1 / (np.array(h_long_list) + fee) - fee\n","        h_rev_long_np_pr =  (1 / ((np.array(h_long_list) - 1) / config.lvrg_set.leverage + np.array(long_fee_list) + 1) - np.array(long_fee_list) - 1) * config.lvrg_set.leverage + 1\n","            \n","        long_h_rev_total_pr = np.cumprod(h_rev_long_np_pr)\n","        h_rev_long_wr = len(h_rev_long_np_pr[h_rev_long_np_pr > 1]) / len(h_rev_long_np_pr[h_rev_long_np_pr != 1])\n","\n","        plt.subplot(gs[5])\n","        plt.plot(long_h_rev_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_rev_long_wr, np.min(h_rev_long_np_pr), long_h_rev_total_pr[-1], config.lvrg_set.leverage))\n","        \n","        if show_plot:\n","          plt.show()\n","          \n","    except Exception as e:\n","      print('error in h_pr plot :', e)   "],"metadata":{"id":"WQ0ISsnIdwH7"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"MteLY9PS2ZeK"},"source":["##### check statistical significance"]},{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":6509,"status":"ok","timestamp":1641884124312,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"NzbWuwSw2jaj","outputId":"8ff807a9-5e6f-4bbe-9850-031643f779a9"},"outputs":[{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAACVcAAAORCAYAAAD83ADdAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAPYQAAD2EBqD+naQAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nOzdeXhTdfbH8U+3dG9BByigVJRNRDYRBIGqDIugP1EZHUUFF2RRHAa3wa3qqMyogwg6Oogijo6iuCIIiFZAVkX2glooFQstZZGW7sv390ebC6FBlqa5Sfp+Pc95NDc36QnPbZqTe+75BkkyAgAAAAAAAAAAAAAAAAC4CLY7AQAAAAAAAAAAAAAAAADwRTRXAQAAAAAAAAAAAAAAAIAbNFcBAAAAAAAAAAAAAAAAgBs0VwEAAAAAAAAAAAAAAACAGzRXAQAAAAAAAAAAAAAAAIAbNFcBAAAAAAAAAAAAAAAAgBs0VwEAAAAAAAAAAAAAAACAGzRXAQAAAAAAAAAAAAAAAIAbNFcBAAAAAAAAAAAAAAAAgBs0VwEAbJGYmChjjIYNG2Z3KgAAAADcSE9P15w5c+xOAwAAAICXpKSkKCUlxe40AADwOTRXAUAd1L17dyUnJys+Pv6Un2P06NE0RgEAAADwiHPPPVfJyclKTEy0OxUAAAAAAADABc1VAFAH9ejRQ48//rjq1at3ys8xZswYDR8+3HNJAQAAAKiz2rZtq8cff1xnnXWW3akAAAAAAAAALmiuAgAAAAAAgC3Cw8MVFBRkdxoAAAAAAADAMdFcBQB1THJysp5//nlJ0o4dO2SMkTHGWn4jJCREjzzyiNLS0lRUVKT09HQ9/fTTcjgc1nOkp6erXbt2uuSSS6zHO9dhr1+/vp577jlt2LBBeXl5OnjwoObNm6f27dt7/8UCAAAAcKtRo0Z64403tHPnThUVFWnXrl365JNP3C7Ld/HFF2vVqlUqLCzUtm3bdPPNN1fbp3nz5nr//fe1b98+5efna8WKFRo4cKDLPklJSTLG6Prrr9ff//53/frrryooKNA999yj2bNnS5K++eYbq8ZISkqqnRcPAAAA4IQ1aNBA06dPV1ZWlgoLC7Vu3TrdcsstLvskJibKGKN7771XI0aMsM4vrF69Wl26dKn2nEOGDNHmzZtVWFiojRs3avDgwZoxY4bS09O99bIAADgpoXYnAADwro8++kitWrXSjTfeqHHjxmnv3r2SpJycHEnS9OnTNXz4cH3wwQf617/+pW7duumhhx7Sueeeq2uuuUaSNG7cOE2dOlWHDh3S008/LUnKzs6WJJ199tkaPHiwPvjgA6Wnp6tRo0YaOXKkFi9erLZt22r37t02vGoAAAAAR/rwww913nnnaerUqdqxY4caNmyovn37qlmzZsrIyLD2a9GihWbPnq3XX39dM2fO1G233aY333xTa9asUWpqqiSpYcOGWr58uaKiojRlyhTt27dPw4YN02effaYhQ4bok08+cfnZjz76qEpKSvT8888rPDxcCxcu1Isvvqi//OUvevrpp7VlyxZJsv4LAAAAwB4RERH65ptv1KJFC7300ktKT0/Xn/70J82cOVP16tXTlClTXPa/8cYbFRsbq//85z8yxuiBBx7QRx99pLPPPltlZWWSpIEDB2rWrFnauHGjJkyYoPr16+v1119XZmamHS8RAIATZgiCIIi6Fffee68xxpjExESX7e3btzfGGDNt2jSX7c8++6wxxphLLrnE2rZx40aTkpJS7bkdDocJCgpy2ZaYmGgKCwvNI4884rLNGGOGDRtm+78HQRAEQRAEQdSliI+PN8YYc++99/7ufunp6cYYY3r27Glt+8Mf/mAKCwvNc889Z22bNGmSMcaYiy++2NoWHR1ttm3bZrZv327VB0lJScYYY9LS0kxERITLz7r22muNMcYkJSXZ/u9DEARBEARBEHU1UlJSXL73v+eee4wxxtx4443WttDQULNs2TKTm5trYmJijHT4+/6cnBxTr149a98rr7zSGGPMoEGDrG3r1683v/zyi4mOjra29e7d2xhjTHp6uu3/BgRBEAThLlgWEABgcS7bMWnSJJft//rXvyRJgwYNOu5zlJSUyBgjSQoODtZpp52mQ4cO6ccff1Tnzp09nDEAAACAk1VYWKji4mJdcsklqlev3u/uu3nzZn377bfW7b179+rHH3/U2WefbW0bOHCgVq1apWXLllnb8vPzNW3aNDVv3lxt27Z1ec6ZM2eqqKjIQ68GAAAAQG0ZOHCgdu/erXfffdfaVlZWpilTpig2NrbaUt6zZs3Sb7/9Zt1eunSpJFn1Q+PGjdW+fXu99dZbys/Pt/ZbsmSJNmzYUJsvBQCAGqG5CgBgSUxMVHl5udLS0ly2Z2dn68CBA0pMTDzucwQFBWncuHH66aefVFxcrH379mnv3r3q0KGD4uPjayt1AAAAACeopKREDz74oC6//HJlZ2dr8eLFuv/++9WoUaNq+/7yyy/Vth04cED169e3bicmJurHH3+stp9zWb+j64j09PSavgQAAAAAXpCYmKiff/7ZuqDa6Vif9Y+uH5yNVs76wbn/0ecgjrUNAABfQXMVAKCaowulk/HQQw/phRde0JIlS3TTTTepX79++uMf/6hNmzYpOJg/OwAAAIAvePHFF9WqVStNmDBBRUVF+vvf/64tW7aoY8eOLvuVl5e7fXxQUNAp/+zCwsJTfiwAAAAA31Ub9QMAAL6As9wAUAcdq3kqIyNDISEhatmypcv2hg0bqn79+srIyDjucwwZMkRff/217rjjDs2aNUtffvmlvvrqq+MuNwIAAADAu7Zv365Jkyapf//+ateunRwOh+69996Tfp6MjAy1bt262vY2bdpY9x9PTS7wAAAAAFA7MjIy1LJly2rNUSfzWf/o55OkFi1aVLvP3TYAAHwFzVUAUAc51zI/uuFp3rx5kqRx48a5bB8/frwkae7cuS7P4a5hqry8vFqhNWTIEJ1xxhk1TxwAAABAjUVGRio8PNxl27Zt25SXl1dt+4mYN2+eunXrposuusjaFhUVpTvvvFPp6elKTU097nMcq0YBAAAAYJ958+apcePGuv76661tISEhGjt2rPLy8rR48eKTer7du3dr48aNuuWWWxQdHW1t7927t9q3b++xvAEA8LRQuxMAAHjfmjVrJElPP/203nvvPZWWlmrOnDnasGGD3nzzTY0cOVL16tXT4sWL1bVrVw0fPlwff/yxvvnmG5fnGD16tB5++GGlpaVpz549SklJ0eeff67k5GS98cYbWr58uc4//3wNHTpU27Zts+nVAgAAADhSq1at9NVXX+n9999XamqqysrKdPXVVyshIUHvvffeST/fP/7xD91www364osvNGXKFO3fv1/Dhg1T8+bNde21157QVKp169aprKxMDz74oOLj41VcXKyvv/5aOTk5p/ISAQAAAHjAtGnTNHLkSL355pu64IILtGPHDg0ZMkQ9e/bUX/7yFx06dOikn/Ohhx7Sp59+qmXLlmnGjBmqX7++7r77bm3cuFExMTG18CoAAPAMQxAEQdS9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h6di0lwFoFJt1jTOaXmhDoeCgm0v3wCvKMitnKISGXfik30RGKKjo7V+/Xrdddddbu9/4IEHdM8992jUqFHq1q2b8vPztWDBApeJ0O+8847OO+889e3b11oufdq0E5+cBpws59SqzK0/qTDXP6ZAOZcG5GI9oG44Xr1SWlqqNWvWuOwTFBSkPn36eOw8zdGcU4BoVMGxjB8/XpKUmZmp7Oxsffzxx2rVqtXvPmbYsGEyxrhEYWGhR/KxmqscHLMA/FtUfJzGvv2amrRuqdy9+/TKbXe7NFb5A5YFhF08PrkqOjpaLVq0sG43b95cHTp00P79+7Vz504988wzatq0qYYNGyZJevXVV3X33Xfrn//8p9544w1ddtlluu666zzWyWhNl6C5CrWstqewHS3qyMlVdOZClV96HC02Nla5R3y5a3c3OXCkyLhYdRrYT5K0/L0Pbc7mxDm/TGFZQCBw+VJNU3LE58iw8HCVeOiLYcCXFeYdkkRzVV00f/58zZ8//5j3jxs3Tk899ZQ++6zyi99bbrlF2dnZGjx4sGbNmqU2bdro8ssvV5cuXbRmzRpJ0tixYzVv3jzdd9992r17t1deB+qWllXNVWmr1ticyYmzltHg+yTAL9VGvTJp0iTNnDlT33//vVavXq1x48YpOjpaM2bMqJXXUFZaKomp4Di2nj17SpL69Omj4uJiPfPMM1q4cKHatm2rgqomYXcOHjyo1q1bW7eNMR7Jx1oWkIstAfi53jf/WXF/OF170jP06oixOpidY3dKJ62IegY28filz126dNG6deu0bt06SdILL7ygdevW6cknn5QkNW7cWM2aNbP237FjhwYNGqS+fftq/fr1uvfee3XHHXdo4cKFHsmH6RLwltqewna0qLgjJ1fxxwOA/+nyfwPliIzQrp/SlL52g93pnDDnFBm+AAQCly/VNM4vcCWaOlF3FObmSZIiY2muwmHNmzdX48aNtWjRImtbbm6uVq1ape7du0uSunfvrgMHDliNVZK0aNEiVVRUqFu3bsd8bofDodjYWJcATlSLblXNVau/tzmTE2c1V/F9EuCXaqNeef/993XffffpySef1Lp169SxY0cNGDBAe/bsqZXX4LxwTZJCWBoQbjhXW9i6das2bNig4cOHKzExURdccMHvPs4Yo+zsbCs8dQyXVl0kHxwcrJBQj8+tAACviIyLVc8b/yRJmjv5Fb9srJIO1zMR1DPwMo9/Ali8eLHb6SlOt956q9vHdO7c2dOpSDp8AtRBcxVOwfnnn6/8qtGCdk9hO9qRywLyxwOAvwkKCtLF11d+SbL8vY9szubklBQyFRMIdL5U0xhjVFpUrLCIcJo6UWdYzVVMrsIREhISJEnZ2dku27Ozs637EhISqp1AKy8v1/79+6193JkwYYIef/xxzyaMOuG0po11+hlNVV5WpvQf/OeCkeKCykmYfJ8E+KfaqldefvllvfzyyzXO70QceRFJWLhD5VWTrIBjiY+vXMlj//79v7tfTEyMduzYoeDgYP3www966KGHlJqaesz9HQ6HyxLTx2qyP/KYDQ13qLys7GTSBwCf0GvodYqMjdGun9K0OWWJ3emcMutiEZYFhJd5fHKVr3EuCxjKiQicgmXLlvnExAJ3jlwW0BEVWSs/AwBqS4tuXdTgrGYqOpSvH+YusDudk2ItC0hzFQAvYRov6prDk6tibM4EdcXEiRMVFxdnRdOmTe1OCX6ixYWV0zN2btqi4t9ZosjXOHN1sIwGAJsc2ZgSGu6wMRP4g6CgIE2ePFnffvutNm/efMz9fvzxR91222266qqrdNNNNyk4OFjLly//3c92EyZMUG5urhWZmZlu9ysrObIhkNocgP+JiIlW75uulyR9+eobHls21Q5FVYNRQsPCmIAJrwr42ZUl1uQqToDi5MXFxSkvL8/tfd6ewna0IydXMcYdgL/pUTW16vs5X/jVSQjpiGUBaXIA4CWV7zvxLAuIOqMw75AkJlfBVVZWliSpUaNG1v87bzsvisrKylLDhg1dHhcSEqLTTjvN5TFHKykpUckRJ8yAE+VcEvBnP1oSUDriSm+aqwDYyDmhNzSM5ir8vpdfflnt2rVTz549f3e/lStXauXKldbt5cuXa8uWLRo5cqQee+wxt4+ZOHGiJk2aZN2OjY09ZoOVdcw6OGYB+J+eQ69TZFysstK2a+Oib+xOp0ZKqibxSpXTePN/O2hjNqhL6szkKk5EINC4NFfxZRgAPxLfqIHaXdpLkrR8ln8tCShJJYU0VwHwLmdNw9WxqCsKc3MlSZHHWJIDdVN6erp2796tPn36WNtiY2PVrVs3rVixQpK0YsUK1a9f3+Wip8suu0zBwcFatWqV13NG4HNOrkpbtcbmTE6O80pvLtYDYKfSEueqIzSq4Nief/55XXHFFbr00kuP2fR0LGVlZVq7dq1atGhxzH1KSkqUl5fnEsfCMQvAX4VHRynp5j9Lkr78zwy/nlolSRXl5dZ5GmoaeFOdaa5iWUAEmuj4w8sCRkSzpiwA/3HRkMEKDglR2uo1yt6Wbnc6J825LCBNDgC85fCygFwwgrrBObkqislVdU50dLQ6dOigDh06SJLOOussSdIZZ5whSZo8ebIeeeQRXXnllWrXrp3eeust7dq1S5988okkaevWrfriiy/02muv6cILL1SPHj300ksv6b333tPu3btteU0IXA3Oaqb4Rg1UWlysHes32Z3OSXFOD47gRAQAG5WVlEqSwmhUwe+44oordNlll2nHjh0n/djg4GCdf/75HvscWFZcOemU7wQB+JueN/xJUfFxyt6+Q+sXfm13Oh5x+IIRzpHDewK+uYplARGoIuMPn2igKxeAvwgODdFF1/6fJGmZH06tkg4vC8hUTADewjRe1DXO5qqI2BibM4G3denSRevWrbOW+Zs4caIk6eGHH5YkPfvss5o6daqmTZum7777TjExMRowYICKq5rfJWno0KHaunWrvvrqK82bN0/ffvut7rzzTu+/GAS8Fl0rp1btWLdRZUccg/7AuYwG3ycBsJOzUSXUQaMKqnMu1Xf77bcrLy9PjRo1UqNGjRRxxLm+mTNn6plnnrFuP/roo+rbt6+aN2+uTp066e2331ZiYqKmT5/ukZxKreYqGgIB+I/wqCglDbtBkrRo2gyZigqbM/IM51LnXDACbwr45irnCdCwSD6gI7CwLCAAf9S6ezfFNfiD8vbt16avF9udzik5vCwgTQ4AvINlAVETI0aMUHp6ugoLC7Vy5UpdeOGFJ/S466+/XsYYffzxx7WcYXXOZQGj4uKOsycCzeLFixUUFGRFXNUxMHr0aGuf5ORkNW7cWJGRkerbt69+/vlnl+c4cOCAhg4dqri4ONWrV0+333678quuaAU8qWW3LpKktNX+tSSgdPhEhCMy0uZMANRlZSXO5qowmzOBL7rjjjskSV988YWysrKsuP766619mjVrpsaNG1u369evr9dee01btmzRvHnzFBcXpx49emjLli0eyck6ZqnNAfiRHn++RtH14pWz4xetm/+V3el4jLOm4YIReFOo3QnUNk5EIBCFhIa6LAXIHw4A/qLz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ZSLT8vrrr+PRRx9FUFAQKisr8fvvv2Pp0qW4cuVKi9tNnz4d7777LgICAnD16lUsXboUhw4davfv5zmHjAGPYzIWPJbJGPA4JiJ943mHjAGPYzIGPI7JWPBYJkNhLnQAREREREREhuL+++/Hli1bMGLECEyYMAESiQSHDx+GnZ1ds9uEhYXhyy+/xM6dOzFw4EDs27cP+/btQ79+/fQYORERERERERERERER6YJRVa4iIiIiIiLqjMmTJ2v8/OyzzyIvLw+DBw/Gb7/91uQ2L7/8MqKjo7FmzRoAwNtvv40JEybgxRdfxPz583UeMxERERERERERERER6Q4rVxERERERETXD0dERAFBYWNjsmLCwMMTGxmqsi4mJQVhYWLPbWFlZQSaTaSxERERERERERERERGR4mFxFREREgluwYAFSUlJQWVmJkydPYujQoc2OfeSRR3D69GkUFRWhrKwM58+fx1NPPdVo3IoVK5CZmYmKigocOXIEPXr00OVbICIjZGZmhvXr1+P48eNITk5udpynpydycnI01uXk5MDT07PZbSIjI1FSUqJeMjIytBY3ERERERERERERERFpD5OriIiISFB/+9vfsHbtWqxYsQKDBg1CQkICYmJi4Obm1uT4wsJC/POf/0RYWBgGDBiAXbt2YdeuXfjLX/6iHvPaa6/hpZdeQkREBIYPH47y8nLExMTA2tpaX2+LiIzAli1bEBwcjBkzZmh936tWrYKDg4N68fHx0frvICIiIiIiIiIiIiKizmNyFRGRCZg7d26bqwLd7YknnoBCocD333+v4wjJlC1evBg7duzAJ598gkuXLiEiIgIVFRWYPXt2k+OPHTuGffv24fLly7hx4wY2btyIxMREjB49Wj1m0aJFeO+997B//34kJSVh1qxZ8Pb2xrRp0/T1tohI5DZt2oSpU6di3LhxrVaVys7OhoeHh8Y6Dw8PZGdnN7uNXC5HaWmpxkJERERERERERERERIbHUugAiIQSPucZBIT2R9w3+3Dx2HGhwyHqECcPdzy74V+4fvo8DvxnU7PjoqKiEBERgVOnTmHRokWIiYlB7969kZeX1+w2/v7+WLNmDX799VddhE4EAJBIJBg8eDBOpN/A0/9+F4c//Bg511MQGxuLsLCwNu3jgQceQO/evbF06VIAQGBgILy8vBAbG6seU1JSglOnTiEs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5IJjGroaXnfIUv7+/khPT8e6devw+eefw9PTE2q12uycv19zIiIisHXrVqxcuRIPPPAA4uLisHr1apw7dw47duww3ebIkSO47bbbTF/r9Xqr28Yck61xbE5ywDENycG15lgW2wKGhIQgLy9P6maQDIWGhrbqHwpmmVpKa2aZOaaWsn79erzxxhsoKipCt27dkJGRgczMzAbPjYiIwJEjR7By5UqsXr0acXFxeOuttzB27FizF1yawixTS2jt5xZUX0pKCg4cOIAnnngCAKBQKJCTk4N3330XS5curXd+Xl4eXnnlFbz33numYxs2bIBWq8WDDz4IANiyZQs0Gg0eeeSRRs+5Gl5zqKXweSDJAcfmJAfMMckFxzTUGF53qCXUXXNeffVVjB07Fn379jV9b926dfDz88Ptt98OwLhy1V133YUbbrjB4vt3c3ODu7u76evg4GCcOHHCdh0guoxjc5IDjmlIDq4lx7JYuaputmJoaChnLpJNqNVq5OXltXqemGWyNSmyzByTrS1evBj/+c9/MHXqVFOmsrOzm7zNtGnTkJWVhWeffRYAkJ6ejsGDB+Ppp5+2eHIVs0y2JNVzCzKnUqnQv39/LFmyxHRMCIGdO3ciJiamwdu4u7ujqqrK7JhWq8XgwYNNX+/duxePPvoounXrhlOnTuG6667D4MGDMWvWrEbbcuULuHV4zSFb4fNAkgOOzUkOmGOSC45p6Gp43aHmKisrw/3334+tW7eajl15zYmJicHOnTvNbrd9+3a89dZbZse6deuGvLw8VFVVYd++fZgzZw5ycnIafew5c+Zg/vz59Y4zx2QrHMLFk84AACAASURBVJuTHHBMQ3JgixzLYnJVnfLycv7DIllglkkOmGOylbqlvJOSknDLLbcgLy8P7733HlavXt3obSx9weXvrpzoULcUObNMJB8dOnSAq6srNBqN2XGNRoMePXo0eJvt27dj1qxZ+PXXX5GRkYG4uDjcc889cHFxMZ3z6quvwsfHB+np6TAYDHBxccGLL76Izz//vNG2NPYCLq85JAfMMckFs0xywBwTUWvjdYeaQ6vVNpmboKCgBsfyvr6+8PDwQFVVFVJTU/HQQw/hxIkTCA4Oxrx587Br1y706dMHly5davB+lyxZgoSEBNPXf3/jlTkmR8cck1wwy2QvlFI3gIiIiKgpERERAICMjAyM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tNpcqjQaq+2bSCy66mq2OSfRsbiKiIiIiIiISGbi4+OxceNGnDhxAseOHcPf/vY3s7YCn332mdn4HTt2YOHChTh9+jSOHj2KiIiIu1pcvvfee9ixYwcyMzPRoUMHLF26FDqdDgkJbKFMREREREREREREjovFVUREREREREQys2XLFrRr1w6xsbEICgpCcnIyxo8fj7y8PABAx44dzcYvX74cer0ey5cvR0hICPLz87Fjxw688cYbwpiOHTsiISEB/v7+yM/Px8GDBzFs2DAUFBSIemxERATMmzcP8+fPR1hYGADg3LlziI2Nxa5du6SdGBEREREREZEDYnEVERERERERkQw11uJy4sSJKCkpEb5uSovLGTNmWHyORETUMjdv3sTrr7+Oy5cvw8nJCbNmzcL27dsxYMAAnD9/XurpERERERERETkUFlcRERERERERERER2ZAffvjB7OvFixdj/vz5GDZsGIuriIiIiIiIiETG4ioiIiIiIiIiIiIiG6VQKPD4449DpVIhKSmp3jGurq5wc3MTvvb09BRrekRERERERER2TyH1BIiIiIiIiIiIiIjIXN++fVFaWoqqqip8+umnmDJlCtLS0uodGxMTg5KSEmHLysoSebZERERERERE9suukqt4RxZZitRrSerXJ/sh5VriOiZLkXotSf36ZB+4jqipuFbIUvg5kOyB1GtJ6tcn+9CadXTx4kX0798f3t7emDZtGjZu3IhRo0bVW2AVFxeH+Ph4s9fNysriOiaL4VqipuJaIUuQeh1J/fpkP/i7OdkDqdeS1K9P9sES68guiqtMfxC8I4sszdPTE6WlpaK+HsC1TJYn5lrmOiZr4Xsy2QOx1zHJB99zyFr4OZDsAT8Hkj1oyTqurq7G1atXAQCnTp1CZGQkFixYgHnz5t01VqvVQqvVmr0ewHVMlsffaaghfN8ha+DnQLIX/N2c7AHfk8ketGYdOwHQW3Y60ujQoYPN/VJnukMsJCTE5ubWEo52PJ6ensjOzhZ9XlzL1udoxyPFWuY6tj5HOx6+J9dxtL97uWnseKRaxyQffM+xPkc7Hn4ONHC0v3e5scV1DHAti8GRjsdS6/inn37C9evX8dxzzzVpPNex9Tna8fB3GroXqd937O3fpIm9Hhdgm+dRpF7HgP3+nTvqcTnq7+aO+vctV7a4jgGuZWtyxONq7Tq2i+QqADb9S11paaldLUhHOR6pjpFrWTyOcjxSHCPXsXgc5Xj4nnw3R/m7l6v6jseejo+sg+854nGU4+HnQHOO8vcuV7a0jgGuZTE5wvG05PhWrFiBxMREXL9+HZ6ennjqqacwevRojBs3rsn74DoWj6Mcjz0dI1mHrbzv2Nu/SRN7PS7Ats6j2Mo6Buz379zRjsvRfzd3tL9vubOldQxwLYvBkY6rtcdpN8VVRERERERERERERPagffv2+OqrrxAcHIzi4mKkpqZi3Lhx2Ldvn9RTIyIiIiIiInI4LK4iIiIiIiIiIiIisiHPP/+81FMgIiIiIiIiIiNnAP+UehL2TKfT4cCBA9DpdFJPxSJ4PI7L3v6seDyOyd7+nHg8jsve/qx4PES2zd7WNI/HMdnbnxOPx3HZ258Vj8cx2dufE4+HyLbY6xq21+MC7PvYWsNe/1x4XI7FXv9ceFyOx17/bHhczeMEQG/RPRIREREREREREREREREREREREdkBhdQTICIiIiIiIiIiIiIiIiIiIiIiskUsriIiIiIiIiIiIiIiIiIiIiIiIqoHi6uIiIiIiIiIiIiIiIiIiIiIiIjqweIqIiIiIiIiIiIiIiIiIiIiIiKierC4ioiIiIiIiIiIiIiIiIiIiIiIqB4srmqBBx98EP/973+RlZUFvV6PRx999K4xS5cuRXZ2NjQaDfbu3YuIiAiz7/v6+mLz5s0oLi5GUVERvvjiC6hUKrEOwcy9jmfDhg3Q6/VmW2JiotkYWzme119/HceOHUNJSQnUajW+//57dO/e3WyMm5sbVq9ejYKCApSWlmLr1q1o37692ZhOnTrhhx9+QHl5OdRqNd599104OzuLeShWx3Vsu+sY4FpuDq5l213LXMdNx3XMdUwkJr7n2O57DsD3nebgWrbdtcx13HRcx7a7jgGu5ebgWrbdtcx1TPbA3t5jTOzpvcaE7zkN4zqWzzoGuJYbw7Usn7XMddwwrmP5rGPAdtYyi6taQKVSISUlBX/+85/r/f4//vEP/PWvf8W8efMwdOhQlJeXY/fu3XBzcxPGfP311+jTpw+io6MxadIk/OEPf8C6devEOgQz9zoeAEhMTPz/7d1PSFT/GsfxT3r9Q5Lyk3K0qIishCRBiUmptMBykQhFSCvbRNsoaF9Qi1oUmEKLcOWiRbqyrKRVLoLcWEEuyoIyx0hNChlQn7s4dw5Nd/Lq2HW+5/h+wRdqzknm6bx5VodSaWmpf86cOZN03ZV56uvr1dHRoQMHDqixsVE5OTl68uSJ1q9f799z69YtNTc36/Tp06qvr9fmzZvV09PjX8/KylJfX59yc3NVV1entrY2nT17VlevXl31ef6f6NjdjiVaXg5adrdlOl46OqZjYDWxc9zdORJ7Zzlo2d2W6Xjp6NjdjiVaXg5adrdlOkYYhG3HJIRp1ySwc/6MjoPTsUTLi6Hl4LRMx39Gx8HpWHKrZeOkf8zMWlpakj4bGxuzS5cu+b8vLCy02dlZa21tNUlWUVFhZmY1NTX+PcePH7f5+XkrKytzbp6uri7r7e39459xeZ6NGzeamdmhQ4f8ZxGPx+3UqVP+PXv27DEzs2g0apKsqanJ5ubmrKSkxL/n/PnzNj09bTk5ORlvbrWeOx27M49Eyyt59rTszjx0TMeJQ8fh75gTnMPOcXseib2zkmdPy+7MQ8d0nDhB7lii5ZU8e1p2Zx465gT9hG3HLDZXkHdN4rBz6DgMHUu0vJxnTsvuzkXHdByGjqXMtcy/XPWX7dixQ2VlZRoYGPA/m5mZ0YsXL1RbWytJqq2t1dTUlIaGhvx7BgYGtLCwoGg0uurfeSkaGhoUi8X09u1bdXZ2qri42L/m8jxFRUWSpMnJSUlSTU2NcnNzk57PyMiIPn78mPR8Xr16pYmJCf+ex48fq6ioSHv37l3Fb585dOxxaR5aTg8te1yZh47TQ8ceV+ahY4QdO8fj0jzsnfTQsseVeeg4PXTscWkeWk4PLXtcmYeOETZh3TEJQd01CeycpaFj9+ei5aWhZbfnouOloWP358pUy//6WwPAU1paKkmKxWJJn8diMf9aaWlp0kOTpPn5eU1OTvr3uKS/v189PT0aHR3Vzp07df36dT169Ei1tbVaWFhwdp5169bp9u3bev78ud68eSPJ+7uPx+P6/v170r2/P59Uzy9xbS2gY48r89By+mjZ48I8dJw+Ova4MA8dYy1g53hcmYe9kz5a9rgwDx2nj449rsxDy+mjZY8L89AxwiiMOyYhqLsmgZ2zdHTs9ly0vHS07O5cdLx0dOz2XJlsmZer8D/dv3/f//Xr1681PDys9+/fq6GhQc+ePcvgN1tcR0eHKisrdfDgwUx/FTggqB1LtIxkQW2ZjvErOgawmoK6cyT2DpIFtWU6xq+C2rFEy0gW1JbpGAiWoO6aBHYOpOB3LNEyPEFvmY4hBb9jKbMt898C/mXj4+OSpEgkkvR5JBLxr42Pj6ukpCTpenZ2toqLi/17XDY6OqqvX7+qvLxckpvztLe368SJEzpy5Ig+f/7sfz4+Pq68vDz/n4pL+P35pHp+iWtrAR17XJiHlleGlj2ZnoeOV4aOPZmeh46xVrBzPC7Mw95ZGVr2ZHoeOl4ZOva4MA8trwwtezI9Dx0jrNbCjkkIwq5JYOcsDx27OxctLw8tuzkXHS8PHbs7lwstGyf9Y2bW0tKS9NnY2JhdvHjR//2GDRtsdnbWWltbTZJVVFSYmVl1dbV/T2Njo83Pz1tZWZlz8/x+tmzZYvPz89bc3OzkPO3t7fbp0ycrLy//r2uFhYUWj8ft5MmT/me7d+82M7NoNGqSrKmpyebm5mzTpk3+PefOnbPp6WnLzc3NeHOr9dzpOPPz0DIth6FlOqZjOl6bHXOCc9g5bs7D3qHlMLRMx3Qcho4lWv5bz56W2ckczt86Ydsxi831+3F91yQOO4eOF7snKB1LtJzuM6dlt+aiYzpe7J6gdCw503LmH2zQTkFBgVVVVVlVVZWZmV24cMGqqqps69atJskuX75sk5OT1tzcbJWVldbb22vv3r2zvLw8/2c8fPjQhoaGbP/+/VZXV2cjIyPW3d3t3DwFBQV248YNi0ajtn37djt69Ki9fPnSRkZGkiJzZZ6Ojg6bmpqyw4cPWyQS8U9+fr5/T2dnp3348MEaGhqsurraBgcHbXBw0L+elZVlw8PD1t/fb/v27bNjx45ZLBaza9euZbw9Ol4bHdMyLYelZTqmYzpeWx1zgnPYOe7uHIm9Q8vhaJmO6TgMHdMyLYelZTrmhOGEbccsZa6g7ZrEYefQcRg6pmVaDkvLdEzHYejYsZYzH2/QTn19vaXS1dXl33PlyhX78uWLzc7O2tOnT23Xrl1JP+Off/6x7u5um5mZsenpabt3754VFBQ4N09+fr719/dbLBazeDxuo6OjdvfuXSspKXFynj9pa2vz78nLy7M7d+7Yt2/f7MePH/bgwQOLRCJJP2fbtm3W19dnP3/+tImJCbt586ZlZ2dnvD06Xhsd0zIth6VlOqZjOl5bHXOCc9g57u4cib1Dy+FomY7pOAwd0zIth6VlOuaE4YRtxyxlrqDtmsRh59BxGDqmZVoOS8t0TMdh6Nilltf95xcAAAAAAAAAAAAAAAAAgF9kZfoLAAAAAAAAAAAAAAAAAICLeLkKAAAAAAAAAAAAAAAAAFLg5SoAAAAAAAAAAAAAAAAASIGXqwAAAAAAAAAAAAAAAAAgBV6uAgAAAAAAAAAAAAAAAIAUeLkKAAAAAAAAAAAAAAAAAFLg5SoAAAAAAAAAAAAAAAAASIGXqwAAAAAAAAAAAAAAAAAgBV6uAgAAAAAAAAAAAAAAAIAUeLkKAAAAAAAAAAAAAAAAAFLg5SoAAAAAAAAAAAAAAAAASOHfDJ7nSGcTxFcAAAAASUVORK5CYII=\n","text/plain":["<Figure size 3000x1000 with 36 Axes>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 3000x1000 with 21 Axes>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","\n"]}],"source":["# print(survey_df)\n","\n","plt.style.use('dark_background')\n","\n","title_name_list = [[\"total\", \"short\", \"long\"], [\"rev_total\", \"rev_short\", \"rev_long\"]]\n","survey_dfs_list = [[survey_df, short_survey_df, long_survey_df], [rev_survey_df, rev_short_survey_df, rev_long_survey_df]]\n","# title_name = \n","# survey_df_list = \n","\n","space_ = \" \" * 140\n","\n","for d_idx, (title_name, survey_dfs) in enumerate(zip(title_name_list, survey_dfs_list)):\n","\n","  fig = plt.figure(figsize=(30, 10))\n","\n","  gs = gridspec.GridSpec(nrows=1, # row Î™á Í∞ú \n","                          ncols=3, # col Î™á Í∞ú \n","                          # height_ratios=[1, 1, 1]\n","                        )\n","\n","  # gs = fig.add_gridspec(1, 3, wspace=0, hspace=0)\n","\n","  # nrows, ncols, h_r = 3, 3, [1, 1, 1]\n","  nrows, ncols, h_r = 3, 4, [1, 1, 1]\n","  # nrows, ncols, h_r = 4, 3, [1, 1, 1, 1]\n","\n","  # if d_idx == 0:\n","  # else:\n","    # nrows, ncols, h_r = 2, 2, [1, 1]\n","\n","  for gs_idx, (title, s_df) in enumerate(zip(title_name, survey_dfs)):  \n","\n","\n","    inner_gs = gs[gs_idx].subgridspec(nrows=nrows, # row Î™á Í∞ú \n","                          ncols=ncols, # col Î™á Í∞ú \n","                          height_ratios=h_r\n","                        )\n","\n","    for col_idx, s_cols in enumerate(s_df.columns):\n","      plt.subplot(inner_gs[col_idx])\n","      plt.plot(s_df[s_cols])\n","      plt.title(s_cols)\n","\n","  # plt.suptitle(\"total\" + \" \" * 140 + \"short\" + \" \" * 140 + \"long\")\n","  plt.suptitle(space_.join(title_name))\n","  plt.show()\n","  print(\"\\n\")"]},{"cell_type":"markdown","metadata":{"id":"o-XjNS1L31YB"},"source":["##### ep_loc.point & zone legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"taB2j7kT33iN"},"outputs":[],"source":["\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 (res_df['close'] < res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(strat_version)] - 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] >= res_df['bb_lower_1m']) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['bb_lower_1m']) &\n","    #                 (res_df['close'] < res_df['bb_lower_1m'])\n","    #                 , res_df['entry_{}'.format(strat_version)] - 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   (res_df['close'] > res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(strat_version)] + 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] <= res_df['bb_upper_1m']) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['bb_upper_1m']) &\n","    #                   (res_df['close'] > res_df['bb_upper_1m'])\n","    #                 , res_df['entry_{}'.format(strat_version)] + 1, res_df['entry_{}'.format(strat_version)])\n","\n","\n","    \n","   # --------------- ema --------------- #   \n","  # res_df['ema5_1m'] = ema(res_df['close'], 5).shift(1)\n","\n","  #   # --------------- cloud bline --------------- #   \n","  # res_df['cloud_bline_1m'] = cloud_bline(res_df, 26).shift(1)\n","  \n","    #       stochastic      #\n","  # res_df['stoch'] = stoch(res_df, 5, 3, 3)\n","\n","    #       fisher      #\n","  # res_df['fisher30'] = fisher(res_df, 30)\n","  # res_df['fisher60'] = fisher(res_df, 60)\n","  # res_df['fisher120'] = fisher(res_df, 120)\n","\n","    #       cctbbo      #\n","  # res_df['cctbbo'], _ = cct_bbo(res_df, 21, 13)\n","\n","    #       ema_roc      #\n","  # res_df['ema_roc'] = ema_roc(res_df['close'], 13, 9)\n","\n","\n","   # ------------------------------ htf data ------------------------------ #    \n","\n","  #             Todo              #\n","  # htf_df = pd.read_excel(date_path2 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # htf_df = pd.read_excel(date_path3 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # htf_df = pd.read_excel(date_path4 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # htf_df = pd.read_excel(date_path5 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # # # # htf_df = pd.read_excel(date_path6 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","\n","  # # ---- htf index slicing ---- #\n","  # htf_df = htf_df.loc[:res_df.index[-1]]\n","  \n","  # print(\"res_df.index[-1] :\", res_df.index[-1])\n","  # print(\"htf_df.index[-1] :\", htf_df.index[-1])\n","\n","  # res_df = dc_line(res_df, htf_df, '5m')\n","  # res_df = dc_level(res_df, '5m', 1)\n","\n","\n","  # # # if \"sma4\" in res_df.columns:\n","  # # #   res_df.drop(\"sma4\", axis=1, inplace=1)\n","\n","  # # htf_df['sma'] = htf_df['close'].rolling(60).mean()\n","  # # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, htf_df, [-1]), columns=['sma_30m']))\n","  \n","  # htf_df['stoch'] = stoch(htf_df, 13, 3, 3)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, htf_df, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","   \n","  # fifth_df['ema'] = ema(fifth_df['close'], 5)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, fifth_df, [-1]), columns=['ema5']))\n","\n","        # ------------------------------------ short ------------------------------------ # \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 0:\n","        #   mr_score += 1          \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_upper_1m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_upper_3m'].iloc[i] <= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_upper_5m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == 'MARKET':\n","        #   mr_const_cnt += 1\n","        #   if (res_df['close'].iloc[i] - res_df['short_tp'].iloc[i]) / (res_df['short_out'].iloc[i] - res_df['close'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error):  \n","        #     mr_score += 1\n","\n","           \n","        # ------- entry once ------- #   \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == 1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == -1:\n","        #     prev_entry_cnt += 1          \n","        # # # print(\"prev_entry_cnt :\", prev_entry_cnt)\n","\n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] < res_df['bb_lower_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_lower2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_base_1h'].iloc[i]:\n","\n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] < res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","  \n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['low'].iloc[i] > res_df['short_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1\n","\n","\n","\n","        # ------------------------------------ long ------------------------------------ # \n","          \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 1:\n","        #   mr_score += 1   \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 1:\n","        #   mr_score += 1     \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 1:\n","          # mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_lower_1m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_lower_3m'].iloc[i] >= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_lower_5m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == \"MARKET\":\n","          # mr_const_cnt += 1        \n","          # if (res_df['long_tp'].iloc[i] - res_df['close'].iloc[i]) / (res_df['close'].iloc[i] - res_df['long_out'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error): # ÏùºÎ∞òÏ†ÅÏúºÎ°ú dr ÏÉÅÏóêÏÑú tp ÎπÑÏú®Ïù¥ Îçî Ïª§Ïßê (tr Î≥¥Îã§)\n","          #   mr_score += 1\n","\n","        # -------------- ep limit -------------- #    \n","        # mr_const_cnt += 1\n","        # # if (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # if config.ep_set.min_eplim_pct < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # # if 0 < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        #   # if res_df['st_gap_15m'].iloc[i] / res_df['open'].iloc[i] < 0:\n","        #   #   print(\"i, res_df['st_gap_15m'].iloc[i] :\", i, res_df['st_gap_15m'].iloc[i])\n","        #   mr_score += 1\n","\n","\n","        # -------------- entry once -------------- #    \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == -1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == 1:\n","        #     prev_entry_cnt += 1\n","          \n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","          \n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] > res_df['bb_upper_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_upper2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_base_1h'].iloc[i]:\n","        \n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] > res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","\n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['high'].iloc[i] < res_df['long_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","          \n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1"]},{"cell_type":"markdown","metadata":{"id":"-IbP_Z3Dlwk4"},"source":["### nontp survey"]},{"cell_type":"markdown","metadata":{"id":"FxJ1y8v2fkCR"},"source":["##### term & liqd"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":614},"executionInfo":{"elapsed":8,"status":"ok","timestamp":1628300788555,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"-qIWa48pl1GO","outputId":"b2687c93-e070-4d45-8a67-4cc783fd78f1"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 360x720 with 2 Axes>"]},"metadata":{"tags":[]},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]}],"source":["# print(nontp_long_indexs)\n","\n","plot_size = 100\n","\n","for s_i in range(plot_size, len(trade_list), plot_size):\n","\n","  slice_trade_list = trade_list[s_i - plot_size:s_i]\n","  slice_liqd_list = liqd_list[s_i - plot_size:s_i]\n","\n","  # print(len(slice_trade_list))\n","  np_trade = np.array(slice_trade_list)\n","  trade_term = np_trade[:, [2]] - np_trade[:, [1]]\n","\n","  plt.figure(figsize=(5, 10))\n","  plt.subplot(211)\n","  plt.bar(np.arange(len(trade_term)), trade_term.reshape(-1,), width=1, color='b')\n","\n","  # plt.plot(trade_term.reshape(-1,))\n","  plt.ylim(0, 1000)\n","  # plt.show()\n","  # print()\n","\n","  plt.subplot(212)\n","  # print(len(liqd_list))\n","  # plt.bar(np.arange(len(liqd_list)), liqd_list)\n","  plt.bar(np.arange(len(slice_liqd_list)), np.array(slice_liqd_list), width=1, color='r')\n","  # plt.plot(slice_liqd_list)\n","  plt.show()\n","\n","print()"]},{"cell_type":"markdown","metadata":{"id":"VBwVaUkvfnOd"},"source":["##### check nontp index"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":454,"status":"ok","timestamp":1628220543161,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"mRCMBOU4frNY","outputId":"ce4a9c9b-3589-40b3-8a19-4be03d5b9a1e"},"outputs":[{"name":"stdout","output_type":"stream","text":["32747\n"]}],"source":["# np_nontp_short_indexs = np.array(nontp_short_indexs)\n","# np_nontp_long_indexs = np.array(nontp_long_indexs)\n","\n","# short_til_term = len(res_df) - np_nontp_short_indexs\n","# long_til_term = len(res_df) - np_nontp_long_indexs\n","\n","max_nontp_short_term = len(res_df) - nontp_short_indexs[0]\n","max_nontp_long_term = len(res_df) - nontp_long_indexs[0]\n","\n","print(max_nontp_long_term)"]},{"cell_type":"markdown","metadata":{"id":"tApzvz_gK9lR"},"source":["## basic strategy"]},{"cell_type":"markdown","metadata":{"id":"FaRGwR4NEop2"},"source":["### shifting"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"a8aYsjEgQnGF"},"outputs":[],"source":["org_res_df = res_df.copy()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":291,"status":"ok","timestamp":1626515312874,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"RF3RM2G2RCb1","outputId":"ba8f6a75-d4df-4f85-cd0f-190935341f7a"},"outputs":[{"name":"stdout","output_type":"stream","text":["                            open     high  ...  min_upper  max_lower\n","2021-06-30 23:55:59.999  0.27223  0.27281  ...   0.272145    0.27005\n","2021-06-30 23:56:59.999  0.27274  0.27290  ...   0.272145    0.27005\n","2021-06-30 23:57:59.999  0.27246  0.27257  ...   0.272523    0.27021\n","2021-06-30 23:58:59.999  0.27166  0.27183  ...   0.272523    0.27021\n","2021-06-30 23:59:59.999  0.27144  0.27211  ...   0.272523    0.27021\n","\n","[5 rows x 37 columns]\n","                            open     high  ...  min_upper  max_lower\n","2021-06-30 23:55:59.999  0.27223  0.27281  ...   0.272523    0.27021\n","2021-06-30 23:56:59.999  0.27274  0.27290  ...        NaN        NaN\n","2021-06-30 23:57:59.999  0.27246  0.27257  ...        NaN        NaN\n","2021-06-30 23:58:59.999  0.27166  0.27183  ...        NaN        NaN\n","2021-06-30 23:59:59.999  0.27144  0.27211  ...        NaN        NaN\n","\n","[5 rows x 37 columns]\n"]}],"source":["#         refresh res_df      #\n","res_df = org_res_df.copy()\n","print(org_res_df.tail(5))\n","\n","# break\n","\n","\n","shift_size = -4\n","# shift_size = -1\n","# shift_size = -7\n","# shift_size = +3\n","\n","res_df['min_upper'] = res_df['min_upper'].shift(shift_size)\n","res_df['max_lower'] = res_df['max_lower'].shift(shift_size)\n","res_df['minor_ST1_Trend'] = res_df['minor_ST1_Trend'].shift(shift_size)\n","res_df['minor_ST2_Trend'] = res_df['minor_ST2_Trend'].shift(shift_size)\n","res_df['minor_ST3_Trend'] = res_df['minor_ST3_Trend'].shift(shift_size)\n","res_df['middle_line'] = res_df['middle_line'].shift(shift_size)\n","\n","print(res_df.tail(5))"]},{"cell_type":"markdown","metadata":{"id":"2gxvme1PC6ha"},"source":["### load model"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5831,"status":"ok","timestamp":1628862368878,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"dtYdAuSsC72_","outputId":"e8dccc53-aaa7-4bab-ed8d-753f634c08d6"},"outputs":[{"name":"stdout","output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/resnet/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5\n","94773248/94765736 [==============================] - 1s 0us/step\n"]}],"source":["# model_name = 'inner_tick_cnnreg_lscalemm_prefee_gpu_%s_%s_%s_%s_%s.h5'\n","\n","# model = tf.keras.models.load_model(ckpt_path + model_name)\n","\n","from tensorflow.keras.applications.resnet50 import ResNet50\n","\n","model = ResNet50(weights='imagenet', include_top=False)\n","# model.summary()\n"]},{"cell_type":"markdown","metadata":{"id":"5la6usMOFzkX"},"source":["#### gen selected vector"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oQk3-jbKF8FB"},"outputs":[],"source":["def min_max_scale(npy_x):\n","\n","  return (npy_x - np.min(npy_x)) / (np.max(npy_x) - np.min(npy_x))\n","\n","def expand_dims(npy_x):\n","\n","  row, col = npy_x.shape\n","  npy_x2 = np.array(npy_x).reshape(-1, row, col, 1).astype(np.float32)\n","  # input_x = np.array(data_x).reshape(-1, row, col).astype(np.float32)\n","\n","  #     1c to 3c    #\n","  npy_x3 = npy_x2 * np.ones(3, dtype=np.float32)[None, None, None, :]\n","\n","  return npy_x3\n","\n","\n","def vector_dist(f1, f2):\n","  return np.linalg.norm(f1-f2)\n","\n","\n","\n","# ------------------------ params ------------------------  #\n","selected_i = 500\n","input_size = 100\n","\n","\n","\n","#   1. ÏÑ†ÌÉùÎêú Ïù∏Îç±Ïä§Î•º ÏûÖÎ†•Î∞õÏïòÏùÑ Îïå, input generating ÌòïÌÉúÎßå ÎßåÎì§Ïñ¥ÎÜìÍ≥†,     #\n","#   1-1. input cols ÌïÑÏöîÌï®    #\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower']\n","# senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","# senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","\n","sma_list = ['sma']\n","\n","#     -------------- outer price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","cctbbo_list = ['cctbbo']\n","\n","selected_price_colname = basic_list + senkoua_list + senkoub_list + sar_list\n","selected_outprice_colname = [macd_list]\n","\n","\n","#         global scaling for outer price data       #\n","#         1. nan Ï≤òÎ¶¨       #\n","\n","# # print((np.isnan(df.values)))\n","# print(\"np.sum(np.isnan(df.values), axis=0) :\", np.sum(np.isnan(df.values), axis=0))\n","\n","# max_nan = np.max(np.sum(np.isnan(df.values), axis=0))\n","# # print(max_nan)\n","\n","# df = df.iloc[max_nan:-max_nan]\n","\n","# total_gdata = []\n","# for g_col in selected_outprice_colname:\n","\n","#   temp_data = min_max_scale(res_df[g_col])\n","#   total_gdata.append(temp_data)\n","\n","\n","\n","#   1-2. cols Ïóê Îî∞Î•∏, scaling method Íµ¨Î∂ÑÌï®    #\n","onprice_input_x = min_max_scale(res_df[selected_price_colname].iloc[selected_i - input_size:selected_i].values)\n","print(onprice_input_x.shape)\n","\n","\n","#   2. plot_check ÏóêÏÑú Î≥∏Ïù∏Ïù¥ ÏõêÌïòÎäî shape Ïùò Ïù∏Îç±Ïä§Î•º ÏÑ†ÌÉù   #\n","#   3. vertorize, \n","#   3-1. input generator Î•º Ïù¥Ïö©Ìï¥ entry signal Î∞úÏÉùÌï† ÎïåÎßàÎã§ dist ÎπÑÍµê ÏßÑÌñâ    #\n","re_onprice_input_x = expand_dims(onprice_input_x)\n","print(re_onprice_input_x.shape)\n","      \n","# break\n","\n","selected_vector = model.predict(re_onprice_input_x, verbose=1)\n","print(selected_vector.shape)"]},{"cell_type":"markdown","metadata":{"id":"OJqkmkpsLCYC"},"source":["### tr_tresh calc"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gcpo4MGd9Wm4"},"outputs":[],"source":["res_wr = 0.6\n","# tr_thresh = 1\n","# tr_thresh = ((1 - res_wr) / res_wr) ** 0.5\n","tr_thresh = ((1 - res_wr) / res_wr) + 0.01\n","# tr_thresh = 2.6\n","print(\"res_wr :\", res_wr)\n","print(\"tr_thresh :\", tr_thresh)\n","\n","\n","#   Îã®Î¶¨    #\n","trade_num = 1000\n","asset = 1 # thousand USDT\n","test_loss_gap = 0.95  # fee adjusted\n","test_pr_gap = 1 + (1 - test_loss_gap) * tr_thresh\n","\n","test_loss_cnt = trade_num * (1 - res_wr)\n","test_pr_cnt = trade_num * res_wr\n","\n","test_trade_list = [test_pr_gap] * int(test_pr_cnt) + [test_loss_gap] * int(test_loss_cnt)\n","random.shuffle(test_trade_list)\n","# print(\"len(test_trade_list) :\", len(test_trade_list))\n","print(test_trade_list[:10])\n","print()\n","\n","# print(\"%.5f\" % np.cumprod(test_trade_list)[-1])\n","for tr_thresh_ in np.arange(1, 3, 0.2):\n","  if (1 + (1 - test_loss_gap) * tr_thresh_) ** test_pr_cnt * test_loss_gap ** test_loss_cnt > 1:\n","    break\n","print(\"Î≥µÎ¶¨Î•º ÏúÑÌïú tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumprod(test_trade_list)[-1] :\", np.cumprod(test_trade_list)[-1])\n","print(\"total_pr : \", np.cumprod(test_trade_list)[-1])\n","print()\n","#   Î≥µÎ¶¨ tr_thresh  #\n","#   1. trade_num Ïóê ÏòÅÌñ• Î∞õÏßÄ ÏïäÏùå\n","#   2. loss_gap Ïóê ÎπÑÎ°ÄÌï®\n","\n","for tr_thresh_ in np.arange(1, 3, 0.01):\n","  if ((1 - test_loss_gap) * tr_thresh_) * test_pr_cnt + (test_loss_gap - 1) * test_loss_cnt > 0:\n","    break\n","np_test_trade = np.array(test_trade_list) - 1\n","print(np_test_trade[:10])\n","# print(\"%.3f\" % )\n","print(\"Îã®Î¶¨Î•º ÏúÑÌïú tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumsum(np_test_trade)[-1] :\", np.cumsum(np_test_trade)[-1])\n","print(\"total_pr : \", 1 + np.cumsum(np_test_trade)[-1])\n"]},{"cell_type":"markdown","metadata":{"id":"JNQxkb06ZdTe"},"source":["# traded section plot"]},{"cell_type":"markdown","metadata":{"id":"UmH_Pb5BZUtm"},"source":["## plot with off-color st with dash"]},{"cell_type":"markdown","metadata":{"id":"5z4L3MMYmUI0"},"source":["### sorted plot_check"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1eAJWkUl58Ki4lFBHQbkHUBXZp3g-EBYq"},"executionInfo":{"elapsed":79032,"status":"ok","timestamp":1641810372598,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"Qv1MM2MemZnF","outputId":"9c7f92fd-12d4-4645-cc3f-a541c0064446"},"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}],"source":["assert len(open_list) == len(trade_list), \"len(open_list) != len(trade_list)\"\n","assert len(tp_state_list) == len(fee_list), \"len(tp_state_list) != len(fee_list)\"\n","\n","if multi_mode:\n","  strat_version = \"v3\"\n","\n","save_plot = 0\n","tf_plot = 1\n","pr_sort = 1     # Ïù¥ÏÉÅÌïú Ï≤¥Í≤∞ ÌôïÏù∏ÌïòÍ∏∞ Ï¢ãÏùå\n","pr_descend = 1  # 1 -> ÎÇ¥Î¶ºÏ∞®Ïàú\n","# wl_case = 1     # 1 / -1 / 0 (win loss study)\n","position = 1    # -1 / 1 / 0 (short / long / both)\n","\n","x_max = 500\n","\n","inversion = 0\n","hedge = 0\n","\n","\n","if save_plot:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".ftr\", \"\")\n","  try:\n","    os.mkdir(plot_check_dir)\n","  except:\n","\n","    #     remove existing dir   #\n","    shutil.rmtree(plot_check_dir)\n","    print(plot_check_dir, 'removed !')\n","    os.mkdir(plot_check_dir)\n","    # pass\n","    \n","\n","prev_plotsize = 130\n","post_plotsize = 120\n","\n","\n","if position == -1:\n","  position = config.ep_set.short_entry_score\n","elif position == 1:\n","  position = -config.ep_set.short_entry_score\n","\n","\n","if inversion:  \n","\n","    plot_pr_list = rev_np_pr\n","    h_plot_pr_list = h_rev_np_pr  # hedge\n","\n","else:\n","\n","    plot_pr_list = np_pr\n","    try:\n","      h_plot_pr_list = h_np_pr\n","    except Exception as e:\n","      print(\"error in h_plot_pr :\", e)\n","      h_plot_pr_list = np_pr\n","\n","\n","h_candle_intv1 = 15\n","h_candle_intv2 = 60\n","if 'hopen_{}'.format(h_candle_intv2) not in res_df.columns:\n","  res_df = h_candle(res_df, h_candle_intv1)\n","  res_df = h_candle(res_df, h_candle_intv2)\n","\n","res_df[\"ma30_1m\"] = res_df['close'].rolling(30).mean()\n","res_df[\"ma60_1m\"] = res_df['close'].rolling(60).mean()\n","\n","res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line)\n","# res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=1, use_dtk_line=1)\n","# break\n","\n","rtc_list = [\"short_tp_1_{}\".format(strat_version), \"short_tp_gap_{}\".format(strat_version), \"long_tp_1_{}\".format(strat_version), \"long_tp_gap_{}\".format(strat_version)]\n","# h_rtc_list = [\"h_short_tp_1\", \"h_short_tp_gap\", \"h_long_tp_1\", \"h_long_tp_gap\"]\n","dtk_list = [\"short_dtk_1_{}\".format(strat_version), \"short_dtk_gap_{}\".format(strat_version), \"long_dtk_1_{}\".format(strat_version), \"long_dtk_gap_{}\".format(strat_version),\n","            # \"short_dtk_1_line\", \"short_dtk_gap_line\", \"long_dtk_1_line\", \"long_dtk_gap_line\",\n","            \"short_dtk_plot_1\", \"short_dtk_plot_gap\", \"long_dtk_plot_1\", \"long_dtk_plot_gap\"]\n","dc_v2_list = ['dc_upper_v2_{}'.format(strat_version), 'dc_lower_v2_{}'.format(strat_version)]\n","\n","\n","ohlc_list = ['open', 'high', 'low', 'close'] # + basic_st_list\n","hcandle_list = ['hopen_%s' % h_candle_intv1, 'hclose_%s' % h_candle_intv1, 'hopen_%s' % h_candle_intv2, 'hclose_%s' % h_candle_intv2]\n","# hcandle_list = ['hopen_%s' % h_candle_intv1, 'hclose_%s' % h_candle_intv1, 'hhigh_%s' % h_candle_intv2, 'hlow_%s' % h_candle_intv2]\n","\n","# --------------------- dc & bb level --------------------- #\n","dc_interval = '1m'\n","hdc_interval = '5m'\n","hhdc_interval = '15m'\n","\n","st_list = ['st_base_%s' % hhdc_interval, 'st_upper_%s' % hhdc_interval, 'st_lower_%s' % hhdc_interval]\n","\n","dc_list = ['dc_upper_%s' % dc_interval, 'dc_lower_%s' % dc_interval]\n","hdc_list = ['dc_upper_%s' % hdc_interval, 'dc_lower_%s' % hdc_interval]\n","hhdc_list = ['dc_upper_%s' % hhdc_interval, 'dc_lower_%s' % hhdc_interval]\n","\n","bb_interval = dc_interval\n","hbb_interval = hdc_interval\n","hhbb_interval = hhdc_interval\n","\n","bb_list = ['bb_upper_%s' % bb_interval, 'bb_lower_%s' % bb_interval]\n","hbb_list = ['bb_upper_%s' % hbb_interval, 'bb_lower_%s' % hbb_interval]\n","hhbb_list = ['bb_upper_%s' % hhbb_interval, 'bb_lower_%s' % hhbb_interval]\n","\n","bbwp_list = ['bbwp', 'bbwp_ma']\n","\n","\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1']\n","senkoub_list = ['senkou_b1']\n","\n","sar_list = ['sar_3m', 'sar_5m', 'sar_15m']\n","\n","ma_list = ['ma30_1m', 'ma60_1m']\n","sma_list = ['sma_1m']\n","\n","ema_list = ['ema_5m']\n","# cb_list = ['cloud_bline_1m']\n","cb_list = ['cloud_bline_30m']\n","# cb_list = ['cloud_bline_5m']\n","\n","\n","\n","# -------------- under price phase -------------- #\n","# macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3']\n","# trix_list = ['trix1', 'trix2', 'trix3']\n","# stoch_list = ['stoch_5m']\n","# fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","# cctbbo_list = ['cctbbo']\n","# emaroc_list = ['ema_roc']\n","rsi_list = ['rsi_%s' % config.loc_set.point.exp_itv] \n","cci_list = ['cci_%s' % config.loc_set.point.exp_itv] \n","\n","\n","# -------------- summation -------------- #\n","# input_colname = ohlc_list + basic_st_list + pline_list + bb_list + hbb_list + sma_list + cb_list + stoch_list + sar_list + dc_list\n","input_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + hhdc_list + dtk_list + dc_v2_list + rsi_list + ema_list + ma_list# + st_list# + cci_list\n","\n","# yrange_colname = ohlc_list + basic_st_list + pline_list # currently just used for ymin, ymax\n","yrange_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + hhdc_list + dc_v2_list + ema_list # currently just used for ymin, ymax\n","yrange_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + dc_v2_list + ema_list # currently just used for ymin, ymax\n","\n","\n","# aggr_obj = dict(zip(plot_pr_list, open_list, enumerate(trade_list)))\n","aggr_obj = dict(zip(plot_pr_list, zip(open_list, enumerate(trade_list))))\n","sorted_obj = sorted(aggr_obj.items(), key=(lambda x: x[0]), reverse=pr_descend)\n","\n","# print(aggr_obj)\n","# print(sorted_obj)\n","\n","if pr_sort:\n","  iter_obj = sorted_obj\n","else:\n","  iter_obj = aggr_obj.items()\n","\n","odd_cnt = 0\n","obj_i = -1\n","rev_obj_i = 0\n","len_obj = len(sorted_obj)\n","\n","#   ÏßÄÍ∏à, continue Î∞úÏÉùÏãú true / false idx Í∞Ä Í∞ôÏù¥ ÏÉÅÏäπÌïòÎäî Î¨∏Ï†ú\n","\n","# for temp_pr, (open_idx, (t_i, (ep_idx_list_, tp_idx_list_))) in iter_obj:  # 0.699700153073042, (291402, (3014, ([370012], [370014])))\n","# for obj_i, (temp_pr, (open_idx, (t_i, (ep_idx_list_, out_idx_list_, tp_idx_list_)))) in enumerate(iter_obj):  # 0.699700153073042, (291402, (3014, ([370012], [370014])))\n","# for temp_pr, (open_idx, (t_i, (ep_idx_list_, out_idx_list_, tp_idx_list_))) in iter_obj:  # 0.699700153073042, (291402, (3014, ([370012], [370014])))\n","\n","while 1:\n","\n","  if obj_i >= len_obj or rev_obj_i >= len_obj:\n","    break\n","\n","  if odd_cnt % 2 == 1 and tf_plot: #  loss plot ÏùÑ Ï±ÑÏõåÏïºÌïòÎäî ÏÉÅÌô©\n","    rev_obj_i += 1\n","    temp_pr, (open_idx, (t_i, (ep_idx_list_, out_idx_list_, tp_idx_list_))) = sorted_obj[-rev_obj_i]\n","    if temp_pr > 1.0:\n","      continue  \n","\n","  else:\n","    obj_i += 1\n","    temp_pr, (open_idx, (t_i, (ep_idx_list_, out_idx_list_, tp_idx_list_))) = sorted_obj[obj_i]\n","    if temp_pr < 1.0:\n","      continue  \n","\n","  if not(i >= prev_plotsize):\n","    continue\n","  \n","  #   open size indexing by open_idx    #\n","  open_side_ = res_df['entry_{}'.format(strat_version)].iloc[open_idx]\n","\n","  # ---------- const. zone ---------- #\n","\n","  if position != 0:\n","    if open_side_ != position:\n","      continue\n","\n","  if multi_mode:\n","    if not strat_version in tp_state_list[t_i]:\n","    # if tp_state_list[t_i] != 'long close tp':\n","    # if tp_state_list[t_i] != 's-long_tp':\n","      continue\n","\n","  # if open_idx == 63901:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","\n","  # if tp_ratio_list[t_i] > 0.4:\n","  #   continue\n","\n"," \n","  # print(\"open_idx :\", open_idx)\n","  print(\"open_side_ :\", open_side_)\n","  print(\"np_timeidx[open_idx] :\", np_timeidx[open_idx])\n","  print(\"open_idx, ep_idx_list_[0], tp_idx_list_[-1] :\", open_idx, ep_idx_list_[0], tp_idx_list_[-1])\n","  #   const. Ïóê Ìï©ÌïòÎäî Ï°∞Í±¥ ÎÇòÏò¨ÎïåÍπåÏßÄ loop ÎèåÎ¶¨Í≥†, const. phase ÌÜµÍ≥ºÏãú odd_cnt += 1,\n","  #   => odd_cnt Î°ú gs_plot ÏùÑ Ï±ÑÏö¥Îã§Îäî ÎäêÎÇå \n","  #   odds = 1 -> wl_case == 1 Îßå ÌóàÏö©, odds = 2 -> wl_case == -1 Îßå ÌóàÏö©\n","  odd_cnt += 1\n","\n","  # break\n","\n","  plot_df = res_df.iloc[open_idx - prev_plotsize:tp_idx_list_[-1] + post_plotsize][input_colname]\n","\n","\n","  #       keep off-color st with another variable         #\n","  # st_trend_plot_df = res_df[['ST1_Trend%s' % basic_st_interval, 'ST2_Trend%s' % basic_st_interval, 'ST3_Trend%s' % basic_st_interval]].iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","\n","  # fig = trendln.plot_support_resistance(plot_df['close'], accuracy=8, fromwindows=0, numbest=1,  window=30) # requires matplotlib - pip install matplotlib\n","  \n","  odds = 1 if odd_cnt % 2 == 1 else 2\n","  if odds == 1:\n","\n","    plt.style.use('dark_background')\n","\n","    fig = plt.figure(figsize=(26, 18))\n","    \n","    gs = gridspec.GridSpec(nrows=2, # row Î™á Í∞ú \n","                        ncols=2, # col Î™á Í∞ú \n","                        height_ratios=[3, 1]\n","                        )\n","    \n","  ax = fig.add_subplot(gs[odds - 1])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='#26a69a', colordown='#ef5350', alpha=0.5)\n","\n","  # ---------- h_candle ---------- #\n","  alpha = 1\n","  lw = 1\n","  for cd_i, candle in enumerate(hcandle_list):\n","\n","    if cd_i == 2:\n","      lw = 2      \n","    plt.step(np.arange(len(plot_df)), plot_df[candle].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","\n","  # alpha = 0.1\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['hclose_60'].values, plot_df['hopen_60'].values, \n","  #                     where=1, facecolor='#ffffff', alpha=alpha)  \n","  \n","\n","   # --------- ma --------- #\n","  alpha = 1\n","  lw = 2\n","  for ma_i, item in enumerate(ma_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","   # --------- ema --------- #\n","  alpha = 1\n","  lw = 4\n","  for sm_i, item in enumerate(ema_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","    \n","   # --------- st --------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(st_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#00ff00', linewidth=lw)\n","\n","  # ---------------------- dc_v2 ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(dc_v2_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","  # ---------------------- dc ---------------------- #\n","  alpha = 1\n","  lw = 2\n","  for sm_i, item in enumerate(dc_list):\n","      plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","  # ---------------------- hdc ---------------------- #\n","  alpha = 1\n","  lw = 2\n","  for sm_i, item in enumerate(hdc_list):\n","      plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#e65100', linewidth=lw)\n","\n","  # ---------------------- hhdc ---------------------- #\n","  alpha = 1\n","  lw = 4\n","  for sm_i, item in enumerate(hhdc_list):\n","      plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#c2185b', linewidth=lw)\n","\n","\n","  # ---------------------- bb ---------------------- #\n","  alpha = 1\n","  lw = 1\n","  for sm_i, item in enumerate(bb_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","\n","  alpha = 0.2\n","  plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % bb_interval].values, plot_df['bb_lower_%s' % bb_interval].values, \n","                      where=plot_df['bb_upper_%s' % bb_interval].values >= plot_df['bb_lower_%s' % bb_interval].values, facecolor='#ffffff', alpha=alpha)   \n","\n","  # ---------------------- hbb ---------------------- #\n","  alpha = 1\n","  lw = 2\n","  for sm_i, item in enumerate(hbb_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ff00ff', linewidth=lw)\n","  \n","  alpha = 0.2\n","  plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % hbb_interval].values, plot_df['bb_lower_%s' % hbb_interval].values, \n","                      where=plot_df['bb_upper_%s' % hbb_interval].values >= plot_df['bb_lower_%s' % hbb_interval].values, facecolor='#ff00ff', alpha=alpha) \n","  \n","  # ---------------------- hhbb ---------------------- #\n","\n","  alpha = 1\n","  lw = 4\n","  for sm_i, item in enumerate(hhbb_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#3179f5', linewidth=lw)\n","  \n","  alpha = 0.2\n","  plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % hhbb_interval].values, plot_df['bb_lower_%s' % hhbb_interval].values, \n","                      where=plot_df['bb_upper_%s' % hhbb_interval].values >= plot_df['bb_lower_%s' % hhbb_interval].values, facecolor='#3179f5', alpha=alpha) \n","  \n","  # ------------------- dtk_line (old, tp_line) ------------------- #\n","  \n","  # alpha = 1\n","  # lw = 2\n","  # rtc_ratio_list = [config.loc_set.zone.dt_k]\n","  \n","  # for rtc_k in rtc_ratio_list:    \n","  #   # plt.step(np.arange(len(plot_df)), plot_df['short_dtk_1_line'].values - plot_df['short_dtk_gap_line'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['long_dtk_1_line'].values + plot_df['long_dtk_gap_line'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","\n","  # hy_min = np.min(plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * rtc_k)\n","  # hy_max = np.max(plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * rtc_k)  \n","\n","  # alpha = 1\n","  # lw = 4\n","  # # h_rtc_ratio_list = [config.loc_set.zone.dt_k]\n","  # h_rtc_ratio_list = [config.loc_set.zone.zone_dt_k]\n","  # # h_rtc_ratio_list = [0.272, 0.36, 0.4, 0.5]\n","  \n","  # for h_rtc_k in h_rtc_ratio_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df['short_dtk_plot_1'].values - plot_df['short_dtk_plot_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['long_dtk_plot_1'].values + plot_df['long_dtk_plot_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['h_short_tp_1'].values - plot_df['h_short_tp_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['h_long_tp_1'].values + plot_df['h_long_tp_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","\n","  # # hy_min = np.min(plot_df['short_dtk_plot_1'].values - plot_df['short_dtk_plot_gap'].values * h_rtc_k)\n","  # # hy_max = np.max(plot_df['long_dtk_plot_1'].values + plot_df['long_dtk_plot_gap'].values * h_rtc_k)  \n","\n","  # ------------------------------------------------------------- #\n","\n","\n","  # ------------- ep ------------- #\n","  # if i != initial_i:\n","  # if len(ep_idx_list_) > 1:\n","  \n","    #        initial order         #\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='#ffeb3b')\n","  plt.axvline(prev_plotsize, alpha=0.5, linestyle='--', color='#ffeb3b')\n","\n","  for ep_i in range(len(ep_idx_list_)):\n","    # plt.axvline(prev_plotsize + (ep_idx_list_[ep_i] - ep_idx_list_[0]), alpha=0.7, linestyle='--', color='#ffeb3b')\n","    plt.axvline(prev_plotsize + (ep_idx_list_[ep_i] - open_idx), alpha=0.7, linestyle='--', color='#ffeb3b')\n","\n","  # plt.axvline(prev_plotsize, alpha=0.5, linestyle='--')\n","\n","  # ------------- x lim ------------- #\n","  if len(plot_df) > x_max:\n","    plt.xlim(0, x_max)\n","\n","  x0,x1 = plt.gca().get_xlim()\n","\n","  # ep_xmin = (prev_plotsize + (ep_idx_list_[ep_i] - ep_idx_list_[0])) / x1\n","  ep_xmin = (prev_plotsize + (ep_idx_list_[ep_i] - open_idx)) / x1\n","  plt.axhline(ep_tp_list[t_i][0], linestyle='--', xmin=ep_xmin, xmax=1, alpha=1, color='lime')  # ep line axhline  \n","  plt.text(x1, ep_tp_list[t_i][0][0], ' ep :\\n %s' % ep_tp_list[t_i][0][0], ha='left', va='center', fontweight='bold') # ep line label\n","\n","  \n","  # ------------- tp ------------- #\n","  for sub_i in range(len(ep_tp_list[t_i][1])):\n","\n","    # tp_xmin = (prev_plotsize + (tp_idx_list_[sub_i] - ep_idx_list_[0])) / x1\n","    tp_xmin = (prev_plotsize + (tp_idx_list_[sub_i] - open_idx)) / x1\n","    plt.axhline(ep_tp_list[t_i][1][sub_i], linestyle='--', xmin=tp_xmin , xmax=1, alpha=1, color='lime')  # tp line axhline\n","    plt.text(x1, ep_tp_list[t_i][1][sub_i], ' tp :\\n %s' % ep_tp_list[t_i][1][sub_i], ha='left', va='center', fontweight='bold') # tp line label\n","     \n","    # plt.axvline(prev_plotsize + (tp_idx_list_[sub_i] - ep_idx_list_[0]), alpha=1., linestyle='--', color='#ffeb3b', zorder=2)\n","    plt.axvline(prev_plotsize + (tp_idx_list_[sub_i] - open_idx), alpha=1., linestyle='--', color='#ffeb3b', zorder=2)\n","\n","\n","  # ------------- rtc horizontal range ------------- # --> open_idx Î°ú Ìï†ÏßÄÎäî Ï∂îÌõÑ ÏàòÏ†ï Í∂åÍ≥† (ep_loc.point2 Ïóê ÏùòÌï¥ ÏßÑÏûÖ Í∏∞Ï§Ä point Í∞Ä Î≥ÄÍ≤ΩÎê† Ïàò ÏûàÏùå)\n","  # rtc_ratio_list = [0.272, 0.36, 0.4, 0.5]\n","  rtc_ratio_list = [0.]\n","  if open_side_ == config.ep_set.short_entry_score:\n","    # plt.axhline(res_df['short_rtc_1'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    # plt.axhline(res_df['short_rtc_0'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    out_line = res_df['short_out_{}'.format(strat_version)].iloc[out_idx_list_[0]]\n","    plt.axhline(out_line, linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    plt.text(x0, out_line, ' %s' % config.tr_set.out_gap, ha='left', va='center', fontweight='bold')\n","\n","    for rtc_k in rtc_ratio_list:\n","      plt.axhline(res_df['h_short_rtc_1_{}'.format(strat_version)].iloc[open_idx] - res_df['h_short_rtc_gap_{}'.format(strat_version)].iloc[open_idx] * rtc_k, linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","      plt.text(x0, res_df['h_short_rtc_1_{}'.format(strat_version)].iloc[open_idx] - res_df['h_short_rtc_gap_{}'.format(strat_version)].iloc[open_idx] * rtc_k, ' %s' % rtc_k, ha='left', va='center', fontweight='bold')\n","      \n","    y_max = out_line\n","    y_min = res_df['h_short_rtc_1_{}'.format(strat_version)].iloc[tp_idx_list_[-1]] - res_df['h_short_rtc_gap_{}'.format(strat_version)].iloc[tp_idx_list_[-1]] * rtc_k\n","\n","    print(\"short_tp :\", res_df['short_tp_{}'.format(strat_version)].iloc[tp_idx_list_[-1]])\n","    print(\"short_out :\", out_line)\n","\n","  else:\n","    # plt.axhline(res_df['long_rtc_1'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    # plt.axhline(res_df['long_rtc_0'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff') \n","    out_line = res_df['long_out_{}'.format(strat_version)].iloc[out_idx_list_[0]]\n","    plt.axhline(out_line, linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    plt.text(x0, out_line, ' %s' % config.tr_set.out_gap, ha='left', va='center', fontweight='bold')\n","\n","    for rtc_k in rtc_ratio_list:\n","      plt.axhline(res_df['h_long_rtc_1_{}'.format(strat_version)].iloc[open_idx] + res_df['h_long_rtc_gap_{}'.format(strat_version)].iloc[open_idx] * rtc_k, linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","      plt.text(x0, res_df['h_long_rtc_1_{}'.format(strat_version)].iloc[open_idx] + res_df['h_long_rtc_gap_{}'.format(strat_version)].iloc[open_idx] * rtc_k, ' %s' % rtc_k, ha='left', va='center', fontweight='bold')\n","\n","    y_max = res_df['h_long_rtc_1_{}'.format(strat_version)].iloc[tp_idx_list_[-1]] + res_df['h_long_rtc_gap_{}'.format(strat_version)].iloc[tp_idx_list_[-1]] * rtc_k\n","    y_min = out_line\n","\n","    print(\"long_tp :\", res_df['long_tp_{}'.format(strat_version)].iloc[tp_idx_list_[-1]])\n","    print(\"long_out :\", out_line)\n","  \n","    # t_tr = ((res_df['long_tp'].iloc[open_idx] - res_df['close'].iloc[open_idx] - tp_fee * res_df['close'].iloc[open_idx]) / (res_df['close'].iloc[open_idx] - res_df['long_out'].iloc[open_idx] + out_fee * res_df['close'].iloc[open_idx]))\n","    # t_dr = ((res_df['long_tp'].iloc[open_idx] - res_df['close'].iloc[open_idx]) / (res_df['close'].iloc[open_idx] - res_df['long_out'].iloc[open_idx]))     \n","    # print(\"t_tr :\", t_tr)\n","    # print(\"t_dr :\", t_dr)\n","\n","  #         hedge ep & tp         #\n","  h_i = h_trade_list[t_i][1]\n","  if h_i is not None:\n","    # plt.axvline(prev_plotsize + (h_i - ep_idx_list_[0]), linestyle='--')\n","    plt.axvline(prev_plotsize + (h_i - open_idx), linestyle='--')\n","    plt.axhline(h_ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='magenta')  # ep line axhline\n","    plt.axhline(h_ep_tp_list[t_i][1], linestyle='-', xmin=0.85, xmax=1, linewidth=3, color='magenta')  # tp line axhline\n","\n","  \n","  #         check pr        #\n","  if not config.lvrg_set.static_lvrg:\n","    \n","    #   list length Îßå sync ÎßûÏúºÎ©¥ t_i Í±±Ï†ï ÏïàÌï¥ÎèÑÎê®, zip Ìï¥ÏÑú ÏàúÏÑúÍ∞Ä Î∞îÎÄåÏóàÏùÑ Îøê, original serialized order ÏóêÏÑú t_i Î°ú indexing ÌïòÎäî Í≤ÉÎøêÏûÑ   #\n","    plt.title(\"%s ~ %s -> %.5f\\n %s\\n h_pr : %.5f\\n lvrg : %s\\ntp_ratio : %.3f\\n dr : %.3f\\n fee : %.4f\" % (ep_idx_list_[0], tp_idx_list_[-1], plot_pr_list[t_i], tp_state_list[t_i], \n","                                                                                                h_plot_pr_list[t_i], leverage_list[t_i], tp_ratio_list[t_i], dr_list[t_i], fee_list[t_i]))\n","\n","    print(\"short real pr :\", (ep_tp_list[t_i][0] / ep_tp_list[t_i][1][sub_i] - fee_list[t_i] - 1) * leverage_list[t_i] + 1)\n","    print(\"long real pr :\", (ep_tp_list[t_i][1][sub_i] / ep_tp_list[t_i][0] - fee_list[t_i] - 1) * leverage_list[t_i] + 1)    \n","\n","  else:\n","    plt.title(\"%s ~ %s -> %.5f\\n %s\\n h_pr : %.5f\\n tp_ratio : %.3f\\n dr : %.3f\\n fee : %.4f\" % (ep_idx_list_[0], tp_idx_list_[-1], plot_pr_list[t_i], tp_state_list[t_i], \n","                                                                                     h_plot_pr_list[t_i], tp_ratio_list[t_i], dr_list[t_i], fee_list[t_i]))\n","\n","    print(\"short real pr :\", (ep_tp_list[t_i][0] / ep_tp_list[t_i][1][sub_i] - fee_list[t_i] - 1) * config.lvrg_set.leverage + 1)\n","    print(\"long real pr :\", (ep_tp_list[t_i][1][sub_i] / ep_tp_list[t_i][0] - fee_list[t_i] - 1) * config.lvrg_set.leverage + 1)\n","  \n","  # ------------- y lim ------------- #  \n","  y_max_ = max(np.max(plot_df[yrange_colname]))\n","  y_min_ = min(np.min(plot_df[yrange_colname]))\n","  y_max = max(y_max, y_max_)\n","  y_min = min(y_min, y_min_)\n","  \n","  # hy_min = np.min(plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * 0.36)\n","  # hy_max = np.max(plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * 0.36)  \n","  # y_max = max(y_max, y_max_, hy_max)\n","  # y_min = min(y_min, y_min_, hy_min)\n","\n","  if np.isnan(y_max) or np.isnan(y_min):\n","    print('continued in yminmax')\n","    continue\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","\n","  plt.ylim(y_min, y_max)\n","\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  #           rsi          #    \n","  plt.subplot(gs[odds + 1])\n","  alpha = 1\n","  for rsi_ in rsi_list:\n","    plt.step(np.arange(len(plot_df)), plot_df[rsi_].values, 'g', alpha=alpha)\n","    # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","    alpha -= 0.2\n","  plt.axhline(50, linestyle='--')\n","  plt.axhline(50 + config.loc_set.point.osc_band, linestyle='--')\n","  plt.axhline(50 - config.loc_set.point.osc_band, linestyle='--')\n","  \n","  plt.axvline(prev_plotsize, linestyle='--')\n","  \n","  #           cci          #    \n","  # plt.subplot(gs[odds + 1])\n","  # alpha = 1\n","  # for cci_ in cci_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cci_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axhline(config.loc_set.point.osc_band, linestyle='--')\n","  # plt.axhline(-config.loc_set.point.osc_band, linestyle='--')\n","  \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","\n","\n","  #     vline open     #\n","  for ep_i in range(len(ep_idx_list_)):\n","    plt.axvline(prev_plotsize + (ep_idx_list_[ep_i] - open_idx), alpha=0.7, linestyle='--', color='#ffeb3b')\n","  \n","  #     vline close     #\n","  for sub_i in range(len(ep_tp_list[t_i][1])):\n","    plt.axvline(prev_plotsize + (tp_idx_list_[sub_i] - open_idx), alpha=1., linestyle='--', color='#ffeb3b', zorder=2)\n","\n","  if len(plot_df) > x_max:\n","    plt.xlim(0, x_max)\n","\n","\n","  if not save_plot:\n","    if odds == 2:\n","      plt.show()\n","      plt.close()\n","  \n","  else:\n","    # ---------- save mode ---------- #\n","    fig_name = plot_check_dir +  \"/%s.png\" % t_i\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","\n","  # plt.close()  \n","  print()\n","\n","  # break\n"]},{"cell_type":"markdown","source":["### sync_check"],"metadata":{"id":"X0FsT-8FZRti"}},{"cell_type":"code","source":["if multi_mode:\n","  strat_version = \"v3\"\n","\n","save_plot = 0\n","\n","open_idx_range = reversed(range(0, len(res_df), 1000))\n","plot_range = 100\n","\n","x_max = 400\n","\n","inversion = 0\n","hedge = 0\n","\n","\n","if save_plot:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".ftr\", \"\")\n","  try:\n","    os.mkdir(plot_check_dir)\n","  except:\n","\n","    #     remove existing dir   #\n","    shutil.rmtree(plot_check_dir)\n","    print(plot_check_dir, 'removed !')\n","    os.mkdir(plot_check_dir)\n","    # pass\n","    \n","\n","prev_plotsize = 30\n","post_plotsize = 20\n","\n","\n","\n","h_candle_intv1 = 15\n","h_candle_intv2 = 60\n","if 'hopen_{}'.format(h_candle_intv2) not in res_df.columns:\n","  res_df = h_candle(res_df, h_candle_intv1)\n","  res_df = h_candle(res_df, h_candle_intv2)\n","\n","res_df[\"ma30_1m\"] = res_df['close'].rolling(30).mean()\n","res_df[\"ma60_1m\"] = res_df['close'].rolling(60).mean()\n","\n","res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line)\n","# res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=1, use_dtk_line=1)\n","# break\n","\n","rtc_list = [\"short_tp_1_{}\".format(strat_version), \"short_tp_gap_{}\".format(strat_version), \"long_tp_1_{}\".format(strat_version), \"long_tp_gap_{}\".format(strat_version)]\n","# h_rtc_list = [\"h_short_tp_1\", \"h_short_tp_gap\", \"h_long_tp_1\", \"h_long_tp_gap\"]\n","dtk_list = [\"short_dtk_1_{}\".format(strat_version), \"short_dtk_gap_{}\".format(strat_version), \"long_dtk_1_{}\".format(strat_version), \"long_dtk_gap_{}\".format(strat_version),\n","            # \"short_dtk_1_line\", \"short_dtk_gap_line\", \"long_dtk_1_line\", \"long_dtk_gap_line\",\n","            \"short_dtk_plot_1\", \"short_dtk_plot_gap\", \"long_dtk_plot_1\", \"long_dtk_plot_gap\"]\n","dc_v2_list = ['dc_upper_v2_{}'.format(strat_version), 'dc_lower_v2_{}'.format(strat_version)]\n","\n","\n","ohlc_list = ['open', 'high', 'low', 'close'] # + basic_st_list\n","hcandle_list = ['hopen_%s' % h_candle_intv1, 'hclose_%s' % h_candle_intv1, 'hopen_%s' % h_candle_intv2, 'hclose_%s' % h_candle_intv2]\n","# hcandle_list = ['hopen_%s' % h_candle_intv1, 'hclose_%s' % h_candle_intv1, 'hhigh_%s' % h_candle_intv2, 'hlow_%s' % h_candle_intv2]\n","\n","# --------------------- dc & bb level --------------------- #\n","dc_interval = '1m'\n","hdc_interval = '5m'\n","hhdc_interval = '15m'\n","\n","st_list = ['st_base_%s' % hhdc_interval, 'st_upper_%s' % hhdc_interval, 'st_lower_%s' % hhdc_interval]\n","\n","dc_list = ['dc_upper_%s' % dc_interval, 'dc_lower_%s' % dc_interval]\n","hdc_list = ['dc_upper_%s' % hdc_interval, 'dc_lower_%s' % hdc_interval]\n","hhdc_list = ['dc_upper_%s' % hhdc_interval, 'dc_lower_%s' % hhdc_interval]\n","\n","bb_interval = dc_interval\n","hbb_interval = hdc_interval\n","hhbb_interval = hhdc_interval\n","\n","bb_list = ['bb_upper_%s' % bb_interval, 'bb_lower_%s' % bb_interval]\n","hbb_list = ['bb_upper_%s' % hbb_interval, 'bb_lower_%s' % hbb_interval]\n","hhbb_list = ['bb_upper_%s' % hhbb_interval, 'bb_lower_%s' % hhbb_interval]\n","\n","bbwp_list = ['bbwp', 'bbwp_ma']\n","\n","\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1']\n","senkoub_list = ['senkou_b1']\n","\n","sar_list = ['sar_3m', 'sar_5m', 'sar_15m']\n","\n","ma_list = ['ma30_1m', 'ma60_1m']\n","sma_list = ['sma_1m']\n","\n","ema_list = ['ema_5m']\n","# cb_list = ['cloud_bline_1m']\n","cb_list = ['cloud_bline_30m']\n","# cb_list = ['cloud_bline_5m']\n","\n","\n","\n","# -------------- under price phase -------------- #\n","# macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3']\n","# trix_list = ['trix1', 'trix2', 'trix3']\n","# stoch_list = ['stoch_5m']\n","# fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","# cctbbo_list = ['cctbbo']\n","# emaroc_list = ['ema_roc']\n","rsi_list = ['rsi_%s' % config.loc_set.point.exp_itv] \n","cci_list = ['cci_%s' % config.loc_set.point.exp_itv] \n","\n","\n","# -------------- summation -------------- #\n","# input_colname = ohlc_list + basic_st_list + pline_list + bb_list + hbb_list + sma_list + cb_list + stoch_list + sar_list + dc_list\n","input_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + hhdc_list + dtk_list + dc_v2_list + rsi_list + ema_list + ma_list + st_list# + cci_list\n","\n","# yrange_colname = ohlc_list + basic_st_list + pline_list # currently just used for ymin, ymax\n","yrange_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + hhdc_list + dc_v2_list + ema_list # currently just used for ymin, ymax\n","yrange_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + dc_v2_list + ema_list # currently just used for ymin, ymax\n","\n","\n","\n","odd_cnt = 0\n","obj_i = -1\n","rev_obj_i = 0\n","\n","#   ÏßÄÍ∏à, continue Î∞úÏÉùÏãú true / false idx Í∞Ä Í∞ôÏù¥ ÏÉÅÏäπÌïòÎäî Î¨∏Ï†ú\n","\n","# while 1:\n","for open_idx in open_idx_range:\n","\n","  # if obj_i >= len_obj or rev_obj_i >= len_obj:\n","  #   break\n","\n","  # if odd_cnt % 2 == 1 and tf_plot: #  loss plot ÏùÑ Ï±ÑÏõåÏïºÌïòÎäî ÏÉÅÌô©\n","  #   rev_obj_i += 1\n","\n","  # else:\n","  #   obj_i += 1\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","  \n","\n","  odd_cnt += 1\n","\n","  # break\n","\n","  print(\"open_idx :\", open_idx)\n","  \n","  plot_df = res_df.iloc[open_idx - prev_plotsize:open_idx + plot_range + post_plotsize][input_colname]\n","  \n","  odds = 1 if odd_cnt % 2 == 1 else 2\n","  if odds == 1:\n","\n","    plt.style.use('dark_background')\n","\n","    fig = plt.figure(figsize=(26, 18))\n","    \n","    gs = gridspec.GridSpec(nrows=2, # row Î™á Í∞ú \n","                        ncols=2, # col Î™á Í∞ú \n","                        height_ratios=[3, 1]\n","                        )\n","    \n","  ax = fig.add_subplot(gs[odds - 1])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='#26a69a', colordown='#ef5350', alpha=0.5)\n","\n","  # ---------- h_candle ---------- #\n","  alpha = 1\n","  lw = 1\n","  for cd_i, candle in enumerate(hcandle_list):\n","\n","    if cd_i == 2:\n","      lw = 2      \n","    plt.step(np.arange(len(plot_df)), plot_df[candle].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","\n","  # alpha = 0.1\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['hclose_60'].values, plot_df['hopen_60'].values, \n","  #                     where=1, facecolor='#ffffff', alpha=alpha)  \n","  \n","\n","   # --------- ma --------- #\n","  alpha = 1\n","  lw = 2\n","  for ma_i, item in enumerate(ma_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","   # --------- ema --------- #\n","  alpha = 1\n","  lw = 4\n","  for sm_i, item in enumerate(ema_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","    \n","   # --------- st --------- #\n","  alpha = 1\n","  lw = 2\n","  for sm_i, item in enumerate(st_list):\n","      plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#00ff00', linewidth=lw)\n","\n","  # ---------------------- dc_v2 ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(dc_v2_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","  # # ---------------------- dc ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(dc_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","  # # ---------------------- hdc ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(hdc_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#e65100', linewidth=lw)\n","\n","  # # ---------------------- hhdc ---------------------- #\n","  # alpha = 1\n","  # lw = 4\n","  # for sm_i, item in enumerate(hhdc_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#c2185b', linewidth=lw)\n","\n","\n","  # # ---------------------- bb ---------------------- #\n","  # alpha = 1\n","  # lw = 1\n","  # for sm_i, item in enumerate(bb_list):\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","\n","  # alpha = 0.2\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % bb_interval].values, plot_df['bb_lower_%s' % bb_interval].values, \n","  #                     where=plot_df['bb_upper_%s' % bb_interval].values >= plot_df['bb_lower_%s' % bb_interval].values, facecolor='#ffffff', alpha=alpha)   \n","\n","  # # ---------------------- hbb ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(hbb_list):\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ff00ff', linewidth=lw)\n","  \n","  # alpha = 0.2\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % hbb_interval].values, plot_df['bb_lower_%s' % hbb_interval].values, \n","  #                     where=plot_df['bb_upper_%s' % hbb_interval].values >= plot_df['bb_lower_%s' % hbb_interval].values, facecolor='#ff00ff', alpha=alpha) \n","  \n","  # # ---------------------- hhbb ---------------------- #\n","\n","  # alpha = 1\n","  # lw = 4\n","  # for sm_i, item in enumerate(hhbb_list):\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#3179f5', linewidth=lw)\n","  \n","  # alpha = 0.2\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % hhbb_interval].values, plot_df['bb_lower_%s' % hhbb_interval].values, \n","  #                     where=plot_df['bb_upper_%s' % hhbb_interval].values >= plot_df['bb_lower_%s' % hhbb_interval].values, facecolor='#3179f5', alpha=alpha) \n","  \n","  # ------------------- dtk_line (old, tp_line) ------------------- #\n","  \n","  # alpha = 1\n","  # lw = 2\n","  # rtc_ratio_list = [config.loc_set.zone.dt_k]\n","  \n","  # for rtc_k in rtc_ratio_list:    \n","  #   # plt.step(np.arange(len(plot_df)), plot_df['short_dtk_1_line'].values - plot_df['short_dtk_gap_line'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['long_dtk_1_line'].values + plot_df['long_dtk_gap_line'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","\n","  # hy_min = np.min(plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * rtc_k)\n","  # hy_max = np.max(plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * rtc_k)  \n","\n","  # alpha = 1\n","  # lw = 4\n","  # # h_rtc_ratio_list = [config.loc_set.zone.dt_k]\n","  # h_rtc_ratio_list = [config.loc_set.zone.zone_dt_k]\n","  # # h_rtc_ratio_list = [0.272, 0.36, 0.4, 0.5]\n","  \n","  # for h_rtc_k in h_rtc_ratio_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df['short_dtk_plot_1'].values - plot_df['short_dtk_plot_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['long_dtk_plot_1'].values + plot_df['long_dtk_plot_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['h_short_tp_1'].values - plot_df['h_short_tp_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['h_long_tp_1'].values + plot_df['h_long_tp_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","\n","  # # hy_min = np.min(plot_df['short_dtk_plot_1'].values - plot_df['short_dtk_plot_gap'].values * h_rtc_k)\n","  # # hy_max = np.max(plot_df['long_dtk_plot_1'].values + plot_df['long_dtk_plot_gap'].values * h_rtc_k)  \n","\n","  # ------------- y lim ------------- #  \n","  y_max = max(np.max(plot_df[yrange_colname]))\n","  y_min = min(np.min(plot_df[yrange_colname]))\n","  # y_max = max(y_max, y_max_)\n","  # y_min = min(y_min, y_min_)\n","  \n","  # hy_min = np.min(plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * 0.36)\n","  # hy_max = np.max(plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * 0.36)  \n","  # y_max = max(y_max, y_max_, hy_max)\n","  # y_min = min(y_min, y_min_, hy_min)\n","\n","  if np.isnan(y_max) or np.isnan(y_min):\n","    print('continued in yminmax')\n","    continue\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","\n","  plt.ylim(y_min, y_max)\n","\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  #           rsi          #    \n","  plt.subplot(gs[odds + 1])\n","  alpha = 1\n","  for rsi_ in rsi_list:\n","    plt.step(np.arange(len(plot_df)), plot_df[rsi_].values, 'g', alpha=alpha)\n","    # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","    alpha -= 0.2\n","  plt.axhline(50, linestyle='--')\n","  plt.axhline(50 + config.loc_set.point.osc_band, linestyle='--')\n","  plt.axhline(50 - config.loc_set.point.osc_band, linestyle='--')\n","  \n","  plt.axvline(prev_plotsize, linestyle='--')\n","  \n","  #           cci          #    \n","  # plt.subplot(gs[odds + 1])\n","  # alpha = 1\n","  # for cci_ in cci_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cci_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axhline(config.loc_set.point.osc_band, linestyle='--')\n","  # plt.axhline(-config.loc_set.point.osc_band, linestyle='--')\n","  \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","\n","\n","  if len(plot_df) > x_max:\n","    plt.xlim(0, x_max)\n","\n","\n","  if not save_plot:\n","    if odds == 2:\n","      plt.show()\n","      plt.close()\n","  \n","  else:\n","    # ---------- save mode ---------- #\n","    fig_name = plot_check_dir +  \"/%s.png\" % t_i\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","\n","  # plt.close()  \n","  print()\n","\n","  # break\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1Mb1_Dmh7BBhth9nN8kgvrbDazvbicO2H"},"id":"inQ6f-CDZYkr","executionInfo":{"status":"error","timestamp":1641725015901,"user_tz":-540,"elapsed":65937,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"3bcfcb73-f999-4393-b5d4-3b7ef3a6e11c"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"13a-U32Uy50I"},"source":["### brief np_pr survey"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"L9LdjV2uUWnp"},"outputs":[],"source":["# plot_pr_list[:100]\n","\n","plt.plot(np_pr)\n","plt.axhline(1)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"TBE0l6dHRYrE"},"source":["### whole pr & chart sync"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":877},"executionInfo":{"elapsed":1436,"status":"ok","timestamp":1636355589887,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"-txULkhXRbz5","outputId":"7cda9fc7-4a4e-4c52-ffa3-a974b5f7c66f"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 3 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 3 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]}],"source":["#     chunky survey ÌïÑÏöîÌï®    #\n","chunk_size = 50000\n","\n","sync_pr = np.ones(len(res_df))\n","sync_tr = np.zeros(len(res_df))\n","# sync_tr = np.empty(len(res_df))\n","# sync_tr[:] = np.nan\n","\n","max_tr = np.max(tp_ratio_list)\n","min_tr = np.min(tp_ratio_list)\n","\n","for ck_i in range(0, len(res_df), chunk_size):\n","\n","  chunked_df = res_df.iloc[ck_i:ck_i + chunk_size]\n","  # break\n","\n","  for pr_, eptp_idx, tr_ in zip(pr_list[ck_i:ck_i + chunk_size], trade_list[ck_i:ck_i + chunk_size], tp_ratio_list[ck_i:ck_i + chunk_size]):\n","    # print(pr_, eptp_idx)\n","    sync_pr[eptp_idx[-1][0]] = pr_\n","    sync_tr[eptp_idx[-1][0]] = tr_\n","    # break\n","\n","  chunked_pr = sync_pr[ck_i:ck_i + chunk_size]\n","  chunked_tr = sync_tr[ck_i:ck_i + chunk_size]\n","  chunked_tr = np.where(np.isnan(chunked_tr), pd.Series(chunked_tr).shift(1), chunked_tr)\n","\n","  # plt.figure(figsize=(8, 6))\n","\n","  plt.subplot(311)\n","  plt.plot(np.arange(len(chunked_df)), chunked_df['close'])\n","  # plt.show()\n","\n","  plt.subplot(312)\n","  plt.plot(np.cumprod(chunked_pr))\n","  \n","  plt.subplot(313)\n","  plt.plot(chunked_tr)\n","  plt.ylim(min_tr + 0.5 * (max_tr - min_tr), max_tr)\n","  \n","  plt.show()\n","  print()\n"]},{"cell_type":"markdown","metadata":{"id":"Qys2Bw5Ou3u9"},"source":["### plot indi. legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pi5ntOOVu6JT"},"outputs":[],"source":["\n","  # ---------------------- ma ---------------------- #\n","   # --------- ema --------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(ema_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  #   # --------- sma --------- #\n","  # alpha = 1\n","  # for sm_i, sma in enumerate(sma_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 4\n","  #   plt.step(np.arange(len(plot_df)), plot_df[sma].values, alpha=alpha, color='#e91e63', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  \n","  # ---------------------- cb ---------------------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(cb_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#5b9cf6', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","\n","  \n","  # ---------------------- sar ---------------------- #\n","  # alpha = 1\n","  # markersize = 5\n","  # for sar in sar_list:\n","  #   plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","  #   markersize += 1\n","  #   alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  # alpha = 0.7\n","  # for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","  #                     where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","  #                     where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","  #   alpha -= 0.05\n","  \n","\n","\n","  # ---------------------- outer price indi. ---------------------- #\n","  #           macd          #\n","  # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","    \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for stoch_ in stoch_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[stoch_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(stoch_upper, linestyle='--')\n","  # plt.axhline(stoch_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- cctbbo ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for cctbbo in cctbbo_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cctbbo].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(cctbbo_upper, linestyle='--')\n","  # plt.axhline(cctbbo_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- ema_roc ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for emaroc in emaroc_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[emaroc].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","  \n","  # ---------- bbw ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for bbwp_ in bbwp_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[bbwp_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(bbwp_thresh, linestyle='--')\n","\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n"]},{"cell_type":"markdown","metadata":{"id":"59nW2aKYzkN8"},"source":["### plot all indicator (stepline ver.)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":828},"executionInfo":{"elapsed":3326,"status":"ok","timestamp":1631665238032,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"JDH4rXgNzno6","outputId":"3ee8589d-27d7-4433-ed78-7bb1233cf175"},"outputs":[{"name":"stdout","output_type":"stream","text":["short real pr : [0.95849245]\n","long real pr : [1.0378222]\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 864x1152 with 2 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]}],"source":["save_plot = False\n","\n","\n","if save_plot:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".xlsx\", \"\")\n","  try:\n","    os.mkdir(plot_check_dir)\n","  except:\n","\n","    #     remove existing dir   #\n","    shutil.rmtree(plot_check_dir)\n","    print(plot_check_dir, 'removed !')\n","    os.mkdir(plot_check_dir)\n","    # pass\n","    \n","# prev_plotsize = 120\n","prev_plotsize = 150\n","post_plotsize = 20\n","\n","# inversion = True\n","inversion = False\n","\n","# hedge = True\n","# hedge = False\n","\n","\n","if inversion:  \n","\n","    plot_pr_list = rev_np_pr\n","    h_plot_pr_list = h_rev_np_pr  # hedge\n","\n","else:\n","\n","    plot_pr_list = np_pr\n","    try:\n","      h_plot_pr_list = h_np_pr\n","    except Exception as e:\n","      print(\"error in h_plot_pr :\", e)\n","      h_plot_pr_list = np_pr\n","\n","\n","#         select plot columns       #\n","major_st_list = ['major_ST1_Up', 'major_ST1_Down', 'major_ST2_Up', 'major_ST2_Down', 'major_ST3_Up', 'major_ST3_Down',\n","                 'major_middle_line', 'major_upper_middle', 'major_lower_middle']\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower'] # + major_st_list\n","\n","\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1',  'senkou_a2']\n","senkoub_list = ['senkou_b1',  'senkou_b2']\n","\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1']\n","\n","# ma_list = ['sma1', 'sma4']\n","ma_list = ['ema5']\n","\n","\n","#     -------------- under price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","# macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3']\n","# trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","trix_list = ['trix1', 'trix2', 'trix3']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","cctbbo_list = ['cctbbo']\n","emaroc_list = ['ema_roc']\n","\n","\n","#       \n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols + ichimoku_cols2\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + trix_list\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + ma_list\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + ma_list + macd_list + stoch_list + fisher_list + cctbbo_list\n","input_colname = basic_list + major_st_list + senkoua_list + senkoub_list + sar_list + stoch_list + fisher_list + emaroc_list\n","price_colname = basic_list + senkoua_list + senkoub_list + sar_list # currently just used for ymin, ymax\n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols\n","\n","\n","\n","\n","# for t_i, (initial_i, i, j) in enumerate(trade_list):\n","for t_i, (ep_idx_list_, tp_idx_list_) in enumerate(trade_list):\n","  # print(i, j)\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","\n","  # if i <= 4860:\n","  # if i == 1536:\n","  # if 100 < i < 1860:\n","  if ep_idx_list_[0] == 370530:\n","    pass\n","  else:\n","    continue\n","\n","  # if tp_state_list[t_i] != 'd-open':\n","  #   continue\n","\n","  # if (entry[i] == -1) and res_df['close'].iloc[i - 1] > short_ep.iloc[i]:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  # if plot_pr_list[t_i] > 0.5:\n","  # if plot_pr_list[t_i] > 1.0:\n","  # # if plot_pr_list[t_i] < 1.0:\n","  #   continue\n","\n","  # plot_df = res_df.iloc[i - prev_plotsize:j + post_plotsize, input_cols]\n","  plot_df = res_df.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize][input_colname]\n","\n","\n","  #       keep off-color st with another variable         #\n","  # st_trend_plot_df = res_df.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize, [7, 10, 13]]\n","  # st_trend_plot_df = res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend']].iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  st_trend_plot_df = res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend', 'major_ST1_Trend', 'major_ST2_Trend', 'major_ST3_Trend']].iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  # htf_st_trend_plot_df = res_df[['major_ST1_Trend', 'major_ST2_Trend', 'major_ST3_Trend']].iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","\n","  # y_max = np.max(plot_df.iloc[:, [4, 6, 8]])\n","  # y_min = np.min(plot_df.iloc[:, [5, 7, 9]])\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  \n","  # y_max = max(np.max(plot_df.iloc[:, [4, 6, 8]]))\n","  # y_min = min(np.min(plot_df.iloc[:, [5, 7, 9]]))\n","  \n","  y_max = max(np.max(plot_df[price_colname]))\n","  y_min = min(np.min(plot_df[price_colname]))\n","\n","  if np.isnan(y_max) or np.isnan(y_min):\n","    continue\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","  \n","  plot_df[\"off_color_upper_st1\"] = np.where(st_trend_plot_df['minor_ST1_Trend'] == 1, plot_df['minor_ST1_Up'], np.nan)\n","  plot_df[\"off_color_upper_st2\"] = np.where(st_trend_plot_df['minor_ST2_Trend'] == 1, plot_df['minor_ST2_Up'], np.nan)\n","  plot_df[\"off_color_upper_st3\"] = np.where(st_trend_plot_df['minor_ST3_Trend'] == 1, plot_df['minor_ST3_Up'], np.nan)\n","  plot_df[\"off_color_lower_st1\"] = np.where(st_trend_plot_df['minor_ST1_Trend'] == -1, plot_df['minor_ST1_Down'], np.nan)\n","  plot_df[\"off_color_lower_st2\"] = np.where(st_trend_plot_df['minor_ST2_Trend'] == -1, plot_df['minor_ST2_Down'], np.nan)\n","  plot_df[\"off_color_lower_st3\"] = np.where(st_trend_plot_df['minor_ST3_Trend'] == -1, plot_df['minor_ST3_Down'], np.nan)\n","\n","  plot_df[\"off_color_upper_hst1\"] = np.where(st_trend_plot_df['major_ST1_Trend'] == 1, plot_df['major_ST1_Up'], np.nan)\n","  plot_df[\"off_color_upper_hst2\"] = np.where(st_trend_plot_df['major_ST2_Trend'] == 1, plot_df['major_ST2_Up'], np.nan)\n","  plot_df[\"off_color_upper_hst3\"] = np.where(st_trend_plot_df['major_ST3_Trend'] == 1, plot_df['major_ST3_Up'], np.nan)\n","  plot_df[\"off_color_lower_hst1\"] = np.where(st_trend_plot_df['major_ST1_Trend'] == -1, plot_df['major_ST1_Down'], np.nan)\n","  plot_df[\"off_color_lower_hst2\"] = np.where(st_trend_plot_df['major_ST2_Trend'] == -1, plot_df['major_ST2_Down'], np.nan)\n","  plot_df[\"off_color_lower_hst3\"] = np.where(st_trend_plot_df['major_ST3_Trend'] == -1, plot_df['major_ST3_Down'], np.nan)\n","\n","\n","  #       replace st values with np.nan, using st trend     #\n","  plot_df['minor_ST1_Up'] = np.where(st_trend_plot_df['minor_ST1_Trend'] == 1, np.nan, plot_df['minor_ST1_Up'])\n","  plot_df['minor_ST2_Up'] = np.where(st_trend_plot_df['minor_ST2_Trend'] == 1, np.nan, plot_df['minor_ST2_Up'])\n","  plot_df['minor_ST3_Up'] = np.where(st_trend_plot_df['minor_ST3_Trend'] == 1, np.nan, plot_df['minor_ST3_Up'])\n","  plot_df['minor_ST1_Down'] = np.where(st_trend_plot_df['minor_ST1_Trend'] == -1, np.nan, plot_df['minor_ST1_Down'])\n","  plot_df['minor_ST2_Down'] = np.where(st_trend_plot_df['minor_ST2_Trend'] == -1, np.nan, plot_df['minor_ST2_Down'])\n","  plot_df['minor_ST3_Down'] = np.where(st_trend_plot_df['minor_ST3_Trend'] == -1, np.nan, plot_df['minor_ST3_Down'])\n","\n","  plot_df['major_ST1_Up'] = np.where(st_trend_plot_df['major_ST1_Trend'] == 1, np.nan, plot_df['major_ST1_Up'])\n","  plot_df['major_ST2_Up'] = np.where(st_trend_plot_df['major_ST2_Trend'] == 1, np.nan, plot_df['major_ST2_Up'])\n","  plot_df['major_ST3_Up'] = np.where(st_trend_plot_df['major_ST3_Trend'] == 1, np.nan, plot_df['major_ST3_Up'])\n","  plot_df['major_ST1_Down'] = np.where(st_trend_plot_df['major_ST1_Trend'] == -1, np.nan, plot_df['major_ST1_Down'])\n","  plot_df['major_ST2_Down'] = np.where(st_trend_plot_df['major_ST2_Trend'] == -1, np.nan, plot_df['major_ST2_Down'])\n","  plot_df['major_ST3_Down'] = np.where(st_trend_plot_df['major_ST3_Trend'] == -1, np.nan, plot_df['major_ST3_Down'])\n","\n","\n","  plot_short_ep = short_ep.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  plot_long_ep = long_ep.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","\n","  plot_upper_middle = (plot_df['middle_line'] + plot_df['min_upper']) / 2\n","  plot_lower_middle = (plot_df['middle_line'] + plot_df['max_lower']) / 2\n","\n","  plot_short_tp = short_tp.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  plot_long_tp = long_tp.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]  \n","\n","\n","  # fig = trendln.plot_support_resistance(plot_df['close'], accuracy=8, fromwindows=False, numbest=1,  window=30) # requires matplotlib - pip install matplotlib\n","\n","  fig = plt.figure(figsize=(12, 16))\n","  \n","  gs = gridspec.GridSpec(nrows=3, # row Î™á Í∞ú \n","                       ncols=1, # col Î™á Í∞ú \n","                       height_ratios=[3, 1, 1]\n","                      )\n","  \n","  # fig = plt.figure(figsize=(8, 12))\n","  # ax = fig.add_subplot(111)\n","  # ax = fig.add_subplot(311)\n","  ax = fig.add_subplot(gs[0])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='r', colordown='b')\n","\n","  plt.step(plot_df[['minor_ST1_Up', 'minor_ST2_Up', 'minor_ST3_Up']].values, 'r', alpha=1)  # upper on color\n","  plt.step(plot_df[['minor_ST1_Down', 'minor_ST2_Down', 'minor_ST3_Down']].values, 'b', alpha=1)  # lower on color\n","  \n","  plt.step(plot_df[['major_ST1_Up', 'major_ST2_Up', 'major_ST3_Up']].values, 'r', alpha=1, linewidth=3)  # major upper on color\n","  plt.step(plot_df[['major_ST1_Down', 'major_ST2_Down', 'major_ST3_Down']].values, 'b', alpha=1, linewidth=3)  # major lower on color\n","\n","  plt.step(plot_df[['middle_line']].values, 'fuchsia', alpha=1)  # middle \n","  plt.step(plot_df[['major_middle_line']].values, 'fuchsia', alpha=1, linewidth=3)  # major_middle \n","  \n","  plt.step(plot_df[['off_color_upper_st1', 'off_color_upper_st2', 'off_color_upper_st3']].values, 'r', alpha=1, linestyle=':')  # upper off color\n","  plt.step(plot_df[['off_color_lower_st1', 'off_color_lower_st2', 'off_color_lower_st3']].values, 'b', alpha=1, linestyle=':')  # lower off color\n","  \n","  plt.step(plot_df[['off_color_upper_hst1', 'off_color_upper_hst2', 'off_color_upper_hst3']].values, 'r', alpha=1, linestyle=':', linewidth=3)  # major upper off color\n","  plt.step(plot_df[['off_color_lower_hst1', 'off_color_lower_hst2', 'off_color_lower_hst3']].values, 'b', alpha=1, linestyle=':', linewidth=3)  # major lower off color\n","\n","\n","  # plt.step(np.arange(len(plot_df)), plot_short_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","  # plt.step(np.arange(len(plot_df)),plot_long_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","\n","  plt.step(np.arange(len(plot_df)), plot_upper_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","  plt.step(np.arange(len(plot_df)), plot_lower_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","\n","  plt.step(plot_df[['major_upper_middle']].values, 'g', linestyle='--', alpha=1, linewidth=3)  # major_middle \n","  plt.step(plot_df[['major_lower_middle']].values, 'g', linestyle='--', alpha=1, linewidth=3)  # major_middle \n","  \n","\n","  # plt.step(np.arange(len(plot_df)), plot_short_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","  # plt.step(np.arange(len(plot_df)), plot_long_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","\n","\n","\n","  # ---------------------- on price indicator part ---------------------- #\n","\n","  # ---------------------- sma ---------------------- #\n","  # alpha = 1\n","  # for sm_i, sma in enumerate(ma_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[sma].values, alpha=alpha, color='black', linewidth=lw)\n","  #   alpha -= 0.2\n","  \n","  #               sar               #\n","  alpha = 1\n","  markersize = 5\n","  for sar in sar_list:\n","    plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","    markersize += 1\n","    alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  alpha = 0.7\n","  for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","                      where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","                      where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","    alpha -= 0.05\n","  \n","  # ------------------------------------------------------------- #\n","\n","\n","  #       ep & tp     #\n","  # if i != initial_i:\n","  # if len(ep_idx_list_) > 1:\n","  \n","  # ------------- initial order ------------- #\n","  plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  for ep_i in range(len(ep_idx_list_)):\n","    plt.axvline(prev_plotsize + (ep_idx_list_[ep_i] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","\n","  # plt.axvline(prev_plotsize, alpha=0.5, linestyle='--')\n","  plt.axhline(ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='lime')  # ep line axhline\n","\n","  for sub_i in range(len(ep_tp_list[t_i][1])):\n","    plt.axhline(ep_tp_list[t_i][1][sub_i], linestyle='-', xmin=0.75 + 0.05 * (sub_i + 1) , xmax=1, linewidth=3, color='lime')  # tp line axhline\n","    # plt.axhline(ep_tp_list[t_i][1], linestyle='-', xmin=0.9, xmax=1, linewidth=3)  # tp line axhline  \n","    plt.axvline(prev_plotsize + (tp_idx_list_[sub_i] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","\n","\n","  #         hedge ep & tp         #\n","  h_i = h_trade_list[t_i][1]\n","  if h_i is not None:\n","    plt.axvline(prev_plotsize + (h_i - ep_idx_list_[0]), linestyle='--')\n","    plt.axhline(h_ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='magenta')  # ep line axhline\n","    plt.axhline(h_ep_tp_list[t_i][1], linestyle='-', xmin=0.85, xmax=1, linewidth=3, color='magenta')  # tp line axhline\n","\n","  \n","  #         check pr        #\n","  if not static_lvrg:\n","    plt.title(\"%s ~ %s -> %.5f\\n %s\\n h_pr : %.5f\\nlvrg : %s\\ntp_ratio : %.2f\" % (ep_idx_list_[0], tp_idx_list_[-1], plot_pr_list[t_i], tp_state_list[t_i], h_plot_pr_list[t_i], lvrg_list[t_i], tp_ratio_list[t_i]))\n","  else:\n","    plt.title(\"%s ~ %s -> %.5f\\n %s\\n h_pr : %.5f\\ntp_ratio : %.2f\" % (ep_idx_list_[0], tp_idx_list_[-1], plot_pr_list[t_i], tp_state_list[t_i], h_plot_pr_list[t_i], tp_ratio_list[t_i]))\n","\n","  print(\"short real pr :\", (ep_tp_list[t_i][0] / ep_tp_list[t_i][1][sub_i] - fee - 1) * lvrg + 1)\n","  print(\"long real pr :\", (ep_tp_list[t_i][1][sub_i] / ep_tp_list[t_i][0] - fee - 1) * lvrg + 1)\n","\n","  #           y lim         #\n","  plt.ylim(y_min, y_max)\n","\n","\n","  # ---------------------- outer price indi. ---------------------- #\n","  #           macd          #\n","  # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","    \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for stoch in stoch_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[stoch].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(stoch_upper, linestyle='--')\n","  # plt.axhline(stoch_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- cctbbo ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for cctbbo in cctbbo_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cctbbo].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(cctbbo_upper, linestyle='--')\n","  # plt.axhline(cctbbo_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- ema_roc ---------- #  \n","  plt.subplot(gs[1])\n","  alpha = 1\n","  for emaroc in emaroc_list:\n","    plt.step(np.arange(len(plot_df)), plot_df[emaroc].values, 'g', alpha=alpha)\n","    # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","    alpha -= 0.2\n","  plt.axvline(prev_plotsize, linestyle='--')\n","  plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","  plt.axhline(0, linestyle='--')\n","\n","\n","\n","\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  if not save_plot:\n","    plt.show()\n","  \n","  else:\n","    # ---------- save mode ---------- #\n","    fig_name = plot_check_dir +  \"/%s.png\" % t_i\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","\n","  \n","  plt.close()\n","  print()\n","\n","  # break\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KGuJu2j4Aby9"},"outputs":[],"source":["# print()\n","for item in os.listdir(current_path + \"plot_check/\"):\n","  if item.endswith('png'):\n","    os.remove(current_path + \"plot_check/\" + item)\n","    print(current_path + \"plot_check/\" + item, \"removed !\")"]},{"cell_type":"markdown","metadata":{"id":"cj9X6S1jJjER"},"source":["### plot nontp case"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Gb1jGrS4Jl8A"},"outputs":[],"source":["prev_plotsize = 50\n","\n","# inversion = True\n","inversion = False\n","\n","# hedge = True\n","# hedge = False\n","\n","short_ver = False\n","\n","\n","if inversion:  \n","\n","    plot_pr_list = rev_np_pr\n","    h_plot_pr_list = h_rev_np_pr  # hedge\n","\n","else:\n","\n","    plot_pr_list = np_pr\n","    h_plot_pr_list = h_np_pr\n","\n","\n","\n","#         select plot columns       #\n","# basic_cols = [0, 1, 2, 3, 5, 6, 8, 9, 11, 12, 14] # you don't need to touch\n","\n","# sar_cols = [15, 18] # 15 ~ 19\n","# ichimoku_cols = [20, 21]  # 20 ~ 29\n","# # ichimoku_cols = [22, 23]  # 20 ~ 29\n","# ichimoku_cols2 = [22, 23]  # 20 ~ 29\n","# macd_cols = [30]  # 30 ~ 34\n","\n","# print(res_df.columns[basic_cols])\n","# break\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower']\n","# senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","# senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","\n","#     -------------- under price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher']\n","cctbbo_list = ['cctbbo']\n","\n","\n","#       \n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols + ichimoku_cols2\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + trix_list\n","input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + stoch_list + fisher_list + cctbbo_list\n","price_colname = basic_list + senkoua_list + senkoub_list + sar_list \n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols\n","\n","\n","if short_ver:\n","  nontp_indexs = nontp_short_indexs\n","  nontp_liqd_list = nontp_short_liqd_list\n","  nontp_pr_list = nontp_short_pr_list\n","  nontp_ep = nontp_short_ep_list\n","else:\n","  nontp_indexs = nontp_long_indexs\n","  nontp_liqd_list = nontp_long_liqd_list\n","  nontp_pr_list = nontp_long_pr_list\n","  nontp_ep = nontp_long_ep_list\n","\n","\n","for t_i, i in enumerate(nontp_indexs):\n","\n","  j = len(res_df) - 1\n","\n","  # print(i, j)\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","\n","  # if i <= 4860:\n","  # if i == 1536:\n","  # # if 1800 < i < 1860:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  # if tp_state_list[t_i] != 'd-open':\n","  #   continue\n","\n","  # if (entry[i] == -1) and res_df['close'].iloc[i - 1] > upper_ep.iloc[i]:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  # if plot_pr_list[t_i] > 0.5:\n","  # if plot_pr_list[t_i] > 1.0:\n","  # # if plot_pr_list[t_i] < 1.0:\n","  #   continue\n","\n","  # plot_df = res_df.iloc[i - prev_plotsize:j + 1, input_cols]\n","  plot_df = res_df.iloc[i - prev_plotsize:j + 1][input_colname]\n","\n","\n","  #       keep off-color st with another variable         #\n","  st_trend_plot_df = res_df.iloc[i - prev_plotsize:j + 1, [7, 10, 13]]\n","\n","  # y_max = np.max(plot_df.iloc[:, [4, 6, 8]])\n","  # y_min = np.min(plot_df.iloc[:, [5, 7, 9]])\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  \n","  # y_max = max(np.max(plot_df.iloc[:, [4, 6, 8]]))\n","  # y_min = min(np.min(plot_df.iloc[:, [5, 7, 9]]))\n","  \n","  y_max = max(np.max(plot_df[price_colname]))\n","  y_min = min(np.min(plot_df[price_colname]))\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","\n","  plot_df[\"off_color_upper_st1\"] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, plot_df.iloc[:, [4]], np.nan)\n","  plot_df[\"off_color_upper_st2\"] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, plot_df.iloc[:, [6]], np.nan)\n","  plot_df[\"off_color_upper_st3\"] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, plot_df.iloc[:, [8]], np.nan)\n","  plot_df[\"off_color_lower_st1\"] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, plot_df.iloc[:, [5]], np.nan)\n","  plot_df[\"off_color_lower_st2\"] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, plot_df.iloc[:, [7]], np.nan)\n","  plot_df[\"off_color_lower_st3\"] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, plot_df.iloc[:, [9]], np.nan)\n","\n","\n","  #       replace st values with np.nan, using st trend     #\n","  plot_df.iloc[:, [4]] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, np.nan, plot_df.iloc[:, [4]])\n","  plot_df.iloc[:, [6]] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, np.nan, plot_df.iloc[:, [6]])\n","  plot_df.iloc[:, [8]] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, np.nan, plot_df.iloc[:, [8]])\n","  plot_df.iloc[:, [5]] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, np.nan, plot_df.iloc[:, [5]])\n","  plot_df.iloc[:, [7]] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, np.nan, plot_df.iloc[:, [7]])\n","  plot_df.iloc[:, [9]] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, np.nan, plot_df.iloc[:, [9]])\n","\n","\n","  plot_upper_ep = upper_ep.iloc[i - prev_plotsize:j + 1]\n","  plot_lower_ep = lower_ep.iloc[i - prev_plotsize:j + 1]\n","\n","  plot_upper_middle = (plot_df['middle_line'] + plot_df['min_upper']) / 2\n","  plot_lower_middle = (plot_df['middle_line'] + plot_df['max_lower']) / 2\n","\n","  plot_short_tp = short_tp.iloc[i - prev_plotsize:j + 1]\n","  plot_long_tp = long_tp.iloc[i - prev_plotsize:j + 1]  \n","\n","\n","\n","  # fig = plt.figure(figsize=(12, 16))\n","  fig = plt.figure(figsize=(12, 16))\n","  \n","  gs = gridspec.GridSpec(nrows=3, # row Î™á Í∞ú \n","                       ncols=1, # col Î™á Í∞ú \n","                       height_ratios=[3, 1, 1]\n","                      )\n","  \n","  # fig = plt.figure(figsize=(8, 12))\n","  # ax = fig.add_subplot(111)\n","  # ax = fig.add_subplot(311)\n","  ax = fig.add_subplot(gs[0])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='r', colordown='b')\n","\n","  # print(plot_df.values[:, 4:])\n","  plt.step(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper on color\n","  # plt.plot(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper on color\n","  plt.step(plot_df.values[:, [5, 7, 9]], 'b', alpha=1)  # lower on color\n","  plt.step(plot_df.values[:, [10]], 'fuchsia', alpha=1)  # middle\n","  \n","  plt.step(plot_df.values[:, -6:-3], 'r', alpha=1, linestyle=':')  # upper off color\n","  plt.step(plot_df.values[:, -3:], 'b', alpha=1, linestyle=':')  # lower off color\n","\n","\n","\n","  # plt.step(np.arange(len(plot_df)), plot_upper_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","  # plt.step(np.arange(len(plot_df)),plot_lower_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","\n","  plt.step(np.arange(len(plot_df)), plot_upper_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","  plt.step(np.arange(len(plot_df)), plot_lower_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","\n","  # plt.step(np.arange(len(plot_df)), plot_short_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","  # plt.step(np.arange(len(plot_df)), plot_long_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","\n","\n","\n","  # ---------------------- indicator part ---------------------- #\n","  \n","  #               sar               #\n","  alpha = 1\n","  markersize = 5\n","  for sar in sar_list:\n","    plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","    markersize += 1\n","    alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  alpha = 0.7\n","  for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","                      where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","                      where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","    alpha -= 0.05\n","  \n","  # ------------------------------------------------------------- #\n","\n","\n","  #       ep & tp     #\n","  if i != initial_i:\n","    plt.axvline(prev_plotsize - (i - initial_i), alpha=0.5, linestyle='--')\n","  plt.axvline(prev_plotsize, alpha=0.5, linestyle='--')\n","  plt.axhline(nontp_ep[t_i], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='lime')  # ep line axhline\n","\n","  # for sub_i in range(len(ep_tp_list[t_i][1])):\n","  #   plt.axhline(ep_tp_list[t_i][1][sub_i], linestyle='-', xmin=0.75 + 0.05 * (sub_i + 1) , xmax=1, linewidth=3, color='lime')  # tp line axhline\n","    # plt.axhline(ep_tp_list[t_i][1], linestyle='-', xmin=0.9, xmax=1, linewidth=3)  # tp line axhline    \n","\n","  #         hedge ep & tp         #\n","  # h_i = h_trade_list[t_i][1]\n","  # if h_i is not None:\n","  #   plt.axvline(prev_plotsize + (h_i - i), linestyle='--')\n","  #   plt.axhline(h_ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='magenta')  # ep line axhline\n","  #   plt.axhline(h_ep_tp_list[t_i][1], linestyle='-', xmin=0.85, xmax=1, linewidth=3, color='magenta')  # tp line axhline\n","\n","  \n","  #         check pr        #\n","  plt.title(\"%s ~ %s -> liqd : %.2f\\npr : %.2f\" % (i, j, nontp_liqd_list[t_i], nontp_pr_list[t_i]))\n","\n","  #           y lim         #\n","  plt.ylim(y_min, y_max)\n","\n","\n","  # #           macd          #\n","  # # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # plt.subplot(313)\n","  plt.subplot(gs[1])\n","  alpha = 1\n","  for stoch in stoch_list:\n","    plt.step(np.arange(len(plot_df)), plot_df[stoch].values, 'g', alpha=alpha)\n","    # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","    alpha -= 0.2\n","  plt.axvline(prev_plotsize, linestyle='--')\n","  plt.axhline(50, linestyle='--')\n","  plt.axhline(stoch_upper, linestyle='--')\n","  plt.axhline(stoch_lower, linestyle='--')\n","\n","\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  plt.show()\n","  # plt.draw()\n","  plt.close()\n","  print()\n","\n","  # break\n"]},{"cell_type":"markdown","metadata":{"id":"-g7YY5BvMcLS"},"source":["### show detail values"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":255,"status":"ok","timestamp":1625228960601,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"5TxQ3rDnKMa7","outputId":"422ac214-8c88-4f39-ec3a-7c823574f6da"},"outputs":[{"name":"stdout","output_type":"stream","text":["upper_ep.iloc[i] : 2348.266954813089\n","short_tp.iloc[j] : 2205.609333246829\n"]}],"source":["i, j = 27267, 27268\n","print(\"upper_ep.iloc[i] :\", upper_ep.iloc[i])\n","print(\"short_tp.iloc[j] :\", short_tp.iloc[j])"]},{"cell_type":"markdown","metadata":{"id":"7AIl6EBuZNOL"},"source":["## none plot off-color st"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yaVxrNGzZgrF"},"outputs":[],"source":["prev_plotsize = 50\n","\n","for t_i, (i, j) in enumerate(trade_list):\n","  # print(i, j)\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","\n","  # if pr_list[t_i] >= 1:\n","  #   continue\n","\n","  plot_df = res_df.iloc[i - prev_plotsize:j + 1, [0, 1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 16]]\n","\n","  #       replace st values with np.nan, using st trend     #\n","  st_trend_plot_df = res_df.iloc[i - prev_plotsize:j + 1, [7, 10, 13]]\n","  plot_df.iloc[:, [4]] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, np.nan, plot_df.iloc[:, [4]])\n","  plot_df.iloc[:, [6]] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, np.nan, plot_df.iloc[:, [6]])\n","  plot_df.iloc[:, [8]] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, np.nan, plot_df.iloc[:, [8]])\n","  plot_df.iloc[:, [5]] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, np.nan, plot_df.iloc[:, [5]])\n","  plot_df.iloc[:, [7]] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, np.nan, plot_df.iloc[:, [7]])\n","  plot_df.iloc[:, [9]] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, np.nan, plot_df.iloc[:, [9]])\n","\n","\n","  plot_upper_ep = upper_ep.iloc[i - prev_plotsize:j + 1]\n","  plot_lower_ep = lower_ep.iloc[i - prev_plotsize:j + 1]\n","\n","  fig = plt.figure(figsize=(8, 6))\n","  ax = fig.add_subplot(111)\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='r', colordown='b')\n","\n","  # print(plot_df.values[:, 4:])\n","  plt.plot(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper\n","  plt.plot(plot_df.values[:, [5, 7, 9]], 'b', alpha=1)  # lower\n","  plt.plot(plot_df.values[:, [10]], 'g', alpha=1)  # middle\n","\n","  plt.plot(plot_df.values[:, [11]], 'c*', alpha=1, markersize=5)  # sar mic\n","  plt.plot(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  plt.plot(plot_upper_ep.values, alpha=1, linestyle='--')  # ep\n","  plt.plot(plot_lower_ep.values, alpha=1, linestyle='--')  # ep\n","\n","  plt.axvline(prev_plotsize, linestyle='--')\n","\n","  plt.title(\"%s ~ %s -> %.5f\" % (i, j, pr_list[t_i]))\n","  plt.show()\n","  # plt.draw()\n","  plt.close()"]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":["M8-EChy0VsDr","Iy76iO7gztne","VdukVo5-Suzj","Bw5JibDKSuzj","t1E_eAyPSuzm","L7l5CTJfSuzn","x_XGJqBi8Jex","Ci_jUnNTZbm9","dzla8i9_ysmP","o5psPOVOCA1c","Up1TNNxbfKbk","o-XjNS1L31YB","FxJ1y8v2fkCR","VBwVaUkvfnOd","FaRGwR4NEop2","2gxvme1PC6ha","5la6usMOFzkX","OJqkmkpsLCYC"],"name":"AT_v7_3_backi2(0111_limit_rebalance_rpdc_tolowertf2_eploc_hcandle).ipynb","toc_visible":true,"provenance":[],"authorship_tag":"ABX9TyO5MehatZkYyn4pcbeLVdEg"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"widgets":{"application/vnd.jupyter.widget-state+json":{"3200455890c445beb1ffd6ad259b8cbb":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_7d96eec34cbe4cd482d6d0c6b3462d0d","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_24a6dcc4e3ba43d6a1ea15d14900cb66","IPY_MODEL_fa2be8ab0fdd479294b35d7258bf5732","IPY_MODEL_d8859185995d402d856b6bbc53e3c1ec"]}},"7d96eec34cbe4cd482d6d0c6b3462d0d":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"24a6dcc4e3ba43d6a1ea15d14900cb66":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_view_name":"HTMLView","style":"IPY_MODEL_b52922864a824417bf4b46f1069334f2","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"‚Äã","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":"100%","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_186ae7bf0e7845af9e426a89e27b0164"}},"fa2be8ab0fdd479294b35d7258bf5732":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_view_name":"ProgressView","style":"IPY_MODEL_25928e1f2017445a919af118620c0639","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"success","max":7,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":7,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_385ca486f82947f6960e8602c04c9eb8"}},"d8859185995d402d856b6bbc53e3c1ec":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_view_name":"HTMLView","style":"IPY_MODEL_8e37fa2709ef416f8b088205972d08c6","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"‚Äã","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 7/7 [00:24&lt;00:00, 12.39s/it]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_9ee7b2fa5ca3449da564d16ddc976c84"}},"b52922864a824417bf4b46f1069334f2":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"186ae7bf0e7845af9e426a89e27b0164":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"25928e1f2017445a919af118620c0639":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"385ca486f82947f6960e8602c04c9eb8":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"8e37fa2709ef416f8b088205972d08c6":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"9ee7b2fa5ca3449da564d16ddc976c84":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}}}}},"nbformat":4,"nbformat_minor":0}