{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Make_model_high","provenance":[{"file_id":"16vvpYLDxnjas3O39oRbr2uR-DjJ0A4oV","timestamp":1579008418541}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"A0OlJV790sLC","colab_type":"code","colab":{}},"source":["# !nvidia-smi"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"-yZi4B_c2A5B","colab_type":"code","colab":{}},"source":["# from google.colab import files\n","\n","# uploaded = files.upload()\n","\n","# for fn in uploaded.keys():\n","#   print('Local files \"{name}\" with length {length} bytes'.format(name=fn, length=len(uploaded[fn])))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"BfHamvp0-kV8","colab_type":"code","outputId":"0ce8ccd2-805d-46bf-ace2-d4a1221ab85b","executionInfo":{"status":"ok","timestamp":1580658139291,"user_tz":-540,"elapsed":38549,"user":{"displayName":"J 1","photoUrl":"","userId":"08178289703395036410"}},"colab":{"base_uri":"https://localhost:8080/","height":127}},"source":["from google.colab import drive\n","\n","drive.mount('/content/gdrive')"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/gdrive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"iiQUsb_R8b93","colab_type":"code","colab":{}},"source":["# !pip uninstall scipy\n","# !pip install scipy==1.1.0\n","# !pip install pillow"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"l9kMVYfN4p_J","colab_type":"code","colab":{}},"source":["import pandas as pd\n","import numpy as np\n","from matplotlib import pyplot as plt\n","from matplotlib import pyplot\n","import scipy.misc \n","from math import sqrt \n","import itertools\n","from IPython.display import display\n","%matplotlib inline"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Yw8yOWPr_Aoq","colab_type":"code","colab":{}},"source":["# scipy.__version__"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"TkK_cm7d3sQe","colab_type":"code","outputId":"2a34b099-8f33-41f1-fce3-d7bc486f3a3c","executionInfo":{"status":"ok","timestamp":1580658167347,"user_tz":-540,"elapsed":6386,"user":{"displayName":"J 1","photoUrl":"","userId":"08178289703395036410"}},"colab":{"base_uri":"https://localhost:8080/","height":53}},"source":["input_data_length = int(input('input_data_length : '))\n","model_num = input('Press model number : ')"],"execution_count":4,"outputs":[{"output_type":"stream","text":["input_data_length : 96\n","Press model number : 0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Dd8ivd1z46ZA","colab_type":"code","outputId":"4e2ece0c-d664-4c79-9a3d-5202626c3b6e","executionInfo":{"status":"ok","timestamp":1580658269049,"user_tz":-540,"elapsed":7635,"user":{"displayName":"J 1","photoUrl":"","userId":"08178289703395036410"}},"colab":{"base_uri":"https://localhost:8080/","height":71}},"source":["\n","\n","Made_X = np.load('/content/gdrive/My Drive/Colab Notebooks/Made_X/Made_X %s_%s.npy' % (input_data_length, model_num))\n","Made_Y = np.load('/content/gdrive/My Drive/Colab Notebooks/Made_X_high/Made_Y %s_%s.npy' % (input_data_length, model_num))\n","\n","print(Made_X.shape)\n","print(Made_Y.shape)\n","print(np.sum(Made_Y))"],"execution_count":5,"outputs":[{"output_type":"stream","text":["(271489, 96, 6)\n","(271489, 1)\n","28358.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"RcT9ZHKZPXwb","colab_type":"code","outputId":"17c4fe75-e924-4ac4-cc61-a8109786e566","executionInfo":{"status":"ok","timestamp":1580658270101,"user_tz":-540,"elapsed":8675,"user":{"displayName":"J 1","photoUrl":"","userId":"08178289703395036410"}},"colab":{"base_uri":"https://localhost:8080/","height":320}},"source":["plt.figure(figsize=(10,5))\n","plt.plot(Made_Y)\n","plt.show()\n"],"execution_count":6,"outputs":[{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAlMAAAEvCAYAAABhSUTPAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjIsIGh0\ndHA6Ly9tYXRwbG90bGliLm9yZy8li6FKAAAY80lEQVR4nO3da4xc533f8e9/Znb2wuXyrhtJmbJD\npxGatrIJ1UCC1KgdR9ILqUbcQgIKu6kRAWlUpEhaQIEL13BfOUVTIKgaV0WMxEZrWXFvBKpAcRO3\nBtrKFh3bsiVF1lq2JVKiSPGy5HIvc/v3xRwJ6zWXXOtZzqxmvx/gYM95zrPn/PfZZ2Z/PHNmGJmJ\nJEmS3pzasAuQJEl6KzNMSZIkFTBMSZIkFTBMSZIkFTBMSZIkFTBMSZIkFWgM68R79+7NQ4cODev0\nkiRJ6/b1r3/9tczcd7l9QwtThw4d4tixY8M6vSRJ0rpFxA/X2ufLfJIkSQUMU5IkSQUMU5IkSQUM\nU5IkSQUMU5IkSQUMU5IkSQUMU5IkSQWuGqYi4jMRcSoivrPG/oiI34uI2Yh4KiLetfFlSpIkbU7r\nuTL1h8AdV9h/J3C4Wu4Hfr+8LEmSpLeGq34CemZ+JSIOXaHLPcBnMzOBJyJiZ0TcmJmvbFCNb9pH\nPvM1/vd3T6+5v1mv0er2BlgRTI7VWWx3B3rOq7n9lt2cOLfIifOLwy5FkjaFRi3o9HLYZegKto83\nuLjcAeDZT97BZLM+tFo24p6p/cBLK7aPV20/JiLuj4hjEXHs9Om1Q85G+MaL564YpICBBylg0wUp\ngK99/6xBSpJWMEhtfq8HKYCf/cTjQ6xkwDegZ+bDmXkkM4/s23fZ/ytww5yZb13T40uSpM1h2OF3\nI8LUCeDgiu0DVZskSdLI24gwdRT4cPWuvvcAc5vhfilJkqRBuOoN6BHxeeC9wN6IOA78C2AMIDM/\nDTwG3AXMAgvAr1yrYiVJkjab9byb776r7E/g1zesIkmSpLcQPwFdkiSpgGFKkiSpgGFKkiSpgGFK\nkiSpgGFKkiSpgGFKkiSpgGFKkiSpgGFKkiSpgGFKkiSpgGFKkiSpwMiGqYhhVyBJkraCkQ1TkiRJ\ng2CYkiRJKmCYkiRJKjCyYSpz2BVIkqStYGTDlCRJ0iAYpiRJkgoYpiRJkgoYpiRJkgoYpiRJkgoY\npiRJkgoYpiRJkgoYpiRJkgoYpiRJkgoYpiRJkgoYpiRJkgqMbJiKGHYFkiRpKxjZMCVJkjQIhilJ\nkqQChilJkqQChilJkqQChilJkqQChilJkqQChilJkqQChilJkqQCIxumModdgSRJ2gpGNkxJkiQN\ngmFKkiSpgGFKkiSpgGFKkiSpwLrCVETcERHPRcRsRDx4mf03R8SXI+IbEfFURNy18aVKkiRtPlcN\nUxFRBx4C7gRuBe6LiFtXdfvnwKOZeRtwL/DvNrrQn1TEsCuQJElbwXquTN0OzGbmC5nZAh4B7lnV\nJ4GZan0H8PLGlShJkrR5NdbRZz/w0ort48DfXNXnE8CfRsQ/BrYB79+Q6iRJkja5jboB/T7gDzPz\nAHAX8LmI+LFjR8T9EXEsIo6dPn16g04tSZI0POsJUyeAgyu2D1RtK30UeBQgM/8fMAHsXX2gzHw4\nM49k5pF9+/a9uYolSZI2kfWEqSeBwxFxS0Q06d9gfnRVnxeB9wFExM/QD1NeepIkSSPvqmEqMzvA\nA8DjwLP037X3dER8MiLurrr9FvCrEfEt4PPAP8j0f8eTJEmjbz03oJOZjwGPrWr7+Ir1Z4Cf29jS\nJEmSNj8/AV2SJKmAYUqSJKmAYUqSJKmAYUqSJKmAYUqSJKmAYUqSJKmAYUqSJKmAYUqSJKmAYUqS\nJKmAYUqSJKmAYUqSJKmAYUqSJKmAYUqSJKmAYUqSJKmAYUqSJKmAYUqSJKmAYUqSJKmAYUqSJKmA\nYUqSJKmAYUqSJKmAYUqSJKmAYUqSJKmAYUqSJKnAyIapiGFXIEmStoKRDVOSJEmDYJiSJEkqYJiS\nJEkqMLJhKnPYFUiSpK1gZMOUJEnSIBimJEmSChimJEmSChimJEmSChimJEmSChimJEmSChimJEmS\nChimJEmSChimJEmSChimJEmSChimJEmSCoxsmIoYdgWSJGkrWFeYiog7IuK5iJiNiAfX6PP3IuKZ\niHg6Iv7TxpYpSZK0OTWu1iEi6sBDwC8Cx4EnI+JoZj6zos9h4LeBn8vMcxFx3bUqWJIkaTNZz5Wp\n24HZzHwhM1vAI8A9q/r8KvBQZp4DyMxTG1umJEnS5rSeMLUfeGnF9vGqbaV3Au+MiP8TEU9ExB0b\nVaAkSdJmdtWX+X6C4xwG3gscAL4SET+bmedXdoqI+4H7AW6++eYNOrUkSdLwrOfK1Ang4IrtA1Xb\nSseBo5nZzszvA9+lH65+RGY+nJlHMvPIvn373mzNkiRJm8Z6wtSTwOGIuCUimsC9wNFVff4b/atS\nRMRe+i/7vbCBdUqSJG1KVw1TmdkBHgAeB54FHs3MpyPikxFxd9XtceBMRDwDfBn4Z5l55loVLUmS\ntFms656pzHwMeGxV28dXrCfwm9WyKWQOuwJJkrQVjOwnoEuSJA2CYUqSJKmAYUqSJKmAYUqSJKmA\nYUqSJKnAyIapiGFXIEmStoKRDVOSJEmDYJiSJEkqYJiSJEkqYJiSJEkqYJiSJEkqYJiSJEkqYJiS\nJEkqYJiSJEkqYJiSJEkqYJiSJEkqYJiSJEkqYJiSJEkqYJiSJEkqYJiSJEkqYJiSJEkqYJiSJEkq\nYJiSJEkqYJiSJEkqYJiSJEkqYJiSJEkqYJiSJEkqYJiSJEkqYJiSJEkqYJiSJEkqYJiSJEkqYJiS\nJEkqYJiSJEkqYJiSJEkqYJiSJEkqYJiSJEkqMLJhKohhlyBJkraAkQ1TkiRJg2CYkiRJKmCYkiRJ\nKjCyYSrJYZcgSZK2gHWFqYi4IyKei4jZiHjwCv1+OSIyIo5sXImSJEmb11XDVETUgYeAO4Fbgfsi\n4tbL9NsO/Abw1Y0uUpIkabNaz5Wp24HZzHwhM1vAI8A9l+n3L4FPAUsbWJ8kSdKmtp4wtR94acX2\n8artDRHxLuBgZv6PDaxNkiRp0yu+AT0iasDvAr+1jr73R8SxiDh2+vTp0lNLkiQN3XrC1Ang4Irt\nA1Xb67YDfxX4XxHxA+A9wNHL3YSemQ9n5pHMPLJv3743X7UkSdImsZ4w9SRwOCJuiYgmcC9w9PWd\nmTmXmXsz81BmHgKeAO7OzGPXpGJJkqRN5KphKjM7wAPA48CzwKOZ+XREfDIi7r7WBUqSJG1mjfV0\nyszHgMdWtX18jb7vLS9LkiTprWFkPwFdkiRpEEY2TAUx7BIkSdIWMLJhSpIkaRAMU5IkSQUMU5Ik\nSQUMU5IkSQUMU5IkSQUMU5IkSQUMU5IkSQUMU5IkSQUMU5IkSQVGNkwlOewSJEnSFjCyYUqSJGkQ\nDFOSJEkFDFOSJEkFDFOSJEkFDFOSJEkFRjZMBTHsEiRJ0hYwsmFKkiRpEAxTkiRJBQxTkiRJBQxT\nkiRJBQxTkiRJBQxTkiRJBQxTkiRJBQxTkiRJBQxTkiRJBQxTkiRJBQxTkiRJBQxTkiRJBQxTkiRJ\nBQxTkiRJBQxTkiRJBQxTkiRJBQxTkiRJBQxTkiRJBQxTkiRJBQxTkiRJBQxTkiRJBQxTkiRJBdYV\npiLijoh4LiJmI+LBy+z/zYh4JiKeiog/i4i3bXypkiRJm89Vw1RE1IGHgDuBW4H7IuLWVd2+ARzJ\nzL8GfBH4nY0uVJIkaTNaz5Wp24HZzHwhM1vAI8A9Kztk5pczc6HafAI4sLFlSpIkbU7rCVP7gZdW\nbB+v2tbyUeBPSoqSJEl6q2hs5MEi4u8DR4C/tcb++4H7AW6++eaNPLUkSdJQrOfK1Ang4IrtA1Xb\nj4iI9wMfA+7OzOXLHSgzH87MI5l5ZN++fW+mXkmSpE1lPWHqSeBwRNwSEU3gXuDoyg4RcRvw7+kH\nqVMbX6YkSdLmdNUwlZkd4AHgceBZ4NHMfDoiPhkRd1fd/hUwDfxxRHwzIo6ucThJkqSRsq57pjLz\nMeCxVW0fX7H+/g2uq1wMuwBJkrQV+AnokiRJBQxTkiRJBQxTkiRJBUY3TOWwC5AkSVvB6IYpSZKk\nATBMSZIkFTBMSZIkFTBMSZIkFTBMSZIkFTBMSZIkFTBMSZIkFTBMSZIkFTBMSZIkFTBMSZIkFRjd\nMBXDLkCSJG0FoxumJEmSBsAwJUmSVMAwJUmSVGB0w1QOuwBJkrQVjG6YkiRJGgDDlCRJUgHDlCRJ\nUgHDlCRJUoGRDVPpHeiSJGkARjZMSZIkDYJhSpIkqYBhSpIkqcDIhqn0lilJkjQAIxumJEmSBsEw\nJUmSVGBkw1TEsCuQJElbwciGKUmSpEEwTEmSJBUwTEmSJBUwTEmSJBUY2TDl50xJkqRBGNkwJUmS\nNAiGKUmSpAKGKUmSpAKGKUmSpAKGKUmSpALrClMRcUdEPBcRsxHx4GX2j0fEF6r9X42IQxtdqCRJ\n0mZ01TAVEXXgIeBO4Fbgvoi4dVW3jwLnMvOngH8DfGqjC5UkSdqM1nNl6nZgNjNfyMwW8Ahwz6o+\n9wB/VK1/EXhfxHD/q+FTF5eHeXpJkrRFrCdM7QdeWrF9vGq7bJ/M7ABzwJ7VB4qI+yPiWEQcO336\n9JureJ0WW91renxJkrQ5TI7Vh3r+xiBPlpkPAw8DHDly5Jp+Rvkvv/sAu7aN8X9nz7BrW5MT5xd5\n7eIyf/3gTl67uMzB3VPsmW6y2Opy5lKLzKTTS16bb3HDzDgTY3W+d3qen75+hk6vR6eX9HpJL5N2\n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\n","text/plain":["<Figure size 720x360 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"5cKL21zC4_rm","colab_type":"code","colab":{}},"source":["from pylab import rcParams\n","rcParams['figure.figsize'] = 15, 10"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"wr76POiF5BAY","colab_type":"code","colab":{}},"source":["classes=np.array((\"Rapid Ascending\", \"None\"))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"VRjo1aMj5DNN","colab_type":"code","colab":{}},"source":["# reshape 할때 필요한 params\n","# depth = 1\n","row = Made_X.shape[1]\n","col = Made_X.shape[2]\n","\n","# for i in range(0, 10): \n","#   print(Made_X[i].shape)\n","\n","#   array = scipy.misc.imresize(Made_X[i].astype('float32'), [row * 5, col * 5])\n","#   image = scipy.misc.toimage(array, cmin=0.0) \n","#   display(image)\n","# # print(emotion_labels[data.emotion[i]]) "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"kJ-ure7y5ElN","colab_type":"code","outputId":"a04834ab-b19d-499d-dcae-83d8833aadf1","executionInfo":{"status":"ok","timestamp":1580658270401,"user_tz":-540,"elapsed":8951,"user":{"displayName":"J 1","photoUrl":"","userId":"08178289703395036410"}},"colab":{"base_uri":"https://localhost:8080/","height":71}},"source":["total_len = len(Made_X)\n","train_len = int(total_len * 0.7)\n","val_len = int(total_len * 0.15)\n","test_len = total_len - (train_len + val_len)\n","\n","X_train = Made_X[:train_len].astype('float32').reshape(-1, input_data_length, col, 1)\n","X_val = Made_X[train_len:train_len + val_len].astype('float32').reshape(-1, input_data_length, col, 1)\n","X_test = Made_X[train_len + val_len:].astype('float32').reshape(-1, input_data_length, col, 1)\n","\n","print(X_train.shape)\n","print(X_val.shape)\n","print(X_test.shape)"],"execution_count":10,"outputs":[{"output_type":"stream","text":["(190042, 96, 6, 1)\n","(40723, 96, 6, 1)\n","(40724, 96, 6, 1)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"7Zqi31SY5G19","colab_type":"code","outputId":"ce8e6f13-b6ee-4c56-e434-226066aab099","executionInfo":{"status":"ok","timestamp":1580658271518,"user_tz":-540,"elapsed":10058,"user":{"displayName":"J 1","photoUrl":"","userId":"08178289703395036410"}},"colab":{"base_uri":"https://localhost:8080/","height":82}},"source":["from keras.utils import np_utils\n","from keras.preprocessing.image import ImageDataGenerator "],"execution_count":11,"outputs":[{"output_type":"stream","text":["Using TensorFlow backend.\n"],"name":"stderr"},{"output_type":"display_data","data":{"text/html":["<p style=\"color: red;\">\n","The default version of TensorFlow in Colab will soon switch to TensorFlow 2.x.<br>\n","We recommend you <a href=\"https://www.tensorflow.org/guide/migrate\" target=\"_blank\">upgrade</a> now \n","or ensure your notebook will continue to use TensorFlow 1.x via the <code>%tensorflow_version 1.x</code> magic:\n","<a href=\"https://colab.research.google.com/notebooks/tensorflow_version.ipynb\" target=\"_blank\">more info</a>.</p>\n"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"kKyYFl4m2z3u","colab_type":"code","colab":{}},"source":["# # Made_Y 데이터 편향성 확인 & Class_weight 적용\n","# sum_0 = np.sum(Made_Y == 0)\n","# sum_1 = np.sum(Made_Y == 1)\n","# print(sum_0, sum_1)\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"46m-6eA35Hon","colab_type":"code","outputId":"f09955eb-3722-4110-84e5-10cd2a6f74b5","executionInfo":{"status":"ok","timestamp":1580658271520,"user_tz":-540,"elapsed":10034,"user":{"displayName":"J 1","photoUrl":"","userId":"08178289703395036410"}},"colab":{"base_uri":"https://localhost:8080/","height":89}},"source":["Y_train = Made_Y[:train_len].astype('float32')\n","\n","labels_dict = {0: np.sum(Y_train == 0.), 1: np.sum(Y_train == 1.)}\n","print(labels_dict)\n","\n","Y_val = Made_Y[train_len:train_len + val_len].astype('float32')\n","Y_test = Made_Y[train_len + val_len:].astype('float32')\n","num_classes = 2\n","Y_train = np_utils.to_categorical(Y_train, num_classes)\n","Y_val = np_utils.to_categorical(Y_val, num_classes)\n","Y_test = np_utils.to_categorical(Y_test, num_classes)\n","print(Y_train.shape)\n","print(Y_val.shape)\n","print(Y_test.shape)"],"execution_count":12,"outputs":[{"output_type":"stream","text":["{0: 170465, 1: 19577}\n","(190042, 2)\n","(40723, 2)\n","(40724, 2)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"SNxRwrqr5IbF","colab_type":"code","colab":{}},"source":["datagen = ImageDataGenerator( \n","    rotation_range = 60,\n","    horizontal_flip = True,\n","    width_shift_range=0.6,\n","    height_shift_range=0.6,\n","    fill_mode = 'nearest'\n","    )\n","\n","testgen = ImageDataGenerator( \n","    )\n","datagen.fit(X_train)\n","batch_size = 128"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"xQCsyuqj5KBF","colab_type":"code","outputId":"164e2bea-8717-4f8e-921b-33ea452aaf18","executionInfo":{"status":"ok","timestamp":1580658272360,"user_tz":-540,"elapsed":10853,"user":{"displayName":"J 1","photoUrl":"","userId":"08178289703395036410"}},"colab":{"base_uri":"https://localhost:8080/","height":575}},"source":["for X_batch, _ in datagen.flow(X_train, Y_train, batch_size=9):\n","    for i in range(0, 9): \n","        pyplot.axis('off') \n","        pyplot.subplot(330 + 1 + i) \n","        pyplot.imshow(X_batch[i].reshape(input_data_length, col), cmap=pyplot.get_cmap('gray'))\n","    pyplot.axis('off') \n","    pyplot.show() \n","    break\n","    \n"],"execution_count":14,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n1QAAAABJRU5ErkJggg==\n","text/plain":["<Figure size 1080x720 with 9 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"sCi4vOE7W5_2","colab_type":"code","outputId":"9c4335ea-a279-414d-df2c-6eb653a53c0a","executionInfo":{"status":"ok","timestamp":1580658272628,"user_tz":-540,"elapsed":11105,"user":{"displayName":"J 1","photoUrl":"","userId":"08178289703395036410"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["#     Data Weights    #\n","from sklearn.utils import class_weight\n","import math\n","\n","# labels_dict : {ind_label: count_label}\n","# mu : parameter to tune \n","\n","def create_class_weight(labels_dict, mu=0.15):\n","    total = np.sum(list(labels_dict.values()))\n","    keys = labels_dict.keys()\n","    class_weight = dict()\n","\n","    for key in keys:\n","        score = math.log(mu * total/float(labels_dict[key]))\n","        class_weight[key] = score if score > 1.0 else 1.0\n","\n","    return class_weight\n","\n","# print(Made_Y)\n","\n","class_weights = create_class_weight(labels_dict)\n","\n","print(class_weights)"],"execution_count":15,"outputs":[{"output_type":"stream","text":["{0: 1.0, 1: 1.0}\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"_pq66tOr5K2F","colab_type":"code","outputId":"06e2ced9-add5-449c-a8cb-301608f4fa13","executionInfo":{"status":"ok","timestamp":1580658272629,"user_tz":-540,"elapsed":11093,"user":{"displayName":"J 1","photoUrl":"","userId":"08178289703395036410"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["train_flow = datagen.flow(X_train, Y_train, batch_size=batch_size) \n","val_flow = testgen.flow(X_val, Y_val, batch_size=batch_size) \n","test_flow = testgen.flow(X_test, Y_test, batch_size=batch_size)\n","\n","print(len(train_flow))"],"execution_count":16,"outputs":[{"output_type":"stream","text":["1485\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"V-63Kou25PjQ","colab_type":"code","colab":{}},"source":["from keras.utils import plot_model\n","import keras.backend as K\n","from keras.models import Model, Sequential\n","from keras.layers import LSTM, TimeDistributed, Input, Dense, Flatten, Dropout, BatchNormalization, Conv1D\n","from keras.layers.convolutional import Conv2D\n","from keras.layers.pooling import MaxPooling2D, MaxPooling1D\n","from keras.layers.merge import concatenate\n","from keras.optimizers import Adam, SGD\n","from keras.regularizers import l1, l2\n","from sklearn.metrics import confusion_matrix"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"VPqI8sWb5Qcl","colab_type":"code","colab":{}},"source":["# def FER_Model(input_shape=(input_data_length, col, 1)):\n","#     # first input model\n","#     visible = Input(shape=input_shape, name='input')\n","#     num_classes = 2\n","#     conv1_fit = 128\n","#     conv2_fit = 64\n","#     conv3_fit = 32\n","#     # conv4_fit = 256\n","#     # conv5_fit = 256\n","\n","#     #the 1-st block\n","#     conv1_1 = Conv2D(conv1_fit, kernel_size=3, activation='relu', padding='same', name = 'conv1_1')(visible)\n","#     conv1_1 = BatchNormalization()(conv1_1)\n","#     conv1_2 = Conv2D(conv1_fit, kernel_size=3, activation='relu', padding='same', name = 'conv1_2')(conv1_1)\n","#     conv1_2 = BatchNormalization()(conv1_2)\n","#     pool1_1 = MaxPooling2D(pool_size=(2,2), name = 'pool1_1')(conv1_2)\n","#     drop1_1 = Dropout(0.3, name = 'drop1_1')(pool1_1)\n","\n","#     #the 2-nd block\n","#     conv2_1 = Conv2D(conv2_fit, kernel_size=3, activation='relu', padding='same', name = 'conv2_1')(drop1_1)\n","#     conv2_1 = BatchNormalization()(conv2_1)\n","#     conv2_2 = Conv2D(conv2_fit, kernel_size=3, activation='relu', padding='same', name = 'conv2_2')(conv2_1)\n","#     conv2_2 = BatchNormalization()(conv2_2)\n","#     conv2_3 = Conv2D(conv2_fit, kernel_size=3, activation='relu', padding='same', name = 'conv2_3')(conv2_2)\n","#     conv2_3 = BatchNormalization()(conv2_3)\n","#     pool2_1 = MaxPooling2D(pool_size=(2,2), name = 'pool2_1')(conv2_3)\n","#     drop2_1 = Dropout(0.3, name = 'drop2_1')(pool2_1)\n","\n","#      #the 3-rd block\n","#     conv3_1 = Conv2D(conv3_fit, kernel_size=3, activation='relu', padding='same', name = 'conv3_1')(drop2_1)\n","#     conv3_1 = BatchNormalization()(conv3_1)\n","#     conv3_2 = Conv2D(conv3_fit, kernel_size=3, activation='relu', padding='same', name = 'conv3_2')(conv3_1)\n","#     conv3_2 = BatchNormalization()(conv3_2)\n","#     conv3_3 = Conv2D(conv3_fit, kernel_size=3, activation='relu', padding='same', name = 'conv3_3')(conv3_2)\n","#     conv3_3 = BatchNormalization()(conv3_3)\n","#     conv3_4 = Conv2D(conv3_fit, kernel_size=3, activation='relu', padding='same', name = 'conv3_4')(conv3_3)\n","#     conv3_4 = BatchNormalization()(conv3_4)\n","#     pool3_1 = MaxPooling2D(pool_size=(input_data_length // 4,1), name = 'pool3_1')(conv3_4)\n","#     drop3_1 = Dropout(0.3, name = 'drop3_1')(pool3_1)\n","\n","#     # #the 4-th block\n","#     # conv4_1 = Conv2D(1024, kernel_size=3, activation='relu', padding='same', name = 'conv4_1')(drop3_1)\n","#     # conv4_1 = BatchNormalization()(conv4_1)\n","#     # conv4_2 = Conv2D(1024, kernel_size=3, activation='relu', padding='same', name = 'conv4_2')(conv4_1)\n","#     # conv4_2 = BatchNormalization()(conv4_2)\n","#     # conv4_3 = Conv2D(1024, kernel_size=3, activation='relu', padding='same', name = 'conv4_3')(conv4_2)\n","#     # conv4_3 = BatchNormalization()(conv4_3)\n","#     # conv4_4 = Conv2D(1024, kernel_size=3, activation='relu', padding='same', name = 'conv4_4')(conv4_3)\n","#     # conv4_4 = BatchNormalization()(conv4_4)\n","#     # pool4_1 = MaxPooling2D(pool_size=(2,2), name = 'pool4_1')(conv4_4)\n","#     # drop4_1 = Dropout(0.3, name = 'drop4_1')(pool4_1)\n","    \n","#     # #the 5-th block\n","#     # conv5_1 = Conv2D(512, kernel_size=3, activation='relu', padding='same', name = 'conv5_1')(drop4_1)\n","#     # conv5_1 = BatchNormalization()(conv5_1)\n","#     # conv5_2 = Conv2D(512, kernel_size=3, activation='relu', padding='same', name = 'conv5_2')(conv5_1)\n","#     # conv5_2 = BatchNormalization()(conv5_2)\n","#     # conv5_3 = Conv2D(512, kernel_size=3, activation='relu', padding='same', name = 'conv5_3')(conv5_2)\n","#     # conv5_3 = BatchNormalization()(conv5_3)\n","#     # conv5_4 = Conv2D(512, kernel_size=3, activation='relu', padding='same', name = 'conv5_4')(conv5_3)\n","#     # conv5_3 = BatchNormalization()(conv5_3)\n","#     # pool5_1 = MaxPooling2D(pool_size=(2,2), name = 'pool5_1')(conv5_4)\n","#     # drop5_1 = Dropout(0.3, name = 'drop5_1')(pool5_1)\n","\n","#     #Flatten and output\n","#     flatten = Flatten(name = 'flatten')(drop3_1)\n","#     output = Dense(num_classes, activation='softmax', name = 'output')(flatten)\n","\n","#     # create model \n","#     model = Model(inputs =visible, outputs = output)\n","#     # summary layers\n","#     print(model.summary())\n","    \n","#     return model"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"2Fl_xb6KMn4T","colab_type":"code","colab":{}},"source":["# def FER_Model(input_shape=(input_data_length, col, 1)):\n","#     # first input model\n","#     visible = Input(shape=input_shape, name='input')\n","#     num_classes = 2\n","#     conv1_filt = 128\n","#     conv2_filt = 128\n","#     conv3_filt = 128\n","    \n","#     model = Conv2D(filters=conv1_filt, kernel_size=(3, 3), padding='SAME', activation='relu', input_shape=(input_data_length, col, 1))(visible)\n","#     model = Conv2D(filters=conv1_filt, kernel_size=(3, 3), padding='SAME', activation='relu')(model)\n","#     model = Conv2D(filters=conv1_filt, kernel_size=(3, 3), padding='SAME', activation='relu')(model)\n","#     model = Conv2D(filters=conv1_filt, kernel_size=(3, 3), padding='SAME', activation='relu')(model)\n","#     model = BatchNormalization(momentum=0.15)(model)\n","#     model = MaxPooling2D(pool_size=(2, 2))(model)\n","#     model = Conv2D(filters=32, kernel_size=(5, 5), padding='SAME', activation='relu')(model)\n","#     model = Dropout(rate=0.3)(model)\n","\n","#     model = Conv2D(filters=conv2_filt, kernel_size=(3, 3), padding='SAME', activation='relu')(model)\n","#     model = Conv2D(filters=conv2_filt, kernel_size=(3, 3), padding='SAME', activation='relu')(model)\n","#     model = Conv2D(filters=conv2_filt, kernel_size=(3, 3), padding='SAME', activation='relu')(model)\n","#     model = Conv2D(filters=conv2_filt, kernel_size=(3, 3), padding='SAME', activation='relu')(model)\n","#     model = BatchNormalization(momentum=0.15)(model)\n","#     model = MaxPooling2D(pool_size=(2, 2))(model)\n","#     model = Conv2D(filters=64, kernel_size=(5, 5), padding='SAME', activation='relu')(model)\n","#     model = BatchNormalization(momentum=0.15)(model)\n","#     model = Dropout(rate=0.3)(model)\n","\n","#     model = Conv2D(filters=conv3_filt, kernel_size=(3, 3), padding='SAME', activation='relu')(model)\n","#     model = Conv2D(filters=conv3_filt, kernel_size=(3, 3), padding='SAME', activation='relu')(model)\n","#     model = Conv2D(filters=conv3_filt, kernel_size=(3, 3), padding='SAME', activation='relu')(model)\n","#     model = Conv2D(filters=conv3_filt, kernel_size=(3, 3), padding='SAME', activation='relu')(model)\n","#     model = BatchNormalization(momentum=0.15)(model)\n","#     model = MaxPooling2D(pool_size=(input_data_length // 4, 1))(model)\n","#     model = Conv2D(filters=conv3_filt, kernel_size=(5, 5), padding='SAME', activation='relu')(model)\n","#     model = BatchNormalization(momentum=0.15)(model)\n","#     model = Dropout(rate=0.3)(model)\n","\n","#     # model = Conv2D(filters=256, kernel_size=(3, 3), padding='SAME', activation='relu')(model)\n","#     # model = Conv2D(filters=256, kernel_size=(3, 3), padding='SAME', activation='relu')(model)\n","#     # model = Conv2D(filters=256, kernel_size=(3, 3), padding='SAME', activation='relu')(model)\n","#     # model = Conv2D(filters=256, kernel_size=(3, 3), padding='SAME', activation='relu')(model)\n","#     # model = BatchNormalization(momentum=0.15)(model)\n","#     # model = MaxPooling2D(pool_size=(2, 2))(model)\n","#     # model = Conv2D(filters=256, kernel_size=(5, 5), padding='SAME', activation='relu')(model)\n","#     # model = BatchNormalization(momentum=0.15)(model)\n","#     # model = Dropout(rate=0.3)(model)\n","\n","#     model = Flatten()(model)\n","#     model = Dense(512, activation = \"relu\")(model)\n","#     model = Dropout(rate=0.3)(model)\n","#     dense = Dense(256, activation = \"relu\")(model)\n","#     output = Dense(num_classes, activation='softmax', name = 'output')(dense)\n","\n","#     # create model \n","#     model = Model(inputs =visible, outputs = output)\n","#     # summary layers\n","#     print(model.summary())\n","\n","#     return model"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"n412o2iXhmOQ","colab_type":"code","colab":{}},"source":["def FER_Model(input_shape=(input_data_length, col, 1)):\n","    # first input model\n","    visible = Input(shape=input_shape, name='input')\n","    conv1_fit = 100\n","    conv2_fit = 100\n","    conv3_fit = 128\n","    # conv4_fit = 256\n","    # conv5_fit = 256\n","\n","    #the 1-st block\n","    conv1_1 = Conv2D(conv1_fit, kernel_size=3, activation='relu', padding='same', name = 'conv1_1')(visible)\n","    conv1_1 = BatchNormalization()(conv1_1)\n","    # conv1_2 = Conv2D(conv1_fit, kernel_size=3, activation='relu', padding='same', name = 'conv1_2')(conv1_1)\n","    # conv1_2 = BatchNormalization()(conv1_2)\n","    pool1_1 = MaxPooling2D(pool_size=(2,2), name = 'pool1_1')(conv1_1)\n","    # drop1_1 = Dropout(0.3, name = 'drop1_1')(pool1_1)\n","\n","    #the 2-nd block\n","    conv2_1 = Conv2D(conv2_fit, kernel_size=3, activation='relu', padding='same', name = 'conv2_1')(pool1_1)\n","    conv2_1 = BatchNormalization()(conv2_1)\n","    # conv2_2 = Conv2D(conv2_fit, kernel_size=3, activation='relu', padding='same', name = 'conv2_2')(conv2_1)\n","    # conv2_2 = BatchNormalization()(conv2_2)\n","    # conv2_3 = Conv2D(conv2_fit, kernel_size=3, activation='relu', padding='same', name = 'conv2_3')(conv2_2)\n","    # conv2_3 = BatchNormalization()(conv2_3)\n","    pool2_1 = MaxPooling2D(pool_size=(2,2), name = 'pool2_1')(conv2_1)\n","    drop2_1 = Dropout(0.3, name = 'drop2_1')(pool2_1)\n","\n","    #  #the 3-rd block\n","    # conv3_1 = Conv2D(conv3_fit, kernel_size=(3,1), activation='relu', padding='same', name = 'conv3_1')(pool2_1)\n","    # conv3_1 = BatchNormalization()(conv3_1)\n","    # # conv3_2 = Conv2D(conv3_fit, kernel_size=3, activation='relu', padding='same', name = 'conv3_2')(conv3_1)\n","    # # conv3_2 = BatchNormalization()(conv3_2)\n","    # # conv3_3 = Conv2D(conv3_fit, kernel_size=3, activation='relu', padding='same', name = 'conv3_3')(conv3_2)\n","    # # conv3_3 = BatchNormalization()(conv3_3)\n","    # # conv3_4 = Conv2D(conv3_fit, kernel_size=3, activation='relu', padding='same', name = 'conv3_4')(conv3_3)\n","    # # conv3_4 = BatchNormalization()(conv3_4)\n","    # pool3_1 = MaxPooling2D(pool_size=(input_data_length // 4,1), name = 'pool3_1')(conv3_1)\n","    # drop3_1 = Dropout(0.3, name = 'drop3_1')(pool3_1)\n","\n","    # #the 4-th block\n","    # conv4_1 = Conv2D(1024, kernel_size=3, activation='relu', padding='same', name = 'conv4_1')(drop3_1)\n","    # conv4_1 = BatchNormalization()(conv4_1)\n","    # conv4_2 = Conv2D(1024, kernel_size=3, activation='relu', padding='same', name = 'conv4_2')(conv4_1)\n","    # conv4_2 = BatchNormalization()(conv4_2)\n","    # conv4_3 = Conv2D(1024, kernel_size=3, activation='relu', padding='same', name = 'conv4_3')(conv4_2)\n","    # conv4_3 = BatchNormalization()(conv4_3)\n","    # conv4_4 = Conv2D(1024, kernel_size=3, activation='relu', padding='same', name = 'conv4_4')(conv4_3)\n","    # conv4_4 = BatchNormalization()(conv4_4)\n","    # pool4_1 = MaxPooling2D(pool_size=(2,2), name = 'pool4_1')(conv4_4)\n","    # drop4_1 = Dropout(0.3, name = 'drop4_1')(pool4_1)\n","    \n","    # #the 5-th block\n","    # conv5_1 = Conv2D(512, kernel_size=3, activation='relu', padding='same', name = 'conv5_1')(drop4_1)\n","    # conv5_1 = BatchNormalization()(conv5_1)\n","    # conv5_2 = Conv2D(512, kernel_size=3, activation='relu', padding='same', name = 'conv5_2')(conv5_1)\n","    # conv5_2 = BatchNormalization()(conv5_2)\n","    # conv5_3 = Conv2D(512, kernel_size=3, activation='relu', padding='same', name = 'conv5_3')(conv5_2)\n","    # conv5_3 = BatchNormalization()(conv5_3)\n","    # conv5_4 = Conv2D(512, kernel_size=3, activation='relu', padding='same', name = 'conv5_4')(conv5_3)\n","    # conv5_3 = BatchNormalization()(conv5_3)\n","    # pool5_1 = MaxPooling2D(pool_size=(2,2), name = 'pool5_1')(conv5_4)\n","    # drop5_1 = Dropout(0.3, name = 'drop5_1')(pool5_1)\n","\n","    #Flatten and output\n","    flatten = Flatten(name = 'flatten')(drop2_1)\n","    dense = Dense(100, activation='relu', name='dense')(flatten)\n","    output = Dense(num_classes, activation='softmax', name = 'output')(dense)\n","\n","    # create model \n","    model = Model(inputs =visible, outputs = output)\n","    # summary layers\n","    print(model.summary())\n","    \n","    return model"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"1Q6ZUJXGafQt","colab_type":"code","colab":{}},"source":["# #     LSTM      #\n","\n","# def FER_Model(input_shape=(input_data_length, col, 1)):\n","#     # first input model\n","#     visible = Input(shape=input_shape, name='input')\n","#     conv1_fit = 128\n","#     conv2_fit = 128\n","#     conv3_fit = 128\n","#     # define model\n","#     model = Sequential()\n","#     model.add(TimeDistributed(Conv1D(filters=conv1_fit, kernel_size=3, activation='relu'), input_shape=input_shape))\n","#     model.add(TimeDistributed(Conv1D(filters=conv1_fit, kernel_size=3, activation='relu')))\n","#     # model.add(TimeDistributed(Dropout(0.5)))\n","#     model.add(TimeDistributed(MaxPooling1D(pool_size=2)))\n","#     model.add(TimeDistributed(Flatten()))\n","#     model.add(LSTM(100))\n","#     model.add(Dropout(0.3))\n","#     model.add(Dense(100, activation='relu'))\n","#     model.add(Dense(num_classes, activation='softmax'))\n","\n","#     # # define model\n","#     # model = Sequential()\n","#     # model.add(TimeDistributed(Conv1D(filters=conv1_fit, kernel_size=3, activation='relu'), input_shape=input_shape))\n","#     # model.add(TimeDistributed(MaxPooling1D(pool_size=2)))\n","\n","#     # model.add(TimeDistributed(Conv1D(filters=conv1_fit / 2, kernel_size=3, activation='relu')))\n","#     # model.add(TimeDistributed(MaxPooling1D(pool_size=2)))\n","\n","#     # model.add(TimeDistributed(Conv1D(filters=conv1_fit / 4, kernel_size=3, activation='relu')))\n","#     # model.add(TimeDistributed(MaxPooling1D(pool_size=2)))\n","#     # model.add(TimeDistributed(Flatten()))\n","\n","#     # model.add(LSTM(100))\n","#     # model.add(Dropout(0.3))\n","#     # model.add(Dense(100, activation='relu'))\n","#     # model.add(Dense(num_classes, activation='softmax'))\n","\n","#     return model"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"_wKiQMu35Rmd","colab_type":"code","outputId":"a5338f24-1140-46de-f649-27680700c7eb","executionInfo":{"status":"ok","timestamp":1580658280816,"user_tz":-540,"elapsed":19199,"user":{"displayName":"J 1","photoUrl":"","userId":"08178289703395036410"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["model = FER_Model()\n","opt = Adam(lr=0.0001, decay=1e-6)\n","# model.compile(loss='binary_crossentropy', optimizer=opt, metrics=['accuracy'])\n","model.compile(loss='categorical_crossentropy', optimizer=opt, metrics=['accuracy'])"],"execution_count":22,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:541: The name tf.placeholder is deprecated. Please use tf.compat.v1.placeholder instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:4432: The name tf.random_uniform is deprecated. Please use tf.random.uniform instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:66: The name tf.get_default_graph is deprecated. Please use tf.compat.v1.get_default_graph instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:190: The name tf.get_default_session is deprecated. Please use tf.compat.v1.get_default_session instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:197: The name tf.ConfigProto is deprecated. Please use tf.compat.v1.ConfigProto instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:203: The name tf.Session is deprecated. Please use tf.compat.v1.Session instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:207: The name tf.global_variables is deprecated. Please use tf.compat.v1.global_variables instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:216: The name tf.is_variable_initialized is deprecated. Please use tf.compat.v1.is_variable_initialized instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:223: The name tf.variables_initializer is deprecated. Please use tf.compat.v1.variables_initializer instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:2041: The name tf.nn.fused_batch_norm is deprecated. Please use tf.compat.v1.nn.fused_batch_norm instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:148: The name tf.placeholder_with_default is deprecated. Please use tf.compat.v1.placeholder_with_default instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:4267: The name tf.nn.max_pool is deprecated. Please use tf.nn.max_pool2d instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:3733: calling dropout (from tensorflow.python.ops.nn_ops) with keep_prob is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use `rate` instead of `keep_prob`. Rate should be set to `rate = 1 - keep_prob`.\n","Model: \"model_1\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","input (InputLayer)           (None, 96, 6, 1)          0         \n","_________________________________________________________________\n","conv1_1 (Conv2D)             (None, 96, 6, 100)        1000      \n","_________________________________________________________________\n","batch_normalization_1 (Batch (None, 96, 6, 100)        400       \n","_________________________________________________________________\n","pool1_1 (MaxPooling2D)       (None, 48, 3, 100)        0         \n","_________________________________________________________________\n","conv2_1 (Conv2D)             (None, 48, 3, 100)        90100     \n","_________________________________________________________________\n","batch_normalization_2 (Batch (None, 48, 3, 100)        400       \n","_________________________________________________________________\n","pool2_1 (MaxPooling2D)       (None, 24, 1, 100)        0         \n","_________________________________________________________________\n","drop2_1 (Dropout)            (None, 24, 1, 100)        0         \n","_________________________________________________________________\n","flatten (Flatten)            (None, 2400)              0         \n","_________________________________________________________________\n","dense (Dense)                (None, 100)               240100    \n","_________________________________________________________________\n","output (Dense)               (None, 2)                 202       \n","=================================================================\n","Total params: 332,202\n","Trainable params: 331,802\n","Non-trainable params: 400\n","_________________________________________________________________\n","None\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/optimizers.py:793: The name tf.train.Optimizer is deprecated. Please use tf.compat.v1.train.Optimizer instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:3576: The name tf.log is deprecated. Please use tf.math.log instead.\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"8H5kK3PfD9um","colab_type":"code","colab":{}},"source":["# callbacks log 를 저장시키는 방법 예시\n","\n","# class LossHistory(keras.callbacks.Callback):\n","#     def on_train_begin(self, logs={}):\n","#         self.losses = []\n","\n","#     def on_batch_end(self, batch, logs={}):\n","#         self.losses.append(logs.get('loss'))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ppVKJC_jCBZy","colab_type":"code","colab":{}},"source":["# callbacks log 를 저장시키는 방법 예시\n","from keras.callbacks import Callback\n","import pickle\n","\n","class Checkpoint_History(Callback):\n","\n","    def on_train_begin(self, logs={}):\n","        self.loss = []\n","        self.val_loss = []\n","        self.acc = []\n","        self.val_acc = []      \n","\n","    def on_batch_end(self, batch, logs={}):\n","        self.loss.append(logs.get('loss'))\n","        self.val_loss.append(logs.get('val_loss'))\n","        self.acc.append(logs.get('acc'))\n","        self.val_acc.append(logs.get('val_acc'))\n","    "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"CpiviDOsYoHs","colab_type":"code","colab":{}},"source":["from keras.models import load_model\n","\n","# model = load_model('/content/gdrive/My Drive/Colab Notebooks/model/rapid_ascending_high %s.hdf5' % input_data_length)\n","# model = load_model('/content/gdrive/My Drive/Colab Notebooks/model/rapid_ascending_high %s_1.hdf5' % input_data_length)\n","# model = load_model('/content/gdrive/My Drive/Colab Notebooks/model/rapid_ascending_high %s_2.hdf5' % input_data_length)\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"PdLXhF515Sq9","colab_type":"code","colab":{}},"source":["from keras.callbacks import ModelCheckpoint, EarlyStopping\n","# filepath=\"/content/gdrive/My Drive/Colab Notebooks/model/rapid_ascending_high %s.hdf5\" % input_data_length\n","# filepath=\"/content/gdrive/My Drive/Colab Notebooks/model/rapid_ascending_high %s_1.hdf5\" % input_data_length\n","filepath=\"/content/gdrive/My Drive/Colab Notebooks/model/rapid_ascending_high %s_2.hdf5\" % input_data_length\n","checkpoint = ModelCheckpoint(filepath, monitor='val_loss', verbose=1, save_best_only=True, mode='min')\n","checkpoint2 = Checkpoint_History()\n","checkpoint3 = EarlyStopping(monitor='val_loss', patience=15)\n","callbacks_list = [checkpoint, checkpoint2, checkpoint3]\n","\n","# keras.callbacks.Callback 로 부터 log 를 받아와 history log 를 작성할 수 있다."],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Lplr9oG45TVN","colab_type":"code","outputId":"e03280ba-4798-4885-ca03-c5215396c837","executionInfo":{"status":"ok","timestamp":1580659197592,"user_tz":-540,"elapsed":935906,"user":{"displayName":"J 1","photoUrl":"","userId":"08178289703395036410"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["# we iterate 200 times over the entire training set\n","num_epochs = 100\n","history = model.fit_generator(train_flow, \n","                    steps_per_epoch=len(X_train) / batch_size, \n","                    epochs=num_epochs,  \n","                    verbose=2,  \n","                    callbacks=callbacks_list,\n","                    class_weight=class_weights,\n","                    validation_data=val_flow,  \n","                    validation_steps=len(X_val) / batch_size,\n","                    shuffle=False)\n"],"execution_count":27,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow_core/python/ops/math_grad.py:1424: where (from tensorflow.python.ops.array_ops) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Use tf.where in 2.0, which has the same broadcast rule as np.where\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:1033: The name tf.assign_add is deprecated. Please use tf.compat.v1.assign_add instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:1020: The name tf.assign is deprecated. Please use tf.compat.v1.assign instead.\n","\n","Epoch 1/100\n"," - 51s - loss: 0.3463 - acc: 0.8948 - val_loss: 0.3379 - val_acc: 0.8945\n","\n","Epoch 00001: val_loss improved from inf to 0.33786, saving model to /content/gdrive/My Drive/Colab Notebooks/model/rapid_ascending_high 96_2.hdf5\n","Epoch 2/100\n"," - 44s - loss: 0.3310 - acc: 0.8970 - val_loss: 0.3377 - val_acc: 0.8945\n","\n","Epoch 00002: val_loss improved from 0.33786 to 0.33766, saving model to /content/gdrive/My Drive/Colab Notebooks/model/rapid_ascending_high 96_2.hdf5\n","Epoch 3/100\n"," - 43s - loss: 0.3295 - acc: 0.8970 - val_loss: 0.3349 - val_acc: 0.8945\n","\n","Epoch 00003: val_loss improved from 0.33766 to 0.33494, saving model to /content/gdrive/My Drive/Colab Notebooks/model/rapid_ascending_high 96_2.hdf5\n","Epoch 4/100\n"," - 43s - loss: 0.3288 - acc: 0.8970 - val_loss: 0.3369 - val_acc: 0.8945\n","\n","Epoch 00004: val_loss did not improve from 0.33494\n","Epoch 5/100\n"," - 43s - loss: 0.3286 - acc: 0.8970 - val_loss: 0.3352 - val_acc: 0.8945\n","\n","Epoch 00005: val_loss did not improve from 0.33494\n","Epoch 6/100\n"," - 43s - loss: 0.3280 - acc: 0.8970 - val_loss: 0.3306 - val_acc: 0.8945\n","\n","Epoch 00006: val_loss improved from 0.33494 to 0.33062, saving model to /content/gdrive/My Drive/Colab Notebooks/model/rapid_ascending_high 96_2.hdf5\n","Epoch 7/100\n"," - 43s - loss: 0.3278 - acc: 0.8970 - val_loss: 0.3321 - val_acc: 0.8945\n","\n","Epoch 00007: val_loss did not improve from 0.33062\n","Epoch 8/100\n"," - 43s - loss: 0.3274 - acc: 0.8970 - val_loss: 0.3364 - val_acc: 0.8945\n","\n","Epoch 00008: val_loss did not improve from 0.33062\n","Epoch 9/100\n"," - 43s - loss: 0.3277 - acc: 0.8970 - val_loss: 0.3339 - val_acc: 0.8945\n","\n","Epoch 00009: val_loss did not improve from 0.33062\n","Epoch 10/100\n"," - 43s - loss: 0.3276 - acc: 0.8970 - val_loss: 0.3337 - val_acc: 0.8945\n","\n","Epoch 00010: val_loss did not improve from 0.33062\n","Epoch 11/100\n"," - 43s - loss: 0.3274 - acc: 0.8970 - val_loss: 0.3331 - val_acc: 0.8945\n","\n","Epoch 00011: val_loss did not improve from 0.33062\n","Epoch 12/100\n"," - 43s - loss: 0.3273 - acc: 0.8970 - val_loss: 0.3339 - val_acc: 0.8945\n","\n","Epoch 00012: val_loss did not improve from 0.33062\n","Epoch 13/100\n"," - 43s - loss: 0.3269 - acc: 0.8970 - val_loss: 0.3325 - val_acc: 0.8945\n","\n","Epoch 00013: val_loss did not improve from 0.33062\n","Epoch 14/100\n"," - 43s - loss: 0.3270 - acc: 0.8970 - val_loss: 0.3368 - val_acc: 0.8945\n","\n","Epoch 00014: val_loss did not improve from 0.33062\n","Epoch 15/100\n"," - 43s - loss: 0.3272 - acc: 0.8970 - val_loss: 0.3332 - val_acc: 0.8945\n","\n","Epoch 00015: val_loss did not improve from 0.33062\n","Epoch 16/100\n"," - 43s - loss: 0.3268 - acc: 0.8970 - val_loss: 0.3335 - val_acc: 0.8945\n","\n","Epoch 00016: val_loss did not improve from 0.33062\n","Epoch 17/100\n"," - 43s - loss: 0.3269 - acc: 0.8970 - val_loss: 0.3345 - val_acc: 0.8945\n","\n","Epoch 00017: val_loss did not improve from 0.33062\n","Epoch 18/100\n"," - 43s - loss: 0.3267 - acc: 0.8970 - val_loss: 0.3324 - val_acc: 0.8945\n","\n","Epoch 00018: val_loss did not improve from 0.33062\n","Epoch 19/100\n"," - 43s - loss: 0.3266 - acc: 0.8970 - val_loss: 0.3328 - val_acc: 0.8945\n","\n","Epoch 00019: val_loss did not improve from 0.33062\n","Epoch 20/100\n"," - 43s - loss: 0.3267 - acc: 0.8970 - val_loss: 0.3400 - val_acc: 0.8945\n","\n","Epoch 00020: val_loss did not improve from 0.33062\n","Epoch 21/100\n"," - 43s - loss: 0.3267 - acc: 0.8970 - val_loss: 0.3331 - val_acc: 0.8945\n","\n","Epoch 00021: val_loss did not improve from 0.33062\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"iCB1Kyfb5UJG","colab_type":"code","outputId":"a929aec0-f87b-4f9c-81a7-e77b20c18f63","executionInfo":{"status":"ok","timestamp":1580659198361,"user_tz":-540,"elapsed":936658,"user":{"displayName":"J 1","photoUrl":"","userId":"08178289703395036410"}},"colab":{"base_uri":"https://localhost:8080/","height":609}},"source":["%matplotlib inline\n","import pickle\n","\n","train_loss=checkpoint2.loss\n","val_loss=checkpoint2.val_loss\n","train_acc=checkpoint2.acc\n","val_acc=checkpoint2.val_acc\n","\n","\n","epochs = range(len(train_acc))\n","\n","plt.plot(epochs,train_loss,'r', label='train_loss')\n","plt.plot(epochs,val_loss,'b', label='val_loss')\n","plt.title('train_loss vs val_loss')\n","plt.xlabel('epoch')\n","plt.ylabel('loss')\n","plt.legend()\n","plt.figure()\n","\n","plt.plot(epochs,train_acc,'r', label='train_acc')\n","plt.plot(epochs,val_acc,'b', label='val_acc')\n","plt.title('train_acc vs val_acc')\n","plt.xlabel('epoch')\n","plt.ylabel('acc')\n","plt.legend()\n","plt.figure()"],"execution_count":28,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Figure size 432x288 with 0 Axes>"]},"metadata":{"tags":[]},"execution_count":28},{"output_type":"display_data","data":{"image/png":"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\n6tSp7LLLLlGFlTfafFQpVVxGjYI5c3I7z+7d4a9/Dfx49OjRLFu2jO7du1NWVkbdunVp3LgxixYt\nYsmSJfzyl79k5cqVVFRUMHLkSEaMGAFU9n22adMmTjjhBA477DD+97//0aZNG/79739Tr169lKG9\n8sorXH755WzdupWDDz6YcePGUadOHUaPHs2UKVOoVasWxx13HHfccQdPPvkk1157LTVr1mTnnXfm\nzTffzMnm0USglIq9W265hfnz5zNnzhxef/11+vXrx/z5839qi//AAw/QpEkTfvjhBw4++GBOOeUU\nmjZtWmUeH3/8MRMmTOD+++9n0KBBPPXUU5x55plJl1tRUcGwYcN45ZVX6NKlC2eddRbjxo1j6NCh\nPPPMMyxatAgR+an46brrrmPatGm0adMmoyKpIPFLBBs3Qvv2hY5CKRUkyZl7vvTs2bPKDVl33303\nzzzzDAArV67k448/rpYIOnbsSPfu3QE46KCDWLFiRcrlLF68mI4dO9KlSxcAzj77bMaOHcvFF19M\n3bp1Offcc+nfvz/9+/cHoHfv3gwbNoxBgwbxq1/9KherCsSxjsDZUUopFaR+/fo/vX799dd5+eWX\neffdd5k7dy4HHHCA7w1bderU+el1zZo1U9YvJFOrVi3ee+89Tj31VJ577jn69OkDwPjx47nhhhtY\nuXIlBx10EOvXr894GVWWl5O5lAJ9EptSKkDDhg359ttvfT/7+uuvady4MTvttBOLFi1i+vTpOVvu\nnnvuyYoVK1i6dCl77LEHjzzyCEceeSSbNm3i+++/p2/fvvTu3ZtOnToBsGzZMnr16kWvXr144YUX\nWLlyZbUrk0zEJxEopVSApk2b0rt3b7p27Uq9evVo2bLlT5/16dOH8ePHs/fee7PnnntyyCGH5Gy5\ndevW5V//+hcDBw78qbL4/PPP56uvvmLAgAFUVFRgjOGuu+4C4IorruDjjz/GGMMxxxzD/vvvn5M4\nSu6ZxT169DAZPaGsXTtYudK+LrF1VmpH99FHH7H33nsXOowdht/2FJHZxpgefuPHr45AKaVUFVo0\npJRSEbnooot45513qgwbOXIkw4cPL1BE/uKTCLRnQ6VUno0dO7bQIYQSn6KhHN58oZRSO5L4JIJv\nvil0BEopVZTikwiUUkr50kSglFIxp4lAKaXS1KBBg8DPVqxYQdeuXfMYTfY0ESilVMzFp/moUqok\n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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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\nOPi//7f9x8gkxQBw7bVw8cXh2Mrn3/+Gu+/OPfw3v2nb72c/y18mhONy69hrarKXNa2ZM8Px0LUr\n3H47zJ0bjptXX4W99kpXxu4JL8q877500x5wQPHnpkK4e6doxowZ40VZscI9HJahO9N+xBGtx8v0\nz25yDV+xov1ps8tJO17G++8nj7N8efpy3303/zyy+992W2g/8sjQff75yeVecklL+09/2rasHXds\nO80ppxS2znI1DQ3u3/9+4es8e1l+8YvC4jFz7969dfkffJBu2l69wufnP992WI8eha2Tc85p2+8r\nXwlljB+ff9/44x/bLvPcue3vG9nNmWe2v/+2t21Wr849/JVXPFFm/8zVvPee++zZoX3oUPd580J7\n//6F7WPtybWOd9qppX3KlNbD/vY390WL0s3/yivbzqdIhNcvkNToF4RURzmvA7tX5zpzR+aZmda9\nNLGUUi3GtK7fR6jQ8itBlEslNmAtHrgZxSx/Zzzo0y5TKZc9X1n1tI7rKda04sdsR47fCh37ShBS\nOyp1kqykQuOo5aRfS3KtV62/klKCyKWeaydU8iBJs57Srstqn9Sz519oPOuvH5piZNZRUs2ipH6F\nllXp/bnQmCtFCaQgdXwWLJFcO8yVV7buvvnm1o/cmDAh93NWvv/91rV0rrkmfwwPPxw+//a33ONc\nfjn85S/5ywE4//xQu+mSS+Dpp0O/X/6y9ThnntnSvtlmcO65hdfUyay3s85qf9zsR5Xcc09L+2WX\ntbT/4he5y8hehmyf/3zb2CD9Iz7OP7/tIxjiz7TKuPnm1t3xx508/TQ88UT++ZxxRuuqyhnbbBNq\nhP35zy39br89xJUp87jjwuegQbDjjqGceE2Y6dND7Z5zzgn7YFNTqEF24olw442t57fzzvnjLES3\nbqF2W3we550XYsjnsstgxozQHn80Tab2UjxBn3pqS/tZZ8EXvtB+XGedFZ7XtNFG0LMnjBzZsSrL\nhTxaJpc0f3TNyDz25KabYOLEjs+7GLnuXtdbU3Qtpo8+Sq5xkOTRR8Ow3XdvO6y9Gg6ZYb//ff4a\nEfH+xx/f0r58edsylywJwzI1YPLVZojXrpk+ve34f/lLchnbbde6/9SpoT1eyyszfMMNW9p//vO2\n5cW7x4wJ7c8+mzzfAw5IXkennNLSb489wuegQe7HHdfS38x9woTQ/n/+T9v1nWt7P/BAaN9337br\n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\nTkSuQmCC\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 0 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"VejGfotu5U5u","colab_type":"code","outputId":"4e00bfeb-2c48-4223-a174-854c6b18c7af","executionInfo":{"status":"error","timestamp":1580659200520,"user_tz":-540,"elapsed":938797,"user":{"displayName":"J 1","photoUrl":"","userId":"08178289703395036410"}},"colab":{"base_uri":"https://localhost:8080/","height":502}},"source":["from keras.models import load_model\n","\n","# model = load_model('/content/gdrive/My Drive/Colab Notebooks/model/backup/rapid_ascending_high %s.h5' % input_data_length)\n","model = load_model('/content/gdrive/My Drive/Colab Notebooks/model/rapid_ascending %s.hdf5' % input_data_length)\n","loss = model.evaluate_generator(test_flow, steps=len(X_test) / batch_size) \n","print(\"Test Loss \" + str(loss[0]))\n","print(\"Test Acc: \" + str(loss[1]))"],"execution_count":29,"outputs":[{"output_type":"error","ename":"OSError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mOSError\u001b[0m                                   Traceback (most recent call last)","\u001b[0;32m<ipython-input-29-ee97a7162222>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m# model = load_model('/content/gdrive/My Drive/Colab Notebooks/model/backup/rapid_ascending_high %s.h5' % input_data_length)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mload_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/gdrive/My Drive/Colab Notebooks/model/rapid_ascending %s.hdf5'\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0minput_data_length\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mloss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mevaluate_generator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_flow\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msteps\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Test Loss \"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloss\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/keras/engine/saving.py\u001b[0m in \u001b[0;36mload_wrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    456\u001b[0m                 \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mremove\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtmp_filepath\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    457\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mres\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 458\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mload_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    459\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    460\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mload_wrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/keras/engine/saving.py\u001b[0m in \u001b[0;36mload_model\u001b[0;34m(filepath, custom_objects, compile)\u001b[0m\n\u001b[1;32m    547\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    548\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mH5Dict\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_supported_type\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 549\u001b[0;31m         \u001b[0;32mwith\u001b[0m \u001b[0mH5Dict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'r'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mh5dict\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    550\u001b[0m             \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_deserialize_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mh5dict\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcustom_objects\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcompile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    551\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'write'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mcallable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwrite\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/keras/utils/io_utils.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, path, mode)\u001b[0m\n\u001b[1;32m    189\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_is_file\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    190\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msix\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstring_types\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0m_is_path_instance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 191\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mh5py\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mFile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    192\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_is_file\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    193\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/h5py/_hl/files.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, name, mode, driver, libver, userblock_size, swmr, **kwds)\u001b[0m\n\u001b[1;32m    310\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mphil\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    311\u001b[0m                 \u001b[0mfapl\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmake_fapl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdriver\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlibver\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 312\u001b[0;31m                 \u001b[0mfid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmake_fid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0muserblock_size\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfapl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mswmr\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mswmr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    313\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    314\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mswmr_support\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/h5py/_hl/files.py\u001b[0m in \u001b[0;36mmake_fid\u001b[0;34m(name, mode, userblock_size, fapl, fcpl, swmr)\u001b[0m\n\u001b[1;32m    140\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mswmr\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mswmr_support\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    141\u001b[0m             \u001b[0mflags\u001b[0m \u001b[0;34m|=\u001b[0m \u001b[0mh5f\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mACC_SWMR_READ\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 142\u001b[0;31m         \u001b[0mfid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mh5f\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mflags\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfapl\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfapl\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    143\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mmode\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'r+'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    144\u001b[0m         \u001b[0mfid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mh5f\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mh5f\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mACC_RDWR\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfapl\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfapl\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32mh5py/_objects.pyx\u001b[0m in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n","\u001b[0;32mh5py/_objects.pyx\u001b[0m in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n","\u001b[0;32mh5py/h5f.pyx\u001b[0m in \u001b[0;36mh5py.h5f.open\u001b[0;34m()\u001b[0m\n","\u001b[0;31mOSError\u001b[0m: Unable to open file (unable to open file: name = '/content/gdrive/My Drive/Colab Notebooks/model/rapid_ascending 96.hdf5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)"]}]},{"cell_type":"code","metadata":{"id":"X1YiMAJL5XBT","colab_type":"code","colab":{}},"source":["loss = model.evaluate(X_val, Y_val) \n","print(X_val.shape)\n","print(Y_val.shape)\n","\n","print(\"Val Loss \" + str(loss[0]))\n","print(\"Val Acc: \" + str(loss[1]))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"rrxiykBP5Xqv","colab_type":"code","colab":{}},"source":["def plot_confusion_matrix(Y_test, Y_pred, classes,\n","                          normalize=False,\n","                          title='Unnormalized confusion matrix',\n","                          cmap=plt.cm.Blues):\n","    cm = confusion_matrix(Y_test, Y_pred)\n","    \n","    if normalize:\n","        cm = np.round(cm.astype('float') / cm.sum(axis=1)[:, np.newaxis], 2)\n","        \n","    np.set_printoptions(precision=2)\n","        \n","    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n","    plt.title(title)\n","    plt.colorbar()\n","    tick_marks = np.arange(len(classes))\n","    plt.xticks(tick_marks, classes, rotation=45)\n","    plt.yticks(tick_marks, classes)\n","\n","    thresh = cm.min() + (cm.max() - cm.min()) / 2.\n","    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n","        plt.text(j, i, cm[i, j],\n","                 horizontalalignment=\"center\",\n","                 color=\"white\" if cm[i, j] > thresh else \"red\")\n","\n","    plt.tight_layout()\n","    plt.ylabel('True expression')\n","    plt.xlabel('Predicted expression')\n","    plt.show()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"KwwXSL85Ck-y","colab_type":"code","colab":{}},"source":["#     Prediction    #\n","Y_pred_ = model.predict(X_test, verbose=1)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"nPbtlfXEAxXK","colab_type":"code","colab":{}},"source":["# Y_pred = Y_pred_[:,[-1]]\n","# print(Y_pred.shape)\n","# print(Y_test.shape)\n","Y_pred = np.argmax(Y_pred_, axis=1)\n","t_te = np.argmax(Y_test, axis=1)\n","\n","#     Manual processing     #\n","Y_pred_one = Y_pred_[:, [-1]]\n","max_value = np.max(Y_pred_one)\n","print(max_value)\n","print(Y_pred_)\n","\n","limit_line = 0.1\n","Y_pred_one = np.where(Y_pred_one > max_value * limit_line, 1, 0)\n","\n","# print(Y_pred_one)\n","Y_pred_one = Y_pred_one.reshape(-1,)\n","# print(Y_pred_1)\n","# print(Y_pred.shape)\n","# print(t_te.shape)\n","\n","# fail = 0\n","# fail2 = 0\n","# for i in range(len(Y_pred)):\n","#   if Y_pred_1[i] != t_te[i]:\n","#     fail += 1\n","\n","#   if Y_pred[i] != t_te[i]:\n","#     fail2 += 1\n","\n","# print(1 - fail / len(Y_pred))\n","# print(1 - fail2 / len(Y_pred))\n","\n","# print(np.sum(Y_pred), np.sum(t_te))\n","# print('Y_pred / Y_test :', np.sum(Y_pred) / np.sum(t_te))\n","\n","plt.figure(figsize=(100,10))\n","plt.subplot(211)\n","plt.plot(Y_test, 'purple', label='test')\n","\n","plt.subplot(212)\n","plt.plot(Y_pred_one, 'y', label='pred')\n","plt.show()\n","# plt.savefig('/content/gdrive/My Drive/Colab Notebooks/model/rapid_ascending %s.png' % input_data_length)\n","# plt.close()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"yRG7eRC95Y6N","colab_type":"code","colab":{}},"source":["fig = plot_confusion_matrix(Y_test=t_te, Y_pred=Y_pred,\n","                      classes=classes,\n","                      normalize=True,\n","                      cmap=plt.cm.Greys,\n","                      title='Average accuracy: ' + str(np.sum(Y_pred == t_te)/len(t_te)) + '\\n')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"42zRLAIrjgvu","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}