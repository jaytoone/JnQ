{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":73916,"status":"ok","timestamp":1641392697480,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"6rmQpzEGXfCw","outputId":"fa6a0375-044d-455a-eece-c128db19bc43"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","import os, sys\n","\n","current_path = '/content/drive/My Drive/Colab Notebooks/JnQ/'\n","\n","os.chdir(current_path)\n","\n","nb_path = '/content/notebooks'\n","try:\n","  sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ')\n","  sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ/funcs')\n","  os.symlink('/content/drive/My Drive/Colab Notebooks/JnQ/mpl_finance', nb_path)\n","  sys.path.insert(0, nb_path)\n","except:\n","  pass"]},{"cell_type":"markdown","metadata":{"id":"8uqYv5StTazo"},"source":["# requirements"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9qGt60DKTZmf"},"outputs":[],"source":["# !pip install findiff\n","\n","# import nvstrings, nvcategory, cudf\n","# import cuml\n","# import cudf\n","\n","import matplotlib.pyplot as plt\n","from matplotlib import gridspec\n","from tqdm.notebook import tqdm\n","from funcs.funcs_indicator import *\n","from funcs.funcs_for_trade import *\n","import logging\n","\n","from utils import utils_v3_1216 as utils1\n","from utils import utils_v5_2_1216 as utils2\n","# from utils import utils_v7_3_1231_v7_3 as utils3\n","from utils import utils_public_0101_v7_3_log as utils_public\n","\n","import mpl_finance as mf\n","import os\n","import datetime\n","\n","import IPython\n","import IPython.display\n","import matplotlib as mpl\n","\n","import numpy as np\n","# import jax.numpy as np\n","import pandas as pd\n","import seaborn as sns\n","# import tensorflow as tf\n","\n","import pickle\n","import shutil\n","import json\n","from easydict import EasyDict\n","\n","# from trendln import trendln\n","\n","from datetime import datetime\n","import random\n","import time\n","\n","# mpl.rcParams['figure.figsize'] = (8, 6)\n","# mpl.rcParams['axes.grid'] = False\n","\n","np.seterr(invalid=\"ignore\")\n","\n","pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)"]},{"cell_type":"markdown","metadata":{"id":"M8-EChy0VsDr"},"source":["## cudf"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":414,"status":"ok","timestamp":1638754008241,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"b09qAb1sVtRP","outputId":"3a824202-064a-4544-b791-ffc777bb3f9c"},"outputs":[{"name":"stdout","output_type":"stream","text":["usage: conda [-h] [-V] command ...\n","conda: error: unrecognized arguments: -t=/content/notebooks\n"]}],"source":["# !conda install -c rapidsai-nightly -c nvidia -c numba -c conda-forge \\\n","#     cudf python=3.7 cudatoolkit=11.1 -t=$nb_path"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":413,"status":"ok","timestamp":1638754715310,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"Jnz6i7ZqRnb0","outputId":"207bc57b-a17a-4f67-fb26-24e46e2c6e26"},"outputs":[{"name":"stdout","output_type":"stream","text":["***********************************************************************\n","Woo! Your instance has the right kind of GPU, a Tesla P100-PCIE-16GB!\n","***********************************************************************\n","\n"]}],"source":["# !git clone https://github.com/rapidsai/rapidsai-csp-utils.git\n","!python rapidsai-csp-utils/colab/env-check.py"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4sKA_9Dbg4s2"},"outputs":[],"source":["# This will update the Colab environment and restart the kernel.  Don't run the next cell until you see the session crash.\n","!bash rapidsai-csp-utils/colab/update_gcc.sh\n","import os\n","os._exit(00)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"d1C4pNiBhYHX"},"outputs":[],"source":["# This will install CondaColab.  This will restart your kernel one last time.  Run this cell by itself and only run the next cell once you see the session crash.\n","import condacolab\n","condacolab.install()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":414,"status":"ok","timestamp":1638754863073,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"iGx3ACTvZqck","outputId":"e8379cc4-c325-4fe0-ac46-5fbbd7d38829"},"outputs":[{"name":"stdout","output_type":"stream","text":["‚ú®üç∞‚ú® Everything looks OK!\n"]}],"source":["# you can now run the rest of the cells as normal\n","import condacolab\n","condacolab.check()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oR8s7U8c7C28","outputId":"22be2731-fae1-45fc-f310-e48f60774bb2"},"outputs":[{"name":"stdout","output_type":"stream","text":["Installing RAPIDS Stable 21.10\n","Starting the RAPIDS install on Colab.  This will take about 15 minutes.\n","Collecting package metadata (current_repodata.json): ...working... done\n","Solving environment: ...working... WARNING conda.core.solve:_add_specs(611): pinned spec cudatoolkit=11.1 conflicts with explicit specs.  Overriding pinned spec.\n","failed with initial frozen solve. Retrying with flexible solve.\n","Solving environment: ...working... WARNING conda.core.solve:_add_specs(611): pinned spec cudatoolkit=11.1 conflicts with explicit specs.  Overriding pinned spec.\n","failed with repodata from current_repodata.json, will retry with next repodata source.\n","Collecting package metadata (repodata.json): ...working... done\n"]}],"source":["# Installing RAPIDS is now 'python rapidsai-csp-utils/colab/install_rapids.py <release> <packages>'\n","# The <release> options are 'stable' and 'nightly'.  Leaving it blank or adding any other words will default to stable.\n","# The <packages> option are default blank or 'core'.  By default, we install RAPIDSAI and BlazingSQL.  The 'core' option will install only RAPIDSAI and not include BlazingSQL, \n","!python rapidsai-csp-utils/colab/install_rapids.py stable\n","import os\n","os.environ['NUMBAPRO_NVVM'] = '/usr/local/cuda/nvvm/lib64/libnvvm.so'\n","os.environ['NUMBAPRO_LIBDEVICE'] = '/usr/local/cuda/nvvm/libdevice/'\n","os.environ['CONDA_PREFIX'] = '/usr/local'"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kWsxi4ZpKtGt"},"outputs":[],"source":["import shutil\n","import sys\n","\n","colab_env = \"/usr/lib\"\n","\n","rapids_path = os.path.join(current_path, \"rapidsai-csp-utils/lib\")\n","rapids_libs = os.listdir(rapids_path)\n","print(rapids_libs)\n","# break\n","\n","for lib_ in rapids_libs:\n","  try:\n","    shutil.copy(os.path.join(rapids_path, lib_), os.path.join(colab_env, lib_))\n","    sys.path.append(os.path.join(colab_env, lib_))\n","    print(\"copied to\" + os.path.join(colab_env, lib_))\n","  except Exception as e:\n","    print(e)"]},{"cell_type":"markdown","metadata":{"id":"Iy76iO7gztne"},"source":["## move legacy files"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hMRht32Czwry"},"outputs":[],"source":["# print()\n","cur_dir_list = os.listdir('.')\n","for f in cur_dir_list:\n","  if 'legacy' in f :\n","    # print(f)\n","    if os.path.isdir(current_path + f,):\n","      continue\n","\n","    shutil.move(current_path + f, current_path + 'legacy/' + f)\n","    print(\"moved to\" + current_path + 'legacy/' +  f)"]},{"cell_type":"markdown","metadata":{"id":"Ic1mfmwWCIBu"},"source":["# makeset"]},{"cell_type":"markdown","metadata":{"id":"Ci_jUnNTZbm9"},"source":["## load data"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":22503,"status":"ok","timestamp":1638246127510,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"_bXyS2yrZYC6","outputId":"b24a8a66-48b1-42b5-aa79-63f5a8542bac"},"outputs":[{"name":"stdout","output_type":"stream","text":["['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr']\n","['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 LTCUSDT.ftr']\n","['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 ETHUSDT.ftr']\n","['2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr']\n","['2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-08-31 SUSHIUSDT.xlsx', '2021-08-31 CVCUSDT.xlsx', '2021-08-31 BTSUSDT.xlsx', '2021-08-31 HOTUSDT.xlsx', '2021-08-31 ZRXUSDT.xlsx', '2021-08-31 QTUMUSDT.xlsx', '2021-08-31 IOTAUSDT.xlsx', '2021-08-31 BTCBUSD.xlsx', '2021-08-31 WAVESUSDT.xlsx', '2021-08-31 ADAUSDT.xlsx', '2021-08-31 LITUSDT.xlsx', '2021-08-31 XTZUSDT.xlsx', '2021-08-31 BNBUSDT.xlsx', '2021-08-31 AKROUSDT.xlsx', '2021-08-31 HNTUSDT.xlsx', '2021-08-31 ETCUSDT.xlsx', '2021-08-31 XMRUSDT.xlsx', '2021-08-31 YFIUSDT.xlsx', '2021-08-31 ETHUSDT.xlsx', '2021-08-31 ALICEUSDT.xlsx', '2021-08-31 ALPHAUSDT.xlsx', '2021-08-31 SFPUSDT.xlsx', '2021-08-31 REEFUSDT.xlsx', '2021-08-31 BATUSDT.xlsx', '2021-08-31 DOGEUSDT.xlsx', '2021-08-31 TRXUSDT.xlsx', '2021-08-31 RLCUSDT.xlsx', '2021-08-31 BTCSTUSDT.xlsx', '2021-08-31 STORJUSDT.xlsx', '2021-08-31 SNXUSDT.xlsx', '2021-08-31 XLMUSDT.xlsx', '2021-08-31 NEOUSDT.xlsx', '2021-08-31 UNFIUSDT.xlsx', '2021-08-31 SANDUSDT.xlsx', '2021-08-31 DASHUSDT.xlsx', '2021-08-31 KAVAUSDT.xlsx', '2021-08-31 RUNEUSDT.xlsx', '2021-08-31 CTKUSDT.xlsx', '2021-08-31 LINKUSDT.xlsx', '2021-08-31 CELRUSDT.xlsx', '2021-08-31 RSRUSDT.xlsx', '2021-08-31 DGBUSDT.xlsx', '2021-08-31 SKLUSDT.xlsx', '2021-08-31 RENUSDT.xlsx', '2021-08-31 TOMOUSDT.xlsx', '2021-08-31 MTLUSDT.xlsx', '2021-08-31 LTCUSDT.xlsx', '2021-08-31 DODOUSDT.xlsx', '2021-08-31 EGLDUSDT.xlsx', '2021-08-31 KSMUSDT.xlsx', '2021-08-31 ONTUSDT.xlsx', '2021-08-31 VETUSDT.xlsx', '2021-08-31 TRBUSDT.xlsx', '2021-08-31 MANAUSDT.xlsx', '2021-08-31 COTIUSDT.xlsx', '2021-08-31 CHRUSDT.xlsx', '2021-08-31 ETHUSDT_210924.xlsx', '2021-08-31 BAKEUSDT.xlsx', '2021-08-31 GRTUSDT.xlsx', '2021-08-31 FLMUSDT.xlsx', '2021-08-31 EOSUSDT.xlsx', '2021-08-31 OGNUSDT.xlsx', '2021-08-31 SCUSDT.xlsx', '2021-08-31 BALUSDT.xlsx', '2021-08-31 STMXUSDT.xlsx', '2021-08-31 BTTUSDT.xlsx', '2021-08-31 LUNAUSDT.xlsx', '2021-08-31 DENTUSDT.xlsx', '2021-08-31 KNCUSDT.xlsx', '2021-08-31 SRMUSDT.xlsx', '2021-08-31 ENJUSDT.xlsx', '2021-08-31 ZENUSDT.xlsx', '2021-08-31 ATOMUSDT.xlsx', '2021-08-31 NEARUSDT.xlsx', '2021-08-31 BCHUSDT.xlsx', '2021-08-31 IOSTUSDT.xlsx', '2021-08-31 HBARUSDT.xlsx', '2021-08-31 ZECUSDT.xlsx', '2021-08-31 1000SHIBUSDT.xlsx', '2021-08-31 TLMUSDT.xlsx', '2021-08-31 BZRXUSDT.xlsx', '2021-08-31 ETHBUSD.xlsx', '2021-08-31 AAVEUSDT.xlsx', '2021-08-31 GTCUSDT.xlsx', '2021-08-31 ALGOUSDT.xlsx', '2021-08-31 ICPUSDT.xlsx', '2021-08-31 BTCUSDT_210924.xlsx', '2021-08-31 LRCUSDT.xlsx', '2021-08-31 AVAXUSDT.xlsx', '2021-08-31 MATICUSDT.xlsx', '2021-08-31 1INCHUSDT.xlsx', '2021-08-31 MKRUSDT.xlsx', '2021-08-31 THETAUSDT.xlsx', '2021-08-31 UNIUSDT.xlsx', '2021-08-31 LINAUSDT.xlsx', '2021-08-31 RVNUSDT.xlsx', '2021-08-31 FILUSDT.xlsx', '2021-08-31 NKNUSDT.xlsx', '2021-08-31 DEFIUSDT.xlsx', '2021-08-31 COMPUSDT.xlsx', '2021-08-31 BTCDOMUSDT.xlsx', '2021-08-31 SOLUSDT.xlsx', '2021-08-31 BTCUSDT.xlsx', '2021-08-31 OMGUSDT.xlsx', '2021-08-31 ICXUSDT.xlsx', '2021-08-31 BLZUSDT.xlsx', '2021-08-31 FTMUSDT.xlsx', '2021-08-31 YFIIUSDT.xlsx', '2021-08-31 KEEPUSDT.xlsx', '2021-08-31 BANDUSDT.xlsx', '2021-08-31 XRPUSDT.xlsx', '2021-08-31 SXPUSDT.xlsx', '2021-08-31 CRVUSDT.xlsx', '2021-08-31 BELUSDT.xlsx', '2021-08-31 DOTUSDT.xlsx', '2021-08-31 XEMUSDT.xlsx', '2021-08-31 ONEUSDT.xlsx', '2021-08-31 ZILUSDT.xlsx', '2021-08-31 AXSUSDT.xlsx', '2021-08-31 OCEANUSDT.xlsx', '2021-08-31 CHZUSDT.xlsx', '2021-08-31 ANKRUSDT.xlsx', '2021-08-31 SUSHIUSDT_res_dfs.pkl', '2021-07-01 ADAUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr']\n","['2021-07-01 BTCUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr']\n","['2021-02-07 BTC.xlsx', '2021-02-07 ETH.xlsx', '2021-02-11 BCHUSDT.xlsx', '2021-02-11 XRPUSDT.xlsx', '2021-02-11 EOSUSDT.xlsx', '2021-02-11 LTCUSDT.xlsx', '2021-02-11 ETCUSDT.xlsx', '2021-02-11 LINKUSDT.xlsx', '2021-02-11 XLMUSDT.xlsx', '2021-02-11 ADAUSDT.xlsx', '2021-02-11 XMRUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr']\n","['2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx']\n"]}],"source":["interval = '1m'\n","date_path = './candlestick_concated/%s/quant_v2/' % interval\n","file_list = os.listdir(date_path)\n","print((file_list))\n","\n","interval2 = '3m'\n","date_path2 = './candlestick_concated/%s/quant_v2/' % interval2\n","file_list2 = os.listdir(date_path2)\n","print((file_list2))\n","\n","interval3 = '5m'\n","date_path3 = './candlestick_concated/%s/quant_v2/' % interval3\n","file_list3 = os.listdir(date_path3)\n","print((file_list3))\n","\n","interval4 = '15m'\n","date_path4 = './candlestick_concated/%s/quant_v2/' % interval4\n","file_list4 = os.listdir(date_path4)\n","print((file_list4))\n","\n","interval5 = '30m'\n","date_path5 = './candlestick_concated/%s/quant_v2/' % interval5\n","file_list5 = os.listdir(date_path5)\n","print((file_list5))\n","\n","interval6 = '1h'\n","date_path6 = './candlestick_concated/%s/quant_v2/' % interval6\n","file_list6 = os.listdir(date_path6)\n","print((file_list6))\n","\n","interval7 = '4h'\n","date_path7 = './candlestick_concated/%s/quant_v2/' % interval7\n","file_list7 = os.listdir(date_path7)\n","print((file_list7))\n","\n","interval8 = '1d'\n","date_path8 = './candlestick_concated/%s/quant_v2/' % interval8\n","file_list8 = os.listdir(date_path8)\n","print((file_list8))"]},{"cell_type":"markdown","metadata":{"id":"AUSBU7T8Suzi"},"source":["## basic_func"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QmhLikYlSuzi"},"outputs":[],"source":["def sync_check(df, second_df=None, third_df=None, fourth_df=None, fifth_df=None,\n","               sixth_df=None, seventh_df=None, eighth_df=None):\n","\n","    #           supertrend          #\n","    # df = st_price_line(df, second_df, '3m')\n","    # # print(df.head(100))\n","    # # return\n","\n","    # df = st_price_line(df, third_df, '5m')\n","    # df = st_price_line(df, fourth_df, '15m')\n","    # df = st_price_line(df, fifth_df, '30m')\n","    # df = st_price_line(df, sixth_df, '1h')\n","    # df = st_price_line(df, seventh_df, '4h')\n","\n","    # print(\"supertrend phase done\")\n","\n","    # --------------- rsi --------------- #  \n","    # df['rsi_1m'] = rsi(df, 14)    \n","    # third_df['rsi_5m'] = rsi(third_df, 14)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-1]), columns=['rsi_5m']))\n","    \n","    # print(\"rsi phase done\")\n","\n","\n","    # --------------- cci --------------- #  \n","    # df['cci_1m'] = cci(df, 20)\n","\n","    # print(\"cci phase done\")\n","\n","\n","    # --------------- ema --------------- #      \n","    # third_df['ema_5m'] = ema(third_df['close'], 200)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-1]), columns=['ema_5m']))\n","    \n","    # print(\"ema phase done\")\n","\n","\n","    # # --------------- dc --------------- #  \n","    # df = dc_line(df, None, '1m', dc_period=20)\n","    # df = dc_line(df, second_df, '3m', dc_period=20)\n","    # df = dc_line(df, third_df, '5m', dc_period=20)\n","    # df = dc_line(df, fourth_df, '15m', dc_period=20)\n","    # df = dc_line(df, fifth_df, '30m', dc_period=20)\n","    # df = dc_line(df, sixth_df, '1h', dc_period=20)\n","    # df = dc_line(df, seventh_df, '4h', dc_period=20)\n","\n","    # print(\"dc phase done\")\n","    \n","    # # --------------- bband --------------- #  \n","    # df = bb_line(df, None, '1m')\n","    # df = bb_line(df, second_df, '3m')\n","    # df = bb_line(df, third_df, '5m')\n","    # df = bb_line(df, fourth_df, '15m')\n","    # df = bb_line(df, fifth_df, '30m')\n","    # df = bb_line(df, sixth_df, '1h')\n","    # df = bb_line(df, seventh_df, '4h')\n","\n","    # print(\"bband phase done\")\n","\n","    # --------------- cbline --------------- #    \n","    # second_df['cloud_bline_3m'] = cloud_bline(second_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, second_df, [-1]), columns=['cloud_bline_3m']))\n","    # third_df['cloud_bline_5m'] = cloud_bline(third_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-1]), columns=['cloud_bline_5m']))\n","    # fourth_df['cloud_bline_15m'] = cloud_bline(fourth_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, fourth_df, [-1]), columns=['cloud_bline_15m']))\n","    # fifth_df['cloud_bline_30m'] = cloud_bline(fifth_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, fifth_df, [-1]), columns=['cloud_bline_30m']))\n","    # sixth_df['cloud_bline_1h'] = cloud_bline(sixth_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, sixth_df, [-1]), columns=['cloud_bline_1h']))\n","    # seventh_df['cloud_bline_4h'] = cloud_bline(seventh_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, seventh_df, [-1]), columns=['cloud_bline_4h']))\n","\n","    # print(\"cbline phase done\")\n","    \n","\n","    #           lucid sar              #\n","    # df['sar_1m'], df['sar_uptrend_1m'] = lucid_sar(df, return_uptrend=True)\n","\n","    second_df['sar_3m'], second_df['sar_uptrend_3m'] = lucid_sar(second_df, af_initial=0.01, return_uptrend=True)\n","    df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, second_df, [-2, -1], backing_i=-2), columns=['sar_3m', 'sar_uptrend_3m']))\n","\n","    third_df['sar_5m'], third_df['sar_uptrend_5m'] = lucid_sar(third_df, af_initial=0.01, return_uptrend=True)\n","    df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-2, -1], backing_i=-2), columns=['sar_5m', 'sar_uptrend_5m']))\n","\n","    fourth_df['sar_15m'], fourth_df['sar_uptrend_15m'] = lucid_sar(fourth_df, af_initial=0.01, return_uptrend=True)\n","    df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, fourth_df, [-2, -1], backing_i=-2), columns=['sar_15m', 'sar_uptrend_15m']))\n","\n","    # seventh_df['sar_4h'], seventh_df['sar_uptrend_4h'] = lucid_sar(seventh_df, return_uptrend=True)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, seventh_df, [-2, -1], backing_i=-2), columns=['sar_4h', 'sar_uptrend_4h']))\n","    \n","    print(\"sar phase done\")\n","\n","    \n","    #           stochastic              #\n","    # df['stoch_1m'] = stoch(df, 13, 3, 3)\n","\n","    # third_df['stoch'] = stoch(third_df, 13, 3, 3)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","    # print(\"stoch phase done\")\n","\n","\n","    return df\n"]},{"cell_type":"markdown","metadata":{"id":"mEKyVbHWSuzi"},"source":["## make & save res_df (concat ÏÉùÍ∞ÅÌïòÎ©¥, timeindex sync ÎßûÏ∂∞ÏïºÌï®)"]},{"cell_type":"markdown","metadata":{"id":"VdukVo5-Suzj"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11,"status":"error","timestamp":1636201718856,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"khKb9nhlSuzj","outputId":"02bf2c60-f298-4fe9-e6bb-78230ac1348c"},"outputs":[{"ename":"NameError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-5-ee034491b257>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0ma_day\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m3600\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m24\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtqdm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m   \u001b[0mkeys\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mfile_list\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'file_list' is not defined"]}],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  if '2021-07-01'.upper() not in file_list[i]:\n","  # if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    excel_name = key.replace(\".xlsx\", \"_st1h_backi2.xlsx\")\n","    excel_path = save_path + excel_name\n","\n","    if excel_name in exist_list:\n","      print(excel_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m ÎßàÏßÄÎßâ timeindex Ïùò date Í∏∞Ï§Ä, 08:59:59.999000 Î•º last timestamp Î°ú ÏÑ§Ï†ï\n","      #      2. ÏãúÏûë timestamp Îäî Î™®Îì† tf Ïùò Í∞ÄÏû• ÏµúÍ∑º ÏãúÏûë index,\n","      #       a. 1m Ïùò ÏãúÏûë timeindex Îäî ÏµúÏÜå, htf Ïùò ÏãúÏûë timeindex Î≥¥Îã§ interval ÎßåÌÅº ÏïûÏÑúÏïºÌï®\n","      #         i. Îî∞ÎùºÏÑú 1m open_index, latest_open_index + 1d Î•º ÌïòÎ©¥ Îåê\n","      #           1. timestamp ÏúºÎ°ú Î≥ÄÌôòÌõÑ 1day Î•º ÎçîÌïòÍ≥† datetime ÏúºÎ°ú Î≥ÄÌôò\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","    latest_open_index = sorted(open_indexes)[-1]\n","    \n","    open_ts = datetime.timestamp(latest_open_index)\n","    latest_open_index_1m = datetime.fromtimestamp(open_ts + a_day)\n","\n","    #   str Î°ú ÎßåÎì§Ïñ¥ Ï†ëÍ∑ºÌïòÎ©¥ Î∂àÍ∞ÄÌï®  #\n","    end_index = pd.to_datetime(str(df.index[-1]).split(\" \")[0] + \" 08:59:59.999000\")\n","    # break\n","\n","    sliced_df = df.loc[latest_open_index_1m:end_index] # to_lower_tf Ïùò Í∏∞Ï§Ä ltf\n","    sliced_second_df = second_df.loc[latest_open_index:end_index]\n","    sliced_third_df = third_df.loc[latest_open_index:end_index]\n","    sliced_fourth_df = fourth_df.loc[latest_open_index:end_index]\n","    sliced_fifth_df = fifth_df.loc[latest_open_index:end_index]\n","\n","    print(\"sliced index\")\n","    print(sliced_df.index[[0, -1]])\n","    print(sliced_second_df.index[[0, -1]])\n","    print(sliced_third_df.index[[0, -1]])\n","    print(sliced_fourth_df.index[[0, -1]])\n","    print(sliced_fifth_df.index[[0, -1]])\n","\n","    try:\n","      sliced_sixth_df = sixth_df.loc[latest_open_index:end_index]\n","      sliced_seventh_df = seventh_df.loc[latest_open_index:end_index]\n","\n","      print(sliced_sixth_df.index[[0, -1]])\n","      print(sliced_seventh_df.index[[0, -1]])\n","\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df, sliced_sixth_df, sliced_seventh_df)\n","    \n","    except:\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df)\n","\n","\n","\n","    res_df.to_excel(excel_path)\n","    print(excel_name, \"saved succesfully !\")"]},{"cell_type":"markdown","metadata":{"id":"Bw5JibDKSuzj"},"source":["### xlsx to feather"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":355},"id":"VA-_gcA7Suzj","outputId":"f6f3b55d-ec2c-4b2c-d62e-3de7c0384dc4"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"be2b848dbcb14a079a2b7bd605af6435","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/156 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["DatetimeIndex(['2021-06-28 00:00:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:02:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:04:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:14:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:29:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-09-14 03:59:59.999000', '2021-11-15 14:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-03-10 20:59:59.999000', '2021-11-15 16:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","\n","xlsx converted to feather !\n","DatetimeIndex(['2021-06-28 00:00:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:02:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:04:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:14:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:29:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-09-14 03:59:59.999000', '2021-11-15 14:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-03-10 20:59:59.999000', '2021-11-15 16:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","\n","xlsx converted to feather !\n"]}],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  # if '2021-07-01'.upper() not in file_list[i]:\n","  if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    feather_name = key.replace(\".xlsx\", \".ftr\")\n","    # feather_path = save_path + feather_name\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m ÎßàÏßÄÎßâ timeindex Ïùò date Í∏∞Ï§Ä, 08:59:59.999000 Î•º last timestamp Î°ú ÏÑ§Ï†ï\n","      #      2. ÏãúÏûë timestamp Îäî Î™®Îì† tf Ïùò Í∞ÄÏû• ÏµúÍ∑º ÏãúÏûë index,\n","      #       a. 1m Ïùò ÏãúÏûë timeindex Îäî ÏµúÏÜå, htf Ïùò ÏãúÏûë timeindex Î≥¥Îã§ interval ÎßåÌÅº ÏïûÏÑúÏïºÌï®\n","      #         i. Îî∞ÎùºÏÑú 1m open_index, latest_open_index + 1d Î•º ÌïòÎ©¥ Îåê\n","      #           1. timestamp ÏúºÎ°ú Î≥ÄÌôòÌõÑ 1day Î•º ÎçîÌïòÍ≥† datetime ÏúºÎ°ú Î≥ÄÌôò\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","\n","    df.reset_index().to_feather(date_path + feather_name, compression='lz4')\n","    second_df.reset_index().to_feather(date_path2 + feather_name, compression='lz4')\n","    third_df.reset_index().to_feather(date_path3 + feather_name, compression='lz4')\n","    fourth_df.reset_index().to_feather(date_path4 + feather_name, compression='lz4')\n","    fifth_df.reset_index().to_feather(date_path5 + feather_name, compression='lz4')\n","    sixth_df.reset_index().to_feather(date_path6 + feather_name, compression='lz4')\n","    seventh_df.reset_index().to_feather(date_path7 + feather_name, compression='lz4')\n","\n","    print(\"xlsx converted to feather !\")\n","    "]},{"cell_type":"markdown","metadata":{"id":"Pe0QpnORSuzk"},"source":["### add itv_name to ftr"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":223},"executionInfo":{"elapsed":43664,"status":"ok","timestamp":1638246331122,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"M-gl30KxSuzk","outputId":"1cfcb580-8d25-4bd0-fdd0-213640779ce2"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"e3225655da874b8d89cc8b2a381b3fb6","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/175 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 BTCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 BCHUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 XRPUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 EOSUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 LTCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ETCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 LINKUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 XLMUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ADAUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ETHUSDT_1m.ftr\n"]}],"source":["save_path = './candlestick_concated/res_df/'\n","\n","# dir_path = \"bbdc3m_backi2\"\n","# date = '2021-10-10'\n","date = '2021-07-01'\n","\n","db_path = './candlestick_concated/database_bn/non_cum/%s/' % date\n","os.makedirs(os.path.join(db_path), exist_ok=True)\n","\n","# exist_list = os.listdir(os.path.join(save_path, dir_path))\n","# break\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","        \n","    df = shutil.copy(date_path + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n","    second_df = shutil.copy(date_path2 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval2))\n","    third_df = shutil.copy(date_path3 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval3))\n","    fourth_df = shutil.copy(date_path4 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval4))\n","    fifth_df = shutil.copy(date_path5 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval5))\n","    sixth_df = shutil.copy(date_path6 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval6))\n","    seventh_df = shutil.copy(date_path7 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval7))\n","\n","    print(\"copied to\" + db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n"]},{"cell_type":"markdown","metadata":{"id":"4oZ1ohTtSuzk"},"source":["### feather ver."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"referenced_widgets":["465133d6c5694a1ca7b7135eaaac8b1d"]},"id":"vgVHpnUsSuzk","outputId":"d5b68380-22d9-4ddd-b4c9-3efca2ef4a27"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"465133d6c5694a1ca7b7135eaaac8b1d","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/70 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["DatetimeIndex(['2020-09-05 00:00:59.999000', '2021-11-17 00:47:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:02:59.999000', '2021-11-17 00:53:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:04:59.999000', '2021-11-17 00:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:14:59.999000', '2021-11-17 01:14:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:29:59.999000', '2021-11-17 01:29:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 00:59:59.999000', '2021-11-17 01:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-17 04:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","\n","sliced index\n","DatetimeIndex(['2020-09-06 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:80: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:83: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:86: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"]},{"name":"stdout","output_type":"stream","text":["sar phase done\n","./candlestick_concated/res_df/sar2_backi2/noncat/cum/2021-11-17/2021-11-17 ETHUSDT.ftr saved succesfully !\n","DatetimeIndex(['2020-09-05 00:00:59.999000', '2021-11-17 00:47:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:02:59.999000', '2021-11-17 00:53:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:04:59.999000', '2021-11-17 00:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:14:59.999000', '2021-11-17 01:14:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:29:59.999000', '2021-11-17 01:29:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 00:59:59.999000', '2021-11-17 01:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-17 04:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","\n","sliced index\n","DatetimeIndex(['2020-09-06 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","sar phase done\n","./candlestick_concated/res_df/sar2_backi2/noncat/cum/2021-11-17/2021-11-17 BTCUSDT.ftr saved succesfully !\n","DatetimeIndex(['2020-09-05 00:00:59.999000', '2021-11-17 00:47:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:02:59.999000', '2021-11-17 00:53:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:04:59.999000', '2021-11-17 00:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:14:59.999000', '2021-11-17 01:14:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-04 00:29:59.999000', '2021-11-17 01:29:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 00:59:59.999000', '2021-11-17 01:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-17 04:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","\n","sliced index\n","DatetimeIndex(['2020-09-06 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n","DatetimeIndex(['2020-09-05 04:59:59.999000', '2021-11-16 08:59:59.999000'], dtype='datetime64[ns]', name='index', freq=None)\n"]}],"source":["# db_path = './candlestick_concated/database_ub/'\n","db_path = './candlestick_concated/database_bn/'\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","save_dir_path = \"sar2_backi2\"\n","\n","date = '2021-11-17'\n","\n","data_path = os.path.join(db_path, \"cum\", date) \n","save_path = os.path.join(save_path, save_dir_path, 'noncat/cum', date)\n","os.makedirs(save_path, exist_ok=True)\n","\n","file_list = os.listdir(data_path)\n","exist_list = os.listdir(save_path)\n","# break\n","\n","interval = '1m'\n","interval2 = '3m'\n","interval3 = '5m'\n","interval4 = '15m'\n","interval5 = '30m'\n","interval6 = '1h'\n","interval7 = '4h'\n","interval8 = '1d'\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","\n","    if \"_1m\" not in key:\n","      continue\n","\n","    # feather_name = key.replace(\".ftr\", \"_%.ftr\" % save_dir_path)\n","    feather_name = key.replace(\"_1m\", \"\")\n","    feather_path = os.path.join(save_path, feather_name)\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    end_indexes = []\n","    \n","    df = pd.read_feather(os.path.join(data_path, key), columns=None, use_threads=True).set_index(\"index\")\n","    second_df = pd.read_feather(os.path.join(data_path, key.replace(interval, interval2)), columns=None, use_threads=True).set_index(\"index\")\n","    third_df = pd.read_feather(os.path.join(data_path, key.replace(interval, interval3)), columns=None, use_threads=True).set_index(\"index\")\n","    fourth_df = pd.read_feather(os.path.join(data_path, key.replace(interval, interval4)), columns=None, use_threads=True).set_index(\"index\")\n","    fifth_df = pd.read_feather(os.path.join(data_path, key.replace(interval, interval5)), columns=None, use_threads=True).set_index(\"index\")\n","        \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    end_indexes.append(df.index[-1])\n","    end_indexes.append(second_df.index[-1])\n","    end_indexes.append(third_df.index[-1])\n","    end_indexes.append(fourth_df.index[-1])\n","    end_indexes.append(fifth_df.index[-1])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m ÎßàÏßÄÎßâ timeindex Ïùò date Í∏∞Ï§Ä, 08:59:59.999000 Î•º last timestamp Î°ú ÏÑ§Ï†ï\n","      #      2. ÏãúÏûë timestamp Îäî Î™®Îì† tf Ïùò Í∞ÄÏû• ÏµúÍ∑º ÏãúÏûë index,\n","      #       a. 1m Ïùò ÏãúÏûë timeindex Îäî ÏµúÏÜå, htf Ïùò ÏãúÏûë timeindex Î≥¥Îã§ interval ÎßåÌÅº ÏïûÏÑúÏïºÌï®\n","      #         i. Îî∞ÎùºÏÑú 1m open_index, latest_open_index + 1d Î•º ÌïòÎ©¥ Îåê\n","      #           1. timestamp ÏúºÎ°ú Î≥ÄÌôòÌõÑ 1day Î•º ÎçîÌïòÍ≥† datetime ÏúºÎ°ú Î≥ÄÌôò\n","      sixth_df = pd.read_feather(os.path.join(data_path, key.replace(interval, interval6)), columns=None, use_threads=True).set_index(\"index\")\n","      seventh_df = pd.read_feather(os.path.join(data_path, key.replace(interval, interval7)), columns=None, use_threads=True).set_index(\"index\")\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","      end_indexes.append(sixth_df.index[-1])\n","      end_indexes.append(seventh_df.index[-1])\n","\n","    except Exception as e:\n","      print(e)\n","\n","    latest_open_index = sorted(open_indexes)[-1]\n","    recent_end_index = sorted(end_indexes)[0]\n","    \n","    open_ts = datetime.timestamp(latest_open_index)\n","    latest_open_index_1m = datetime.fromtimestamp(open_ts + a_day)\n","\n","    end_ts = datetime.timestamp(recent_end_index)\n","    recent_end_index_1m = datetime.fromtimestamp(end_ts - a_day)\n","\n","    #   str Î°ú ÎßåÎì§Ïñ¥ Ï†ëÍ∑ºÌïòÎ©¥ Î∂àÍ∞ÄÌï®  #\n","    #   latest_open_index_1m ÏùÄ latest_open_index Î≥¥Îã§ ÌÅ¨Í∏∞Îßå ÌïòÎ©¥ Îê®   # (9:00:00 ÍµêÏ≤¥ ÌïÑÏöîÏóÜÏù¥)\n","    if \"999000\" in str(df.index[-1]):\n","      # end_index = pd.to_datetime(str(df.index[-1]).split(\" \")[0] + \" 08:59:59.999000\")\n","      end_index = pd.to_datetime(str(recent_end_index_1m).split(\" \")[0] + \" 08:59:59.999000\")\n","    else:\n","      # end_index = pd.to_datetime(str(df.index[-1]).split(\" \")[0] + \" 09:00:00\")\n","      end_index = pd.to_datetime(str(recent_end_index_1m).split(\" \")[0] + \" 09:00:00\")\n","      # end_index = pd.to_datetime(\"2021-11-15\" + \" 09:00:00\")\n","\n","    #   ***** 1m open_idx Îäî htf Î≥¥Îã§ Ïª§ÏïºÌï® --> to_lower_tf Î•º ÏÇ¨Ïö©ÌïòÍ∏∞ ÏúÑÌï®ÏûÑ   #\n","    sliced_df = df.loc[latest_open_index_1m:end_index] # to_lower_tf Ïùò Í∏∞Ï§Ä ltf\n","\n","    sliced_second_df = second_df.loc[latest_open_index:end_index]\n","    sliced_third_df = third_df.loc[latest_open_index:end_index]\n","    sliced_fourth_df = fourth_df.loc[latest_open_index:end_index]\n","    sliced_fifth_df = fifth_df.loc[latest_open_index:end_index]\n","\n","    print(\"sliced index\")\n","    print(sliced_df.index[[0, -1]])\n","    print(sliced_second_df.index[[0, -1]])\n","    print(sliced_third_df.index[[0, -1]])\n","    print(sliced_fourth_df.index[[0, -1]])\n","    print(sliced_fifth_df.index[[0, -1]])\n","\n","    try:\n","      sliced_sixth_df = sixth_df.loc[latest_open_index:end_index]\n","      sliced_seventh_df = seventh_df.loc[latest_open_index:end_index]\n","\n","      print(sliced_sixth_df.index[[0, -1]])\n","      print(sliced_seventh_df.index[[0, -1]])\n","\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df, sliced_sixth_df, sliced_seventh_df)\n","    \n","    except:\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df)\n","\n","\n","\n","    # res_df.to_feather(feather_path)\n","    res_df.reset_index().to_feather(feather_path, compression='lz4')\n","    print(feather_path, \"saved succesfully !\")"]},{"cell_type":"markdown","metadata":{"id":"jTN3M842Suzl"},"source":["## concat & save new res_df"]},{"cell_type":"markdown","metadata":{"id":"MlFkpO1MSuzl"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"U-3QkfbFSuzl"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","dict_name = \"2021-07-01 ETHUSDT_bb15m_backi2_res_dfs.pkl\"\n","\n","#     load with pickle    #\n","with open(save_path + dict_name, 'rb') as f:\n","  saved_res_df_dict = pickle.load(f)\n","\n","print(dict_name, \"loaded !\")\n","res_df_files = os.listdir(save_path)\n","res_df_files.reverse()\n","\n","print(res_df_files)\n","\n","res_df_dict = {}\n","\n","base_postfix = '_bb15m_backi2.xlsx'\n","new_postfix = '_st1h_backi2.xlsx'\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for k_i, key in enumerate(res_df_files):\n","\n","  if '2021-07-01'.upper() not in key:\n","  # if '2021-10-10'.upper() not in key:\n","    continue\n","\n","  # if \"link\".upper() not in key:\n","  # if \"btc\".upper() not in key:\n","  #   continue\n","\n","  if new_postfix not in key:\n","    continue\n","\n","  # if key in \n","\n","  if sample_cnt == max_cnt:\n","    dict_name = \"%s_res_dfs.pkl\" % key.split(\".\")[0]\n","    print(\"dict_name :\", dict_name)\n","\n","  base_df = saved_res_df_dict[key.replace(new_postfix, base_postfix)]\n","  # base_df = pd.read_excel(save_path + key.replace(new_postfix, base_postfix), index_col=0)  \n","  res_df = pd.read_excel(save_path + key, index_col=0)  \n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  droped_new_res_df.head()\n","  # break\n","\n","  # res_df_dict[key] = res_df\n","  res_df_dict[key] = droped_new_res_df\n","  print(key, \"saved to dict !\")\n","\n","  #     save with pickle    #\n","  with open(save_path + dict_name, 'wb') as f:\n","    pickle.dump(res_df_dict, f)\n","\n","  sample_cnt -= 1\n","\n","  if sample_cnt <= 0:\n","    break\n"]},{"cell_type":"markdown","metadata":{"id":"t1E_eAyPSuzm"},"source":["### new col to latest feather (1m_indi. only)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xyI5NrM7Suzm"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","cum_dir = \"cum\"\n","\n","new_dir_path = \"rsi_backi2\"\n","base_dir_path = \"bbdc3m_backi2\"\n","\n","new_date = '2021-11-17'\n","\n","\n","\n","#     load ftr list    #\n","base_save_path = os.path.join(save_path, base_dir_path, \"concat/cum\", new_date)\n","new_save_path = base_save_path.replace(base_dir_path, new_dir_path)\n","\n","#     save to (new) cum dir    #\n","#      1. if dir. not exists, makedir\n","os.makedirs(new_save_path, exist_ok=True)\n","\n","ftr_list = [s for s in os.listdir(base_save_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_save_path, key), columns=None, use_threads=True).set_index(\"index\")\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  droped_new_res_df = sync_check(base_df)\n","\n","  # new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # # new_res_df.head()\n","\n","  # intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  # droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break\n","\n","  droped_new_res_df.reset_index().to_feather(os.path.join(new_save_path, key), compression='lz4')\n","\n","  print(os.path.join(new_save_path, key), \"saved !\")\n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"markdown","metadata":{"id":"nUs4fjVHSuzl"},"source":["### feather ver. (col concat)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":20739,"status":"ok","timestamp":1640781341331,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"6cu-Y82iSuzl","outputId":"23c07b95-bf94-462c-e915-7f00810353b5"},"outputs":[{"name":"stdout","output_type":"stream","text":["['2021-11-17 ETHUSDT.ftr', '2021-11-17 BTCUSDT.ftr', '2021-11-17 ETCUSDT.ftr']\n","./candlestick_concated/res_df/sar2_backi2/concat/cum/2021-11-17/2021-11-17 ETHUSDT.ftr saved !\n","./candlestick_concated/res_df/sar2_backi2/concat/cum/2021-11-17/2021-11-17 BTCUSDT.ftr saved !\n","./candlestick_concated/res_df/sar2_backi2/concat/cum/2021-11-17/2021-11-17 ETCUSDT.ftr saved !\n"]}],"source":["new_dir_path = \"sar2_backi2\"\n","base_dir_path = \"cci_backi2\"\n","\n","# new_date = \"2021-07-01\"\n","new_date = \"2021-11-17\"\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","save_path = './candlestick_concated/res_df/'\n","save_path = os.path.join(save_path, new_dir_path, \"concat/cum\", new_date)\n","os.makedirs(save_path, exist_ok=True)\n","\n","\n","#     load ftr list    #\n","# ftr_list = [s for s in os.listdir(os.path.join(save_path, new_dir_path)) if \"ftr\" in s]\n","\n","noncat_path = save_path.replace(\"concat/\", \"noncat/\")\n","ftr_list = [s for s in os.listdir(noncat_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(save_path.replace(new_dir_path, base_dir_path), key), columns=None, use_threads=True).set_index(\"index\")\n","  res_df = pd.read_feather(os.path.join(noncat_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break\n","\n","  droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","  # res_df_dict[key] = res_df\n","  # res_df_dict[key] = droped_new_res_df\n","  print(os.path.join(save_path, key), \"saved !\")\n","  \n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":454,"status":"ok","timestamp":1640781345898,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"4GiF2NJPSuzm","outputId":"7c7d3818-14d4-400f-a2f7-475fa21d3063"},"outputs":[{"data":{"text/plain":["Index(['dc_upper_1m', 'dc_lower_1m', 'dc_base_1m', 'dc_upper_3m', 'dc_lower_3m', 'dc_base_3m', 'dc_upper_5m', 'dc_lower_5m', 'dc_base_5m', 'dc_upper_15m', 'dc_lower_15m', 'dc_base_15m', 'dc_upper_30m', 'dc_lower_30m', 'dc_base_30m', 'dc_upper_1h', 'dc_lower_1h', 'dc_base_1h', 'dc_upper_4h', 'dc_lower_4h', 'dc_base_4h', 'bb_upper_1m', 'bb_lower_1m', 'bb_upper_3m', 'bb_lower_3m', 'bb_upper_5m', 'bb_lower_5m', 'bb_upper_15m', 'bb_lower_15m', 'bb_upper_30m', 'bb_lower_30m', 'bb_upper_1h', 'bb_lower_1h', 'bb_upper_4h', 'bb_lower_4h', 'rsi_1m', 'rsi_5m', 'ema_5m', 'cci_1m', 'open', 'high', 'low', 'close', 'volume', 'sar_3m', 'sar_uptrend_3m', 'sar_5m', 'sar_uptrend_5m', 'sar_15m', 'sar_uptrend_15m'], dtype='object')"]},"execution_count":4,"metadata":{},"output_type":"execute_result"}],"source":["droped_new_res_df.columns"]},{"cell_type":"markdown","metadata":{"id":"WVAKq3i8Suzm"},"source":["### feather ver. (row concat) , database cum ÎèÑ Ìò∏ÌôòÍ∞ÄÎä•"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XG2p9OhhSuzm"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","save_path = './candlestick_concated/database_bn/'\n","\n","new_date = '2021-11-17'\n","# base_date = '2021-10-10'\n","base_date = '2021-07-01'\n","\n","#     load ftr list    #\n","if \"database\" in save_path:\n","  dir_path = \"\"\n","  concat_dir = \"\"\n","else:\n","  dir_path = \"bbdc3m_backi2\"\n","  concat_dir = \"concat\"\n","\n","# base_date_path = os.path.join(save_path, dir_path, concat_dir, \"cum\", base_date)    # --> base ÎèÑ non_cum Í∞ÄÎä•Ìï®\n","base_date_path = os.path.join(save_path, dir_path, concat_dir, \"non_cum\", base_date)    # --> base ÎèÑ non_cum Í∞ÄÎä•Ìï®\n","# new_date_path = os.path.join(save_path, dir_path, concat_dir, \"non_cum\", new_date)\n","new_date_path = os.path.join(save_path, dir_path, concat_dir, \"cum\", new_date)    # --> cum Í∞ÄÎä•Ìï®\n","  \n","\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","save_path = new_date_path.replace(\"non_cum\", \"cum\")\n","os.makedirs(save_path, exist_ok=True)   # noncat / concat ÎëêÍ∞ÄÏßÄ Í≤ΩÏö∞ Ï°¥Ïû¨Í∞ÄÎä•Ìï† Í≤É\n","# os.makedirs(os.path.join(save_path, dir_path, \"noncat/cum\", new_date), exist_ok=True)\n","\n","\n","ftr_list = [s for s in os.listdir(new_date_path) if \"ftr\" in s]\n","exist_list = os.listdir(save_path)\n","print(ftr_list)\n","# break\n","\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","  # if key in exist_list:\n","  #   print(key, \"already exist !\")\n","  #   continue\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_date_path, key.replace(new_date, base_date)), columns=None, use_threads=True).set_index(\"index\")\n","  res_df = pd.read_feather(os.path.join(new_date_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break\n","  \n","  interval = key.split(\".\")[0].split(\"_\")[-1] \n","  itv_num = to_itvnum(interval)\n","\n","  # verified_df = consecutive_df(droped_new_res_df, to_itvnum(interval))\n","\n","  # verified_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","  # res_df_dict[key] = res_df\n","  # res_df_dict[key] = droped_new_res_df\n","  \n","  print(droped_new_res_df.iloc[[0, -1]])\n","\n","  np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","  ideal_ts_gap = 60 * itv_num\n","\n","  for ts_i in range(len(np_idx_ts)):\n","    \n","    if ts_i != 0:\n","      ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","\n","      if ts_gap > ideal_ts_gap or ts_gap < ideal_ts_gap:\n","      # if ts_gap == ideal_ts_gap:\n","        print(droped_new_res_df.index[ts_i - 1])\n","        print(droped_new_res_df.index[ts_i])\n","        # print(ts_gap)\n","        print(\"-------------------- unideal ts_gap --------------------\")\n","\n","  droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","  print(os.path.join(save_path, key), \"saved !\")\n","  \n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"markdown","metadata":{"id":"L7l5CTJfSuzn"},"source":["### check continuity"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2412,"status":"ok","timestamp":1640781357243,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"nGzMGyC3Suzn","outputId":"8867353a-59f8-475a-bc4f-326da4bb4e5d"},"outputs":[{"name":"stdout","output_type":"stream","text":["                         dc_upper_1m  dc_lower_1m  dc_base_1m  dc_upper_3m  dc_lower_3m  dc_base_3m  dc_upper_5m  dc_lower_5m  dc_base_5m  dc_upper_15m  dc_lower_15m  dc_base_15m  dc_upper_30m  dc_lower_30m  dc_base_30m  dc_upper_1h  dc_lower_1h  dc_base_1h  dc_upper_4h  dc_lower_4h  dc_base_4h  bb_upper_1m  bb_lower_1m  bb_upper_3m  bb_lower_3m  bb_upper_5m  bb_lower_5m  bb_upper_15m  bb_lower_15m  bb_upper_30m  bb_lower_30m  bb_upper_1h  bb_lower_1h  bb_upper_4h  bb_lower_4h     rsi_1m     rsi_5m     ema_5m      cci_1m    open    high     low   close   volume     sar_3m  sar_uptrend_3m     sar_5m  sar_uptrend_5m    sar_15m  sar_uptrend_15m\n","index                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \n","2020-09-06 04:59:59.999          NaN          NaN         NaN        5.034        4.824       4.929        5.066        4.824       4.945         5.286         4.824        5.055         5.286         4.824        5.055        5.418        4.847      5.1325          NaN          NaN         NaN          NaN          NaN     4.947881     4.851019     5.013865     4.873635      5.217982      4.976818      5.229521      5.026779     5.333309     5.116591          NaN          NaN        NaN  37.362911   5.149668         NaN   4.898   4.918   4.896   4.911  5890.23   4.977421           False   4.824960            True   5.166939            False\n","2021-11-16 08:59:59.999        55.01       54.735     54.8725       55.149       54.741      54.945       55.149       54.555      54.852        55.285        54.205       54.745        56.353        54.205       55.279       56.634       54.205     55.4195       56.933         53.7     55.3165    54.995519    54.879381    55.056293    54.898407    55.071791    54.818409     55.099366     54.797334     55.514173     54.812127    56.180214    55.162286    56.046519    55.180481  41.796641  50.365261  55.351019 -203.887438  54.771  54.850  54.764  54.849  1217.71  54.746353            True  55.129004           False  55.181733            False\n","[1.59936840e+09 1.59936846e+09 1.59936852e+09 1.59936858e+09\n"," 1.59936864e+09 1.59936870e+09 1.59936876e+09 1.59936882e+09\n"," 1.59936888e+09 1.59936894e+09]\n"]}],"source":["# print(droped_new_res_df.columns)\n","\n","print(droped_new_res_df.iloc[[0, -1]])\n","\n","np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","\n","print(np_idx_ts[:10])\n","for ts_i in range(len(np_idx_ts)):\n","  \n","  if ts_i != 0:\n","    ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","\n","    if ts_gap > 60 or ts_gap < 60:\n","    # if ts_gap == 60:\n","      print(droped_new_res_df.index[ts_i - 1])\n","      print(droped_new_res_df.index[ts_i])\n","      # print(ts_gap)\n","      print()\n"]},{"cell_type":"markdown","metadata":{"id":"qNGeuYuGDXfv"},"source":["# pr check with strategy"]},{"cell_type":"markdown","metadata":{"id":"6HOjnZjSgzk1"},"source":["## load ftr_list"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1526,"status":"ok","timestamp":1641392725359,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"7FPBG5Qqg2jB","outputId":"13b7ed9c-761b-4f92-8e78-d7dd6ae0629a"},"outputs":[{"output_type":"stream","name":"stdout","text":["['2021-11-17 ETHUSDT.ftr', '2021-11-17 BTCUSDT.ftr', '2021-11-17 ETCUSDT.ftr']\n"]}],"source":["save_path = './candlestick_concated/res_df/'\n","\n","dir_path = \"sar2_backi2\"\n","\n","date = \"2021-11-17\"\n","\n","ftr_path = os.path.join(save_path, dir_path, \"concat/cum\", date)\n","\n","#     load ftr list    #\n","ftr_list = [s for s in os.listdir(ftr_path) if \"ftr\" in s if date in s]\n","# ftr_list = [s for s in os.listdir(os.path.join(save_path, dir_path)) if \"ftr\" in s if date in s]\n","print(ftr_list)"]},{"cell_type":"markdown","metadata":{"id":"5duWn8t4BRyv"},"source":["## hvp platform"]},{"cell_type":"markdown","metadata":{"id":"wmnyUTS-yjF1"},"source":["##### config"]},{"cell_type":"markdown","metadata":{"id":"JjKHyqftzhD7"},"source":["###### set config (override available)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"q_4E-zH02WJy"},"outputs":[],"source":["#     caution : MARKET / LIMIT spelling   #\n","#      json doesn't support single quotes     #\n","\n","param_dict = \\\n","{\n","  \"strat_version\": \"1_3\",\n","  \"trader_set\": {\n","    \"run\": 1,\n","    \"df_log\": 0,\n","    \"last_index\": -2,\n","    \"limit_fee\": 0.0002,\n","    \"market_fee\": 0.0004,\n","    \"initial_asset\": 3000,\n","    \"asset_changed\": 0,\n","    \"symbol\": \"ETHUSDT\",\n","    \"symbol_changed\": 0,\n","    \"interval_list\": [\n","      \"1m\",\n","      \"5m\",\n","      \"15m\"\n","    ],\n","    \"row_list\": [\n","      200,\n","      100,\n","      100\n","    ],\n","    \"bar_close_second\": 59,\n","    \"realtime_term\": 0.01,\n","    \"api_retry_term\": 3,\n","    \"check_entry_sec\": 10,\n","    \"entry_execution_wait\": 60,\n","    \"breakout_qty_ratio\": 0.97,\n","    \"qty_check_term\": 30,\n","    \"exit_execution_wait\": 60,\n","    \"close_complete_term\": 5,\n","    \"save_stacked_df\": 0,\n","    \"stacked_df_exist\": 1\n","  },\n","  \"pos_set\": {\n","    \"short_inversion\": 0,\n","    \"long_inversion\": 0,\n","    \"short_ban\": 1,\n","    \"long_ban\": 0\n","  },\n","  \"loc_set\": {\n","    \"zone\": {\n","      \"short_spread\": \"None\",\n","      \"long_spread\": \"None\",\n","      \"tr_thresh\": \"None\",\n","      \"dtk_dc_itv\": \"None\",\n","      \"dtk_itv\": \"5m\",\n","      \"dt_k\": \"None\",\n","      \"dc_period\": 135,\n","      \"ei_k\": 0.618,\n","      \"use_dtk_line\": 0,\n","      \"zone_rejection\": 1,\n","      \"gap_mply\": 1,\n","      \"c_itv_ticks\": 60,\n","      \"ad_idx\": 19,\n","      \"bbz_itv\": \"15m\",\n","      \"zone_dt_k\": 0.4,\n","      \"zone_dc_period\": 135,\n","      \"dr_error\": 0.1,\n","      \"bbwp_thresh\": 0.5,\n","      \"entry_incycle\": 5,\n","      \"max_eplim_pct\": 0.05,\n","      \"min_eplim_pct\": 0.013\n","    },\n","    \"point\": {\n","      \"exp_itv\": \"5m\",\n","      \"tpg_itv1\": 60,\n","      \"tpg_itv0\": 60,\n","      \"outg_itv1\": 60,\n","      \"outg_itv0\": 60,\n","      \"outg_dc_period\": \"None\",\n","      \"tf_entry\": 60,\n","      \"htf_entry\": 15,\n","      \"candle_ratio\": \"None\",\n","      \"candle_ratio2\": 70,\n","      \"body_ratio2\": 70,\n","      \"osc_band\": 20\n","    }\n","  },\n","  \"tr_set\": {\n","    \"ep_gap\": 0.0,\n","    \"tp_gap\": 0.618,\n","    \"decay_gap\": 0.3,\n","    \"out_gap\": 0.5,\n","    \"c_ep_gap\": \"None\",\n","    \"t_out_gap\": -0.0\n","  },\n","  \"ep_set\": {\n","    \"short_entry_score\": -1,\n","    \"entry_type\": \"LIMIT\",\n","    \"static_ep\": 1,\n","    \"tpout_onexec\": 0\n","  },\n","  \"tp_set\": {\n","    \"non_tp\": 0,\n","    \"tp_type\": \"LIMIT\",\n","    \"static_tp\": 1,\n","    \"decay_term\": 60,\n","    \"time_tp\": 0,\n","    \"partial_num\": 1,\n","    \"partial_qty_divider\": 1.5\n","  },\n","  \"out_set\": {\n","    \"out_type\": \"MARKET\",\n","    \"use_out\": 0,\n","    \"static_out\": 1,\n","    \"hl_out\": 1,\n","    \"price_restoration\": 0,\n","    \"retouch\": 0,\n","    \"retouch_out_period\": 500,\n","    \"second_out\": 0,\n","    \"approval_st_gap\": 1.5,\n","    \"second_out_gap\": 0.5\n","  },\n","  \"lvrg_set\": {\n","    \"leverage\": 10,\n","    \"static_lvrg\": 1,\n","    \"allow_float\": 0,\n","    \"target_pct\": 0.1,\n","    \"lvrg_rejection\": 0\n","  }\n","}\n","\n","config1 = EasyDict(param_dict)\n","# param_json = json.dumps(param_dict, indent=2)"]},{"cell_type":"markdown","metadata":{"id":"dzla8i9_ysmP"},"source":["###### save config"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":544,"status":"ok","timestamp":1639994748940,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"FlNGKvW_w2za","outputId":"c575ce69-def0-4e6c-c949-a63707467b2e"},"outputs":[{"name":"stdout","output_type":"stream","text":["/content/drive/My Drive/Colab Notebooks/JnQ/config/config_v5_2.1220_candlejson dumped !\n"]}],"source":["config_name = \"config_v5_2.1220_candlejson\"\n","# config_name = \"config_v3.json\"\n","cfg_full_path = os.path.join(current_path, \"config\", config_name)\n","\n","\n","with open(cfg_full_path, 'w') as cfg:\n","    json.dump(config1, cfg, indent=2)\n","    print(\"{} dumped !\".format(cfg_full_path))"]},{"cell_type":"markdown","metadata":{"id":"vOVr2jLczFQJ"},"source":["###### load config"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1641046966469,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"uPpMThtZzGtZ","outputId":"60921547-d153-474f-d5f1-e256db7a821b"},"outputs":[{"output_type":"stream","name":"stdout","text":["v3\n","v5_2\n","v7_3\n"]}],"source":["config1_name = \"config_v3_1231_v7_3.json\"\n","config2_name = \"config_v5_2_1231_v7_3.json\"\n","config3_name = \"config_v7_3_1231_v7_3.json\"\n","cfg_full_path1 = os.path.join(current_path, \"config\", config1_name)\n","cfg_full_path2 = os.path.join(current_path, \"config\", config2_name)\n","cfg_full_path3 = os.path.join(current_path, \"config\", config3_name)\n","\n","with open(cfg_full_path1, 'r') as cfg:\n","    config1 = EasyDict(json.load(cfg))\n","with open(cfg_full_path2, 'r') as cfg:\n","    config2 = EasyDict(json.load(cfg))\n","with open(cfg_full_path3, 'r') as cfg:\n","    config3 = EasyDict(json.load(cfg))\n","  \n","print(config1.strat_version)\n","print(config2.strat_version)\n","print(config3.strat_version)"]},{"cell_type":"markdown","metadata":{"id":"rrIGjmUzqU-D"},"source":["##### utils override"]},{"cell_type":"markdown","metadata":{"id":"leSQlImg4_9L"},"source":["###### utils_"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CB2yZdQ95Cdg"},"outputs":[],"source":["\n","def enlist_rtc(res_df, config):\n","\n","    strat_version = config.strat_version\n","\n","    res_df['short_rtc_1_{}'.format(strat_version)] = res_df['hopen_%s' % config.loc_set.point.outg_itv1]\n","    res_df['short_rtc_0_{}'.format(strat_version)] = res_df['hclose_%s' % config.loc_set.point.outg_itv0]\n","\n","    res_df['long_rtc_1_{}'.format(strat_version)] = res_df['hclose_%s' % config.loc_set.point.outg_itv1]\n","    res_df['long_rtc_0_{}'.format(strat_version)] = res_df['hopen_%s' % config.loc_set.point.outg_itv0]\n","    \n","    #      entry reversion    #\n","    if config.ep_set.short_entry_score > 0:      \n","      short_rtc_1_copy = res_df['short_rtc_1_{}'.format(strat_version)].copy()\n","      res_df['short_rtc_1_{}'.format(strat_version)] = res_df['long_rtc_1_{}'.format(strat_version)]\n","      res_df['long_rtc_1_{}'.format(strat_version)] = short_rtc_1_copy\n","\n","      short_rtc_0_copy = res_df['short_rtc_0_{}'.format(strat_version)].copy()\n","      res_df['short_rtc_0_{}'.format(strat_version)] = res_df['long_rtc_0_{}'.format(strat_version)]\n","      res_df['long_rtc_0_{}'.format(strat_version)] = short_rtc_0_copy\n","\n","    res_df['short_rtc_gap_{}'.format(strat_version)] = abs(res_df['short_rtc_0_{}'.format(strat_version)] - res_df['short_rtc_1_{}'.format(strat_version)])\n","    res_df['long_rtc_gap_{}'.format(strat_version)] = abs(res_df['long_rtc_1_{}'.format(strat_version)] - res_df['long_rtc_0_{}'.format(strat_version)])\n","\n","    res_df['h_short_rtc_1_{}'.format(strat_version)] = res_df['hopen_%s' % config.loc_set.point.tpg_itv1]\n","    # res_df['h_short_rtc_1_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.point.tpg_itv]\n","    res_df['h_short_rtc_0_{}'.format(strat_version)] = res_df['hclose_%s' % config.loc_set.point.tpg_itv0]\n","\n","    res_df['h_long_rtc_1_{}'.format(strat_version)] = res_df['hclose_%s' % config.loc_set.point.tpg_itv1]\n","    # res_df['h_long_rtc_1_{}'.format(strat_version)] = res_df['dc_upper_%s' % config.loc_set.point.tpg_itv]\n","    res_df['h_long_rtc_0_{}'.format(strat_version)] = res_df['hopen_%s' % config.loc_set.point.tpg_itv0]\n","\n","    #      entry reversion    #\n","    if config.ep_set.short_entry_score > 0:      \n","      h_short_rtc_1_copy = res_df['h_short_rtc_1_{}'.format(strat_version)].copy()\n","      res_df['h_short_rtc_1_{}'.format(strat_version)] = res_df['h_long_rtc_1_{}'.format(strat_version)]\n","      res_df['h_long_rtc_1_{}'.format(strat_version)] = h_short_rtc_1_copy\n","\n","      h_short_rtc_0_copy = res_df['h_short_rtc_0_{}'.format(strat_version)].copy()\n","      res_df['h_short_rtc_0_{}'.format(strat_version)] = res_df['h_long_rtc_0_{}'.format(strat_version)]\n","      res_df['h_long_rtc_0_{}'.format(strat_version)] = h_short_rtc_0_copy\n","\n","    res_df['h_short_rtc_gap_{}'.format(strat_version)] = abs(res_df['h_short_rtc_0_{}'.format(strat_version)] - res_df['h_short_rtc_1_{}'.format(strat_version)])\n","    res_df['h_long_rtc_gap_{}'.format(strat_version)] = abs(res_df['h_long_rtc_1_{}'.format(strat_version)] - res_df['h_long_rtc_0_{}'.format(strat_version)])   \n","\n","    res_df['short_dtk_1_{}'.format(strat_version)] = res_df['bb_lower_%s' % config.loc_set.zone.dtk_itv]\n","    res_df['short_dtk_0_{}'.format(strat_version)] = res_df['dc_upper_%s' % config.loc_set.zone.dtk_itv]\n","    res_df['short_dtk_gap_{}'.format(strat_version)] = res_df['short_dtk_0_{}'.format(strat_version)] - res_df['short_dtk_1_{}'.format(strat_version)]\n","\n","    res_df['long_dtk_1_{}'.format(strat_version)] = res_df['bb_upper_%s' % config.loc_set.zone.dtk_itv]\n","    res_df['long_dtk_0_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.zone.dtk_itv]\n","    res_df['long_dtk_gap_{}'.format(strat_version)] = res_df['long_dtk_1_{}'.format(strat_version)] - res_df['long_dtk_0_{}'.format(strat_version)]\n","\n","    return res_df\n","\n","\n","def enlist_tr(res_df, config, np_timeidx):\n","\n","    strat_version = config.strat_version\n","\n","    res_df['entry_{}'.format(strat_version)] = np.zeros(len(res_df))\n","    res_df['h_entry_{}'.format(strat_version)] = np.zeros(len(res_df))\n","\n","    # -------- set ep level -------- #\n","\n","    #       limit ver.     #\n","    # res_df['short_ep_{}'.format(strat_version)] = res_df['h_short_rtc_1_{}'.format(strat_version)] + res_df['h_short_rtc_gap_{}'.format(strat_version)] * config.tr_set.ep_gap\n","    # res_df['long_ep_{}'.format(strat_version)] = res_df['h_long_rtc_1_{}'.format(strat_version)] - res_df['h_long_rtc_gap_{}'.format(strat_version)] * config.tr_set.ep_gap\n","\n","    res_df['short_ep_{}'.format(strat_version)] = res_df['close'] + res_df['h_short_rtc_gap_{}'.format(strat_version)] * config.tr_set.ep_gap\n","    res_df['long_ep_{}'.format(strat_version)] = res_df['close'] - res_df['h_long_rtc_gap_{}'.format(strat_version)] * config.tr_set.ep_gap\n","\n","\n","    if config.tr_set.c_ep_gap != \"None\":\n","        res_df['short_ep_org_{}'.format(strat_version)] = res_df['short_ep_{}'.format(strat_version)].copy()\n","        res_df['long_ep_org_{}'.format(strat_version)] = res_df['long_ep_{}'.format(strat_version)].copy()\n","\n","        res_df['short_ep2_{}'.format(strat_version)] = res_df['h_short_rtc_1_{}'.format(strat_version)] + res_df['h_short_rtc_gap_{}'.format(strat_version)] * config.tr_set.c_ep_gap\n","        res_df['long_ep2_{}'.format(strat_version)] = res_df['h_long_rtc_1_{}'.format(strat_version)] - res_df['h_long_rtc_gap_{}'.format(strat_version)] * config.tr_set.c_ep_gap\n","\n","    res_df['short_spread_ep_{}'.format(strat_version)] = res_df['bb_lower_5m'] #+ res_df['h_short_rtc_gap_{}'.format(strat_version)] * config.loc_set.zone.spread_ep_gap\n","    res_df['long_spread_ep_{}'.format(strat_version)] = res_df['bb_upper_5m']  #- res_df'h_long_rtc_gap_{}'.format(strat_version)] * config.loc_set.zone.spread_ep_gap\n","\n","    #       market ver.     #\n","    if config.ep_set.entry_type == \"MARKET\":\n","        res_df['short_ep_{}'.format(strat_version)] = res_df['close']\n","        res_df['long_ep_{}'.format(strat_version)] = res_df['close']\n","\n","    # ---------------------------------------- short = -1 ---------------------------------------- #\n","    # ---------------- ep_time  ---------------- #\n","\n","    rsi_upper = 50 + config.loc_set.point.osc_band\n","    rsi_lower = 50 - config.loc_set.point.osc_band\n","\n","    # res_df['rsi_%s_shift' % config.loc_set.point.exp_itv] = res_df['rsi_%s' % config.loc_set.point.exp_itv].shift(config.loc_set.point.tf_entry)\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['rsi_%s_shift' % config.loc_set.point.exp_itv] >= rsi_upper) &\n","    #                           (res_df['rsi_%s' % config.loc_set.point.exp_itv] < rsi_upper)\n","    #                           , res_df['entry_{}'.format(strat_version)] - 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # # res_df['entry_{}'.format(strat_version)] = np.where((res_df['entry_{}'.format(strat_version)] < 0) &\n","    # res_df['entry_{}'.format(strat_version)] = np.where((np_timeidx % config.loc_set.point.tf_entry == (config.loc_set.point.tf_entry - 1))\n","    #                           , res_df['entry_{}'.format(strat_version)] - 1, res_df['entry_{}'.format(strat_version)])\n","    \n","    res_df['h_entry_{}'.format(strat_version)] = np.where(  # (res_df['open'] >= res_df['bb_lower_%s' % config.loc_set.zone.dtk_itv]) &\n","        (res_df['close'].shift(config.loc_set.point.htf_entry * 1) >= res_df['bb_lower_%s' % config.loc_set.zone.dtk_itv]) &\n","        (res_df['close'] < res_df['bb_lower_%s' % config.loc_set.zone.dtk_itv]) &\n","        (np_timeidx % config.loc_set.point.htf_entry == (config.loc_set.point.htf_entry - 1))\n","        , res_df['h_entry_{}'.format(strat_version)] - 1, res_df['h_entry_{}'.format(strat_version)])\n","\n","    # ---------------------------------------- long = 1 ---------------------------------------- #\n","    # ---------------------- ep_time ---------------------- #\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['rsi_%s_shift' % config.loc_set.point.exp_itv] <= rsi_lower) &\n","    #                           (res_df['rsi_%s' % config.loc_set.point.exp_itv] > rsi_lower)\n","    #                           , res_df['entry_{}'.format(strat_version)] + 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['entry_{}'.format(strat_version)] > 0) &\n","    res_df['entry_{}'.format(strat_version)] = np.where((np_timeidx % config.loc_set.point.tf_entry == (config.loc_set.point.tf_entry - 1))\n","                              , res_df['entry_{}'.format(strat_version)] + 1, res_df['entry_{}'.format(strat_version)])\n","      \n","    res_df['h_entry_{}'.format(strat_version)] = np.where(  # (res_df['open'] <= res_df['bb_upper_%s' % config.loc_set.zone.dtk_itv]) &\n","        (res_df['close'].shift(config.loc_set.point.htf_entry * 1) <= res_df['bb_upper_%s' % config.loc_set.zone.dtk_itv]) &\n","        (res_df['close'] > res_df['bb_upper_%s' % config.loc_set.zone.dtk_itv]) &\n","        (np_timeidx % config.loc_set.point.htf_entry == (config.loc_set.point.htf_entry - 1))\n","        , res_df['h_entry_{}'.format(strat_version)] + 1, res_df['h_entry_{}'.format(strat_version)])\n","\n","    # ------------------------------ rtc tp & out ------------------------------ #\n","    # --------------- bb rtc out --------------- #\n","\n","    if config.loc_set.point.outg_dc_period != \"None\":\n","        res_df['short_rtc_0_{}'.format(strat_version)] = res_df['high'].rolling(config.loc_set.point.outg_dc_period).max()\n","        res_df['long_rtc_0_{}'.format(strat_version)] = res_df['low'].rolling(config.loc_set.point.outg_dc_period).min()\n","\n","    res_df['short_out_{}'.format(strat_version)] = res_df['short_rtc_0_{}'.format(strat_version)] + res_df['short_rtc_gap_{}'.format(strat_version)] * config.tr_set.out_gap\n","    res_df['long_out_{}'.format(strat_version)] = res_df['long_rtc_0_{}'.format(strat_version)] - res_df['long_rtc_gap_{}'.format(strat_version)] * config.tr_set.out_gap\n","\n","    if config.tr_set.t_out_gap != \"None\":\n","        res_df['short_out_org_{}'.format(strat_version)] = res_df['short_out_{}'.format(strat_version)].copy()\n","        res_df['long_out_org_{}'.format(strat_version)] = res_df['long_out_{}'.format(strat_version)].copy()\n","\n","        res_df['short_out2_{}'.format(strat_version)] = res_df['short_rtc_0_{}'.format(strat_version)] + res_df['short_rtc_gap_{}'.format(strat_version)] * config.tr_set.t_out_gap\n","        res_df['long_out2_{}'.format(strat_version)] = res_df['long_rtc_0_{}'.format(strat_version)] - res_df['long_rtc_gap_{}'.format(strat_version)] * config.tr_set.t_out_gap\n","\n","    # ------------------------------ tp ------------------------------ #\n","    # --------------- bb rtc tp --------------- #\n","    res_df['short_tp_{}'.format(strat_version)] = res_df['h_short_rtc_1_{}'.format(strat_version)] - res_df['h_short_rtc_gap_{}'.format(strat_version)] * config.tr_set.tp_gap\n","    res_df['long_tp_{}'.format(strat_version)] = res_df['h_long_rtc_1_{}'.format(strat_version)] + res_df['h_long_rtc_gap_{}'.format(strat_version)] * config.tr_set.tp_gap\n","\n","    # --------------- set tp_line / dtk_line --------------- #\n","    # res_df['short_tp_1_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == -1, res_df['short_rtc_1_{}'.format(strat_version)], np.nan)\n","    # res_df['short_tp_1_{}'.format(strat_version)] = ffill(res_df['short_tp_1_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","    # res_df['short_tp_gap_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == -1, res_df['h_short_rtc_gap_{}'.format(strat_version)], np.nan)  # ltf_gap ÏùÄ out ÏùÑ ÏúÑÌïú gap ÏûÑ\n","    # res_df['short_tp_gap_{}'.format(strat_version)] = ffill(res_df['short_tp_gap_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","\n","    # res_df['long_tp_1_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == 1, res_df['long_rtc_1_{}'.format(strat_version)], np.nan)\n","    # res_df['long_tp_1_{}'.format(strat_version)] = ffill(res_df['long_tp_1_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","    # res_df['long_tp_gap_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == 1, res_df['h_long_rtc_gap_{}'.format(strat_version)], np.nan)\n","    # res_df['long_tp_gap_{}'.format(strat_version)] = ffill(res_df['long_tp_gap_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","\n","    # res_df['h_short_tp_1_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == -1, res_df['h_short_rtc_1_{}'.format(strat_version)], np.nan)\n","    # res_df['h_short_tp_1_{}'.format(strat_version)] = ffill(res_df['h_short_tp_1_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","    # res_df['h_short_tp_gap_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == -1, res_df['h_short_rtc_gap_{}'.format(strat_version)], np.nan)\n","    # res_df['h_short_tp_gap_{}'.format(strat_version)] = ffill(res_df['h_short_tp_gap_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","\n","    # res_df['h_long_tp_1_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == 1, res_df['h_long_rtc_1_{}'.format(strat_version)], np.nan)\n","    # res_df['h_long_tp_1_{}'.format(strat_version)] = ffill(res_df['h_long_tp_1_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","    # res_df['h_long_tp_gap_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == 1, res_df['h_long_rtc_gap_{}'.format(strat_version)], np.nan)\n","    # res_df['h_long_tp_gap_{}'.format(strat_version)] = ffill(res_df['h_long_tp_gap_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","   \n","\n","    if config.loc_set.zone.use_dtk_line:\n","      res_df['short_dtk_1_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == -1, res_df['short_dtk_1_{}'.format(strat_version)], np.nan)\n","      res_df['short_dtk_1_{}'.format(strat_version)] = ffill(res_df['short_dtk_1_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","      res_df['short_dtk_gap_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == -1, res_df['short_dtk_gap_{}'.format(strat_version)], np.nan)\n","      res_df['short_dtk_gap_{}'.format(strat_version)] = ffill(res_df['short_dtk_gap_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","\n","      res_df['long_dtk_1_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == 1, res_df['long_dtk_1_{}'.format(strat_version)], np.nan)\n","      res_df['long_dtk_1_{}'.format(strat_version)] = ffill(res_df['long_dtk_1_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","      res_df['long_dtk_gap_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == 1, res_df['long_dtk_gap_{}'.format(strat_version)], np.nan)\n","      res_df['long_dtk_gap_{}'.format(strat_version)] = ffill(res_df['long_dtk_gap_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","\n","    res_df['dc_upper_v2_{}'.format(strat_version)] = res_df['high'].rolling(config.loc_set.zone.dc_period).max()\n","    res_df['dc_lower_v2_{}'.format(strat_version)] = res_df['low'].rolling(config.loc_set.zone.dc_period).min()\n","    \n","    res_df['zone_dc_upper_v2_{}'.format(strat_version)] = res_df['high'].rolling(config.loc_set.zone.zone_dc_period).max()\n","    res_df['zone_dc_lower_v2_{}'.format(strat_version)] = res_df['low'].rolling(config.loc_set.zone.zone_dc_period).min()\n","\n","    return res_df\n"]},{"cell_type":"markdown","metadata":{"id":"o5psPOVOCA1c"},"source":["###### utils_ override"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5q1V5vTjQszK"},"outputs":[],"source":["enlist_rtc = utils2.enlist_rtc\n","# enlist_rtc = enlist_rtc\n","enlist_tr = utils2.enlist_tr"]},{"cell_type":"markdown","metadata":{"id":"HKdUKKl-483N"},"source":["###### utils_public"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nzOYWA2kqZ0d"},"outputs":[],"source":["sys_log3 = logging.getLogger()\n","\n","\n","class OrderSide:\n","    BUY = \"BUY\"\n","    SELL = \"SELL\"\n","    INVALID = None\n","\n","\n","def lvrg_set(res_df, config, open_side, ep_, out_, fee, limit_leverage=50):\n","\n","    strat_version = config.strat_version\n","\n","    if open_side == OrderSide.SELL:\n","\n","        if strat_version in [\"v3\"]:\n","            # config.lvrg_set.leverage = config.lvrg_set.target_pct / (out_ / ep_ - 1 - (fee + config.trader_set.market_fee))\n","            config.lvrg_set.leverage = config.lvrg_set.target_pct / (\n","                        out_ / ep_ - 1 - (fee + config.trader_set.market_fee))\n","\n","            #     zone Ïóê Îî∞Î•∏ c_ep_gap Î•º Í≥†Î†§ (loss ÏôÑÌôî Î∞©Ìñ•) / Ïúó Ï§ÑÏùÄ ÏàòÏùµ Í∑πÎåÄÌôî Î∞©Ìñ•\n","            # config.lvrg_set.leverage = config.lvrg_set.target_pct / (out_ / res_df['short_ep_org'].iloc[ep_j] - 1 - (fee + config.trader_set.market_fee))\n","\n","        elif strat_version in ['v5_2', 'v7_3']:\n","            # config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(ep_ / out_ - 1 - (fee + config.trader_set.market_fee))\n","            config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(\n","                ep_ / out_ - 1 - (fee + config.trader_set.market_fee))\n","            # config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(res_df['short_ep_org'].iloc[ep_j] / out_ - 1 - (fee + config.trader_set.market_fee))\n","\n","    else:\n","        #   Ïúó phase Îäî min_pr Ïùò Ïò§Ï∞®Í∞Ä Ïª§Ïßê\n","        if strat_version in [\"v3\"]:\n","            # config.lvrg_set.leverage = config.lvrg_set.target_pct / (ep_ / out_ - 1 - (fee + config.trader_set.market_fee))\n","            config.lvrg_set.leverage = config.lvrg_set.target_pct / (\n","                        ep_ / out_ - 1 - (fee + config.trader_set.market_fee))\n","            # config.lvrg_set.leverage = config.lvrg_set.target_pct / (res_df['long_ep_org'].iloc[ep_j] / out_ - 1 - (fee + config.trader_set.market_fee))\n","\n","        elif strat_version in ['v5_2', 'v7_3']:\n","            # config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(out_ / ep_ - 1 - (fee + config.trader_set.market_fee))\n","            config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(\n","                out_ / ep_ - 1 - (fee + config.trader_set.market_fee))\n","            # config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(out_ / res_df['long_ep_org'].iloc[ep_j] - 1 - (fee + config.trader_set.market_fee))\n","\n","    if not config.lvrg_set.allow_float:\n","        config.lvrg_set.leverage = int(config.lvrg_set.leverage)\n","\n","    # -------------- leverage rejection -------------- #\n","    if config.lvrg_set.leverage < 1 and config.lvrg_set.lvrg_rejection:\n","        return None\n","\n","    config.lvrg_set.leverage = max(config.lvrg_set.leverage, 1)\n","\n","    config.lvrg_set.leverage = min(limit_leverage, config.lvrg_set.leverage)\n","\n","    return config.lvrg_set.leverage\n","\n","\n","def sync_check(res_df_list, order_side=\"OPEN\"):\n","\n","    df, third_df, fourth_df = res_df_list\n","\n","    #       add indi. only      #\n","\n","    #       Todo : manual        #\n","    #        1. ÌïÑÏöîÌïú indi. Îäî enlist_epouttp & mr_check Î≥¥Î©¥ÏÑú ÏÇΩÏûÖ\n","    #        2. htf use_rows Îäî 1m use_rows Ïùò Í∏∏Ïù¥Î•º ÎßåÏ°±ÏãúÌÇ¨ Ïàò ÏûàÎäî Ï†ïÎèÑ\n","    #         a. 1m use_rows / htf_interval ÌïòÎ©¥ ÎåÄÎûµ ÎÇòÏò¥\n","    #         b. ÎòêÌïú, htf indi. Î•º ÏÉùÏÑ±ÌïòÍ∏∞ ÏúÑÌï¥ ÌïÑÏöîÌïú ÏµúÏÜå row Ïù¥ÏÉÅ\n","    df = dc_line(df, None, '1m', dc_period=20)\n","    df = bb_line(df, None, '1m')\n","    df = bb_line(df, third_df, '5m')\n","    df = dc_line(df, third_df, '5m')\n","    df = bb_line(df, fourth_df, '15m')\n","    df = dc_line(df, fourth_df, '15m')\n","\n","    df['rsi_1m'] = rsi(df, 14)\n","\n","    if order_side in [\"OPEN\"]:\n","\n","        third_df['ema_5m'] = ema(third_df['close'], 200)\n","        df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-1]), columns=['ema_5m']))\n","\n","    return df\n","\n","\n","def public_indi(res_df, order_side=\"OPEN\"):\n","\n","    res_df = bb_level(res_df, '5m', 1)\n","    res_df = dc_level(res_df, '5m', 1)\n","    res_df = bb_level(res_df, '15m', 1)\n","    res_df = dc_level(res_df, '15m', 1)\n","    # res_df = bb_level(res_df, '30m', 1)\n","    # res_df = dc_level(res_df, '30m', 1)\n","    res_df = dc_level(res_df, '1h', 1)\n","\n","    if order_side in [\"OPEN\"]:\n","\n","        res_df[\"candle_ratio\"], _ = candle_ratio(res_df)\n","\n","        start_0 = time.time()\n","\n","        h_c_intv1 = 15\n","        h_c_intv2 = 60\n","        res_df = h_candle(res_df, h_c_intv1)\n","        res_df = h_candle(res_df, h_c_intv2)\n","        h_candle_col = ['hopen_{}'.format(h_c_intv2), 'hhigh_{}'.format(h_c_intv2), 'hlow_{}'.format(h_c_intv2), 'hclose_{}'.format(h_c_intv2)]\n","\n","        res_df['h_candle_ratio'], _ = candle_ratio(res_df, ohlc_col=h_candle_col, unsigned=0)\n","\n","        # sys_log3.warning(\"~ h_candle_ratio elapsed time : {}\".format(time.time() - start_0))\n","\n","    #     temp indi.    #\n","    # res_df[\"ma30_1m\"] = res_df['close'].rolling(30).mean()\n","    # res_df[\"ma60_1m\"] = res_df['close'].rolling(60).mean()\n","    # res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line)\n","\n","    return res_df\n","\n","\n","def short_ep_loc(res_df, config, i, np_timeidx, show_detail=True):\n","\n","    strat_version = config.strat_version\n","\n","    # ------- param init ------- #\n","    open_side = None\n","\n","    mr_const_cnt = 0\n","    mr_score = 0\n","    zone = 'n'\n","\n","    if config.ep_set.entry_type == 'MARKET':\n","        if config.tp_set.tp_type != 'MARKET':\n","            tp_fee = config.trader_set.market_fee + config.trader_set.limit_fee\n","        else:\n","            tp_fee = config.trader_set.market_fee + config.trader_set.market_fee\n","        out_fee = config.trader_set.market_fee + config.trader_set.market_fee\n","    else:\n","        if config.tp_set.tp_type != 'MARKET':\n","            tp_fee = config.trader_set.limit_fee + config.trader_set.limit_fee\n","        else:\n","            tp_fee = config.trader_set.limit_fee + config.trader_set.market_fee\n","        out_fee = config.trader_set.limit_fee + config.trader_set.market_fee\n","\n","\n","    # -------------- candle_ratio -------------- #\n","    # if config.loc_set.zone.c_itv_ticks != \"None\":\n","    if config.loc_set.point.candle_ratio != \"None\":\n","\n","      # -------------- candle_ratio_v0 (1m initial tick Í∏∞Ï§ÄÏûÑ)  -------------- #\n","      if strat_version in ['v5_2']:\n","        mr_const_cnt += 1\n","        candle_ratio_ = res_df['candle_ratio'].iloc[i]\n","        if candle_ratio_ >= config.loc_set.point.candle_ratio:\n","          mr_score += 1\n","\n","        if show_detail:\n","          sys_log3.warning(\"candle_ratio_ : {}\".format(candle_ratio_))\n","\n","      # -------------- candle_ratio_v1 (previous)  -------------- #\n","      if strat_version in ['v7_3']:\n","        mr_const_cnt += 1\n","        prev_hclose_idx = i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)\n","\n","        if prev_hclose_idx >= 0:\n","          h_candle_ratio_ = res_df['h_candle_ratio'].iloc[prev_hclose_idx]\n","          if h_candle_ratio_ <= -config.loc_set.point.candle_ratio:\n","              mr_score += 1\n","\n","          if show_detail:\n","              sys_log3.warning(\"h_candle_ratio_ : {}\".format(h_candle_ratio_))\n","\n","    if config.loc_set.point.candle_ratio2 != \"None\":\n","\n","        #     candle_ratio_v2 (current)     #\n","      mr_const_cnt += 1\n","      prev_hclose_idx = i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)\n","\n","      if prev_hclose_idx >= -1:\n","        hc_res_df = res_df.iloc[prev_hclose_idx + 1:i + 1].copy()\n","        ho = hc_res_df['open'].iloc[0]\n","        hh = hc_res_df['high'].max()\n","        hl = hc_res_df['low'].min()\n","        hc = hc_res_df['close'].iloc[-1]\n","\n","        if strat_version in ['1_3']:\n","          score, body_score = candle_score(ho, hh, hl, hc, updown=None, unsigned=False)\n","        else:\n","          score, body_score = candle_score(ho, hh, hl, ho, updown=None, unsigned=False)\n","\n","        if score <= -config.loc_set.point.candle_ratio2:\n","          mr_score += 1\n","\n","        if show_detail:\n","          sys_log3.warning(\"candle_ratio2 : {}\".format(score))\n","\n","        if config.loc_set.point.body_ratio2 != \"None\":\n","          mr_const_cnt += 1\n","          if ho > hc and body_score >= config.loc_set.point.body_ratio2:\n","            mr_score += 1\n","\n","          if show_detail:\n","            sys_log3.warning(\"body_ratio2 : {}\".format(body_score))\n","        \n","    \n","    # # -------------- tr scheduling -------------- #\n","    # if config.loc_set.zone.tr_thresh != \"None\":\n","\n","    #   mr_const_cnt += 1\n","    #   tr = ((done_tp - ep_list[0] - tp_fee * ep_list[0]) / (ep_list[0] - done_out + out_fee * ep_list[0]))\n","\n","    # -------------- spread scheduling -------------- #\n","    if config.loc_set.zone.short_spread != \"None\":\n","\n","        mr_const_cnt += 1\n","\n","        spread = (res_df['bb_base_5m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] - tp_fee * res_df['bb_base_5m'].iloc[\n","            # spread = (res_df['bb_base_5m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] - out_fee * res_df['bb_base_5m'].iloc[\n","            # i]) / (res_df['bb_base_5m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] + tp_fee *\n","            i]) / (res_df['bb_base_5m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] + out_fee *\n","                  res_df['bb_base_5m'].iloc[i])\n","        # spread = (res_df['bb_base_15m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] - tp_fee * res_df['bb_base_15m'].iloc[\n","        #     i]) / (res_df['bb_base_15m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] + out_fee *\n","        #             res_df['bb_base_15m'].iloc[i])\n","\n","        # spread = (res_df['dc_upper_5m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] - tp_fee * res_df['bb_lower_5m'].iloc[\n","        #     i]) / (res_df['dc_upper_5m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] + out_fee *\n","        #             res_df['bb_lower_5m'].iloc[i])\n","        # spread = (res_df['short_rtc_gap'].iloc[i] * (0.443) - tp_fee * res_df['short_ep'].iloc[\n","        #     i]) / (res_df['short_rtc_gap'].iloc[i] * (0.417) + out_fee * res_df['short_ep'].iloc[i])\n","\n","        # spread = (res_df['dc_upper_15m'].iloc[i] - res_df['dc_lower_5m'].iloc[i] - tp_fee * res_df['dc_lower_5m'].iloc[\n","        #     i]) / (res_df['dc_upper_15m'].iloc[i] - res_df['dc_lower_5m'].iloc[i] + out_fee *\n","        #             res_df['dc_lower_5m'].iloc[i])\n","        # spread = ((res_df['dc_upper_15m'].iloc[i] - res_df['dc_lower_5m'].iloc[i])/2 - tp_fee * res_df['dc_lower_5m'].iloc[\n","        #     i]) / ((res_df['dc_upper_15m'].iloc[i] - res_df['dc_lower_5m'].iloc[i])/2 + out_fee *\n","        #             res_df['dc_lower_5m'].iloc[i])\n","\n","        if spread >= config.loc_set.zone.short_spread:\n","            mr_score += 1\n","\n","        if show_detail:\n","            sys_log3.warning(\"spread : {}\".format(spread))\n","\n","    # -------------- dtk -------------- #\n","    if config.loc_set.zone.dt_k != \"None\":\n","\n","        mr_const_cnt += 1\n","        # if res_df['dc_lower_%s' % config.loc_set.zone.dtk_dc_itv].iloc[i] >= res_df['short_rtc_1'].iloc[i] - res_df['h_short_rtc_gap'].iloc[i] * config.loc_set.zone.dt_k:\n","        #     dtk_v1 & v2 platform     #\n","        if config.loc_set.zone.dtk_dc_itv != \"None\":\n","            dc = res_df['dc_lower_%s' % config.loc_set.zone.dtk_dc_itv].iloc[i]\n","            dt_k = res_df['short_dtk_1_{}'.format(strat_version)].iloc[i] - \\\n","                  res_df['short_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k\n","            if dc >= dt_k:\n","                mr_score += 1\n","\n","                #     dc_v2   #\n","        else:\n","            dc = res_df['dc_lower_v2_{}'.format(strat_version)].iloc[i]\n","            dt_k = res_df['short_dtk_1_{}'.format(strat_version)].iloc[i] - \\\n","                  res_df['short_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k\n","            if dc >= dt_k:\n","                # if res_df['dc_lower_v2_{}'.format(strat_version)].iloc[i] >= res_df['short_dtk_1_{}'.format(strat_version)].iloc[i] - res_df['short_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k and \\\n","                # res_df['dc_upper_v2_{}'.format(strat_version)].iloc[i] <= res_df['long_dtk_1_{}'.format(strat_version)].iloc[i] + res_df['long_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k:\n","                mr_score += 1\n","\n","        if show_detail:\n","            sys_log3.warning(\"dc : {}\".format(dc))\n","            sys_log3.warning(\"dt_k : {}\".format(dt_k))\n","            \n","      # -------------- candle_dt_k -------------- #\n","    # mr_const_cnt += 1\n","    # # if res_df['dc_lower_1m'].iloc[i] >= res_df['hclose_60'].iloc[i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)]:\n","    # if res_df['dc_lower_1m'].iloc[i] >= res_df['hlow_60'].iloc[i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)]:\n","    #   mr_score += 1        \n","\n","    # mr_const_cnt += 1\n","    # if res_df['dc_upper_1m'].iloc[i] <= res_df['hhigh_60'].iloc[i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)]:\n","    # # if res_df['dc_upper_1m'].iloc[i] <= res_df['hopen_60'].iloc[i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)]:\n","    #   mr_score += 1  \n","\n","\n","    # -------------- zone rejection  -------------- #\n","    if config.loc_set.zone.zone_rejection:\n","\n","        #       config Î°ú ÌÜµÏ†úÌï† Ïàò ÏóÜÎäî rejection ÏùÄ strat_version ÏúºÎ°ú Ï°∞Í±¥Î¨∏ÏùÑ ÎÇòÎàî (lvrg_set Í≥º ÎèôÏùº)\n","\n","        # --------- by bb --------- # \n","\n","          #     bb & close   #\n","        if strat_version in ['v5_2']:\n","          mr_const_cnt += 1\n","          # if res_df['close'].iloc[i] < res_df['bb_lower_%s' % config.loc_set.zone.bbz_itv].iloc[i]:   # org\n","          # if res_df['close'].iloc[i] > res_df['bb_lower_%s' % config.loc_set.zone.bbz_itv].iloc[i]:  # inv\n","          # if res_df['close'].iloc[i] > res_df['bb_upper_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","          if res_df['close'].iloc[i] > res_df['bb_upper2_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","          # if res_df['close'].iloc[i] > res_df['bb_upper3_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","              mr_score += 1\n","\n","              if show_detail:\n","                sys_log3.warning(\"bb & close passed\")\n","\n","          #     bb & bb   #           \n","        if strat_version in ['v7_3']:\n","\n","          mr_const_cnt += 1\n","          if res_df['bb_upper_5m'].iloc[i] < res_df['bb_base_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","          # if res_df['bb_upper_1m'].iloc[i] < res_df['bb_lower_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","            mr_score += 1\n","\n","            if show_detail:\n","                sys_log3.warning(\"bb & bb passed\")\n","\n","            #     bb & ep   #\n","          mr_const_cnt += 1\n","          # if res_df['short_ep_{}'.format(strat_version)].iloc[i] < res_df['bb_base_15m'].iloc[i]:\n","          # if res_df['short_ep_{}'.format(strat_version)].iloc[i] < res_df['bb_base_15m'].iloc[i] + res_df['bb_gap_15m'].iloc[i]:\n","          # if res_df['short_ep_{}'.format(strat_version)].iloc[i] < res_df['bb_base_5m'].iloc[i]:\n","          if res_df['short_ep_{}'.format(strat_version)].iloc[i] < res_df['bb_upper_5m'].iloc[i]:\n","              mr_score += 1\n","\n","              if show_detail:\n","                sys_log3.warning(\"bb & ep passed\")\n","\n","            #     bb & dc   #\n","          # if res_df['bb_base_%s' % config.loc_set.zone.bbz_itv].iloc[i] <= res_df['dc_upper_1m'].iloc[i] <= res_df['bb_upper_%s' % config.loc_set.zone.bbz_itv].iloc[i]:          \n","          prev_hopen_idx = i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1 + config.loc_set.zone.c_itv_ticks) + config.loc_set.zone.ad_idx\n","\n","          if prev_hopen_idx >= 0:\n","\n","            mr_const_cnt += 1\n","            # if res_df['dc_upper_5m'].iloc[prev_hopen_idx] < res_df['bb_upper_15m'].iloc[i]:\n","            if res_df['dc_upper_5m'].iloc[prev_hopen_idx] < res_df['bb_upper_15m'].iloc[prev_hopen_idx]:\n","              mr_score += 1\n","\n","              if show_detail:\n","                  sys_log3.warning(\"bb & dc passed\")\n","\n","          # --------- by ema --------- # \n","\n","          #    bb & ema   #\n","        if strat_version in ['v7_3']:\n","          mr_const_cnt += 1\n","          # if res_df['bb_upper_15m'].iloc[i] < res_df['ema_5m'].iloc[i]:\n","          if res_df['dc_upper_5m'].iloc[i] < res_df['ema_5m'].iloc[i]:\n","            mr_score += 1\n","\n","            if show_detail:\n","                sys_log3.warning(\"bb & ema passed\")\n","\n","          #    close & ema   #\n","        if strat_version in ['v5_2']:\n","          mr_const_cnt += 1\n","          # if res_df['short_ep'].iloc[i] < res_df['ema_5m'].iloc[i]:\n","          if res_df['close'].iloc[i] < res_df['ema_5m'].iloc[i]:\n","              mr_score += 1\n","\n","              if show_detail:\n","                sys_log3.warning(\"close & ema passed\")\n","\n","\n","        # --------- by dc --------- # \n","        \n","          #     descending dc    #\n","        # mr_const_cnt += 1\n","        # if res_df['dc_lower_5m'].iloc[i] <= res_df['dc_lower_5m'].iloc[i - 50 : i].min():\n","        #   mr_score += 1\n","\n","        # --------- by candle --------- #\n","        # if strat_version in ['2_2']:\n","\n","        #   prev_hclose_idx = i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)\n","        #   if prev_hclose_idx >= 0:\n","        #     mr_const_cnt += 1\n","        #     # if res_df['short_ep_{}'.format(strat_version)].iloc[i] <= res_df['hclose_60'].iloc[prev_hclose_idx)]:\n","        #     if res_df['short_ep_{}'.format(strat_version)].iloc[i] <= res_df['hclose_60'].iloc[prev_hclose_idx]:\n","        #         mr_score += 1\n","\n","        # --------- by macd --------- #\n","        # mr_const_cnt += 1\n","        # if res_df['ma30_1m'].iloc[i] < res_df['ma60_1m'].iloc[i]:\n","        #     mr_score += 1\n","\n","\n","        # --------- by zone_dtk --------- #\n","        # mr_const_cnt += 1\n","        # if res_df['zone_dc_upper_v2_{}'.format(strat_version)].iloc[i] < res_df['long_dtk_plot_1'].iloc[i] + res_df['long_dtk_plot_gap'].iloc[\n","        #     i] * config.loc_set.zone.zone_dt_k:\n","        #   mr_score += 1\n","\n","    # -------------- zoned tr_set - post_Work -------------- #\n","    if config.tr_set.c_ep_gap != \"None\":\n","\n","        #       by bb       # \n","        # if res_df['close'].iloc[i] > res_df['bb_lower_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","\n","        #       by zone_dtk       #\n","\n","        #         c_zone        #\n","        if res_df['zone_dc_upper_v2_{}'.format(strat_version)].iloc[i] > res_df['long_dtk_plot_1'].iloc[i] + \\\n","                res_df['long_dtk_plot_gap'].iloc[\n","                    i] * config.loc_set.zone.zone_dt_k:\n","\n","            if config.ep_set.static_ep:\n","                res_df['short_ep_{}'.format(strat_version)].iloc[i] = res_df['short_ep2_{}'.format(strat_version)].iloc[\n","                    i]\n","            else:\n","                res_df['short_ep_{}'.format(strat_version)] = res_df['short_ep2_{}'.format(strat_version)]\n","\n","            if config.out_set.static_out:\n","                res_df['short_out_{}'.format(strat_version)].iloc[i] = \\\n","                res_df['short_out_org_{}'.format(strat_version)].iloc[i]\n","            else:\n","                res_df['short_out_{}'.format(strat_version)] = res_df['short_out_org_{}'.format(strat_version)]\n","\n","            zone = 'c'\n","\n","        #         t_zone        #\n","        else:\n","\n","            # mr_const_cnt += 1   # zone_rejection - temporary\n","\n","            if config.ep_set.static_ep:\n","                res_df['short_ep_{}'.format(strat_version)].iloc[i] = \\\n","                res_df['short_ep_org_{}'.format(strat_version)].iloc[i]\n","            else:\n","                res_df['short_ep_{}'.format(strat_version)] = res_df['short_ep_org_{}'.format(strat_version)]\n","\n","            if config.out_set.static_out:\n","                res_df['short_out_{}'.format(strat_version)].iloc[i] = \\\n","                res_df['short_out2_{}'.format(strat_version)].iloc[i]\n","            else:\n","                res_df['short_out_{}'.format(strat_version)] = res_df['short_out2_{}'.format(strat_version)]\n","\n","            zone = 't'\n","\n","    if mr_const_cnt == mr_score:\n","        open_side = OrderSide.SELL\n","\n","    return res_df, open_side, zone\n","\n","\n","def long_ep_loc(res_df, config, i, np_timeidx, show_detail=True):\n","\n","    strat_version = config.strat_version\n","\n","    # ------- param init ------- #\n","    open_side = None\n","\n","    mr_const_cnt = 0\n","    mr_score = 0\n","    zone = 'n'\n","\n","    if config.ep_set.entry_type == 'MARKET':\n","        if config.tp_set.tp_type != 'MARKET':\n","            tp_fee = config.trader_set.market_fee + config.trader_set.limit_fee\n","        else:\n","            tp_fee = config.trader_set.market_fee + config.trader_set.market_fee\n","        out_fee = config.trader_set.market_fee + config.trader_set.market_fee\n","    else:\n","        if config.tp_set.tp_type != 'MARKET':\n","            tp_fee = config.trader_set.limit_fee + config.trader_set.limit_fee\n","        else:\n","            tp_fee = config.trader_set.limit_fee + config.trader_set.market_fee\n","        out_fee = config.trader_set.limit_fee + config.trader_set.market_fee\n","\n","\n","    # -------------- candle_ratio -------------- #\n","    # if config.loc_set.zone.c_itv_ticks != \"None\":\n","    if config.loc_set.point.candle_ratio != \"None\":\n","\n","      # -------------- candle_ratio_v0 (1m initial tick Í∏∞Ï§ÄÏûÑ)  -------------- #\n","      if strat_version in ['v5_2']:\n","        mr_const_cnt += 1\n","        candle_ratio_ = res_df['candle_ratio'].iloc[i]\n","        if candle_ratio_ >= config.loc_set.point.candle_ratio:\n","          mr_score += 1\n","\n","        if show_detail:\n","            sys_log3.warning(\"candle_ratio_ : {}\".format(candle_ratio_))\n","\n","      # -------------- candle_ratio_v1 (previous)  -------------- #\n","      if strat_version in ['v7_3']:\n","        mr_const_cnt += 1\n","        prev_hclose_idx = i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)\n","        \n","        if prev_hclose_idx >= 0:\n","          h_candle_ratio_ = res_df['h_candle_ratio'].iloc[prev_hclose_idx]\n","          if h_candle_ratio_ >= config.loc_set.point.candle_ratio:\n","            mr_score += 1\n","\n","            if show_detail:\n","              sys_log3.warning(\"h_candle_ratio_ : {}\".format(h_candle_ratio_))\n","\n","    if config.loc_set.point.candle_ratio2 != \"None\":\n","\n","      #     candle_ratio_v2 (current)     #\n","      mr_const_cnt += 1\n","      prev_hclose_idx = i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)\n","\n","      if prev_hclose_idx >= -1:\n","        hc_res_df = res_df.iloc[prev_hclose_idx + 1:i + 1].copy()\n","        ho = hc_res_df['open'].iloc[0]\n","        hc = hc_res_df['close'].iloc[-1]\n","        hh = hc_res_df['high'].max()\n","        hl = hc_res_df['low'].min()\n","\n","        if strat_version in ['1_3']:\n","          score, body_score = candle_score(ho, hh, hl, hc, updown=None, unsigned=False)\n","        else:\n","          score, body_score = candle_score(ho, hh, hl, ho, updown=None, unsigned=False)\n","\n","        if score >= config.loc_set.point.candle_ratio2:\n","          mr_score += 1\n","\n","          if show_detail:\n","            sys_log3.warning(\"candle_ratio_v2 : {}\".format(score))\n","\n","        # print(\"candle_ratio2 passed !\")\n","\n","        if config.loc_set.point.body_ratio2 != \"None\":\n","          mr_const_cnt += 1\n","          if ho < hc and body_score >= config.loc_set.point.body_ratio2:\n","            mr_score += 1\n","\n","          if show_detail:\n","            sys_log3.warning(\"body_ratio2 : {}\".format(body_score))\n","    \n","    # -------------- spread scheduling -------------- #\n","    if config.loc_set.zone.long_spread != \"None\":\n","\n","        mr_const_cnt += 1\n","\n","        # spread = (res_df['bb_upper_5m'].iloc[i] - res_df['bb_base_5m'].iloc[i] - tp_fee * res_df['bb_base_5m'].iloc[\n","        #     i]) / (res_df['bb_base_5m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] + out_fee *\n","        #             res_df['bb_base_5m'].iloc[i])\n","        # spread = (res_df['bb_upper_5m'].iloc[i] - res_df['bb_base_15m'].iloc[i] - tp_fee * res_df['bb_base_15m'].iloc[\n","        #     i]) / (res_df['bb_upper_5m'].iloc[i] - res_df['bb_base_15m'].iloc[i] + out_fee *\n","        #             res_df['bb_base_15m'].iloc[i])\n","\n","        spread = (res_df['bb_upper_5m'].iloc[i] - res_df['dc_lower_5m'].iloc[i] - tp_fee * res_df['bb_upper_5m'].iloc[\n","            # spread = (res_df['bb_upper_5m'].iloc[i] - res_df['dc_lower_5m'].iloc[i] - out_fee * res_df['bb_upper_5m'].iloc[\n","            # i]) / (res_df['bb_upper_5m'].iloc[i] - res_df['dc_lower_5m'].iloc[i] + tp_fee *\n","            i]) / (res_df['bb_upper_5m'].iloc[i] - res_df['dc_lower_5m'].iloc[i] + out_fee *\n","                  res_df['bb_upper_5m'].iloc[i])\n","        # spread = (res_df['long_rtc_gap'].iloc[i] * (0.443) - tp_fee * res_df['long_ep'].iloc[\n","        #     i]) / (res_df['long_rtc_gap'].iloc[i] * (0.417) + out_fee * res_df['long_ep'].iloc[i])\n","\n","        # spread = (res_df['dc_upper_5m'].iloc[i] - res_df['dc_lower_15m'].iloc[i] - tp_fee * res_df['dc_upper_5m'].iloc[\n","        #     i]) / (res_df['dc_upper_5m'].iloc[i] - res_df['dc_lower_15m'].iloc[i] + out_fee *\n","        #             res_df['dc_upper_5m'].iloc[i])\n","        # spread = ((res_df['dc_upper_5m'].iloc[i] - res_df['dc_lower_15m'].iloc[i])/2 - tp_fee * res_df['dc_upper_5m'].iloc[\n","        #     i]) / ((res_df['dc_upper_5m'].iloc[i] - res_df['dc_lower_15m'].iloc[i])/2 + out_fee *\n","        #             res_df['dc_upper_5m'].iloc[i])\n","\n","        if spread >= config.loc_set.zone.long_spread:\n","            mr_score += 1\n","\n","        if show_detail:\n","            sys_log3.warning(\"spread : {}\".format(spread))\n","\n","    # -------------- dtk -------------- #\n","    if config.loc_set.zone.dt_k != \"None\":\n","\n","        mr_const_cnt += 1\n","        # if res_df['dc_upper_%s' % config.loc_set.zone.dtk_dc_itv].iloc[i] <= res_df['long_rtc_1'].iloc[i] + res_df['long_rtc_gap'].iloc[i] * config.loc_set.zone.dt_k:\n","        #     dtk_v1 & v2 platform    #\n","        if config.loc_set.zone.dtk_dc_itv != \"None\":\n","            dc = res_df['dc_upper_%s' % config.loc_set.zone.dtk_dc_itv].iloc[i]\n","            dt_k = res_df['long_dtk_1_{}'.format(strat_version)].iloc[i] + \\\n","                  res_df['long_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k\n","            if dc <= dt_k:\n","                mr_score += 1\n","\n","        else:\n","            #     dc_v2     #\n","            dc = res_df['dc_upper_v2_{}'.format(strat_version)].iloc[i]\n","            dt_k = res_df['long_dtk_1_{}'.format(strat_version)].iloc[i] + \\\n","                  res_df['long_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k\n","            if dc <= dt_k:\n","                # if res_df['dc_upper_v2_{}'.format(strat_version)].iloc[i] >= res_df['long_dtk_1_{}'.format(strat_version)].iloc[i] + res_df['long_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k:\n","\n","                # if res_df['dc_upper_v2_{}'.format(strat_version)].iloc[i] <= res_df['long_dtk_1_{}'.format(strat_version)].iloc[i] + res_df['long_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k and \\\n","                #   res_df['dc_lower_v2_{}'.format(strat_version)].iloc[i] >= res_df['short_dtk_1_{}'.format(strat_version)].iloc[i] - res_df['short_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k:\n","\n","                mr_score += 1\n","\n","        if show_detail:\n","            sys_log3.warning(\"dc : {}\".format(dc))\n","            sys_log3.warning(\"dt_k : {}\".format(dt_k))\n","\n","      # -------------- candle_dt_k -------------- #\n","    # mr_const_cnt += 1\n","    # # if res_df['dc_upper_1m'].iloc[i] <= res_df['hclose_60'].iloc[i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)]:\n","    # if res_df['dc_upper_1m'].iloc[i] <= res_df['hhigh_60'].iloc[i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)]:\n","    #   mr_score += 1  \n","\n","    # mr_const_cnt += 1\n","    # if res_df['dc_lower_1m'].iloc[i] >= res_df['hlow_60'].iloc[i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)]:\n","    # # if res_df['dc_lower_1m'].iloc[i] >= res_df['hopen_60'].iloc[i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)]:\n","    #   mr_score += 1  \n","\n","    # -------------- zone rejection  -------------- #\n","    if config.loc_set.zone.zone_rejection:\n","\n","        # --------- by bb --------- #    \n","        \n","          #     bb & close   #\n","        if strat_version in ['v5_2']:\n","\n","          mr_const_cnt += 1\n","          # if res_df['close'].iloc[i] > res_df['bb_upper_%s' % config.loc_set.zone.bbz_itv].iloc[i]:    # org\n","          # if res_df['close'].iloc[i] < res_df['bb_upper_%s' % config.loc_set.zone.bbz_itv].iloc[i]:  # inv\n","          # if res_df['close'].iloc[i] < res_df['bb_lower_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","          if res_df['close'].iloc[i] < res_df['bb_lower2_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","          # if res_df['close'].iloc[i] < res_df['bb_lower3_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","              mr_score += 1\n","\n","              if show_detail:\n","                  sys_log3.warning(\"bb & close passed\")\n","\n","          #     bb & bb   #\n","        if strat_version in ['v7_3', '1_3']:\n","\n","          mr_const_cnt += 1\n","          if  res_df['bb_lower_5m'].iloc[i] > res_df['bb_base_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","          # if res_df['bb_lower_1m'].iloc[i] > res_df['bb_upper_%s' % config.loc_set.zone.bbz_itv].iloc[i]:            \n","              mr_score += 1\n","\n","              if show_detail:\n","                  sys_log3.warning(\"bb & bb passed\")\n","\n","            #     bb & ep   #\n","          mr_const_cnt += 1\n","          # if res_df['long_ep_{}'.format(strat_version)].iloc[i] > res_df['bb_base_15m'].iloc[i]:\n","          # if res_df['long_ep_{}'.format(strat_version)].iloc[i] > res_df['bb_base_15m'].iloc[i] + res_df['bb_gap_15m'].iloc[i]:\n","          # if res_df['long_ep_{}'.format(strat_version)].iloc[i] > res_df['bb_base_5m'].iloc[i]:\n","          if res_df['long_ep_{}'.format(strat_version)].iloc[i] > res_df['bb_lower_5m'].iloc[i]:\n","              mr_score += 1\n","\n","              if show_detail:\n","                  sys_log3.warning(\"bb & ep passed\")\n","          \n","            #     bb & dc   #\n","          mr_const_cnt += 1\n","          # if res_df['bb_base_%s' % config.loc_set.zone.bbz_itv].iloc[i] >= res_df['dc_lower_1m'].iloc[i] >= res_df['bb_lower_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","\n","          prev_hopen_idx = i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1 + config.loc_set.zone.c_itv_ticks) + config.loc_set.zone.ad_idx\n","          # if res_df['dc_lower_5m'].iloc[prev_hopen_idx] > res_df['bb_lower_15m'].iloc[i]:\n","\n","          if prev_hopen_idx >= 0:\n","            if res_df['dc_lower_5m'].iloc[prev_hopen_idx] > res_df['bb_lower_15m'].iloc[prev_hopen_idx]:\n","              mr_score += 1\n","\n","            if show_detail:\n","                sys_log3.warning(\"bb & dc passed\")\n","\n","        # --------- by ema --------- # \n","\n","          #     bb & ema   #\n","        if strat_version in ['v7_3', '1_3']:\n","\n","          mr_const_cnt += 1\n","          # if res_df['bb_lower_15m'].iloc[i] > res_df['ema_5m'].iloc[i]:\n","          if res_df['dc_lower_5m'].iloc[i] > res_df['ema_5m'].iloc[i]:\n","            mr_score += 1\n","\n","            if show_detail:\n","              sys_log3.warning(\"bb & ema passed\")\n","\n","          #     close & ema     #\n","        if strat_version in ['v5_2']:\n","\n","          mr_const_cnt += 1\n","          # if  res_df['long_ep'].iloc[i] > res_df['ema_5m'].iloc[i]:\n","          if res_df['close'].iloc[i] > res_df['ema_5m'].iloc[i]:\n","              mr_score += 1\n","\n","              if show_detail:\n","                sys_log3.warning(\"close & ema passed\")\n","        \n","          \n","        # --------- by dc --------- # \n","\n","          #     dc & dc    #\n","        mr_const_cnt += 1\n","        if res_df['dc_upper_1m'].iloc[i] >= res_df['dc_upper_1h'].iloc[i]:\n","          mr_score += 1\n","\n","\n","          #     ascending dc    #\n","        # mr_const_cnt += 1\n","        # if res_df['dc_upper_5m'].iloc[i] >= res_df['dc_upper_5m'].iloc[i - 50 : i].max():\n","        #   mr_score += 1\n","          \n","        # --------- by candle --------- #\n","        # mr_const_cnt += 1\n","        # if res_df['long_ep_{}'.format(strat_version)].iloc[i] >= res_df['hclose_60'].iloc[i - (np_timeidx[i] % config.loc_set.zone.c_itv_ticks + 1)]:\n","        #     mr_score += 1\n","        \n","        # --------- by macd --------- #\n","        # mr_const_cnt += 1\n","        # if res_df['ma30_1m'].iloc[i] > res_df['ma60_1m'].iloc[i]:\n","        #     mr_score += 1\n","\n","        # --------- by zone_dtk --------- #\n","        # mr_const_cnt += 1\n","        # if res_df['zone_dc_lower_v2_{}'.format(strat_version)].iloc[i] > res_df['short_dtk_plot_1'].iloc[i] - res_df['short_dtk_plot_gap'].iloc[i] * config.loc_set.zone.zone_dt_k:\n","        #   mr_score += 1\n","\n","    # -------------- zoned tr_set - post_work -------------- #\n","    if config.tr_set.c_ep_gap != \"None\":\n","        #       by bb       # \n","        # if res_df['close'].iloc[i] < res_df['bb_upper_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","\n","        #       by zone_dtk       #\n","\n","        #         c_zone        #\n","        if res_df['zone_dc_lower_v2_{}'.format(strat_version)].iloc[i] < res_df['short_dtk_plot_1'].iloc[i] - \\\n","                res_df['short_dtk_plot_gap'].iloc[i] * config.loc_set.zone.zone_dt_k:\n","\n","            if config.ep_set.static_ep:\n","                res_df['long_ep_{}'.format(strat_version)].iloc[i] = res_df['long_ep2_{}'.format(strat_version)].iloc[i]\n","            else:\n","                res_df['long_ep_{}'.format(strat_version)] = res_df['long_ep2_{}'.format(strat_version)]\n","\n","            if config.out_set.static_out:\n","                res_df['long_out_{}'.format(strat_version)].iloc[i] = \\\n","                res_df['long_out_org_{}'.format(strat_version)].iloc[i]\n","            else:\n","                res_df['long_out_{}'.format(strat_version)] = res_df['long_out_org_{}'.format(strat_version)]\n","\n","            zone = 'c'\n","\n","            # mr_const_cnt += 1\n","            # dc_lb_period = 100\n","            # if np.sum((res_df['dc_upper_15m'] > res_df['dc_upper_15m'].shift(15)).iloc[i - dc_lb_period:i]) == 0:\n","            #   mr_score += 1\n","\n","            #         t_zone        #\n","        else:\n","\n","            # mr_const_cnt += 1   # zone_rejection - temporary\n","\n","            if config.ep_set.static_ep:\n","                res_df['long_ep_{}'.format(strat_version)].iloc[i] = \\\n","                res_df['long_ep_org_{}'.format(strat_version)].iloc[i]\n","            else:\n","                res_df['long_ep_{}'.format(strat_version)] = res_df['long_ep_org_{}'.format(strat_version)]\n","\n","            if config.out_set.static_out:\n","                res_df['long_out_{}'.format(strat_version)].iloc[i] = res_df['long_out2_{}'.format(strat_version)].iloc[\n","                    i]\n","            else:\n","                res_df['long_out_{}'.format(strat_version)] = res_df['long_out2_{}'.format(strat_version)]\n","\n","            zone = 't'\n","\n","    if mr_const_cnt == mr_score:\n","        open_side = OrderSide.BUY\n","\n","    return res_df, open_side, zone"]},{"cell_type":"markdown","metadata":{"id":"rLI8unIyroiC"},"source":["##### run"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"TdAn2bHHBWMF","executionInfo":{"status":"ok","timestamp":1641392874714,"user_tz":-540,"elapsed":97383,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"ea28e9d0-d1cc-435a-bf9d-2577082e1384"},"outputs":[{"output_type":"stream","name":"stdout","text":["2021-11-17 ETHUSDT.ftr loaded !\n","~ load res_df elapsed time : 1.661548376083374\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:670: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  iloc._setitem_with_indexer(indexer, value)\n"]},{"output_type":"stream","name":"stdout","text":["load_df ~ enlist_rtc elapsed time : 10.19314980506897\n","config.loc_set.point.exp_itv : 5m\n","config.loc_set.point.tpg_itv1 : 60\n","config.loc_set.point.tpg_itv0 : 60\n","config.loc_set.point.outg_itv1 : 60\n","config.loc_set.point.outg_itv0 : 60\n","config.loc_set.point.outg_dc_period : None\n","-----------------------------------\n","config.loc_set.zone.tr_thresh : None\n","config.loc_set.zone.short_spread : None\n","config.loc_set.zone.long_spread : None\n","config.loc_set.zone.dtk_itv : 5m\n","config.loc_set.zone.dt_k : None\n","config.loc_set.zone.ei_k : 0.618\n","config.loc_set.zone.dc_period : 135\n","config.loc_set.zone.use_dtk_line : 0\n","config.loc_set.zone.zone_rejection : 1\n","config.loc_set.zone.bbz_itv : 15m\n","config.loc_set.zone.gap_mply : 1\n","config.loc_set.zone.ad_idx : 19\n","config.loc_set.zone.zone_dt_k : 0.4\n","config.loc_set.zone.zone_dc_period : 135\n","-----------------------------------\n","config.loc_set.point.tf_entry : 60\n","config.loc_set.point.htf_entry : 15\n","config.loc_set.point.candle_ratio : None\n","config.loc_set.point.candle_ratio2 : 70\n","config.loc_set.point.body_ratio2 : 70\n","config.loc_set.point.osc_band : 20\n","config.tr_set.ep_gap : 0.0\n","config.tr_set.tp_gap : 0.618\n","config.tr_set.decay_gap : 0.3\n","config.tr_set.out_gap : 0.5\n","config.tr_set.c_ep_gap : None\n","config.tr_set.t_out_gap : -0.0\n","-----------------------------------\n","config.lvrg_set.leverage : 10\n","config.lvrg_set.static_lvrg : 1\n","config.lvrg_set.target_pct : 0.1\n","-----------------------------------\n","config.ep_set.entry_type : LIMIT\n","config.tp_set.tp_type : LIMIT\n","config.tp_set.static_tp : 1\n","config.tp_set.decay_term : 60\n","config.out_set.use_out : 0\n","config.out_set.out_type : MARKET\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:670: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  iloc._setitem_with_indexer(indexer, value)\n"]},{"output_type":"stream","name":"stdout","text":["elapsed_time : 15.553282976150513\n","supblot231 passed\n","error in 232 : float division by zero\n","supblot233 passed\n","error in 235 : division by zero\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/numpy/core/fromnumeric.py:3373: RuntimeWarning: Mean of empty slice.\n","  out=out, **kwargs)\n","/usr/local/lib/python3.7/dist-packages/numpy/core/fromnumeric.py:3373: RuntimeWarning: Mean of empty slice.\n","  out=out, **kwargs)\n","/usr/local/lib/python3.7/dist-packages/numpy/core/_methods.py:234: RuntimeWarning: Degrees of freedom <= 0 for slice\n","  keepdims=keepdims)\n","/usr/local/lib/python3.7/dist-packages/numpy/core/fromnumeric.py:3373: RuntimeWarning: Mean of empty slice.\n","  out=out, **kwargs)\n","/usr/local/lib/python3.7/dist-packages/numpy/core/_methods.py:234: RuntimeWarning: Degrees of freedom <= 0 for slice\n","  keepdims=keepdims)\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1600x1200 with 4 Axes>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","config.loc_set.point.exp_itv : 5m\n","config.loc_set.point.tpg_itv1 : 60\n","config.loc_set.point.tpg_itv0 : 60\n","config.loc_set.point.outg_itv1 : 60\n","config.loc_set.point.outg_itv0 : 60\n","config.loc_set.point.outg_dc_period : None\n","-----------------------------------\n","config.loc_set.zone.tr_thresh : None\n","config.loc_set.zone.short_spread : None\n","config.loc_set.zone.long_spread : None\n","config.loc_set.zone.dtk_itv : 5m\n","config.loc_set.zone.dt_k : None\n","config.loc_set.zone.ei_k : 0.618\n","config.loc_set.zone.dc_period : 135\n","config.loc_set.zone.use_dtk_line : 0\n","config.loc_set.zone.zone_rejection : 1\n","config.loc_set.zone.bbz_itv : 15m\n","config.loc_set.zone.gap_mply : 1\n","config.loc_set.zone.ad_idx : 19\n","config.loc_set.zone.zone_dt_k : 0.4\n","config.loc_set.zone.zone_dc_period : 135\n","-----------------------------------\n","config.loc_set.point.tf_entry : 60\n","config.loc_set.point.htf_entry : 15\n","config.loc_set.point.candle_ratio : None\n","config.loc_set.point.candle_ratio2 : 80\n","config.loc_set.point.body_ratio2 : 70\n","config.loc_set.point.osc_band : 20\n","config.tr_set.ep_gap : 0.0\n","config.tr_set.tp_gap : 0.618\n","config.tr_set.decay_gap : 0.3\n","config.tr_set.out_gap : 0.5\n","config.tr_set.c_ep_gap : None\n","config.tr_set.t_out_gap : -0.0\n","-----------------------------------\n","config.lvrg_set.leverage : 10\n","config.lvrg_set.static_lvrg : 1\n","config.lvrg_set.target_pct : 0.1\n","-----------------------------------\n","config.ep_set.entry_type : LIMIT\n","config.tp_set.tp_type : LIMIT\n","config.tp_set.static_tp : 1\n","config.tp_set.decay_term : 60\n","config.out_set.use_out : 0\n","config.out_set.out_type : MARKET\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:670: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  iloc._setitem_with_indexer(indexer, value)\n"]},{"output_type":"stream","name":"stdout","text":["elapsed_time : 15.434505462646484\n","supblot231 passed\n","error in 232 : float division by zero\n","supblot233 passed\n","error in 235 : division by zero\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/numpy/core/fromnumeric.py:3373: RuntimeWarning: Mean of empty slice.\n","  out=out, **kwargs)\n","/usr/local/lib/python3.7/dist-packages/numpy/core/fromnumeric.py:3373: RuntimeWarning: Mean of empty slice.\n","  out=out, **kwargs)\n","/usr/local/lib/python3.7/dist-packages/numpy/core/_methods.py:234: RuntimeWarning: Degrees of freedom <= 0 for slice\n","  keepdims=keepdims)\n","/usr/local/lib/python3.7/dist-packages/numpy/core/fromnumeric.py:3373: RuntimeWarning: Mean of empty slice.\n","  out=out, **kwargs)\n","/usr/local/lib/python3.7/dist-packages/numpy/core/_methods.py:234: RuntimeWarning: Degrees of freedom <= 0 for slice\n","  keepdims=keepdims)\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1600x1200 with 4 Axes>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","config.loc_set.point.exp_itv : 5m\n","config.loc_set.point.tpg_itv1 : 60\n","config.loc_set.point.tpg_itv0 : 60\n","config.loc_set.point.outg_itv1 : 60\n","config.loc_set.point.outg_itv0 : 60\n","config.loc_set.point.outg_dc_period : None\n","-----------------------------------\n","config.loc_set.zone.tr_thresh : None\n","config.loc_set.zone.short_spread : None\n","config.loc_set.zone.long_spread : None\n","config.loc_set.zone.dtk_itv : 5m\n","config.loc_set.zone.dt_k : None\n","config.loc_set.zone.ei_k : 0.618\n","config.loc_set.zone.dc_period : 135\n","config.loc_set.zone.use_dtk_line : 0\n","config.loc_set.zone.zone_rejection : 1\n","config.loc_set.zone.bbz_itv : 15m\n","config.loc_set.zone.gap_mply : 1\n","config.loc_set.zone.ad_idx : 19\n","config.loc_set.zone.zone_dt_k : 0.4\n","config.loc_set.zone.zone_dc_period : 135\n","-----------------------------------\n","config.loc_set.point.tf_entry : 60\n","config.loc_set.point.htf_entry : 15\n","config.loc_set.point.candle_ratio : None\n","config.loc_set.point.candle_ratio2 : 90\n","config.loc_set.point.body_ratio2 : 70\n","config.loc_set.point.osc_band : 20\n","config.tr_set.ep_gap : 0.0\n","config.tr_set.tp_gap : 0.618\n","config.tr_set.decay_gap : 0.3\n","config.tr_set.out_gap : 0.5\n","config.tr_set.c_ep_gap : None\n","config.tr_set.t_out_gap : -0.0\n","-----------------------------------\n","config.lvrg_set.leverage : 10\n","config.lvrg_set.static_lvrg : 1\n","config.lvrg_set.target_pct : 0.1\n","-----------------------------------\n","config.ep_set.entry_type : LIMIT\n","config.tp_set.tp_type : LIMIT\n","config.tp_set.static_tp : 1\n","config.tp_set.decay_term : 60\n","config.out_set.use_out : 0\n","config.out_set.out_type : MARKET\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py:670: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  iloc._setitem_with_indexer(indexer, value)\n"]},{"output_type":"stream","name":"stdout","text":["elapsed_time : 15.428753137588501\n","supblot231 passed\n","error in 232 : float division by zero\n","supblot233 passed\n","error in 235 : division by zero\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/numpy/core/fromnumeric.py:3373: RuntimeWarning: Mean of empty slice.\n","  out=out, **kwargs)\n","/usr/local/lib/python3.7/dist-packages/numpy/core/fromnumeric.py:3373: RuntimeWarning: Mean of empty slice.\n","  out=out, **kwargs)\n","/usr/local/lib/python3.7/dist-packages/numpy/core/_methods.py:234: RuntimeWarning: Degrees of freedom <= 0 for slice\n","  keepdims=keepdims)\n","/usr/local/lib/python3.7/dist-packages/numpy/core/fromnumeric.py:3373: RuntimeWarning: Mean of empty slice.\n","  out=out, **kwargs)\n","/usr/local/lib/python3.7/dist-packages/numpy/core/_methods.py:234: RuntimeWarning: Degrees of freedom <= 0 for slice\n","  keepdims=keepdims)\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1600x1200 with 4 Axes>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","config.loc_set.point.exp_itv : 5m\n","config.loc_set.point.tpg_itv1 : 60\n","config.loc_set.point.tpg_itv0 : 60\n","config.loc_set.point.outg_itv1 : 60\n","config.loc_set.point.outg_itv0 : 60\n","config.loc_set.point.outg_dc_period : None\n","-----------------------------------\n","config.loc_set.zone.tr_thresh : None\n","config.loc_set.zone.short_spread : None\n","config.loc_set.zone.long_spread : None\n","config.loc_set.zone.dtk_itv : 5m\n","config.loc_set.zone.dt_k : None\n","config.loc_set.zone.ei_k : 0.618\n","config.loc_set.zone.dc_period : 135\n","config.loc_set.zone.use_dtk_line : 0\n","config.loc_set.zone.zone_rejection : 1\n","config.loc_set.zone.bbz_itv : 15m\n","config.loc_set.zone.gap_mply : 1\n","config.loc_set.zone.ad_idx : 19\n","config.loc_set.zone.zone_dt_k : 0.4\n","config.loc_set.zone.zone_dc_period : 135\n","-----------------------------------\n","config.loc_set.point.tf_entry : 60\n","config.loc_set.point.htf_entry : 15\n","config.loc_set.point.candle_ratio : None\n","config.loc_set.point.candle_ratio2 : 100\n","config.loc_set.point.body_ratio2 : 70\n","config.loc_set.point.osc_band : 20\n","config.tr_set.ep_gap : 0.0\n","config.tr_set.tp_gap : 0.618\n","config.tr_set.decay_gap : 0.3\n","config.tr_set.out_gap : 0.5\n","config.tr_set.c_ep_gap : None\n","config.tr_set.t_out_gap : -0.0\n","-----------------------------------\n","config.lvrg_set.leverage : 10\n","config.lvrg_set.static_lvrg : 1\n","config.lvrg_set.target_pct : 0.1\n","-----------------------------------\n","config.ep_set.entry_type : LIMIT\n","config.tp_set.tp_type : LIMIT\n","config.tp_set.static_tp : 1\n","config.tp_set.decay_term : 60\n","config.out_set.use_out : 0\n","config.out_set.out_type : MARKET\n","elapsed_time : 15.509547472000122\n"]},{"output_type":"stream","name":"stderr","text":["/content/drive/My Drive/Colab Notebooks/JnQ/funcs/funcs_for_trade.py:120: RuntimeWarning: divide by zero encountered in double_scalars\n","  sr_ = (mean_pr_ - risk_free_rate) / s\n","/usr/local/lib/python3.7/dist-packages/numpy/core/fromnumeric.py:3373: RuntimeWarning: Mean of empty slice.\n","  out=out, **kwargs)\n","/usr/local/lib/python3.7/dist-packages/numpy/core/fromnumeric.py:3373: RuntimeWarning: Mean of empty slice.\n","  out=out, **kwargs)\n","/usr/local/lib/python3.7/dist-packages/numpy/core/_methods.py:234: RuntimeWarning: Degrees of freedom <= 0 for slice\n","  keepdims=keepdims)\n","/content/drive/My Drive/Colab Notebooks/JnQ/funcs/funcs_for_trade.py:120: RuntimeWarning: divide by zero encountered in double_scalars\n","  sr_ = (mean_pr_ - risk_free_rate) / s\n","/content/drive/My Drive/Colab Notebooks/JnQ/funcs/funcs_for_trade.py:120: RuntimeWarning: divide by zero encountered in double_scalars\n","  sr_ = (mean_pr_ - risk_free_rate) / s\n","/usr/local/lib/python3.7/dist-packages/numpy/core/fromnumeric.py:3373: RuntimeWarning: Mean of empty slice.\n","  out=out, **kwargs)\n","/usr/local/lib/python3.7/dist-packages/numpy/core/_methods.py:234: RuntimeWarning: Degrees of freedom <= 0 for slice\n","  keepdims=keepdims)\n","/content/drive/My Drive/Colab Notebooks/JnQ/funcs/funcs_for_trade.py:120: RuntimeWarning: divide by zero encountered in double_scalars\n","  sr_ = (mean_pr_ - risk_free_rate) / s\n"]},{"output_type":"stream","name":"stdout","text":["supblot231 passed\n","error in 232 : float division by zero\n","supblot233 passed\n","error in 235 : division by zero\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1600x1200 with 4 Axes>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]}],"source":["config = config1  # custom base config, if use override -> set to config1\n","\n","multi_mode = 0\n","strat_switch = 0\n","override = 1\n","\n","if strat_switch:    # override ÌïòÏßÄÏïäÎäî Í≤ΩÏö∞Ïóê config1 ÎßåÏùÑ ÏÇ¨Ïö©ÌïòÎãà, config1 Ïóê Ïñ¥Îñ§ version ÏùÑ Î∞∞ÏπòÌï†ÏßÄ ÏÑ†ÌÉù\n","  utils1 = utils2\n","  config1 = config3\n","\n","# ------- tp / out fee calc ------- #\n","if config.ep_set.entry_type == 'MARKET':\n","  if config.tp_set.tp_type != 'MARKET':   # Todo : Ïã§Ï†úÎ°ú, tp_fee Í∞Ä ÏïÑÎãå spread const. Î•º ÏúÑÌïú spread_fee1 ÏûÑ (Ï∂îÌõÑ ÏàòÏ†ï Í∂åÍ≥†)\n","    tp_fee = config.trader_set.market_fee + config.trader_set.limit_fee\n","  else:\n","    tp_fee = config.trader_set.market_fee + config.trader_set.market_fee\n","  out_fee = config.trader_set.market_fee + config.trader_set.market_fee\n","else:\n","  if config.tp_set.tp_type != 'MARKET':\n","    tp_fee = config.trader_set.limit_fee + config.trader_set.limit_fee\n","  else:\n","    tp_fee = config.trader_set.limit_fee + config.trader_set.market_fee\n","  out_fee = config.trader_set.limit_fee + config.trader_set.market_fee\n","  \n","\n","# ------- inversion set ------- #\n","inversion = 0\n","fdist_thresh = 1\n","\n","title_position = (0.30, 1)\n","show_plot = 1\n","show_detail = 0\n","\n","for key in ftr_list:\n","\n","  if config.trader_set.symbol in key:\n","    pass\n","  else:\n","    continue\n","\n","  start_0 = time.time()\n","\n","  res_df = pd.read_feather(os.path.join(ftr_path, key), columns=None, use_threads=True).set_index(\"index\") #.loc[pd.to_datetime(\"2021-07-10 04:59:59.999000\"):]\n","  print(key, \"loaded !\")\n","  # break\n","\n","  print(\"~ load res_df elapsed time :\", time.time() - start_0)\n","  \n","  # print(\"res_df.columns :\", res_df.columns)  \n","  # print(res_df.tail(100))\n","  # print(\"res_df.index[0] :\", res_df.index[0])\n","  # # print(\"intmin(res_df.index[0]) :\", intmin(res_df.index[0]))\n","  # break\n","\n","  # -------------------- additional indi. -------------------- #    \n","  start_0 = time.time()\n","\n","  np_timeidx = np.array(list(map(lambda x : intmin(x), res_df.index)))  # Ïù¥Í≥≥Ïóê latency Ï°∞Í∏à ÏûàÏùå\n","\n","  if override:\n","    res_df = public_indi(res_df)\n","  else:\n","    res_df = utils_public.public_indi(res_df)\n","  \n","\n","  # -------------------- entlist rtc & tr ÏùÄ Ï§ëÎ≥µÎêòÎäî Ïó¨Î∂ÄÏóê Îî∞Îùº user Í∞Ä flexible coding Ìï¥ÏïºÌï† Í≤É -------------------- #    \n","  if override:\n","    res_df = enlist_rtc(res_df, config1)\n","  else:\n","    res_df = utils1.enlist_rtc(res_df, config1)\n","    if multi_mode:\n","      res_df = utils2.enlist_rtc(res_df, config2)\n","      res_df = utils2.enlist_rtc(res_df, config3)   # form Í∞ôÏùÄ Í≤ΩÏö∞, Í∞ôÏùÄ utils ÏÇ¨Ïö© - config Îßå Î≥ÄÍ≤Ω\n","\n","  print(\"load_df ~ enlist_rtc elapsed time :\", time.time() - start_0)\n","\n","  #   temp param    #\n","  allow_osc_touch = 0\n","  rsi_gap = 5\n","\n","  early_out_tpg = 0.36\n","\n","  itv_num_list = [1, 3, 5, 15]\n","\n","  itv_list = ['15m', '30m', '1h', '4h']\n","  # itv_list = ['3m', '5m', '15m', '30m', '1h', '4h']\n","\n","  x_val_list = np.arange(0.3, 1., 0.1)     # prcn 1\n","  # x_val_list = np.arange(0.5, 1.5, 0.01)     # prcn 2\n","  # x_val_list = np.arange(-0.64, -0.7, -0.001)    # prcn 3\n","  # x_val_list = np.arange(0.944, 0.945, 0.0001)    # prcn 4\n","  # x_val_list = np.arange(20, 15, -1)   # prcn -1\n","  x_val_list = np.arange(70, 110, 10)   # prcn -2\n","\n","  y_val_cols = [\"wr\", \"sr\", \"frq\", \"dpf\", \"acc_pr\", \"sum_pr\", \"acc_mdd\", \"sum_mdd\", \"liqd\", \"min_pr\", \"tr\", \"dr\"]\n","  y_rev_val_cols = [\"wr\", \"sr\", \"acc_pr\", \"sum_pr\", \"acc_mdd\", \"sum_mdd\", \"min_pr\"]\n","\n","  survey_df = pd.DataFrame(index=x_val_list, columns=y_val_cols)\n","  short_survey_df = pd.DataFrame(index=x_val_list, columns=y_val_cols)\n","  long_survey_df = pd.DataFrame(index=x_val_list, columns=y_val_cols)\n","  rev_survey_df = pd.DataFrame(index=x_val_list, columns=y_rev_val_cols)\n","  rev_short_survey_df = pd.DataFrame(index=x_val_list, columns=y_rev_val_cols)\n","  rev_long_survey_df = pd.DataFrame(index=x_val_list, columns=y_rev_val_cols)\n","\n","  # for survey_i, just_loop in enumerate(range(1)):\n","  # for survey_i, config.loc_set.zone.tr_thresh in enumerate(x_val_list): \n","  # for survey_i, config.loc_set.zone.short_spread in enumerate(x_val_list): \n","  # for survey_i, config.loc_set.zone.long_spread in enumerate(x_val_list): \n","  # for survey_i, config.loc_set.zone.dt_k in enumerate(x_val_list):\n","  # for survey_i, config.loc_set.zone.dc_period in enumerate(x_val_list):\n","  # for survey_i, config.loc_set.zone.ei_k in enumerate(x_val_list):   \n","  # for survey_i, config.loc_set.zone.dr_error in enumerate(x_val_list): \n","  # for survey_i, config.loc_set.zone.bbz_itv in enumerate(itv_list):\n","  # for survey_i, config.loc_set.zone.gap_mply in enumerate(x_val_list):\n","  # for survey_i, config.loc_set.zone.ad_idx in enumerate(x_val_list):\n","  # for survey_i, config.loc_set.point.tf_entry in enumerate(x_val_list):\n","  # for survey_i, config.loc_set.point.candle_ratio in enumerate(x_val_list):\n","  for survey_i, config.loc_set.point.candle_ratio2 in enumerate(x_val_list):\n","  # for survey_i, config.loc_set.point.osc_band in enumerate(x_val_list):\n","  # for survey_i, config.tr_set.ep_gap in enumerate(x_val_list): \n","  # for survey_i, config.tr_set.out_gap in enumerate(x_val_list): \n","  # for survey_i, config.tr_set.tp_gap in enumerate(x_val_list): \n","  # for survey_i, config.lvrg_set.leverage in enumerate(x_val_list):\n","  # for survey_i, config.lvrg_set.target_pct in enumerate(x_val_list):   \n","  # for survey_i, outg_dc_itv_num in enumerate(x_val_list): \n","  # for survey_i, exp_itv in enumerate(itv_list): \n","  # for survey_i, zone_dt_k in enumerate(x_val_list): \n","  # for survey_i, t_out_gap in enumerate(x_val_list): \n","  # for survey_i, zone_dc_period in enumerate(x_val_list): \n","  # for survey_i, early_out_tpg in enumerate(x_val_list): \n","  \n","    start_0 = time.time()\n","\n","    print(\"config.loc_set.point.exp_itv :\", config.loc_set.point.exp_itv)\n","    print(\"config.loc_set.point.tpg_itv1 :\", config.loc_set.point.tpg_itv1)\n","    print(\"config.loc_set.point.tpg_itv0 :\", config.loc_set.point.tpg_itv0)\n","    print(\"config.loc_set.point.outg_itv1 :\", config.loc_set.point.outg_itv1)\n","    print(\"config.loc_set.point.outg_itv0 :\", config.loc_set.point.outg_itv0)\n","    print(\"config.loc_set.point.outg_dc_period :\", config.loc_set.point.outg_dc_period)\n","    print(\"-----------------------------------\")    \n","    # print(\"dtk_dc_itv :\", dtk_dc_itv)    \n","    # print(\"config.loc_set.dtk_dc_itv_num :\", config.loc_set.dtk_dc_itv_num :\",)\n","    print(\"config.loc_set.zone.tr_thresh :\", config.loc_set.zone.tr_thresh)\n","    print(\"config.loc_set.zone.short_spread :\", config.loc_set.zone.short_spread)\n","    print(\"config.loc_set.zone.long_spread :\", config.loc_set.zone.long_spread)\n","    print(\"config.loc_set.zone.dtk_itv :\", config.loc_set.zone.dtk_itv)\n","    print(\"config.loc_set.zone.dt_k :\", config.loc_set.zone.dt_k)\n","    print(\"config.loc_set.zone.ei_k :\", config.loc_set.zone.ei_k)\n","    print(\"config.loc_set.zone.dc_period :\", config.loc_set.zone.dc_period)\n","    print(\"config.loc_set.zone.use_dtk_line :\", config.loc_set.zone.use_dtk_line)\n","\n","    print(\"config.loc_set.zone.zone_rejection :\", config.loc_set.zone.zone_rejection)\n","    print(\"config.loc_set.zone.bbz_itv :\", config.loc_set.zone.bbz_itv)\n","    print(\"config.loc_set.zone.gap_mply :\", config.loc_set.zone.gap_mply)\n","    print(\"config.loc_set.zone.ad_idx :\", config.loc_set.zone.ad_idx)\n","    print(\"config.loc_set.zone.zone_dt_k :\", config.loc_set.zone.zone_dt_k)\n","    print(\"config.loc_set.zone.zone_dc_period :\", config.loc_set.zone.zone_dc_period)\n","    # print(\"config.loc_set.open_shift :\", config.loc_set.open_shift)\n","    print(\"-----------------------------------\")\n","    # print(\"config.ep_set.dr_error :\", config.ep_set.dr_error)\n","    print(\"config.loc_set.point.tf_entry :\", config.loc_set.point.tf_entry)\n","    print(\"config.loc_set.point.htf_entry :\", config.loc_set.point.htf_entry)\n","    print(\"config.loc_set.point.candle_ratio :\", config.loc_set.point.candle_ratio)\n","    print(\"config.loc_set.point.candle_ratio2 :\", config.loc_set.point.candle_ratio2)\n","    print(\"config.loc_set.point.body_ratio2 :\", config.loc_set.point.body_ratio2)\n","    print(\"config.loc_set.point.osc_band :\", config.loc_set.point.osc_band)\n","    print(\"config.tr_set.ep_gap :\", config.tr_set.ep_gap)\n","    print(\"config.tr_set.tp_gap :\", config.tr_set.tp_gap)  \n","    print(\"config.tr_set.decay_gap :\", config.tr_set.decay_gap)  \n","    print(\"config.tr_set.out_gap :\", config.tr_set.out_gap)\n","    print(\"config.tr_set.c_ep_gap :\", config.tr_set.c_ep_gap)\n","    print(\"config.tr_set.t_out_gap :\", config.tr_set.t_out_gap)\n","    print(\"-----------------------------------\")\n","    print(\"config.lvrg_set.leverage :\", config.lvrg_set.leverage)\n","    print(\"config.lvrg_set.static_lvrg :\", config.lvrg_set.static_lvrg)\n","    print(\"config.lvrg_set.target_pct :\", config.lvrg_set.target_pct)\n","    print(\"-----------------------------------\")\n","    print(\"config.ep_set.entry_type :\", config.ep_set.entry_type)\n","    print(\"config.tp_set.tp_type :\", config.tp_set.tp_type)\n","    print(\"config.tp_set.static_tp :\", config.tp_set.static_tp)\n","    print(\"config.tp_set.decay_term :\", config.tp_set.decay_term)\n","    print(\"config.out_set.use_out :\", config.out_set.use_out)    \n","    print(\"config.out_set.out_type :\", config.out_set.out_type)\n","    \n","    # print(\"early_out_tpg :\", early_out_tpg)\n","\n","    # res_df = bb_level(res_df, '15m', config.loc_set.zone.gap_mply)\n","    \n","    # rsi_upper = 50 + config.loc_set.point.osc_band\n","    # rsi_lower = 50 - config.loc_set.point.osc_band\n","\n","    if override:\n","      res_df = enlist_tr(res_df, config1, np_timeidx)\n","    else:\n","      res_df = utils1.enlist_tr(res_df, config1, np_timeidx)\n","      if multi_mode:\n","        res_df = utils2.enlist_tr(res_df, config2, np_timeidx)\n","        res_df = utils2.enlist_tr(res_df, config3, np_timeidx)\n","\n","\n","    #       trading : Ïó¨Í∏∞ÎèÑ Ï≤¥Í≤∞ Í≤∞Í≥ºÏóê ÎåÄÌï¥ Î¨òÏÇ¨Ìï®       #\n","    trade_list = []\n","    h_trade_list = []\n","    leverage_list = []\n","    fee_list = []\n","    short_fee_list = []\n","    long_fee_list = []\n","    open_list = []\n","    zone_list = []\n","    side_list = []\n","    strat_ver_list = []\n","\n","    tp_ratio_list = []\n","    short_tp_ratio_list = []\n","    long_tp_ratio_list = []\n","\n","    dr_list = []\n","    short_dr_list = []\n","    long_dr_list = []\n","\n","    liqd_list = []\n","    short_liqd_list = []\n","    long_liqd_list = []\n","\n","    nontp_liqd_list = []\n","    nontp_short_liqd_list = []\n","    nontp_long_liqd_list = []\n","\n","    nontp_pr_list = []\n","    nontp_short_pr_list = []\n","    nontp_long_pr_list = []\n","\n","    nontp_short_indexs = []\n","    nontp_long_indexs = []\n","\n","    nontp_short_ep_list = []\n","    nontp_long_ep_list = []\n","\n","    pr_list = []\n","    long_list = []\n","    short_list = []\n","\n","    h_pr_list = []\n","    h_long_list = []\n","    h_short_list = []\n","\n","    ep_tp_list = []\n","    h_ep_tp_list = []\n","    tp_state_list = []\n","\n","    i = 0\n","    while 1:\n","    # for i in range(len(res_df)):  \n","\n","      run = 0\n","      # if res_df['entry_{}'.format(config.strat_version)][i] == config.ep_set.short_entry_score: \n","      if multi_mode:\n","        if res_df['entry_{}'.format(config1.strat_version)][i] == config1.ep_set.short_entry_score or \\\n","            res_df['entry_{}'.format(config2.strat_version)][i] == config2.ep_set.short_entry_score: \n","          run = -1\n","        elif res_df['entry_{}'.format(config1.strat_version)][i] == -config1.ep_set.short_entry_score or \\\n","          res_df['entry_{}'.format(config2.strat_version)][i] == -config2.ep_set.short_entry_score: \n","          run = 1 \n","      else:\n","        if res_df['entry_{}'.format(config1.strat_version)][i] == config1.ep_set.short_entry_score:\n","          run = -1\n","        elif res_df['entry_{}'.format(config1.strat_version)][i] == -config1.ep_set.short_entry_score:\n","          run = 1\n","\n","      if run == -1:\n","        # print(\"i in short :\", i)\n","\n","        #     Ïù¥Í≥≥ÏóêÏÑú ÏÇ¨Ïö©Îê† config Í∞Ä Ï†ïÌï¥Ïßê    #\n","        if res_df['entry_{}'.format(config1.strat_version)][i] == config1.ep_set.short_entry_score:\n","          config = config1\n","        else:\n","          config = config2  # Í∏∞Î≥∏ setting ÏùÄ lower version strat. ÏúºÎ°ú ÏÑ§Ï†ïÌï®\n","\n","        # strat_version = config.strat_version\n","    \n","\n","        initial_i = i\n","\n","\n","        if override:\n","          res_df, open_side, zone = short_ep_loc(res_df, config, i, np_timeidx, show_detail)          \n","        else:\n","          #       config Îäî ep_loc ÏùÑ ÌÜµÌï¥ Ïû¨Ï†ïÏùò Îê† Ïàò ÏûàÏùå      #\n","          res_df, open_side, zone = utils_public.short_ep_loc(res_df, config, i, np_timeidx, show_detail)\n","          if multi_mode:\n","            if config.strat_version == 'v5_2' and open_side is None:\n","              res_df, open_side, zone = utils_public.short_ep_loc(res_df, config3, i, np_timeidx, show_detail)\n","\n","              if open_side is not None:  # Ïù¥ ÌòïÌÉúÎ•º Ïú†ÏßÄÌïòÎäî Ïù¥Ïú†Îäî, ÏïÑÎûòÏùò summation form ÏùÑ Íπ®Îú®Î¶¨ÏßÄ ÏïäÍ∏∞ ÏúÑÌï®\n","                config = config3 \n","\n","\n","        # -------------- mr_score summation -------------- #\n","        if open_side is not None:     \n","          pass\n","\n","        else:\n","          i += 1\n","          if i >= len(res_df):\n","            break\n","          continue\n","\n","        # --------------------- config Í∞Ä ÌôïÏ†ïÎêú Ïù¥ÌõÑÏùò setting --------------------- #\n","        strat_version = config.strat_version\n","        \n","        # p_i Ïùò Ïö©ÎèÑ Î™®Î•¥Í≤†Ïùå\n","        if config.out_set.static_out:\n","          p_i = initial_i  \n","        else:\n","          p_i = i\n","\n","        # ------- fee init ------- #\n","        if config.ep_set.entry_type == 'LIMIT':\n","          fee = config.trader_set.limit_fee\n","        else:\n","          fee = config.trader_set.market_fee\n","        \n","        # --------------- set partial tp --------------- #\n","        short_tps = [res_df['short_tp_{}'.format(strat_version)]]\n","        long_tps = [res_df['long_tp_{}'.format(strat_version)]]\n","\n","        # short_tps = [short_tp2, short_tp] # org\n","        # long_tps = [long_tp2, long_tp]\n","        \n","        # short_tps = [short_tp, short_tp2]\n","        # long_tps = [long_tp, long_tp2]\n","\n","\n","        ep_j = initial_i\n","        out_j = initial_i\n","\n","        # -------------- limit waiting : limit_out -------------- #\n","\n","        if config.ep_set.entry_type == \"LIMIT\":\n","\n","          allow_ep_in = 0 if strat_version in [\"v5_2\"] else 1\n","          # allow_ep_in = 1\n","          entry_done = 0\n","          entry_open = 0\n","          prev_sar = None\n","\n","          # for e_j in range(i, len(res_df)): # entry_signal Ïù¥ open Í∏∞Ï§Ä (Ìï¥Îãπ bar ÏóêÏÑú Ï≤¥Í≤∞ Í∞ÄÎä•Ìï®)\n","          if i + 1 >= len(res_df):  # i should be checked if e_j starts from i+1\n","            break\n","          for e_j in range(i + 1, len(res_df)): # entry signalÏù¥ close Í∏∞Ï§Ä Ïùº Í≤ΩÏö∞\n","        \n","            if not config.ep_set.static_ep:\n","              ep_j = e_j\n","              out_j = e_j\n","\n","            if config.tp_set.static_tp:\n","              # if config.ep_set.tpout_onexec:\n","              #   tp_j = e_j\n","              # else:\n","                tp_j = initial_i\n","            else:\n","              tp_j = e_j  \n","\n","            #             1. ep ÏÑ§Ï†ï \n","            # -------------- np.inf ep -------------- #\n","            # if short_ep.iloc[initial_i] == np.inf:\n","            #   break\n","\n","\n","            #     1. check ep_out     #\n","            if config.loc_set.zone.ei_k != \"None\":\n","\n","              # if strat_version == \"v3\":\n","              if res_df['low'].iloc[e_j] <= res_df['h_short_rtc_1_{}'.format(strat_version)].iloc[tp_j] - \\\n","                res_df['h_short_rtc_gap_{}'.format(strat_version)].iloc[tp_j] * config.loc_set.zone.ei_k:\n","                break\n","\n","              # elif strat_version == \"v5_2\":\n","              # if res_df['low'].iloc[e_j] <= res_df['short_tp_{}'.format(strat_version)].iloc[tp_j]: # ep_out : tp_done\n","              # # if np_timeidx[e_j] % config.loc_set.point.tf_entry == config.loc_set.point.tf_entry - 1:\n","              #   break\n","\n","              # elif (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[e_j - 1] >= 50 - config.loc_set.point.osc_band) & \\\n","              #                  (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[e_j] < 50 - config.loc_set.point.osc_band):\n","              #   break\n","\n","            # if config.loc_set.zone.c_itv_ticks != \"None\":\n","\n","            #   if np_timeidx[e_j] % config.loc_set.zone.c_itv_ticks == config.loc_set.zone.c_itv_ticks - 1:\n","            #     break\n","\n","            #     2. ep_loc.point2\n","            if strat_version == \"v5_2\" and allow_ep_in == 0:\n","              if (res_df['dc_upper_1m'].iloc[e_j - 1] <= res_df['dc_upper_15m'].iloc[e_j]) & \\\n","                  (res_df['dc_upper_15m'].iloc[e_j - 1] != res_df['dc_upper_15m'].iloc[e_j]): # & \\\n","              # if (res_df['dc_upper_1m'].iloc[e_j - 1] <= res_df['dc_upper_5m'].iloc[e_j]) & \\\n","              #     (res_df['dc_upper_5m'].iloc[e_j - 1] != res_df['dc_upper_5m'].iloc[e_j]): # & \\\n","                  # (res_df['dc_upper_15m'].iloc[e_j] <= res_df['ema_5m'].iloc[e_j]):\n","                allow_ep_in = 1\n","                out_j = e_j\n","                # ep_j = e_j\n","                # continue  # limit entry Ïùò Í≤ΩÏö∞ ep_loc.point2 ÏôÑÎ£å ÏãúÏ†ê Ïù¥ÌõÑÎ°ú ÏßÑÏûÖÏù¥ Í∞ÄÎä•Ìïú Ï†ê\n","\n","              #     2-1. ep_out (ep_loc2) by ep_loc.point\n","              # if allow_ep_in and config.loc_set.zone.tr_thresh != \"None\":\n","              #   ep_ = res_df['close'].iloc[ep_j - 1]\n","              #   tr = ((res_df['short_tp_{}'.format(strat_version)].iloc[tp_j] - ep_ - tp_fee * ep_) / (ep_ - res_df['short_out_{}'.format(strat_version)].iloc[out_j] + out_fee * ep_))\n","              #   if tr < config.loc_set.zone.tr_thresh:\n","              #     break\n","\n","            #     3. check ep_in       #\n","            if allow_ep_in and res_df['high'].iloc[e_j] >= res_df['short_ep_{}'.format(strat_version)].iloc[ep_j]:\n","              entry_done = 1\n","              # print(\"res_df['high'].iloc[e_j] :\", res_df['high'].iloc[e_j])\n","              # print(\"e_j :\", e_j)\n","\n","              #     Ïù¥ÎØ∏, e_j open Ïù¥ ep Î≥¥Îã§ ÎÜíÏùÄ Í≤ΩÏö∞, entry[ep_j] => -2 Î°ú Î≥ÄÍ≤Ω   #\n","              if res_df['open'].iloc[e_j] >= res_df['short_ep_{}'.format(strat_version)].iloc[ep_j]:\n","                entry_open = 1\n","              break\n","\n","\n","          i = e_j\n","          # print(\"i = e_j :\", i)\n","\n","          if entry_done:      \n","            pass\n","\n","          else:\n","            i += 1\n","            if i >= len(res_df):\n","              break\n","            continue\n","\n","        # ----------------- end wait ----------------- #\n","\n","        # if e_j - initial_i >= 200:\n","        #   print(\"e_j, initial_i :\", e_j, initial_i)\n","        # print(\"e_j - initial_i :\", e_j - initial_i)\n","        # print()\n","\n","        open_list.append(initial_i)\n","        zone_list.append(zone)\n","        side_list.append('s')\n","        strat_ver_list.append(strat_version)\n","        \n","        #     e_j ÎùºÎäî Î≥ÄÏàòÎäî MARKET Ïóê ÏûàÏñ¥ÏÑú Ï†ïÏùòÎêòÏÑúÎäî ÏïàÎêòÎäî Î≥ÄÏàòÏûÑ   #\n","        if config.ep_set.entry_type == 'MARKET':\n","          # try:\n","          #   ep_list = [res_df['close'].iloc[e_j]]\n","          # except Exception as e:\n","          #   # print('error in ep_list (initial) :', e)\n","          ep_list = [res_df['close'].iloc[ep_j]]\n","\n","        else:          \n","          if not entry_open:\n","            ep_list = [res_df['short_ep_{}'.format(strat_version)].iloc[ep_j]]\n","          \n","          else:\n","            #   ep_j Îäî Ìï≠ÏÉÅ ÏûàÏùå, LIMIT Ïù∏ Í≤ΩÏö∞ e_j ÎèÑ Ìï≠ÏÉÅ Ï°¥Ïû¨Ìï® --> dynamic_ep Ïó¨Î∂ÄÏóê Îî∞Îùº ep_j = e_j Í∞Ä ÎêòÎäî Í≤ΩÏö∞Îßå Ï°¥Ïû¨Ìï† ÎøêÏûÑ \n","            #   Îî∞ÎùºÏÑú, ep_j Î°ú ÌÜµÏùº Í∞ÄÎä•Ìï® (dynamic_ep Ïù∏ Í≤ΩÏö∞, ep_j = e_j ÎêòÏñ¥ÏûàÏùå)\n","            fee = config.trader_set.market_fee\n","            ep_list = [res_df['open'].iloc[e_j]]  # --> Ï≤¥Í≤∞Ïù¥ ÎêòÎäî e_j idx Í∏∞Ï§ÄÏúºÎ°ú ÌïòÎäîÍ≤å ÎßûÏùå\n","\n","        if not config.lvrg_set.static_lvrg:\n","\n","          ep_ = ep_list[0]\n","          out_ = res_df['short_out_{}'.format(strat_version)].iloc[out_j]\n","          if override:\n","            config.lvrg_set.leverage = lvrg_set(res_df, config, \"SELL\", ep_, out_, fee)\n","          else:\n","            config.lvrg_set.leverage = utils_public.lvrg_set(res_df, config, \"SELL\", ep_, out_, fee)\n","\n","          # -------------- leverage rejection -------------- #\n","          if config.lvrg_set.leverage == None:\n","            open_list.pop()\n","            zone_list.pop()\n","            side_list.pop()\n","            strat_ver_list.pop()\n","\n","            i += 1\n","            if i >= len(res_df):\n","              break\n","            continue          \n","        \n","        leverage_list.append(config.lvrg_set.leverage)\n","\n","        # try:\n","        if config.ep_set.entry_type == \"MARKET\":\n","          ep_idx_list = [ep_j]  # ep_j Îäî ep_type Ïú†Í¥ÄÌïòÍ≤å Ï°¥Ïû¨ÌïòÎäî Î≥ÄÏàòÎãàÍπå try Ïóê Í±∏Ïñ¥ÎëêÎäîÍ≤å ÎßûÏùå <-- # market Ïù∏Îç∞, e_j Î≥ÄÏàòÍ∞Ä Ìï†ÎãπÎêú Í≤ΩÏö∞ Í≥†Î†§Ìï¥ÏïºÌï®\n","        else:\n","          ep_idx_list = [e_j]\n","\n","        out_idx_list = [out_j]\n","\n","        # except Exception as e:\n","        #   # print('error in ep_idx_list :', e)        \n","        #   ep_idx_list = [e_j]\n","\n","        tp_list = []\n","        tp_idx_list = []\n","\n","        partial_tp_cnt = 0\n","        hedge_cnt = 1\n","\n","        h_ep, h_tp = None, None\n","        h_i, h_j = None, None\n","        \n","        trade_done = 0\n","        cross_on = 0\n","        out = 0\n","        # config.out_set.retouch\n","\n","        #     Todo    #\n","        #      1. future_work : ÏÉÅÎã®Ïùò retouch ÏôÄ Í≤πÏπ® \n","        config.out_set.retouch = 0\n","        \n","\n","        if i == len(res_df) - 1: # if j start from i + 1 \n","          open_list.pop()       \n","          zone_list.pop()       \n","          side_list.pop()       \n","        for j in range(i + 1, len(res_df)):\n","\n","        # for j in range(i, len(res_df)):\n","\n","          if config.tp_set.static_tp:\n","            if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","              tp_j = ep_j  # tpout_onexec = using dynamic_ep --> using ep_j Ïóê ÎåÄÌïú Ïù¥Ïú†\n","            else:\n","              tp_j = initial_i\n","          else:\n","            tp_j = j\n","\n","          if config.out_set.static_out:\n","            if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","              out_j = ep_j\n","            # else:           \n","            #   out_j = initial_i   # --> referenced upper phase as initail_j / e_j (start of limit wait)\n","          else:\n","            out_j = j\n","\n","\n","          # -------------- sub ep -------------- #\n","          # if res_df['high'].iloc[j - 1] <= res_df['sar2'].iloc[j - 1] and res_df['high'].iloc[j] > res_df['sar2'].iloc[j]:\n","            \n","          #   sub_ep = res_df['sar2'].iloc[j - 1]\n","\n","          #   if sub_ep < ep_list[-1]:\n","          #     ep_list.append(sub_ep)\n","          #     ep_idx_list.append(j)\n","\n","          \n","          # -------------- hedge only once -------------- #\n","          #             ÏùºÎã®, h_quantity Îäî Ï¥àÍ∏∞ ÏßÑÏûÖÍ≥º ÎèôÏùºÌïòÍ≤å ÏÑ§Ï†ï         #\n","          # if res_df['high'].iloc[j] >= res_df['minor_ST2_Up'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] >= res_df['minor_ST2_Up'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] >= res_df['minor_ST3_Up'].iloc[j] and hedge_cnt == 1:\n","\n","          #   h_ep = res_df['close'].iloc[j]\n","          #   hedge_cnt -= 1\n","          #   h_i = j\n","\n","\n","          # -------------- ultimate limit tp -------------- #\n","          if not config.tp_set.non_tp:\n","\n","            #               1. by price line             #\n","            if config.tp_set.tp_type == 'LIMIT' or config.tp_set.tp_type == \"BOTH\":\n","\n","              for s_i, short_tp_ in enumerate(short_tps):\n","\n","                #     decay adjustment    #\n","                #     tp_j includes dynamic_j   #\n","                decay_share = (j - initial_i) // config.tp_set.decay_term\n","                decay_remain = (j - initial_i) % config.tp_set.decay_term\n","                if j != initial_i and decay_remain == 0:\n","                  short_tp_.iloc[tp_j] += res_df['h_short_rtc_gap_{}'.format(strat_version)].iloc[initial_i] * config.tr_set.decay_gap * decay_share\n","\n","                if res_df['low'].iloc[j] <= short_tp_.iloc[tp_j] and partial_tp_cnt == s_i: # we use static tp now\n","                # if res_df['low'].iloc[j] <= short_tp_.iloc[j]:\n","                # if res_df['low'].iloc[j] <= short_tp_.iloc[j] <= res_df['high'].iloc[j]: --> Ïù¥Í±¥ ÏûòÎ™ªÎêòÏóàÏùå\n","\n","                  if s_i == len(short_tps) - 1:\n","                    trade_done = 1\n","                  \n","                  partial_tp_cnt += 1\n","\n","                  #         dynamic tp        #\n","                  # if 0:\n","                  if short_tp_.iloc[j] != short_tp_.iloc[j - 1] and not config.tp_set.static_tp:\n","\n","                    #   tp limit Ïù¥ Î∂àÍ∞ÄÌïú Í≤ΩÏö∞ = open Ïù¥ Ïù¥ÎØ∏, tp Î•º ÎÑòÏùÄ Í≤ΩÏö∞ # \n","                    # if res_df['open'].iloc[j] < short_tp_.iloc[initial_i]:\n","                    if res_df['open'].iloc[j] < short_tp_.iloc[j]:\n","\n","                      # tp = short_tp_.iloc[initial_i]\n","                      tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"d-short_open {}\".format(strat_version))\n","\n","                    #   tp limit Ïù¥ Í∞ÄÎä•Ìïú Í≤ΩÏö∞ = open Ïù¥ ÏïÑÏßÅ, tp Î•º ÎÑòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ # \n","                    else:\n","\n","                      # tp = short_tp_.iloc[initial_i]\n","                      tp = short_tp_.iloc[j]\n","                      # tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"d-short_tp {}\".format(strat_version))\n","\n","                  #         static tp         #\n","                  else:\n","                    \n","                    #   tp limit Ïù¥ Î∂àÍ∞ÄÌïú Í≤ΩÏö∞ = open Ïù¥ Ïù¥ÎØ∏, tp Î•º ÎÑòÏùÄ Í≤ΩÏö∞ # \n","                    #   non_inversion Ïùò Í≤ΩÏö∞, short_tp Í∞Ä Í∞ÄÎä•Ìï®   #              \n","\n","                    # if res_df['open'].iloc[j] < short_tp_.iloc[initial_i]:\n","                    if res_df['open'].iloc[j] < short_tp_.iloc[tp_j]:\n","\n","                      # tp = short_tp_.iloc[initial_i]\n","                      tp = short_tp_.iloc[tp_j]\n","\n","                      # tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"s-short_tp {}\".format(strat_version))\n","\n","                    #   tp limit Ïù¥ Í∞ÄÎä•Ìïú Í≤ΩÏö∞ = open Ïù¥ ÏïÑÏßÅ, tp Î•º ÎÑòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ # \n","                    else:\n","\n","                      # tp = short_tp_.iloc[initial_i]\n","                      tp = short_tp_.iloc[tp_j]\n","\n","                      # tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"s-short_tp {}\".format(strat_version))   \n","\n","                  tp_list.append(tp)     \n","                  tp_idx_list.append(j)\n","                  fee += config.trader_set.limit_fee\n","\n","\n","            #           2. by signal        #\n","            if config.tp_set.tp_type == 'MARKET' or (config.tp_set.tp_type == \"BOTH\" and not trade_done):\n","\n","              market_tp = 0\n","\n","              # -------------- sar tp -------------- #\n","              # if (res_df['high'].iloc[j] >= res_df['sar2'].iloc[j]) & \\\n","              #   (res_df['high'].iloc[j - 1] < res_df['sar2'].iloc[j - 1]) & \\\n","              #   (res_df['high'].iloc[j - 2] < res_df['sar2'].iloc[j - 2]):\n","\n","              #       inversion     #\n","              # if (res_df['low'].iloc[j] <= res_df['sar2'].iloc[j]) & \\\n","              #   (res_df['low'].iloc[j - 1] > res_df['sar2'].iloc[j - 1]) & \\\n","              #   (res_df['low'].iloc[j - 2] > res_df['sar2'].iloc[j - 2]):\n","              \n","              # ----------- st short ----------- #\n","              # if res_df['close'].iloc[j] <= res_df['short_tp'].iloc[tp_j]:\n","              \n","              # -------------- sar pb tp -------------- #\n","              # if res_df['low'].iloc[j] <= res_df['short_tp'].iloc[initial_i]:\n","\n","              # -------------- st tp -------------- #\n","              # if res_df['close'].iloc[j] > res_df['middle_line'].iloc[j]:       \n","\n","              # -------------- fisher tp -------------- #            \n","              # if entry[j] == 1:\n","              \n","              # -------------- timestamp -------------- #\n","              if config.tp_set.time_tp:\n","                if np_timeidx[j] % config.loc_set.zone.c_itv_ticks == config.loc_set.zone.c_itv_ticks - 1 and \\\n","                  j - initial_i >= config.loc_set.zone.c_itv_ticks:\n","                  market_tp = 1     \n","\n","              # -------------- rsi -------------- #\n","              # if strat_version in ['v7_3', 'v5_2']:\n","              if strat_version in ['v7_3']:\n","                if (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j - 1] >= 50 - config.loc_set.point.osc_band) & \\\n","                                (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j] < 50 - config.loc_set.point.osc_band):   \n","                # if (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j - 1] <= 50 - config.loc_set.point.osc_band) & \\\n","                #                  (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j] > 50 - config.loc_set.point.osc_band):                            \n","                  market_tp = 1\n","\n","                # -------------- cci -------------- #\n","                # if (res_df['cci_%s' % config.loc_set.point.exp_itv].iloc[j - 1] >= -config.loc_set.point.osc_band) & \\\n","                #                  (res_df['cci_%s' % config.loc_set.point.exp_itv].iloc[j] < -config.loc_set.point.osc_band):                            \n","                #   market_tp = 1 \n","\n","              # ---------------------------- early out ---------------------------- #\n","\n","              # #         rsi slight touch        #\n","              if allow_osc_touch:\n","                if (np.min(res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[initial_i:j]) < 50 - config.loc_set.point.osc_band + rsi_gap) & \\\n","                  (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j] >= 50):\n","                  market_tp = 1              \n","                           \n","              #           tp early out          #\n","              # # if (np.min(res_df['low'].iloc[e_j:j]) < res_df['short_tp'].iloc[tp_j]) & \\\n","              # if (np.min(res_df['low'].iloc[e_j:j]) < res_df['h_short_rtc_1'].iloc[tp_j] - res_df['h_short_rtc_gap'].iloc[tp_j] * early_out_tpg) & \\\n","              #   (res_df['close'].iloc[j] >= res_df['short_ep'].iloc[ep_j]):\n","              #   market_tp = 1 \n","\n","              # if strat_version == \"v7\":\n","              #   if res_df['dc_upper_1m'].iloc[j] > res_df['dc_upper_5m'].iloc[j]:\n","              #     market_tp = 1\n","\n","              #         bb_upper early out        #\n","              if strat_version in [\"v5_2\"]:\n","                if res_df['close'].iloc[j] < res_df['bb_lower_5m'].iloc[j] < res_df['close'].iloc[j - 1]:\n","                  cross_on = 1\n","\n","                if cross_on == 1 and res_df['close'].iloc[j] > res_df['bb_upper_5m'].iloc[j] > res_df['close'].iloc[j - 1]:\n","                  market_tp = 1\n","\n","              if market_tp:\n","                \n","                tp = res_df['close'].iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                trade_done = 1\n","\n","                if trade_done:\n","                  tp_state_list.append(\"short close tp\")\n","\n","                tp_list.append(tp) \n","                tp_idx_list.append(j)\n","                fee += config.trader_set.market_fee\n","\n","\n","                  \n","          # -------------- out -------------- #\n","          if not trade_done and config.out_set.use_out and j != len(res_df) - 1:\n","\n","            # -------------- macd -------------- #\n","            # if res_df['macd_hist3'].iloc[j] > 0:  #  macd out\n","            # if res_df['macd_hist3'].iloc[i] < 0 and res_df['macd_hist3'].iloc[j] > 0:\n","\n","            # -------------- st config.out_set.retouch -------------- #\n","            # out = 1 ÏÉÅÌÉúÎ©¥ ÎèôÏùº tick ÏóêÏÑú config.out_set.retouch Î•º Ï°∞ÏÇ¨Ìï† Í±∞Í∏∞ ÎïåÎ¨∏Ïóê, Î®ºÏ†Ä Í≤ÄÏÇ¨Ìï®\n","            # Í∑∏Î¶¨Í≥†, out Í∏∞Ï§ÄÏù¥ close Îùº Ïù¥Í≤å ÎßûÏùå \n","            # close Í∞Ä short_out Î≥¥Îã§ Ïò¨ÎùºÍ∞ÄÏûàÎäî ÏÉÅÌÉúÏùºÌÖåÎãà low Î•º Ï°∞ÏÇ¨ÌïòÎäîÍ≤å ÎßûÏùå           \n","            # if out and res_df['low'].iloc[j] <= short_out.iloc[out_j]:\n","            #   config.out_set.retouch = 1\n","\n","            \n","             # ------- ÏùºÏ†ïÏãúÍ∞Ñ Ïù¥ÏÉÅ, dynamic_out Ï†ÅÏö© ------ #\n","            try:\n","              if j - out_idx >= config.out_set.retouch_out_period:\n","                static_short_out = res_df['short_out_{}'.format(strat_version)].iloc[j]\n","            \n","            except Exception as e:\n","              pass\n","\n","              # ------- static out ------ #\n","            try:\n","              if out and res_df['low'].iloc[j] <= static_short_out:\n","                config.out_set.retouch = 1\n","            except Exception as e:\n","              pass\n","\n","            \n","              # ------- config.out_set.retouch out ------ #\n","            # if out and res_df['low'].iloc[j] <= short_out2.iloc[out_j]:\n","            #   config.out_set.retouch = 1\n","\n","\n","            # -------------- st -------------- #\n","            # if res_df['close'].iloc[j] > res_df['middle_line'].iloc[j]:    \n","            # if res_df['close'].iloc[j] > res_df['minor_ST3_Up'].iloc[j]:\n","            # if res_df['close'].iloc[j] > upper_middle.iloc[j]:\n","            # if res_df['close'].iloc[j] > res_df['minor_ST1_Up'].iloc[j]:\n","            if out == 0:              \n","              if config.out_set.hl_out:\n","                if res_df['high'].iloc[j] >= res_df['short_out_{}'.format(strat_version)].iloc[out_j]: # check out only once\n","                  out = 1\n","\n","              else:\n","                if res_df['close'].iloc[j] >= res_df['short_out_{}'.format(strat_version)].iloc[out_j]: # check out only once\n","                  out = 1\n","\n","              # out_idx = j\n","              # static_short_out = short_out.iloc[out_j]\n","              # if config.out_set.second_out:              \n","                # static_short_out = short_out.iloc[out_j] + res_df['st_gap'].iloc[out_j] * config.out_set.second_out_gap\n","            \n","            # if out == 0 and res_df['high'].iloc[j] >= short_out.iloc[out_j]: # check out only once\n","            #   out = 1\n","             \n","\n","            # -------------- sma -------------- #\n","            # if res_df['close'].iloc[j] > res_df[sma].iloc[j]:\n","\n","            # -------------- sar -------------- #\n","            # if res_df['close'].iloc[j] > res_df['minor_ST3_Up'].iloc[j] \\\n","            #   or res_df['sar2'].iloc[j] <= res_df['high'].iloc[j]:\n","            # if res_df['close'].iloc[j] > short_out.iloc[initial_i]: # or \\\n","            #   out = 1\n","              # res_df['sar2_uptrend'].iloc[j] == 1: # or \\\n","\n","            # if res_df['sar2_uptrend'].iloc[j] == 1:\n","\n","            #   if prev_sar is None:\n","            #     prev_sar = res_df['sar2'].iloc[j - 1]\n","              \n","            #   if res_df['close'].iloc[j] > prev_sar:\n","            #     out = 1\n","\n","            # else:\n","            #   if res_df['close'].iloc[j] > res_df['sar2'].iloc[j]:\n","            #     out = 1\n","              \n","            # -------------- hl -------------- #\n","            # if res_df['close'].iloc[j] > short_out.iloc[tp_j]:\n","            \n","            # -------------- stoch -------------- #\n","            # if res_df['stoch'].iloc[j - 2] >= res_df['stoch'].iloc[j - 1] and \\\n","            #   res_df['stoch'].iloc[j - 1] < res_df['stoch'].iloc[j] and \\\n","            #   res_df['stoch'].iloc[j - 1] <= stoch_lower:\n","            #   out = 1\n","\n","            # config.out_set.retouch 1 Í≤ΩÏö∞, config.out_set.retouch Ï°∞Í±¥ÎèÑ ÏûàÏñ¥ÏïºÌï®\n","            if out:\n","              if config.out_set.retouch:\n","                if config.out_set.retouch:\n","                  pass\n","                else:\n","                    continue\n","\n","              else:\n","                pass\n","\n","              if config.out_set.price_restoration:\n","                tp = res_df['short_out_{}'.format(strat_version)].iloc[out_j]\n","                if config.out_set.second_out:\n","                  tp = res_df['short_out2_{}'.format(strat_version)].iloc[out_j]\n","                \n","                # if res_df['close'].iloc[j] > tp: # Ïù¥ Í≤ΩÏö∞Î•º protect ÌïòÎäîÍ±¥ insane ÏûÑ\n","                #   tp = res_df['close'].iloc[j]\n","\n","              else:\n","                \n","                if res_df['open'].iloc[j] >= res_df['short_out_{}'.format(strat_version)].iloc[out_j]:\n","                  tp = res_df['open'].iloc[j]\n","                else:\n","                  if config.out_set.hl_out:\n","                    tp = res_df['short_out_{}'.format(strat_version)].iloc[out_j]\n","                  else:\n","                    tp = res_df['close'].iloc[j]\n","                \n","                # if not config.out_set.static_out:\n","                #   if res_df['open'].iloc[j] >= res_df['short_out_{}'.format(strat_version)].iloc[out_j]: # close Í∏∞Ï§ÄÏù¥Îùº Ïù¥Îü∞ Ï°∞Í±¥ÏùÑ Î™ªÏîÄ, Ï∞®ÎùºÎ¶¨ j Î•º i Î∂ÄÌÑ∞ ÏãúÏûë\n","                #     tp = res_df['open'].iloc[j]\n","                #   else:\n","                #     tp = res_df['close'].iloc[j]\n","\n","                # else:\n","                #   tp = res_df['close'].iloc[j]\n","\n","              \n","              if config.out_set.retouch: # out Í≥º open ÎπÑÍµê\n","                if config.out_set.second_out:\n","                  if res_df['open'].iloc[j] <= res_df['short_out2_{}'.format(strat_version)].iloc[out_j]:\n","                    tp = res_df['open'].iloc[j]\n","                else:\n","                  if res_df['open'].iloc[j] <= res_df['short_out_{}'.format(strat_version)].iloc[out_j]:\n","                    tp = res_df['open'].iloc[j]\n","\n","                try: # static_short_out Ïù∏ Í≤ΩÏö∞, open ÎèÑ Í≥†Î†§Ìïú tp set\n","                  if res_df['open'].iloc[j] <= static_short_out:\n","                    tp = res_df['open'].iloc[j]\n","                  else:\n","                    tp = static_short_out\n","                except Exception as e:\n","                  pass\n","\n","              trade_done = 1\n","              tp_state_list.append(\"short close_out {}\".format(strat_version))\n","            \n","\n","              tp_list.append(tp) \n","              tp_idx_list.append(j)\n","              fee += config.trader_set.market_fee\n","\n","\n","          # -------------- non tp -------------- #\n","          if j == len(res_df) - 1:\n","            trade_done = 1\n","            tp = res_df['close'].iloc[j]\n","            tp_list.append(tp) \n","            tp_idx_list.append(j)\n","            fee += config.trader_set.market_fee\n","          \n","\n","\n","          # -------------- append trade data -------------- #\n","          if trade_done:\n","\n","            # --------------- tp_ratio info --------------- #\n","            #         Todo        #\n","            #          short_out Ïóê ÎåÄÌïú Ï†ïÎ≥¥Îäî Ï°¥Ïû¨Ìï®,\n","            #          short_tp Ïóê ÎåÄÌïú Ï†ïÎ≥¥Îäî Ï°¥Ïû¨Ìï®,\n","            #       => initial_i Í∏∞Ï§ÄÏúºÎ°ú ,dynamic | static set ÏùÑ tp ÏôÄ out Ïóê Í∞ÅÍ∞Å Ï†ÅÏö©\n","            #          config.lvrg_set.leverage Îäî initial_i Í∏∞Ï§ÄÏúºÎ°ú Ï†ÅÏö©ÎêòÎãàÍπå\n","            #          Ï†ÅÏö©Îêú tp & out ÏúºÎ°ú abs((tp - ep) / (ep - out)) Í≥ÑÏÇ∞\n","            try:\n","              if config.out_set.use_out:\n","                done_tp = res_df['short_tp_{}'.format(strat_version)].iloc[tp_j]\n","                done_out = res_df['short_out_{}'.format(strat_version)].iloc[out_j]\n","\n","                if done_out <= ep_list[0]: # loss > 1\n","                  dr = np.nan\n","                  tp_ratio = np.nan\n","                else:                \n","                  dr = ((ep_list[0] - done_tp) / (done_out - ep_list[0]))\n","                  tp_ratio = ((ep_list[0] - done_tp - tp_fee * ep_list[0]) / (done_out - ep_list[0] + out_fee * ep_list[0]))\n","                \n","              else:\n","                dr = np.nan\n","                tp_ratio = np.nan  \n","\n","\n","            except Exception as e:\n","              dr = np.nan \n","              tp_ratio = np.nan  \n","            \n","            tp_ratio_list.append(tp_ratio)\n","            short_tp_ratio_list.append(tp_ratio)     \n","            dr_list.append(dr)\n","            short_dr_list.append(dr)   \n","\n","\n","            # -------------------- partial tp -------------------- #\n","            #        1. len(tp_list) Ïóê ÎåÄÏùëÌïòÎäî qty_list Î•º ÎßåÎì§Ïñ¥ÏïºÌï®    #\n","            #        2. temp_pr_list Î•º ÎßåÎì§Ïñ¥ Ï¥ùÌï© + 1 ÏùÑ pr_list Ïóê Ï†ÄÏû•      #\n","            #        2-1. temp_pr = sum((ep / tp_list[i] - fee - 1) * qty_list[i])   #\n","            #        3. temp_pr_list Ïùò Ï≤´ tp ÏóêÎäî r_qty Î•º Ìï†ÎãπÌï®        #\n","            qty_list = []\n","            temp_pr_list = []\n","            r_qty = 1\n","            for q_i in range(len(tp_list) - 1, -1, -1):\n","\n","              if len(tp_list) == 1:\n","                temp_qty = r_qty\n","              else:\n","                if q_i !=0:\n","                  temp_qty = r_qty / config.tp_set.partial_qty_divider\n","                else:\n","                  temp_qty = r_qty\n","\n","              temp_pr = (ep_list[0] / tp_list[q_i] - fee - 1) * temp_qty * config.lvrg_set.leverage\n","              # temp_pr = (ep_list[0] / tp_list[q_i] - fee - 1) * temp_qty\n","              r_qty -= temp_qty\n","\n","              temp_pr_list.append(temp_pr)\n","              qty_list.append(temp_qty)\n","\n","            # if len(temp_pr_list) == 1:\n","            #   print(\"qty_list :\", qty_list)\n","            #   print(\"temp_pr_list :\", temp_pr_list)\n","\n","            temp_pr = sum(temp_pr_list) + 1\n","\n","            # -------------------- sub ep -> pr calc -------------------- #\n","            if len(ep_list) > 1:\n","            \n","              p_ep_pr = []\n","              for sub_ep_ in ep_list:\n","                sub_pr = (sub_ep_ / tp - fee - 1) * config.lvrg_set.leverage\n","                p_ep_pr.append(sub_pr)\n","\n","              temp_pr = sum(p_ep_pr) + 1\n","\n","              print(\"temp_pr :\", temp_pr)\n","\n","            # ------------ hedge + non_hedge pr summation ------------ #\n","            #         hedge pr direction is opposite to the origin       #\n","            hedge_pr = 1\n","            if hedge_cnt == 0:\n","\n","              #       hedge tp      #\n","              h_tp = res_df['close'].iloc[j]\n","              hedge_pr = (h_tp / h_ep - fee - 1) * config.lvrg_set.leverage  # hedge long\n","              temp_pr += hedge_pr\n","              h_j = j\n","\n","            \n","            # hh = max(res_df['high'].iloc[i:j + 1])\n","            hh = max(res_df['high'].iloc[i:j])    # pos. Ï†ïÎ¶¨ÌïòÍ∏∞ Î∞îÎ°ú ÏßÅÏ†ÑÍπåÏßÄ\n","            short_liq = (ep_list[0] / hh - fee - 1) * config.lvrg_set.leverage + 1\n","\n","            if j != len(res_df) - 1:\n","\n","              # ep_tp_list.append((ep, tp_list))  \n","              ep_tp_list.append((ep_list, tp_list))  \n","              # trade_list.append([initial_i, i, j])\n","              # trade_list.append((ep_idx_list, tp_idx_list))\n","              trade_list.append((ep_idx_list, out_idx_list, tp_idx_list))\n","\n","              liqd_list.append(short_liq)\n","              short_liqd_list.append(short_liq)\n","\n","              h_ep_tp_list.append((h_ep, h_tp))      # hedge ÎèÑ ep_tp_list Ï≤òÎüº Î≥ÄÍ≤ΩÌï¥Ï£ºÏñ¥ÏïºÌïòÎäîÎç∞ ÏïÑÏßÅ ÏïàÍ±¥ÎìúÎ¶º, Îî±Ìûà ÏÇ¨Ïö©Ìï† ÏùºÏù¥ ÏóÜÏñ¥Î≥¥Ïó¨   \n","              h_trade_list.append([initial_i, h_i, h_j])                \n","\n","              pr_list.append(temp_pr)\n","              fee_list.append(fee)\n","              short_list.append(temp_pr)\n","              short_fee_list.append(fee)\n","\n","              h_pr_list.append(hedge_pr)\n","              h_short_list.append(hedge_pr)\n","\n","              i = j\n","              break\n","\n","            else:\n","\n","              # ep_tp_list.append((ep_list, tp_list))\n","              # trade_list.append((ep_idx_list, tp_idx_list))\n","              # plot_check ÎïåÎ¨∏Ïóê, pr_list ÍπåÏßÄ ÌïòÍ≤åÎêòÎ©¥ acc_pr eval Ïù¥ Íº¨Ïù¥Í≤åÎåê\n","          \n","              # pr_list Î•º ÎÑ£ÏßÄ ÏïäÏùÑÍ±∞ÎãàÍπå, open_list ÏóêÏÑú Ìï¥Îãπ idx Îäî pop\n","              open_list.pop()\n","              zone_list.pop()\n","              side_list.pop()\n","              strat_ver_list.pop()\n","              \n","              #         tp ÎØ∏Ï≤¥Í≤∞ survey        #\n","              nontp_liqd_list.append(short_liq)\n","              nontp_short_liqd_list.append(short_liq)\n","              nontp_short_indexs.append(i)\n","              nontp_short_ep_list.append(ep_list[0])\n","\n","              nontp_short_pr = (ep_list[0] / tp - fee - 1) * config.lvrg_set.leverage + 1\n","              nontp_pr_list.append(nontp_short_pr)\n","              nontp_short_pr_list.append(nontp_short_pr)\n","\n","\n","      #                  long  phase                #\n","      # elif res_df['entry'][i] == -config.ep_set.short_entry_score:       \n","      # elif res_df['entry_{}'.format(config1.strat_version)][i] == -config1.ep_set.short_entry_score or \\\n","      #     res_df['entry_{}'.format(config2.strat_version)][i] == -config2.ep_set.short_entry_score: \n","      elif run == 1:\n","      \n","        #     Ïù¥Í≥≥ÏóêÏÑú ÏÇ¨Ïö©Îê† config Í∞Ä Ï†ïÌï¥Ïßê    #\n","        if res_df['entry_{}'.format(config1.strat_version)][i] == -config1.ep_set.short_entry_score:\n","          config = config1\n","        else:\n","          config = config2\n","\n","        # print(\"entry check passed !\")\n","\n","        initial_i = i\n","\n","\n","        if override:\n","          res_df, open_side, zone = long_ep_loc(res_df, config, i, np_timeidx, show_detail)\n","        else:          \n","          res_df, open_side, zone = utils_public.long_ep_loc(res_df, config, i, np_timeidx, show_detail)\n","          if multi_mode:\n","            if config.strat_version == 'v5_2' and open_side is None:\n","              res_df, open_side, zone = utils_public.long_ep_loc(res_df, config3, i, np_timeidx, show_detail)\n","\n","              if open_side is not None: \n","                config = config3\n","\n","\n","        # -------------- mr_score summation -------------- #\n","        if open_side is not None:        \n","          pass\n","        \n","        else:\n","          i += 1\n","          if i >= len(res_df):\n","            break\n","          continue\n","\n","        # print(\"long_ep_loc passed !\")\n","\n","        strat_version = config.strat_version\n","\n","        # ------- fee init ------- #\n","        if config.ep_set.entry_type == 'LIMIT':\n","          fee = config.trader_set.limit_fee\n","        else:\n","          fee = config.trader_set.market_fee\n","        \n","        # --------------- set partial tp --------------- #\n","        short_tps = [res_df['short_tp_{}'.format(strat_version)]]\n","        long_tps = [res_df['long_tp_{}'.format(strat_version)]]\n","\n","        # short_tps = [short_tp2, short_tp] # org\n","        # long_tps = [long_tp2, long_tp]\n","        \n","        # short_tps = [short_tp, short_tp2]\n","        # long_tps = [long_tp, long_tp2]\n","        # print(\"i after long_ep_loc :\", i)\n","\n","        if config.out_set.static_out:\n","          p_i = initial_i\n","        else:\n","          p_i = i\n","\n","        ep_j = initial_i\n","        out_j = initial_i\n","      \n","        # -------------- limit waiting const. -------------- #      \n","        if config.ep_set.entry_type == \"LIMIT\":\n","\n","          allow_ep_in = 0 if strat_version in [\"v5_2\"] else 1\n","          # allow_ep_in = 1\n","          entry_done = 0\n","          entry_open = 0\n","          prev_sar = None\n","\n","          # for e_j in range(i, len(res_df)):   \n","\n","          if i + 1 >= len(res_df):  # i should be checked if e_j starts from i+1\n","            break\n","          for e_j in range(i + 1, len(res_df)):  # entry Í∞Ä close Í∏∞Ï§ÄÏùº Í≤ΩÏö∞ ÏÇ¨Ïö© (open Í∏∞Ï§ÄÏùº Í≤ΩÏö∞ i Î∂ÄÌÑ∞ ÏãúÏûëÌï¥ÎèÑ Î¨¥Î∞©Ìï®)\n","            \n","            if not config.ep_set.static_ep:\n","              ep_j = e_j  \n","              out_j = e_j\n","            \n","            if config.tp_set.static_tp:\n","              # if config.ep_set.tpout_onexec:\n","              #   tp_j = e_j\n","              # else:\n","                tp_j = initial_i\n","            else:\n","              tp_j = e_j  \n","\n","            \n","            #          np.inf ep         #\n","            # if long_ep.iloc[initial_i] == np.inf:\n","            #   break\n","            \n","            #     1. check ep_out     #\n","            if config.loc_set.zone.ei_k != \"None\":\n","\n","              if res_df['high'].iloc[e_j] >= res_df['h_long_rtc_1_{}'.format(strat_version)].iloc[tp_j] + \\\n","                res_df['h_long_rtc_gap_{}'.format(strat_version)].iloc[tp_j] * config.loc_set.zone.ei_k:\n","              # if res_df['high'].iloc[e_j] >= res_df['long_tp_{}'.format(strat_version)].iloc[tp_j]:                \n","              # if np_timeidx[e_j] % config.loc_set.point.tf_entry == config.loc_set.point.tf_entry - 1:\n","                break\n","\n","              # elif (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[e_j - 1] <= 50 + config.loc_set.point.osc_band) & \\\n","              #                  (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[e_j] > 50 + config.loc_set.point.osc_band):\n","              #   break            \n","\n","            # if config.loc_set.zone.c_itv_ticks != \"None\":\n","\n","            #   if np_timeidx[e_j] % config.loc_set.zone.c_itv_ticks == config.loc_set.zone.c_itv_ticks - 1:\n","            #     break\n","\n","            #     2. ep_loc.point2\n","            if strat_version == \"v5_2\" and allow_ep_in == 0:\n","              if (res_df['dc_lower_1m'].iloc[e_j - 1] >= res_df['dc_lower_15m'].iloc[e_j]) & \\\n","                  (res_df['dc_lower_15m'].iloc[e_j - 1] != res_df['dc_lower_15m'].iloc[e_j]): # & \\\n","              # if (res_df['dc_lower_1m'].iloc[e_j - 1] >= res_df['dc_lower_5m'].iloc[e_j]) & \\\n","              #     (res_df['dc_lower_5m'].iloc[e_j - 1] != res_df['dc_lower_5m'].iloc[e_j]): # & \\\n","                  # (res_df['dc_lower_15m'].iloc[e_j] >= res_df['ema_5m'].iloc[e_j]):\n","                allow_ep_in = 1\n","                out_j = e_j\n","                # ep_j = e_j\n","                # continue  # limit entry Ïùò Í≤ΩÏö∞ ep_loc.point2 ÏôÑÎ£å ÏãúÏ†ê Ïù¥ÌõÑÎ°ú ÏßÑÏûÖÏù¥ Í∞ÄÎä•Ìïú Ï†ê\n","                #     htf indi. Í∞Ä backi2 Í∏∞Ï§ÄÏù¥Îùº continue ÌïòÏßÄ ÏïäÏïÑÎèÑ Îê®\n","              \n","              #     2-1. ep_out (ep_loc2) by ep_loc.point\n","              # if allow_ep_in and config.loc_set.zone.tr_thresh != \"None\":\n","              #   ep_ = res_df['close'].iloc[ep_j - 1]\n","              #   tr = ((res_df['long_tp_{}'.format(strat_version)].iloc[tp_j] - ep_ - tp_fee * ep_) / (ep_ - res_df['long_out_{}'.format(strat_version)].iloc[out_j] + out_fee * ep_))\n","              #   # print(\"tr in long :\", tr)\n","              #   if tr < config.loc_set.zone.tr_thresh:\n","              #     break\n","\n","            #     3. check ep_in      #\n","            if allow_ep_in and res_df['low'].iloc[e_j] <= res_df['long_ep_{}'.format(strat_version)].iloc[ep_j]:\n","              entry_done = 1\n","              # print(\"e_j :\", e_j)\n","              \n","              #     Ïù¥ÎØ∏, e_j open Ïù¥ ep Î≥¥Îã§ ÎÇÆÏùÄ Í≤ΩÏö∞, entry[initial_i] => -2 Î°ú Î≥ÄÍ≤Ω   #\n","              if res_df['open'].iloc[e_j] <= res_df['long_ep_{}'.format(strat_version)].iloc[ep_j]:\n","                entry_open = 1\n","\n","              break\n","\n","\n","          i = e_j\n","          # print(\"i = e_j :\", i)\n","\n","          if entry_done:      \n","            pass\n","            # print(\"i, entry_done :\", i, entry_done)\n","\n","          else:\n","            i += 1\n","            if i >= len(res_df):\n","              # print(\"i :\", i)\n","              break\n","\n","            # print(\"i in continue :\", i)          \n","            continue\n","\n","\n","        # ---------------- end wait ---------------- #\n","        # if e_j - initial_i >= 200:\n","        #   print(\"e_j, initial_i :\", e_j, initial_i)\n","        \n","        # print(i)\n","\n","        open_list.append(initial_i)\n","        zone_list.append(zone)\n","        side_list.append('l')\n","        strat_ver_list.append(strat_version)\n","\n","        if config.ep_set.entry_type == 'MARKET':\n","          ep_list = [res_df['close'].iloc[ep_j]]\n","        else:\n","          if not entry_open:\n","            ep_list = [res_df['long_ep_{}'.format(strat_version)].iloc[ep_j]]    # dynamic_ep Ïù∏ Í≤ΩÏö∞ÏóêÎèÑ e_j Í∞Ä ep_j Î°ú ÎåÄÏùëÎêòÍ∏∞ ÎïåÎ¨∏Ïóê ep_j Îßå ÏÇ¨Ïö©Ìï¥ÎèÑ Î¨¥Í¥Ä\n","          else:\n","            # try:\n","            #   ep_list = [res_df['open'].iloc[e_j]]\n","            # except Exception as e:\n","            fee = config.trader_set.market_fee\n","            ep_list = [res_df['open'].iloc[e_j]]  # --> Ï≤¥Í≤∞Ïù¥ ÎêòÎäî e_j idx Í∏∞Ï§ÄÏúºÎ°ú ÌïòÎäîÍ≤å ÎßûÏùå\n","\n","        if not config.lvrg_set.static_lvrg:\n","\n","          ep_ = ep_list[0]\n","          out_ = res_df['long_out_{}'.format(strat_version)].iloc[out_j]\n","          if override:\n","            config.lvrg_set.leverage = lvrg_set(res_df, config, \"BUY\", ep_, out_, fee)\n","          else:\n","            config.lvrg_set.leverage = utils_public.lvrg_set(res_df, config, \"BUY\", ep_, out_, fee)\n","\n","          # -------------- leverage rejection -------------- #\n","          if config.lvrg_set.leverage == None:\n","            open_list.pop()\n","            zone_list.pop()\n","            side_list.pop()\n","            strat_ver_list.pop()\n","\n","            i += 1\n","            if i >= len(res_df):\n","              break\n","            continue   \n","\n","        leverage_list.append(config.lvrg_set.leverage)\n","          \n","        if config.ep_set.entry_type == \"MARKET\":\n","          ep_idx_list = [ep_j]\n","        else:\n","          ep_idx_list = [e_j]\n","\n","        out_idx_list = [out_j]\n","\n","        tp_list = []\n","        tp_idx_list = []\n","\n","        partial_tp_cnt = 0\n","        hedge_cnt = 1\n","\n","        h_ep, h_tp = None, None        \n","        h_i, h_j = None, None      \n","\n","        trade_done = 0\n","        cross_on = 0\n","        out = 0          \n","        config.out_set.retouch = 0\n","\n","\n","        if i == len(res_df) - 1: # if j start from i + 1 \n","          open_list.pop()\n","          zone_list.pop()\n","          side_list.pop()\n","          strat_ver_list.pop()\n","\n","        for j in range(i + 1, len(res_df)):\n","\n","        # for j in range(i, len(res_df)):  \n","          \n","          if config.tp_set.static_tp:\n","            if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","              tp_j = ep_j\n","            else:\n","              tp_j = initial_i\n","          else:\n","            tp_j = j\n","\n","          if config.out_set.static_out:\n","            if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","              out_j = ep_j\n","            # else:           \n","            #   out_j = initial_i\n","          else:\n","            out_j = j   \n","\n","          # -------------- hedge only once -------------- #\n","          #             ÏùºÎã®, h_quantity Îäî Ï¥àÍ∏∞ ÏßÑÏûÖÍ≥º ÎèôÏùºÌïòÍ≤å ÏÑ§Ï†ï         #\n","          # if res_df['low'].iloc[j] <= res_df['minor_ST2_Down'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] <= res_df['minor_ST2_Down'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] <= res_df['minor_ST3_Down'].iloc[j] and hedge_cnt == 1:\n","\n","          #   h_ep = res_df['close'].iloc[j]\n","          #   hedge_cnt -= 1\n","          #   h_i = j\n","\n","          # -------------- sub ep -------------- #\n","          # if res_df['low'].iloc[j - 1] >= res_df['sar2'].iloc[j - 1] and res_df['low'].iloc[j] < res_df['sar2'].iloc[j]:\n","            \n","          #   sub_ep = res_df['sar2'].iloc[j - 1]\n","\n","          #   if sub_ep > ep_list[-1]:\n","          #     ep_list.append(sub_ep)\n","          #     ep_idx_list.append(j)\n","\n","\n","          # -------------- ultimate tp -------------- #\n","          if not config.tp_set.non_tp:\n","            #            1. by level          #\n","            if config.tp_set.tp_type == \"LIMIT\" or config.tp_set.tp_type == \"BOTH\":\n","              \n","\n","              for l_i, long_tp_ in enumerate(long_tps):\n","              \n","                #     decay adjustment    #\n","                #     tp_j includes dynamic_j   #\n","                decay_share = (j - initial_i) // config.tp_set.decay_term\n","                decay_remain = (j - initial_i) % config.tp_set.decay_term\n","                if j != initial_i and decay_remain == 0:\n","                  long_tp_.iloc[tp_j] -= res_df['h_long_rtc_gap_{}'.format(strat_version)].iloc[initial_i] * config.tr_set.decay_gap * decay_share\n","\n","\n","                if res_df['high'].iloc[j] >= long_tp_.iloc[tp_j] and partial_tp_cnt == l_i:\n","                # if res_df['high'].iloc[j] >= long_tp.iloc[j]:\n","\n","                  if l_i == len(long_tps) - 1:\n","                    trade_done = 1\n","\n","                  partial_tp_cnt += 1\n","\n","                  #         dynamic tp        #\n","                  # if 0:\n","                  if long_tp_.iloc[j] != long_tp_.iloc[j - 1] and not config.tp_set.static_tp:\n","\n","                    #   tp limit Ïù¥ Î∂àÍ∞ÄÌïú Í≤ΩÏö∞ = open Ïù¥ Ïù¥ÎØ∏, tp Î•º ÎÑòÏùÄ Í≤ΩÏö∞ # \n","                    # if res_df['open'].iloc[j] >= long_tp_.iloc[initial_i]:\n","                    if res_df['open'].iloc[j] >= long_tp_.iloc[j]:\n","\n","                      # tp = long_tp_.iloc[initial_i]\n","                      tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"d-long_open {}\".format(strat_version))\n","\n","                    \n","                    #   tp limit Ïù¥ Í∞ÄÎä•Ìïú Í≤ΩÏö∞ = open Ïù¥ ÏïÑÏßÅ, tp Î•º ÎÑòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ # \n","                    else:\n","                      \n","                      # tp = long_tp_.iloc[initial_i]\n","                      tp = long_tp_.iloc[j]\n","                      # tp = res_df['open'].iloc[j]\n","                      \n","                      if trade_done:\n","                        tp_state_list.append(\"d-long_tp {}\".format(strat_version))\n","\n","                  #         static tp         #\n","                  else:\n","\n","                    #   tp limit Ïù¥ Î∂àÍ∞ÄÌïú Í≤ΩÏö∞ = open Ïù¥ Ïù¥ÎØ∏, tp Î•º ÎÑòÏùÄ Í≤ΩÏö∞ # \n","                    #   non_inversion Ïùò Í≤ΩÏö∞, short_tp Í∞Ä Í∞ÄÎä•Ìï®   #\n","\n","                    if res_df['open'].iloc[j] >= long_tp_.iloc[tp_j]:\n","                    # if res_df['open'].iloc[j] >= long_tp_.iloc[initial_i]:\n","\n","                      # tp = long_tp_.iloc[initial_i]\n","                      tp = long_tp_.iloc[tp_j]\n","\n","                      # tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"s-long_tp {}\".format(strat_version))\n","\n","                    \n","                    #   tp limit Ïù¥ Í∞ÄÎä•Ìïú Í≤ΩÏö∞ = open Ïù¥ ÏïÑÏßÅ, tp Î•º ÎÑòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ # \n","                    else:\n","                      \n","                      # tp = long_tp_.iloc[initial_i]\n","                      tp = long_tp_.iloc[tp_j]\n","\n","                      # tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"s-long_tp {}\".format(strat_version))         \n","                  \n","                  tp_list.append(tp)\n","                  tp_idx_list.append(j)\n","                  fee += config.trader_set.limit_fee\n","\n","            #           2. by time        #\n","            if config.tp_set.tp_type == 'MARKET' or (config.tp_set.tp_type == \"BOTH\" and not trade_done):\n","\n","              market_tp = 0\n","\n","              # -------------- sar tp -------------- #\n","              # if (res_df['low'].iloc[j] <= res_df['sar2'].iloc[j]) & \\\n","              #   (res_df['low'].iloc[j - 1] > res_df['sar2'].iloc[j - 1]) & \\\n","              #   (res_df['low'].iloc[j - 2] > res_df['sar2'].iloc[j - 2]):\n","              \n","              #       inversion     #\n","              # if (res_df['high'].iloc[j] >= res_df['sar2'].iloc[j]) & \\\n","              #   (res_df['high'].iloc[j - 1] < res_df['sar2'].iloc[j - 1]) & \\\n","              #   (res_df['high'].iloc[j - 2] < res_df['sar2'].iloc[j - 2]):\n","\n","\n","              # ----------- st long ----------- #\n","              # if res_df['close'].iloc[j] >= res_df['long_tp'].iloc[tp_j]:\n","\n","              # -------------- sar pb tp -------------- #\n","              # if res_df['high'].iloc[j] >= res_df['long_tp'].iloc[initial_i]:\n","\n","              # -------------- st tp -------------- #\n","              # if res_df['close'].iloc[j] < res_df['middle_line'].iloc[j]:\n","\n","              # -------------- fisher tp -------------- #\n","              # if entry[j] == -1:\n","              \n","              # -------------- timestamp -------------- #\n","              if config.tp_set.time_tp:\n","                if np_timeidx[j] % config.loc_set.zone.c_itv_ticks == config.loc_set.zone.c_itv_ticks - 1 and \\\n","                  j - initial_i >= config.loc_set.zone.c_itv_ticks:\n","                  market_tp = 1\n","\n","              # -------------- rsi -------------- #\n","              # if strat_version in ['v7_3', 'v5_2']:\n","              if strat_version in ['v7_3']:\n","                if (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j - 1] <= 50 + config.loc_set.point.osc_band) & \\\n","                                (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j] > 50 + config.loc_set.point.osc_band):\n","                # if (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j - 1] >= 50 + config.loc_set.point.osc_band) & \\\n","                #                  (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j] < 50 + config.loc_set.point.osc_band):\n","                  market_tp = 1\n","\n","                # -------------- cci -------------- #\n","                # if (res_df['cci_%s' % config.loc_set.point.exp_itv].iloc[j - 1] <= config.loc_set.point.osc_band) & \\\n","                #                  (res_df['cci_%s' % config.loc_set.point.exp_itv].iloc[j] > config.loc_set.point.osc_band):\n","                #   market_tp = 1\n","\n","              # ---------------------------- early out phase ---------------------------- #\n","\n","              #        osc slight touch     #\n","              if allow_osc_touch:\n","                if (np.max(res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[initial_i:j]) > 50 + config.loc_set.point.osc_band - rsi_gap) & \\\n","                  (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j] <= 50):\n","                  market_tp = 1\n","\n","              #         tp early out        #\n","              # # if (np.max(res_df['high'].iloc[e_j:j]) > res_df['long_tp'].iloc[tp_j]) & \\\n","              # if (np.max(res_df['high'].iloc[e_j:j]) > res_df['h_long_rtc_1'].iloc[tp_j] + res_df['h_long_rtc_gap'].iloc[tp_j] * early_out_tpg) & \\\n","              #   (res_df['close'].iloc[j] <= res_df['long_ep'].iloc[ep_j]):\n","              #   market_tp = 1 \n","\n","              # if strat_version == \"v7\":\n","              #   if res_df['dc_lower_1m'].iloc[j] < res_df['dc_lower_5m'].iloc[j]:\n","              #     market_tp = 1\n","\n","\n","              #         bb_upper early out        #\n","              if strat_version in ['v5_2']:\n","                if res_df['close'].iloc[j] > res_df['bb_upper_5m'].iloc[j] > res_df['close'].iloc[j - 1]:\n","                  cross_on = 1\n","\n","                if cross_on == 1 and res_df['close'].iloc[j] < res_df['bb_lower_5m'].iloc[j] < res_df['close'].iloc[j - 1]:\n","                  market_tp = 1\n","                              \n","              if market_tp:\n","\n","                tp = res_df['close'].iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                trade_done = 1\n","\n","                if trade_done:\n","                  tp_state_list.append(\"long close tp {}\".format(strat_version))\n","                  # print(\"early_out passed !\")\n","\n","                tp_list.append(tp) \n","                tp_idx_list.append(j)\n","                fee += config.trader_set.market_fee\n","\n","\n","\n","          # -------------- out -------------- #\n","          if not trade_done and config.out_set.use_out and j != len(res_df) - 1:              \n","\n","            # -------------- macd -------------- #\n","            # if res_df['macd_hist3'].iloc[j] < 0:\n","            # # if res_df['macd_hist3'].iloc[i] > 0 and res_df['macd_hist3'].iloc[j] < 0:\n","\n","            # -------------- st config.out_set.retouch -------------- #\n","            # out = 1 ÏÉÅÌÉúÎ©¥ ÎèôÏùº tick ÏóêÏÑú config.out_set.retouch Î•º Ï°∞ÏÇ¨Ìï† Í±∞Í∏∞ ÎïåÎ¨∏Ïóê, Î®ºÏ†Ä Í≤ÄÏÇ¨Ìï®\n","            # Í∑∏Î¶¨Í≥†, out Í∏∞Ï§ÄÏù¥ close Îùº Ïù¥Í≤å ÎßûÏùå \n","            # close Í∞Ä long_out Î≥¥Îã§ ÎÇ¥Î†§Í∞ÄÏûàÎäî ÏÉÅÌÉúÏùºÌÖåÎãà high Î•º Ï°∞ÏÇ¨ÌïòÎäîÍ≤å ÎßûÏùå           \n","            # if out and res_df['high'].iloc[j] >= long_out.iloc[out_j]:\n","            #   config.out_set.retouch = 1\n","\n","            \n","            # ------- ÏùºÏ†ïÏãúÍ∞Ñ Ïù¥ÏÉÅ, dynamic_out Ï†ÅÏö© ------ #\n","            try:\n","              if j - out_idx >= config.out_set.retouch_out_period:\n","                static_long_out = res_df['long_out_{}'.format(strat_version)].iloc[j]\n","            \n","            except Exception as e:\n","              pass\n","\n","              # ------- static out ------ #\n","            try:\n","              if out and res_df['high'].iloc[j] >= static_long_out:\n","                config.out_set.retouch = 1\n","            except Exception as e:\n","              pass\n","\n","              # ------- config.out_set.retouch out ------ #\n","            # if out and res_df['high'].iloc[j] >= long_out2.iloc[out_j]:\n","            #   config.out_set.retouch = 1\n","\n","\n","\n","            # -------------- st -------------- #\n","            # if res_df['close'].iloc[j] < res_df['middle_line'].iloc[j]:\n","            # if res_df['close'].iloc[j] < res_df['minor_ST3_Down'].iloc[j]:\n","            # if res_df['close'].iloc[j] < lower_middle.iloc[j]:\n","            # if res_df['close'].iloc[j] < res_df['minor_ST1_Down'].iloc[j]:\n","            if out == 0:\n","              if config.out_set.hl_out:\n","                if res_df['low'].iloc[j] <= res_df['long_out_{}'.format(strat_version)].iloc[out_j]: # check out only once\n","                  out = 1\n","\n","              else:\n","                if res_df['close'].iloc[j] <= res_df['long_out_{}'.format(strat_version)].iloc[out_j]: # check out only once\n","                  out = 1\n","\n","              # out_idx = j\n","              # static_long_out = long_out.iloc[out_j]\n","              # if config.out_set.second_out:\n","              # static_long_out = long_out.iloc[out_j] - res_df['st_gap'].iloc[out_j] * config.out_set.second_out_gap\n","\n","            # if out == 0 and res_df['low'].iloc[j] <= long_out.iloc[out_j]: # check out only once\n","            #   out = 1            \n","            \n","\n","\n","            # -------------- sma -------------- #\n","            # if res_df['close'].iloc[j] < res_df[sma].iloc[j]:\n","\n","            # -------------- sar -------------- #\n","            # if res_df['close'].iloc[j] < res_df['minor_ST3_Down'].iloc[j] \\\n","            #   or res_df['sar2'].iloc[j] >= res_df['low'].iloc[j]:\n","            # if res_df['close'].iloc[j] < long_out.iloc[initial_i]: # or \\\n","            #   #  res_df['close'].iloc[j] < res_df['sar2'].iloc[j]:\n","            #   #  res_df['sar2_uptrend'].iloc[j] == 0 or \\\n","            #   out = 1\n","            \n","            # if res_df['sar2_uptrend'].iloc[j] == 0:\n","\n","            #     if prev_sar is None:\n","            #       prev_sar = res_df['sar2'].iloc[j - 1]\n","                \n","            #     if res_df['close'].iloc[j] < prev_sar:\n","            #       out = 1\n","\n","            # else:\n","            #   if res_df['close'].iloc[j] < res_df['sar2'].iloc[j]:\n","            #     out = 1\n","\n","            # -------------- hl -------------- #\n","            # if res_df['close'].iloc[j] < long_out.iloc[tp_j]:\n","\n","            # -------------- stoch -------------- #\n","            # if res_df['stoch'].iloc[j - 2] <= res_df['stoch'].iloc[j - 1] and \\\n","            #   res_df['stoch'].iloc[j - 1] > res_df['stoch'].iloc[j] and \\\n","            #   res_df['stoch'].iloc[j - 1] >= stoch_upper:\n","            #   out = 1\n","\n","            # config.out_set.retouch 1 Í≤ΩÏö∞, config.out_set.retouch Ï°∞Í±¥ÎèÑ ÏûàÏñ¥ÏïºÌï®\n","            if out:\n","              if config.out_set.retouch:\n","                if config.out_set.retouch:\n","                  pass\n","                else:\n","                    continue\n","\n","              else:\n","                pass\n","\n","              if config.out_set.price_restoration:\n","                tp = res_df['long_out_{}'.format(strat_version)].iloc[out_j]\n","                if config.out_set.second_out:\n","                  tp = res_df['long_out2_{}'.format(strat_version)].iloc[out_j]\n","\n","                # if res_df['close'].iloc[j] < tp: # Ïù¥ Í≤ΩÏö∞Î•º protect ÌïòÎäîÍ±¥ insane ÏûÑ\n","                # # if res_df['high'].iloc[j] < tp: # --> config.out_set.hl_out ÏÇ¨Ïö©Ïãú Ïù¥ Ï°∞Í±¥ÏùÄ valid Ìï®\n","                #   tp = res_df['close'].iloc[j]\n","\n","              else:\n","\n","                if res_df['open'].iloc[j] <= res_df['long_out_{}'.format(strat_version)].iloc[out_j]:\n","                  tp = res_df['open'].iloc[j]\n","                else:\n","                  if config.out_set.hl_out:\n","                    tp = res_df['long_out_{}'.format(strat_version)].iloc[out_j]\n","                  else:\n","                    tp = res_df['close'].iloc[j]\n","\n","                # if not config.out_set.static_out:\n","                #   if res_df['open'].iloc[j] <= res_df['long_out'].iloc[out_j]: # dynamic close out Ïùò open Í≥†Î†§\n","                #     tp = res_df['open'].iloc[j]\n","                #   else:\n","                #     tp = res_df['close'].iloc[j]\n","\n","                # else:\n","                #   tp = res_df['close'].iloc[j]\n","\n","              if config.out_set.retouch: # out Í≥º open ÎπÑÍµê\n","                if config.out_set.second_out:  # long_out = sell\n","                # config.out_set.second_out ÏùÄ Í∏∞Î≥∏Ï†ÅÏúºÎ°ú limit Ïù¥Îùº Ïù¥ Íµ¨Ï°∞Í∞Ä Í∞ÄÎä•Ìï®\n","                  if res_df['open'].iloc[j] >= res_df['long_out2_{}'.format(strat_version)].iloc[out_j]: # dynamic_out Ïùº Í≤ΩÏö∞ Í≥†Î†§Ìï¥ÏïºÌï®\n","                    tp = res_df['open'].iloc[j]\n","                else:\n","                  if res_df['open'].iloc[j] >= res_df['long_out_{}'.format(strat_version)].iloc[out_j]: # dynamic_out Ïùº Í≤ΩÏö∞ Í≥†Î†§Ìï¥ÏïºÌï®\n","                    tp = res_df['open'].iloc[j]\n","\n","                try:\n","                  if res_df['open'].iloc[j] >= static_long_out:\n","                    tp = res_df['open'].iloc[j]\n","                  else:\n","                    tp = static_long_out\n","                except Exception as e:\n","                  pass\n","\n","              # tp = res_df['open'].iloc[j]\n","              tp_state_list.append(\"long close_out {}\".format(strat_version))\n","              trade_done = 1\n","\n","              tp_list.append(tp)\n","              tp_idx_list.append(j)\n","              fee += config.trader_set.market_fee\n","\n","          \n","          # -------------- non tp -------------- #\n","          if j == len(res_df) - 1:\n","            trade_done = 1\n","            tp = res_df['close'].iloc[j]\n","            tp_list.append(tp) \n","            tp_idx_list.append(j)\n","            fee += config.trader_set.market_fee\n","\n","\n","          if trade_done:\n","\n","            # --------------- tp_ratio info --------------- #\n","            try:\n","              if config.out_set.use_out:\n","                done_tp = res_df['long_tp_{}'.format(strat_version)].iloc[tp_j]\n","                done_out = res_df['long_out_{}'.format(strat_version)].iloc[out_j]\n","\n","                if done_out >= ep_list[0]: # loss >= 1\n","                  tp_ratio = np.nan\n","                  dr = np.nan\n","                  # print(\"loss >= 1\")\n","                else:\n","                  tp_ratio = ((done_tp - ep_list[0] - tp_fee * ep_list[0]) / (ep_list[0] - done_out + out_fee * ep_list[0]))                \n","                  dr = ((done_tp - ep_list[0]) / (ep_list[0] - done_out))          \n","\n","              else:      \n","                dr = np.nan\n","                tp_ratio = np.nan\n","\n","            except Exception as e:\n","              print(\"error in tr phase :\", e)\n","              dr = np.nan              \n","              tp_ratio = np.nan\n","            \n","            tp_ratio_list.append(tp_ratio)\n","            long_tp_ratio_list.append(tp_ratio)\n","            dr_list.append(dr)\n","            long_dr_list.append(dr)\n","\n","\n","            qty_list = []\n","            temp_pr_list = []\n","            r_qty = 1\n","            for q_i in range(len(tp_list) - 1, -1, -1):\n","\n","              if len(tp_list) == 1:\n","                temp_qty = r_qty\n","              else:\n","                if q_i !=0:\n","                  temp_qty = r_qty / config.tp_set.partial_qty_divider\n","                else:\n","                  temp_qty = r_qty\n","\n","              # temp_pr = (tp_list[q_i] / ep_list[0] - fee - 1) * temp_qty\n","              temp_pr = (tp_list[q_i] / ep_list[0] - fee - 1) * temp_qty * config.lvrg_set.leverage\n","              r_qty -= temp_qty\n","\n","              temp_pr_list.append(temp_pr)\n","\n","            temp_pr = sum(temp_pr_list) + 1\n","\n","            # -------------------- sub ep -> pr calc -------------------- #\n","            if len(ep_list) > 1:\n","            \n","              p_ep_pr = []\n","              for sub_ep_ in ep_list:\n","                sub_pr = (tp / sub_ep_ - fee - 1) * config.lvrg_set.leverage\n","                p_ep_pr.append(sub_pr)\n","\n","              temp_pr = sum(p_ep_pr) + 1\n","\n","              print(\"temp_pr :\", temp_pr)\n","\n","            # ------------ hedge + non_hedge pr summation ------------ #\n","            #         hedge pr direction is opposite to the origin       #\n","            hedge_pr = 1\n","            if hedge_cnt == 0:\n","\n","              #       hedge tp      #\n","              h_tp = res_df['close'].iloc[j]\n","              hedge_pr = (h_ep / h_tp - fee - 1) * config.lvrg_set.leverage  # hedge short\n","              temp_pr += hedge_pr\n","              h_j = j\n","\n","\n","            # ll = min(res_df['low'].iloc[i:j + 1])\n","            ll = min(res_df['low'].iloc[i:j])   # pos. Ï†ïÎ¶¨ÌïòÍ∏∞ Î∞îÎ°ú ÏßÅÏ†ÑÍπåÏßÄ\n","            long_liq = (ll / ep_list[0] - fee - 1) * config.lvrg_set.leverage + 1\n","\n","            if j != len(res_df) - 1:\n","\n","              ep_tp_list.append((ep_list, tp_list))\n","              # trade_list.append((ep_idx_list, tp_idx_list))\n","              trade_list.append((ep_idx_list, out_idx_list, tp_idx_list))\n","\n","              liqd_list.append(long_liq)\n","              long_liqd_list.append(long_liq)\n","\n","              h_ep_tp_list.append((h_ep, h_tp))        \n","              h_trade_list.append([initial_i, h_i, h_j])                \n","\n","              pr_list.append(temp_pr)\n","              fee_list.append(fee)\n","              long_list.append(temp_pr)\n","              long_fee_list.append(fee)\n","\n","              h_pr_list.append(hedge_pr)\n","              h_long_list.append(hedge_pr)                    \n","\n","              i = j\n","              break\n","            \n","            else:\n","\n","              # ep_tp_list.append((ep_list, tp_list))\n","              # trade_list.append((ep_idx_list, tp_idx_list))\n","              \n","              # pr_list Î•º ÎÑ£ÏßÄ ÏïäÏùÑÍ±∞ÎãàÍπå, open_list ÏóêÏÑú Ìï¥Îãπ idx Îäî pop\n","              open_list.pop()\n","              zone_list.pop()\n","              side_list.pop()\n","              strat_ver_list.pop()\n","          \n","              #         tp ÎØ∏Ï≤¥Í≤∞ survey        #\n","              nontp_liqd_list.append(long_liq)\n","              nontp_long_liqd_list.append(long_liq)\n","              nontp_long_indexs.append(i)\n","              nontp_long_ep_list.append(ep_list[0])\n","              \n","              nontp_long_pr = (tp / ep_list[0] - fee - 1) * config.lvrg_set.leverage + 1\n","              nontp_pr_list.append(nontp_long_pr)\n","              nontp_long_pr_list.append(nontp_long_pr)\n","\n","            if len(open_list) > len(trade_list):\n","              print('debug from index :', i)\n","              print(len(open_list), len(trade_list))\n","              print(\"len(res_df) :\", len(res_df))\n","              assert len(open_list) == len(trade_list), 'stopped'\n","      \n","      i += 1  # if entry starts with prev trade's close, do not use it ! \n","      # print(\"i in end :\", i)\n","      if i >= len(res_df):\n","        break\n","\n","\n","\n","    # -------------------- result analysis -------------------- #\n","    # try:\n","    print(\"elapsed_time :\", time.time() - start_0)\n","\n","    plt.style.use('default')\n","    # mpl.rcParams.update(mpl.rcParamsDefault)\n","\n","    plt.figure(figsize=(16, 12))\n","    # plt.figure(figsize=(12, 8))\n","    # plt.figure(figsize=(10, 6))\n","    plt.suptitle(key)\n","\n","    try:\n","      np_pr = np.array(pr_list)\n","\n","      sr = sharpe_ratio(np_pr)\n","\n","      dpf = (len(res_df) / 1440) / len(np_pr)\n","\n","      np_zone_list = np.array(zone_list)\n","      # np_pr_list = np.array(pr_list)\n","      np_side_list = np.array(side_list)\n","\n","      t_w = np.sum(np.where((np_zone_list == 't') & (np_pr > 1), 1, 0))\n","      c_w = np.sum(np.where((np_zone_list == 'c') & (np_pr > 1), 1, 0))\n","      t_ls = np.sum(np.where((np_zone_list == 't') & (np_pr < 1), 1, 0))\n","      c_ls = np.sum(np.where((np_zone_list == 'c') & (np_pr < 1), 1, 0))\n","\n","      # np_pr = (np.array(pr_list) - 1) * config.lvrg_set.leverage + 1\n","\n","      # ----- fake_pr ----- #\n","      # np_pr = np.where(np_pr > 1, 1 + (np_pr - 1) * 3, np_pr)\n","\n","      total_pr = np.cumprod(np_pr)\n","\n","      for_sum_pr = np_pr - 1\n","      for_sum_pr[0] = 1\n","      sum_pr = np.cumsum(for_sum_pr)\n","      sum_pr = np.where(sum_pr < 0, 0, sum_pr)\n","\n","      wr = len(np_pr[np_pr > 1]) / len(np_pr[np_pr != 1])\n","      \n","      total_rollmax_pr = np.maximum.accumulate(total_pr)\n","      total_acc_mdd = np.max((total_rollmax_pr - total_pr) / total_rollmax_pr)\n","      total_rollmax_sumpr = np.maximum.accumulate(sum_pr)\n","      total_sum_mdd = np.max((total_rollmax_sumpr - sum_pr) / total_rollmax_sumpr)\n","\n","      np_tp_ratio_list = np.array(tp_ratio_list) # Ï¥àÍ∏∞Ïóê tr ÏùÑ Ï†ïÌïòÎäîÍ±∞Îùº mean ÏÇ¨Ïö©ÌïòÎäîÍ≤å ÎßûÏùå\n","      mean_tr = np.mean(np_tp_ratio_list[np.isnan(np_tp_ratio_list) == 0])\n","\n","      np_dr_list = np.array(dr_list) # Ï¥àÍ∏∞Ïóê tr ÏùÑ Ï†ïÌïòÎäîÍ±∞Îùº mean ÏÇ¨Ïö©ÌïòÎäîÍ≤å ÎßûÏùå\n","      mean_dr = np.mean(np_dr_list[np.isnan(np_dr_list) == 0])\n","\n","      # pr_gap = (np_pr - 1) / config.lvrg_set.leverage + fee\n","      # tp_gap_ = pr_gap[pr_gap > 0]\n","      # # mean_config.tr_set.tp_gap = np.mean(pr_gap[pr_gap > 0])\n","      # mean_ls_gap = np.mean(pr_gap[pr_gap < 0])\n","\n","      # ---- profit fee ratio ---- #\n","      # mean_pgfr = np.mean((tp_gap_ - fee) / abs(tp_gap_ + fee))\n","\n","      # plt.subplot(121)\n","      plt.subplot(231)\n","      plt.plot(total_pr)\n","      plt.plot(sum_pr, color='gold')\n","      if len(nontp_liqd_list) != 0:\n","        plt.title(\"wr : %.3f\\n len(td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (wr, len(np_pr[np_pr != 1]), dpf, np.min(np_pr), total_pr[-1], sum_pr[-1], sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (total_acc_mdd, total_sum_mdd, config.lvrg_set.leverage, min(liqd_list), mean_tr, mean_dr)  + \\\n","                  \"\\n nontp_liqd_cnt : %s\\nnontp_liqd : %.3f\\nontp_liqd_pr : %.3f\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_liqd_list), min(nontp_liqd_list), min(nontp_pr_list), t_w, c_w, t_ls, c_ls) ,\n","                  position=title_position)\n","      else:\n","        plt.title(\"wr : %.3f\\n len(td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\" \n","                  % (wr, len(np_pr[np_pr != 1]), dpf, np.min(np_pr), total_pr[-1], sum_pr[-1], sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (total_acc_mdd, total_sum_mdd, config.lvrg_set.leverage, min(liqd_list), mean_tr, mean_dr)  + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_liqd_list), t_w, c_w, t_ls, c_ls) ,\n","                  position=title_position)\n","                  # \"\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\\n nontp_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  # % (config.lvrg_set.leverage, min(liqd_list), mean_tr, mean_dr, len(nontp_liqd_list), t_w, c_w, t_ls, c_ls), \n","                  # position=title_position)\n","      # plt.show()\n","\n","      survey_df.iloc[survey_i] = wr, sr, len(np_pr[np_pr != 1]), dpf, \\\n","        total_pr[-1], sum_pr[-1], total_acc_mdd, total_sum_mdd, min(liqd_list), np.min(np_pr), mean_tr, mean_dr\n","\n","      print('supblot231 passed')\n","\n","    except Exception as e:\n","      print(\"error in 231 :\", e)\n","\n","\n","    try:\n","      #         short only      #\n","      short_np_pr = np.array(short_list)\n","\n","      short_sr = sharpe_ratio(short_np_pr)\n","\n","      short_dpf = (len(res_df) / 1440) / len(short_np_pr)\n","\n","      short_total_pr = np.cumprod(short_np_pr)\n","      \n","      short_for_sum_pr = short_np_pr - 1\n","      short_for_sum_pr[0] = 1\n","      short_sum_pr = np.cumsum(short_for_sum_pr)\n","      short_sum_pr = np.where(short_sum_pr < 0, 0, short_sum_pr)\n","\n","      short_wr = len(short_np_pr[short_np_pr > 1]) / len(short_np_pr[short_np_pr != 1])\n","      \n","      t_w_s = np.sum(np.where((np_zone_list == 't') & (np_pr > 1) & (np_side_list == 's'), 1, 0))\n","      c_w_s = np.sum(np.where((np_zone_list == 'c') & (np_pr > 1) & (np_side_list == 's'), 1, 0))\n","      t_ls_s = np.sum(np.where((np_zone_list == 't') & (np_pr < 1) & (np_side_list == 's'), 1, 0))\n","      c_ls_s = np.sum(np.where((np_zone_list == 'c') & (np_pr < 1) & (np_side_list == 's'), 1, 0))\n","\n","      short_rollmax_pr = np.maximum.accumulate(short_total_pr)\n","      short_acc_mdd = np.max((short_rollmax_pr - short_total_pr) / short_rollmax_pr)\n","      short_rollmax_sumpr = np.maximum.accumulate(short_sum_pr)\n","      short_sum_mdd = np.max((short_rollmax_sumpr - short_sum_pr) / short_rollmax_sumpr)\n","\n","      np_short_tp_ratio_list = np.array(short_tp_ratio_list)\n","      mean_short_tr = np.mean(np_short_tp_ratio_list[np.isnan(np_short_tp_ratio_list) == 0])\n","      \n","      np_short_dr_list = np.array(short_dr_list)\n","      mean_short_dr = np.mean(np_short_dr_list[np.isnan(np_short_dr_list) == 0])\n","      \n","      # short_pr_gap = (short_np_pr - 1) / config.lvrg_set.leverage + fee\n","      # short_tp_gap = short_pr_gap[short_pr_gap > 0]\n","      # # mean_short_tp_gap = np.mean(short_pr_gap[short_pr_gap > 0])\n","      # # mean_short_ls_gap = np.mean(short_pr_gap[short_pr_gap < 0])\n","\n","      # mean_short_pgfr = np.mean((short_tp_gap - fee) / abs(short_tp_gap + fee))\n","      \n","      plt.subplot(232)\n","      plt.plot(short_total_pr)\n","      plt.plot(short_sum_pr, color='gold')\n","      if len(nontp_short_liqd_list) != 0:   \n","\n","        max_nontp_short_term = len(res_df) - nontp_short_indexs[0]\n","        \n","        plt.title(\"wr : %.3f\\nlen(short_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (short_wr, len(short_np_pr[short_np_pr != 1]), short_dpf, np.min(short_np_pr), short_total_pr[-1], short_sum_pr[-1], short_sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (short_acc_mdd, short_sum_mdd, config.lvrg_set.leverage, min(short_liqd_list), mean_short_tr, mean_short_dr) + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n nontp_liqd : %.3f\\n nontp_liqd_pr : %.3f\\n max_nontp_term : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_short_liqd_list), min(nontp_short_liqd_list), min(nontp_short_pr_list), max_nontp_short_term, t_w_s, c_w_s, t_ls_s, c_ls_s) ,\n","                  position=title_position)\n","                  # \"\\n leverage %s\\nliqd : %.3f\\nmean_tr : %.3f\\n mean_dr : %.3f\\n nontp_short_liqd_cnt : %s\\nnontp_short_liqd : %.3f\\nontp_short_liqd_pr : %.3f\\nmax_nontp_short_term : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  # % (config.lvrg_set.leverage, min(short_liqd_list), mean_short_tr, mean_short_dr, \n","                  #    len(nontp_short_liqd_list), min(nontp_short_liqd_list), min(nontp_short_pr_list), max_nontp_short_term, t_w_s, c_w_s, t_ls_s, c_ls_s),\n","                  # position=title_position)\n","      else:\n","        plt.title(\"wr : %.3f\\nlen(short_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (short_wr, len(short_np_pr[short_np_pr != 1]), short_dpf, np.min(short_np_pr), short_total_pr[-1], short_sum_pr[-1], short_sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (short_acc_mdd, short_sum_mdd, config.lvrg_set.leverage, min(short_liqd_list), mean_short_tr, mean_short_dr) + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_short_liqd_list), t_w_s, c_w_s, t_ls_s, c_ls_s),\n","                  position=title_position)\n","   \n","      short_survey_df.iloc[survey_i] = short_wr, short_sr, len(short_np_pr[short_np_pr != 1]), short_dpf, \\\n","        short_total_pr[-1], short_sum_pr[-1], short_acc_mdd, short_sum_mdd, min(short_liqd_list), np.min(short_np_pr), mean_short_tr, mean_short_dr\n","        \n","      print('supblot232 passed')\n","    \n","    except Exception as e:\n","      print(\"error in 232 :\", e)\n","\n","    try:\n","      #         long only      #\n","      long_np_pr = np.array(long_list)\n","      # long_np_pr = (np.array(long_list) - 1) * config.lvrg_set.leverage + 1\n","\n","      long_sr = sharpe_ratio(long_np_pr)\n","\n","      long_dpf = (len(res_df) / 1440) / len(long_np_pr)\n","\n","      long_total_pr = np.cumprod(long_np_pr)\n","      \n","      long_for_sum_pr = long_np_pr - 1\n","      long_for_sum_pr[0] = 1\n","      long_sum_pr = np.cumsum(long_for_sum_pr)\n","      long_sum_pr = np.where(long_sum_pr < 0, 0, long_sum_pr)\n","\n","      long_wr = len(long_np_pr[long_np_pr > 1]) / len(long_np_pr[long_np_pr != 1])\n","\n","      t_w_l = np.sum(np.where((np_zone_list == 't') & (np_pr > 1) & (np_side_list == 'l'), 1, 0))\n","      c_w_l = np.sum(np.where((np_zone_list == 'c') & (np_pr > 1) & (np_side_list == 'l'), 1, 0))\n","      t_ls_l = np.sum(np.where((np_zone_list == 't') & (np_pr < 1) & (np_side_list == 'l'), 1, 0))\n","      c_ls_l = np.sum(np.where((np_zone_list == 'c') & (np_pr < 1) & (np_side_list == 'l'), 1, 0))\n","\n","      long_rollmax_pr = np.maximum.accumulate(long_total_pr)\n","      long_acc_mdd = np.max((long_rollmax_pr - long_total_pr) / long_rollmax_pr)\n","      long_rollmax_sumpr = np.maximum.accumulate(long_sum_pr)\n","      long_sum_mdd = np.max((long_rollmax_sumpr - long_sum_pr) / long_rollmax_sumpr)\n","\n","      np_long_tp_ratio_list = np.array(long_tp_ratio_list)\n","      mean_long_tr = np.mean(np_long_tp_ratio_list[np.isnan(np_long_tp_ratio_list) == 0])\n","      \n","      np_long_dr_list = np.array(long_dr_list)\n","      mean_long_dr = np.mean(np_long_dr_list[np.isnan(np_long_dr_list) == 0])\n","\n","      # long_pr_gap = (long_np_pr - 1) / config.lvrg_set.leverage + fee\n","      # long_tp_gap = long_pr_gap[long_pr_gap > 0]\n","      # # mean_long_tp_gap = np.mean(long_pr_gap[long_pr_gap > 0])\n","      # # mean_long_ls_gap = np.mean(long_pr_gap[long_pr_gap < 0])\n","\n","      # mean_long_pgfr = np.mean((long_tp_gap - fee) / abs(long_tp_gap + fee))\n","\n","      plt.subplot(233)\n","      plt.plot(long_total_pr)\n","      plt.plot(long_sum_pr, color='gold')\n","      if len(nontp_long_liqd_list) != 0:\n","\n","        max_nontp_long_term = len(res_df) - nontp_long_indexs[0]\n","\n","        plt.title(\"wr : %.3f\\nlen(long_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (long_wr, len(long_np_pr[long_np_pr != 1]), long_dpf, np.min(long_np_pr), long_total_pr[-1], long_sum_pr[-1], long_sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (long_acc_mdd, long_sum_mdd, config.lvrg_set.leverage, min(long_liqd_list), mean_long_tr, mean_long_dr)  + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n nontp_liqd : %.3f\\n nontp_liqd_pr : %.3f\\n max_nontp_term : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_long_liqd_list), min(nontp_long_liqd_list), min(nontp_long_pr_list), max_nontp_long_term, t_w_l, c_w_l, t_ls_l, c_ls_l) ,\n","                  position=title_position)\n","                  # \"\\n leverage %s\\nliqd : %.3f\\nmean_tr : %.3f\\n mean_dr : %.3f\\n nontp_long_liqd_cnt : %s\\nnontp_long_liqd : %.3f\\nontp_long_liqd_pr : %.3f\\nmax_nontp_long_term : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  # % (config.lvrg_set.leverage, min(long_liqd_list), mean_long_tr, mean_long_dr, \n","                  #    len(nontp_long_liqd_list), min(nontp_long_liqd_list), min(nontp_long_pr_list), max_nontp_long_term, t_w_l, c_w_l, t_ls_l, c_ls_l),\n","                  # position=title_position)\n","      else:\n","        plt.title(\"wr : %.3f\\nlen(long_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (long_wr, len(long_np_pr[long_np_pr != 1]), long_dpf, np.min(long_np_pr), long_total_pr[-1], long_sum_pr[-1], long_sr) + \\\n","                  \"\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n leverage %s\\n liqd : %.3f\\n mean_tr : %.3f\\n mean_dr : %.3f\"\n","                  % (long_acc_mdd, long_sum_mdd, config.lvrg_set.leverage, min(long_liqd_list), mean_long_tr, mean_long_dr) + \\\n","                  \"\\n nontp_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (len(nontp_long_liqd_list), t_w_l, c_w_l, t_ls_l, c_ls_l),\n","                  position=title_position)\n","                  # \"\\n leverage %s\\nliqd : %.3f\\nmean_tr : %.3f\\n mean_dr : %.3f\\n nontp_long_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\" \n","                  # % (config.lvrg_set.leverage, min(long_liqd_list), mean_long_tr, mean_long_dr, len(nontp_long_liqd_list), t_w_l, c_w_l, t_ls_l, c_ls_l),\n","                  # position=title_position)\n","\n","      long_survey_df.iloc[survey_i] = long_wr, long_sr, len(long_np_pr[long_np_pr != 1]), long_dpf, \\\n","        long_total_pr[-1], long_sum_pr[-1], long_acc_mdd, long_sum_mdd, min(long_liqd_list), np.min(long_np_pr), mean_long_tr, mean_long_dr\n","\n","      print('supblot233 passed')\n","\n","    except Exception as e:\n","      print(\"error in 233 :\", e)\n","\n","\n","    try:\n","      #     reversion adjustment      #\n","      # rev_np_pr = 1 / (np.array(pr_list) + fee) - fee\n","      rev_fee = tp_fee + out_fee - np.array(fee_list)\n","      rev_np_pr = (1 / ((np.array(pr_list) - 1) / config.lvrg_set.leverage + np.array(fee_list) + 1) - rev_fee - 1) * config.lvrg_set.leverage + 1\n","      # rev_np_pr = (1 / (np.array(pr_list) + fee) - fee - 1) * config.lvrg_set.leverage + 1\n","          \n","      rev_sr = sharpe_ratio(rev_np_pr)\n","\n","      rev_total_pr = np.cumprod(rev_np_pr)\n","      rev_wr = len(rev_np_pr[rev_np_pr > 1]) / len(rev_np_pr[rev_np_pr != 1])\n","\n","      rev_total_for_sum_pr = rev_np_pr - 1\n","      rev_total_for_sum_pr[0] = 1\n","      rev_total_sum_pr = np.cumsum(rev_total_for_sum_pr)\n","      rev_total_sum_pr = np.where(rev_total_sum_pr < 0, 0, rev_total_sum_pr)\n","\n","      rev_rollmax_pr = np.maximum.accumulate(rev_total_pr)\n","      rev_acc_mdd = np.max((rev_rollmax_pr - rev_total_pr) / rev_rollmax_pr)\n","      rev_rollmax_sumpr = np.maximum.accumulate(rev_total_sum_pr)\n","      rev_sum_mdd = np.max((rev_rollmax_sumpr - rev_total_sum_pr) / rev_rollmax_sumpr)\n","\n","      # plt.subplot(122)\n","      plt.subplot(234)\n","      plt.plot(rev_total_pr)\n","      plt.plot(rev_total_sum_pr, color='gold')\n","\n","      plt.title(\"wr : %.3f\\n sr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n min_pr : %.3f\" \n","                % (rev_wr, rev_sr, rev_total_pr[-1], rev_total_sum_pr[-1], rev_acc_mdd, rev_sum_mdd, np.min(rev_np_pr)))\n","      \n","      rev_survey_df.iloc[survey_i] = rev_wr, rev_sr, rev_total_pr[-1], rev_total_sum_pr[-1], rev_acc_mdd, rev_sum_mdd, np.min(rev_np_pr)\n","\n","    except Exception as e:\n","      print(\"error in 234 :\", e)\n","\n","    try:\n","      #         short       #\n","      # rev_short_np_pr = 1 / (np.array(short_list) + fee) - fee\n","      rev_short_fee = tp_fee + out_fee - np.array(short_fee_list)\n","      rev_short_np_pr = (1 / ((np.array(short_list) - 1) / config.lvrg_set.leverage + np.array(short_fee_list) + 1) - rev_short_fee - 1) * config.lvrg_set.leverage + 1\n","      # rev_short_np_pr = (1 / (np.array(short_list) + fee) - fee - 1) * config.lvrg_set.leverage + 1\n","      \n","      rev_short_sr = sharpe_ratio(rev_short_np_pr)\n","          \n","      short_rev_total_pr = np.cumprod(rev_short_np_pr)\n","      rev_short_wr = len(rev_short_np_pr[rev_short_np_pr > 1]) / len(rev_short_np_pr[rev_short_np_pr != 1])\n","\n","      rev_short_for_sum_pr = rev_short_np_pr - 1\n","      rev_short_for_sum_pr[0] = 1\n","      short_rev_sum_pr = np.cumsum(rev_short_for_sum_pr)\n","      short_rev_sum_pr = np.where(short_rev_sum_pr < 0, 0, short_rev_sum_pr)\n","\n","      short_rev_rollmax_pr = np.maximum.accumulate(short_rev_total_pr)\n","      short_rev_acc_mdd = np.max((short_rev_rollmax_pr - short_rev_total_pr) / short_rev_rollmax_pr)\n","      short_rev_rollmax_sumpr = np.maximum.accumulate(short_rev_sum_pr)\n","      short_rev_sum_mdd = np.max((short_rev_rollmax_sumpr - short_rev_sum_pr) / short_rev_rollmax_sumpr)\n","\n","      # plt.subplot(122)\n","      plt.subplot(235)\n","      plt.plot(short_rev_total_pr)\n","      plt.plot(short_rev_sum_pr, color='gold')\n","\n","      plt.title(\"wr : %.3f\\n sr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n min_pr : %.3f\" \n","                % (rev_short_wr, rev_short_sr, short_rev_total_pr[-1], short_rev_sum_pr[-1], short_rev_acc_mdd, short_rev_sum_mdd, np.min(rev_short_np_pr)))\n","      \n","      rev_short_survey_df.iloc[survey_i] = rev_short_wr, rev_short_sr, short_rev_total_pr[-1], short_rev_sum_pr[-1], short_rev_acc_mdd, short_rev_sum_mdd, np.min(rev_short_np_pr)\n","\n","    except Exception as e:\n","      print(\"error in 235 :\", e)\n","\n","    try:\n","      #         long       #\n","      # rev_long_np_pr = 1 / (np.array(long_list) + fee) - fee\n","      rev_long_fee = tp_fee + out_fee - np.array(long_fee_list)\n","      rev_long_np_pr = (1 / ((np.array(long_list) - 1) / config.lvrg_set.leverage + np.array(long_fee_list) + 1) - rev_long_fee - 1) * config.lvrg_set.leverage + 1\n","          \n","      rev_long_sr = sharpe_ratio(rev_long_np_pr)\n","\n","      long_rev_total_pr = np.cumprod(rev_long_np_pr)\n","      rev_long_wr = len(rev_long_np_pr[rev_long_np_pr > 1]) / len(rev_long_np_pr[rev_long_np_pr != 1])\n","\n","      rev_long_for_sum_pr = rev_long_np_pr - 1\n","      rev_long_for_sum_pr[0] = 1\n","      long_rev_sum_pr = np.cumsum(rev_long_for_sum_pr)\n","      long_rev_sum_pr = np.where(long_rev_sum_pr < 0, 0, long_rev_sum_pr)\n","\n","      long_rev_rollmax_pr = np.maximum.accumulate(long_rev_total_pr)\n","      long_rev_acc_mdd = np.max((long_rev_rollmax_pr - long_rev_total_pr) / long_rev_rollmax_pr)\n","      long_rev_rollmax_sumpr = np.maximum.accumulate(long_rev_sum_pr)\n","      long_rev_sum_mdd = np.max((long_rev_rollmax_sumpr - long_rev_sum_pr) / long_rev_rollmax_sumpr)\n","\n","      # plt.subplot(122)\n","      plt.subplot(236)\n","      plt.plot(long_rev_total_pr)\n","      plt.plot(long_rev_sum_pr, color='gold')\n","\n","      plt.title(\"wr : %.3f\\n sr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n acc_mdd : -%.3f\\n sum_mdd : -%.3f\\n min_pr : %.3f\" \n","                % (rev_long_wr, rev_long_sr, long_rev_total_pr[-1], long_rev_sum_pr[-1], long_rev_acc_mdd, long_rev_sum_mdd, np.min(rev_long_np_pr)))\n","      \n","      rev_long_survey_df.iloc[survey_i] = rev_long_wr, rev_long_sr, long_rev_total_pr[-1], long_rev_sum_pr[-1], long_rev_acc_mdd, long_rev_sum_mdd, np.min(rev_long_np_pr)\n","      \n","    except Exception as e:\n","      print(\"error in 236 :\", e)\n","\n","    if show_plot:\n","      plt.show()\n","    \n","\n","    try:\n","\n","      h_np_pr = np.array(h_pr_list)\n","      # h_rev_np_pr = 1 / (np.array(h_pr_list) + fee) - fee    # define, for plot_check below cell\n","      h_rev_np_pr = (1 / ((np.array(h_pr_list) - 1) / config.lvrg_set.leverage + np.array(fee_list) + 1) - np.array(fee_list) - 1) * config.lvrg_set.leverage + 1\n","\n","      # --------------------- h pr plot --------------------- #\n","      if len(h_np_pr[h_np_pr != 1]) != 0:\n","\n","        plt.figure(figsize=(16, 12))\n","        plt.suptitle(key + \" hedge\")\n","\n","        h_total_pr = np.cumprod(h_np_pr)\n","        h_wr = len(h_np_pr[h_np_pr > 1]) / len(h_np_pr[h_np_pr != 1])\n","\n","        # plt.subplot(121)\n","        plt.subplot(231)\n","        plt.plot(h_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_wr, np.min(h_np_pr), h_total_pr[-1], config.lvrg_set.leverage))\n","        # plt.show()\n","\n","        #         short only      #\n","        h_short_np_pr = np.array(h_short_list)\n","\n","        short_h_total_pr = np.cumprod(h_short_np_pr)\n","        h_short_wr = len(h_short_np_pr[h_short_np_pr > 1]) / len(h_short_np_pr[h_short_np_pr != 1])\n","        \n","        plt.subplot(232)\n","        plt.plot(short_h_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_short_wr, np.min(h_short_np_pr), short_h_total_pr[-1], config.lvrg_set.leverage))\n","\n","        #         long only      #\n","        h_long_np_pr = np.array(h_long_list)\n","\n","        long_h_total_pr = np.cumprod(h_long_np_pr)\n","        h_long_wr = len(h_long_np_pr[h_long_np_pr > 1]) / len(h_long_np_pr[h_long_np_pr != 1])\n","        \n","        plt.subplot(233)\n","        plt.plot(long_h_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_long_wr, np.min(h_long_np_pr), long_h_total_pr[-1], config.lvrg_set.leverage))\n","\n","\n","        #     reversion adjustment      #\n","            \n","        h_rev_total_pr = np.cumprod(h_rev_np_pr)\n","        h_rev_wr = len(h_rev_np_pr[h_rev_np_pr > 1]) / len(h_rev_np_pr[h_rev_np_pr != 1])\n","\n","        # plt.subplot(122)\n","        plt.subplot(234)\n","        plt.plot(h_rev_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_rev_wr, np.min(h_rev_np_pr), h_rev_total_pr[-1], config.lvrg_set.leverage))\n","\n","        #         short       #\n","        # h_rev_short_np_pr = 1 / (np.array(h_short_list) + fee) - fee\n","        h_rev_short_np_pr =  (1 / ((np.array(h_short_list) - 1) / config.lvrg_set.leverage + np.array(short_fee_list) + 1) - np.array(short_fee_list) - 1) * config.lvrg_set.leverage + 1\n","           \n","        short_h_rev_total_pr = np.cumprod(h_rev_short_np_pr)\n","        h_rev_short_wr = len(h_rev_short_np_pr[h_rev_short_np_pr > 1]) / len(h_rev_short_np_pr[h_rev_short_np_pr != 1])\n","\n","        # plt.subplot(122)\n","        plt.subplot(235)\n","        plt.plot(short_h_rev_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_rev_short_wr, np.min(h_rev_short_np_pr), short_h_rev_total_pr[-1], config.lvrg_set.leverage))\n","\n","        #         long       #\n","        # h_rev_long_np_pr = 1 / (np.array(h_long_list) + fee) - fee\n","        h_rev_long_np_pr =  (1 / ((np.array(h_long_list) - 1) / config.lvrg_set.leverage + np.array(long_fee_list) + 1) - np.array(long_fee_list) - 1) * config.lvrg_set.leverage + 1\n","            \n","        long_h_rev_total_pr = np.cumprod(h_rev_long_np_pr)\n","        h_rev_long_wr = len(h_rev_long_np_pr[h_rev_long_np_pr > 1]) / len(h_rev_long_np_pr[h_rev_long_np_pr != 1])\n","\n","        # plt.subplot(122)\n","        plt.subplot(236)\n","        plt.plot(long_h_rev_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_rev_long_wr, np.min(h_rev_long_np_pr), long_h_rev_total_pr[-1], config.lvrg_set.leverage))\n","        \n","        if show_plot:\n","          plt.show()\n","          \n","    except Exception as e:\n","      print('error in h_pr plot :', e)   \n","    \n","    print()\n","\n","\n","  # break # pair loop"]},{"cell_type":"markdown","metadata":{"id":"MteLY9PS2ZeK"},"source":["##### check statistical significance"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":6225,"status":"ok","timestamp":1641392890108,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"NzbWuwSw2jaj","outputId":"b3a1a654-5f56-4d12-e638-b23620e1a9f5"},"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 3000x1000 with 36 Axes>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","\n"]},{"output_type":"display_data","data":{"image/png":"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5EmbsWrVqqlEiRI6f/58tvrE19c3W31yc5k+6cZ//D/66KM5uhCRlpam0aNH68knn1R8fLzWrVunN954Q+XLl8829/jx49nGEhISVLJkSevjwMBAHTx4MNu8m8vu/b6m+X19BgAAAKDguNX5erVq1fTkk09mq1fWrFkjSdaaJTMzU4sXL9YzzzwjT09PSTc+zO7p6fnAzVOBgYE6fPiw9YPkN92u7vh9LXOzkepmLXNz/u+vzdxuDABQeLnbOwEAKChSUlJsHru6uiorK0tPPvmkMjMzs82/evWq9e9btmyRxWJRr169NH/+fHXt2lVFixZ94BP93/v9CX9OjB07Vv/4xz80e/ZsjRs3TpcuXVJWVpY++eQTubrSSwsAAAAUFNevX8927u/q6qr4+Hj17dv3ltucP3/e+velS5fq2rVr6tWrlzZt2qRevXopMzMzxx/umDJlipYuXapu3brpiSee0Pjx4zVmzBi1bdtWu3btss67Vb0k3fgAx/36fX0GAAAAoOC41fm6q6urVq1apX/+85+33ObQoUPWv3/zzTcaPHiwnnzySS1ZskS9evXSgQMH8v1uTnlRywAACieapwDgNuLi4uTq6iqLxaLDhw/fdX5ERISGDRsmX19f9e7dWxaLRVu2bMnRa96uOerYsWNyc3NTtWrV9Ouvv1rHy5Urp5IlS+rYsWN33UePHj30888/a+DAgTbjJUqU0IULF3KUJwAAAID8FRcXp/bt22vDhg13Xc4uOTlZy5YtU8+ePTVixAj17t1b0dHROnPmTI5f98iRI5o0aZImTZqkqlWrateuXRo5cqReeOGFHO3n2LFjqlGjRrbxRx55xPr83TzIh0kAAAAA5K24uDgVK1bMeqepO4mKitLp06fVu3dvrV+/Xm3bttWECRMeOIdjx46pbt26cnFxsakfclJ3/H5/klS1atVsz91qDABQeHGrEQC4jW+//VYZGRkKCwu75fOlSpWyebxgwQJ5e3urf//+6tSpkyIiInL8mjfXzC5RooTN+IoVKyRJw4cPtxkfMWKEJGn58uU2+/j99tKNT1D8/tMSPXr0UOXKlXOcJwAAAID8FRERIXd3d40bNy7bc25ubtmW4l6wYIEqVaqkgQMHqn79+jm+K26RIkXk5eVlMxYXF6ekpKRs4/dixYoVatKkiZo2bWodK1q0qF555RVZLBbF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PKiUlBSdPn1aixcvVpUqVe45p/891jds2KDk5GQdOXIk2/t1aGiojDHq3bu3xo8fr5MnTyo5OVnFixe//28ICpW7vW9aLBaFh4dn2y4yMlKRkZHWxzePpZ49e+pvf/ubTp48qStXrmjhwoUqXry4PD09NXnyZMXHxyspKUlz5syRp6dnjnINDw9XUlKSgoOD9dNPP+nq1as6deqUxo0bZzMvMDBQxhiNHDlSw4YNU2xsrK5fv66aNWvex3cIQEFFPQNHRD0De6CeQWFGPQOgMKOmgSOipoE9UNOgMKOmcVzu9k4A927fvn1KSEhQ69attXTpUklSq1atlJmZqXr16snX11dJSUlycXFR8+bNNXPmTOu2NWrU0Pz58zVjxgx9/vnnOnjwoL2+DMDG9OnT1aNHD3366aeKiYlR6dKl1bJlS4WEhGjnzp2SpNKlS+vHH3/UN998o6+++krx8fF2zhqF3WOPPabmzZvrm2++0cmTJxUUFKRXX31Va9euVc2aNZWSkiJJ8vHxUXR0tEJCQjRnzhz98ssvKlOmjJ5++mlVrlxZFy9elKurq5YtW6b27dtr/vz5mjJlinx9fdWhQwfVrl1bR44cuee8SpYsqRUrVigiIkLz589Xr169NH36dKWlpWU70Ro3bpzS0tL00UcfycvLS2lpabn6PULBdS/vmzkxZswYpaSk6IMPPlDVqlU1dOhQpaenKysrSyVLltQ777yjpk2b6sUXX5TFYtH48eNztH83Nzf99NNP2rx5s95880116tRJ7777rtzd3RUWFmYz98UXX5S3t7dmzpyp69ev69KlSzn+egAUXNQzcETUM7AH6hkUZtQzAAozaho4Imoa2AM1DQozahrHZojCE0uXLjWbN2+2Pl60aJFZtGiRSU9PN0888YSRZOrXr2+MMaZr165GkrFYLMYYYzp27Gj3/Ani95GQkGCmTZt22+cjIyONMca88sords+VcJzw9vbONtakSRNjjDF//OMfrWPvvPOOMcaYbt263XZfAwYMMMYYM3z48AfK6eax/vrrr1vHPDw8zC+//GLOnj1r3N3djSQTGhpqjDEmNjb2ll8H4fhxt/dNi8ViwsPDs41HRkaayMhI6+Obx9KePXusx5ck8/XXX5vMzEyzfPlym+03bNhgLBZLjnINDw83xhgzZcoUm/GlS5ea1NRUU7p0aSPJ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/LupYnuoYt9cntgWqrRxn8w6bhi2x13aWMckLzyPQo2ljfsd/v9sGLbHXdpYx4Du7JNZa5ojp765HLGWNUPd+2RZXHkKgE523AoKCvjh0YC62lmqdn9QHbMm7mJbqKqvPaRoI+6P6WFpUx0DrGV6eNpWyyQPPA5sHLbHXdq2z7lfLfPvportoYp9c3liW6jSpn0y67hx2B53aVMdk7zwPAo9LG3a7/D/Z+OwPe7SpjoGdG+fzFrTHDn1zeWItawZ6ton6zfp2URERERERERERERERERERERERDLFyVNERERERERERERERERERERERNQiGQBYJHUSLZFCocDx48ehUCikTkWnyamd5ZSrurEtVLE91IvtqxlsZ/VjG2sG25nUgXWliu1xl5zaQk65agLbQ5Wc2kNOuaob20KVnNpDTrlqAtvjLrYF0V38PGiGnNpZTrlqAtvjLraFerF9NYdtrV5sX81QZzvrARDNvlUiIiIiIiIiIiIiIiIiIiIiIiItx9v2ERERERERERERERERERERERFRi8TJU0RERERERERERERERERERERE1CJx8hQREREREREREREREREREREREbVInDxFREREREREREREREREREREREQtEidPqYm+vj4WL16MuLg4FBcX48aNG/jwww9rrffxxx8jNTUVxcXFOHLkCLp16yZBtvIxdOhQ/PHHH0hJSYEQAk8++WStdR7UppaWlvj555+Rl5eH3NxcrFu3DmZmZmrPPT4+HkKIWrF69WoAgImJCVavXo2srCwUFBRg586d6Nixo9rzkgo/I6ratGmDFStWICEhAcXFxTh16hT69++vsk5LaYvmxlpTHznvk+WItawerGNSt4epj4YcF9Z1XPnss8+q8608lFmzZiE+Ph4lJSU4c+YMfHx87rv+pEmTcO3aNZSUlCAiIgLjxo2rtY6c93PN3R6BgYG16uDAgQNqyZ21zFquwTpmHd9LrnUMsJblWsusY1VyrmMideN5FPWQ83kUjtGo4mdEFcdo1Iv1ph5y3ifLEetYPbStjgWj+WPBggUiMzNTjB8/Xjg5OYmJEyeK/Px8MWfOHOU67733nsjNzRVPPPGE6N27t9izZ4+IjY0VJiYmkuevrTF27FjxySefiAkTJgghhHjyySdVHm9Im+7fv19cuHBBDBgwQAwePFhcv35dbNmyRe25W1tbCxsbG2X4+/sLIYQYNmyYACDWrFkjEhMTxYgRI4SXl5c4ffq0OHnypORtrq7gZ0Q1tm3bJi5fviyGDh0qXFxcxMKFC8Xt27eFnZ1di2sL1pp8Qs77ZDkGa1k9wTpmqDsepj4aclwohBDTpk1TOb7Uts/65MmTRWlpqXj55ZdFjx49xPfffy9ycnJEhw4d6lzfz89PVFRUiHfeeUe4u7uLxYsXi7KyMtGrVy/lOnLez6mjPQIDA8X+/ftV6qBdu3asZRn87eRay6xj1rEu1DFrWb61zDrWrTpmMNQdPI+inpDzeRSO0agGPyOqwTEa1pscQ877ZDkG61g9oWV1LH2D6GL8+eefYt26dSrLdu7cKTZv3qz8PTU1Vfz73/9W/m5hYSFKSkrEs88+K3n+coi6PjwPalN3d3chhBDe3t7KdQICAoRCoRCdOnXSaP4rVqwQMTExyjzLysrExIkTlY+7ubkJIYTw9fWVvK3VEfyM3A1TU1NRUVEhxo8fr7L83Llz4pNPPmlRbaGOYK1pJuS+T5ZDsJbVH6xjRnPHw9RHQ48L66pXbYszZ86IVatWKX/X09MTycnJYv78+XWuv23bNvHnn3+qLAsJCRHfffed8nc57+fU0R6BgYHit99+U3vurGXWsjrbgnUs37+dXOtYXe3BWpbn3411LE0dMxiaCJ5HUX/I/TwKx2j4GakJjtGoP1hv6g+575PlEKxj9YfUdczb9qnJ6dOn4e/vj+7duwMA+vTpgyFDhigvc9ylSxd06tQJQUFByufk5+cjNDQUfn5+kuQsdw1pUz8/P+Tm5iI8PFy5TlBQEKqqquDr66uxXI2MjDB16lRs2LABAODt7Q1jY2OV3KOjo5GYmKiz9cDPyF2GhoYwNDREaWmpyvKSkhIMGTKkRbWFOrDWpCGnfbJcsJY1j3VMTfUw9dGY48Jvv/0WmZmZCA0NxSuvvKKeN/GQjIyM4O3trfI+hBAICgqqd5/k5+ensj4AHDp0SLm+nPdz6miPGsOHD0d6ejqioqKwZs0aWFlZNXv+rGXWMsA6rsE6lncdA6zlGnKrZdaxKrnXMZEm8DyK5snpPArHaPgZuRfHaNSP9aZ5ctonywXrWPM0XceGzZM2/dPSpUthYWGBqKgoKBQKGBgY4IMPPsDWrVsBALa2tgCA9PR0leelp6crH6PGaUib2traIiMjQ+VxhUKBnJwcjbb7hAkT0K5dO2zcuFGZV1lZGfLy8lTW0+V64GfkrsLCQpw+fRofffQRrl27hvT0dDz//PPw8/PDjRs3WlRbqANrTRpy2ifLBWtZ81jH1FQPUx8NPS786KOPcOzYMRQXF2PMmDFYs2YN2rRpg1WrVjX/G3kI1tbWMDQ0rPPz4+7uXudzbG1tH/h5q1lW3zraSh3tAQAHDx7E7t27ER8fDxcXF3z++ec4cOAA/Pz8UFVV1Wz5s5ZZywDr+H7vgXVc9zrairVc/3vQ5lpmHauSex0TaQLPo2ienM6jcIyGn5F7cYxG/VhvmienfbJcsI41T9N1zMlTajJ58mRMmTIFL7zwAq5cuYK+ffti5cqVSE1NxU8//SR1eiSx1157DQcOHMCtW7ekTkUy/IyoevHFF7FhwwakpqaisrIS58+fxy+//AJvb2+pU5M91hrpCtYykfZYsmQJ3n///fuuU9+gVXP59NNPlT9fvHgRZmZmePfdd7VicJM059dff1X+fPnyZURERCAuLg7Dhw/HsWPHHvh81jJpA9Yx6QrWMumCptYxkTbheRS6H47R8DPyTxyjUS/WG+kC1rHu42371OSrr77C0qVL8euvv+Ly5cv4+eefsWLFCixYsAAAkJaWBgCwsbFReZ6NjY3yMWqchrRpWloaOnbsqPK4gYEBrKysNNbujo6OGDVqFNatW6dclpaWBhMTE7Rt21ZlXV2uB35GVNWciDIzM4ODgwN8fX1hZGSEuLi4FtcWzY21Jg257JPlhLWseaxjqs+yZcvg7u5+36j5H97Y+njY48LQ0FA4ODjA2Ni46W+wGWRlZaGysrJR+6S0tLQHft5qljV0m9pCHe1Rl/j4eGRmZqJbt24Nyou1/GCs5btYxw1/D6xj7a1jgLXcmPegTbXMOlalrXVMpE14HkXz5HIehWM01fgZUcUxGvVivWmeXPbJcsI61jxN1zEnT6lJ69ata13KWKFQQF+/usnj4+Nx69Yt+Pv7Kx83NzeHr68vQkJCNJqrrmhIm4aEhMDS0hJeXl7KdUaOHAl9fX2EhoZqJM9XXnkFGRkZ2Ldvn3JZeHg4ysvLVXJ3dXWFk5OTztYDPyN1Ky4uRlpaGtq1a4eAgAD8/vvvLbYtmgtrTRpy2SfLCWtZ81jHVJ+srCxER0ffNyoqKh6qPh72uLBv377IyclBeXl5873RJqioqEB4eLjK+9DT04O/v3+97yMkJERlfQAYPXq0cn057+fU0R516dy5M9q3b9/gb0+zlh+MtXwX67ga61jedQywlmvIrZZZx6q0tY6JtAnPo2ieXM6jcIymGj8jdeMYjXqw3jRPLvtkOWEda54UdSwYzR+BgYEiKSlJjB8/Xjg5OYkJEyaIjIwMsXTpUuU67733nsjJyRGPP/648PDwEL/99puIjY0VJiYmkuevrWFmZiY8PT2Fp6enEEKIuXPnCk9PT+Hg4NDgNt2/f78IDw8XPj4+YtCgQSI6Olps2bJFI/nr6emJhIQEsWTJklqPrVmzRiQkJIjhw4cLLy8vcerUKXHq1CnJ21xdwc+IaowZM0YEBAQIZ2dnMWrUKHHhwgUREhIiDA0NW1xbsNbkE3LfJ8stWMvqCdYxQ93xoPqws7MT165dEz4+PsplDzoufOyxx8Rrr70mevXqJVxcXMTMmTNFYWGhWLRokeTv996YPHmyKCkpES+99JJwd3cXa9euFTk5OaJjx44CgNi0aZP4/PPPlev7+fmJ8vJyMW/ePOHm5iYWLlwoysrKRK9evZTryHk/19ztYWZmJr788kvh6+srnJycxMiRI8W5c+dEdHS0MDY2Zi1r8d9OzrXMOmYd60Ids5blW8usY92qYwZD3cHzKOoJuZ9H4RjN3eBnRDU4RsN6k2PIfZ8st2Adqye0rI6lbxBdjDZt2ogVK1aIhIQEUVxcLG7cuCE++eQTYWRkpLLexx9/LG7duiVKSkrEkSNHRPfu3SXPXZtj2LBhoi6BgYENblNLS0uxZcsWkZ+fL27fvi3Wr18vzMzMNJL/6NGjhRCizr+ziYmJWL16tcjOzhaFhYVi165dwsbGRvI2V1fwM6IazzzzjLhx44YoLS0VqampYtWqVcLCwqJFtkVzB2tNfSH3fbLcgrWsnmAdM9QdD6oPJycnIYQQw4YNUy570HFhQECAOH/+vMjPzxcFBQXiwoULYsaMGUJPT0/y9/vPmD17tkhISBClpaXizJkzYsCAAcrHgoODVT5rAMSkSZNEVFSUKC0tFZGRkWLcuHG1tinn/Vxztoepqak4ePCgSE9PF2VlZSI+Pl58//33ygFT1rL2/u3kXsusY9axLtQxa1m+tcw61p06ZjDUHTyPop6Q+3kUjtHcDX5GVINjNOoN1pt6Qu77ZLkF61g9oU11rHfnByIiIiIiIiIiIiIiIiIiIiIiohZFX+oEiIiIiIiIiIiIiIiIiIiIiIiIpMDJU0REREREREREJcSBzwAAIABJREFURERERERERERE1CJx8hQ12MKFCyFEw+7yKITAwoUL1ZwRUdNNmzYNQgg4OTk9cN34+HgEBgZqICvSVk5OThBCYNq0aVKnQkRERA+BfRrSNezPUGOwP0NERCRv7M+QLmKfhhqDfRoiUidOniIiIiIiIiIiIiIiIiIiIiIiohbJUOoEiIiI5CIxMRGmpqaoqKiQOhUiIiIiIqJGYX+GiIiIiIjkjH0aIlInXnmKiIioEcrKylBVVSV1GrWYmJhAT09P6jSIiIiIiEiLsT9DRERERERyxj4NEakLJ081kaOjI7799ltERUWhuLgYWVlZ2L59e5335m3bti2WL1+O+Ph4lJaWIikpCZs2bUL79u2V65iYmGDhwoWIjo5GSUkJUlNTsWvXLnTt2rXBOQUHByMyMhK9e/fG8ePHUVRUhJiYGEycOBEA8Mgjj+DMmTMoLi5GVFQU/P39a21j8ODBOHv2LEpKSnDjxg3MmDGjztcyNjbG8uXLkZGRgfz8fPz+++/o3Llzg3MlabVp0wYrVqxQ1mR6ejoOHz6Mfv36Aaj//tHBwcEIDg5W/j5s2DAIIfDMM8/gv//9L5KTk5Gfn48dO3bAwsICxsbGWLFiBdLT01FQUIANGzbA2Ni4UbkGBgaioKAADg4O+PPPP1FQUIDk5GTMmjULAODh4YGjR4+isLAQCQkJeP7552tto2fPnjh69CiKi4uRlJSEDz74APr6de8GP/jgAyQlJaGoqAjHjh1Dz549G5Uvaa+FCxdCCIHu3btj8+bNuH37NjIyMrB48WIAgL29Pfbs2YO8vDzcunUL8+bNUz63rvtp19SmnZ0dfvvtNxQUFCAjIwNfffVVvfVVn5r9t5eXF06dOoXi4mLExcXhjTfeUFmv5jP37LPP4pNPPkFycjKKi4thYWHRhJYhIqKWin0a9mnkiv0Z9mdaIvZniIiIVLE/w/6MnLFPwz5NS8Q+DRFpK962r4l8fHwwaNAgbNu2DcnJyXB2dsabb76J48ePo2fPnigpKQEAmJmZ4cSJE+jRowc2bNiA8+fPw9raGk888QTs7e2RnZ0NfX197N27F6NGjcIvv/yCb775Bubm5hg9ejQ8PDwQFxfX4LwsLS2xd+9ebNu2DTt27MCbb76Jbdu2YcqUKVi5ciXWrl2LrVu34t1338XOnTvh4OCAwsJCANUHOIcPH0ZmZiYWLVoEQ0NDfPzxx0hPT6/1OuvWrcOLL76ILVu24PTp0xg5ciT27dvXPI1Lard27VpMmjQJq1evxtWrV9G+fXsMGTIEPXr0wIULFxq9vQULFqCkpARLly5Ft27dMGfOHFRUVKCqqgqWlpZYtGgRBg4ciFdeeQXx8fH45JNPGrV9AwMDHDhwAH///Tfee+89TJkyBd9++y2Kiorw2WefYcuWLdi9ezdmzpyJn376CSEhIUhISAAA2NjYIDg4GIaGhli6dCmKioowY8YM5Wf0XosXL8ZHH32Effv2Yf/+/fDy8sLhw4cb3Zkg7fbrr7/i2rVreP/99/Hoo4/io48+Qk5ODt544w0cO3YM8+fPx5QpU7Bs2TKEhYXhxIkT9W7LwMAAhw4dQmhoKN555x2MGjUK77zzDmJjY7F27dpG5WVpaYn9+/dj+/bt+OWXXzB58mSsXbsW5eXltTrKH330EcrLy/H111/DxMQE5eXlD9UWRETUsrFPwz6NXLE/w/5MS8b+DBERUTX2Z9ifkTP2adinacnYpyEibSQYDx+mpqa1lvn6+gohhJg6dapy2aJFi4QQQkyYMKHebb388stCCCHmzp3bpJyCg4OFEEI899xzymWurq5CCCEqKyvFgAEDlMtHjx4thBBi2rRpymW7d+8WxcXFwsHBQbnM3d1dVFRUCCGEclmfPn2EEEKsXr1a5fV//vlnIYQQCxculPzvw7h/5ObmilWrVtX7eHx8vAgMDKyzxoKDg5W/Dxs2TAghREREhDA0NFQu37Jli1AoFGLfvn0qzz916pSIj49vVK6BgYFCCCHef/995bK2bduKoqIioVAoxOTJk5XLa+r93hpcvny5EEIIHx8f5TJra2uRm5srhBDCyclJuay0tFT8+eefKq//6aefCiFEne3BkFcsXLhQCCHE2rVrlcv09fXFzZs3hUKhEO+9916tGqv5uzs5OdXaZ9bU5ocffqjyOuHh4SIsLKxRudXsv99++23lMiMjI3H+/HmRlpam/HzVfOZu3LhR5/8hBoPBYDAaE+zTsE8j12B/hv2ZlhjszzAYDAaDoRrsz7A/I+dgn4Z9mpYY7NMwGAxtDd62r4lKS0uVPxsaGsLKygo3btxAbm4uvLy8lI9NnDgRFy9exJ49e+rd1sSJE5GZmYlVq1Y1Oa+CggJs27ZN+fv169eRm5uLa9eu4ezZs8rloaGhAKC85Ky+vj4CAgKwZ88eJCUlKdeLiorCoUOHVF5j/PjxAID//e9/KstXrlzZ5PxJM27fvg1fX1906tSpWbb3008/obKyUvl7aGgo9PX1sWHDBpX1QkND4eDgAAMDg0a/xrp165Q/5+XlITo6GkVFRdi+fbtyeU2933sp5fHjxyMkJARhYWHKZVlZWdiyZYvK9keNGgUTE5Nan0PWte65t5aqqqpw7tw56OvrY/369crlNTXWkMty//PbCydOnGjU5bxrVFRU4Pvvv6/1u42NDby9vVXW3bRpk8r/ISIioofBPg37NHLF/gz7My0Z+zNERETV2J9hf0bO2Kdhn6YlY5+GiLQNJ081kampKT7++GPcvHkTZWVlyM7ORlZWFiwtLdG2bVvlei4uLrh8+fJ9t+Xi4oLo6GgoFIom55WcnFxrWV5ensrBNgDk5+cDqL4EIQB06NABrVu3RkxMTK3nR0dHq/zu5OQEhUKB2NjY+65H2uu9996Dh4cHkpKSEBoaioULF6JLly4Pvb2bN2+q/J6XlwcAteouLy8PBgYGKp+RhigpKUFWVlatbdVX7zV1DVTXa0PrGkCtdbOyspCTk9OofEm71VWvJSUlyM7OrrX83lqqS121mZubCysrq0bnlZqaiuLiYpVl169fBwA4OzurLI+Pj2/09omIiP6JfRr2aeSK/Rn2Z1oy9meIiIiqsT/D/oycsU/DPk1Lxj4NEWkbTp5qolWrVuGDDz7A9u3bMXnyZIwePRqjRo1CVlYW9PWla976Du7rW66np6fOdEhL7dixA127dsWcOXOQmpqKd999F1euXMHYsWMBANVXAK6tvm8jqLvuWNfUnOqqm4etpeY4ofIw6rofPBERUWOxT0Nyxf4MtWTszxAREVVjf4bkjH0aasnYpyEibcPJU000adIkbNq0Ce+88w527dqFoKAgnDx5Eu3atVNZLzY2Fh4eHvfdVmxsLNzc3GBoaKjOlO8rMzMTxcXF6N69e63H3NzcVH5PTEyEgYEBXFxc7rseabe0tDR89913eOqpp9ClSxdkZ2fjgw8+AFA9K/uftQzcnfkvJ4mJiQ2uawC11rW2tn6oGepEjWVnZ4fWrVurLHN1dQUAJCQkSJARERHpOvZp2KeRM/Zn2J8h7cL+DBERaRr7M+zPyB37NOzTkHZhn4ao5eLkqSZSKBS1ZrvOmTOn1sH1rl270LdvX0yYMKHebe3atQsdOnTAW2+9pZZcG6KqqgqHDh3ChAkT4ODgoFzu7u6OgIAAlXUPHDgAAPi///s/leVz585Vf6LUZPr6+rCwsFBZlpmZidTUVJiYmACo7iwOHDgQRkZGynUeffRRODo6ajTX5rB//374+fnBx8dHucza2hpTpkxRWS8oKAjl5eWYM2eOynLWNWmKkZER3njjjVq/Z2RkIDw8XMLMiIhIV7FPwz6NHLE/w/4MaSf2Z4iISNPYn2F/Rq7Yp2GfhrQT+zRELZd00+d1xN69e/Hiiy8iLy8PV69ehZ+fn/KSsPf66quvMGnSJOzYsQMbNmxAeHg4rKys8MQTT2DmzJmIiIjATz/9hJdeegkrVqzAgAEDcOLECZiZmWHUqFFYs2YN/vjjD428p4ULF2Ls2LE4ceIE1qxZA0NDQ8yZMwdXrlyBp6encr1Lly5h69atmD17Ntq2bYvTp0/D398f3bp100ie1DTm5uZITk7Gzp07cenSJRQWFmLUqFEYMGAA5s2bBwBYt24dnnnmGRw8eBDbt2+Hi4sLpk6dihs3bkicfeN9+eWXePHFF3Hw4EF88803KCoqwowZM5CYmKjyzY2srCx8/fXX+M9//oO9e/di//796NevH8aNG4fMzEwJ3wG1FCkpKZg/fz6cnZ1x/fp1PPvss+jXrx9ef/11VFZWSp0eERHpIPZp2KeRI/Zn2J8h7cT+DBERaRr7M+zPyBX7NOzTkHZin4ao5eLkqSb617/+BYVCgSlTpsDU1BSnTp3CqFGjcOjQIZX1ioqKMHToUHz88cd46qmnMG3aNGRkZODo0aNITk4GUP2NgvHjx+ODDz7ACy+8gIkTJyI7OxsnT55EZGSkxt5TZGQkAgICsHz5cixevBjJyclYuHAhOnXqpHJgDgCvvvoqMjMzMWXKFEyYMAHHjh3Do48+qnxPpL2Ki4uxZs0ajBkzBk8//TT09fVx48YNvPnmm1i7di0A4PDhw5g3bx7mzZuHlStX4ty5c3jsscewbNkyibNvvLS0NIwYMQKrVq3C+++/j+zsbKxduxapqanYsGGDyroffvghSktLMXPmTIwYMQKhoaEYM2YM9u3bJ1H21JLk5uZi2rRpWLVqFV5//XWkp6dj9uzZWLdundSpERGRjmKfhn0aOWJ/hv0Z0k7szxARkaaxP8P+jFyxT8M+DWkn9mmIWi49AELqJIiIiAgIDg6GtbU1evfuLXUqREREREREjcL+DBERERERyRn7NEQtm77UCRAREREREREREREREREREREREUmBt+2TEUtLSxgbG9f7uEKhqHUfbyJtZ2FhgVatWt13nfT0dA1lQ6Qe3H8TERFV4/9E0jXsz1BLwH03ERFRNf5PJF3EPg21BNx/E1FDcPKUjOzevRvDhw+v9/GEhAR06dJFcwkRNYNvvvkGL7/88n3X0dPT00wyRGrC/TcREVE1/k8kXcP+DLUE3HcTERFV4/9E0kXs01BLwP03Ef0/e3ce1tSZv4//hiTsgSoioKi4r3VBUMBdXHCrG3XponWhrh2ntr9fR6efdtSO2ulA21Gr1lq02qLWrUWtCHWrGNRiQay4o1YU3CFIIATO9w8kNTUoQeBJwv26rvdVczgnuWPfJjk8T55THjYAJNEhqHz8/PxQq1atMn+u0Whw9OjRakxE9Pxat26NevXqPXWfn3/+uZrSEFUNvn4TERGV4HsiWRuez1BNwNduIiKiEnxPJGvEcxqqCfj6TUTlwclTRERERERERERERERERERERERUI1nMZfvq1asHtVotOgZZCaVSiRs3blT747KPqbKJ6GX2MVU2Ua/JRETVie+fVNl4TkPWgH1M1oLnNERUE/D9kyobf7dN1oDnNGQNeD5DVMIiJk/Vq1cPGRkZomOQlalfv361vhGwj6mqVGcvs4+pqlT3azIRUXXi+ydVFZ7TkDVgH5O14DkNEVkzvn9SVeHvtska8JyGrAHPZ4gsZPJU6czZ+vXrcxYtPTelUomMjIxq7yX2MVU2Eb3MPqbKJuo1mYioOvH9kyobz2nIGrCPyVrwnIaIagK+f1Jl4++2yRrwnIasAc9niP5kEZOnSqnVav7DJYvHPiZrwD4mIiIyHd8/yVqwl8kasI+JiIhMx/dPsgbsY7IW7GUiosplKzoAERERERERERERERERERERERGRCJw8RURERERERERERERERERERERENRInTxERERERERERERERERERERERUY3EyVNERERERERERERERERERERE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\n","text/plain":["<Figure size 3000x1000 with 21 Axes>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","\n"]}],"source":["# print(survey_df)\n","\n","plt.style.use('dark_background')\n","\n","title_name_list = [[\"total\", \"short\", \"long\"], [\"rev_total\", \"rev_short\", \"rev_long\"]]\n","survey_dfs_list = [[survey_df, short_survey_df, long_survey_df], [rev_survey_df, rev_short_survey_df, rev_long_survey_df]]\n","# title_name = \n","# survey_df_list = \n","\n","space_ = \" \" * 140\n","\n","for d_idx, (title_name, survey_dfs) in enumerate(zip(title_name_list, survey_dfs_list)):\n","\n","  fig = plt.figure(figsize=(30, 10))\n","\n","  gs = gridspec.GridSpec(nrows=1, # row Î™á Í∞ú \n","                          ncols=3, # col Î™á Í∞ú \n","                          # height_ratios=[1, 1, 1]\n","                        )\n","\n","  # gs = fig.add_gridspec(1, 3, wspace=0, hspace=0)\n","\n","  # nrows, ncols, h_r = 3, 3, [1, 1, 1]\n","  nrows, ncols, h_r = 3, 4, [1, 1, 1]\n","  # nrows, ncols, h_r = 4, 3, [1, 1, 1, 1]\n","\n","  # if d_idx == 0:\n","  # else:\n","    # nrows, ncols, h_r = 2, 2, [1, 1]\n","\n","  for gs_idx, (title, s_df) in enumerate(zip(title_name, survey_dfs)):  \n","\n","\n","    inner_gs = gs[gs_idx].subgridspec(nrows=nrows, # row Î™á Í∞ú \n","                          ncols=ncols, # col Î™á Í∞ú \n","                          height_ratios=h_r\n","                        )\n","\n","    for col_idx, s_cols in enumerate(s_df.columns):\n","      plt.subplot(inner_gs[col_idx])\n","      plt.plot(s_df[s_cols])\n","      plt.title(s_cols)\n","\n","  # plt.suptitle(\"total\" + \" \" * 140 + \"short\" + \" \" * 140 + \"long\")\n","  plt.suptitle(space_.join(title_name))\n","  plt.show()\n","  print(\"\\n\")"]},{"cell_type":"markdown","metadata":{"id":"GZ0y_x9ugOUD"},"source":["##### check dent_detph"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":693},"executionInfo":{"elapsed":1409,"status":"ok","timestamp":1640358130016,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"ETgm1avml0fE","outputId":"8e4dd6ea-1fe7-4895-9842-400ae913fbc4"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 400x800 with 2 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["max_dd : 0.2515057036519577\n"]}],"source":["target_pr = long_total_pr\n","\n","plt.figure(figsize=(4, 8))\n","gs = gridspec.GridSpec(nrows=2,\n","                        ncols=1,\n","                        height_ratios=[1, 1]\n","                      )\n","\n","plt.subplot(gs[0])\n","plt.plot(target_pr)\n","h_roll = pd.Series(target_pr).rolling(10).max()\n","plt.plot(h_roll)\n","# plt.show()\n","# print()\n","\n","plt.subplot(gs[1])\n","dent_depth = target_pr / h_roll\n","plt.plot(dent_depth)\n","plt.show()\n","\n","rolling_max = np.maximum.accumulate(long_total_pr)\n","max_dd = np.max((rolling_max - long_total_pr)/rolling_max)\n","print(\"max_dd :\", max_dd)"]},{"cell_type":"markdown","metadata":{"id":"v2Gjv019AEz8"},"source":["##### check frequency "]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":464},"executionInfo":{"elapsed":720,"status":"ok","timestamp":1636862363013,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"atdBjod9-e21","outputId":"5925d52a-da23-40cd-a9b3-6c0323024bc0"},"outputs":[{"name":"stdout","output_type":"stream","text":["[0. 0. 0. ... 0. 0. 0.]\n","(70, 1)\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["total_len = np.zeros(len(res_df))\n","print(total_len)\n","np_trade_list = np.array(trade_list)\n","# print(np_trade_list.shape)\n","print(np_trade_list[:, [0], [0]].shape)\n","total_len[np_trade_list[:, [0], [0]]] = 1\n","\n","plt.plot(total_len)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"zItdCdJXhQtu"},"source":["##### candle study (ÎÇúÏàò ÏÉùÏÑ±ÏùÑ ÌÜµÌï¥ candle strength ratio Î•º serialize Ìï† Ïàò ÏûàÏñ¥ÏïºÌï®)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OTM-5HpehcSB"},"outputs":[],"source":["# wick_score -> Ï†ïÏàòÏûêÎ¶¨, body_score -> ÏÜåÏàòÏ†ê ÏûêÎ¶¨\n","# def candle_strn_ratio(ohlc_data):\n","\n","#   # o, h, l, c = ohlc_data\n","#   if type(ohlc_data) != np.array:\n","#     ohlc_data = np.array(ohlc_data)\n","\n","#   o, h, l, c = np.split(ohlc_data, 4, axis=1)\n","#   #   check up / downward\n","#   # up = 1 if c >= o else 0\n","#   up = np.where(c >= o, 1, 0)\n","\n","#   total_len = h - l\n","#   upper_wick = (h - np.maximum(c, o)) / total_len\n","#   lower_wick = (np.minimum(c, o) - l) / total_len\n","#   body = abs(c - o) / total_len\n","\n","#   # if up:\n","    \n","#   # else:\n","    \n","#   up_score = (1 - upper_wick) * 100 + body\n","#   dn_score = (1 - lower_wick) * 100 + body\n","#   score = np.where(up, up_score, dn_score)  \n","\n","#   return score\n","\n","\n","def candle_strn_ratio(res_df, plot_check=0):\n","  \n","  ohlc_col = [\"open\", \"high\", \"low\", \"close\"]\n","  ohlcs = res_df[ohlc_col]\n","  o, h, l, c = np.split(ohlcs.values, 4, axis=1)\n","\n","  # if type(ohlc_data) != np.array:\n","  #   ohlc_data = np.array(ohlc_data)\n","\n","  #   check up / downward\n","  up = np.where(c >= o, 1, 0)\n","\n","  total_len = h - l\n","  upper_wick = (h - np.maximum(c, o)) / total_len\n","  lower_wick = (np.minimum(c, o) - l) / total_len\n","  body = abs(c - o) / total_len\n","    \n","  up_score = (1 - upper_wick) * 100 + body\n","  dn_score = (1 - lower_wick) * 100 + body\n","  score = np.where(up, up_score, dn_score)  \n","\n","  if plot_check:\n","    fig = plt.figure(figsize=(14, 18))\n","      \n","    gs = gridspec.GridSpec(nrows=3, # row Î™á Í∞ú \n","                          ncols=1, # col Î™á Í∞ú \n","                          height_ratios=[3, 1, 1]\n","                        )\n","\n","    ax = fig.add_subplot(gs[0])\n","\n","    # fig.show()\n","    # fig.canvas.draw()\n","\n","    temp_ohlc = ohlcs.values\n","    index = np.arange(len(temp_ohlc))\n","    candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","    mf.candlestick_ohlc(ax, candle, width=0.5, colorup='#26a69a', colordown='#ef5350', alpha=0.5)\n","\n","    plt.show()\n","\n","  return score"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":1080,"status":"ok","timestamp":1639793188612,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"KGJbx4BgKHKd","outputId":"892bab00-7b08-400f-89a6-f7a9de25d951"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 1400x1800 with 1 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["[[ 97.40707965]\n"," [ 93.03448276]\n"," [ 65.23144105]\n"," [ 87.89839572]\n"," [ 98.6984127 ]\n"," [ 42.30612245]\n"," [ 92.01176471]\n"," [ 97.25819672]\n"," [ 48.76363636]\n"," [ 45.27299703]\n"," [ 78.11056511]\n"," [ 65.07943925]\n"," [ 89.64356436]\n"," [ 88.06410256]\n"," [ 87.93854749]\n"," [ 96.70093458]\n"," [100.79865772]\n"," [ 36.16981132]\n"," [ 82.87234043]\n"," [ 93.57608696]]\n"]}],"source":["#   plot_check    #\n","print(candle_strn_ratio(res_df.iloc[:20], 1))\n","# break\n","# ohlc_data\n","\n","# fig = plt.figure(figsize=(14, 18))\n","  \n","# gs = gridspec.GridSpec(nrows=3, # row Î™á Í∞ú \n","#                       ncols=1, # col Î™á Í∞ú \n","#                       height_ratios=[3, 1, 1]\n","#                     )\n","\n","# ax = fig.add_subplot(gs[0])\n","\n","# # fig.show()\n","# # fig.canvas.draw()\n","\n","# temp_ohlc = ohlc_data.values\n","# index = np.arange(len(temp_ohlc))\n","# candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","# mf.candlestick_ohlc(ax, candle, width=0.5, colorup='#26a69a', colordown='#ef5350', alpha=0.5)\n","\n","# plt.show()"]},{"cell_type":"markdown","metadata":{"id":"o-XjNS1L31YB"},"source":["##### ep_loc.point & zone legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"taB2j7kT33iN"},"outputs":[],"source":["\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 (res_df['close'] < res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(strat_version)] - 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] >= res_df['bb_lower_1m']) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['bb_lower_1m']) &\n","    #                 (res_df['close'] < res_df['bb_lower_1m'])\n","    #                 , res_df['entry_{}'.format(strat_version)] - 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   (res_df['close'] > res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(strat_version)] + 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] <= res_df['bb_upper_1m']) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['bb_upper_1m']) &\n","    #                   (res_df['close'] > res_df['bb_upper_1m'])\n","    #                 , res_df['entry_{}'.format(strat_version)] + 1, res_df['entry_{}'.format(strat_version)])\n","\n","\n","    \n","   # --------------- ema --------------- #   \n","  # res_df['ema5_1m'] = ema(res_df['close'], 5).shift(1)\n","\n","  #   # --------------- cloud bline --------------- #   \n","  # res_df['cloud_bline_1m'] = cloud_bline(res_df, 26).shift(1)\n","  \n","    #       stochastic      #\n","  # res_df['stoch'] = stoch(res_df, 5, 3, 3)\n","\n","    #       fisher      #\n","  # res_df['fisher30'] = fisher(res_df, 30)\n","  # res_df['fisher60'] = fisher(res_df, 60)\n","  # res_df['fisher120'] = fisher(res_df, 120)\n","\n","    #       cctbbo      #\n","  # res_df['cctbbo'], _ = cct_bbo(res_df, 21, 13)\n","\n","    #       ema_roc      #\n","  # res_df['ema_roc'] = ema_roc(res_df['close'], 13, 9)\n","\n","\n","   # ------------------------------ htf data ------------------------------ #    \n","\n","  #             Todo              #\n","  # htf_df = pd.read_excel(date_path2 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # htf_df = pd.read_excel(date_path3 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # htf_df = pd.read_excel(date_path4 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # htf_df = pd.read_excel(date_path5 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # # # # htf_df = pd.read_excel(date_path6 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","\n","  # # ---- htf index slicing ---- #\n","  # htf_df = htf_df.loc[:res_df.index[-1]]\n","  \n","  # print(\"res_df.index[-1] :\", res_df.index[-1])\n","  # print(\"htf_df.index[-1] :\", htf_df.index[-1])\n","\n","  # res_df = dc_line(res_df, htf_df, '5m')\n","  # res_df = dc_level(res_df, '5m', 1)\n","\n","\n","  # # # if \"sma4\" in res_df.columns:\n","  # # #   res_df.drop(\"sma4\", axis=1, inplace=1)\n","\n","  # # htf_df['sma'] = htf_df['close'].rolling(60).mean()\n","  # # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf(res_df, htf_df, [-1]), columns=['sma_30m']))\n","  \n","  # htf_df['stoch'] = stoch(htf_df, 13, 3, 3)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf(res_df, htf_df, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","   \n","  # fifth_df['ema'] = ema(fifth_df['close'], 5)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf(res_df, fifth_df, [-1]), columns=['ema5']))\n","\n","        # ------------------------------------ short ------------------------------------ # \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 0:\n","        #   mr_score += 1          \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_upper_1m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_upper_3m'].iloc[i] <= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_upper_5m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == 'MARKET':\n","        #   mr_const_cnt += 1\n","        #   if (res_df['close'].iloc[i] - res_df['short_tp'].iloc[i]) / (res_df['short_out'].iloc[i] - res_df['close'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error):  \n","        #     mr_score += 1\n","\n","           \n","        # ------- entry once ------- #   \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == 1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == -1:\n","        #     prev_entry_cnt += 1          \n","        # # # print(\"prev_entry_cnt :\", prev_entry_cnt)\n","\n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] < res_df['bb_lower_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_lower2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_base_1h'].iloc[i]:\n","\n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] < res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","  \n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['low'].iloc[i] > res_df['short_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1\n","\n","\n","\n","        # ------------------------------------ long ------------------------------------ # \n","          \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 1:\n","        #   mr_score += 1   \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 1:\n","        #   mr_score += 1     \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 1:\n","          # mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_lower_1m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_lower_3m'].iloc[i] >= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_lower_5m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == \"MARKET\":\n","          # mr_const_cnt += 1        \n","          # if (res_df['long_tp'].iloc[i] - res_df['close'].iloc[i]) / (res_df['close'].iloc[i] - res_df['long_out'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error): # ÏùºÎ∞òÏ†ÅÏúºÎ°ú dr ÏÉÅÏóêÏÑú tp ÎπÑÏú®Ïù¥ Îçî Ïª§Ïßê (tr Î≥¥Îã§)\n","          #   mr_score += 1\n","\n","        # -------------- ep limit -------------- #    \n","        # mr_const_cnt += 1\n","        # # if (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # if config.ep_set.min_eplim_pct < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # # if 0 < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        #   # if res_df['st_gap_15m'].iloc[i] / res_df['open'].iloc[i] < 0:\n","        #   #   print(\"i, res_df['st_gap_15m'].iloc[i] :\", i, res_df['st_gap_15m'].iloc[i])\n","        #   mr_score += 1\n","\n","\n","        # -------------- entry once -------------- #    \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == -1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == 1:\n","        #     prev_entry_cnt += 1\n","          \n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","          \n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] > res_df['bb_upper_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_upper2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_base_1h'].iloc[i]:\n","        \n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] > res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","\n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['high'].iloc[i] < res_df['long_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","          \n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1"]},{"cell_type":"markdown","metadata":{"id":"-IbP_Z3Dlwk4"},"source":["### nontp survey"]},{"cell_type":"markdown","metadata":{"id":"FxJ1y8v2fkCR"},"source":["##### term & liqd"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":614},"executionInfo":{"elapsed":8,"status":"ok","timestamp":1628300788555,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"-qIWa48pl1GO","outputId":"b2687c93-e070-4d45-8a67-4cc783fd78f1"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 360x720 with 2 Axes>"]},"metadata":{"tags":[]},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]}],"source":["# print(nontp_long_indexs)\n","\n","plot_size = 100\n","\n","for s_i in range(plot_size, len(trade_list), plot_size):\n","\n","  slice_trade_list = trade_list[s_i - plot_size:s_i]\n","  slice_liqd_list = liqd_list[s_i - plot_size:s_i]\n","\n","  # print(len(slice_trade_list))\n","  np_trade = np.array(slice_trade_list)\n","  trade_term = np_trade[:, [2]] - np_trade[:, [1]]\n","\n","  plt.figure(figsize=(5, 10))\n","  plt.subplot(211)\n","  plt.bar(np.arange(len(trade_term)), trade_term.reshape(-1,), width=1, color='b')\n","\n","  # plt.plot(trade_term.reshape(-1,))\n","  plt.ylim(0, 1000)\n","  # plt.show()\n","  # print()\n","\n","  plt.subplot(212)\n","  # print(len(liqd_list))\n","  # plt.bar(np.arange(len(liqd_list)), liqd_list)\n","  plt.bar(np.arange(len(slice_liqd_list)), np.array(slice_liqd_list), width=1, color='r')\n","  # plt.plot(slice_liqd_list)\n","  plt.show()\n","\n","print()"]},{"cell_type":"markdown","metadata":{"id":"VBwVaUkvfnOd"},"source":["##### check nontp index"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":454,"status":"ok","timestamp":1628220543161,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"mRCMBOU4frNY","outputId":"ce4a9c9b-3589-40b3-8a19-4be03d5b9a1e"},"outputs":[{"name":"stdout","output_type":"stream","text":["32747\n"]}],"source":["# np_nontp_short_indexs = np.array(nontp_short_indexs)\n","# np_nontp_long_indexs = np.array(nontp_long_indexs)\n","\n","# short_til_term = len(res_df) - np_nontp_short_indexs\n","# long_til_term = len(res_df) - np_nontp_long_indexs\n","\n","max_nontp_short_term = len(res_df) - nontp_short_indexs[0]\n","max_nontp_long_term = len(res_df) - nontp_long_indexs[0]\n","\n","print(max_nontp_long_term)"]},{"cell_type":"markdown","metadata":{"id":"tApzvz_gK9lR"},"source":["## basic strategy"]},{"cell_type":"markdown","metadata":{"id":"FaRGwR4NEop2"},"source":["### shifting"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"a8aYsjEgQnGF"},"outputs":[],"source":["org_res_df = res_df.copy()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":291,"status":"ok","timestamp":1626515312874,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"RF3RM2G2RCb1","outputId":"ba8f6a75-d4df-4f85-cd0f-190935341f7a"},"outputs":[{"name":"stdout","output_type":"stream","text":["                            open     high  ...  min_upper  max_lower\n","2021-06-30 23:55:59.999  0.27223  0.27281  ...   0.272145    0.27005\n","2021-06-30 23:56:59.999  0.27274  0.27290  ...   0.272145    0.27005\n","2021-06-30 23:57:59.999  0.27246  0.27257  ...   0.272523    0.27021\n","2021-06-30 23:58:59.999  0.27166  0.27183  ...   0.272523    0.27021\n","2021-06-30 23:59:59.999  0.27144  0.27211  ...   0.272523    0.27021\n","\n","[5 rows x 37 columns]\n","                            open     high  ...  min_upper  max_lower\n","2021-06-30 23:55:59.999  0.27223  0.27281  ...   0.272523    0.27021\n","2021-06-30 23:56:59.999  0.27274  0.27290  ...        NaN        NaN\n","2021-06-30 23:57:59.999  0.27246  0.27257  ...        NaN        NaN\n","2021-06-30 23:58:59.999  0.27166  0.27183  ...        NaN        NaN\n","2021-06-30 23:59:59.999  0.27144  0.27211  ...        NaN        NaN\n","\n","[5 rows x 37 columns]\n"]}],"source":["#         refresh res_df      #\n","res_df = org_res_df.copy()\n","print(org_res_df.tail(5))\n","\n","# break\n","\n","\n","shift_size = -4\n","# shift_size = -1\n","# shift_size = -7\n","# shift_size = +3\n","\n","res_df['min_upper'] = res_df['min_upper'].shift(shift_size)\n","res_df['max_lower'] = res_df['max_lower'].shift(shift_size)\n","res_df['minor_ST1_Trend'] = res_df['minor_ST1_Trend'].shift(shift_size)\n","res_df['minor_ST2_Trend'] = res_df['minor_ST2_Trend'].shift(shift_size)\n","res_df['minor_ST3_Trend'] = res_df['minor_ST3_Trend'].shift(shift_size)\n","res_df['middle_line'] = res_df['middle_line'].shift(shift_size)\n","\n","print(res_df.tail(5))"]},{"cell_type":"markdown","metadata":{"id":"2gxvme1PC6ha"},"source":["### load model"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5831,"status":"ok","timestamp":1628862368878,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"dtYdAuSsC72_","outputId":"e8dccc53-aaa7-4bab-ed8d-753f634c08d6"},"outputs":[{"name":"stdout","output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/resnet/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5\n","94773248/94765736 [==============================] - 1s 0us/step\n"]}],"source":["# model_name = 'inner_tick_cnnreg_lscalemm_prefee_gpu_%s_%s_%s_%s_%s.h5'\n","\n","# model = tf.keras.models.load_model(ckpt_path + model_name)\n","\n","from tensorflow.keras.applications.resnet50 import ResNet50\n","\n","model = ResNet50(weights='imagenet', include_top=False)\n","# model.summary()\n"]},{"cell_type":"markdown","metadata":{"id":"5la6usMOFzkX"},"source":["#### gen selected vector"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oQk3-jbKF8FB"},"outputs":[],"source":["def min_max_scale(npy_x):\n","\n","  return (npy_x - np.min(npy_x)) / (np.max(npy_x) - np.min(npy_x))\n","\n","def expand_dims(npy_x):\n","\n","  row, col = npy_x.shape\n","  npy_x2 = np.array(npy_x).reshape(-1, row, col, 1).astype(np.float32)\n","  # input_x = np.array(data_x).reshape(-1, row, col).astype(np.float32)\n","\n","  #     1c to 3c    #\n","  npy_x3 = npy_x2 * np.ones(3, dtype=np.float32)[None, None, None, :]\n","\n","  return npy_x3\n","\n","\n","def vector_dist(f1, f2):\n","  return np.linalg.norm(f1-f2)\n","\n","\n","\n","# ------------------------ params ------------------------  #\n","selected_i = 500\n","input_size = 100\n","\n","\n","\n","#   1. ÏÑ†ÌÉùÎêú Ïù∏Îç±Ïä§Î•º ÏûÖÎ†•Î∞õÏïòÏùÑ Îïå, input generating ÌòïÌÉúÎßå ÎßåÎì§Ïñ¥ÎÜìÍ≥†,     #\n","#   1-1. input cols ÌïÑÏöîÌï®    #\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower']\n","# senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","# senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","\n","sma_list = ['sma']\n","\n","#     -------------- outer price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","cctbbo_list = ['cctbbo']\n","\n","selected_price_colname = basic_list + senkoua_list + senkoub_list + sar_list\n","selected_outprice_colname = [macd_list]\n","\n","\n","#         global scaling for outer price data       #\n","#         1. nan Ï≤òÎ¶¨       #\n","\n","# # print((np.isnan(df.values)))\n","# print(\"np.sum(np.isnan(df.values), axis=0) :\", np.sum(np.isnan(df.values), axis=0))\n","\n","# max_nan = np.max(np.sum(np.isnan(df.values), axis=0))\n","# # print(max_nan)\n","\n","# df = df.iloc[max_nan:-max_nan]\n","\n","# total_gdata = []\n","# for g_col in selected_outprice_colname:\n","\n","#   temp_data = min_max_scale(res_df[g_col])\n","#   total_gdata.append(temp_data)\n","\n","\n","\n","#   1-2. cols Ïóê Îî∞Î•∏, scaling method Íµ¨Î∂ÑÌï®    #\n","onprice_input_x = min_max_scale(res_df[selected_price_colname].iloc[selected_i - input_size:selected_i].values)\n","print(onprice_input_x.shape)\n","\n","\n","#   2. plot_check ÏóêÏÑú Î≥∏Ïù∏Ïù¥ ÏõêÌïòÎäî shape Ïùò Ïù∏Îç±Ïä§Î•º ÏÑ†ÌÉù   #\n","#   3. vertorize, \n","#   3-1. input generator Î•º Ïù¥Ïö©Ìï¥ entry signal Î∞úÏÉùÌï† ÎïåÎßàÎã§ dist ÎπÑÍµê ÏßÑÌñâ    #\n","re_onprice_input_x = expand_dims(onprice_input_x)\n","print(re_onprice_input_x.shape)\n","      \n","# break\n","\n","selected_vector = model.predict(re_onprice_input_x, verbose=1)\n","print(selected_vector.shape)"]},{"cell_type":"markdown","metadata":{"id":"OJqkmkpsLCYC"},"source":["### tr_tresh calc"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":446,"status":"ok","timestamp":1636015063790,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"gcpo4MGd9Wm4","outputId":"434b56b3-3a3c-45c1-f559-42681fea5f05"},"outputs":[{"name":"stdout","output_type":"stream","text":["res_wr : 0.6\n","tr_thresh : 0.6766666666666667\n","[0.95, 1.0338333333333334, 0.95, 0.95, 1.0338333333333334, 0.95, 0.95, 1.0338333333333334, 0.95, 1.0338333333333334]\n","\n","Î≥µÎ¶¨Î•º ÏúÑÌïú tr_thresh_ : 1.0\n","np.cumprod(test_trade_list)[-1] : 0.5751227991397774\n","total_pr :  0.5751227991397774\n","\n","[-0.05        0.03383333 -0.05       -0.05        0.03383333 -0.05\n"," -0.05        0.03383333 -0.05        0.03383333]\n","Îã®Î¶¨Î•º ÏúÑÌïú tr_thresh_ : 1.0\n","np.cumsum(np_test_trade)[-1] : 0.30000000000001137\n","total_pr :  1.3000000000000114\n"]}],"source":["res_wr = 0.6\n","# tr_thresh = 1\n","# tr_thresh = ((1 - res_wr) / res_wr) ** 0.5\n","tr_thresh = ((1 - res_wr) / res_wr) + 0.01\n","# tr_thresh = 2.6\n","print(\"res_wr :\", res_wr)\n","print(\"tr_thresh :\", tr_thresh)\n","\n","\n","#   Îã®Î¶¨    #\n","trade_num = 1000\n","asset = 1 # thousand USDT\n","test_loss_gap = 0.95  # fee adjusted\n","test_pr_gap = 1 + (1 - test_loss_gap) * tr_thresh\n","\n","test_loss_cnt = trade_num * (1 - res_wr)\n","test_pr_cnt = trade_num * res_wr\n","\n","test_trade_list = [test_pr_gap] * int(test_pr_cnt) + [test_loss_gap] * int(test_loss_cnt)\n","random.shuffle(test_trade_list)\n","# print(\"len(test_trade_list) :\", len(test_trade_list))\n","print(test_trade_list[:10])\n","print()\n","\n","# print(\"%.5f\" % np.cumprod(test_trade_list)[-1])\n","for tr_thresh_ in np.arange(1, 3, 0.2):\n","  if (1 + (1 - test_loss_gap) * tr_thresh_) ** test_pr_cnt * test_loss_gap ** test_loss_cnt > 1:\n","    break\n","print(\"Î≥µÎ¶¨Î•º ÏúÑÌïú tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumprod(test_trade_list)[-1] :\", np.cumprod(test_trade_list)[-1])\n","print(\"total_pr : \", np.cumprod(test_trade_list)[-1])\n","print()\n","#   Î≥µÎ¶¨ tr_thresh  #\n","#   1. trade_num Ïóê ÏòÅÌñ• Î∞õÏßÄ ÏïäÏùå\n","#   2. loss_gap Ïóê ÎπÑÎ°ÄÌï®\n","\n","for tr_thresh_ in np.arange(1, 3, 0.01):\n","  if ((1 - test_loss_gap) * tr_thresh_) * test_pr_cnt + (test_loss_gap - 1) * test_loss_cnt > 0:\n","    break\n","np_test_trade = np.array(test_trade_list) - 1\n","print(np_test_trade[:10])\n","# print(\"%.3f\" % )\n","print(\"Îã®Î¶¨Î•º ÏúÑÌïú tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumsum(np_test_trade)[-1] :\", np.cumsum(np_test_trade)[-1])\n","print(\"total_pr : \", 1 + np.cumsum(np_test_trade)[-1])\n"]},{"cell_type":"markdown","metadata":{"id":"JNQxkb06ZdTe"},"source":["# traded section plot"]},{"cell_type":"markdown","metadata":{"id":"UmH_Pb5BZUtm"},"source":["## plot with off-color st with dash"]},{"cell_type":"markdown","metadata":{"id":"5z4L3MMYmUI0"},"source":["### sorted plot_check"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":91345,"status":"error","timestamp":1641380018124,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"Qv1MM2MemZnF","outputId":"57597490-047d-48e0-aa49-c1f826f1e290"},"outputs":[],"source":["assert len(open_list) == len(trade_list), \"len(open_list) != len(trade_list)\"\n","assert len(tp_state_list) == len(fee_list), \"len(tp_state_list) != len(fee_list)\"\n","\n","if multi_mode:\n","  strat_version = \"v3\"\n","\n","save_plot = 0\n","tf_plot = 1\n","pr_sort = 1     # Ïù¥ÏÉÅÌïú Ï≤¥Í≤∞ ÌôïÏù∏ÌïòÍ∏∞ Ï¢ãÏùå\n","pr_descend = 1  # 1 -> ÎÇ¥Î¶ºÏ∞®Ïàú\n","# wl_case = 1     # 1 / -1 / 0 (win loss study)\n","position = 1    # -1 / 1 / 0 (short / long / both)\n","\n","inversion = 0\n","hedge = 0\n","\n","\n","if save_plot:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".ftr\", \"\")\n","  try:\n","    os.mkdir(plot_check_dir)\n","  except:\n","\n","    #     remove existing dir   #\n","    shutil.rmtree(plot_check_dir)\n","    print(plot_check_dir, 'removed !')\n","    os.mkdir(plot_check_dir)\n","    # pass\n","    \n","\n","prev_plotsize = 130\n","post_plotsize = 120\n","\n","\n","if position == -1:\n","  position = config.ep_set.short_entry_score\n","elif position == 1:\n","  position = -config.ep_set.short_entry_score\n","\n","\n","if inversion:  \n","\n","    plot_pr_list = rev_np_pr\n","    h_plot_pr_list = h_rev_np_pr  # hedge\n","\n","else:\n","\n","    plot_pr_list = np_pr\n","    try:\n","      h_plot_pr_list = h_np_pr\n","    except Exception as e:\n","      print(\"error in h_plot_pr :\", e)\n","      h_plot_pr_list = np_pr\n","\n","\n","h_candle_intv1 = 15\n","h_candle_intv2 = 60\n","if 'hopen_{}'.format(h_candle_intv2) not in res_df.columns:\n","  res_df = h_candle(res_df, h_candle_intv1)\n","  res_df = h_candle(res_df, h_candle_intv2)\n","\n","res_df[\"ma30_1m\"] = res_df['close'].rolling(30).mean()\n","res_df[\"ma60_1m\"] = res_df['close'].rolling(60).mean()\n","\n","res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line)\n","# res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=1, use_dtk_line=1)\n","# break\n","\n","rtc_list = [\"short_tp_1_{}\".format(strat_version), \"short_tp_gap_{}\".format(strat_version), \"long_tp_1_{}\".format(strat_version), \"long_tp_gap_{}\".format(strat_version)]\n","# h_rtc_list = [\"h_short_tp_1\", \"h_short_tp_gap\", \"h_long_tp_1\", \"h_long_tp_gap\"]\n","dtk_list = [\"short_dtk_1_{}\".format(strat_version), \"short_dtk_gap_{}\".format(strat_version), \"long_dtk_1_{}\".format(strat_version), \"long_dtk_gap_{}\".format(strat_version),\n","            # \"short_dtk_1_line\", \"short_dtk_gap_line\", \"long_dtk_1_line\", \"long_dtk_gap_line\",\n","            \"short_dtk_plot_1\", \"short_dtk_plot_gap\", \"long_dtk_plot_1\", \"long_dtk_plot_gap\"]\n","dc_v2_list = ['dc_upper_v2_{}'.format(strat_version), 'dc_lower_v2_{}'.format(strat_version)]\n","\n","\n","ohlc_list = ['open', 'high', 'low', 'close'] # + basic_st_list\n","hcandle_list = ['hopen_%s' % h_candle_intv1, 'hclose_%s' % h_candle_intv1, 'hopen_%s' % h_candle_intv2, 'hclose_%s' % h_candle_intv2]\n","# hcandle_list = ['hopen_%s' % h_candle_intv1, 'hclose_%s' % h_candle_intv1, 'hhigh_%s' % h_candle_intv2, 'hlow_%s' % h_candle_intv2]\n","\n","# --------------------- dc & bb level --------------------- #\n","dc_interval = '1m'\n","hdc_interval = '5m'\n","hhdc_interval = '1h'\n","\n","dc_list = ['dc_upper_%s' % dc_interval, 'dc_lower_%s' % dc_interval]\n","hdc_list = ['dc_upper_%s' % hdc_interval, 'dc_lower_%s' % hdc_interval]\n","hhdc_list = ['dc_upper_%s' % hhdc_interval, 'dc_lower_%s' % hhdc_interval]\n","\n","bb_interval = dc_interval\n","hbb_interval = hdc_interval\n","hhbb_interval = hhdc_interval\n","\n","bb_list = ['bb_upper_%s' % bb_interval, 'bb_lower_%s' % bb_interval]\n","hbb_list = ['bb_upper_%s' % hbb_interval, 'bb_lower_%s' % hbb_interval]\n","hhbb_list = ['bb_upper_%s' % hhbb_interval, 'bb_lower_%s' % hhbb_interval]\n","\n","bbwp_list = ['bbwp', 'bbwp_ma']\n","\n","\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1']\n","senkoub_list = ['senkou_b1']\n","\n","sar_list = ['sar_3m', 'sar_5m', 'sar_15m']\n","\n","ma_list = ['ma30_1m', 'ma60_1m']\n","sma_list = ['sma_1m']\n","\n","ema_list = ['ema_5m']\n","# cb_list = ['cloud_bline_1m']\n","cb_list = ['cloud_bline_30m']\n","# cb_list = ['cloud_bline_5m']\n","\n","\n","\n","# -------------- under price phase -------------- #\n","# macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3']\n","# trix_list = ['trix1', 'trix2', 'trix3']\n","# stoch_list = ['stoch_5m']\n","# fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","# cctbbo_list = ['cctbbo']\n","# emaroc_list = ['ema_roc']\n","rsi_list = ['rsi_%s' % config.loc_set.point.exp_itv] \n","cci_list = ['cci_%s' % config.loc_set.point.exp_itv] \n","\n","\n","# -------------- summation -------------- #\n","# input_colname = ohlc_list + basic_st_list + pline_list + bb_list + hbb_list + sma_list + cb_list + stoch_list + sar_list + dc_list\n","input_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + hhdc_list + dtk_list + dc_v2_list + rsi_list + ema_list + ma_list# + cci_list\n","\n","# yrange_colname = ohlc_list + basic_st_list + pline_list # currently just used for ymin, ymax\n","yrange_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + hhdc_list + dc_v2_list + ema_list # currently just used for ymin, ymax\n","yrange_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + dc_v2_list + ema_list # currently just used for ymin, ymax\n","\n","\n","# aggr_obj = dict(zip(plot_pr_list, open_list, enumerate(trade_list)))\n","aggr_obj = dict(zip(plot_pr_list, zip(open_list, enumerate(trade_list))))\n","sorted_obj = sorted(aggr_obj.items(), key=(lambda x: x[0]), reverse=pr_descend)\n","\n","# print(aggr_obj)\n","# print(sorted_obj)\n","\n","if pr_sort:\n","  iter_obj = sorted_obj\n","else:\n","  iter_obj = aggr_obj.items()\n","\n","odd_cnt = 0\n","obj_i = -1\n","rev_obj_i = 0\n","len_obj = len(sorted_obj)\n","\n","#   ÏßÄÍ∏à, continue Î∞úÏÉùÏãú true / false idx Í∞Ä Í∞ôÏù¥ ÏÉÅÏäπÌïòÎäî Î¨∏Ï†ú\n","\n","# for temp_pr, (open_idx, (t_i, (ep_idx_list_, tp_idx_list_))) in iter_obj:  # 0.699700153073042, (291402, (3014, ([370012], [370014])))\n","# for obj_i, (temp_pr, (open_idx, (t_i, (ep_idx_list_, out_idx_list_, tp_idx_list_)))) in enumerate(iter_obj):  # 0.699700153073042, (291402, (3014, ([370012], [370014])))\n","# for temp_pr, (open_idx, (t_i, (ep_idx_list_, out_idx_list_, tp_idx_list_))) in iter_obj:  # 0.699700153073042, (291402, (3014, ([370012], [370014])))\n","\n","while 1:\n","\n","  if obj_i >= len_obj or rev_obj_i >= len_obj:\n","    break\n","\n","  if odd_cnt % 2 == 1 and tf_plot: #  loss plot ÏùÑ Ï±ÑÏõåÏïºÌïòÎäî ÏÉÅÌô©\n","    rev_obj_i += 1\n","    temp_pr, (open_idx, (t_i, (ep_idx_list_, out_idx_list_, tp_idx_list_))) = sorted_obj[-rev_obj_i]\n","    if temp_pr > 1.0:\n","      continue  \n","\n","  else:\n","    obj_i += 1\n","    temp_pr, (open_idx, (t_i, (ep_idx_list_, out_idx_list_, tp_idx_list_))) = sorted_obj[obj_i]\n","    if temp_pr < 1.0:\n","      continue  \n","\n","  if not(i >= prev_plotsize):\n","    continue\n","  \n","  #   open size indexing by open_idx    #\n","  open_side_ = res_df['entry_{}'.format(strat_version)].iloc[open_idx]\n","\n","  # ---------- const. zone ---------- #\n","\n","  if position != 0:\n","    if open_side_ != position:\n","      continue\n","\n","  if multi_mode:\n","    if not strat_version in tp_state_list[t_i]:\n","    # if tp_state_list[t_i] != 'long close tp':\n","    # if tp_state_list[t_i] != 's-long_tp':\n","      continue\n","\n","  # if open_idx == 63901:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","\n","  # if tp_ratio_list[t_i] > 0.4:\n","  #   continue\n","\n"," \n","  # print(\"open_idx :\", open_idx)\n","  print(\"open_side_ :\", open_side_)\n","  print(\"np_timeidx[open_idx] :\", np_timeidx[open_idx])\n","  print(\"open_idx, ep_idx_list_[0], tp_idx_list_[-1] :\", open_idx, ep_idx_list_[0], tp_idx_list_[-1])\n","  #   const. Ïóê Ìï©ÌïòÎäî Ï°∞Í±¥ ÎÇòÏò¨ÎïåÍπåÏßÄ loop ÎèåÎ¶¨Í≥†, const. phase ÌÜµÍ≥ºÏãú odd_cnt += 1,\n","  #   => odd_cnt Î°ú gs_plot ÏùÑ Ï±ÑÏö¥Îã§Îäî ÎäêÎÇå \n","  #   odds = 1 -> wl_case == 1 Îßå ÌóàÏö©, odds = 2 -> wl_case == -1 Îßå ÌóàÏö©\n","  odd_cnt += 1\n","\n","  # break\n","\n","  plot_df = res_df.iloc[open_idx - prev_plotsize:tp_idx_list_[-1] + post_plotsize][input_colname]\n","\n","\n","  #       keep off-color st with another variable         #\n","  # st_trend_plot_df = res_df[['ST1_Trend%s' % basic_st_interval, 'ST2_Trend%s' % basic_st_interval, 'ST3_Trend%s' % basic_st_interval]].iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","\n","  # fig = trendln.plot_support_resistance(plot_df['close'], accuracy=8, fromwindows=0, numbest=1,  window=30) # requires matplotlib - pip install matplotlib\n","  \n","  odds = 1 if odd_cnt % 2 == 1 else 2\n","  if odds == 1:\n","\n","    plt.style.use('dark_background')\n","\n","    fig = plt.figure(figsize=(26, 18))\n","    \n","    gs = gridspec.GridSpec(nrows=2, # row Î™á Í∞ú \n","                        ncols=2, # col Î™á Í∞ú \n","                        height_ratios=[3, 1]\n","                        )\n","    \n","  ax = fig.add_subplot(gs[odds - 1])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='#26a69a', colordown='#ef5350', alpha=0.5)\n","\n","  # ---------- h_candle ---------- #\n","  alpha = 1\n","  lw = 1\n","  for cd_i, candle in enumerate(hcandle_list):\n","\n","    if cd_i == 2:\n","      lw = 2      \n","    plt.step(np.arange(len(plot_df)), plot_df[candle].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","\n","  # alpha = 0.1\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['hclose_60'].values, plot_df['hopen_60'].values, \n","  #                     where=1, facecolor='#ffffff', alpha=alpha)  \n","  \n","\n","   # --------- ma --------- #\n","  alpha = 1\n","  lw = 2\n","  for ma_i, item in enumerate(ma_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","   # --------- ema --------- #\n","  alpha = 1\n","  lw = 4\n","  for sm_i, item in enumerate(ema_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","    \n","  # ---------------------- dc_v2 ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(dc_v2_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","  # ---------------------- dc ---------------------- #\n","  alpha = 1\n","  lw = 2\n","  for sm_i, item in enumerate(dc_list):\n","      plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","  # ---------------------- hdc ---------------------- #\n","  alpha = 1\n","  lw = 2\n","  for sm_i, item in enumerate(hdc_list):\n","      plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#e65100', linewidth=lw)\n","\n","  # ---------------------- hhdc ---------------------- #\n","  alpha = 1\n","  lw = 4\n","  for sm_i, item in enumerate(hhdc_list):\n","      plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#c2185b', linewidth=lw)\n","\n","\n","  # ---------------------- bb ---------------------- #\n","  alpha = 1\n","  lw = 1\n","  for sm_i, item in enumerate(bb_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","\n","  alpha = 0.2\n","  plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % bb_interval].values, plot_df['bb_lower_%s' % bb_interval].values, \n","                      where=plot_df['bb_upper_%s' % bb_interval].values >= plot_df['bb_lower_%s' % bb_interval].values, facecolor='#ffffff', alpha=alpha)   \n","\n","  # ---------------------- hbb ---------------------- #\n","  alpha = 1\n","  lw = 2\n","  for sm_i, item in enumerate(hbb_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ff00ff', linewidth=lw)\n","  \n","  alpha = 0.2\n","  plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % hbb_interval].values, plot_df['bb_lower_%s' % hbb_interval].values, \n","                      where=plot_df['bb_upper_%s' % hbb_interval].values >= plot_df['bb_lower_%s' % hbb_interval].values, facecolor='#ff00ff', alpha=alpha) \n","  \n","  # ---------------------- hhbb ---------------------- #\n","\n","  alpha = 1\n","  lw = 4\n","  for sm_i, item in enumerate(hhbb_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#3179f5', linewidth=lw)\n","  \n","  alpha = 0.2\n","  plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % hhbb_interval].values, plot_df['bb_lower_%s' % hhbb_interval].values, \n","                      where=plot_df['bb_upper_%s' % hhbb_interval].values >= plot_df['bb_lower_%s' % hhbb_interval].values, facecolor='#3179f5', alpha=alpha) \n","  \n","  # ------------------- dtk_line (old, tp_line) ------------------- #\n","  \n","  # alpha = 1\n","  # lw = 2\n","  # rtc_ratio_list = [config.loc_set.zone.dt_k]\n","  \n","  # for rtc_k in rtc_ratio_list:    \n","  #   # plt.step(np.arange(len(plot_df)), plot_df['short_dtk_1_line'].values - plot_df['short_dtk_gap_line'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['long_dtk_1_line'].values + plot_df['long_dtk_gap_line'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","\n","  # hy_min = np.min(plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * rtc_k)\n","  # hy_max = np.max(plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * rtc_k)  \n","\n","  # alpha = 1\n","  # lw = 4\n","  # # h_rtc_ratio_list = [config.loc_set.zone.dt_k]\n","  # h_rtc_ratio_list = [config.loc_set.zone.zone_dt_k]\n","  # # h_rtc_ratio_list = [0.272, 0.36, 0.4, 0.5]\n","  \n","  # for h_rtc_k in h_rtc_ratio_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df['short_dtk_plot_1'].values - plot_df['short_dtk_plot_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['long_dtk_plot_1'].values + plot_df['long_dtk_plot_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['h_short_tp_1'].values - plot_df['h_short_tp_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['h_long_tp_1'].values + plot_df['h_long_tp_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","\n","  # # hy_min = np.min(plot_df['short_dtk_plot_1'].values - plot_df['short_dtk_plot_gap'].values * h_rtc_k)\n","  # # hy_max = np.max(plot_df['long_dtk_plot_1'].values + plot_df['long_dtk_plot_gap'].values * h_rtc_k)  \n","\n","  # ------------------------------------------------------------- #\n","\n","\n","  # ------------- ep ------------- #\n","  # if i != initial_i:\n","  # if len(ep_idx_list_) > 1:\n","  \n","    #        initial order         #\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='#ffeb3b')\n","  plt.axvline(prev_plotsize, alpha=0.5, linestyle='--', color='#ffeb3b')\n","\n","  for ep_i in range(len(ep_idx_list_)):\n","    # plt.axvline(prev_plotsize + (ep_idx_list_[ep_i] - ep_idx_list_[0]), alpha=0.7, linestyle='--', color='#ffeb3b')\n","    plt.axvline(prev_plotsize + (ep_idx_list_[ep_i] - open_idx), alpha=0.7, linestyle='--', color='#ffeb3b')\n","\n","  # plt.axvline(prev_plotsize, alpha=0.5, linestyle='--')\n","\n","  # ------------- x lim ------------- #\n","  x_max = 500\n","  if len(plot_df) > x_max:\n","    plt.xlim(-10, x_max)\n","\n","  x0,x1 = plt.gca().get_xlim()\n","\n","  # ep_xmin = (prev_plotsize + (ep_idx_list_[ep_i] - ep_idx_list_[0])) / x1\n","  ep_xmin = (prev_plotsize + (ep_idx_list_[ep_i] - open_idx)) / x1\n","  plt.axhline(ep_tp_list[t_i][0], linestyle='--', xmin=ep_xmin, xmax=1, alpha=1, color='lime')  # ep line axhline  \n","  plt.text(x1, ep_tp_list[t_i][0][0], ' ep :\\n %s' % ep_tp_list[t_i][0][0], ha='left', va='center', fontweight='bold') # ep line label\n","\n","  \n","  # ------------- tp ------------- #\n","  for sub_i in range(len(ep_tp_list[t_i][1])):\n","\n","    # tp_xmin = (prev_plotsize + (tp_idx_list_[sub_i] - ep_idx_list_[0])) / x1\n","    tp_xmin = (prev_plotsize + (tp_idx_list_[sub_i] - open_idx)) / x1\n","    plt.axhline(ep_tp_list[t_i][1][sub_i], linestyle='--', xmin=tp_xmin , xmax=1, alpha=1, color='lime')  # tp line axhline\n","    plt.text(x1, ep_tp_list[t_i][1][sub_i], ' tp :\\n %s' % ep_tp_list[t_i][1][sub_i], ha='left', va='center', fontweight='bold') # tp line label\n","     \n","    # plt.axvline(prev_plotsize + (tp_idx_list_[sub_i] - ep_idx_list_[0]), alpha=1., linestyle='--', color='#ffeb3b', zorder=2)\n","    plt.axvline(prev_plotsize + (tp_idx_list_[sub_i] - open_idx), alpha=1., linestyle='--', color='#ffeb3b', zorder=2)\n","\n","\n","  # ------------- rtc horizontal range ------------- # --> open_idx Î°ú Ìï†ÏßÄÎäî Ï∂îÌõÑ ÏàòÏ†ï Í∂åÍ≥† (ep_loc.point2 Ïóê ÏùòÌï¥ ÏßÑÏûÖ Í∏∞Ï§Ä point Í∞Ä Î≥ÄÍ≤ΩÎê† Ïàò ÏûàÏùå)\n","  # rtc_ratio_list = [0.272, 0.36, 0.4, 0.5]\n","  rtc_ratio_list = [0., 0.618]\n","  if open_side_ == config.ep_set.short_entry_score:\n","    # plt.axhline(res_df['short_rtc_1'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    # plt.axhline(res_df['short_rtc_0'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    out_line = res_df['short_out_{}'.format(strat_version)].iloc[out_idx_list_[0]]\n","    plt.axhline(out_line, linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    plt.text(x0, out_line, ' %s' % config.tr_set.out_gap, ha='left', va='center', fontweight='bold')\n","\n","    for rtc_k in rtc_ratio_list:\n","      plt.axhline(res_df['h_short_rtc_1_{}'.format(strat_version)].iloc[open_idx] - res_df['h_short_rtc_gap_{}'.format(strat_version)].iloc[open_idx] * rtc_k, linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","      plt.text(x0, res_df['h_short_rtc_1_{}'.format(strat_version)].iloc[open_idx] - res_df['h_short_rtc_gap_{}'.format(strat_version)].iloc[open_idx] * rtc_k, ' %s' % rtc_k, ha='left', va='center', fontweight='bold')\n","      \n","    y_max = out_line\n","    y_min = res_df['h_short_rtc_1_{}'.format(strat_version)].iloc[tp_idx_list_[-1]] - res_df['h_short_rtc_gap_{}'.format(strat_version)].iloc[tp_idx_list_[-1]] * rtc_k\n","\n","    print(\"short_tp :\", res_df['short_tp_{}'.format(strat_version)].iloc[tp_idx_list_[-1]])\n","    print(\"short_out :\", out_line)\n","\n","  else:\n","    # plt.axhline(res_df['long_rtc_1'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    # plt.axhline(res_df['long_rtc_0'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff') \n","    out_line = res_df['long_out_{}'.format(strat_version)].iloc[out_idx_list_[0]]\n","    plt.axhline(out_line, linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    plt.text(x0, out_line, ' %s' % config.tr_set.out_gap, ha='left', va='center', fontweight='bold')\n","\n","    for rtc_k in rtc_ratio_list:\n","      plt.axhline(res_df['h_long_rtc_1_{}'.format(strat_version)].iloc[open_idx] + res_df['h_long_rtc_gap_{}'.format(strat_version)].iloc[open_idx] * rtc_k, linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","      plt.text(x0, res_df['h_long_rtc_1_{}'.format(strat_version)].iloc[open_idx] + res_df['h_long_rtc_gap_{}'.format(strat_version)].iloc[open_idx] * rtc_k, ' %s' % rtc_k, ha='left', va='center', fontweight='bold')\n","\n","    y_max = res_df['h_long_rtc_1_{}'.format(strat_version)].iloc[tp_idx_list_[-1]] + res_df['h_long_rtc_gap_{}'.format(strat_version)].iloc[tp_idx_list_[-1]] * rtc_k\n","    y_min = out_line\n","\n","    print(\"long_tp :\", res_df['long_tp_{}'.format(strat_version)].iloc[tp_idx_list_[-1]])\n","    print(\"long_out :\", out_line)\n","  \n","    # t_tr = ((res_df['long_tp'].iloc[open_idx] - res_df['close'].iloc[open_idx] - tp_fee * res_df['close'].iloc[open_idx]) / (res_df['close'].iloc[open_idx] - res_df['long_out'].iloc[open_idx] + out_fee * res_df['close'].iloc[open_idx]))\n","    # t_dr = ((res_df['long_tp'].iloc[open_idx] - res_df['close'].iloc[open_idx]) / (res_df['close'].iloc[open_idx] - res_df['long_out'].iloc[open_idx]))     \n","    # print(\"t_tr :\", t_tr)\n","    # print(\"t_dr :\", t_dr)\n","\n","  #         hedge ep & tp         #\n","  h_i = h_trade_list[t_i][1]\n","  if h_i is not None:\n","    # plt.axvline(prev_plotsize + (h_i - ep_idx_list_[0]), linestyle='--')\n","    plt.axvline(prev_plotsize + (h_i - open_idx), linestyle='--')\n","    plt.axhline(h_ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='magenta')  # ep line axhline\n","    plt.axhline(h_ep_tp_list[t_i][1], linestyle='-', xmin=0.85, xmax=1, linewidth=3, color='magenta')  # tp line axhline\n","\n","  \n","  #         check pr        #\n","  if not config.lvrg_set.static_lvrg:\n","    \n","    #   list length Îßå sync ÎßûÏúºÎ©¥ t_i Í±±Ï†ï ÏïàÌï¥ÎèÑÎê®, zip Ìï¥ÏÑú ÏàúÏÑúÍ∞Ä Î∞îÎÄåÏóàÏùÑ Îøê, original serialized order ÏóêÏÑú t_i Î°ú indexing ÌïòÎäî Í≤ÉÎøêÏûÑ   #\n","    plt.title(\"%s ~ %s -> %.5f\\n %s\\n h_pr : %.5f\\n lvrg : %s\\ntp_ratio : %.3f\\n dr : %.3f\\n fee : %.4f\" % (ep_idx_list_[0], tp_idx_list_[-1], plot_pr_list[t_i], tp_state_list[t_i], \n","                                                                                                h_plot_pr_list[t_i], leverage_list[t_i], tp_ratio_list[t_i], dr_list[t_i], fee_list[t_i]))\n","\n","    print(\"short real pr :\", (ep_tp_list[t_i][0] / ep_tp_list[t_i][1][sub_i] - fee_list[t_i] - 1) * leverage_list[t_i] + 1)\n","    print(\"long real pr :\", (ep_tp_list[t_i][1][sub_i] / ep_tp_list[t_i][0] - fee_list[t_i] - 1) * leverage_list[t_i] + 1)    \n","\n","  else:\n","    plt.title(\"%s ~ %s -> %.5f\\n %s\\n h_pr : %.5f\\n tp_ratio : %.3f\\n dr : %.3f\\n fee : %.4f\" % (ep_idx_list_[0], tp_idx_list_[-1], plot_pr_list[t_i], tp_state_list[t_i], \n","                                                                                     h_plot_pr_list[t_i], tp_ratio_list[t_i], dr_list[t_i], fee_list[t_i]))\n","\n","    print(\"short real pr :\", (ep_tp_list[t_i][0] / ep_tp_list[t_i][1][sub_i] - fee_list[t_i] - 1) * config.lvrg_set.leverage + 1)\n","    print(\"long real pr :\", (ep_tp_list[t_i][1][sub_i] / ep_tp_list[t_i][0] - fee_list[t_i] - 1) * config.lvrg_set.leverage + 1)\n","  \n","  # ------------- y lim ------------- #  \n","  y_max_ = max(np.max(plot_df[yrange_colname]))\n","  y_min_ = min(np.min(plot_df[yrange_colname]))\n","  y_max = max(y_max, y_max_)\n","  y_min = min(y_min, y_min_)\n","  \n","  # hy_min = np.min(plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * 0.36)\n","  # hy_max = np.max(plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * 0.36)  \n","  # y_max = max(y_max, y_max_, hy_max)\n","  # y_min = min(y_min, y_min_, hy_min)\n","\n","  if np.isnan(y_max) or np.isnan(y_min):\n","    print('continued in yminmax')\n","    continue\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","\n","  plt.ylim(y_min, y_max)\n","\n","  #           x lim             #\n","  # x_max = 500\n","  # if len(plot_df) > x_max:\n","  #   plt.xlim(-10, x_max)\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  #           rsi          #    \n","  plt.subplot(gs[odds + 1])\n","  alpha = 1\n","  for rsi_ in rsi_list:\n","    plt.step(np.arange(len(plot_df)), plot_df[rsi_].values, 'g', alpha=alpha)\n","    # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","    alpha -= 0.2\n","  plt.axhline(50, linestyle='--')\n","  plt.axhline(50 + config.loc_set.point.osc_band, linestyle='--')\n","  plt.axhline(50 - config.loc_set.point.osc_band, linestyle='--')\n","  \n","  plt.axvline(prev_plotsize, linestyle='--')\n","  \n","  #           cci          #    \n","  # plt.subplot(gs[odds + 1])\n","  # alpha = 1\n","  # for cci_ in cci_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cci_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axhline(config.loc_set.point.osc_band, linestyle='--')\n","  # plt.axhline(-config.loc_set.point.osc_band, linestyle='--')\n","  \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","\n","\n","  #     vline open     #\n","  for ep_i in range(len(ep_idx_list_)):\n","    plt.axvline(prev_plotsize + (ep_idx_list_[ep_i] - open_idx), alpha=0.7, linestyle='--', color='#ffeb3b')\n","  \n","  #     vline close     #\n","  for sub_i in range(len(ep_tp_list[t_i][1])):\n","    plt.axvline(prev_plotsize + (tp_idx_list_[sub_i] - open_idx), alpha=1., linestyle='--', color='#ffeb3b', zorder=2)\n","\n","  if len(plot_df) > x_max:\n","    plt.xlim(-10, x_max)\n","\n","\n","  if not save_plot:\n","    if odds == 2:\n","      plt.show()\n","      plt.close()\n","  \n","  else:\n","    # ---------- save mode ---------- #\n","    fig_name = plot_check_dir +  \"/%s.png\" % t_i\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","\n","  # plt.close()  \n","  print()\n","\n","  # break\n"]},{"cell_type":"markdown","metadata":{"id":"13a-U32Uy50I"},"source":["### brief np_pr survey"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"L9LdjV2uUWnp"},"outputs":[],"source":["# plot_pr_list[:100]\n","\n","plt.plot(np_pr)\n","plt.axhline(1)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"TBE0l6dHRYrE"},"source":["### whole pr & chart sync"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":877},"executionInfo":{"elapsed":1436,"status":"ok","timestamp":1636355589887,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"-txULkhXRbz5","outputId":"7cda9fc7-4a4e-4c52-ffa3-a974b5f7c66f"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 3 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 3 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]}],"source":["#     chunky survey ÌïÑÏöîÌï®    #\n","chunk_size = 50000\n","\n","sync_pr = np.ones(len(res_df))\n","sync_tr = np.zeros(len(res_df))\n","# sync_tr = np.empty(len(res_df))\n","# sync_tr[:] = np.nan\n","\n","max_tr = np.max(tp_ratio_list)\n","min_tr = np.min(tp_ratio_list)\n","\n","for ck_i in range(0, len(res_df), chunk_size):\n","\n","  chunked_df = res_df.iloc[ck_i:ck_i + chunk_size]\n","  # break\n","\n","  for pr_, eptp_idx, tr_ in zip(pr_list[ck_i:ck_i + chunk_size], trade_list[ck_i:ck_i + chunk_size], tp_ratio_list[ck_i:ck_i + chunk_size]):\n","    # print(pr_, eptp_idx)\n","    sync_pr[eptp_idx[-1][0]] = pr_\n","    sync_tr[eptp_idx[-1][0]] = tr_\n","    # break\n","\n","  chunked_pr = sync_pr[ck_i:ck_i + chunk_size]\n","  chunked_tr = sync_tr[ck_i:ck_i + chunk_size]\n","  chunked_tr = np.where(np.isnan(chunked_tr), pd.Series(chunked_tr).shift(1), chunked_tr)\n","\n","  # plt.figure(figsize=(8, 6))\n","\n","  plt.subplot(311)\n","  plt.plot(np.arange(len(chunked_df)), chunked_df['close'])\n","  # plt.show()\n","\n","  plt.subplot(312)\n","  plt.plot(np.cumprod(chunked_pr))\n","  \n","  plt.subplot(313)\n","  plt.plot(chunked_tr)\n","  plt.ylim(min_tr + 0.5 * (max_tr - min_tr), max_tr)\n","  \n","  plt.show()\n","  print()\n"]},{"cell_type":"markdown","metadata":{"id":"Qys2Bw5Ou3u9"},"source":["### plot indi. legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pi5ntOOVu6JT"},"outputs":[],"source":["\n","  # ---------------------- ma ---------------------- #\n","   # --------- ema --------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(ema_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  #   # --------- sma --------- #\n","  # alpha = 1\n","  # for sm_i, sma in enumerate(sma_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 4\n","  #   plt.step(np.arange(len(plot_df)), plot_df[sma].values, alpha=alpha, color='#e91e63', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  \n","  # ---------------------- cb ---------------------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(cb_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#5b9cf6', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","\n","  \n","  # ---------------------- sar ---------------------- #\n","  # alpha = 1\n","  # markersize = 5\n","  # for sar in sar_list:\n","  #   plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","  #   markersize += 1\n","  #   alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  # alpha = 0.7\n","  # for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","  #                     where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","  #                     where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","  #   alpha -= 0.05\n","  \n","\n","\n","  # ---------------------- outer price indi. ---------------------- #\n","  #           macd          #\n","  # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","    \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for stoch_ in stoch_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[stoch_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(stoch_upper, linestyle='--')\n","  # plt.axhline(stoch_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- cctbbo ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for cctbbo in cctbbo_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cctbbo].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(cctbbo_upper, linestyle='--')\n","  # plt.axhline(cctbbo_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- ema_roc ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for emaroc in emaroc_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[emaroc].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","  \n","  # ---------- bbw ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for bbwp_ in bbwp_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[bbwp_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(bbwp_thresh, linestyle='--')\n","\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n"]},{"cell_type":"markdown","metadata":{"id":"59nW2aKYzkN8"},"source":["### plot all indicator (stepline ver.)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":828},"executionInfo":{"elapsed":3326,"status":"ok","timestamp":1631665238032,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"JDH4rXgNzno6","outputId":"3ee8589d-27d7-4433-ed78-7bb1233cf175"},"outputs":[{"name":"stdout","output_type":"stream","text":["short real pr : [0.95849245]\n","long real pr : [1.0378222]\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 864x1152 with 2 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]}],"source":["save_plot = False\n","\n","\n","if save_plot:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".xlsx\", \"\")\n","  try:\n","    os.mkdir(plot_check_dir)\n","  except:\n","\n","    #     remove existing dir   #\n","    shutil.rmtree(plot_check_dir)\n","    print(plot_check_dir, 'removed !')\n","    os.mkdir(plot_check_dir)\n","    # pass\n","    \n","# prev_plotsize = 120\n","prev_plotsize = 150\n","post_plotsize = 20\n","\n","# inversion = True\n","inversion = False\n","\n","# hedge = True\n","# hedge = False\n","\n","\n","if inversion:  \n","\n","    plot_pr_list = rev_np_pr\n","    h_plot_pr_list = h_rev_np_pr  # hedge\n","\n","else:\n","\n","    plot_pr_list = np_pr\n","    try:\n","      h_plot_pr_list = h_np_pr\n","    except Exception as e:\n","      print(\"error in h_plot_pr :\", e)\n","      h_plot_pr_list = np_pr\n","\n","\n","#         select plot columns       #\n","major_st_list = ['major_ST1_Up', 'major_ST1_Down', 'major_ST2_Up', 'major_ST2_Down', 'major_ST3_Up', 'major_ST3_Down',\n","                 'major_middle_line', 'major_upper_middle', 'major_lower_middle']\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower'] # + major_st_list\n","\n","\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1',  'senkou_a2']\n","senkoub_list = ['senkou_b1',  'senkou_b2']\n","\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1']\n","\n","# ma_list = ['sma1', 'sma4']\n","ma_list = ['ema5']\n","\n","\n","#     -------------- under price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","# macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3']\n","# trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","trix_list = ['trix1', 'trix2', 'trix3']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","cctbbo_list = ['cctbbo']\n","emaroc_list = ['ema_roc']\n","\n","\n","#       \n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols + ichimoku_cols2\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + trix_list\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + ma_list\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + ma_list + macd_list + stoch_list + fisher_list + cctbbo_list\n","input_colname = basic_list + major_st_list + senkoua_list + senkoub_list + sar_list + stoch_list + fisher_list + emaroc_list\n","price_colname = basic_list + senkoua_list + senkoub_list + sar_list # currently just used for ymin, ymax\n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols\n","\n","\n","\n","\n","# for t_i, (initial_i, i, j) in enumerate(trade_list):\n","for t_i, (ep_idx_list_, tp_idx_list_) in enumerate(trade_list):\n","  # print(i, j)\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","\n","  # if i <= 4860:\n","  # if i == 1536:\n","  # if 100 < i < 1860:\n","  if ep_idx_list_[0] == 370530:\n","    pass\n","  else:\n","    continue\n","\n","  # if tp_state_list[t_i] != 'd-open':\n","  #   continue\n","\n","  # if (entry[i] == -1) and res_df['close'].iloc[i - 1] > short_ep.iloc[i]:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  # if plot_pr_list[t_i] > 0.5:\n","  # if plot_pr_list[t_i] > 1.0:\n","  # # if plot_pr_list[t_i] < 1.0:\n","  #   continue\n","\n","  # plot_df = res_df.iloc[i - prev_plotsize:j + post_plotsize, input_cols]\n","  plot_df = res_df.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize][input_colname]\n","\n","\n","  #       keep off-color st with another variable         #\n","  # st_trend_plot_df = res_df.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize, [7, 10, 13]]\n","  # st_trend_plot_df = res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend']].iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  st_trend_plot_df = res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend', 'major_ST1_Trend', 'major_ST2_Trend', 'major_ST3_Trend']].iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  # htf_st_trend_plot_df = res_df[['major_ST1_Trend', 'major_ST2_Trend', 'major_ST3_Trend']].iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","\n","  # y_max = np.max(plot_df.iloc[:, [4, 6, 8]])\n","  # y_min = np.min(plot_df.iloc[:, [5, 7, 9]])\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  \n","  # y_max = max(np.max(plot_df.iloc[:, [4, 6, 8]]))\n","  # y_min = min(np.min(plot_df.iloc[:, [5, 7, 9]]))\n","  \n","  y_max = max(np.max(plot_df[price_colname]))\n","  y_min = min(np.min(plot_df[price_colname]))\n","\n","  if np.isnan(y_max) or np.isnan(y_min):\n","    continue\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","  \n","  plot_df[\"off_color_upper_st1\"] = np.where(st_trend_plot_df['minor_ST1_Trend'] == 1, plot_df['minor_ST1_Up'], np.nan)\n","  plot_df[\"off_color_upper_st2\"] = np.where(st_trend_plot_df['minor_ST2_Trend'] == 1, plot_df['minor_ST2_Up'], np.nan)\n","  plot_df[\"off_color_upper_st3\"] = np.where(st_trend_plot_df['minor_ST3_Trend'] == 1, plot_df['minor_ST3_Up'], np.nan)\n","  plot_df[\"off_color_lower_st1\"] = np.where(st_trend_plot_df['minor_ST1_Trend'] == -1, plot_df['minor_ST1_Down'], np.nan)\n","  plot_df[\"off_color_lower_st2\"] = np.where(st_trend_plot_df['minor_ST2_Trend'] == -1, plot_df['minor_ST2_Down'], np.nan)\n","  plot_df[\"off_color_lower_st3\"] = np.where(st_trend_plot_df['minor_ST3_Trend'] == -1, plot_df['minor_ST3_Down'], np.nan)\n","\n","  plot_df[\"off_color_upper_hst1\"] = np.where(st_trend_plot_df['major_ST1_Trend'] == 1, plot_df['major_ST1_Up'], np.nan)\n","  plot_df[\"off_color_upper_hst2\"] = np.where(st_trend_plot_df['major_ST2_Trend'] == 1, plot_df['major_ST2_Up'], np.nan)\n","  plot_df[\"off_color_upper_hst3\"] = np.where(st_trend_plot_df['major_ST3_Trend'] == 1, plot_df['major_ST3_Up'], np.nan)\n","  plot_df[\"off_color_lower_hst1\"] = np.where(st_trend_plot_df['major_ST1_Trend'] == -1, plot_df['major_ST1_Down'], np.nan)\n","  plot_df[\"off_color_lower_hst2\"] = np.where(st_trend_plot_df['major_ST2_Trend'] == -1, plot_df['major_ST2_Down'], np.nan)\n","  plot_df[\"off_color_lower_hst3\"] = np.where(st_trend_plot_df['major_ST3_Trend'] == -1, plot_df['major_ST3_Down'], np.nan)\n","\n","\n","  #       replace st values with np.nan, using st trend     #\n","  plot_df['minor_ST1_Up'] = np.where(st_trend_plot_df['minor_ST1_Trend'] == 1, np.nan, plot_df['minor_ST1_Up'])\n","  plot_df['minor_ST2_Up'] = np.where(st_trend_plot_df['minor_ST2_Trend'] == 1, np.nan, plot_df['minor_ST2_Up'])\n","  plot_df['minor_ST3_Up'] = np.where(st_trend_plot_df['minor_ST3_Trend'] == 1, np.nan, plot_df['minor_ST3_Up'])\n","  plot_df['minor_ST1_Down'] = np.where(st_trend_plot_df['minor_ST1_Trend'] == -1, np.nan, plot_df['minor_ST1_Down'])\n","  plot_df['minor_ST2_Down'] = np.where(st_trend_plot_df['minor_ST2_Trend'] == -1, np.nan, plot_df['minor_ST2_Down'])\n","  plot_df['minor_ST3_Down'] = np.where(st_trend_plot_df['minor_ST3_Trend'] == -1, np.nan, plot_df['minor_ST3_Down'])\n","\n","  plot_df['major_ST1_Up'] = np.where(st_trend_plot_df['major_ST1_Trend'] == 1, np.nan, plot_df['major_ST1_Up'])\n","  plot_df['major_ST2_Up'] = np.where(st_trend_plot_df['major_ST2_Trend'] == 1, np.nan, plot_df['major_ST2_Up'])\n","  plot_df['major_ST3_Up'] = np.where(st_trend_plot_df['major_ST3_Trend'] == 1, np.nan, plot_df['major_ST3_Up'])\n","  plot_df['major_ST1_Down'] = np.where(st_trend_plot_df['major_ST1_Trend'] == -1, np.nan, plot_df['major_ST1_Down'])\n","  plot_df['major_ST2_Down'] = np.where(st_trend_plot_df['major_ST2_Trend'] == -1, np.nan, plot_df['major_ST2_Down'])\n","  plot_df['major_ST3_Down'] = np.where(st_trend_plot_df['major_ST3_Trend'] == -1, np.nan, plot_df['major_ST3_Down'])\n","\n","\n","  plot_short_ep = short_ep.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  plot_long_ep = long_ep.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","\n","  plot_upper_middle = (plot_df['middle_line'] + plot_df['min_upper']) / 2\n","  plot_lower_middle = (plot_df['middle_line'] + plot_df['max_lower']) / 2\n","\n","  plot_short_tp = short_tp.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  plot_long_tp = long_tp.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]  \n","\n","\n","  # fig = trendln.plot_support_resistance(plot_df['close'], accuracy=8, fromwindows=False, numbest=1,  window=30) # requires matplotlib - pip install matplotlib\n","\n","  fig = plt.figure(figsize=(12, 16))\n","  \n","  gs = gridspec.GridSpec(nrows=3, # row Î™á Í∞ú \n","                       ncols=1, # col Î™á Í∞ú \n","                       height_ratios=[3, 1, 1]\n","                      )\n","  \n","  # fig = plt.figure(figsize=(8, 12))\n","  # ax = fig.add_subplot(111)\n","  # ax = fig.add_subplot(311)\n","  ax = fig.add_subplot(gs[0])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='r', colordown='b')\n","\n","  plt.step(plot_df[['minor_ST1_Up', 'minor_ST2_Up', 'minor_ST3_Up']].values, 'r', alpha=1)  # upper on color\n","  plt.step(plot_df[['minor_ST1_Down', 'minor_ST2_Down', 'minor_ST3_Down']].values, 'b', alpha=1)  # lower on color\n","  \n","  plt.step(plot_df[['major_ST1_Up', 'major_ST2_Up', 'major_ST3_Up']].values, 'r', alpha=1, linewidth=3)  # major upper on color\n","  plt.step(plot_df[['major_ST1_Down', 'major_ST2_Down', 'major_ST3_Down']].values, 'b', alpha=1, linewidth=3)  # major lower on color\n","\n","  plt.step(plot_df[['middle_line']].values, 'fuchsia', alpha=1)  # middle \n","  plt.step(plot_df[['major_middle_line']].values, 'fuchsia', alpha=1, linewidth=3)  # major_middle \n","  \n","  plt.step(plot_df[['off_color_upper_st1', 'off_color_upper_st2', 'off_color_upper_st3']].values, 'r', alpha=1, linestyle=':')  # upper off color\n","  plt.step(plot_df[['off_color_lower_st1', 'off_color_lower_st2', 'off_color_lower_st3']].values, 'b', alpha=1, linestyle=':')  # lower off color\n","  \n","  plt.step(plot_df[['off_color_upper_hst1', 'off_color_upper_hst2', 'off_color_upper_hst3']].values, 'r', alpha=1, linestyle=':', linewidth=3)  # major upper off color\n","  plt.step(plot_df[['off_color_lower_hst1', 'off_color_lower_hst2', 'off_color_lower_hst3']].values, 'b', alpha=1, linestyle=':', linewidth=3)  # major lower off color\n","\n","\n","  # plt.step(np.arange(len(plot_df)), plot_short_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","  # plt.step(np.arange(len(plot_df)),plot_long_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","\n","  plt.step(np.arange(len(plot_df)), plot_upper_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","  plt.step(np.arange(len(plot_df)), plot_lower_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","\n","  plt.step(plot_df[['major_upper_middle']].values, 'g', linestyle='--', alpha=1, linewidth=3)  # major_middle \n","  plt.step(plot_df[['major_lower_middle']].values, 'g', linestyle='--', alpha=1, linewidth=3)  # major_middle \n","  \n","\n","  # plt.step(np.arange(len(plot_df)), plot_short_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","  # plt.step(np.arange(len(plot_df)), plot_long_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","\n","\n","\n","  # ---------------------- on price indicator part ---------------------- #\n","\n","  # ---------------------- sma ---------------------- #\n","  # alpha = 1\n","  # for sm_i, sma in enumerate(ma_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[sma].values, alpha=alpha, color='black', linewidth=lw)\n","  #   alpha -= 0.2\n","  \n","  #               sar               #\n","  alpha = 1\n","  markersize = 5\n","  for sar in sar_list:\n","    plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","    markersize += 1\n","    alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  alpha = 0.7\n","  for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","                      where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","                      where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","    alpha -= 0.05\n","  \n","  # ------------------------------------------------------------- #\n","\n","\n","  #       ep & tp     #\n","  # if i != initial_i:\n","  # if len(ep_idx_list_) > 1:\n","  \n","  # ------------- initial order ------------- #\n","  plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  for ep_i in range(len(ep_idx_list_)):\n","    plt.axvline(prev_plotsize + (ep_idx_list_[ep_i] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","\n","  # plt.axvline(prev_plotsize, alpha=0.5, linestyle='--')\n","  plt.axhline(ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='lime')  # ep line axhline\n","\n","  for sub_i in range(len(ep_tp_list[t_i][1])):\n","    plt.axhline(ep_tp_list[t_i][1][sub_i], linestyle='-', xmin=0.75 + 0.05 * (sub_i + 1) , xmax=1, linewidth=3, color='lime')  # tp line axhline\n","    # plt.axhline(ep_tp_list[t_i][1], linestyle='-', xmin=0.9, xmax=1, linewidth=3)  # tp line axhline  \n","    plt.axvline(prev_plotsize + (tp_idx_list_[sub_i] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","\n","\n","  #         hedge ep & tp         #\n","  h_i = h_trade_list[t_i][1]\n","  if h_i is not None:\n","    plt.axvline(prev_plotsize + (h_i - ep_idx_list_[0]), linestyle='--')\n","    plt.axhline(h_ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='magenta')  # ep line axhline\n","    plt.axhline(h_ep_tp_list[t_i][1], linestyle='-', xmin=0.85, xmax=1, linewidth=3, color='magenta')  # tp line axhline\n","\n","  \n","  #         check pr        #\n","  if not static_lvrg:\n","    plt.title(\"%s ~ %s -> %.5f\\n %s\\n h_pr : %.5f\\nlvrg : %s\\ntp_ratio : %.2f\" % (ep_idx_list_[0], tp_idx_list_[-1], plot_pr_list[t_i], tp_state_list[t_i], h_plot_pr_list[t_i], lvrg_list[t_i], tp_ratio_list[t_i]))\n","  else:\n","    plt.title(\"%s ~ %s -> %.5f\\n %s\\n h_pr : %.5f\\ntp_ratio : %.2f\" % (ep_idx_list_[0], tp_idx_list_[-1], plot_pr_list[t_i], tp_state_list[t_i], h_plot_pr_list[t_i], tp_ratio_list[t_i]))\n","\n","  print(\"short real pr :\", (ep_tp_list[t_i][0] / ep_tp_list[t_i][1][sub_i] - fee - 1) * lvrg + 1)\n","  print(\"long real pr :\", (ep_tp_list[t_i][1][sub_i] / ep_tp_list[t_i][0] - fee - 1) * lvrg + 1)\n","\n","  #           y lim         #\n","  plt.ylim(y_min, y_max)\n","\n","\n","  # ---------------------- outer price indi. ---------------------- #\n","  #           macd          #\n","  # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","    \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for stoch in stoch_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[stoch].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(stoch_upper, linestyle='--')\n","  # plt.axhline(stoch_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- cctbbo ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for cctbbo in cctbbo_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cctbbo].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(cctbbo_upper, linestyle='--')\n","  # plt.axhline(cctbbo_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- ema_roc ---------- #  \n","  plt.subplot(gs[1])\n","  alpha = 1\n","  for emaroc in emaroc_list:\n","    plt.step(np.arange(len(plot_df)), plot_df[emaroc].values, 'g', alpha=alpha)\n","    # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","    alpha -= 0.2\n","  plt.axvline(prev_plotsize, linestyle='--')\n","  plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","  plt.axhline(0, linestyle='--')\n","\n","\n","\n","\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  if not save_plot:\n","    plt.show()\n","  \n","  else:\n","    # ---------- save mode ---------- #\n","    fig_name = plot_check_dir +  \"/%s.png\" % t_i\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","\n","  \n","  plt.close()\n","  print()\n","\n","  # break\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KGuJu2j4Aby9"},"outputs":[],"source":["# print()\n","for item in os.listdir(current_path + \"plot_check/\"):\n","  if item.endswith('png'):\n","    os.remove(current_path + \"plot_check/\" + item)\n","    print(current_path + \"plot_check/\" + item, \"removed !\")"]},{"cell_type":"markdown","metadata":{"id":"cj9X6S1jJjER"},"source":["### plot nontp case"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Gb1jGrS4Jl8A"},"outputs":[],"source":["prev_plotsize = 50\n","\n","# inversion = True\n","inversion = False\n","\n","# hedge = True\n","# hedge = False\n","\n","short_ver = False\n","\n","\n","if inversion:  \n","\n","    plot_pr_list = rev_np_pr\n","    h_plot_pr_list = h_rev_np_pr  # hedge\n","\n","else:\n","\n","    plot_pr_list = np_pr\n","    h_plot_pr_list = h_np_pr\n","\n","\n","\n","#         select plot columns       #\n","# basic_cols = [0, 1, 2, 3, 5, 6, 8, 9, 11, 12, 14] # you don't need to touch\n","\n","# sar_cols = [15, 18] # 15 ~ 19\n","# ichimoku_cols = [20, 21]  # 20 ~ 29\n","# # ichimoku_cols = [22, 23]  # 20 ~ 29\n","# ichimoku_cols2 = [22, 23]  # 20 ~ 29\n","# macd_cols = [30]  # 30 ~ 34\n","\n","# print(res_df.columns[basic_cols])\n","# break\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower']\n","# senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","# senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","\n","#     -------------- under price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher']\n","cctbbo_list = ['cctbbo']\n","\n","\n","#       \n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols + ichimoku_cols2\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + trix_list\n","input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + stoch_list + fisher_list + cctbbo_list\n","price_colname = basic_list + senkoua_list + senkoub_list + sar_list \n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols\n","\n","\n","if short_ver:\n","  nontp_indexs = nontp_short_indexs\n","  nontp_liqd_list = nontp_short_liqd_list\n","  nontp_pr_list = nontp_short_pr_list\n","  nontp_ep = nontp_short_ep_list\n","else:\n","  nontp_indexs = nontp_long_indexs\n","  nontp_liqd_list = nontp_long_liqd_list\n","  nontp_pr_list = nontp_long_pr_list\n","  nontp_ep = nontp_long_ep_list\n","\n","\n","for t_i, i in enumerate(nontp_indexs):\n","\n","  j = len(res_df) - 1\n","\n","  # print(i, j)\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","\n","  # if i <= 4860:\n","  # if i == 1536:\n","  # # if 1800 < i < 1860:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  # if tp_state_list[t_i] != 'd-open':\n","  #   continue\n","\n","  # if (entry[i] == -1) and res_df['close'].iloc[i - 1] > upper_ep.iloc[i]:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  # if plot_pr_list[t_i] > 0.5:\n","  # if plot_pr_list[t_i] > 1.0:\n","  # # if plot_pr_list[t_i] < 1.0:\n","  #   continue\n","\n","  # plot_df = res_df.iloc[i - prev_plotsize:j + 1, input_cols]\n","  plot_df = res_df.iloc[i - prev_plotsize:j + 1][input_colname]\n","\n","\n","  #       keep off-color st with another variable         #\n","  st_trend_plot_df = res_df.iloc[i - prev_plotsize:j + 1, [7, 10, 13]]\n","\n","  # y_max = np.max(plot_df.iloc[:, [4, 6, 8]])\n","  # y_min = np.min(plot_df.iloc[:, [5, 7, 9]])\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  \n","  # y_max = max(np.max(plot_df.iloc[:, [4, 6, 8]]))\n","  # y_min = min(np.min(plot_df.iloc[:, [5, 7, 9]]))\n","  \n","  y_max = max(np.max(plot_df[price_colname]))\n","  y_min = min(np.min(plot_df[price_colname]))\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","\n","  plot_df[\"off_color_upper_st1\"] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, plot_df.iloc[:, [4]], np.nan)\n","  plot_df[\"off_color_upper_st2\"] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, plot_df.iloc[:, [6]], np.nan)\n","  plot_df[\"off_color_upper_st3\"] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, plot_df.iloc[:, [8]], np.nan)\n","  plot_df[\"off_color_lower_st1\"] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, plot_df.iloc[:, [5]], np.nan)\n","  plot_df[\"off_color_lower_st2\"] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, plot_df.iloc[:, [7]], np.nan)\n","  plot_df[\"off_color_lower_st3\"] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, plot_df.iloc[:, [9]], np.nan)\n","\n","\n","  #       replace st values with np.nan, using st trend     #\n","  plot_df.iloc[:, [4]] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, np.nan, plot_df.iloc[:, [4]])\n","  plot_df.iloc[:, [6]] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, np.nan, plot_df.iloc[:, [6]])\n","  plot_df.iloc[:, [8]] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, np.nan, plot_df.iloc[:, [8]])\n","  plot_df.iloc[:, [5]] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, np.nan, plot_df.iloc[:, [5]])\n","  plot_df.iloc[:, [7]] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, np.nan, plot_df.iloc[:, [7]])\n","  plot_df.iloc[:, [9]] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, np.nan, plot_df.iloc[:, [9]])\n","\n","\n","  plot_upper_ep = upper_ep.iloc[i - prev_plotsize:j + 1]\n","  plot_lower_ep = lower_ep.iloc[i - prev_plotsize:j + 1]\n","\n","  plot_upper_middle = (plot_df['middle_line'] + plot_df['min_upper']) / 2\n","  plot_lower_middle = (plot_df['middle_line'] + plot_df['max_lower']) / 2\n","\n","  plot_short_tp = short_tp.iloc[i - prev_plotsize:j + 1]\n","  plot_long_tp = long_tp.iloc[i - prev_plotsize:j + 1]  \n","\n","\n","\n","  # fig = plt.figure(figsize=(12, 16))\n","  fig = plt.figure(figsize=(12, 16))\n","  \n","  gs = gridspec.GridSpec(nrows=3, # row Î™á Í∞ú \n","                       ncols=1, # col Î™á Í∞ú \n","                       height_ratios=[3, 1, 1]\n","                      )\n","  \n","  # fig = plt.figure(figsize=(8, 12))\n","  # ax = fig.add_subplot(111)\n","  # ax = fig.add_subplot(311)\n","  ax = fig.add_subplot(gs[0])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='r', colordown='b')\n","\n","  # print(plot_df.values[:, 4:])\n","  plt.step(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper on color\n","  # plt.plot(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper on color\n","  plt.step(plot_df.values[:, [5, 7, 9]], 'b', alpha=1)  # lower on color\n","  plt.step(plot_df.values[:, [10]], 'fuchsia', alpha=1)  # middle\n","  \n","  plt.step(plot_df.values[:, -6:-3], 'r', alpha=1, linestyle=':')  # upper off color\n","  plt.step(plot_df.values[:, -3:], 'b', alpha=1, linestyle=':')  # lower off color\n","\n","\n","\n","  # plt.step(np.arange(len(plot_df)), plot_upper_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","  # plt.step(np.arange(len(plot_df)),plot_lower_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","\n","  plt.step(np.arange(len(plot_df)), plot_upper_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","  plt.step(np.arange(len(plot_df)), plot_lower_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","\n","  # plt.step(np.arange(len(plot_df)), plot_short_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","  # plt.step(np.arange(len(plot_df)), plot_long_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","\n","\n","\n","  # ---------------------- indicator part ---------------------- #\n","  \n","  #               sar               #\n","  alpha = 1\n","  markersize = 5\n","  for sar in sar_list:\n","    plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","    markersize += 1\n","    alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  alpha = 0.7\n","  for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","                      where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","                      where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","    alpha -= 0.05\n","  \n","  # ------------------------------------------------------------- #\n","\n","\n","  #       ep & tp     #\n","  if i != initial_i:\n","    plt.axvline(prev_plotsize - (i - initial_i), alpha=0.5, linestyle='--')\n","  plt.axvline(prev_plotsize, alpha=0.5, linestyle='--')\n","  plt.axhline(nontp_ep[t_i], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='lime')  # ep line axhline\n","\n","  # for sub_i in range(len(ep_tp_list[t_i][1])):\n","  #   plt.axhline(ep_tp_list[t_i][1][sub_i], linestyle='-', xmin=0.75 + 0.05 * (sub_i + 1) , xmax=1, linewidth=3, color='lime')  # tp line axhline\n","    # plt.axhline(ep_tp_list[t_i][1], linestyle='-', xmin=0.9, xmax=1, linewidth=3)  # tp line axhline    \n","\n","  #         hedge ep & tp         #\n","  # h_i = h_trade_list[t_i][1]\n","  # if h_i is not None:\n","  #   plt.axvline(prev_plotsize + (h_i - i), linestyle='--')\n","  #   plt.axhline(h_ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='magenta')  # ep line axhline\n","  #   plt.axhline(h_ep_tp_list[t_i][1], linestyle='-', xmin=0.85, xmax=1, linewidth=3, color='magenta')  # tp line axhline\n","\n","  \n","  #         check pr        #\n","  plt.title(\"%s ~ %s -> liqd : %.2f\\npr : %.2f\" % (i, j, nontp_liqd_list[t_i], nontp_pr_list[t_i]))\n","\n","  #           y lim         #\n","  plt.ylim(y_min, y_max)\n","\n","\n","  # #           macd          #\n","  # # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # plt.subplot(313)\n","  plt.subplot(gs[1])\n","  alpha = 1\n","  for stoch in stoch_list:\n","    plt.step(np.arange(len(plot_df)), plot_df[stoch].values, 'g', alpha=alpha)\n","    # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","    alpha -= 0.2\n","  plt.axvline(prev_plotsize, linestyle='--')\n","  plt.axhline(50, linestyle='--')\n","  plt.axhline(stoch_upper, linestyle='--')\n","  plt.axhline(stoch_lower, linestyle='--')\n","\n","\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  plt.show()\n","  # plt.draw()\n","  plt.close()\n","  print()\n","\n","  # break\n"]},{"cell_type":"markdown","metadata":{"id":"-g7YY5BvMcLS"},"source":["### show detail values"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":255,"status":"ok","timestamp":1625228960601,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"5TxQ3rDnKMa7","outputId":"422ac214-8c88-4f39-ec3a-7c823574f6da"},"outputs":[{"name":"stdout","output_type":"stream","text":["upper_ep.iloc[i] : 2348.266954813089\n","short_tp.iloc[j] : 2205.609333246829\n"]}],"source":["i, j = 27267, 27268\n","print(\"upper_ep.iloc[i] :\", upper_ep.iloc[i])\n","print(\"short_tp.iloc[j] :\", short_tp.iloc[j])"]},{"cell_type":"markdown","metadata":{"id":"7AIl6EBuZNOL"},"source":["## none plot off-color st"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yaVxrNGzZgrF"},"outputs":[],"source":["prev_plotsize = 50\n","\n","for t_i, (i, j) in enumerate(trade_list):\n","  # print(i, j)\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","\n","  # if pr_list[t_i] >= 1:\n","  #   continue\n","\n","  plot_df = res_df.iloc[i - prev_plotsize:j + 1, [0, 1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 16]]\n","\n","  #       replace st values with np.nan, using st trend     #\n","  st_trend_plot_df = res_df.iloc[i - prev_plotsize:j + 1, [7, 10, 13]]\n","  plot_df.iloc[:, [4]] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, np.nan, plot_df.iloc[:, [4]])\n","  plot_df.iloc[:, [6]] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, np.nan, plot_df.iloc[:, [6]])\n","  plot_df.iloc[:, [8]] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, np.nan, plot_df.iloc[:, [8]])\n","  plot_df.iloc[:, [5]] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, np.nan, plot_df.iloc[:, [5]])\n","  plot_df.iloc[:, [7]] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, np.nan, plot_df.iloc[:, [7]])\n","  plot_df.iloc[:, [9]] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, np.nan, plot_df.iloc[:, [9]])\n","\n","\n","  plot_upper_ep = upper_ep.iloc[i - prev_plotsize:j + 1]\n","  plot_lower_ep = lower_ep.iloc[i - prev_plotsize:j + 1]\n","\n","  fig = plt.figure(figsize=(8, 6))\n","  ax = fig.add_subplot(111)\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='r', colordown='b')\n","\n","  # print(plot_df.values[:, 4:])\n","  plt.plot(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper\n","  plt.plot(plot_df.values[:, [5, 7, 9]], 'b', alpha=1)  # lower\n","  plt.plot(plot_df.values[:, [10]], 'g', alpha=1)  # middle\n","\n","  plt.plot(plot_df.values[:, [11]], 'c*', alpha=1, markersize=5)  # sar mic\n","  plt.plot(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  plt.plot(plot_upper_ep.values, alpha=1, linestyle='--')  # ep\n","  plt.plot(plot_lower_ep.values, alpha=1, linestyle='--')  # ep\n","\n","  plt.axvline(prev_plotsize, linestyle='--')\n","\n","  plt.title(\"%s ~ %s -> %.5f\" % (i, j, pr_list[t_i]))\n","  plt.show()\n","  # plt.draw()\n","  plt.close()"]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":["M8-EChy0VsDr","Iy76iO7gztne","Ic1mfmwWCIBu","Ci_jUnNTZbm9","VdukVo5-Suzj","Bw5JibDKSuzj","Pe0QpnORSuzk","t1E_eAyPSuzm","dzla8i9_ysmP","vOVr2jLczFQJ","v2Gjv019AEz8","FxJ1y8v2fkCR","VBwVaUkvfnOd"],"name":"ID1_3_backi2(0105_limit_decay).ipynbÏùò ÏÇ¨Î≥∏","toc_visible":true,"provenance":[],"authorship_tag":"ABX9TyOFPszs6xNdrEz2jiF4Fe83"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}