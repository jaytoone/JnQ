{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6rmQpzEGXfCw","executionInfo":{"status":"ok","timestamp":1650587606350,"user_tz":-540,"elapsed":17177,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"b1b8fc51-e080-4df7-bd78-9575f7380a19"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","import os, sys\n","\n","current_path = '/content/drive/My Drive/Colab Notebooks/JnQ/'\n","\n","os.chdir(current_path)\n","\n","strat_pkg = 'IDE'\n","\n","mpl_finance_path = '/content/drive/My Drive/Colab Notebooks/JnQ/mpl_finance'\n","zigzag_path = '/content/drive/My Drive/Colab Notebooks/JnQ/zigzag'\n","\n","if mpl_finance_path not in sys.path:\n","\n","  try:\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ')\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ/{}'.format(strat_pkg))\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ/funcs')\n","    sys.path.insert(0, mpl_finance_path)\n","    sys.path.insert(0, zigzag_path)\n","    \n","  except Exception as e:\n","    print(e)"]},{"cell_type":"markdown","metadata":{"id":"8uqYv5StTazo"},"source":["# requirements"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"9qGt60DKTZmf","executionInfo":{"status":"ok","timestamp":1650587625606,"user_tz":-540,"elapsed":19260,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["#!pip install zigzag --target=$'/content/drive/My Drive/Colab Notebooks/JnQ/zigzag'\n","\n","# !pip install findiff\n","# import nvstrings, nvcategory, cudf\n","# import cuml\n","# import cudf\n","\n","import os\n","from funcs.funcs_idep import *\n","from funcs.funcs_duration_v2 import *\n","from funcs.funcs_plot_check import *\n","from funcs.funcs_pairing import *\n","# from funcs.funcs_ide import *\n","# from funcs.funcs_indicator_candlescore import *\n","from funcs.funcs_indicator import *\n","from funcs.funcs_trader import *\n","from ast import literal_eval\n","import logging\n","import importlib\n","\n","import mpl_finance as mf\n","import matplotlib.pyplot as plt\n","from matplotlib import gridspec\n","# from zigzag import *\n","# from tqdm.notebook import tqdm\n","\n","import IPython\n","import IPython.display\n","\n","import numpy as np\n","# import jax.numpy as np\n","import pandas as pd\n","# import seaborn as sns\n","# import tensorflow as tf\n","from scipy import stats, signal\n","\n","import pickle\n","import shutil\n","import json\n","from easydict import EasyDict\n","import copy\n","\n","import datetime\n","from datetime import datetime\n","import random\n","import time\n","# import warnings\n","\n","# warnings.simplefilter(\"ignore\", category=RuntimeWarning)\n","\n","np.seterr(invalid=\"ignore\")\n","np.set_printoptions(suppress=True)\n","np.set_printoptions(linewidth=2000) \n","\n","pd.set_option('mode.chained_assignment',  None)\n","\n","pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)"]},{"cell_type":"markdown","metadata":{"id":"Ic1mfmwWCIBu"},"source":["# makeset - with to_htf dataframes"]},{"cell_type":"markdown","metadata":{"id":"AUSBU7T8Suzi"},"source":["## sync_check_make"]},{"cell_type":"code","source":["def donchian_channel_v3(df, period):\n","  itv = pd.infer_freq(df.index)\n","  upper_name = 'dc_upper_{}{}'.format(itv, period)\n","  lower_name = 'dc_lower_{}{}'.format(itv, period)\n","  base_name = 'dc_base_{}{}'.format(itv, period)\n","\n","  df.drop([upper_name, lower_name, base_name], inplace=True, axis=1, errors='ignore')\n","\n","  hh = df['high'].rolling(period).max().to_numpy()\n","  ll = df['low'].rolling(period).min().to_numpy()\n","\n","  df[upper_name] = hh\n","  df[lower_name] = ll\n","  df[base_name] = (hh + ll) / 2\n","\n","  return df\n","\n","def dc_line_v3(ltf_df, htf_df, dc_period=20):\n","\n","    interval = pd.infer_freq(htf_df.index)\n","    if interval not in ['T', '1m']:\n","        htf_df = donchian_channel_v3(htf_df, dc_period)\n","        # ltf_df.drop([htf_df.columns[-3:]], inplace=True, axis=1, errors='ignore')   # --> Todo, 안먹히는데..\n","        return ltf_df.join(to_lower_tf_v2(ltf_df, htf_df, [i for i in range(-3, 0, 1)]), how='inner')\n","    else:\n","        ltf_df = donchian_channel_v3(ltf_df, dc_period)\n","        return ltf_df"],"metadata":{"id":"kRmEY5BRtGwp","executionInfo":{"status":"ok","timestamp":1650589052108,"user_tz":-540,"elapsed":463,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"execution_count":47,"outputs":[]},{"cell_type":"code","execution_count":31,"metadata":{"id":"QmhLikYlSuzi","executionInfo":{"status":"ok","timestamp":1650588612293,"user_tz":-540,"elapsed":353,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["def sync_check_make(df):\n","\n","    make_itv_list = ['3T', '5T', '15T', '30T', 'H', '4H', 'D']\n","    offset_list = ['1h', '1h', '1h', '1h', '1h', '1h', '9h']\n","\n","    assert len(make_itv_list) == len(offset_list), \"length of itv & offset_list should be equal\"\n","        \n","    htf_df_list = [to_htf(df, itv_=itv_, offset=offset_) for itv_, offset_ in zip(make_itv_list, offset_list)]\n","\n","    df_3T, df_5T, df_15T, df_30T, df_H, df_4H, df_D = htf_df_list\n","\n","    for htf_df in htf_df_list:\n","      print(\"{} -> \".format(pd.infer_freq(htf_df.index)), htf_df.tail(1))\n","\n","    # heikinashi_v2(res_df_)\n","    # h_candle_v3(res_df, '5T')\n","\n","    # --------------- wave_range --------------- #\n","    # df = wave_range(df, 20, 40, ltf_df=None, touch_lbperiod=50)\n","\n","    # print(\"wave_range phase done\")\n","\n","\n","    # --------------- cbline --------------- #    \n","    # cloud_bline(df_3T, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_3T, [-1]), how='inner')\n","    # # cloud_bline(df_5T, 20)\n","    # # df = df.join(to_lower_tf_v2(df, df_5T, [-1]), how='inner')\n","    # cloud_bline(df_15T, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_15T, [-1]), how='inner')\n","    # cloud_bline(df_30T, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_30T, [-1]), how='inner')\n","    # cloud_bline(df_H, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_H, [-1]), how='inner')\n","    # cloud_bline(df_4H, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_4H, [-1]), how='inner')\n","\n","    # print(\"cbline phase done\")\n","\n","    # --------------- dc --------------- #  \n","    # df = dc_line(df, df_5T, '5T')\n","    # df = dc_line(df, df_15T, '15T')\n","    df = dc_line_v3(df, df, dc_period=20)\n","    df = dc_line_v3(df, df_3T, dc_period=20)\n","    df = dc_line_v3(df, df_H, dc_period=20)\n","\n","    print(\"dc phase done\")\n","\n","    # --------------- bb --------------- #  \n","    # df = bb_width_v2(df, period, multiple)\n","    # df = bb_line(df, df_5T, '5T')\n","    # df = bb_line(df, df_15T, '15T')\n","\n","    # print(\"bband phase done\")\n","\n","    # --------------- sd_dc --------------- #\n","    # df = sd_dc(df, 20, 40)\n","    # df = sd_dc(df, 20, 20)\n","    # df = sd_dc(df_5T, 20, 40, df)\n","    # df = sd_dc(df_H, 20, 40, df)\n","\n","    # print(\"sd_dc phase done\")\n","\n","    # --------------- imb_ratio --------------- #\n","    # imb_ratio(df, '5T')\n","    # imb_ratio_v3(df, \"5T\")\n","    # imb_ratio_v4(df, \"5T\")\n","\n","    # imb_ratio(df, 'H')\n","    # imb_ratio_v2(df, '5T')\n","    \n","    # print(\"imb_ratio phase done\")\n","\n","    # --------------- rel_abs_ratio --------------- #\n","    # rel_abs_ratio(df, '5T', norm_period=120)\n","\n","    # --------------- normalize data --------------- #\n","    # itv = 'T'\n","    # lb_period = 15\n","    # target_col = 'close_{}{}'.format(itv, lb_period)\n","    # target_data = df['close'].diff(lb_period).to_numpy()\n","    # norm_data(df, target_data, target_col)    \n","    # print(\"normalize data phase done !\")\n","\n","    # --------------- lucid sar --------------- #\n","    # lucid_sar_v2(df)\n","    # lucid_sar_v2(df_3T)\n","    # df = df.join(to_lower_tf_v2(df, df_3T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_5T)\n","    # df = df.join(to_lower_tf_v2(df, df_5T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_15T)\n","    # df = df.join(to_lower_tf_v2(df, df_15T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_30T)\n","    # df = df.join(to_lower_tf_v2(df, df_30T, [-2, -1]), how='inner')       \n","\n","    # print(\"sar phase done\")\n","\n","    # --------------- supertrend --------------- #\n","    # df = st_price_line(df, df_3T, '3m')\n","    # df = st_price_line(df, df_5T, '5m')\n","    # df = st_price_line(df, df_15T, '15m')\n","    # df = st_price_line(df, df_30T, '30m')\n","    # df = st_price_line(df, df_H, '1h')\n","    # df = st_price_line(df, df_4H, '4h')\n","\n","    # print(\"supertrend phase done\")\n","\n","    # --------------- rsi --------------- #  \n","    # df['rsi_1m'] = rsi(df, 14)    \n","    # df_5T['rsi_5m'] = rsi(df_5T, 14)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1]), columns=['rsi_5m']))\n","    \n","    # print(\"rsi phase done\")\n","\n","\n","    # --------------- cci --------------- #  \n","    # df['cci_1m'] = cci(df, 20)\n","\n","    # print(\"cci phase done\")\n","\n","    # --------------- ema --------------- #      \n","    # df_5T['ema_5m'] = ema(df_5T['close'], 195)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1]), columns=['ema_5m']))\n","    \n","    # print(\"ema phase done\")\n","        \n","    # --------------- stochastic --------------- #\n","    # df['stoch_1m'] = stoch(df, 13, 3, 3)\n","\n","    # df_5T['stoch'] = stoch(df_5T, 13, 3, 3)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","    # print(\"stoch phase done\")\n","\n","\n","    return df\n"]},{"cell_type":"markdown","metadata":{"id":"mEKyVbHWSuzi"},"source":["## make & save res_df (concat 생각하면, timeindex sync 맞춰야함)"]},{"cell_type":"markdown","metadata":{"id":"VdukVo5-Suzj"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11,"status":"error","timestamp":1636201718856,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"khKb9nhlSuzj","outputId":"02bf2c60-f298-4fe9-e6bb-78230ac1348c"},"outputs":[{"ename":"NameError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-5-ee034491b257>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0ma_day\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m3600\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m24\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtqdm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m   \u001b[0mkeys\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mfile_list\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'file_list' is not defined"]}],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  if '2021-07-01'.upper() not in file_list[i]:\n","  # if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    excel_name = key.replace(\".xlsx\", \"_st1h_backi2.xlsx\")\n","    excel_path = save_path + excel_name\n","\n","    if excel_name in exist_list:\n","      print(excel_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m 마지막 timeindex 의 date 기준, 08:59:59.999000 를 last timestamp 로 설정\n","      #      2. 시작 timestamp 는 모든 tf 의 가장 최근 시작 index,\n","      #       a. 1m 의 시작 timeindex 는 최소, htf 의 시작 timeindex 보다 interval 만큼 앞서야함\n","      #         i. 따라서 1m open_index, latest_open_index + 1d 를 하면 댐\n","      #           1. timestamp 으로 변환후 1day 를 더하고 datetime 으로 변환\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","    latest_open_index = sorted(open_indexes)[-1]\n","    \n","    open_ts = datetime.timestamp(latest_open_index)\n","    latest_open_index_1m = datetime.fromtimestamp(open_ts + a_day)\n","\n","    #   str 로 만들어 접근하면 불가함  #\n","    end_index = pd.to_datetime(str(df.index[-1]).split(\" \")[0] + \" 08:59:59.999000\")\n","    # break\n","\n","    sliced_df = df.loc[latest_open_index_1m:end_index] # to_lower_tf 의 기준 ltf\n","    sliced_second_df = second_df.loc[latest_open_index:end_index]\n","    sliced_third_df = third_df.loc[latest_open_index:end_index]\n","    sliced_fourth_df = fourth_df.loc[latest_open_index:end_index]\n","    sliced_fifth_df = fifth_df.loc[latest_open_index:end_index]\n","\n","    print(\"sliced index\")\n","    print(sliced_df.index[[0, -1]])\n","    print(sliced_second_df.index[[0, -1]])\n","    print(sliced_third_df.index[[0, -1]])\n","    print(sliced_fourth_df.index[[0, -1]])\n","    print(sliced_fifth_df.index[[0, -1]])\n","\n","    try:\n","      sliced_sixth_df = sixth_df.loc[latest_open_index:end_index]\n","      sliced_seventh_df = seventh_df.loc[latest_open_index:end_index]\n","\n","      print(sliced_sixth_df.index[[0, -1]])\n","      print(sliced_seventh_df.index[[0, -1]])\n","\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df, sliced_sixth_df, sliced_seventh_df)\n","    \n","    except:\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df)\n","\n","\n","\n","    res_df.to_excel(excel_path)\n","    print(excel_name, \"saved succesfully !\")"]},{"cell_type":"markdown","metadata":{"id":"Bw5JibDKSuzj"},"source":["### xlsx to feather"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":355},"id":"VA-_gcA7Suzj","outputId":"f6f3b55d-ec2c-4b2c-d62e-3de7c0384dc4"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"be2b848dbcb14a079a2b7bd605af6435","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/156 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["DatetimeIndex(['2021-06-28 00:00:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:02:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:04:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:14:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:29:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-09-14 03:59:59.999000', '2021-11-15 14:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-03-10 20:59:59.999000', '2021-11-15 16:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","\n","xlsx converted to feather !\n","DatetimeIndex(['2021-06-28 00:00:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:02:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:04:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:14:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:29:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-09-14 03:59:59.999000', '2021-11-15 14:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-03-10 20:59:59.999000', '2021-11-15 16:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","\n","xlsx converted to feather !\n"]}],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  # if '2021-07-01'.upper() not in file_list[i]:\n","  if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    feather_name = key.replace(\".xlsx\", \".ftr\")\n","    # feather_path = save_path + feather_name\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m 마지막 timeindex 의 date 기준, 08:59:59.999000 를 last timestamp 로 설정\n","      #      2. 시작 timestamp 는 모든 tf 의 가장 최근 시작 index,\n","      #       a. 1m 의 시작 timeindex 는 최소, htf 의 시작 timeindex 보다 interval 만큼 앞서야함\n","      #         i. 따라서 1m open_index, latest_open_index + 1d 를 하면 댐\n","      #           1. timestamp 으로 변환후 1day 를 더하고 datetime 으로 변환\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","\n","    df.reset_index().to_feather(date_path + feather_name, compression='lz4')\n","    second_df.reset_index().to_feather(date_path2 + feather_name, compression='lz4')\n","    third_df.reset_index().to_feather(date_path3 + feather_name, compression='lz4')\n","    fourth_df.reset_index().to_feather(date_path4 + feather_name, compression='lz4')\n","    fifth_df.reset_index().to_feather(date_path5 + feather_name, compression='lz4')\n","    sixth_df.reset_index().to_feather(date_path6 + feather_name, compression='lz4')\n","    seventh_df.reset_index().to_feather(date_path7 + feather_name, compression='lz4')\n","\n","    print(\"xlsx converted to feather !\")\n","    "]},{"cell_type":"markdown","metadata":{"id":"Pe0QpnORSuzk"},"source":["### add itv_name to ftr"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":223},"executionInfo":{"elapsed":43664,"status":"ok","timestamp":1638246331122,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"M-gl30KxSuzk","outputId":"1cfcb580-8d25-4bd0-fdd0-213640779ce2"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"e3225655da874b8d89cc8b2a381b3fb6","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/175 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 BTCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 BCHUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 XRPUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 EOSUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 LTCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ETCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 LINKUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 XLMUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ADAUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ETHUSDT_1m.ftr\n"]}],"source":["save_path = './candlestick_concated/res_df/'\n","\n","# dir_path = \"bbdc3m_backi2\"\n","# date = '2021-10-10'\n","date = '2021-07-01'\n","\n","db_path = './candlestick_concated/database_bn/non_cum/%s/' % date\n","os.makedirs(os.path.join(db_path), exist_ok=True)\n","\n","# exist_list = os.listdir(os.path.join(save_path, dir_path))\n","# break\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","        \n","    df = shutil.copy(date_path + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n","    second_df = shutil.copy(date_path2 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval2))\n","    third_df = shutil.copy(date_path3 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval3))\n","    fourth_df = shutil.copy(date_path4 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval4))\n","    fifth_df = shutil.copy(date_path5 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval5))\n","    sixth_df = shutil.copy(date_path6 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval6))\n","    seventh_df = shutil.copy(date_path7 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval7))\n","\n","    print(\"copied to\" + db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n"]},{"cell_type":"markdown","metadata":{"id":"4oZ1ohTtSuzk"},"source":["### feather ver. (database to res_df)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vgVHpnUsSuzk"},"outputs":[],"source":["# db_path = './candlestick_concated/database_ub/' # upbit\n","db_path = './candlestick_concated/database_bn/'   # binance\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","save_dir_path = \"bb1d_backi2\"\n","date = '2022-02-17'\n","\n","# concat_path = 'noncat' # 새로운 cols 를 기존 cum/concat 에 붙이려는 경우\n","concat_path = 'concat'\n","cum_path = \"cum\"\n","# cum_path = \"non_cum\"  # non_cum 으로 진행하는 경우, row concat 용도이기 때문에 noncat -> concat 으로 변경 (base cols 를 모두 담고 있음)\n","\n","load_path = os.path.join(db_path, cum_path, date)\n","save_path = os.path.join(save_path, save_dir_path, concat_path, cum_path, date)\n","\n","os.makedirs(save_path, exist_ok=True)\n","\n","file_list = os.listdir(load_path)\n","exist_list = os.listdir(save_path)\n","# break\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","\n","    if \"_1m\" not in key:\n","      continue\n","\n","    # feather_name = key.replace(\".ftr\", \"_%.ftr\" % save_dir_path)\n","    feather_name = key.replace(\"_1m\", \"\")\n","    feather_path = os.path.join(save_path, feather_name)\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    df = pd.read_feather(os.path.join(load_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","    res_df = sync_check_make(df)\n","\n","    res_df.reset_index().to_feather(feather_path, compression='lz4')\n","    print(feather_path, \"saved succesfully !\")"]},{"cell_type":"markdown","metadata":{"id":"8engqhKuuUvt"},"source":["#### just add col to loaded df"]},{"cell_type":"code","execution_count":46,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":654},"executionInfo":{"status":"ok","timestamp":1650589047328,"user_tz":-540,"elapsed":4360,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"67e1859b-d907-4984-f8d7-0d39b9de4277","id":"dg96nyOTuUvy"},"outputs":[{"output_type":"stream","name":"stdout","text":["3T ->                          open     high      low    close\n","index                                                  \n","2022-02-17 10:27:00  3148.85  3150.08  3146.38  3146.76\n","5T ->                          open     high      low    close\n","index                                                  \n","2022-02-17 10:25:00  3146.85  3150.08  3145.44  3146.76\n","15T ->                          open    high      low    close\n","index                                                 \n","2022-02-17 10:15:00  3143.99  3151.0  3139.14  3146.76\n","30T ->                         open     high      low    close\n","index                                                 \n","2022-02-17 10:00:00  3148.8  3158.68  3139.14  3146.76\n","H ->                         open     high      low    close\n","index                                                 \n","2022-02-17 10:00:00  3148.8  3158.68  3139.14  3146.76\n","4H ->                         open     high     low    close\n","index                                                \n","2022-02-17 09:00:00  3121.8  3158.68  3120.0  3146.76\n","D ->                         open     high     low    close\n","index                                                \n","2022-02-17 09:00:00  3121.8  3158.68  3120.0  3146.76\n","Index(['dc_upper_3T20', 'dc_lower_3T20', 'dc_base_3T20'], dtype='object')\n","Index(['dc_upper_H20', 'dc_lower_H20', 'dc_base_H20'], dtype='object')\n","dc phase done\n"]},{"output_type":"execute_result","data":{"text/plain":["                         dc_base_15T4  dc_upper_T20  dc_lower_T20  dc_base_T20  dc_upper_3T20  dc_lower_3T20  dc_base_3T20  dc_upper_H20  dc_lower_H20  dc_base_H20\n","index                                                                                                                                                              \n","2022-02-17 10:25:59.999        3140.1       3158.68       3139.14      3148.91        3158.68        3129.66      3144.170       3186.79       3040.42     3113.605\n","2022-02-17 10:26:59.999        3140.1       3158.68       3139.14      3148.91        3158.68        3129.66      3144.170       3186.79       3040.42     3113.605\n","2022-02-17 10:27:59.999        3140.1       3158.68       3139.14      3148.91        3158.68        3131.05      3144.865       3186.79       3040.42     3113.605\n","2022-02-17 10:28:59.999        3140.1       3158.68       3139.14      3148.91        3158.68        3131.05      3144.865       3186.79       3040.42     3113.605\n","2022-02-17 10:29:59.999        3140.1       3158.68       3139.14      3148.91        3158.68        3131.05      3144.865       3186.79       3040.42     3113.605"],"text/html":["\n","  <div id=\"df-e5957183-99ec-4056-881a-52620b356263\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>dc_base_15T4</th>\n","      <th>dc_upper_T20</th>\n","      <th>dc_lower_T20</th>\n","      <th>dc_base_T20</th>\n","      <th>dc_upper_3T20</th>\n","      <th>dc_lower_3T20</th>\n","      <th>dc_base_3T20</th>\n","      <th>dc_upper_H20</th>\n","      <th>dc_lower_H20</th>\n","      <th>dc_base_H20</th>\n","    </tr>\n","    <tr>\n","      <th>index</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2022-02-17 10:25:59.999</th>\n","      <td>3140.1</td>\n","      <td>3158.68</td>\n","      <td>3139.14</td>\n","      <td>3148.91</td>\n","      <td>3158.68</td>\n","      <td>3129.66</td>\n","      <td>3144.170</td>\n","      <td>3186.79</td>\n","      <td>3040.42</td>\n","      <td>3113.605</td>\n","    </tr>\n","    <tr>\n","      <th>2022-02-17 10:26:59.999</th>\n","      <td>3140.1</td>\n","      <td>3158.68</td>\n","      <td>3139.14</td>\n","      <td>3148.91</td>\n","      <td>3158.68</td>\n","      <td>3129.66</td>\n","      <td>3144.170</td>\n","      <td>3186.79</td>\n","      <td>3040.42</td>\n","      <td>3113.605</td>\n","    </tr>\n","    <tr>\n","      <th>2022-02-17 10:27:59.999</th>\n","      <td>3140.1</td>\n","      <td>3158.68</td>\n","      <td>3139.14</td>\n","      <td>3148.91</td>\n","      <td>3158.68</td>\n","      <td>3131.05</td>\n","      <td>3144.865</td>\n","      <td>3186.79</td>\n","      <td>3040.42</td>\n","      <td>3113.605</td>\n","    </tr>\n","    <tr>\n","      <th>2022-02-17 10:28:59.999</th>\n","      <td>3140.1</td>\n","      <td>3158.68</td>\n","      <td>3139.14</td>\n","      <td>3148.91</td>\n","      <td>3158.68</td>\n","      <td>3131.05</td>\n","      <td>3144.865</td>\n","      <td>3186.79</td>\n","      <td>3040.42</td>\n","      <td>3113.605</td>\n","    </tr>\n","    <tr>\n","      <th>2022-02-17 10:29:59.999</th>\n","      <td>3140.1</td>\n","      <td>3158.68</td>\n","      <td>3139.14</td>\n","      <td>3148.91</td>\n","      <td>3158.68</td>\n","      <td>3131.05</td>\n","      <td>3144.865</td>\n","      <td>3186.79</td>\n","      <td>3040.42</td>\n","      <td>3113.605</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e5957183-99ec-4056-881a-52620b356263')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-e5957183-99ec-4056-881a-52620b356263 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-e5957183-99ec-4056-881a-52620b356263');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":46}],"source":["res_df_ = sync_check_make(res_df_)  # suffix duplication 유의\n","res_df_.tail().iloc[:, -10:]\n","# res_df_.dtypes"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jHufHJVEuUvy"},"outputs":[],"source":["test_df_ = sync_check_make(res_df_.iloc[-4000:])  # suffix duplication 유의\n","test_df_.tail().iloc[:, -10:]"]},{"cell_type":"code","source":["# ------ validation ------ #\n","# res_df_.cppr_15T.describe()\n","print((res_df_.open_15T.to_numpy() - res_df_.close_15T.to_numpy())[-10:])\n","print((res_df_.dc_upper_15T4.to_numpy() - res_df_.dc_lower_15T4.to_numpy())[-10:])"],"metadata":{"id":"gOQxwYqK0jCS"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hKxMeErauUvz"},"outputs":[],"source":["# ------------ save current res_df ------------ #\n","ftr_full_path = os.path.join(ftr_path, key)\n","res_df_.reset_index().to_feather(ftr_full_path, compression='lz4')  # key 잘 확인하고 저장\n","print(ftr_full_path, 'saved !')"]},{"cell_type":"markdown","metadata":{"id":"E0n53hflJbnp"},"source":["### htf candle check"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":489,"status":"ok","timestamp":1642148504926,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"6xW0yugCWvGz","outputId":"58106ff9-9709-4a62-bca2-1f6795d13322"},"outputs":[{"name":"stdout","output_type":"stream","text":["itv_ : 3T\n","                        open     high      low    close\n","index                                                  \n","2022-01-10 15:06:00  3169.97  3170.22  3159.51  3161.22\n","2022-01-10 15:09:00  3161.22  3163.98  3161.22  3163.82\n","2022-01-10 15:12:00  3163.82  3163.83  3156.02  3160.49\n","2022-01-10 15:15:00  3160.51  3164.29  3159.01  3162.93\n","2022-01-10 15:18:00  3163.02  3164.29  3162.41  3164.28\n","                            open     high      low    close    volume\n","index                                                                \n","2022-01-10 15:08:59.999  3169.97  3170.22  3159.51  3161.22  4241.449\n","2022-01-10 15:11:59.999  3161.22  3163.98  3161.22  3163.82  1143.874\n","2022-01-10 15:14:59.999  3163.82  3163.83  3156.02  3160.49  2135.292\n","2022-01-10 15:17:59.999  3160.51  3164.29  3159.01  3162.93  1011.598\n","2022-01-10 15:20:59.999  3163.02  3164.29  3162.41  3163.82   466.868\n"]}],"source":["itv_list = ['3T', '5T', '15T', '30T', '1H', '4H']\n","comp_df_list = [second_df, third_df, fourth_df, fifth_df, sixth_df, seventh_df]\n","offset_list = ['1h', '2min', '2min', '2min', '2min', '2min']\n","# itv_list = ['4H']\n","# comp_df_list = [seventh_df]\n","\n","slice_len = 100\n","for itv_, comp_df_, offset in zip(itv_list, comp_df_list, offset_list):\n","\n","  print(\"itv_ :\", itv_)\n","\n","  # df = h_candle_v2(df, '3T')\n","  # end_ts = \n","  h_res_df = df.resample(itv_, offset=offset).agg({\n","          'open': 'first',\n","          'high': 'max',\n","          'low': 'min',\n","          'close': 'last'\n","      })\n","\n","  #   앞은 길이가 다르고, 뒤에서부터 잘라서 비교    #\n","  #   last_row 빼고는 동일, 4h 제외\n","  # print(df.tail())\n","  print(h_res_df.tail())\n","  print(comp_df_.tail())\n","  # # print(h_res_df.head())\n","  # # print(second_df.head())\n","\n","  # print(len(h_res_df))\n","  # print(len(second_df))\n","\n","  # print(h_res_df.values[-slice_len:])\n","  # print(second_df.iloc[:, :4].values[-slice_len:])\n","  # print(np.argwhere(h_res_df.values[-slice_len:] != comp_df_.iloc[:, :4].values[-slice_len:]))\n","  # print()\n","  break"]},{"cell_type":"markdown","metadata":{"id":"jTN3M842Suzl"},"source":["## concat & save new res_df"]},{"cell_type":"markdown","metadata":{"id":"MlFkpO1MSuzl"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"U-3QkfbFSuzl"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","dict_name = \"2021-07-01 ETHUSDT_bb15m_backi2_res_dfs.pkl\"\n","\n","#     load with pickle    #\n","with open(save_path + dict_name, 'rb') as f:\n","  saved_res_df_dict = pickle.load(f)\n","\n","print(dict_name, \"loaded !\")\n","res_df_files = os.listdir(save_path)\n","res_df_files.reverse()\n","\n","print(res_df_files)\n","\n","res_df_dict = {}\n","\n","base_postfix = '_bb15m_backi2.xlsx'\n","new_postfix = '_st1h_backi2.xlsx'\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for k_i, key in enumerate(res_df_files):\n","\n","  if '2021-07-01'.upper() not in key:\n","  # if '2021-10-10'.upper() not in key:\n","    continue\n","\n","  # if \"link\".upper() not in key:\n","  # if \"btc\".upper() not in key:\n","  #   continue\n","\n","  if new_postfix not in key:\n","    continue\n","\n","  # if key in \n","\n","  if sample_cnt == max_cnt:\n","    dict_name = \"%s_res_dfs.pkl\" % key.split(\".\")[0]\n","    print(\"dict_name :\", dict_name)\n","\n","  base_df = saved_res_df_dict[key.replace(new_postfix, base_postfix)]\n","  # base_df = pd.read_excel(save_path + key.replace(new_postfix, base_postfix), index_col=0)  \n","  res_df = pd.read_excel(save_path + key, index_col=0)  \n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  droped_new_res_df.head()\n","  # break\n","\n","  # res_df_dict[key] = res_df\n","  res_df_dict[key] = droped_new_res_df\n","  print(key, \"saved to dict !\")\n","\n","  #     save with pickle    #\n","  with open(save_path + dict_name, 'wb') as f:\n","    pickle.dump(res_df_dict, f)\n","\n","  sample_cnt -= 1\n","\n","  if sample_cnt <= 0:\n","    break\n"]},{"cell_type":"markdown","metadata":{"id":"t1E_eAyPSuzm"},"source":["### new col to latest feather (1m_indi. only)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xyI5NrM7Suzm"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","cum_dir = \"cum\"\n","\n","new_dir_path = \"rsi_backi2\"\n","base_dir_path = \"bbdc3m_backi2\"\n","\n","new_date = '2021-11-17'\n","\n","\n","\n","#     load ftr list    #\n","base_save_path = os.path.join(save_path, base_dir_path, \"concat/cum\", new_date)\n","new_save_path = base_save_path.replace(base_dir_path, new_dir_path)\n","\n","#     save to (new) cum dir    #\n","#      1. if dir. not exists, makedir\n","os.makedirs(new_save_path, exist_ok=True)\n","\n","ftr_list = [s for s in os.listdir(base_save_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_save_path, key), columns=None, use_threads=True).set_index(\"index\")\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  droped_new_res_df = sync_check(base_df)\n","\n","  # new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # # new_res_df.head()\n","\n","  # intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  # droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break\n","\n","  droped_new_res_df.reset_index().to_feather(os.path.join(new_save_path, key), compression='lz4')\n","\n","  print(os.path.join(new_save_path, key), \"saved !\")\n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"markdown","metadata":{"id":"nUs4fjVHSuzl"},"source":["### feather ver. (col concat)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2001,"status":"ok","timestamp":1642739652513,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"6cu-Y82iSuzl","outputId":"273507b8-0d33-48b5-d9c5-00547688ef73"},"outputs":[{"name":"stdout","output_type":"stream","text":["['2022-01-10 ETHUSDT.ftr']\n","./candlestick_concated/res_df/st3m_backi2/concat/cum/2022-01-10/2022-01-10 ETHUSDT.ftr saved !\n"]}],"source":["new_dir_path = \"st3m_backi2\"\n","base_dir_path = \"bb1d_backi2\"\n","\n","# new_date = \"2021-11-17\"\n","new_date = \"2022-01-10\"\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","save_path = './candlestick_concated/res_df/'\n","save_path = os.path.join(save_path, new_dir_path, \"concat/cum\", new_date)   \n","# save_path = os.path.join(save_path, new_dir_path, \"concat/non_cum\", new_date)   # row col 하려면 concat 맞음, noncum 사용\n","os.makedirs(save_path, exist_ok=True)\n","\n","\n","#     load ftr list    #\n","# ftr_list = [s for s in os.listdir(os.path.join(save_path, new_dir_path)) if \"ftr\" in s]\n","\n","noncat_path = save_path.replace(\"concat/\", \"noncat/\")\n","ftr_list = [s for s in os.listdir(noncat_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","  try:\n","\n","    #       read from base postfix's directory    #\n","    base_df = pd.read_feather(os.path.join(save_path.replace(new_dir_path, base_dir_path), key), columns=None, use_threads=True).set_index(\"index\")\n","    res_df = pd.read_feather(os.path.join(noncat_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","    # print(base_df.head())\n","    # print(res_df.head())\n","    # break\n","\n","    new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","    # new_res_df.head()\n","\n","    droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","    # droped_new_res_df.head()\n","    # break\n","\n","    droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","    # res_df_dict[key] = res_df\n","    # res_df_dict[key] = droped_new_res_df\n","    print(os.path.join(save_path, key), \"saved !\")\n","  \n","  except Exception as e:\n","    print(\"error occured ! :\", e)\n","  \n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"markdown","metadata":{"id":"WVAKq3i8Suzm"},"source":["### feather ver. (row concat) , database cum 도 호환가능"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7893,"status":"ok","timestamp":1645188189702,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"XG2p9OhhSuzm","outputId":"e67874ba-0710-4f38-966f-5ea7d42403cb"},"outputs":[{"name":"stdout","output_type":"stream","text":["['2022-02-17 ETHUSDT_1m.ftr']\n","                            open     high     low    close  volume\n","index                                                             \n","2019-11-27 16:45:59.999   146.00   146.00   146.0   146.00   0.010\n","2022-02-17 10:29:59.999  3146.86  3147.22  3146.4  3146.76  26.727\n","continuity checked !\n","./candlestick_concated/database_bn/cum/2022-02-17/2022-02-17 ETHUSDT_1m.ftr saved !\n"]}],"source":["save_path = './candlestick_concated/res_df/'        # cols 추가된 cum db 에 new_row's cols 기준으로 합치는 경우\n","save_path = './candlestick_concated/database_bn/'   # ohlcv cum db 만들 경우\n","\n","base_date = '2022-01-10'\n","new_date = '2022-02-17'\n","\n","#     load ftr list    #\n","if \"database\" in save_path:\n","  base_dir_path = \"\"\n","  new_dir_path = \"\"\n","  concat_dir = \"\"\n","else:\n","  base_dir_path = \"sar_backi2\"\n","  new_dir_path = \"bb4h_backi2\"  # dir_path 가 base / new 서로 달라질 수 있어서 분할함\n","  concat_dir = \"concat\"\n","\n","base_date_path = os.path.join(save_path, base_dir_path, concat_dir, \"cum\", base_date)      # 기존 cum db 와 new_date db 를 cum 진행\n","# base_date_path = os.path.join(save_path, base_dir_path, concat_dir, \"non_cum\", base_date)    # non_cum db 와 new_date db 를 cum 진행\n","\n","# new_date_path = os.path.join(save_path, new_dir_path, concat_dir, \"cum\", new_date)      # 상황별로 직접 선택해야할 듯\n","new_date_path = os.path.join(save_path, new_dir_path, concat_dir, \"non_cum\", new_date)\n","\n","\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","save_path = new_date_path.replace(\"non_cum\", \"cum\")   # non_cum 아니여도 무관\n","os.makedirs(save_path, exist_ok=True)   # noncat / concat 두가지 경우 존재가능할 것\n","# os.makedirs(os.path.join(save_path, dir_path, \"noncat/cum\", new_date), exist_ok=True)\n","\n","\n","ftr_list = [s for s in os.listdir(new_date_path) if \"ftr\" in s]\n","exist_list = os.listdir(save_path)\n","print(ftr_list)\n","# break\n","\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:   # date rejection\n","    continue\n","  if '1m' not in key:  # itv rejection\n","    continue\n","\n","  # if key in exist_list:\n","  #   print(key, \"already exist !\")\n","  #   continue\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_date_path, key.replace(new_date, base_date)), columns=None, use_threads=True).set_index(\"index\")   # key 에 new_date 담겨있음\n","  res_df = pd.read_feather(os.path.join(new_date_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break  \n","  \n","  print(droped_new_res_df.iloc[[0, -1]])  \n","\n","  # ------------- verify df continuity directly itv by itv ------------- #\n","  true_continue = True\n","  if \"_\" in key:\n","\n","    interval = key.split(\".\")[0].split(\"_\")[-1] \n","    itv_num = to_itvnum(interval)\n","\n","    # verified_df = consecutive_df(droped_new_res_df, to_itvnum(interval))\n","    # verified_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","    # res_df_dict[key] = res_df\n","    # res_df_dict[key] = droped_new_res_df  \n","\n","    np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","    ideal_ts_gap = 60 * itv_num\n","\n","    for ts_i in range(len(np_idx_ts)):\n","      \n","      if ts_i != 0:\n","        ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","\n","        if ts_gap > ideal_ts_gap or ts_gap < ideal_ts_gap:\n","        # if ts_gap == ideal_ts_gap:\n","          print(droped_new_res_df.index[ts_i - 1])\n","          print(droped_new_res_df.index[ts_i])\n","          # print(ts_gap)\n","          print(\"------------------ unideal ts_gap ------------------\")\n","          true_continue = False\n","\n","    print(\"continuity checked !\")\n","\n","  if true_continue:\n","    droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","  print(os.path.join(save_path, key), \"saved !\")\n","  \n"]},{"cell_type":"markdown","metadata":{"id":"L7l5CTJfSuzn"},"source":["### check continuity"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"w-5jn9opBl73"},"outputs":[],"source":["droped_new_res_df = res_df_"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4621,"status":"ok","timestamp":1649653761880,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"nGzMGyC3Suzn","outputId":"5007eef3-8a2f-4085-bf3d-f2b415395bc4"},"outputs":[{"name":"stdout","output_type":"stream","text":["                            open     high     low    close  volume  dc_upper_5T  dc_lower_5T  dc_base_5T  dc_upper_15T  dc_lower_15T  dc_base_15T  bb_upper_5T  bb_lower_5T  bb_upper_15T  bb_lower_15T\n","index                                                                                                                                                                                                  \n","2019-11-27 16:45:59.999   146.00   146.00   146.0   146.00   0.010          NaN          NaN         NaN           NaN           NaN          NaN          NaN          NaN           NaN           NaN\n","2022-02-17 10:29:59.999  3146.86  3147.22  3146.4  3146.76  26.727      3158.68      3131.05    3144.865       3174.54       3114.98      3144.76  3147.061024  3127.711976   3153.606702   3132.698298\n","[1.57487316e+09 1.57487322e+09 1.57487328e+09 1.57487334e+09 1.57487340e+09 1.57487346e+09 1.57487352e+09 1.57487358e+09 1.57487364e+09 1.57487370e+09]\n"]}],"source":["# print(droped_new_res_df.columns)\n","\n","print(droped_new_res_df.iloc[[0, -1]])\n","\n","np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","\n","print(np_idx_ts[:10])\n","for ts_i in range(len(np_idx_ts)):\n","  \n","  if ts_i != 0:\n","    ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","\n","    if ts_gap > 60 or ts_gap < 60:\n","\n","      print(\"invalid ts_gap found !\")\n","    # if ts_gap == 60:\n","      print(droped_new_res_df.index[ts_i - 1])\n","      print(droped_new_res_df.index[ts_i])\n","      # print(ts_gap)\n","      print()\n"]},{"cell_type":"markdown","metadata":{"id":"x_XGJqBi8Jex"},"source":["### check length of front missing value + middle_data non_missing validity"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":311,"status":"ok","timestamp":1641887318959,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"yRNwqVeAu8X8","outputId":"fb236bde-4527-4bc7-eac4-4bee42532c5a"},"outputs":[{"name":"stdout","output_type":"stream","text":["2.167361111111111\n","38\n"]}],"source":["#       1. new_date 의 시작 timeidx 와 base_date end timeidx 의 최소 days' gap     #\n","#       2. new_date 의 시작 부분 indi. value 는 np.nan 으로 채워질 거기 때문에 계산해야함    #\n","\n","df_count = droped_new_res_df.count()\n","len_missing = df_count.max() - df_count.min()\n","print(len_missing / 1440)\n","\n","#       3. \n","missing_sliced_df = droped_new_res_df.iloc[len_missing:]\n","df_count2 = missing_sliced_df.count()\n","# print(df_count2)\n","print((df_count2.max() - df_count2.min()))    # this value should be zero !\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"AY7E2_hTBsyM"},"outputs":[],"source":["# df_count2.index[df_count2.argmin()]\n","# missing_sliced_df.head(5)\n","\n","stay_missed = np.sum(pd.isnull(missing_sliced_df), axis=0)\n","print(stay_missed)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"p9yqewOw9g33"},"outputs":[],"source":["stay_missed_cols = stay_missed[stay_missed != 0].index\n","\n","for sm_col in stay_missed_cols:\n","  \n","  row_idx = np.argwhere(pd.isnull(missing_sliced_df[sm_col].values))\n","\n","  plt.figure(figsize=(3,3))\n","  plt.plot(row_idx)\n","  plt.ylim(0, len(missing_sliced_df))\n","  plt.title(sm_col)\n","\n","  plt.show()\n"]},{"cell_type":"markdown","metadata":{"id":"MSUY4nnku3s9"},"source":["## legacy"]},{"cell_type":"markdown","metadata":{"id":"epgS5Dksu-HX"},"source":["### mv files"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"aJcVpEdrslA5"},"outputs":[],"source":["df_path = './candlestick_concated/survey_df_v2'\n","files_ = os.listdir(df_path)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cEKyEYkotFDy"},"outputs":[],"source":["dirs = [file_ for file_ in files_ if not file_.endswith('.ftr')]\n","files = [file_ for file_ in files_ if file_.endswith('.ftr')]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4,"status":"ok","timestamp":1644111921194,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"IgM79tcxtPVZ","outputId":"84305b35-eb52-49fc-d5fd-fdbc64cc8679"},"outputs":[{"data":{"text/plain":["['2022-01-10 ETHUSDT', '2022-01-10 ETHUSDT_all', '2022-02-04 SOLUSDT']"]},"execution_count":6,"metadata":{},"output_type":"execute_result"}],"source":["dirs"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"M767iRtwtRQP"},"outputs":[],"source":["def move_fn(dir_, file_):\n","  src_path = os.path.join(df_path, file_)\n","  dst_path = os.path.join(df_path, dir_, file_)\n","  shutil.move(src_path, dst_path)\n","  print(\"moved to {}\".format(dst_path))\n","\n","_ = [move_fn('2022-01-10 ETHUSDT_all', file_) for file_ in files if 'eth'.upper() in file_]\n","# sols\n"]},{"cell_type":"markdown","metadata":{"id":"Ci_jUnNTZbm9"},"source":["### load data (old)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":22503,"status":"ok","timestamp":1638246127510,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"_bXyS2yrZYC6","outputId":"b24a8a66-48b1-42b5-aa79-63f5a8542bac"},"outputs":[{"name":"stdout","output_type":"stream","text":["['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr']\n","['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 LTCUSDT.ftr']\n","['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 ETHUSDT.ftr']\n","['2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr']\n","['2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-08-31 SUSHIUSDT.xlsx', '2021-08-31 CVCUSDT.xlsx', '2021-08-31 BTSUSDT.xlsx', '2021-08-31 HOTUSDT.xlsx', '2021-08-31 ZRXUSDT.xlsx', '2021-08-31 QTUMUSDT.xlsx', '2021-08-31 IOTAUSDT.xlsx', '2021-08-31 BTCBUSD.xlsx', '2021-08-31 WAVESUSDT.xlsx', '2021-08-31 ADAUSDT.xlsx', '2021-08-31 LITUSDT.xlsx', '2021-08-31 XTZUSDT.xlsx', '2021-08-31 BNBUSDT.xlsx', '2021-08-31 AKROUSDT.xlsx', '2021-08-31 HNTUSDT.xlsx', '2021-08-31 ETCUSDT.xlsx', '2021-08-31 XMRUSDT.xlsx', '2021-08-31 YFIUSDT.xlsx', '2021-08-31 ETHUSDT.xlsx', '2021-08-31 ALICEUSDT.xlsx', '2021-08-31 ALPHAUSDT.xlsx', '2021-08-31 SFPUSDT.xlsx', '2021-08-31 REEFUSDT.xlsx', '2021-08-31 BATUSDT.xlsx', '2021-08-31 DOGEUSDT.xlsx', '2021-08-31 TRXUSDT.xlsx', '2021-08-31 RLCUSDT.xlsx', '2021-08-31 BTCSTUSDT.xlsx', '2021-08-31 STORJUSDT.xlsx', '2021-08-31 SNXUSDT.xlsx', '2021-08-31 XLMUSDT.xlsx', '2021-08-31 NEOUSDT.xlsx', '2021-08-31 UNFIUSDT.xlsx', '2021-08-31 SANDUSDT.xlsx', '2021-08-31 DASHUSDT.xlsx', '2021-08-31 KAVAUSDT.xlsx', '2021-08-31 RUNEUSDT.xlsx', '2021-08-31 CTKUSDT.xlsx', '2021-08-31 LINKUSDT.xlsx', '2021-08-31 CELRUSDT.xlsx', '2021-08-31 RSRUSDT.xlsx', '2021-08-31 DGBUSDT.xlsx', '2021-08-31 SKLUSDT.xlsx', '2021-08-31 RENUSDT.xlsx', '2021-08-31 TOMOUSDT.xlsx', '2021-08-31 MTLUSDT.xlsx', '2021-08-31 LTCUSDT.xlsx', '2021-08-31 DODOUSDT.xlsx', '2021-08-31 EGLDUSDT.xlsx', '2021-08-31 KSMUSDT.xlsx', '2021-08-31 ONTUSDT.xlsx', '2021-08-31 VETUSDT.xlsx', '2021-08-31 TRBUSDT.xlsx', '2021-08-31 MANAUSDT.xlsx', '2021-08-31 COTIUSDT.xlsx', '2021-08-31 CHRUSDT.xlsx', '2021-08-31 ETHUSDT_210924.xlsx', '2021-08-31 BAKEUSDT.xlsx', '2021-08-31 GRTUSDT.xlsx', '2021-08-31 FLMUSDT.xlsx', '2021-08-31 EOSUSDT.xlsx', '2021-08-31 OGNUSDT.xlsx', '2021-08-31 SCUSDT.xlsx', '2021-08-31 BALUSDT.xlsx', '2021-08-31 STMXUSDT.xlsx', '2021-08-31 BTTUSDT.xlsx', '2021-08-31 LUNAUSDT.xlsx', '2021-08-31 DENTUSDT.xlsx', '2021-08-31 KNCUSDT.xlsx', '2021-08-31 SRMUSDT.xlsx', '2021-08-31 ENJUSDT.xlsx', '2021-08-31 ZENUSDT.xlsx', '2021-08-31 ATOMUSDT.xlsx', '2021-08-31 NEARUSDT.xlsx', '2021-08-31 BCHUSDT.xlsx', '2021-08-31 IOSTUSDT.xlsx', '2021-08-31 HBARUSDT.xlsx', '2021-08-31 ZECUSDT.xlsx', '2021-08-31 1000SHIBUSDT.xlsx', '2021-08-31 TLMUSDT.xlsx', '2021-08-31 BZRXUSDT.xlsx', '2021-08-31 ETHBUSD.xlsx', '2021-08-31 AAVEUSDT.xlsx', '2021-08-31 GTCUSDT.xlsx', '2021-08-31 ALGOUSDT.xlsx', '2021-08-31 ICPUSDT.xlsx', '2021-08-31 BTCUSDT_210924.xlsx', '2021-08-31 LRCUSDT.xlsx', '2021-08-31 AVAXUSDT.xlsx', '2021-08-31 MATICUSDT.xlsx', '2021-08-31 1INCHUSDT.xlsx', '2021-08-31 MKRUSDT.xlsx', '2021-08-31 THETAUSDT.xlsx', '2021-08-31 UNIUSDT.xlsx', '2021-08-31 LINAUSDT.xlsx', '2021-08-31 RVNUSDT.xlsx', '2021-08-31 FILUSDT.xlsx', '2021-08-31 NKNUSDT.xlsx', '2021-08-31 DEFIUSDT.xlsx', '2021-08-31 COMPUSDT.xlsx', '2021-08-31 BTCDOMUSDT.xlsx', '2021-08-31 SOLUSDT.xlsx', '2021-08-31 BTCUSDT.xlsx', '2021-08-31 OMGUSDT.xlsx', '2021-08-31 ICXUSDT.xlsx', '2021-08-31 BLZUSDT.xlsx', '2021-08-31 FTMUSDT.xlsx', '2021-08-31 YFIIUSDT.xlsx', '2021-08-31 KEEPUSDT.xlsx', '2021-08-31 BANDUSDT.xlsx', '2021-08-31 XRPUSDT.xlsx', '2021-08-31 SXPUSDT.xlsx', '2021-08-31 CRVUSDT.xlsx', '2021-08-31 BELUSDT.xlsx', '2021-08-31 DOTUSDT.xlsx', '2021-08-31 XEMUSDT.xlsx', '2021-08-31 ONEUSDT.xlsx', '2021-08-31 ZILUSDT.xlsx', '2021-08-31 AXSUSDT.xlsx', '2021-08-31 OCEANUSDT.xlsx', '2021-08-31 CHZUSDT.xlsx', '2021-08-31 ANKRUSDT.xlsx', '2021-08-31 SUSHIUSDT_res_dfs.pkl', '2021-07-01 ADAUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr']\n","['2021-07-01 BTCUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr']\n","['2021-02-07 BTC.xlsx', '2021-02-07 ETH.xlsx', '2021-02-11 BCHUSDT.xlsx', '2021-02-11 XRPUSDT.xlsx', '2021-02-11 EOSUSDT.xlsx', '2021-02-11 LTCUSDT.xlsx', '2021-02-11 ETCUSDT.xlsx', '2021-02-11 LINKUSDT.xlsx', '2021-02-11 XLMUSDT.xlsx', '2021-02-11 ADAUSDT.xlsx', '2021-02-11 XMRUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr']\n","['2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx']\n"]}],"source":["interval = '1m'\n","date_path = './candlestick_concated/%s/quant_v2/' % interval\n","file_list = os.listdir(date_path)\n","print((file_list))\n","\n","interval2 = '3m'\n","date_path2 = './candlestick_concated/%s/quant_v2/' % interval2\n","file_list2 = os.listdir(date_path2)\n","print((file_list2))\n","\n","interval3 = '5m'\n","date_path3 = './candlestick_concated/%s/quant_v2/' % interval3\n","file_list3 = os.listdir(date_path3)\n","print((file_list3))\n","\n","interval4 = '15m'\n","date_path4 = './candlestick_concated/%s/quant_v2/' % interval4\n","file_list4 = os.listdir(date_path4)\n","print((file_list4))\n","\n","interval5 = '30m'\n","date_path5 = './candlestick_concated/%s/quant_v2/' % interval5\n","file_list5 = os.listdir(date_path5)\n","print((file_list5))\n","\n","interval6 = '1h'\n","date_path6 = './candlestick_concated/%s/quant_v2/' % interval6\n","file_list6 = os.listdir(date_path6)\n","print((file_list6))\n","\n","interval7 = '4h'\n","date_path7 = './candlestick_concated/%s/quant_v2/' % interval7\n","file_list7 = os.listdir(date_path7)\n","print((file_list7))\n","\n","interval8 = '1d'\n","date_path8 = './candlestick_concated/%s/quant_v2/' % interval8\n","file_list8 = os.listdir(date_path8)\n","print((file_list8))"]},{"cell_type":"markdown","metadata":{"id":"M8-EChy0VsDr"},"source":["### cudf"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":414,"status":"ok","timestamp":1638754008241,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"b09qAb1sVtRP","outputId":"3a824202-064a-4544-b791-ffc777bb3f9c"},"outputs":[{"name":"stdout","output_type":"stream","text":["usage: conda [-h] [-V] command ...\n","conda: error: unrecognized arguments: -t=/content/notebooks\n"]}],"source":["# !conda install -c rapidsai-nightly -c nvidia -c numba -c conda-forge \\\n","#     cudf python=3.7 cudatoolkit=11.1 -t=$nb_path"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":413,"status":"ok","timestamp":1638754715310,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"Jnz6i7ZqRnb0","outputId":"207bc57b-a17a-4f67-fb26-24e46e2c6e26"},"outputs":[{"name":"stdout","output_type":"stream","text":["***********************************************************************\n","Woo! Your instance has the right kind of GPU, a Tesla P100-PCIE-16GB!\n","***********************************************************************\n","\n"]}],"source":["# !git clone https://github.com/rapidsai/rapidsai-csp-utils.git\n","!python rapidsai-csp-utils/colab/env-check.py"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4sKA_9Dbg4s2"},"outputs":[],"source":["# This will update the Colab environment and restart the kernel.  Don't run the next cell until you see the session crash.\n","!bash rapidsai-csp-utils/colab/update_gcc.sh\n","import os\n","os._exit(00)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"d1C4pNiBhYHX"},"outputs":[],"source":["# This will install CondaColab.  This will restart your kernel one last time.  Run this cell by itself and only run the next cell once you see the session crash.\n","import condacolab\n","condacolab.install()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":414,"status":"ok","timestamp":1638754863073,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"iGx3ACTvZqck","outputId":"e8379cc4-c325-4fe0-ac46-5fbbd7d38829"},"outputs":[{"name":"stdout","output_type":"stream","text":["✨🍰✨ Everything looks OK!\n"]}],"source":["# you can now run the rest of the cells as normal\n","import condacolab\n","condacolab.check()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oR8s7U8c7C28","outputId":"22be2731-fae1-45fc-f310-e48f60774bb2"},"outputs":[{"name":"stdout","output_type":"stream","text":["Installing RAPIDS Stable 21.10\n","Starting the RAPIDS install on Colab.  This will take about 15 minutes.\n","Collecting package metadata (current_repodata.json): ...working... done\n","Solving environment: ...working... WARNING conda.core.solve:_add_specs(611): pinned spec cudatoolkit=11.1 conflicts with explicit specs.  Overriding pinned spec.\n","failed with initial frozen solve. Retrying with flexible solve.\n","Solving environment: ...working... WARNING conda.core.solve:_add_specs(611): pinned spec cudatoolkit=11.1 conflicts with explicit specs.  Overriding pinned spec.\n","failed with repodata from current_repodata.json, will retry with next repodata source.\n","Collecting package metadata (repodata.json): ...working... done\n"]}],"source":["# Installing RAPIDS is now 'python rapidsai-csp-utils/colab/install_rapids.py <release> <packages>'\n","# The <release> options are 'stable' and 'nightly'.  Leaving it blank or adding any other words will default to stable.\n","# The <packages> option are default blank or 'core'.  By default, we install RAPIDSAI and BlazingSQL.  The 'core' option will install only RAPIDSAI and not include BlazingSQL, \n","!python rapidsai-csp-utils/colab/install_rapids.py stable\n","import os\n","os.environ['NUMBAPRO_NVVM'] = '/usr/local/cuda/nvvm/lib64/libnvvm.so'\n","os.environ['NUMBAPRO_LIBDEVICE'] = '/usr/local/cuda/nvvm/libdevice/'\n","os.environ['CONDA_PREFIX'] = '/usr/local'"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kWsxi4ZpKtGt"},"outputs":[],"source":["import shutil\n","import sys\n","\n","colab_env = \"/usr/lib\"\n","\n","rapids_path = os.path.join(current_path, \"rapidsai-csp-utils/lib\")\n","rapids_libs = os.listdir(rapids_path)\n","print(rapids_libs)\n","# break\n","\n","for lib_ in rapids_libs:\n","  try:\n","    shutil.copy(os.path.join(rapids_path, lib_), os.path.join(colab_env, lib_))\n","    sys.path.append(os.path.join(colab_env, lib_))\n","    print(\"copied to\" + os.path.join(colab_env, lib_))\n","  except Exception as e:\n","    print(e)"]},{"cell_type":"markdown","metadata":{"id":"Iy76iO7gztne"},"source":["### move legacy files"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hMRht32Czwry"},"outputs":[],"source":["# print()\n","cur_dir_list = os.listdir('.')\n","for f in cur_dir_list:\n","  if 'legacy' in f :\n","    # print(f)\n","    if os.path.isdir(current_path + f,):\n","      continue\n","\n","    shutil.move(current_path + f, current_path + 'legacy/' + f)\n","    print(\"moved to\" + current_path + 'legacy/' +  f)"]},{"cell_type":"markdown","metadata":{"id":"5duWn8t4BRyv"},"source":["# IDE platform\n"]},{"cell_type":"markdown","metadata":{"id":"6HOjnZjSgzk1"},"source":["## load ftr_list"]},{"cell_type":"code","execution_count":36,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1747,"status":"ok","timestamp":1650588659032,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"7FPBG5Qqg2jB","outputId":"453c722f-2a69-400c-a79d-1be50ff8ab52"},"outputs":[{"output_type":"stream","name":"stdout","text":["['2022-02-17 ETHUSDT.ftr']\n","2022-02-17 ETHUSDT.ftr loaded !\n","load res_df_ elapsed time : 1.490886926651001\n"]}],"source":["save_path = './candlestick_concated/res_df/'\n","\n","dir_path = \"bb4h_backi2\"\n","dir_path = \"bb1d_backi2\"\n","date = \"2022-01-10\"\n","date = \"2022-02-17\"\n","\n","ftr_path = os.path.join(save_path, dir_path, \"concat/cum\", date)\n","\n","# ------ 1T_database ------ #\n","# date = \"2022-04-22\"\n","# ftr_path = os.path.join(save_path.replace(\"res_df\", \"database_bn\"), \"non_cum\", date)\n","# ftr_path = os.path.join(save_path.replace(\"res_df\", \"database_bn\"), \"cum\", date)\n","\n","# ------ load ftr list ------ #\n","ftr_list = [s for s in os.listdir(ftr_path) if \"ftr\" in s if date in s]\n","# ftr_list = [s for s in os.listdir(os.path.join(save_path, dir_path)) if \"ftr\" in s if date in s]\n","print(ftr_list)\n","\n","start_0 = time.time()\n","key = ftr_list[0]  # tempoaray use single key\n","res_df_ = pd.read_feather(os.path.join(ftr_path, key), columns=None, use_threads=True).set_index(\"index\")\n","# print(res_df_.head())\n","print(key, \"loaded !\")\n","print(\"load res_df_ elapsed time :\", time.time() - start_0)"]},{"cell_type":"code","execution_count":37,"metadata":{"id":"RQH_l4opEh_O","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650588659032,"user_tz":-540,"elapsed":6,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"666e647c-24c7-4345-f175-9405d3d8fd06"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["open                   float64\n","high                   float64\n","low                    float64\n","close                  float64\n","volume                 float64\n","open_15T               float64\n","high_15T               float64\n","low_15T                float64\n","close_15T              float64\n","open_H                 float64\n","high_H                 float64\n","low_H                  float64\n","close_H                float64\n","open_4H                float64\n","high_4H                float64\n","low_4H                 float64\n","close_4H               float64\n","range_15T              float64\n","rel_ratio_15T          float64\n","norm_max               float64\n","norm_min               float64\n","abs_ratio_15T          float64\n","rsi_T                  float64\n","rsi_5T                 float64\n","ema_5T                 float64\n","dc_upper_T             float64\n","dc_lower_T             float64\n","dc_upper_3T            float64\n","dc_lower_3T            float64\n","dc_base_3T             float64\n","dc_upper_5T            float64\n","dc_lower_5T            float64\n","dc_base_5T             float64\n","dc_upper_15T           float64\n","dc_lower_15T           float64\n","dc_base_15T            float64\n","dc_upper_30T           float64\n","dc_lower_30T           float64\n","dc_base_30T            float64\n","dc_upper_H             float64\n","dc_lower_H             float64\n","dc_base_H              float64\n","dc_upper_4H            float64\n","dc_lower_4H            float64\n","dc_base_4H             float64\n","dc_upper_D             float64\n","dc_lower_D             float64\n","dc_base_D              float64\n","bb_upper_T             float64\n","bb_lower_T             float64\n","bb_upper_3T            float64\n","bb_lower_3T            float64\n","bb_upper_5T            float64\n","bb_lower_5T            float64\n","bb_upper_15T           float64\n","bb_lower_15T           float64\n","bb_upper_30T           float64\n","bb_lower_30T           float64\n","bb_upper_H             float64\n","bb_lower_H             float64\n","bb_upper_4H            float64\n","bb_lower_4H            float64\n","bb_upper_D             float64\n","bb_lower_D             float64\n","haopen                 float64\n","hahigh                 float64\n","halow                  float64\n","haclose                float64\n","norm_close_15          float64\n","resi_T                 float64\n","sup_T                  float64\n","open_5T                float64\n","high_5T                float64\n","low_5T                 float64\n","close_5T               float64\n","dc_upper_5T20          float64\n","dc_lower_5T20          float64\n","dc_upper_5T40          float64\n","dc_lower_5T40          float64\n","dc_upper_H20           float64\n","dc_lower_H20           float64\n","dc_upper_H40           float64\n","dc_lower_H40           float64\n","rel_ratio_5T           float64\n","abs_ratio_5T           float64\n","dc_upper_T20           float64\n","dc_lower_T20           float64\n","dc_upper_T40           float64\n","dc_lower_T40           float64\n","body_rel_ratio_5T      float64\n","dc_upper_H5            float64\n","dc_lower_H5            float64\n","dc_base_H5             float64\n","wave_body_ratio        float64\n","dc_upper_body_ratio    float64\n","dc_lower_body_ratio    float64\n","bb_upper_T60           float64\n","bb_lower_T60           float64\n","bb_base_T60            float64\n","bb_upper_T20           float64\n","bb_lower_T20           float64\n","bb_base_T20            float64\n","cppr_15T               float64\n","dc_upper_15T4          float64\n","dc_lower_15T4          float64\n","dc_base_15T4           float64\n","dtype: object"]},"metadata":{},"execution_count":37}],"source":["res_df_.dtypes"]},{"cell_type":"markdown","metadata":{"id":"x2yj2SwAXDLp"},"source":["### edit cols"]},{"cell_type":"code","execution_count":45,"metadata":{"id":"x9wkWw15XCAm","executionInfo":{"status":"ok","timestamp":1650589036818,"user_tz":-540,"elapsed":338,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["col_list = list(res_df_.columns)\n","# # [col_ for col_ in col_list if 'score' in col_]\n","\n","# ------ drop ------ #\n","res_df_.drop([col_ for col_ in col_list if '_H20' in col_], inplace=True, axis=1)\n","# res_df_.drop([col_ for col_ in col_list if '_T40' in col_], inplace=True, axis=1)\n","# res_df_.drop([col_ for col_ in col_list if 'long_base' in col_], inplace=True, axis=1)\n","# res_df_.drop([col_ for col_ in col_list[5:]], inplace=True, axis=1)\n","\n","# ------ replace ------ #\n","# for c_i, col_ in enumerate(col_list):\n","#   # if 'eTa_5T' in col_:\n","#   # if col_[-1] in ['m', 'h', 'd', 'H'] and '_' in col_:eTa_5T\n","#   # if col_[0] in ['h'] and '_' in col_:\n","#   if 'bir_' in col_:\n","\n","#     col_list[c_i] = col_.replace('bir_', 'ir_')\n","#     # col_list[c_i] = col_.replace('m', 'T').replace('h', 'H').replace('1T', 'T')\n","#     # col_list[c_i] = col_.replace('1d', 'D')\n","#     # col_list[c_i] = col_.replace('eTa_5T', 'ema_5T')\n","#     # col_list[c_i] = col_list[c_i][1:]\n","#     # print(col_list[c_i][0])\n","# res_df_.columns = col_list\n","# col_list[-2:] = ['resi_T', 'sup_T']"]},{"cell_type":"markdown","metadata":{"id":"14chOHeXh6JD"},"source":["### lab"]},{"cell_type":"markdown","metadata":{"id":"O87s8_EUakqS"},"source":["#### instant indi."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OpkclLSzazZ-"},"outputs":[],"source":["def wave_body_ratio(res_df_, itv, period):\n","  dc_upper_ = res_df_['dc_upper_{}{}'.format(itv, period)].to_numpy()\n","  dc_lower_ = res_df_['dc_lower_{}{}'.format(itv, period)].to_numpy()\n","  close_ = res_df_['close_{}'.format(itv)].to_numpy()\n","  open_ = res_df_['open_{}'.format(itv)].to_numpy()\n","\n","  dc_range = dc_upper_ - dc_lower_\n","  body_range = abs(close_ - open_)\n","\n","  res_df_['wave_body_ratio'] = body_range / dc_range\n","  res_df_['dc_upper_body_ratio'] = (np.maximum(close_, open_) - dc_upper_) / body_range\n","  res_df_['dc_lower_body_ratio'] = (dc_lower_) - np.minimum(close_, open_) / body_range\n","\n","  return"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0-zzitQRbnz8"},"outputs":[],"source":["# res_df_['wave_body_ratio'].tail(200)\n","\n","itv = 'H'\n","period = 5\n","wave_body_ratio(res_df_, itv, period)"]},{"cell_type":"markdown","metadata":{"id":"LyGnAMvLYvOZ"},"source":["#### wave_range"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"PV-dlAVZfehP"},"outputs":[],"source":["\n","def get_line(touch_idx, rtc_):\n","  touch_idx_copy = touch_idx.copy()\n","  touch_line = np.full_like(rtc_, np.nan)\n","\n","  nan_idx = np.isnan(touch_idx_copy)\n","  touch_idx_copy[nan_idx] = 0   # for indexing array\n","  touch_line = rtc_[touch_idx_copy.astype(int)]\n","  touch_line[nan_idx] = np.nan   # for true comp.\n","\n","  return touch_line\n","\n","def wave_range_v7(df, period1, period2, ltf_df=None, touch_period=50):  # v2 for period1 only\n","\n","  itv = pd.infer_freq(df.index)\n","\n","  donchian_channel_v2(df, period1) \n","  donchian_channel_v2(df, period2) \n","  dc_lower_, dc_upper_ = df['dc_lower_{}{}'.format(itv, period1)].to_numpy(), df['dc_upper_{}{}'.format(itv, period1)].to_numpy()\n","  dc_lower2_, dc_upper2_ = df['dc_lower_{}{}'.format(itv, period2)].to_numpy(), df['dc_upper_{}{}'.format(itv, period2)].to_numpy()\n","  \n","  short_base = (dc_lower_ + dc_upper2_) / 2\n","  long_base = (dc_upper_ + dc_lower2_) / 2\n","  df['short_base_{}{}{}'.format(itv, period1, period2)] = short_base\n","  df['long_base_{}{}{}'.format(itv, period1, period2)] = long_base\n","\n","  len_df = len(df)   \n","  short_open_res = np.ones(len_df)\n","  long_open_res = np.ones(len_df)\n","  \n","  data_cols = ['open', 'high', 'low']\n","  open, high, low = [df[col_].to_numpy() for col_ in data_cols]\n","\n","  short_upper_touch_idx = pd.Series(np.where(high >= dc_upper2_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()  # min -> max\n","  short_lower_touch_idx = pd.Series(np.where(low <= dc_lower_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨    \n","  short_open_res *= (high >= short_base) & (short_base >= open) & (short_upper_touch_idx < short_lower_touch_idx)\n","  df['short_upper_touch_idx_{}{}{}'.format(itv, period1, period2)] = short_upper_touch_idx\n","  df['short_lower_touch_idx_{}{}{}'.format(itv, period1, period2)] = short_lower_touch_idx\n","  df['short_upper_touch_line_{}{}{}'.format(itv, period1, period2)] = get_line(short_upper_touch_idx, dc_upper2_)\n","  df['short_lower_touch_line_{}{}{}'.format(itv, period1, period2)] = get_line(short_lower_touch_idx, dc_lower_)\n","  df['short_wave_point_{}{}{}'.format(itv, period1, period2)] = short_open_res\n","  \n","  long_lower_touch_idx = pd.Series(np.where(low <= dc_lower2_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()       \n","  long_upper_touch_idx = pd.Series(np.where(high >= dc_upper_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()    \n","  long_open_res *= (open >= long_base) & (long_base >= low) & (long_lower_touch_idx < long_upper_touch_idx)\n","  df['long_lower_touch_idx_{}{}{}'.format(itv, period1, period2)] = long_lower_touch_idx\n","  df['long_upper_touch_idx_{}{}{}'.format(itv, period1, period2)] = long_upper_touch_idx\n","  df['long_lower_touch_line_{}{}{}'.format(itv, period1, period2)] = get_line(long_lower_touch_idx, dc_lower2_)\n","  df['long_upper_touch_line_{}{}{}'.format(itv, period1, period2)] = get_line(long_upper_touch_idx, dc_upper_)\n","  df['long_wave_point_{}{}{}'.format(itv, period1, period2)] = long_open_res\n","\n","  if itv != 'T':\n","    assert ltf_df is not None, \"assert ltf_df is not None\"\n","    join_cols = np.arange(-16, 0 ,1).astype(int)  # points & donchian_channels\n","    ltf_df.drop(df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","    try:\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, df, join_cols), how='inner')\n","    except Exception as e:\n","      print(\"error in wave_range()'s join() :\", e)\n","  else:\n","    ltf_df = df    \n","\n","  return ltf_df\n","  \n","def wave_range_v6(df, period1, period2, ltf_df=None, touch_period=50):  # v2 for period1 only\n","\n","  itv = pd.infer_freq(df.index)\n","\n","  donchian_channel_v2(df, period1) \n","  donchian_channel_v2(df, period2) \n","  dc_lower_, dc_upper_ = df['dc_lower_{}{}'.format(itv, period1)].to_numpy(), df['dc_upper_{}{}'.format(itv, period1)].to_numpy()\n","  dc_lower2_, dc_upper2_ = df['dc_lower_{}{}'.format(itv, period2)].to_numpy(), df['dc_upper_{}{}'.format(itv, period2)].to_numpy()\n","  \n","  short_base = (dc_lower_ + dc_upper2_) / 2\n","  long_base = (dc_upper_ + dc_lower2_) / 2\n","  df['short_base_{}{}{}'.format(itv, period1, period2)] = short_base\n","  df['long_base_{}{}{}'.format(itv, period1, period2)] = long_base\n","\n","  len_df = len(df)   \n","  short_open_res = np.ones(len_df)\n","  long_open_res = np.ones(len_df)\n","  \n","  data_cols = ['open', 'high', 'low']\n","  open, high, low = [df[col_].to_numpy() for col_ in data_cols]\n","\n","  short_a_touch_idx = pd.Series(np.where(high >= dc_upper2_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()  # min -> max\n","  short_b_touch_idx = pd.Series(np.where(low <= dc_lower_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨    \n","  short_open_res *= (high >= short_base) & (short_base >= open) & (short_a_touch_idx < short_b_touch_idx)\n","  df['short_a_touch_idx_{}{}{}'.format(itv, period1, period2)] = short_a_touch_idx\n","  df['short_b_touch_idx_{}{}{}'.format(itv, period1, period2)] = short_b_touch_idx\n","  df['short_a_line_{}{}{}'.format(itv, period1, period2)] = get_line(short_a_touch_idx, dc_upper2_)\n","  df['short_b_line_{}{}{}'.format(itv, period1, period2)] = get_line(short_b_touch_idx, dc_lower_)\n","  df['short_wave_point_{}{}{}'.format(itv, period1, period2)] = short_open_res\n","  \n","  long_a_touch_idx = pd.Series(np.where(low <= dc_lower2_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()       \n","  long_b_touch_idx = pd.Series(np.where(high >= dc_upper_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()    \n","  long_open_res *= (open >= long_base) & (long_base >= low) & (long_a_touch_idx < long_b_touch_idx)\n","  df['long_a_touch_idx_{}{}{}'.format(itv, period1, period2)] = long_a_touch_idx\n","  df['long_b_touch_idx_{}{}{}'.format(itv, period1, period2)] = long_b_touch_idx\n","  df['long_a_line_{}{}{}'.format(itv, period1, period2)] = get_line(long_a_touch_idx, dc_lower2_)\n","  df['long_b_line_{}{}{}'.format(itv, period1, period2)] = get_line(long_b_touch_idx, dc_upper_)\n","  df['long_wave_point_{}{}{}'.format(itv, period1, period2)] = long_open_res\n","\n","  if itv != 'T':\n","    assert ltf_df is not None, \"assert ltf_df is not None\"\n","    join_cols = np.arange(-16, 0 ,1).astype(int)  # points & donchian_channels\n","    ltf_df.drop(df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","    try:\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, df, join_cols), how='inner')\n","    except Exception as e:\n","      print(\"error in wave_range_v5's join() :\", e)\n","  else:\n","    ltf_df = df    \n","\n","  return ltf_df\n","\n","def wave_range_v5(df, period1, period2, ltf_df=None, touch_period=50):  # v2 for period1 only\n","\n","  itv = pd.infer_freq(df.index)\n","\n","  donchian_channel_v2(df, period1) \n","  donchian_channel_v2(df, period2) \n","  dc_lower_, dc_upper_ = df['dc_lower_{}{}'.format(itv, period1)].to_numpy(), df['dc_upper_{}{}'.format(itv, period1)].to_numpy()\n","  dc_lower2_, dc_upper2_ = df['dc_lower_{}{}'.format(itv, period2)].to_numpy(), df['dc_upper_{}{}'.format(itv, period2)].to_numpy()\n","  \n","  short_base = (dc_lower_ + dc_upper2_) / 2\n","  long_base = (dc_upper_ + dc_lower2_) / 2\n","  df['short_base_{}{}{}'.format(itv, period1, period2)] = short_base\n","  df['long_base_{}{}{}'.format(itv, period1, period2)] = long_base\n","\n","  len_df = len(df)   \n","  short_open_res = np.ones(len_df)\n","  long_open_res = np.ones(len_df)\n","  \n","  data_cols = ['open', 'high', 'low']\n","  open, high, low = [df[col_].to_numpy() for col_ in data_cols]\n","\n","  short_a_touch_idx = pd.Series(np.where(high >= dc_upper2_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()  # min -> max\n","  short_b_touch_idx = pd.Series(np.where(low <= dc_lower_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨    \n","  short_open_res *= (high >= short_base) & (short_base >= open) & (short_a_touch_idx < short_b_touch_idx)\n","  df['short_a_touch_idx_{}{}{}'.format(itv, period1, period2)] = short_a_touch_idx\n","  df['short_b_touch_idx_{}{}{}'.format(itv, period1, period2)] = short_b_touch_idx\n","  df['short_wave_point_{}{}{}'.format(itv, period1, period2)] = short_open_res\n","  \n","  long_a_touch_idx = pd.Series(np.where(low <= dc_lower2_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()       \n","  long_b_touch_idx = pd.Series(np.where(high >= dc_upper_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()    \n","  long_open_res *= (open >= long_base) & (long_base >= low) & (long_a_touch_idx < long_b_touch_idx)\n","  df['long_a_touch_idx_{}{}{}'.format(itv, period1, period2)] = long_a_touch_idx\n","  df['long_b_touch_idx_{}{}{}'.format(itv, period1, period2)] = long_b_touch_idx\n","  df['long_wave_point_{}{}{}'.format(itv, period1, period2)] = long_open_res\n","\n","  if itv != 'T':\n","    assert ltf_df is not None, \"assert ltf_df is not None\"\n","    join_cols = np.arange(-12, 0 ,1).astype(int)  # points & donchian_channels\n","    ltf_df.drop(df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","    try:\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, df, join_cols), how='inner')\n","      # ltf_df = ltf_df.merge(to_lower_tf_v2(ltf_df, df, [-7, -6, -5, -4, -3, -2, -1]), how='inner')\n","    except Exception as e:\n","      print(\"error in wave_range_v5's join() :\", e)\n","  else:\n","    ltf_df = df    \n","\n","  return ltf_df\n","\n","def wave_range_v4(df, period1, ltf_df=None, touch_lbperiod=50):  # v2 for period1 only\n","\n","  itv = pd.infer_freq(df.index)\n","\n","  donchian_channel_v2(df, period1) \n","  dc_lower_, dc_upper_ = df['dc_lower_{}{}'.format(itv, period1)].to_numpy(), df['dc_upper_{}{}'.format(itv, period1)].to_numpy()\n","\n","  df['wave_base_{}'.format(itv)] = (dc_lower_ + dc_upper_) / 2  # dc_base touch 사용하면 point 를 좀 더 일찍 잡을 수 있음  \n","  wave_base_ = df['wave_base_{}'.format(itv)].to_numpy()\n","  # short_base_ = df['short_base__{}'.format(itv)].to_numpy()\n","  # long_base_ = df['long_base__{}'.format(itv)].to_numpy()\n","\n","  len_df = len(df)   \n","  short_open_res = np.ones(len_df)\n","  long_open_res = np.ones(len_df)\n","  \n","  data_cols = ['open', 'high', 'low']\n","  open, high, low = [df[col_].to_numpy() for col_ in data_cols]\n","\n","  df['upper_touch_idx_{}{}'.format(itv, period1)] = pd.Series(np.where(high >= dc_upper_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()  # min -> max\n","  df['lower_touch_idx_{}{}'.format(itv, period1)] = pd.Series(np.where(low <= dc_lower_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨    \n","  \n","  upper_touch_idx_ = df['upper_touch_idx_{}{}'.format(itv, period1)].to_numpy()\n","  lower_touch_idx_ = df['lower_touch_idx_{}{}'.format(itv, period1)].to_numpy()\n","\n","  # df['wave_upper_{}'.format(itv)] = pd.Series(get_line(dc_upper_touch_idx, dc_upper_)).ffill().to_numpy() \n","  # df['wave_lower_{}'.format(itv)] = pd.Series(get_line(dc_lower_touch_idx, dc_lower_)).ffill().to_numpy() \n","\n","  short_open_res *= (high >= wave_base_) & (wave_base_ >= open) & (upper_touch_idx_ < lower_touch_idx_)\n","  df['short_wave_point_{}{}'.format(itv, period1)] = short_open_res\n","\n","  long_open_res *= (open >= wave_base_) & (wave_base_ >= low) & (lower_touch_idx_ < upper_touch_idx_)\n","  df['long_wave_point_{}{}'.format(itv, period1)] = long_open_res\n","\n","  if itv != 'T':\n","    assert ltf_df is not None, \"assert ltf_df is not None\"\n","\n","    join_cols = np.arange(-7, 0 ,1).astype(int)\n","    ltf_df.drop(df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","    try:\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, df, join_cols), how='inner')\n","      # ltf_df = ltf_df.merge(to_lower_tf_v2(ltf_df, df, [-7, -6, -5, -4, -3, -2, -1]), how='inner')\n","    except Exception as e:\n","      print(\"error in wave_range_v4's join() :\", e)\n","  else:\n","    ltf_df = df    \n","\n","  return ltf_df"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YqBXjVPzdccC"},"outputs":[],"source":["i = random.randint(0, len(res_df))\n","\n","plot_size = 200\n","t_df = res_df.iloc[i - plot_size:i]\n","a_data = t_df.to_numpy()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":537},"executionInfo":{"elapsed":1657,"status":"ok","timestamp":1649124296856,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"-Dr_tTk9csFm","outputId":"4c495e36-8ff0-4067-eed0-962c24ada307"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 1080x648 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(15, 9))\n","nrows, ncols = 1, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        # height_ratios=[3, 1]\n","                        )\n","\n","ax = fig.add_subplot(gs[0])\n","\n","# ------ candles ------ #\n","candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","# _ = [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","\n","itv, period1, period2 = 'T', 20, 20\n","t_df = wave_range_v5(t_df, 20, 20, ltf_df=None, touch_period=50)\n","\n","dc_upper_ = t_df['dc_upper_{}{}'.format(itv, period1)].to_numpy()\n","dc_lower_ = t_df['dc_lower_{}{}'.format(itv, period1)].to_numpy()\n","dc_upper2_ = t_df['dc_upper_{}{}'.format(itv, period2)].to_numpy()\n","dc_lower2_ = t_df['dc_lower_{}{}'.format(itv, period2)].to_numpy()\n","plt.step(np.arange(len(dc_upper_)), dc_upper_, alpha=1.0, color='yellow', linewidth=2)\n","plt.step(np.arange(len(dc_lower_)), dc_lower_, alpha=1.0, color='yellow', linewidth=2)\n","# plt.step(np.arange(len(t_df.dc_base_T40.to_numpy())), t_df.dc_base_T40.to_numpy(), alpha=1.0, color='white', linewidth=1)\n","\n","\n","short_open_plot_idx = t_df['short_wave_point_{}{}{}'.format(itv, period1, period2)].to_numpy().astype(bool)\n","long_open_plot_idx = t_df['long_wave_point_{}{}{}'.format(itv, period1, period2)].to_numpy().astype(bool)\n","short_base_ = t_df['short_base_{}{}{}'.format(itv, period1, period2)].to_numpy()\n","long_base_ = t_df['long_base_{}{}{}'.format(itv, period1, period2)].to_numpy()\n","plt.step(np.arange(len(short_base_))[short_open_plot_idx], short_base_[short_open_plot_idx], \"o\", alpha=1.0, color='#ff00ff', markersize=11)\n","plt.step(np.arange(len(long_base_))[long_open_plot_idx], long_base_[long_open_plot_idx], \"o\", alpha=1.0, color='#ff00ff', markersize=11)\n","\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7_FX0rIP_vyE"},"outputs":[],"source":["def sd_dc(df, period1, period2, ltf_df=None):\n","    assert period1 <= period2, \"assert period1 <= period2\"\n","    donchian_channel_v2(df, period1)\n","    donchian_channel_v2(df, period2)\n","    itv = pd.infer_freq(df.index)\n","    if itv != 'T':\n","      assert ltf_df is not None, \"assert ltf_df is not None\"\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, df, [-4, -3, -2, -1]), how='inner')\n","    else:\n","      ltf_df = df\n","\n","    ltf_df['short_base_{}'.format(itv)] = (ltf_df['dc_lower_{}{}'.format(itv, period1)].to_numpy() + ltf_df['dc_upper_{}{}'.format(itv, period2)].to_numpy()) / 2\n","    ltf_df['long_base_{}'.format(itv)] = (ltf_df['dc_upper_{}{}'.format(itv, period1)].to_numpy() + ltf_df['dc_lower_{}{}'.format(itv, period2)].to_numpy()) / 2\n","\n","    return ltf_df\n","\n","\n","def donchian_channel_v2(df, period):\n","  itv = pd.infer_freq(df.index)\n","  upper_name = 'dc_upper_{}{}'.format(itv, period)\n","  lower_name = 'dc_lower_{}{}'.format(itv, period)\n","\n","  df.drop([upper_name, lower_name], inplace=True, axis=1, errors='ignore')\n","\n","  df[upper_name] = df['high'].rolling(period).max()\n","  df[lower_name] = df['low'].rolling(period).min()\n","\n","  return\n","\n","def wave_range(df, period1, period2, ltf_df=None, touch_lbperiod=50):\n","    assert period1 <= period2, \"assert period1 <= period2\"\n","    donchian_channel_v2(df, period1)\n","    donchian_channel_v2(df, period2)\n","    itv = pd.infer_freq(df.index)\n","    if itv != 'T':\n","      assert ltf_df is not None, \"assert ltf_df is not None\"\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, df, [-4, -3, -2, -1]), how='inner')\n","    else:\n","      ltf_df = df\n","\n","    short_tp_1_, short_tp_0_ = ltf_df['dc_lower_{}{}'.format(itv, period1)].to_numpy(), ltf_df['dc_upper_{}{}'.format(itv, period2)].to_numpy()\n","    long_tp_1_, long_tp_0_ = ltf_df['dc_upper_{}{}'.format(itv, period1)].to_numpy(), ltf_df['dc_lower_{}{}'.format(itv, period2)].to_numpy()\n","\n","    ltf_df['short_base_{}'.format(itv)] = (short_tp_1_ + short_tp_0_) / 2  # dc_base touch 사용하면 point 를 좀 더 일찍 잡을 수 있음\n","    ltf_df['long_base_{}'.format(itv)] = (long_tp_1_ + long_tp_0_) / 2\n","    \n","    short_base = ltf_df['short_base_{}'.format(itv)].to_numpy()\n","    long_base = ltf_df['long_base_{}'.format(itv)].to_numpy()\n","\n","    len_df = len(ltf_df)   \n","    short_open_res = np.ones(len_df)\n","    long_open_res = np.ones(len_df)\n","    \n","    data_cols = ['open', 'high', 'low']\n","    open, high, low = [ltf_df[col_].to_numpy() for col_ in data_cols]\n","\n","    short_a_touch_idx = pd.Series(np.where(high >= short_tp_0_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()  # min -> max\n","    short_b_touch_idx = pd.Series(np.where(low <= short_tp_1_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨    \n","    short_open_res *= (high >= short_base) & (short_base >= open) & (short_a_touch_idx < short_b_touch_idx)\n","\n","    ltf_df['short_wave_1_{}'.format(itv)] = pd.Series(get_line(short_b_touch_idx, short_tp_1_)).ffill().to_numpy()   # ffill() 다음 to_numpy() 안하면 None 값\n","    ltf_df['short_wave_0_{}'.format(itv)] = pd.Series(get_line(short_a_touch_idx, short_tp_0_)).ffill().to_numpy()\n","    ltf_df['short_wave_point_{}'.format(itv)] = short_open_res.astype(bool)\n","\n","    long_a_touch_idx = pd.Series(np.where(low <= long_tp_0_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()       \n","    long_b_touch_idx = pd.Series(np.where(high >= long_tp_1_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()    \n","    long_open_res *= (open >= long_base) & (long_base >= low) & (long_a_touch_idx < long_b_touch_idx)\n","\n","    ltf_df['long_wave_1_{}'.format(itv)] = pd.Series(get_line(long_b_touch_idx, long_tp_1_)).ffill().to_numpy()\n","    ltf_df['long_wave_0_{}'.format(itv)] = pd.Series(get_line(long_a_touch_idx, long_tp_0_)).ffill().to_numpy()\n","    ltf_df['long_wave_point_{}'.format(itv)] = long_open_res.astype(bool)\n","\n","    return ltf_df\n","\n","def wave_range_v2(df, period1, ltf_df=None, touch_lbperiod=50):  # v2 for period1 only\n","\n","  donchian_channel_v2(df, period1) \n","\n","  itv = pd.infer_freq(df.index)\n","  if itv != 'T':\n","    assert ltf_df is not None, \"assert ltf_df is not None\"\n","    try:\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, df, [-2, -1]), how='inner')\n","    except Exception as e:\n","      print(\"error in wave_range_v2's join() :\", e)\n","  else:\n","    ltf_df = df    \n","\n","  dc_lower_, dc_upper_ = ltf_df['dc_lower_{}{}'.format(itv, period1)].to_numpy(), ltf_df['dc_upper_{}{}'.format(itv, period1)].to_numpy()\n","\n","  # print(ltf_df.tail().iloc[:, -4:])\n","\n","  ltf_df['wave_base_{}'.format(itv)] = (dc_lower_ + dc_upper_) / 2  # dc_base touch 사용하면 point 를 좀 더 일찍 잡을 수 있음\n","  \n","  wave_base_ = ltf_df['wave_base_{}'.format(itv)].to_numpy()\n","  # short_base_ = ltf_df['short_base__{}'.format(itv)].to_numpy()\n","  # long_base_ = ltf_df['long_base__{}'.format(itv)].to_numpy()\n","\n","  len_df = len(ltf_df)   \n","  short_open_res = np.ones(len_df)\n","  long_open_res = np.ones(len_df)\n","  \n","  data_cols = ['open', 'high', 'low']\n","  open, high, low = [ltf_df[col_].to_numpy() for col_ in data_cols]\n","\n","  dc_upper_touch_idx = pd.Series(np.where(high >= dc_upper_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()  # min -> max\n","  dc_lower_touch_idx = pd.Series(np.where(low <= dc_lower_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨    \n","  \n","  ltf_df['wave_upper_{}'.format(itv)] = pd.Series(get_line(dc_upper_touch_idx, dc_upper_)).ffill().to_numpy() \n","  ltf_df['wave_lower_{}'.format(itv)] = pd.Series(get_line(dc_lower_touch_idx, dc_lower_)).ffill().to_numpy() \n","\n","  short_open_res *= (high >= wave_base_) & (wave_base_ >= open) & (dc_upper_touch_idx < dc_lower_touch_idx)\n","  ltf_df['short_wave_point_{}'.format(itv)] = short_open_res.astype(bool)\n","\n","  long_open_res *= (open >= wave_base_) & (wave_base_ >= low) & (dc_lower_touch_idx < dc_upper_touch_idx)\n","  ltf_df['long_wave_point_{}'.format(itv)] = long_open_res.astype(bool)\n","\n","  return ltf_df\n","\n","def wave_range_v3(df, period1, ltf_df=None, touch_lbperiod=50):  # v2 for period1 only\n","\n","  itv = pd.infer_freq(df.index)\n","\n","  donchian_channel_v2(df, period1) \n","  dc_lower_, dc_upper_ = df['dc_lower_{}{}'.format(itv, period1)].to_numpy(), df['dc_upper_{}{}'.format(itv, period1)].to_numpy()\n","\n","  df['wave_base_{}'.format(itv)] = (dc_lower_ + dc_upper_) / 2  # dc_base touch 사용하면 point 를 좀 더 일찍 잡을 수 있음  \n","  wave_base_ = df['wave_base_{}'.format(itv)].to_numpy()\n","  # short_base_ = df['short_base__{}'.format(itv)].to_numpy()\n","  # long_base_ = df['long_base__{}'.format(itv)].to_numpy()\n","\n","  len_df = len(df)   \n","  short_open_res = np.ones(len_df)\n","  long_open_res = np.ones(len_df)\n","  \n","  data_cols = ['open', 'high', 'low']\n","  open, high, low = [df[col_].to_numpy() for col_ in data_cols]\n","\n","  dc_upper_touch_idx = pd.Series(np.where(high >= dc_upper_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()  # min -> max\n","  dc_lower_touch_idx = pd.Series(np.where(low <= dc_lower_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨    \n","  \n","  # df['wave_upper_{}'.format(itv)] = pd.Series(get_line(dc_upper_touch_idx, dc_upper_)).ffill().to_numpy() \n","  # df['wave_lower_{}'.format(itv)] = pd.Series(get_line(dc_lower_touch_idx, dc_lower_)).ffill().to_numpy() \n","\n","  short_open_res *= (high >= wave_base_) & (wave_base_ >= open) & (dc_upper_touch_idx < dc_lower_touch_idx)\n","  df['short_wave_point_{}'.format(itv)] = short_open_res\n","\n","  long_open_res *= (open >= wave_base_) & (wave_base_ >= low) & (dc_lower_touch_idx < dc_upper_touch_idx)\n","  df['long_wave_point_{}'.format(itv)] = long_open_res\n","\n","  if itv != 'T':\n","    assert ltf_df is not None, \"assert ltf_df is not None\"\n","\n","    join_cols = np.arange(-7, 0 ,1).astype(int)\n","    ltf_df.drop(df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","    try:\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, df, join_cols), how='inner')\n","      # ltf_df = ltf_df.merge(to_lower_tf_v2(ltf_df, df, [-7, -6, -5, -4, -3, -2, -1]), how='inner')\n","    except Exception as e:\n","      print(\"error in wave_range_v3's join() :\", e)\n","  else:\n","    ltf_df = df    \n","\n","  return ltf_df\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-AmhhMxC-ltr"},"outputs":[],"source":["res = wave_range_v3(to_htf(res_df, '5T', '1h'), 12, ltf_df=res_df, touch_lbperiod=50)\n","# res = wave_range_v3(res_df, 12, ltf_df=None, touch_lbperiod=50)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gGDf6iBxFP_s"},"outputs":[],"source":["print(res.tail(100).iloc[:, -7:])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZoS_76wwAXhj"},"outputs":[],"source":["res.dtypes\n","# type(np.arange(-7,0,1).astype(int)[0])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Z7bHV8CvC7eF"},"outputs":[],"source":["def to_lower_tf_v2(ltf_df, htf_df, column, backing_i=1, show_info=False):\n","    #       Todo        #\n","    #        1. 현재 downsampled df 만 허용, direct_df 사용시 issue 발생 가능할 것\n","    assert type(column[0]) in [int, np.int64], \"column value should be integer\"\n","    # if not replace_last_idx:\n","    #     assert datetime.timestamp(htf_df.index[-1]) >= datetime.timestamp(\n","    #         ltf_df.index[-1]), \"htf_lastidx should >= ltf_lastidx\"  # data sync confirmation\n","    #   htf idx ts 가 ltf 보다 작을 경우, intersec_idx 를 구할 수 없음\n","\n","    #   downsampled htf_df 만 허용 - 통일성\n","    #   non_resampled df 사용시 \"cannot reindex a non-unique index with a method or limit\" 라는 error_msg 확인\n","\n","    cols = htf_df.columns[column]  # to_lower_tf_v1 의 int col 반영\n","\n","    ltf_itv = pd.infer_freq(ltf_df.index)\n","    assert ltf_itv == 'T', \"currently only -> 'T' allowed..\"\n","\n","    if show_info:\n","        print(\"backing_i :\", backing_i)\n","\n","    #        1. htf last_ts_idx 의 second 가 :00 format (all rows same format)이 아닌 경우, bfill() 시 NaN 발생\n","    #           --> 상관 없음, 다른 윈인임\n","    #        2. single positional indexer is out-of-bounds => 대게 len(data) 부족 문제임 (row 증분)\n","    # iloc 뒤에 붙여야함, 아니면 timeidx 정상 출력 안됨\n","\n","    renamed_last_row = htf_df.rename(index={htf_df.index[-1]: ltf_df.index[-1]}, inplace=False).iloc[[-1]]\n","    if htf_df.index[-1] != renamed_last_row.index[-1]:  # cannot reindex a non-unique index with a method or limit 방지\n","        htf_df = htf_df.append(renamed_last_row)\n","\n","    # print(htf_df.tail())\n","\n","    # downsampled htf 의 freq_offset 기준으로 앞에서 뒤로 채우는게 맞음\n","    # --> hh:mm:00 format 을 사용해서 그럼 (59:999 면 bfill() 이였을 것)\n","    resampled_df = htf_df[cols].shift(backing_i).resample(ltf_itv).ffill()\n","    # print(resampled_df.tail())\n","    # print()\n","\n","    #        2. htf 가 downsampled 된 df 를 default 로 사용하기에, slicing 불필요해짐\n","    #        3. Shape of passed values is (799, 3), indices imply (3000, 3) -> len(ltf_df) > len(resampled_df) 란 의미\n","    #        4. solution => reindexing for inner join   #\n","    #         a. len(resampled_df) > len(ltf_df) 경우 slicing 진행\n","    #           -> ltf_index 를 다가져와도 resampled_indx 를 채울 수 없음 => error\n","    #           i. resampled length 를 ltf length 로 줄임\n","    #               1. 이미 htf_indi. 는 계산된 상태이고, \n","    #                   a. trader - 마지막 index 만 사용, 전혀 무리없음\n","    #                   b. idep - resampled_df.head(itv) 만큼만 소실된 것 -> 큰 무리없음\n","    #         b. len(resampled_df) < len(ltf_df)-> 상관없음 (ltf_index 에서 resampled_df length 만큼만 때가면 되니까)\n","    if len(resampled_df) > len(ltf_df):\n","        resampled_df = resampled_df.iloc[-len(ltf_df):]\n","    # print(\"len(ltf_df) :\", len(ltf_df))\n","    # print(\"len(resampled_df) :\", len(resampled_df))\n","    resampled_df.index = ltf_df.index[-len(resampled_df):]\n","    # assert len(ltf_df) <= len(resampled_df), \"for join method, assert len(ltf_df) <= len(resampled_df)\"\n","\n","    #       check last row's validity       #\n","    assert np.sum(\n","        pd.isnull(resampled_df.iloc[-1].values)) == 0, \"np.nan value occured, more {} rows might be reguired\".format(\n","        cols)\n","\n","    # if datetime.timestamp(htf_df.index[-1]) < datetime.timestamp(ltf_df.index[-1]):\n","    #     # resampled_df.rename(index={resampled_df.index[-1]: ltf_df.index[-1]}, inplace=True)\n","    #     print(resampled_df.tail())\n","    #     print(\"-----------\")\n","\n","    #        1. 필요한 len 계산해서 pre_proc. 진행 --> open_idx 를 동일하게 맞춰놓았고, shift 적용 상태이기 때문에 불필요함\n","\n","    #        1. ltf_df 의 마지막 timeidx 와 sync. 맞춰주어야함\n","    #           a. itv '1T' 가 아닌경우, 교집합 timeidx 가 존재하지 않을 수 있음\n","    # ltf_lastidx = ltf_df.tail(1).resample('1T').asfreq().index\n","    # intersec_idx_arr = np.argwhere(resampled_df.index == ltf_lastidx.item())\n","    # intersec_idx = intersec_idx_arr.item()\n","    # print(\"intersec_idx :\", intersec_idx)\n","    # print(\"len(resampled_df) :\", len(resampled_df))\n","    #\n","    # assert len(intersec_idx_arr) >= 1, \"len(intersec_idx_arr) is zero\"\n","    #\n","    # sliced_resampled_df = resampled_df[:intersec_idx + 1]\n","    # return sliced_resampled_df.values[-len(ltf_df):]\n","\n","    # return resampled_df.values[-len(ltf_df):]\n","    return resampled_df"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"WA094Xin1FGr"},"outputs":[],"source":["# 1. base_touch_idx 기준으로, 작정한다음, np.nan value 를 ffill() 진행\n","strat_version = config.strat_version\n","len_df = len(res_df)\n","short_open_res = np.ones(len_df)\n","long_open_res = np.ones(len_df)\n","\n","short_tp_1_col, short_tp_0_col, short_tp_gap_col = 'short_tp_1_{}'.format(strat_version), 'short_tp_0_{}'.format(strat_version), 'short_tp_gap_{}'.format(strat_version) \n","long_tp_1_col, long_tp_0_col, long_tp_gap_col = 'long_tp_1_{}'.format(strat_version), 'long_tp_0_{}'.format(strat_version), 'long_tp_gap_{}'.format(strat_version) \n","short_epout_1_col, short_epout_0_col, short_epout_gap_col = 'short_epout_1_{}'.format(strat_version), 'short_epout_0_{}'.format(strat_version), 'short_epout_gap_{}'.format(strat_version) \n","long_epout_1_col, long_epout_0_col, long_epout_gap_col = 'long_epout_1_{}'.format(strat_version), 'long_epout_0_{}'.format(strat_version), 'long_epout_gap_{}'.format(strat_version) \n","\n","data_cols = ['open', 'high', 'low']   # Todo - public_indi 이전에 해야할지도 모름 # 'close', 'haopen', 'hahigh', 'halow', 'haclose'\n","tp_cols = [short_tp_1_col, short_tp_0_col, short_tp_gap_col, long_tp_1_col, long_tp_0_col, long_tp_gap_col]   # Todo - public_indi 이전에 해야할지도 모름\n","epout_cols = [short_epout_1_col, short_epout_0_col, short_epout_gap_col, long_epout_1_col, long_epout_0_col, long_epout_gap_col]   # Todo - public_indi 이전에 해야할지도 모름\n","\n","short_tp_1_, short_tp_0_, short_tp_gap_, long_tp_1_, long_tp_0_, long_tp_gap_ = [res_df[col_].to_numpy() for col_ in tp_cols]\n","short_epout_1_, short_epout_0_, short_epout_gap_, long_epout_1_, long_epout_0_, long_epout_gap_ = [res_df[col_].to_numpy() for col_ in epout_cols]\n","open, high, low = [res_df[col_].to_numpy() for col_ in data_cols]\n","\n","short_base = (short_tp_1_ + short_tp_0_) / 2\n","long_base = (long_tp_1_ + long_tp_0_) / 2\n","\n","touch_period = 50\n","\n","short_a_touch_idx = pd.Series(np.where(high >= short_tp_0_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()  # min -> max\n","short_b_touch_idx = pd.Series(np.where(low <= short_tp_1_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨\n","\n","short_en_p = (get_line(short_a_touch_idx, short_tp_0_) + get_line(short_b_touch_idx, short_tp_1_)) / 2\n","short_base_b = get_line(short_b_touch_idx, short_base)   # 현재, en_p == base_b, why ..?\n","short_tp_0_touch = get_line(short_a_touch_idx, short_tp_0_)\n","short_tp_1_touch = get_line(short_b_touch_idx, short_tp_1_)\n","short_tp_gap_b = get_line(short_b_touch_idx, short_tp_gap_)\n","short_open_res *= (high >= short_base) & (short_base >= open) & (short_a_touch_idx < short_b_touch_idx) #& (short_base_b + config.loc_set.point.base_gap * short_tp_gap_b >= short_base)\n","# short_open_res *= (high >= short_base_b) & (short_base_b >= low) & (short_a_touch_idx < short_b_touch_idx) & (short_base_b + config.loc_set.point.base_gap * short_tp_gap_b >= short_base)\n","\n","len_df = len(res_df)\n","long_a_touch_idx = pd.Series(np.where(low <= long_tp_0_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()       \n","long_b_touch_idx = pd.Series(np.where(high >= long_tp_1_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()\n","\n","long_en_p = (get_line(long_a_touch_idx, long_tp_0_) + get_line(long_b_touch_idx, long_tp_1_)) / 2\n","long_base_b = get_line(long_b_touch_idx, long_base)\n","long_tp_0_touch = get_line(long_a_touch_idx, long_tp_0_)\n","long_tp_1_touch = get_line(long_b_touch_idx, long_tp_1_)\n","long_tp_gap_b = get_line(long_b_touch_idx, long_tp_gap_)\n","long_open_res *= (open >= long_base) & (long_base >= low) & (long_a_touch_idx < long_b_touch_idx) # & (long_base_b - config.loc_set.point.base_gap * long_tp_gap_b <= long_base)\n","# long_open_res *= (open >= long_base) & (long_base >= low) # & (long_a_touch_idx < long_b_touch_idx) # & (long_base_b - config.loc_set.point.base_gap * long_tp_gap_b <= long_base)\n","# long_open_res *= (high >= long_base) & (long_base >= low) & (long_a_touch_idx < long_b_touch_idx) # & (long_base_b - config.loc_set.point.base_gap * long_tp_gap_b <= long_base)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"t4P2qIYAFiDm"},"outputs":[],"source":["i = random.randint(0, len(res_df))\n","\n","plot_size = 200\n","t_df = res_df.iloc[i - plot_size:i]\n","a_data = t_df.to_numpy()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5SIWeZb24xdl"},"outputs":[],"source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(15, 9))\n","nrows, ncols = 1, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        # height_ratios=[3, 1]\n","                        )\n","\n","ax = fig.add_subplot(gs[0])\n","\n","# ------ candles ------ #\n","candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","# _ = [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","\n","# t_df = wave_range(t_df, 20, 20, ltf_df=None, touch_lbperiod=50)\n","t_df = mcp(t_df, 20, ltf_df=None, touch_lbperiod=50)\n","\n","plt.step(np.arange(len(t_df.dc_upper_T40.to_numpy())), t_df.dc_upper_T40.to_numpy(), alpha=1.0, color='yellow', linewidth=2)\n","plt.step(np.arange(len(t_df.dc_lower_T40.to_numpy())), t_df.dc_lower_T40.to_numpy(), alpha=1.0, color='yellow', linewidth=2)\n","plt.step(np.arange(len(t_df.dc_base_T40.to_numpy())), t_df.dc_base_T40.to_numpy(), alpha=1.0, color='white', linewidth=1)\n","\n","short_open_plot_idx = t_df.short_mcp_point_T40.to_numpy().astype(bool)\n","long_open_plot_idx = t_df.long_mcp_point_T40.to_numpy().astype(bool)\n","long_open_plot_idx = t_df.long_mcp_point_T40.to_numpy().astype(bool)\n","plt.step(np.arange(len(t_df.dc_base_T40.to_numpy()))[short_open_plot_idx], t_df.dc_base_T40.to_numpy()[short_open_plot_idx], \"o\", alpha=1.0, color='#ff00ff', markersize=11)\n","plt.step(np.arange(len(t_df.dc_base_T40.to_numpy()))[long_open_plot_idx], t_df.dc_base_T40.to_numpy()[long_open_plot_idx], \"o\", alpha=1.0, color='#ff00ff', markersize=11)\n","\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":344,"status":"ok","timestamp":1648963836575,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"xPzel_I-5tdT","outputId":"107a4133-5161-4816-96e4-b57ebb22c1ea"},"outputs":[{"data":{"text/plain":["array([    nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan, 3800.06, 3800.06, 3800.06, 3800.06, 3800.06, 3800.06, 3800.06, 3800.06, 3793.03, 3785.83, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3788.66, 3791.08, 3780.65, 3780.52, 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3750.84, 3750.84, 3750.84, 3750.84, 3750.84, 3750.84, 3750.84, 3750.84, 3750.84, 3750.  , 3750.  , 3750.  , 3745.  , 3745.  , 3745.  , 3738.22, 3738.22, 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.91, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3735.  , 3738.25, 3739.3 , 3741.91, 3741.91, 3741.91, 3741.91, 3741.91, 3741.91])"]},"execution_count":229,"metadata":{},"output_type":"execute_result"}],"source":["t_df.dc_lower_T40.to_numpy()\n","# t_df.dc_base_T40.to_numpy()[short_open_plot_idx]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":537},"executionInfo":{"elapsed":977,"status":"ok","timestamp":1648599806041,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"7x80Xlje7j4Q","outputId":"90f467c9-ddb1-4f51-933f-b32de99a8c41"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 1080x648 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(15, 9))\n","nrows, ncols = 1, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        # height_ratios=[3, 1]\n","                        )\n","\n","ax = fig.add_subplot(gs[0])\n","\n","# ------ candles ------ #\n","candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","_ = [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","\n","# t_df = wave_range(t_df, 20, 20, ltf_df=None, touch_lbperiod=50)\n","t_df = mcp(t_df, 40, ltf_df=None, touch_lbperiod=50)\n","\n","plt.step(np.arange(len(t_df.short_wave_1_T.to_numpy())), t_df.short_wave_1_T.to_numpy(), alpha=1.0, color='blue', linewidth=2)\n","plt.step(np.arange(len(t_df.short_wave_0_T.to_numpy())), t_df.short_wave_0_T.to_numpy(), alpha=1.0, color='blue', linewidth=2)\n","plt.step(np.arange(len(t_df.long_wave_1_T.to_numpy())), t_df.long_wave_1_T.to_numpy(), alpha=1.0, color='yellow', linewidth=2)\n","plt.step(np.arange(len(t_df.long_wave_0_T.to_numpy())), t_df.long_wave_0_T.to_numpy(), alpha=1.0, color='yellow', linewidth=2)\n","\n","short_open_plot_idx = t_df.short_wave_point_T\n","long_open_plot_idx = t_df.long_wave_point_T\n","plt.step(np.arange(len(short_base[i - plot_size:i]))[short_open_plot_idx], short_base[i - plot_size:i][short_open_plot_idx], \"o\", alpha=1.0, color='#ff00ff', markersize=11)\n","plt.step(np.arange(len(long_base[i - plot_size:i]))[long_open_plot_idx], long_base[i - plot_size:i][long_open_plot_idx], \"o\", alpha=1.0, color='#00ff00', markersize=11)\n","\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"NXPgF90xMzas"},"outputs":[],"source":["t_df.short_wave_point_T == short_open_res.astype(bool)[i - plot_size:i]\n","t_df.long_wave_point_T[50:] == long_open_res.astype(bool)[i - plot_size:i][50:]\n","\n","# short_open_plot_idx = short_open_res.astype(bool)[i - plot_size:i]\n","# long_open_plot_idx = long_open_res.astype(bool)[i - plot_size:i]\n","\n","# short_open_plot_idx = t_df.short_wave_point_T\n","# # long_open_plot_idx = t_df.long_wave_point_T"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"2OLM9XOI-HO5"},"outputs":[],"source":["# long_a_touch_idx[-plot_size:]\n","touch_idx_copy = long_a_touch_idx.copy()\n","# touch_line = long_tp_0_.copy()\n","touch_line = np.full_like(long_tp_0_, np.nan)\n","\n","nan_idx = np.isnan(touch_idx_copy)  # touch_period 동안 touch 이력이 없는 point\n","touch_idx_copy[nan_idx] = 0   # for indexing array\n","\n","int_touch_idx_copy = touch_idx_copy.astype(int)\n","# print(int_touch_idx_copy[-plot_size:])\n","print(touch_line[int_touch_idx_copy])\n","\n","touch_line = long_tp_0_[int_touch_idx_copy]\n","# touch_line[nan_idx] = np.nan   # for true comp.\n","# print(touch_idx_copy[-plot_size:])\n","print(touch_line[int_touch_idx_copy])\n","print(touch_line[-plot_size:])\n","\n","# long_tp_0_[long_a_touch_idx.astype(int)]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3cvi-eFR9Jsm"},"outputs":[],"source":["def get_line(touch_idx, rtc_):\n","  touch_idx_copy = touch_idx.copy()\n","  touch_line = np.full_like(rtc_, np.nan)\n","\n","  nan_idx = np.isnan(touch_idx_copy)\n","  touch_idx_copy[nan_idx] = 0   # for indexing array\n","  touch_line = rtc_[touch_idx_copy.astype(int)]\n","  touch_line[nan_idx] = np.nan   # for true comp.\n","\n","  return touch_line"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1PwSHOShZJNm"},"outputs":[],"source":["# high = t_df.high.to_numpy()\n","# low = t_df.low.to_numpy()\n","\n","# pivot_k = 0.001\n","# high_pivots = peak_valley_pivots(high, pivot_k, -pivot_k)\n","# low_pivots = peak_valley_pivots(low, pivot_k, -pivot_k)\n","# plot_pivots(high, high_pivots)\n","# plot_pivots(low, low_pivots)\n","\n","def plot_pivots(X, pivots):\n","    # plt.xlim(0, len(X))\n","    # plt.ylim(X.min()*0.99, X.max()*1.01)\n","    # plt.plot(np.arange(len(X)), X, 'k:', color='white')\n","    valid_idx = pivots != 0\n","    plt.plot(np.arange(len(X))[valid_idx], X[valid_idx], '-', color='white')\n","    # plt.scatter(np.arange(len(X))[pivots == 1], X[pivots == 1], color='g')\n","    # plt.scatter(np.arange(len(X))[pivots == -1], X[pivots == -1], color='r')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4lZwODlFYxSL"},"outputs":[],"source":["X = res_df_.close.iloc[-100:].to_numpy()\n","# X = res_df_.close.to_numpy()\n","pivots = peak_valley_pivots(X, 0.0005, -0.0005)\n","pivots = peak_valley_pivots(X, 0.5, -0.5)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"W_xx9XWXZKJ5"},"outputs":[],"source":["plot_pivots(X, pivots)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"executionInfo":{"elapsed":935,"status":"ok","timestamp":1647999471974,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"ZAjpk42XarfY","outputId":"471a5d20-9df5-4b2a-9d04-53cdb0e35c2f"},"outputs":[{"data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7f82b6491790>]"]},"execution_count":31,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["t_df = res_df_.iloc[-100:]\n","t_df['date'] = t_df.index\n","data_x = t_df['date'].values\n","data_y = t_df['close'].values\n","peak_indexes = signal.argrelextrema(data_y, np.greater)\n","peak_indexes = peak_indexes[0]\n"," \n","# Find valleys(min).\n","valley_indexes = signal.argrelextrema(data_y, np.less)\n","valley_indexes = valley_indexes[0]\n"," \n","# Instantiate axes.\n","(fig, ax) = plt.subplots()\n"," \n","# Merge peaks and valleys data points using pandas.\n","df_peaks = pd.DataFrame({'date': data_x[peak_indexes], 'zigzag_y': data_y[peak_indexes]})\n","df_valleys = pd.DataFrame({'date': data_x[valley_indexes], 'zigzag_y': data_y[valley_indexes]})\n","df_peaks_valleys = pd.concat([df_peaks, df_valleys], axis=0, ignore_index=True, sort=True)\n"," \n","# Sort peak and valley datapoints by date.\n","df_peaks_valleys = df_peaks_valleys.sort_values(by=['date'])\n"," \n","# Plot zigzag trendline.\n","ax.plot(df_peaks_valleys['date'].values, df_peaks_valleys['zigzag_y'].values, \n","                                                        color='red', label=\"zigzag\")\n"," \n","# Plot close price line.\n","ax.plot(data_x, data_y, linestyle='dashed', color='black', label=\"Close Price\", linewidth=1)\n"," "]},{"cell_type":"markdown","metadata":{"id":"1MNVIExLULhJ"},"source":["#### legacy"]},{"cell_type":"markdown","metadata":{"id":"EOXQbXixiQcK"},"source":["##### volume_profile"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7pFuazxpgx9B"},"outputs":[],"source":["session_df = res_df_.iloc[-1440:] # 0.159 -> 0.024 (14400 -> 1440)\n","volume = session_df['volume'].to_numpy()\n","close = session_df['close'].to_numpy()\n","# px.histogram(session_df, x='volume', y='close', nbins=150, orientation='h').show()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":332,"status":"ok","timestamp":1647259514394,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"SoPJkiyKiXLM","outputId":"2e1d515d-7caf-4f82-b53b-a17f3e1d9ab9"},"outputs":[{"name":"stdout","output_type":"stream","text":["ticks_per_sample : 1.3911999999999989\n","kdy elapsed_time : 0.021226167678833008\n"]}],"source":["kde_factor = 0.05\n","num_samples = 100\n","\n","start_0 = time.time()\n","kde = stats.gaussian_kde(close,weights=volume,bw_method=kde_factor)\n","kdx = np.linspace(close.min(),close.max(),num_samples)\n","kdy = kde(kdx)\n","ticks_per_sample = (kdx.max() - kdx.min()) / num_samples\n","print(\"ticks_per_sample :\", ticks_per_sample)  # sample 당 가격\n","print(\"kdy elapsed_time :\", time.time() - start_0)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":320},"executionInfo":{"elapsed":362,"status":"ok","timestamp":1647263622450,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"mK2jBddAxJ14","outputId":"74d7a810-1375-4db5-f74e-3cf58e0a0662"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 720x360 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["peaks,_ = signal.find_peaks(kdy)\n","pkx = kdx[peaks]\n","pky = kdy[peaks]\n","\n","plt.figure(figsize=(10,5))\n","# plt.hist(close, bins=num_samples, weights=volume, alpha=.8, color='#1592e6')\n","# plt.plot(kdx, kdy, color='white')\n","# plt.plot(pkx, pky, 'bo', color='yellow')\n","plt.plot(kdy, kdx, color='white')\n","plt.plot(pky, pkx, 'bo', color='yellow')\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":326,"status":"ok","timestamp":1647260132868,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"a8tpQZCy0SO1","outputId":"24ee984e-db8d-4083-97a7-4d3ebb536d38"},"outputs":[{"data":{"text/plain":["array([3059.93252525, 3068.3640404 , 3082.41656566, 3093.65858586, 3104.90060606, 3120.35838384, 3130.19515152, 3140.03191919, 3158.30020202, 3168.1369697 , 3176.56848485])"]},"execution_count":8,"metadata":{},"output_type":"execute_result"}],"source":["pkx"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gfA946s8UgS0"},"outputs":[],"source":["# ------ vp 의 indi. 화가 필요함 -> point 설정 ------ #\n","# 1. 4 level 은 미리 만들어놓는게 맞는걸로 보임 -> 추종하는 function 이 많음 (utils_tr, ep_out ...)\n","#   a. 4 level 에 국한하는게 아니라, 모든 peaks 에 대해 levels 설정\n","#   b. 각 session 별로 peak_list 가 주어질 것\n","#     i. prev_data 사용해야하는점 주의 (session vp 는 future_data)"]},{"cell_type":"markdown","metadata":{"id":"3T-9FwWFXR4f"},"source":["###### prominence_info"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":558},"executionInfo":{"elapsed":781,"status":"ok","timestamp":1647183981567,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"RmBt2agljClE","outputId":"c61b0e13-ab0a-4e56-8a44-8bc480ec31cc"},"outputs":[{"name":"stdout","output_type":"stream","text":["prom_line elapsed_time : 0.0005087852478027344\n"]},{"data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script src=\"https://cdn.plot.ly/plotly-2.8.3.min.js\"></script>                <div id=\"f0efc821-18d5-43b5-ad6e-1133ea0ad873\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"f0efc821-18d5-43b5-ad6e-1133ea0ad873\")) {                    Plotly.newPlot(                        \"f0efc821-18d5-43b5-ad6e-1133ea0ad873\",                        [{\"histfunc\":\"sum\",\"histnorm\":\"probability density\",\"marker\":{\"color\":\"#B0C4DE\"},\"name\":\"Vol Profile\",\"nbinsx\":150,\"x\":[3150.12,3150.91,3150.04,3152.76,3150.22,3148.21,3148.25,3148.3,3142.41,3145.56,3144.02,3145.11,3146.27,3142.97,3140.6,3142.02,3142.8,3141.34,3138.28,3138.09,3137.04,3135.5,3133.32,3134.84,3136.27,3137.1,3137.05,3139.74,3138.4,3138.17,3139.49,3141.68,3142.52,3143.14,3143.12,3142.4,3144.17,3142.7,3140.72,3138.89,3142.1,3140.96,3139.76,3138.51,3140.37,3139.0,3138.84,3138.57,3140.62,3143.09,3141.71,3140.05,3139.85,3139.12,3139.9,3139.24,3139.49,3138.88,3138.14,3136.66,3137.03,3138.04,3140.84,3138.27,3137.31,3139.03,3141.06,3141.5,3139.41,3137.62,3141.5,3142.8,3142.24,3143.42,3142.55,3143.9,3146.54,3146.38,3142.34,3144.01,3145.79,3147.35,3146.06,3146.75,3147.37,3153.62,3152.82,3154.53,3153.41,3154.3,3153.01,3156.01,3157.57,3157.36,3160.43,3159.0,3163.78,3164.2,3163.97,3168.45,3170.03,3169.46,3173.73,3169.48,3168.54,3167.57,3166.99,3164.73,3164.25,3166.33,3162.57,3156.97,3159.44,3159.19,3158.11,3156.97,3158.08,3158.32,3158.99,3157.01,3154.91,3147.89,3146.35,3142.36,3142.62,3138.81,3144.68,3143.32,3140.89,3140.16,3139.74,3140.33,3143.48,3145.12,3145.42,3147.13,3143.31,3144.88,3145.12,3143.89,3144.75,3143.91,3140.69,3141.35,3141.59,3141.62,3141.51,3141.96,3142.09,3140.61,3137.55,3138.18,3140.28,3139.39,3139.2,3139.85,3137.92,3138.08,3136.42,3134.93,3135.14,3133.15,3135.12,3133.37,3134.51,3131.06,3128.0,3126.97,3116.7,3122.46,3122.06,3118.8,3115.48,3119.5,3120.88,3110.75,3109.43,3107.1,3111.54,3107.5,3108.74,3111.3,3113.32,3115.38,3118.54,3115.27,3118.6,3120.1,3119.4,3119.35,3123.69,3123.54,3121.8,3121.82,3119.9,3122.01,3122.29,3119.64,3119.91,3118.67,3118.66,3119.45,3120.43,3122.38,3120.43,3121.94,3123.03,3123.6,3121.88,3123.81,3123.85,3121.51,3121.8,3122.29,3123.76,3127.99,3131.35,3131.12,3131.07,3132.76,3131.57,3131.8,3130.61,3134.68,3134.39,3132.91,3130.4,3129.86,3129.9,3129.38,3128.39,3125.57,3124.03,3123.68,3125.42,3125.98,3128.4,3130.98,3128.95,3129.26,3132.05,3131.17,3128.56,3126.45,3127.34,3128.33,3126.96,3128.84,3128.45,3128.34,3128.84,3126.09,3125.6,3125.95,3124.5,3122.44,3122.97,3128.29,3126.43,3127.98,3131.71,3132.68,3130.7,3129.63,3130.04,3129.68,3129.74,3129.36,3129.78,3128.6,3128.87,3130.34,3129.71,3127.47,3129.81,3129.16,3128.41,3126.57,3125.42,3128.63,3129.77,3130.9,3131.42,3129.66,3132.1,3130.24,3133.36,3138.65,3141.3,3144.9,3140.63,3141.08,3139.72,3142.67,3141.99,3140.43,3139.04,3134.85,3133.34,3133.14,3136.4,3138.89,3139.59,3143.64,3140.9,3140.38,3141.76,3140.14,3140.58,3137.29,3138.28,3138.27,3137.57,3139.11,3138.77,3138.93,3139.13,3139.57,3139.76,3141.02,3138.46,3138.77,3139.38,3135.77,3135.49,3136.19,3134.07,3135.5,3134.59,3134.37,3137.84,3139.81,3140.38,3143.15,3142.58,3143.12,3139.01,3137.68,3137.86,3137.6,3136.3,3136.34,3134.66,3136.0,3135.49,3133.83,3132.57,3127.5,3127.82,3130.61,3132.01,3126.05,3128.08,3127.75,3127.18,3128.5,3128.32,3129.79,3128.02,3129.28,3127.92,3129.56,3130.85,3131.61,3133.9,3133.36,3135.98,3136.89,3136.05,3138.23,3137.59,3139.65,3141.26,3140.09,3139.73,3139.13,3140.0,3138.28,3139.07,3140.15,3140.64,3141.14,3140.89,3141.56,3144.82,3146.11,3146.92,3147.37,3148.01,3148.11,3153.52,3153.63,3152.2,3145.75,3149.2,3150.38,3152.32,3148.33,3149.53,3151.03,3149.0,3148.97,3148.26,3148.09,3149.48,3150.14,3153.62,3154.73,3153.73,3154.58,3156.77,3157.02,3157.56,3159.21,3157.99,3157.28,3158.24,3157.75,3153.62,3156.32,3155.98,3156.09,3153.36,3154.85,3153.7,3153.26,3153.92,3152.18,3154.72,3153.76,3151.32,3147.99,3143.63,3142.84,3142.01,3142.34,3141.19,3144.4,3143.24,3146.07,3146.42,3142.71,3145.16,3144.34,3142.69,3139.69,3137.0,3139.75,3138.36,3137.76,3138.86,3141.21,3141.38,3147.22,3146.36,3145.32,3145.22,3143.33,3142.05,3138.36,3136.89,3138.59,3137.22,3138.73,3140.14,3140.55,3143.65,3142.01,3142.94,3141.82,3142.27,3142.38,3141.33,3139.54,3140.53,3141.91,3143.98,3145.27,3145.56,3145.8,3146.38,3146.33,3146.59,3148.72,3149.48,3149.99,3149.19,3147.89,3145.9,3144.89,3143.99,3144.38,3141.47,3141.26,3134.83,3136.75,3135.49,3137.49,3136.01,3138.03,3137.49,3135.5,3133.94,3131.24,3128.72,3131.32,3129.42,3129.77,3126.83,3127.0,3124.12,3125.0,3127.18,3130.0,3129.72,3129.07,3129.68,3129.97,3129.39,3130.92,3132.75,3132.92,3129.99,3133.15,3130.69,3132.15,3134.37,3132.81,3131.7,3130.61,3128.61,3128.99,3124.84,3116.56,3116.76,3116.92,3118.9,3119.05,3118.74,3118.24,3121.88,3121.41,3120.63,3119.45,3119.16,3117.66,3125.21,3122.01,3122.3,3122.27,3123.6,3123.71,3124.0,3126.14,3128.01,3125.94,3126.44,3128.0,3128.04,3128.5,3131.12,3129.44,3129.36,3130.58,3130.58,3130.74,3129.8,3130.8,3130.21,3130.0,3132.5,3132.77,3130.01,3138.72,3139.25,3138.11,3136.77,3136.71,3134.59,3135.98,3133.81,3131.4,3131.16,3133.29,3130.61,3132.0,3132.44,3133.58,3134.18,3133.44,3133.33,3135.37,3134.42,3132.16,3132.2,3130.93,3131.07,3128.89,3127.34,3129.46,3129.77,3130.33,3131.76,3132.28,3130.06,3132.43,3132.6,3134.33,3138.55,3138.49,3137.34,3135.68,3135.12,3133.0,3133.35,3135.1,3135.72,3135.45,3135.74,3134.31,3135.54,3135.0,3134.0,3135.5,3135.47,3138.57,3137.43,3137.26,3137.68,3134.65,3133.04,3134.23,3134.77,3137.77,3138.53,3137.99,3140.51,3141.66,3137.9,3130.11,3125.74,3126.7,3127.43,3126.03,3120.96,3121.81,3124.17,3124.31,3124.54,3125.11,3125.71,3126.3,3128.36,3129.59,3129.72,3130.19,3131.21,3130.5,3130.07,3129.81,3131.5,3134.35,3133.15,3135.09,3136.18,3132.93,3122.75,3122.1,3122.03,3121.84,3121.06,3118.65,3120.18,3119.31,3112.84,3117.62,3114.39,3114.41,3116.04,3117.45,3119.3,3120.57,3120.72,3121.07,3116.17,3110.8,3111.87,3110.61,3115.47,3117.35,3117.49,3117.32,3114.9,3112.16,3112.35,3108.01,3111.41,3109.76,3113.55,3118.27,3120.49,3119.38,3121.0,3119.82,3119.61,3118.49,3116.15,3116.56,3117.76,3115.36,3117.85,3117.1,3118.16,3118.6,3117.1,3114.79,3114.07,3116.16,3113.75,3112.4,3104.99,3118.68,3114.45,3103.37,3094.09,3103.67,3101.78,3098.48,3101.08,3101.52,3096.14,3095.06,3094.52,3093.74,3089.7,3094.76,3094.28,3082.9,3075.29,3071.6,3066.96,3068.99,3068.43,3072.83,3074.19,3068.47,3066.49,3068.45,3071.08,3072.8,3068.44,3067.71,3073.29,3073.62,3075.79,3074.76,3079.0,3077.27,3072.94,3073.42,3070.62,3070.97,3075.98,3073.64,3070.63,3073.96,3074.48,3076.25,3074.55,3072.14,3068.01,3068.44,3057.23,3061.75,3060.41,3060.23,3055.43,3062.96,3064.42,3063.7,3057.99,3057.97,3065.99,3069.05,3073.19,3068.84,3067.58,3067.45,3064.78,3066.87,3067.5,3068.74,3067.5,3070.61,3059.89,3062.56,3066.56,3065.24,3061.41,3060.9,3053.06,3061.95,3059.49,3056.27,3059.09,3059.6,3056.32,3057.96,3058.97,3061.6,3066.01,3068.68,3068.43,3070.66,3072.53,3070.4,3073.28,3072.86,3070.68,3067.65,3066.0,3066.25,3070.21,3071.52,3068.61,3064.15,3064.26,3063.48,3062.8,3060.3,3059.85,3060.47,3064.84,3065.03,3066.71,3066.55,3066.41,3065.24,3067.81,3066.93,3065.0,3067.85,3060.14,3062.51,3061.39,3064.93,3064.94,3066.09,3066.49,3067.75,3070.38,3067.84,3067.51,3072.07,3071.31,3070.05,3068.95,3068.57,3067.73,3068.88,3067.87,3067.89,3065.01,3066.0,3069.24,3065.3,3063.52,3063.06,3064.11,3064.99,3063.19,3062.69,3066.9,3066.87,3065.42,3058.47,3058.2,3068.7,3065.56,3065.52,3059.04,3060.61,3059.57,3058.08,3055.2,3053.72,3060.26,3055.86,3045.88,3046.6,3051.18,3052.99,3057.9,3056.38,3059.4,3061.48,3061.15,3064.36,3065.77,3066.35,3066.8,3067.68,3068.0,3065.05,3063.01,3066.42,3066.16,3064.8,3067.89,3066.3,3068.58,3064.81,3065.74,3064.23,3065.42,3070.43,3069.65,3070.48,3070.57,3073.44,3078.3,3082.89,3079.01,3080.76,3079.67,3082.0,3081.56,3082.01,3081.24,3078.61,3080.11,3080.95,3080.03,3080.65,3079.97,3078.86,3078.5,3078.6,3077.34,3077.0,3076.39,3076.45,3077.45,3076.23,3072.22,3073.67,3079.31,3077.21,3075.68,3076.91,3078.2,3075.92,3077.67,3076.33,3075.14,3076.47,3077.04,3080.69,3079.8,3080.33,3075.65,3074.66,3073.05,3070.38,3067.96,3068.78,3067.92,3069.26,3069.37,3070.76,3068.12,3069.49,3069.98,3071.78,3070.88,3068.71,3067.04,3069.34,3070.99,3070.39,3069.63,3068.6,3068.89,3070.08,3069.26,3069.57,3069.72,3069.53,3067.99,3069.23,3070.93,3071.33,3068.33,3066.84,3066.23,3066.76,3068.17,3070.0,3072.0,3075.66,3073.9,3073.99,3074.66,3074.0,3076.62,3077.82,3076.01,3076.18,3075.52,3075.42,3075.01,3075.67,3079.55,3078.46,3082.28,3080.74,3081.27,3083.38,3084.49,3086.42,3084.9,3086.53,3085.27,3084.7,3084.08,3084.82,3086.99,3092.0,3089.49,3089.26,3084.07,3084.44,3084.8,3083.55,3082.59,3082.36,3084.65,3086.97,3085.67,3085.43,3088.82,3089.81,3091.81,3093.96,3092.59,3093.58,3093.74,3092.61,3091.64,3091.26,3113.47,3104.88,3092.36,3101.44,3107.88,3113.58,3119.86,3128.34,3133.07,3128.34,3123.1,3129.07,3122.38,3127.43,3126.59,3132.79,3137.33,3143.07,3145.41,3147.86,3148.82,3157.67,3157.57,3160.7,3160.01,3163.6,3172.63,3171.77,3174.38,3176.44,3178.06,3179.99,3185.0,3176.75,3171.53,3179.12,3176.52,3168.9,3168.72,3170.03,3168.15,3165.58,3166.83,3167.56,3161.34,3162.78,3167.67,3162.8,3157.67,3155.79,3157.92,3161.37,3163.06,3165.11,3163.45,3164.45,3166.86,3166.61,3165.0,3167.59,3167.45,3164.59,3167.05,3172.29,3176.49,3170.87,3166.5,3165.51,3165.58,3164.96,3165.19,3161.59,3165.09,3162.72,3163.97,3162.62,3165.19,3165.77,3163.55,3173.99,3171.18,3170.87,3168.34,3169.49,3167.69,3169.72,3166.89,3168.42,3166.68,3168.84,3165.83,3162.55,3159.17,3160.93,3162.0,3160.83,3158.69,3159.99,3159.9,3159.88,3160.02,3158.98,3160.0,3158.01,3159.2,3158.6,3158.71,3156.25,3157.2,3156.77,3156.91,3156.6,3156.55,3153.94,3152.29,3151.49,3151.41,3146.89,3148.18,3147.2,3147.17,3147.89,3149.31,3151.59,3156.4,3153.84,3155.3,3155.23,3156.03,3156.24,3155.61,3158.4,3155.05,3155.38,3152.34,3152.18,3153.34,3152.91,3153.99,3151.52,3149.21,3152.48,3151.63,3150.9,3149.75,3148.0,3148.25,3149.4,3149.7,3148.41,3147.65,3146.06,3147.06,3147.41,3146.72,3145.51,3142.17,3142.8,3140.42,3139.24,3140.69,3140.67,3139.22,3136.44,3139.14,3137.55,3133.96,3131.83,3130.8,3130.95,3129.59,3127.0,3129.85,3133.0,3132.21,3132.15,3130.41,3132.9,3134.57,3139.85,3133.04,3138.13,3135.79,3136.96,3133.26,3129.64,3128.02,3127.75,3130.0,3132.21,3133.06,3132.06,3131.88,3132.99,3134.0,3135.79,3137.68,3136.0,3137.89,3133.88,3133.81,3133.84,3133.71,3138.28,3143.06,3144.0,3143.17,3143.02,3145.34,3144.83,3144.81,3144.61,3146.0,3147.91,3146.69,3145.03,3142.46,3142.5,3141.1,3140.17,3140.11,3141.4,3143.92,3144.66,3146.71,3148.95,3146.13,3135.82,3136.96,3139.34,3134.9,3134.48,3136.76,3137.37,3136.92,3136.99,3133.71,3134.44,3132.38,3135.25,3137.14,3135.07,3136.15,3136.15,3139.87,3138.92,3138.5,3141.6,3144.19,3145.44,3147.36,3147.51,3142.12,3143.94,3142.43,3142.02,3142.21,3144.66,3146.53,3144.3,3145.73,3145.94,3146.56,3145.42,3146.05,3150.58,3154.16,3151.01,3149.76,3150.51,3149.31,3146.43,3146.66,3147.47,3145.75,3146.7,3147.1,3143.28,3146.19,3145.38,3145.25,3140.13,3143.45,3140.18,3138.3,3139.7,3136.88,3132.99,3134.7,3135.09,3135.74,3129.89,3126.61,3123.87,3125.14,3119.64,3123.09,3123.35,3120.16,3121.8,3125.0,3132.0,3126.44,3124.57,3120.75,3125.9,3128.05,3127.12,3124.8,3126.19,3128.65,3130.03,3125.31,3125.8,3126.11,3123.22,3125.03,3126.05,3126.24,3129.98,3130.55,3130.97,3129.1,3129.66,3130.27,3130.36,3131.12,3136.13,3137.65,3133.69,3137.18,3137.25,3138.83,3138.58,3141.52,3139.41,3139.05,3137.7,3139.46,3139.8,3140.98,3139.78,3139.17,3140.0,3141.49,3138.86,3139.52,3140.5,3142.58,3142.34,3142.47,3142.91,3142.89,3144.0,3147.55,3148.71,3151.21,3150.66,3148.5,3148.96,3148.5,3150.32,3152.45,3150.83,3150.29,3151.2,3153.01,3152.48,3149.23,3147.45,3146.68,3157.71,3153.34,3147.37,3143.99,3141.45,3142.66,3146.98,3146.61,3148.46,3149.5,3149.29,3148.18,3145.05,3146.86,3145.76,3148.84,3149.31,3146.86,3146.76],\"y\":[1814.895,1182.023,1511.21,821.059,669.95,594.607,397.261,475.226,1430.563,1351.268,848.732,961.415,677.695,2241.498,771.686,3400.92,457.283,815.311,843.761,1456.898,1147.73,2592.488,939.438,695.06,664.589,839.272,344.224,524.897,1029.553,1257.254,764.586,1618.563,599.314,385.634,340.075,245.402,273.54,932.316,297.465,800.419,470.172,358.191,198.746,398.956,521.275,398.68,250.799,376.615,178.701,1034.812,349.27,365.934,193.939,199.584,148.806,343.965,258.079,238.408,273.382,508.892,455.586,1497.43,603.768,705.325,471.812,358.129,1222.79,447.666,603.433,350.189,684.554,404.765,918.631,713.382,803.374,220.673,1013.652,1757.238,887.223,420.149,422.235,642.444,379.785,126.201,499.773,2342.571,1945.816,1288.743,676.794,392.273,424.757,1084.062,1139.501,790.354,2007.705,1446.953,1842.648,777.958,945.39,2579.427,2955.737,1590.911,1476.864,2861.345,772.493,876.768,1835.01,875.833,585.31,765.122,767.852,1825.83,1060.932,682.04,688.755,737.484,429.945,293.821,300.116,1045.831,712.192,2711.994,2052.2,3340.02,897.035,2391.303,2186.713,1517.988,344.748,771.478,720.502,656.313,530.014,1327.673,508.321,904.994,1152.633,523.227,293.715,229.893,202.519,252.467,601.482,317.28,345.035,575.193,374.831,194.465,270.588,367.969,1280.729,1909.713,774.939,518.596,294.403,337.627,382.69,353.682,534.457,1713.387,360.944,713.113,1393.388,1289.595,610.727,739.131,1619.367,2194.335,8164.046,2879.21,2159.701,2512.548,3579.377,1841.206,2810.677,3893.288,1849.815,5497.891,2407.824,1844.752,1304.788,945.57,2745.772,2050.842,2354.528,1577.291,903.569,1269.654,2703.684,766.884,1965.466,1320.285,1111.835,521.223,822.176,942.413,497.538,499.364,222.856,316.366,355.702,243.842,362.266,593.914,349.424,308.565,540.138,769.079,463.481,163.895,237.299,285.424,466.1,224.654,493.52,1674.225,4063.392,1370.598,472.447,957.289,609.428,338.42,243.509,745.35,1417.319,762.417,553.865,616.945,305.569,511.777,416.061,2007.687,312.874,1760.715,470.299,170.102,514.177,647.315,425.481,274.85,415.924,896.493,396.062,588.357,231.181,273.932,245.847,212.412,116.329,109.858,274.394,323.434,335.066,347.193,459.166,944.41,601.327,889.712,412.644,317.84,986.261,934.932,572.116,181.168,460.876,145.156,108.878,210.202,77.92,295.25,300.008,412.518,463.649,312.424,342.369,602.553,325.602,288.656,458.643,344.168,189.501,378.501,506.806,405.58,266.931,508.179,577.092,1968.061,3128.798,2617.171,810.468,1071.792,482.71,702.007,298.08,1139.23,623.801,1162.914,1203.468,673.113,606.991,499.32,344.082,916.323,1133.798,236.462,323.745,227.404,305.618,859.751,541.196,262.919,221.3,135.795,94.984,185.741,146.342,216.582,150.862,227.198,373.705,332.486,216.229,778.895,1204.286,326.503,380.38,1047.579,257.681,288.363,944.527,1025.858,1888.092,606.18,219.281,573.418,618.131,579.352,643.473,227.201,596.85,266.111,593.418,412.236,518.62,714.492,807.998,1833.123,1485.911,696.152,1044.399,1178.696,682.768,339.908,614.242,333.987,289.083,426.036,434.767,363.008,294.274,249.675,759.092,233.645,259.457,692.772,530.582,751.244,252.918,324.292,565.306,530.138,634.433,621.443,362.445,1462.934,578.493,404.427,432.71,381.631,206.741,803.279,286.361,454.727,989.949,1000.012,534.381,1225.959,2611.002,1238.904,1808.266,2668.663,1734.437,1991.659,1533.497,673.975,1417.797,1002.213,689.714,474.831,775.993,612.321,674.988,586.885,486.539,6750.373,1240.763,1031.138,1064.433,810.097,2543.442,1714.432,1408.587,2076.241,891.454,802.952,990.123,356.49,909.726,969.575,1157.716,408.802,557.485,790.536,760.441,903.066,478.393,406.574,460.658,270.44,397.786,2943.217,4367.234,1259.451,1068.328,966.188,1414.714,579.827,511.738,412.874,654.607,675.654,504.93,356.198,858.616,1158.323,1447.125,787.173,728.954,636.948,628.265,669.612,465.412,1222.997,749.451,462.962,472.928,432.435,342.099,1618.728,2358.947,952.987,460.716,651.763,975.681,444.398,645.867,449.599,193.003,278.721,545.444,842.045,277.826,994.515,588.675,591.108,309.423,892.268,276.425,502.627,968.723,404.031,211.579,444.69,715.557,984.707,1097.859,551.379,692.514,900.106,360.002,948.053,805.637,489.368,1676.558,1304.157,367.592,283.184,1023.029,456.415,763.262,343.508,461.29,879.775,1776.793,1251.296,591.245,573.997,1673.844,1283.242,2767.718,1120.511,657.294,746.819,905.747,599.259,715.33,481.675,327.764,388.74,1256.088,1555.066,601.571,277.709,213.939,322.601,214.083,472.872,296.863,364.37,746.543,378.365,967.733,5140.211,4083.258,1994.542,1976.259,888.817,461.462,437.566,1416.611,716.221,1318.431,481.782,2014.435,936.676,1459.321,855.198,732.281,466.019,450.272,560.57,469.751,622.444,518.498,933.561,1274.182,362.645,417.461,200.685,1204.422,1085.208,437.325,388.368,522.196,414.681,402.1,458.488,176.931,774.455,662.126,617.206,452.137,4865.578,3871.135,1343.329,634.081,483.47,1681.018,514.598,502.913,1322.138,529.723,572.34,348.409,713.894,228.335,215.652,253.718,284.838,694.79,180.093,810.769,563.133,209.468,355.301,1084.715,204.09,893.371,557.044,320.725,236.971,360.995,404.746,202.665,416.594,295.445,369.598,1691.926,445.675,502.376,451.028,754.112,460.168,253.657,293.696,364.866,139.172,187.996,297.765,167.774,288.681,128.716,179.501,428.036,213.013,396.147,290.492,459.26,333.25,604.208,535.843,218.827,379.209,623.314,309.742,1047.188,2658.829,741.273,2765.267,2446.593,900.038,1232.736,817.002,2687.132,3309.465,1746.003,699.151,574.566,262.053,505.975,270.49,1023.427,533.5,488.001,536.457,432.03,945.469,1080.591,611.695,611.907,1095.621,485.481,688.799,375.255,1322.925,2347.935,1281.055,1713.871,563.816,371.289,1137.167,1011.662,433.968,4755.422,2060.545,1118.297,1058.42,991.226,512.798,725.336,476.284,633.408,903.175,644.941,2829.545,1218.33,1149.1,755.961,1252.379,2399.314,350.433,457.851,727.54,748.377,2585.751,4337.831,2453.675,1355.272,2073.169,1425.068,1751.715,901.639,353.899,368.582,636.142,1082.148,271.744,399.517,439.441,377.24,330.026,233.732,285.884,308.136,639.158,734.67,567.183,310.671,995.761,12392.217,5461.011,2988.344,5529.668,2618.77,11929.186,2928.894,5355.073,1533.817,2310.282,2210.125,1805.742,2500.52,3272.782,1332.249,2270.554,2483.668,8790.039,13105.425,16039.554,8317.661,6814.545,3909.444,2716.544,2823.368,2433.446,3042.327,4014.336,2680.476,2166.982,8299.153,2107.079,2585.491,3224.808,2437.339,2865.693,1574.387,2219.401,2214.305,2410.523,1263.301,1232.671,1213.058,1789.33,827.919,1530.653,1732.94,1439.558,1552.842,1345.879,1394.187,3147.626,6162.965,7032.083,1330.471,2505.725,7118.551,2288.653,1286.682,1102.423,3249.307,1670.88,2218.379,2946.052,2525.484,1719.79,1630.798,1474.484,1299.503,434.158,1462.856,1914.008,1336.711,872.552,2661.102,1921.851,1223.061,892.979,1675.459,2747.98,3398.563,4782.692,3130.671,914.08,3275.661,3677.987,1920.096,1582.481,626.202,1699.704,3016.389,2348.542,3936.201,1440.961,2551.41,2929.114,3910.54,1731.929,1423.134,1630.803,823.665,1596.309,1843.181,1446.542,850.694,2297.843,856.543,883.961,501.157,1621.147,856.971,707.791,1351.166,795.198,938.608,485.179,455.671,1061.071,580.457,263.109,715.892,1587.285,993.923,1251.255,2659.143,996.502,853.854,744.677,711.983,3232.026,3662.831,807.0,555.69,1043.709,1292.106,987.334,375.225,316.734,438.411,289.699,537.944,942.885,797.012,1077.267,379.583,611.293,521.083,934.505,1175.247,499.493,1141.633,563.435,872.319,811.753,773.096,1412.344,3620.225,4714.694,669.244,1065.55,1598.224,847.615,1923.708,1020.52,1883.069,3076.446,2134.064,1453.728,11270.233,2936.896,6307.007,2166.477,1551.387,1853.874,1372.167,2298.452,1069.092,896.017,1027.708,1205.234,1794.761,2595.809,890.418,848.032,650.893,1088.28,200.664,502.739,575.785,921.978,808.706,3029.201,602.68,309.435,495.715,959.404,569.062,492.893,686.058,1227.456,2415.351,6515.3,1556.79,953.548,1004.564,1320.414,4557.466,1098.609,911.352,1232.801,1241.033,1343.423,769.908,447.129,647.478,822.26,767.131,569.507,437.851,1190.093,378.865,290.814,440.004,366.664,1587.445,389.51,1948.052,1274.222,418.255,155.696,281.607,310.623,166.909,303.48,700.347,271.28,110.636,520.183,820.569,810.861,1088.369,858.322,1295.596,2094.312,1503.768,1037.796,500.033,559.479,227.634,704.975,702.474,560.973,1364.022,508.316,349.588,640.477,527.515,1470.646,248.411,315.355,194.49,727.557,208.254,329.772,769.204,559.27,220.603,179.101,514.706,337.329,450.668,1473.433,2256.979,539.366,738.786,421.76,808.357,281.104,544.472,1304.849,1022.835,193.211,205.636,773.849,215.729,546.43,625.921,225.712,512.885,292.199,264.804,592.964,1204.967,418.402,742.071,437.497,433.652,1078.844,331.74,1040.031,872.767,1004.157,722.758,430.616,408.399,245.932,484.168,3624.12,976.418,394.652,1682.369,625.343,239.747,380.251,1597.606,848.428,708.537,664.832,371.165,750.007,1026.259,843.009,1023.456,1917.749,952.579,870.347,502.286,1363.581,780.743,1448.612,12431.885,6893.299,8886.959,3907.062,9540.759,4740.252,5895.644,16625.626,6312.555,3615.152,3860.571,2514.261,2760.668,1523.597,1871.628,2528.961,7365.0,8920.169,5768.383,6710.649,3346.652,4463.499,3666.88,6450.55,4832.119,5510.211,8186.365,3537.525,8281.314,10045.157,6383.577,5079.938,3813.839,3660.97,5728.121,7917.184,2421.103,5177.868,3136.173,2217.563,3832.957,1720.129,1543.371,1636.799,8034.61,4788.474,3850.793,1514.508,5392.819,1927.194,1163.751,1585.945,1209.542,1998.829,877.24,823.488,781.809,826.931,913.803,742.025,3002.547,1367.89,1044.189,1100.946,2047.804,2818.993,1017.674,1889.338,1032.258,579.044,748.169,927.378,1345.4,516.194,810.503,845.27,650.086,556.495,716.068,3167.786,1365.503,1120.129,1632.121,494.557,495.811,356.546,271.948,320.235,366.049,349.466,550.775,843.882,2000.798,961.087,470.513,438.616,819.214,594.347,286.774,251.089,602.025,267.413,278.638,425.458,282.646,1696.154,921.061,374.925,625.157,346.19,1447.882,338.668,501.822,996.179,1126.58,967.442,927.906,4074.406,898.707,1271.993,720.906,758.176,506.787,1384.601,2630.754,1180.051,296.364,385.161,594.547,303.281,206.3,1509.706,417.533,430.407,350.638,614.913,217.67,109.158,296.924,307.087,827.106,850.038,562.773,402.213,853.225,619.708,185.33,229.867,207.248,255.341,347.69,914.271,348.17,280.522,461.744,242.677,1689.641,1235.344,943.835,1181.751,733.24,268.104,381.13,818.733,1090.052,548.373,754.94,989.387,773.47,1064.937,1070.959,703.035,2594.209,1302.569,682.392,552.382,309.738,466.737,793.098,2376.261,856.232,754.519,404.143,168.334,1477.862,943.652,711.273,1748.362,1006.485,789.572,594.946,279.75,178.433,290.649,215.983,493.113,338.384,762.448,611.586,1334.322,294.505,303.188,134.407,516.94,1550.403,1126.795,485.425,622.304,1249.031,373.648,346.683,211.699,519.095,1088.352,529.813,523.314,772.507,209.114,687.664,329.146,352.705,444.147,395.78,325.339,513.402,784.247,986.546,1584.942,2185.948,785.321,729.112,453.787,897.861,262.964,404.52,171.003,580.24,118.207,406.641,160.17,743.848,437.773,1369.397,191.219,1229.096,398.903,403.85,322.726,970.586,568.304,478.038,404.745,1239.612,454.913,442.573,288.41,264.373,524.088,130.674,443.39,586.952,167.731,307.728,263.88,311.737,866.873,1745.621,745.983,309.615,328.348,383.704,1118.281,450.373,387.296,188.089,629.117,158.39,829.748,364.026,136.85,324.278,1060.597,707.567,409.192,443.098,510.64,923.325,605.203,716.174,198.6,554.733,1635.338,1598.253,4035.924,1229.607,1608.824,2794.958,636.725,1971.132,1481.98,1093.152,3786.967,1736.518,1289.176,1179.711,677.348,1259.158,841.34,248.067,451.306,413.411,883.511,395.721,304.827,431.303,1106.7,599.37,354.735,747.528,810.7,835.158,481.175,629.481,323.974,608.739,557.978,525.368,1225.958,840.532,1067.311,718.545,716.335,312.894,563.057,1017.419,618.553,512.007,588.984,294.695,278.158,217.027,537.444,269.51,225.5,501.376,691.99,483.791,127.283,709.697,467.43,307.414,507.697,422.858,256.808,1153.716,1055.198,1414.849,1144.706,1064.626,623.477,877.503,444.839,742.027,415.472,677.548,1051.317,655.2,370.676,1077.143,1051.053,784.457,4542.468,1733.555,1213.929,1538.198,2121.016,918.853,882.448,654.86,1728.875,631.103,301.013,661.938,933.172,370.951,202.456,406.614,314.65,592.089,26.727],\"type\":\"histogram\"},{\"marker\":{\"color\":\"#D2691E\"},\"mode\":\"lines\",\"name\":\"KDE\",\"x\":[3045.88,3047.2852525252524,3048.690505050505,3050.0957575757575,3051.5010101010103,3052.9062626262626,3054.3115151515153,3055.7167676767676,3057.1220202020204,3058.5272727272727,3059.9325252525255,3061.337777777778,3062.7430303030305,3064.148282828283,3065.5535353535356,3066.958787878788,3068.3640404040407,3069.769292929293,3071.1745454545458,3072.579797979798,3073.9850505050504,3075.390303030303,3076.7955555555554,3078.200808080808,3079.6060606060605,3081.0113131313133,3082.4165656565656,3083.8218181818183,3085.2270707070707,3086.6323232323234,3088.0375757575757,3089.4428282828285,3090.848080808081,3092.2533333333336,3093.658585858586,3095.0638383838386,3096.469090909091,3097.8743434343437,3099.279595959596,3100.6848484848488,3102.090101010101,3103.4953535353534,3104.900606060606,3106.3058585858585,3107.711111111111,3109.1163636363635,3110.5216161616163,3111.9268686868686,3113.3321212121214,3114.7373737373737,3116.1426262626264,3117.5478787878787,3118.9531313131315,3120.358383838384,3121.7636363636366,3123.168888888889,3124.5741414141416,3125.979393939394,3127.3846464646467,3128.789898989899,3130.1951515151513,3131.600404040404,3133.0056565656564,3134.410909090909,3135.8161616161615,3137.2214141414142,3138.6266666666666,3140.0319191919193,3141.4371717171716,3142.8424242424244,3144.2476767676767,3145.6529292929295,3147.0581818181818,3148.4634343434345,3149.868686868687,3151.2739393939396,3152.679191919192,3154.0844444444447,3155.489696969697,3156.8949494949493,3158.300202020202,3159.7054545454544,3161.110707070707,3162.5159595959594,3163.921212121212,3165.3264646464645,3166.7317171717173,3168.1369696969696,3169.5422222222223,3170.9474747474746,3172.3527272727274,3173.7579797979797,3175.1632323232325,3176.568484848485,3177.9737373737375,3179.37898989899,3180.7842424242426,3182.189494949495,3183.5947474747472,3185.0],\"y\":[0.001832905419240713,0.0015170993773343943,0.0009811990405335794,0.0010910781869862753,0.001662787664619852,0.002276584209048065,0.003017679469815101,0.004091626542089751,0.005452920992053675,0.006818537038424319,0.0076664779747402535,0.007643887894555952,0.007344902200072563,0.00827273925583825,0.011220488982456029,0.01494681923660121,0.016672754263443067,0.015298211710060586,0.013000656836147326,0.01136447782936633,0.009905415113226086,0.007991277793749363,0.005915182769079316,0.004603614839180802,0.004340216581875808,0.004677084159634987,0.004804286094145265,0.003945664227425191,0.0025142257578005694,0.0014727830724446968,0.0011591657181478472,0.0015827815995405762,0.0026670028851318566,0.003810420375174876,0.004026389180218125,0.003107185282237217,0.001940076730122543,0.0013880150787554427,0.0015444989246854268,0.0023609061649200076,0.0037401025635127546,0.005029582983599697,0.005321434602966492,0.004778565138234207,0.004284633110071723,0.004142142333983544,0.004650245486454227,0.005790340541463709,0.0068018904562159735,0.007335214235017366,0.008011875247544532,0.009032977214800161,0.009862320541122151,0.01015891479438546,0.010077897051723251,0.009700191176833918,0.00944402389099212,0.010385374840307136,0.012487699392384763,0.014125807036359036,0.014335489751832464,0.013760773754902053,0.013070724606546664,0.012663567468535765,0.013407581002278695,0.0152918031502357,0.01671953731557649,0.01690758767766308,0.0165814827586469,0.01570664895796692,0.014255369464538745,0.013369278115428072,0.012993378487870194,0.011780241643981209,0.009592167939552232,0.007696976248164002,0.006823155935995189,0.006619023196157732,0.007110669748385475,0.008153180108070628,0.008357004173573936,0.007467120695723313,0.006541623694037697,0.005979030384818917,0.00565790251287167,0.005607397002735248,0.00599245781550611,0.006338445734583271,0.0060092038421343755,0.0053319582929410685,0.004754442260061802,0.004333231721163359,0.004227903631578969,0.004279536987396199,0.003930156107007355,0.0029754130410062354,0.0017041868280610027,0.0007672145372132436,0.0005056108010257643,0.0005155116532610217],\"type\":\"scatter\"},{\"marker\":{\"color\":\"black\",\"size\":10},\"mode\":\"markers\",\"name\":\"Peaks\",\"x\":[3059.9325252525255,3068.3640404040407,3082.4165656565656,3093.658585858586,3104.900606060606,3120.358383838384,3130.1951515151513,3140.0319191919193,3158.300202020202,3168.1369696969696,3176.568484848485],\"y\":[0.0076664779747402535,0.016672754263443067,0.004804286094145265,0.004026389180218125,0.005321434602966492,0.01015891479438546,0.014335489751832464,0.01690758767766308,0.008357004173573936,0.006338445734583271,0.004279536987396199],\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"shapes\":[{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3059.9325252525255,\"x1\":3059.9325252525255,\"xref\":\"x\",\"y0\":0,\"y1\":0.007344902200072563,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3068.3640404040407,\"x1\":3068.3640404040407,\"xref\":\"x\",\"y0\":0,\"y1\":0.001159165718147847,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3082.4165656565656,\"x1\":3082.4165656565656,\"xref\":\"x\",\"y0\":0,\"y1\":0.004340216581875808,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3093.658585858586,\"x1\":3093.658585858586,\"xref\":\"x\",\"y0\":0,\"y1\":0.0013880150787554425,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3104.900606060606,\"x1\":3104.900606060606,\"xref\":\"x\",\"y0\":0,\"y1\":0.004142142333983544,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3120.358383838384,\"x1\":3120.358383838384,\"xref\":\"x\",\"y0\":0,\"y1\":0.00944402389099212,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3130.1951515151513,\"x1\":3130.1951515151513,\"xref\":\"x\",\"y0\":0,\"y1\":0.012663567468535765,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3140.0319191919193,\"x1\":3140.0319191919193,\"xref\":\"x\",\"y0\":0,\"y1\":0.0009811990405335785,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3158.300202020202,\"x1\":3158.300202020202,\"xref\":\"x\",\"y0\":0,\"y1\":0.006619023196157732,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3168.1369696969696,\"x1\":3168.1369696969696,\"xref\":\"x\",\"y0\":0,\"y1\":0.005607397002735248,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3176.568484848485,\"x1\":3176.568484848485,\"xref\":\"x\",\"y0\":0,\"y1\":0.004227903631578969,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3062.5744,\"xref\":\"x\",\"y0\":0.007505690087406408,\"y1\":0.007505690087406408,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.008915959990795457,\"y1\":0.008915959990795457,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3079.2688000000003,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.0045722513380105365,\"y1\":0.0045722513380105365,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3097.3544,\"xref\":\"x\",\"y0\":0.002707202129486784,\"y1\":0.002707202129486784,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3108.484,\"xref\":\"x\",\"y0\":0.004731788468475018,\"y1\":0.004731788468475018,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3123.7872,\"xref\":\"x\",\"y0\":0.00980146934268879,\"y1\":0.00980146934268879,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3133.5256,\"xref\":\"x\",\"y0\":0.013499528610184115,\"y1\":0.013499528610184115,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.00894439335909833,\"y1\":0.00894439335909833,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3153.0024,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.007488013684865834,\"y1\":0.007488013684865834,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3164.132,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.005972921368659259,\"y1\":0.005972921368659259,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3173.8704,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.004253720309487584,\"y1\":0.004253720309487584,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3059.9325252525255,\"x1\":3059.9325252525255,\"xref\":\"x\",\"y0\":0,\"y1\":0.0076664779747402535,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3068.3640404040407,\"x1\":3068.3640404040407,\"xref\":\"x\",\"y0\":0,\"y1\":0.016672754263443067,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3082.4165656565656,\"x1\":3082.4165656565656,\"xref\":\"x\",\"y0\":0,\"y1\":0.004804286094145265,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3093.658585858586,\"x1\":3093.658585858586,\"xref\":\"x\",\"y0\":0,\"y1\":0.004026389180218125,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3104.900606060606,\"x1\":3104.900606060606,\"xref\":\"x\",\"y0\":0,\"y1\":0.005321434602966492,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3120.358383838384,\"x1\":3120.358383838384,\"xref\":\"x\",\"y0\":0,\"y1\":0.01015891479438546,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3130.1951515151513,\"x1\":3130.1951515151513,\"xref\":\"x\",\"y0\":0,\"y1\":0.014335489751832464,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3140.0319191919193,\"x1\":3140.0319191919193,\"xref\":\"x\",\"y0\":0,\"y1\":0.01690758767766308,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3158.300202020202,\"x1\":3158.300202020202,\"xref\":\"x\",\"y0\":0,\"y1\":0.008357004173573936,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3168.1369696969696,\"x1\":3168.1369696969696,\"xref\":\"x\",\"y0\":0,\"y1\":0.006338445734583271,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3176.568484848485,\"x1\":3176.568484848485,\"xref\":\"x\",\"y0\":0,\"y1\":0.004279536987396199,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3062.5744,\"xref\":\"x\",\"y0\":0.007505690087406408,\"y1\":0.007505690087406408,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.008915959990795457,\"y1\":0.008915959990795457,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3079.2688000000003,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.0045722513380105365,\"y1\":0.0045722513380105365,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3097.3544,\"xref\":\"x\",\"y0\":0.002707202129486784,\"y1\":0.002707202129486784,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3108.484,\"xref\":\"x\",\"y0\":0.004731788468475018,\"y1\":0.004731788468475018,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3123.7872,\"xref\":\"x\",\"y0\":0.00980146934268879,\"y1\":0.00980146934268879,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3133.5256,\"xref\":\"x\",\"y0\":0.013499528610184115,\"y1\":0.013499528610184115,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.00894439335909833,\"y1\":0.00894439335909833,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3153.0024,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.007488013684865834,\"y1\":0.007488013684865834,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3164.132,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.005972921368659259,\"y1\":0.005972921368659259,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3173.8704,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.004253720309487584,\"y1\":0.004253720309487584,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3059.9325252525255,\"x1\":3059.9325252525255,\"xref\":\"x\",\"y0\":0,\"y1\":0.0076664779747402535,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3068.3640404040407,\"x1\":3068.3640404040407,\"xref\":\"x\",\"y0\":0,\"y1\":0.016672754263443067,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3082.4165656565656,\"x1\":3082.4165656565656,\"xref\":\"x\",\"y0\":0,\"y1\":0.004804286094145265,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3093.658585858586,\"x1\":3093.658585858586,\"xref\":\"x\",\"y0\":0,\"y1\":0.004026389180218125,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3104.900606060606,\"x1\":3104.900606060606,\"xref\":\"x\",\"y0\":0,\"y1\":0.005321434602966492,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3120.358383838384,\"x1\":3120.358383838384,\"xref\":\"x\",\"y0\":0,\"y1\":0.01015891479438546,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3130.1951515151513,\"x1\":3130.1951515151513,\"xref\":\"x\",\"y0\":0,\"y1\":0.014335489751832464,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3140.0319191919193,\"x1\":3140.0319191919193,\"xref\":\"x\",\"y0\":0,\"y1\":0.01690758767766308,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3158.300202020202,\"x1\":3158.300202020202,\"xref\":\"x\",\"y0\":0,\"y1\":0.008357004173573936,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3168.1369696969696,\"x1\":3168.1369696969696,\"xref\":\"x\",\"y0\":0,\"y1\":0.006338445734583271,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3176.568484848485,\"x1\":3176.568484848485,\"xref\":\"x\",\"y0\":0,\"y1\":0.004279536987396199,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3062.5744,\"xref\":\"x\",\"y0\":0.007505690087406408,\"y1\":0.007505690087406408,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.008915959990795457,\"y1\":0.008915959990795457,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3079.2688000000003,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.0045722513380105365,\"y1\":0.0045722513380105365,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3097.3544,\"xref\":\"x\",\"y0\":0.002707202129486784,\"y1\":0.002707202129486784,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3108.484,\"xref\":\"x\",\"y0\":0.004731788468475018,\"y1\":0.004731788468475018,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3123.7872,\"xref\":\"x\",\"y0\":0.00980146934268879,\"y1\":0.00980146934268879,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3133.5256,\"xref\":\"x\",\"y0\":0.013499528610184115,\"y1\":0.013499528610184115,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.00894439335909833,\"y1\":0.00894439335909833,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3153.0024,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.007488013684865834,\"y1\":0.007488013684865834,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3164.132,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.005972921368659259,\"y1\":0.005972921368659259,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3173.8704,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.004253720309487584,\"y1\":0.004253720309487584,\"yref\":\"y\"}]},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('f0efc821-18d5-43b5-ad6e-1133ea0ad873');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{},"output_type":"display_data"}],"source":["start_0 = time.time()\n","min_prom = kdy.max() * 0.0\n","pipsize = 0.01\n","max_width_pips = 20\n","# width_range=(1, max_width_pips * pipsize / ticks_per_sample)\n","width_range= max_width_pips * pipsize / ticks_per_sample\n","peaks, peak_props = signal.find_peaks(kdy, prominence=min_prom, width=width_range)\n","\n","peak_x = kdx[peaks]\n","peak_y = kdy[peaks]\n","# ------ prominence lines ------ #\n","left_base = peak_props['left_bases']\n","right_base = peak_props['right_bases']\n","line_x = peak_x\n","line_y0 = peak_y\n","line_y1 = peak_y # - peak_props['prominences']\n","print(\"prom_line elapsed_time :\", time.time() - start_0)\n","\n","\n","for x, y0, y1 in zip(line_x, line_y0, line_y1):\n","    fig.add_shape(type='line',\n","        xref='x', yref='y',\n","        # x0=x, y0=y0, x1=x, y1=y1,\n","        x0=x, y0=0, x1=x, y1=y1,\n","        line=dict(\n","            color='red',\n","            width=2,\n","        )\n","    )\n","\n","# ------ width ------ #\n","left_ips = peak_props['left_ips']\n","right_ips = peak_props['right_ips']\n","# width_x0 = kdx.min() + (left_ips * ticks_per_sample)\n","# width_x1 = kdx.min() + (right_ips * ticks_per_sample)\n","width_x0 = kdx.min() + (left_base * ticks_per_sample)\n","width_x1 = kdx.min() + (right_base * ticks_per_sample)\n","\n","# int_from = kdx.min() + (left_base * ticks_per_sample)\n","# int_to = kdx.min() + (right_base * ticks_per_sample)\n","# [kde.integrate_box_1d(x0, x1) for x0, x1 in zip(int_from, int_to)]\n","\n","width_y = peak_props['width_heights']\n","\n","for x0, x1, y in zip(width_x0, width_x1, width_y):\n","    fig.add_shape(type='line',\n","        xref='x', yref='y',\n","        x0=x0, y0=y, x1=x1, y1=y,\n","        line=dict(\n","            color='red',\n","            width=2,\n","        )\n","    )\n","fig.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zqj944n-WzyZ"},"outputs":[],"source":["# peaks  # ndarray\n","# kdx  # ndarray\n","# kdy  # ndarray\n","# kdx.min()\n","left_base * ticks_per_sample\n","# volume"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Rvqv0RGojo9h"},"outputs":[],"source":["print(peak_y)\n","print(peak_props['prominences'])\n","peak_props"]},{"cell_type":"markdown","metadata":{"id":"c2729DJ6h720"},"source":["##### imb."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Rucj-iepiR_-"},"outputs":[],"source":["t_df = res_df_.iloc[-120:-100]\n","a_data = t_df.to_numpy()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":537},"executionInfo":{"elapsed":5,"status":"ok","timestamp":1648801482583,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"ktm1aB-Bh7GH","outputId":"6aba1d34-3575-486a-9c29-941dc18a00fc"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 1080x648 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(15, 9))\n","nrows, ncols = 1, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        # height_ratios=[3, 1]\n","                        )\n","\n","ax = fig.add_subplot(gs[0])\n","\n","# ------ candles ------ #\n","candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","_ = [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jMQBhQ1Ljt5Y"},"outputs":[],"source":["def imb_ratio_v4(df, itv):\n","\n","  itv_num = to_itvnum(itv)\n","\n","  close = df['close_{}'.format(itv)].to_numpy()\n","  open = df['open_{}'.format(itv)].to_numpy()\n","\n","  b1_close = df['close_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_open = df['open_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_high = df['high_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_low = df['low_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","  body_range = abs(close - open)\n","  b1_body_range = abs(b1_close - b1_open)\n","\n","  df['body_rel_ratio_{}'.format(itv)] = body_range / b1_body_range\n","\n","  short_body_range = np.where(close <= b1_low, body_range, b1_body_range)\n","  long_body_range = np.where(close >= b1_high, body_range, b1_body_range)\n","\n","  # 추후에 통계 측정해야함 -> bir 에 따른 개별 trader 의 epout / tpep 이라던가 => short 에 양봉은 취급안함 (why use np.nan)\n","  df['short_ir_{}'.format(itv)] = np.where(close < open, (b1_low - close) / short_body_range, np.nan) # close < open & close < b1_low\n","  df['long_ir_{}'.format(itv)] = np.where(close > open, (close - b1_high) / long_body_range, np.nan) # close > open & close > b1_high\n","\n","  return"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"I1Vq_BiKpY3P"},"outputs":[],"source":["def imb_ratio_v3(df, itv):\n","\n","  itv_num = to_itvnum(itv)\n","\n","  # high = df['high_{}'.format(itv)].to_numpy()\n","  # low = df['low_{}'.format(itv)].to_numpy()\n","  # candle_range = high - low\n","\n","  close = df['close_{}'.format(itv)].to_numpy()\n","  open = df['open_{}'.format(itv)].to_numpy()\n","\n","  b1_close = df['close_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_open = df['open_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_high = df['high_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_low = df['low_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","  body_range = abs(close - open)\n","  b1_body_range = abs(b1_close - b1_open)\n","\n","  df['body_rel_ratio_{}'.format(itv)] = body_range / b1_body_range\n","\n","  short_body_ratio = np.where(close <= b1_low, body_range, b1_body_range)\n","  long_body_range = np.where(close >= b1_high, body_range, b1_body_range)\n","\n","  # 추후에 통계 측정해야함 -> bir 에 따른 개별 trader 의 epout / tpep 이라던가 => short 에 양봉은 취급안함 (why use np.nan)\n","  df['short_ir_{}'.format(itv)] = np.where(close < open, (b1_low - close) / body_range, np.nan) # close < open & close < b1_low\n","  df['long_ir_{}'.format(itv)] = np.where(close > open, (close - b1_high) / body_range, np.nan) # close > open & close > b1_high\n","\n","  return"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":372,"status":"ok","timestamp":1648807273349,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"mtnMUkhwkdrE","outputId":"b7cff2cd-63d3-4109-8753-d2192079e565"},"outputs":[{"data":{"text/plain":["index\n","2022-02-17 08:30:59.999         NaN\n","2022-02-17 08:31:59.999         NaN\n","2022-02-17 08:32:59.999         NaN\n","2022-02-17 08:33:59.999         NaN\n","2022-02-17 08:34:59.999         NaN\n","2022-02-17 08:35:59.999   -0.022654\n","2022-02-17 08:36:59.999   -0.022654\n","2022-02-17 08:37:59.999   -0.022654\n","2022-02-17 08:38:59.999   -0.022654\n","2022-02-17 08:39:59.999   -0.022654\n","2022-02-17 08:40:59.999    0.559585\n","2022-02-17 08:41:59.999    0.559585\n","2022-02-17 08:42:59.999    0.559585\n","2022-02-17 08:43:59.999    0.559585\n","2022-02-17 08:44:59.999    0.559585\n","2022-02-17 08:45:59.999    0.429719\n","2022-02-17 08:46:59.999    0.429719\n","2022-02-17 08:47:59.999    0.429719\n","2022-02-17 08:48:59.999    0.429719\n","2022-02-17 08:49:59.999    0.429719\n","Name: short_ir_5T, dtype: float64"]},"execution_count":116,"metadata":{},"output_type":"execute_result"}],"source":["imb_ratio(t_df, \"5T\")\n","# imb_ratio_v3(t_df, \"5T\")\n","# imb_ratio_v4(t_df, \"5T\")\n","\n","t_df.tail(100).short_ir_5T  # .461871\n","# t_df.iloc[:, -10:]\n","# t_df.dtypes"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":375,"status":"ok","timestamp":1648807284664,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"RVUs1YE_pgBI","outputId":"0ad635a5-e0b9-40c9-c28f-6ebae5494c7b"},"outputs":[{"data":{"text/plain":["index\n","2022-02-17 08:30:59.999         NaN\n","2022-02-17 08:31:59.999         NaN\n","2022-02-17 08:32:59.999         NaN\n","2022-02-17 08:33:59.999         NaN\n","2022-02-17 08:34:59.999         NaN\n","2022-02-17 08:35:59.999   -0.030303\n","2022-02-17 08:36:59.999   -0.030303\n","2022-02-17 08:37:59.999   -0.030303\n","2022-02-17 08:38:59.999   -0.030303\n","2022-02-17 08:39:59.999   -0.030303\n","2022-02-17 08:40:59.999    0.621583\n","2022-02-17 08:41:59.999    0.621583\n","2022-02-17 08:42:59.999    0.621583\n","2022-02-17 08:43:59.999    0.621583\n","2022-02-17 08:44:59.999    0.621583\n","2022-02-17 08:45:59.999    1.000000\n","2022-02-17 08:46:59.999    1.000000\n","2022-02-17 08:47:59.999    1.000000\n","2022-02-17 08:48:59.999    1.000000\n","2022-02-17 08:49:59.999    1.000000\n","Name: short_ir_5T, dtype: float64"]},"execution_count":117,"metadata":{},"output_type":"execute_result"}],"source":["# imb_ratio(t_df, \"5T\")\n","# imb_ratio_v3(t_df, \"5T\")\n","imb_ratio_v4(t_df, \"5T\")\n","\n","t_df.tail(100).short_ir_5T  # .461871\n","# t_df.iloc[:, -10:]\n","# t_df.dtypes"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"bieHiKjBkuFL"},"outputs":[],"source":["# ------ rtc 1, 0 개념 ------ #\n","# short_rtc_1 = close\n","# short_rtc_0 = b1_low\n","\n","# long_rtc_1 = close\n","# long_rtc_0 = b1_high\n","\n","# rtc 로 활용하려면, col 로 추가해야할 것 -> 추가할만한 col_name 은 아님\n","# 1. h_candle 인 경우 -> ?\n","#   a. h_candle_v3 먹이고, open_{}.shift(num_itv).to_numpy() 진행 -> ex. res_df['close_{}'.format(hc_itv)].shift(itv_num).to_numpy() "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3X6bMXJIjPYy"},"outputs":[],"source":["# 1. 현재 종가 - 이전 고가 = imb_range (long)\n","long_imb_range = t_df.close - t_df.high.shift(1)\n","# 2. 이전 저가 - 현재 종가 - imb_range (short)\n","short_imb_range = t_df.low.shift(1) - t_df.close"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"q1nEA19v7Qpj"},"outputs":[],"source":["from math import floor\n","\n","\n","def _calc_dev(base_price, price):\n","    return 100 * (price - base_price) / base_price\n","\n","\n","def zigzag(highs, lows, depth=10, dev_threshold=5):\n","    def pivots(src_raw, length, isHigh):\n","        src = list(reversed(src_raw))\n","        bar_index = list(range(len(src)))\n","        for start in range(0, len(src)):\n","            if start + 2 * length + 1 > len(src) - 1:\n","                return\n","            p = 0\n","            if length < len(src) - start:\n","                p = src[start + length]\n","            if length == 0:\n","                yield 0, p\n","            else:\n","                isFound = True\n","                for i in range(start, start + length):\n","                    if isHigh and src[i] > p:\n","                        isFound = False\n","                    if not isHigh and src[i] < p:\n","                        isFound = False\n","                for i in range(start + length + 1, start + 2 * length + 1):\n","                    if isHigh and src[i] >= p:\n","                        isFound = False\n","                    c = not isHigh and src[i] <= p\n","                    if c:\n","                        isFound = False\n","                if isFound:\n","                    yield (bar_index[start + length], p)\n","                else:\n","                    yield None, None\n","\n","    data_highs = [x for x in pivots(highs, floor(depth / 2), True) if x[0]]\n","    data_lows = [x for x in pivots(lows, floor(depth / 2), False) if x[0]]\n","\n","    raw_pairs = []\n","\n","    for i, (ind, p) in enumerate(data_highs):\n","        lows_d = sorted([(ind_l, p_l) for ind_l, p_l in data_lows if ind > ind_l], key=lambda x: x[0])\n","        if lows_d:\n","            lows = lows_d[-1]\n","\n","            if abs(_calc_dev(lows[1], p)) >= dev_threshold:\n","                raw_pairs.append(\n","                    ((ind, p),\n","                     (lows[0], lows[1]))\n","                )\n","\n","    result = []\n","\n","    for (i_h, p_h),(i_l, p_l) in raw_pairs:\n","        if not result:\n","            result.append(((i_h, p_h),(i_l, p_l)))\n","            continue\n","\n","        if i_l == result[-1][1][0]:\n","            if p_h > result[-1][0][1]:\n","                result = result[:-1]\n","            else:\n","                continue\n","\n","        result.append(((i_h, p_h),(i_l, p_l)))\n","\n","    return result\n","\n","# highs, lows = t_df.high.to_numpy(), t_df.low.to_numpy()\n","# zigzag(highs, lows, depth=5, dev_threshold=5)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fGlmdyb97j4Q"},"outputs":[],"source":["t_df = res_df_.iloc[-120:]\n","a_data = t_df.to_numpy()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ropzIp0wUPAA"},"outputs":[],"source":["# import plotly.express as px\n","# import plotly.graph_objects as go\n","\n","def get_dist_plot(c, v, kx, ky):\n","    fig = go.Figure()\n","    fig.add_trace(go.Histogram(name='Vol Profile', x=c, y=v, nbinsx=150, \n","                               histfunc='sum', histnorm='probability density',\n","                               marker_color='#B0C4DE'))\n","    fig.add_trace(go.Scatter(name='KDE', x=kx, y=ky, mode='lines', marker_color='#D2691E'))    \n","\n","    peaks,_ = signal.find_peaks(kdy)\n","    pkx = kdx[peaks]\n","    pky = kdy[peaks]\n","    pk_marker_args=dict(size=10, color='black')\n","    fig.add_trace(go.Scatter(name=\"Peaks\", x=pkx, y=pky, mode='markers', marker=pk_marker_args))\n","    fig.show()\n","\n","    return fig"]},{"cell_type":"markdown","metadata":{"id":"qsyPhNR8yP1c"},"source":["##### dump"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"M3OxtsKmEmjr"},"outputs":[],"source":["comp_col_list = res_df_.columns"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1649654863270,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"iuNX7A7MEnYk","outputId":"1f7a942f-b03e-46d4-904b-bac88624f2bb"},"outputs":[{"data":{"text/plain":["Index(['open', 'high', 'low', 'close', 'volume', 'dc_upper_5T', 'dc_lower_5T', 'dc_base_5T', 'dc_upper_15T', 'dc_lower_15T', 'dc_base_15T', 'bb_upper_5T', 'bb_lower_5T', 'bb_upper_15T', 'bb_lower_15T'], dtype='object')"]},"execution_count":102,"metadata":{},"output_type":"execute_result"}],"source":["comp_col_list"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"D3UNq1Y4Ef1V"},"outputs":[],"source":["db_res_df = res_df_.copy()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6tJ-B_GhEvHx"},"outputs":[],"source":["gap_df = res_df_[comp_col_list] - db_res_df"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":334,"status":"ok","timestamp":1649654897410,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"nEuH8TKrFA5J","outputId":"bb20a375-f7dd-439d-f10a-c7763766ff15"},"outputs":[{"data":{"text/plain":["open            0.000000e+00\n","high            0.000000e+00\n","low             0.000000e+00\n","close           0.000000e+00\n","volume          0.000000e+00\n","dc_upper_5T     0.000000e+00\n","dc_lower_5T     9.094947e-13\n","dc_base_5T      0.000000e+00\n","dc_upper_15T    0.000000e+00\n","dc_lower_15T    9.094947e-13\n","dc_base_15T     0.000000e+00\n","bb_upper_5T     0.000000e+00\n","bb_lower_5T     4.547474e-13\n","bb_upper_15T    0.000000e+00\n","bb_lower_15T    4.547474e-13\n","dtype: float64"]},"execution_count":106,"metadata":{},"output_type":"execute_result"}],"source":["gap_df.max() # .tail(1000)  # [gap_df > 0.1]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9VOxiJB1yUTI"},"outputs":[],"source":["\n","def fill_na(arr_, iin, iout, fill_value):\n","  arr_[iin:iout + 1] = fill_value\n","\n","  # 1. cross_point 찾기\n","  #   a. cross_over & cross_under\n","# def wave_range(t_df):\n","tf_entry = 'T'\n","tf_entry_num = to_itvnum(tf_entry)\n","base_shift_size = 3 # 3T used\n","\n","np_timeidx = np.array([intmin_np(date_) for date_ in t_df.index.to_numpy()])\n","\n","close = t_df.close.to_numpy()\n","b1_close = t_df.close.shift(tf_entry_num).to_numpy()  # 일단, 1 로 설정\n","dc_base_3T = t_df.dc_base_3T.to_numpy()\n","b1_dc_base_3T = t_df.dc_base_3T.shift(3).to_numpy()\n","\n","crossover = (close > dc_base_3T) & (b1_dc_base_3T > b1_close) & (np_timeidx % tf_entry_num == tf_entry_num - 1)\n","crossunder = (close < dc_base_3T) & (b1_dc_base_3T < b1_close) & (np_timeidx % tf_entry_num == tf_entry_num - 1)\n","\n","# 1. crossover ~ crossunder's high (over 과 under 의 index 포함해야함)\n","# 2. crossunder ~ crossover's low\n","high = t_df.high.to_numpy()\n","low = t_df.low.to_numpy()\n","\n","# print(np.sum(crossover))\n","# print(np.sum(crossunder))\n","\n","# pairing -> 더 긴 배열의 시작 index 가 더 작음\n","co_idx = np.argwhere(crossover)\n","cu_idx = np.argwhere(crossunder)\n","\n","print(co_idx)\n","print(cu_idx)\n","\n","# 2. 길이가 다른 경우\n","#  a. 길이가 긴 쪽이 먼저\n","if len(co_idx) > len(cu_idx):\n","  upper_zone = np.hstack((co_idx[:-1], cu_idx))  \n","  lower_zone = np.hstack((cu_idx, co_idx[1:]))  \n","elif len(co_idx) < len(cu_idx):\n","  upper_zone = np.hstack((co_idx, cu_idx[1:]))  \n","  lower_zone = np.hstack((cu_idx[:-1], co_idx))  \n","else:\n","  # 1. 길이가 같은 경우\n","  #   뭐가 먼저인지 판단하는 logic\n","  if co_idx[0] < cu_idx[0]:\n","    #   a. co 가 먼저인 경우\n","    upper_zone = np.hstack((co_idx, cu_idx))  \n","    lower_zone = np.hstack((cu_idx[:-1], co_idx[1:]))  \n","  else:\n","    #   b. cu 가 먼저인 경우\n","    upper_zone = np.hstack((co_idx[:-1], cu_idx[1:]))  \n","    lower_zone = np.hstack((cu_idx, co_idx))  \n","\n","# print(upper_zone)\n","# print(lower_zone)\n","\n","# make envelope\n","wave_high = np.full_like(high, np.nan)\n","wave_low = np.full_like(low, np.nan)\n","\n","fill_upper_zone = np.hstack((upper_zone[:-1, [1]], upper_zone[1:, [1]]))\n","fill_lower_zone = np.hstack((lower_zone[:-1, [1]], lower_zone[1:, [1]]))\n","\n","for items in zip(fill_upper_zone, upper_zone):\n","  print(items)\n","\n","[fill_na(wave_high, f_iin, f_iout, high[iin:iout + 1].max()) for (f_iin, f_iout), (iin, iout) in zip(fill_upper_zone, upper_zone)]\n","[fill_na(wave_low, f_iin, f_iout, low[iin:iout + 1].min()) for (f_iin, f_iout), (iin, iout) in zip(fill_lower_zone, lower_zone)]\n","# [high[iin:iout + 1].max() for iin, iout in upper_zone]\n","# [low[iin:iout + 1].min() for iin, iout in lower_zone]\n","\n","# t_df['fill_wave_high'] = pd.Series(wave_high).bfill().to_numpy()\n","# t_df['fill_wave_low'] = pd.Series(wave_low).bfill().to_numpy()\n","# t_df['fill_wave_high'] = pd.Series(wave_high).ffill().to_numpy()\n","# t_df['fill_wave_low'] = pd.Series(wave_low).ffill().to_numpy()\n","t_df['fill_wave_high'] = wave_high\n","t_df['fill_wave_low'] = wave_low\n","\n","  # return "]},{"cell_type":"markdown","metadata":{"id":"xpyP5t8Ht_pE"},"source":["### calc recursive indi's min_period"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"N1Hbm4OA4Tkk"},"outputs":[],"source":["ticker_prcn = get_precision_by_price(res_df.close.iloc[-1]) + 2\n","\n","target_len = 300000\n","slice_len_list = list(range(50, 10000, 100))\n","slice_len_list.insert(0, target_len)\n","\n","start_0 = time.time()\n","# prev_int_, prev_pnts_ = None, None\n","offset = 1\n","\n","for sl_idx, sample_len in enumerate(slice_len_list):\n","\n","  sample_df = res_df.iloc[-sample_len -offset:-offset]\n","  sample_len2 = sample_len\n","\n","  # --------- input using indi.s --------- #\n","  # res = ema_v0(sample_df['close'], 190)\n","  res = rsi(sample_df, 14)\n","\n","    #    to_htf()    #\n","  # df_5T = to_htf(sample_df, itv_='5T', offset='1h')\n","  # sample_len2 = len(df_5T)\n","\n","  # # --------- input using htf_indi. --------- #\n","  # res = ema(df_5T['close'], 195)\n","  # -------------------------------------- #\n","\n","  res_last_row = res.iloc[-1]\n","  if pd.isnull(res_last_row):\n","    continue\n","\n","  # print(res_last_row)\n","  # break\n","\n","  # sample_df = sample_df.join(to_lower_tf_v2(sample_df, df_5T, [-1]), how='inner')\n","\n","\n","  #   자리수 분할 계산    #\n","  int_, points_ = str(res_last_row).split('.')\n","  pnts_ = points_[:ticker_prcn]\n","\n","  if sl_idx == 0:\n","    target_int_ = int_\n","    target_pnts_ = pnts_\n","    print(\"target {} ({}) -> {} {}\".format(sample_len, sample_len2, int_, points_))\n","\n","  else:\n","    if target_int_ == int_ and target_pnts_ == pnts_:\n","      # print(sample_len, \"({})\".format(sample_len2), '->', int_, pnts_, end='\\n\\n')\n","      print(\"{} ({}) -> {} {}\\n\".format(sample_len, sample_len2, int_, points_))\n","      break\n","\n","print(time.time() - start_0)  # (1301)(1361)(1301)"]},{"cell_type":"markdown","metadata":{"id":"rrIGjmUzqU-D"},"source":["## import utils & config"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"SeJan_0t95yL","executionInfo":{"status":"ok","timestamp":1650587632795,"user_tz":-540,"elapsed":2307,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["frame_ver = \"0114_htf\"\n","ID_arr = np.array(['v3', 'v5_2'])\n","\n","utils_public_name = \"{}.utils.{}_utils_public\".format(strat_pkg, frame_ver)\n","utils_public_lib = importlib.import_module(utils_public_name)\n","utils_public = utils_public_lib   # temporary\n","\n","u_name_list = [\"{}.utils.{}_utils_{}\".format(strat_pkg, frame_ver, id_) for id_ in ID_arr]\n","utils_arr = np.array([importlib.import_module(u_name) for u_name in u_name_list])\n","\n","config_name_list = [\"{}_config_{}.json\".format(frame_ver, id_) for id_ in ID_arr]\n","cfg_path_list = [os.path.join(current_path, strat_pkg, \"config\", name_) for name_ in config_name_list]\n","cfg_file_list = [open(cfg_path) for cfg_path in cfg_path_list]\n","config_arr = np.array([EasyDict(json.load(cfg_)) for cfg_ in cfg_file_list])\n","\n","# ------ opened files should be closed --> 닫지 않으면 reopen 시 error occurs ------ #\n","_ = [cfg_.close() for cfg_ in cfg_file_list]\n","show_plot = 1   # idep's var - do not touch"]},{"cell_type":"markdown","metadata":{"id":"leSQlImg4_9L"},"source":["### utils_"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"CB2yZdQ95Cdg","executionInfo":{"status":"ok","timestamp":1650587634820,"user_tz":-540,"elapsed":2030,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# import pandas as pd\n","# import numpy as np\n","# import logging\n","\n","sys_log = logging.getLogger()\n","\n","def get_line(touch_idx, rtc_):\n","    touch_idx_copy = touch_idx.copy()\n","\n","    nan_idx = np.isnan(touch_idx_copy)\n","    touch_idx_copy[nan_idx] = 0  # for indexing array\n","    touch_line = rtc_[touch_idx_copy.astype(int)].copy()\n","    touch_line[nan_idx] = np.nan  # for true comp.\n","\n","    return touch_line\n","\n","\n","def enlist_rtc(res_df, config, np_timeidx):\n","    selection_id = config.selection_id\n","    # ------------ rtc_gap ------------ #\n","    short_epout_1_, long_epout_1_ = 'short_epout_1_{}'.format(selection_id), 'long_epout_1_{}'.format(selection_id)\n","    short_epout_0_, long_epout_0_ = 'short_epout_0_{}'.format(selection_id), 'long_epout_0_{}'.format(selection_id)\n","    short_tp_1_, long_tp_1_ = 'short_tp_1_{}'.format(selection_id), 'long_tp_1_{}'.format(selection_id)\n","    short_tp_0_, long_tp_0_ = 'short_tp_0_{}'.format(selection_id), 'long_tp_0_{}'.format(selection_id)\n","\n","    # b1_itv_num = to_itvnum(config.loc_set.point.p2_itv0)\n","    # b2_itv_num = to_itvnum(config.loc_set.point.p2_itv0) * 2  # multi 2 for imb_v2\n","\n","    p1_period1 = config.loc_set.point.p1_period1\n","    p1_period2 = config.loc_set.point.p1_period2\n","    res_df[short_tp_1_] = res_df['dc_lower_{}{}'.format(config.loc_set.point.p1_itv1, p1_period1)]\n","    res_df[short_tp_0_] = res_df['dc_upper_{}{}'.format(config.loc_set.point.p1_itv0, p1_period2)]\n","    res_df[long_tp_1_] = res_df['dc_upper_{}{}'.format(config.loc_set.point.p1_itv1, p1_period1)]\n","    res_df[long_tp_0_] = res_df['dc_lower_{}{}'.format(config.loc_set.point.p1_itv0, p1_period2)]\n","\n","    if config.loc_set.point.p2_itv1 != \"None\":\n","        p2_period1 = config.loc_set.point.p2_period1\n","        p2_period2 = config.loc_set.point.p2_period2\n","        res_df[short_epout_1_] = res_df['dc_lower_{}{}'.format(config.loc_set.point.p2_itv1, p2_period1)]\n","        res_df[short_epout_0_] = res_df['dc_upper_{}{}'.format(config.loc_set.point.p2_itv0, p2_period2)]\n","        res_df[long_epout_1_] = res_df['dc_upper_{}{}'.format(config.loc_set.point.p2_itv1, p2_period1)]\n","        res_df[long_epout_0_] = res_df['dc_lower_{}{}'.format(config.loc_set.point.p2_itv0, p2_period2)]\n","    else:\n","        res_df[short_epout_1_] = res_df['dc_lower_{}{}'.format(config.loc_set.point.p1_itv1, p1_period1)]\n","        res_df[short_epout_0_] = res_df['dc_upper_{}{}'.format(config.loc_set.point.p1_itv0, p1_period2)]\n","        res_df[long_epout_1_] = res_df['dc_upper_{}{}'.format(config.loc_set.point.p1_itv1, p1_period1)]\n","        res_df[long_epout_0_] = res_df['dc_lower_{}{}'.format(config.loc_set.point.p1_itv0, p1_period2)]\n","\n","    # ------ inversion ------ #\n","    if config.pos_set.short_inversion or config.pos_set.long_inversion:\n","        res_df.rename({short_tp_1_: long_tp_1_, long_tp_1_: short_tp_1_}, axis=1, inplace=True)\n","        res_df.rename({short_tp_0_: long_tp_0_, long_tp_0_: short_tp_0_}, axis=1, inplace=True)\n","        res_df.rename({short_epout_1_: long_epout_1_, long_epout_1_: short_epout_1_}, axis=1, inplace=True)\n","        res_df.rename({short_epout_0_: long_epout_0_, long_epout_0_: short_epout_0_}, axis=1, inplace=True)\n","\n","    res_df['short_tp_gap_{}'.format(selection_id)] = abs(res_df[short_tp_1_] - res_df[short_tp_0_])\n","    res_df['long_tp_gap_{}'.format(selection_id)] = abs(res_df[long_tp_1_] - res_df[long_tp_0_])\n","    res_df['short_epout_gap_{}'.format(selection_id)] = abs(res_df[short_epout_1_] - res_df[short_epout_0_])\n","    res_df['long_epout_gap_{}'.format(selection_id)] = abs(res_df[long_epout_1_] - res_df[long_epout_0_])\n","\n","    # ------------ dtk_gap ------------ #\n","    # res_df['short_dtk_1_{}'.format(selection_id)] = res_df['bb_lower_%s' % config.loc_set.zone.dtk_itv]\n","    # res_df['short_dtk_0_{}'.format(selection_id)] = res_df['dc_upper_%s' % config.loc_set.zone.dtk_itv]\n","    # res_df['long_dtk_1_{}'.format(selection_id)] = res_df['bb_upper_%s' % config.loc_set.zone.dtk_itv]\n","    # res_df['long_dtk_0_{}'.format(selection_id)] = res_df['dc_lower_%s' % config.loc_set.zone.dtk_itv]\n","\n","    # res_df['short_dtk_gap_{}'.format(selection_id)] = abs(\n","    #     res_df['short_dtk_0_{}'.format(selection_id)] - res_df['short_dtk_1_{}'.format(selection_id)])\n","    # res_df['long_dtk_gap_{}'.format(selection_id)] = abs(\n","    #     res_df['long_dtk_1_{}'.format(selection_id)] - res_df['long_dtk_0_{}'.format(selection_id)])\n","\n","    return res_df\n","\n","\n","def enlist_tr(res_df, config, np_timeidx, mode='OPEN', show_detail=True):\n","    selection_id = config.selection_id\n","    len_df = len(res_df)\n","    short_open_res = np.ones(len_df)\n","    long_open_res = np.ones(len_df)\n","\n","    short_tp_1_col, short_tp_0_col, short_tp_gap_col = 'short_tp_1_{}'.format(selection_id), 'short_tp_0_{}'.format(\n","        selection_id), 'short_tp_gap_{}'.format(selection_id)\n","    long_tp_1_col, long_tp_0_col, long_tp_gap_col = 'long_tp_1_{}'.format(selection_id), 'long_tp_0_{}'.format(\n","        selection_id), 'long_tp_gap_{}'.format(selection_id)\n","    short_epout_1_col, short_epout_0_col, short_epout_gap_col = 'short_epout_1_{}'.format(selection_id), 'short_epout_0_{}'.format(\n","        selection_id), 'short_epout_gap_{}'.format(selection_id)\n","    long_epout_1_col, long_epout_0_col, long_epout_gap_col = 'long_epout_1_{}'.format(selection_id), 'long_epout_0_{}'.format(\n","        selection_id), 'long_epout_gap_{}'.format(selection_id)\n","\n","    tp_cols = [short_tp_1_col, short_tp_0_col, short_tp_gap_col, long_tp_1_col, long_tp_0_col, long_tp_gap_col]  # Todo - public_indi 이전에 해야할지도 모름\n","    epout_cols = [short_epout_1_col, short_epout_0_col, short_epout_gap_col, long_epout_1_col, long_epout_0_col,\n","                  long_epout_gap_col]  # Todo - public_indi 이전에 해야할지도 모름\n","    data_cols = ['open', 'high', 'low', 'close']  # Todo - public_indi 이전에 해야할지도 모름 # 'close', 'haopen', 'hahigh', 'halow', 'haclose'\n","\n","    short_tp_1_, short_tp_0_, short_tp_gap_, long_tp_1_, long_tp_0_, long_tp_gap_ = [res_df[col_].to_numpy() for col_ in tp_cols]\n","    short_epout_1_, short_epout_0_, short_epout_gap_, long_epout_1_, long_epout_0_, long_epout_gap_ = [res_df[col_].to_numpy() for col_ in epout_cols]\n","    open, high, low, close = [res_df[col_].to_numpy() for col_ in data_cols]\n","\n","    # ---------------- point - support_confirmer---------------- #\n","    point1_to2_period = 60\n","    p1_itv1 = config.loc_set.point.p1_itv1\n","    p1_period1 = config.loc_set.point.p1_period1\n","    p1_period2 = config.loc_set.point.p1_period2\n","    p2_itv1 = config.loc_set.point.p2_itv1\n","    p2_period1 = config.loc_set.point.p2_period1\n","    p2_period2 = config.loc_set.point.p2_period2\n","\n","    if p2_itv1 != \"None\":\n","        short_point1_on2_idx = pd.Series(\n","            np.where(res_df['short_wave_point_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)], np.arange(len_df), np.nan)).rolling(point1_to2_period,\n","                                                                                                                                    min_periods=1).max().to_numpy()  # period 내의 max_point1_idx\n","        long_point1_on2_idx = pd.Series(\n","            np.where(res_df['long_wave_point_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)], np.arange(len_df), np.nan)).rolling(point1_to2_period,\n","                                                                                                                                   min_periods=1).max().to_numpy()\n","\n","        short_point2_idx = pd.Series(\n","            np.where(res_df['short_wave_point_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)], np.arange(len_df), np.nan)).to_numpy()\n","        long_point2_idx = pd.Series(\n","            np.where(res_df['long_wave_point_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)], np.arange(len_df), np.nan)).to_numpy()\n","\n","        res_df['short_point_idxgap_{}'.format(selection_id)] = short_point2_idx - short_point1_on2_idx\n","        res_df['long_point_idxgap_{}'.format(selection_id)] = long_point2_idx - long_point1_on2_idx\n","\n","        # ------ p1 & p2 ------ #\n","        short_open_res *= ~np.isnan(res_df['short_point_idxgap_{}'.format(selection_id)].to_numpy())\n","        long_open_res *= ~np.isnan(res_df['long_point_idxgap_{}'.format(selection_id)].to_numpy())\n","\n","        if show_detail:\n","          sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","          sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ p2 amax > p1_idx (long) ------ #\n","        short_open_res *= res_df['short_upper_touch_idx_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)].to_numpy() > short_point1_on2_idx\n","        long_open_res *= res_df['long_lower_touch_idx_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)].to_numpy() > long_point1_on2_idx\n","\n","        if show_detail:\n","          sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","          sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ higher low (long) ------ #\n","        # short_a_line1_on2_ = get_line(short_point1_on2_idx, res_df['short_a_line_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy())\n","        # long_a_line1_on2_ = get_line(long_point1_on2_idx, res_df['long_a_line_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy())\n","\n","        # short_a_line2_ = res_df['short_a_line_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)].to_numpy()\n","        # long_a_line2_ = res_df['long_a_line_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)].to_numpy()\n","\n","        # short_open_res *= short_a_line1_on2_ >= short_a_line2_\n","        # long_open_res *= long_a_line1_on2_ <= long_a_line2_\n","\n","        # print(np.sum(long_open_res == 1))\n","\n","    else:  \n","        # ------ p1 only ------ #\n","        res_df['short_point_idxgap_{}'.format(selection_id)] = 0  # default\n","        res_df['long_point_idxgap_{}'.format(selection_id)] = 0\n","\n","        # ------ lower_touch > upper_touch (long) ------ #\n","        # short_open_res *= res_df['short_upper_touch_idx_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy() > res_df['short_lower_touch_idx_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy()\n","        # long_open_res *= res_df['long_lower_touch_idx_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy() > res_df['long_upper_touch_idx_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy()\n","\n","        # # ------ base_3T cross ------ #\n","        # dc_base_3T = res_df['dc_base_3T'].to_numpy()\n","        # b1_close = res_df['close'].shift(1).to_numpy()\n","        # short_open_res *= (b1_close > dc_base_3T) & (dc_base_3T > close)\n","        # long_open_res *= (b1_close < dc_base_3T) & (dc_base_3T < close)\n","\n","        # # ------ lower_touch_line < base_5T (long) ------ #\n","        # dc_base_5T = res_df['dc_base_5T'].to_numpy()        \n","        # short_open_res *= res_df['short_upper_touch_line_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy() > dc_base_5T\n","        # long_open_res *= res_df['long_lower_touch_line_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy() < dc_base_5T\n","                    \n","        touch_period = 50\n","        dc_lower_ = res_df['dc_lower_{}{}'.format(p1_itv1, p1_period1)].to_numpy()\n","        dc_upper_ = res_df['dc_upper_{}{}'.format(p1_itv1, p1_period1)].to_numpy()\n","        bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","        bb_upper_5T = res_df['bb_upper_5T'].to_numpy()\n","        bb_range = bb_upper_5T - bb_lower_5T\n","        \n","        short_upper_touch_idx = pd.Series(np.where(high >= dc_upper_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()\n","        res_df['short_orr_{}'.format(selection_id)] = get_line(short_upper_touch_idx, bb_range) / res_df['short_tp_gap_{}'.format(selection_id)].to_numpy()\n","\n","        long_lower_touch_idx = pd.Series(np.where(low <= dc_lower_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()\n","        res_df['long_orr_{}'.format(selection_id)] = get_line(long_lower_touch_idx, bb_range) / res_df['long_tp_gap_{}'.format(selection_id)].to_numpy()\n","        \n","        # ------ wave_point ------ #\n","        short_open_res *= res_df['short_wave_point_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy().astype(bool)\n","        long_open_res *= res_df['long_wave_point_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy().astype(bool)\n","\n","        if show_detail:\n","          sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","          sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","    res_df['short_open_{}'.format(selection_id)] = short_open_res\n","    res_df['long_open_{}'.format(selection_id)] = long_open_res\n","\n","    # ------------------ tr_set ------------------ #\n","    # ------------ tpep ------------ #\n","    tpg = config.tr_set.tp_gap\n","    res_df['short_tp_{}'.format(selection_id)] = short_tp_1_ - short_tp_gap_ * tpg\n","    res_df['long_tp_{}'.format(selection_id)] = long_tp_1_ + long_tp_gap_ * tpg\n","\n","    # ------ limit_ep ------ #\n","    if config.ep_set.entry_type == \"LIMIT\":\n","        epg = -0.5 + config.tr_set.ep_gap\n","        res_df['short_ep_{}'.format(selection_id)] = short_epout_0_ + short_epout_gap_ * epg\n","        res_df['long_ep_{}'.format(selection_id)] = long_epout_0_ - long_epout_gap_ * epg\n","\n","    # ------ market_ep ------ #\n","    else:\n","        res_df['short_ep_{}'.format(selection_id)] = res_df['close']\n","        res_df['long_ep_{}'.format(selection_id)] = res_df['close']\n","\n","    # ------------ out ------------ #\n","    outg = config.tr_set.out_gap\n","    res_df['short_out_{}'.format(selection_id)] = short_epout_0_ + short_epout_gap_ * outg\n","    res_df['long_out_{}'.format(selection_id)] = long_epout_0_ - long_epout_gap_ * outg\n","\n","    # ------------ point validation ------------ #\n","    short_tp_ = res_df['short_tp_{}'.format(selection_id)].to_numpy()\n","    short_ep_ = res_df['short_ep_{}'.format(selection_id)].to_numpy()\n","    short_out_ = res_df['short_out_{}'.format(selection_id)].to_numpy()\n","    short_open_res *= (short_tp_ < short_ep_) & (short_ep_ < short_out_)\n","    res_df['short_open_{}'.format(selection_id)] = short_open_res * (not config.pos_set.short_ban)\n","\n","    long_tp_ = res_df['long_tp_{}'.format(selection_id)].to_numpy()\n","    long_ep_ = res_df['long_ep_{}'.format(selection_id)].to_numpy()\n","    long_out_ = res_df['long_out_{}'.format(selection_id)].to_numpy()\n","    long_open_res *= (long_tp_ > long_ep_) & (long_ep_ > long_out_)\n","    res_df['long_open_{}'.format(selection_id)] = long_open_res * (not config.pos_set.long_ban)\n","\n","    if show_detail:\n","      sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","      sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","    # ------ tr ------ #\n","    res_df['short_tr_{}'.format(selection_id)] = abs(\n","        (short_ep_ / short_tp_ - config.trader_set.limit_fee - 1) / (short_ep_ / short_out_ - config.trader_set.market_fee - 1))\n","    res_df['long_tr_{}'.format(selection_id)] = abs(\n","        (long_tp_ / long_ep_ - config.trader_set.limit_fee - 1) / (long_out_ / long_ep_ - config.trader_set.market_fee - 1))\n","\n","    # ------ zoned_ep ------ #\n","    if config.tr_set.c_ep_gap != \"None\":\n","        # res_df['short_ep_org_{}'.format(selection_id)] = res_df['short_ep_{}'.format(selection_id)].copy()\n","        # res_df['long_ep_org_{}'.format(selection_id)] = res_df['long_ep_{}'.format(selection_id)].copy()\n","        res_df['short_ep2_{}'.format(selection_id)] = short_epout_1_ + short_epout_gap_ * config.tr_set.c_ep_gap\n","        res_df['long_ep2_{}'.format(selection_id)] = long_epout_1_ - long_epout_gap_ * config.tr_set.c_ep_gap\n","\n","    # ------ zoned_out ------ #\n","    if config.tr_set.t_out_gap != \"None\":\n","        # res_df['short_out_org_{}'.format(selection_id)] = res_df['short_out_{}'.format(selection_id)].copy()\n","        # res_df['long_out_org_{}'.format(selection_id)] = res_df['long_out_{}'.format(selection_id)].copy()\n","        res_df['short_out2_{}'.format(selection_id)] = res_df['short_epout_0_{}'.format(selection_id)] + res_df[\n","            'short_epout_gap_{}'.format(selection_id)] * config.tr_set.t_out_gap\n","        res_df['long_out2_{}'.format(selection_id)] = res_df['long_epout_0_{}'.format(selection_id)] - res_df[\n","            'long_epout_gap_{}'.format(selection_id)] * config.tr_set.t_out_gap\n","\n","    # ------------ bias ------------ #  Todo - 추후, bias_set 독립시키는게 좋지 않을까\n","    bias_info_tick = config.tr_set.bias_info_tick\n","    # ------ bias_info can use future_data ------ #\n","    # res_df['short_bias_info_{}'.format(selection_id)] = res_df['dc_lower_T'].shift(-bias_info_tick)  # open / ep_tick 으로부터 bias_info_tick 만큼\n","    # res_df['long_bias_info_{}'.format(selection_id)] = res_df['dc_upper_T'].shift(-bias_info_tick)\n","    res_df['short_bias_info_{}'.format(selection_id)] = res_df['low'].rolling(bias_info_tick).min().shift(-bias_info_tick)\n","    res_df['long_bias_info_{}'.format(selection_id)] = res_df['high'].rolling(bias_info_tick).max().shift(-bias_info_tick)\n","\n","    # bias_thresh 는 결국 tp 가 될 것\n","    res_df['short_bias_thresh_{}'.format(selection_id)] = res_df['short_tp_{}'.format(selection_id)]\n","    res_df['long_bias_thresh_{}'.format(selection_id)] = res_df['long_tp_{}'.format(selection_id)]\n","    # res_df['short_bias_thresh_{}'.format(selection_id)] = res_df['dc_lower_T'] - res_df['short_tp_gap_{}'.format(selection_id)] * config.tr_set.bias_gap\n","    # res_df['long_bias_thresh_{}'.format(selection_id)] = res_df['dc_upper_T'] + res_df['long_tp_gap_{}'.format(selection_id)] * config.tr_set.bias_gap\n","\n","    return res_df\n"]},{"cell_type":"markdown","metadata":{"id":"HKdUKKl-483N"},"source":["### utils_public"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"nzOYWA2kqZ0d","executionInfo":{"status":"ok","timestamp":1650587639577,"user_tz":-540,"elapsed":4761,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["from funcs.funcs_indicator import *\n","from funcs.funcs_trader import *\n","import logging\n","from ast import literal_eval\n","\n","pd.set_option('mode.chained_assignment',  None)\n","sys_log = logging.getLogger()\n","\n","\n","class OrderSide:\n","    BUY = \"BUY\"\n","    SELL = \"SELL\"\n","    INVALID = None\n","\n","\n","def lvrg_set(res_df, config, open_side, ep_, out_, fee, limit_leverage=50):\n","    selection_id = config.selection_id\n","    if not pd.isnull(out_) and not config.lvrg_set.static_lvrg:\n","        if selection_id in ['v3']:\n","            if open_side == OrderSide.SELL:\n","                loss = out_ / ep_\n","            else:\n","                loss = ep_ / out_\n","        else:  # 이 phase 가 정석, 윗 phase 는 결과가 수익 극대화라 사용함\n","            if open_side == OrderSide.SELL:\n","                loss = ep_ / out_\n","            else:\n","                loss = out_ / ep_\n","\n","        config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(loss - 1 - (fee + config.trader_set.market_fee))\n","\n","    # ------------ leverage rejection ------------ #\n","    # 감당하기 힘든 fluc. 의 경우 진입하지 않음 - dynamic_lvrg 사용 경우\n","    if config.lvrg_set.leverage < 1 and config.lvrg_set.lvrg_rejection:\n","        # if config.lvrg_set.leverage >= 1 and config.lvrg_set.lvrg_rejection:\n","        return None\n","\n","    if not config.lvrg_set.allow_float:\n","        config.lvrg_set.leverage = int(config.lvrg_set.leverage)\n","\n","    config.lvrg_set.leverage = min(limit_leverage, max(config.lvrg_set.leverage, 1))\n","\n","    return config.lvrg_set.leverage\n","\n","\n","def sync_check(df_, config, order_side=\"OPEN\", row_slice=True):\n","    try:\n","        make_itv_list = [m_itv.replace('m', 'T') for m_itv in literal_eval(config.trader_set.itv_list)]\n","        row_list = literal_eval(config.trader_set.row_list)\n","        rec_row_list = literal_eval(config.trader_set.rec_row_list)\n","        offset_list = literal_eval(config.trader_set.offset_list)\n","\n","        assert len(make_itv_list) == len(offset_list), \"length of itv & offset_list should be equal\"\n","        htf_df_list = [to_htf(df_, itv_=itv_, offset=offset_) for itv_idx, (itv_, offset_)\n","                       in enumerate(zip(make_itv_list, offset_list)) if itv_idx != 0]  #\n","        htf_df_list.insert(0, df_)\n","\n","        # for htf_df_ in htf_df_list:\n","        #     print(htf_df_.tail())\n","\n","        #       Todo        #\n","        #        1. row_list calc.\n","        #           a. indi. 를 만들기 위한 최소 period 가 존재하고, 그 indi. 를 사용한 lb_period 가 존재함\n","        #           b. => default_period + lb_period\n","        #               i. from sync_check, public_indi, ep_point2, ep_dur 의 tf 별 max lb_period check\n","        #                   1. default_period + max lb_period check\n","        #                       a. 현재까지 lb_period_list\n","        #                           h_prev_idx (open / close) 60\n","        #                           dc_period 135\n","        #                           zone_dc_period 135\n","\n","        # --------- slicing (in trader phase only) --------- #\n","        #               --> latency 영향도가 높은 곳은 이곳\n","        if row_slice:  # recursive 가 아닌 indi. 의 latency 를 고려한 slicing\n","            df, df_3T, df_5T, df_15T, df_30T, df_H, df_4H = [df_s.iloc[-row_list[row_idx]:].copy() for row_idx, df_s in enumerate(htf_df_list)]\n","            rec_df, rec_df_3T, rec_df_5T, rec_df_15T, rec_df_30T, rec_df_H, rec_df_4H = [df_s.iloc[-rec_row_list[row_idx]:].copy() for row_idx, df_s\n","                                                                                         in\n","                                                                                         enumerate(htf_df_list)]\n","        else:\n","            df, df_3T, df_5T, df_15T, df_30T, df_H, df_4H = htf_df_list\n","            rec_df, rec_df_3T, rec_df_5T, rec_df_15T, rec_df_30T, rec_df_H, rec_df_4H = htf_df_list\n","\n","        # --------- add indi. --------- #\n","\n","        #        1. 필요한 indi. 는 enlist_epouttp & mr_check 보면서 삽입\n","        #        2. min use_rows 계산을 위해서, tf 별로 gathering 함        #\n","        # start_0 = time.time()\n","\n","        # ------ T ------ #\n","        # df = dc_line(df, None, 'T', dc_period=20)\n","        # df = bb_line(df, None, 'T')\n","        #\n","        # ------ 3T ------ #\n","        # df = dc_line(df, df_3T, '3T')\n","\n","        # ------ 5T ------ #\n","        df = dc_line(df, df_5T, '5T')\n","        df = bb_line(df, df_5T, '5T')\n","        #\n","        # ------ 15T ------ #\n","        df = dc_line(df, df_15T, '15T')\n","        df = bb_line(df, df_15T, '15T')\n","        #\n","        # ------ 30T ------ #\n","        # df = bb_line(df, df_30T, '30T')\n","        #\n","        # ------ H ------ #\n","        # df = dc_line(df, df_H, 'H')\n","\n","        # ------ 4H ------ #\n","        # df = bb_line(df, df_4H, '4H')\n","\n","        # rec_df['rsi_1m'] = rsi(rec_df, 14)  # Todo - recursive, 250 period\n","        # df = df.join(to_lower_tf_v2(df, rec_df.iloc[:, [-1]], [-1], backing_i=0), how='inner')  # <-- join same_tf manual\n","        #\n","        # if order_side in [\"OPEN\"]:\n","        #     rec_df_5T['ema_5T'] = ema(rec_df_5T['close'], 195)  # Todo - recursive, 1100 period (5T)\n","        #     df = df.join(to_lower_tf_v2(df, rec_df_5T, [-1]), how='inner')\n","\n","    except Exception as e:\n","        sys_log.error(\"error in sync_check :\", e)\n","    else:\n","        return df\n","\n","\n","def public_indi(res_df, config, np_timeidx, order_side=\"OPEN\"):\n","    selection_id = config.selection_id\n","\n","    res_df = wave_range_v7(res_df, config.loc_set.point.p1_period1, config.loc_set.point.p1_period2, ltf_df=None, touch_period=50)\n","    if config.loc_set.point.p2_itv1 != \"None\":\n","        res_df = wave_range_v7(res_df, config.loc_set.point.p2_period1, config.loc_set.point.p2_period2, ltf_df=None, touch_period=50)\n","\n","    res_df = dc_level(res_df, '5T', 1)\n","    res_df = bb_level(res_df, '5T', 1)\n","\n","    # res_df = st_level(res_df, '5T', 1)\n","\n","    # res_df = dc_level(res_df, '15T', 1)\n","    # res_df = bb_level(res_df, '15T', 1)\n","    # res_df = dtk_plot(res_df, dtk_itv2='15T', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line, np_timeidx=np_timeidx)\n","\n","    # res_df = st_level(res_df, '15T', 1)\n","\n","    # res_df = dc_level(res_df, '30T', 1)\n","    # res_df = bb_level(res_df, '30T', 1)\n","    # res_df = st_level(res_df, '30T', 1)\n","\n","    # res_df = bb_level(res_df, 'H', 1)\n","\n","    # res_df = bb_level(res_df, '4H', 1)\n","\n","    # res_df['dc_upper_v2'.format(selection_id)] = res_df['high'].rolling(config.loc_set.zone.dc_period).max()   # Todo, consider dc_period\n","    # res_df['dc_lower_v2'.format(selection_id)] = res_df['low'].rolling(config.loc_set.zone.dc_period).min()\n","\n","    # res_df['zone_dc_upper_v2'.format(selection_id)] = res_df['high'].rolling(config.loc_set.zone.zone_dc_period).max()   # Todo, consider zone_dc_period\n","    # res_df['zone_dc_lower_v2'.format(selection_id)] = res_df['low'].rolling(config.loc_set.zone.zone_dc_period).min()\n","\n","    if order_side in [\"OPEN\"]:\n","        h_candle_v3(res_df, '5T')\n","        h_candle_v3(res_df, '15T')\n","        h_candle_v3(res_df, 'H')\n","\n","        # candle_score_v3(res_df, 'T', unsigned=False)\n","        candle_score_v3(res_df, config.loc_set.point.exp_itv, unsigned=False)\n","\n","    #     temp indi.    #\n","    # res_df[\"ma30_1m\"] = res_df['close'].rolling(30).mean()\n","    # res_df[\"ma60_1m\"] = res_df['close'].rolling(60).mean()\n","    # res_df = dtk_plot(res_df, dtk_itv2='15T', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line, np_timeidx=np_timeidx)\n","\n","    return res_df\n","\n","\n","def ep_out_v0(res_df, config, op_idx, e_j, tp_j, np_datas, open_side):\n","    h, l = np_datas\n","    selection_id = config.selection_id\n","    ep_out = 0\n","\n","    if config.loc_set.zone.ep_out_tick != \"None\":\n","        if e_j - op_idx >= config.loc_set.zone.ep_out_tick:\n","            ep_out = 1\n","\n","    if config.loc_set.zone.ei_k != \"None\":\n","        if open_side == OrderSide.SELL:\n","            short_tp_1_ = res_df['short_tp_1_{}'.format(selection_id)].to_numpy()  # id 에 따라 dynamic 변수라 이곳에서 numpy 화 진행\n","            short_tp_gap_ = res_df['short_tp_gap_{}'.format(selection_id)].to_numpy()\n","            if l[e_j] <= short_tp_1_[tp_j] - short_tp_gap_[tp_j] * config.loc_set.zone.ei_k:\n","                ep_out = 1\n","        else:\n","            long_tp_1_ = res_df['long_tp_1_{}'.format(selection_id)].to_numpy()  # iloc 이 빠를까, to_numpy() 가 빠를까  # 3.94 ms --> 5.34 ms (iloc)\n","            long_tp_gap_ = res_df['long_tp_gap_{}'.format(selection_id)].to_numpy()\n","            if h[e_j] >= long_tp_1_[tp_j] + long_tp_gap_[tp_j] * config.loc_set.zone.ei_k:\n","                ep_out = 1\n","\n","    return ep_out\n","\n","\n","def ep_out(res_df, config, op_idx, e_j, tp_j, np_datas, open_side):\n","    h, l = np_datas\n","    selection_id = config.selection_id\n","    ep_out = 0\n","\n","    if config.loc_set.zone.ep_out_tick != \"None\":\n","        if e_j - op_idx >= config.loc_set.zone.ep_out_tick:\n","            ep_out = 1\n","\n","    if config.loc_set.zone.ei_k != \"None\":\n","        if open_side == OrderSide.SELL:\n","            short_tp_ = res_df['short_tp_{}'.format(selection_id)].to_numpy()  # id 에 따라 dynamic 변수라 이곳에서 numpy 화 진행\n","            short_tp_gap_ = res_df['short_tp_gap_{}'.format(selection_id)].to_numpy()\n","            if l[e_j] <= short_tp_[tp_j] + short_tp_gap_[tp_j] * config.loc_set.zone.ei_k:\n","                ep_out = 1\n","        else:\n","            long_tp_ = res_df['long_tp_{}'.format(selection_id)].to_numpy()  # iloc 이 빠를까, to_numpy() 가 빠를까  # 3.94 ms --> 5.34 ms (iloc)\n","            long_tp_gap_ = res_df['long_tp_gap_{}'.format(selection_id)].to_numpy()\n","            if h[e_j] >= long_tp_[tp_j] - long_tp_gap_[tp_j] * config.loc_set.zone.ei_k:\n","                ep_out = 1\n","\n","    return ep_out\n","\n","\n","def ep_out_v2(res_df, config, op_idx, e_j, tp_j, np_datas, open_side):\n","    h, l = np_datas\n","    selection_id = config.selection_id\n","    ep_out = 0\n","\n","    if config.loc_set.zone.ep_out_tick != \"None\":\n","        if e_j - op_idx >= config.loc_set.zone.ep_out_tick:\n","            ep_out = 1\n","\n","    if config.loc_set.zone.ei_k != \"None\":\n","        if open_side == OrderSide.SELL:\n","            short_tp_1_ = res_df['short_tp_1_{}'.format(selection_id)].to_numpy()  # id 에 따라 dynamic 변수라 이곳에서 numpy 화 진행\n","            short_tp_0_ = res_df['short_tp_0_{}'.format(selection_id)].to_numpy()\n","            short_tp_gap_ = res_df['short_tp_gap_{}'.format(selection_id)].to_numpy()\n","            if l[e_j] <= short_tp_1_[tp_j] + short_tp_gap_[tp_j] * config.loc_set.zone.ei_k or h[e_j] >= short_tp_0_[tp_j] - short_tp_gap_[\n","                tp_j] * config.loc_set.zone.ei_k:\n","                ep_out = 1\n","        else:\n","            long_tp_1_ = res_df['long_tp_1_{}'.format(selection_id)].to_numpy()\n","            long_tp_0_ = res_df['long_tp_0_{}'.format(selection_id)].to_numpy()\n","            long_tp_gap_ = res_df['long_tp_gap_{}'.format(selection_id)].to_numpy()\n","            if h[e_j] >= long_tp_1_[tp_j] - long_tp_gap_[tp_j] * config.loc_set.zone.ei_k or l[e_j] <= long_tp_0_[tp_j] + long_tp_gap_[\n","                tp_j] * config.loc_set.zone.ei_k:\n","                ep_out = 1\n","\n","    return ep_out\n","\n","\n","def ep_loc_point2_v2(res_df, config, i, out_j, side=OrderSide.SELL):\n","    allow_ep_in = 1\n","    if config.selection_id in ['v5_2']:\n","        if side == OrderSide.SELL:\n","            dc_upper_T = res_df['dc_upper_T'].to_numpy()\n","            dc_upper_15T = res_df['dc_upper_15T'].to_numpy()\n","            allow_ep_in *= (dc_upper_T[i - 1] <= dc_upper_15T[i]) & \\\n","                           (dc_upper_15T[i - 1] != dc_upper_15T[i])\n","        else:\n","            dc_lower_T = res_df['dc_lower_T'].to_numpy()\n","            dc_lower_15T = res_df['dc_lower_15T'].to_numpy()\n","            allow_ep_in *= (dc_lower_T[i - 1] >= dc_lower_15T[i]) & \\\n","                           (dc_lower_15T[i - 1] != dc_lower_15T[i])\n","\n","    if config.selection_id in ['v3_4']:\n","        wick_score_list = literal_eval(config.ep_set.point2.wick_score_list)\n","        wick_scores = [res_df['wick_score_{}'.format(s_itv)].to_numpy() for s_itv in literal_eval(config.ep_set.point2.score_itv_list)]\n","        close = res_df['close'].to_numpy()\n","        if side == OrderSide.SELL:\n","            sup_T = res_df['sup_T'].to_numpy()\n","            allow_ep_in *= close[i] < sup_T[i - 1]\n","            if len(wick_score_list) != 0:\n","                allow_ep_in *= wick_scores[0][i] < -wick_score_list[0]\n","        else:\n","            resi_T = res_df['resi_T'].to_numpy()\n","            allow_ep_in *= close[i] > resi_T[i - 1]\n","            if len(wick_score_list) != 0:\n","                allow_ep_in *= wick_scores[0][i] > wick_score_list[0]\n","\n","    if allow_ep_in:\n","        out_j = i\n","    return allow_ep_in, out_j\n","\n","\n","# vectorized calc.\n","# multi-stem 에 따라 dynamic vars.가 입력되기 때문에 class 내부 vars. 로 종속시키지 않음\n","def ep_loc_v3(res_df, config, np_timeidx, show_detail=True, ep_loc_side=OrderSide.SELL):\n","    # ------- param init ------- #\n","    selection_id = config.selection_id\n","    c_i = config.trader_set.complete_index\n","    len_df = len(res_df)\n","    mr_res = np.ones(len_df)\n","    zone_arr = np.full(len_df, 'n')\n","\n","    # ------ process 한번에 처리해서 param_check 만 ver. 별로 하면 될 것 ------ #\n","    #     => public_indi() 가 될 것\n","    #     1. 사용한 param 정보와 matching 된 data 병렬로 나열 logging 될 것\n","    tp_fee, out_fee = calc_tp_out_fee_v2(config)\n","\n","    # ------------ candle_score ------------ #\n","    wick_score_list = literal_eval(config.loc_set.point.wick_score_list)\n","    if len(wick_score_list) != 0:\n","        score_itv_list = literal_eval(config.loc_set.point.score_itv_list)\n","        # ------ candle_score_v0 (1m initial tick 기준임) ------ #  Todo - higher timeframe 경우 back_data 사용해야함\n","        for wick_score_, score_itv_ in zip(wick_score_list, score_itv_list):\n","            wick_score = res_df['wick_score_{}'.format(score_itv_)].to_numpy()\n","            if ep_loc_side == OrderSide.SELL:\n","                mr_res *= wick_score <= -wick_score_\n","                if show_detail:\n","                    sys_log.warning(\"wick_score <= -wick_score_ : {:.5f} {:.5f} ({})\".format(wick_score[c_i], -wick_score_, mr_res[c_i]))\n","            else:\n","                mr_res *= wick_score >= wick_score_\n","                if show_detail:\n","                    sys_log.warning(\"wick_score >= wick_score_ : {:.5f} {:.5f} ({})\".format(wick_score[c_i], wick_score_, mr_res[c_i]))\n","\n","    # -------------- tr_thresh -------------- #\n","    if config.loc_set.zone.short_tr_thresh != \"None\":\n","        if ep_loc_side == OrderSide.SELL:\n","            short_tr_ = res_df['short_tr_{}'.format(selection_id)].to_numpy()\n","            mr_res *= short_tr_ >= config.loc_set.zone.short_tr_thresh\n","            mr_res *= short_tr_ <= config.loc_set.zone.short_tr_thresh + 0.1\n","            if show_detail:\n","                sys_log.warning(\n","                    \"short_tr_ <= short_tr_thresh : {:.5f} {:.5f} ({})\".format(short_tr_[c_i], config.loc_set.zone.short_tr_thresh, mr_res[c_i]))\n","        else:\n","            long_tr_ = res_df['long_tr_{}'.format(selection_id)].to_numpy()\n","            mr_res *= long_tr_ >= config.loc_set.zone.long_tr_thresh\n","            mr_res *= long_tr_ <= config.loc_set.zone.long_tr_thresh + 0.1\n","            if show_detail:\n","                sys_log.warning(\n","                    \"long_tr_ <= long_tr_thresh : {:.5f} {:.5f} ({})\".format(long_tr_[c_i], config.loc_set.zone.long_tr_thresh, mr_res[c_i]))\n","\n","    # -------------- spread - independent to tr_set -------------- #\n","    if config.loc_set.zone.short_spread != \"None\":\n","        if selection_id in ['v3']:\n","            if ep_loc_side == OrderSide.SELL:\n","                bb_base_5T = res_df['bb_base_5T'].to_numpy()  # to_numpy() 는 ep_loc 에서 진행됨\n","                bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","                short_spread = (bb_base_5T - bb_lower_5T - tp_fee * bb_base_5T) / (bb_base_5T - bb_lower_5T + out_fee * bb_base_5T)\n","                mr_res *= short_spread >= config.loc_set.zone.short_spread\n","                if show_detail:\n","                    sys_log.warning(\n","                        \"short_spread >= config.loc_set.zone.short_spread : {:.5f} {:.5f} ({})\".format(short_spread[c_i], config.loc_set.zone.short_spread, mr_res[c_i]))\n","            else:\n","                bb_upper_5T = res_df['bb_upper_5T'].to_numpy()\n","                dc_lower_5T = res_df['dc_lower_5T'].to_numpy()\n","                # mr_res *= (bb_base_5T - dc_lower_5T - tp_fee * bb_upper_5T) / (bb_base_5T - dc_lower_5T + out_fee * bb_base_5T) >= config.loc_set.zone.long_spread\n","                long_spread = (bb_upper_5T - dc_lower_5T - tp_fee * bb_upper_5T) / (bb_upper_5T - dc_lower_5T + out_fee * bb_upper_5T)\n","                mr_res *= long_spread >= config.loc_set.zone.long_spread\n","                if show_detail:\n","                    sys_log.warning(\n","                        \"long_spread >= config.loc_set.zone.long_spread : {:.5f} {:.5f} ({})\".format(long_spread[c_i], config.loc_set.zone.long_spread, mr_res[c_i]))\n","                    \n","    # ------------ rtc_zone  ------------ #\n","    # ------ dtk ------ #\n","    if config.loc_set.zone.dt_k != \"None\":\n","        # ------ dc_v2 ------ #\n","        dc_lower_v2 = res_df['dc_lower_v2'.format(selection_id)].to_numpy()\n","        short_dtk_1_ = res_df['short_dtk_1_{}'.format(selection_id)].to_numpy() - \\\n","                       res_df['short_dtk_gap_{}'.format(selection_id)].to_numpy() * config.loc_set.zone.dt_k\n","        dc_upper_v2 = res_df['dc_upper_v2'.format(selection_id)].to_numpy()\n","        long_dtk_1_ = res_df['long_dtk_1_{}'.format(selection_id)].to_numpy() + \\\n","                      res_df['long_dtk_gap_{}'.format(selection_id)].to_numpy() * config.loc_set.zone.dt_k\n","        if ep_loc_side == OrderSide.SELL:\n","            mr_res *= dc_lower_v2 >= short_dtk_1_\n","            if show_detail:\n","                sys_log.warning(\n","                    \"dc_lower_v2 >= short_dtk_1_ : {:.5f} {:.5f} ({})\".format(dc_lower_v2[c_i], short_dtk_1_[c_i], mr_res[c_i]))\n","        else:\n","            mr_res *= dc_upper_v2 <= long_dtk_1_\n","            if show_detail:\n","                sys_log.warning(\n","                    \"dc_upper_v2 <= long_dtk_1_ : {:.5f} {:.5f} ({})\".format(dc_upper_v2[c_i], long_dtk_1_[c_i], mr_res[c_i]))\n","\n","    # ------------ zone rejection  ------------ #\n","    # config 로 통제할 수 없는 rejection 은 selection_id 으로 조건문을 나눔 (lvrg_set 과 동일)\n","    if config.loc_set.zone.zone_rejection:\n","\n","\n","        # ------ order_range ------ #\n","        if config.loc_set.zone.orr != \"None\":\n","          if ep_loc_side == OrderSide.SELL:\n","            short_orr_ = res_df['short_orr_{}'.format(selection_id)].to_numpy()\n","            mr_res *= short_orr_ >= config.loc_set.zone.orr\n","            if show_detail:\n","                sys_log.warning(\"short_orr_ >= config.loc_set.zone.orr : {:.5f} {:.5f} ({})\".format(short_orr_[c_i], config.loc_set.zone.orr, mr_res[c_i]))\n","          else:\n","            long_orr_ = res_df['long_orr_{}'.format(selection_id)].to_numpy()\n","            mr_res *= long_orr_ >= config.loc_set.zone.orr\n","            if show_detail:\n","                sys_log.warning(\"long_orr_ >= config.loc_set.zone.orr : {:.5f} {:.5f} ({})\".format(long_orr_[c_i], config.loc_set.zone.orr, mr_res[c_i]))\n","\n","        # ------------------ biaser, sr_confirmer ------------------ #\n","        # ------ 1. mtf_baseline ------ #\n","        if selection_id in ['3_8']:     \n","          itv, period1, period2 = config.loc_set.point.p1_itv1, config.loc_set.point.p1_period1, config.loc_set.point.p1_period2\n","          if ep_loc_side == OrderSide.SELL:\n","            bb_upper_H = res_df['bb_upper_H'].to_numpy()\n","            dc_upper_H5 = res_df['dc_upper_H5'].to_numpy()\n","            mr_res *= dc_upper_H5 <= bb_upper_H\n","            if show_detail:\n","                sys_log.warning(\"dc_upper_H5 <= bb_upper_H : {:.5f} {:.5f} ({})\".format(dc_upper_H5[c_i], bb_upper_H[c_i], mr_res[c_i]))\n","          else:\n","            # bb_upper_H = res_df['bb_upper_H'].to_numpy()\n","            # dc_lower2_ = res_df['dc_lower_{}{}'.format(itv, period2)].to_numpy()\n","            # mr_res *= dc_lower2_ >= bb_upper_H\n","            # if show_detail:\n","            #     sys_log.warning(\"dc_lower2_ >= bb_upper_H : {:.5f} {:.5f} ({})\".format(dc_lower2_[c_i], bb_upper_H[c_i], mr_res[c_i]))\n","            \n","            # mr_res *= dc_lower2_ <= bb_upper_H\n","            # if show_detail:\n","            #     sys_log.warning(\"dc_lower2_ <= bb_upper_H : {:.5f} {:.5f} ({})\".format(dc_lower2_[c_i], bb_upper_H[c_i], mr_res[c_i]))\n","\n","            # dc_base_H5 = res_df['dc_base_H5'].to_numpy()\n","            # mr_res *= dc_base_H5 <= bb_upper_H\n","            # if show_detail:\n","            #     sys_log.warning(\"dc_base_H5 <= bb_upper_H : {:.5f} {:.5f} ({})\".format(dc_base_H5[c_i], bb_upper_H[c_i], mr_res[c_i]))\n","            \n","            bb_lower_H = res_df['bb_lower_H'].to_numpy()\n","            dc_lower_H5 = res_df['dc_lower_H5'].to_numpy()\n","            mr_res *= dc_lower_H5 >= bb_lower_H\n","            if show_detail:\n","                sys_log.warning(\"dc_lower_H5 >= bb_lower_H : {:.5f} {:.5f} ({})\".format(dc_lower_H5[c_i], bb_lower_H[c_i], mr_res[c_i]))\n","\n","        if selection_id in ['4_3', '3_5', '3_51']:\n","            dc_base_3T = res_df['dc_base_3T20'].to_numpy()\n","            b1_dc_base_3T = res_df['dc_base_3T20'].shift(3).to_numpy()\n","            # dc_base_5T = res_df['dc_base_5T'].to_numpy()\n","            # dc_base_15T = res_df['dc_base_15T'].to_numpy()\n","            # dc_base_30T = res_df['dc_base_30T'].to_numpy()\n","            dc_base_H = res_df['dc_base_H20'].to_numpy()\n","            # dc_base_4H = res_df['dc_base_4H'].to_numpy()\n","            # dc_base_D = res_df['dc_base_D'].to_numpy()\n","\n","            itv, period1, period2 = config.loc_set.point.p1_itv1, config.loc_set.point.p1_period1, config.loc_set.point.p1_period2\n","            if ep_loc_side == OrderSide.SELL:\n","                # ------ short_base_ <= dc_base_3T ------ #\n","                short_base_ = res_df['short_base_{}{}{}'.format(itv, period1, period2)].to_numpy()\n","                mr_res *= short_base_ <= dc_base_3T\n","                if show_detail:\n","                    sys_log.warning(\"short_base_ <= dc_base_3T : {:.5f} {:.5f} ({})\".format(short_base_[c_i], dc_base_3T[c_i], mr_res[c_i]))\n","\n","                # ------ reject csd ------ #\n","                # dc_upper_ = res_df['dc_upper_{}{}'.format(itv, period1)].to_numpy()\n","                # mr_res *= dc_upper_ <= dc_base_3T\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_upper_ <= dc_base_3T : {:.5f} {:.5f} ({})\".format(dc_upper_[c_i], dc_base_3T[c_i], mr_res[c_i]))\n","\n","                # Todo, 부호 조심\n","                # dc_upper2_ = res_df['dc_upper_{}{}'.format(itv, period2)].to_numpy()\n","                # mr_res *= dc_upper2_ >= dc_base_H\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_upper2_ >= dc_base_H : {:.5f} {:.5f} ({})\".format(dc_upper2_[c_i], dc_base_H[c_i], mr_res[c_i]))  \n","\n","                # long 과 동일한 dur.\n","                dc_lower2_ = res_df['dc_lower_{}{}'.format(itv, period2)].to_numpy()\n","                mr_res *= dc_lower2_ >= dc_base_H\n","                if show_detail:\n","                    sys_log.warning(\"dc_lower2_ >= dc_base_H : {:.5f} {:.5f} ({})\".format(dc_lower2_[c_i], dc_base_H[c_i], mr_res[c_i]))  \n","\n","                # ------ consecutive base ascender ------ #\n","                # ------ 1. roll_min ------ #\n","                dc_base_3T_rollmin = res_df['dc_base_3T'].rolling(config.loc_set.zone.base_roll_period).min().to_numpy()\n","                mr_res *= dc_base_3T_rollmin == dc_base_3T\n","                if show_detail:\n","                    sys_log.warning(\n","                        \"dc_base_3T_rollmin == dc_base_3T : {:.5f} {:.5f} ({})\".format(dc_base_3T_rollmin[c_i], dc_base_3T[c_i], mr_res[c_i]))\n","            else:\n","                # ------ long_base >= dc_base_3T ------ #\n","                long_base_ = res_df['long_base_{}{}{}'.format(itv, period1, period2)].to_numpy()\n","                mr_res *= long_base_ >= dc_base_3T\n","                if show_detail:\n","                    sys_log.warning(\"long_base_ >= dc_base_3T : {:.5f} {:.5f} ({})\".format(long_base_[c_i], dc_base_3T[c_i], mr_res[c_i]))\n","\n","                # ------ reject csd ------ #\n","                # dc_lower_ = res_df['dc_lower_{}{}'.format(itv, period1)].to_numpy()\n","                # mr_res *= dc_lower_ >= dc_base_3T\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_lower_ >= dc_base_3T : {:.5f} {:.5f} ({})\".format(dc_lower_[c_i], dc_base_3T[c_i], mr_res[c_i]))\n","\n","                dc_lower2_ = res_df['dc_lower_{}{}'.format(itv, period2)].to_numpy()\n","                mr_res *= dc_lower2_ >= dc_base_H\n","                if show_detail:\n","                    sys_log.warning(\"dc_lower2_ >= dc_base_H : {:.5f} {:.5f} ({})\".format(dc_lower2_[c_i], dc_base_H[c_i], mr_res[c_i]))\n","\n","                # bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","                # mr_res *= dc_lower2_ >= bb_lower_5T\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_lower2_ >= bb_lower_5T : {:.5f} {:.5f} ({})\".format(dc_lower2_[c_i], bb_lower_5T[c_i], mr_res[c_i]))\n","\n","                # ------ alignment ------ #\n","                # mr_res *= (dc_base_3T > dc_base_5T) & (dc_base_5T > dc_base_15T) & (dc_base_15T > dc_base_30T)\n","\n","                # ------ consecutive base ascender ------ #\n","                # ------ 1. roll_max ------ #\n","                dc_base_3T_rollmax = res_df['dc_base_3T'].rolling(config.loc_set.zone.base_roll_period).max().to_numpy()\n","                mr_res *= dc_base_3T_rollmax == dc_base_3T\n","                if show_detail:\n","                    sys_log.warning(\n","                        \"dc_base_3T_rollmax == dc_base_3T : {:.5f} {:.5f} ({})\".format(dc_base_3T_rollmax[c_i], dc_base_3T[c_i], mr_res[c_i]))\n","\n","                # ------ 2. roll_max_v2 - ascender  ------ #\n","                # dc_base_3T_ascend = (res_df['dc_base_3T'] >= res_df['dc_base_3T'].shift(3)).rolling(config.loc_set.zone.base_roll_period).sum().to_numpy()\n","                # # mr_res *= dc_base_3T_ascend == config.loc_set.zone.base_roll_period\n","                # mr_res *= dc_base_3T_ascend != config.loc_set.zone.base_roll_period\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_base_3T_ascend == config.loc_set.zone.base_roll_period : {:.5f} {:.5f} ({})\".format(dc_base_3T_ascend[c_i], config.loc_set.zone.base_roll_period, mr_res[c_i]))\n","\n","\n","        if config.loc_set.zone.wbr != \"None\":\n","          wave_body_ratio = res_df['wave_body_ratio'].to_numpy()\n","          mr_res *= wave_body_ratio >= config.loc_set.zone.wbr\n","          if show_detail:\n","              sys_log.warning(\n","                  \"wave_body_ratio >= config.loc_set.zone.wbr : {:.5f} {:.5f} ({})\".format(wave_body_ratio[c_i], config.loc_set.zone.wbr, mr_res[c_i]))\n","\n","        if config.loc_set.zone.dbr != \"None\":\n","          if ep_loc_side == OrderSide.SELL:\n","            dc_lower_body_ratio = res_df['dc_lower_body_ratio'].to_numpy()\n","            mr_res *= dc_lower_body_ratio >= config.loc_set.zone.dbr\n","            if show_detail:\n","                sys_log.warning(\n","                    \"dc_lower_body_ratio >= config.loc_set.zone.dbr : {:.5f} {:.5f} ({})\".format(dc_lower_body_ratio[c_i], config.loc_set.zone.dbr, mr_res[c_i]))\n","          else:\n","            dc_upper_body_ratio = res_df['dc_upper_body_ratio'].to_numpy()\n","            mr_res *= dc_upper_body_ratio >= config.loc_set.zone.dbr\n","            if show_detail:\n","                sys_log.warning(\n","                    \"dc_upper_body_ratio >= config.loc_set.zone.dbr : {:.5f} {:.5f} ({})\".format(dc_upper_body_ratio[c_i], config.loc_set.zone.dbr, mr_res[c_i]))\n","                \n","        # ------------ 2. imbalance_ratio ------------ #\n","        if config.loc_set.zone.ir != \"None\":\n","            itv = config.loc_set.point.tf_entry\n","            itv_num = to_itvnum(itv)\n","            if ep_loc_side == OrderSide.SELL:\n","                short_ir_ = res_df['short_ir_{}'.format(itv)].to_numpy()\n","                # short_ir_ = res_df['short_ir_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","                # mr_res *= short_ir_ >= config.loc_set.zone.ir     # greater\n","                mr_res *= short_ir_ <= config.loc_set.zone.ir  # lesser\n","                if show_detail:\n","                    sys_log.warning(\n","                        \"short_ir_ <= config.loc_set.zone.ir : {:.5f} {:.5f} ({})\".format(short_ir_[c_i], config.loc_set.zone.ir, mr_res[c_i]))\n","            else:\n","                long_ir_ = res_df['long_ir_{}'.format(itv)].to_numpy()\n","                # long_ir_ = res_df['long_ir_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","                # mr_res *= long_ir_ >= config.loc_set.zone.ir\n","                mr_res *= long_ir_ <= config.loc_set.zone.ir\n","                if show_detail:\n","                    sys_log.warning(\n","                        \"long_ir_ <= config.loc_set.zone.ir : {:.5f} {:.5f} ({})\".format(long_ir_[c_i], config.loc_set.zone.ir, mr_res[c_i]))\n","\n","        # ------------ 3. body_rel_ratio ------------ #\n","        if config.loc_set.zone.brr != \"None\":\n","            body_rel_ratio_ = res_df['body_rel_ratio_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","            mr_res *= body_rel_ratio_ >= config.loc_set.zone.brr\n","\n","\n","        # ------------------ swing_middle ------------------ #\n","        # ------------ 1. envelope ------------ #\n","\n","        # ------ a. dc ------ #\n","        # ep_loc check 기준 idx 가 entry 기준이라는 걸 명심\n","        if selection_id in ['v3_2']:\n","            hc_itv = '15T'\n","            dc_itv = '15T'\n","            shift_num = [0, to_itvnum(hc_itv)]\n","            div_res = [1, 0]\n","            for itv_num, res in zip(shift_num, div_res):\n","                close_ = res_df['close_{}'.format(hc_itv)].shift(itv_num).to_numpy()  # close_bar timein 사용하는 경우, 특수로 shift(0) 사용가능\n","                if ep_loc_side == OrderSide.SELL:\n","                    dc_lower_ = res_df['dc_lower_%s' % dc_itv].shift(itv_num).to_numpy()\n","                    mr_res *= (close_ < dc_lower_) == res\n","                else:\n","                    dc_upper_ = res_df['dc_upper_%s' % dc_itv].shift(itv_num).to_numpy()\n","                    mr_res *= (close_ > dc_upper_) == res\n","\n","\n","        # ------------ 2. degree ------------ #\n","        # ------ a. norm_body_ratio ------ #\n","        if config.loc_set.zone.abs_ratio != \"None\":\n","            itv = config.loc_set.point.tf_entry\n","            abs_ratio_ = res_df['abs_ratio_{}'.format(itv)].to_numpy()\n","            mr_res *= abs_ratio_ >= config.loc_set.zone.abs_ratio\n","            # mr_res *= abs_ratio_ <= config.loc_set.zone.abs_ratio\n","\n","    # -------------- zoned tr_set - post_work -------------- #\n","    if config.tr_set.c_ep_gap != \"None\" or config.tr_set.t_out_gap != \"None\":\n","        #       by zone_dtk       #\n","        #         c_zone        #\n","        zone_dc_upper_v2_ = res_df['zone_dc_upper_v2'.format(selection_id)].to_numpy()\n","        long_dtk_plot_1 = res_df['long_dtk_plot_1'].to_numpy() + res_df['long_dtk_plot_gap'].to_numpy() * config.loc_set.zone.zone_dt_k\n","        zone_dc_lower_v2_ = res_df['zone_dc_lower_v2'.format(selection_id)].to_numpy()\n","        short_dtk_plot_1 = res_df['short_dtk_plot_1'].to_numpy() - res_df['short_dtk_plot_gap'].to_numpy() * config.loc_set.zone.zone_dt_k\n","        if ep_loc_side == OrderSide.SELL:\n","            zone_res = zone_dc_upper_v2_ > long_dtk_plot_1  # mr_res 와는 별개임\n","            pos = 'short'\n","        else:\n","            zone_res = zone_dc_lower_v2_ < short_dtk_plot_1\n","            pos = 'long'\n","\n","        # static 여부에 따른 vectorized adj. - dynamic 은 vectorize 불가\n","        if config.ep_set.static_ep and config.tr_set.c_ep_gap != \"None\":\n","            res_df['{}_ep_{}'.format(pos, selection_id)][zone_res] = res_df['{}_ep2_{}'.format(pos, selection_id)][zone_res]\n","        if config.out_set.static_out and config.tr_set.t_out_gap != \"None\":\n","            res_df['{}_out_{}'.format(pos, selection_id)][~zone_res] = res_df['{}_out2_{}'.format(pos, selection_id)][\n","                ~zone_res]  # t_zone 에 대한 out2 setting\n","        zone_arr = np.where(zone_res == 1, 'c', 't')\n","\n","    return mr_res, zone_arr  # mr_res 의 True idx 가 open signal"]},{"cell_type":"markdown","source":["#### ep_loc legacy"],"metadata":{"id":"EQ63Jwpvr7qA"}},{"cell_type":"code","source":["\n","        # if strat_version in ['3_6']:\n","        #   itv, period1, period2 = config.loc_set.point.p1_itv0, config.loc_set.point.p1_period1, config.loc_set.point.p1_period2          \n","\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     high_5T = res_df['high_5T'].to_numpy()  # Todo, tf_entry - 1 open 기준이라 future_data 사용 가능\n","        #     short_base_ = res_df['short_base_{}{}{}'.format(itv, period1, period2)]\n","        #     mr_res *= high_5T < short_base_\n","        #     if show_detail:\n","        #         sys_log.warning(\n","        #             \"high_5T < short_base_ : {:.5f} {:.5f} ({})\".format(high_5T[c_i], short_base_[c_i], mr_res[c_i]))\n","        #   else:\n","        #     low_5T = res_df['low_5T'].to_numpy()  # Todo, tf_entry - 1 open 기준이라 future_data 사용 가능\n","        #     long_base_ = res_df['long_base_{}{}{}'.format(itv, period1, period2)]\n","        #     mr_res *= low_5T > long_base_\n","        #     if show_detail:\n","        #         sys_log.warning(\n","        #             \"low_5T > long_base_ : {:.5f} {:.5f} ({})\".format(low_5T[c_i], long_base_[c_i], mr_res[c_i]))'\n","        \n","        # ------ dc_base ------ #\n","        # if strat_version in ['4']:  # 'v3_3', 'v3_4',\n","        #   hc_itv = '5T'\n","        #   dc_itv = '5T'\n","        #   itv_num = to_itvnum(hc_itv)\n","        #   close_ = res_df['close_{}'.format(hc_itv)].shift(itv_num).to_numpy()   # 따라서 future_data 사용시, shifting 필요함\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     dc_lower_ = res_df['dc_lower_%s' % dc_itv].shift(itv_num).to_numpy()\n","        #     mr_res *= close_ < dc_lower_\n","        #   else:\n","        #     dc_upper_ = res_df['dc_upper_%s' % dc_itv].shift(itv_num).to_numpy()\n","        #     mr_res *= close_ > dc_upper_\n","\n","        # ------ ema ------ #\n","        # if strat_version in ['v5_2']: # 'v3'\n","        #   ema_5T = res_df['ema_5T'].to_numpy()\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     mr_res *= close < ema_5T\n","        #   else:\n","        #     mr_res *= close > ema_5T\n","        \n","        # ------ b. bb ------ #\n","        # close = res_df['close'].to_numpy()\n","\n","        # if strat_version in ['v3_3']:\n","        #   open = res_df['open'].to_numpy()\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     bb_lower_1m = res_df['bb_lower_1m'].to_numpy()\n","        #     # mr_res *= close <= bb_lower_1m\n","        #     mr_res *= open <= bb_lower_1m\n","        #   else:\n","        #     bb_upper_1m = res_df['bb_upper_1m'].to_numpy()\n","        #     # mr_res *= close >= bb_upper_1m\n","        #     mr_res *= open >= bb_upper_1m\n","\n","        if strat_version in ['4_1']:\n","            if ep_loc_side == OrderSide.SELL:\n","                bb_lower_15T = res_df['bb_lower_15T'].to_numpy()\n","                short_ep_ = res_df['short_ep_{}'.format(strat_version)].to_numpy()\n","                mr_res *= bb_lower_15T >= short_ep_\n","            else:\n","                bb_upper_15T = res_df['bb_upper_15T'].to_numpy()\n","                long_ep_ = res_df['long_ep_{}'.format(strat_version)].to_numpy()\n","                mr_res *= bb_upper_15T <= long_ep_\n","\n","        # if strat_version in ['v5_2']:\n","        #   bb_upper2_ = res_df['bb_upper2_%s' % config.loc_set.zone.bbz_itv].to_numpy()\n","        #   bb_lower2_ = res_df['bb_lower2_%s' % config.loc_set.zone.bbz_itv].to_numpy()\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     mr_res *= bb_upper2_ < close\n","        #   else:\n","        #     mr_res *= bb_lower2_ > close\n","\n","        # degree_list = literal_eval(config.loc_set.zone.degree_list)\n","        # if len(degree_list) != 0:\n","        # # if strat_version in ['v3_3', 'v3_4']:\n","        #   norm_close_15 = res_df['norm_close_15'].to_numpy()   # -> 이거 뭘로 만들었는지 불분명함,,\n","        #   b1_norm_close_15 = res_df['norm_close_15'].shift(15).to_numpy()\n","\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     mr_res *= norm_close_15 <= -degree_list[0]\n","        #     # mr_res *= b1_norm_close_15 <= -degree_list[1]\n","        #   else:\n","        #     mr_res *= norm_close_15 >= degree_list[0]\n","        #     # mr_res *= b1_norm_close_15 >= degree_list[1]\n","\n","        # ------ b. dc ------ #\n","        # if strat_version in ['v3_3']:\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     dc_lower_ = res_df['dc_lower_1m'].to_numpy()\n","        #     b1_dc_lower_ = res_df['dc_lower_1m'].shift(1).to_numpy()\n","        #     mr_res *= dc_lower_ < b1_dc_lower_\n","        #   else:\n","        #     dc_upper_ = res_df['dc_upper_1m'].to_numpy()\n","        #     b1_dc_upper_ = res_df['dc_upper_1m'].shift(1).to_numpy()\n","        #     mr_res *= dc_upper_ > b1_dc_upper_\n","\n","        # ------ c. sar ------ #\n","        # if strat_version in ['v3_3']:\n","        # sar_uptrend_3T = res_df['sar_uptrend_3T'].to_numpy()\n","        # if ep_loc_side == OrderSide.SELL:\n","        #   mr_res *= sar_uptrend_3T == 0\n","        # else:\n","        #   mr_res *= sar_uptrend_3T == 1"],"metadata":{"id":"csZwxsP5r_Pz"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JjKHyqftzhD7"},"source":["### set config (override available)"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"q_4E-zH02WJy","executionInfo":{"status":"ok","timestamp":1650587639577,"user_tz":-540,"elapsed":10,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["#     caution : MARKET / LIMIT spelling   #\n","#      json doesn't support single quotes     #\n","\n","param_dict = {\n","  \"selection_id\": \"3_5\",\n","  \"trader_set\": {\n","    \"backtrade\": 0,\n","    \"back_data_path\": \"C:\\\\Users\\\\Lenovo\\\\PycharmProjects\\\\System_Trading\\\\JnQ\\\\candlestick_concated\\\\database_bn\\\\2022-04-08\\\\2022-04-08 ETHUSDT_1m.ftr\",\n","    \"start_datetime\": \"2020-09-05 00:00:59.999\",\n","    \"run\": 1,\n","    \"df_log\": 0,\n","    \"latest_index\": -1,\n","    \"complete_index\": -2,\n","    \"limit_fee\": 0.0002,\n","    \"market_fee\": 0.0004,\n","    \"initial_asset\": 10,\n","    \"asset_changed\": 0,\n","    \"symbol\": \"ETHUSDT\",\n","    \"symbol_changed\": 0,\n","    \"itv_list\": \"['T', '3T', '5T', '15T', '30T', '4H']\",\n","    \"row_list\": \"[100, 50, 1, 1, 1, 1]\",\n","    \"rec_row_list\": \"[1, 1, 1, 1, 1, 1]\",\n","    \"offset_list\": \"['1h', '1h', '1h', '1h', '1h', '1h']\",\n","    \"bar_close_second\": 59,\n","    \"realtime_term\": 0.01,\n","    \"api_retry_term\": 3,\n","    \"check_entry_sec\": 10,\n","    \"entry_execution_wait\": 60,\n","    \"breakout_qty_ratio\": 0.97,\n","    \"qty_check_term\": 30,\n","    \"exit_execution_wait\": 60,\n","    \"close_complete_term\": 5,\n","    \"save_stacked_df\": 0,\n","    \"stacked_df_exist\": 1\n","  },\n","  \"pos_set\": {\n","    \"short_inversion\": 0,\n","    \"long_inversion\": 0,\n","    \"short_ban\": 0,\n","    \"long_ban\": 0\n","  },\n","  \"loc_set\": {\n","    \"zone\": {\n","      \"short_spread\": \"None\",\n","      \"long_spread\": \"None\",\n","      \"short_tr_thresh\": \"None\",\n","      \"long_tr_thresh\": \"None\",\n","      \"ei_k\": 0.0,\n","      \"ep_out_tick\": \"None\",\n","      \"zone_rejection\": 1,\n","      \"wbr\": \"None\",\n","      \"dbr\": \"None\",\n","      \"brr\": \"None\",\n","      \"ir\": \"None\",\n","      \"abs_ratio\": \"None\",\n","      \"base_roll_period\": 50,\n","      \"degree_list\": \"[]\",\n","      \"hc_itv\": 60,\n","      \"dtk_itv\": \"5T\",\n","      \"dt_k\": \"None\",\n","      \"dc_period\": 135,\n","      \"use_dtk_line\": 0,\n","      \"zone_dt_k\": 0.4,\n","      \"zone_dc_period\": 135\n","    },\n","    \"point\": {\n","      \"exp_itv\": \"5T\",\n","      \"p1_itv1\": \"T\",\n","      \"p1_itv0\": \"T\",\n","      \"p1_period1\": 20,\n","      \"p1_period2\": 40,\n","      \"p2_itv1\": \"None\",\n","      \"p2_itv0\": \"T\",\n","      \"p2_period1\": 20,\n","      \"p2_period2\": 40,\n","      \"tf_entry\": \"T\",\n","      \"base_gap\": 0.1,\n","      \"wick_score_list\": \"[]\",\n","      \"body_score_list\": \"[]\",\n","      \"score_itv_list\": \"[]\",\n","      \"osc_band\": 20\n","    }\n","  },\n","  \"tr_set\": {\n","    \"tp_gap\": 0.5,\n","    \"decay_gap\": \"None\",\n","    \"ep_gap\": 0,\n","    \"out_gap\": 1.75,\n","    \"c_ep_gap\": \"None\",\n","    \"t_out_gap\": \"None\",\n","    \"bias_gap\": 0,\n","    \"bias_info_tick\": 240\n","  },\n","  \"ep_set\": {\n","    \"entry_type\": \"LIMIT\",\n","    \"static_ep\": 1,\n","    \"point2\": {\n","      \"use_point2\": 0,\n","      \"entry_type\": \"MARKET\",\n","      \"wick_score_list\": \"[]\",\n","      \"body_score_list\": \"[]\",\n","      \"score_itv_list\": \"['T']\"\n","    }\n","  },\n","  \"tp_set\": {\n","    \"non_tp\": 0,\n","    \"static_tp\": 1,\n","    \"tp_onexec\": 0,\n","    \"decay_term\": 60,\n","    \"p_ranges\": \"[1]\",\n","    \"p_qty_ratio\": \"[1]\"\n","  },\n","  \"out_set\": {\n","    \"hl_out\": 1,\n","    \"static_out\": 1,\n","    \"out_onexec\": 0,\n","    \"tf_exit\": \"None\",\n","    \"rsi_exit\": 0\n","  },\n","  \"lvrg_set\": {\n","    \"leverage\": 2,\n","    \"static_lvrg\": 0,\n","    \"allow_float\": 0,\n","    \"target_pct\": 0.03,\n","    \"lvrg_rejection\": 0\n","  }\n","}\n","\n","config = EasyDict(param_dict)"]},{"cell_type":"markdown","metadata":{"id":"rLI8unIyroiC"},"source":["## run"]},{"cell_type":"code","execution_count":8,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":10,"status":"ok","timestamp":1650587639578,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"qBJfPsmJzVIr","outputId":"e62de604-35ad-4e9b-b3d8-f0efebdf2ca4"},"outputs":[{"output_type":"stream","name":"stdout","text":["\"3_5\" {\n"," \"zone\": {\n","  \"short_spread\": \"None\",\n","  \"long_spread\": \"None\",\n","  \"short_tr_thresh\": \"None\",\n","  \"long_tr_thresh\": \"None\",\n","  \"ei_k\": 0.0,\n","  \"ep_out_tick\": \"None\",\n","  \"zone_rejection\": 1,\n","  \"wbr\": \"None\",\n","  \"dbr\": \"None\",\n","  \"brr\": \"None\",\n","  \"ir\": \"None\",\n","  \"abs_ratio\": \"None\",\n","  \"base_roll_period\": 50,\n","  \"degree_list\": \"[]\",\n","  \"hc_itv\": 60,\n","  \"dtk_itv\": \"5T\",\n","  \"dt_k\": \"None\",\n","  \"dc_period\": 135,\n","  \"use_dtk_line\": 0,\n","  \"zone_dt_k\": 0.4,\n","  \"zone_dc_period\": 135\n"," },\n"," \"point\": {\n","  \"exp_itv\": \"5T\",\n","  \"p1_itv1\": \"T\",\n","  \"p1_itv0\": \"T\",\n","  \"p1_period1\": 20,\n","  \"p1_period2\": 40,\n","  \"p2_itv1\": \"None\",\n","  \"p2_itv0\": \"T\",\n","  \"p2_period1\": 20,\n","  \"p2_period2\": 40,\n","  \"tf_entry\": \"T\",\n","  \"base_gap\": 0.1,\n","  \"wick_score_list\": \"[]\",\n","  \"body_score_list\": \"[]\",\n","  \"score_itv_list\": \"[]\",\n","  \"osc_band\": 20\n"," }\n","} {\n"," \"tp_gap\": 0.5,\n"," \"decay_gap\": \"None\",\n"," \"ep_gap\": 0,\n"," \"out_gap\": 1.75,\n"," \"c_ep_gap\": \"None\",\n"," \"t_out_gap\": \"None\",\n"," \"bias_gap\": 0,\n"," \"bias_info_tick\": 240\n","} {\n"," \"entry_type\": \"LIMIT\",\n"," \"static_ep\": 1,\n"," \"point2\": {\n","  \"use_point2\": 0,\n","  \"entry_type\": \"MARKET\",\n","  \"wick_score_list\": \"[]\",\n","  \"body_score_list\": \"[]\",\n","  \"score_itv_list\": \"['T']\"\n"," }\n","} {\n"," \"non_tp\": 0,\n"," \"static_tp\": 1,\n"," \"tp_onexec\": 0,\n"," \"decay_term\": 60,\n"," \"p_ranges\": \"[1]\",\n"," \"p_qty_ratio\": \"[1]\"\n","} {\n"," \"hl_out\": 1,\n"," \"static_out\": 1,\n"," \"out_onexec\": 0,\n"," \"tf_exit\": \"None\",\n"," \"rsi_exit\": 0\n","} {\n"," \"leverage\": 2,\n"," \"static_lvrg\": 0,\n"," \"allow_float\": 0,\n"," \"target_pct\": 0.03,\n"," \"lvrg_rejection\": 0\n","} "]}],"source":["# funcs = [ep_out_v2, ep_loc_point2_v2, lvrg_set]  # ep_out for p1 & p2\n","funcs = [ep_out, ep_loc_point2_v2, lvrg_set]     # ep_out for p1-only\n","# funcs = [ep_out_v0, ep_loc_point2_v2, lvrg_set]  # ep_out for v3\n","\n","id_idx_list = [0]  # ID_arr 에서 import 할 id_idx 선택\n","public_override = 1\n","utils_override = 1\n","config_override = 1\n","\n","# ------ config_list 와 같은 org_var 에 override 하는거 다시 생각하기 ------ #\n","ID_list = ID_arr[id_idx_list]\n","utils_list = utils_arr[id_idx_list]\n","config_list = config_arr[id_idx_list]\n","\n","if config_override or utils_override:\n","  assert len(config_list) == 1\n","  if config_override:    \n","    config_list[0] = config\n","    ID_list[0] = config.selection_id\n","  \n","config = config_list[0]  # base config = config_list[0]\n","tp_fee, out_fee = calc_tp_out_fee_v2(config)   # -> rev_pr 때문에 일단 이곳에도 선언함\n","\n","# ------- inversion set ------- #\n","inversion = 0\n","fdist_thresh = 1\n","# ------- plot param ------- #\n","show_detail = 0\n","# ------- temp param ------- #\n","allow_osc_touch = 0\n","rsi_gap = 5\n","\n","# ------- just printing config ------- #\n","# ['selection_id', 'pos_set', 'loc_set', 'tr_set', 'ep_set', 'tp_set', 'out_set', 'lvrg_set']\n","_ = [print(json.dumps(config[key_], indent=1), end=' ') for key_ in ['selection_id', 'loc_set', 'tr_set', 'ep_set', 'tp_set', 'out_set', 'lvrg_set']]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"afUV2b1jaggN"},"outputs":[],"source":["config.trader_set.start_datetime = \"2020-09-05 00:00:59.999\" #  \"2020-09-05 00:00:59.999\" # 2022-02-01 16:34:59.999000 2022-01-14 16:34:59.999000  \"2020-09-05 00:00:59.999\" \"2022-01-10 00:00:59.999\" \"2021-10-04 02:39:59.999000\""]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4506,"status":"ok","timestamp":1650457256525,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"WstWVNihCNH8","outputId":"763c98a1-4e0b-4212-f753-0d847963acf7"},"outputs":[{"output_type":"stream","name":"stdout","text":["public_indi elapsed time : 2.206211566925049\n","make data_list elapsed time : 0.0006401538848876953\n"]}],"source":["# ------ slicing res_df ------ #\n","res_df = res_df_.loc[pd.to_datetime(config.trader_set.start_datetime):]\n","\n","np_timeidx = np.array([intmin_np(date_) for date_ in res_df.index.to_numpy()])\n","\n","# ------------ public_indi ------------ # - 딱히 반복될 이유가 없는 phase - annot. 달때, why 까지 적어주면 좋음\n","start_0 = time.time()\n","if public_override:\n","    res_df = public_indi(res_df, config_list[0], np_timeidx)  # 현재 대부분의 시간은 h_candle 에서 소비되고 있음\n","else:\n","    res_df = utils_public.public_indi(res_df, config_list[0], np_timeidx)\n","print(\"public_indi elapsed time :\", time.time() - start_0)\n","\n","# ------------ make data_list ------------ # - 반복될 이유가 없는 phase - public_indo 에 종속\n","start_0 = time.time()\n","ohlc_cols = ['open', 'high', 'low', 'close']\n","ohlc_list = [res_df[col_].to_numpy() for col_ in ohlc_cols]\n","print(\"make data_list elapsed time :\", time.time() - start_0)"]},{"cell_type":"markdown","metadata":{"id":"RqRF1eyZ0xBL"},"source":["### idep_plot"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_iYcJk8nK8Yq"},"outputs":[],"source":["# ------ edit utils config ------ #\n","# config_list[0].pos_set.short_ban = 0\n","# config_list[0].loc_set.point.p1_period1 = 20\n","# config_list[0].loc_set.point.p1_period2 = 50\n","# # config_list[0].loc_set.point.p2_period1 = 20\n","# # config_list[0].loc_set.point.p2_period2 = 20\n","# # config_list[0].loc_set.point.base_gap = -0.0\n","config_list[0].tr_set.tp_gap = 0.5\n","# config_list[0].tr_set.ep_gap = -1.0\n","# config_list[0].tr_set.out_gap = 0\n","# # config_list[0].tr_set.bias_gap = 1.5\n","# config_list[0].tr_set.bias_info_tick = 240"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":684,"status":"ok","timestamp":1650458098770,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"iI39YI_5GguK","outputId":"e2dfab81-2282-420d-dd7f-62070c2f59de"},"outputs":[{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n"]},{"output_type":"stream","name":"stdout","text":["enlist_rtc elapsed time : 0.06361746788024902\n","enlist_tr elapsed time : 0.3142247200012207\n"]}],"source":["if utils_override:   # 현재, utils_override 하는 경우 1개의 ID 만 허용함 \n","  start_0 = time.time()\n","  res_df = enlist_rtc(res_df, config_list[0], np_timeidx)\n","  print(\"enlist_rtc elapsed time :\", time.time() - start_0)\n","  start_0 = time.time()\n","  res_df = enlist_tr(res_df, config_list[0], np_timeidx)    # 36995.0 -> 152766.0 # 4044 np.sum(long_open_res == 1) : 4325\n","  print(\"enlist_tr elapsed time :\", time.time() - start_0)\n","else:\n","    start_0 = time.time()\n","    for utils_, config_ in zip(utils_list, config_list):\n","        res_df = utils_.enlist_rtc(res_df, config_, np_timeidx)\n","        res_df = utils_.enlist_tr(res_df, config_, np_timeidx)\n","    print(\"elapsed time :\", time.time() - start_0)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gfDSOGMd91rE"},"outputs":[],"source":["# ------ edit loc_set config ------ #\n","# config_list[0].loc_set.zone.zone_rejection = 0\n","config_list[0].loc_set.zone.orr = \"None\" # 0.9  # 0.7\n","# config_list[0].loc_set.zone.wbr = \"None\"  # 0.7\n","# config_list[0].loc_set.zone.dbr = \"None\"  # 0.7\n","# config_list[0].loc_set.point.wick_score_list = \"[]\"\n","# config_list[0].loc_set.point.score_itv_list = \"['H']\"\n","# config_list[0].loc_set.zone.brr = 20 # \"None\" 0.8\n","# config_list[0].loc_set.zone.ir = \"None\" # \"None\" 0.8\n","# # config_list[0].loc_set.zone.abs_ratio = \"None\"  # 0.7\n","# config_list[0].loc_set.zone.short_tr_thresh = \"None\" #  0.8 # # 0.7 # tr_thresh 엄청 민감함\n","# config_list[0].loc_set.zone.long_tr_thresh = 0.85 #  0.8 ## 0.7\n","# # config_list[0].loc_set.zone.base_roll_period = 60"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2441,"status":"ok","timestamp":1650458101578,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"9DPgykxQ92mU","outputId":"01ccc401-537c-4a64-a364-88845f229873"},"outputs":[{"output_type":"stream","name":"stderr","text":["short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 1.9987447261810303\n"]}],"source":["open_info_df = get_open_info_df(ep_loc_v3, res_df, np_timeidx, ID_list, config_list, id_idx_list)  # --> point * dur. 관련 (loc_set) param 에 종속 (open_info 가 변경되는게 아니라면, 재실행할 필요없음)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KqVkg236t_f2"},"outputs":[],"source":["# ------ edit entry & exit (ep, tp, out, ..) config ------ #\n","# config_list[0].loc_set.zone.ei_k = 0.0\n","# # config_list[0].loc_set.zone.ep_out_tick = 10\n","# # # config_list[0].ep_set.point2.use_point2 = 1\n","# # # config_list[0].ep_set.point2.entry_type = \"LIMIT\"\n","# # # config_list[0].ep_set.point2.wick_score_list = str([])\n","# # # config_list[0].tp_set.static_tp = 1\n","# # # config_list[0].tp_set.non_tp = 0 # 0 1\n","# config_list[0].tp_set.p_ranges = \"[1]\"\n","# config_list[0].tp_set.p_qty_ratio = \"[1]\"\n","# # config_list[0].tp_set.p_ranges = \"[0.2, 0.66, 1]\"\n","# # config_list[0].tp_set.p_qty_ratio = \"[0.25, 0.25, 0.5]\"\n","# # config_list[0].tp_set.p_ranges = \"[0.66, 1]\"\n","# # config_list[0].tp_set.p_qty_ratio = \"[0.1, 0.9]\"\n","# # # config_list[0].out_set.hl_out = 1\n","# # # config_list[0].out_set.tf_exit = \"None\" # 15 \"None\"\n","# config_list[0].lvrg_set.leverage = 1\n","config_list[0].lvrg_set.static_lvrg = 0\n","config_list[0].lvrg_set.target_pct = 0.03\n","# # config_list[0].lvrg_set.allow_float = 0\n","# config_list[0].lvrg_set.lvrg_rejection = 0"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":644},"executionInfo":{"elapsed":5710,"status":"ok","timestamp":1650458107285,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"HHq6cr9GPBot","outputId":"e4c45d16-0784-432c-fc88-7eb360df79ec"},"outputs":[{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 3.048435926437378\n","short_obj.shape : (296, 5)\n","long_obj.shape : (426, 5)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1728x576 with 6 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 2.108311176300049\n"]}],"source":["test_ratio = 0.0\n","short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_bias_arr, short_false_bias_arr, short_point1_arr, short_en_tp1, short_en_out0, \\\n","      long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_bias_arr, long_false_bias_arr, long_point1_arr, long_en_tp1, long_en_out0 = \\\n","get_res_v4(res_df, open_info_df, ohlc_list, config_list, np_timeidx, funcs, test_ratio=test_ratio, plot_is=1, signi=False)   # open 이 많을 수록 en_ex_pairing elapsed time : 11.58370590209961"]},{"cell_type":"markdown","metadata":{"id":"n6gc7lERC4VE"},"source":["### statistics (stem 별로 진행)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HHjIdn2MC4VE"},"outputs":[],"source":["strat_version = config.strat_version\n","\n","short_open_i = short_obj[-1].astype(int)\n","long_open_i = long_obj[-1].astype(int)\n","\n","short_open_tp_1 = res_df['short_tp_1_{}'.format(strat_version)].to_numpy()[short_open_i]\n","long_open_tp_1 = res_df['long_tp_1_{}'.format(strat_version)].to_numpy()[long_open_i]\n","\n","short_open_tp_gap = res_df['short_tp_gap_{}'.format(strat_version)].to_numpy()[short_open_i]  # use open_i\n","long_open_tp_gap = res_df['long_tp_gap_{}'.format(strat_version)].to_numpy()[long_open_i]\n","\n","short_open_epout_0 = res_df['short_epout_0_{}'.format(strat_version)].to_numpy()[short_open_i]\n","long_open_epout_0 = res_df['long_epout_0_{}'.format(strat_version)].to_numpy()[long_open_i]\n","\n","short_open_epout_gap = res_df['short_epout_gap_{}'.format(strat_version)].to_numpy()[short_open_i]  # use open_i\n","long_open_epout_gap = res_df['long_epout_gap_{}'.format(strat_version)].to_numpy()[long_open_i]\n","\n","# ------ pairing 된 en, ex_idx 기준으로 survey 진행 ------ #\n","# 0. high, low (exit_done 까지의) -> partial (tpg) 과 outg survey 목표\n","#   a. short -> tpg - low, outg - high\n","#   b. long -> tpg - high, outg - low\n","short_max_tpg = get_max_tpg_v2(\"SELL\", ohlc_list, short_pr, short_obj[:4], short_open_tp_1, short_open_tp_gap)\n","long_max_tpg = get_max_tpg_v2(\"BUY\", ohlc_list, long_pr, long_obj[:4], long_open_tp_1, long_open_tp_gap)\n","\n","# ------ 0. tp 까지 도달하는 최소 idx 도출, en_idx 부터 ------ #\n","#   a. bias_info_tick 의 limit 을 정해주지 않으면 굉장히 길어질 수 있다고 봄\n","# short_max_outg, short_outg_open_idx = get_max_outg_v2(\"SELL\", config, ohlc_list, short_obj, short_tpout_arr, short_open_epout_0, short_open_epout_gap)\n","# long_max_outg, long_outg_open_idx = get_max_outg_v2(\"BUY\", config, ohlc_list, long_obj, long_tpout_arr, long_open_epout_0, long_open_epout_gap)\n","short_max_outg, short_open_idx, short_true_open_idxth = get_max_outg_v3(\"SELL\", config, ohlc_list, short_obj, short_tpout_arr, short_open_epout_0, short_open_epout_gap)\n","long_max_outg, long_open_idx, long_true_open_idxth = get_max_outg_v3(\"BUY\", config, ohlc_list, long_obj, long_tpout_arr, long_open_epout_0, long_open_epout_gap)\n","\n","current_tpg= config.tr_set.tp_gap\n","current_outg = config.tr_set.out_gap"]},{"cell_type":"markdown","source":["#### consecutive dur. value survey on bias"],"metadata":{"id":"tOFkzUX2imQu"}},{"cell_type":"code","source":["res_df.dtypes"],"metadata":{"id":"CgvSrXaZEkMZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gnSvYKIzC4VF"},"outputs":[],"source":["# ------------ dependent vars. ------------ #\n","# res_df 에 존재하는 col 는 모두 사용가능함\n","# ------ 1. 도출한 outg 와 vars. pairing 진행 (by valid_idx) ------ #\n","devided_cols = ['tr_{}'.format(strat_version), 'orr']  # , 'ir_5T'\n","public_cols = []  # 'abs_ratio_5T', 'rel_ratio_5T', 'body_rel_ratio_5T'\n","\n","short_datas = [res_df['short_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","long_datas = [res_df['long_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","\n","titles = devided_cols + public_cols"]},{"cell_type":"code","source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(14, 18))\n","nrows, ncols = len(short_datas), 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        )\n","\n","num_samples = 10\n","alpha = 0.8\n","\n","for ings_idx, (title, short_data, long_data) in enumerate(zip(titles, short_datas, long_datas)):\n","  inner_gs = gs[ings_idx].subgridspec(nrows=1, ncols=2)\n","\n","  short_open_data = short_data[short_open_idx]\n","  long_open_data = long_data[long_open_idx]\n","\n","  short_true_data = short_open_data[short_bias_arr.ravel()]\n","  short_false_data = short_open_data[short_false_bias_arr.ravel()]\n","  long_true_data = long_open_data[long_bias_arr.ravel()]\n","  long_false_data = long_open_data[long_false_bias_arr.ravel()]\n","    \n","  plt.subplot(inner_gs[0])\n","  v, c = np.unique(short_true_data, return_counts=True)\n","  plt.hist(v, weights=c, bins=num_samples, alpha=alpha, color='#00ff00', edgecolor='black')\n","  v, c = np.unique(short_false_data, return_counts=True)\n","  plt.hist(v, weights=c, bins=num_samples, alpha=alpha, color='#ff0000', edgecolor='black')\n","  plt.title('short_' + title)  \n","\n","  plt.subplot(inner_gs[1])\n","  v, c = np.unique(long_true_data, return_counts=True)\n","  plt.hist(v, weights=c, bins=num_samples, alpha=alpha, color='#00ff00', edgecolor='black')\n","  v, c = np.unique(long_false_data, return_counts=True)\n","  plt.hist(v, weights=c, bins=num_samples, alpha=alpha, color='#ff0000', edgecolor='black')\n","  plt.title('long_' + title)\n","  \n","# plt.suptitle(title)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"Sahvc-R0jD1A","executionInfo":{"status":"ok","timestamp":1650342386269,"user_tz":-540,"elapsed":1555,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"229cdf58-b3f1-436a-f4b0-a792a2e16e15"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1008x1296 with 4 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"Arnb-kXlC4VF"},"source":["#### tpg survey for partial"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":741},"executionInfo":{"elapsed":2880,"status":"ok","timestamp":1650080717333,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"jHh0uFkXC4VF","outputId":"97fb68cf-77d7-4f9c-842c-70a8bb26fb8c"},"outputs":[{"output_type":"stream","name":"stdout","text":["186\n","186\n","186\n","186\n","pkx : [-0.40825533  0.81500699  1.18198569  1.85477996]\n","pkx : [-0.39872379  0.48501655  0.6365149   1.14150938  1.39400662  1.72225304]\n","\n","111\n","111\n","111\n","111\n","pkx : [-0.71661626 -0.63018625 -0.43811957 -0.29406955 -0.15962287]\n","pkx : [-0.69082946 -0.5967696  -0.44000317 -0.28323673 -0.21269184 -0.1264703 ]\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 864x576 with 4 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# 1. outg 는 partial 을 위한 histogram 작성 진행\n","# 현재, outg 내부에는 tp 한것과 out 한것이 공존하는 상태\n","titles = ['outg', 'tpg']\n","short_max_datas = [short_max_outg[short_true_open_idxth], short_max_tpg]\n","long_max_datas = [long_max_outg[long_true_open_idxth], long_max_tpg]\n","\n","# titles = ['tpg']\n","# short_max_datas = [short_max_tpg]\n","# long_max_datas = [long_max_tpg]\n","\n","plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(12, 8))\n","nrows, ncols = 2, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        )\n","  \n","for ings_idx, (title, short_max_data, long_max_data) in enumerate(zip(titles, short_max_datas, long_max_datas)):\n","\n","  inner_gs = gs[ings_idx].subgridspec(nrows=1, ncols=2)\n","  if ings_idx == 0:\n","    axvline = current_outg\n","    title_add = 'true_' + title\n","  else:\n","    axvline = current_tpg\n","    title_add = 'false_' + title\n","\n","  print(len(long_max_data))\n","\n","  short_plot_idx = np.ones_like(short_max_data).astype(bool)\n","  long_plot_idx = np.ones_like(long_max_data).astype(bool)\n","  # short_plot_idx = short_max_data <= axvline\n","  # long_plot_idx = long_max_data <= axvline\n","\n","  print(np.sum(long_plot_idx))    \n","\n","  short_plot_idx *= ~np.isnan(short_max_data)\n","  long_plot_idx *= ~np.isnan(long_max_data)  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_plot_idx *= ~np.isinf(short_max_data)\n","  long_plot_idx *= ~np.isinf(long_max_data)  # nan 과 inf 때문에 이 방식 채택\n","  \n","  print(np.sum(long_plot_idx))\n","    \n","  plt.subplot(inner_gs[0])\n","  kde_plot_v2(*np.unique(short_max_data[short_plot_idx], return_counts=True))\n","  plt.title('short_' + title_add)  \n","  plt.axvline(axvline, color='red', linewidth=3)\n","\n","  plt.subplot(inner_gs[1])\n","  kde_plot_v2(*np.unique(long_max_data[long_plot_idx], return_counts=True))\n","  plt.title('long_' + title_add)\n","  plt.axvline(axvline, color='red', linewidth=3)\n","\n","  print()\n","\n","# plt.suptitle(title)\n","plt.show()"]},{"cell_type":"markdown","source":["#### legacy"],"metadata":{"id":"mScdfR9hmjVu"}},{"cell_type":"markdown","metadata":{"id":"xivLUsSGC4VF"},"source":["##### outg survey for precision (eploc vars. dependency)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LB28R3QIjCDc"},"outputs":[],"source":["# ------------ dependent vars. ------------ #\n","# res_df 에 존재하는 col 는 모두 사용가능함\n","# ------ 1. 도출한 outg 와 vars. pairing 진행 (by valid_idx) ------ #\n","devided_cols = ['tr_{}'.format(strat_version)]  # , 'ir_5T'\n","public_cols = ['wave_body_ratio']  # 'abs_ratio_5T', 'rel_ratio_5T', 'body_rel_ratio_5T'\n","\n","short_datas = [res_df['short_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","long_datas = [res_df['long_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","\n","titles = devided_cols + public_cols"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":1655,"status":"ok","timestamp":1649812123691,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"nX9TpLcvFu7T","outputId":"1ebbeec2-fa2b-459c-ee69-9779cb36172b"},"outputs":[{"name":"stdout","output_type":"stream","text":["362\n","362\n","362\n","362\n","\n","362\n","362\n","362\n","362\n","\n"]},{"data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAskAAAQBCAYAAADYXhcOAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nOzdeXSb5ZX48a9krZZtSbajJF6iOJvj4AQDdQIkZGFJoKXj4lIKtKQLTU9p6Z6W0nbCaaDLtEw5MC2UZgJtzgylTGsm8CsMhEI2koCBbM5mJzbybsW2JMuLZEt+fn8YCcvxmngjvh+f9zSW3uWRcF9fP7rPvRpAIYQQQgghhIjSTvQAhBBCCCGEmGwkSBZCCCGEEKIPCZKFEEIIIYToQ4JkIYQQQggh+pAgWQghhBBCiD4kSBZCCCGEEKIPCZKFEEIIIYToQ4JkIXpZsGABBw8epKWlhW9+85sTPRwhhBCDkHu2GEsSJIt+VVRUcN11153XsSkpKezdu5fGxkY8Hg/79u3j6quvHvK4J554Ar/fH90CgQAtLS3nNYbz9cMf/pA33niDpKQk/uM//mPEx9vtdoqKimhtbeX999/njjvuGHDf73znO5w5cwafz0dNTQ2//e1viYuLiz5/1VVX8dZbb9HS0sLhw4dZvnx59LnVq1dz5MgRPB4PjY2NFBUVkZaWNuLxCiEuDnLPHvt7doRer+f48eNUVVXFPL5mzRreffddfD4fZ86cYcOGDdHnPv7xj7Nnzx48Hg91dXVs2bKFhISEEY9XjD8lm2x9t4qKCnXdddcN+HxcXNyAzxmNRrVgwQKl0WgUoAoKClRTU9Ogx/S3Pf3002rr1q3j+rp37Nih7r777vM+/plnnlHPPvusslgsavny5crr9apFixb1u++cOXOU1WpVgLLb7eqf//yn+u53vxv9vrGxUd16661Kq9Wqz33uc6q5uVnZbDYFKIfDoWbOnKkAZTAY1L/927+p7du3T/jPjWyyyTYxm9yzz+/4kdyzI9uPf/xjtWvXLlVVVRV9TKfTKa/Xq7761a8qQH3sYx9Tfr9fLVmyRAHqjjvuUOvWrVNms1nZbDb10ksvqSeeeGLCf25kG3Kb8AHINsm2bdu2qXA4rNrb25Xf71c/+MEPlNPpVEop9eUvf1m5XC61a9euYZ1Lo9Gom2++WSml1LRp04Y9hvj4eNXS0qJWrlw54D6LFi1Sr776qmpqalL19fXq/vvvV9ATND7yyCOqpqZG1dTUqEceeUQZDIbocZ/4xCfUwYMHlcfjUW+++aZavHixAtQ///lPFQqFVEdHh/L7/Wr+/Pkjet/i4+NVMBiMOW7btm3ql7/85ZDHJicnqx07dqjf//730TGWlJTE7HPq1Cn15S9/+ZxjDQaD+sUvfqGOHTs24T87sskm2/hvcs8ev3v27Nmz1fHjx9WNN94YEyQ7HA6llFJmszn62Ntvv61uv/32fs9zyy23qCNHjkz4z45sQ24TPgDZJuHWd1YicsP985//rOLj45XJZBryHIcPH1bBYFAppdQf//jHEV3/rrvuUmfOnBnw+YSEBFVbW6u+973vKaPRqBISEtTSpUsVoH72s5+p/fv3q2nTpqnU1FT15ptvqs2bNytA5eXlqYaGBrV06VKl1WrV+vXrVUVFRfSG/MYbbww6K3HfffepF198sd/n8vLyVFtbW8xj3//+99ULL7ww4PnuuOMO5fP5lFJKud3u6KzDJz7xiXOC3tLSUvXb3/42+n1mZqbyeDwqHA6rzs5O9YUvfGHCf25kk022idnknt3/dUf7nv3iiy+qT33qU2rVqlUxQTKg/vu//1t9/etfV1qtVl155ZWqoaFBZWRk9HueRx55RP3lL3+Z8J8b2YbcJnwAsk3CbaAbblZW1ojOYzQa1e23367Wr18/ouNee+019cADDwz4/O23367ee++9fp87ffq0uummm6Lfr127VlVUVChAPf7449Gbb2Q7efJkdPZjqBvuYNuKFStUXV1dzGNf+cpX1BtvvDHksfPmzVObN29W06dPV9Azs+zxeNTtt9+udDqdWr9+vQqHw+oPf/jDOcfa7Xb1wx/+UC1btmzCf25kk022idnknj3y92yk9+xPfepT6qWXXlJAv0HyzTffrOrr61VXV5fq6upSX/nKV/o9z/XXX6+am5tHPPMt2/hvsnBPjEjfhQpDCQaDPPvss/zoRz9iyZIlwzomMzOT1atXs23btkH3OXPmTL/PpaWl4XK5ot+7XK7oojan08n3v/99PB5PdMvMzByVRW+tra0kJSXFPJaUlITf7x/y2NOnT3Ps2DEef/xxAJqbmykoKOB73/seDQ0N3Hjjjbz22mtUV1efc6zH4+HPf/4z27dvj1n4J4QQcs8e2Eju2fHx8fz617/mW9/6Vr/nys7O5tlnn2X9+vUYDAYuueQSfvjDH/Lxj388Zr9ly5bxzDPPcOutt1JWVnbBr0GMLQmSRb+UUiN6fCh6vZ45c+YMa9+77rqLN998k4qKigH3qaqqGvB8tbW1OJ3O6PezZs2itrY2etzPf/5z7HZ7dLNYLDz77LMjeDX9Ky0tRafTMW/evOhjl156KceOHRvW8Tqdjrlz50a/3717N0uXLiUlJYW77rqLhQsX8vbbbw947PTp08+54Qshpga5Z4/cSO7Z8+fPZ/bs2ezZs4e6ujqKioqYOXMmdXV1OJ1OcnNzKS0t5dVXX0UpRWlpKf/4xz+46aaboufIy8vjhRde4Mtf/jKvv/76BY9fjI8Jn86WbfJt+/fvVxs2bIh+H/nobjirnZctW6aWL1+u9Hq9MplM6oc//KFqaWmJVmMYajt58qT60pe+NOg+kfy2b3/728pgMMTktz344IPqzTffVKmpqSolJUXt2bNHPfjggwpQV1xxhaqsrIzuGx8frz7+8Y+rhIQEBRf20R2g/vKXv6hnnnlGxcfHq6uvvnrQldJ33313dGFMTk6OKikpUf/+7/8efT4vL0/pdDqVmJioHnnkEbV3797oc7fcckt0NXpqaqr661//qt59990J/7mRTTbZJmaTe/b5vW/DvWfHxcWp6dOnR7dbbrlF1dTUqOnTpyutVqvmzJmj/H6/WrNmjYKe6kVlZWXR/yaXXHKJqq+vV7fddtuE/6zINqJtwgcg2yTc/uVf/kW5XC7l8XjU97///RHdcFeuXKkOHTqkWlpaVFNTk9q5c6e65pprhnXdK6+8UrW2tkZvgINtl1xyiXrttddUc3OzqqurU/fdd5+Cnpy6Rx99VNXW1qra2lr16KOPKqPRGD1u3bp16u2331Yej0fV1taq5557btg33Pvvvz+ak9bfZrfb1fPPP69aW1uVy+VSd9xxR/S5FStWKL/fH/3+qaeeUvX19aq1tVVVVFSoX//61zHjfOaZZ5TX61Ver1c9++yzMSvN7733XlVeXq5aW1tVXV2d+stf/qJmzZo14T83sskm28Rscs/u/5qjec/uvfWXk/yZz3xGHT16VLW0tKiqqir1q1/9KlpW76mnnlLhcFj5/f7o1reCkWyTb9N88A8hhBBCCCHEByQnWQghhBBCiD4kSBbn5c4774xpRxrZSkpKBj3upZde6ve4+++/f5xGLoQQU4/cs4UYOUm3EEIIIYQQog/dRA+gP263O6Zm4mTysV7/fmfCRiGEmKycTicOh2OihzGuJuM9W+7VQojhGOyePSmDZJfLRX5+/kQPo1+9p90n5wiFEBOpuLh4oocw7ibjPVvu1UKI4Rjsni05yUIIcZHZunUrDQ0NHD16dMB9Hn30UcrKyjh8+DCXXXZZ9PH169dTWlpKaWkp69evH4/hCiHEpCRBshBCXGT+9Kc/ceONNw74/E033cT8+fOZP38+X/3qV3niiScAsNvtPPDAAyxbtoylS5fywAMPYLPZxmvYQggxqUiQLIQQF5k9e/bQ3Nw84PMFBQVs27YNgLfeegubzcaMGTNYt24dO3bswOPx4PV62bFjx6DBthBCXMwmZU6yEEKIsZOenk5VVVX0++rqatLT0wd8vD8bNmzgq1/9KgCpqaljO2AhhJgAMpMshBBixLZs2UJ+fj75+fk0NjZO9HCEEGLUSZAshBBTTE1NDZmZmdHvMzIyqKmpGfBxIYSYiiRIFkKIKeaFF16IVq5YtmwZPp+P+vp6XnnlFdauXYvNZsNms7F27VpeeeWVCR6tEEJMDMlJFkKIi8wzzzzD6tWrSU1NpaqqigceeAC9Xg/Ak08+yUsvvcTHP/5xTp8+TXt7O1/60pcA8Hg8PPjgg9G6oZs3b8bj8UzY6xBCiIkkQbIQQlxk7rzzziH3uffee/t9/Omnn+bpp58e7SEJIcRHjqRbCCGEEEII0YcEyUIIIYQQQvQhQbIQQgghhBB9SJAshBBCCCFEHxIkCyGEEEII0YcEyUIIIYQQQvQhQbIQQgghhBB9SJ3kCZBGGvnk48CBGzfFFFNL7UQPSwghppTJei+erOMSYqqRmeRxlkYaBRRgwUI99ViwUEABaaRN9NCEEGLKmKz34sk6LiGmIplJZnz/as8nHx8+WmgBiP5vPvlsZ/uYXFMIIS5Gubm5FBYW4nQ6cblcFBUVUVJSMqxjJ+u9eLKOS4ipaMrPJI/3X+0OHPjxxzzmx48Dx5hcTwghLka5ubls3LgRu91OVVUVdrudjRs3kpubO6zjJ+u9eLKOS4ipaMoHyb3/alcoWmjBh4988sfkem7cJJIY81giibhxj8n1hBDiYlRYWIjH48Hr9aKUwuv14vF4KCwsHNbxk/VePFnHJcRUNOWD5PH+q72YYqxYSSIJDRqSSMKKlWKKx+R6QghxMXI6nfh8vpjHfD4fTqdzWMePxr048knkBjaM2ieQ8jtCiMljygfJ4/1Xey21bGc7bbQxgxm00cZ2tsvKZSGEGAGXy4XVao15zGq14nK5hnX8hd6LxypVT35HCDF5TPmFe8UUU0AB0DODnEgiVqzsZOeYXTNyExRCCHF+ioqK2LhxI9Azg2y1WrHb7WzdunXY57iQe/FYLrCT3xFCTA5TPkiO3IzyyWcGM3DjZic75a92IYQYIxdSlSKipKSEhx9+OOY8W7duHfF5zpcDB/XUxzzmx88MZozL9YUQY2/KB8kgf7ULIcR4iVSl8Hg80aoUm768ib2P7KWjqgM3bvwL/Ky4fcWQQXRJScm4BcV9RVL1IjPIIAvshLjYDJmTvHXrVhoaGjh69Gi/z995550cPnyYI0eO8Oabb7JkyZLoc+vWrePkyZOUlZVx3333jd6oz0Nubi6bNm1i69atbNq0qd8yQWOxCEMIIcSH+lalCLvCpLyZwjVXXEM99WSnZ/PQ0ofIIOO8Srv1Z7D7/vmSBXZCXPyGDJL/9Kc/ceONNw74fEVFBatWrWLJkiU8+OCD/PGPf+w5sVbL73//e2666SYWLVrEHXfcQU5OzuiNfASGU09TuhwJIcTY61uVIr02HY/yYM20olAsWbEEr/KSUZfBypUrWbVqFQsWLOCee+4Bzm8yY7SC7d5kgZ0QF78hg+Q9e/bQ3Nw84PP79+/H6/UCcODAATIyMgBYunQpp0+fpqKigq6uLp599lkKCgpGadgjE5m5CLvCZB/PZs5rc7DvsvOF674Q3We86yULIcRU1LcqRXxbPDqbDre7J03B4XCgEhSXOC7BbDbj8/nQaDTccMMNXLvg2vOazDifOsrDEQmUt7BFAmQhLkKjWgLu7rvv5uWXXwYgPT2dqqqq6HPV1dWkp6cPeOyGDRsoLi6muLiY1NTU0RwWTqeT7spusk9lo+/S05rQSpevi6sbr47eXKXLkRBCjL2ioiLsdjs2mw2NRgMOsOvs7N+/HwC32838GfPpSOggEAhEj2tsbOQreV+5oMmMkdRRFkKIUQuSV69ezd13333eucdbtmwhPz+f/Px8GhsbR2tYQM/MxTzvPIKmIEFjEDSgs+uobauN3lyly5EQQoy9SFUKj8dDZmYmpUml7H5xN55KDxo0HNl7hCSVROuiVgBMJhMmk4lDhw4xyzTrgiYzhqqjLOtShBC9jUqQvHjxYv7zP/+TgoKCaGpGTU0NmZmZ0X0yMjKoqakZjcuNWFFREandqejsOjQaDRaLhYSEBHa9uyt6c5VFGEIIMT5KSkrYvHkzd999N3/+558x3WbiS9/4El/5xFcIaAO8rH+ZzmmdWK1WOjo62LdvH8FgkMpA5XlNZmg0Gmw2G3a7naKion73kXUpQoi+LrgEXGZmJkVFRdx1112UlZVFHy8uLmb+/PnMnj2bmpoabr/9du68884Lvdx5KSkp4a++v3LNFdeQmpmK2+1mx44deKo8tNEGSL1kIYQYb73Lwb3pexPrPCuXf+Zytm/fTkFmAR6PJ9ooJCsrC2+bl2/ov0FtWy273t1Fc1XzsJo/ZWZmDllHeSybgwghPpqGDJKfeeYZVq9eTWpqKlVVVTzwwAPo9XoAnnzySTZt2kRKSgqPP/44AKFQiPz8fMLhMPfeey+vvPIKcXFxPPXUUxw/fnxsX80g/lb1N7qquvDhG7CzntRLFkKI8dO7HBwQ/d/FixfHNArp6OgAwGPxcMBxgHneedxx7R389fW/8reqvw05mXH33XcPORZpDiKE6GvIIHmo2d8NGzawYcOGfp97+eWXowv5JprMFAshxOTidDpjFnjDh4vrejcK2bRpE11dXYRdYdJr06ENGh2NZBZmUvvo6NzDpTmIEKKvKdVxT2aKhRBi8nC5XNjtdgwGAzk5OdhsNgKBAAcPHozZz+l04i3xkn0qm6ApSGtCK0afkas7eyoUjcZkRzHFFNBTpnSgTxuFEFPLqJaAE0IIIYYjjTS8T3tZXbqam0M3k+RPIhgMYrVaSU9Pj2n6MZwKRRfqfJqDSDUMIS5uEiQLIYQYV5HgsrGqkZpwDcHmII79DsKuMDt37qSioiKm6cdwKhSNhpE0B5FqGEJc/KZUuoUQQoiJ17uShMFo4J3SdzAEDHSVd+HOcaPRaGKafgynQtFEvgaQahhCXIwkSBZCCDGueleScLvdJCQk0NbdRkJrAtB/049IhaLE9ESWLF/CrWtvpbWmlUfOPAKl4/4SpBqGEFOABMlCCCHGVe9KEvv37+eWW27BEDDgs/iiTT+2bt0ac0wttZxacIqfrPsJ3fXd1LfU48/3s/6z63E/7B6w/vGFSCONfPJx4MCNO9pcKp988shDh44OOtCipYUW6qijmupRH4cQYmJITrIQQohx1bvDaWVlJa/+7VXCzWHIB4/Hw8MPP9xv0Lvi9hXU5NcQd08c2T/KZt7qeWi12pj85dHSX87x+g++LFgopZTFLCaPPMKEsWFjBSuoomrokwshPhJkJlkIIcS46lu3/lTNKf6r5r+ofXnwUm55eXlkZWURCATw+XyYzWYWL15MWloamzZtwul04nK5elpPX+DMcn85x9OYBkAJJSxiEWWUsYAFXMu1nOIUhzhEJpm8x3sXdG0hxOQgQbIQQohxlZubG+2m53K52F+0n9qSoWsd22w2lFIEAgEAAoEAVquVRYsWcfToUaqqqrDb7WzcuBG++MULGuMCFkRnu1tooZRSDBiiz6eRRiqp1FKLAQMuXGSQQRddF3Tdyai/tBNpxCWmAgmShRBCjJvc3Fw2btyIx+OJCWr7S7HoG0x3d3ej1WoxmUwEAgFMJhN2u53W1tZzWlsPdv3e5ywqKjrnupdzOddyLUaMuHGjQ8eVXEkccbTSCkACCXTTDUD7B19mzNixj9ZbNSlE0k58+KinnkQSKaBgyBJ5QlwMJCdZCCHEuCksLMTj8eD1elFK4fV60Wq1PPbYY2zdupVNmzaRm5sbDabtdns0mE5JSaGyspKOjg6sVisdHR20trb229q6P/2dc+PGjTGNS9JIYwMbqKeeDjqwYMGJE/MHX2c5SxJJtNKKCROJJFJLLWbMaNHiwTOm79946512olC00IIP36g1cRFiMpOZZCGEEOPG6XTGBLUOh4MlS5ag0+nYvXt3NHBtbW2NBtPQM0N89OhRcnNz2bVrFz6fD6vVit1up7o6tqKE1Wrt99q9A/TIOSOPR2aT88lHh44qqvDiJY00rFixYKGYYv6b/yaffDrooJxyOuggjjjaaOMYxy666hZS6k5MZRIkCyGEGDculwu73R4NUHNycuju7sbtdkdnlgFWrlzJiy++GHNseXk5CQkJeDyeaLrE5s2bKSgoIF2lk3gykVSVinZG/x+S9g3QoWfWOS8vL7rwL7UolfoD9ZibzLR88AU9M8yllEYXHRZTHE1D8OMnkUSsWKNl4i4Wvcv1RSSSiBv3BI5KiPEhQbIQQohxU1RUxMaNG0lJSSEjI4O8vDwCgQClpR92BImkS1it1pgcY6vVyqFDh9i8eTPw4YKyxr2NrMxcSVd2FxXhCo4UHeHafq7d0dHB2rVrMZlMeL1eTpw4QWJiIrNnz8blclFVVUWqI5UlNy7B9ZKLKk8VHXSQTDIhQjEBcN8KHW7c7GTnOXm6H/VFb5E/BoCYPwZ2snNiBybEOJCcZCGEEOOmpKSE7du3s3jxYhwOB16vF6/XS3Z2Ng6HA+gJhg8cOIDdbsdms6HRaKJNRoqKioDYOsaBswFOl59Gd0pHpiWTJSuWnHPd3NxcMjIysFqtBINBzGYzq1evJj8/n5KSkmiOdJm1jPZAO5Z8C0GCzGQmccSxhS3nBLeRQHkLW/pdyNZfreUCCkgjbYze3dEXeY1ttDGDGbTRJov2xJQhM8lCCCHG1eLFi9m5cyderxeHw8FNN91Eeno6CxYsoKmpibKyMr797W8D8LWvfY1PfvKTABw4cCB6jt4LyrLsWSxavoiQPwRlkJCdcM41CwsLqaiooKamhpycHGw2Gz5fT4e/8vLy6H5+q59DmkMs6VyC61UXxR98nU9Q2F+t5cjj29k+4vNNlEigPJCP+my5EAORIFkIIcS46p0bnJycjN3+Ydm0uLg45s2bx/z58ykrKyMhIYHdu3dHF+pFysU5Sj5cUJa+KJ0ufxdt4TZMARNtbW0DXlMphdvdk0+r0Wj45Cc/eU5ah3aWlj2ePWxhywW9zqmw6G00S8RJsC0mG0m3EEIIMa5cLhdWqxWHw8G6deswGAwopfB4PJSWltLU1MQ3v/nNfsvFeTweCgsLowvKADTzNahWhbnDjM6u49KsSwe8Zm9Wq5X9+/cPmtZxIXqPEcA5y8m9X7iX+x6+j3fffZff/e53MeXnRlskgN3AhjFL8xitEnEXQ2qKuPhIkCyEEGJcFRUVkZWVxerVqzGZTIRCIXQ6HUajEYvFgs/nIz09HafTeU7NY5/Ph9PppJjiaEe8qvYq/Jl+LCYLM3NmokuK/ZA0NzeXoqKifoPhP/zhDzz88MN4PB4yMzMJvR/ivX99j6tKrrrgIK33GGdnzuaLhV8kNyMX73wvnZ2drFmzhoceemhMAuXxCjodOPDjj3nMjx8HjhGdR+oxi8lIgmQhhBDjqqSkhJqaGnw+H6FQCOipWRwKhZg3bx65ubno9fpo2+nerFYrLpcrZkFZ2Z4yyITADwJU3lGJZ3VsQ49IHeTewbDH42HbL7Yxt2QuV5VcxeHNh/n93b+n/NFyGqsaRyWw7D3GG5bcQIIjgbqldfiT/AQCAVpaWnA4HBQWFp7fGzmI8Qo6+86Ww/mViButYFuI0SQ5yUIIIcadyWTi1VdfxeVyccMNN2AwGDCbzcTFxdHe3k5JSQnp6ekAtLS0kJmZybRp0+jq6mLz5s0x+auH6g6x55U9/OaLv8GoMZ7TmtrpdAI9wXmkaUh/ubQb2EAJJaOy0K5v++twXpiO2R34fR8GgpE/AiLjG03jlQ89WiXipB6zmIxkJlkIIcS4i+QInzx5kh07dqDT6YiLiyMQCLBjxw7effddKioqaG9vJzc3l2nTpuF2uzl69Ch3XHMH98y8J5pKkEEGnyn9DGd/cJaq/6jivRfei7lWVlbWOSkN/c206tAxk5kx+53PbGZ/7a+zsrLQarWYTKbofiaTiUAggMvlGuG7N7TRmuEdymiViOudmqJBQxJJF2VzFvHRIjPJQgghxl2kqQjAqVOn+NjHPhbtpjd9+nSam5s5e/YsK1euZNeuXTGzw5dXXs7CZQt563/fIplkLuESwoRxHXaxcN5CVjSviLlWdXV1tCpGZCa5v5nWBhqYzvSYx/oLLCOz2AtYgB07HjyUUhqtxtBf++ujR4+Sn5+PXq+PnicpKYmysrJRWSTY13g2ARmqRNxIzjFUcxYhxpMEyUIIIcZdJEe4sLCQvLw8LBYLHo+HhoYGkpOTueWWW2hrayM+Ph6j0RhzrOasBuvsnlzlBSyglVYCBLA32Xnu/57jns/dE7P/mTNnsNls0dxk6P/j/TrqSCGFJJIGDCwjaRpatGSRRTfd2LDRTjtppLGd7f22v4601K6rq+PKK68E4I033uAPf/hDdEyj6aMYdI5GsC3EaJIgWQghxLjqm69bW1vLa6+9Rn5+PgsXLiQpKYnu7m70ej01NTWsWrWKnTt3ApCTk8Nc+1z8DX6cs5wkVSbhwUM88fjw4ap0Ueuv5ZI+14xUxYjob6a1m262sIVMMgcMLCNpGotYRBtttNOOGTMzmclxjpNPPi6XC7vdjtfrJdGXSHptOqkqlbPHz/Lz534ePY8DB3OZSzPNYxK8StApxIWRIFkIIcS4yc3N5aGHHsLpdJKeno7ZbEav11NZWYlOp8NsNtPd3U04HEav13PixAmWLFnC8uXLAeju7sa/0E/re63cduNtnPz7SVKaUtCipYSeGVlfte+c60aqYkQMNtP6Hu+dc3xEJE3DihUPPVU0OujAjj26MC6SSmLxWEgrTUNr16JJ0XDo74dYz3oAKqm84OYbEdKEQ4ixIQv3hBBCjJt77rmHyy+/nAULFmCz2dDpdGi1WmbPno3VaqWzs5PGxkb8fj8tLS1Mnz6dXbt2MW3aNHQ6HV6vl11ndrE3eS/eLi+zL51NHHEc4xjNNJNEEiffOhlzzYEahEQC5S1siQlSB2vCEUnT8OHDjBkAM2ZaaInmL0dSSRJOJmBJs9Acaub5/32e48tC0wQAACAASURBVDXHmfbB12iVZpMmHEKMHZlJFkIIMW5Wr15NcnIycXFxdHd3o9FogJ521DqdDo1Gg9FoRKPRUFVVhc1mIxgMUl9fz4svvohSqudEVjhoO0jmikwefP1Bbs28la8s+Qrxs+M5pDsEj354TY/Hw9atW2Nyf/umfBQVFVFSUjJkm+VImkYddVzCJZgxo0XLMY7F5C+XlJTwRskb1FOPQkWva8BwzntyIaXZelfpgP7L1g30WoUQg5MgWQghxLiJdLzrvQEopTCbzYRCIUKhELW1tYTDYUKhEHa7nQMHDmC1WvvN8124YCGX//hyyj3l+Hy+cxqQbN68Oeb7SIk2j8cTLdEWqX4xt2TuoEFn7zSNeOKj1S2qqY6mOUSC0muarsFb42XneztxVfakenTSec57ciGl2fqr0qFHz1rW4sCBOdPMii+voEZTc85rlUBZiMFJkCyEEGLceL1ekpOT0ek+/PWj0Wjo7u6mq6sLr9dLS0tPYJqSksKOHTt44oknANi4cSMZZLDYs5j4y+Pp1HdS+0otj9/4OGRA7axaTpw4gds9eMDZX4m2yON1JXVDNuEYbEFc7wD8iP8IeXF53HbjbfzPy/9Dc1UzZzkLMGgFjZHoW6UjmWRWsQoPHuqpZ/0V60l+M5nKzEqUVcW8VgmShRicBMlCCCHGzZEjR5g7dy5KqXNmkoPBINXV1VgsFpqbm/n85z8fE8ht376df1/x7+jSdHjDXjpaO7i+8Hq0rVrO7juL+QYzV199Nfv27Rt0DE6nk2AwyKpVq7DZbHi9XtxuNytXrqS5qfmc2d+RzPRGAvCwK0x6bTohT4iE5gQ+Of+TPF71ONvYBjBqpdn6Vum4lEsBOMIRFAprphVPjYf02nROWntytftW+hBC9E+CZCGEEOOmqamJYDBIZ2cnRqMRnU6HUopAIEB9fT0vvfQSGo2GzMzMc2Y6Fy9ezJkDZ3Br3aDpmbXt6OjAkmjBctZCU6AJ6CkTN5iOjg7WrFlDS0sLPp+P5ORkLrvsMlwuF0cM587+jmSm1+l04i3xkn0qm6ApSOO0RvxdfmaaZ8ZUnRit0mx9q3QYMbKb3TTR81643W4SbAnoGz5sYtK30sf5kqoa4mIn1S2EEEKMG7PZTGVlJd3d3YRCIYLBYDS9wmq1smrVKubMmdNvEOd0OmnUNGLs7GkuYrFYaG9vJ+wNo3Foom2eHY7B20hHZq8jkpOTCYfDPWNJauFg5kG8XV5uWHLDiNssu1wu5nnnETQFCRqDoAGdXUdtW+15V7AYSu8qHTvYEZP3vH//fuw6Ozh6XvdAlT5GSqpqiKlAgmQhhBDjpqOjA7PZTGdnJ83NzbS1tZGYmEhcXBw1NTXYbDauuuoqjh49es6xLpcL/0I/xoARY9BIuCtMemI6CeEEfAt8aLVapk2bNmROsslkYteuXXR0dGC1WtHpdJSXl0dbRvutfg46D9JY2Dji+sVFRUWkdqeis/dU6rBYLCQkJLDr3V0sYMGApeVGSzHFWLGSRBIaNHgqPex+cTelSaVkZmbi8XhGZdFe76oao1HKTojJSNIthBBCjJvILK5Go4nWPo58n5GRQWNjI21tbfz0pz9l8eLF0RnPSPvqrKwsTttPk3AiAVunDcNMA65sF4GkAEkJSZSVlfHTn/6U3iH2BjbEpANEOuLt2rULICY3OcJqtdJ8pJkCCkaUTlBSUsJffX/lmiuuITUzFbfbzY4dO6AK5jCHGmpGrYlIf/prkvJE3RPUPjo614ikWHyaT1NJJaWU0kwzcGGl7ISYjCRIFkIIMW5mzpyJVquNdtaLBM16vZ6EhASsVitVVVW0t7djt9t56KGHAKioqODIkSO0traSuyoX0zoTZ7xncLlcTNdPx2a04fP5qK6uPmeWtG9QGumIB2A0GklOTmb27Nm8//77TJ8+nWAwSLpK59Rzp6LpBCMJav9W9Te6qrrw4YtWsLiGayihZNB6xqNlrNpR964hXUklNmxcyZUc4ADNNF9QKTshJiNJtxBCCDFubDYbRqMRv9+PVqulu7sb6JlJNpt7OthlZGREy8E5HA4cDgderxelFGfOnGHXrl3RahjZ2dlAT+7tq6++Gj1Hb5/97Gf54je/yLWfupZbM2+NdsTT6/Vcf/31tLe388orr9De3s7111+PXq9n7yN7OVF34rzSCSJBahttzGAGbbRRTjmVVMbs58ePg8HzpyP6dgG8nMvHPHWjr94pFmWUoUVLN90sYAFJJGHFSjHFYz4OIcaLzCQLIYQYN16vN1rVou8COq1Wi8FgIBQKRR8zmUznnMNoNEZnfH0+H2ZzT+m3o0ePcvr06XP2T0hIoLGxkfjkeD577Wd5/d3XKSkpwe12s/O/dpJRl8GShCUYqgx45nnQaDR0VHXgxx9znpGkE/SdzS2gIKaeMQy/tFzfLoCzmMWX+BINNND5wVcOOWxj25hWl+jduKSJJt7iLeYzn1nMopjic0rZSfUL8VEnM8lCCCHGzaFDh2hpacFisaDT6dBqtR+2mqZnRjkcDpOYmAhAIBAgEAhEn3c4HNx8880AzJgxA7vdTiAQQCkVk8PcW7e7m9mnZ3PJG5cwc/9MHpz9IGmkkZOYQ/apbHKcOTAdAs0B7Hvs3Lj4RsyZZhJJjDnPhaQT9F1QN5KZ176L5OYzHxs2HDjw4InO5q5j3XmNbbgijUsimmjiOMf5O38/Jw1Fql+Ii8FFM5MsvemFEGLy8/l8TJs2DaUUoVAIvV6PRqOJtqOOi4ujq6uL9PR0vv71r2MwGPB4PMydO5fW1lZWrVpFQkICp0+fxmAwMH36dAwGA/X19XR3d1NYWMh3v/tduPvu6DVz6nNwdDjQJetocbRwWetlrGc9pl0mZl4xk4AhQFdXF1ggrA8T3hsmszCTrke7AM7pjHc+M6T9LagbThORNNK4gRtQKHz4OMtZlrOcOOKwYKGCiuiM9xVcwdM8fYH/hQbWt3HJYN0Cewf2MLY52EKMlYtiJjnSBtRut8f0ps/NzZ3ooQkhhOiloKAAt9tNMBiMNhJRSqHVagmFQrjdbkwmEyaTiWAwiMvloru7m/z8fFavXo3P56OsrIxwOIzH4+H999+nvr6e6upqkpOTo78HeksjDWVT+Jw+4tLiMGWYWGhfSGBvAMt0S3Q/vV5PnDWO+qP1JC9JPievOBLcne8Mae96xsNZABiZjQ0SJECAFFIopBATJro++MomOzq7q0Ez6PkuVH+51gO9DgcODBi4kitZxzqu5EoMGIadgy3EZHBRzCRH2oBGyvdIb3ohhJicsrKySEhIIBwO09HRgdFoRKvtma/RarXY7XZCoRCtra2cOXMG6KmtrJTCaDTy6quvkp2dzapVq4iLiyNwOoD+hJ65tXMpf6ecsDaMsqqYawadQdqMbej0PXnQDb4GFs5ZyDvvvkPJgRJm5c4iPj6etrY2Ko9VEjAFcLlc/VaJiOQGj8cMaWQ29jCHuZIrmcEM/PhJIIEkkiinnAABssjCg4c97BnV6/dnuJUzQoRYyUqaaMKDBzNmVrJyXMYoxGi5KIJkp9N5zsyB9KYXQojJR6fTYbFY6OrqIhwOx+Qjt7S0YLfbiYuLw2g0kp+fj8fjoa6uLjrrPGfOHBYuXIjb7cbeZid5bzJd8V24DW6aqpvI7sjmVPapmGt2dHdgwkRHqIO6+jo6fZ0k2ZN4l3fx7PBgMpnwhDyEvCHsGjvB5UGKnuq/I13vxWsRY1UfOHItheIAB7iN21AoPHg4wxn06DFgwIiRt3iLV3hl1MdwoVSvLyE+aoZMt9i6dSsNDQ39dj8CyM7OZt++fQQCAb7//e/HPBepa3nw4EGKi8euLIzL5cJqtcY8Nlq96YUQQoyeYDCIRqNBo9Gg1+vp7u5GKUV3d3d0IV9kMV9cXBx2u525c+ei1WrZv38/ixcvRimFx+OhY3cHjV2NHCo/hCZOg86uI2gKkl6bHnPNyo5Kao/WUldWR6enE1vIRkOogVd4hSfqnuDvL/8dTYMG60wr72W8x+anNg/4KWTfxWsw8gV9fcu5DZSq0ftazTRziEO4cHGAA/yDf3CMY9RTzzu8M+aVLUZKh45d7KKTTuzY6aSTXexCd3HMzYkpYsif1j/96U/87ne/Y9u2bf0+39zczLe+9S0+9alP9fv8mjVraGpqurBRDqF3YXifz4fVasVut7N169Yxva4QQoiR8fl8hEIhHA4HJpMpumAPesq9RXKUNRpNNGjW6/UkJibyhz/8gbS0NGw2GzabDeVWHGs/RktLCyaTiYSEBFpVKwa3IeaadTfUYT1gxXbG1rMQMMfDL/f9MhpUPlb1GI9VPTas8Q+1eG2oRX19y7kN1qSk77XqqGMucznBCZpp5jjHqaFm1Lv2jQY3bixYOMCB6GNJJOHFO8hRQkwuQ84k79mzh+bm5gGfP3v2LO+8807PyuAJEikM7/F4RrU3vRBCiNF14MABwuEwp06dwu12093dHa1wodVq0Wg00SA58u9I1QvoKSFXXV2N1+vFkG5gdvJsZsyYQXl5Oc8//zxdzV2YnbENRY795hhNNFF+eznP3/A897xzD6+Xvn5e4x+oUci93Mv/8D88xVNcwiUDLurrW85tsCYlfa9VTTW/4TdUUz3kwrmI4c5aj7YLKXknxGQxpp97KKV49dVXUUrx5JNPsmXLlgH33bBhA1/96lcBSE1NHfG1SkpKJCgWQohJ7oknniA9PZ3Zs2djsVjQ6/WEQqFox73eOcperxedTkdcXBxarZZ77rmH1157jbvuugu/3099Zj2ZjZmkpKewf99+PJUeXq98ne1sp6bXNd+re4+y58qwPmeNBpV9y4bufXYviaWJwyrr1nvx2uVczg/4AU00ESaMBg3rWEcbbZyhZ+Fh70V9I81p7m+h3Hu8N6z3eiSz1qPtfEveCTGZjGkJuBUrVnDFFVdw00038Y1vfINrrrlmwH23bNlCfn4++fn5NDY2juWwhBBCTJCSkhJ++tOf0tzcTE1NDa2trXR1dREKheju7o6ZUbbZbJhMJrq6utDr9Xzuc5/jRz/6ESdOnMDr9WKeb6Yyr5KTlSfJTc3FiJEAAT7BJ2KuqVDo0JFHHlvYwl9sf+GJjz1BBhlUVVWRQQYPLX2I7PTsEZd1u5Vbafrgy4KFZprx42c5y4FzW0+PRk7zcI1k1nos1FJLMcW4cePAQT750kxEnGOiPu0YjjENkmtre/5iPHv2LM8//zxLly4dy8sJIYT4CCgpKaGiooK//e1v+Hw+Wlpaop31wuEw4XA4um+kPJxSipaWFpxOJ5mZmZw4cYLt27ez48QOdiXvon11OyZMBAmeM1ObTDLXcR1ZZKFDR2Z2JvZjdrJ2Z5HgTSDxZCJe5WXJiiUjDiYzyKCZnpTENtowYMCPn1R6PhGdxSyyyOIH/IBf8As+xse4hmtw4hzzNAQHjn5ba49XrWLpuieGMtl/RsYsSI6PjychISH677Vr10o6hBBCjIN169Zx8uRJysrKuO+++855ftasWbz22mscPnyYN954g/T0D6tBhEIhDh48yMGDB9m+few6o0WqEgUCATQaDQaDAZ1ORzgcprOzk+7ubtra2qJVLzQaTbSrnlKKnJyc6LmsViuqWMXMmvZ2MzfjwEEnnXjxEj8tHq/Oi6XDQnptOvFt8XjDXhyOD4PH4QSTaaQxI2EGn8v8HJ+/4vPMXTyXVEsqySTTSCNOnKxgBa20kkUWSSSRQgpVVLGMZRRSyHKWEyAw6HXO13BnrYeayTvfmb6JnskWk99k/xkZMif5mWeeYfXq1aSmplJVVcUDDzyAXq8H4Mknn2T69Om88847JCUl0d3dzXe+8x0WLVpEamoqzz//fM9FdDqeeeYZXnll8tVwFEKIi4lWq+X3v/89N9xwA9XV1RQXF/PCCy9w4sSJ6D4PP/ww27ZtY9u2baxZs4Zf/vKXrF+/Huhp3HHZZZeN+TgjVYm8Xi+dnZ2YzWaMRiNtbW10dHRgNpuj5eAAqqqqCIfDVFVVYTQacTgcaDSaaDWjU3tO4cePc5aTa5dcC//v/0WvlUQSmWTSQAOllJLRkEFqIBW9T09cKI7ambXY4my43R8Gj0OlQKSRxj0z7yFlWQqGgwYCzQGSDckkZyfjOe7h7cDbpJPOXvYyk5m00koHHcQTjwMHIUJ48LCTneeVK9w3p7qoqOiciajhtJEeKm/5QvKax7OmtPhomuw/I0MGyXfeeeegzzc0NJCZmXnO436/n7y8vPMfmRBCiBFbunQpp0+fpqKiAoBnn32WgoKCmCB50aJFfO973wPgjTfe4H//93/HfZyRqkQ/+clPuP766wmFQgSDwWg5uPr6eqZNmxaThmEymdi3bx+JiYlkZGSQmZmJy+Vi69atzK2bS056DmtvWUtCSULMtUwWE+1t7QQJokFD+HiY+DnxBC1BwrowqeFUzB1mdr61Ew2afoPJvvLJZ+GyhVSlVOFe4CazKhOL30KnvpPiO4v516f+lQ1soJ56ssnGgweADjrIIYcTnCCFFJaxDCtWOulkHet4mqeHfO9yc3PZuHEjHo+Hqqoq7HY7GzduPKeq03AWz/WeyYNzOwgO9fxgIjPZkWNg7PKvxUfTZP8ZGdOcZCGEEOMrPT09pgNpdXV1TDoFwOHDhyksLATglltuISkpieTkZKCnVnFxcTH79++noKBgzMcbDAZ5+eWXOXr0KE1NTZjNZjo7O6mtrWXfvn00NTVFUyz2799PZ2cnSUlJMUE/9MyaXrPkGjobO+lbirdpTRPHOU4iicxmNr42H9VnqvFr/XTldFFvrGf7/u2cqjk17NJqDhxYM6y0t7fTnNLM4bzD7Fuxj1OzT2FY3lOnuXcAYKanLF3kfxNIYCYzMWLEg4duurmO64aVylBYWIjH48Hr9aKUwuv14vF4ov9Ne4sEylvY0u9rGipv+ULymospZhazWMMa1rGONaxhFrOkDJyImuylAqX1jRBCTDEbN27kd7/7HV/84hfZvXs31dXV0cVyTqeT2tpasrKyeP311zl69Cjl5eXnnONCy3ZCbLB35swZdu7cydy5c8nIyKCiogKXy8X999/P/Pnz+eY3v8l1112H1+ulra2NlpYWMjMzWbZsGbfccgubN2+m9epWKIYUlRJzncSsRF7ndXz4WMxi2mijuL2Yd4+9S/OxZjRomMGMIWdGe3PjxlftIz4lnra2NgCMnUaMZiPmV8xsYAMhQkxnOnXUcQmXEE88WrRUU8085nGa07TTDvRU4GigYVgztE6nM+YPIehp0uJ0Ooc9/t6vY7CZvMk+0yc+2iZ7qUAJkoUQ4iJSU1MTkwKXkZFBTU1NzD51dXV8+tOfBsBisfDpT38an88HfFiVqKKigp07d3LZZZf1GyRv2bIlWvu+uPj8Zn36C/bKy8vp6uri7rvvBnpSCwoKCjh8+DC7d+9m7dq1zJo1i5kzZ+L1ejl79ixWq5V//dd/Zd++fXRd1UVNWg1Le5US9lX56KabX/Er8snHguW8gr7e3fRChKh5s4bLbrkM4iHkDTE9MB2z2cw/3/pnNH8XoJ12KqjAjh0PHhppZBrTAMgmGxs2FIr/4/+GNUPrcrmw2+14vR9OmVutVlwu15DH9jVU3vJw8poHkk8+lVRSwocpIEkkDesPATF19FcLfLKQdAshhLiIFBcXM3/+fGbPno1er+f222/nhRdeiNknJSUFjUYDwP33389TTz0FgM3W07Y5ss/y5cs5fvz4mI01UuGit77BXt/UApPJhMFgwGKxEAj0VIXw+XwYDAY0Gg12u504Z1zMOfe8uyeaanC+H+/2LVUVJEj92Xpee/E1NA0arDOtNGobee6t5zheczy6Ur+SSppp5jf8hh/zY37Db3iap9nLXuYxDxs2fPiooIJLuZQQoSHft6KiIux2OzabLVpP2m63U1RUNOC4B6pM0V8Hwd5pGUM9P5iJLkEnxIWSmWQhhLiIhMNh7r33Xl555RXi4uJ46qmnOH78OD/72c945513ePHFF1m9ejW//OUvUUqxe/duvvGNbwCQk5PDk08+SXd3N1qtll/96lfn5P6OpkiFC+gJdCOVKrZu3RrdJy8vD7vdjtVqxev10tXVhdFojKaHGNwGUspT0Pv0rEtdR6m+lFmXzoq5zmNVj0X/fb4f7/a3gK2SStrq2njwHw8CRBfq9dZ3pX6kKsX1ruuxHLRwpPoIVc1VmDFjwjSs9y2y6LF3dYutW7eeU91iuJUphprJO9+ZvsmQqtF79n+oTopC9CVBshBCXGRefvllXn755ZjHHnjggei///73v/P3v//9nOP279/PkiVLxnx8EX2DvUAgQGtrK9/97ndxuVwcPXqU2bNnAz1BtNlsJikpCZ1ORygUwuA2MOPtGZimm9A4NbTWt9L9ejenP3aaNf1cbzhl0/qTRhprWUs33fjwUUpptLNe7wB4qKCwd1UK73te2he2c9msyzC8aaDCU8FudqNHP+z3bqixX0hlitFwIakao+FyLmcDG9Cho4EGDBhII21c2nKLi4OkWwghhJgwJSUlbN68mUceeQSLxUJXV1e0rNmmTZuoqalBo9FgMpkIBAJ0dHREu/Rl1GXQYeggaAzSFe6itKGUgDFA4snYBhqbNm2iqKiIbdu2MW/evJiyabm5uYOOLzIbG/jgy4CBK7mSZJLPmRUdKpWjd+pIW3wbrV2tvD/9fdRaxQEO0Ennec2yDpRSMdHpDheSqhFxvo1M0khjAxsIE6aOOowYuYRL0KKdNI0qxOQ35WeS5aMYIYSYWLm5uTz22GM4HA7cbjcnTpzA7Xaj1+uxWCzs27ePnJwcbDYbXq+X999/n02bNvFz588xZ5mZ45jDiRMn8Hl9YICE1tg6ybfddhvx8fEEAgEWL16M3++PNg4pLCwcdEY2Mht7hCMsYxltH3xdyqWc5jQnOUkBBdHfIW/xFplk9pvK0XuhYk1aDdmnsgl6gjjSHNGAeqSzrIOlVEyGdIcLWZR1IY1M8slHhy76WiNVRGYyk046z2s8YuqZ0kHyhfwfUAghxIWLpCA4HA7Onj2L2Wzm6quvZt++fZw9exaHw8GuXbuiQa3NZiP0foi5JXOpLqkmQAD/J/3EOXoW6xk7jbRb2mOuYbFYSExMxGw209DQQE5ODm63e1hl0yIdwRSKt3iL+czHihUNGt7iLZaxLOZ3yDKWDfg7pHdVCr/Vz6nsU8z3zaejooM22s6r9NVgKRUTne5woS4kXcSBgwYaMGOmgw6gp5HLTGZOmhq8YvKb0ukWk71nuBBCXOwiKQhutzuaUhEIBMjJyaGqqorOzs5oFYe5c+dy/cLrub79ej7/qc9TO7MWO3Y0uzWkqBTscXZMQRO6q2Lnf3Q6HQaDgbi4OJKSkrDZbMDwyqZFZmMBmmjiAAfYz352sINMMkf0O6RvVYo4ZxyeVR5+4vrJeU/ODJZSMRrpDhPpQtJF3Lipo44EEqINXJJJJkRIgmQxbFN6JnkBC6L5Yy20UEopHjyTpme4EEJc7CIpCCdOnODqq6/GbDZjtVqjlS7+9Kc/YbVaycvLIysri8anG+nq7CL36lyuvvFqKt+rxHTKRGJ1ItblVqpnVpMyL7aZSCgUoq2tjYSEBDQaDe+//360bFrvShr9GWw29hN8YshqFr0NtyrFSAyVUjGZa9AO5ULSRYopJo00jnGMmcwkjTRChNjClo/MHwmSDjrxpmyQnEYac5hDmDBNNGHGzJVcyTGOUU31RA9PCCGmhEgKgtvt5tSpU6xcuRK9Xo/X6+Xo0aNcdtllPPzww9F9887mMTd/Lp2hToLBIAtXLKQlt4Xy/eWUhcuYe3Qu1ndjay/rdDoCgQBGo5Gurq5oG+fhBKiDlYw7nyBuOFUpRuKjnlIxmAt5bb3/u3XSSfEHXx+VIFPSQSeHKRsk55NPCSXRVqEddBBPPLnk8jzPT/TwhBBiSuhdK9nhcFBfX4/ZbKalpYXc3FwCgQBf+9rXMJvNPUHxyoWYu810JHagi+v5FRZsCjJ95nRai1sJJgfRZcf+auvq6iIxMZFAIMA3vvENnn9+ZPf4gWZj+wZxs5hFLrmUU04BBeMSlE22tr6jOft5oa/tozyLPtHl+0SPKRskO3BQSSWttDKf+dix48WLD5/8lSaEEOOkdwpCenp6tD12d3c3Pp8Pu93O7bffjtfrJTExEX2Dnq7nu9Db9CTMSKC1vhXlVcQnxRM0Bens7sTWYYu5Rnt7O16vlwcffHDQAHk4dZT77rP32b0kliaykIXMYQ4llFBJ5bjO/E2WYHAsZj8ny2sbb5EFo70NlsojxsaUDZIjH5M1ffAFPT3l22ib4JEJIcTUkJuby9e+9jWuuuoqALxeL0ajEa/XSyAQwGKxkJaWRjAYxGQyERcXh2GOgbab29C+p0XVK7SJWvzX+une2U3QEMQSb6G8vJyrel3nueeeiwl4+wuGgWijj951lB9++OGY4/rus/7H63vSQUqghpphz/yNVb7pROaxyuzn6JkM5fvEFK5uMVTRdyGEEGMnNzeXhx56iDVr1tDZ2UlnZycpKSnMnz+f2bNnk52dzYIFC4iLi6Ompgaj0Uh5eTl+v5+EhQl0rOvg9LWn4VNgnmfm/bb3sevsJCQksH///phrbd68+ZxA1263xwTDX/va16KNPpRS0bzlwsLC6Hl6NwPpu89IKjFEZlwtWKinHguWETXKGMhYnXe4Jrp5ycVEYpTJYcoGyR/10jhCCPFRVlhYiMPhoKWlJVr2rbW1FYD4+HigZ8GdRqMhMzMTo9HIjBkzqKqqwuVycfr0aTQaDWVlZbzxxht453sJN4d59W+vUllZOeh1+wt0r7rqqmiqR0TfOspOp3PAfXqXiosYaOZvrMqP5pOPFi2LWMQN3MAiFo1rh7mRvAdiCcNSawAAIABJREFUcBKjTA5TNt0Cpm6ukxBCTDSn04nJZCIUCkX/bTKZ6OzsJBwO43K5yMzMJDk5GYPBQEVFBdOnT2fOnDmcOXOGw4cPY7fbY9IhIqkGg+Vt9u56FxEJfK1WK16vN/p43zrKvZuB9N1nqEoMvdMg8sjjbd6OGUPvfNPzTZlYwAKyyKKVVjx4MGOOLk4fDxdzpY2JIDHKxJuyM8niQ5GP6DawYVw/mhNCTF0ulwutVsvs2bPR6/XRvOP4+Hg0Gg3Tp0/HbDbT3d1NIBCgsbGR2tpawuEwqampXHrppSQlJVFYWEhu7v9n786j26qvhe9/JcuSPEqyHSXYVpTJDg5KSFJMBuhNoJCB9r4mptxSnjZ9WpoOq5S7nt7c9j5vaVgNrNUu4D5tKX2hKzXQ3rX6cLnUEHpbCCnNROOkDhndOLFDjOMhtjzIsjxIsob3D1cHyZEtT/Ig709WVoh8pHMU43O29tm/vW3Ax0HFPvaNuF+DIbJFnMFg4MSJExGDPkJ9lEP1ynDjMBCj0UheMI+ul7v4NJ/GjRsduhsyf0PLINy42cQmsshSXjuUcZ1IyYQJEwECERPmAgQwYRrT92a8JPspEo0EycztIHG6a9iEEHOPzWZj/vz5WK1W0tLS0Gg06PV6kpOTCQaD9Pf309raSjAYpLGxke7ubgwGA52dnRw+fBi/38+5c+c4f/68UlMcCpRjiRbomkwmXnjhBZ599lkcDgcWiwWHwxGRpYaPO3GEtvF95OPyM5dpb2inhRY8eNCj5w/8ISI4HFpecZ7zANzKrTfUm461FCP8+nUTN5FBBqmkokJFKqmoUePAMcHv2OiFf1CRAFnMdglVbjGa9j1DzfWG3bIaWQgxlcI7RFy/fh2TyURmZibBYBCXy4VWqyUrK0spuzCZTLz++uvY7YN1rVu3bqW9vV0peQj9WVpaOqohHbGm3sV6jfBhIKEEQ6zz59B2Xh10cJSj3MZtN/T/HUvrr6HXr046ySUXLVr06HHi5CM+kgFZQoxTwgTJ0VrzDG3fE81cDxKlF6MQYiqFL5xraWnB6XSSkpLCsmXL0Ol0BINB/H4/8+bNQ6PR4PV6ycjIoK2tjSVLllBUVMTAwACLFi2ioaGBU6dO0dbWFrHALpbJmnoXOn9mk00BBRgw4Pz7r3B27BTlFbHqzlWYzWbsdjvn3z/PwaaDN1xnxtL6a+j16zznMWHCh4/DHFZqgqUjghDjkzBBcviJF0afXZjrQaL0YhRCTKXwhXPV1dXcfffdZGdnk5ycjNfrRa1Wk5SUpHSfSE5O5p577iEQCKDVagHw+Xz4/X4WL15MZmYmlZWVdHd3s2fPHiU7zN69cX8vduwsZCG3cAsqVGSRxS3cggcP7/EepzkNgKvQxf23309XsIv2tnayNFncf9f9PP7Xx6Em8jXHsvhtLBlqIcTYJUyQvHr1akwmk7I6ubq6elTZhbkeJMpqZCHEVArvEGG325V6Y7/fr2SR/X4/KSkpDAwMoNFoaGhoUGqIk5KSSE5Oxu/34/F4yMzM5LbbbqOmpoaBgQHlTuJUqKSSbWxDjx4zZmXRnDfDy4vLXuTDhz+k2lWN2Wymyl5FxqUMstuzSXGn4DP5+Orqr3Kp5lJEEDuWUczRrl9evBzkxgy1ENNtOgfdjFdCBMk2m41FixYBKLfuNm7cyIULF7hy5cqIz53rQeJYTshCCDFR5eXl7N69Gxg8X6elpWG322loaECn07FkyRIA1Go1Pp+P/v5+fD4f8+fPB2BgYED5rdfrldetq6u74U7icEIX69U3rWb5J5ejKlZR7aoe1TqWcM00c5WrFFNMEkm4cOE1ell15yrUdjVUgmmDiS1btvCnP/2Jpu4m0l3puAwuvDovN6XfFHUNzGhbf03k+jUbAxYxe83W9V8J0d0iVFKhUqnQ6/W43W6CwSArV66MaN8TjbSskdXIQoipM7RDhN1u5/z585w6dUoZ7tHT00NXVxfJyck4nU4WLVqkBMZqtZqMjAza29upr6/no48+or+//4YhH8MJXaw3fWITX9z9Re5ceydrGtaw0rRyTF0yQmqowYmTv/JXLnMZi83CgGuAzuROUntT6erqor29ndWrV5PXnIdH78Gj85CalkqTq2lCQ0TGe/2ayq5Gc7l7lPhYvAboxFtCZJKtVqsyrrSoqAij0UhXVxddXV2jygpIw24hhJg64QvnQouuMzIy8Hq9pKamkpGRoQTEy5Ytw+Px0NDQwIIFC0hNTcXn87FgwQJcLhe1tbU0NTWRG8gl41IGqb2p9KX1DbvvYorJyMug5Islg0G5vwu9Sc8nAp/gffX7o+6SERIqucgiiw46yErNwtPhoSenRzmOs2fPcs8999Ab7KVN10ZaWhrp6ekcPHhwwmtgxnP9mqoF67M1eygm32xd/5UQQXKoxs1utyttgoxGIw7H1PWGjCe5LSaESEShtp35+fmsWLGC3t5erl+/jl6vR6VS4Xa7SU9PV8oqmpqaWLhwIVqtlpycHK5fv86vf/1rnH9z8n82/x9Si1JRZ6oJdAei7sdqtZJTnkNSXhJJmiS6nYPBoVvjJs2eRv6afNLT0yMWAMYqwWimmX3sYxe7yCUXR48Dv8VP0BOkKbcJAI/Hw8GDB8ntz8XmttFX28e5+nO42l0TWgMz3mvDVAUsc717lPjYbF3/lRDlFsM1h49VajEbyLAPIUSisdls/OIXv6C8vJxt27aRkZFBV1cXaWlpLF68GL/fT3d3t7K4b2BgAKvVisfjobW1lZqaGk6cOMHx48cpKSnhXtO9DKQO4E/zg5rBP8Ps3r0bk8k02FXDDJ8o/AQej4fk5GQAkvqT6E3rxWKxsHjxYmXb0Q4qOc1pnuRJ/pv/5lDdIbDA9eLr9Bh7lOvR7372O07+90lO/ekUxz44Rnd7N5vZzEIWjqtF20SuDaGAJVw8ApZCClnBCraylfWsJ5tsXLgwY57U/YiZr5JKDBjIJPOGATozWUIEyUNr3KJNSpqtZmsdjxBCRBMqr1izZg0dHR2oVCoKCwuZN28egBK4pqenk56eTnNzMz09Pfh8Pvr6+ujv70elUlFdXU1XVxcOh4P7N95PU3cTp0+f5uTJk3x49cOIfarVaqWlXK2hlr7rfejcOrQaLXqvHk2vBlWxirS0NC5cuKBsG3r90tLSG97H0FpbgP3s54fXf8g/H/pnGmmMuB5l1GRwjWsc4Ygymc+Bg1Zax3VncCLXhqkIWHLJZQlLMGLEgQMdOtaxjoUsnPHZQzH5Zuv6r4Qot4DJaw4/08zWOh4hhIgm1NNer9fj8/nIyckhJSWFYDBIR0cHgUAAlUpFMBhEoxm8RCUlJZGUlITNZqOuro7KykqltM7pdJKxNAPfn32gBYPRQNHNRRH7XLlyJS6XC7vdjsvg4n3t+9xjvIfmymbSl6Sj/UctmjwNfX192Gw28vPzqa6uxm6343Q6b2glGqvWNtr1aAMbaKGFIEE66ABAhWrc5/KJXBumoqtRMcVUUcUt3IIePX30kUIKNmy8wRuTth8xe8zG9V8JEyQnqtlaxyOEENGEyibMZrMyfjoQCKDRaDCZTPT29pKWlgaARqNh5cqVBINBjhw5gsFgwGAwRLyewWDgo5yPMKlMODwOLLkW/I7IcotgMEhRUZESWHemdvImb9K6sBVrnhX3ZTd5PXmYzWZUKpXSRvT48eN4vd7B4SRhxlNrO9nn8om+3mQHLEProwsp5BKXcOGikEJMmOiiCyfOGZ89FCIkIcotEtlsreMRQoho3G43mzZtIikpiUAggFqtVnoiB4NBAoEA165dIxAIkJSUxMDAAL29vRQXF5Oeno5Op2PNmjUR60/+/T//nY47Okg2JmP0GAnoIxfuqdVqJQA2Go0sXryYYDCoLM4LBoPU1dVx5swZZZGg2+1mzZo1Ude3mDHjwqX8PYssVrCCB3hg2LrgyT6Xz6RrQ7T66CUsYSEL6aSTE5zgXd7lIhepGTpicJKPQVrNickkmeQZToZ9CCESSTAYBD6uE05PT1eC4ytXrhAIBHC73fh8PvR6vdLyDWDevHloNBqysrLQ6XScOHFCWX9SW1s72CmjJB+PxxOxz/Pnz5Ofn4/FYsHtdgODQ0na29sxmT4e9tHa2srx48eVVqLBYDDq+pbwLG4WWaxnPQECXOOasoBuuAEhYz2XD9fBYiZdG6Jl1quowoYNB464D+qSVnMiXiRIngVmYx2PEEJEk5KSwpEjR9i2bRtpaWl0dnbS3t5Oeno6fX196HQ6dDqdsk0wGMTn85GcnExmZiY9PT24XC6OHj0aMX46VAccmui3IWyfgUCAxx57jKqqKvbs2YPX642Yzhca9nHgwAGllWiojWi0tS7hk+4KKSRAADVqaqkdsfRirOfyWMHfTLk2RKuPvsY1UklVFmrFM4iXVnMiXqTcQgghxJSpr6/H4/Hw9ttv09zcTGtrK36/n66uLmpqavjSl77E/v378Xg8uN1uVCoVGo2G9PR0/H6/kmkervNEqNtRuPBssNVqvWE639mzZ8nJyRl1G9HwlfoLWUgXXZzkpLIgb7LanE1ld6OJlCsM11KuhpopmeY6tPwFJu97IOY2ySQLIYSYMqFMr8PhoKKigtWrV5OTk8MHH3yAVqvl17/+NQaDgczMTNRqNQMDA2g0GnQ6He3t7XR0dNDZ2QkQtfMEcEP2N/zv/f39bNmyBb1eT1dXF9XV1cqwD4fDodQpl5WVxRwiEspSppEWl8XVU9XdaKLlCuGZ9XiXVkQz0iJGGcYlJkIyyUIIIaZMKNObnJzMunXr0Ol0XLlyhdtvv51t27aRm5uLyWQiOTkZtVpNamoqarWaK1eu0NbWRjAYpLq6GhjsbDG088RIQu3dDAYDHo+HlJQUNm/ezKpVqwBGPWUvXDwX0E3V0I+JZqynuwfucN+DBhpkGJeYEMkkCyGEmFIFBQVs3LgRrVZLb28vt99+OykpKXR3d5OSkoJGo8HlcjEwMEBLSws+nw+j0cjAwAAXLlygra1NKYkoKysb9X5LS0upq6ujqalJWZzn9XrJzc3l/PnzqFQqtm3bxhe+8AXeffddXnzxxZjBcjwX0E1VhtaMGZ1Fx30b78NsNmO32zlx/ARpDWmjfo3prI8e7nsgtcpioiRIFkIIMWVsNht79uwhGAzS1tbG0qVLSU1NJRgMotPpUKvV+P1+dDqdMlDkj3/8IxaLhZ/85CeUlpaOuiRiKKvVSkNDA8FgUOmZvGnTJsxmM1qtlg0bNuB2u+no6GDt2rXs3r17VNNb4xUgTlUHixRLCg9sfwCH36Esonxw+4P87u3fQcOk7ipuon0PpnsYl5R6zH4SJAshhJgypaWlJCcn09bWBgwODPF6veh0OrRaLV6vl+TkZOXvbrebJUuWcOXKlWEnq9pstojguby8HKJsV19fj8lkUjpbAJjNZtra2igqKsLtdist4gwGg7IwcDqnuU5FhtZSasHX6MMX8BHUBvF1+vCpfVhKLfCzuO46rqZzGJe0pUsMUpMshBBiylitVtra2iKGdvT39ytf9/v96PV61Go1/f39uN1uNmzYwIULF6K+ns1m46mnnmLbtm2sWbOGbdu28dRTT0VsU1ZWxp49e7hw4QImkymii4XX66WhoQGj0agEyKFFfcMtDEw0WauyOLvwLAPJA6T3pDOQPMDZhWfJWpU13Yc2IdM5cGUqO5OI+JEgWQghxJSpr6+noaEBvV6PXq+nvb2d5ORk+vr6uHr1Knq9Hp/PR0dHB21tbbS0tFBRUcHKlSujvt43v/lNCgoKUKlUOJ1OVCoVBQUFEds0NDRgMpkoKSlh//79OBwOLBYLDoeDJ598UmkrFzomvV5PdXX1mBcGzlb19fWoF6q5VHSJ07ed5lLRJdQL1bP+vU/ngkJpS5cYYgbJZWVltLa2Dvspfvny5Rw/fhy3282//Mu/RHxt69atXLp0idraWr73ve9NzhELIYSYtcrLywkEAly4cAG3201qaiptbW28++67VFZWUlNTw8svv8yLL77IoUOHgMFscUlJCTab7YbXW79+Pd3d3UoW2O12093dHbFNMBhU+iqvXLmSvXv38sgjj7B3717eeOMNnn32Wc6cOUN2djbBYJCKigq8Xu+IvZITSXl5+Q0Z9kR576FAOd69moeaqs4kIr5iBsmvvPIK27ZtG/brnZ2dPPbYYzc0b1er1fziF79g+/btrFixgs9//vMUFRVN/IiFEELMWqEWcC6Xi8zMTDweD++99x6vvfaakrlcvXo1N998Mxs3biQlJQWPx4PH42H37t1RA+XRGqmv8re+9S1KS0t555130Ol0OByOUS3aSwSh70l4hn2uvPd4mc5SDzF5Yi7cO3bs2Ig1WW1tbbS1tfHpT3864vHbb7+dK1euUFdXB8Crr75KSUmJ0t9SCCHE3JWWlsbRo0dxOp0sWbKEp59+moqKCk6ePMmmTZu4++67cTgcZGdnk5qayocffoharb5hIV1FRQV33XUXgFIykZmZGXWfsconhlsYOB2iLUacyLHF6rQwk957IpiqziQivuJWk5yXl0dDw8e9YxobG8nLyxt2+127dlFZWUllZSU5OTnxOiwhhBDTrLS0FIfDQVdXF8FgkPz8fFwuF/n5+bS2tnL48GGSkpKwWCwAXL16lUAgwKpVq1i9enXEa7344ovU1tYSDAYxGAwEg0Fqa2sjtpmqEoKJjHYOZ7PZ2L17NyaTSamnnkgWPXRcMlRjak1XqYeYPDOmBdy+ffvYt28fAJWVcjtCCCESVahfcYjRaMTpdGI0GgGw2+10d3cTDAb58MMPle10Op2yTUhVVRWPP/74DVnXkrBtLBbLuPoqj8VILb+ybFljygqHf4gAlD/H245OhmoIMT5xC5KbmpqULABAfn4+TU1N8dqdEEKIWWJov+Kuri6MRiNdXV2YzWaKiorIyspCrVZjMplwOBzo9XpUKlVEj+OQWKUCjzzySNzeS8hwgehnLZ9l7e61OByOiKzwSDW/a/1ryfqvLDK6M3BlurhYdJEWVcu429FN91ANIWaruAXJlZWVFBQUsGjRIpqamnjooYd4+OGH47W7WUMm8Agh5rry8nJ2794NDC6ma2xsxGKx0NjYyB133EEgEKC/v5++vj5lGl5LSwu1tbW4XC727NkzabW6IxlLXfBwgejnVn2Oq46ro84Kr2UtS95Ygt/ox2lwkuJOYWPFRs6nn6cmUDOu9zGdQzVC5NonZqOYNcm//e1vqaioYPny5TQ0NPCVr3yFr3/963z9618HYP78+TQ0NPCd73yHxx9/nIaGBjIyMvD7/Tz66KMcOHCA6upqXnvtNS5evBj3NzSTSV2YEELc2E3hypUrfPe73yU9PR2NRkNXVxdHjhyhu7ublpYWWltbOXfuHJmZmeTl5U1are5IxloXPFzLr9RFqTidzojHRxpS8lk+S1VzFapsFbpUHf1p/fiNflbWrhx3PfV0d1qQa5+YrWJmkmNlf1tbWyPKKsK9/fbbvP322+M7sik0VZ9wpS5MCCEGRSuR+MxnPsPRo0cJBoMAdHR0UFRURF5eHocOHSI5OZmBgYGIsgyz2cxzzz3HY489NuqM8mgyxGOtC66kkhJKyM/LZ9Udq8jLzKOnqYfGBY0Y0g0RZSIjddnIJ58rXVdwVji5+eabMRgNdDm66H6/m6ru2O9vuOvZdHZakGufmK1mzMK96RJtscVOdtJKKxo0kxo0S12YEEIMb2itst1uJyNjMDtrtVpZvXo1J0+exGw2s3HjRtxuN21tbZjN5ph1viGhDHGsGuGhiwth5AxwM81cLrzM97d+n0BLgJbuFlzFLswrzZgwUVdXh9PpxGAwYDKZKCsri/o6jTSSRRb2djv29wfLIbLJjiiVGM5IiwdDgfJ0kGufmK3m/FjqofPVNWgopBAbtkm/LSQTeIQQYnjl5eUsXryYrVu3UlJSwo4dO9i0aRONjY00NDTg8XjYtGkTt912G263W+mLbLfbcTgclJaWxtzH0PZzoUl8Q59bX1+PwWCIeCxWn+U7H7qT80vO8/6K97lUdIkmVRN1dXU0NTWNelDH67xO9t9/qVAp//06r8d8b0OvZ91048RJMcUxnxtPcu0Ts9WcD5KHzlcvpJAOOtCinfSTzHTXhQkhxGySlZXFwMAALpeLYDDImTNnAFi0aJESIOv1eqqrq0fM8oazWq0ErgW4ufpm1p5ay83VNxO4FrjhueMZ1Wy1WqPWH+v1+ohR2CNlu09zmmd4hm66WcQiuunmGZ7hNKdjvreh1zMYzNiaMcd8bjzJtU/MVglZbjGWFclDV/1mkokHD04+PtFN1m2h6a4LE0KImcpms/Hcc89hNpux2+2cOXOGDRs24PF4KCoqwm63Y7fbOXLkCCUlJcybNw+73c7p06ex2+0YjcYRs7whnec7Wdu4FkfAQU96DzqvjtXXVnM6EBmEhhYXhl9LYvVZHlouArGzz9Gc/vuvsZoJXSyikWufmK0SLkgebb1ZSGixBQwGwwMMkE02RziibDOZJ5nprAsTQoiZKHTeNpvN9PX1sWzZMlatWkV/fz8dHR3odDplW4/Hw5tvvklaWhoOh0MZQjJSnW+4hvIGNj+wmdzcXGUhYE9zDw2/a7hh2+H6Lw+3OG5oa7tY9ceTbej1LIMMDBg4zOEp2f9I5NonZqOEK7cYbb1ZSOgHt5deFrCAKqqooYYBBuS2kBBCTIHQebuvr49FixahUqno7+9Ho9FgtVpRq9URJQ8vvPBCRAu5WHW+4Uw+E74UX8RjvhQfJp9pVMc6Ujuzoa3txnJck2Ho9ayXXhmHLMQEJFwmeawrkuHGT7ihLIHcFhJCiPgLnbdDrd8AfD4fWq2Wjo4OPB5P1NHSQ4PP8Awv7Iu6r+WfXI7jmoOrdVeVx0xJJpZ/cjm8FvtYY7UzizX9L97mQsZWBpOIqZJwQfJk1ITNhZOMEELMFKHzdkZGBl6vF4PBoIygfvfdd9HpdDFHSw9tfzYcVbGKwKEAOp0Oj9aDzqsj4Amguks1qiBZ2plNr1ht7sTcE88PTQlXbjGeFclCCCGmT6j1W3Z2Nmq1GqfTSX9/Pz09PaSnp48qyTG0/dlwql3VNN/WzEDyAOk96QwkD9B8WzPVrupRHetI7cxsNht79uyhrKyMPXv2xGUS4Fw3U9vciekR72mOCRckT3dNmBBCiLGpqqqisbGR69evo9VqCQaDfPTRR/T397Ny5ejGMUdrfxZNeXk52iVaWja0cKb4DC0bWtAu0Y46kTJcOzNXoWtMY6zF+MzUNndiesT7Q1PClVvA8CuShRBCzEwpKSm8+eabzJs3j6KiIhYsWIBer0elUikLr0c6r0drfxbNeFq7hRuundlXH/rqmMZYi/GZqW3uxPSId/lTQgbJQgghZpdQXbLdPhjsmEwm3G43TqczZitPuLH92UgmmkiJtm5lPIvGxdjN5DZ3YurF+0NTwpVbCCGEmH3C15MUFRURDAZRqVRcvHgxZitPuLH92VQbzxhrMXbS5k6Ei/c0RwmShRBCTLvw9SR5eXk4nU6OHz+uZJZHk5UNBVD7hmn/Fk+yaHzqhH+fJUCe2+L9oUnKLYQQQswI4WUQkzHeeSpNtNZZCDE+8WzbO2eCZGk+LoQQs8Nkj3fes2cP5eXlcQ9YZdG4EIllTpRbxLuP3lQJvY9d7JqVxy+EEKMx0VaeQ9uuSTs2IcR4zIlMcqwxorOBTBkSQiQ6m80WUa4w3uxvaWkphD1P2rHNXHKXV8xkcyJInkgfvaE/wExTUJ0Igb4QQkRjs9n45je/yb333kt7eztnz55Vsr/79+9n5cqVYwqcoy3wk3ZsM48kf8RMNyeC5PH20Yv2Azwek/FJOd4Ns4UQYjrYbDZ2795NYWEhHR0dqFQqNmzYwPHjx1Gr1fzgBz/gyJEjEVPsYpVeRFvgF77wb2jG+sKFC2MOxEcj/NyfYknBUmoha1XWpO5jNpPkj5jp5kRN8nj76EUbdzhWk1UPHQr0w8mUISHEbFdaWorD4UCv1+N2u5XfRUVFWCwWtFotXV1dBIPBUfVLBm5ouxbejs1ms/HUU0+xbds21qxZQ2lpKT/96U9ZtmzZpI6TDj/36yw6Htj+AGsb19JV1TVlNdIzfR2LjJgWM92cCJLH20cv2g/wWE3WXPF4N8wWQojpYLVacTqddHV1odfrAXC73RiNRvLz80lNTaWkpIRNmzZhNptHVTYxNEMbvvDvG9/4BgUFBahUKpxOJ1lZWaSlpbF8+fIxBeKxhJ/7129cj8PvwBFwkNuUO2n7GMlsWLA+ncmfmf4BQswMc6LcAsbXRy9amcZYmTHjxct61pNJJt10U0vtmD8ph46/mGIWsAA7dg5zWOq2hBCzWmgcdXV1NRs3blQeV6vVyphqp9NJSkoKGzdu5MKFC1y5cmVM+9i7d6/y3xs2bKC7uxu32w2ARqOhv78fi8WibDMZ9ctmzOgsOu7beB+bN2+ms7OTa5prJDcmT9o+RjIbShmma8S01EKL0ZoTmeTxipa9HSsfPjaxCS1aHDjQomUTm/DhG/NryZQhIUSiCU2q83q9VFRUEAwGyc7OxuPxUFFRgcfjUUoxgsEgK1eunNQpdm63m6SkpIjHJmNwSYolhQe3P0h6ejodHR2kpqZyi+UWknOTJ20fI5kNpQzTNWJ6su7wisQnQfIIov0Aj5cq7JcQQohB4T2RdTod77zzjtKq7YMPPuD48eP09/djMBjo6uqirq5uQgveTpw4QWZmplLa0d3dTUpKCna7fVLHSVtKLfg6fPg6fTQ0NJDUm0RSTxKGewxTMrJ6tqxjmY7kz2z4ACFmhjlTbjFUrH6ck9WvU4OGoxxlGcswYcKJk6McJZnkyXw7Qggxa0WbVBcqw7Db7djtg4Gd0WjqnYzIAAAgAElEQVTE4XBMaF8vvPACeXl5mM1mDAYDfX19nD59mkuXLmGxWCZtnHTWqizOqs+S25RLcmMy1YFqMj+VybzV83D8zRH3kdXTVcowG4y345WYe+ZkkBxqOeRwOG5oKwQM26/z2WefjWhQPxp27KSRxglOKI9lkomDiZ3ohRAiEQyXkJjs0dQhVVVVPP7445OSBBlJfX09poUmLmVeUh7Lu5hHenk611+7zlKW0kln3DKnso5lePIBQoyWCghO90EMVVlZSXFx/GqD9uzZg8lkUqYwwWCGIjk5mfT0dAoLC1GpBssi9Ho9x48fx+v14nA4+GHYApDRFE6ELxAI/2GUmmIhElO8z18z0Xjfc3jCIjwQDnWimMgdvfAL23QUuQ19b7mBXGxXbbx56E2qm6rlWjDNZNKfCBnp/DUnM8lWq5WGhoaIx5xOJ//4j//I0aNH0ev1OJ1O5WtFRUUcPXp0XCuR5dO8EEJEF+qRHEpYDB0fHa0MY7YI1VqHgvyUAym8+Zc3udh0EZiZ3SbmkvF0vBJzz5wMkkO1buGZZIPBAKD060xJSVGa2huNxgmtRJYfRiGEuNFwCYtEGR8dHuTvYpdMTRVilpmT3S1CLYeMRmPEauYTJ05gMBiorq5Gr9crv91ud9xXIgshxGTZunUrly5dora2lu9973s3fH3hwoX86U9/4ty5cxw6dIi8vDzlazt37qSmpoaamhp27twZ1+Osr69XEhQh8W6NNlVCpXZP3PQEv/2n3/LFnV9k5/07sS78+AOALBYTYmabk0FyeMshi8WiTGN64YUXovbrPH36tFIjJ4QQM5lareYXv/gF27dvZ8WKFXz+85+nqKgoYptnn32W3/zmN9x6663s3buXH/3oRwCYTCaeeOIJ1q1bx+23384TTzyB0WiM27EOl7CY7QmJUIC8PG85n3zwkxiTjXgaPCzwLOCftv0TiyyLRjU1VabCCTG95mS5BURvOQRE1JC98847cVn1LIQQ8XL77bdz5coV6urqAHj11VcpKSmhurpa2WbFihV85zvfAeDQoUO8+eabwGAG+uDBg0qbtYMHD7Jt2zZeffXVuBzr0LrdyWq/Nt1CwyruuPMOenp76PX3ojPq6BnoQT2g5t5V9/JSw0sjrk+RqXBCTL85GyQPZzYvFBFCiLy8vIg638bGRtatWxexzblz5ygtLeW5555jx44dZGZmkpWVFfW54aUY4Xbt2sXXvvY1AHJycsZ9vKM9505W7/qpYMZMCy2YzWba29sB8Gg9pHvTOWM9g+VOC/v/MPI6ldkwVlqIRDcnyy2EEGIu2717N5s2beL06dNs2rSJxsZG/H7/mF5j3759FBcXU1xcrASC8RJqp2YymSJ629tstrjud7xCwyrsdjupqakA6Lw6+tL6Rl1zLVPhhJh+EiQLIUQCaWpqwmKxKH/Pz8+nqakpYpvr16/zwAMPsHbtWr7//e8Dg10lRvPc6RDeKi4YDNLV1YXD4aC0tDRu+7TZbOzZs4eysjL27NkzpoC8kkoMGDj//nnS09IxJZnQe/S4bnaNuuZ6toyVFiKRSZAshBAJpLKykoKCAhYtWkRycjIPPfQQb731VsQ22dnZysCk//2//zcvvfQSAAcOHGDLli0YjUaMRiNbtmzhwIEDU/4ehrJarRG96yG+reImmrkOtf283HSZY/91jK6BLlx3uWikcdSLwEOBdiaZqFCNaqGfEGJySU2yEEIkEL/fz6OPPsqBAwdISkripZde4uLFi/zwhz/k1KlT/P73v2fz5s386Ec/IhgMcvToUb71rW8B4HA4ePLJJ6msHAzE9u7dqyzim07D9baPV6u4WENORiMUKO+/vh9eY/D3GMggKiGm35wcSz0R0z3qVAgxs83k81e8xPs9xxpfHc1EztVlZWU0NDQQDH78KiqVCovFwiOPPDL2NyCEmLFGOn9JuYUQQogZbbje9sC464ZHkshDToQQo5dw5RazqU2QEEKI0RnaKi48uxxeNzwZg5/Ky8vZvXs3QETmuqysbEKvK4SYXRIqkzzb2gQJIYQYn3h2vBgucz3a4HsinTGEEDNHQmWSJ2OxhRBCiPiLddcv1tetVmvE4BOY3I4X4x0sFc8MtxBiaiVUJnmq2wQJIYQYu1h3/UZzV3Cm1g1///vf5+677+aLX/wiO3fu5Kabbop7T2chRHzEDJLLyspobW3lwoULw27zs5/9jNraWs6dO8eaNWuUx30+H2fOnOHMmTPs3x//MZrRTppLlixh8eLFcttLCCFmiFilEqMppSgvL8dkMmE0GlGpVBiNxlEP6oiXHTt2sH37djQaDS6XC71ez7333ktubu6cStZIuYlIFDGD5FdeeYVt27YN+/Xt27dTUFBAQUEBX/va13jhhReUr/X397NmzRrWrFlDSUnJ5BzxCIaeNJcuXcqGDRtobGxUshFPPfUUzz//vPzwCiHENIl11280dwXHUzcc7+Dt29/+Nn19fcqIb4/Hg8fjYcOGDdOe4Z4qsjZIJJKYQfKxY8fo7Owc9uslJSX85je/AeDkyZMYjUYWLFgweUc4BkNPmvn5+VRUVPDhhx8SDAbRarUUFBSwdu1a+eEVQohpEqtUYrSlFFVVVezdu5dHHnmEvXv3xgyQ4x285eXl0djYiEajQaMZXPLj9/vJzMyc1gz3VJqOEeJCxMuEa5Lz8vIiFk80NjaSl5cHgF6vp7KykoqKipiZ5F27dlFZWUllZSU5OTnjPp6qqirKy8upr68nLy+P/Px8zGYzAEVFRXR3d6PX6+WHVwghpkmsUol4lFJMRfDW1NSERqOhoaGBgYEBdDodSUlJXL58ec4s2pO1QSKRxHXhntVqpbi4mIcffpif/vSnLFmyZNht9+3bR3FxMcXFxbS3t497n+HZgubmZoxGIxs3bsRsNmM0GgEiRpvO9R/eXHIpoYRd7KKEEnLJne5DEkIkuFilEhNtwRbNVARvP//5z8nIyECj0VBfX09LSwu9vb38+Mc/nrR9zHQzdUGlEOMx4RZwTU1NWCwW5e/5+fk0NTUB0Nw8OGO+rq6Ow4cPs2bNGq5evTrRXY4oPFtw8eJFNm7cSDAYpKioCLfbjcFg4PTp08r24T+8M3UQSS65FFOMGTN27FRSSTPNk/K6JZTgxEkLLWSQQQkl7Gf/pLy+EEIMJ1aLtfG2YBtOfX09JpMpIkky2cHbG2+8AQzWJufl5dHU1MSTTz6pPD4XyCAWkUgmnEl+66232LlzJwDr1q3D6XTS0tKC0WhEq9UCkJ2dzR133MHFixcnuruYwrMFdrud48eP43Q6ycvL48yZMzRUNJB/Kp9PfPAJ1l5bS14wj/Ly8hmx2CBaVjf0WBpptNBCGmmTlvEtphgnTrrpJkiQbrpx4qSY6DPMhRBitpqqbhhvvPEGd999N8uXL+fuu++eUwEyxOcugBDTJWYm+be//S2bN28mJyeHhoYGnnjiCZKTkwH45S9/yR//+Efuu+8+rly5Ql9fH1/+8peBwfrfX/7ylwQCAdRqNT/+8Y+prq6O77vhxmyB3W7H6/Vy6NAhfrX3V3zzpm9y87qbMSwy4Gx0cvmZy3Re7+Sre746rYNIhsvqunErgSyg/FlMMfuZWFs9M2ZaaIl4zIWLBUzPwkshhIiXUPAWfrewrKxMgrc4mOy7AEJMl5hB8sMPPxzzRR599NEbHquoqGDVqlXjO6oJGOlWTzHFVF+v5uSbJ5XtM8mkmOK4T2+KJTyrCx8HwxvZyAEORGw7WYGsHTsZZCj7AsggAzv2Cb+2EELMNBK8CSHGIqEm7sHIt3rMmHHhithei5Z7uZec8hzW1K8hw5mhfG0qFxtEOzYXLlSoyCAj4vHwQHYiC+8qqcSAgUwyUaEik0wMGKikcuJvSAghhBBiFpvwwr2ZaLhsQShzmkwyBRSQSy4WLFzlKgfPH+TB7Q+ypmENZ1VnUS9UT+lig+Gyuqc4hYHBlcIuXGSQgQEDhzk84YV3zTSzn/0UU8wCFmDHzmEOy6I9IYQQQsx5CRkkR2Oz2bjzU3ey+dpm1B+qOd9wHqPDSDLJ6NHjanDx2juvsXntZlZ5V3HMcWxK69UqqaSEwV7S4cFwqO44WiAbCpAnUq8cCpSFEEIIIcTH5kSQHOpc4XA4aPqwiXxjPuty1mE/aed072n8+FnDGnqu9dByrYVWWvkVv5rSjGqsrG60QFYW3gkhhBBCxMecCJLDeyergiou33SZtPQ0jB4jvr/4SCaZW7mVU5zCjRs16mnpFzzWrK4svBNCCCGEiI+EW7gXzerVq7n11lspKSlh8e2LydHn0NfXh6pARTrpFFJIF10ECZJGGuc4Nyv6BcvCOyGEEEKI+Ej4TLLNZmPx4sUEg0GcTifz1s9jXfI6+rX9dAe6CX42SOHZQq7rr2NvsfOX9r/QSScqVKMqW5jOKX2y8E4IIYQQIj4SPpNcWlrKhQsXUKlUmEwmsldlM7B9gJTsFIxeI4s/uZhLt1+i9dZWlv6PpWQsHGy3NrRsIdRJItxMmNIXCpT3sU/GSQshhBBCTJKED5KtVitXr17l+PHjZGZmolar8czzoHlQA7tAtUOF6fMm/J1+vO1eNqzfcEPZQvho6HBf+tSXlFrnYDBIV1cXDoeD0tLS6XirQgghhBBikiR8uUVoTLXdbqerq4v29nYWLVpEMBikr68PjUaDZYOFc+fOoTuvY5F+Eb30RpQtDJ2GF7Lat5q/OP8S8dhYp/TlkksxxZgxY8dOJZWSDRZCzAkTKVebzlI3IcTckPBB8tAx1YWFhcp/azSDb7+vr4+FGxdyLu0cjR81AvBpPq0ErdFarQH0fdSHYZmBrq4u5bGxTOkbzTAQCaKFEInGZrPxzW9+k3vvvZf29nbOnj2rlKuFJqRGe04oKO7v7yc/P5+6urqIUrfhniuEEOOR8OUW4WOqHQ4HOp2O5uZmmpub0el06HQ6WlpaMJvN5AXzcL/mJo00WmghjTRKKMGH74bR0ADvnX8Pk8mE0WhEpVJhNBoxmUyUl5dHjIt+zPIYz/zzM5SVlbFnzx6lZjk8Qx0kSDfdEV01wss8wo9nLKOnhRBiJgmt5VizZg0dHR2oVCo2bNiAVqsdtlxt6PqPtWvXUlBQgFarlVI3IUTcJESQbLPZeP7557l48SJNTU1cvHiR559/XglGq6qq2Lt3L6Wlpbz66qtKmUVdXR11dXWkpqZit9t5/yfvU329+oagFVBarYV7veF1JQC3WCw4HA6effZZOqs6leBWZ9HxwPYHWNu4lq6qrojFfWbMuHBFvKYLF2bMAGxlK8tYxgY2sI51JJM8K1rTCSHEcEJ96/V6PW63W/ldVFQ0bLlaeK/7YDCIXq+nu7uboqIiZZuxlroJIUQss77cwmaz8dRTT2Gz2TCZTCQnJ5OdnY3VamXHjh28+eabvPDCC8otuBdffFGZvud0OjEYDJhMJp599lk2NGyIGrSmkaa0WgvXTDPNVc033N4LHxd938b7cPgd+AI+cptyuZR5CRg86Z+rOjfsMJBccvkUn+I613HgIIUU1rGOv/LXGxYQToSUcwghppLVaqWhoYGuri5SUlKUINloNA5brhZ6TkjouUajUXlsLKVuYvaSa5aYSrM+k1xaWorZbCYtLQ2dTodKpUKlUqHRaMjJyeFzn/sc//Ef/8GOHTuAyPKL8OxvVVUVduwU5RXx0Oce4rFvP8ZDn3uIorwi7NjHNA0vPENsNpvp6+vDo/WQ2psKfJzxGGkYSDHFtNJK8O+/+uijl15WsnLSJupJOYcQYqrV19djMBiorq5Gr9crv91ut1KuNtxzQqqrq8nMzMTtdt9Q6iYSl1yzxFSb9UGy1WpFr9eTlpaG3+8nKSkJQPkzVLP2gx/84Ibyi0ceeYS9e/cqmWBXoYv777qfLE0W7W3tZGmyuP+u+3EVuqLvfBihcdEAdrud1NRUdF4dfWl9wMcZj1Dg3UsvC1hAL73Koj0zZs5znnTSSSFFee35zJ+0iXqxaqKFEGKylZeXYzKZ8Hq9VFRUEAwGyc7O5vTp08MuvAs9J7T+w+v1Ultby5kzZ25IdojEJdcsMdVmfblFfX09RUVFqFQqgsEgarUatVpNMBgkEAgAg5nbefPmUVpaOuJJ9M6H7qSKKjIuZZDWm4YzzUnjzY3cueRO/rz3z6M+pkoqlcEj1Uer+bzt86jb1dTk15AXzENr0lJWVgYwbIbajp000jjBCQopxISJAQZ4j/cm7dZStK4dLlyjmjQohBDjEbqbF+pU8c4778Rs3zb0OfX19ZSVlUlQPMfINUtMtVkfJJeXl7N27Vq8Xi+pqakkJSUpQTJAd3c3er0eu90ec1FHqO4tWBRUHlOpVFgtY1sMEgp8t7KVoutFnPKcImNjBlnzs0iqTOInr/6EqpqRT+6hQNuJk5OcJIMMDBg4wIExHctIQhnvaDXRk0Fqx4QQ0VRVVY05wB3Pc0Riifc1S4ihZn25RVVVFY8//jgnT55UssnhWeSenh70ej2NjY0xF3UMrXuD8S8GaaaZTjr5I3/k9c7Xefm/X+bff/Xv/N+3/y8ZNTe2k4v2/OFKMSbLSDXREyW1Y0IIISZTPK9ZQkQz6zPJMBgonzhxgvb2dvLz87FarcybNw+/349Wq+Wvf/0rgUAg5qKOoYNHQp0vQqURNpsNwjIZNpttxMzG0FtDWWRRSCELWQgQM7M6lsWC4xF6/WKKWcAC7NgjJg1OxNAphaE/iymO63sSQojRkIl9s088r1lCRJMQQTIMlkpcvXqVDz/8EBjsKrFixQpyc3O5cuXKqE6AI9W9hZrZ8z//p7J9rAlP4beGsshiPesJEOAa15TM6mRnh8cqXoG41I4JIWaq0Pnc4XDIxL5ZJt7JIyHCJUyQXF9fj8lkUkZE2+12vF4vhw4dYu/evaN+nfC6t1BN7QY2cNeKu+i52hOxbWjC03An1fAFfIUUEiCAGjW11CZ8ZlVqx4QQM1X4cBJA+TPW4m4hxNySMEFyeXk5Tz31FGazWem5abfblVKJsQrV1Dpx0kILN2XeRO+p3ohtYk14Cr81tJCFXOMatdTSQQeQ2JnV8A8ILlzKwsPDHJ7eAxNCzHlDh5OATOwTQtwoYYLkgoICli9fjslkIhAI4Ha7WbZsGb///e+pq6vj5z//OW+88caoX29oTW2Tq4ksU1bENqNZ1Bd+ayiNtHFnVmdbpwipHRNCzFRD7zyCTOwTQtwoIYJkm83GD37wA/r7+2lpaeGmm27CarXS29tLMBjEaDTy9NNPA0QEyiMt3BhaU1tRUcGO+3dE7Dd8UV8sE8msDs1qZ5AxI+qZYxlv7dhs+0AghJhdYi3SFkIISIAWcDBYR6bVanE6ncDgoj2fz4darUav1+N0OnG5XHz7299WnhNauGEymSIWboSm8oVPzQOov1bPu797N2K/Y1nkMZGWbnNpypC0jhNCxFtokbbD4ZCJfUKIYSVEJtlqtWK320lJScHtdqPT6fB6vWi1WuV2mtPpJC8vT3lOrIUb0TK/rqbI8dRjPaGON7M6lzpFSOs4IcRUkOEkQohYEiKTXF9fT2NjI3q9Hr1ej8fjQavVEggEaG9vBwbrzZqampTnWK1WJfMcEr5wY7jM73iEsqO72DWurOjQrDYkbqcIM2ZcRH4YceHCjHmajkgIIYQQc1FCBMnl5eUEAgEuXLhAf38/LpcLtVpNW1sbvb29GAwGMjIy+PnPf648ZzTT9UKB8j72RS2NiBX42mw2nvnnZ/iv//FffOH+L6Cz6MZVPjCXpgzNpQ8EQgghhJi5EiJIDtWXXblyhbq6OsrKyvi3f/s36uvryc3Npauri+9+97sRi/bKy8sxmUwYjUZUKhVGoxGTyRRzKl+4kepmQzXPhd2FXO+/TnJ2MveX3o9poWnM9cRTMaJ6pphLHwiEEEIIMXMlRE1yNO+99x4/+9nPhv36SNP1RmukutlQzbPJbsKT7sHT6wFgw4YN/Oe1/xxzPfFcmTI021vHSWcOIYQQIjEkRJA81hGjNpuNL33qS6z2rcb/vp+GXzTQ39HPUpbSSee4gpqhC+lCzer70vrQeXV4dB76+vowm81kkIEPHyWUjBhMzdWAa7Z+IJitrfqEEEIIcaOECJLDO1WYzWaKioowm80899xzPPbYYxGBss1mY89X9nDTwZtIaU7B3G1mxU0rMHvN9Ln6yCV3XEHN0LrZULP6ptwmll9eDoDGpMHZ4GQhCwHw4Bk2mBpvwDUZgfVcDc4nSjpzCDF9hva9Z+/e6T4kIUQMMz3eSIia5FCninXr1vHFL36R9evXk5uby9KlSyN6H8NgQG2oMJDWnEZqXyo9yT24cXNL1i0UUjhivfDQxXZWrMPWzYZqnpOsSdTcXEOyMZl5/nkc++AYrbRyjWsj9j0eT2/kXHLZyU7+gX9gFav4B/6Bnewc0yJB6VM8ftKZQ4jpEa3vvRBiZpsN8UZCBMn19fWsXbuWTZs2oVKplBZwOTk5ZGdnU1paqmxrtVoxXjXSp+9DHVTjT/LjCXpQG9UsZemwQU3omxnOho2buTnqQrrwZvVGm5EPLB/w9Q++znMNz7GEJdzP/fwv/hc72Rl1v+MJuLaylUIK8eOnk078+CmkkK1sHfW/5VwaXDLZpDOHENMj/G5iMBiMGDcthJiZZkO8kRDlFuXl5XzjG99ApVIpk/aCwSB9fX3ccsst2O2RZRBrtWvxBXwMJA+QFEhCpVMR8AUoWFrAd+76Dte7r1NxsSKiTCP0zQx3jGMj9k+O1qx+LWv5B/4BN27s2EknnVJKOcAB/sbflO1CAVfolj3EDrg2sQkDBuYxj156aaaZDjq4jdt4mZdH9W85UwaXzPRbMNFMZPS4EGL8QmtAhBCzx0yJN0aSEJnkqqoqPB4PXq+XlJQUdDodgUAAr9eL0Wikvr5+sBZ5zx5Wr16N6R4TZo0Zt96NHj0GlYF00nFnu+lt7qXn5p4byjTGktkdaXjIZ/ksV7mKDx9atPQwWO7xST4ZUa4x1lZoueSyiEVo0NBDD8kks5zlpJNOkOCo/y1nQjZ0NtyCiWYuteoTYiaJ1vdeCDGzzYR4I5aECJIB7HY7wWAQn8+HxzPYbi0rKwufz8eFCxeUerXz589TmVVJ6q2pGHIN9NKLql0FHdDv66fxpkaaVE04HI6IMo3RfjNjBXj55NNAA5e5jA8faaTRRZeS+YXBbPOjPMqn+BQ72MHt3B4z4CqmmEtcQo8eLVq8eAkQoIACPuCDUf87zoQ+xbPhFsxwYg2gEUJMvmh976dCKPlSVlbGnj17IhIrQoiRzYR4I5aECZI//PBDAPr6+vD7/Wg0g5UklZWVrFy5MqJeraqrij/k/IG/8TfOXT5H2/I2Km6roNHaSF5zHhnODGVEdegk+NAzD/H57Z+P2Ge0b2asAK+RRrLIwoWLS1ziDGdoo40aaoDBAPlf+VcyyeQiF2mllWUso4GGEQMuM2ZOcIImmlCjJp10fPhw4uQAB0b97zgTsqGyAE4IMRbha0AsFgsOhyPu+4y2WHDoHUghxPBmQrwRy6yvSQ61/fnEJz6hnKhUKhWtra389a9/pbe3N2q9WrO6mcWLFlORV8HKzStZY1yDs8tJS20Lec15tFhb6O/vV/ovX3ZeJrc4F97++DWGfjNzyWULWwgQwImTGmropDOixuZ1Xudf+VcAOukkiyyyyeYlXgIGyzE6/v4LUP78LJ/lNKcj9hVes+vDhxcvhzhEAQUYMODFSxVVY/4fbrr7FI+nHlsIMbcNXQPywzjvL3yxIKD8WVpaOqahVELMZdMdb8Qyq4Pk8CEizc3NGAwG2tvbOX78OHa7naVLl7J48WLmz5/PvffeS09PDy0tLVRXV+P1ekm6lMSWB7bg9rjJT8/HZDSRn5tPw6kGPCYPvb29ESfBJlVTxP6HBsgllODGTYAAWrSsZz0nOIEPnxLgneY0z/AMn+WzLGIRjTTyEi8pAXA++XzERxH76aSTRSy6YV/hPZTnMx+Aa1zjJCeVRWNjySLPFLIATggx00VLvoTuQAohEsOsDpLDP8lfvHiRjRs3EgwGKSoqIiMjgw0bNlB3rI7MqkyMA0YyszIJ5AaYv3k+tbW1uC+6yfBmkJOdg9PpJDU1lVRfKpZPWPjh/h/ymc98hra2tlEdS6jM4jznWcc6VKhYwAK+wBf4kA/Zxz5l29N//xVNqBwjlEEGyCKLRhpv2Ff40IprXEOHTrltMdvGOYeb7aOphRCJLzQwKrzdnMFgGBxkIoRICLM6SB76Sd7r9WKxWLBYLKSlpXH2v8+ysm4l3iQv3R3dZLozsSZbuXrXVZo8TWQVZrGkYQl+hx+3xk1/az/OXifBfwyycuXKqCfBcOFjpQsp5BKXCBLkMpfZylaSSFJKHtaxjhZaYgZ6scoxYPi2KWmkzejbFmMx02/BCCHmtvLycnbv3g0MZpANBgMmk4mysrJpPjIhxGQZ1cK9srIyWltbuXDhwrDb/OxnP6O2tpZz586xZs0a5fGdO3dSU1NDTU0NO3funPgRhwm1/TGbzWzcuJFAIEB9fT21tbWYTCbSq9NJ1aWiu6LD1++jPbmdXncv3v/PS1ZfFtWuavh/wJ3kRuvQ4tf7cd3t4nrSdaxWa8wV0+EdLJawRBk3PY95g4sCOcdZzlJP/ai7M5zmNK/wCvOZzz3cw3zm8wqvRGSeZ0PbFCGESGTRFgs+++yzUo8sRAIZVSb5lVde4fnnn+c3v/lN1K9v376dgoICCgoKWLduHS+88ALr16/HZDLxxBNPcNtttxEMBvnggw946623Jm0aUuiT/OrVq8nOzkar1RIIBDhy5AipqalsWLYBfYserOBJ8tDX10cffeg0OoKVQcovlnP//ffDZ6DD2YFer0ev19NwoYH6+nrlJFhaWorVar3hNn6LoBcAACAASURBVFp4uUMVVdiw4cCBAQNu3KSTzglOAKNvkJ1LLktYwhu8odTjLmEJueQqWWip2RVCiOkXbWCUECJxjCqTfOzYMTo7O4f9eklJiRJAnzx5EqPRyIIFC9i6dSsHDx5U6oYPHjzItm3bJufIGTxB7d+/n7y8PLRaLb29vbS2tnLrrbeSnZ1NijUF/3U/qhQVKfoUjAYj/l4/gZwAl49dpqqqiieffBKVSsW8efNwu91cuHCBQCBAeXk5ueSytGop1/de561H3uJXe3817LFc4xrttGP7+68CCrjMZToZ/HcbbaZ3ND2Ch2ubAgw7xEQIIYQQQozepNQk5+XlRdQGNzY2kpeXN+zj0ezatYuvfe1rAOTk5Ix63ytXrqS2tpbU1FQyMzMxm82kpqai0WjoWtaFLqADO6hz1AT6Auh9ev7zg//kbOtZAN544w1qa2sjssXl5eV0VnXe0EFiMHv7QtTjWMhCcsjhGMe4zGU2sYlbuRUnTtJIw4aNq1ylhJIRRyyPdkzj0JrdaB0vSiiZcT0HhRBCCCFmgxmzcG/fvn3s2zfYAaKycvTTVqxWK9euXeOee+4hEAig0WhITU1FrVbTnNGMc5OTm/5wEyq7CrVZzbX0azS1NkUMAems6uRc1Tmucx07djrpjNpBwoQpct9YucY1MsjAho0qqpTtD3OYW7mVTWzCjZsqqpRtRwpex9sjONrxhh4fGkyH91ceGrDH+roQQgghxFwwKRP3mpqasFgsyt/z8/Npamoa9vHJVF9fz8KFC2lvb0ev15OcnIzf78fv95Obm4v+k3r8/6+f1AdT0d6sxZnhjAhQhxsjXUhhxNS3LLK4hVsi9m3Dxs3cTC+9XOUq17imfK2TTg5zmD76OMYx6qkf1YjlWGMaQ8e7i108ZnmMZ/75GcrKyvjKp79CliUr4rWGTqmLNTI71teFEEIIIeaKSQmS33rrLaVzxbp163A6nbS0tHDgwAG2bNmC0WjEaDSyZcsWDhyY3OEW5eXl5OTkYDAYCAQCqFQq/H4/brcbjUbD4sWLSV6czMBnBnA86MD7aS/rdqxjz549lJWV8ew/PUtGXsYNNcAmTBEdJAopJEAgYt/HOEYNNexnPzXURO04ESSICxfZZLOe9WxlKytYQSGFUd/PSGMaw4NYnUXHA9sfYG3jWrqqusAMD25/EOtCa8T+wzPQseqdR1MPLYQQk2HHjh38+c9/5vLly/z5z39mx44d031IQggRYVTlFr/97W/ZvHkzOTk5NDQ08MQTT5CcnAzAL3/5S/74xz9y3333ceXKFfr6+vjyl78MgMPh4Mknn1TKJ/bu3YvD4ZjUN1BVVcUHH3xASUkJgUAAr9eLx+NBq9WiVqtJSkoiGAxSV1fHqVOnyMjI4Ac/+AFHjhyhoaGBO4J3sOWBLfS+2Uv9tcHuFVq03MRNLGQhrbRynvPMZz4DDETs+/ubv4/L5cLlclFZE73jxAd8wEIWcgu30EsvDhxK7+PwjhXhhusRHB7E3rfxPhx+B76Aj9ymXGpza1nTsIbNazfzm2u/idrxIla982jroYUQYiJ27NjB008/jcvlorm5GaPRyNNPPw0MrhMRQoiZYFRB8sMPPxxzm0cffTTq4y+//DIvv/zy2I5qjDo7O3G5XPj9fjweDxqNhqSkJDweD1f/f/buPbrp+87z/1OyLctXScbI4AvCJEAgIgFaQ0kyIZ20oWmn68bd7ZKebia/Q+kvPZvM+ZF6p9NOwjbOdLbdZTvb23T7c51fk85sM5yOCWmbFNoCSRNC6oSrg7kb341tLMsXLFu29PvDo28lI99tLNuvR45OYvkr6SuXfnn5o/fn/b5yhe7ubux2O2vWrCE1NRWLxWK0oWsztWG7bmPLli3U1NawiEXcz/20004ddTzAA9zLvbTRxlGORrxuRnYG9gE737F/h6d5mncvvMu/59+TSy711PMLfkEzzTzLswwyyA1ukEQSZsxUUnlTvXA04TXCd3M37/EeAE6nk7a2NoKWIKndqQB09XextnMtn+ATvMd7N9U9j1XvPNl6aBGRiXjqqafo6urC6/UCGP9+6qmnFJJFJGZMS7nFbLNarRw+fBiA5ORko+QiNTWVFStWkJGRgdfrJSkpidtvv52enh7jsQ3ZDQQ8AXLScjBh4i7uAoZauq1iFRe5yB/4Aw00sI51Ea872DXIjdtv4Mxw8h3nUFBOJJHjHCeRRJ7mabaxjTba6KADBw766ecYx6ilNqJeOJrhNcJ99HE/97OIRbS0tJCcnExifyJBU5DV51djSbdwIusEb/M2Vqw3Pd9Y9c5jfV9EZDrk5OQYwTjE6/WO2P1IRGQ2zIuQXFNTQ1NTE/v27ePq1atYrVaCwaCxWpydnU1KSgoAfr+fxMRE47Fdti4aP9xIU2cTS1iCFStv8AaLWUwPPdz4t3/66OMt3op43c41nfgH/JiqTCzvW04TTSSTzCM8QjLJNNGEGzeZZNJEEwc5yDGO0U77hDtWBAlyilMA3MVdHDt6DEecA4fZASaIy4jDkmnhnWPvjFhLPFq983i+P5bwTYXa8CciI2loaMBmswGQkpKCy+XC7XaTkJCA2+2e5bMTERkyL0JyaHx0f38/PT091NbWcu3aNdrb27ly5Qo+n4/c3Fx6e3s5fPgwycnJEaOmLSss/P3Zv6eUUg5yED9+bNjopReAJJLopDOiewXAgG2ApPokMEMwPsgNbuDAQSedZJBBL71YsBjT+Ca6QuvEGdFho5123uANrFjpq+vjX1//V47nHifTkUm7v519+/YZddXDO1uEhIJwKaVRA/BY3x+JOmOIyHh9//vfJy0tjaysLPLy8khJScFsNlNZWUlxcXHMBGW3221s8t69e3fMnJeI3Box0yd5KsLHR4c+xgsGgzidTlJTU2lubiY+Pp433ngDu93OwYMH8Xg8xvCQsrIyY7RoaORzP/0sZjFZZOHAwSlOsYxlkS8cgKTOJBKsCdQk1JBEEimk0E03qaSSRBJevNRSSzLJxgptCy0c4cioATSbbPLJZxObuMY1LnKR61zHj5+DHByqZa4DvosRTm91LXF4vXQ++TTQMGafZhGRUN3x//yf/5PExEQ6Ojp49913OXfuHHa7naKiolkf9+x2uykuLsbj8VBXV4fD4aC4uJg9e/bM+rmJyK0xL1aS3W63MTGvo6ODjIwMAoEADQ0NWK1WVqxYgd/vx26343A4+P3vf4/T6WT9+vUUFhby5S9/2VghCK2k1lPPRjaSSCInOUk88dzHfRGva/PZ8Nv81Nnq2HtxL6mk4sdPKqkMMEAKKVzkImmkGa3ixrNCG1qVbaABP37s2NnMZly4oq5Az0Yt8fCV48Us5k7uZBGLjGNGWs0WEdm3bx+HDx/me9/7Hi+++CLnzp0DhmqTXS7XGI+eeUVFRXg8Hjo6OozyPY/HQ1FR0WyfmojcInN+JfmRRx5h9+7dJCQk0Nrais1mY9GiRXR3d+PxeGhsbCQ7O5u0tDQ8Hg9vvvkmf/mXf8nKlSvp7Bxa7XzggQfIycnhmWeeobKykgx3BgVrCxiIGyClLgXnB06qPdVUUcX2sNf+3Yrf0d7djm+vj6tNV2mggXu4h/Ws5wQn+CN/NEo3wluxjSW8FrmLLlaxiiyyyCGHH/CDEUskCigY90r1VA2f8HeNa9ixs5KVXOc6oM4YIjK6mpoaHA6HsX8EwGazUVNTM4tnNcTlclFXVxdxX6wEeBG5NeZ0SHa73Tz77LMEg0FaW1txOBzk5eXh9/tZtmwZFouF5uZmjh49SmJiIiUlJezevRun00lnZyc+n894LqfTaawQFBcXs/jXi6kJ1pC8OpmsD2VxdN9Ramsja5Kf3fEsBRSwilW4cePBw2u8xo/5MXnk4cSJB09EYA1f9a6pqaG8vPymj+7C+xW3084xjmHCxBKWjBh8w3srRxstDUzruOnhPZUvcIGP8BGyyMKEKWqfZhGRcOXl5RQXFwNDAdRms+FwOCgrK5vlM4vtAC8it8acLrcoKirCYrHg9XpJSUkhKyuLwcFBYKiLRV9fH1VVVfT19VFTU4Pb7aawsJCVK1eSlZVldLzw+XxYrVZcLpfxEVubqQ1Ln4Wenh66u7vZsmXLTRP1QuUG5zhHJZV0000ddUZAHh5GQzVuDocjosZt+GaQUL/icONdlY22ge6xf/tnOjfVDT/Hdtr5gA9opXVSnTFEZOEJ7SfxeDzk5eXh8XhipuY3tCE8fJO3w+GgvLx8tk9NRG6ROb2S7HK56Onp4bbbbsNutxMIBLhx4wbp6enGSvGGDRu4cOECb775JsXFxfT19dHb24vVaiUvL4+2tjZsNpsxYMThcHD69GkGswdZfX41ADe4QU5azk0b98yYIzaqOXCwk538gT/QTDNppFFIoREWw2vcAOPfwzephDYPQuT0vvBV2WirxY00UkABZsysZS3ppNNJJ4tZTDfdVFJpnCtMbVNdtHMMEIhaDiIiMpLKysqYCMXDhW8Ij7bJW0Tmvzkdknt7e1m0aBFWq5X4+HhMJhMpKSkEAgGj92ZHR4dxofN4PJw4cQKHw8GiRUMbzPLz8/H5fLS2tlJfX8+6devo7u7m8uXLnF99npzGHBYPLqajueOm17+TO+mii3baAVjKUuKJH7HDw3hr3EaqMYah1etVrGIFK6ikklpqI8L4KlaRTz7ddOPBQxJJrGIV1VRHvMZUx03PRh10LBrplxURmftiNcCLyK0xp0OyyWSir68Pj8eDzWYjLi4Os9mMyWTCarXS0dFh1B2HAmowGOTQoUN8+MMfZs2aNZjNZq5cuUJFRQUtLUPlDG63m+vXr+M1eWl2NdPn6OPy1y6zmMURrx8gwCpWcYxjAGSRxTWuRRwTHkYnUuMWXmMMfyqj8OLFho1BBm8K6QUU4MBBgIDR47mXXm5wgwwyIp5/OjbVDT/HhSb8f5NonxxMx/MrgMtkbNu2je9+97vExcXxk5/8hG9/+9sR38/Ly+PFF1/EbrcTFxfH3/zN3/D666/jcrmoqqri/PnzABw7dowvf/nLs/EWRERm3ZyuSbZarbzxxhtGbbHJZCIQCBAMBklISCA7O5uGhgaKioqoqakxJjy1tLTw2muvUVtby7vvvsuvf/1rIyBfuXKFq1evRtTIvfT3L7G6aTUBAhGvn0qqsVEtnXQGGKCJpohjwsPoZGrcQkHsb/lbbud2EkjAho122ummm1WsAv7Ubs2DBzNmkknGhIlkkmmllUEGNW56mg2fiDjSpMPJ0HAWmSyz2cwPf/hDHn74YdauXcujjz7KmjVrIo555pln2Lt3Lxs3bmT79u384z/+o/G9y5cvs2HDBjZs2KCALCKzJham+M7pkFxTU0NfXx9ms5ne3l4GBwcJBIaCbOi/Q2UX0QJqf3//TeUPNpuNkydPUlJSwo4dOygpKSHtQhrXuEaQYMSxPnwRG9VKKSVAYMQwOtFNKuFBKfBv/2xmM4MMkkQSvfSSTjrwpzB+gQt8wAf00YcDB330UUEFv+JXkx43PdJ5LfTx08MnIsL09YaeyQAu89umTZu4dOkS1dXV+P1+Xn75ZQoLCyOOCQaDpKcPXTtsNhuNjfqEQkRiR6wsFM3pcotQ+6C4uDji4+MZHBzEbDYbK8kAd911F1VVVVE3YTz//PMUFhZit9uN9kP5+flYLBbKysqMFm3OSienOc1mNke8fiqplFASETabaR61TnciNW7b2Mbt3I4FC1lkcZ3rdNNNAgmkkEISSXTQYYTxUN1yNtmc5WzEpr8DHJi2EoCZLDGYS0IdPmZi0uHwFnsw9TpyWRhycnIifvmvr69n8+bIa9c3vvENDh48yFNPPUVKSgof+9jHjO/l5+dz/PhxOjs7eeaZZ3jrrbeivs7OnTv50pe+BEBmZuYMvBMRWaiGz2KYrSm+czokh4Lvhg0buOOOOzCZTJjNQ4vjJpPJWC350Ic+hNvtjhpQL168aATn3t6hOt7+/n6j73JxcTHHnz1OT10PxzhG+IePv+f3Iw72mKpssnmQB2miCQ8e4olnLWs5y1kGGOADPsCNGy9eeuiJCOMzuaEuVv7gxoLxdCGZrJkM4CKPPvooP/3pT/nOd77DRz7yEX72s5/hdrtpampi2bJltLe3s3HjRl555RXuvPNOurq6bnqO0tJSSktLAaioUOmWiEyfWFkomtMhOaS6uhqHw8GSJUswmUzG/YFAgK6uLvLz83niiSd48sknjWEe69evx26309HRwcmTJ/nVr37FU089hdPpJD09naqqKqNOeeP/vZFFby8iNScVfvKS8fwHODCu4SCTUUCBUeIRJGiEo6Uspf7f/tnHvqjhdyY31MXKH9xYMJMdPmYygMv81tDQQF5envF1bm4uDQ0NEcfs2LGDT3ziE8DQ5jyr1UpmZiatra20tw9tBD5+/DiXL19m1apVvP/++7fuDYjIghcrC0VzPiQXFRVRXV1Nb28vn/nMZ4iLiwOGAnJ/fz9+v5+UlBT+43/8j5hMJnJycujs7CQ/P59gMEhGRgbx8fH8p//0n4ChjyaTkpK45557OHr0KCaTiXs+dQ9H+o+Qdi5ywEeGO4Pi4mI8Hk/EcJDpaIbv5E8lHqmkkkEGduxYsVJCCcc5PqHnm65OCbHyBzdWzNQvJGqxJ5NVUVHBypUrWb58OQ0NDWzfvp3Pf/7zEcfU1tby4IMP8uKLL3LHHXdgtVppbW0lMzOT9vZ2AoEA+fn5rFy5kitXrszSOxGRhSpWFormfEgOtXa7++67aW1tJSsri2BwaINdIBDA4XDQ19dHf38/GzZswGaz0d3djclkwmazkZKSwrJly2hubsZqtWK1WvH5fCS0JPBnbX9Gck8y/l/46ezspGFN5GrMeIeDhBtvWG2hhRRSOM95trENM2Z66eUqV9nMZpppHndgms464lj5g7sQLPQWezI5g4ODPPnkkxw4cIC4uDheeOEFzp49y3PPPcd7773HL3/5S77yla9QWlrKrl27CAaDPP744wDcf//9lJSU4Pf7CQQCPPHEE3g8ntl9QyKy4MTKQtGcD8mh3sN2u53m5mYyMjKwWCwMDg6SkJCAyWTC7/dTX1+P1Wqls7OT2267jcHBQQYGBrhx4wZZWVk4HA5u3LiB1WoloSWBtENpJC1NIm5xHI2HGtl6ZSvt9vaI1x7vcJCQjWxkJzuJJ55rXMOChWyyo4bVUBhdxjI+4AMAUkjhXd7Fj39CNcDTWUccC39w1T9YZHSvv/46r7/+esR9//W//lfjv6uqqrjvvvtuelx5ebnGLotITIiFhaI53QIO/tR72OfzMTg4SH19vdH+LS4uDp/PR0tLC1W/rSL+l/E4X3GScjAFU4OJgYEB4uPj8fl8xhCSo0ePYjlpIWlpEp4BD2ffPkt6QzoBU4DEvsSI1w7vvRwy0nCQbLLZyU4GGaSJJhJJ5E7uxIw5aluvRho5v+o8937oXj75wCcpuK+AhuwGrnN9wm3GprtVWegPbimlk+5qMdk2crHSFkZERETmtzkfkkMdLo4fP86iRYtob2/n1Vdf5dSpU3R2dnLlyhXe/dd3WfT2IpquNBGfE89g1yDWg1aSricRHx+P1+slNTWVxYsX8/DDD5NlzqI/oZ9f/epXXDlwhbj0OAKOANZ+a8Rrj2c4SCjUfZ2vcxu30U8/QYLc4AY99LCUpVHDqtvt5rGvP8a1u65RlVFFx+oOPvofPoprmWvCNcChOuJws1lHPJWgO9P9g9UDenz0cxIRkfluzofkkJaWFiorK4fqiRMS+M1vfsPOnTs5efIkjssO+pL66I3vpbG5kaaeJnotvQQrgkaJRXt7O8FgkLS0NBJyEvA2eNm8eTOpg6m8/f7bDHYNkrg4ciV5+HCQgasDHH/2OFsqt1BIIRvZaIRBh91B7u25/Ic7/gMf+/DHcGY66aWXLLJuCqvZZPP1tV8n59c5BFuD2NptDLQP0N3VzQMbH5jwtLwKKrBhu2nISR11EUEndL4zHXymEnRncoCHVqnHRz8nERFZCOZ8TbLb7TY6TJw+fRqbzWas5oY2z/398r8n7cNpXPdc51e/+hWNjY088plHCDYFiVsdh91uZ8mSJVy5cgWPx0PaojRSB1K5dv0aOWtzqHy7ktNtpznGMV4c9vqh3svhm+NCG9p2spNKKnEsc3DnXXfS39qP75oPp9nJlo9s4exbZ/F2eCMCb+h5lqYvpam7CUuCBYA4fxzmFjN2lz1qicNodbrR6ojPcY7NbDY28y1jGdvZzlu8RS21MzokZCpt5Gayu4Z6QI+Pfk4iIrIQzPmV5PAOE8FgkI6ODjweD0VFRbjdbgoLC7nQcYFjvz9GdXW1MXnq4L8epNXUSk5ODl6v13gcQFd6F/6H/Xj9XpKykogjjg/4AA8j7/KOtjoaTzxLWcqWLVtoTmmmz9+Hx+4h0BfA3GLm9vzbKaU0IoSGnqehq4HklGT6EvvwOrz4kn1cfvAyf1j0h6gBeayVveF1xHnkRZzvUpZynessZemMj0GeSvnHSKviE1lZH8lMrlLPJ/o5iYjIQjDnQ7LL5cLr9UbcF+owEQrQnts8uHPd3LX8LnKW5vDvHvh3dDV0Uby3mH/+53/m5MmTRgs4YKhnaGIrXXd0cTn+Mle4Qg453MEdI55HKDhkkMFH+AgP8RA2bOSTj9PppN3cTkNuA/5EPx22Dj5Y/gGXP3/5pn7Hoed55513SE1NJSUlhf7EfjKDmTgcDs6cOcPu3bspKytj9+7duN3uSZUvDA86Nmy000466cZ9MxV8phJ0Q2G/hx6WsIQeeqZttTvWardjlX5OIiKyEMz5cotQC7hQj2IY6jDR29tLYWEhSUlJ2O122s+0Yz5pxhlwkvdQHk2rmvjDy3+gvLyc4uJi6uvrWbduHYmJiZjNZuqP1eO+4uaVt1/hHOeMfsAjaaGFZSzjTu6km248eEgjjRWsoPN8J8m5yQz4BmjPaOf86vPEueKi9h8NBZCa2hr27dvHli1byEnLoamzif3791NYWHjT8JLqr1VzvCkybI9VvjC8bMGLlwwy6OBPP8eZCj5TbSM3U21h1AN6fPRzklgwU9NORURC5nxIDq2sJiQk0NraSl1dHenpQ6uhfX19LF68GIDsgmws91qMvsnrr66nOHdoOt6ePXsoKioiNTXVGFWdfDaZrrguPlb0Me5quYt33nkHT+3I5RZdq7p4IvMJFi9dTMAWoPlqMxdOXOCA5wD57+ezdula2uxtXLBfIG5ZHA6Hg7KyspueJzyA1NbW4qn1YMPGfvbzxd1fNEpLnE4na9aswel0svGJjfT+v72cbThrPM9YATf0Og4cLGUp+eSTRx6/4TeYMM148ImF/ofDxUIP6Lkg9HPaxjbu5V6CBHkfjS2WWyd8L8p0TzsVEQmZ0yE5VHNcX1/PnXfeyd13383q1as5efIk58+fp6GhgVWrVhmjqYPBIH6/n97eXnJzczl9+jRf/vKXuXbtGi6Xi5MnTxrt2378oR/TGtfKjbYbpKam8sgjj/BK+StQF/08/urv/orMNzLxt/mJ98aTe1suwbVB3tr/Fn+s+yPfff+7EaseZWVltFe2U0jhTZvtRgpqoeElTqeTe+65B5/PR2trK0vvXcpnLn4GDkNVQ9W4Am4jjbzLu8Zwk2qq+YAPyCMPP34ucGHOBcTpGDISi+E9Vlmx8jZvG6vJM7XRU2S4yUw7FRGZqDkdkouKijCbzeTm5nLt2jVjuMemTZu4evUq165d4/Lly6xevRqTyUQwGMTr9RphefXq1TgcDn79618bqxF/93d/x9KlS8l7L4/b+m6jP7Efj8fD9evX2fqhrVD3g6jn4XQ68Tq9DCYNMpgyNO0vmWS2fmgr/1T3TxHHp3nTeOT6I6xmNde4xmlOG5vtQiEjWlALlZasWbMGn8+Hz+fDarXS2NvIpRWXWN+/Hs9ez7hXQPPI4w/8IaJTxFWuGnW+c8l0jt6Wsc1EhwtNUpTxmui0UxGRyZjTG/dcLhe5ublGYIShC+XAwADr168H4L333mNgYMA4JhgMEh8fT3NzM8uXL6etrc3ojGGxWFi5ciW33XYbcR+Jw+qzkhZMIy0ljfxF+dy++PYRz8NqtXJ9xXXie+KJ64nD3+cnsS+R7JRsulZ1UVxcPFQ7XdnBxvqNfG7d5/A7/AwyyGY2E0/8mJvtQsNLnE6nEZCtVitVVVU0mhvp3dY7oSl486lLwUwPGRmPhTRgY7r/7Kj3skzERKadiohM1pwOyTU1NUZgDLFardTW1pKZmYndbqe1tZX6+nr6+/sJBoMEg0Hq6uqIj4/HYrEQFxdHYWEhW7du5cMf/jCdnZ1YLBYGlw7S+UAnA4kDpPakErAG6HmwZ8Tz8Pl8mJeZabunjUHrICndKfTF9XE08yj3bb/P+GgwuyEbT8DDQM8Ay+9cTi+9dNPNKlaNGTJCw0s6KjtYcWoF9r12mv6xid6LvZP6C2KsLgVzKfTNduBfaCFvujtcxMIvOTJ3jGfaaSxyu903dScSkdg1p0NyeXk5/f39xopCaGX13Llz/Pa3vzUm4b399tu89dZb/PKXv+Ty5cskJyeTlJSEx+MhISEBr9dLUlISt912G0lJSfT29mIymTDlmej+WDfBnUG6PtZFiyV6ACgvL6elpYX09HTMy8z0fLwH32M+zq89z4u/fzGiTV1yTzJ9lj46TZ0sSloEQC+9pJM+rpDRXtnO4V2HuXr2Kue957lx/QYb6jZwm+c2Ov6/jgkF2tFasc210DfbbckWWsib7n7Vs/1Ljswtw6edejyemN+0F9ps6HA4IjYbKiiLxK45XZNcWVnJ888/z+7du1m8eDGtra1cvHiRQCDAj370o4gLZqhdkN/v5/Dhw2RlZZGWlsa6deuwWq2kpqaSmprKnXfeSU9PD+3t2J6NOwAAIABJREFU7QCkpKTQ09PD6dOnuXTpEo+McB7PPPMMX//619m6dSsWi4UrV67w4osvUllZGdGm7kbKDRL7E+nN6cV60UoyyQD48Y+rm0QBBVQ1VdH8m2a2bNmCM8fJjfM38H3PR1tH24Q2UY22STBU3ztXpqrNdluyqUwRnIumuxPITE5SlPkpNO10rtBmQ5G5Z06HZIB9+/Zx8eLFMftlDr+glpWVceXKFbq6urj//vu5/fbbGRgYIBAIMDAwwNKlS2lsbKSpqYnTp08TCAQoLy/nuVHOpb+/n7179+L1erHZbBQWFnLx4kWjFzNAY04j62vXE2+L55dNv8SBgyyy+D2/5wAHxgwZoTDWWdtJTe1QecVH+AhZZEUEWgcOnuRJqqkedRPUSJsE1y9dz8o/W4kzy0lLSwvvvPMOtbW1Ewp9t3Ij1my3b1uIIW86O4HM9i85IjNNmw1F5p45H5JhcisKodXdlpYWUlJS8Hg8DA4OYjKZ6O/vJy5uqJfxqVOnuHTp0piN6kdbJSgpKTF6MbvcLo4HjlNXXkdvUy9nODOh8BgtjGWRxTWuGV8vYhF3cicJJPAO74y5sjw8zHat6uL+bffT195HW1ub0QLv4C8Ocr7h/LjOcza6Tcxm+zaFvKmZ7V9yRGbaSIOvtNlQJHbNi5AcbrxTmMJXd9PT0+nt7SU+Pp66ujp6enqoqakhOzuboqKicb3uWKsEw4N8eDAtoGDcQTlaGBtggCaajGNWspIAAa5xzaiPheilEtHC7Bdv+yJN5iZs7TYsVgs9gR4sPgt/dtef8U8Nke3sRjITLcJimULe1KlHtcxn4X/nhD5tHGmolIjEhnkVkkebwgTcFJ5Dq7t9fX3ExcUZARmGfsNvaGgY92tPZJVgeDBdk7OGL971Rbr/vJuqrqpRV62jhbFSStnMZtJJp4sussgyBoKEjFQfGy3Mpuak0t3UzfnV58lpzCG1OxVvihf+HDLqMvhi0RfH/CVkodXogkKeiIwstNlw+FAp1SOLxK55FZJDw0XuvvtuY7x0d3c3ZWVlOBwO2traOHnyZER4Likp4cyZM/z3//7fiY8f+nHYbDbS0tJ4/vnnR329srIyIyhOZJUgPJi6lrl46JGH6G/rhwpwbBl7vGq0MNZMsxGcW2mlgQbaaTe+P1J9bLQw29DZQFYwi3O2c5yznQPAbreTkJAw7lGwC7FGN0RDMUQkmrm22VBkoZvTLeCGW79+PXfddRdJSUl4vV6ys7N58MEHufvuu3E6naxatYrPfOYzLFmyBI/HY5RS7Nu3j7/+678e6mOcnU1HRwd//dd/zb59+0Z9vfCgCIzZkijUI/O/PPZf+OTnPolrmYstW7bQ3d2NZ8BDck8yHR0dEec2XqHgXEopP+AHBAiMqz1XtNZpp98+jXmJ+aYepCaTyai7DgaDo57rdLcImyvmWus8ERERiW5erSTb7XYCgQA+n4+UlBSys7MxmUzExcURHx9PUlISgUCAT33qU7z22mukp6cbj923b9+YoXi4UFCEP23Qq6ysNOqid+3aZaw0A39ahT1XR0ZCBo888gjJyclcvXqVxP5EbqTcIM2bxpKqJRRYCzjFqUmtQk6kPjZajXNXQxffPPBN7tt+X8THgrt27aK1tTXi8SPtzl6oNbrTXYutVWkREZHZMa9CckdHBw6HA4fDwbJly7BarZhMJgASEhKMiXtxcXF89KMf5dChQ+zevXvM+tqxhAfFkeqiu7u7jVXYwexBUs+n0k8/i1cvxm62M+gbpC2jjdXnVxOXEcdV31VjFXIyHSHGWx87Ypi90MihkkMRx050d/ZCrNGdzlrs2egQIiIiIkPmVbnFyZMnqa+vJysrC6vVysDAAMFgEMAIy3Fxcfj9fqxWK3ffffeY04+Gj2aOJjwohreCCy9J2LJlizF1r8vWxfnV5/H6vQw0DJCYkUhTQRO2LhtxGXFYMi28c+ydWza1LbxUY7QANldHwU7UVMZxT+fkv4U2xU9ERCSWzKuQXF5eTk5ODk1NTTQ3N9Pd3W2sHg8ODgJDYbm3t5euri4CgcCo9bXR6kvDRQuK4SOoQ0Jfh8ZnAyStTML1/7jgS3DujnP0O/vJs+bR7m9n3759xqCQWBrNOxdHwU7UVGuKp7MWW6OaRUREZs+4yi22bdvGd7/7XeLi4vjJT37Ct7/97YjvL1u2jBdeeIHFixfT3t7OF77wBaN92sDAAGfOnAGgtraWwsLoq7HTobKykqtXr+JwOLBarVitVhoaGsjOziYuLg6fz0djYyO9vb2kpqbS0hK5uje8vnak+tKQvLy8m9r4jFSScOzYMRwOBwCJiYls3boVgDfeeIP+/n4cDgd7D++lra4tpjtCzPfd2VOtKZ7OWuyF3CFERERkto0Zks1mMz/84Q/5+Mc/Tn19PRUVFbz66qtUVVUZx+zZs4eXXnqJl156iY9+9KP8t//233jssccA6O3tZcOGDTP3Dv5N+BCRvr4+Dh8+DMCaNWuM6XnXrl2jqamJuro61q1bR319fcRz2Gw2fD4fP/jBD9iyZQuL/nURldcref31142V3XA7duwwXjtU29zb20tubi7V1dURreDCezUXFhbi9Xo5ceJERFDPK8rD/10/MPemts2XDWbTUVM8XbXYmuInIiIye8YMyZs2beLSpUtUV1cD8PLLL1NYWBgRkteuXcvTTz8NwOHDh3nllVdm6HSjC22WM5vNDAwMcMcdd3Dbbbdx/PhxrFYrfX19/PrXv+b69eskJSVRU1PDvn37KCwsxG63G2E2Pz+ftLQ0lixZQmdnJ740H3en382iLyzin/7pn6IG5eEb9UIlFRaLJepKc2VlpTGdL1QvDUOr2Hl35fEP/MOsdISYSsidTxvMYmn1dqF2CBEREYkFY4bknJyciHHL9fX1bN68OeKYU6dOUVRUxPe+9z0eeeQR0tPTycjIoL29HavVSkVFBQMDA3zrW99i//7oK2w7d+7kS1/6EgCZmZkTehOhISLr1q3D5/Nx6dIlXC4XDzzwAOfPn+d3v/sdfX19xopuKLBevHgxYvpRQkICGzduHArIPh/XV1wn4Y8JLEpdxJaPbMFT64n62qGNejDUYaO6uhqPx0NJSUnU8x2tS8RsdISYasidTyOoY231diF2CBnJfPm0QkRE5oZp2bhXXFzM1q1bOX78OFu3bqW+vt7YKOdyuSgoKODzn/88/+t//S9WrFgR9TlKS0spKCigoKCAtra2Cb2+y+UiNzcXn8+Hz+ejp6eHnp4euru7aW9v59q1a1E35lVWVlJSUsKOHTsoKSkhKSkJq9WKz+cDoN/ZT/OmZuLS4lhuXU4PPVFfO9pGvWi9g0NirUvEVLsozKcNZqFQ2kMPS1hCDz1zckV8vrmVQ1qm0t1ERETmjzFXkhsaGsjLyzO+zs3NNTblhTQ1NfHZz34WgJSUFD772c8awbGxcShcVFdXc+TIETZs2MCVK1em7Q3A0Mrs5s2bIwZdpKSk0N3djd1uN+4b3s84fBW5vLycmpoa1qxZExGUzcvMXMu7xsHOg1FX9CbSO9hYCat0cvzZ4+QV5ZF3180lGbfaVOtwY6lEYTpo9Tb23KpPK+ZT6ZCIiEzNmCvJFRUVrFy5kuXLl5OQkMD27dt59dVXI45ZtGiR0Yf4a1/7Gi+88AIwNAHPYrEYx9x7772cPXt2ut8D5eXl9Pf3G/XAVquVwcFBent7o4bXUB3x8B7JZ86coaWlhfT0dKM7Rnp6Oi0tLSOu8oavCmdlZbFt2zY+9alP4XQ6I3ouD18Ja6tr48p3r/DsjmeNSX0jmemVran29l2oI6jl1rlVn1aoN7WIiISMGZIHBwd58sknOXDgAFVVVezdu5ezZ8/y3HPP8elPfxrAqP09f/48WVlZfPOb3wSGOku89957nDx5ksOHD/Otb30rYsPfdKmsrOT555/HZDKxePFifD4f7733HgkJCdTX199U0hBt4IfZbOapp54iEAjQ3d2NzWbDYrFw5MgRnnnmmRFDbKh3sMVi4WMf+xgAv/vd7/D7/RHDSSb7l++t+Jg5WshdxjIyyBhXMFeJgsy06RzSMpr5VDokIiJTYwKCYx51i1VUVFBQMP6Vm1DpxP3338+KFSswmUxUV1ezf/9+bDbbTWOny8rKIrpLOJ1O7r33XuLj4/nFL34R0bZteDgO/2GZwv579+7dN5Vd2O12YwPfTnbSTDPBsGcwYWIJSyildMT3FgrI4aUM6aQbQXS6hG+KGmCALLKopTZi85qCr8yW8DKImfwzOR3/f5vo9Ws+iMX3PNK1WkQk3GjXr3ENE4ll4e3fMjMz6ejowGQyUV9fz4YNGyL6E+/atYuamhp6e3ux2WxGoF2zZg2BQICWlhZjZTn0mPHWCYfauoWkedNYUrWEAmsBpzjFAAOTqtudjr694xFeh1tIIX30zYtuFTI/3Kp2eLHW3URERGbPnA/JodKJu+++m97eXnw+H1arldzcXE6dOsUTTzxBamqq0cfY4XCQm5sLYAz8cDqd+P3+iFKQsTpUDBe+gS/Nm8bq86uJy4jjqu8qKaSQRRbATauzI/3lG1rZvZu7uYM7OMUp2mkHhsJ1Ul4Su/+v3Tetkk+HWxXMRSbiVmyoVG9qEREJmfMhObSCGxoKkpKSQmZmJmlpaZhMJpxOJwcPHrypj7HFYsHj8eByuWhpaaG+vj5i+t1IHSpGUl5eTnFxMQBLqpYQlxGHJdPCO/veoZNOaqklkUSjbne0v3zDP1p+j/e4n/t5gAd4gzfw42fN0jWs3rWaBlNDxMbDaOUhkzHfulWITIS6myw80bodzVa3IRGJHdPSJ3k21dTUGKUTDoeDvLw8rFYrXV1d2Gw2srKySExMjHiM1+vFarUaPZL/6q/+ikAgMKW+xaENfB6PhzxrHu3+dvbt22dM6euii3ji2c9+SikdtZYyfJNfG228wRt48LCJTfTQg/VzVhpMDREbD4f3gJ4KdasQkYVipG5H4d2JRGRhmvMhOdSCrb6+nqysLMxmMyaTic7OTqM2ef369RGPGb5KHBFw8/LweDyTWpUNDSf5Hy/9D17b+1rEGOuJrMQO32F/nesc4QgnOcl+9pNxV8aEB5hMhLpViMhCEa3b0XQuOojI3DXnQ3JlZSX79+8nNzeXlJQUEhISuHHjBu3t7Rw9epSjR4+SmZk56irxdH/UNtWV2LHaXYVWz8NNtDxkLKGgPNaqt4jIXDaZqakisjDM+ZDsdrspLCzk1KlTvPfee1y9epX+/n5SUlLYsmUL69ev5/333x9xlXgmPmqb6krsWCE71sZai4jMVbdi0UFE5qY5v3Ev/KOyqqoq/vzP/5zFixeTkpJCQ0MDNpuNpKSkqKvDbreb733vezidTlpaWqiqqjI2702k/Vs0U9n8M9YO+1B5SPjq92yOtRYRmavCN117vV6jT35ZWdksn5mIzLY5H5LD+xO3tLTQ2dmJ3W4nIyOD+Ph46urq6OzsvCn0hlaQnU4nra2tJCUlcc8993D06FFaW1tv+qgtVJJBScmI5zKdZRtjhezKykqFYhGRKdKig4iMZM6H5FB/YovFwpo1a1i1ahXx8fF0dXVx/vx5rFYr69atIzU1NeJxoRXolpYWkpKS8Pl8wNBgkf7+/oiP2kKB2uPxRDyH2+2+qWwjvB/zdLZlm6qZbnEUPrGvhRYqqFAds4jMCVp0EJFo5nxNcnl5Ofn5+TzwwAMkJSVhMpmIi4sjPj6elJQUfD4fwWAQu90e8bjQZo2qqiqsVitWqxWfz4fT6bypvje8pCNc+O7nWN4hPdMtjkJ9nVNIoZlmUkihkEKyyZ6W5xcRERG51eZ8SK6srKS+vh6v10tiYiJ9fX309PTg9/vJzMzEarViNptvCrihzRotLS0cPXqU3t5eFi9eTEtLy02rv9F2P4fuH+2Yye6Qdrvd7N69m7KyMnbv3j3lMDvTAT68r3OQIJ104sVLAdFnoYuIiIjEujlfbgGQlJTEwYMHCQaDbN26lYyMDNLT00lLS+Pq1atcvHiRS5cuRZQc+Hw+cnJyqK6uprW1lf7+fhwOB/v376eoqIhdu3YZZQnhJR3hQiUaEDmWOmSkHdKjlT7MRNlGeN12yHS2ONIYaxEREZlv5vxKMvxpVdjpdJKSkkJubi6JiYlUV1dz6tQpAoEAZ86ciSg56O/vByAhIcFoDXfixAmeffZZPve5z5Gfn8/tt99OcXExZ86cMUo6wuXk5BirvONtyzZW6UNo1XewZpDVZ1ez4ncrcLzh4C8f/Msp/3zCTWeLo7H6Ose66V65FxERkblvXoTk8LrkQCBAfX098fHxOJ1OLBYLe/bsYd26dTeVHFRXV9PS0sKOHTsoLy/n8ccfBzC6Xaxbtw6z2cy6deuMko5w1dXVRsnCeKf2jVX64HK5CNQGWH1+NQn+BLpTu/F7/dzTds+ka3xnuq/yXB5jrZG0IiIiEs28KLcI1SU7nU6sVivt7e28/fbb9Pf34/F4qKysZNeuXaOWHBQVFZGQkEBrayvwp1KK3Nxc/H4/AAcPHmTLCI8PncdYJRFjlT7U1NTwoY4P0Wftoy+xD4B4RzyN1xspoGBSvZdnusXRWH2dY8FI3TeGb8oM/XuqfbJFRERkbpsXIRki65JDTCZTRPgcrWbY5XLR2tpqdLkAjG4XR44cAcDhcES85mRKFsY6j/LycrZ9aButjlb6e/tJTk4mNTWVVw6+ghPnhF4r3Ey3OJrK8JSZFuq+4cVLM82kkUYhhexn/5i/tKi1nYiIyMI0L8otYOy627FKDmpqaqirqzPawYUe39/fT3l5ufH4cOGPH29d61jnUVlZyb8c+hf87UPdObq7u9m3bx/tde1zpsY31ozWfWO0PzdqbSciIrJwzZuQHC185ufn43Q6KSsro6ioiP37949YM3zmzBlj6EhWVha5ubmYTCaef/55YxV2z549Ea8ZevxE6lqH1y4PXB3g+LPH2VK5xQhgv6j7BYdeOcRPv/9T/uVf/gVPrWfO1PjGIidOuuiKuK+LLpw4R/2lRa3tREREFq55U24xvO42VDLh9/tpa2vD4XBQWFgYdTOd2+2msLCQM2fOkJubi9PppL+/n+eff559+/ZFvMbw14Sbh42MVNc6vPXbP3/7n1l9YTVevHTRFVEGEOs1vnNJqPtGJ53GfaHuG6PVa29hi1rbiYiILFDzJiQPD6BOp5Pq6upxbcgKD7mXL1/G6XSyYcMGnnnmGdatWzfmCOfx9CGO1v/4b7f9LQd6DlDXMPTYUIgLbdCL1RrfuaaCCgopBDB+GbFh4whHgJHrtUcL1yIiIjK/zYtyi2jlDg899BCJiYkRx400QCN8Wp7T6eSee+7BZDJhMpnG1RJsPH2Io7V+CzQHuOveuyIeFyoDmE2hWtyd7JwXNbihTYU99LCEJfTQw372j7kyP5db24mIiMjUzIuQHC2AtrW1sX79+ojjRupGER5y16xZY5RqdHR0jGuE83j6EEcbW91maiMnPSfivplaqRxv8J2vm9VCQbmU0nEF5PDHTDRci4iIyNw3L0Kyy+UiMTGRrVu3UlhYyNatW6mrqyMzM3NcAzTCQ67dbgfAarVSVVUFjD3CeTyDRKKtNnfd0UV3Q/eMr1ROJPhqs1qkyYRrERERmfvmRU1ycnIyf/EXfwFAT08PZrOZrKws3n//fTwez5gDNMI3bwWDQYLBIEePHqWlZWhFdzz9kMfqQ1xeXk5xcTEwFLptNhsWh4V/ePkfSCNtRjfohQdfuLn2OZwTpzariYiIyII350Oy2+1m/fr1xMXF0dvbS0JCAtnZ2XR2dnL9+nVKSkqM44qKiti1axc1NTURm/HCN/2988475Obm0t/fj8lkwmaz4XA4KCsrm9B53TSEorKC/fv389RTT5GTk0NDQwPf//73OXTh0LT/TIabSPDVZjURERGReVBuUVRUxODgIFeuXMHv95OYmIjFYiE9PZ0tW7bgdrtH7WM8/HuhEdQWi2XE0omxRCtv+PLSL/Ponz3KqVOn+PnPf86pU6coLCwcdUPgdAkF33AjBV9tVhMRERGZByvJ4eOk29raSEpKoqurC4vFQl9fH8XFxXR3d4/YxxjA4/FgsVi4//77sdvt+Hw+Ghoa2LFjx6ivvXv3bqOUI3xlOlp5wx2b78ByxkLHsrFb0k23sVqghQvV4KpHs4iIiCxkc34lOXyc9JIlSxgYGCAuLo7BwUFOnDiBx+Nhy5YtN3WWCG3GC236u+eee0hKSsLr9WIymfj4xz8+5irvSBP2ok14s+XaMLWaop7DWKbakm2iXRq0WU1EREQWujkfksvLywkEApw5c4b4+HgsFgsmk4k333yTlpYWIxyP1Me4pqaG9evX4/P5jNZvAG1tbaO2fQMiWs6Ft4mLVt7grfcSXByMeg6jma6WbAq+IiIiIuM350NyqDPFpUuXaGpq4vLly5SXlxvt22w2G8eOHRuxj3F5eTmZmZnG81mtVqxWKydPnhzXKm9I+KpwtLrec++eo29d37ha0oUroAAzZtaylo/zcdayFjPmBduSTURERORWmPM1yfCn9muhNmvDO1Ps2bMHIGJsdXg7uIMHD7Jx40ZsNhsdHR0cP36c/v5+mpubR3vZCOGrwtHqen/U9CMyXsgY8RxGsopV5JNPN9148JBEEndyJ8kkT/KnJSIiIiJjmRchOSS833G0IDpSIP3f//t/U1xcjMfjMXoYOxwO3nzzzZs25xH2HHa7PeL48DZxoaAcrrGyccKb9Bw4CBCgl14AeuklmWQcOCb0PCIiIiIyfvMqJMPYQz1GeszwcP3mm29SWFiIx+OJ2JzH448bjxvPoJKp8uDBjp1kkumllySSMGPGg2faX0tkMm7qCU6Fat5FRGTOm3chebKGh+vdu3dHbRsXLjSoZCZd4AI3uMFSluLAgRcvV7lKPfUz/toiYwltLPXipZlm0kijkEJtDhURkTlvzm/cmykulytq27hbrYIKAgQ4y1kOcpCznCVAQMM9JCaE9wQPEqSTTrx4tbFURETmvHm/khw+cnr40I/R1NTU4HA4IlaQh7eRuxU03ENi2URGnouIiMwl83olebRx1GMpLy+P2jZuNqjHscSqiYw8FxERmUvmdUguKioy6oqjDf0YTWgzn8fjIS8vD4/HY7SSE5Eh0XqC27CpHEhEROa8eV1u4XK5qKuri7hvvKOgYXKdMkQWEpUDiYjIfDWvQ/JIdcVjjYIWkfGL1hNcRERkrpvX5RYj1RWPNQpaZLaFWqvtZCeFFJJN9myfkoiIyIIyr0PySHXFKqGQWBYKyCmk0EwzKaQoKIuIiNxi4wrJ27Zt49y5c1y8eJGvfvWrN31/2bJl/O53v+PUqVMcPnyYnJwc43uPPfYYFy5c4MKFCzz22GPTd+bjVFlZSUlJCTt27KCkpEQBWWKeeg/LVI11zc7Ly+PQoUMcP36cU6dO8fDDDxvf+5u/+RsuXrzIuXPneOihh27laYuIxJzgaDez2Ry8dOlSMD8/P5iQkBA8efJkcM2aNRHH7N27N/jYY48FgeBHP/rR4EsvvRQEgg6HI3j58uWgw+EI2u324OXLl4N2u33U1wOCFRUVYx4zW7dg2G22z0W3+Xnbyc7gp/l08C/4C+P2aT4d3MnOWT833ca+zfb1azzX7B//+MfBJ554IggE16xZE6yurjb+++TJk0GLxRJcvnx58NKlS0Gz2Rzz7znaLYiu1brpptvYt9GuX2OuJG/atIlLly5RXV2N3+/n5ZdfprCwMOKYtWvXcujQIQAOHz5sfH/btm389re/Ndqw/fa3v+UTn/jEWC85Y9xuN7t376asrIzdu3ePq1/y8MeJzDT1HpapGM81OxgMkp6eDgxtZm5sHOpGUlhYyMsvv0x/fz9Xr17l0qVLbNq06Za/BxGRWDBmSM7JyYloo1ZfXx9RTgFw6tQpo/fwI488Qnp6OhkZGeN67K0y2cEiwx8nMtPUe1imYjzX3W984xt84QtfoK6ujtdee42nnnpq3I8N2blzJxUVFVRUVJCZmTkD70REZHZNy8a94uJitm7dyvHjx9m6dSv19fUMDg5O6Dlm+oI72cEiwx8nMtNCLdV66GEJS+ihR5MWZVo9+uij/PSnPyUvL49PfvKT/OxnP8NkMk3oOUpLSykoKKCgoIC2trYZOlMRkdkzZp/khoYG8vLyjK9zc3NpaGiIOKapqYnPfvazAKSkpPDZz34Wr9dLQ0MDDzzwQMRjjxw5EvV1SktLKS0tBaCiYvpXzCY7WCTa40RmmnoPy2SN55q9Y8cOo/Tt2LFjWK1WMjMzx/VYEZGFYsyV5IqKClauXMny5ctJSEhg+/btvPrqqxHHLFq0yFiF+NrXvsYLL7wAwIEDB3jooYew2+3Y7XYeeughDhw4MANvY2w1NTXYbLaI+8YzWCTa40REYtV4rtm1tbU8+OCDANxxxx1YrVZaW1t59dVX2b59OxaLheXLl7Ny5Ur++Mc/zsbbEBGZdWOG5MHBQZ588kkOHDhAVVUVe/fu5ezZszz33HN8+tOfBuCBBx7g/PnznD9/nqysLL75zW8C4PF4eP75540yipKSEjwez8y+oxFMdrDI8MeJiMSy8Vyzv/KVr7Bz505OnjzJz3/+cx5//HEAzp49axz/m9/8hv/8n/8zgUBgFt+NiMjsMTHU5iKmVFRUUFAw/T1h3W43RUVFuFwuampqKC8vH7Vvcuj49evXY7fb6ejo4JGwGmZFZhEZbqauX7EsFt9z+F9sulaLyEhGu36NWZM8l0ULxSUlJeN+bHFxMR6Ph9OnT2Oz2XA4HDN8xiIiIiISC+btWOrJtnwLGakbhoiIiIjMf/M2JE+25VuIy+XC6/VG3Df8axERERGZn+ZtSB4p5I7V8i1kpG4YIiIiIjL/zdvKZextAAAgAElEQVSQPNmWbyEjdcMQERERkflv3obkybZ8C6msrGTPnj14PB7y8vLweDzs2bNnhs9aRERERGLBvO1uEQq54d0tysrKRm35Fu05JnK8iIiIiMwP8zYkg0KuiIiIiEzOvA7Jt9pEh5WIiIiISGyatzXJt9pU+zKLiIiISOxQSJ4mU+3LLCIiIiKxY96WW9zq0geXy0VdXV3EfRPpyywiIiIisWNeriTPRunDVPsyi4iIiEjsmJcheTZKH6bal1lEREREYse8DMlTHUk9GSMNH1F3CxEREZG5Z17WJNfU1OBwOOjo6DDuuxWlD+rLLCIiIjI/zMuVZJU+iIiIiMhUzMuQrNIHEREREZmKeVluASp9EBEREZHJm5crySIiIiIiU6GQLCIiIiIyjEKyiIiIiMgwCskiIiIiIsMoJIuIiIiIDKOQLCIiIiIyjEKyiIiIiMgwCskiIiIiIsMoJIuIiIiIDKOQLCIiIiIyjEKyiIiIiMgwCskiIiIiIsPEz/YJzAa3201RUREul4uamhrKy8uprKyc7dMSERERkRix4FaS3W43xcXFOBwO6urqcDgcFBcX43a7Z/vURERERCRGLLiQXFRUhMfjoaOjg2AwSEdHBx6Ph6Kiotk+NRERERGJEQsuJLtcLrxeb8R9Xq8Xl8s1S2ckIiIiIrFmwYXkmpoabDZbxH02m42amppZOiMRERERiTULLiSXl5fjcDiw2+2YTCbsdjsOh4Py8vLZPjURERERiRELLiRXVlayZ88ePB4PeXl5eDwe9uzZo+4WIiIiImJYkC3gKisrjVAcage3a9cutYMTEREREWABriSHUzs4EREREYlmQYdktYMTERERkWgWdEhWOzgRERERiWZBh2S1gxMRERGRaBZ0SFY7OBERERGJZlwhedu2bZw7d46LFy/y1a9+9abv5+XlcejQIY4fP86pU6d4+OGHgaFyhhs3bnDixAlOnDjBj370o+k9+ylSOzgRERERGUlwtJvZbA5eunQpmJ+fH0xISAiePHkyuGbNmohjfvzjHwefeOKJIBBcs2ZNsLq6OggEXS5X8MyZM6M+f7RbRUXFhB9zq27BsNtsn4tuuukWe7dYvn4tpPccRNdq3XTTbezbaNevMVeSN23axKVLl6iursbv9/Pyyy9TWFgYcUwwGCQ9PR0YqultbGwc62lFRERERGLWmCE5JyeHuro64+v6+npycnIijvnGN77BF77wBerq6njttdd46qmnjO/l5+dz/Phxjhw5wn333Tfi6+zcuZOKigoqKirIzMyczHsREREREZkW07Jx79FHH+WnP/0peXl5fPKTn+RnP/sZJpOJpqYmli1bxsaNG3n66af5P//n/5CWlhb1OUpLSyko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rF271qSnpxtJ5sYbbzRut9v4fD6zatUqc+655wafN3XqVPPyyy8br9dr9u3bZ+69914jyXzta18zx44dM11dXaa1tdX86Ec/GvK/neeff978y7/8S/D2lVdeaQ4dOjTg82pra82CBQv6vN/pdJquri7jdDqD/68PHDhgrrzyyqh/v3BwRPsgZhOzYz1mFxcXm+PHj5vMzMzgY9577z3zzW9+M+rfPzF+RH0AHJZj2rRpxufzGZvNZqZOnWr2799vamtrg/c1NTUFg9w//dM/mYkTJ5px48aZ7373u+bQoUMmLS3NSDIrV64MCRg//elPzfLly40kc9NNN5ndu3ebc88914wbN858//vfN3/+858HHJsxxrz77rvG4XCYoqIis3PnTnPXXXcZ6VQA3717t5k2bZrJyMgwr7zyinn22WeNJDNjxgzT2tpq5s+fb1JTU82///u/m87OTrNw4UIjyfzhD38w3/rWt4Lv8/Of/9z8x3/8R79jufPOO01nZ6e55557zLhx40x6ero566yzzFVXXWVSU1PN5MmTzZo1a8xjjz0WfE4gyAduWwPumjVrzK9+9SuTlpZmzj//fOP1es3f/u3f9vr+TzzxhFm1apXJz883SUlJZu7cuSY1NdUUFxebtrY2c9VVV5nk5GTz4IMPmt27d5uUlBRjs9nMRx99ZJYsWWJSUlLMtGnTzN69e80111wT/Exr167t8zMXFRUZn89nioqKer1/06ZN5tZbbw3enjRpkjHGhPww6+0YKOAuWbLErFq1KmQcxhhz3333mQMHDph9+/aZH/3oR8F/lxwcY+kgZhOz+/rMsRKzb775ZrNt27aQxzz++OMD/j/jiP4AOHo5Dhw4YGbPnm2++MUvmieffNKsX7/enHPOOeYrX/mKqa6u7vN5TU1N5m/+5m+MJHPXXXeZlStXhrzm/PnzjSTz5ptvmq997WvB+2w2m2lvbx+wMmGMMddee23w9t13323eeecdI8m888475u677w7ed/bZZ5uTJ0+acePGmSVLlpgXX3wxeN+ECRPMiRMngsHv1ltvNe+//76RZJKSksyhQ4dMaWlpv2O58847jcfj6fcxZWVlZsOGDcHb/QXcwsJC09XVFfKb9qOPPmr++7//+7TXtdlspqOjI/i17nn84Ac/ML/97W9DHltXV2cWLFhgLr744tPG/L3vfc88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\n","text/plain":["<Figure size 864x1296 with 4 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["plot_outg_range = (-1, 10)\n","plot_data_range = (-10, 100)\n","\n","plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(12, 18))\n","nrows, ncols = len(short_datas), 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        )\n","\n","for ings_idx, (title, short_data, long_data) in enumerate(zip(titles, short_datas, long_datas)):\n","  inner_gs = gs[ings_idx].subgridspec(nrows=1, ncols=2)\n","\n","  print(len(long_max_outg))\n","\n","  short_plot_idx = (plot_outg_range[0] <= short_max_outg) & (short_max_outg <= plot_outg_range[1])\n","  long_plot_idx = (plot_outg_range[0] <= long_max_outg) & (long_max_outg <= plot_outg_range[1])  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_open_data = short_data[short_open_idx]\n","  long_open_data = long_data[long_open_idx]\n","  \n","  short_plot_idx *= (plot_data_range[0] <= short_open_data) * (short_open_data <= plot_data_range[1])\n","  long_plot_idx *= (plot_data_range[0] <= long_open_data) * (long_open_data <= plot_data_range[1]) # nan 과 inf 때문에 이 방식 채택\n","\n","  short_plot_idx *= ~np.isnan(short_open_data)\n","  long_plot_idx *= ~np.isnan(long_open_data)  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_plot_idx *= ~np.isinf(short_open_data)\n","  long_plot_idx *= ~np.isinf(long_open_data)  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_true_idx = short_plot_idx * short_true_open_idxth\n","  long_true_idx = long_plot_idx * long_true_open_idxth\n","  \n","  short_false_idx = short_plot_idx * ~short_true_open_idxth\n","  long_false_idx = long_plot_idx * ~long_true_open_idxth\n","\n","  plt.subplot(inner_gs[0])\n","  # ------ true_bias ------ #\n","  x, y = short_max_outg[short_true_idx].ravel(), short_open_data[short_true_idx].ravel()  \n","  plt.scatter(x, y, color='white', alpha=0.5)\n","  # ------ false_bias ------ #\n","  x, y = short_max_outg[short_false_idx].ravel(), short_open_data[short_false_idx].ravel()\n","  plt.scatter(x, y, color='fuchsia', alpha=0.3)\n","  plt.axvline(current_outg, color='red', linewidth=3)\n","  plt.title(\"{} coef : {:0.3f}\".format(title, np.corrcoef(-x, y)[0, 1]))\n","\n","  plt.subplot(inner_gs[1])    \n","  # ------ true_bias ------ #\n","  x, y = long_max_outg[long_true_idx].ravel(), long_open_data[long_true_idx].ravel()  \n","  plt.scatter(x, y, color='white', alpha=0.5)\n","  # ------ false_bias ------ #\n","  x, y = long_max_outg[long_false_idx].ravel(), long_open_data[long_false_idx].ravel()\n","  plt.scatter(x, y, color='fuchsia', alpha=0.3)\n","  plt.axvline(current_outg, color='red', linewidth=3)\n","  plt.title(\"{} coef : {:0.3f}\".format(title, np.corrcoef(-x, y)[0, 1]))\n","\n","  print()  \n","\n","# plt.suptitle(title)\n","plt.show()\n","# print()"]},{"cell_type":"markdown","metadata":{"id":"EtjwB7Qk-Grj"},"source":["### significance_v3"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oVifICO4-Grk","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1650457903236,"user_tz":-540,"elapsed":92811,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"cc680433-a823-49f0-984b-b102def1dfb3"},"outputs":[{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 1.8770806789398193\n","en_ex_pairing elapsed time : 4.678417921066284\n","short_obj.shape : (224, 5)\n","long_obj.shape : (297, 5)\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.2708160877227783\n"]},{"output_type":"stream","name":"stderr","text":["short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 1.360480785369873\n","en_ex_pairing elapsed time : 2.486814260482788\n","short_obj.shape : (219, 5)\n","long_obj.shape : (290, 5)\n","idep_plot elapsed time : 0.17420339584350586\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9573771953582764\n","en_ex_pairing elapsed time : 2.5399274826049805\n","short_obj.shape : (216, 5)\n","long_obj.shape : (284, 5)\n","idep_plot elapsed time : 0.17514538764953613\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9295077323913574\n","en_ex_pairing elapsed time : 2.590012311935425\n","short_obj.shape : (216, 5)\n","long_obj.shape : (276, 5)\n","idep_plot elapsed time : 0.17911124229431152\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9399333000183105\n","en_ex_pairing elapsed time : 2.5798134803771973\n","short_obj.shape : (212, 5)\n","long_obj.shape : (270, 5)\n","idep_plot elapsed time : 0.17346858978271484\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9290170669555664\n","en_ex_pairing elapsed time : 5.647429466247559\n","short_obj.shape : (207, 5)\n","long_obj.shape : (254, 5)\n","idep_plot elapsed time : 0.16916251182556152\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9428360462188721\n","en_ex_pairing elapsed time : 2.689626693725586\n","short_obj.shape : (207, 5)\n","long_obj.shape : (253, 5)\n","idep_plot elapsed time : 0.1692800521850586\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9309837818145752\n","en_ex_pairing elapsed time : 2.7319159507751465\n","short_obj.shape : (200, 5)\n","long_obj.shape : (251, 5)\n","idep_plot elapsed time : 0.1710515022277832\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9403586387634277\n","en_ex_pairing elapsed time : 2.770930767059326\n","short_obj.shape : (199, 5)\n","long_obj.shape : (249, 5)\n","idep_plot elapsed time : 0.16955161094665527\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9186880588531494\n","en_ex_pairing elapsed time : 2.7493040561676025\n","short_obj.shape : (196, 5)\n","long_obj.shape : (245, 5)\n","idep_plot elapsed time : 0.1687605381011963\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9381396770477295\n","en_ex_pairing elapsed time : 2.84503436088562\n","short_obj.shape : (190, 5)\n","long_obj.shape : (242, 5)\n","idep_plot elapsed time : 0.17363977432250977\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9440255165100098\n","en_ex_pairing elapsed time : 2.8159408569335938\n","short_obj.shape : (186, 5)\n","long_obj.shape : (234, 5)\n","idep_plot elapsed time : 0.17369318008422852\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9416072368621826\n","en_ex_pairing elapsed time : 2.8291068077087402\n","short_obj.shape : (183, 5)\n","long_obj.shape : (231, 5)\n","idep_plot elapsed time : 0.1703174114227295\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9432022571563721\n","en_ex_pairing elapsed time : 2.871189594268799\n","short_obj.shape : (182, 5)\n","long_obj.shape : (228, 5)\n","idep_plot elapsed time : 0.17065644264221191\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9274277687072754\n","en_ex_pairing elapsed time : 2.8935251235961914\n","short_obj.shape : (181, 5)\n","long_obj.shape : (225, 5)\n","idep_plot elapsed time : 0.16975903511047363\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9325885772705078\n","en_ex_pairing elapsed time : 2.919266939163208\n","short_obj.shape : (180, 5)\n","long_obj.shape : (224, 5)\n","idep_plot elapsed time : 0.16817903518676758\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9359078407287598\n","en_ex_pairing elapsed time : 2.940674304962158\n","short_obj.shape : (179, 5)\n","long_obj.shape : (223, 5)\n","idep_plot elapsed time : 0.1795055866241455\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9344277381896973\n","en_ex_pairing elapsed time : 2.865556001663208\n","short_obj.shape : (182, 5)\n","long_obj.shape : (232, 5)\n","idep_plot elapsed time : 0.1728200912475586\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9518506526947021\n","en_ex_pairing elapsed time : 2.9510414600372314\n","short_obj.shape : (175, 5)\n","long_obj.shape : (233, 5)\n","idep_plot elapsed time : 0.17261815071105957\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","np.sum(short_open_res == 1) : 24770\n","np.sum(long_open_res == 1) : 21185\n","short_base_ <= dc_base_3T : 3148.91000 3144.86500 (0.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (0.0)\n","dc_base_3T_rollmin == dc_base_3T : 3129.07500 3144.86500 (0.0)\n","long_base_ >= dc_base_3T : 3148.91000 3144.86500 (1.0)\n","dc_lower2_ >= dc_base_H : 3139.14000 3113.60500 (1.0)\n","dc_base_3T_rollmax == dc_base_3T : 3144.86500 3144.86500 (1.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9305629730224609\n","en_ex_pairing elapsed time : 2.9598007202148438\n","short_obj.shape : (174, 5)\n","long_obj.shape : (231, 5)\n","idep_plot elapsed time : 0.17200040817260742\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1728x576 with 36 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# from google.colab import output\n","# ------------ survey param ------------ #\n","# itv_num_list = [1, 3, 5, 15]\n","# itv_list = ['15m', '30m', '1h', '4h']\n","# itv_list = ['3m', '5m', '15m', '30m', '1h', '4h']\n","# val_list = np.arange(-0.5, -0.9, -0.1)     # prcn 1\n","val_list = np.arange(1.5, 2.5, 0.05)  # prcn 2\n","# val_list = np.arange(-0.695, -0.75, -0.005)    # prcn 3\n","# val_list = np.arange(0.944, 0.945, 0.0001)    # prcn 4\n","# val_list = np.arange(70, 80, 1)   # prcn -1\n","# val_list = np.arange(200, 180, -5)   # prcn -2\n","\n","# ------------ get survey_res ------------ #\n","result = []\n","res_shape = (3, 12)  # short, long, both x data\n","config_list_copy = copy.deepcopy(config_list)\n","for set_val in val_list:\n","  # ------------ open 결정 이전의 인자값 ------------ #\n","  # ------ point * mr_res ------ #\n","  # config_list_copy[0].loc_set.zone.degree_list = set_val\n","  # config_list_copy[0].loc_set.point2.wick_score_list = str([set_val])\n","  # config_list_copy[0].loc_set.zone.ir = set_val  \n","  # config_list_copy[0].loc_set.zone.ei_k = set_val  \n","  # config_list_copy[0].loc_set.zone.abs_ratio = set_val  \n","\n","  # ------------ open 결정 이후의 인자값 ------------ #\n","  # ------ utils ------ #\n","  config_list_copy[0].tr_set.tp_gap = set_val \n","  # config_list_copy[0].tr_set.ep_gap = set_val \n","  # config_list_copy[0].tr_set.out_gap = set_val  \n","\n","  # ------ entry, exit (ep, tp, out vars.) ------ #\n","  # config_list_copy[0].loc_set.zone.ei_k = set_val\n","  # config_list_copy[0].ep_set.ep_out_tick = set_val  \n"," \n","  for utils_, config_ in zip(utils_list, config_list_copy):\n","    # enlist_rtc(res_df, config_, np_timeidx)\n","    enlist_tr(res_df, config_, np_timeidx)\n","  open_info_df = get_open_info_df(ep_loc_v3, res_df, np_timeidx, ID_list, config_list_copy, id_idx_list)   # point * mr_res 이기 때문에 utils_tr & rtc 의 영향을 충분히 받음\n","\n","  try:\n","    result.append(get_res_v4(res_df, open_info_df, ohlc_list, config_list_copy, np_timeidx, funcs, test_ratio=test_ratio, plot_is=1, signi=True))    \n","  except:\n","    result.append(np.full(res_shape, np.nan))\n","    # pass\n","\n","survey_res_list = [np.array(result)[:, s_i::3] for s_i in range(3)]   # 3 for s, l, b\n","# short_res, long_res, both_res = survey_res_list\n","\n","# ------------ plot survey_res ------------ #\n","title_list = [\"short\", \"long\", \"both\"]\n","sub_title_list = ['prcn', 'wb', 'len_pr', 'dpf', 'wr', 'sr', 'acc_pr', 'sum_pr', 'min_pr', 'liqd', 'acc_mdd', 'sum_mdd']\n","space_ = \" \" * 120\n","\n","fig = plt.figure(figsize=(24, 8))\n","plt.style.use('dark_background')\n","gs = gridspec.GridSpec(nrows=1,\n","                        ncols=3,\n","                        # height_ratios=[1, 1, 1]\n","                      )\n","# nrows, ncols, h_r = 3, 3, [1, 1, 1]\n","nrows, ncols, h_r = 3, 4, [1, 1, 1]\n","# nrows, ncols, h_r = 4, 3, [1, 1, 1, 1]\n","# if d_idx == 0:\n","# else:\n","  # nrows, ncols, h_r = 2, 2, [1, 1]\n","\n","for d_idx, (title_name, survey_res) in enumerate(zip(title_list, survey_res_list)):  \n","  inner_gs = gs[d_idx].subgridspec(nrows=nrows,\n","                        ncols=ncols,\n","                        height_ratios=h_r\n","                      )\n","  for in_idx, (data_, sub_title) in enumerate(zip(survey_res.T, sub_title_list)):\n","    plt.subplot(inner_gs[in_idx])\n","    data = data_.ravel()\n","    valid_idx = ~np.isnan(data)\n","    if np.sum(valid_idx) > 0:\n","      x, y = val_list[valid_idx], data[valid_idx]\n","      plt.plot(x, y)  # 앞에서부터 len(result) 만큼만    \n","      plt.title(sub_title + '_{:.2f}'.format(x[np.argmax(y)]))\n","    else:\n","      plt.title(sub_title)\n","\n","plt.suptitle(space_.join(title_list))\n","plt.show()\n","# print(\"\\n\")"]},{"cell_type":"markdown","metadata":{"id":"aT8AXh50ZLVL"},"source":["### backtrader validation"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1jNPvoh_ZQ_N"},"outputs":[],"source":["trade_log_name = \"ETHUSDT_1649667322.pkl\"\n","trade_log_dir_path = \"./trade_log\"\n","\n","with open(os.path.join(trade_log_dir_path, trade_log_name), 'rb') as f:\n","  trade_log = pickle.load(f)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1649685020052,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"v5JQhEQYnwoe","outputId":"52dec11f-062e-487a-92bc-18d9e90c2895"},"outputs":[{"data":{"text/plain":["{'last_trading_time': '2022-04-11 20:16:12.851518'}"]},"execution_count":21,"metadata":{},"output_type":"execute_result"}],"source":["trade_log"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":336,"status":"ok","timestamp":1649685114112,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"mnAtFxJJa4AL","outputId":"95004b91-55f1-4a47-ed12-b536fd111aa9"},"outputs":[{"name":"stdout","output_type":"stream","text":["['2022-02-04 07:24:59.999000', '2022-02-17 05:30:59.999000']\n","[]\n"]}],"source":["# 1. ts 에 pair 된 en_p, ex_p 만 비교하면 될 것\n","#   -> open_idx, en_idx, ex_idx 조회하면 될 것\n","\n","pos_side = \"BUY\" # SELL BUY\n","val_obj = short_obj if pos_side == \"SELL\" else long_obj\n","\n","# ------ get idep trade_info ------ #\n","en_ts = list(map(lambda x : str(x), res_df.index[val_obj[2].astype(int).ravel()])) \n","ex_ts = list(map(lambda x : str(x), res_df.index[val_obj[3].astype(int).ravel()])) \n","en_p = val_obj[0].ravel()\n","ex_p = val_obj[1].ravel()\n","\n","# ------ execute ts comparison ------ #\n","logged_en_ts = [k for k, v in trade_log.items() if 'entry' in v if pos_side in v]\n","\n","lacked_ts = [ts for ts in en_ts if not ts in logged_en_ts]   # trade_log 에 없는 거래\n","added_ts = [ts for ts in logged_en_ts if not ts in en_ts]    # trade_log 에만 있는 거래\n","\n","print(lacked_ts)\n","print(added_ts)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"sxUBVa5Cd1tN"},"outputs":[],"source":["# en_p < ex_p\n","# print(len(en_p))\n","# print(len(en_ts))\n","# list(np.array(en_ts)[en_p < ex_p])\n","# list(np.array(en_ts)[en_p > ex_p])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"h0iwWMzcX1cU"},"outputs":[],"source":["long_open_ = res_df['long_open_{}'.format(config.strat_version)].to_numpy()\n","long_open_ts = list(map(lambda x : str(x), res_df.index[long_open_ == 1]))  "]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":293,"status":"ok","timestamp":1649685562865,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"ZJaZJGQnYnHO","outputId":"0a160e7e-2610-4a1b-997b-8da9bb284768"},"outputs":[{"name":"stdout","output_type":"stream","text":["2022-01-16 23:54:59.999000\n","2022-01-19 07:24:59.999000\n","2022-01-23 06:44:59.999000\n","2022-01-23 06:49:59.999000\n","2022-01-23 10:24:59.999000\n","2022-01-23 14:04:59.999000\n","2022-01-24 06:24:59.999000\n","2022-01-24 06:39:59.999000\n","2022-01-28 08:59:59.999000\n","2022-01-28 12:54:59.999000\n","2022-02-04 07:19:59.999000\n","2022-02-14 22:54:59.999000\n","2022-02-14 23:04:59.999000\n","2022-02-15 11:29:59.999000\n","2022-02-17 05:19:59.999000\n"]}],"source":["long_index = open_info_df.side == 'BUY'\n","\n","for ts in res_df.index[open_info_df.index[long_index]]:\n","  print(ts)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yRfD6mmcGRo9"},"outputs":[],"source":["# ------ check added_ts ------ #\n","keys = list(trade_log.keys())\n","\n","for k_i in range(len(keys)):\n","  if keys[k_i] in added_ts:\n","    # print(trade_log[keys[k_i]])\n","    # print(trade_log[keys[k_i + 1]])\n","    print(keys[k_i], trade_log[keys[k_i]])\n","    print(keys[k_i + 1], trade_log[keys[k_i + 1]])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LF4u9d3taxJD"},"outputs":[],"source":["# 확인해야할 것\n","# 1. en_ts sync (갯수 & 동일)\n","#   a. 누락된 거래 check -> how ?\n","# 2. en_p, ex_p 동일 여부\n","\n","# ------ synced 된 price 에 대한 sync_check ------ #\n","accept_price_gap = 0.1\n","for i in range(len(en_ts)):\n","  try:\n","    print(en_ts[i], trade_log[en_ts[i]][0] - en_p[i])\n","    # print(trade_log[str(ex_ts[i])])\n","    # print(ex_ts[i], trade_log[ex_ts[i]][0] - ex_p[i])\n","    print(ex_ts[i])\n","    print()\n","\n","  except Exception as e:\n","    print(e)\n"]},{"cell_type":"markdown","metadata":{"id":"1GVZ03zDyU2N"},"source":["### legacy"]},{"cell_type":"markdown","metadata":{"id":"IWO7KkqltMFt"},"source":["#### main_functions"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MY1csdNRLGsk"},"outputs":[],"source":["def get_open_info_df(ep_loc_v2, res_df, np_timeidx, ID_list, config_list, id_idx_list):\n","  start_0 = time.time()\n","  # ------ get mr_res, zone_arr ------ #\n","  short_mr_res_obj = np.array([ep_loc_v2(res_df, config_, np_timeidx, show_detail=True, ep_loc_side=OrderSide.SELL) for config_ in config_list])\n","  long_mr_res_obj = np.array([ep_loc_v2(res_df, config_, np_timeidx, show_detail=True, ep_loc_side=OrderSide.BUY) for config_ in config_list])\n","  short_open_idx_list = [np.where(res_df['short_open_{}'.format(id)].to_numpy() * mr_res)[0] for id, mr_res in zip(ID_list, short_mr_res_obj[:, 0].astype(np.float64))]   # \"point * mr_Res\"\n","  long_open_idx_list = [np.where(res_df['long_open_{}'.format(id)].to_numpy() * mr_res)[0] for id, mr_res in zip(ID_list, long_mr_res_obj[:, 0].astype(np.float64))]  # zip 으로 zone (str) 과 묶어서 dtype 변경됨\n","\n","  # ------ open_info_arr ------ #\n","  short_side_list = [np.full(len(list_), OrderSide.SELL) for list_ in short_open_idx_list]\n","  long_side_list = [np.full(len(list_), OrderSide.BUY) for list_ in long_open_idx_list]\n","\n","  short_zone_list = [zone_res[short_open_idx] for zone_res, short_open_idx in zip(short_mr_res_obj[:, 1], short_open_idx_list)]\n","  long_zone_list = [zone_res[long_open_idx] for zone_res, long_open_idx in zip(long_mr_res_obj[:, 1], long_open_idx_list)]\n","\n","  short_id_list = [np.full(len(list_), id) for id, list_ in zip(ID_list, short_open_idx_list)]\n","  long_id_list = [np.full(len(list_), id) for id, list_ in zip(ID_list, long_open_idx_list)]\n","\n","  selected_id_idx = np.arange(len(id_idx_list))\n","  short_id_idx_list = [np.full(len(list_), id) for id, list_ in zip(selected_id_idx, short_open_idx_list)]\n","  long_id_idx_list = [np.full(len(list_), id) for id, list_ in zip(selected_id_idx, long_open_idx_list)]\n","\n","  # ------ get open_info_df ------ #\n","  #   series 만들어서 short / long 끼리 합치고 둘이 합치고, 중복은 우선 순위 정해서 제거\n","  short_open_df_list = [pd.DataFrame(index=index_, data=np.vstack((data_)).T, columns=['side', 'zone', 'id', 'id_idx']) for index_, data_ in zip(short_open_idx_list, zip(short_side_list, short_zone_list, short_id_list, short_id_idx_list))]\n","  long_open_df_list = [pd.DataFrame(index=index_, data=np.vstack((data_)).T, columns=['side', 'zone', 'id', 'id_idx']) for index_, data_ in zip(long_open_idx_list, zip(long_side_list, long_zone_list, long_id_list, long_id_idx_list))]\n","\n","  open_info_df = pd.concat(short_open_df_list + long_open_df_list)\n","  # ------ sorting + unique ------ #\n","  open_info_df.sort_index(inplace=True)\n","  # print(len(open_info_df))\n","  # print(len(open_info_df))\n","  # open_info_df.head()\n","  print(\"get_open_info_df elapsed time :\", time.time() - start_0)\n","  return open_info_df[~open_info_df.index.duplicated(keep='first')]  # 먼저 순서를 우선으로 지정  "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"eiQ36_SLLE3w"},"outputs":[],"source":["def get_res_v4(res_df, open_info_df, ohlc_list, config_list, np_timeidx, funcs, test_ratio=0.3, plot_is=True, signi=False):\n","  # ------------ make open_info_list ------------ #\n","  open_idx = open_info_df.index.to_numpy()\n","  len_df = len(res_df)\n","  s_idx = (open_idx < int(len_df * (1 - test_ratio))) == plot_is\n","  s_open_info_df = open_info_df[s_idx]\n","  s_open_idx = open_idx[s_idx]\n","\n","  open_info_list = [s_open_info_df[col_].to_numpy() for col_ in s_open_info_df.columns]\n","  side_arr, zone_arr, id_arr, id_idx_arr = open_info_list\n","\n","  # ------------ get paired_res ------------ #\n","  start_0 = time.time()\n","  paired_res = en_ex_pairing_v5(res_df, s_open_idx, open_info_list, ohlc_list, config_list, np_timeidx, funcs)\n","  # valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr = paired_res\n","  print(\"en_ex_pairing elapsed time :\", time.time() - start_0)  #  0.37 --> 0.3660471439361572 --> 0.21(lesser if)\n","\n","  # ------------ idep_plot ------------ #\n","  start_0 = time.time()\n","  high, low = ohlc_list[1:3]\n","  res = idep_plot_v11(res_df, len_df, config_list[0], high, low, s_open_idx, side_arr, paired_res, inversion=False, sample_ratio=1 - test_ratio, signi=signi)\n","  print(\"idep_plot elapsed time :\", time.time() - start_0)   # 1.40452 (v6) 1.4311 (v5)\n","\n","  return res"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8LiKwfiJ4bvM"},"outputs":[],"source":["def plot_info_v5(gs, gs_idx, sample_len, tr, prcn, rc, pr, total_pr, cum_pr, liqd, leverage, title_position, fontsize):\n","  try:\n","    plt.subplot(gs[gs_idx])\n","    idep_res_obj = get_res_info_nb_v2(sample_len, pr, total_pr, cum_pr, liqd)\n","    plt.plot(cum_pr)\n","    plt.plot(idep_res_obj[-1], color='gold')\n","    if sample_len is not None:\n","      plt.axvline(sample_len, alpha=1., linestyle='--', color='#ffeb3b')\n","    # title_str = \"prcn : {:.3f} rc : {:.3f}\\n len_pr : {} dpf : {:.3f}\\n wr : {:.3f} sr : {:.3f}\\n acc_pr : {:.3f} sum_pr : {:.3f}\\n\" +\\\n","    #           \"min_pr : {:.3f} liqd : {:.3f}\\n acc_mdd : -{:.3f} sum_mdd : -{:.3f}\\n leverage {}\"\n","    # title_str = \"tr : {:.3f}\\n prcn : {:.3f}\\n rc : {:.3f}\\n len_pr : {}\\n dpf : {:.3f}\\n wr : {:.3f}\\n sr : {:.3f}\\n acc_pr : {:.3f}\\n sum_pr : {:.3f}\\n\" +\\\n","    #           \"min_pr : {:.3f}\\n liqd : {:.3f}\\n acc_mdd : -{:.3f}\\n sum_mdd : -{:.3f}\\n leverage {}\"\n","    title_str = \"tr : {:.3f}\\n prcn : {:.3f}\\n swing_bias : {:.3f}\\n len_pr : {}\\n dpf : {:.3f}\\n wr : {:.3f}\\n sr : {:.3f}\\n acc_pr : {:.3f}\\n sum_pr : {:.3f}\\n\" +\\\n","              \"min_pr : {:.3f}\\n liqd : {:.3f}\\n acc_mdd : -{:.3f}\\n sum_mdd : -{:.3f}\\n leverage {}\"\n","    plt.title(title_str.format(tr, prcn, rc, *idep_res_obj[:-1], leverage), position=title_position, fontsize=fontsize)\n","  except Exception as e:\n","    print(\"error in plot_info :\", e)\n","\n","  return gs_idx + 1"]},{"cell_type":"code","source":["def ffill_line(line_, idx_):\n","  len_line = len(line_)\n","  total_en_idx = np.zeros(len_line)\n","  total_en_idx[idx_] = 1\n","  idx_line_ = np.where(total_en_idx, line_, np.nan)\n","  idx_line = pd.Series(idx_line_).ffill().to_numpy()\n","\n","  return idx_line\n","\n","def get_wave_bias(res_df, config, high, low, len_df, short_obj, long_obj):\n","  \n","  short_op_idx = short_obj[-1].astype(int)\n","  short_en_idx = short_obj[2].astype(int)\n","  short_en_tp1 = ffill_line(res_df['short_tp_1_{}'.format(config.strat_version)].to_numpy(), short_op_idx)   # en_idx 에 sync 된 open_idx 를 사용해야함\n","  short_en_out0 = ffill_line(res_df['short_epout_0_{}'.format(config.strat_version)].to_numpy(), short_op_idx)\n","\n","  long_op_idx = long_obj[-1].astype(int)\n","  long_en_idx = long_obj[2].astype(int)\n","  long_en_tp1 = ffill_line(res_df['long_tp_1_{}'.format(config.strat_version)].to_numpy(), long_op_idx)\n","  long_en_out0 = ffill_line(res_df['long_epout_0_{}'.format(config.strat_version)].to_numpy(), long_op_idx)\n","\n","  bias_info_tick = config.tr_set.bias_info_tick\n","\n","  # 1. min 에 초점을 맞추는 거니까, touch 없을시 len_df 로 설정\n","  # 2. future_data 사용이니까, shift(-bias_info_tick) 설정\n","  # 3. entry 다음 idx 부터 -> tp & out 체결 logic 이 현재 entry_idx 부터 되어있어서 취소\n","  last_idx = len_df - 1\n","  short_en_tp1_touch_idx = pd.Series(np.where(low <= short_en_tp1, np.arange(len_df), last_idx)).rolling(bias_info_tick, min_periods=1).min().shift(-bias_info_tick).to_numpy()[short_en_idx]  \n","  short_en_out0_touch_idx = pd.Series(np.where(high >= short_en_out0, np.arange(len_df), last_idx)).rolling(bias_info_tick, min_periods=1).min().shift(-bias_info_tick).to_numpy()[short_en_idx]\n","\n","  long_en_tp1_touch_idx = pd.Series(np.where(high >= long_en_tp1, np.arange(len_df), last_idx)).rolling(bias_info_tick, min_periods=1).min().shift(-bias_info_tick).to_numpy()[long_en_idx]\n","  long_en_out0_touch_idx = pd.Series(np.where(low <= long_en_out0, np.arange(len_df), last_idx)).rolling(bias_info_tick, min_periods=1).min().shift(-bias_info_tick).to_numpy()[long_en_idx]\n","\n","  short_true_bias_idx = short_en_tp1_touch_idx < short_en_out0_touch_idx  # true_bias 의 조건\n","  long_true_bias_idx = long_en_tp1_touch_idx < long_en_out0_touch_idx\n","\n","  short_false_bias_idx = short_en_tp1_touch_idx > short_en_out0_touch_idx  # false_bias 의 조건\n","  long_false_bias_idx = long_en_tp1_touch_idx > long_en_out0_touch_idx\n","\n","  # return short_true_bias_idx.ravel(), short_false_bias_idx.ravel(), long_true_bias_idx.ravel(), long_false_bias_idx.ravel()\n","  return short_true_bias_idx, short_false_bias_idx, long_true_bias_idx, long_false_bias_idx, short_en_tp1[short_en_idx], short_en_out0[short_en_idx], long_en_tp1[long_en_idx], long_en_out0[long_en_idx]\n","\n","  \n","def wave_bias(true_idx, false_idx):  # 정확하게 하려고, true & false 로 기준함\n","    true_sum = np.sum(true_idx)\n","    false_sum = np.sum(false_idx)\n","    return true_sum / (true_sum + false_sum)"],"metadata":{"id":"aFpEbTaECnGW"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xafHpMLwESKf"},"outputs":[],"source":["def idep_plot_v11(res_df, len_df, config, high, low, open_idx, side_arr, paired_res, inversion=False, sample_ratio=0.7, title_position=(0.5, 0.5), fontsize=15, signi=False):\n","    if not signi:\n","        plt.style.use(['dark_background', 'fast'])\n","        fig = plt.figure(figsize=(24, 8))\n","        gs = gridspec.GridSpec(nrows=2,  # row 몇 개\n","                               ncols=3,  # col 몇 개\n","                               height_ratios=[10, 1]\n","                               # height_ratios=[10, 10, 1]\n","                               )\n","    gs_idx = 0\n","    # plt.suptitle(key)\n","    \n","    p_ranges, p_qty_ratio = literal_eval(config.tp_set.p_ranges), literal_eval(config.tp_set.p_qty_ratio)\n","    assert np.sum(p_qty_ratio) == 1.0\n","    assert len(p_ranges) == len(p_qty_ratio)\n","\n","    if sample_ratio is not None:\n","      sample_len = int(len_df * sample_ratio)\n","    else:\n","      sample_len = len_df\n","\n","    # ------ short & long data preparation ------ #\n","    # start_0 = time.time()\n","    point1_arr, valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr, tr_arr = paired_res    \n","    assert len(valid_openi_arr) != 0, \"assert len(valid_openi_arr) != 0\"    \n","    short_valid_openi_idx = np.where(side_arr[valid_openi_arr] == OrderSide.SELL)[0]  # valid_openi_arr 에 대한 idx, # side_arr,\n","    long_valid_openi_idx = np.where(side_arr[valid_openi_arr] == OrderSide.BUY)[0]\n","\n","    valid_open_idx = open_idx[valid_openi_arr].reshape(-1, 1)\n","\n","    short_obj = np.hstack((pair_price_arr, pair_idx_arr, valid_open_idx))[short_valid_openi_idx]\n","    long_obj = np.hstack((pair_price_arr, pair_idx_arr, valid_open_idx))[long_valid_openi_idx]\n","    both_obj = np.vstack((short_obj, long_obj))\n","    print(\"short_obj.shape :\", short_obj.shape)\n","    print(\"long_obj.shape :\", long_obj.shape)\n","\n","    short_obj, long_obj, both_obj = [np.split(obj_, 5, axis=1) for obj_ in [short_obj, long_obj, both_obj]]\n","\n","    short_point1_arr, long_point1_arr = [point1_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    short_lvrg_arr, long_lvrg_arr = [lvrg_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    short_fee_arr, long_fee_arr = [fee_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    short_tpout_arr, long_tpout_arr = [tpout_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    # short_bias_arr, long_bias_arr = [bias_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    short_tr_arr, long_tr_arr = [tr_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    # print(\"long_bias_arr.shape :\", long_bias_arr.shape)    \n","    # print(\"elapsed time :\", time.time() - start_0)\n","\n","    short_true_bias_idx, short_false_bias_idx, long_true_bias_idx, long_false_bias_idx, short_en_tp1, short_en_out0, long_en_tp1, long_en_out0 = \\\n","    get_wave_bias(res_df, config, high, low, len_df, short_obj, long_obj)\n","\n","    len_short, len_long = len(short_valid_openi_idx), len(long_valid_openi_idx)\n","\n","    # ------ plot_data ------ #\n","    try:\n","      # start_0 = time.time()      \n","      if len_short == 0:\n","        short_pr = []\n","        gs_idx += 1\n","      else:\n","        short_tr = short_tr_arr.mean()\n","        short_pr, short_liqd = get_pr_v3(OrderSide.SELL, high, low, short_obj, short_tpout_arr, short_lvrg_arr, short_fee_arr, p_ranges, p_qty_ratio, inversion)\n","        short_total_pr = to_total_pr(len_df, short_pr, short_obj[-2])\n","        short_cum_pr = np.cumprod(short_total_pr)\n","        # short_liqd = liquidation_v2(OrderSide.SELL, h, short_obj[:4], short_lvrg_arr, short_fee_arr)\n","        short_prcn, short_rc = precision(short_pr, short_true_bias_idx), wave_bias(short_true_bias_idx, short_false_bias_idx)\n","        if signi:\n","          short_idep_res_obj = (short_prcn, short_rc) + get_res_info_nb_v2(sample_len, short_pr, short_total_pr, short_cum_pr, short_liqd)\n","        else:\n","          gs_idx = plot_info_v5(gs, gs_idx, sample_len, short_tr, short_prcn, short_rc, short_pr, short_total_pr, short_cum_pr, short_liqd, short_lvrg_arr[-1], title_position, fontsize)\n","      # print(\"elapsed time :\", time.time() - start_0)\n","\n","    except Exception as e:\n","      gs_idx += 1\n","      print(\"error in short plot_data :\", e)\n","\n","    try:\n","      # start_0 = time.time()   \n","      if len_long == 0:\n","        long_pr = []\n","        gs_idx += 1\n","      else:\n","        long_tr = long_tr_arr.mean()\n","        long_pr, long_liqd = get_pr_v3(OrderSide.BUY, high, low, long_obj, long_tpout_arr, long_lvrg_arr, long_fee_arr, p_ranges, p_qty_ratio, inversion)\n","        long_total_pr = to_total_pr(len_df, long_pr, long_obj[-2])\n","        long_cum_pr = np.cumprod(long_total_pr)\n","        # long_liqd = liquidation_v2(OrderSide.BUY, l, long_obj[:4], long_lvrg_arr, long_fee_arr)\n","        long_prcn, long_rc = precision(long_pr, long_true_bias_idx), wave_bias(long_true_bias_idx, long_false_bias_idx)\n","        if signi:\n","          long_idep_res_obj = (long_prcn, long_rc) + get_res_info_nb_v2(sample_len, long_pr, long_total_pr, long_cum_pr, long_liqd)\n","        else:\n","          gs_idx = plot_info_v5(gs, gs_idx, sample_len, long_tr, long_prcn, long_rc, long_pr, long_total_pr, long_cum_pr, long_liqd, long_lvrg_arr[-1], title_position, fontsize)\n","      # print(\"elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","      gs_idx += 1\n","      print(\"error in long plot_data :\", e)\n","\n","    \n","    try:\n","      # start_0 = time.time()\n","      if len_short * len_long == 0:\n","        both_pr = []\n","        gs_idx += 1\n","      else:\n","        both_tr = (short_tr + long_tr) / 2\n","        both_pr = np.vstack((short_pr, long_pr))  # for 2d arr, obj 를 1d 로 만들지 않는 이상, pr 은 2d 유지될 것\n","        both_total_pr = to_total_pr(len_df, both_pr, both_obj[-2])\n","        both_cum_pr = np.cumprod(both_total_pr)\n","        both_liqd = min(short_liqd, long_liqd)\n","        both_true_bias_idx = np.vstack((short_true_bias_idx, long_true_bias_idx))  # vstack for 2d arr\n","        both_false_bias_idx = np.vstack((short_false_bias_idx, long_false_bias_idx))\n","        both_prcn, both_rc = precision(both_pr, both_true_bias_idx), wave_bias(both_true_bias_idx, both_false_bias_idx)\n","        if signi:\n","          both_idep_res_obj = (both_prcn, both_rc) + get_res_info_nb_v2(sample_len, both_pr, both_total_pr, both_cum_pr, both_liqd)\n","        else:\n","          gs_idx = plot_info_v5(gs, gs_idx, sample_len, both_tr, both_prcn, both_rc, both_pr, both_total_pr, both_cum_pr, both_liqd, lvrg_arr[-1], title_position, fontsize)\n","      # print(\"elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","      gs_idx += 1\n","      print(\"error in both plot_data :\", e)\n","\n","    if not signi:\n","      if len_short * len_long > 0:\n","        for obj, cum_pr in zip([short_obj, long_obj, both_obj], [short_cum_pr, long_cum_pr, both_cum_pr]):\n","          try:\n","            # start_0 = time.time()\n","            gs_idx = frq_dev_plot_v3(gs, gs_idx, len_df, sample_len, obj[-2], cum_pr[-1], fontsize)\n","            # print(\"elapsed time :\", time.time() - start_0)          \n","          except Exception as e:\n","            gs_idx += 1\n","            print(\"error in frq_dev_plot_v3 :\", e)\n","        plt.show()\n","        plt.close()\n","\n","      return short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_true_bias_idx, short_false_bias_idx, short_point1_arr, short_en_tp1, short_en_out0, \\\n","      long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_true_bias_idx, long_false_bias_idx, long_point1_arr, long_en_tp1, long_en_out0\n","        \n","    else:\n","        return [short_idep_res_obj[:-1], long_idep_res_obj[:-1], both_idep_res_obj[:-1]]"]},{"cell_type":"markdown","metadata":{"id":"EFyWTuscH8VH"},"source":["#### get paired_res function"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qfbtFVMR01UJ"},"outputs":[],"source":["def en_ex_pairing_v5(res_df, open_idx, open_info_list, ohlc_list, config_list, np_timeidx, funcs):  # 이미 충분히 줄여놓은 idx 임\n","    side_arr, zone_arr, id_arr, id_idx_arr = open_info_list\n","    id_idx_arr = id_idx_arr.astype(int)\n","\n","    ep_out, ep_loc_point2, lvrg_set = funcs\n","\n","    point1_list, valid_openi_list, pair_idx_list, pair_price_list, lvrg_list, fee_list, tpout_list, tr_list = [[] for li in range(8)]\n","    len_df = len(res_df)\n","    len_open_idx = len(open_idx)\n","    i, open_i = 0, -1  # i for total_res_df indexing\n","\n","    while 1:\n","        # ------------ entry phase ------------ #\n","        open_i += 1  # 확인 끝났으면 조기 이탈(+1), 다음 open_idx 조사 진행\n","        if open_i >= len_open_idx:\n","            break\n","\n","        # ------ ep_loc ------ #\n","        op_idx = open_idx[open_i]  # open_i 는 i 와 별개로 운영\n","        if op_idx < i:  # i = 이전 거래 끝난후의 res_df index - \"거래 종료후 거래 시작\", '<' : 거래 종료시점 진입 가능하다는 의미\n","            continue\n","\n","        # ------ dynamic data by ID ------ #\n","        #     1. 해당 id 로 config 재할당해야함\n","        id_idx = id_idx_arr[open_i]\n","        config = config_list[id_idx]\n","        strat_version = config.strat_version\n","        open_side = side_arr[open_i]\n","\n","        side_pos = 'short' if open_side == OrderSide.SELL else 'long'\n","        tp_arr = res_df['{}_tp_{}'.format(side_pos, strat_version)].to_numpy()  # => eptpout arr_list 만들어서 꺼내 사용하면 될 것\n","        point_idxgap_arr = res_df['{}_point_idxgap_{}'.format(side_pos, strat_version)].to_numpy()\n","\n","        ep_arr = res_df['{}_ep_{}'.format(side_pos, strat_version)].to_numpy()  # Todo - while loop 내에서 to_numpy() 반복하느니, pd_indexing 이 낫지 않을까\n","        out_arr = res_df['{}_out_{}'.format(side_pos, strat_version)].to_numpy()\n","        # bias_info_arr = res_df['{}_bias_info_{}'.format(side_pos, strat_version)].to_numpy()  # ex. rolling(entry ~ end)'s high\n","        # bias_thresh_arr = res_df['{}_bias_thresh_{}'.format(side_pos, strat_version)].to_numpy()  # ex. close + dc_T20 * 0.5\n","        tr_arr = res_df['{}_tr_{}'.format(side_pos, strat_version)].to_numpy()\n","\n","        # ------ ei_k & point2 ------ #\n","        i = op_idx + 1  # open_signal 이 close_bar.shift(1) 이라고 가정하고 다음 bar 부터 체결확인한다는 의미\n","        if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","            break\n","\n","        # ------ point1 & 2's tp_j ------ #\n","        point_idxgap = point_idxgap_arr[op_idx]\n","        if np.isnan(point_idxgap):\n","            continue\n","        else:\n","            # ------ allow point2 only next to point1 ------ #\n","            open_arr = res_df['{}_open_{}'.format(side_pos, strat_version)].to_numpy()\n","            tp_j = int(op_idx - point_idxgap)\n","            if np.sum(open_arr[tp_j:op_idx]) != 0:\n","                continue\n","\n","        exec_j, ep_j, tp_j, out_j, entry_done, en_p, fee = check_eik_point2_exec_v3(res_df, config, op_idx, tp_j, len_df, open_side,\n","                                                                                 [*ohlc_list, ep_arr], ep_out, ep_loc_point2)\n","        i = exec_j\n","\n","        if not entry_done:\n","            continue\n","\n","        # ------ leverage ------ #\n","        out = out_arr[out_j]  # lvrg_set use out on out_j\n","        leverage = lvrg_set(res_df, config, open_side, en_p, out, fee)  # res_df 변수 사용됨 - 주석 처리 된 상태일뿐\n","        if leverage is None:\n","            continue\n","\n","        exit_done, cross_on = 0, 0\n","        # ------ check tpout_onexec ------ #\n","        # if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","        if config.ep_set.entry_type == \"LIMIT\":\n","            if config.tp_set.tp_onexec:  # dynamic 은 tp_onexec 사용하는 의미가 없음\n","                tp_j = exec_j\n","            if config.out_set.out_onexec:  # dynamic 은 out_onexec 사용하는 의미가 없음\n","                out_j = exec_j\n","\n","        while 1:\n","            # ------------ exit phase ------------ #\n","            if not config.tp_set.static_tp:  # 앞으로 왠만하면 static 만 사용할 예정\n","                tp_j = i\n","            if not config.out_set.static_out:\n","                out_j = i\n","\n","            # ------------ tp ------------ #\n","            if not config.tp_set.non_tp and i != exec_j:\n","                exit_done, ex_p, fee = check_limit_tp_exec(res_df, config, open_i, i, tp_j, len_df, fee, open_side, exit_done,\n","                                                           [*ohlc_list, [tp_arr]])  # 여기서는 j -> i 로 변경해야함\n","                # if config.tp_set.tp_type in ['LIMIT']:  # 'BOTH' -> 앞으로는, LIMIT 밖에 없을거라 주석처리함\n","                # if not exit_done and config.tp_set.tp_type in ['MARKET', 'BOTH']:\n","\n","            # ------------ out ------------ #\n","            # ------ signal_out ------ #\n","            if not exit_done:\n","                exit_done, cross_on, ex_p, fee = check_market_out_exec_v2(config, res_df, np_timeidx, open_i, i, len_df, fee, open_side, cross_on, exit_done)\n","            # ------ hl_out ------ #\n","            if config.out_set.hl_out != \"None\":\n","                if not exit_done:  # and i != len_df - 1:\n","                    exit_done, ex_p, fee = check_out(config, open_i, i, out_j, len_df, fee, open_side, exit_done, [*ohlc_list, out_arr])\n","\n","            if exit_done:  # 이 phase 는 exit_phase 뒤에도 있어야할 것 - entry_done var. 사용은 안하겠지만\n","                # ------ append dynamic vars. ------ #\n","                point1_list.append(tp_j)\n","                valid_openi_list.append(open_i)  # side, zone, start_ver arr 모두 openi_list 로 접근하기 위해 open_i 를 담음\n","                pair_idx_list.append([exec_j, i])  # entry & exit (체결 기준임)\n","                pair_price_list.append([en_p, ex_p])\n","                lvrg_list.append(leverage)\n","                fee_list.append(fee)\n","                tpout_list.append([tp_arr[tp_j], out_arr[out_j]])  # for tpout_line plot_check\n","                # bias_list.append([bias_info_arr[exec_j], bias_thresh_arr[exec_j]])  # backtest 에서만 가능한 future_data 사용\n","                # bias_list.append([bias_info_arr[exec_j], tp_arr[tp_j]])  # bias_info 는 entry_idx 부터 & tp = bias_thresh\n","                tr_list.append(tr_arr[op_idx])\n","\n","                # open_i += 1  # 다음 open_idx 조사 진행\n","                break\n","\n","            # 1. 아래있으면, 체결 기준부터 tp, out 허용 -> tp 가 entry_idx 에 체결되는게 다소 염려되기는 함, 일단 진행 (그런 case 가 많지 않았으므로)\n","            # 2. 위에있으면, entry 다음 tick 부터 exit 허용\n","            i += 1\n","            if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","                break\n","\n","        if i >= len_df:  # or open_i >= len_open_idx:  # res_df 의 last_index 까지 돌아야함\n","            break\n","        else:\n","            continue\n","\n","    return np.array(point1_list), np.array(valid_openi_list), np.array(pair_idx_list), np.array(pair_price_list), np.array(lvrg_list), np.array(\n","        fee_list), np.array(tpout_list), np.array(tr_list)\n","\n","\n","def check_eik_point2_exec_v3(res_df, config, op_idx, tp_j, len_df, open_side, np_datas, ep_out, ep_loc_point2):\n","    o, h, l, c, ep_arr = np_datas\n","    ep_j = op_idx\n","    # tp_j = op_idx\n","    out_j = op_idx\n","\n","    strat_version = config.strat_version    \n","    allow_ep_in = 0 if config.ep_set.point2.use_point2 else 1\n","    entry_done = 0\n","    ep = None\n","\n","    if config.ep_set.entry_type == \"LIMIT\":\n","        fee = config.trader_set.limit_fee\n","\n","        for e_j in range(op_idx + 1, len_df):\n","            # ------ index setting for dynamic options ------ #\n","            if not config.ep_set.static_ep:\n","                ep_j = e_j  # dynamic_ep 를 위한 ep_index var.\n","                out_j = e_j  # dynamic_out 를 위한 out_index var. - 조건식이 static_ep 와 같이 있는 이유 모름 => dynamic_lvrg 로 사료됨\n","\n","            if not config.tp_set.static_tp:\n","                tp_j = e_j\n","\n","            # ------ ei_k ------ # - limit 사용하면 default 로 ei_k 가 존재해야함\n","            if ep_out(res_df, config, op_idx, e_j, tp_j, [h, l], open_side):\n","              break\n","\n","            # ------ point2 ------ #\n","            if not allow_ep_in:\n","                allow_ep_in, out_j = ep_loc_point2(res_df, config, e_j, out_j, side=OrderSide.SELL)\n","                if allow_ep_in:\n","                  if config.ep_set.point2.entry_type == \"LIMIT\":\n","                    ep_j = e_j\n","                    # print(\"e_j in point2 :\", e_j)\n","                    continue\n","\n","            # ------ check ep_exec ------ #\n","            if allow_ep_in:\n","              if config.ep_set.point2.use_point2 and config.ep_set.point2.entry_type == 'MARKET':\n","                entry_done = 1\n","                ep = c[e_j]\n","                break\n","              else:\n","                if open_side == OrderSide.SELL:\n","                    if h[e_j] >= ep_arr[ep_j]:\n","                        entry_done = 1\n","                        ep = ep_arr[ep_j]\n","                        if o[e_j] >= ep_arr[ep_j]:  # open comp 는 결국, 수익률에 얹어주는 logic (반보수) -> 사용 보류\n","                            ep = o[e_j]\n","                        break\n","                else:\n","                    if l[e_j] <= ep_arr[ep_j]:\n","                        entry_done = 1\n","                        ep = ep_arr[ep_j]\n","                        if o[e_j] <= ep_arr[ep_j]:\n","                            ep = o[e_j]\n","                        break\n","\n","    else:  # market entry\n","        e_j = op_idx + 1\n","        entry_done = 1\n","        ep = c[op_idx]\n","        fee = config.trader_set.market_fee\n","\n","    return e_j, ep_j, tp_j, out_j, entry_done, ep, fee  # 다음 start_i <-- e_j 로 변경\n","    #   e_j => 다음 phase 의 시작 index <-> ep_j : ep 의 기준 index\n","    #   ep_j, tp_j, out_j 가 return 되어야함 - exit phase 에서 이어가기 위함\n","\n","\n","def check_limit_tp_exec(res_df, config, open_i, j, tp_j, len_df, fee, open_side, exit_done, np_datas):\n","    o, h, l, c, tps = np_datas\n","    tp = None\n","    strat_version = config.strat_version\n","    len_tps = len(tps)\n","\n","    for tp_i, tp_arr in enumerate(tps):\n","        #     decay adjustment    #\n","        #     tp_j includes dynamic_j - functionalize  #\n","        try:\n","            if config.tr_set.decay_gap != \"None\":\n","                decay_share = (j - open_i) // config.tp_set.decay_term\n","                decay_remain = (j - open_i) % config.tp_set.decay_term\n","                if j != open_i and decay_remain == 0:\n","                    if open_side == OrderSide.SELL:\n","                        tp_arr[tp_j] += res_df['short_tp_gap_{}'.format(strat_version)].iloc[open_i] * config.tr_set.decay_gap * decay_share\n","                    else:\n","                        tp_arr[tp_j] -= res_df['long_tp_gap_{}'.format(strat_version)].iloc[open_i] * config.tr_set.decay_gap * decay_share\n","        except:\n","            pass\n","\n","        if open_side == OrderSide.SELL:\n","            if l[j] <= tp_arr[tp_j]:  # and partial_tp_cnt == tp_i:  # we use static tp now\n","                # if l[j] <= tp_arr[j] <= h[j]: --> 이건 잘못되었음\n","                # partial_tp_cnt += 1 --> partial_tp 보류\n","\n","                # ------ dynamic tp ------ #\n","                if tp_arr[j] != tp_arr[j - 1] and not config.tp_set.static_tp:\n","                    # tp limit 이 불가한 경우 - open 이 이미, tp 를 넘은 경우\n","                    if o[j] < tp_arr[j]:\n","                        tp = o[j]\n","                    # tp limit 이 가능한 경우 - open 이 아직, tp 를 넘지 않은 경우\n","                    else:\n","                        tp = tp_arr[j]\n","                # ------ static tp ------ #\n","                else:\n","                    #   tp limit 이 불가한 경우 - open 이 이미, tp 를 넘은 경우\n","                    if o[j] < tp_arr[tp_j]:  # static 해놓고 decay 사용하면 dynamic 이니까\n","                        if config.tr_set.decay_gap != \"None\" and decay_remain == 0:\n","                            tp = o[j]  # tp_j -> open_i 를 가리키기 때문에 decay 는 한번만 진행되는게 맞음\n","                        else:\n","                            tp = tp_arr[tp_j]\n","                    else:\n","                        tp = tp_arr[tp_j]\n","\n","                if tp_i == len_tps - 1:\n","                    exit_done = 1  # partial 을 고려해 exit_done = 1 상태는 tp_i 가 last_index 로 체결된 경우만 해당\n","\n","        else:\n","            if h[j] >= tp_arr[tp_j]:\n","                # ------ dynamic tp ------ #\n","                if tp_arr[j] != tp_arr[j - 1] and not config.tp_set.static_tp:\n","                    if o[j] > tp_arr[j]:\n","                        tp = o[j]\n","                    else:\n","                        tp = tp_arr[j]\n","\n","                # ------ static tp ------ #\n","                else:\n","                    if o[j] > tp_arr[tp_j]:\n","                        if config.tr_set.decay_gap != \"None\" and decay_remain == 0:\n","                            tp = o[j]\n","                        else:\n","                            tp = tp_arr[tp_j]\n","                    else:\n","                        tp = tp_arr[tp_j]\n","\n","                if tp_i == len_tps - 1:\n","                    exit_done = 1  # partial 을 고려해 exit_done = 1 상태는 tp_i 가 last_index 로 체결된 경우만 해당\n","\n","    if exit_done:\n","        fee += config.trader_set.limit_fee\n","\n","    return exit_done, tp, fee\n","\n","\n","def check_market_out_exec_v2(config, res_df, np_timeidx, open_i, j, len_df, fee, open_side, cross_on, exit_done):    \n","    close = res_df['close'].to_numpy()\n","    ex_p = None\n","    strat_version = config.strat_version\n","\n","    # ------ timestamp ------ #\n","    if config.out_set.tf_exit != \"None\":\n","        if np_timeidx[j] % config.out_set.tf_exit == config.out_set.tf_exit - 1 and j != open_i:\n","            exit_done = 1\n","\n","    # ------ rsi ------ # -> vectorize 가능함 => 추후 적용\n","    if config.out_set.rsi_exit:\n","        rsi_T = res_df['rsi_T'].to_numpy()\n","\n","        if open_side == OrderSide.SELL:\n","            if (rsi_T[j - 1] >= 50 - config.loc_set.point.osc_band) & (rsi_T[j] < 50 - config.loc_set.point.osc_band):\n","                exit_done = 1\n","        else:\n","            if (rsi_T[j - 1] <= 50 + config.loc_set.point.osc_band) & (rsi_T[j] > 50 + config.loc_set.point.osc_band):\n","                exit_done = 1\n","\n","    # ------ heikin_ashi ------ #\n","    # if strat_version in ['v3_3']:\n","    #     if open_side == OrderSide.SELL:\n","    #       if (ha_o[j] < ha_c[j]):# & (ha_o[j] == ha_l[j]):   # 양봉 출현\n","    #           exit_done = 1\n","    #     else:\n","    #       if (ha_o[j] > ha_c[j]):# & (ha_o[j] == ha_h[j]):  # 음봉 출현\n","    #           exit_done = 1\n","\n","    # ------------ early out ------------ #\n","    # ------ bb ------ # --> cross_on 기능은 ide latency 개선 여부에 해당되지 않음\n","    if strat_version in ['v5_2']:\n","        bb_upper_5T = res_df['bb_upper_5T'].to_numpy()\n","        bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","\n","        if open_side == OrderSide.SELL:\n","            if close[j] < bb_lower_5T[j] < close[j - 1]:\n","                cross_on = 1\n","            if cross_on == 1 and close[j] > bb_upper_5T[j] > close[j - 1]:\n","                exit_done = 1\n","        else:\n","            if close[j] > bb_upper_5T[j] > close[j - 1]:\n","                cross_on = 1\n","            if cross_on == 1 and close[j] < bb_lower_5T[j] < close[j - 1]:\n","                exit_done = 1\n","\n","    if exit_done:\n","        ex_p = close[j]\n","        fee += config.trader_set.market_fee\n","\n","    return exit_done, cross_on, ex_p, fee\n","\n","\n","def check_out(config, open_i, j, out_j, len_df, fee, open_side, exit_done, np_datas):\n","    o, h, l, c, out_arr = np_datas\n","    ex_p = None\n","\n","    if config.out_set.hl_out:\n","        if open_side == OrderSide.SELL:\n","            if h[j] >= out_arr[out_j]:  # check out only once\n","                exit_done = 1\n","        else:\n","            if l[j] <= out_arr[out_j]:  # check out only once\n","                exit_done = 1\n","    else:  # close_out\n","        if open_side == OrderSide.SELL:\n","            if c[j] >= out_arr[out_j]:  # check out only once\n","                exit_done = 1\n","        else:\n","            if c[j] <= out_arr[out_j]:  # check out only once\n","                ex_p = c[j]\n","                exit_done = 1\n","\n","    if exit_done:\n","        if config.out_set.hl_out:\n","            ex_p = out_arr[out_j]\n","        else:\n","            ex_p = c[j]\n","\n","        if open_side == OrderSide.SELL:\n","            if o[j] >= out_arr[out_j]:\n","                ex_p = o[j]\n","        else:\n","            if o[j] <= out_arr[out_j]:\n","                ex_p = o[j]\n","\n","        fee += config.trader_set.market_fee\n","\n","    return exit_done, ex_p, fee"]},{"cell_type":"markdown","metadata":{"id":"zQ-roiifspcX"},"source":["#### ep_loc.point & zone legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Js5eL87VspcX"},"outputs":[],"source":["\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 (res_df['close'] < res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(strat_version)] - 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] >= res_df['bb_lower_1m']) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['bb_lower_1m']) &\n","    #                 (res_df['close'] < res_df['bb_lower_1m'])\n","    #                 , res_df['entry_{}'.format(strat_version)] - 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   (res_df['close'] > res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(strat_version)] + 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] <= res_df['bb_upper_1m']) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['bb_upper_1m']) &\n","    #                   (res_df['close'] > res_df['bb_upper_1m'])\n","    #                 , res_df['entry_{}'.format(strat_version)] + 1, res_df['entry_{}'.format(strat_version)])\n","\n","\n","    \n","   # --------------- ema --------------- #   \n","  # res_df['ema5_1m'] = ema(res_df['close'], 5).shift(1)\n","\n","  #   # --------------- cloud bline --------------- #   \n","  # res_df['cloud_bline_1m'] = cloud_bline(res_df, 26).shift(1)\n","  \n","    #       stochastic      #\n","  # res_df['stoch'] = stoch(res_df, 5, 3, 3)\n","\n","    #       fisher      #\n","  # res_df['fisher30'] = fisher(res_df, 30)\n","  # res_df['fisher60'] = fisher(res_df, 60)\n","  # res_df['fisher120'] = fisher(res_df, 120)\n","\n","    #       cctbbo      #\n","  # res_df['cctbbo'], _ = cct_bbo(res_df, 21, 13)\n","\n","    #       ema_roc      #\n","  # res_df['ema_roc'] = ema_roc(res_df['close'], 13, 9)\n","\n","\n","   # ------------------------------ htf data ------------------------------ #    \n","\n","  #             Todo              #\n","  # htf_df = pd.read_excel(date_path2 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # htf_df = pd.read_excel(date_path3 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # htf_df = pd.read_excel(date_path4 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # htf_df = pd.read_excel(date_path5 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # # # # htf_df = pd.read_excel(date_path6 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","\n","  # # ---- htf index slicing ---- #\n","  # htf_df = htf_df.loc[:res_df.index[-1]]\n","  \n","  # print(\"res_df.index[-1] :\", res_df.index[-1])\n","  # print(\"htf_df.index[-1] :\", htf_df.index[-1])\n","\n","  # res_df = dc_line(res_df, htf_df, '5m')\n","  # res_df = dc_level(res_df, '5m', 1)\n","\n","\n","  # # # if \"sma4\" in res_df.columns:\n","  # # #   res_df.drop(\"sma4\", axis=1, inplace=1)\n","\n","  # # htf_df['sma'] = htf_df['close'].rolling(60).mean()\n","  # # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, htf_df, [-1]), columns=['sma_30m']))\n","  \n","  # htf_df['stoch'] = stoch(htf_df, 13, 3, 3)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, htf_df, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","   \n","  # fifth_df['ema'] = ema(fifth_df['close'], 5)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, fifth_df, [-1]), columns=['ema5']))\n","\n","        # ------------------------------------ short ------------------------------------ # \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 0:\n","        #   mr_score += 1          \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_upper_1m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_upper_3m'].iloc[i] <= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_upper_5m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == 'MARKET':\n","        #   mr_const_cnt += 1\n","        #   if (res_df['close'].iloc[i] - res_df['short_tp'].iloc[i]) / (res_df['short_out'].iloc[i] - res_df['close'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error):  \n","        #     mr_score += 1\n","\n","           \n","        # ------- entry once ------- #   \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == 1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == -1:\n","        #     prev_entry_cnt += 1          \n","        # # # print(\"prev_entry_cnt :\", prev_entry_cnt)\n","\n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] < res_df['bb_lower_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_lower2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_base_1h'].iloc[i]:\n","\n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] < res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","  \n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['low'].iloc[i] > res_df['short_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1\n","\n","\n","\n","        # ------------------------------------ long ------------------------------------ # \n","          \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 1:\n","        #   mr_score += 1   \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 1:\n","        #   mr_score += 1     \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 1:\n","          # mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_lower_1m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_lower_3m'].iloc[i] >= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_lower_5m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == \"MARKET\":\n","          # mr_const_cnt += 1        \n","          # if (res_df['long_tp'].iloc[i] - res_df['close'].iloc[i]) / (res_df['close'].iloc[i] - res_df['long_out'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error): # 일반적으로 dr 상에서 tp 비율이 더 커짐 (tr 보다)\n","          #   mr_score += 1\n","\n","        # -------------- ep limit -------------- #    \n","        # mr_const_cnt += 1\n","        # # if (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # if config.ep_set.min_eplim_pct < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # # if 0 < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        #   # if res_df['st_gap_15m'].iloc[i] / res_df['open'].iloc[i] < 0:\n","        #   #   print(\"i, res_df['st_gap_15m'].iloc[i] :\", i, res_df['st_gap_15m'].iloc[i])\n","        #   mr_score += 1\n","\n","\n","        # -------------- entry once -------------- #    \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == -1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == 1:\n","        #     prev_entry_cnt += 1\n","          \n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","          \n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] > res_df['bb_upper_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_upper2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_base_1h'].iloc[i]:\n","        \n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] > res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","\n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['high'].iloc[i] < res_df['long_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","          \n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1"]},{"cell_type":"markdown","metadata":{"id":"_blyFhQJUd5X"},"source":["#### dump"]},{"cell_type":"code","source":["plot_is=1\n","open_idx = open_info_df.index.to_numpy()\n","len_df = len(res_df)\n","s_idx = (open_idx < int(len_df * (1 - test_ratio))) == plot_is\n","s_open_info_df = open_info_df[s_idx]\n","s_open_idx = open_idx[s_idx]\n","\n","open_info_list = [s_open_info_df[col_].to_numpy() for col_ in s_open_info_df.columns]\n","side_arr, zone_arr, id_arr, id_idx_arr = open_info_list\n","\n","# ------------ get paired_res ------------ #\n","start_0 = time.time()\n","paired_res = en_ex_pairing_v4(res_df, s_open_idx, open_info_list, ohlc_list, config_list, np_timeidx, funcs)\n","# valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr = paired_res\n","print(\"en_ex_pairing elapsed time :\", time.time() - start_0)  #  0.37 --> 0.3660471439361572 --> 0.21(lesser if)\n","\n","# ------------ idep_plot ------------ #\n","start_0 = time.time()\n","high, low = ohlc_list[1:3]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Q-Xt9w51BOPC","executionInfo":{"status":"ok","timestamp":1650030352162,"user_tz":-540,"elapsed":1285,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"a3bd1b45-d58d-4184-c501-66fc824aaa99"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 1.1988611221313477\n"]}]},{"cell_type":"code","source":["sample_ratio=0.7\n","title_position=(0.5, 0.5)\n","fontsize=15\n","signi=False\n","\n","if sample_ratio is not None:\n","      sample_len = int(len_df * sample_ratio)\n","else:\n","  sample_len = len_df\n","\n","# ------ short & long data preparation ------ #\n","# start_0 = time.time()\n","point1_arr, valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr, _, tr_arr = paired_res    \n","assert len(valid_openi_arr) != 0, \"assert len(valid_openi_arr) != 0\"    \n","short_valid_openi_idx = np.where(side_arr[valid_openi_arr] == OrderSide.SELL)[0]  # valid_openi_arr 에 대한 idx, # side_arr,\n","long_valid_openi_idx = np.where(side_arr[valid_openi_arr] == OrderSide.BUY)[0]\n","\n","valid_open_idx = open_idx[valid_openi_arr].reshape(-1, 1)\n","\n","short_obj = np.hstack((pair_price_arr, pair_idx_arr, valid_open_idx))[short_valid_openi_idx]\n","long_obj = np.hstack((pair_price_arr, pair_idx_arr, valid_open_idx))[long_valid_openi_idx]\n","both_obj = np.vstack((short_obj, long_obj))\n","print(\"short_obj.shape :\", short_obj.shape)\n","print(\"long_obj.shape :\", long_obj.shape)\n","\n","short_obj, long_obj, both_obj = [np.split(obj_, 5, axis=1) for obj_ in [short_obj, long_obj, both_obj]]\n","\n","short_point1_arr, long_point1_arr = [point1_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","short_lvrg_arr, long_lvrg_arr = [lvrg_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","short_fee_arr, long_fee_arr = [fee_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","short_tpout_arr, long_tpout_arr = [tpout_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","# short_bias_arr, long_bias_arr = [bias_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","short_tr_arr, long_tr_arr = [tr_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","# print(\"long_bias_arr.shape :\", long_bias_arr.shape)    \n","# print(\"elapsed time :\", time.time() - start_0)\n","\n","short_true_bias_idx, short_false_bias_idx, long_true_bias_idx, long_false_bias_idx = get_wave_bias(res_df, config, high, low, len_df, short_obj, long_obj)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ErhWGoABA5L2","executionInfo":{"status":"ok","timestamp":1650030354180,"user_tz":-540,"elapsed":380,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"240dac0e-9466-4c61-d1bf-55580d7de35e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["short_obj.shape : (425, 5)\n","long_obj.shape : (374, 5)\n"]}]},{"cell_type":"code","source":["short_en_idx = short_obj[2].astype(int)\n","short_en_tp1 = ffill_line(res_df['short_tp_1_{}'.format(config.strat_version)].to_numpy(), short_en_idx)\n","short_en_out0 = ffill_line(res_df['short_epout_0_{}'.format(config.strat_version)].to_numpy(), short_en_idx)\n","\n","long_en_idx = long_obj[2].astype(int)\n","long_en_tp1 = ffill_line(res_df['long_tp_1_{}'.format(config.strat_version)].to_numpy(), long_en_idx)\n","long_en_out0 = ffill_line(res_df['long_epout_0_{}'.format(config.strat_version)].to_numpy(), long_en_idx)\n","\n","bias_info_tick = config.tr_set.bias_info_tick\n","\n","# 1. min 에 초점을 맞추는 거니까, touch 없을시 len_df 로 설정\n","# 2. future_data 사용이니까, shift(-bias_info_tick) 설정\n","# 3. entry 다음 idx 부터 -> tp & out 체결 logic 이 현재 entry_idx 부터 되어있어서 취소\n","last_idx = len_df - 1\n","short_en_tp1_touch_idx = pd.Series(np.where(low <= short_en_tp1, np.arange(len_df), last_idx)).rolling(bias_info_tick, min_periods=1).min().shift(-bias_info_tick).to_numpy()[short_en_idx]  \n","short_en_out0_touch_idx = pd.Series(np.where(high >= short_en_out0, np.arange(len_df), last_idx)).rolling(bias_info_tick, min_periods=1).min().shift(-bias_info_tick).to_numpy()[short_en_idx]\n","\n","long_en_tp1_touch_idx = pd.Series(np.where(high >= long_en_tp1, np.arange(len_df), last_idx)).rolling(bias_info_tick, min_periods=1).min().shift(-bias_info_tick).to_numpy()[long_en_idx]\n","long_en_out0_touch_idx = pd.Series(np.where(low <= long_en_out0, np.arange(len_df), last_idx)).rolling(bias_info_tick, min_periods=1).min().shift(-bias_info_tick).to_numpy()[long_en_idx]\n","\n","short_true_bias_idx = short_en_tp1_touch_idx < short_en_out0_touch_idx  # true_bias 의 조건\n","long_true_bias_idx = long_en_tp1_touch_idx < long_en_out0_touch_idx\n","\n","short_false_bias_idx = short_en_tp1_touch_idx > short_en_out0_touch_idx  # false_bias 의 조건\n","long_false_bias_idx = long_en_tp1_touch_idx > long_en_out0_touch_idx"],"metadata":{"id":"uelGdX2-ISZb"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["long_en_tp1_touch_idx"],"metadata":{"id":"w1g0VQvUfK69"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(long_en_tp1[long_en_tp1_touch_idx.astype(int)].ravel())\n","print(high[long_en_tp1_touch_idx.astype(int)].ravel()))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"f0hPU71agPGs","executionInfo":{"status":"ok","timestamp":1650031209368,"user_tz":-540,"elapsed":3,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"e37f1fae-6108-4777-9979-5f17775aca60"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[3138.55  355.84 3138.55  341.35  350.44  338.46  358.86 3138.55  363.65 3138.55  382.85 3138.55 3138.55  342.02 3138.55  328.9  3138.55  344.79 3138.55  355.27  354.4  3138.55  353.77 3138.55  347.58 3138.55  352.19  354.42 3138.55 3138.55  338.88  339.4   367.89  375.5   375.5   373.35  375.9   375.14  375.48 3138.55  380.59  382.89  379.92 3138.55  369.7   369.24  381.2   420.    417.28  412.1   408.29  380.55  382.4  3138.55  383.96 3138.55  383.72  406.76  411.49  411.86  432.93 3138.55 3138.55  447.69 3138.55  465.24  454.7   466.5   510.4   535.2   535.2  3138.55  509.2   588.18 3138.55  598.25 3138.55  591.86 3138.55  568.32 3138.55  668.85  649.    661.3  3138.55 3138.55  614.28 3138.55  616.44  622.28  627.99  731.56  775.22 1031.7  3138.55 3138.55 1178.4  3138.55 1326.32 1060.37 3138.55 3138.55 3138.55 1342.85 3138.55 1240.67 3138.55 3138.55 1353.01 1537.91 1647.83 1724.82 1753.25 3138.55 1750.19 1867.96 1813.91 3138.55 3138.55 3138.55 3138.55 1699.51 1494.44 1367.36 3138.55 3138.55 3138.55 3138.55 1844.   3138.55 1807.   1765.04 3138.55 1881.5  3138.55 3138.55 3138.55 1583.38 1937.46 2001.46 2114.   2023.5  2081.23 2129.9  2129.83 2080.83 2476.97 2148.2  3138.55 3138.55 3138.55 3138.55 2222.03 3138.55 2329.38 2263.   2534.76 2650.94 3138.55 2778.02 2775.85 3138.55 3138.55 3471.94 3138.55 3964.08 4320.   3767.6  3138.55 2373.99 3138.55 3138.55 3138.55 3138.55 2850.   2636.88 3138.55 3138.55 2521.4  3138.55 2482.5  3138.55 2414.33 2368.29 2508.85 2571.   3138.55 3138.55 2351.52 2243.45 3138.55 1840.52 1793.36 3138.55 1981.23 3138.55 3138.55 2154.34 3138.55 3138.55 3138.55 2292.99 2249.   2393.86 3138.55 2122.24 3138.55 1906.44 2000.92 3138.55 3138.55 1895.   1915.   1826.21 1828.3  3138.55 2006.57 3138.55 2349.85 2301.25 2355.56 2470.36 2609.14 2496.57 3124.85 3130.8  3273.65 3248.22 3277.91 3138.55 3018.88 3228.28 3138.55 3253.5  3265.17 3138.55 3121.   3138.55 3251.64 3760.4  3768.5  3138.55 3926.18 3138.55 3138.55 3138.55 3243.44 3387.91 3435.57\n"," 3138.55 3584.55 3138.55 3138.55 3138.55 3138.55 3138.55 2940.   3138.55 3138.55 3360.9  3399.06 3138.55 3559.   3138.55 3138.55 3138.55 3138.55 3504.24 3138.55 3653.89 3838.53 3824.   4140.   3138.55 3138.55 3138.55 4204.69 3138.55 4385.29 3138.55 4328.29 4342.8  4368.   4619.95 3138.55 4547.73 4546.49 3138.55 3138.55 4620.   4821.47 4766.   4764.62 4664.7  4713.04 4307.   4309.63 3138.55 3138.55 4193.46 4156.24 3138.55 4097.31 4379.   4678.43 4736.66 3138.55 3138.55 3966.   4218.99 3138.55 4192.11 3138.55 4050.2  3138.55 3892.61 3840.54 4092.5  3138.55 3138.55 3908.04 3936.79 3819.01 3848.34 3138.55 3138.55 4108.36 3138.55 3138.55 3138.55 3679.86 3702.95 3757.2  3138.55 3740.66 3138.55 3138.55 3744.99 3764.   3757.79 3821.99 3747.15 3138.55 3138.55 3226.   3138.55 3138.55 3132.58 3134.2  3260.79 3277.   3268.99 3344.65 3138.55 3132.81 3092.32 3138.55 2470.08 3138.55 2692.   3138.55 2635.   3028.   3138.55 3017.62 3015.03 3000.75 3138.55 3086.7  3105.96 3138.55 3110.   3121.88 3138.55]\n","374\n"]}]},{"cell_type":"code","source":["print(long_en_tp1_touch_idx[long_true_bias_idx])\n","print(long_en_out0_touch_idx[long_true_bias_idx])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hyXEy7KAedJ2","executionInfo":{"status":"ok","timestamp":1650030425924,"user_tz":-540,"elapsed":364,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"12218782-36bf-464c-f541-bcedca0ff729"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[  3248.   4344.   5341.   6735.   7834.  13347.  25711.  28495.  32237.  33547.  39660.  44409.  45439.  46948.  48805.  51043.  52120.  53359.  54034.  57112.  58538.  60445.  62858.  67542.  71722.  80491.  80767.  86740.  87741.  88510.  89202.  89234.  90141. 105033. 106104. 111037. 113720. 121267. 135864. 139356. 149820. 152586. 155911. 160863. 161642. 162671. 171804. 173306. 175672. 199217. 203117. 212870. 226575. 227026. 230021. 232483. 233282. 248963. 270925. 272996. 275479. 290295. 300154. 302132. 303737. 304638. 305793. 308003. 312179. 321092. 332342. 333530. 334276. 338807. 341295. 342957. 351072. 355171. 361986. 374071. 392165. 394820. 400131. 402941. 405780. 407033. 408021. 412866. 414544. 424202. 424980. 427095. 434430. 437469. 440475. 451161. 455125. 458299. 458442. 462265. 468069. 471761. 474015. 474938. 479950. 485783. 489154. 491021. 493865. 495411. 502142. 503869. 506076. 506701. 515582. 522458. 522527. 525678. 541272. 568971. 584740. 590825. 594590. 600643. 604810. 606480. 609673. 610227. 611668. 614534. 617830. 620083. 623613. 635582. 636202. 640519. 646478. 649546. 651589. 656581. 657916. 658876. 672091. 672723. 673970. 676228. 678667. 679819. 685661. 693579. 693875. 694317. 694843. 697049. 697494. 698408. 699552. 700742. 706565. 712600. 714943. 721810. 722645. 747355. 748460. 748687. 749288. 750137. 752699. 755756. 755934. 761833.]\n","[763830. 763830.   5371. 763830. 763830. 763830.  25738. 763830. 763830. 763830.  39721. 763830.  45562. 763830. 763830. 763830.  52203. 763830. 763830.  57309.  58660.  60458. 763830. 763830. 763830. 763830. 763830.  86826.  87809. 763830. 763830. 763830. 763830. 763830. 763830. 111095. 763830. 763830. 763830. 139363. 763830. 152608. 156017. 763830. 763830. 763830. 171904. 763830. 763830. 763830. 763830. 212940. 763830. 763830. 763830. 763830. 233456. 249015. 763830. 763830. 763830. 763830. 300351. 763830. 303840. 763830. 305881. 308089. 763830. 321269. 763830. 333598. 763830. 763830. 341392. 763830. 763830. 763830. 763830. 763830. 392245. 394855. 400313. 763830. 763830. 407115. 763830. 412940. 763830. 763830. 763830. 763830. 763830. 763830. 440618. 451267. 763830. 763830. 458525. 763830. 468301. 763830. 763830. 763830. 763830. 763830. 763830. 763830. 493893. 763830. 763830. 763830. 506190. 506707. 763830. 763830. 763830. 525726. 763830. 763830. 763830. 763830. 594650. 763830. 763830. 763830. 609694. 763830. 763830. 614559. 763830. 620213. 763830. 763830. 763830. 763830. 763830. 763830. 763830. 763830. 658023. 658979. 763830. 763830. 763830. 763830. 678782. 763830. 685747. 763830. 763830. 694428. 763830. 763830. 763830. 763830. 763830. 763830. 763830. 763830. 763830. 763830. 763830. 747472. 763830. 748782. 763830. 763830. 752722. 763830. 756095. 761897.]\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FlNGKvW_w2za"},"outputs":[],"source":["config_name = \"config_v5_2.1220_candlejson\"\n","# config_name = \"config_v3.json\"\n","cfg_full_path = os.path.join(current_path, \"config\", config_name)\n","\n","\n","with open(cfg_full_path, 'w') as cfg:\n","    json.dump(config1, cfg, indent=2)\n","    print(\"{} dumped !\".format(cfg_full_path))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xs6TlV7wu6uo"},"outputs":[],"source":["def en_ex_pairing_v4(res_df, open_idx, open_info_list, ohlc_list, point2_list, market_data_list, config_list, np_timeidx, funcs):  # 이미 충분히 줄여놓은 idx 임\n","    side_arr, zone_arr, id_arr, id_idx_arr = open_info_list\n","    id_idx_arr = id_idx_arr.astype(int)\n","\n","    ep_out, ep_loc_point2, lvrg_set = funcs\n","\n","    point1_list, valid_openi_list, pair_idx_list, pair_price_list, lvrg_list, fee_list, tpout_list, bias_list, tr_list = [[] for li in range(9)]\n","    len_df = len(res_df)\n","    len_open_idx = len(open_idx)\n","    i, open_i = 0, -1  # i for total_res_df indexing\n","\n","    while 1:\n","        # ------------ entry phase ------------ #\n","        open_i += 1  # 확인 끝났으면 조기 이탈(+1), 다음 open_idx 조사 진행\n","        if open_i >= len_open_idx:\n","          break\n","          \n","        # ------ ep_loc ------ #\n","        op_idx = open_idx[open_i]  # open_i 는 i 와 별개로 운영\n","        \n","        if str(res_df.index[op_idx]) == '2022-02-14 14:07:59.999000':\n","          print('2022-02-14 14:07:59.999000 passed')\n","          print(op_idx, i, open_i)\n","\n","        if op_idx < i:  # i = 이전 거래 끝난후의 res_df index - \"거래 종료후 거래 시작\", '<' : 거래 종료시점 진입 가능하다는 의미\n","            continue\n","\n","        if str(res_df.index[op_idx]) == '2022-02-14 14:07:59.999000':\n","          print('2022-02-14 14:07:59.999000 passed')\n","\n","        # ------ dynamic data by ID ------ #\n","        #     1. 해당 id 로 config 재할당해야함\n","        id_idx = id_idx_arr[open_i]\n","        config = config_list[id_idx]\n","        strat_version = config.strat_version\n","        open_side = side_arr[open_i]\n","\n","        side_pos = 'short' if open_side == OrderSide.SELL else 'long'\n","        tp_arr = res_df['{}_tp_{}'.format(side_pos, strat_version)].to_numpy()  # => eptpout arr_list 만들어서 꺼내 사용하면 될 것\n","        point_idxgap_arr = res_df['{}_point_idxgap_{}'.format(side_pos, strat_version)].to_numpy()\n","        \n","        ep_arr = res_df['{}_ep_{}'.format(side_pos, strat_version)].to_numpy()  # Todo - while loop 내에서 to_numpy() 반복하느니, pd_indexing 이 낫지 않을까\n","        out_arr = res_df['{}_out_{}'.format(side_pos, strat_version)].to_numpy()\n","        bias_info_arr = res_df['{}_bias_info_{}'.format(side_pos, strat_version)].to_numpy()  # ex. rolling(entry ~ end)'s high\n","        bias_thresh_arr = res_df['{}_bias_thresh_{}'.format(side_pos, strat_version)].to_numpy()  # ex. close + dc_T20 * 0.5\n","        tr_arr = res_df['{}_tr_{}'.format(side_pos, strat_version)].to_numpy()\n","\n","        # ------ ei_k & point2 ------ #\n","        i = op_idx + 1  # open_signal 이 close_bar.shift(1) 이라고 가정하고 다음 bar 부터 체결확인한다는 의미\n","        if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","            break\n","        \n","        # ------ point1 & 2's tp_j ------ #\n","        point_idxgap = point_idxgap_arr[op_idx]\n","        if np.isnan(point_idxgap):\n","          continue\n","        else:\n","          tp_j = int(op_idx - point_idxgap)\n","\n","          # ------ allow point2 only next to point1 ------ #\n","          # open_arr = res_df['{}_open_{}'.format(side_pos, strat_version)].to_numpy()\n","          # if np.sum(open_arr[tp_j:op_idx]) != 0:\n","          #   continue\n","          \n","        exec_j, ep_j, tp_j, out_j, entry_done, en_p, fee = check_eik_point2_exec_v2(res_df, config, op_idx, tp_j, len_df, open_side, [*ohlc_list, ep_arr], point2_list, ep_out, ep_loc_point2)\n","        i = exec_j\n","        \n","        if not entry_done:\n","            continue\n","\n","        # ------ leverage ------ #\n","        out = out_arr[out_j]  # lvrg_set use out on out_j\n","        leverage = lvrg_set(res_df, config, open_side, en_p, out, fee)  # res_df 변수 사용됨 - 주석 처리 된 상태일뿐\n","        if leverage is None:\n","            continue\n","\n","        exit_done, cross_on = 0, 0\n","        # ------ check tpout_onexec ------ #\n","        # if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","        if config.ep_set.entry_type == \"LIMIT\":\n","            if config.tp_set.tp_onexec:  # dynamic 은 tp_onexec 사용하는 의미가 없음\n","                tp_j = exec_j\n","            if config.out_set.out_onexec:  # dynamic 은 out_onexec 사용하는 의미가 없음\n","                out_j = exec_j\n","\n","\n","        while 1:\n","            # ------------ exit phase ------------ #\n","            if not config.tp_set.static_tp:  # 앞으로 왠만하면 static 만 사용할 예정\n","                tp_j = i\n","            if not config.out_set.static_out:\n","                out_j = i\n","\n","            # ------------ tp ------------ #\n","            if not config.tp_set.non_tp and i != exec_j:\n","                exit_done, ex_p, fee = check_limit_tp_exec(res_df, config, open_i, i, tp_j, len_df, fee, open_side, exit_done, [*ohlc_list, [tp_arr]])  # 여기서는 j -> i 로 변경해야함\n","                # if config.tp_set.tp_type in ['LIMIT']:  # 'BOTH' -> 앞으로는, LIMIT 밖에 없을거라 주석처리함\n","                # if not exit_done and config.tp_set.tp_type in ['MARKET', 'BOTH']:\n","\n","            # ------------ out ------------ #\n","            # ------ signal_out ------ #\n","            if not exit_done:\n","              exit_done, cross_on, ex_p, fee = check_market_out_exec(config, open_i, i, len_df, fee, open_side, cross_on, exit_done, [np_timeidx, *market_data_list])\n","            # ------ hl_out ------ #\n","            if config.out_set.hl_out != \"None\":\n","              if not exit_done:  # and i != len_df - 1:                \n","                  exit_done, ex_p, fee = check_out(config, open_i, i, out_j, len_df, fee, open_side, exit_done, [*ohlc_list, out_arr])\n","\n","            if exit_done:  # 이 phase 는 exit_phase 뒤에도 있어야할 것 - entry_done var. 사용은 안하겠지만\n","                # ------ append dynamic vars. ------ #\n","                point1_list.append(tp_j)\n","                valid_openi_list.append(open_i)  # side, zone, start_ver arr 모두 openi_list 로 접근하기 위해 open_i 를 담음\n","                pair_idx_list.append([exec_j, i])  # entry & exit (체결 기준임)\n","                pair_price_list.append([en_p, ex_p])\n","                lvrg_list.append(leverage)\n","                fee_list.append(fee)\n","                tpout_list.append([tp_arr[tp_j], out_arr[out_j]])  # for tpout_line plot_check\n","                # bias_list.append([bias_info_arr[exec_j], bias_thresh_arr[exec_j]])  # backtest 에서만 가능한 future_data 사용\n","                bias_list.append([bias_info_arr[exec_j], tp_arr[tp_j]])  # bias_info 는 entry_idx 부터 & tp = bias_thresh \n","                tr_list.append(tr_arr[op_idx])\n","\n","                # open_i += 1  # 다음 open_idx 조사 진행\n","                break\n","\n","            # 1. 아래있으면, 체결 기준부터 tp, out 허용\n","            # 2. 위에있으면, entry 다음 tick 부터 exit 허용\n","            i += 1\n","            if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","                break\n","\n","        # if str(res_df.index[i]) == '2022-02-14 10:37:59.999000':\n","        #   print(i)\n","        if side_pos == 'long':\n","          print(str(res_df.index[op_idx]))\n","          print(str(res_df.index[i]))\n","          print()\n","                \n","        if i >= len_df: # or open_i >= len_open_idx:  # res_df 의 last_index 까지 돌아야함\n","            break\n","        else:\n","            continue\n","\n","    return np.array(point1_list), np.array(valid_openi_list), np.array(pair_idx_list), np.array(pair_price_list), np.array(lvrg_list), np.array(fee_list), np.array(tpout_list), np.array(bias_list), np.array(tr_list)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"iAVss_DwcliC"},"outputs":[],"source":["def get_res_v3(res_df, open_info_df, ohlc_list, point2_list, market_data_list, config_list, np_timeidx, funcs, test_ratio=0.3, plot_is=True, signi=False):\n","  # ------------ make open_info_list ------------ #\n","  open_idx = open_info_df.index.to_numpy()\n","  len_df = len(res_df)\n","  s_idx = (open_idx < int(len_df * (1 - test_ratio))) == plot_is\n","  s_open_info_df = open_info_df[s_idx]\n","  s_open_idx = open_idx[s_idx]\n","\n","  open_info_list = [s_open_info_df[col_].to_numpy() for col_ in s_open_info_df.columns]\n","  side_arr, zone_arr, id_arr, id_idx_arr = open_info_list\n","\n","  # ------------ get paired_res ------------ #\n","  start_0 = time.time()\n","  paired_res = en_ex_pairing_v3(res_df, s_open_idx, open_info_list, ohlc_list, point2_list, market_data_list, config_list, np_timeidx, funcs)\n","  # valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr = paired_res\n","  print(\"en_ex_pairing elapsed time :\", time.time() - start_0)  #  0.37 --> 0.3660471439361572 --> 0.21(lesser if)\n","\n","  return paired_res"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"183hY18cpUBu"},"outputs":[],"source":["def get_max_outg_v3(open_side, config, ohlc_list, obj, tpout_arr, epout_0, out_gap):\n","\n","    h, l = ohlc_list[1:3]\n","\n","    np_obj = np.array(obj).T[0]\n","    assert len(np_obj.shape) == 2\n","\n","    # iin == iout 인 경우 분리\n","    # en_idx = np_obj[:, 2]\n","    # ex_idx = np_obj[:, 3]\n","    # equal_idx = en_idx == ex_idx\n","\n","    \n","    _, _, en_idxs, ex_idxs, open_idxs = obj\n","\n","    if open_side == \"SELL\":\n","      idxgs = [np.argwhere(l[int(en_idx):int(en_idx + config.tr_set.bias_info_tick)] <= tpout_arr[i, 0]) for i, en_idx in enumerate(en_idxs)]\n","    else:\n","      idxgs = [np.argwhere(h[int(en_idx):int(en_idx + config.tr_set.bias_info_tick)] >= tpout_arr[i, 0]) for i, en_idx in enumerate(en_idxs)]\n","\n","    min_idxg = np.array([gaps.min() if len(gaps) != 0 else np.nan for gaps in idxgs])  # get 최소 idx_gap from en_idx\n","    nan_idx = np.isnan(min_idxg) # .astype(int) -> false swing_bias idx\n","    # min_idxg[nan_idx] = 0  # fill na 0, for idex summation below\n","\n","    if open_side == \"SELL\":      \n","      # max_high = np.array([np.max(h[int(en_idx):int(en_idx + idx_gap + 1)]) for en_idx, idx_gap in zip(en_idxs, min_idxg)]).reshape(-1, 1)  # reshape is important in np boradcasting\n","      # max_high = np.array([np.max(h[int(en_idx):int(en_idx + idx_gap + 1)]) if not np.isnan(idx_gap) else np.max(h[int(en_idx):int(ex_idx + 1)])\n","      max_high = np.array([np.max(h[int(en_idx):int(en_idx + idx_gap + 1)]) if not np.isnan(idx_gap) else np.max(h[int(en_idx):int(en_idx + config.tr_set.bias_info_tick)])\n","                          for en_idx, ex_idx, idx_gap in zip(en_idxs, ex_idxs, min_idxg)]).reshape(-1, 1)  # reshape is important in np boradcasting   # outg 라서, iin + 1 이 아님\n","      max_outg = (max_high - epout_0) / out_gap\n","    else:\n","      # min_low = np.array([np.min(l[int(en_idx):int(en_idx + idx_gap + 1)]) for en_idx, idx_gap in zip(en_idxs, min_idxg)]).reshape(-1, 1)\n","      # min_low = np.array([np.min(l[int(en_idx):int(en_idx + idx_gap + 1)]) if not np.isnan(idx_gap) else np.min(l[int(en_idx):int(ex_idx + 1)])\n","      min_low = np.array([np.min(l[int(en_idx):int(en_idx + idx_gap + 1)]) if not np.isnan(idx_gap) else np.min(l[int(en_idx):int(en_idx + config.tr_set.bias_info_tick)])\n","                          for en_idx, ex_idx, idx_gap in zip(en_idxs, ex_idxs, min_idxg)]).reshape(-1, 1)  # outg 라서, iin + 1 이 아님\n","      max_outg = (epout_0 - min_low) / out_gap # out_idx 포함\n","\n","    return max_outg, open_idxs.astype(int), ~nan_idx.astype(bool).reshape(-1, 1)  # true_bias 의 outg data 만 사용\n","\n","\n","def get_max_outg_v2(open_side, config, ohlc_list, obj, tpout_arr, epout_0, out_gap):\n","\n","    h, l = ohlc_list[1:3]\n","    _, _, en_idxs, _, open_idxs = obj\n","\n","    if open_side == \"SELL\":\n","      idxgs = [np.argwhere(l[int(en_idx):int(en_idx + config.tr_set.bias_info_tick)] <= tpout_arr[i, 0]) for i, en_idx in enumerate(en_idxs)]\n","    else:\n","      idxgs = [np.argwhere(h[int(en_idx):int(en_idx + config.tr_set.bias_info_tick)] >= tpout_arr[i, 0]) for i, en_idx in enumerate(en_idxs)]\n","\n","    min_idxg = np.array([gaps.min() if len(gaps) != 0 else np.nan for gaps in idxgs])  # get 최소 idx_gap from en_idx\n","    nan_idx = np.isnan(min_idxg) # .astype(int)\n","    min_idxg[nan_idx] = 0  # fill na 0, for idex summation below\n","\n","    if open_side == \"SELL\":      \n","      max_high = np.array([np.max(h[int(en_idx):int(en_idx + idx_gap + 1)]) for en_idx, idx_gap in zip(en_idxs, min_idxg)]).reshape(-1, 1)  # reshape is important in np boradcasting\n","      max_outg = (max_high - epout_0) / out_gap\n","    else:\n","      max_low = np.array([np.min(l[int(en_idx):int(en_idx + idx_gap + 1)]) for en_idx, idx_gap in zip(en_idxs, min_idxg)]).reshape(-1, 1)\n","      max_outg = (epout_0 - max_low) / out_gap # out_idx 포함\n","\n","    return max_outg[~nan_idx], open_idxs[~nan_idx].astype(int)  # true_bias 의 outg data 만 사용\n","\n","def get_max_tpg_v2(open_side, ohlc_list, pr_, obj, tp_1, tp_gap):  # much faster\n","\n","    h, l = ohlc_list[1:3]\n","\n","    # en_p = obj[0]\n","    # ex_p = obj[1]\n","\n","    np_obj = np.array(obj).T[0]\n","    assert len(np_obj.shape) == 2\n","\n","    # iin == iout 인 경우 분리\n","    en_idx = np_obj[:, 2]\n","    ex_idx = np_obj[:, 3]\n","    equal_idx = en_idx == ex_idx\n","\n","    if open_side == \"SELL\":\n","        min_low = np.full_like(tp_1, np.nan)\n","        # min_low[~equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)  # start from iin + 1\n","        min_low[~equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)  # start from iin + 1\n","        max_tpg = (tp_1 - min_low) / tp_gap\n","    else:\n","        max_high = np.full_like(tp_1, np.nan)\n","        # max_high[~equal_idx] = np.array([np.max(h[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        max_high[~equal_idx] = np.array([np.max(h[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        max_tpg = (max_high - tp_1) / tp_gap\n","\n","    return max_tpg[pr_ < 1]  # out 된 case 만 tpg 담음\n","    # return max_tpg"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"eCFQfLGBrwj2"},"outputs":[],"source":["titles = public_cols +devided_cols\n","max_plot_outg = 10\n","\n","for title, short_data, long_data in zip(titles, short_datas, long_datas):\n","\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(12, 5))\n","  nrows, ncols = 1, 2\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                          ncols=ncols\n","                          )\n","    \n","  print(len(long_max_outg))\n","\n","  short_plot_idx = short_max_outg <= max_plot_outg\n","  long_plot_idx = long_max_outg <= max_plot_outg  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_open_data = short_data[short_outg_open_idx]\n","  long_open_data = long_data[long_outg_open_idx]\n","  \n","  short_plot_idx *= short_open_data <= 10\n","  long_plot_idx *= long_open_data <= 10 # nan 과 inf 때문에 이 방식 채택\n","\n","  short_plot_idx *= ~np.isnan(short_open_data)\n","  long_plot_idx *= ~np.isnan(long_open_data)  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_plot_idx *= ~np.isinf(short_open_data)\n","  long_plot_idx *= ~np.isinf(long_open_data)  # nan 과 inf 때문에 이 방식 채택\n","  \n","  print(np.sum(long_plot_idx))\n","\n","  plt.subplot(gs[0])\n","  x, y = short_max_outg[short_plot_idx].ravel(), short_open_data[short_plot_idx].ravel()\n","  # plt.bar(x, y, width=0.05)\n","  plt.scatter(x, y)\n","  plt.axvline(0.5, color='red', linewidth=3)\n","  plt.title(\"coef : {:0.3f}\".format(np.corrcoef(-x, y)[0, 1]))\n","  plt.xlim(0, max_plot_outg)\n","\n","  plt.subplot(gs[1])\n","  x, y = long_max_outg[long_plot_idx].ravel(), long_open_data[long_plot_idx].ravel()\n","  # plt.bar(x, y, width=0.05)\n","  plt.scatter(x, y)\n","  plt.axvline(0.5, color='red', linewidth=3)\n","  plt.title(\"coef : {:0.3f}\".format(np.corrcoef(-x, y)[0, 1]))\n","  plt.xlim(0, max_plot_outg)\n","\n","  plt.suptitle(title)\n","  plt.show()\n","\n","  print()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nYDgg3XEt116"},"outputs":[],"source":["short_max_outg, short_outg_open_idx = get_max_outg_v2(\"SELL\", config, ohlc_list, short_obj, short_tpout_arr, short_open_epout_0, short_open_epout_gap)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"19_q_5awv_Uu"},"outputs":[],"source":["strat_version = config.strat_version\n","len_df = len(res_df)\n","short_open_res = np.ones(len_df)\n","long_open_res = np.ones(len_df)\n","\n","short_tp_1_col, short_tp_0_col, short_tp_gap_col = 'short_tp_1_{}'.format(strat_version), 'short_tp_0_{}'.format(strat_version), 'short_tp_gap_{}'.format(strat_version) \n","long_tp_1_col, long_tp_0_col, long_tp_gap_col = 'long_tp_1_{}'.format(strat_version), 'long_tp_0_{}'.format(strat_version), 'long_tp_gap_{}'.format(strat_version) \n","short_epout_1_col, short_epout_0_col, short_epout_gap_col = 'short_epout_1_{}'.format(strat_version), 'short_epout_0_{}'.format(strat_version), 'short_epout_gap_{}'.format(strat_version) \n","long_epout_1_col, long_epout_0_col, long_epout_gap_col = 'long_epout_1_{}'.format(strat_version), 'long_epout_0_{}'.format(strat_version), 'long_epout_gap_{}'.format(strat_version) \n","\n","data_cols = ['open', 'high', 'low']   # Todo - public_indi 이전에 해야할지도 모름 # 'close', 'haopen', 'hahigh', 'halow', 'haclose'\n","tp_cols = [short_tp_1_col, short_tp_0_col, short_tp_gap_col, long_tp_1_col, long_tp_0_col, long_tp_gap_col]   # Todo - public_indi 이전에 해야할지도 모름\n","epout_cols = [short_epout_1_col, short_epout_0_col, short_epout_gap_col, long_epout_1_col, long_epout_0_col, long_epout_gap_col]   # Todo - public_indi 이전에 해야할지도 모름\n","\n","short_tp_1_, short_tp_0_, short_tp_gap_, long_tp_1_, long_tp_0_, long_tp_gap_ = [res_df[col_].to_numpy() for col_ in tp_cols]\n","short_epout_1_, short_epout_0_, short_epout_gap_, long_epout_1_, long_epout_0_, long_epout_gap_ = [res_df[col_].to_numpy() for col_ in epout_cols]\n","open, high, low = [res_df[col_].to_numpy() for col_ in data_cols]\n","\n","short_base = (short_tp_1_ + short_tp_0_) / 2\n","long_base = (long_tp_1_ + long_tp_0_) / 2\n","\n","touch_period = 50\n","\n","short_a_touch = pd.Series(np.where(high >= short_tp_0_, np.arange(len(res_df)), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()  # min -> max\n","short_b_touch = pd.Series(np.where(low <= short_tp_1_, np.arange(len(res_df)), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨\n","\n","short_en_p = (get_line(short_a_touch, short_tp_0_) + get_line(short_b_touch, short_tp_1_)) / 2\n","short_base_b = get_line(short_b_touch, short_base)\n","short_tp_gap_b = get_line(short_b_touch, short_tp_gap_)\n","short_open_res *= (high >= short_base_b) & (short_base_b >= open) & (short_a_touch < short_b_touch) & (short_base_b + config.loc_set.point.base_gap * short_tp_gap_b >= short_base)\n","\n","long_a_touch = pd.Series(np.where(low <= long_tp_0_, np.arange(len(res_df)), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()       \n","long_b_touch = pd.Series(np.where(high >= long_tp_1_, np.arange(len(res_df)), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()\n","\n","long_en_p = (get_line(long_a_touch, long_tp_0_) + get_line(long_b_touch, long_tp_1_)) / 2\n","long_base_b = get_line(long_b_touch, long_base)\n","long_tp_gap_b = get_line(long_b_touch, long_tp_gap_)\n","long_open_res *= (open >= long_base_b) & (long_base_b >= low) & (long_a_touch < long_b_touch) & (long_base_b - config.loc_set.point.base_gap * long_tp_gap_b <= long_base)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1648558797859,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"5X-3R-rSwFDh","outputId":"2053743d-9468-4bd6-c0e8-c2817b448ec6"},"outputs":[{"name":"stdout","output_type":"stream","text":["[ 379.67  379.67  387.17 ... 3145.43 3145.43 3126.73]\n","[ 386.14  386.14  391.39 ... 3158.96 3158.96 3150.79]\n","[ 382.905  382.905  389.28  ... 3152.195 3152.195 3138.76 ]\n"]},{"data":{"text/plain":["0"]},"execution_count":28,"metadata":{},"output_type":"execute_result"}],"source":["print(get_line(long_a_touch, long_tp_0_)[long_open_res.astype(bool)])\n","print(get_line(long_a_touch, long_tp_0_)[long_open_res.astype(bool)])\n","print(get_line(long_b_touch, long_tp_1_)[long_open_res.astype(bool)])\n","print(long_base_b[long_open_res.astype(bool)])\n","np.sum(long_en_p[long_open_res.astype(bool)] != long_base_b[long_open_res.astype(bool)])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yGm3hwHEJ1va"},"outputs":[],"source":["def get_max_tpg(open_side, ohlc_list, pr_, obj_, rtc_gap):  # much faster\n","    if type(obj_) == list:\n","        obj_ = list(zip(*obj_))\n","\n","    h, l = ohlc_list[1:3]\n","\n","    if open_side == \"SELL\":\n","      max_tpg = np.array([ep_ - np.min(l[int(iin):int(iout + 1)]) for ep_, _, iin, iout in obj_]) / rtc_gap # out 포함\n","      # max_outg = np.array([np.max(h[int(iin):int(iout + 1)]) - ep_ for ep_, _, iin, iout in obj_]) / rtc_gap\n","    else:\n","      max_tpg = np.array([np.max(h[int(iin):int(iout + 1)]) - ep_ for ep_, _, iin, iout in obj_]) / rtc_gap\n","      # max_outg = np.array([ep_ - np.min(l[int(iin):int(iout + 1)]) for ep_, _, iin, iout in obj_]) / rtc_gap\n","\n","    return max_tpg[pr_ < 1]  # out 된 case 만 tpg 담음"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"eooryL32-zxp"},"outputs":[],"source":["short_max_tpg = get_max_tpg(\"SELL\", ohlc_list, short_pr, short_obj[:4], short_open_rtc_gap)\n","long_max_tpg = get_max_tpg(\"BUY\", ohlc_list, long_pr, long_obj[:4], long_open_rtc_gap)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yOMiuw7cJYmZ"},"outputs":[],"source":["long_max_tpg"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SrGNSuOjCyPn"},"outputs":[],"source":["def get_pr_v3(open_side, h, l, obj, tpout, lvrg, fee, p_ranges, p_qty, inversion=False):  # --> 여기서 사용하는 ex_p = ex_p\n","\n","    en_p = obj[0]\n","    # ex_p = obj[1]\n","    tp, out = np.split(tpout, 2, axis=1)\n","    len_p = len(p_ranges)\n","    en_ps, tps, outs, lvrgs, fees = [np.tile(arr_, (1, len_p)) for arr_ in [en_p, tp, out, lvrg, fee]]\n","    \n","    np_obj = np.array(obj).T[0]\n","    assert len(np_obj.shape) == 2\n","    \n","    # iin == iout 인 경우 분리\n","    en_idx = np_obj[:, 2]\n","    ex_idx = np_obj[:, 3]\n","    equal_idx = en_idx == ex_idx\n","        \n","    if open_side == \"SELL\":\n","        p_tps = en_ps - (en_ps - tps) * p_ranges\n","        # min_low = np.array([np.min(l[int(iin):int(iout + 1)]) for _, _, iin, iout in list(zip(*obj[:4]))]).reshape(-1, 1)  # -> deprecated, start from iin + 1\n","        min_low = np.full_like(en_p, np.nan)\n","        min_low[~equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1) # start from iin + 1\n","        tp_idx = np.tile(min_low, (1, len_p)) <= p_tps\n","        \n","        # ------ liquidation ------ #\n","        max_high = np.full_like(en_p, np.nan)\n","        max_high[~equal_idx] = np.array([np.max(h[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        liqd = np.nanmin((en_p / max_high - fee - 1) * lvrg + 1)\n","    else:\n","        p_tps = en_ps + (tps - en_ps) * p_ranges\n","        # max_high = np.array([np.max(h[int(iin):int(iout + 1)]) for _, _, iin, iout in list(zip(*obj[:4]))]).reshape(-1, 1)\n","        max_high = np.full_like(en_p, np.nan)\n","        max_high[~equal_idx] = np.array([np.max(h[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        tp_idx = np.tile(max_high, (1, len_p)) >= p_tps\n","        # print(p_tps)\n","        # print(max_high)\n","\n","        # ------ liquidation ------ #\n","        min_low = np.full_like(en_p, np.nan)\n","        min_low[~equal_idx] = np.array([np.min(l[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        liqd = np.nanmin((min_low / en_p - fee - 1) * lvrg + 1)\n","\n","    ex_ps = outs.copy()\n","    ex_ps[tp_idx] = p_tps[tp_idx]\n","\n","    if open_side == \"SELL\":\n","        if not inversion:\n","            pr = ((en_ps / ex_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","        else:\n","            pr = ((ex_ps / en_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","    else:\n","        if not inversion:\n","            # print(fees)\n","            # print(p_qty)\n","            # print(p_qty * fees)\n","            pr = ((ex_ps / en_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","        else:\n","            pr = ((en_ps / ex_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","\n","    return pr.reshape(-1, 1), liqd"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"b5s3Us9VtlXH"},"outputs":[],"source":["p_ranges, p_qty = [0.2, 0.6, 1], [1, 0.0, 0.00]\n","long_pr, long_liqd = get_pr_v3(OrderSide.BUY, h, l, long_obj, long_tpout_arr, long_lvrg_arr, long_fee_arr, p_ranges, p_qty, inversion)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"s1O_gGXVtrtz"},"outputs":[],"source":["long_pr"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HBFh3FJLpYeZ"},"outputs":[],"source":["def liquidation_v2(open_side, data_, obj_, lvrg, fee):  # v1 is deprecated\n","    if type(obj_) == list:\n","        obj = list(zip(*obj_))\n","\n","    np_obj = np.array(obj_).T[0]\n","    assert len(np_obj.shape) == 2\n","    \n","    en_p = obj_[0]\n","\n","    # iin == iout 인 경우 분리\n","    en_idx = np_obj[:, 2]\n","    ex_idx = np_obj[:, 3]\n","    equal_idx = en_idx == ex_idx\n","\n","    if open_side == \"SELL\":\n","        max_high = np.full_like(en_p, np.nan)\n","        max_high[~equal_idx] = np.array([np.max(data_[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        return np.nanmin((en_p / max_high - fee - 1) * lvrg + 1)\n","    else:\n","        min_low = np.full_like(en_p, np.nan)\n","        min_low[~equal_idx] = np.array([np.min(data_[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        return np.nanmin((min_low / en_p - fee - 1) * lvrg + 1)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":527,"status":"ok","timestamp":1648462727490,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"GtajcCM49AGr","outputId":"a0c857d5-83db-407c-f0dd-bb906de72f20"},"outputs":[{"name":"stdout","output_type":"stream","text":["(2005,)\n","(1724,)\n","0.9338351565411452\n","0.9832121539680836\n"]}],"source":["short_liqd = liquidation_v2(OrderSide.SELL, h, short_obj[:4], short_lvrg_arr, short_fee_arr)\n","long_liqd = liquidation_v2(OrderSide.BUY, l, long_obj[:4], long_lvrg_arr, long_fee_arr)\n","\n","print(short_liqd)\n","print(long_liqd)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"eMuRjqo_evR1"},"outputs":[],"source":["def liquidation_v2(open_side, data_, obj_, lvrg, fee):  # much faster\n","\n","    # if type(obj_) == list:\n","    #     obj_ = \n","    # if open_side == \"SELL\":\n","    #     return np.min([(ep_ / np.max(data_[int(iin):int(iout + 1)]) - fee - 1) * lvrg + 1 for ep_, _, iin, iout in obj_])\n","    # else:\n","    #     return np.min([(np.min(data_[int(iin):int(iout + 1)]) / ep_ - fee - 1) * lvrg + 1 for ep_, _, iin, iout in obj_])\n","\n","    np_obj = np.array(obj).T[0]\n","    assert len(np_obj.shape) == 2\n","\n","    en_p = obj_[0]  # 2d\n","\n","    print(np_obj.shape)\n","    \n","    # iin == iout 인 경우 분리\n","    en_idx = np_obj[:, 2]\n","    ex_idx = np_obj[:, 3]\n","    equal_idx = en_idx == ex_idx\n","    print(equal_idx)\n","        \n","    if open_side == \"SELL\":\n","        max_high = en_p.copy()\n","        max_high[~equal_idx] = np.array([np.max(data_[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)  # equal_idx 는 liqd 를 측정하지 않음\n","        return np.min((en_p / max_high - fee - 1) * lvrg + 1)\n","    else:\n","        min_low = en_p.copy()\n","        print(min_low)\n","\n","        # min_low[~equal_idx] = np.array([np.min(data_[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        print(data_)\n","        # res = np.array([np.min(data_[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        res = np.min([(np.min(data_[int(iin):int(iout)]) / ep_ - fee - 1) * lvrg + 1 for ep_, _, iin, iout in list(zip(*obj_)) if iin != iout])\n","        # print(min_low[~equal_idx])\n","        print(res)\n","        return np.min((min_low / en_p - fee - 1) * lvrg + 1)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"uLMEbR_vij3L"},"outputs":[],"source":["h, l = ohlc_list[1:3]\n","long_liqd = liquidation_v2(OrderSide.BUY, l, long_obj[:4], long_lvrg_arr, long_fee_arr)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ykrPUuxiXlLG"},"outputs":[],"source":["# np.array(long_obj)[:,(en_idx == ex_idx)].shape\n","long_np_obj = np.array(long_obj).T[0]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":401,"status":"ok","timestamp":1648455838651,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"MZiMIYLln8bB","outputId":"3a2f1100-f1b1-4ad9-da2f-d50708a60ccd"},"outputs":[{"data":{"text/plain":["array([[   383.005,    381.73 ,     60.   ,     61.   ],\n","       [   386.33 ,    384.9  ,    105.   ,    107.   ],\n","       [   386.43 ,    385.24 ,    240.   ,    243.   ],\n","       ...,\n","       [  3806.905,   3863.8  , 679660.   , 679934.   ],\n","       [  3953.845,   3944.   , 680228.   , 680255.   ],\n","       [  4102.28 ,   4089.18 , 685040.   , 685167.   ]])"]},"execution_count":507,"metadata":{},"output_type":"execute_result"}],"source":["long_np_obj[~equal_idx, :4]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"r8rHPFeHm1DQ"},"outputs":[],"source":["# for _, _, iin, iout in long_np_obj[~equal_idx, :4]:\n","#   print(iin, iout)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":390,"status":"ok","timestamp":1648453058391,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"Uyjsp9EyZ4GF","outputId":"b15069ba-0057-4665-916c-f4417979cb88"},"outputs":[{"data":{"text/plain":["(1724,)"]},"execution_count":446,"metadata":{},"output_type":"execute_result"}],"source":["# long_np_obj.shape\n","# # long_np_obj.T[0]\n","long_np_obj\n","\n","en_idx = long_np_obj[:, 2]\n","ex_idx = long_np_obj[:, 3]\n","\n","# print(en_idx[:5])\n","# print(ex_idx[:5])\n","# np.sum(en_idx == ex_idx)\n","equal_idx = en_idx == ex_idx\n","equal_idx.shape\n","# en_idx"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_GrZgkaSZC2K"},"outputs":[],"source":["# # for items in zip(long_np_obj[:4]):\n","# # for items in list(zip(*long_obj[:4])):\n","# for items in long_np_obj:\n","#   print(items)\n","#   break\n","equal_idx = equal_idx.ravel()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"R1YRROdJYWkH"},"outputs":[],"source":["min_low = np.full_like(en_idx, np.nan)\n","min_low[~equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in long_np_obj[~equal_idx, :4]]).reshape(-1, 1)  # reshape for shape match\n","# min_low[equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in long_np_obj[equal_idx, :4]]).reshape(-1, 1)  # reshape for shape match # np.nan 은 비교에서 무조건 False 즉, out 처리될 것"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1648454521907,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"jFxV8dami0wn","outputId":"896b3188-7179-4f33-c9e5-f259f5458436"},"outputs":[{"data":{"text/plain":["-1.7472363139317024"]},"execution_count":483,"metadata":{},"output_type":"execute_result"}],"source":["long_liqd"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mMsDJDmO5qNw"},"outputs":[],"source":["short_outg_plot_data = short_max_outg[short_max_outg <= max_plot_outg]  # nan 과 inf 때문에 이 방식 채택\n","long_outg_plot_data = long_max_outg[long_max_outg <= max_plot_outg]\n","print(\"len(short_outg_plot_data) :\", len(short_outg_plot_data))\n","print(\"len(long_outg_plot_data) :\", len(long_outg_plot_data))\n","\n","plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(12, 5))\n","nrows, ncols = 1, 2\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        )\n","  \n","plt.subplot(gs[0])\n","kde_plot_v2(*np.unique(short_outg_plot_data, return_counts=True))\n","\n","plt.subplot(gs[1])\n","kde_plot_v2(*np.unique(long_outg_plot_data, return_counts=True))\n","\n","plt.suptitle('outg')\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BjxCPi96JbfS"},"outputs":[],"source":["# --- tp > ep > out 검사 --- #\n","long_tp, long_out = np.split(long_tpout_arr, 2, axis=1)\n","long_ep = long_obj[0]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Q_wH04vCJzYu"},"outputs":[],"source":["print(np.sum((long_tp <= long_ep)))\n","print(np.sum((long_ep <= long_out)))\n","print(len((long_ep <= long_out)))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YlENTUSXhBfa"},"outputs":[],"source":["def kde_plot_v2(v, c, kde_factor=0.15, num_samples=100):\n","\n","  # start_0 = time.time()\n","  kde = stats.gaussian_kde(v,weights=c,bw_method=kde_factor)\n","  kdx = np.linspace(v.min(),v.max(),num_samples)\n","  kdy = kde(kdx)\n","  ticks_per_sample = (kdx.max() - kdx.min()) / num_samples\n","  # print(\"ticks_per_sample :\", ticks_per_sample)  # sample 당 가격\n","  # print(\"kdy elapsed_time :\", time.time() - start_0)\n","\n","  peaks,_ = signal.find_peaks(kdy)\n","  pkx = kdx[peaks]\n","  pky = kdy[peaks]\n","  print(\"pkx :\", pkx)\n","\n","  # plt.figure(figsize=(10,5))\n","  plt.hist(v, weights=c, bins=num_samples, alpha=.8, edgecolor='black')\n","  plt.plot(kdx, kdy, color='white')\n","  plt.plot(pkx, pky, 'bo', color='yellow')\n","  # plt.show()\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZkbuBX1Ygzll"},"outputs":[],"source":["def get_max_outg(open_side, config, ohlc_list, obj, tpout_arr, rtc_gap):\n","\n","    h, l = ohlc_list[1:3]    \n","    en_p, _, en_idxs, _, open_idxs = obj\n","\n","    if open_side == \"SELL\":\n","      idxgs = [np.argwhere(l[int(en_idx) : int(en_idx + config.tr_set.bias_info_tick)] <= tpout_arr[i, 0]) for i, en_idx in enumerate(en_idxs)]\n","    else:\n","      idxgs = [np.argwhere(h[int(en_idx) : int(en_idx + config.tr_set.bias_info_tick)] >= tpout_arr[i, 0]) for i, en_idx in enumerate(en_idxs)]\n","\n","    min_idxg = np.array([gaps.min() if len(gaps) != 0 else np.nan for gaps in idxgs])  # get 최소 idx_gap from en_idx\n","    nan_idx = np.isnan(min_idxg) # .astype(int)\n","    min_idxg[nan_idx] = 0  # fill na 0, for idex summation below\n","\n","    if open_side == \"SELL\":\n","      max_outg = np.array([np.max(h[int(en_idx):int(en_idx + idx_gap + 1)]) - ep_ for en_idx, idx_gap, ep_ in zip(en_idxs, min_idxg, en_p)]) / rtc_gap\n","    else:\n","      max_outg = np.array([ep_ - np.min(l[int(en_idx):int(en_idx + idx_gap + 1)]) for en_idx, idx_gap, ep_ in zip(en_idxs, min_idxg, en_p)]) / rtc_gap # out_idx 포함\n","\n","    return max_outg[~nan_idx], open_idxs[~nan_idx].astype(int)  # true_bias 의 outg data 만 사용"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":479,"status":"ok","timestamp":1648380698566,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"mYQgnD9CgC8b","outputId":"e316919a-0e22-4266-ef24-185284cc8cb5"},"outputs":[{"name":"stdout","output_type":"stream","text":["[ 390.58  387.91  344.81  346.25  334.7   351.81  366.07  367.09  372.83  372.08  384.92  387.79  374.12  365.82  364.87  359.06  386.58  381.46  384.71  385.    383.9   384.18  381.18  369.86  373.5   374.17  341.4   344.5   345.29  342.93  343.49  340.7   320.3   345.3   349.59  355.    352.    354.    357.96  358.21  355.    352.47  355.18  346.41  347.14  348.54  346.62  348.28  347.38  348.19  351.74  352.98  339.87  339.64  339.99  339.46  349.97  368.    375.85  374.3   367.2   383.8   386.25  385.31  384.97  377.3   377.85  380.28  378.    365.92  366.9   367.9   368.6   369.61  368.48  369.09  372.72  379.    379.17  375.2   379.09  380.52  397.42  417.13  418.05  413.6   412.26  411.7   408.6   406.29  405.5   383.74  388.2   386.95  387.    386.97  387.86  378.69  383.58  459.06  437.    445.    445.99  464.27  463.1   464.96  463.3   456.76  463.89  462.3   458.31  459.37  461.31  470.28  475.    591.54  601.95  619.3   609.46  573.21  512.97  554.39  588.37  593.83  571.43  593.31  589.71  552.62  551.44  563.9   573.    568.68  562.72  556.82  565.49  581.    592.74  651.18  644.2   646.4   607.89  606.5   615.    612.8   614.27  582.76  610.64  704.97  753.49  741.36  736.2   996.   1694.7  1686.52 1859.07 1818.7  1892.84 1930.29 1959.36 1639.28 1565.   1565.   1565.   1565.   1565.   1565.   1565.   1565.   1565.   1565.   1711.55 1783.83 1821.46 1834.   1623.93 1979.92 2062.   2204.69 2527.76 2720.47 3532.96 3890.   2778.64 2600.   2331.29 2175.   2140.   1963.91 1753.24 1969.43 2045.5  2158.   2250.   2280.78 2316.37 3180.   3141.93 3276.   3243.   3271.   3329.56 3236.   3275.94 3184.99 3410.   3963.04 3305.   3260.94 3636.28 3419.99 3400.   3383.32 3558.82 3499.   3503.68 4528.   4579.46 4492.13 4231.98 4373.8  3794.77 4082.93 4055.41 3782.   3745.   3163.98 3227.16 3302.58 3105.25 3078.   2621.06 2548.   2619.76 3116.4 ]\n","[ 390.58  387.91  344.81  346.25  334.7   351.81  366.07  367.09  372.83  372.08  384.92  387.79  374.12  365.82  364.87  359.06  386.58  381.46  384.71  385.    383.9   384.18  381.18  369.86  373.5   374.17  341.4   344.5   345.29  342.93  343.49  340.7   320.3   345.3   349.59  355.    352.    354.    357.96  358.21  355.    352.47  355.18  346.41  347.14  348.54  346.62  348.28  347.38  348.19  351.74  352.98  339.87  339.64  339.99  339.46  349.97  368.    375.85  374.3   367.2   383.8   386.25  385.31  384.97  377.3   377.85  380.28  378.    365.92  366.9   367.9   368.6   369.61  368.48  369.09  372.72  379.    379.17  375.2   379.09  380.52  397.42  417.13  418.05  413.6   412.26  411.7   408.6   406.29  405.5   383.74  388.2   386.95  387.    386.97  387.86  378.69  383.58  459.06  437.    445.    445.99  464.27  463.1   464.96  463.3   456.76  463.89  462.3   458.31  459.37  461.31  470.28  475.    591.54  601.95  619.3   609.46  573.21  512.97  554.39  588.37  593.83  571.43  593.31  589.71  552.62  551.44  563.9   573.    568.68  562.72  556.82  565.49  581.    592.74  651.18  644.2   646.4   607.89  606.5   615.    612.8   614.27  582.76  610.64  704.97  753.49  741.36  736.2   996.   1694.7  1686.52 1859.07 1818.7  1892.84 1930.29 1959.36 1639.28 1565.   1565.   1565.   1565.   1565.   1565.   1565.   1565.   1565.   1565.   1711.55 1783.83 1821.46 1834.   1623.93 1979.92 2062.   2204.69 2527.76 2720.47 3532.96 3890.   2778.64 2600.   2331.29 2175.   2140.   1963.91 1753.24 1969.43 2045.5  2158.   2250.   2280.78 2316.37 3180.   3141.93 3276.   3243.   3271.   3329.56 3236.   3275.94 3184.99 3410.   3963.04 3305.   3260.94 3636.28 3419.99 3400.   3383.32 3558.82 3499.   3503.68 4528.   4579.46 4492.13 4231.98 4373.8  3794.77 4082.93 4055.41 3782.   3745.   3163.98 3227.16 3302.58 3105.25 3078.   2621.06 2548.   2619.76 3116.4 ]\n","234\n"]}],"source":["strat_version = config.strat_version\n","long_open_res = res_df['long_open_{}'.format(strat_version)].to_numpy().astype(bool)\n","\n","res_df['long_tp_{}'.format(strat_version)].to_numpy()[long_open_res]\n","res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res]\n","# res_df['long_ep_{}'.format(strat_version)].to_numpy()\n","# long_open_res\n","# res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res]\n","# np.sum(res_df['long_tp_{}'.format(strat_version)].to_numpy()[long_open_res] <= res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res])\n","# res = res_df['long_tp_{}'.format(strat_version)].to_numpy()[long_open_res] > res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res]\n","res = res_df['long_tp_{}'.format(strat_version)].to_numpy()[long_open_res] <= res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res]\n","\n","print(res_df['long_tp_{}'.format(strat_version)].to_numpy()[long_open_res][res])\n","print(res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res][res])\n","print(len(res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res][res]))\n","\n","# res = res_df['long_tp_{}'.format(strat_version)].to_numpy() > res_df['long_ep_{}'.format(strat_version)].to_numpy()\n","# res = res_df['long_ep_{}'.format(strat_version)].to_numpy() > res_df['long_out_{}'.format(strat_version)].to_numpy()\n","\n","# print(res_df['long_tp_{}'.format(strat_version)].to_numpy()[res])\n","# print(res_df['long_ep_{}'.format(strat_version)].to_numpy()[res])\n","# print(res_df['long_out_{}'.format(strat_version)].to_numpy()[res])\n","# print(len(res_df['long_ep_{}'.format(strat_version)].to_numpy()[res]))\n","# print(len(res_df['long_out_{}'.format(strat_version)].to_numpy()[res]))\n","\n","# assert np.sum(res_df['long_tp_{}'.format(strat_version)].to_numpy()[long_open_res] <= res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res]) == 0\n","# assert np.sum(res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res] <= res_df['long_out_{}'.format(strat_version)].to_numpy()[long_open_res]) == 0"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"57mFruHtCmmh"},"outputs":[],"source":["# fig, axs=plt.subplots(1,2,sharey=True,tight_layout=True)\n","# axs[0].hist(short_max_outg,bins=100)\n","# axs[1].hist(abs_ratio_5T[short_outg_open_idx],bins=100)\n","# plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"40MdGjCY1YtH"},"outputs":[],"source":["def kde_plot(plot_data, kde_factor=0.15, num_samples=100):\n","  v, c = np.unique(plot_data, return_counts=True)  \n","\n","  # start_0 = time.time()\n","  kde = stats.gaussian_kde(v,weights=c,bw_method=kde_factor)\n","  kdx = np.linspace(v.min(),v.max(),num_samples)\n","  kdy = kde(kdx)\n","  ticks_per_sample = (kdx.max() - kdx.min()) / num_samples\n","  # print(\"ticks_per_sample :\", ticks_per_sample)  # sample 당 가격\n","  # print(\"kdy elapsed_time :\", time.time() - start_0)\n","\n","  peaks,_ = signal.find_peaks(kdy)\n","  pkx = kdx[peaks]\n","  pky = kdy[peaks]\n","\n","  # plt.figure(figsize=(10,5))\n","  plt.hist(v, weights=c, bins=num_samples, alpha=.8, edgecolor='black')\n","  plt.plot(kdx, kdy, color='white')\n","  plt.plot(pkx, pky, 'bo', color='yellow')\n","  # plt.show()\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"v2k6D7UceIK4"},"outputs":[],"source":["v, c = np.unique(long_tpg_plot, return_counts=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":424,"status":"ok","timestamp":1648269301273,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"bJe1fSGFdUcj","outputId":"991eb570-3633-49b7-9a91-02cb5d4fba43"},"outputs":[{"name":"stdout","output_type":"stream","text":["ticks_per_sample : 0.047098781436344224\n","kdy elapsed_time : 0.013733863830566406\n"]}],"source":["kde_factor = 0.15\n","num_samples = 100\n","\n","start_0 = time.time()\n","kde = stats.gaussian_kde(v,weights=c,bw_method=kde_factor)\n","kdx = np.linspace(v.min(),v.max(),num_samples)\n","kdy = kde(kdx)\n","ticks_per_sample = (kdx.max() - kdx.min()) / num_samples\n","print(\"ticks_per_sample :\", ticks_per_sample)  # sample 당 가격\n","print(\"kdy elapsed_time :\", time.time() - start_0)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":320},"executionInfo":{"elapsed":954,"status":"ok","timestamp":1648269365137,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"1Cby5teZdUcj","outputId":"db5fd5b3-4617-42f9-877c-c4b9b82adcef"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 720x360 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["peaks,_ = signal.find_peaks(kdy)\n","pkx = kdx[peaks]\n","pky = kdy[peaks]\n","\n","plt.figure(figsize=(10,5))\n","plt.hist(v, weights=c, bins=num_samples, alpha=.8, edgecolor='black')\n","plt.plot(kdx, kdy, color='white')\n","plt.plot(pkx, pky, 'bo', color='yellow')\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CfiSD0uwcNIZ"},"outputs":[],"source":["def max_tpout_gap(open_side, ohlc_list, obj_, rtc_gap):  # much faster\n","    if type(obj_) == list:\n","        obj_ = list(zip(*obj_))\n","\n","    h, l = ohlc_list[1:3]\n","\n","    if open_side == \"SELL\":\n","      max_tpg = np.array([ep_ - np.min(l[int(iin):int(iout + 1)]) for ep_, _, iin, iout in obj_]) / rtc_gap # out 포함\n","      max_outg = np.array([np.max(h[int(iin):int(iout + 1)]) - ep_ for ep_, _, iin, iout in obj_]) / rtc_gap\n","    else:\n","      max_tpg = np.array([np.max(h[int(iin):int(iout + 1)]) - ep_ for ep_, _, iin, iout in obj_]) / rtc_gap\n","      max_outg = np.array([ep_ - np.min(l[int(iin):int(iout + 1)]) for ep_, _, iin, iout in obj_]) / rtc_gap\n","\n","    return max_tpg, max_outg"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"r82KfqFqi9tp"},"outputs":[],"source":["short_open_res = np.ones(len(res_df))\n","\n","strat_version = config.strat_version\n","\n","short_rtc_1_col, short_rtc_0_col, short_rtc_gap_col = 'short_rtc_1_{}'.format(strat_version), 'short_rtc_0_{}'.format(strat_version), 'short_rtc_gap_{}'.format(strat_version) \n","long_rtc_1_col, long_rtc_0_col, long_rtc_gap_col = 'long_rtc_1_{}'.format(strat_version), 'long_rtc_0_{}'.format(strat_version), 'long_rtc_gap_{}'.format(strat_version) \n","\n","short_rtc_1_col, short_rtc_0_col, short_rtc_gap_col = 'short_rtc_1_{}'.format(strat_version), 'short_rtc_0_{}'.format(strat_version), 'short_rtc_gap_{}'.format(strat_version) \n","long_rtc_1_col, long_rtc_0_col, long_rtc_gap_col = 'long_rtc_1_{}'.format(strat_version), 'long_rtc_0_{}'.format(strat_version), 'long_rtc_gap_{}'.format(strat_version) \n","\n","data_cols = ['open', 'high', 'low']   # Todo - public_indi 이전에 해야할지도 모름 # 'close', 'haopen', 'hahigh', 'halow', 'haclose'\n","rtc_cols = [short_rtc_1_col, short_rtc_0_col, short_rtc_gap_col, long_rtc_1_col, long_rtc_0_col, long_rtc_gap_col]   # Todo - public_indi 이전에 해야할지도 모름\n","\n","short_rtc_1_, short_rtc_0_, short_rtc_gap_, long_rtc_1_, long_rtc_0_, long_rtc_gap_ = [res_df[col_].to_numpy() for col_ in rtc_cols]\n","open, high, low = [res_df[col_].to_numpy() for col_ in data_cols]\n","short_base = (short_rtc_1_ + short_rtc_0_) / 2\n","long_base = (long_rtc_1_ + long_rtc_0_) / 2\n","# back_ha_o = res_df['haopen'].shift(1).to_numpy()\n","# back_ha_c = res_df['haclose'].shift(1).to_numpy()\n","\n","touch_period = 50\n","# short_open_res *= (back_ha_c >= back_ha_o) & (ha_o > ha_c)\n","# short_open_res *= ha_o == ha_h\n","# short_open_res *= np_timeidx % tf_entry == tf_entry - 1     \n","# short_a_touch = pd.Series(np.where(high >= short_rtc_0_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()  # min -> max\n","short_a_touch = pd.Series(np.where((high >= short_base_b) & (short_base_b >= open), np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).min().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨\n","short_b_touch = pd.Series(np.where(low <= short_rtc_1_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨\n","\n","short_a_touch_line = get_line(short_a_touch, short_rtc_0_)\n","short_b_touch_line = get_line(short_b_touch, short_rtc_1_)\n","short_en_p = (short_a_touch_line + short_b_touch_line) / 2\n","short_base_b = get_line(short_b_touch, short_base)\n","short_rtc_gap_b = get_line(short_b_touch, short_rtc_gap_)\n","short_open_res *= (high >= short_base_b) & (short_base_b >= open) & (short_a_touch < short_b_touch) & (short_base_b + config.loc_set.point.base_gap * short_rtc_gap_b >= short_base)\n","\n","res_df['short_open_{}'.format(strat_version)] = short_open_res"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":366,"status":"ok","timestamp":1647925782107,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"CgD4-ZKW11MQ","outputId":"c126aabb-cb41-4392-a80c-53971b146c2c"},"outputs":[{"name":"stdout","output_type":"stream","text":["[ 377.545  378.085  379.015 ... 3148.91  3148.91  3148.91 ]\n","[ 377.545  378.085  379.015 ... 3148.91  3148.91  3148.91 ]\n"]},{"data":{"text/plain":["0"]},"execution_count":29,"metadata":{},"output_type":"execute_result"}],"source":["# short_en_p == short_base_b\n","print(short_en_p[~np.isnan(short_en_p)])\n","print(short_base_b[~np.isnan(short_en_p)])\n","\n","np.sum((short_en_p[~np.isnan(short_en_p)] == short_base_b[~np.isnan(short_en_p)]) == 0) # => why ..?"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":310,"status":"ok","timestamp":1647565975814,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"AIt9z1NRj5bJ","outputId":"c1b83639-7041-4745-dacd-d9cff49a205d"},"outputs":[{"name":"stdout","output_type":"stream","text":["[2934.59  2934.59  3028.59  3028.59  3028.59  3026.075 3026.075 3016.09  3014.67  3014.4   3014.4   3014.4   3014.4   3014.4   3014.4   3014.395 3014.315 3014.315 3030.235 3030.235 3030.235 3030.235 3051.18  3051.18  3051.18  3077.275 3076.77  3090.945 3105.1   3105.1   3105.1   3105.1   3105.1   3105.1   3099.205 3099.205 3099.205 3105.495 3105.495 3109.615 3127.43  3123.795 3123.795 3123.795 3112.695 3122.715 3122.715 3122.715 3122.715 3115.2   3114.93  3097.035 3115.31  3115.31  3114.245 3114.15  3114.15  3114.15  3112.2   3110.75  3110.75  3112.16  3112.16  3134.39  3134.39  3134.39  3127.905 3127.905 3127.905 3127.905 3128.595 3128.595 3138.59  3138.59  3147.47  3134.205 3133.04  3134.155 3131.105 3131.105 3131.105 3065.94  3065.94  3065.94  3065.51  3068.    3079.33  3079.33  3079.33  3099.805 3169.595 3169.595 3169.595 3169.04  3140.395 3140.395 3140.395 3148.91  3148.91  3148.91 ]\n","[    nan     nan     nan ... 3158.68 3158.68 3158.68]\n","[    nan     nan     nan ... 763812. 763812. 763812.]\n","[ 388.18  388.18  388.18 ... 3158.68 3158.68 3158.68]\n"]}],"source":["true_idx = short_open_res == 1\n","\n","# print(((short_a_touch_line + short_b_touch_line) / 2)[true_idx][-100:])\n","print(short_en_p[true_idx][-100:])\n","# print(short_a_touch_line[true_idx][-100:])\n","\n","print(short_a_touch_line)\n","print(short_a_touch)\n","print(short_rtc_0_)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2,"status":"ok","timestamp":1647565931392,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"GXbSWec4ik3g","outputId":"547b0fc1-0e35-4387-e891-a3af42c18476"},"outputs":[{"name":"stdout","output_type":"stream","text":["[    nan     nan     nan ... 3158.68 3158.68 3158.68]\n","[    nan     nan     nan ... 763812. 763812. 763812.]\n","[ 388.18  388.18  388.18 ... 3158.68 3158.68 3158.68]\n"]}],"source":["short_a_touch_line = get_line(short_a_touch, short_rtc_0_)\n","short_b_touch_line = get_line(short_b_touch, short_rtc_1_)\n","short_en_p = (short_a_touch_line + short_b_touch_line) / 2\n","\n","# print(((short_a_touch_line + short_b_touch_line) / 2)[true_idx][-100:])\n","# print(short_en_p[true_idx][-100:])\n","\n","print(short_a_touch_line)\n","print(short_a_touch)\n","print(short_rtc_0_)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fx4iA-T1k6GS"},"outputs":[],"source":["def get_line(touch, rtc_):\n","  touch_copy = touch.copy()\n","  touch_line = rtc_.copy()\n","\n","  nan_idx = np.isnan(touch_copy)\n","  touch_copy[nan_idx] = 0   # for indexing array\n","  touch_line[touch_copy.astype(int)]\n","  touch_line[nan_idx] = np.nan   # for true comp.\n","\n","  return touch_line"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Pk8i59oM4CFZ"},"outputs":[],"source":["# print(short_b_touch[-100:])\n","# print(short_base_b[-100:])\n","true_idx = short_open_res == 1\n","short_a_touch_line = get_line(short_a_touch, short_rtc_0_)\n","short_b_touch_line = get_line(short_b_touch, short_rtc_1_)\n","\n","print(len(short_a_touch_line))\n","print(len(short_b_touch_line))\n","print(((short_a_touch_line + short_b_touch_line) / 2)[true_idx][-100:])\n","\n","print(short_a_touch_line[true_idx][-100:])\n","print(short_b_touch_line[true_idx][-100:])\n","print(short_open_res[true_idx][-100:])\n","print(short_en_p[true_idx][-100:])"]},{"cell_type":"markdown","metadata":{"id":"8b4SbvPrAPR1"},"source":["##### partial"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"M4MB0mryCiHC"},"outputs":[],"source":["def get_pr_v2(open_side, h, l, obj, tpout, lvrg, fee, p_ranges, p_qty, inversion=False):  # --> 여기서 사용하는 ex_p = ex_p\n","\n","    en_p = obj[0]\n","    # ex_p = obj[1]\n","    tp, out = np.split(tpout, 2, axis=1)\n","    len_p = len(p_ranges)\n","    en_ps, tps, outs, lvrgs, fees = [np.tile(arr_, (1, len_p)) for arr_ in [en_p, tp, out, lvrg, fee]]\n","    \n","    np_obj = np.array(obj).T[0]\n","    assert len(np_obj.shape) == 2\n","    \n","    # iin == iout 인 경우 분리\n","    en_idx = np_obj[:, 2]\n","    ex_idx = np_obj[:, 3]\n","    equal_idx = en_idx == ex_idx\n","        \n","    if open_side == \"SELL\":\n","        p_tps = en_ps - (en_ps - tps) * p_ranges\n","        # min_low = np.array([np.min(l[int(iin):int(iout + 1)]) for _, _, iin, iout in list(zip(*obj[:4]))]).reshape(-1, 1)  # -> deprecated, start from iin + 1\n","        min_low = np.full_like(en_p, np.nan)\n","        min_low[~equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        tp_idx = np.tile(min_low, (1, len_p)) <= p_tps\n","    else:\n","        p_tps = en_ps + (tps - en_ps) * p_ranges\n","        # max_high = np.array([np.max(h[int(iin):int(iout + 1)]) for _, _, iin, iout in list(zip(*obj[:4]))]).reshape(-1, 1)\n","        max_high = np.full_like(en_p, np.nan)\n","        max_high[~equal_idx] = np.array([np.max(h[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        tp_idx = np.tile(max_high, (1, len_p)) >= p_tps\n","\n","    ex_ps = outs.copy()\n","    ex_ps[tp_idx] = p_tps[tp_idx]\n","\n","    if open_side == \"SELL\":\n","        if not inversion:\n","            pr = ((en_ps / ex_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","        else:\n","            pr = ((ex_ps / en_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","    else:\n","        if not inversion:\n","            pr = ((ex_ps / en_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","        else:\n","            pr = ((en_ps / ex_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","\n","    return pr.reshape(-1, 1)"]},{"cell_type":"markdown","metadata":{"id":"JNQxkb06ZdTe"},"source":["## plot_check_v2"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hpkqOliMxSIU"},"outputs":[],"source":["res_df = wave_range_v4(res_df, 20, ltf_df=None, touch_lbperiod=50)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"A6QSF9COaHO5"},"outputs":[],"source":["# ------------------ plot_config ------------------ #\n","save_mode = 0\n","front_plot = 3    # 0 : whole, 1 : open, 2 : ep_tick, 3 : tp_tick, 4 : bias_tick\n","bias_plot = 0     # = swing_bias -> precision check : 1, recall check : 0\n","pr_descend = 1    # 1 -> 내림차순\n","position = 1      # -1 / 1, 0 (short / long)\n","# tf_plot = 1       # true - false plot\n","# pr_sort = 1     # -> default 1,  이상한 체결 확인하기 좋음\n","# wl_case = 1     # 1 / -1 / 0 (win loss study) --> oid\n","\n","x_max = 500\n","x_margin_mult = 1/30\n","y_margin_mult = 1/30  # 0 \n","\n","prev_plotsize = 200 #  100 20\n","# post_plotsize = 60\n","post_plotsize = config.tr_set.bias_info_tick\n","\n","inversion = 0\n","hedge = 0\n","\n","# ------ show or save ------ #\n","if save_mode:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".ftr\", \"\")\n","  shutil.rmtree(plot_check_dir, ignore_errors=True)  # remove existing dir\n","  os.makedirs(plot_check_dir)\n","  print(plot_check_dir)\n","else:\n","  plot_check_dir = None\n","\n","# ------------ 한 방향에 대해 plot_check 함 (by position var.) ------------ #\n","#   obj by position  \n","if position == -1:\n","  pos_str = \"SELL\"\n","  pr_, obj_ = short_pr, short_obj\n","  arr_list = [short_point1_arr, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_bias_arr, short_en_tp1, short_en_out0]\n","else:   # both option currently not supported\n","  pos_str = \"BUY\"\n","  pr_, obj_ = long_pr, long_obj\n","  arr_list = [long_point1_arr, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_bias_arr, long_en_tp1, long_en_out0]\n","pr, obj, [point1_arr, lvrg_arr, fee_arr, tpout_arr, bias_arr, en_tp1, en_out0] = sort_bypr_v3(pr_, obj_, arr_list, descending=pr_descend)\n","\n","pr_msg = \"%s\\n {} ~ {} -> {:.5f}\\n lvrg : {}\\n fee : {:.4f}\" % (pos_str)  # pos_str 으로 이곳에서 정의함\n","\n","# ------------------ data chunknize ------------------ #\n","np_df = res_df.to_numpy()\n","\n","# left_end_idx = obj[2] - prev_plotsize  # left_margin 기준 - entry_idx\n","left_end_idx = obj[4] - prev_plotsize  # left_margin 기준 - open_idx\n","right_end_idx = obj[3] + post_plotsize\n","invalid_left_end = np.sum(left_end_idx < 0)\n","\n","np_plot_params = np.hstack((left_end_idx, right_end_idx, pr, *obj, point1_arr, lvrg_arr, fee_arr, tpout_arr, en_tp1, en_out0))[invalid_left_end:]  # all arr should have same dimension\n","if bias_plot:\n","  bias_idx = bias_arr[invalid_left_end:].ravel()\n","  np_plot_params = np_plot_params[bias_idx]  # wave_bias = 1 만 plot"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":370,"status":"ok","timestamp":1650334752456,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"FnSydxFXn_f9","outputId":"3ee16e9b-57a7-4a02-f592-33bac357a223"},"outputs":[{"output_type":"stream","name":"stderr","text":["/content/drive/My Drive/Colab Notebooks/JnQ/funcs/funcs_plot_check.py:10: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  step_col_arr = np.array(col_list)\n"]}],"source":["strat_version = config.strat_version\n","\n","# ------------ make col_idx_dict config ------------ #\n","nonstep_col_list = []\n","step_col_list = []\n","stepmark_col_list = []\n","# ------ set period ------ #\n","hc_itv1 = '5T'\n","hc_itv2 = 'H'\n","\n","rs_itv = 'T'\n","\n","wave_itv1 = config_list[0].loc_set.point.p1_itv1\n","wave_period1, wave_period2 = config_list[0].loc_set.point.p1_period1, config_list[0].loc_set.point.p1_period2\n","\n","base_itv1 = 'T'\n","base_itv2 = '3T'\n","base_itv3 = '5T'\n","base_itv4 = '15T'\n","base_itv5 = 'H'\n","\n","dc_period = 5\n","dc_itv = 'T'\n","hdc_itv = '5T'\n","hhdc_itv = 'H'\n","\n","bb_itv = dc_itv\n","hbb_itv = hdc_itv\n","hhbb_itv = hhdc_itv\n","\n","# ------------ nonstep_col_list - add info(col, alpha, color, linewidth) ------------ #\n","# nonstep_col_list.append([['close'], 1, '#ffffff', 2])\n","\n","# ------------ step_col_list - add info(col, alpha, color, linewidth) ------------ #\n","# ------ htf_candle ------ #\n","step_col_list.append([['open_{}'.format(hc_itv1), 'close_{}'.format(hc_itv1)], 1, '#ffffff', 1])\n","step_col_list.append([['open_{}'.format(hc_itv2), 'close_{}'.format(hc_itv2)], 1, '#ffffff', 2])\n","\n","# ------ resi_sup ------ #\n","# step_col_list.append([['resi_{}'.format(rs_itv), 'sup_{}'.format(rs_itv)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['resi_out_{}'.format(rs_itv), 'sup_out_{}'.format(rs_itv)], 1, 'dodgerblue', 2])\n","\n","# ------ wave_range ------ #\n","step_col_list.append([['dc_upper_{}{}'.format(wave_itv1, wave_period1), 'dc_lower_{}{}'.format(wave_itv1, wave_period1)], 1, '#ffeb3b', 1])\n","step_col_list.append([['dc_upper_{}{}'.format(wave_itv1, wave_period2), 'dc_lower_{}{}'.format(wave_itv1, wave_period2)], 1, '#ffeb3b', 1])\n","\n","# step_col_list.append([['dc_upper_{}{}'.format(wave_itv2, wave_period2), 'dc_lower_{}{}'.format(wave_itv2, wave_period2)], 1, '#e65100', 2])\n","\n","# ------ dc ------ #\n","# step_col_list.append([['dc_upper_{}'.format(dc_itv), 'dc_lower_{}'.format(dc_itv)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['dc_upper_{}'.format(hdc_itv), 'dc_lower_{}'.format(hdc_itv)], 1, '#e65100', 2])\n","# step_col_list.append([['dc_upper_{}'.format(hhdc_itv), 'dc_lower_{}'.format(hhdc_itv)], 1, '#c2185b', 4])\n","\n","step_col_list.append([['dc_upper_{}{}'.format(hhdc_itv, dc_period), 'dc_lower_{}{}'.format(hhdc_itv, dc_period)], 1, '#ff00ff', 4]),  # inner\n","step_col_list.append([['dc_base_{}{}'.format(hhdc_itv, dc_period)], 1, '#5b9cf6', 4])\n","\n","# ------ bb ------ #\n","# step_col_list.append([['bb_upper_{}'.format(bb_itv), 'bb_lower_{}'.format(bb_itv)], 1, '#ffffff', 1])\n","step_col_list.append([['bb_upper_{}'.format(hbb_itv), 'bb_lower_{}'.format(hbb_itv)], 1, '#ffffff', 2])\n","step_col_list.append([['bb_upper_{}'.format(hhbb_itv), 'bb_lower_{}'.format(hhbb_itv)], 1, '#e91e63', 4])\n","\n","# ------ mtf dc_base ------ #\n","# step_col_list.append([['dc_base_{}'.format(base_itv1)], 1, '#5b9cf6', 1])\n","# step_col_list.append([['dc_base_{}'.format(base_itv2)], 1, '#5b9cf6', 2])\n","# step_col_list.append([['dc_base_{}'.format(base_itv3)], 1, '#5b9cf6', 3])\n","# step_col_list.append([['dc_base_{}'.format(base_itv4)], 1, '#5b9cf6', 4])\n","# step_col_list.append([['dc_base_{}'.format(base_itv5)], 1, '#5b9cf6', 5])\n","\n","# ------ ema ------ #\n","# step_col_list.append([['ema_5T'], 1, '#03ed30', 2])\n","\n","# ------------ stepmark_col_list - add info(col, alpha, color, linewidth) ------------ #\n","# stepmark_col_list.append([['sar_T'], 1, 'dodgerblue', 7])\n","\n","\n","# ------ str to numbcol ------ #\n","nonstep_col_arr = strcol_tonumb(res_df, nonstep_col_list)\n","step_col_arr = strcol_tonumb(res_df, step_col_list)\n","stepmark_col_arr = strcol_tonumb(res_df, stepmark_col_list)\n","\n","col_idx_dict = \\\n","{\n","  \"ohlc_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close']),\n","  \"vp_col_idxs\": get_col_idxs(res_df, ['close', 'volume']),\n","  # \"ohlc_col_idxs\": get_col_idxs(res_df, ['haopen', 'hahigh', 'halow', 'haclose']),  # heikin-ashi ver.\n","  \"nonstep_col_info\": nonstep_col_arr,\n","  \"step_col_info\": step_col_arr,\n","  \"stepmark_col_info\": stepmark_col_arr,\n","  \"ylim_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close', 'dc_upper_H5', 'dc_lower_H5'])  # , 'dc_upper_H', 'dc_lower_H', 'dc_upper_15T', 'dc_lower_15T', 'short_out_{}'.format(strat_version), 'long_out_{}'.format(strat_version)\n","}   # , 'wave_upper_{}'.format(wave_itv2), 'wave_lower_{}'.format(wave_itv2), 'dc_upper_15T', 'dc_lower_15T'"]},{"cell_type":"markdown","metadata":{"id":"E-VwJkNQbGI4"},"source":["### plot"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Roy40BmByyZc"},"outputs":[],"source":["_ = [plot_check_v5(np_df, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir, **col_idx_dict) for param_zip in zip(np_plot_params, np_plot_params[::-1])]"]},{"cell_type":"markdown","metadata":{"id":"MQ8w8nWVXlGj"},"source":["### plot_funcs"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cFt6CeZf4yEk"},"outputs":[],"source":["def plot_check_v5(data, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir=None, **col_idx_dict):\n","  # start_0 = time.time()\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(30, 18))\n","  nrows, ncols = 2, 2\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                         ncols=ncols,\n","                         height_ratios=[3, 1]\n","                         )\n","  for gs_idx, params in enumerate(param_zip):\n","    ax = fig.add_subplot(gs[gs_idx])\n","    iin, iout, pr, ep, tp, entry_idx, exit_idx, open_idx, point1_idx, lvrg, fee, tp_line, out_line, en_tp1, en_out0 = params\n","\n","    # if ep > out_line:  # for tp > ep > out plot_check\n","    #   break\n","\n","    # ------------ add_col section ------------ #\n","    a_data = data[int(iin):int(iout + 1)]\n","    # a_data = data[iin:iout]\n","    # ------ candles ------ #\n","    candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","\n","    # ------ add cols ------ #\n","    [nonstep_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['nonstep_col_info']]\n","    [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","    [stepmark_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['stepmark_col_info']]\n","\n","    # ------ ep, tp + xlim ------ #\n","    try:\n","      eptp_hvline_v5(config, ep, tp, entry_idx, exit_idx, open_idx, point1_idx, tp_line, out_line, en_tp1, en_out0,\n","                    front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, **col_idx_dict)\n","    except Exception as e:\n","      print(\"error in eptp_hvline_v3 :\", e)\n","\n","    #     Todo    #\n","    #     3. outer_price plot 일 경우, gs_idx + nrows 하면 됨\n","\n","    # ------ trade_info ------ #\n","    plt.title(pr_msg.format(entry_idx, exit_idx, pr, lvrg, fee))\n","\n","  if plot_check_dir is None:\n","    plt.show()\n","    print()\n","  else:\n","    fig_name = plot_check_dir + \"/%s.png\" % int(entry_idx)\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","  plt.close()\n","  # print(\"elapsed time :\", time.time() - start_0)\n","\n","  return\n","\n","def eptp_hvline_v5(config, en_p, ex_p, entry_idx, exit_idx, open_idx, point1_idx, tp_line, out_line, en_tp1, en_out0,\n","                   front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, **col_idx_dict):\n","  # ------ get vertical ticks ------ #\n","  entry_tick = int(entry_idx - iin)\n","  exit_tick = entry_tick + int(exit_idx - entry_idx)\n","  open_tick = entry_tick - int(entry_idx - open_idx)\n","  point1_tick = open_tick - int(open_idx - point1_idx)\n","  bias_info_tick = entry_tick + config.tr_set.bias_info_tick\n","\n","  if front_plot == 1:\n","    x_max = open_tick + 20\n","  elif front_plot == 2:\n","    x_max = entry_tick + 20 \n","  elif front_plot == 3:\n","    x_max = exit_tick + 20\n","  elif front_plot == 4:\n","    x_max = bias_info_tick + 20\n","\n","  if (iout - iin) > x_max:\n","    x_margin = x_max * x_margin_mult\n","    plt.xlim(0 - x_margin, x_max + x_margin)\n","  x0, x1 = plt.gca().get_xlim()\n","\n","  # ------------ hlines ------------ #\n","  # ------ entry & exit ------ #\n","  en_xmin = entry_tick / x1\n","  ex_xmin = exit_tick / x1\n","  plt.axhline(en_p, x0, en_xmin, linewidth=2, linestyle='--', alpha=1, color='lime')  # en_p line axhline\n","  plt.text(x0, en_p, 'en_p :\\n {:.3f} \\n epg {}'.format(en_p, config.tr_set.ep_gap), ha='right', va='center', fontweight='bold', fontsize=15)  # en_p line label\n","  plt.axhline(ex_p, ex_xmin, 1, linewidth=2, linestyle='--', alpha=1, color='lime')  # ex_p line axhline (signal 도 포괄함, 존재 의미)\n","  plt.text(x1, ex_p, 'ex_p :\\n {}'.format(ex_p), ha='left', va='center', fontweight='bold', fontsize=15)  # ex_p line label\n","\n","  # ------ tpout_line ------ #\n","  plt.axhline(tp_line, 0.05, 1, linewidth=4, linestyle='-', alpha=1, color='#00ff00')  # ep 와 gap 비교 용이하기 위해 ex_xmin -> 0.1 사용\n","  plt.text(x0, tp_line, 'tpg {}'.format(config.tr_set.tp_gap), ha='right', va='center', fontweight='bold', fontsize=15, color='#00ff00')\n","  plt.axhline(out_line, 0.05, 1, linewidth=4, linestyle='-', alpha=1, color='#ff0000')\n","  plt.text(x0, out_line, 'outg {}'.format(config.tr_set.out_gap), ha='right', va='center', fontweight='bold', fontsize=15, color='#ff0000')\n","\n","  # ------ bias_line ------ #\n","  text_x_pos = (x0 + x1) * 0.1\n","  plt.axhline(en_tp1, 0.2, 1, linewidth=4, linestyle='-', alpha=1, color='#ffffff')\n","  plt.text(text_x_pos, en_tp1, ' en_tp1', ha='right', va='bottom', fontweight='bold', fontsize=15)\n","  plt.axhline(en_out0, 0.2, 1, linewidth=4, linestyle='-', alpha=1, color='#ffffff')\n","  plt.text(text_x_pos, en_out0, ' en_out0', ha='right', va='bottom', fontweight='bold', fontsize=15)\n","\n","  # ------ ylim ------ #\n","  if front_plot:\n","    y_lim_data = a_data[:x_max + 1, col_idx_dict['ylim_col_idxs']]  # +1 for including open_tick\n","  else:\n","    y_lim_data = a_data[:, col_idx_dict['ylim_col_idxs']]\n","  \n","  y_min = y_lim_data.min()\n","  y_max = y_lim_data.max()\n","  y_margin = (y_max - y_min) * y_margin_mult\n","  plt.ylim(y_min - y_margin, y_max + y_margin)\n","\n","  # ------------ vline (open_tick, entry_tick, exit_tick) ------------ #\n","  y0, y1 = plt.gca().get_ylim()\n","  l_data = a_data[:exit_tick + 1, col_idx_dict['ohlc_col_idxs'][2]]  # +1 for including exit_tick\n","  point1_ymax, open_ymax, en_ymax, ex_ymax = [(l_data[tick_] - y0) / (y1 - y0) - .01 for tick_ in [point1_tick, open_tick, entry_tick, exit_tick]]  # -.05 for margin\n","  plt.axvline(point1_tick, 0, point1_ymax, alpha=1, linewidth=2, linestyle='--', color='#ff7722')\n","  plt.axvline(open_tick, 0, open_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')  # 추후, tick 별 세부 정의가 달라질 수 있음을 고려해 multi_line 작성 유지\n","  plt.axvline(entry_tick, 0, en_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  plt.axvline(exit_tick, 0, ex_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  plt.axvline(bias_info_tick, alpha=1, linewidth=2, linestyle='-', color='#ffeb3b')\n","\n","  return"]},{"cell_type":"markdown","metadata":{"id":"q3zisNOTw3jM"},"source":["#### legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fUFdJVrsw78h"},"outputs":[],"source":["_ = [plot_check_v4(np_df, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir, 500, 0.07, 100, **col_idx_dict) for param_zip in zip(np_plot_params, np_plot_params[::-1])]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ESReTMpP7SoO"},"outputs":[],"source":["def plot_check_v4(data, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir=None, vp_range=500, kde_factor=0.05, num_samples=100, **col_idx_dict):\n","  # start_0 = time.time()\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(30, 18))\n","  nrows, ncols = 2, 2\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                         ncols=ncols,\n","                         height_ratios=[3, 1]\n","                         )\n","  for gs_idx, params in enumerate(param_zip):\n","    ax = fig.add_subplot(gs[gs_idx])\n","    iin, iout, pr, ep, tp, entry_idx, exit_idx, open_idx, lvrg, fee, tp_line, out_line, bias_info, bias_thresh = params\n","\n","    # ------------ add_col section ------------ #\n","    iin, iout = int(iin), int(iout)\n","    a_data = data[iin:iout]\n","    # ------ candles ------ #\n","    candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","    \n","    # ------ add cols ------ #\n","    [nonstep_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['nonstep_col_info']]\n","    [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","    [stepmark_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['stepmark_col_info']]\n","\n","    # vp_data = data[iin - vp_range:iin, col_idx_dict['vp_col_idxs']]\n","    # vp_info = [vp_range, vp_data[:, 0], vp_data[:, 1], kde_factor, num_samples]\n","    vp_data = data[iin - vp_range:iin, col_idx_dict['vp_col_idxs']].T\n","    vp_info = [vp_range, *vp_data, kde_factor, num_samples]\n","\n","    # ------ ep, tp + xlim ------ #\n","    eptp_hvline_v4(config, ep, tp, entry_idx, exit_idx, open_idx, tp_line, out_line, bias_info, bias_thresh, \n","                   front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, vp_info, **col_idx_dict)        \n","\n","    #     Todo    #\n","    #     3. outer_price plot 일 경우, gs_idx + nrows 하면 됨\n","\n","    # ------ trade_info ------ #\n","    plt.title(pr_msg.format(entry_idx, exit_idx, pr, lvrg, fee))\n","\n","  if plot_check_dir is None:\n","    plt.show()\n","    print()\n","  else:\n","    fig_name = plot_check_dir +  \"/%s.png\" % int(entry_idx)\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","  plt.close()\n","  # print(\"elapsed time :\", time.time() - start_0)  \n","\n","  return\n","\n","def eptp_hvline_v4(config, en_p, ex_p, entry_idx, exit_idx, open_idx, tp_line, out_line, bias_info, bias_thresh, \n","                   front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, vp_info, **col_idx_dict):\n","  # ------ get vertical ticks ------ #\n","  entry_tick = int(entry_idx - iin)\n","  open_tick = entry_tick - int(entry_idx - open_idx)\n","  exit_tick = entry_tick + int(exit_idx - entry_idx)\n","\n","  if front_plot == 1:\n","    x_max = open_tick\n","  elif front_plot == 2:\n","    x_max = entry_tick\n","  if (iout - iin) > x_max:\n","    x_margin = x_max * x_margin_mult\n","    plt.xlim(0 - x_margin, x_max + x_margin)\n","  x0, x1 = plt.gca().get_xlim()\n","  # ------------ hlines ------------ #\n","  # ------ entry & exit ------ #\n","  en_xmin = entry_tick / x1\n","  ex_xmin = exit_tick / x1\n","  plt.axhline(en_p, x0, en_xmin, linewidth=2, linestyle='--', alpha=1, color='lime')  # en_p line axhline\n","  plt.text(x0, en_p, ' en_p :\\n {}'.format(en_p), ha='right', va='center', fontweight='bold')  # en_p line label\n","  plt.axhline(ex_p, ex_xmin, 1, linewidth=2, linestyle='--', alpha=1, color='lime')  # ex_p line axhline (signal 도 포괄함, 존재 의미)\n","  plt.text(x1, ex_p, ' ex_p :\\n {}'.format(ex_p), ha='left', va='center', fontweight='bold')  # ex_p line label\n","\n","  # ------ tpout_line ------ #\n","  plt.axhline(tp_line, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#00ff00')  # ep 와 gap 비교 용이하기 위해 ex_xmin -> 0.1 사용\n","  plt.text(x0, tp_line, ' %s' % config.tr_set.tp_gap, ha='left', va='center', fontweight='bold')\n","  plt.axhline(out_line, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#ff0000')\n","  plt.text(x0, out_line, ' %s' % config.tr_set.out_gap, ha='left', va='center', fontweight='bold')\n","\n","  # ------ bias_line ------ #\n","  plt.axhline(bias_info, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='dodgerblue')\n","  plt.text(x0, bias_info, ' bias_info', ha='left', va='center', fontweight='bold')\n","  plt.axhline(bias_thresh, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#ff8400')\n","  plt.text(x0, bias_thresh, ' bias_thresh', ha='left', va='center', fontweight='bold')\n","\n","  # ------ volume profile ------ #\n","  vp_range, close, volume, kde_factor, num_samples = vp_info\n","  if iin >= vp_range:\n","    start_0 = time.time()\n","    kde = stats.gaussian_kde(close, weights=volume, bw_method=kde_factor)\n","    kdx = np.linspace(close.min(), close.max(), num_samples)\n","    kdy = kde(kdx)\n","    print(\"kde elapsed_time :\", time.time() - start_0)\n","\n","    kdy_max = kdy.max()\n","    # peaks,_ = signal.find_peaks(kdy)\n","    peaks,_ = signal.find_peaks(kdy, prominence=kdy_max * 0.3)\n","    peak_list = kdx[peaks]   # peak_list\n","    [plt.axhline(peak, linewidth=6, linestyle='-', alpha=1, color='white') for peak in peak_list]\n","    \n","    kdy_ratio = entry_tick / kdy_max # 30 / 0.0001\n","    plt.plot(kdy * kdy_ratio, kdx, color='white')\n","    # plt.plot(pky, pkx, 'bo', color='yellow')\n","\n","  # ------ ylim ------ #\n","  if front_plot:\n","    y_lim_data = a_data[:x_max + 1, col_idx_dict['ylim_col_idxs']]  # +1 for including open_tick\n","  else:\n","    y_lim_data = a_data[:, col_idx_dict['ylim_col_idxs']]\n","  y_min = y_lim_data.min()\n","  y_max = y_lim_data.max()\n","  y_margin = (y_max - y_min) * y_margin_mult\n","  # plt.ylim(y_min - y_margin, y_max + y_margin)\n","\n","  # ------------ vline (open_tick, entry_tick, exit_tick) ------------ #\n","  y0, y1 = plt.gca().get_ylim()\n","  l_data = a_data[:exit_tick + 1, col_idx_dict['ohlc_col_idxs'][2]]  # +1 for including exit_tick\n","  open_ymax, en_ymax, ex_ymax = [(l_data[tick_] - y0) / (y1 - y0) - .01 for tick_ in [open_tick, entry_tick, exit_tick]]  # -.05 for margin\n","  plt.axvline(open_tick, 0, open_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')  # 추후, tick 별 세부 정의가 달라질 수 있음을 고려해 multi_line 작성 유지\n","  plt.axvline(entry_tick, 0, en_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  plt.axvline(exit_tick, 0, ex_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","\n","  return"]},{"cell_type":"markdown","metadata":{"id":"X0FsT-8FZRti"},"source":["### sync_check"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"inQ6f-CDZYkr"},"outputs":[],"source":["save_plot = 0\n","\n","open_idx_range = reversed(range(0, len(res_df), 1000))\n","plot_range = 100\n","\n","x_max = 400\n","\n","inversion = 0\n","hedge = 0\n","\n","\n","if save_plot:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".ftr\", \"\")\n","  try:\n","    os.mkdir(plot_check_dir)\n","  except:\n","\n","    #     remove existing dir   #\n","    shutil.rmtree(plot_check_dir)\n","    print(plot_check_dir, 'removed !')\n","    os.mkdir(plot_check_dir)\n","    # pass\n","    \n","\n","prev_plotsize = 30\n","post_plotsize = 20\n","\n","\n","\n","h_candle_intv1 = 15\n","h_candle_intv2 = 60\n","if 'hopen_{}'.format(h_candle_intv2) not in res_df.columns:\n","  res_df = h_candle(res_df, h_candle_intv1)\n","  res_df = h_candle(res_df, h_candle_intv2)\n","\n","res_df[\"ma30_1m\"] = res_df['close'].rolling(30).mean()\n","res_df[\"ma60_1m\"] = res_df['close'].rolling(60).mean()\n","\n","res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line)\n","# res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=1, use_dtk_line=1)\n","# break\n","\n","rtc_list = [\"short_tp_1_{}\".format(strat_version), \"short_tp_gap_{}\".format(strat_version), \"long_tp_1_{}\".format(strat_version), \"long_tp_gap_{}\".format(strat_version)]\n","# h_rtc_list = [\"h_short_tp_1\", \"h_short_tp_gap\", \"h_long_tp_1\", \"h_long_tp_gap\"]\n","dtk_list = [\"short_dtk_1_{}\".format(strat_version), \"short_dtk_gap_{}\".format(strat_version), \"long_dtk_1_{}\".format(strat_version), \"long_dtk_gap_{}\".format(strat_version),\n","            # \"short_dtk_1_line\", \"short_dtk_gap_line\", \"long_dtk_1_line\", \"long_dtk_gap_line\",\n","            \"short_dtk_plot_1\", \"short_dtk_plot_gap\", \"long_dtk_plot_1\", \"long_dtk_plot_gap\"]\n","dc_v2_list = ['dc_upper_v2_{}'.format(strat_version), 'dc_lower_v2_{}'.format(strat_version)]\n","\n","\n","ohlc_list = ['open', 'high', 'low', 'close'] # + basic_st_list\n","hcandle_list = ['hopen_%s' % h_candle_intv1, 'hclose_%s' % h_candle_intv1, 'hopen_%s' % h_candle_intv2, 'hclose_%s' % h_candle_intv2]\n","# hcandle_list = ['hopen_%s' % h_candle_intv1, 'hclose_%s' % h_candle_intv1, 'hhigh_%s' % h_candle_intv2, 'hlow_%s' % h_candle_intv2]\n","\n","# --------------------- dc & bb level --------------------- #\n","dc_interval = '1m'\n","hdc_interval = '5m'\n","hhdc_interval = '15m'\n","\n","st_list = ['st_base_%s' % hhdc_interval, 'st_upper_%s' % hhdc_interval, 'st_lower_%s' % hhdc_interval]\n","\n","dc_list = ['dc_upper_%s' % dc_interval, 'dc_lower_%s' % dc_interval]\n","hdc_list = ['dc_upper_%s' % hdc_interval, 'dc_lower_%s' % hdc_interval]\n","hhdc_list = ['dc_upper_%s' % hhdc_interval, 'dc_lower_%s' % hhdc_interval]\n","\n","bb_interval = dc_interval\n","hbb_interval = hdc_interval\n","hhbb_interval = hhdc_interval\n","\n","bb_list = ['bb_upper_%s' % bb_interval, 'bb_lower_%s' % bb_interval]\n","hbb_list = ['bb_upper_%s' % hbb_interval, 'bb_lower_%s' % hbb_interval]\n","hhbb_list = ['bb_upper_%s' % hhbb_interval, 'bb_lower_%s' % hhbb_interval]\n","\n","bbwp_list = ['bbwp', 'bbwp_ma']\n","\n","\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1']\n","senkoub_list = ['senkou_b1']\n","\n","sar_list = ['sar_3m', 'sar_5m', 'sar_15m']\n","\n","ma_list = ['ma30_1m', 'ma60_1m']\n","sma_list = ['sma_1m']\n","\n","ema_list = ['ema_5m']\n","# cb_list = ['cloud_bline_1m']\n","cb_list = ['cloud_bline_30m']\n","# cb_list = ['cloud_bline_5m']\n","\n","\n","\n","# -------------- under price phase -------------- #\n","# macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3']\n","# trix_list = ['trix1', 'trix2', 'trix3']\n","# stoch_list = ['stoch_5m']\n","# fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","# cctbbo_list = ['cctbbo']\n","# emaroc_list = ['ema_roc']\n","rsi_list = ['rsi_%s' % config.loc_set.point.exp_itv] \n","cci_list = ['cci_%s' % config.loc_set.point.exp_itv] \n","\n","\n","# -------------- summation -------------- #\n","# input_colname = ohlc_list + basic_st_list + pline_list + bb_list + hbb_list + sma_list + cb_list + stoch_list + sar_list + dc_list\n","input_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + hhdc_list + dtk_list + dc_v2_list + rsi_list + ema_list + ma_list + st_list# + cci_list\n","\n","# yrange_colname = ohlc_list + basic_st_list + pline_list # currently just used for ymin, ymax\n","yrange_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + hhdc_list + dc_v2_list + ema_list # currently just used for ymin, ymax\n","yrange_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + dc_v2_list + ema_list # currently just used for ymin, ymax\n","\n","\n","\n","odd_cnt = 0\n","obj_i = -1\n","rev_obj_i = 0\n","\n","#   지금, continue 발생시 true / false idx 가 같이 상승하는 문제\n","\n","# while 1:\n","for open_idx in open_idx_range:\n","\n","  # if obj_i >= len_obj or rev_obj_i >= len_obj:\n","  #   break\n","\n","  # if odd_cnt % 2 == 1 and tf_plot: #  loss plot 을 채워야하는 상황\n","  #   rev_obj_i += 1\n","\n","  # else:\n","  #   obj_i += 1\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","  \n","\n","  odd_cnt += 1\n","\n","  # break\n","\n","  print(\"open_idx :\", open_idx)\n","  \n","  plot_df = res_df.iloc[open_idx - prev_plotsize:open_idx + plot_range + post_plotsize][input_colname]\n","  \n","  odds = 1 if odd_cnt % 2 == 1 else 2\n","  if odds == 1:\n","\n","    plt.style.use('dark_background')\n","\n","    fig = plt.figure(figsize=(26, 18))\n","    \n","    gs = gridspec.GridSpec(nrows=2, # row 몇 개 \n","                        ncols=2, # col 몇 개 \n","                        height_ratios=[3, 1]\n","                        )\n","    \n","  ax = fig.add_subplot(gs[odds - 1])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='#26a69a', colordown='#ef5350', alpha=0.5)\n","\n","  # ---------- h_candle ---------- #\n","  alpha = 1\n","  lw = 1\n","  for cd_i, candle in enumerate(hcandle_list):\n","\n","    if cd_i == 2:\n","      lw = 2      \n","    plt.step(np.arange(len(plot_df)), plot_df[candle].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","\n","  # alpha = 0.1\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['hclose_60'].values, plot_df['hopen_60'].values, \n","  #                     where=1, facecolor='#ffffff', alpha=alpha)  \n","  \n","\n","   # --------- ma --------- #\n","  alpha = 1\n","  lw = 2\n","  for ma_i, item in enumerate(ma_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","   # --------- ema --------- #\n","  alpha = 1\n","  lw = 4\n","  for sm_i, item in enumerate(ema_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","    \n","   # --------- st --------- #\n","  alpha = 1\n","  lw = 2\n","  for sm_i, item in enumerate(st_list):\n","      plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#00ff00', linewidth=lw)\n","\n","  # ---------------------- dc_v2 ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(dc_v2_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","  # # ---------------------- dc ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(dc_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","  # # ---------------------- hdc ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(hdc_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#e65100', linewidth=lw)\n","\n","  # # ---------------------- hhdc ---------------------- #\n","  # alpha = 1\n","  # lw = 4\n","  # for sm_i, item in enumerate(hhdc_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#c2185b', linewidth=lw)\n","\n","\n","  # # ---------------------- bb ---------------------- #\n","  # alpha = 1\n","  # lw = 1\n","  # for sm_i, item in enumerate(bb_list):\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","\n","  # alpha = 0.2\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % bb_interval].values, plot_df['bb_lower_%s' % bb_interval].values, \n","  #                     where=plot_df['bb_upper_%s' % bb_interval].values >= plot_df['bb_lower_%s' % bb_interval].values, facecolor='#ffffff', alpha=alpha)   \n","\n","  # # ---------------------- hbb ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(hbb_list):\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ff00ff', linewidth=lw)\n","  \n","  # alpha = 0.2\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % hbb_interval].values, plot_df['bb_lower_%s' % hbb_interval].values, \n","  #                     where=plot_df['bb_upper_%s' % hbb_interval].values >= plot_df['bb_lower_%s' % hbb_interval].values, facecolor='#ff00ff', alpha=alpha) \n","  \n","  # # ---------------------- hhbb ---------------------- #\n","\n","  # alpha = 1\n","  # lw = 4\n","  # for sm_i, item in enumerate(hhbb_list):\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#3179f5', linewidth=lw)\n","  \n","  # alpha = 0.2\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % hhbb_interval].values, plot_df['bb_lower_%s' % hhbb_interval].values, \n","  #                     where=plot_df['bb_upper_%s' % hhbb_interval].values >= plot_df['bb_lower_%s' % hhbb_interval].values, facecolor='#3179f5', alpha=alpha) \n","  \n","  # ------------------- dtk_line (old, tp_line) ------------------- #\n","  \n","  # alpha = 1\n","  # lw = 2\n","  # rtc_ratio_list = [config.loc_set.zone.dt_k]\n","  \n","  # for rtc_k in rtc_ratio_list:    \n","  #   # plt.step(np.arange(len(plot_df)), plot_df['short_dtk_1_line'].values - plot_df['short_dtk_gap_line'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['long_dtk_1_line'].values + plot_df['long_dtk_gap_line'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","\n","  # hy_min = np.min(plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * rtc_k)\n","  # hy_max = np.max(plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * rtc_k)  \n","\n","  # alpha = 1\n","  # lw = 4\n","  # # h_rtc_ratio_list = [config.loc_set.zone.dt_k]\n","  # h_rtc_ratio_list = [config.loc_set.zone.zone_dt_k]\n","  # # h_rtc_ratio_list = [0.272, 0.36, 0.4, 0.5]\n","  \n","  # for h_rtc_k in h_rtc_ratio_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df['short_dtk_plot_1'].values - plot_df['short_dtk_plot_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['long_dtk_plot_1'].values + plot_df['long_dtk_plot_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['h_short_tp_1'].values - plot_df['h_short_tp_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['h_long_tp_1'].values + plot_df['h_long_tp_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","\n","  # # hy_min = np.min(plot_df['short_dtk_plot_1'].values - plot_df['short_dtk_plot_gap'].values * h_rtc_k)\n","  # # hy_max = np.max(plot_df['long_dtk_plot_1'].values + plot_df['long_dtk_plot_gap'].values * h_rtc_k)  \n","\n","  # ------------- y lim ------------- #  \n","  y_max = max(np.max(plot_df[yrange_colname]))\n","  y_min = min(np.min(plot_df[yrange_colname]))\n","  # y_max = max(y_max, y_max_)\n","  # y_min = min(y_min, y_min_)\n","  \n","  # hy_min = np.min(plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * 0.36)\n","  # hy_max = np.max(plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * 0.36)  \n","  # y_max = max(y_max, y_max_, hy_max)\n","  # y_min = min(y_min, y_min_, hy_min)\n","\n","  if np.isnan(y_max) or np.isnan(y_min):\n","    print('continued in yminmax')\n","    continue\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","\n","  plt.ylim(y_min, y_max)\n","\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  #           rsi          #    \n","  plt.subplot(gs[odds + 1])\n","  alpha = 1\n","  for rsi_ in rsi_list:\n","    plt.step(np.arange(len(plot_df)), plot_df[rsi_].values, 'g', alpha=alpha)\n","    # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","    alpha -= 0.2\n","  plt.axhline(50, linestyle='--')\n","  plt.axhline(50 + config.loc_set.point.osc_band, linestyle='--')\n","  plt.axhline(50 - config.loc_set.point.osc_band, linestyle='--')\n","  \n","  plt.axvline(prev_plotsize, linestyle='--')\n","  \n","  #           cci          #    \n","  # plt.subplot(gs[odds + 1])\n","  # alpha = 1\n","  # for cci_ in cci_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cci_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axhline(config.loc_set.point.osc_band, linestyle='--')\n","  # plt.axhline(-config.loc_set.point.osc_band, linestyle='--')\n","  \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","\n","\n","  if len(plot_df) > x_max:\n","    x_margin = x_max / 20\n","    plt.xlim(0 - x_margin, x_max + x_margin)\n","\n","\n","  if not save_plot:\n","    if odds == 2:\n","      plt.show()\n","      plt.close()\n","  \n","  else:\n","    # ---------- save mode ---------- #\n","    fig_name = plot_check_dir +  \"/%s.png\" % t_i\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","\n","  # plt.close()  \n","  print()\n","\n","  # break\n"]},{"cell_type":"markdown","metadata":{"id":"13a-U32Uy50I"},"source":["### brief np_pr survey"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"L9LdjV2uUWnp"},"outputs":[],"source":["# plot_pr_list[:100]\n","plt.plot(np_pr)\n","plt.axhline(1)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"TBE0l6dHRYrE"},"source":["### close & pr comp."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":877},"executionInfo":{"elapsed":1436,"status":"ok","timestamp":1636355589887,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"-txULkhXRbz5","outputId":"7cda9fc7-4a4e-4c52-ffa3-a974b5f7c66f"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 3 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 3 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]}],"source":["#     chunky survey 필요함    #\n","chunk_size = 50000\n","\n","sync_pr = np.ones(len(res_df))\n","sync_tr = np.zeros(len(res_df))\n","# sync_tr = np.empty(len(res_df))\n","# sync_tr[:] = np.nan\n","\n","max_tr = np.max(tp_ratio_list)\n","min_tr = np.min(tp_ratio_list)\n","\n","for ck_i in range(0, len(res_df), chunk_size):\n","\n","  chunked_df = res_df.iloc[ck_i:ck_i + chunk_size]\n","  # break\n","\n","  for pr_, eptp_idx, tr_ in zip(pr_list[ck_i:ck_i + chunk_size], trade_list[ck_i:ck_i + chunk_size], tp_ratio_list[ck_i:ck_i + chunk_size]):\n","    # print(pr_, eptp_idx)\n","    sync_pr[eptp_idx[-1][0]] = pr_\n","    sync_tr[eptp_idx[-1][0]] = tr_\n","    # break\n","\n","  chunked_pr = sync_pr[ck_i:ck_i + chunk_size]\n","  chunked_tr = sync_tr[ck_i:ck_i + chunk_size]\n","  chunked_tr = np.where(np.isnan(chunked_tr), pd.Series(chunked_tr).shift(1), chunked_tr)\n","\n","  # plt.figure(figsize=(8, 6))\n","\n","  plt.subplot(311)\n","  plt.plot(np.arange(len(chunked_df)), chunked_df['close'])\n","  # plt.show()\n","\n","  plt.subplot(312)\n","  plt.plot(np.cumprod(chunked_pr))\n","  \n","  plt.subplot(313)\n","  plt.plot(chunked_tr)\n","  plt.ylim(min_tr + 0.5 * (max_tr - min_tr), max_tr)\n","  \n","  plt.show()\n","  print()\n"]},{"cell_type":"markdown","metadata":{"id":"Qys2Bw5Ou3u9"},"source":["### plot indi. legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pi5ntOOVu6JT"},"outputs":[],"source":["\n","  # ---------------------- ma ---------------------- #\n","   # --------- ema --------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(ema_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  #   # --------- sma --------- #\n","  # alpha = 1\n","  # for sm_i, sma in enumerate(sma_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 4\n","  #   plt.step(np.arange(len(plot_df)), plot_df[sma].values, alpha=alpha, color='#e91e63', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  \n","  # ---------------------- cb ---------------------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(cb_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#5b9cf6', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","\n","  \n","  # ---------------------- sar ---------------------- #\n","  # alpha = 1\n","  # markersize = 5\n","  # for sar in sar_list:\n","  #   plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","  #   markersize += 1\n","  #   alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  # alpha = 0.7\n","  # for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","  #                     where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","  #                     where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","  #   alpha -= 0.05\n","  \n","\n","\n","  # ---------------------- outer price indi. ---------------------- #\n","  #           macd          #\n","  # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","    \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for stoch_ in stoch_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[stoch_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(stoch_upper, linestyle='--')\n","  # plt.axhline(stoch_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- cctbbo ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for cctbbo in cctbbo_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cctbbo].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(cctbbo_upper, linestyle='--')\n","  # plt.axhline(cctbbo_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- ema_roc ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for emaroc in emaroc_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[emaroc].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","  \n","  # ---------- bbw ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for bbwp_ in bbwp_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[bbwp_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(bbwp_thresh, linestyle='--')\n","\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n"]},{"cell_type":"markdown","metadata":{"id":"cj9X6S1jJjER"},"source":["### plot nontp case"]},{"cell_type":"markdown","metadata":{"id":"tApzvz_gK9lR"},"source":["## legacy"]},{"cell_type":"markdown","metadata":{"id":"FaRGwR4NEop2"},"source":["### shifting"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"a8aYsjEgQnGF"},"outputs":[],"source":["org_res_df = res_df.copy()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":291,"status":"ok","timestamp":1626515312874,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"RF3RM2G2RCb1","outputId":"ba8f6a75-d4df-4f85-cd0f-190935341f7a"},"outputs":[{"name":"stdout","output_type":"stream","text":["                            open     high  ...  min_upper  max_lower\n","2021-06-30 23:55:59.999  0.27223  0.27281  ...   0.272145    0.27005\n","2021-06-30 23:56:59.999  0.27274  0.27290  ...   0.272145    0.27005\n","2021-06-30 23:57:59.999  0.27246  0.27257  ...   0.272523    0.27021\n","2021-06-30 23:58:59.999  0.27166  0.27183  ...   0.272523    0.27021\n","2021-06-30 23:59:59.999  0.27144  0.27211  ...   0.272523    0.27021\n","\n","[5 rows x 37 columns]\n","                            open     high  ...  min_upper  max_lower\n","2021-06-30 23:55:59.999  0.27223  0.27281  ...   0.272523    0.27021\n","2021-06-30 23:56:59.999  0.27274  0.27290  ...        NaN        NaN\n","2021-06-30 23:57:59.999  0.27246  0.27257  ...        NaN        NaN\n","2021-06-30 23:58:59.999  0.27166  0.27183  ...        NaN        NaN\n","2021-06-30 23:59:59.999  0.27144  0.27211  ...        NaN        NaN\n","\n","[5 rows x 37 columns]\n"]}],"source":["#         refresh res_df      #\n","res_df = org_res_df.copy()\n","print(org_res_df.tail(5))\n","\n","# break\n","\n","\n","shift_size = -4\n","# shift_size = -1\n","# shift_size = -7\n","# shift_size = +3\n","\n","res_df['min_upper'] = res_df['min_upper'].shift(shift_size)\n","res_df['max_lower'] = res_df['max_lower'].shift(shift_size)\n","res_df['minor_ST1_Trend'] = res_df['minor_ST1_Trend'].shift(shift_size)\n","res_df['minor_ST2_Trend'] = res_df['minor_ST2_Trend'].shift(shift_size)\n","res_df['minor_ST3_Trend'] = res_df['minor_ST3_Trend'].shift(shift_size)\n","res_df['middle_line'] = res_df['middle_line'].shift(shift_size)\n","\n","print(res_df.tail(5))"]},{"cell_type":"markdown","metadata":{"id":"2gxvme1PC6ha"},"source":["### load model"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5831,"status":"ok","timestamp":1628862368878,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"dtYdAuSsC72_","outputId":"e8dccc53-aaa7-4bab-ed8d-753f634c08d6"},"outputs":[{"name":"stdout","output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/resnet/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5\n","94773248/94765736 [==============================] - 1s 0us/step\n"]}],"source":["# model_name = 'inner_tick_cnnreg_lscalemm_prefee_gpu_%s_%s_%s_%s_%s.h5'\n","\n","# model = tf.keras.models.load_model(ckpt_path + model_name)\n","\n","from tensorflow.keras.applications.resnet50 import ResNet50\n","\n","model = ResNet50(weights='imagenet', include_top=False)\n","# model.summary()\n"]},{"cell_type":"markdown","metadata":{"id":"5la6usMOFzkX"},"source":["#### gen selected vector"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oQk3-jbKF8FB"},"outputs":[],"source":["def min_max_scale(npy_x):\n","\n","  return (npy_x - np.min(npy_x)) / (np.max(npy_x) - np.min(npy_x))\n","\n","def expand_dims(npy_x):\n","\n","  row, col = npy_x.shape\n","  npy_x2 = np.array(npy_x).reshape(-1, row, col, 1).astype(np.float32)\n","  # input_x = np.array(data_x).reshape(-1, row, col).astype(np.float32)\n","\n","  #     1c to 3c    #\n","  npy_x3 = npy_x2 * np.ones(3, dtype=np.float32)[None, None, None, :]\n","\n","  return npy_x3\n","\n","\n","def vector_dist(f1, f2):\n","  return np.linalg.norm(f1-f2)\n","\n","\n","\n","# ------------------------ params ------------------------  #\n","selected_i = 500\n","input_size = 100\n","\n","\n","\n","#   1. 선택된 인덱스를 입력받았을 때, input generating 형태만 만들어놓고,     #\n","#   1-1. input cols 필요함    #\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower']\n","# senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","# senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","\n","sma_list = ['sma']\n","\n","#     -------------- outer price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","cctbbo_list = ['cctbbo']\n","\n","selected_price_colname = basic_list + senkoua_list + senkoub_list + sar_list\n","selected_outprice_colname = [macd_list]\n","\n","\n","#         global scaling for outer price data       #\n","#         1. nan 처리       #\n","\n","# # print((np.isnan(df.values)))\n","# print(\"np.sum(np.isnan(df.values), axis=0) :\", np.sum(np.isnan(df.values), axis=0))\n","\n","# max_nan = np.max(np.sum(np.isnan(df.values), axis=0))\n","# # print(max_nan)\n","\n","# df = df.iloc[max_nan:-max_nan]\n","\n","# total_gdata = []\n","# for g_col in selected_outprice_colname:\n","\n","#   temp_data = min_max_scale(res_df[g_col])\n","#   total_gdata.append(temp_data)\n","\n","\n","\n","#   1-2. cols 에 따른, scaling method 구분함    #\n","onprice_input_x = min_max_scale(res_df[selected_price_colname].iloc[selected_i - input_size:selected_i].values)\n","print(onprice_input_x.shape)\n","\n","\n","#   2. plot_check 에서 본인이 원하는 shape 의 인덱스를 선택   #\n","#   3. vertorize, \n","#   3-1. input generator 를 이용해 entry signal 발생할 때마다 dist 비교 진행    #\n","re_onprice_input_x = expand_dims(onprice_input_x)\n","print(re_onprice_input_x.shape)\n","      \n","# break\n","\n","selected_vector = model.predict(re_onprice_input_x, verbose=1)\n","print(selected_vector.shape)"]},{"cell_type":"markdown","metadata":{"id":"OJqkmkpsLCYC"},"source":["### tr_tresh calc"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gcpo4MGd9Wm4"},"outputs":[],"source":["res_wr = 0.6\n","# tr_thresh = 1\n","# tr_thresh = ((1 - res_wr) / res_wr) ** 0.5\n","tr_thresh = ((1 - res_wr) / res_wr) + 0.01\n","# tr_thresh = 2.6\n","print(\"res_wr :\", res_wr)\n","print(\"tr_thresh :\", tr_thresh)\n","\n","\n","#   단리    #\n","trade_num = 1000\n","asset = 1 # thousand USDT\n","test_loss_gap = 0.95  # fee adjusted\n","test_pr_gap = 1 + (1 - test_loss_gap) * tr_thresh\n","\n","test_loss_cnt = trade_num * (1 - res_wr)\n","test_pr_cnt = trade_num * res_wr\n","\n","test_trade_list = [test_pr_gap] * int(test_pr_cnt) + [test_loss_gap] * int(test_loss_cnt)\n","random.shuffle(test_trade_list)\n","# print(\"len(test_trade_list) :\", len(test_trade_list))\n","print(test_trade_list[:10])\n","print()\n","\n","# print(\"%.5f\" % np.cumprod(test_trade_list)[-1])\n","for tr_thresh_ in np.arange(1, 3, 0.2):\n","  if (1 + (1 - test_loss_gap) * tr_thresh_) ** test_pr_cnt * test_loss_gap ** test_loss_cnt > 1:\n","    break\n","print(\"복리를 위한 tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumprod(test_trade_list)[-1] :\", np.cumprod(test_trade_list)[-1])\n","print(\"total_pr : \", np.cumprod(test_trade_list)[-1])\n","print()\n","#   복리 tr_thresh  #\n","#   1. trade_num 에 영향 받지 않음\n","#   2. loss_gap 에 비례함\n","\n","for tr_thresh_ in np.arange(1, 3, 0.01):\n","  if ((1 - test_loss_gap) * tr_thresh_) * test_pr_cnt + (test_loss_gap - 1) * test_loss_cnt > 0:\n","    break\n","np_test_trade = np.array(test_trade_list) - 1\n","print(np_test_trade[:10])\n","# print(\"%.3f\" % )\n","print(\"단리를 위한 tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumsum(np_test_trade)[-1] :\", np.cumsum(np_test_trade)[-1])\n","print(\"total_pr : \", 1 + np.cumsum(np_test_trade)[-1])\n"]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":["VdukVo5-Suzj","Bw5JibDKSuzj","Pe0QpnORSuzk","E0n53hflJbnp","MlFkpO1MSuzl","t1E_eAyPSuzm","nUs4fjVHSuzl","WVAKq3i8Suzm","L7l5CTJfSuzn","x_XGJqBi8Jex","epgS5Dksu-HX","x2yj2SwAXDLp","14chOHeXh6JD","1MNVIExLULhJ","xpyP5t8Ht_pE","mScdfR9hmjVu","xivLUsSGC4VF","aT8AXh50ZLVL","_blyFhQJUd5X","8b4SbvPrAPR1","X0FsT-8FZRti","13a-U32Uy50I","TBE0l6dHRYrE","Qys2Bw5Ou3u9","tApzvz_gK9lR","2gxvme1PC6ha","5la6usMOFzkX","OJqkmkpsLCYC"],"name":"stem3_5_vec_backi2(0418_on3_9).ipynb의 사본","toc_visible":true,"provenance":[],"authorship_tag":"ABX9TyNIJAQznQX12APg0oIOM39a"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}