{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"6rmQpzEGXfCw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1663111569304,"user_tz":-540,"elapsed":28716,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"2842e3c9-dbd4-4827-dd0d-c90d2141eeab"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","import os, sys\n","\n","current_path = '/content/drive/My Drive/Colab Notebooks/JnQ/'\n","\n","os.chdir(current_path)\n","\n","strat_pkg = 'IDE'\n","\n","mpl_finance_path = '/content/drive/My Drive/Colab Notebooks/JnQ/mpl_finance'\n","ta_lib_path = '/content/drive/My Drive/Colab Notebooks/JnQ/ta_lib'\n","\n","if mpl_finance_path not in sys.path:\n","\n","  try:\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ')\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ/{}'.format(strat_pkg))\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ/funcs')\n","    sys.path.insert(0, mpl_finance_path)\n","    sys.path.insert(0, ta_lib_path)\n","    \n","  except Exception as e:\n","    print(e)"]},{"cell_type":"markdown","metadata":{"id":"8uqYv5StTazo"},"source":["# requirements"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"9qGt60DKTZmf","executionInfo":{"status":"ok","timestamp":1663111579518,"user_tz":-540,"elapsed":7055,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# !pip install zigzag --target=$'/content/drive/My Drive/Colab Notebooks/JnQ/zigzag'\n","# !pip install talib-binary --target=$'/content/drive/My Drive/Colab Notebooks/JnQ/ta_lib'\n","# !pip install findiff\n","\n","# import nvstrings, nvcategory, cudf\n","# import cuml\n","# import cudf\n","\n","import os\n","import talib\n","from funcs.funcs_idep import *\n","from funcs.funcs_duration_v2 import *\n","from funcs.funcs_plot_check import *\n","from funcs.funcs_pairing import *\n","# from funcs.funcs_ide import *\n","# from funcs.funcs_indicator_candlescore import *\n","from funcs.funcs_indicator import *\n","from funcs.funcs_trader import *\n","from ast import literal_eval\n","import logging\n","import importlib\n","\n","import mpl_finance as mf\n","import matplotlib.pyplot as plt\n","from matplotlib import gridspec\n","# from zigzag import *\n","# from tqdm.notebook import tqdm\n","\n","# import IPython\n","# import IPython.display\n","\n","import numpy as np\n","# import jax.numpy as np\n","import pandas as pd\n","# import seaborn as sns\n","# import tensorflow as tf\n","# from scipy import stats, signal\n","\n","import pickle\n","import shutil\n","import json\n","from easydict import EasyDict\n","import copy\n","\n","import datetime\n","from datetime import datetime\n","import random\n","import time\n","# import warnings\n","\n","# warnings.simplefilter(\"ignore\", category=RuntimeWarning)\n","\n","np.seterr(invalid=\"ignore\")\n","np.set_printoptions(suppress=True)\n","np.set_printoptions(linewidth=2000) \n","\n","pd.set_option('mode.chained_assignment',  None)\n","\n","pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)"]},{"cell_type":"markdown","metadata":{"id":"Ic1mfmwWCIBu"},"source":["# makeset - with to_htf dataframes"]},{"cell_type":"markdown","metadata":{"id":"AUSBU7T8Suzi"},"source":["## sync_check_make"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QmhLikYlSuzi"},"outputs":[],"source":["def sync_check_make(df):\n","\n","    make_itv_list = ['3T', '5T', '15T', '30T', 'H', '4H', 'D']\n","    offset_list = ['1h', '1h', '1h', '1h', '1h', '1h', '9h']\n","\n","    assert len(make_itv_list) == len(offset_list), \"length of itv & offset_list should be equal\"\n","        \n","    htf_df_list = [to_htf(df, itv_=itv_, offset=offset_) for itv_, offset_ in zip(make_itv_list, offset_list)]\n","\n","    df_3T, df_5T, df_15T, df_30T, df_H, df_4H, df_D = htf_df_list\n","\n","    for htf_df in htf_df_list:\n","      print(\"{} -> \".format(pd.infer_freq(htf_df.index)), htf_df.tail(1))\n","\n","    # heikinashi_v2(res_df_)\n","    # h_candle_v3(df, df_5T, '5T')\n","    # df = h_candle_v4(df, df_5T)\n","    # df = h_candle_v4(df, df_15T)\n","    # df = h_candle_v4(df, df_30T)\n","    # df = h_candle_v4(df, 'D')\n","\n","    # df = candle_pattern_pkg(df, df_5T)\n","    # df = candle_pattern_pkg(df, df_30T)\n","    # df = candle_pattern_pkg(df, df_H)\n","    # df = candle_pattern_pkg(df, df_4H)\n","    \n","    # --------------- stochastic --------------- #\n","    # df = stoch_v2(df)\n","    # df_5T['stoch'] = stoch(df_5T, 13, 3, 3)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","    # print(\"stoch phase done\")\n","\n","    # --------------- ma --------------- #  \n","    # df = ma(df, 60)\n","    # print(\"ma phase done\")\n","\n","    # df = macd_hist(df, 5, 35, 15)\n","    # print(\"macd_hist phase done\")\n","    \n","    # df = enough_space(df, '15T', 1)\n","    \n","    # --------------- dc --------------- #  \n","    # dc_period = 20\n","    # df = donchian_channel_v4(df, dc_period)\n","    # df = dc_line(df, df_5T, '5T')  # join 사용시에만 return df 허용함\n","    # df = dc_line(df, df_15T, '15T')\n","    # df = dc_line_v2(df, df_H, 'H', dc_period=5)\n","\n","    # df = dc_line_v4(df, df, dc_period=10)\n","    # df = dc_line_v4(df, df, dc_period=20)\n","    # df = dc_line_v4(df, df, dc_period=100)\n","    # df = dc_line_v4(df, df_5T, dc_period=20)\n","    # df = dc_line_v4(df, df_15T, dc_period=20)\n","    # df = dc_line_v4(df, df_H, dc_period=20)\n","    # df = dc_line_v4(df, df_4H, dc_period=20)\n","    # print(\"dc phase done\")\n","\n","    # df_5T = cci_v2(df_5T, 20)\n","\n","    df_5T = tc_cci(df_5T, 20)\n","\n","    df = df.join(to_lower_tf_v2(df, df_5T, [-3, -2, -1]), how='inner')\n","\n","    # --------------- bb --------------- #  \n","    bb_period = 100\n","\n","    # upper, base, lower = talib.BBANDS(res_df_.close, timeperiod=20, nbdevup=1, nbdevdn=1, matype=0)\n","    \n","    # df = bb_width_v3(df, period=60, multiple=1)\n","    # df = bb_line(df, df_5T, '5T')\n","    \n","    # df = bb_line_v3(df, df_15T, 60)\n","    \n","    # df = bb_line_v3(df, df, bb_period)\n","    # df = bb_level_v2(df, 'T', bb_period)\n","    # print(\"bb phase done\")\n","\n","    c_itv = '5T'\n","\n","    # df =  wick_ratio(df, c_itv)\n","    # df =  wick_ratio(df, c_itv)\n","\n","    bb_itv= 'T'\n","\n","    # df = candle_range_ratio(df, c_itv, bb_itv, bb_period)\n","    # # candle_pumping_ratio(df, c_itv, bb_itv, bb_period)\n","\n","    dc_itv= '15T'\n","    dc_period = 4\n","    # df = candle_pumping_ratio_v2(df, c_itv, dc_itv, dc_period)\n","    # print(\"candle_pumping_ratio_v2 phase done\")\n","\n","    # df = dc_over_body_ratio(df, c_itv, dc_itv, dc_period)\n","    # print(\"dc_over_body_ratio phase done\")\n","\n","    # df = body_rel_ratio(df, c_itv)\n","    # print(\"body_rel_ratio phase done\")\n","\n","    # --------------- cbline --------------- #    \n","    # cloud_bline(df_3T, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_3T, [-1]), how='inner')\n","    # # cloud_bline(df_5T, 20)\n","    # # df = df.join(to_lower_tf_v2(df, df_5T, [-1]), how='inner')\n","    # cloud_bline(df_15T, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_15T, [-1]), how='inner')\n","    # cloud_bline(df_30T, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_30T, [-1]), how='inner')\n","    # cloud_bline(df_H, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_H, [-1]), how='inner')\n","    # cloud_bline(df_4H, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_4H, [-1]), how='inner')\n","\n","    # print(\"cbline phase done\")\n","\n","\n","\n","    # --------------- sd_dc --------------- #\n","    # df = sd_dc(df, 20, 40)\n","    # df = sd_dc(df, 20, 20)\n","    # df = sd_dc(df_5T, 20, 40, df)\n","    # df = sd_dc(df_H, 20, 40, df)\n","\n","    # print(\"sd_dc phase done\")\n","\n","    # --------------- imb_ratio --------------- #\n","    # imb_ratio(df, '5T')\n","    # imb_ratio_v3(df, \"5T\")\n","    # imb_ratio_v4(df, \"5T\")\n","\n","    # imb_ratio(df, 'H')\n","    # imb_ratio_v2(df, '5T')\n","    \n","    # print(\"imb_ratio phase done\")\n","\n","    # --------------- rel_abs_ratio --------------- #\n","    # rel_abs_ratio(df, '5T', norm_period=120)\n","\n","    # --------------- normalize data --------------- #\n","    # itv = 'T'\n","    # lb_period = 15\n","    # target_col = 'close_{}{}'.format(itv, lb_period)\n","    # target_data = df['close'].diff(lb_period).to_numpy()\n","    # norm_data(df, target_data, target_col)    \n","    # print(\"normalize data phase done !\")\n","\n","    # --------------- lucid sar --------------- #\n","    # lucid_sar_v2(df)\n","    # lucid_sar_v2(df_3T)\n","    # df = df.join(to_lower_tf_v2(df, df_3T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_5T)\n","    # df = df.join(to_lower_tf_v2(df, df_5T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_15T)\n","    # df = df.join(to_lower_tf_v2(df, df_15T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_30T)\n","    # df = df.join(to_lower_tf_v2(df, df_30T, [-2, -1]), how='inner')       \n","\n","    # print(\"sar phase done\")\n","\n","    # --------------- supertrend --------------- #\n","    # df = st_price_line(df, df_3T, '3m')\n","    # df = st_price_line(df, df_5T, '5m')\n","    # df = st_price_line(df, df_15T, '15m')\n","    # df = st_price_line(df, df_30T, '30m')\n","    # df = st_price_line(df, df_H, '1h')\n","    # df = st_price_line(df, df_4H, '4h')\n","\n","    # print(\"supertrend phase done\")\n","\n","    # --------------- rsi --------------- #  \n","    # df['rsi_1m'] = rsi(df, 14)    \n","    # df_5T['rsi_5m'] = rsi(df_5T, 14)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1]), columns=['rsi_5m']))\n","    \n","    # print(\"rsi phase done\")\n","\n","\n","    # --------------- cci --------------- #  \n","    # df['cci_1m'] = cci(df, 20)\n","\n","    # print(\"cci phase done\")\n","\n","    # --------------- ema --------------- #      \n","    # df_5T['ema_5m'] = ema(df_5T['close'], 195)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1]), columns=['ema_5m']))\n","    \n","    # print(\"ema phase done\")        \n","\n","\n","    return df\n"]},{"cell_type":"markdown","metadata":{"id":"mEKyVbHWSuzi"},"source":["## make & save res_df (concat 생각하면, timeindex sync 맞춰야함)"]},{"cell_type":"markdown","metadata":{"id":"VdukVo5-Suzj"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"khKb9nhlSuzj"},"outputs":[],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  if '2021-07-01'.upper() not in file_list[i]:\n","  # if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    excel_name = key.replace(\".xlsx\", \"_st1h_backi2.xlsx\")\n","    excel_path = save_path + excel_name\n","\n","    if excel_name in exist_list:\n","      print(excel_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m 마지막 timeindex 의 date 기준, 08:59:59.999000 를 last timestamp 로 설정\n","      #      2. 시작 timestamp 는 모든 tf 의 가장 최근 시작 index,\n","      #       a. 1m 의 시작 timeindex 는 최소, htf 의 시작 timeindex 보다 interval 만큼 앞서야함\n","      #         i. 따라서 1m open_index, latest_open_index + 1d 를 하면 댐\n","      #           1. timestamp 으로 변환후 1day 를 더하고 datetime 으로 변환\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","    latest_open_index = sorted(open_indexes)[-1]\n","    \n","    open_ts = datetime.timestamp(latest_open_index)\n","    latest_open_index_1m = datetime.fromtimestamp(open_ts + a_day)\n","\n","    #   str 로 만들어 접근하면 불가함  #\n","    end_index = pd.to_datetime(str(df.index[-1]).split(\" \")[0] + \" 08:59:59.999000\")\n","    # break\n","\n","    sliced_df = df.loc[latest_open_index_1m:end_index] # to_lower_tf 의 기준 ltf\n","    sliced_second_df = second_df.loc[latest_open_index:end_index]\n","    sliced_third_df = third_df.loc[latest_open_index:end_index]\n","    sliced_fourth_df = fourth_df.loc[latest_open_index:end_index]\n","    sliced_fifth_df = fifth_df.loc[latest_open_index:end_index]\n","\n","    print(\"sliced index\")\n","    print(sliced_df.index[[0, -1]])\n","    print(sliced_second_df.index[[0, -1]])\n","    print(sliced_third_df.index[[0, -1]])\n","    print(sliced_fourth_df.index[[0, -1]])\n","    print(sliced_fifth_df.index[[0, -1]])\n","\n","    try:\n","      sliced_sixth_df = sixth_df.loc[latest_open_index:end_index]\n","      sliced_seventh_df = seventh_df.loc[latest_open_index:end_index]\n","\n","      print(sliced_sixth_df.index[[0, -1]])\n","      print(sliced_seventh_df.index[[0, -1]])\n","\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df, sliced_sixth_df, sliced_seventh_df)\n","    \n","    except:\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df)\n","\n","\n","\n","    res_df.to_excel(excel_path)\n","    print(excel_name, \"saved succesfully !\")"]},{"cell_type":"markdown","metadata":{"id":"Bw5JibDKSuzj"},"source":["### xlsx to feather"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VA-_gcA7Suzj"},"outputs":[],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  # if '2021-07-01'.upper() not in file_list[i]:\n","  if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    feather_name = key.replace(\".xlsx\", \".ftr\")\n","    # feather_path = save_path + feather_name\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m 마지막 timeindex 의 date 기준, 08:59:59.999000 를 last timestamp 로 설정\n","      #      2. 시작 timestamp 는 모든 tf 의 가장 최근 시작 index,\n","      #       a. 1m 의 시작 timeindex 는 최소, htf 의 시작 timeindex 보다 interval 만큼 앞서야함\n","      #         i. 따라서 1m open_index, latest_open_index + 1d 를 하면 댐\n","      #           1. timestamp 으로 변환후 1day 를 더하고 datetime 으로 변환\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","\n","    df.reset_index().to_feather(date_path + feather_name, compression='lz4')\n","    second_df.reset_index().to_feather(date_path2 + feather_name, compression='lz4')\n","    third_df.reset_index().to_feather(date_path3 + feather_name, compression='lz4')\n","    fourth_df.reset_index().to_feather(date_path4 + feather_name, compression='lz4')\n","    fifth_df.reset_index().to_feather(date_path5 + feather_name, compression='lz4')\n","    sixth_df.reset_index().to_feather(date_path6 + feather_name, compression='lz4')\n","    seventh_df.reset_index().to_feather(date_path7 + feather_name, compression='lz4')\n","\n","    print(\"xlsx converted to feather !\")\n","    "]},{"cell_type":"markdown","metadata":{"id":"Pe0QpnORSuzk"},"source":["### add itv_name to ftr"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"M-gl30KxSuzk"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","# dir_path = \"bbdc3m_backi2\"\n","# date = '2021-10-10'\n","date = '2021-07-01'\n","\n","db_path = './candlestick_concated/database_bn/non_cum/%s/' % date\n","os.makedirs(os.path.join(db_path), exist_ok=True)\n","\n","# exist_list = os.listdir(os.path.join(save_path, dir_path))\n","# break\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","        \n","    df = shutil.copy(date_path + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n","    second_df = shutil.copy(date_path2 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval2))\n","    third_df = shutil.copy(date_path3 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval3))\n","    fourth_df = shutil.copy(date_path4 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval4))\n","    fifth_df = shutil.copy(date_path5 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval5))\n","    sixth_df = shutil.copy(date_path6 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval6))\n","    seventh_df = shutil.copy(date_path7 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval7))\n","\n","    print(\"copied to\" + db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n"]},{"cell_type":"markdown","metadata":{"id":"4oZ1ohTtSuzk"},"source":["### feather ver. (database to res_df)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vgVHpnUsSuzk"},"outputs":[],"source":["# db_path = './candlestick_concated/database_ub/' # upbit\n","db_path = './candlestick_concated/database_bn/'   # binance\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","save_dir_path = \"bb1d_backi2\"\n","date = '2022-02-17'\n","\n","# concat_path = 'noncat' # 새로운 cols 를 기존 cum/concat 에 붙이려는 경우\n","concat_path = 'concat'\n","cum_path = \"cum\"\n","# cum_path = \"non_cum\"  # non_cum 으로 진행하는 경우, row concat 용도이기 때문에 noncat -> concat 으로 변경 (base cols 를 모두 담고 있음)\n","\n","load_path = os.path.join(db_path, cum_path, date)\n","save_path = os.path.join(save_path, save_dir_path, concat_path, cum_path, date)\n","\n","os.makedirs(save_path, exist_ok=True)\n","\n","file_list = os.listdir(load_path)\n","exist_list = os.listdir(save_path)\n","# break\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","\n","    if \"_1m\" not in key:\n","      continue\n","\n","    # feather_name = key.replace(\".ftr\", \"_%.ftr\" % save_dir_path)\n","    feather_name = key.replace(\"_1m\", \"\")\n","    feather_path = os.path.join(save_path, feather_name)\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    df = pd.read_feather(os.path.join(load_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","    res_df = sync_check_make(df)\n","\n","    res_df.reset_index().to_feather(feather_path, compression='lz4')\n","    print(feather_path, \"saved succesfully !\")"]},{"cell_type":"markdown","metadata":{"id":"YxCPUzoyidwH"},"source":["#### just add col to loaded df"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":602},"executionInfo":{"elapsed":3433,"status":"ok","timestamp":1662649247695,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"odqVwQHpYo1M","outputId":"bb9eae01-c30f-42dc-9ec9-b653eab9d29d"},"outputs":[{"output_type":"stream","name":"stdout","text":["3T ->                          open     high      low    close\n","index                                                  \n","2022-04-27 08:45:00  2803.55  2803.97  2799.26  2800.43\n","5T ->                          open     high      low    close\n","index                                                  \n","2022-04-27 08:45:00  2803.55  2803.97  2799.26  2800.43\n","15T ->                          open     high      low    close\n","index                                                  \n","2022-04-27 08:45:00  2803.55  2803.97  2799.26  2800.43\n","30T ->                          open     high      low    close\n","index                                                  \n","2022-04-27 08:30:00  2783.61  2806.93  2780.79  2800.43\n","H ->                          open     high      low    close\n","index                                                  \n","2022-04-27 08:00:00  2819.33  2822.77  2761.27  2800.43\n","4H ->                          open    high      low    close\n","index                                                 \n","2022-04-27 05:00:00  2837.34  2855.0  2761.27  2800.43\n","D ->                          open    high      low    close\n","index                                                 \n","2022-04-26 09:00:00  3006.12  3043.0  2761.27  2800.43\n"]},{"output_type":"execute_result","data":{"text/plain":["                         dc_base_15T20  dc_upper_H20  dc_lower_H20  dc_base_H20  dc_upper_4H20  dc_lower_4H20  dc_base_4H20   cci_5T20 short_tc_5T20 long_tc_5T20\n","index                                                                                                                                                            \n","2022-04-27 08:41:59.999       2811.135        3020.4       2796.54      2908.47         3043.0         2791.3       2917.15 -69.312832         False        False\n","2022-04-27 08:42:59.999       2811.135        3020.4       2796.54      2908.47         3043.0         2791.3       2917.15 -69.312832         False        False\n","2022-04-27 08:43:59.999       2811.135        3020.4       2796.54      2908.47         3043.0         2791.3       2917.15 -69.312832         False        False\n","2022-04-27 08:44:59.999       2811.135        3020.4       2796.54      2908.47         3043.0         2791.3       2917.15 -69.312832         False        False\n","2022-04-27 08:45:59.999       2811.135        3020.4       2796.54      2908.47         3043.0         2791.3       2917.15 -54.076567         False        False"],"text/html":["\n","  <div id=\"df-a09336c2-d371-494d-885a-78aa17e8bc5a\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>dc_base_15T20</th>\n","      <th>dc_upper_H20</th>\n","      <th>dc_lower_H20</th>\n","      <th>dc_base_H20</th>\n","      <th>dc_upper_4H20</th>\n","      <th>dc_lower_4H20</th>\n","      <th>dc_base_4H20</th>\n","      <th>cci_5T20</th>\n","      <th>short_tc_5T20</th>\n","      <th>long_tc_5T20</th>\n","    </tr>\n","    <tr>\n","      <th>index</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2022-04-27 08:41:59.999</th>\n","      <td>2811.135</td>\n","      <td>3020.4</td>\n","      <td>2796.54</td>\n","      <td>2908.47</td>\n","      <td>3043.0</td>\n","      <td>2791.3</td>\n","      <td>2917.15</td>\n","      <td>-69.312832</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>2022-04-27 08:42:59.999</th>\n","      <td>2811.135</td>\n","      <td>3020.4</td>\n","      <td>2796.54</td>\n","      <td>2908.47</td>\n","      <td>3043.0</td>\n","      <td>2791.3</td>\n","      <td>2917.15</td>\n","      <td>-69.312832</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>2022-04-27 08:43:59.999</th>\n","      <td>2811.135</td>\n","      <td>3020.4</td>\n","      <td>2796.54</td>\n","      <td>2908.47</td>\n","      <td>3043.0</td>\n","      <td>2791.3</td>\n","      <td>2917.15</td>\n","      <td>-69.312832</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>2022-04-27 08:44:59.999</th>\n","      <td>2811.135</td>\n","      <td>3020.4</td>\n","      <td>2796.54</td>\n","      <td>2908.47</td>\n","      <td>3043.0</td>\n","      <td>2791.3</td>\n","      <td>2917.15</td>\n","      <td>-69.312832</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>2022-04-27 08:45:59.999</th>\n","      <td>2811.135</td>\n","      <td>3020.4</td>\n","      <td>2796.54</td>\n","      <td>2908.47</td>\n","      <td>3043.0</td>\n","      <td>2791.3</td>\n","      <td>2917.15</td>\n","      <td>-54.076567</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a09336c2-d371-494d-885a-78aa17e8bc5a')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-a09336c2-d371-494d-885a-78aa17e8bc5a button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-a09336c2-d371-494d-885a-78aa17e8bc5a');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":20}],"source":["res_df_ = sync_check_make(res_df_)  # suffix duplication 유의\n","res_df_.tail().iloc[:, -10:]\n","# res_df_.dtypes"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3SKglsQCj5_x"},"outputs":[],"source":["test_df_ = sync_check_make(res_df_.iloc[-4000:])  # suffix duplication 유의\n","test_df_.tail().iloc[:, -10:]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gOQxwYqK0jCS"},"outputs":[],"source":["# ------ validation ------ #\n","# res_df_.cppr_15T.describe()\n","print((res_df_.open_15T.to_numpy() - res_df_.close_15T.to_numpy())[-10:])\n","print((res_df_.dc_upper_15T4.to_numpy() - res_df_.dc_lower_15T4.to_numpy())[-10:])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RmiB5VU5DN6B"},"outputs":[],"source":["# np.where(res_df_.CDL3LINESTRIKE_15T) #.iloc[-1000:,]\n","\n","# CDL3LINESTRIKE = talib.CDL3LINESTRIKE(df_15T.open, df_15T.high, df_15T.low, df_15T.close)\n","for col in talib.get_function_groups()['Pattern Recognition']:  \n","  print(np.unique(res_df_[col + '_15T'].to_numpy(), return_counts=True))\n","\n","# CDLCLOSINGMARUBOZU = talib.CDLCLOSINGMARUBOZU(df_15T.open, df_15T.high, df_15T.low, df_15T.close)\n","# print(np.unique(CDLCLOSINGMARUBOZU.to_numpy(), return_counts=True))\n","# print(CDLCLOSINGMARUBOZU.tail(50))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2745,"status":"ok","timestamp":1662649314828,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"XrgJPQRuisCa","outputId":"4852a9a5-f5cd-4678-922a-329b53d7e944"},"outputs":[{"output_type":"stream","name":"stdout","text":["./candlestick_concated/database_bn/cum/2022-04-27/2022-04-27 ETHUSDT_1m.ftr saved !\n"]}],"source":["# ------------ save current res_df ------------ #\n","ftr_path = os.path.join(save_path.replace(\"res_df\", \"database_bn\"), \"cum\", date)\n","ftr_full_path = os.path.join(ftr_path, key)\n","\n","res_df_.reset_index().to_feather(ftr_full_path, compression='lz4')  # key 잘 확인하고 저장\n","print(ftr_full_path, 'saved !')"]},{"cell_type":"markdown","metadata":{"id":"E0n53hflJbnp"},"source":["### htf candle check"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6xW0yugCWvGz"},"outputs":[],"source":["itv_list = ['3T', '5T', '15T', '30T', '1H', '4H']\n","comp_df_list = [second_df, third_df, fourth_df, fifth_df, sixth_df, seventh_df]\n","offset_list = ['1h', '2min', '2min', '2min', '2min', '2min']\n","# itv_list = ['4H']\n","# comp_df_list = [seventh_df]\n","\n","slice_len = 100\n","for itv_, comp_df_, offset in zip(itv_list, comp_df_list, offset_list):\n","\n","  print(\"itv_ :\", itv_)\n","\n","  # df = h_candle_v2(df, '3T')\n","  # end_ts = \n","  h_res_df = df.resample(itv_, offset=offset).agg({\n","          'open': 'first',\n","          'high': 'max',\n","          'low': 'min',\n","          'close': 'last'\n","      })\n","\n","  #   앞은 길이가 다르고, 뒤에서부터 잘라서 비교    #\n","  #   last_row 빼고는 동일, 4h 제외\n","  # print(df.tail())\n","  print(h_res_df.tail())\n","  print(comp_df_.tail())\n","  # # print(h_res_df.head())\n","  # # print(second_df.head())\n","\n","  # print(len(h_res_df))\n","  # print(len(second_df))\n","\n","  # print(h_res_df.values[-slice_len:])\n","  # print(second_df.iloc[:, :4].values[-slice_len:])\n","  # print(np.argwhere(h_res_df.values[-slice_len:] != comp_df_.iloc[:, :4].values[-slice_len:]))\n","  # print()\n","  break"]},{"cell_type":"markdown","metadata":{"id":"jTN3M842Suzl"},"source":["## concat & save new res_df"]},{"cell_type":"markdown","metadata":{"id":"MlFkpO1MSuzl"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"U-3QkfbFSuzl"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","dict_name = \"2021-07-01 ETHUSDT_bb15m_backi2_res_dfs.pkl\"\n","\n","#     load with pickle    #\n","with open(save_path + dict_name, 'rb') as f:\n","  saved_res_df_dict = pickle.load(f)\n","\n","print(dict_name, \"loaded !\")\n","res_df_files = os.listdir(save_path)\n","res_df_files.reverse()\n","\n","print(res_df_files)\n","\n","res_df_dict = {}\n","\n","base_postfix = '_bb15m_backi2.xlsx'\n","new_postfix = '_st1h_backi2.xlsx'\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for k_i, key in enumerate(res_df_files):\n","\n","  if '2021-07-01'.upper() not in key:\n","  # if '2021-10-10'.upper() not in key:\n","    continue\n","\n","  # if \"link\".upper() not in key:\n","  # if \"btc\".upper() not in key:\n","  #   continue\n","\n","  if new_postfix not in key:\n","    continue\n","\n","  # if key in \n","\n","  if sample_cnt == max_cnt:\n","    dict_name = \"%s_res_dfs.pkl\" % key.split(\".\")[0]\n","    print(\"dict_name :\", dict_name)\n","\n","  base_df = saved_res_df_dict[key.replace(new_postfix, base_postfix)]\n","  # base_df = pd.read_excel(save_path + key.replace(new_postfix, base_postfix), index_col=0)  \n","  res_df = pd.read_excel(save_path + key, index_col=0)  \n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  droped_new_res_df.head()\n","  # break\n","\n","  # res_df_dict[key] = res_df\n","  res_df_dict[key] = droped_new_res_df\n","  print(key, \"saved to dict !\")\n","\n","  #     save with pickle    #\n","  with open(save_path + dict_name, 'wb') as f:\n","    pickle.dump(res_df_dict, f)\n","\n","  sample_cnt -= 1\n","\n","  if sample_cnt <= 0:\n","    break\n"]},{"cell_type":"markdown","metadata":{"id":"t1E_eAyPSuzm"},"source":["### new col to latest feather (1m_indi. only)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xyI5NrM7Suzm"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","cum_dir = \"cum\"\n","\n","new_dir_path = \"rsi_backi2\"\n","base_dir_path = \"bbdc3m_backi2\"\n","\n","new_date = '2021-11-17'\n","\n","\n","\n","#     load ftr list    #\n","base_save_path = os.path.join(save_path, base_dir_path, \"concat/cum\", new_date)\n","new_save_path = base_save_path.replace(base_dir_path, new_dir_path)\n","\n","#     save to (new) cum dir    #\n","#      1. if dir. not exists, makedir\n","os.makedirs(new_save_path, exist_ok=True)\n","\n","ftr_list = [s for s in os.listdir(base_save_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_save_path, key), columns=None, use_threads=True).set_index(\"index\")\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  droped_new_res_df = sync_check(base_df)\n","\n","  # new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # # new_res_df.head()\n","\n","  # intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  # droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break\n","\n","  droped_new_res_df.reset_index().to_feather(os.path.join(new_save_path, key), compression='lz4')\n","\n","  print(os.path.join(new_save_path, key), \"saved !\")\n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"markdown","metadata":{"id":"nUs4fjVHSuzl"},"source":["### feather ver. (col concat)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6cu-Y82iSuzl"},"outputs":[],"source":["new_dir_path = \"st3m_backi2\"\n","base_dir_path = \"bb1d_backi2\"\n","\n","# new_date = \"2021-11-17\"\n","new_date = \"2022-01-10\"\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","save_path = './candlestick_concated/res_df/'\n","save_path = os.path.join(save_path, new_dir_path, \"concat/cum\", new_date)   \n","# save_path = os.path.join(save_path, new_dir_path, \"concat/non_cum\", new_date)   # row col 하려면 concat 맞음, noncum 사용\n","os.makedirs(save_path, exist_ok=True)\n","\n","\n","#     load ftr list    #\n","# ftr_list = [s for s in os.listdir(os.path.join(save_path, new_dir_path)) if \"ftr\" in s]\n","\n","noncat_path = save_path.replace(\"concat/\", \"noncat/\")\n","ftr_list = [s for s in os.listdir(noncat_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","  try:\n","\n","    #       read from base postfix's directory    #\n","    base_df = pd.read_feather(os.path.join(save_path.replace(new_dir_path, base_dir_path), key), columns=None, use_threads=True).set_index(\"index\")\n","    res_df = pd.read_feather(os.path.join(noncat_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","    # print(base_df.head())\n","    # print(res_df.head())\n","    # break\n","\n","    new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","    # new_res_df.head()\n","\n","    droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","    # droped_new_res_df.head()\n","    # break\n","\n","    droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","    # res_df_dict[key] = res_df\n","    # res_df_dict[key] = droped_new_res_df\n","    print(os.path.join(save_path, key), \"saved !\")\n","  \n","  except Exception as e:\n","    print(\"error occured ! :\", e)\n","  \n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"markdown","metadata":{"id":"WVAKq3i8Suzm"},"source":["### feather ver. (row concat) , database cum 도 호환가능"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XG2p9OhhSuzm"},"outputs":[],"source":["# save_path = './candlestick_concated/res_df/'        # cols 추가된 cum db 에 new_row's cols 기준으로 합치는 경우\n","save_path = './candlestick_concated/database_bn/'   # ohlcv cum db 만들 경우\n","\n","base_date = '2022-04-25'\n","# new_date = '2022-02-17'\n","new_date = '2022-04-27'\n","\n","# ------ load ftr list ------ #\n","if \"database\" in save_path:\n","  base_dir_path = \"\"\n","  new_dir_path = \"\"\n","  concat_dir = \"\"\n","else:\n","  base_dir_path = \"sar_backi2\"\n","  new_dir_path = \"bb4h_backi2\"  # dir_path 가 base / new 서로 달라질 수 있어서 분할함\n","  concat_dir = \"concat\"\n","\n","base_date_path = os.path.join(save_path, base_dir_path, concat_dir, \"cum\", base_date)      # 기존 cum db 와 new_date db 를 cum 진행\n","# base_date_path = os.path.join(save_path, base_dir_path, concat_dir, \"non_cum\", base_date)    # non_cum db 와 new_date db 를 cum 진행\n","\n","# new_date_path = os.path.join(save_path, new_dir_path, concat_dir, \"cum\", new_date)      # 상황별로 직접 선택해야할 듯\n","new_date_path = os.path.join(save_path, new_dir_path, concat_dir, \"non_cum\", new_date)\n","\n","\n","\n","# ------ save to (new) concat dir ------ #\n","#      1. if dir. not exists, makedir\n","save_path = new_date_path.replace(\"non_cum\", \"cum\")   # non_cum 아니여도 무관\n","os.makedirs(save_path, exist_ok=True)   # noncat / concat 두가지 경우 존재가능할 것\n","# os.makedirs(os.path.join(save_path, dir_path, \"noncat/cum\", new_date), exist_ok=True)\n","\n","\n","ftr_list = [s for s in os.listdir(new_date_path) if \"ftr\" in s]\n","exist_list = os.listdir(save_path)\n","print(ftr_list)\n","# break\n","\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:   # date rejection\n","    continue\n","  if '1m' not in key:  # itv rejection\n","    continue\n","\n","  # if key in exist_list:\n","  #   print(key, \"already exist !\")\n","  #   continue\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_date_path, key.replace(new_date, base_date)), columns=None, use_threads=True).set_index(\"index\")   # key 에 new_date 담겨있음\n","  res_df = pd.read_feather(os.path.join(new_date_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break  \n","  \n","  print(droped_new_res_df.iloc[[0, -1]])  \n","\n","  # ------------- verify df continuity directly itv by itv ------------- #\n","  true_continue = True\n","  if \"_\" in key:\n","\n","    # interval = key.split(\".\")[0].split(\"_\")[-1] \n","    # itv_num = to_itvnum(interval)\n","\n","    # verified_df = consecutive_df(droped_new_res_df, to_itvnum(interval))\n","    # verified_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","    # res_df_dict[key] = res_df\n","    # res_df_dict[key] = droped_new_res_df  \n","\n","    np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","    ideal_ts_gap = 60 # * itv_num\n","\n","    for ts_i in range(len(np_idx_ts)):\n","      \n","      if ts_i != 0:\n","        ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","        if ts_gap > ideal_ts_gap or ts_gap < ideal_ts_gap:\n","        # if ts_gap == ideal_ts_gap:\n","          print(droped_new_res_df.index[ts_i - 1])\n","          print(droped_new_res_df.index[ts_i])\n","          # print(ts_gap)\n","          print(\"------------------ unideal ts_gap ------------------\")\n","          true_continue = False\n","\n","    print(\"continuity checked !\")\n","\n","  if true_continue:\n","    droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","  print(os.path.join(save_path, key), \"saved !\")\n","  \n"]},{"cell_type":"markdown","metadata":{"id":"L7l5CTJfSuzn"},"source":["### check continuity"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"w-5jn9opBl73"},"outputs":[],"source":["droped_new_res_df = res_df_"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nGzMGyC3Suzn"},"outputs":[],"source":["# print(droped_new_res_df.columns)\n","\n","print(droped_new_res_df.iloc[[0, -1]])\n","\n","np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","\n","print(np_idx_ts[:10])\n","for ts_i in range(len(np_idx_ts)):\n","  \n","  if ts_i != 0:\n","    ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","\n","    if ts_gap > 60 or ts_gap < 60:\n","\n","      print(\"invalid ts_gap found !\")\n","    # if ts_gap == 60:\n","      print(droped_new_res_df.index[ts_i - 1])\n","      print(droped_new_res_df.index[ts_i])\n","      # print(ts_gap)\n","      print()\n"]},{"cell_type":"markdown","metadata":{"id":"x_XGJqBi8Jex"},"source":["### check length of front missing value + middle_data non_missing validity"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yRNwqVeAu8X8"},"outputs":[],"source":["#       1. new_date 의 시작 timeidx 와 base_date end timeidx 의 최소 days' gap     #\n","#       2. new_date 의 시작 부분 indi. value 는 np.nan 으로 채워질 거기 때문에 계산해야함    #\n","\n","df_count = droped_new_res_df.count()\n","len_missing = df_count.max() - df_count.min()\n","print(len_missing / 1440)\n","\n","#       3. \n","missing_sliced_df = droped_new_res_df.iloc[len_missing:]\n","df_count2 = missing_sliced_df.count()\n","# print(df_count2)\n","print((df_count2.max() - df_count2.min()))    # this value should be zero !\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"AY7E2_hTBsyM"},"outputs":[],"source":["# df_count2.index[df_count2.argmin()]\n","# missing_sliced_df.head(5)\n","\n","stay_missed = np.sum(pd.isnull(missing_sliced_df), axis=0)\n","print(stay_missed)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"p9yqewOw9g33"},"outputs":[],"source":["stay_missed_cols = stay_missed[stay_missed != 0].index\n","\n","for sm_col in stay_missed_cols:\n","  \n","  row_idx = np.argwhere(pd.isnull(missing_sliced_df[sm_col].values))\n","\n","  plt.figure(figsize=(3,3))\n","  plt.plot(row_idx)\n","  plt.ylim(0, len(missing_sliced_df))\n","  plt.title(sm_col)\n","\n","  plt.show()\n"]},{"cell_type":"markdown","metadata":{"id":"MSUY4nnku3s9"},"source":["## legacy"]},{"cell_type":"markdown","metadata":{"id":"epgS5Dksu-HX"},"source":["### mv files"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"aJcVpEdrslA5"},"outputs":[],"source":["df_path = './candlestick_concated/survey_df_v2'\n","files_ = os.listdir(df_path)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cEKyEYkotFDy"},"outputs":[],"source":["dirs = [file_ for file_ in files_ if not file_.endswith('.ftr')]\n","files = [file_ for file_ in files_ if file_.endswith('.ftr')]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"IgM79tcxtPVZ"},"outputs":[],"source":["dirs"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"M767iRtwtRQP"},"outputs":[],"source":["def move_fn(dir_, file_):\n","  src_path = os.path.join(df_path, file_)\n","  dst_path = os.path.join(df_path, dir_, file_)\n","  shutil.move(src_path, dst_path)\n","  print(\"moved to {}\".format(dst_path))\n","\n","_ = [move_fn('2022-01-10 ETHUSDT_all', file_) for file_ in files if 'eth'.upper() in file_]\n","# sols\n"]},{"cell_type":"markdown","metadata":{"id":"Iy76iO7gztne"},"source":["### move legacy files"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hMRht32Czwry"},"outputs":[],"source":["# print()\n","cur_dir_list = os.listdir('.')\n","for f in cur_dir_list:\n","  if 'legacy' in f :\n","    # print(f)\n","    if os.path.isdir(current_path + f,):\n","      continue\n","\n","    shutil.move(current_path + f, current_path + 'legacy/' + f)\n","    print(\"moved to\" + current_path + 'legacy/' +  f)"]},{"cell_type":"markdown","metadata":{"id":"5duWn8t4BRyv"},"source":["# IDE platform\n"]},{"cell_type":"markdown","metadata":{"id":"6HOjnZjSgzk1"},"source":["## load ftr_list"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5245,"status":"ok","timestamp":1663111590661,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"7FPBG5Qqg2jB","outputId":"2d8c7bbe-8c9f-4f8d-8048-4692b5b06701"},"outputs":[{"output_type":"stream","name":"stdout","text":["['2022-04-27 ETHUSDT_1m.ftr']\n","2022-04-27 ETHUSDT_1m.ftr loaded !\n","load res_df_ elapsed time : 4.1845703125\n"]}],"source":["save_path = './candlestick_concated/database_bn/'\n","\n","# dir_path = \"bb1d_backi2\"\n","# date = \"2022-02-17\"\n","# ftr_path = os.path.join(save_path, dir_path, \"concat/cum\", date)\n","\n","# ------ 1T_database ------ #\n","# date = \"2022-04-27\"\n","# ftr_path = os.path.join(save_path, \"non_cum\", date)\n","\n","date = \"2022-04-27\"\n","# date = \"2022-02-17\"\n","ftr_path = os.path.join(save_path, \"cum\", date)\n","\n","# ------ load ftr list ------ #\n","ftr_list = [s for s in os.listdir(ftr_path) if \"ftr\" in s if date in s]\n","print(ftr_list)\n","\n","start_0 = time.time()\n","key = ftr_list[0]  # tempoaray use single key\n","res_df_ = pd.read_feather(os.path.join(ftr_path, key), columns=None, use_threads=True).set_index(\"index\")\n","# print(res_df_.head())\n","print(key, \"loaded !\")\n","print(\"load res_df_ elapsed time :\", time.time() - start_0)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RQH_l4opEh_O"},"outputs":[],"source":["res_df_.dtypes\n","# res_df_.index[[0, -1]]"]},{"cell_type":"markdown","metadata":{"id":"x2yj2SwAXDLp"},"source":["### edit cols"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"x9wkWw15XCAm","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1662649235837,"user_tz":-540,"elapsed":629,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"fe8f88bc-7e54-4d36-b469-0053db82740a"},"outputs":[{"output_type":"stream","name":"stdout","text":["['cci_5T20']\n"]}],"source":["col_list = list(res_df_.columns)\n","\n","# ------ check target cols ------ #\n","print([col_ for col_ in col_list if 'cci_5T' in col_])\n","\n","# ------ drop ------ #\n","# res_df_.drop([col_ for col_ in col_list if 'open_15T' in col_], inplace=True, axis=1)\n","res_df_.drop([col_ for col_ in col_list if 'cci_5T' in col_], inplace=True, axis=1)\n","# res_df_.drop([col_ for col_ in col_list if '_T40' in col_], inplace=True, axis=1)\n","# res_df_.drop([col_ for col_ in col_list if 'long_base' in col_], inplace=True, axis=1)\n","# res_df_.drop([col_ for col_ in col_list[5:]], inplace=True, axis=1)\n","\n","# ------ replace ------ #\n","# for c_i, col_ in enumerate(col_list):\n","#   if 'basis' in col_:\n","# #   # if col_[-1] in ['m', 'h', 'd', 'H'] and '_' in col_:eTa_5T\n","# #   # if col_[0] in ['h'] and '_' in col_:\n","# #   if 'bir_' in col_:\n","\n","#     col_list[c_i] = col_.replace('basis', 'base')\n","# #     # col_list[c_i] = col_.replace('m', 'T').replace('h', 'H').replace('1T', 'T')\n","# #     # col_list[c_i] = col_.replace('1d', 'D')\n","# #     # col_list[c_i] = col_.replace('eTa_5T', 'ema_5T')\n","# #     # col_list[c_i] = col_list[c_i][1:]\n","# #     # print(col_list[c_i][0])\n","# res_df_.columns = col_list\n","# col_list[-2:] = ['resi_T', 'sup_T']"]},{"cell_type":"markdown","metadata":{"id":"14chOHeXh6JD"},"source":["### lab"]},{"cell_type":"markdown","metadata":{"id":"O87s8_EUakqS"},"source":["#### instant indi."]},{"cell_type":"code","source":["def get_wave_time_ratio(res_df, wave_itv1, wave_period1):\n","\n","  wave_cu_post_idx_fill_ = res_df['wave_cu_post_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy().astype(int)\n","  wave_co_post_idx_fill_ = res_df['wave_co_post_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy().astype(int)\n","\n","  wave_cu_idx_fill_ = res_df['wave_cu_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy().astype(int)\n","  wave_co_idx_fill_ = res_df['wave_co_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy().astype(int)\n","\n","  wave_valid_cu_post_idx_fill_ = np.where(wave_cu_post_idx_fill_ < 0, 0, wave_cu_post_idx_fill_)\n","  wave_valid_co_post_idx_fill_ = np.where(wave_co_post_idx_fill_ < 0, 0, wave_co_post_idx_fill_)\n","\n","  wave_valid_cu_idx_fill_ = np.where(wave_cu_idx_fill_ < 0, 0, wave_cu_idx_fill_)\n","  wave_valid_co_idx_fill_ = np.where(wave_co_idx_fill_ < 0, 0, wave_co_idx_fill_)\n","\n","  res_df['short_wave_time_ratio_{}{}'.format(wave_itv1, wave_period1)] = (wave_valid_co_post_idx_fill_ - wave_valid_cu_post_idx_fill_[wave_valid_co_post_idx_fill_[wave_valid_cu_idx_fill_]]) / (wave_valid_cu_idx_fill_ - wave_valid_co_post_idx_fill_)\n","  res_df['long_wave_time_ratio_{}{}'.format(wave_itv1, wave_period1)] = (wave_valid_cu_post_idx_fill_ - wave_valid_co_post_idx_fill_[wave_valid_cu_post_idx_fill_[wave_valid_co_idx_fill_]]) / (wave_valid_co_idx_fill_ - wave_valid_cu_post_idx_fill_)\n","\n","  return res_df"],"metadata":{"id":"Fg4JnLY6i99D"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def wave_range_cci_v4_1(t_df, wave_period):\n","    t_df = cci_v2(t_df, wave_period)\n","    itv = pd.infer_freq(t_df.index)\n","\n","    cci_ = t_df['cci_{}{}'.format(itv, wave_period)].to_numpy()\n","    b1_cci_ = t_df['cci_{}{}'.format(itv, wave_period)].shift(1).to_numpy()\n","\n","    baseline = 0\n","    band_width = 100\n","    upper_band = baseline + band_width\n","    lower_band = baseline - band_width\n","\n","    data_cols = ['open', 'high', 'low', 'close']\n","    ohlc_list = [t_df[col_].to_numpy() for col_ in data_cols]\n","    open, high, low, close = ohlc_list\n","\n","    # ============ modules ============ #\n","    # ------ define co, cu ------ # <- point missing 과 관련해 정교해아함\n","    cu_bool = (b1_cci_ > upper_band) & (upper_band > cci_)\n","    co_bool = (b1_cci_ < lower_band) & (lower_band < cci_)\n","\n","    return wave_publics_v2(t_df, cu_bool, co_bool, ohlc_list, wave_period)"],"metadata":{"id":"XkrbzNFKZhl0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def wave_publics_v2(t_df, cu_bool, co_bool, ohlc_list, wave_period):\n","    itv = pd.infer_freq(t_df.index)\n","\n","    len_df = len(t_df)\n","    len_df_range = np.arange(len_df).astype(int)\n","\n","    cu_idx = get_index_bybool(cu_bool, len_df_range)\n","    co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","    open, high, low, close = ohlc_list\n","\n","    cu_fill_idx, co_fill_idx, cu_prime_idx, co_prime_idx, cu_prime_fill_idx, co_prime_fill_idx, valid_cu_bool, valid_co_bool = get_terms_info_v4(\n","        cu_idx, co_idx, len_df, len_df_range)\n","    # cu_fill_idx, co_fill_idx, cu_prime_idx, co_prime_idx, cu_prime_fill_idx, co_prime_fill_idx, \\\n","    #   cu_post_idx, co_post_idx, cu_post_fill_idx, co_post_fill_idx, valid_cu_bool, valid_co_bool = get_terms_info_v5(cu_idx, co_idx, len_df, len_df_range)\n","\n","    # ------ get post_terms ------ #\n","    high_post_terms = np.vstack((co_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","    low_post_terms = np.vstack((cu_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)\n","\n","    high_post_terms_cnt = high_post_terms[:, 1] - high_post_terms[:, 0]\n","    low_post_terms_cnt = low_post_terms[:, 1] - low_post_terms[:, 0]\n","\n","    # ------ get post_idx ------ #\n","    paired_cu_post_idx = high_post_terms[:, 1]  # Todo, 여기는 cross_idx (위에서 vstack 으로 cross_idx 입력함)\n","    paired_co_post_idx = low_post_terms[:, 1]\n","\n","    cu_post_idx = np.full(len_df, np.nan)  # --> Todo, unavailable : not cross_idx\n","    co_post_idx = np.full(len_df, np.nan)\n","\n","    cu_post_idx[paired_cu_post_idx] = paired_cu_post_idx\n","    co_post_idx[paired_co_post_idx] = paired_co_post_idx\n","\n","    cu_post_fill_idx = fill_arr(cu_post_idx)\n","    co_post_fill_idx = fill_arr(co_post_idx)\n","\n","    # ------ get prime_terms ------ # # 기본은 아래 logic 으로 수행하고, update_hl 도 해당 term 구간의 hl 이 더 작거나 클경우 적용 가능할 것\n","    # high_prime_terms = np.vstack((co_prime_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","    # low_prime_terms = np.vstack((cu_prime_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)\n","\n","    # high_prime_terms_cnt = high_prime_terms[:, 1] - high_prime_terms[:, 0]\n","    # low_prime_terms_cnt = low_prime_terms[:, 1] - low_prime_terms[:, 0]\n","\n","    # paired_prime_cu_idx = high_prime_terms[:, 1]\n","    # paired_prime_co_idx = low_prime_terms[:, 1]\n","\n","    # ====== get wave_hl & terms ====== #\n","    wave_high_ = np.full(len_df, np.nan)\n","    wave_low_ = np.full(len_df, np.nan)\n","\n","    wave_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_post_terms])\n","    wave_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_post_terms])\n","\n","    wave_high_[paired_cu_post_idx] = wave_highs\n","    wave_low_[paired_co_post_idx] = wave_lows\n","\n","    wave_high_fill_ = fill_arr(wave_high_)\n","    wave_low_fill_ = fill_arr(wave_low_)\n","\n","    # ------ Todo, update_hl 에 대해서, post_terms_hl 적용 ------ #\n","    wave_high_terms_low_ = np.full(len_df, np.nan)\n","    wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","    wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_post_terms])  # for point rejection, Todo, min_max 설정 항상 주의\n","    wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_post_terms])\n","\n","    wave_high_terms_low_[paired_cu_post_idx] = wave_high_terms_lows\n","    wave_low_terms_high_[paired_co_post_idx] = wave_low_terms_highs\n","\n","    update_low_cu_bool = wave_high_terms_low_ < wave_low_fill_\n","    update_high_co_bool = wave_low_terms_high_ > wave_high_fill_\n","\n","    # ------ term cnt ------ #\n","    wave_high_terms_cnt_ = np.full(len_df, np.nan)\n","    wave_low_terms_cnt_ = np.full(len_df, np.nan)\n","\n","    wave_high_terms_cnt_[paired_cu_post_idx] = high_post_terms_cnt\n","    wave_low_terms_cnt_[paired_co_post_idx] = low_post_terms_cnt\n","\n","    wave_high_terms_cnt_fill_ = fill_arr(wave_high_terms_cnt_)\n","    wave_low_terms_cnt_fill_ = fill_arr(wave_low_terms_cnt_)\n","\n","    # ------ hl_fill 의 prime_idx 를 찾아야함 ------ #\n","    # b1_wave_high_fill_ = pd.Series(wave_high_fill_).shift(1).to_numpy()\n","    # b1_wave_low_fill_ = pd.Series(wave_low_fill_).shift(1).to_numpy()\n","    # wave_high_prime_idx = np.where((wave_high_fill_ != b1_wave_high_fill_) & ~np.isnan(wave_high_fill_), len_df_range, np.nan)\n","    # wave_low_prime_idx = np.where((wave_low_fill_ != b1_wave_low_fill_) & ~np.isnan(wave_low_fill_), len_df_range, np.nan)\n","    #\n","    # high_prime_idx_fill_ = fill_arr(wave_high_prime_idx)\n","    # low_prime_idx_fill_ = fill_arr(wave_low_prime_idx)\n","\n","    # ============ enlist to df_cols ============ #\n","    t_df['wave_high_fill_{}{}'.format(itv, wave_period)] = wave_high_fill_\n","    t_df['wave_low_fill_{}{}'.format(itv, wave_period)] = wave_low_fill_\n","    t_df['wave_high_terms_cnt_fill_{}{}'.format(itv, wave_period)] = wave_high_terms_cnt_fill_\n","    t_df['wave_low_terms_cnt_fill_{}{}'.format(itv, wave_period)] = wave_low_terms_cnt_fill_\n","\n","    t_df['wave_update_low_cu_bool_{}{}'.format(itv, wave_period)] = update_low_cu_bool  # temporary, for plot_check\n","    t_df['wave_update_high_co_bool_{}{}'.format(itv, wave_period)] = update_high_co_bool\n","\n","    t_df['wave_cu_{}{}'.format(itv, wave_period)] = cu_bool  # * ~update_low_cu_bool\n","    t_df['wave_co_{}{}'.format(itv, wave_period)] = co_bool  # * ~update_high_co_bool\n","    \n","    t_df['wave_cu_idx_fill_{}{}'.format(itv, wave_period)] = cu_fill_idx\n","    t_df['wave_co_idx_fill_{}{}'.format(itv, wave_period)] = co_fill_idx\n","\n","    t_df['wave_co_post_idx_{}{}'.format(itv, wave_period)] = co_post_idx  # paired_\n","    t_df['wave_cu_post_idx_{}{}'.format(itv, wave_period)] = cu_post_idx  # paired_\n","    t_df['wave_co_post_idx_fill_{}{}'.format(itv, wave_period)] = co_post_fill_idx\n","    t_df['wave_cu_post_idx_fill_{}{}'.format(itv, wave_period)] = cu_post_fill_idx\n","\n","    # Todo, idx 저장은 sync. 가 맞는 tf_df 에 대하여 적용하여야함\n","    # ------ for roll prev_hl ------ #\n","    # high_post_idx 를 위해 co_prime_idx 입력 = 뜻 : high_term's prime co_idx (high_prime_idx = wave_high 를 만들기 위한 가장 앞단의 co_idx)\n","    t_df['wave_co_prime_idx_{}{}'.format(itv,\n","                                         wave_period)] = co_prime_idx  # co_prime_idx wave_high_prime_idx  # high 갱신을 고려해, prev_hl 는 prime_idx 기준으로 진행\n","    t_df['wave_cu_prime_idx_{}{}'.format(itv,\n","                                         wave_period)] = cu_prime_idx  # cu_prime_idx wave_low_prime_idx  # cu_prime_idx's low 를 사용하겠다라는 의미, 즉 roll_prev 임\n","    t_df['wave_co_prime_idx_fill_{}{}'.format(itv, wave_period)] = co_prime_fill_idx  # co_prime_fill_idx high_prime_idx_fill_\n","    t_df['wave_cu_prime_idx_fill_{}{}'.format(itv, wave_period)] = cu_prime_fill_idx  # cu_prime_fill_idx low_prime_idx_fill_\n","\n","    # ------ for plot_checking ------ #\n","    t_df['wave_cu_marker_{}{}'.format(itv, wave_period)] = get_line(cu_idx, close)\n","    t_df['wave_co_marker_{}{}'.format(itv, wave_period)] = get_line(co_idx, close)\n","\n","    return t_df"],"metadata":{"id":"FdDkSxbaX4AI"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LyGnAMvLYvOZ"},"source":["#### wave_range"]},{"cell_type":"markdown","metadata":{"id":"O1uu9vQnY5dn"},"source":["##### plot_check"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YqBXjVPzdccC"},"outputs":[],"source":["i = random.randint(0, len(res_df))\n","# i = 235290, 512385\n","# i = 74470\n","# i = 82533\n","i = 387103\n","i = 370055\n","i = 159000\n","\n","plot_size = 300 # 1500 150\n","# t_df = res_df.iloc[i - plot_size:i + plot_size]\n","t_df = res_df.iloc[i - plot_size:i]\n","a_data = t_df.to_numpy()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"PgaNnempXRd_"},"outputs":[],"source":["wave_itv1, wave_period1 = 'T', 20\n","roll_hl_cnt = 3\n","\n","if wave_itv1 != 'T':\n","    offset = '1h' if wave_itv1 != 'D' else '9h'\n","    htf_df = to_htf(t_df, wave_itv1, offset=offset)  # to_htf 는 ohlc, 4개의 col 만 존재 (현재까지)\n","    # htf_df = wave_range_cci_v3(htf_df, wave_period1)\n","    htf_df = wave_range_dc_envel_v1(htf_df, wave_period1)\n","    \n","\n","    cols = list(htf_df.columns)  # 그냥 다 넣어버리기 (추후 혼란 방지)\n","\n","    valid_high_prime_idx, valid_low_prime_idx, roll_prev_high_idx_arr, roll_prev_low_idx_arr = roll_wave_hl_idx_v5(htf_df, wave_itv1, wave_period1, roll_hl_cnt=roll_hl_cnt)\n","\n","    htf_df = get_roll_wave_data_v2(htf_df, valid_high_prime_idx, roll_prev_high_idx_arr, 'wave_high_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","    cols += list(htf_df.columns[-roll_hl_cnt:])\n","\n","    htf_df = get_roll_wave_data_v2(htf_df, valid_low_prime_idx, roll_prev_low_idx_arr, 'wave_low_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","    cols += list(htf_df.columns[-roll_hl_cnt:])\n","\n","    htf_df = wave_range_ratio_v4_2(htf_df, wave_itv1, wave_period1, roll_hl_cnt=3)\n","    cols += list(htf_df.columns[-4:])  # wrr 은 4개의 cols\n","\n","    # ------ 필요한 cols 만 join (htf's idx 정보는 ltf 와 sync. 가 맞지 않음 - join 불가함) ------ #\n","    t_df.drop(cols, inplace=True, axis=1, errors='ignore')\n","    t_df = t_df.join(to_lower_tf_v3(t_df, htf_df, cols, backing_i=0), how='inner')\n","\n","else:  \n","  t_df = wave_range_cci_v4(t_df, wave_period1)\n","  # t_df = wave_range_stoch_v1(t_df, wave_period1)\n","  # t_df = wave_range_dc_envel_v1(t_df, wave_period1)\n","\n","  valid_high_prime_idx, valid_low_prime_idx, roll_prev_high_idx_arr, roll_prev_low_idx_arr = roll_wave_hl_idx_v5(t_df, wave_itv1, wave_period1, roll_hl_cnt=roll_hl_cnt)\n","  t_df = get_roll_wave_data_v2(t_df, valid_high_prime_idx, roll_prev_high_idx_arr, 'wave_high_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","  t_df = get_roll_wave_data_v2(t_df, valid_low_prime_idx, roll_prev_low_idx_arr, 'wave_low_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","\n","  t_df = wave_range_ratio_v4_2(t_df, wave_itv1, wave_period1, roll_hl_cnt=roll_hl_cnt)\n","\n","# t_df = wave_range_v11(t_df, config)\n","# t_df = wave_range_v11_2(t_df, config)\n","# t_df = wave_range_dcbase_v11_3(t_df, config, over_period=2)\n","# t_df = wave_range_cci_v1(t_df, wave_itv1, wave_period1)\n","# t_df = wave_range_v12(t_df, config, ltf_df=None)\n","# t_df = wave_range_v13(t_df, config, ltf_df=None, term_thresh=1)\n","# t_df = wave_range_v14(t_df, config, ltf_df=None, term_thresh1=1, term_thresh2=3)\n","# t_df = wave_range_v15(t_df, config, term_thresh1=2, term_thresh2=3)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":862},"executionInfo":{"elapsed":2482,"status":"ok","timestamp":1660482394219,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"-Dr_tTk9csFm","outputId":"cbbc017d-db06-458d-ce7d-d3ad9d67a7ad"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1080x1080 with 2 Axes>"],"image/png":"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/vWvf2l0dFTV1dXUL1gkXVlJh7oF//73vyVJ5eXlKi8vlzFGX/rSl/Tqq69KWly3zNU5r776qh566KGM+3d08FddXa2JiYnE75OTk0v+wcB7jDE6d+6c/vjHP2rPnj2SpDvvvFNXrlyRNFvp3nnnnXZmEQ6TrnxQ3yCd/fv3a3BwUMePH08M46O8YM5dd92lxsZG9fX1Ub9gScllRaJuQWplZWXq7+/X1atXFQwG9ec//1k3btzQ9PS0pPllIrm8TE9Pa2pqSnfcccfS+y9s9oHC+uIXv6itW7eqvb1d+/bt0wMPPLDoPcYYG3IGt6B8YCnHjh3TZz7zGW3ZskV//etf9Ytf/MLuLMFB1qxZo9dee00HDhzQ+++/v+h16hfMWVhWqFuQzszMjBobG1VTU6Ompibdfffded2/o4O/eDyu2traxO81NTWKx+M25ghO8+6770qS/va3v+n1119XU1OT3nvvvcRwmqqqKl29etXOLMJh0pUP6hukcvXqVc3MzMgYo66ursTwK8oLVq1apddee00nT57U66+/Lon6BamlKivULchkampKoVBI999/vyorK7Vy5UpJ88tEcnlZuXKl1q5dq2vXri25X0cHf+FwWPX19aqrq1N5ebk6OjoUCATszhYc4mMf+5huv/32xM+tra0aHh5WIBDQ7t27JUm7d+/WG2+8YWc24TDpykcgENCuXbskSc3NzZqamkoM34J3Jc/L+spXvqLh4WFJs+Wlo6NDFRUVqqurU319vS5cuGBXNmGD48ePa3R0VL/85S8T26hfkEqqskLdglTWr1+vtWvXSpJuu+02tbS0aHR0VKFQSDt37pS0uG6Zq3N27typt99+O6vPsX1Vm6VSe3u7uXTpkonFYubQoUO254fknLRhwwYzMDBgBgYGzPDwcKJ8fOITnzBvvfWWGRsbM8Fg0Kxbt872vJLsSS+//LJ59913zc2bN83ExIR54oknliwfzz//vInFYubixYtm69attuefZH95OXHihLl48aIZHBw0b7zxhqmqqkq8/9ChQyYWi5lIJGK2b99ue/5JxUtf+MIXjDHGDA4Omv7+ftPf32/a29upX0hZlxXqFlKqdO+995p33nnHDA4OmqGhIfODH/zASLNt3r6+PhONRs2pU6dMRUWFkWRWr15tTp06ZaLRqOnr6zMbNmzI+BkrPvwBAAAAAFDCHD3sEwAAAACQHwR/AAAAAOABBH8AAAAA4AEEfwAAAADgAQR/AAAAAOABBH8AAAAA4AEEfwAAAADgAf8Dh9scYLrNdmIAAAAASUVORK5CYII=\n"},"metadata":{}}],"source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(15, 15))\n","nrows, ncols = 2, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols,\n","                        height_ratios=[3, 1]\n","                        )\n","\n","ax = fig.add_subplot(gs[0])\n","\n","# ------ candles ------ #\n","candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","# _ = [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","\n","len_df = len(t_df)   \n","len_df_range = np.arange(len_df).astype(int)\n","\n","# ============ ============ ============ #\n","# ============ ============ ============ #\n","\n","wave_high_fill_ = t_df['wave_high_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_low_fill_ = t_df['wave_low_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_high_terms_cnt_fill_ = t_df['wave_high_terms_cnt_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_low_terms_cnt_fill_ = t_df['wave_low_terms_cnt_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","wave_cu_idx_ = get_index_bybool(t_df['wave_cu_{}{}'.format(wave_itv1, wave_period1)].to_numpy(), len_df_range)\n","wave_co_idx_ = get_index_bybool(t_df['wave_co_{}{}'.format(wave_itv1, wave_period1)].to_numpy(), len_df_range)\n","# wave_cu_bool_idx_ = get_index_bybool(t_df['wave_cu_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy(), len_df_range)\n","# wave_co_bool_idx_ = get_index_bybool(t_df['wave_co_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy(), len_df_range)\n","wave_update_low_cu_bool_idx_ = get_index_bybool(t_df['wave_update_low_cu_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy(), len_df_range)\n","wave_update_high_co_bool_idx_ = get_index_bybool(t_df['wave_update_high_co_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy(), len_df_range)\n","\n","wave_cu_prime_idx_ = t_df['wave_cu_prime_idx_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_co_prime_idx_ = t_df['wave_co_prime_idx_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_cu_prime_idx_fill_ = t_df['wave_cu_prime_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_co_prime_idx_fill_ = t_df['wave_co_prime_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","wave_cu_post_idx_ = t_df['wave_cu_post_idx_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_co_post_idx_ = t_df['wave_co_post_idx_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_cu_post_idx_fill_ = t_df['wave_cu_post_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_co_post_idx_fill_ = t_df['wave_co_post_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","wave_cu_marker_ = t_df['wave_cu_marker_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","wave_co_marker_ = t_df['wave_co_marker_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","# high_prime_idx = t_df['wave_high_prime_idx_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","# low_prime_idx = t_df['wave_low_prime_idx_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","# high_prime_idx_fill = t_df['wave_high_prime_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","# low_prime_idx_fill = t_df['wave_low_prime_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","# ============ plot_check ============ #\n","# dc_base_ = t_df['dc_base_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","# plt.step(len_df_range, dc_base_, alpha=1.0, color='cyan', linewidth=1)\n","\n","plt.step(len_df_range, wave_cu_marker_, \"o\", alpha=1.0, color='#ff00ff', markersize=3)\n","plt.step(len_df_range, wave_co_marker_, \"o\", alpha=1.0, color='#00ff00', markersize=3)\n","\n","plt.step(len_df_range, t_df['dc_upper_{}{}'.format(wave_itv1, wave_period1)], color='#ffeb3b')\n","plt.step(len_df_range, t_df['dc_lower_{}{}'.format(wave_itv1, wave_period1)], color='#ffeb3b')\n","\n","# [plt.axvline(int(idx_), color=\"#ff0000\") for idx_ in wave_cu_bool_idx_ if not np.isnan(idx_)]\n","# [plt.axvline(int(idx_), color=\"#0000ff\") for idx_ in wave_co_bool_idx_ if not np.isnan(idx_)]\n","[plt.axvline(int(idx_), color=\"#ff0000\") for idx_ in wave_update_low_cu_bool_idx_ if not np.isnan(idx_)]\n","[plt.axvline(int(idx_), color=\"#0000ff\") for idx_ in wave_update_high_co_bool_idx_ if not np.isnan(idx_)]\n","\n","# [plt.axvline(int(idx_), color=\"#ff00ff\") for idx_ in wave_cu_idx_ if not np.isnan(idx_)]\n","# [plt.axvline(int(idx_), color=\"#00ff00\") for idx_ in wave_co_idx_ if not np.isnan(idx_)]\n","\n","# [plt.axvline(int(idx_), color=\"#00ff00\") for idx_ in wave_high_prime_idx if not np.isnan(idx_)]\n","# [plt.axvline(int(idx_), color=\"#ff00ff\") for idx_ in wave_low_prime_idx if not np.isnan(idx_)]\n","\n","plt.step(len_df_range, wave_high_fill_, \"*\", alpha=1.0, color='#00ff00', markersize=6)\n","plt.step(len_df_range, wave_low_fill_, \"*\", alpha=1.0, color='#ff00ff', markersize=6)\n","\n","# ------ data check in gs[0] ------ #\n","plt.axvline(wave_cu_post_idx_fill_[230], color='r')\n","plt.axvline(wave_cu_prime_idx_fill_[230])\n","\n","plt.xlim(0, len_df)\n","\n","plt.subplot(gs[1])\n","\n","# --- cci --- #\n","cci_ = t_df['cci_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","plt.step(len_df_range, cci_, alpha=1.0, color='yellow', linewidth=2)\n","plt.axhline(100, color=\"#ffffff\")\n","plt.axhline(-100, color=\"#ffffff\")\n","\n","# --- stoch --- #\n","# stoch_ = t_df['stoch_{}{}33'.format(wave_itv1, wave_period1)].to_numpy()\n","# plt.step(len_df_range, stoch_, alpha=1.0, color='yellow', linewidth=2)\n","# plt.axhline(67, color=\"#ffffff\")\n","# plt.axhline(33, color=\"#ffffff\")\n","\n","[plt.axvline(int(idx_), color=\"#ff00ff\") for idx_ in wave_cu_idx_ if not np.isnan(idx_)]\n","[plt.axvline(int(idx_), color=\"#00ff00\") for idx_ in wave_co_idx_ if not np.isnan(idx_)]   # long 이라서 초록색임\n","\n","# plt.step(len_df_range, wave_high_terms_cnt_fill_, alpha=1.0, color='yellow', linewidth=2)\n","# plt.step(len_df_range, wave_low_terms_cnt_fill_, alpha=1.0, color='yellow', linewidth=2)\n","# plt.step(len_df_range, wave_high_terms_cnt_fill_, \"*\", alpha=1.0, color='#00ff00', markersize=6)\n","# plt.step(len_df_range, wave_low_terms_cnt_fill_, \"*\", alpha=1.0, color='#ff00ff', markersize=6)\n","\n","\n","plt.xlim(0, len_df)  # for sync. with gs[0]\n","\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"c2yVTn1tnxMn"},"source":["###### data_window"]},{"cell_type":"code","source":["# print(valid_high_prime_idx)  # = valid_co_prime_idx\n","# print(roll_prev_high_idx_arr)   # = roll_prev_co_idx_arr\n","print(valid_low_prime_idx)  # = valid_co_prime_idx\n","print(roll_prev_low_idx_arr)   # = roll_prev_co_idx_arr"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6bra-Br3lq1h","executionInfo":{"status":"ok","timestamp":1660483201485,"user_tz":-540,"elapsed":351,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"8c90e368-24c7-439e-9733-567d4848859a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[ 39  45 124 164]\n","[[ 39  45 124]\n"," [ 45 124 164]]\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":345,"status":"ok","timestamp":1660484147094,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"0DgdFydfB1f-","outputId":"1677cb32-6a71-4292-b49a-204f7da8ed20"},"outputs":[{"output_type":"stream","name":"stdout","text":["145.0\n","239.0\n"]}],"source":["idx = 239\n","# print(wave_cu_post_idx_fill_[idx])\n","# print(wave_co_prime_idx_fill_[idx - 1])\n","# print(wave_co_post_idx_fill_[idx - 1])\n","# print(wave_co_prime_idx_fill_[idx])\n","print(wave_co_post_idx_fill_[int(wave_cu_post_idx_fill_[idx])])\n","print(wave_co_idx_[idx])\n","\n","# print(len(t_df))\n","# len(wave_co_prime_idx_fill_)"]},{"cell_type":"code","source":["wave_co_idx_[~np.isnan(wave_co_idx_)]"],"metadata":{"id":"7zLNu-8gjeJ1"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zj_d5wsfDzf_"},"outputs":[],"source":["roll_hl_cnt = 3\n","high_prime_idx = t_df['wave_high_prime_idx_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","low_prime_idx = t_df['wave_low_prime_idx_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","valid_high_prime_idx = high_prime_idx[~np.isnan(high_prime_idx)].astype(int)  # roll_high 를 위한 prime_idx\n","valid_low_prime_idx = low_prime_idx[~np.isnan(low_prime_idx)].astype(int)  # roll_low 를 위한 prime_idx\n","\n","roll_high_idx_arr = np.array([valid_high_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_high_prime_idx)) if\n","                              idx_ + 1 >= roll_hl_cnt])  # cnt 수를 만족시키기 위해 idx 제한\n","roll_low_idx_arr = np.array(\n","    [valid_low_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_low_prime_idx)) if idx_ + 1 >= roll_hl_cnt])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Z-EokTzIqb-T"},"outputs":[],"source":["%timeit -n1 -r1 wave_range_v10(res_df[-100000:], period1, ltf_df=None) # 23.7 s per loop\n","%timeit -n1 -r1 wave_range_v11(res_df[-100000:], period1, ltf_df=None) # 574 ms per loop"]},{"cell_type":"markdown","metadata":{"id":"Q_1wJTcRYpm8"},"source":["##### legacy"]},{"cell_type":"code","source":["def get_next_fibo_gap(x):\n","  if 0 < x < 0.214:\n","    return -0.786\n","  elif 0.214 < x < 0.382:\n","    return -0.618\n","  elif 0.382 < x < 0.5:\n","    return -0.5\n","  elif 0.5 < x < 0.618:\n","    return -0.382\n","  elif 0.618 < x < 0.764:\n","    return -0.236\n","  elif 0.764 < x < 1:\n","    return 0\n","  else:\n","    return np.nan # 일단은, wrr_32 < 1 만 허용키로.\n","\n","\n","def get_next_fibo_gap2(x):\n","  if 0 < x < 0.214:\n","    return -0.618\n","  elif 0.214 < x < 0.382:\n","    return -0.5\n","  elif 0.382 < x < 0.5:\n","    return -0.382\n","  elif 0.5 < x < 0.618:\n","    return -0.236\n","  elif 0.618 < x < 0.764:\n","    return 0\n","  elif 0.764 < x < 1:\n","    return 0\n","  else:\n","    return np.nan # 일단은, wrr_32 < 1 만 허용키로."],"metadata":{"id":"Bmp7faPhzydp"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"02DcTVB2cYuR"},"source":["##### dump"]},{"cell_type":"code","source":["roll_hl_cnt = 3\n","wave_itv = pd.infer_freq(t_df.index)\n","wave_period = config.tr_set.wave_period\n","\n","len_df = len(t_df)\n","\n","high_prime_idx = t_df['wave_high_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()   # cu_post_idx\n","low_prime_idx = t_df['wave_low_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()    \n","\n","valid_high_prime_idx = high_prime_idx[~np.isnan(high_prime_idx)].astype(int)  # roll_high 를 위한 prime_idx\n","valid_low_prime_idx = low_prime_idx[~np.isnan(low_prime_idx)].astype(int)  # roll_low 를 위한 prime_idx\n","\n","roll_high_idx_arr = np.array([valid_high_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_high_prime_idx)) if idx_ + 1 >= roll_hl_cnt])  # cnt 수를 만족시키기 위해 idx 제한\n","roll_low_idx_arr = np.array([valid_low_prime_idx[idx_ + 1 - roll_hl_cnt:idx_ + 1] for idx_ in range(len(valid_low_prime_idx)) if idx_ + 1 >= roll_hl_cnt])\n"],"metadata":{"id":"fjGcs9ngkh5s"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["t_df = cci_v2(t_df, wave_period)\n","\n","cci_ = t_df['cci_{}{}'.format(itv, wave_period)].to_numpy()\n","b1_cci_ = t_df['cci_{}{}'.format(itv, wave_period)].shift(1).to_numpy()\n","\n","band_width = 100\n","upper_band = band_width\n","lower_band = -band_width\n","\n","len_df = len(t_df)\n","len_df_range = np.arange(len_df).astype(int)\n","\n","data_cols = ['open', 'high', 'low', 'close']\n","open, high, low, close = [t_df[col_].to_numpy() for col_ in data_cols]\n","# b1_close = t_df.close.shift(itv_num).to_numpy()\n","\n","# ============ modules ============ #\n","# ------ define co, cu ------ # <- point missing 과 관련해 정교해아함\n","cu_bool = (b1_cci_ > upper_band) & (upper_band > cci_)\n","co_bool = (b1_cci_ < lower_band) & (lower_band < cci_)\n","\n","cu_idx = get_index_bybool(cu_bool, len_df_range)\n","co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","cu_fill_idx, co_fill_idx, cu_prime_idx, co_prime_idx, cu_prime_fill_idx, co_prime_fill_idx, valid_cu_bool, valid_co_bool = get_terms_info_v4(\n","    cu_idx, co_idx, len_df, len_df_range)\n","\n","# ------ get post_terms ------ #\n","high_post_terms = np.vstack((co_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","low_post_terms = np.vstack((cu_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)\n","\n","high_post_terms_cnt = high_post_terms[:, 1] - high_post_terms[:, 0]\n","low_post_terms_cnt = low_post_terms[:, 1] - low_post_terms[:, 0]\n","\n","paired_post_cu_idx = high_post_terms[:, 1]\n","paired_post_co_idx = low_post_terms[:, 1]\n","\n","# ------ get prime_terms ------ # # 기본은 아래 logic 으로 수행하고, update_hl 도 해당 term 구간의 hl 이 더 작거나 클경우 적용 가능할 것\n","# high_prime_terms = np.vstack((co_prime_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","# low_prime_terms = np.vstack((cu_prime_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)\n","\n","# high_prime_terms_cnt = high_prime_terms[:, 1] - high_prime_terms[:, 0]\n","# low_prime_terms_cnt = low_prime_terms[:, 1] - low_prime_terms[:, 0]\n","\n","# paired_prime_cu_idx = high_prime_terms[:, 1]\n","# paired_prime_co_idx = low_prime_terms[:, 1]\n","\n","# ====== get wave_hl & terms ====== #\n","wave_high_ = np.full(len_df, np.nan)\n","wave_low_ = np.full(len_df, np.nan)\n","\n","wave_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_post_terms])\n","wave_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_post_terms])\n","\n","wave_high_[paired_post_cu_idx] = wave_highs\n","wave_low_[paired_post_co_idx] = wave_lows\n","\n","wave_high_fill_ = fill_arr(wave_high_)\n","wave_low_fill_ = fill_arr(wave_low_)\n","\n","# ------ Todo, update_hl 에 대해서, post_terms_hl 적용 ------ #\n","wave_high_terms_low_ = np.full(len_df, np.nan)\n","wave_low_terms_high_ = np.full(len_df, np.nan)\n","\n","wave_high_terms_lows = np.array([low[iin:iout + 1].min() for iin, iout in high_post_terms])  # for point rejection, Todo, min_max 설정 항상 주의\n","wave_low_terms_highs = np.array([high[iin:iout + 1].max() for iin, iout in low_post_terms])\n","\n","wave_high_terms_low_[paired_post_cu_idx] = wave_high_terms_lows\n","wave_low_terms_high_[paired_post_co_idx] = wave_low_terms_highs\n","\n","update_low_cu_bool = wave_high_terms_low_ < wave_low_fill_\n","update_high_co_bool = wave_low_terms_high_ > wave_high_fill_\n","\n","# ------ term cnt ------ #\n","wave_high_terms_cnt_ = np.full(len_df, np.nan)\n","wave_low_terms_cnt_ = np.full(len_df, np.nan)\n","\n","wave_high_terms_cnt_[paired_post_cu_idx] = high_post_terms_cnt\n","wave_low_terms_cnt_[paired_post_co_idx] = low_post_terms_cnt\n","\n","wave_high_terms_cnt_fill_ = fill_arr(wave_high_terms_cnt_)\n","wave_low_terms_cnt_fill_ = fill_arr(wave_low_terms_cnt_)\n","\n","# ------ hl_fill 의 prime_idx 를 찾아야함 ------ #\n","# b1_wave_high_fill_ = pd.Series(wave_high_fill_).shift(1).to_numpy()\n","# b1_wave_low_fill_ = pd.Series(wave_low_fill_).shift(1).to_numpy()\n","# wave_high_prime_idx = np.where((wave_high_fill_ != b1_wave_high_fill_) & ~np.isnan(wave_high_fill_), len_df_range, np.nan)\n","# wave_low_prime_idx = np.where((wave_low_fill_ != b1_wave_low_fill_) & ~np.isnan(wave_low_fill_), len_df_range, np.nan)\n","#\n","# high_prime_idx_fill_ = fill_arr(wave_high_prime_idx)\n","# low_prime_idx_fill_ = fill_arr(wave_low_prime_idx)\n","\n","# ============ enlist to df_cols ============ #\n","t_df['wave_high_fill_{}{}'.format(itv, wave_period)] = wave_high_fill_\n","t_df['wave_low_fill_{}{}'.format(itv, wave_period)] = wave_low_fill_\n","t_df['wave_high_terms_cnt_fill_{}{}'.format(itv, wave_period)] = wave_high_terms_cnt_fill_\n","t_df['wave_low_terms_cnt_fill_{}{}'.format(itv, wave_period)] = wave_low_terms_cnt_fill_\n","\n","# ------ for roll prev_hl ------ #\n","# high_post_idx 를 위해 co_prime_idx 입력\n","t_df['wave_high_prime_idx_{}{}'.format(itv, wave_period)] = co_prime_idx # co_prime_idx wave_high_prime_idx  # high 갱신을 고려해, prev_hl 는 prime_idx 기준으로 진행\n","t_df['wave_low_prime_idx_{}{}'.format(itv, wave_period)] = cu_prime_idx # cu_prime_idx wave_low_prime_idx  # cu_prime_idx's low 를 사용하겠다라는 의미, 즉 roll_prev 임\n","\n","# ------ for first_high ------ #\n","t_df['wave_high_prime_idx_fill_{}{}'.format(itv, wave_period)] = co_prime_fill_idx # co_prime_fill_idx high_prime_idx_fill_\n","t_df['wave_low_prime_idx_fill_{}{}'.format(itv, wave_period)] = cu_prime_fill_idx # cu_prime_fill_idx low_prime_idx_fill_\n","\n","# ------ for plot_checking ------ #\n","t_df['wave_cu_bool_{}{}'.format(itv, wave_period)] = cu_bool  # temporary, for plot_check\n","t_df['wave_co_bool_{}{}'.format(itv, wave_period)] = co_bool\n","t_df['wave_cu_{}{}'.format(itv, wave_period)] = cu_bool * ~update_low_cu_bool\n","t_df['wave_co_{}{}'.format(itv, wave_period)] = co_bool * ~update_high_co_bool\n","t_df['wave_cu_marker_{}{}'.format(itv, wave_period)] = get_line(cu_idx, close)\n","t_df['wave_co_marker_{}{}'.format(itv, wave_period)] = get_line(co_idx, close)\n","# t_df['update_low_cu_bool_{}{}'.format(itv, wave_period)] = update_low_cu_bool\n","# t_df['update_high_co_bool_{}{}'.format(itv, wave_period)] = update_high_co_bool\n","\n","if itv != 'T':\n","    join_cols = np.arange(-15, 0, 1).astype(int)  # wave vars. + wave_unit's col\n","    res_df.drop(t_df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","    try:\n","        res_df = res_df.join(to_lower_tf_v3(res_df, t_df, join_cols, backing_i=0), how='inner')\n","    except Exception as e:\n","        print(\"error in wave_range()'s join() :\", e)\n","\n","    return res_df\n","\n","else:\n","    return t_df"],"metadata":{"id":"CLYKs7ItkgIa"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Go7ARIUhfC1g"},"outputs":[],"source":["\n","\n","def get_roll_wave_data_v2(valid_prime_idx, roll_idx_arr, len_df, data, roll_prev_hl_cnt):\n","\n","    roll_data = pd.DataFrame(np.full((len_df, roll_prev_hl_cnt), np.nan))\n","    roll_data.iloc[valid_prime_idx[roll_prev_hl_cnt:], :] = data[roll_idx_arr]  # 제한된 idx 를 제외한 row 에 roll_hl 입력\n","\n","    return roll_data.ffill().to_numpy()\n","\n","def roll_wave_hl_v5(t_df, config, roll_prev_hl_cnt=3):\n","  \n","    wave_itv = pd.infer_freq(t_df.index)\n","    wave_period = config.tr_set.wave_period\n","\n","    len_df = len(t_df)\n","\n","    high_prime_idx = t_df['wave_high_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","    low_prime_idx = t_df['wave_low_prime_idx_{}{}'.format(wave_itv, wave_period)].to_numpy()    \n","\n","    valid_high_prime_idx = high_prime_idx[~np.isnan(high_prime_idx)].astype(int)  # roll_high 를 위한 prime_idx\n","    valid_low_prime_idx = low_prime_idx[~np.isnan(low_prime_idx)].astype(int)  # roll_low 를 위한 prime_idx\n","\n","    roll_prev_high_idx_arr = np.array([valid_high_prime_idx[idx_ - roll_prev_hl_cnt:idx_] for idx_ in range(len(valid_high_prime_idx)) if idx_ >= roll_prev_hl_cnt])  # cnt 수를 만족시키기 위해 idx 제한\n","    roll_prev_low_idx_arr = np.array([valid_low_prime_idx[idx_ - roll_prev_hl_cnt:idx_] for idx_ in range(len(valid_low_prime_idx)) if idx_ >= roll_prev_hl_cnt])\n","\n","    return valid_high_prime_idx, valid_low_prime_idx, roll_prev_high_idx_arr, roll_prev_low_idx_arr"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pgA8QqyXZ66o"},"outputs":[],"source":["t_df[roll_cols].tail(100)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wF7fKJ3mOhaf"},"outputs":[],"source":["data_col = 'wave_high_fill_{}{}'.format(wave_itv1, wave_period1)\n","data = htf_df[data_col].to_numpy()\n","len_htf_df = len(htf_df)\n","\n","\n","roll_data = pd.DataFrame(index=htf_df.index, data=np.full((len_htf_df, roll_hl_cnt), np.nan))\n","roll_data.iloc[valid_high_prime_idx[roll_hl_cnt - 1:], :] = data[roll_prev_high_idx_arr]  # 제한된 idx 를 제외한 row 에 roll_hl 입력\n","\n","# roll_data.ffill()\n","htf_df[roll_cols] = roll_data.ffill()\n","htf_df[roll_cols]\n","\n","# htf_df[roll_cols] = np.nan\n","# htf_df[roll_cols].iloc[valid_high_prime_idx[roll_hl_cnt - 1:]] = data[roll_prev_high_idx_arr]  # 제한된 idx 를 제외한 row 에 roll_hl 입력\n","\n","# htf_df[roll_cols] = htf_df[roll_cols].ffill().to_numpy()\n","\n","# valid_high_prime_idx\n","# np.sum(~np.isnan(roll_high))\n","# htf_df[roll_cols]\n","# roll_prev_low_idx_arr"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3vHLGont-BFe"},"outputs":[],"source":["# t_df\n","to_lower_tf_v2(res_df, t_df, join_cols)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Mh3w2s-j34Zs"},"outputs":[],"source":["wave_post_highs = np.array([high[iin:iout + 1].max() for iin, iout in high_post_terms])\n","wave_post_lows = np.array([low[iin:iout + 1].min() for iin, iout in low_post_terms])\n","\n","# print(len(paired_cu_idx))\n","# print(len(wave_post_highs))\n","# print(len(cu_bool))\n","\n","update_paired_cu_bool = (cu_bool * (wave_high_terms_low_ < wave_low_fill_))[paired_cu_idx]\n","update_paired_cu_idx = paired_cu_idx[update_paired_cu_bool]\n","wave_high_[update_paired_cu_idx] = wave_post_highs[update_paired_cu_bool]\n","\n","update_paired_co_bool = (co_bool * (wave_low_terms_high_ > wave_high_fill_))[paired_co_idx]\n","update_paired_co_idx = paired_co_idx[update_paired_co_bool]\n","wave_low_[update_paired_co_idx] = wave_post_lows[update_paired_co_bool]\n","\n","wave_high_fill2_ = fill_arr(wave_high_)\n","wave_low_fill2_ = fill_arr(wave_low_)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1651799326382,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"eQ06-kWq4m6F","outputId":"5c5df956-4fbd-4aa4-e1d6-dc5d0c23ac19"},"outputs":[{"name":"stdout","output_type":"stream","text":["11\n","11\n"]}],"source":["# wave_post_highs\n","# update_cu_bool = (cu_bool * (wave_high_terms_low_ < wave_low_fill_))[paired_cu_idx]\n","# print(paired_cu_idx[update_cu_bool])\n","# print(paired_cu_idx)\n","print(len(update_paired_cu_idx))\n","print(len(wave_post_highs[update_paired_cu_bool]))\n","# print(high_prime_terms[:, 1])\n","# print(high_post_terms[:, 1])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SUFmr9Z_kcCN"},"outputs":[],"source":["cu_idx = get_index_bybool(cu_bool, len_df_range)\n","co_idx = get_index_bybool(co_bool, len_df_range)\n","\n","cu_fill_idx = fill_arr(cu_idx)\n","co_fill_idx = fill_arr(co_idx)\n","\n","notnan_cu_bool = ~np.isnan(cu_idx)\n","notnan_co_bool = ~np.isnan(co_idx)\n","\n","# ------ 생략된 idx 에 대한 prime_idx 탐색 ------ #\n","high_bool = cu_fill_idx < co_fill_idx  # 이렇게 해야 high_terms[:, 1] 이 cu_idx 가 나옴\n","low_bool = co_fill_idx < cu_fill_idx\n","\n","high_terms_vec = get_index_bybool(high_bool, len_df_range)\n","low_terms_vec = get_index_bybool(low_bool, len_df_range) # -> low_terms\n","\n","high_terms_list = using_clump(high_terms_vec)\n","low_terms_list = using_clump(low_terms_vec)\n","\n","valid_cu_prime_idx = np.array([terms.min() for terms in low_terms_list])\n","valid_co_prime_idx = np.array([terms.min() for terms in high_terms_list])\n","\n","cu_prime_idx = np.full(len_df, np.nan)\n","co_prime_idx = np.full(len_df, np.nan)\n","\n","cu_prime_idx[valid_cu_prime_idx] = valid_cu_prime_idx\n","co_prime_idx[valid_co_prime_idx] = valid_co_prime_idx\n","\n","cu_prime_fill_idx = fill_arr(cu_prime_idx)\n","co_prime_fill_idx = fill_arr(co_prime_idx)\n","\n","# ------ get co, cu terms_v2 ------ # # 기본은 아래 logic 으로 수행하고, update_hl 도 해당 term 구간의 hl 이 더 작거나 클경우 적용 가능할 것\n","valid_cu_bool = notnan_cu_bool * ~np.isnan(co_fill_idx) * ~np.isnan(co_prime_fill_idx)\n","valid_co_bool = notnan_co_bool * ~np.isnan(cu_fill_idx) * ~np.isnan(cu_prime_fill_idx)\n","\n","high_post_terms = np.vstack((co_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","low_post_terms = np.vstack((cu_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)\n","\n","high_terms_cnt = high_post_terms[:, 1] - high_post_terms[:, 0] \n","low_terms_cnt = low_post_terms[:, 1] - low_post_terms[:, 0] \n","\n","high_prime_terms = np.vstack((co_prime_fill_idx[valid_cu_bool], cu_idx[valid_cu_bool])).T.astype(int)\n","low_prime_terms = np.vstack((cu_prime_fill_idx[valid_co_bool], co_idx[valid_co_bool])).T.astype(int)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_3pOQtt2ttfk"},"outputs":[],"source":["# co_prime_idx\n","# co_prime_fill_idx\n","high_prime_terms"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6,"status":"ok","timestamp":1651756811396,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"kKaD1fK3WPRP","outputId":"bbe470f3-17d0-4029-97e9-2fb383a0c752"},"outputs":[{"data":{"text/plain":["array([nan,  2.,  7.,  2.,  4.,  2.,  7.,  5.,  4.,  6.,  9.,  2.,  5., 11., 14.])"]},"execution_count":79,"metadata":{},"output_type":"execute_result"}],"source":["#  get_index_bybool(notnan_cu_bool, len_df_range)\n","valid_cu_idx = cu_idx[notnan_cu_bool]\n","valid_shift_cu_idx = pd.Series(valid_cu_idx).shift(1).to_numpy()\n","valid_co_idx = co_idx[notnan_co_bool]\n","valid_shift_co_idx = pd.Series(valid_co_idx).shift(1).to_numpy()\n","\n","valid_cu_idx - valid_shift_cu_idx\n","valid_co_idx - valid_shift_co_idx"]},{"cell_type":"markdown","metadata":{"id":"1MNVIExLULhJ"},"source":["#### legacy"]},{"cell_type":"markdown","metadata":{"id":"EOXQbXixiQcK"},"source":["##### volume_profile"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7pFuazxpgx9B"},"outputs":[],"source":["session_df = res_df_.iloc[-1440:] # 0.159 -> 0.024 (14400 -> 1440)\n","volume = session_df['volume'].to_numpy()\n","close = session_df['close'].to_numpy()\n","# px.histogram(session_df, x='volume', y='close', nbins=150, orientation='h').show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SoPJkiyKiXLM"},"outputs":[],"source":["kde_factor = 0.05\n","num_samples = 100\n","\n","start_0 = time.time()\n","kde = stats.gaussian_kde(close,weights=volume,bw_method=kde_factor)\n","kdx = np.linspace(close.min(),close.max(),num_samples)\n","kdy = kde(kdx)\n","ticks_per_sample = (kdx.max() - kdx.min()) / num_samples\n","print(\"ticks_per_sample :\", ticks_per_sample)  # sample 당 가격\n","print(\"kdy elapsed_time :\", time.time() - start_0)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mK2jBddAxJ14"},"outputs":[],"source":["peaks,_ = signal.find_peaks(kdy)\n","pkx = kdx[peaks]\n","pky = kdy[peaks]\n","\n","plt.figure(figsize=(10,5))\n","# plt.hist(close, bins=num_samples, weights=volume, alpha=.8, color='#1592e6')\n","# plt.plot(kdx, kdy, color='white')\n","# plt.plot(pkx, pky, 'bo', color='yellow')\n","plt.plot(kdy, kdx, color='white')\n","plt.plot(pky, pkx, 'bo', color='yellow')\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"a8tpQZCy0SO1"},"outputs":[],"source":["pkx"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gfA946s8UgS0"},"outputs":[],"source":["# ------ vp 의 indi. 화가 필요함 -> point 설정 ------ #\n","# 1. 4 level 은 미리 만들어놓는게 맞는걸로 보임 -> 추종하는 function 이 많음 (utils_tr, ep_out ...)\n","#   a. 4 level 에 국한하는게 아니라, 모든 peaks 에 대해 levels 설정\n","#   b. 각 session 별로 peak_list 가 주어질 것\n","#     i. prev_data 사용해야하는점 주의 (session vp 는 future_data)"]},{"cell_type":"markdown","metadata":{"id":"3T-9FwWFXR4f"},"source":["###### prominence_info"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RmBt2agljClE"},"outputs":[],"source":["start_0 = time.time()\n","min_prom = kdy.max() * 0.0\n","pipsize = 0.01\n","max_width_pips = 20\n","# width_range=(1, max_width_pips * pipsize / ticks_per_sample)\n","width_range= max_width_pips * pipsize / ticks_per_sample\n","peaks, peak_props = signal.find_peaks(kdy, prominence=min_prom, width=width_range)\n","\n","peak_x = kdx[peaks]\n","peak_y = kdy[peaks]\n","# ------ prominence lines ------ #\n","left_base = peak_props['left_bases']\n","right_base = peak_props['right_bases']\n","line_x = peak_x\n","line_y0 = peak_y\n","line_y1 = peak_y # - peak_props['prominences']\n","print(\"prom_line elapsed_time :\", time.time() - start_0)\n","\n","\n","for x, y0, y1 in zip(line_x, line_y0, line_y1):\n","    fig.add_shape(type='line',\n","        xref='x', yref='y',\n","        # x0=x, y0=y0, x1=x, y1=y1,\n","        x0=x, y0=0, x1=x, y1=y1,\n","        line=dict(\n","            color='red',\n","            width=2,\n","        )\n","    )\n","\n","# ------ width ------ #\n","left_ips = peak_props['left_ips']\n","right_ips = peak_props['right_ips']\n","# width_x0 = kdx.min() + (left_ips * ticks_per_sample)\n","# width_x1 = kdx.min() + (right_ips * ticks_per_sample)\n","width_x0 = kdx.min() + (left_base * ticks_per_sample)\n","width_x1 = kdx.min() + (right_base * ticks_per_sample)\n","\n","# int_from = kdx.min() + (left_base * ticks_per_sample)\n","# int_to = kdx.min() + (right_base * ticks_per_sample)\n","# [kde.integrate_box_1d(x0, x1) for x0, x1 in zip(int_from, int_to)]\n","\n","width_y = peak_props['width_heights']\n","\n","for x0, x1, y in zip(width_x0, width_x1, width_y):\n","    fig.add_shape(type='line',\n","        xref='x', yref='y',\n","        x0=x0, y0=y, x1=x1, y1=y,\n","        line=dict(\n","            color='red',\n","            width=2,\n","        )\n","    )\n","fig.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zqj944n-WzyZ"},"outputs":[],"source":["# peaks  # ndarray\n","# kdx  # ndarray\n","# kdy  # ndarray\n","# kdx.min()\n","left_base * ticks_per_sample\n","# volume"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Rvqv0RGojo9h"},"outputs":[],"source":["print(peak_y)\n","print(peak_props['prominences'])\n","peak_props"]},{"cell_type":"markdown","metadata":{"id":"c2729DJ6h720"},"source":["##### imb."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Rucj-iepiR_-"},"outputs":[],"source":["t_df = res_df_.iloc[-120:-100]\n","a_data = t_df.to_numpy()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ktm1aB-Bh7GH"},"outputs":[],"source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(15, 9))\n","nrows, ncols = 1, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        # height_ratios=[3, 1]\n","                        )\n","\n","ax = fig.add_subplot(gs[0])\n","\n","# ------ candles ------ #\n","candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","_ = [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jMQBhQ1Ljt5Y"},"outputs":[],"source":["def imb_ratio_v4(df, itv):\n","\n","  itv_num = to_itvnum(itv)\n","\n","  close = df['close_{}'.format(itv)].to_numpy()\n","  open = df['open_{}'.format(itv)].to_numpy()\n","\n","  b1_close = df['close_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_open = df['open_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_high = df['high_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_low = df['low_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","  body_range = abs(close - open)\n","  b1_body_range = abs(b1_close - b1_open)\n","\n","  df['body_rel_ratio_{}'.format(itv)] = body_range / b1_body_range\n","\n","  short_body_range = np.where(close <= b1_low, body_range, b1_body_range)\n","  long_body_range = np.where(close >= b1_high, body_range, b1_body_range)\n","\n","  # 추후에 통계 측정해야함 -> bir 에 따른 개별 trader 의 epout / tpep 이라던가 => short 에 양봉은 취급안함 (why use np.nan)\n","  df['short_ir_{}'.format(itv)] = np.where(close < open, (b1_low - close) / short_body_range, np.nan) # close < open & close < b1_low\n","  df['long_ir_{}'.format(itv)] = np.where(close > open, (close - b1_high) / long_body_range, np.nan) # close > open & close > b1_high\n","\n","  return"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"I1Vq_BiKpY3P"},"outputs":[],"source":["def imb_ratio_v3(df, itv):\n","\n","  itv_num = to_itvnum(itv)\n","\n","  # high = df['high_{}'.format(itv)].to_numpy()\n","  # low = df['low_{}'.format(itv)].to_numpy()\n","  # candle_range = high - low\n","\n","  close = df['close_{}'.format(itv)].to_numpy()\n","  open = df['open_{}'.format(itv)].to_numpy()\n","\n","  b1_close = df['close_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_open = df['open_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_high = df['high_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_low = df['low_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","  body_range = abs(close - open)\n","  b1_body_range = abs(b1_close - b1_open)\n","\n","  df['body_rel_ratio_{}'.format(itv)] = body_range / b1_body_range\n","\n","  short_body_ratio = np.where(close <= b1_low, body_range, b1_body_range)\n","  long_body_range = np.where(close >= b1_high, body_range, b1_body_range)\n","\n","  # 추후에 통계 측정해야함 -> bir 에 따른 개별 trader 의 epout / tpep 이라던가 => short 에 양봉은 취급안함 (why use np.nan)\n","  df['short_ir_{}'.format(itv)] = np.where(close < open, (b1_low - close) / body_range, np.nan) # close < open & close < b1_low\n","  df['long_ir_{}'.format(itv)] = np.where(close > open, (close - b1_high) / body_range, np.nan) # close > open & close > b1_high\n","\n","  return"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mtnMUkhwkdrE"},"outputs":[],"source":["imb_ratio(t_df, \"5T\")\n","# imb_ratio_v3(t_df, \"5T\")\n","# imb_ratio_v4(t_df, \"5T\")\n","\n","t_df.tail(100).short_ir_5T  # .461871\n","# t_df.iloc[:, -10:]\n","# t_df.dtypes"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RVUs1YE_pgBI"},"outputs":[],"source":["# imb_ratio(t_df, \"5T\")\n","# imb_ratio_v3(t_df, \"5T\")\n","imb_ratio_v4(t_df, \"5T\")\n","\n","t_df.tail(100).short_ir_5T  # .461871\n","# t_df.iloc[:, -10:]\n","# t_df.dtypes"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"bieHiKjBkuFL"},"outputs":[],"source":["# ------ rtc 1, 0 개념 ------ #\n","# short_rtc_1 = close\n","# short_rtc_0 = b1_low\n","\n","# long_rtc_1 = close\n","# long_rtc_0 = b1_high\n","\n","# rtc 로 활용하려면, col 로 추가해야할 것 -> 추가할만한 col_name 은 아님\n","# 1. h_candle 인 경우 -> ?\n","#   a. h_candle_v3 먹이고, open_{}.shift(num_itv).to_numpy() 진행 -> ex. res_df['close_{}'.format(hc_itv)].shift(itv_num).to_numpy() "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3X6bMXJIjPYy"},"outputs":[],"source":["# 1. 현재 종가 - 이전 고가 = imb_range (long)\n","long_imb_range = t_df.close - t_df.high.shift(1)\n","# 2. 이전 저가 - 현재 종가 - imb_range (short)\n","short_imb_range = t_df.low.shift(1) - t_df.close"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"q1nEA19v7Qpj"},"outputs":[],"source":["from math import floor\n","\n","\n","def _calc_dev(base_price, price):\n","    return 100 * (price - base_price) / base_price\n","\n","\n","def zigzag(highs, lows, depth=10, dev_threshold=5):\n","    def pivots(src_raw, length, isHigh):\n","        src = list(reversed(src_raw))\n","        bar_index = list(range(len(src)))\n","        for start in range(0, len(src)):\n","            if start + 2 * length + 1 > len(src) - 1:\n","                return\n","            p = 0\n","            if length < len(src) - start:\n","                p = src[start + length]\n","            if length == 0:\n","                yield 0, p\n","            else:\n","                isFound = True\n","                for i in range(start, start + length):\n","                    if isHigh and src[i] > p:\n","                        isFound = False\n","                    if not isHigh and src[i] < p:\n","                        isFound = False\n","                for i in range(start + length + 1, start + 2 * length + 1):\n","                    if isHigh and src[i] >= p:\n","                        isFound = False\n","                    c = not isHigh and src[i] <= p\n","                    if c:\n","                        isFound = False\n","                if isFound:\n","                    yield (bar_index[start + length], p)\n","                else:\n","                    yield None, None\n","\n","    data_highs = [x for x in pivots(highs, floor(depth / 2), True) if x[0]]\n","    data_lows = [x for x in pivots(lows, floor(depth / 2), False) if x[0]]\n","\n","    raw_pairs = []\n","\n","    for i, (ind, p) in enumerate(data_highs):\n","        lows_d = sorted([(ind_l, p_l) for ind_l, p_l in data_lows if ind > ind_l], key=lambda x: x[0])\n","        if lows_d:\n","            lows = lows_d[-1]\n","\n","            if abs(_calc_dev(lows[1], p)) >= dev_threshold:\n","                raw_pairs.append(\n","                    ((ind, p),\n","                     (lows[0], lows[1]))\n","                )\n","\n","    result = []\n","\n","    for (i_h, p_h),(i_l, p_l) in raw_pairs:\n","        if not result:\n","            result.append(((i_h, p_h),(i_l, p_l)))\n","            continue\n","\n","        if i_l == result[-1][1][0]:\n","            if p_h > result[-1][0][1]:\n","                result = result[:-1]\n","            else:\n","                continue\n","\n","        result.append(((i_h, p_h),(i_l, p_l)))\n","\n","    return result\n","\n","# highs, lows = t_df.high.to_numpy(), t_df.low.to_numpy()\n","# zigzag(highs, lows, depth=5, dev_threshold=5)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fGlmdyb97j4Q"},"outputs":[],"source":["t_df = res_df_.iloc[-120:]\n","a_data = t_df.to_numpy()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ropzIp0wUPAA"},"outputs":[],"source":["# import plotly.express as px\n","# import plotly.graph_objects as go\n","\n","def get_dist_plot(c, v, kx, ky):\n","    fig = go.Figure()\n","    fig.add_trace(go.Histogram(name='Vol Profile', x=c, y=v, nbinsx=150, \n","                               histfunc='sum', histnorm='probability density',\n","                               marker_color='#B0C4DE'))\n","    fig.add_trace(go.Scatter(name='KDE', x=kx, y=ky, mode='lines', marker_color='#D2691E'))    \n","\n","    peaks,_ = signal.find_peaks(kdy)\n","    pkx = kdx[peaks]\n","    pky = kdy[peaks]\n","    pk_marker_args=dict(size=10, color='black')\n","    fig.add_trace(go.Scatter(name=\"Peaks\", x=pkx, y=pky, mode='markers', marker=pk_marker_args))\n","    fig.show()\n","\n","    return fig"]},{"cell_type":"markdown","metadata":{"id":"RZJ6uIA_VcJs"},"source":["##### instant."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nLWAP1Cl2Hvu"},"outputs":[],"source":["def wave_range_ratio(res_df, config, bb_itv, bb_period):\n","\n","  wave_itv = pd.infer_freq(res_df.index)\n","  wave_period = config.tr_set.wave_period\n","\n","  bb_upper_ = res_df['bb_upper_{}{}'.format(bb_itv, bb_period)].to_numpy()\n","  bb_lower_ = res_df['bb_lower_{}{}'.format(bb_itv, bb_period)].to_numpy()\n","  \n","  cu_prime_idx_fill_ = res_df['wave_cu_prime_idx_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","  co_prime_idx_fill_ = res_df['wave_co_prime_idx_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","\n","  cu_bb_range = get_line(co_prime_idx_fill_, bb_upper_) - get_line(co_prime_idx_fill_, bb_lower_)  # cu 에서 co_prime 의 bb_range 사용\n","  co_bb_range = get_line(cu_prime_idx_fill_, bb_upper_) - get_line(cu_prime_idx_fill_, bb_lower_)\n","\n","  wave_range = res_df['wave_high_fill_{}{}'.format(wave_itv, wave_period)].to_numpy() - res_df['wave_low_fill_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","  \n","  res_df['cu_wrr_{}{}'.format(wave_itv, wave_period)] = wave_range / cu_bb_range   # for cu (currently, long)\n","  res_df['co_wrr_{}{}'.format(wave_itv, wave_period)] = wave_range / co_bb_range\n","\n","  return res_df"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"H_zPYIshbZgP"},"outputs":[],"source":["# Todo, future_data\n","def enough_space(res_df, itv, period):\n","\n","  dc_upper_ = res_df['dc_upper_{}{}'.format(itv, period)].to_numpy()\n","  dc_base_ = res_df['dc_base_{}{}'.format(itv, period)].to_numpy()\n","  dc_lower_ = res_df['dc_lower_{}{}'.format(itv, period)].to_numpy()  \n","  high_ = res_df['high_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","  low_ = res_df['low_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","\n","  half_dc_gap = dc_upper_ - dc_base_\n","\n","  res_df['cu_es_{}{}'.format(itv, period)] = (low_ - dc_lower_) / half_dc_gap\n","  res_df['co_es_{}{}'.format(itv, period)] = (dc_upper_ - high_) / half_dc_gap\n","\n","  return res_df"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"o3IUBc59VR5D"},"outputs":[],"source":["# Todo, future_data\n","def candle_range_ratio(res_df, c_itv, bb_itv, bb_period):\n","\n","  itv_num = to_itvnum(c_itv)\n","\n","  b1_bb_upper_ = res_df['bb_upper_{}{}'.format(bb_itv, bb_period)].shift(itv_num).to_numpy()\n","  b1_bb_lower_ = res_df['bb_lower_{}{}'.format(bb_itv, bb_period)].shift(itv_num).to_numpy()\n","  bb_range = b1_bb_upper_ - b1_bb_lower_   # <-- h_candle's open_idx 의 bb_gap 사용\n","\n","  high_ = res_df['high_{}'.format(c_itv)].to_numpy()\n","  low_ = res_df['low_{}'.format(c_itv)].to_numpy()\n","  candle_range = high_ - low_  # 부호로 양 / 음봉 구분 (양봉 > 0)\n","  \n","  res_df['crr_{}'.format(c_itv)] = candle_range / bb_range\n","\n","  return res_df"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"u3yFd8Dcok5m"},"outputs":[],"source":["def body_rel_ratio(res_df, c_itv):\n","\n","  itv_num = to_itvnum(c_itv)\n","  \n","  b1_close_ = res_df['close_{}'.format(c_itv)].shift(itv_num).to_numpy()\n","  b1_open_ = res_df['open_{}'.format(c_itv)].shift(itv_num).to_numpy()\n","  b1_body_range = abs(b1_close_ - b1_open_)\n","\n","  close_ = res_df['close_{}'.format(c_itv)].to_numpy()\n","  open_ = res_df['open_{}'.format(c_itv)].to_numpy()\n","  body_range = abs(close_ - open_)\n","  \n","  res_df['body_rel_ratio_{}'.format(c_itv)] = body_range / b1_body_range\n","\n","  return res_df\n","\n","def dc_over_body_ratio(res_df, c_itv, dc_itv, dc_period):\n","  close_ = res_df['close_{}'.format(c_itv)].to_numpy()\n","  open_ = res_df['open_{}'.format(c_itv)].to_numpy()\n","  body_range = abs(close_ - open_)\n","  \n","  dc_upper_ = res_df['dc_upper_{}{}'.format(dc_itv, dc_period)].to_numpy()\n","  dc_lower_ = res_df['dc_lower_{}{}'.format(dc_itv, dc_period)].to_numpy() \n","\n","  res_df['dc_upper_{}{}_br'.format(dc_itv, dc_period)] = (close_ - dc_upper_) / body_range\n","  res_df['dc_lower_{}{}_br'.format(dc_itv, dc_period)] = (dc_lower_ - close_) / body_range\n","\n","  return res_df"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"JWj02LLGbnji"},"outputs":[],"source":["def candle_pumping_ratio_v2(res_df, c_itv, dc_itv, period):\n","\n","  res_df = dc_line_v3(res_df, dc_itv, dc_period=period)\n","\n","  dc_upper_ = res_df['dc_upper_{}{}'.format(dc_itv, period)].to_numpy()\n","  dc_lower_ = res_df['dc_lower_{}{}'.format(dc_itv, period)].to_numpy()\n","  dc_range = dc_upper_ - dc_lower_\n"," \n","  open_ = res_df['open_{}'.format(c_itv)].to_numpy()\n","  close_ = res_df['close_{}'.format(c_itv)].to_numpy()\n","  body = close_ - open_  # 부호로 양 / 음봉 구분 (양봉 > 0)\n","  \n","  res_df['cppr_{}'.format(c_itv)] = body / dc_range\n","\n","  return res_df\n","\n","\n","# Todo, future_data\n","def candle_pumping_ratio(res_df, c_itv, bb_itv, period):\n","\n","  itv_num = to_itvnum(c_itv)\n","\n","  # 여기에도 v2 처럼 bb_indi. 추가 (자동화)\n","\n","  b1_bb_upper_ = res_df['bb_upper_{}{}'.format(bb_itv, period)].shift(itv_num).to_numpy()\n","  b1_bb_lower_ = res_df['bb_lower_{}{}'.format(bb_itv, period)].shift(itv_num).to_numpy()\n","  bb_range = b1_bb_upper_ - b1_bb_lower_\n","\n","  open_ = res_df['open_{}'.format(c_itv)].to_numpy()\n","  close_ = res_df['close_{}'.format(c_itv)].to_numpy()\n","  body = close_ - open_  # 부호로 양 / 음봉 구분 (양봉 > 0)\n","  \n","  res_df['cppr_{}'.format(c_itv)] = body / bb_range\n","\n","  return res_df\n","\n","\n","def pumping_ratio(res_df, config, itv, period1, period2):\n","\n","  bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","  bb_upper_5T = res_df['bb_upper_5T'].to_numpy()\n","  bb_range = bb_upper_5T - bb_lower_5T\n","\n","  selection_id = config.selection_id\n","  \n","  res_df['short_ppr_{}'.format(selection_id)] = res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() / get_line(res_df['short_wave_high_idx_{}{}{}'.format(itv, period1, period2)].to_numpy(), bb_range)\n","  res_df['long_ppr_{}'.format(selection_id)] = res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() / get_line(res_df['long_wave_low_idx_{}{}{}'.format(itv, period1, period2)].to_numpy(), bb_range)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OpkclLSzazZ-"},"outputs":[],"source":["def wave_body_ratio(res_df_, itv, period):\n","  dc_upper_ = res_df_['dc_upper_{}{}'.format(itv, period)].to_numpy()\n","  dc_lower_ = res_df_['dc_lower_{}{}'.format(itv, period)].to_numpy()\n","  close_ = res_df_['close_{}'.format(itv)].to_numpy()\n","  open_ = res_df_['open_{}'.format(itv)].to_numpy()\n","\n","  dc_range = dc_upper_ - dc_lower_\n","  body_range = abs(close_ - open_)\n","\n","  res_df_['wave_body_ratio'] = body_range / dc_range\n","  res_df_['dc_upper_body_ratio'] = (np.maximum(close_, open_) - dc_upper_) / body_range\n","  res_df_['dc_lower_body_ratio'] = (dc_lower_) - np.minimum(close_, open_) / body_range\n","\n","  return"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0-zzitQRbnz8"},"outputs":[],"source":["# res_df_['wave_body_ratio'].tail(200)\n","\n","itv = 'H'\n","period = 5\n","wave_body_ratio(res_df_, itv, period)"]},{"cell_type":"markdown","metadata":{"id":"qsyPhNR8yP1c"},"source":["##### dump"]},{"cell_type":"markdown","metadata":{"id":"xpyP5t8Ht_pE"},"source":["### calc recursive indi's min_period"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"N1Hbm4OA4Tkk"},"outputs":[],"source":["ticker_prcn = get_precision_by_price(res_df.close.iloc[-1]) + 2\n","\n","target_len = 300000\n","slice_len_list = list(range(50, 10000, 100))\n","slice_len_list.insert(0, target_len)\n","\n","start_0 = time.time()\n","# prev_int_, prev_pnts_ = None, None\n","offset = 1\n","\n","for sl_idx, sample_len in enumerate(slice_len_list):\n","\n","  sample_df = res_df.iloc[-sample_len -offset:-offset]\n","  sample_len2 = sample_len\n","\n","  # --------- input using indi.s --------- #\n","  # res = ema_v0(sample_df['close'], 190)\n","  res = rsi(sample_df, 14)\n","\n","    #    to_htf()    #\n","  # df_5T = to_htf(sample_df, itv_='5T', offset='1h')\n","  # sample_len2 = len(df_5T)\n","\n","  # # --------- input using htf_indi. --------- #\n","  # res = ema(df_5T['close'], 195)\n","  # -------------------------------------- #\n","\n","  res_last_row = res.iloc[-1]\n","  if pd.isnull(res_last_row):\n","    continue\n","\n","  # print(res_last_row)\n","  # break\n","\n","  # sample_df = sample_df.join(to_lower_tf_v2(sample_df, df_5T, [-1]), how='inner')\n","\n","\n","  #   자리수 분할 계산    #\n","  int_, points_ = str(res_last_row).split('.')\n","  pnts_ = points_[:ticker_prcn]\n","\n","  if sl_idx == 0:\n","    target_int_ = int_\n","    target_pnts_ = pnts_\n","    print(\"target {} ({}) -> {} {}\".format(sample_len, sample_len2, int_, points_))\n","\n","  else:\n","    if target_int_ == int_ and target_pnts_ == pnts_:\n","      # print(sample_len, \"({})\".format(sample_len2), '->', int_, pnts_, end='\\n\\n')\n","      print(\"{} ({}) -> {} {}\\n\".format(sample_len, sample_len2, int_, points_))\n","      break\n","\n","print(time.time() - start_0)  # (1301)(1361)(1301)"]},{"cell_type":"markdown","metadata":{"id":"rrIGjmUzqU-D"},"source":["## import utils & config"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"SeJan_0t95yL","executionInfo":{"status":"ok","timestamp":1663111593259,"user_tz":-540,"elapsed":2601,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["frame_ver = \"0114_htf\"\n","ID_arr = np.array(['v3', 'v5_2'])\n","\n","utils_public_name = \"{}.utils.{}_utils_public\".format(strat_pkg, frame_ver)\n","utils_public_lib = importlib.import_module(utils_public_name)\n","utils_public = utils_public_lib   # temporary\n","\n","u_name_list = [\"{}.utils.{}_utils_{}\".format(strat_pkg, frame_ver, id_) for id_ in ID_arr]\n","utils_arr = np.array([importlib.import_module(u_name) for u_name in u_name_list])\n","\n","config_name_list = [\"{}_config_{}.json\".format(frame_ver, id_) for id_ in ID_arr]\n","cfg_path_list = [os.path.join(current_path, strat_pkg, \"config\", name_) for name_ in config_name_list]\n","cfg_file_list = [open(cfg_path) for cfg_path in cfg_path_list]\n","config_arr = np.array([EasyDict(json.load(cfg_)) for cfg_ in cfg_file_list])\n","\n","# ------ opened files should be closed --> 닫지 않으면 reopen 시 error occurs ------ #\n","_ = [cfg_.close() for cfg_ in cfg_file_list]\n","show_plot = 1   # idep's var - do not touch"]},{"cell_type":"markdown","metadata":{"id":"leSQlImg4_9L"},"source":["### utils_"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"CB2yZdQ95Cdg","executionInfo":{"status":"ok","timestamp":1663111643296,"user_tz":-540,"elapsed":965,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# import pandas as pd\n","# import numpy as np\n","# import logging\n","\n","def enlist_tr(res_df, config, np_timeidx, mode='OPEN', show_detail=True):\n","\n","    # ================== enlist wave_unit ================== #\n","    selection_id = config.selection_id\n","    \n","    len_df = len(res_df)\n","    len_df_range = np.arange(len_df)\n","\n","    # if config.tr_set.check_hlm == 2:  # 동일한 param 으로도 p2_hlm 시도를 충분히 할 수 있음 (csdbox 와 같은)\n","    #   assert not (wave_itv1 == wave_itv2 and wave_period1 == wave_period2)\n","\n","    # ------------ get wave_features ------------ #      \n","    wave_itv1 = config.tr_set.wave_itv1\n","    wave_period1 = config.tr_set.wave_period1\n","    wave_itv2 = config.tr_set.wave_itv2\n","    wave_period2 = config.tr_set.wave_period2\n","    tc_period = config.tr_set.tc_period\n","    roll_hl_cnt = 3\n","\n","    roll_highs1 = [res_df['wave_high_fill_{}{}_-{}'.format(wave_itv1, wave_period1, cnt_ + 1)].to_numpy() for cnt_ in reversed(range(roll_hl_cnt))]\n","    roll_lows1 = [res_df['wave_low_fill_{}{}_-{}'.format(wave_itv1, wave_period1, cnt_ + 1)].to_numpy() for cnt_ in reversed(range(roll_hl_cnt))]\n","\n","    wave_high_fill1_ = res_df['wave_high_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    wave_low_fill1_ = res_df['wave_low_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","    roll_highs2 = [res_df['wave_high_fill_{}{}_-{}'.format(wave_itv2, wave_period2, cnt_ + 1)].to_numpy() for cnt_ in reversed(range(roll_hl_cnt))]\n","    roll_lows2 = [res_df['wave_low_fill_{}{}_-{}'.format(wave_itv2, wave_period2, cnt_ + 1)].to_numpy() for cnt_ in reversed(range(roll_hl_cnt))]\n","\n","    wave_high_fill2_ = res_df['wave_high_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","    wave_low_fill2_ = res_df['wave_low_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","    \n","    # res_df['short_wave_spread_fill_{}{}'.format(wave_itv1, wave_period1)] = roll_highs1[-1] / wave_low_fill1_\n","    # res_df['long_wave_spread_fill_{}{}'.format(wave_itv1, wave_period1)] = wave_high_fill1_ / roll_lows1[-1]\n","    res_df['short_wave_spread_fill_{}{}'.format(wave_itv1, wave_period1)] = wave_high_fill1_ / wave_low_fill1_\n","    res_df['long_wave_spread_fill_{}{}'.format(wave_itv1, wave_period1)] = wave_high_fill1_ / wave_low_fill1_\n","\n","    # ------------ enlist tr_unit ------------ #\n","    # cu's roll_high_[:, -1] = prev_high & cu's roll_low_[:, -1] = current_low\n","    # co's roll_low_[:, -1] = prev_low & co's roll_high_[:, -1] = current_high\n","    res_df['short_tp_1_{}'.format(selection_id)] = wave_low_fill2_   # wave_low_fill1_ b2_low_5T\n","    res_df['short_tp_0_{}'.format(selection_id)] = roll_highs2[-1]   # roll_highs1[-1] wave_high_fill1_  # roll_high_[:, -2]\n","    res_df['long_tp_1_{}'.format(selection_id)] = wave_high_fill2_   # wave_high_fill1_ b2_high_5T\n","    res_df['long_tp_0_{}'.format(selection_id)] = roll_lows2[-1]    # roll_lows1[-1]  wave_low_fill1_   # roll_low_[:, -2]\n","\n","    res_df['short_ep1_1_{}'.format(selection_id)] = wave_low_fill2_ # wave_low_fill1_   # b2_low_5T\n","    res_df['short_ep1_0_{}'.format(selection_id)] = wave_high_fill2_  # wave_high_fill1_  # roll_high_[:, -2]\n","    res_df['long_ep1_1_{}'.format(selection_id)] = wave_high_fill2_ # wave_high_fill1_   # b2_high_5T\n","    res_df['long_ep1_0_{}'.format(selection_id)] = wave_low_fill2_  # wave_low_fill1_    # roll_low_[:, -2]\n","\n","    # --> p2's ep use p1's ep\n","    # res_df['short_ep2_1_{}'.format(selection_id)] = wave_low_fill1_  # wave_low_fill2_   # b2_low_5T\n","    # res_df['short_ep2_0_{}'.format(selection_id)] = wave_high_fill1_ # wave_high_fill2_  # roll_high_[:, -2]\n","    # res_df['long_ep2_1_{}'.format(selection_id)] = wave_high_fill1_  # wave_high_fill2_   # b2_high_5T\n","    # res_df['long_ep2_0_{}'.format(selection_id)] = wave_low_fill1_   # wave_low_fill2_    # roll_low_[:, -2]\n","\n","    # --> out use p1's low, (allow prev_low as out for p1_hhm only)\n","    # res_df['short_out_1_{}'.format(selection_id)] = wave_low_fill1_   # wave_low_fill1_   # wave_low_fill2_   # b2_low_5T\n","    # res_df['short_out_0_{}'.format(selection_id)] = wave_high_fill1_ # roll_highs1[-1] if not config.tr_set.check_hlm else wave_high_fill1_   # roll_highs2[-1]  # roll_high_[:, -2]\n","    # res_df['long_out_1_{}'.format(selection_id)] = wave_high_fill1_   # wave_high_fill1_   # wave_high_fill2_   # b2_high_5T\n","    # res_df['long_out_0_{}'.format(selection_id)] = wave_low_fill1_ # roll_lows1[-1] if not config.tr_set.check_hlm else wave_low_fill1_   # roll_lows2[-1]    # roll_low_[:, -2]\n","    \n","    # below codes exist for p2_wave\n","    res_df['short_ep2_1_{}'.format(selection_id)] = wave_low_fill2_   # b2_low_5T\n","    res_df['short_ep2_0_{}'.format(selection_id)] = wave_high_fill2_  # roll_high_[:, -2]\n","    res_df['long_ep2_1_{}'.format(selection_id)] = wave_high_fill2_   # b2_high_5T\n","    res_df['long_ep2_0_{}'.format(selection_id)] = wave_low_fill2_    # roll_low_[:, -2]\n","\n","    res_df['short_out_1_{}'.format(selection_id)] = wave_low_fill2_\n","    res_df['short_out_0_{}'.format(selection_id)] = roll_highs2[-1]\n","    res_df['long_out_1_{}'.format(selection_id)] = wave_high_fill2_\n","    res_df['long_out_0_{}'.format(selection_id)] = roll_lows2[-1]\n","    \n","\n","    # --- inversion --- #\n","    if config.pos_set.short_inversion or config.pos_set.long_inversion:\n","        res_df.rename({short_tp_1_: long_tp_1_, long_tp_1_: short_tp_1_}, axis=1, inplace=True)\n","        res_df.rename({short_tp_0_: long_tp_0_, long_tp_0_: short_tp_0_}, axis=1, inplace=True)\n","        res_df.rename({short_epout_1_: long_epout_1_, long_epout_1_: short_epout_1_}, axis=1, inplace=True)\n","        res_df.rename({short_epout_0_: long_epout_0_, long_epout_0_: short_epout_0_}, axis=1, inplace=True)\n","\n","    res_df['short_tp_gap_{}'.format(selection_id)] = abs(res_df['short_tp_1_{}'.format(selection_id)] - res_df['short_tp_0_{}'.format(selection_id)])\n","    res_df['long_tp_gap_{}'.format(selection_id)] = abs(res_df['long_tp_1_{}'.format(selection_id)] - res_df['long_tp_0_{}'.format(selection_id)])\n","    res_df['short_ep1_gap_{}'.format(selection_id)] = abs(res_df['short_ep1_1_{}'.format(selection_id)] - res_df['short_ep1_0_{}'.format(selection_id)])\n","    res_df['long_ep1_gap_{}'.format(selection_id)] = abs(res_df['long_ep1_1_{}'.format(selection_id)] - res_df['long_ep1_0_{}'.format(selection_id)])\n","\n","    res_df['short_out_gap_{}'.format(selection_id)] = abs(res_df['short_out_1_{}'.format(selection_id)] - res_df['short_out_0_{}'.format(selection_id)])\n","    res_df['long_out_gap_{}'.format(selection_id)] = abs(res_df['long_out_1_{}'.format(selection_id)] - res_df['long_out_0_{}'.format(selection_id)])\n","    res_df['short_ep2_gap_{}'.format(selection_id)] = abs(res_df['short_ep2_1_{}'.format(selection_id)] - res_df['short_ep2_0_{}'.format(selection_id)])\n","    res_df['long_ep2_gap_{}'.format(selection_id)] = abs(res_df['long_ep2_1_{}'.format(selection_id)] - res_df['long_ep2_0_{}'.format(selection_id)])\n","\n","\n","    data_cols = ['open', 'high', 'low', 'close']  # Todo - public_indi 이전에 해야할지도 모름 # 'close', 'haopen', 'hahigh', 'halow', 'haclose'\n","    open, high, low, close = [res_df[col_].to_numpy() for col_ in data_cols]\n","\n","    # ================== point ================== #     \n","    short_open_res1 = np.ones(len_df) #.astype(object)\n","    long_open_res1 = np.ones(len_df)  #.astype(object)\n","    short_open_res2 = np.ones(len_df) #.astype(object)\n","    long_open_res2 = np.ones(len_df)  #.astype(object)\n","    \n","    # ------------ wave_point ------------ #\n","    notnan_short_tc = ~pd.isnull(res_df['short_tc_{}{}'.format(wave_itv1, wave_period1)].to_numpy())  # isnull for object\n","    notnan_long_tc = ~pd.isnull(res_df['long_tc_{}{}'.format(wave_itv1, wave_period1)].to_numpy())  # isnull for object    \n","\n","    notnan_cu = ~pd.isnull(res_df['wave_cu_{}{}'.format(wave_itv1, wave_period1)].to_numpy())  # isnull for object\n","    notnan_co = ~pd.isnull(res_df['wave_co_{}{}'.format(wave_itv1, wave_period1)].to_numpy())\n","    notnan_cu2 = ~pd.isnull(res_df['wave_cu_{}{}'.format(wave_itv2, wave_period2)].to_numpy())  # isnull for object\n","    notnan_co2 = ~pd.isnull(res_df['wave_co_{}{}'.format(wave_itv2, wave_period2)].to_numpy())\n","\n","    # short_open_res1 *= res_df['wave_cu_{}{}'.format(wave_itv1, wave_period1)].to_numpy().astype(bool) * notnan_cu  # object로 변환되는 경우에 대응해, bool 로 재정의\n","    # long_open_res1 *= res_df['wave_co_{}{}'.format(wave_itv1, wave_period1)].to_numpy().astype(bool) * notnan_co  # np.nan = bool type 으로 True 임..\n","    short_open_res1 *= res_df['short_tc_{}{}'.format(wave_itv1, wave_period1)].to_numpy().astype(bool) * notnan_short_tc\n","    long_open_res1 *= res_df['long_tc_{}{}'.format(wave_itv1, wave_period1)].to_numpy().astype(bool) * notnan_long_tc\n","    short_open_res2 *= res_df['wave_cu_{}{}'.format(wave_itv2, wave_period2)].to_numpy().astype(bool) * notnan_cu2  # object로 변환되는 경우에 대응해, bool 로 재정의\n","    long_open_res2 *= res_df['wave_co_{}{}'.format(wave_itv2, wave_period2)].to_numpy().astype(bool) * notnan_co2  # np.nan = bool type 으로 True 임..\n","    # short_open_res2 *= res_df['short_tc_{}{}'.format(wave_itv2, tc_period)].to_numpy()\n","    # long_open_res2 *= res_df['long_tc_{}{}'.format(wave_itv2, tc_period)].to_numpy()\n","\n","    if show_detail:\n","      sys_log.warning(\"wave_point\")\n","      sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","      sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))  \n","      sys_log.warning(\"np.sum(short_open_res2 == 1) : {}\".format(np.sum(short_open_res2 == 1)))\n","      sys_log.warning(\"np.sum(long_open_res2 == 1) : {}\".format(np.sum(long_open_res2 == 1)))  \n","    \n","    # ------ reject wave_update_hl ------ #\n","    notnan_update_low_cu = ~pd.isnull(res_df['wave_update_low_cu_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy())\n","    notnan_update_high_co = ~pd.isnull(res_df['wave_update_high_co_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy())\n","    notnan_update_low_cu2 = ~pd.isnull(res_df['wave_update_low_cu_bool_{}{}'.format(wave_itv2, wave_period2)].to_numpy())\n","    notnan_update_high_co2 = ~pd.isnull(res_df['wave_update_high_co_bool_{}{}'.format(wave_itv2, wave_period2)].to_numpy())\n","\n","    short_open_res1 *= ~(res_df['wave_update_low_cu_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy().astype(bool)) * notnan_update_low_cu\n","    long_open_res1 *= ~(res_df['wave_update_high_co_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy().astype(bool)) * notnan_update_high_co\n","    short_open_res2 *= ~(res_df['wave_update_low_cu_bool_{}{}'.format(wave_itv2, wave_period2)].to_numpy().astype(bool)) * notnan_update_low_cu2\n","    long_open_res2 *= ~(res_df['wave_update_high_co_bool_{}{}'.format(wave_itv2, wave_period2)].to_numpy().astype(bool)) * notnan_update_high_co2\n","\n","    # short_open_res1 *= ~res_df['wave_update_low_cu_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    # long_open_res1 *= ~res_df['wave_update_high_co_bool_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    # short_open_res2 *= ~res_df['wave_update_low_cu_bool_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","    # long_open_res2 *= ~res_df['wave_update_high_co_bool_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","\n","    if show_detail:\n","      sys_log.warning(\"reject update_hl\")\n","      sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","      sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))  \n","      sys_log.warning(\"np.sum(short_open_res2 == 1) : {}\".format(np.sum(short_open_res2 == 1)))\n","      sys_log.warning(\"np.sum(long_open_res2 == 1) : {}\".format(np.sum(long_open_res2 == 1)))  \n","\n","    # ------ wave_itv ------ #    \n","    if wave_itv1 != 'T':      \n","      wave_itv1_num = to_itvnum(wave_itv1)\n","      short_open_res1 *= np_timeidx % wave_itv1_num == (wave_itv1_num - 1)\n","      long_open_res1 *= np_timeidx % wave_itv1_num == (wave_itv1_num - 1) \n","\n","      if show_detail:\n","        sys_log.warning(\"wave_itv1\")\n","        sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","        sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))  \n","    \n","    if wave_itv2 != 'T':\n","      wave_itv2_num = to_itvnum(wave_itv2)\n","      short_open_res2 *= np_timeidx % wave_itv2_num == (wave_itv2_num - 1)\n","      long_open_res2 *= np_timeidx % wave_itv2_num == (wave_itv2_num - 1) \n","\n","      if show_detail:\n","        sys_log.warning(\"wave_itv2\")\n","        sys_log.warning(\"np.sum(short_open_res2 == 1) : {}\".format(np.sum(short_open_res2 == 1)))\n","        sys_log.warning(\"np.sum(long_open_res2 == 1) : {}\".format(np.sum(long_open_res2 == 1)))\n","\n","    # ------ wave_mm ------ #\n","    wave_high_terms_cnt_fill1_ = res_df['wave_high_terms_cnt_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    wave_low_terms_cnt_fill1_ = res_df['wave_low_terms_cnt_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","    short_open_res1 *= (wave_high_terms_cnt_fill1_ > config.tr_set.wave_greater2) & (wave_low_terms_cnt_fill1_ > config.tr_set.wave_greater1)\n","    long_open_res1 *= (wave_low_terms_cnt_fill1_ > config.tr_set.wave_greater2) & (wave_high_terms_cnt_fill1_ > config.tr_set.wave_greater1)\n","\n","    # wave_high_terms_cnt_fill2_ = res_df['wave_high_terms_cnt_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","    # wave_low_terms_cnt_fill2_ = res_df['wave_low_terms_cnt_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","\n","    # short_open_res2 *= (wave_high_terms_cnt_fill2_ > config.tr_set.wave_greater2) & (wave_low_terms_cnt_fill2_ > config.tr_set.wave_greater1)\n","    # long_open_res2 *= (wave_low_terms_cnt_fill2_ > config.tr_set.wave_greater2) & (wave_high_terms_cnt_fill2_ > config.tr_set.wave_greater1)\n","\n","    if show_detail:\n","      sys_log.warning(\"wave_mm\")\n","      sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","      sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))\n","      # sys_log.warning(\"np.sum(short_open_res2 == 1) : {}\".format(np.sum(short_open_res2 == 1)))\n","      # sys_log.warning(\"np.sum(long_open_res2 == 1) : {}\".format(np.sum(long_open_res2 == 1)))\n","\n","    # ------ wave_length ------ #\n","    if config.tr_set.wave_length1 != \"None\": \n","      short_wave_length_fill_ = res_df['short_wave_length_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      long_wave_length_fill_ = res_df['long_wave_length_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","      short_open_res1 *= short_wave_length_fill_ >= config.tr_set.wave_length1\n","      long_open_res1 *= long_wave_length_fill_ >= config.tr_set.wave_length1\n","\n","      if show_detail:\n","        sys_log.warning(\"wave_length\")\n","        sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","        sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))\n","\n","    # ------ wave_spread ------ #\n","    if config.tr_set.wave_spread1 != \"None\":\n","      short_wave_spread_fill = res_df['short_wave_spread_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      long_wave_spread_fill = res_df['long_wave_spread_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","      short_open_res1 *= short_wave_spread_fill >= config.tr_set.wave_spread1\n","      long_open_res1 *= long_wave_spread_fill >= config.tr_set.wave_spread1\n","\n","      if show_detail:\n","        sys_log.warning(\"wave_spread\")\n","        sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","        sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))      \n","\n","    # ------ wave_time_ratio ------ #\n","    if config.tr_set.wave_time_ratio1 != \"None\":\n","      short_wave_time_ratio = res_df['short_wave_time_ratio_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      long_wave_time_ratio = res_df['long_wave_time_ratio_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","      short_open_res1 *= short_wave_time_ratio >= config.tr_set.wave_time_ratio1\n","      long_open_res1 *= long_wave_time_ratio >= config.tr_set.wave_time_ratio1\n","\n","      if show_detail:\n","        sys_log.warning(\"wave_time_ratio\")\n","        sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","        sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))   \n","\n","\n","    # ------------ 추세선 리스트 ------------ #\n","    # ------ ma & prev_low ------ #    \n","    # ma_period = 60\n","\n","    # short_prev_ma_ = res_df['short_ma_T{}_-1'.format(ma_period)].to_numpy()\n","    # long_prev_ma_ = res_df['long_ma_T{}_-1'.format(ma_period)].to_numpy()    \n","    \n","    # short_open_res1 *= short_prev_ma_ > roll_highs1[-1]  # Todo, index sync. 요망\n","    # long_open_res1 *= long_prev_ma_ < roll_lows1[-1]\n","\n","    # if show_detail:\n","    #   sys_log.warning(\"ma & prev_low\")\n","    #   sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","    #   sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))     \n","\n","\n","    # ================== tr_set ================== #\n","    # ------------ tp ------------ #\n","    tpg = config.tr_set.tp_gap\n","    res_df['short_tp_{}'.format(selection_id)] = res_df['short_tp_1_{}'.format(selection_id)].to_numpy() - res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * tpg\n","    res_df['long_tp_{}'.format(selection_id)] = res_df['long_tp_1_{}'.format(selection_id)].to_numpy() + res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * tpg\n","    # res_df['short_tp_{}'.format(selection_id)] = short_tp_1 - short_epout_gap * tpg\n","    # res_df['long_tp_{}'.format(selection_id)] = long_tp_1 + long_epout_gap * tpg\n","\n","    # ------ limit_ep1 ------ #\n","    if config.ep_set.entry_type == \"LIMIT\":\n","        epg1 = config.tr_set.ep_gap1\n","\n","        # ------ epbox as epg ------ #\n","        # res_df['short_ep1_{}'.format(selection_id)] = res_df['short_ep1_0_{}'.format(selection_id)].to_numpy() + res_df['short_ep1_gap_{}'.format(selection_id)].to_numpy() * epg1\n","        # res_df['long_ep1_{}'.format(selection_id)] = res_df['long_ep1_0_{}'.format(selection_id)].to_numpy() - res_df['long_ep1_gap_{}'.format(selection_id)].to_numpy() * epg1     \n","\n","        # ------ tpbox as epg ------ #\n","        # p1_hlm 을 위해선, tp_0 를 기준할 수 없음 --> ep1 & ep2 를 기준으로 진행\n","        # res_df['short_ep1_{}'.format(selection_id)] = res_df['short_ep1_0_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * epg1  # fibonacci 고려하면, tp / out gap 기준이 맞지 않을까\n","        # res_df['long_ep1_{}'.format(selection_id)] = res_df['long_ep1_0_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * epg1      \n","        \n","        # ------ fibo_ep ------ #\n","        res_df['short_ep1_{}'.format(selection_id)] = res_df['short_tp_0_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * epg1  # fibonacci 고려하면, tp / out gap 기준이 맞지 않을까\n","        res_df['long_ep1_{}'.format(selection_id)] = res_df['long_tp_0_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * epg1    \n","                \n","    # ------ market_ep1 ------ #\n","    else:\n","        res_df['short_ep1_{}'.format(selection_id)] = close\n","        res_df['long_ep1_{}'.format(selection_id)] = close\n","    \n","    # ------ limit_ep2 ------ #   \n","    if config.ep_set.point2.entry_type == \"LIMIT\":\n","        epg2 = config.tr_set.ep_gap2\n","\n","        # # ------ epbox as epg ------ #\n","        # res_df['short_ep2_{}'.format(selection_id)] = res_df['short_ep2_0_{}'.format(selection_id)].to_numpy() + res_df['short_ep2_gap_{}'.format(selection_id)].to_numpy() * epg2\n","        # res_df['long_ep2_{}'.format(selection_id)] = res_df['long_ep2_0_{}'.format(selection_id)].to_numpy() - res_df['long_ep2_gap_{}'.format(selection_id)].to_numpy() * epg2  \n","\n","        # ------ outbox as epg ------ # --> ep1 & ep2 를 기준으로 진행\n","        # res_df['short_ep2_{}'.format(selection_id)] = res_df['short_ep2_0_{}'.format(selection_id)].to_numpy() + res_df['short_out_gap_{}'.format(selection_id)].to_numpy() * epg2\n","        # res_df['long_ep2_{}'.format(selection_id)] = res_df['long_ep2_0_{}'.format(selection_id)].to_numpy() - res_df['long_out_gap_{}'.format(selection_id)].to_numpy() * epg2  \n","        \n","        # ------ fibo_ep by tp_box ------ #\n","        # res_df['short_ep2_{}'.format(selection_id)] = res_df['short_tp_0_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * epg2  # fibonacci 고려하면, tp / out gap 기준이 맞지 않을까\n","        # res_df['long_ep2_{}'.format(selection_id)] = res_df['long_tp_0_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * epg2   \n","        \n","        # ------ fibo_ep by out_box ------ #        \n","        res_df['short_ep2_{}'.format(selection_id)] = res_df['short_out_0_{}'.format(selection_id)].to_numpy() + res_df['short_out_gap_{}'.format(selection_id)].to_numpy() * epg2  # fibonacci 고려하면, tp / out gap 기준이 맞지 않을까\n","        res_df['long_ep2_{}'.format(selection_id)] = res_df['long_out_0_{}'.format(selection_id)].to_numpy() - res_df['long_out_gap_{}'.format(selection_id)].to_numpy() * epg2   \n","\n","    # ------ market_ep2 ------ #\n","    else: \n","        res_df['short_ep2_{}'.format(selection_id)] = close\n","        res_df['long_ep2_{}'.format(selection_id)] = close\n","                \n","\n","    # ------------ out ------------ #\n","    outg = config.tr_set.out_gap\n","    # res_df['short_out_{}'.format(selection_id)] = short_tp_0 + short_tp_gap * outg            # 1. for hhm check -> 규칙성과 wave_range 기반 거래 기준의 hhm 확인\n","    # res_df['long_out_{}'.format(selection_id)] = long_tp_0 - long_tp_gap * outg\n","\n","    if config.tr_set.check_hlm == 0:\n","      res_df['short_out_{}'.format(selection_id)] = res_df['short_tp_0_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * outg\n","      res_df['long_out_{}'.format(selection_id)] = res_df['long_tp_0_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * outg\n","      \n","      # ------ ep1box as outg ------ #\n","      # res_df['short_out_{}'.format(selection_id)] = res_df['short_ep1_0_{}'.format(selection_id)].to_numpy() + res_df['short_ep1_gap_{}'.format(selection_id)].to_numpy() * outg\n","      # res_df['long_out_{}'.format(selection_id)] = res_df['long_ep1_0_{}'.format(selection_id)].to_numpy() - res_df['long_ep1_gap_{}'.format(selection_id)].to_numpy() * outg \n","\n","    elif config.tr_set.check_hlm == 1:    # for p1_hlm\n","      # ------ irregular - next_fibo ------ #\n","      # co_wrr_32_ = res_df['co_wrr_32_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      # cu_wrr_32_ = res_df['cu_wrr_32_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","      # short_next_fibo_outg = np.vectorize(get_next_fibo_gap2)(cu_wrr_32_)\n","      # long_next_fibo_outg = np.vectorize(get_next_fibo_gap2)(co_wrr_32_)\n","\n","      # res_df['short_out_{}'.format(selection_id)] = res_df['short_tp_0_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * short_next_fibo_outg  # ep 와 마찬가지로, tpg 기준 가능\n","      # res_df['long_out_{}'.format(selection_id)] = res_df['long_tp_0_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * long_next_fibo_outg \n","\n","      # ------ ep1box as outg ------ #\n","      # res_df['short_out_{}'.format(selection_id)] = res_df['short_ep1_0_{}'.format(selection_id)].to_numpy() + res_df['short_ep1_gap_{}'.format(selection_id)].to_numpy() * outg\n","      # res_df['long_out_{}'.format(selection_id)] = res_df['long_ep1_0_{}'.format(selection_id)].to_numpy() - res_df['long_ep1_gap_{}'.format(selection_id)].to_numpy() * outg \n","\n","      # ------ 1_tr - ep1box as outg ------ #\n","      # res_df['short_out_{}'.format(selection_id)] = res_df['short_ep1_0_{}'.format(selection_id)].to_numpy() + res_df['short_ep1_gap_{}'.format(selection_id)].to_numpy() * outg\n","      # res_df['long_out_{}'.format(selection_id)] = res_df['long_ep1_0_{}'.format(selection_id)].to_numpy() - res_df['long_ep1_gap_{}'.format(selection_id)].to_numpy() * outg \n","      \n","      # ------ 1_tr - auto_calculation by ep1 ------ #\n","      # res_df['short_out_{}'.format(selection_id)] = res_df['short_ep1_{}'.format(selection_id)] + (res_df['short_ep1_{}'.format(selection_id)].to_numpy() - res_df['short_tp_{}'.format(selection_id)].to_numpy())\n","      # res_df['long_out_{}'.format(selection_id)] = res_df['long_ep1_{}'.format(selection_id)].to_numpy() - (res_df['long_tp_{}'.format(selection_id)].to_numpy() - res_df['long_ep1_{}'.format(selection_id)].to_numpy())\n","\n","      # ------ tpbox as outg ------ #\n","      # res_df['short_out_{}'.format(selection_id)] = res_df['short_ep1_0_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * outg  # ep 와 마찬가지로, tpg 기준 가능\n","      # res_df['long_out_{}'.format(selection_id)] = res_df['long_ep1_0_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * outg \n","      \n","      # ------ fibo_out ------ #      \n","      res_df['short_out_{}'.format(selection_id)] = res_df['short_tp_0_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * outg  # ep 와 마찬가지로, tpg 기준 가능\n","      res_df['long_out_{}'.format(selection_id)] = res_df['long_tp_0_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * outg \n","    \n","    else:  # p2_hlm    \n","      # ------ outbox as out ------ #\n","      res_df['short_out_{}'.format(selection_id)] = res_df['short_out_0_{}'.format(selection_id)].to_numpy() + res_df['short_out_gap_{}'.format(selection_id)].to_numpy() * outg\n","      res_df['long_out_{}'.format(selection_id)] = res_df['long_out_0_{}'.format(selection_id)].to_numpy() - res_df['long_out_gap_{}'.format(selection_id)].to_numpy() * outg\n","\n","      # res_df['short_out_{}'.format(selection_id)] = res_df['short_tp_0_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * outg\n","      # res_df['long_out_{}'.format(selection_id)] = res_df['long_tp_0_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * outg\n","\n","      # ------ ep2box as out ------ #\n","      # res_df['short_out_{}'.format(selection_id)] = res_df['short_ep2_0_{}'.format(selection_id)].to_numpy() + res_df['short_ep2_gap_{}'.format(selection_id)].to_numpy() * outg   # p2's ep_box 를 out 으로 사용한다?\n","      # res_df['long_out_{}'.format(selection_id)] = res_df['long_ep2_0_{}'.format(selection_id)].to_numpy() - res_df['long_ep2_gap_{}'.format(selection_id)].to_numpy() * outg     \n","      \n","\n","    # ------------ point validation ------------ # - vecto. 로 미리 거를 수 있는걸 거르면 좋을 것\n","    short_tp_ = res_df['short_tp_{}'.format(selection_id)].to_numpy()\n","    short_ep1_ = res_df['short_ep1_{}'.format(selection_id)].to_numpy()\n","    short_ep2_ = res_df['short_ep2_{}'.format(selection_id)].to_numpy()\n","    short_out_ = res_df['short_out_{}'.format(selection_id)].to_numpy()\n","\n","    long_tp_ = res_df['long_tp_{}'.format(selection_id)].to_numpy()\n","    long_ep1_ = res_df['long_ep1_{}'.format(selection_id)].to_numpy()\n","    long_ep2_ = res_df['long_ep2_{}'.format(selection_id)].to_numpy()\n","    long_out_ = res_df['long_out_{}'.format(selection_id)].to_numpy()\n","\n","    # ------ p1 point_validation ------ #\n","    short_open_res1 *= (short_tp_ < short_ep1_) & (short_ep1_ < short_out_)  # tr_set validation reject nan data & 정상 거래 위한 tp > ep / --> p2_box location (cannot be vectorized)\n","    # short_open_res1 *= close < short_ep1_   # reject entry open_execution\n","    short_open_res1 *= close < short_out_ # res_df['short_ep1_0_{}'.format(selection_id)].to_numpy()   # reject hl_out open_execution -> close always < ep1_0 at wave_p1\n","    # short_out_  res_df['short_tp_0_{}'.format(selection_id)].to_numpy() res_df['short_ep1_0_{}'.format(selection_id)].to_numpy()\n","\n","    long_open_res1 *= (long_tp_ > long_ep1_) & (long_ep1_ > long_out_)  # (long_tp_ > long_ep_) # tr_set validation     \n","    # long_open_res1 *= close > long_ep1_  # reject entry open_execution    \n","    long_open_res1 *= close > long_out_ # res_df['long_ep1_0_{}'.format(selection_id)].to_numpy()  # reject hl_out open_execution  \n","    # long_out_ res_df['long_tp_0_{}'.format(selection_id)].to_numpy() res_df['long_ep1_0_{}'.format(selection_id)].to_numpy()\n","\n","    # ------ p2 point_validation ------ # --> executed in en_ex_pairing() function.\n","    # short_open_res2 *= (short_ep2_ < short_out_) # tr_set validation (short_tp_ < short_ep_) # --> p2_box location (cannot be vectorized)\n","    # short_open_res2 *= close < short_out_    # reject hl_out open_execution\n","\n","    # long_open_res2 *= (long_ep2_ > long_out_)  # tr_set validation (long_tp_ > long_ep_) &   # p2's ep & out cannot be vectorized\n","    # long_open_res2 *= close > long_out_    # reject hl_out open_execution\n","\n","    res_df['short_open1_{}'.format(selection_id)] = short_open_res1 * (not config.pos_set.short_ban)\n","    res_df['long_open1_{}'.format(selection_id)] = long_open_res1 * (not config.pos_set.long_ban)\n","    # print(\"res_df['long_open1_{}'.format(selection_id)].to_numpy() :\", res_df['long_open1_{}'.format(selection_id)].to_numpy()) \n","    res_df['short_open2_{}'.format(selection_id)] = short_open_res2\n","    res_df['long_open2_{}'.format(selection_id)] = long_open_res2\n","\n","    if show_detail:\n","      sys_log.warning(\"point validation\")\n","      sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","      sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))\n","      # sys_log.warning(\"np.sum(short_open_res2 == 1) : {}\".format(np.sum(short_open_res2 == 1)))\n","      # sys_log.warning(\"np.sum(long_open_res2 == 1) : {}\".format(np.sum(long_open_res2 == 1)))\n","    \n","    # ------------ higher_high momentum ------------ #\n","    # wb_tpg = config.tr_set.wb_tp_gap\n","    # wb_outg = config.tr_set.wb_out_gap\n","    # res_df['short_wave_1_{}'.format(selection_id)] = res_df['short_tp_1_{}'.format(selection_id)].to_numpy() - res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * wb_tpg\n","    # res_df['long_wave_1_{}'.format(selection_id)] = res_df['long_tp_1_{}'.format(selection_id)].to_numpy() + res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * wb_tpg\n","    \n","    # res_df['short_wave_0_{}'.format(selection_id)] = res_df['short_tp_0_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * wb_outg        # hhm check\n","    # res_df['long_wave_0_{}'.format(selection_id)] = res_df['long_tp_0_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * wb_outg\n","    # res_df['short_wave_0_{}'.format(selection_id)] = short_epout_0 + short_epout_gap * wb_outg\n","    # res_df['long_wave_0_{}'.format(selection_id)] = long_epout_0 - long_epout_gap * wb_outg\n","\n","    # ------ tr ------ #\n","    if config.tr_set.check_hlm == 2:\n","      res_df['short_tr_{}'.format(selection_id)] = np.nan\n","      res_df['long_tr_{}'.format(selection_id)] = np.nan\n","    else:      \n","      res_df['short_tr_{}'.format(selection_id)] = abs(\n","          (short_ep1_ / short_tp_ - config.trader_set.limit_fee - 1) / (short_ep1_ / short_out_ - config.trader_set.market_fee - 1))   # 이게 맞음, loss 의 분모 > 분자 & profit 의 분모 < 분자\n","      res_df['long_tr_{}'.format(selection_id)] = abs(\n","          (long_tp_ / long_ep1_ - config.trader_set.limit_fee - 1) / (long_out_ / long_ep1_ - config.trader_set.market_fee - 1))\n","\n","    # ------ zoned_ep ------ #\n","    # if config.tr_set.c_ep_gap != \"None\":\n","    #     # res_df['short_ep_org_{}'.format(selection_id)] = res_df['short_ep_{}'.format(selection_id)].copy()\n","    #     # res_df['long_ep_org_{}'.format(selection_id)] = res_df['long_ep_{}'.format(selection_id)].copy()\n","    #     res_df['short_ep2_{}'.format(selection_id)] = short_epout_1 + short_epout_gap * config.tr_set.c_ep_gap\n","    #     res_df['long_ep2_{}'.format(selection_id)] = long_epout_1 - long_epout_gap * config.tr_set.c_ep_gap\n","\n","    # # ------ zoned_out ------ #\n","    # if config.tr_set.t_out_gap != \"None\":\n","    #     # res_df['short_out_org_{}'.format(selection_id)] = res_df['short_out_{}'.format(selection_id)].copy()\n","    #     # res_df['long_out_org_{}'.format(selection_id)] = res_df['long_out_{}'.format(selection_id)].copy()\n","    #     res_df['short_out2_{}'.format(selection_id)] = short_epout_0 + short_epout_gap * config.tr_set.t_out_gap\n","    #     res_df['long_out2_{}'.format(selection_id)] = long_epout_0 - long_epout_gap * config.tr_set.t_out_gap\n","\n","    return res_df\n"]},{"cell_type":"markdown","metadata":{"id":"HuCb0phoPN83"},"source":["#### legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-DNPumVZi0xs"},"outputs":[],"source":["\n","\n","    # ------ wave_point 분리 ------ #\n","    # cci_ = res_df['cci_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    # b1_cci_ = res_df['cci_{}{}'.format(wave_itv1, wave_period1)].shift(1).to_numpy()        \n","    \n","    # band_width = 100\n","    # upper_band = band_width\n","    # lower_band = -band_width\n","\n","    # update_low_cu_bool = res_df['update_low_cu_bool_{}{}'.format(wave_itv1, wave_period1)]\n","    # update_high_co_bool = res_df['update_high_co_bool_{}{}'.format(wave_itv1, wave_period1)]\n","\n","    # short_open_res1 *= (b1_cci_ > upper_band) & (upper_band > cci_) & ~update_low_cu_bool\n","    # long_open_res1 *= (b1_cci_ < lower_band) & (lower_band < cci_) & ~update_high_co_bool   \n","\n","    \n","# ------------ csd ------------ #\n","    # ------ dc ------ #\n","    # dc_upper_ = res_df['dc_upper_T30'].to_numpy()    \n","    # dc_lower_ = res_df['dc_lower_T30'].to_numpy()    \n","\n","    # # Todo, post_cu ~ co 의 dc_lower == low (=touched) 여부 조사\n","    # short_open_idx1 = get_index_bybool(short_open_res1, len_df_range)\n","    # long_open_idx1 = get_index_bybool(long_open_res1, len_df_range)\n","    # wave_co_post_idx_fill_ = res_df['wave_co_post_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    # wave_cu_post_idx_fill_ = res_df['wave_cu_post_idx_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()   # co_prime_idx (wave_high 정보를 지정하기 위한 front co_idx 지정)\n","\n","    # # 1. dc_lower == low 여부 조사, np.nan 덕분에 vectorize 불가하다고 봄\n","    # short_valid_idx_bool = ~(pd.isnull(wave_co_post_idx_fill_) | pd.isnull(short_open_idx1)) # get_index_bybool\n","    # dc_upper_touch = dc_upper_ <= high\n","    # dc_upper_touch_span = np.full(len_df, np.nan)\n","    # dc_upper_touch_span[short_valid_idx_bool] = [dc_upper_touch[int(iin):int(iout) + 1].sum() for iin, iout in zip(wave_co_post_idx_fill_, short_open_idx1) if not pd.isnull(iin) if not pd.isnull(iout)]\n","\n","    # long_valid_idx_bool = ~(pd.isnull(wave_cu_post_idx_fill_) | pd.isnull(long_open_idx1)) # get_index_bybool\n","    # dc_lower_touch = dc_lower_ >= low\n","    # dc_lower_touch_span = np.full(len_df, np.nan)\n","    # dc_lower_touch_span[long_valid_idx_bool] = [dc_lower_touch[int(iin):int(iout) + 1].sum() for iin, iout in zip(wave_cu_post_idx_fill_, long_open_idx1) if not pd.isnull(iin) if not pd.isnull(iout)]\n","\n","    # short_open_res1 *= dc_upper_touch_span == 0\n","    # long_open_res1 *= dc_lower_touch_span == 0\n","\n","    # if show_detail:\n","    #   sys_log.warning(\"csd - dc\")\n","    #   sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","    #   sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))\n","    #   # sys_log.warning(\"np.sum(short_open_res2 == 1) : {}\".format(np.sum(short_open_res2 == 1)))\n","    #   # sys_log.warning(\"np.sum(long_open_res2 == 1) : {}\".format(np.sum(long_open_res2 == 1)))   \n","    \n","    # ================== pattern depiction ================== #  \n","    # bb_upper_ = res_df['bb_upper_{}{}'.format('T', 60)].to_numpy()\n","    # bb_lower_ = res_df['bb_lower_{}{}'.format('T', 60)].to_numpy()\n","    # bb_upper2_ = res_df['bb_upper2_{}{}'.format('T', 60)].to_numpy()\n","    # bb_lower2_ = res_df['bb_lower2_{}{}'.format('T', 60)].to_numpy()\n","    # bb_upper3_ = res_df['bb_upper3_{}{}'.format('T', 60)].to_numpy()\n","    # bb_lower3_ = res_df['bb_lower3_{}{}'.format('T', 60)].to_numpy()\n","    \n","    # ------ 양 / 음봉 (long) ------ #\n","    # short_open_res1 *= close < open\n","    # long_open_res1 *= close > open\n","\n","    # if show_detail:\n","    #   sys_log.warning(\"close > open\")\n","    #   sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","    #   sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))\n","\n","    \n","    # # ------ even_break, hhhl (long) ------ #        \n","    # # cu's roll_high_[:, -1] = prev_high & cu's roll_low_[:, -1] = current_low\n","    # # co's roll_low_[:, -1] = prev_low & co's roll_high_[:, -1] = current_high\n","    # short_open_res1 *= (roll_low_[:, -2] > roll_low_[:, -1]) # & (roll_high_[:, -2] > roll_high_[:, -1])\n","    # long_open_res1 *= (roll_high_[:, -2] < roll_high_[:, -1]) # & (roll_low_[:, -2] < roll_low_[:, -1])\n","\n","    # if show_detail:\n","    #   sys_log.warning(\"even_break\")\n","    #   sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","    #   sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))\n","\n","    # # ------ roll_high < bb_upper2 (long) ------ #\n","    # short_open_res1 *= (roll_low_[:, -4] > roll_low_bb_lower2_[:, -4])\n","    # short_open_res1 *= (roll_low_[:, -3] > roll_low_bb_lower2_[:, -3])\n","    # short_open_res1 *= (roll_low_[:, -2] > roll_low_bb_lower2_[:, -2])\n","    # short_open_res1 *= (roll_low_[:, -1] > roll_low_bb_lower2_[:, -1])\n","\n","    # long_open_res1 *= (roll_high_[:, -4] < roll_high_bb_upper2_[:, -4])\n","    # long_open_res1 *= (roll_high_[:, -3] < roll_high_bb_upper2_[:, -3])\n","    # long_open_res1 *= (roll_high_[:, -2] < roll_high_bb_upper2_[:, -2])\n","    # long_open_res1 *= (roll_high_[:, -1] < roll_high_bb_upper2_[:, -1])\n","    \n","    # if show_detail:\n","    #   sys_log.warning(\"roll_high < bb_upper2\")\n","    #   sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","    #   sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))\n","\n","\n","    # ------ get candle_lastidx ------ #        \n","    # tf_entry = to_itvnum(config.loc_set.point.tf_entry)\n","    # b1_shift = np_timeidx % tf_entry + 1  # dynamic\n","    # b1_candle_lastidx = (len_df_range - b1_shift).astype(float)\n","    # b2_candle_lastidx = (len_df_range - (b1_shift + tf_entry)).astype(float)\n","    # b3_candle_lastidx = (len_df_range - (b1_shift + 2 * tf_entry)).astype(float)\n","    # b1_candle_lastidx[b1_candle_lastidx < 0] = np.nan\n","    # b2_candle_lastidx[b2_candle_lastidx < 0] = np.nan\n","    # b3_candle_lastidx[b3_candle_lastidx < 0] = np.nan\n","\n","    # high_5T = res_df['high_5T'].to_numpy()\n","    # low_5T = res_df['low_5T'].to_numpy()\n","\n","    # b2_high_5T = get_line(b2_candle_lastidx, high_5T)\n","    # b2_low_5T = get_line(b2_candle_lastidx, low_5T)\n","    \n","        # # ------ bb_stream ------ #        \n","        # roll_high_bb_upper_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, bb_upper_, roll_hl_cnt)\n","        # roll_low_bb_upper_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, bb_upper_, roll_hl_cnt)\n","        # roll_high_bb_upper2_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, bb_upper2_, roll_hl_cnt)\n","        # roll_low_bb_upper2_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, bb_upper2_, roll_hl_cnt)\n","\n","        # roll_high_bb_lower_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, bb_lower_, roll_hl_cnt)\n","        # roll_low_bb_lower_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, bb_lower_, roll_hl_cnt)\n","        # roll_high_bb_lower2_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, bb_lower2_, roll_hl_cnt)\n","        # roll_low_bb_lower2_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, bb_lower2_, roll_hl_cnt)\n","\n","        # wave_base_ = res_df['dc_base_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","\n","        # roll_high_wave_base_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, wave_base_, roll_hl_cnt)\n","        # roll_low_wave_base_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, wave_base_, roll_hl_cnt)\n","\n","        # short_open_res *= (roll_high_bb_lower_[:, -2] > roll_high_wave_base_[:, -2]) & (roll_high_wave_base_[:, -2] > roll_high_bb_lower2_[:, -2])\n","        # short_open_res *= (roll_low_bb_lower_[:, -1] > roll_low_wave_base_[:, -1]) & (roll_low_wave_base_[:, -1] > roll_low_bb_lower2_[:, -1])\n","        # short_open_res *= (roll_high_bb_lower_[:, -1] > roll_high_wave_base_[:, -1]) & (roll_high_wave_base_[:, -1] > roll_high_bb_lower2_[:, -1])\n","\n","        # long_open_res *= (roll_low_bb_upper_[:, -2] < roll_low_wave_base_[:, -2]) & (roll_low_wave_base_[:, -2] < roll_low_bb_upper2_[:, -2])\n","        # long_open_res *= (roll_high_bb_upper_[:, -1] < roll_high_wave_base_[:, -1]) & (roll_high_wave_base_[:, -1] < roll_high_bb_upper2_[:, -1])\n","        # long_open_res *= (roll_low_bb_upper_[:, -1] < roll_low_wave_base_[:, -1]) & (roll_low_wave_base_[:, -1] < roll_low_bb_upper2_[:, -1])\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"bb_stream\")\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))  \n","\n","        # ------ candle_pattern  ------ #   \n","        # b3_bb_upper_ = get_line(b3_candle_lastidx, bb_upper_)\n","        # b3_bb_lower_ = get_line(b3_candle_lastidx, bb_lower_)\n","        # b3_bb_upper2_ = get_line(b3_candle_lastidx, bb_upper2_)\n","        # b3_bb_lower2_ = get_line(b3_candle_lastidx, bb_lower2_)\n","        # b3_close = get_line(b3_candle_lastidx, close)\n","\n","        # b2_bb_upper2_ = get_line(b2_candle_lastidx, bb_upper2_)\n","        # b2_bb_lower2_ = get_line(b2_candle_lastidx, bb_lower2_)\n","        # b2_bb_upper3_ = get_line(b2_candle_lastidx, bb_upper3_)\n","        # b2_bb_lower3_ = get_line(b2_candle_lastidx, bb_lower3_)\n","        # b2_close = get_line(b2_candle_lastidx, close)\n","\n","        # b1_bb_upper_ = get_line(b1_candle_lastidx, bb_upper_)\n","        # b1_bb_lower_ = get_line(b1_candle_lastidx, bb_lower_)\n","        # b1_bb_upper2_ = get_line(b1_candle_lastidx, bb_upper2_)\n","        # b1_bb_lower2_ = get_line(b1_candle_lastidx, bb_lower2_)\n","        # b1_close = get_line(b1_candle_lastidx, close)\n","        # b1_high_5T = get_line(b1_candle_lastidx, high_5T)\n","        # b1_low_5T = get_line(b1_candle_lastidx, low_5T)\n","\n","        # short_open_res *= (b3_bb_lower_ > b3_close) & (b3_close > b3_bb_lower2_)\n","        # short_open_res *= (b2_bb_lower2_ > b2_close) & (b2_close > b2_bb_lower3_)\n","        # short_open_res *= (b1_bb_lower_ > b1_close) & (b1_close > b1_bb_lower2_)\n","\n","        # long_open_res *= (b3_bb_upper_ < b3_close) & (b3_close < b3_bb_upper2_)\n","        # long_open_res *= (b2_bb_upper2_ < b2_close) & (b2_close < b2_bb_upper3_)\n","        # long_open_res *= (b1_bb_upper_ < b1_close) & (b1_close < b1_bb_upper2_)\n","\n","        # # short_open_res *= (b2_low_5T < b1_low_5T) & (b2_close < b1_close)\n","        # # long_open_res *= (b2_high_5T > b1_high_5T) & (b2_close > b1_close)\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"candle_pattern\")\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1))) \n","\n","\n","        # ------ low_confirm ------ #\n","        # short_open_res *= b1_high_5T > wave_high_fill_\n","        # long_open_res *= b1_low_5T < wave_low_fill_\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"low_confirm\")\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1))) \n","        \n","        # ------ candle_ratio ------ #\n","        # b2_candle_range_5T = b2_high_5T - b2_low_5T\n","        # b1_candle_range_5T = b1_high_5T - b1_low_5T\n","        \n","        # short_open_res *= b1_candle_range_5T / b2_candle_range_5T < config.loc_set.point.crr\n","        # long_open_res *= b1_candle_range_5T / b2_candle_range_5T < config.loc_set.point.crr\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"candle_ratio\")\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1))) \n","\n","        # ------ wick_ratio ------ #\n","        # upper_wick_ratio_ = res_df['upper_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].to_numpy()\n","        # lower_wick_ratio_ = res_df['lower_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].to_numpy()\n","        # b2_upper_wick_ratio_ = get_line(b2_candle_lastidx, upper_wick_ratio_)\n","        # b2_lower_wick_ratio_ = get_line(b2_candle_lastidx, lower_wick_ratio_)\n","\n","        # short_open_res *= b2_upper_wick_ratio_ < config.loc_set.point.short_wick_ratio\n","        # long_open_res *= b2_upper_wick_ratio_ < config.loc_set.point.long_wick_ratio\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"wick_ratio\")\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1))) \n","\n","        # ------ large wave1_range ------ #          \n","        # roll_bb_upper_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, bb_upper_, roll_hl_cnt)\n","        # roll_bb_lower_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, bb_lower_, roll_hl_cnt)\n","        # roll_bb_upper3_ = get_roll_wave_data(valid_high_prime_idx, roll_high_idx_arr, len_df, bb_upper3_, roll_hl_cnt)\n","        # roll_bb_lower3_ = get_roll_wave_data(valid_low_prime_idx, roll_low_idx_arr, len_df, bb_lower3_, roll_hl_cnt)\n","\n","        # short_open_res *= (roll_bb_upper_[:, -2] < roll_high_[:, -2]) & (roll_low_[:, -1] < roll_bb_lower_[:, -1]) & (roll_low_[:, -1] > roll_bb_lower3_[:, -1])\n","        # long_open_res *= (roll_bb_upper_[:, -1] < roll_high_[:, -1]) & (roll_low_[:, -2] < roll_bb_lower_[:, -2]) & (roll_high_[:, -1] < roll_bb_upper3_[:, -1])\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","        \n","        # ------ low in bb_level3 ------ #  Todo, idx sync 맞춰야할 것\n","        # short_open_res *= (bb_upper2_ < wave_high_fill_) & (wave_high_fill_ < bb_upper3_)\n","        # long_open_res *= (bb_lower3_ < wave_low_fill_) & (wave_low_fill_ < bb_lower2_)\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ first_high ------ #        \n","        # wave_high_prime_idx_fill_= res_df['wave_high_prime_idx_fill_{}{}'.format(itv, period1)].to_numpy()\n","        # wave_low_prime_idx_fill_= res_df['wave_low_prime_idx_fill_{}{}'.format(itv, period1)].to_numpy()\n","        # cu_prime_wave_base = get_line(cu_prime_idx_fill_, wave_base_)\n","        # co_prime_wave_base = get_line(co_prime_idx_fill_, wave_base_)\n","\n","        # # short_open_res *= (co_roll_high_[:, -1] > dc_base_) & (dc_base_ > co_roll_low_[:, -1])\n","        # # long_open_res *= (cu_roll_low_[:, -1] < dc_base_) & (dc_base_ < cu_roll_high_[:, -1])\n","\n","        # short_open_res *= (cu_prime_wave_base > dc_base_) & (dc_base_ > co_prime_wave_base)\n","        # long_open_res *= (co_prime_wave_base < dc_base_) & (dc_base_ < cu_prime_wave_base)\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # cu_prime_dc_base = get_line(cu_prime_idx_fill_, dc_base_)        \n","        # co_prime_dc_base = get_line(co_prime_idx_fill_, dc_base_)\n","        \n","        # shift_size = to_itvnum(p1_itv1)\n","        # b1_dc_base_ = res_df['dc_base_{}{}'.format(p1_itv1, p1_period1)].shift(shift_size).to_numpy()\n","\n","        # short_open_res *= (b1_dc_base_ < dc_base_)\n","        # long_open_res *= (b1_dc_base_ > dc_base_)\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ b1_base_15T < wave_high ------ #\n","        # short_open_res *= (b1_dc_base_ > co_roll_low_[:, -1])\n","        # long_open_res *= (b1_dc_base_ < cu_roll_high_[:, -1])\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))   \n","        \n","        \n","    # b1_itv_num = to_itvnum(config.tr_set.p2_itv0)\n","    # b2_itv_num = to_itvnum(config.tr_set.p2_itv0) * 2  # multi 2 for imb_v2\n","\n","    # res_df[short_tp_1_] = res_df['dc_lower_{}{}'.format(itv, period1)]\n","    # res_df[short_tp_0_] = res_df['dc_upper_{}{}'.format(itv, period2)]\n","    # # res_df[short_tp_0_] = res_df['dc_upper_15T4']\n","    # res_df[long_tp_1_] = res_df['dc_upper_{}{}'.format(itv, period1)]\n","    # res_df[long_tp_0_] = res_df['dc_lower_{}{}'.format(itv, period2)]\n","    # # res_df[long_tp_0_] = res_df['dc_lower_15T4']\n","    \n","        # ------ base_cc ------ #\n","        dc_base_ = res_df['dc_base_{}{}'.format(p1_itv1, p1_period1)].to_numpy()\n","\n","        # close_ = res_df['close_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","        # b1_dc_base_ = res_df['dc_base_{}{}'.format(p1_itv1, p1_period1)].shift(tf_entry).to_numpy()\n","        # b1_close_ = res_df['close_{}'.format(config.loc_set.point.tf_entry)].shift(tf_entry).to_numpy()\n","\n","        # short_open_res *= ((b1_close_ > dc_base_) & (dc_base_ > close_)) | ((b1_close_ > b1_dc_base_) & (dc_base_ > close_))\n","        # long_open_res *= ((b1_close_ < dc_base_) & (dc_base_ < close_)) | ((b1_close_ < b1_dc_base_) & (dc_base_ < close_))\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","        \n","        # ------ tf_entry ------ #\n","        # tf_entry = to_itvnum(config.loc_set.point.tf_entry)\n","        \n","        # short_open_res *= np_timeidx % tf_entry == (tf_entry - 1)\n","        # long_open_res *= np_timeidx % tf_entry == (tf_entry - 1) \n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","    \n","        # ------ cppr 로 양음봉 check ------ # \n","        # tf_entry = to_itvnum(config.loc_set.point.tf_entry)\n","\n","        # res_df['b1_cppr_{}'.format(config.loc_set.point.tf_entry)] = res_df['cppr_{}'.format(config.loc_set.point.tf_entry)].shift(tf_entry)\n","        # b1_cppr_ = res_df['b1_cppr_{}'.format(config.loc_set.point.tf_entry)].to_numpy()  # check b1's cppr in ep_loc\n","        # cppr_ = res_df['cppr_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","        # short_open_res *= (b1_cppr_ > 0) & (cppr_ < 0)\n","        # long_open_res *= (b1_cppr_ < 0) & (cppr_ > 0)\n","\n","        # res_df['b1_updbr'] = res_df['dc_upper_15T4_br'].shift(tf_entry).to_numpy()\n","        # res_df['b1_lwdbr'] = res_df['dc_lower_15T4_br'].shift(tf_entry).to_numpy()\n","        \n","        # res_df['b1_updbr_cppr'] = b1_cppr_ * res_df['b1_updbr'].to_numpy()\n","        # res_df['b1_lwdbr_cppr'] = b1_cppr_ * res_df['b1_lwdbr'].to_numpy()\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ dc_cross ------ #\n","        # b1_dc_upper_15T4 = res_df['dc_upper_15T4'].shift(tf_entry).to_numpy()\n","        # b1_dc_lower_15T4 = res_df['dc_lower_15T4'].shift(tf_entry).to_numpy()\n","        # b1_high_ = res_df['high_{}'.format(config.loc_set.point.tf_entry)].shift(tf_entry).to_numpy()\n","        # b1_low_ = res_df['low_{}'.format(config.loc_set.point.tf_entry)].shift(tf_entry).to_numpy()\n","        # short_open_res *= b1_high_ > b1_dc_upper_15T4\n","        # long_open_res *= b1_low_ < b1_dc_lower_15T4\n","        \n","        # ------ dc_cc ------ #\n","        # b1_close_ = res_df['close_{}'.format(config.loc_set.point.tf_entry)].shift(tf_entry).to_numpy()\n","        # short_open_res *= b1_close_ > b1_dc_upper_15T4\n","        # long_open_res *= b1_close_ < b1_dc_lower_15T4\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ empty_space ------ #       \n","        # dc_upper_15T4 = res_df['dc_upper_15T4'].to_numpy()\n","        # dc_lower_15T4 = res_df['dc_lower_15T4'].to_numpy() \n","        # high_ = res_df['high_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","        # low_ = res_df['low_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","        # short_open_res *= high_ < dc_upper_15T4\n","        # long_open_res *= low_ > dc_lower_15T4\n","        \n","        # ------ candle_pattern ------ #  \n","        # pattern_column = \"{}_{}\".format(config.loc_set.point.candle_pattern, config.loc_set.point.tf_entry)\n","        # short_open_res *= res_df[pattern_column].to_numpy() < 0\n","        # long_open_res *= res_df[pattern_column].to_numpy() > 0\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","\n","        # ------ lower_touch > upper_touch (long) ------ #\n","        # short_open_res *= res_df['short_upper_touch_idx_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy() > res_df['short_lower_touch_idx_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy()\n","        # long_open_res *= res_df['long_lower_touch_idx_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy() > res_df['long_upper_touch_idx_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy()\n","\n","        # ------ base_3T cross ------ #\n","        # dc_base_3T = res_df['dc_base_3T'].to_numpy()\n","        # b1_close = res_df['close'].shift(1).to_numpy()\n","        # short_open_res *= (b1_close > dc_base_3T) & (dc_base_3T > close)\n","        # long_open_res *= (b1_close < dc_base_3T) & (dc_base_3T < close)\n","\n","        # ------ wave_low < base_5T (long) ------ #\n","        # dc_base_5T = res_df['dc_base_5T'].to_numpy()        \n","        # short_open_res *= res_df['short_upper_touch_line_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy() > dc_base_5T\n","        # long_open_res *= res_df['long_lower_touch_line_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy() < dc_base_5T      \n","\n","        # ------ ppr ------ #\n","        # pumping_ratio(res_df, config, p1_itv1, p1_period1, p1_period2)  "]},{"cell_type":"markdown","metadata":{"id":"aTV4h3LjTZBp"},"source":["#### dump"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dc49JPmoTaPQ"},"outputs":[],"source":["\n","    \n","    csd_period = 40\n","    res_df = dc_line_v4(res_df, res_df, dc_period=csd_period)\n","    \n","    dc_upper_ = res_df['dc_upper_T{}'.format(csd_period)].to_numpy()    \n","    dc_lower_ = res_df['dc_lower_T{}'.format(csd_period)].to_numpy()  \n","\n","    short_open_res2 *= dc_upper_touch_span == 0\n","    long_open_res2 *= dc_lower_touch_span == 0\n","\n","    # ------ csdbox ------ # --> 결국 dc's upper & lower\n","    if show_detail:\n","      sys_log.warning(\"csdbox\")\n","      # sys_log.warning(\"np.sum(short_open_res1 == 1) : {}\".format(np.sum(short_open_res1 == 1)))\n","      # sys_log.warning(\"np.sum(long_open_res1 == 1) : {}\".format(np.sum(long_open_res1 == 1)))\n","      sys_log.warning(\"np.sum(short_open_res2 == 1) : {}\".format(np.sum(short_open_res2 == 1)))\n","      sys_log.warning(\"np.sum(long_open_res2 == 1) : {}\".format(np.sum(long_open_res2 == 1)))\n","      \n","    # olds,\n","    # np.nan - np.nan = np.nan -> vectorize 가능할 것 => xx\n","    # 1. wave_high_prime_idx_ ~ long_open_idx1 의 valid(not_non) 한 idx 를 max_dc_lower 와 min_low 의 비교값으로 채워넣음\n","    # valid_idx = ~(pd.isnull(wave_cu_post_idx_fill_) | pd.isnull(long_open_idx1))\n","    # max_dc_lower_ = [dc_lower_[int(iin):int(iout)].max() for iin, iout in zip(wave_cu_post_idx_fill_, long_open_idx1) if not pd.isnull(iin) if not pd.isnull(iout)]\n","    # min_low = [low[int(iin):int(iout)].min() for iin, iout in zip(wave_high_prime_idx_, long_open_idx1) if not pd.isnull(iin) if not pd.isnull(iout)]\n","    \n","    short_tp_1_, long_tp_1_ = 'short_tp_1_{}'.format(selection_id), 'long_tp_1_{}'.format(selection_id)\n","    short_tp_0_, long_tp_0_ = 'short_tp_0_{}'.format(selection_id), 'long_tp_0_{}'.format(selection_id)\n","    short_tp_gap_, long_tp_gap_ = 'short_tp_gap_{}'.format(selection_id), 'long_tp_gap_{}'.format(selection_id)\n","\n","    short_ep_1_, long_ep_1_ = 'short_ep_1_{}'.format(selection_id), 'long_ep_1_{}'.format(selection_id)\n","    short_ep_0_, long_ep_0_ = 'short_ep_0_{}'.format(selection_id), 'long_ep_0_{}'.format(selection_id)\n","    short_ep_gap_, long_ep_gap_ = 'short_ep_gap_{}'.format(selection_id), 'long_ep_gap_{}'.format(selection_id)\n","\n","    short_epout_1_, long_epout_1_ = 'short_epout_1_{}'.format(selection_id), 'long_epout_1_{}'.format(selection_id)\n","    short_epout_0_, long_epout_0_ = 'short_epout_0_{}'.format(selection_id), 'long_epout_0_{}'.format(selection_id)\n","    short_epout_gap_, long_epout_gap_ = 'short_epout_gap_{}'.format(selection_id), 'long_epout_gap_{}'.format(selection_id)\n","    \n","    # ================== convert unit -> numpy ================== #   \n","    # tp_cols = [short_tp_1_, short_tp_0_, short_tp_gap_, long_tp_1_, long_tp_0_, long_tp_gap_]\n","    # epout_cols = [short_epout_1_, short_epout_0_, short_epout_gap_, long_epout_1_, long_epout_0_, long_epout_gap_]\n","\n","    # short_tp_1, short_tp_0, short_tp_gap, long_tp_1, long_tp_0, long_tp_gap = [res_df[col_].to_numpy() for col_ in tp_cols]\n","    # short_epout_1, short_epout_0, short_epout_gap, long_epout_1, long_epout_0, long_epout_gap = [res_df[col_].to_numpy() for col_ in epout_cols]\n","\n","    if p2_itv1 != \"None\":  # vectorized point2\n","        short_point1_on2_idx = pd.Series(\n","            np.where(res_df['short_wave_point_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)], len_df_range, np.nan)).rolling(point1_to2_period,\n","                                                                                                                                    min_periods=1).max().to_numpy()  # period 내의 max_point1_idx\n","        long_point1_on2_idx = pd.Series(\n","            np.where(res_df['long_wave_point_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)], len_df_range, np.nan)).rolling(point1_to2_period,\n","                                                                                                                                   min_periods=1).max().to_numpy()\n","\n","        short_point2_idx = pd.Series(\n","            np.where(res_df['short_wave_point_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)], len_df_range, np.nan)).to_numpy()\n","        long_point2_idx = pd.Series(\n","            np.where(res_df['long_wave_point_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)], len_df_range, np.nan)).to_numpy()\n","\n","        res_df['short_point_idxgap_{}'.format(selection_id)] = short_point2_idx - short_point1_on2_idx\n","        res_df['long_point_idxgap_{}'.format(selection_id)] = long_point2_idx - long_point1_on2_idx\n","\n","        # ------ p1 & p2 ------ #\n","        short_open_res *= ~np.isnan(res_df['short_point_idxgap_{}'.format(selection_id)].to_numpy())\n","        long_open_res *= ~np.isnan(res_df['long_point_idxgap_{}'.format(selection_id)].to_numpy())\n","\n","        if show_detail:\n","          sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","          sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ p2 amax > p1_idx (long) ------ #\n","        short_open_res *= res_df['short_upper_touch_idx_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)].to_numpy() > short_point1_on2_idx\n","        long_open_res *= res_df['long_lower_touch_idx_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)].to_numpy() > long_point1_on2_idx\n","\n","        if show_detail:\n","          sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","          sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ higher low (long) ------ #\n","        # short_a_line1_on2_ = get_line(short_point1_on2_idx, res_df['short_a_line_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy())\n","        # long_a_line1_on2_ = get_line(long_point1_on2_idx, res_df['long_a_line_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy())\n","\n","        # short_a_line2_ = res_df['short_a_line_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)].to_numpy()\n","        # long_a_line2_ = res_df['long_a_line_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)].to_numpy()\n","\n","        # short_open_res *= short_a_line1_on2_ >= short_a_line2_\n","        # long_open_res *= long_a_line1_on2_ <= long_a_line2_\n","\n","        # print(np.sum(long_open_res == 1))\n","\n","        # ------ higher high (long) ------ #\n","        # short_open_res *= co_roll_low_[:, -2] > co_roll_low_[:, -1]\n","        # long_open_res *= cu_roll_high_[:, -2] < cu_roll_high_[:, -1]\n","\n","        # short_open_res *= co_roll_low_[:, -3] > co_roll_low_[:, -2]\n","        # long_open_res *= cu_roll_high_[:, -3] < cu_roll_high_[:, -2]\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ higher low (long) ------ # \n","        # short_open_res *= co_roll_high_[:, -2] > co_roll_high_[:, -1]\n","        # long_open_res *= cu_roll_low_[:, -2] < cu_roll_low_[:, -1]\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))  \n","\n","        # ------ tf2_base < wave_low ------ #\n","        # short_open_res *= (dc_base_ > co_roll_high_[:, -1])\n","        # long_open_res *= (dc_base_ < cu_roll_low_[:, -1])\n","\n","        # if show_detail:\n","        #   sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","        #   sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))  \n","\n","        # short_open_res *= (cu_prime_wave_base > cu_prime_dc_base) & (dc_base_ > co_prime_wave_base)\n","        # long_open_res *= (co_prime_wave_base < co_prime_dc_base) & (dc_base_ < cu_prime_wave_base)\n","\n","        short_open_res *= (co_prime_dc_base < co_roll_low_[:, -2])\n","        long_open_res *= (cu_prime_dc_base > cu_roll_high_[:, -2])  #  b1_cu_prime_idx’s tf2_base > b1_high -> b1 이 아님 (error)\n","\n","\n","        res_df[short_epout_1_] = res_df['short_wave_low_{}{}{}'.format(itv, period1, period2)]\n","        res_df[short_epout_0_] = res_df['short_new_wave_high_{}{}{}'.format(itv, period1, period2)]\n","        res_df[long_epout_1_] = res_df['long_wave_high_{}{}{}'.format(itv, period1, period2)]\n","        res_df[long_epout_0_] = res_df['long_new_wave_low_{}{}{}'.format(itv, period1, period2)]\n","        \n","        # ------ get candle_lastidx ------ #        \n","        tf_entry = to_itvnum(config.loc_set.point.tf_entry)\n","        b1_candle_shift = np_timeidx % tf_entry + 1\n","        b2_candle_shift = b1_candle_shift + tf_entry\n","        b3_candle_shift = b1_candle_shift + 2 * tf_entry\n","\n","        print(b3_candle_shift)\n","\n","        # bb_upper_ = res_df['bb_upper_{}{}'.format('T', 60)].to_numpy()\n","        # bb_lower_ = res_df['bb_lower_{}{}'.format('T', 60)].to_numpy()\n","        # bb_upper2_ = res_df['bb_upper2_{}{}'.format('T', 60)].to_numpy()\n","        # bb_lower2_ = res_df['bb_lower2_{}{}'.format('T', 60)].to_numpy()\n","        # bb_upper3_ = res_df['bb_upper3_{}{}'.format('T', 60)].to_numpy()\n","        # bb_lower3_ = res_df['bb_lower3_{}{}'.format('T', 60)].to_numpy()\n","\n","        # ------ compare by back_idx  ------ #   \n","        b3_bb_upper_ = res_df['bb_upper_{}{}'.format('T', 60)].shift(b3_candle_shift).to_numpy()\n","        b3_bb_lower_ = res_df['bb_lower_{}{}'.format('T', 60)].shift(b3_candle_shift).to_numpy()\n","        b3_bb_upper2_ = res_df['bb_upper2_{}{}'.format('T', 60)].shift(b3_candle_shift).to_numpy()\n","        b3_bb_lower2_ = res_df['bb_lower2_{}{}'.format('T', 60)].shift(b3_candle_shift).to_numpy()\n","        b3_close = res_df['close'].shift(b3_candle_shift).to_numpy()\n","\n","        b2_bb_upper2_ = res_df['bb_upper2_{}{}'.format('T', 60)].shift(b2_candle_shift).to_numpy()\n","        b2_bb_lower2_ = res_df['bb_lower2_{}{}'.format('T', 60)].shift(b2_candle_shift).to_numpy()\n","        b2_bb_upper3_ = res_df['bb_upper3_{}{}'.format('T', 60)].shift(b2_candle_shift).to_numpy()\n","        b2_bb_lower3_ = res_df['bb_lower3_{}{}'.format('T', 60)].shift(b2_candle_shift).to_numpy()\n","        b2_close = res_df['close'].shift(b2_candle_shift).to_numpy()\n","\n","        b1_bb_upper_ = res_df['bb_upper_{}{}'.format('T', 60)].shift(b1_candle_shift).to_numpy()\n","        b1_bb_lower_ = res_df['bb_lower_{}{}'.format('T', 60)].shift(b1_candle_shift).to_numpy()\n","        b1_bb_upper2_ = res_df['bb_upper2_{}{}'.format('T', 60)].shift(b1_candle_shift).to_numpy()\n","        b1_bb_lower2_ = res_df['bb_lower2_{}{}'.format('T', 60)].shift(b1_candle_shift).to_numpy()\n","        b1_close = res_df['close'].shift(b1_candle_shift).to_numpy()\n"]},{"cell_type":"markdown","metadata":{"id":"HKdUKKl-483N"},"source":["### utils_public"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"nzOYWA2kqZ0d","executionInfo":{"status":"ok","timestamp":1663111646750,"user_tz":-540,"elapsed":415,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# from funcs.funcs_indicator import *\n","# from funcs.funcs_trader import *\n","# import logging\n","# from ast import literal_eval\n","\n","pd.set_option('mode.chained_assignment',  None)\n","sys_log = logging.getLogger()\n","\n","\n","class OrderSide:\n","    BUY = \"BUY\"\n","    SELL = \"SELL\"\n","    INVALID = None\n","\n","\n","def lvrg_set(res_df, config, open_side, ep_, out_, fee, limit_leverage=50):\n","    selection_id = config.selection_id\n","    if not pd.isnull(out_) and not config.lvrg_set.static_lvrg:\n","        if selection_id in ['v3']:\n","            if open_side == OrderSide.SELL:\n","                loss = out_ / ep_\n","            else:\n","                loss = ep_ / out_\n","        else:  # 이 phase 가 정석, 윗 phase 는 결과가 수익 극대화라 사용함\n","            if open_side == OrderSide.SELL:\n","                loss = ep_ / out_\n","            else:\n","                loss = out_ / ep_\n","\n","        config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(loss - 1 - (fee + config.trader_set.market_fee))\n","\n","    # ------------ leverage rejection ------------ #\n","    # 감당하기 힘든 fluc. 의 경우 진입하지 않음 - dynamic_lvrg 사용 경우\n","    if config.lvrg_set.leverage < 1 and config.lvrg_set.lvrg_rejection:\n","        # if config.lvrg_set.leverage >= 1 and config.lvrg_set.lvrg_rejection:\n","        return None\n","\n","    if not config.lvrg_set.allow_float:\n","        config.lvrg_set.leverage = int(config.lvrg_set.leverage)\n","\n","    config.lvrg_set.leverage = min(limit_leverage, max(config.lvrg_set.leverage, 1))\n","\n","    return config.lvrg_set.leverage\n","\n","\n","def sync_check(df_, config, order_side=\"OPEN\", row_slice=True):\n","    try:\n","        make_itv_list = [m_itv.replace('m', 'T') for m_itv in literal_eval(config.trader_set.itv_list)]\n","        row_list = literal_eval(config.trader_set.row_list)\n","        rec_row_list = literal_eval(config.trader_set.rec_row_list)\n","        offset_list = literal_eval(config.trader_set.offset_list)\n","\n","        assert len(make_itv_list) == len(offset_list), \"length of itv & offset_list should be equal\"\n","        htf_df_list = [to_htf(df_, itv_=itv_, offset=offset_) for itv_idx, (itv_, offset_)\n","                       in enumerate(zip(make_itv_list, offset_list)) if itv_idx != 0]  #\n","        htf_df_list.insert(0, df_)\n","\n","        # for htf_df_ in htf_df_list:\n","        #     print(htf_df_.tail())\n","\n","        #       Todo        #\n","        #        1. row_list calc.\n","        #           a. indi. 를 만들기 위한 최소 period 가 존재하고, 그 indi. 를 사용한 lb_period 가 존재함\n","        #           b. => default_period + lb_period\n","        #               i. from sync_check, public_indi, ep_point2, ep_dur 의 tf 별 max lb_period check\n","        #                   1. default_period + max lb_period check\n","        #                       a. 현재까지 lb_period_list\n","        #                           h_prev_idx (open / close) 60\n","        #                           dc_period 135\n","        #                           zone_dc_period 135\n","\n","        # --------- slicing (in trader phase only) --------- #\n","        #               --> latency 영향도가 높은 곳은 이곳\n","        if row_slice:  # recursive 가 아닌 indi. 의 latency 를 고려한 slicing\n","            df, df_3T, df_5T, df_15T, df_30T, df_H, df_4H = [df_s.iloc[-row_list[row_idx]:].copy() for row_idx, df_s in enumerate(htf_df_list)]\n","            rec_df, rec_df_3T, rec_df_5T, rec_df_15T, rec_df_30T, rec_df_H, rec_df_4H = [df_s.iloc[-rec_row_list[row_idx]:].copy() for row_idx, df_s\n","                                                                                         in\n","                                                                                         enumerate(htf_df_list)]\n","        else:\n","            df, df_3T, df_5T, df_15T, df_30T, df_H, df_4H = htf_df_list\n","            rec_df, rec_df_3T, rec_df_5T, rec_df_15T, rec_df_30T, rec_df_H, rec_df_4H = htf_df_list\n","\n","        # --------- add indi. --------- #\n","\n","        #        1. 필요한 indi. 는 enlist_epouttp & mr_check 보면서 삽입\n","        #        2. min use_rows 계산을 위해서, tf 별로 gathering 함        #\n","        # start_0 = time.time()\n","\n","        # ------ T ------ #\n","        # df = dc_line(df, None, 'T', dc_period=20)\n","        # df = bb_line(df, None, 'T')\n","        #\n","        # ------ 3T ------ #\n","        # df = dc_line(df, df_3T, '3T')\n","\n","        # ------ 5T ------ #\n","        # h_candle_v3(df, '5T')\n","        df = dc_line(df, df_5T, '5T')\n","        df = bb_line(df, df_5T, '5T')\n","        #\n","        # ------ 15T ------ #\n","        # h_candle_v3(df, '15T')\n","        df = dc_line(df, df_15T, '15T')\n","        df = bb_line(df, df_15T, '15T')\n","        #\n","        # ------ 30T ------ #\n","        # df = bb_line(df, df_30T, '30T')\n","        #\n","        # ------ H ------ #\n","        # h_candle_v3(df, 'H')\n","        # df = dc_line(df, df_H, 'H')\n","\n","        # ------ 4H ------ #\n","        # df = bb_line(df, df_4H, '4H')\n","\n","        # rec_df['rsi_1m'] = rsi(rec_df, 14)  # Todo - recursive, 250 period\n","        # df = df.join(to_lower_tf_v2(df, rec_df.iloc[:, [-1]], [-1], backing_i=0), how='inner')  # <-- join same_tf manual\n","        #\n","        # if order_side in [\"OPEN\"]:\n","        #     rec_df_5T['ema_5T'] = ema(rec_df_5T['close'], 195)  # Todo - recursive, 1100 period (5T)\n","        #     df = df.join(to_lower_tf_v2(df, rec_df_5T, [-1]), how='inner')\n","\n","    except Exception as e:\n","        sys_log.error(\"error in sync_check :\", e)\n","    else:\n","        return df\n","\n","\n","    return wave_publics_v2(t_df, cu_bool, co_bool, ohlc_list, wave_period)\n","\n","def public_indi(res_df, config, np_timeidx, order_side=\"OPEN\"):\n","\n","    selection_id = config.selection_id\n","\n","    wave_itv1 = config.tr_set.wave_itv1\n","    wave_itv2 = config.tr_set.wave_itv2\n","    wave_period1 = config.tr_set.wave_period1\n","    wave_period2 = config.tr_set.wave_period2\n","    tc_period = config.tr_set.tc_period\n","    roll_hl_cnt = 3\n","  \n","    # assert to_itvnum(wave_itv1) > 1  # wave_itv2 == 'T' and \n","    # ====== public ====== #\n","    # res_df = wave_range_dcbase_v11_3(res_df, config, over_period=2) \n","    \n","    # ------------ wave_period1 ------------ #\n","    if to_itvnum(wave_itv1) > 1: \n","      offset = '1h' if wave_itv1 != 'D' else '9h'\n","      htf_df = to_htf(res_df, wave_itv1, offset=offset)\n","      htf_df = wave_range_cci_v4(htf_df, wave_period1)\n","      \n","      # cols = list(htf_df.columns[-15:-4])  # except idx col\n","      cols = list(htf_df.columns[4:])  # 15T_ohlc 를 제외한 wave_range_cci_v4 로 추가된 cols, 다 넣어버리기 (추후 혼란 방지)\n","\n","      valid_co_prime_idx, valid_cu_prime_idx, roll_co_idx_arr, roll_cu_idx_arr = roll_wave_hl_idx_v5(htf_df, wave_itv1, wave_period1, roll_hl_cnt=roll_hl_cnt)\n","\n","      htf_df = get_roll_wave_data_v2(htf_df, valid_co_prime_idx, roll_co_idx_arr, 'wave_high_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","      cols += list(htf_df.columns[-roll_hl_cnt:])\n","\n","      htf_df = get_roll_wave_data_v2(htf_df, valid_cu_prime_idx, roll_cu_idx_arr, 'wave_low_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","      cols += list(htf_df.columns[-roll_hl_cnt:])\n","\n","      htf_df = wave_range_ratio_v4_3(htf_df, wave_itv1, wave_period1, roll_hl_cnt=roll_hl_cnt)\n","      cols += list(htf_df.columns[-4:])\n","\n","      # ------ 필요한 cols 만 join (htf's idx 정보는 ltf 와 sync. 가 맞지 않음 - join 불가함) ------ #\n","      res_df.drop(cols, inplace=True, axis=1, errors='ignore')\n","      res_df = res_df.join(to_lower_tf_v3(res_df, htf_df, cols, backing_i=1), how='inner')\n","    else:\n","      # res_df = wave_range_cci_v4(res_df, wave_period1)\n","      res_df = wave_range_cci_v4_1(res_df, wave_period1)\n","      # res_df = wave_range_stoch_v1(res_df, wave_period1)\n","      # res_df = wave_range_dc_envel_v1(res_df, wave_period1)\n","\n","      res_df = get_wave_time_ratio(res_df, wave_itv1, wave_period1)\n","\n","      valid_co_prime_idx, valid_cu_prime_idx, roll_co_idx_arr, roll_cu_idx_arr = roll_wave_hl_idx_v5(res_df, wave_itv1, wave_period1, roll_hl_cnt=roll_hl_cnt)\n","\n","      # res_df = add_roll_idx(res_df, valid_cu_prime_idx, roll_cu_idx_arr, 'wave_cu_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","      # res_df = add_roll_idx(res_df, valid_co_prime_idx, roll_co_idx_arr, 'wave_co_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","\n","      res_df = get_roll_wave_data_v2(res_df, valid_co_prime_idx, roll_co_idx_arr, 'wave_high_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)  # Todo, 갱신되는 high 의 last_high 를 추리기 위해 co_prime 사용함\n","      res_df = get_roll_wave_data_v2(res_df, valid_cu_prime_idx, roll_cu_idx_arr, 'wave_low_fill_{}{}'.format(wave_itv1, wave_period1), roll_hl_cnt)\n","      \n","      res_df = wave_range_ratio_v4_3(res_df, wave_itv1, wave_period1, roll_hl_cnt=roll_hl_cnt)\n","      res_df = get_wave_length(res_df, valid_co_prime_idx, valid_cu_prime_idx, roll_co_idx_arr, roll_cu_idx_arr, wave_itv1, wave_period1, roll_hl_cnt=roll_hl_cnt)\n","\n","      # res_df = tc_dc_base(res_df, tc_period)\n","      res_df = tc_cci(res_df, tc_period)\n","      # res_df = tc_cci_v2(res_df, tc_period)\n","\n","      # ------ prev_low vs ma ------ #\n","      # ma_period = 60\n","      # res_df = ma(res_df, ma_period)\n","      \n","      # res_df['short_ma_T{}'.format(ma_period)] = res_df['ma_T{}'.format(ma_period)]\n","      # res_df['long_ma_T{}'.format(ma_period)] = res_df['ma_T{}'.format(ma_period)]\n","      \n","      # res_df = get_roll_wave_data_v2(res_df, valid_co_prime_idx, roll_co_idx_arr, 'short_ma_T{}'.format(ma_period), roll_hl_cnt)   # Todo, for index sync.\n","      # res_df = get_roll_wave_data_v2(res_df, valid_cu_prime_idx, roll_cu_idx_arr, 'long_ma_T{}'.format(ma_period), roll_hl_cnt)   # Todo, for index sync.\n","\n","    # ------------ wave_period2 ------------ #\n","    if wave_itv1 != wave_itv2 or wave_period1 != wave_period2:\n","      assert wave_itv2 == 'T'      \n","      \n","      res_df = wave_range_cci_v4_1(res_df, wave_period2, band_width=99)\n","\n","      valid_co_prime_idx, valid_cu_prime_idx, roll_co_idx_arr, roll_cu_idx_arr = roll_wave_hl_idx_v5(res_df, wave_itv2, wave_period2, roll_hl_cnt=roll_hl_cnt)\n","      res_df = get_roll_wave_data_v2(res_df, valid_co_prime_idx, roll_co_idx_arr, 'wave_high_fill_{}{}'.format(wave_itv2, wave_period2), roll_hl_cnt)\n","      res_df = get_roll_wave_data_v2(res_df, valid_cu_prime_idx, roll_cu_idx_arr, 'wave_low_fill_{}{}'.format(wave_itv2, wave_period2), roll_hl_cnt)\n","\n","      res_df = wave_range_ratio_v4_3(res_df, wave_itv2, wave_period2, roll_hl_cnt=roll_hl_cnt)\n","      \n","\n","    # ------ wave_loc_pct (bb) ------ #\n","    # res_df = wave_loc_pct_v2(res_df, config, 'T', 60)\n","    # res_df = wave_loc_pct(res_df, config, 'T', 60)\n","\n","    # future_cols = ['cu_es_15T1', 'co_es_15T1', 'upper_wick_ratio_15T', 'lower_wick_ratio_15T']\n","    # itv_list = ['15T', '15T', '15T', '15T']\n","    # res_df = backing_future_data(res_df, future_cols, itv_list)\n","\n","    # ====== intervaly ====== #    \n","    # ------ 5T ------ #\n","    # res_df = dc_level(res_df, '5T', 1)\n","    # res_df = bb_level(res_df, '5T', 1)\n","\n","    # res_df = st_level(res_df, '5T', 1)\n","\n","    # ------ 15T ------ #\n","    # res_df = dc_level(res_df, '15T', 1)\n","    # res_df = bb_level(res_df, '15T', 1)\n","    # res_df = dtk_plot(res_df, dtk_itv2='15T', hhtf_entry=15, use_dtk_line=config.loc_set.zone1.use_dtk_line, np_timeidx=np_timeidx)\n","\n","    # res_df = st_level(res_df, '15T', 1)\n","\n","    # ------ 30T ------ #\n","    # res_df = dc_level(res_df, '30T', 1)\n","    # res_df = bb_level(res_df, '30T', 1)\n","    # res_df = st_level(res_df, '30T', 1)\n","\n","    # ------ H ------ #\n","    # res_df = bb_level(res_df, 'H', 1)\n","\n","    # ------ 4H ------ #\n","    # res_df = bb_level(res_df, '4H', 1)\n","\n","    # res_df['dc_upper_v2'.format(selection_id)] = res_df['high'].rolling(config.loc_set.zone1.dc_period).max()   # Todo, consider dc_period\n","    # res_df['dc_lower_v2'.format(selection_id)] = res_df['low'].rolling(config.loc_set.zone1.dc_period).min()\n","\n","    # res_df['zone_dc_upper_v2'.format(selection_id)] = res_df['high'].rolling(config.loc_set.zone1.zone_dc_period).max()   # Todo, consider zone_dc_period\n","    # res_df['zone_dc_lower_v2'.format(selection_id)] = res_df['low'].rolling(config.loc_set.zone1.zone_dc_period).min()\n","\n","    # if order_side in [\"OPEN\"]:\n","        # candle_score_v3(res_df, 'T', unsigned=False)\n","        # candle_score_v3(res_df, config.loc_set.point1.exp_itv, unsigned=False)\n","\n","    #     temp indi.    #\n","    # res_df[\"ma30_1m\"] = res_df['close'].rolling(30).mean()\n","    # res_df[\"ma60_1m\"] = res_df['close'].rolling(60).mean()\n","    # res_df = dtk_plot(res_df, dtk_itv2='15T', hhtf_entry=15, use_dtk_line=config.loc_set.zone1.use_dtk_line, np_timeidx=np_timeidx)\n","\n","    return res_df\n","\n","\n","def expiry_v0(res_df, config, op_idx, e_j, tp_j, np_datas, open_side):\n","    high, low = np_datas\n","    selection_id = config.selection_id\n","    expire = 0\n","\n","    if config.tr_set.expire_tick != \"None\":\n","        if e_j - op_idx >= config.tr_set.expire_tick:\n","            expire = 1\n","\n","    if config.tr_set.expire_k1 != \"None\":\n","        if open_side == OrderSide.SELL:\n","            short_tp_1_ = res_df['short_tp_1_{}'.format(selection_id)].to_numpy()  # id 에 따라 dynamic 변수라 이곳에서 numpy 화 진행\n","            short_tp_gap_ = res_df['short_tp_gap_{}'.format(selection_id)].to_numpy()\n","            if low[e_j] <= short_tp_1_[tp_j] - short_tp_gap_[tp_j] * config.tr_set.expire_k1:\n","                expire = 1\n","        else:\n","            long_tp_1_ = res_df['long_tp_1_{}'.format(selection_id)].to_numpy()  # iloc 이 빠를까, to_numpy() 가 빠를까  # 3.94 ms --> 5.34 ms (iloc)\n","            long_tp_gap_ = res_df['long_tp_gap_{}'.format(selection_id)].to_numpy()\n","            if high[e_j] >= long_tp_1_[tp_j] + long_tp_gap_[tp_j] * config.tr_set.expire_k1:\n","                expire = 1\n","\n","    return expire\n","\n","\n","def expiry(res_df, config, op_idx, e_j, tp_j, np_datas, open_side):\n","    high, low = np_datas\n","    selection_id = config.selection_id\n","    expire = 0\n","\n","    if config.tr_set.expire_tick != \"None\":\n","        if e_j - op_idx >= config.tr_set.expire_tick:\n","            expire = 1\n","\n","    if config.tr_set.expire_k1 != \"None\":\n","        if open_side == OrderSide.SELL:\n","            short_tp_ = res_df['short_tp_{}'.format(selection_id)].to_numpy()  # id 에 따라 dynamic 변수라 이곳에서 numpy 화 진행\n","            short_tp_gap_ = res_df['short_tp_gap_{}'.format(selection_id)].to_numpy()\n","            if low[e_j] <= short_tp_[tp_j] + short_tp_gap_[tp_j] * config.tr_set.expire_k1:\n","                expire = 1\n","        else:\n","            long_tp_ = res_df['long_tp_{}'.format(selection_id)].to_numpy()  # iloc 이 빠를까, to_numpy() 가 빠를까  # 3.94 ms --> 5.34 ms (iloc)\n","            long_tp_gap_ = res_df['long_tp_gap_{}'.format(selection_id)].to_numpy()\n","            if high[e_j] >= long_tp_[tp_j] - long_tp_gap_[tp_j] * config.tr_set.expire_k1:\n","                expire = 1\n","\n","    return expire\n","\n","\n","# def expiry_p1(res_df, config, op_idx1, i, op_idx2, np_datas, open_side):\n","def expiry_p1(res_df, config, op_idx1, op_idx2, tp1, tp0, tp_gap, np_datas, open_side):\n","    high, low = np_datas\n","    selection_id = config.selection_id\n","    expire = 0\n","    touch_idx = None\n","\n","    # if config.tr_set.expire_tick != \"None\":\n","    #     if e_j - op_idx >= config.tr_set.expire_tick:\n","    #         expire = 1\n","\n","    # Todo, p1's tp1, 0 cannot be vectorized\n","    #   a. expiration 의 조건은 wave1, 0 의 broken\n","    idx_range = np.arange(op_idx1, op_idx2)\n","    if config.tr_set.expire_k1 != \"None\":\n","        if open_side == OrderSide.SELL:\n","            touch_idx = np.where((low[op_idx1:op_idx2] <= tp1 + tp_gap * config.tr_set.expire_k1) | \\\n","                                 (high[op_idx1:op_idx2] >= tp0 - tp_gap * config.tr_set.expire_k1),\n","                                 idx_range, np.nan)\n","            # if op_idx1 >= 16353:\n","            #   print(\"high[16353], tp0 :\", high[16353], tp0)\n","            if np.sum(~np.isnan(touch_idx)) > 0:  # touch 가 존재하면, \n","            # if low[op_idx1:op_idx2].min() <= tp1 + tp_gap * config.tr_set.expire_k1 or \\\n","            # high[op_idx1:op_idx2].max() >= tp0 - tp_gap * config.tr_set.expire_k1:   # p2_box loc. 이 있어서, op_idx2 + 1 안함\n","                expire = 1\n","        else:\n","            touch_idx = np.where((high[op_idx1:op_idx2] >= tp1 - tp_gap * config.tr_set.expire_k1) | \\\n","                                  (low[op_idx1:op_idx2] <= tp0 + tp_gap * config.tr_set.expire_k1),\n","                                  idx_range, np.nan)\n","            if np.sum(~np.isnan(touch_idx)) > 0:                                  \n","            # if high[op_idx1:op_idx2].max() >= tp1 - tp_gap * config.tr_set.expire_k1 or \\\n","            # low[op_idx1:op_idx2].min() <= tp0 + tp_gap * config.tr_set.expire_k1:\n","                expire = 1\n","\n","    return expire, np.nanmin(touch_idx)\n","\n","\n","def expiry_p2(res_df, config, op_idx, e_j, wave1, wave_gap, np_datas, open_side):\n","    high, low = np_datas\n","    selection_id = config.selection_id\n","    expire = 0\n","\n","    if config.tr_set.expire_tick != \"None\":\n","        if e_j - op_idx >= config.tr_set.expire_tick:\n","            expire = 1\n","\n","    if config.tr_set.expire_k2 != \"None\":\n","        if open_side == OrderSide.SELL:\n","            if low[e_j] <= wave1 + wave_gap * config.tr_set.expire_k2:\n","                expire = 1\n","        else:\n","            if high[e_j] >= wave1 - wave_gap * config.tr_set.expire_k2:\n","                expire = 1\n","\n","    return expire\n","\n","\n","# def ep_loc_point2_v2(res_df, config, i, out_j, side=OrderSide.SELL):\n","#     allow_ep_in = 1\n","#     if config.selection_id in ['v5_2']:\n","#         if side == OrderSide.SELL:\n","#             dc_upper_T = res_df['dc_upper_T'].to_numpy()\n","#             dc_upper_15T = res_df['dc_upper_15T'].to_numpy()\n","#             allow_ep_in *= (dc_upper_T[i - 1] <= dc_upper_15T[i]) & \\\n","#                            (dc_upper_15T[i - 1] != dc_upper_15T[i])\n","#         else:\n","#             dc_lower_T = res_df['dc_lower_T'].to_numpy()\n","#             dc_lower_15T = res_df['dc_lower_15T'].to_numpy()\n","#             allow_ep_in *= (dc_lower_T[i - 1] >= dc_lower_15T[i]) & \\\n","#                            (dc_lower_15T[i - 1] != dc_lower_15T[i])\n","\n","#     if config.selection_id in ['v3_4']:\n","#         wick_score_list = literal_eval(config.ep_set.point2.wick_score_list)\n","#         wick_scores = [res_df['wick_score_{}'.format(s_itv)].to_numpy() for s_itv in literal_eval(config.ep_set.point2.score_itv_list)]\n","#         close = res_df['close'].to_numpy()\n","#         if side == OrderSide.SELL:\n","#             sup_T = res_df['sup_T'].to_numpy()\n","#             allow_ep_in *= close[i] < sup_T[i - 1]\n","#             if len(wick_score_list) != 0:\n","#                 allow_ep_in *= wick_scores[0][i] < -wick_score_list[0]\n","#         else:\n","#             resi_T = res_df['resi_T'].to_numpy()\n","#             allow_ep_in *= close[i] > resi_T[i - 1]\n","#             if len(wick_score_list) != 0:\n","#                 allow_ep_in *= wick_scores[0][i] > wick_score_list[0]\n","\n","#     if allow_ep_in:\n","#         out_j = i\n","#     return allow_ep_in, out_j\n","\n","\n","# vectorized calc.\n","# multi-stem 에 따라 dynamic vars.가 입력되기 때문에 class 내부 vars. 로 종속시키지 않음\n","def ep_loc_p1_v3(res_df, config, np_timeidx, show_detail=True, ep_loc_side=OrderSide.SELL):\n","    # ------- param init ------- #\n","    selection_id = config.selection_id\n","    c_i = config.trader_set.complete_index\n","    len_df = len(res_df)\n","    mr_res = np.ones(len_df)\n","    zone_arr = np.full(len_df, 'n')\n","\n","    # ------ process 한번에 처리해서 param_check 만 ver. 별로 하면 될 것 ------ #\n","    #     => public_indi() 가 될 것\n","    #     1. 사용한 param 정보와 matching 된 data 병렬로 나열 logging 될 것\n","    tp_fee, out_fee = calc_tp_out_fee_v2(config)\n","\n","    # ============ tr_thresh ============ #  # vectorize allow only for p1_hhm\n","    if config.loc_set.point1.short_tr_thresh != \"None\":  #  and not config.tr_set.check_hlm:\n","        if ep_loc_side == OrderSide.SELL:\n","            short_tr_ = res_df['short_tr_{}'.format(selection_id)].to_numpy()\n","            mr_res *= short_tr_ >= config.loc_set.point1.short_tr_thresh\n","            # mr_res *= short_tr_ <= config.loc_set.point1.short_tr_thresh + 0.1\n","            if show_detail:\n","                sys_log.warning(\n","                    \"short_tr_ >= short_tr_thresh : {:.5f} {:.5f} ({})\".format(short_tr_[c_i], config.loc_set.point1.short_tr_thresh, mr_res[c_i]))\n","        else:\n","            long_tr_ = res_df['long_tr_{}'.format(selection_id)].to_numpy()\n","            mr_res *= long_tr_ >= config.loc_set.point1.long_tr_thresh\n","            # mr_res *= long_tr_ <= config.loc_set.point1.long_tr_thresh + 0.1\n","            if show_detail:\n","                sys_log.warning(\n","                    \"long_tr_ >= long_tr_thresh : {:.5f} {:.5f} ({})\".format(long_tr_[c_i], config.loc_set.point1.long_tr_thresh, mr_res[c_i]))\n","\n","    # ============ spread - independent to tr_set ============ #  --> Todo, 사용 안하고 싶은 wave_point1\n","    if config.loc_set.point1.short_spread != \"None\":\n","        if selection_id in ['v3']:\n","            if ep_loc_side == OrderSide.SELL:\n","                bb_base_5T = res_df['bb_base_5T'].to_numpy()  # to_numpy() 는 ep_loc 에서 진행됨\n","                bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","                short_spread = (bb_base_5T - bb_lower_5T - tp_fee * bb_base_5T) / (bb_base_5T - bb_lower_5T + out_fee * bb_base_5T)\n","                mr_res *= short_spread >= config.loc_set.point1.short_spread\n","                if show_detail:\n","                    sys_log.warning(\n","                        \"short_spread >= config.loc_set.point1.short_spread : {:.5f} {:.5f} ({})\".format(short_spread[c_i], config.loc_set.point1.short_spread, mr_res[c_i]))\n","            else:\n","                bb_upper_5T = res_df['bb_upper_5T'].to_numpy()\n","                dc_lower_5T = res_df['dc_lower_5T'].to_numpy()\n","                # mr_res *= (bb_base_5T - dc_lower_5T - tp_fee * bb_upper_5T) / (bb_base_5T - dc_lower_5T + out_fee * bb_base_5T) >= config.loc_set.point1.long_spread\n","                long_spread = (bb_upper_5T - dc_lower_5T - tp_fee * bb_upper_5T) / (bb_upper_5T - dc_lower_5T + out_fee * bb_upper_5T)\n","                mr_res *= long_spread >= config.loc_set.point1.long_spread\n","                if show_detail:\n","                    sys_log.warning(\n","                        \"long_spread >= config.loc_set.point1.long_spread : {:.5f} {:.5f} ({})\".format(long_spread[c_i], config.loc_set.point1.long_spread, mr_res[c_i]))                  \n","\n","    # ============ point1 ratios ============ #\n","    # ------ wave_range_ratio ------ #    \n","    if config.loc_set.point1.wrr_10 != \"None\":   # for excessive range rejection         \n","      wave_itv1 = config.tr_set.wave_itv1\n","      wave_period1 = config.tr_set.wave_period1\n","      co_wrr_10_ = res_df['co_wrr_10_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      cu_wrr_10_ = res_df['cu_wrr_10_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= cu_wrr_10_ <= config.loc_set.point1.wrr_10\n","        # mr_res *= cu_wrr_10_ >= config.loc_set.point1.wrr_10\n","        if show_detail:\n","            sys_log.warning(\"cu_wrr_10_ <= config.loc_set.point1.wrr_10 : {:.5f} {:.5f} ({})\".format(cu_wrr_10_[c_i], config.loc_set.point1.wrr_10, mr_res[c_i]))\n","      else:\n","        mr_res *= co_wrr_10_ <= config.loc_set.point1.wrr_10\n","        # mr_res *= co_wrr_10_ >= config.loc_set.point1.wrr_10\n","        if show_detail:\n","            sys_log.warning(\"co_wrr_10_ <= config.loc_set.point1.wrr_10 : {:.5f} {:.5f} ({})\".format(co_wrr_10_[c_i], config.loc_set.point1.wrr_10, mr_res[c_i]))\n","\n","    if config.loc_set.point1.wrr_21 != \"None\":   # for excessive range rejection         \n","      wave_itv1 = config.tr_set.wave_itv1\n","      wave_period1 = config.tr_set.wave_period1\n","      co_wrr_21_ = res_df['co_wrr_21_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      cu_wrr_21_ = res_df['cu_wrr_21_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= cu_wrr_21_ <= config.loc_set.point1.wrr_21\n","        # mr_res *= cu_wrr_21_ >= config.loc_set.point1.wrr_21\n","        if show_detail:\n","            sys_log.warning(\"cu_wrr_21_ <= config.loc_set.point1.wrr_21 : {:.5f} {:.5f} ({})\".format(cu_wrr_21_[c_i], config.loc_set.point1.wrr_21, mr_res[c_i]))\n","      else:\n","        mr_res *= co_wrr_21_ <= config.loc_set.point1.wrr_21\n","        # mr_res *= co_wrr_21_ >= config.loc_set.point1.wrr_21\n","        if show_detail:\n","            sys_log.warning(\"co_wrr_21_ <= config.loc_set.point1.wrr_21 : {:.5f} {:.5f} ({})\".format(co_wrr_21_[c_i], config.loc_set.point1.wrr_21, mr_res[c_i]))\n","\n","    if config.loc_set.point1.wrr_32 != \"None\":            \n","      wave_itv1 = config.tr_set.wave_itv1\n","      wave_period1 = config.tr_set.wave_period1\n","      co_wrr_32_ = res_df['co_wrr_32_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      cu_wrr_32_ = res_df['cu_wrr_32_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= cu_wrr_32_ <= config.loc_set.point1.wrr_32 #+ 0.1  # 0.1 0.05\n","        # mr_res *= (cu_wrr_32_ >= config.loc_set.point1.wrr_32) # & (cu_wrr_32_ <= 1)\n","        # mr_res *= cu_wrr_32_ >= config.loc_set.point1.wrr_32 - 0.1\n","        if show_detail:\n","            sys_log.warning(\"cu_wrr_32_ <= config.loc_set.point1.wrr_32 : {:.5f} {:.5f} ({})\".format(cu_wrr_32_[c_i], config.loc_set.point1.wrr_32, mr_res[c_i]))\n","      else:\n","        mr_res *= co_wrr_32_ <= config.loc_set.point1.wrr_32 #+ 0.1  # 0.1 0.05\n","        # mr_res *= (co_wrr_32_ >= config.loc_set.point1.wrr_32) # & (co_wrr_32_ <= 1)\n","        # mr_res *= co_wrr_32_ >= config.loc_set.point1.wrr_32 - 0.1\n","        if show_detail:\n","            sys_log.warning(\"co_wrr_32_ <= config.loc_set.point1.wrr_32 : {:.5f} {:.5f} ({})\".format(co_wrr_32_[c_i], config.loc_set.point1.wrr_32, mr_res[c_i]))\n","\n","    # ------ enough_space - Todo, future_data ------ #\n","    if config.loc_set.point1.co_es != \"None\":      \n","      itv, period1 = config.tr_set.p1_itv1, config.tr_set.p1_period1 \n","      b1_cu_es_ = res_df['b1_cu_es_{}{}'.format(itv, period1)].to_numpy()\n","      b1_co_es_ = res_df['b1_co_es_{}{}'.format(itv, period1)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= b1_co_es_ >= config.loc_set.point1.co_es\n","        mr_res *= b1_co_es_ <= config.loc_set.point1.co_es + 2\n","        if show_detail:\n","            sys_log.warning(\"b1_co_es_ >= config.loc_set.point1.co_es : {:.5f} {:.5f} ({})\".format(b1_co_es_[c_i], config.loc_set.point1.co_es, mr_res[c_i]))\n","      else:\n","        mr_res *= b1_cu_es_ >= config.loc_set.point1.cu_es\n","        mr_res *= b1_cu_es_ <= config.loc_set.point1.cu_es + 1\n","        if show_detail:\n","            sys_log.warning(\"b1_cu_es_ >= config.loc_set.point1.cu_es : {:.5f} {:.5f} ({})\".format(b1_cu_es_[c_i], config.loc_set.point1.cu_es, mr_res[c_i]))\n","\n","    # ------------ wick_ratio - Todo, future_data ------------ #\n","    # if config.loc_set.point1.short_wick_ratio != \"None\":\n","    #   b1_upper_wick_ratio_ = res_df['b1_upper_wick_ratio_{}'.format(config.loc_set.point1.wick_itv)].to_numpy()\n","    #   b1_lower_wick_ratio_ = res_df['b1_lower_wick_ratio_{}'.format(config.loc_set.point1.wick_itv)].to_numpy()      \n","    #   if ep_loc_side == OrderSide.SELL:\n","    #       # mr_res *= b1_upper_wick_ratio_ >= config.loc_set.point1.short_wick_ratio\n","    #       mr_res *= b1_lower_wick_ratio_ >= config.loc_set.point1.short_wick_ratio\n","    #       if show_detail:\n","    #           sys_log.warning(\"b1_lower_wick_ratio_ >= config.loc_set.point1.short_wick_ratio : {:.5f} {:.5f} ({})\".format(b1_lower_wick_ratio_[c_i], config.loc_set.point1.short_wick_ratio, mr_res[c_i]))\n","    #   else:\n","    #       # mr_res *= b1_lower_wick_ratio_ >= config.loc_set.point1.long_wick_ratio\n","    #       mr_res *= b1_upper_wick_ratio_ >= config.loc_set.point1.long_wick_ratio\n","    #       if show_detail:\n","    #           sys_log.warning(\"b1_upper_wick_ratio_ >= config.loc_set.point1.long_wick_ratio : {:.5f} {:.5f} ({})\".format(b1_upper_wick_ratio_[c_i], config.loc_set.point1.long_wick_ratio, mr_res[c_i]))\n","\n","    # ------ candle_range_ratio - Todo, future_data ------ #\n","    # if config.loc_set.point1.crr != \"None\":   \n","    #   tf_entry = to_itvnum(config.loc_set.point1.tf_entry)\n","    #   b1_crr_ = res_df['crr_{}'.format(config.loc_set.point1.tf_entry)].shift(tf_entry).to_numpy()\n","    #   mr_res *= b1_crr_ >= config.loc_set.point1.crr\n","    #   if show_detail:\n","    #       sys_log.warning(\"b1_crr_ >= config.loc_set.point1.crr : {:.5f} {:.5f} ({})\".format(b1_crr_[c_i], config.loc_set.point1.crr, mr_res[c_i]))\n","    \n","    # ------ dc_over_body_ratio ------ #\n","    if config.loc_set.point1.dbr != \"None\":\n","      b1_lwdbr = res_df['b1_lwdbr'].to_numpy()\n","      b1_updbr = res_df['b1_updbr'].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:        \n","        mr_res *= b1_lwdbr >= config.loc_set.point1.dbr\n","        if show_detail:\n","            sys_log.warning(\n","                \"b1_lwdbr >= config.loc_set.point1.dbr : {:.5f} {:.5f} ({})\".format(b1_lwdbr[c_i], config.loc_set.point1.dbr, mr_res[c_i]))\n","      else:\n","        mr_res *= b1_updbr >= config.loc_set.point1.dbr\n","        if show_detail:\n","            sys_log.warning(\n","                \"b1_updbr >= config.loc_set.point1.dbr : {:.5f} {:.5f} ({})\".format(b1_updbr[c_i], config.loc_set.point1.dbr, mr_res[c_i]))\n","            \n","    if config.loc_set.point1.dbr2 != \"None\":\n","      b1_lwdbr = res_df['b1_lwdbr'].to_numpy()\n","      b1_updbr = res_df['b1_updbr'].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:    \n","        mr_res *= b1_updbr >= config.loc_set.point1.dbr2\n","        if show_detail:\n","            sys_log.warning(\n","                \"b1_updbr >= config.loc_set.point1.dbr2 : {:.5f} {:.5f} ({})\".format(b1_updbr[c_i], config.loc_set.point1.dbr2, mr_res[c_i]))\n","      else:\n","        mr_res *= b1_lwdbr >= config.loc_set.point1.dbr2\n","        if show_detail:\n","            sys_log.warning(\n","                \"b1_lwdbr >= config.loc_set.point1.dbr2 : {:.5f} {:.5f} ({})\".format(b1_lwdbr[c_i], config.loc_set.point1.dbr2, mr_res[c_i]))\n","\n","    # ------ wick_body_ratio ------ #\n","    if config.loc_set.point1.wbr != \"None\":\n","        wave_body_ratio = res_df['wave_body_ratio'].to_numpy()\n","        mr_res *= wave_body_ratio >= config.loc_set.point1.wbr\n","        if show_detail:\n","            sys_log.warning(\n","                \"wave_body_ratio >= config.loc_set.point1.wbr : {:.5f} {:.5f} ({})\".format(wave_body_ratio[c_i], config.loc_set.point1.wbr, mr_res[c_i]))\n","            \n","    # ------ body_rel_ratio ------ #\n","    if config.loc_set.point1.brr != \"None\":\n","        body_rel_ratio_ = res_df['body_rel_ratio_{}'.format(config.loc_set.point1.tf_entry)].to_numpy()\n","        mr_res *= body_rel_ratio_ <= config.loc_set.point1.brr\n","        if show_detail:\n","            sys_log.warning(\n","                \"body_rel_ratio_ <= config.loc_set.point1.brr : {:.5f} {:.5f} ({})\".format(body_rel_ratio_[c_i], config.loc_set.point1.brr, mr_res[c_i]))\n","\n","    # ------ pumping_ratio ------ #\n","    if config.loc_set.point1.ppr != \"None\":\n","      if ep_loc_side == OrderSide.SELL:\n","        short_ppr_ = res_df['short_ppr_{}'.format(selection_id)].to_numpy()\n","        mr_res *= short_ppr_ >= config.loc_set.point1.ppr\n","        if show_detail:\n","            sys_log.warning(\"short_ppr_ >= config.loc_set.point1.ppr : {:.5f} {:.5f} ({})\".format(short_ppr_[c_i], config.loc_set.point1.ppr, mr_res[c_i]))\n","      else:\n","        long_ppr_ = res_df['long_ppr_{}'.format(selection_id)].to_numpy()\n","        mr_res *= long_ppr_ >= config.loc_set.point1.ppr\n","        if show_detail:\n","            sys_log.warning(\"long_ppr_ >= config.loc_set.point1.ppr : {:.5f} {:.5f} ({})\".format(long_ppr_[c_i], config.loc_set.point1.ppr, mr_res[c_i]))\n"," \n","    # ============ rtc_zone  ============ #  --> Todo, 사용 안하고 싶은 wave_dur., 추후 zone 으로 옮길 것\n","    # ------ dtk ------ #\n","    if config.loc_set.zone1.dt_k != \"None\":\n","        # ------ dc_v2 ------ #\n","        dc_lower_v2 = res_df['dc_lower_v2'.format(selection_id)].to_numpy()\n","        short_dtk_1_ = res_df['short_dtk_1_{}'.format(selection_id)].to_numpy() - \\\n","                       res_df['short_dtk_gap_{}'.format(selection_id)].to_numpy() * config.loc_set.zone1.dt_k\n","        dc_upper_v2 = res_df['dc_upper_v2'.format(selection_id)].to_numpy()\n","        long_dtk_1_ = res_df['long_dtk_1_{}'.format(selection_id)].to_numpy() + \\\n","                      res_df['long_dtk_gap_{}'.format(selection_id)].to_numpy() * config.loc_set.zone1.dt_k\n","        if ep_loc_side == OrderSide.SELL:\n","            mr_res *= dc_lower_v2 >= short_dtk_1_\n","            if show_detail:\n","                sys_log.warning(\n","                    \"dc_lower_v2 >= short_dtk_1_ : {:.5f} {:.5f} ({})\".format(dc_lower_v2[c_i], short_dtk_1_[c_i], mr_res[c_i]))\n","        else:\n","            mr_res *= dc_upper_v2 <= long_dtk_1_\n","            if show_detail:\n","                sys_log.warning(\n","                    \"dc_upper_v2 <= long_dtk_1_ : {:.5f} {:.5f} ({})\".format(dc_upper_v2[c_i], long_dtk_1_[c_i], mr_res[c_i]))\n","                \n","    # ============ zone ============ #\n","    # ------ config var. 이 등록되지 않은 dur. 은 selection_id 으로 조건문을 나눔 (lvrg_set 과 동일) ------ #\n","    if config.loc_set.zone1.use_zone:\n","\n","      # ------------ 추세선 리스트 on_price ------------ #\n","      wave_itv1 = config.tr_set.wave_itv1\n","      wave_period1 = config.tr_set.wave_period1      \n","      \n","      wave_high_fill1_ = res_df['wave_high_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      wave_low_fill1_ = res_df['wave_low_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","      short_tp_0_ = res_df['short_tp_0_{}'.format(selection_id)].to_numpy()\n","      long_tp_0_ = res_df['long_tp_0_{}'.format(selection_id)].to_numpy()\n","\n","        # ------ ma ------ #\n","      # ma_period = 60\n","      # # res_df = ma(res_df, ma_period)       \n","      # ma_ = res_df['ma_T{}'.format(ma_period)].to_numpy()\n","\n","      # if ep_loc_side == OrderSide.SELL:\n","      #   mr_res *= wave_high_fill1_ < ma_\n","      #   if show_detail:\n","      #     sys_log.warning(\"wave_high_fill1_ < ma_ : {:.5f} {:.5f} ({})\".format(wave_high_fill1_[c_i], ma_[c_i], mr_res[c_i]))\n","      # else:\n","      #   mr_res *= wave_low_fill1_ > ma_\n","      #   if show_detail:\n","      #     sys_log.warning(\"wave_low_fill1_ > ma_ : {:.5f} {:.5f} ({})\".format(wave_low_fill1_[c_i], ma_[c_i], mr_res[c_i]))\n","        \n","        # ------ dc_base ------ #      \n","      # dc_base_ = res_df['dc_base_T30'].to_numpy()\n","      dc_base_T20 = res_df['dc_base_T20'].to_numpy()\n","      dc_base_5T20 = res_df['dc_base_5T20'].to_numpy()\n","      dc_base_15T20 = res_df['dc_base_15T20'].to_numpy()\n","      dc_base_H20 = res_df['dc_base_H20'].to_numpy()\n","      dc_base_4H20 = res_df['dc_base_4H20'].to_numpy()\n","      \n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= short_tp_0_ < dc_base_H20\n","        if show_detail:\n","          sys_log.warning(\"short_tp_0_ < dc_base_H20 : {:.5f} {:.5f} ({})\".format(short_tp_0_[c_i], dc_base_H20[c_i], mr_res[c_i]))\n","      else:\n","        mr_res *= long_tp_0_ > dc_base_H20\n","        if show_detail:\n","          sys_log.warning(\"long_tp_0_ > dc_base_H20 : {:.5f} {:.5f} ({})\".format(long_tp_0_[c_i], dc_base_H20[c_i], mr_res[c_i]))   \n","\n","\n","      # if ep_loc_side == OrderSide.SELL:\n","      #   mr_res *= wave_high_fill1_ < dc_base_5T20\n","      #   if show_detail:\n","      #     sys_log.warning(\"wave_high_fill1_ < dc_base_5T20 : {:.5f} {:.5f} ({})\".format(wave_high_fill1_[c_i], dc_base_5T20[c_i], mr_res[c_i]))\n","      # else:\n","      #   mr_res *= wave_low_fill1_ > dc_base_5T20\n","      #   if show_detail:\n","      #     sys_log.warning(\"wave_low_fill1_ > dc_base_5T20 : {:.5f} {:.5f} ({})\".format(wave_low_fill1_[c_i], dc_base_5T20[c_i], mr_res[c_i]))    \n","\n","\n","      # if ep_loc_side == OrderSide.SELL:\n","      #   mr_res *= dc_base_T20 < dc_base_5T20\n","      #   if show_detail:\n","      #     sys_log.warning(\"dc_base_T20 < dc_base_5T20 : {:.5f} {:.5f} ({})\".format(dc_base_T20[c_i], dc_base_5T20[c_i], mr_res[c_i]))\n","      # else:\n","      #   mr_res *= dc_base_T20 > dc_base_5T20\n","      #   if show_detail:\n","      #     sys_log.warning(\"dc_base_T20 > dc_base_5T20 : {:.5f} {:.5f} ({})\".format(dc_base_T20[c_i], dc_base_5T20[c_i], mr_res[c_i]))  \n","          \n","      # if ep_loc_side == OrderSide.SELL:\n","      #   mr_res *= dc_base_5T20 < dc_base_15T20\n","      #   if show_detail:\n","      #     sys_log.warning(\"dc_base_5T20 < dc_base_15T20 : {:.5f} {:.5f} ({})\".format(dc_base_5T20[c_i], dc_base_15T20[c_i], mr_res[c_i]))\n","      # else:\n","      #   mr_res *= dc_base_5T20 > dc_base_15T20\n","      #   if show_detail: \n","      #     sys_log.warning(\"dc_base_5T20 > dc_base_15T20 : {:.5f} {:.5f} ({})\".format(dc_base_5T20[c_i], dc_base_15T20[c_i], mr_res[c_i]))  \n","          \n","      # if ep_loc_side == OrderSide.SELL:\n","      #   mr_res *= dc_base_5T20 < dc_base_15T20\n","      #   if show_detail:\n","      #     sys_log.warning(\"dc_base_15T20 < dc_base_H20 : {:.5f} {:.5f} ({})\".format(dc_base_15T20[c_i], dc_base_H20[c_i], mr_res[c_i]))\n","      # else:\n","      #   mr_res *= dc_base_5T20 > dc_base_15T20\n","      #   if show_detail: \n","      #     sys_log.warning(\"dc_base_15T20 > dc_base_H20 : {:.5f} {:.5f} ({})\".format(dc_base_15T20[c_i], dc_base_H20[c_i], mr_res[c_i]))  \n","      \n","      # ------------ out_price ------------ #\n","        # ------ macd ------ #\n","      # # macd_ = res_df['macd_T535'].to_numpy()\n","      # macd_ = res_df['macd_hist_T53515'].to_numpy()\n","\n","      # if ep_loc_side == OrderSide.SELL:\n","      #   mr_res *= macd_ < 0\n","      #   if show_detail:\n","      #     sys_log.warning(\"macd_ < 0 : {:.5f} {:.5f} ({})\".format(macd_[c_i], 0, mr_res[c_i]))\n","      # else:\n","      #   mr_res *= macd_ > 0\n","      #   if show_detail:\n","      #     sys_log.warning(\"macd_ > 0 : {:.5f} {:.5f} ({})\".format(macd_[c_i], 0, mr_res[c_i]))\n","\n","      # ------ bb_base uptrend ------ #\n","      # bb_base_T100 = res_df['bb_base_T100'].to_numpy()\n","      # b1_bb_base_T100 = res_df['bb_base_T100'].shift(1).to_numpy()\n","\n","      # lb_period = config.loc_set.zone1.bb_trend_period\n","      # bb_base_downtrend = pd.Series(b1_bb_base_T100 < bb_base_T100).rolling(lb_period).sum().to_numpy() == 0\n","      # bb_base_uptrend = pd.Series(b1_bb_base_T100 > bb_base_T100).rolling(lb_period).sum().to_numpy() == 0\n","\n","      # if ep_loc_side == OrderSide.SELL:\n","      #   mr_res *= bb_base_downtrend\n","      #   if show_detail:\n","      #       sys_log.warning(\"bb_base_downtrend : {:.5f} ({})\".format(bb_base_downtrend[c_i], mr_res[c_i]))       \n","      # else:\n","      #   mr_res *= bb_base_uptrend\n","      #   if show_detail:\n","      #       sys_log.warning(\"bb_base_uptrend : {:.5f} ({})\".format(bb_base_uptrend[c_i], mr_res[c_i]))    \n","\n","    # -------------- zoned tr_set - post_work -------------- #\n","    if config.tr_set.c_ep_gap != \"None\" or config.tr_set.t_out_gap != \"None\":\n","        #       by zone_dtk       #\n","        #         c_zone        #\n","        zone_dc_upper_v2_ = res_df['zone_dc_upper_v2'.format(selection_id)].to_numpy()\n","        long_dtk_plot_1 = res_df['long_dtk_plot_1'].to_numpy() + res_df['long_dtk_plot_gap'].to_numpy() * config.loc_set.zone1.zone_dt_k\n","        zone_dc_lower_v2_ = res_df['zone_dc_lower_v2'.format(selection_id)].to_numpy()\n","        short_dtk_plot_1 = res_df['short_dtk_plot_1'].to_numpy() - res_df['short_dtk_plot_gap'].to_numpy() * config.loc_set.zone1.zone_dt_k\n","        if ep_loc_side == OrderSide.SELL:\n","            zone_res = zone_dc_upper_v2_ > long_dtk_plot_1  # mr_res 와는 별개임\n","            pos = 'short'\n","        else:\n","            zone_res = zone_dc_lower_v2_ < short_dtk_plot_1\n","            pos = 'long'\n","\n","        # static 여부에 따른 vectorized adj. - dynamic 은 vectorize 불가\n","        if config.ep_set.static_ep and config.tr_set.c_ep_gap != \"None\":\n","            res_df['{}_ep_{}'.format(pos, selection_id)][zone_res] = res_df['{}_ep2_{}'.format(pos, selection_id)][zone_res]\n","        if config.out_set.static_out and config.tr_set.t_out_gap != \"None\":\n","            res_df['{}_out_{}'.format(pos, selection_id)][~zone_res] = res_df['{}_out2_{}'.format(pos, selection_id)][\n","                ~zone_res]  # t_zone 에 대한 out2 setting\n","        zone_arr = np.where(zone_res == 1, 'c', 't')\n","\n","    return mr_res, zone_arr  # mr_res 의 True idx 가 open signal\n","\n","\n","def ep_loc_p2_v3(res_df, config, np_timeidx, show_detail=True, ep_loc_side=OrderSide.SELL):\n","    # ------- param init ------- #\n","    selection_id = config.selection_id\n","    c_i = config.trader_set.complete_index\n","    len_df = len(res_df)\n","    mr_res = np.ones(len_df)\n","    zone_arr = np.full(len_df, 'n')\n","\n","    # ------ process 한번에 처리해서 param_check 만 ver. 별로 하면 될 것 ------ #\n","    #     => public_indi() 가 될 것\n","    #     1. 사용한 param 정보와 matching 된 data 병렬로 나열 logging 될 것\n","    # tp_fee, out_fee = calc_tp_out_fee_v2(config)\n","\n","    # ============ point1 ratios ============ #\n","    # ------ wave_range_ratio ------ #\n","    # if config.loc_set.point2.cu_wrr_21 != \"None\":   # for excessive range rejection         \n","    #   wave_itv1 = config.tr_set.wave_itv1\n","    #   wave_period1 = config.tr_set.wave_period1\n","    #   co_wrr_21_ = res_df['co_wrr_21_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    #   cu_wrr_21_ = res_df['cu_wrr_21_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","    #   if ep_loc_side == OrderSide.SELL:\n","    #     mr_res *= cu_wrr_21_ <= config.loc_set.point2.cu_wrr_21\n","    #     mr_res *= cu_wrr_21_ >= config.loc_set.point2.cu_wrr_21 - 0.2\n","    #     if show_detail:\n","    #         sys_log.warning(\"cu_wrr_21_ <= config.loc_set.point2.cu_wrr_21 : {:.5f} {:.5f} ({})\".format(cu_wrr_21_[c_i], config.loc_set.point2.cu_wrr_21, mr_res[c_i]))\n","    #   else:\n","    #     mr_res *= co_wrr_21_ <= config.loc_set.point2.co_wrr_21\n","    #     mr_res *= co_wrr_21_ >= config.loc_set.point2.co_wrr_21 - 0.2\n","    #     if show_detail:\n","    #         sys_log.warning(\"co_wrr_21_ <= config.loc_set.point2.co_wrr_21 : {:.5f} {:.5f} ({})\".format(co_wrr_21_[c_i], config.loc_set.point2.co_wrr_21, mr_res[c_i]))\n","\n","    if config.loc_set.point2.wrr_32 != \"None\":            \n","      wave_itv2 = config.tr_set.wave_itv2\n","      wave_period2 = config.tr_set.wave_period2\n","      co_wrr_32_ = res_df['co_wrr_32_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","      cu_wrr_32_ = res_df['cu_wrr_32_{}{}'.format(wave_itv2, wave_period2)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= cu_wrr_32_ <= config.loc_set.point2.wrr_32  #  + 0.1  # 0.1 0.05\n","        # mr_res *= cu_wrr_32_ >= config.loc_set.point2.wrr_32\n","        if show_detail:\n","            sys_log.warning(\"cu_wrr_32_ <= config.loc_set.point2.wrr_32 : {:.5f} {:.5f} ({})\".format(cu_wrr_32_[c_i], config.loc_set.point2.wrr_32, mr_res[c_i]))\n","      else:\n","        mr_res *= co_wrr_32_ <= config.loc_set.point2.wrr_32  #  + 0.1  # 0.1 0.05\n","        # mr_res *= co_wrr_32_ >= config.loc_set.point2.wrr_32\n","        if show_detail:\n","            sys_log.warning(\"co_wrr_32_ <= config.loc_set.point2.wrr_32 : {:.5f} {:.5f} ({})\".format(co_wrr_32_[c_i], config.loc_set.point2.wrr_32, mr_res[c_i]))\n","\n","    if config.loc_set.point2.csd_period != \"None\":\n","      wave_itv2 = config.tr_set.wave_itv2\n","      csd_period = config.loc_set.point2.csd_period\n","      \n","      res_df = dc_line_v4(res_df, res_df, dc_period=csd_period)\n","      dc_upper_ = res_df['dc_upper_{}{}'.format(wave_itv2, csd_period)].to_numpy()    \n","      dc_lower_ = res_df['dc_lower_{}{}'.format(wave_itv2, csd_period)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        csdbox = res_df['short_tp_1_{}'.format(selection_id)].to_numpy() + res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() * config.loc_set.point2.csdbox_range\n","        mr_res *= dc_upper_ <= csdbox\n","        if show_detail:\n","            sys_log.warning(\"dc_upper_ <= csdbox : {:.5f} {:.5f} ({})\".format(dc_upper_[c_i], csdbox[c_i], mr_res[c_i]))\n","      else:\n","        csdbox = res_df['long_tp_1_{}'.format(selection_id)].to_numpy() - res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() * config.loc_set.point2.csdbox_range\n","        mr_res *= dc_lower_ >= csdbox\n","        if show_detail:\n","            sys_log.warning(\"dc_lower_ >= csdbox : {:.5f} {:.5f} ({})\".format(dc_lower_[c_i], csdbox[c_i], mr_res[c_i]))\n","\n","    # ============ zone ============ #    \n","    # ------------ 추세선 리스트 on_price ------------ #\n","    if config.loc_set.zone2.use_zone:\n","      wave_itv1 = config.tr_set.wave_itv1\n","      wave_period1 = config.tr_set.wave_period1      \n","      \n","      wave_high_fill1_ = res_df['wave_high_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      wave_low_fill1_ = res_df['wave_low_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","      dc_base_T20 = res_df['dc_base_T20'].to_numpy()\n","      dc_base_5T20 = res_df['dc_base_5T20'].to_numpy()\n","      dc_base_15T20 = res_df['dc_base_15T20'].to_numpy()\n","      dc_base_H20 = res_df['dc_base_H20'].to_numpy()\n","      dc_base_4H20 = res_df['dc_base_4H20'].to_numpy()\n","\n","        # ------ ma ------ #\n","      # ma_period = 60\n","      # # res_df = ma(res_df, ma_period)       \n","      # ma_ = res_df['ma_T{}'.format(ma_period)].to_numpy()\n","\n","      # if ep_loc_side == OrderSide.SELL:\n","      #   mr_res *= wave_high_fill1_ < ma_\n","      #   if show_detail:\n","      #     sys_log.warning(\"wave_high_fill1_ < ma_ : {:.5f} {:.5f} ({})\".format(wave_high_fill1_[c_i], ma_[c_i], mr_res[c_i]))\n","      # else:\n","      #   mr_res *= wave_low_fill1_ > ma_\n","      #   if show_detail:\n","      #     sys_log.warning(\"wave_low_fill1_ > ma_ : {:.5f} {:.5f} ({})\".format(wave_low_fill1_[c_i], ma_[c_i], mr_res[c_i]))\n","        \n","        # ------ out0 & dcbase ------ #      \n","      if ep_loc_side == OrderSide.SELL:\n","        # mr_res *= wave_high_fill1_ < dc_base_5T20\n","        mr_res *= wave_high_fill1_ < dc_base_H20\n","        if show_detail:\n","          # sys_log.warning(\"wave_high_fill1_ < dc_base_5T20 : {:.5f} {:.5f} ({})\".format(wave_high_fill1_[c_i], dc_base_5T20[c_i], mr_res[c_i]))\n","          sys_log.warning(\"wave_high_fill1_ < dc_base_H20 : {:.5f} {:.5f} ({})\".format(wave_high_fill1_[c_i], dc_base_H20[c_i], mr_res[c_i]))\n","      else:\n","        # mr_res *= wave_low_fill1_ > dc_base_5T20\n","        mr_res *= wave_low_fill1_ > dc_base_H20\n","        if show_detail:\n","          # sys_log.warning(\"wave_low_fill1_ > dc_base_5T20 : {:.5f} {:.5f} ({})\".format(wave_low_fill1_[c_i], dc_base_5T20[c_i], mr_res[c_i]))\n","          sys_log.warning(\"wave_low_fill1_ > dc_base_H20 : {:.5f} {:.5f} ({})\".format(wave_low_fill1_[c_i], dc_base_H20[c_i], mr_res[c_i]))\n","\n","        # ------ dcbase ------ #\n","      if ep_loc_side == OrderSide.SELL:\n","        # mr_res *= dc_base_T20 < dc_base_5T20\n","      #   mr_res *= dc_base_5T20 < dc_base_15T20\n","        mr_res *= dc_base_15T20 < dc_base_H20\n","        if show_detail:\n","      #     sys_log.warning(\"dc_base_T20 < dc_base_5T20 : {:.5f} {:.5f} ({})\".format(dc_base_T20[c_i], dc_base_5T20[c_i], mr_res[c_i]))\n","      #     sys_log.warning(\"dc_base_5T20 < dc_base_15T20 : {:.5f} {:.5f} ({})\".format(dc_base_5T20[c_i], dc_base_15T20[c_i], mr_res[c_i]))\n","          sys_log.warning(\"dc_base_5T20 < dc_base_H20 : {:.5f} {:.5f} ({})\".format(dc_base_5T20[c_i], dc_base_H20[c_i], mr_res[c_i]))\n","      else:\n","      #   mr_res *= dc_base_T20 > dc_base_5T20\n","      #   mr_res *= dc_base_5T20 > dc_base_15T20\n","        mr_res *= dc_base_15T20 > dc_base_H20\n","        if show_detail:\n","      #     sys_log.warning(\"dc_base_T20 > dc_base_5T20 : {:.5f} {:.5f} ({})\".format(dc_base_T20[c_i], dc_base_5T20[c_i], mr_res[c_i]))  \n","      #     sys_log.warning(\"dc_base_5T20 > dc_base_15T20 : {:.5f} {:.5f} ({})\".format(dc_base_5T20[c_i], dc_base_15T20[c_i], mr_res[c_i]))\n","          sys_log.warning(\"dc_base_5T20 > dc_base_H20 : {:.5f} {:.5f} ({})\".format(dc_base_5T20[c_i], dc_base_H20[c_i], mr_res[c_i]))\n","      \n","\n","\n","    return mr_res, zone_arr  # mr_res 의 True idx 가 open signal"]},{"cell_type":"markdown","metadata":{"id":"EQ63Jwpvr7qA"},"source":["#### legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"csZwxsP5r_Pz"},"outputs":[],"source":["      \n","    # ------ hl_loc_pct ------ #\n","    if config.loc_set.zone.hl_loc_pct != \"None\":      \n","      wave_high_loc_pct_ = res_df['wave_high_loc_pct_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","      wave_low_loc_pct_ = res_df['wave_low_loc_pct_{}{}'.format(wave_itv1, wave_period1)].to_numpy()\n","\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= wave_high_loc_pct_ >= config.loc_set.zone.hl_loc_pct\n","        mr_res *= wave_high_loc_pct_ <= config.loc_set.zone.hl_loc_pct + 0.5\n","        if show_detail:\n","            sys_log.warning(\"wave_high_loc_pct_ >= config.loc_set.zone.hl_loc_pct : {:.5f} {:.5f} ({})\".format(wave_high_loc_pct_[c_i], config.loc_set.zone.hl_loc_pct, mr_res[c_i]))\n","      else:\n","        mr_res *= wave_low_loc_pct_ >= config.loc_set.zone.hl_loc_pct\n","        mr_res *= wave_low_loc_pct_ <= config.loc_set.zone.hl_loc_pct + 0.5\n","        if show_detail:\n","            sys_log.warning(\"wave_low_loc_pct_ >= config.loc_set.zone.hl_loc_pct : {:.5f} {:.5f} ({})\".format(wave_low_loc_pct_[c_i], config.loc_set.zone.hl_loc_pct, mr_res[c_i]))\n","\n","            \n","        # ------------------ wave_biaser (sr_confirmer) ------------------ #\n","        if selection_id in ['3_9']:     \n","          itv, period1, period2 = config.tr_set.p1_itv1, config.tr_set.p1_period1, config.tr_set.p1_period2          \n","\n","          if ep_loc_side == OrderSide.SELL:\n","            short_wave_high_ = res_df['short_wave_high_{}{}{}'.format(itv, period1, period2)]\n","            bb_lower_5T_amax = get_line(res_df['short_wave_high_idx_{}{}{}'.format(itv, period1, period2)].to_numpy(), res_df['bb_lower_5T'].to_numpy())\n","            mr_res *= short_wave_high_ <= bb_lower_5T_amax\n","            if show_detail:\n","                sys_log.warning(\"short_wave_high_ <= bb_lower_5T_amax : {:.5f} {:.5f} ({})\".format(short_wave_high_[c_i], bb_lower_5T_amax[c_i], mr_res[c_i]))\n","          else:\n","            long_wave_low_ = res_df['long_wave_low_{}{}{}'.format(itv, period1, period2)]\n","            bb_upper_5T_amax = get_line(res_df['long_wave_low_idx_{}{}{}'.format(itv, period1, period2)].to_numpy(), res_df['bb_upper_5T'].to_numpy())\n","            mr_res *= long_wave_low_ >= bb_upper_5T_amax\n","            if show_detail:\n","                sys_log.warning(\"long_wave_low_ >= bb_upper_5T_amax : {:.5f} {:.5f} ({})\".format(long_wave_low_[c_i], bb_upper_5T_amax[c_i], mr_res[c_i]))\n","\n","\n","        if selection_id in ['4_3', '3_5', '3_51']:\n","            dc_base_T20 = res_df['dc_base_T20'].to_numpy()\n","            dc_base_3T20 = res_df['dc_base_3T20'].to_numpy()\n","            # b1_dc_base_3T20 = res_df['dc_base_3T20'].shift(3).to_numpy()\n","            # dc_base_5T = res_df['dc_base_5T'].to_numpy()\n","            # dc_base_15T = res_df['dc_base_15T'].to_numpy()\n","            # dc_base_30T = res_df['dc_base_30T'].to_numpy()\n","            dc_base_H20 = res_df['dc_base_H20'].to_numpy()\n","            # dc_base_4H = res_df['dc_base_4H'].to_numpy()\n","            # dc_base_D = res_df['dc_base_D'].to_numpy()\n","\n","            itv, period1, period2 = config.tr_set.p1_itv1, config.tr_set.p1_period1, config.tr_set.p1_period2\n","            if ep_loc_side == OrderSide.SELL:\n","                # ------ short_base_ <= dc_base_3T20 ------ #\n","                short_base_ = res_df['short_base_{}{}{}'.format(itv, period1, period2)].to_numpy()\n","                mr_res *= short_base_ <= dc_base_3T20\n","                if show_detail:\n","                    sys_log.warning(\"short_base_ <= dc_base_3T20 : {:.5f} {:.5f} ({})\".format(short_base_[c_i], dc_base_3T20[c_i], mr_res[c_i]))\n","\n","                # mr_res *= short_base_ <= dc_base_T20\n","                # if show_detail:\n","                #     sys_log.warning(\"short_base_ <= dc_base_T20 : {:.5f} {:.5f} ({})\".format(short_base_[c_i], dc_base_T20[c_i], mr_res[c_i]))\n","\n","                # ------ reject csd ------ #\n","                # dc_upper_ = res_df['dc_upper_{}{}'.format(itv, period1)].to_numpy()\n","                # mr_res *= dc_upper_ <= dc_base_3T\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_upper_ <= dc_base_3T20 : {:.5f} {:.5f} ({})\".format(dc_upper_[c_i], dc_base_3T[c_i], mr_res[c_i]))\n","\n","                # Todo, 부호 조심\n","                # dc_upper2_ = res_df['dc_upper_{}{}'.format(itv, period2)].to_numpy()\n","                # mr_res *= dc_upper2_ >= dc_base_H\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_upper2_ >= dc_base_H20 : {:.5f} {:.5f} ({})\".format(dc_upper2_[c_i], dc_base_H[c_i], mr_res[c_i]))  \n","\n","                # long 과 동일한 dur.\n","                dc_lower2_ = res_df['dc_lower_{}{}'.format(itv, period2)].to_numpy()\n","                mr_res *= dc_lower2_ >= dc_base_H20\n","                if show_detail:\n","                    sys_log.warning(\"dc_lower2_ >= dc_base_H20 : {:.5f} {:.5f} ({})\".format(dc_lower2_[c_i], dc_base_H20[c_i], mr_res[c_i]))  \n","\n","                # ------ consecutive base ascender ------ #\n","                # ------ 1. roll_min ------ #\n","                dc_base_3T20_rollmin = res_df['dc_base_3T20'].rolling(config.loc_set.zone.base_roll_period).min().to_numpy()\n","                mr_res *= dc_base_3T20_rollmin == dc_base_3T20\n","                if show_detail:\n","                    sys_log.warning(\n","                        \"dc_base_3T20_rollmin == dc_base_3T2020 : {:.5f} {:.5f} ({})\".format(dc_base_3T20_rollmin[c_i], dc_base_3T20[c_i], mr_res[c_i]))\n","            else:\n","                # ------ long_base >= dc_base_3T20 ------ #\n","                long_base_ = res_df['long_base_{}{}{}'.format(itv, period1, period2)].to_numpy()\n","                mr_res *= long_base_ >= dc_base_3T20\n","                if show_detail:\n","                    sys_log.warning(\"long_base_ >= dc_base_3T20 : {:.5f} {:.5f} ({})\".format(long_base_[c_i], dc_base_3T20[c_i], mr_res[c_i]))\n","\n","                # mr_res *= long_base_ >= dc_base_T20\n","                # if show_detail:\n","                #     sys_log.warning(\"long_base_ >= dc_base_T20 : {:.5f} {:.5f} ({})\".format(long_base_[c_i], dc_base_T20[c_i], mr_res[c_i]))\n","\n","                # ------ reject csd ------ #\n","                # dc_lower_ = res_df['dc_lower_{}{}'.format(itv, period1)].to_numpy()\n","                # mr_res *= dc_lower_ >= dc_base_3T\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_lower_ >= dc_base_3T20 : {:.5f} {:.5f} ({})\".format(dc_lower_[c_i], dc_base_3T[c_i], mr_res[c_i]))\n","\n","                dc_lower2_ = res_df['dc_lower_{}{}'.format(itv, period2)].to_numpy()\n","                mr_res *= dc_lower2_ >= dc_base_H20\n","                if show_detail:\n","                    sys_log.warning(\"dc_lower2_ >= dc_base_H20 : {:.5f} {:.5f} ({})\".format(dc_lower2_[c_i], dc_base_H20[c_i], mr_res[c_i]))\n","\n","                # bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","                # mr_res *= dc_lower2_ >= bb_lower_5T\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_lower2_ >= bb_lower_5T : {:.5f} {:.5f} ({})\".format(dc_lower2_[c_i], bb_lower_5T[c_i], mr_res[c_i]))\n","\n","                # ------ alignment ------ #\n","                # mr_res *= (dc_base_3T20 > dc_base_5T) & (dc_base_5T > dc_base_15T) & (dc_base_15T > dc_base_30T)\n","\n","                # ------ consecutive base ascender ------ #\n","                # ------ 1. roll_max ------ #\n","                dc_base_3T20_rollmax = res_df['dc_base_3T20'].rolling(config.loc_set.zone.base_roll_period).max().to_numpy()\n","                mr_res *= dc_base_3T20_rollmax == dc_base_3T20\n","                if show_detail:\n","                    sys_log.warning(\n","                        \"dc_base_3T20_rollmax == dc_base_3T2020 : {:.5f} {:.5f} ({})\".format(dc_base_3T20_rollmax[c_i], dc_base_3T20[c_i], mr_res[c_i]))\n","\n","                # ------ 2. roll_max_v2 - ascender  ------ #\n","                # dc_base_3T_ascend = (res_df['dc_base_3T'] >= res_df['dc_base_3T'].shift(3)).rolling(config.loc_set.zone.base_roll_period).sum().to_numpy()\n","                # # mr_res *= dc_base_3T_ascend == config.loc_set.zone.base_roll_period\n","                # mr_res *= dc_base_3T_ascend != config.loc_set.zone.base_roll_period\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_base_3T_ascend == config.loc_set.zone.base_roll_period : {:.5f} {:.5f} ({})\".format(dc_base_3T_ascend[c_i], config.loc_set.zone.base_roll_period, mr_res[c_i]))\n","\n","\n","    if config.loc_set.point.wrr != \"None\":            \n","      wave_itv = 'T'\n","      wave_period = config.tr_set.wave_period\n","      co_wrr_ = res_df['co_wrr_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","      cu_wrr_ = res_df['cu_wrr_{}{}'.format(wave_itv, wave_period)].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= co_wrr_ <= config.loc_set.point.wrr\n","        if show_detail:\n","            sys_log.warning(\"co_wrr_ <= config.loc_set.point.wrr : {:.5f} {:.5f} ({})\".format(co_wrr_[c_i], config.loc_set.point.wrr, mr_res[c_i]))\n","      else:\n","        mr_res *= cu_wrr_ <= config.loc_set.point.wrr\n","        if show_detail:\n","            sys_log.warning(\"cu_wrr_ <= config.loc_set.point.wrr : {:.5f} {:.5f} ({})\".format(cu_wrr_[c_i], config.loc_set.point.wrr, mr_res[c_i]))\n","            \n","      # if ep_loc_side == OrderSide.SELL:\n","      #   mr_res *= cu_es_ >= config.loc_set.point.cu_es\n","      #   mr_res *= cu_es_ <= config.loc_set.point.cu_es + 2\n","      #   if show_detail:\n","      #       sys_log.warning(\"cu_es_ >= config.loc_set.point.cu_es : {:.5f} {:.5f} ({})\".format(cu_es_[c_i], config.loc_set.point.cu_es, mr_res[c_i]))\n","      # else:\n","      #   mr_res *= co_es_ >= config.loc_set.point.co_es\n","      #   mr_res *= co_es_ <= config.loc_set.point.co_es + 1\n","      #   if show_detail:\n","      #       sys_log.warning(\"co_es_ >= config.loc_set.point.co_es : {:.5f} {:.5f} ({})\".format(co_es_[c_i], config.loc_set.point.co_es, mr_res[c_i]))\n","\n","\n","      if ep_loc_side == OrderSide.SELL:\n","          mr_res *= lower_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          # mr_res *= upper_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          if show_detail:\n","              sys_log.warning(\"upper_wick_ratio_ >= config.loc_set.point.wick_ratio : {:.5f} {:.5f} ({})\".format(upper_wick_ratio_[c_i], config.loc_set.point.wick_ratio, mr_res[c_i]))\n","      else:\n","          mr_res *= upper_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          mr_res *= upper_wick_ratio_ <= config.loc_set.point.wick_ratio + 0.1\n","          # mr_res *= lower_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          if show_detail:\n","              sys_log.warning(\"lower_wick_ratio_ >= config.loc_set.point.wick_ratio : {:.5f} {:.5f} ({})\".format(lower_wick_ratio_[c_i], config.loc_set.point.wick_ratio, mr_res[c_i]))\n","              \n","      crr_ = res_df['crr_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","      mr_res *= crr_ >= config.loc_set.point.crr\n","     \n","      if show_detail:\n","          sys_log.warning(\"crr_ >= config.loc_set.point.crr : {:.5f} {:.5f} ({})\".format(crr_[c_i], config.loc_set.point.crr, mr_res[c_i]))\n","\n","      b1_upper_wick_ratio_ = res_df['upper_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].shift(itv_num).to_numpy()\n","      b1_lower_wick_ratio_ = res_df['lower_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].shift(itv_num).to_numpy()\n","\n","      if ep_loc_side == OrderSide.SELL:\n","          upper_wick_ratio_ = res_df['upper_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].to_numpy()\n","          mr_res *= upper_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          if show_detail:\n","              sys_log.warning(\"upper_wick_ratio_ >= config.loc_set.point.wick_ratio : {:.5f} {:.5f} ({})\".format(upper_wick_ratio_[c_i], config.loc_set.point.wick_ratio, mr_res[c_i]))\n","      else:\n","          lower_wick_ratio_ = res_df['lower_wick_ratio_{}'.format(config.loc_set.point.wick_itv)].to_numpy()\n","          mr_res *= lower_wick_ratio_ >= config.loc_set.point.wick_ratio\n","          if show_detail:\n","              sys_log.warning(\"lower_wick_ratio_ >= config.loc_set.point.wick_ratio : {:.5f} {:.5f} ({})\".format(lower_wick_ratio_[c_i], config.loc_set.point.wick_ratio, mr_res[c_i]))\n","\n","    if config.loc_set.point.cppr != \"None\":   \n","      tf_entry = to_itvnum(config.loc_set.point.tf_entry)\n","      b1_cppr_ = res_df['b1_cppr_{}'.format(config.loc_set.point.tf_entry)].to_numpy()  # check b1's cppr in ep_loc\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= b1_cppr_ >= config.loc_set.point.cppr\n","        if show_detail:\n","            sys_log.warning(\"b1_cppr_ >= config.loc_set.point.cppr : {:.5f} {:.5f} ({})\".format(b1_cppr_[c_i], config.loc_set.point.cppr, mr_res[c_i]))\n","      else:\n","        mr_res *= b1_cppr_ <= -config.loc_set.point.cppr\n","        if show_detail:\n","            sys_log.warning(\"b1_cppr_ <= -config.loc_set.point.cppr : {:.5f} {:.5f} ({})\".format(b1_cppr_[c_i], config.loc_set.point.cppr, mr_res[c_i]))\n","            \n","    # ------------ candle_score ------------ #\n","    wick_score_list = literal_eval(config.loc_set.point.wick_score_list)\n","    if len(wick_score_list) != 0:\n","        score_itv_list = literal_eval(config.loc_set.point.score_itv_list)\n","        # ------ candle_score_v0 (1m initial tick 기준임) ------ #  Todo - higher timeframe 경우 back_data 사용해야함\n","        for wick_score_, score_itv_ in zip(wick_score_list, score_itv_list):\n","            wick_score = res_df['wick_score_{}'.format(score_itv_)].to_numpy()\n","            if ep_loc_side == OrderSide.SELL:\n","                mr_res *= wick_score <= -wick_score_\n","                if show_detail:\n","                    sys_log.warning(\"wick_score <= -wick_score_ : {:.5f} {:.5f} ({})\".format(wick_score[c_i], -wick_score_, mr_res[c_i]))\n","            else:\n","                mr_res *= wick_score >= wick_score_\n","                if show_detail:\n","                    sys_log.warning(\"wick_score >= wick_score_ : {:.5f} {:.5f} ({})\".format(wick_score[c_i], wick_score_, mr_res[c_i]))\n","            \n","\n","        # ------------------ swing_middle ------------------ #\n","        # ------------ 1. envelope ------------ #\n","\n","        # ------ a. dc ------ #\n","        # ep_loc check 기준 idx 가 entry 기준이라는 걸 명심\n","        if selection_id in ['v3_2']:\n","            hc_itv = '15T'\n","            dc_itv = '15T'\n","            shift_num = [0, to_itvnum(hc_itv)]\n","            div_res = [1, 0]\n","            for itv_num, res in zip(shift_num, div_res):\n","                close_ = res_df['close_{}'.format(hc_itv)].shift(itv_num).to_numpy()  # close_bar timein 사용하는 경우, 특수로 shift(0) 사용가능\n","                if ep_loc_side == OrderSide.SELL:\n","                    dc_lower_ = res_df['dc_lower_%s' % dc_itv].shift(itv_num).to_numpy()\n","                    mr_res *= (close_ < dc_lower_) == res\n","                else:\n","                    dc_upper_ = res_df['dc_upper_%s' % dc_itv].shift(itv_num).to_numpy()\n","                    mr_res *= (close_ > dc_upper_) == res\n","\n","        # ------------ 2. degree ------------ #\n","        # ------ a. norm_body_ratio ------ #\n","        if config.loc_set.zone.abs_ratio != \"None\":\n","            itv = config.loc_set.point.tf_entry\n","            abs_ratio_ = res_df['abs_ratio_{}'.format(itv)].to_numpy()\n","            mr_res *= abs_ratio_ >= config.loc_set.zone.abs_ratio\n","            # mr_res *= abs_ratio_ <= config.loc_set.zone.abs_ratio\n","\n","    # ------------ 2. imbalance_ratio ------------ #\n","    if config.loc_set.zone.ir != \"None\":\n","        itv = config.loc_set.point.tf_entry\n","        itv_num = to_itvnum(itv)\n","        if ep_loc_side == OrderSide.SELL:\n","            short_ir_ = res_df['short_ir_{}'.format(itv)].to_numpy()\n","            # short_ir_ = res_df['short_ir_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","            # mr_res *= short_ir_ >= config.loc_set.zone.ir     # greater\n","            mr_res *= short_ir_ <= config.loc_set.zone.ir  # lesser\n","            if show_detail:\n","                sys_log.warning(\n","                    \"short_ir_ <= config.loc_set.zone.ir : {:.5f} {:.5f} ({})\".format(short_ir_[c_i], config.loc_set.zone.ir, mr_res[c_i]))\n","        else:\n","            long_ir_ = res_df['long_ir_{}'.format(itv)].to_numpy()\n","            # long_ir_ = res_df['long_ir_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","            # mr_res *= long_ir_ >= config.loc_set.zone.ir\n","            mr_res *= long_ir_ <= config.loc_set.zone.ir\n","            if show_detail:\n","                sys_log.warning(\n","                    \"long_ir_ <= config.loc_set.zone.ir : {:.5f} {:.5f} ({})\".format(long_ir_[c_i], config.loc_set.zone.ir, mr_res[c_i]))\n","                \n","        # if selection_id in ['3_6']:\n","        #   itv, period1, period2 = config.loc_set.point.p1_itv0, config.loc_set.point.p1_period1, config.loc_set.point.p1_period2          \n","\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     high_5T = res_df['high_5T'].to_numpy()  # Todo, tf_entry - 1 open 기준이라 future_data 사용 가능\n","        #     short_base_ = res_df['short_base_{}{}{}'.format(itv, period1, period2)]\n","        #     mr_res *= high_5T < short_base_\n","        #     if show_detail:\n","        #         sys_log.warning(\n","        #             \"high_5T < short_base_ : {:.5f} {:.5f} ({})\".format(high_5T[c_i], short_base_[c_i], mr_res[c_i]))\n","        #   else:\n","        #     low_5T = res_df['low_5T'].to_numpy()  # Todo, tf_entry - 1 open 기준이라 future_data 사용 가능\n","        #     long_base_ = res_df['long_base_{}{}{}'.format(itv, period1, period2)]\n","        #     mr_res *= low_5T > long_base_\n","        #     if show_detail:\n","        #         sys_log.warning(\n","        #             \"low_5T > long_base_ : {:.5f} {:.5f} ({})\".format(low_5T[c_i], long_base_[c_i], mr_res[c_i]))'\n","        \n","        # ------ dc_base ------ #\n","        # if selection_id in ['4']:  # 'v3_3', 'v3_4',\n","        #   hc_itv = '5T'\n","        #   dc_itv = '5T'\n","        #   itv_num = to_itvnum(hc_itv)\n","        #   close_ = res_df['close_{}'.format(hc_itv)].shift(itv_num).to_numpy()   # 따라서 future_data 사용시, shifting 필요함\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     dc_lower_ = res_df['dc_lower_%s' % dc_itv].shift(itv_num).to_numpy()\n","        #     mr_res *= close_ < dc_lower_\n","        #   else:\n","        #     dc_upper_ = res_df['dc_upper_%s' % dc_itv].shift(itv_num).to_numpy()\n","        #     mr_res *= close_ > dc_upper_\n","\n","        # ------ ema ------ #\n","        # if selection_id in ['v5_2']: # 'v3'\n","        #   ema_5T = res_df['ema_5T'].to_numpy()\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     mr_res *= close < ema_5T\n","        #   else:\n","        #     mr_res *= close > ema_5T\n","        \n","        # ------ b. bb ------ #\n","        # close = res_df['close'].to_numpy()\n","\n","        # if selection_id in ['v3_3']:\n","        #   open = res_df['open'].to_numpy()\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     bb_lower_1m = res_df['bb_lower_1m'].to_numpy()\n","        #     # mr_res *= close <= bb_lower_1m\n","        #     mr_res *= open <= bb_lower_1m\n","        #   else:\n","        #     bb_upper_1m = res_df['bb_upper_1m'].to_numpy()\n","        #     # mr_res *= close >= bb_upper_1m\n","        #     mr_res *= open >= bb_upper_1m\n","\n","        if selection_id in ['4_1']:\n","            if ep_loc_side == OrderSide.SELL:\n","                bb_lower_15T = res_df['bb_lower_15T'].to_numpy()\n","                short_ep_ = res_df['short_ep_{}'.format(selection_id)].to_numpy()\n","                mr_res *= bb_lower_15T >= short_ep_\n","            else:\n","                bb_upper_15T = res_df['bb_upper_15T'].to_numpy()\n","                long_ep_ = res_df['long_ep_{}'.format(selection_id)].to_numpy()\n","                mr_res *= bb_upper_15T <= long_ep_\n","\n","        # if selection_id in ['v5_2']:\n","        #   bb_upper2_ = res_df['bb_upper2_%s' % config.loc_set.zone.bbz_itv].to_numpy()\n","        #   bb_lower2_ = res_df['bb_lower2_%s' % config.loc_set.zone.bbz_itv].to_numpy()\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     mr_res *= bb_upper2_ < close\n","        #   else:\n","        #     mr_res *= bb_lower2_ > close\n","\n","        # degree_list = literal_eval(config.loc_set.zone.degree_list)\n","        # if len(degree_list) != 0:\n","        # # if selection_id in ['v3_3', 'v3_4']:\n","        #   norm_close_15 = res_df['norm_close_15'].to_numpy()   # -> 이거 뭘로 만들었는지 불분명함,,\n","        #   b1_norm_close_15 = res_df['norm_close_15'].shift(15).to_numpy()\n","\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     mr_res *= norm_close_15 <= -degree_list[0]\n","        #     # mr_res *= b1_norm_close_15 <= -degree_list[1]\n","        #   else:\n","        #     mr_res *= norm_close_15 >= degree_list[0]\n","        #     # mr_res *= b1_norm_close_15 >= degree_list[1]\n","\n","        # ------ b. dc ------ #\n","        # if selection_id in ['v3_3']:\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     dc_lower_ = res_df['dc_lower_1m'].to_numpy()\n","        #     b1_dc_lower_ = res_df['dc_lower_1m'].shift(1).to_numpy()\n","        #     mr_res *= dc_lower_ < b1_dc_lower_\n","        #   else:\n","        #     dc_upper_ = res_df['dc_upper_1m'].to_numpy()\n","        #     b1_dc_upper_ = res_df['dc_upper_1m'].shift(1).to_numpy()\n","        #     mr_res *= dc_upper_ > b1_dc_upper_\n","\n","        # ------ c. sar ------ #\n","        # if selection_id in ['v3_3']:\n","        # sar_uptrend_3T = res_df['sar_uptrend_3T'].to_numpy()\n","        # if ep_loc_side == OrderSide.SELL:\n","        #   mr_res *= sar_uptrend_3T == 0\n","        # else:\n","        #   mr_res *= sar_uptrend_3T == 1"]},{"cell_type":"markdown","metadata":{"id":"JjKHyqftzhD7"},"source":["### set config (override available)"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"q_4E-zH02WJy","executionInfo":{"status":"ok","timestamp":1663111647918,"user_tz":-540,"elapsed":2,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["#     caution : MARKET / LIMIT spelling   #\n","#      json doesn't support single quotes     #\n","\n","param_dict = {\n","  \"selection_id\": \"5_49\",\n","  \"trader_set\": {\n","    \"backtrade\": 0,\n","    \"back_data_path\": \"C:\\\\Users\\\\Lenovo\\\\PycharmProjects\\\\System_Trading\\\\JnQ\\\\candlestick_concated\\\\database_bn\\\\2022-02-17\\\\2022-02-17 ETHUSDT_1m.ftr\",\n","    \"start_datetime\": \"2020-09-05 00:00:59.999\",\n","    \"run\": 1,\n","    \"df_log\": 0,\n","    \"latest_index\": -1,\n","    \"complete_index\": -2,\n","    \"limit_fee\": 1e-10,\n","    \"market_fee\": 1e-10,\n","    \"initial_asset\": 24500,\n","    \"asset_changed\": 0,\n","    \"symbol\": \"ETHUSDT\",\n","    \"symbol_changed\": 0,\n","    \"itv_list\": \"['T', '3T', '5T', '15T', '30T', 'H', '4H']\",\n","    \"row_list\": \"[100, 50, 1, 1, 1, 50, 1]\",\n","    \"rec_row_list\": \"[1, 1, 1, 1, 1, 1, 1]\",\n","    \"offset_list\": \"['1h', '1h', '1h', '1h', '1h', '1h', '1h']\",\n","    \"bar_close_second\": 59,\n","    \"realtime_term\": 0.01,\n","    \"order_term\": 0.25,\n","    \"api_retry_term\": 1,\n","    \"check_entry_sec\": 10,\n","    \"entry_execution_wait\": 60,\n","    \"breakout_qty_ratio\": 0.97,\n","    \"qty_check_term\": 30,\n","    \"exit_execution_wait\": 60,\n","    \"close_complete_term\": 5,\n","    \"save_stacked_df\": 0,\n","    \"stacked_df_exist\": 1\n","  },\n","  \"pos_set\": {\n","    \"short_inversion\": 0,\n","    \"long_inversion\": 0,\n","    \"short_ban\": 0,\n","    \"long_ban\": 0\n","  },\n","  \"loc_set\": {      \n","    \"point1\": {\n","      \"exp_itv\": \"5T\",\n","      \"tf_entry\": \"15T\",\n","      \"candle_pattern\": \"CDLMARUBOZU\",\n","      \"short_spread\": \"None\",\n","      \"long_spread\": \"None\",\n","      \"short_tr_thresh\": \"None\",\n","      \"long_tr_thresh\": \"None\",\n","      \"short_wick_ratio\": \"None\",\n","      \"long_wick_ratio\": \"None\",\n","      \"wick_itv\": \"5T\",\n","      \"wrr_10\": \"None\",\n","      \"wrr_21\": \"None\",\n","      \"wrr_32\": 0.3,\n","      \"co_es\": \"None\",\n","      \"cu_es\": \"None\",\n","      \"crr\": \"None\",\n","      \"cppr\": \"None\",\n","      \"ppr\": \"None\",\n","      \"wbr\": \"None\",\n","      \"dbr\": \"None\",\n","      \"dbr2\": \"None\",\n","      \"brr\": \"None\",\n","      \"ir\": \"None\",\n","      \"abs_ratio\": \"None\"\n","    },\n","    \"point2\": {\n","      \"wrr_32\": \"None\",\n","      \"csdbox_range\": 0.3,\n","      \"short_tr_thresh\": \"None\",\n","      \"long_tr_thresh\": \"None\",\n","      \"csd_period\": \"None\"\n","    },\n","    \"zone1\": {\n","      \"use_zone\": 0,\n","      \"base_roll_period\": 50,\n","      \"degree_list\": \"[]\",\n","      \"dtk_itv\": \"5T\",\n","      \"dt_k\": \"None\",\n","      \"dc_period\": 135,\n","      \"use_dtk_line\": 0,\n","      \"zone_dt_k\": 0.4,\n","      \"zone_dc_period\": 135\n","    },\n","    \"zone2\": {\n","      \"use_zone\": 0\n","    }\n","  },\n","  \"tr_set\": {\n","    \"check_hlm\": 0,\n","    \"wave_itv1\" : \"5T\",\n","    \"wave_period1\": 20,\n","    \"wave_length1\": \"None\",\n","    \"wave_spread1\": \"None\",\n","    \"wave_time_ratio1\": \"None\",\n","    \"wave_itv2\" : \"T\",    \n","    \"wave_period2\": 20,\n","    \"tc_period\": 20,\n","    \"wave_greater1\": 0,\n","    \"wave_greater2\": 0,\n","    \"wave_lesser1\": 2,\n","    \"wave_lesser2\": 2,\n","    \"expire_k1\": 0.0,\n","    \"expire_k2\": 0.0,\n","    \"expire_tick\": \"None\",\n","    \"p2_box_k1\" : 0,\n","    \"p2_box_k2\" : 0,\n","    \"p1p2_low\": 0.0,\n","    \"tp_gap\": 0.0,\n","    \"ep_gap1\": -0.12,\n","    \"ep_gap2\": -0.5,\n","    \"out_gap\": 0,\n","    \"decay_gap\": \"None\",\n","    \"c_ep_gap\": \"None\",\n","    \"t_out_gap\": \"None\",\n","    \"wb_tp_gap\": 0,\n","    \"wb_out_gap\": 0,\n","    \"bias_tick\": 100\n","  },\n","  \"ep_set\": {\n","    \"entry_type\": \"MARKET\",\n","    \"static_ep\": 1,\n","    \"point2\": {\n","      \"entry_type\": \"LIMIT\"\n","    }\n","  },\n","  \"tp_set\": {\n","    \"non_tp\": 0,\n","    \"static_tp\": 1,\n","    \"tp_onexec\": 0,\n","    \"decay_term\": 60,\n","    \"p_ranges\": \"[1]\",\n","    \"p_qty_ratio\": \"[1]\"\n","  },\n","  \"out_set\": {\n","    \"hl_out\": 1,\n","    \"static_out\": 1,\n","    \"out_onexec\": 0,\n","    \"tf_exit\": \"None\",\n","    \"rsi_exit\": 0\n","  },\n","  \"lvrg_set\": {\n","    \"static_lvrg\": 0,\n","    \"leverage\": 5,\n","    \"target_pct\": 0.03,\n","    \"allow_float\": 0,\n","    \"lvrg_rejection\": 0\n","  }\n","}\n","\n","config = EasyDict(param_dict)"]},{"cell_type":"markdown","metadata":{"id":"MuD_2vY7TI_8"},"source":["#### legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"EKag94Y2TMCO"},"outputs":[],"source":[",\n","      \"hc_itv\": 60,\n","      \"osc_band\": 20\n","      \n","      \"wick_score_list\": \"[]\",\n","      \"body_score_list\": \"[]\",\n","      \"score_itv_list\": \"[]\",,\n","\n","      \"wick_score_list\": \"[]\",\n","      \"body_score_list\": \"[]\",\n","      \"score_itv_list\": \"['T']\""]},{"cell_type":"markdown","metadata":{"id":"rLI8unIyroiC"},"source":["## run"]},{"cell_type":"code","execution_count":8,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":378,"status":"ok","timestamp":1663111651314,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"qBJfPsmJzVIr","outputId":"6e4803d4-3ba5-4894-f296-039fc3316a8b"},"outputs":[{"output_type":"stream","name":"stdout","text":["\"5_49\" {\n"," \"point1\": {\n","  \"exp_itv\": \"5T\",\n","  \"tf_entry\": \"15T\",\n","  \"candle_pattern\": \"CDLMARUBOZU\",\n","  \"short_spread\": \"None\",\n","  \"long_spread\": \"None\",\n","  \"short_tr_thresh\": \"None\",\n","  \"long_tr_thresh\": \"None\",\n","  \"short_wick_ratio\": \"None\",\n","  \"long_wick_ratio\": \"None\",\n","  \"wick_itv\": \"5T\",\n","  \"wrr_10\": \"None\",\n","  \"wrr_21\": \"None\",\n","  \"wrr_32\": 0.3,\n","  \"co_es\": \"None\",\n","  \"cu_es\": \"None\",\n","  \"crr\": \"None\",\n","  \"cppr\": \"None\",\n","  \"ppr\": \"None\",\n","  \"wbr\": \"None\",\n","  \"dbr\": \"None\",\n","  \"dbr2\": \"None\",\n","  \"brr\": \"None\",\n","  \"ir\": \"None\",\n","  \"abs_ratio\": \"None\"\n"," },\n"," \"point2\": {\n","  \"wrr_32\": \"None\",\n","  \"csdbox_range\": 0.3,\n","  \"short_tr_thresh\": \"None\",\n","  \"long_tr_thresh\": \"None\",\n","  \"csd_period\": \"None\"\n"," },\n"," \"zone1\": {\n","  \"use_zone\": 0,\n","  \"base_roll_period\": 50,\n","  \"degree_list\": \"[]\",\n","  \"dtk_itv\": \"5T\",\n","  \"dt_k\": \"None\",\n","  \"dc_period\": 135,\n","  \"use_dtk_line\": 0,\n","  \"zone_dt_k\": 0.4,\n","  \"zone_dc_period\": 135\n"," },\n"," \"zone2\": {\n","  \"use_zone\": 0\n"," }\n","} {\n"," \"check_hlm\": 0,\n"," \"wave_itv1\": \"5T\",\n"," \"wave_period1\": 20,\n"," \"wave_length1\": \"None\",\n"," \"wave_spread1\": \"None\",\n"," \"wave_time_ratio1\": \"None\",\n"," \"wave_itv2\": \"T\",\n"," \"wave_period2\": 20,\n"," \"tc_period\": 20,\n"," \"wave_greater1\": 0,\n"," \"wave_greater2\": 0,\n"," \"wave_lesser1\": 2,\n"," \"wave_lesser2\": 2,\n"," \"expire_k1\": 0.0,\n"," \"expire_k2\": 0.0,\n"," \"expire_tick\": \"None\",\n"," \"p2_box_k1\": 0,\n"," \"p2_box_k2\": 0,\n"," \"p1p2_low\": 0.0,\n"," \"tp_gap\": 0.0,\n"," \"ep_gap1\": -0.12,\n"," \"ep_gap2\": -0.5,\n"," \"out_gap\": 0,\n"," \"decay_gap\": \"None\",\n"," \"c_ep_gap\": \"None\",\n"," \"t_out_gap\": \"None\",\n"," \"wb_tp_gap\": 0,\n"," \"wb_out_gap\": 0,\n"," \"bias_tick\": 100\n","} {\n"," \"entry_type\": \"MARKET\",\n"," \"static_ep\": 1,\n"," \"point2\": {\n","  \"entry_type\": \"LIMIT\"\n"," }\n","} {\n"," \"non_tp\": 0,\n"," \"static_tp\": 1,\n"," \"tp_onexec\": 0,\n"," \"decay_term\": 60,\n"," \"p_ranges\": \"[1]\",\n"," \"p_qty_ratio\": \"[1]\"\n","} {\n"," \"hl_out\": 1,\n"," \"static_out\": 1,\n"," \"out_onexec\": 0,\n"," \"tf_exit\": \"None\",\n"," \"rsi_exit\": 0\n","} {\n"," \"static_lvrg\": 0,\n"," \"leverage\": 5,\n"," \"target_pct\": 0.03,\n"," \"allow_float\": 0,\n"," \"lvrg_rejection\": 0\n","} "]}],"source":["# funcs = [expire_v2, ep_loc_point2_v2, lvrg_set]  # expire for p1 & p2\n","funcs = [expiry_p1, expiry_p2, lvrg_set]     # expire for p1-only\n","# funcs = [expire_v0, ep_loc_point2_v2, lvrg_set]  # expire for v3\n","\n","id_idx_list = [0]  # ID_arr 에서 import 할 id_idx 선택\n","public_override = 1\n","utils_override = 1\n","config_override = 1\n","\n","# ------ config_list 와 같은 org_var 에 override 하는거 다시 생각하기 ------ #\n","ID_list = ID_arr[id_idx_list]\n","utils_list = utils_arr[id_idx_list]\n","config_list = config_arr[id_idx_list]\n","\n","if config_override or utils_override:\n","  assert len(config_list) == 1\n","  if config_override:    \n","    config_list[0] = config\n","    ID_list[0] = config.selection_id\n","  \n","config = config_list[0]  # base config = config_list[0]\n","tp_fee, out_fee = calc_tp_out_fee_v2(config)   # -> rev_pr 때문에 일단 이곳에도 선언함\n","\n","# ------- inversion set ------- #\n","inversion = 0\n","fdist_thresh = 1\n","# ------- plot param ------- #\n","show_detail = 0\n","# ------- temp param ------- #\n","allow_osc_touch = 0\n","rsi_gap = 5\n","\n","# ------- just printing config ------- #\n","_ = [print(json.dumps(config[key_], indent=1), end=' ') for key_ in ['selection_id', 'loc_set', 'tr_set', 'ep_set', 'tp_set', 'out_set', 'lvrg_set']] #  'trader_set',"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"afUV2b1jaggN"},"outputs":[],"source":["# config.trader_set.start_datetime = \"2020-09-05 00:00:59.999\" #  \"2020-09-05 00:00:59.999\" # 2022-02-01 16:34:59.999000 2022-01-14 16:34:59.999000  \"2020-09-05 00:00:59.999\" \"2022-01-10 00:00:59.999\" \"2021-10-04 02:39:59.999000\"\n","# ------ p1_hhm 의 경우 out_box 를 위해 wave_itv 1 & 2 를 동일하게 설정해야함 ------ #\n","config_list[0].tr_set.wave_itv1 = 'T'\n","config_list[0].tr_set.wave_period1 = 20\n","config_list[0].tr_set.wave_itv2 = 'T'\n","config_list[0].tr_set.wave_period2 = 4\n","config_list[0].tr_set.tc_period = 20"]},{"cell_type":"code","execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3572,"status":"ok","timestamp":1663111656783,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"WstWVNihCNH8","outputId":"4d8db00a-897d-4eac-be5c-3d119a809ce3"},"outputs":[{"output_type":"stream","name":"stdout","text":["public_indi elapsed time : 2.715437889099121\n","make data_list elapsed time : 0.00022530555725097656\n"]}],"source":["# ------ slicing res_df ------ #\n","res_df = res_df_.loc[pd.to_datetime(config.trader_set.start_datetime):]\n","\n","np_timeidx = np.array([intmin_np(date_) for date_ in res_df.index.to_numpy()])\n","\n","# ------------ public_indi ------------ # - 딱히 반복될 이유가 없는 phase - annot. 달때, why 까지 적어주면 좋음\n","start_0 = time.time()\n","if public_override:\n","    res_df = public_indi(res_df, config_list[0], np_timeidx)  # 현재 대부분의 시간은 h_candle 에서 소비되고 있음\n","else:\n","    res_df = utils_public.public_indi(res_df, config_list[0], np_timeidx)\n","print(\"public_indi elapsed time :\", time.time() - start_0)\n","\n","# ------------ make data_list ------------ # - 반복될 이유가 없는 phase - public_indo 에 종속\n","start_0 = time.time()\n","ohlc_cols = ['open', 'high', 'low', 'close']\n","ohlc_list = [res_df[col_].to_numpy() for col_ in ohlc_cols]\n","print(\"make data_list elapsed time :\", time.time() - start_0)"]},{"cell_type":"markdown","metadata":{"id":"RqRF1eyZ0xBL"},"source":["### idep_plot"]},{"cell_type":"code","execution_count":18,"metadata":{"id":"_iYcJk8nK8Yq","executionInfo":{"status":"ok","timestamp":1663111724124,"user_tz":-540,"elapsed":341,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# ------ edit utils config ------ #\n","config_list[0].tr_set.check_hlm = 0\n","# config_list[0].loc_set.point.candle_pattern = talib.get_function_groups()['Pattern Recognition'][51]   # \"None\" # 0.5 0.7\n","# config_list[0].pos_set.short_ban = 0\n","# config_list[0].pos_set.long_ban = 0\n","# config_list[0].tr_set.wave_lesser = 3\n","# config_list[0].tr_set.wave_length1 = \"None\"  # \"None\" 45 15 110 100 \n","# config_list[0].tr_set.wave_spread1 = \"None\"  # \"None\" 15 110 100 \n","# config_list[0].tr_set.wave_time_ratio1 = \"None\"  # \"None\" 6\n","# config_list[0].tr_set.wave_greater1 = 0  # 0 50 \n","# config_list[0].tr_set.wave_greater2 = 0  # 10\n","# config_list[0].tr_set.p1_period1 = 5\n","# config_list[0].tr_set.p1_period2 = 5\n","# # config_list[0].tr_set.p2_period1 = 20\n","# # config_list[0].tr_set.p2_period2 = 20\n","# config_list[0].ep_set.entry_type = \"LIMIT\" # \"LIMIT\" # \"MARKET\"\n","# config_list[0].ep_set.point2.entry_type = \"LIMIT\" # \"LIMIT\" # \"MARKET\"\n","# config_list[0].tr_set.tp_gap = 0.5\n","# config_list[0].tr_set.ep_gap1 = -0.5 # -0.8 -0.618 -0.23 -0.382 0.19 0.8 -0.12 -0.26\n","config_list[0].tr_set.ep_gap2 = -0.5 # -0.618 -0.23 -0.382 0.19 -0.5\n","# config_list[0].tr_set.out_gap = 0.2  # 0 -0.35 -0.6\n","# config_list[0].tr_set.wb_tp_gap = 0.5\n","# config_list[0].tr_set.wb_out_gap = -0.0\n","config_list[0].trader_set.limit_fee = 1e-10\n","config_list[0].trader_set.market_fee = 1e-10\n","# config_list[0].trader_set.limit_fee = 0.0002\n","# config_list[0].trader_set.market_fee = 0.0004\n","# config_list[0].loc_set.point.short_wick_ratio = 0.2 # \"None\" # 2.5\n","# config_list[0].loc_set.point.long_wick_ratio = 0.2 # \"None\" # 2.5\n","# config_list[0].loc_set.point.crr = 0.5"]},{"cell_type":"code","execution_count":19,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1405,"status":"ok","timestamp":1663111726889,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"iI39YI_5GguK","outputId":"0855f055-8db8-4f99-a09b-d181ee53723d"},"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 41080\n","WARNING:root:np.sum(long_open_res1 == 1) : 42205\n","WARNING:root:np.sum(short_open_res2 == 1) : 42292\n","WARNING:root:np.sum(long_open_res2 == 1) : 42483\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 41020\n","WARNING:root:np.sum(long_open_res1 == 1) : 42080\n","WARNING:root:np.sum(short_open_res2 == 1) : 40725\n","WARNING:root:np.sum(long_open_res2 == 1) : 40478\n","WARNING:root:wave_itv1\n","WARNING:root:np.sum(short_open_res1 == 1) : 8204\n","WARNING:root:np.sum(long_open_res1 == 1) : 8416\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 8202\n","WARNING:root:np.sum(long_open_res1 == 1) : 8410\n","WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 5874\n","WARNING:root:np.sum(long_open_res1 == 1) : 6084\n"]},{"output_type":"stream","name":"stdout","text":["enlist_tr elapsed time : 1.384714126586914\n"]}],"source":["if utils_override:   # 현재, utils_override 하는 경우 1개의 ID 만 허용함 \n","  # start_0 = time.time()\n","  # res_df = enlist_rtc(res_df, config_list[0], np_timeidx)\n","  # print(\"enlist_rtc elapsed time :\", time.time() - start_0)\n","  start_0 = time.time()\n","  res_df = enlist_tr(res_df, config_list[0], np_timeidx)    # 36995.0 -> 152766.0 # 4044 np.sum(long_open_res == 1) : 4325\n","  print(\"enlist_tr elapsed time :\", time.time() - start_0)\n","else:\n","    start_0 = time.time()\n","    for utils_, config_ in zip(utils_list, config_list):\n","        # res_df = utils_.enlist_rtc(res_df, config_, np_timeidx)\n","        res_df = utils_.enlist_tr(res_df, config_, np_timeidx)\n","    print(\"elapsed time :\", time.time() - start_0)"]},{"cell_type":"code","execution_count":22,"metadata":{"id":"gfDSOGMd91rE","executionInfo":{"status":"ok","timestamp":1663111788107,"user_tz":-540,"elapsed":364,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# ------ edit loc_set config ------ #\n","config_list[0].loc_set.point1.wrr_10 = \"None\" # \"None\" 0.3\n","config_list[0].loc_set.point1.wrr_21 = \"None\" # \"None\" \n","config_list[0].loc_set.point1.wrr_32 = 1 # \"None\" 1 0.5 0.482 0.302\n","config_list[0].loc_set.point2.wrr_32 = \"None\" # \"None\" 1 0.5 0.382 0.302 0.25\n","config_list[0].loc_set.point2.csd_period = \"None\"  # \"None\" 100\n","config_list[0].loc_set.zone1.use_zone = 0\n","config_list[0].loc_set.zone1.bb_trend_period = 150\n","# config_list[0].loc_set.zone1.hl_loc_pct = \"None\" # \"None\" 1 0.5\n","config_list[0].loc_set.zone2.use_zone = 0\n","# config_list[0].loc_set.point1.cu_es = \"None\" # \"None\" # -2\n","# config_list[0].loc_set.point1.co_es = \"None\" # \"None\" # -3\n","# config_list[0].loc_set.point1.cppr = 0.5   # \"None\" # 0.5 0.7\n","# config_list[0].loc_set.point1.wbr = \"None\" # 0.7\n","# config_list[0].loc_set.point1.dbr = \"None\"   # 0.7\n","# config_list[0].loc_set.point1.dbr2 = \"None\"  # 0.7\n","# config_list[0].loc_set.point1.brr = \"None\"   # 0.8\n","# config_list[0].loc_set.point1.ir = \"None\" # \"None\" 0.8\n","# config_list[0].loc_set.point1.wick_score_list = \"[]\"\n","# config_list[0].loc_set.point1.score_itv_list = \"['H']\"\n","# # config_list[0].loc_set.point1.abs_ratio = \"None\"  # 0.7\n","config_list[0].loc_set.point1.short_tr_thresh = \"None\"  #  \"None\" 0.5 2 0.8 # # 0.7  5 # tr_thresh 엄청 민감함\n","config_list[0].loc_set.point1.long_tr_thresh = 5  #  \"None\" 2 0.8 ## 0.7 5 \n","# # config_list[0].loc_set.zone1.base_roll_period = 60"]},{"cell_type":"code","execution_count":23,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3893,"status":"ok","timestamp":1663111792343,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"9DPgykxQ92mU","outputId":"4326d069-21a0-4b96-8d0b-d85a2e845863"},"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 1.00000 (1.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.68579 1.00000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 1.9922308921813965\n","get_open_info_df elapsed time : 1.6305458545684814\n"]}],"source":["open_info_df1 = get_open_info_df_v2(ep_loc_p1_v3, res_df, np_timeidx, ID_list, config_list, id_idx_list, open_num=1)  # --> point * dur. 관련 (loc_set) param 에 종속 (open_info 가 변경되는게 아니라면, 재실행할 필요없음)\n","open_info_df2 = get_open_info_df_v2(ep_loc_p2_v3, res_df, np_timeidx, ID_list, config_list, id_idx_list, open_num=2)\n","open_info_df_list = [open_info_df1, open_info_df2]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KqVkg236t_f2"},"outputs":[],"source":["# ------ edit entry & exit (ep, tp, out, ..) config ------ #\n","# config_list[0].tr_set.expire_k = -0.5\n","# config_list[0].tr_set.expire_tick = \"None\"\n","# config_list[0].tr_set.p2_box_k1 = 0.0  # 0 default --> 0 ~ 1 사이 값 사용 tp_1 로부터 떨어지는 거리\n","# config_list[0].tr_set.p2_box_k2 = 0.0  # 0.5 0 default --> \"None\" 불가, 0 ~ 1 사이 값 사용 tp_0 로부터 떨어지는 거리, 본디 p2_box 는 p1_box 내부에 존재해야, 정확한 hhm 이 측정가능해짐\n","# config_list[0].tr_set.p1p2_low = 0.5  # 0.5 0.7 0  0 is equal to \"None\", 마찬가지로 tp_0 로부터 떨어지는 거리\n","config_list[0].loc_set.point2.short_tr_thresh = \"None\"  #  \"None\" 0.5 2 0.8 # # 0.7 # tr_thresh 엄청 민감함\n","config_list[0].loc_set.point2.long_tr_thresh = \"None\"  #  \"None\" 2 0.8 ## 0.7\n","# # # config_list[0].ep_set.point2.entry_type = \"LIMIT\"\n","# # # config_list[0].ep_set.point2.wick_score_list = str([])\n","# # # config_list[0].tp_set.static_tp = 1\n","# # # config_list[0].tp_set.non_tp = 0 # 0 1\n","# config_list[0].tp_set.p_ranges = \"[1]\"\n","# config_list[0].tp_set.p_qty_ratio = \"[1]\"\n","# config_list[0].tp_set.p_ranges = \"[0.2, 0.66, 1]\"\n","# config_list[0].tp_set.p_qty_ratio = \"[0.25, 0.25, 0.5]\"\n","# config_list[0].tp_set.p_ranges = \"[0.66, 1]\"\n","# config_list[0].tp_set.p_qty_ratio = \"[0.3, 0.7]\"\n","# config_list[0].out_set.hl_out = 1\n","# # # config_list[0].out_set.tf_exit = \"None\" # 15 \"None\"\n","config_list[0].lvrg_set.static_lvrg = 0\n","config_list[0].lvrg_set.leverage = 1\n","config_list[0].lvrg_set.target_pct = 0.03 # 0.1 0.03\n","# # config_list[0].lvrg_set.allow_float = 0\n","# config_list[0].lvrg_set.lvrg_rejection = 0"]},{"cell_type":"code","source":["test_ratio = 0.0\n","short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_tr_arr, short_bias_arr, short_net_p1_bias_tick, short_p2exec_p1_bias_tick, short_net_p1_idx_arr, short_p2_idx_arr, short_tp_1, short_tp_0, short_out_1, short_out_0, short_ep2_0, \\\n","      long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_tr_arr, long_bias_arr, long_net_p1_bias_tick, long_p2exec_p1_bias_tick, long_net_p1_idx_arr, long_p2_idx_arr, long_tp_1, long_tp_0, long_out_1, long_out_0, long_ep2_0 = \\\n","get_res_v9(res_df, open_info_df_list, ohlc_list, config_list, np_timeidx, funcs, test_ratio=test_ratio, plot_is=1, signi=0, show_detail=0)   # open 이 많을 수록 en_ex_pairing elapsed time : 11.58370590209961"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":664},"id":"TvGs5mBxsuBK","executionInfo":{"status":"ok","timestamp":1663111801917,"user_tz":-540,"elapsed":9576,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"89ff3564-ec63-4a50-e773-a169fe33df47"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 6.790755271911621\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1728x576 with 6 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 2.1099917888641357\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8lYgsqH-rfAM"},"outputs":[],"source":["# ------ inversion ------ #\n","_ = get_res_v5(res_df, open_info_df, ohlc_list, config_list, np_timeidx, funcs, inversion=True, test_ratio=test_ratio, plot_is=1, signi=False)"]},{"cell_type":"markdown","metadata":{"id":"n6gc7lERC4VE"},"source":["### statistics (stem 별로 진행)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HHjIdn2MC4VE"},"outputs":[],"source":["selection_id = config.selection_id\n","\n","short_p1_idx = short_obj[-1].astype(int)\n","long_p1_idx = long_obj[-1].astype(int)\n","\n","short_open_tp_1 = res_df['short_tp_1_{}'.format(selection_id)].to_numpy()[short_p1_idx]\n","long_open_tp_1 = res_df['long_tp_1_{}'.format(selection_id)].to_numpy()[long_p1_idx]\n","\n","short_open_tp_0 = res_df['short_tp_0_{}'.format(selection_id)].to_numpy()[short_p1_idx]\n","long_open_tp_0 = res_df['long_tp_0_{}'.format(selection_id)].to_numpy()[long_p1_idx]\n","\n","short_open_tp_gap = res_df['short_tp_gap_{}'.format(selection_id)].to_numpy()[short_p1_idx]  # use open_i\n","long_open_tp_gap = res_df['long_tp_gap_{}'.format(selection_id)].to_numpy()[long_p1_idx]\n","\n","short_open_out_0 = res_df['short_out_0_{}'.format(selection_id)].to_numpy()[short_p1_idx]\n","long_open_out_0 = res_df['long_out_0_{}'.format(selection_id)].to_numpy()[long_p1_idx]\n","\n","short_open_out_gap = res_df['short_out_gap_{}'.format(selection_id)].to_numpy()[short_p1_idx]  # use open_i\n","long_open_out_gap = res_df['long_out_gap_{}'.format(selection_id)].to_numpy()[long_p1_idx]\n","\n","# ------ out case 의 max_high check (long) ------ #\n","short_max_tpg = get_max_tpg_v2(OrderSide.SELL, ohlc_list, short_pr, short_obj[:4], short_open_tp_1, short_open_tp_gap)\n","long_max_tpg = get_max_tpg_v2(OrderSide.BUY, ohlc_list, long_pr, long_obj[:4], long_open_tp_1, long_open_tp_gap)\n","# short_max_tpg = get_max_tpg_v2(OrderSide.SELL, ohlc_list, short_pr, short_obj[:4], short_open_tp_1, short_open_out_gap)\n","# long_max_tpg = get_max_tpg_v2(OrderSide.BUY, ohlc_list, long_pr, long_obj[:4], long_open_tp_1, long_open_out_gap)\n","\n","# ------ true_bias 의 outg 확인 ------ # --> 추후, outg 로 tp_gap / out_gap custom 여부를 위해, 본 cell 을 지우지 않음\n","short_max_outg = get_max_outg_v4(OrderSide.SELL, config, ohlc_list, short_obj, short_tpout_arr, short_open_tp_0, short_open_tp_gap)  # tp_box's mean_low 확인 위해 tp_gap 입력함\n","long_max_outg = get_max_outg_v4(OrderSide.BUY, config, ohlc_list, long_obj, long_tpout_arr, long_open_tp_0, long_open_tp_gap)\n","\n","current_tpg = config.tr_set.tp_gap\n","current_outg = config.tr_set.out_gap"]},{"cell_type":"markdown","metadata":{"id":"tOFkzUX2imQu"},"source":["#### consecutive dur. value survey on bias"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CgvSrXaZEkMZ"},"outputs":[],"source":["res_df.dtypes"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gnSvYKIzC4VF"},"outputs":[],"source":["# ------------ dependent vars. ------------ #\n","# res_df 에 존재하는 col 는 모두 사용가능함\n","\n","# ------ 1. 도출한 outg 와 vars. pairing 진행 (by valid_idx) ------ #\n","devided_cols, public_cols = [], []\n","\n","devided_cols.append('tr_{}'.format(selection_id))\n","\n","devided_cols.append('wave_length_fill_{}{}'.format(wave_itv1, wave_period1))\n","devided_cols.append('wave_spread_fill_{}{}'.format(wave_itv1, wave_period1))\n","\n","wave_itv1 = 'T'\n","wave_period1 = config.tr_set.wave_period1\n","\n","# public_cols.append('cu_wrr_21_{}{}'.format(wave_itv1, wave_period1))\n","public_cols.append('cu_wrr_32_{}{}'.format(wave_itv1, wave_period1))\n","# public_cols.append('co_wrr_21_{}{}'.format(wave_itv1, wave_period1))\n","public_cols.append('co_wrr_32_{}{}'.format(wave_itv1, wave_period1))\n","\n","# public_cols.append('wave_high_terms_cnt_fill_T5')\n","# public_cols.append('wave_low_terms_cnt_fill_T5')\n","# public_cols.append('wave_high_loc_pct_T5')\n","# public_cols.append('wave_low_loc_pct_T5')\n","\n","# public_cols.append('b1_co_es_15T1')\n","# public_cols.append('b1_cu_es_15T1')\n","# public_cols.append('b1_upper_wick_ratio_15T')\n","# public_cols.append('b1_lower_wick_ratio_15T')\n","\n","#  'co_wrr_T5', 'cu_wrr_T5', 'b1_cppr_15T', 'b1_updbr', 'b1_lwdbr', 'b1_updbr_cppr', 'b1_lwdbr_cppr' 'abs_ratio_5T', 'rel_ratio_5T', 'body_rel_ratio_5T'\n","\n","# devided_cols = ['tr_{}'.format(selection_id)]  # , 'ir_5T'\n","# public_cols = ['wave_high_terms_cnt_fill_T5', 'wave_low_terms_cnt_fill_T5', 'wave_high_loc_pct_T5', 'wave_low_loc_pct_T5', \n","#                'b1_co_es_15T1', 'b1_cu_es_15T1', 'b1_upper_wick_ratio_15T', 'b1_lower_wick_ratio_15T']\n","\n","short_datas = [res_df['short_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","long_datas = [res_df['long_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","\n","titles = devided_cols + public_cols"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":4479,"status":"ok","timestamp":1658034578976,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"Sahvc-R0jD1A","outputId":"d8b458c5-24c9-40d3-cc1d-5672d1432ae9"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/numpy/core/fromnumeric.py:3208: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  return asarray(a).size\n","/usr/local/lib/python3.7/dist-packages/matplotlib/cbook/__init__.py:1376: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  X = np.atleast_1d(X.T if isinstance(X, np.ndarray) else np.asarray(X))\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1008x1800 with 20 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(14, len(titles) * 5))\n","nrows, ncols = len(short_datas), 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        )\n","\n","num_samples = 30\n","alpha = 0.8\n","xmin = 0\n","xmax = 10\n","\n","for ings_idx, (title, short_data, long_data) in enumerate(zip(titles, short_datas, long_datas)):\n","  inner_gs = gs[ings_idx].subgridspec(nrows=2, ncols=2)\n","\n","  short_open_data = short_data[short_p1_idx]\n","  long_open_data = long_data[long_p1_idx]\n","\n","  short_true_data = short_open_data[short_bias_arr.ravel()]\n","  # short_false_data = short_open_data[short_false_bias_arr.ravel()]\n","  short_false_data = short_open_data[~short_bias_arr.ravel()]\n","  long_true_data = long_open_data[long_bias_arr.ravel()]\n","  # long_false_data = long_open_data[long_false_bias_arr.ravel()]\n","  long_false_data = long_open_data[~long_bias_arr.ravel()]\n","  \n","  short_true_valid_idx = np.ones_like(short_true_data).astype(bool)\n","  short_false_valid_idx = np.ones_like(short_false_data).astype(bool)\n","  long_true_valid_idx = np.ones_like(long_true_data).astype(bool)\n","  long_false_valid_idx = np.ones_like(long_false_data).astype(bool)\n","\n","  short_true_valid_idx *= ~np.isinf(short_true_data)\n","  short_false_valid_idx *= ~np.isinf(short_false_data)\n","  long_true_valid_idx *= ~np.isinf(long_true_data)\n","  long_false_valid_idx *= ~np.isinf(long_false_data)\n","\n","  try:\n","    short_true_valid_idx *= short_true_data > xmin\n","    short_false_valid_idx *= short_false_data > xmin\n","    long_true_valid_idx *= long_true_data > xmin\n","    long_false_valid_idx *= long_false_data > xmin\n","\n","  except:\n","    pass\n","\n","  try:\n","    short_true_valid_idx *= short_true_data < xmax\n","    short_false_valid_idx *= short_false_data < xmax\n","    long_true_valid_idx *= long_true_data < xmax\n","    long_false_valid_idx *= long_false_data < xmax\n","    \n","  except:\n","    pass\n","    \n","  plt.subplot(inner_gs[0])\n","  ns, bins, patches = plt.hist([short_true_data[short_true_valid_idx], short_false_data[short_false_valid_idx]], \n","           bins=num_samples, alpha=alpha, color=['#00ff00', '#ff0000'], edgecolor='black')  \n","  plt.title('short_' + title)  \n","\n","  plt.subplot(inner_gs[2])\n","  total_ns = np.sum(ns, axis=0)\n","  hist_ratio = ns[0] / total_ns\n","  # valid_idx = total_ns > 1\n","  valid_idx = np.full(len(hist_ratio), True)\n","  valid_hist_ratio = hist_ratio[valid_idx]\n","  plt.hist(bins[:-1][valid_idx], weights=valid_hist_ratio, bins=num_samples, color='#00ff00', edgecolor='black')\n","  plt.ylim(0, 1)\n","  \n","\n","  plt.subplot(inner_gs[1])\n","  ns, bins, patches = plt.hist([long_true_data[long_true_valid_idx], long_false_data[long_false_valid_idx]], \n","           bins=num_samples, alpha=alpha, color=['#00ff00', '#ff0000'], edgecolor='black')\n","  plt.title('long_' + title)\n","  \n","  plt.subplot(inner_gs[3])\n","  total_ns = np.sum(ns, axis=0)\n","  hist_ratio = ns[0] / total_ns\n","  # valid_idx = total_ns > 1\n","  valid_idx = np.full(len(hist_ratio), True)\n","  valid_hist_ratio = hist_ratio[valid_idx]\n","  plt.hist(bins[:-1][valid_idx], weights=valid_hist_ratio, bins=num_samples, color='#00ff00', edgecolor='black')\n","  plt.ylim(0, 1)\n","\n","  \n","# plt.suptitle(title)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"Arnb-kXlC4VF"},"source":["#### tpg & outg survey"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":881},"executionInfo":{"elapsed":2820,"status":"ok","timestamp":1659074362424,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"jHh0uFkXC4VF","outputId":"cf21f56c-faf2-471d-b7e0-5c16e0ff2bdd"},"outputs":[{"output_type":"stream","name":"stdout","text":["223\n","533\n","223\n","533\n","223\n","533\n","223\n","533\n","pkx : [0.05994977 0.14818175 0.35111529 0.74815919]\n","pkx : [0.09816775 0.30374184 0.78029994]\n","\n","56\n","84\n","56\n","84\n","56\n","84\n","56\n","84\n","pkx : [-0.23140658 -0.19827966 -0.16515274 -0.14385686 -0.11072994 -0.07287061 -0.01371539]\n","pkx : [-0.32640606 -0.24710795 -0.18102619 -0.11494443 -0.03234223]\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 864x576 with 4 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# 1. outg 는 partial 을 위한 histogram 작성 진행\n","# 현재, outg 내부에는 tp 한것과 out 한것이 공존하는 상태\n","titles = ['outg', 'tpg']\n","short_max_datas = [short_max_outg[short_bias_arr], short_max_tpg]\n","long_max_datas = [long_max_outg[long_bias_arr], long_max_tpg]\n","\n","# titles = ['tpg']\n","# short_max_datas = [short_max_tpg]\n","# long_max_datas = [long_max_tpg]\n","\n","plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(12, 8))\n","nrows, ncols = 2, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        )\n","  \n","for ings_idx, (title, short_max_data, long_max_data) in enumerate(zip(titles, short_max_datas, long_max_datas)):\n","\n","  inner_gs = gs[ings_idx].subgridspec(nrows=1, ncols=2)\n","  if ings_idx == 0:\n","    axvline = current_outg\n","    title_add = 'true_' + title\n","  else:\n","    axvline = current_tpg\n","    title_add = 'false_' + title\n","\n","  print(len(short_max_data))\n","  print(len(long_max_data))\n","\n","  short_plot_idx = np.ones_like(short_max_data).astype(bool)\n","  long_plot_idx = np.ones_like(long_max_data).astype(bool)\n","  # short_plot_idx = short_max_data <= axvline\n","  # long_plot_idx = long_max_data <= axvline\n","\n","  print(np.sum(short_plot_idx))\n","  print(np.sum(long_plot_idx))    \n","\n","  short_plot_idx *= ~np.isnan(short_max_data)\n","  long_plot_idx *= ~np.isnan(long_max_data)  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(short_plot_idx))\n","  print(np.sum(long_plot_idx))\n","\n","  short_plot_idx *= ~np.isinf(short_max_data)\n","  long_plot_idx *= ~np.isinf(long_max_data)  # nan 과 inf 때문에 이 방식 채택\n","  \n","  print(np.sum(short_plot_idx))\n","  print(np.sum(long_plot_idx))\n","    \n","  plt.subplot(inner_gs[0])\n","  kde_plot_v2(*np.unique(short_max_data[short_plot_idx], return_counts=True))\n","  plt.title('short_' + title_add)  \n","  plt.axvline(axvline, color='red', linewidth=3)\n","\n","  plt.subplot(inner_gs[1])\n","  kde_plot_v2(*np.unique(long_max_data[long_plot_idx], return_counts=True))\n","  plt.title('long_' + title_add)\n","  plt.axvline(axvline, color='red', linewidth=3)\n","\n","  print()\n","\n","# plt.suptitle(title)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"mScdfR9hmjVu"},"source":["#### legacy"]},{"cell_type":"markdown","metadata":{"id":"xivLUsSGC4VF"},"source":["##### outg survey for precision (eploc vars. dependency)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LB28R3QIjCDc"},"outputs":[],"source":["# ------------ dependent vars. ------------ #\n","# res_df 에 존재하는 col 는 모두 사용가능함\n","# ------ 1. 도출한 outg 와 vars. pairing 진행 (by valid_idx) ------ #\n","devided_cols = ['tr_{}'.format(strat_version)]  # , 'ir_5T'\n","public_cols = ['wave_body_ratio']  # 'abs_ratio_5T', 'rel_ratio_5T', 'body_rel_ratio_5T'\n","\n","short_datas = [res_df['short_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","long_datas = [res_df['long_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","\n","titles = devided_cols + public_cols"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nX9TpLcvFu7T"},"outputs":[],"source":["plot_outg_range = (-1, 10)\n","plot_data_range = (-10, 100)\n","\n","plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(12, 18))\n","nrows, ncols = len(short_datas), 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        )\n","\n","for ings_idx, (title, short_data, long_data) in enumerate(zip(titles, short_datas, long_datas)):\n","  inner_gs = gs[ings_idx].subgridspec(nrows=1, ncols=2)\n","\n","  print(len(long_max_outg))\n","\n","  short_plot_idx = (plot_outg_range[0] <= short_max_outg) & (short_max_outg <= plot_outg_range[1])\n","  long_plot_idx = (plot_outg_range[0] <= long_max_outg) & (long_max_outg <= plot_outg_range[1])  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_open_data = short_data[short_open_idx]\n","  long_open_data = long_data[long_open_idx]\n","  \n","  short_plot_idx *= (plot_data_range[0] <= short_open_data) * (short_open_data <= plot_data_range[1])\n","  long_plot_idx *= (plot_data_range[0] <= long_open_data) * (long_open_data <= plot_data_range[1]) # nan 과 inf 때문에 이 방식 채택\n","\n","  short_plot_idx *= ~np.isnan(short_open_data)\n","  long_plot_idx *= ~np.isnan(long_open_data)  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_plot_idx *= ~np.isinf(short_open_data)\n","  long_plot_idx *= ~np.isinf(long_open_data)  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_true_idx = short_plot_idx * short_true_open_idxth\n","  long_true_idx = long_plot_idx * long_true_open_idxth\n","  \n","  short_false_idx = short_plot_idx * ~short_true_open_idxth\n","  long_false_idx = long_plot_idx * ~long_true_open_idxth\n","\n","  plt.subplot(inner_gs[0])\n","  # ------ true_bias ------ #\n","  x, y = short_max_outg[short_true_idx].ravel(), short_open_data[short_true_idx].ravel()  \n","  plt.scatter(x, y, color='white', alpha=0.5)\n","  # ------ false_bias ------ #\n","  x, y = short_max_outg[short_false_idx].ravel(), short_open_data[short_false_idx].ravel()\n","  plt.scatter(x, y, color='fuchsia', alpha=0.3)\n","  plt.axvline(current_outg, color='red', linewidth=3)\n","  plt.title(\"{} coef : {:0.3f}\".format(title, np.corrcoef(-x, y)[0, 1]))\n","\n","  plt.subplot(inner_gs[1])    \n","  # ------ true_bias ------ #\n","  x, y = long_max_outg[long_true_idx].ravel(), long_open_data[long_true_idx].ravel()  \n","  plt.scatter(x, y, color='white', alpha=0.5)\n","  # ------ false_bias ------ #\n","  x, y = long_max_outg[long_false_idx].ravel(), long_open_data[long_false_idx].ravel()\n","  plt.scatter(x, y, color='fuchsia', alpha=0.3)\n","  plt.axvline(current_outg, color='red', linewidth=3)\n","  plt.title(\"{} coef : {:0.3f}\".format(title, np.corrcoef(-x, y)[0, 1]))\n","\n","  print()  \n","\n","# plt.suptitle(title)\n","plt.show()\n","# print()"]},{"cell_type":"markdown","metadata":{"id":"983aUwM76s6X"},"source":["#### dump"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"p_e8PtFXa7mc"},"outputs":[],"source":["# len(np.unique(long_obj[-1]))\n","p1_hhm_p1_idx = long_obj[-1]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nLZDkNNxbZPO"},"outputs":[],"source":["p1_hlm_p1_idx = long_obj[-1]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":261,"status":"ok","timestamp":1653452376525,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"WhCPOi1qbkHS","outputId":"e3b8db71-3e48-4177-a3fe-9f891a362596"},"outputs":[{"data":{"text/plain":["array([350065., 440065., 502833., 735204., 836258.])"]},"execution_count":161,"metadata":{},"output_type":"execute_result"}],"source":["# len(p1_hhm_p1_idx[~np.isin(p1_hhm_p1_idx, p1_hlm_p1_idx)])\n","p1_hlm_p1_idx[~np.isin(p1_hlm_p1_idx, p1_hhm_p1_idx)]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wgERZ65F5RBB"},"outputs":[],"source":["org_p1_idx = long_p2_idx_arr  # long_obj[-1]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rAao95SEnOY0"},"outputs":[],"source":["new_p1_idx = long_p2_idx_arr  # long_obj[-1]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":267,"status":"ok","timestamp":1653119592395,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"OEQ9KWXVnQ2J","outputId":"85c3e998-5c1e-4b5a-8366-28fe8cc3639b"},"outputs":[{"name":"stdout","output_type":"stream","text":["153\n","163\n"]},{"data":{"text/plain":["array([ 35609, 105164, 188999, 347399, 358994, 379304, 379544, 397274, 482474, 550919, 656774, 833129])"]},"execution_count":220,"metadata":{},"output_type":"execute_result"}],"source":["uniq_org_p1_idx = np.unique(org_p1_idx)\n","uniq_new_p1_idx = np.unique(new_p1_idx)\n","print(len(uniq_org_p1_idx))\n","print(len(uniq_new_p1_idx))\n","uniq_new_p1_idx[~np.isin(uniq_new_p1_idx, uniq_org_p1_idx)]\n","# np.unique(new_p1_idx).remove(np.unique(org_p1_idx))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hOtCGUeBQ4hn"},"outputs":[],"source":["open_idx = open_info_df.index.to_numpy()\n","# len_df = len(res_df)\n","# s_idx = (open_idx < int(len_df * (1 - test_ratio))) == plot_is\n","# s_open_info_df = open_info_df[s_idx]\n","# s_open_idx = open_idx[s_idx]\n","\n","# open_info_list = [s_open_info_df[col_].to_numpy() for col_ in s_open_info_df.columns]\n","# side_arr, zone_arr, id_arr, id_idx_arr = open_info_list\n","\n","long_open_ = res_df['long_open_{}'.format(config.selection_id)].to_numpy()\n","short_open_ = res_df['short_open_{}'.format(config.selection_id)].to_numpy()\n","\n","long_open_idx = get_index_bybool(long_open_, np.arange(len(res_df)))\n","short_open_idx = get_index_bybool(short_open_, np.arange(len(res_df)))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QPhjkZQhRLqr"},"outputs":[],"source":["valid_long_open_idx = long_open_idx[~np.isnan(long_open_idx)]\n","valid_short_open_idx = short_open_idx[~np.isnan(short_open_idx)]\n","\n","# print(valid_long_open_idx[valid_long_open_idx > 4000][:10])\n","# print(valid_short_open_idx[valid_short_open_idx > 4000][:10])\n","\n","print(open_idx[open_idx > 4000][:10])\n","\n","print(np.hstack((long_obj[-1], long_obj[3]))[:10])\n","print(np.hstack((short_obj[-1], short_obj[3]))[:10])\n","# print([:10])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cFd7Fz0Y6ucU"},"outputs":[],"source":["# short_max_outg, short_outg_open_idx = get_max_outg_v2(\"SELL\", config, ohlc_list, short_obj, short_tpout_arr, short_open_epout_0, short_open_epout_gap)\n","# long_max_outg, long_outg_open_idx = get_max_outg_v2(\"BUY\", config, ohlc_list, long_obj, long_tpout_arr, long_open_epout_0, long_open_epout_gap)\n","# short_max_outg, short_open_idx, short_true_open_idxth = get_max_outg_v3(\"SELL\", config, ohlc_list, short_obj, short_tpout_arr, short_open_epout_0, short_open_epout_gap)\n","# long_max_outg, long_open_idx, long_true_open_idxth = get_max_outg_v3(\"BUY\", config, ohlc_list, long_obj, long_tpout_arr, long_open_epout_0, long_open_epout_gap)"]},{"cell_type":"markdown","metadata":{"id":"EtjwB7Qk-Grj"},"source":["### significance_v4"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":94486,"status":"ok","timestamp":1662375629618,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"oVifICO4-Grk","outputId":"6a893363-2ab7-4613-d92b-14407dcb5617"},"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42048\n","WARNING:root:np.sum(long_open_res2 == 1) : 42240\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:np.sum(short_open_res2 == 1) : 40427\n","WARNING:root:np.sum(long_open_res2 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n","WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 28319\n","WARNING:root:np.sum(long_open_res1 == 1) : 28683\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.10000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.10000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 1.4183809757232666\n","get_open_info_df elapsed time : 1.1475732326507568\n","en_ex_pairing elapsed time : 0.002592325210571289\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42048\n","WARNING:root:np.sum(long_open_res2 == 1) : 42240\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:np.sum(short_open_res2 == 1) : 40427\n","WARNING:root:np.sum(long_open_res2 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n","WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 28319\n","WARNING:root:np.sum(long_open_res1 == 1) : 28683\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.20000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.20000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 1.1166181564331055\n","get_open_info_df elapsed time : 1.1268563270568848\n","en_ex_pairing elapsed time : 0.05585646629333496\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42048\n","WARNING:root:np.sum(long_open_res2 == 1) : 42240\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:np.sum(short_open_res2 == 1) : 40427\n","WARNING:root:np.sum(long_open_res2 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.1961812973022461\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 28319\n","WARNING:root:np.sum(long_open_res1 == 1) : 28683\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.30000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.30000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9891541004180908\n","get_open_info_df elapsed time : 1.133213996887207\n","en_ex_pairing elapsed time : 0.443495512008667\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42048\n","WARNING:root:np.sum(long_open_res2 == 1) : 42240\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:np.sum(short_open_res2 == 1) : 40427\n","WARNING:root:np.sum(long_open_res2 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.21266508102416992\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 28319\n","WARNING:root:np.sum(long_open_res1 == 1) : 28683\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.40000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.40000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 1.010218620300293\n","get_open_info_df elapsed time : 1.1166355609893799\n","en_ex_pairing elapsed time : 1.9594817161560059\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42048\n","WARNING:root:np.sum(long_open_res2 == 1) : 42240\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:np.sum(short_open_res2 == 1) : 40427\n","WARNING:root:np.sum(long_open_res2 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.25990796089172363\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 28319\n","WARNING:root:np.sum(long_open_res1 == 1) : 28683\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.50000 (0.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.50000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9856662750244141\n","get_open_info_df elapsed time : 1.1325628757476807\n","en_ex_pairing elapsed time : 4.9015138149261475\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42048\n","WARNING:root:np.sum(long_open_res2 == 1) : 42240\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:np.sum(short_open_res2 == 1) : 40427\n","WARNING:root:np.sum(long_open_res2 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.3125646114349365\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 28319\n","WARNING:root:np.sum(long_open_res1 == 1) : 28683\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.60000 (1.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.60000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 1.008387565612793\n","get_open_info_df elapsed time : 1.125178575515747\n","en_ex_pairing elapsed time : 8.5075364112854\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42048\n","WARNING:root:np.sum(long_open_res2 == 1) : 42240\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:np.sum(short_open_res2 == 1) : 40427\n","WARNING:root:np.sum(long_open_res2 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.35973072052001953\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 28319\n","WARNING:root:np.sum(long_open_res1 == 1) : 28683\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.70000 (1.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.70000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 1.025289535522461\n","get_open_info_df elapsed time : 1.1360254287719727\n","en_ex_pairing elapsed time : 12.39824891090393\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42048\n","WARNING:root:np.sum(long_open_res2 == 1) : 42240\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:np.sum(short_open_res2 == 1) : 40427\n","WARNING:root:np.sum(long_open_res2 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.39333009719848633\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 28319\n","WARNING:root:np.sum(long_open_res1 == 1) : 28683\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.80000 (1.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.80000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 1.034311056137085\n","get_open_info_df elapsed time : 1.1319921016693115\n","en_ex_pairing elapsed time : 16.35196018218994\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:wave_point\n","WARNING:root:np.sum(short_open_res1 == 1) : 42048\n","WARNING:root:np.sum(long_open_res1 == 1) : 42240\n","WARNING:root:np.sum(short_open_res2 == 1) : 42048\n","WARNING:root:np.sum(long_open_res2 == 1) : 42240\n","WARNING:root:reject update_hl\n","WARNING:root:np.sum(short_open_res1 == 1) : 40427\n","WARNING:root:np.sum(long_open_res1 == 1) : 40130\n","WARNING:root:np.sum(short_open_res2 == 1) : 40427\n","WARNING:root:np.sum(long_open_res2 == 1) : 40130\n","WARNING:root:wave_mm\n","WARNING:root:np.sum(short_open_res1 == 1) : 40425\n","WARNING:root:np.sum(long_open_res1 == 1) : 40128\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.41879725456237793\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:root:point validation\n","WARNING:root:np.sum(short_open_res1 == 1) : 28319\n","WARNING:root:np.sum(long_open_res1 == 1) : 28683\n","WARNING:root:cu_wrr_32_ <= config.loc_set.point1.wrr_32 : 0.54867 0.90000 (1.0)\n","WARNING:root:co_wrr_32_ <= config.loc_set.point1.wrr_32 : 1.00000 0.90000 (0.0)\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 1.0511291027069092\n","get_open_info_df elapsed time : 1.1418323516845703\n","en_ex_pairing elapsed time : 19.928776502609253\n","idep_plot elapsed time : 0.41760993003845215\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1728x576 with 36 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAABWkAAAILCAYAAACadh4AAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nOzde1gUZfsH8C+nReW0CAiKiIhgKopYHkrLkjyQGZbmq1agkeY5U/PUgdQ0stfMSqkfIqmpaKmJeSS1VzMyVERRFFQkQI4CuyAqp+f3B7GJgJx2mV34fq7ruS52Znbm3hmWm3nmmXv0AAgQERERERERERERkST0pQ6AiIiIiIiIiIiIqDljJy0RERERERERERGRhNhJS0RERERERERERCQhdtISERERERERERERSYidtEREREREREREREQSYictERERERERERERkYTYSUtNmr+/P7Zs2SJ1GERERFSFhIQEeHp6Sh0GERERVUMIAWdnZ7Wsy9fXFydPnlTLuoiaInbSEtVBSEgIli9fLnUYRERERERERFrL0dERQggYGBhIHQqRzmAnLVEt6evz60JEREREREREROrHXidqEhYsWIDk5GQolUpcuXIFgwcPVs2TyWTYtGkTlEolYmJi8Pjjj6vmPfbYYzh+/DhycnIQExODkSNHquaFhIRg/fr12L9/P/Lz8+Hn54fXXnsNCxYsQF5eHsLCwhr1MxIRETVlMpkMa9asQUpKClJSUrBmzRrIZDIAwKBBg5CUlIS5c+ciPT0dt27dwsSJE1Xvbd26NcLCwqBQKPDXX39h+fLlvJ2SiIhITV544QVcv34dmZmZWLVqFfT09AAAenp6eP/993Hz5k2kp6dj06ZNMDc3BwCcOHECAJCbm4u8vDz0799ftb7PP/8c2dnZuHHjBoYPH974H4hIiwk2Nl1urq6u4u+//xZt27YVAISjo6Po1KmTACD8/f3F3bt3hZeXl9DX1xcrV64UERERAoAwNDQU8fHxYvHixcLIyEg899xzQqlUCldXVwFAhISEiNzcXPHUU08JPT09YWxsLEJCQsTy5csl/8xsbGxsbGxNoSUkJAhPT08BQCxdulREREQIGxsbYW1tLU6dOiWWLVsmAIhBgwaJoqIisXTpUmFoaCi8vLzEnTt3hFwuFwDE9u3bxfbt20XLli1F165dxd9//y1Onjwp+edjY2NjY2PT9SaEEMeOHROWlpbCwcFBXL16Vfj5+QkAYtKkSSI+Pl44OTkJExMTsWvXLrF582YBlJ2XCyGEgYGBal2+vr6isLBQvPXWW0JfX19MnTpVpKSkSP4Z2di0qEkeABtbg5qzs7NIT08Xnp6ewtDQsMI8f39/ER4ernrdtWtXUVBQIACIgQMHitTUVKGnp6eav23bNuHv7y+Ask7aTZs2VVgfO2nZ2NjY2NjU1x7spL127Zrw8vJSzRs6dKhISEgQQFknbUFBQYUTvfT0dNGvXz+hr68vCgsLVRdZAYjly5ezk5aNjY2NjU0NTQghhg0bpno9bdo08euvvwoA4tdffxXTpk1TzXN1dRWFhYXCwMCg2k7a+Ph41euWLVsKIYSwtbWV/HOysWlDY7kD0nnXr1/HnDlz8PHHHyMjIwPbt29H27ZtVfPT0tJUPxcUFKBly5YwMDBAu3btkJSUBCGEan5iYiLs7e1Vr5OSkhrnQxARETVz7dq1Q2Jioup1YmIi2rVrp3p9+/ZtlJSUqF4XFBTA1NQUNjY2MDIyqpCzmb+JiIjU58G8+mB+rip3GxkZwdbWttp1PXh+fvfuXQCAqampukMm0knspKUmYfv27Xj66adVT5D87LPPanzPrVu34ODgoKqnAwAdOnRASkqK6vWDHbhVvSYiIiL1uHXrFhwdHVWvO3TogFu3btX4vszMTBQVFaF9+/aqaQ4ODhqJkYiIqDl6MK8+mJ+ryt1FRUVIT0/nuTNRPbCTlnSeq6srnnvuOchkMty7dw93795FaWlpje87ffo0CgoKsGDBAhgaGmLQoEEYOXIkQkNDq31Peno6OnXqpM7wiYiICGUXXD/44ANYW1vDysoKH330EX744Yca31daWordu3fj448/RsuWLdGlSxf4+Pg0QsRERETNw3vvvQe5XI727dvjnXfewY4dOwCU5e53330XHTt2hImJCVauXIkdO3agpKQEmZmZKCkp4fkzUR2wk5Z0nrGxMQICApCVlYW0tDS0adMGixcvrvF9RUVFGDlyJLy8vJCVlYX169fDx8cHV69erfY9wcHB6NatG3JycrBnzx51fgwiIqJm7ZNPPsGZM2dw4cIFXLx4EefOncMnn3xSq/fOnDkTFhYWSEtLw5YtW7B9+3bcv39fwxETERE1D3v37sXZs2dx/vx57N+/H8HBwQCAjRs3YsuWLThx4gQSEhJw7949zJo1C0BZKYMVK1bg1KlTyMnJQb9+/aT8CEQ6QQ9lxWmJiIiIiJqEgIAA2NnZYeLEiVKHQkRERERUKxxJS0REREQ6rUuXLujRowcAoE+fPvDz8+MdL0RERESkUwylDoCIiIiIqCHMzMywfft2tGvXDunp6Vi9ejX27t0rdVhERERERLXGcgdEREREREREREREEmK5AyIiIiIiIiIiIiIJsZOWiIiIiIiIiIiISELspCUiIiIiIiIiIiKSEDtpiYiIiIiIiIiIiCTETloiIiIiIiIiIiIiCbGTloiIiIiIiIiIiEhC7KQlIiIiIiIiIiIikhA7aYmIiIiIiIiIiIgkxE5aIiIiIiIiIiIiIgmxk5aIiIiIiIiIiIhIQuykJSIiIiIiIiIiIpIQO2mJiIiIiIiIiIiIJMROWiIiIiIiIiIiIiIJsZOWiIiIiIiIiIiISELspCUiIiIiIiIiIiKSEDtpiYiIiIiIiIiIiCTETloiIiIiIiIiIiIiCbGTloiIiIiIiIiIiEhC7KQlIiIiIiIiIiIikhA7aYmIiIiIiIiIiIgkxE5aIiIiIiIiIiIiIgmxk5aIiIiIiIiIiIhIQuykJSIiIiIiIiIiIpIQO2mJiIiIiIiIiIiIJMROWiIiIiIiIiIiIiIJsZOWiIiIiIiIiIiISELspCUiIiIiIiIiIiKSEDtpiYiIiIiIiIiIiCTETloiqsDV1RVRUVFQKpWYNWuW1OFQNUJCQrB8+fIal2vRogXCwsKQm5uLnTt3NkJkRERUHeZY3cAcS0Ske5hjdQNz7KM1qU7ahIQEeHp6Vpo+aNAgJCUlSRARPYzHSPstWLAAx48fh7m5Ob7++mu1rXfw4MGIjY3FnTt3cOzYMXTo0KHaZZ988kmcPn0aSqUS0dHRGDBgQIX548ePx82bN5Gfn489e/bA0tJSbXE2NWPGjIGtrS2srKwwduzYRy5b2/3q4uKCn3/+GRkZGbh9+zYOHToEV1fXCsvMmTMHqampUCgUCA4OhkwmU9tnosbHv93aj8dINzDHNi3MsaQO/Put/XiMdANzbNPSXHNsk+qklZqlpSV2796N/Px83Lx5E+PHj6922fnz5+PixYtQKpW4ceMG5s+fX2G+o6Mjjh07hjt37iA2NrbKpEA1c3d3x5kzZ3Dnzh2cOXMG7u7uVS4nk8mwYcMG3Lx5E0qlElFRURg+fHiFZeryx1mXOTo64tKlS1XO09ev358MKysr7N69Gx9++CFat26NM2fOYMeOHVUua2lpiX379uHzzz+HXC7HqlWrsG/fPsjlcgBAt27d8N133+GNN96Ara0tCgoKsH79+nrF1Rw4OjoiLi4OJSUlj1yuLvtVLpcjLCwMXbp0ga2tLf766y/s3btXNX/o0KFYtGgRPD094ejoiE6dOmHp0qVq/VzUvNQlv86ZMwfXr1+HQqFASkoKvvjiCxgYGKjmM7+qB/Nr/TDHNi3MsdQU8BxW+zDH1g9zbNPSnHOsaCotISFBeHp6Vpo+aNAgkZSUpPHtb9u2TYSGhgoTExMxYMAAkZubK7p161blsu+9957w8PAQBgYGwtXVVdy8eVP85z//Uc3/448/xOrVq0WLFi3EK6+8InJycoS1tbXk+1iXjpGRkZG4efOmmDNnjpDJZGLWrFni5s2bwsjIqNKyrVq1Ev7+/sLR0VHo6emJESNGCKVSKRwdHQUAYWVlJXJzc8WYMWOEsbGxWLVqlYiIiJB8f6q7HT16VBQXF4u7d++KvLw8sXXrVrF+/Xqxf/9+kZ+fLzw9PUWvXr3E2bNnhVKpFKGhoWL79u1i+fLlj1zv5MmTxalTpyrs74KCAtGlS5dKy44YMULExMRUmHb16lXx5ptvCgBixYoVYuvWrap5nTp1Evfv3xempqaS7z9Ntur2e/l3Z/HixSIzM1MkJCSICRMmCADi448/Fvfv3xeFhYUiLy9PtQ+rag3Zr5aWlkIIIVq3bi0AiK1bt4oVK1ao5g8ePFikpqZKvg/Z6t90Kb926tRJWFhYCKDsd/Po0aPi3XffVc1nfm14Y36tX2OO1d7GHMsmZdOlHMtzWM0fI+bY+jXmWO1tzLF1btIfNHW1hIQEMW/ePBEdHS1yc3NFaGioMDY2Vh38uXPnivT0dHHr1i0xceJE1ftCQkLEunXrxIEDB0ReXp74/fffha2trVizZo3Izs4WsbGxolevXo/cdqtWrcT9+/eFi4uLatrmzZvFp59+WqvY165dK7766isBQLi4uIh79+5V+KU6ceKEePvttyXfx5o+Rg8uN3/+fBEdHS3y8/PFhg0bRJs2bcSBAweEUqkU4eHhQi6XP3JbQ4YMEcnJyRWmJSYmimHDhtUq1ujoaPHKK68IoG5/nHW9HT9+XPj5+Qmg7LuRm5srnnrqKaGnpyfMzMxU/zQYGhqK0aNHi8LCwhqT25dffinWr19fYdrFixdV+/fBNmLECHHp0qUK0+Li4sQXX3whAIiff/5ZLFiwoML8vLw80bt3b8n3nabag/+sPbzfBw0aJIqKisTq1auFTCYTzzzzjMjPzxeurq4CgPD39xdbtmypcRsN2a/e3t7i1q1bqtfnz58XY8eOVb22srKqkPzYdK/pan5t3bq1CA8PF+vWrRMA82v5csyv0jXmWO1rzLFsUjddzbEAz2GZY7WrMcdqX2OOrXtrcuUOxo4di+HDh8PJyQk9e/bExIkTAQB2dnawsLCAvb09/Pz8sG7dOtWw8/L3ffDBB7C2tsb9+/cRERGBc+fOwdraGj/99BO++OKLR27X1dUVxcXFiI+PV02Ljo5G9+7daxX3008/rRqa3717d9y4cQP5+fn1Wpe2q+4YPWz06NEYMmQIXF1dMXLkSBw8eBBLliyBjY0N9PX1MXv27Edup3v37rhw4UKFaRcuXKjVfmzTpg1cXV0rHJPo6GjV/IKCAly/fr3JHJNH2bt3L/744w8IIdCrVy8YGRnhyy+/RHFxMXbt2oXIyMga12FqagqFQlFhmkKhgJmZWaVlIyIi0K5dO4wbNw6Ghobw8fGBs7MzWrVqVed1NRX9+/evcb9/+OGHKCwsxIkTJ7B///4a6/Y8rL771d7eHuvWrcPcuXOrXVf5z035GDUHupRfx48fD4VCgdu3b8Pd3R3fffcdAObXcsyv2oM5VnrMsaQNdCnHPojnsJUxx2oP5ljpMcfWXZPrpP3qq6+QmpqKnJwc7Nu3D7169QIAFBUVYdmyZSguLsbBgweRn5+PLl26qN63Z88enDt3Dvfv38eePXtw7949bNmyBaWlpdixYwc8PDweuV1TU1MolcoK02r7hfv444+hr6+PkJAQ1bqa8pe3umP0sK+//hoZGRm4desWTp48idOnT+P8+fOqY1SbY1Kf/WhoaIitW7di06ZNuHr1aoPW1RQ8WAy/Xbt2SElJqTA/MTGxxnXk5+fD3Ny8wjRzc3Pk5eVVWjY7Oxve3t6YO3cu0tPTMXz4cPz6669ITk6u87qaipr2e05ODgoKCirMa9euXZ22UZ/9am1tjSNHjmD9+vUIDQ2tdl3lPzflY9Qc6FJ+3b59OywsLODi4oJvv/0W6enpqnU15b/lzK+6hzlWesyxpA10KceW4zksc6y2Y46VHnNs3TW5Ttq0tDTVzwUFBTA1NQUA3L59u0LB4QfnAVCdwAHA3bt3K71+cNmq1PcLN2PGDPj4+GDEiBEoLCxs0Lp0RXXH6GFSHBM9PT1s2bIFhYWFmDlzZoPW1VQIIVQ/p6amwt7evsL82hSfv3TpUoWC961atYKzs3O1hd1PnDiBvn37wsrKCm+88QYee+wx/PXXX1Wuy8nJCcbGxoiLi6vT59IlNe13S0tL1RXa8nm3bt2q0zbqul/lcjmOHDmCsLAwrFy58pHrcnd3R1paGrKzs+sUE2kXXcuvAHDt2jVcunRJ9fCApv63nPlV9zDHSo85lrSBruVYnsMyx+oC5ljpMcfWXZPrpJVKXFwcDA0N0blzZ9U0d3f3ar+8ADBp0iTVk+MevLpw6dIldOrUqcIf8JrWRZVdunQJPXv2rDCtZ8+ej9yPwcHBsLW1xejRo1FcXFxhXXX549xURUREoLi4GLNnz4ahoSFefvll9O3bt8b37dmzB25ubnjllVdgbGyMjz76CBcuXFBd5X1Yr169YGhoCDMzM/z3v/9FUlISjhw5AgDYunUrRo4ciYEDB6JVq1ZYtmyZ6om0TVVt9vvSpUthZGSEgQMH4sUXX8SPP/5Yp23UZb+amZnh8OHDOHXqFBYvXlxp/ubNm+Hn54euXbvCwsICH3zwAb7//vs6xUNUrj759UGGhoZwdnYGwPyqLsyvmsEcKw3mWGrOeA6rfZhjNYM5VhrMsXXHTlo1KSgowO7du7Fs2TK0atUKTz31FLy9vbFly5Yql58wYQJWrlyJIUOGICEhocK8+Ph4nD9/Hv7+/jA2NsaoUaPQs2dP7Nq1qzE+SpPx22+/oaSkBLNnz4ZMJsOMGTMAAMeOHaty+cDAQHTt2hUjR47EvXv3Ksyr6x/npqqoqAivvPIKJk6ciOzsbPznP//B7t27a3xfVlYWRo8ejRUrViAnJwf9+vXDuHHjVPMDAwMRGBioer1gwQJkZWUhKSkJbdu2xcsvv6yad/nyZUydOhVbt25FRkYGzMzMMH36dPV+UC1T035PS0tDTk4Obt26ha1bt2Lq1Kl1/t2sab8eOHBAlcjKk+ukSZOQl5enag4ODgCAw4cPY9WqVTh+/Dj+/vtvJCYmwt/fXw17gpqjuuZXPz8/2NjYAAC6du2KxYsX4+jRowCYX9WF+VUzmGOlwRxLzRnPYbUPc6xmMMdKgzm2fiR/4pu6WkJCgvD09FS9Ln8a3MNPXXx42ZCQkApP9fPz8xPHjx9XvXZ2dhZFRUU1bt/S0lLs2bNH5Ofni8TERDF+/HjVvIEDB4q8vDzV6xs3bojCwkKRl5enaoGBgar5jo6O4vjx46KgoEBcuXKlwufS5VbbY/Twclu2bBH+/v4VjlF4eHiN2+vVq5c4c+aMKCgoEGfPnq3whNPFixeLAwcOCACiQ4cOQggh7t69W+GYTJgwQbW8p6eniI2NFQUFBeL48ePC0dFR8v2pDe3h7w9b47aq/r6xsam76VJ+3bhxo0hLSxP5+fkiISFBrFq1ShgbG6vmM78yv+pSY46VtjHHsjVG06Ucy3PYRx8j5ljdasyx0jbm2Kqb3j8/EBHVS0hICJKTk/Hhhx9KHUqzNGjQIPzwww+qq39ERNR0MMdKizmWiKjpYo6VFnNs1VjugIjUYvHixRVuGShvBw4ckDo0+kdgYGCVx+jBW3SIiEj7MMdqP+ZYIiLdxByr/ZpTjuVI2jpwcHDA5cuXq5zXrVs3JCUlNXJENGHCBHz33XeVpicmJsLNzU2CiEiXBAcH48UXX0RGRgZ69OgBAFi1ahVGjhyJwsJCXL9+HZMmTYJCoYCjoyNiY2NVNXL+/PNPTJs2TcrwiZoM5lftw/xKRNQ0MMdqH+ZYIqoOO2mJqNl6+umnkZ+fj82bN6s6aYcMGYJjx46hpKQEAQEBAIBFixbB0dERv/zyi2o5IiIiIiIiIiJ1MZQ6gIdlZGQgMTFR6jCaHEdHR7Rp06ZB6+Cx0QweG2nJZDI4OzsjMjKy0jwXFxf88ssvDVo/j436qeM701zx91Ez+HdcO6nrbwWPjfrxO6O9mGPrj7+T6se/442jR48eKCkpAQAIIRAbGwsDAwM4OztDJpOp7jAsX8bBwQHW1ta4dOkSJk6ciKioKACAj48PPvjgAwDAJ598gs2bNz9yuzwumsEcq71qe2wkf3rZgy0yMlLyGJpiU8d+5bHhsWmKzdHRUVy8eLHKeTk5OeK1115TLZefny/OnTsnfvvtNzFw4MBq1zl58mQRGRkpIiMjRUJCguSfsak1/r5z32lb499x7Wzq2qc8Ntp5bHhctPfYNNfGfae9+5TH5tEtISFBWFlZVZj22WefiYULFwoAYuHChSIgIEAAEF5eXuLAgQMiMjJS9OvXT/z5558CgLC0tBTXr18XlpaWQi6Xi+vXrwu5XM7jIkFjjtXeVpv9ygeHERFVYcmSJRBCYOvWrQCA1NRUdOjQAb1798bcuXOxbds2mJmZVfneoKAg9OnTB3369EFWVlZjhk1ERERERNQg3t7e2LRpEwBg06ZNGDVqlGp6+QjZ06dPQy6Xw87ODsOGDUN4eDhycnKQm5uL8PBwDB8+XLL4iXRVrTpphw0bhitXriA+Ph4LFy6scplXX30Vly5dQkxMjKpTAygb8h4XF4e4uDj4+PioJ2oiLdO+fXscO3ZM9R2YPXs2AMDf3x/JycmIiopCVFQUvLy8VO9ZtGgR4uPj4ebmhqFDh6qm1+b7Rprl6+uLF198EQkJCapphYWFyM7OBgCcO3cO169fh6urq1QhEhERERERNZgQAkeOHMGZM2cwefJkAICtrS3S0tIAAGlpabC1tQUA2NvbV3jYXHJyMuzt7aud/rDJkycjMjISkZGRsLa21uTHItJJNdak1dfXx7p16zBkyBAkJycjMjISYWFhiI2NVS3TuXNnLF68GAMGDEBubi5sbGwAAJaWlvD398cTTzwBIQTOnj2LsLAw5Obm1jpAWcuWKLx7tx4fjajxFBcXY968eYiKioKpqSnOnj2L8PBwAMCaNWuwevXqCst37doV48aNQ/fu3REZGYn169erOvxq+r6RZpi3sYEyIxPDhg3DggULMGjQIBw8eFA139raGtnZ2SgtLYWTkxNcXFxw48aNOm1D39AAetBDSXGxusMnIiLSWuU5VpOMWhij6N59jW6DqLYsbG2gSNfs7zyRugwcOBC3bt2CjY0NwsPDceXKlUrLCCHUsq2goCAEBQUBQJXPBKG6MTQ2hqyFMQoUSo1tQ09PD4bGMubYRlLjSNq+ffvi2rVrSEhIQFFREUJDQ+Ht7V1hmcmTJ2PdunWqztfMzLKE1NAh7wPGj8Gnfx1DS/Oqbykm0hZpaWmqgun5+fmIjY2t8sphOW9vb4SGhqKwsBCFhYW4du0a+vbtW6vvG6nPtm3bEBERgS5duiDp778REPQtvvnmG5iZmSE8PBzdunVDYGAgAOCZZ57BhQsXEBUVhZ9++glTp05FTk5Orbdl6+yEz86eQPfnntbUxyHSGM+3fDHl2zVSh0FEOkbWsiXGfLQQi/aFwqp99f8XNdSwGZPxyR/h0NPT09g2iGqrjZMjFvy8Hc+/PUnqUIhq5datWwDK+nH27NmDvn37Ij09HXZ2dgAAOzs7ZGRkAABSUlLg4OCgem/79u2RkpJS7XTSHLltG8z4fj0mfhmg0e0s2LsdYz9erNFt0L9q7KStzbB1V1dXuLq64vfff0dERASGDRtW6/cC1Q95V2aW1XK0bGtXx49FJB1HR0d4eHjg9OnTAICZM2ciOjoawcHBkMvlABp+mwjAW0XUYcKECfAc9yq+iP4DK4/sRcCH/nBxcUGHDh3g4eGBy5cvY9q0aQCA3bt3w83NDR4eHnj88cfxyy+/1Glb+dk50NfXh7mNlSY+CpFGdfTogS4D+sPEUi51KESkIzq698C8nzaj3+iX8EfobuSmZ6jKQ3Xv3r1CeShLS0scOXIEcXFxOHLkiOr/pdrKz86BoZERTFrzbxRJLzMxCTHHTsBr5hQ8P2Wi1OEQPVKrVq1gamqq+nno0KGIiYlBWFgYfH19AZSVgtu7dy8AICwsTFXGsl+/flAoFEhLS8Phw4cxdOhQyOVyyOVyDB06FIcPH5bmQzUDTh49MWdHCNo4OeJ/m7drdFv52Tkwb2Oj0W3Qv9Ty4DBDQ0O4uLjg2Wefxfjx4xEUFAQLC4tav7+6h+zk3CqrgWLZjp20pBtMTEywa9cuzJkzB3l5eQgMDISzszN69eqF1NTUSmUPGoIPp2q4x0d6YdLaAKReu45vfKciNy1dY9sqyFWguKgI5jZMcKR7zP+5EOTk4S5xJESk7QwMDfHCO9MwY1Mg9PT1sX7SdPyyZh1KiopU5aEuXbqE/v37Y8aMGejatSsWLVqEo0ePwtXVFUePHsWiRYvqtM3y28oteBJJWkCUliL0w09wJuwgvGa9Dc/JvlKHRFQtW1tb/P777zh//jz++usv7N+/H4cPH0ZAQACGDBmCuLg4PP/88wgIKButeeDAAdy4cQNubm4ICgrC9OnTAQA5OTlYvny5ahDRsmXL6nTXIdVe/1dHYWrwN7iXl4+vJryFS8dPanR7yswsWNhwUFhjqbEmbW2GrScnJ+P06dMoLi7GzZs3ERcXBxcXF6SkpODZZ5+t8N7ffvut1sHlpP7TScuRtKQDDA0NsWvXLmzduhV79uwBANVtIUBZp2r56MtHfa94m0jjeMZnHLzfewdxf0bi+3cW4X5BgUa3J4RAXtZtmDPBkQ4ys24NAOj0uDtijv1P4miISFvZuThjwsqPYP+YK07vCsPeVWsr5Ne0tDTVg2geLA/l7e2tOmfYtGkTfvvttzp11CrSy/7fktu2QUpsnPo+EFE9lXfUQg94YfZUAMDRoE0SR0VUWUJCAnr16lVpenZ2Np5//vkq3zNz5kz069cPffr0qTA9JCQEISEhGomTyi6CvrxkHp58dRRif4/ADws+wr28fI1vV5GRia7PDND4dqhMjQQ5HZwAACAASURBVCNpIyMj4eLigo4dO8LIyAjjxo1DWFhYhWV+/vln1T9WVlZWcHV1xY0bNxo85P1OTi4K797jSFrSCcHBwYiNjcWaNf/WbSyv4wMAL7/8MmJiYgCU3SYybtw4yGQyyGQyuLi44K+//qrV940a7oV3psH7vXcQfeQYNkyfp/EO2nLKjCyWOyCdo6evDzOrsk5ap94cSUtElenp6+PZia/h3dCNMLexRvDM97Dz408fmV8fLA9V3VPEa0vxz0PJeDsmPWjYsGG4cuUK4uPjsXDhwkrzfX19kZGRgaioKERFRcHPzw8A4O7ujj/++AMxMTGIjo7G2LFj67V9UVqK0A8+wZl9B/HC7KnwfIsjaomofsysWmNa8Dd48tVROBa8GcEz5jdKBy1QdreKcauWaGFm2ijba+5qHElbUlKCmTNn4vDhwzAwMMDGjRtx+fJlLF26FGfOnMG+fftUnbGXLl1CSUkJ3nvvPWRnZwOAasg7gHoNec9NS+dIWtJ6AwYMgI+Pj+rBUgCwZMkSjB8/Hr169YIQAjdv3sTbb78NALh8+TJ27tyJy5cvw97eHi+//DJKS0sBoMrvG6mHvoEBxny4oKw+3o7d2L1yNcQ/+70xKDKzYOPoUPOCRFrExNIC+gYGyM/Ogf1jrpC1bInCu3elDouItERr+7YYt+JDOD/ugQu//oafln2GOzm5j3yPvr5+hfJQD6vuKeKTJ0/GlClTAKBCPf6829koKS6GhS07aamMvr4+1q1bhyFDhiA5ORmRkZEICwtDbGxsheV27NiBWbNmVZhWUFAAHx8fXLt2DW3btsXZs2dx+PBhKBSKOsdR3lGrp6eHF96ZCiEEjgVvbtBnI6LmxaF7V0xcG4BW5ubYMv8DnD98tFG3X34h1KKNTaN1DDdnNXbSAsDBgwdx8ODBCtP8/f0rvJ43bx7mzZtX6b0NHfKecyuVI2lJ6506darKJwo//L150MqVK7Fy5UpERkbi0KFDFd7zqPdR/RjKZHh91TL08ByEI99uxOF1QY0eQ17WbTg/4dHo2yVqiPJ6tBeP/g9PvjoKHXu5IS4iUuKoiEgb9B31IrwXzYEoFdi2ZBnO7qv5/xdDQ0M4Oztj6dKlqvJQ5U8RT0tLq/AU8YcFBQUhKKgsf5cPAgHKOsLysm5DbttGDZ+KmoK+ffvi2rVrSEhIAACEhobC29u7UidtVeLj41U/p6amIiMjAzY2NvXqpAXKfj+3v78cenp6GDFnGgCBY8Fb6rUuImpeHh/phVf9FyIvKxtfvzEFt67G1/wmNXuwkzb9ekKjb7+5UcuDwzQpOzWNI2mJqEGMTVphcuAX6OE5CHs+/UKSDlqgLMGZyC1gKJNJsn2i+jCzLivRcfHX31BaUgKn3pXrlhFR82JiKcekrz7Df5a/j+RLV7B69Bu16qAFyspD3bt3r0J5qOqeIl4XivRMPjiMVOzt7ZGUlKR6nZycDHt7+0rLjR49GtHR0fjxxx/Rvn37SvP79OkDmUyG69evV7mdyZMnqx6U9ODo7oeJ0lJsW7IM5/Yfxog50zHY7416fCoiai70DQzw0oJ3MGHlR7h5/iK+HDdJkg5aoKxkHwBYtOGzVRpDrUbSSinnVhrMrFrD0NgYxffvSx0OEekYUytLTF6/Bm1dnPHDQn9EHTgiWSx5mbcBAOY2VshOSZUsDqK6KK+jnJn4N1KuxqMT69ISNWvmbWwwbcPXsGxnh72r1uLkDzuqLU/wsPLyUAUFBRXKQwUEBGDnzp3w8/NDYmJivWqAKjIy0aZTxzq/j5qvffv2Yfv27SgsLMSUKVOwadMmeHp6qubb2dlhy5Yt8PX1rfZ3vLrR3VUpH1ELACPmTIcQAsc3/qCmT0NETUUrC3O88d9P4Nq/D05s2YF9X3yN0uISyeJRZJZ10rLue+PQ+pG0OallDxGwbFu3Bwg0B8HBwUhPT8fFixerXWbt2rWIj49Ht27d4OFR8TZrMzMzJCUl4euvv9Z0qESSaG3fFjM3fYc2To7YOPs9STtogQcS3CNGWhBpGzOrsk5aZVY2Es5Gw7GnGwwMtf4ab4MxxxJVJrezxYyQ9TBvY43vJs/GiS2hte6gBf4tD3X58mV4eHjAw8MDBw8eVD1F3NXVFUOGDKnzMyyAsk5ajqSlcikpKXBw+Pc5AO3bt0dKSkqFZbKzs1FYWAgA2LBhAx5//HHVPDMzM+zfvx/vv/8+Tp8+rba4SktKsP395Th34AhefHcGnpv0mtrWrUtqm2Pd3NwQHR3NHEvNhrmNNWb/EAQnj54I/WA59q76UtIOWgAovn8fd3IVzLGNRPs7aW+Vd9Ky5MHDvv/+ewwfPrza+V5eXnBxcYGLiwsSExMRGBhYYf7y5ctx4sQJTYdJJAlrRwfM3PwdTOQW+HbyLFz5/U+pQ4Iys/zp0+ykJd1hbmOFu8o8FN+/jxvnzsOohTEcuneVOiyNY44lqqi1fVtMD1kPE7kFvpvyDhKiLkgdUgWK9Ay0NDOFcatWUodCWiAyMhIuLi7o2LEjjIyMMG7cOISFhVVYxs7u3/PLl156SVWv1sjICHv27MHmzZuxa9cutcdWWlKC7UuWIerAEbw4d2az7KitbY6NiYnBlClTmGOpWTCzao1pwd/AzNoK3741G5F7D0gdkooiI5MP52wkutNJy4eHVXLy5ElkZ2dXO9/b2xubN5c9PfTOnTuQy+Wqf0Z69+4NW1tbHDki7chCIk2Q29liatBX0DcwwLqJ05AYHSN1SAAAparcATtpSXeYWVsh73ZZrkk4Fw0AcHq86Zc8YI4l+peVQ3tMD1mPlmam+HbybPx94ZLUIVWierAJTyIJQElJCWbOnInDhw8jNjYWO3fuxOXLl7F06VKMHDkSADB79mzExMTg/PnzmD17NiZOnAgAGDt2LJ555hlMnDgRUVFRiIqKgru7evNeaUkJtj3QUdtn1Ai1rl/b1SXHnj59mjmWmjzT1paYuuFrWNjaYMP0ubh5XssuhPJulUaj9Z20yswslBQXs5O2HqormK+np4fVq1dj/vz5Na6jtsXwibSFqZUlpgZ9hRYmJgia+i7Srt2QOiSVglwFiouK2ElLFQwbNgxXrlxBfHw8Fi5cWGm+r68vMjIyVCeKfn5+FeZr+pY/c2srKP8p1ZGfnYOMhER04sPDmGOp2Wjj5IgZIethZGyMQL+ZSL58ReqQqqRI//fp00QAcPDgQXTp0gWdO3fGypUrAQD+/v7Yt28fgLJ6yG5ubujVqxcGDx6Mq1evAgC2bt0KmUymKsnh4eGB6OhotcdX3lGbEHUBw2dMbhalhGqLOZaaExO5Bd4O+gqt7dthw4z5WnenClD28DCewzYOre+kLS0pgSIjk+UO1Gj69Ok4cOBApbpMVQkKCkKfPn3Qp08fZGVlNUJ0RPXX0twMU779EuZtbLBhxnykXImTOqQKhBBQZjLB0b/09fWxbt06eHl5oVu3bhg/fjy6dq1cSmDHjh2qE8Xg4OAK8zR9y5+ZtRXysm6rXt84ex4dPXpAT09PY9vUZcyx1JTYOjth2sZ10Dc0QKDfTMmeLF0b5SNp+WAT0iWlJSUI/3Yj5Ha2eOIlL6nD0XrMsdTUtDQ3x9v/9xVsOjhg46z3cONMlNQhVUmRkQkzq9bQNzCQOpQmTycu1+WkprGTth6qK5j/5JNP4umnn8b06dNhamoKmUyG/Px8LF68WMJoiRpG1rIl3lq3GrbOTgieMV/rbhEpl5d5G+Y2VlKHQVqib9++uHbtGhISEgAAoaGh8Pb2VtXFq0n5LX+HDh3CE088oZEYzaxbQ/lgJ+25aPQf4w07l05IjbuukW3qAuZYauraunbG1KCvUFJcjMC3ZiEjIVHqkB6pvJNWbttG4kiI6ubqH6eRdCkWg/18ELn3AEpLpH1IkDZgjqXmoIWZKd7+vy9h69wRG2ctQPzpM1KHVC1FRib0DQxgZt1adecKaYbWj6QFyurSspO27sLCwuDj4wMAMDExgUKhQFpaGl5//XU4OjrCyckJ8+fPx+bNm5nYSKcZymSYtDYAHXp0ww8LPkJcxF9Sh1QtBUfS0gOqu53vYaNHj0Z0dDR+/PFHtG/fHgBqfctfQ273k7VsiRYmJhVG0iacOw8Azb7kAXMsNWXtu3XB9I3rUFxYiPWTpmt9By0AFN27jwKFkjVpSSf9+n+bYN2hPdyHeUodilZ4MMf269ePOZaaHGOTVpgSuAZtXTsjZM4iXP3jdIPXGRwcjPT0dHTv3l01zd/fH8nJyaqyaV5e9Ruxz5JCjUc3OmlT02Bha8Oh1Q/Ztm0bIiIi0KVLFyQlJeHNN9/E22+/jbfffhsAcODAAdy4cQPXrl2Do6Mjpk+fLnHEROqnb2CA11ctg+uTfbHjo5W4+OtvUof0SHlZt5ncqE727duHjh07wt3dHeHh4di0aROA2t/y15Db/cysy0Z9lz/0DgCyU1KRm54Bp95N++FhzLHao3379jh27BguXbqEmJgYzJ49GwBgaWmJI0eOIC4uDkeOHIFcLle9Z+3atXBzc0N0dDQ8PDxU0318fBAXF4e4uDhVBwBV1KFHN0wN+hr38u9g3cRpyPo7WeqQaq3swSa8EEq659LxE0i7dgOeb/k0i3JCtc2xbm5uCAoKYo6lJkXWsiUmr/8C7bs9hs3z3seVkxFqWe/333+P4cOHV5q+Zs0aVdm0gwcP1mvdygx20jYmoU0tMjKy0rR+o18Sqy9GCLmdreTx6Wqrar9KsQ42Hht1Nj09PTF+xUdi9cUIMXDCmDq/Pzg4WKSnp4uLFy+qpllaWoojR46IuLg4oVAohFwuV81bu3atiI+PF9HR0cLDw6Nex8Zzsq9YfTFCGMpkku8/XW1N6fe9f//+4tChQ6rXixYtEosWLap2eX19fZGbmysAiB9++EEkJiaKhIQEkZmZKRQKhfj000/Vuu+ceruL1RcjhOuTfSpMf/2zpeKjX8Mk33/a0vh3XLPNzs5O9TfX1NRUXL16VXTt2lV89tlnYuHChQKAWLhwoQgICBAAhJeXlzhw4ICIjIwU/fr1E3/++acAyv6+X79+XVhaWgq5XC6uX79e4W88jw1Ex149xYqIX8XiAz9q9P9uTX1n3gr8QryzPVjy/ajLrTn9vmvbvuv94jCx+mKEcBv8jOSfRVuaun4f+XutncemOR4XWcsWYnrIerEq6qTo8fyzal+/o6OjKCgoUL329/cX8+bNa/CxMW1tWe9zbrbq92tVTTdG0t5KAwBYtmPJAyL616hF7+KJl7xw8Ovv8Pu2n+r8/qquNi5atAhHjx6Fq6srlEolFi1aBADw8vKCi4sLXFxcMGXKFAQGBtYrZmVm2UhG1qUlAIiMjISLiws6duwIIyMjjBs3DmFhYRWWsbP7N/e99NJLqnq1jXHLX1UjaYGyurQWtjawal+5NAORuqWlpSEqquxBGvn5+YiNjYW9vT28vb1VI8s3bdqEUaNGAQC8vb2xefNmAMDp06chl8thZ2eHYcOGITw8HDk5OcjNzUV4eHiVI06aK6fe7pjy3RooM7OwbuJ05KalSx1SnSnTM1mTlnTW+YO/IispGZ6TfaUOhYg0wKiFMd786nM4efTEtkUfN9odoDNnzkR0dDSCg4Mr3HX0sEeVSLuTk4vioiKY23AkrabpRCdt+T+J7KQlonLDZ03BwAmv4rfvt+HX//u+Xus4efIksrOzK0x78KT/9u3bNZ7011V5Z5d5HWuDUtNUUlKCmTNn4vDhw4iNjcXOnTtx+fJlLF26FCNHjgQAzJ49GzExMTh//jxmz56NiRMnNlp85v900j5YkxYAbpz9py7t40275AFpH0dHR3h4eOD06dOwtbVFWlrZhfy0tDTY2toCqL7Wc21rQAMNq+Wsiyzb2WHSlwHITcvA+knTVbc16hpFRiZMrVpD35Al0kj3lJaU4PjGH9DBrRtcn+wrdTjUzOjr6+PcuXPYt28fAKBjx474888/ER8fj9DQUBgZGQEAZDIZQkND4ebmhj///BOOjo6qdSxatAjx8fG4cuUKhg4dKsnn0FaGMhkmfRkA5769sf2D5Th/+GijbDcwMBDOzs7o1asXUlNTsXr16mqXfVSJNCEElJlZLHfQCHSikzYn9Z+RtHx4GBEBeHbiaxgyZRIifvoZ+1Z/rdZ1P3jSX1RUVONJf1UedXKvzCw78TVnzTz6x8GDB9GlSxd07twZK1euBFBW5L/8n+QlS5bAzc0NvXr1wuDBg3H16tVK69i0aRNmzZql9tjMrK1QXFSEAoWywvT06wkoUCjh1MwfHkaNy8TEBLt27cKcOXOQl5dXab4QQm3bakgtZ11jaGwM3zWfQt/AABtnvYe829k1v0lLKTIyoa+vD3Mr3q1Cuily7wHkpmfg+SkTpQ6Fmpl33nlHdbcWAHz22WdYs2YNXFxckJOTAz8/PwCAn58fcnJyEBMTgzVr1uCzzz4DAHTt2hXjxo1D9+7dMXz4cKxfvx76+jrR3aRxevr68Fm9Al0G9MfOj1bg3C+HG23bGRkZKC0thRACQUFB6Nu3/heAlBnspG0MOvGtKbp3H3m3s9lJS1qNDzZpHP3HeGPkvJmIOhiOXcs/1/j26nPS/6iTe2VGebkDdtKS9jO3sUL+7exK3wMhBBLORaNTE394GGkPQ0ND7Nq1C1u3bsWePXsAAOnp6ao7Guzs7JCRkQEASElJgYODg+q97du3R0pKSrXTm7vRH8yHQ7fHsHXxUp16SFhVctPLfgfMbXkSSbqppKgIv32/Dc5PeMDJo6fU4VAzYW9vjxEjRmDDhg2qaYMHD8ZPP5WVk3u4pFD5XYc//fQTPD09VdNDQ0NRWFiImzdv4tq1aw3qEGxKBvmMR/dnB2L3ytWI3HugUbf94J2fL7/8MmJiYuq9LkVGJiyYXzVOJzppgbLRtOykJW1WXFyMefPmoXv37ujfvz9mzJiBrl27VqhxevTo0Uo1TmNiYirUOLW0tIS/vz/69euHvn37wt/f/5G1Y5oT1yf7YPSHC3D5xClsX7IMorRU7dt48KTfyMioxpP+urqTq/inng87aUn7mVlbVapHW+7GuWjYdOwAM6vWjRwVNUfBwcGIjY3FmjVrVNPCwsLg61tWu9HX1xd79+5VTS+/wNmvXz8oFAqkpaXh8OHDGDp0KORyOeRyOYYOHYrDhxtvNIs2evLVl9F31Is4EhiM2BOnpA6nwRTpZXersC4t6bLTu/YiPzsHnhxNS43kyy+/xIIFC1D6z7mVlZUVcnNzUVJSAqDiHYQP3l1YUlIChUIBKyurWt912NzKCbV17Qyv2W/jwq+/4dT2uj9DpS62bduGiIgIGBsbIykpCW+++SZWrVqFCxcuIDo6Gs899xzefffdeq9fkZ7Ju0Ebge500t5KY01a0mp8sIlmyVq2wJiPFiErMQmb5r6PkuJijWznwZN+KyurGk/660OZmcVOWtIJ5tZWlerRlrtxrqwurRNH05KGDRgwAD4+Phg8eDCioqIQFRUFLy8vBAQEYMiQIYiLi8Pzzz+PgIAAAMCBAwdw48YNuLm5ISgoCNOnTwcA5OTkYPny5aqTw2XLliEnJ0fKjyYpR3c3jFr8Li6fOIUjgcFSh6MW5bV0eTsm6bLCu/dwYssOdB34JOy7ukodDjVxI0aMQEZGBs6dO9co22tW5YRkMrwW8DEKchX4aWmAxrc3YcIEtGvXDufOnYODgwM2btwIHx8f9OzZE+7u7vD29q73+StQVravhYkJjFu1UmPU9DBDqQOorZzUNHR9+impwyCqlcZ4sMnkyZMxZcoUAGgWVyGHTvWDVft2WDdpOorv31fLOrdt24Znn30W1tbWSEpKgr+/PwICArBz5074+fnB3Ny8wkn/Cy+8gGvXrqGgoACTJk2q93bzMm/DglchSQeYWVvh75jLVc5LuXwVhXfvwam3Oy6EH2/kyKg5OXXqFPT09Kqc9/zzz1c5febMmejXrx/69OlTYXpISAhCQkLUHqOuMbNqDd/VK5Gblo5ti5eqtZ6vlO7kKlB0/z47aUnnnQr9Cc9Neg2eb/li87z3pQ6HmrABAwbgpZdewgsvvIAWLVrA3Nwca9euhVwuh4GBAUpKSircQfjg3YUGBgawsLDA7du3WVKoCl6z30ZbF2cETXsXd3IVUofTYIryC6G2NshISJQ4mqZLZ0bS5qamQ9ayBUwseds3abfGerBJc7oK2a6LC57xGYc/f9qLG2ei1Lbe8quNMplMdbUxOzsbzz//PFxdXREXF1dhlNXMmTPRuXNn9OzZE2fPnq33dhWZWTCz5kNNSLvpGxjAtLUl8qopd1BSXIzECzHoxIeHEekUfUMDvPHfT9DS3Azfz1mEu8rK/6voMkVGJizsWO6AdNu9/Dv4PfQn9Hj+WbRxcpQ6HGrClixZAgcHBzg5OWHcuHE4duwYXn/9dRw/fhxjxowBULmkUPldh2PGjMGxY8dU08eNGweZTIaOHTvCxcUFf/31lzQfSgt07vs4nvWdgFOhu3Dl9z+lDkctyksK8UKoZulMJ21OatlIRNalJW3GB5uon56+Pl79eBEKFEr8smad1OGohTKTT8Yk7WdiKYe+vj6U1ZQ7AICEc9Fo16UzWpiaNGJkRNQQL86dCecnPLDz40+RGndd6nDUTpGRyRxLTcLJLTtQdO8+PN/ylToUaoYWLlyIuXPnIj4+HlZWVggOLiuLExwcDCsrK7i5uWHu3Lmq561cvnwZO3fuxOXLl3Ho0CHMmDFDVeO2uWlhZorxKz5ERkIi9q3+Wupw1KZ8JK05c6xG6U4n7a1/OmlZl5a0GB9son4Dxo1GB7du+DlgTZMZ7aPMzEIrC3MYymRSh0JULXObstHe1dWkBYAbZ89D38AAHXv1aKywiKgBPLyGYNAb43Biyw5EHTgidTgaoUxnJy01DXdyFfjzp5/h8cIQtG7fTupwqBn43//+h5EjRwIAEhIS0K9fP7i4uGDs2LEoLCwEANy/fx9jx45FTEwM+vXrh4SEBNX7V65cic6dO+Oxxx7DoUOHJPkM2mD0+/NhZmWFbYuXouieesr0aQNlZtndu8yxmqUznbTZtziSlrQbH2yifnI7W7zwzlTE/h6B84d+lToctSlPcOWdYETaqLwkx6NG0iZeiEFJUTGcWPKASOu1dXXG2KVLcP1sFPZ90XRG9jxMkcG7Vajp+O37bRClpXhu0utSh0JEtdBr+PPoPWIYjny3EUmXYqUOR60K797DXWUen62iYTrz4LC7SiXu3bnDTlrSWnywifq9smQeAD3s/uRzqUNRK2VGeSetDbJTUiWOhqhq5v88kLC6mrRA2T9rybFX0am3e2OFRUT10MLMFBPXBOCuMg9b5n2A0uISqUPSmNz0DBi1MEYrC3MUKJRSh0PUIMrMLPz18370HTUC4d+FQPnP7cZEpH0sbG0w+sP3cDP6Io5t2Cx1OBqhyMhkuQMN05mRtEBZyQOWOyBqHno8/yy6P/c0jqzf0OQ6MpVZHElL2s/MujUAIO929iOXSzgXjQ49urF8B5GW0tPTw2uffgx5W1tsmrekxu+0pgUHB8Pd3R0XL15UTfP390dycnKFO5Hq68GnTxM1Bcc3boGevj6e9R0vdShEVA09PT2M++RDGBgaYtviZSgtaZoXQ1n3XfN0q5M2NY0jaYmagRamJnh58VykxMbhxA87pA5H7f4dSctbRUh7mdtYo0ChRPE/Nciqc+PceRjKZHBw69pIkRFRXQx5exK6DRqAnwPWIDE6Rupw8P333yM+Pr7S9DVr1sDDwwMeHh44ePBgvdev5NOnqYnJTklF1IFw9B8zCiZyC6nDIaIqDHxtLFz798HeVWtxOylZ6nA0RpGRyYugGqZTnbS5qekcSfuA4OBgpKenVxiJ8LC1a9ciPj4e3bp1g4eHBwDA3d0df/zxB2JiYhAdHY2xY8c2VshEtfLCO9NgZtUaOz/+tElehbyTq0BxURHr+ZBWM7Nq/ch6tOUSzkUDADo1sbq0zLHUFHR9+ikMmzEZf/38CyJ27pE6HADAyZMnUVxcrLH156ZnAGAnLTUtRzdsglELYzz9xn+kDqXBmF+pqbF1dsKIOdMQc/wETu8KkzocjVJkZMLMqjX09HWqK1Gn6NSezUlNg4ncArKWLaUORSt8//33GD58eLXzvby84OLiAhcXFyQmJiIwMBAAUFBQAB8fH7i5uWH48OH48ssvYWHBq7KkHTq698CAcaNxctuPSL58RepwNEaZmQUza3bSkvYyt7F+ZD3acgUKJdKu3YDT402rLi1zLOm6FqYmGLtsCVJi47Drk/9KHU6NZs6ciejoaAQHB0Mul1e5zOTJk1UPVrWuJocqs7JQWloKC9s2mgyXqFFlJCTi4q+/YeC4MWhhaqKarqevD9PWlrDt1BGdHu+FHp6D0P/VUfCc7IuXFrwDt8HPSBh11ZhfqSkxMDTEa59+jHv5d/DjxwFSh6NxivRMGBgawsyqtdShNFk68+AwoKwmLQBYtrND+vUEiaOR3smTJ+Ho6FjtfG9vb2zeXFaw+s6dO5DL5bCzs6twi1lqaioyMjJgY2MDhUKh8ZiJHsXA0BBj/BciJzUNh77+P6nD0ShlZhZH0hKGDRuGtWvXwsDAABs2bMBnn31WYb6vry8+//xzpKSkAAC++eYbVT3HwMBAmJubo6SkBCtWrMDOnTvVGpuZdWv8feFSrZa9cfY8eo8YBj19fYjSUrXGIRXmWNJ1Q95+E6atLRE8Yx6K79+XOpxHCgwMxPLlyyGEwPLly7F69Wr4+flVWi4oKAhBQUEAgMjIyCrXVVpcgvzsHI6kpSbnaNAmuA8djHe2BQMATCzlaGluBv1qRrQVFxbi6QmvImjau4iLqPr7IgXmV2pKhs+cDPuurgie+R7ys3OkDkfjlJn/1Q8vIAAAIABJREFUlu0r/5nUS7dG0pZ30ra1lTgS3WBvb4+kpCTV6+TkZNjb21dYpk+fPpDJZLh+/Xpjh0dUybOTXkNbF2fsXrEahXfvSh2ORikzb8PMmg8Oa8709fWxbt06eHl5oVu3bhg/fjy6dq1c13XHjh2qOo3BwWUnZo0xmsTc2hrKWoykBYAb56LRwtQE7bp0VmsM2ow5lrRZGydHPP3aWJzeHYbky1elDqdGGRkZKC0thRACQUFB6Nu3b4PWx5p5BJRdCL1y5Qri4+OxcOHCSvN9fX2RkZGhemDdgxcGfHx8EBcXh7i4OPj4+DRm2NVKuRKH4xt/gCI9EylX4hB1MBzh327E7pWrsWX+B/j2rVn47+g3sNTzJSx8fBA+HDgc6Tdu4vVVy9Havq3U4dca8yvpCqfe7nh20uuI+OlnXP7f71KH0ygU6Xw4p6bp1Eja7NTyTlrdSTLazM7ODlu2bIGvry+EEFUuM3nyZEyZMgUAqr2tjEgdrDu0x5C3JyH6yLFmkeSUmVno3Ke31GGQhPr27Ytr164hIaHszpDQ0FB4e3sjNja2xvdqejSJsUkryFq2QF4tatICQMLZ8wDK6tKmxMapJQZdxxxLUhq1cA4K797Fwa++kzqUWrGzs0NaWtn/+S+//DJiYhr2gDNFegZat+P5QnNWfiF0yJAhSE5ORmRkJMLCwirl2B07dmDWrFkVpllaWsLf3x9PPPEEhBA4e/YswsLCkJub25gfoUq/rFlXp+VD3lmEOaHBmPhlAL5+YwqK7mn3qPraqE1+BZhjSbOMWhhj/IqPcDspBWGrvpI6nEajyODDOTWtViNpG3IVsri4WDV97969DQo2LzMLxUVFfHhYLaWkpMDBwUH1un379qpbZs3MzLB//368//77OH36dLXrCAoKQp8+fdCnTx9kZXE4O2nOmI8Wovh+IfZ8+oXUoTQKZWYWWlmYw9DYWOpQSCK1GSkCAKNHj0Z0dDR+/PFHtG/fvtL8mkaT1KaG48PMbcqWU9by735uegayU1Lh1Ltp1aV9FOZY0lbdn3saXQb0x6F1QbiTI32n0sO2bduGxx57DF26dEFSUhLefPNNrFq1ChcuXEB0dDSee+45vPvuuw3ahiI9kzVpm7kHL4QWFRWpLoTWxrBhwxAeHo6cnBzk5uYiPDz8kTVUtdntpGRsXeiPtq6d8ar/IqnDqRV15FeAOZY0a8B/RsOqfTvs9F/Z5O8AfVB+dg5KiovZSatBNXbSNuR2TAC4e/euanptE2N1hBDITUtnJ20thYWFqW7PMTExgUKhQFpaGoyMjLBnzx5s3rwZu3btkjhKIuCJl16AS78nsP/LwFqP3NN1qno+1iy6TtXbt28fOnbsCHd3d4SHh2PTpk0V5pePJpk0aVK1o0nqc5JSXoojLyu71rHeOHcenR7vVevldR1zLGkjQ5kM3gveQWr8dfyxc7fU4VRpwoQJuHDhAmQyGRwcHLBx40b4+PigZ8+ecHd3h7e3t2pUbX0pMjJhIrfghdBmrCEXQmv7XqB+F0Ib25Xf/8Shb/4Pj784HE+//h+pw6kR8ytpO1nLlnjuzddx5fc/ceOfu8maC1Fairys2yx3oEE1dtI25CqkJuSmpsOyLTtpgbKRCBH/z96dx0VVrw8c/7Ary8gqKJorqIQLIeCWu6CVoliKVGp51a5xbbF+mXfhpjfTNtu0uojbzV1TMUXErdzQURFEULBQQdmXGUQFgfn9gYySICADZ4b5vl8vXsmZc+Y8g3a+nO95vs9z8mSVTITZs2cze/ZsAPbu3csff/zBlStX6NChA3PmzAFg0qRJDB48mOnTp6uznHv31p/sJ0G7WNhYM+79uaTExBG9bafU4TQZZVZl0XUxwOmrx2WKVMrLy6OkpASAlStX4unpqX6tPtkk9SW7P0lbn4YAKedisbKzxb5D+9p31gFijBV00ZBpU7Br58yupV9RXlomdTiSUVYux3TQzkkzQTvU9iC0LnQlW/PQynXEHTjC2HnBdJG43JYYXwVdNyjoRSxtbYhcESp1KJJQZOWoV90JmldrTdrqniT6+Pg8st/EiRMZPHgwSUlJvPPOO6SlpQHQokUL5HI5paWlLFmypNqSB/WpF5OfnoFLP6/awtYLQUFBte4THBwMVHTAPXv2LADr169n/fr1jRqbINTV8NdfpYWlBVs/WvLYulLNTeUycpmDaB6mr+RyOS4uLnTs2JEbN24QGBj4yHX94TqN48aNU9fSa+xskspMWmV9Mmkfqkubcy21lr21nxhjBV1j7diaEX+ZRuz+QySfOiN1OJIqeKixSW7ajVr2Fpqjuj4IrbRy5Uo+/fRT9bFDhw6tcuyRI0caNd7GplKp2PSPRby1IYypn/+HZZNfoyAjU5JYxPgq6DIzC3OGTn+ZhN+Oc/1CgtThSEKRlU3rjk9JHUazVaeatLV53FPIDh064OXlRVBQEF999RWdO3d+5Pj6PIHMv5mBzMEeI2Od6nkmCEI1zCzM8Zk4jtj9h8j8PUXqcNRcXV2JiYnBzc2NmJgYFAoFb731FiEhIaSlpamf3o8ZM+aJz/Egk1Y8hdRXZWVlBAcHExkZSWJiIlu2bCEhIYGPPvqIsWPHAjB37lzi4+M5f/48c+fOZfr06UDjZ5PI7G0pLSnhjlJZ52OyUq5xKy+fzp4iq0XQrLCwMDIzM7lw4YJ62+Oux/Pnzyc5ORl3d3d8fX3V22vrsaDrXnj3TQwNDdn9xbdShyI5RWYWgKhLq8cefhBqYmJCYGAg4eHhVfZxcnqwOvPhB6GRkZH4+vpibW2NtbU1vr6+REZGNmn8jaG46Dar3/oAY1NTpn/1iSgHIghPYFDQS1hYtyJy+UqpQ5GMMitb1KRtRLVO0jZ0OebNmzcBSElJ4ciRI3h4eDQo4PybGRgaGooaGILQDPhMHEdLK0t+XbtB6lCqSEpKwsPDg4SEBDw9Pbl9+zY7duwAYNmyZeo62xEREU98jqICBaX37tGqtZik1WcRERF069aNrl27snjxYqBi8mn37t0ALFiwAHd3d/r06cPw4cO5fPkyUJFNYmpqqv636OHhQWxsrMbisrK3R/kE9aH/OBerV83DhKaxZs2aapv2VHc97tGjB4GBgTz99NMkJSWxYsUKDA0N69xjQVd19uyDx3O+HFr1P/JvNqyea3Mguk8LDXkQmp+fz6JFi9S1ZhcuXEh+fr6En0Zzsq9eZ8OH/6b90z148Z/vSx2OIOiUFpYWDJ0eRPzh30hLuCR1OJJRZGXTUmaFacsWUofSLNU6SduQp5DW1taYmpoCYGdnx8CBA0lIaFhKeH56xS+eoi6tIOg2Q2MjBr8ymSvyc6QlXJY6nBqNGDGC33//nevXr2v8vZXZOVhpaZMJQb/J7G0pzK7/JG3KuVjs27dDJiZGBA06evRolWXJj+Pv78+mTZsoKSmhpKSEK1eu4O3trXU9FjTJ0MiICR++S97NdA6v/knqcLRCcdFt7hYViUlaPfekD0IBVq9ejYuLCy4uLqxZs0aK8BvNxSPHiFyxEi//5xkYOFHqcASJmZmZcerUKc6fP098fDz//ve/AejYsSPR0dEkJyezadMmTExMADA1NWXTpk24u7sTHR1Nhw4d1O9VuZLl0qVLVVayNBeDX5mMuUzG/hVhUociKcX9kkLi9/3GUeskbUOeQvbo0YMzZ85w/vx5Dh8+zJIlS9QTuE8q7352gE3bNg16H0EQpNV71HBs2jjx69qNUofyWIGBgWzc+CDG4OBgYmNjCQsLw9rautpj6trpV5mdIzJpBa1k5WBPYe4TZNKq69KKbFqh8VV3Pa6pK3t9urWDbnRsr+QzcRxtu7mw+/NvuXe3WOpwtIYiM1usvBOEGkT9sIqLR47h/39vixUweq64uJjhw4fTp08f+vTpw+jRo/Hx8WHp0qUsW7YMFxcX8vPzmTFjBgAzZswgPz+f+Ph4li1bxtKlS4GqK1lGjx6tXsnSXLSUWTH41UDiDhzhxqUkqcORVGVjYdGcs3HU6f+aJ30KefLkSXr16kWfPn3o1asXq1atanDAlQXObdqKTFpBu4iaefUzZNoUslKukfjbcalDqZGBgQHjxo1j69atAHz//fd06dKFPn36kJ6ezhdffFHtcXWts63MzhU1aQWtZGVni/IJMmlvXk7mblERnT37NEJUgvBAXa/HT0pXOrabt5Ix5m+zST51hriow1KHo1UUWWKSVhBqolKp2LDgI/Ju3GTqFx+LjDg9V1RUBFQ0pjUxMUGlUjF8+HC2bdsGwNq1axk/fjxQsWKlsgfRtm3bGDFihHp75UqWq1evqleyNBeDXw2kpcyK/d/rby3aSuqSQmKMbRQ6132r7N49lNk5otyBoHXWrFnDd999x7p166psX7Zs2SM3jw8/aZTL5axYsQJXV1cAli9fzqhRo0hLS0MulxMeHt7gDHRt07mvB+2f7sHWj5agUqmkDqdGrVq14ty5c2RlVTQgqfwvVNzA//LLLw16f2V2Dl29nmnQewiCphkaG2FlZ0vhE9SkLS8r41psPD2eHcDQ6S9jYGiAoaERBoYGGNyvC2pgaIiBwYPvC3PzOLphC+WlZY3waYTmqqbr8eN6KdTWY0EXjQ6eRQtLC3Yu/UrqULSOIjObrt5ijBWEmtwtvMXqtz5g7oaVTP9yMctfm0PZvXtShyVIwNDQkLNnz9K1a1eWL1/O77//TkFBAWVlFb+bPbz65OGVKWVlZSgUCuzs7HB2diY6Olr9njWtWJk5cyazZs0C0PqVKpXMW8kY/MpkzkceJD3pd6nDkVxluQNRUqhx6NwkLVQ0DxOZtIK2OXr0aJWaPI/z55p56enp6ieNlTXzAHXNvOY2STt06hQKc/M4s3uf1KE8lq2tLR9//LH6eycnJzIyKkquTJgwgfj4+Aa9vzIrB/NWMozNzCgtFktUBe1gaWsL8ESNw6Ci1l3AgnmMnRdc7evlZWWoylWoVOWoylWYtDDDsXNHtvz7kyeOWdA/NV2Pw8PD2bBhA19++SWmpqa4uLhw+vRpDAwM1D0Wbty4QWBgIEFBQVJ+hAZr282F/i+N5/im7WQki5vGP1NkZiGzt8fA0BBVebnU4QiCVsr84yqb/r6I6V8tYfz8d9i+6FOpQxIkUF5ejoeHB61atWLHjh1079690c4VGhpKaGgoUNH/SBcMmRaEqXlL9n+v37VoKxXfvs3dW0UiA7+R6OYkbXoGzt1dpQ5DEOokODiYqVOncubMGebNm0dBQcFjnzT+uWaej49Pte+ri08hARw6PsXTw54lcsVKrZ6YNDc3RyaT8fPPP6u3ffrpp/Tp0weVSsXVq1eZPXt2g86hvL+EVmZvS96N9Aa9lyBoiszeDuCJMmkBjm/chnxnRVZjebkKVVkZKpUKVXl5tZnzo4NnMWr2a+TeuMnB0LVPHrjQbG3YsIGhQ4dib29PamoqISEhDB06tNrrcUJCgrp/grOzMxMmTKD8/gRdZY8FIyMjVq1a1eBmtlIb/+E73FEWErlCLL2sjiIrGyMTYyxtbZ74eiYI+uDCwV85smYDQ6cHcfrn3aRebF7JIULdKRQKDh8+TP/+/bG2tsbIyIiysrIqq08eXrFiZGREq1atyM3NfexKFl1mYd2KZ19+idh9B8j8PUXqcGoVFhZG7969uXDhAj179gTAxsaGzZs307FjR65evcqkSZMoKCho0HkUWdkik7aR6GQl5/ybGVi3ccTAwEDqUAThsRqzZp6u1Mv7syFTp3CvuJgTm3+ufWcJ3b59m/Pnz6NUKtXbpk6dSq9evejduzf+/v7qLK4npcy6P0nrIAY4QXtY3Z+kfZKatJVK7tyl5M5dSouLKSstrcieraG0yb7v/suZ3RE8N/cNnnm++XUCFhouKCiItm3bYmpqSvv27Vm1atVjr8eLFy+ma9euxMfHs2/fgxUb1fVY0FV9Ro+ki6cHe7/5gTvKQqnD0UrqmnniJlIQarX/hzBu5eXz/DtzpA5FaGL29va0atUKgBYtWjBq1CgSExM5fPgwL774IgDTpk1j165dQMWKlWnTpgHw4osvcujQIfX2wMBATE1N6dixo3oli64b+trLmJiZsf+HhvdXagpr1qwhOTm5yrb58+dz8OBBXF1dOXjwIPPnz2/weUTd98ajm5O06RmYmJlhaWsjdSiC8FhZWVmU388eCw0NVZc0qOlJY3N9AlnJwsaavmPHcGZ3BLfy8qUOR3KK+50xZa11JxNaaP5kDg3LpH0SW/61mCunzzJ50T/o0tejyc4rCLrItGULxr73N1ITLnHq591Sh6O11DXzxE2kINSquOg2UT+uwsWnL90H9ZM6HKEJtWnThsOHDxMbG4tcLicqKoo9e/bwwQcf8O6775KcnIydnR1hYRVL/cPCwrCzs8Pd3Z13331XPeH38EqWffv28eabb6pXsugqSzsbBga+yLm9+8lKuSZ1OHVy9OhRSktLq2x7uNnbw03gGkKZlSMaYDcSnZykzbtZkS0h6tIK2s7J6cG/0T/XzKt80vhwzTy5XK6umWdiYkJgYCDh4eFSha9xAycHYNLCjN/WbZI6FK1QWDlJez9zURC0QWUmbWFuXpOds6y0lDXvfEjO9TSmf70Ex84dm+zcgqBrhv9lKtaOrdn5yTJRa/UxFJkVzeVEJq0g1M3JLTvJuZ7G8++8iYGhTk4TCE/gwoULPPPMM/Tu3ZuePXuyaNEiAFJSUvDx8cHFxYVJkyZRUlICQHFxMZMmTSI+Ph4fHx91LxV4sJKle/fuVVay6Kphr72CiZkpUT+uljqUBnF0dFSvOMrIyMDR0bHa/WbOnIlcLkcul9daTlGRlU0rBwexur0R6OTVNz+9cpK2jcSRCMIDGzZs4OTJk3Tr1o3U1FRef/11Pv30U+Li4oiNjWXYsGG88847QNUnja6uruonjWVlZeqaeYmJiep9mgNjMzMGBE7k4pFjOvMksrEVFSgovXePViKTVtAiMns7ivILKPvTU/jGdkdZyMo571Jaco+/rPgSKzvbJj2/IOiCFpYWDH4lkHN793P1fJzU4Wi1W3n5lN0rpZVja6lDEQSdUFZaSsQ3P9DWtSueL4yWOhxBkJSVvR0DJ0/k7C/7yLmWWvsBOqSmEmT1KadYWffdwta6MULUazrZOKygcpK2jcikFbRHdV2iV62quXbN4sWLWbx4MXK5/JGaeREREY0So5Q8X/DDys6WX9dukDoUraLMzhE1aQWtYmVvh1KiJjv5NzMIe/M95qxewYzln7PitTcpuXNHklgEQRv1HTcGM/OWYiytA5VKhTInR2TSCkI9xO4/xJD4BEYHz+T8vgOU3s+eFAR9M/z1VzE0NiLqB93OogXIzMzEycmJjIwMnJycyMrKavB7qksKtXbgVq4oY6hJOplJe/dWEXeUhaLcgSDoCAMDA4ZMnUJqwiV+PxMjdThapWKSVpQ7ELSHzMFO0k7oaQmX+N/7/8S5uyuvfLoQQyMjyWIRBG3Tf1IA1+IukpZwWepQdIJobCII9aNSqfjly+XYtHFiUNBLUocjCJKQtXag/6TxnNm1l9w03e8P83Czt4ebwDXEg+acYrWKpunkJC1UlDywcaq+loYgCNql+6D+OHbuyK9rN0oditYRRdcFbWNlJ10mbaXE346z45MveXroIMbPf0fSWARBW3Tp64FTl06c3PKz1KHoDEVmtsikFYR6+l1+jsSjJxgxcyotZTKpwxGEJjfiL1MxNDQi6r+6l0W7YcMGunfvXqUE45IlSxg1ahRJSUmMHDmSJUuWNPg8yuyKSVrRAFvzdHeS9maG3mfShoWFkZmZyYULF2rc5+uvvyY5ORk3Nzc8PB50zJ46dSpJSUkkJSUxderUpghX0GNDpwdRkJFJ7P6DUoeidZQ5uWKSVs/5+flx6dIlkpOT+eCDDx55fdq0aWRlZRETE0NMTAwzZsxQv9YY13KZgx2F2dJO0gKc2Pwzh1f9xMDAiQyd9mg5mcYmxlhB2wyYHMBthZKYfWIsrStFpsikFYQnseerFbSwtGTEXxpnDKvrGOvu7k5sbKwYY4UmY+3Ymn4Tx3F65y/k329Yr0uCgoKIi4vD1NSU9u3bs2rVKvLy8hg5ciSurq6MGjWK/PyGlycozMmjvKxMPAhtBLo7SZueofc1adesWcPo0TUXdR8zZgwuLi64uLhw7do1vv/+ewBsbGwICQnBx8cHb29vQkJCsLYWBZ+FxuHcw5Wu3p4c/WkL5aVlUoejdZRZOZi3kmFsZiZ1KIIEDA0NWb58OWPGjMHNzY0pU6bQo0ePR/bbvHkzHh4eeHh4EBYWBjTOtbyFlSUmZmYoc6WfpIWKm8Tz+w4w9r2/0ct3eJOeW4yxgjaxsrej54ihyHftobS4WOpwdIYiK5sWFhaYWZhLHYog6JT0pN85uzuCQUEvYt0Iq1frOsbGx8cza9YsMcYKTWbEzGlgYMCB/66ROhStVl5WRmFunpikbQQ62TgMKjJpW8qsaGFpwd1bRVKHI4mjR4/SoUOHGl/39/dn3bp1ABQVFWFtbY2TkxNDhw4lKipK/QQlKiqK0aNHs2nTpjqf2///3qZtd5eGfQA9dfNSMrs+/UrqMJrM0GlB3L1VRPT2hte+aY7US0Uc7MhLuylxNEJT8/b25sqVK6SkpACwadMm/P39SUxMrPVYPz+/Bl/L/0xmX1EfWRsyaaGiNt7Gvy+iVWsHghb/C2VWTpN1tBdjrG5qrmOsT8BYjEyMObFlh9ShNFhYWBi9e/fmwoUL9OzZE6iYeNm8eTMdO3bk6tWrTJo0iYKCggaf60HNPAeyUq41+P0EQZ/s+y6UPqNHMjp4Fpv+sUij713XMXbevHmcOnVKY2OsGF+fXHMdXx9m7eSId8BYTm0PpyAjU+pwtJ4iS5QUagw6m0mbl16Req7vJQ8ex9nZmdTUVPX3aWlpODs717i9OjNnzkQulyOXy7G3F0uyhfqxdmxNb78RRG/fpbcPU2qjvD8ZJhP/f+mlul6PJ06cSGxsLFu3bqVdu3b1OrY+13Gr+5O0UtekfVhpSQmr5v4fBemZvP7NUq1ZRSPGWKGpGBga0u9Ff5JOnibnWmrtB2i5NWvWkJycXGXb/PnzOXjwIK6urhw8eJD58+dr5FyKzIoO1q0cRWMTQaivgoxMjq3fiufY0bRx7dqk5xZjrCCF/pMmYGhoyOFVP0kdik5QiuacjUJnM2kLKidp27QhPel3iaNpvkJDQwkNDQVALpertzf3p2iCZgx6eRIAR3/aInEk2kuRnQOIoutCzXbv3s3GjRspKSlh1qxZrF27lhEjRtT5+Jqu49WprI9cqEWTtAC3FUpC58zj3S1rmLzo7/w4cy4qlUrqsBpMjLFCXbgNHoBNGyd2LW0e/y6OHj1KaWkphoYPckX8/f0ZOnQoAGvXruXIkSMamahVZFZk0lqLm0hBeCIHw9bhM3Ecz78zh5V/fVfqcOqlujFWjK9CTYxMTPAJGEvCr8fIT9e9WrRSUGTl0OmZPlKH0ezobCZtZRFnkUlbsxs3btC+fXv19+3atePGjRs1bhcETTKzMKffi/7E7T8klos8RmHlJO39DEZBv9TlepyXl0dJSQkAK1euxNPTs87H1peVvS2gXZm0lXJT09j16de4+PRl4JSJUocjxlihyQyYPBFFZjYXjxyTOpRG4+joSEZGxe/2GRkZODpWXwOzvplxDx6EiklaQXgSd5SFHAxdS49B/enq7dlk5xVjrNDUeo0ahpWdLcc3/Sx1KDpDkZWNhXUr0VtFw3R2kvZWXj73iouxaYRC5s1FeHi4uuOlhYUFCoWCjIwMIiMj8fX1xdraGmtra3x9fYmMjJQ4WqG58Zk4jpZWlhxZu1HqULRaUYGC0nv3aCUyafWSXC7HxcWFjh07YmJiQmBgIOHh4VX2cXJ68DBy3Lhx6nq1jXEtl9nbc+9uMXcLbzXofRrL6R27SfjtOM+//Sb2HdrXfkAjEmOs0BTs2jnTfVA/orftpLxMf5pv1pQpHxoaipeXF15eXuTk5NT6PqXFxRTlF4iaeYLQAMc2biPvZjovvPsmBgYGTXLOh8dYHx8fMcYKjW7g5ACyr14nOfrxq86EB5SVdd8dxH2sJulsuQOVSkVBeqZeZ9Ju2LCBoUOHYm9vT2pqKiEhIZiYmADw448/snfvXp577jmuXLlCmzZtGDx4MAD5+fksWrRIvexj4cKF6uLrgqAJhkZGPPvyJH4/E0NawiWpw9F6yqwcZA7iBlIflZWVERwcTGRkJEZGRqxatYqEhAQ++ugjzpw5w+7du5k7dy7jxo2jtLSUvLw8pk+fDjTOtdzK3lYrs2gftvXfS3h/x3qmfPxPlk/7a6NNXIkxVtAG/V8aT1lpKdE/75Y6lEaVmZmJk5MTGRkZODk5kZWVpbH3VmRlYy1q0grCEystKWHfd6EELf4Xvf1GcH7fgQa/Z13H2GHDhhEaGsprr70GiDFWaBxtXLvS6Zne7Pr062ZRTqupqJtzOjqQmyYy2jVFZydpAfLTM7SmgYgUgoKCat0nODgYqMjWOnv2rHr76tWrWb16daPFJui3XqOGYdu2DTs/+VLqUHSCMicHmYMod6CvIiIiiIiIqLItJCRE/ecFCxawYMGCao/V9LVc5mCvdfVo/0yZncP2/3zGq58tYuj0IA6F/a9RziPGWEFqxqameE94gfhDv6mzVZqr8PBwpk2bxtKlS5k2bRq7du3S2HsrsrKRiZq0gtAg5/ZEMmRqIGPmzubCgSOUlZY26P3qOsb6+Pjg5eVVZbsYYwVNGzA5gJI7d5Hv2iN1KDqlsu67WK2iWTpb7gAq6tLqcyatIGirQUEvkX0tlYRfj0sdik6oyKQVy0QE6VnZaX8mLcD5fQc4H3kQvzdn0sa1i9ThCEKj6O07HAvftTqzAAAgAElEQVQba05u2SF1KBq1YcMGunfvTrdu3UhNTeX1119nyZIljBo1iqSkJEaOHMmSJUs0dj5FZra4gRSEBlKVl7Nn2Qrs27ej/6QJUocjCBrTwtICzxf8iImI4o6yUOpwdIo6k1aMsRql05O0eekZyBzsMTY1lToUQRDua9vNhU4evTix+WedXi6SkpKCm5sbMTEx6iVVNjY27N+/n6SkJPbv34+1tbVGzqXMyUUmatIKWkAXMmkr/fyfz7itUDLl439hZKzTC4OEOggLCyMzM5MLFy6otz3umvz111/j7u5ObGwsHh4e6u1Tp04lKSmJpKQkdb1DbTVgcgBZKddIPnVG6lA0KigoiLi4OExNTWnfvj2rVq0iLy+PkSNH4urqyqhRozS6fFmRmYWlrY24TghCA10+cYqkaDm+b7xOC0sLqcMRBI3wHDsGM3NzTmzeLnUoOufurSKKb98R97EaptOTtAXpFR3jrZ1EnSlB0BYDAyc2m+UiSUlJeHh4qJdZzZ8/n4MHD+Lq6srBgweZP3++Rs6jzMrBXCYTnTEFSRmZmGBh3UonMmmhouneto+W4NzdlVFvvC51OEIjW7NmDaNHj66yraZr8pgxY3BxcSE+Pp5Zs2bx/fffAxWTuiEhIfj4+ODt7U1ISIjGHrZpWhvXrnTs05OTW3dKHYrOU2RlY2hoKFas6CE/Pz8uXbpEcnIyH3zwQY37BQQEoFKp8PT0BMDY2Jg1a9YQFxdHQkKCxn7faw72LFuOhY01w157RepQBA1p164dhw4d4uLFi8THxzN37lyg+T8IrTRgcgDX4i6SlnBZ6lB0kjJLrFbRNJ2epM2/mQ6ATds2EkciCE+W5ZOcnIybm5vOD26VWlhZ8szzfpzbE9ksl4v4+/uzdu1aANauXcv48eM18r7K7IqlIqIurSAlKztbAAqza++Yri0uHjnG6Z2/MHzGq7R3d5M6HKERHT16lLy8vCrbarom+/v7s27dOgBOnTqFtbU1Tk5O+Pn5ERUVRX5+PgUFBURFRT0y8astRH08zRHLMfWToaEhy5cvZ8yYMbi5uTFlyhR69OjxyH6Wlpa89dZbREdHq7e99NJLmJmZ0atXLzw9PZk9ezYdOnRoyvC1VlrCZc7t3c/gVwOxsNHOh1xC/ZSWljJv3jyefvpp+vXrx5tvvkmPHj2a9YPQSl36euDUpRMnNv8sdSg6SyEmaTVOtydp0zMAsHFylDgSQXiyLB8XFxeuXbum04Pbw7z8n8e0ZQuOb9L95SIqlQoXFxfOnDnDzJkzAXB0dCQjo+K6k5GRgaNj9deemTNnIpfLkcvl2NvXnrmjzK7IXJTVYV9BaCxW9hUPCZQ5ebXsqV12Lf0KZXYOUz7+p8hG1zM1XZOdnZ1JTU1V75eWloazs3ON26tT3+u4JplZmOP5gh/n9x1olg88m1rlJK1oHqZfvL29uXLlCikpKdy7d49Nmzbh7+//yH6LFi1i6dKl3L17V71NpVJhYWGBkZERLVu2pKSkBKVS2ZTha7UDP67GtGULBkwOkDoUQQMyMjKIiYkB4NatWyQmJuLs7NysH4RWGhA4kaICBecjD0odis5SZGUjE5O0GqXTk7QFmVmUl5WJ5mGCVnjSLJ+ioiKdHtwqGRgYMHByAFfPX+Dm5WSpw2mwQYMGkZiYyJgxY3jzzTd59tlnH9mnppq7oaGheHl54eXlRU5O7VmJivuZi6KejyAlmf39TNo6/JvVJndvFbH5X4tx7NyR5+bOljocQUKarINe3+u4JvVV18cTmT2aUJAhMmn1UV0eynh4eNC+fXv27t1bZfu2bdsoKioiPT2d69ev8/nnn9dYJ1nKBzpSyfzjKgm/Hmdg4ETxcLSZ6dChAx4eHpw6darRHoRqy/8zMgd7eg4fwukdv1BaXCxZHLquIpNWP659TUWnJ2nLS8tQZueISVpBazXXLJ/quPTzwqHjUxzftE3qUDTi5s2bAGRnZ7Njxw68vb3JzMzEyanieuPk5ERWVpZGzqWsXIop6uUJErK6/+9P1zJpAZKj5RzbuI1nX5lM574etR8gNAs1XZNv3LhB+/bt1fu1a9eOGzdu1Lhd2/SfNIHr8QmkXkyUOpRm4Y5Syb27xVg7ih4WwgMGBgZ8+eWXzJs375HXvL29KSsro23btnTq1Il58+bRqVOnat9Hygc6UjqyZj1Wdrb0HasbySRC7SwsLNi+fTtvv/02hYWPruLQ1INQbfl/xmfiOIxMjDm5ZYdkMTQHyqwcjE1NsbBuJXUozYZOT9IC5N/MwKaNmKQVdENzyfKpzsDAAApz84jdf1jqUBrM3NwcS0tL9Z99fX2Jj48nPDycadOmATBt2jR27dqlkfPdVigpLSkRNWkFScnsbCkvL+dWnu5N0kJFM5O8tJsELvoHZubmUocjNIGarsnh4eHqmu4+Pj4oFAoyMjKIjIzE19cXa2trrK2t8fX1JTIyUrL4q9PZsw9tXLpwcrO4adQkkemjf2p7KGNlZYW7uztHjhwhJSWFfv36ER4ejqenJ0FBQezbt4/S0lKys7M5fvw4ffv2leJjaK3fz8SQejGRIVOnYGBgIHU4QgMZGxuzfft21q9fz44dFeNPc30QCmBobET/F8eTeOwkuWnaGaOuUJcUEqtVNEb3J2nTM0QmraC1mvPg9jBrJ0fchgzi1PZwyu7dkzqcBnN0dOTYsWO4ublx+vRp9uzZQ2RkJEuWLGHUqFEkJSUxcuRIlixZorFzKrNzkTmIwU2QjpWDPUX5BZSXlkkdyhMpuXOXjX9fhE1bJ8a+9zepwxE0bMOGDZw8eZJu3bqRmprK66+/XuM1ee/evfzxxx+4u7sTGhrKnDlzAMjPz2fRokXqVSgLFy6scQmzVAZMmsBtpZKYfVFSh9KsKLKyRU1aPSOXy3FxcaFjx46YmJgQGBhIeHi4+nWlUomDgwOdOnWiU6dOREdHM27cOM6ePcv169cZPnw4UPGwvl+/fly6dEmqj6K1jqxeT+tOHXAbMlDqUIQGCgsLIzExkWXLlqm3NccHoZWeHjKIVo4OnNgkygo1lLo5pxhjNcZY6gAaKj89k96+IzAwNERVXi51OIJQReXgtnTp0kcGt+DgYDZt2oSFhUWVwW3x4sXqZmG+vr58+OGHUn6EOuk/aQIAJ7fulDgSzUhJSaFPnz7I5XK8vLzU2/Py8hg5cmSjnFOZkyMyaQVJyextKczJlTqMBrl6Po4ja9Yz/PVXuXDwVy4fj679IEEnBAUFVbu9pmtycHAwPj4+Va7hAKtXr2b16tUaj08TLO1s6DlqGCc2/cy9u6I+niYpMrN4qtfTUochNKGysjKCg4OJjIzEyMiIVatWkZCQwEcffcSZM2fYvXt3jccuX76c1atXEx8fj4GBAatXr+bChQtNGL1uiDtwhLwb6QyZHsTFI8ekDkd4QgMHDmTq1KnExcWpG4gtWLCAJUuWsGXLFmbMmMG1a9eYNGkSUPEg9LnnnmPYsGGEhoby2muvAVUfhAJa+SC00oDAieTdTCfx6AmpQ9F5ikxR913T6jRJ6+fnx9dff42RkRErV65k6dKlVV6fNm0an332mTrj77vvviMsLAyAqVOn8o9//AOA//znP+pmSZqSfzMDIxNjZA526n8ggiCFDRs2MHToUOzt7UlNTSUkJKTWwe3KlSu0adOGwYMHA7o1uFUyMjHBJ2AsCb8eoyAjU+pwdJYyK4fWnTpIHYagx6zs7XV+khYgcvlKejw7gMkfLeCzgJe5o3y0rpogaCPv8WMxNjHhxBaR2aNpisxscQOphyIiIoiIiKiyLSQkpNp9hw0bpv5zUVGR+nd2oWblZWX89r9NjJ//Dk/1dOP6hQSpQxKewPHjx2ssWdGcHoRWat2pA679vNjz1fciyU8DlPfLLooxVnNqnaQ1NDRk+fLljBo1irS0NORyOeHh4SQmVm1msHnzZv72t6rLC21sbAgJCaFv376oVCrOnj1LeHg4BQUFGvsA+enpFedychKTtIKkniTLByqWY509e1a9XRcGt4f19h2GlZ0txzdtlzoUnabMzqGrj6fUYQh6zMrelqyUa1KH0WClJSVs/PtC3toQxnNz32D7fz6TOiRBqJWBoSH9J40nOfoM2VevSx1Os6PIysbEzAwL61YUFSikDkcQmo3TO37Bd84Mhk5/mXXz/i51OIJQq/6TJlB67x6nd9ScTS/UXXlpGYW5echE3XeNqbUmrbe3N1euXCElJYV79+6xadMm/P396/Tmfn5+REVFkZ+fT0FBAVFRUYwerdkOkPk3MwBEXVpBkMjAwBfJSrlGcvQZqUPRacrsXMxlMozNzKQORdBTMns7CrWgCaEm3EhM4vjG7fR7aTzt3LpJHY4g1Kr7oP7Ytm0jsmgbSUFmRU8A0dhEEDSr+PZtTm7ZSc8RQ7Br5yx1OILwWKYtW+Dl/zxx+w9xK0+7V6vqErFaRbNqnaR1dnYmNTVV/X1aWhrOzo9egCdOnEhsbCxbt26lXbt29Tq2IfLTxSStIEjFubsrHfv05MSWHahUKqnD0WnK7PudMUVdWkECLWUyjE1NUebkSR2KxkSuCKUov4AJC+aJztOC1hsweQKKrGziD/8mdSjNkmhsIgiN59iGrZSXlzP41clShyIIj+XxnC8trSw5LhqGaZQiS0zSalKtk7R1sXv3bjp27Ejv3r2Jiopi7dq19Tp+5syZ6k679vb1S5MuuXOXovwCbNro5yStn58fly5dIjk5mQ8++OCR15966ikOHDiAm5sbhw8frjJJvnTpUuLj40lISODrr79uyrCFZmJg4ESKb99BvmuP1KHoPEXW/Xo+DmKpiL6p7TpeKSAgAJVKhadnRVkMY2Nj1qxZQ1xcHAkJCcyfP/+JY6h8OFCY3TwyaQHu3irily+X07F3T/r6P1fv4+s6vsbGxtKtWzcxvgpPzLZdW7oP6s+p7eGUl5ZJHU6zpLxfEs3asbXEkQhC86PMzuHcnki8xr+AeStZnY4R97CCFAZOnsjNy8lcPR8ndSjNipik1axaJ2lv3LhB+/bt1d+3a9dO3SCsUl5eHiUlJQCsXLlSfQNZl2MBQkND8fLywsvLi5wnWGqZl56hl5m0lfWCx4wZg5ubG1OmTKFHjx5V9vn8889Zt24dCQkJLFy4kE8++QSA/v37M3DgQHr16oW7uzteXl4MGTJEio8h6KiWMis8nvPl3N5I7hbekjocnae837DJSkzS6pW6XMcBLC0teeutt4iOjlZve+mllzAzM6NXr154enoye/ZsOnR4suZzMvuKSVplbvPJpAU4uzuClJg4nn97Di1lVnU+rj7ja+/evbl586YYX4UnNmBSAKqyck5u3Sl1KM2WMjeX8vJycRMpCI3k17UbMTNvSf9JE2rdV9zDClLo0Nsd5x6uHN8ssmg1TZGVjaWtDUYmJlKH0izUOkkrl8txcXGhY8eOmJiYEBgYSHh4eJV9nJweTJCOGzdO3VQsMjISX19frK2tsba2xtfXl8jISA1/BChIz9TLTNq61At2c3Pj0KFDABw+fFj9ukqlokWLFpiammJmZoaJiQmZmZlN/hkE3eXl/zymLVtwQiwX0Qhl5VJMMUmrV+pa933RokUsXbqUu3fvqrepVCosLCwwMjKiZcuWlJSUoFQqnygOq/uZtMpmlEkLFT+jnz/+HAvrVvjN+Uudj6vv+FpYWCjGV+GJmLQwwydgLBcOHml2//9pk/LSMgpzcsUkrSA0kowrf5B47CSDgl7C2NT0sfuKe1hBCgMmB3D3VhHnftH8fJQuSElJIS4ujpiYGORyuUbfW3l/Rago26cZxrXtUFZWRnBwMJGRkRgZGbFq1SoSEhL46KOPOHPmDLt372bu3LmMGzeO0tJS8vLymD59OgD5+fksWrRI/Y9g4cKF5OdrvkBz/s0MXPt71euY1p06YNPGCfNWMsytW1X89/6XhXUrzGUV2y2sW2FmYc6V02f5de1GLp84pfH4n1R1NX99fHyq7BMbG0tAQAAAEyZMQCaTYWtrS3R0NIcPHyY9PR0DAwO+++47Ll269Mg5Zs6cyaxZswDqXYpCaL4MDAwYMDmAlJg4bl5OljqcZuG2QklpSYkY3PRMXa7jHh4etG/fnr179/L++++rt2/btg1/f3/S09MxNzfnnXfeqXaMrct1XGZ3v9zB/Yzu5uTm5WRObt3JwMCJnPp5N+lJV2o9pj7j6zfffIO1tXW9x1cQY6wAzzzni3krGcc2bpM6lGZPkZVNK1HuQBAaza9rNvDGym955nk/Tu/YXeN+TXEPC2KMFR6wsLGmj98IorftouTOHanDkcywYcPIzdX87/rquu+tW5N/M0Pj769vap2kBYiIiCAiIqLKtpCQEPWfFyxYwIIFC6o9dvXq1axevboBIdYuPz0DM3NzWspk3Kkli8jAwIDRwbMYOWv6I6/dKbzFbYWC2woltwsU5N64yW2FkrJ79+gzeiSzfvyK9OTf+XXtBs7tjaLs3r1G+kSa89577/Hdd9/h5ubGkCFDSEtLo6ysjC5dutCjRw91k7eoqCgGDRrEsWPHqhwfGhpKaGgogMafuAi6y7W/Nw4d2hO5YqXUoTQryuxcZA4iy0d4wMDAgC+//FL98PNh3t7elJWV0bZtW2xsbDh69CgHDhwgJSWlyn51uY5bOdhRfPsOxUW3Nf4ZtEHEt/+lt+9wAhbMY/n0v2rkPSvH1+nTp2NlZVXv8RXEGCvAwCkvcvNyMinnYqUOpdlTZmVj176d1GEIQrOVfOoMNxKTGDJtCvKdvzSoqXBD72FBjLHCA94TXsDY1JQTotRBoxDNOTWrTpO02i7/ZjoAtm2duPGYSVpjMzOCFv+L3r7DObU9nNM79zyYlFUqH9usYc+yFXg858uQaVMI/M8/ee6tv3JswzZObNlR68RwY6lLzd/09HQmTpyIXC7n73//OxMnTkShUDBz5kyio6MpKioCKibi+/fvX+0AJwh/NiAwgMLcPOKiDksdSrOizM5B1lo86dcntV3HrayscHd358iRI0BFeaHw8HDGjRtHUFAQ+/bto7S0lOzsbI4fP07fvn0fmaStC5m9HYWN8GRdW9xRKtn79fdM+mgBz7zgV+tSt/qMrwBnz56ldevWYnwV6qWTRy+cu7uy5d+fSB2KXlBk5dDZ00PqMAShWTuydj0vL/mI7oP6k3j0RLX7iHtYoSkZGBrS/6UJXDl9lsw/rkodjmRUKhX79+9HpVLx448/qh9gaIIiszKTVkzSakKtNWl1QX56RUr145qHWdnZMmfVcnqOHEr4Z9+w5d+fcPV8HFkp17iVl19rN92y0lLOhO/li4mv8uOst0hPusJzb73BP6N2MuHDd7Fr5/zY4xtDXeoF29nZYWBgAMCHH37IqlWrALh+/TpDhgzByMgIY2NjhgwZoq4lLAiPY9PGCbfBA4nevksnssl1iTI7R93ASdAPtV3HlUolDg4OdOrUiU6dOhEdHc24ceM4e/Ys169fZ/jw4QCYm5vTr1+/Gpf81cbK3o7C7OY7SQtwescvXIu7yNh3gzGzMH/svvUdX9u0aSPGV6HeBk55kdtKJTF790sdil4oyMjCvJUMkxZmUociCM3W+ciD5KdnMHR6UI37iHtYoSn1eHYAdu3a6n3DsEGDBuHp6cmYMWN48803efbZZx/ZZ+bMmcjlcuRyeb1KhNxRKrl3t1hM0mpI85ikvV/3oqbmYU4uXZi7YSVOXTuz9p0P+XXdxgadL+nkaf77xjt8FvAKsfsP0u+l8czfs4VpXy6mY++eDXrv+ni4XnBiYiJbtmxR1wseO3YsAEOHDuXy5cu4u7vj6OjIxx9/DFTUMvz999+5cOECsbGxxMbG8ssvvzRZ7ILuquzaGr11l8SRND8ik1b/1OU6XpPly5djaWlJfHw8crmc1atXc+HChSeKw8reDmUzrEf7MJVKxY7FX2BpZ4vvX2c8dt/6jK+XL1/G2NhYjK9Cvcgc7Ok1chind/xCyZ27tR8gNNiDmnniJlIQGkt5aRm//bSZrt6etHPrXu0+4h5WaEoj/jKVvBvpxB/6VepQJHXz5k0AsrOz2bFjB97e3o/sExoaipeXF15eXuTk1K+ZqSIrm1biPlZjVNr0JZfLn+i4xacOqca9P/eR7d0H9VN9fPKA6l8HwlXOPVwbJWaZg71qzNw3VIuOR6q+uHBSNfWLj1WmLVtK/rPUxM9V0+8hvnT778bY1FT10a97VdO/WiL5z605/t0MnzFV9cWFkypjMzPJP7s2f4lrkeZ/douOR6omfPiu5PE1xdeLIR+oPo05qnLs0qnRf65N/R7iq3F+po3xd+P71xmqz2KPq+zat5P856RNfzcpKSmquLg4VUxMTK0/9/r+vbj49FV9ceGkqktfD8k/vzZ/iWuR+Nk19MvMwlz1nxNRqlc+Xag1P1Pxd6P5L1343adLXw/VFxdOqgZMDpD85yXl3425ubnK0tJS/efjx4+r/Pz8NPp3M2fNCtWc1Ssk/+za/lWXn2uzyKQFKMjIfCSTduCUF5nx3efkXE/jq6AZ3EhMapRzK7NziPjmBxaNHE/Etz/Sc8QQ/vbTf7Ft17ZRzicIUunlOwxLWxuOb9oudSjNUuH9J5YyB1HyQGg6xqammMtkzT6TtlLE1z9QXHSbgAXzpA5F0FNGxsb0f2k8l46dJDc1TepwtM6wYcPw8PDAy8tLo+9bkJkFiMYmgtDYiotuE711J719hz+2HKEgNLYRM6ehzMnl9M49UociKUdHR44dO8b58+c5ffo0e/bsITLy8f0Z6kuZmS1WqmhIs5mkzb+ZgXUbRwAMjYyY8OG7BCyYR8Jvx1k+/a8o7y9xakwld+5w4L9rWDlnHtZOrXl74ypc+mn2F0xBkNLAwIlkpVwjOVp0SG0MiqyKSdpWDmKpiNB0rOxtAZp9TdpKRQUK9n7zA129PenjN0LqcAQ91HPkUGQO9hzfuE3qUPSKaGwiCE3n6IYtqMpVDH4lUOpQBD3V/ukedBvgw69rN1JaXCx1OJJKSUmhT58+9OnTB3d3dxYvXqzxcyiycsT4qiHNZ5I2PQObNk6YWZjz+refMijoJY6s3cCatz+k5M6dJo3l8olTfBU4A2V2DrN+WMbgV8XgJOg+5x6udOzdkxN6UHS9Xbt2HDp0iKeffpr4+Hjmzp0LQEhICGlpacTExBATE8OYMWM0et7KTEYrMUkrNCGr+83qlLn6MUkLEL1tF6kJlxj7/lxMW7aUOhxBzwya8iI519O4fPyU1KFoncru02fOnGHmzJmPvP6kTU2gIpniTuEtWjm21lS4giDUQJGZTUxEFD4Tx9JSZiV1OIIeGv6XqdxWKjm5ZYfUoegFRVY2Ji3MaCmTSR2Kzms+k7Q3M7Cys+Vv//svrv292bpwKbs//xZVebkk8eSmpvHtK7O4eOQY/v/3FlM+/hfGZqKbrL5KSUkhLi6OmJgY5PKKLFQbGxv279+Pu7s7+/fvx9raWr3/119/TXJyMrGxsXh4eEgVdhXPvjyZ4tt3kIfvlTqURldaWsq8efO4ePEi/fr1480336RHjx4ALFu2DA8PDzw8PIiIiNDoeSsz/kUmrdCUZPcnOvQlkxZAVV7OjsVfYO3YmlFvvCZ1OEID1TTGurq6kpSUpFVjrHN3Vzo905vjm7ajUqma9Ny6oLbu0w1pagKVjU1Epo8gNIUjazdgZm5O/5fGSx2K8BhhYWFkZmZWaT5beZ/6uDHUzc2tyhg6depUkpKSSEpKYurUqU36Gf7MsXNHeo0cyrH1Wym+fVvSWPSFujmnKCnUYM1nkjY9HQBrx9asnPMu0Vt3ShwRFN++zdp3PiRyeSh9x43hzTUrxD9aPfbnGmvz58/n4MGDxMfHc/DgQebPnw/AmDFjcHFxwcXFhVmzZvH9999LGTYATl074/mCHye37uBu4S2pw2l0GRkZxMTEAHDr1i0SExNxdnZu9PPeVigpLSlBJjpjCk2ostyBvtSkrXQtNp7TO39h8KuBtO7UQepwhAaqboxVKpW4urpq1Rg7MHAixbfvcHqn6EZenbp0n24IRWaWmKQVhCaSnnSFyydO8ezLkzAyMZE6HKEGa9asYfTo0VW2Vd6nPm4MvXbtmnoMtbGxISQkBB8fH7y9vQkJCakysdvUhv9lKsW3b3N0/RbJYtA3ItlIc5rNJO3l46c4vfMXvn11FkkntadepkqlYv8Pq1g19/9o3akDb29aTcc+vaQOS9AC/v7+rF27FoC1a9cyfvx49fZ169YBcOrUKaytrXFykrbo/vNvz6G46DYHQ9dKGocUOnTogIeHB6dOVSxLDQ4OJjY2lrCwsBp/+WjIckxldq46s1EQmoLMwZ7ysjJu5eVLHUqT2/PVCu7ducv4+e9IHYqgYf7+/uTeL+GhLWNsS5mMZ5734+wv+/TigWd9mZubY2lpqf6zr68v8fHxGj2HIitbJEwIQhM6smYDMgd7PF8YXfvOgiSOHj1KXl5elW11uU8tKipSj6F+fn5ERUWRn59PQUEBUVFRj0z8NhXbdm3xGDOKk1t3cluhlCQGfaTOpBUPQhus2UzSFhUo2PzPj8n846rUoVTr4uGjfPPyTIqLbvPXVd/R70V/qUMSmlB1NdYcHR3JyMgAKjI3HR0rGt85OzuTmpqqPjYtLa3aLM6GTATWR5e+HrgNGcjBlWv1bqAzNDRk+/btvP322xQWFvL999/TpUsX+vTpQ3p6Ol988UW1xzVkOaYyO0dk0gpNysrellv5BZKVB5LSrdx89i0PpdsAH9yHD5E6HOEJ1TTG3rt3D9CeMdYnYCwmLcw4vmm7Rt6vuWmK7tOKrGys7O0wMGw2t0CCoNWSTp4mLeEyw157GQMDA6nDEeqovvepdR1bofHvYYdNfxlVeTm/rt2o8fcWakYgOWsAACAASURBVFbZAFsmHoQ2mPgNpQll/p7C10EzuHLqLC+FzGfiP97HyNhY6rCEJlBbjTWg3rXpGlqXra5eeDeYgoxMjm7Qry7UxsbGdOnShfXr17NjR0XB+aysLMrLy1GpVISGhmp8GSbcn6S938hJEJqCzN5er+rR/tmJzT+T8XsKz731hpi40VG6MMYaGBoyYHIAV+TnyEj+vcHv1xw1SffpzGyMjI2xsrPV+HsLglC9w6t/onWnDjw9bLDUoQhPSJM11BvzHtbK3g7vCS9weucelNmNd38sPKrs3j1u5eWLTFoNEHcjTeyOspCVb87j0Kr/MWByADOWfy4aiumB6mqsZWZmqpdYOjk5kZWVBcCNGzdo3769+th27dpx48aNpg8a6O03gqd6urHvu/9SWlwsSQxSCQsL4+7duyxbtky97eElsRMmTND4MkwQmbRC07Oyt0WZq7+TtOVlZez77r84du4olmPqqJrGWJP7NRC1YYzt8ewA7Nq15fhG/XrgqW0UmWI5piA0tbiow+Sm3WD4669IHYpQR/W9T9WW+9chU6dgaGTE4dU/Nfm5BdGcU1PEJK0EVOXl7Fm2gs3//BiXfl5M/+oTUUy9Gaupxlp4eDjTpk0DYNq0aezatQuA8PBwdUdMHx8fFAqFerlJUzIyNua5uW9wM+kKZ3bva/LzS2ngwIFMnToVKysrYmJiiImJYcyYMXz66afExcURGxvLsGHDeOcdzdexVGTlYC6TiYc3QpOROeh3Ji3AhQNHSE24hO9fZ4gVLjrmcWOsnV3FqgRtGGMHTZlIQWYW8Yd/a/RzCTVT3J9oEHVpBaHplJeVcXj1ejr0dqdzXw+pwxHqoC73qRYWFuoxNDIyEl9fX6ytrbG2tsbX11fj5Wpq01ImY8DkCcRERJGXdrNJzy1UEMlGmiHuRCR0eucvGBgZMunfHzLti49Z++4CykpLpQ5L0DBHR0f1cnljY2M2bNhAZGQkcrmcLVu24O7uTkFBAZMmTQJg7969PPfcc1y5coXbt2/z2muvSRJ3v5fGY/9UO0LnvKt3tSqPHz+OgYEBcrlc3SkcICIiotHPXXh/2Y/MwU78giE0OgMDA6xsbVHm6PckLcC+b39k5vfL8A4Yy8ktO6QOR6ijx42xs2fPJikpiWvXrkk6xjp0fIpuA/sR8e2PlJeWNfr5hJqpG5s4tpY4EqEp+Pn58fXXX2NkZMTKlStZunRptfsFBASwfft2+vbty9mzZwHo2bMnP/74IzKZjPLycry8vCjWs1VlmiTftRe/OX9h+IxX+eNMjNThCA/ZsGEDQ4cOxd7entTUVEJCQliyZAlbtmxhxowZNY6hbdq0YfDgihIW+fn5LFq0CLm8ooH7woULyc9v2oa0zwa9iJm5OYfC/tek5xUeUGRm49yjm9Rh6DwxSSuxU9vDMTI2ZuI/3ueVTxfyv//7p/gFvpmprLH2Z3l5eYwcORK5XM6oUaOqvBYcHNxU4VXLzMIc3zde58rps1w6elLSWPRNZdH1Vg72YpJWaHTmrWQYmRirHw7os0vHokk5F8uo2a8h37VX70q86KrHjbFJSUlVHrRVauoxdsDkAErv3SN6+64mPa/wqKK8Akrv3RPLMfWAoaEhy5cvZ9SoUaSlpSGXywkPDycxMbHKfpaWlrz11ltER0ertxkZGfHTTz/x6quvEhcXh62trboRofBkSouLObp+C8/NfYM2rl1JT7oidUjCfUFBQdVuHzlyZLXbK8dQuVyufqgBsHr1alavXq35AOvAzNycZ1+ZTPyhX8m48ockMQgVD0ItbW0wNDYSc1oNIModaIETm39m59Kv6DVqGEEf/wtDIyOpQxL03LDXXsHS1oZfvlwudSh6p7LIvUzcQApNwMqhYkmSMidP4ki0w95vfqBVawcGBU6UOhShmTAzN8fL/3liIw9yK7dps4qER6lUKpRZOWKSVg94e3tz5coVUlJSuHfvHps2bcLf3/+R/RYtWsTSpUu5e/euepuvry9xcXHExcUBFQ99yvVsVVljOLH5Z+4WFYnatILG9X9pPOatZBwIXSd1KHpNkZWNoaEhMntR8qAhxCStljj602Z2f/EdHs/5Mnnh30WHaUEyVvZ2DH41kJiIKFIvJtZ+gKBR6klaezuJIxGaip+fH5cuXSI5OZkPPvigxv0CAgJQqVR4enqqt/Xs2ZMTJ04QHx9PXFwcZvWsZSyzr+hwXig64ALwx9nzXD4ezfAZr2JmYS51OEIz8MwLfrS0suSYaBimNRRZ2aImrR5wdnYmNTVV/X1aWhrOzs5V9vHw8KB9+/bs3bu3ynZXV1dUKhX79u3j7NmzvP/++zWeZ+bMmcjlcuRyOfZiYuKx7igLid62i95+I7Bp61T7AYJQB8ampgyZNoWkk6dJjU+QOhy99qCkkBhjG0LMBGqRI2vWE/Htj/QdN4aX/vUBBgYGtR5T2839U089xYEDB3Bzc+Pw4cNVfjlp3749kZGRJCQkcPHiRTp06KDRzyPoJr85f8HIxJiIb36UOhS9dFuhpLSkRBRd1xOVyzHHjBmDm5sbU6ZMoUePHo/s97jlmG+88Qbu7u4MHTq03ssxrexFJu2fRXz7XyxsrHn3k//UaXyNjY2lW7duYnwVqjVoyoukXkzketxFqUMR7hPdpwWoqMn+5ZdfMm/evEdeMzY2ZtCgQbz88ssMGjSICRMmMHz48GrfJzQ0FC8vL7y8vMgRpYNq9dv/NqFSqXjnPx+Je1hBI7z8n0fmYM+B0LVSh6L3FJn3J2nFGNsgYpJWyxz47xr2/7AKn4njCPj7e4/dty43959//jnr1q0jISGBhQsX8sknn6hfW7duHZ999hlubm54e3uTdb/jraC/WnfqgPeEFzi5ZQe5aTekDkdvKbNzxTIRPSH1ckx1Jq1oHKaWejGR+EO/8f7M2UyYNKnW8bV3797cvHlTjK/CI7p4PYNT184cF1m0WkWRmSWyfPTAjRs3aN++vfr7du3acePGg99trayscHd358iRI6SkpNCvXz/Cw8Px9PQkLS2N3377jdzcXO7cucPevXt55plnpPgYzY4iM5uYvfsJnvIqEwMni3tYoUEMjYwY9vorXI29wO/yc1KHo/fUK0IdxH1sQ4hJWi0UuTyUQ2HrGDA5AP8P3q5xv7rc3Lu5uXHo0CEADh8+rH69R48eGBsbc+DAAQCKioq4c+dOI30iQVc8//ZfuXe3mKgfpSn6LlRQZueITFo90RTLMR+3FNPKwZ67RUWUiOt/FVlHT1Nwr5jOwwfWaXwtLCwU46vwiEFTXqQov4CYfQelDkV4iCIzGzNzcyztbKQORWhEcrkcFxcXOnbsiImJCYGBgYSHh6tfVyqVODg40KlTJzp16kR0dDTjxo3j7NmzREZG0rNnT1q2bImRkRFDhgwhIUEso9YU5bmLKO4V026gt7iHFRqkz5iR2LVry0FRi1YrFOUXUFpSIh6ENpCYpNVSe776nl/XbWTwK5N54d3quxDX5eY+NjaWgIAAACZMmIBMJsPW1hZXV1cKCgrYvn07586d49NPP8Wwmjq4os6S/ujYpxfuw4dwaNX/KMovkDocvabIyhZPIAVAM8sxH7cUU2ZnS6EodfCIFiq4+kcKg4ImYWVvV+v4am1tXe/xFcQY25x18XoG9+GDOfVzOKXFxVKHIzwkJSaWstJS5qxagX2H9rUfIOiksrIygoODiYyMJDExkS1btpCQkMBHH33E2LFjH3tsQUEBX375JXK5nPPnz3Pu3LlHHpQKT66lgSHXr19j0JQXMW3ZslHuYUGMsc2dgYEBI2ZM5WbSFRJ/Oy51OMJ9CtGcs8HEJK0WC//sG45t3Maw115mzN9mP9F7vPfeewwZMgQ3NzeGDBlCWloaZWVlGBsb8+yzz/Lee+/h5eVF586dmT59+iPHizpL+mPsvGAUWdkc/Wmz1KHovcKcXGQOonGYPpB6OaaVgz1KcW2v1o2EyxiZGDNy5rRqX68cX8+dO4eVlVW9x1cQY2xz1bmvBzO++5zMP65yePV6qcMR/uT6hQR+nDkXC+tWvL1xFT2eHSB1SEIjiYiIoFu3bnTt2pXFixcDEBISwu7dux/Zd9iwYZw9e1b9/fr163F3d6dnz/9n78zjY7reP/6ZmSwS2ReyR0ii0SCxxdrYU76/oLailSC2KkVRpTQ0WlVFVVU1qLWWahEaVWonNMgiEtlDJovsmezL5Pn9MTIylchEZjJLzvv1el4zc++59zz3PueeZ8655zyn6ysX9WS8HumxCdA1NIDHhDH17m9uGxZgPlbdeXPIW7Bw7IjLew6CiBStDuM5gqxsWLt0ho6BgaJVUVlYJ62Sc3rjVoT8dhrD587A24vmSuxrrHEPABkZGZgwYQKio6Px2WefAQAKCwvB5/MRHh6O5ORkCIVCnD59msVaasW4DvVEB7euuPDjHlSWlTd+AEOuFGblQNfAAJpttBWtCkPOKHo6poGZKRtJWw9paWkwNzHBv6fPoe+kcXBycWnQv/bo0UO8j/lXhoN7N8ze+S3yMzLx05xFKC0UKFolRj0k3gvDd1NmITc1DbN+2Ixhs+t/GcNgMGRPWloajNvqIfF+GDx9psDWzo61YRlNZtgcH2Q/SUX4BRZSSJm4dfwPmNnZYPkfh+DYp6ei1VFJWCetkkNE+D3gG9w5eQYj5s6E79avoK2rC6Dxxj0AmJqagsPhAABWrVqFffv2iY81MjIST/0YOnQoi7XUSuFq8PC/JR/gWVIKQk//qWh1GKgTdJ1NzVJ7FD0dU9/MVFzeGC+o9a9xwf+AC8B31sxX+ldLS0vmXxmw7+6K2bu2ovBZNn7yW4ji3HxFq8R4BfkZmfjBdx7Cz1/E6MXz4bPlS2jp6ChaLQZD7anrY02tLDFjth9rwzKahPvokbBz7YIr+w6BmrhoLkO+hAX/jR3vz0FlaRnmBX6P/y1dAJ6GhqLVUjlImSQ0NFThOiirvDV9Cn0TdoNWnDpCZnY2BIBGjRpFsbGxlJCQQKtXryYAtH79evL29iYANGHCBIqLi6OysjIKDAwkLS0t8fmGDx9OERERFBkZSb/88gtpamoy2yhAZHFfm3OOfpPeoS0PQ+jNIYMUfi+UTRRlG+d+fWjLwxBycO+m8HugjMLqItncO8022rTlYQgN9fNRuF7KKLX+NSMnm66nJ5OZvW29/jU2NpaysrKa5V//axsmshFZ3VNpzmPXtQt9GXKJPj17nAzMzRR+7couiv7v81/x9JlKm8Nv0rLfD5GJjZXC74+q26a1Crt30kutj80pElBwVBhxOBy5tWGZbeQjiqjHNbS0aNynS2nLwxBaenw/8aSwfWsUZfCxWjptaOLnK2nLwxBacmwfmXewU/h9UQaR8r4qXlFZFgZ1F8c+PWn9tWDacOtvchnUv0XvK7ONfESRttHS0SH/K+fow/27FH4flFEUZRsLx4605WEIdfcapvB7oIzC6iLZ3DsTGyva8jCEeo8drXC9lFn0TI3pq7v/0Pub1kt1X2VhGyaykZbqpLXp8gZtuPU3rQr+jQzbmyv8ulVBlPGZce7XhwJuXqCAmxfIuV9vhd8jVbZNaxV275ouPf7Pi7Y8DKEungPlek+ZbWQvLV2PWzh1ouV/HKYtD0No7CdLSKNOxz0TxdrmVeI61JO+uPEXfXX3MnlMGKPwe6Nokea+snAHKkbCv/dFMbT46Zj1w2YMnzdTPBWEwWgKGtraGL14PgzMTHFu205Fq8OoQ2GWaPp5/8nvwMmjF3vGGXLBwFS0OJ2AxaR9JcW5+bhx+ATcR4+EpbOjotVhKBnWLs6YF7gdpYIi7Jq1EIXPshWtEuM1iQv5F99NmYXCrGzM2bUNnj5TFa0Sg6H2hP91CXnpGRg6631Fq8JQYga9NxlLju5FW2Mj/Dx/Kc588x2qKysVrRZDCqIuX8O3E6bjSWQUJq9bBd9tG6FryBYVexWsk1YFyc/IxA6feXjw5wWMWjgXvts2QrutrqLVYqgIRu3bYfTiD/D5xdMY9N5khJ75E08iohStFqMOZQIBLv28H1adnTB/zw6sCv4Nw+fOgGF7c0WrxlAj9M2fd9KymLSNcvXArygTFGHUwrmNJ2a0GiydHTHv5+9RXlyCXX4foiDzmaJVYjSTXH4avn9vDh7+cw1jVnyE975exxbxZDDkSE21ENcOHIVDj+7o4NZN0eowlAx9UxPM3rUV4z5diriQUGyZMB2xt+4oWi1GExFkZePnuYtx9tsd6OI5AMt/Pwwnj16KVktpYZ20Kkp1RQWOrv4Cp7/ehi6eA7D4170w72CnaLUYSoxDj+7w2fIlVv/1O4bMfA+J98Kwc+YCHFuzQdGqMerh/I7dWD/UG4c/+Rx5/AyMWjQPay6cgt8P38J16FvgavAUrSJDxTEwE3XSFuXmKlgT5adMUIQr+4/gzSGDYNftTUWrw1ACLJw64YM9O1BVXo5dfguRn56paJUYMqKyrAwHl32G4O0/wW3UCHx0OBDD5vii6zBPtHOwZwugMBgy5t9TZ1GSX8BG0zIkcHlrAJb9fgiOvXrg9w2bsW/RChTnsQU5VRUiwtUDv+L792ajorQUc3/ejv9b+iHzqfUg1R3x8vLC9u3bwePxsGfPHmzatKnedOPHj8fvv/+OXr164f79+7C3t0dMTAxiY2MBAHfu3MEHH3wgO+0ZuHHkBNJj4+Gz5Uss/nUvfl21HtHXbipaLUYzkfaZawwNLS24jx6BQdMmw9rFGaWFAlw7eBS3j/2B/AzWoHwdZGUbaaiurETY+YsIO38RJjZW6PPO/6HP2P/DzO2bIMjJxb2gYNz94yxynqTKTQeG+qJvbgphdTVK8gsVrYpKcOPwCQx6bzJGLZqH3XM+UrQ6DAXSvmMHzA/8HtWVVfhx1kLk8dMVrRJDDvyz5wDSY+MxbtVSjP5ovni7sKoaufw0PEtKQVbyE9Hn8+8VpaUK1JjBUE0qy8px8+hJeC2YjfadHPAsMVnRKjEUiIa2NryXLcTAqRORHhuPXX4LWZlQI9Ji4rB1si/GrFiMIbPeR4//80J2ylPkpWcgPz0T+RmZyEvLQH5GJgozsyCsrla0yi1Oo520XC4XO3fuxIgRI8Dn8xEaGoqgoCDExMRIpNPT08PixYtx547k8PPExES4u7vLVmuGBIn3wrDt3ZmYsf1r+P2wGRd2BuLi7l9ARIpWjfEaSPvMvQrD9uboP3k8+k4cCz0TY2TEJ+LEuo148OcFVJVXyFF79UYWtnld8vjp+GvHz/j7x73oPKAv+k7whqfPVAydNR2J98LwJDIKFaVlqCwtQ0VJCSpKy1BRUoqKMsnflaVlqKqsQE21UO46M5QbA1NTFOflg2pqFK2KSlBZVoZ/9hzEuJVL4NinJxL+va9olRivSXNetrVzsMf8vT+gRijEj34fIjeVL0dNWx8t+SJUGmJu3EbMjdvQ0tFBOwc7tOvYAe0dOqBdxw5o52CPLm8NAE/zRXOq8Fk2SgoKUFFSivLSUpEfrpXSUlSUlKBc/L0UVeUVqK6qgvC5VFdWiX4//6yufL69qpL5bYZac+voSQyZ+T6GzHyPzfJTcZpTj1s6O+L9Teth4dgR1w4exZ/f7YKwqkqO2rYelMm/VpVX4PeAbxB97RZ6/G8kjC0t4NyvDwzMzcDlvpjsX1NTA0F2DvJrO22fZaOyrAyV5RWoKi8Xf68sKxf9Ln/+WVaBqooK1FRXQ1gtFH0KRZ81QuX3pY120vbp0wcJCQlITha9vTh27BjGjh37UqdEQEAANm3ahBUrVshHU8YrKch8hh985mPi2k/g9eEcWHfpjCMr16GyrEzRqjGaiLTPXH1oaGlh6pdr0XX4YHC4XDy6cgM3jpxAYugDeavdKmiObWRFjVCImOu3EHP9FvTNTNFrzCj0Hvs/DJo2uclx82qEwudSI/4ufO68qKYGwmrRJxGJO/JqamrE31/sIxAIIBK9HCK8eElEz/cBL7Y/31ebpu7+utvrpvtt/SbWGSJj9M1NIchhoQ6aQsiJUxjsOxW9xoxmnbQqSnNetpl3sMMHe38AAPw0exGbxSBjFPkitDEqy8rAj44FPzpWYjtXgwczWxu0c7BHO4cOMO9gC10DfWjrtkVbQ0OYWFmiTdu20G6rCy1dHYnG5+tQ66Pr+u0aoRA11UIIhdXi77W+mohAwhrU0PPfwhc+vTZNfsYzHFsT0Cy9GIzmUlJQiLt/BKH/5PH464dAFuNbRWlOPT5gygSMWfERSgsF2D13MeJC/m0BjVsHyupfa9u0tfA0NGBk0R7GVhYwtrKAiZWl6LulBey7u8LAzEwmceKFVSJ/KRRWi/xndbXIR9YQamqEorYt1aBGWCPhL8VpqEbUxq0RtX2JakTt3Fq/Wys1Nbh/7i+Env6zSfo12klrbW2N1NQXf0L5fD48PDwk0ri7u8PW1hbBwcEvddI6ODjgwYMHEAgEWLNmDW7eZFPx5UV1RQWOrQkAP/oxXAb1ZyseqijSPHMAMGfOHMydK1rExszMDIBoerymtjauHzqO28d/R15aRsso3Upojm3kQVFOLq7sO4wr+w4DEDUWtXR00EZX1BjUbtsW2ro60G6rK/rUFTUUNbQ0weXxJEWDBy6XK/7O42mAw+WCp8EDOBxwAHC4XHCeNzA5XC44HA44XA444Ii2cwAOhwNwOKI04NR+FZ3jP/uef3m+W/zlxW8OR3TOF5sZMiQ3NQ25qWmKVkOlqK6sxI8zP0ReOqtbVZXmvGzjcrkozi/A4RVrkZX8RN6qtjqU4UVoU6mpFiIr+cnz8nD9lWk5HA4027QR+eS2umjTVhcaWtrgaWpAQ0sLGpoa4D3/1NDUAk9TExpamuLPF/6ZBy5P47n/5kr6cR4PPA0NsY/m8ngiP83hgsvjgsPhgsPlgMt9vp3HlRgJzGAokmsHjqJTL3cYmJuyTloVpTn1OBHh8a07OOG/ESX5BfJWtVWhKv5VWC0KJ5TLb7h9wuFyoamtBS0dHWi20YZWmzbQbNMGWjrPP9toQ1OnDTS1tcHT0BD7Ra4G75W/OVwuuM/buhwu5z+/X3zncrmidi1X1LblcLiiJmvt9lrhcsHR4IHDafrL2WZ7ZQ6Hg61bt2LGjBkv7cvIyICdnR3y8vLQo0cPnD59Gm+++SaKiook0rVUh0Zr4eavv+HW0ZMs3IGaExgYiMDAQABAaGioePu+jz5RlEqM5zRkG3lTUy1EeVExyouKWyxPhupy+uttilZBJXnVH0eG8tOcl23PklKwdaIP+38lJ6SxjSq3GYhINDWzrAxFbBYDg/ES+RmZ2DLRR9FqMJpBc+rx28f/wO3jf7SMoq0MZRto1ByopgaVZeWoLCtXtCpyo9Fu3bS0NNja2op/29jYIC3tRQNFX18frq6uuHr1KpKTk9G3b18EBQWhZ8+eqKysRF5eHgDgwYMHSExMhLOz80t5BAYGonfv3ujduzdycnJkcV2tHtaAUF0ae+YYioPZhsFgMFoHDf03Zf+vFAtrMzAYDIZqw+px5YXZRjlotJM2NDQUTk5O6NChAzQ1NTFlyhQEBQWJ9wsEApibm8PBwQEODg64c+cOxowZg/v378PM7EXgXwcHBzg5OSEpKUl+V8NgqAGNPXMMxcFsw2AwGKoNe9mmvDDbMBgMhmrD6nHlhNlFtWi0k1YoFGLhwoW4cOECYmJicOLECURHR2P9+vXw9vZ+5bFvvfUWIiMjERYWhpMnT2L+/PnIz8+XmfIMhjrS0DPHUDzMNgwGg6HasJdtyguzDYPBYKg2rB5XTphdVAupYtKeP38e58+fl9jm7+9fb9ohQ4aIv//xxx/44w8WV4TBaCr1PXMM5YDZhsFgMFSXui/beDwe9u3bx162KQnMNgwGg6HasHpcOWF2US04AJQquFZWVhaePGl8xVwzM7MWjZOh6vnZ29ujXbt2zTqHMtpG1e0CtJxt1OFetXR+zDbKmZ8s7NJaYfU4qyuagqrnJ6u6gtlGOW2jjPVZS+enrPVZa4XVFcpZVwDMNvLIj9XjypsX+1+qvPlJaxtSRQkNDWX5Kam0pO7MLsqru7rnp8q6q3t+TFTLZqw8Kq/u6p6fKuuu7vmpsu7qXH8yUT2bqXt+qqy7uuenyrqzelw5dVf3/Gql0Zi0DAaDwWAwGAwGg8FgMBgMBoPBkB+sk5bBYDAYDAaDwWAwGAwGg8FgMBQID8A6RSvxujx48IDlp6S0pO7MLtKj7veK2Yblx5AdrB5XTtT9XjHbsPzkgTrfK1W2S2tFncujIvKTJep+r5htlDM/ZheWX12UbuEwBoPBYDAYDAaDwWAwGAwGg8FoTbBwBwwGg8FgMBgMBoPBYDAYDAaDoUBYJy2DwWAwGAwGg8FgMBgMBoPBYCgQpeuk9fLywuPHjxEfH4+VK1e+tH/p0qV49OgRIiIicOnSJdjZ2Yn3VVdXIywsDGFhYThz5oxM8vP19UVWVpb4vH5+fuJ9Pj4+iIuLQ1xcHHx8fGSS39atW8V5xcbGIj8/v1nXJ0uYbZhtpM2P2eYF6mwbVbZLa0Wdy6M0+SlzmVRn26iyXYCWtQ17ZqRHnZ8ZafJTZtu0VtS5TKpyeVRnu0iTH7ON9Pkx27yA2UaxtiFlES6XSwkJCeTg4ECampoUHh5OLi4uEmkGDx5MOjo6BIDmz59Px44dE+8rKiqSeX6+vr60Y8eOl441NjamxMREMjY2JiMjI0pMTCQjI6Nm51dXFi5cSHv37n3t62O2YbZhtmG2kZdtVNkurVXUuTxKm19dUaYyqc62UWW7tLRt2DOjnHZhtmEiqzKiqmVSlcujOtuF2YbZhtlGPW2jVCNp+/Tpg4SEBCQnJ6OqqgrHjh3D2LFjJdJcvXoVZWVlAIA7d+7AxsZGrvk1hJeXFy5evIj8/HwUFBTg4sWLQUpVBgAAIABJREFUePvtt2Wa39SpU3H06NEmXZO8YLaRhNmG2UYa1Nk2qmyX1oo6l8fXyU+ZyqQ620aV7QK0rG3YMyM96vzMvE5+ymSb1oo6l0lVLo/qbJfXyY/ZhtlGGphtJGlp2yhVJ621tTVSU1PFv/l8PqytrRtM7+fnh/Pnz4t/t2nTBqGhoQgJCZHKqNLmN2HCBEREROC3334TF76m6trUY+zs7ODg4IDLly+/9vXJEmabFzDbtIxttLS0sHfvXvzzzz8YNGgQli5d2uAxPj4+uHfvHgQCATw8PDBy5EjweDzx9T148AC5ubkoKytDSkoKpk6d2uh1ygJ1tU3d9EuWLEFGRgY+//xzTJ8+HVpaWi+ltbOzg6OjIy5evIiioiIUFRWhbdu24PP54murtXdhYSEyMjLE9mbIDnUuj009htXjLV9XSJNe2ewCtKxtlNG/vvvuu3j8+DEKCwvh4eGB6dOnQ19fX3xtzL9KIuv6jPlY1UGdy6Qq1+PqbJemHsNsw3ystKirbermZ2hoiIyMDBQWFuLtt9+Gra1tvWn79++P/v3749SpU2Ifq6OjI76+CRMmyNy/ajT7DArivffeQ69eveDp6SneZm9vj/T0dHHl8/DhQyQlJTUrn7Nnz+Lo0aOorKzE3LlzceDAAcyaNQvz58+HnZ0d3n//fSxcuLDB4zdv3oyxY8fCwsICAoEA8fHxEvvNzMxw7949uLi4ICYmBn5+foiIiMCUKVNw8uRJ1NTUyPX65IGibHP58mXo6+vDyMgIjx49wubNm1FZWfnScR4eHggICEDPnj0hFApx9epVXLhwQSLNu+++i+HDh2Pq1KnYs2cPPv30U/E+ZpvGqe+5GTZs2EvpOBxOg+dYt24dnJyc8MEHH8Db2xuffPIJoqOj602rq6uLJUuWYNCgQXB0dMTQoUOxfPlybNq0Cfb29vj222+RlpaGrl27YsWKFQgMDERERESD51MEymabWng8HoRCYb37rK2t4e3tjaFDh2LgwIH4/PPPsX79eqxatUoi3ZQpUxAcHIwZM2bAyMgIQqEQVlZWEtfm5eUFJycn2Nvbw8LCAleuXEF0dPRLzyajZVAVH7tp0yZMnToVhoaGqKioQEpKisR+5mNfn9f1sS4uLjh48CA6deoEAEhNTUVcXJxEmn79+iEnJwcAJHysKtsFaBnbtLR/vXXrFgYMGAA/Pz84ODhAX18fGzZswOLFi5l//Q9N9a8A87GtFUWVyePHj6OiogIDBgxAYWEh7ty5g3/++afeY5l/FaHM/vX+/fs4d+6cRBrWhlWtNizzsdIjyzZs9+7d0b17d/Tq1Qvp6em4ffs29PT06k3r7e0NAGL/CkDCxz548ADx8fEy9a9KNZI2LS1NogfbxsYGaWlpL6UbNmwYPvvsM4wZM0aiAktPTwcAJCcn4+rVq3B3d3+t/GpH4AFAXl6eOI89e/agZ8+eOHr0KGJjY3Hw4EF89tlnOHnyJBwdHevVtaSkBN7e3jA0NMTnn3+OAQMGoF+/fgBEhdfLywuHDx+GsbExDhw4gDNnzkBTUxNTpkx5aUh1U69PliiDbTIyMiTS1LXN06dP0alTJwwbNgwLFy6EpaUl1q9fX6+uxsbG+Pnnn9GhQwfY29ujqKgIs2fPFuc3d+5ceHh4YNu2bejWrRu8vb0xb9488fGqapvAwEDs27cPrq6uCAsLw7hx4wCIdJ89ezb+/PNPWFtbS+hvY2OD33//HVlZWcjJycGOHTtemZ+vry9u3ryJ9evXIysrCzExMUhKSkLPnj0BALNmzcL48eNx8+ZNlJaWwsXFpV5da88VEBCAuLg46OvrIzAwEDNmzKj3+n766SfcvHkTkyZNwp49e3DkyBEMGDAAAFBQUIAJEybg448/xpUrV1BTU4OgoCBMnz79dW+51LzqXn3yySfg8/kQCAR4+vQpvvzyS6SkpGDt2rXi9E5OTkhNTRWXq5CQECxfvhwREREoLi7Gnj170K5dOwQHB0MgEGDlypVwcHCoN79a9PX1UVFRgTlz5sDf3x+DBw/GsmXLxLr6+/vjt99+g4+PD7744gvMmDGjwWtzc3PD3r17ER0dDRMTE5w/f77e9FOmTEFQUJDEtv8+M++++y4CAgJQUFCAx48fi+3NkB3KUI/L2sfu3bsXb7zxBgwNDeHn5wcXFxe88847AJiPbWp+svKx6enpmDhxIkxMTGBmZoZLly7By8tLvH/8+PGws7ND9+7dX/KxymYXQDrbrFy5EmlpaThw4ACMjY0xevRo8b7Ro0cjOjoaERERMDIywvjx48XnUQX/yufzkZubiylTpuC3336DUCiEo6MjAOX1r8ALH1tSUoK9e/di8+bN2L17NwICAgCIypWnpyeuX78uLlfJyckN+tgDBw7gnXfegZGRUb35AaJnxtLSEkQEDoeDwYMHIz09HW5ubmJd/f39MXPmTIwbNw6FhYXMx6oRyl6P79mzB3369EFYWBhmz56NsLAwnDx5EmZmZvXqyvyrCGX2r0FBQVi4cCFrw6pwG1YVfayqt2EB0aC9jIwMREdHo6CgALdu3YKzs3O9aWs7aetS97nR0tLCX3/9JXP/qrCAxP8VHo9HiYmJ1KFDB3EA3y5dukikcXNzo4SEBHJ0dJTYbmRkRFpaWgSATE1NKS4ujlxcXGjGjBkUFBQkThcXF0cnTpwQ51dVVUWjRo0iIqLU1FRKSUmhpKQkcXoLCwvx93HjxlFYWBiVl5eTra0tJSUlkZGREd2+fZuys7PJ2Ni40esrLi6mDRs2kKamJiUkJFBmZqZEmidPnpCfnx8lJydLdX2qbJu6aT755BPi8/kkEAjo8ePHNGLECMrLy6Pg4GA6cuQIVVdX09q1ayWOqWuba9euEZ/PJ0AUPDo9PZ0yMzPJyMiIkpKSXmkbd3d3EggE4uu7ffs2PX36VHx9s2bNopCQEAJAnTt3VlnbZGRkUP/+/YnD4dDkyZOpuLiYOnfuTFOmTCE+n0/Dhw+nuLg48vLyIjs7O+JyuRQeHk5bt24lXV1d0tbWpgEDBrwyP19fX6qqqqLPP/+cNDQ0xPn8+++/BIBu3LhBVVVV1LdvXzI1NW3QNkZGRkRE1K5dO3F+H3zwAT18+LDe6/uvbU6dOkUbN24kIyMj6t27N5WUlEjYZtmyZRL1QkvbxtnZmZ4+fUqWlpbk5uZGKSkpNHToUPrll18oICBAfA+GDx9OqampYt35fD6FhIRQu3btyMrKip49e0b3798nNzc30tbWpsuXL1Nubu4ry0KvXr2IiOjXX3+ld999l8LDwykrK4vGjRtHSUlJtHHjRqqsrKTMzEwyMTGhNm3aNHht5eXl9OGHH4rz6t+/PxERmZiYvGQXe3t7IiLi8/nE5/Np//79ZGpqSqamppSQkCC2d+1xEyZMoMjIyBZ7jlqDqLuPtbW1pYqKCtq4cSPzsUriY3k8Hi1cuJCEQqH42oqLi8nf31+cptbHKqN/ldY2y5cvp+TkZHJychL7PQsLC/L19SU+n0+9evUiU1NTSk5OpmHDhqmcf506dSoJhUIiIiouLqYRI0YorX8FIPaxI0aMoISEBPL09KSOHTuKfWxtufL09KS0tDSx7snJyQ36WF1dXSotLaWtW7c2WA4sLCzEvu769et09+5dcnV1pezsbEpPTycjIyPauHEj1dTU0HvvvUccDof5WDUSWdfjq1evbtC/AqCnT59SamoqEREtWrSIysvLKTU19aUyWft9wYIFJBQKSU9Pj4yNjSkpKYlu375NS5cubbStxPyrcvrXBQsWUElJCWvDqngbVpV8rDq0YQFQeHg4ZWZmivN7+PDhS/619rmprWf5fD6lpqbS4cOHydLSkgBQx44diYho4MCB4mNk5F9b5iGUVkaNGkWxsbGUkJBAq1evJgC0fv168vb2JgB08eJFyszMpLCwMAoLC6MzZ84QAOrXrx9FRkZSeHg4RUZG0qxZswgAOTg4UH5+PnE4HLK0tKSUlBSxA3NwcCCBQECxsbFERBQfH0/Gxsb05ZdfivP76quvKCoqisLDw+ny5cv04YcfUnR0NAGgmTNnUnx8POXn59PFixcbvbY2bdpQbm4upaamUkJCAp07d46Cg4Mlru/s2bP0119/0caNGyWObej6VNk2tVL3YQdA9vb21LFjRzp8+DDV1NRQeno6ffbZZ9SmTRuJ/OrapqioiJYsWSI+56JFi4iIKDExkWbMmPHK61q8eDGFhISIr6+6upp+/PFH8fUtXbqUBAIBASB/f3+1sU1YWBh98sknJBAIiM/nv6R73759KSsri3g8ntT5bdu2jdLS0iRsU1hYSCtWrCAAdOXKFTpz5gzFx8dTfHx8g7axsbEhIiJtbW1xfqmpqVRZWVnv9dW1zcyZM8VOoV+/fpSQkECVlZUS1zd79my6cuWKwmzz/fffU35+Pg0bNowuXboktk1ubi7FxsaKy1ViYiJVVFSIdU9OTqZp06aJz33y5ElxWQVEK0/evn37lWVh586dREQUExNDly9fps6dO9OmTZtoz549NHPmTMrNzaXS0tJGnxsAlJ6eLq7PVq9eTRoaGkRE5Ofn95Jd2rZtSz179iQej0ejR4+mgoICEggEFBkZScuWLZOwNwAaPnz4S38mmcinPKq6j125ciUVFRUREVF6ejolJiYyH1vnvIrysfn5+VRVVUVCoZAOHDggvraysjLq06ePOK+ePXuSQCBQWv/6OrYpKCigMWPG0J07dygtLe0l/VXVv1pZWZG/vz85OTkprX9dv349zZ07V9wArGuXJ0+eUEBAgLhcxcfHU2VlpVj3xnzsjz/+SEVFRQ2Wg6+++kpc3925c4c6d+5MAGjTpk10/fp1io+Pp9zcXHr8+LFU18d8rOqJLOvxxvxrXl4ejR49moiISkpKKCAg4JX1eGRkJCUkJIh1nTlzJuXn51N+fn6D9QXzr8rvXz/77DPWhlWTNqwq+Fh1acMmJCTQmjVrxPmtWbOGiIi+++67l2zz7bffiv1ru3bt6PLlyyQQCCg8PJxiYmLk5V9b9kFUhDx9+pTc3d3p3Xffpd27d9Pdu3epc+fONGPGDHElTEQ0ZMiQRs/1/vvvi99I1cqGDRvol19+afTY/fv30/nz58W/16xZQ0ePHpVIc/jwYYkRJq1BOnXqRM+ePaNhw4aRhoaGeLu/vz9du3ZNqnMkJCSQl5eX+HftH1l7e/tXHte1a1fKzc2VePtRXV0t/mMNgBwdHYmIFH6fmivTp0+nsLAw8R+yqqoqmjVrFj169Ij+97//vZR+0qRJFBoa2qQ8fH19xW8ca+XEiRP0ySefECBycLNnz270PLVvIc3NzcXbxo8f3+hbqbFjx1JmZia5urqKt7m5uVFJSYlEuo8//rhF3kK+SqZOnUo3btygvLw8Onr0KFlaWkq8hQRAnp6eEqMiakdh1f4+dOiQRH3h5+fX6Auj2tE2urq64m0LFiyg4OBgAkTP3eHDh6W6hvDwcJo0aZL4t4mJSb1vIeuT9u3bExGRnp7ea9ubiXKIsvhYNzc3WrduHenp6RHAfGytKNLH6urq0gcffECjR48Wb1NHH9sa/GuteHh40P379wlQXv8KMB/LfKx6CPOvyi3Mv7aMMB/7Yr8y+FjmX+XvX5UqJq28uHbtGgYPHoy33noL165dw9WrV+Hp6QlPT09cu3ZNnK7uqnANUVxcDAMDA4ltBgYGKCoqeuVx33zzDVxdXTF58uRmn0vdSExMxJIlS7Bu3TpkZWXh6NGjsLS0BCCdTYCX72Xt91fdy06dOuH8+fNYvHgxbt68+cpzqbpN7OzsEBgYiIULF8LU1BTGxsaIiooCh8NBamqqOAB9XVJTU2FnZycRP1Ia/ruaop2dnThuCwCI/iu8moKCAqSnp6N79+7ibd27d8ejR48aPMbLywuBgYHw9vZGVFSUeHtcXBw0NDTE8X2kOVdLcPToUQwaNAj29vYgImzatAklJSXQ1dUVp7GwsJBb/nXjDL2OjQDg0aNHL9koMzMTeXl5jR5bmweXy30tezOUB2XwsQAQHh6OsrIycSw35mNFKMrHAkBpaSl++uknHDx4EObm5g2eS5Vt0hr8a100NDTE16Ss/hVgPpb5WPWA+VflhvlX+cN8rPL5WOZf5e9fW1Un7aBBg3Dt2jVcu3atXgcnjVEfPXqEjh07Sqz+1pgh1q1bh1GjRmHkyJESFeWjR4/QrVs3ibTdunVT+IOnCOp72AH5PWh2dna4dOkSAgICcPjw4UbPpeo2adu2LYgI2dnZAIAZM2bA1dUVgGghgeXLl6NHjx4ARJ3XdnZ2+Pfff5GRkYGvv/4aurq60NbWRv/+/RvNq127dvjoo4+goaGBiRMnwsXFBcHBwU3W+eDBg1izZg2MjIzQuXNnzJkzB/v376837ZAhQ3DkyBFMmDABoaGhEvtKS0vxxx9/4IsvvoCuri769++PsWPH4tChQ03WSVY4OztjyJAh0NLSQnl5OcrKylBTU4Pw8HCMHj0axsbGaN++PZYsWSI3HdauXQsdHR106dIFM2fOxPHjx5t8joMHD4oXkzA0NMSaNWsatFGfPn3g7OwMDocDExMTfP/997hy5QoEAoH4XNLam6FcKNrH1qXun1vmY1/Q0j62LlwuF7q6uuLGj7r5WHX3r9OmTRM3iOzs7PDll1+KV4NXRv8KMB/LfKz6wPyr8sP8q3xhPla5fCzzry3nXxU6XLolxMnJiQQCAcXHxxMA0tfXp9zcXCosLCQul0uAaKpIp06dpDpfSEgIbd68mbS1tWncuHGUn59PZmZm9ab99NNPKS4ujtq3b//SPk1NTUpJSaGPPvqItLS06MMPP6SUlBTS1NRU+D1rSXF2dqYhQ4aQlpYWaWpq0t69e2n//v3k7+9Phw4dkuocXl5elJGRQS4uLmRoaEj//PPPS3F3asXKyooSEhJo2bJl9e6fN28eRUdHk5WVFVlaWlJUVBTNmzdP4fepubJhwwbKzc2l7Oxs2rJlC129elUc12zevHn0+PFjKioqoocPH5KbmxsBooUCTp06RTk5OZSdnU3bt29/ZR6+vr508+ZN2rFjBxUUFFBsbCyNGDFCvP/KlSsSsdReJVpaWrR3714qLCykzMxMWrp0qXifra0tFRUVka2tLQGgy5cvU1VVFRUVFYmlduoDIArEf+rUKSouLqYnT57Q1KlTFWqLrl270t27d0kgEFBubi6dPXuWLC0tSVtbm44dO0aFhYUUERFBS5YskdtUkTlz5lBaWhplZGSI4y0BaNJzB4CWLl1KmZmZVFhYSPv27RMvQACAoqKixPGHpkyZQklJSVRcXEzp6el04MABiXrxVfZmotyiKB/L4XBo7ty5ZGRkRACod+/elJ6eTosWLSKA+dhaaWkfO3z4cHJzcyMul0v6+vq0fft2SktLE8frUkcfq87+dcOGDZSamkrFxcWUmppKu3fvlpgOqGz+FWA+lvlY9RHmX5VbmH9tGWE+Vnl8LPOvLeZfFf/gtYSkp6fTvn37xL9DQ0MlOnGa4uDs7e3pypUrVFpaSo8fP5YocNOmTaOoqCiJ85aXl0t0Hq1atUq8383Nje7du0elpaXiFe4Ufa9aWhp62OX1oH3++edERBI2KSoqkjjXpk2bKDc3l3Jzc2nTpk0Kv0eqIr6+vnTjxg2F68GkYal1cPUF02fC5HVFET6Ww+HQ+fPnKTc3l4qKiig2NlbCvwLMxwIt72MnTpxIMTExVFRURFlZWXTu3Dnq2rWrxLmYj226MP+qGsJ8LBNZC/OvyivMv6qPMB+r/NKa/Cvn+RcGg8FoNr6+vpg9ezYGDRqkaFUYDWBvb4+UlBRoaGhAKBQqWh0Gg8FgSAHzr6oB87EMBoOhejAfq/y0Jv/aKmLSMhgM2bFr1y4UFRW9JLt27Wryueo7T1FREQYOHCgHzVsP06ZNq/e+1l1QTVqCg4PrPdeqVavkoDmDwWC0Xph/VQ2Yj2UwGAzVg/lY5Yf51xcofDivssnAgQNfmgpf35R4Ji0rwcHB9drkv9NvmDBhwoSJ8grzscopzMcykZfY2NjQ5cuX6dGjRxQVFUUfffRRvem2b99O8fHxFBERQe7u7grXmwkTVRPmX5VTmH9lwoRJU4SFO2AwGAwGg8FgMBhywcLCApaWlggLC4Oenh7u37+PcePGISYmRpxm1KhRWLRoEUaPHg0PDw9s374dffv2VaDWDAaDwWAwGC2PhqIV+C9ZWVl48uSJotVQO+zt7dGuXbtmnYPZRj4w2ygvzDbKiSzs0lph5VF6DAwMYGdnBwDIyclBZmamxH49PT3Y2tpCV1cXAoEARkZG4n0+Pj5Ys2YNAGDDhg04ePBgo/kx28geWdUVzDayxdzcHLdv34axsbF429ixY8XPyd27d2FkZAQLC4uXnru6MLvIB+ZjXx9WJmUPq8eVF9ZOUl6YbZQXaW2j8OG8dSU0NFThOqijyOK+Mtsw27Q2YbZRTmH3lN07eQuXy6WEhARycHAgTU1NCg8PJxcXF4k09vb21LVrVzpw4AAlJCSItxsbG1NiYiIZGxuTkZERJSYmkpGREbONAkRW95TZRnZib29PT548ofv370tsP3v2LA0YMED8+9KlS9SzZ8+Xjp8zZw6FhoZSaGgoJScnK/x61FFYeWf3TpmE1ePKK6ydpLzCbKO8Is19ZQuHqTheXl54/Pgx4uPjsXLlypf2L126FI8ePUKXLl1w6dIl8aggQDTSJy4uDnFxcfDx8WlJtRkMBoPBUFr69OmDhIQEJCcno6qqCseOHcPYsWMl0jx58gQPHz5ETU2NxHYvLy9cvHgR+fn5KCgowMWLF/H222+3pPoMhlLStm1b/P7771iyZMlLz420BAYGonfv3ujduzdycnJkrCGDwWAwGKqFjY0NLl++jEePHiEqKgofffRRvem2b9+O+Ph4REREwN3dvYW1ZDQFqTppG+sIBIBJkyaJC8aRI0fE21lHoPzgcrnYuXMnRo0ahS5dumDq1KlwcXGRSBMWFoZevXohOjoaJ0+exDfffAMAMDY2hr+/Pzw8PNCnTx/4+/tLTNVkMBgMBqO1Ym1tjdTUVPFvPp8Pa2trmR87Z84chIaGIjQ0FGZmZs1TmsFQYjQ0NPD777/jyJEjOHXq1Ev709LSYGtrK/5tY2ODtLS0llSRwWAwGAyVo7q6GsuWLcObb76Jvn374sMPP0SbNm0k0owaNQpOTk5wcnLC3LlzsWvXLgVpy5CGRjtppekIdHR0xKpVqzBgwAC4urpiyZIlAFhHoLyRZqTP1atXUVZWBgC4c+cObGxsALCRPgwGg8FgKBo2KpDRWti7dy9iYmKwbdu2evcHBQWJB3N4eHigsLDwlfFoGQyGatPYIDAtLS0cO3YMrq6uuHPnDuzt7cX7unbtitu3byMqKgqRkZHQ1tZuSdUZDKUiMzMTYWFhAIDi4mLExMRAS0tLIk1Dcd8ZykmjnbTSdATOmTMHO3fuREFBAQAgOzsbQPM7Au26vYkxnywGV4PXlGtqNTR1pI+fnx/Onz//Wsf+F7e3h8PTZ+praM2QJxwOB4N9p8HJo5eiVWEoKZ37e8C+u6ui1WCoGBaOHdF5QOtZab05o/paekTgGwP7wsKxo9zOz3h9+r87Hnqmxo0nVHMGDBgAHx8fDB06FGFhYQgLC4OhoSHmzZuHefPmAQCCg4ORlJSEhIQEBAYGYsGCBQrWuulwNXgYMHUidA0NFK0KQ8XoNnIoTGysFK1GiyHNIDA/Pz/k5+cjKioK27Ztw6ZNmwAAPB4Phw8fxvz58+Hq6orBgwejqqpKLnpyuFz0f3c8NP7T4cVQPIbtzdF77GhFq6F02Nvbw93dHcXFxRLbpe37UeYZXkYW7VuNzRvtpJXGoM7OznB2dsbNmzcREhICLy8vqY8FGi4MFh0d4Dl9CozasxVGm4uJiQl69eqFzZs3N+m4hmzjMqg/Bk6bJGs11Z69e/fi2bNnePjwYYNpmhMvRkNbC33Ge2Pql5+zRgLjJdy8hmH2rq3w++Fb6Biw8sGQnuFzZ8BnywZwea3jpWloaCicnJzQoUMHaGpqYsqUKQgKCpLq2AsXLmDkyJEwMjKCkZERRo4ciQsXLshN13cD1uB/S1WvQ0vdsenyBiasWYGZ320CT0ND0eoolFu3boHD4aB79+5wd3eHu7s7CgsLsXv3buzevVucbuHChXB0dES3bt1w//59BWr8evzfxwsxfvUy9Jv0jqJVYagQPE1NTP/mC7z94RxFq9JiSDMIbOzYsThw4AAA4OTJkxg2bBgAYOTIkYiMjERkZCQAIC8v77VjXDdGxx7dMWHNCnQdPlgu52e8Pp6+0zBlw1rYvunSeOJWgrrHfZ+yYQ2mbFgLw/bmilZF7shk4TANDQ04OTlh8ODBmDp1KgIDA2FoaCj18Q0VhvwM0TQnY0s2FLs+pB2tM2zYMFhaWmLMmDGorKxs0rEN2aYoJxf6ZiayvJxWwf79+185mry58WKqyitwZKU/2poYYdK6Vc1Vl6FGdB7QF9M2rkP643jo6Oth1KK5ilaJoUIYtDNDm7ZtYdXZUdGqtAhCoRALFy7EhQsXEBMTgxMnTiA6Ohrr16+Ht7c3AKBXr15ITU3FpEmTYG9vj6ioKABAfn4+AgICxC84v/jiC+Tn58tFTy6PBz0TY3Rw6woOhyOXPBivh13XLgCADm5d4b18kYK1Ycgb91Ej4Dl9CmqEQnQe4KFodRgqhLFle3B5PDj369Nq6nFpBnLVTSMUClFYWAhTU1M4OzuDiPDXX3/h/v37WLFiRYP5NHdUYG1nkPUbzk0+liFfHHv3AAD0m8xeigHqH/fd5a0B4pnCHdy6KVgb+dNoJ600BuXz+QgKCkJ1dTVSUlIQFxcHJyenZheGvPTnnbRWllI60ZLHAAAgAElEQVQf05qQZqSPm5sbdu/ejYSEBHEYCqD5I30EObnQ1NaGjoG+zK6nNXDjxg3k5eU1uF8W8WLSHsfh/Paf0G34YHiM926WvgzZ4jr0LYWMROzg1g0ztm1EZkISdvl9iNvH/0C/SeNg6dw6OtwYzcfA1BQA4NDDTcGatBznz59H586d4ejoiK+++goA4O/vj7NnzwIA7t27B1tbW+jp6SE8PByuri/CiPzyyy/iF2779++Xm456JsbgcrnQNTBA+04OcsuH0XRsXV1QlJuHa4eOYdB7k+E+aoSiVWLICQunTpi0bhWS7ofj+qHj6NC9K7Tb6ipaLYaKYGItCnOgb2oCaxfWGdgYGhoaGDhwIN577z0MHDgQ77zzDoYOHVpv2uaOCjRsJ+qktXHp3Cyd1YHGZoN6enqioKBAHNJm7dq1ctNFx8AAls6OqCgtg9vbw9FGX09ueakK6hz3ncvjwXvZQmQlP0FFaRk6uHVVtEpyp9FOWmk6Ak+fPo3BgwcDgPgNV1JSUrM7AgufZQEAjK3YSNr6kGakz+bNm6Gnp4dOnTohLCwMZ86cAdD8kT5FObkARH8oGLJDVquCXzt4FHF3QjF25VKY2dvWezxDEnmHorDr2gUzt2+Cz5YvWzS2laWzI2bv/BYFmc/w8/wlKC8uwV87A1FaKMA7qz9uMT0Yqo2+uaiTtmOP7grWhFEXg+d2AQAHd2YbZcLOtQtSo2JwbusPSLofjknrVrHYwWpIG722mLFtIypKSnBw+RpEX7sJnqYGHPv0VLRqDBWhbiza1hL7XZqBXHXT8Hg8GBoaIjc3F3w+H9evX0dubi7KysoQHByMHj16yEVPA/PnI2m7sM7zxmaDAqLBSLUhbQICAuSmS6de7uByuQjevgvaujro+X+te/FzdY/77jF+DNp37IBz23YiNSoaDu5sJK1UHYEXLlxAbm4uHj16hCtXrmDFihXIy8trdkdgdWUlBNk5LNzBK2hspM+IESNgYWGB6OhouLu7S8T7ac5IH0G26G2kgblyBZRuTbzq7TAR4ehnAaiurMT7m9a3+nh40iDvUBRPH0bj1MYt6DrME3N2bW2RUTZmdjaYu/s7VJSWYvfcxSjOE9W/ZYIiBH//Ezr1dIfb28PlrgdDtdHS0UGbtm1RU1MDB9ZJq1Tom9bppO2h/n9aVQVtXV2069gBT6OiUVMtxMHla1BRWgrfrV+xEZZqBIfDwdSvPoeJlSUOfPwZinJykRL+EOUlJXijlXS2MZqPqbUlqquqkBYT12rKjTSDwIKCguDr6wsAmDhxIi5fvgxA1O/QtWtX6OjogMfjwdPTE9HR0XLR06CdqJ2ra2AAE+vWPbO3sdmgLUmn3u6oKC1DyIlTeBoVjX6TxilaJYWiznHftdvqwuvD2Ui8F4ZHV24gOTwSVp2doKXTRtGqyRWpYtI21hEIAMuWLcObb76Jbt264fjx4+LtzZ3yl5+eyUbSKiFFuaJKWt/MtJGUjKYgy3gxgqxsnPDfCNs3XeDVihYjeF1aIhTFzV9P4sin/nBw744P9u2Enon8Vv02bG+OeT9/Dy6Xi91zF6Mg85nE/n9PnUNq9GN4L18ELR0duenBUH1q6/mUsEjom5rAvIOdgjVi1FI7kvZJ5CM2klaJsOnSGVwuF6lRoo6DopxcHFq+Bqa21pgSsEbB2jFkxdDZPnAd8haCvt2OlHDRIkbC6mok/Hu/1YyIZDQfYytLFGQ8Q/SNW7Dv7toqpm5LMwhs7969MDU1haurKz7++GN8+umnAICCggJs3boVoaGhCA8Px4MHDxAcHCwXPQ3NzVAqEAAArFnIg0bp168fwsPDERwcjC5dujSYrrmxgh379ERKeCSE1dW489tpWDp1ahWjK1sjQ2dNh76pCYI2fw8ASAl/CJ6GBmxdGy5f6oBMFg6TJ/kZmTC2aK9oNRj/QVAb7oAtHiZTZB0vJuryNYScPI0hs95Hp15Nm57PkERWoSge/Pk39n20Au0dOmDhgZ/k8hKqrZEh5u7eDl1DAwR+sBRZyU9eSkM1NTj91VYYtW+HYbN9ZK4DQ30weF7PR/z9DwAW8kCZqO1Aj7x4BSbWljBq307BGjGAF4uGpUbFiLcl3Q/Hn9t+RLcRQzDYd5qiVGPIiM79PfD2wrl48OcF3Pz1pMS+xzfvwNTGioWbYkiFibUV8tLSEXvzDngaGuLFcdSdxgaBVVRUYPLkyYiKioKHhweSk5PFxx45cgSurq7o2rUrVq5cKTcdDdqZI/7OPQirq1m84EZ48OAB7O3t4ebmhh07duD06dMNpm1OrOC2RoawcnZEwr8PAABh5y+hrKgYfVv5aFp1xKh9O3j6TMX9c3+BH/0YAPAkQrRIr7rHpVX+Ttr0TBhZtm81q12qCuVFxagqr4DBa7z9as38+uuvCAkJQefOnZGamopZs2bB3NxcrvFigr7ZjpwnqZi20R86BgbNPh+jcRr78/H45h3snvMR2poYYdHBn2W64I+2ri5m79oKU2sr7F20Avzo2AbTpkQ8xL2g8xg8YxpMbW1kpgNDvdB/HtYm8V4YinLzWtXiYcqOgbkZSgsFSPj3HgCgAxtJohTYunZBTiofJQWFEtuvHTyKiL8vY/SSD9CRvThVWYytLPDepvXITEjCb+u/fml/7O27AIA3Bni0tGoMFcTE2hK5ael4EvkIZYKiVhPyQBUwbGeGPH46niUms8XDGqGoqAglJSUARB3wmpqaMDWV/YzbWt+ZeE/USVtZVob75/5C95FD0dbIUOb5MRTH24vmARzg/PcvQjaUCYqQmZCk9iOnlb+TNiMTmtracp0WzHg9BDm5bCRtE5k2bRqsrKygpaUFW1tb7Nu3D9nZ2XKNF1NZVo4jn66DvqkpJvnL722zuiPLUBSAqIN054wFAAdYeOAn2Hd3bfygRtDQ0sLM7zfB+g1nHFj2GZLuhTV6zLltO1FdVYWxKz5qdv4M9aR2JK0gOxfJYZHo2JN10ioL+qYmEGTnID02ARWlpSxmsJJg17ULUh/WHyPx+NovkZuahumbA1hcfxVEQ1sbvts2gsvlYv+SVagsK38pTR4/HdkpT1nIA0ajaOnoQN/UBHn8DNQIhYi7E4o3BrJyowzoGhpAQ0sLhVnZSHscB5subyhaJaWmffsXM5979+4NLpeL3Nxcmefj2LsHKkpLkfroxUyVkN9OQ1NbG73GjJZ5fgzFYO3ijN5jR+P6oePIz5CcVZwcHgn77q5qPYhT6Ttp89JFRmFxaZWPopxc1sBQEfjRj3H+h93oPnIoeo9lDux1kHUoCgDIjE/EDz7zUFoowLyfv0fn/q8/6obL42H65i/g5NELx9YEIOb6LamOK8rJxcWffsGbQwaxhgGjXvTNzCCsqkZpQSGS7ofD1MYKhu3NFa0WA6KRtEU5eagRCvEkIgoObuo9skAV0Dc1gbGlBZ7WaUDWpaK0FPuXfAptXR34fLsBXA2e1OfW0mkDjwljsOjQz+g7cWzjBzBkzoTPlsO2yxs4smo9clP5DaaLvX0XnXr1gIaWVgtqx1A1ahejyktLBwDE3roDI4v2Mp1hxXg9DNqJ/ucUZueAHx0LfVOTVt3ubWw26MSJExEVFYXw8HB8//33mDJlilz06NS7B5IfRKKmWijelhmfiOSwyFa/gJg6MWb5RyjOy8flvQdf2vck/CF0DQzQrmOHlleshVD6TtqCzNpO2ta9oqIyIsjJhb4pG0mrKlzd/ysS/r2Pd1YvY1Pb60ERoSgAIC8tAzt85iLnSSpm/bAZbm8Pb/I5OBwOJq9fDdehnvjjqy148OffTTr+xuHjyEp+gnErl4KnodHk/BnqjYGZKYry8kBESH4QDgDoyEIeKAX6ZiYQPA+pkvwgApbOndBGr62CtWrd1C5m0dBIWgB4lpSCE/4b4dCjO7w/XtToOU1tbeC9fBHWXjqDyetWwa5rF7iPGiEznRnS0XfSOPR55//w9669jb4IfXzrLrR1ddjodsYrMbG2AlC3k7Y2VAZ7aa5oDJ930gqycpAWIwod1poXD2tsNujOnTvh6uoKNzc39OvXDyEhITLXQc/EGJZOnZAQ+vJM05ATp2DewQ6OfXrKPF9Gy+Ly1gA49umJv3ftRXlxyUv7k8NEC3Wqc8gDpe+kza8dSWvJRtIqG2wkrWpBNTU4uvoLCKuq8d7X65o0eqc1oIhQFLUU5+bjx1kL8CQiCu9tWo8BUya8Mj2Hy4WxpQWcPHqh76RxmP7tBvQeOxrnf/gZt46efOWx9SGsrsbpTd/BvIMd3pr+7uteBuM18fLywuPHjxEfH1/vAhi+vr7IyspCWFgYwsLC4OfnJ7FfX18fqamp2LFjh1z00zc3hSBb1BGYHpuA8pIS1vGgJBiYiUbSAqI/rVweD/bdmh86hfH62HXtAmF1NdIex70yXfhfl3D98HG8Nf3del/OcTgcvDGoH2b/uAWfnjuOQdMmI/bWXfzgOx93fg+C1RtO8roERj3Yde2Cd1Z9jJibIfj7p32Npk8MfYDqyspmzZBhqD8m1qL2bV56BgCg4FkWMuIT2cwmJcDweRtXkJ2N9NgE1NTUsMXDFIw4Hm3og5f2RVy8gpKCQvSb/E5Lq8WQIVwNHryXLURW8hOEnKx/8bmcp3wU5eap9eJhSj9kqry4BGWCIhbuQAkR5OSirZEheJqaEFZVKVodhhQUPMvCb19sgu+WLzHyAz/8teNnRavEeE55cQl+nr8U0zd/gfGfLUdbYyM8+PMCzOxsYGprAzNbG5jZicTE2lJiCmVVRQUu/bwfl3b/8tr5x966g6gr1zF83kzcP3dB3CnHkC9cLhc7d+7EiBEjwOfzERoaiqCgIMTESE6VPn78OBYtqn/EXUBAAK5fvy43HQ1MTVHwLAsARNPqwx+yuLRKQBu9ttBsoy1+Vp9EPoKwuhoOPbqLFy5itDy2b7rgWWJyvbFK/8u5LT/A9k0XTF6/ChlxCXiWlAIdA330Hvc/DHh3AszsbCDIzsHFn/bhzskzYlu37+SA/pPfgbGVhXgwA0N+6JkYw3frVyh8loUjK9eBamoaPaayrAzJDyLxxsC+OLf1hxbQkqGKmFhboaK0DMW5+eJtsbfuYuC0idDSaSNVPcKQDwbtRJ20hVk5EFZVIedJKls8TME49u6B8pKSehdFrq6oQOiZPzFo2mTom5qgKDdPARoymovH+DFo37ED9i1aIRHS4r88iXiIDmoc4kvpR9ICosXDjC3aN56Q0aIUPW8ssJAHqkXk35fx76lzGDbbl3W0KBnVFRU4sHQ1Qs/8Ca8Fs7Hqz98wZ9c2jF+9DB4TvGHY3hwZ8Ym4fugYTqzbiB9nfYiA4WOxqvcQnN+xu/EMGiHom+/B09DA/5bKJpQDo3H69OmDhIQEJCcno6qqCseOHcPYsdLHmuzRowfat2+Pv/9uWoiLpqBvbiqeUg8ASQ8iYOnUCToGBnLLk9E4tTNZip4vzFFZVoa0x3FqPf2rMfbu3Ytnz57h4cOH9e739PREQUGBeFT62rVrZa6DXdcuePqKUAd1EVZX4+DyNagsK8eM777GRP+V+PxSEMauWAxBdg4OrViLDSPfwd+79kq8OEt/PkrX+g02qkveGLQzx/vffIG2RkY4sHQ1ygQCqY99fOsOLJ06iWNbMlqe152p0r17d9y+fRtRUVGIiIjA5MmT5aKfibUV8p+Poq3l8a070NDSQqdePeSSJ0M6DMzNUJJfIB6IlBYTy0bSKhhRPNoI1Ajr77y7c/IMeJoa6POOdwtrxpAF2m114bVgNhJCH+DR1ZuvTJsc9hDm9rbQMzVuIe1aFqUfSQuIQh6wkbTKh+D5FEt9M1MUZD5TsDaMpnBq41Y49OiOqV99ji0TfVBeVKxolRjPqREKcWzNBsTeuguepiZynvKRm8pvkTfCufw0XD3wK0bMnYmQE6eREh4p9zxbO9bW1khNTRX/5vP58PB4eXrshAkT8NZbbyEuLg5Lly4Fn88Hh8PBli1b8P7772P48IZjGc+ZMwdz584FAJiZNS1EDYfLhZ6xkXhKPSDqpAVEsaCir736TxRDftS+IBVkv1g9OTksEv0mjgNPQwPC6mpFqaYw9u/fjx9++AEHD7680EQtN27cgLe3fBpwprY20DU0wNMo6TppAUCQlY1Dy9dgXuD3MLJojwd/XsCtY78jPTa+wWMy4hNRIxTCqrMToi7LbxR9a4TL48G+uyveGNgPLoP6iTvCf139RaMhLP5L7O078F62EJ3790Ho6T/loS7jFTRnpkppaSl8fHyQkJAAS0tL3L9/HxcuXEBhYaFMdTSxtkRemmQnbfKDCFSUluGNQf0Qc+O2TPNjSI9he3MU1nk5xo+Jg/vokdA1NEBpofQvaxiyQc/UGBadHF5Zl2anPEX83XvwmDAGl/cdkmrWA0N5GOrnA31TE+xZsKzRtCnhopfxHbp3Vcv/QaozkpbFpFU6ip6PrDIwN1WwJoymUllWhiOfroOhuTkmrv1E0eow6iHs/EXcCwpGSnhki07ZubznIAoyn+GdVR+Dw1UJF6H2nD17Fh06dED37t1x8eJFHDhwAACwYMECBAcHIy0t7ZXHBwYGonfv3ujduzdycpoWxkLPxBhcHk9iFN/Th9GorqpCRxaXVqGIR9Lm1OmkfRABLZ02rXa0z40bN5CXp7gpjnZdRYuGSTuStpbEe2H4dvz7+GL4WPy2/utXdtACQFV5BbJSnsKaxaWVCfqmJug9djSmf7sB668HY+GBnzBkxnsoKyrGua0/4JuxU3H/7PkmnzcjLhGFWdlsESgF0ZyZKvHx8UhISAAAZGRkICsrC+bmsh8RbWJtJV40rJbqykokhj5g5UbBGJiboTArW/ybLR6mWByfjyyvLx5tXUJ+Ow1TGyt07t+nJdRi/D97Zx7eVJm+4ZvuBZouSWnpQlvoAqUUChTEFcUBcYFRHAVmRlB+ijqKjjqDg6OICyPOuIsOwyLLgIg7KMgwIqMsxQJtofuWlu5ruu9pf3+kiRS6pG2Sk6TffV1e0uQk54E0yXfe73mf10C4eXtxw+8Xc+bAIfKTU/s8Pj85lbaWFquNPLAYJ62zzAWnkSO6nfAmkIZLnbQCyyMvMZnDH2zh1iceJvV4DGf2H5RaksAMaGls4sA/3uP3/3iFmXfdQcxnX0styaopKCjA399f97Ofn98VRddLi05btmzh9ddfB2DWrFlcd911PProo4wcORIHBwfq6ur4y1/+YjB9ss7P90udtG3NzeQlpoi4FInRfvfWXFKkzdFNvJ3c70LhUGHWrFnEx8dTWFjIM888Q3Jy9/9OA3Gg+0dMoKWxiZIsZb91lSpz+3V8YVoGgZOtd2iGsRkzKZzwG65l/HWz8A8fD0B1aRkX/vs/Un46SUZMrEGuOdJOnibixusZZmMjXF0mZjCdKpcSHR2Ng4MDWVlZBtXnLJPh7DKSisuKtACpx08RfsM1yP39qMjL7+bRAmPj6ulJUfovr3l+isZJ7zchlIyYWKlkDVnGRU+lsbauz46GxO//R21FJbPuuZPU4zEmUicYLPMfXwnD4NC7+sX3tbW0kJeUarXDwyzCJqXqbKUXkQfmRV1lJe3t7bqLeIHlcXTbLjJ/Pstdzz2NYoyf1HIEZkL84e/JjD3HraseFrmjRiY2NpaQkBACAwOxt7dn8eLF7N+/v8sx3t6/fPctWLBA16r5u9/9joCAAIKCgnjmmWfYuXOnQQu0oMmjBbpk0gJkn43HL3w8Ds5OBj2fQH9kCjmtzc001tTqbqutqKT8Yj5BwuXcLefOnSMgIIApU6bw3nvv8dVX3U8OhoE50MdEhFOQktZjXp4hKUxNx8N3NM4yF6Ofy9qYNOcGntizlTn/dx+tjU0cfOefvHH3fbw0ZwH71q7nwn+PGcwUknY8huGuMvwjJhjk+QSGpadOFS3e3t7s2rWL+++/n46Ojm6f48EHHyQ2NpbY2Nh+RQrJ/UYDoLos7gDQFZfGXyvctFJgY2uLi8KjSxdRY00NFfmFwkkrEcEzpvWaR6tF3dbG6S8OEH79Nbh6iTxwS8B3QijTF8znx12f9CtCMyf+Av4Tx3cZpm0tWEaRtjNQ3X30aImVCC6lvU1NvapKOGktmI72dvasWYe6tY3fbliHrZ1FmOsFJuCr197EWebCvEdXSC3FqlGr1Tz22GMcPnyYlJQU9u3bR3JyMuvWrdPlZq5atYrExETi4+NZtWoVy5cvN5k+mVzrpK3ocnv2uXhs7e0YM2miybQIuuKikHdxOGtRxiVYrbNgsNTW1lJfrym+HTp0CHt7e+Ryw6xhbOxs8ZsQ1q882sFQkKqJRPAJDTbJ+ayJyLk3UVNewQvXz2fj8kf4fsuOPiMmBkp6TCzt7e2Mv/pKB6fAuOjbqdLS0gJoOlWmTZumu8/FxYVvv/2W5557jtOnT/d4noFGCrn7aK5rL8+kBc2MgLLcPBF5IBHaqKdL4w4AClLT8RNFWpPjopAzKiigz6gDLac//xqGDWPmXQuMrExgCBY8s4raikq+37Kj74MvISf+PHYODlb5nrSQIm0xIJy05khteYXIpLVwqkvK+OSF9YyJCOeWxx+SWo7ATChKzyL+u/8y5ZaeB1IJDMOhQ4cICwsjODiY9evXA7B27VoOHDgAwJo1a4iIiGDKlCncdNNNpKWlXfEcO3bsuGLwiSFw6SbuADS71+3t7SKXVkJcFB5XFM9Bk0vrIvdAEeDfzaOGNl5eXro/R0dHY2NjQ0XFlf+GA8F73FjsnRzJS0zp+2ADUJjeWaQdPzTzhwfKsGHDCL0qmvSTP3dxoRuLhuoa8hJTCBOOSJMzmE4Ve3t7vvzyS3bu3Mnnn39uFH1yXx+AbuMOANJOxDAueqpVusTMHW3me83lRdqUNDwDx+A4YrgUsoYswdGaPNrM2LN6HV9ZUETaydNctWghNra2xpQmGAQOzk5c97t7CZ4xjf98uJXm+oZ+PT4noXN4WJT15dJaRJG2rlJFa3Mz7t5efR8sMCm15RW4GMiFIpCOxKP/4+S+L7npgd8TclW01HIEZkJ2Z7HHTXz2DllknnIaampo63QaaWmqraMoPZMgkUsrGTJPBbXdFBiVnbm0Y6OGXgF9z549nDp1irCwMPLy8lAoFKxcuZKVK1cCcPfdd+tc6e+++y6LFy822LkHOjRsoNRVqKguLRPDw/qJT1gIIz3cST/1s8nOmXYihjER4SI+yMQMplPlnnvu4frrr2f58uXExcURFxfH5MmG/Uz18POhoaaGptq6bu9PPR6D43BnEV8jAa6jNEXa6tKuzuj8zuFhPmHic9eUjIueSmNNra6DRB9O7fsSVy9Pwm+4xojKBP3Fxs6W8ddexdK/reXFY9/y69VPkns+iZjP+z8Dpa5CRVluHkFR1tc9ZhG9zR0dHVQVlQgnrRlSU17BqLGBUssQGID9f3+HsdOmsOTV53nj7vuoV1VJLUkgMflJmuma/hPH9ysjSGA9uCjk1JR17zRUnksg+te3Y2NnS3ub8TM4BV1xkXugPJdwxe2lylzqVVUETZ3Mz199I4Ey6Vi6dGmXn2NjY9m06ZchFBs3bmTjxo1GOfeYiHDqq6qpyC/o+2ADUZiWga9w0vaL0M6J3+kmHPyTduI0cx9ZQeisaBIOf2+y8wo0nSqHDh3qctvatWt1f16zZg1r1qy54nG7d+9m9+7dRtXm4Tuayvwrow60ZJ05R1tLC+OvuUoMqjIxslGaLNNLM2kBCpI1RVq/CWHdfv8KjENw9FSyz8b3a/hiyo8nqSop5arf/JrEoz8aUZ2gL4YNG0bA5ElMvW0uk+fexEgPdxqqazj37X84d/A/KM/G95j53Rc58ecZf+0sAyuWHotw0gKoiopxHy2KtOZGbXmFyKS1Elqbmvn3n19ghJsr9667csEqGHoUpmfS1tqK30Qx8GSoIlPIu22pB43T2nG4M77jrS8LytyxtbNjpId7j6+NMi6BICts/zJn/CeFmyyPVktBagZeY4Owtbc36XktmbBZMylMz+zxvWMMLiYm01BTQ5jIpRVcgoevD5U9RB0AtDQ2kX02nrBrxO+NqXEd5Um7Wk1dparL7bUVlZoOBivMwDRXZKM88QwcQ+YZ/fJotbSr1Zz+7GvCrp6Jh5+PkdQJesM7eCy3PvEIaw59zuO7NhG98DYyTp9h2+N/4sUbb+ezlzaQfSZuwAVa0MSvucg9rG4AuuUUaQuLhZO2G+bNm0dqaioZGRmsXr36ivuvu+46zp49y7Rp01i0aFGX+9ra2nQtPF9/3X+LOUBNWQV29vYMdxUtXNZAUXom37y5kYk3Xsc1ixf1/QCBVaNubaUoI4sxYir1kMWltyLt2XgAkUsrASPl7oCmm6U7lOfO4xk4RnecwLg4ODvhPS7IZHm0WgrTMrC1t8N7XJBJz9tftm7dSklJCRcuXOj2/htuuIGqqirdmvT55583ig57J0eCpkaSftJ0UQegKRZkxJwRQ6AEXfDwGU1lYc9OWtBEHowOGYeb1ygTqRJAZ5xQeSXt6iu7hApS0vELF0VaUxEcHQVA1s/9K9ICnP7yAHR0cNWihYaWJeiF8ddexdOf7+JPX+5m9vKllGQr2f2XF3lx9m38+88vkHTsOOrWVoOcSxvxFTjFuowJllOkLS5B5qkQ4emXYGNjw8aNG5k/fz7h4eEsWbKECRO6FlMuXrzI8uXLux2M0djYSFRUFFFRUSxcOLAPL+3Fu3DTWg8/7d5Hyk8nueOZx/EOHiu1HIHE5CWm4DdxvNQyBBLhopD3WAisLa+gLDePsdNEkdbUyBSavLwenbTxmkVrkJUtWs0V3wlh2NjamiyPVktBajoAPmaeS7t9+3ZuueWWXo/56aefdGvSl19+2Sg6xk6Lws7BwaR5tFpSj8fg6uUp1lUCQBNXY0iCrfAAACAASURBVO/kSGVBH0XaEzEAwk1rYmSjFFSXlXV7X0FqOqOCArBzdDSxqqHJuOlTaaipoTA9s9+PrS4pI/l/x5lx5+3Y2llEyqdVcNdzf8JxuDNfvPoPXpqzgC2PPs25bw7T3NC/wWD6UJqdQ0NNDYFWlktrOUXawmIA3LzFTqKWGTNmkJmZiVKppLW1lb17915RbM3Nze3RuWAItBfv2imYAutg719fobG2jt+9/pJYhAxx8pNSGC6TIffzlVqKwMQ4Dh+O43BnassrezxGeS6BoKlTGDZsmAmVCbQboz3lBecnp9Ha1CwGzpiIMRGaoWF5SaYt0lZczKe5ocHsh9j89NNPVFb2/DliKkJnRdPa3Ez2uXiTnzvtZGexTUQeCEDXfl2Z33PcAUBJlpKq4hLCrNCF3Vc3qIODA3v37iUiIoKYmBgCAgK63O/v709tbS1PP/20wbW5jvK8Io9WS35yGrZ2dowOGWfw8wquJHjGNE1LfD/yaC/l5L6vcJF7EDHnBgMrMx/MpVsFwHdCKHI/H/77rx2c2Pv5FZEhhqajo4PchESrMyVYUJFWs9Mocml/wdfXl7y8PN3P+fn5+PrqX0hxcnIiNjaWU6dO9eikffDBB4mNjSU2NhaF4spCbI3OSevRT/UCc6auUsXe515mdMg47nj6ManlmIy+Foz+/v4cPXqUc+fOkZCQwPz58yVQaVryLhkeJhhauHh2FgLLu79QAcg+F88IN1cxQNLEyDpfm56ctOrWVi4mJhMUJYq0psA/YgKVhUXUVRj3YuRyOjo6KEzLtIrhYbNmzSI+Pp6DBw8SHh7e43F9rUt7I+zqmSjPJdDa1DxYuf2muqSMoowsxl9rfcU2Qf/x8O0s0vaSSasl9XgMobNmYGNna2xZJkOfbtAVK1agUqlITEzkrbfeYsOGDV3uf/PNN68YCmcoXD0VVJf04KRN+WV4mMC4uHmNQjHGj8zYuAE/R/rJ01TkFzLrN782oDLzwly6VQAib74RdVsbST+YblibMu483sFjcZa5mOycxsZyirRFGietKNIajoCAAKKjo1m6dClvv/02Y8de2YK1efNmoqOjiY6OprybC/XaThePrJ8L5aGMpRQC006e5tiOPVy75G7Cb7hWEg2mpLsFo5OTU5dj/vrXv7Jv3z6mTp3K4sWL+eCDDyRSazqKs7JpbW4Ww8OGIDKFthDYswMu+6xmuvHYqVNMokmgQeukra3o3eXsOz4UB2enHo8RGIYxk8JNnkerpTAtw+ydtH1x7tw5AgICmDJlCu+99x5fffVVj8f2tS7tCReFnNEh4ySJOtCSdvI0Y6dNEe9JAR6+owH6zKQFTeSBs8tIAiZNNLYsk6FPN+jChQvZsWMHAJ999hlz5szpcp9SqSQpKcng2mzt7Rnh7tajk1ZVVEx9VTW+4Za/OWbujIueCkDmz2cH/BwdHR3EfPYVITOn89vXXsTLCk0F5tKtAjDp5tlkn4mnvqraZOfMidc4iAMmR5jsnMbGYoq0VSWltKvVYnjYJRQUFODv76/72c/Pj4KCAr0fX1io2b1VKpUcO3aMqKiofmtobmiguaFROGn1xNIKgQff+Sf5yWksfvk5q4+06G7B6Obm1uWYjo4OZDLNkDxXV1fde8iaaW9TU5iaIZy0QxCZrqW+50JIRV4+NWXlIpfWxMgUcupVVajb2no8RhmXgK29Hf4RPbsSBYNnhLsbcj9fk+fRailITcfZZaSu6GOJ1NbWUl9fD8ChQ4ewt7dHLjfsrIPQWTMASDPx0LBLSTtxGjsHB8ZO7/96W2BdyH19qCmv0MvVnXH6DOq2NsKsyIWtTzfopceo1Wqqq6uRy+WMGDGC1atXs27duj7PMxDnvbZTpaa057VPQUqacNKagHHRU6mvqqY4I2tQz/Pjrk/4Ydu/mXjjdTzz5W7ue+NVRocGG0ilZWCKbhWvsYF4jQ3kwvfHBqm2f+QlJqNuayNwivXk0lpMkba9TU1NWbko0l5CbGwsISEhBAYGYm9vz+LFi9m/f79ej3Vzc8OhcwibXC7nmmuuITl5YBcYteUVuot5Qe9YWiFQ3drKv1e/gJ2jI0vWv2DVuZPdLRgdLhtU+OKLL/K73/2OvLw8Dh48yOOPP97tcw3mC84cyUtOxS98vFW//oIr0bk1e2ip15J9LkFkn5qY3ga6aclJSKS9vV28NkZGu4F1MVGaIm1hagYAPmGW6+ry8vLS/Tk6OhobG5tuB94OhtBZ0dRWVFI0gOEzhiL7bDwtjU0il1aAh6+PXlEHAE21deQmJDLeCnNpB8KLL77IW2+9pdvY6Y2BOO9dR2nm31T3skFdkJLO6JBxVhVBYY4Ez5hK1pk4Ojo6BvU8bS0tfPPWRl6ddxffb9lB6KwZPPP5Lu5/dwP+Q6BT0BTdKqBx0QJc+P5/g5Hbb1oamyhMy7CqXFqLKdKCZniYiDv4BbVazWOPPcbhw4dJSUlh3759JCcns27dOu644w4Apk+fTl5eHu7u7mzatInExEQAJkyYwJkzZ4iPj+eHH37gtddeIyVlYK16teUVuot5Qe9YYiGwLOciX294i9Crornxgd8b7TyWwJIlS9i+fTv+/v7ceuut7Nq1q9vC5WC+4MyR/KQUnEaOQBHg3/fBAqtB5imnrbWVhuqaXo9TnovHfbS3+H42ITKFvM/ieVNtHcUZWYyNsp5FqzkyJiKc9vZ2CpLTJDl/UWY27Wo1vuPNN/Jgz549nDp1irCwMPLy8njggQfw9PRk5cqVANx9990kJiYSHx/Pu+++y+LFiw16/mHDhhE6awYZMbGDvtgfDG0tLWSdjRPFNgHuvt6oCvqOOtCSeiIG/4kTGOnhbkRVpkOfbtBLj7G1tcXV1ZWKigpmzpzJ66+/jlKp5Mknn2TNmjX84Q9/MJg22SjNNVV1afeZtAD5KWnYOTjgNTbIYOcVdMV9tDdyP1+yYs8Z7Dnrq6r57r1/8cq8O/lu42bGTp3Ck3u38eCHbxFoRQW+yzFFtwpo8mhz4i/02oFnLJRx5xkzaaLVbJxYVpG2uEQ4aS/j0KFDhIWFERwczPr16wFYu3YtBw4cAODMmTP4+/sTFxeHQqEgIkKT1XHq1CkiIyOZMmUKkZGRbNu2bcAaakSR1qCYYyHw9BcHiDt0hNuefITrfnuPUc8lFd0tGFtaWrocs2LFCvbt2wdATEwMTk5OVuGU7QsxPGxo4qJHIRB+yaUNEpEHJsNFIaemrO/XRhl3noApk7CxtY5FqzniPymckiwlzQ0Nkpy/rbmZUmUuPmZcpF26dCk+Pj44ODjg7+/Ptm3bKCsrY9OmTQBs3LiRiIgIpkyZwqxZszh16pRBz+8dMg6ZQi5pHq2WtOMxjAoKsOh4CsHgGGZjg7u3NxX9KNKmnYgBIPTqGcaSZVL06Qbdv38/y5YtAzQbOUePHgXg+uuvJygoiKCgIN5++23Wr1/Pxo0bDabNtTPeraaPIi2AX7iIPDAW2liYTAMWabU01dZx5J/beGXenXz79gf4hYfx+K5NPLzlPV0OrjVhim4VDz8ffCeEcv7IDwZ9Xn3Jib+Ag7MTPqHmuxbqD5ZVpC0sxs3Li2E2FiXb6qktr9Dl9wh6x5ILgR8/9zLnj/zAr5/9Izc/tFxqOQanuwVjVVVVl2MuXryoG1wwfvx4nJycKCvreRFnLZQqc2luaBTDw4YYMj0LgUUZWTTW1Frd8LC+hjw6ODiwd+9eMjIyGD9+PAEBAYBmKGdDQwNxcXHExcXx4YcfGlybzFO/ArryXAJOI0YwOmScwTUINIyJkG5omJbCtAx8x1tu3IGxCdPm0Z6KlViJZngYQNjVwk07VHHzGoWtvZ3ecQegaa+vrai0Ghe2Pt2gW7duRS6XExERwVNPPcWzzz5rEm2uozxpa2nptYuo4mI+TfX1IpfWiATPmEq9qoqSzGyjnaO5voGjW3fx6i138fXf38FrbCCPbtvIo9s/wMllpNHOa2ik7lYBiJwzG8DkebRacuLPAxBkJd1jFlXtVBUWY2tvJ1ybZkZNWQXDZTLsLmvbF1yJJRcC1a2t7PrT85zZf4j5j6/ktj8+KrUkg9LdgrGpqanLgvHpp5/mwQcfJD4+no8//pjly5dLK9pEtKvVFKam4x8unLSGpq9C4LJlyygtLdUV/FasWAHA5MmTOXnyJImJiSQkJHDPPYZ3uLso5NTqsdPe0d6OMv48Y6dZT5G2uyGPEyZ03aRYsWIFKpWKkJAQSkpK2LBhg+6+rKwsoqKiiIqK4pFHHjGoNmeZC3YODn1m0oLGSQsQNNU6Fq3mhruPNyM93CXLo9VSkJqB+2hvhrvKJNVhroRePYPizOxenXGmolSZS2VBEWHXiFzaoYrWRV3ZDydtR0cHaSdOE3b1TKuZD9BXN2hzczP33HMPiYmJzJw5E6VSecVzrFu3jjfeeMOgumSjFFT3MjQMNK9HQWo6vqJIazTGTTdMHq0+tDQ28ePOvbx6yyIOvPE+46ZFMXH2dUY/r6GQulsFNHm0+clp/fpcMyTVJWVUFhZZzfAwyyrSFmledA+Re2dWaN08LgoPiZWYP5ZeCGxXq9n715c5sfdzbnrg99z13DNWs1iEvheMKSkpXHvttUyZMoWoqCiOHDkipVyTkpeUiu+EMNHJYED0KQQCfPLJJ7qC39atWwFoaGjgvvvuIyIigltuuYW3334bV1dXg+rTt6UeNI5Nr7GBjHB36/tgC6C7IY8LFy7scszChQvZsWMHACqVSre5Zmxkeg50A6gqLkFVVExQlIiiMAZjJk0ENJOFpaQwLR0AnzDraPMzJHaOjoydOoU0M4g60JJ28jQhM6dbTXaeoH94+PkAUJnfv8HAqSdiGOnhLgqDRkbmqdBrQ6cgJR2fsGCxLjYC7j7eyP18jBJ10BttLS38b+fHtDQ2CZd0P5CN8iRwyiTJXLRacuMvECictKZHVVgMIHJpzYyaCm2RVjic9cHSC4EdHR188eo/OLp1J9csXsTiV54XeYdDgLzkFByHOzMqKEBqKVaDPoXAnsjIyCAzUzOlvKioiNLSUjw9PQ2mzcbOlhHubnoVAuGSXForKQZ2N+TR19e312Oqq6t1gxiCgoI4d+4cx44d49prr+3xPAMZAKn9rtV3MIMy7rzVvC7mxpiIcFqbmylKz5JUR2Ga5rPAnHNppWLs1EjsnRzNIo9WS+rxGJxGjiBwsnU4fgT9w8PXh3a1mqrikn49Lv3Uz7S3tzP+WuuIPDBXXEd5Uq3H92tBSjqOw4fjKYbqGpzgzlxYQw4N05eO9nYK0zPwnSAihPRl0k3XA0iWR6tFGX8BN69RVjHIWK8i7UDbMQHa2tp0t3/99deDEqsqEkVac6S202klM4PcVIHp+PbtDzn4zj+ZvmA+v//7y9ja20stSWBE8nXDw0QuraHQpxAIsGjRIhISEvj000/x8/O74v7o6GgcHBzIyjJcoWikhwc2NjZ6tdQD5CWl0NrczFgxPIyioiLGjBnD1KlTeeqpp9izZw8uLi7dHjuQAZDaDPjaikq9jleeS8DVy1OsnYyAf8QEClLTUbe1SaqjrlJFdUkZvmHiovJyQq+aQVtrK9ln4qSWoiPz5zOo29oIu1pEHgxFPHxHU11a1u/PjXpVFflJqVaTS2uuyEYpqOkj7gB+GR4mnM2GZ1z0NOoqVRQbMY+2NzQu6RCr6hY1JpNunk1xlpJSZa6kOnI6I76sIfKgzyLtYNoxARobG3W36+sQ6omWxibqVVVWUR23JmpE3MGQ5fstO/jyb28S+asbeeDd17F3cpRaksBIlOVcpKm+Hv+JIpfWlBw4cIDAwEAmT57MkSNHdO31Wry9vdm1axf3339/j7ldA3Fryjo/z/V10qpbW7l4IZmgqdZRpO1uyGNBQUGvx7i6ulJRUUFLSwuVlZoC6rlz58jKyiI01HDFMxd5f520nS5nK3ltzAUbW1v8wsdLPjRMS0FqunDSdkPo1TPIiTtPS2OT1FJ0NNXVk5uQSJhwRA5JPHxGDzi3MfVEDAGTI3CWdb/xJxgcjsOH4zRiBDV6zAIpzc6htalZtMUbgXHRUWRJuLFWkJqOs8tIPHx9JNNgKYxwc2Xc9CjJow5AM8i4uaHBKiIP+izSDqYd0xioikqEG8TMqKtU0a5WI/MUTtqhyPE9n/LJ868SOiuah/75Nk4jR0gtSWAEOjo6yE9Ow08UaQ2GPoXAyspKWlpaANiyZQvTpk3T3efi4sK3337Lc889x+nTp3s8z0Dcmi6dxVx9M2kBss/F4zs+FAdnZ70fY650N+Rx//79XY7Zv38/y5YtA8Dd3Z2jR48CoFAosOnMqAsKCiIkJITsbMO5QWSeClqbmmmqq9fr+OJMJY01tSLywMCMGhuI43BnyYeGaSlIS8crKFAMcb2EkXJ3fMeHknbSfKIOtKSeiME/fDwjPdylliIwMR5+PlQW9C+PVkva8RhsbG0JmTndwKoEoHHRAlTrkUnbrlZTmJ4p2uINjIefDx4+o8n8+axkGgpSNDnv4rXtm4k3Xo+NrS0XjhyTWgrtajW555OsIkqozyLtYNsxnZyciI2N5dSpUz0Wd/vj8lEVFQsnrZnR0d5OnapKOGmHMD9/9Q3/Xr2WgMgIHt7ynpgwbaXkJ6XiGxYqhp0YCH0Kgd7ev3zfLViwgJQUjWvP3t6eL7/8kp07d/L5558bXFt/nbQAyrMJ2NrZETglwuB6TE13Qx6Tk5O7DHncunUrcrmcjIwMvL29efbZZwG4/vrrOX/+PHFxcXz22Wc8/PDDqFQqg2lzUXhQo2exHTTf0TkJFwiyAmeBOTEmIhyAixfMo0hbmJqBrb0dXuMCpZZiNoReFQ1A+qmeN7GkIu2ERlPo1TMkViIwJbb29sg8Ff0eGqblYmIyDTU1LHtzPX/7+Qde+uk7nv/v1zz7zT6e/nwXq3Zv4ZGt7/N/H7zBsjfXs/Rva4ma/ysD/y2sF63hqFqPuAPQOC6HUiFv69atlJSUcOHChR6Peeedd8jIyCAhIYGoqKh+nyN4unR5tFqKM7NRt7bhO37ovLYDZdLNN1CRX0hBarrUUgDIib+AT1gwjsOHSy1lUNgZ4kkOHDjAxx9/TEtLCw899BA7duzQTTkOCAigsLCQoKAgjh49yoULF65wlGzevJnNmzcDmovW3lAVFhNyldg9NDdqyypEJu0QJ+Hw97Q0NLLsrfU8+tEHbHroiX4VeATmT15SCvZOjniNDaIoPVNqORbPpYVAW1tbtm3bpisEnjlzhgMHDrBq1SoWLFhAW1sblZWVLF++HIB77rmH66+/Hrlcrrtt+fLlJCQkGESbS+eFir65p6BZGLWr1QRNnUL6qd6/yy2BQ4cOcejQoS63rV27Vvfn5uZm7rnnHkCzdlEqlQB88cUXfPHFF0bTJVMoqC3X/3UBUJ47z61PPIyzTEZjTY2RlA0t/CMm0FhTS8XFfKmlAFCQmgGAb1iozgU01AmdNZN6VZVZ/nsUpKTR3NCA/8QJnPvmsNRyBCbC3ccbGxsbKgYYd9CuVrPrmecJmjoZe0dH7J0cdf936PyznZMjI9zdsHd0ZISbK1G3zqWlsZGkY8cN/LexPly9NANY9Y0TKkhJ4+p77sTDd+ARFpbE9u3bef/999m5c2e398+fP5+QkBBCQkKYOXMmH374IVdd1b9Yl3EzplJbUUlJdo4BFA+MtpYWSrKV+IaLKIvecBo5gtBZMzi++1OppejIiTuPja0tYyaFk3H6jNRyBkyfRVp92zG1bNmyhddff133c2GhZqdQqVRy7NgxoqKiBtX2pyoqxmnECHGhYWbUVFQIJ62AlJ9OsvmRp1jx/t95ePO7/GPR7+lob5dalsBA5F0yPEwUaQ1DX4XANWvWsGbNmiset3v3bnbv3m00XTKFnPqqatStrXo/prmhgYLUdMZOm2I0XQKNk7Y052K/HqOM/2WYQsqPJ4wha8gxJiKcvKSUHrOgTU1lfgFN9fUil/YSQmdFkx4Tazav0aV0dHRQmnORUYEBUksRmBB5Z8blQOMOANJP/Uz6Kf0iPOwcHXlsx4csfe1F3v3tg5RkKQd83qGAa+cGtT6DwwDyk38ZHjYUirQ//fQTAQE9f2YtXLhQV8A9ffo0bm5ueHt7U1xcrPc5gqOnSuqi1VKQmk6YGNLXKxOuvwY7e3su/PeY1FJ05J5PpL29ncCoSIsu0vYZdzCYdkw3NzccOrOx5HI511xzDcnJg2sLUxVqPgA9RC6tWVFbViEyaQWApj3l03Ub8A4eS8jMaX0/QGAxVOTl01hTK4aHDQFcFHK9nSSXkn0ugYBJE7G1tzeCKgFo2jH726WQl5hMW2srY6eKyANDYOfoyOjQcWYTdQCaol9RWqYo0nbiHTwW11GeZu3qL1PmMipIFGmNybx580hNTSUjI4PVq1dfcf+yZcsoLS0lLi6OuLg4VqxYobvvvvvuIz09nfT0dO677z6D6NEOIlKZqKDX1tzMR0+spqWxiQfee13EkfWBzNOTprp6mhsa9Dpe2xYvhodp0Dcms6eoS7m/H27eXmT+bAZF2pR0ZAo5Lgq51FLMlsibZ1NdWkbu+USppehoqqunODOboCmWnUvbZ5FWn1y2VatWkZiYSHx8PKtWrdK1Xk6YMIEzZ84QHx/PDz/8wGuvvaYr4A4UVZFmJ0YMDzMvasorcPHwYNiwYVJLEZgBF/57jIbqGqIX3ia1FIGByUtOFcPDhgAyhbxfUQdalGfjsXdyxD9c/I4YA1t7e4a7yqjpZ5G2tamZ/ORUMTzMQPiOD8HWzs5shoZpKUjLwDcsVKzFgNBZmqxXfR2HUlCizMXDdzT2To5SS7FKbGxs2LhxI/Pnzyc8PJwlS5YwYcKEK4775JNPiIqKIioqiq1btwKaYZBr165l5syZzJgxg7Vr1+Lm5jZoTR6+3rS1tlI9gE3QgVJdUsb2J5/FzWsU9/3jVTFXoBdkoxT92qBua2mhOCtbtMX3k54G2gZHazJss86YQZE2VQwP6w0HZyfGXzuLxKM/ml23Sk7cecZERjDMps9Sp9mil/JDhw4RFhZGcHAw69evBzTtmAcOHAA07ZgRERFMmTKFm266ibQ0jfX/1KlTREZGMmXKFCIjI9m2bdugBasKO4u0YniYWVFbXo6tvR3D3VylliIwA9paWog7dIRJc2bjNHKE1HIEBiQ/KQWfsBDhlLRyBuqkVcZp2uqDpolioDGQdTo6agfy2pw7j3/EBOw6O5wEA0c7NCwvcXDGA0NTmJqO08gROrfeUCb06hmUKnOpKi6RWkqPlCpzAfAMGCOxEutkxowZZGZmolQqaW1tZe/evT0Osb6cefPmceTIEVQqFVVVVRw5coRbbrll0Jo8fH1QFRabPAosNyGRT9dtIOSq6Sx4ZpVJz21JuI7ypLq0rF+PKUhJF07aTvSJyeyNoKlTqCkr1302SomuSCuGh3VL2NUzcXB24vyRH6SWcgU58RdwdhmJd3CQ1FIGjMWVl+urqmlpbBJOWjOjpnOIiWgJEGiJ/epb7J0cmTxvjtRSBAYkLykVO3t7RoeMk1qKwIjIFPJ+D6cCqKtUUarMZezU7nNpbWxtsbWzw87BAXsnRxyHD8fWziAzTIcE2uz3mgG8Nsq4BOwcHPATLudBM2ZSOFUlpQPayDAm2uFhQz3ywNbennHTokg7eVpqKb2iLUSIyAPjoG/r9aJFi0hISODTTz/Fz8+vX4+Fnlu3u8PD12dQebSD4cz+gxzbsYfrfnsPMxctkESDuSPzVPS/SJuahovcQ8T+Afv379dFg8ycOZPq6up+5dF++uLf2Hj/o8aS1y+a6xsoy80TBfgeiPzVjdSrqsg+Gy+1lCvQzWGYbLkRXxZ5ZaQqKhZOWjND6+qRKeQUZ2RJrEZgDuQlpVCcmU30wts4/fn+vh8gsAjykjTOMf+JE8hPTpVYjcAYOI0cgb2TIzXlAytAZZ2NY9bdv+a1M8cYZmODjY0NNrY9t1c21tSy+dGnyE0wn0wrc0W7EVo7gNcmJ/4CAEFTI8npXMAKBoZ/RLhZ5dFqKc5Som5rw3d8qFkN8jA1QVGRODg7mXUeLUB5bh7t7e2iSCshBw4c4OOPP6alpYWHHnqIHTt2MGdO/8wFmzdvZvPmzYBmlktvePiO5sL36QPWO1i+fesDvMeN5a7nnqFUmYvyXIJkWswR137GHQDkJ2vb4sPMbuPO0OzZs4fZs2ejUCjIy8ujra2NlStXArBp0yYOHjzIrbfeSmZmJg0NDdx///39en51WxvluXl9H2giClLTxRyObrC1t2fC9ddw/sgPtKvVUsu5gsr8QmrKKwiMmsSpT7+UWs6AsMwibWExbqO9pJYhuAThpBV0R+zXB7nj6cdQBPib1ZeuYOCoCoupV1XhP3E8pz6VWo3AGGjdIANx0gL8sG03jdU1ALS3d9DR3q77r72jgw51Ox0d2ts6mHXPnTzw7uu8+7uHqMjLN9jfwxqRdbq0BuKkrVdVUZKdw9X33kVVcSkJh783y8X1YNi6dSu33347paWlTJrU/dCId955h1tvvZWGhgaWL19OXFxcv87hLJPhGeDPz19+YwjJBqWtuZlSZS4+YUPbSRt29QzUrW1mMSG8N9paWqgsKBRFWiOhT+t1ZeUvn6Vbtmzh9ddf1z129uzZXR577NixQelxcHZmpIe7ZE5agHa1ml1/fp4ndm9h2ZvreWfJCt28l6HOCDdX7BwcqCntX6G1MC2D9vZ2/MLDSPnxhJHUmQdLly7t8nNsbCybNm3qcttjjz1mSklGpSAlnSnz5uDkMpKm2jqp5ZgNIVdNx9llJOf/a35RB1py4s4TFGW5TlqLizsA4aQ1R7STpmWeokgr+IWz33xHu1pN9IJbpZYiMCB5SWJ4mDXjIu9sqR+gI6QiL59vBfJRgQAAIABJREFU3/6Qb9/+kEPv/pPv3v8Xhz/Ywn/+uY3/bvqI77fs4OjWXfzw0W6O7djD5kf+yLBhw3jwgzcYIXLNe8VF4UF7ezt1lQMroH/+8us01zfwuw3rWL1/LzPvusOq4ia2b9/ea27k/PnzCQkJISQkhIceeogPP/yw3+fQumryzGxomJaC1HR8h3jcQcisGeScv6D3hHYpKVXmiiKtkYiNjSUkJITAwEDs7e1ZvHgx+/d37ezy9v7lenLBggW6AdeHDx9m7ty5uLm54ebmxty5czl8+PCg9Hj4abKiKwuKBvU8g6Wpto5tq/6Mnb0997+7AQdnJ0n1mAuyUZpN0P4OdWtpbKQs5yJ+YsCU1aHLpR3iG5+XEzlnNo21dWTEnJFaSo8o488j9/PVXdNYGpZZpC0sxkXuIaahogm2T01NJSMjg9WrV19x/3XXXcfZs2eZNm0aixYt6nLffffdR3p6Ounp6br8mIHS0thIU329cNIKulBbXkHqiRimL5hv9hMW+3ovAfzmN78hKSmJxMREdu/ebWKF5kNecgrewWOxcxSfwdbIL07aCpOcr/xiPtse/zNuo724/93Xxe9VL8g8FdSrqmhvG5gDNutMHG8s+j0fPfEsjbW13LNuDWsOfca1S39jFWuqn376qYsz7nIWLlzIzp07ATh9+jRubm5dijT6MGZS59CwJPMaGqalMDUDN2+vIbvhMcLdDf/w8aSf/FlqKXpRqsxlVGAAw4YNk1qK1aFWq3nsscc4fPgwKSkp7Nu3j+TkZNatW8cdd9wBwKpVq0hMTCQ+Pp5Vq1axfPlyAFQqFS+//LIua/all15CpVINSo+Hz2gASZ20WspyLvLv1S8wOmQci195Xvz+ATJPTwBqSvqXSQtQkJKGjxgwZXUUpKYBmigLgQYbW1sibrqelB9PoG5tlVpOjxSkaArso0Mtc4aKeVdNekBVpNmBHOpuWhsbGzZu3Mj8+fMJDw9nyZIlTJgwocsxFy9eZPny5VRUdL3Ydnd3Z+3atcycOZMZM2awdu1a3NzcBqWntqxCN3laINAS+/VB3Ly9CJk5TWopPaLPeyk4OJi//OUvXHPNNURERPDkk09KpFZ68pNSsbWzwycsWGopAiOg3WyrMVGRFiAn4QJ71rxEUFQkS14VF4w94aLwGHTxvKOjg8Sj/+PtxQ/wr5VPUlFQyJ1/eYrnvvuCm1b8HscRww2k1vwwxDAg/4gJlCpzaaqrN7regVCY1jk8bIg6f0JmTgcg/ZTlFGntnRxFjJuROHToEGFhYQQHB7N+/XoA1q5dy4EDBwBYs2YNERERTJkyhZtuuom0tDTdYz/66COd83779u2D1uLhqy3SSuuk1ZJ6PIZv3tzI5Lk3cfPK/mWHWiOunlon7UCKtOl4+Iwesptj1kpdhYrqkjJ8RQFeR9DUyYxwd+O8mefel2QpAfAaGySxkoFhmUXaQk12zlAv0s6YMYPMzEyUSiWtra3s3buXhQsXdjkmNzeXCxcuXPHYefPmceTIEVQqFVVVVRw5cqTXFkF9qKmoEE5awRUkHztOQ3UN0Qtvk1pKj+jzXnrwwQfZuHEjVVVVAJQNYBFnLVw6PExgfcgUclqbm02ev3X+P0c58I/3mDJvDrf98Q8mPbelIFMoDOpwTjt5mg+WP8r7yx6mICWd2558lL/+50vm/eFBhrvKDHYeS2Tz5s1ER0cTHR1N+SWD2sZMmmiWQ8O0DPUibdjVM2moqSEvyTIGW5YqcwEYFRQoqQ6B8fHw86G5oZG6ysE5cg3J/3Z+zJn9h7jlDw8yac4NUsuRFJlXp5O2rP/fsfkpWselKOZZGwWp6eJ1vYTIX91IS2MTaSdipJbSK3WVKupVVXiNE0Vak6EqKgHA3WdoF2n74wgZ6GN7cpJ0h3DSCrqjraWFuENHmDRnNk4jR0gtp1v0eT+EhoYSGhrK8ePHOXXqFPPmzevx+frzvrFEqkvKqCmvEBNPrRQXhXzAQ8MGy7Edezj+8WfceP9vufreuyTRYM64KDyM4nBWnktg8yN/5K177yfz53PMffgB/vqfL7lpxe8Nfi4p0WeQUG+4eY1CppBz0UzzaAHqq6qpKi7BZ4jm0obOiiYj5gwd7e1SS9GLspyLACKXdggg9x1tFlEHl/PputfIPZ/EkvVrGR1qug6pvmLGHBwc2Lt3LxEREcTExBAQoHmP3HzzzZw5c4bz589z5swZbrzxRoPocfVUUFepGlALty67VLTFWx0FqemMCgoQUVzAsGHDmHTTDaSeiKGlsUlqOX1SnK3Ea2yg1DIGhEUWaWvKylG3tQ15J60p6MlJ0h015cJJqw9DMfs09qtvsXdyZPK8OVJLGTB2dnaEhIQwe/ZslixZwubNm3F17b6tqT/vG0slPykVv3BRpLVGZJ5yaiT8vf3qtbdI+uEn7vzLU4TfcK1kOswRTQHdeDEU+cmp7PjjX3j910vJOH2G25581KrcVfv379dl8M+cOZPq6mqKi/WfbK4I8Ke1udmsnbQABakZZteeuXXrVkpKSrrt7tLyzjvvkJGRQUJCAlFRUf0+x6igANy8vSwm6gA0bp+G6hpRpB0CePj6mE3UwaW0tbSw/clnaaqtY/lbf8POwcHo59QnZmzFihWoVCoSExN566232LBhAwDl5eXccccdREZGsmzZMnbt2mUQTbJRigEPTG2sqaUivwA/UaS1OgpS0rC1s2N0iGVmmxqSMZETcfXy5MJ/f5Bail6UZOXgHTxWahkDwiKLtO1qNdUlZUM+v2kwjpDBukm6o7a8AmeXkVYxfMRYdLcocXLqOlXVGrNP85JSKM7MNtvIA33eD/n5+ezfv5+2tjZycnJIT08nJGRoOpVA85p6jQ3EwdlZaikCAyOlkxago72df69+gfyUNH73+ktiM6CT4a4y7OztB9SK2V9KspTsfOo58pJS+M2Lf0E2ytPo5zQEe/bs4dSpU4SFhZGXl4dCoWDlypWsXLkSgIMHD5KdnU1mZiabN2/m0Ucf7dfzZ/58lueuupn8ZPNupS9MyzA758/27dt7jdWaP3++Lv/zoYce4sMPP+z3OUJnzQAsJ49Wi2Z42BipZQiMjKZIa35OWtAYoD5+7iUUY/yYvXyp0c+nT8zYwoUL2bFjBwCfffYZc+ZojB7x8fEUdc6nSUpKwtnZGQcDFJZlngqqB1ikBchPTjO7zTHB4PnFJW2+r60pNkEBJs2ZTVtrK8n/OzFQqSalJEvJcFcZI+XuUkvpNxZZpAVQFRUP+biD2NhYQkJCCAwMxN7ensWLF7N//369Hnv48GHmzp2Lm5sbbm5uzJ07l8OHDw9Kj9bdI9y0PdPdouTygW3Wmn0a+/VBgqIiUQT4932widHnvfTVV18xe/ZsAORyOaGhoWRnZ0ug1jzIS0rFxtYW3yHaUmvNyBTyAbtJDEVLYxPbHvsT9aoqVmz8x5D/vgfNBSRgVCftpajb2vj36rXYOTiw9NUXLGKY29KlS/Hx8cHBwQF/f3/Ky8vZtGkTmzZt0h3z2GOPERwcTGRkJGfPnu33OdRtbWbfSl+Qmo6tnR3eZpTF9tNPP1FZ2fPmz8KFC9m5cycAp0+fxs3NDW/v/r3vw66eSVlunlm6FXujVJkrnLRWjrNMhtPIEVQWmu/vZsbpMyT85yhz/m+Z0btV9YkZu/QYtVpNdXU1cnnXa8xFixZx7tw5Wlpauj1Pf+LHXEd5UlM68LVPQWo6noFjrHr45lCksqCIhpoasy7Am2ITFCDyV7PJiIk128Gpl1OSnQNY5vAwyy3SFhYP+bgDtVrNY489xuHDh0lJSWHfvn0kJyezbt067rjjDgCmT59OXl4e7u7ubNq0icTERABUKhUvv/yy7ovrpZdeQqUaXJC91t0jk4sibU90tyi5fPdX3+xTS8s9PfvNd7Sr1UQvuFVqKVfQ03vJx8dH9146fPgwFRUVJCUl8cMPP/CnP/2p1wtOaye/c3iYnxgeNmj6ikBZtmwZpaWlxMXFERcXx4oVK3T33XfffaSnp5Oenq5r4x4MtnZ2jHB3o7ZC+t/t2opKNj/yR+wc7Pm/D97EWeYitSRJ0W6AGiOTtifKc/P4esNbhFw1nRuWGd9dJTAMhama4WGWtIk22FkJtnZ2jIuOsjgXLUCpMgeZpwInl5FSSxEYCbnfaAAq8823SAuw/+/vAnDHM49LrKRvwsPD2bBhg65Tojv0jR+zsbXFRe5BdenAjTEFncPDAidPGvBzCMyTgpR0sy7SmmIT1CcsBLmfL+ePHBuMVJNSkqUEMKsNa32xk1rAQFEVFeM6yhMbW1va1Wqp5UjGoUOHOHToUJfb1q5dq/vzmTNn8Pf3JzY2lujo6C7HffTRR3z00UcG06K9cHTxFEXawXBp9qmfnx8//vgjkyZNorq6ustxmzdvZvPmzYDGCWru1JZXkHoihukL5vPdxs1m50Tq7r1UWFjIgQMHdD8//fTTPP3006aWZpbUVlRSVVwihocNEm0Eyq9+9Svy8/OJjY1l//79pKSkdDnuk08+4fHHu140ubu7s3btWqZPn05HRwdnz55l//79Ohf+QHCRewBI7qTVUqrM5aMnnmXlv95h+Vt/418P/3FAQz2sAZkERVqA018cYPy1s5i/aiUZp2MpSEk36fkF/aeyoJCmunp8zPiicqD0tPYJmDIJx+HDLbRImwvAqMAxZp93LBgYHr4+AGYbd6ClqriE77fuZP5jDxEyczoZp88Y5Tz6xIxdeoytrS2urq5UVGi+/3x9ffnyyy+57777DNLVNtLDHRtb20E5afMSU2iqq+f/PniD1BMx/PzlNyQfO466rW3Q+gTSUpCazjX3LrLYulNPm6D9yeSP/NWNtKvVJB37yRgSjUJNWTmNNbV4WWCR1oKdtEXY2tnhaiE5aUMBbQumTMQd9Eh3i5LLW3SsOfs09uuDuHl7ETJzmtRSBAYgLykVf+GkHRT65LL1xLx58zhy5AgqlYqqqiqOHDnSa7uTPmjdmlJm0l5O9pk4Pnn+FYJnTOPel9ZILUcydK+NCTJpL+fTda9RV6nidxtewsHZqe8HCCSlo6ODwrQMfMMsZ+0w2FkJYbNmoG5rI/Pn/kdYSE2JtkgbFCipDoHxsJQiLcCxj3ZTnpfPr5/9IzZ2tkY5hz4xY/v372fZsmUA3H333Rw9ehQAV1dXvv32W5599llOnjxpED3aOKGaQUTM1VdV88bdv+f7LTvxCQ1m+Vt/44Xv97Pgz0/gLYZOWTQFqenYOzkOiVianrpVJs25gawzcdSrBm4EkYKS7By8xgZKLaPfWG6RtqgEQOTUmRH1qirUbW3CSdsL3S1KLne9WXP2afKx4zRU15jtADFB/8hLSmFUUIDI3xoE+rb4Llq0iISEBD799FP8/Pz69dj+RKPIOj+/zcVJq+Xct//h4Lv/ZNrtt3DN4kVSy5EEmaec5oZGmhsaTH7uhuoaPl7zEooAf+54ZpXJzy/oPwWp6YwOC7aILGHQFGS0kS0zZ86kurq6Xy6f43s+ZduqP1tMVt6lVBYU0tbaOiQKAEMVD9/RNFTXWMTvZ1tLC/tffwfv4LFcu+Q3RjmHPpF9W7duRS6XExERwVNPPcWzzz4L/JIr/sILL+hioDw9B2facvXSPL56EE5a0OSXfvf+v3hl3l386+E/khl7jmsWL+JPX/ybJz7eyqzf3CliTSwQbQeROUce9EZ/NkF7igjZ/4/3OLLJcB3YpqIkSymctKZEVaRZuA31XFpzoqOjg7oKlcik7YXuFiVNTU1dFiXWnH3a1tJC3KEjTJozG6eRI6SWIxgk+UmaCed+E8IkVmLdHDhwgMDAQCZPnsyRI0d00471Rd9MNrjErVlherdmX3y/eQepx2O47Y9/QDHGT2o5JsdFITfZ0LDuyPz5LP/bvoer77mTiJuul0yHQD8KUzNwGjECD78rN26kYM+ePZw6dYqwsDDy8vJQKBSsXLlSlyd58OBBsrOzyczMZPPmzTz66KP9ev7aikpSfzplDOlGp71NTfnFfFGktWI8/HyosAAXrZakY8dJOX6KuY+sMNpk9EOHDhEWFkZwcDDr168HNJF92pix5uZm7rnnHhITE5k5cyZKpSZf8tVXX2XkyJFERUXp/hvskGWtk3YwmbSX0tHeTtqJGHY981deuukOvnrtLewcHLj7hT/z4tFvWPq3tQTPEF2FlkJZzkVam5rxnWCZRdrBboICpJ2IISv2nDHkGZXibCUucg9GuLlKLaVfWHCRVuOkdRvtJbESwaXUVFQIJ20f9LUoAU326cSJE4mMjOSTTz6RSqpRiP3qW+ydHJk8b47UUgSDJD9ZU6QVkQcDR5/d7crKSl0sypYtW5g2bZrej+0vMl2R1jw3hj5Zux51WyuLX3meYTYWu4QZEDKJi7QAh97bRF5yKve8+BfdRa3APClI0zp/zCPyYOnSpfj4+ODg4IC/vz/l5eVs2rSJTZs26Y7ROuQiIyM5e9byYgsGQ6kyVxRprRi5rw+qAvMeGnY5X732FvZOjtz2ZP82TCwR11GetKvV1FUOboh2d9RXVfPT7n28sej3vHXvcn7+6hvCr7+GR7a+z+1PPWbw8wkMT7tarYkQMlMn7eWboA888ACenp4G2wS1ZEqycgAYZWGRBxZ7hdPW3ExtRaWIOzAzassrdE4sgaA78pJSKM7MFpEHVkB9VTUV+YX4ieFhA0afXLZLJ7AuWLBAN1Ts8OHDzJ07Fzc3N9zc3Jg7dy6HDx8elB4XhZy6ShXtbeY5GKGmtIwv//YmQVGR3HDfEqnlmBQXhdzkQ8MuR93Wxu7Va7F3cmLJq89bTCv9UKQkKwd1axs+ZlKkFfROqTIXhb+f0TJABdLiPtqbSgsr0pbn5vHjzo+Z8evbGRM5UWo5RsV1lCe15ZVGH2qcn5zGF6/+gxdvuoOfv/qGG+5bbLHuzKFGQWq62RZpL98E3bZtG2VlZWITFE3cAWBxkQcWW6QFUBUW4yHiDsyK2rIKMThM0CexXx8kKCoSRYB/3wcLzJr8ZDE8bDDok8u2atUqEhMTiY+PZ9WqVSxfvhwAlUrFyy+/rMubfemll1CpBucCkXlKXwjsi3PfHOb8kR+Y//hDeAePlVqOyTAHJy1o2v6+fv1tQmfN4Lrf3yu1HEEPtLW0UKLMwTfMPC8qBV0pVeZia2+H3EziKQSGw0Uhx97J0SKGhl3OkU3bqS4p4641T1t194rMU0H1ICMT+kNbczNfv/4OdZUq7n5htVX/21oLBanpOMtc8PDzkVqKoB9UFZfQVF9vccPDLPoTQVVUjLvPaKllCC6hpqKCkR7u4stG0Ctnv/mOdrWa6AW3Si1FMEjyklJQjPHDWeYitRSLpa8IlDVr1hAREcGUKVO46aabSEtL0z32o48+IiQkhJCQELZv3z5oLS5y8ygE9sXnr/ydxto6lrz6wpBwntk5OuIsczGbAnrMZ19z4fv/cdsTj+ATJpya5kphqvm2Zwq6UqrMBRCRB1aI3FdT1LGkTFotLY2NHHjzffwnTmDGnbdLLcdoyEYpqDFQHq2+NNXW8fXr7zAmIpyr773LpOcW9B9LHx42lCnNzsVbOGlNh6qwGDdvkUlrTtSWVWBrZ8cId8sKZxaYltryClJPxDB9wXxR0LdwdMPDwkXkgTXg4imnpsw8CoG9UVep4rOXXscvPIybH1wutRyjI1N4AJrvWHPh0xf/Rn1VNb/dsA57J0ep5Qi6oSAtHVcvT0Z6GGfwj8BwlOWIIq214uGnMRRV5ltekRYg7uB/yDobx62rHrbaDXlXTwXVpb0PVjUG8d/9l7QTMdy66mGR827mFGVkoW5rE/EUFkhJthKvsaJIazJURcU4ODuJxacZoXX5uMhF5IGgd2K/PoibtxchM8V0U0smP0Xj6vQXubRWgUwhp7bCfAqBvZF49H+c2X+Imx9ajl94mNRyjIo2673GjF6b+qpqPn7uZbzHBXHH049LLUfQDYWpGQD4hAVLrETQF0119dSUlTMqUBRprQ2PTidtZWH/pqmbE1+uf5PhrjJu+cODUksxOHYODoxwd6OmzPRFWoDPX/kHtnZ2LFz9pCTnF+hHW0sLpcpc4aS1QEqylLh6eeLkMlJqKXpj8UVaQLhpzQity0fsBgr6IvnYcRqqa8QAMQunsaaWstw8kUtrBTjLZNg5OFiEk1bLVxveoraikiWvvoCdg4PUcoyGNuvdnJy0ABkxsRzbvodrFi8i/IZrpZYjuIzCNG2RVlxUWgKlylzhpLVCPHx9qCmvoK25WWopA6YoPZOT+77k6nvvYnSodW36yDw136/VJo470FKRX8CRf33ElHlzGH/tVZJoEOhHfnKaKNJaIMWZmuFh3hbkprXsIm3njqS7jxgeZi5oXT7a1kyBoCfaWlqIO3SESXNm4zRyhNRyBIMgPykFP+GktXh0LfVmknuqD401tex7YT3ewWO55bGHpJZjNHROWjN8bQ6++08KUtK596U1jHATUUfmREN1DaqiYtGeaSGIIq114uEz2iKHhl3Od+9vprGmljvXPCW1FIMi8/QEoEaCuAMtxz7aTXGWkrue+5OIDzJjClLTcR3liYtc1DksiZJsTZHWa1ygtEL6gWUXaYtEkdbc0F7cuyiEk1bQN7FffYu9kyOT582RWopgEOQlpeLhM1pEz1g42g4IcywE9kbaydOc3PclNyxbQlBUpNRyjILMU0G7Wk1dpUpqKVegbm1lz5p1OLmMZMGfnpBajuAychMSCZ4xTeS/WwClylyGu8rEd6mV4eE3msqCIqllDJrGmhoOvvtPxk2LImr+r6SWYzBkozRrn2qJ4g4A1G1tfP7K35H7+fCrlQ9IpkPQOwWpncPDxManRaEqLKalsQkvCxoeZtErtsaaWprq6nEfLYq05kJrUzONtXW4CCetQA/yklIozswWkQcWTl6ydniYdeeCWjsuFuik1XLgH++hKixi8avP4+DsbJDnnDdvHqmpqWRkZLB69eor7ndwcGDv3r1kZGQwfvx4AgJ+ccA9++yzZGRkkJqayty5cwetxUXuQZ2qio729kE/lzEozszm6NZdTF8wn7CrZ0otR3AJiUd/RKaQEzBpotRSBH1QqhTDwwxNX5/jWu666y46OjqYNk0zJ8HOzo7t27dz/vx5kpOTefbZZwd0fhtbW9y8vSx2aNjlnP7iAHnJqdzx9OMG+66VGtdRWietNHEHWrLPxPHzV98we9lSvIPHSqpF0D2F2iLteHG9Y0l0dHRQosyxqOFhFl2kBY2b1kM4ac2K2vIKkUkr0JvYrw8SFBWJYoyf1FIGvJgf6hSkpNHe3o6fyKW1aGSdHRBSDc8YDC2Njez96yt4+Ppw+1N/GPTz2djYsHHjRubPn094eDhLlixhwoSuv98rVqxApVIREhJCSUkJGzZsAGDChAksXryYiRMncsstt/DBBx9gM0gXo8xTYXZ5tJfz339tpyQ7h0XP/xkHZyep5Qg6SfnpJG2trUTMuUFqKYI+EEVaw6LP5zjAyJEjeeKJJ4iJidHd9pvf/AZHR0ciIyOZNm0aK1eu7LIRpy+uXp7Y2tlZRdwBQEd7O1+ufwNXL09ufmi51HIMgqungtbmZhqqa6SWwjdvvE9TXR13P/9nhg0bJrUcwWU01dVTnpcvnLQWSEmWUsQdmBJVYTHuo0dLLUNwCTXlFcJJK9Cbcwf/Q3t7O1Nvmyepju4W805OVxYaulvMD3Wa6xsoy7mIv8iltWhcFHJaGptorm+QWsqAyD4bz4+79nLN4kWEzpoxqOeaMWMGmZmZKJVKWltb2bt3LwsXLuxyzMKFC9mxYwcAKpWKOXPm6G7fu3cvLS0t5OTkkJmZyYwZg9PjovDQZb6bK+rWVj598W/I/XyYZ4UTwC2Vprp6Mk+fZZIo0po9VcUltDQ2iSKtgdDncxzg5ZdfZsOGDTQ1Nelu6+joYMSIEdja2uLs7ExLSws1Nf0v4nn4+gBYRdyBltyERGK//pYbli2xiuHdslEKs9mcrq+q5sCb7xM0dTIz7rxdajmCbihISRfDwyyQkqwc3Ed74zhiuNRS9MLyi7RFxSKT1syoLSvXObIEgr6oKS0j8+ezTLv9Fkl1dLeYd3Nzu+K47hbzAk10hb9w0lo0LgoPasrN40JloBx6dxPFWUrufWkNTi4jB/w8vr6+5OXl6X7Oz8/H19e312Oqq6uRy+V6PVbLgw/+P3t3HhZV2T5w/CsDuLIJKCoKqJgLpbi3ueaaYpopai6Jmqlp1tsvzXpN7bVMM1vUXBCXLFyyRBNQRDIrFMENBUUEFJR9lZ1hfn8goyjIAANnludzXVzFzJk59/gM58x55n7uezZBQUEEBQVh9ZTzpomVpcZn0gJEXbjMP/sO0e/NieJ4oEFC/U9j1cZWq+qx6SOFQkFS9G0xSasmqhyLnZ2dad26NceOHStz+8GDB8nOzubevXvcvn2bdevWkZZW9Zrgljo4SQslTcQABrlNlTiSmjO1tpK0adjjgn7/g8jzFxj1/gJRn1oDxYXdwKqNrWh6rWVKm4c1c7CXNA5V6cQkbSMzU+o30o5ZcX2QmZIqMmmFKgk56oNVG1vaPCddzbzyPswbGxuX2aaiD/OPU3XiRZdEX7iCWTNrjShbIVSPqZUVWcmpUodRI0UFBXguW4WJlSWvffSe1OFUatu2bfTq1YtevXqRXMEEeb169TBp2lRrGrr9sWETWcmpvPHZEgwMZVKHIwChp04DiGxaLZAYFS0maetIvXr1WL9+PR988MET9/Xu3Ru5XE7Lli1xcHDggw8+wMGh/C85nvaZz6JVC4rlctLi42vlNUglPT6Bc78dpc/rLpg3byZ1ODVi1sxa0qZh5Tm4cg3GjRoy+oN3pQ5FeExc+HUAWopsWq2SEFkySWujJSUPVJqkray1f1BbAAAgAElEQVRO4/Tp00lMTOTChQtcuHABNzc35X3Tpk3jxo0b3Lhxg2nTpqkv8gfS7pac9MxbaP9yi+pQtbGJk5MTgYGBynpKdnZ25OTkKMds8+bNaospKymZBo0b60xBeaH2XfYLoDAvX/Js2qd52of5x6ky8aJrIs4GAeDYp5fEkQjVZWLVVGOW/NXEnathnNy+m15jXqVTvxer9RxxcXG0bt1a+butrS1xcXFP3cbMzIyUlBSVHlsVjczNkBkZkqUlx5K8+9kcWr2OVh07MGD6ZKnDESjpFRB96QpOg/pJHYpQicSoGCxatsCwfn2pQ9F6lR2LTUxMcHJyIiAggKioKPr27YuXlxc9evRg8uTJ+Pj4UFRURFJSEn///Tc9e/Ysdz9P+8zXtFUL0hMSKS6S186LlJD/9t0ADJql/uv7umTazIoMiZuGPS4xKoZTHj/R02UE7XuL/heaJC6stHmYmKTVJqlx9yjMz9ea5mGVTtKqWnR93759ODs74+zsjLu7OwAWFhYsX76cPn360Lt3b5YvX17u8uGaSLtXMkmrjyUPqtLYJDQ0lG+++UbZ2AQgMjJSOWbvvPOO2uLKfJCJZWJlqbbnFHRbfnYOoadO4zz8Fckyr8r7MF9QUKD8/Wkf5gVIvh1LenwCjn3Lv4gRNJ+ptRVZKdqdSVvKb4sH8ZFRjF26GMPHMuJVERQUhKOjI/b29hgZGeHq6oqXl1eZbby8vJg+fTpQ8nnH399feburqyvGxsbY29vj6OjIuXPnqv1aTK1LzqWZWpTlHOp/mkvH/Rk6101k12uI0JN/0rpLJ52oIanLEqNiMDAwwNpO/N3UVGXH8czMTKytrXFwcMDBwYHAwEBcXFwIDg7m9u3bDBo0CIBGjRrRt29fwsPDqxyDZauWOlfqoFTavXiCfv+DPuNGY9bcWupwqqV+o0Y0aNxYo8odlPLbuovk27G8/smHyIyMpA4HqFninq7ISkklMylZTNJqmWK5nKTo21pT9qnSSVpVi66XZ9iwYZw4cYK0tDTS09M5ceIEw4erN1OuNJPWooX+TdJWtbHJwYMHlY1NalNpto+pKHkgVEHwUV8aW5jzzAt9Jdl/eR/m09PTlfc/7cO8UCLi7Hna9+ouOtJqIZmREY3MTHUikxZAXlTEb6u/xtK2FQNnvln1x8vlLFiwAF9fX8LCwti/fz/Xrl1jxYoVjB49GgB3d3csLS2JiIjAxsaGJUuWAHDt2jXl9j4+PsyfP5/i4uJqvxYTy5JJ2iwtG5vfvlhPUUEBbyxfInUoAnDFv6TkgdOglyWORHiahKgYQHvq5mkyVY7jFdm4cSNNmjQhNDSUoKAgPDw8uHLlSpVjaNqqJalxd6v7EjTeye27qFfPgEFu2plNWzq5nJmkWZm0AEX5+fz6+VqaOdgxWANq/6raYLm8xD1dExd+g1adxCSttkmIjKK5rpQ7ULUBxuuvv86lS5c4cOAAtra2VXpsTeo3ZiWnUFRQQFM9zKStamMTuVyubGwC4ODgQEhICAEBAbz00kvl7qM6Y6PMpLXWj1qcgnpc/yeQ7LR0eowaJsn+y/swn5eXp9KHeaFEROB5GluY06JDe6lD0SqVZSaUGjduHAqFQpm9bWhoyM6dO7l8+TLXrl1TThJWh+mDlQ/aXpP2UTfPBXPRx4/BbtOqtdrG29ubZ555hvbt27N69WoAli9fzpEjRwDIz89nwoQJODo6EhYWRlRUlPKxq1evpn379nTs2BEfH58avQ7TB+dSbcqkhZLPZ0fW/0D73j3oPVYcQ6WWHHOH+Ju3cBok6tJqsuTbJZ/ZRV1a9ajsOP6ogQMHKr94z87OZsKECTg5OdGlSxfWrVtX5X0bGhtj1txaZzNpoSRZ6tzho/R93QXTZtqXTVt6fs3QwExagBv/nuPCseMMnj0dK7vWlT+gFqnaYFkfxIZdp3lb+2qt1BKkE38rGouWLTBu+OSXC5pGLY3Djhw5gr29PV27duXEiRPKzE1V1aR+o0KhID0+US8zaWvi3r17tGnThu7du/P+++/z888/Y2Ji8sR21Rmb0mwfkUlbvupOyOi64iI5F3z8cBrYj/qNpWkEWN0P80KJiHMl/x6OfUTJA1WpWlKoSZMmLFq0iMDAQOVtb7zxBvXr1+e5556jR48evP3228q641VV2uwxS0uaU6nqyLrvKS4uZsz/aX4TsYpo89icO3SEyPMXGP2fBZhYis8EUgv1P03bHt1oZGYqdShCBQrz8kmNu0cz+zZShyLUUOmXg6mxuptJC3ByW0k2bVWzPavbVwVgyZIlREREEB4eztChQ6sdu2mz0klazcukLXX4q28pzMuXvBmqKg2WofzEvcdpe4PluLAbyAwNaeHYTupQhCpIiIwqKSekBefXSidpVWmAkZqaqqzduH37duWkkrqbZ1Qk7V48Fi1bqP15NV1VG5vIZDJlY5OCggJSU0uyckJCQoiMjKRDB/Wk7edkZCIvLMJECw+6tU3VpSLlTcjog+CjPhg1qM9zrwyQOhShGjITk0iMihF1aatA1ZJCq1atYs2aNeTl5SlvUygUNG7cGJlMRsOGDSkoKCAzM7NacTzM1tTMbJLqSk9IxG+rB88O7s8zL0pTSqWmTK2syMvOpiA3V+pQqkyhUHBgxZcY1a/Pa0vflzocvRfqfxqZoSGd+5e/ekrQDIlRMViLTFqt1/TBtWnqXd3NpIWSbNqgw3/QpwrZtDXpq9KpUydcXV3p0qULw4cPZ9OmTRgYVC/vzOzBZ5+sJM39EjQrJRW/rTvp9PILtOvVXepwnkrVxD1tb7AcF/6geZgoeaBVEiJLVrxpQ13aSo9oqjTPsLF5mMXq4uJCWFgYAL6+vgwdOhRzc3PMzc0ZOnQovr6+an4JJZO05i1q1gjBQCajsbkZ1vZtsO/6LJ36vUhPl5H0m+rK0HfcaNujm5qiVZ+qNjYZP368srGJlZWV8oTm4OCAo6Mjt27dUktcCoWCrJQU5fJZ4SFVl4qUNyGjD25fvkry7Vi6j1Jv7Wqh7kScPU/bHt2QGRpKHYpWUKVsjbOzM61bt+bYsWNlbj948CDZ2dncu3eP27dvs27dOtLS0p7YhyoZC8q6p1q2pF4Vf+72JDEqhrFLFmtM842qMLFqqtEXkJVJir7NiR896DZsMF0G1O7koGhq8nR3roaRnpCI06B+UociPEViVAzN7O1EfXct17RVSwCdrklb6uT2XRgYyBikYg34mvRVGTNmDJ6enhQUFBAdHc3Nmzfp3bt3teI2bWZN3v1s8nNyqvX4unLml4Ok3Ytn1PvzJTsuVNZgGSpO3NM1qbF3yc3MEs3DtEzynVjkhUU0b6v5k7SVXkU/WqdRJpOxY8cOZdH18+fPc+TIERYuXIiLiwtFRUWkpqYyY8YMANLS0li1ahVBQUEArFy5stwLyJpKuxuPqbUVMkND5EVFlW5v0dKG0R+8i0ULGxqZm9LIzJRGpk9f+jVs3ixuX7nGn7t+5rJfAMVyubrCrzZVxsbd3Z09e/bg5OTE+++/j6urKwD9+vVj5cqVFBYWUlxczNy5c9U6NpnJKZhYi0nax6myVOTRCZkPP/ywwueaPXs2c+bMAdDKpSIVCT7qw5C5MzFtZk2mBi8/EsoXERjEi66v09qpM9EXL0sdjtarV68e69evV55XH9W7d2/kcjktW7bEwsKCv/76Cz8/vzK1UaEkY2Hbtm0AyvPx40ytLSkuLuZ+qvrP0VKTFxby+5ffMGfLBvpPm4S/+26pQ6oSU2srMlO0d5IW4NTOn+g24hXGffIhN4NCyM9W/wVxaWbWkCFDiI2NJSgoCJlM9sR2+/bt491331X7/rVFqP9per82CqMG9SnMy5c6HKEciVEx1G/UELNm1qQnJEodjlBNTW1bUFRQQKaG1jtVp9S4e5z3Okbf8WPwd99TaRPS8q6H+vTpU+E2j/ZVadWqVZmVhhX1vIHKr5XMmllrdKmDUkUFBfj8sI1J//uUrkMHcdH3ZJ3H8GhyWFxc3BMNlqEkcS8+vqSp+6OJe7oo7nqEmKTVMsVFcpJibmOjBc3DVEp18vb2xtvbu8xty5cvV/7/xx9/zMcff1zuYz08PPDw8KhBiJVLuxePgYEBZjbNKq370+a5Lsz87isMjY2JvnSF5Nt3yE7PICcjk5yMkv9mp2eW/J6eQXZGBsVFcnqMHk7/qa5MXfc5qXH3OP3TPs4dOiL5N2+VjU1pY5OgoKAyJ79Dhw5x6NChWosrKykFc5uaZTfro6dNyDxOlYkXbRTyhy/D5s2i+4ghBOz6WepwhCq6GXSB4uJiHPv2FJO0KqisbI2JiQlOTk4EBAQAJR+Avby8cHFxYfLkyfj4+FBUVERSUhJ///03PXv2fGKSVhUmVpZkp6VrxBeQteH6P2e57BfAK3NmEPKHL+nxCVKHpDITy6bcvR4hdRg1UlwkZ//yL1i4dxuvvjePQ/+rehOeyjyamQXg6enJ/Pnz1b4fbRd68k9emjSeZ17oQ6j/6Trb77Bhw/j222+RyWRs3779ifunT5/O2rVrlce/H374QWc7g1cmMSoagGZt7cQkrRZr2qolaXfjUSgUUodSJ/y276LnmJEMnPkmh9dskDocoPJrJVNrK62ZRA8+6kP/6ZMYsXAuV07+qVJimjqVlxw2duxYlRL3dFFc+A2eH/8aBjKZzn521kUJt6JpqQUNrtXSOExqaXdLvrGprHlYt2GDmbdjI/nZOXw3ZRbb33mfvUs+4/cvv+H4ZnfO/HyQkD+Oc/3vQO6EXiMlNo68rPsU5Oby7/7fWOPiyo6F/0dafDyvffQen574nVGL52PWXPu6Wda2zBSRSVueypaKPDohExUVRd++ffHy8tLZ5SLlSb4dS8ylULqPGiZ1KEI15GZmEhd+QzQPU1FlZWsyMzOxtrbGwcEBBwcHAgMDcXFxITg4mNu3bzNo0CAAGjVqRN++fQkPD69WHKZWlpVmvmg7r6++xcDAgNH/0a4sSlNrKzK1sGnY4+6EXuPM3gM8P2Es9t2eU/vzq7OpCWh/Y5OKRAZfICcjs05LHqhaj3/fvn04Ozvj7OystxO0UJJJC9BM1KXVak1btdCLUgelUmPvEnzEh+fHv4ZJJSXvatJXRZ09b0ytrchI0vxMWgBFcTF/fLMRqza29H3jNUliqKzB8scff4yTkxPdunVj0KBBXL9+XZI460LctesYN2ygMU2oRLkn1cTfvIVl61YYlvP5UJPo1CRt05YVT9K+MmcGU9d9zp3QML6bMkv5AagqFAoFV0/9xaYZ89gwyY3r/5yl//RJLPM+xOQvlouU90dkJaXQxMKcetUs5K6rypuQeXSpyNMmZPRJ8FEfWnXsgI3omqmVbgaex66rE8YNn7wIF8p6NDMhLCyM/fv3K8vWjB49+qmP3bhxI02aNCE0NJSgoCA8PDy4cuVKteIwsbLUyXq0j0q7F4/f9l10GzYYx769pA5HJcYNG9CgSWOdGRvv77eQHp/AhBVLaVhJmanaoGpTE9D+xiYVKS6Sc+3Pv+nc/yUMyikHURtUrccvlMhKSSU3M4tmDvZShyLUgGWrlqTE6XbTsMf5bd2JgaGMQTOnPnW7mvRV8fLywtXVFWNjY+zt7XF0dOTcuXPVitesmZVWfUEdfiaQiLPnGfL2W9Rv3EjqcPSaJjUPE1+Eqi7hVjQGMhnW9q0r31hCOjGDlp6QSHFxcbmZtDIjIyb977+MePdtzh/x5sfZC8lOz6jxPu+EXmPPh5+yeuR4zngepMvAl3n/wC7mbv+e1l06Vf4EOi4zOQUDmYwmTS2kDkWjlDchk5eXp9KEjD656HsSeWERPUQ2rVaKOHseQyOjWsmW00WVZSY8auDAgcovbbKzs5kwYQJOTk506dKFdeuqv4Tc1NqSTB2aiKpIgMdeku/EMnbp+1rR3O5hQzfdGJuC3Fz2L/8CS9uWLPxpK1ZtKs5krSrR1ER1of5/0tjcDIfuXetkf+rMctbVDOfHlTYPE7RT/UaNaGxhTtpd/ZqkTYmNI/ioD8+/8fRsWlW+oHZ3d8fS0lLZV2XJkiUAXLt2Tbm9j48P8+fPp7i4uMqxNjY3w9DYmIwE7cikLfXHN5swsWzKgBlTpA5FryVGxVCYl68RSXrii1DVJUSWlMSyaddW4kieTicmaeWFhWQlp2DRskWZ2xubm/H2tm/p6TIC7x+28svHK5EXFqp132l34/H66ltWDXmNI1//QDMHOxbs/pFer72q1v1om6wHSzNNK1nuoo+qOyGjT7LT0gn/O5Durw4T3Y21UNSFSxQVFuLYV5Q80Ab16tWjiWVTncnWfJqiggJ+/3IDzdva8/KUCVKHU6nSi9xMHRqbiMAgfpz1Lo3MTFn0szvtejqr5XkrW6kCJTWdS+l6U5Onuf7PWQrz8nl2cH+pQ1FSNctZVzOcH5cYHSPKHWgxw/rGnPfy5vaVa1KHUuf8tu7CwFDGwJlvPnW7yq6HSvuqhIaG0qdPnzL19levXk379u3p2LEjPj4+1YrTtFnJlzzalEkLcOdqGBd9/Og/bVKlZSWE2lMsl3MvIlIjJmnFF6GqS4q5g7yoiObtHKQO5al0YpIWSpYxmrd42KiqmYMdC/dup41TZ/b85xP8ttRu87K8rPsE7NzLunFvcivkEq6rPuG1JYsxMKybpWSaprR+nqhLK1RXyFEfzJs3o62aLuCFulOQm0fM5VBRl1ZLNDIzxdDISOsuVKor7PTfXA04w5B3ZmJqrdkfQE0fnEN1bWyiLlzm2ymzyExK5u2t39FnXM1XkqiyUmXhwoWEhoZy8eJFFi5cqNNNTZ6mIDeP6/+erbO6tCLLueoSo2Iwa24tljRrqey0dH5ZtpKb5/Qv0SLlTiwhf/jywhtjMbFsKnU4FTK1Lukpoy2Nwx517LstGBoZMXTuTKlD0Wtx4Tc0otyBKsQXoSXkhYWk3ImjeVt7qUN5Kt2ZpL0bryx30L53D979aSv1Gzdis9sCLvqerLM4cjIy2TZ3MX/u/oWXp0zg7S3f0tjcrM72rymykh5k0lqKSVqheq7+eYa8+9n0GDVc6lCEargZeJ5WnZ6RpO6kUDWlmRhZKbqTrVmZw2s2IDM0ZPQHC6QO5akejo32Nw57XGrsXb6fOoeb584zYcXHjP7g3RrXsRdNTVQXevJPLFrYYNv5mVrfl8hyrjpl8zBR8kDQQie2lNSmHfCW5i7JN2tWMkmrLY3DHpVyJ5Z/D/xGn9ddNKZxlT6KDbtOI1NTLJ7SF6kuiC9CqyY+Mkpk0taVtHvxWLRoTp9xo5nz4wYyE5P5bsosYi6F1nksxXI5Xmu/4+ePV2LX1Yn3PD1o+YxjncchpdKLfZFJK1RXYV4+l/1O8dyQgRjWry91OEIVRZw9j4GBgdqWMgu1R1ezNZ8mJTaOUx576f7qMI3O1je1skReVER2Ws1r6WuivPvZbJ//H878fIABMyYzY8MXGDdsKHVYeuHan39TLJfjNKj2Sx6ILOeqU07SipIHghYqyaY9zgsTxtHEUjP7kzwsd6CdX4Ke2OJBYX4+IxfOlToUvRUXVtI8rLVTZ0njEF+EVk3CrSis2thqdG8K3ZmkvRuPobExE1Z8zM1z5/l+6hxSJe6oGXzEmx+mzcVAZsC7e7bSbdhgSeOpS0UFBeRkZoqatEKNhBz1paFJEzr3f1HqUIQqun3lGvk5uaIurRZ42JxKOy9UqsvffTepcfcY9/EHGluayMTKkvupaSiq0RRFWxTL5fz2xXoO/W8dnV5+gQW7f8S8eTOpw9J52ekZ3Aq+WGclD0SWc9Wk3IlDXlQkJmkFreW31QNDYyMGznh6bVqpmFlbcT81Te39aurK/dQ0Tnns5bkhA7Hr6iR1OHrp7vUIMhKTeNH1dUnjEF+EVk1CZDQyQ0Os7FpXvrFEdGaS9t6NmwD8s+8Q2+f/h7z72RJHVCL2WjgbXGcSF3adqes+Z+Sid2q8nE9bZCaliILmQo3cDAohIyGJHqOGSR2KUEXyoiJuhVxUS11aA5lmTqDpioeZtPo1SVuYl8/hr76lhWM7Xpwo7QfsiphaWyprvOu6vz1/xX3+f2jaqiWLfnGXPDNFH4T6n6aFYzus2pTfQESQjryoiJQ7cWIps6C1km8/yKadqJnZtGbNrLV+BdHp3Z5kJqcwavF8qUPRS/LCQvzd99C+V3fa9eouaSzii1DVJUSWNCHU5JIHOjNbGHXhMitfceHXz9dSLJdLHU4ZWSmpbHZbwL8HfmfwrGm4/bCWBiZNpA6r1mUlp4hMWqFGFMXFhBw7TqeXXtDL2s7a7mbgeZq3tcf0Qd2v6rDt3JGlxw7USd1EfWViZUl+Tg4FublSh1LnQv3/JPxMIMPmz9bIBicmlpZ6leF8/Z+zfP/mbArz85nvsYmuerQCSQqh/qcB6qTkgVB1idExIpNW0GonHmTTDpiuebVpTZtZkZGoffVoH1WQm8vxTe607dGNzv1fkjocvRR48DAZiUkMmzdL6lAEFSVG36a4uBgbDW4epjOTtAAZCZp7oJUXFXFw5RoOrFxDh769WbR3u85/8MpKThE1aYUaCz7qg8zIkOeGDqrV/QwbNozw8HAiIiL46KOPnrh/8eLFXL16lUuXLuHn50ebNiK7pTIRZ88D0L539b9dHjL3LRo0aUxSzB11hSU8xtTKUu+yaB/125frMWpQn2HzZ0sdyhNMrS2VjTj1RcKtaL6dPIvYa+FMW/c5r7z9ltQh6ay0e/HEXrteZyUPhKpJjIrB2q61WE0iaK3kmDuEHDvOi66va1w2ram1FZmJ2p1JC3D2Ny8So2J49b13xLFCAkUFBfi776ZdT2fa99bfZlzapCg/n9TYuyKTVngo8MDvbHabT0NTExb97E7Hl/pKHVKtyUxOUdY6FITqunfjJvciIukxanit7cPAwICNGzcyYsQIOnfuzKRJk+jUqVOZbS5cuEDPnj3p2rUrBw8e5Kuvvqq1eHTF3esRZKdnVLvkQauOHXAa2I/Te/aRn52j5uiEUiZW+pWt+bjkmDsEHjxM79dGYWnbSupwlOoZGNCkqQWZKfo3Ntlp6Wye9S7nvbwZsWAOYz56T+qQdNYV/z+x6+qkkZnk+i4xKgZDY2MsWraQOhRBqLYTW0qyaQfNnCp1KEoGMhkmlk3J0PJyBwDFRXKOfbsZm/Zt6ekyUupw9FLgQS/SExJFNq0WSYiMEpO0QllRFy6zYeJbJN+O5a3vvqLjy89LHVKtyEpKoX6jhtRv3EjqUAQtF3zUBwfn52hq27JWnr93797cvHmTqKgoCgsL8fT0ZMyYMWW2CQgIIPfBcvDAwEBsbUUNv8ooFApunguu9iTtK3NmkJt1n7/27ldzZMKjTK2t9KbuaUX8tu5EXlTE0HluUoei1MTCHAOZTO8yaUvJCwv5ZdlK/tz9C/3enMjYpe9LHZJOCvU/jYGBAV0Gvix1KMJjEqNiAHR+5Z2g25Jj7nD+iDcvTBxXo/JX6tTEsikGMplOZNICXDn5J9GXrjB8/myMGtSXOhy9U1RQgP/23bTt0U0tvTiE2pdwKwpr+zYam30uJmklkp6QyOZZC7gXEcmMb76gw/O9pA5J7Uqzf0TzMKGmLvxxHIDur9ZOA7FWrVpx587D5fSxsbG0alVxRp2bmxve3t4V3j979myCgoIICgrCyspKrbFqm4iz57FoYVPlxjQ2ju14bshA/tq7n7ys+7UUnQBgYtlUrzNpoaQ8z9+/HKT7q8M05pv10nOnvk+ge639jlMee3lp8huMW/Yf6tWrJ3VIOiU+IpLk27Gi5IEGSoy6DUBzMUkraLkTP+7AwEDGK7OnSx0KAGbWJZ/Ntb0m7aOOrt+IWXNrXp4yUepQ9FLgryKbVpvER0ZjaGSEZWvNWUH3KDFJK6G8rPtsmb2IxKgYZn63VvKugOpWmv1jaq3fk1RCzaUnJHLzXDA9ammStiqmTJlCz549Wbt2bYXbbNu2jV69etGrVy+Sk3XjW/rqunkuGID2VfxmecicGeRlZ3N6z77aCEt4wLB+fRqamuh1TdpS/jv2UJCTy3ANqU1r+qCmu75m0j7q6Pof8N+xhxddX2fcJx+KiVo1C/U/jWOfnmLlk4bJzcwkKyVVZNIKWi817h5nD3nR53UXLFrYSB0Ops1Krk0zk3RnkjYq5BJXT/3FILepNDIzlTocvSMvLOTktl04dO+qk8l3uiYhMgqA5m01IzHjcWKSVmK5mZlsmbOI5DuxuP2wDofuXaUOSW1Ks39MRZ0zQQ2Cj/rSzMGO1l06Vb5xFcXFxdG6dWvl77a2tsTFxT2x3eDBg1m2bBkuLi4UFBSoPQ5dlBR9m/SExCot/2ne1p7nhg7izM8Hyc3MrMXoBFOrkuNzlh7WPX1cTkYmf+7+heeGDMS2c0epw3mYSSvGBoA/vtmE37ZdvDBhLOP/+5GYqFWjKyf/xNDYmE4v6Wb5LW2WGBUjJmlroLKmsKXGjRuHQqGgR4+HjX+effZZ/vnnH0JDQ7l8+TL164tl5DXht20niuJihmhAM0hTZSatbiVS/LFhE/UbNWTEwrlSh6KXzh46Qtq9eIbN04wv+4WKlZYTat7OXtpAKiAmaTVAdlo6W2YvJCMhkVmbvsauq5PUIalFaWaWKHcgqMNlv1MU5ufTfZT6s2mDgoJwdHTE3t4eIyMjXF1d8fLyKrNNt27d2LJlCy4uLiTp0DfvdSEi8DyOvXuoPKnyypwZFOblcXr3L7UcmWaQ8iJSOREosjUB+HP3L2SnZzDi3belDkXZeFPfS1E8yvu7Hzmx1YO+48fwxmdLxUStmsRcDiUrJRWnwf2lDkV4jJikrT5VmsICNGnShEWLFhEYGKi8TSaT8dNPPzF37lycnJwYMGAAhYWFdRm+zslISOLf/b/Tc8xILFtL29fBrAmfRogAACAASURBVLk18qIi7qemSRqHuiXciuavvft5YcJYRi56R+pw9E5JNu1u7Ls9S4fne0sdjvAUBbm5pMbdw0ZDSpw9TkzSaoislFQ2uy0gKzmV2Zu/UTmLp7KLe2NjYzw9PXFyciIwMBA7u4cf9JYsWUJERATh4eEMHTpUba+lVG5mJkUFBcolm4JQE3lZ97kacAbnEUMwMFRvkW+5XM6CBQvw9fUlLCyM/fv3c+3aNVq2bMno0aMBWLt2LU2aNOHAgQNcuHCBw4cPqzUGXRZx9jyNLcxp0aF9pdta27eh2/BX+MfzENnpGXUQnbSkvog0tRITgY/Kz87B330PHV/qK/nKFlNrS3Kz7lOYly9pHJrG5/utHN/sTp9xo5mw8mPqGYiPsjWlKC4m9NRpOr38AjIjI6nDER6RGBVDYwtzGpubSR2K1lGlKSzAqlWrWLNmDXl5ecrbhg4dyuXLl7l8+TIAqampFBcX11nsusrffTfywiKGvjNT0jjMrK3JSklFoYNjemTd9/yz7xCDZ03D5f8WSR2O3jn324Ns2vmiNq2mi4+8JcodCJXLTErmR7cF5GRk8Pa2b2nVscNTt1fl4t7NzY20tDRCQ0P55ptvWLNmDQCdOnXC1dWVLl26MHz4cDZt2oRBLVzoZCanqD2Ttp6BAbadOzJgxhRcP/+UwbOm88wLfcQHWD0QdPgPTCybMvQd9Xdg9/b25plnnqF9+/asXr0agLt373LkyBEAhgwZgo2NDc7Ozjg7O5f7QV8o381z5wFo36dHJVvC4FnTKSooJGD3z7UdlkaQ+iLyYXMq3VryVxN/ex4kMymZkRIvFzSxshST5xXw3bQd343b6P3aKCauXCYmatUg1P80DZo0xlGF47RQdxKjogFENm01qNIU1tnZmdatW3Ps2LEyt3fo0AGFQoGPjw/BwcF8+OGHFe5HNItVXVZKKmd+OVDSpLOtvWRxmFpbkaljpQ5KKRQKfv18Laf37KP/VFfRcLOOyYuK8Nu2C/uuz/LMi32lDkd4ioTIaJo52GnkZ0jNi0jPpSckstltAfnZOby99VtsHNtVuK0qF/djxoxh165dABw8eJDBgwcrb/f09KSgoIDo6Ghu3rxJ797qT8vPSk5VZmpVV7169WjVsQP9prky8/u1rDrjy+J9Hoz+YAHPvNiHkYvmMmfLBlb+5cPH3r8y7ev/MchtKh2e70VDU1E4XZeE//UvgQcPM2TOW3QdNljqcAQVZSQkkRgVU2ldWsvWtnR/dSj/HviN+ym6tQStInVxEfm0C0hTayuK5XKy03Q/a1lVhXn5+G3dSdse3ST9gG1qZams7S486fiPO/D+YSu9xozE9fNPNPJDtjaJCDxPXna2KHmgYUrr5olJWvWrV68e69ev54MPPnjiPkNDQ1566SWmTJnCSy+9xNixYxk0aFC5zyOaxVZNgMdeCnJzGTpPukxD02ZWOtU0rDyHv9qgbLgp6rjXraDfjpIad49htZBUJKhPwq0ojBrUp2nLFlKH8gRDqQMQnpR2N57Nbu8y32MTc7d9x6a35ik/pD2qvIv7Pn36VLiNXC4nIyMDS0tLWrVqVWbZbHkTA1BycT9nzhyAan07nJWcTNNWLav0mHr16tG8fVva9+pO+949aNfTWdmlMin6Nhd9/Yg8F8LNoBCyklNoYNKEVh070LpLJ1p36Yhtl450Hfrwg1TynVhir13nTmgYV07+Scqd2Cq/DkFzHFr9Nc3bOeC66hOSY+4QF35D6pAEFUScPU+P0cMxMJRRXCQvd5vBs6ZRLJdzymNvHUenuUovImfMmPHEfaUXkb169SInJ4eTJ08SHByMv79/me22bdvGtm3bgJL6y48ysWzK/dQ0nVzyVxOBBw8zYMYURrw7h+t/B1b+gFpgYmVJ7NUwSfatLfy2eKCQFzNy0VwMZDJ++XglxfLyjy/C08kLCwn1P03v10aReCuG03s8pQ5JANLuJVCYn08zB3upQ9E6lTWFNTExwcnJiYCAAABsbGzw8vLCxcWF2NhYTp8+TcqDxo3Hjh2je/fuT5xfharLTs/g9J59DJ07k5PbdnH3ekSdx2DWzJqokEt1vt+69sc3mygqKGTo3JnIjIzY99//ic97daAkm3YnEz5bSseX+hJ+RprPkcLTJURGAdC8nQMpsU82DJeSSDvQUCl3Ytk8awEKhYJ33H/Ayq515Q+qBTX9djgzObVK5Q6cRw5l+amjfHjoJ8YufZ+Wz7Tnysk/2bv0M1a+4sKXoydycMUaLnifUC4Dzcu6T2RQCAE797Lnw0/5YuQbfPLiMH6cvZA/NmwiLuwGrbt0YvQHC/j42AEW7PqRPq+70KBJ4yq/HnWorI7w4sWLuXr1KpcuXcLPz482bdpIEKXmkhcWsnPxEnIyMnjruzU0aWohdUiCCiLOnqdB48a0cepS7v0WLW3oOXoEgQcP69US76pcREZFRdG3b1+8vLzo0aNHmYvI3Nxc5UVkVZhaW4mmYeWQFxVxfPN2WnfpxLMSZRaaWluSmZIqyb61ycntu/hjwya6jxzK5C+WYyBTb81yffLb6q+5GnCGMf+3iGlf/4/6jRpJHZLeUxQXkxRzB2t78VmwqiprCpuZmYm1tTUODg44ODgQGBiIi4sLwcHB+Pr68uyzz9KwYUNkMhn9+/fn2rVrEr4a3WFhYcGH41yZ0e5Zjh8/jrm5ebnbTZs2jRs3buDk5MS0adMAaNiwIUePHiUsLIzQ0FC++OKLKu/f0NiYxuZmZCTqdiZtKd+N2/D+fgu9xoxkyhfL1d7XQyjf+cPHSrJp582WOhShAgm3ogGwaa95dWnFJK0GS4q+zY9uC6hnYMA77j9gaVs207Wyi/vHt5HJZJiZmZGSkqLSY9UhKymZxhbmKp0Q+r7xGpO/WE7KnTg8P1nF50PHsnrEePYvX03IUV8yElQ/meZmZhIRGIS/+x52f7CM1SNeZ+UrLhz9ZiONzM2Y8NlSPjv1B1PWrOCZF/rU2TLJ8uoIN2jQoMw2Fy5coGfPnnTt2pWDBw/y1Vdf1Uls2uR+Shoeiz6iiYUF09evRmYoFgVousigEIqLiyusSzvIbRoKRTGnPH6q48ikJfVFpIlVU7JSxCRteYKP+pIYFcPwBXPqfCm9ccOG1G/UiKwksXRWFf7uezjy9Q84jxhCn3EuUoejtfLuZ7Nr8VKOrPsep0H9eM9zB801tPOxPkmMihHlDqqhoqawK1asUDaFrUh6ejrr168nKCiIixcvEhIS8kTJIaF6lixZwonjx5mwaD6pxgas/nrdE9tYWFiwfPly+vTpQ1hYGMuXL1dO5q5bt45OnTrh7OzMiy++yPDhw6u0/9KG1pl6dH7127qz5Bw5cihT134urpvqgLyoCL+tHrR5tjOdXn5B6nCEcuRn55Aen6CRzcPEJK2GS7gVzZY5CzGqX5/5uzZj19VJeV9lF/cAXl5eTJ8+HYDx48crl+l4eXnh6uqKsbEx9vb2ODo6cu7cObXHn5mSioGBAU2aNn3qdv2mufLGfz8i/My/bJ71LkGHj5F2L16tsWQkJHFqx098NWYSGya5ce73o3R8sS9ztmzg0+O/8+riebVexL68OsKPf4McEBBAbm4uAIGBgdja2tZqTNoq9tp19v33f7Tt0Y2xHz9ZT0zQLDkZmdwNjyi3Lq1582b0HjuKs4eOVOnLGF0g9UWkqZXIpK1IsVyOz8Zt2LRvi/PIIXW6b+VFZLLIpFVVwM69bHtnMYG/HpY6FK0XsOtnfpy9kAYmTVj0szvOI4dKHZJeS4yKwdK2JTIjI6lD0TrlNYVdvny5sinsowYOHEhwcLDy97179+Lk5MSzzz5b7so3oXpK+6Wc2XuAoOibjB039olthg0bxokTJ0hLS0Mul3PixAmGDx9Obm6usjxFYWEhISEhVb5OMmtmDaCzjcMqErBzL79/+Q3PvTKA6d98gaGxsdQh6bwgr2OkxMYxdJ6oTaupEiKjaN7OXuowniAmabXAvRuRbHprHoX5+czz2ETf8SXNwVS5uHd3d8fS0hInJyfef/99lixZAsC1a9eU2/v4+DB//vwqdwVXRWkWkKlVxZO0Q+bOZMyHi7h03J+di5ZQlJ+v9jgedyf0Gof+t47PBo5i5+KlxF4Lp/+0Sfzf4V9Y9Is7L04aj7V9G7UVWTdu2IC2PZ0ZNnUSuY/81cXGxmL8lJOkm5sb3t7eaolBF13wPsHJ7bt5/o3XeGHiOKnDESoRcfY89l2dMGpQv8ztA92mAiXZcPpIqovIevXq0cTSQq/KS6jCwsKC48ePc+PGDdZ+8BGpkdEMmzfriRUhpUsxb9y4gaXlw7I+p06dIjw8nAsXLnDhwgWsra2rHENpmSAxNlUTfiZQ1NtTk1vnL7D+jenEhV3nzTUrGLv0fZF9JZHEqBgMZDKs2ogv7QXt17x5c+Lj48nPyeHIj+6Ym5ji4PxcmW1UaapqZmbG6NGjOXnyZJX2b/pgklZfyh086q+9+zm48iu6DHiJmd+twbB+/cofJFRbcZEcvy07aePUmU79XpQ6HKEc8beiaeZgr3GN9cSnLS0Rf/MWG1zdeHPNCt5YvgTbzh357Yv1eHt7PzGJt3z5cuX/5+fnM2HCBIKCgp5oKrZ69WrlhEBtKc0CMrGyAq4/cf+ri+cxaOZUgg4fY//y1XXe8ENeWMgVvwCu+AXQpKkFziOH0stlJOMeZGbmZWdzNzyC2LDr3A2/QWzYdRJuRVfY+AhKJj6s7dtg19WJNs92we65LrRwbIeBTIajaVNM0rNVim3KlCn07NmT/v3Lr4dY06ZuusL7+y20cGzHax8tJiEyisjzF6QOSahAxNnzDHxrCg7OXbnxb0nmvmkza/q+7kLQ4T9Ij0+QOEL90tjCHJmhIZliIrCMJUuWcPLkSdasWcNHH31E++eeJbOdPb3HjibwwO/Aw6WYPXv2RKFQEB8fj7m5Oenp6UDJ8fvRyfSqMrUuOaaLsRGklJWcwuZZC3h10TwGzJhM6y6d2P3BMtITEqUOTa8kRkUD0MzBTtnoRBA02YkTJ7CxsXni9mXLlpX5/e99v6LY5sHwd99m88z5Kj+/TCbjl19+4bvvviMqquK/ifKulaIvXmbPh5+SGndX5f3pkn8P/Ia8sJA3Vixl1sZ17Hj3Qwpy86QOS2edP+rN4DnTGTbPjbDTf0sdjvCYhMgo6jdqiHmL5qTdVe8q7poQk7RaJDczk+3zP2D4gjm8Mns6LRzbsev9jzW6pk5FmbT16tVj7Mcf8KLr6/zt+Su/rf4ahUIhRYhK91PT+Ounffz10z6aOdhh91wXWnV6BttOz9Bn3GhlA43C/Hzu3YgkNuw6cWHXiQuPoImF+YNJ2c60cepMQ1MTAHIzs7gdeg2/bbu4ffkqNg0b89H7D5fm29raUlBQ8EQsgwcPZtmyZfTv37/c++HpHdv1iaK4mL1LlrNw73amr1/NhkkzSY27J3VYQjmiQi4hLyzCsU8P5STtwBlTqFfPgJPbdkkcnf4xeXBcFtmaZY0ZM4YBAwYAsGvXLgICAtgYdJohb7/F+cPHKCooKLMUE0pqBw8fPhxPT0+1xGBiKcZG0AzFRXKOfP09MZdDmbhyGYv37+Snj5YTEai/nzvqWlJ0SUZhyw7tueIXIG0wgqCCIUMqLhGUkJCAjY0N8fHxWJpbkJSUTPte3XHs05OIs+eBkp4qpedhKLleKi1zALB161YiIiL49ttvnxpHeddKGQlJXPTxq+Yr0w3nfj9KUVEhkz7/lPk7f+ToNxvFMb2WFBfJ8du6E9dVn9C5/0tc+/OM1CEJj0iIjAageTsHMUkrVJ+iuBjv734kLuw6rp9/wuJ9Huxa/DHRl65IHVq5sh50pjaxfpjpaSCTMWHFUnqNeZVTHns5uv4HqcKrUGJUDIlRMQQdLqnvWM/AAGu71spJ21adOuA8/BVemPCwjlKxXM69iEgu+Phx+3IoMZevkhR9u8zk8w2ZjO2bf8Te3p64uDhcXV2VmVelunXrxpYtWxg+fDhJSfq3FKc68u5ns+PdD1n0iztvfbuG76e+TcGDur6C5ijIzSXmcijtH9SlNbFsyvNvvMb5I94adWLUF6YPskpETdqySpdiAsTHx9O8eXOOffcj83Zs5IWJ4zi9x/OJpZgFBQVllmJ6eHggl8v59ddf+fzzzyvcV0UrIkytrZAXFpGTnqHulycI1XL5xCnu3rjJjG++YM6WDfj8sBX/7bsl/4JdHxTk5hJ77TpD33GjVccOnPL4iagLl6UOSxCqpbRfypo1a5g+fTr7f/mFjOfaMfzdOcpJWl9fX1avXo25uTkymYyhQ4eydOlSAFatWoWZmRmzZs2S8mVovZCjvhTk5DJ26fvM3fYdt4Iv4rNxG5FBIVKHpnOCj/jwyuwZDJ3nJiZpNUzCrWgAbNo6EP7Xv9IG8wgxSaulLp84RWJUDG99u4Z3PDby2xfrlcswNYm8qIjstHRMH9TXkxkaMvnLz+g2bDA+G7dx4scdEkeoGkVxsXLi9sKx48rbm9q2pNUzjmRnZBJ7NbzSicFH6wjLZDJ27NjB2LFjWbFiBefPn+fIkSOsXbuWJk2acODAAQBu377NmDFjavX16YLk27Hs+c+nzN68HtfPP2HPfz4RF48aKOLseYbMnUlDUxMGzJiCgaFMZNFKRJ/rnqq6FBNAoVAQGRTCjcAgBrlN5eyvXk9s86gpU6Zw9+5dmjRpwq+//srUqVPZs6f8essVrYgwsWpKVmqqOIYJGiU55g7fTZnF+P9+xMiFc+nQtxfnfjvKtdP/kJuZKXV4Om3LnIW8OGk8L00az4LdW4i+eIVTHj9x9dRf4jghaJUvv/yS/fv34+bmRkxMDBMmTOCZwf1Y8MUq+h05zBujx5CWlsaqVasICgrC1taWd955h7S0NFq1asUnn3xCWFgYISElk4k//PAD7u7uEr8q7RTqf5qwv/6l7+suDJ41nXk7NnIzKATfTdu5JcrHqU2xXI7fVg9cP/+UMR+9xxW/AGIuX0VeWCh1aHovNzOTzKRkmrdzkDqUMsQkrRaLv3mLDZNmMmXNCt7470fYdn6G31av17g/+MzkFEysLDE0Nmb6+tV07v8iXmu/48/dv0gdWo2lxt4lNbZqNY0eryM8duzYMnWEn7ZESHi6G/+e48j6Hxjz4SLuvf2W1nwJoE9ungtm2LxZdB06iOcnjCXkj+OkxMZJHZZeMrV+MEmbon+TtKouxbSxsSExsaT+pvd3P7LoZ3defnPCE0sxjY2NiYsreR/fvVtyTrh//z4///wzvXv3rnCStiKmVlYaXcpI0F8FuXn8vHQFUSGXGfL2W0z+YjnyoiJunb9I6Kk/CfX/q9z64sOGDePbb79FJpOxffv2J+43NjZm9+7d9OjRg5SUFCZOnEhMTExdvCStkJORyYkfdxCwcy+9XxtF/+mTeOvbNSRGxRCwcy/BR30pqqA8liBoktTUVF555ZUyt537/ShXZ75Jbs595W0eHh54eHgQFBTEzp07gZIyCJrW4EfbyQsL+dvzV84eOkLf8SWTtfM9NhFx9jy+m7YTFXJJ6hB1QvBRX54dPICXJo2n35sTKcjNI+rCJW6eC+bmuWBir12vUW8ecY6tvoTIaJq3tZc6jDIMKt+kZNDDw8OJiIh4avfocePGoVAo6NGjBwB2dnbk5OQoOxxv3rxZPVELSrmZWbjP/w9+W3fy/PjXmO+xSdm1UlNkJadgaduSWRu/puPLz3Nw5Vc6MUEraKbTuz0JOnyM4fNn4zSo/KZrgnRiLoWSn5OLy4cLMapvzMntIotWKiaWluTdzxYNIx5TuhQTYPr06Rw+fBiA21eucfXUXwyYPpnT//7D0KFDMTc3x9zcHFNTU+UKCUvLkslvQ0NDRo0aRWhoaJVjMLFqStaDxpuCoIn+PfAbq4aMYYPrTE7t+AkTq6aMXfoBn574nff2efDK229h49gOAAMDAzZu3MiIESPo3LkzkyZNokGDBmWez83NjbS0NBwdHfnmm29Ys2aNFC9L4xXm5fO35698OWoie/7zCfm5uUxY8THLfH5lkNtUGpg0kTpEQaiy4iI5xzfvoHXnjuKzu0SKCgo48/NB/jdiPL+v2UDzdg4s2PUjb2/7DvtuzwGVzwkZGxvj6elJREQEgYGB2NnZ1fXL0FjFcjk7Fv4fn748nB3vfkjgwcOYWFny6nvzWPSzO6vO+DLz+7X0m+pKiw7tq/RlhDjH1kzCrSjty6QtHfQhQ4YQGxtLUFAQXl5ehIWFldmuSZMmLFq0iMDAwDK3R0ZG4uzsrN6ohTIUxcV4f7+F2LDrTPrfpyz23MGu95cRfVEz6lVlJqfQ4fneFMvleC5bRfBRH6lDEnTcwZVraGbfhslfLCfyfAgFuXkU5OZSkJNLQW4u+bl5yv8vyM0lPyeXgtw8EqOiyUgQdYBrk7yoiKiQS3R8qS8hf/iSFH1b6pD0lqm1pcjWLEd5SzEBevTowWAbO+JNTeg6ZqRyKSaUZM+mpaXRqFEjfH19MTIyQiaT4efnpyxnUBWm1lbcDr2m1telD0QmSd1SKBTcuRrGnatheH+/BSu71jgN7IfToH4MmzeLEQvmkHwnlsLI28QlJhAdE4OiuBhPT0/mzy/byX3MmDF89tlnABw8eJAfftC8fgWapFgu56LvSS76nqR97x4Mmvkmr743j8GzpxN48DBhp/9BUVys0nMV5udz+4o43gjSCvnDl1dmT2f4gtlcPXValPGQSFF+Pn/9tI/Ag7/z/ISxDJo5lXf3bOHGP2dZOmIcA/v3V84JyWSyMo99dCJw4sSJrFmzBldXV4leiWbKy7rP1YAzXA0oqU3b2MKcdr2649i7B+1796DLgJcAyE5LJynmDvk5OeRn55T8Nye35P+zc8jPyVb+3sm+LXfu3iUqKgpAnGOrKD4yigZNGvPs4P7kZKi/dFPavfgqNzWvdJK2d+/e3Lx5s8ygjxkz5olJ2lWrVrFmzRo+/PDDKgUgqM8VvwBlndpZG9fx+bCx5N3PljosUmPvUlRYyE//91/RlVaoE0UFBexcvJTXP/kPZs2bYdywIfUbNcS4YUOMGzbA0Ni43Mf9vmYDf/20r46j1T/hZ/7FsW9P/LbulDoUvWZiZals7ig8VN5STIDg4GCmTJjIiHff5vaVq3gHnMHDwwN4WE82JyeHnj171mj/BjIZjS3MRSZtFZWXVCAuIOtWcswdAnbuJWDnXkwsm9J5wEs4DerHqJEjsDC3wqKlDamxd4mNjcX4sfPwo8345HI5GRkZWFpakvJYOZaKmu3ps9Llsi2fcWTAjMm8PGUCA6ZPVvnxiVExrHERfweCtBTFxfhu3MbUdZ/TecBLXD31l9Qh6bXCvHxO7/Yk8MDvvDDxdaYunE+xWROSMtIpLCwUE4Fqkp2WzuXj/lw+7g+AWXNr2vcqmbA1a25N/caNMLW2on6jRtRvXPJjaGRU5jkcTZtilPewVII4x1ZNXPgNAGZs+LJWnv/4jzvw3Vi1hI1KJ2kf72AcGxtLnz59ymzj7OxM69atOXbs2BOTtA4ODoSEhJCZmcknn3zCmTNPdrTTxzdDbUmIjGLDpJm06thBIyZoAU667+Hc70dF93ahTmUmJeOxaEm59xkYyh5M2JZO3jagfqNGODs+Q3h4uMjCqmV/7/uVqwF/VflbRUG9Dq3+GkMjUZq+qry/31Krz69QKNg4bS6ZelgruCbKSyoQF5DSyUpJ5eyvXpz91YvsySG8PmlilWv4l6eiZnsC3L0ewc9LV/DHhk1YtbZV+XGF+fm1GJUgqO7ScX8K3/2Qa3/+LXUowgMFuXkE7NxL8/xiTCa5cj81DRATgbUlIyGJ4KM+T115LDMyon6jhg8mbRvzmosL/fo+r5b96+M59vblq3wz8S3qN2pYK8+fdq/qc2A1vjqrV68e69evZ8aMGU/cd+/ePdq0aUNqairdu3fn999/p0uXLmRlZZXZTh/fDLUpL+s+kUEhUoehVJSfLyZoBY1SXCQnL+s+eVkPGxQYGBhwfN9BkYVVB4qL5GKCVgPER0RKHYJQDkVxMdGXrkgdhtYpL6mguheQIC4i1Sn61i1MjOorf7e1taXgsSZXcXFxtG7dmri4OGQyGWZmZuWOi1C5jIQkUbpJ0EoKhUK5DFzQLEUFBWQkJKrlucTcT83ICwvJyShULs2/+Pe/vDZkmPJ+cY6tuthr4VKHUEaljcNKB7SUra2tsoMxgImJCU5OTgQEBBAVFUXfvn3x8vKiR48eFBQUkJpaslwvJCSEyMhIOnToUAsvQxAEoWYezcIqXcZjbm5eZpsxY8awa1dJo6uDBw8yePBgKUIVBEEQatm2bdvo1asXvXr1IjlZ1G6uiaCgIBwdHbG3t8fIyAhXV1fS09PLbPNow77x48fj7+8vRaiCIAhCOcqbE6poIhAQE4F1SJxjdU+lk7TlDbqXl5fy/szMTKytrXFwcMDBwYHAwEBcXFwIDg7GysoKA4OSXTg4OODo6MitW7dq79UIgiBUU02ysB43e/ZsgoKCCAoKEhlYgiAIdUBcQGouuVzOggUL8PX1JSwsjP3795OXl8eKFSsYPXo0AO7u7lhaWhIREcH777/PkiXllysSBEEQ6p6YCNRc4hyreyotd/DooMtkMnbs2MG1a9dYsWIF58+f58iRIxU+tl+/fqxcuZLCwkKKi4uZO3cuaWlpan0BgiAImkYs4xEEQahbj15AxsXFPfUCMjAwUFxA1jFvb2+8vb2Vv48dO5bly5crf8/Pz2fChAlShCYIgiBUorw5obFjx5aZE3J3d2fPnj1ERESQmpoqSsLVIXGO1S31AIXUQTwqMTFRpUY8VlZWdbr8TNv3Z2dnR7NmzWr0HJo4Nto+LlB3Y6ML/1a1ub/GjRvTsmVLIiIip3CdZAAAIABJREFUALCxscHc3BwTExPlNj4+Pnz22WcEBgYik8mIj4/H2tr6qc8rxkYzj2f6ShzHxXG8KrRtf2ZmZspM2ZSUFIyNjdm8ebPyArJ+/frs2bMHZ2dn5QVkaaOxpxFjo5nHcU08ntX1/jT1eKavxLFCM48VIMamNvYnjuOauy/xuVRz96fq2Ci08ScoKEjsT0N/6jJ2MS6aG7u27U8mkykiIyMV9vb2CiMjI8XFixcVnTt3LrPNvHnzFJs3b1YAiokTJyr27dunEbGL/YkfbR4z8X7U3Nh1fX/aHLuu70+bY9fl46f40b4x0/X9aXPsur4/bY5dHMc1M3Zd31/pT6XlDgRBEPSBKqVdxDIeQRAEQRAEQRAEQRBqg5ikFQRBeODxej6AqOcjCIIgCIIgCIIgCEKtkwGfSR1EdYWEhIj9aai6jF2Mi+p0/d9KjI3Yn6A+4jiumXT930qMjdhfbdDlfyttHhd9pcvvRyn2p066/m8lxkYz9yfGRezvURrXOEwQBEEQBEEQBEEQBEEQBEGfGEgdgCAIgiAIgiAIgiAIgiAIgj4Tk7SCIAiCIAiCIAiCIAiCIAgS0rhJ2mHDhhEeHk5ERAQfffTRE/cvXryYq1evcunSJfz8/GjTpo3yvqKiIi5cuMCFCxc4fPiwWvY3ffp0EhMTlc/r5uamvG/atGncuHGDGzduMG3aNLXsb/369cp9Xb9+nbS0tBq9PnUSYyPGRtX9ibF5SJfHRpvHRV/p8vtRlf1p8ntSl8dGm8cF6nZsxN+M6nT5b0aV/Wny2OgrXX5PavP7UZfHRZX9ibFRfX9ibB4SYyPt2Cg05cfAwEBx8+ZNhYODg8LIyEhx8eJFRadOncpsM2DAAEXDhg0VgGLu3LkKT09P5X1ZWVlq39/06dMV33///ROPtbCwUERGRiosLCwU5ubmisjISIW5uXmN9/foz4IFCxTu7u7Vfn1ibMTYiLERY1NbY6PN46KvP7r8flR1f4/+aNJ7UpfHRpvHpa7HRvzNaOa4iLERP+p6j2jre1Kb34+6PC5ibMTYiLHRzbHRqEza3r17c/PmTaKioigsLMTT05MxY8aU2SYgIIDc3FwAAgMDsbW1rdX9VWTYsGGcOHGCtLQ00tPTOXHiBMOHD1fr/iZNmsQvv/xSpddUW8TYlCXGRoyNKnR5bLR5XPSVLr8fq7M/TXpP6vLYaPO4QN2OjfibUZ0u/81UZ3+aNDb6Spffk9r8ftTlcanO/sTYiLFRhRibsup6bDRqkrZVq1bcuXNH+XtsbCytWrWqcHs3Nze8vb2Vvzdo0ICgoCD+/fdf3NzcyMrKwsCg4peo6v5ef/11Ll26xIEDB5RvvqrGWtXHtGnTBgcHB/z9/ct9faq+adVFXWOTl5fHp59+ytKlS9m2bVu19te/f3/lfWJs1Pt3o0rs4u9Gdbo8Nto8LvpKXe/H4OBgcnJynnp+rcr+xLFCt8+x2jwuULfHcfE3ozpdPr9W9TGaNjb6SpfPsdr8ftTl82tVH6OrYyOO4+onxuYhKcZGoyZpq2LKlCn07NmTtWvXKm+zs7OjV69eTJ48mU8++YSuXbtSXFxco/0cOXIEe3t7unbtyokTJ9i1a1e1n2vUqFFMnjyZjIwM3N3dMTQ0LHe7Pn364Ofnh4WFBfHx8ezfvx8bG5syr2/Xrl2kpqaSnJzMl19+We2YasPTxiYpKYl58+axb98+Zs+eXaP9VDY2FhYWHDp0iE8//ZRly5YxadKkCp/LxcWFcePGkZmZya1btxg5cmSZ++3s7PD39yc7O5ugoCDOnj1b5r316Nhs2LCBtm3b1ui11ZbK/m7UFfvTxsbZ2Zm//vqrwseeOnWqTI2ZqnB1deXgwYNibJ5ClWOanZ0dq1atqvACYfny5SxcuFDlfWrzuOirp70fx48fT0JCAvb29jXej7rOse+99x7btm1j2rRpuLu7Y2xsXO52ffr04fjx44SFhWFubo6npyc2NjbAw9d36dIlfv31V1JTUzXu/AraeY599tlnuXLlCpmZmaxfvx5nZ+cy95eeYyMiImjQoAEDBw584rVpw7GiLo7j4vxaddp2ft2zZ0+V9qvNY6OvtO0cK65hNff8Kq5hxTWs1DRhbB7dry6cYzVqkjYuLo7WrVsrf7e1tSUuLu6J7QYPHsyyZctwcXGhoKBAefvdu3cBiIqKIiAg4ImLgOrsLzU1VbmP7du306NHjwofe+/evQr3NXToUFxcXAgJCcHOzo62bdsyffr0cl+fxf+zd95hUVxdGH9ZOihFUEB6EYRYUeyK0ahBJcYSRWNXNHYTSWwxCsYuRmMXW0BFsQYjxgYqMagoRZoICAhIV5ogsHi+Pwz7uUpZ6uzC/T3PeR6Wmbn3nXtm5szcuXOuujpkZGQwcuRIGBoaIj8/H8eOHRPs35AhQwAAy5cvR6dOnWBvb4+5c+dWua91pb58w+fzERoa2ii+2bt3L0pKSuDh4YFdu3Zh//79sLKyqrC+vLw8PH36FOrq6vjyyy/x5ZdfQkNDQ7Dc09MTwcHB0NDQQEFBAQYPHgxNTc1P9k/UY68+kbTzplWrVtVqFaW+iRMnIiEhAQUFBbh48SLU1dXh4ODwyacIL1++xMiRI+Ht7Q1dXV34+PjA0tJSaJ2lS5ciNTVVcPNZWQdPTZE033y4bfn/KqOwsLDaujp37oxHjx5h06ZNGDJkCDp37lzpvoWHhyM/P19gfD4fv//+u2D9QYMGISoqCm/evIGvr69QcnqGaEjy8aivr1/p8Th06FCsWLECCxYsgL+/P0xMTODs7Fxhferq6jh06BBiYmIwfPhwQXwt3785c+Zg4MCBOH/+PJYvX94o8RVo2jE2JSUFampqmDp1KtTV1eHu7g4rKytMmDBBsE55jI2MjMS2bdtw7tw5QYzlMr6W62+s84bFV9GR5OtZ+f/qUl95fH3z5g3Wrl2LR48eCW3/4f7p6uoKxVgWXxsGST4mq4ux7BlWPOMrwJ5hAfYMy2Js04yxnCUk/tikpaUpLi6OjIyMBAl8rayshNZJSUmhrKwsioqKooKCAjp8+DC1adOGbty4QXl5eXTjxg0yMTGh58+fExGRtLQ0ASA/Pz9ycXGhf/75h/Ly8ujatWvUpk2bKuszNDQkIiJHR0dKSUmh7OxsSkhIECQofvXqFV26dInOnDlDZWVltHjx4kr37eTJk7Rp0yZBfUOHDqWSkpJP9g8AWVhYUHx8vOB3165dKS8vj+Tk5AgAPXjwgNLS0gTJjWfOnEkBAQGc+6ZLly4UGxtLZmZmQv9XU1MTaE9MTKSkpCTas2cPeXh4CNaZPHkyJSQkUFZWFq1atYri4+Pp5cuXZGRkRC1btqTs7GzKycmhiIgIcnJyoqSkJNLW1hZs//XXXwvaQF1dneLj46m4uJi6detGz58/J3V1dXJ3d6dNmzaJtH8ZGRl04sQJAkDt2rWjt2/fUosWLQS+uXv3Ls2dO/eT/dPQ0KBnz55VmXhaXH0jqnZR6qvKNxkZGRQQEEBqamoC33y4rZ+fH82aNavK+uzt7SkvL4/69+9PysrKdPLkSfrrr7+Ezpvy/bOysqLc3FwaPnw4PXv2jHbs2EExMTGCa8PQoUMpLS2NrKysSE1Njfz8/Co9Tpq6b54/f05qamrUsWNHIiLS1NSssJ61a9fSiRMnqqxLVlaWEhISaOPGjRQfH0+LFi2ihIQEkpWVrXbflJWVKT8/n/r37y9YJycnh8aNG0fy8vK0devWBr/mNUWr7viIj4+nHTt20Nu3b+nNmzeC+Orj40N5eXl069YtUlNToy5duhARUYcOHQioOL5qaGhUWV95fHVycqKUlBR6+fIlHTt2TODXzZs3U0FBAZ05c4Zyc3MpIyPjk2tFuZ08eZI2bNggqG/SpEmUmppa4fEPCMfY8vhafkzeu3ePvv/+e8Ex2RjxVRTfAJIbYyvaNw8PD/r9998J+H+Mtba2FvilPMZyHV/r0zei6GfxVTz9Uh++qUl89fDwqLK+8vi6dOlS6tChA2VlZQnia3X7x+Ird9cKSY6x7BlWPONrRfvHnmHrVh+LsZLpmyYYYxvnJBTV7OzsKDo6mmJjY2nVqlUEgJydncne3p4AUGFhIRUXF1NYWBiFh4fT27dv6fHjxzRt2jQKCwujvLw8SktLox9//PGTTtrY2Fhq164dKSgoCA7iquorD3A5OTn05MkTevDgAWVnZ9PgwYMJAF26dInevXtHL1++pBkzZpCCgkKl+xUSEkLjx48X1FfeidyqVSuh/Ss/eD48wZYsWUJhYWH05MkTCgkJIT6fT+vXrxcs79atG+Xl5XHumxs3blBaWhoFBwdTcHAw/fnnnwSAevfuLdBeXFxM27ZtE5wgAMjS0lJwMMvJyZGrqyuVlpbSypUrKTo6ml69ekXx8fGkrq5Ov/32GyUkJFBSUhJt3LiRwsPDKSQkhHx9fcnCwkKoDcvKyigmJoamT59OAGjZsmXk7e0t0v6lpKTQ3LlzydnZmTZs2ECRkZFCvtm9e7fgAfPD/Xvy5AnNnDmTs/MmKyuLsrKyKC8vjzIyMmjDhg0C3+Tm5lJRURHx+XzKy8ujrl27Uu/evSkqKopev35NpaWllJ+fX+GsiR/atGnTKCIigl69ekV8Pp+ys7Opd+/edOnSJcrIyKD09HS6fPmywDd3796lW7duUW5uLj148IC8vb2psLBQ4JsvvviCoqKiKCcnh3bv3k23b98WCnAVHXsbNmygJ0+eCI49ExMT4vP55OrqKrRd7969KSUlhXJzcwW+kZKSosLCQho0aBAB/+/gKd9m0KBBlJqaWi9++emnnygzM5PKysqouLiYDh8+TMeOHaO7d+8KtD969Ij4fL7gvHnz5g05OTlRTEwMlZWVUVZWFkVGRtKTJ08EL6KqmrHSzs6O4uLiiIjo3Llz9OLFCyosLKS9e/dS9+7dKT09nfh8PmVmZgrOGx6PR9u2baO8vDwqKSmhjIwMoeunkZER3b59m/Ly8uj69eu0e/du8vDwqPKaMGTIEEpOTha6niUmJtKwYcOqPWemTp1KcXFxgt+Ojo507949wW8lJSUqLCwUOueZ1exaUZHP4uPjKScnhzIyMig8PJxKSkro9evX1KVLF7K1taX8/HxKTU2lqKgokeJrVfXNmjWLiIgiIiIoIiKCnj59SsXFxYLr9dq1a6m0tJRevnxJMTEx5OjoWOk+lcfX8vpiYmKIiARxsqoYu2TJEgoICBAck3w+n2JiYgTHZGPF1+p8A0h2jP1434KCguivv/4ie3t7+vrrrykyMlLIL+UxVhzia7n+jIwMKikpobdv31JERASdPn1a4JuIiAgqLS0lPp9PRUVFdPv2bQJAo0aNopycHCotLaXS0lK6efNmlfWw+Cq6NfX4WtU1Yc2aNZScnCx0PSuPrx9fEz4+b1h8bfhrRVONsewZVjzj68f7x55hK6+LxVjRjcVYzmNs456IdbX4+HiaNGmS4Pe5c+do3759gt8LFy6kixcvCjpYPwxwq1evFqw3b948unr1apV1lZfxYSNu2bKFDh8+LHDanTt3RNIdGxsrcCwAkpGRISIiQ0PDKrfr2LEjZWdnU79+/QT/4/P5QprMzMyIiDj3jaj+Gzx4sFCAW7NmDXl6egrWUVJSouLiYkFneFxcnFDbOTo6UlJSUpX19OvX75OL1OzZs8nPz69ajevWraOQkBDBG5LJkyd/8sbj119/pWPHjnHenh/buHHjSEdHh6SkpGj8+PFUUFBA2traNG7cOEpOTqbu3bsTADI1NSUDAwPi8XgUEhJCO3bsICUlJZKXl6e+fftWWce0adOotLSUpk+fTjwej9avX0+JiYm0Z88ekpOToyFDhlBeXh4pKysTAPL09KQzZ86QkpISffbZZ5ScnEz+/v4EvH+7lJeXR2PHjiUZGRlaunQplZaWfhLgPrZLly7RTz/9JPS//Px8sra2/mTdBQsW0JUrVwS/eTweFRUVCUa+f9jBU66p/OazLr4wNzenFy9ekI6ODgHvrycmJiZ07NgxoRtUW1tboeM5Pj6eAgICqE2bNtS2bVtKT0+nx48fU5cuXUheXp5u3bpFv/zyS5V1l1+79u/fT/Ly8jRkyBAqKiqiixcvUuvWrQXlDhgwgADQ3LlzKSoqivT09EhdXZ18fX2Frp///vsvubq6kpycHPXv35/y8vKERhFUZEuXLiUfHx+h/12+fJl++OGHatvu1q1btHbtWsHvnTt3Cl3nAVBYWBiNGTOG83OuKRmLr5IdX8t9yGJswxiLryy+ltfF4iuz2hiLsZIdY1l8bVhjMZbF2PK6WIwFiVVOWlFJT08X/F1UVPTJ7xYtWlS4XVpamuDvwsLCStf7mA9nfktMTETbtm0rXFYVBQUFUFFREfwu/zs/P7/SbUxNTXH16lUsWbIE//zzT5VlVVWOuNO2bVuhdiwsLER2dnalyxMTE6st8+M2AkRrpwULFmDq1KkYMWKEIOdJbcvignPnziE1NRVEBC8vL8TExKBHjx6YPXs2tm7dKsinEhcXhxcvXqBHjx5o27YtfvzxRxQWFqK4uBj37t2rtp74+HgcP34c7969w5kzZ2BgYAAXFxeUlJTgxo0bKCkpgZmZGXg8HsaOHYtffvkFhYWFiIiIEEryPXz4cEREROD8+fPg8/nYuXOn0HlaGS1atEBubq7Q/3Jzc9GyZctP1r158yZsbW1ha2sLWVlZrFq1CnJyclBSUqqwrPK/KyqrJpSVlUFeXh5WVlaQkZFBYmIinj9/LtK2u3fvRkZGBl6+fAl/f388ePAAISEhKC4uxsWLF0XOF7V+/XoUFxfjxo0bePPmDTw9PZGZmSkot7yc8ePHY+fOnUhOTsbr16+xadMmQRn6+vqwsbHBmjVrUFJSAn9/f1y+fLnaumviow8xMDCAra2t0HFS27IYNYfF16YVXwEWY+sLFl9ZfP0QFl8ZtYHF2KYVY1l8rT9YjGUx9kOae4yVyE7axubDpMIGBgaCRMEA8P7lX/VEREQITZrTuXNnpKWl4dWrVxWub2BggJs3b2L9+vU4ceJEtWVFRESIpEMcSU1NFWpjRUVFoYTnHy8XJdnys2fPICMjAzMzM8H/qmunGTNmYMWKFRg8eLBQ4uiIiAiYmJgI3RCJa5tPmTIFwcHBeP36NV6/fo0OHTpAU1MT+vr6iIuL+2R9fX19JCYmoqysrEb1fHxTCQAZGRlC/2vRogVat24NWVnZSm9QPr55AUS7aazJTUd0dDSmTZuGPXv2IDU1FZqamoiMjERycnKFZYly8ykKcXFxWLp0KdatW4eMjAx4enpCR0dHpG1rexNf23Kquols27YtXr9+jcLCwgqXV0ZtbwynTJmCf/75BwkJCXUuiyH+sPja8LAYWz+w+Mria23KYfGVwSUsxjYsLL7WHyzGshhbm3KaaoxlnbQisGbNGigqKsLKygozZszAmTNnalyGu7s7Zs2aBUtLS6iqquLnn3/G8ePHK1y3bdu28PX1xZ49e3Dw4MEKy/rhhx/Qtm1b6OjoYNmyZZWWJQmcO3cOI0eORN++fSErKwsXFxfweP8/NL28vLBy5UqoqalBV1cXixYtqrbMwsJCXLhwAS4uLlBSUkKfPn0watQoeHh4VLj+pEmTsHHjRgwZMgTx8fFCy2JiYhASEoK1a9dCXl4eX3/9NTp16oTz58/XbcfrGQMDA7i5uWHhwoXQ0NCAuro6wsPDISUlhaSkJJiamn6yTVJSEgwMDCAtLd0gmjIzM1FaWlrpDcrHNy8APvldER/f5BkbG0NeXh7Pnj2rcP3z58+jY8eO0NTUxNq1a2FkZITAwMAKy6ru5rMmeHp6on///jA0NAQRYcuWLXjz5o3gDSgAaGtr17meulLVTWRqairU1dWFNItykxkREYFOnToJ/a9Tp07V3hhOnTpV6A1keVkf+khJSQmmpqZieZPJqBksvjY8LMbWHRZfWXytLSy+MriExdiGhcXX+oHFWBZja0tTjbGsk1YE7ty5g9jYWNy6dQvbt2/HjRs3alzGtWvXsHXrVvj5+eHFixdITEzE2rVrBcvDw8MxadIkAMDs2bNhamqKdevWIT8/X2DlHDx4EJcvX0ZYWBjCw8Nx5cqVCgOhpBAZGYkFCxbg1KlTSE1NxevXrwVviADA2dkZiYmJiI+Px/Xr1ysNUh8zf/58KCoqCt4AzZs3D5GRkQCAfv36CbXpr7/+Cg0NDQQGBgrae//+/YLlDg4O6N69O16/fo3Nmzdj3LhxyMrKqqcWqB+UlZVBRMjMzAQATJ8+HR06dAAAHD58GE5OTrC2tgbw/jMkAwMDPHz4EKmpqdi8eTOUlJQgLy+PPn361Jumd+/e4cKFC1i3bh0UFRVhaWmJadOmCZZfuXIFn332GUaPHg1paWksXrxYpAv+yZMnYW9vj379+kFJSQkuLi64cOECCgoKKlzf2toaPB4PmpqaOHToELy9vREdHQ2gZjefNcHc3Byff/455OTk8PbtWxQVFeHdu3cICQnB8OHDoa6uDi0tLSxdurTOddUVLy8vLF68GLq6ulBTU8OKFSsEy168eIFHjx7B2dkZsrKy6Nu3L+zt7ast8/bt2ygrK8PixYshJyeHBQsWAAB8fX0r3aZ3797Q1dXF2bNnhf5/8eJFdOjQAWPGjIG8vDx++eUXPHnyROBDhuTC4mvDw2Js3WHxlcXX2sLiK4NLWIxtWFh8rR9YjGUxtrY05Rjb6ImhJcU+TtzOrPGsPDk71zokzX799VfKzs6mzMxMcnV1FZplcu7cufT06VPKz8+nsLAw6tKlCwEgfX19unjxImVlZVFmZibt2rWryjqmTZsmSJoOvE/g/nHS/6SkJEHydk1NTbp8+bJgZkwXFxeh7YcNG0bR0dFVzoxZkU2cOJESExOpoKCALl26ROrq6oJlPj4+tHLlSsFvf39/ysvLo+zsbDpw4AApKSkJlfX9999TWloa5ebm0tGjRwUJ9+tiHTt2pAcPHgjqvXz5Muno6JC8vDydPn2acnNzKTQ0lJYuXfpJ0vUPj30PDw+hBOSzZs2iGzduVFl3RdeupKQksrW1FSq3fCIKaWlp2rFjB2VlZdHz589p/vz5QtsbGxvT3bt3KT8//5OZMauyLl260KNHj6iwsFCQOL582cqVKz9Jyn7gwAFyd3evsKzBgwdTVFQUFRYWkp+fX7UTVjATb2PxlVtjMbbmxuLr+2UsvrL4ykz8jcVY7ozF19oZi7Hvl7EYy2IsAJL67w9GBRgaGiIhIQEyMjI1znfCqBvx8fGYPXs2bt26xbUUBoPBYNQzLL5yC4uxDAaD0XRhMZY7WHxlMBh1pdmnO5g0aZLQ5xjlFh4eXuOyfHx8Kixr5cqVDaCcoa+vX2F75+fni5QThsFgMBgNB4uvkg2LsQwGgyG+sBgrubD4ymAwqoPz4e3MmDETL9u/fz/l5+d/Yvv3729WGsTZJk2aVGH7hIeHNysNzJgxYyZJJg6xTRw0iLOJQ2wTBw3MmDFjJmkmDvFNHDSIs4lDfBMHDVUZS3fAYDAYDAaDwWAwGAwGg8FgMBgcIsO1gI/JyMhAYmIi1zKaHIaGhmjTpk2dymC+aRiYb8QX5hvxpD780lxhx2PDwK4V4oGRkRFUVVXB5/MRERFRoV927dqF4cOHo7CwENOnT0dwcHC15TLf1D/snBFfWIytPeyYrH/q63hkvql/2HVcfGG+EV9E9Q3nw3k/tMDAQM41NEWrj3ZlvmG+aW7GfCOextqUtZ24GbtWiIf179+funbtSmFhYRW2qZ2dnWBG3p49e9L9+/eZbzgyds6Ir7F2ZW0nTlZfbcp8I56+YX5hvmluJkq7NvuJwxgMBoPBYDAYko+/vz9evXpV6fJRo0bB3d0dAPDgwQOoqalBW1u7seQxGAwGgyGxHDlyBOnp6QgLC6t0nV27diEmJgahoaHo2rVrI6pjMJoOrJOWwWAwwG48GNwwbNgwPH36FDExMVi+fPknyw0MDHDz5k2EhobCz88Purq6AICBAwciODhYYEVFRRg1alRjy2cwJApdXV0kJSUJficnJwvOqY9xdHREYGAgAgMDoamp2VgSmywsxjIYDIZkc/z4cXz55ZeVLrezs0O7du3Qrl07zJkzB/v3729Edc0XFl+bHmLdSSslJQV1HTbCQRxRaNkCCi1bcC2Dwag3Tnqegv3XX1e6nN14VI+sgjzkFBVEMp6MNNdyOYfH42Hv3r2ws7ODlZUVJk6cCEtLS6F1tm/fDnd3d3Tu3BkuLi7YtGkTAOD27dvo2rUrunbtikGDBqGwsBDXr1+vUf1SPB4UWijX2/4w6g9pWVnIKSpwLaNZ4+bmBhsbG9jY2CArK4trORLP+cve7OG+DkjxeCLH15qarII817vXJFFWU4WMnBzXMhgVoKrVmmsJEgn7WkU8cffwwFejR1e6nMXX6im/724Ik5ap+TRgYjdx2If0mTAGI75fgEubf8PDi5e5lsP4gPHrVkLPygLuy1YjOTKaazkMRo1RVGkJ466dYWLdGSbdukDPqj0CjnhUun5lNx5paWmNJVms+XzGtxj5w0KR1y99W4yQa7dw/9yfSAh50oDKxJcePXogNjYW8fHxAIDTp09j1KhRiIqKEqxjZWWFH374AQDg5+eHS5cufVLOuHHjcPXqVRQVFdWo/oV/HEBJUREOzllSh71g1DcycnLYFOiHa3vdcPPQca7lNClSUlKgr68v+K2np4eUlBQOFTV9WhsZYOT382HRtxdOzXOqdD0WY6tmkftBGHbu0CBlZ8QnYstXDg1SdnNF01AfTuc9cGGDK3uGFTO62dvBYf1qbBk1EVmJSdVvwBCZyr5W+fg67ujoiDlz5gAA+1KlEtoYG0LTQB9KqirVmCoUW7ZAdkTl/THxcv6zAAAgAElEQVQsvlaNlqkxfvA63mAv1a4fOIpre91qtI1Yd9KG+d5Fx8EDMcFlFdr364WzzptRlJfPtSwGgDvunpi6/Vcs8jiES1t2IsDrIteSGIwqUWmtCRPrzjDu1gUm3bpA28wEPB4P/JISJIVHwe/4SbyKiql0e1FvPIDmefPR+csvkBYXj8BLV0RaX0NfF9bDh8Jm1HCkxcXj/rk/8cj7Kory8hpYqfhQ0THVs2dPoXVCQ0MxZswY/P777xg9ejRUVFTQqlUroZEMDg4O2LFjR6X1VHY85mZkQtvMpL52h1FP8EtKUJiTCzVtLa6lNDm8vb2xcOFCnD59Gj179kRubi57SGkgWmioY+h3s9Br3CiUvi3GjYPHUJhb+fWdPdxXjpyiIgw7d0DE7X/w/HFIvZffnOJuY5GVmITMhBfoP3k866QVM6L/vY8yPh8DJk/AhQ3buZbTLHFzc4Ob2/tOq8DAQI7ViAdSUlIw7NQBHQbbosOgAWhtqC+0/F1ZGQpz895bXh7ys18h/XmC4H8yhcWY+Fm3Cstmz7BV0+HzAZCRk8OVnfvxrqys3stPDK08DUVliHUnbV5GJg7OWYyB0yfBbtF3MOz0GU6udMbzR8FcS2v2JIaGY8c30zBx4y8Yt+YnmHbrgrPOW1BcWMi1NAYDwPtg18VuCMx72cDYurMg2BUXFiIhJAyh127heVAoXoRFgl9cDAAwNDSsl7qb281HCw116Fu1h8/vB3D7+EmRt7u8/Xd0HjYYvcaNwtfLl2LE0nl4csMP98/92SAPopKIk5MT9uzZg+nTp+Pu3btITk5G2Qc3ENra2ujYsSOuXbtWaRmVHY+56Zlo369Xw4ln1JqctAyoabfhWobEcerUKQwcOBCamppISkoCn8/H3LlzAQAHDx6Ej48Phg8fjtjYWBQWFmLGjBkcK256yCrIw3bqRHw+czJk5eVx/9yfuL7/CApeva6XGNvc4isAaJkYAQAeXvwL4b53uBXDEBn/k2cxwWUVTLt3RRx7dhUbCrJfI+iva7AZNQJ/7zlU5csjRs1gX6vUDGlZWbTr2Q0dBtnis8/7Q0VTA/zSUsQ+eIzbf5xCSmQ03uTmojA3D8UFb0BElZZlaGgI/Fh3Tc0xxpr3tkFK1DP4HnHnWooAse6kBQAigt+xk4h58BiTtzhj3pE9uHX4D1zffwTv+PXf080QnTc5uTiywAmfz5wCu0VzoGtpgT+WrUZaTBzX0hjNHJ60NMY7r4LNqOF4k5OL+OBQBHhdxPPHIUiJflarawe78agc8949AADR9x7UaLuSorcIvHQFgZeuQMfcFL3GjkK3kV+i28gvkRGfiIBzl/DY+yre5OQ2hGzOEeWYSk1NxdixYwEAysrKGDt2LHJz/98e48ePx8WLF8Hn82tcf256BuSVlKDQQhlvC97Uci8YDUFOWho09PW4liFxTJo0Seh3YGAgDh48KPS/hQtFT8vCEB0pHg82Xw3HlwvnQFWrNcJu3cGVnfuQmfBCpO1ZjK0cbTNjAEBa3HOOlTBqQpDPdYz8fj76T57AOmnFjDsep9Fz7Ffo/c1o3Dr8B9dymgzsa5XqkVdWgmW/3ugwaAAsB/R9fw/+5g2e/nMf4bfuIMr/33q/J2fxtXLkFBVh1LUT/D3OcC1FCLGeOOxDkiOfYsf46Qi8dAVD5szAwuMHoKFX8Yy8jMaDiOB7xB37Zy+CQgtlLD11BDZfj+BaFqMZw5ORxreb18Fm1HD8vdcNawfY4dji5bjj7omkiKhav9zx9vbG1KlTAYDdeHyERZ+eKHj1GilRtc9PnfosDhc37YDzYHt4rl6PNzm5GPXjEvxyyxuTtzg3yet9YGAg2rVrByMjI8jKysLBwQHe3t5C62hoaEBKSgoAsHLlShw9elRo+cSJE+Hp6Vmr+nPS0gEAqlpsxGZFDBs2DE+fPkVMTAyWL1/+yXIDAwPcvHkToaGhsLCwgK7u+2N04MCBCA4OFlhRURFGjRpVo7pz0jKgxvzCkBAs+vbCD2f/wIT1q5GTlo49077D8aUrRO6gBViMrQotUxOUFhcjO4k9VEsS/OJiBJz7E5993h+tdHW4lsP4gPS4eDz95z76TRoHaVlZruVIDKdOnUJAQAAsLCyQlJQETU1NzJ07V/DFio+PD54/f47Y2Fi4ublh/vz5HCsWH2Tk5PDtFme43L2KKdt/hVnP7gj5+yYOz1+GtQOGw8PpZwRfvdEggyZYfK0ck+5dICMri2f3H3It5RNInCwwMLDadToPG0y/3rtOG+7fpG4jv+RcsySYKO1a1zJaaKjTd267yTUsgCasX02yCvKc77ckWGP4prmYtKwszfh9C7mGBdDAaZNqtO2pU6fo5cuXVFJSQklJSTRz5kxKSEiguXPnCtbZs2cPxcbG0pMnT6hbt27MNwBJSUnRuttX6NstzvVetpapMY36aSk53/EhNa02TbJN7ezsKDo6mmJjY2nVqlUEgJydncne3p4A0NixY+nZs2cUHR1Nbm5uJCcnJ9jW0NCQkpOTSUpKSuT6Pmw7oy6dyDUsgCz69OS8HcTNeDwexcbGkrGxMcnKylJISAhZWloKrePl5UVTp04lAPT06VNyd3f/pBx1dXXKzs4mRUXFGvnm8xnfkmtYAMkrK3HeFpJs9XWtaErXnPq0thbtaO6hXeQaFkArfc5S52GDK1334xgbHx9Pc+fOrVOMbS5+mb3PlX44+0ej1ddc2rUx2k5VqzVtDfYn+2WLONcmqdZQ13Hz3j3INSyAun81nPN9lFRjz7Ci27dbnMk1LIC+XvE9GVt3Jiker97KZs+wtbevflpCmwNvk4x84/Vbidiu3DdObQ4GNW0tmn98H7mGBdC3m9eRQgtlzrWLszXWRVSKx6Nh82fTttB75HThBLUxNuR838XdWICrH5NVkKc5B34j17AA6uswlvmmkUy3vXmD3+TyZKSbVZs2pH3Yduo62uQaFkA9RttzrkvcrFevXvT3338Lfq9YsYJWrFghtE54eDjp6ekJ2jU3N/eTchwdHenEiRM19k1XuyHkGhZAWqbGnLeFJBvrpG04GzRrCm0LvUcu/n9T/8kTSFpWttHbtLn4ZfW1C/Tt5nWNVl9zadfGarvJW13o13vXSU6El3XMRGvT+irH6cIJWnbu0xeszBrPN83hejP0u5nkGhZAg2ZNYb4RM3O6cILmHNzZqHWK0q4Sk+7gY3LS0rF/5kJc3X0QnYcNxg9n3WHUuSPXspo99O4dru07DLfvvkdLjVZYevooutoN4VoWo4kjr6SE2Xtd0a53D5xZswH3Tp/nWlKzwaJvTwBA9L81y0dbE1j+8YYhLzML7969g5pWa66liB2VzYT7IaGhoRgzZgwAQE1NDSoqKmjVqpXQOg4ODlWmo3B0dERgYCACAwOFZtEtT0Whpq1V531hMOqbnmO/woil8xF67RY2Dh8H/xNnUFZayrWsJom8khJatdVBWlw811IYteSfk2ehqNIS3b+y41oK4yPuuHuirUU7tOvZnWspjCaK9YihGLbAEQ8v/gXfIx5cy2F8gEprTei0M8WzAPGbIE1iO2mB9x2CNw8dx97p8wAQ5h/fB8sBfbmWxQDwLOAhXL+ZhpdPYzB5qwtGr1omyKvIYNQnCi1bYM7BnTC27oxTK53x8NJfXEtqVlj06YmUp8+Qn5XNtRRGDSnj81GQ/YrlpK0lTk5OsLW1RVBQEFq2bInk5GSUlf3/hYK2tjY6duyIa9euVVqGm5sbbGxsYGNjg6ysLMH/c9IyAABq2sw3DPGiw6ABGLfmJ0T5/4tTq5zxNr+Aa0lNGi1TIwDvc2gyJJOE0DC8CI9Ev0nfsGchMSPoynXkZWXDdtpErqUwmiBGXTphgstqxD58jHMuW7iWw/iIdr1sALzvtxI3JLqTtpzE0HDs+GYaXkbHYMo2F+iYm3EtiQEgLyMT+2YtwO0/TqHfxHEY8/OPXEtiNDGUVFXw3eHd0PusPTx+XINgn+tcS2pWlM+I2ZCjaBkNS056BhutWQGizISbmpqKsWPHwtraWrAsNzdXsHz8+PG4ePEi+Hx+jevPzcx8P8qZ+YYhRhhbd8bkLS5IingK92Wr2VcOjYC2qQkAIC32OcdKGHXB/6QXtEyMYN67B9dSGB9QVlqKe6fPw7J/H2iZGHEth9GEaKXXFjN2bcbrl2k4/v0qlNXiXpDRsFj06YH87FdIfRbLtZRPaBKdtADwtuANji76CUX5BZi1ZxtaarSqfiNGg/OOX4bL23fjptsf6DN+NL76cTHXkhhNhBYa6ph3dC+0TY1xfMkKhN28zbWkZodZj26QkZVF9D3WSSup5KZnQpWlO/iEwMBAtGvXDkZGRpCVlYWDgwO8vb2F1tHQ0BCMitLR0cHRo0eFlk+cOLHKVAdV8Y5fhvzMbDaSliE2aJuZYOburXidmoYjC5ahpOgt15KaBVpmxih9W4zs5JdcS2HUgdBrvsjLykb/yeO5lsL4iIAzF1D6thj9p0zgWgqjiaDQsgVm73WFFI+HwwuWoSgvj2tJjApo18sGMQ8egYi4lvIJTaaTFnifX+/ooh+hpKqKGb9vhYy8PNeSGP9x9fcDuHviDGynTsSwBY5cy2FIOCptWmPBsf3Q0NPFkQVOiPL/l2tJzRKLvj1RXFiE+OAnXEth1JLc9AyosXQHn1BWVoaFCxfi2rVriIqKgpeXFyIjI+Hs7Ax7e3sAwMCBAxEdHY3o6GjIyMhgw4YNgu0NDQ2hr6+PO3fu1FpDTlo6G0nLEAvUdbQx58BOlBYV49DcpXiTk1v9Rox6QdvUBBnxiaB377iWwqgDZaWlCDhzAZb9+0DTUL/6DRiNxpucXAR6+6C7vR1atFLnWg5DwuHJSGPajo3Q0NfF8aUrkPUimWtJjArQMTeFiqYGnonp16BNqpMWAFKinuHUynXQ72AJh/WruZbD+ADvrbvw4Lw3hn43E5/PnMy1HIaEot5WGwuO74NKa024zfseMQ8ecS2p2WLRpyfiAoPYhDESTE56BhRVWkJeSYlrKWLH1atXYWFhATMzM2zcuBEAsHbtWly+fBkAcP78eZibm8PCwgKJiYkoKSkRbJuYmAg9Pb06vZ1/nZbOOtAZnKOspoo5B3dCTlEBh+Z9j9epaVxLalZomRohLY6lOqgtw4YNw9OnTxETE4Ply5d/stzAwAA3b95EaGgo/Pz8hCaI5PP5CA4ORnBwMP788886a/n37EXwS0vRf9I3dS6LUb/4nzgDWXl59Bk/mmspDAlnzGonmPeywdl1m/H8cQjXchiVYN7rfeqZaDGcNAwQsZNWnAKcKIT73oXPzn3oajcEQ+fNapQ6GdVDRDjrsgVBPtcx8vsF6DtxHNeSOKG680lfXx++vr4ICgpCaGgo7OzYbLDltDE2xILj+6GkqoIDjosRHxTKtaRmSyu9tmhtqI/of+9zLYVRB3LT309QxVIeiB9sJC2Da+QUFTBrz3aot9XGkUU/Ii0mjmtJzQp5ZSWo62gjLZZNGlYbeDwe9u7dCzs7O1hZWWHixImwtLQUWmf79u1wd3dH586d4eLigk2bNgmWFRUVoWvXrujatStGjRpVZz0F2a8RcvUmuo8aDoUWynUuT9IRtX/BysqqwfsXMuITEXnnHvo4jIWMnFydy2M0T2ynTkTvcV/jxqFjeOTtw7UcRhWY9+6BtLh45GVkci2lQqrtpBW3ACcqfsdO4uHFvzBs/mx0HT600eptbMQpwIkCvXsHz9UuCPe9gzGrlsHm6xGNUq+4UNH5pKCgILTOzz//DC8vL1hbW8PBwQH79u3jSK14YWpjjUUnDkFGTg77Zy5EUngk15KaNRZ9egIAnrJ8tBJNTvr7mxNVNmJT7MhJy4CcogKUVFW4lsJohvBkpDFl+6/Q72CJEz/9wl6KcoCWqTEAIJ2NpK0VPXr0QGxsLOLj41FaWorTp09/8ixqZWUFX19fAICfn1+DP6v6nzwDBWVl2Hw9skHrEXdq0r8QGRnZKP0Lt/84hZYarWA9Yli9lMdoXnQYNAAjly1EyN83cW2PG9dyGFUgIycHk25d8CzgIddSKqXaTlpxDHCics5lC+IeBWOCyyoYdu7AtZx6RxwDnCi845fB3WkNou/dx/h1K9Fl2OBGq5trKjqf1NTUhNYhIqiovH8oV1VVxcuXbLKI7l8Nx9yDu5CXkYVdk2bhZXQM15KaPe379kR28ktkJSZxLYVRB3LT3o+kVWMjacWOnLR0AO/zgTIYjc34dSthNaAvzq3finDfu1zLaZZom5oAABtJW0t0dXWRlPT/e5Tk5GShwSoAEBoaijFjxgAARo8eDRUVFbRq9X7yaQUFBQQGBiIgIKDK5yRHR0cEBgYiMDAQmpqaVWpKjoxGfFAo+k0aBylek8s6KDLi2L8QFxiElKhnsJ3q0KD1MJoeupbmmLRpHZLCIuH5869iOREV4/8YdekIOUUFPBPTVAeACJ20jRHgahLcakIZn4/jS1cgNz0TM3ZtgXrbpvWgI44BTlTKSktxbOkKxIc8waRN6/DZwH5cS2oUKjqf5D76rGbdunWYPHkykpKS4OPjg0WLFlVYVkOdN+LGsAWOmLhhDeIeB2P31Ll4/ZLlw+Manow0zHp0R7SYJltniE5uBhtJK67klHegazPfMBqXEUvnwWbUCFzdcwgPzntzLafZom1mjJKit3iVwl7WNxROTk6wtbVFUFAQbG1tkZycjLKyMgDvJ4C0sbHBpEmTsHPnTpiYmFRYhpubG2xsbGBjY4OsrKxq6/Q/dRaa+nqwGtCnXvdFkhDHDnQAuOPuCW0zE1j07VWb3WI0Q1S1WmPW7u148zoHR5f8BH5xMdeSGNVg0acHykr5eP4omGsplVIvr/DqGuBqGtxqQmFuHo4sdIK0rAxm7dkOeeWmMzmKJHegA0Dp22IcWeCE5KhoTHXdgHa9bOq1fEll4sSJOH78OPT19TF8+HB4eHhASkrqk/Ua8rwRB2Tk5PDt5nUY+t1MPLhwGW7zvsfb/AKuZTEAGHXuCIUWyohmqQ4kHn5JCQpevWadtGJI+UhalpeW0ZgMmOKAQbOm4t7p87h58BjXcpo12qbGSI9PYKOyaklKSgr09fUFv/X09JCSkiK0TmpqKsaOHQtra2usXv1+wunc3FwAEHzJFh8fj9u3b6Nr1671oivs1m3kpKWj37fj66W8pkp5/4KVlVWjdaCH/H0TuemZbDQtQyQUVVQwa/f7/qUjC51QkP2aa0kMEWjXuwcSnoShuLCQaymVUm0nrbgGuJqQEZ8I9x9Wo42xIaZsWw+etHSja+CKuga4hu4ILH5TCLd5PyAjPhEzdm2BcddO9V6HOFHR+fThjOAAMGvWLHh5eQEA7t+/DwUFhSY9UrYilNVUMffQLliPGIYrO/fDa+1GvOOXcS2L8R8WfXqijM9H7MNHXEth1AO56ZlQY520YkdB9ivwS0vZSFpGo9FpyOcY9dMShF73xcVNO7iW0+zRMjNBOkt1UGsCAwPRrl07GBkZQVZWFg4ODvD2Fh4ZrqGhIRgIsXLlShw9ehQAoKamJvjSTUNDA3379kVkZP3MhfCOX4Z7p8/DvJcNtM0q7lxs6tSkfyEyMrLR+hfK+Hz843kWFn16QsfctF7KZDRNVNq0xoLj+6BlagT3ZauRFstyh0sCymqq0G1vjmf/im8+WkCETlpxDXA1JebBI1zYsB2W/fvAflnFn49LGuIa4GpKUV4eDs5Zgtz0DMzetwN6Vu050dEYVHQ+5eTkCK3z4sULDB78Pk9v+/btoaCggMxM8Zx5sCHQNNDDohNu0O9gCQ+nn+F7xJ1rSYyPsOjbE4mh4Xhb8IZrKYx6ICctHaosJ63YQUTvO9DZSFpGIyDF42HkDwuRFBGFUyudQe/ecS2pWaPQsgXUtNogjU0aVmvKysqwcOFCXLt2DVFRUfDy8kJkZCScnZ1hb28PABg4cCCio6MRHR0NLS0tbNiwAQBgaWmJR48eISQkBH5+fti8eTOioqLqTdv9c3+i9G0x+n37Tb2VKUmIc/9CwNk/UVxYhAFT2GhaRsVoGupjkftBqLfVhtu8H1j6NwmiXc/u4PF4Yj1pGCBCJ604B7iacv/cn7jj7okBUyag9/jRnOmoL8Q5wNWUglevsX/2IrzJycHcQ7vQ1qIdZ1oakorOp7dv3wqdT8uWLYOjoyNCQkLg6emJ6dOncyu6ETG27ozFJw9DsWULHJi1CCHXbnEtifERyupq0LW0YDckTYic9Aw2klZMyUlPhyobSctoBDoMGgANvba4eegP8D/6wofR+GibGANgk4bVlatXr8LCwgJmZmbYuHEjAGDt2rW4fPkyAOD8+fMwNzeHhYUFHB0dBV+3BQQEoFOnTujSpQs6deokeH6qLwpz8/D4r7/RfaQdlFRV6rVsSaAm/QsdOnRo1P6Forw8BP55BdYjhqGlpka9lctoGuhZWWDhHwcgqyCP/TMXIPbhY64lMWqAee8eKMzLQ1LEU66lVAuJkwUGBjZo+VI8Hs3as522BvtTu57dOd/fupqdnR1FR0dTbGwsrVq1igCQs7Mz2dvbEwAaO3YsPXv2jIqKisjNzY3k5OQIAPXu3ZuePHlCISEh9OTJE5o5cybnvgFArXR16OfrF8nF/2/SMTfjvH0bw+qjXRvDNw1t1iOG0pbHd2i592nS0NPlXA/zTcXWdfhQcg0LIP3PLCXaL83VKmq7wbOnkWtYAMnIy3OuT1Ktoa4V325eR6uunud8/yTV6uta0RyuOQv/OEArfc6SFI8nMb5pyn7pOfYrcg0LoFZ6bRu97qbcruLUdtrtTMk1LIA+nzmZc93ibFxcxzX09Whb6D36ctEczvdfnK25XcdNbaxpQ8BNWv33BdI01OdcD/NNzW31tQs0bcdGsfdNvUwcJknQu3c48dMvyIhPxJTtv6KVrg7XkuqEqG+Iw8PDG/UNcW15lZKK/TMXovTtW8w7vJvlA2omfDF3Br7d7IyE0HD8PnkOspNTqt+oARg2bBiePn2KmJgYLF++/JPl+vr68PX1RVBQEEJDQ2FnZ8eBSm6x6NMTb17nIDkqmmspjHoiJz0DAKDahqU8EDdep75PRVHR5JEMRn2h38EKxtad4X/Ci6U5EBO0TU1QXFiE1ympXEthNBBpMXGIefAIfR3GNqv5UiSB7KRkRPj5o8/4MZBVkOdaDkMM6DjYFnMO/IbXqWnYPXUushKTqt+IIVa0NjJAq7Y6eBYQyLWUaml2nbQAUFxYiGNLVkCKJ4XpOzdDTlGBa0mMD8hOTsG+mQtRWlKC79x2N9uk+s2FL+ZMh93COQj80weH5ixBUV4eJzp4PB727t0LOzs7WFlZYeLEiVBQEL42/Pzzz/Dy8oK1tTUcHBywb98+TrRyhZSUFCz69sSzgIfsQb4JkftfJ60ay0srduSkpUNGVhYtNFpxLYXRhLGdMgFF+QUIvHSFaymM/9A2M0ZGfAKIiGspjAbE/6QX1HW00WGwLddSGB9xx90Tymqq6G4/nGspDI7pOfYrTHXdgKSIp9g7fT7yMprPXDFNCfPePQBA7PPRAs20kxZ4/4bsxE9roWNuhvHOq7iWw/iI7KRk7J+5AGWlfHx3eDe0TI25lsRoAIw6d8TQebMQdOUaTv+8HmV8PmdaevTogdjYWMTHx6O0tBSnT5+Gmpqa0DpEBBWV97nDVFVVBZPvNRd0zM2goqnB8tE2MQQjaVnuU7EjJ+2/DnQ2eRijgVDTaoNOQwfh/rk/UVxYyLUcxn9omRizfLTNgMg795CdnIL+k5rnBGLiTHxQKF6ER8J2qgM09HTRSq9ttaauo821bEY9M2jWVIxftxLR/z7AwTmLORtMxKg75r1tkJ2cwtkXuzVBhmsBXBJ97z58du3HyO8XIDkyGrePn+RaEuMDsl4kY9+sBZh/dC/mHdmD/TMXIP15AteyGPWEQgtlTNq8Djlp6Ti3fivXcqCrq4ukpP9/upKcnCyYXK+cdevW4fr161i0aBGUlZXxxRdfVFiWo6Mj5syZAwDQ1NRsONGNjEXfngCAp/dYJ21TonxEgJoW6wgUN3LS0gEA6jpaSArnbnJPSWHYsGHYtWsXpKWlcfjw4U+W6+vr448//oCamhqkpaWxYsUKXL16lQOl4kO//zqH/jl1tkHrYb4RHYWWLaCq1Rrpcc+5lsJoYOjdO/zjeQ6jflyC3uNHoyD7lUjbJT6JQF5mVgOrY9z5wxNTtq3HqqvnRN4mPigUf277ncVsCUdKSgr2Py6G7RQHPP7rb5xe8yve8cu4lsWoJTwZaZjZdEOQz3WupYhEs+6kBQC/oyegZ2mBEUvn4WV0jEQMf25OZCUmYf+shZh/dC+++6+jNiM+kWtZjHpg3JqfoKbdBnumfYfiN5IxemfixIk4fvw4duzYgV69esHDwwMdOnT45HNENzc3uLm5AQACA8U/742oWPTpiZfRMcjPyuZaSpPh446LLVu2CC03MDDA0aNH0bp1a7x69QqTJ09GSsr7N8D6+vo4fPgw9PX1QUQYPnw4EhNrfn0sKXqLwtw8qLGRtGJHeSctG0lbPeUpa4YMGYLk5GQEBgZC+qM8j+Upaw4cOABLS0v4+PjA2Lj5fqkjp6iIXuNGIezmbcGx1hAw39QMbdP3ab7YSNrmwcOLf2Ho3JkYt+YnkbcpzM3DiZ9+YV82NTCh126hrLQUckpKIq3fspU6bKdPwlLPIwi6cg1Xdu5v0GtrY9NcXrbxZKQxwWU1utvb4a7HGXhv2yX2qWeai29qi0GHz6DQQlli+vqafSctAJz5ZQPamBhhyrb12OkwUyKGQDcnMhNeYP+shZh3dC/mHd3LOmqbAN3s7dB1+FD4/H4AL55EcC0HAJCSkgJ9fX3Bbz09PcFEe+XMmjULX375JQDg/v37UH2TpwYAACAASURBVFBQgKamJjIzm35uIjlFxfcTy3ic4VpKk6Gijgtvb29ERUUJ1tm+fTvc3d3h7u6Ozz//HJs2bcLUqVMBAO7u7tiwYQNu3rwJZWVlvKtDnuCc9Ayospy0Ykdhbh5Kit6yDnQR+DBlDQCcPn0aCxYsEFqnuaes+Ribr0dAUaUl7nicbtB6mG9qhrbZ+87pNDaStlnwNr8Am7+agJYi5h6XV1LG2DU/Yvb+Hfh79yH4HnEX+w4kSYWIEHbrTo22CTh7CZ/PmoyBUyeh4+CBuONxGr5H3CVmQEplNJeXbdIyMpi+czOsbPvC5/cDuOX2B9eSqqW5+KYumPe2wbuyMsQ+fMy1FJFotjlpP6Sk6C2OLXk/k/uM37dATlGRY0WMj8mIT8T+mQsgJSWFeUf2oLWRAdeSGLVEQ18PY1YvQ9yjYPge8eBajoDAwEC0a9cORkZGkJWVhYODA3JycoTWefHiBQYPHgwAaN++PRQUFJpFBy0AmNpYQ0ZWlo3aqEcqyoM8atQooXWsrKzg6+sLAPDz8xMst7S0hIyMDG7evAkAePPmDYqKimqtJTc9A6parCNQHMlJS2cjaUVA1JQ1kydPRlJSEnx8fLBo0aJKy3N0dERgYCACAwObVNqacqR4PPT/djwSQsIa/GVpffqmqfsFALRMjVFcWIic1KYzAo9RNQXZr5H6LE4kSwh5gt2THRFy9QaGL/kO037bBHll0UZ6Mhqe4sJC/L37EDaPHI/QG774wnEaVl45i17jRoH3UceZJNFc5u6wHjEUVrZ9cWGjq0R00ALNxzd1waJPTyRFPEVRXj7XUkSCddL+x6vkl/D48WdomRjB4defuZbDqABBRy2Ph3lH9kDTQI9rSYwaIi0jg8lbnPGOX4ZTK9aB6jDyr74pKyvDwoULce3aNURFRcHLywtv376Fs7Mz7O3tAQDLli2Do6MjQkJC4OnpienTp3MruhFp37cniguL8DwolGspTYaKOi50dXWF1gkNDcWYMWMAAKNHj4aKigpatWoFc3Nz5OTk4Pz58wgKCsLWrVvB49U+pOekZ0CNddKKJcw39Ud5yhp9fX0MHz4cHh4ekJKSqnBdNzc32NjYwMbGBllZTS/3o5VtX7Q21G/wUbSiIqpvmrpfAEDbzATpcQlsdCSjUkqK3uLkinW4tPk3WNn2xVLPo9AyMeJaFuMDctIz4LnKBTsdZiIjIRHfrF2BH87+AYs+PbmWViuay8u2nmO+QmbCC9zzFD0PMdc0F9/UFoUWytDvYIln9yUj1QHAOmmFeBYQiCu/7UPnoYMwaNZUruUwKiD9eQIOzF4EnrQ05h3dCw191lErSQxb4AiDjlbwWrdJMKO8OHH16lVYWFjAzMwMGzduBACsXbsWly9fBgBERUWhX79+6NKlC7p27YobN25wKbdRsejTE3GPglBWWsq1lGaFk5MTbG1tERQUBFtbWyQnJ6OsrAwyMjLo378/nJycYGNjAxMTk0pfGohyw5WbnomWGq0gLSvbgHvDqA1sJK1oiJqyxsvLC4BwyprmyIApDniVkorwGn7KWxuYb2qGtqkxS3XAEAn/k144MHsRFFVaYonnEXQa8jnXkhgfkRQRhX3T5+P40hWQlZfHnIM7MXv/DmiZNr1PzSX9ZVsbY0MYW3fGgwveXEupdyTdN3XBrEc3SMvI4FmA5MwTwzppP+L2H6cQ5HMddovnon3/3lzLYVRAWuxzHHBcDBlZWcw/ugc65qZcS2KIgFmPbvh85mQEnLuEsJu3uZbDqAGtdHXQ2sgA0fdYqoP6pKKOi/JJwcpJTU3F2LFjYW1tjdWrVwMAcnNzkZycjJCQEMTHx6OsrAyXLl2CtbV1hfWIcsOVm/b+pYlqm+bZKSLO5KRloGVrDfBkJPczycaApawRHV1Lc5jZWOOfU2fxrqzhZ6tmvhEdRRUVqLTWRDqbNIwhIs8fh2DH+OlIjYnDtB0bMfL7BRL9WX1TJezWHWz9ehL+3LYLhp0+g9N5D3y5cA6k6vAVVGPSHF629RzzFcpK+Qj09uFaSo1oDr6pC+a9e6C4sBCJIWFcSxEZybgqNDJeazciNToWkzc7s0/qxZS0mDgccFwEKSkeFnm4ofOwwVxLYlSBkqoKJm1ci6zEJHhv3cW1HEYNsejTCwBYPtp6pqKOC29v4bf3GhoagjfdK1euxNGjRwXbqqmpCW6wBg0ahMjIyFprKR/ZzvLS/p9hw4bh6dOniImJwfLlyz9ZbmBggJs3byI0NBQWFhZCqSr09fVx7do1REZGIiIiAoaGhrXWkZOaBh6PB9XWbGK3qmApa0RnwBQHvH3zptFGCzHfiA6bNIxRG/IyMrFvxgLcO30en8+cjDkHdkJZXa36DRmNSllpKe66n8am4d/g0eWrGDJ3Bmbu3gqFli24llYtTf1lm7SMDLp/ZYeI2/4oyH7NtZwa0dR9U1fMe9kgLjAYZXw+11JqBImTBQYGcq4BAKm31SaXu1fpx4snSV5JiXM94tCu4uKbD62lRita6H6QXMMCaMTSeSTF43GuifnmU5uxazNteXyHdNubc66F+abmNn3nZlr99wXOdTSlNi03Ozs7io6OptjYWFq1ahUBIGdnZ7K3tycANHbsWHr27BlFR0eTm5sbycnJCbb94osvKDQ0lJ48eULHjh0jWVnZWredlokRuYYFUFe7IZy3iTgYj8ej2NhYMjY2JllZWQoJCSFLS0uhdby8vGjq1KkEgJ4+fUru7u6CZX5+fvTFF18QAFJWViZFRcVa+8aiT09yDQsg466dOG8XSbP6ulY0pWuOSmtN2hrkT6N+WirxvmlKfim33t+MJtewAFLT1pJo3zRXE4e2sxk1nDY/uk0/X79IelbtOdcjLm0qDr752Hp/M5q2BvnTistnSMvEiHM91dnH96yBgYFC96yWlpb0zz//UEhICAUHB9OQIdXfU4qLXzoN+ZxcwwKofb9enGthvqk/U9fRJtewAOr/7XjOtdSwXbkXKq4Hg1mPbrQ12J+m79xMUlJSnOvhul3FyTcfmrSMDI39+UdyDQsgx/2/kaKKCueamG/+b+UPHAOmOHCuhfmm5saTkaYNATdp3C/LOdfSVNpUHNtOXkmJXMMCaOD0bznXKA7Wq1cv+vvvvwW/V6xYQStWrBBaJzw8nPT09ATtmpubS8D7G2F/f/968w3rQK+9NeWH+9qa3aK5tC30HrXSayvxvmlKfim30St/oA0BNyXeN83VxKXt9KwsaPXfF2jzo9s0cNokkleW3AFHTf06bty1E631+4s23L9JHQbZcq6nsdtUXPziuP83WnPjkkQO+GrqvqmL9RxjT65hAWL1EkSUdmXpDqog9uFjXHbdg46DbbHgjwPoajeETaoihpTx+Tj/6zZ4rd0Isx7WWHr6CLTbsTy14oCWiRFG/bQET/+5D/8TZ7iWw6gFhp06QKGFMqLv3edaCqMBKS4sRFF+AVS12Cf1QMUz5X6YzgAAQkNDMWbMGACAmpoaVFRU0KpVK5ibmyMnJwfnz59HUFAQtm7dCl4lOedEmdQt5798wWraLBUFo27IKsij9/jRCPe9i1fJL7mWw6gALVNjpMfFcy2DIeEkR0Zjp8MMxD58DHunRVjrexljf/6RPR+JIfHBT/DbhBlIj0vAjF2bMWyBY4UTOjEaDnUdbZj36YGHF/8CvXvHtRxGPWLepydy0zOR/jyBayk1gnXSVoP/iTO4sGE7WrRSx+StLlhz4xLsFn8HdR1trqUxPuLBhcvYO2M+ZOXlsfgEy1PLNTJycpi81QVv37zB6Z/Xg4i4lsSoBRZ9e6KMz0fMg0dcS2E0MLnpGVBjOWlFxsnJCba2tggKCkLLli2RnJyMsrIyyMjIoH///nBycoKNjQ1MTEwqza8pyqRuxYWFKMrLhxq772DUke72w6Gspoq77p5cS2FUgpapscQ9TDLEkzc5uTg8fxl+mzADodd8YTNqBH68cALzj+9Dly+/gLSMDNcSGf/xPqfwfDy4cBlDv5uJGb9vhUILZa5lNRtsvh4BAHh46S+OlTDqEykeD+16dsez+w+5llJjWCetCNw7fR5b7Cfg4JwlSAwNw6CZk7Hq7/OY+ftWtO/Xi73tEiNePInAbxNm4GV0DKZu/xUjls6TmFkzmxojvp+PthbtcHrNr8jPfsW1HEYtsejTEy+eROBtwRuupTAamNz0DDZx2H9UNFNuSkqK0DqpqakYO3YsrK2tBctyc3ORnJyMkJAQxMfHo6ysDJcuXYK1tXWd9OSkZ7CRtIw6ISUlhQFTJuBFeCTig59wLYdRAUqqKlDR1EBaLJs0jFF/JEc+xZlfNsDli6/gve13qLZujSnb1uPnG5fw5cI57AsaMYFfUgKvtRtx/tdtaN+3F5acOoI2xoZcy2rySPF46DF6JGICHuL1yzSu5TDqEd325lBWU8WzANZJ22QhIjwLeIhjS1Zgw5djccvtD+h3tILj/t+w4ooXBk7/FspqqlzLZADIz8rG/pkL8K/XRQyaNRWz97pCUUWFa1nNivb9e2PA5Am463EGT/0DuJbDqCXKaqrQs2qPp/8+4FoKoxHISc9kI2n/o6KZcr29vYXW0dDQELyk1dHRwdGjRwXbqqmpCdIXDBo0CJGRkXXSk5OWDjUtrTqVwWjeWPTrhTbGhrjrwVIPiSvaZiYAgDSW7oDRABTm5uGOuyc2jxyPQ999j6SwSAx2nIbVf1/AtN82oV0vG64lMgD8e+YC9s9eCEWVllhy6gg+G9iPa0lNGvPePaCuo/0/9u48Lqp6/QP4ZxY22QYBAdllUVlFAfeAXEhLS7jmem27Vvdm21VvmZWpqeXSr255u13KW94WNTVTk3CDckEDRUQQEMVZWIYZYADZGc7vDwRBUbaZOWdmnvfrNa+bzuGcB86Vc84zz/d5cG7/IbZDIRrmPz4SAJB/Lo3lSPqO1jn0g6pUjl8/+w+O/XsHgqdEYcL8eMxavgyPLFuKzKSTkOXkauW44stXIMka2IOesVC3tGDf+s2Q5eQibvUKvLbrK/z31TdReu0626EhNjYWn3zyCQQCAb788stut5k7dy7ee+89MAyDzMxMLFq0SMdR9p+lyBbz1q1GcX4Bfvn4X2yHQwbAf3wk+Hw+8s5QktYYVMnLYO1oD75QgNYWNdvhsEqtVmPZsmVISkqCQCDAjh07kJOTg7Vr1yI9PR2HDh1CdHQ0Nm3aBIZhIBQKsWHDBgBAa2srVqxYgRMnToDH4+HChQtISEgYUDyq0jK4B47UxLdGjFTUkgVQycuQefQE26GQ+3Dy8QYAyKmSlmgRwzDIO3MOeWfOwW6oM8bPnYOxcbMQMjUaDbW1aFVr/vpfW6HCxwuepVVZvVR4MRMfz3sGT328Cc9+ugVJ//oSx/69g1rHacHYuFm4VVGJ7ORTbIdCNMx/fASKcvNxq7yS7VD6jJK0A6BuacGlpBO4lHQCzr7DMP7JOQifNQPhs2do5XjyGzex+fEFWtm3oTq/7yBKC27gqY824rXvv4JKXqb5gzAMfv3sP7iU1PODD5/Px/bt2zFt2jTIZDKkpaVBIBB02cbX1xerVq3CxIkToVKp4OioX8uQ4t/5BwbZ2uA/L7yGlqYmtsMh/WRqYYEJ8+JQq6rS2gdPhFtU8jLw+XzY2Ntr53elnklMTERiYmKXv1uzZk3Hf+/btw/79u0D0FY929Tp993x48cRGhqqsVhUpXJYDbaD0MwMLY2NGtsv0U/BU6MxyMYaeWf/gKpU3uP2Lv4+8B8XgcP/t93oP4DhMmffYaivuUW/f4nOVBaX4sgnn+Po518hZHqMVj4MtB3iiNDpD8PF3xeFFzM1vn9DpZKXYftTf0X8OysR+7e/YMrSpwAtJGmvnU/Hl39brvH96gOrwXYIinkIp77fA3VzM9vhEA0ytTCHd1gITn33I9uh9AslaTWktOAGftq4DQc3fwLTQRYa3/+0F57BpAVzwRcItPIJpyETZ17Bx/OfxdTnn4aFtZXG9z9i8ngET4vpVZI2MjISBQUFKCxsW8q2a9cuvPTSS122Wbp0KbZv3w6VSgUAUCgUGo9ZW8JmTkfo9Ifxy8f/Qkl+AdvhkH6ycXTAc59thYu/D/as2USTTo1E1e3EgMjZiZIEHFNZ0paIEzk5QimRsRwNYZPI2Ql/3rweApO2W/iyQjHyzp5H3tk/cD3tIprq6+/5mocWz0djXT3O7f1Z1+GSPnD28Yb8BrU6ILrX0tSEi4eTcPFwksb3be/uhtDpD8PRw52StH3U0tSE3e9sQP7ZP+Di76vx/XuFBcN/XKTR5hfCZ82AwESIP6jVgcEJjJ4MoampXvajBShJq3HqlhbUV9dofL+l125AYCKEnYszymVFPX8B6aJaocT+DVu1su+//GsbHD3ce94QgKurK6RSacefZTIZTE1Nu2zj7+8PADh9+jQEAgHee+89JCXde9O0dOlSPP/88wDQ0fuQTbZOjohbvRyFGZeR/N/v2A6H9JOznw/+sn0rLGys8dWylcg7c47tkIiOqORtHwjZOg8B6DmKU9qrJUXOTpSkNXIP/XkewAP+/ZeX4ezng+ETIjE2bjYmL3oSLc3NuHkpC/mpfyD/7B+QXc2DpZ0tRj86Hef3H9LK/SnRHCcfb+SknGY7DEI0qrK4BOrmFjh49u5ZidwrI/EYMhKPaXy/EY/PhM+YMNgNdUG51PjuLcbGz0ZhxmXIb9xkOxSiQUO8PRH/zj9QdDUf19Mush1Ov1CSVk8oJG2JPQdPd0rScoziphTDxozS2P6EQiH8/PwQHR0NNzc3/P777wgODkZVVVWX7RISEjr6HKalsd8Qe9661RAITfDD6vVUeamn/MZF4KmPNqKprh7bn/orivOusR0S0aH2Slqa9Mw9qtI7Vc7EeFnYWGPcnx5HRuIxXDufjmvn03Hq290QmJjAOywEwydEwn/8WMx85UXMfOVF1KqqUCUvA18oxO/f0sAwLrO0E8HafjANDSMGp1WtRkVRMRw83NgOhdxFIW5LzDp6uRtdktY7LARDvD2x65332Q6FaJCFjQ2e/XQLWpqasOOVf0Dd0sJ2SP1CSVo9oRBLAACOnm7IO8NyMKQLpUQKs0GDYOPogGqF8oHbFhUVwd39zifJbm5uXfoYAm3VtefPn0dLSwtu3ryJ/Px8+Pn5IT09XSvxa8KEeXEYPmEs9q7bbHQXeUMR8cSjmPvum5DfKMSXLy1HlVx/2mwQzaivrkFjXT1ETkPYDoXc5U4rCjo3xmzCk3EwGzQIKV93Xa2ibm5GwR8XUPDHBfzy8eewGmwHv7Hh8J8QCf/xkbhw6FcoxdL77JVwgfPtoWGlNDSMGCCFRApHqqTlHOXtIjBHD3fkIpXlaHRrbPxsNNyqRWbSSbZDIRrCFwiwZOt62A11xufPLutVz36u4rMdAOmdW+WVaLhVC0dPD7ZDIXdRiO9UOfckLS0Nfn5+8PLygomJCebPn9/Re7bdgQMHEB0dDQCwt7eHv78/btzg7k27g4cbZi1/GbmnzyH1x5/YDqffYmNjkZubi2vXruGNN97odpu5c+ciOzsbV65cwXffcaelg8DEBPy7BtD1RexLSzF//dso+CMdnz31IiVojViVvAy2lKTlnJamJtSUV1AlrRETmppi8uIncfV0Kkryrz9w21sVlchIPIbd72zA+qmPY9fb63UUJekvZ99hAECVtMQgKcUy2LtTJS3X3KqoRH11jdG1ojC3skTo9CnISDzWbR93op9mr3wF/uMjsXfdh7h56TLb4QwIVdLqEYVECode9j4lunOnytkdN9IzHritWq3GsmXLkJSUBIFAgB07dmDOnDlYu3Yt0tPTcejQISQlJWH69OnIzs6GWq3GypUrUVFRoYtvpc/4AgEWbHgXLc1N2L1mI9vh9Bufz8f27dsxbdo0yGQypKWl4eDBg1228fX1xapVqzBx4kSoVCo4OnJjSTiPx8PKn76DuZUlso6nIOPX4yi8mNmrlhMCoRBPrnsL4bNm4Py+g9j7/maa/G3kquQKqqTlKJW8DCIXStIaq/DZM2BtPxjJO75lOxSiBU4+3qivrkF1GX1ISgxP26pDC9gMcaT/j3OMMVY5h82YDlMLc5zfd7DnjYleGBvf1ps/5ZvvkXbgF7bDGTBK0uoRpVgK96CRbIdB7qIqLUNLU1Ovh4clJiYiMTGx489z5szBmjVrumyzfPlyLF++XKNxakP004vgNSoY3/7jXb2+6YqMjERBQQEKC9sqWHbt2oXHH3+8yzZLly7F9u3bOyqfFQpufL9eo4Lh6OmOm5lZGDNrBibMi0NVmQKZR0/i0q/HIc680u3XWdhY4+n/2wTfyDE48sm/ceLLb3QcOeEilbwMvpGj2Q6DdKOqVE6VSEaKx+cj+qmFkFzJ0dshGOTBnH2HURUtMVgdqw493PT6ecEQKSUyeIYEsR2GTo2Nn4Wi3HxIs6+yHQrRgGFjRiF+9UpcPZ2Kwx9tZzscjehVu4OelgF7eHjg+PHjyMzMRHJyMlxdXTveW7JkCfLz85Gfn48lS5ZoLnIjpJTIMHioCwRCyq1zCdPaCqVEZnRLRYYO90PsS3/BpV+Pa2XiqC65urpCKr3Tr08mk3X5PQYA/v7+8Pf3x+nTp5GamorY2Fhdh9mtkGkPo7mxEf954TW8Fz0T/1vxNsSXszF+7hN45dsErE7aj8defwluAcM7vsZuqDOW7fyiLcH+xhpK0JIOVfIy2Dg6gMenbkhcoyoto3YHRiooZjIcvTyQ8vX3bIdCtMTZxxul17nb2kpf0TMsN9zpfUofNHKN4qYEdkOdITAxYTsUnXAd4Q/3wJE4v/8Q26EQDbAb6oynPtqIclkRvv3HuwYzvLzHp7D2ZcAzZsxAQEAAFixYgJEju1Zzbt26FTt37kRoaCjWrVuHTZs2AQDs7OywZs0ajB07FpGRkVizZg1EIpF2vhMjoBBLwRcIMNhtaMff9fbmIyAggG4+tEhpZEtFBCYmWLhpDepUVdj3/ha2w9EJoVAIPz8/REdHY8GCBUhISICtrW232y5duhRpaWlIS0uDg4OD1mLi8XgImRaNvLPn0Vhbh6b6BlxKOoFvXl+FNVEz8f2qtSgtuIGH/jwfr+/+Gm8e3oPH/r4Mr37/FWwc7PHFC68h48hRrcVH9I9KXgaBUAhr+8Fsh0LuoiqVw8LaCmaWg9gOhehYzDOLoZTKkHU8he1QiBZYDbaDpZ0I8gKqpNUkeobljsoSOVqamroUtNAzLDcoJVLw+Xw4uLv2vLEBiIybhebGRlz8JYntUMgAmQ0ahGc/3QK+UICvlq1AQ80ttkPSmB6TtJ2XATc3N3e7DDggIAAnT7ZNxktOTu54PzY2FseOHUNlZSVUKhWOHTuGRx55RAvfhnFo/xSyvS9tX24+cnJy6OZDixQ3pbB3dzWa6rNHli2Fi58Pdq/ZiLqqarbDGbCioiK4u9+5cXRzc0NRUVGXbWQyGQ4ePIiWlhbcvHkT+fn58PPz63Z/CQkJiIiIQEREBJRKpdbidg8aCZGzEy4fS7nnvcbaOlw4/Cu+emkF1kQ/it3vbkRlcQmilsxHU30DPv3z8z32UCbGR1VaBgA0PIyD2s8NVdMaF+/RofAMDcJv3/yAVjX1DDdETj7eAAD5DUrSahI9w3IH09qKclkxPcNykEIsA9C7Adj6TmhmhjGPxuLysWTUV9ewHQ4ZAB6Ph4Wb3oXTMC/8b8XbUEpkbIekUT1mlHqzDDgzMxNxcXEA2vpr2tjYYPDgwb36WkB3VWf6TnHzzoAqgG4+uEQhkcLEzAwiZ8NPbHiHhSD66UVI/fEAck+lsh2ORqSlpcHPzw9eXl4wMTHB/Pnz7xkcduDAAURHRwMA7O3t4e/vjxs32F2aGDI1Bi3Nzcj57fQDt6uvrsYfPx3CF8+/incfmoEPZj2JskKxjqIk+qRKfjsR6MSNwXjkjsoSOQBK0hqbmGcW41ZFJdJ+1v9BGKR7zr7DAAClVEmrUbp4hgXoOba3lBIZPcNyUEcrCk8PliPRvpBp0bCwsaaBYQYgdtlSBD0chYNb/on81DS2w9E4jZT9rVixAlFRUbh48SKioqIgk8mg7sOn/bqqOtN3dVXVqKuqhsPtfj6UQOcOpbj9AmfYn0KaDRqEBRvfRUVRMQ5u+Sfb4WiMWq3GsmXLkJSUhKtXr2LPnj3IycnB0KFDMWvWLABAUlISysvLkZ2djeTkZKxcuRIVFRWsxh0yPQbXzqf36dPg+uoatLZQNRbpXnuSlippuUdV2p6kpXNjLJx8vBEYPQmnf9iL5oZGtsMZkJ6WNgPA3LlzkZ2djStXruC7777TcYTscfbxRl11NaoV9AykawN9hgXoOba3lBIpHNzdwOPxKIHOIfXVNbhVUQkHT8PvFzw2bjYUYimu00pCvTbqkamY9vwzOLf3Z5z+/ke2w9GKHidQ9WYZcElJCeLj4wEAlpaWiI+PR1VVFYqKijoqz9q/NiUlRTORGymFWApHr95/0rVixQp89tlnCAgI6HcCPSEhAUBbtSHp3p2ppe4G+WlOu1krXobdUBf86+m/oqm+nu1wNCoxMRGJiYld/q64uBiHDt1pLL98+XIsX75c16F1y3WEP+zdXHH8PzT0i2hOraoKzY2NEFGSlnOqFUq0qtVUSWtEop9eiMa6epz5YS/boQxI+9LmadOmQSaTIS0tDQKBoMs2vr6+WLVqFSZOnAiVSgVHR+Op5nfy9aZ+tFpAz7DcohBLYWJuBtshvfu3PdBnWICeY3tLKZHB0cOwC40cPN3hGzEav3z8L7ZDIQPgFjAC89e/jesXMrB/w1a2w9GaHitpe7MM2N7eHjweDwCwatUq7NixA0Bb5dn06dMhEokgEokwffp0JCVRk+aBUEqkHZW0fbn5yMnJwerVqwGgj2Ni7QAAIABJREFU4+ajp68lvVetUKKxrs6gl4qMmDwe4+c+gd++/h6FGZfZDsfohUyLgbqlBdnJv7MdCjEwVXIFbKlak3Na1WpUK8upktZI2Do5YvSjsfjjp0N63/u9u6XNd/eQXLp0KbZv3w6VSgUAUCgUbITKCmefYSi9TklaTaNnWG5p7xnp4OlOz7AcoxBLDPoZFgDGznkM6pYWpP18hO1QtMIYVqtYO9jjmX9+iJryCnzz+ltQt7SwHZLW9Jikvd8y4LVr13YsA46OjkZeXh7y8vLg5OSEDRs2AAAqKyuxfv36jmUG69atQ2VlpXa/IwOnFEshcnaC0NSUbj44RimWGfRSkZmvvIiyQjF+3Z7AdigEbUna6+kZqFVVsR0KGYDeTjfOzMy8Z7pxS0sLMjIykJGRgZ9//lljMankZbClnrScpCqVUyXtAxjSQ8rkRfPA4/Hw284f2A5lwLpbnmxqatplG39/f/j7++P06dNITU1FbGxst/sytOXL1vaDYSmyRWkBuz3uDRE9w3KLsmPVoRs9w3KMQiyFrZMjTC3MH7idvl5j+UIBwh9/FFd/P4MaZTnb4Whcd4P4zM27nsvOq1WCgoLw2muvsRRt/03/63OwtLXFjldWorZSxXY4Wsdw6ZWWlsZ6DFx+hc2czmzLSmWcfLwZAMyMGTOYvLw8pqCggHnrrbcYAMzatWuZWbNmMQCY+Ph4Jj8/n6mvr2cSEhIYU1PTjn0988wzzLVr15hr164xTz/9NJ2bAb7+vPV95s3De/r8dZr4uWr73HiFBjPbslKZcX96nPWfsy5fXD03zr7DmG1Zqcz4uXNY/xnp63nhwovP5zMFBQWMt7c3Y2Jiwly6dIkZOXJkl2327NnDLFmyhAHAxMTEMDt37ux4r6amRis/u4Wb1jBvJe5l/eejTy9d/a7489b3mTcP7Wb9++Xiq7t/T1lZWV228fX1ZS5evMiIRCIGAOPo6Kiz89uXl7m1FbMh9Tiz6MO1rP9cNfGKj49nEhISOv68ePFiRi6Xd9nm0KFDzP79+xmhUMh4eXkxEomEsbW15dR50cbLb2w4sy0rlfEbG856LIb0c6WfHfdePB6P+SA9hXns78sYQLfPsHRuHvwKmf4wsy0rlXHx973vNtq6xurivIx8aCKzLSuVCYiaxPrPWhuvcePGMb/++mvHn998801GKpV22ebDDz9knnvuuT7tl0v/ZsytLJmN508wT659i/VYBvrqzc9VI4PDiO7cPaAqMTERw4cPh6+vLzZu3AgAWLNmTUcfzX379sHf3x9XrlzB0qVL0dTU1LGv//73v/Dz84Ofnx++/vpr3X4jBkghlmCwqwv4QkHPG+uZCfPjUF9zCxd/Ocp2KARtVbStra24cvI3tkMhAzCQ6cbaVCUvg63TkI4KFsIdVEl7f4a0pH783CdgbmWJlP9yowppoLpbntz5fhRoq649ePAgWlpacPPmTeTn58PPz0/Xoeqck483AFAlLTF4DMOgXFoEx9urDukZljs68gsPmHujz9dY/3ERaG5oRN7Z82yHohXGsFplzKwZMBs0CGd372c7FJ2gJK2eUUjuDKgi3KIUyyAQCjF4qAvboWiUpZ0IodMfRvrBIwY3LExfhUyLQeHFTNSUV7AdChmAgUw3BgBzc3OkpaUhNTX1gcnbvt5wqeQKCE1MYDlY1OO2RLdUpWUwMTeDpciW7VA4R5MPKQB7DyoCExM8tHge8s6eR1Fuvs6Oq03dLW1uf4hvd+DAgY5BTfb29vD398eNG4afuHT2HYZaVRVdz4lRaJutQs+wXNPeL/hBw8P0ORHoEx6Gm5lZUDc3a/1YXCUUCuHn54fo6GgsWLAACQkJsLW9914yISEBERERiIiIgFKpZCHS7k2YFwdJVg5kOblsh6ITlKTVMw01t1BTXmHQvU/11Z0qZ8NqvB455zEITU2RuucntkMhaPuU28XPB5ePJbMdCtGBFStWICoqChcvXrxnurGnpyciIiKwcOFCfPzxxxg2bFi3++jrDVeVvAwAIHKiAVVcoyqVAwBV0/ZTbx9SAPYeVMY89ghsHB2Q8rVhVNEC3fcGbWho6NIbNCkpCeXl5cjOzkZycjJWrlyJigrDT1w6+3ij9LrhJ6MJAQCFWAZ7d1daqcMxTfX1qJIrBpxf4GIi0MLGGi7DfXEjPUOrx2GToa9WGRYeBmcfb5zdvY/tUHSGkrR6SCmRGVwi0BAoxBIAbVNLDQWPz8f4uXNQ8McFyG/cZDscAiBkagwAIOtECruBkAHry3Tj0aNHd5luDADFxcUAgMLCQqSkpCAsLEwjcalK25K0tkaepO3LULfhw4frZqhbSXuS1rjPTXcM4SGFx+Mh5plFKLqaj/zUNLbD0aieljYDwPLlyxEYGIiQkBDs3r2brVB1ysnXG/KCQrbDIEQnlBIpTMzM6INGDlJIpA/ML+jrNdY7LBR8Ph/XDThJa+irVSbOi0NdVTUyfj3Bdig6Q0laPaSUSB+4HIGwo1ZVhbrq6o5+wYZg+MSxsHcbijNG0v9FH4RMi8HNzCxUybnR54n030CmG4tEoo5lZvb29pg4cSJycnI0EhdV0nY/KXfkyJFdttm6dSt27tyJ0NBQFBcXY9OmTR3v1dfXIywsDGFhYRrtI0yVtPdnCA8pAdGTMMTbE8n//ZbtUIgOWDvYY5CNDUqvU5KWGIf2ZfWGVNBiKJRiKRw87l9Jq6/X2GFjRqGlqQniLM3cI3ORIa9WsXawR/CUaPxx4DBaGhvZDkdnKEmrhxRiKWydHGFqYc52KOQuiptSg0rSTpwXj2qFkgZUccRgt6FwCxiOy0ep1YEh6O6mKicnp8tNVXR0NPLy8pCXlwcnJyds2LABADBy5Eikp6fj0qVLSE5OxgcffICrV69qJK5bFZVQN7cYdSVtX4e61dTU6GSo262KSrQ0N1MlbTcM4SEl5pnFqCgqQebRk2yHQnTA2betRQ0NDSPGor013IOSgYQdCrEU1vaDYW5t1e37+nqN9QkPgzgr2+ATfIa6WmVs3CwITIRG13ZRyHYApO/aP4W0d3dDSX4By9GQzpQSKbzDQtkOQyMGu7pgxOTxOP6fr9HaomY7HII7rQ4uH6ckraFITExEYmJil79bs2ZNx3/v27cP+/bd24MpNTUVISEhWomJYRhUlSlg6+Solf3rg+4GZIwdO7bLNu1D3f75z39CJBJ1DHWrqKjoGOrW0tKCDz744L4tD5YuXYrnn38eAHo1PINhGFTJy6iS9j7u/vc0Z86cLv+egLaHlOXLl+s6tB55jQqBd1gIftq0Da1quuYaA2cfbwCAnCppiZGoKlOguaHRoApaDIXy9nByRw93SLO7/9Bf366xZoMGwXWkP05+9T+2QyH9wBcIMH7uE8g7e74j/2UsqJJWD90ZUEUXOK5RiqUQuThBeNe0S3007k9PgGltxbm9B9gOhdwWMi0G0uyrqCwuZTsUYuCq5GVG3e6gNzoPdbO2ttbJUDegrWewLVXSGpyYZxaiVlWFP346zHYoREecfL1xq6IStyoq2Q6FEJ1gGAZKqQwO7lRJyzWK9ipnA8oveIWFQCAUGnQ/WkMWEDURImcnnDXCtotUSauHOvr5UF9azlGIpeDz+bB3d71vZURsbCw++eQTCAQCfPnll/fdV1xcHPbt24fw8HBcuHBBWyF3S2BigrFxs5Cdcpp6n3KEyNkJniGB+OXjf7EdCjECqlI53AJH9ryhgerLUDcAuHDhAoYMGfLAoW6a6sumKpXDa5R2qqgJO8ytrRAQPRnJO75FU30D2+GQfnLwcMMr332JVrUaqlI5VKVlqCwpRVVpGSpL5bf/To5qRTmY1lY4+wyjoazE6CjEUjgN82I7DHKXcmkRWltbDaoIzCc8DOrmFogzs9gOhfTDhCfnQFUqR85vZ9gORecoSauHGuvqUFWmMKhfooZC0VHl7NFtkrZ9GM20adMgk8mQlpYGgUBwz3ZWVlZ49dVXce7cOa3H3J3Q6TGwGmyH1D3G98kVVwVPjQYAXD5GrQ6I9qnkCgQ9HMV2GKzpPCCjqKgI8+fPx8KFC7tsY29vj4qKCjAMAxcXFyQkJABoG+pWV1eHpqamjqFumzdv1lhsqtK2Kmcenw+mtVVj+yXs8QgKAJ/Px7VzaWyHQgZgzqrl4AsEuHw8GSJnJzh4uMFvbDjMrSy7bKduaUFVmQI2jg44v+/gffZGiGFSSqQIeGgCXcM4pqWpCaoSuUHlF3zCwyDNuUoffuohBw83DJ84Domf/ccoW0BRklZPKSUyg/olaig6+vl4dr+Mp/MwGgDYtWsXXnrppXu2W79+PT788EOsXLlSe8E+wIR58VDclODauXRWjk/uFTI1GsV514yuJw9hR5W8DCbmZhhka4O6qmq2w9G5zgMyBAIBduzY0THULT09HYcOHUJ0dDQ2bdoEhmEgFAq7DHX74osv0NraCj6fr9GhbkBbJa3ARAhr+8GoVvSuRQLhNs/QILS2tkJyxXCnTxu64KnRGDFpHA588H849d2eLu+ZW1lC5OwEkYtT2/86D4GdszOsHQYj48hRliImhB1KsRRCU1PYuTihoqiE7XBIJwqxxGBW6ppamMM9cCR+2/k926GQfhj/5Byom1uM9oNMStLqKaVYioDoSWyHQe7ScKsWNeUV973AdTeMxvSu/rVhYWFwd3fHkSNHHpik7evAmd5y8feFd1gIft78CRiG0dh+Sf9ZO9jDKywERz//iu1QiJFQycsAALZOQ4wySQv0bahbWloampqaAGh3qBvQVkkLACLnIZSkNRCeIYGQXy9EY20d26GQfjC1sMATb7yGotx8nNl176DHhlu1KC24gdICzbQ8IUSfKTq17aMkLbcoJTKMnjmd7TA0wjM0GAIT6kerj4RmZoh84jFknUhBjbKc7XBYQYPD9JRCIoW1/WCYWQ5iOxRyF8VNCRy9PPr1tTweDx999FGvpmL2Z+BMb0yYF4fmhkak/XxEY/vUF7GxscjNzcW1a9fwxhtv3He7uLg4MAyDMWPG6CSu4ClR4PP5uHz0pE6OR0jV7SQtDQ/jHlWpHEBbn2piGDyCAyG5nM12GKSfpr34DETOTtj//lajXJZJSF/QAGzuUoilsLCxhqWdiO1QBmzYmFFoVatRmHGZ7VBIH4U9MgWDbG2McmBYO0rS6im6wHGXUiKDg0f37Q66G0bTXn0FANbW1ggKCkJKSgoKCwsxbtw4HDx4UGfJQDPLQRjzWCwyEo+hvtq4qufa+wXPmDEDAQEBWLBgAczNze/Zjo1+wSHTYlB6vZAGjBCdUd0eGGjrTElarqksoSStIXHwcIOlyBbiy1fYDoX0g9MwL0T9eQH++OkwbtJwGkJ6VK1QorGu3mCW1RsShVgCAHA0gHPjEx4G2dU8WqGihybMi0fp9UKjroKmJK2e6rxUhHCLQiyF7RBHmA26t8q58zAaExMTzJ8/HyqVquP96upqODo6wtvbG97e3jh37hxmz56NCxcu6CT28FkzYDZoULfL9Qxd537Bzc3N2LVrF0Siez9Jbu8X3NCgmyb0lnYi+ISHIet4ik6ORwgA1CjLoW5poUpaDqqvrkZjXT1ElEA3CJ4hQQAAcRb1o9VHcatXoLGuDof/bzvboRCiN8qlMjjcZ34HYU9HEZiXfucXhKam8AgOwI30S2yHQvrILWAEPIIDjLqKFqAkrd4ql95O0lIlLee0fwrZXTVt52E0V69exZ49e9DQ0IC1a9di1qxZug71HhPmxUFyJQeynFy2Q9G5vvYL1pWghx8CXyBAJrU6IDrEtLaiRlkOWydHtkMh3aiSl1ElrYHwDA1CQ20t5NcL2Q6F9FHYzOnwjRyDI5/8G7WVqp6/gBACoK2gxRCqNQ1NRXEJ1C0tel8E5hESCBMzM6OuxNRXE+bFobGuHhcOJfa8sQGjwWF6qrmhEZUlpXSB4yClpC3R5+DpjqLc/Hvev3sYzZw5c7oMo+ksJiZGO0F2Y1h4GJx9h2HXO+/r7Jj6pL1f8NNPP93jtpoc6hY6LQZKiQwl+QUD2g8hfaWiRCBnqUrlVOVsIDyCAyDNugqmtZXtUEgfmFtZYvaKlyG5koNz+35mOxxC9IpSIkNQTFsRAvVx5o7WFjUqZMV6XwTmEx6G1tZWFGZksh0K6QMLG2uEzZiGC4d/RcOtWrbDYRVV0uoxpVhGPWk5SHm7FYW+nZuJ8+JQV1WNS78eZzsUVmiyX7CmhrpZ2NjANzIcl49RFS3RvSq5ghKBHKUqpQS6ITAxN8NQfz/qR6uHpv/tL7CyH4x967dQgp2QPlKKpRCYCGHn4sx2KOQuColU755h7+YzJgwl+QWor65hOxTSB+GzZ8LUwtzoWx0AlKTVawqJVO8/6TJEzQ2NUJXK9WqpiLX9YARPicYfBw6juaGR7XBYwcV+wUExkyAwESLzaLLWjkHI/ajkZdTugKNUpXJYO9qDLxSwHQoZALeRwyEwEUKSlc12KKQPXPx9MGnBn3DuxwNG2R6KkIFSdFp1SLhFKZbp1TPs3QRCITxDg6jVgZ7h8XiYOC8ONy9loTjvGtvhsI6StHpMKZbCUmQLCxsbtkMhd1GIpXrVdH1s/GwITIRI3fMT26Gwhov9goOnxqCiqIQeAgkrqkrLYDZoEMytrdgOhdxFVSoHn8+H7RBKouuzO0PDKEmrL3g8HuJXr0R9dQ2O/PMLtsMhRC91DKii4WGcoxBLYDbIAjZ6en/hHhQAUwtz3KAkrV7xHRsORy8PnNltfMPLu0M9afVYe+9TR083SGgqMKcoxFKETtNdP9mB4AsEGD/3CeSdPd/RqsFYcalfsLmVJYZPiMTpH/Zq9TiE3E+VvAwAIHIagtKaWyxHQzpTld4+N85OqCwuZTka0l8eIYEolxXhVnkl26GQXgqfPQPeo0Ox6533UV9dzXY4hOilmvIKNNTW6nXFpqHqyC94uKG6TMFyNH03bMwoAMCNC5dYjoT0xYQn5+BWRSUu0+pRAFRJq9cUYloqwlVKsRSWdiK9qHIe+dAEiJydqP8LxwRETYTQ1BRZx1LYDoUYKZW87ebclvrSco6qVA4A1JdWz3mGBEJ8mapo9YWFjTUeff0lFGZcRvrPR9gOhxC9phTL6BmWgxQ39Tu/4BMehpJr11GrqmI7FNJLtk6OCIyZjD8OHEZLp3kwxoyStHqsXFaMVrUajvQpJOco9GgZz8R5cVCVypHz2xm2QyGdBE+NQZVcQQNlCGvuVNLq55I3Q3ankpYS6PrK1skRImcnSChJqzdmvPwCLEW22L9hKxiGYTscQvSaUiKlZ1gOUpXK0dzYCEdPD7ZD6TO+QACvsGCqotUz4+IfB4/PR+qPB9gOhTMoSavH1M3NqCwp1dtPugyZUk8a4jt4uGH4xHFI3fszWtVqtsMht5lamGPkpPHIOpFCD4KENVUKBVpbW6mSloMa6+pQV11NlbR6zCM4EACM5oO42NhY5Obm4tq1a3jjjTfuu11cXBwYhsGYMWN0GF3P3AJGYPyTc3D6h7001IQQDVBKZLAb6kwDMDmGYRiUS4v0otDobq4jh8Pc0pKGhukRvlCAsfGzkXs6FRWyYrbD4QxK0uo5pVgKBw/9+yVq6MqlRW1Vzhz/FHL8k3Ogbm7B+X0H2Q6FdOI/PhIm5mbIOvEb26EQI9baokaNshwiStJykqq0jCpp9ZhncCBamppQlGv4CT8+n4/t27djxowZCAgIwIIFC2Bubn7PdlZWVnj11Vdx7tw5FqK8Px6fj/i3V+JWeQWStiewHQ4hBkEpkUIgFGKw61C2QyF3UYiletkv2Cc8DABoaJgeCYp5CLZDHHF2t/EOL+8OJWn1nEIi43wi0BipW1pQUVwCRw4n0Hl8PkY/GovslFOoUZazHQ7pJDBmMuqqq3HjIi3XIeyqkiuokpajVKVyiJyoklZfeYQGQnY1D+rmZrZD0brIyEgUFBSgsLAQzc3N2LVrF0Qi0T3brV+/Hh9++CEaGhpYiPL+xsbPhkdwAA5t+xQNt2rZDocQg6AQtw0rpmIj7mkvAuPx9StV5BMehrJCMWrKK9gORef0dbXKpIVzUVFUgtzTqWyHwin69S+P3EMplsLC2gpWg+3YDoXcRSmWwcGLuwl0z5Ag2DjYI/PoSbZDIZ3w+HwEPDQRuadS0dpCLSiMQU83Vh4eHjh+/DgyMzORnJwMV1fXLu9bW1tDKpXi008/1XhsKnkZbKknLSdRJa3+4gsFcA8YCcnlHLZD0QlXV1dIpdKOP8tkMpiamnbZJiwsDO7u7jhy5MEDuZYuXYq0tDSkpaXBwcFBK/F2NsjWBo+++lcU/HEBF385qvXjEc3q6frq7u6OkydP4uLFi8jMzMSMGTMAAJ6enqirq0NGRgYyMjLw+eef6zp0g9feGo760nKPQiKF0NRUr+4xeHw+vEeH4voF46ui1dfVKkOH+8EnPAxnftgLprWV7XA4pVdJWrrAcddw56F42i8UWRmXHnhuAgIC6NzomEIs4fSNR/DUKLQ0NeHqqbNsh0I68QwJgtVgO2Qnn2I7FKID3d1YjRw5sss2W7duxc6dOxEaGop169Zh06ZNXd5fv349fv/9d63EVyUvo3YHHKUqlcNqsB2EZmZsh0L6yMXPB6YW5kbTj7YnPB4PH330EZYvX97jtgkJCYiIiEBERASUSqXWYxv96HQMsrXBz5s/0fqxiGb15vr69ttvY8+ePRg9ejTmz5+Pf/3rXx3vXb9+HWFhYQgLC8Nf//pXXYdv8CZGROIpn2Ds/mQ7PcNyzJ0B2F2fY7lcrTl0uC8srK2MstWBvq5WmbzoSTTW1eP8T4fYDoVzekzS0gWOu/h8Pt56+TX8dDMXC//+8gPPTU5ODp0bHVNKpDC3soSVPTernIOnRCM/NQ2NtXVsh0I6CYqZjJbmZuSe4cannES7uruxevzxx7tsExAQgJMn2yrek5OTu7w/evRoODk54ehR7VR4VcnLYGFjDbNBg7Syf9J/qtIyAICIKp07cPkBsjNjGxpWVFQEd/c7D/tubm5oamrq+LO1tTWCgoKQkpKCwsJCjBs3DgcPHuTEcsxRsVNRnF9Aw8L0UG+urwzDwMbGBgBga2uL4mIaXKML7fmFz08cwfr939MzLMcoO5K0d1aEcr1a0yd8NAAY5dAwfVytYmknQtjMaUg/eAT11TVaO46+6jFJSxc47oqMjMS1vDxU1NdCNNSFzg3HKG7ee4HjCtcR/rB3G4qs4ylsh0LuEhgzGdfTLlLfOyPR3Y3V3e0MMjMzERcXBwCYM2cObGxsMHjwYPB4PGzbtg0rVqx44DEGcsOlkisAgFoecJCqVA4AsHNxZjkSbuD6A2RnniFBqFaWo7K4lLUYdCktLQ1+fn7w8vKCiYkJ5s+fD5VK1fF+dXU1HB0d4e3tDW9vb5w7dw6zZ8/GhQsXWIy67fee9+hQXPr1OKtxkP7pzfX1vffew+LFiyGVSnHkyBG8/PLLHe95e3vj4sWLSElJwaRJk3QWtzFozy/k5VyFnbsrPcNyTLVCica6ui7Dw7herTlszCgopTJU3b5vJXdwcbXK+LlPwMTMDKe//1Frx9BnPSZpdXGB03V/KUPh6uoKiUSCiqISOHi6P/DchISE0M2Hjik43GspeGo0WtVqZKfQknoucfTywBBvT2p1QLpYsWIFoqKicPHiRURFRUEmk0GtVuNvf/sbjhw5gqKiogd+/UBuuKrkbdWaxjg8rC+9gocPH67TXsFAp0paPeoZp01cf4DszDMkEJKsbNaOr2tqtRrLli1DUlISrl69ij179qChoQFr167FrFmz2A7vvkKnTwEAZCadYDkSoi0LFizA119/DXd3d8ycORP/+9//wOPxUFJSAg8PD4wePRp///vf8f3338Pa2rrbfdBzbN+15xcUEhnsXJxRXFJCz7AcoxTL4OB5Z6gbl6s1eTweho0ZhRvpxjlwWd9WqwiEQkyYF4fc0+dQVihmJQau08jgsIFe4HTdX8rQPKj3afu5uXz5cr/ODd149J+qRI6W5mY4enEwSTslCjcuXEKtqortUEgngdGTAQDZKadZjoToSnc3VncnXUtKShAfH4/Ro0dj9erVAICqqiqMHz8ey5YtQ2FhIbZu3YolS5bc0692oFRy41xS39dewcXFxTrtFQx0SqA7O2ntGPpEkw+QgPbufyxsbDDE2xPiTONJ0gJAYmIihg8fDl9fX2zcuBEAsGbNGhw6dG8vupiYGNaraAFgVOwUyHLyoJTI2A6F9ENvrq/PPfcc9uzZAwA4d+4czM3N4eDggKamJlRUtE2Iv3jxIq5fvw5/f/9uj0PPsf2nFEvBFwi6HYA90GdYgJ5jB0IhkfZpNSib1ZpOvsNgKbI1ylYHgP6tVgmZ/jBshzji1He7WTm+PugxSaurCxzpu/Zz0/5JlzbODd149F+rWo1yaVGXpSJcMMTbE86+w5B1IoXtUMhdgmImQ5aT17GMmRi+7m6sDh482GUbe3t78Hg8AMCqVauwY8cOAMDixYvh6ekJb29vrFixAjt37sSqVas0Gl91WdvvfWNLBPa1V3BNTY1OewUDQEtTE2rKK6iStpf68gAJaO/+xyM4AIDx9KPVV3ZDneEZGoTMo1RFq696c32VSCSYMqWtYnrEiBEwNzeHQqGAg4MD+Py2x2Rvb2/4+fnhxo0bOv8eDFX7M2z7qkPfESMogc4xCrEEg11dwBcKAHC7WtMnPAwAcD39otaPxUX6tlpl8qInUVYoRt6Z82yHwlk9JmnpAsdd7efGpL4RFpaWWLh4EZ0bjlGKpXDw5FaSNujhKADAlRPaq/AifWdpJ4LnqGBqQWFkuruxysnJ6XJjFR0djby8POTl5cHJyQkbNmzQWXwdiUAja3fQ117BIpGoz72CNUFVKofIyBLo98PlB8hwusKEAAAgAElEQVTOPEMC0apWQ5adq9Pjkr5pb3VwiVod6K3eXF+XL1+OpUuX4tKlS/jhhx/w9NNPAwAeeughXL58GRkZGdi7dy9efPFFVFZWsvjdGJb2Z1grCMDn8TDrkUfoGZZjlGIZBEIhBrsOBcDtak2f8DBUlpQaTZ/37ujLahWPkEB4hgTi9Pc/gmEYVmLQB8KeNuh8gRMIBNixY0fHBS49PR2HDh3C8uXLkZCQgNdffx0Mw3S5wK1btw7Nzc1obW2lC5yGtZ+b7f/+N+ych+CrL7+677kJCAi45+aDzo32KcRS+I+PBI/H6/hFFBsbi08++QQCgQBffvnlPV/z+uuv4y9/+QtaWlqgUCjw7LPPQiKRaCym4ClREF/O7ljGTLghIGoi+Hw+9aM1QomJiUhMTOzyd2vWrOn473379mHfvn0P3Mc333yDb775RivxVckVNDisGytWrMBnn32Gp59+GtbW1n3uFQy0LcV8/vnnAaBfSzFVpWVw8HDreUMj0PkBsqio6L4PkO2Sk5OxYsUKnT+oeIYEofR6IRrr6nR6XNI3obEPQ5KVgwoZDSvSZz1dX69evdptT9P9+/dj//79Wo/PWLU/w/70449w9HBD4qnf6BmWY5TiO7NVlGJptzmhOXPmdDlnbBk2ZhTyzlJVpj54aNGTqK+uQdrPPbedMnYMl15paWmsx6Bvr8GuLsy2rFRmbNwsrf5c6dz0/TVu7hPMtqxURuQ0hAHA8Pl8pqCggPH29mZMTEyYS5cuMVlZWV2+Jjo6mrGwsGAAMC+++CKza9cujZ0bkbMTsy0rlYl5djHrPxt9eOny383TH3/AvH30J9a/Z3140e8i3f7snv3nZmb53p2sx67L17hx45hff/21489vvvkm8+abb953+wsXLjBSqZQBwHz77beMWCxmCgsLGYVCwVRVVTGbNm3Syrl54s3XmffPHmP958WV14wZM5i8vDymoKCAeeutt5i0tDRm7dq1zKxZ994fJScnM2PGjOnVfjX1O4fH4zHrTycxf1rzBus/K7ZfXL4vtXdzZbZlpTLRTy1k/eekr+fGWF/0s+v769Xvv2Je+M8nWv+Z0rnp28tSZMtsy0plJi+ep9Wf6UD3McTbs8c8iDG+uHBu7n7ZDHFkNl88xcxa8TLrPx+unxuNDA4j7KoskaOlqYlzy+oJoLjZVgHr6NXWeL0306dTUlJQX18PoK0Hk5ub5qqkgh5+CACQdeI3je3TUPQ0yf31119HdnY2MjMzcfz4cXh49L6Zfk+EZmbwHx9JA8MIJ6nkZbA1snYHfe0V7OLiotNewe1UpWWwsLaCmeUgrexf33B9uZ+DpzsG2dpAYmRDw/RNaCy1OiBEV5QSKefmdxCgVlWFuupqOHI8v+ATPhoAjHZomD6ZOC8OPD4PZ37Yy3YonEdJWgPAtLaiXFZMFzgOUt5uiN9+bnozfbqz55577p5lWgMRPDUaJdeudyxhIW16M8k9IyMD4eHhCA0Nxd69e7F582aNHd9vbDjMBllQqwPCSVVyBSxFtjAxN2M7FJ3pa69goVCo017B7dqHDFJfWv3gGRIEgIaGcd2o2Cm4eSmLhngSogMKsRQiFycIH/A8RNihFMs4n6QdFj4KVWUKKCUytkMhDyA0M8P4uU8gO+U0KopK2A6H83rsSUv0g0Is4fwvUWNUXaZEU30DHDz7Xg27aNEihIeHIyoqqtv3+9rL0GqwHYaNDsXx/3zd51gMXecKZwDdTnJPSUnp+O9z585h8eLFGjt+UMxkNNyqxfU045xKSritvX+17RBHo7oJ7kuv4LS0tC5Dqtpps1cw0FZJC7QlaeXXC7V2HKIZniGBqK+5hbJCMduhkPtw8HSH60h/HPjwY7ZDIcQoKCVS8Pl82LsNhfzGTbbDIZ0oxBJ4h4WyHcYD+YwJww2qouW80TOnw9JOhFPf7WE7FL1AlbQGQimWwcHdrWPpJeEGhmGglEjh6Nm2NL6n6dPtpkyZgtWrV2P27Nndvg8ACQkJiIiIQEREBJRKZY+xBEZPAl8gwOXjKf37ZgxYbya5d9ZThfPSpUuRlpaGtLS0HhPoPB4PAdGTkHs6FeqWlr4HT4iWtVeTGVvLA33Qfm7sXKiSVh94BAdCeiWHJhpz2KjbrQ4yj55kORJCjINC3PbhL7Xt4x4lx6uc7d3dYOvkiOvpl9gOhfRg8uInUZx3jQqSeokqaQ2EQiKFibkZbJ2G0PIsjlGIpXDx8wHQ8/RpABg1ahS++OILPPLII1AoFBqLI3hqNMplRSjJL9DYPo1RTxXOQFsCPSEhAUDbOX8Q9+AA2DjY4wq1OiAcVXW7klZESVrOqVYo0apWwyMoAMV51zS+f4VYivrqGo3v1xiZWpjDxd8HJ7/6H9uhkAcY9chU3LhwCdVlmrv/IoTcX3trOEdq28c5ComsrcrZ3ZWTq3V8wsMAANfTKfHHZT4RozHU3xe7393Idih6g5K0BqK9x6ijpzslaTlGIZYiKOYh8AWCLn0OBQIBduzYgTlz5mDt2rVIT0/HoUOHsGXLFlhZWeHHH38EAEgkknuW3veVuZUl/MZF4PR3P2riWzI43VU4FxUV3bNde4VzVFTUfSuc+yowejLULS3IPZ2qkf0RomlVt5MVVEnLPa1qNSqKSjA2fjbGxs/W+P6ryhTY/MRCNNTc0vi+jY1bwAgIhEKIM6kfLVc5DfOCi58P9m/cxnYohBiN+uoa1FaqqJKWgzoGYHu6czZJW1NeQS2EOG7yoidRW6nCxSNH2Q5Fb1CS1kC0J2kdPNxx7Xw6y9GQzpQSKQQmQti5OKNcVnRPn8M5c+Z06XM4bdo0jccw8qGJEJqYIItaHXSruwrnhQsXIj4+vmMbbVU4B8VMxo30S1StRjiruaERtaoqiJwpSctFX7zwKoZ4eWh8v5Z2dpi/fjUeeWkpDnzwfxrfv7HxDAkEAEiu5LAcCbmf0NgpaG1txWVqdUCITikkUjh49H1+B9GujipnjibQh4WPwo0L1OqAywa7uiAwZjJOfrkTLY2NbIejNyhJayCqyhRobmjs14Aqol2Km7cT6J7uKJfdW52pC8FTolCtUNJE6fvorsI5JycHQ4cOxaxZs7RW4Wzv7gZn32E4t/dnTXwbhGhNlbwMtk6ObIdBulEhK0aFrFgr+/YIDsDE+fH446fDWmmnYEw8ggOhlMhQW6nqeWPCilGPTMWN9AzUlFewHQohRkUpkXUsXSfc0XCrFjXlFXDgYCsKu6HOGDzUBb998z3boZAHmLjgT2DUrTizez/boegVStIaCIZhoJTKqJ8PB3X+FDLvzDmdH19oZoYRk8Yj/eARGlbyAN1Nci8uLsahQ4cAaKfCOTB6EgAgO4X60RJuU8nL4BkShD+9+4bG911dpsCJL3fS4DwO+vWz/yB0+sOIf3slPlvyAl1DBsAzNAgFf1xgOwxyHy7+PnAa5oVT39LkaUJ0TSmRIXzWDAjNzKjajmOUYikctbBaZ6D8x0cCAK6nZ7AcCbkfUwsLjJ0zC5ePnaQ+731ESVoDorgpgZOPN9thkLvcqqhEfc0t1paKDJ8QCbNBFsg68Rsrxyf3FxgzGcX5BagoKmE7FEIeKPdUKtxGDu/4YEFjeDzYONjD3NoKB7f8U7P7JgNWX12DX/5vO+a//w7CH5+JtAO/sB2SXhI5DYHtEEeIL2ezHQq5j9DYKWhVq3H5eDLboRBidDra9rm7orTgBsvRkM4UEimGTxjLdhhd2AxxxMxXXkRRbj5Kr9H/X7gq4vGZsLCxxu/f0YeffUVJWgOilEgRED0JfIEArWo12+GQThRiCWtJ2uAp0airqqbJlxwzyNYG3mEhOLmDJn0T7juzax/O7NqnlX0//sZriFqyANfTM5CdTFXlXJN+MBFj42bjsddfwpWTv1P/7H7wCA0CAEgoSctZo2KnouCPC9SOghAWKDrNVqEkLbcobkoR+cRjMLWwQFN9PdvhgC8QYPGHa2FiboZv//EurfDhKB6Ph0kL50J8OZvuffqBz3YARHMUYhmEJiYQuTixHQq5i1IiY2VqKV8oQGDMJGSnnEJrCyXuuWTk5AkQCIXIPklJKWLcDn+0HZIrOZj//tuwG+rMdjjkLgzDYN+GrRhka4MZL7/Adjh6yTM4EM2NjdTXl6NcR/jD0dMdl349znYohBilO63haLYK13BteNi0F56BT3gY9q3fgrJCMdvhkPsYPnEshnh74hRV0fYLJWkNSMcvUepLyzmKmxLYuThDYGKi0+P6RozGIBsbZB1P0elxSc8CYyajqkwBWU4u26EQwip1czP+t/Id8MDDn7e8D4GQFvlwTUl+AU7/sBfjn5wDt4DhbIejdzxDAiHLyaO+yxw16pEpUDe3UFsoQljC5QFVxq6jypkDSVrfyDGY+sIz+OPAYVw4/Cvb4ZAHmLxoHqrKFLh89CTboeglStIaEC79EiVdKSVS8AUC2LsN1elxg6dEo7GuDnmpaTo9LnkwgYkJhk8ci+yU07RMhxAAFbJi7H53AzxDAvHo639jOxzSjaTtCbhVUYm41SvB4/HYDkdvCIRCuAWMgPjyFbZDIfcRGjsV+efTUFdVzXYohBgttlYdkgcrl8oAAA4e7FY5W9nbYdEH70FxU4KfNm5jNRbyYEO8PTFi0jic3b2fPpzuJ0rSGpAaZTkaamtZ/yVK7qUQt13gdLlUhMfnI2hKFHJPn6NJqRzjGzkG5paWyE6hVgeEtMs68Rt+/3Y3opYsQGDMZLbDIXdpuFWLQ9s+hWdIICLnPMZ2OHrDxd8XJuZmkGTlsB0Kq2JjY5Gbm4tr167hjTfeuOf9119/HdnZ2cjMzMTx48fh4aGbaeLugSNh7zYUmdTqgBBWKSVSWg3KQU31DVDJy+DoqZvfyd3h8XhYtOk9WFhbY+eKt9FU38BaLOTB+EIBHln2PJobG5H64wG2w9FblKQ1MOWSIs70jCF33Onno7sLnGdIEGwc7KnVAQcFxUxGY10dCs5fYDsUQjiF+tNy28XDSbh+IQOPvvY3DLK1YTscveAZEggAEGcabyUtn8/H9u3bMWPGDAQEBGDBggUwNzfvsk1GRgbCw8MRGhqKvXv3YvPmzTqJbdQjU9HS3IwrNLSQEFYpxFLYOjnC1MK8542JTinFUlbzCw8/twT+4yPx0wcfofTaddbiIA9maSfCC198gtDpD+PYF/+lQZwDQElaA6OQSKmfDwfVV9fgVkWlTpfxBE+NQktTE3J+P6OzY5LeCYyejLwz59HS1MR2KIRwSkd/Wh6f+tNy1P4N22BubYWZr/6V7VD0gkdIIKrKFFCVytkOhTWRkZEoKChAYWEhmpubsWvXLohEoi7bpKSkoP725PBz587Bza1vq8KEZmawsLHuc2yhsQ8j78x51FfX9PlrCSGaUy5pW3Vo7+7KciTkbgqxlLWVut6jQ/HIsqXIOHIU5/cdZCUG0rOhw/3w2g874BkahO9WvYcTCd+wHZJeoyStgVGIJRjs6gK+UMB2KOQuur7ABU+JRv65NDTW1unsmKRnbgEjYOvkSFU7hNwH9aflttJr13Hquz0YGz8b7kEBbIfDeZ4hQRBfzmY7DFa5urpCKpV2/Fkmk8HU1PS+2z/33HNITEzs9r2lS5ciLS0NaWlpcHBw6Pj7qD/Px6pffsSkhXN7fQ/sGRoEOxdnXEqiVgeEsE1xe9UhFRtxj1IshdVgu359EDYQliJbLN68DhVFJfhx3Yc6Pba+YbOlUMj0h7Fs5xfgCwX4bMmLuHg4SWP7NlaUpDUwSrEMAqEQg111O6CK9EwpkcLRSzftDoYO94O921BkHadJxVwTGDMZrWo1ck+dZTsUwhE93Vh5eHjg+PHjyMzMRHJyMlxdXTv+/sKFC8jIyMCVK1fwwgsv6Dp0rck6noJT3+2h/rQcdfTzr1CjLEfc6uXg8elW8n4sRbZw9HSHJMu4k7R9sWjRIoSHh2PLli3dvp+QkICIiAhERERAqVR2/H3O76dRlJuPOav+jpX7v0Ng9KQejzUqdiqaGxuRTR+aEsI6JQvzO0jvsJVAn//+O7CyE2HnitVUdPQAbLUU4vF4mPHyC3hq2wYU513Dx/OegSwnd8D7JZSkNThK8e3ep/QpJOcobkohchqik15LwVOj0apW02AqDgqKmYzCjMuoVVWxHQrhgO5urEaOHNllm61bt2Lnzp0IDQ3FunXrsGnTJgBASUkJxo8fj7CwMIwdOxZvvvkmXFxc2Pg2tOLQts8gzb5K/Wk5qLG2Doe2fgqPoACMi3+c7XA4yz24rdLY2Ctpi4qK4O5+577Uzc0NTd20+5kyZQpWr16N2bNnd/v+g5TkX8cXS1/Bl39bDoZh8OynW/Dil5/CdYR/t9vzeDyETn8YuafP0cM/IRzQWFeHamU5VdJykOKmBAAwe84TOqvWfGjJfARETcShbZ+i6Gp+v/djDHTRUuhu5laWeOafmzH1+adxbu/P+Py5ZagprxjQPskdlKQ1MB2fdNGnkJzTfm7s3bXf8iB4ShRuXLhEDbs5xm6oM4YO96OqHdKhuxurxx/vmvQKCAjAyZMnAQDJyckd7zc3N3ckMszMzMA3sIpGdXMzdq54m/rTclRG4jFcO5+Oma++CEs7Uc9fYIQ8Q4LQqlZDln2V7VBYlZaWBj8/P3h5ecHExATz58+HStX1/mTUqFH44osvMHv2bCgUin4f6+qps9gavxj7N2zFUH9fvLb7v5i3bjVsHB26bOcVFgJbJ0dkJp3o97EIIZqlFEvh4MlO71Nyf+WyYjBqNd56+VWdVGu6BwXgsddeQtaJ33D6+72a+BYMmi5aCnXm4OmOV777EiMmjsO+97fgx7UfQN3cPLBvgnRhWE90BLWVKtRX19BSEQ7qqHLW8rlx9PKAi58Psk6kaPU4pO8Co9uWbVOFM2nX3Y1VezuDdpmZmYiLiwMAzJkzBzY2Nhg8eDCAtoq0zMxMSKVSfPjhhygpKbnnGL254eIq6k/LbT9t3AazQYPwKA0R65ZnSCBK8q+jqb6B7VBYpVarsWzZMiQlJeHq1avYs2cPGhoasHbtWsyaNQsAsGXLFlhZWeHHH39ERkYGfv75534fr7VFjTO79mHjo3Px2zc/YPRjsXjz8B5Me/HZjtVMo2KnoKm+AdkppzXyPRJCBk4pkdFqUA5SNzfDsr4Jyls1Wq/WNLe2wp+3rEdVmQK7392gkfjJHf1tKdRuxKRxeO37r2ApssUXz7+Cs7v3aztko0RJWgOkkLA3gZHcn/L21FJtL+MJnhIFALhy4netHof0XWDMZJReL+z4/wIhvbFixQpERUXh4sWLiIqKgkwmg1qtBtCW1A0NDYWvry+eeuopDBky5J6v7+mGi+vY6k/bl17Bw4cPN4pewXeT37iJ3/+3C2PjZ8MjJJDtcFgbnCEQCjHI1gZ2Q53h7OcDr9BgDJ8wFh5BARBTP1oAQGJiIoYPHw5fX19s3LgRALBmzRocOnQIADBt2jQ4OzsjLCwMYWFh96wo6I+Gmls4/NFn2Dx7AXJPp+KRl5bijUO7ET57JkKmxeDqqbNoup1QIISwTyGWwsbRAWaDBrEdCrkLr7oWdYy6488DqdZ8kCffWwWR0xD87x/voL66pl+xGhtdtBQCgJhnFuG57dtQUVyCjxc8i+vpGQOKm9wfrR00QEqJDJ4hQWyHQe7SVF+PKrkCjl7aTtJGQ5KVA5W8TKvHIX1jbm0FnzFhSPnme7ZDIRzS3Y1VUVFRl21KSkoQHx8PALC0tER8fDyqqqru2ebKlSuYPHky9u3bp/3AdezQts/gNSoYCzetQUlegdaPx+Px8M4T87D92C9Q1dVi5T9Wwnp8GEqr2pZoX0k+hb/NfBw7d+7Ezp07kZubi02bNmHJkiUdvYKbmppgaWmJK1eu4ODBg91WORuC/2/v/mOiuPs8gL9hZaX6tEKpF1tAIMFSSHviWa29NKc5WhGfoOVoCrZEbDkM1bYX9S5STUtJTps2Pb2KjTUIqTaNtLV/KLninT4EY56IorArlLDswLYiplWRqucvQD/3h8fICsos7I+Z2fcr+Sbs7sx+Zub9nYEZZr/7P19VYtafF+KtLz5FTwD/ATWYWe6KfByt/gkNDQ2wWCxu0wx+FPPGjRsoKirCZ599htzcXM01opOfRtYH6zBx8iRMnDQJ4ZMnYeLkSZjwkBPVjobGMa8TeUfP2W7sWbcRCbP+Fkv+7V+wbNOHAAAbhzog0pWL6hdUxaC7jeOQ6smVi5cQPnOypmkH79acP3/+iK8XFhZi5cqVAOD2Ca+/z/knzFz4j6j+j+04E+RjuXti6JBC3d3dDx1SaNGiRR4PKWSZMAG5mz7E3y1eCNt//wXfffjvQf8JIV/jRVoTcjXaYQ2fiJCQEIhIoBeHhmg9+ldcvdDjs/cPnWBBz9lu/GJr9lkNM0tPT8cXX3wBi8WCXbt2DXvdarViz549mD17Nnp6epCTk4Nff/1V03v/6fFIdJ6yoaX2iLcXmwxspD+s3njjDbdpoqKicOnSJYgIPvjgA1RWVgK4O1RCT08Pbt68iYiICLz00kvYunVrIFbD527392PPuo3I/Nf3Ef4nbScJ45HwN9Nw/vIf+O3S3eP1iQ4HUp6KRdeFu//8uj0wgJSUFKxduxYAcPXqVbexggeZcazg+/XduIFv15fg5cJ8hNx3UdSfBjP7tatL/Sjm6tWr3aapq6tTf66vr0deXp5HNW4P3MbArT5c6+3FzWvXcevaddy6fh03//ea+vOta/fa9StXcN6l7XcE+Z6r6TS2vfnPmLX4FSTOmY3WI38N9CIR0RC/d7ignDiFEJP/3jSinxubkPHSPyAsfCL6b94a9W7N+fPnP/BuzfLycpSXlwO4+3fwIBFB81+O4AhvaPHI0CGFLBYLKisrkZWVhdLSUpw8eRLV1dVuQwoBwJkzZzR/YuX2wABu9w/gv/5zB2or9vhyVWgI0VNraGgI+DKYsXljuzIb77T09HRpa2sTp9Mp69evH7ZdrVarVFVVidPplPr6eomLi2M2fmihoaGiKIokJCRIWFiY2Gw2aW5udpvmnXfekR07dggAycnJkaqqKmYTgGa2bZqRkSEOh0MURZENGzYIACktLZXMzEwBINnZ2dLe3i4Oh0PKy8vFarUKAHn55ZfFbreLzWYTu90uhYWFQbftfNWys7OlvLxcfZyXlydlZWVu03z77bfy/vvvCwBxOp0iIvL4448LAImJiRG73S7Xrl2TVatWaarJbLyf2e+///7A6cvKymTjxo3MJkCNf5fqt3G7ctvpqXlrmzKb8TWLxSIdHR0SHx//wPOk1NRUURRFEhMTmUuAG3/H6rdp2a6a/k012hhfsbGxqK2tRWNjI+x2OzIyMtTXiouL4XQ60dbWhoULF2opR2RaoaGh+PLLLx/6zZgFBQXo7e3FjBkzsHXrVnz66acBWtrgMnfuXCiK8tAB8ZcuXYrdu3cDAPbt24e0tLRALCqZzGhjNf744494+umnkZSUhMLCQvXOhMOHD2PmzJlITU3FzJkz1bsSyD+GjhX86KOPejxWMGDsL3UzstG+OANgNkRmwHNYIu/w9xdAEgW7h1/FHeHusuTkZLdpdu7cKUVFRQJAkpOTxeVyqT/bbDaxWq0SHx8viqJIaGgor9jr9Iq9P94j2Nu8efPk4MGD6uPi4mLp6upym+bgwYMyb948Ae7+1/LChQvMxg9Ny11Yzc3NEh0drT5WFEWioqKGvVdhYaE0NDRIQ0ODejxk815jf+e283Ub6VhdXFz8wOlPnTo17Fg+2CoqKiQ7O5vZBCCzkTJJS0uT1tZWmTp1qub3Zjbeb/y7VL/NLNvV3+ewZtp2emq8k1a/jcdx/TZmo9/mlTtpR7q77P7xK0QEjz32GABgypQpOHfuHIC7d51VVVWhr68Pv/zyCxRFwdy5c0crSWRa0dHR6OrqUh+P9M2YQ6e5ffs2Ll++jKioqGHvxbt89Ku8vBxz5szBnDlzcPHixUAvDhF5aOhYwWFhYcjNzcWBAwfcpomKikJISAgA4Mknn3QbK3jwExKDYwU7HA7/rkAQGimzB31xxpIlSzz+4gwiMhaewxIRkRGNepF2pItK0dHRbtN8/PHHyMvLQ1dXF3766Se89957mucFeLGJaCx4IdC7uru7ERsbqz4eaUD8odNYLBZMmTIFPT2++yI4IgqMkT7W19ra6vaxvgULFsDhcMDhcGDChAnYtGkTACA5ORnHjx+HzWbDkSNH8Pnnn6OlpSWQqxMU+FFMIhrKH+ewAM9jiYjIuyZ4402WLVuGr7/+Glu2bMG8efPwzTff4Nlnn9U8/9Bv+Dt//rzbt/w9yBNPPOHXC1NGrxcXF+eV99BbNkbLZfLkyXjqqaeQmpoKAJg2bRomTZrkNs3ghcDu7m7NFwK1ZGO0bRWIes899xzsdjv6+/uRnJyMmzdvur1+4MAB5Ofno76+Hq+99hpqa2tHfU9mo8/jWbDicdyzeleuXAEAZGVlISsrCwCwePFifPTRRwCAy5cvAwAiIyOHjRXsKR4rvFNvaGZxcXEoKSlRX3vllVfG9J7MRp/HcT0ez/xdzxe1gul37HjPYQHPz2PN3B99Uc9b/ZHHcX1mw+O4fo/j3GcCm81Dx0PQMi5bS0uLxMTEqI87Ojpk6tSpw6YdOtbmeJu/x8gwez2jLrvRchnpmzFTUlLcplm1apXs2LFDAEhOTo589913ulj2YKiXkZEhDodDFEWRDRs2CAApLS2VzMxMASATJ06U77//XpxOpxw/flwSEhJ0s+ysx2bUzNgf9bvsZq9n5GU3ez0jL7uZj59GajyHDY56Rl52s9cz8rLzOK7PZTd7vcE26nAHWsZlO3PmjPot58888wzCw8Nx4cIFHDhwALm5ubBarYiPj8eMGTNw4sSJ0Tlwbc8AAAaXSURBVEoSmZaWj9BWVFQgKioKTqcTa9euRXFxcYCXOnjU1NQgKSkJiYmJ2Lx5MwCgpKQE1dXVAIBbt27h9ddfx4wZM/DCCy/A5XIFcnGJiIiIaAQ8hyUiIiMadbiDoReVLBYLKisr1YtKJ0+eRHV1NdatW4fy8nKsWbMGIoIVK1YAAFpbW9WLUAMDA1i9ejXu3Lnj63Ui0rWamhrU1NS4PTf045iDFwKJiIiIiMhzPIclIiIjsgD4eLSJFEXB9u3bsW3bNhw9ehQAUFdXh/b2dgDAxYsXUVlZia+++go7d+5EZ2enOu/Ro0exbds2bN++HYqieHXhGxsbvfp+wV7Pm/y57MxFO7NvK2bDeuQ9PI7rk9m3FbNhPV8w87Yyci6+xnPY4KjnTWbfVsxGn/WYC+sNFYK74x4QERERERERERERUQCMOiYtEREREREREREREfkOL9ISERERERERERERBZDuLtKmp6ejra0NTqcT69evH/b6mjVr8PPPP8Nut+Pw4cOYPn26+trAwACamprQ1NSE/fv3e6Vefn4+zp8/r75vQUGB+try5cvR3t6O9vZ2LF++3Cv1tmzZotZyOBzo7e0d1/p5E7NhNlrrMZt7zJyNkXMJVmbuj1rq6blPmjkbI+cC+Dcb7jPamXmf0VJPz9kEKzP3SSP3RzPnoqUes9Fej9ncw2wCm43opYWGhoqiKJKQkCBhYWFis9kkOTnZbZoFCxbII488IgCkqKhIqqqq1NeuXr3q9Xr5+flSVlY2bN7IyEjp6OiQyMhIiYiIkI6ODomIiBh3vaHt3XfflYqKijGvH7NhNsyG2fgqGyPnEqzNzP1Ra72hTU990szZGDkXf2fDfUafuTAbNm/1EaP2SSP3RzPnwmyYDbMxZza6upN27ty5UBQFLpcL/f39qKqqwtKlS92mqaurw40bNwAA9fX1iImJ8Wm9B0lPT8ehQ4fQ29uLP/74A4cOHcKiRYu8Wm/ZsmXYu3evR+vkK8zGHbNhNlqYORsj5xKszNwfx1JPT33SzNkYORfAv9lwn9HOzPvMWOrpKZtgZeY+aeT+aOZcxlKP2TAbLZiNO39no6uLtNHR0ejq6lIfnz17FtHR0Q+cvqCgADU1Nerj8PBwNDQ04NixY5pC1VovOzsbdrsdP/zwg9r5PF1WT+eZPn06EhISUFtbO+b18yZmcw+zYTZamTkbI+cSrMzcHz2dR2990szZGDkXwL/ZcJ/Rzsz7jKfz6C2bYGXmPmnk/mjmXDydh9kwG62YzT2ByGaC19/RT9588008//zzmD9/vvpcXFwczp07p27E5uZmdHZ2jqtOdXU19u7di76+PqxcuRK7d+9GWlraeBd/VLm5udi3bx/u3LmjPueL9fMFZsNsmI3nzJyNkXMJVmbuj4Cx+6SZszFyLoB/suE+4zkz7zOAsbMJVmbuk0buj2bOBWA2WjAbzzEb72ejqztpu7u7ERsbqz6OiYlBd3f3sOnS0tKwceNGLFmyBH19ferz586dAwC4XC7U1dVh1qxZ46536dIltcauXbswe/Zsj5Z1LOsH3O0M999S7en6eROzuYfZMButzJyNkXMJVmbuj57Oo7c+aeZsjJwL4N9suM9oZ+Z9xtN59JZNsDJznzRyfzRzLp7Ow2yYjVbM5p5AZROwAYnvbxaLRTo6OiQ+Pl4dwDclJcVtmtTUVFEURRITE92ej4iIEKvVKgAkKipK2tvbHzr4r9Z606ZNU39+9dVX5dixY+oAxZ2dnRIRESERERHS2dkpkZGR464HQJKSksTlco17/ZgNs2E2zMZX2Rg5l2BtZu6PRu+TZs7GyLn4OxvuM/rMhdmwBXufNHJ/NHMuzIbZMBvTZuOfoLW2jIwMcTgcoiiKbNiwQQBIaWmpZGZmCgA5dOiQ/Pbbb9LU1CRNTU2yf/9+ASAvvviinD59Wmw2m5w+fVrefvttr9TbvHmztLS0iM1mk9raWklKSlLnfeutt8TpdIrT6ZQVK1Z4pR4AKSkpkU8++cRtvrGuH7NhNsyG2fgqGyPnEqzNzP3R6H3SzNkYORd/Z8N9Rp+5MBu2YO+TRu6PZs6F2TAbZmO+bEL+/wciIiIiIiIiIiIiCgBdjUlLREREREREREREFGx4kZaIiIiIiIiIiIgogHiRloiIiIiIiIiIiCiAeJGWiIiIiIiIiIiIKIB4kZaIiIiIiIiIiIgogHiRloiIiIiIiIiIiCiAeJGWiIiIiIiIiIiIKID+D0ZAvGSqXHsjAAAAAElFTkSuQmCC\n"},"metadata":{}}],"source":["# from google.colab import output\n","# ------------ survey param ------------ #\n","# itv_num_list = [1, 3, 5, 15]\n","# itv_list = ['15m', '30m', '1h', '4h']\n","# itv_list = ['3m', '5m', '15m', '30m', '1h', '4h']\n","val_list = np.arange(0.1, 1, 0.1)     # prcn 1\n","# val_list = np.arange(-0.5, 0.5, 0.05)  # prcn 2\n","# val_list = np.arange(-0.5, 0., 0.03)  # prcn 2\n","# val_list = np.arange(-0.5, -0.6, -0.005)    # prcn 3\n","# val_list = np.arange(0.944, 0.945, 0.0001)    # prcn 4\n","# val_list = np.arange(1, 10, 1)   # prcn -1\n","# val_list = np.arange(100, 120, 1)   # prcn -2\n","# val_list = talib.get_function_groups()['Pattern Recognition']\n","\n","# ------------ get survey_res ------------ #\n","result = []\n","res_shape = (3, 12)  # short, long, both x data\n","config_list_copy = copy.deepcopy(config_list)\n","for set_val in val_list:\n","  # ------------ open 결정 이전의 인자값 ------------ #\n","  # ------ point * dur. ------ #\n","  config_list_copy[0].loc_set.point1.wrr_32 = set_val\n","  # config_list_copy[0].loc_set.point1.candle_pattern = set_val\n","  # config_list_copy[0].loc_set.zone.degree_list = set_val\n","  # config_list_copy[0].loc_set.point2.wick_score_list = str([set_val])\n","  # config_list_copy[0].loc_set.zone.ir = set_val  \n","  # config_list_copy[0].loc_set.zone.abs_ratio = set_val\n","\n","  # ------------ open 결정 이후의 인자값 ------------ #\n","  # ------ utils ------ #\n","  # config_list_copy[0].tr_set.tp_gap = set_val  \n","  # config_list_copy[0].tr_set.ep_gap1 = set_val \n","  # config_list_copy[0].tr_set.ep_gap2 = set_val \n","  # config_list_copy[0].tr_set.out_gap = set_val  \n","  # config_list_copy[0].tr_set.wave_length1 = set_val  \n","  # config_list_copy[0].tr_set.wave_time_ratio1 = set_val\n","\n","  # config_list_copy[0].tr_set.tp_gap = abs(set_val) - 0.5\n","  # config_list_copy[0].tr_set.out_gap = set_val + 0.5\n","  # config_list_copy[0].tr_set.wb_tp_gap = config_list_copy[0].tr_set.tp_gap\n","  # config_list_copy[0].tr_set.wb_out_gap = config_list_copy[0].tr_set.out_gap\n","\n","  # ------ entry, exit (ep, tp, out vars.) ------ #\n","  # config_list_copy[0].tr_set.expire_k = set_val\n","  # config_list_copy[0].ep_set.expire_tick = set_val  \n"," \n","  for utils_, config_ in zip(utils_list, config_list_copy):\n","    enlist_tr(res_df, config_, np_timeidx)\n","  # open_info_df = get_open_info_df(ep_loc_v3, res_df, np_timeidx, ID_list, config_list_copy, id_idx_list)   # point * mr_res 이기 때문에 utils_tr & rtc 의 영향을 충분히 받음\n","  open_info_df1 = get_open_info_df_v2(ep_loc_p1_v3, res_df, np_timeidx, ID_list, config_list_copy, id_idx_list, open_num=1)  # --> point * dur. 관련 (loc_set) param 에 종속 (open_info 가 변경되는게 아니라면, 재실행할 필요없음)\n","  open_info_df2 = get_open_info_df_v2(ep_loc_p2_v3, res_df, np_timeidx, ID_list, config_list_copy, id_idx_list, open_num=2)\n","  open_info_df_list = [open_info_df1, open_info_df2]\n","\n","  try:\n","    result.append(get_res_v9(res_df, open_info_df_list, ohlc_list, config_list_copy, np_timeidx, funcs, test_ratio=test_ratio, plot_is=1, signi=True))    \n","  except:\n","    result.append(np.full(res_shape, np.nan))\n","    # pass\n","\n","survey_res_list = [np.array(result)[:, s_i::3] for s_i in range(3)]   # 3 for s, l, b\n","# short_res, long_res, both_res = survey_res_list\n","\n","# ------------ plot survey_res ------------ #\n","title_list = [\"short\", \"long\", \"both\"]\n","sub_title_list = ['hhm', 'hlm', 'frq', 'dpf', 'wr', 'sr', 'acc_pr', 'sum_pr', 'min_pr', 'liqd', 'acc_mdd', 'sum_mdd']\n","space_ = \" \" * 120\n","\n","fig = plt.figure(figsize=(24, 8))\n","plt.style.use('dark_background')\n","gs = gridspec.GridSpec(nrows=1,\n","                        ncols=3,\n","                        # height_ratios=[1, 1, 1]\n","                      )\n","# nrows, ncols, h_r = 3, 3, [1, 1, 1]\n","nrows, ncols, h_r = 3, 4, [1, 1, 1]\n","# nrows, ncols, h_r = 4, 3, [1, 1, 1, 1]\n","# if d_idx == 0:\n","# else:\n","  # nrows, ncols, h_r = 2, 2, [1, 1]\n","\n","for d_idx, (title_name, survey_res) in enumerate(zip(title_list, survey_res_list)):  \n","  inner_gs = gs[d_idx].subgridspec(nrows=nrows,\n","                        ncols=ncols,\n","                        height_ratios=h_r\n","                      )\n","  for in_idx, (data_, sub_title) in enumerate(zip(survey_res.T, sub_title_list)):\n","    plt.subplot(inner_gs[in_idx])\n","    data = data_.ravel()\n","    valid_idx = ~np.isnan(data)\n","    if np.sum(valid_idx) > 0:\n","      if type(val_list[0]) == str:\n","        x, y = np.arange(len(val_list))[valid_idx], data[valid_idx]\n","      else:\n","        x, y = val_list[valid_idx], data[valid_idx]\n","      plt.plot(x, y)  # 앞에서부터 len(result) 만큼만    \n","      plt.title(sub_title + '_{:.2f}'.format(x[np.argmax(y)]))\n","    else:\n","      plt.title(sub_title)\n","\n","plt.suptitle(space_.join(title_list))\n","plt.show()\n","# print(\"\\n\")"]},{"cell_type":"markdown","metadata":{"id":"EJ4f-3Zf4ImT"},"source":["### backtrader validation"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BPI-9QX74ImW"},"outputs":[],"source":["trade_log_name = \"ETHUSDT_1658210884.pkl\"\n","trade_log_dir_path = \"./trade_log/0717_5_47_trader\"\n","\n","with open(os.path.join(trade_log_dir_path, trade_log_name), 'rb') as f:\n","  trade_log = pickle.load(f)"]},{"cell_type":"code","source":["trade_log  # both pos_side's log"],"metadata":{"id":"9Kymnik4ZpA6"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DiTKuq9T4ImY","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658222594162,"user_tz":-540,"elapsed":431,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"a06c3f6a-311d-4a7d-c425-00563fd8980f"},"outputs":[{"output_type":"stream","name":"stdout","text":["lacked_open_ts : []\n","added_open_ts : ['2022-01-14 17:27:59.999000']\n","\n","lacked_entry_ts : []\n","added_entry_ts : ['2022-01-14 17:28:59.999000']\n","\n","lacked_exit_ts : []\n","added_exit_ts : ['2022-01-14 19:53:59.999000']\n","\n"]}],"source":["# 1. ts 에 pair 된 en_p, ex_p 만 비교하면 될 것\n","#   -> open_idx, en_idx, ex_idx 조회하면 될 것\n","\n","pos_side = \"SELL\" # BUY\n","val_obj = short_obj if pos_side == \"SELL\" else long_obj\n","\n","# ------ get idep trade_info ------ #\n","op_ts = list(map(lambda x : str(x), res_df.index[val_obj[4].astype(int).ravel()])) \n","en_ts = list(map(lambda x : str(x), res_df.index[val_obj[2].astype(int).ravel()])) \n","ex_ts = list(map(lambda x : str(x), res_df.index[val_obj[3].astype(int).ravel()])) \n","en_p = val_obj[0].ravel()\n","ex_p = val_obj[1].ravel()\n","\n","for order_type, ts_ in zip(['open', 'entry', 'exit'], [op_ts, en_ts, ex_ts]):\n","  trade_log_ts = [k for k, v in trade_log.items() if order_type in v if pos_side in v]\n","  lacked_ts = [ts for ts in ts_ if not ts in trade_log_ts]\n","  added_ts = [ts for ts in trade_log_ts if not ts in ts_]\n","\n","  print(\"lacked_{}_ts :\".format(order_type), lacked_ts)\n","  print(\"added_{}_ts :\".format(order_type), added_ts)\n","  print()"]},{"cell_type":"code","source":["# ex_ts\n","# [k for k, v in trade_log.items() if order_type in v if pos_side in v]\n","# list(trade_log.keys())[1]\n","res_df.iloc[-0:]"],"metadata":{"id":"ZlcPZeuO-UnB"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### check added_ts"],"metadata":{"id":"bPfWgZCI73LZ"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"VnTmGTJI4ImZ"},"outputs":[],"source":["keys = list(trade_log.keys())\n","\n","for k_i in range(len(keys)):\n","  if keys[k_i] in added_ts:\n","    # print(trade_log[keys[k_i]])\n","    # print(trade_log[keys[k_i + 1]])\n","    print(keys[k_i], trade_log[keys[k_i]])\n","    print(keys[k_i + 1], trade_log[keys[k_i + 1]])"]},{"cell_type":"markdown","source":["#### price sync_check"],"metadata":{"id":"yMFIedEG77Yt"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"Vn5x7mcP4ImZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658223074884,"user_tz":-540,"elapsed":378,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"96d56d1e-03f6-472a-cddd-5f449f3001ba"},"outputs":[{"output_type":"stream","name":"stdout","text":["2022-01-17 03:19:59.999000 -0.00580000000036307\n","\n","2022-01-18 16:49:59.999000 0.0\n","\n","2022-01-27 05:56:59.999000 -0.007399999999961437\n","\n","2022-01-27 11:51:59.999000 0.0\n","\n","2022-02-03 01:29:59.999000 0.0\n","\n","2022-02-05 10:58:59.999000 0.0\n","\n","2022-02-08 17:00:59.999000 -0.00559999999950378\n","\n","2022-02-13 07:03:59.999000 -0.003800000000410364\n","\n","2022-02-16 10:32:59.999000 -0.0039999999999054126\n","\n","2022-02-16 13:43:59.999000 0.0\n","\n"]}],"source":["accept_price_gap = 0.1\n","for i in range(len(en_ts)):\n","  try:\n","    print(en_ts[i], trade_log[en_ts[i]][0] - en_p[i])\n","    # print(trade_log[str(ex_ts[i])])\n","    # print(ex_ts[i], trade_log[ex_ts[i]][0] - ex_p[i])\n","    # print(ex_ts[i])\n","    print()\n","\n","  except Exception as e:\n","    print(e)\n"]},{"cell_type":"markdown","metadata":{"id":"1GVZ03zDyU2N"},"source":["### legacy"]},{"cell_type":"markdown","metadata":{"id":"IWO7KkqltMFt"},"source":["#### main_functions"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MY1csdNRLGsk"},"outputs":[],"source":["def get_open_info_df_v2(ep_loc_v2, res_df, np_timeidx, ID_list, config_list, id_idx_list, open_num=1):\n","  start_0 = time.time()\n","  # ------ get mr_res, zone_arr ------ #\n","  short_mr_res_obj = np.array([ep_loc_v2(res_df, config_, np_timeidx, show_detail=True, ep_loc_side=OrderSide.SELL) for config_ in config_list])\n","  long_mr_res_obj = np.array([ep_loc_v2(res_df, config_, np_timeidx, show_detail=True, ep_loc_side=OrderSide.BUY) for config_ in config_list])\n","  short_open_idx_list = [np.where(res_df['short_open{}_{}'.format(open_num, id)].to_numpy() * mr_res)[0] for id, mr_res in zip(ID_list, short_mr_res_obj[:, 0].astype(np.float64))]   # \"point * mr_Res\"\n","  long_open_idx_list = [np.where(res_df['long_open{}_{}'.format(open_num, id)].to_numpy() * mr_res)[0] for id, mr_res in zip(ID_list, long_mr_res_obj[:, 0].astype(np.float64))]  # zip 으로 zone (str) 과 묶어서 dtype 변경됨\n","\n","  # ------ open_info_arr ------ #\n","  short_side_list = [np.full(len(list_), OrderSide.SELL) for list_ in short_open_idx_list]\n","  long_side_list = [np.full(len(list_), OrderSide.BUY) for list_ in long_open_idx_list]\n","\n","  short_zone_list = [zone_res[short_open_idx] for zone_res, short_open_idx in zip(short_mr_res_obj[:, 1], short_open_idx_list)]\n","  long_zone_list = [zone_res[long_open_idx] for zone_res, long_open_idx in zip(long_mr_res_obj[:, 1], long_open_idx_list)]\n","\n","  short_id_list = [np.full(len(list_), id) for id, list_ in zip(ID_list, short_open_idx_list)]\n","  long_id_list = [np.full(len(list_), id) for id, list_ in zip(ID_list, long_open_idx_list)]\n","\n","  selected_id_idx = np.arange(len(id_idx_list))\n","  short_id_idx_list = [np.full(len(list_), id) for id, list_ in zip(selected_id_idx, short_open_idx_list)]\n","  long_id_idx_list = [np.full(len(list_), id) for id, list_ in zip(selected_id_idx, long_open_idx_list)]\n","\n","  # ------ get open_info_df ------ #\n","  #   series 만들어서 short / long 끼리 합치고 둘이 합치고, 중복은 우선 순위 정해서 제거\n","  short_open_df_list = [pd.DataFrame(index=index_, data=np.vstack((data_)).T, columns=['side', 'zone', 'id', 'id_idx']) for index_, data_ in zip(short_open_idx_list, zip(short_side_list, short_zone_list, short_id_list, short_id_idx_list))]\n","  long_open_df_list = [pd.DataFrame(index=index_, data=np.vstack((data_)).T, columns=['side', 'zone', 'id', 'id_idx']) for index_, data_ in zip(long_open_idx_list, zip(long_side_list, long_zone_list, long_id_list, long_id_idx_list))]\n","\n","  open_info_df = pd.concat(short_open_df_list + long_open_df_list)\n","  # ------ sorting + unique ------ #\n","  open_info_df.sort_index(inplace=True)\n","  # print(len(open_info_df))\n","  # print(len(open_info_df))\n","  # open_info_df.head()\n","  print(\"get_open_info_df elapsed time :\", time.time() - start_0)\n","  return open_info_df[~open_info_df.index.duplicated(keep='first')]  # 먼저 순서를 우선으로 지정  "]},{"cell_type":"code","execution_count":29,"metadata":{"id":"eiQ36_SLLE3w","executionInfo":{"status":"ok","timestamp":1663112659012,"user_tz":-540,"elapsed":2,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["def get_res_v9(res_df, open_info_df_list, ohlc_list, config_list, np_timeidx, funcs, inversion=False, test_ratio=0.3, plot_is=True, signi=False, show_detail=False):\n","  # ------------ make open_info_list ------------ #\n","  open_idx1, open_idx2 = [open_info_df.index.to_numpy() for open_info_df in open_info_df_list]\n","  len_df = len(res_df)\n","\n","  sample_len = int(len_df * (1 - test_ratio))\n","  sample_idx1 = (open_idx1 < sample_len) == plot_is  # in / out sample plot 여부\n","  sample_open_idx1 = open_idx1[sample_idx1]  \n","  sample_idx2 = (open_idx2 < sample_len) == plot_is  # in / out sample plot 여부\n","\n","  # ------------ open_info_list 기준 = p1 ------------ #\n","  sample_open_info_df1, sample_open_info_df2 = [df_[idx_] for df_, idx_ in zip(open_info_df_list, [sample_idx1, sample_idx2])]\n","  open_info1 = [sample_open_info_df1[col_].to_numpy() for col_ in sample_open_info_df1.columns]\n","\n","  if config_list[0].tr_set.check_hlm in [0, 1]:   # 여기서 open_info 자동화하더라도, utils info 는 직접 실행해주어야함\n","    sample_open_idx2 = sample_open_idx1\n","    open_info2 = open_info1\n","  else:\n","    sample_open_idx2 = open_idx2[sample_idx2]\n","    open_info2 = [sample_open_info_df2[col_].to_numpy() for col_ in sample_open_info_df2.columns]\n","\n","  # ------------ get paired_res ------------ #\n","  start_0 = time.time()\n","  paired_res = en_ex_pairing_v9_5(res_df, [sample_open_idx1, sample_open_idx2], [open_info1, open_info2], ohlc_list, config_list, np_timeidx, funcs, show_detail)\n","  # valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr = paired_res\n","  print(\"en_ex_pairing elapsed time :\", time.time() - start_0)  #  0.37 --> 0.3660471439361572 --> 0.21(lesser if)\n","\n","  # ------------ idep_plot ------------ #\n","  start_0 = time.time()\n","  high, low = ohlc_list[1:3]\n","  res = idep_plot_v16_2(res_df, len_df, config_list[0], high, low, sample_open_info_df1, paired_res, inversion=inversion, sample_ratio=1 - test_ratio, signi=signi)\n","  print(\"idep_plot elapsed time :\", time.time() - start_0)   # 1.40452 (v6) 1.4311 (v5)\n","\n","  return res"]},{"cell_type":"code","source":["def plot_info_v9(gs, gs_idx, len_df, sample_len, tr, hhm, p2_hhm, out_hhm, mean_low, hlm, bars_in, net_p1_frq, pr, total_pr, cum_pr, liqd, leverage, title_position, fontsize):\n","  try:\n","    plt.subplot(gs[gs_idx])\n","    idep_res_obj = get_res_info_nb_v2(sample_len, pr, total_pr, cum_pr, liqd)\n","    plt.plot(cum_pr)\n","    plt.plot(idep_res_obj[-1], color='gold')\n","    if sample_len is not None:\n","      plt.axvline(sample_len, alpha=1., linestyle='--', color='#ffeb3b')\n","    plt.xlim(0, len_df)\n","\n","    title_str = \"tr : {:.3f}\\n tpbox_hhm : {:.3f}\\n tpbox_p2exec_hhm : {:.3f}\\n outbox_hhm : {:.3f}\\n tpbox_mean_low : {:.3f}\\n hlm : {:.3f}\\n bars_in : {:.3f}\\n net_p1_frq : {}\\n frq : {}\\n dpf : {:.3f}\\n wr : {:.3f}\\n sr : {:.3f}\\n acc_pr : {:.3f}\\n sum_pr : {:.3f}\\n\" +\\\n","              \"min_pr : {:.3f}\\n liqd : {:.3f}\\n acc_mdd : -{:.3f}\\n sum_mdd : -{:.3f}\\n leverage {:.3f}\"\n","    plt.title(title_str.format(tr, hhm, p2_hhm, out_hhm, mean_low, hlm, bars_in, net_p1_frq, *idep_res_obj[:-1], leverage), position=title_position, fontsize=fontsize)\n","  except Exception as e:\n","    print(\"error in plot_info :\", e)\n","\n","  return gs_idx + 1"],"metadata":{"id":"8hdpN7S8JJF-"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xafHpMLwESKf"},"outputs":[],"source":["def idep_plot_v16_2(res_df, len_df, config, high, low, open_info_df1, paired_res, inversion=False, sample_ratio=0.7, title_position=(0.5, 0.5),\n","                  fontsize=15, signi=False):  # open_idx, side_arr\n","    if not signi:\n","        plt.style.use(['dark_background', 'fast'])\n","        plt.figure(figsize=(24, 8))\n","        gs = gridspec.GridSpec(nrows=2,  # row 몇 개\n","                               ncols=3,  # col 몇 개\n","                               height_ratios=[10, 1]\n","                               # height_ratios=[10, 10, 1]\n","                               )\n","    gs_idx = 0\n","    # plt.suptitle(key)\n","\n","    p_ranges, p_qty_ratio = literal_eval(config.tp_set.p_ranges), literal_eval(config.tp_set.p_qty_ratio)\n","    assert np.sum(p_qty_ratio) == 1.0\n","    assert len(p_ranges) == len(p_qty_ratio)\n","\n","    if sample_ratio is not None:\n","        sample_len = int(len_df * sample_ratio)\n","    else:\n","        sample_len = len_df\n","\n","    # ------ short & long data preparation ------ #\n","    # start_0 = time.time()\n","\n","    net_p1_idx_arr, p1_idx_arr, p2_idx_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr, tr_arr = paired_res\n","    assert len(p1_idx_arr) != 0, \"assert len(p1_idx_arr) != 0\"\n","\n","    short_net_p1_idx_arr = net_p1_idx_arr[np.where(open_info_df1.side.loc[net_p1_idx_arr] == OrderSide.SELL)[0]]\n","    long_net_p1_idx_arr = net_p1_idx_arr[np.where(open_info_df1.side.loc[net_p1_idx_arr] == OrderSide.BUY)[0]]\n","\n","    short_net_p1_frq = len(short_net_p1_idx_arr)\n","    long_net_p1_frq = len(long_net_p1_idx_arr)\n","    # print(\"len(short_net_p1_true_bias_bool) :\", len(short_net_p1_idx_arr))\n","    # print(\"len(long_net_p1_true_bias_bool) :\", len(long_net_p1_idx_arr))\n","\n","    short_p1_openi_idx = np.where(open_info_df1.side.loc[p1_idx_arr] == OrderSide.SELL)[0]  # p1_idx_arr 에 대한 idx, # side_arr,\n","    long_p1_openi_idx = np.where(open_info_df1.side.loc[p1_idx_arr] == OrderSide.BUY)[0]\n","\n","    # p1_idx = open_idx[p1_openi_arr].reshape(-1, 1)   # != p1_idx_arr, p1_openi_arr 은 exit_done 기준임\n","\n","    np_obj = np.hstack((pair_price_arr, pair_idx_arr, p1_idx_arr.reshape(-1, 1)))  # p1_idx_arr is 1d, need to be changed to 2d (for stacking)\n","    short_obj = np_obj[short_p1_openi_idx]\n","    long_obj = np_obj[long_p1_openi_idx]\n","    both_obj = np.vstack((short_obj, long_obj))\n","    # print(\"short_obj.shape :\", short_obj.shape)\n","    # print(\"long_obj.shape :\", long_obj.shape)\n","\n","    short_obj, long_obj, both_obj = [np.split(obj_, 5, axis=1) for obj_ in [short_obj, long_obj, both_obj]]\n","\n","    short_p2_idx_arr, long_p2_idx_arr = [p2_idx_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_lvrg_arr, long_lvrg_arr = [lvrg_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_fee_arr, long_fee_arr = [fee_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_tpout_arr, long_tpout_arr = [tpout_arr[openi_idx_] for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    # short_bias_arr, long_bias_arr = [bias_arr[openi_idx_] for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_tr_arr, long_tr_arr = [tr_arr[openi_idx_] for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    # print(\"long_bias_arr.shape :\", long_bias_arr.shape)\n","    # print(\"short / long arr setting elapsed time :\", time.time() - start_0)\n","\n","    # start_0 = time.time()\n","\n","    short_tpbox_hhm, long_tpbox_hhm, short_tpbox_p2exec_hhm, long_tpbox_p2exec_hhm, short_outbox_hhm, long_outbox_hhm, \\\n","          short_net_p1_bias_tick, long_net_p1_bias_tick, short_p2exec_p1_bias_tick, long_p2exec_p1_bias_tick, short_p2_true_bias_bool, long_p2_true_bias_bool, \\\n","          short_tp_1, short_tp_0, long_tp_1, long_tp_0, short_out_1, short_out_0, long_out_1, long_out_0, short_ep2_0, long_ep2_0 = \\\n","      get_wave_bias_v6(res_df, config, high, low, len_df, short_net_p1_idx_arr, long_net_p1_idx_arr, short_p2_idx_arr, long_p2_idx_arr, short_obj, long_obj)\n","\n","    # print(\"get_wave_bias elapsed time :\", time.time() - start_0)\n","    # print(\"short_net_p1_bias_tick, long_net_p1_bias_tick, short_p2exec_p1_bias_tick, long_p2exec_p1_bias_tick :\", short_net_p1_bias_tick, long_net_p1_bias_tick, short_p2exec_p1_bias_tick, long_p2exec_p1_bias_tick)\n","\n","    len_short, len_long = len(short_p1_openi_idx), len(long_p1_openi_idx)\n","\n","    # ------ plot_data ------ #\n","    try:\n","        # start_0 = time.time()\n","        if len_short == 0:\n","            short_pr = []\n","            gs_idx += 1\n","        else:\n","            short_tr = short_tr_arr.mean()\n","            short_pr, short_liqd = get_pr_v4(OrderSide.SELL, high, low, short_obj, short_tpout_arr, short_lvrg_arr, short_fee_arr, p_ranges,\n","                                             p_qty_ratio, inversion)\n","            short_total_pr = to_total_pr(len_df, short_pr, short_obj[-2])\n","            short_cum_pr = np.cumprod(short_total_pr)\n","            short_hlm = hlm(short_pr, short_p2_true_bias_bool)\n","            short_trade_ticks = np.mean(short_obj[-2] - short_obj[-1])\n","            if signi:\n","                short_idep_res_obj = (short_tpbox_p2exec_hhm, short_hlm) + get_res_info_nb_v2(sample_len, short_pr, short_total_pr, short_cum_pr, short_liqd)\n","            else:\n","                gs_idx = plot_info_v8(gs, gs_idx, len_df, sample_len, short_tr, short_tpbox_hhm, short_tpbox_p2exec_hhm, short_outbox_hhm, short_hlm, short_trade_ticks, short_net_p1_frq, short_pr, short_total_pr,\n","                                      short_cum_pr, short_liqd, short_lvrg_arr.mean(), title_position, fontsize)\n","        # print(\"short plot_data elapsed time :\", time.time() - start_0)\n","\n","    except Exception as e:\n","        gs_idx += 1\n","        print(\"error in short plot_data :\", e)\n","\n","    try:\n","        # start_0 = time.time()\n","        if len_long == 0:\n","            long_pr = []\n","            gs_idx += 1\n","        else:\n","            long_tr = long_tr_arr.mean()\n","            long_pr, long_liqd = get_pr_v4(OrderSide.BUY, high, low, long_obj, long_tpout_arr, long_lvrg_arr, long_fee_arr, p_ranges, p_qty_ratio,\n","                                           inversion)\n","            long_total_pr = to_total_pr(len_df, long_pr, long_obj[-2])\n","            long_cum_pr = np.cumprod(long_total_pr)\n","            # long_hhm = long_net_p1_hhm\n","            long_hlm = hlm(long_pr, long_p2_true_bias_bool)\n","            long_trade_ticks = np.mean(long_obj[-2] - long_obj[-1])\n","            if signi:\n","                long_idep_res_obj = (long_tpbox_p2exec_hhm, long_hlm) + get_res_info_nb_v2(sample_len, long_pr, long_total_pr, long_cum_pr, long_liqd)\n","            else:\n","                gs_idx = plot_info_v8(gs, gs_idx, len_df, sample_len, long_tr, long_tpbox_hhm, long_tpbox_p2exec_hhm, long_outbox_hhm, long_hlm, long_trade_ticks, long_net_p1_frq, long_pr, long_total_pr,\n","                                      long_cum_pr, long_liqd, long_lvrg_arr.mean(), title_position, fontsize)\n","        # print(\"long plot_data elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","        gs_idx += 1\n","        print(\"error in long plot_data :\", e)\n","\n","    try:\n","        # start_0 = time.time()\n","        if len_short * len_long == 0:\n","            both_pr = []\n","            gs_idx += 1\n","        else:\n","            both_tr = (short_tr + long_tr) / 2\n","            both_pr = np.vstack((short_pr, long_pr))  # for 2d arr, obj 를 1d 로 만들지 않는 이상, pr 은 2d 유지될 것\n","            both_total_pr = to_total_pr(len_df, both_pr, both_obj[-2])\n","            both_cum_pr = np.cumprod(both_total_pr)\n","            both_liqd = min(short_liqd, long_liqd)\n","            both_p2_true_bias_bool = np.hstack((short_p2_true_bias_bool, long_p2_true_bias_bool))  # hstack for 1d arr, vstack for 2d arr\n","            both_tpbox_hhm = (short_tpbox_hhm + long_tpbox_hhm) / 2\n","            both_tpbox_p2exec_hhm, both_hlm = (short_tpbox_p2exec_hhm + long_tpbox_p2exec_hhm) / 2, (short_hlm + long_hlm) / 2\n","            both_outbox_hhm = (short_outbox_hhm + long_outbox_hhm) / 2\n","            both_trade_ticks = np.mean(both_obj[-2] - both_obj[-1])\n","            both_net_p1_frq = short_net_p1_frq + long_net_p1_frq\n","            if signi:\n","                both_idep_res_obj = (both_tpbox_p2exec_hhm, both_hlm) + get_res_info_nb_v2(sample_len, both_pr, both_total_pr, both_cum_pr, both_liqd)\n","            else:\n","                gs_idx = plot_info_v8(gs, gs_idx, len_df, sample_len, both_tr, both_tpbox_hhm, both_tpbox_p2exec_hhm, both_outbox_hhm, both_hlm, both_trade_ticks, both_net_p1_frq, both_pr, both_total_pr,\n","                                      both_cum_pr, both_liqd, lvrg_arr.mean(), title_position, fontsize)\n","        # print(\"both plot_data elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","        gs_idx += 1\n","        print(\"error in both plot_data :\", e)\n","\n","    if not signi:\n","        if len_short * len_long > 0:\n","            for obj, bias_arr, cum_pr in zip([short_obj, long_obj, both_obj], [short_p2_true_bias_bool, long_p2_true_bias_bool, both_p2_true_bias_bool],\n","                                             [short_cum_pr, long_cum_pr, both_cum_pr]):\n","                try:\n","                    # start_0 = time.time()\n","                    gs_idx = frq_dev_plot_v4(gs, gs_idx, len_df, sample_len, obj[-2], bias_arr, cum_pr[-1], fontsize)\n","                    # print(\"frq_dev_plot elapsed time :\", time.time() - start_0)\n","                except Exception as e:\n","                    gs_idx += 1\n","                    print(\"error in frq_dev_plot :\", e)\n","            plt.show()\n","            plt.close()\n","\n","        return short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_tr_arr, short_p2_true_bias_bool, short_net_p1_bias_tick, short_p2exec_p1_bias_tick, short_net_p1_idx_arr, short_p2_idx_arr, short_tp_1, short_tp_0, short_out_1, short_out_0, short_ep2_0, \\\n","               long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_tr_arr, long_p2_true_bias_bool, long_net_p1_bias_tick, long_p2exec_p1_bias_tick, long_net_p1_idx_arr, long_p2_idx_arr, long_tp_1, long_tp_0, long_out_1, long_out_0, long_ep2_0  # long_net_p1_idx_arr long_p2_idx_arr\n","\n","    else:\n","        return [short_idep_res_obj[:-1], long_idep_res_obj[:-1], both_idep_res_obj[:-1]]"]},{"cell_type":"markdown","metadata":{"id":"EFyWTuscH8VH"},"source":["#### get paired_res function"]},{"cell_type":"code","source":["def en_ex_pairing_v9_5(res_df, open_idx_list, open_info_list, ohlc_list, config_list, np_timeidx, funcs, show_detail=False):  # 이미 충분히 줄여놓은 idx 임\n","\n","    open_info1, open_info2 = open_info_list\n","    side_arr1, _, _, id_idx_arr1 = open_info1\n","    side_arr2, _, _, _ = open_info2\n","\n","    expiry_p1, expiry_p2, lvrg_set = funcs\n","\n","    net_p1_idx_list, p1_idx_list, p2_idx_list, pair_idx_list, pair_price_list, lvrg_list, fee_list, tpout_list, tr_list = [[] for li in range(9)]\n","    len_df = len(res_df)\n","\n","    open, high, low, close = ohlc_list\n","    \n","    open_idx1, open_idx2 = open_idx_list\n","    len_open_idx1 = len(open_idx1)\n","    len_open_idx2 = len(open_idx2)\n","    i, open_i1, open_i2 = 0, -1, -1  # i for total_res_df indexing\n","\n","    while 1:   # for p1's loop\n","\n","        # Todo, \n","        #   1. (갱신) p1's open_i + 1 과 op_idx 를 꺼내오는 건, eik1 또는 tp 체결의 경우만 해당됨, \n","        #   2. out 의 경우 p2's op_idx 기준으로 retry 필요\n","        #     a. 또한, p2's op_idx > p1's op_idx\n","\n","        # ============ get p1_info ============ #\n","        # if eik1 or tp_done or first loop:\n","        open_i1 += 1  # 확인 끝났으면 조기 이탈(+1), 다음 open_idx 조사 진행\n","        if open_i1 >= len_open_idx1:\n","            break\n","\n","        if show_detail:\n","            print(\"open_i1 :\", open_i1, side_arr1[open_i1])\n","\n","        op_idx1 = open_idx1[open_i1]  # open_i1 는 i 와 별개로 운영\n","        if op_idx1 < i:  # i = 이전 거래 끝난후의 res_df index - \"거래 종료후 거래 시작\", '<' : 거래 종료시점 진입 가능하다는 의미\n","            continue\n","\n","        # ------ set loop index i ------ #\n","        i = op_idx1      # + 1 --> op_idx1 = op_idx2 가능함 # open_signal 이 close_bar.shift(1) 이라고 가정하고 다음 bar 부터 체결확인한다는 의미\n","        if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","            break        \n","\n","        # ------ dynamic arr info by ID ------ #\n","        #     1. 해당 id 로 config 재할당해야함\n","        #       a. use open_i1\n","        open_side = side_arr1[open_i1]\n","        id_idx = id_idx_arr1.astype(int)[open_i1]\n","        config = config_list[id_idx]\n","        selection_id = config.selection_id\n","        check_hlm = config.tr_set.check_hlm   \n","\n","        # check_net_hhm = 1 if (config.tr_set.wave_itv1 == config.tr_set.wave_itv2) and (config.tr_set.wave_period1 == config.tr_set.wave_period2) else 0\n","\n","        side_pos = 'short' if open_side == OrderSide.SELL else 'long'   \n","        if show_detail:\n","          print(\"============ op_idx1 : {} {} ============\".format(op_idx1, open_side))\n","     \n","        # if show_detail:\n","        #   print(\"check_hlm :\", check_hlm)\n","\n","        # ------ load tr_data ------ #\n","        tp_arr = res_df['{}_tp_{}'.format(side_pos, selection_id)].to_numpy()\n","        ep1_arr = res_df['{}_ep1_{}'.format(side_pos, selection_id)].to_numpy()\n","        ep2_arr = res_df['{}_ep2_{}'.format(side_pos, selection_id)].to_numpy()\n","        out_arr = res_df['{}_out_{}'.format(side_pos, selection_id)].to_numpy()\n","\n","        tr_arr = res_df['{}_tr_{}'.format(side_pos, selection_id)].to_numpy()  # just for p1_hhm\n","\n","        tp_1_ = res_df['{}_tp_1_{}'.format(side_pos, selection_id)].to_numpy()[op_idx1]  # for p2_box location & p1's exipiry\n","        tp_0_ = res_df['{}_tp_0_{}'.format(side_pos, selection_id)].to_numpy()[op_idx1]\n","        tp_gap_ = res_df['{}_tp_gap_{}'.format(side_pos, selection_id)].to_numpy()[op_idx1]    \n","\n","        # if not check_net_hhm:  # this phase exist for p1 entry (net hhm sync.) in p2_platform\n","        exec_j, ep_j, tp_j, out_j, entry_done, en_p, fee = check_entry_v6(res_df, config, config.ep_set.entry_type, op_idx1, tp_1_, tp_gap_, len_df, open_side,\n","                                                                                [*ohlc_list, ep1_arr], expiry_p2)        \n","        i = exec_j  # = entry_loop 를 돌고 나온 e_j\n","        if not entry_done:\n","            if show_detail:\n","              print(\"p1's expiry by expiry_p2 function in p1's loop : continue\")\n","            continue   \n","        # else:        \n","        #   tp_j = op_idx1\n","\n","        prev_open_i2 = open_i2\n","        net_p1_idx_list.append(op_idx1)\n","        # if check_hlm in [0, 1]:\n","        #   i = op_idx1  # allow op_idx2 = op_idx1\n","        allow_exit = 1\n","        # ============ entry loop ============ #\n","        while 1:  # for p2's loop (allow retry)\n","\n","          # ============ get p2_info ============ #\n","          if check_hlm in [1, 2]:\n","            open_i2 += 1  # 확인 끝났으면 조기 이탈(+1), 다음 open_idx 조사 진행\n","            if open_i2 >= len_open_idx2:  # open_i2 소진\n","                break\n","\n","            if show_detail:\n","              print(\"open_i2 :\", open_i2, side_arr2[open_i2])\n","\n","            # ------ check side sync. ------ #\n","            if open_side != side_arr2[open_i2]:\n","              continue\n","\n","            # ------ assert, op_idx2 >= exec_j ------ #\n","            op_idx2 = open_idx2[open_i2]  # open_i2 는 i 와 별개로 운영\n","            if check_hlm == 1 and allow_exit:\n","              if op_idx2 < op_idx1:\n","                continue\n","            else:\n","              if op_idx2 < i:   # p1 execution 이후의 i 를 허용 (old, 이곳 i = op_idx1 + 1 or p2's exec_j or exit_loop's i + 1)\n","                continue\n","            \n","            if check_hlm == 2:\n","              i = op_idx2 + 1  # open_signal 이 close_bar.shift(1) 이라고 가정하고 다음 bar 부터 체결확인한다는 의미\n","              if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","                  break\n","\n","            if show_detail:\n","              print(\"op_idx1, op_idx2 :\", op_idx1, op_idx2, side_arr2[open_i2])\n","              \n","          else:\n","            op_idx2 = op_idx1\n","\n","          tp_ = tp_arr[op_idx1]          \n","          ep2_ = ep2_arr[op_idx2]\n","          out_ = out_arr[op_idx2]\n","\n","          out_1_ = res_df['{}_out_1_{}'.format(side_pos, selection_id)].to_numpy()[op_idx2]\n","          out_0_ = res_df['{}_out_0_{}'.format(side_pos, selection_id)].to_numpy()[op_idx2]\n","          out_gap_ = res_df['{}_out_gap_{}'.format(side_pos, selection_id)].to_numpy()[op_idx2]  \n","\n","          # ------ const. for p2_wave ------ #\n","          wave_itv1 = config.tr_set.wave_itv1\n","          wave_period1 = config.tr_set.wave_period1\n","          wave_itv2 = config.tr_set.wave_itv2\n","          wave_period2 = config.tr_set.wave_period2\n","\n","          if check_hlm in [1, 2]:\n","            # ------ check p1's expiry - Todo, priority ------ # - p2_box 생성 이전의 hl_survey\n","            # 1. op_idx1 ~ op_idx2 까지의 hl_check \n","            # if check_hlm:  # p1_hlm, p2_hlm --> Todo, 이거를 왜 p1_hlm 에도 적용했는지 잘 모르겠음\n","            if op_idx1 < op_idx2:\n","              expire, touch_idx = expiry_p1(res_df, config, op_idx1, op_idx2, tp_1_, tp_0_, tp_gap_, ohlc_list[1:3], open_side)\n","              if expire:   # p1's expiry\n","                  if show_detail:\n","                    print(\"expiry_p1, touch_idx = {} : break\".format(touch_idx))\n","                  i = touch_idx  #  + 1  --> 이거 아닌것 같음 # op_idx1 과 op_idx2 사이의 op_idx1' 을 살리기 위함, 즉 바로 다음 op_idx1 로 회귀 (건너뛰지 않고)\n","                  open_i2 = prev_open_i2\n","                  break   # change op_idx1\n","\n","            if check_hlm == 2:\n","              # ------ p2 point_validation - vectorization unavailable ------ # p1_loop 로 return 되는 정확한 i 를 반환하기 위해서 expiry_p1 에 순서 양보  # Todo, 새로운 tp, ep, out 에 대한 처리 필요 (p1_hlm 사용시)\n","              if open_side == OrderSide.SELL:\n","                # --- p2_wave validation --- #\n","                # wave_co_post_idx = res_df['wave_co_post_idx_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()[op_idx2]\n","                # if not (op_idx1 < wave_co_post_idx):\n","                #   if show_detail:\n","                #     print(\"p2_wave validation : continue\")\n","                #   continue  # change op_idx2\n","\n","                # --- p2_wave high validation --- #\n","                # wave_high_fill1_ = res_df['wave_high_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()[op_idx1]\n","                # wave_high_fill2_ = res_df['wave_high_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()[op_idx2]\n","                # if not (wave_high_fill1_ >= wave_high_fill2_):\n","                #   if show_detail:\n","                #     print(\"p2_wave high validation : continue\")\n","                #   continue  # change op_idx2\n","                  \n","                if not (tp_ < ep2_):  # tr_set validation & reject hl_out open_exec.\n","                  break  # change op_idx1\n","                elif not (ep2_ < out_ and close[op_idx2] < out_):\n","                  if show_detail:\n","                    print(\"point validation : continue\")\n","                  continue  # change op_idx2\n","              else:\n","                # --- p2_wave validation --- #\n","                # wave_cu_post_idx = res_df['wave_cu_post_idx_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()[op_idx2]\n","                # if not (op_idx1 < wave_cu_post_idx):\n","                #   if show_detail:\n","                #     print(\"p2_wave validation : continue\")\n","                #   continue  # change op_idx2\n","                \n","                # --- p2_wave low validation --- #\n","                # wave_low_fill1_ = res_df['wave_low_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()[op_idx1]\n","                # wave_low_fill2_ = res_df['wave_low_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()[op_idx2]\n","                # if not (wave_low_fill1_ <= wave_low_fill2_):\n","                #   if show_detail:\n","                #     print(\"p2_wave low validation : continue\")\n","                #   continue  # change op_idx2\n","\n","                if not (tp_ > ep2_):              \n","                  break\n","                elif not (ep2_ > out_ and close[op_idx2] > out_):\n","                  if show_detail:\n","                    print(\"point validation : continue\")\n","                  continue\n","\n","              # ------ p2_box location ------ #\n","              if open_side == OrderSide.SELL:\n","                if not ((tp_1_ + tp_gap_ * config.tr_set.p2_box_k1 <= out_1_) and (out_0_ <= tp_0_ - tp_gap_ * config.tr_set.p2_box_k2)):  # tp1, tp0 에 닿으면 expiry\n","                # if not ((tp_1_ + tp_gap_ * config.tr_set.p2_box_k1 >= out_1_) and (out_0_ <= tp_0_ - tp_gap_ * config.tr_set.p2_box_k2)):  # tp1, tp0 에 닿으면 expiry\n","                  if show_detail:\n","                      print(\"p2_box rejection : continue\")\n","                  continue\n","                else:                \n","                  # ------ p1p2_low ------ #\n","                  if not high[op_idx1:op_idx2 + 1].max() < tp_0_ - tp_gap_ * config.tr_set.p1p2_low:\n","                    if show_detail:\n","                      print(\"p1p2_low rejection : continue\")\n","                    continue\n","              else:\n","                if not ((tp_1_ - tp_gap_ * config.tr_set.p2_box_k1 >= out_1_) and (out_0_ >= tp_0_ + tp_gap_ * config.tr_set.p2_box_k2)):\n","                # if not ((tp_1_ - tp_gap_ * config.tr_set.p2_box_k1 <= out_1_) and (out_0_ >= tp_0_ + tp_gap_ * config.tr_set.p2_box_k2)):\n","                  if show_detail:\n","                      print(\"p2_box rejection : continue\")\n","                  continue\n","                else:\n","                  # ------ p1p2_low ------ #\n","                  if not low[op_idx1:op_idx2 + 1].min() > tp_0_ + tp_gap_ * config.tr_set.p1p2_low:\n","                    if show_detail:\n","                      print(\"p1p2_low rejection : continue\")\n","                    continue\n","\n","              # ------ check p2's expiry ------ # - 현재, op_idx2 기준의 ep2_arr 을 사용 중임.\n","              # exec_j, ep_j, _, out_j, entry_done, en_p, fee = check_entry_v6(res_df, config, config.ep_set.point2.entry_type, op_idx2, tp_1_, tp_gap_, len_df, open_side,\n","              #                                                                         [*ohlc_list, ep2_arr], expiry_p2)   # Todo, tp_1 & tp_gap 사용이 맞을 것으로 봄                                                                                      \n","              exec_j, ep_j, _, out_j, entry_done, en_p, fee = check_entry_v6(res_df, config, config.ep_set.point2.entry_type, op_idx2, out_1_, out_gap_, len_df, open_side,\n","                                                                                      [*ohlc_list, ep2_arr], expiry_p2)   # Todo, tp_1 & tp_gap 사용이 맞을 것으로 봄\n","              i = exec_j  # = entry_loop 를 돌고 나온 e_j\n","              if not entry_done:   # p2's expiry\n","                  if show_detail:\n","                      print(\"expiry_p2, i = {} : continue\".format(i))\n","                  continue  # change op_idx2            \n","              \n","              # ------ devectorized tr_calc ------ # - en_p 에 대해 하는게 맞을 것으로봄\n","              if open_side == OrderSide.SELL:\n","                tr_ = abs((en_p / tp_ - config.trader_set.limit_fee - 1) / (en_p / out_ - config.trader_set.market_fee - 1))\n","              else:\n","                tr_ = abs((tp_ / en_p - config.trader_set.limit_fee - 1) / (out_ / en_p - config.trader_set.market_fee - 1))              \n","\n","              # ------ tr_threshold ------ #\n","              if config.loc_set.point2.short_tr_thresh != \"None\":\n","                if open_side == OrderSide.SELL:\n","                  if tr_ < config.loc_set.point2.short_tr_thresh:\n","                    if show_detail:\n","                      print(\"tr_threshold : continue\")\n","                    continue\n","                else:\n","                  if tr_ < config.loc_set.point2.long_tr_thresh:\n","                    if show_detail:\n","                      print(\"tr_threshold : continue\")\n","                    continue\n","                \n","          if not allow_exit:  # p1_hlm 의 경우, 한번 out 되면 price 가 wave_range 에 닿기전까지 retrade 를 허용하지 않는다. (expiry_p1 을 이용해 op_idx1 을 변경할 것)  \n","            if show_detail:\n","              print(\"allow_exit = {} : continue\".format(allow_exit))\n","            continue\n","\n","          if check_hlm in [0, 1]:\n","            tr_ = tr_arr[op_idx1]\n","\n","          # ------ leverage ------ #\n","          # out = out_arr[out_j]  # lvrg_set use out on out_j (out_j shoud be based on p2)\n","          leverage = lvrg_set(res_df, config, open_side, en_p, out_, fee)  # res_df 변수 사용됨 - 주석 처리 된 상태일뿐\n","          if leverage is None:\n","              if show_detail:\n","                    print(\"leverage is None : continue\")\n","              if check_hlm:\n","                continue  # change op_idx2\n","              else:\n","                break   # change op_idx1\n","\n","          exit_done, cross_on = 0, 0\n","          # ------ check tpout_onexec ------ #\n","          # if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","          if config.ep_set.entry_type == \"LIMIT\":\n","              if config.tp_set.tp_onexec:  # dynamic 은 tp_onexec 사용하는 의미가 없음\n","                  tp_j = exec_j\n","              if config.out_set.out_onexec:  # dynamic 은 out_onexec 사용하는 의미가 없음\n","                  out_j = exec_j\n","\n","          # ============ exit loop ============ #\n","          while 1:\n","            if not config.tp_set.static_tp:  # 앞으로 왠만하면 static 만 사용할 예정\n","                tp_j = i\n","            if not config.out_set.static_out:\n","                out_j = i\n","\n","            # ------------ out ------------ #  # out 우선 (보수적 검증)\n","            # ------ signal_out ------ #\n","            if not exit_done:\n","                exit_done, cross_on, ex_p, fee = check_signal_out_v3(res_df, config, open_i2, i, len_df, fee, open_side, cross_on, exit_done, [*ohlc_list, np_timeidx])\n","            # ------ hl_out ------ #\n","            if config.out_set.hl_out:\n","                if not exit_done:  # and i != len_df - 1:\n","                    exit_done, ex_p, fee = check_hl_out_v2(config, i, out_j, len_df, fee, open_side, exit_done, [*ohlc_list, out_arr])\n","\n","            # ------------ tp ------------ #\n","            if not config.tp_set.non_tp and i != exec_j:\n","              if not exit_done:\n","                exit_done, ex_p, fee = check_limit_tp_exec(res_df, config, open_i2, i, tp_j, len_df, fee, open_side, exit_done,\n","                                                          [*ohlc_list, [tp_arr]])  # 여기서는 j -> i 로 변경해야함\n","                # if config.tp_set.tp_type in ['LIMIT']:  # 'BOTH' -> 앞으로는, LIMIT 밖에 없을거라 주석처리함\n","                # if not exit_done and config.tp_set.tp_type in ['MARKET', 'BOTH']:\n","\n","            if exit_done:  # 이 phase 는 exit_phase 뒤에도 있어야할 것 - entry_done var. 사용은 안하겠지만\n","                # ------ append dynamic vars. ------ #\n","                p1_idx_list.append(op_idx1)  # side, zone, start_ver arr 모두 openi_list 로 접근하기 위해 open_i 를 담음\n","                p2_idx_list.append(op_idx2)\n","                pair_idx_list.append([exec_j, i])  # entry & exit (체결 기준임)\n","                pair_price_list.append([en_p, ex_p])\n","                lvrg_list.append(leverage)\n","                fee_list.append(fee)\n","                tpout_list.append([tp_arr[tp_j], out_arr[out_j]])  # for tpout_line plot_check\n","                tr_list.append(tr_)   # Todo, tr vectorize 불가함, 직접 구해주어야할 건데.. (오래걸리지 않을까 --> tr_set 데이터만 모아서 vecto 계산이 나을 것)\n","\n","                # open_i += 1  # 다음 open_idx 조사 진행\n","                break\n","\n","            # 1. 아래있으면, 체결 기준부터 tp, out 허용 -> tp 가 entry_idx 에 체결되는게 다소 염려되기는 함, 일단 진행 (그런 case 가 많지 않았으므로)\n","            # 2. 위에있으면, entry 다음 tick 부터 exit 허용\n","            i += 1\n","            if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","                break\n","          \n","          if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","              break\n","\n","          if exit_done == 1:  # tp_done 은 check_hlm 여부와 무관하게 op_idx1 을 변경함\n","            if show_detail:\n","                    print(\"exit_done = {}, i = {} : break\".format(exit_done, i))\n","            break   # change op_idx1\n","          else:  # exit_done -> -1 or 0 (0 means end of df) \n","            if check_hlm in [1, 2]:\n","              if check_hlm == 1:   # exit only once in p1_hlm mode\n","                allow_exit = 0\n","              if show_detail:\n","                      print(\"exit_done = {}, i = {} : continue\".format(exit_done, i))\n","              continue  # change op_idx2\n","            else:\n","              if show_detail:\n","                      print(\"exit_done = {}, i = {} : break\".format(exit_done, i))\n","              break   # change op_idx1    \n","\n","        # if op_idx1 >= 16355:\n","        #   break\n","\n","        if i >= len_df:  # or open_i >= len_open_idx:  # res_df 의 last_index 까지 돌아야함\n","            break\n","        else:\n","            continue\n","\n","    return np.array(net_p1_idx_list), np.array(p1_idx_list), np.array(p2_idx_list), np.array(pair_idx_list), np.array(pair_price_list), np.array(lvrg_list), np.array(\n","        fee_list), np.array(tpout_list), np.array(tr_list)"],"metadata":{"id":"dJB5VtXMM8D8","executionInfo":{"status":"ok","timestamp":1663112650361,"user_tz":-540,"elapsed":360,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"execution_count":28,"outputs":[]},{"cell_type":"code","source":["def en_ex_pairing_v9_5(res_df, open_idx_list, open_info_list, ohlc_list, config_list, np_timeidx, funcs, show_detail=False):  # 이미 충분히 줄여놓은 idx 임\n","\n","    open_info1, open_info2 = open_info_list\n","    side_arr1, _, _, id_idx_arr1 = open_info1\n","    side_arr2, _, _, _ = open_info2\n","\n","    expiry_p1, expiry_p2, lvrg_set = funcs\n","\n","    net_p1_idx_list, p1_idx_list, p2_idx_list, pair_idx_list, pair_price_list, lvrg_list, fee_list, tpout_list, tr_list = [[] for li in range(9)]\n","    len_df = len(res_df)\n","\n","    open, high, low, close = ohlc_list\n","    \n","    open_idx1, open_idx2 = open_idx_list\n","    len_open_idx1 = len(open_idx1)\n","    len_open_idx2 = len(open_idx2)\n","    i, open_i1, open_i2 = 0, -1, -1  # i for total_res_df indexing\n","\n","    while 1:   # for p1's loop\n","\n","        # Todo, \n","        #   1. (갱신) p1's open_i + 1 과 op_idx 를 꺼내오는 건, eik1 또는 tp 체결의 경우만 해당됨, \n","        #   2. out 의 경우 p2's op_idx 기준으로 retry 필요\n","        #     a. 또한, p2's op_idx > p1's op_idx\n","\n","        # ============ get p1_info ============ #\n","        # if eik1 or tp_done or first loop:\n","        open_i1 += 1  # 확인 끝났으면 조기 이탈(+1), 다음 open_idx 조사 진행\n","        if open_i1 >= len_open_idx1:\n","            break\n","\n","        if show_detail:\n","            print(\"open_i1 :\", open_i1, side_arr1[open_i1])\n","\n","        op_idx1 = open_idx1[open_i1]  # open_i1 는 i 와 별개로 운영\n","        if op_idx1 < i:  # i = 이전 거래 끝난후의 res_df index - \"거래 종료후 거래 시작\", '<' : 거래 종료시점 진입 가능하다는 의미\n","            continue\n","\n","        # ------ set loop index i ------ #\n","        i = op_idx1      # + 1 --> op_idx1 = op_idx2 가능함 # open_signal 이 close_bar.shift(1) 이라고 가정하고 다음 bar 부터 체결확인한다는 의미\n","        if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","            break        \n","\n","        # ------ dynamic arr info by ID ------ #\n","        #     1. 해당 id 로 config 재할당해야함\n","        #       a. use open_i1\n","        open_side = side_arr1[open_i1]\n","        id_idx = id_idx_arr1.astype(int)[open_i1]\n","        config = config_list[id_idx]\n","        selection_id = config.selection_id\n","        check_hlm = config.tr_set.check_hlm   \n","\n","        # check_net_hhm = 1 if (config.tr_set.wave_itv1 == config.tr_set.wave_itv2) and (config.tr_set.wave_period1 == config.tr_set.wave_period2) else 0\n","\n","        side_pos = 'short' if open_side == OrderSide.SELL else 'long'   \n","        if show_detail:\n","          print(\"============ op_idx1 : {} {} ============\".format(op_idx1, open_side))\n","     \n","        # if show_detail:\n","        #   print(\"check_hlm :\", check_hlm)\n","\n","        # ------ load tr_data ------ #\n","        tp_arr = res_df['{}_tp_{}'.format(side_pos, selection_id)].to_numpy()\n","        ep1_arr = res_df['{}_ep1_{}'.format(side_pos, selection_id)].to_numpy()\n","        ep2_arr = res_df['{}_ep2_{}'.format(side_pos, selection_id)].to_numpy()\n","        out_arr = res_df['{}_out_{}'.format(side_pos, selection_id)].to_numpy()\n","\n","        tr_arr = res_df['{}_tr_{}'.format(side_pos, selection_id)].to_numpy()  # just for p1_hhm\n","\n","        tp_1_ = res_df['{}_tp_1_{}'.format(side_pos, selection_id)].to_numpy()[op_idx1]  # for p2_box location & p1's exipiry\n","        tp_0_ = res_df['{}_tp_0_{}'.format(side_pos, selection_id)].to_numpy()[op_idx1]\n","        tp_gap_ = res_df['{}_tp_gap_{}'.format(side_pos, selection_id)].to_numpy()[op_idx1]    \n","\n","        # if not check_net_hhm:  # this phase exist for p1 entry (net hhm sync.) in p2_platform\n","        exec_j, ep_j, tp_j, out_j, entry_done, en_p, fee = check_entry_v6(res_df, config, config.ep_set.entry_type, op_idx1, tp_1_, tp_gap_, len_df, open_side,\n","                                                                                [*ohlc_list, ep1_arr], expiry_p2)        \n","        i = exec_j  # = entry_loop 를 돌고 나온 e_j\n","        if not entry_done:\n","            if show_detail:\n","              print(\"p1's expiry by expiry_p2 function in p1's loop : continue\")\n","            continue   \n","        # else:        \n","        #   tp_j = op_idx1\n","\n","        prev_open_i2 = open_i2\n","        net_p1_idx_list.append(op_idx1)\n","        # if check_hlm in [0, 1]:\n","        #   i = op_idx1  # allow op_idx2 = op_idx1\n","        allow_exit = 1\n","        # ============ entry loop ============ #\n","        while 1:  # for p2's loop (allow retry)\n","\n","          # ============ get p2_info ============ #\n","          if check_hlm in [1, 2]:\n","            open_i2 += 1  # 확인 끝났으면 조기 이탈(+1), 다음 open_idx 조사 진행\n","            if open_i2 >= len_open_idx2:  # open_i2 소진\n","                break\n","\n","            if show_detail:\n","              print(\"open_i2 :\", open_i2, side_arr2[open_i2])\n","\n","            # ------ check side sync. ------ #\n","            if open_side != side_arr2[open_i2]:\n","              continue\n","\n","            # ------ assert, op_idx2 >= exec_j ------ #\n","            op_idx2 = open_idx2[open_i2]  # open_i2 는 i 와 별개로 운영\n","            if check_hlm == 1 and allow_exit:\n","              if op_idx2 < op_idx1:\n","                continue\n","            else:\n","              if op_idx2 < i:   # p1 execution 이후의 i 를 허용 (old, 이곳 i = op_idx1 + 1 or p2's exec_j or exit_loop's i + 1)\n","                continue\n","            \n","            if check_hlm == 2:\n","              i = op_idx2 + 1  # open_signal 이 close_bar.shift(1) 이라고 가정하고 다음 bar 부터 체결확인한다는 의미\n","              if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","                  break\n","\n","            if show_detail:\n","              print(\"op_idx1, op_idx2 :\", op_idx1, op_idx2, side_arr2[open_i2])\n","              \n","          else:\n","            op_idx2 = op_idx1\n","          \n","          tp_1_ = res_df['{}_tp_1_{}'.format(side_pos, selection_id)].to_numpy()[op_idx2]  # p2's tp_box 를 위한 재정의\n","          tp_0_ = res_df['{}_tp_0_{}'.format(side_pos, selection_id)].to_numpy()[op_idx2]\n","          tp_gap_ = res_df['{}_tp_gap_{}'.format(side_pos, selection_id)].to_numpy()[op_idx2]   \n","\n","          tp_ = tp_arr[op_idx2]          \n","          ep2_ = ep2_arr[op_idx2]\n","          out_ = out_arr[op_idx2]\n","\n","          out_1_ = res_df['{}_out_1_{}'.format(side_pos, selection_id)].to_numpy()[op_idx2]\n","          out_0_ = res_df['{}_out_0_{}'.format(side_pos, selection_id)].to_numpy()[op_idx2]\n","          out_gap_ = res_df['{}_out_gap_{}'.format(side_pos, selection_id)].to_numpy()[op_idx2]  \n","\n","          # ------ const. for p2_wave ------ #\n","          wave_itv1 = config.tr_set.wave_itv1\n","          wave_period1 = config.tr_set.wave_period1\n","          wave_itv2 = config.tr_set.wave_itv2\n","          wave_period2 = config.tr_set.wave_period2\n","\n","          if check_hlm in [1, 2]:\n","            # ------ check p1's expiry - Todo, priority ------ # - p2_box 생성 이전의 hl_survey\n","            # 1. op_idx1 ~ op_idx2 까지의 hl_check \n","            # if check_hlm:  # p1_hlm, p2_hlm --> Todo, 이거를 왜 p1_hlm 에도 적용했는지 잘 모르겠음\n","            # if op_idx1 < op_idx2:\n","            #   expire, touch_idx = expiry_p1(res_df, config, op_idx1, op_idx2, tp_1_, tp_0_, tp_gap_, ohlc_list[1:3], open_side)\n","            #   if expire:   # p1's expiry\n","            #       if show_detail:\n","            #         print(\"expiry_p1, touch_idx = {} : break\".format(touch_idx))\n","            #       i = touch_idx  #  + 1  --> 이거 아닌것 같음 # op_idx1 과 op_idx2 사이의 op_idx1' 을 살리기 위함, 즉 바로 다음 op_idx1 로 회귀 (건너뛰지 않고)\n","            #       open_i2 = prev_open_i2\n","            #       break   # change op_idx1\n","\n","            if check_hlm == 2:\n","              # ------ p2 point_validation - vectorization unavailable ------ # p1_loop 로 return 되는 정확한 i 를 반환하기 위해서 expiry_p1 에 순서 양보  # Todo, 새로운 tp, ep, out 에 대한 처리 필요 (p1_hlm 사용시)\n","              if open_side == OrderSide.SELL:\n","                # --- p2_wave validation --- #\n","                wave_co_post_idx = res_df['wave_co_post_idx_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()[op_idx2]\n","                if not (op_idx1 < wave_co_post_idx):\n","                  if show_detail:\n","                    print(\"p2_wave validation : continue\")\n","                  continue  # change op_idx2\n","\n","                # --- p2_wave high validation --- #\n","                # wave_high_fill1_ = res_df['wave_high_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()[op_idx1]\n","                # wave_high_fill2_ = res_df['wave_high_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()[op_idx2]\n","                # if not (wave_high_fill1_ >= wave_high_fill2_):\n","                #   if show_detail:\n","                #     print(\"p2_wave high validation : continue\")\n","                #   continue  # change op_idx2\n","                  \n","                if not (tp_ < ep2_):  # tr_set validation & reject hl_out open_exec.\n","                  break  # change op_idx1\n","                elif not (ep2_ < out_ and close[op_idx2] < out_):\n","                  if show_detail:\n","                    print(\"point validation : continue\")\n","                  continue  # change op_idx2\n","              else:\n","                # --- p2_wave validation --- #\n","                wave_cu_post_idx = res_df['wave_cu_post_idx_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()[op_idx2]\n","                if not (op_idx1 < wave_cu_post_idx):\n","                  if show_detail:\n","                    print(\"p2_wave validation : continue\")\n","                  continue  # change op_idx2\n","                \n","                # --- p2_wave low validation --- #\n","                # wave_low_fill1_ = res_df['wave_low_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()[op_idx1]\n","                # wave_low_fill2_ = res_df['wave_low_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()[op_idx2]\n","                # if not (wave_low_fill1_ <= wave_low_fill2_):\n","                #   if show_detail:\n","                #     print(\"p2_wave low validation : continue\")\n","                #   continue  # change op_idx2\n","\n","                if not (tp_ > ep2_):              \n","                  break\n","                elif not (ep2_ > out_ and close[op_idx2] > out_):\n","                  if show_detail:\n","                    print(\"point validation : continue\")\n","                  continue\n","\n","              # ------ p2_box location ------ #\n","              # if open_side == OrderSide.SELL:\n","              #   if not ((tp_1_ + tp_gap_ * config.tr_set.p2_box_k1 <= out_1_) and (out_0_ <= tp_0_ - tp_gap_ * config.tr_set.p2_box_k2)):  # tp1, tp0 에 닿으면 expiry\n","              #   # if not ((tp_1_ + tp_gap_ * config.tr_set.p2_box_k1 >= out_1_) and (out_0_ <= tp_0_ - tp_gap_ * config.tr_set.p2_box_k2)):  # tp1, tp0 에 닿으면 expiry\n","              #     if show_detail:\n","              #         print(\"p2_box rejection : continue\")\n","              #     continue\n","              #   else:                \n","              #     # ------ p1p2_low ------ #\n","              #     if not high[op_idx1:op_idx2 + 1].max() < tp_0_ - tp_gap_ * config.tr_set.p1p2_low:\n","              #       if show_detail:\n","              #         print(\"p1p2_low rejection : continue\")\n","              #       continue\n","              # else:\n","              #   if not ((tp_1_ - tp_gap_ * config.tr_set.p2_box_k1 >= out_1_) and (out_0_ >= tp_0_ + tp_gap_ * config.tr_set.p2_box_k2)):\n","              #   # if not ((tp_1_ - tp_gap_ * config.tr_set.p2_box_k1 <= out_1_) and (out_0_ >= tp_0_ + tp_gap_ * config.tr_set.p2_box_k2)):\n","              #     if show_detail:\n","              #         print(\"p2_box rejection : continue\")\n","              #     continue\n","              #   else:\n","              #     # ------ p1p2_low ------ #\n","              #     if not low[op_idx1:op_idx2 + 1].min() > tp_0_ + tp_gap_ * config.tr_set.p1p2_low:\n","              #       if show_detail:\n","              #         print(\"p1p2_low rejection : continue\")\n","              #       continue\n","\n","              # ------ check p2's expiry ------ # - 현재, op_idx2 기준의 ep2_arr 을 사용 중임.\n","              # exec_j, ep_j, _, out_j, entry_done, en_p, fee = check_entry_v6(res_df, config, config.ep_set.point2.entry_type, op_idx2, tp_1_, tp_gap_, len_df, open_side,\n","              #                                                                         [*ohlc_list, ep2_arr], expiry_p2)   # Todo, tp_1 & tp_gap 사용이 맞을 것으로 봄                                                                                      \n","              exec_j, ep_j, _, out_j, entry_done, en_p, fee = check_entry_v6(res_df, config, config.ep_set.point2.entry_type, op_idx2, out_1_, out_gap_, len_df, open_side,\n","                                                                                      [*ohlc_list, ep2_arr], expiry_p2)   # Todo, tp_1 & tp_gap 사용이 맞을 것으로 봄\n","              i = exec_j  # = entry_loop 를 돌고 나온 e_j\n","              if not entry_done:   # p2's expiry\n","                  if show_detail:\n","                      print(\"expiry_p2, i = {} : continue\".format(i))\n","                  continue  # change op_idx2            \n","              \n","              # ------ devectorized tr_calc ------ # - en_p 에 대해 하는게 맞을 것으로봄\n","              if open_side == OrderSide.SELL:\n","                tr_ = abs((en_p / tp_ - config.trader_set.limit_fee - 1) / (en_p / out_ - config.trader_set.market_fee - 1))\n","              else:\n","                tr_ = abs((tp_ / en_p - config.trader_set.limit_fee - 1) / (out_ / en_p - config.trader_set.market_fee - 1))              \n","\n","              # ------ tr_threshold ------ #\n","              if config.loc_set.point2.short_tr_thresh != \"None\":\n","                if open_side == OrderSide.SELL:\n","                  if tr_ < config.loc_set.point2.short_tr_thresh:\n","                    if show_detail:\n","                      print(\"tr_threshold : continue\")\n","                    continue\n","                else:\n","                  if tr_ < config.loc_set.point2.long_tr_thresh:\n","                    if show_detail:\n","                      print(\"tr_threshold : continue\")\n","                    continue\n","                \n","          if not allow_exit:  # p1_hlm 의 경우, 한번 out 되면 price 가 wave_range 에 닿기전까지 retrade 를 허용하지 않는다. (expiry_p1 을 이용해 op_idx1 을 변경할 것)  \n","            if show_detail:\n","              print(\"allow_exit = {} : continue\".format(allow_exit))\n","            continue\n","\n","          if check_hlm in [0, 1]:\n","            tr_ = tr_arr[op_idx1]\n","\n","          # ------ leverage ------ #\n","          # out = out_arr[out_j]  # lvrg_set use out on out_j (out_j shoud be based on p2)\n","          leverage = lvrg_set(res_df, config, open_side, en_p, out_, fee)  # res_df 변수 사용됨 - 주석 처리 된 상태일뿐\n","          if leverage is None:\n","              if show_detail:\n","                    print(\"leverage is None : continue\")\n","              if check_hlm:\n","                continue  # change op_idx2\n","              else:\n","                break   # change op_idx1\n","\n","          exit_done, cross_on = 0, 0\n","          # ------ check tpout_onexec ------ #\n","          # if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","          if config.ep_set.entry_type == \"LIMIT\":\n","              if config.tp_set.tp_onexec:  # dynamic 은 tp_onexec 사용하는 의미가 없음\n","                  tp_j = exec_j\n","              if config.out_set.out_onexec:  # dynamic 은 out_onexec 사용하는 의미가 없음\n","                  out_j = exec_j\n","\n","          # ============ exit loop ============ #\n","          while 1:\n","            if not config.tp_set.static_tp:  # 앞으로 왠만하면 static 만 사용할 예정\n","                tp_j = i\n","            if not config.out_set.static_out:\n","                out_j = i\n","\n","            # ------------ out ------------ #  # out 우선 (보수적 검증)\n","            # ------ signal_out ------ #\n","            if not exit_done:\n","                exit_done, cross_on, ex_p, fee = check_signal_out_v3(res_df, config, open_i2, i, len_df, fee, open_side, cross_on, exit_done, [*ohlc_list, np_timeidx])\n","            # ------ hl_out ------ #\n","            if config.out_set.hl_out:\n","                if not exit_done:  # and i != len_df - 1:\n","                    exit_done, ex_p, fee = check_hl_out_v2(config, i, out_j, len_df, fee, open_side, exit_done, [*ohlc_list, out_arr])\n","\n","            # ------------ tp ------------ #\n","            if not config.tp_set.non_tp and i != exec_j:\n","              if not exit_done:\n","                exit_done, ex_p, fee = check_limit_tp_exec(res_df, config, open_i2, i, tp_j, len_df, fee, open_side, exit_done,\n","                                                          [*ohlc_list, [tp_arr]])  # 여기서는 j -> i 로 변경해야함\n","                # if config.tp_set.tp_type in ['LIMIT']:  # 'BOTH' -> 앞으로는, LIMIT 밖에 없을거라 주석처리함\n","                # if not exit_done and config.tp_set.tp_type in ['MARKET', 'BOTH']:\n","\n","            if exit_done:  # 이 phase 는 exit_phase 뒤에도 있어야할 것 - entry_done var. 사용은 안하겠지만\n","                # ------ append dynamic vars. ------ #\n","                p1_idx_list.append(op_idx1)  # side, zone, start_ver arr 모두 openi_list 로 접근하기 위해 open_i 를 담음\n","                p2_idx_list.append(op_idx2)\n","                pair_idx_list.append([exec_j, i])  # entry & exit (체결 기준임)\n","                pair_price_list.append([en_p, ex_p])\n","                lvrg_list.append(leverage)\n","                fee_list.append(fee)\n","                tpout_list.append([tp_arr[tp_j], out_arr[out_j]])  # for tpout_line plot_check\n","                tr_list.append(tr_)   # Todo, tr vectorize 불가함, 직접 구해주어야할 건데.. (오래걸리지 않을까 --> tr_set 데이터만 모아서 vecto 계산이 나을 것)\n","\n","                # open_i += 1  # 다음 open_idx 조사 진행\n","                break\n","\n","            # 1. 아래있으면, 체결 기준부터 tp, out 허용 -> tp 가 entry_idx 에 체결되는게 다소 염려되기는 함, 일단 진행 (그런 case 가 많지 않았으므로)\n","            # 2. 위에있으면, entry 다음 tick 부터 exit 허용\n","            i += 1\n","            if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","                break\n","          \n","          if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","              break\n","\n","          if exit_done == 1:  # tp_done 은 check_hlm 여부와 무관하게 op_idx1 을 변경함\n","            if show_detail:\n","                    print(\"exit_done = {}, i = {} : break\".format(exit_done, i))\n","            break   # change op_idx1\n","          else:  # exit_done -> -1 or 0 (0 means end of df) \n","            if check_hlm in [1, 2]:\n","              if check_hlm == 1:   # exit only once in p1_hlm mode\n","                allow_exit = 0\n","              if show_detail:\n","                      print(\"exit_done = {}, i = {} : continue\".format(exit_done, i))\n","              continue  # change op_idx2\n","            else:\n","              if show_detail:\n","                      print(\"exit_done = {}, i = {} : break\".format(exit_done, i))\n","              break   # change op_idx1    \n","\n","        # if op_idx1 >= 16355:\n","        #   break\n","\n","        if i >= len_df:  # or open_i >= len_open_idx:  # res_df 의 last_index 까지 돌아야함\n","            break\n","        else:\n","            continue\n","\n","    return np.array(net_p1_idx_list), np.array(p1_idx_list), np.array(p2_idx_list), np.array(pair_idx_list), np.array(pair_price_list), np.array(lvrg_list), np.array(\n","        fee_list), np.array(tpout_list), np.array(tr_list)"],"metadata":{"id":"PxD07KwPMy4G"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qfbtFVMR01UJ"},"outputs":[],"source":["def check_entry_v6(res_df, config, entry_type, op_idx, wave1, wave_gap, len_df, open_side, np_datas, expiry):\n","    open, high, low, close, ep_arr = np_datas\n","    ep_j = op_idx\n","    tp_j = op_idx\n","    out_j = op_idx\n","\n","    # print(\"ep_arr[op_idx] :\", ep_arr[op_idx])\n","\n","    selection_id = config.selection_id    \n","    # allow_ep_in = 0 if config.ep_set.point2.use_point2 else 1\n","    entry_done = 0\n","    ep = None\n","\n","    if entry_type == \"LIMIT\":\n","        fee = config.trader_set.limit_fee\n","\n","        for e_j in range(op_idx + 1, len_df):\n","            # ------ index setting for dynamic options ------ #\n","            if not config.ep_set.static_ep:\n","                ep_j = e_j  # dynamic_ep 를 위한 ep_index var.\n","                out_j = e_j  # dynamic_out 를 위한 out_index var. - 조건식이 static_ep 와 같이 있는 이유 모름 => dynamic_lvrg 로 사료됨\n","\n","            if not config.tp_set.static_tp:\n","                tp_j = e_j\n","\n","            # ------ expire_k & expire_tick ------ # - limit 사용하면 default 로 expire_k 가 존재해야함\n","            if expiry(res_df, config, op_idx, e_j, wave1, wave_gap, [high, low], open_side):  # tp_j, \n","              break\n","\n","            # ------ point2 ------ #\n","            # if not allow_ep_in:\n","            #     allow_ep_in, out_j = ep_loc_point2(res_df, config, e_j, out_j, side=OrderSide.SELL)\n","            #     if allow_ep_in:\n","            #       if config.ep_set.point2.entry_type == \"LIMIT\":\n","            #         ep_j = e_j\n","            #         # print(\"e_j in point2 :\", e_j)\n","            #         continue\n","\n","            # ------ check ep_exec ------ #\n","            # if allow_ep_in:\n","              # if config.ep_set.point2.use_point2 and config.ep_set.point2.entry_type == 'MARKET':\n","              #   entry_done = 1\n","              #   ep = c[e_j]\n","              #   break\n","              # else:\n","\n","            if open_side == OrderSide.SELL:\n","              if high[e_j] >= ep_arr[ep_j]:\n","                  entry_done = 1\n","                  ep = ep_arr[ep_j]\n","                  if open[e_j] >= ep_arr[ep_j]:  # open comp 는 결국, 수익률에 얹어주는 logic (반보수) -> 사용 보류\n","                      ep = open[e_j]\n","                  break\n","            else:\n","              if low[e_j] <= ep_arr[ep_j]:\n","                  entry_done = 1\n","                  ep = ep_arr[ep_j]\n","                  if open[e_j] <= ep_arr[ep_j]:\n","                      ep = open[e_j]\n","                  break\n","\n","    else:  # market entry\n","        e_j = op_idx + 1\n","        entry_done = 1\n","        ep = close[op_idx]\n","        fee = config.trader_set.market_fee\n","\n","    return e_j, ep_j, tp_j, out_j, entry_done, ep, fee  # 다음 start_i <-- e_j 로 변경\n","    #   e_j => 다음 phase 의 시작 index <-> ep_j : ep 의 기준 index\n","    #   ep_j, tp_j, out_j 가 return 되어야함 - exit phase 에서 이어가기 위함\n","\n","\n","def check_limit_tp_exec(res_df, config, open_i, i, tp_j, len_df, fee, open_side, exit_done, np_datas):\n","\n","    open, high, low, close, tps = np_datas\n","    tp = None\n","    selection_id = config.selection_id\n","    len_tps = len(tps)\n","\n","    for tp_i, tp_arr in enumerate(tps):\n","\n","        #     decay adjustment    #\n","        #     tp_j includes dynamic_j - functionalize  #\n","        # try:\n","        #     if config.tr_set.decay_gap != \"None\":\n","        #         decay_share = (j - open_i) // config.tp_set.decay_term\n","        #         decay_remain = (j - open_i) % config.tp_set.decay_term\n","        #         if j != open_i and decay_remain == 0:\n","        #             if open_side == OrderSide.SELL:\n","        #                 tp_arr[tp_j] += res_df['short_tp_gap_{}'.format(selection_id)].iloc[open_i] * config.tr_set.decay_gap * decay_share\n","        #             else:\n","        #                 tp_arr[tp_j] -= res_df['long_tp_gap_{}'.format(selection_id)].iloc[open_i] * config.tr_set.decay_gap * decay_share\n","        # except:\n","        #     pass\n","\n","        if open_side == OrderSide.SELL:\n","            if low[i] <= tp_arr[tp_j]:  # and partial_tp_cnt == tp_i:  # we use static tp now\n","                # if low[i] <= tp_arr[i] <= h[i]: --> 이건 잘못되었음\n","                # partial_tp_cnt += 1 --> partial_tp 보류\n","\n","                # ------ dynamic tp ------ #\n","                if tp_arr[i] != tp_arr[i - 1] and not config.tp_set.static_tp:\n","                    # tp limit 이 불가한 경우 - open 이 이미, tp 를 넘은 경우\n","                    if open[i] < tp_arr[i]:\n","                        tp = open[i]\n","                    # tp limit 이 가능한 경우 - open 이 아직, tp 를 넘지 않은 경우\n","                    else:\n","                        tp = tp_arr[i]\n","\n","                # ------ static tp ------ #\n","                else:\n","                    #   tp limit 이 불가한 경우 - open 이 이미, tp 를 넘은 경우\n","                    if open[i] < tp_arr[tp_j]:  # static 해놓고 decay 사용하면 dynamic 이니까\n","                        if config.tr_set.decay_gap != \"None\" and decay_remain == 0:\n","                            tp = open[i]  # tp_j -> open_i 를 가리키기 때문에 decay 는 한번만 진행되는게 맞음\n","                        else:\n","                            tp = tp_arr[tp_j]\n","                    else:\n","                        tp = tp_arr[tp_j]\n","\n","                if tp_i == len_tps - 1:\n","                    exit_done = 1  # partial 을 고려해 exit_done = 1 상태는 tp_i 가 last_index 로 체결된 경우만 해당\n","\n","        else:\n","            if high[i] >= tp_arr[tp_j]:\n","                # ------ dynamic tp ------ #\n","                if tp_arr[i] != tp_arr[i - 1] and not config.tp_set.static_tp:\n","                    if open[i] > tp_arr[i]:\n","                        tp = open[i]\n","                    else:\n","                        tp = tp_arr[i]\n","\n","                # ------ static tp ------ #\n","                else:\n","                    if open[i] > tp_arr[tp_j]:\n","                        if config.tr_set.decay_gap != \"None\" and decay_remain == 0:\n","                            tp = open[i]\n","                        else:\n","                            tp = tp_arr[tp_j]\n","                    else:\n","                        tp = tp_arr[tp_j]\n","\n","                if tp_i == len_tps - 1:\n","                    exit_done = 1  # partial 을 고려해 exit_done = 1 상태는 tp_i 가 last_index 로 체결된 경우만 해당\n","\n","    if exit_done:\n","        fee += config.trader_set.limit_fee\n","\n","    return exit_done, tp, fee\n","\n","\n","def check_signal_out_v3(res_df, config, open_i, i, len_df, fee, open_side, cross_on, exit_done, np_datas):    \n","\n","    _, _, _, close, np_timeidx = np_datas\n","    ex_p = None\n","    selection_id = config.selection_id\n","\n","    # ------ timestamp ------ #\n","    if config.out_set.tf_exit != \"None\":\n","        if np_timeidx[i] % config.out_set.tf_exit == config.out_set.tf_exit - 1 and i != open_i:\n","            exit_done = -1\n","\n","    # ------ rsi ------ # -> vectorize 가능함 => 추후 적용\n","    if config.out_set.rsi_exit:\n","        rsi_T = res_df['rsi_T'].to_numpy()\n","\n","        if open_side == OrderSide.SELL:\n","            if (rsi_T[i - 1] >= 50 - config.loc_set.point.osc_band) & (rsi_T[i] < 50 - config.loc_set.point.osc_band):\n","                exit_done = -1\n","        else:\n","            if (rsi_T[i - 1] <= 50 + config.loc_set.point.osc_band) & (rsi_T[i] > 50 + config.loc_set.point.osc_band):\n","                exit_done = -1\n","\n","    # ------ heikin_ashi ------ #\n","    # if selection_id in ['v3_3']:\n","    #     if open_side == OrderSide.SELL:\n","    #       if (ha_o[i] < ha_c[i]):# & (ha_o[i] == ha_l[i]):   # 양봉 출현\n","    #           exit_done = -1\n","    #     else:\n","    #       if (ha_o[i] > ha_c[i]):# & (ha_o[i] == ha_h[i]):  # 음봉 출현\n","    #           exit_done = -1\n","\n","    # ------------ early out ------------ #\n","    # ------ bb ------ # --> cross_on 기능은 ide latency 개선 여부에 해당되지 않음\n","    if selection_id in ['v5_2']:\n","        bb_upper_5T = res_df['bb_upper_5T'].to_numpy()\n","        bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","\n","        if open_side == OrderSide.SELL:\n","            if close[i] < bb_lower_5T[i] < close[i - 1]:\n","                cross_on = 1\n","            if cross_on == 1 and close[i] > bb_upper_5T[i] > close[i - 1]:\n","                exit_done = -1\n","        else:\n","            if close[i] > bb_upper_5T[i] > close[i - 1]:\n","                cross_on = 1\n","            if cross_on == 1 and close[i] < bb_lower_5T[i] < close[i - 1]:\n","                exit_done = -1\n","\n","    if exit_done:\n","        ex_p = close[i]\n","        fee += config.trader_set.market_fee\n","\n","    return exit_done, cross_on, ex_p, fee\n","\n","\n","def check_hl_out_v2(config, i, out_j, len_df, fee, open_side, exit_done, np_datas):\n","\n","    open, high, low, close, out_arr = np_datas\n","    ex_p = None\n","\n","    if config.out_set.hl_out:\n","        if open_side == OrderSide.SELL:\n","            if high[i] >= out_arr[out_j]:  # check out only once\n","                exit_done = -1\n","        else:\n","            if low[i] <= out_arr[out_j]:  # check out only once\n","                exit_done = -1\n","    else:  # close_out\n","        if open_side == OrderSide.SELL:\n","            if close[i] >= out_arr[out_j]:  # check out only once\n","                exit_done = -1\n","        else:\n","            if close[i] <= out_arr[out_j]:  # check out only once\n","                ex_p = close[i]\n","                exit_done = -1\n","\n","    if exit_done:\n","        if config.out_set.hl_out:\n","            ex_p = out_arr[out_j]\n","        else:\n","            ex_p = close[i]\n","\n","        if open_side == OrderSide.SELL:\n","            if open[i] >= out_arr[out_j]:\n","                ex_p = open[i]\n","        else:\n","            if open[i] <= out_arr[out_j]:\n","                ex_p = open[i]\n","\n","        fee += config.trader_set.market_fee\n","\n","    return exit_done, ex_p, fee"]},{"cell_type":"markdown","metadata":{"id":"zQ-roiifspcX"},"source":["#### ep_loc.point & zone legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Js5eL87VspcX"},"outputs":[],"source":["\n","    # res_df['entry_{}'.format(selection_id)] = np.where((res_df['open'] >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 (res_df['close'] < res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(selection_id)] - 1, res_df['entry_{}'.format(selection_id)])\n","\n","    # res_df['entry_{}'.format(selection_id)] = np.where((res_df['open'] >= res_df['bb_lower_1m']) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['bb_lower_1m']) &\n","    #                 (res_df['close'] < res_df['bb_lower_1m'])\n","    #                 , res_df['entry_{}'.format(selection_id)] - 1, res_df['entry_{}'.format(selection_id)])\n","\n","    # res_df['entry_{}'.format(selection_id)] = np.where((res_df['open'] <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   (res_df['close'] > res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(selection_id)] + 1, res_df['entry_{}'.format(selection_id)])\n","\n","    # res_df['entry_{}'.format(selection_id)] = np.where((res_df['open'] <= res_df['bb_upper_1m']) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['bb_upper_1m']) &\n","    #                   (res_df['close'] > res_df['bb_upper_1m'])\n","    #                 , res_df['entry_{}'.format(selection_id)] + 1, res_df['entry_{}'.format(selection_id)])\n","\n","\n","    \n","   # --------------- ema --------------- #   \n","  # res_df['ema5_1m'] = ema(res_df['close'], 5).shift(1)\n","\n","  #   # --------------- cloud bline --------------- #   \n","  # res_df['cloud_bline_1m'] = cloud_bline(res_df, 26).shift(1)\n","  \n","    #       stochastic      #\n","  # res_df['stoch'] = stoch(res_df, 5, 3, 3)\n","\n","    #       fisher      #\n","  # res_df['fisher30'] = fisher(res_df, 30)\n","  # res_df['fisher60'] = fisher(res_df, 60)\n","  # res_df['fisher120'] = fisher(res_df, 120)\n","\n","    #       cctbbo      #\n","  # res_df['cctbbo'], _ = cct_bbo(res_df, 21, 13)\n","\n","    #       ema_roc      #\n","  # res_df['ema_roc'] = ema_roc(res_df['close'], 13, 9)\n","\n","\n","   # ------------------------------ htf data ------------------------------ #    \n","\n","  #             Todo              #\n","  # htf_df = pd.read_excel(date_path2 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # htf_df = pd.read_excel(date_path3 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # htf_df = pd.read_excel(date_path4 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # htf_df = pd.read_excel(date_path5 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # # # # htf_df = pd.read_excel(date_path6 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","\n","  # # ---- htf index slicing ---- #\n","  # htf_df = htf_df.loc[:res_df.index[-1]]\n","  \n","  # print(\"res_df.index[-1] :\", res_df.index[-1])\n","  # print(\"htf_df.index[-1] :\", htf_df.index[-1])\n","\n","  # res_df = dc_line(res_df, htf_df, '5m')\n","  # res_df = dc_level(res_df, '5m', 1)\n","\n","\n","  # # # if \"sma4\" in res_df.columns:\n","  # # #   res_df.drop(\"sma4\", axis=1, inplace=1)\n","\n","  # # htf_df['sma'] = htf_df['close'].rolling(60).mean()\n","  # # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, htf_df, [-1]), columns=['sma_30m']))\n","  \n","  # htf_df['stoch'] = stoch(htf_df, 13, 3, 3)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, htf_df, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","   \n","  # fifth_df['ema'] = ema(fifth_df['close'], 5)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, fifth_df, [-1]), columns=['ema5']))\n","\n","        # ------------------------------------ short ------------------------------------ # \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 0:\n","        #   mr_score += 1          \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_upper_1m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_upper_3m'].iloc[i] <= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_upper_5m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == 'MARKET':\n","        #   mr_const_cnt += 1\n","        #   if (res_df['close'].iloc[i] - res_df['short_tp'].iloc[i]) / (res_df['short_out'].iloc[i] - res_df['close'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error):  \n","        #     mr_score += 1\n","\n","           \n","        # ------- entry once ------- #   \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == 1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == -1:\n","        #     prev_entry_cnt += 1          \n","        # # # print(\"prev_entry_cnt :\", prev_entry_cnt)\n","\n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] < res_df['bb_lower_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_lower2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_base_1h'].iloc[i]:\n","\n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] < res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","  \n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['low'].iloc[i] > res_df['short_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1\n","\n","\n","\n","        # ------------------------------------ long ------------------------------------ # \n","          \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 1:\n","        #   mr_score += 1   \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 1:\n","        #   mr_score += 1     \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 1:\n","          # mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_lower_1m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_lower_3m'].iloc[i] >= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_lower_5m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == \"MARKET\":\n","          # mr_const_cnt += 1        \n","          # if (res_df['long_tp'].iloc[i] - res_df['close'].iloc[i]) / (res_df['close'].iloc[i] - res_df['long_out'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error): # 일반적으로 dr 상에서 tp 비율이 더 커짐 (tr 보다)\n","          #   mr_score += 1\n","\n","        # -------------- ep limit -------------- #    \n","        # mr_const_cnt += 1\n","        # # if (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # if config.ep_set.min_eplim_pct < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # # if 0 < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        #   # if res_df['st_gap_15m'].iloc[i] / res_df['open'].iloc[i] < 0:\n","        #   #   print(\"i, res_df['st_gap_15m'].iloc[i] :\", i, res_df['st_gap_15m'].iloc[i])\n","        #   mr_score += 1\n","\n","\n","        # -------------- entry once -------------- #    \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == -1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == 1:\n","        #     prev_entry_cnt += 1\n","          \n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","          \n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] > res_df['bb_upper_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_upper2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_base_1h'].iloc[i]:\n","        \n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] > res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","\n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['high'].iloc[i] < res_df['long_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","          \n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1"]},{"cell_type":"markdown","metadata":{"id":"qM6H6fmrKtsA"},"source":["#### legacy"]},{"cell_type":"code","source":["def en_ex_pairing_v9_5(res_df, open_idx_list, open_info_list, ohlc_list, config_list, np_timeidx, funcs, show_detail=False):  # 이미 충분히 줄여놓은 idx 임\n","\n","    open_info1, open_info2 = open_info_list\n","    side_arr1, _, _, id_idx_arr1 = open_info1\n","    side_arr2, _, _, _ = open_info2\n","\n","    expiry_p1, expiry_p2, lvrg_set = funcs\n","\n","    net_p1_idx_list, p1_idx_list, p2_idx_list, pair_idx_list, pair_price_list, lvrg_list, fee_list, tpout_list, tr_list = [[] for li in range(9)]\n","    len_df = len(res_df)\n","\n","    open, high, low, close = ohlc_list\n","    \n","    open_idx1, open_idx2 = open_idx_list\n","    len_open_idx1 = len(open_idx1)\n","    len_open_idx2 = len(open_idx2)\n","    i, open_i1, open_i2 = 0, -1, -1  # i for total_res_df indexing\n","\n","    while 1:   # for p1's loop\n","\n","        # Todo, \n","        #   1. (갱신) p1's open_i + 1 과 op_idx 를 꺼내오는 건, eik1 또는 tp 체결의 경우만 해당됨, \n","        #   2. out 의 경우 p2's op_idx 기준으로 retry 필요\n","        #     a. 또한, p2's op_idx > p1's op_idx\n","\n","        # ============ get p1_info ============ #\n","        # if eik1 or tp_done or first loop:\n","        open_i1 += 1  # 확인 끝났으면 조기 이탈(+1), 다음 open_idx 조사 진행\n","        if open_i1 >= len_open_idx1:\n","            break\n","\n","        if show_detail:\n","            print(\"open_i1 :\", open_i1, side_arr1[open_i1])\n","\n","        op_idx1 = open_idx1[open_i1]  # open_i1 는 i 와 별개로 운영\n","        if op_idx1 < i:  # i = 이전 거래 끝난후의 res_df index - \"거래 종료후 거래 시작\", '<' : 거래 종료시점 진입 가능하다는 의미\n","            continue\n","\n","        # ------ set loop index i ------ #\n","        i = op_idx1      # + 1 --> op_idx1 = op_idx2 가능함 # open_signal 이 close_bar.shift(1) 이라고 가정하고 다음 bar 부터 체결확인한다는 의미\n","        if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","            break        \n","\n","        # ------ dynamic arr info by ID ------ #\n","        #     1. 해당 id 로 config 재할당해야함\n","        #       a. use open_i1\n","        open_side = side_arr1[open_i1]\n","        id_idx = id_idx_arr1.astype(int)[open_i1]\n","        config = config_list[id_idx]\n","        selection_id = config.selection_id\n","        check_hlm = config.tr_set.check_hlm   \n","\n","        # check_net_hhm = 1 if (config.tr_set.wave_itv1 == config.tr_set.wave_itv2) and (config.tr_set.wave_period1 == config.tr_set.wave_period2) else 0\n","\n","        side_pos = 'short' if open_side == OrderSide.SELL else 'long'   \n","        if show_detail:\n","          print(\"============ op_idx1 : {} {} ============\".format(op_idx1, open_side))\n","     \n","        # if show_detail:\n","        #   print(\"check_hlm :\", check_hlm)\n","\n","        # ------ load tr_data ------ #\n","        tp_arr = res_df['{}_tp_{}'.format(side_pos, selection_id)].to_numpy()\n","        ep1_arr = res_df['{}_ep1_{}'.format(side_pos, selection_id)].to_numpy()\n","        ep2_arr = res_df['{}_ep2_{}'.format(side_pos, selection_id)].to_numpy()\n","        out_arr = res_df['{}_out_{}'.format(side_pos, selection_id)].to_numpy()\n","\n","        tr_arr = res_df['{}_tr_{}'.format(side_pos, selection_id)].to_numpy()  # just for p1_hhm\n","\n","        tp_1_ = res_df['{}_tp_1_{}'.format(side_pos, selection_id)].to_numpy()[op_idx1]  # for p2_box location & p1's exipiry\n","        tp_0_ = res_df['{}_tp_0_{}'.format(side_pos, selection_id)].to_numpy()[op_idx1]\n","        tp_gap_ = res_df['{}_tp_gap_{}'.format(side_pos, selection_id)].to_numpy()[op_idx1]    \n","\n","        # if not check_net_hhm:  # this phase exist for p1 entry (net hhm sync.) in p2_platform\n","        exec_j, ep_j, tp_j, out_j, entry_done, en_p, fee = check_entry_v6(res_df, config, config.ep_set.entry_type, op_idx1, tp_1_, tp_gap_, len_df, open_side,\n","                                                                                [*ohlc_list, ep1_arr], expiry_p2)        \n","        i = exec_j  # = entry_loop 를 돌고 나온 e_j\n","        if not entry_done:\n","            if show_detail:\n","              print(\"p1's expiry by expiry_p2 function in p1's loop : continue\")\n","            continue   \n","        # else:        \n","        #   tp_j = op_idx1\n","\n","        prev_open_i2 = open_i2\n","        net_p1_idx_list.append(op_idx1)\n","        # if check_hlm in [0, 1]:\n","        #   i = op_idx1  # allow op_idx2 = op_idx1\n","        allow_exit = 1\n","        # ============ entry loop ============ #\n","        while 1:  # for p2's loop (allow retry)\n","\n","          # ============ get p2_info ============ #\n","          if check_hlm in [1, 2]:\n","            open_i2 += 1  # 확인 끝났으면 조기 이탈(+1), 다음 open_idx 조사 진행\n","            if open_i2 >= len_open_idx2:  # open_i2 소진\n","                break\n","\n","            if show_detail:\n","              print(\"open_i2 :\", open_i2, side_arr2[open_i2])\n","\n","            # ------ check side sync. ------ #\n","            if open_side != side_arr2[open_i2]:\n","              continue\n","\n","            # ------ assert, op_idx2 >= exec_j ------ #\n","            op_idx2 = open_idx2[open_i2]  # open_i2 는 i 와 별개로 운영\n","            if check_hlm == 1 and allow_exit:\n","              if op_idx2 < op_idx1:\n","                continue\n","            else:\n","              if op_idx2 < i:   # p1 execution 이후의 i 를 허용 (old, 이곳 i = op_idx1 + 1 or p2's exec_j or exit_loop's i + 1)\n","                continue\n","            \n","            if check_hlm == 2:\n","              i = op_idx2 + 1  # open_signal 이 close_bar.shift(1) 이라고 가정하고 다음 bar 부터 체결확인한다는 의미\n","              if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","                  break\n","\n","            if show_detail:\n","              print(\"op_idx1, op_idx2 :\", op_idx1, op_idx2, side_arr2[open_i2])\n","              \n","          else:\n","            op_idx2 = op_idx1\n","          \n","          tp_1_ = res_df['{}_tp_1_{}'.format(side_pos, selection_id)].to_numpy()[op_idx2]  # p2's tp_box 를 위한 재정의\n","          tp_0_ = res_df['{}_tp_0_{}'.format(side_pos, selection_id)].to_numpy()[op_idx2]\n","          tp_gap_ = res_df['{}_tp_gap_{}'.format(side_pos, selection_id)].to_numpy()[op_idx2]   \n","\n","          tp_ = tp_arr[op_idx2]          \n","          ep2_ = ep2_arr[op_idx2]\n","          out_ = out_arr[op_idx2]\n","\n","          out_1_ = res_df['{}_out_1_{}'.format(side_pos, selection_id)].to_numpy()[op_idx2]\n","          out_0_ = res_df['{}_out_0_{}'.format(side_pos, selection_id)].to_numpy()[op_idx2]\n","          out_gap_ = res_df['{}_out_gap_{}'.format(side_pos, selection_id)].to_numpy()[op_idx2]  \n","\n","          # ------ const. for p2_wave ------ #\n","          wave_itv1 = config.tr_set.wave_itv1\n","          wave_period1 = config.tr_set.wave_period1\n","          wave_itv2 = config.tr_set.wave_itv2\n","          wave_period2 = config.tr_set.wave_period2\n","\n","          if check_hlm in [1, 2]:\n","            # ------ check p1's expiry - Todo, priority ------ # - p2_box 생성 이전의 hl_survey\n","            # 1. op_idx1 ~ op_idx2 까지의 hl_check \n","            # if check_hlm:  # p1_hlm, p2_hlm --> Todo, 이거를 왜 p1_hlm 에도 적용했는지 잘 모르겠음\n","            # if op_idx1 < op_idx2:\n","            #   expire, touch_idx = expiry_p1(res_df, config, op_idx1, op_idx2, tp_1_, tp_0_, tp_gap_, ohlc_list[1:3], open_side)\n","            #   if expire:   # p1's expiry\n","            #       if show_detail:\n","            #         print(\"expiry_p1, touch_idx = {} : break\".format(touch_idx))\n","            #       i = touch_idx  #  + 1  --> 이거 아닌것 같음 # op_idx1 과 op_idx2 사이의 op_idx1' 을 살리기 위함, 즉 바로 다음 op_idx1 로 회귀 (건너뛰지 않고)\n","            #       open_i2 = prev_open_i2\n","            #       break   # change op_idx1\n","\n","            if check_hlm == 2:\n","              # ------ p2 point_validation - vectorization unavailable ------ # p1_loop 로 return 되는 정확한 i 를 반환하기 위해서 expiry_p1 에 순서 양보  # Todo, 새로운 tp, ep, out 에 대한 처리 필요 (p1_hlm 사용시)\n","              if open_side == OrderSide.SELL:\n","                # --- p2_wave validation --- #\n","                wave_co_post_idx = res_df['wave_co_post_idx_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()[op_idx2]\n","                if not (op_idx1 < wave_co_post_idx):\n","                  if show_detail:\n","                    print(\"p2_wave validation : continue\")\n","                  continue  # change op_idx2\n","\n","                # --- p2_wave high validation --- #\n","                # wave_high_fill1_ = res_df['wave_high_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()[op_idx1]\n","                # wave_high_fill2_ = res_df['wave_high_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()[op_idx2]\n","                # if not (wave_high_fill1_ >= wave_high_fill2_):\n","                #   if show_detail:\n","                #     print(\"p2_wave high validation : continue\")\n","                #   continue  # change op_idx2\n","                  \n","                if not (tp_ < ep2_):  # tr_set validation & reject hl_out open_exec.\n","                  break  # change op_idx1\n","                elif not (ep2_ < out_ and close[op_idx2] < out_):\n","                  if show_detail:\n","                    print(\"point validation : continue\")\n","                  continue  # change op_idx2\n","              else:\n","                # --- p2_wave validation --- #\n","                wave_cu_post_idx = res_df['wave_cu_post_idx_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()[op_idx2]\n","                if not (op_idx1 < wave_cu_post_idx):\n","                  if show_detail:\n","                    print(\"p2_wave validation : continue\")\n","                  continue  # change op_idx2\n","                \n","                # --- p2_wave low validation --- #\n","                # wave_low_fill1_ = res_df['wave_low_fill_{}{}'.format(wave_itv1, wave_period1)].to_numpy()[op_idx1]\n","                # wave_low_fill2_ = res_df['wave_low_fill_{}{}'.format(wave_itv2, wave_period2)].to_numpy()[op_idx2]\n","                # if not (wave_low_fill1_ <= wave_low_fill2_):\n","                #   if show_detail:\n","                #     print(\"p2_wave low validation : continue\")\n","                #   continue  # change op_idx2\n","\n","                if not (tp_ > ep2_):              \n","                  break\n","                elif not (ep2_ > out_ and close[op_idx2] > out_):\n","                  if show_detail:\n","                    print(\"point validation : continue\")\n","                  continue\n","\n","              # ------ p2_box location ------ #\n","              # if open_side == OrderSide.SELL:\n","              #   if not ((tp_1_ + tp_gap_ * config.tr_set.p2_box_k1 <= out_1_) and (out_0_ <= tp_0_ - tp_gap_ * config.tr_set.p2_box_k2)):  # tp1, tp0 에 닿으면 expiry\n","              #   # if not ((tp_1_ + tp_gap_ * config.tr_set.p2_box_k1 >= out_1_) and (out_0_ <= tp_0_ - tp_gap_ * config.tr_set.p2_box_k2)):  # tp1, tp0 에 닿으면 expiry\n","              #     if show_detail:\n","              #         print(\"p2_box rejection : continue\")\n","              #     continue\n","              #   else:                \n","              #     # ------ p1p2_low ------ #\n","              #     if not high[op_idx1:op_idx2 + 1].max() < tp_0_ - tp_gap_ * config.tr_set.p1p2_low:\n","              #       if show_detail:\n","              #         print(\"p1p2_low rejection : continue\")\n","              #       continue\n","              # else:\n","              #   if not ((tp_1_ - tp_gap_ * config.tr_set.p2_box_k1 >= out_1_) and (out_0_ >= tp_0_ + tp_gap_ * config.tr_set.p2_box_k2)):\n","              #   # if not ((tp_1_ - tp_gap_ * config.tr_set.p2_box_k1 <= out_1_) and (out_0_ >= tp_0_ + tp_gap_ * config.tr_set.p2_box_k2)):\n","              #     if show_detail:\n","              #         print(\"p2_box rejection : continue\")\n","              #     continue\n","              #   else:\n","              #     # ------ p1p2_low ------ #\n","              #     if not low[op_idx1:op_idx2 + 1].min() > tp_0_ + tp_gap_ * config.tr_set.p1p2_low:\n","              #       if show_detail:\n","              #         print(\"p1p2_low rejection : continue\")\n","              #       continue\n","\n","              # ------ check p2's expiry ------ # - 현재, op_idx2 기준의 ep2_arr 을 사용 중임.\n","              # exec_j, ep_j, _, out_j, entry_done, en_p, fee = check_entry_v6(res_df, config, config.ep_set.point2.entry_type, op_idx2, tp_1_, tp_gap_, len_df, open_side,\n","              #                                                                         [*ohlc_list, ep2_arr], expiry_p2)   # Todo, tp_1 & tp_gap 사용이 맞을 것으로 봄                                                                                      \n","              exec_j, ep_j, _, out_j, entry_done, en_p, fee = check_entry_v6(res_df, config, config.ep_set.point2.entry_type, op_idx2, out_1_, out_gap_, len_df, open_side,\n","                                                                                      [*ohlc_list, ep2_arr], expiry_p2)   # Todo, tp_1 & tp_gap 사용이 맞을 것으로 봄\n","              i = exec_j  # = entry_loop 를 돌고 나온 e_j\n","              if not entry_done:   # p2's expiry\n","                  if show_detail:\n","                      print(\"expiry_p2, i = {} : continue\".format(i))\n","                  continue  # change op_idx2            \n","              \n","              # ------ devectorized tr_calc ------ # - en_p 에 대해 하는게 맞을 것으로봄\n","              if open_side == OrderSide.SELL:\n","                tr_ = abs((en_p / tp_ - config.trader_set.limit_fee - 1) / (en_p / out_ - config.trader_set.market_fee - 1))\n","              else:\n","                tr_ = abs((tp_ / en_p - config.trader_set.limit_fee - 1) / (out_ / en_p - config.trader_set.market_fee - 1))              \n","\n","              # ------ tr_threshold ------ #\n","              if config.loc_set.point2.short_tr_thresh != \"None\":\n","                if open_side == OrderSide.SELL:\n","                  if tr_ < config.loc_set.point2.short_tr_thresh:\n","                    if show_detail:\n","                      print(\"tr_threshold : continue\")\n","                    continue\n","                else:\n","                  if tr_ < config.loc_set.point2.long_tr_thresh:\n","                    if show_detail:\n","                      print(\"tr_threshold : continue\")\n","                    continue\n","                \n","          if not allow_exit:  # p1_hlm 의 경우, 한번 out 되면 price 가 wave_range 에 닿기전까지 retrade 를 허용하지 않는다. (expiry_p1 을 이용해 op_idx1 을 변경할 것)  \n","            if show_detail:\n","              print(\"allow_exit = {} : continue\".format(allow_exit))\n","            continue\n","\n","          if check_hlm in [0, 1]:\n","            tr_ = tr_arr[op_idx1]\n","\n","          # ------ leverage ------ #\n","          # out = out_arr[out_j]  # lvrg_set use out on out_j (out_j shoud be based on p2)\n","          leverage = lvrg_set(res_df, config, open_side, en_p, out_, fee)  # res_df 변수 사용됨 - 주석 처리 된 상태일뿐\n","          if leverage is None:\n","              if show_detail:\n","                    print(\"leverage is None : continue\")\n","              if check_hlm:\n","                continue  # change op_idx2\n","              else:\n","                break   # change op_idx1\n","\n","          exit_done, cross_on = 0, 0\n","          # ------ check tpout_onexec ------ #\n","          # if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","          if config.ep_set.entry_type == \"LIMIT\":\n","              if config.tp_set.tp_onexec:  # dynamic 은 tp_onexec 사용하는 의미가 없음\n","                  tp_j = exec_j\n","              if config.out_set.out_onexec:  # dynamic 은 out_onexec 사용하는 의미가 없음\n","                  out_j = exec_j\n","\n","          # ============ exit loop ============ #\n","          while 1:\n","            if not config.tp_set.static_tp:  # 앞으로 왠만하면 static 만 사용할 예정\n","                tp_j = i\n","            if not config.out_set.static_out:\n","                out_j = i\n","\n","            # ------------ out ------------ #  # out 우선 (보수적 검증)\n","            # ------ signal_out ------ #\n","            if not exit_done:\n","                exit_done, cross_on, ex_p, fee = check_signal_out_v3(res_df, config, open_i2, i, len_df, fee, open_side, cross_on, exit_done, [*ohlc_list, np_timeidx])\n","            # ------ hl_out ------ #\n","            if config.out_set.hl_out:\n","                if not exit_done:  # and i != len_df - 1:\n","                    exit_done, ex_p, fee = check_hl_out_v2(config, i, out_j, len_df, fee, open_side, exit_done, [*ohlc_list, out_arr])\n","\n","            # ------------ tp ------------ #\n","            if not config.tp_set.non_tp and i != exec_j:\n","              if not exit_done:\n","                exit_done, ex_p, fee = check_limit_tp_exec(res_df, config, open_i2, i, tp_j, len_df, fee, open_side, exit_done,\n","                                                          [*ohlc_list, [tp_arr]])  # 여기서는 j -> i 로 변경해야함\n","                # if config.tp_set.tp_type in ['LIMIT']:  # 'BOTH' -> 앞으로는, LIMIT 밖에 없을거라 주석처리함\n","                # if not exit_done and config.tp_set.tp_type in ['MARKET', 'BOTH']:\n","\n","            if exit_done:  # 이 phase 는 exit_phase 뒤에도 있어야할 것 - entry_done var. 사용은 안하겠지만\n","                # ------ append dynamic vars. ------ #\n","                p1_idx_list.append(op_idx1)  # side, zone, start_ver arr 모두 openi_list 로 접근하기 위해 open_i 를 담음\n","                p2_idx_list.append(op_idx2)\n","                pair_idx_list.append([exec_j, i])  # entry & exit (체결 기준임)\n","                pair_price_list.append([en_p, ex_p])\n","                lvrg_list.append(leverage)\n","                fee_list.append(fee)\n","                tpout_list.append([tp_arr[tp_j], out_arr[out_j]])  # for tpout_line plot_check\n","                tr_list.append(tr_)   # Todo, tr vectorize 불가함, 직접 구해주어야할 건데.. (오래걸리지 않을까 --> tr_set 데이터만 모아서 vecto 계산이 나을 것)\n","\n","                # open_i += 1  # 다음 open_idx 조사 진행\n","                break\n","\n","            # 1. 아래있으면, 체결 기준부터 tp, out 허용 -> tp 가 entry_idx 에 체결되는게 다소 염려되기는 함, 일단 진행 (그런 case 가 많지 않았으므로)\n","            # 2. 위에있으면, entry 다음 tick 부터 exit 허용\n","            i += 1\n","            if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","                break\n","          \n","          if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","              break\n","\n","          if exit_done == 1:  # tp_done 은 check_hlm 여부와 무관하게 op_idx1 을 변경함\n","            if show_detail:\n","                    print(\"exit_done = {}, i = {} : break\".format(exit_done, i))\n","            break   # change op_idx1\n","          else:  # exit_done -> -1 or 0 (0 means end of df) \n","            if check_hlm in [1, 2]:\n","              if check_hlm == 1:   # exit only once in p1_hlm mode\n","                allow_exit = 0\n","              if show_detail:\n","                      print(\"exit_done = {}, i = {} : continue\".format(exit_done, i))\n","              continue  # change op_idx2\n","            else:\n","              if show_detail:\n","                      print(\"exit_done = {}, i = {} : break\".format(exit_done, i))\n","              break   # change op_idx1    \n","\n","        # if op_idx1 >= 16355:\n","        #   break\n","\n","        if i >= len_df:  # or open_i >= len_open_idx:  # res_df 의 last_index 까지 돌아야함\n","            break\n","        else:\n","            continue\n","\n","    return np.array(net_p1_idx_list), np.array(p1_idx_list), np.array(p2_idx_list), np.array(pair_idx_list), np.array(pair_price_list), np.array(lvrg_list), np.array(\n","        fee_list), np.array(tpout_list), np.array(tr_list)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AH3JXLkwL_B6","executionInfo":{"status":"ok","timestamp":1658884508950,"user_tz":-540,"elapsed":1076,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"0fa49ccd-e99c-44fd-ac0a-84441dd585d4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"uB-I09hKKvmu"},"outputs":[],"source":["def get_wave_bias_v6(res_df, config, high, low, len_df, short_net_p1_idx_arr, long_net_p1_idx_arr, short_p2_idx_arr, long_p2_idx_arr, short_obj,\n","                     long_obj):\n","    short_net_p1_idx = short_net_p1_idx_arr.astype(int)  # .reshape(-1, 1)\n","    short_p1_idx = short_obj[-1].astype(int).ravel()\n","    short_p2_idx = short_p2_idx_arr.astype(int).ravel()  # .reshape(-1, 1)\n","    short_en_idx = short_obj[2].astype(int)\n","\n","    short_tp_1 = ffill_line(res_df['short_tp_1_{}'.format(config.selection_id)].to_numpy(),\n","                            short_net_p1_idx)  # net_p1_idx ~ net_p1_idx' 사이에 대한 momentum 조사 (net 이유는 logic's validation)\n","    short_tp_0 = ffill_line(res_df['short_tp_0_{}'.format(config.selection_id)].to_numpy(), short_net_p1_idx)\n","    short_out_1 = ffill_line(res_df['short_out_1_{}'.format(config.selection_id)].to_numpy(),\n","                             short_p2_idx)  # 체결된, p2_idx ~ p2_idx' 사이에 대한 momentum 조사\n","    short_out_0 = ffill_line(res_df['short_out_0_{}'.format(config.selection_id)].to_numpy(), short_p2_idx)\n","    short_ep2_0 = ffill_line(res_df['short_ep2_0_{}'.format(config.selection_id)].to_numpy(), short_p2_idx)\n","    # short_net_wave_1 = ffill_line(res_df['short_wave_1_{}'.format(config.selection_id)].to_numpy(), short_op_idx)  # en_idx 에 sync 된 open_idx 를 사용해야함\n","    # short_net_wave_0 = ffill_line(res_df['short_wave_0_{}'.format(config.selection_id)].to_numpy(), short_op_idx)\n","\n","    long_net_p1_idx = long_net_p1_idx_arr.astype(int)  # .reshape(-1, 1)\n","    long_p1_idx = long_obj[-1].astype(int).ravel()\n","    long_p2_idx = long_p2_idx_arr.astype(int).ravel()  # .reshape(-1, 1)\n","    long_en_idx = long_obj[2].astype(int)\n","\n","    long_tp_1 = ffill_line(res_df['long_tp_1_{}'.format(config.selection_id)].to_numpy(), long_net_p1_idx)\n","    long_tp_0 = ffill_line(res_df['long_tp_0_{}'.format(config.selection_id)].to_numpy(), long_net_p1_idx)\n","    long_out_1 = ffill_line(res_df['long_out_1_{}'.format(config.selection_id)].to_numpy(), long_p2_idx)  # 체결된, p2_idx ~ p2_idx' 사이에 대한 momentum 조사\n","    long_out_0 = ffill_line(res_df['long_out_0_{}'.format(config.selection_id)].to_numpy(), long_p2_idx)\n","    long_ep2_0 = ffill_line(res_df['long_ep2_0_{}'.format(config.selection_id)].to_numpy(), long_p2_idx)\n","\n","    short_p2exec_p1_idx = np.unique(short_p1_idx)  # .reshape(-1, 1)   # 통일성을 위해 2d 로 설정\n","    long_p2exec_p1_idx = np.unique(long_p1_idx)  # .reshape(-1, 1)\n","\n","    # print(\"long_net_p1_idx.shape :\", long_net_p1_idx.shape)\n","    # print(\"long_en_idx.shape :\", long_en_idx.shape)\n","\n","    # ================== touch idx ================== #\n","    # 1. min 에 초점을 맞추는 거니까, touch 없을시 len_df 로 설정\n","    # 2. future_data 사용이니까, shift(-bias_info_tick) 설정 --> olds\n","    # 3. entry 다음 idx 부터 -> tp & out 체결 logic 이 현재 entry_idx 부터 되어있어서 취소\n","    # Todo, high 와 low 중 어디에 먼저닿느냐가 중요함을 key 로 잡고만든 logic 임\n","    len_df_range = np.arange(len_df)\n","    last_idx = len_df - 1  # nan 발생하면 대소 비교로 hhm 확인이 불가능해짐, np.nan <= np.nan --> false\n","\n","    # ------------ pair & idxs ------------ #\n","    short_net_p1_pair = list(zip(short_net_p1_idx, np.append(short_net_p1_idx[1:], last_idx)))   # p1's 1st & 2nd pair 위해서 last_idx 마지막에 붙여준 것\n","    long_net_p1_pair = list(zip(long_net_p1_idx, np.append(long_net_p1_idx[1:], last_idx)))\n","\n","    short_p2_pair = list(zip(short_p2_idx, np.append(short_p2_idx[1:], last_idx)))\n","    long_p2_pair = list(zip(long_p2_idx, np.append(long_p2_idx[1:], last_idx)))\n","\n","    short_tp_1_touch_idxs = np.where(low <= short_tp_1, len_df_range, last_idx)\n","    short_tp_0_touch_idxs = np.where(high >= short_tp_0, len_df_range, last_idx)\n","    long_tp_1_touch_idxs = np.where(high >= long_tp_1, len_df_range, last_idx)\n","    long_tp_0_touch_idxs = np.where(low <= long_tp_0, len_df_range, last_idx)\n","\n","    short_out_1_touch_idxs = np.where(low <= short_out_1, len_df_range, last_idx)\n","    short_out_0_touch_idxs = np.where(high >= short_out_0, len_df_range, last_idx)\n","    long_out_1_touch_idxs = np.where(high >= long_out_1, len_df_range, last_idx)\n","    long_out_0_touch_idxs = np.where(low <= long_out_0, len_df_range, last_idx)\n","\n","    # ------------ min touch_idx ------------ #\n","    short_tp_1_touch_idx = get_touch_idx_fill(short_tp_1_touch_idxs, short_net_p1_pair, short_net_p1_idx, len_df)  # pair means 구간\n","    short_tp_0_touch_idx = get_touch_idx_fill(short_tp_0_touch_idxs, short_net_p1_pair, short_net_p1_idx, len_df)\n","    long_tp_1_touch_idx = get_touch_idx_fill(long_tp_1_touch_idxs, long_net_p1_pair, long_net_p1_idx, len_df)\n","    long_tp_0_touch_idx = get_touch_idx_fill(long_tp_0_touch_idxs, long_net_p1_pair, long_net_p1_idx, len_df)\n","\n","    short_out_1_touch_idx = get_touch_idx_fill(short_out_1_touch_idxs, short_p2_pair, short_p2_idx, len_df)  # pair means 구간\n","    short_out_0_touch_idx = get_touch_idx_fill(short_out_0_touch_idxs, short_p2_pair, short_p2_idx, len_df)\n","    long_out_1_touch_idx = get_touch_idx_fill(long_out_1_touch_idxs, long_p2_pair, long_p2_idx, len_df)\n","    long_out_0_touch_idx = get_touch_idx_fill(long_out_0_touch_idxs, long_p2_pair, long_p2_idx, len_df)\n","\n","    # ------------ point's touch_idx ------------ #\n","    short_tp_1_net_p1_touch_idx = short_tp_1_touch_idx[short_net_p1_idx]  # for tp_box's net_hhm\n","    short_tp_0_net_p1_touch_idx = short_tp_0_touch_idx[short_net_p1_idx]\n","    long_tp_1_net_p1_touch_idx = long_tp_1_touch_idx[long_net_p1_idx]\n","    long_tp_0_net_p1_touch_idx = long_tp_0_touch_idx[long_net_p1_idx]\n","    # print(\"long_tp_1_net_p1_touch_idx :\", long_tp_1_net_p1_touch_idx)\n","\n","    short_tp_1_p2exec_p1_touch_idx = short_tp_1_touch_idx[short_p2exec_p1_idx]  # p2 까지 체결된 p1's hhm (p2 executed p1_hhm)\n","    short_tp_0_p2exec_p1_touch_idx = short_tp_0_touch_idx[short_p2exec_p1_idx]\n","    long_tp_1_p2exec_p1_touch_idx = long_tp_1_touch_idx[long_p2exec_p1_idx]\n","    long_tp_0_p2exec_p1_touch_idx = long_tp_0_touch_idx[long_p2exec_p1_idx]\n","\n","    short_tp_1_p2_touch_idx = short_tp_1_touch_idx[short_p2_idx]  # hlm 을 위한 hhm (on p2)\n","    short_tp_0_p2_touch_idx = short_tp_0_touch_idx[short_p2_idx]\n","    long_tp_1_p2_touch_idx = long_tp_1_touch_idx[long_p2_idx]\n","    long_tp_0_p2_touch_idx = long_tp_0_touch_idx[long_p2_idx]\n","\n","    short_out_1_p2_touch_idx = short_out_1_touch_idx[short_p2_idx]  # for out_box's executed_hhm\n","    short_out_0_p2_touch_idx = short_out_0_touch_idx[short_p2_idx]\n","    long_out_1_p2_touch_idx = long_out_1_touch_idx[long_p2_idx]\n","    long_out_0_p2_touch_idx = long_out_0_touch_idx[long_p2_idx]\n","\n","    # ------------ get wave's bias_tick ------------ #\n","    short_tp_1_net_p1_touch_idx2 = np.where(short_tp_1_net_p1_touch_idx == last_idx, np.nan, short_tp_1_net_p1_touch_idx)\n","    long_tp_1_net_p1_touch_idx2 = np.where(long_tp_1_net_p1_touch_idx == last_idx, np.nan, long_tp_1_net_p1_touch_idx)\n","\n","    short_tp_1_p2exec_p1_touch_idx2 = np.where(short_tp_1_p2exec_p1_touch_idx == last_idx, np.nan, short_tp_1_p2exec_p1_touch_idx)\n","    long_tp_1_p2exec_p1_touch_idx2 = np.where(long_tp_1_p2exec_p1_touch_idx == last_idx, np.nan, long_tp_1_p2exec_p1_touch_idx)\n","\n","    short_net_p1_bias_tick = short_tp_1_net_p1_touch_idx2 - short_net_p1_idx\n","    long_net_p1_bias_tick = long_tp_1_net_p1_touch_idx2 - long_net_p1_idx\n","\n","    short_p2exec_p1_bias_tick = short_tp_1_p2exec_p1_touch_idx2 - short_p2exec_p1_idx\n","    long_p2exec_p1_bias_tick = long_tp_1_p2exec_p1_touch_idx2 - long_p2exec_p1_idx\n","\n","    # ------------------ bias_bool & hhm ------------------ #\n","    short_net_p1_true_bias_bool = short_tp_1_net_p1_touch_idx < short_tp_0_net_p1_touch_idx  # true_bias 의 조건\n","    short_net_p1_false_bias_bool = short_tp_1_net_p1_touch_idx >= short_tp_0_net_p1_touch_idx  # false_bias 의 조건, ~true_bias_bool 와 같지 않음, why ..? = en_idx\n","    long_net_p1_true_bias_bool = long_tp_1_net_p1_touch_idx < long_tp_0_net_p1_touch_idx\n","    long_net_p1_false_bias_bool = long_tp_1_net_p1_touch_idx >= long_tp_0_net_p1_touch_idx\n","\n","    short_p2exec_p1_true_bias_bool = short_tp_1_p2exec_p1_touch_idx < short_tp_0_p2exec_p1_touch_idx  # true_bias 의 조건\n","    short_p2exec_p1_false_bias_bool = short_tp_1_p2exec_p1_touch_idx >= short_tp_0_p2exec_p1_touch_idx  # false_bias 의 조건, ~true_bias_bool 와 같지 않음, why ..? = en_idx\n","    long_p2exec_p1_true_bias_bool = long_tp_1_p2exec_p1_touch_idx < long_tp_0_p2exec_p1_touch_idx\n","    long_p2exec_p1_false_bias_bool = long_tp_1_p2exec_p1_touch_idx >= long_tp_0_p2exec_p1_touch_idx\n","\n","    short_p2_true_bias_bool = short_tp_1_p2_touch_idx < short_tp_0_p2_touch_idx\n","    # short_p2_false_bias_bool = short_tp_1_p2_touch_idx >= short_tp_0_p2_touch_idx\n","    long_p2_true_bias_bool = long_tp_1_p2_touch_idx < long_tp_0_p2_touch_idx\n","    # long_p2_false_bias_bool = long_tp_1_p2_touch_idx >= long_tp_0_p2_touch_idx\n","\n","    short_p2_out_true_bias_bool = short_out_1_p2_touch_idx < short_out_0_p2_touch_idx\n","    short_p2_out_false_bias_bool = short_out_1_p2_touch_idx >= short_out_0_p2_touch_idx\n","    long_p2_out_true_bias_bool = long_out_1_p2_touch_idx < long_out_0_p2_touch_idx\n","    long_p2_out_false_bias_bool = long_out_1_p2_touch_idx >= long_out_0_p2_touch_idx\n","\n","    short_tpbox_hhm = hhm(short_net_p1_true_bias_bool, short_net_p1_false_bias_bool)\n","    long_tpbox_hhm = hhm(long_net_p1_true_bias_bool, long_net_p1_false_bias_bool)\n","\n","    short_p2exec_tpbox_hhm = hhm(short_p2exec_p1_true_bias_bool, short_p2exec_p1_false_bias_bool)\n","    long_p2exec_tpbox_hhm = hhm(long_p2exec_p1_true_bias_bool, long_p2exec_p1_false_bias_bool)\n","\n","    # short_p2_hhm = hhm(short_p2_true_bias_bool, short_p2_false_bias_bool)\n","    # long_p2_hhm = hhm(long_p2_true_bias_bool, long_p2_false_bias_bool)\n","\n","    short_outbox_hhm = hhm(short_p2_out_true_bias_bool, short_p2_out_false_bias_bool)\n","    long_outbox_hhm = hhm(long_p2_out_true_bias_bool, long_p2_out_false_bias_bool)\n","\n","    # print(\"short_tpbox_hhm, short_p2_hhm, short_outbox_hhm :\", short_tpbox_hhm, short_p2_hhm, short_outbox_hhm)\n","\n","    return short_tpbox_hhm, long_tpbox_hhm, short_p2exec_tpbox_hhm, long_p2exec_tpbox_hhm, short_outbox_hhm, long_outbox_hhm, \\\n","           short_net_p1_bias_tick, long_net_p1_bias_tick, short_p2exec_p1_bias_tick, long_p2exec_p1_bias_tick, short_p2_true_bias_bool, long_p2_true_bias_bool, \\\n","           short_tp_1[short_en_idx], short_tp_0[short_en_idx], long_tp_1[long_en_idx], long_tp_0[long_en_idx], \\\n","           short_out_1[short_en_idx], short_out_0[short_en_idx], long_out_1[long_en_idx], long_out_0[long_en_idx], short_ep2_0[short_en_idx], long_ep2_0[long_en_idx]  # plot_check 을 위해 en_idx 넣음"]},{"cell_type":"code","source":["def idep_plot_v17(res_df, len_df, config, high, low, open_info_df1, paired_res, inversion=False, sample_ratio=0.7, title_position=(0.5, 0.5),\n","                  fontsize=15, signi=False):  # open_idx, side_arr\n","    if not signi:\n","        plt.style.use(['dark_background', 'fast'])\n","        plt.figure(figsize=(24, 8))\n","        gs = gridspec.GridSpec(nrows=2,  # row 몇 개\n","                               ncols=3,  # col 몇 개\n","                               height_ratios=[10, 1]\n","                               # height_ratios=[10, 10, 1]\n","                               )\n","    gs_idx = 0\n","    # plt.suptitle(key)\n","\n","    p_ranges, p_qty_ratio = literal_eval(config.tp_set.p_ranges), literal_eval(config.tp_set.p_qty_ratio)\n","    assert np.sum(p_qty_ratio) == 1.0\n","    assert len(p_ranges) == len(p_qty_ratio)\n","\n","    if sample_ratio is not None:\n","        sample_len = int(len_df * sample_ratio)\n","    else:\n","        sample_len = len_df\n","\n","    # ------ short & long data preparation ------ #\n","    # start_0 = time.time()\n","\n","    net_p1_idx_arr, p1_idx_arr, p2_idx_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr, tr_arr = paired_res\n","    assert len(p1_idx_arr) != 0, \"assert len(p1_idx_arr) != 0\"\n","\n","    short_net_p1_idx_arr = net_p1_idx_arr[np.where(open_info_df1.side.loc[net_p1_idx_arr] == OrderSide.SELL)[0]]\n","    long_net_p1_idx_arr = net_p1_idx_arr[np.where(open_info_df1.side.loc[net_p1_idx_arr] == OrderSide.BUY)[0]]\n","\n","    short_net_p1_frq = len(short_net_p1_idx_arr)\n","    long_net_p1_frq = len(long_net_p1_idx_arr)\n","    # print(\"short_net_p1_frq :\", short_net_p1_frq)\n","    # print(\"long_net_p1_frq :\", long_net_p1_frq)\n","\n","    short_p1_openi_idx = np.where(open_info_df1.side.loc[p1_idx_arr] == OrderSide.SELL)[0]  # p1_idx_arr 에 대한 idx, # side_arr,\n","    long_p1_openi_idx = np.where(open_info_df1.side.loc[p1_idx_arr] == OrderSide.BUY)[0]\n","\n","    # p1_idx = open_idx[p1_openi_arr].reshape(-1, 1)   # != p1_idx_arr, p1_openi_arr 은 exit_done 기준임\n","\n","    np_obj = np.hstack((pair_price_arr, pair_idx_arr, p1_idx_arr.reshape(-1, 1)))  # p1_idx_arr is 1d, need to be changed to 2d (for stacking)\n","    short_obj = np_obj[short_p1_openi_idx]\n","    long_obj = np_obj[long_p1_openi_idx]\n","    both_obj = np.vstack((short_obj, long_obj))\n","    print(\"short_obj.shape :\", short_obj.shape)\n","    print(\"long_obj.shape :\", long_obj.shape)\n","\n","    short_obj, long_obj, both_obj = [np.split(obj_, 5, axis=1) for obj_ in [short_obj, long_obj, both_obj]]\n","\n","    short_p2_idx_arr, long_p2_idx_arr = [p2_idx_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_lvrg_arr, long_lvrg_arr = [lvrg_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_fee_arr, long_fee_arr = [fee_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_tpout_arr, long_tpout_arr = [tpout_arr[openi_idx_] for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    # short_bias_arr, long_bias_arr = [bias_arr[openi_idx_] for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_tr_arr, long_tr_arr = [tr_arr[openi_idx_] for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    # print(\"long_bias_arr.shape :\", long_bias_arr.shape)\n","    # print(\"short / long arr setting elapsed time :\", time.time() - start_0)\n","\n","\n","    # ------ get hhm ------ #    \n","    # start_0 = time.time()\n","    short_tpbox_hhm, long_tpbox_hhm, short_tpbox_p2exec_hhm, long_tpbox_p2exec_hhm, short_outbox_hhm, long_outbox_hhm, short_p2_true_bias_bool, long_p2_true_bias_bool, \\\n","          short_tp_1, short_tp_0, long_tp_1, long_tp_0, short_out_1, short_out_0, long_out_1, long_out_0, short_ep2_0, long_ep2_0 = \\\n","      get_wave_bias_v5(res_df, config, high, low, len_df, short_net_p1_idx_arr, long_net_p1_idx_arr, short_p2_idx_arr, long_p2_idx_arr, short_obj, long_obj)\n","    # print(\"get_wave_bias elapsed time :\", time.time() - start_0)\n","\n","\n","    # ------ mean_low ------ #    \n","    # start_0 = time.time()\n","    selection_id = config.selection_id\n","\n","    short_p1_idx = short_obj[-1].astype(int)\n","    long_p1_idx = long_obj[-1].astype(int)    \n","\n","    short_open_tp_1 = res_df['short_tp_1_{}'.format(selection_id)].to_numpy()[short_p1_idx] # != short_tp_1\n","    long_open_tp_1 = res_df['long_tp_1_{}'.format(selection_id)].to_numpy()[long_p1_idx]\n","\n","    short_open_tp_0 = res_df['short_tp_0_{}'.format(selection_id)].to_numpy()[short_p1_idx]\n","    long_open_tp_0 = res_df['long_tp_0_{}'.format(selection_id)].to_numpy()[long_p1_idx]\n","\n","    short_open_tp_gap = res_df['short_tp_gap_{}'.format(selection_id)].to_numpy()[short_p1_idx]  # use open_i\n","    long_open_tp_gap = res_df['long_tp_gap_{}'.format(selection_id)].to_numpy()[long_p1_idx]\n","\n","    short_max_outg = get_max_outg_v4(OrderSide.SELL, config, ohlc_list, short_obj, short_tpout_arr, short_open_tp_0, short_open_tp_gap)  # tp_box's mean_low 확인 위해 tp_gap 입력함\n","    long_max_outg = get_max_outg_v4(OrderSide.BUY, config, ohlc_list, long_obj, long_tpout_arr, long_open_tp_0, long_open_tp_gap)\n","\n","    short_mean_low = short_max_outg[short_p2_true_bias_bool].mean()\n","    long_mean_low = long_max_outg[long_p2_true_bias_bool].mean()\n","    both_mean_low = (short_mean_low + long_mean_low) / 2\n","    # print(\"short_mean_low :\", short_mean_low)\n","    # print(\"long_mean_low :\", long_mean_low)\n","    # print(\"both_mean_low :\", both_mean_low)\n","    # print(\"mean_low elapsed time :\", time.time() - start_0)\n","\n","    # ------ plot_data ------ #\n","    len_short, len_long = len(short_p1_openi_idx), len(long_p1_openi_idx)\n","\n","    try:\n","        # start_0 = time.time()\n","        if len_short == 0:\n","            short_pr = []\n","            gs_idx += 1\n","        else:\n","            short_tr = short_tr_arr.mean()\n","            short_pr, short_liqd = get_pr_v4(OrderSide.SELL, high, low, short_obj, short_tpout_arr, short_lvrg_arr, short_fee_arr, p_ranges,\n","                                             p_qty_ratio, inversion)\n","            short_total_pr = to_total_pr(len_df, short_pr, short_obj[-2])\n","            short_cum_pr = np.cumprod(short_total_pr)\n","            short_hlm = hlm(short_pr, short_p2_true_bias_bool)\n","            short_trade_ticks = np.mean(short_obj[-2] - short_obj[-1])\n","            if signi:\n","                short_idep_res_obj = (short_tpbox_p2exec_hhm, short_hlm) + get_res_info_nb_v2(sample_len, short_pr, short_total_pr, short_cum_pr, short_liqd)\n","            else:\n","                gs_idx = plot_info_v9(gs, gs_idx, len_df, sample_len, short_tr, short_tpbox_hhm, short_tpbox_p2exec_hhm, short_outbox_hhm, short_mean_low, short_hlm, short_trade_ticks, short_net_p1_frq, short_pr, short_total_pr,\n","                                      short_cum_pr, short_liqd, short_lvrg_arr.mean(), title_position, fontsize)\n","        # print(\"short plot_data elapsed time :\", time.time() - start_0)\n","\n","    except Exception as e:\n","        gs_idx += 1\n","        print(\"error in short plot_data :\", e)\n","\n","    try:\n","        # start_0 = time.time()\n","        if len_long == 0:\n","            long_pr = []\n","            gs_idx += 1\n","        else:\n","            long_tr = long_tr_arr.mean()\n","            long_pr, long_liqd = get_pr_v4(OrderSide.BUY, high, low, long_obj, long_tpout_arr, long_lvrg_arr, long_fee_arr, p_ranges, p_qty_ratio,\n","                                           inversion)\n","            long_total_pr = to_total_pr(len_df, long_pr, long_obj[-2])\n","            long_cum_pr = np.cumprod(long_total_pr)\n","            # long_hhm = long_net_p1_hhm\n","            long_hlm = hlm(long_pr, long_p2_true_bias_bool)\n","            long_trade_ticks = np.mean(long_obj[-2] - long_obj[-1])\n","            if signi:\n","                long_idep_res_obj = (long_tpbox_p2exec_hhm, long_hlm) + get_res_info_nb_v2(sample_len, long_pr, long_total_pr, long_cum_pr, long_liqd)\n","            else:\n","                gs_idx = plot_info_v9(gs, gs_idx, len_df, sample_len, long_tr, long_tpbox_hhm, long_tpbox_p2exec_hhm, long_outbox_hhm, long_mean_low, long_hlm, long_trade_ticks, long_net_p1_frq, long_pr, long_total_pr,\n","                                      long_cum_pr, long_liqd, long_lvrg_arr.mean(), title_position, fontsize)\n","        # print(\"long plot_data elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","        gs_idx += 1\n","        print(\"error in long plot_data :\", e)\n","\n","    try:\n","        # start_0 = time.time()\n","        if len_short * len_long == 0:\n","            both_pr = []\n","            gs_idx += 1\n","        else:\n","            both_tr = (short_tr + long_tr) / 2\n","            both_pr = np.vstack((short_pr, long_pr))  # for 2d arr, obj 를 1d 로 만들지 않는 이상, pr 은 2d 유지될 것\n","            both_total_pr = to_total_pr(len_df, both_pr, both_obj[-2])\n","            both_cum_pr = np.cumprod(both_total_pr)\n","            both_liqd = min(short_liqd, long_liqd)\n","            both_p2_true_bias_bool = np.hstack((short_p2_true_bias_bool, long_p2_true_bias_bool))  # hstack for 1d arr, vstack for 2d arr\n","            both_tpbox_hhm = (short_tpbox_hhm + long_tpbox_hhm) / 2\n","            both_tpbox_p2exec_hhm, both_hlm = (short_tpbox_p2exec_hhm + long_tpbox_p2exec_hhm) / 2, (short_hlm + long_hlm) / 2\n","            both_outbox_hhm = (short_outbox_hhm + long_outbox_hhm) / 2\n","            both_trade_ticks = np.mean(both_obj[-2] - both_obj[-1])\n","            both_net_p1_frq = short_net_p1_frq + long_net_p1_frq\n","            if signi:\n","                both_idep_res_obj = (both_tpbox_p2exec_hhm, both_hlm) + get_res_info_nb_v2(sample_len, both_pr, both_total_pr, both_cum_pr, both_liqd)\n","            else:\n","                gs_idx = plot_info_v9(gs, gs_idx, len_df, sample_len, both_tr, both_tpbox_hhm, both_tpbox_p2exec_hhm, both_outbox_hhm, both_mean_low, both_hlm, both_trade_ticks, both_net_p1_frq, both_pr, both_total_pr,\n","                                      both_cum_pr, both_liqd, lvrg_arr.mean(), title_position, fontsize)\n","        # print(\"both plot_data elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","        gs_idx += 1\n","        print(\"error in both plot_data :\", e)\n","\n","    if not signi:\n","        if len_short * len_long > 0:\n","            for obj, bias_arr, cum_pr in zip([short_obj, long_obj, both_obj], [short_p2_true_bias_bool, long_p2_true_bias_bool, both_p2_true_bias_bool],\n","                                             [short_cum_pr, long_cum_pr, both_cum_pr]):\n","                try:\n","                    # start_0 = time.time()\n","                    gs_idx = frq_dev_plot_v4(gs, gs_idx, len_df, sample_len, obj[-2], bias_arr, cum_pr[-1], fontsize)\n","                    # print(\"frq_dev_plot elapsed time :\", time.time() - start_0)\n","                except Exception as e:\n","                    gs_idx += 1\n","                    print(\"error in frq_dev_plot :\", e)\n","            plt.show()\n","            plt.close()\n","\n","        return short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_tr_arr, short_p2_true_bias_bool, short_p2_idx_arr, short_tp_1, short_tp_0, short_out_1, short_out_0, short_ep2_0, \\\n","               long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_tr_arr, long_p2_true_bias_bool, long_p2_idx_arr, long_tp_1, long_tp_0, long_out_1, long_out_0, long_ep2_0  # long_net_p1_idx_arr long_p2_idx_arr\n","\n","    else:\n","        return [short_idep_res_obj[:-1], long_idep_res_obj[:-1], both_idep_res_obj[:-1]]"],"metadata":{"id":"Eos0FoAgrfW5"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":260,"status":"ok","timestamp":1653436951068,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"oLDZobRcgg6E","outputId":"2f07e665-41ba-4c7e-b5d7-43fc14d09cd5"},"outputs":[{"data":{"text/plain":["Rolling [window=100,center=False,axis=0,method=single]"]},"execution_count":92,"metadata":{},"output_type":"execute_result"}],"source":["res_df.low.rolling(100) #> 1000"]},{"cell_type":"markdown","metadata":{"id":"_blyFhQJUd5X"},"source":["#### dump"]},{"cell_type":"code","source":["def get_pr_v4(open_side, h, l, obj, tpout, lvrg, fee, p_ranges, p_qty_ratio, inversion=False):  # --> 여기서 사용하는 ex_p = ex_p\n","\n","    en_p = obj[0]\n","    # ex_p = obj[1]\n","    tp, out = np.split(tpout, 2, axis=1)\n","    len_p = len(p_ranges)\n","    en_ps, tps, outs, lvrgs, fees = [np.tile(arr_, (1, len_p)) for arr_ in [en_p, tp, out, lvrg, fee]]\n","\n","    np_obj = np.array(obj).T[0]\n","    assert len(np_obj.shape) == 2\n","\n","    # iin == iout 인 경우 분리\n","    en_idx = np_obj[:, 2]\n","    ex_idx = np_obj[:, 3]\n","    equal_idx = en_idx == ex_idx    # equal_idx 는 어차피 out 임\n","    issue_idx = en_idx > ex_idx    # equal_idx 는 어차피 out 임\n","\n","    print('pass')\n","    idx_gap_ = (ex_idx - en_idx)[~equal_idx]\n","    print(\"en_idx[issue_idx] :\", en_idx[issue_idx])\n","    print(\"ex_idx[issue_idx] :\", ex_idx[issue_idx])\n","    print(\"idx_gap_[idx_gap_ <= 0] :\", idx_gap_[idx_gap_ <= 0])\n","\n","    min_low = np.full_like(en_p, np.nan)\n","    min_low[~equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)  # start from iin + 1 (tp 체결을 entry_idx 부터 보지 않음)\n","    max_high = np.full_like(en_p, np.nan)\n","    max_high[~equal_idx] = np.array([np.max(h[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","\n","    if open_side == \"SELL\":\n","        p_tps = en_ps - (en_ps - tps) * p_ranges\n","        # min_low = np.full_like(en_p, np.nan)\n","        # min_low[~equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)  # start from iin + 1 (tp 체결을 entry_idx 부터 보지 않음)\n","        tp_idx = (np.tile(min_low, (1, len_p)) <= p_tps) * (np.tile(max_high, (1, len_p)) <= outs)  # entry_idx 포함해서 out touch 금지 (보수적 검증)\n","    else:\n","        p_tps = en_ps + (tps - en_ps) * p_ranges\n","        # max_high = np.full_like(en_p, np.nan)\n","        # max_high[~equal_idx] = np.array([np.max(h[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        tp_idx = (np.tile(max_high, (1, len_p)) >= p_tps) * (np.tile(min_low, (1, len_p)) >= outs)\n","\n","    ex_ps = outs.copy()\n","    ex_ps[tp_idx] = p_tps[tp_idx]\n","\n","    if open_side == \"SELL\":\n","        if not inversion:\n","            pr = ((en_ps / ex_ps - fees - 1) * lvrgs * p_qty_ratio).sum(axis=1) + 1\n","            # ------ liquidation ------ #\n","            max_high = np.full_like(en_p, np.nan)\n","            max_high[~equal_idx] = np.array([np.max(h[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","            liqd = np.nanmin((en_p / max_high - fee - 1) * lvrg + 1)\n","        else:\n","            pr = ((ex_ps / en_ps - fees - 1) * lvrgs * p_qty_ratio).sum(axis=1) + 1\n","            # ------ liquidation ------ #\n","            min_low = np.full_like(en_p, np.nan)\n","            min_low[~equal_idx] = np.array([np.min(l[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","            liqd = np.nanmin((min_low / en_p - fee - 1) * lvrg + 1)\n","    else:\n","        if not inversion:\n","            pr = ((ex_ps / en_ps - fees - 1) * lvrgs * p_qty_ratio).sum(axis=1) + 1\n","            # ------ liquidation ------ #\n","            min_low = np.full_like(en_p, np.nan)\n","            min_low[~equal_idx] = np.array([np.min(l[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","            liqd = np.nanmin((min_low / en_p - fee - 1) * lvrg + 1)\n","        else:\n","            pr = ((en_ps / ex_ps - fees - 1) * lvrgs * p_qty_ratio).sum(axis=1) + 1\n","            # ------ liquidation ------ #\n","            max_high = np.full_like(en_p, np.nan)\n","            max_high[~equal_idx] = np.array([np.max(h[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","            liqd = np.nanmin((en_p / max_high - fee - 1) * lvrg + 1)\n","\n","    return pr.reshape(-1, 1), liqd"],"metadata":{"id":"wDQWK3v5xOFa"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def idep_plot_v16(res_df, len_df, config, high, low, open_info_df1, paired_res, inversion=False, sample_ratio=0.7, title_position=(0.5, 0.5),\n","                  fontsize=15, signi=False):  # open_idx, side_arr\n","    if not signi:\n","        plt.style.use(['dark_background', 'fast'])\n","        plt.figure(figsize=(24, 8))\n","        gs = gridspec.GridSpec(nrows=2,  # row 몇 개\n","                               ncols=3,  # col 몇 개\n","                               height_ratios=[10, 1]\n","                               # height_ratios=[10, 10, 1]\n","                               )\n","    gs_idx = 0\n","    # plt.suptitle(key)\n","\n","    p_ranges, p_qty_ratio = literal_eval(config.tp_set.p_ranges), literal_eval(config.tp_set.p_qty_ratio)\n","    assert np.sum(p_qty_ratio) == 1.0\n","    assert len(p_ranges) == len(p_qty_ratio)\n","\n","    if sample_ratio is not None:\n","        sample_len = int(len_df * sample_ratio)\n","    else:\n","        sample_len = len_df\n","\n","    # ------ short & long data preparation ------ #\n","    # start_0 = time.time()\n","\n","    net_p1_idx_arr, p1_idx_arr, p2_idx_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr, tr_arr = paired_res\n","    assert len(p1_idx_arr) != 0, \"assert len(p1_idx_arr) != 0\"\n","\n","    short_net_p1_idx_arr = net_p1_idx_arr[np.where(open_info_df1.side.loc[net_p1_idx_arr] == OrderSide.SELL)[0]]\n","    long_net_p1_idx_arr = net_p1_idx_arr[np.where(open_info_df1.side.loc[net_p1_idx_arr] == OrderSide.BUY)[0]]\n","\n","    short_net_p1_frq = len(short_net_p1_idx_arr)\n","    long_net_p1_frq = len(long_net_p1_idx_arr)\n","    # print(\"len(short_net_p1_true_bias_bool) :\", len(short_net_p1_idx_arr))\n","    # print(\"len(long_net_p1_true_bias_bool) :\", len(long_net_p1_idx_arr))\n","\n","    short_p1_openi_idx = np.where(open_info_df1.side.loc[p1_idx_arr] == OrderSide.SELL)[0]  # p1_idx_arr 에 대한 idx, # side_arr,\n","    long_p1_openi_idx = np.where(open_info_df1.side.loc[p1_idx_arr] == OrderSide.BUY)[0]\n","\n","    # p1_idx = open_idx[p1_openi_arr].reshape(-1, 1)   # != p1_idx_arr, p1_openi_arr 은 exit_done 기준임\n","\n","    np_obj = np.hstack((pair_price_arr, pair_idx_arr, p1_idx_arr.reshape(-1, 1)))  # p1_idx_arr is 1d, need to be changed to 2d (for stacking)\n","    short_obj = np_obj[short_p1_openi_idx]\n","    long_obj = np_obj[long_p1_openi_idx]\n","    both_obj = np.vstack((short_obj, long_obj))\n","    print(\"short_obj.shape :\", short_obj.shape)\n","    print(\"long_obj.shape :\", long_obj.shape)\n","\n","    short_obj, long_obj, both_obj = [np.split(obj_, 5, axis=1) for obj_ in [short_obj, long_obj, both_obj]]\n","\n","    short_p2_idx_arr, long_p2_idx_arr = [p2_idx_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_lvrg_arr, long_lvrg_arr = [lvrg_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_fee_arr, long_fee_arr = [fee_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_tpout_arr, long_tpout_arr = [tpout_arr[openi_idx_] for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    # short_bias_arr, long_bias_arr = [bias_arr[openi_idx_] for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    short_tr_arr, long_tr_arr = [tr_arr[openi_idx_] for openi_idx_ in [short_p1_openi_idx, long_p1_openi_idx]]\n","    # print(\"long_bias_arr.shape :\", long_bias_arr.shape)\n","    # print(\"short / long arr setting elapsed time :\", time.time() - start_0)\n","\n","    # start_0 = time.time()\n","\n","    short_tpbox_hhm, long_tpbox_hhm, short_tpbox_p2exec_hhm, long_tpbox_p2exec_hhm, short_outbox_hhm, long_outbox_hhm, short_p2_true_bias_bool, long_p2_true_bias_bool, \\\n","          short_tp_1, short_tp_0, long_tp_1, long_tp_0, short_out_1, short_out_0, long_out_1, long_out_0, short_ep2_0, long_ep2_0 = \\\n","      get_wave_bias_v5(res_df, config, high, low, len_df, short_net_p1_idx_arr, long_net_p1_idx_arr, short_p2_idx_arr, long_p2_idx_arr, short_obj, long_obj)\n","\n","    # print(\"get_wave_bias elapsed time :\", time.time() - start_0)\n","\n","    len_short, len_long = len(short_p1_openi_idx), len(long_p1_openi_idx)\n","\n","    # ------ plot_data ------ #\n","    try:\n","        # start_0 = time.time()\n","        if len_short == 0:\n","            short_pr = []\n","            gs_idx += 1\n","        else:\n","            short_tr = short_tr_arr.mean()\n","            short_pr, short_liqd = get_pr_v4(OrderSide.SELL, high, low, short_obj, short_tpout_arr, short_lvrg_arr, short_fee_arr, p_ranges,\n","                                             p_qty_ratio, inversion)\n","            short_total_pr = to_total_pr(len_df, short_pr, short_obj[-2])\n","            short_cum_pr = np.cumprod(short_total_pr)\n","            short_hlm = hlm(short_pr, short_p2_true_bias_bool)\n","            short_trade_ticks = np.mean(short_obj[-2] - short_obj[-1])\n","            if signi:\n","                short_idep_res_obj = (short_tpbox_p2exec_hhm, short_hlm) + get_res_info_nb_v2(sample_len, short_pr, short_total_pr, short_cum_pr, short_liqd)\n","            else:\n","                gs_idx = plot_info_v8(gs, gs_idx, len_df, sample_len, short_tr, short_tpbox_hhm, short_tpbox_p2exec_hhm, short_outbox_hhm, short_hlm, short_trade_ticks, short_net_p1_frq, short_pr, short_total_pr,\n","                                      short_cum_pr, short_liqd, short_lvrg_arr.mean(), title_position, fontsize)\n","        # print(\"short plot_data elapsed time :\", time.time() - start_0)\n","\n","    except Exception as e:\n","        gs_idx += 1\n","        print(\"error in short plot_data :\", e)\n","\n","    try:\n","        # start_0 = time.time()\n","        if len_long == 0:\n","            long_pr = []\n","            gs_idx += 1\n","        else:\n","            long_tr = long_tr_arr.mean()\n","            long_pr, long_liqd = get_pr_v4(OrderSide.BUY, high, low, long_obj, long_tpout_arr, long_lvrg_arr, long_fee_arr, p_ranges, p_qty_ratio,\n","                                           inversion)\n","            long_total_pr = to_total_pr(len_df, long_pr, long_obj[-2])\n","            long_cum_pr = np.cumprod(long_total_pr)\n","            # long_hhm = long_net_p1_hhm\n","            long_hlm = hlm(long_pr, long_p2_true_bias_bool)\n","            long_trade_ticks = np.mean(long_obj[-2] - long_obj[-1])\n","            if signi:\n","                long_idep_res_obj = (long_tpbox_p2exec_hhm, long_hlm) + get_res_info_nb_v2(sample_len, long_pr, long_total_pr, long_cum_pr, long_liqd)\n","            else:\n","                gs_idx = plot_info_v8(gs, gs_idx, len_df, sample_len, long_tr, long_tpbox_hhm, long_tpbox_p2exec_hhm, long_outbox_hhm, long_hlm, long_trade_ticks, long_net_p1_frq, long_pr, long_total_pr,\n","                                      long_cum_pr, long_liqd, long_lvrg_arr.mean(), title_position, fontsize)\n","        # print(\"long plot_data elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","        gs_idx += 1\n","        print(\"error in long plot_data :\", e)\n","\n","    try:\n","        # start_0 = time.time()\n","        if len_short * len_long == 0:\n","            both_pr = []\n","            gs_idx += 1\n","        else:\n","            both_tr = (short_tr + long_tr) / 2\n","            both_pr = np.vstack((short_pr, long_pr))  # for 2d arr, obj 를 1d 로 만들지 않는 이상, pr 은 2d 유지될 것\n","            both_total_pr = to_total_pr(len_df, both_pr, both_obj[-2])\n","            both_cum_pr = np.cumprod(both_total_pr)\n","            both_liqd = min(short_liqd, long_liqd)\n","            both_p2_true_bias_bool = np.hstack((short_p2_true_bias_bool, long_p2_true_bias_bool))  # hstack for 1d arr, vstack for 2d arr\n","            both_tpbox_hhm = (short_tpbox_hhm + long_tpbox_hhm) / 2\n","            both_tpbox_p2exec_hhm, both_hlm = (short_tpbox_p2exec_hhm + long_tpbox_p2exec_hhm) / 2, (short_hlm + long_hlm) / 2\n","            both_outbox_hhm = (short_outbox_hhm + long_outbox_hhm) / 2\n","            both_trade_ticks = np.mean(both_obj[-2] - both_obj[-1])\n","            both_net_p1_frq = short_net_p1_frq + long_net_p1_frq\n","            if signi:\n","                both_idep_res_obj = (both_tpbox_p2exec_hhm, both_hlm) + get_res_info_nb_v2(sample_len, both_pr, both_total_pr, both_cum_pr, both_liqd)\n","            else:\n","                gs_idx = plot_info_v8(gs, gs_idx, len_df, sample_len, both_tr, both_tpbox_hhm, both_tpbox_p2exec_hhm, both_outbox_hhm, both_hlm, both_trade_ticks, both_net_p1_frq, both_pr, both_total_pr,\n","                                      both_cum_pr, both_liqd, lvrg_arr.mean(), title_position, fontsize)\n","        # print(\"both plot_data elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","        gs_idx += 1\n","        print(\"error in both plot_data :\", e)\n","\n","    if not signi:\n","        if len_short * len_long > 0:\n","            for obj, bias_arr, cum_pr in zip([short_obj, long_obj, both_obj], [short_p2_true_bias_bool, long_p2_true_bias_bool, both_p2_true_bias_bool],\n","                                             [short_cum_pr, long_cum_pr, both_cum_pr]):\n","                try:\n","                    # start_0 = time.time()\n","                    gs_idx = frq_dev_plot_v4(gs, gs_idx, len_df, sample_len, obj[-2], bias_arr, cum_pr[-1], fontsize)\n","                    # print(\"frq_dev_plot elapsed time :\", time.time() - start_0)\n","                except Exception as e:\n","                    gs_idx += 1\n","                    print(\"error in frq_dev_plot :\", e)\n","            plt.show()\n","            plt.close()\n","\n","        return short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_tr_arr, short_p2_true_bias_bool, short_p2_idx_arr, short_tp_1, short_tp_0, short_out_1, short_out_0, short_ep2_0, \\\n","               long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_tr_arr, long_p2_true_bias_bool, long_p2_idx_arr, long_tp_1, long_tp_0, long_out_1, long_out_0, long_ep2_0  # long_net_p1_idx_arr long_p2_idx_arr\n","\n","    else:\n","        return [short_idep_res_obj[:-1], long_idep_res_obj[:-1], both_idep_res_obj[:-1]]"],"metadata":{"id":"6G92q_bExTVn"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oE5zkT75Beiy"},"outputs":[],"source":["\n","# ------------ plot survey_res ------------ #\n","title_list = [\"short\", \"long\", \"both\"]\n","sub_title_list = ['prcn', 'wb', 'len_pr', 'dpf', 'wr', 'sr', 'acc_pr', 'sum_pr', 'min_pr', 'liqd', 'acc_mdd', 'sum_mdd']\n","space_ = \" \" * 120\n","\n","fig = plt.figure(figsize=(24, 8))\n","plt.style.use('dark_background')\n","gs = gridspec.GridSpec(nrows=1,\n","                        ncols=3,\n","                        # height_ratios=[1, 1, 1]\n","                      )\n","# nrows, ncols, h_r = 3, 3, [1, 1, 1]\n","nrows, ncols, h_r = 3, 4, [1, 1, 1]\n","# nrows, ncols, h_r = 4, 3, [1, 1, 1, 1]\n","# if d_idx == 0:\n","# else:\n","  # nrows, ncols, h_r = 2, 2, [1, 1]\n","\n","for d_idx, (title_name, survey_res) in enumerate(zip(title_list, survey_res_list)):  \n","  inner_gs = gs[d_idx].subgridspec(nrows=nrows,\n","                        ncols=ncols,\n","                        height_ratios=h_r\n","                      )\n","  for in_idx, (data_, sub_title) in enumerate(zip(survey_res.T, sub_title_list)):\n","    plt.subplot(inner_gs[in_idx])\n","    data = data_.ravel()\n","    valid_idx = ~np.isnan(data)\n","    if np.sum(valid_idx) > 0:\n","      if type(val_list[0]) == str:\n","        x, y = np.arange(len(val_list))[valid_idx], data[valid_idx]\n","      else:\n","        x, y = val_list[valid_idx], data[valid_idx]\n","      plt.plot(x, y)  # 앞에서부터 len(result) 만큼만    \n","      plt.title(sub_title + '_{:.2f}'.format(x[np.argmax(y)]))\n","    else:\n","      plt.title(sub_title)\n","\n","plt.suptitle(space_.join(title_list))\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pbYUlJl34ImU"},"outputs":[],"source":["# ------ open validation ------ #\n","pos_side = \"SELL\" # SELL BUY\n","\n","if pos_side == \"SELL\":\n","  open_ = res_df['short_open1_{}'.format(config.selection_id)].to_numpy()\n","  open_ts = list(map(lambda x : str(x), res_df.index[open_ == 1]))  \n","else:\n","  open_ = res_df['long_open1_{}'.format(config.selection_id)].to_numpy()\n","  open_ts = list(map(lambda x : str(x), res_df.index[open_ == 1]))  "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wyYMYcxx4ImV"},"outputs":[],"source":["pos_index = open_info_df1.side == pos_side\n","for ts in res_df.index[open_info_df1.index[pos_index]]:\n","  print(ts)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6YcqQQzsl6Ys"},"outputs":[],"source":["\n","def hlm(pr_list, true_bool):   # true_pr in true_bias / true_bias\n","  true_bias_pr = pr_list[true_bool].ravel()\n","  print(\"len(pr_list) :\", len(pr_list))\n","  print(\"len(true_bias_pr) :\", len(true_bias_pr))\n","  print(\"np.sum(pr_list > 1) :\", np.sum(pr_list > 1))\n","  print(\"np.sum(true_bias_pr > 1) :\", np.sum(true_bias_pr > 1))\n","  return np.sum(true_bias_pr > 1) / len(true_bias_pr)  # 차원을 고려한 계산"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"t7a5Hyyyd5Lk"},"outputs":[],"source":["\n","def get_wave_bias_v5_1(res_df, config, high, low, len_df, short_net_p1_idx_arr, long_net_p1_idx_arr, short_p2_idx_arr, long_p2_idx_arr, short_obj, long_obj):\n","\n","    short_net_p1_idx = short_net_p1_idx_arr.astype(int) #.reshape(-1, 1)\n","    short_p1_idx = short_obj[-1].astype(int).ravel()\n","    short_p2_idx = short_p2_idx_arr.astype(int).ravel() #.reshape(-1, 1)\n","    short_en_idx = short_obj[2].astype(int)\n","\n","    short_prime_net_p1_bool = short_net_p1_idx - pd.Series(short_net_p1_idx).shift(1).to_numpy() > 1\n","    short_prime_net_p1_bool[0] = True\n","    short_prime_net_p1_idx = short_net_p1_idx[short_prime_net_p1_bool]\n","    \n","    short_prime_p2_bool = short_p2_idx - pd.Series(short_p2_idx).shift(1).to_numpy() > 1\n","    short_prime_p2_bool[0] = True\n","    short_prime_p2_idx = short_p2_idx[short_prime_p2_bool]\n","    \n","    short_tp_1 = ffill_line(res_df['short_tp_1_{}'.format(config.selection_id)].to_numpy(), short_prime_net_p1_idx)  # net_p1_idx ~ net_p1_idx' 사이에 대한 momentum 조사 (net 이유는 logic's validation)\n","    short_tp_0 = ffill_line(res_df['short_tp_0_{}'.format(config.selection_id)].to_numpy(), short_prime_net_p1_idx)\n","    short_out_1 = ffill_line(res_df['short_out_1_{}'.format(config.selection_id)].to_numpy(), short_prime_p2_idx)  # 체결된, p2_idx ~ p2_idx' 사이에 대한 momentum 조사\n","    short_out_0 = ffill_line(res_df['short_out_0_{}'.format(config.selection_id)].to_numpy(), short_prime_p2_idx)\n","    short_ep2_0 = ffill_line(res_df['short_ep2_0_{}'.format(config.selection_id)].to_numpy(), short_prime_p2_idx)\n","    # short_net_wave_1 = ffill_line(res_df['short_wave_1_{}'.format(config.selection_id)].to_numpy(), short_op_idx)  # en_idx 에 sync 된 open_idx 를 사용해야함\n","    # short_net_wave_0 = ffill_line(res_df['short_wave_0_{}'.format(config.selection_id)].to_numpy(), short_op_idx)\n","\n","    long_net_p1_idx = long_net_p1_idx_arr.astype(int) #.reshape(-1, 1)\n","    long_p1_idx = long_obj[-1].astype(int).ravel()\n","    long_p2_idx = long_p2_idx_arr.astype(int).ravel() #.reshape(-1, 1)\n","    long_en_idx = long_obj[2].astype(int)\n","\n","    long_prime_net_p1_bool = long_net_p1_idx - pd.Series(long_net_p1_idx).shift(1).to_numpy() > 1\n","    long_prime_net_p1_bool[0] = True\n","    long_prime_net_p1_idx = long_net_p1_idx[long_prime_net_p1_bool]\n","    \n","    long_prime_p2_bool = long_p2_idx - pd.Series(long_p2_idx).shift(1).to_numpy() > 1\n","    long_prime_p2_bool[0] = True\n","    long_prime_p2_idx = long_p2_idx[long_prime_p2_bool]\n","    \n","    long_tp_1 = ffill_line(res_df['long_tp_1_{}'.format(config.selection_id)].to_numpy(), long_prime_net_p1_idx)\n","    long_tp_0 = ffill_line(res_df['long_tp_0_{}'.format(config.selection_id)].to_numpy(), long_prime_net_p1_idx)\n","    long_out_1 = ffill_line(res_df['long_out_1_{}'.format(config.selection_id)].to_numpy(), long_prime_p2_idx)  # 체결된, p2_idx ~ p2_idx' 사이에 대한 momentum 조사\n","    long_out_0 = ffill_line(res_df['long_out_0_{}'.format(config.selection_id)].to_numpy(), long_prime_p2_idx)\n","    long_ep2_0 = ffill_line(res_df['long_ep2_0_{}'.format(config.selection_id)].to_numpy(), long_prime_p2_idx)\n","\n","    short_unq_p1_idx = np.unique(short_p1_idx)  #.reshape(-1, 1)   # 통일성을 위해 2d 로 설정\n","    long_unq_p1_idx = np.unique(long_p1_idx)  #.reshape(-1, 1)\n","\n","    bias_info_tick = config.tr_set.bias_info_tick\n","\n","    # print(\"long_net_p1_idx.shape :\", long_net_p1_idx.shape)\n","    # print(\"long_en_idx.shape :\", long_en_idx.shape)\n","\n","    # ================== touch idx ================== #\n","    # 1. min 에 초점을 맞추는 거니까, touch 없을시 len_df 로 설정\n","    # 2. future_data 사용이니까, shift(-bias_info_tick) 설정\n","    # 3. entry 다음 idx 부터 -> tp & out 체결 logic 이 현재 entry_idx 부터 되어있어서 취소\n","    # Todo, high 와 low 중 어디에 먼저닿느냐가 중요함을 key 로 잡고만든 logic 임\n","    len_df_range = np.arange(len_df)\n","    last_idx = len_df - 1  # nan 발생하면 대소 비교로 hhm 확인이 불가능해짐\n","    shift_range = bias_info_tick - 1  # entry_idx 까지 포함해서 wave_bias check\n","\n","    # ------------ pair & idxs ------------ #\n","    short_net_p1_pair = list(zip(short_net_p1_idx, np.append(short_net_p1_idx[1:], last_idx)))\n","    long_net_p1_pair = list(zip(long_net_p1_idx, np.append(long_net_p1_idx[1:], last_idx)))\n","\n","    short_p2_pair = list(zip(short_p2_idx, np.append(short_p2_idx[1:], last_idx)))\n","    long_p2_pair = list(zip(long_p2_idx, np.append(long_p2_idx[1:], last_idx)))\n","\n","    short_tp_1_touch_idxs = np.where(low <= short_tp_1, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    short_tp_0_touch_idxs = np.where(high >= short_tp_0, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    long_tp_1_touch_idxs = np.where(high >= long_tp_1, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    long_tp_0_touch_idxs = np.where(low <= long_tp_0, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","\n","    short_out_1_touch_idxs = np.where(low <= short_out_1, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    short_out_0_touch_idxs = np.where(high >= short_out_0, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    long_out_1_touch_idxs = np.where(high >= long_out_1, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","    long_out_0_touch_idxs = np.where(low <= long_out_0, len_df_range, last_idx)   #.rolling(bias_info_tick, min_periods=1).min().shift(-shift_range).to_numpy()\n","\n","    # ------------ min touch_idx ------------ #\n","    short_tp_1_touch_idx = get_touch_idx_fill(short_tp_1_touch_idxs, short_net_p1_pair, short_net_p1_idx, len_df)  # pair means 구간\n","    short_tp_0_touch_idx = get_touch_idx_fill(short_tp_0_touch_idxs, short_net_p1_pair, short_net_p1_idx, len_df)\n","    long_tp_1_touch_idx = get_touch_idx_fill(long_tp_1_touch_idxs, long_net_p1_pair, long_net_p1_idx, len_df)\n","    long_tp_0_touch_idx = get_touch_idx_fill(long_tp_0_touch_idxs, long_net_p1_pair, long_net_p1_idx, len_df)\n","\n","    short_out_1_touch_idx = get_touch_idx_fill(short_out_1_touch_idxs, short_p2_pair, short_p2_idx, len_df)  # pair means 구간\n","    short_out_0_touch_idx = get_touch_idx_fill(short_out_0_touch_idxs, short_p2_pair, short_p2_idx, len_df)\n","    long_out_1_touch_idx = get_touch_idx_fill(long_out_1_touch_idxs, long_p2_pair, long_p2_idx, len_df)\n","    long_out_0_touch_idx = get_touch_idx_fill(long_out_0_touch_idxs, long_p2_pair, long_p2_idx, len_df)\n","\n","    # ------------ point's touch_idx ------------ #\n","    short_tp_1_net_p1_touch_idx = short_tp_1_touch_idx[short_net_p1_idx]   # for tp_box's net_hhm\n","    short_tp_0_net_p1_touch_idx = short_tp_0_touch_idx[short_net_p1_idx]\n","    long_tp_1_net_p1_touch_idx = long_tp_1_touch_idx[long_net_p1_idx]\n","    long_tp_0_net_p1_touch_idx = long_tp_0_touch_idx[long_net_p1_idx]\n","    # print(\"long_tp_1_net_p1_touch_idx :\", long_tp_1_net_p1_touch_idx)\n","\n","    short_tp_1_unq_p1_touch_idx = short_tp_1_touch_idx[short_unq_p1_idx]    # p2 까지 체결된 p1's hhm\n","    short_tp_0_unq_p1_touch_idx = short_tp_0_touch_idx[short_unq_p1_idx]\n","    long_tp_1_unq_p1_touch_idx = long_tp_1_touch_idx[long_unq_p1_idx]\n","    long_tp_0_unq_p1_touch_idx = long_tp_0_touch_idx[long_unq_p1_idx]\n","\n","    short_tp_1_p2_touch_idx = short_tp_1_touch_idx[short_p2_idx]    # hlm 을 위한 hhm (on p2)\n","    short_tp_0_p2_touch_idx = short_tp_0_touch_idx[short_p2_idx]\n","    long_tp_1_p2_touch_idx = long_tp_1_touch_idx[long_p2_idx]\n","    long_tp_0_p2_touch_idx = long_tp_0_touch_idx[long_p2_idx]\n","\n","    short_out_1_p2_touch_idx = short_out_1_touch_idx[short_p2_idx]   # for out_box's executed_hhm\n","    short_out_0_p2_touch_idx = short_out_0_touch_idx[short_p2_idx]\n","    long_out_1_p2_touch_idx = long_out_1_touch_idx[long_p2_idx]\n","    long_out_0_p2_touch_idx = long_out_0_touch_idx[long_p2_idx]\n","\n","    # ------------------ bias_bool & hhm ------------------ #\n","    short_net_p1_true_bias_bool = short_tp_1_net_p1_touch_idx < short_tp_0_net_p1_touch_idx  # true_bias 의 조건\n","    short_net_p1_false_bias_bool = short_tp_1_net_p1_touch_idx >= short_tp_0_net_p1_touch_idx  # false_bias 의 조건, ~true_bias_bool 와 같지 않음, why ..? = en_idx\n","    long_net_p1_true_bias_bool = long_tp_1_net_p1_touch_idx < long_tp_0_net_p1_touch_idx\n","    long_net_p1_false_bias_bool = long_tp_1_net_p1_touch_idx >= long_tp_0_net_p1_touch_idx\n","\n","    short_unq_p1_true_bias_bool = short_tp_1_unq_p1_touch_idx < short_tp_0_unq_p1_touch_idx  # true_bias 의 조건\n","    short_unq_p1_false_bias_bool = short_tp_1_unq_p1_touch_idx >= short_tp_0_unq_p1_touch_idx  # false_bias 의 조건, ~true_bias_bool 와 같지 않음, why ..? = en_idx    \n","    long_unq_p1_true_bias_bool = long_tp_1_unq_p1_touch_idx < long_tp_0_unq_p1_touch_idx\n","    long_unq_p1_false_bias_bool = long_tp_1_unq_p1_touch_idx >= long_tp_0_unq_p1_touch_idx\n","\n","    short_p2_true_bias_bool = short_tp_1_p2_touch_idx < short_tp_0_p2_touch_idx\n","    short_p2_false_bias_bool = short_tp_1_p2_touch_idx >= short_tp_0_p2_touch_idx\n","    long_p2_true_bias_bool = long_tp_1_p2_touch_idx < long_tp_0_p2_touch_idx\n","    long_p2_false_bias_bool = long_tp_1_p2_touch_idx >= long_tp_0_p2_touch_idx\n","\n","    short_p2_out_true_bias_bool = short_out_1_p2_touch_idx < short_out_0_p2_touch_idx\n","    short_p2_out_false_bias_bool = short_out_1_p2_touch_idx >= short_out_0_p2_touch_idx\n","    long_p2_out_true_bias_bool = long_out_1_p2_touch_idx < long_out_0_p2_touch_idx\n","    long_p2_out_false_bias_bool = long_out_1_p2_touch_idx >= long_out_0_p2_touch_idx\n","\n","    short_net_p1_hhm = hhm(short_net_p1_true_bias_bool, short_net_p1_false_bias_bool)\n","    long_net_p1_hhm = hhm(long_net_p1_true_bias_bool, long_net_p1_false_bias_bool)\n","\n","    short_p1_hhm = hhm(short_unq_p1_true_bias_bool, short_unq_p1_false_bias_bool)\n","    long_p1_hhm = hhm(long_unq_p1_true_bias_bool, long_unq_p1_false_bias_bool)\n","\n","    # short_p2_hhm = hhm(short_p2_true_bias_bool, short_p2_false_bias_bool)\n","    # long_p2_hhm = hhm(long_p2_true_bias_bool, long_p2_false_bias_bool)\n","\n","    short_out_hhm = hhm(short_p2_out_true_bias_bool, short_p2_out_false_bias_bool)\n","    long_out_hhm = hhm(long_p2_out_true_bias_bool, long_p2_out_false_bias_bool)\n","\n","    # print(\"short_net_p1_hhm, short_p2_hhm, short_out_hhm :\", short_net_p1_hhm, short_p2_hhm, short_out_hhm)\n","\n","    return short_net_p1_hhm, long_net_p1_hhm, short_p1_hhm, long_p1_hhm, short_out_hhm, long_out_hhm, short_p2_true_bias_bool, long_p2_true_bias_bool, \\\n","          short_tp_1[short_en_idx], short_tp_0[short_en_idx], long_tp_1[long_en_idx], long_tp_0[long_en_idx], \\\n","          short_out_1[short_en_idx], short_out_0[short_en_idx], long_out_1[long_en_idx], long_out_0[long_en_idx], short_ep2_0[short_en_idx], long_ep2_0[long_en_idx]   # plot_check 을 위해 en_idx 넣음\n","          "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dsI-R8Zz7ls1"},"outputs":[],"source":["\n","        # tr_arr = res_df['{}_tr_{}'.format(side_pos, selection_id)].to_numpy()\n","\n","        # ------ point1 & 2's tp_j ------ #\n","        # point_idxgap = point_idxgap_arr[op_idx]\n","        # if np.isnan(point_idxgap):\n","        #     continue\n","        # else:\n","        #     # ------ allow point2 only next to point1 ------ #\n","        #     open_arr = res_df['{}_open_{}'.format(side_pos, selection_id)].to_numpy()\n","        #     tp_j = int(op_idx - point_idxgap)\n","        #     if np.sum(open_arr[tp_j:op_idx]) != 0:\n","        #         continue"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":157},"executionInfo":{"elapsed":350,"status":"ok","timestamp":1652751452213,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"gMur2u8WeQ2K","outputId":"7b506c38-7a8f-4bd1-a021-8a065d009882"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 1152x144 with 2 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# ------ bias frquency ------ #\n","len_df = len(res_df)\n","\n","plt.figure(figsize=(16, 2))\n","\n","ax1 = plt.subplot(121)\n","plt.fill_between(short_obj[-2].ravel(), 0, 1, where=short_bias_arr.ravel() > 0,\n","                facecolor='#00ff00', alpha=1, transform=ax1.get_xaxis_transform())   # 00ff00\n","# plt.fill_between(short_obj[-2].ravel(), 0, 1, where=short_bias_arr.ravel() < 1,\n","#                 facecolor='#ff00ff', alpha=1, transform=ax1.get_xaxis_transform())\n","\n","ax2 = plt.subplot(122)\n","plt.fill_between(long_obj[-2].ravel(), 0, 1, where=long_bias_arr.ravel() > 0,\n","                facecolor='#00ff00', alpha=1, transform=ax2.get_xaxis_transform())\n","plt.fill_between(long_obj[-2].ravel(), 0, 1, where=long_bias_arr.ravel() < 1,\n","                facecolor='#ff00ff', alpha=1, transform=ax2.get_xaxis_transform())\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":157},"executionInfo":{"elapsed":872,"status":"ok","timestamp":1652756329304,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"eoXMxRm3qdz2","outputId":"98c90b55-4c14-402c-e2d4-d7b88f9e2e62"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 1152x144 with 2 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# ------ bias frquency ------ #\n","len_df = len(res_df)\n","\n","plt.figure(figsize=(16, 2))\n","\n","ax1 = plt.subplot(121)\n","plt.fill_between(short_obj[-2].ravel(), 0, 1, where=short_bias_arr.ravel() > 0,\n","                facecolor='#00ff00', alpha=1, transform=ax1.get_xaxis_transform())   # 00ff00\n","# plt.fill_between(short_obj[-2].ravel(), 0, 1, where=short_bias_arr.ravel() < 1,\n","#                 facecolor='#ff00ff', alpha=1, transform=ax1.get_xaxis_transform())\n","\n","ax2 = plt.subplot(122)\n","plt.vlines(long_obj[-2][long_bias_arr], ymin=0, ymax=1, color='#00ff00')\n","plt.vlines(long_obj[-2][~long_bias_arr], ymin=0, ymax=1, color='#ff00ff')\n","# [plt.axvline(x_, color='#ff00ff') for x_, bias_ in zip(long_obj[-2], long_bias_arr) if not bias_]\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dm7ZqzS9vqhm"},"outputs":[],"source":["%timeit -n1 -r10 plt.vlines(long_obj[-2][long_bias_arr], ymin=0, ymax=1, color='#00ff00')  # 528 ms per loop --> 8.71 ms per loop\n","%timeit -n1 -r10 [plt.axvline(x_, color='#00ff00') for x_, bias_ in zip(long_obj[-2], long_bias_arr) if bias_]\n","\n","# np.sum(long_bias_arr == ~long_bias_arr)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qOE2YSzntx8v"},"outputs":[],"source":["# %timeit -n1 -r10 [plt.axvline(x_) for x_, bias_ in zip(long_obj[-2].ravel(), long_bias_arr.ravel()) if bias_]\n","%timeit -n1 -r10 plt.fill_between(long_obj[-2].ravel(), 0, 1, where=long_bias_arr.ravel() > 0, facecolor='#00ff00', alpha=1, transform=ax2.get_xaxis_transform())"]},{"cell_type":"markdown","metadata":{"id":"dHFkv6Ar1ojU"},"source":["## plot_check_v3"]},{"cell_type":"code","execution_count":25,"metadata":{"id":"rMIwv1Nr1ojX","executionInfo":{"status":"ok","timestamp":1663111861616,"user_tz":-540,"elapsed":339,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# ------------------ plot_config ------------------ #\n","save_mode = 0\n","\n","front_plot = 0    # 0 : p1_tick, 1 : p2_tick\n","back_plot = 4     # 0 : post_plot_size, 1 : open, 2 : p2_tick, 3 : ep_tick, 4 : tp_tick\n","x_max = 300       # back_plot : 0 사용시, custom x_max 반영됨\n","\n","bias_plot = 0     # 1 : true_bias only, -1 : false_bias only, 0 : both\n","\n","pr_descend = 1   # 1 : 큰 pr 부터, -1 : 작은 pr 부터, 0 : 순서대로\n","\n","position = 1      # -1 : short, 0 & 1 : long\n","\n","x_margin_mult = 1/30\n","y_margin_mult = 1/30  # 0 \n","\n","prev_plotsize = 100 #  150 100 20 500 1000\n","post_plotsize = 200 #\n","\n","inversion = 0\n","hedge = 0\n","\n","# ------ show or save ------ #\n","if save_mode:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".ftr\", \"\")\n","  shutil.rmtree(plot_check_dir, ignore_errors=True)  # remove existing dir\n","  os.makedirs(plot_check_dir)\n","  print(plot_check_dir)\n","else:\n","  plot_check_dir = None\n","\n","# ------------ 한 방향에 대해 plot_check 함 (by position var.) ------------ #\n","#   obj by position  \n","if position == -1:\n","  pos_str = \"SELL\"\n","  pr_, obj_ = short_pr, short_obj\n","  arr_list = [short_p2_idx_arr, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_bias_arr, short_net_p1_bias_tick, short_tp_1, short_tp_0, short_out_1, short_out_0, short_ep2_0]\n","else:   # both option currently not supported\n","  pos_str = \"BUY\"\n","  pr_, obj_ = long_pr, long_obj\n","  arr_list = [long_p2_idx_arr, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_bias_arr, long_net_p1_bias_tick, long_tp_1, long_tp_0, long_out_1, long_out_0, long_ep2_0]\n","\n","if pr_descend:\n","  if pr_descend == -1:\n","    pr_descend = 0\n","  pr, obj, [p2_idx_arr, lvrg_arr, fee_arr, tpout_arr, bias_arr, bias_tick, tp_1, tp_0, out_1, out_0, ep2_0] = sort_bypr_v4(pr_, obj_, arr_list, descending=pr_descend)  # --> pr_descend 의 의미가 사라짐.. (false -> true plot 으로 이동한 것뿐)\n","else:\n","  pr, obj, [p2_idx_arr, lvrg_arr, fee_arr, tpout_arr, bias_arr, bias_tick, tp_1, tp_0, out_1, out_0, ep2_0] = pr_, obj_, arr_list\n","\n","pr_msg = \"%s\\n {} ~ {} -> {:.5f}\\n lvrg : {}\\n fee : {:.4f}\" % (pos_str)  # = data_window, pos_str 으로 이곳에서 정의함\n","\n","try:   # wave_range 단독 실행의 경우 tr_arr 이 존재하지 않기 때문에 try 처리함\n","  res_df['short_tr_{}'.format(selection_id)].iloc[short_obj[-1].astype(int).ravel()] = short_tr_arr\n","  res_df['long_tr_{}'.format(selection_id)].iloc[long_obj[-1].astype(int).ravel()] = long_tr_arr\n","except:\n","  pass\n","\n","if front_plot == 0:\n","  front_idx = obj[4]      # left_margin 기준 - open_idx\n","else:\n","  front_idx = p2_idx_arr  # left_margin 기준 - p2_idx\n","\n","left_end_idx = front_idx - prev_plotsize  \n","right_end_idx = obj[3] + post_plotsize\n","invalid_left_end = np.sum(left_end_idx < 0)\n","\n","np_plot_params = np.hstack((left_end_idx, right_end_idx, pr, *obj, p2_idx_arr, lvrg_arr, fee_arr, tpout_arr, tp_1, tp_0, out_1, out_0, ep2_0))[invalid_left_end:]  # all arr should have same dimension\n","# plot_idx = np.full(len(np_plot_params), True)\n","\n","if bias_plot:\n","  if bias_plot == 1:\n","    bias_idx = bias_arr[invalid_left_end:].ravel()  # true_bias 만 plot\n","  else:\n","    bias_idx = ~bias_arr[invalid_left_end:].ravel()  # false_bias 만 plot\n","  \n","  # trendy_idx = bias_tick[invalid_left_end:] < config.tr_set.bias_tick  # temp location\n","\n","  np_plot_params = np_plot_params[bias_idx] #  * trendy_idx]  "]},{"cell_type":"markdown","metadata":{"id":"-4CXGqEN1ojY"},"source":["### session_plot"]},{"cell_type":"code","execution_count":26,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":917,"status":"ok","timestamp":1663111863900,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"2bjxKCIh1ojZ","outputId":"621cc836-2d83-4934-996c-f5e3487a273e"},"outputs":[{"output_type":"stream","name":"stderr","text":["/content/drive/My Drive/Colab Notebooks/JnQ/funcs/funcs_plot_check.py:11: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  step_col_arr = np.array(col_list)\n"]}],"source":["selection_id = config.selection_id\n","\n","# ============ make col_idx_dict config ============ #\n","nonstep_col_list = []\n","step_col_list = []\n","step_col_list2 = []\n","stepmark_col_list = []\n","data_window_p1_col_list = []\n","data_window_p2_col_list = []\n","\n","# ============ nonstep_col_list - add info(col, alpha, color, linewidth) ============ #\n","# nonstep_col_list.append([['close'], 1, '#ffffff', 2])\n","\n","# ============ step_col_list - add info(col, alpha, color, linewidth) ============ #\n","# ------ htf_candle ------ #\n","# hc_tf1 = '5T'\n","hc_tf2 = '15T'\n","\n","# step_col_list.append([['open_{}'.format(hc_tf1), 'close_{}'.format(hc_tf1)], 1, '#ffffff', 2])\n","step_col_list.append([['open_{}'.format(hc_tf2), 'close_{}'.format(hc_tf2)], 1, '#ffffff', 4])\n","\n","# ------ resi_sup ------ #\n","# rs_tf = 'T'\n","# step_col_list.append([['resi_{}'.format(rs_tf), 'sup_{}'.format(rs_tf)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['resi_out_{}'.format(rs_tf), 'sup_out_{}'.format(rs_tf)], 1, 'dodgerblue', 2])\n","\n","# ------ wave_base ------ #\n","wave_itv1 = config.tr_set.wave_itv1\n","wave_period1 = config.tr_set.wave_period1\n","wave_itv2 = config.tr_set.wave_itv2\n","wave_period2 = config.tr_set.wave_period2\n","\n","# step_col_list.append([['dc_base_{}{}'.format(wave_itv1, wave_period1)], 1, '#5b9cf6', 1])\n","# step_col_list.append([['dc_base_{}{}'.format(wave_itv2, wave_period2)], 1, '#5b9cf6', 5])\n","\n","# step_col_list.append([['wave_low_fill_{}{}'.format(wave_tf, wave_period)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['wave_high_fill_{}{}'.format(wave_tf, wave_period)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['dc_upper_{}{}'.format(wave_tf, wave_period), 'dc_lower_{}{}'.format(wave_tf, wave_period)], 1, '#ffeb3b', 1])\n","\n","# ------ dc ------ #\n","dc_tf1 = 'T'\n","dc_period1 = 20 # wave_period2  # 20\n","dc_tf2 = '5T'\n","dc_period2 = 20 # config.loc_set.point2.csd_period if config.loc_set.point2.csd_period != \"None\" else wave_period2 \n","dc_tf3 = '15T'\n","dc_period3 = 20\n","dc_tf4 = 'H'\n","dc_period4 = 20\n","\n","# step_col_list.append([['dc_upper_{}{}'.format(dc_tf1, dc_period1), 'dc_lower_{}{}'.format(dc_tf1, dc_period1)], 1, '#ff00ff', 1]),  # inner #ffeb3b\n","# step_col_list.append([['dc_upper_{}{}'.format(dc_tf2, dc_period2), 'dc_lower_{}{}'.format(dc_tf2, dc_period2)], 1, '#ffee58', 2]),  # inner #ffeb3b\n","step_col_list.append([['dc_base_{}{}'.format(dc_tf1, dc_period1)], 1, '#5b9cf6', 1]) # ffee58 5b9cf6 \n","step_col_list.append([['dc_base_{}{}'.format(dc_tf2, dc_period2)], 1, '#5b9cf6', 3]) # ffee58 5b9cf6\n","step_col_list.append([['dc_base_{}{}'.format(dc_tf3, dc_period3)], 1, '#5b9cf6', 5]) # ffee58 5b9cf6\n","step_col_list.append([['dc_base_{}{}'.format(dc_tf4, dc_period4)], 1, '#5b9cf6', 7]) # ffee58 5b9cf6\n","\n","# ------ bb ------ #\n","bb_tf1 = 'T'\n","bb_period1 = 60\n","\n","# step_col_list.append([['bb_upper_{}{}'.format(bb_tf1, bb_period1), 'bb_lower_{}{}'.format(bb_tf1, bb_period1)], 1, '#ffffff', 1])\n","# step_col_list.append([['bb_upper2_{}{}'.format(bb_tf1, bb_period1), 'bb_lower2_{}{}'.format(bb_tf1, bb_period1)], 1, '#ffffff', 1])\n","# step_col_list.append([['bb_upper3_{}{}'.format(bb_tf1, bb_period1), 'bb_lower3_{}{}'.format(bb_tf1, bb_period1)], 1, '#ffffff', 1])\n","# step_col_list.append([['bb_base_{}{}'.format(bb_tf1, bb_period1)], 1, '#00ff00', 1])\n","\n","\n","# ------ ma / ema ------ #\n","# step_col_list.append([['ema_5T'], 1, '#03ed30', 2])\n","\n","ma_period = 60\n","step_col_list.append([['ma_T{}'.format(ma_period)], 1, '#03ed30', 2])\n","# step_col_list.append([['long_ma_T{}_-1'.format(ma_period)], 1, '#03ed30', 2])\n","\n","# ============ step_col_list2 - add info(col, alpha, color, linewidth) ============ #\n","# ------ cci ------ #\n","step_col_list2.append([['cci_{}{}'.format(wave_itv1, wave_period1)], 1, '#00ff00', 3])\n","step_col_list2.append([['cci_{}{}'.format(wave_itv2, wave_period2)], 1, '#00ff00', 1])\n","\n","# ------ stoch ------ #\n","# step_col_list2.append([['stoch_{}{}33'.format(wave_itv1, wave_period1)], 1, '#00ff00', 3])\n","\n","# ------ macd ------ #\n","# step_col_list2.append([['macd_T535'], 1, '#00ff00', 1])\n","\n","\n","# ============ stepmark_col_list - add info(col, alpha, color, linewidth, marker_style) ============ #\n","# stepmark_col_list.append([['sar_T'], 1, 'dodgerblue', 7])\n","\n","# ------ wave_range ------ #\n","stepmark_col_list.append([['wave_low_fill_{}{}'.format(wave_itv1, wave_period1)], 1, '#e91e63', 10, '*'])\n","stepmark_col_list.append([['wave_high_fill_{}{}'.format(wave_itv1, wave_period1)], 1, '#2962ff', 10, '*'])\n","\n","stepmark_col_list.append([['wave_low_fill_{}{}'.format(wave_itv2, wave_period2)], 1, '#ff00ff', 7, '*'])\n","stepmark_col_list.append([['wave_high_fill_{}{}'.format(wave_itv2, wave_period2)], 1, '#00ff00', 7, '*'])\n","  \n","# stepmark_col_list.append([['wave_co_marker_{}{}'.format(wave_itv1, wave_period1)], 1, '#00ff00', 3, 'o'])\n","# stepmark_col_list.append([['wave_cu_marker_{}{}'.format(wave_itv1, wave_period1)], 1, '#ff00ff', 3, 'o'])\n","\n","# ============ data_window_col_list ============ #\n","# ------ wrr ------ #\n","# data_window_col_list.append([['cu_wrr_21_{}{}'.format(wave_itv1, wave_period1)], 'cu_wrr_21_{}{}'.format(wave_itv1, wave_period1)])\n","# data_window_col_list.append([['co_wrr_21_{}{}'.format(wave_itv1, wave_period1)], 'co_wrr_21_{}{}'.format(wave_itv1, wave_period1)])\n","data_window_p1_col_list.append([['cu_wrr_32_{}{}'.format(wave_itv1, wave_period1)], 'cu_wrr_32_{}{}'.format(wave_itv1, wave_period1)])\n","data_window_p1_col_list.append([['co_wrr_32_{}{}'.format(wave_itv1, wave_period1)], 'co_wrr_32_{}{}'.format(wave_itv1, wave_period1)])\n","# data_window_p2_col_list.append([['cu_wrr_32_{}{}'.format(wave_itv2, wave_period2)], 'cu_wrr_32_{}{}'.format(wave_itv2, wave_period2)])\n","# data_window_p2_col_list.append([['co_wrr_32_{}{}'.format(wave_itv2, wave_period2)], 'co_wrr_32_{}{}'.format(wave_itv2, wave_period2)])\n","\n","data_window_p1_col_list.append([['short_tr_{}'.format(selection_id)], 'short_tr_{}'.format(selection_id)])\n","data_window_p1_col_list.append([['long_tr_{}'.format(selection_id)], 'long_tr_{}'.format(selection_id)])\n","\n","\n","# ====== str to numbcol ====== #\n","nonstep_col_arr = strcol_tonumb(res_df, nonstep_col_list)\n","step_col_arr = strcol_tonumb(res_df, step_col_list)\n","step_col_arr2 = strcol_tonumb(res_df, step_col_list2)\n","stepmark_col_arr = strcol_tonumb(res_df, stepmark_col_list)\n","data_window_p1_col_arr = strcol_tonumb(res_df, data_window_p1_col_list)\n","data_window_p2_col_arr = strcol_tonumb(res_df, data_window_p2_col_list)\n","\n","col_idx_dict = \\\n","{\n","  \"ohlc_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close']),\n","  \"vp_col_idxs\": get_col_idxs(res_df, ['close', 'volume']),\n","  \"post_cu_idx\": get_col_idxs(res_df, ['wave_cu_post_idx_fill_{}{}'.format(wave_itv1, wave_period1)]),\n","  \"post_co_idx\": get_col_idxs(res_df, ['wave_co_post_idx_fill_{}{}'.format(wave_itv1, wave_period1)]),\n","  # \"post_cu_idx\": get_col_idxs(res_df, ['wave_cu_prime_idx_fill_{}{}'.format(wave_itv1, wave_period1)]),\n","  # \"post_co_idx\": get_col_idxs(res_df, ['wave_co_prime_idx_fill_{}{}'.format(wave_itv1, wave_period1)]),\n","  # \"ohlc_col_idxs\": get_col_idxs(res_df, ['haopen', 'hahigh', 'halow', 'haclose']),  # heikin-ashi ver.\n","  \"nonstep_col_info\": nonstep_col_arr,\n","  \"step_col_info\": step_col_arr,\n","  \"step_col_info2\": step_col_arr2,\n","  \"stepmark_col_info\": stepmark_col_arr,\n","  \"data_window_p1_col_info\": data_window_p1_col_arr,\n","  \"data_window_p2_col_info\": data_window_p2_col_arr,\n","  \"ylim_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close', 'short_tp_1_{}'.format(selection_id), 'long_tp_1_{}'.format(selection_id), 'short_tp_0_{}'.format(selection_id), 'long_tp_0_{}'.format(selection_id)])  \n","}   \n","#   'wave_low_fill_{}{}'.format(wave_itv2, wave_period2), 'wave_high_fill_{}{}'.format(wave_itv2, wave_period2)\n","#   'dc_upper_H', 'dc_lower_H', 'dc_upper_15T', 'dc_lower_15T', 'short_out_{}'.format(selection_id), 'long_out_{}'.format(selection_id)\n","#   'wave_1_{}'.format(wave_itv2), 'wave_0_{}'.format(wave_itv2), 'dc_upper_15T', 'dc_lower_15T'"]},{"cell_type":"markdown","metadata":{"id":"XfvH5ngyieS9"},"source":["#### session_plot main"]},{"cell_type":"code","execution_count":27,"metadata":{"id":"OCLMABZT1ojb","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"error","timestamp":1663111911995,"user_tz":-540,"elapsed":46601,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"08da2e9a-1ea7-417e-9ee8-869644c23987"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 4 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 4 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 4 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 4 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 4 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 4 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 4 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAABzcAAARqCAYAAADFv/j/AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nOzde1hU1d4H8C/XUWS4iTcUMVRUyAOVl7yBB0rLk1l4KfSoqZndlV67eI6JYV7PiTJT7JRaomLlXTOtBFGRjlqGcjNEEIRBkMswzAAq/t4/PO4cGWAkFcnv53m+z8Pea+21197Qe96fa2ZvCwACIiIiIiIiIiIiIiIiIqK7nGVjT4CIiIiIiIiIiIiIiIiIyBxc3CQiIiIiIiIiIiIiIiKiJoGLm0RERERERERERERERETUJHBxk4iIiIiIiIiIiIiIiIiaBC5uEhEREREREREREREREVGTwMVNIiIiIiIiIiIiIiIiImoSuLhJRERERERERERERERERE0CFzeJiIhug8zMTBgMBuh0OhQXF2PXrl3o0KEDACA2NhZTpkwx6h8QEICcnBwAQFxcHObMmWPUPn78eJw+fRrNmze/MxdAREREREREdwxrSCIiIvNxcZOIiOg2GT58ONRqNdq1a4fz589j2bJlZh33/PPPIzQ0FN7e3gAAV1dXfPDBB3j++edRUVFxO6dMREREREREjYQ1JBERkXm4uElERHSbVVVVYdOmTUqhWZ/09HTMnz8fq1atgoWFBT7++GNs3rwZ+/fvv70TJSIiIiIiokbHGpKIiKhuXNwkIiK6zZo3b45nnnkGP/30k9nHREREwMLCAps2bcKAAQPw5ptv3sYZEhERERER0d2CNSQREVHdrBt7AkRERH9W27Ztw+XLl9GiRQsUFhZi6NChZh975coVTJ48GcnJyRgxYgTKy8tv40yJiIiIiIiosbGGJCIiMg+/uUlERHSbPPXUU3B2dkazZs3w6quvIi4uDm3atMHly5dhY2Nj1NfGxgaXLl0y2peSkgIASE5OvmNzJiIiIiIiosbBGpKIiMg8XNwkIiK6za5cuYKtW7eiuroaAwcORHZ2Njp16mTU57777sPZs2cbZ4JERERERER012ANSUREVDcubhIREd0BTz75JJydnZGamoqvvvoKkyZNQu/evQEAXbt2RWhoKDZu3NjIsyQiIiIiIqK7AWtIIiKi2vGdm0RERLfJzp07UV1dDRHB2bNnMXHiRKSkpCAlJQXvvPMO1qxZA3d3dxQUFODzzz/Hf/7zn8aeMhERERERETUS1pBERETmsQAgjT0JIiIiIiIiIiIiIiIiIqL68LG0RERERERERERERERERNQkcHGTiIiIiIiIiIiIiIiIiJoELm4SERERERERERERERERUZPAxU0iIiIiIiIiIiIiIiIiahK4uElERERERERERERERERETQIXN4mI7mExMTEoKCiAVqvFr7/+iieffNJkv1WrVkFE0LlzZwCAra0tPv/8c2RlZaGsrAzHjx/HY489pvS3sbHBN998g8zMTIgIAgICjMYLCwvDxYsXodPplNx3331K+xNPPIGTJ09Cp9MhPj4ePXr0qPUabG1tsWrVKmi1Wmg0GoSGhv6RW2LSM888g7S0NJSWluL8+fP44osvoFara/Tr0qULKioqEBUVpewbNmwYDh48iJKSEmg0Gnz22Wewt7dX2kePHo34+Hjo9XrExsbWGNPS0hLz5s1Dbm4uysrK8Msvv8DR0REAEBkZaXQPKysrUVZWVut1+Pr64tixY9Dr9Th27Bh8fX3/yG0xi4+PD/bs2YPCwkKISL39P/30U6SlpaG6uhoTJ040aqvv9xAVFYW8vDxotVqcOnUKU6ZMMTp+9OjRSElJQVlZGZKTkzFixAilzdbWFhEREcjNzUVxcTGWL18Oa2vrP3j1RERERER/Hq1atcKGDRuQm5uL0tJSHDp0CH369DHZ98YaEoBR7aLT6XD58mV8/PHHSnvz5s2xfPlyFBYWorS0FHFxcUrbjBkzkJGRAa1Wi9zcXERERMDKyqrGef39/SEimDdvXq3XcSdqyAkTJuDYsWPQarXIycnB4sWLTc7XVA05a9Yso/tkMBhQXV2Nli1bKn2CgoLw888/o7y8HDk5ORg9erTSVlcNeb0ff/wRImJyXtcEBgYiNTUVer0eMTEx6NixY0NvyU1ZtGgRLly4gAsXLmDRokV19v3HP/6Bs2fPQqvVIjo6ukatXte9umb8+PEQEaMa0tHREV988QXOnz+P8+fPIywsrMZxr7/+Os6cOYPy8nKkpKSga9euDbxiIiJqCGEYhmHuzfTs2VOsrKwEgPTp00fKysqkbdu2Rn0GDBgg+/fvFxGRzp07CwCxs7OTsLAw8fDwEAsLC/nb3/4mZWVl4uHhIQDExsZGpk+fLgMGDJC8vDwJCAgwGjMsLEyioqJMzqlLly6i1WplwIABYmVlJe+8846kp6cr87wxCxYskAMHDoiTk5N0795dNBqNDB069Jbepw4dOkjLli0FgLRo0ULWrVsnS5curdFv7969cuDAAaNrCwkJkaFDh0rz5s3FyclJdu/eLZGRkUp7UFCQjB49Wt59912JjY2tMea8efNk37590rFjRwEgPj4+olKpTM5zzZo1smrVKpNtNjY2kpWVJTNmzBBbW1t57bXXJCsrS2xsbMy6B/b29tKsWbObvndeXl4yefJkefLJJ0Wurm7WmZdfflkCAwPl6NGjMnHixJv6PXh7e4utra0AkG7duolGo5EHH3xQAIibm5tUVVXJY489JgBk2LBhotfrpVWrVgJA5syZIwcOHBBnZ2dxdXWVhIQEmTt37h3975FhGIZhGIZh7ubcd999EhoaKm3bthVLS0uZOnWqFBYWSosWLYz6maohb0yLFi1Ep9PJoEGDlH1RUVESHR0trq6uYmlpqfz/8gDE09NTHB0dBYA4OzvLvn37JDQ01GhMa2trOX78uCQkJMi8efNqvY47UUO++OKLMnDgQLGxsRE3Nzc5duyYvP322zX6maohb0xYWJjs27dP2e7Ro4ecP39eHnvsMbGyshIXFxfx9PRU2s2pIceOHStxcXEiIrXW2i1btpTS0lIZNWqUqFQqWbJkiSQkJJh9D5ydncXa2vqm790LL7wgaWlp0r59e3Fzc5Pk5GSZNm2ayb4TJkyQ1NRU6dChg7Ro0UK2bdsmX3zxhdn3CoA4OTlJamqqnDx5UqZMmaLsX716tXz99dfSvHlz8fDwkNOnT8tzzz2ntE+ZMkUSExOlR48eyt+os7PzHf1vkmEY5h5Po0+AYRiGuQvSu3dvqaiokN69eyv7rKys5JdffpGePXvWWZgCkMTERAkODq6xPycn56YWN1955RXZtWuXsm1hYSEGg0ECAwNN9s/NzZVHH31U2Q4PD5fo6Ojbdp9atGghX375pXz77bdG+5955hn56quv6rw2APL000/LiRMnauyfMmVKjcVNJycn0el0NYovU7Gzs5OysjLx9/c32f7oo4/KuXPnjPadPXvW7CL+4YcfluLiYlm5cqX07dv3pu9b586d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Afj888/h6+sLAJg/fz6OHz+OX3/9FYcPH8a2bdtw8eJFnD9//o5eFxERERHR3a5Zs2bYuXMnfvrpJyxatEjZb04NCQDjx4/HoUOHkJWVpeyrqKjAxYsX8f777+PSpUs4cOAAYmNjMWTIkBrHnz59GsnJyVixYgUA4IknnoBarcbXX39d79zvdA05YsQILFy4EI8//jiKiooAmF9DNm/eHKNHj8aXX35ptL+iogJr1qxBeno69Ho9FixYoNSIddWQFhYWWLFiBaZPn47q6uo6zw3cXA05duxYpYa89vSc6125cgUnT55EYmIiiouLcf/998PGxsas89b1+1m9ejWio6Oxf/9+JCcnIzY2FgCUfz+o6169/PLLOHHiBP773/+aHPv1119HRUUF0tPTsX37dkRHRxuNCwBLliyBVqvF2bNn8emnn9ao1YmI6PZq9BVWhmEY5u7IDz/8IDNmzBAAUlJSIvn5+aLRaESj0YiISEFBgYSEhCj9V69eLTExMdKsWbNaxzT1zc0b89Zbb8nmzZtNtjk6OopOp6v1vR65ublG32R87733an1fioWFxS25TwMGDJDS0lIBINOnT5fy8nLlPul0OjEYDPLzzz8r/f38/OT8+fPyxBNP1DqmqW9uenp6iogYfSty6dKlEhERYdTvH//4h8TFxdU550cffVRycnKM9mVlZZn9zk3g6qeWR44cKTt27JCSkhL58ssvZfDgwWYde6u/uXnj78FUPvvsM/noo48EgPzf//2fbNmyxah969at8n//938mj506daocPnz4lvy9MAzDMAzDMMyfJba2trJnzx5Zt25djfrKnBoSgJw6dUomTZpktC8wMFCqqqqMvkW4fft2ef31103OY9y4cfLrr78KAPnwww9Fq9Uq5zUYDKLT6WTbtm0mj71TNeTQoUOloKBAevfubbTfnBoSgIwdO9bkN0oPHDgg7777rrL9wAMPSHFxsQB115COjo5SXV2tnLegoEBERDQajQwcOLDGeaZOnSqHDh1Stu3s7ESv15v9zk0A0qJFC5k4caLs27dPCgsLZfny5UbvsTSV+Ph4o29ATpo0qdZ3bt6Ya3Xvtd9bXfdq69atUlxcrNyPqqoqKS0tlWXLlpkce/78+bJhwwYBIM2bN5fKykqjb+6GhobWqDkZhmGY25pGnwDDMAzTCOnWrZs89thj0qxZ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FSvM508++aRx4sQJIzk52fjrr7+MOXPmGD4+Pg7/mVUoFApF+YclZ0FEREREREREREREREREpELTtLQiIiIiIiIiIiIiIiIiUilocFNERATo1q0biYmJdqM4/v3vf9vddsOGDYVuV9A+u3XrVhaHJSIiIiIiIqWgc0QREZGKS9PSioiIiIiIiIiIiIiIiEiloCs3RUSkwjIMg+bNmzu6DBEREREREakEdA4pIiJybdDgpoiIiB1NmjTBMAycnZ1LtX1QUBBZWVk20wiNGTOm2Ntfd911pKamsmLFCpv8Cy+8wLFjx0hISGDVqlX4+vqWqr68evTogWEYzJgxo8i21atX5+zZs3z//fc2+QkTJnDgwAESExP5+uuvqVevnrnOzc2NBQsWcPr0ac6fP8+XX35J/fr1r7huERERERGRiuJaOIds0qQJoaGhJCcns2/fPvr06VNg2/vuu48dO3aQnJxMWFhYvvWLFi0iKiqKrKwsxo4da7NuzJgx7Ny5k4SEBI4fP85rr71W6tdVRESqJg1uioiIlFJRJ1fR0dH4+vqa8eGHHxa773nz5hEeHm6TGzNmDKNHj6Zr167Ur18fT09P3n333VLVnsvFxYU5c+bw008/Fav9a6+9xr59+2xyQUFBvPrqqwwcOJAaNWpw5MgRVq1aZa5/4oknuO2222jXrh3169cnLi7uiusWERERERGpbCr7OeSqVauIiIigZs2avPjii3z66acEBATYbRsbG8s777zDrFmz7K6PjIxk0qRJ/Pbbb/nWeXl58a9//YuAgAA6d+5Mnz59mDJlSqnrFhGRqkeDmyIiUin4+fmxfPlyzp49y9GjR3nxxRexWCwAjB07lu+//57Zs2cTGxvL4cOHueuuu8xtmzZtytatW7lw4QLfffcdc+fOzfdt1stt27YNgPj4eBITE+nSpQtjx45l+/btvPXWW8TExDBt2rRyOdahQ4cSHx/P5s2bbfIDBgxg6dKlnDhxguTkZF577TWGDh2Kp6dnqff19NNPs3HjRqKioopse9ttt9GmTRvef/99m/zdd9/NmjVr2Lt3LxkZGcyYMYOgoCACAwMBaNasGd9++y1nz57l4sWLfPzxx9x4442lrllERERERKQoOocs23PIFi1acPPNNxMcHExaWhqff/45v//+O4MHD7bbfvPmzaxZs4bo6Gi76+fPn09o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rVvn6LJERERERESkAtI5pIiISMWmwU0REany6taty5YtW0hKSuL//u//eOSRR9i1axcjRowwp7jJG3mn0inMggUL7G5f2DQ+jRo1srtNYmIijRo1KqtDFhERERERkVLSOaSIiEjFpmlpRURERERERERERERERKRS0JWbIiIiIiIiIiIiIiIiIlIpuDi6ACnY2bNnOXbsmKPLEBERERGRMtKkSRNq167t6DKkitI5pIiIiIhI1aJzSPs0uFmBHTt2jE6dOjm6DBERERERKSPh4eGOLkGqMJ1DioiIiIhULTqHtE/T0oqIiIiIiIiIiIiIiIhIpaDBTRERERERERERERERERGpFDS4KSIiIiIiIiIiIiIiIiKVgu65KSIiIiIiIiJ2jXwvxdEliIiIiIhcw/Y4uoAKSYObIiIiIiIiIlLpBPhY6NHCGYCdx7L4K9YosG3jGhY6NrG23XYgi5ikgtterm8rZ/q3c6GGtwVnJwsAFzMNJixPu4LqRURERESktDS4KSIiIiIiIiKVTi0fC/fe7ArAuSSDv2KzCmzbpKaT2XbfqewSDW52DnSmlq/u6iMiIiIiUlHo3bmIiIiIiIiISAEOn8vm95NZfPRTuqNLERERERERdOWmiIiIiIiISJlZunQpd999N2fPnqVt27YABAcH8+CDD3Lu3DkAXnjhBb7++mtGjBjBM888Y27brl07br75ZiIjIwkLC6NevXqkpqYCcMcdd5jbXwsaVrdwz02utKrrhLcbxKca/HYsm88jMki6CPfe5GJeiQnwcA83Hu5hXT54Npvral/6LveBM1m0qONsPn+xv7u5PGppapG1rArPvNS+y5UclYiIiIiIlAUNboqIiIiIiIiUkQ8++IC5c+fy4Ycf2uTffvtt3nzzTZtcSEgIISEhALRp04Z169YRGRlprh85ciS//vpr+RddwTStaeGl/u54uFrMXICPhTtudKJtAyemfnmxZP0FaNIqEREREZGqRO/wRURERERERMrI999/T2xsbIm3Gz58OKtXry6HiiqfkZ1d8XC1kJ1t8M6mizz4YSr/i8wAoJ6/E/3auPB5RKaZA/gyMoNRS1MZtTSVjCzb+2kmpcGnv2ZwuRlflWyQVEREREREKg5DUTEjPDzc4TUoFAqFQqFQKBSKsgu9x782okmTJsbvv/9uPg8ODjaOHDliREZGGkuX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RKTi0OCmiIiIiIiIXHteASw5cayItruAu7BesekG1ABuB74o/e6XL1+OxWLBYrGwdevW0nckIiIi5cLFv5rNY2Z8grku77KIiFx9mpZWREREREREpAwdO3YMi8Xi6DJERESkDB2e9IzuwSkiUkHoyk0RERERERERERERERERqRQ0uCkiIiIiIiIiIiIiIiIilYIGN0VERERERMRhXF1dmT17Njt27CA1NRXDMDAMg65du+ZrGxYWZq6/PAYOHJiv/d///nc2b95MfHw8KSkpHDx4kPfff9+mzZEjRwrss3379kXWHxAQwOzZs9m/fz9JSUmcPXuW7du3M3ToULvtR40axQ8//EBiYiJJSUns27eP1157zaaNk5MTU6ZMISoqirS0NE6ePMm8efOoXr16kfWIiIhI+dGUtCIiFYPuuSkiIiIiIiIO4+XlxZQpU8q836effpo33njDJte8eXOaN2/OxIkTycrKuuJ9WCwWNm/eTLt27cyct7c3tWrVomvXrlSvXp2FCxea6959910ee+wxmz5atWqFj48Pzz33nJlbtGgREydONJ/Xr1+fSZMm0a1bNzp37kxaWtoV1y6DkeiNAAAgAElEQVQiIiJX7kxaGnU8PDiT5//mqP53mblW679xYHUiIlWXrtwUERERERERh8nIyGDu3LmMGDGCBQsWFGubadOmYbFYbOKLL74w17dr145Zs2YBEBoaSrt27fD09OS6667jqaeeIjs7O1+fDzzwQL4+IyMjC62jffv25sDmzz//TM2aNenevTuZmZkAjBs3zmzbv39/c2Dzk08+oUWLFnh6enLjjTfy6quvmu26dOliDmx+/vnnBAQE8Pzzz5vH9cQTTxTrNRIREZHylzt4mXcQs46Hh82jiIiUPQ1uioiIiIiIiMOkpKTw+OOPs2rVKs6cOVMmfT766KO4uLiQmJjIkCFD+P3330lLS+PQoUO8/fbbGIZRJvvJHcQE+O6774iNjWX79u2cPn0aAE9PT3P95MmTAes0uKNGjeLgwYOkpaWxd+9em0HdESNGmMuzZs3i/PnzzJ49mwsXLuRbLyJSEk6ufjTo8zlOrn5XnFNf6qsq9nX9c0dscmS6Yom8HTJdC92uTfwYm1wSXjzv9RxJeFWK4y7PvkREyosGN0VERERERKRSmTx5MmlpaVy4cIEtW7bQr18/m/VBQUEA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9yY0NJSePXuWWV0jR45k/PjxtG7dmmrVqlGtWjVuueUWlixZwty5c8voaERERKQqiRs8yNElOMS1etwi1xoNbhaDt7c3n332Gf/6179ITEw088OHD7d71eatt95KSkoKe/bsMXMjR46kXbt2dO/ene7duzN69Gi7+1qyZAmdOnWiU6dOxMTElP3BiIiIiIgUkwYnparYv38/U6dOpW/fvpw4caLM+p0/fz5ubm7ExsbSvn172rdvT2xsLG5ubsyfP7/M6srKymLJkiV06NABT09P7rnnHjIyMgB4+OGHqV27dpkdk4iIiIiISEWnwc0iuLi48Nlnn7Fy5UrWrl1r5p2dnbn33nv5+OOP820zbNiwfIOe0dHRgHV625CQEG699dbyLVxERERERKQCuf766wkJCeHUqVNcvHiRo0eP8uabb+Lj42O2CQoKMqdnffjhh5kzZw7nzp3jwoULfPTRR/j7+9v0OXz4cA4cOEBKSgqbN2+mZcuW5vbvv/++2e6bb75hxowZbN68mczMzDI5nptvvplWrVoBsHr1anbv3s3u3bvN25O0bt2am266qdA+ilvXc889x0MPPURkZCRpaWmsW7eOb76x3iPMycmJwMDAMjkmERERqXwC5882v5SYe//OqP532Txe63Q1p0jV4+LoAiq6pUuXsm/fPt5++22bfN++fYmKiuLkyZM2eYvFwv3330/37t3NnLOzM/7+/pw/fx4XFxfuvvtuNm3adFXqFxERERERcbR27dqxfft2fH19zVyTJk146qmn6NGjB127diU9Pd1mm//85z82t+oYOXIktWrV4s477wSgd+/efPTRR+Y9J3v37k1YWNhVOBqrm2++2Vz+888/7S7fdNNNREREXPG+kpOT8+U88twn7PLzUhEREalYzqSlUcfDgzNpaQBkxieY99rMjE+4or4r6n1FRUTKk67cLETXrl0ZM2YMvXv3JiIigoiICPr16wfYvzoToEePHhw/fpwjR46YOXd3d7799lsiIyPZtWsXJ0+eZMmSJVftOERERERERBzprbfewtfXlz///JMbbrgBd3d37r33XgA6duzIuHHj8m2Tnp5Ohw4dqF27Nps3bwbgjjvuoFu3bgC88sorODk5kZmZyYABA6hevfpVHdzMO/B64cIFu8vlNV1st27d6N27NwDfffcdx48fL5f9iIiIVEW5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zjmOJk4pqW/SmIKcc5zjH+bGTv6ezg6JJ3y31eykKp6T3VnhfvjZu/6nR/nXHU+51riGnJM//j156pzODom327TZjodotuMh47X12g5tU/7IQatZ42eH2u4jfI359zImJdmm3vqcYlKSbfZZph83l93e7voSfvj31PVoE5ufafiadca/j2D+d9Pg7JyGYBPAbGa1prt1WURERHyf1teUiqptAwBERESkfG5NS2sd2Dx27Bh33nmn08BmdHQ0/fv3B+CDDz4gJyenTJvVq1cb5aeeeor69evz1FMlN7K3bdsGmFPK5ufnA/Dss8/SrFkzRowYYazTuXr1auNm//Tp0zGZTJhMJtq2bQuY0+hu2rSJgQMH0qBBA5o0acLLL79Mx44dAfjpp5/Izs4GICUlBTDPxpwyZQqRkZG88MILRp8s72/YsIEzZ8ypYx5//HHatm1L37596devH2Beh9SyTxGpmSw36EuXLUFOy7OI+CYtYl+9rGdbWspHE6cYP3d//DfSdLonptM9vd0NERERn2dZwsBYymC44wHpIiK1QfsFF2i/wDZVsr5fiCv0OZHayK0zNydOnEhkZCQA7du3LzNT8pFHHmHZsmXG63HjxhEYaI6v/vWvf7W7z+XLl/PII4/Qp08fZs+ebaSjBdi7dy+LFy8GIC0tjVmzZvHqq69y2223cerUKaNdeno6M2bMKLf/AwYMYMCAAWXqr169ytNPP228/n//7/8xfPhwYmNjef3113n99deN9xYtWsT3338PmGeVTpw4keXLlxMdHc3x48eNdufOnePZZ58tt08iIiLeopRhlZOZl2fMJrQE9ApyztmfrejnOn660TwzfU3NWjdTRERERJzrOGCCx9bFFBERESnNrTM3K6JOnTqMHj0aMKdxtQQESzOZTNx333387//+Lz///DP5+fmkpaXx9ttvExcXR57VjIDZs2fz6KOPsnfvXvLy8sjKymLlypXcfvvtZGZmOu3PkSNHeO6559i2bRsZGRlcvXqV06dPs27dOnr27MnGjSWp0PLy8ujTpw8LFiwgIyODK1eu8NNPPzFlyhQjza7FihUrGDRoEN999x25ubnk5OSwfv16evbsyYEDByr74xMR8TrNePN/zgKb/po2zN5MQ7ANSJYXnLSkTw1fs84o+/tsRRERERF7Ale1Jyi7q81D/IOnAptX8y6U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TYeDQZSVlenXv/61/ud//kfHjh3T3XffLUkaM2aMdu7cqePHj2vnzp0qKioyHCnSKSgo0IEDB/TCCy9IkioqKrR37161trZqy5YtKiwsNBwh7Fx22WX65S9/qebmZjU1NWnWrFkcdz5yzz336NixYzp69KiefvppfeYzn+HY87DHHntMJ0+e1NGjRxN1Ax1vGzZsUGtrqw4fPqypU6eaCBkX2G27Bx54QM3NzTp8+LCeffZZXXbZZYnf1dfXq7W1VS0tLVqwYIGJkAHkgDake2j/mUf7zQzaX2bRfnIPbR9zaLuYY7fue61atUqWZWns2LGJOvZ7ZMqihKcUFBRYbW1tVmVlpVVYWGgdOnTImjRpkvG4KOlLSUmJNXXqVEuSdckll1i//e1vrUmTJln333+/tXr1akuStXr1amvdunXGY6XYl3/4h3+wNm/ebL3wwguWJOsXv/iF9Xd/93eWJGvjxo3Wt7/9beMxUvqXJ5980rr99tstSVZhYaF12WWXcdz5pIwfP9568803rc9+9rOW1HPMLVu2jGPPw+W6666zpk6dah09ejRRl+54q66utrZv325JsmbOnGnt3bvXePxhLnbbbv78+dbw4cMtSda6desS227SpEnWoUOHrJEjR1oVFRVWW1ubVVBQYPwzUCiUgQttSHcL7T/zhfabmUL7y1yh/eRuoe3jrXVP28XcupdklZWVWS+++KL11ltvWWPHjrUk9ntKVsV4ABQXy6xZs6wXX3wx8XN9fb1VX19vPC5K5mXbtm3WvHnzrJaWFqukpMSSehrALS0txmOj9C+lpaXWSy+9ZM2dOzfROH733XcTF06pxyTFG+XSSy+13nzzzX71HHf+KOPHj7feeecda8yYMdbw4cOtF154wVqwYAHHnsfLhAkT+jR00h1vP/vZz6za2lrb11G8se2Sy5IlS6z/+I//sKT+150vvviiNWvWLOPxUyiUgQttSLOF9p+7hfabmUL7y2yh/eR+oe3jnXWfXGi7uL/uf/nLX1rXXHON1d7enkhust9TMi0MSxsypaWl6ujoSPzc2dmp0tJSgxEhGxMmTNDUqVO1b98+FRcX68SJE5KkEydOqLi42HB0sPNv//Zvuvfee3X+/HlJ0tixY/XBBx/o3LlzkjgGvaqyslLvvvuunnjiCR04cEDRaFR/9md/xnHnE7/73e/0r//6r3rnnXf0+9//XmfOnNH+/fs59nwm3fHGtYy/3HbbbWpsbJTEtgP8imPXHNp/7qP9ZgbtL7NoP5lH28cbaLu468Ybb1Q8HteRI0f61LPukSmSm4BPjBo1Ss8884zuuecedXd39/u9ZVkGosJA/vZv/1anTp3SgQMHTIeCLI0YMULXXnutNm7cqGuvvVYfffSR6uvr+72O486bioqKVFNTo8rKSo0fP16jRo3SokWLTIeFIeJ48581a9bo7Nmz2rx5s+lQAMB3aP+5j/abObS/zKL95D3s6+6j7eKuz33uc1qzZo3+6Z/+yXQo8DGSmyETj8dVXl6e+LmsrEzxeNxgRMjEiBEj9Mwzz2jz5s167rnnJEknT55USUmJJKmkpESnTp0yGSJszJ49WzfeeKPa29u1ZcsWXX/99dqwYYOKioo0fPhwSRyDXtXZ2anOzk699tprkqT//M//1LXXXstx5xPz5s1Te3u73nvvPZ09e1bPPvusZs+ezbHnM+mON65l/GHZsmX66le/qm9+85uJOrYd4E8cu+6j/WcG7TdzaH+ZRfvJPNo+ZtF2cd+VV16pyspKHT58WO3t7SorK9OBAwdUXFzMukfGSG6GTCwWU1VVlSoqKlRYWKja2lo1NDSYDguDeOyxx9Tc3Kwf//jHibqGhgYtW7ZMUs+X8PPPP28qPKSxZs0alZeXq7KyUrW1tfr1r3+tv//7v9fu3bt10003SWLbedXJkyfV0dGhq666SpJ0ww03qKmpiePOJ9555x3NmjVLn/vc5yRd3H4ce/6S7nhraGjQ0qVLJUkzZ87UmTNnEkM4wRsWLlyoe++9VzfeeKP++Mc/JuobGhpUW1urkSNHqqKiQlVVVYmbmAC8izak+2j/mUH7zRzaX2bRfjKPto85tF3MOHbsmIqLi1VZWanKykp1dnYmOrWw3yMbxif+pLhbqqurrd/+9rdWW1ubtWbNGuPxUAYus2fPtizLsg4fPmwdPHjQOnjwoFVdXW1dfvnl1ksvvWQdP37c2rVrlzVmzBjjsVLSl6985SvWCy+8YEmyKisrrX379lmtra3W1q1brZEjRxqPj9K/TJkyxYrFYtbhw4et5557zioqKuK481GJRCJWc3OzdfToUWvTpk3WyJEjOfY8XJ5++mnrd7/7nfXJJ59YHR0d1m233Tbg8fbTn/7Uamtrs44cOWJNmzbNePxhLnbbrrW11XrnnXcS1y0bN25MvH7NmjVWW1ub1dLSYi1atMh4/BQKJbNCG9K9QvvPG4X2m/uF9pfZQvvJvULbx1vrnraLuXWf/Pv29nZr7NixiZ/Z7ymZlGEX/gMAAAAAAAAAAAAAnsawtAAAAAAAAAAAAAB8geQmAAAAAAAAAAAAAF8guQkAAAAAAAAAAADAF0huAgAAAAAAAAAAAPAFkpsAAAAAAAAAAAAAfIHkJgAAAAAAAAAAAABfILkJAAAAAAAAAAAAwBf+f5+ciuU3i/ZiAAAAAElFTkSuQmCC\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 4 Axes>"],"image/png":"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xOx81DdqtVoqKyulW7duyr6oqCiZN2+exf4FBQXy0EMPKdsRERGyd+9eZbusrEx8fHyU7XXr1sl777130+eCYRiGYRiGYRjGUlhDwuwz3eoa0lKSk5NlxIgR1+ynVqultLRUgoKCBID4+fmJ0Wg067Nz506ZPXt2jbE2Njby2muvSVlZWaP/zTEMwzB3Rvg4XCIiuq0MGjQIQUFB8Pb2hrOzM5555hkUFRUp7c/9f/buPK7qKv/j+PteQEFBQC1UQBRH0tQRS00bJy1LaTOLFrXSsnJGx5pp2ptfQf1aJi1bnDZT0/y5jI2lTZaZqZmlSabmAmpuKSm4sMm+nN8fF25c2dd7ubyePT6Pe+75nu/3+7nXC/HlwznfMWP0zDPPKDAwUD///LOef/55SbblflauXKk33nhD7dq104wZM7Ry5Uq1bdvWvu+dd96pSZMmyc/PT3fd734eIwAAIABJREFUdZe++eYbTZ06VX5+frr//vsrzGno0KGSbMu8+vn5aenSpZKkDh06qG3btgoLC9OkSZOqfG1HjhzR0aNHNXfuXLVr167K8VarVf/61780depUGWPKbC/9l8gl7d69e5d7rMcee8xhJmZpERERKigo0P79++19O3bsUK9evSrM7dxzlz7va6+9pvHjx8vT01MREREaPHiw1qxZ47B/Td8LAAAAACgP15C/aaxryHOdf/75ioiI0O7du6scGx0drZMnT2rDhg0Vjjn3GlOSUlJSlJOTo5kzZ+qFF16oVl4AAFAEBQC4lPz8fPn5+alHjx6yWCxKSEjQiRMn7Ns//vhjxcXFqbCwUAsXLlRkZKQk6dprr9X+/fv1f//3fyosLNSSJUuUkJCg66+/3r7vvHnztGfPHhUWFqqgoKDOuRYVFSkmJkZ5eXnKycmpcNypU6fUv39/hYWF6eKLL5afn58WLlxY5fEfeOABff/99/rxxx/LbFu1apVuvfVW9enTR97e3nr66adVVFSkVq1alXusl156yeG9KM3X19fhfiySlJaWJj8/v3LHr1q1So8//rh8fX3VrVs3TZw40eG8n376qW6++WZlZ2dr7969mjNnjn744Yc6vRcAAAAAUB6uIX/TWNeQpXl6emrhwoWaP3++9u7dW+X4CRMm6IMPPrA/37t3r5KTk/XII4/I09PTviTuuXkFBgbK399fU6dO1bZt26o8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774zr7zyivH29jY33XSTSUlJMe3bty93bGxsrLnggguMxWIxAwcONGfOnDGDBw82koynp6dJTU01kyZNMpJM//79TUZGhvn9739vJNv16dmzZ81FF11kJJk///nPJjk52VitVqd/xgiCIIimFcwEBQA0CW3atNH8+fOVnJysw4cP6x//+IcsFoskacKECfrmm280ffp0nTlzRgcPHlRUVJR93y5duujrr79Wenq6vvzyS/3rX/8q89ex59qwYYMkKTU1VRkZGRo0aJAmTJigjRs3asaMGTp16pRiY2Mb5LXedtttSk1N1VdffeXQf/3112vOnDk6duyYMjMz9dJLL+m2226Tj49Prc6zc+dOFRYWSpKMMfLy8lJoaGi5Y6+//npNmzZN2dnZOnLkiObMmaOJEyfat3fp0kULFy5UUVGRDh48qI0bN6pXr16SpJtuukm7d+/Wf/7zH+Xm5io2NlZ9+/bVBRdcUKu8AQAAAKAqXEPW7zVk9+7dddFFFykmJkY5OTn66KOPtHPnTkVHR5c7PjY2Vnv37pUxRlu2bNE333yjwYMHS5Latm0rf39/+3v6ww8/KD4+XhdeeKEk2/u/e/du/fjjj5KkDz74QOedd57OP//8GucNAGjeKIICAJqEmTNnyt/fX+Hh4Ro6dKjGjx+vu+++2779kksu0d69e9W+fXtNmzZNc+bMsW9btGiRtmzZonbt2ik2NrbMMjzlueyyyyRJAQEB8vPz0+bNm+3nOXjwoIKCgvT8889Xeozzzz9fJ06c0MGDBzVjxgy1atWqyvP6+fnp2Wef1d///vdyt5dctJe0vb291b1793LHvvnmm3rzzTcrPd9///tfZWdna8uWLVq/fr1++OGHCseee+7evXvbn7/22msaP368PD09FRERocGDB2vNmjWSpF69emnHjh32sVlZWTpw4IC9SAoAAAAA9Y1rSJv6uobs1auXDh48qLNnz9r7duzYUa3rOm9vbw0YMEC7d++WJCUnJ2vRokW6++67ZbVaNWjQIIWFhWnjxo2SpM8//1weHh4aOHCgrFarJk6cqG3btunEiRNVngsAgHM5fToqQRAEQZQXJUsZWa1Wk5uba3r27GnfNmnSJLNu3TojyUyYMMHs37/fvs3Hx8cYY0xQUJAJDQ01+fn5xsfHx759wYIFDksElRflLWU0YcIEc+TIkWrl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Ee6j6QJwTGet+ovbhY7XC58GHJPd8dRgU6ddWoau22/i00u9B6IW4xpZlbGgOKi/e3afV97o6vanZ7sPM94x/xa640obeNf/bIH/qdrG8tnYXhAH+Jg8O0s4+rhXkr7Exwviun73FljSPvXxfty7yWY32Z5b2/I1mHiMLXyW/Yr5urZj+pTb3QKfNT4fS4cU43cPcJ1QePEti7wGaGtl+TnVSMfUuepRxTqC05NzdQEVY90v3n260WHzu2ds98u75xHfwzVJaZujvd1GW9bmoo3PmqMt6+JrnV2332SOoKzL8JUf1V2IyDomEREREQmOXZnTSM/OavA8bY3RJKW17fQZxnXnjhtuIW/UCP5wRRZThmfXyNJQWnSMZXcEvtNwJM8PqhS4IhJIvvwNtt5L/GT5v83lVstX1GvKnWhOkx7J3zM+sU6L95iXZc+p6xpbzliWBgnYSNDy8nK++eYbnnnmGQYPHgxA165d3co88MADzJo1C4BXXnmF3//+91RWVtaoa+XKlaxcudJ8PXToUKZNc53QWkeH5uXlMWnSJLd0uR995LqZun37dnJzc31uf2FhIW+99Rbr1q1j5MiRJCQk0LlzZ3788Ue++OILMjIyAEhPTycnJ8dcBsjPzzdHh+bn59OyZUvzPWs5gM2bN/vcJhF/Un55CQfRNBm8t4vxUKX9aN/1kqDvU0T846EBrsk/HtgwN8QtabyKk3VnGBAREWksXzLaWBk3nUPBGAXqeU0erfPV+1O4p8C1GnTfBwCs/d/L2LTGNVVXn8E5oWySiISRcEyTLj7aC8zElaHxClzTXz3usbwJ19RbI/1UrpaBHVI3vwZB7733Xvbv389HH33EwYMHOfvss7nttuq543bt2mUuT58+nZkzZwKuOUAnTZpkmxq2a9euXHDBBWzYsIHi4mL69+9PVparx8W+fft44403zLIZGRnk5OTw7bff0rZtW+677z4uvvhiAJ5++mmz3IABA1i/fj0AN954Iy+++CIpKSk89thjLFmyhK+//pqSkhIGDhzI5Ze75kesrKxkz549gGvE6qOPPkpSUhJ33303H3zwAVdccQU9evQAYOnSpeaxvPrqq0yePJkePXpwww038P7773P33XcDUFZWxuuva4i8SLjxV4A4be5s86SmPL/A7OHVoWlTcktKQtrDyy5VU3JZYYhaE3lq64EcLumY4hN1Ai0SqTq33BnqJvjNjzs1B5aISCjllpSY1x/+SBUbrny9tjKCpbrZHBm8XXeFyzVXbXaf2ctc/vmFzUPYEhHxxi7bnUidJliWh3tZXg+k+7HcT/VqoXjwaxC0X79+jBhhk1IT2L17NwsWLDBfGwFQgJtuuombbnJPKWekMzzzzDNZtmxZjfqKiorIyMigtLTUXHfrrbfSv3/N1IsrV67kueeeq7XtCQkJ3HbbbW5BW6tnnnnGHEm6b98+Zs2axcMPP8wvf/lLDh06ZJbbv38/M2bMMF8/+OCDXHXVVaSmprJ48WK3OmfOnMn+/ftrbZeIRC4jAGpdDpceXt5SNYk9X9MuhUNP5GgZWSsikc9ZWcm21c+EuhkiIjHB243c7m+7pvvo/va78Pa7IUsV66ta52Mrds2rCTAFzHSy1mXPclZTqp4zRlYvs/CEWxnPfU+xLPe1vGXM74ll36VFx+zbHQGs6QpDlcnGjt01WDhcc4mIiEjk8GsQdNmyZTRv3pzzzjuPNm3acPLkSXbv3s2///1vZs+eTV5eXr3r3Lt3L++88w69evWidevW5OXlsXbtWh566CG++eYbt7L/+te/aNWqFWeeeSbx8fFs376dRYsWMXfuXNtRplYnTpzg73//O5deeilnnnkmLVq0oKCggJycHF588UVeeuklt/J//etfOXjwIFOnTqVbt24UFhayatUq/vSnP7ml3c3NzeWSSy7h0UcfZejQoTRv3pzt27fz9NNP8/zzz9f78xCJZD5NMO5PNhe/bhfIHk2xu1A2tjFYL66TywqZn9m+0c2MVWlzZ5vP4XwjBrxffIfLzQERkXDidDopLTzKpux7+OGr1aFujohIxLKO4jQ0ds6wcO8wV9t8bNapNKxBX88AsLcpNzy3AWi57A23MkaHfOs2hotGXWkuG/N7QvCnmvHnyCXn6oIa1zrhOOdmJIz8FBERkfDk1yDo4sWLa4x29MbzxNKbb7/9liuvvLLugsBjjz3GY4/VPUvshg0bauy/rKyM22+/3af9GJ5//nmfApn79u1j3Dj74IpILPFlgvGGsrsQtLv4tZazTmYO3m8IWC98rfvwZ0A3mubG9MbzGI3RsdaUwdblcBQtF98aBexi/T8cqM+kIX+bfC1jV87z75Wvf+fEd3Z/+/39+/PKtf38Wq/SPImIRCa3UZxVQp1RRqKLZ6dO64jQULn6p9t55+SHoW6GiISQr/fIdJ0jIr7waxBURCRY6johshtluO2qYeZzfXpPe+uB/URZYY2b4aVFxwIa7I1m4TIa1NfUtyKBpGCliIiIiHe66R29PAOgSn8rIlbGvbmG3uMLpHJK6Vs8zsw0p3uE1cI17brEBgVBRSQqeY4yhIbPx+mtB/bf3ncFKQI1OtSfRj+1nyYprc3XwZ6vxi4obYz8DLdRn94CoLr4lljSpEU7Lp6YRcfuA4hP1IgTERGRSOYtYKhOV/4VTSOSjJvVobxRXd56s89Z5EQkdhj35hp6jy+QNie/DlR/v4brPcJgipS06xLdFAQViSC6SHUF0YzAphFQM3p/5Y0aQW5JSdj0AAsnTVJahzQFql1QelfmNNKzs0I6ArS2UZ+hTn2r/+8SShdPzOKMnw0NdTNiVtZLh0LdBBEREYkQ1ukQGsvzZrU/blRbA8PWzrnWjrnGdVnCsV6N3l+4uPDDRQDsRud2IsFQW8Y44z27DvoSWOGYdl1ij4KgIn7ka8/PSJ7/8Q9XZJExPNttXTmlja538ODBzJs3j7S0tPpt+D/3ur1sCTg9y4ydVGOzGmW8lKtzG4/14xaewOn0UtKjfl/aabs/u/rr2LbWdvmyzwZvacOzrT4edyBo1KeIvY7dB4S6CRGj4mRJ3YXqafI93/m9ThEREZG6WG9WB+JGtbfOuZ7XZcMT+/t938G2InuquaxzO5HwYNdBP5zS6YpIYERkEPTnP/85U6dO5ZJLLuGcc84B4Ntvv6Vr166Nrrtfv37MmjWLvn37AvDZZ58xffp0Nm7c6Ld29e/fnwkTJnDxxRdz+umnm+X+8Y9/8Pzzz1NZWdno4xAJlOKk5jUuWtKzsxpdb4MCoGJr8ssnKCpzX5eSFJq2hJNwHvUp0cufKdGCmV5NKXB9d2jbhlA3QURERCQqlLfeHOomiEiM8SWdbiQPZhGRCA2C9u/fn/Hjx/u93ssvv5x3332XpKTqaMGgQYPo378/Q4cOZf369X5pV0ZGBhMnTnRb9/Of/5z58+fTu3dvMjMzG9R+aZhImrfDc15Hf5piWc4Y7r1ccllhQPavAGjDeAt4vnJTs9A0KMR27drl9T2N+pRopAux0Kk4WcKhbRv4z/P+/xn0viAFgC+2Fvm9bhERkWgTKdfzkSoQ84PW1kE1WlzQyfW5bd23Red2IgFml+bWGOFpfa88v4CElqdSnq/7QCKxJCKDoNu3b2f69Ol89NFHvPDCC6Smpvql3rlz55KUlMSxY8e4/PLLAVi3bh2tW7dm7ty59OjRwy/tqqioYP78+Tz77LNs376dYcOG8dprr5GYmMjkyZOZMWMGP/74o1+OScKfdY7L8vwCdmVO8/qlHMh5Ha3ziFgvIj17O+WNGsH8gLRAGqKoLHYDnp527drF5MmTAY36FAmEUM4rHGs+f99108zRru5MJMHUkY4sZSnXcz255Nqu86VMrNfVjW4B/CmJiIg6iflHIOYHra0u5+oCGOO3XYTcT3/6P9dCZouwPbcTiRZ2aW6NEZ7W93bccAvp2VmaDzQMBKKDjYg3cQ3dsFu3bmRnZ3Pw4EFKS0vZs2cPTzzxBM2bNzfLDBgwAKfTidPpZPLkyTz11FMcPnyY48eP88orr9CyZUu3OseOHcvOnTspLi7m/fffJz093dx+0aJFZrl3332Xhx56iPfff5/y8vKGHoKb3r170717dwCWLl3K1q1b2bp1K0uXLgXg3HPPpVev2ido97Vdf/zjH7nlllvIycmhpKSEFStW8O67rtzjcXFxGhEXZazBRTvWL2hj2fgyjuUvZYfDYfvotmS+28PhcJA/eqTbw7Ocsa1nmS7PPW6W6fLc4173affwrMt4WNtu19btvx5O/uiRbP/1cLOc0Q6jDZ7H48l6TLV9Vo19eDvGhjzsfh7Gen+0NX5pGuktR7Hu1SPEH+2pUZ8iIgHwAA/Qn/5MZ7rXdb6UifW6mlN9vSQiEmlyS/w/F7bYM6adsY5iMmy7aljA9185djcVbba4dSKNP9rTfMQt6Vyv+uKWdGbpyEvc5ho16q9os0U3wUVEYoDnfblozwog4aFBI0EvuOACPvzwQ1q0aGGuO+uss7j77ru57LLL6NevH2Vl7vkZH374Ydq2bWu+zsjIoF27dgwdOhRwpZ195ZVXiIuLM1+vW7euIc1rkN69e5vLO3bssF3u1asXmzc3fn6CoqKa6S+aWvKPHzhwoNH7kIYzRmYaozKh+gJDk2VHttySEjo0bWpeuBs/32D2Auv+9rvkjRrh9nu0K3OaWxuMdhrLLT3qiPW0Hb6mTlJvMqlNkxbt3F5nLCgO3s6Loe+CcW6rplB7KnJf1Uht7nFYnvsV8UUxxTSjOutAZtU/K891vpSJ5bpERCKVcT0TCrE6wrO2EU7B4jkqFFw3ruOP9uQ75prr4o/2dLsOq+3aTR1URURij/U+nbVTjEggNWgk6Jw5c2jRogU7duygR48eNGnShN/85jcA9OnThwkTJtTYpqysjJ49e9K+fXvef/99AIYMGUL//v0BmDlzJnFxcZSXl3P11VfTqlWroAZBrQHa48eP2y63b98+IPvu378/gwYNAuC9995j3759AdmP+Ka2C4xgX2iIfxmBx3APZHd/+10zJbFdW2N5hDDUPrenehKLry6emBXqJohEjDTSWMQiiqui6sUUs4QlLGWp27qd7OQEJ2ot4+u6aK9LRCSWGSMcJXJYR4VWtNlSawDTCI7aZeg57dDFul4TkVp5zuEJGgwgIo1T7yBos2bNGDBgAADp6el8/fXXlJaW8s9//tMsY8ynabVw4UJycnI4fPgwf/3rX831/fr1Iy4ujl/84hcAbNiwgX/961/k5+czffr0GvUEm5FuEsDpdPq9/gsuuIA33niD+Ph4Dhw4wMSJE/2+D4lMoe7lmjZ3do30O9YRsdZy1mfj/bxRI4KSokeiW9ySzm4pl7ylTtJFtNRXx+4DAr6Pj8oq+KisIuD7CYaKk0p9F8msc303xCEOsZa1JJJIEUUkksjbVf+s69awhgQSai3j67porquC6Pi7ICKxq7HfK6ESqe0OR9agaJdVmebDLjhq7aw64D9PhKC1IhJJrINTYm26MLv7rhIY6pAVW+qdDrdVq1YkJNS+WevWrWuss45utKZ7PeOMM2jbti1JSUk13tu/f399m1endevWMXDgQPP1nj176Ny5M0eOHDHXnXLKKeayNeXv4cOH/dqWCy+8kDVr1tC2bVsOHjzI4MGDA3LMUi09OyvkwcVIYTdXqd2IWI2cdTHSKFPsWt6VOY3y/ALzc1Gvtbr5muYWlDpJGi8+MXb+PvnDoW0bQt0ECbGJuDrqzWAGj/AIE5mIA4fbujGMqbOMr+uiua4f+MGfPxoREYkSpUXH3KdoMKZQsKzqu2CcOf2BMZXCFICFJ9zqylhQTGnRMZbdkRrIJtegjqkiIvVjnborFu+nhoO8USPUUSrK1TsImpeXR0VFBfHx8bzxxhtmGty6pKZWn3idccYZ5vKBAwc4cuQIZWVlJCUlcdppp5nvderUqb7Na7AvvvjCXE5PT7dd9sd8oIaePXuyZs0a2rRpw759+xg0aBDffvut3+oXkeCyCxrHSk81f6ktza0upkVCo+JkCYe2beA/z6sDUazby15mMpMNbGATmxjPeBw43NZlkcVIRtZaxtd10VzX4zwe6h+niIgEWEM6YHsGLI06rKNVdtxwizknq3HDNm/UCFoue8NtW4fDEdw570VEgiAaA1XGXNt2c24rOBd61u9z/TwiV72DoCdOnOCDDz7g8ssv5+qrr2bcuHH885//JDExkUsuuYTJkyczZ84cPvjgA7ftbrrpJpYtW8ahQ4e4//77zfUbN26ksrKSTz75hEsvvZSBAwfyq1/9ik8//ZRZs2bZtiEpKckcoRkXF2c+t2nTBoCCgrxvPosAACAASURBVALKy8ttt7VL1QuuIOi2bdvo3r07Y8aMYd68eQCMGePq7f3NN9+YQdABAwawfv16AG688UZefPHFerXLGgDdvXs3gwYNYs+ePbbtijSDBw9m3rx5pKWlhbop3o2dVGOV10THdZS1287XdXZ117oeGLfwREDSMnvypb2+HlPgWxsa1p5agEZ9NkDcks58N2RujYnQK9psCVGLJNYtvjnZr/Vd0Mn1u714n/vvtN1NMX+dTFsvmlotX1EjxYuyIUSGn18Rfn8HJzDBXF5f9c9qPetJJ73OMr6ui/a6REREJLq1ePRSczkcz+1ERERiRb3nBAW45557KCwsJCEhgZdffpmioiLy8/P597//zbXXXus2j6a5o7g4tm7dyo8//sgVV1wBwOrVq/nwww8BmDFjBpWVlSQmJrJ69Wry8/PdApbWwM/YsWM5cuQIR44c4cwzzwQgLS3NXNevX7+GHBaZmZmUlZXRunVrcnJyyMnJoXXr1pSVlZGZmVnn9r6264477jADo507d2b37t04nU7z8fvf/75B7Q8HYR8AlZgR6MnTu7/9rtvzrsxpZnChrhGgvgY6or13kd3IT6W5lWiydd8Wtu7TDQ+pvy+2FvHF1qJQN0NEREREGsh6LaBzOxER7+KP9iT+aE/ilnQOdVMkSjUoCLp582b69u1LdnY2hw4doqysjB9++IG1a9dyxx13uKWWNTz44IM88cQTHD58mMLCQrKzs81RlgBr167ld7/7Hd999x0lJSVs2LCB3/72t+b7eXl5DWlqvaxbt45Bgwaxdu1aCgsLKSwsZO3atQwaNMgc+Sm1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iIiIiIiIiIgErftPrfVa/tuZPV7LZTX0epk9z/UK+tsXe3imz8/4+7LdVbb36ewH2T/sXWd5xIPsXzkTgPj7Blt19v99j9ft/v3MHv5eSdsiIlI7nWc9b72mJj1qczTiT9bUdSn2xhHslARthIqysgmLbW6VpeHYcP0kjrXZDEDooG5V1BYRERERERERERGRYOG6r+96Ffupl21g05ygjVBq0qPWf0w9LdKwuBKgZWn+TxERERERERERERERaUyUBBVpgIYs/4Li87dbX1bXeRERERERERERERGpUhvasJ71tKZ1ufcVlf1Rz8hrQdMN0zEcsbTKjObtaXcQlxVNG9pYy13tNd0wnda09qgn0phpOFyRIBbybidNjiwiIiIiIiIitZKZOJAWyz60OwwRkYD0JE9yIzcymclMYILHe8Br2R/1or75HaGnLidq790k5Xfkmm/bMOGDq8niSWs5LODJ0veTmUzs8qutel/U8/dNJJAoCSoSxLwlQNsev96GSERERERERERERESCk/sDITvuG0kUY633SaX/3N9XVPZLvdJB/iLT+jOstDxs7eXA5dZyE9OzjbXn6g3DJI88Yoip/JsgPpHucABQlJVNWGxzirI0VZ2dNBxuI6YJexsO17C3Q5Z/Qc/NL9gdjoiIAGlJzUhLauaxzGi1CaPVJpsikmCh40REREQkuLlfC+jcTiT43PbyEuYzn1xyAcgll+/4jjzyACikkCKKypX9Vc8MKQDApJiikBIAikJKrHqmkV++vdJ6eRFFvMmbdKKTX75XUl7CipUApCY96vEq9lASVCRIhLzbidDT3Ty+RERERERERERERMR3Nk24l3WsI5xwcsghnHDWspYwwsghB6P0X9myv+phhmKGOgADw4S8iEIMEwyM0uVhVntmqMPZQmm98KIQ1rGOdNJr9b3ITBzo0++tSH1TElQkSFQ096e5Wt3pRURERERERERERHxlFKMAmMpUAIYwxHofQggGRrmy/+qZOC57DwDDNHgt8WsM05ksdS43rfYcl73nbKO0nmmc2xd3mg+6fmg0TvtpTtBGavjcXKu8aEzNxgLXf1x7FZ+/3e4QRESkGm59bCMA62b8ylq2dW1XAK65bYctMUlw0HEiIiIivpTucNA6Kop0h4N9A/oBsG9AP2u4PvE992sBnduJBKdDHOIpnmIDG9jKVpJJZhCD2MAGetELE5OZzPQo+6te+E0vUNRqD2EnrmRzmzjm/Xon1+++kLO7dnN9lw8pbvE9p/4zgkEM4sMuLdiwuzUxV13OvF/vZHfnk9zyl5N2fztFbKMkqPjF+LfzyCnwTLb6Un5Ohl/aFRER8ZW0Dt3LLftF16Y2RCLBRseJiIiI+FLCipVkJg60XgFaR0XZHFXD5n4toHM7keA0kpFWeT3riSfeet+f/l7L/qq3r1k/WhNFao8/M3JAL8Jozv3/+x6pSY+SyUCKLtjt1t5A+tOf+MeSAfjyimO8jTo1SeOlJKj4RU4BvDM6GsMw7A4lKIW826nC4W9FREREREREREREpHFwf5iFFSuJX5xMatKjdoclEhQ0J6hIANL8nyIiIiIiIiIiIiIiIrWnnqAiAUzzf4qIiIiIiIiIiIiIBL4Wyz60OwQpQ0lQkXp04c/7kNBnIhf87JeEhjvn39hw/SSOtdnstX5d5lT113ysIiIiIiIiIiIiIiIigU7D4YrUkwt/3odfPfA+bS+/1UqAAhUmQNsev76+QhMRERERERERERERaTA6z3re7hAkAKgnqPjEXa8cIbJJS+6ZlwdAkwibAwpACX0mEhoWUWHPzyHLv7AhKhER8Zeun88HIM1tWfL3ZU1zAAAgAElEQVRbx+0JRoKKjhMRERGR4OZ+LaBzOxEJVvsG9LNeE1astDmamguLbQ5AUVY2YbHNKcrKtjkisYOSoOITkU1asmhMDKZp2h1KQAl5txNGH+cv2w08UWE99foUkfpSXOiwO4RG48PFE8stGz/pgA2RSLDRcSIiIiKBqPOs50lNelQ3k6vB/VpA53Yi4m/pDue9Hvek5Z0+aLd1VJTHa2biwKCc8zI16VHiFyeTmvSo3aGIDZQEFfEjVwK0rLbHr6fn5hfqORoRETjx3Sa7QxARERERkSDk6lGjm8kiIoHF1UuzbNKytlxJ1dqKKTjL8Lm5AOTnZLD0wfZ1as8X9g8bZ3cIYhMlQRupvOhjfH7Lfdz42Vt2h9JguPf6LKv4/O3WL34REbsUFxWwb/VrdofRaFx1UTcAdh7ebi27+qomAHy9M8eWmCQ46DgRERERCW7u1wI6txORYFPXoW//+uk4q8foXa8cqfC+eKAkSKVhUxK0kdrVfQYn2nzBru7P1vizrvk/3eXnZPgqtKBQWcKzLHO1hocREXsVFzo48d0m9q1+jR93r7Y7nEbjzJ/+4ywkNbOWffWp82aI0Uo9cqViOk5EREQk0KlHTeXcrwV0bici9SXd4aB1VBTpDkfADF1eWZJTnYakPigJ2tjkAtHwHXMA+O6yOWBCSFEUQxfWPpEZ2aQlw+fmcs+8PACiwuG33RvO4VXdpKe5OpuSoWn1EFHlCh1neP+B1naHISIiIiIiIiIiIiL1IGHFSjITBzp7cq5YqaHLRVAStPHpDDwDofdEURzuILQomo6pd9Ft61M+3YyjED7YVuTTNu3kLQEaKAnPsgodZ9j50V/sDkNEREREREREREREgohrGNv6kJ+T4be5Q7vn/o4wIukx9x6ftVkXD7iVh/evvK6GCfYtJUEbm+PAOii+N5/QwmhKQgto8+PNROe18fmmHIU+b9J2xedvr7pSLSwaE+OXdkVERERERERE6vOmtoiISHW4J/p8PTRuGJGkxLwTMMO3ZyYOtMpV/U3WMMG+pSRoYzQKME2u2vYE27r/mS9KRvPFmNE+ado0TWtI3GBVk/k+RUREREREREREREREJPCE2B2A2OAQ0Bsu3/Uw9Cl9L5aKEqDmansnkRYREREREREREREREZHqUU/Qxmik82XRhtIhWNfbFontKuv16a+hb0VEREREREREREREqiuQhzXvPOt5wmKbU5SVzb9XfArAvgH9SFix0ubIRJQElUZOvT5FRMRfmj17U7llv+ilB2ykajpORERERIKb+7WAzu1EpKELi21uvbaOigKwXkXspiSoNBrV7fWZ0GciV935Z8LnNquv0EREpAHaebj8zY6vd+bYEIkEGx0nIiIiIsHN/VpA53YiYpf9w8bZHYKI7TQnqDQa1e31edWdfyY8SglQERERERERERERERGRYKWeoNJgVdTzs6q5PpUAFRERXxg47FUAPlw80Vo2+4VLABg/6YAtMUlw0HEiIiIiEtzcrwV0biciImVlJg4M6HleGxIlQaXB8pYArelcn4vGxPgqHIbPzfVZWyIiEvh23DjSWXBLgo4b0QbQDRCpnI4TERERkeDmfi2gczsRERH7KAkqDUJ15/sUEREREREREREREZHa83VPxvycDI9ORPk5GSx9sL3P2pfGS0lQaRCqO9+niIiIiIiIiIiIiIgEjrIJT42qKL6iJKgEHfX6FBERERERERERERGpH/sG9LNeE1astDkakepTElQCSmUJzqqo16eIiIiIiIiIiIiINGT7h42rl+2kOxy0joqyXgHrVepOCeX6oSSo1Iu6JDe9aXP0Wm7e8nL5FXN9tgkRERERERERkQZPN2FFRMSbhBUryUwcaL1K7bknlF2UUK4fSoKKX7nG7l7S55fV/kzb49fTc/ML/gqp2godZ+wOQUREglinH7YBkOa27KsdZ+0JRoKKjhMRERHxF92ErR/u1wI6txMREfeEstQvJUHF5z7/5SSOtN7sdd2Q5V/UczS1U+g4w86P/mJ3GCIiEsTWzfhVuWXX3LbDhkgk2Og4EREREX/RTdj64X4toHM7ERER+ygJKj5XUQK07fHrfbYNV5Jy3+pXfdamiIiIiIiIiIiIiIiINAxKgkqduc/3GZbR3Vpe1HIbhmFY74+wnUX8rd7jExERERERERERERFpaFos+9DuEEQCmpKgUiPuCc/K9A+/sR6iERERCVydZjnnlk5LamYtM0/eAIDRapMtMUlw0HEiIiIiEtzcrwV0biciImIfJUEbqdDT3Xzanrk6m5KhaZim6dN2RURERERERESkfmQmDlSvIhERKSfd4aB1VBTpDoe1bN+AfppjWgKekqBSY66Ep4iIiIiIiIiINDydZz1vvaYmPQpAUVa2nSGJiIiNElasJDNxoEfSs3VUlN+2l5+TwfC5uVZ56YPt/bYtadiUBK1EZGQkGzduJDIykrCwMJYuXcrUqVN55513uOaaaygsLGTLli2MHz+eoqIizjvvPN555x06dOhAWFgYM2fOZMGCBQCMGDGCJ554AoCnn36at956y8Y9g+Lzt9u6fRERERERERERCUxhsc09XgErGSoiIuJv7klPVzJUpDZC7A4gkOXn53PrrbfSrVs3unXrRr9+/bjuuutYtGgRCQkJXHnllURHRzNmzBgAJkyYwN69e+nWrRs333wzL7zwAuHh4bRo0YIpU6Zw3XXXce211zJlyhRiY2Nt3jsRERERERERERERERGRhklJ0Crk5OQAEB4eTnh4OKZp8sknn1jrt2zZQvv2zqcSTNOkWbNmADRt2pSMjAyKioro27cva9asITMzk6ysLNasWUO/fv3qf2dERERERERERKRR05yfIiIi0lgoCVqFkJAQtm3bxokTJ1izZg1btmyx1oWFhXHvvfeycqVzHOzXX3+dyy67jB9//JFd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d2JWdZqRRbtennbrvxKxOuvSLjWpTU3WpcjaokiHmvqvB61NoZ122rWhdjW1ydp1xRvt2rdLhzXrNtkuRVIU2bi/2pq0W1d/Fr2mfW3arS1SUxRZlyLtampSFE0X9iiKpu3e2Ld+o11NsrZIURRZ0742tWvWvuPXu6pYlw41tVlRrMm3X/7f3PbaX9IcXjnxhCRJ99vuSJLsddN1+fPnhzVpU1NTU99u+L80SwxthStBAQCawYDnJmTAc00/ln5i0rI8MWlZhSKiWhgn0Lz+lGTp+u1hST6U+qtDv9Oozbj1PxtfrXl06j9euWgz/b7SaPtzH/xgBg0alHPPPTc77r13nlv/CU3N7bdn0qhR+ffzz0/jjzJuvvnmfOhDH8pnP/vZJEltbW2uvvrqDBkyJB/40Ify2ic/mST5QJIvJOmV5IL1z12V5Ddv87UDvFOzMztH5shckStyVI7KwixseDwu43JP7tlo+087fTfrapflye6X5Mkut2RVp6eystPULOr6+4btJzrfkhd6Xp61tcvyQs//LF27Dz43LR+YMyWrOj2VdZP75dWn2req+N5Ou1d2+VHWtluUFcXahvHw51WL83qxJknyerEmz6xZ3LBPO+20a1vt0nltk3azd+my2XapLTbur6Ymq9rXNmQ5Z+3SOSs61ja0S5dGfdS+8XXDxu1SWzRt16ljk3bv5vWetvCPeXr1y9mupkM+v33jrx22PoceemhGjRqVp59+OosXL87ixYvz+OOP50tf+lJqa5um/r7//e/n8e3Z6W8AACAASURBVMcfz8KFC7N69eosWrQo999/f/7hH/5hk30PGjQoY8aMycKFC/P6669n9uzZufnmm9O9e/cm7Y477rj87//+b5YvX56XX345d9xxRz7wgQ+8rfi33377fOc738nUqVPz6quv5uWXX87jjz+es88+u8mX8Hr27JmrrroqTzzxRFavXp2iqE909+nT5239npq0oduHVJu6uroMHDiw0mEAAADbiHP81uHcJD/dzL7fJPnH9dsfSP09Q2uTrEvy2vrt7dbv/1WS09dvn5Tk5jf19efPfjbnvfJK+t17b37xpn0v5I2lcr+X+nuSbjBo0KBccsklOeaYY5Ik/3reeTlv9Oh0W7o0b/YvSf59/bbxBbQGv+p5RP608oVct/Sp/LLnEXlk5YupSZGvdN031yydkpoUOaTTbuuvwSlSrN/STjvttNOuetp9f8ABGfv8iw3tdjho/9z7v3dvsl2KZOwLLzTpb5cvnJiT/t+LueWju2Xhjb/J4YOHpFi1Oq9NnpoiNTn2Pb1z8ayJ+b8f+lCK+Z1T23tFLp4yJYcPHpKaosiyJybmmN12S01Nst05J6dI8vrIcdlu2FEpkqypm5msT5Zl/a0OOgzc4y3bdR/1TynWrstro/6Y1Y/NyE4/Py+V9vjjj2/yHH/EiBE5++yzN/mcESNG5Jxzzml4PG3atOy9996bbPu5z30ut956a8Pjf/zHf8yNN96Y9u03Xkh2jz32yF/+Un917CmnnJJf//rXG7VZsmRJPvzhD2fatGlbfF3//d//nb//+7/f5L7LLrssw4cPT5Lst99+mThx4kZt+vbtm3nz5m1UvymF0jpLXV1dxWNQFEVRFEVRFGXbFef4raccnxQPJsWrSfF6UkxNim8lRbs3tTs5Kf6cFK8lxf8kxUFJUawvv2zUrjYprkyKeY32Lz7vvKJr165FkmLckCHF6l69irWdOxdjO3YsPtWo3TPnnVc8/vjjxamnnlokKU488cRi5MiRDX2fcsopxS+///3ihqR4aX28E5PijKQYNmxYUVdXV9TV1RWzZs2q+HFVFEVRFEVRyl9eOfGEJo/3uum6zbZ7c9sN7TeUTT1/w3M2PH/D48bP2VBfdpubQ/70pz8trrvuumK//fYrOnfuXJxwwgnFqlWriqIoirVr1xa77rprQ9vzzz+/OPjgg4uuXbsWPXr0KK699tqG/u+4446Gdr179y5effXVoiiKYuLEicWgQYOKLl26FP369SuGDRtW9OzZs0hSdOnSpVi0aFFRFEXxl7/8pejfv39x2GGHFStWrCiKoijGjh27xfGz0047Nfz+Z599tujbt2+xzz77FIsXLy6Koijmz5/f0LZ///7FFVdcUfzDP/xDcfvttzc8r0+fPm9rrLonKAAAAG3OnevLW7lxfWlsU3dIXJfk/PVl++23z4MPPph/+7d/y9KlS9MryfCxY/NkkuHDh6drTU1O/o//aHjuKT//ef5y883505/+lEceeWSTcSzbeef806Z2jByZkSNHJqm/EhQAANqStfNfTLtevSsdRou78MILs3z58obHd9xxR+6+++586lOfSm1tbd73vvdlwYIFSZIrr7yyyXN/+tOf5stf/nKSZPXq1Q31p59+erp27Zok+exnP5sZM2YkSebMmdMw50iSIUOGZOedd06SXHvttZk9e3Zmz56d++67L8cee2yOPPLI9OjRI4sWLdpk7GvXvrEk8fjx4zN3bv2NSKZMmZJDDz00Xbq8sbzy7Nmz881vfjNJ8qlPfeqdHKIk7gkKANAsBlyzNAOuabpsYfHS4BQvDa5QRFQL4wSqW/v27XPbbbflxhtvzO23354k2SPJE6m/F+k/XX55hl9+eT63vv3jBx2Ux1asyKJFi/LQQw9lv/32y7x589KvX7+GPt/JUk8AVF7juYBzO4A37HXTddu8z9d/dm3mLHt1m/fb2jVOgG7QuXPnhu3NzR923XXX/NM/1X+9cs2aNU2Smx/72MeSJC+99FIuuOCCPP/881m+fHnuv//+HHzwwQ3tDjzwwIbtZ555ZqPtdu3aZb/99tts7EuXLs0tt9ySJBk8eHD69u2bvffeO3/7t3+bJBk3btxmn/tOSYICAADANjJq1KhMmzatybet2/XvnzuSvJpk16LI2g4dMj7Jv/TunSWXXpp27dqlS5cuOeSQQzJt2rTU1dVlzz33zO67754OHTrkpJNOypgxYyr1kgAAoNVaM3lSjrjrv/I3N4/M39w8MjU1NQ0/W2tZ/JlPZ/FnPt3w+G9uHrnR69rQ7u069NBDc9hhhyVJ/vjHP2bOnDlN9p977rkpiiLz58/PWWedlZUrV2bo0KFNEo4bvoi5yy675Oyzz85uu+2W7bbbLp/4xCfywAMP5EMf+lCSpGfPng3PefXVVze5veuuu24x3tNOOy0333xzBgwYkDlz5mTatGnp1q1bbrvttnzpS19626/7rUiCAgAAwDYwePDgnHbaaTnssMMyYcKETJgwIUOGDMlXf/jD7DFlShZOmpSxd9yR3bt3z6FJ/v3FF3P3Pfdk8uTJeeyxx/Lzn/88Tz31VNauXZvzzjsv99xzT6ZNm5Zbb701Tz/9dKVfHgAA0Artu+++uf3229OuXbvMmzcvZ5xxxls+p1OnTvnFL36RY489tqGuQ4cODdsjRoxI165dc9pppyVJtttuuwwfPnyLfdbUvHHjkKIottj2yiuvzOc///mN6vfYY4/ssccebxn/2+WeoAAAALANjB8/vsnEf4OxY8du9jlXXHFFrrjiik0+Z0vPAwAANu2ZL5xV6RBazH777Zd77703PXv2zAsvvJAjjjii4R6bjV199dW5+uqr07Nnz3zxi1/M5Zdfnk6dOuXSSy/NH/7whyTJokWLsueeeyapT4IuW7Ysv/71r/PjH/84O++8c8MStwsXLmzod8cdd2zY3nA/0aR+Sd0txXzuuecmSe65556cfPLJ6dKlS+66667sv//++e///u8MGDAgr7/++lYcmXquBAUAAAAAAIAqsv/+++e+++5Lz549M2fOnHz0ox/N9OnTt/ichQsX5oorrsgrr7ySJA1JzySZMGHCFp+7ISn55JNPNtTttddeG22vXbs2kyZN2mw/e++9d8P2bbfdlkWLFmXu3LkNydhevXrlgx/84BZjebskQQEAAAAAAKBK7L///rn33nvTo0ePzJo1Kx/96Eczc+bMjdp9+MMfzne+85387d/+bbbbbrt07949559/frp3754kefbZZxva3nLLLQ3bX/nKV7L99tvn1FNPzc4775wkefDBB5PUr1rz8ssvJ0nOPvvs9O/fP4cddlgOP/zwJPX3JF20aFGSZOjQoSmKIkVR5GMf+1iS5IUXXmj4PSeeeGJ69OiRPn36NFmad/HixUnql9jt0aNHevTokU6dOjXs7969e3r06JEuXbps8ThJggIAAAAAAECV+NrXvpYePXokSQYMGJBZs2Y1JBuLosjQoUOTJLvuumt+8IMfZPLkyVm+fHlefvnl/OhHP0pSf8XmxRdf3NDnQw89lOuvvz5JfRJ02bJlDY/nzp2byy+/PEn9FaFf+9rXkiTve9/78te//jX33XdfOnXqlCVLluSCCy7YYuwPP/xw6urqkiRHH310Fi5cmLlz52b//fdPUp9E3ZDQfe9735uFCxdm4cKFTe4hOmXKlCxcuDDf/va3t/i73BMUAKAZ7H3jV5MksxrVnXXBxt/IgzczTgAAqlvjuYBzOwAq6emnn84NN9yQQw45JLvttls6duyYBQsW5JFHHsmPf/zjjB8/vkn7M844I9OmTcsZZ5yR/v3755VXXsnYsWPzL//yL1mwYEFDuxtuuCGvvvpq/vmf/zn77rtvVq1alYceeigXXXRRpk2btsWY1q1bl6OOOirf/e53c9xxx6Vfv35Jkr/+9a/53e9+l3/7t3/bZq9fEhQAoBmMHf/LjepG/np+BSKh2hgnAADVrfFcwLkdwFt75gtnbbJ+/ooV6dW5c+avWNFQt2bxkpYKq1U7/fTTc/rpp79luxkzZuTUU0992/2uXbs2l156aS699NK3bDtmzJiMGTNmi21Gjx6d0aNHb1S/ePHifOMb38g3vvGNLT5/9uzZqampectYNsdyuAAAAAAAALQqe//+7iY/k+TZc75VqXCoQpKgAADNYMjg0zNkcNNv5A07tVeGndqrQhFRLYwTAIDq1ngu4NwOACrHcrgAAM1g+slX1W80Wgrruh/tkcSSWGyZcQIAUN0azwWc2wFA5bgSFAAAAAAAAFrY+665vNIhlJokKAAAAAAAAK1C99vuqHQILab9Tt0qHUKpSYICAAAAAADwrjzzhbMqHQJskiQoAAAAAAAAUCqSoAAAAAAAALSINYuXNPnZljkGzUsSFAAAAAAAgGbzvmsub/j57DnfSpKGn23R/BUrkrTtY9AS2lc6AACAMpp1TteN6mp2GV+BSKg2xgkAQHVrPBdwbgdQr/1O3Zr8bOv2/v3dlQ6hTXAlKAAAAAAAAFAqkqAAAAAAAABAqUiCAgA0g8OGP5TDhj/UpO7xe/fL4/fuV6GIqBbGCQBAdWs8F3BuB9D81ixe0uQnbOCeoAAAzWDWew/YqO6g/XaoQCRUG+MEAKC6NZ4LOLcDaB7zV6xIr86dM3/Fijx7zrey103X5dlzvlXpsGhlXAkKAAAAAABAq/bMF85q2N7793c3+QmbIgkKAAAAAABAVel+2x2VDoFWThJ0Czp16pRHH300EydOzNSpU3PJJZckSW644YZMnz49U6ZMyahRo9K+ff2qwt/85jczYcKETJgwIVOmTMmaNWvSvXv3JMnRRx+d6dOnZ8aMGbnwwgsr9ZIAAAAAAABKpfFVorCBe4JuwcqVK3PYYYdl+fLlad++fR5++OGMHTs2N954Y0455ZQkyU033ZQvfelLufbaa3PFFVfkiiuuSJJ88pOfzPnnn59XXnkltbW1ufrqq3PkkUdm7ty5qaury5gxYzJt2rRKvrzke5X99UAz+n6lAwAAAAAAgMpxJehbWL58eZKkQ4cO6dChQ4qiyNixYxv2P/bYY+nbt+9Gz/v85z+fm2++OUly8MEHZ+bMmZk1a1ZWr16dW265Jccff3zLvAAAAAAAAABoY1wJ+hZqa2vzxBNPZI899sjVV1+dxx57rGFf+/btc+qpp+ZrX/tak+d06dIlxxxzTM4777wkSZ8+fTJnzpyG/XPnzs0hhxyyyd83bNiwnHVW/WXbPXv23NYvBwBoIfs9/MskyaxGdddd/2JlgqGqGCcAANWt8VzAuR0AVI4k6FtYt25dDjjggHTr1i233357PvjBD+app55KklxzzTV56KGH8vDDDzd5zqc+9amMHz8+r7zyyjv+fSNHjszIkSOTJHV1dVv/AgCAirjjpq9uVPflb/ylApFQbYwTAIDq1ngu4NwOACrHcrhv05IlS/LAAw/kmGOOSZJcfPHF2WWXXXLBBRds1Pakk05qWAo3SebNm5d+/fo1PO7bt2/mzZvX/EEDAAAAAADQaj3zhbMqHUJpSYJuQc+ePdOtW7ckSefOnXPkkUdm+vTpOfPMM3P00Ufn85//fIqiaPKcHXfcMR/72Mdy5513NtTV1dVlzz33zO67754OHTrkpJNOypgxY1r0tQAALWvffvtn3377N6k7cN/tc+C+21coIqqFcQIAUN0azwWc2wFA5VgOdwt22223jB49Ou3atUttbW1uvfXW/P73v8/q1asze/bs/OlPf0qS/O53v8sPfvCDJMmnP/3pjBs3Lq+99lpDP2vXrs15552Xe+65J+3atcsvfvGLPP300xV5TU18v9IBAEB5Lf3n/1e/cU7Xhron7qv/IKRml/GVCIkqYZwAAFS3xnMB53YAUDmSoFswZcqUHHjggRvVd+jQYbPPGT16dEaPHr1R/dixYzN27NhtGh8AAAAAAACwMcvhAgAAAAAAAKUiCQoAAAAAAAAtoPttd1Q6hDZDEhQAAAAAAAAoFUlQAAAAAAAAoFQkQQEAAAAAANjm5q9YkSRZs3hJk5/QEtpXOgAAgDLq+h8f2ajuoMMnViASqo1xAgBQ3RrPBZzbAW3d3r+/O0ny7Dnfyl43XZdnz/lWhSOiLZEEBQBoBpPnbPxhx5OTl1cgEqqNcQIAUN0azwWc2wG84ZkvnFXpEGhjLIcLAAAAAAAAlIokKABAMzjhC1flhC9c1aTuZz98f372w/dXKCKqhXECAFDdGs8FnNsBbJqrQmkJkqAAAM1g0qGnZ9KhpzepO+u03jnrtN4ViohqYZwAAFS3xnMB53YAUDmSoAAAAAAAAECpSIICAAAAAACwVXqnd/4n/5Ne6ZXe6Z0dHvxBeqXXJvdt2IbmJAnaRnWt6ZBf9jw8XWs6bPLx1tTpqxx9VVOs+tKXvwV9tca+GrfdUl01v8bW2n+199V4X2uKS1/bpq/d23cNAABAGX03382hOTQX5+J8N99Nu4UfyMW5eJP7Nmy3Ro3nc1uaE27LdutefS3rXn0ti4ddnXWvvpauNR2yesYOqU1NxY5DGUiCtlFHd+mfY7fbPUd1ee8mH29Nnb7K0Vc1xaovfflb0Fdr7GuDt6qr5tfYWvuv9r42aG1x6Wvb9NWttlMAAADK5LW8liJFzsk5aZd2OWf9fzWpzTk5Z5P7NmwXKfJaXqv0S2ii8XxuS3PCbdlu1b2TsvLeSVk1bkJW3TspR3fpn2Jxp3Sr7Vix41AGkqBt1OldDs5O87+VL3Y5ZJOPt6ZOX+Xoq7XE+oUd9kySfH77vTZb93ba6EtfrbV/fZW3rw3eqq6aX2Nr7b/a+9qgtcWlr23XFwAAQJm8L+/LL/PLhmTm6qzOmqxJUp8gnZEZeT2vb3Lfzbk5EzNxs8vmblhS981L6G5ued1t0a7x59Rb+lx7W7ZbMXpCVv5qQsP2hvoetds3+79fmdUkKSodBJtWV1eXgQMHbpO+frPLMflolz4Nj7df9IVst/zjeX2HB7Ns5xuzw8snp8uyjzU8TvKu6/RVjr5aS6wA1erMk89Mkoy6cVRDXfcbZiVJXjllQEViojoYJ+XW/a7vpON+/m1pHttyDgnAu3fY8IeSJPdf+tE8fu9+SZK/O2JSJUMCaHan5JT8Ir/IqqxKp3RKTWpS22511qxtl5/n5/lSvtRk34qsSMd0zIN5MJ/IJ/Kz/Czn5txcnavz5Xw5P8vPkiRfydkZkWuTpKF+U+02tf122+26y1059vVvN3w2nWST22/+XLsl2q17YlnaH9Stuf7ZSk8StBXblhPYwZ12yw27HJn+c0emJh23SZ/Q3IqsykvvPafSYQAAbDOSoDQnSVAAACrl/tyfQ3NoLspFuSyXJUlWfujXaT/1C1mWZdkhOzTZtzZr0yEdKhlydahLaga6L+i7ZTncNmL8yhdyykt/zNzdvpnXt384Rc2qJPVJpjXt56fI+sc1q/J6l0ezYrvH3mjzduv0VY6+Wkus2z+cRX2Gb3pAAwAAAADQaszO7ByZI3NFrsi4jMs9uScr/+aOHJWjsjALN9r33rw3YzP2bS2b+3aX192adiuzIklSZG2KrN3E9ps+126xduu29p+mTZMEbUPGr3whZ75yR5Z3fDop2qWoWZmkXVZ1ejrJ+sdFu7zeeVJe6zzxjTZvt05f5eirtcTa8emsqH2lyRhetW5tVhVrm9QVRfGWbd5unb70Vc2x6ktf1dJXNcWqL301Z18AAABlcnpOz4OpX8Z1SIbk2Byb7rfdkf/J/2Sv7LXRvhfzYm7KTSlSZHmWp0M65N7cm/Zpn+VZnpr1/715u7na1aZdVuS11C+gWrP+s+zG22/6XLvF2rkKdGtIgrYxO9Z2zPbLD01SZPGOdyQp0vm1g5s87vLaodlu2UfeVZ2+ytFXa4l1XVFkTbEur69bkzXFuqxL0aRubVH/LZi1W2jzduv0pa9qjlVfrbOvQcN/nEHDf9ykbtcnpmfXJ6aX5jX6u2qevtr6OCl7X+vibiQAUHYDrlmaAdcsTZIULw1O8dLgCkcE0DqdkTOSJJfkkiTJSTmp4XFtalOTmo22m7PdrR2uWh9ZTZbseMebtt/4XLvxvld3vHObtlu+05g3trtteA7vliRoG3PyDnulaP9Knux+SU5YeUFe6Hl51tYuyws9/zMnrLwgT3a/JEW7l1O0f7mhzdut01c5+mpNsXaqaZenV7+c0xb+MU+vrn/cuO71on7JgteLNZtt83br9KWvao5VX62zrw3eqq6aX6O/q+bpq62Pk7L3NWv1q5s+UQcAAGhjGi+hu7llc9+83ZztunZ/KKs6PZVFHZ/Mk11uyapOT2Vlp6l5ovMtTT7XbrxvUdffb5t2nZ/Oqs5T81qv/8mqzk9nZaepea3XH7K6/YuV/meqajWJryK3VnV1dRk4cOA27fNXPY/In1a+kOuWPpUiyeieRyQpUqQmX1x4b2pTk/t7n5Ak+cSLt6dI3nadvsrRVzXFqi99+VvQV2vu6/SLr0+SzD5nx4a6j01ZkCRpt8v/luI1+rtqnr7a+jgpe1+PNcM5PmzQHHNIAN65DVeBzjqna8NVoDW7jK9kSADbTJnf1xrnT37Z84g8svLF1KTIIZ12S/2itPVzwiQN+77Sdd9cs3TKVrf7zL9+I0WS10eOy3bDjsq3vvXNfH/AAakZ/d3scsDftPCRKA9J0FbMBBYAqlfjDz42KPNEgW3HOCk35/g0J+MLoHWQBAXKzPta8yiKpqm6mpqavHLiCZk5/F+c428Fy+ECAAAAAAAApSIJCgAAAAAAAJSKJCgAAAAAAABQKu0rHQAAQBntfeNXkySzGtWddcHMygRDVTFOAACqW+O5gHM7oGy8r1FNJEEBAJrB2PG/3Khu5K/nVyASqo1xAgBQ3RrPBZzbAWXjfY1qYjlcAAAAAAAAoFQkQQEAmsGQwadnyODTm9QNO7VXhp3aq0IRUS2MEwCA6tZ4LuDcDigb72tUE8vhAgA0g+knX1W/0WgprOt+tEcSS8ewZcYJAEB1azwXcG4HlI33NaqJK0EBAAAAAACAUpEEBQAAAAAAAEpFEhQAAAAAAAAoFUlQAAAAAAAAoFQkQQEAAAAAAIBSkQQFAAAAAAAASqUmSVHpINi0BQsWZPbs2c3Wf8+ePbNw4cJm65/Nc+wrx7GvHMe+chz7ynHsK8exrxzHfsv69++fXXfdtdJhUFLmkLRFxiWtlbFJa2Vs0hoZl5tnDrn1CqVtlrq6uorH0FaLY+/Yt8Xi2Dv2bbE49o59WyyOvaKUt/j7VlpjMS6V1lqMTaW1FmNTaY3FuFSaq1gOFwAAAAAAACgVSVAAAAAAAACgVNoluaTSQVA5Tz75ZKVDaLMc+8px7CvHsa8cx75yHPvKcewrx7GH8vL3TWtkXNJaGZu0VsYmrZFxSXOoSf26uAAAAAAAAAClYDlcAAAAAAAAoFQkQQEAAAAAAIBSkQRtg44++uhMnz49M2bMyIUXXljpcEqtb9++uf/++/PUU09l6tSp+epXv5ok6d69e8aNG5dnnnkm48aNy0477VThSMurtrY2Tz75ZO66664kye67755HHnkkM2bMyC233JIOHTpUOMJy6tatW37zm99k2rRpefrppzNo0CDjvoV8/etfz9SpUzNlypTcdNNN6dSpk3HfjEaNGpX58+dnypQpDXVbGus/+clPMmPGjEyaNCkHHHBAJUIujU0d+//8z//MtGnTMmnSpPzud79Lt27dGvYNHz48M2bMyPTp03PUUUdVIuTS2NSx3+CCCy5IURTp0aNHQ51xD9XPHJLWZNasWZk8eXImTJiQurq6JObYVIa5AK3Rpsbl9773vcydOzcTJkzIhAkTMmTIkIZ95km0lHfzObn3TbaVQmk7pba2tpg5c2YxYMCAokOHDsXEiROLffbZp+JxlbX07t27OOCAA4okxQ477FD8+c9/LvbZZ5/isssuKy688MIiSXHhhRcWl156acVjLWs5//zzixtvvLG46667iiTFf/3XfxWf+9zniiTFiBEjirPPPrviMZax/OpXvyrOPPPMIknRoUOHolu3bsZ9C5T3vOc9xbPPPlt07ty5SOrH+9ChQ437Ziwf+chHigMOOKCYMmVKQ93mxvqQIUOKP/zhD0WS4pBDDikeeeSRisdfzWVTx/7II48s2rVrVyQpLr300oZjv88++xQTJ04sOnbsWOy+++7FzJkzi9ra2oq/hmotmzr2SYq+ffsWd999d/HXv/616NGjR5EY94pShmIOqbS2MmvWrIb/z2wo5hpKJYq5gNIay6bG5fe+973iG9/4xkZtzZOUlizv9HNy75vKNiwVD0BpwTJo0KDi7rvvbng8fPjwYvjw4RWPq62UO+64ozjiiCOK6dOnF7179y6S+v8BTJ8+veKxlbH06dOnuPfee4tPfOITDUnQl156qeED8jf/PSjbpuy4447Fs88+u1G9cd/85T3veU/x3HPPFd27dy/atWtX3HXXXcVRRx1l3Ddz6d+/f5MJ5ubG+rXXXlucdNJJm2ynbJtj37iccMIJxQ033FAkG5/v3H333cWgQYMqHn81l00d+9/85jfFvvvu2+TDaeNeUaq/mEMqra1sKglqrqFUqpgLKK2xvHlcbi4Jap6kVLK81efk3jeVbVUsh9vG9OnTJ3PmzGl4PHfu3PTp06eCEbUd/fv3zwEHHJBHH300vXr1yosvvpgkefHFF9OrV68KR1dOP/7xj/Ptb38769atS5L06NEjixcvztq1a5MY/81lwIABeemll/LLX/4yTz75ZEaOHJntttvOuG8Bzz//fK644oo899xzeeGFF7JkyZI88cQTxn0L29xY9//glnXGGWdk7NixSRz7lnDcccdl3rx5mTx5cpN6xx6qn79jWpuiKDJu3Lg8/vjjGTZsWJLNn39BbH95eQAAIABJREFUSzMXoLU677zzMmnSpIwaNaphuVHjkkp5O5+TG59sK5Kg0AK233773Hbbbfn617+epUuXbrS/KIoKRFVuf//3f58FCxbkySefrHQobU779u1z4IEHZsSIETnwwAOzfPnyDB8+fKN2xv22t9NOO+X444/PgAED8p73vCfbb799jjnmmEqH1eYZ6y3voosuypo1a3LjjTdWOpQ2oUuXLrnoooty8cUXVzoUANqAQw89NAcddFCGDBmSc889Nx/5yEc2auP8i9bC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\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 4 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAABzcAAARqCAYAAADFv/j/AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nOzdeVxU5f4H8A/rCDLgILmgiBsuoIGlZkqgUmrdSlNb0JSf27XFm3Kr67VME3Krm10zxe69SIqI5U5do1IJ1KykEhJwSRZHGARZhhlARPz+/vB6cmSAwQ3Jz/v1+rxenPM85znPOYyv+PbMzLECICAiIiIiIiIiIiIiIiIiusNZN/UEiIiIiIiIiIiIiIiIiIgswcVNIiIiIiIiIiIiIiIiImoWuLhJRERERERERERERERERM0CFzeJiIiIiIiIiIiIiIiIqFng4iYRERERERERERERERERNQtc3CQiIiIiIiIiIiIiIiKiZoGLm0RERERERERERERERETULHBxk4iI6BbIyspCRUUFDAYDiouL8cUXX6Bjx44AgISEBEybNs2kf2BgILRaLQAgMTERCxYsMGmfNGkSfvvtNzg4ONyeCyAiIiIiIqLbhjUkERGR5bi4SUREdIs88cQTUKvVaN++Pc6ePYtVq1ZZdNz06dMRGhoKb29vAICbmxvef/99TJ8+HZWVlbdyykRERERERNREWEMSERFZhoubREREt1hVVRW2bt2qFJoNOXnyJBYvXozIyEhYWVnhww8/xLZt2/Dtt9/e2okSERERERFRk2MNSUREVD8ubhIREd1iDg4OePbZZ/H9999bfMyKFStgZWWFrVu3YsiQIXj99ddv4QyJiIiIiIjoTsEakoiIqH62TT0BIiKiP6qdO3fi4sWLaNmyJQoLCzFy5EiLj7106RKmTp2KtLQ0jB49Gkaj8RbOlIiIiIiIiJoaa0giIiLL8JObREREt8iYMWOg0WjQokULzJo1C4mJiWjbti0uXrwIOzs7k752dnaorq422Zeeng4ASEtLu21zJiIiIiIioqbBGpKIiMgyXNwkIiK6xS5duoQdO3agpqYG/v7+OH36NDp37mzSp0uXLsjJyWmaCRIREREREdEdgzUkERFR/bi4SUREdBs8+eST0Gg0yMjIwKeffoopU6ZgwIABAAAvLy+E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KSlJpk6davJG1foycuRI0el00rt3b3FxcZG9e/fW+SZelUolPj4+AkA8PDwkISFBFi9erLQPGzZMiouLxdfXV2xtbWXFihWSlJRkMkZwcHCtN9cCEB8fH8nPz5dnnnnG7LmnTJkimZmZ0qVLF3FwcJBPP/1UNmzY0OT/RhmGYe6iNPkEGIZhmDsgUVFREh4ebrbN09NTRMTkk22enp6SkJAgFRUVcuzYMQkKCqrV/2pXFwu+vr6SkJAgxcXFUlhYKJ9++qlSnF2bhIQEmTZtmrI9b9482b17t7Kt0Whkx44dYjQaJScnR4KDg2/pfQoMDKz17tX65gtAli9fLkVFRVJUVCTLly9X9k+ePFlERIxGoxgMBiUeHh4W3cf6rt3f318MBoNF87AkAwYMsLiIvfZ1da0r78K+do6BgYG1+iYkJFj0mgMggwYNEqPRaLZoXrhwYa2xr36nube3t3z33XdiNBolLS1NxowZ0yT/DhmGYRiGYRjmTk59f997eXnJsWPHpLy8XLKzsyU0NLTW8X//+99rLS5dSUJCQq2xAwMDBYDs27dPqqurTeqmq+vCq7Nw4UKJjo5Wtm92bWRpzLnSNnv2bCkoKBCj0Sj79++X+++/v9bxGRkZMnXq1Fr733vvPcnPzxej0SinTp2SRYsWia2tbZ2/r6vr/IZqzN27d8u8efOUbT8/P0lOTlY+Cevn52fx9bdt21a6det2XfcuNDRU8vPzRa/Xy7p160wWYI8ePSoTJkwQ4PKbo1NSUpRP7i5ZsqTWm2lfeOEFOXPmjBQXF0tcXJx07NjRpD0+Pl7CwsJqzWHdunVSU1Nj8po7evSoSZ+3335bCgoKpKCgQDZs2KB8YpRhGIa59bH63w9ERERERERERERERERERHc066aeABERERERERERERERERGRJbi4SURERERERERERERERETNAhc3iYiIiIiIiIiIiIiIiKhZ4OImERERERERERERERERETULXNwkIiIyQ0TQrVu3pp4GERERERERNUOsKYmIiG4dLm4SERHdwdq1a4ddu3YhNzcXIgJPT0+T9qNHj8JgMCiprq5GXFxcneMFBwcjOzsbRqMRO3bsgEajudWXQERERERERE2koZryWp6enti3bx/Ky8uRkZGBoKCg2zRTIiIiy3Fxk4iI6CaysbG5qeNdunQJ8fHxGDdunNn2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d+bOncvOnTt56aWXuPvuu2MdjiRJkuqh/v37c80119CjRw8aNmzIZ599xkMPPcQDDzwAQJs2bViyZAktWrTg5Zdf5vTTTwfg9ttv55prrqGgoIATTzyRuXPnVnic4cOHM3nyZADOPvtshgwZwqBBgygsLGTKlClcddVV7Nq1q8I5giAAYPLkyVx88cUHeOaSJEm1S4N2bYGvqjS2YZODyOx5Dl/Of44gKKrewGqDG4ATgaeAbkCouL2+1eMhhtpUvxH4NVKFvC2takS3bt149tlnWbNmDTt37mT58uXce++9HHTQQQBkZWUxc+bMSP/JkydHbhn77rvvRraDIOCdd96JfEAD4ZWbe/ZVxu9//3sGDBjAPffcU52nKEmSJFXKiBEjmD59Oqeccgqpqak0atSIY445hvvvv5/x48cDsGrVKn73u98B8KMf/Yhzzz2XY489llGjRgHw17/+dZ+JzW+bMGECF154IampqRx00EH85je/iRxPkiSprqmuFYyhxMQqjdu64UtW/fcNeg9/gCbp+/dYrWgKimogyboNCICRQCJwDOFMRKi41Ld6PMRQm+ojCX//bEMqlys3FXXHH388s2fPpkmTJpG2zMxMLr/8cvr370+vXr32a77jjjuuukOUJEmqUefcs5KGTQ76pqHERVvPv11Q7rjflNj+2Y++2d65dQP//F1G9QWoqElISOCuu+4CIDs7m1//+tfk5+czduxYRo8ezciRI7n//vtZunQpTzzxBEOHDuWss85i3LhxrF69muTkZBYvXkxWVtZ+H3vNmjX06tWLwsJC/v3vf3PMMccwYsQIbr31VpYvX17NZyopGlbt2EHbGj5mlykT+PT8y2r4qJIU31pkT9vnMzh3bc1j7mMjadX15BqKKmzpGQM54sVXyt0fSqiB9U6dgFug4fkhdjYMwomqkqsY61s9HmKoTfUC4B/AKKRymdxU1N155500adKEwsJC/u///o/XX3+d66+/nmuvvZauXbsyatQoxo4dS6NGjbj22msBuO2227juuusAmDFjRqn5NmzYwEMPPcRNN91Uqv2kk06qmROSJEk6QA2bHMRTP28cqXeZMiGyXdEHyCU/QCn5l+g/+5t/0lpbNG3alNTUVACGDh3K0KFDS+1PSEigX79+LF26FIBf/OIXnHjiibRp04Y2bdqwe/duhg8fvs9byZbl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IQBEg7ssIiIiIuIvmod49z2q+V4m5vOtMKLsXh1Xqkf33KyE8PBwkpKSeOCBB8jJyQHgySefpE2bNiQmJnLvvfcC8Msvv9C2bVt69OjB66+/zqJFVd9retasWfTq1YtevXqRnp7u1cchIiIi/q397mTa7072aFuTksualFyLIhJf0XUWEX9V23+X7t69u1bHl9rTfncy2w601OuXiIiINDwRSq1ZTSs3KxAQEEBSUhKJiYl8+OGHpY4nJiayePFipk6d6k58AixZsoSZM2fSpEkTUlNTad26tftYq1atSE1N9Un8IiIiUneseP6SUm3nX5ZiQSTia7rOIuKvTtxepTb8+OOPzJw5s9bGl9q14vlL6PK81VGIiIiI+J59/R9wDN4Ga45ZHUqDpeRmBWbPns3mzZt59dVX3W2dOnVi+/btAAwbNowtW7YA0Lx5cw4cOABAr169sNlsHD58mKysLM444wzatWtHamoqN910EyNHjvT9gxERERERERGpgiVLltC4cWPOnD2dUHsASYu/4PLLL6Yo+whffrOK9h9/Wq1xi4qKPL4gLCIiIiLi78x3MzDGNwXAODMEU8lNyyi5WY5+/foxatQo1q1bR3Kya4u4J554gjvuuIMuXbrgdDrZtWsX48ePB+C6667j7rvvpqioiLy8PG666SYAHA4H9957L0uXLsVutzNnzhw2bdpk2eMSERERERERqYzCwkIyMzNJz88DwExPZ/V1twPF99sUEREREWkgzL+k4gy3YbutidWhNHhKbpZj5cqVGIZRqn3JkiVl9p8xYwYzZswo89iSJUtOe56IiIgIQPuZrhUsOydEutvMQ/0AMJqutCQm8Q1dZxERqWvaz8xhx/VDAb1+iYiIiIhv6a6nIiIiIiIiIiIiIiIiIpVke60Nxiit4LSKkpsiIiIiIiIiIiIiIiIiFVl91F00/i/KwkAaNiU3RURERERERERERERERCpgJmbgGL3T6jAaPCU3RUREREREREREREREpFbFJC2q1fFN08l3YR15u9vdtToPR521O75UKMDqAERERERERERERERERERqYm/KYgrzcwm/7z1GrXuz1uczLm2EcX8zzNcOVvqcVj2uonGb7h5teUcOkLb5SzBNb4dYbym5KSIiIiIiIiIiIiIiIjXWeUGCZXM7jh9j/6bPa3+itEJ30Ta5JY6EQ5BXucRkj2ufKrN909J/kPz+E14JryFQclNERETET3RNnAhAyTs3jHtouzXBiE/pOouIvyvKyiYgOsrqMMSPdE2cyPRDzdiw/XurQxERERHxrU35OC7Zgv2brq66zQBOn9w8kvYr0fF/KHfIuDMHeTHA+k/JTRERERE/sWTl3FJts945YEEk4mu6ziLi73ZMeNTSb+GL/1myci5LVlodhYiIiIhFNuZj5jowIuwVdl3znz+Te2gnoVHNPdqDwhsT320oAIZRK1HWW0puioiIiIiIiIiIiIiIiFTH2aGw6uhpDx/L2Evyf/9Sqj261Tnu5KZUjc3qAERERETE5Yp+Y7ii3xiPtjtva86dtzU/zRlSX+g6i4hIXXNFvzG89tQ1ev0SERFpgIqysq0OwT84Xf+xLz4D+kdYG0sDo+SmiIiIiJ/Ycst0ttwy3aMt4ZVOJLzSyaKIxFd0nUWkLtg2cpzVIYgf2XLLdCZOOKjXLxERkQZox4RHrQ7BL5jP7neXjZZBFkbS8GhbWhEREREREREREREREakXTMPG6hZ9aXeBK+GYn5tO2qYV3p9nVjrO7mHYbm5c47EatejKsOc2lXHk9NvdNmRKboqIiIiIiIiIiIiIiEiF/H03D9NRxEW7v2BDs57Ed2+KYQsgvtsV/OeeWKtDK8VZVOAu2wOCiGjaroxeG30WT12ibWlFRERERERERERERESk2vwp6XnjprmMSZnByllj+GHOnWAYVodUpiNp29i/8XOrw6iTtHJTRERERERERColJmmR1SGIiIiIiPgd2xttcBY4MT/IqtJ5K179I6Ex8djsnum6s6/8M50uGePNEOsVJTdFREREREREREREREREqmp9HtzsKhrXxVQ5uQmQl5laqu34saqP05AouSkiIiIiIiIiFZtSovyUZVGIiIiIiA9ERUXRtGlTjzajUem2U483Dg5xlfHcCtZmGAQE1L+UlPnWIZxHHdhea+PVcTt36eLV8eqb+vebJBVK/FOY1SGIiIhIGXZOiCzVZjRdaUEk4mu6ziIiUtfsnBCJMcHqKERERKS2zJ49u8z2gxWc98Np2h/reSGPFRbWKCZ/ZR4s8up4hmFw9dBLWbLVq8PWKzarAxARERERERERERERERERCA0NZUj3RnSINSru3EApuSkiIiIiIiIiIiIiItKAbdmypfKd9wMXAucBfYCU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AAAAAAAAO6hd6xZp37roFM2H4iYAAAAAAACUUUNeJrepU9wEAAAAAACABrLPtT8qOkKT0qroAAAA1DrgTzckSRZu1Hf9zUuLCUNZGWcAKs0Bf7oh9/XcJ39d8OeiowAA1NnW/vVTJ5+ZnDhii/71L69JWlc1VKy06tzp7+/PB6a4CQDQSEy+5dwt+r7yzacLSEK5GWcAKs3kW87N5FuKTgEAsKnt3b9uUSptMv3shZdmpyvGNkAiGoLL0gIAAAAAANBsrF21uugIfADO3AQAaCT2731gkmTOoll1fQft3zFJMmPOq4VkojyMMwCVZv/eB2a//VqmZumT1l8AQKNh/7p5UNwEAGgk1lz4x9o/zt65ru/RB2sLni12e7iISJSJcQag0qy58I+Z+LlhSQ60/gIAGg37182Dy9ICAAAAAAAAFUFxEwAAAAAAAKgIipsAAAAAAACwA7pMmlx0hGZHcRMAAAAAAACoCIqbAAAAAAAA0AD633J90RGaHMVNAAAAAAAAoCK0KjoAAAC1dv7BEVv0HXzUrAKSUG7GGYBKs/MPjsjIyS1Ts/TJoqMAANSxf908KG4CADQScxZtuQE+Y86rBSSh3IwzAJVmzqJZmbOo6BQAAJvanv3rLpMmZ/FVPylDGhqK4uZ76NWrV26++eZ07949pVIp119/fa6++upccsklOeGEE7Jhw4YsW7YsX/7yl/O3v/0txx9/fC699NJs2LAh69aty3nnnZeHH344STJq1Kh8+9vfTpJ873vfy80331zkRwMAAAAAAKAe/W31hlT/dX16fPwz6fT660mSLut61z3e+6ATtvq6DeveypLH7klKpbLkrHSKm+9h3bp1+eY3v5mZM2dmp512yqOPPpr7778/P/rRj3LxxRcnSb7+9a/n4osvzllnnZUHH3wwU6ZMSZJ8/OMfz6233pr99tsvXbp0yXe+85184hOfSKlUyqOPPpopU6Zk1apVRX48AKCRGXHy1UmSybecW9f30//6UJLkK998upBMlIdxBqDSjDj56pz1her8dcGfrb8AgEajyP3rfru3zDPLN+ThBevS6+ATs3bduiTJzuv71j2nzaEjt/raPT96dO787uC8suyZsmStdIqb72Hp0qVZunRpkuSVV17JvHnz0rNnz8ybN6/uOR07dkzp7Ur6q6++utX+Y489Nvfff39WrlyZJLn//vszbNiwTJw4sVwfBQCoALMPP7X2j42Km2eO6pFE0aupM84AVJrZh5+aoZ/8VfLJHtZfAECj8b72r/+W5J+TtEj2e2u/fP+Sz+Yb5z6Yp3bwvffboyr77VGVJPnOiafn5ZdfTpL0v+X6uuc8de2ZW33tZy+dkb6HfjE1vx+frH15BxM0H4qb26lPnz4ZOHBgpk+fnqT20rKjRo3K6tWr8+lPf7rueSNGjMgPfvCD7L777jnuuOOSJD179syiRX+/EcXixYvTs2fPrb7PGWeckTPPrF24u3Xr1lAfBwAAAAAAoPm6NEltySc/qfpJ+q/oka/ddlD+XECUP48/I/0/fWb+6dIZefb/TiggQWVR3NwOHTt2zKRJk3LeeedlzZo1SZJvf/vb+fa3v50xY8bknHPOydixY5MkkydPzuTJk3PEEUfk0ksvzTHHHPO+3mvcuHEZN25ckqS6urpePwcAlWnPjw3NgKHnZvd+n0xV63ZFx6EB/fmt9UmSU3722ka9x2ylj6bHOAMAAEA5vJbX0r5X+036BqwfkCQ5+YGP5OSU8npeT4d0KFuml/76aKbd8JXU/O5nGTzq6rK9b6VS3NyGVq1aZdKkSZkwYUJuv/32LR6fMGFC7rrrrrri5jv++Mc/Zp999knXrl2zZMmSfOpTn6p7rFevXvnd737XsMEBaBL2/NjQ/MM5t6aqVZuiowAAAABAxdsn++Tpzz6dDnd3SGp/Z55SSmmRFnmj9brcsvbmXJSL3nMeO7donWu7/mNapWXWpZR1S1bklW/fkqxflxatqtIj7XJNt0PSKi3T7sb5uWJE33zz9r/mzW5Dsy6lfOulh/PDXT9Z9/qzV/wua0prU9qwrgz/BSqf4uY2jB8/PvPmzcuVV15Z17fvvvtmwYIFSZITTjgh8+fPT5J86EMfytNP117HeeDAgWnbtm1WrFiRe++9N9///vfTuXPnJMnQoUNz4YUXlvmTAFCJBgw9V2ETAAAAAOrJ0izNG0e/kQ53bXpm5lut1qfV+pZ5KA/lhbzwnvM4tn2fDO3Qp2769Wvuytqpc+qmz2r/kQxt+/bj81dn1NTnM+TJVUmH3kmS59e/usnrh762Vya95j7m20tx8z0MGTIko0aNypw5czJz5swkyUUXXZTTTz89H/7wh7Nhw4Y8++yz+epXv5okOfHEEzNq1KisXbs2r7/+er7whS8kSVauXJlLL7207jKzl1xySVauXFnMhwKgouze75NFRwDYpvVr3yg6AgAAAGy3jr/qmGxI0jK1/yZZ1unV7Llip1yTazInc/LT/DSt0zprszZfyVc2mX6t7S/Teek3klJV0mJ91vz61+m8dEzd9D93/nk6Lz0tSfLybtfmyNkrNnn/ER322WT6ix37K26+D4qb7+Hhhx9OixYttui/++67t/r8H/7wh/nhD3+41cduuOGG3HDDDfWaD4Cmzz02m5d+S5+s/WOvj9T1LVzVr6A0lFOlj/OymoeLjgBAmfV9bmaeemHPrFn6VNFRAADqPDr7le163rqe69J2aNvkwiQ/SGY9NCud2uydFmmRXbJLJmRCPpqPpkVqa0R/rJqSXdb//UzLdWv2Sqt1e9ZN7/LsqE2m93zpa3XTHVb/UzZUTdjk/TtXtd1k+oj2e+aFvU5PSklu+FkWzv5TlvzovDgyuHUtUvufikaouro6gwYNKjoGAAU65WevFR0B4D2tX/dW/vCTz+f5ufcVHaUi2ManIVm+AABg+yxevDg9e/asnWifpAwXJCrlrSzf6+xtPu+tli3yf7/1v7J8v/45ZKc5tvG3omXRAQAAgMqzfu0b+dsTDypsAgAAUNmeSe5od0fWtdxQ11Xa7LzADzJdyvq80WF6VvQcs80ob5TWZdTKB/K5sz6Wsz/VZrs/QnPjsrQAUKEm/FuHbT8JAAAAAHh3eyQPtnswx71xXEr5+60K66/A2SJvtn8sG6pefs8Yb5XW59+WP5TpLVe85/Nw5iYAQKPR99o16Xvtmk36SsuHpLR8SEGJKBfjDECl6XvtGusvAKDR2dHtky+89oW0TMtsyIZtP/l92ZCkRdq9MiSlUuk924ZSKbu0dLbm9lDcBAAAAAAAoNlaUrUk9+W+HJWjcm/uzYt5MUuyJN/IN7IkS+qmH+s4LutbrsyGFq9kfcuVWdNpYt30hpYr80rnX2VDy1XZ0OKVvNl2blbu9l95s93jWd/qpa2+78Zne7ZtUZUvduxfro9c0VyWFgAAAAAAgGbrG12+kedffz5J8vv8fpPHrspVdX/f2P7orNz5niTJxFefymGt98jAHr9N9/Y7J7t0SIsWLfJG/pLXl72UVRveTKvOndJit59kp9fXZeWbr6XF25e97dSyTVZteDMz33ox09/8W77wdlHzldLacnzciqe4CQAAAAAAANvw5Rcf2GT6f9Y8niTZsGFDWrT4+/06O3XqlJdffjn9r7i+ru+pk8981/le9/Z8kqRDhw71FbfJcllaAAAAAAAAoCIobgIAAAAAAAAVwWVpm5lTfvZa0REAAAAAAABghyhuAgA0EgMmnJskWbhR35nnLygmDGVlnAGoNAMmnJurl++euQv+XHQUAIA69q+bB8VNAIBG4u6Hb9iib9wvXiggCeVmnAGoNHc/fEPufrjoFAAAm7J/3Ty45yYAVKD1a98oOgIAAAAAQNk5cxMAKtCyGj+Tb4qGDzk1yaZncJ7xpe5J/PKwqTPOAFSa4UNOzbChqzJ3wZ+tvwCARsP+dfOguAkAFWb9urcy/77/XXQMGsD8U66u/WOj4ub1/71vEhvlTZ1xBirCd96l/7tlTUEjMf+Uq3PX54Yl2df6CwBoNOxfNw+KmwBQIdavfSPLah7O/Pv+d56fe1/RcQAAAACABrChVMrilaWiYzRaipvNzIR/61B0BAAAAAAAALaiU6/9878mvpGVryXnHVB0msapZdEBAAAAAAAAoKlat2r1dj2v7c675fCvTcrK1xo4UIVT3AQAAAAAAIAG8szZ/75dz9vjo0elTccuDZym8rksLQAAALBt3y06AAAAVI7+t1z/vl/TpdfHGiBJ0+PMTQAAAAAAAChci6IDVIQWSUpFh2Drli1blmeffbbB5t+tW7e8+OKLDTZ/ts0YNA7GoXEwDsUzBo2DcWgcjEPj0BTHoU+fPtl9992LjkETZR+ScrNMsDHLA5uzTLA5ywSbs0xsm33Id1fSmmerrq4uPENzb8agcTTj0DiacSi+GYPG0YxD42jGoXE046Bpjav5TmqbN8uEtnGzPGibN8uEtnmzTGibN8uEtqPNZWkBAAAAAACAiqC4CQAAAAAAAFSEqiRjiw5BcWbMmFF0hGbPGDQOxqFxMA7FMwaNg3FoHIxD42AcoHHxnWRzlgk2Znlgc5YJNmeZYHOWCXZEi9RenxYAAAAAAACgUXNZWgAAAAAAAKAiKG4CAAAAAAAAFUFxsxk69thjM3/+/NTU1OSCCy4oOk6z0atXrzz00EN5/PHHM3fu3Jx77rlJki5duuS+++7LU089lfvuuy+dO3cuOGnT17Jly8yYMSO//e1vkyR77713pk2blpqamkycODGtW7cuOGHT16lTp/z617/OvHnz8sQTT+TQQw/1XSjAeeedl7lz5+axxx7LLbfckrZt2/o+lMH48ePzwgsv5LHHHqvre6/l/6qrrkpNTU1mz56dgQMHFhG5SdraOPzwhz/MvHnzMnv27Nx2223p1KlT3WNjxoxJTU1N5s+fn6FDhxYRucnZ2hi84/zzz0+pVErXrl3r+nwXoDj2IZsn2yxsbkeOa1gumra2bdtm+vTpmTVrVubOnZuxY8cmeffjLG3atMnEiRNTU1OTadOmpU+fPgWmp6Fs73E3y0PzsHDhwsyZMyczZ85MdXV1EusN6k9Jaz6tZcuWpQULFpT69u1bat26dWnWrFml/fbbr/BczaH16NGjNHDgwFKS0k477VR68sknS/vtt1/p8ssvL11wwQWlJKULLrigdNlllxWetam3b3zjG6UJEyaUfvvb35aSlH71q1+VvvCFL5SSlK677rrSV7/61cIzNvV24403lk4//fRSklLr1q1LnTp18l0oc9tzzz1LzzzzTKldu3alpPZ7MHr0aN+HMrQjjjiiNHDgwNJjjz1W1/duy//w4cNLd911VylJafDgwaVp06YVnr+ptK2NwzHHHFOqqqoqJSlddtlldeOw3377lWbNmlVq06ZNae+99y4tWLCg1LJly8I/Q6W3rY1BklKvXr1K99xzT+mvf/1rqWvXrqXEd0HTimz2IZtvs82ibd7e73ENy0XzaB07diwlKbVq1ao0bdq00uDBg991v/Kss84qXXfddaUkpS984QuliRMnFp5fq/+2vcfdLA/Noy1cuLBuv+6dZr2h1VMrPIBWxnbooYeW7rnnnrrpMWPGlMaMGVN4rubYJk+eXDr66KNL8+fPL/Xo0aOU1O4ozJ8/v/BsTbn17Nmz9MADD5Q+/elP121kLV++vO5g9ubfEa3+2y677FJ65plntuj3XShv23PPPUvPPfdcqUuXLqWqqqrSb3/729LQoUN9H8rU+vTps8mBwndb/v/nf/6nNHLkyK0+T6v/cdi4jRgxovTLX/6ylGy5vXTPPfeUDj300MLzN4W2tTH49a9/Xdp///032Qn2XdC04pp9yObdbLNo79W2dVzDctG8Wvv27UuPPvpo6ZBDDnnX/cqNt6OrqqpKy5cvLzy3Vr/t/Rx3szw0j7a14qb1hlYfzWVpm5mePXtm0aJFddOLFy9Oz549C0zUPPXp0ycDBw7M9OnT07179yxdujRJsnTp0nTv3r3gdE3bj3/843zrW9/Khg0bkiRdu3bNqlWrsn79+iS+E+XQt2/fLF++PDfccENmzJiRcePGpUOHDr4LZfb888/niiuuyHPPPZe//e1vWb16dR599FHfh4K82/JvvV2c0047LXfffXcS41BOxx9/fJYsWZI5c+Zs0m8MoDi+f2zMNgvv2J7jGpaL5qFly5aZOXNmli1blvvvvz9PP/30u+5XbrxMrF+/PqtXr97kNgRUvvdz3M3y0DyUSqXcd999eeSRR3LGGWcksT1B/VDchDLr2LFjJk2alPPOOy9r1qzZ4vFSqVRAqubhuOOOy7JlyzJjxoyiozRrrVq1ykEHHZTrrrsuBx10UF599dWMGTNmi+f5LjSszp0754QTTkjfvn2z5557pmPHjhk2bFjRsXib5b9YF110UdatW5cJEyYUHaVZad++fS666KJcfPHFRUcBYDvZZmmeHNdgYxs2bMjAgQPTq1evHHLIIRkwYEDRkSiI425szeGHH56DDz44w4cPz9e+9rUcccQRWzzHeoMdobjZzCxZsiS9e/eum+7Vq1eWLFlSYKLmpVWrVpk0aVImTJiQ22+/PUnywgsvpEePHkmSHj16ZNmyZUVGbNKGDBmS448/PgsXLszEiRNz5JFH5qqrrkrnzp1TVVWVxHeiHBYvXpzFixfnL3/5S5LkN7/5TQ466CDfhTI7+uijs3Dhwrz44otZt25dbrvttgwZMsT3oSDvtvxbb5ff6NGj89nPfjannHJKXZ9xKI8PfehD6du3b2bPnp2FCxemV69emTFjRrp3724MoEC+f2zMNgvv57iG5aJ5Wb16daZOnZrDDjvsXfcrN14mqqqq0qlTp6xYsaKwzNSv93vczfLQPDz//PNJkuXLl+f222/PIYccYr1BvVDcbGaqq6vTr1+/7L333mndunVGjhyZKVOmFB2r2Rg/fnzmzZuXK6+8sq5vypQpGT16dJLaA6p33HFHUfGavIsuuii9e/dO3759M3LkyDz00EP513/910ydOjUnnXRSEmNQDi+88EIWLVqU/v37J0mOOuqoPPHEE74LZfbcc8/l0EMPTfv27ZP8fRx8H4rxbsv/lClTMmrUqCTJ4MGDs3r16rpLt1D/jj322HzrW9/K8ccfn9dff72uf8qUKRk5cmTatGmT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ZO+99860adNSU1OTiRMnpnXr2stotWnTJhMnTkxNTU2mTZuWPn36FJgetjR8yKm56rv/bP0FADQq9q+bB8XNHdStW7d06tQpSdKuXbscc8wxmTdvXqZOnZqTTjopSTJ69OjccccdSZIpU6Zk9OjRSZKTTjopDz30UDHBAYBGa/4pV2f+KVdv0nf9f++b6/9734ISUS7GGZq+N998M0ceeWQOPPDAHHjggRk2bFgGDx6cyy+/PFdeeWX69euXlStX5vTTT0+SnH766Vm5cmVUSpwIAAAgAElEQVT69euXK6+8MpdffnnBnwA2Nf+Uq3Pu2cusvwCARsX+dfOguLmD9thjj0ydOjWzZ89OdXV17r///tx555254IILcv7556empiZdu3bN+PHjkyTjx49P165dU1NTk/PPPz9jxowp+BMAAABQTq+++mqSpHXr1mndunVKpVKOPPLI/OY3v0mS3HTTTRkxYkSS5IQTTshNN92UJPnNb36To446qpjQAAAAjUyrogNUqsceeywHHXTQFv0LFy7M4MGDt+h/88038/nPf74c0QAAAGiEWrZsmUcffTT77rtvrrnmmjz99NNZtWpV1q9fnyRZvHhxevbsmSTp2bNnFi1alCRZv359Vq9ena5du7q9CQAA0Ow5cxMAAADKYMOGDRk4cGB69eqVQw45JAMGDPjA8zzjjDNSXV2d6urqdOvWrR5SAgAANG6KmwAAAFBGq1evztSpU3PYYYelc+fOqaqqSpL06tUrS5YsSZIsWbIkvXv3TpJUVVWlU6dOWz1rc9y4cRk0aFAGDRqUF198sXwfAgAAoCCKmwAAANDAunXrlk6dOiVJ2rVrl2OOOSbz5s3L1KlTc9JJJyVJRo8enTvuuCNJMmXKlIwePTpJctJJJ+Whhx4qJjgAAEAj456bAAAA0MD22GOP3HTTTamqqkrLli1z66235s4778wTTzyRiRMn5nvf+15mzpyZ8ePHJ0nGjx+fX/ziF6mpqclLL72UkSNHFvwJgCZhfJJTklyZ5MKCswAA7KAWSUpFh2DrqqurM2jQoKJjAABQ31Yk2XWzvpeSdC0gC2VlG5+GZPkCtun/JHkryaokpxWcBQDYJtv4W+fMTQAAKLddU/szw435ySEAUA7riw4AAPDBuOcmAAAAAAAAUBEUNwEAGokjx/whR475wyZ9jzxwQB55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\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-27-4ce521a836a6>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# p2_hlm 의 경우, tr 확인을 우해 session_plot 우선 실행 필요함\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0m_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mplot_check_v9\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mres_df\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparam_zip\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpr_msg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_margin_mult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_margin_mult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mback_plot\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mplot_check_dir\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcol_idx_dict\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mparam_zip\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp_plot_params\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp_plot_params\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-27-4ce521a836a6>\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# p2_hlm 의 경우, tr 확인을 우해 session_plot 우선 실행 필요함\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0m_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mplot_check_v9\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mres_df\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparam_zip\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpr_msg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_margin_mult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_margin_mult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mback_plot\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mplot_check_dir\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcol_idx_dict\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mparam_zip\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp_plot_params\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp_plot_params\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/content/drive/My Drive/Colab Notebooks/JnQ/funcs/funcs_plot_check.py\u001b[0m in \u001b[0;36mplot_check_v9\u001b[0;34m(res_df, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, back_plot, plot_check_dir, **col_idx_dict)\u001b[0m\n\u001b[1;32m    288\u001b[0m     \u001b[0;31m# print(\"iin, vp_iin, vp_iout, p1_idx :\", iin, vp_iin, vp_iout, p1_idx)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    289\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 290\u001b[0;31m     \u001b[0mvp_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mres_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvp_iin\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mp1_idx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol_idx_dict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'vp_col_idxs'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_numpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mT\u001b[0m  \u001b[0;31m# Todo, vp_range should be calculated by wave_point\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    291\u001b[0m     \u001b[0;31m# print(\"vp_data :\", vp_data)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    292\u001b[0m     \u001b[0;31m# vp_info = [vp_range, *vp_data, kde_factor, num_samples]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    923\u001b[0m                 \u001b[0;32mwith\u001b[0m \u001b[0msuppress\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mKeyError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mIndexError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    924\u001b[0m                     \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_value\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtakeable\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_takeable\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 925\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_tuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    926\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    927\u001b[0m             \u001b[0;31m# we by definition only have the 0th axis\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_tuple\u001b[0;34m(self, tup)\u001b[0m\n\u001b[1;32m   1508\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_lowerdim\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1509\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1510\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_tuple_same_dim\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtup\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1511\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1512\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_get_list_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_tuple_same_dim\u001b[0;34m(self, tup)\u001b[0m\n\u001b[1;32m    804\u001b[0m                 \u001b[0;32mcontinue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    805\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 806\u001b[0;31m             \u001b[0mretval\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mretval\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    807\u001b[0m             \u001b[0;31m# We should never have retval.ndim < self.ndim, as that should\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    808\u001b[0m             \u001b[0;31m#  be handled by the _getitem_lowerdim call above.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_axis\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1555\u001b[0m         \u001b[0;31m# a list of integers\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1556\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mis_list_like_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1557\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_list_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1558\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1559\u001b[0m         \u001b[0;31m# a single integer\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_get_list_axis\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1528\u001b[0m         \"\"\"\n\u001b[1;32m   1529\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1530\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_take_with_is_copy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1531\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mIndexError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1532\u001b[0m             \u001b[0;31m# re-raise with different error message\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m_take_with_is_copy\u001b[0;34m(self, indices, axis)\u001b[0m\n\u001b[1;32m   3626\u001b[0m         \u001b[0mSee\u001b[0m \u001b[0mthe\u001b[0m \u001b[0mdocstring\u001b[0m \u001b[0mof\u001b[0m\u001b[0;31m \u001b[0m\u001b[0;31m`\u001b[0m\u001b[0mtake\u001b[0m\u001b[0;31m`\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mfull\u001b[0m \u001b[0mexplanation\u001b[0m \u001b[0mof\u001b[0m \u001b[0mthe\u001b[0m \u001b[0mparameters\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3627\u001b[0m         \"\"\"\n\u001b[0;32m-> 3628\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtake\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindices\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mindices\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3629\u001b[0m         \u001b[0;31m# Maybe set copy if we didn't actually change the index.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3630\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mequals\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mtake\u001b[0;34m(self, indices, axis, is_copy, **kwargs)\u001b[0m\n\u001b[1;32m   3611\u001b[0m         \u001b[0mnv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalidate_take\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3612\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3613\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_consolidate_inplace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3614\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3615\u001b[0m         new_data = self._mgr.take(\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m_consolidate_inplace\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   5563\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_mgr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_mgr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconsolidate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5564\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5565\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_protect_consolidate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5566\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5567\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mfinal\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m_protect_consolidate\u001b[0;34m(self, f)\u001b[0m\n\u001b[1;32m   5551\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5552\u001b[0m         \u001b[0mblocks_before\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_mgr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mblocks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5553\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5554\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_mgr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mblocks\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mblocks_before\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5555\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_clear_item_cache\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mf\u001b[0;34m()\u001b[0m\n\u001b[1;32m   5561\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5562\u001b[0m         \u001b[0;32mdef\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5563\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_mgr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_mgr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconsolidate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5564\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5565\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_protect_consolidate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36mconsolidate\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    617\u001b[0m         \u001b[0mbm\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mblocks\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mverify_integrity\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    618\u001b[0m         \u001b[0mbm\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_is_consolidated\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 619\u001b[0;31m         \u001b[0mbm\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_consolidate_inplace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    620\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mbm\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36m_consolidate_inplace\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    622\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_consolidate_inplace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    623\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_consolidated\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 624\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mblocks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_consolidate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mblocks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    625\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_is_consolidated\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    626\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_known_consolidated\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36m_consolidate\u001b[0;34m(blocks)\u001b[0m\n\u001b[1;32m   1973\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0m_can_consolidate\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgroup_blocks\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mgrouper\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1974\u001b[0m         merged_blocks = _merge_blocks(\n\u001b[0;32m-> 1975\u001b[0;31m             \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgroup_blocks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcan_consolidate\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0m_can_consolidate\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1976\u001b[0m         )\n\u001b[1;32m   1977\u001b[0m         \u001b[0mnew_blocks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mextend_blocks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmerged_blocks\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnew_blocks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36m_merge_blocks\u001b[0;34m(blocks, dtype, can_consolidate)\u001b[0m\n\u001b[1;32m   2006\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2007\u001b[0m         \u001b[0margsort\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0margsort\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_mgr_locs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2008\u001b[0;31m         \u001b[0mnew_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnew_values\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0margsort\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2009\u001b[0m         \u001b[0mnew_mgr_locs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnew_mgr_locs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0margsort\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2010\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]},{"output_type":"display_data","data":{"text/plain":["<Figure size 2160x1296 with 4 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# p2_hlm 의 경우, tr 확인을 우해 session_plot 우선 실행 필요함\n","_ = [plot_check_v9(res_df, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, back_plot, plot_check_dir, **col_idx_dict) for param_zip in zip(np_plot_params, np_plot_params[::-1])]"]},{"cell_type":"markdown","metadata":{"id":"sZAYhcdoXnm4"},"source":["### whole_plot"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jjFziVVIhgSr"},"outputs":[],"source":["s_id = config.selection_id\n","\n","# ------------ make col_idx_dict config ------------ #\n","nonstep_col_list = []\n","step_col_list = []\n","stepmark_col_list = []\n","\n","# ============ nonstep_col_list - add info(col, alpha, color, linewidth) ============ #\n","# nonstep_col_list.append([['close'], 1, '#ffffff', 2])\n","\n","# ============ step_col_list - add info(col, alpha, color, linewidth) ============ #\n","# ------ htf_candle ------ #\n","hc_tf1 = '15T'\n","hc_tf2 = 'H'\n","hc_tf3 = '4H'\n","\n","step_col_list.append([['open_{}'.format(hc_tf1), 'close_{}'.format(hc_tf1)], 1, '#ffffff', 1])\n","step_col_list.append([['open_{}'.format(hc_tf2), 'close_{}'.format(hc_tf2)], 1, '#ffffff', 2])\n","# step_col_list.append([['open_{}'.format(hc_tf3), 'close_{}'.format(hc_tf3)], 1, '#ffffff', 4])\n","\n","# ------ resi_sup ------ #\n","# rs_tf = 'T'\n","# step_col_list.append([['resi_{}'.format(rs_tf), 'sup_{}'.format(rs_tf)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['resi_out_{}'.format(rs_tf), 'sup_out_{}'.format(rs_tf)], 1, 'dodgerblue', 2])\n","\n","# ------ wave_range ------ #\n","wave_tf1 = config_list[0].tr_set.p1_itv1\n","wave_period1, wave_period2 = config_list[0].tr_set.p1_period1, config_list[0].tr_set.p1_period2\n","\n","# step_col_list.append([['dc_upper_{}{}'.format(wave_tf1, wave_period1), 'dc_lower_{}{}'.format(wave_tf1, wave_period1)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['dc_upper_{}{}'.format(wave_tf1, wave_period2), 'dc_lower_{}{}'.format(wave_tf1, wave_period2)], 1, '#ffeb3b', 1])\n","\n","# step_col_list.append([['dc_upper_{}{}'.format(wave_tf2, wave_period2), 'dc_lower_{}{}'.format(wave_tf2, wave_period2)], 1, '#e65100', 2])\n","\n","# ------ dc ------ #\n","dc_tf1 = '5T'\n","dc_period1 = 20\n","dc_tf2 = 'H'\n","dc_period2 = 20\n","# step_col_list.append([['dc_upper_{}{}'.format(dc_tf1, dc_period1), 'dc_lower_{}{}'.format(dc_tf1, dc_period1)], 1, '#ffeb3b', 1]),  # inner\n","# step_col_list.append([['dc_base_{}{}'.format(dc_tf1, dc_period1)], 1, '#5b9cf6', 1])\n","step_col_list.append([['dc_upper_{}{}'.format(dc_tf2, dc_period2), 'dc_lower_{}{}'.format(dc_tf2, dc_period2)], 1, '#ff00ff', 4]),  # inner\n","step_col_list.append([['dc_base_{}{}'.format(dc_tf2, dc_period2)], 1, '#5b9cf6', 4])\n","\n","# ------ bb ------ #\n","bb_tf1 = 'T'\n","bb_period1 = 20\n","\n","# step_col_list.append([['bb_upper_{}{}'.format(bb_tf1, bb_period1), 'bb_lower_{}{}'.format(bb_tf1, bb_period1)], 1, '#ffffff', 1])\n","# step_col_list.append([['bb_base_{}{}'.format(bb_tf1, bb_period1)], 1, '#00ff00', 1])\n","\n","# step_col_list.append([['bb_upper_{}'.format(tf2), 'bb_lower_{}'.format(tf2)], 1, '#e91e63', 4])\n","\n","# ------ ema ------ #\n","# step_col_list.append([['ema_5T'], 1, '#03ed30', 2])\n","\n","# ============ stepmark_col_list - add info(col, alpha, color, linewidth) ============ #\n","# stepmark_col_list.append([['sar_T'], 1, 'dodgerblue', 7])\n","\n","\n","# ============ str to numbcol ============ #\n","nonstep_col_arr = strcol_tonumb(res_df, nonstep_col_list)\n","step_col_arr = strcol_tonumb(res_df, step_col_list)\n","stepmark_col_arr = strcol_tonumb(res_df, stepmark_col_list)\n","\n","col_idx_dict = \\\n","{\n","  \"ohlc_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close']),\n","  \"vp_col_idxs\": get_col_idxs(res_df, ['close', 'volume']),\n","  # \"ohlc_col_idxs\": get_col_idxs(res_df, ['haopen', 'hahigh', 'halow', 'haclose']),  # heikin-ashi ver.\n","  \"nonstep_col_info\": nonstep_col_arr,\n","  \"step_col_info\": step_col_arr,\n","  \"stepmark_col_info\": stepmark_col_arr,\n","  \"ylim_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close', 'dc_upper_15T4', 'dc_lower_15T4'])  # , 'dc_upper_H', 'dc_lower_H', 'dc_upper_15T', 'dc_lower_15T', 'short_out_{}'.format(selection_id), 'long_out_{}'.format(selection_id)\n","}   # , 'wave_1_{}'.format(wave_tf2), 'wave_0_{}'.format(wave_tf2), 'dc_upper_15T', 'dc_lower_15T'"]},{"cell_type":"markdown","metadata":{"id":"50HXDIdJij28"},"source":["#### whole_plot main"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-tbLsXN9eN2p"},"outputs":[],"source":["plot_op_idx_nums = 10\n","\n","win_idxs = (pr_ > 1).ravel()  # [-plot_op_idx_nums:]\n","selected_op_idxs = obj_[4].ravel().astype(int)  # [-plot_op_idx_nums:]\n","selected_ex_idxs = obj_[3].ravel().astype(int)  # [-plot_op_idx_nums:]\n","\n","len_idxs = len(win_idxs)\n","print(\"len_idxs :\", len_idxs)\n","\n","split_range = np.arange(plot_op_idx_nums, len_idxs, plot_op_idx_nums)\n","win_idxs_list = np.split(win_idxs, split_range, axis=0)\n","selected_op_idxs_list = np.split(selected_op_idxs, split_range, axis=0)\n","selected_ex_idxs_list = np.split(selected_ex_idxs, split_range, axis=0)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FtILHO-4kVlO"},"outputs":[],"source":["_ = [whole_plot_check(np_df, a, b, c, plot_check_dir=None, **col_idx_dict) for a, b, c in zip(win_idxs_list, selected_op_idxs_list, selected_ex_idxs_list)]"]},{"cell_type":"markdown","metadata":{"id":"iTW2ZuX61ojg"},"source":["### plot_funcs"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0l6joTK_1ojh"},"outputs":[],"source":["def whole_plot_check(data, win_idxs, selected_op_idxs, selected_ex_idxs, plot_check_dir=None, **col_idx_dict):\n","  # start_0 = time.time()\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(30, 12))\n","  nrows, ncols = 1, 1\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                          ncols=ncols,\n","                          #height_ratios=[31, 1]\n","                          )\n","\n","  ax = fig.add_subplot(gs[0])\n","\n","  # ------------ add_col section ------------ #\n","  a_data = data[selected_op_idxs[0]:selected_op_idxs[-1] + 1]\n","\n","  plot_op_idxs = selected_op_idxs - selected_op_idxs[0]  \n","  plot_win_op_idxs = plot_op_idxs[win_idxs]\n","  plot_loss_op_idxs = plot_op_idxs[~win_idxs]\n","\n","  plot_ex_idxs = selected_ex_idxs - selected_op_idxs[0]\n","  plot_win_ex_idxs = plot_ex_idxs[win_idxs]\n","  plot_loss_ex_idxs = plot_ex_idxs[~win_idxs]\n","\n","\n","  # ------ add cols ------ #\n","  [nonstep_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['nonstep_col_info']]\n","  [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","  [stepmark_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['stepmark_col_info']]\n","\n","  # [plt.axvline(op_idx, color='#00ff00') for op_idx in plot_win_op_idxs]\n","  # [plt.axvline(op_idx, color='#ff0000') for op_idx in plot_loss_op_idxs]\n","  [plt.axvspan(op_idx, ex_idx, alpha=0.5, color='#00ff00') for op_idx, ex_idx in zip(plot_win_op_idxs, plot_win_ex_idxs)]\n","  [plt.axvspan(op_idx, ex_idx, alpha=0.5, color='#ff0000') for op_idx, ex_idx in zip(plot_loss_op_idxs, plot_loss_ex_idxs)]\n","  \n","  plt.show()\n","\n","  if plot_check_dir is None:\n","    plt.show()\n","    print()\n","  else:\n","    fig_name = plot_check_dir + \"/whole_plot_{}.png\".format(selected_op_idxs[0])\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","  plt.close()\n","  # print(\"elapsed time :\", time.time() - start_0)\n","\n","  return\n","\n","def plot_check_v9(res_df, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, back_plot, plot_check_dir=None, **col_idx_dict):\n","  # start_0 = time.time()\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(30, 18))\n","  nrows, ncols = 2, 2\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                         ncols=ncols,\n","                         height_ratios=[3, 1]\n","                         )\n","  for gs_idx, params in enumerate(param_zip):\n","\n","    iin, iout, pr, en_p, ex_p, entry_idx, exit_idx, p1_idx, p2_idx, lvrg, fee, tp_line, out_line, tp_1, tp_0, out_1, out_0, ep2_0 = params\n","\n","    # print(\"en_p, ex_p :\", en_p, ex_p)\n","    # print(\"tp_line, out_line, ep2_0 :\", tp_line, out_line, ep2_0)\n","\n","    # temporary\n","    # if exit_idx - p1_idx < 50:\n","    # if exit_idx != entry_idx:\n","    # print(\"p1_idx :\", p1_idx)\n","    # if p1_idx != 370259:\n","    #   break\n","\n","    # ============ define ax1 & ax2 ============ #\n","    ax1 = fig.add_subplot(gs[gs_idx])\n","    ax2 = fig.add_subplot(gs[gs_idx + 2])\n","\n","    # ------ date range ------ #\n","    if back_plot == 0:\n","      iout = iin + x_max\n","      # print(\"iin, iout :\", iin, iout)\n","\n","    a_data = res_df.iloc[int(iin):int(iout + 1)].to_numpy()\n","    # a_data = data[iin:iout]\n","\n","    # ------------ add_col section ------------ #\n","    # ------ candles ------ #\n","    candle_plot_v2(ax1, a_data[:, col_idx_dict['ohlc_col_idxs']], alpha=1.0, wickwidth=1.0)\n","\n","    # ------ add cols ------ #\n","    [nonstep_col_plot_v2(ax1, a_data[:, params_[0]], *params_[1:]) for params_ in col_idx_dict['nonstep_col_info']]\n","    [step_col_plot_v2(ax1, a_data[:, params_[0]], *params_[1:]) for params_ in col_idx_dict['step_col_info']]\n","    [stepmark_col_plot_v2(ax1, a_data[:, params_[0]], *params_[1:]) for params_ in col_idx_dict['stepmark_col_info']]\n","\n","    [step_col_plot_v2(ax2, a_data[:, params_[0]], *params_[1:]) for params_ in col_idx_dict['step_col_info2']]\n","\n","    # ------ get vp_info ------ #\n","    kde_factor = 0.1   # 커질 수록 전체적인 bars_shape 이 곡선이됨, 커질수록 latency 좋아짐 (0.00003s 정도)\n","    num_samples = 100  # plot 되는 volume bars (y_axis) 와 비례관계\n","    # vp_data = data[iin - 500:iin, col_idx_dict['vp_col_idxs']].T  # Todo, vp_range should be calculated by wave_point\n","\n","    if tp_1 < out_0:  # SELL order\n","      post_co_idx = res_df.iloc[int(p1_idx), col_idx_dict['post_co_idx']]\n","      # vp_iin = res_df.iloc[int(p1_idx) - 1, col_idx_dict['post_cu_idx']].to_numpy()  # Todo, co_idx 와 co_post_idx 의 차별을 위해서 -1 해줌 <-- 중요 point\n","      vp_iin = res_df.iloc[post_co_idx, col_idx_dict['post_cu_idx']].to_numpy()  # Todo, co_idx 와 co_post_idx 의 차별을 위해서 -1 해줌 <-- 중요 point\n","    else:\n","      post_cu_idx = res_df.iloc[int(p1_idx), col_idx_dict['post_cu_idx']]\n","      # vp_iin = res_df.iloc[int(p1_idx) - 1, col_idx_dict['post_co_idx']].to_numpy()\n","      vp_iin = res_df.iloc[int(post_cu_idx), col_idx_dict['post_co_idx']].to_numpy()\n","    # print(\"iin, vp_iin, p1_idx :\", iin, vp_iin, p1_idx)\n","\n","    vp_data = res_df.iloc[int(vp_iin):int(p1_idx), col_idx_dict['vp_col_idxs']].to_numpy().T  # Todo, vp_range should be calculated by wave_point\n","    # print(\"vp_data :\", vp_data)\n","    # vp_info = [vp_range, *vp_data, kde_factor, num_samples]\n","    vp_info = [*vp_data, kde_factor, num_samples]\n","\n","    # ------ ep, tp + xlim ------ #\n","    try:\n","      eptp_hvline_v9_1(ax1, ax2, config, *params, back_plot, x_max, x_margin_mult, y_margin_mult, a_data, vp_info, **col_idx_dict)\n","    except Exception as e:\n","      print(\"error in eptp_hvline :\", e)\n","\n","    #     Todo    #\n","    #     3. outer_price plot 일 경우, gs_idx + nrows 하면 됨\n","\n","    # ------ trade_info ------ #\n","    data_msg_list = [\"\\n {} : {:.3f}\".format(*params_[1:], *res_df.iloc[int(p1_idx), params_[0]]) for params_ in col_idx_dict['data_window_p1_col_info']]  # * for unsupported format for arr\n","    data_msg_list += [\"\\n {} : {:.3f}\".format(*params_[1:], *res_df.iloc[int(p2_idx), params_[0]]) for params_ in col_idx_dict['data_window_p2_col_info']]\n","    ps_msg_expand = pr_msg.format(p1_idx, exit_idx, pr, lvrg, fee) + ''.join(data_msg_list)\n","    \n","    ax1.set_title(ps_msg_expand)   # set_title on ax1\n","\n","  if plot_check_dir is None:\n","    plt.show()\n","    print()\n","  else:\n","    fig_name = plot_check_dir + \"/{}.png\".format(int(entry_idx))\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","  plt.close()\n","  # print(\"elapsed time :\", time.time() - start_0)\n","\n","  return\n","\n","def eptp_hvline_v9_1(ax1, ax2, config, iin, iout, pr, en_p, ex_p, entry_idx, exit_idx, p1_idx, p2_idx, lvrg, fee, tp_line, out_line, tp_1, tp_0, out_1, out_0, ep2_0,\n","                   back_plot, x_max, x_margin_mult, y_margin_mult, a_data, vp_info, **col_idx_dict):\n","  # ------ get vertical ticks ------ #\n","  entry_tick = int(entry_idx - iin)\n","  exit_tick = entry_tick + int(exit_idx - entry_idx)\n","  p1_tick = entry_tick - int(entry_idx - p1_idx)\n","  p2_tick = p1_tick + int(p2_idx - p1_idx)\n","\n","  if back_plot == 1:\n","    x_max = p1_tick + 20\n","  elif back_plot == 2:\n","    x_max = p2_tick + 20 \n","  elif back_plot == 3:\n","    x_max = entry_tick + 20 \n","  elif back_plot == 4:\n","    x_max = exit_tick + 20\n","\n","  # ============ xlim ============ #\n","  if (iout - iin) > x_max:\n","    x_margin = x_max * x_margin_mult\n","    ax1.set_xlim(0 - x_margin, x_max + x_margin)\n","    ax2.set_xlim(0 - x_margin, x_max + x_margin)\n","  x0, x1 = ax1.get_xlim()\n","\n","  # ============ hlines ============ #\n","  # ------------ ax1 ------------ #\n","  # ------ entry & exit ------ #\n","  en_xmin = entry_tick / x1\n","  ex_xmin = exit_tick / x1\n","  ax1.axhline(en_p, x0, en_xmin, linewidth=2, linestyle='--', alpha=1, color='lime')  # en_p line axhline\n","  if config.tr_set.check_hlm in [0, 1]:\n","    ax1.text(x0, en_p, 'en_p :\\n {:.3f} \\n epg1 {}'.format(en_p, config.tr_set.ep_gap1), ha='right', va='center', fontweight='bold', fontsize=15)  # en_p line label\n","  else:\n","    ax1.text(x0, en_p, 'en_p :\\n {:.3f} \\n epg2 {}'.format(en_p, config.tr_set.ep_gap2), ha='right', va='center', fontweight='bold', fontsize=15)  # en_p line label\n","  ax1.axhline(ex_p, ex_xmin, 1, linewidth=2, linestyle='--', alpha=1, color='lime')  # ex_p line axhline (signal 도 포괄함, 존재 의미)\n","  ax1.text(x1, ex_p, 'ex_p :\\n {}'.format(ex_p), ha='left', va='center', fontweight='bold', fontsize=15)  # ex_p line label\n","\n","  # ------ tpout_line ------ #\n","  ax1.axhline(tp_line, 0.05, 1, linewidth=2, linestyle='-', alpha=1, color='#00ff00')  # ep 와 gap 비교 용이하기 위해 ex_xmin -> 0.1 사용\n","  ax1.text(x0, tp_line, 'tpg {}'.format(config.tr_set.tp_gap), ha='right', va='center', fontweight='bold', fontsize=15, color='#00ff00')\n","  ax1.axhline(out_line, 0.05, 1, linewidth=2, linestyle='-', alpha=1, color='#ff0000')\n","  ax1.text(x0, out_line, 'outg {}'.format(config.tr_set.out_gap), ha='right', va='center', fontweight='bold', fontsize=15, color='#ff0000')\n","\n","  # ------ tp_box ------ #\n","  text_x_pos = (x0 + x1) * 0.1\n","  ax1.axhline(tp_1, 0.2, 1, linewidth=4, linestyle='-', alpha=1, color='#ffffff')\n","  ax1.text(text_x_pos, tp_1, ' tp_1', ha='right', va='bottom', fontweight='bold', fontsize=15)\n","  ax1.axhline(tp_0, 0.2, 1, linewidth=4, linestyle='-', alpha=1, color='#ffffff')\n","  ax1.text(text_x_pos, tp_0, ' tp_0', ha='right', va='bottom', fontweight='bold', fontsize=15)  \n","\n","  # ------ out_box ------ #\n","  # text_x_pos = (x0 + x1) * 0.1\n","  ax1.axhline(out_1, 0.2, 1, linewidth=2, linestyle='-', alpha=1, color='#ffffff')\n","  ax1.text(text_x_pos, out_1, ' out_1', ha='right', va='bottom', fontweight='bold', fontsize=15)\n","  ax1.axhline(out_0, 0.2, 1, linewidth=2, linestyle='-', alpha=1, color='#ffffff')\n","  ax1.text(text_x_pos, out_0, ' out_0', ha='right', va='bottom', fontweight='bold', fontsize=15)  \n","  # ------ ep_box ------ #\n","  # text_x_pos = (x0 + x1) * 0.1\n","  ax1.axhline(ep2_0, 0.2, 1, linewidth=1, linestyle='-', alpha=1, color='#ffffff')\n","  ax1.text(text_x_pos, ep2_0, ' ep2_0', ha='right', va='bottom', fontweight='bold', fontsize=15)\n","  \n","  # ------ volume profile ------ #\n","  close, volume, kde_factor, num_samples = vp_info\n","  # if iin >= vp_range:\n","  # start_0 = time.time()\n","  kde = stats.gaussian_kde(close, weights=volume, bw_method=kde_factor)\n","  kdx = np.linspace(close.min(), close.max(), num_samples)\n","  kdy = kde(kdx)\n","  kdy_max = kdy.max()\n","  # print(\"kde elapsed_time :\", time.time() - start_0)\n","\n","  # peaks,_ = signal.find_peaks(kdy, prominence=kdy_max * 0.3)   # get peak_entries\n","  # peak_list = kdx[peaks]   # peak_list\n","  # [ax1.axhline(peak, linewidth=1, linestyle='-', alpha=1, color='orange') for peak in peak_list]\n","  \n","  kdy_ratio = p1_tick / kdy_max # 30 / 0.0001   # max_value 가 p1_tick 까지 닿을 수 있게.\n","  # print(\"kdx :\", kdx)\n","  # ax1.plot(kdy * kdy_ratio, kdx, color='white')  # Todo, bars 가능 ?\n","  # ax1.barh(kdy * kdy_ratio, kdx, color='white')  # Todo, bars 가능 ?\n","  ax1.barh(kdx, kdy * kdy_ratio, color='#00ff00', alpha=0.5)  # Todo, bars 가능 ?\n","\n","  # ------------ ax2 ------------ #\n","  # ------ cci_band ------ #\n","  ax2.axhline(100, color=\"#ffffff\")\n","  ax2.axhline(-100, color=\"#ffffff\")\n","\n","  # ------ stoch_band ------ #\n","  # ax2.axhline(67, color=\"#ffffff\")\n","  # ax2.axhline(33, color=\"#ffffff\")\n","  \n","  # ax2.axhline(0, color=\"#ffffff\")\n","\n","  # ============ ylim ============ # - ax1 only\n","  if back_plot:\n","    y_lim_data = a_data[:x_max + 1, col_idx_dict['ylim_col_idxs']]  # +1 for including p1_tick\n","  else:\n","    y_lim_data = a_data[:, col_idx_dict['ylim_col_idxs']]\n","  \n","  y_min = y_lim_data.min()\n","  y_max = y_lim_data.max()\n","  y_margin = (y_max - y_min) * y_margin_mult\n","  ax1.set_ylim(y_min - y_margin, y_max + y_margin)\n","\n","  # ============ vline (p1_tick, entry_tick, exit_tick) ============ # - add p1_tick on ax2\n","  y0, y1 = ax1.get_ylim()\n","  low_data = a_data[:exit_tick + 1, col_idx_dict['ohlc_col_idxs'][2]]  # +1 for including exit_tick\n","  p2_ymax, en_ymax, ex_ymax = [(low_data[tick_] - y0) / (y1 - y0) - .01 for tick_ in [p2_tick, entry_tick, exit_tick]]  # -.05 for margin\n","  if p1_tick > 0:\n","    p1_ymax = (low_data[p1_tick] - y0) / (y1 - y0) - .01\n","    ax1.axvline(p1_tick, 0, p1_ymax, alpha=1, linewidth=2, linestyle='--', color='#ff0000')  # 추후, tick 별 세부 정의가 달라질 수 있음을 고려해 multi_line 작성 유지\n","    ax2.axvline(p1_tick, 0, 1, alpha=1, linewidth=2, linestyle='--', color='#ff0000')\n","  ax1.axvline(p2_tick, 0, p2_ymax, alpha=1, linewidth=2, linestyle='--', color='#2196f3')\n","  ax1.axvline(entry_tick, 0, en_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  ax1.axvline(exit_tick, 0, ex_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  ax2.axvline(p2_tick, 0, 1, alpha=1, linewidth=2, linestyle='--', color='#2196f3')\n","  ax2.axvline(entry_tick, 0, 1, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  ax2.axvline(exit_tick, 0, 1, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","\n","  return"]},{"cell_type":"markdown","metadata":{"id":"8soVNGFt1ojj"},"source":["#### legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"narSQRCz1ojj"},"outputs":[],"source":["_ = [plot_check_v4(np_df, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir, 500, 0.07, 100, **col_idx_dict) for param_zip in zip(np_plot_params, np_plot_params[::-1])]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kLiEIiMW1ojk"},"outputs":[],"source":["def plot_check_v4(data, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir=None, vp_range=500, kde_factor=0.05, num_samples=100, **col_idx_dict):\n","  # start_0 = time.time()\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(30, 18))\n","  nrows, ncols = 2, 2\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                         ncols=ncols,\n","                         height_ratios=[3, 1]\n","                         )\n","  for gs_idx, params in enumerate(param_zip):\n","    ax = fig.add_subplot(gs[gs_idx])\n","    iin, iout, pr, ep, tp, entry_idx, exit_idx, open_idx, lvrg, fee, tp_line, out_line, bias_info, bias_thresh = params\n","\n","    # ------------ add_col section ------------ #\n","    iin, iout = int(iin), int(iout)\n","    a_data = data[iin:iout]\n","    # ------ candles ------ #\n","    candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","    \n","    # ------ add cols ------ #\n","    [nonstep_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['nonstep_col_info']]\n","    [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","    [stepmark_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['stepmark_col_info']]\n","\n","    # vp_data = data[iin - vp_range:iin, col_idx_dict['vp_col_idxs']]\n","    # vp_info = [vp_range, vp_data[:, 0], vp_data[:, 1], kde_factor, num_samples]\n","    vp_data = data[iin - vp_range:iin, col_idx_dict['vp_col_idxs']].T\n","    vp_info = [vp_range, *vp_data, kde_factor, num_samples]\n","\n","    # ------ ep, tp + xlim ------ #\n","    eptp_hvline_v4(config, ep, tp, entry_idx, exit_idx, open_idx, tp_line, out_line, bias_info, bias_thresh, \n","                   front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, vp_info, **col_idx_dict)        \n","\n","    #     Todo    #\n","    #     3. outer_price plot 일 경우, gs_idx + nrows 하면 됨\n","\n","    # ------ trade_info ------ #\n","    plt.title(pr_msg.format(entry_idx, exit_idx, pr, lvrg, fee))\n","\n","  if plot_check_dir is None:\n","    plt.show()\n","    print()\n","  else:\n","    fig_name = plot_check_dir +  \"/%s.png\" % int(entry_idx)\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","  plt.close()\n","  # print(\"elapsed time :\", time.time() - start_0)  \n","\n","  return\n","\n","def eptp_hvline_v4(config, en_p, ex_p, entry_idx, exit_idx, open_idx, tp_line, out_line, bias_info, bias_thresh, \n","                   front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, vp_info, **col_idx_dict):\n","  # ------ get vertical ticks ------ #\n","  entry_tick = int(entry_idx - iin)\n","  open_tick = entry_tick - int(entry_idx - open_idx)\n","  exit_tick = entry_tick + int(exit_idx - entry_idx)\n","\n","  if front_plot == 1:\n","    x_max = open_tick\n","  elif front_plot == 2:\n","    x_max = entry_tick\n","  if (iout - iin) > x_max:\n","    x_margin = x_max * x_margin_mult\n","    plt.xlim(0 - x_margin, x_max + x_margin)\n","  x0, x1 = plt.gca().get_xlim()\n","  # ------------ hlines ------------ #\n","  # ------ entry & exit ------ #\n","  en_xmin = entry_tick / x1\n","  ex_xmin = exit_tick / x1\n","  plt.axhline(en_p, x0, en_xmin, linewidth=2, linestyle='--', alpha=1, color='lime')  # en_p line axhline\n","  plt.text(x0, en_p, ' en_p :\\n {}'.format(en_p), ha='right', va='center', fontweight='bold')  # en_p line label\n","  plt.axhline(ex_p, ex_xmin, 1, linewidth=2, linestyle='--', alpha=1, color='lime')  # ex_p line axhline (signal 도 포괄함, 존재 의미)\n","  plt.text(x1, ex_p, ' ex_p :\\n {}'.format(ex_p), ha='left', va='center', fontweight='bold')  # ex_p line label\n","\n","  # ------ tpout_line ------ #\n","  plt.axhline(tp_line, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#00ff00')  # ep 와 gap 비교 용이하기 위해 ex_xmin -> 0.1 사용\n","  plt.text(x0, tp_line, ' %s' % config.tr_set.tp_gap, ha='left', va='center', fontweight='bold')\n","  plt.axhline(out_line, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#ff0000')\n","  plt.text(x0, out_line, ' %s' % config.tr_set.out_gap, ha='left', va='center', fontweight='bold')\n","\n","  # ------ bias_line ------ #\n","  plt.axhline(bias_info, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='dodgerblue')\n","  plt.text(x0, bias_info, ' bias_info', ha='left', va='center', fontweight='bold')\n","  plt.axhline(bias_thresh, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#ff8400')\n","  plt.text(x0, bias_thresh, ' bias_thresh', ha='left', va='center', fontweight='bold')\n","\n","  # ------ volume profile ------ #\n","  vp_range, close, volume, kde_factor, num_samples = vp_info\n","  if iin >= vp_range:\n","    start_0 = time.time()\n","    kde = stats.gaussian_kde(close, weights=volume, bw_method=kde_factor)\n","    kdx = np.linspace(close.min(), close.max(), num_samples)\n","    kdy = kde(kdx)\n","    print(\"kde elapsed_time :\", time.time() - start_0)\n","\n","    kdy_max = kdy.max()\n","    # peaks,_ = signal.find_peaks(kdy)\n","    peaks,_ = signal.find_peaks(kdy, prominence=kdy_max * 0.3)\n","    peak_list = kdx[peaks]   # peak_list\n","    [plt.axhline(peak, linewidth=6, linestyle='-', alpha=1, color='white') for peak in peak_list]\n","    \n","    kdy_ratio = entry_tick / kdy_max # 30 / 0.0001\n","    plt.plot(kdy * kdy_ratio, kdx, color='white')\n","    # plt.plot(pky, pkx, 'bo', color='yellow')\n","\n","  # ------ ylim ------ #\n","  if front_plot:\n","    y_lim_data = a_data[:x_max + 1, col_idx_dict['ylim_col_idxs']]  # +1 for including open_tick\n","  else:\n","    y_lim_data = a_data[:, col_idx_dict['ylim_col_idxs']]\n","  y_min = y_lim_data.min()\n","  y_max = y_lim_data.max()\n","  y_margin = (y_max - y_min) * y_margin_mult\n","  # plt.ylim(y_min - y_margin, y_max + y_margin)\n","\n","  # ------------ vline (open_tick, entry_tick, exit_tick) ------------ #\n","  y0, y1 = plt.gca().get_ylim()\n","  l_data = a_data[:exit_tick + 1, col_idx_dict['ohlc_col_idxs'][2]]  # +1 for including exit_tick\n","  open_ymax, en_ymax, ex_ymax = [(l_data[tick_] - y0) / (y1 - y0) - .01 for tick_ in [open_tick, entry_tick, exit_tick]]  # -.05 for margin\n","  plt.axvline(open_tick, 0, open_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')  # 추후, tick 별 세부 정의가 달라질 수 있음을 고려해 multi_line 작성 유지\n","  plt.axvline(entry_tick, 0, en_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  plt.axvline(exit_tick, 0, ex_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","\n","  return"]},{"cell_type":"markdown","metadata":{"id":"ddL_BC24buq0"},"source":["### dump"]},{"cell_type":"markdown","metadata":{"id":"zgTrEWWqbwsT"},"source":["#### whole_plot thing"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"M4zn8wxibzAR"},"outputs":[],"source":["fig = go.Figure(data=[go.Candlestick(x=t_df.index,\n","                open=t_df.open,\n","                high=t_df.high,\n","                low=t_df.low,\n","                close=t_df.close)])\n","\n","fig.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4IhBjPMobzAS"},"outputs":[],"source":["cf.go_offline()\n","init_notebook_mode()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"n9WZkE9wbzAS"},"outputs":[],"source":["qf = cf.QuantFig(t_df, title=\"Apple's stock price in 2021\", name='AAPL')\n","qf.iplot()"]},{"cell_type":"markdown","metadata":{"id":"zmYbP-Gc1ojs"},"source":["#### brief np_pr survey"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"82a8Km8z1ojs"},"outputs":[],"source":["# plot_pr_list[:100]\n","plt.plot(np_pr)\n","plt.axhline(1)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"5rdQZm_71ojv"},"source":["#### plot indi. legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"u11r-dU91ojw"},"outputs":[],"source":["\n","  # ---------------------- ma ---------------------- #\n","   # --------- ema --------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(ema_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  #   # --------- sma --------- #\n","  # alpha = 1\n","  # for sm_i, sma in enumerate(sma_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 4\n","  #   plt.step(np.arange(len(plot_df)), plot_df[sma].values, alpha=alpha, color='#e91e63', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  \n","  # ---------------------- cb ---------------------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(cb_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#5b9cf6', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","\n","  \n","  # ---------------------- sar ---------------------- #\n","  # alpha = 1\n","  # markersize = 5\n","  # for sar in sar_list:\n","  #   plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","  #   markersize += 1\n","  #   alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  # alpha = 0.7\n","  # for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","  #                     where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","  #                     where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","  #   alpha -= 0.05\n","  \n","\n","\n","  # ---------------------- outer price indi. ---------------------- #\n","  #           macd          #\n","  # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","    \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for stoch_ in stoch_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[stoch_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(stoch_upper, linestyle='--')\n","  # plt.axhline(stoch_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- cctbbo ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for cctbbo in cctbbo_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cctbbo].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(cctbbo_upper, linestyle='--')\n","  # plt.axhline(cctbbo_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- ema_roc ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for emaroc in emaroc_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[emaroc].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","  \n","  # ---------- bbw ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for bbwp_ in bbwp_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[bbwp_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(bbwp_thresh, linestyle='--')\n","\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n"]},{"cell_type":"markdown","metadata":{"id":"tApzvz_gK9lR"},"source":["## legacy"]},{"cell_type":"markdown","metadata":{"id":"OJqkmkpsLCYC"},"source":["### tr_tresh calc"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gcpo4MGd9Wm4"},"outputs":[],"source":["res_wr = 0.6\n","# tr_thresh = 1\n","# tr_thresh = ((1 - res_wr) / res_wr) ** 0.5\n","tr_thresh = ((1 - res_wr) / res_wr) + 0.01\n","# tr_thresh = 2.6\n","print(\"res_wr :\", res_wr)\n","print(\"tr_thresh :\", tr_thresh)\n","\n","\n","#   단리    #\n","trade_num = 1000\n","asset = 1 # thousand USDT\n","test_loss_gap = 0.95  # fee adjusted\n","test_pr_gap = 1 + (1 - test_loss_gap) * tr_thresh\n","\n","test_loss_cnt = trade_num * (1 - res_wr)\n","test_pr_cnt = trade_num * res_wr\n","\n","test_trade_list = [test_pr_gap] * int(test_pr_cnt) + [test_loss_gap] * int(test_loss_cnt)\n","random.shuffle(test_trade_list)\n","# print(\"len(test_trade_list) :\", len(test_trade_list))\n","print(test_trade_list[:10])\n","print()\n","\n","# print(\"%.5f\" % np.cumprod(test_trade_list)[-1])\n","for tr_thresh_ in np.arange(1, 3, 0.2):\n","  if (1 + (1 - test_loss_gap) * tr_thresh_) ** test_pr_cnt * test_loss_gap ** test_loss_cnt > 1:\n","    break\n","print(\"복리를 위한 tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumprod(test_trade_list)[-1] :\", np.cumprod(test_trade_list)[-1])\n","print(\"total_pr : \", np.cumprod(test_trade_list)[-1])\n","print()\n","#   복리 tr_thresh  #\n","#   1. trade_num 에 영향 받지 않음\n","#   2. loss_gap 에 비례함\n","\n","for tr_thresh_ in np.arange(1, 3, 0.01):\n","  if ((1 - test_loss_gap) * tr_thresh_) * test_pr_cnt + (test_loss_gap - 1) * test_loss_cnt > 0:\n","    break\n","np_test_trade = np.array(test_trade_list) - 1\n","print(np_test_trade[:10])\n","# print(\"%.3f\" % )\n","print(\"단리를 위한 tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumsum(np_test_trade)[-1] :\", np.cumsum(np_test_trade)[-1])\n","print(\"total_pr : \", 1 + np.cumsum(np_test_trade)[-1])\n"]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":["Ic1mfmwWCIBu","E0n53hflJbnp","MlFkpO1MSuzl","x2yj2SwAXDLp","14chOHeXh6JD","Q_1wJTcRYpm8","EOXQbXixiQcK","RZJ6uIA_VcJs","xpyP5t8Ht_pE","MuD_2vY7TI_8","983aUwM76s6X","_blyFhQJUd5X","50HXDIdJij28"],"provenance":[],"toc_visible":true,"authorship_tag":"ABX9TyNiWYUlISOohvVcrbz012gR"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}