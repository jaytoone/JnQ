{"cells":[{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6rmQpzEGXfCw","executionInfo":{"status":"ok","timestamp":1650633778632,"user_tz":-540,"elapsed":408443,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"1fe59a46-3da2-492d-9b1b-32edc3579810"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","import os, sys\n","\n","current_path = '/content/drive/My Drive/Colab Notebooks/JnQ/'\n","\n","os.chdir(current_path)\n","\n","strat_pkg = 'IDE'\n","\n","mpl_finance_path = '/content/drive/My Drive/Colab Notebooks/JnQ/mpl_finance'\n","zigzag_path = '/content/drive/My Drive/Colab Notebooks/JnQ/zigzag'\n","\n","if mpl_finance_path not in sys.path:\n","\n","  try:\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ')\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ/{}'.format(strat_pkg))\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ/funcs')\n","    sys.path.insert(0, mpl_finance_path)\n","    sys.path.insert(0, zigzag_path)\n","    \n","  except Exception as e:\n","    print(e)"]},{"cell_type":"markdown","metadata":{"id":"8uqYv5StTazo"},"source":["# requirements"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"9qGt60DKTZmf","executionInfo":{"status":"ok","timestamp":1650633799825,"user_tz":-540,"elapsed":21197,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["#!pip install zigzag --target=$'/content/drive/My Drive/Colab Notebooks/JnQ/zigzag'\n","\n","# !pip install findiff\n","# import nvstrings, nvcategory, cudf\n","# import cuml\n","# import cudf\n","\n","import os\n","from funcs.funcs_idep import *\n","from funcs.funcs_duration_v2 import *\n","from funcs.funcs_plot_check import *\n","from funcs.funcs_pairing import *\n","# from funcs.funcs_ide import *\n","# from funcs.funcs_indicator_candlescore import *\n","from funcs.funcs_indicator import *\n","from funcs.funcs_trader import *\n","from ast import literal_eval\n","import logging\n","import importlib\n","\n","import mpl_finance as mf\n","import matplotlib.pyplot as plt\n","from matplotlib import gridspec\n","# from zigzag import *\n","# from tqdm.notebook import tqdm\n","\n","import IPython\n","import IPython.display\n","\n","import numpy as np\n","# import jax.numpy as np\n","import pandas as pd\n","# import seaborn as sns\n","# import tensorflow as tf\n","from scipy import stats, signal\n","\n","import pickle\n","import shutil\n","import json\n","from easydict import EasyDict\n","import copy\n","\n","import datetime\n","from datetime import datetime\n","import random\n","import time\n","# import warnings\n","\n","# warnings.simplefilter(\"ignore\", category=RuntimeWarning)\n","\n","np.seterr(invalid=\"ignore\")\n","np.set_printoptions(suppress=True)\n","np.set_printoptions(linewidth=2000) \n","\n","pd.set_option('mode.chained_assignment',  None)\n","\n","pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)"]},{"cell_type":"markdown","metadata":{"id":"Ic1mfmwWCIBu"},"source":["# makeset - with to_htf dataframes"]},{"cell_type":"markdown","metadata":{"id":"AUSBU7T8Suzi"},"source":["## sync_check_make"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QmhLikYlSuzi"},"outputs":[],"source":["def sync_check_make(df):\n","\n","    make_itv_list = ['3T', '5T', '15T', '30T', 'H', '4H', 'D']\n","    offset_list = ['1h', '1h', '1h', '1h', '1h', '1h', '9h']\n","\n","    assert len(make_itv_list) == len(offset_list), \"length of itv & offset_list should be equal\"\n","        \n","    htf_df_list = [to_htf(df, itv_=itv_, offset=offset_) for itv_, offset_ in zip(make_itv_list, offset_list)]\n","\n","    df_3T, df_5T, df_15T, df_30T, df_H, df_4H, df_D = htf_df_list\n","\n","    for htf_df in htf_df_list:\n","      print(\"{} -> \".format(pd.infer_freq(htf_df.index)), htf_df.tail(1))\n","\n","    # heikinashi_v2(res_df_)\n","\n","    # h_candle_v3(res_df, '5T')\n","\n","    # --------------- bb --------------- #  \n","    # bb_period = 20\n","\n","    # # bb_width_v2(df, period=bb_period, multiple=1)\n","    # # # df = bb_line(df, df_5T, '5T')\n","    # # # df = bb_line(df, df_15T, '15T')\n","    # # print(\"bb phase done\")\n","\n","    c_itv = '15T'\n","\n","    # # bb_itv= 'T'\n","    # # candle_pumping_ratio(df, c_itv, bb_itv, bb_period)\n","\n","    dc_itv= '15T'\n","    dc_period = 4\n","    # df = candle_pumping_ratio_v2(df, c_itv, dc_itv, dc_period)\n","    # print(\"candle_pumping_ratio_v2 phase done\")\n","\n","    # df = dc_over_body_ratio(df, c_itv, dc_itv, dc_period)\n","    # print(\"dc_over_body_ratio phase done\")\n","\n","    df = body_rel_ratio(df, c_itv)\n","    print(\"body_rel_ratio phase done\")\n","\n","    # --------------- cbline --------------- #    \n","    # cloud_bline(df_3T, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_3T, [-1]), how='inner')\n","    # # cloud_bline(df_5T, 20)\n","    # # df = df.join(to_lower_tf_v2(df, df_5T, [-1]), how='inner')\n","    # cloud_bline(df_15T, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_15T, [-1]), how='inner')\n","    # cloud_bline(df_30T, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_30T, [-1]), how='inner')\n","    # cloud_bline(df_H, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_H, [-1]), how='inner')\n","    # cloud_bline(df_4H, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_4H, [-1]), how='inner')\n","\n","    # print(\"cbline phase done\")\n","\n","    # --------------- dc --------------- #  \n","    # df = dc_line(df, df_5T, '5T')  # join 사용시에만 return df 허용함\n","    # df = dc_line(df, df_15T, '15T')\n","    # df = dc_line_v2(df, df_H, 'H', dc_period=5)\n","\n","    # print(\"dc phase done\")\n","\n","\n","    # --------------- sd_dc --------------- #\n","    # df = sd_dc(df, 20, 40)\n","    # df = sd_dc(df, 20, 20)\n","    # df = sd_dc(df_5T, 20, 40, df)\n","    # df = sd_dc(df_H, 20, 40, df)\n","\n","    # print(\"sd_dc phase done\")\n","\n","    # --------------- imb_ratio --------------- #\n","    # imb_ratio(df, '5T')\n","    # imb_ratio_v3(df, \"5T\")\n","    # imb_ratio_v4(df, \"5T\")\n","\n","    # imb_ratio(df, 'H')\n","    # imb_ratio_v2(df, '5T')\n","    \n","    # print(\"imb_ratio phase done\")\n","\n","    # --------------- rel_abs_ratio --------------- #\n","    # rel_abs_ratio(df, '5T', norm_period=120)\n","\n","    # --------------- normalize data --------------- #\n","    # itv = 'T'\n","    # lb_period = 15\n","    # target_col = 'close_{}{}'.format(itv, lb_period)\n","    # target_data = df['close'].diff(lb_period).to_numpy()\n","    # norm_data(df, target_data, target_col)    \n","    # print(\"normalize data phase done !\")\n","\n","    # --------------- lucid sar --------------- #\n","    # lucid_sar_v2(df)\n","    # lucid_sar_v2(df_3T)\n","    # df = df.join(to_lower_tf_v2(df, df_3T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_5T)\n","    # df = df.join(to_lower_tf_v2(df, df_5T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_15T)\n","    # df = df.join(to_lower_tf_v2(df, df_15T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_30T)\n","    # df = df.join(to_lower_tf_v2(df, df_30T, [-2, -1]), how='inner')       \n","\n","    # print(\"sar phase done\")\n","\n","    # --------------- supertrend --------------- #\n","    # df = st_price_line(df, df_3T, '3m')\n","    # df = st_price_line(df, df_5T, '5m')\n","    # df = st_price_line(df, df_15T, '15m')\n","    # df = st_price_line(df, df_30T, '30m')\n","    # df = st_price_line(df, df_H, '1h')\n","    # df = st_price_line(df, df_4H, '4h')\n","\n","    # print(\"supertrend phase done\")\n","\n","    # --------------- rsi --------------- #  \n","    # df['rsi_1m'] = rsi(df, 14)    \n","    # df_5T['rsi_5m'] = rsi(df_5T, 14)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1]), columns=['rsi_5m']))\n","    \n","    # print(\"rsi phase done\")\n","\n","\n","    # --------------- cci --------------- #  \n","    # df['cci_1m'] = cci(df, 20)\n","\n","    # print(\"cci phase done\")\n","\n","    # --------------- ema --------------- #      \n","    # df_5T['ema_5m'] = ema(df_5T['close'], 195)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1]), columns=['ema_5m']))\n","    \n","    # print(\"ema phase done\")\n","        \n","    # --------------- stochastic --------------- #\n","    # df['stoch_1m'] = stoch(df, 13, 3, 3)\n","\n","    # df_5T['stoch'] = stoch(df_5T, 13, 3, 3)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","    # print(\"stoch phase done\")\n","\n","\n","    return df\n"]},{"cell_type":"markdown","metadata":{"id":"mEKyVbHWSuzi"},"source":["## make & save res_df (concat 생각하면, timeindex sync 맞춰야함)"]},{"cell_type":"markdown","metadata":{"id":"VdukVo5-Suzj"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11,"status":"error","timestamp":1636201718856,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"khKb9nhlSuzj","outputId":"02bf2c60-f298-4fe9-e6bb-78230ac1348c"},"outputs":[{"ename":"NameError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-5-ee034491b257>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0ma_day\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m3600\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m24\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtqdm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m   \u001b[0mkeys\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mfile_list\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'file_list' is not defined"]}],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  if '2021-07-01'.upper() not in file_list[i]:\n","  # if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    excel_name = key.replace(\".xlsx\", \"_st1h_backi2.xlsx\")\n","    excel_path = save_path + excel_name\n","\n","    if excel_name in exist_list:\n","      print(excel_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m 마지막 timeindex 의 date 기준, 08:59:59.999000 를 last timestamp 로 설정\n","      #      2. 시작 timestamp 는 모든 tf 의 가장 최근 시작 index,\n","      #       a. 1m 의 시작 timeindex 는 최소, htf 의 시작 timeindex 보다 interval 만큼 앞서야함\n","      #         i. 따라서 1m open_index, latest_open_index + 1d 를 하면 댐\n","      #           1. timestamp 으로 변환후 1day 를 더하고 datetime 으로 변환\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","    latest_open_index = sorted(open_indexes)[-1]\n","    \n","    open_ts = datetime.timestamp(latest_open_index)\n","    latest_open_index_1m = datetime.fromtimestamp(open_ts + a_day)\n","\n","    #   str 로 만들어 접근하면 불가함  #\n","    end_index = pd.to_datetime(str(df.index[-1]).split(\" \")[0] + \" 08:59:59.999000\")\n","    # break\n","\n","    sliced_df = df.loc[latest_open_index_1m:end_index] # to_lower_tf 의 기준 ltf\n","    sliced_second_df = second_df.loc[latest_open_index:end_index]\n","    sliced_third_df = third_df.loc[latest_open_index:end_index]\n","    sliced_fourth_df = fourth_df.loc[latest_open_index:end_index]\n","    sliced_fifth_df = fifth_df.loc[latest_open_index:end_index]\n","\n","    print(\"sliced index\")\n","    print(sliced_df.index[[0, -1]])\n","    print(sliced_second_df.index[[0, -1]])\n","    print(sliced_third_df.index[[0, -1]])\n","    print(sliced_fourth_df.index[[0, -1]])\n","    print(sliced_fifth_df.index[[0, -1]])\n","\n","    try:\n","      sliced_sixth_df = sixth_df.loc[latest_open_index:end_index]\n","      sliced_seventh_df = seventh_df.loc[latest_open_index:end_index]\n","\n","      print(sliced_sixth_df.index[[0, -1]])\n","      print(sliced_seventh_df.index[[0, -1]])\n","\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df, sliced_sixth_df, sliced_seventh_df)\n","    \n","    except:\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df)\n","\n","\n","\n","    res_df.to_excel(excel_path)\n","    print(excel_name, \"saved succesfully !\")"]},{"cell_type":"markdown","metadata":{"id":"Bw5JibDKSuzj"},"source":["### xlsx to feather"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":355},"id":"VA-_gcA7Suzj","outputId":"f6f3b55d-ec2c-4b2c-d62e-3de7c0384dc4"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"be2b848dbcb14a079a2b7bd605af6435","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/156 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["DatetimeIndex(['2021-06-28 00:00:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:02:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:04:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:14:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:29:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-09-14 03:59:59.999000', '2021-11-15 14:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-03-10 20:59:59.999000', '2021-11-15 16:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","\n","xlsx converted to feather !\n","DatetimeIndex(['2021-06-28 00:00:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:02:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:04:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:14:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:29:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-09-14 03:59:59.999000', '2021-11-15 14:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-03-10 20:59:59.999000', '2021-11-15 16:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","\n","xlsx converted to feather !\n"]}],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  # if '2021-07-01'.upper() not in file_list[i]:\n","  if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    feather_name = key.replace(\".xlsx\", \".ftr\")\n","    # feather_path = save_path + feather_name\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m 마지막 timeindex 의 date 기준, 08:59:59.999000 를 last timestamp 로 설정\n","      #      2. 시작 timestamp 는 모든 tf 의 가장 최근 시작 index,\n","      #       a. 1m 의 시작 timeindex 는 최소, htf 의 시작 timeindex 보다 interval 만큼 앞서야함\n","      #         i. 따라서 1m open_index, latest_open_index + 1d 를 하면 댐\n","      #           1. timestamp 으로 변환후 1day 를 더하고 datetime 으로 변환\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","\n","    df.reset_index().to_feather(date_path + feather_name, compression='lz4')\n","    second_df.reset_index().to_feather(date_path2 + feather_name, compression='lz4')\n","    third_df.reset_index().to_feather(date_path3 + feather_name, compression='lz4')\n","    fourth_df.reset_index().to_feather(date_path4 + feather_name, compression='lz4')\n","    fifth_df.reset_index().to_feather(date_path5 + feather_name, compression='lz4')\n","    sixth_df.reset_index().to_feather(date_path6 + feather_name, compression='lz4')\n","    seventh_df.reset_index().to_feather(date_path7 + feather_name, compression='lz4')\n","\n","    print(\"xlsx converted to feather !\")\n","    "]},{"cell_type":"markdown","metadata":{"id":"Pe0QpnORSuzk"},"source":["### add itv_name to ftr"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":223},"executionInfo":{"elapsed":43664,"status":"ok","timestamp":1638246331122,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"M-gl30KxSuzk","outputId":"1cfcb580-8d25-4bd0-fdd0-213640779ce2"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"e3225655da874b8d89cc8b2a381b3fb6","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/175 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 BTCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 BCHUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 XRPUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 EOSUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 LTCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ETCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 LINKUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 XLMUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ADAUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ETHUSDT_1m.ftr\n"]}],"source":["save_path = './candlestick_concated/res_df/'\n","\n","# dir_path = \"bbdc3m_backi2\"\n","# date = '2021-10-10'\n","date = '2021-07-01'\n","\n","db_path = './candlestick_concated/database_bn/non_cum/%s/' % date\n","os.makedirs(os.path.join(db_path), exist_ok=True)\n","\n","# exist_list = os.listdir(os.path.join(save_path, dir_path))\n","# break\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","        \n","    df = shutil.copy(date_path + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n","    second_df = shutil.copy(date_path2 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval2))\n","    third_df = shutil.copy(date_path3 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval3))\n","    fourth_df = shutil.copy(date_path4 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval4))\n","    fifth_df = shutil.copy(date_path5 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval5))\n","    sixth_df = shutil.copy(date_path6 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval6))\n","    seventh_df = shutil.copy(date_path7 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval7))\n","\n","    print(\"copied to\" + db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n"]},{"cell_type":"markdown","metadata":{"id":"4oZ1ohTtSuzk"},"source":["### feather ver. (database to res_df)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vgVHpnUsSuzk"},"outputs":[],"source":["# db_path = './candlestick_concated/database_ub/' # upbit\n","db_path = './candlestick_concated/database_bn/'   # binance\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","save_dir_path = \"bb1d_backi2\"\n","date = '2022-02-17'\n","\n","# concat_path = 'noncat' # 새로운 cols 를 기존 cum/concat 에 붙이려는 경우\n","concat_path = 'concat'\n","cum_path = \"cum\"\n","# cum_path = \"non_cum\"  # non_cum 으로 진행하는 경우, row concat 용도이기 때문에 noncat -> concat 으로 변경 (base cols 를 모두 담고 있음)\n","\n","load_path = os.path.join(db_path, cum_path, date)\n","save_path = os.path.join(save_path, save_dir_path, concat_path, cum_path, date)\n","\n","os.makedirs(save_path, exist_ok=True)\n","\n","file_list = os.listdir(load_path)\n","exist_list = os.listdir(save_path)\n","# break\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","\n","    if \"_1m\" not in key:\n","      continue\n","\n","    # feather_name = key.replace(\".ftr\", \"_%.ftr\" % save_dir_path)\n","    feather_name = key.replace(\"_1m\", \"\")\n","    feather_path = os.path.join(save_path, feather_name)\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    df = pd.read_feather(os.path.join(load_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","    res_df = sync_check_make(df)\n","\n","    res_df.reset_index().to_feather(feather_path, compression='lz4')\n","    print(feather_path, \"saved succesfully !\")"]},{"cell_type":"markdown","metadata":{"id":"YxCPUzoyidwH"},"source":["#### just add col to loaded df"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"odqVwQHpYo1M","colab":{"base_uri":"https://localhost:8080/","height":620},"executionInfo":{"status":"ok","timestamp":1650611121685,"user_tz":-540,"elapsed":4513,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"9a0036b5-e5f8-4bdd-9aca-eb7c50e16366"},"outputs":[{"output_type":"stream","name":"stdout","text":["3T ->                          open     high      low    close\n","index                                                  \n","2022-02-17 10:27:00  3148.85  3150.08  3146.38  3146.76\n","5T ->                          open     high      low    close\n","index                                                  \n","2022-02-17 10:25:00  3146.85  3150.08  3145.44  3146.76\n","15T ->                          open    high      low    close\n","index                                                 \n","2022-02-17 10:15:00  3143.99  3151.0  3139.14  3146.76\n","30T ->                         open     high      low    close\n","index                                                 \n","2022-02-17 10:00:00  3148.8  3158.68  3139.14  3146.76\n","H ->                         open     high      low    close\n","index                                                 \n","2022-02-17 10:00:00  3148.8  3158.68  3139.14  3146.76\n","4H ->                         open     high     low    close\n","index                                                \n","2022-02-17 09:00:00  3121.8  3158.68  3120.0  3146.76\n","D ->                         open     high     low    close\n","index                                                \n","2022-02-17 09:00:00  3121.8  3158.68  3120.0  3146.76\n","body_rel_ratio phase done\n"]},{"output_type":"execute_result","data":{"text/plain":["                         dc_upper_3T20  dc_lower_3T20  dc_base_3T20  dc_upper_H20  dc_lower_H20  dc_base_H20  dc_upper_15T4_br  dc_lower_15T4_br   brr_15T  body_rel_ratio_15T\n","index                                                                                                                                                                         \n","2022-02-17 10:25:59.999        3158.68        3129.66      3144.170       3186.79       3040.42     3113.605         -4.303249         -9.111913  0.575884            0.575884\n","2022-02-17 10:26:59.999        3158.68        3129.66      3144.170       3186.79       3040.42     3113.605         -4.303249         -9.111913  0.575884            0.575884\n","2022-02-17 10:27:59.999        3158.68        3131.05      3144.865       3186.79       3040.42     3113.605         -4.303249         -9.111913  0.575884            0.575884\n","2022-02-17 10:28:59.999        3158.68        3131.05      3144.865       3186.79       3040.42     3113.605         -4.303249         -9.111913  0.575884            0.575884\n","2022-02-17 10:29:59.999        3158.68        3131.05      3144.865       3186.79       3040.42     3113.605         -4.303249         -9.111913  0.575884            0.575884"],"text/html":["\n","  <div id=\"df-341f4367-04ad-4c8e-a971-72a6a16d39da\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>dc_upper_3T20</th>\n","      <th>dc_lower_3T20</th>\n","      <th>dc_base_3T20</th>\n","      <th>dc_upper_H20</th>\n","      <th>dc_lower_H20</th>\n","      <th>dc_base_H20</th>\n","      <th>dc_upper_15T4_br</th>\n","      <th>dc_lower_15T4_br</th>\n","      <th>brr_15T</th>\n","      <th>body_rel_ratio_15T</th>\n","    </tr>\n","    <tr>\n","      <th>index</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2022-02-17 10:25:59.999</th>\n","      <td>3158.68</td>\n","      <td>3129.66</td>\n","      <td>3144.170</td>\n","      <td>3186.79</td>\n","      <td>3040.42</td>\n","      <td>3113.605</td>\n","      <td>-4.303249</td>\n","      <td>-9.111913</td>\n","      <td>0.575884</td>\n","      <td>0.575884</td>\n","    </tr>\n","    <tr>\n","      <th>2022-02-17 10:26:59.999</th>\n","      <td>3158.68</td>\n","      <td>3129.66</td>\n","      <td>3144.170</td>\n","      <td>3186.79</td>\n","      <td>3040.42</td>\n","      <td>3113.605</td>\n","      <td>-4.303249</td>\n","      <td>-9.111913</td>\n","      <td>0.575884</td>\n","      <td>0.575884</td>\n","    </tr>\n","    <tr>\n","      <th>2022-02-17 10:27:59.999</th>\n","      <td>3158.68</td>\n","      <td>3131.05</td>\n","      <td>3144.865</td>\n","      <td>3186.79</td>\n","      <td>3040.42</td>\n","      <td>3113.605</td>\n","      <td>-4.303249</td>\n","      <td>-9.111913</td>\n","      <td>0.575884</td>\n","      <td>0.575884</td>\n","    </tr>\n","    <tr>\n","      <th>2022-02-17 10:28:59.999</th>\n","      <td>3158.68</td>\n","      <td>3131.05</td>\n","      <td>3144.865</td>\n","      <td>3186.79</td>\n","      <td>3040.42</td>\n","      <td>3113.605</td>\n","      <td>-4.303249</td>\n","      <td>-9.111913</td>\n","      <td>0.575884</td>\n","      <td>0.575884</td>\n","    </tr>\n","    <tr>\n","      <th>2022-02-17 10:29:59.999</th>\n","      <td>3158.68</td>\n","      <td>3131.05</td>\n","      <td>3144.865</td>\n","      <td>3186.79</td>\n","      <td>3040.42</td>\n","      <td>3113.605</td>\n","      <td>-4.303249</td>\n","      <td>-9.111913</td>\n","      <td>0.575884</td>\n","      <td>0.575884</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-341f4367-04ad-4c8e-a971-72a6a16d39da')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-341f4367-04ad-4c8e-a971-72a6a16d39da button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-341f4367-04ad-4c8e-a971-72a6a16d39da');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":145}],"source":["res_df_ = sync_check_make(res_df_)  # suffix duplication 유의\n","res_df_.tail().iloc[:, -10:]\n","# res_df_.dtypes"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3SKglsQCj5_x"},"outputs":[],"source":["test_df_ = sync_check_make(res_df_.iloc[-4000:])  # suffix duplication 유의\n","test_df_.tail().iloc[:, -10:]"]},{"cell_type":"code","source":["# ------ validation ------ #\n","# res_df_.cppr_15T.describe()\n","print((res_df_.open_15T.to_numpy() - res_df_.close_15T.to_numpy())[-10:])\n","print((res_df_.dc_upper_15T4.to_numpy() - res_df_.dc_lower_15T4.to_numpy())[-10:])"],"metadata":{"id":"gOQxwYqK0jCS"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3261,"status":"ok","timestamp":1650611129318,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"XrgJPQRuisCa","outputId":"a9a2387a-4a5c-4705-c62b-70d6c18372e6"},"outputs":[{"output_type":"stream","name":"stdout","text":["./candlestick_concated/database_bn/cum/2022-02-17/2022-02-17 ETHUSDT.ftr saved !\n"]}],"source":["# ------------ save current res_df ------------ #\n","ftr_path = os.path.join(save_path.replace(\"res_df\", \"database_bn\"), \"cum\", date)\n","ftr_full_path = os.path.join(ftr_path, key)\n","\n","res_df_.reset_index().to_feather(ftr_full_path, compression='lz4')  # key 잘 확인하고 저장\n","print(ftr_full_path, 'saved !')"]},{"cell_type":"markdown","metadata":{"id":"E0n53hflJbnp"},"source":["### htf candle check"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":489,"status":"ok","timestamp":1642148504926,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"6xW0yugCWvGz","outputId":"58106ff9-9709-4a62-bca2-1f6795d13322"},"outputs":[{"name":"stdout","output_type":"stream","text":["itv_ : 3T\n","                        open     high      low    close\n","index                                                  \n","2022-01-10 15:06:00  3169.97  3170.22  3159.51  3161.22\n","2022-01-10 15:09:00  3161.22  3163.98  3161.22  3163.82\n","2022-01-10 15:12:00  3163.82  3163.83  3156.02  3160.49\n","2022-01-10 15:15:00  3160.51  3164.29  3159.01  3162.93\n","2022-01-10 15:18:00  3163.02  3164.29  3162.41  3164.28\n","                            open     high      low    close    volume\n","index                                                                \n","2022-01-10 15:08:59.999  3169.97  3170.22  3159.51  3161.22  4241.449\n","2022-01-10 15:11:59.999  3161.22  3163.98  3161.22  3163.82  1143.874\n","2022-01-10 15:14:59.999  3163.82  3163.83  3156.02  3160.49  2135.292\n","2022-01-10 15:17:59.999  3160.51  3164.29  3159.01  3162.93  1011.598\n","2022-01-10 15:20:59.999  3163.02  3164.29  3162.41  3163.82   466.868\n"]}],"source":["itv_list = ['3T', '5T', '15T', '30T', '1H', '4H']\n","comp_df_list = [second_df, third_df, fourth_df, fifth_df, sixth_df, seventh_df]\n","offset_list = ['1h', '2min', '2min', '2min', '2min', '2min']\n","# itv_list = ['4H']\n","# comp_df_list = [seventh_df]\n","\n","slice_len = 100\n","for itv_, comp_df_, offset in zip(itv_list, comp_df_list, offset_list):\n","\n","  print(\"itv_ :\", itv_)\n","\n","  # df = h_candle_v2(df, '3T')\n","  # end_ts = \n","  h_res_df = df.resample(itv_, offset=offset).agg({\n","          'open': 'first',\n","          'high': 'max',\n","          'low': 'min',\n","          'close': 'last'\n","      })\n","\n","  #   앞은 길이가 다르고, 뒤에서부터 잘라서 비교    #\n","  #   last_row 빼고는 동일, 4h 제외\n","  # print(df.tail())\n","  print(h_res_df.tail())\n","  print(comp_df_.tail())\n","  # # print(h_res_df.head())\n","  # # print(second_df.head())\n","\n","  # print(len(h_res_df))\n","  # print(len(second_df))\n","\n","  # print(h_res_df.values[-slice_len:])\n","  # print(second_df.iloc[:, :4].values[-slice_len:])\n","  # print(np.argwhere(h_res_df.values[-slice_len:] != comp_df_.iloc[:, :4].values[-slice_len:]))\n","  # print()\n","  break"]},{"cell_type":"markdown","metadata":{"id":"jTN3M842Suzl"},"source":["## concat & save new res_df"]},{"cell_type":"markdown","metadata":{"id":"MlFkpO1MSuzl"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"U-3QkfbFSuzl"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","dict_name = \"2021-07-01 ETHUSDT_bb15m_backi2_res_dfs.pkl\"\n","\n","#     load with pickle    #\n","with open(save_path + dict_name, 'rb') as f:\n","  saved_res_df_dict = pickle.load(f)\n","\n","print(dict_name, \"loaded !\")\n","res_df_files = os.listdir(save_path)\n","res_df_files.reverse()\n","\n","print(res_df_files)\n","\n","res_df_dict = {}\n","\n","base_postfix = '_bb15m_backi2.xlsx'\n","new_postfix = '_st1h_backi2.xlsx'\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for k_i, key in enumerate(res_df_files):\n","\n","  if '2021-07-01'.upper() not in key:\n","  # if '2021-10-10'.upper() not in key:\n","    continue\n","\n","  # if \"link\".upper() not in key:\n","  # if \"btc\".upper() not in key:\n","  #   continue\n","\n","  if new_postfix not in key:\n","    continue\n","\n","  # if key in \n","\n","  if sample_cnt == max_cnt:\n","    dict_name = \"%s_res_dfs.pkl\" % key.split(\".\")[0]\n","    print(\"dict_name :\", dict_name)\n","\n","  base_df = saved_res_df_dict[key.replace(new_postfix, base_postfix)]\n","  # base_df = pd.read_excel(save_path + key.replace(new_postfix, base_postfix), index_col=0)  \n","  res_df = pd.read_excel(save_path + key, index_col=0)  \n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  droped_new_res_df.head()\n","  # break\n","\n","  # res_df_dict[key] = res_df\n","  res_df_dict[key] = droped_new_res_df\n","  print(key, \"saved to dict !\")\n","\n","  #     save with pickle    #\n","  with open(save_path + dict_name, 'wb') as f:\n","    pickle.dump(res_df_dict, f)\n","\n","  sample_cnt -= 1\n","\n","  if sample_cnt <= 0:\n","    break\n"]},{"cell_type":"markdown","metadata":{"id":"t1E_eAyPSuzm"},"source":["### new col to latest feather (1m_indi. only)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xyI5NrM7Suzm"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","cum_dir = \"cum\"\n","\n","new_dir_path = \"rsi_backi2\"\n","base_dir_path = \"bbdc3m_backi2\"\n","\n","new_date = '2021-11-17'\n","\n","\n","\n","#     load ftr list    #\n","base_save_path = os.path.join(save_path, base_dir_path, \"concat/cum\", new_date)\n","new_save_path = base_save_path.replace(base_dir_path, new_dir_path)\n","\n","#     save to (new) cum dir    #\n","#      1. if dir. not exists, makedir\n","os.makedirs(new_save_path, exist_ok=True)\n","\n","ftr_list = [s for s in os.listdir(base_save_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_save_path, key), columns=None, use_threads=True).set_index(\"index\")\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  droped_new_res_df = sync_check(base_df)\n","\n","  # new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # # new_res_df.head()\n","\n","  # intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  # droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break\n","\n","  droped_new_res_df.reset_index().to_feather(os.path.join(new_save_path, key), compression='lz4')\n","\n","  print(os.path.join(new_save_path, key), \"saved !\")\n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"markdown","metadata":{"id":"nUs4fjVHSuzl"},"source":["### feather ver. (col concat)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2001,"status":"ok","timestamp":1642739652513,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"6cu-Y82iSuzl","outputId":"273507b8-0d33-48b5-d9c5-00547688ef73"},"outputs":[{"name":"stdout","output_type":"stream","text":["['2022-01-10 ETHUSDT.ftr']\n","./candlestick_concated/res_df/st3m_backi2/concat/cum/2022-01-10/2022-01-10 ETHUSDT.ftr saved !\n"]}],"source":["new_dir_path = \"st3m_backi2\"\n","base_dir_path = \"bb1d_backi2\"\n","\n","# new_date = \"2021-11-17\"\n","new_date = \"2022-01-10\"\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","save_path = './candlestick_concated/res_df/'\n","save_path = os.path.join(save_path, new_dir_path, \"concat/cum\", new_date)   \n","# save_path = os.path.join(save_path, new_dir_path, \"concat/non_cum\", new_date)   # row col 하려면 concat 맞음, noncum 사용\n","os.makedirs(save_path, exist_ok=True)\n","\n","\n","#     load ftr list    #\n","# ftr_list = [s for s in os.listdir(os.path.join(save_path, new_dir_path)) if \"ftr\" in s]\n","\n","noncat_path = save_path.replace(\"concat/\", \"noncat/\")\n","ftr_list = [s for s in os.listdir(noncat_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","  try:\n","\n","    #       read from base postfix's directory    #\n","    base_df = pd.read_feather(os.path.join(save_path.replace(new_dir_path, base_dir_path), key), columns=None, use_threads=True).set_index(\"index\")\n","    res_df = pd.read_feather(os.path.join(noncat_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","    # print(base_df.head())\n","    # print(res_df.head())\n","    # break\n","\n","    new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","    # new_res_df.head()\n","\n","    droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","    # droped_new_res_df.head()\n","    # break\n","\n","    droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","    # res_df_dict[key] = res_df\n","    # res_df_dict[key] = droped_new_res_df\n","    print(os.path.join(save_path, key), \"saved !\")\n","  \n","  except Exception as e:\n","    print(\"error occured ! :\", e)\n","  \n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"markdown","metadata":{"id":"WVAKq3i8Suzm"},"source":["### feather ver. (row concat) , database cum 도 호환가능"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7893,"status":"ok","timestamp":1645188189702,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"XG2p9OhhSuzm","outputId":"e67874ba-0710-4f38-966f-5ea7d42403cb"},"outputs":[{"name":"stdout","output_type":"stream","text":["['2022-02-17 ETHUSDT_1m.ftr']\n","                            open     high     low    close  volume\n","index                                                             \n","2019-11-27 16:45:59.999   146.00   146.00   146.0   146.00   0.010\n","2022-02-17 10:29:59.999  3146.86  3147.22  3146.4  3146.76  26.727\n","continuity checked !\n","./candlestick_concated/database_bn/cum/2022-02-17/2022-02-17 ETHUSDT_1m.ftr saved !\n"]}],"source":["save_path = './candlestick_concated/res_df/'        # cols 추가된 cum db 에 new_row's cols 기준으로 합치는 경우\n","save_path = './candlestick_concated/database_bn/'   # ohlcv cum db 만들 경우\n","\n","base_date = '2022-01-10'\n","new_date = '2022-02-17'\n","\n","#     load ftr list    #\n","if \"database\" in save_path:\n","  base_dir_path = \"\"\n","  new_dir_path = \"\"\n","  concat_dir = \"\"\n","else:\n","  base_dir_path = \"sar_backi2\"\n","  new_dir_path = \"bb4h_backi2\"  # dir_path 가 base / new 서로 달라질 수 있어서 분할함\n","  concat_dir = \"concat\"\n","\n","base_date_path = os.path.join(save_path, base_dir_path, concat_dir, \"cum\", base_date)      # 기존 cum db 와 new_date db 를 cum 진행\n","# base_date_path = os.path.join(save_path, base_dir_path, concat_dir, \"non_cum\", base_date)    # non_cum db 와 new_date db 를 cum 진행\n","\n","# new_date_path = os.path.join(save_path, new_dir_path, concat_dir, \"cum\", new_date)      # 상황별로 직접 선택해야할 듯\n","new_date_path = os.path.join(save_path, new_dir_path, concat_dir, \"non_cum\", new_date)\n","\n","\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","save_path = new_date_path.replace(\"non_cum\", \"cum\")   # non_cum 아니여도 무관\n","os.makedirs(save_path, exist_ok=True)   # noncat / concat 두가지 경우 존재가능할 것\n","# os.makedirs(os.path.join(save_path, dir_path, \"noncat/cum\", new_date), exist_ok=True)\n","\n","\n","ftr_list = [s for s in os.listdir(new_date_path) if \"ftr\" in s]\n","exist_list = os.listdir(save_path)\n","print(ftr_list)\n","# break\n","\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:   # date rejection\n","    continue\n","  if '1m' not in key:  # itv rejection\n","    continue\n","\n","  # if key in exist_list:\n","  #   print(key, \"already exist !\")\n","  #   continue\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_date_path, key.replace(new_date, base_date)), columns=None, use_threads=True).set_index(\"index\")   # key 에 new_date 담겨있음\n","  res_df = pd.read_feather(os.path.join(new_date_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break  \n","  \n","  print(droped_new_res_df.iloc[[0, -1]])  \n","\n","  # ------------- verify df continuity directly itv by itv ------------- #\n","  true_continue = True\n","  if \"_\" in key:\n","\n","    interval = key.split(\".\")[0].split(\"_\")[-1] \n","    itv_num = to_itvnum(interval)\n","\n","    # verified_df = consecutive_df(droped_new_res_df, to_itvnum(interval))\n","    # verified_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","    # res_df_dict[key] = res_df\n","    # res_df_dict[key] = droped_new_res_df  \n","\n","    np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","    ideal_ts_gap = 60 * itv_num\n","\n","    for ts_i in range(len(np_idx_ts)):\n","      \n","      if ts_i != 0:\n","        ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","\n","        if ts_gap > ideal_ts_gap or ts_gap < ideal_ts_gap:\n","        # if ts_gap == ideal_ts_gap:\n","          print(droped_new_res_df.index[ts_i - 1])\n","          print(droped_new_res_df.index[ts_i])\n","          # print(ts_gap)\n","          print(\"------------------ unideal ts_gap ------------------\")\n","          true_continue = False\n","\n","    print(\"continuity checked !\")\n","\n","  if true_continue:\n","    droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","  print(os.path.join(save_path, key), \"saved !\")\n","  \n"]},{"cell_type":"markdown","metadata":{"id":"L7l5CTJfSuzn"},"source":["### check continuity"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"w-5jn9opBl73"},"outputs":[],"source":["droped_new_res_df = res_df_"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4621,"status":"ok","timestamp":1649653761880,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"nGzMGyC3Suzn","outputId":"5007eef3-8a2f-4085-bf3d-f2b415395bc4"},"outputs":[{"name":"stdout","output_type":"stream","text":["                            open     high     low    close  volume  dc_upper_5T  dc_lower_5T  dc_base_5T  dc_upper_15T  dc_lower_15T  dc_base_15T  bb_upper_5T  bb_lower_5T  bb_upper_15T  bb_lower_15T\n","index                                                                                                                                                                                                  \n","2019-11-27 16:45:59.999   146.00   146.00   146.0   146.00   0.010          NaN          NaN         NaN           NaN           NaN          NaN          NaN          NaN           NaN           NaN\n","2022-02-17 10:29:59.999  3146.86  3147.22  3146.4  3146.76  26.727      3158.68      3131.05    3144.865       3174.54       3114.98      3144.76  3147.061024  3127.711976   3153.606702   3132.698298\n","[1.57487316e+09 1.57487322e+09 1.57487328e+09 1.57487334e+09 1.57487340e+09 1.57487346e+09 1.57487352e+09 1.57487358e+09 1.57487364e+09 1.57487370e+09]\n"]}],"source":["# print(droped_new_res_df.columns)\n","\n","print(droped_new_res_df.iloc[[0, -1]])\n","\n","np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","\n","print(np_idx_ts[:10])\n","for ts_i in range(len(np_idx_ts)):\n","  \n","  if ts_i != 0:\n","    ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","\n","    if ts_gap > 60 or ts_gap < 60:\n","\n","      print(\"invalid ts_gap found !\")\n","    # if ts_gap == 60:\n","      print(droped_new_res_df.index[ts_i - 1])\n","      print(droped_new_res_df.index[ts_i])\n","      # print(ts_gap)\n","      print()\n"]},{"cell_type":"markdown","metadata":{"id":"x_XGJqBi8Jex"},"source":["### check length of front missing value + middle_data non_missing validity"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":311,"status":"ok","timestamp":1641887318959,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"yRNwqVeAu8X8","outputId":"fb236bde-4527-4bc7-eac4-4bee42532c5a"},"outputs":[{"name":"stdout","output_type":"stream","text":["2.167361111111111\n","38\n"]}],"source":["#       1. new_date 의 시작 timeidx 와 base_date end timeidx 의 최소 days' gap     #\n","#       2. new_date 의 시작 부분 indi. value 는 np.nan 으로 채워질 거기 때문에 계산해야함    #\n","\n","df_count = droped_new_res_df.count()\n","len_missing = df_count.max() - df_count.min()\n","print(len_missing / 1440)\n","\n","#       3. \n","missing_sliced_df = droped_new_res_df.iloc[len_missing:]\n","df_count2 = missing_sliced_df.count()\n","# print(df_count2)\n","print((df_count2.max() - df_count2.min()))    # this value should be zero !\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"AY7E2_hTBsyM"},"outputs":[],"source":["# df_count2.index[df_count2.argmin()]\n","# missing_sliced_df.head(5)\n","\n","stay_missed = np.sum(pd.isnull(missing_sliced_df), axis=0)\n","print(stay_missed)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"p9yqewOw9g33"},"outputs":[],"source":["stay_missed_cols = stay_missed[stay_missed != 0].index\n","\n","for sm_col in stay_missed_cols:\n","  \n","  row_idx = np.argwhere(pd.isnull(missing_sliced_df[sm_col].values))\n","\n","  plt.figure(figsize=(3,3))\n","  plt.plot(row_idx)\n","  plt.ylim(0, len(missing_sliced_df))\n","  plt.title(sm_col)\n","\n","  plt.show()\n"]},{"cell_type":"markdown","metadata":{"id":"MSUY4nnku3s9"},"source":["## legacy"]},{"cell_type":"markdown","metadata":{"id":"epgS5Dksu-HX"},"source":["### mv files"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"aJcVpEdrslA5"},"outputs":[],"source":["df_path = './candlestick_concated/survey_df_v2'\n","files_ = os.listdir(df_path)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cEKyEYkotFDy"},"outputs":[],"source":["dirs = [file_ for file_ in files_ if not file_.endswith('.ftr')]\n","files = [file_ for file_ in files_ if file_.endswith('.ftr')]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4,"status":"ok","timestamp":1644111921194,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"IgM79tcxtPVZ","outputId":"84305b35-eb52-49fc-d5fd-fdbc64cc8679"},"outputs":[{"data":{"text/plain":["['2022-01-10 ETHUSDT', '2022-01-10 ETHUSDT_all', '2022-02-04 SOLUSDT']"]},"execution_count":6,"metadata":{},"output_type":"execute_result"}],"source":["dirs"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"M767iRtwtRQP"},"outputs":[],"source":["def move_fn(dir_, file_):\n","  src_path = os.path.join(df_path, file_)\n","  dst_path = os.path.join(df_path, dir_, file_)\n","  shutil.move(src_path, dst_path)\n","  print(\"moved to {}\".format(dst_path))\n","\n","_ = [move_fn('2022-01-10 ETHUSDT_all', file_) for file_ in files if 'eth'.upper() in file_]\n","# sols\n"]},{"cell_type":"markdown","metadata":{"id":"Ci_jUnNTZbm9"},"source":["### load data (old)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":22503,"status":"ok","timestamp":1638246127510,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"_bXyS2yrZYC6","outputId":"b24a8a66-48b1-42b5-aa79-63f5a8542bac"},"outputs":[{"name":"stdout","output_type":"stream","text":["['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr']\n","['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 LTCUSDT.ftr']\n","['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 ETHUSDT.ftr']\n","['2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr']\n","['2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-08-31 SUSHIUSDT.xlsx', '2021-08-31 CVCUSDT.xlsx', '2021-08-31 BTSUSDT.xlsx', '2021-08-31 HOTUSDT.xlsx', '2021-08-31 ZRXUSDT.xlsx', '2021-08-31 QTUMUSDT.xlsx', '2021-08-31 IOTAUSDT.xlsx', '2021-08-31 BTCBUSD.xlsx', '2021-08-31 WAVESUSDT.xlsx', '2021-08-31 ADAUSDT.xlsx', '2021-08-31 LITUSDT.xlsx', '2021-08-31 XTZUSDT.xlsx', '2021-08-31 BNBUSDT.xlsx', '2021-08-31 AKROUSDT.xlsx', '2021-08-31 HNTUSDT.xlsx', '2021-08-31 ETCUSDT.xlsx', '2021-08-31 XMRUSDT.xlsx', '2021-08-31 YFIUSDT.xlsx', '2021-08-31 ETHUSDT.xlsx', '2021-08-31 ALICEUSDT.xlsx', '2021-08-31 ALPHAUSDT.xlsx', '2021-08-31 SFPUSDT.xlsx', '2021-08-31 REEFUSDT.xlsx', '2021-08-31 BATUSDT.xlsx', '2021-08-31 DOGEUSDT.xlsx', '2021-08-31 TRXUSDT.xlsx', '2021-08-31 RLCUSDT.xlsx', '2021-08-31 BTCSTUSDT.xlsx', '2021-08-31 STORJUSDT.xlsx', '2021-08-31 SNXUSDT.xlsx', '2021-08-31 XLMUSDT.xlsx', '2021-08-31 NEOUSDT.xlsx', '2021-08-31 UNFIUSDT.xlsx', '2021-08-31 SANDUSDT.xlsx', '2021-08-31 DASHUSDT.xlsx', '2021-08-31 KAVAUSDT.xlsx', '2021-08-31 RUNEUSDT.xlsx', '2021-08-31 CTKUSDT.xlsx', '2021-08-31 LINKUSDT.xlsx', '2021-08-31 CELRUSDT.xlsx', '2021-08-31 RSRUSDT.xlsx', '2021-08-31 DGBUSDT.xlsx', '2021-08-31 SKLUSDT.xlsx', '2021-08-31 RENUSDT.xlsx', '2021-08-31 TOMOUSDT.xlsx', '2021-08-31 MTLUSDT.xlsx', '2021-08-31 LTCUSDT.xlsx', '2021-08-31 DODOUSDT.xlsx', '2021-08-31 EGLDUSDT.xlsx', '2021-08-31 KSMUSDT.xlsx', '2021-08-31 ONTUSDT.xlsx', '2021-08-31 VETUSDT.xlsx', '2021-08-31 TRBUSDT.xlsx', '2021-08-31 MANAUSDT.xlsx', '2021-08-31 COTIUSDT.xlsx', '2021-08-31 CHRUSDT.xlsx', '2021-08-31 ETHUSDT_210924.xlsx', '2021-08-31 BAKEUSDT.xlsx', '2021-08-31 GRTUSDT.xlsx', '2021-08-31 FLMUSDT.xlsx', '2021-08-31 EOSUSDT.xlsx', '2021-08-31 OGNUSDT.xlsx', '2021-08-31 SCUSDT.xlsx', '2021-08-31 BALUSDT.xlsx', '2021-08-31 STMXUSDT.xlsx', '2021-08-31 BTTUSDT.xlsx', '2021-08-31 LUNAUSDT.xlsx', '2021-08-31 DENTUSDT.xlsx', '2021-08-31 KNCUSDT.xlsx', '2021-08-31 SRMUSDT.xlsx', '2021-08-31 ENJUSDT.xlsx', '2021-08-31 ZENUSDT.xlsx', '2021-08-31 ATOMUSDT.xlsx', '2021-08-31 NEARUSDT.xlsx', '2021-08-31 BCHUSDT.xlsx', '2021-08-31 IOSTUSDT.xlsx', '2021-08-31 HBARUSDT.xlsx', '2021-08-31 ZECUSDT.xlsx', '2021-08-31 1000SHIBUSDT.xlsx', '2021-08-31 TLMUSDT.xlsx', '2021-08-31 BZRXUSDT.xlsx', '2021-08-31 ETHBUSD.xlsx', '2021-08-31 AAVEUSDT.xlsx', '2021-08-31 GTCUSDT.xlsx', '2021-08-31 ALGOUSDT.xlsx', '2021-08-31 ICPUSDT.xlsx', '2021-08-31 BTCUSDT_210924.xlsx', '2021-08-31 LRCUSDT.xlsx', '2021-08-31 AVAXUSDT.xlsx', '2021-08-31 MATICUSDT.xlsx', '2021-08-31 1INCHUSDT.xlsx', '2021-08-31 MKRUSDT.xlsx', '2021-08-31 THETAUSDT.xlsx', '2021-08-31 UNIUSDT.xlsx', '2021-08-31 LINAUSDT.xlsx', '2021-08-31 RVNUSDT.xlsx', '2021-08-31 FILUSDT.xlsx', '2021-08-31 NKNUSDT.xlsx', '2021-08-31 DEFIUSDT.xlsx', '2021-08-31 COMPUSDT.xlsx', '2021-08-31 BTCDOMUSDT.xlsx', '2021-08-31 SOLUSDT.xlsx', '2021-08-31 BTCUSDT.xlsx', '2021-08-31 OMGUSDT.xlsx', '2021-08-31 ICXUSDT.xlsx', '2021-08-31 BLZUSDT.xlsx', '2021-08-31 FTMUSDT.xlsx', '2021-08-31 YFIIUSDT.xlsx', '2021-08-31 KEEPUSDT.xlsx', '2021-08-31 BANDUSDT.xlsx', '2021-08-31 XRPUSDT.xlsx', '2021-08-31 SXPUSDT.xlsx', '2021-08-31 CRVUSDT.xlsx', '2021-08-31 BELUSDT.xlsx', '2021-08-31 DOTUSDT.xlsx', '2021-08-31 XEMUSDT.xlsx', '2021-08-31 ONEUSDT.xlsx', '2021-08-31 ZILUSDT.xlsx', '2021-08-31 AXSUSDT.xlsx', '2021-08-31 OCEANUSDT.xlsx', '2021-08-31 CHZUSDT.xlsx', '2021-08-31 ANKRUSDT.xlsx', '2021-08-31 SUSHIUSDT_res_dfs.pkl', '2021-07-01 ADAUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr']\n","['2021-07-01 BTCUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr']\n","['2021-02-07 BTC.xlsx', '2021-02-07 ETH.xlsx', '2021-02-11 BCHUSDT.xlsx', '2021-02-11 XRPUSDT.xlsx', '2021-02-11 EOSUSDT.xlsx', '2021-02-11 LTCUSDT.xlsx', '2021-02-11 ETCUSDT.xlsx', '2021-02-11 LINKUSDT.xlsx', '2021-02-11 XLMUSDT.xlsx', '2021-02-11 ADAUSDT.xlsx', '2021-02-11 XMRUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr']\n","['2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx']\n"]}],"source":["interval = '1m'\n","date_path = './candlestick_concated/%s/quant_v2/' % interval\n","file_list = os.listdir(date_path)\n","print((file_list))\n","\n","interval2 = '3m'\n","date_path2 = './candlestick_concated/%s/quant_v2/' % interval2\n","file_list2 = os.listdir(date_path2)\n","print((file_list2))\n","\n","interval3 = '5m'\n","date_path3 = './candlestick_concated/%s/quant_v2/' % interval3\n","file_list3 = os.listdir(date_path3)\n","print((file_list3))\n","\n","interval4 = '15m'\n","date_path4 = './candlestick_concated/%s/quant_v2/' % interval4\n","file_list4 = os.listdir(date_path4)\n","print((file_list4))\n","\n","interval5 = '30m'\n","date_path5 = './candlestick_concated/%s/quant_v2/' % interval5\n","file_list5 = os.listdir(date_path5)\n","print((file_list5))\n","\n","interval6 = '1h'\n","date_path6 = './candlestick_concated/%s/quant_v2/' % interval6\n","file_list6 = os.listdir(date_path6)\n","print((file_list6))\n","\n","interval7 = '4h'\n","date_path7 = './candlestick_concated/%s/quant_v2/' % interval7\n","file_list7 = os.listdir(date_path7)\n","print((file_list7))\n","\n","interval8 = '1d'\n","date_path8 = './candlestick_concated/%s/quant_v2/' % interval8\n","file_list8 = os.listdir(date_path8)\n","print((file_list8))"]},{"cell_type":"markdown","metadata":{"id":"M8-EChy0VsDr"},"source":["### cudf"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":414,"status":"ok","timestamp":1638754008241,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"b09qAb1sVtRP","outputId":"3a824202-064a-4544-b791-ffc777bb3f9c"},"outputs":[{"name":"stdout","output_type":"stream","text":["usage: conda [-h] [-V] command ...\n","conda: error: unrecognized arguments: -t=/content/notebooks\n"]}],"source":["# !conda install -c rapidsai-nightly -c nvidia -c numba -c conda-forge \\\n","#     cudf python=3.7 cudatoolkit=11.1 -t=$nb_path"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":413,"status":"ok","timestamp":1638754715310,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"Jnz6i7ZqRnb0","outputId":"207bc57b-a17a-4f67-fb26-24e46e2c6e26"},"outputs":[{"name":"stdout","output_type":"stream","text":["***********************************************************************\n","Woo! Your instance has the right kind of GPU, a Tesla P100-PCIE-16GB!\n","***********************************************************************\n","\n"]}],"source":["# !git clone https://github.com/rapidsai/rapidsai-csp-utils.git\n","!python rapidsai-csp-utils/colab/env-check.py"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4sKA_9Dbg4s2"},"outputs":[],"source":["# This will update the Colab environment and restart the kernel.  Don't run the next cell until you see the session crash.\n","!bash rapidsai-csp-utils/colab/update_gcc.sh\n","import os\n","os._exit(00)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"d1C4pNiBhYHX"},"outputs":[],"source":["# This will install CondaColab.  This will restart your kernel one last time.  Run this cell by itself and only run the next cell once you see the session crash.\n","import condacolab\n","condacolab.install()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":414,"status":"ok","timestamp":1638754863073,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"iGx3ACTvZqck","outputId":"e8379cc4-c325-4fe0-ac46-5fbbd7d38829"},"outputs":[{"name":"stdout","output_type":"stream","text":["✨🍰✨ Everything looks OK!\n"]}],"source":["# you can now run the rest of the cells as normal\n","import condacolab\n","condacolab.check()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oR8s7U8c7C28","outputId":"22be2731-fae1-45fc-f310-e48f60774bb2"},"outputs":[{"name":"stdout","output_type":"stream","text":["Installing RAPIDS Stable 21.10\n","Starting the RAPIDS install on Colab.  This will take about 15 minutes.\n","Collecting package metadata (current_repodata.json): ...working... done\n","Solving environment: ...working... WARNING conda.core.solve:_add_specs(611): pinned spec cudatoolkit=11.1 conflicts with explicit specs.  Overriding pinned spec.\n","failed with initial frozen solve. Retrying with flexible solve.\n","Solving environment: ...working... WARNING conda.core.solve:_add_specs(611): pinned spec cudatoolkit=11.1 conflicts with explicit specs.  Overriding pinned spec.\n","failed with repodata from current_repodata.json, will retry with next repodata source.\n","Collecting package metadata (repodata.json): ...working... done\n"]}],"source":["# Installing RAPIDS is now 'python rapidsai-csp-utils/colab/install_rapids.py <release> <packages>'\n","# The <release> options are 'stable' and 'nightly'.  Leaving it blank or adding any other words will default to stable.\n","# The <packages> option are default blank or 'core'.  By default, we install RAPIDSAI and BlazingSQL.  The 'core' option will install only RAPIDSAI and not include BlazingSQL, \n","!python rapidsai-csp-utils/colab/install_rapids.py stable\n","import os\n","os.environ['NUMBAPRO_NVVM'] = '/usr/local/cuda/nvvm/lib64/libnvvm.so'\n","os.environ['NUMBAPRO_LIBDEVICE'] = '/usr/local/cuda/nvvm/libdevice/'\n","os.environ['CONDA_PREFIX'] = '/usr/local'"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kWsxi4ZpKtGt"},"outputs":[],"source":["import shutil\n","import sys\n","\n","colab_env = \"/usr/lib\"\n","\n","rapids_path = os.path.join(current_path, \"rapidsai-csp-utils/lib\")\n","rapids_libs = os.listdir(rapids_path)\n","print(rapids_libs)\n","# break\n","\n","for lib_ in rapids_libs:\n","  try:\n","    shutil.copy(os.path.join(rapids_path, lib_), os.path.join(colab_env, lib_))\n","    sys.path.append(os.path.join(colab_env, lib_))\n","    print(\"copied to\" + os.path.join(colab_env, lib_))\n","  except Exception as e:\n","    print(e)"]},{"cell_type":"markdown","metadata":{"id":"Iy76iO7gztne"},"source":["### move legacy files"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hMRht32Czwry"},"outputs":[],"source":["# print()\n","cur_dir_list = os.listdir('.')\n","for f in cur_dir_list:\n","  if 'legacy' in f :\n","    # print(f)\n","    if os.path.isdir(current_path + f,):\n","      continue\n","\n","    shutil.move(current_path + f, current_path + 'legacy/' + f)\n","    print(\"moved to\" + current_path + 'legacy/' +  f)"]},{"cell_type":"markdown","metadata":{"id":"5duWn8t4BRyv"},"source":["# IDE platform\n"]},{"cell_type":"markdown","metadata":{"id":"6HOjnZjSgzk1"},"source":["## load ftr_list"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6198,"status":"ok","timestamp":1650633806020,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"7FPBG5Qqg2jB","outputId":"59cd4fb8-6944-4a00-9854-5e0f9f5e9db9"},"outputs":[{"output_type":"stream","name":"stdout","text":["['2022-02-17 ETHUSDT.ftr']\n","2022-02-17 ETHUSDT.ftr loaded !\n","load res_df_ elapsed time : 5.3324902057647705\n"]}],"source":["save_path = './candlestick_concated/database_bn/'\n","\n","# dir_path = \"bb1d_backi2\"\n","# date = \"2022-02-17\"\n","# ftr_path = os.path.join(save_path, dir_path, \"concat/cum\", date)\n","\n","# ------ 1T_database ------ #\n","# date = \"2022-04-08\"\n","# ftr_path = os.path.join(save_path, \"non_cum\", date)\n","\n","date = \"2022-02-17\"\n","ftr_path = os.path.join(save_path, \"cum\", date)\n","\n","# ------ load ftr list ------ #\n","ftr_list = [file_ for file_ in os.listdir(ftr_path) if \"ftr\" in file_ if date in file_ if not '1m' in file_]\n","# ftr_list = [s for s in os.listdir(os.path.join(save_path, dir_path)) if \"ftr\" in s if date in s]\n","print(ftr_list)\n","\n","start_0 = time.time()\n","key = ftr_list[0]  # tempoaray use single key\n","res_df_ = pd.read_feather(os.path.join(ftr_path, key), columns=None, use_threads=True).set_index(\"index\")\n","# print(res_df_.head())\n","print(key, \"loaded !\")\n","print(\"load res_df_ elapsed time :\", time.time() - start_0)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RQH_l4opEh_O"},"outputs":[],"source":["res_df_.dtypes"]},{"cell_type":"markdown","metadata":{"id":"x2yj2SwAXDLp"},"source":["### edit cols"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"x9wkWw15XCAm"},"outputs":[],"source":["col_list = list(res_df_.columns)\n","# # [col_ for col_ in col_list if 'score' in col_]\n","\n","# ------ drop ------ #\n","# res_df_.drop([col_ for col_ in col_list if '_T20' in col_], inplace=True, axis=1)\n","# res_df_.drop([col_ for col_ in col_list if '_T40' in col_], inplace=True, axis=1)\n","# res_df_.drop([col_ for col_ in col_list if 'long_base' in col_], inplace=True, axis=1)\n","# res_df_.drop([col_ for col_ in col_list[5:]], inplace=True, axis=1)\n","\n","# ------ replace ------ #\n","for c_i, col_ in enumerate(col_list):\n","  if 'basis' in col_:\n","#   # if col_[-1] in ['m', 'h', 'd', 'H'] and '_' in col_:eTa_5T\n","#   # if col_[0] in ['h'] and '_' in col_:\n","#   if 'bir_' in col_:\n","\n","    col_list[c_i] = col_.replace('basis', 'base')\n","#     # col_list[c_i] = col_.replace('m', 'T').replace('h', 'H').replace('1T', 'T')\n","#     # col_list[c_i] = col_.replace('1d', 'D')\n","#     # col_list[c_i] = col_.replace('eTa_5T', 'ema_5T')\n","#     # col_list[c_i] = col_list[c_i][1:]\n","#     # print(col_list[c_i][0])\n","res_df_.columns = col_list\n","col_list[-2:] = ['resi_T', 'sup_T']"]},{"cell_type":"markdown","metadata":{"id":"14chOHeXh6JD"},"source":["### lab"]},{"cell_type":"markdown","metadata":{"id":"O87s8_EUakqS"},"source":["#### instant indi."]},{"cell_type":"code","source":["def body_rel_ratio(res_df, c_itv):\n","\n","  itv_num = to_itvnum(c_itv)\n","  \n","  b1_close_ = res_df['close_{}'.format(c_itv)].shift(itv_num).to_numpy()\n","  b1_open_ = res_df['open_{}'.format(c_itv)].shift(itv_num).to_numpy()\n","  b1_body_range = abs(b1_close_ - b1_open_)\n","\n","  close_ = res_df['close_{}'.format(c_itv)].to_numpy()\n","  open_ = res_df['open_{}'.format(c_itv)].to_numpy()\n","  body_range = abs(close_ - open_)\n","  \n","  res_df['body_rel_ratio_{}'.format(c_itv)] = body_range / b1_body_range\n","\n","  return res_df\n","\n","def dc_over_body_ratio(res_df, c_itv, dc_itv, dc_period):\n","  close_ = res_df['close_{}'.format(c_itv)].to_numpy()\n","  open_ = res_df['open_{}'.format(c_itv)].to_numpy()\n","  body_range = abs(close_ - open_)\n","  \n","  dc_upper_ = res_df['dc_upper_{}{}'.format(dc_itv, dc_period)].to_numpy()\n","  dc_lower_ = res_df['dc_lower_{}{}'.format(dc_itv, dc_period)].to_numpy() \n","\n","  res_df['dc_upper_{}{}_br'.format(dc_itv, dc_period)] = (close_ - dc_upper_) / body_range\n","  res_df['dc_lower_{}{}_br'.format(dc_itv, dc_period)] = (dc_lower_ - close_) / body_range\n","\n","  return res_df"],"metadata":{"id":"u3yFd8Dcok5m","executionInfo":{"status":"ok","timestamp":1650633806020,"user_tz":-540,"elapsed":5,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["def candle_pumping_ratio_v2(res_df, c_itv, dc_itv, period):\n","\n","  res_df = dc_line_v3(res_df, dc_itv, dc_period=period)\n","\n","  dc_upper_ = res_df['dc_upper_{}{}'.format(dc_itv, period)].to_numpy()\n","  dc_lower_ = res_df['dc_lower_{}{}'.format(dc_itv, period)].to_numpy()\n","  dc_range = dc_upper_ - dc_lower_\n"," \n","  open_ = res_df['open_{}'.format(c_itv)].to_numpy()\n","  close_ = res_df['close_{}'.format(c_itv)].to_numpy()\n","  body = close_ - open_  # 부호로 양 / 음봉 구분 (양봉 > 0)\n","  \n","  res_df['cppr_{}'.format(c_itv)] = body / dc_range\n","\n","  return res_df\n","\n","\n","# Todo, future_data\n","def candle_pumping_ratio(res_df, c_itv, bb_itv, period):\n","\n","  itv_num = to_itvnum(c_itv)\n","\n","  # 여기에도 v2 처럼 bb_indi. 추가 (자동화)\n","\n","  b1_bb_upper_ = res_df['bb_upper_{}{}'.format(bb_itv, period)].shift(itv_num).to_numpy()\n","  b1_bb_lower_ = res_df['bb_lower_{}{}'.format(bb_itv, period)].shift(itv_num).to_numpy()\n","  bb_range = b1_bb_upper_ - b1_bb_lower_\n","\n","  open_ = res_df['open_{}'.format(c_itv)].to_numpy()\n","  close_ = res_df['close_{}'.format(c_itv)].to_numpy()\n","  body = close_ - open_  # 부호로 양 / 음봉 구분 (양봉 > 0)\n","  \n","  res_df['cppr_{}'.format(c_itv)] = body / bb_range\n","\n","  return res_df\n","\n","\n","def pumping_ratio(res_df, config, itv, period1, period2):\n","\n","  bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","  bb_upper_5T = res_df['bb_upper_5T'].to_numpy()\n","  bb_range = bb_upper_5T - bb_lower_5T\n","\n","  selection_id = config.selection_id\n","  \n","  res_df['short_ppr_{}'.format(selection_id)] = res_df['short_tp_gap_{}'.format(selection_id)].to_numpy() / get_line(res_df['short_wave_high_idx_{}{}{}'.format(itv, period1, period2)].to_numpy(), bb_range)\n","  res_df['long_ppr_{}'.format(selection_id)] = res_df['long_tp_gap_{}'.format(selection_id)].to_numpy() / get_line(res_df['long_wave_low_idx_{}{}{}'.format(itv, period1, period2)].to_numpy(), bb_range)\n"],"metadata":{"id":"JWj02LLGbnji"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OpkclLSzazZ-"},"outputs":[],"source":["def wave_body_ratio(res_df_, itv, period):\n","  dc_upper_ = res_df_['dc_upper_{}{}'.format(itv, period)].to_numpy()\n","  dc_lower_ = res_df_['dc_lower_{}{}'.format(itv, period)].to_numpy()\n","  close_ = res_df_['close_{}'.format(itv)].to_numpy()\n","  open_ = res_df_['open_{}'.format(itv)].to_numpy()\n","\n","  dc_range = dc_upper_ - dc_lower_\n","  body_range = abs(close_ - open_)\n","\n","  res_df_['wave_body_ratio'] = body_range / dc_range\n","  res_df_['dc_upper_body_ratio'] = (np.maximum(close_, open_) - dc_upper_) / body_range\n","  res_df_['dc_lower_body_ratio'] = (dc_lower_) - np.minimum(close_, open_) / body_range\n","\n","  return"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0-zzitQRbnz8"},"outputs":[],"source":["# res_df_['wave_body_ratio'].tail(200)\n","\n","itv = 'H'\n","period = 5\n","wave_body_ratio(res_df_, itv, period)"]},{"cell_type":"markdown","metadata":{"id":"LyGnAMvLYvOZ"},"source":["#### wave_range"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"PV-dlAVZfehP"},"outputs":[],"source":["\n","def get_line(touch_idx, rtc_):\n","  touch_idx_copy = touch_idx.copy()\n","  touch_line = np.full_like(rtc_, np.nan)\n","\n","  nan_idx = np.isnan(touch_idx_copy)\n","  touch_idx_copy[nan_idx] = 0   # for indexing array\n","  touch_line = rtc_[touch_idx_copy.astype(int)]\n","  touch_line[nan_idx] = np.nan   # for true comp.\n","\n","  return touch_line\n","\n","def wave_range_v8(df, period1, period2, ltf_df=None, wave_min_bars=20, wave_max_bars=40):  # v2 for period1 only\n","\n","  itv = pd.infer_freq(df.index)\n","\n","  donchian_channel_v2(df, period1) \n","  donchian_channel_v2(df, period2) \n","  dc_lower_, dc_upper_ = df['dc_lower_{}{}'.format(itv, period1)].to_numpy(), df['dc_upper_{}{}'.format(itv, period1)].to_numpy()\n","  dc_lower2_, dc_upper2_ = df['dc_lower_{}{}'.format(itv, period2)].to_numpy(), df['dc_upper_{}{}'.format(itv, period2)].to_numpy()\n","  \n","  short_base = (dc_lower_ + dc_upper2_) / 2\n","  long_base = (dc_upper_ + dc_lower2_) / 2\n","  df['short_base_{}{}{}'.format(itv, period1, period2)] = short_base\n","  df['long_base_{}{}{}'.format(itv, period1, period2)] = long_base\n","\n","  len_df = len(df)   \n","  short_open_res = np.ones(len_df)\n","  long_open_res = np.ones(len_df)\n","  \n","  data_cols = ['open', 'high', 'low']\n","  open, high, low = [df[col_].to_numpy() for col_ in data_cols]\n","\n","  short_upper_touch_idx = pd.Series(np.where(high >= dc_upper2_, np.arange(len_df), np.nan)).rolling(wave_max_bars, min_periods=1).max().to_numpy()  # min -> max\n","  short_lower_touch_idx = pd.Series(np.where(low <= dc_lower_, np.arange(len_df), np.nan)).rolling(wave_max_bars, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨    \n","  short_open_res *= (high >= short_base) & (short_base >= open) & (short_upper_touch_idx < short_lower_touch_idx)\n","  \n","  short_valid_idx = (short_lower_touch_idx - short_upper_touch_idx) >= wave_min_bars\n","  df['short_wave_high_idx_{}{}{}'.format(itv, period1, period2)] = short_upper_touch_idx\n","  df['short_wave_high_{}{}{}'.format(itv, period1, period2)] = get_line(short_upper_touch_idx, dc_upper2_)\n","  df['short_wave_low_{}{}{}'.format(itv, period1, period2)] = get_line(short_lower_touch_idx, dc_lower_)\n","  df['short_wave_point_{}{}{}'.format(itv, period1, period2)] = short_open_res * short_valid_idx  \n","       \n","  long_lower_touch_idx = pd.Series(np.where(low <= dc_lower2_, np.arange(len_df), np.nan)).rolling(wave_max_bars, min_periods=1).max().to_numpy()     \n","  long_upper_touch_idx = pd.Series(np.where(high >= dc_upper_, np.arange(len_df), np.nan)).rolling(wave_max_bars, min_periods=1).max().to_numpy()\n","  long_open_res *= (open >= long_base) & (long_base >= low) & (long_lower_touch_idx < long_upper_touch_idx)\n","\n","  long_valid_idx = (long_upper_touch_idx - long_lower_touch_idx) >= wave_min_bars  \n","  df['long_wave_low_idx_{}{}{}'.format(itv, period1, period2)] = long_lower_touch_idx\n","  df['long_wave_low_{}{}{}'.format(itv, period1, period2)] = get_line(long_lower_touch_idx, dc_lower2_)\n","  df['long_wave_high_{}{}{}'.format(itv, period1, period2)] = get_line(long_upper_touch_idx, dc_upper_)\n","  df['long_wave_point_{}{}{}'.format(itv, period1, period2)] = long_open_res * long_valid_idx  # multi selection_id 로, formatting 하는 거임\n","\n","  if itv != 'T':\n","    assert ltf_df is not None, \"assert ltf_df is not None\"\n","    join_cols = np.arange(-14, 0 ,1).astype(int)  # points & donchian_channels\n","    ltf_df.drop(df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","    try:\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, df, join_cols), how='inner')\n","    except Exception as e:\n","      print(\"error in wave_range()'s join() :\", e)\n","  else:\n","    ltf_df = df    \n","\n","  return ltf_df\n","  \n","def wave_range_v6(df, period1, period2, ltf_df=None, touch_period=50):  # v2 for period1 only\n","\n","  itv = pd.infer_freq(df.index)\n","\n","  donchian_channel_v2(df, period1) \n","  donchian_channel_v2(df, period2) \n","  dc_lower_, dc_upper_ = df['dc_lower_{}{}'.format(itv, period1)].to_numpy(), df['dc_upper_{}{}'.format(itv, period1)].to_numpy()\n","  dc_lower2_, dc_upper2_ = df['dc_lower_{}{}'.format(itv, period2)].to_numpy(), df['dc_upper_{}{}'.format(itv, period2)].to_numpy()\n","  \n","  short_base = (dc_lower_ + dc_upper2_) / 2\n","  long_base = (dc_upper_ + dc_lower2_) / 2\n","  df['short_base_{}{}{}'.format(itv, period1, period2)] = short_base\n","  df['long_base_{}{}{}'.format(itv, period1, period2)] = long_base\n","\n","  len_df = len(df)   \n","  short_open_res = np.ones(len_df)\n","  long_open_res = np.ones(len_df)\n","  \n","  data_cols = ['open', 'high', 'low']\n","  open, high, low = [df[col_].to_numpy() for col_ in data_cols]\n","\n","  short_a_touch_idx = pd.Series(np.where(high >= dc_upper2_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()  # min -> max\n","  short_b_touch_idx = pd.Series(np.where(low <= dc_lower_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨    \n","  short_open_res *= (high >= short_base) & (short_base >= open) & (short_a_touch_idx < short_b_touch_idx)\n","  df['short_a_touch_idx_{}{}{}'.format(itv, period1, period2)] = short_a_touch_idx\n","  df['short_b_touch_idx_{}{}{}'.format(itv, period1, period2)] = short_b_touch_idx\n","  df['short_a_line_{}{}{}'.format(itv, period1, period2)] = get_line(short_a_touch_idx, dc_upper2_)\n","  df['short_b_line_{}{}{}'.format(itv, period1, period2)] = get_line(short_b_touch_idx, dc_lower_)\n","  df['short_wave_point_{}{}{}'.format(itv, period1, period2)] = short_open_res\n","  \n","  long_a_touch_idx = pd.Series(np.where(low <= dc_lower2_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()       \n","  long_b_touch_idx = pd.Series(np.where(high >= dc_upper_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()    \n","  long_open_res *= (open >= long_base) & (long_base >= low) & (long_a_touch_idx < long_b_touch_idx)\n","  df['long_a_touch_idx_{}{}{}'.format(itv, period1, period2)] = long_a_touch_idx\n","  df['long_b_touch_idx_{}{}{}'.format(itv, period1, period2)] = long_b_touch_idx\n","  df['long_a_line_{}{}{}'.format(itv, period1, period2)] = get_line(long_a_touch_idx, dc_lower2_)\n","  df['long_b_line_{}{}{}'.format(itv, period1, period2)] = get_line(long_b_touch_idx, dc_upper_)\n","  df['long_wave_point_{}{}{}'.format(itv, period1, period2)] = long_open_res\n","\n","  if itv != 'T':\n","    assert ltf_df is not None, \"assert ltf_df is not None\"\n","    join_cols = np.arange(-16, 0 ,1).astype(int)  # points & donchian_channels\n","    ltf_df.drop(df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","    try:\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, df, join_cols), how='inner')\n","    except Exception as e:\n","      print(\"error in wave_range_v5's join() :\", e)\n","  else:\n","    ltf_df = df    \n","\n","  return ltf_df\n","\n","def wave_range_v5(df, period1, period2, ltf_df=None, touch_period=50):  # v2 for period1 only\n","\n","  itv = pd.infer_freq(df.index)\n","\n","  donchian_channel_v2(df, period1) \n","  donchian_channel_v2(df, period2) \n","  dc_lower_, dc_upper_ = df['dc_lower_{}{}'.format(itv, period1)].to_numpy(), df['dc_upper_{}{}'.format(itv, period1)].to_numpy()\n","  dc_lower2_, dc_upper2_ = df['dc_lower_{}{}'.format(itv, period2)].to_numpy(), df['dc_upper_{}{}'.format(itv, period2)].to_numpy()\n","  \n","  short_base = (dc_lower_ + dc_upper2_) / 2\n","  long_base = (dc_upper_ + dc_lower2_) / 2\n","  df['short_base_{}{}{}'.format(itv, period1, period2)] = short_base\n","  df['long_base_{}{}{}'.format(itv, period1, period2)] = long_base\n","\n","  len_df = len(df)   \n","  short_open_res = np.ones(len_df)\n","  long_open_res = np.ones(len_df)\n","  \n","  data_cols = ['open', 'high', 'low']\n","  open, high, low = [df[col_].to_numpy() for col_ in data_cols]\n","\n","  short_a_touch_idx = pd.Series(np.where(high >= dc_upper2_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()  # min -> max\n","  short_b_touch_idx = pd.Series(np.where(low <= dc_lower_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨    \n","  short_open_res *= (high >= short_base) & (short_base >= open) & (short_a_touch_idx < short_b_touch_idx)\n","  df['short_a_touch_idx_{}{}{}'.format(itv, period1, period2)] = short_a_touch_idx\n","  df['short_b_touch_idx_{}{}{}'.format(itv, period1, period2)] = short_b_touch_idx\n","  df['short_wave_point_{}{}{}'.format(itv, period1, period2)] = short_open_res\n","  \n","  long_a_touch_idx = pd.Series(np.where(low <= dc_lower2_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()       \n","  long_b_touch_idx = pd.Series(np.where(high >= dc_upper_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()    \n","  long_open_res *= (open >= long_base) & (long_base >= low) & (long_a_touch_idx < long_b_touch_idx)\n","  df['long_a_touch_idx_{}{}{}'.format(itv, period1, period2)] = long_a_touch_idx\n","  df['long_b_touch_idx_{}{}{}'.format(itv, period1, period2)] = long_b_touch_idx\n","  df['long_wave_point_{}{}{}'.format(itv, period1, period2)] = long_open_res\n","\n","  if itv != 'T':\n","    assert ltf_df is not None, \"assert ltf_df is not None\"\n","    join_cols = np.arange(-12, 0 ,1).astype(int)  # points & donchian_channels\n","    ltf_df.drop(df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","    try:\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, df, join_cols), how='inner')\n","      # ltf_df = ltf_df.merge(to_lower_tf_v2(ltf_df, df, [-7, -6, -5, -4, -3, -2, -1]), how='inner')\n","    except Exception as e:\n","      print(\"error in wave_range_v5's join() :\", e)\n","  else:\n","    ltf_df = df    \n","\n","  return ltf_df\n","\n","def wave_range_v4(df, period1, ltf_df=None, touch_lbperiod=50):  # v2 for period1 only\n","\n","  itv = pd.infer_freq(df.index)\n","\n","  donchian_channel_v2(df, period1) \n","  dc_lower_, dc_upper_ = df['dc_lower_{}{}'.format(itv, period1)].to_numpy(), df['dc_upper_{}{}'.format(itv, period1)].to_numpy()\n","\n","  df['wave_base_{}'.format(itv)] = (dc_lower_ + dc_upper_) / 2  # dc_base touch 사용하면 point 를 좀 더 일찍 잡을 수 있음  \n","  wave_base_ = df['wave_base_{}'.format(itv)].to_numpy()\n","  # short_base_ = df['short_base__{}'.format(itv)].to_numpy()\n","  # long_base_ = df['long_base__{}'.format(itv)].to_numpy()\n","\n","  len_df = len(df)   \n","  short_open_res = np.ones(len_df)\n","  long_open_res = np.ones(len_df)\n","  \n","  data_cols = ['open', 'high', 'low']\n","  open, high, low = [df[col_].to_numpy() for col_ in data_cols]\n","\n","  df['upper_touch_idx_{}{}'.format(itv, period1)] = pd.Series(np.where(high >= dc_upper_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()  # min -> max\n","  df['lower_touch_idx_{}{}'.format(itv, period1)] = pd.Series(np.where(low <= dc_lower_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨    \n","  \n","  upper_touch_idx_ = df['upper_touch_idx_{}{}'.format(itv, period1)].to_numpy()\n","  lower_touch_idx_ = df['lower_touch_idx_{}{}'.format(itv, period1)].to_numpy()\n","\n","  # df['wave_upper_{}'.format(itv)] = pd.Series(get_line(dc_upper_touch_idx, dc_upper_)).ffill().to_numpy() \n","  # df['wave_lower_{}'.format(itv)] = pd.Series(get_line(dc_lower_touch_idx, dc_lower_)).ffill().to_numpy() \n","\n","  short_open_res *= (high >= wave_base_) & (wave_base_ >= open) & (upper_touch_idx_ < lower_touch_idx_)\n","  df['short_wave_point_{}{}'.format(itv, period1)] = short_open_res\n","\n","  long_open_res *= (open >= wave_base_) & (wave_base_ >= low) & (lower_touch_idx_ < upper_touch_idx_)\n","  df['long_wave_point_{}{}'.format(itv, period1)] = long_open_res\n","\n","  if itv != 'T':\n","    assert ltf_df is not None, \"assert ltf_df is not None\"\n","\n","    join_cols = np.arange(-7, 0 ,1).astype(int)\n","    ltf_df.drop(df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","    try:\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, df, join_cols), how='inner')\n","      # ltf_df = ltf_df.merge(to_lower_tf_v2(ltf_df, df, [-7, -6, -5, -4, -3, -2, -1]), how='inner')\n","    except Exception as e:\n","      print(\"error in wave_range_v4's join() :\", e)\n","  else:\n","    ltf_df = df    \n","\n","  return ltf_df"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YqBXjVPzdccC"},"outputs":[],"source":["i = random.randint(0, len(res_df))\n","\n","plot_size = 200\n","t_df = res_df.iloc[i - plot_size:i]\n","a_data = t_df.to_numpy()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":537},"executionInfo":{"elapsed":1657,"status":"ok","timestamp":1649124296856,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"-Dr_tTk9csFm","outputId":"4c495e36-8ff0-4067-eed0-962c24ada307"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 1080x648 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(15, 9))\n","nrows, ncols = 1, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        # height_ratios=[3, 1]\n","                        )\n","\n","ax = fig.add_subplot(gs[0])\n","\n","# ------ candles ------ #\n","candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","# _ = [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","\n","itv, period1, period2 = 'T', 20, 20\n","t_df = wave_range_v5(t_df, 20, 20, ltf_df=None, touch_period=50)\n","\n","dc_upper_ = t_df['dc_upper_{}{}'.format(itv, period1)].to_numpy()\n","dc_lower_ = t_df['dc_lower_{}{}'.format(itv, period1)].to_numpy()\n","dc_upper2_ = t_df['dc_upper_{}{}'.format(itv, period2)].to_numpy()\n","dc_lower2_ = t_df['dc_lower_{}{}'.format(itv, period2)].to_numpy()\n","plt.step(np.arange(len(dc_upper_)), dc_upper_, alpha=1.0, color='yellow', linewidth=2)\n","plt.step(np.arange(len(dc_lower_)), dc_lower_, alpha=1.0, color='yellow', linewidth=2)\n","# plt.step(np.arange(len(t_df.dc_base_T40.to_numpy())), t_df.dc_base_T40.to_numpy(), alpha=1.0, color='white', linewidth=1)\n","\n","\n","short_open_plot_idx = t_df['short_wave_point_{}{}{}'.format(itv, period1, period2)].to_numpy().astype(bool)\n","long_open_plot_idx = t_df['long_wave_point_{}{}{}'.format(itv, period1, period2)].to_numpy().astype(bool)\n","short_base_ = t_df['short_base_{}{}{}'.format(itv, period1, period2)].to_numpy()\n","long_base_ = t_df['long_base_{}{}{}'.format(itv, period1, period2)].to_numpy()\n","plt.step(np.arange(len(short_base_))[short_open_plot_idx], short_base_[short_open_plot_idx], \"o\", alpha=1.0, color='#ff00ff', markersize=11)\n","plt.step(np.arange(len(long_base_))[long_open_plot_idx], long_base_[long_open_plot_idx], \"o\", alpha=1.0, color='#ff00ff', markersize=11)\n","\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7_FX0rIP_vyE"},"outputs":[],"source":["def sd_dc(df, period1, period2, ltf_df=None):\n","    assert period1 <= period2, \"assert period1 <= period2\"\n","    donchian_channel_v2(df, period1)\n","    donchian_channel_v2(df, period2)\n","    itv = pd.infer_freq(df.index)\n","    if itv != 'T':\n","      assert ltf_df is not None, \"assert ltf_df is not None\"\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, df, [-4, -3, -2, -1]), how='inner')\n","    else:\n","      ltf_df = df\n","\n","    ltf_df['short_base_{}'.format(itv)] = (ltf_df['dc_lower_{}{}'.format(itv, period1)].to_numpy() + ltf_df['dc_upper_{}{}'.format(itv, period2)].to_numpy()) / 2\n","    ltf_df['long_base_{}'.format(itv)] = (ltf_df['dc_upper_{}{}'.format(itv, period1)].to_numpy() + ltf_df['dc_lower_{}{}'.format(itv, period2)].to_numpy()) / 2\n","\n","    return ltf_df\n","\n","\n","def donchian_channel_v2(df, period):\n","  itv = pd.infer_freq(df.index)\n","  upper_name = 'dc_upper_{}{}'.format(itv, period)\n","  lower_name = 'dc_lower_{}{}'.format(itv, period)\n","\n","  df.drop([upper_name, lower_name], inplace=True, axis=1, errors='ignore')\n","\n","  df[upper_name] = df['high'].rolling(period).max()\n","  df[lower_name] = df['low'].rolling(period).min()\n","\n","  return\n","\n","def wave_range(df, period1, period2, ltf_df=None, touch_lbperiod=50):\n","    assert period1 <= period2, \"assert period1 <= period2\"\n","    donchian_channel_v2(df, period1)\n","    donchian_channel_v2(df, period2)\n","    itv = pd.infer_freq(df.index)\n","    if itv != 'T':\n","      assert ltf_df is not None, \"assert ltf_df is not None\"\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, df, [-4, -3, -2, -1]), how='inner')\n","    else:\n","      ltf_df = df\n","\n","    short_tp_1_, short_tp_0_ = ltf_df['dc_lower_{}{}'.format(itv, period1)].to_numpy(), ltf_df['dc_upper_{}{}'.format(itv, period2)].to_numpy()\n","    long_tp_1_, long_tp_0_ = ltf_df['dc_upper_{}{}'.format(itv, period1)].to_numpy(), ltf_df['dc_lower_{}{}'.format(itv, period2)].to_numpy()\n","\n","    ltf_df['short_base_{}'.format(itv)] = (short_tp_1_ + short_tp_0_) / 2  # dc_base touch 사용하면 point 를 좀 더 일찍 잡을 수 있음\n","    ltf_df['long_base_{}'.format(itv)] = (long_tp_1_ + long_tp_0_) / 2\n","    \n","    short_base = ltf_df['short_base_{}'.format(itv)].to_numpy()\n","    long_base = ltf_df['long_base_{}'.format(itv)].to_numpy()\n","\n","    len_df = len(ltf_df)   \n","    short_open_res = np.ones(len_df)\n","    long_open_res = np.ones(len_df)\n","    \n","    data_cols = ['open', 'high', 'low']\n","    open, high, low = [ltf_df[col_].to_numpy() for col_ in data_cols]\n","\n","    short_a_touch_idx = pd.Series(np.where(high >= short_tp_0_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()  # min -> max\n","    short_b_touch_idx = pd.Series(np.where(low <= short_tp_1_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨    \n","    short_open_res *= (high >= short_base) & (short_base >= open) & (short_a_touch_idx < short_b_touch_idx)\n","\n","    ltf_df['short_wave_1_{}'.format(itv)] = pd.Series(get_line(short_b_touch_idx, short_tp_1_)).ffill().to_numpy()   # ffill() 다음 to_numpy() 안하면 None 값\n","    ltf_df['short_wave_0_{}'.format(itv)] = pd.Series(get_line(short_a_touch_idx, short_tp_0_)).ffill().to_numpy()\n","    ltf_df['short_wave_point_{}'.format(itv)] = short_open_res.astype(bool)\n","\n","    long_a_touch_idx = pd.Series(np.where(low <= long_tp_0_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()       \n","    long_b_touch_idx = pd.Series(np.where(high >= long_tp_1_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()    \n","    long_open_res *= (open >= long_base) & (long_base >= low) & (long_a_touch_idx < long_b_touch_idx)\n","\n","    ltf_df['long_wave_1_{}'.format(itv)] = pd.Series(get_line(long_b_touch_idx, long_tp_1_)).ffill().to_numpy()\n","    ltf_df['long_wave_0_{}'.format(itv)] = pd.Series(get_line(long_a_touch_idx, long_tp_0_)).ffill().to_numpy()\n","    ltf_df['long_wave_point_{}'.format(itv)] = long_open_res.astype(bool)\n","\n","    return ltf_df\n","\n","def wave_range_v2(df, period1, ltf_df=None, touch_lbperiod=50):  # v2 for period1 only\n","\n","  donchian_channel_v2(df, period1) \n","\n","  itv = pd.infer_freq(df.index)\n","  if itv != 'T':\n","    assert ltf_df is not None, \"assert ltf_df is not None\"\n","    try:\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, df, [-2, -1]), how='inner')\n","    except Exception as e:\n","      print(\"error in wave_range_v2's join() :\", e)\n","  else:\n","    ltf_df = df    \n","\n","  dc_lower_, dc_upper_ = ltf_df['dc_lower_{}{}'.format(itv, period1)].to_numpy(), ltf_df['dc_upper_{}{}'.format(itv, period1)].to_numpy()\n","\n","  # print(ltf_df.tail().iloc[:, -4:])\n","\n","  ltf_df['wave_base_{}'.format(itv)] = (dc_lower_ + dc_upper_) / 2  # dc_base touch 사용하면 point 를 좀 더 일찍 잡을 수 있음\n","  \n","  wave_base_ = ltf_df['wave_base_{}'.format(itv)].to_numpy()\n","  # short_base_ = ltf_df['short_base__{}'.format(itv)].to_numpy()\n","  # long_base_ = ltf_df['long_base__{}'.format(itv)].to_numpy()\n","\n","  len_df = len(ltf_df)   \n","  short_open_res = np.ones(len_df)\n","  long_open_res = np.ones(len_df)\n","  \n","  data_cols = ['open', 'high', 'low']\n","  open, high, low = [ltf_df[col_].to_numpy() for col_ in data_cols]\n","\n","  dc_upper_touch_idx = pd.Series(np.where(high >= dc_upper_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()  # min -> max\n","  dc_lower_touch_idx = pd.Series(np.where(low <= dc_lower_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨    \n","  \n","  ltf_df['wave_upper_{}'.format(itv)] = pd.Series(get_line(dc_upper_touch_idx, dc_upper_)).ffill().to_numpy() \n","  ltf_df['wave_lower_{}'.format(itv)] = pd.Series(get_line(dc_lower_touch_idx, dc_lower_)).ffill().to_numpy() \n","\n","  short_open_res *= (high >= wave_base_) & (wave_base_ >= open) & (dc_upper_touch_idx < dc_lower_touch_idx)\n","  ltf_df['short_wave_point_{}'.format(itv)] = short_open_res.astype(bool)\n","\n","  long_open_res *= (open >= wave_base_) & (wave_base_ >= low) & (dc_lower_touch_idx < dc_upper_touch_idx)\n","  ltf_df['long_wave_point_{}'.format(itv)] = long_open_res.astype(bool)\n","\n","  return ltf_df\n","\n","def wave_range_v3(df, period1, ltf_df=None, touch_lbperiod=50):  # v2 for period1 only\n","\n","  itv = pd.infer_freq(df.index)\n","\n","  donchian_channel_v2(df, period1) \n","  dc_lower_, dc_upper_ = df['dc_lower_{}{}'.format(itv, period1)].to_numpy(), df['dc_upper_{}{}'.format(itv, period1)].to_numpy()\n","\n","  df['wave_base_{}'.format(itv)] = (dc_lower_ + dc_upper_) / 2  # dc_base touch 사용하면 point 를 좀 더 일찍 잡을 수 있음  \n","  wave_base_ = df['wave_base_{}'.format(itv)].to_numpy()\n","  # short_base_ = df['short_base__{}'.format(itv)].to_numpy()\n","  # long_base_ = df['long_base__{}'.format(itv)].to_numpy()\n","\n","  len_df = len(df)   \n","  short_open_res = np.ones(len_df)\n","  long_open_res = np.ones(len_df)\n","  \n","  data_cols = ['open', 'high', 'low']\n","  open, high, low = [df[col_].to_numpy() for col_ in data_cols]\n","\n","  dc_upper_touch_idx = pd.Series(np.where(high >= dc_upper_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()  # min -> max\n","  dc_lower_touch_idx = pd.Series(np.where(low <= dc_lower_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨    \n","  \n","  # df['wave_upper_{}'.format(itv)] = pd.Series(get_line(dc_upper_touch_idx, dc_upper_)).ffill().to_numpy() \n","  # df['wave_lower_{}'.format(itv)] = pd.Series(get_line(dc_lower_touch_idx, dc_lower_)).ffill().to_numpy() \n","\n","  short_open_res *= (high >= wave_base_) & (wave_base_ >= open) & (dc_upper_touch_idx < dc_lower_touch_idx)\n","  df['short_wave_point_{}'.format(itv)] = short_open_res\n","\n","  long_open_res *= (open >= wave_base_) & (wave_base_ >= low) & (dc_lower_touch_idx < dc_upper_touch_idx)\n","  df['long_wave_point_{}'.format(itv)] = long_open_res\n","\n","  if itv != 'T':\n","    assert ltf_df is not None, \"assert ltf_df is not None\"\n","\n","    join_cols = np.arange(-7, 0 ,1).astype(int)\n","    ltf_df.drop(df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","    try:\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, df, join_cols), how='inner')\n","      # ltf_df = ltf_df.merge(to_lower_tf_v2(ltf_df, df, [-7, -6, -5, -4, -3, -2, -1]), how='inner')\n","    except Exception as e:\n","      print(\"error in wave_range_v3's join() :\", e)\n","  else:\n","    ltf_df = df    \n","\n","  return ltf_df\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-AmhhMxC-ltr"},"outputs":[],"source":["res = wave_range_v3(to_htf(res_df, '5T', '1h'), 12, ltf_df=res_df, touch_lbperiod=50)\n","# res = wave_range_v3(res_df, 12, ltf_df=None, touch_lbperiod=50)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gGDf6iBxFP_s"},"outputs":[],"source":["print(res.tail(100).iloc[:, -7:])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZoS_76wwAXhj"},"outputs":[],"source":["res.dtypes\n","# type(np.arange(-7,0,1).astype(int)[0])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Z7bHV8CvC7eF"},"outputs":[],"source":["def to_lower_tf_v2(ltf_df, htf_df, column, backing_i=1, show_info=False):\n","    #       Todo        #\n","    #        1. 현재 downsampled df 만 허용, direct_df 사용시 issue 발생 가능할 것\n","    assert type(column[0]) in [int, np.int64], \"column value should be integer\"\n","    # if not replace_last_idx:\n","    #     assert datetime.timestamp(htf_df.index[-1]) >= datetime.timestamp(\n","    #         ltf_df.index[-1]), \"htf_lastidx should >= ltf_lastidx\"  # data sync confirmation\n","    #   htf idx ts 가 ltf 보다 작을 경우, intersec_idx 를 구할 수 없음\n","\n","    #   downsampled htf_df 만 허용 - 통일성\n","    #   non_resampled df 사용시 \"cannot reindex a non-unique index with a method or limit\" 라는 error_msg 확인\n","\n","    cols = htf_df.columns[column]  # to_lower_tf_v1 의 int col 반영\n","\n","    ltf_itv = pd.infer_freq(ltf_df.index)\n","    assert ltf_itv == 'T', \"currently only -> 'T' allowed..\"\n","\n","    if show_info:\n","        print(\"backing_i :\", backing_i)\n","\n","    #        1. htf last_ts_idx 의 second 가 :00 format (all rows same format)이 아닌 경우, bfill() 시 NaN 발생\n","    #           --> 상관 없음, 다른 윈인임\n","    #        2. single positional indexer is out-of-bounds => 대게 len(data) 부족 문제임 (row 증분)\n","    # iloc 뒤에 붙여야함, 아니면 timeidx 정상 출력 안됨\n","\n","    renamed_last_row = htf_df.rename(index={htf_df.index[-1]: ltf_df.index[-1]}, inplace=False).iloc[[-1]]\n","    if htf_df.index[-1] != renamed_last_row.index[-1]:  # cannot reindex a non-unique index with a method or limit 방지\n","        htf_df = htf_df.append(renamed_last_row)\n","\n","    # print(htf_df.tail())\n","\n","    # downsampled htf 의 freq_offset 기준으로 앞에서 뒤로 채우는게 맞음\n","    # --> hh:mm:00 format 을 사용해서 그럼 (59:999 면 bfill() 이였을 것)\n","    resampled_df = htf_df[cols].shift(backing_i).resample(ltf_itv).ffill()\n","    # print(resampled_df.tail())\n","    # print()\n","\n","    #        2. htf 가 downsampled 된 df 를 default 로 사용하기에, slicing 불필요해짐\n","    #        3. Shape of passed values is (799, 3), indices imply (3000, 3) -> len(ltf_df) > len(resampled_df) 란 의미\n","    #        4. solution => reindexing for inner join   #\n","    #         a. len(resampled_df) > len(ltf_df) 경우 slicing 진행\n","    #           -> ltf_index 를 다가져와도 resampled_indx 를 채울 수 없음 => error\n","    #           i. resampled length 를 ltf length 로 줄임\n","    #               1. 이미 htf_indi. 는 계산된 상태이고, \n","    #                   a. trader - 마지막 index 만 사용, 전혀 무리없음\n","    #                   b. idep - resampled_df.head(itv) 만큼만 소실된 것 -> 큰 무리없음\n","    #         b. len(resampled_df) < len(ltf_df)-> 상관없음 (ltf_index 에서 resampled_df length 만큼만 때가면 되니까)\n","    if len(resampled_df) > len(ltf_df):\n","        resampled_df = resampled_df.iloc[-len(ltf_df):]\n","    # print(\"len(ltf_df) :\", len(ltf_df))\n","    # print(\"len(resampled_df) :\", len(resampled_df))\n","    resampled_df.index = ltf_df.index[-len(resampled_df):]\n","    # assert len(ltf_df) <= len(resampled_df), \"for join method, assert len(ltf_df) <= len(resampled_df)\"\n","\n","    #       check last row's validity       #\n","    assert np.sum(\n","        pd.isnull(resampled_df.iloc[-1].values)) == 0, \"np.nan value occured, more {} rows might be reguired\".format(\n","        cols)\n","\n","    # if datetime.timestamp(htf_df.index[-1]) < datetime.timestamp(ltf_df.index[-1]):\n","    #     # resampled_df.rename(index={resampled_df.index[-1]: ltf_df.index[-1]}, inplace=True)\n","    #     print(resampled_df.tail())\n","    #     print(\"-----------\")\n","\n","    #        1. 필요한 len 계산해서 pre_proc. 진행 --> open_idx 를 동일하게 맞춰놓았고, shift 적용 상태이기 때문에 불필요함\n","\n","    #        1. ltf_df 의 마지막 timeidx 와 sync. 맞춰주어야함\n","    #           a. itv '1T' 가 아닌경우, 교집합 timeidx 가 존재하지 않을 수 있음\n","    # ltf_lastidx = ltf_df.tail(1).resample('1T').asfreq().index\n","    # intersec_idx_arr = np.argwhere(resampled_df.index == ltf_lastidx.item())\n","    # intersec_idx = intersec_idx_arr.item()\n","    # print(\"intersec_idx :\", intersec_idx)\n","    # print(\"len(resampled_df) :\", len(resampled_df))\n","    #\n","    # assert len(intersec_idx_arr) >= 1, \"len(intersec_idx_arr) is zero\"\n","    #\n","    # sliced_resampled_df = resampled_df[:intersec_idx + 1]\n","    # return sliced_resampled_df.values[-len(ltf_df):]\n","\n","    # return resampled_df.values[-len(ltf_df):]\n","    return resampled_df"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"WA094Xin1FGr"},"outputs":[],"source":["# 1. base_touch_idx 기준으로, 작정한다음, np.nan value 를 ffill() 진행\n","selection_id = config.selection_id\n","len_df = len(res_df)\n","short_open_res = np.ones(len_df)\n","long_open_res = np.ones(len_df)\n","\n","short_tp_1_col, short_tp_0_col, short_tp_gap_col = 'short_tp_1_{}'.format(selection_id), 'short_tp_0_{}'.format(selection_id), 'short_tp_gap_{}'.format(selection_id) \n","long_tp_1_col, long_tp_0_col, long_tp_gap_col = 'long_tp_1_{}'.format(selection_id), 'long_tp_0_{}'.format(selection_id), 'long_tp_gap_{}'.format(selection_id) \n","short_epout_1_col, short_epout_0_col, short_epout_gap_col = 'short_epout_1_{}'.format(selection_id), 'short_epout_0_{}'.format(selection_id), 'short_epout_gap_{}'.format(selection_id) \n","long_epout_1_col, long_epout_0_col, long_epout_gap_col = 'long_epout_1_{}'.format(selection_id), 'long_epout_0_{}'.format(selection_id), 'long_epout_gap_{}'.format(selection_id) \n","\n","data_cols = ['open', 'high', 'low']   # Todo - public_indi 이전에 해야할지도 모름 # 'close', 'haopen', 'hahigh', 'halow', 'haclose'\n","tp_cols = [short_tp_1_col, short_tp_0_col, short_tp_gap_col, long_tp_1_col, long_tp_0_col, long_tp_gap_col]   # Todo - public_indi 이전에 해야할지도 모름\n","epout_cols = [short_epout_1_col, short_epout_0_col, short_epout_gap_col, long_epout_1_col, long_epout_0_col, long_epout_gap_col]   # Todo - public_indi 이전에 해야할지도 모름\n","\n","short_tp_1_, short_tp_0_, short_tp_gap_, long_tp_1_, long_tp_0_, long_tp_gap_ = [res_df[col_].to_numpy() for col_ in tp_cols]\n","short_epout_1_, short_epout_0_, short_epout_gap_, long_epout_1_, long_epout_0_, long_epout_gap_ = [res_df[col_].to_numpy() for col_ in epout_cols]\n","open, high, low = [res_df[col_].to_numpy() for col_ in data_cols]\n","\n","short_base = (short_tp_1_ + short_tp_0_) / 2\n","long_base = (long_tp_1_ + long_tp_0_) / 2\n","\n","touch_period = 50\n","\n","short_a_touch_idx = pd.Series(np.where(high >= short_tp_0_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()  # min -> max\n","short_b_touch_idx = pd.Series(np.where(low <= short_tp_1_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨\n","\n","short_en_p = (get_line(short_a_touch_idx, short_tp_0_) + get_line(short_b_touch_idx, short_tp_1_)) / 2\n","short_base_b = get_line(short_b_touch_idx, short_base)   # 현재, en_p == base_b, why ..?\n","short_tp_0_touch = get_line(short_a_touch_idx, short_tp_0_)\n","short_tp_1_touch = get_line(short_b_touch_idx, short_tp_1_)\n","short_tp_gap_b = get_line(short_b_touch_idx, short_tp_gap_)\n","short_open_res *= (high >= short_base) & (short_base >= open) & (short_a_touch_idx < short_b_touch_idx) #& (short_base_b + config.loc_set.point.base_gap * short_tp_gap_b >= short_base)\n","# short_open_res *= (high >= short_base_b) & (short_base_b >= low) & (short_a_touch_idx < short_b_touch_idx) & (short_base_b + config.loc_set.point.base_gap * short_tp_gap_b >= short_base)\n","\n","len_df = len(res_df)\n","long_a_touch_idx = pd.Series(np.where(low <= long_tp_0_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()       \n","long_b_touch_idx = pd.Series(np.where(high >= long_tp_1_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()\n","\n","long_en_p = (get_line(long_a_touch_idx, long_tp_0_) + get_line(long_b_touch_idx, long_tp_1_)) / 2\n","long_base_b = get_line(long_b_touch_idx, long_base)\n","long_tp_0_touch = get_line(long_a_touch_idx, long_tp_0_)\n","long_tp_1_touch = get_line(long_b_touch_idx, long_tp_1_)\n","long_tp_gap_b = get_line(long_b_touch_idx, long_tp_gap_)\n","long_open_res *= (open >= long_base) & (long_base >= low) & (long_a_touch_idx < long_b_touch_idx) # & (long_base_b - config.loc_set.point.base_gap * long_tp_gap_b <= long_base)\n","# long_open_res *= (open >= long_base) & (long_base >= low) # & (long_a_touch_idx < long_b_touch_idx) # & (long_base_b - config.loc_set.point.base_gap * long_tp_gap_b <= long_base)\n","# long_open_res *= (high >= long_base) & (long_base >= low) & (long_a_touch_idx < long_b_touch_idx) # & (long_base_b - config.loc_set.point.base_gap * long_tp_gap_b <= long_base)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"t4P2qIYAFiDm"},"outputs":[],"source":["i = random.randint(0, len(res_df))\n","\n","plot_size = 200\n","t_df = res_df.iloc[i - plot_size:i]\n","a_data = t_df.to_numpy()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5SIWeZb24xdl"},"outputs":[],"source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(15, 9))\n","nrows, ncols = 1, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        # height_ratios=[3, 1]\n","                        )\n","\n","ax = fig.add_subplot(gs[0])\n","\n","# ------ candles ------ #\n","candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","# _ = [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","\n","# t_df = wave_range(t_df, 20, 20, ltf_df=None, touch_lbperiod=50)\n","t_df = mcp(t_df, 20, ltf_df=None, touch_lbperiod=50)\n","\n","plt.step(np.arange(len(t_df.dc_upper_T40.to_numpy())), t_df.dc_upper_T40.to_numpy(), alpha=1.0, color='yellow', linewidth=2)\n","plt.step(np.arange(len(t_df.dc_lower_T40.to_numpy())), t_df.dc_lower_T40.to_numpy(), alpha=1.0, color='yellow', linewidth=2)\n","plt.step(np.arange(len(t_df.dc_base_T40.to_numpy())), t_df.dc_base_T40.to_numpy(), alpha=1.0, color='white', linewidth=1)\n","\n","short_open_plot_idx = t_df.short_mcp_point_T40.to_numpy().astype(bool)\n","long_open_plot_idx = t_df.long_mcp_point_T40.to_numpy().astype(bool)\n","long_open_plot_idx = t_df.long_mcp_point_T40.to_numpy().astype(bool)\n","plt.step(np.arange(len(t_df.dc_base_T40.to_numpy()))[short_open_plot_idx], t_df.dc_base_T40.to_numpy()[short_open_plot_idx], \"o\", alpha=1.0, color='#ff00ff', markersize=11)\n","plt.step(np.arange(len(t_df.dc_base_T40.to_numpy()))[long_open_plot_idx], t_df.dc_base_T40.to_numpy()[long_open_plot_idx], \"o\", alpha=1.0, color='#ff00ff', markersize=11)\n","\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":344,"status":"ok","timestamp":1648963836575,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"xPzel_I-5tdT","outputId":"107a4133-5161-4816-96e4-b57ebb22c1ea"},"outputs":[{"data":{"text/plain":["array([    nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan, 3800.06, 3800.06, 3800.06, 3800.06, 3800.06, 3800.06, 3800.06, 3800.06, 3793.03, 3785.83, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3788.66, 3791.08, 3780.65, 3780.52, 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3750.84, 3750.84, 3750.84, 3750.84, 3750.84, 3750.84, 3750.84, 3750.84, 3750.84, 3750.  , 3750.  , 3750.  , 3745.  , 3745.  , 3745.  , 3738.22, 3738.22, 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.91, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3735.  , 3738.25, 3739.3 , 3741.91, 3741.91, 3741.91, 3741.91, 3741.91, 3741.91])"]},"execution_count":229,"metadata":{},"output_type":"execute_result"}],"source":["t_df.dc_lower_T40.to_numpy()\n","# t_df.dc_base_T40.to_numpy()[short_open_plot_idx]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":537},"executionInfo":{"elapsed":977,"status":"ok","timestamp":1648599806041,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"7x80Xlje7j4Q","outputId":"90f467c9-ddb1-4f51-933f-b32de99a8c41"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 1080x648 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(15, 9))\n","nrows, ncols = 1, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        # height_ratios=[3, 1]\n","                        )\n","\n","ax = fig.add_subplot(gs[0])\n","\n","# ------ candles ------ #\n","candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","_ = [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","\n","# t_df = wave_range(t_df, 20, 20, ltf_df=None, touch_lbperiod=50)\n","t_df = mcp(t_df, 40, ltf_df=None, touch_lbperiod=50)\n","\n","plt.step(np.arange(len(t_df.short_wave_1_T.to_numpy())), t_df.short_wave_1_T.to_numpy(), alpha=1.0, color='blue', linewidth=2)\n","plt.step(np.arange(len(t_df.short_wave_0_T.to_numpy())), t_df.short_wave_0_T.to_numpy(), alpha=1.0, color='blue', linewidth=2)\n","plt.step(np.arange(len(t_df.long_wave_1_T.to_numpy())), t_df.long_wave_1_T.to_numpy(), alpha=1.0, color='yellow', linewidth=2)\n","plt.step(np.arange(len(t_df.long_wave_0_T.to_numpy())), t_df.long_wave_0_T.to_numpy(), alpha=1.0, color='yellow', linewidth=2)\n","\n","short_open_plot_idx = t_df.short_wave_point_T\n","long_open_plot_idx = t_df.long_wave_point_T\n","plt.step(np.arange(len(short_base[i - plot_size:i]))[short_open_plot_idx], short_base[i - plot_size:i][short_open_plot_idx], \"o\", alpha=1.0, color='#ff00ff', markersize=11)\n","plt.step(np.arange(len(long_base[i - plot_size:i]))[long_open_plot_idx], long_base[i - plot_size:i][long_open_plot_idx], \"o\", alpha=1.0, color='#00ff00', markersize=11)\n","\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"NXPgF90xMzas"},"outputs":[],"source":["t_df.short_wave_point_T == short_open_res.astype(bool)[i - plot_size:i]\n","t_df.long_wave_point_T[50:] == long_open_res.astype(bool)[i - plot_size:i][50:]\n","\n","# short_open_plot_idx = short_open_res.astype(bool)[i - plot_size:i]\n","# long_open_plot_idx = long_open_res.astype(bool)[i - plot_size:i]\n","\n","# short_open_plot_idx = t_df.short_wave_point_T\n","# # long_open_plot_idx = t_df.long_wave_point_T"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"2OLM9XOI-HO5"},"outputs":[],"source":["# long_a_touch_idx[-plot_size:]\n","touch_idx_copy = long_a_touch_idx.copy()\n","# touch_line = long_tp_0_.copy()\n","touch_line = np.full_like(long_tp_0_, np.nan)\n","\n","nan_idx = np.isnan(touch_idx_copy)  # touch_period 동안 touch 이력이 없는 point\n","touch_idx_copy[nan_idx] = 0   # for indexing array\n","\n","int_touch_idx_copy = touch_idx_copy.astype(int)\n","# print(int_touch_idx_copy[-plot_size:])\n","print(touch_line[int_touch_idx_copy])\n","\n","touch_line = long_tp_0_[int_touch_idx_copy]\n","# touch_line[nan_idx] = np.nan   # for true comp.\n","# print(touch_idx_copy[-plot_size:])\n","print(touch_line[int_touch_idx_copy])\n","print(touch_line[-plot_size:])\n","\n","# long_tp_0_[long_a_touch_idx.astype(int)]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3cvi-eFR9Jsm"},"outputs":[],"source":["def get_line(touch_idx, rtc_):\n","  touch_idx_copy = touch_idx.copy()\n","  touch_line = np.full_like(rtc_, np.nan)\n","\n","  nan_idx = np.isnan(touch_idx_copy)\n","  touch_idx_copy[nan_idx] = 0   # for indexing array\n","  touch_line = rtc_[touch_idx_copy.astype(int)]\n","  touch_line[nan_idx] = np.nan   # for true comp.\n","\n","  return touch_line"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1PwSHOShZJNm"},"outputs":[],"source":["# high = t_df.high.to_numpy()\n","# low = t_df.low.to_numpy()\n","\n","# pivot_k = 0.001\n","# high_pivots = peak_valley_pivots(high, pivot_k, -pivot_k)\n","# low_pivots = peak_valley_pivots(low, pivot_k, -pivot_k)\n","# plot_pivots(high, high_pivots)\n","# plot_pivots(low, low_pivots)\n","\n","def plot_pivots(X, pivots):\n","    # plt.xlim(0, len(X))\n","    # plt.ylim(X.min()*0.99, X.max()*1.01)\n","    # plt.plot(np.arange(len(X)), X, 'k:', color='white')\n","    valid_idx = pivots != 0\n","    plt.plot(np.arange(len(X))[valid_idx], X[valid_idx], '-', color='white')\n","    # plt.scatter(np.arange(len(X))[pivots == 1], X[pivots == 1], color='g')\n","    # plt.scatter(np.arange(len(X))[pivots == -1], X[pivots == -1], color='r')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4lZwODlFYxSL"},"outputs":[],"source":["X = res_df_.close.iloc[-100:].to_numpy()\n","# X = res_df_.close.to_numpy()\n","pivots = peak_valley_pivots(X, 0.0005, -0.0005)\n","pivots = peak_valley_pivots(X, 0.5, -0.5)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"W_xx9XWXZKJ5"},"outputs":[],"source":["plot_pivots(X, pivots)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"executionInfo":{"elapsed":935,"status":"ok","timestamp":1647999471974,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"ZAjpk42XarfY","outputId":"471a5d20-9df5-4b2a-9d04-53cdb0e35c2f"},"outputs":[{"data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7f82b6491790>]"]},"execution_count":31,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["t_df = res_df_.iloc[-100:]\n","t_df['date'] = t_df.index\n","data_x = t_df['date'].values\n","data_y = t_df['close'].values\n","peak_indexes = signal.argrelextrema(data_y, np.greater)\n","peak_indexes = peak_indexes[0]\n"," \n","# Find valleys(min).\n","valley_indexes = signal.argrelextrema(data_y, np.less)\n","valley_indexes = valley_indexes[0]\n"," \n","# Instantiate axes.\n","(fig, ax) = plt.subplots()\n"," \n","# Merge peaks and valleys data points using pandas.\n","df_peaks = pd.DataFrame({'date': data_x[peak_indexes], 'zigzag_y': data_y[peak_indexes]})\n","df_valleys = pd.DataFrame({'date': data_x[valley_indexes], 'zigzag_y': data_y[valley_indexes]})\n","df_peaks_valleys = pd.concat([df_peaks, df_valleys], axis=0, ignore_index=True, sort=True)\n"," \n","# Sort peak and valley datapoints by date.\n","df_peaks_valleys = df_peaks_valleys.sort_values(by=['date'])\n"," \n","# Plot zigzag trendline.\n","ax.plot(df_peaks_valleys['date'].values, df_peaks_valleys['zigzag_y'].values, \n","                                                        color='red', label=\"zigzag\")\n"," \n","# Plot close price line.\n","ax.plot(data_x, data_y, linestyle='dashed', color='black', label=\"Close Price\", linewidth=1)\n"," "]},{"cell_type":"markdown","metadata":{"id":"1MNVIExLULhJ"},"source":["#### legacy"]},{"cell_type":"markdown","metadata":{"id":"EOXQbXixiQcK"},"source":["##### volume_profile"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7pFuazxpgx9B"},"outputs":[],"source":["session_df = res_df_.iloc[-1440:] # 0.159 -> 0.024 (14400 -> 1440)\n","volume = session_df['volume'].to_numpy()\n","close = session_df['close'].to_numpy()\n","# px.histogram(session_df, x='volume', y='close', nbins=150, orientation='h').show()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":332,"status":"ok","timestamp":1647259514394,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"SoPJkiyKiXLM","outputId":"2e1d515d-7caf-4f82-b53b-a17f3e1d9ab9"},"outputs":[{"name":"stdout","output_type":"stream","text":["ticks_per_sample : 1.3911999999999989\n","kdy elapsed_time : 0.021226167678833008\n"]}],"source":["kde_factor = 0.05\n","num_samples = 100\n","\n","start_0 = time.time()\n","kde = stats.gaussian_kde(close,weights=volume,bw_method=kde_factor)\n","kdx = np.linspace(close.min(),close.max(),num_samples)\n","kdy = kde(kdx)\n","ticks_per_sample = (kdx.max() - kdx.min()) / num_samples\n","print(\"ticks_per_sample :\", ticks_per_sample)  # sample 당 가격\n","print(\"kdy elapsed_time :\", time.time() - start_0)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":320},"executionInfo":{"elapsed":362,"status":"ok","timestamp":1647263622450,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"mK2jBddAxJ14","outputId":"74d7a810-1375-4db5-f74e-3cf58e0a0662"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 720x360 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["peaks,_ = signal.find_peaks(kdy)\n","pkx = kdx[peaks]\n","pky = kdy[peaks]\n","\n","plt.figure(figsize=(10,5))\n","# plt.hist(close, bins=num_samples, weights=volume, alpha=.8, color='#1592e6')\n","# plt.plot(kdx, kdy, color='white')\n","# plt.plot(pkx, pky, 'bo', color='yellow')\n","plt.plot(kdy, kdx, color='white')\n","plt.plot(pky, pkx, 'bo', color='yellow')\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":326,"status":"ok","timestamp":1647260132868,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"a8tpQZCy0SO1","outputId":"24ee984e-db8d-4083-97a7-4d3ebb536d38"},"outputs":[{"data":{"text/plain":["array([3059.93252525, 3068.3640404 , 3082.41656566, 3093.65858586, 3104.90060606, 3120.35838384, 3130.19515152, 3140.03191919, 3158.30020202, 3168.1369697 , 3176.56848485])"]},"execution_count":8,"metadata":{},"output_type":"execute_result"}],"source":["pkx"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gfA946s8UgS0"},"outputs":[],"source":["# ------ vp 의 indi. 화가 필요함 -> point 설정 ------ #\n","# 1. 4 level 은 미리 만들어놓는게 맞는걸로 보임 -> 추종하는 function 이 많음 (utils_tr, ep_out ...)\n","#   a. 4 level 에 국한하는게 아니라, 모든 peaks 에 대해 levels 설정\n","#   b. 각 session 별로 peak_list 가 주어질 것\n","#     i. prev_data 사용해야하는점 주의 (session vp 는 future_data)"]},{"cell_type":"markdown","metadata":{"id":"3T-9FwWFXR4f"},"source":["###### prominence_info"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":558},"executionInfo":{"elapsed":781,"status":"ok","timestamp":1647183981567,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"RmBt2agljClE","outputId":"c61b0e13-ab0a-4e56-8a44-8bc480ec31cc"},"outputs":[{"name":"stdout","output_type":"stream","text":["prom_line elapsed_time : 0.0005087852478027344\n"]},{"data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script src=\"https://cdn.plot.ly/plotly-2.8.3.min.js\"></script>                <div id=\"f0efc821-18d5-43b5-ad6e-1133ea0ad873\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"f0efc821-18d5-43b5-ad6e-1133ea0ad873\")) {                    Plotly.newPlot(                        \"f0efc821-18d5-43b5-ad6e-1133ea0ad873\",                        [{\"histfunc\":\"sum\",\"histnorm\":\"probability density\",\"marker\":{\"color\":\"#B0C4DE\"},\"name\":\"Vol Profile\",\"nbinsx\":150,\"x\":[3150.12,3150.91,3150.04,3152.76,3150.22,3148.21,3148.25,3148.3,3142.41,3145.56,3144.02,3145.11,3146.27,3142.97,3140.6,3142.02,3142.8,3141.34,3138.28,3138.09,3137.04,3135.5,3133.32,3134.84,3136.27,3137.1,3137.05,3139.74,3138.4,3138.17,3139.49,3141.68,3142.52,3143.14,3143.12,3142.4,3144.17,3142.7,3140.72,3138.89,3142.1,3140.96,3139.76,3138.51,3140.37,3139.0,3138.84,3138.57,3140.62,3143.09,3141.71,3140.05,3139.85,3139.12,3139.9,3139.24,3139.49,3138.88,3138.14,3136.66,3137.03,3138.04,3140.84,3138.27,3137.31,3139.03,3141.06,3141.5,3139.41,3137.62,3141.5,3142.8,3142.24,3143.42,3142.55,3143.9,3146.54,3146.38,3142.34,3144.01,3145.79,3147.35,3146.06,3146.75,3147.37,3153.62,3152.82,3154.53,3153.41,3154.3,3153.01,3156.01,3157.57,3157.36,3160.43,3159.0,3163.78,3164.2,3163.97,3168.45,3170.03,3169.46,3173.73,3169.48,3168.54,3167.57,3166.99,3164.73,3164.25,3166.33,3162.57,3156.97,3159.44,3159.19,3158.11,3156.97,3158.08,3158.32,3158.99,3157.01,3154.91,3147.89,3146.35,3142.36,3142.62,3138.81,3144.68,3143.32,3140.89,3140.16,3139.74,3140.33,3143.48,3145.12,3145.42,3147.13,3143.31,3144.88,3145.12,3143.89,3144.75,3143.91,3140.69,3141.35,3141.59,3141.62,3141.51,3141.96,3142.09,3140.61,3137.55,3138.18,3140.28,3139.39,3139.2,3139.85,3137.92,3138.08,3136.42,3134.93,3135.14,3133.15,3135.12,3133.37,3134.51,3131.06,3128.0,3126.97,3116.7,3122.46,3122.06,3118.8,3115.48,3119.5,3120.88,3110.75,3109.43,3107.1,3111.54,3107.5,3108.74,3111.3,3113.32,3115.38,3118.54,3115.27,3118.6,3120.1,3119.4,3119.35,3123.69,3123.54,3121.8,3121.82,3119.9,3122.01,3122.29,3119.64,3119.91,3118.67,3118.66,3119.45,3120.43,3122.38,3120.43,3121.94,3123.03,3123.6,3121.88,3123.81,3123.85,3121.51,3121.8,3122.29,3123.76,3127.99,3131.35,3131.12,3131.07,3132.76,3131.57,3131.8,3130.61,3134.68,3134.39,3132.91,3130.4,3129.86,3129.9,3129.38,3128.39,3125.57,3124.03,3123.68,3125.42,3125.98,3128.4,3130.98,3128.95,3129.26,3132.05,3131.17,3128.56,3126.45,3127.34,3128.33,3126.96,3128.84,3128.45,3128.34,3128.84,3126.09,3125.6,3125.95,3124.5,3122.44,3122.97,3128.29,3126.43,3127.98,3131.71,3132.68,3130.7,3129.63,3130.04,3129.68,3129.74,3129.36,3129.78,3128.6,3128.87,3130.34,3129.71,3127.47,3129.81,3129.16,3128.41,3126.57,3125.42,3128.63,3129.77,3130.9,3131.42,3129.66,3132.1,3130.24,3133.36,3138.65,3141.3,3144.9,3140.63,3141.08,3139.72,3142.67,3141.99,3140.43,3139.04,3134.85,3133.34,3133.14,3136.4,3138.89,3139.59,3143.64,3140.9,3140.38,3141.76,3140.14,3140.58,3137.29,3138.28,3138.27,3137.57,3139.11,3138.77,3138.93,3139.13,3139.57,3139.76,3141.02,3138.46,3138.77,3139.38,3135.77,3135.49,3136.19,3134.07,3135.5,3134.59,3134.37,3137.84,3139.81,3140.38,3143.15,3142.58,3143.12,3139.01,3137.68,3137.86,3137.6,3136.3,3136.34,3134.66,3136.0,3135.49,3133.83,3132.57,3127.5,3127.82,3130.61,3132.01,3126.05,3128.08,3127.75,3127.18,3128.5,3128.32,3129.79,3128.02,3129.28,3127.92,3129.56,3130.85,3131.61,3133.9,3133.36,3135.98,3136.89,3136.05,3138.23,3137.59,3139.65,3141.26,3140.09,3139.73,3139.13,3140.0,3138.28,3139.07,3140.15,3140.64,3141.14,3140.89,3141.56,3144.82,3146.11,3146.92,3147.37,3148.01,3148.11,3153.52,3153.63,3152.2,3145.75,3149.2,3150.38,3152.32,3148.33,3149.53,3151.03,3149.0,3148.97,3148.26,3148.09,3149.48,3150.14,3153.62,3154.73,3153.73,3154.58,3156.77,3157.02,3157.56,3159.21,3157.99,3157.28,3158.24,3157.75,3153.62,3156.32,3155.98,3156.09,3153.36,3154.85,3153.7,3153.26,3153.92,3152.18,3154.72,3153.76,3151.32,3147.99,3143.63,3142.84,3142.01,3142.34,3141.19,3144.4,3143.24,3146.07,3146.42,3142.71,3145.16,3144.34,3142.69,3139.69,3137.0,3139.75,3138.36,3137.76,3138.86,3141.21,3141.38,3147.22,3146.36,3145.32,3145.22,3143.33,3142.05,3138.36,3136.89,3138.59,3137.22,3138.73,3140.14,3140.55,3143.65,3142.01,3142.94,3141.82,3142.27,3142.38,3141.33,3139.54,3140.53,3141.91,3143.98,3145.27,3145.56,3145.8,3146.38,3146.33,3146.59,3148.72,3149.48,3149.99,3149.19,3147.89,3145.9,3144.89,3143.99,3144.38,3141.47,3141.26,3134.83,3136.75,3135.49,3137.49,3136.01,3138.03,3137.49,3135.5,3133.94,3131.24,3128.72,3131.32,3129.42,3129.77,3126.83,3127.0,3124.12,3125.0,3127.18,3130.0,3129.72,3129.07,3129.68,3129.97,3129.39,3130.92,3132.75,3132.92,3129.99,3133.15,3130.69,3132.15,3134.37,3132.81,3131.7,3130.61,3128.61,3128.99,3124.84,3116.56,3116.76,3116.92,3118.9,3119.05,3118.74,3118.24,3121.88,3121.41,3120.63,3119.45,3119.16,3117.66,3125.21,3122.01,3122.3,3122.27,3123.6,3123.71,3124.0,3126.14,3128.01,3125.94,3126.44,3128.0,3128.04,3128.5,3131.12,3129.44,3129.36,3130.58,3130.58,3130.74,3129.8,3130.8,3130.21,3130.0,3132.5,3132.77,3130.01,3138.72,3139.25,3138.11,3136.77,3136.71,3134.59,3135.98,3133.81,3131.4,3131.16,3133.29,3130.61,3132.0,3132.44,3133.58,3134.18,3133.44,3133.33,3135.37,3134.42,3132.16,3132.2,3130.93,3131.07,3128.89,3127.34,3129.46,3129.77,3130.33,3131.76,3132.28,3130.06,3132.43,3132.6,3134.33,3138.55,3138.49,3137.34,3135.68,3135.12,3133.0,3133.35,3135.1,3135.72,3135.45,3135.74,3134.31,3135.54,3135.0,3134.0,3135.5,3135.47,3138.57,3137.43,3137.26,3137.68,3134.65,3133.04,3134.23,3134.77,3137.77,3138.53,3137.99,3140.51,3141.66,3137.9,3130.11,3125.74,3126.7,3127.43,3126.03,3120.96,3121.81,3124.17,3124.31,3124.54,3125.11,3125.71,3126.3,3128.36,3129.59,3129.72,3130.19,3131.21,3130.5,3130.07,3129.81,3131.5,3134.35,3133.15,3135.09,3136.18,3132.93,3122.75,3122.1,3122.03,3121.84,3121.06,3118.65,3120.18,3119.31,3112.84,3117.62,3114.39,3114.41,3116.04,3117.45,3119.3,3120.57,3120.72,3121.07,3116.17,3110.8,3111.87,3110.61,3115.47,3117.35,3117.49,3117.32,3114.9,3112.16,3112.35,3108.01,3111.41,3109.76,3113.55,3118.27,3120.49,3119.38,3121.0,3119.82,3119.61,3118.49,3116.15,3116.56,3117.76,3115.36,3117.85,3117.1,3118.16,3118.6,3117.1,3114.79,3114.07,3116.16,3113.75,3112.4,3104.99,3118.68,3114.45,3103.37,3094.09,3103.67,3101.78,3098.48,3101.08,3101.52,3096.14,3095.06,3094.52,3093.74,3089.7,3094.76,3094.28,3082.9,3075.29,3071.6,3066.96,3068.99,3068.43,3072.83,3074.19,3068.47,3066.49,3068.45,3071.08,3072.8,3068.44,3067.71,3073.29,3073.62,3075.79,3074.76,3079.0,3077.27,3072.94,3073.42,3070.62,3070.97,3075.98,3073.64,3070.63,3073.96,3074.48,3076.25,3074.55,3072.14,3068.01,3068.44,3057.23,3061.75,3060.41,3060.23,3055.43,3062.96,3064.42,3063.7,3057.99,3057.97,3065.99,3069.05,3073.19,3068.84,3067.58,3067.45,3064.78,3066.87,3067.5,3068.74,3067.5,3070.61,3059.89,3062.56,3066.56,3065.24,3061.41,3060.9,3053.06,3061.95,3059.49,3056.27,3059.09,3059.6,3056.32,3057.96,3058.97,3061.6,3066.01,3068.68,3068.43,3070.66,3072.53,3070.4,3073.28,3072.86,3070.68,3067.65,3066.0,3066.25,3070.21,3071.52,3068.61,3064.15,3064.26,3063.48,3062.8,3060.3,3059.85,3060.47,3064.84,3065.03,3066.71,3066.55,3066.41,3065.24,3067.81,3066.93,3065.0,3067.85,3060.14,3062.51,3061.39,3064.93,3064.94,3066.09,3066.49,3067.75,3070.38,3067.84,3067.51,3072.07,3071.31,3070.05,3068.95,3068.57,3067.73,3068.88,3067.87,3067.89,3065.01,3066.0,3069.24,3065.3,3063.52,3063.06,3064.11,3064.99,3063.19,3062.69,3066.9,3066.87,3065.42,3058.47,3058.2,3068.7,3065.56,3065.52,3059.04,3060.61,3059.57,3058.08,3055.2,3053.72,3060.26,3055.86,3045.88,3046.6,3051.18,3052.99,3057.9,3056.38,3059.4,3061.48,3061.15,3064.36,3065.77,3066.35,3066.8,3067.68,3068.0,3065.05,3063.01,3066.42,3066.16,3064.8,3067.89,3066.3,3068.58,3064.81,3065.74,3064.23,3065.42,3070.43,3069.65,3070.48,3070.57,3073.44,3078.3,3082.89,3079.01,3080.76,3079.67,3082.0,3081.56,3082.01,3081.24,3078.61,3080.11,3080.95,3080.03,3080.65,3079.97,3078.86,3078.5,3078.6,3077.34,3077.0,3076.39,3076.45,3077.45,3076.23,3072.22,3073.67,3079.31,3077.21,3075.68,3076.91,3078.2,3075.92,3077.67,3076.33,3075.14,3076.47,3077.04,3080.69,3079.8,3080.33,3075.65,3074.66,3073.05,3070.38,3067.96,3068.78,3067.92,3069.26,3069.37,3070.76,3068.12,3069.49,3069.98,3071.78,3070.88,3068.71,3067.04,3069.34,3070.99,3070.39,3069.63,3068.6,3068.89,3070.08,3069.26,3069.57,3069.72,3069.53,3067.99,3069.23,3070.93,3071.33,3068.33,3066.84,3066.23,3066.76,3068.17,3070.0,3072.0,3075.66,3073.9,3073.99,3074.66,3074.0,3076.62,3077.82,3076.01,3076.18,3075.52,3075.42,3075.01,3075.67,3079.55,3078.46,3082.28,3080.74,3081.27,3083.38,3084.49,3086.42,3084.9,3086.53,3085.27,3084.7,3084.08,3084.82,3086.99,3092.0,3089.49,3089.26,3084.07,3084.44,3084.8,3083.55,3082.59,3082.36,3084.65,3086.97,3085.67,3085.43,3088.82,3089.81,3091.81,3093.96,3092.59,3093.58,3093.74,3092.61,3091.64,3091.26,3113.47,3104.88,3092.36,3101.44,3107.88,3113.58,3119.86,3128.34,3133.07,3128.34,3123.1,3129.07,3122.38,3127.43,3126.59,3132.79,3137.33,3143.07,3145.41,3147.86,3148.82,3157.67,3157.57,3160.7,3160.01,3163.6,3172.63,3171.77,3174.38,3176.44,3178.06,3179.99,3185.0,3176.75,3171.53,3179.12,3176.52,3168.9,3168.72,3170.03,3168.15,3165.58,3166.83,3167.56,3161.34,3162.78,3167.67,3162.8,3157.67,3155.79,3157.92,3161.37,3163.06,3165.11,3163.45,3164.45,3166.86,3166.61,3165.0,3167.59,3167.45,3164.59,3167.05,3172.29,3176.49,3170.87,3166.5,3165.51,3165.58,3164.96,3165.19,3161.59,3165.09,3162.72,3163.97,3162.62,3165.19,3165.77,3163.55,3173.99,3171.18,3170.87,3168.34,3169.49,3167.69,3169.72,3166.89,3168.42,3166.68,3168.84,3165.83,3162.55,3159.17,3160.93,3162.0,3160.83,3158.69,3159.99,3159.9,3159.88,3160.02,3158.98,3160.0,3158.01,3159.2,3158.6,3158.71,3156.25,3157.2,3156.77,3156.91,3156.6,3156.55,3153.94,3152.29,3151.49,3151.41,3146.89,3148.18,3147.2,3147.17,3147.89,3149.31,3151.59,3156.4,3153.84,3155.3,3155.23,3156.03,3156.24,3155.61,3158.4,3155.05,3155.38,3152.34,3152.18,3153.34,3152.91,3153.99,3151.52,3149.21,3152.48,3151.63,3150.9,3149.75,3148.0,3148.25,3149.4,3149.7,3148.41,3147.65,3146.06,3147.06,3147.41,3146.72,3145.51,3142.17,3142.8,3140.42,3139.24,3140.69,3140.67,3139.22,3136.44,3139.14,3137.55,3133.96,3131.83,3130.8,3130.95,3129.59,3127.0,3129.85,3133.0,3132.21,3132.15,3130.41,3132.9,3134.57,3139.85,3133.04,3138.13,3135.79,3136.96,3133.26,3129.64,3128.02,3127.75,3130.0,3132.21,3133.06,3132.06,3131.88,3132.99,3134.0,3135.79,3137.68,3136.0,3137.89,3133.88,3133.81,3133.84,3133.71,3138.28,3143.06,3144.0,3143.17,3143.02,3145.34,3144.83,3144.81,3144.61,3146.0,3147.91,3146.69,3145.03,3142.46,3142.5,3141.1,3140.17,3140.11,3141.4,3143.92,3144.66,3146.71,3148.95,3146.13,3135.82,3136.96,3139.34,3134.9,3134.48,3136.76,3137.37,3136.92,3136.99,3133.71,3134.44,3132.38,3135.25,3137.14,3135.07,3136.15,3136.15,3139.87,3138.92,3138.5,3141.6,3144.19,3145.44,3147.36,3147.51,3142.12,3143.94,3142.43,3142.02,3142.21,3144.66,3146.53,3144.3,3145.73,3145.94,3146.56,3145.42,3146.05,3150.58,3154.16,3151.01,3149.76,3150.51,3149.31,3146.43,3146.66,3147.47,3145.75,3146.7,3147.1,3143.28,3146.19,3145.38,3145.25,3140.13,3143.45,3140.18,3138.3,3139.7,3136.88,3132.99,3134.7,3135.09,3135.74,3129.89,3126.61,3123.87,3125.14,3119.64,3123.09,3123.35,3120.16,3121.8,3125.0,3132.0,3126.44,3124.57,3120.75,3125.9,3128.05,3127.12,3124.8,3126.19,3128.65,3130.03,3125.31,3125.8,3126.11,3123.22,3125.03,3126.05,3126.24,3129.98,3130.55,3130.97,3129.1,3129.66,3130.27,3130.36,3131.12,3136.13,3137.65,3133.69,3137.18,3137.25,3138.83,3138.58,3141.52,3139.41,3139.05,3137.7,3139.46,3139.8,3140.98,3139.78,3139.17,3140.0,3141.49,3138.86,3139.52,3140.5,3142.58,3142.34,3142.47,3142.91,3142.89,3144.0,3147.55,3148.71,3151.21,3150.66,3148.5,3148.96,3148.5,3150.32,3152.45,3150.83,3150.29,3151.2,3153.01,3152.48,3149.23,3147.45,3146.68,3157.71,3153.34,3147.37,3143.99,3141.45,3142.66,3146.98,3146.61,3148.46,3149.5,3149.29,3148.18,3145.05,3146.86,3145.76,3148.84,3149.31,3146.86,3146.76],\"y\":[1814.895,1182.023,1511.21,821.059,669.95,594.607,397.261,475.226,1430.563,1351.268,848.732,961.415,677.695,2241.498,771.686,3400.92,457.283,815.311,843.761,1456.898,1147.73,2592.488,939.438,695.06,664.589,839.272,344.224,524.897,1029.553,1257.254,764.586,1618.563,599.314,385.634,340.075,245.402,273.54,932.316,297.465,800.419,470.172,358.191,198.746,398.956,521.275,398.68,250.799,376.615,178.701,1034.812,349.27,365.934,193.939,199.584,148.806,343.965,258.079,238.408,273.382,508.892,455.586,1497.43,603.768,705.325,471.812,358.129,1222.79,447.666,603.433,350.189,684.554,404.765,918.631,713.382,803.374,220.673,1013.652,1757.238,887.223,420.149,422.235,642.444,379.785,126.201,499.773,2342.571,1945.816,1288.743,676.794,392.273,424.757,1084.062,1139.501,790.354,2007.705,1446.953,1842.648,777.958,945.39,2579.427,2955.737,1590.911,1476.864,2861.345,772.493,876.768,1835.01,875.833,585.31,765.122,767.852,1825.83,1060.932,682.04,688.755,737.484,429.945,293.821,300.116,1045.831,712.192,2711.994,2052.2,3340.02,897.035,2391.303,2186.713,1517.988,344.748,771.478,720.502,656.313,530.014,1327.673,508.321,904.994,1152.633,523.227,293.715,229.893,202.519,252.467,601.482,317.28,345.035,575.193,374.831,194.465,270.588,367.969,1280.729,1909.713,774.939,518.596,294.403,337.627,382.69,353.682,534.457,1713.387,360.944,713.113,1393.388,1289.595,610.727,739.131,1619.367,2194.335,8164.046,2879.21,2159.701,2512.548,3579.377,1841.206,2810.677,3893.288,1849.815,5497.891,2407.824,1844.752,1304.788,945.57,2745.772,2050.842,2354.528,1577.291,903.569,1269.654,2703.684,766.884,1965.466,1320.285,1111.835,521.223,822.176,942.413,497.538,499.364,222.856,316.366,355.702,243.842,362.266,593.914,349.424,308.565,540.138,769.079,463.481,163.895,237.299,285.424,466.1,224.654,493.52,1674.225,4063.392,1370.598,472.447,957.289,609.428,338.42,243.509,745.35,1417.319,762.417,553.865,616.945,305.569,511.777,416.061,2007.687,312.874,1760.715,470.299,170.102,514.177,647.315,425.481,274.85,415.924,896.493,396.062,588.357,231.181,273.932,245.847,212.412,116.329,109.858,274.394,323.434,335.066,347.193,459.166,944.41,601.327,889.712,412.644,317.84,986.261,934.932,572.116,181.168,460.876,145.156,108.878,210.202,77.92,295.25,300.008,412.518,463.649,312.424,342.369,602.553,325.602,288.656,458.643,344.168,189.501,378.501,506.806,405.58,266.931,508.179,577.092,1968.061,3128.798,2617.171,810.468,1071.792,482.71,702.007,298.08,1139.23,623.801,1162.914,1203.468,673.113,606.991,499.32,344.082,916.323,1133.798,236.462,323.745,227.404,305.618,859.751,541.196,262.919,221.3,135.795,94.984,185.741,146.342,216.582,150.862,227.198,373.705,332.486,216.229,778.895,1204.286,326.503,380.38,1047.579,257.681,288.363,944.527,1025.858,1888.092,606.18,219.281,573.418,618.131,579.352,643.473,227.201,596.85,266.111,593.418,412.236,518.62,714.492,807.998,1833.123,1485.911,696.152,1044.399,1178.696,682.768,339.908,614.242,333.987,289.083,426.036,434.767,363.008,294.274,249.675,759.092,233.645,259.457,692.772,530.582,751.244,252.918,324.292,565.306,530.138,634.433,621.443,362.445,1462.934,578.493,404.427,432.71,381.631,206.741,803.279,286.361,454.727,989.949,1000.012,534.381,1225.959,2611.002,1238.904,1808.266,2668.663,1734.437,1991.659,1533.497,673.975,1417.797,1002.213,689.714,474.831,775.993,612.321,674.988,586.885,486.539,6750.373,1240.763,1031.138,1064.433,810.097,2543.442,1714.432,1408.587,2076.241,891.454,802.952,990.123,356.49,909.726,969.575,1157.716,408.802,557.485,790.536,760.441,903.066,478.393,406.574,460.658,270.44,397.786,2943.217,4367.234,1259.451,1068.328,966.188,1414.714,579.827,511.738,412.874,654.607,675.654,504.93,356.198,858.616,1158.323,1447.125,787.173,728.954,636.948,628.265,669.612,465.412,1222.997,749.451,462.962,472.928,432.435,342.099,1618.728,2358.947,952.987,460.716,651.763,975.681,444.398,645.867,449.599,193.003,278.721,545.444,842.045,277.826,994.515,588.675,591.108,309.423,892.268,276.425,502.627,968.723,404.031,211.579,444.69,715.557,984.707,1097.859,551.379,692.514,900.106,360.002,948.053,805.637,489.368,1676.558,1304.157,367.592,283.184,1023.029,456.415,763.262,343.508,461.29,879.775,1776.793,1251.296,591.245,573.997,1673.844,1283.242,2767.718,1120.511,657.294,746.819,905.747,599.259,715.33,481.675,327.764,388.74,1256.088,1555.066,601.571,277.709,213.939,322.601,214.083,472.872,296.863,364.37,746.543,378.365,967.733,5140.211,4083.258,1994.542,1976.259,888.817,461.462,437.566,1416.611,716.221,1318.431,481.782,2014.435,936.676,1459.321,855.198,732.281,466.019,450.272,560.57,469.751,622.444,518.498,933.561,1274.182,362.645,417.461,200.685,1204.422,1085.208,437.325,388.368,522.196,414.681,402.1,458.488,176.931,774.455,662.126,617.206,452.137,4865.578,3871.135,1343.329,634.081,483.47,1681.018,514.598,502.913,1322.138,529.723,572.34,348.409,713.894,228.335,215.652,253.718,284.838,694.79,180.093,810.769,563.133,209.468,355.301,1084.715,204.09,893.371,557.044,320.725,236.971,360.995,404.746,202.665,416.594,295.445,369.598,1691.926,445.675,502.376,451.028,754.112,460.168,253.657,293.696,364.866,139.172,187.996,297.765,167.774,288.681,128.716,179.501,428.036,213.013,396.147,290.492,459.26,333.25,604.208,535.843,218.827,379.209,623.314,309.742,1047.188,2658.829,741.273,2765.267,2446.593,900.038,1232.736,817.002,2687.132,3309.465,1746.003,699.151,574.566,262.053,505.975,270.49,1023.427,533.5,488.001,536.457,432.03,945.469,1080.591,611.695,611.907,1095.621,485.481,688.799,375.255,1322.925,2347.935,1281.055,1713.871,563.816,371.289,1137.167,1011.662,433.968,4755.422,2060.545,1118.297,1058.42,991.226,512.798,725.336,476.284,633.408,903.175,644.941,2829.545,1218.33,1149.1,755.961,1252.379,2399.314,350.433,457.851,727.54,748.377,2585.751,4337.831,2453.675,1355.272,2073.169,1425.068,1751.715,901.639,353.899,368.582,636.142,1082.148,271.744,399.517,439.441,377.24,330.026,233.732,285.884,308.136,639.158,734.67,567.183,310.671,995.761,12392.217,5461.011,2988.344,5529.668,2618.77,11929.186,2928.894,5355.073,1533.817,2310.282,2210.125,1805.742,2500.52,3272.782,1332.249,2270.554,2483.668,8790.039,13105.425,16039.554,8317.661,6814.545,3909.444,2716.544,2823.368,2433.446,3042.327,4014.336,2680.476,2166.982,8299.153,2107.079,2585.491,3224.808,2437.339,2865.693,1574.387,2219.401,2214.305,2410.523,1263.301,1232.671,1213.058,1789.33,827.919,1530.653,1732.94,1439.558,1552.842,1345.879,1394.187,3147.626,6162.965,7032.083,1330.471,2505.725,7118.551,2288.653,1286.682,1102.423,3249.307,1670.88,2218.379,2946.052,2525.484,1719.79,1630.798,1474.484,1299.503,434.158,1462.856,1914.008,1336.711,872.552,2661.102,1921.851,1223.061,892.979,1675.459,2747.98,3398.563,4782.692,3130.671,914.08,3275.661,3677.987,1920.096,1582.481,626.202,1699.704,3016.389,2348.542,3936.201,1440.961,2551.41,2929.114,3910.54,1731.929,1423.134,1630.803,823.665,1596.309,1843.181,1446.542,850.694,2297.843,856.543,883.961,501.157,1621.147,856.971,707.791,1351.166,795.198,938.608,485.179,455.671,1061.071,580.457,263.109,715.892,1587.285,993.923,1251.255,2659.143,996.502,853.854,744.677,711.983,3232.026,3662.831,807.0,555.69,1043.709,1292.106,987.334,375.225,316.734,438.411,289.699,537.944,942.885,797.012,1077.267,379.583,611.293,521.083,934.505,1175.247,499.493,1141.633,563.435,872.319,811.753,773.096,1412.344,3620.225,4714.694,669.244,1065.55,1598.224,847.615,1923.708,1020.52,1883.069,3076.446,2134.064,1453.728,11270.233,2936.896,6307.007,2166.477,1551.387,1853.874,1372.167,2298.452,1069.092,896.017,1027.708,1205.234,1794.761,2595.809,890.418,848.032,650.893,1088.28,200.664,502.739,575.785,921.978,808.706,3029.201,602.68,309.435,495.715,959.404,569.062,492.893,686.058,1227.456,2415.351,6515.3,1556.79,953.548,1004.564,1320.414,4557.466,1098.609,911.352,1232.801,1241.033,1343.423,769.908,447.129,647.478,822.26,767.131,569.507,437.851,1190.093,378.865,290.814,440.004,366.664,1587.445,389.51,1948.052,1274.222,418.255,155.696,281.607,310.623,166.909,303.48,700.347,271.28,110.636,520.183,820.569,810.861,1088.369,858.322,1295.596,2094.312,1503.768,1037.796,500.033,559.479,227.634,704.975,702.474,560.973,1364.022,508.316,349.588,640.477,527.515,1470.646,248.411,315.355,194.49,727.557,208.254,329.772,769.204,559.27,220.603,179.101,514.706,337.329,450.668,1473.433,2256.979,539.366,738.786,421.76,808.357,281.104,544.472,1304.849,1022.835,193.211,205.636,773.849,215.729,546.43,625.921,225.712,512.885,292.199,264.804,592.964,1204.967,418.402,742.071,437.497,433.652,1078.844,331.74,1040.031,872.767,1004.157,722.758,430.616,408.399,245.932,484.168,3624.12,976.418,394.652,1682.369,625.343,239.747,380.251,1597.606,848.428,708.537,664.832,371.165,750.007,1026.259,843.009,1023.456,1917.749,952.579,870.347,502.286,1363.581,780.743,1448.612,12431.885,6893.299,8886.959,3907.062,9540.759,4740.252,5895.644,16625.626,6312.555,3615.152,3860.571,2514.261,2760.668,1523.597,1871.628,2528.961,7365.0,8920.169,5768.383,6710.649,3346.652,4463.499,3666.88,6450.55,4832.119,5510.211,8186.365,3537.525,8281.314,10045.157,6383.577,5079.938,3813.839,3660.97,5728.121,7917.184,2421.103,5177.868,3136.173,2217.563,3832.957,1720.129,1543.371,1636.799,8034.61,4788.474,3850.793,1514.508,5392.819,1927.194,1163.751,1585.945,1209.542,1998.829,877.24,823.488,781.809,826.931,913.803,742.025,3002.547,1367.89,1044.189,1100.946,2047.804,2818.993,1017.674,1889.338,1032.258,579.044,748.169,927.378,1345.4,516.194,810.503,845.27,650.086,556.495,716.068,3167.786,1365.503,1120.129,1632.121,494.557,495.811,356.546,271.948,320.235,366.049,349.466,550.775,843.882,2000.798,961.087,470.513,438.616,819.214,594.347,286.774,251.089,602.025,267.413,278.638,425.458,282.646,1696.154,921.061,374.925,625.157,346.19,1447.882,338.668,501.822,996.179,1126.58,967.442,927.906,4074.406,898.707,1271.993,720.906,758.176,506.787,1384.601,2630.754,1180.051,296.364,385.161,594.547,303.281,206.3,1509.706,417.533,430.407,350.638,614.913,217.67,109.158,296.924,307.087,827.106,850.038,562.773,402.213,853.225,619.708,185.33,229.867,207.248,255.341,347.69,914.271,348.17,280.522,461.744,242.677,1689.641,1235.344,943.835,1181.751,733.24,268.104,381.13,818.733,1090.052,548.373,754.94,989.387,773.47,1064.937,1070.959,703.035,2594.209,1302.569,682.392,552.382,309.738,466.737,793.098,2376.261,856.232,754.519,404.143,168.334,1477.862,943.652,711.273,1748.362,1006.485,789.572,594.946,279.75,178.433,290.649,215.983,493.113,338.384,762.448,611.586,1334.322,294.505,303.188,134.407,516.94,1550.403,1126.795,485.425,622.304,1249.031,373.648,346.683,211.699,519.095,1088.352,529.813,523.314,772.507,209.114,687.664,329.146,352.705,444.147,395.78,325.339,513.402,784.247,986.546,1584.942,2185.948,785.321,729.112,453.787,897.861,262.964,404.52,171.003,580.24,118.207,406.641,160.17,743.848,437.773,1369.397,191.219,1229.096,398.903,403.85,322.726,970.586,568.304,478.038,404.745,1239.612,454.913,442.573,288.41,264.373,524.088,130.674,443.39,586.952,167.731,307.728,263.88,311.737,866.873,1745.621,745.983,309.615,328.348,383.704,1118.281,450.373,387.296,188.089,629.117,158.39,829.748,364.026,136.85,324.278,1060.597,707.567,409.192,443.098,510.64,923.325,605.203,716.174,198.6,554.733,1635.338,1598.253,4035.924,1229.607,1608.824,2794.958,636.725,1971.132,1481.98,1093.152,3786.967,1736.518,1289.176,1179.711,677.348,1259.158,841.34,248.067,451.306,413.411,883.511,395.721,304.827,431.303,1106.7,599.37,354.735,747.528,810.7,835.158,481.175,629.481,323.974,608.739,557.978,525.368,1225.958,840.532,1067.311,718.545,716.335,312.894,563.057,1017.419,618.553,512.007,588.984,294.695,278.158,217.027,537.444,269.51,225.5,501.376,691.99,483.791,127.283,709.697,467.43,307.414,507.697,422.858,256.808,1153.716,1055.198,1414.849,1144.706,1064.626,623.477,877.503,444.839,742.027,415.472,677.548,1051.317,655.2,370.676,1077.143,1051.053,784.457,4542.468,1733.555,1213.929,1538.198,2121.016,918.853,882.448,654.86,1728.875,631.103,301.013,661.938,933.172,370.951,202.456,406.614,314.65,592.089,26.727],\"type\":\"histogram\"},{\"marker\":{\"color\":\"#D2691E\"},\"mode\":\"lines\",\"name\":\"KDE\",\"x\":[3045.88,3047.2852525252524,3048.690505050505,3050.0957575757575,3051.5010101010103,3052.9062626262626,3054.3115151515153,3055.7167676767676,3057.1220202020204,3058.5272727272727,3059.9325252525255,3061.337777777778,3062.7430303030305,3064.148282828283,3065.5535353535356,3066.958787878788,3068.3640404040407,3069.769292929293,3071.1745454545458,3072.579797979798,3073.9850505050504,3075.390303030303,3076.7955555555554,3078.200808080808,3079.6060606060605,3081.0113131313133,3082.4165656565656,3083.8218181818183,3085.2270707070707,3086.6323232323234,3088.0375757575757,3089.4428282828285,3090.848080808081,3092.2533333333336,3093.658585858586,3095.0638383838386,3096.469090909091,3097.8743434343437,3099.279595959596,3100.6848484848488,3102.090101010101,3103.4953535353534,3104.900606060606,3106.3058585858585,3107.711111111111,3109.1163636363635,3110.5216161616163,3111.9268686868686,3113.3321212121214,3114.7373737373737,3116.1426262626264,3117.5478787878787,3118.9531313131315,3120.358383838384,3121.7636363636366,3123.168888888889,3124.5741414141416,3125.979393939394,3127.3846464646467,3128.789898989899,3130.1951515151513,3131.600404040404,3133.0056565656564,3134.410909090909,3135.8161616161615,3137.2214141414142,3138.6266666666666,3140.0319191919193,3141.4371717171716,3142.8424242424244,3144.2476767676767,3145.6529292929295,3147.0581818181818,3148.4634343434345,3149.868686868687,3151.2739393939396,3152.679191919192,3154.0844444444447,3155.489696969697,3156.8949494949493,3158.300202020202,3159.7054545454544,3161.110707070707,3162.5159595959594,3163.921212121212,3165.3264646464645,3166.7317171717173,3168.1369696969696,3169.5422222222223,3170.9474747474746,3172.3527272727274,3173.7579797979797,3175.1632323232325,3176.568484848485,3177.9737373737375,3179.37898989899,3180.7842424242426,3182.189494949495,3183.5947474747472,3185.0],\"y\":[0.001832905419240713,0.0015170993773343943,0.0009811990405335794,0.0010910781869862753,0.001662787664619852,0.002276584209048065,0.003017679469815101,0.004091626542089751,0.005452920992053675,0.006818537038424319,0.0076664779747402535,0.007643887894555952,0.007344902200072563,0.00827273925583825,0.011220488982456029,0.01494681923660121,0.016672754263443067,0.015298211710060586,0.013000656836147326,0.01136447782936633,0.009905415113226086,0.007991277793749363,0.005915182769079316,0.004603614839180802,0.004340216581875808,0.004677084159634987,0.004804286094145265,0.003945664227425191,0.0025142257578005694,0.0014727830724446968,0.0011591657181478472,0.0015827815995405762,0.0026670028851318566,0.003810420375174876,0.004026389180218125,0.003107185282237217,0.001940076730122543,0.0013880150787554427,0.0015444989246854268,0.0023609061649200076,0.0037401025635127546,0.005029582983599697,0.005321434602966492,0.004778565138234207,0.004284633110071723,0.004142142333983544,0.004650245486454227,0.005790340541463709,0.0068018904562159735,0.007335214235017366,0.008011875247544532,0.009032977214800161,0.009862320541122151,0.01015891479438546,0.010077897051723251,0.009700191176833918,0.00944402389099212,0.010385374840307136,0.012487699392384763,0.014125807036359036,0.014335489751832464,0.013760773754902053,0.013070724606546664,0.012663567468535765,0.013407581002278695,0.0152918031502357,0.01671953731557649,0.01690758767766308,0.0165814827586469,0.01570664895796692,0.014255369464538745,0.013369278115428072,0.012993378487870194,0.011780241643981209,0.009592167939552232,0.007696976248164002,0.006823155935995189,0.006619023196157732,0.007110669748385475,0.008153180108070628,0.008357004173573936,0.007467120695723313,0.006541623694037697,0.005979030384818917,0.00565790251287167,0.005607397002735248,0.00599245781550611,0.006338445734583271,0.0060092038421343755,0.0053319582929410685,0.004754442260061802,0.004333231721163359,0.004227903631578969,0.004279536987396199,0.003930156107007355,0.0029754130410062354,0.0017041868280610027,0.0007672145372132436,0.0005056108010257643,0.0005155116532610217],\"type\":\"scatter\"},{\"marker\":{\"color\":\"black\",\"size\":10},\"mode\":\"markers\",\"name\":\"Peaks\",\"x\":[3059.9325252525255,3068.3640404040407,3082.4165656565656,3093.658585858586,3104.900606060606,3120.358383838384,3130.1951515151513,3140.0319191919193,3158.300202020202,3168.1369696969696,3176.568484848485],\"y\":[0.0076664779747402535,0.016672754263443067,0.004804286094145265,0.004026389180218125,0.005321434602966492,0.01015891479438546,0.014335489751832464,0.01690758767766308,0.008357004173573936,0.006338445734583271,0.004279536987396199],\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"shapes\":[{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3059.9325252525255,\"x1\":3059.9325252525255,\"xref\":\"x\",\"y0\":0,\"y1\":0.007344902200072563,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3068.3640404040407,\"x1\":3068.3640404040407,\"xref\":\"x\",\"y0\":0,\"y1\":0.001159165718147847,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3082.4165656565656,\"x1\":3082.4165656565656,\"xref\":\"x\",\"y0\":0,\"y1\":0.004340216581875808,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3093.658585858586,\"x1\":3093.658585858586,\"xref\":\"x\",\"y0\":0,\"y1\":0.0013880150787554425,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3104.900606060606,\"x1\":3104.900606060606,\"xref\":\"x\",\"y0\":0,\"y1\":0.004142142333983544,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3120.358383838384,\"x1\":3120.358383838384,\"xref\":\"x\",\"y0\":0,\"y1\":0.00944402389099212,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3130.1951515151513,\"x1\":3130.1951515151513,\"xref\":\"x\",\"y0\":0,\"y1\":0.012663567468535765,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3140.0319191919193,\"x1\":3140.0319191919193,\"xref\":\"x\",\"y0\":0,\"y1\":0.0009811990405335785,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3158.300202020202,\"x1\":3158.300202020202,\"xref\":\"x\",\"y0\":0,\"y1\":0.006619023196157732,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3168.1369696969696,\"x1\":3168.1369696969696,\"xref\":\"x\",\"y0\":0,\"y1\":0.005607397002735248,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3176.568484848485,\"x1\":3176.568484848485,\"xref\":\"x\",\"y0\":0,\"y1\":0.004227903631578969,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3062.5744,\"xref\":\"x\",\"y0\":0.007505690087406408,\"y1\":0.007505690087406408,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.008915959990795457,\"y1\":0.008915959990795457,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3079.2688000000003,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.0045722513380105365,\"y1\":0.0045722513380105365,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3097.3544,\"xref\":\"x\",\"y0\":0.002707202129486784,\"y1\":0.002707202129486784,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3108.484,\"xref\":\"x\",\"y0\":0.004731788468475018,\"y1\":0.004731788468475018,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3123.7872,\"xref\":\"x\",\"y0\":0.00980146934268879,\"y1\":0.00980146934268879,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3133.5256,\"xref\":\"x\",\"y0\":0.013499528610184115,\"y1\":0.013499528610184115,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.00894439335909833,\"y1\":0.00894439335909833,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3153.0024,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.007488013684865834,\"y1\":0.007488013684865834,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3164.132,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.005972921368659259,\"y1\":0.005972921368659259,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3173.8704,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.004253720309487584,\"y1\":0.004253720309487584,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3059.9325252525255,\"x1\":3059.9325252525255,\"xref\":\"x\",\"y0\":0,\"y1\":0.0076664779747402535,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3068.3640404040407,\"x1\":3068.3640404040407,\"xref\":\"x\",\"y0\":0,\"y1\":0.016672754263443067,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3082.4165656565656,\"x1\":3082.4165656565656,\"xref\":\"x\",\"y0\":0,\"y1\":0.004804286094145265,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3093.658585858586,\"x1\":3093.658585858586,\"xref\":\"x\",\"y0\":0,\"y1\":0.004026389180218125,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3104.900606060606,\"x1\":3104.900606060606,\"xref\":\"x\",\"y0\":0,\"y1\":0.005321434602966492,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3120.358383838384,\"x1\":3120.358383838384,\"xref\":\"x\",\"y0\":0,\"y1\":0.01015891479438546,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3130.1951515151513,\"x1\":3130.1951515151513,\"xref\":\"x\",\"y0\":0,\"y1\":0.014335489751832464,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3140.0319191919193,\"x1\":3140.0319191919193,\"xref\":\"x\",\"y0\":0,\"y1\":0.01690758767766308,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3158.300202020202,\"x1\":3158.300202020202,\"xref\":\"x\",\"y0\":0,\"y1\":0.008357004173573936,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3168.1369696969696,\"x1\":3168.1369696969696,\"xref\":\"x\",\"y0\":0,\"y1\":0.006338445734583271,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3176.568484848485,\"x1\":3176.568484848485,\"xref\":\"x\",\"y0\":0,\"y1\":0.004279536987396199,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3062.5744,\"xref\":\"x\",\"y0\":0.007505690087406408,\"y1\":0.007505690087406408,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.008915959990795457,\"y1\":0.008915959990795457,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3079.2688000000003,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.0045722513380105365,\"y1\":0.0045722513380105365,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3097.3544,\"xref\":\"x\",\"y0\":0.002707202129486784,\"y1\":0.002707202129486784,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3108.484,\"xref\":\"x\",\"y0\":0.004731788468475018,\"y1\":0.004731788468475018,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3123.7872,\"xref\":\"x\",\"y0\":0.00980146934268879,\"y1\":0.00980146934268879,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3133.5256,\"xref\":\"x\",\"y0\":0.013499528610184115,\"y1\":0.013499528610184115,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.00894439335909833,\"y1\":0.00894439335909833,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3153.0024,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.007488013684865834,\"y1\":0.007488013684865834,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3164.132,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.005972921368659259,\"y1\":0.005972921368659259,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3173.8704,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.004253720309487584,\"y1\":0.004253720309487584,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3059.9325252525255,\"x1\":3059.9325252525255,\"xref\":\"x\",\"y0\":0,\"y1\":0.0076664779747402535,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3068.3640404040407,\"x1\":3068.3640404040407,\"xref\":\"x\",\"y0\":0,\"y1\":0.016672754263443067,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3082.4165656565656,\"x1\":3082.4165656565656,\"xref\":\"x\",\"y0\":0,\"y1\":0.004804286094145265,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3093.658585858586,\"x1\":3093.658585858586,\"xref\":\"x\",\"y0\":0,\"y1\":0.004026389180218125,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3104.900606060606,\"x1\":3104.900606060606,\"xref\":\"x\",\"y0\":0,\"y1\":0.005321434602966492,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3120.358383838384,\"x1\":3120.358383838384,\"xref\":\"x\",\"y0\":0,\"y1\":0.01015891479438546,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3130.1951515151513,\"x1\":3130.1951515151513,\"xref\":\"x\",\"y0\":0,\"y1\":0.014335489751832464,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3140.0319191919193,\"x1\":3140.0319191919193,\"xref\":\"x\",\"y0\":0,\"y1\":0.01690758767766308,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3158.300202020202,\"x1\":3158.300202020202,\"xref\":\"x\",\"y0\":0,\"y1\":0.008357004173573936,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3168.1369696969696,\"x1\":3168.1369696969696,\"xref\":\"x\",\"y0\":0,\"y1\":0.006338445734583271,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3176.568484848485,\"x1\":3176.568484848485,\"xref\":\"x\",\"y0\":0,\"y1\":0.004279536987396199,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3062.5744,\"xref\":\"x\",\"y0\":0.007505690087406408,\"y1\":0.007505690087406408,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.008915959990795457,\"y1\":0.008915959990795457,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3079.2688000000003,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.0045722513380105365,\"y1\":0.0045722513380105365,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3097.3544,\"xref\":\"x\",\"y0\":0.002707202129486784,\"y1\":0.002707202129486784,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3108.484,\"xref\":\"x\",\"y0\":0.004731788468475018,\"y1\":0.004731788468475018,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3123.7872,\"xref\":\"x\",\"y0\":0.00980146934268879,\"y1\":0.00980146934268879,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3133.5256,\"xref\":\"x\",\"y0\":0.013499528610184115,\"y1\":0.013499528610184115,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.00894439335909833,\"y1\":0.00894439335909833,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3153.0024,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.007488013684865834,\"y1\":0.007488013684865834,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3164.132,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.005972921368659259,\"y1\":0.005972921368659259,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3173.8704,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.004253720309487584,\"y1\":0.004253720309487584,\"yref\":\"y\"}]},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('f0efc821-18d5-43b5-ad6e-1133ea0ad873');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{},"output_type":"display_data"}],"source":["start_0 = time.time()\n","min_prom = kdy.max() * 0.0\n","pipsize = 0.01\n","max_width_pips = 20\n","# width_range=(1, max_width_pips * pipsize / ticks_per_sample)\n","width_range= max_width_pips * pipsize / ticks_per_sample\n","peaks, peak_props = signal.find_peaks(kdy, prominence=min_prom, width=width_range)\n","\n","peak_x = kdx[peaks]\n","peak_y = kdy[peaks]\n","# ------ prominence lines ------ #\n","left_base = peak_props['left_bases']\n","right_base = peak_props['right_bases']\n","line_x = peak_x\n","line_y0 = peak_y\n","line_y1 = peak_y # - peak_props['prominences']\n","print(\"prom_line elapsed_time :\", time.time() - start_0)\n","\n","\n","for x, y0, y1 in zip(line_x, line_y0, line_y1):\n","    fig.add_shape(type='line',\n","        xref='x', yref='y',\n","        # x0=x, y0=y0, x1=x, y1=y1,\n","        x0=x, y0=0, x1=x, y1=y1,\n","        line=dict(\n","            color='red',\n","            width=2,\n","        )\n","    )\n","\n","# ------ width ------ #\n","left_ips = peak_props['left_ips']\n","right_ips = peak_props['right_ips']\n","# width_x0 = kdx.min() + (left_ips * ticks_per_sample)\n","# width_x1 = kdx.min() + (right_ips * ticks_per_sample)\n","width_x0 = kdx.min() + (left_base * ticks_per_sample)\n","width_x1 = kdx.min() + (right_base * ticks_per_sample)\n","\n","# int_from = kdx.min() + (left_base * ticks_per_sample)\n","# int_to = kdx.min() + (right_base * ticks_per_sample)\n","# [kde.integrate_box_1d(x0, x1) for x0, x1 in zip(int_from, int_to)]\n","\n","width_y = peak_props['width_heights']\n","\n","for x0, x1, y in zip(width_x0, width_x1, width_y):\n","    fig.add_shape(type='line',\n","        xref='x', yref='y',\n","        x0=x0, y0=y, x1=x1, y1=y,\n","        line=dict(\n","            color='red',\n","            width=2,\n","        )\n","    )\n","fig.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zqj944n-WzyZ"},"outputs":[],"source":["# peaks  # ndarray\n","# kdx  # ndarray\n","# kdy  # ndarray\n","# kdx.min()\n","left_base * ticks_per_sample\n","# volume"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Rvqv0RGojo9h"},"outputs":[],"source":["print(peak_y)\n","print(peak_props['prominences'])\n","peak_props"]},{"cell_type":"markdown","metadata":{"id":"c2729DJ6h720"},"source":["##### imb."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Rucj-iepiR_-"},"outputs":[],"source":["t_df = res_df_.iloc[-120:-100]\n","a_data = t_df.to_numpy()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":537},"executionInfo":{"elapsed":5,"status":"ok","timestamp":1648801482583,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"ktm1aB-Bh7GH","outputId":"6aba1d34-3575-486a-9c29-941dc18a00fc"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 1080x648 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(15, 9))\n","nrows, ncols = 1, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        # height_ratios=[3, 1]\n","                        )\n","\n","ax = fig.add_subplot(gs[0])\n","\n","# ------ candles ------ #\n","candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","_ = [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jMQBhQ1Ljt5Y"},"outputs":[],"source":["def imb_ratio_v4(df, itv):\n","\n","  itv_num = to_itvnum(itv)\n","\n","  close = df['close_{}'.format(itv)].to_numpy()\n","  open = df['open_{}'.format(itv)].to_numpy()\n","\n","  b1_close = df['close_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_open = df['open_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_high = df['high_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_low = df['low_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","  body_range = abs(close - open)\n","  b1_body_range = abs(b1_close - b1_open)\n","\n","  df['body_rel_ratio_{}'.format(itv)] = body_range / b1_body_range\n","\n","  short_body_range = np.where(close <= b1_low, body_range, b1_body_range)\n","  long_body_range = np.where(close >= b1_high, body_range, b1_body_range)\n","\n","  # 추후에 통계 측정해야함 -> bir 에 따른 개별 trader 의 epout / tpep 이라던가 => short 에 양봉은 취급안함 (why use np.nan)\n","  df['short_ir_{}'.format(itv)] = np.where(close < open, (b1_low - close) / short_body_range, np.nan) # close < open & close < b1_low\n","  df['long_ir_{}'.format(itv)] = np.where(close > open, (close - b1_high) / long_body_range, np.nan) # close > open & close > b1_high\n","\n","  return"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"I1Vq_BiKpY3P"},"outputs":[],"source":["def imb_ratio_v3(df, itv):\n","\n","  itv_num = to_itvnum(itv)\n","\n","  # high = df['high_{}'.format(itv)].to_numpy()\n","  # low = df['low_{}'.format(itv)].to_numpy()\n","  # candle_range = high - low\n","\n","  close = df['close_{}'.format(itv)].to_numpy()\n","  open = df['open_{}'.format(itv)].to_numpy()\n","\n","  b1_close = df['close_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_open = df['open_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_high = df['high_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_low = df['low_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","  body_range = abs(close - open)\n","  b1_body_range = abs(b1_close - b1_open)\n","\n","  df['body_rel_ratio_{}'.format(itv)] = body_range / b1_body_range\n","\n","  short_body_ratio = np.where(close <= b1_low, body_range, b1_body_range)\n","  long_body_range = np.where(close >= b1_high, body_range, b1_body_range)\n","\n","  # 추후에 통계 측정해야함 -> bir 에 따른 개별 trader 의 epout / tpep 이라던가 => short 에 양봉은 취급안함 (why use np.nan)\n","  df['short_ir_{}'.format(itv)] = np.where(close < open, (b1_low - close) / body_range, np.nan) # close < open & close < b1_low\n","  df['long_ir_{}'.format(itv)] = np.where(close > open, (close - b1_high) / body_range, np.nan) # close > open & close > b1_high\n","\n","  return"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":372,"status":"ok","timestamp":1648807273349,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"mtnMUkhwkdrE","outputId":"b7cff2cd-63d3-4109-8753-d2192079e565"},"outputs":[{"data":{"text/plain":["index\n","2022-02-17 08:30:59.999         NaN\n","2022-02-17 08:31:59.999         NaN\n","2022-02-17 08:32:59.999         NaN\n","2022-02-17 08:33:59.999         NaN\n","2022-02-17 08:34:59.999         NaN\n","2022-02-17 08:35:59.999   -0.022654\n","2022-02-17 08:36:59.999   -0.022654\n","2022-02-17 08:37:59.999   -0.022654\n","2022-02-17 08:38:59.999   -0.022654\n","2022-02-17 08:39:59.999   -0.022654\n","2022-02-17 08:40:59.999    0.559585\n","2022-02-17 08:41:59.999    0.559585\n","2022-02-17 08:42:59.999    0.559585\n","2022-02-17 08:43:59.999    0.559585\n","2022-02-17 08:44:59.999    0.559585\n","2022-02-17 08:45:59.999    0.429719\n","2022-02-17 08:46:59.999    0.429719\n","2022-02-17 08:47:59.999    0.429719\n","2022-02-17 08:48:59.999    0.429719\n","2022-02-17 08:49:59.999    0.429719\n","Name: short_ir_5T, dtype: float64"]},"execution_count":116,"metadata":{},"output_type":"execute_result"}],"source":["imb_ratio(t_df, \"5T\")\n","# imb_ratio_v3(t_df, \"5T\")\n","# imb_ratio_v4(t_df, \"5T\")\n","\n","t_df.tail(100).short_ir_5T  # .461871\n","# t_df.iloc[:, -10:]\n","# t_df.dtypes"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":375,"status":"ok","timestamp":1648807284664,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"RVUs1YE_pgBI","outputId":"0ad635a5-e0b9-40c9-c28f-6ebae5494c7b"},"outputs":[{"data":{"text/plain":["index\n","2022-02-17 08:30:59.999         NaN\n","2022-02-17 08:31:59.999         NaN\n","2022-02-17 08:32:59.999         NaN\n","2022-02-17 08:33:59.999         NaN\n","2022-02-17 08:34:59.999         NaN\n","2022-02-17 08:35:59.999   -0.030303\n","2022-02-17 08:36:59.999   -0.030303\n","2022-02-17 08:37:59.999   -0.030303\n","2022-02-17 08:38:59.999   -0.030303\n","2022-02-17 08:39:59.999   -0.030303\n","2022-02-17 08:40:59.999    0.621583\n","2022-02-17 08:41:59.999    0.621583\n","2022-02-17 08:42:59.999    0.621583\n","2022-02-17 08:43:59.999    0.621583\n","2022-02-17 08:44:59.999    0.621583\n","2022-02-17 08:45:59.999    1.000000\n","2022-02-17 08:46:59.999    1.000000\n","2022-02-17 08:47:59.999    1.000000\n","2022-02-17 08:48:59.999    1.000000\n","2022-02-17 08:49:59.999    1.000000\n","Name: short_ir_5T, dtype: float64"]},"execution_count":117,"metadata":{},"output_type":"execute_result"}],"source":["# imb_ratio(t_df, \"5T\")\n","# imb_ratio_v3(t_df, \"5T\")\n","imb_ratio_v4(t_df, \"5T\")\n","\n","t_df.tail(100).short_ir_5T  # .461871\n","# t_df.iloc[:, -10:]\n","# t_df.dtypes"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"bieHiKjBkuFL"},"outputs":[],"source":["# ------ rtc 1, 0 개념 ------ #\n","# short_rtc_1 = close\n","# short_rtc_0 = b1_low\n","\n","# long_rtc_1 = close\n","# long_rtc_0 = b1_high\n","\n","# rtc 로 활용하려면, col 로 추가해야할 것 -> 추가할만한 col_name 은 아님\n","# 1. h_candle 인 경우 -> ?\n","#   a. h_candle_v3 먹이고, open_{}.shift(num_itv).to_numpy() 진행 -> ex. res_df['close_{}'.format(hc_itv)].shift(itv_num).to_numpy() "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3X6bMXJIjPYy"},"outputs":[],"source":["# 1. 현재 종가 - 이전 고가 = imb_range (long)\n","long_imb_range = t_df.close - t_df.high.shift(1)\n","# 2. 이전 저가 - 현재 종가 - imb_range (short)\n","short_imb_range = t_df.low.shift(1) - t_df.close"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"q1nEA19v7Qpj"},"outputs":[],"source":["from math import floor\n","\n","\n","def _calc_dev(base_price, price):\n","    return 100 * (price - base_price) / base_price\n","\n","\n","def zigzag(highs, lows, depth=10, dev_threshold=5):\n","    def pivots(src_raw, length, isHigh):\n","        src = list(reversed(src_raw))\n","        bar_index = list(range(len(src)))\n","        for start in range(0, len(src)):\n","            if start + 2 * length + 1 > len(src) - 1:\n","                return\n","            p = 0\n","            if length < len(src) - start:\n","                p = src[start + length]\n","            if length == 0:\n","                yield 0, p\n","            else:\n","                isFound = True\n","                for i in range(start, start + length):\n","                    if isHigh and src[i] > p:\n","                        isFound = False\n","                    if not isHigh and src[i] < p:\n","                        isFound = False\n","                for i in range(start + length + 1, start + 2 * length + 1):\n","                    if isHigh and src[i] >= p:\n","                        isFound = False\n","                    c = not isHigh and src[i] <= p\n","                    if c:\n","                        isFound = False\n","                if isFound:\n","                    yield (bar_index[start + length], p)\n","                else:\n","                    yield None, None\n","\n","    data_highs = [x for x in pivots(highs, floor(depth / 2), True) if x[0]]\n","    data_lows = [x for x in pivots(lows, floor(depth / 2), False) if x[0]]\n","\n","    raw_pairs = []\n","\n","    for i, (ind, p) in enumerate(data_highs):\n","        lows_d = sorted([(ind_l, p_l) for ind_l, p_l in data_lows if ind > ind_l], key=lambda x: x[0])\n","        if lows_d:\n","            lows = lows_d[-1]\n","\n","            if abs(_calc_dev(lows[1], p)) >= dev_threshold:\n","                raw_pairs.append(\n","                    ((ind, p),\n","                     (lows[0], lows[1]))\n","                )\n","\n","    result = []\n","\n","    for (i_h, p_h),(i_l, p_l) in raw_pairs:\n","        if not result:\n","            result.append(((i_h, p_h),(i_l, p_l)))\n","            continue\n","\n","        if i_l == result[-1][1][0]:\n","            if p_h > result[-1][0][1]:\n","                result = result[:-1]\n","            else:\n","                continue\n","\n","        result.append(((i_h, p_h),(i_l, p_l)))\n","\n","    return result\n","\n","# highs, lows = t_df.high.to_numpy(), t_df.low.to_numpy()\n","# zigzag(highs, lows, depth=5, dev_threshold=5)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fGlmdyb97j4Q"},"outputs":[],"source":["t_df = res_df_.iloc[-120:]\n","a_data = t_df.to_numpy()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ropzIp0wUPAA"},"outputs":[],"source":["# import plotly.express as px\n","# import plotly.graph_objects as go\n","\n","def get_dist_plot(c, v, kx, ky):\n","    fig = go.Figure()\n","    fig.add_trace(go.Histogram(name='Vol Profile', x=c, y=v, nbinsx=150, \n","                               histfunc='sum', histnorm='probability density',\n","                               marker_color='#B0C4DE'))\n","    fig.add_trace(go.Scatter(name='KDE', x=kx, y=ky, mode='lines', marker_color='#D2691E'))    \n","\n","    peaks,_ = signal.find_peaks(kdy)\n","    pkx = kdx[peaks]\n","    pky = kdy[peaks]\n","    pk_marker_args=dict(size=10, color='black')\n","    fig.add_trace(go.Scatter(name=\"Peaks\", x=pkx, y=pky, mode='markers', marker=pk_marker_args))\n","    fig.show()\n","\n","    return fig"]},{"cell_type":"markdown","metadata":{"id":"qsyPhNR8yP1c"},"source":["##### dump"]},{"cell_type":"code","source":["_ = wave_range_v8(res_df, config.loc_set.point.p1_period1, config.loc_set.point.p1_period2, ltf_df=None)"],"metadata":{"id":"YAspOgPqRU8b"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df = res_df\n","period1, period2 = config.loc_set.point.p1_period1, config.loc_set.point.p1_period2\n","ltf_df=None\n","touch_period=50"],"metadata":{"id":"saP02MvMUt1U"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","itv = pd.infer_freq(df.index)\n","\n","donchian_channel_v2(df, period1) \n","donchian_channel_v2(df, period2) \n","dc_lower_, dc_upper_ = df['dc_lower_{}{}'.format(itv, period1)].to_numpy(), df['dc_upper_{}{}'.format(itv, period1)].to_numpy()\n","dc_lower2_, dc_upper2_ = df['dc_lower_{}{}'.format(itv, period2)].to_numpy(), df['dc_upper_{}{}'.format(itv, period2)].to_numpy()\n","\n","short_base = (dc_lower_ + dc_upper2_) / 2\n","long_base = (dc_upper_ + dc_lower2_) / 2\n","df['short_base_{}{}{}'.format(itv, period1, period2)] = short_base\n","df['long_base_{}{}{}'.format(itv, period1, period2)] = long_base\n","\n","len_df = len(df)   \n","short_open_res = np.ones(len_df)\n","long_open_res = np.ones(len_df)\n","\n","data_cols = ['open', 'high', 'low']\n","open, high, low = [df[col_].to_numpy() for col_ in data_cols]\n","\n","short_upper_touch_idx = pd.Series(np.where(high >= dc_upper2_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()  # min -> max\n","short_lower_touch_idx = pd.Series(np.where(low <= dc_lower_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨    \n","short_lower_touch_idx_min = pd.Series(np.where(low <= dc_lower_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).min().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨    \n","short_open_res *= (high >= short_base) & (short_base >= open) & (short_upper_touch_idx < short_lower_touch_idx)\n","\n","\n","df['short_upper_touch_idx_{}{}{}'.format(itv, period1, period2)] = short_upper_touch_idx\n","df['short_lower_touch_idx_{}{}{}'.format(itv, period1, period2)] = short_lower_touch_idx\n","# df['short_lower_touch_idx_min_{}{}{}'.format(itv, period1, period2)] = short_lower_touch_idx_min\n","df['short_upper_touch_line_{}{}{}'.format(itv, period1, period2)] = get_line(short_upper_touch_idx, dc_upper2_)\n","df['short_lower_touch_line_{}{}{}'.format(itv, period1, period2)] = get_line(short_lower_touch_idx, dc_lower_)\n","df['short_wave_point_{}{}{}'.format(itv, period1, period2)] = short_open_res\n","\n","long_lower_touch_idx = pd.Series(np.where(low <= dc_lower2_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()       \n","long_upper_touch_idx = pd.Series(np.where(high >= dc_upper_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()    \n","long_upper_touch_idx_min = pd.Series(np.where(high >= dc_upper_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).min().to_numpy()    \n","long_open_res *= (open >= long_base) & (long_base >= low) & (long_lower_touch_idx < long_upper_touch_idx)\n","\n","wave_min_bars = 20\n","wave_max_bars = 40\n","short_p1_idx = np.where(res_df['short_wave_point_{}{}{}'.format(itv, period1, period2)], np.arange(len_df), np.nan)\n","short_prev_p1_idx = pd.Series(short_p1_idx).rolling(wave_max_bars, min_periods=1).min().to_numpy()\n","\n","short_high = np.full_like(high, np.nan)\n","short_valid_idx = (short_p1_idx - short_prev_p1_idx) >= wave_min_bars\n","short_high[short_valid_idx] = np.array([np.min(high[int(iin):int(iout)]) for iin, iout in zip(short_prev_p1_idx[short_valid_idx], short_p1_idx[short_valid_idx])])\n","\n","long_p1_idx = np.where(res_df['long_wave_point_{}{}{}'.format(itv, period1, period2)], np.arange(len_df), np.nan)\n","long_prev_p1_idx = pd.Series(long_p1_idx).rolling(wave_max_bars, min_periods=1).min().to_numpy()\n","\n","long_low = np.full_like(low, np.nan)\n","long_valid_idx = (long_p1_idx - long_prev_p1_idx) >= wave_min_bars\n","long_low[long_valid_idx] = np.array([np.min(low[int(iin):int(iout)]) for iin, iout in zip(long_prev_p1_idx[long_valid_idx], long_p1_idx[long_valid_idx])])\n"],"metadata":{"id":"A21BXePPSPcl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(len(long_p1_idx))\n","print(np.sum(np.isnan(long_p1_idx)))\n","print(np.sum(np.isnan(long_prev_p1_idx)))"],"metadata":{"id":"h8YQptgzU2kZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# min_low[~equal_idx] = \n","# long_p1_idx[~np.isnan(long_p1_idx)]"],"metadata":{"id":"xAbtsLi8VRNm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# valid_idx\n","# print(long_low)\n","print(long_low[valid_idx])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"b01vSN6SWZYX","executionInfo":{"status":"ok","timestamp":1650364149142,"user_tz":-540,"elapsed":325,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"27297531-56d1-4130-8fdf-b15ecb317bc0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[ 386.2   386.2   387.96 ... 3058.58 3058.58 3052.65]\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"M3OxtsKmEmjr"},"outputs":[],"source":["comp_col_list = res_df_.columns"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1649654863270,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"iuNX7A7MEnYk","outputId":"1f7a942f-b03e-46d4-904b-bac88624f2bb"},"outputs":[{"data":{"text/plain":["Index(['open', 'high', 'low', 'close', 'volume', 'dc_upper_5T', 'dc_lower_5T', 'dc_base_5T', 'dc_upper_15T', 'dc_lower_15T', 'dc_base_15T', 'bb_upper_5T', 'bb_lower_5T', 'bb_upper_15T', 'bb_lower_15T'], dtype='object')"]},"execution_count":102,"metadata":{},"output_type":"execute_result"}],"source":["comp_col_list"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"D3UNq1Y4Ef1V"},"outputs":[],"source":["db_res_df = res_df_.copy()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6tJ-B_GhEvHx"},"outputs":[],"source":["gap_df = res_df_[comp_col_list] - db_res_df"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":334,"status":"ok","timestamp":1649654897410,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"nEuH8TKrFA5J","outputId":"bb20a375-f7dd-439d-f10a-c7763766ff15"},"outputs":[{"data":{"text/plain":["open            0.000000e+00\n","high            0.000000e+00\n","low             0.000000e+00\n","close           0.000000e+00\n","volume          0.000000e+00\n","dc_upper_5T     0.000000e+00\n","dc_lower_5T     9.094947e-13\n","dc_base_5T      0.000000e+00\n","dc_upper_15T    0.000000e+00\n","dc_lower_15T    9.094947e-13\n","dc_base_15T     0.000000e+00\n","bb_upper_5T     0.000000e+00\n","bb_lower_5T     4.547474e-13\n","bb_upper_15T    0.000000e+00\n","bb_lower_15T    4.547474e-13\n","dtype: float64"]},"execution_count":106,"metadata":{},"output_type":"execute_result"}],"source":["gap_df.max() # .tail(1000)  # [gap_df > 0.1]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9VOxiJB1yUTI"},"outputs":[],"source":["\n","def fill_na(arr_, iin, iout, fill_value):\n","  arr_[iin:iout + 1] = fill_value\n","\n","  # 1. cross_point 찾기\n","  #   a. cross_over & cross_under\n","# def wave_range(t_df):\n","tf_entry = 'T'\n","tf_entry_num = to_itvnum(tf_entry)\n","base_shift_size = 3 # 3T used\n","\n","np_timeidx = np.array([intmin_np(date_) for date_ in t_df.index.to_numpy()])\n","\n","close = t_df.close.to_numpy()\n","b1_close = t_df.close.shift(tf_entry_num).to_numpy()  # 일단, 1 로 설정\n","dc_base_3T = t_df.dc_base_3T.to_numpy()\n","b1_dc_base_3T = t_df.dc_base_3T.shift(3).to_numpy()\n","\n","crossover = (close > dc_base_3T) & (b1_dc_base_3T > b1_close) & (np_timeidx % tf_entry_num == tf_entry_num - 1)\n","crossunder = (close < dc_base_3T) & (b1_dc_base_3T < b1_close) & (np_timeidx % tf_entry_num == tf_entry_num - 1)\n","\n","# 1. crossover ~ crossunder's high (over 과 under 의 index 포함해야함)\n","# 2. crossunder ~ crossover's low\n","high = t_df.high.to_numpy()\n","low = t_df.low.to_numpy()\n","\n","# print(np.sum(crossover))\n","# print(np.sum(crossunder))\n","\n","# pairing -> 더 긴 배열의 시작 index 가 더 작음\n","co_idx = np.argwhere(crossover)\n","cu_idx = np.argwhere(crossunder)\n","\n","print(co_idx)\n","print(cu_idx)\n","\n","# 2. 길이가 다른 경우\n","#  a. 길이가 긴 쪽이 먼저\n","if len(co_idx) > len(cu_idx):\n","  upper_zone = np.hstack((co_idx[:-1], cu_idx))  \n","  lower_zone = np.hstack((cu_idx, co_idx[1:]))  \n","elif len(co_idx) < len(cu_idx):\n","  upper_zone = np.hstack((co_idx, cu_idx[1:]))  \n","  lower_zone = np.hstack((cu_idx[:-1], co_idx))  \n","else:\n","  # 1. 길이가 같은 경우\n","  #   뭐가 먼저인지 판단하는 logic\n","  if co_idx[0] < cu_idx[0]:\n","    #   a. co 가 먼저인 경우\n","    upper_zone = np.hstack((co_idx, cu_idx))  \n","    lower_zone = np.hstack((cu_idx[:-1], co_idx[1:]))  \n","  else:\n","    #   b. cu 가 먼저인 경우\n","    upper_zone = np.hstack((co_idx[:-1], cu_idx[1:]))  \n","    lower_zone = np.hstack((cu_idx, co_idx))  \n","\n","# print(upper_zone)\n","# print(lower_zone)\n","\n","# make envelope\n","wave_high = np.full_like(high, np.nan)\n","wave_low = np.full_like(low, np.nan)\n","\n","fill_upper_zone = np.hstack((upper_zone[:-1, [1]], upper_zone[1:, [1]]))\n","fill_lower_zone = np.hstack((lower_zone[:-1, [1]], lower_zone[1:, [1]]))\n","\n","for items in zip(fill_upper_zone, upper_zone):\n","  print(items)\n","\n","[fill_na(wave_high, f_iin, f_iout, high[iin:iout + 1].max()) for (f_iin, f_iout), (iin, iout) in zip(fill_upper_zone, upper_zone)]\n","[fill_na(wave_low, f_iin, f_iout, low[iin:iout + 1].min()) for (f_iin, f_iout), (iin, iout) in zip(fill_lower_zone, lower_zone)]\n","# [high[iin:iout + 1].max() for iin, iout in upper_zone]\n","# [low[iin:iout + 1].min() for iin, iout in lower_zone]\n","\n","# t_df['fill_wave_high'] = pd.Series(wave_high).bfill().to_numpy()\n","# t_df['fill_wave_low'] = pd.Series(wave_low).bfill().to_numpy()\n","# t_df['fill_wave_high'] = pd.Series(wave_high).ffill().to_numpy()\n","# t_df['fill_wave_low'] = pd.Series(wave_low).ffill().to_numpy()\n","t_df['fill_wave_high'] = wave_high\n","t_df['fill_wave_low'] = wave_low\n","\n","  # return "]},{"cell_type":"markdown","metadata":{"id":"xpyP5t8Ht_pE"},"source":["### calc recursive indi's min_period"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"N1Hbm4OA4Tkk"},"outputs":[],"source":["ticker_prcn = get_precision_by_price(res_df.close.iloc[-1]) + 2\n","\n","target_len = 300000\n","slice_len_list = list(range(50, 10000, 100))\n","slice_len_list.insert(0, target_len)\n","\n","start_0 = time.time()\n","# prev_int_, prev_pnts_ = None, None\n","offset = 1\n","\n","for sl_idx, sample_len in enumerate(slice_len_list):\n","\n","  sample_df = res_df.iloc[-sample_len -offset:-offset]\n","  sample_len2 = sample_len\n","\n","  # --------- input using indi.s --------- #\n","  # res = ema_v0(sample_df['close'], 190)\n","  res = rsi(sample_df, 14)\n","\n","    #    to_htf()    #\n","  # df_5T = to_htf(sample_df, itv_='5T', offset='1h')\n","  # sample_len2 = len(df_5T)\n","\n","  # # --------- input using htf_indi. --------- #\n","  # res = ema(df_5T['close'], 195)\n","  # -------------------------------------- #\n","\n","  res_last_row = res.iloc[-1]\n","  if pd.isnull(res_last_row):\n","    continue\n","\n","  # print(res_last_row)\n","  # break\n","\n","  # sample_df = sample_df.join(to_lower_tf_v2(sample_df, df_5T, [-1]), how='inner')\n","\n","\n","  #   자리수 분할 계산    #\n","  int_, points_ = str(res_last_row).split('.')\n","  pnts_ = points_[:ticker_prcn]\n","\n","  if sl_idx == 0:\n","    target_int_ = int_\n","    target_pnts_ = pnts_\n","    print(\"target {} ({}) -> {} {}\".format(sample_len, sample_len2, int_, points_))\n","\n","  else:\n","    if target_int_ == int_ and target_pnts_ == pnts_:\n","      # print(sample_len, \"({})\".format(sample_len2), '->', int_, pnts_, end='\\n\\n')\n","      print(\"{} ({}) -> {} {}\\n\".format(sample_len, sample_len2, int_, points_))\n","      break\n","\n","print(time.time() - start_0)  # (1301)(1361)(1301)"]},{"cell_type":"markdown","metadata":{"id":"rrIGjmUzqU-D"},"source":["## import utils & config"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"SeJan_0t95yL","executionInfo":{"status":"ok","timestamp":1650633818432,"user_tz":-540,"elapsed":5392,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["frame_ver = \"0114_htf\"\n","ID_arr = np.array(['v3', 'v5_2'])\n","\n","utils_public_name = \"{}.utils.{}_utils_public\".format(strat_pkg, frame_ver)\n","utils_public_lib = importlib.import_module(utils_public_name)\n","utils_public = utils_public_lib   # temporary\n","\n","u_name_list = [\"{}.utils.{}_utils_{}\".format(strat_pkg, frame_ver, id_) for id_ in ID_arr]\n","utils_arr = np.array([importlib.import_module(u_name) for u_name in u_name_list])\n","\n","config_name_list = [\"{}_config_{}.json\".format(frame_ver, id_) for id_ in ID_arr]\n","cfg_path_list = [os.path.join(current_path, strat_pkg, \"config\", name_) for name_ in config_name_list]\n","cfg_file_list = [open(cfg_path) for cfg_path in cfg_path_list]\n","config_arr = np.array([EasyDict(json.load(cfg_)) for cfg_ in cfg_file_list])\n","\n","# ------ opened files should be closed --> 닫지 않으면 reopen 시 error occurs ------ #\n","_ = [cfg_.close() for cfg_ in cfg_file_list]\n","show_plot = 1   # idep's var - do not touch"]},{"cell_type":"markdown","metadata":{"id":"leSQlImg4_9L"},"source":["### utils_"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"CB2yZdQ95Cdg","executionInfo":{"status":"ok","timestamp":1650633819558,"user_tz":-540,"elapsed":1130,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# import pandas as pd\n","# import numpy as np\n","# import logging\n","\n","sys_log = logging.getLogger()\n","\n","def get_line(touch_idx, rtc_):\n","    touch_idx_copy = touch_idx.copy()\n","\n","    nan_idx = np.isnan(touch_idx_copy)\n","    touch_idx_copy[nan_idx] = 0  # for indexing array\n","    touch_line = rtc_[touch_idx_copy.astype(int)].copy()\n","    touch_line[nan_idx] = np.nan  # for true comp.\n","\n","    return touch_line\n","\n","\n","def enlist_rtc(res_df, config, np_timeidx):\n","    selection_id = config.selection_id\n","    # ------------ rtc_gap ------------ #\n","    short_epout_1_, long_epout_1_ = 'short_epout_1_{}'.format(selection_id), 'long_epout_1_{}'.format(selection_id)\n","    short_epout_0_, long_epout_0_ = 'short_epout_0_{}'.format(selection_id), 'long_epout_0_{}'.format(selection_id)\n","    short_tp_1_, long_tp_1_ = 'short_tp_1_{}'.format(selection_id), 'long_tp_1_{}'.format(selection_id)\n","    short_tp_0_, long_tp_0_ = 'short_tp_0_{}'.format(selection_id), 'long_tp_0_{}'.format(selection_id)\n","\n","    # b1_itv_num = to_itvnum(config.loc_set.point.p2_itv0)\n","    # b2_itv_num = to_itvnum(config.loc_set.point.p2_itv0) * 2  # multi 2 for imb_v2\n","\n","    itv = config.loc_set.point.p1_itv1\n","    period1 = config.loc_set.point.p1_period1\n","    period2 = config.loc_set.point.p1_period2\n","\n","    res_df[short_tp_1_] = res_df['dc_lower_{}{}'.format(itv, period1)]\n","    # res_df[short_tp_0_] = res_df['dc_upper_{}{}'.format(itv, period2)]\n","    res_df[short_tp_0_] = res_df['dc_upper_15T4']\n","    res_df[long_tp_1_] = res_df['dc_upper_{}{}'.format(itv, period1)]\n","    # res_df[long_tp_0_] = res_df['dc_lower_{}{}'.format(itv, period2)]\n","    res_df[long_tp_0_] = res_df['dc_lower_15T4']\n","\n","    # res_df[short_tp_1_] = res_df['short_wave_low_{}{}{}'.format(itv, period1, period2)]\n","    # res_df[short_tp_0_] = res_df['short_wave_high_{}{}{}'.format(itv, period1, period2)]\n","    # res_df[long_tp_1_] = res_df['long_wave_high_{}{}{}'.format(itv, period1, period2)]\n","    # res_df[long_tp_0_] = res_df['long_wave_low_{}{}{}'.format(itv, period1, period2)]\n","\n","    if config.loc_set.point.p2_itv1 != \"None\":\n","        p2_period1 = config.loc_set.point.p2_period1\n","        p2_period2 = config.loc_set.point.p2_period2\n","        res_df[short_epout_1_] = res_df['dc_lower_{}{}'.format(config.loc_set.point.p2_itv1, p2_period1)]\n","        res_df[short_epout_0_] = res_df['dc_upper_{}{}'.format(config.loc_set.point.p2_itv0, p2_period2)]\n","        res_df[long_epout_1_] = res_df['dc_upper_{}{}'.format(config.loc_set.point.p2_itv1, p2_period1)]\n","        res_df[long_epout_0_] = res_df['dc_lower_{}{}'.format(config.loc_set.point.p2_itv0, p2_period2)]\n","    else:\n","        res_df[short_epout_1_] = res_df['dc_lower_{}{}'.format(itv, period1)]\n","        res_df[short_epout_0_] = res_df['dc_upper_15T4']\n","        res_df[long_epout_1_] = res_df['dc_upper_{}{}'.format(itv, period1)]\n","        res_df[long_epout_0_] = res_df['dc_lower_15T4']\n","\n","        # res_df[short_epout_1_] = res_df['short_wave_low_{}{}{}'.format(itv, period1, period2)]\n","        # res_df[short_epout_0_] = res_df['short_wave_high_{}{}{}'.format(itv, period1, period2)]\n","        # res_df[long_epout_1_] = res_df['long_wave_high_{}{}{}'.format(itv, period1, period2)]\n","        # res_df[long_epout_0_] = res_df['long_wave_low_{}{}{}'.format(itv, period1, period2)]\n","\n","    # ------ inversion ------ #\n","    if config.pos_set.short_inversion or config.pos_set.long_inversion:\n","        res_df.rename({short_tp_1_: long_tp_1_, long_tp_1_: short_tp_1_}, axis=1, inplace=True)\n","        res_df.rename({short_tp_0_: long_tp_0_, long_tp_0_: short_tp_0_}, axis=1, inplace=True)\n","        res_df.rename({short_epout_1_: long_epout_1_, long_epout_1_: short_epout_1_}, axis=1, inplace=True)\n","        res_df.rename({short_epout_0_: long_epout_0_, long_epout_0_: short_epout_0_}, axis=1, inplace=True)\n","\n","    res_df['short_tp_gap_{}'.format(selection_id)] = abs(res_df[short_tp_1_] - res_df[short_tp_0_])\n","    res_df['long_tp_gap_{}'.format(selection_id)] = abs(res_df[long_tp_1_] - res_df[long_tp_0_])\n","    res_df['short_epout_gap_{}'.format(selection_id)] = abs(res_df[short_epout_1_] - res_df[short_epout_0_])\n","    res_df['long_epout_gap_{}'.format(selection_id)] = abs(res_df[long_epout_1_] - res_df[long_epout_0_])\n","\n","    # ------------ dtk_gap ------------ #\n","    # res_df['short_dtk_1_{}'.format(selection_id)] = res_df['bb_lower_%s' % config.loc_set.zone.dtk_itv]\n","    # res_df['short_dtk_0_{}'.format(selection_id)] = res_df['dc_upper_%s' % config.loc_set.zone.dtk_itv]\n","    # res_df['long_dtk_1_{}'.format(selection_id)] = res_df['bb_upper_%s' % config.loc_set.zone.dtk_itv]\n","    # res_df['long_dtk_0_{}'.format(selection_id)] = res_df['dc_lower_%s' % config.loc_set.zone.dtk_itv]\n","\n","    # res_df['short_dtk_gap_{}'.format(selection_id)] = abs(\n","    #     res_df['short_dtk_0_{}'.format(selection_id)] - res_df['short_dtk_1_{}'.format(selection_id)])\n","    # res_df['long_dtk_gap_{}'.format(selection_id)] = abs(\n","    #     res_df['long_dtk_1_{}'.format(selection_id)] - res_df['long_dtk_0_{}'.format(selection_id)])\n","\n","    return res_df\n","\n","\n","def enlist_tr(res_df, config, np_timeidx, mode='OPEN', show_detail=True):\n","    selection_id = config.selection_id\n","    len_df = len(res_df)\n","    short_open_res = np.ones(len_df)\n","    long_open_res = np.ones(len_df)\n","\n","    short_tp_1_col, short_tp_0_col, short_tp_gap_col = 'short_tp_1_{}'.format(selection_id), 'short_tp_0_{}'.format(\n","        selection_id), 'short_tp_gap_{}'.format(selection_id)\n","    long_tp_1_col, long_tp_0_col, long_tp_gap_col = 'long_tp_1_{}'.format(selection_id), 'long_tp_0_{}'.format(\n","        selection_id), 'long_tp_gap_{}'.format(selection_id)\n","    short_epout_1_col, short_epout_0_col, short_epout_gap_col = 'short_epout_1_{}'.format(selection_id), 'short_epout_0_{}'.format(\n","        selection_id), 'short_epout_gap_{}'.format(selection_id)\n","    long_epout_1_col, long_epout_0_col, long_epout_gap_col = 'long_epout_1_{}'.format(selection_id), 'long_epout_0_{}'.format(\n","        selection_id), 'long_epout_gap_{}'.format(selection_id)\n","\n","    tp_cols = [short_tp_1_col, short_tp_0_col, short_tp_gap_col, long_tp_1_col, long_tp_0_col, long_tp_gap_col]  # Todo - public_indi 이전에 해야할지도 모름\n","    epout_cols = [short_epout_1_col, short_epout_0_col, short_epout_gap_col, long_epout_1_col, long_epout_0_col,\n","                  long_epout_gap_col]  # Todo - public_indi 이전에 해야할지도 모름\n","    data_cols = ['open', 'high', 'low', 'close']  # Todo - public_indi 이전에 해야할지도 모름 # 'close', 'haopen', 'hahigh', 'halow', 'haclose'\n","\n","    short_tp_1_, short_tp_0_, short_tp_gap_, long_tp_1_, long_tp_0_, long_tp_gap_ = [res_df[col_].to_numpy() for col_ in tp_cols]\n","    short_epout_1_, short_epout_0_, short_epout_gap_, long_epout_1_, long_epout_0_, long_epout_gap_ = [res_df[col_].to_numpy() for col_ in epout_cols]\n","    open, high, low, close = [res_df[col_].to_numpy() for col_ in data_cols]\n","\n","    # ---------------- point - support_confirmer---------------- #\n","    point1_to2_period = 60\n","    p1_itv1 = config.loc_set.point.p1_itv1\n","    p1_period1 = config.loc_set.point.p1_period1\n","    p1_period2 = config.loc_set.point.p1_period2\n","    p2_itv1 = config.loc_set.point.p2_itv1\n","    p2_period1 = config.loc_set.point.p2_period1\n","    p2_period2 = config.loc_set.point.p2_period2\n","\n","    if p2_itv1 != \"None\":\n","        short_point1_on2_idx = pd.Series(\n","            np.where(res_df['short_wave_point_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)], np.arange(len_df), np.nan)).rolling(point1_to2_period,\n","                                                                                                                                    min_periods=1).max().to_numpy()  # period 내의 max_point1_idx\n","        long_point1_on2_idx = pd.Series(\n","            np.where(res_df['long_wave_point_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)], np.arange(len_df), np.nan)).rolling(point1_to2_period,\n","                                                                                                                                   min_periods=1).max().to_numpy()\n","\n","        short_point2_idx = pd.Series(\n","            np.where(res_df['short_wave_point_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)], np.arange(len_df), np.nan)).to_numpy()\n","        long_point2_idx = pd.Series(\n","            np.where(res_df['long_wave_point_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)], np.arange(len_df), np.nan)).to_numpy()\n","\n","        res_df['short_point_idxgap_{}'.format(selection_id)] = short_point2_idx - short_point1_on2_idx\n","        res_df['long_point_idxgap_{}'.format(selection_id)] = long_point2_idx - long_point1_on2_idx\n","\n","        # ------ p1 & p2 ------ #\n","        short_open_res *= ~np.isnan(res_df['short_point_idxgap_{}'.format(selection_id)].to_numpy())\n","        long_open_res *= ~np.isnan(res_df['long_point_idxgap_{}'.format(selection_id)].to_numpy())\n","\n","        if show_detail:\n","          sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","          sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ p2 amax > p1_idx (long) ------ #\n","        short_open_res *= res_df['short_upper_touch_idx_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)].to_numpy() > short_point1_on2_idx\n","        long_open_res *= res_df['long_lower_touch_idx_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)].to_numpy() > long_point1_on2_idx\n","\n","        if show_detail:\n","          sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","          sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ higher low (long) ------ #\n","        # short_a_line1_on2_ = get_line(short_point1_on2_idx, res_df['short_a_line_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy())\n","        # long_a_line1_on2_ = get_line(long_point1_on2_idx, res_df['long_a_line_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy())\n","\n","        # short_a_line2_ = res_df['short_a_line_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)].to_numpy()\n","        # long_a_line2_ = res_df['long_a_line_{}{}{}'.format(p2_itv1, p2_period1, p2_period2)].to_numpy()\n","\n","        # short_open_res *= short_a_line1_on2_ >= short_a_line2_\n","        # long_open_res *= long_a_line1_on2_ <= long_a_line2_\n","\n","        # print(np.sum(long_open_res == 1))\n","\n","    else:  \n","        # ------ p1 only ------ #\n","        res_df['short_point_idxgap_{}'.format(selection_id)] = 0  # default\n","        res_df['long_point_idxgap_{}'.format(selection_id)] = 0\n","\n","        # ------ lower_touch > upper_touch (long) ------ #\n","        # short_open_res *= res_df['short_upper_touch_idx_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy() > res_df['short_lower_touch_idx_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy()\n","        # long_open_res *= res_df['long_lower_touch_idx_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy() > res_df['long_upper_touch_idx_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy()\n","\n","        # # ------ base_3T cross ------ #\n","        # dc_base_3T = res_df['dc_base_3T'].to_numpy()\n","        # b1_close = res_df['close'].shift(1).to_numpy()\n","        # short_open_res *= (b1_close > dc_base_3T) & (dc_base_3T > close)\n","        # long_open_res *= (b1_close < dc_base_3T) & (dc_base_3T < close)\n","\n","        # # ------ lower_touch_line < base_5T (long) ------ #\n","        # dc_base_5T = res_df['dc_base_5T'].to_numpy()        \n","        # short_open_res *= res_df['short_upper_touch_line_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy() > dc_base_5T\n","        # long_open_res *= res_df['long_lower_touch_line_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy() < dc_base_5T      \n","\n","        # ------ ppr ------ #\n","        # pumping_ratio(res_df, config, p1_itv1, p1_period1, p1_period2)              \n","        \n","        # ------ wave_point ------ #\n","        # short_open_res *= res_df['short_wave_point_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy().astype(bool)\n","        # long_open_res *= res_df['long_wave_point_{}{}{}'.format(p1_itv1, p1_period1, p1_period2)].to_numpy().astype(bool)\n","\n","        # ------ cppr 로 양음봉 check ------ # \n","        tf_entry = to_itvnum(config.loc_set.point.tf_entry)\n","\n","        res_df['b1_cppr_{}'.format(config.loc_set.point.tf_entry)] = res_df['cppr_{}'.format(config.loc_set.point.tf_entry)].shift(tf_entry)\n","        b1_cppr_ = res_df['b1_cppr_{}'.format(config.loc_set.point.tf_entry)].to_numpy()  # check b1's cppr in ep_loc\n","        cppr_ = res_df['cppr_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","        short_open_res *= (b1_cppr_ > 0) & (cppr_ < 0)\n","        long_open_res *= (b1_cppr_ < 0) & (cppr_ > 0)\n","\n","        res_df['b1_updbr'] = res_df['dc_upper_15T4_br'].shift(tf_entry).to_numpy()\n","        res_df['b1_lwdbr'] = res_df['dc_lower_15T4_br'].shift(tf_entry).to_numpy()\n","        \n","        res_df['b1_updbr_cppr'] = b1_cppr_ * res_df['b1_updbr'].to_numpy()\n","        res_df['b1_lwdbr_cppr'] = b1_cppr_ * res_df['b1_lwdbr'].to_numpy()\n","\n","        if show_detail:\n","          sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","          sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ dc_cross ------ #\n","        b1_dc_upper_15T4 = res_df['dc_upper_15T4'].shift(tf_entry).to_numpy()\n","        b1_dc_lower_15T4 = res_df['dc_lower_15T4'].shift(tf_entry).to_numpy()\n","        # b1_high_ = res_df['high_{}'.format(config.loc_set.point.tf_entry)].shift(tf_entry).to_numpy()\n","        # b1_low_ = res_df['low_{}'.format(config.loc_set.point.tf_entry)].shift(tf_entry).to_numpy()\n","        # short_open_res *= b1_high_ > b1_dc_upper_15T4\n","        # long_open_res *= b1_low_ < b1_dc_lower_15T4\n","        \n","        # ------ dc_cc ------ #\n","        b1_close_ = res_df['close_{}'.format(config.loc_set.point.tf_entry)].shift(tf_entry).to_numpy()\n","        short_open_res *= b1_close_ > b1_dc_upper_15T4\n","        long_open_res *= b1_close_ < b1_dc_lower_15T4\n","\n","        if show_detail:\n","          sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","          sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ empty_space ------ #       \n","        dc_upper_15T4 = res_df['dc_upper_15T4'].to_numpy()\n","        dc_lower_15T4 = res_df['dc_lower_15T4'].to_numpy() \n","        high_ = res_df['high_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","        low_ = res_df['low_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","        short_open_res *= high_ < dc_upper_15T4\n","        long_open_res *= low_ > dc_lower_15T4\n","\n","        if show_detail:\n","          sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","          sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","        # ------ tf_entry ------ #\n","        short_open_res *= np_timeidx % tf_entry == (tf_entry - 1)\n","        long_open_res *= np_timeidx % tf_entry == (tf_entry - 1) \n","\n","        if show_detail:\n","          sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","          sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","    res_df['short_open_{}'.format(selection_id)] = short_open_res\n","    res_df['long_open_{}'.format(selection_id)] = long_open_res\n","\n","    # ------------------ tr_set ------------------ #\n","    # ------------ tpep ------------ #\n","    tpg = config.tr_set.tp_gap\n","    res_df['short_tp_{}'.format(selection_id)] = short_tp_1_ - short_tp_gap_ * tpg\n","    res_df['long_tp_{}'.format(selection_id)] = long_tp_1_ + long_tp_gap_ * tpg\n","\n","    # ------ limit_ep ------ #\n","    if config.ep_set.entry_type == \"LIMIT\":\n","        epg = config.tr_set.ep_gap\n","        res_df['short_ep_{}'.format(selection_id)] = short_epout_0_ + short_epout_gap_ * epg\n","        res_df['long_ep_{}'.format(selection_id)] = long_epout_0_ - long_epout_gap_ * epg\n","\n","    # ------ market_ep ------ #\n","    else:\n","        res_df['short_ep_{}'.format(selection_id)] = res_df['close']\n","        res_df['long_ep_{}'.format(selection_id)] = res_df['close']\n","\n","    # ------------ out ------------ #\n","    outg = config.tr_set.out_gap\n","    res_df['short_out_{}'.format(selection_id)] = short_epout_0_ + short_epout_gap_ * outg\n","    res_df['long_out_{}'.format(selection_id)] = long_epout_0_ - long_epout_gap_ * outg\n","\n","    # ------------ point validation ------------ #\n","    short_tp_ = res_df['short_tp_{}'.format(selection_id)].to_numpy()\n","    short_ep_ = res_df['short_ep_{}'.format(selection_id)].to_numpy()\n","    short_out_ = res_df['short_out_{}'.format(selection_id)].to_numpy()\n","    short_open_res *= (short_tp_ < short_ep_) & (short_ep_ < short_out_)\n","    res_df['short_open_{}'.format(selection_id)] = short_open_res * (not config.pos_set.short_ban)\n","\n","    long_tp_ = res_df['long_tp_{}'.format(selection_id)].to_numpy()\n","    long_ep_ = res_df['long_ep_{}'.format(selection_id)].to_numpy()\n","    long_out_ = res_df['long_out_{}'.format(selection_id)].to_numpy()\n","    long_open_res *= (long_tp_ > long_ep_) & (long_ep_ > long_out_)\n","    res_df['long_open_{}'.format(selection_id)] = long_open_res * (not config.pos_set.long_ban)\n","\n","    if show_detail:\n","      sys_log.warning(\"np.sum(short_open_res == 1) : {}\".format(np.sum(short_open_res == 1)))\n","      sys_log.warning(\"np.sum(long_open_res == 1) : {}\".format(np.sum(long_open_res == 1)))\n","\n","    # ------ tr ------ #\n","    res_df['short_tr_{}'.format(selection_id)] = abs(\n","        (short_ep_ / short_tp_ - config.trader_set.limit_fee - 1) / (short_ep_ / short_out_ - config.trader_set.market_fee - 1))\n","    res_df['long_tr_{}'.format(selection_id)] = abs(\n","        (long_tp_ / long_ep_ - config.trader_set.limit_fee - 1) / (long_out_ / long_ep_ - config.trader_set.market_fee - 1))\n","\n","    # ------ zoned_ep ------ #\n","    if config.tr_set.c_ep_gap != \"None\":\n","        # res_df['short_ep_org_{}'.format(selection_id)] = res_df['short_ep_{}'.format(selection_id)].copy()\n","        # res_df['long_ep_org_{}'.format(selection_id)] = res_df['long_ep_{}'.format(selection_id)].copy()\n","        res_df['short_ep2_{}'.format(selection_id)] = short_epout_1_ + short_epout_gap_ * config.tr_set.c_ep_gap\n","        res_df['long_ep2_{}'.format(selection_id)] = long_epout_1_ - long_epout_gap_ * config.tr_set.c_ep_gap\n","\n","    # ------ zoned_out ------ #\n","    if config.tr_set.t_out_gap != \"None\":\n","        # res_df['short_out_org_{}'.format(selection_id)] = res_df['short_out_{}'.format(selection_id)].copy()\n","        # res_df['long_out_org_{}'.format(selection_id)] = res_df['long_out_{}'.format(selection_id)].copy()\n","        res_df['short_out2_{}'.format(selection_id)] = res_df['short_epout_0_{}'.format(selection_id)] + res_df[\n","            'short_epout_gap_{}'.format(selection_id)] * config.tr_set.t_out_gap\n","        res_df['long_out2_{}'.format(selection_id)] = res_df['long_epout_0_{}'.format(selection_id)] - res_df[\n","            'long_epout_gap_{}'.format(selection_id)] * config.tr_set.t_out_gap\n","\n","    # ------------ bias ------------ #  Todo - 추후, bias_set 독립시키는게 좋지 않을까\n","    bias_info_tick = config.tr_set.bias_info_tick\n","    # ------ bias_info can use future_data ------ #\n","    # res_df['short_bias_info_{}'.format(selection_id)] = res_df['dc_lower_T'].shift(-bias_info_tick)  # open / ep_tick 으로부터 bias_info_tick 만큼\n","    # res_df['long_bias_info_{}'.format(selection_id)] = res_df['dc_upper_T'].shift(-bias_info_tick)\n","    res_df['short_bias_info_{}'.format(selection_id)] = res_df['low'].rolling(bias_info_tick).min().shift(-bias_info_tick)\n","    res_df['long_bias_info_{}'.format(selection_id)] = res_df['high'].rolling(bias_info_tick).max().shift(-bias_info_tick)\n","\n","    # bias_thresh 는 결국 tp 가 될 것\n","    res_df['short_bias_thresh_{}'.format(selection_id)] = res_df['short_tp_{}'.format(selection_id)]\n","    res_df['long_bias_thresh_{}'.format(selection_id)] = res_df['long_tp_{}'.format(selection_id)]\n","    # res_df['short_bias_thresh_{}'.format(selection_id)] = res_df['dc_lower_T'] - res_df['short_tp_gap_{}'.format(selection_id)] * config.tr_set.bias_gap\n","    # res_df['long_bias_thresh_{}'.format(selection_id)] = res_df['dc_upper_T'] + res_df['long_tp_gap_{}'.format(selection_id)] * config.tr_set.bias_gap\n","\n","    return res_df\n"]},{"cell_type":"markdown","metadata":{"id":"HKdUKKl-483N"},"source":["### utils_public"]},{"cell_type":"code","execution_count":8,"metadata":{"id":"nzOYWA2kqZ0d","executionInfo":{"status":"ok","timestamp":1650633822387,"user_tz":-540,"elapsed":2832,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["from funcs.funcs_indicator import *\n","from funcs.funcs_trader import *\n","import logging\n","from ast import literal_eval\n","\n","pd.set_option('mode.chained_assignment',  None)\n","sys_log = logging.getLogger()\n","\n","\n","class OrderSide:\n","    BUY = \"BUY\"\n","    SELL = \"SELL\"\n","    INVALID = None\n","\n","\n","def lvrg_set(res_df, config, open_side, ep_, out_, fee, limit_leverage=50):\n","    selection_id = config.selection_id\n","    if not pd.isnull(out_) and not config.lvrg_set.static_lvrg:\n","        if selection_id in ['v3']:\n","            if open_side == OrderSide.SELL:\n","                loss = out_ / ep_\n","            else:\n","                loss = ep_ / out_\n","        else:  # 이 phase 가 정석, 윗 phase 는 결과가 수익 극대화라 사용함\n","            if open_side == OrderSide.SELL:\n","                loss = ep_ / out_\n","            else:\n","                loss = out_ / ep_\n","\n","        config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(loss - 1 - (fee + config.trader_set.market_fee))\n","\n","    # ------------ leverage rejection ------------ #\n","    # 감당하기 힘든 fluc. 의 경우 진입하지 않음 - dynamic_lvrg 사용 경우\n","    if config.lvrg_set.leverage < 1 and config.lvrg_set.lvrg_rejection:\n","        # if config.lvrg_set.leverage >= 1 and config.lvrg_set.lvrg_rejection:\n","        return None\n","\n","    if not config.lvrg_set.allow_float:\n","        config.lvrg_set.leverage = int(config.lvrg_set.leverage)\n","\n","    config.lvrg_set.leverage = min(limit_leverage, max(config.lvrg_set.leverage, 1))\n","\n","    return config.lvrg_set.leverage\n","\n","\n","def sync_check(df_, config, order_side=\"OPEN\", row_slice=True):\n","    try:\n","        make_itv_list = [m_itv.replace('m', 'T') for m_itv in literal_eval(config.trader_set.itv_list)]\n","        row_list = literal_eval(config.trader_set.row_list)\n","        rec_row_list = literal_eval(config.trader_set.rec_row_list)\n","        offset_list = literal_eval(config.trader_set.offset_list)\n","\n","        assert len(make_itv_list) == len(offset_list), \"length of itv & offset_list should be equal\"\n","        htf_df_list = [to_htf(df_, itv_=itv_, offset=offset_) for itv_idx, (itv_, offset_)\n","                       in enumerate(zip(make_itv_list, offset_list)) if itv_idx != 0]  #\n","        htf_df_list.insert(0, df_)\n","\n","        # for htf_df_ in htf_df_list:\n","        #     print(htf_df_.tail())\n","\n","        #       Todo        #\n","        #        1. row_list calc.\n","        #           a. indi. 를 만들기 위한 최소 period 가 존재하고, 그 indi. 를 사용한 lb_period 가 존재함\n","        #           b. => default_period + lb_period\n","        #               i. from sync_check, public_indi, ep_point2, ep_dur 의 tf 별 max lb_period check\n","        #                   1. default_period + max lb_period check\n","        #                       a. 현재까지 lb_period_list\n","        #                           h_prev_idx (open / close) 60\n","        #                           dc_period 135\n","        #                           zone_dc_period 135\n","\n","        # --------- slicing (in trader phase only) --------- #\n","        #               --> latency 영향도가 높은 곳은 이곳\n","        if row_slice:  # recursive 가 아닌 indi. 의 latency 를 고려한 slicing\n","            df, df_3T, df_5T, df_15T, df_30T, df_H, df_4H = [df_s.iloc[-row_list[row_idx]:].copy() for row_idx, df_s in enumerate(htf_df_list)]\n","            rec_df, rec_df_3T, rec_df_5T, rec_df_15T, rec_df_30T, rec_df_H, rec_df_4H = [df_s.iloc[-rec_row_list[row_idx]:].copy() for row_idx, df_s\n","                                                                                         in\n","                                                                                         enumerate(htf_df_list)]\n","        else:\n","            df, df_3T, df_5T, df_15T, df_30T, df_H, df_4H = htf_df_list\n","            rec_df, rec_df_3T, rec_df_5T, rec_df_15T, rec_df_30T, rec_df_H, rec_df_4H = htf_df_list\n","\n","        # --------- add indi. --------- #\n","\n","        #        1. 필요한 indi. 는 enlist_epouttp & mr_check 보면서 삽입\n","        #        2. min use_rows 계산을 위해서, tf 별로 gathering 함        #\n","        # start_0 = time.time()\n","\n","        # ------ T ------ #\n","        # df = dc_line(df, None, 'T', dc_period=20)\n","        # df = bb_line(df, None, 'T')\n","        #\n","        # ------ 3T ------ #\n","        # df = dc_line(df, df_3T, '3T')\n","\n","        # ------ 5T ------ #\n","        h_candle_v3(res_df, '5T')\n","        df = dc_line(df, df_5T, '5T')\n","        df = bb_line(df, df_5T, '5T')\n","        #\n","        # ------ 15T ------ #\n","        h_candle_v3(res_df, '15T')\n","        df = dc_line(df, df_15T, '15T')\n","        df = bb_line(df, df_15T, '15T')\n","        #\n","        # ------ 30T ------ #\n","        # df = bb_line(df, df_30T, '30T')\n","        #\n","        # ------ H ------ #\n","        h_candle_v3(res_df, 'H')\n","        # df = dc_line(df, df_H, 'H')\n","\n","        # ------ 4H ------ #\n","        # df = bb_line(df, df_4H, '4H')\n","\n","        # rec_df['rsi_1m'] = rsi(rec_df, 14)  # Todo - recursive, 250 period\n","        # df = df.join(to_lower_tf_v2(df, rec_df.iloc[:, [-1]], [-1], backing_i=0), how='inner')  # <-- join same_tf manual\n","        #\n","        # if order_side in [\"OPEN\"]:\n","        #     rec_df_5T['ema_5T'] = ema(rec_df_5T['close'], 195)  # Todo - recursive, 1100 period (5T)\n","        #     df = df.join(to_lower_tf_v2(df, rec_df_5T, [-1]), how='inner')\n","\n","    except Exception as e:\n","        sys_log.error(\"error in sync_check :\", e)\n","    else:\n","        return df\n","\n","\n","def public_indi(res_df, config, np_timeidx, order_side=\"OPEN\"):\n","    selection_id = config.selection_id\n","\n","    res_df = wave_range_v8(res_df, config.loc_set.point.p1_period1, config.loc_set.point.p1_period2, ltf_df=None, wave_min_bars=config.tr_set.wave_min, wave_max_bars=config.tr_set.wave_max)\n","    if config.loc_set.point.p2_itv1 != \"None\":\n","        res_df = wave_range_v8(res_df, config.loc_set.point.p2_period1, config.loc_set.point.p2_period2, ltf_df=None)\n","\n","    res_df = dc_level(res_df, '5T', 1)\n","    res_df = bb_level(res_df, '5T', 1)\n","\n","    # res_df = st_level(res_df, '5T', 1)\n","\n","    # res_df = dc_level(res_df, '15T', 1)\n","    # res_df = bb_level(res_df, '15T', 1)\n","    # res_df = dtk_plot(res_df, dtk_itv2='15T', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line, np_timeidx=np_timeidx)\n","\n","    # res_df = st_level(res_df, '15T', 1)\n","\n","    # res_df = dc_level(res_df, '30T', 1)\n","    # res_df = bb_level(res_df, '30T', 1)\n","    # res_df = st_level(res_df, '30T', 1)\n","\n","    # res_df = bb_level(res_df, 'H', 1)\n","\n","    # res_df = bb_level(res_df, '4H', 1)\n","\n","    # res_df['dc_upper_v2'.format(selection_id)] = res_df['high'].rolling(config.loc_set.zone.dc_period).max()   # Todo, consider dc_period\n","    # res_df['dc_lower_v2'.format(selection_id)] = res_df['low'].rolling(config.loc_set.zone.dc_period).min()\n","\n","    # res_df['zone_dc_upper_v2'.format(selection_id)] = res_df['high'].rolling(config.loc_set.zone.zone_dc_period).max()   # Todo, consider zone_dc_period\n","    # res_df['zone_dc_lower_v2'.format(selection_id)] = res_df['low'].rolling(config.loc_set.zone.zone_dc_period).min()\n","\n","    if order_side in [\"OPEN\"]:\n","        # candle_score_v3(res_df, 'T', unsigned=False)\n","        candle_score_v3(res_df, config.loc_set.point.exp_itv, unsigned=False)\n","\n","    #     temp indi.    #\n","    # res_df[\"ma30_1m\"] = res_df['close'].rolling(30).mean()\n","    # res_df[\"ma60_1m\"] = res_df['close'].rolling(60).mean()\n","    # res_df = dtk_plot(res_df, dtk_itv2='15T', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line, np_timeidx=np_timeidx)\n","\n","    return res_df\n","\n","\n","def ep_out_v0(res_df, config, op_idx, e_j, tp_j, np_datas, open_side):\n","    h, l = np_datas\n","    selection_id = config.selection_id\n","    ep_out = 0\n","\n","    if config.tr_set.ep_out_tick != \"None\":\n","        if e_j - op_idx >= config.tr_set.ep_out_tick:\n","            ep_out = 1\n","\n","    if config.tr_set.ei_k != \"None\":\n","        if open_side == OrderSide.SELL:\n","            short_tp_1_ = res_df['short_tp_1_{}'.format(selection_id)].to_numpy()  # id 에 따라 dynamic 변수라 이곳에서 numpy 화 진행\n","            short_tp_gap_ = res_df['short_tp_gap_{}'.format(selection_id)].to_numpy()\n","            if l[e_j] <= short_tp_1_[tp_j] - short_tp_gap_[tp_j] * config.tr_set.ei_k:\n","                ep_out = 1\n","        else:\n","            long_tp_1_ = res_df['long_tp_1_{}'.format(selection_id)].to_numpy()  # iloc 이 빠를까, to_numpy() 가 빠를까  # 3.94 ms --> 5.34 ms (iloc)\n","            long_tp_gap_ = res_df['long_tp_gap_{}'.format(selection_id)].to_numpy()\n","            if h[e_j] >= long_tp_1_[tp_j] + long_tp_gap_[tp_j] * config.tr_set.ei_k:\n","                ep_out = 1\n","\n","    return ep_out\n","\n","\n","def ep_out(res_df, config, op_idx, e_j, tp_j, np_datas, open_side):\n","    h, l = np_datas\n","    selection_id = config.selection_id\n","    ep_out = 0\n","\n","    if config.tr_set.ep_out_tick != \"None\":\n","        if e_j - op_idx >= config.tr_set.ep_out_tick:\n","            ep_out = 1\n","\n","    if config.tr_set.ei_k != \"None\":\n","        if open_side == OrderSide.SELL:\n","            short_tp_ = res_df['short_tp_{}'.format(selection_id)].to_numpy()  # id 에 따라 dynamic 변수라 이곳에서 numpy 화 진행\n","            short_tp_gap_ = res_df['short_tp_gap_{}'.format(selection_id)].to_numpy()\n","            if l[e_j] <= short_tp_[tp_j] + short_tp_gap_[tp_j] * config.tr_set.ei_k:\n","                ep_out = 1\n","        else:\n","            long_tp_ = res_df['long_tp_{}'.format(selection_id)].to_numpy()  # iloc 이 빠를까, to_numpy() 가 빠를까  # 3.94 ms --> 5.34 ms (iloc)\n","            long_tp_gap_ = res_df['long_tp_gap_{}'.format(selection_id)].to_numpy()\n","            if h[e_j] >= long_tp_[tp_j] - long_tp_gap_[tp_j] * config.tr_set.ei_k:\n","                ep_out = 1\n","\n","    return ep_out\n","\n","\n","def ep_out_v2(res_df, config, op_idx, e_j, tp_j, np_datas, open_side):\n","    h, l = np_datas\n","    selection_id = config.selection_id\n","    ep_out = 0\n","\n","    if config.tr_set.ep_out_tick != \"None\":\n","        if e_j - op_idx >= config.tr_set.ep_out_tick:\n","            ep_out = 1\n","\n","    if config.tr_set.ei_k != \"None\":\n","        if open_side == OrderSide.SELL:\n","            short_tp_1_ = res_df['short_tp_1_{}'.format(selection_id)].to_numpy()  # id 에 따라 dynamic 변수라 이곳에서 numpy 화 진행\n","            short_tp_0_ = res_df['short_tp_0_{}'.format(selection_id)].to_numpy()\n","            short_tp_gap_ = res_df['short_tp_gap_{}'.format(selection_id)].to_numpy()\n","            if l[e_j] <= short_tp_1_[tp_j] + short_tp_gap_[tp_j] * config.tr_set.ei_k or h[e_j] >= short_tp_0_[tp_j] - short_tp_gap_[\n","                tp_j] * config.tr_set.ei_k:\n","                ep_out = 1\n","        else:\n","            long_tp_1_ = res_df['long_tp_1_{}'.format(selection_id)].to_numpy()\n","            long_tp_0_ = res_df['long_tp_0_{}'.format(selection_id)].to_numpy()\n","            long_tp_gap_ = res_df['long_tp_gap_{}'.format(selection_id)].to_numpy()\n","            if h[e_j] >= long_tp_1_[tp_j] - long_tp_gap_[tp_j] * config.tr_set.ei_k or l[e_j] <= long_tp_0_[tp_j] + long_tp_gap_[\n","                tp_j] * config.tr_set.ei_k:\n","                ep_out = 1\n","\n","    return ep_out\n","\n","\n","def ep_loc_point2_v2(res_df, config, i, out_j, side=OrderSide.SELL):\n","    allow_ep_in = 1\n","    if config.selection_id in ['v5_2']:\n","        if side == OrderSide.SELL:\n","            dc_upper_T = res_df['dc_upper_T'].to_numpy()\n","            dc_upper_15T = res_df['dc_upper_15T'].to_numpy()\n","            allow_ep_in *= (dc_upper_T[i - 1] <= dc_upper_15T[i]) & \\\n","                           (dc_upper_15T[i - 1] != dc_upper_15T[i])\n","        else:\n","            dc_lower_T = res_df['dc_lower_T'].to_numpy()\n","            dc_lower_15T = res_df['dc_lower_15T'].to_numpy()\n","            allow_ep_in *= (dc_lower_T[i - 1] >= dc_lower_15T[i]) & \\\n","                           (dc_lower_15T[i - 1] != dc_lower_15T[i])\n","\n","    if config.selection_id in ['v3_4']:\n","        wick_score_list = literal_eval(config.ep_set.point2.wick_score_list)\n","        wick_scores = [res_df['wick_score_{}'.format(s_itv)].to_numpy() for s_itv in literal_eval(config.ep_set.point2.score_itv_list)]\n","        close = res_df['close'].to_numpy()\n","        if side == OrderSide.SELL:\n","            sup_T = res_df['sup_T'].to_numpy()\n","            allow_ep_in *= close[i] < sup_T[i - 1]\n","            if len(wick_score_list) != 0:\n","                allow_ep_in *= wick_scores[0][i] < -wick_score_list[0]\n","        else:\n","            resi_T = res_df['resi_T'].to_numpy()\n","            allow_ep_in *= close[i] > resi_T[i - 1]\n","            if len(wick_score_list) != 0:\n","                allow_ep_in *= wick_scores[0][i] > wick_score_list[0]\n","\n","    if allow_ep_in:\n","        out_j = i\n","    return allow_ep_in, out_j\n","\n","\n","# vectorized calc.\n","# multi-stem 에 따라 dynamic vars.가 입력되기 때문에 class 내부 vars. 로 종속시키지 않음\n","def ep_loc_v3(res_df, config, np_timeidx, show_detail=True, ep_loc_side=OrderSide.SELL):\n","    # ------- param init ------- #\n","    selection_id = config.selection_id\n","    c_i = config.trader_set.complete_index\n","    len_df = len(res_df)\n","    mr_res = np.ones(len_df)\n","    zone_arr = np.full(len_df, 'n')\n","\n","    # ------ process 한번에 처리해서 param_check 만 ver. 별로 하면 될 것 ------ #\n","    #     => public_indi() 가 될 것\n","    #     1. 사용한 param 정보와 matching 된 data 병렬로 나열 logging 될 것\n","    tp_fee, out_fee = calc_tp_out_fee_v2(config)\n","\n","    # ------------ candle_score ------------ #\n","    wick_score_list = literal_eval(config.loc_set.point.wick_score_list)\n","    if len(wick_score_list) != 0:\n","        score_itv_list = literal_eval(config.loc_set.point.score_itv_list)\n","        # ------ candle_score_v0 (1m initial tick 기준임) ------ #  Todo - higher timeframe 경우 back_data 사용해야함\n","        for wick_score_, score_itv_ in zip(wick_score_list, score_itv_list):\n","            wick_score = res_df['wick_score_{}'.format(score_itv_)].to_numpy()\n","            if ep_loc_side == OrderSide.SELL:\n","                mr_res *= wick_score <= -wick_score_\n","                if show_detail:\n","                    sys_log.warning(\"wick_score <= -wick_score_ : {:.5f} {:.5f} ({})\".format(wick_score[c_i], -wick_score_, mr_res[c_i]))\n","            else:\n","                mr_res *= wick_score >= wick_score_\n","                if show_detail:\n","                    sys_log.warning(\"wick_score >= wick_score_ : {:.5f} {:.5f} ({})\".format(wick_score[c_i], wick_score_, mr_res[c_i]))\n","\n","    # -------------- tr_thresh -------------- #\n","    if config.loc_set.point.short_tr_thresh != \"None\":\n","        if ep_loc_side == OrderSide.SELL:\n","            short_tr_ = res_df['short_tr_{}'.format(selection_id)].to_numpy()\n","            mr_res *= short_tr_ >= config.loc_set.point.short_tr_thresh\n","            mr_res *= short_tr_ <= config.loc_set.point.short_tr_thresh + 0.1\n","            if show_detail:\n","                sys_log.warning(\n","                    \"short_tr_ <= short_tr_thresh : {:.5f} {:.5f} ({})\".format(short_tr_[c_i], config.loc_set.point.short_tr_thresh, mr_res[c_i]))\n","        else:\n","            long_tr_ = res_df['long_tr_{}'.format(selection_id)].to_numpy()\n","            mr_res *= long_tr_ >= config.loc_set.point.long_tr_thresh\n","            mr_res *= long_tr_ <= config.loc_set.point.long_tr_thresh + 0.1\n","            if show_detail:\n","                sys_log.warning(\n","                    \"long_tr_ <= long_tr_thresh : {:.5f} {:.5f} ({})\".format(long_tr_[c_i], config.loc_set.point.long_tr_thresh, mr_res[c_i]))\n","\n","    # -------------- spread - independent to tr_set -------------- #  --> Todo, 사용 안하고 싶은 wave_point\n","    if config.loc_set.point.short_spread != \"None\":\n","        if selection_id in ['v3']:\n","            if ep_loc_side == OrderSide.SELL:\n","                bb_base_5T = res_df['bb_base_5T'].to_numpy()  # to_numpy() 는 ep_loc 에서 진행됨\n","                bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","                short_spread = (bb_base_5T - bb_lower_5T - tp_fee * bb_base_5T) / (bb_base_5T - bb_lower_5T + out_fee * bb_base_5T)\n","                mr_res *= short_spread >= config.loc_set.point.short_spread\n","                if show_detail:\n","                    sys_log.warning(\n","                        \"short_spread >= config.loc_set.point.short_spread : {:.5f} {:.5f} ({})\".format(short_spread[c_i], config.loc_set.point.short_spread, mr_res[c_i]))\n","            else:\n","                bb_upper_5T = res_df['bb_upper_5T'].to_numpy()\n","                dc_lower_5T = res_df['dc_lower_5T'].to_numpy()\n","                # mr_res *= (bb_base_5T - dc_lower_5T - tp_fee * bb_upper_5T) / (bb_base_5T - dc_lower_5T + out_fee * bb_base_5T) >= config.loc_set.point.long_spread\n","                long_spread = (bb_upper_5T - dc_lower_5T - tp_fee * bb_upper_5T) / (bb_upper_5T - dc_lower_5T + out_fee * bb_upper_5T)\n","                mr_res *= long_spread >= config.loc_set.point.long_spread\n","                if show_detail:\n","                    sys_log.warning(\n","                        \"long_spread >= config.loc_set.point.long_spread : {:.5f} {:.5f} ({})\".format(long_spread[c_i], config.loc_set.point.long_spread, mr_res[c_i]))                  \n","\n","    # ------------ ratios ------------ #\n","    # ------ candle_pumping_ratio ------ #\n","    if config.loc_set.point.cppr != \"None\":   \n","      tf_entry = to_itvnum(config.loc_set.point.tf_entry)\n","      b1_cppr_ = res_df['b1_cppr_{}'.format(config.loc_set.point.tf_entry)].to_numpy()  # check b1's cppr in ep_loc\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= b1_cppr_ >= config.loc_set.point.cppr\n","        if show_detail:\n","            sys_log.warning(\"b1_cppr_ >= config.loc_set.point.cppr : {:.5f} {:.5f} ({})\".format(b1_cppr_[c_i], config.loc_set.point.cppr, mr_res[c_i]))\n","      else:\n","        mr_res *= b1_cppr_ <= -config.loc_set.point.cppr\n","        if show_detail:\n","            sys_log.warning(\"b1_cppr_ <= -config.loc_set.point.cppr : {:.5f} {:.5f} ({})\".format(b1_cppr_[c_i], config.loc_set.point.cppr, mr_res[c_i]))\n","    \n","    # ------ dc_over_body_ratio ------ #\n","    if config.loc_set.point.dbr != \"None\":\n","      b1_lwdbr = res_df['b1_lwdbr'].to_numpy()\n","      b1_updbr = res_df['b1_updbr'].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:        \n","        mr_res *= b1_lwdbr >= config.loc_set.point.dbr\n","        if show_detail:\n","            sys_log.warning(\n","                \"b1_lwdbr >= config.loc_set.point.dbr : {:.5f} {:.5f} ({})\".format(b1_lwdbr[c_i], config.loc_set.point.dbr, mr_res[c_i]))\n","      else:\n","        mr_res *= b1_updbr >= config.loc_set.point.dbr\n","        if show_detail:\n","            sys_log.warning(\n","                \"b1_updbr >= config.loc_set.point.dbr : {:.5f} {:.5f} ({})\".format(b1_updbr[c_i], config.loc_set.point.dbr, mr_res[c_i]))\n","            \n","    if config.loc_set.point.dbr2 != \"None\":\n","      b1_lwdbr = res_df['b1_lwdbr'].to_numpy()\n","      b1_updbr = res_df['b1_updbr'].to_numpy()\n","      if ep_loc_side == OrderSide.SELL:    \n","        mr_res *= b1_updbr >= config.loc_set.point.dbr2\n","        if show_detail:\n","            sys_log.warning(\n","                \"b1_updbr >= config.loc_set.point.dbr2 : {:.5f} {:.5f} ({})\".format(b1_updbr[c_i], config.loc_set.point.dbr2, mr_res[c_i]))\n","      else:\n","        mr_res *= b1_lwdbr >= config.loc_set.point.dbr2\n","        if show_detail:\n","            sys_log.warning(\n","                \"b1_lwdbr >= config.loc_set.point.dbr2 : {:.5f} {:.5f} ({})\".format(b1_lwdbr[c_i], config.loc_set.point.dbr2, mr_res[c_i]))\n","\n","    # ------ wick_body_ratio ------ #\n","    if config.loc_set.point.wbr != \"None\":\n","        wave_body_ratio = res_df['wave_body_ratio'].to_numpy()\n","        mr_res *= wave_body_ratio >= config.loc_set.point.wbr\n","        if show_detail:\n","            sys_log.warning(\n","                \"wave_body_ratio >= config.loc_set.point.wbr : {:.5f} {:.5f} ({})\".format(wave_body_ratio[c_i], config.loc_set.point.wbr, mr_res[c_i]))\n","            \n","    # ------ body_rel_ratio ------ #\n","    if config.loc_set.point.brr != \"None\":\n","        body_rel_ratio_ = res_df['body_rel_ratio_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","        mr_res *= body_rel_ratio_ <= config.loc_set.point.brr\n","        if show_detail:\n","            sys_log.warning(\n","                \"body_rel_ratio_ <= config.loc_set.point.brr : {:.5f} {:.5f} ({})\".format(body_rel_ratio_[c_i], config.loc_set.point.brr, mr_res[c_i]))\n","\n","    # ------ pumping_ratio ------ #\n","    if config.loc_set.point.ppr != \"None\":\n","      if ep_loc_side == OrderSide.SELL:\n","        short_ppr_ = res_df['short_ppr_{}'.format(selection_id)].to_numpy()\n","        mr_res *= short_ppr_ >= config.loc_set.point.ppr\n","        if show_detail:\n","            sys_log.warning(\"short_ppr_ >= config.loc_set.point.ppr : {:.5f} {:.5f} ({})\".format(short_ppr_[c_i], config.loc_set.point.ppr, mr_res[c_i]))\n","      else:\n","        long_ppr_ = res_df['long_ppr_{}'.format(selection_id)].to_numpy()\n","        mr_res *= long_ppr_ >= config.loc_set.point.ppr\n","        if show_detail:\n","            sys_log.warning(\"long_ppr_ >= config.loc_set.point.ppr : {:.5f} {:.5f} ({})\".format(long_ppr_[c_i], config.loc_set.point.ppr, mr_res[c_i]))\n"," \n","    # ------------ rtc_zone  ------------ #  --> Todo, 사용 안하고 싶은 wave_dur., 추후 zone 으로 옮길 것\n","    # ------ dtk ------ #\n","    if config.loc_set.zone.dt_k != \"None\":\n","        # ------ dc_v2 ------ #\n","        dc_lower_v2 = res_df['dc_lower_v2'.format(selection_id)].to_numpy()\n","        short_dtk_1_ = res_df['short_dtk_1_{}'.format(selection_id)].to_numpy() - \\\n","                       res_df['short_dtk_gap_{}'.format(selection_id)].to_numpy() * config.loc_set.zone.dt_k\n","        dc_upper_v2 = res_df['dc_upper_v2'.format(selection_id)].to_numpy()\n","        long_dtk_1_ = res_df['long_dtk_1_{}'.format(selection_id)].to_numpy() + \\\n","                      res_df['long_dtk_gap_{}'.format(selection_id)].to_numpy() * config.loc_set.zone.dt_k\n","        if ep_loc_side == OrderSide.SELL:\n","            mr_res *= dc_lower_v2 >= short_dtk_1_\n","            if show_detail:\n","                sys_log.warning(\n","                    \"dc_lower_v2 >= short_dtk_1_ : {:.5f} {:.5f} ({})\".format(dc_lower_v2[c_i], short_dtk_1_[c_i], mr_res[c_i]))\n","        else:\n","            mr_res *= dc_upper_v2 <= long_dtk_1_\n","            if show_detail:\n","                sys_log.warning(\n","                    \"dc_upper_v2 <= long_dtk_1_ : {:.5f} {:.5f} ({})\".format(dc_upper_v2[c_i], long_dtk_1_[c_i], mr_res[c_i]))\n","                \n","    # ------------ zone ------------ #\n","    # config 로 통제할 수 없는 zone 은 selection_id 으로 조건문을 나눔 (lvrg_set 과 동일)\n","    if config.loc_set.zone.use_zone:\n","\n","        # ------------------ wave_biaser (sr_confirmer) ------------------ #\n","        if selection_id in ['3_9']:     \n","          itv, period1, period2 = config.loc_set.point.p1_itv1, config.loc_set.point.p1_period1, config.loc_set.point.p1_period2          \n","\n","          if ep_loc_side == OrderSide.SELL:\n","            short_wave_high_ = res_df['short_wave_high_{}{}{}'.format(itv, period1, period2)]\n","            bb_lower_5T_amax = get_line(res_df['short_wave_high_idx_{}{}{}'.format(itv, period1, period2)].to_numpy(), res_df['bb_lower_5T'].to_numpy())\n","            mr_res *= short_wave_high_ <= bb_lower_5T_amax\n","            if show_detail:\n","                sys_log.warning(\"short_wave_high_ <= bb_lower_5T_amax : {:.5f} {:.5f} ({})\".format(short_wave_high_[c_i], bb_lower_5T_amax[c_i], mr_res[c_i]))\n","          else:\n","            long_wave_low_ = res_df['long_wave_low_{}{}{}'.format(itv, period1, period2)]\n","            bb_upper_5T_amax = get_line(res_df['long_wave_low_idx_{}{}{}'.format(itv, period1, period2)].to_numpy(), res_df['bb_upper_5T'].to_numpy())\n","            mr_res *= long_wave_low_ >= bb_upper_5T_amax\n","            if show_detail:\n","                sys_log.warning(\"long_wave_low_ >= bb_upper_5T_amax : {:.5f} {:.5f} ({})\".format(long_wave_low_[c_i], bb_upper_5T_amax[c_i], mr_res[c_i]))\n","\n","\n","        if selection_id in ['4_3', '3_5', '3_51']:\n","            dc_base_T20 = res_df['dc_base_T20'].to_numpy()\n","            dc_base_3T20 = res_df['dc_base_3T20'].to_numpy()\n","            # b1_dc_base_3T20 = res_df['dc_base_3T20'].shift(3).to_numpy()\n","            # dc_base_5T = res_df['dc_base_5T'].to_numpy()\n","            # dc_base_15T = res_df['dc_base_15T'].to_numpy()\n","            # dc_base_30T = res_df['dc_base_30T'].to_numpy()\n","            dc_base_H20 = res_df['dc_base_H20'].to_numpy()\n","            # dc_base_4H = res_df['dc_base_4H'].to_numpy()\n","            # dc_base_D = res_df['dc_base_D'].to_numpy()\n","\n","            itv, period1, period2 = config.loc_set.point.p1_itv1, config.loc_set.point.p1_period1, config.loc_set.point.p1_period2\n","            if ep_loc_side == OrderSide.SELL:\n","                # ------ short_base_ <= dc_base_3T20 ------ #\n","                short_base_ = res_df['short_base_{}{}{}'.format(itv, period1, period2)].to_numpy()\n","                mr_res *= short_base_ <= dc_base_3T20\n","                if show_detail:\n","                    sys_log.warning(\"short_base_ <= dc_base_3T20 : {:.5f} {:.5f} ({})\".format(short_base_[c_i], dc_base_3T20[c_i], mr_res[c_i]))\n","\n","                # mr_res *= short_base_ <= dc_base_T20\n","                # if show_detail:\n","                #     sys_log.warning(\"short_base_ <= dc_base_T20 : {:.5f} {:.5f} ({})\".format(short_base_[c_i], dc_base_T20[c_i], mr_res[c_i]))\n","\n","                # ------ reject csd ------ #\n","                # dc_upper_ = res_df['dc_upper_{}{}'.format(itv, period1)].to_numpy()\n","                # mr_res *= dc_upper_ <= dc_base_3T\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_upper_ <= dc_base_3T20 : {:.5f} {:.5f} ({})\".format(dc_upper_[c_i], dc_base_3T[c_i], mr_res[c_i]))\n","\n","                # Todo, 부호 조심\n","                # dc_upper2_ = res_df['dc_upper_{}{}'.format(itv, period2)].to_numpy()\n","                # mr_res *= dc_upper2_ >= dc_base_H\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_upper2_ >= dc_base_H20 : {:.5f} {:.5f} ({})\".format(dc_upper2_[c_i], dc_base_H[c_i], mr_res[c_i]))  \n","\n","                # long 과 동일한 dur.\n","                dc_lower2_ = res_df['dc_lower_{}{}'.format(itv, period2)].to_numpy()\n","                mr_res *= dc_lower2_ >= dc_base_H20\n","                if show_detail:\n","                    sys_log.warning(\"dc_lower2_ >= dc_base_H20 : {:.5f} {:.5f} ({})\".format(dc_lower2_[c_i], dc_base_H20[c_i], mr_res[c_i]))  \n","\n","                # ------ consecutive base ascender ------ #\n","                # ------ 1. roll_min ------ #\n","                dc_base_3T20_rollmin = res_df['dc_base_3T20'].rolling(config.loc_set.zone.base_roll_period).min().to_numpy()\n","                mr_res *= dc_base_3T20_rollmin == dc_base_3T20\n","                if show_detail:\n","                    sys_log.warning(\n","                        \"dc_base_3T20_rollmin == dc_base_3T2020 : {:.5f} {:.5f} ({})\".format(dc_base_3T20_rollmin[c_i], dc_base_3T20[c_i], mr_res[c_i]))\n","            else:\n","                # ------ long_base >= dc_base_3T20 ------ #\n","                long_base_ = res_df['long_base_{}{}{}'.format(itv, period1, period2)].to_numpy()\n","                mr_res *= long_base_ >= dc_base_3T20\n","                if show_detail:\n","                    sys_log.warning(\"long_base_ >= dc_base_3T20 : {:.5f} {:.5f} ({})\".format(long_base_[c_i], dc_base_3T20[c_i], mr_res[c_i]))\n","\n","                # mr_res *= long_base_ >= dc_base_T20\n","                # if show_detail:\n","                #     sys_log.warning(\"long_base_ >= dc_base_T20 : {:.5f} {:.5f} ({})\".format(long_base_[c_i], dc_base_T20[c_i], mr_res[c_i]))\n","\n","                # ------ reject csd ------ #\n","                # dc_lower_ = res_df['dc_lower_{}{}'.format(itv, period1)].to_numpy()\n","                # mr_res *= dc_lower_ >= dc_base_3T\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_lower_ >= dc_base_3T20 : {:.5f} {:.5f} ({})\".format(dc_lower_[c_i], dc_base_3T[c_i], mr_res[c_i]))\n","\n","                dc_lower2_ = res_df['dc_lower_{}{}'.format(itv, period2)].to_numpy()\n","                mr_res *= dc_lower2_ >= dc_base_H20\n","                if show_detail:\n","                    sys_log.warning(\"dc_lower2_ >= dc_base_H20 : {:.5f} {:.5f} ({})\".format(dc_lower2_[c_i], dc_base_H20[c_i], mr_res[c_i]))\n","\n","                # bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","                # mr_res *= dc_lower2_ >= bb_lower_5T\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_lower2_ >= bb_lower_5T : {:.5f} {:.5f} ({})\".format(dc_lower2_[c_i], bb_lower_5T[c_i], mr_res[c_i]))\n","\n","                # ------ alignment ------ #\n","                # mr_res *= (dc_base_3T20 > dc_base_5T) & (dc_base_5T > dc_base_15T) & (dc_base_15T > dc_base_30T)\n","\n","                # ------ consecutive base ascender ------ #\n","                # ------ 1. roll_max ------ #\n","                dc_base_3T20_rollmax = res_df['dc_base_3T20'].rolling(config.loc_set.zone.base_roll_period).max().to_numpy()\n","                mr_res *= dc_base_3T20_rollmax == dc_base_3T20\n","                if show_detail:\n","                    sys_log.warning(\n","                        \"dc_base_3T20_rollmax == dc_base_3T2020 : {:.5f} {:.5f} ({})\".format(dc_base_3T20_rollmax[c_i], dc_base_3T20[c_i], mr_res[c_i]))\n","\n","                # ------ 2. roll_max_v2 - ascender  ------ #\n","                # dc_base_3T_ascend = (res_df['dc_base_3T'] >= res_df['dc_base_3T'].shift(3)).rolling(config.loc_set.zone.base_roll_period).sum().to_numpy()\n","                # # mr_res *= dc_base_3T_ascend == config.loc_set.zone.base_roll_period\n","                # mr_res *= dc_base_3T_ascend != config.loc_set.zone.base_roll_period\n","                # if show_detail:\n","                #     sys_log.warning(\"dc_base_3T_ascend == config.loc_set.zone.base_roll_period : {:.5f} {:.5f} ({})\".format(dc_base_3T_ascend[c_i], config.loc_set.zone.base_roll_period, mr_res[c_i]))\n","\n","\n","\n","    # -------------- zoned tr_set - post_work -------------- #\n","    if config.tr_set.c_ep_gap != \"None\" or config.tr_set.t_out_gap != \"None\":\n","        #       by zone_dtk       #\n","        #         c_zone        #\n","        zone_dc_upper_v2_ = res_df['zone_dc_upper_v2'.format(selection_id)].to_numpy()\n","        long_dtk_plot_1 = res_df['long_dtk_plot_1'].to_numpy() + res_df['long_dtk_plot_gap'].to_numpy() * config.loc_set.zone.zone_dt_k\n","        zone_dc_lower_v2_ = res_df['zone_dc_lower_v2'.format(selection_id)].to_numpy()\n","        short_dtk_plot_1 = res_df['short_dtk_plot_1'].to_numpy() - res_df['short_dtk_plot_gap'].to_numpy() * config.loc_set.zone.zone_dt_k\n","        if ep_loc_side == OrderSide.SELL:\n","            zone_res = zone_dc_upper_v2_ > long_dtk_plot_1  # mr_res 와는 별개임\n","            pos = 'short'\n","        else:\n","            zone_res = zone_dc_lower_v2_ < short_dtk_plot_1\n","            pos = 'long'\n","\n","        # static 여부에 따른 vectorized adj. - dynamic 은 vectorize 불가\n","        if config.ep_set.static_ep and config.tr_set.c_ep_gap != \"None\":\n","            res_df['{}_ep_{}'.format(pos, selection_id)][zone_res] = res_df['{}_ep2_{}'.format(pos, selection_id)][zone_res]\n","        if config.out_set.static_out and config.tr_set.t_out_gap != \"None\":\n","            res_df['{}_out_{}'.format(pos, selection_id)][~zone_res] = res_df['{}_out2_{}'.format(pos, selection_id)][\n","                ~zone_res]  # t_zone 에 대한 out2 setting\n","        zone_arr = np.where(zone_res == 1, 'c', 't')\n","\n","    return mr_res, zone_arr  # mr_res 의 True idx 가 open signal"]},{"cell_type":"markdown","source":["#### ep_loc legacy"],"metadata":{"id":"EQ63Jwpvr7qA"}},{"cell_type":"code","source":["\n","            \n","\n","        # ------------------ swing_middle ------------------ #\n","        # ------------ 1. envelope ------------ #\n","\n","        # ------ a. dc ------ #\n","        # ep_loc check 기준 idx 가 entry 기준이라는 걸 명심\n","        if selection_id in ['v3_2']:\n","            hc_itv = '15T'\n","            dc_itv = '15T'\n","            shift_num = [0, to_itvnum(hc_itv)]\n","            div_res = [1, 0]\n","            for itv_num, res in zip(shift_num, div_res):\n","                close_ = res_df['close_{}'.format(hc_itv)].shift(itv_num).to_numpy()  # close_bar timein 사용하는 경우, 특수로 shift(0) 사용가능\n","                if ep_loc_side == OrderSide.SELL:\n","                    dc_lower_ = res_df['dc_lower_%s' % dc_itv].shift(itv_num).to_numpy()\n","                    mr_res *= (close_ < dc_lower_) == res\n","                else:\n","                    dc_upper_ = res_df['dc_upper_%s' % dc_itv].shift(itv_num).to_numpy()\n","                    mr_res *= (close_ > dc_upper_) == res\n","\n","        # ------------ 2. degree ------------ #\n","        # ------ a. norm_body_ratio ------ #\n","        if config.loc_set.zone.abs_ratio != \"None\":\n","            itv = config.loc_set.point.tf_entry\n","            abs_ratio_ = res_df['abs_ratio_{}'.format(itv)].to_numpy()\n","            mr_res *= abs_ratio_ >= config.loc_set.zone.abs_ratio\n","            # mr_res *= abs_ratio_ <= config.loc_set.zone.abs_ratio\n","\n","    # ------------ 2. imbalance_ratio ------------ #\n","    if config.loc_set.zone.ir != \"None\":\n","        itv = config.loc_set.point.tf_entry\n","        itv_num = to_itvnum(itv)\n","        if ep_loc_side == OrderSide.SELL:\n","            short_ir_ = res_df['short_ir_{}'.format(itv)].to_numpy()\n","            # short_ir_ = res_df['short_ir_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","            # mr_res *= short_ir_ >= config.loc_set.zone.ir     # greater\n","            mr_res *= short_ir_ <= config.loc_set.zone.ir  # lesser\n","            if show_detail:\n","                sys_log.warning(\n","                    \"short_ir_ <= config.loc_set.zone.ir : {:.5f} {:.5f} ({})\".format(short_ir_[c_i], config.loc_set.zone.ir, mr_res[c_i]))\n","        else:\n","            long_ir_ = res_df['long_ir_{}'.format(itv)].to_numpy()\n","            # long_ir_ = res_df['long_ir_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","            # mr_res *= long_ir_ >= config.loc_set.zone.ir\n","            mr_res *= long_ir_ <= config.loc_set.zone.ir\n","            if show_detail:\n","                sys_log.warning(\n","                    \"long_ir_ <= config.loc_set.zone.ir : {:.5f} {:.5f} ({})\".format(long_ir_[c_i], config.loc_set.zone.ir, mr_res[c_i]))\n","                \n","        # if selection_id in ['3_6']:\n","        #   itv, period1, period2 = config.loc_set.point.p1_itv0, config.loc_set.point.p1_period1, config.loc_set.point.p1_period2          \n","\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     high_5T = res_df['high_5T'].to_numpy()  # Todo, tf_entry - 1 open 기준이라 future_data 사용 가능\n","        #     short_base_ = res_df['short_base_{}{}{}'.format(itv, period1, period2)]\n","        #     mr_res *= high_5T < short_base_\n","        #     if show_detail:\n","        #         sys_log.warning(\n","        #             \"high_5T < short_base_ : {:.5f} {:.5f} ({})\".format(high_5T[c_i], short_base_[c_i], mr_res[c_i]))\n","        #   else:\n","        #     low_5T = res_df['low_5T'].to_numpy()  # Todo, tf_entry - 1 open 기준이라 future_data 사용 가능\n","        #     long_base_ = res_df['long_base_{}{}{}'.format(itv, period1, period2)]\n","        #     mr_res *= low_5T > long_base_\n","        #     if show_detail:\n","        #         sys_log.warning(\n","        #             \"low_5T > long_base_ : {:.5f} {:.5f} ({})\".format(low_5T[c_i], long_base_[c_i], mr_res[c_i]))'\n","        \n","        # ------ dc_base ------ #\n","        # if selection_id in ['4']:  # 'v3_3', 'v3_4',\n","        #   hc_itv = '5T'\n","        #   dc_itv = '5T'\n","        #   itv_num = to_itvnum(hc_itv)\n","        #   close_ = res_df['close_{}'.format(hc_itv)].shift(itv_num).to_numpy()   # 따라서 future_data 사용시, shifting 필요함\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     dc_lower_ = res_df['dc_lower_%s' % dc_itv].shift(itv_num).to_numpy()\n","        #     mr_res *= close_ < dc_lower_\n","        #   else:\n","        #     dc_upper_ = res_df['dc_upper_%s' % dc_itv].shift(itv_num).to_numpy()\n","        #     mr_res *= close_ > dc_upper_\n","\n","        # ------ ema ------ #\n","        # if selection_id in ['v5_2']: # 'v3'\n","        #   ema_5T = res_df['ema_5T'].to_numpy()\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     mr_res *= close < ema_5T\n","        #   else:\n","        #     mr_res *= close > ema_5T\n","        \n","        # ------ b. bb ------ #\n","        # close = res_df['close'].to_numpy()\n","\n","        # if selection_id in ['v3_3']:\n","        #   open = res_df['open'].to_numpy()\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     bb_lower_1m = res_df['bb_lower_1m'].to_numpy()\n","        #     # mr_res *= close <= bb_lower_1m\n","        #     mr_res *= open <= bb_lower_1m\n","        #   else:\n","        #     bb_upper_1m = res_df['bb_upper_1m'].to_numpy()\n","        #     # mr_res *= close >= bb_upper_1m\n","        #     mr_res *= open >= bb_upper_1m\n","\n","        if selection_id in ['4_1']:\n","            if ep_loc_side == OrderSide.SELL:\n","                bb_lower_15T = res_df['bb_lower_15T'].to_numpy()\n","                short_ep_ = res_df['short_ep_{}'.format(selection_id)].to_numpy()\n","                mr_res *= bb_lower_15T >= short_ep_\n","            else:\n","                bb_upper_15T = res_df['bb_upper_15T'].to_numpy()\n","                long_ep_ = res_df['long_ep_{}'.format(selection_id)].to_numpy()\n","                mr_res *= bb_upper_15T <= long_ep_\n","\n","        # if selection_id in ['v5_2']:\n","        #   bb_upper2_ = res_df['bb_upper2_%s' % config.loc_set.zone.bbz_itv].to_numpy()\n","        #   bb_lower2_ = res_df['bb_lower2_%s' % config.loc_set.zone.bbz_itv].to_numpy()\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     mr_res *= bb_upper2_ < close\n","        #   else:\n","        #     mr_res *= bb_lower2_ > close\n","\n","        # degree_list = literal_eval(config.loc_set.zone.degree_list)\n","        # if len(degree_list) != 0:\n","        # # if selection_id in ['v3_3', 'v3_4']:\n","        #   norm_close_15 = res_df['norm_close_15'].to_numpy()   # -> 이거 뭘로 만들었는지 불분명함,,\n","        #   b1_norm_close_15 = res_df['norm_close_15'].shift(15).to_numpy()\n","\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     mr_res *= norm_close_15 <= -degree_list[0]\n","        #     # mr_res *= b1_norm_close_15 <= -degree_list[1]\n","        #   else:\n","        #     mr_res *= norm_close_15 >= degree_list[0]\n","        #     # mr_res *= b1_norm_close_15 >= degree_list[1]\n","\n","        # ------ b. dc ------ #\n","        # if selection_id in ['v3_3']:\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     dc_lower_ = res_df['dc_lower_1m'].to_numpy()\n","        #     b1_dc_lower_ = res_df['dc_lower_1m'].shift(1).to_numpy()\n","        #     mr_res *= dc_lower_ < b1_dc_lower_\n","        #   else:\n","        #     dc_upper_ = res_df['dc_upper_1m'].to_numpy()\n","        #     b1_dc_upper_ = res_df['dc_upper_1m'].shift(1).to_numpy()\n","        #     mr_res *= dc_upper_ > b1_dc_upper_\n","\n","        # ------ c. sar ------ #\n","        # if selection_id in ['v3_3']:\n","        # sar_uptrend_3T = res_df['sar_uptrend_3T'].to_numpy()\n","        # if ep_loc_side == OrderSide.SELL:\n","        #   mr_res *= sar_uptrend_3T == 0\n","        # else:\n","        #   mr_res *= sar_uptrend_3T == 1"],"metadata":{"id":"csZwxsP5r_Pz"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JjKHyqftzhD7"},"source":["### set config (override available)"]},{"cell_type":"code","execution_count":17,"metadata":{"id":"q_4E-zH02WJy","executionInfo":{"status":"ok","timestamp":1650633881794,"user_tz":-540,"elapsed":448,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["#     caution : MARKET / LIMIT spelling   #\n","#      json doesn't support single quotes     #\n","\n","param_dict = {\n","  \"selection_id\": \"3_10\",\n","  \"trader_set\": {\n","    \"backtrade\": 0,\n","    \"back_data_path\": \"C:\\\\Users\\\\Lenovo\\\\PycharmProjects\\\\System_Trading\\\\JnQ\\\\candlestick_concated\\\\database_bn\\\\2022-04-08\\\\2022-04-08 ETHUSDT_1m.ftr\",\n","    \"start_datetime\": \"2020-09-05 00:00:59.999\",\n","    \"run\": 1,\n","    \"df_log\": 0,\n","    \"latest_index\": -1,\n","    \"complete_index\": -2,\n","    \"limit_fee\": 0.0002,\n","    \"market_fee\": 0.0004,\n","    \"initial_asset\": 10,\n","    \"asset_changed\": 0,\n","    \"symbol\": \"ETHUSDT\",\n","    \"symbol_changed\": 0,\n","    \"itv_list\": \"['T', '3T', '5T', '15T', '30T', '4H']\",\n","    \"row_list\": \"[100, 50, 1, 1, 1, 1]\",\n","    \"rec_row_list\": \"[1, 1, 1, 1, 1, 1]\",\n","    \"offset_list\": \"['1h', '1h', '1h', '1h', '1h', '1h']\",\n","    \"bar_close_second\": 59,\n","    \"realtime_term\": 0.01,\n","    \"api_retry_term\": 3,\n","    \"check_entry_sec\": 10,\n","    \"entry_execution_wait\": 60,\n","    \"breakout_qty_ratio\": 0.97,\n","    \"qty_check_term\": 30,\n","    \"exit_execution_wait\": 60,\n","    \"close_complete_term\": 5,\n","    \"save_stacked_df\": 0,\n","    \"stacked_df_exist\": 1\n","  },\n","  \"pos_set\": {\n","    \"short_inversion\": 0,\n","    \"long_inversion\": 0,\n","    \"short_ban\": 0,\n","    \"long_ban\": 0\n","  },\n","  \"loc_set\": {      \n","    \"point\": {\n","      \"exp_itv\": \"5T\",\n","      \"p1_itv1\": \"T\",\n","      \"p1_itv0\": \"T\",\n","      \"p1_period1\": 15,\n","      \"p1_period2\": 15,\n","      \"p2_itv1\": \"None\",\n","      \"p2_itv0\": \"T\",\n","      \"p2_period1\": 20,\n","      \"p2_period2\": 40,\n","      \"tf_entry\": \"15T\",\n","      \"base_gap\": 0.1,\n","      \"short_spread\": \"None\",\n","      \"long_spread\": \"None\",\n","      \"short_tr_thresh\": \"None\",\n","      \"long_tr_thresh\": \"None\",\n","      \"wick_score_list\": \"[]\",\n","      \"body_score_list\": \"[]\",\n","      \"score_itv_list\": \"[]\",\n","      \"cppr\": \"None\",\n","      \"ppr\": \"None\",\n","      \"wbr\": \"None\",\n","      \"dbr\": \"None\",\n","      \"dbr2\": \"None\",\n","      \"brr\": \"None\",\n","      \"ir\": \"None\",\n","      \"osc_band\": 20\n","    },\n","    \"zone\": {\n","      \"use_zone\": 0,\n","      \"abs_ratio\": \"None\",\n","      \"base_roll_period\": 50,\n","      \"degree_list\": \"[]\",\n","      \"hc_itv\": 60,\n","      \"dtk_itv\": \"5T\",\n","      \"dt_k\": \"None\",\n","      \"dc_period\": 135,\n","      \"use_dtk_line\": 0,\n","      \"zone_dt_k\": 0.4,\n","      \"zone_dc_period\": 135\n","    }\n","  },\n","  \"tr_set\": {\n","    \"wave_min\": 10,\n","    \"wave_max\": 15,\n","    \"ei_k\": -1.0,\n","    \"ep_out_tick\": 5,\n","    \"tp_gap\": 0.0,\n","    \"decay_gap\": \"None\",\n","    \"ep_gap\": -0.5,\n","    \"out_gap\": 0,\n","    \"c_ep_gap\": \"None\",\n","    \"t_out_gap\": \"None\",\n","    \"bias_gap\": 0,\n","    \"bias_info_tick\": 240\n","  },\n","  \"ep_set\": {\n","    \"entry_type\": \"LIMIT\",\n","    \"static_ep\": 1,\n","    \"point2\": {\n","      \"use_point2\": 0,\n","      \"entry_type\": \"MARKET\",\n","      \"wick_score_list\": \"[]\",\n","      \"body_score_list\": \"[]\",\n","      \"score_itv_list\": \"['T']\"\n","    }\n","  },\n","  \"tp_set\": {\n","    \"non_tp\": 0,\n","    \"static_tp\": 1,\n","    \"tp_onexec\": 0,\n","    \"decay_term\": 60,\n","    \"p_ranges\": \"[1]\",\n","    \"p_qty_ratio\": \"[1]\"\n","  },\n","  \"out_set\": {\n","    \"hl_out\": 1,\n","    \"static_out\": 1,\n","    \"out_onexec\": 0,\n","    \"tf_exit\": \"None\",\n","    \"rsi_exit\": 0\n","  },\n","  \"lvrg_set\": {\n","    \"leverage\": 2,\n","    \"static_lvrg\": 0,\n","    \"allow_float\": 0,\n","    \"target_pct\": 0.03,\n","    \"lvrg_rejection\": 0\n","  }\n","}\n","\n","config = EasyDict(param_dict)"]},{"cell_type":"markdown","metadata":{"id":"rLI8unIyroiC"},"source":["## run"]},{"cell_type":"code","execution_count":18,"metadata":{"id":"qBJfPsmJzVIr","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1650633884360,"user_tz":-540,"elapsed":572,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"8c9efe1e-9a3a-4c82-d5c5-063fa97b33af"},"outputs":[{"output_type":"stream","name":"stdout","text":["\"3_10\" {\n"," \"point\": {\n","  \"exp_itv\": \"5T\",\n","  \"p1_itv1\": \"T\",\n","  \"p1_itv0\": \"T\",\n","  \"p1_period1\": 15,\n","  \"p1_period2\": 15,\n","  \"p2_itv1\": \"None\",\n","  \"p2_itv0\": \"T\",\n","  \"p2_period1\": 20,\n","  \"p2_period2\": 40,\n","  \"tf_entry\": \"15T\",\n","  \"base_gap\": 0.1,\n","  \"short_spread\": \"None\",\n","  \"long_spread\": \"None\",\n","  \"short_tr_thresh\": \"None\",\n","  \"long_tr_thresh\": \"None\",\n","  \"wick_score_list\": \"[]\",\n","  \"body_score_list\": \"[]\",\n","  \"score_itv_list\": \"[]\",\n","  \"cppr\": \"None\",\n","  \"ppr\": \"None\",\n","  \"wbr\": \"None\",\n","  \"dbr\": \"None\",\n","  \"dbr2\": \"None\",\n","  \"brr\": \"None\",\n","  \"ir\": \"None\",\n","  \"osc_band\": 20\n"," },\n"," \"zone\": {\n","  \"use_zone\": 0,\n","  \"abs_ratio\": \"None\",\n","  \"base_roll_period\": 50,\n","  \"degree_list\": \"[]\",\n","  \"hc_itv\": 60,\n","  \"dtk_itv\": \"5T\",\n","  \"dt_k\": \"None\",\n","  \"dc_period\": 135,\n","  \"use_dtk_line\": 0,\n","  \"zone_dt_k\": 0.4,\n","  \"zone_dc_period\": 135\n"," }\n","} {\n"," \"wave_min\": 10,\n"," \"wave_max\": 15,\n"," \"ei_k\": -1.0,\n"," \"ep_out_tick\": 5,\n"," \"tp_gap\": 0.0,\n"," \"decay_gap\": \"None\",\n"," \"ep_gap\": -0.5,\n"," \"out_gap\": 0,\n"," \"c_ep_gap\": \"None\",\n"," \"t_out_gap\": \"None\",\n"," \"bias_gap\": 0,\n"," \"bias_info_tick\": 240\n","} {\n"," \"entry_type\": \"LIMIT\",\n"," \"static_ep\": 1,\n"," \"point2\": {\n","  \"use_point2\": 0,\n","  \"entry_type\": \"MARKET\",\n","  \"wick_score_list\": \"[]\",\n","  \"body_score_list\": \"[]\",\n","  \"score_itv_list\": \"['T']\"\n"," }\n","} {\n"," \"non_tp\": 0,\n"," \"static_tp\": 1,\n"," \"tp_onexec\": 0,\n"," \"decay_term\": 60,\n"," \"p_ranges\": \"[1]\",\n"," \"p_qty_ratio\": \"[1]\"\n","} {\n"," \"hl_out\": 1,\n"," \"static_out\": 1,\n"," \"out_onexec\": 0,\n"," \"tf_exit\": \"None\",\n"," \"rsi_exit\": 0\n","} {\n"," \"leverage\": 2,\n"," \"static_lvrg\": 0,\n"," \"allow_float\": 0,\n"," \"target_pct\": 0.03,\n"," \"lvrg_rejection\": 0\n","} "]}],"source":["# funcs = [ep_out_v2, ep_loc_point2_v2, lvrg_set]  # ep_out for p1 & p2\n","funcs = [ep_out, ep_loc_point2_v2, lvrg_set]     # ep_out for p1-only\n","# funcs = [ep_out_v0, ep_loc_point2_v2, lvrg_set]  # ep_out for v3\n","\n","id_idx_list = [0]  # ID_arr 에서 import 할 id_idx 선택\n","public_override = 1\n","utils_override = 1\n","config_override = 1\n","\n","# ------ config_list 와 같은 org_var 에 override 하는거 다시 생각하기 ------ #\n","ID_list = ID_arr[id_idx_list]\n","utils_list = utils_arr[id_idx_list]\n","config_list = config_arr[id_idx_list]\n","\n","if config_override or utils_override:\n","  assert len(config_list) == 1\n","  if config_override:    \n","    config_list[0] = config\n","    ID_list[0] = config.selection_id\n","  \n","config = config_list[0]  # base config = config_list[0]\n","tp_fee, out_fee = calc_tp_out_fee_v2(config)   # -> rev_pr 때문에 일단 이곳에도 선언함\n","\n","# ------- inversion set ------- #\n","inversion = 0\n","fdist_thresh = 1\n","# ------- plot param ------- #\n","show_detail = 0\n","# ------- temp param ------- #\n","allow_osc_touch = 0\n","rsi_gap = 5\n","\n","# ------- just printing config ------- #\n","# ['selection_id', 'pos_set', 'loc_set', 'tr_set', 'ep_set', 'tp_set', 'out_set', 'lvrg_set']\n","_ = [print(json.dumps(config[key_], indent=1), end=' ') for key_ in ['selection_id', 'loc_set', 'tr_set', 'ep_set', 'tp_set', 'out_set', 'lvrg_set']]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"afUV2b1jaggN"},"outputs":[],"source":["# config.trader_set.start_datetime = \"2020-09-05 00:00:59.999\" #  \"2020-09-05 00:00:59.999\" # 2022-02-01 16:34:59.999000 2022-01-14 16:34:59.999000  \"2020-09-05 00:00:59.999\" \"2022-01-10 00:00:59.999\" \"2021-10-04 02:39:59.999000\"\n","# config_list[0].tr_set.wave_min = 20\n","# config_list[0].tr_set.wave_max = 50"]},{"cell_type":"code","execution_count":19,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1994,"status":"ok","timestamp":1650633889548,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"WstWVNihCNH8","outputId":"fc782e3e-d27c-4109-cad9-ac42204ef178"},"outputs":[{"output_type":"stream","name":"stdout","text":["public_indi elapsed time : 0.9191513061523438\n","make data_list elapsed time : 0.00043487548828125\n"]}],"source":["# ------ slicing res_df ------ #\n","res_df = res_df_.loc[pd.to_datetime(config.trader_set.start_datetime):]\n","\n","np_timeidx = np.array([intmin_np(date_) for date_ in res_df.index.to_numpy()])\n","\n","# ------------ public_indi ------------ # - 딱히 반복될 이유가 없는 phase - annot. 달때, why 까지 적어주면 좋음\n","start_0 = time.time()\n","if public_override:\n","    res_df = public_indi(res_df, config_list[0], np_timeidx)  # 현재 대부분의 시간은 h_candle 에서 소비되고 있음\n","else:\n","    res_df = utils_public.public_indi(res_df, config_list[0], np_timeidx)\n","print(\"public_indi elapsed time :\", time.time() - start_0)\n","\n","# ------------ make data_list ------------ # - 반복될 이유가 없는 phase - public_indo 에 종속\n","start_0 = time.time()\n","ohlc_cols = ['open', 'high', 'low', 'close']\n","ohlc_list = [res_df[col_].to_numpy() for col_ in ohlc_cols]\n","print(\"make data_list elapsed time :\", time.time() - start_0)"]},{"cell_type":"markdown","metadata":{"id":"RqRF1eyZ0xBL"},"source":["### idep_plot"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_iYcJk8nK8Yq"},"outputs":[],"source":["# ------ edit utils config ------ #\n","# config_list[0].pos_set.short_ban = 0\n","# config_list[0].loc_set.point.p1_period1 = 20\n","# config_list[0].loc_set.point.p1_period2 = 50\n","# # config_list[0].loc_set.point.p2_period1 = 20\n","# # config_list[0].loc_set.point.p2_period2 = 20\n","# # config_list[0].loc_set.point.base_gap = -0.0\n","# config_list[0].tr_set.tp_gap = 0.3\n","# config_list[0].tr_set.ep_gap = -1.0\n","# config_list[0].tr_set.out_gap = 0\n","# # config_list[0].tr_set.bias_gap = 1.5\n","# config_list[0].tr_set.bias_info_tick = 240"]},{"cell_type":"code","execution_count":20,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":456,"status":"ok","timestamp":1650633889998,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"iI39YI_5GguK","outputId":"d79f3ec3-10d8-41d3-f067-3ddb2f299e53"},"outputs":[{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["enlist_rtc elapsed time : 0.03629755973815918\n","enlist_tr elapsed time : 0.2075190544128418\n"]}],"source":["if utils_override:   # 현재, utils_override 하는 경우 1개의 ID 만 허용함 \n","  start_0 = time.time()\n","  res_df = enlist_rtc(res_df, config_list[0], np_timeidx)\n","  print(\"enlist_rtc elapsed time :\", time.time() - start_0)\n","  start_0 = time.time()\n","  res_df = enlist_tr(res_df, config_list[0], np_timeidx)    # 36995.0 -> 152766.0 # 4044 np.sum(long_open_res == 1) : 4325\n","  print(\"enlist_tr elapsed time :\", time.time() - start_0)\n","else:\n","    start_0 = time.time()\n","    for utils_, config_ in zip(utils_list, config_list):\n","        res_df = utils_.enlist_rtc(res_df, config_, np_timeidx)\n","        res_df = utils_.enlist_tr(res_df, config_, np_timeidx)\n","    print(\"elapsed time :\", time.time() - start_0)"]},{"cell_type":"code","execution_count":29,"metadata":{"id":"gfDSOGMd91rE","executionInfo":{"status":"ok","timestamp":1650633959393,"user_tz":-540,"elapsed":456,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# ------ edit loc_set config ------ #\n","# config_list[0].loc_set.point.cppr = 0.5   # \"None\" # 0.5 0.7\n","# config_list[0].loc_set.point.wbr = \"None\" # 0.7\n","config_list[0].loc_set.point.dbr = \"None\"   # 0.7\n","config_list[0].loc_set.point.dbr2 = \"None\"  # 0.7\n","config_list[0].loc_set.point.brr = \"None\"   # 0.8\n","# config_list[0].loc_set.point.ir = \"None\" # \"None\" 0.8\n","# config_list[0].loc_set.point.wick_score_list = \"[]\"\n","# config_list[0].loc_set.point.score_itv_list = \"['H']\"\n","# # config_list[0].loc_set.point.abs_ratio = \"None\"  # 0.7\n","# config_list[0].loc_set.point.short_tr_thresh = \"None\" #  0.8 # # 0.7 # tr_thresh 엄청 민감함\n","# config_list[0].loc_set.point.long_tr_thresh = 0.85 #  0.8 ## 0.7\n","# config_list[0].loc_set.zone.use_zone = 0\n","# # config_list[0].loc_set.zone.base_roll_period = 60"]},{"cell_type":"code","execution_count":30,"metadata":{"executionInfo":{"elapsed":2314,"status":"ok","timestamp":1650633962165,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"9DPgykxQ92mU","colab":{"base_uri":"https://localhost:8080/"},"outputId":"8fe428f8-d2c4-45ed-c4c6-c39914f137ed"},"outputs":[{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 1.8257555961608887\n"]}],"source":["open_info_df = get_open_info_df(ep_loc_v3, res_df, np_timeidx, ID_list, config_list, id_idx_list)  # --> point * dur. 관련 (loc_set) param 에 종속 (open_info 가 변경되는게 아니라면, 재실행할 필요없음)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KqVkg236t_f2"},"outputs":[],"source":["# ------ edit entry & exit (ep, tp, out, ..) config ------ #\n","# config_list[0].tr_set.ei_k = 0.\n","# # config_list[0].loc_set.zone.ep_out_tick = 10\n","# # # config_list[0].ep_set.point2.use_point2 = 1\n","# # # config_list[0].ep_set.point2.entry_type = \"LIMIT\"\n","# # # config_list[0].ep_set.point2.wick_score_list = str([])\n","# # # config_list[0].tp_set.static_tp = 1\n","# # # config_list[0].tp_set.non_tp = 0 # 0 1\n","# config_list[0].tp_set.p_ranges = \"[1]\"\n","# config_list[0].tp_set.p_qty_ratio = \"[1]\"\n","# # config_list[0].tp_set.p_ranges = \"[0.2, 0.66, 1]\"\n","# # config_list[0].tp_set.p_qty_ratio = \"[0.25, 0.25, 0.5]\"\n","# # config_list[0].tp_set.p_ranges = \"[0.66, 1]\"\n","# # config_list[0].tp_set.p_qty_ratio = \"[0.1, 0.9]\"\n","# # # config_list[0].out_set.hl_out = 1\n","# # # config_list[0].out_set.tf_exit = \"None\" # 15 \"None\"\n","# config_list[0].lvrg_set.leverage = 1\n","# config_list[0].lvrg_set.static_lvrg = 0\n","# config_list[0].lvrg_set.target_pct = 0.03\n","# # config_list[0].lvrg_set.allow_float = 0\n","# config_list[0].lvrg_set.lvrg_rejection = 0"]},{"cell_type":"code","execution_count":31,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":644},"executionInfo":{"elapsed":4167,"status":"ok","timestamp":1650633966329,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"HHq6cr9GPBot","outputId":"3a46913a-1999-46e5-da08-2a94955ade2a"},"outputs":[{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 0.8084492683410645\n","short_obj.shape : (729, 5)\n","long_obj.shape : (570, 5)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1728x576 with 6 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 2.707937717437744\n"]}],"source":["test_ratio = 0.0\n","short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_bias_arr, short_false_bias_arr, short_point1_arr, short_en_tp1, short_en_out0, \\\n","      long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_bias_arr, long_false_bias_arr, long_point1_arr, long_en_tp1, long_en_out0 = \\\n","get_res_v4(res_df, open_info_df, ohlc_list, config_list, np_timeidx, funcs, test_ratio=test_ratio, plot_is=1, signi=False)   # open 이 많을 수록 en_ex_pairing elapsed time : 11.58370590209961"]},{"cell_type":"markdown","metadata":{"id":"n6gc7lERC4VE"},"source":["### statistics (stem 별로 진행)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HHjIdn2MC4VE"},"outputs":[],"source":["selection_id = config.selection_id\n","\n","short_open_i = short_obj[-1].astype(int)\n","long_open_i = long_obj[-1].astype(int)\n","\n","short_open_tp_1 = res_df['short_tp_1_{}'.format(selection_id)].to_numpy()[short_open_i]\n","long_open_tp_1 = res_df['long_tp_1_{}'.format(selection_id)].to_numpy()[long_open_i]\n","\n","short_open_tp_gap = res_df['short_tp_gap_{}'.format(selection_id)].to_numpy()[short_open_i]  # use open_i\n","long_open_tp_gap = res_df['long_tp_gap_{}'.format(selection_id)].to_numpy()[long_open_i]\n","\n","short_open_epout_0 = res_df['short_epout_0_{}'.format(selection_id)].to_numpy()[short_open_i]\n","long_open_epout_0 = res_df['long_epout_0_{}'.format(selection_id)].to_numpy()[long_open_i]\n","\n","short_open_epout_gap = res_df['short_epout_gap_{}'.format(selection_id)].to_numpy()[short_open_i]  # use open_i\n","long_open_epout_gap = res_df['long_epout_gap_{}'.format(selection_id)].to_numpy()[long_open_i]\n","\n","# ------ pairing 된 en, ex_idx 기준으로 survey 진행 ------ #\n","# 0. high, low (exit_done 까지의) -> partial (tpg) 과 outg survey 목표\n","#   a. short -> tpg - low, outg - high\n","#   b. long -> tpg - high, outg - low\n","short_max_tpg = get_max_tpg_v2(\"SELL\", ohlc_list, short_pr, short_obj[:4], short_open_tp_1, short_open_tp_gap)\n","long_max_tpg = get_max_tpg_v2(\"BUY\", ohlc_list, long_pr, long_obj[:4], long_open_tp_1, long_open_tp_gap)\n","\n","# ------ 0. tp 까지 도달하는 최소 idx 도출, en_idx 부터 ------ #\n","#   a. bias_info_tick 의 limit 을 정해주지 않으면 굉장히 길어질 수 있다고 봄\n","# short_max_outg, short_outg_open_idx = get_max_outg_v2(\"SELL\", config, ohlc_list, short_obj, short_tpout_arr, short_open_epout_0, short_open_epout_gap)\n","# long_max_outg, long_outg_open_idx = get_max_outg_v2(\"BUY\", config, ohlc_list, long_obj, long_tpout_arr, long_open_epout_0, long_open_epout_gap)\n","short_max_outg, short_open_idx, short_true_open_idxth = get_max_outg_v3(\"SELL\", config, ohlc_list, short_obj, short_tpout_arr, short_open_epout_0, short_open_epout_gap)\n","long_max_outg, long_open_idx, long_true_open_idxth = get_max_outg_v3(\"BUY\", config, ohlc_list, long_obj, long_tpout_arr, long_open_epout_0, long_open_epout_gap)\n","\n","current_tpg= config.tr_set.tp_gap\n","current_outg = config.tr_set.out_gap"]},{"cell_type":"markdown","source":["#### consecutive dur. value survey on bias"],"metadata":{"id":"tOFkzUX2imQu"}},{"cell_type":"code","source":["res_df.dtypes"],"metadata":{"id":"CgvSrXaZEkMZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gnSvYKIzC4VF"},"outputs":[],"source":["# ------------ dependent vars. ------------ #\n","# res_df 에 존재하는 col 는 모두 사용가능함\n","# ------ 1. 도출한 outg 와 vars. pairing 진행 (by valid_idx) ------ #\n","devided_cols = ['tr_{}'.format(selection_id)]  # , 'ir_5T'\n","public_cols = ['b1_cppr_15T', 'b1_updbr', 'b1_lwdbr', 'b1_updbr_cppr', 'b1_lwdbr_cppr']  # 'abs_ratio_5T', 'rel_ratio_5T', 'body_rel_ratio_5T'\n","\n","short_datas = [res_df['short_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","long_datas = [res_df['long_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","\n","titles = devided_cols + public_cols"]},{"cell_type":"code","source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(14, 18))\n","nrows, ncols = len(short_datas), 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        )\n","\n","num_samples = 160\n","alpha = 0.8\n","\n","for ings_idx, (title, short_data, long_data) in enumerate(zip(titles, short_datas, long_datas)):\n","  inner_gs = gs[ings_idx].subgridspec(nrows=1, ncols=2)\n","\n","  short_open_data = short_data[short_open_idx]\n","  long_open_data = long_data[long_open_idx]\n","\n","  short_true_data = short_open_data[short_bias_arr.ravel()]\n","  short_false_data = short_open_data[short_false_bias_arr.ravel()]\n","  long_true_data = long_open_data[long_bias_arr.ravel()]\n","  long_false_data = long_open_data[long_false_bias_arr.ravel()]\n","\n","  short_true_inf_idx = np.isinf(short_true_data)\n","  short_false_inf_idx = np.isinf(short_false_data)\n","  long_true_inf_idx = np.isinf(long_true_data)\n","  long_false_inf_idx = np.isinf(long_false_data)\n","    \n","  plt.subplot(inner_gs[0])\n","  v, c = np.unique(short_true_data[~short_true_inf_idx], return_counts=True)\n","  plt.hist(v, weights=c, bins=num_samples, alpha=alpha, color='#00ff00', edgecolor='black')\n","  v, c = np.unique(short_false_data[~short_false_inf_idx], return_counts=True)\n","  plt.hist(v, weights=c, bins=num_samples, alpha=alpha, color='#ff0000', edgecolor='black')\n","  plt.title('short_' + title)  \n","  if v.min() < -20:\n","    plt.xlim(-20, 0)\n","\n","  plt.subplot(inner_gs[1])\n","  v, c = np.unique(long_true_data[~long_true_inf_idx], return_counts=True)\n","  plt.hist(v, weights=c, bins=num_samples, alpha=alpha, color='#00ff00', edgecolor='black')\n","  v, c = np.unique(long_false_data[~long_false_inf_idx], return_counts=True)\n","  plt.hist(v, weights=c, bins=num_samples, alpha=alpha, color='#ff0000', edgecolor='black')\n","  plt.title('long_' + title)\n","  if v.min() < -20:\n","    plt.xlim(-20, 0)\n","  \n","# plt.suptitle(title)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"Sahvc-R0jD1A","executionInfo":{"status":"ok","timestamp":1650603706315,"user_tz":-540,"elapsed":13049,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"15423591-9d59-40a2-d584-4d2334fdeafb"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1008x1296 with 12 Axes>"],"image/png":"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0bBhw3zG3r/ssst8hnb0To78PW+J97CRl112WUSzPZeXl+vMmTNBhy8N1p73toSEBA0dOtRne2uPLRTufVosfDQAQFMlJSVKTk72PA+1nzhx4oTOnz/vM4Gr92d8S9qybyoqKlK/fv0CzjnUt29fn8vNgvVNF198sfr169cufRP9EtoS7ybEREpKiqZNmyabzaazZ8/qzJkzLU6YtmvXLtXW1mrJkiVKTEzUlClTNHv2bL300ksB65SVlemKK64IOa7//M//1JAhQ9S3b1899NBDevnllz3bbDabunfv3uxxIMYYPffcc3rqqad0ySWXyGKxaNKkSbLZbJ4yjzzyiHr06KHRo0frRz/6kU9748eP18033yyr1ar77rtP586d03vvvRfysbhZrVZ1795dVqvV57EkTZgwQSkpKUpISFC/fv30v//7v3rrrbdUXV3d6nYAoKvLzs7Www8/LIfDof79++sXv/iFXnzxxRbrNTY2auPGjVq2bJl69OihkSNHasGCBSG3+7Of/UxJSUkaOnSo7r33Xp++onv37p7+yPtxIKWlpcrJydHvf/97JSUlKTExUddcc41PmUcffVTdunXT5MmT9d3vflcbNmzwbLv++ut19dVXq1u3blq+fLnee+89HTt2LORjcUtMTFT37t1lsVh8HkvS1KlTddlll0lyzmGzYsUKbd68udVtAIGQACEmunfvrhUrVqi8vFylpaUaOHCgli5dGrTO+fPnNXv2bKWlpam8vFy///3vtWDBAn3yyScB66xevVqjR49WZWWlNm3a1GJc69ev1/bt2/Xpp5/qyJEjevzxxz3bPvnkE509e1ZDhw7V9u3bdfbsWZ9vAv356U9/qv379ysvL08VFRV68sknfb7Fevvtt3X48GG98cYb+vWvf63c3FzPts2bN+vf//3fVVlZqdtvv13f+973VF9f3+IxNPXwww/r7NmzWrp0qW6//XadPXvWc9PuFVdcob/+9a86ffq0Dhw4oHPnzmnevHmtbgMA4sHjjz+uDz74QPv27dP+/fu1e/dun34imLvvvlt9+vRRaWmp1q5dq+zsbJ07dy6kups3b9aHH36oPXv2aOvWrVq9erVn29mzZ1VTUyPpQj/Vkttvv13nz5/Xxx9/rOPHj+u+++7zbCstLVVlZaVKSkq0bt06/fjHP/bpZ9evX6+MjAxVVFRo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UaZ1LbkCZO88YVzkuAJkfqv9ihUrxCeffCIAiOLiYot4tFqtzRUge+fSmJgYcePGDcm7K7hwccfCK0Dk04qLi/Haa69hyZIlqKqqwubNm9GnTx8AsHjY/erVq+jSpQuUSiXuvPNOlJaWWgwhee7cOYvx5s3Hom8N8+3PnTuHO++8s035taVMY33N1znbVqVSQaPRSK4nIqK2ufPOOy0+i63PExcuXDBN2groz2HdunXDHXfcgaCgIIvP5JZ8Prf3c5N5vNXV1bhx44YcIRO1z1HgyL9s3rwZDz74ICIjIyGEwIoVKxymr6ioQN++fS1GQ+vXr5/FcIvW4+vbG2/fHvOhHPv162calrK1rly5gq5du5peS80TYK/M8+fP26xztm1jYyNqampM77W0/kREZF9FRYXFSGuunieqq6tx8+ZNi0nMzT+/nWnv5ybzeHleIjmxA0Q+LSoqCg8//DBUKhWuX7+Oa9euobm52eE2mZmZuHr1KubNm4fAwEDExMRg6tSpSE1NtbtNZWUlfvrTn7oc18svv4zw8HCEhIRg0aJF2LJli2mdSqVCp06dbH53JDc3F08++SS6dOmCgQPI14hHAAAgAElEQVQHIikpySbNH/7wBwQHByMiIgJz5841lbl161a8+uqrCA8PR3BwMBYsWGCz7fPPP48hQ4agS5cu+J//+R9s27bNaTsSEVHrbN68GW+99RY0Gg1CQ0Pxxz/+ERs2bHC6XXNzM7Zv344lS5agS5cuGDx4sGmof1fYO08AQKdOnUznI/PfHcnNzcXMmTMRGBiIkSNHSj5j+vbbb6NLly4YOnQofv3rX1ucm958800EBwcjPDwcc+bMsdnW0bmUSE7sAJFP69SpE5YvX46amhrodDr06tULb775psNtbt68ialTpyIuLg41NTX48MMPMWvWLJw+fdruNmvWrMHQoUNx8eJFyUknrW3atAl79uzBDz/8gOLiYrzzzjumdadPn8b169cRERGBPXv24Pr1607nXFi1ahUaGxtRWVmJlJQUyRnMd+7ciWPHjiE3Nxe7du0yTWyanJyMr7/+GsePH0d2dja2b99us+369evx2WefQafToXPnznj11Ved1pGIiFrnnXfewdGjR3HixAmcPHkS2dnZFucJR1555RX06NEDOp0O69evx+bNm12+FczeeQIArl+/jitXrgC4fZ5y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jq619v7HsbR9MgS/z4VLZhvH0l7BZZqbm3Xw4EENHjy4W+PsbazSrh19vc2aNSvq66CnimUfx48fr2HDhumtt97q7vDiJpb9HD16tEaPHq333ntPH3zwgS677LLuDrPLYtnPhx56SDfeeKOqqqr01ltvafbs2d0dZsL11HNld3IkasNvv/12xGzygQceCDxg7v7779fRo0d7TD/SWGKOZsKECTp06JC2bNkScfmCBQv0yCOPyBijRx55RE888YRmzZrV7fF+8cUXOvnkk1VfX6+zzz5bf/3rX3XGGWfoyy+/bLMuY0yXYu1svH6nn366Hn/88aj30ySifbsac7LFEvv111/fZtJ+/vnna8+ePTrhhBP09ttva9u2bVqzZk1SYk7U/7gr4vE+191tDCTDT37yE/3bv/2bJk2alOxQ4iolJUVPPvmkfvaznyU7lIRzOBwaNWqULrzwQmVmZupf//qXvve97+ngwYPJDi2urr/+ei1cuFBPPvmkzj33XC1atEhnnnlmXD4HoedIWAI0ZcqUNpfn5OTohz/8Ychl/+rqag0bNizwd2Zmpqqrq0PW279/v9LS0mS329Xc3ByxTKJibsvMmTPb/CC5d+/ewO95eXn629/+1um6/DoTb1NTU+Cy6Pr167Vz506NHj1aH3/8cUi52tpapaenq6amRunp6SHxxyPeuXPn6tRTT9VPf/rTdtfLyMjQG2+8oZtuukmffvppxDIdad/Kykr9/Oc/18qVKzsUc6y6ehwPHz5cn332mRwOh5qbm/XOO+/oxRdfVH5+fofiaC92u92uq666qs0bdv2X/vft26c33nhDEyZMSOiH81jbO9r/OJa2j6fOvM+F6+42DhZLe/nLVFdXy263a8CAAdq/f3+3xNdbWaVdY329XXLJJXrggQc0adKkqFfwe4rw80N7+/id73xHZ555pt59911JUnp6upYvX64rr7yy1Xm1PcYYnXrqqdq5c2fXd6SDYvlfejweTZo0SUePHtVnn30mt9utn/zkJ3r22We7O9xOi2U/Z82apalTp0rydts89thj5Xa7e2WXv2i6+1zZEyWlC9xll12me+65R1deeWWgb7AkLV++XDNnzpTT6dSIESM0atQoffjhh63Wf+edd3TNNddI8n7AWLZsWbfFHklKSoquvfbaNu//Cf6W+Ec/+pHKysq6I7RW3G63bDbvv33kyJEaNWpUxKRi+fLlysnJkZTcNh4wYIBWrFihOXPm6P/+7/+ilissLNQjjzwiqWvtm5qaqldffVWVlZUyxnTq28rechxPnjxZ27Zti/qm179/fx1//PGB3y+99NKkHbdSbK+hkpISjRo1SiNGjFBqaqpmzpyZtCt10d7ngiW7jWNpr+D3gmuuuUarVq3qtvh6K6u0ayz7OW7cOP35z3/WlVde2Ss/QLa3j42NjTrhhBM0cuRIjRw5UmvXru1U8tOe9PR0LVu2TNXV1TLGxH3UwFj+l++9956OOeYYSd5u3KmpqYF7dHuLWPbz888/D3xpddppp+nYY4/tlcduW5YvX66bbrpJkjRx4kQdPHgwcNuDlXT7yAvl5eXm888/N6Wlpaa0tDQwEo4kc//995uKigqzbds2M3Xq1MD8FStWBEYDGzlypFm3bp0pLy83r7zyinE6nQmPecaMGaaqqsocOXLE1NTUmL///e+BZZMmTTIffPBBq3Xy8vICo8G88MILZtOmTWbjxo1m2bJlJj09PSnxXnXVVaasrMyUlpaajz/+2Pzwhz+MGO+gQYPMP//5T7Njxw7z9ttvm4EDB8Y1vrlz55pFixa1G+8DDzxgvvrqq8CxUlpaGhh5xh+vf1SX2tramNq3srLSXHLJJRGXpaammrvuusucd955Zs+ePWbSpEmdOia6chwPHz7cGGMCI4i98847ZtasWTG1q3+dWKbnn3/e3HbbbSHzTjzxRLNixYpAfBs2bDAbNmwwZWVl5v777497DB2Zor2GgmOWvKPbbN++3VRUVMQccyKmaO9z8WjjeE6R2uvhhx8206ZNM5LMMcccY1555RVTXl5u1q1bZ0aOHJm0Nu1Nk1Xatb39fPvtt01NTU3gdbBs2bKkx9zWFOn80N4+Bk9tjRTb3mSMMaecckrEZUOGDDG//OUvzbnnnmuMMWb48OHd/r+cNGmSaWxsNFu2bDGbNm0ye/fujXouDZ8SdV7oyOSPob39HDt2rHnvvffMhg0bTGlpqZkyZUrSY+/otHjxYrNnzx7T1NRkqqqqzC233GJuu+22kHP+//zP/5iKigqzadOmXjlyYRympAfA1Mene+65x+zevds0Njaabdu2mYsvvtjMnTvXvPzyy6agoMA0NjaasrKykBfgaaedZt555x1z4MABU1ZWFnKief75582zzz5rVqxYYb766iuTm5trmpqazDfffGO+/PJLs3z58jbjqaysNHPmzDFbtmwx9fX15i9/+Ys55phjWpWrqqpqMwEKnsKTlJycHLNmzZrA38YYM3v2bLNz506zb98+84c//MGkpKQYyTss53//93+bffv2mZ07d5pf/epXrRKgxx57zKxbt84cPHjQ/PWvfw0kpP5k6ZZbbjG7du0yq1evbjPO8847z7z//vvmwIED5vPPPzc5OTmBNl2wYIEpLi42jY2N5t133zUnn3xyTPHn5OSY9957zzz55JOmrq7OPPLII0k/5piYmJg6M/kTIKfTaebPn2+qq6tNdXW1mT9/fuBLqkmTJpmqqirz29/+1tTW1po9e/aYn/3sZ4FtDBo0yCxfvtwcPHjQfPjhh+aRRx4JOR9Em9p6n/VPdru9QwlQeEIX/OWj//yRm5trqqurzZ49e0IeNXDsscea559/3tTX15stW7aY//iP/zBVVVUh2452LvW30T333GO++OIL88ILL7QZ55VXXmlKS0vNwYMHTUVFhbnsssuMFNv5L1r8c+fONa+++qpZtGiROXjwYMxfJDJZZkp6AEx9eBo9erT5/PPPA1c9hg8fbr773e+auXPnmsOHD5vs7Gxjs9nMY489FriK5nA4THl5ubnvvvtMamqqueiii0xjY6MZPXq0kbwf1hsaGsy///u/m5SUFHPMMceY559/PuYP3pWVlWbz5s0mMzPTDBw40Lz33nsR1413ArRq1SozcOBAM2zYMLN9+/ZA+dtuu81s3bo1EM+qVataJUC7d+82Z5xxhunfv79ZunRpqxNYQUGB6d+/vzn22GOjxnjyySebxsZGM3PmTONwOMygQYPMWWedFWjTxsZGc8EFFxin02meeuqpmOPPyckx3377rbnjjjuM3W5vMwYmJiamnjz5E4aHH37YfPDBB+aEE04wbrfbvP/+++Z3v/udkbwf7r/99lvz8MMPG4fDYbKzs83XX38deD7OkiVLzJIlS0y/fv3M2LFjzeeffx5zAhTtfdY/JSIBWrx4senfv78588wzQ67q/P73vzf/+te/zMCBA01mZqbZvHlzqwQo2rnU30bz5s0zTqezzfNCVlaWaWhoMJMnTzYpKSnmpJNOMmPGjDFSbOe/aPHPnTvXNDU1menTp5uUlBTOTUzhU9IDYOrD0ymnnGJqa2vN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6PwcGxuroqIij2WsVqt69uypS5cuBTTOQPKmTsrKylRVVSVJevPNNzVmzJiAxthYUlKS1q1bF5R9FxQUaNKkSV7Vm7fWrl2rl19++bbiiouLkzFGVqtVkpSZmRnwwSoqKyudt5937typiIiITnuVqU54eLjef/99rV+/Xtu2bWuy3JfHCVCH46peezrv1LUP/tLc+cYYo8rKSp8eF75oRx588EGXu1K+qqOWzr3t6bgIlPLycmVmZmratGku80Pte63kuS588X22QyZAWVlZGjp0qAYPHqyIiAjNnTtXaWlpLmXS0tKUkJAgSZozZ452794djFADxps6adiH+NFHH9WJEycCHaZftSUBSUtL0/z58yVJ48aNU3l5uS5duqT33ntPBQUFMsbowQcf9Ee47Vbfvn2dP8fHx8tisXT6k2xKSopOnDih1atXu13u7jgpLi4OZIjohDiu6oXSeael882uXbvcHhcxMTHavn27ioqKZIzpFKOAtVQXoXJc2O129ezZU5LUtWtXTZkyRSdPnnQpEyrfa72pC198nw2/vTCDo7q6WosXL9ZHH30kq9Wqt956S19++aVWrlypzz77TB988IFSUlK0bt065ebmqqysTHPnzg122H7lTZ089dRTevTRR3Xr1i2VlZXp8ccfD3bYPmOxuM/lN2zYoIceekh2u12FhYVKSkpSRESE7rzzTknShx9+qBkzZigvL09Xr17VggULJEn79+/X66+/rvfeey9gv8Ptslqtqq6ubrGcpzqRpD/84Q+aM2eOfvazn+nWrVu6du1aq/7veBtDezJ+/HjNnz9fx44dcz6Qu2LFCg0aNEiSo048HSdAc1r6vxZKx5U/zzsdSUvnG0nas2ePRo8e3eS4qKmp0Z///Ge9+uqrOnDgQFDibwtP7YI3515fHRftvW3q16+fUlNTZbVaZbFYtHnzZu3YsSMkv9d6Uxe++j4b9OHumDr/9Pzzz5tz586ZiooKc/LkSTNx4kSTlJRk3n33XZOammoqKipMTk6OGTNmjHOde++912RmZprLly+bnJwcM3PmTOeytWvXmt///vdmx44d5ttvvzWJiYmmqqrK3Lhxw1RWVpq0tLRm4ykoKDDLli0zX3zxhSkrKzNvvfWW6dKlS5NyhYWF5sEHH/Tqd1y7dq15+eWXjSSzZ88e83d/93dGkvnhD39ojDFm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H20T2ooECH43bNgwPfzww7LZbLp+/bquXbummpqaZtc5dOiQrl69queff17h4eF68MEHNXPmTG3atMnjOiUlJfre977ndVxPPvmkBgwYoOjoaP3iF7/Qu+++61xms9nUpUuXJj+3xt69e7V48WLt3btXkmNkn4afJWnz5s166qmnNGDAAEVFRWnZsmVNtvPYY49pxIgR6tatm1566SVt2bKlxfprbP369Zo8ebL+4R/+QVarVb169dL999/vXD5jxgyNHz9eERERevnll3Xw4EGdO3fOufzf//3fFRUVpdjYWD399NMudQUAndHGjRv1wgsvyG63q3fv3vrVr36ld955p8X1ampqtHXrVr344ovq1q2bhg8f7hzW2hvNnW+7dOnibI8a/twa3rZNy5cvV1RUlAYMGKAlS5Y02U5zbai3UlJStGDBAk2cOFFhYWHq37+/hg8f7lzeUvv3y1/+Ut26ddPIkSO1YMEC2iZ4jQQIftelSxclJyertLRUxcXF6tOnj5YvX97sOjdv3tTMmTM1ffp0lZaW6ve//73mz5+vU6dOeVwnJSVFI0eO1OXLl92+UK2xDRs2KD09XV999ZXy8/P1yiuvOJedOnVK169fV2xsrNLT03X9+vVWv3Nh7969ioyMdHZ3a/xZktasWaOPPvpIR48e1eHDh7V169Ym21m3bp3efvttFRcXq2vXrnrqqadaFYfkuMo2Y8YMPffccyorK9ORI0dcEqANGzYoKSlJZWVlGjNmjB577DGX9bdv367PP/9cR44c0Y4dO5SSktLqGACgI3nllVf02Wef6dixYzp+/LgOHz7s0k40Z/HixerZs6eKi4u1bt06bdy40asuYVLz59vr1687Xwxa1061ljdt08qVK3XmzBkVFBQoPT3d7UvLm2tDvZWVlaUFCxZo9erVKi8v1969e13a2pbav7179yovL0+7du3Sf/7nfyojI6PVMSA0hcnxMBCAELV27VqdO3dOv/zlL90uN8bonnvuabafNgDAs+TkZMXExHSq9+/5W2Zmpt555x23F9zi4uL09ddfKzw8vF2/3wftF3eAAAAAfGj48OH667/+a0lSfHy8Fi1a5FXPBACBQQKETmngwIGqrKx0O7XmYdTGcnJy3G5z3rx5Poy+bebNm+c2tpycnGCHBgAh5c4779TWrVv13Xff6d1339VvfvMb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\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"Arnb-kXlC4VF"},"source":["#### tpg survey for partial"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":741},"executionInfo":{"elapsed":2880,"status":"ok","timestamp":1650080717333,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"jHh0uFkXC4VF","outputId":"97fb68cf-77d7-4f9c-842c-70a8bb26fb8c"},"outputs":[{"output_type":"stream","name":"stdout","text":["186\n","186\n","186\n","186\n","pkx : [-0.40825533  0.81500699  1.18198569  1.85477996]\n","pkx : [-0.39872379  0.48501655  0.6365149   1.14150938  1.39400662  1.72225304]\n","\n","111\n","111\n","111\n","111\n","pkx : [-0.71661626 -0.63018625 -0.43811957 -0.29406955 -0.15962287]\n","pkx : [-0.69082946 -0.5967696  -0.44000317 -0.28323673 -0.21269184 -0.1264703 ]\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 864x576 with 4 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# 1. outg 는 partial 을 위한 histogram 작성 진행\n","# 현재, outg 내부에는 tp 한것과 out 한것이 공존하는 상태\n","titles = ['outg', 'tpg']\n","short_max_datas = [short_max_outg[short_true_open_idxth], short_max_tpg]\n","long_max_datas = [long_max_outg[long_true_open_idxth], long_max_tpg]\n","\n","# titles = ['tpg']\n","# short_max_datas = [short_max_tpg]\n","# long_max_datas = [long_max_tpg]\n","\n","plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(12, 8))\n","nrows, ncols = 2, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        )\n","  \n","for ings_idx, (title, short_max_data, long_max_data) in enumerate(zip(titles, short_max_datas, long_max_datas)):\n","\n","  inner_gs = gs[ings_idx].subgridspec(nrows=1, ncols=2)\n","  if ings_idx == 0:\n","    axvline = current_outg\n","    title_add = 'true_' + title\n","  else:\n","    axvline = current_tpg\n","    title_add = 'false_' + title\n","\n","  print(len(long_max_data))\n","\n","  short_plot_idx = np.ones_like(short_max_data).astype(bool)\n","  long_plot_idx = np.ones_like(long_max_data).astype(bool)\n","  # short_plot_idx = short_max_data <= axvline\n","  # long_plot_idx = long_max_data <= axvline\n","\n","  print(np.sum(long_plot_idx))    \n","\n","  short_plot_idx *= ~np.isnan(short_max_data)\n","  long_plot_idx *= ~np.isnan(long_max_data)  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_plot_idx *= ~np.isinf(short_max_data)\n","  long_plot_idx *= ~np.isinf(long_max_data)  # nan 과 inf 때문에 이 방식 채택\n","  \n","  print(np.sum(long_plot_idx))\n","    \n","  plt.subplot(inner_gs[0])\n","  kde_plot_v2(*np.unique(short_max_data[short_plot_idx], return_counts=True))\n","  plt.title('short_' + title_add)  \n","  plt.axvline(axvline, color='red', linewidth=3)\n","\n","  plt.subplot(inner_gs[1])\n","  kde_plot_v2(*np.unique(long_max_data[long_plot_idx], return_counts=True))\n","  plt.title('long_' + title_add)\n","  plt.axvline(axvline, color='red', linewidth=3)\n","\n","  print()\n","\n","# plt.suptitle(title)\n","plt.show()"]},{"cell_type":"markdown","source":["#### legacy"],"metadata":{"id":"mScdfR9hmjVu"}},{"cell_type":"markdown","metadata":{"id":"xivLUsSGC4VF"},"source":["##### outg survey for precision (eploc vars. dependency)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LB28R3QIjCDc"},"outputs":[],"source":["# ------------ dependent vars. ------------ #\n","# res_df 에 존재하는 col 는 모두 사용가능함\n","# ------ 1. 도출한 outg 와 vars. pairing 진행 (by valid_idx) ------ #\n","devided_cols = ['tr_{}'.format(strat_version)]  # , 'ir_5T'\n","public_cols = ['wave_body_ratio']  # 'abs_ratio_5T', 'rel_ratio_5T', 'body_rel_ratio_5T'\n","\n","short_datas = [res_df['short_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","long_datas = [res_df['long_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","\n","titles = devided_cols + public_cols"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":1655,"status":"ok","timestamp":1649812123691,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"nX9TpLcvFu7T","outputId":"1ebbeec2-fa2b-459c-ee69-9779cb36172b"},"outputs":[{"name":"stdout","output_type":"stream","text":["362\n","362\n","362\n","362\n","\n","362\n","362\n","362\n","362\n","\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 864x1296 with 4 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["plot_outg_range = (-1, 10)\n","plot_data_range = (-10, 100)\n","\n","plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(12, 18))\n","nrows, ncols = len(short_datas), 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        )\n","\n","for ings_idx, (title, short_data, long_data) in enumerate(zip(titles, short_datas, long_datas)):\n","  inner_gs = gs[ings_idx].subgridspec(nrows=1, ncols=2)\n","\n","  print(len(long_max_outg))\n","\n","  short_plot_idx = (plot_outg_range[0] <= short_max_outg) & (short_max_outg <= plot_outg_range[1])\n","  long_plot_idx = (plot_outg_range[0] <= long_max_outg) & (long_max_outg <= plot_outg_range[1])  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_open_data = short_data[short_open_idx]\n","  long_open_data = long_data[long_open_idx]\n","  \n","  short_plot_idx *= (plot_data_range[0] <= short_open_data) * (short_open_data <= plot_data_range[1])\n","  long_plot_idx *= (plot_data_range[0] <= long_open_data) * (long_open_data <= plot_data_range[1]) # nan 과 inf 때문에 이 방식 채택\n","\n","  short_plot_idx *= ~np.isnan(short_open_data)\n","  long_plot_idx *= ~np.isnan(long_open_data)  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_plot_idx *= ~np.isinf(short_open_data)\n","  long_plot_idx *= ~np.isinf(long_open_data)  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_true_idx = short_plot_idx * short_true_open_idxth\n","  long_true_idx = long_plot_idx * long_true_open_idxth\n","  \n","  short_false_idx = short_plot_idx * ~short_true_open_idxth\n","  long_false_idx = long_plot_idx * ~long_true_open_idxth\n","\n","  plt.subplot(inner_gs[0])\n","  # ------ true_bias ------ #\n","  x, y = short_max_outg[short_true_idx].ravel(), short_open_data[short_true_idx].ravel()  \n","  plt.scatter(x, y, color='white', alpha=0.5)\n","  # ------ false_bias ------ #\n","  x, y = short_max_outg[short_false_idx].ravel(), short_open_data[short_false_idx].ravel()\n","  plt.scatter(x, y, color='fuchsia', alpha=0.3)\n","  plt.axvline(current_outg, color='red', linewidth=3)\n","  plt.title(\"{} coef : {:0.3f}\".format(title, np.corrcoef(-x, y)[0, 1]))\n","\n","  plt.subplot(inner_gs[1])    \n","  # ------ true_bias ------ #\n","  x, y = long_max_outg[long_true_idx].ravel(), long_open_data[long_true_idx].ravel()  \n","  plt.scatter(x, y, color='white', alpha=0.5)\n","  # ------ false_bias ------ #\n","  x, y = long_max_outg[long_false_idx].ravel(), long_open_data[long_false_idx].ravel()\n","  plt.scatter(x, y, color='fuchsia', alpha=0.3)\n","  plt.axvline(current_outg, color='red', linewidth=3)\n","  plt.title(\"{} coef : {:0.3f}\".format(title, np.corrcoef(-x, y)[0, 1]))\n","\n","  print()  \n","\n","# plt.suptitle(title)\n","plt.show()\n","# print()"]},{"cell_type":"markdown","metadata":{"id":"EtjwB7Qk-Grj"},"source":["### significance_v3"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oVifICO4-Grk","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1650537246109,"user_tz":-540,"elapsed":263519,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"b9d4f89a-52eb-431e-97e4-9ddeb4f80370"},"outputs":[{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 2.30155086517334\n","en_ex_pairing elapsed time : 0.628840446472168\n","short_obj.shape : (464, 5)\n","long_obj.shape : (354, 5)\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.2634437084197998\n","get_open_info_df elapsed time : 1.7036607265472412\n","en_ex_pairing elapsed time : 0.6956593990325928\n","short_obj.shape : (519, 5)\n","long_obj.shape : (395, 5)\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.2616536617279053\n","get_open_info_df elapsed time : 1.7010743618011475\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 0.6017553806304932\n","short_obj.shape : (579, 5)\n","long_obj.shape : (441, 5)\n","idep_plot elapsed time : 0.16640114784240723\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9295592308044434\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 0.4899921417236328\n","short_obj.shape : (636, 5)\n","long_obj.shape : (488, 5)\n","idep_plot elapsed time : 0.16942620277404785\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9351584911346436\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 0.4172217845916748\n","short_obj.shape : (691, 5)\n","long_obj.shape : (544, 5)\n","idep_plot elapsed time : 0.16901063919067383\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9373178482055664\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 0.47785019874572754\n","short_obj.shape : (754, 5)\n","long_obj.shape : (593, 5)\n","idep_plot elapsed time : 0.1710224151611328\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.937755823135376\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 0.5468738079071045\n","short_obj.shape : (806, 5)\n","long_obj.shape : (658, 5)\n","idep_plot elapsed time : 0.17101263999938965\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9383974075317383\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 0.5966966152191162\n","short_obj.shape : (877, 5)\n","long_obj.shape : (724, 5)\n","idep_plot elapsed time : 0.1767122745513916\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.943880558013916\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 0.642141580581665\n","short_obj.shape : (921, 5)\n","long_obj.shape : (783, 5)\n","idep_plot elapsed time : 0.17609691619873047\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9434764385223389\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 0.6895248889923096\n","short_obj.shape : (950, 5)\n","long_obj.shape : (821, 5)\n","idep_plot elapsed time : 0.1754131317138672\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9316949844360352\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 0.7267055511474609\n","short_obj.shape : (989, 5)\n","long_obj.shape : (865, 5)\n","idep_plot elapsed time : 0.17388224601745605\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9296615123748779\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 0.7751269340515137\n","short_obj.shape : (1029, 5)\n","long_obj.shape : (892, 5)\n","idep_plot elapsed time : 0.17679667472839355\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9587807655334473\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 0.8069131374359131\n","short_obj.shape : (1056, 5)\n","long_obj.shape : (922, 5)\n","idep_plot elapsed time : 0.1762096881866455\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9405744075775146\n","en_ex_pairing elapsed time : 0.8607082366943359\n","short_obj.shape : (1089, 5)\n","long_obj.shape : (959, 5)\n","idep_plot elapsed time : 0.18465137481689453\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9268906116485596\n","en_ex_pairing elapsed time : 0.9159018993377686\n","short_obj.shape : (1111, 5)\n","long_obj.shape : (993, 5)\n","idep_plot elapsed time : 0.1902780532836914\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9350864887237549\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 0.939450740814209\n","short_obj.shape : (1135, 5)\n","long_obj.shape : (1013, 5)\n","idep_plot elapsed time : 0.18291425704956055\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.919060468673706\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 0.9855916500091553\n","short_obj.shape : (1160, 5)\n","long_obj.shape : (1043, 5)\n","idep_plot elapsed time : 0.17963194847106934\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9260311126708984\n","en_ex_pairing elapsed time : 1.080636978149414\n","short_obj.shape : (1165, 5)\n","long_obj.shape : (1056, 5)\n","idep_plot elapsed time : 0.18363022804260254\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9209141731262207\n","en_ex_pairing elapsed time : 1.1330490112304688\n","short_obj.shape : (1191, 5)\n","long_obj.shape : (1084, 5)\n","idep_plot elapsed time : 0.18724703788757324\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9264340400695801\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 1.1798903942108154\n","short_obj.shape : (1213, 5)\n","long_obj.shape : (1098, 5)\n","idep_plot elapsed time : 0.17862510681152344\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9299240112304688\n","en_ex_pairing elapsed time : 1.2261168956756592\n","short_obj.shape : (1233, 5)\n","long_obj.shape : (1112, 5)\n","idep_plot elapsed time : 0.18921804428100586\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9316930770874023\n","en_ex_pairing elapsed time : 1.2754905223846436\n","short_obj.shape : (1243, 5)\n","long_obj.shape : (1131, 5)\n","idep_plot elapsed time : 0.18619060516357422\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9396464824676514\n","en_ex_pairing elapsed time : 1.3273911476135254\n","short_obj.shape : (1253, 5)\n","long_obj.shape : (1154, 5)\n","idep_plot elapsed time : 0.1832568645477295\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.92685866355896\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 1.3255822658538818\n","short_obj.shape : (1266, 5)\n","long_obj.shape : (1168, 5)\n","idep_plot elapsed time : 0.18287873268127441\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9228670597076416\n","en_ex_pairing elapsed time : 1.3682360649108887\n","short_obj.shape : (1284, 5)\n","long_obj.shape : (1180, 5)\n","idep_plot elapsed time : 0.18566107749938965\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9348056316375732\n","en_ex_pairing elapsed time : 1.4322295188903809\n","short_obj.shape : (1293, 5)\n","long_obj.shape : (1189, 5)\n","idep_plot elapsed time : 0.18367481231689453\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9431827068328857\n","en_ex_pairing elapsed time : 1.5299320220947266\n","short_obj.shape : (1298, 5)\n","long_obj.shape : (1196, 5)\n","idep_plot elapsed time : 0.19192004203796387\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9324815273284912\n","en_ex_pairing elapsed time : 1.5015404224395752\n","short_obj.shape : (1300, 5)\n","long_obj.shape : (1219, 5)\n","idep_plot elapsed time : 0.1846764087677002\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9261839389801025\n","en_ex_pairing elapsed time : 1.5341100692749023\n","short_obj.shape : (1309, 5)\n","long_obj.shape : (1227, 5)\n","idep_plot elapsed time : 0.1841421127319336\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9579882621765137\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 1.5825657844543457\n","short_obj.shape : (1321, 5)\n","long_obj.shape : (1230, 5)\n","idep_plot elapsed time : 0.18391036987304688\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9529521465301514\n","en_ex_pairing elapsed time : 1.6212925910949707\n","short_obj.shape : (1327, 5)\n","long_obj.shape : (1241, 5)\n","idep_plot elapsed time : 0.19127821922302246\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.951615571975708\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 1.6426026821136475\n","short_obj.shape : (1331, 5)\n","long_obj.shape : (1249, 5)\n","idep_plot elapsed time : 0.18165850639343262\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.936093807220459\n","en_ex_pairing elapsed time : 1.6553840637207031\n","short_obj.shape : (1329, 5)\n","long_obj.shape : (1257, 5)\n","idep_plot elapsed time : 0.18268537521362305\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9265482425689697\n","en_ex_pairing elapsed time : 1.6874475479125977\n","short_obj.shape : (1331, 5)\n","long_obj.shape : (1257, 5)\n","idep_plot elapsed time : 0.18420195579528809\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9393601417541504\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 1.7139205932617188\n","short_obj.shape : (1336, 5)\n","long_obj.shape : (1259, 5)\n","idep_plot elapsed time : 0.18338298797607422\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9228861331939697\n","en_ex_pairing elapsed time : 1.762688159942627\n","short_obj.shape : (1342, 5)\n","long_obj.shape : (1261, 5)\n","idep_plot elapsed time : 0.18439960479736328\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9303748607635498\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 1.8418586254119873\n","short_obj.shape : (1345, 5)\n","long_obj.shape : (1260, 5)\n","idep_plot elapsed time : 0.18100404739379883\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.931410551071167\n","en_ex_pairing elapsed time : 1.8651864528656006\n","short_obj.shape : (1347, 5)\n","long_obj.shape : (1259, 5)\n","idep_plot elapsed time : 0.18806123733520508\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9329819679260254\n","en_ex_pairing elapsed time : 1.9044687747955322\n","short_obj.shape : (1351, 5)\n","long_obj.shape : (1259, 5)\n","idep_plot elapsed time : 0.18572616577148438\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.928654670715332\n","en_ex_pairing elapsed time : 1.928199052810669\n","short_obj.shape : (1349, 5)\n","long_obj.shape : (1262, 5)\n","idep_plot elapsed time : 0.1850271224975586\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9334535598754883\n","en_ex_pairing elapsed time : 1.9598793983459473\n","short_obj.shape : (1354, 5)\n","long_obj.shape : (1266, 5)\n","idep_plot elapsed time : 0.19040369987487793\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9274952411651611\n","en_ex_pairing elapsed time : 2.0397088527679443\n","short_obj.shape : (1353, 5)\n","long_obj.shape : (1268, 5)\n","idep_plot elapsed time : 0.18601393699645996\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9247128963470459\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 2.018097162246704\n","short_obj.shape : (1347, 5)\n","long_obj.shape : (1270, 5)\n","idep_plot elapsed time : 0.18366622924804688\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9280784130096436\n","en_ex_pairing elapsed time : 2.0472073554992676\n","short_obj.shape : (1348, 5)\n","long_obj.shape : (1271, 5)\n","idep_plot elapsed time : 0.18450069427490234\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9285767078399658\n","en_ex_pairing elapsed time : 2.067734718322754\n","short_obj.shape : (1348, 5)\n","long_obj.shape : (1274, 5)\n","idep_plot elapsed time : 0.18764615058898926\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9251956939697266\n","en_ex_pairing elapsed time : 2.0880045890808105\n","short_obj.shape : (1348, 5)\n","long_obj.shape : (1274, 5)\n","idep_plot elapsed time : 0.18584990501403809\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9604434967041016\n","en_ex_pairing elapsed time : 2.131204128265381\n","short_obj.shape : (1350, 5)\n","long_obj.shape : (1274, 5)\n","idep_plot elapsed time : 0.1938183307647705\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9135937690734863\n","en_ex_pairing elapsed time : 2.1219468116760254\n","short_obj.shape : (1349, 5)\n","long_obj.shape : (1270, 5)\n","idep_plot elapsed time : 0.19023394584655762\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9218044281005859\n","en_ex_pairing elapsed time : 2.1751320362091064\n","short_obj.shape : (1345, 5)\n","long_obj.shape : (1275, 5)\n","idep_plot elapsed time : 0.18706536293029785\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9263315200805664\n","en_ex_pairing elapsed time : 3.1072585582733154\n","short_obj.shape : (1344, 5)\n","long_obj.shape : (1277, 5)\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.31224942207336426\n","get_open_info_df elapsed time : 1.288179874420166\n","en_ex_pairing elapsed time : 2.26765775680542\n","short_obj.shape : (1342, 5)\n","long_obj.shape : (1279, 5)\n","idep_plot elapsed time : 0.18923401832580566\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9474034309387207\n","en_ex_pairing elapsed time : 2.2697906494140625\n","short_obj.shape : (1342, 5)\n","long_obj.shape : (1278, 5)\n","idep_plot elapsed time : 0.18571066856384277\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9377458095550537\n","en_ex_pairing elapsed time : 2.346466302871704\n","short_obj.shape : (1337, 5)\n","long_obj.shape : (1278, 5)\n","idep_plot elapsed time : 0.1865379810333252\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.939939022064209\n","en_ex_pairing elapsed time : 2.3551948070526123\n","short_obj.shape : (1337, 5)\n","long_obj.shape : (1279, 5)\n","idep_plot elapsed time : 0.1920623779296875\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9263427257537842\n","en_ex_pairing elapsed time : 2.3858423233032227\n","short_obj.shape : (1335, 5)\n","long_obj.shape : (1276, 5)\n","idep_plot elapsed time : 0.18511557579040527\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9390392303466797\n","en_ex_pairing elapsed time : 2.4568371772766113\n","short_obj.shape : (1336, 5)\n","long_obj.shape : (1275, 5)\n","idep_plot elapsed time : 0.18818449974060059\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.94342041015625\n","en_ex_pairing elapsed time : 2.446594476699829\n","short_obj.shape : (1337, 5)\n","long_obj.shape : (1273, 5)\n","idep_plot elapsed time : 0.1882929801940918\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9241750240325928\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n"]},{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 2.418797016143799\n","short_obj.shape : (1342, 5)\n","long_obj.shape : (1275, 5)\n","idep_plot elapsed time : 0.18151497840881348\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9128901958465576\n","en_ex_pairing elapsed time : 2.447937488555908\n","short_obj.shape : (1344, 5)\n","long_obj.shape : (1279, 5)\n","idep_plot elapsed time : 0.18857145309448242\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9503912925720215\n","en_ex_pairing elapsed time : 2.440847158432007\n","short_obj.shape : (1339, 5)\n","long_obj.shape : (1278, 5)\n","idep_plot elapsed time : 0.18751072883605957\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9505782127380371\n","en_ex_pairing elapsed time : 2.5029079914093018\n","short_obj.shape : (1339, 5)\n","long_obj.shape : (1277, 5)\n","idep_plot elapsed time : 0.1994938850402832\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9320425987243652\n","en_ex_pairing elapsed time : 2.4989707469940186\n","short_obj.shape : (1339, 5)\n","long_obj.shape : (1281, 5)\n","idep_plot elapsed time : 0.18527460098266602\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9332001209259033\n","en_ex_pairing elapsed time : 2.500091075897217\n","short_obj.shape : (1332, 5)\n","long_obj.shape : (1275, 5)\n","idep_plot elapsed time : 0.1851208209991455\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9393310546875\n","en_ex_pairing elapsed time : 2.630600690841675\n","short_obj.shape : (1324, 5)\n","long_obj.shape : (1274, 5)\n","idep_plot elapsed time : 0.18312883377075195\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 1.063690423965454\n","en_ex_pairing elapsed time : 4.722303867340088\n","short_obj.shape : (1314, 5)\n","long_obj.shape : (1266, 5)\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.28220701217651367\n","get_open_info_df elapsed time : 2.0618817806243896\n","en_ex_pairing elapsed time : 3.903691053390503\n","short_obj.shape : (1310, 5)\n","long_obj.shape : (1266, 5)\n","idep_plot elapsed time : 0.19388508796691895\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 1.779174566268921\n","en_ex_pairing elapsed time : 2.6657419204711914\n","short_obj.shape : (1308, 5)\n","long_obj.shape : (1266, 5)\n","idep_plot elapsed time : 0.18422555923461914\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9327855110168457\n","en_ex_pairing elapsed time : 2.694039821624756\n","short_obj.shape : (1304, 5)\n","long_obj.shape : (1258, 5)\n","idep_plot elapsed time : 0.18756628036499023\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.925396203994751\n","en_ex_pairing elapsed time : 2.7128584384918213\n","short_obj.shape : (1304, 5)\n","long_obj.shape : (1257, 5)\n","idep_plot elapsed time : 0.18381357192993164\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9235637187957764\n","en_ex_pairing elapsed time : 3.3033223152160645\n","short_obj.shape : (1251, 5)\n","long_obj.shape : (1199, 5)\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.287825345993042\n","get_open_info_df elapsed time : 1.2183620929718018\n","en_ex_pairing elapsed time : 6.039733648300171\n","short_obj.shape : (1245, 5)\n","long_obj.shape : (1194, 5)\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.37758636474609375\n","get_open_info_df elapsed time : 2.3507399559020996\n","en_ex_pairing elapsed time : 6.097677946090698\n","short_obj.shape : (1242, 5)\n","long_obj.shape : (1191, 5)\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.29493284225463867\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 1.7379882335662842\n","en_ex_pairing elapsed time : 6.570729970932007\n","short_obj.shape : (1240, 5)\n","long_obj.shape : (1191, 5)\n"]},{"output_type":"stream","name":"stderr","text":["np.sum(short_open_res == 1) : 198600\n","np.sum(long_open_res == 1) : 198735\n","np.sum(short_open_res == 1) : 52680\n","np.sum(long_open_res == 1) : 48720\n","np.sum(short_open_res == 1) : 27615\n","np.sum(long_open_res == 1) : 26055\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n","np.sum(short_open_res == 1) : 1841\n","np.sum(long_open_res == 1) : 1737\n"]},{"output_type":"stream","name":"stdout","text":["idep_plot elapsed time : 0.27561473846435547\n","get_open_info_df elapsed time : 1.7104718685150146\n","en_ex_pairing elapsed time : 6.98179292678833\n","short_obj.shape : (1241, 5)\n","long_obj.shape : (1191, 5)\n","idep_plot elapsed time : 0.2932724952697754\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1728x576 with 36 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# from google.colab import output\n","# ------------ survey param ------------ #\n","# itv_num_list = [1, 3, 5, 15]\n","# itv_list = ['15m', '30m', '1h', '4h']\n","# itv_list = ['3m', '5m', '15m', '30m', '1h', '4h']\n","# val_list = np.arange(-0.5, -0.9, -0.1)     # prcn 1\n","val_list = np.arange(0.2, -2., -0.03)  # prcn 2\n","# val_list = np.arange(-0.695, -0.75, -0.005)    # prcn 3\n","# val_list = np.arange(0.944, 0.945, 0.0001)    # prcn 4\n","# val_list = np.arange(70, 80, 1)   # prcn -1\n","# val_list = np.arange(200, 180, -5)   # prcn -2\n","\n","# ------------ get survey_res ------------ #\n","result = []\n","res_shape = (3, 12)  # short, long, both x data\n","config_list_copy = copy.deepcopy(config_list)\n","for set_val in val_list:\n","  # ------------ open 결정 이전의 인자값 ------------ #\n","  # ------ point * mr_res ------ #\n","  # config_list_copy[0].loc_set.zone.degree_list = set_val\n","  # config_list_copy[0].loc_set.point2.wick_score_list = str([set_val])\n","  # config_list_copy[0].loc_set.zone.ir = set_val  \n","  # config_list_copy[0].loc_set.zone.abs_ratio = set_val  \n","\n","  # ------------ open 결정 이후의 인자값 ------------ #\n","  # ------ utils ------ #\n","  # config_list_copy[0].tr_set.tp_gap = set_val  \n","  # config_list_copy[0].tr_set.ep_gap = set_val \n","  # config_list_copy[0].tr_set.out_gap = set_val  \n","\n","  # ------ entry, exit (ep, tp, out vars.) ------ #\n","  config_list_copy[0].tr_set.ei_k = set_val\n","  # config_list_copy[0].ep_set.ep_out_tick = set_val  \n"," \n","  for utils_, config_ in zip(utils_list, config_list_copy):\n","    # enlist_rtc(res_df, config_, np_timeidx)\n","    enlist_tr(res_df, config_, np_timeidx)\n","  open_info_df = get_open_info_df(ep_loc_v3, res_df, np_timeidx, ID_list, config_list_copy, id_idx_list)   # point * mr_res 이기 때문에 utils_tr & rtc 의 영향을 충분히 받음\n","\n","  try:\n","    result.append(get_res_v4(res_df, open_info_df, ohlc_list, config_list_copy, np_timeidx, funcs, test_ratio=test_ratio, plot_is=1, signi=True))    \n","  except:\n","    result.append(np.full(res_shape, np.nan))\n","    # pass\n","\n","survey_res_list = [np.array(result)[:, s_i::3] for s_i in range(3)]   # 3 for s, l, b\n","# short_res, long_res, both_res = survey_res_list\n","\n","# ------------ plot survey_res ------------ #\n","title_list = [\"short\", \"long\", \"both\"]\n","sub_title_list = ['prcn', 'wb', 'len_pr', 'dpf', 'wr', 'sr', 'acc_pr', 'sum_pr', 'min_pr', 'liqd', 'acc_mdd', 'sum_mdd']\n","space_ = \" \" * 120\n","\n","fig = plt.figure(figsize=(24, 8))\n","plt.style.use('dark_background')\n","gs = gridspec.GridSpec(nrows=1,\n","                        ncols=3,\n","                        # height_ratios=[1, 1, 1]\n","                      )\n","# nrows, ncols, h_r = 3, 3, [1, 1, 1]\n","nrows, ncols, h_r = 3, 4, [1, 1, 1]\n","# nrows, ncols, h_r = 4, 3, [1, 1, 1, 1]\n","# if d_idx == 0:\n","# else:\n","  # nrows, ncols, h_r = 2, 2, [1, 1]\n","\n","for d_idx, (title_name, survey_res) in enumerate(zip(title_list, survey_res_list)):  \n","  inner_gs = gs[d_idx].subgridspec(nrows=nrows,\n","                        ncols=ncols,\n","                        height_ratios=h_r\n","                      )\n","  for in_idx, (data_, sub_title) in enumerate(zip(survey_res.T, sub_title_list)):\n","    plt.subplot(inner_gs[in_idx])\n","    data = data_.ravel()\n","    valid_idx = ~np.isnan(data)\n","    if np.sum(valid_idx) > 0:\n","      x, y = val_list[valid_idx], data[valid_idx]\n","      plt.plot(x, y)  # 앞에서부터 len(result) 만큼만    \n","      plt.title(sub_title + '_{:.2f}'.format(x[np.argmax(y)]))\n","    else:\n","      plt.title(sub_title)\n","\n","plt.suptitle(space_.join(title_list))\n","plt.show()\n","# print(\"\\n\")"]},{"cell_type":"markdown","metadata":{"id":"EJ4f-3Zf4ImT"},"source":["### backtrader validation"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pbYUlJl34ImU"},"outputs":[],"source":["# ------ open validation ------ #\n","long_open_ = res_df['long_open_{}'.format(config.selection_id)].to_numpy()\n","long_open_ts = list(map(lambda x : str(x), res_df.index[long_open_ == 1]))  "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wyYMYcxx4ImV"},"outputs":[],"source":["long_index = open_info_df.side == 'BUY'\n","\n","for ts in res_df.index[open_info_df.index[long_index]]:\n","  print(ts)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BPI-9QX74ImW"},"outputs":[],"source":["trade_log_name = \"ETHUSDT_1650120909.pkl\"\n","trade_log_dir_path = \"./trade_log/0405_wave_trader_realterm\"\n","\n","with open(os.path.join(trade_log_dir_path, trade_log_name), 'rb') as f:\n","  trade_log = pickle.load(f)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":357,"status":"ok","timestamp":1650589992404,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"outputId":"48a5cda2-1904-4d09-fa71-b76538b62c63","id":"FMXhzaTK4ImX"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'2022-04-17 00:04:59.999000': [3045.71, 'BUY', 'entry'],\n"," '2022-04-17 07:00:59.999000': [[3071.42], 'exit'],\n"," '2022-04-17 09:09:59.999000': [3063.2, 'SELL', 'entry'],\n"," '2022-04-17 11:28:59.999000': [[3049.6], 'exit'],\n"," '2022-04-18 01:18:59.999000': [3071.74, 'BUY', 'entry'],\n"," '2022-04-18 02:56:59.999000': [[3048.93], 'exit'],\n"," '2022-04-19 09:18:59.999000': [3074.43, 'BUY', 'entry'],\n"," '2022-04-19 23:10:59.999000': [[3122.88], 'exit'],\n"," '2022-04-20 09:10:59.999000': [3100.34, 'SELL', 'entry'],\n"," '2022-04-20 09:23:59.999000': [[3085.57], 'exit'],\n"," '2022-04-20 12:33:59.999000': [3083.71, 'SELL', 'entry'],\n"," '2022-04-20 12:38:59.999000': [[3074.9], 'exit'],\n"," '2022-04-20 16:12:59.999000': [3101.93, 'BUY', 'entry'],\n"," '2022-04-20 19:40:59.999000': [[3124.7], 'exit'],\n"," '2022-04-21 19:07:59.999000': [3093.0, 'SELL', 'entry'],\n"," '2022-04-21 19:40:59.999000': [[3137.26], 'exit'],\n"," '2022-04-21 21:59:59.999000': [3160.09, 'BUY', 'entry'],\n"," '2022-04-22 02:16:59.999000': [[3070.49], 'exit'],\n"," 'last_trading_time': '2022-04-22 10:12:00.008866'}"]},"metadata":{},"execution_count":84}],"source":["trade_log"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":326,"status":"ok","timestamp":1650590232506,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"outputId":"dba9ff9a-2dc8-4857-e8b6-b4f26cdd3087","id":"DiTKuq9T4ImY"},"outputs":[{"output_type":"stream","name":"stdout","text":["['2022-04-18 01:19:59.999000', '2022-04-19 09:19:59.999000', '2022-04-20 16:13:59.999000', '2022-04-21 22:00:59.999000']\n","['2022-04-17 00:04:59.999000', '2022-04-18 01:18:59.999000', '2022-04-19 09:18:59.999000', '2022-04-20 16:12:59.999000', '2022-04-21 21:59:59.999000']\n"]}],"source":["# 1. ts 에 pair 된 en_p, ex_p 만 비교하면 될 것\n","#   -> open_idx, en_idx, ex_idx 조회하면 될 것\n","\n","pos_side = \"BUY\" # SELL BUY\n","val_obj = short_obj if pos_side == \"SELL\" else long_obj\n","\n","# ------ get idep trade_info ------ #\n","en_ts = list(map(lambda x : str(x), res_df.index[val_obj[2].astype(int).ravel()])) \n","ex_ts = list(map(lambda x : str(x), res_df.index[val_obj[3].astype(int).ravel()])) \n","en_p = val_obj[0].ravel()\n","ex_p = val_obj[1].ravel()\n","\n","# ------ execute ts comparison ------ #\n","logged_en_ts = [k for k, v in trade_log.items() if 'entry' in v if pos_side in v]\n","\n","lacked_ts = [ts for ts in en_ts if not ts in logged_en_ts]   # trade_log 에 없는 거래\n","added_ts = [ts for ts in logged_en_ts if not ts in en_ts]    # trade_log 에만 있는 거래\n","\n","print(lacked_ts)\n","print(added_ts)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VnTmGTJI4ImZ"},"outputs":[],"source":["# ------ check added_ts ------ #\n","keys = list(trade_log.keys())\n","\n","for k_i in range(len(keys)):\n","  if keys[k_i] in added_ts:\n","    # print(trade_log[keys[k_i]])\n","    # print(trade_log[keys[k_i + 1]])\n","    print(keys[k_i], trade_log[keys[k_i]])\n","    print(keys[k_i + 1], trade_log[keys[k_i + 1]])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Vn5x7mcP4ImZ"},"outputs":[],"source":["# ------ price sync_check ------ #\n","accept_price_gap = 0.1\n","for i in range(len(en_ts)):\n","  try:\n","    print(en_ts[i], trade_log[en_ts[i]][0] - en_p[i])\n","    # print(trade_log[str(ex_ts[i])])\n","    # print(ex_ts[i], trade_log[ex_ts[i]][0] - ex_p[i])\n","    print(ex_ts[i])\n","    print()\n","\n","  except Exception as e:\n","    print(e)\n"]},{"cell_type":"markdown","metadata":{"id":"1GVZ03zDyU2N"},"source":["### legacy"]},{"cell_type":"markdown","metadata":{"id":"IWO7KkqltMFt"},"source":["#### main_functions"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MY1csdNRLGsk"},"outputs":[],"source":["def get_open_info_df(ep_loc_v2, res_df, np_timeidx, ID_list, config_list, id_idx_list):\n","  start_0 = time.time()\n","  # ------ get mr_res, zone_arr ------ #\n","  short_mr_res_obj = np.array([ep_loc_v2(res_df, config_, np_timeidx, show_detail=True, ep_loc_side=OrderSide.SELL) for config_ in config_list])\n","  long_mr_res_obj = np.array([ep_loc_v2(res_df, config_, np_timeidx, show_detail=True, ep_loc_side=OrderSide.BUY) for config_ in config_list])\n","  short_open_idx_list = [np.where(res_df['short_open_{}'.format(id)].to_numpy() * mr_res)[0] for id, mr_res in zip(ID_list, short_mr_res_obj[:, 0].astype(np.float64))]   # \"point * mr_Res\"\n","  long_open_idx_list = [np.where(res_df['long_open_{}'.format(id)].to_numpy() * mr_res)[0] for id, mr_res in zip(ID_list, long_mr_res_obj[:, 0].astype(np.float64))]  # zip 으로 zone (str) 과 묶어서 dtype 변경됨\n","\n","  # ------ open_info_arr ------ #\n","  short_side_list = [np.full(len(list_), OrderSide.SELL) for list_ in short_open_idx_list]\n","  long_side_list = [np.full(len(list_), OrderSide.BUY) for list_ in long_open_idx_list]\n","\n","  short_zone_list = [zone_res[short_open_idx] for zone_res, short_open_idx in zip(short_mr_res_obj[:, 1], short_open_idx_list)]\n","  long_zone_list = [zone_res[long_open_idx] for zone_res, long_open_idx in zip(long_mr_res_obj[:, 1], long_open_idx_list)]\n","\n","  short_id_list = [np.full(len(list_), id) for id, list_ in zip(ID_list, short_open_idx_list)]\n","  long_id_list = [np.full(len(list_), id) for id, list_ in zip(ID_list, long_open_idx_list)]\n","\n","  selected_id_idx = np.arange(len(id_idx_list))\n","  short_id_idx_list = [np.full(len(list_), id) for id, list_ in zip(selected_id_idx, short_open_idx_list)]\n","  long_id_idx_list = [np.full(len(list_), id) for id, list_ in zip(selected_id_idx, long_open_idx_list)]\n","\n","  # ------ get open_info_df ------ #\n","  #   series 만들어서 short / long 끼리 합치고 둘이 합치고, 중복은 우선 순위 정해서 제거\n","  short_open_df_list = [pd.DataFrame(index=index_, data=np.vstack((data_)).T, columns=['side', 'zone', 'id', 'id_idx']) for index_, data_ in zip(short_open_idx_list, zip(short_side_list, short_zone_list, short_id_list, short_id_idx_list))]\n","  long_open_df_list = [pd.DataFrame(index=index_, data=np.vstack((data_)).T, columns=['side', 'zone', 'id', 'id_idx']) for index_, data_ in zip(long_open_idx_list, zip(long_side_list, long_zone_list, long_id_list, long_id_idx_list))]\n","\n","  open_info_df = pd.concat(short_open_df_list + long_open_df_list)\n","  # ------ sorting + unique ------ #\n","  open_info_df.sort_index(inplace=True)\n","  # print(len(open_info_df))\n","  # print(len(open_info_df))\n","  # open_info_df.head()\n","  print(\"get_open_info_df elapsed time :\", time.time() - start_0)\n","  return open_info_df[~open_info_df.index.duplicated(keep='first')]  # 먼저 순서를 우선으로 지정  "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"eiQ36_SLLE3w"},"outputs":[],"source":["def get_res_v4(res_df, open_info_df, ohlc_list, config_list, np_timeidx, funcs, test_ratio=0.3, plot_is=True, signi=False):\n","  # ------------ make open_info_list ------------ #\n","  open_idx = open_info_df.index.to_numpy()\n","  len_df = len(res_df)\n","  s_idx = (open_idx < int(len_df * (1 - test_ratio))) == plot_is\n","  s_open_info_df = open_info_df[s_idx]\n","  s_open_idx = open_idx[s_idx]\n","\n","  open_info_list = [s_open_info_df[col_].to_numpy() for col_ in s_open_info_df.columns]\n","  side_arr, zone_arr, id_arr, id_idx_arr = open_info_list\n","\n","  # ------------ get paired_res ------------ #\n","  start_0 = time.time()\n","  paired_res = en_ex_pairing_v5(res_df, s_open_idx, open_info_list, ohlc_list, config_list, np_timeidx, funcs)\n","  # valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr = paired_res\n","  print(\"en_ex_pairing elapsed time :\", time.time() - start_0)  #  0.37 --> 0.3660471439361572 --> 0.21(lesser if)\n","\n","  # ------------ idep_plot ------------ #\n","  start_0 = time.time()\n","  high, low = ohlc_list[1:3]\n","  res = idep_plot_v12(res_df, len_df, config_list[0], high, low, s_open_idx, side_arr, paired_res, inversion=False, sample_ratio=1 - test_ratio, signi=signi)\n","  print(\"idep_plot elapsed time :\", time.time() - start_0)   # 1.40452 (v6) 1.4311 (v5)\n","\n","  return res"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8LiKwfiJ4bvM"},"outputs":[],"source":["def plot_info_v6(gs, gs_idx, sample_len, tr, prcn, rc, bars_in, pr, total_pr, cum_pr, liqd, leverage, title_position, fontsize):\n","  try:\n","    plt.subplot(gs[gs_idx])\n","    idep_res_obj = get_res_info_nb_v2(sample_len, pr, total_pr, cum_pr, liqd)\n","    plt.plot(cum_pr)\n","    plt.plot(idep_res_obj[-1], color='gold')\n","    if sample_len is not None:\n","      plt.axvline(sample_len, alpha=1., linestyle='--', color='#ffeb3b')\n","    # title_str = \"prcn : {:.3f} rc : {:.3f}\\n len_pr : {} dpf : {:.3f}\\n wr : {:.3f} sr : {:.3f}\\n acc_pr : {:.3f} sum_pr : {:.3f}\\n\" +\\\n","    #           \"min_pr : {:.3f} liqd : {:.3f}\\n acc_mdd : -{:.3f} sum_mdd : -{:.3f}\\n leverage {}\"\n","    # title_str = \"tr : {:.3f}\\n prcn : {:.3f}\\n rc : {:.3f}\\n len_pr : {}\\n dpf : {:.3f}\\n wr : {:.3f}\\n sr : {:.3f}\\n acc_pr : {:.3f}\\n sum_pr : {:.3f}\\n\" +\\\n","    #           \"min_pr : {:.3f}\\n liqd : {:.3f}\\n acc_mdd : -{:.3f}\\n sum_mdd : -{:.3f}\\n leverage {}\"\n","    title_str = \"tr : {:.3f}\\n prcn : {:.3f}\\n wave_bias : {:.3f}\\n bars_in : {:.3f}\\n len_pr : {}\\n dpf : {:.3f}\\n wr : {:.3f}\\n sr : {:.3f}\\n acc_pr : {:.3f}\\n sum_pr : {:.3f}\\n\" +\\\n","              \"min_pr : {:.3f}\\n liqd : {:.3f}\\n acc_mdd : -{:.3f}\\n sum_mdd : -{:.3f}\\n leverage {}\"\n","    plt.title(title_str.format(tr, prcn, rc, bars_in, *idep_res_obj[:-1], leverage), position=title_position, fontsize=fontsize)\n","  except Exception as e:\n","    print(\"error in plot_info :\", e)\n","\n","  return gs_idx + 1"]},{"cell_type":"code","source":["def ffill_line(line_, idx_):\n","  len_line = len(line_)\n","  total_en_idx = np.zeros(len_line)\n","  total_en_idx[idx_] = 1\n","  idx_line_ = np.where(total_en_idx, line_, np.nan)\n","  idx_line = pd.Series(idx_line_).ffill().to_numpy()\n","\n","  return idx_line\n","\n","def get_wave_bias(res_df, config, high, low, len_df, short_obj, long_obj):\n","  \n","  short_op_idx = short_obj[-1].astype(int)\n","  short_en_idx = short_obj[2].astype(int)\n","  short_en_tp1 = ffill_line(res_df['short_tp_1_{}'.format(config.selection_id)].to_numpy(), short_op_idx)   # en_idx 에 sync 된 open_idx 를 사용해야함\n","  short_en_out0 = ffill_line(res_df['short_epout_0_{}'.format(config.selection_id)].to_numpy(), short_op_idx)\n","\n","  long_op_idx = long_obj[-1].astype(int)\n","  long_en_idx = long_obj[2].astype(int)\n","  long_en_tp1 = ffill_line(res_df['long_tp_1_{}'.format(config.selection_id)].to_numpy(), long_op_idx)\n","  long_en_out0 = ffill_line(res_df['long_epout_0_{}'.format(config.selection_id)].to_numpy(), long_op_idx)\n","\n","  bias_info_tick = config.tr_set.bias_info_tick\n","\n","  # 1. min 에 초점을 맞추는 거니까, touch 없을시 len_df 로 설정\n","  # 2. future_data 사용이니까, shift(-bias_info_tick) 설정\n","  # 3. entry 다음 idx 부터 -> tp & out 체결 logic 이 현재 entry_idx 부터 되어있어서 취소\n","  last_idx = len_df - 1\n","  short_en_tp1_touch_idx = pd.Series(np.where(low <= short_en_tp1, np.arange(len_df), last_idx)).rolling(bias_info_tick, min_periods=1).min().shift(-bias_info_tick).to_numpy()[short_en_idx]  \n","  short_en_out0_touch_idx = pd.Series(np.where(high >= short_en_out0, np.arange(len_df), last_idx)).rolling(bias_info_tick, min_periods=1).min().shift(-bias_info_tick).to_numpy()[short_en_idx]\n","\n","  long_en_tp1_touch_idx = pd.Series(np.where(high >= long_en_tp1, np.arange(len_df), last_idx)).rolling(bias_info_tick, min_periods=1).min().shift(-bias_info_tick).to_numpy()[long_en_idx]\n","  long_en_out0_touch_idx = pd.Series(np.where(low <= long_en_out0, np.arange(len_df), last_idx)).rolling(bias_info_tick, min_periods=1).min().shift(-bias_info_tick).to_numpy()[long_en_idx]\n","\n","  short_true_bias_idx = short_en_tp1_touch_idx < short_en_out0_touch_idx  # true_bias 의 조건\n","  long_true_bias_idx = long_en_tp1_touch_idx < long_en_out0_touch_idx\n","\n","  short_false_bias_idx = short_en_tp1_touch_idx > short_en_out0_touch_idx  # false_bias 의 조건\n","  long_false_bias_idx = long_en_tp1_touch_idx > long_en_out0_touch_idx\n","\n","  # return short_true_bias_idx.ravel(), short_false_bias_idx.ravel(), long_true_bias_idx.ravel(), long_false_bias_idx.ravel()\n","  return short_true_bias_idx, short_false_bias_idx, long_true_bias_idx, long_false_bias_idx, short_en_tp1[short_en_idx], short_en_out0[short_en_idx], long_en_tp1[long_en_idx], long_en_out0[long_en_idx]\n","\n","  \n","def wave_bias(true_idx, false_idx):  # 정확하게 하려고, true & false 로 기준함\n","    true_sum = np.sum(true_idx)\n","    false_sum = np.sum(false_idx)\n","    return true_sum / (true_sum + false_sum)"],"metadata":{"id":"aFpEbTaECnGW"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xafHpMLwESKf"},"outputs":[],"source":["def idep_plot_v12(res_df, len_df, config, high, low, open_idx, side_arr, paired_res, inversion=False, sample_ratio=0.7, title_position=(0.5, 0.5), fontsize=15, signi=False):\n","    if not signi:\n","        plt.style.use(['dark_background', 'fast'])\n","        fig = plt.figure(figsize=(24, 8))\n","        gs = gridspec.GridSpec(nrows=2,  # row 몇 개\n","                               ncols=3,  # col 몇 개\n","                               height_ratios=[10, 1]\n","                               # height_ratios=[10, 10, 1]\n","                               )\n","    gs_idx = 0\n","    # plt.suptitle(key)\n","    \n","    p_ranges, p_qty_ratio = literal_eval(config.tp_set.p_ranges), literal_eval(config.tp_set.p_qty_ratio)\n","    assert np.sum(p_qty_ratio) == 1.0\n","    assert len(p_ranges) == len(p_qty_ratio)\n","\n","    if sample_ratio is not None:\n","      sample_len = int(len_df * sample_ratio)\n","    else:\n","      sample_len = len_df\n","\n","    # ------ short & long data preparation ------ #\n","    # start_0 = time.time()\n","    point1_arr, valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr, tr_arr = paired_res    \n","    assert len(valid_openi_arr) != 0, \"assert len(valid_openi_arr) != 0\"    \n","    short_valid_openi_idx = np.where(side_arr[valid_openi_arr] == OrderSide.SELL)[0]  # valid_openi_arr 에 대한 idx, # side_arr,\n","    long_valid_openi_idx = np.where(side_arr[valid_openi_arr] == OrderSide.BUY)[0]\n","\n","    valid_open_idx = open_idx[valid_openi_arr].reshape(-1, 1)\n","\n","    short_obj = np.hstack((pair_price_arr, pair_idx_arr, valid_open_idx))[short_valid_openi_idx]\n","    long_obj = np.hstack((pair_price_arr, pair_idx_arr, valid_open_idx))[long_valid_openi_idx]\n","    both_obj = np.vstack((short_obj, long_obj))\n","    print(\"short_obj.shape :\", short_obj.shape)\n","    print(\"long_obj.shape :\", long_obj.shape)\n","\n","    short_obj, long_obj, both_obj = [np.split(obj_, 5, axis=1) for obj_ in [short_obj, long_obj, both_obj]]\n","\n","    short_point1_arr, long_point1_arr = [point1_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    short_lvrg_arr, long_lvrg_arr = [lvrg_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    short_fee_arr, long_fee_arr = [fee_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    short_tpout_arr, long_tpout_arr = [tpout_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    # short_bias_arr, long_bias_arr = [bias_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    short_tr_arr, long_tr_arr = [tr_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    # print(\"long_bias_arr.shape :\", long_bias_arr.shape)    \n","    # print(\"elapsed time :\", time.time() - start_0)\n","\n","    short_true_bias_idx, short_false_bias_idx, long_true_bias_idx, long_false_bias_idx, short_en_tp1, short_en_out0, long_en_tp1, long_en_out0 = \\\n","    get_wave_bias(res_df, config, high, low, len_df, short_obj, long_obj)\n","\n","    len_short, len_long = len(short_valid_openi_idx), len(long_valid_openi_idx)\n","\n","    # ------ plot_data ------ #\n","    try:\n","      # start_0 = time.time()      \n","      if len_short == 0:\n","        short_pr = []\n","        gs_idx += 1\n","      else:\n","        short_tr = short_tr_arr.mean()\n","        short_pr, short_liqd = get_pr_v3(OrderSide.SELL, high, low, short_obj, short_tpout_arr, short_lvrg_arr, short_fee_arr, p_ranges, p_qty_ratio, inversion)\n","        short_total_pr = to_total_pr(len_df, short_pr, short_obj[-2])\n","        short_cum_pr = np.cumprod(short_total_pr)\n","        # short_liqd = liquidation_v2(OrderSide.SELL, h, short_obj[:4], short_lvrg_arr, short_fee_arr)\n","        short_prcn, short_rc = precision(short_pr, short_true_bias_idx), wave_bias(short_true_bias_idx, short_false_bias_idx)\n","        short_trade_ticks = np.mean(short_obj[-2] - short_obj[-1])\n","        if signi:\n","          short_idep_res_obj = (short_prcn, short_rc) + get_res_info_nb_v2(sample_len, short_pr, short_total_pr, short_cum_pr, short_liqd)\n","        else:\n","          gs_idx = plot_info_v6(gs, gs_idx, sample_len, short_tr, short_prcn, short_rc, short_trade_ticks, short_pr, short_total_pr, short_cum_pr, short_liqd, short_lvrg_arr[-1], title_position, fontsize)\n","      # print(\"elapsed time :\", time.time() - start_0)\n","\n","    except Exception as e:\n","      gs_idx += 1\n","      print(\"error in short plot_data :\", e)\n","\n","    try:\n","      # start_0 = time.time()   \n","      if len_long == 0:\n","        long_pr = []\n","        gs_idx += 1\n","      else:\n","        long_tr = long_tr_arr.mean()\n","        long_pr, long_liqd = get_pr_v3(OrderSide.BUY, high, low, long_obj, long_tpout_arr, long_lvrg_arr, long_fee_arr, p_ranges, p_qty_ratio, inversion)\n","        long_total_pr = to_total_pr(len_df, long_pr, long_obj[-2])\n","        long_cum_pr = np.cumprod(long_total_pr)\n","        # long_liqd = liquidation_v2(OrderSide.BUY, l, long_obj[:4], long_lvrg_arr, long_fee_arr)\n","        long_prcn, long_rc = precision(long_pr, long_true_bias_idx), wave_bias(long_true_bias_idx, long_false_bias_idx)\n","        long_trade_ticks = np.mean(long_obj[-2] - long_obj[-1])\n","        if signi:\n","          long_idep_res_obj = (long_prcn, long_rc) + get_res_info_nb_v2(sample_len, long_pr, long_total_pr, long_cum_pr, long_liqd)\n","        else:\n","          gs_idx = plot_info_v6(gs, gs_idx, sample_len, long_tr, long_prcn, long_rc, long_trade_ticks, long_pr, long_total_pr, long_cum_pr, long_liqd, long_lvrg_arr[-1], title_position, fontsize)\n","      # print(\"elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","      gs_idx += 1\n","      print(\"error in long plot_data :\", e)\n","\n","    \n","    try:\n","      # start_0 = time.time()\n","      if len_short * len_long == 0:\n","        both_pr = []\n","        gs_idx += 1\n","      else:\n","        both_tr = (short_tr + long_tr) / 2\n","        both_pr = np.vstack((short_pr, long_pr))  # for 2d arr, obj 를 1d 로 만들지 않는 이상, pr 은 2d 유지될 것\n","        both_total_pr = to_total_pr(len_df, both_pr, both_obj[-2])\n","        both_cum_pr = np.cumprod(both_total_pr)\n","        both_liqd = min(short_liqd, long_liqd)\n","        both_true_bias_idx = np.vstack((short_true_bias_idx, long_true_bias_idx))  # vstack for 2d arr\n","        both_false_bias_idx = np.vstack((short_false_bias_idx, long_false_bias_idx))\n","        both_prcn, both_rc = precision(both_pr, both_true_bias_idx), wave_bias(both_true_bias_idx, both_false_bias_idx)\n","        both_trade_ticks = np.mean(both_obj[-2] - both_obj[-1])\n","        if signi:\n","          both_idep_res_obj = (both_prcn, both_rc) + get_res_info_nb_v2(sample_len, both_pr, both_total_pr, both_cum_pr, both_liqd)\n","        else:\n","          gs_idx = plot_info_v6(gs, gs_idx, sample_len, both_tr, both_prcn, both_rc, both_trade_ticks, both_pr, both_total_pr, both_cum_pr, both_liqd, lvrg_arr[-1], title_position, fontsize)\n","      # print(\"elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","      gs_idx += 1\n","      print(\"error in both plot_data :\", e)\n","\n","    if not signi:\n","      if len_short * len_long > 0:\n","        for obj, cum_pr in zip([short_obj, long_obj, both_obj], [short_cum_pr, long_cum_pr, both_cum_pr]):\n","          try:\n","            # start_0 = time.time()\n","            gs_idx = frq_dev_plot_v3(gs, gs_idx, len_df, sample_len, obj[-2], cum_pr[-1], fontsize)\n","            # print(\"elapsed time :\", time.time() - start_0)          \n","          except Exception as e:\n","            gs_idx += 1\n","            print(\"error in frq_dev_plot_v3 :\", e)\n","        plt.show()\n","        plt.close()\n","\n","      return short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_true_bias_idx, short_false_bias_idx, short_point1_arr, short_en_tp1, short_en_out0, \\\n","      long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_true_bias_idx, long_false_bias_idx, long_point1_arr, long_en_tp1, long_en_out0\n","        \n","    else:\n","        return [short_idep_res_obj[:-1], long_idep_res_obj[:-1], both_idep_res_obj[:-1]]"]},{"cell_type":"markdown","metadata":{"id":"EFyWTuscH8VH"},"source":["#### get paired_res function"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qfbtFVMR01UJ"},"outputs":[],"source":["def en_ex_pairing_v5(res_df, open_idx, open_info_list, ohlc_list, config_list, np_timeidx, funcs):  # 이미 충분히 줄여놓은 idx 임\n","    side_arr, zone_arr, id_arr, id_idx_arr = open_info_list\n","    id_idx_arr = id_idx_arr.astype(int)\n","\n","    ep_out, ep_loc_point2, lvrg_set = funcs\n","\n","    point1_list, valid_openi_list, pair_idx_list, pair_price_list, lvrg_list, fee_list, tpout_list, tr_list = [[] for li in range(8)]\n","    len_df = len(res_df)\n","    len_open_idx = len(open_idx)\n","    i, open_i = 0, -1  # i for total_res_df indexing\n","\n","    while 1:\n","        # ------------ entry phase ------------ #\n","        open_i += 1  # 확인 끝났으면 조기 이탈(+1), 다음 open_idx 조사 진행\n","        if open_i >= len_open_idx:\n","            break\n","\n","        # ------ ep_loc ------ #\n","        op_idx = open_idx[open_i]  # open_i 는 i 와 별개로 운영\n","        if op_idx < i:  # i = 이전 거래 끝난후의 res_df index - \"거래 종료후 거래 시작\", '<' : 거래 종료시점 진입 가능하다는 의미\n","            continue\n","\n","        # ------ dynamic data by ID ------ #\n","        #     1. 해당 id 로 config 재할당해야함\n","        id_idx = id_idx_arr[open_i]\n","        config = config_list[id_idx]\n","        selection_id = config.selection_id\n","        open_side = side_arr[open_i]\n","\n","        side_pos = 'short' if open_side == OrderSide.SELL else 'long'\n","        tp_arr = res_df['{}_tp_{}'.format(side_pos, selection_id)].to_numpy()  # => eptpout arr_list 만들어서 꺼내 사용하면 될 것\n","        point_idxgap_arr = res_df['{}_point_idxgap_{}'.format(side_pos, selection_id)].to_numpy()\n","\n","        ep_arr = res_df['{}_ep_{}'.format(side_pos, selection_id)].to_numpy()  # Todo - while loop 내에서 to_numpy() 반복하느니, pd_indexing 이 낫지 않을까\n","        out_arr = res_df['{}_out_{}'.format(side_pos, selection_id)].to_numpy()\n","        # bias_info_arr = res_df['{}_bias_info_{}'.format(side_pos, selection_id)].to_numpy()  # ex. rolling(entry ~ end)'s high\n","        # bias_thresh_arr = res_df['{}_bias_thresh_{}'.format(side_pos, selection_id)].to_numpy()  # ex. close + dc_T20 * 0.5\n","        tr_arr = res_df['{}_tr_{}'.format(side_pos, selection_id)].to_numpy()\n","\n","        # ------ ei_k & point2 ------ #\n","        i = op_idx + 1  # open_signal 이 close_bar.shift(1) 이라고 가정하고 다음 bar 부터 체결확인한다는 의미\n","        if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","            break\n","\n","        # ------ point1 & 2's tp_j ------ #\n","        point_idxgap = point_idxgap_arr[op_idx]\n","        if np.isnan(point_idxgap):\n","            continue\n","        else:\n","            # ------ allow point2 only next to point1 ------ #\n","            open_arr = res_df['{}_open_{}'.format(side_pos, selection_id)].to_numpy()\n","            tp_j = int(op_idx - point_idxgap)\n","            if np.sum(open_arr[tp_j:op_idx]) != 0:\n","                continue\n","\n","        exec_j, ep_j, tp_j, out_j, entry_done, en_p, fee = check_eik_point2_exec_v3(res_df, config, op_idx, tp_j, len_df, open_side,\n","                                                                                 [*ohlc_list, ep_arr], ep_out, ep_loc_point2)\n","        i = exec_j\n","\n","        if not entry_done:\n","            continue\n","\n","        # ------ leverage ------ #\n","        out = out_arr[out_j]  # lvrg_set use out on out_j\n","        leverage = lvrg_set(res_df, config, open_side, en_p, out, fee)  # res_df 변수 사용됨 - 주석 처리 된 상태일뿐\n","        if leverage is None:\n","            continue\n","\n","        exit_done, cross_on = 0, 0\n","        # ------ check tpout_onexec ------ #\n","        # if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","        if config.ep_set.entry_type == \"LIMIT\":\n","            if config.tp_set.tp_onexec:  # dynamic 은 tp_onexec 사용하는 의미가 없음\n","                tp_j = exec_j\n","            if config.out_set.out_onexec:  # dynamic 은 out_onexec 사용하는 의미가 없음\n","                out_j = exec_j\n","\n","        while 1:\n","            # ------------ exit phase ------------ #\n","            if not config.tp_set.static_tp:  # 앞으로 왠만하면 static 만 사용할 예정\n","                tp_j = i\n","            if not config.out_set.static_out:\n","                out_j = i\n","\n","            # ------------ tp ------------ #\n","            if not config.tp_set.non_tp and i != exec_j:\n","                exit_done, ex_p, fee = check_limit_tp_exec(res_df, config, open_i, i, tp_j, len_df, fee, open_side, exit_done,\n","                                                           [*ohlc_list, [tp_arr]])  # 여기서는 j -> i 로 변경해야함\n","                # if config.tp_set.tp_type in ['LIMIT']:  # 'BOTH' -> 앞으로는, LIMIT 밖에 없을거라 주석처리함\n","                # if not exit_done and config.tp_set.tp_type in ['MARKET', 'BOTH']:\n","\n","            # ------------ out ------------ #\n","            # ------ signal_out ------ #\n","            if not exit_done:\n","                exit_done, cross_on, ex_p, fee = check_market_out_exec_v2(config, res_df, np_timeidx, open_i, i, len_df, fee, open_side, cross_on, exit_done)\n","            # ------ hl_out ------ #\n","            if config.out_set.hl_out != \"None\":\n","                if not exit_done:  # and i != len_df - 1:\n","                    exit_done, ex_p, fee = check_out(config, open_i, i, out_j, len_df, fee, open_side, exit_done, [*ohlc_list, out_arr])\n","\n","            if exit_done:  # 이 phase 는 exit_phase 뒤에도 있어야할 것 - entry_done var. 사용은 안하겠지만\n","                # ------ append dynamic vars. ------ #\n","                point1_list.append(tp_j)\n","                valid_openi_list.append(open_i)  # side, zone, start_ver arr 모두 openi_list 로 접근하기 위해 open_i 를 담음\n","                pair_idx_list.append([exec_j, i])  # entry & exit (체결 기준임)\n","                pair_price_list.append([en_p, ex_p])\n","                lvrg_list.append(leverage)\n","                fee_list.append(fee)\n","                tpout_list.append([tp_arr[tp_j], out_arr[out_j]])  # for tpout_line plot_check\n","                # bias_list.append([bias_info_arr[exec_j], bias_thresh_arr[exec_j]])  # backtest 에서만 가능한 future_data 사용\n","                # bias_list.append([bias_info_arr[exec_j], tp_arr[tp_j]])  # bias_info 는 entry_idx 부터 & tp = bias_thresh\n","                tr_list.append(tr_arr[op_idx])\n","\n","                # open_i += 1  # 다음 open_idx 조사 진행\n","                break\n","\n","            # 1. 아래있으면, 체결 기준부터 tp, out 허용 -> tp 가 entry_idx 에 체결되는게 다소 염려되기는 함, 일단 진행 (그런 case 가 많지 않았으므로)\n","            # 2. 위에있으면, entry 다음 tick 부터 exit 허용\n","            i += 1\n","            if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","                break\n","\n","        if i >= len_df:  # or open_i >= len_open_idx:  # res_df 의 last_index 까지 돌아야함\n","            break\n","        else:\n","            continue\n","\n","    return np.array(point1_list), np.array(valid_openi_list), np.array(pair_idx_list), np.array(pair_price_list), np.array(lvrg_list), np.array(\n","        fee_list), np.array(tpout_list), np.array(tr_list)\n","\n","\n","def check_eik_point2_exec_v3(res_df, config, op_idx, tp_j, len_df, open_side, np_datas, ep_out, ep_loc_point2):\n","    o, h, l, c, ep_arr = np_datas\n","    ep_j = op_idx\n","    # tp_j = op_idx\n","    out_j = op_idx\n","\n","    selection_id = config.selection_id    \n","    allow_ep_in = 0 if config.ep_set.point2.use_point2 else 1\n","    entry_done = 0\n","    ep = None\n","\n","    if config.ep_set.entry_type == \"LIMIT\":\n","        fee = config.trader_set.limit_fee\n","\n","        for e_j in range(op_idx + 1, len_df):\n","            # ------ index setting for dynamic options ------ #\n","            if not config.ep_set.static_ep:\n","                ep_j = e_j  # dynamic_ep 를 위한 ep_index var.\n","                out_j = e_j  # dynamic_out 를 위한 out_index var. - 조건식이 static_ep 와 같이 있는 이유 모름 => dynamic_lvrg 로 사료됨\n","\n","            if not config.tp_set.static_tp:\n","                tp_j = e_j\n","\n","            # ------ ei_k ------ # - limit 사용하면 default 로 ei_k 가 존재해야함\n","            if ep_out(res_df, config, op_idx, e_j, tp_j, [h, l], open_side):\n","              break\n","\n","            # ------ point2 ------ #\n","            if not allow_ep_in:\n","                allow_ep_in, out_j = ep_loc_point2(res_df, config, e_j, out_j, side=OrderSide.SELL)\n","                if allow_ep_in:\n","                  if config.ep_set.point2.entry_type == \"LIMIT\":\n","                    ep_j = e_j\n","                    # print(\"e_j in point2 :\", e_j)\n","                    continue\n","\n","            # ------ check ep_exec ------ #\n","            if allow_ep_in:\n","              if config.ep_set.point2.use_point2 and config.ep_set.point2.entry_type == 'MARKET':\n","                entry_done = 1\n","                ep = c[e_j]\n","                break\n","              else:\n","                if open_side == OrderSide.SELL:\n","                    if h[e_j] >= ep_arr[ep_j]:\n","                        entry_done = 1\n","                        ep = ep_arr[ep_j]\n","                        if o[e_j] >= ep_arr[ep_j]:  # open comp 는 결국, 수익률에 얹어주는 logic (반보수) -> 사용 보류\n","                            ep = o[e_j]\n","                        break\n","                else:\n","                    if l[e_j] <= ep_arr[ep_j]:\n","                        entry_done = 1\n","                        ep = ep_arr[ep_j]\n","                        if o[e_j] <= ep_arr[ep_j]:\n","                            ep = o[e_j]\n","                        break\n","\n","    else:  # market entry\n","        e_j = op_idx + 1\n","        entry_done = 1\n","        ep = c[op_idx]\n","        fee = config.trader_set.market_fee\n","\n","    return e_j, ep_j, tp_j, out_j, entry_done, ep, fee  # 다음 start_i <-- e_j 로 변경\n","    #   e_j => 다음 phase 의 시작 index <-> ep_j : ep 의 기준 index\n","    #   ep_j, tp_j, out_j 가 return 되어야함 - exit phase 에서 이어가기 위함\n","\n","\n","def check_limit_tp_exec(res_df, config, open_i, j, tp_j, len_df, fee, open_side, exit_done, np_datas):\n","    o, h, l, c, tps = np_datas\n","    tp = None\n","    selection_id = config.selection_id\n","    len_tps = len(tps)\n","\n","    for tp_i, tp_arr in enumerate(tps):\n","        #     decay adjustment    #\n","        #     tp_j includes dynamic_j - functionalize  #\n","        try:\n","            if config.tr_set.decay_gap != \"None\":\n","                decay_share = (j - open_i) // config.tp_set.decay_term\n","                decay_remain = (j - open_i) % config.tp_set.decay_term\n","                if j != open_i and decay_remain == 0:\n","                    if open_side == OrderSide.SELL:\n","                        tp_arr[tp_j] += res_df['short_tp_gap_{}'.format(selection_id)].iloc[open_i] * config.tr_set.decay_gap * decay_share\n","                    else:\n","                        tp_arr[tp_j] -= res_df['long_tp_gap_{}'.format(selection_id)].iloc[open_i] * config.tr_set.decay_gap * decay_share\n","        except:\n","            pass\n","\n","        if open_side == OrderSide.SELL:\n","            if l[j] <= tp_arr[tp_j]:  # and partial_tp_cnt == tp_i:  # we use static tp now\n","                # if l[j] <= tp_arr[j] <= h[j]: --> 이건 잘못되었음\n","                # partial_tp_cnt += 1 --> partial_tp 보류\n","\n","                # ------ dynamic tp ------ #\n","                if tp_arr[j] != tp_arr[j - 1] and not config.tp_set.static_tp:\n","                    # tp limit 이 불가한 경우 - open 이 이미, tp 를 넘은 경우\n","                    if o[j] < tp_arr[j]:\n","                        tp = o[j]\n","                    # tp limit 이 가능한 경우 - open 이 아직, tp 를 넘지 않은 경우\n","                    else:\n","                        tp = tp_arr[j]\n","                # ------ static tp ------ #\n","                else:\n","                    #   tp limit 이 불가한 경우 - open 이 이미, tp 를 넘은 경우\n","                    if o[j] < tp_arr[tp_j]:  # static 해놓고 decay 사용하면 dynamic 이니까\n","                        if config.tr_set.decay_gap != \"None\" and decay_remain == 0:\n","                            tp = o[j]  # tp_j -> open_i 를 가리키기 때문에 decay 는 한번만 진행되는게 맞음\n","                        else:\n","                            tp = tp_arr[tp_j]\n","                    else:\n","                        tp = tp_arr[tp_j]\n","\n","                if tp_i == len_tps - 1:\n","                    exit_done = 1  # partial 을 고려해 exit_done = 1 상태는 tp_i 가 last_index 로 체결된 경우만 해당\n","\n","        else:\n","            if h[j] >= tp_arr[tp_j]:\n","                # ------ dynamic tp ------ #\n","                if tp_arr[j] != tp_arr[j - 1] and not config.tp_set.static_tp:\n","                    if o[j] > tp_arr[j]:\n","                        tp = o[j]\n","                    else:\n","                        tp = tp_arr[j]\n","\n","                # ------ static tp ------ #\n","                else:\n","                    if o[j] > tp_arr[tp_j]:\n","                        if config.tr_set.decay_gap != \"None\" and decay_remain == 0:\n","                            tp = o[j]\n","                        else:\n","                            tp = tp_arr[tp_j]\n","                    else:\n","                        tp = tp_arr[tp_j]\n","\n","                if tp_i == len_tps - 1:\n","                    exit_done = 1  # partial 을 고려해 exit_done = 1 상태는 tp_i 가 last_index 로 체결된 경우만 해당\n","\n","    if exit_done:\n","        fee += config.trader_set.limit_fee\n","\n","    return exit_done, tp, fee\n","\n","\n","def check_market_out_exec_v2(config, res_df, np_timeidx, open_i, j, len_df, fee, open_side, cross_on, exit_done):    \n","    close = res_df['close'].to_numpy()\n","    ex_p = None\n","    selection_id = config.selection_id\n","\n","    # ------ timestamp ------ #\n","    if config.out_set.tf_exit != \"None\":\n","        if np_timeidx[j] % config.out_set.tf_exit == config.out_set.tf_exit - 1 and j != open_i:\n","            exit_done = 1\n","\n","    # ------ rsi ------ # -> vectorize 가능함 => 추후 적용\n","    if config.out_set.rsi_exit:\n","        rsi_T = res_df['rsi_T'].to_numpy()\n","\n","        if open_side == OrderSide.SELL:\n","            if (rsi_T[j - 1] >= 50 - config.loc_set.point.osc_band) & (rsi_T[j] < 50 - config.loc_set.point.osc_band):\n","                exit_done = 1\n","        else:\n","            if (rsi_T[j - 1] <= 50 + config.loc_set.point.osc_band) & (rsi_T[j] > 50 + config.loc_set.point.osc_band):\n","                exit_done = 1\n","\n","    # ------ heikin_ashi ------ #\n","    # if selection_id in ['v3_3']:\n","    #     if open_side == OrderSide.SELL:\n","    #       if (ha_o[j] < ha_c[j]):# & (ha_o[j] == ha_l[j]):   # 양봉 출현\n","    #           exit_done = 1\n","    #     else:\n","    #       if (ha_o[j] > ha_c[j]):# & (ha_o[j] == ha_h[j]):  # 음봉 출현\n","    #           exit_done = 1\n","\n","    # ------------ early out ------------ #\n","    # ------ bb ------ # --> cross_on 기능은 ide latency 개선 여부에 해당되지 않음\n","    if selection_id in ['v5_2']:\n","        bb_upper_5T = res_df['bb_upper_5T'].to_numpy()\n","        bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","\n","        if open_side == OrderSide.SELL:\n","            if close[j] < bb_lower_5T[j] < close[j - 1]:\n","                cross_on = 1\n","            if cross_on == 1 and close[j] > bb_upper_5T[j] > close[j - 1]:\n","                exit_done = 1\n","        else:\n","            if close[j] > bb_upper_5T[j] > close[j - 1]:\n","                cross_on = 1\n","            if cross_on == 1 and close[j] < bb_lower_5T[j] < close[j - 1]:\n","                exit_done = 1\n","\n","    if exit_done:\n","        ex_p = close[j]\n","        fee += config.trader_set.market_fee\n","\n","    return exit_done, cross_on, ex_p, fee\n","\n","\n","def check_out(config, open_i, j, out_j, len_df, fee, open_side, exit_done, np_datas):\n","    o, h, l, c, out_arr = np_datas\n","    ex_p = None\n","\n","    if config.out_set.hl_out:\n","        if open_side == OrderSide.SELL:\n","            if h[j] >= out_arr[out_j]:  # check out only once\n","                exit_done = 1\n","        else:\n","            if l[j] <= out_arr[out_j]:  # check out only once\n","                exit_done = 1\n","    else:  # close_out\n","        if open_side == OrderSide.SELL:\n","            if c[j] >= out_arr[out_j]:  # check out only once\n","                exit_done = 1\n","        else:\n","            if c[j] <= out_arr[out_j]:  # check out only once\n","                ex_p = c[j]\n","                exit_done = 1\n","\n","    if exit_done:\n","        if config.out_set.hl_out:\n","            ex_p = out_arr[out_j]\n","        else:\n","            ex_p = c[j]\n","\n","        if open_side == OrderSide.SELL:\n","            if o[j] >= out_arr[out_j]:\n","                ex_p = o[j]\n","        else:\n","            if o[j] <= out_arr[out_j]:\n","                ex_p = o[j]\n","\n","        fee += config.trader_set.market_fee\n","\n","    return exit_done, ex_p, fee"]},{"cell_type":"markdown","metadata":{"id":"zQ-roiifspcX"},"source":["#### ep_loc.point & zone legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Js5eL87VspcX"},"outputs":[],"source":["\n","    # res_df['entry_{}'.format(selection_id)] = np.where((res_df['open'] >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 (res_df['close'] < res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(selection_id)] - 1, res_df['entry_{}'.format(selection_id)])\n","\n","    # res_df['entry_{}'.format(selection_id)] = np.where((res_df['open'] >= res_df['bb_lower_1m']) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['bb_lower_1m']) &\n","    #                 (res_df['close'] < res_df['bb_lower_1m'])\n","    #                 , res_df['entry_{}'.format(selection_id)] - 1, res_df['entry_{}'.format(selection_id)])\n","\n","    # res_df['entry_{}'.format(selection_id)] = np.where((res_df['open'] <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   (res_df['close'] > res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(selection_id)] + 1, res_df['entry_{}'.format(selection_id)])\n","\n","    # res_df['entry_{}'.format(selection_id)] = np.where((res_df['open'] <= res_df['bb_upper_1m']) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['bb_upper_1m']) &\n","    #                   (res_df['close'] > res_df['bb_upper_1m'])\n","    #                 , res_df['entry_{}'.format(selection_id)] + 1, res_df['entry_{}'.format(selection_id)])\n","\n","\n","    \n","   # --------------- ema --------------- #   \n","  # res_df['ema5_1m'] = ema(res_df['close'], 5).shift(1)\n","\n","  #   # --------------- cloud bline --------------- #   \n","  # res_df['cloud_bline_1m'] = cloud_bline(res_df, 26).shift(1)\n","  \n","    #       stochastic      #\n","  # res_df['stoch'] = stoch(res_df, 5, 3, 3)\n","\n","    #       fisher      #\n","  # res_df['fisher30'] = fisher(res_df, 30)\n","  # res_df['fisher60'] = fisher(res_df, 60)\n","  # res_df['fisher120'] = fisher(res_df, 120)\n","\n","    #       cctbbo      #\n","  # res_df['cctbbo'], _ = cct_bbo(res_df, 21, 13)\n","\n","    #       ema_roc      #\n","  # res_df['ema_roc'] = ema_roc(res_df['close'], 13, 9)\n","\n","\n","   # ------------------------------ htf data ------------------------------ #    \n","\n","  #             Todo              #\n","  # htf_df = pd.read_excel(date_path2 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # htf_df = pd.read_excel(date_path3 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # htf_df = pd.read_excel(date_path4 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # htf_df = pd.read_excel(date_path5 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # # # # htf_df = pd.read_excel(date_path6 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","\n","  # # ---- htf index slicing ---- #\n","  # htf_df = htf_df.loc[:res_df.index[-1]]\n","  \n","  # print(\"res_df.index[-1] :\", res_df.index[-1])\n","  # print(\"htf_df.index[-1] :\", htf_df.index[-1])\n","\n","  # res_df = dc_line(res_df, htf_df, '5m')\n","  # res_df = dc_level(res_df, '5m', 1)\n","\n","\n","  # # # if \"sma4\" in res_df.columns:\n","  # # #   res_df.drop(\"sma4\", axis=1, inplace=1)\n","\n","  # # htf_df['sma'] = htf_df['close'].rolling(60).mean()\n","  # # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, htf_df, [-1]), columns=['sma_30m']))\n","  \n","  # htf_df['stoch'] = stoch(htf_df, 13, 3, 3)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, htf_df, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","   \n","  # fifth_df['ema'] = ema(fifth_df['close'], 5)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, fifth_df, [-1]), columns=['ema5']))\n","\n","        # ------------------------------------ short ------------------------------------ # \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 0:\n","        #   mr_score += 1          \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_upper_1m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_upper_3m'].iloc[i] <= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_upper_5m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == 'MARKET':\n","        #   mr_const_cnt += 1\n","        #   if (res_df['close'].iloc[i] - res_df['short_tp'].iloc[i]) / (res_df['short_out'].iloc[i] - res_df['close'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error):  \n","        #     mr_score += 1\n","\n","           \n","        # ------- entry once ------- #   \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == 1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == -1:\n","        #     prev_entry_cnt += 1          \n","        # # # print(\"prev_entry_cnt :\", prev_entry_cnt)\n","\n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] < res_df['bb_lower_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_lower2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_base_1h'].iloc[i]:\n","\n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] < res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","  \n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['low'].iloc[i] > res_df['short_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1\n","\n","\n","\n","        # ------------------------------------ long ------------------------------------ # \n","          \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 1:\n","        #   mr_score += 1   \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 1:\n","        #   mr_score += 1     \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 1:\n","          # mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_lower_1m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_lower_3m'].iloc[i] >= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_lower_5m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == \"MARKET\":\n","          # mr_const_cnt += 1        \n","          # if (res_df['long_tp'].iloc[i] - res_df['close'].iloc[i]) / (res_df['close'].iloc[i] - res_df['long_out'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error): # 일반적으로 dr 상에서 tp 비율이 더 커짐 (tr 보다)\n","          #   mr_score += 1\n","\n","        # -------------- ep limit -------------- #    \n","        # mr_const_cnt += 1\n","        # # if (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # if config.ep_set.min_eplim_pct < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # # if 0 < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        #   # if res_df['st_gap_15m'].iloc[i] / res_df['open'].iloc[i] < 0:\n","        #   #   print(\"i, res_df['st_gap_15m'].iloc[i] :\", i, res_df['st_gap_15m'].iloc[i])\n","        #   mr_score += 1\n","\n","\n","        # -------------- entry once -------------- #    \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == -1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == 1:\n","        #     prev_entry_cnt += 1\n","          \n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","          \n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] > res_df['bb_upper_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_upper2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_base_1h'].iloc[i]:\n","        \n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] > res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","\n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['high'].iloc[i] < res_df['long_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","          \n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1"]},{"cell_type":"markdown","metadata":{"id":"_blyFhQJUd5X"},"source":["#### dump"]},{"cell_type":"code","source":["plot_is=1\n","open_idx = open_info_df.index.to_numpy()\n","len_df = len(res_df)\n","s_idx = (open_idx < int(len_df * (1 - test_ratio))) == plot_is\n","s_open_info_df = open_info_df[s_idx]\n","s_open_idx = open_idx[s_idx]\n","\n","open_info_list = [s_open_info_df[col_].to_numpy() for col_ in s_open_info_df.columns]\n","side_arr, zone_arr, id_arr, id_idx_arr = open_info_list\n","\n","# ------------ get paired_res ------------ #\n","start_0 = time.time()\n","paired_res = en_ex_pairing_v4(res_df, s_open_idx, open_info_list, ohlc_list, config_list, np_timeidx, funcs)\n","# valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr = paired_res\n","print(\"en_ex_pairing elapsed time :\", time.time() - start_0)  #  0.37 --> 0.3660471439361572 --> 0.21(lesser if)\n","\n","# ------------ idep_plot ------------ #\n","start_0 = time.time()\n","high, low = ohlc_list[1:3]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Q-Xt9w51BOPC","executionInfo":{"status":"ok","timestamp":1650030352162,"user_tz":-540,"elapsed":1285,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"a3bd1b45-d58d-4184-c501-66fc824aaa99"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 1.1988611221313477\n"]}]},{"cell_type":"code","source":["sample_ratio=0.7\n","title_position=(0.5, 0.5)\n","fontsize=15\n","signi=False\n","\n","if sample_ratio is not None:\n","      sample_len = int(len_df * sample_ratio)\n","else:\n","  sample_len = len_df\n","\n","# ------ short & long data preparation ------ #\n","# start_0 = time.time()\n","point1_arr, valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr, _, tr_arr = paired_res    \n","assert len(valid_openi_arr) != 0, \"assert len(valid_openi_arr) != 0\"    \n","short_valid_openi_idx = np.where(side_arr[valid_openi_arr] == OrderSide.SELL)[0]  # valid_openi_arr 에 대한 idx, # side_arr,\n","long_valid_openi_idx = np.where(side_arr[valid_openi_arr] == OrderSide.BUY)[0]\n","\n","valid_open_idx = open_idx[valid_openi_arr].reshape(-1, 1)\n","\n","short_obj = np.hstack((pair_price_arr, pair_idx_arr, valid_open_idx))[short_valid_openi_idx]\n","long_obj = np.hstack((pair_price_arr, pair_idx_arr, valid_open_idx))[long_valid_openi_idx]\n","both_obj = np.vstack((short_obj, long_obj))\n","print(\"short_obj.shape :\", short_obj.shape)\n","print(\"long_obj.shape :\", long_obj.shape)\n","\n","short_obj, long_obj, both_obj = [np.split(obj_, 5, axis=1) for obj_ in [short_obj, long_obj, both_obj]]\n","\n","short_point1_arr, long_point1_arr = [point1_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","short_lvrg_arr, long_lvrg_arr = [lvrg_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","short_fee_arr, long_fee_arr = [fee_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","short_tpout_arr, long_tpout_arr = [tpout_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","# short_bias_arr, long_bias_arr = [bias_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","short_tr_arr, long_tr_arr = [tr_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","# print(\"long_bias_arr.shape :\", long_bias_arr.shape)    \n","# print(\"elapsed time :\", time.time() - start_0)\n","\n","short_true_bias_idx, short_false_bias_idx, long_true_bias_idx, long_false_bias_idx = get_wave_bias(res_df, config, high, low, len_df, short_obj, long_obj)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ErhWGoABA5L2","executionInfo":{"status":"ok","timestamp":1650030354180,"user_tz":-540,"elapsed":380,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"240dac0e-9466-4c61-d1bf-55580d7de35e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["short_obj.shape : (425, 5)\n","long_obj.shape : (374, 5)\n"]}]},{"cell_type":"code","source":["short_en_idx = short_obj[2].astype(int)\n","short_en_tp1 = ffill_line(res_df['short_tp_1_{}'.format(config.strat_version)].to_numpy(), short_en_idx)\n","short_en_out0 = ffill_line(res_df['short_epout_0_{}'.format(config.strat_version)].to_numpy(), short_en_idx)\n","\n","long_en_idx = long_obj[2].astype(int)\n","long_en_tp1 = ffill_line(res_df['long_tp_1_{}'.format(config.strat_version)].to_numpy(), long_en_idx)\n","long_en_out0 = ffill_line(res_df['long_epout_0_{}'.format(config.strat_version)].to_numpy(), long_en_idx)\n","\n","bias_info_tick = config.tr_set.bias_info_tick\n","\n","# 1. min 에 초점을 맞추는 거니까, touch 없을시 len_df 로 설정\n","# 2. future_data 사용이니까, shift(-bias_info_tick) 설정\n","# 3. entry 다음 idx 부터 -> tp & out 체결 logic 이 현재 entry_idx 부터 되어있어서 취소\n","last_idx = len_df - 1\n","short_en_tp1_touch_idx = pd.Series(np.where(low <= short_en_tp1, np.arange(len_df), last_idx)).rolling(bias_info_tick, min_periods=1).min().shift(-bias_info_tick).to_numpy()[short_en_idx]  \n","short_en_out0_touch_idx = pd.Series(np.where(high >= short_en_out0, np.arange(len_df), last_idx)).rolling(bias_info_tick, min_periods=1).min().shift(-bias_info_tick).to_numpy()[short_en_idx]\n","\n","long_en_tp1_touch_idx = pd.Series(np.where(high >= long_en_tp1, np.arange(len_df), last_idx)).rolling(bias_info_tick, min_periods=1).min().shift(-bias_info_tick).to_numpy()[long_en_idx]\n","long_en_out0_touch_idx = pd.Series(np.where(low <= long_en_out0, np.arange(len_df), last_idx)).rolling(bias_info_tick, min_periods=1).min().shift(-bias_info_tick).to_numpy()[long_en_idx]\n","\n","short_true_bias_idx = short_en_tp1_touch_idx < short_en_out0_touch_idx  # true_bias 의 조건\n","long_true_bias_idx = long_en_tp1_touch_idx < long_en_out0_touch_idx\n","\n","short_false_bias_idx = short_en_tp1_touch_idx > short_en_out0_touch_idx  # false_bias 의 조건\n","long_false_bias_idx = long_en_tp1_touch_idx > long_en_out0_touch_idx"],"metadata":{"id":"uelGdX2-ISZb"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["long_en_tp1_touch_idx"],"metadata":{"id":"w1g0VQvUfK69"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(long_en_tp1[long_en_tp1_touch_idx.astype(int)].ravel())\n","print(high[long_en_tp1_touch_idx.astype(int)].ravel()))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"f0hPU71agPGs","executionInfo":{"status":"ok","timestamp":1650031209368,"user_tz":-540,"elapsed":3,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"e37f1fae-6108-4777-9979-5f17775aca60"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[3138.55  355.84 3138.55  341.35  350.44  338.46  358.86 3138.55  363.65 3138.55  382.85 3138.55 3138.55  342.02 3138.55  328.9  3138.55  344.79 3138.55  355.27  354.4  3138.55  353.77 3138.55  347.58 3138.55  352.19  354.42 3138.55 3138.55  338.88  339.4   367.89  375.5   375.5   373.35  375.9   375.14  375.48 3138.55  380.59  382.89  379.92 3138.55  369.7   369.24  381.2   420.    417.28  412.1   408.29  380.55  382.4  3138.55  383.96 3138.55  383.72  406.76  411.49  411.86  432.93 3138.55 3138.55  447.69 3138.55  465.24  454.7   466.5   510.4   535.2   535.2  3138.55  509.2   588.18 3138.55  598.25 3138.55  591.86 3138.55  568.32 3138.55  668.85  649.    661.3  3138.55 3138.55  614.28 3138.55  616.44  622.28  627.99  731.56  775.22 1031.7  3138.55 3138.55 1178.4  3138.55 1326.32 1060.37 3138.55 3138.55 3138.55 1342.85 3138.55 1240.67 3138.55 3138.55 1353.01 1537.91 1647.83 1724.82 1753.25 3138.55 1750.19 1867.96 1813.91 3138.55 3138.55 3138.55 3138.55 1699.51 1494.44 1367.36 3138.55 3138.55 3138.55 3138.55 1844.   3138.55 1807.   1765.04 3138.55 1881.5  3138.55 3138.55 3138.55 1583.38 1937.46 2001.46 2114.   2023.5  2081.23 2129.9  2129.83 2080.83 2476.97 2148.2  3138.55 3138.55 3138.55 3138.55 2222.03 3138.55 2329.38 2263.   2534.76 2650.94 3138.55 2778.02 2775.85 3138.55 3138.55 3471.94 3138.55 3964.08 4320.   3767.6  3138.55 2373.99 3138.55 3138.55 3138.55 3138.55 2850.   2636.88 3138.55 3138.55 2521.4  3138.55 2482.5  3138.55 2414.33 2368.29 2508.85 2571.   3138.55 3138.55 2351.52 2243.45 3138.55 1840.52 1793.36 3138.55 1981.23 3138.55 3138.55 2154.34 3138.55 3138.55 3138.55 2292.99 2249.   2393.86 3138.55 2122.24 3138.55 1906.44 2000.92 3138.55 3138.55 1895.   1915.   1826.21 1828.3  3138.55 2006.57 3138.55 2349.85 2301.25 2355.56 2470.36 2609.14 2496.57 3124.85 3130.8  3273.65 3248.22 3277.91 3138.55 3018.88 3228.28 3138.55 3253.5  3265.17 3138.55 3121.   3138.55 3251.64 3760.4  3768.5  3138.55 3926.18 3138.55 3138.55 3138.55 3243.44 3387.91 3435.57\n"," 3138.55 3584.55 3138.55 3138.55 3138.55 3138.55 3138.55 2940.   3138.55 3138.55 3360.9  3399.06 3138.55 3559.   3138.55 3138.55 3138.55 3138.55 3504.24 3138.55 3653.89 3838.53 3824.   4140.   3138.55 3138.55 3138.55 4204.69 3138.55 4385.29 3138.55 4328.29 4342.8  4368.   4619.95 3138.55 4547.73 4546.49 3138.55 3138.55 4620.   4821.47 4766.   4764.62 4664.7  4713.04 4307.   4309.63 3138.55 3138.55 4193.46 4156.24 3138.55 4097.31 4379.   4678.43 4736.66 3138.55 3138.55 3966.   4218.99 3138.55 4192.11 3138.55 4050.2  3138.55 3892.61 3840.54 4092.5  3138.55 3138.55 3908.04 3936.79 3819.01 3848.34 3138.55 3138.55 4108.36 3138.55 3138.55 3138.55 3679.86 3702.95 3757.2  3138.55 3740.66 3138.55 3138.55 3744.99 3764.   3757.79 3821.99 3747.15 3138.55 3138.55 3226.   3138.55 3138.55 3132.58 3134.2  3260.79 3277.   3268.99 3344.65 3138.55 3132.81 3092.32 3138.55 2470.08 3138.55 2692.   3138.55 2635.   3028.   3138.55 3017.62 3015.03 3000.75 3138.55 3086.7  3105.96 3138.55 3110.   3121.88 3138.55]\n","374\n"]}]},{"cell_type":"code","source":["print(long_en_tp1_touch_idx[long_true_bias_idx])\n","print(long_en_out0_touch_idx[long_true_bias_idx])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hyXEy7KAedJ2","executionInfo":{"status":"ok","timestamp":1650030425924,"user_tz":-540,"elapsed":364,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"12218782-36bf-464c-f541-bcedca0ff729"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[  3248.   4344.   5341.   6735.   7834.  13347.  25711.  28495.  32237.  33547.  39660.  44409.  45439.  46948.  48805.  51043.  52120.  53359.  54034.  57112.  58538.  60445.  62858.  67542.  71722.  80491.  80767.  86740.  87741.  88510.  89202.  89234.  90141. 105033. 106104. 111037. 113720. 121267. 135864. 139356. 149820. 152586. 155911. 160863. 161642. 162671. 171804. 173306. 175672. 199217. 203117. 212870. 226575. 227026. 230021. 232483. 233282. 248963. 270925. 272996. 275479. 290295. 300154. 302132. 303737. 304638. 305793. 308003. 312179. 321092. 332342. 333530. 334276. 338807. 341295. 342957. 351072. 355171. 361986. 374071. 392165. 394820. 400131. 402941. 405780. 407033. 408021. 412866. 414544. 424202. 424980. 427095. 434430. 437469. 440475. 451161. 455125. 458299. 458442. 462265. 468069. 471761. 474015. 474938. 479950. 485783. 489154. 491021. 493865. 495411. 502142. 503869. 506076. 506701. 515582. 522458. 522527. 525678. 541272. 568971. 584740. 590825. 594590. 600643. 604810. 606480. 609673. 610227. 611668. 614534. 617830. 620083. 623613. 635582. 636202. 640519. 646478. 649546. 651589. 656581. 657916. 658876. 672091. 672723. 673970. 676228. 678667. 679819. 685661. 693579. 693875. 694317. 694843. 697049. 697494. 698408. 699552. 700742. 706565. 712600. 714943. 721810. 722645. 747355. 748460. 748687. 749288. 750137. 752699. 755756. 755934. 761833.]\n","[763830. 763830.   5371. 763830. 763830. 763830.  25738. 763830. 763830. 763830.  39721. 763830.  45562. 763830. 763830. 763830.  52203. 763830. 763830.  57309.  58660.  60458. 763830. 763830. 763830. 763830. 763830.  86826.  87809. 763830. 763830. 763830. 763830. 763830. 763830. 111095. 763830. 763830. 763830. 139363. 763830. 152608. 156017. 763830. 763830. 763830. 171904. 763830. 763830. 763830. 763830. 212940. 763830. 763830. 763830. 763830. 233456. 249015. 763830. 763830. 763830. 763830. 300351. 763830. 303840. 763830. 305881. 308089. 763830. 321269. 763830. 333598. 763830. 763830. 341392. 763830. 763830. 763830. 763830. 763830. 392245. 394855. 400313. 763830. 763830. 407115. 763830. 412940. 763830. 763830. 763830. 763830. 763830. 763830. 440618. 451267. 763830. 763830. 458525. 763830. 468301. 763830. 763830. 763830. 763830. 763830. 763830. 763830. 493893. 763830. 763830. 763830. 506190. 506707. 763830. 763830. 763830. 525726. 763830. 763830. 763830. 763830. 594650. 763830. 763830. 763830. 609694. 763830. 763830. 614559. 763830. 620213. 763830. 763830. 763830. 763830. 763830. 763830. 763830. 763830. 658023. 658979. 763830. 763830. 763830. 763830. 678782. 763830. 685747. 763830. 763830. 694428. 763830. 763830. 763830. 763830. 763830. 763830. 763830. 763830. 763830. 763830. 763830. 747472. 763830. 748782. 763830. 763830. 752722. 763830. 756095. 761897.]\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FlNGKvW_w2za"},"outputs":[],"source":["config_name = \"config_v5_2.1220_candlejson\"\n","# config_name = \"config_v3.json\"\n","cfg_full_path = os.path.join(current_path, \"config\", config_name)\n","\n","\n","with open(cfg_full_path, 'w') as cfg:\n","    json.dump(config1, cfg, indent=2)\n","    print(\"{} dumped !\".format(cfg_full_path))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xs6TlV7wu6uo"},"outputs":[],"source":["def en_ex_pairing_v4(res_df, open_idx, open_info_list, ohlc_list, point2_list, market_data_list, config_list, np_timeidx, funcs):  # 이미 충분히 줄여놓은 idx 임\n","    side_arr, zone_arr, id_arr, id_idx_arr = open_info_list\n","    id_idx_arr = id_idx_arr.astype(int)\n","\n","    ep_out, ep_loc_point2, lvrg_set = funcs\n","\n","    point1_list, valid_openi_list, pair_idx_list, pair_price_list, lvrg_list, fee_list, tpout_list, bias_list, tr_list = [[] for li in range(9)]\n","    len_df = len(res_df)\n","    len_open_idx = len(open_idx)\n","    i, open_i = 0, -1  # i for total_res_df indexing\n","\n","    while 1:\n","        # ------------ entry phase ------------ #\n","        open_i += 1  # 확인 끝났으면 조기 이탈(+1), 다음 open_idx 조사 진행\n","        if open_i >= len_open_idx:\n","          break\n","          \n","        # ------ ep_loc ------ #\n","        op_idx = open_idx[open_i]  # open_i 는 i 와 별개로 운영\n","        \n","        if str(res_df.index[op_idx]) == '2022-02-14 14:07:59.999000':\n","          print('2022-02-14 14:07:59.999000 passed')\n","          print(op_idx, i, open_i)\n","\n","        if op_idx < i:  # i = 이전 거래 끝난후의 res_df index - \"거래 종료후 거래 시작\", '<' : 거래 종료시점 진입 가능하다는 의미\n","            continue\n","\n","        if str(res_df.index[op_idx]) == '2022-02-14 14:07:59.999000':\n","          print('2022-02-14 14:07:59.999000 passed')\n","\n","        # ------ dynamic data by ID ------ #\n","        #     1. 해당 id 로 config 재할당해야함\n","        id_idx = id_idx_arr[open_i]\n","        config = config_list[id_idx]\n","        strat_version = config.strat_version\n","        open_side = side_arr[open_i]\n","\n","        side_pos = 'short' if open_side == OrderSide.SELL else 'long'\n","        tp_arr = res_df['{}_tp_{}'.format(side_pos, strat_version)].to_numpy()  # => eptpout arr_list 만들어서 꺼내 사용하면 될 것\n","        point_idxgap_arr = res_df['{}_point_idxgap_{}'.format(side_pos, strat_version)].to_numpy()\n","        \n","        ep_arr = res_df['{}_ep_{}'.format(side_pos, strat_version)].to_numpy()  # Todo - while loop 내에서 to_numpy() 반복하느니, pd_indexing 이 낫지 않을까\n","        out_arr = res_df['{}_out_{}'.format(side_pos, strat_version)].to_numpy()\n","        bias_info_arr = res_df['{}_bias_info_{}'.format(side_pos, strat_version)].to_numpy()  # ex. rolling(entry ~ end)'s high\n","        bias_thresh_arr = res_df['{}_bias_thresh_{}'.format(side_pos, strat_version)].to_numpy()  # ex. close + dc_T20 * 0.5\n","        tr_arr = res_df['{}_tr_{}'.format(side_pos, strat_version)].to_numpy()\n","\n","        # ------ ei_k & point2 ------ #\n","        i = op_idx + 1  # open_signal 이 close_bar.shift(1) 이라고 가정하고 다음 bar 부터 체결확인한다는 의미\n","        if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","            break\n","        \n","        # ------ point1 & 2's tp_j ------ #\n","        point_idxgap = point_idxgap_arr[op_idx]\n","        if np.isnan(point_idxgap):\n","          continue\n","        else:\n","          tp_j = int(op_idx - point_idxgap)\n","\n","          # ------ allow point2 only next to point1 ------ #\n","          # open_arr = res_df['{}_open_{}'.format(side_pos, strat_version)].to_numpy()\n","          # if np.sum(open_arr[tp_j:op_idx]) != 0:\n","          #   continue\n","          \n","        exec_j, ep_j, tp_j, out_j, entry_done, en_p, fee = check_eik_point2_exec_v2(res_df, config, op_idx, tp_j, len_df, open_side, [*ohlc_list, ep_arr], point2_list, ep_out, ep_loc_point2)\n","        i = exec_j\n","        \n","        if not entry_done:\n","            continue\n","\n","        # ------ leverage ------ #\n","        out = out_arr[out_j]  # lvrg_set use out on out_j\n","        leverage = lvrg_set(res_df, config, open_side, en_p, out, fee)  # res_df 변수 사용됨 - 주석 처리 된 상태일뿐\n","        if leverage is None:\n","            continue\n","\n","        exit_done, cross_on = 0, 0\n","        # ------ check tpout_onexec ------ #\n","        # if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","        if config.ep_set.entry_type == \"LIMIT\":\n","            if config.tp_set.tp_onexec:  # dynamic 은 tp_onexec 사용하는 의미가 없음\n","                tp_j = exec_j\n","            if config.out_set.out_onexec:  # dynamic 은 out_onexec 사용하는 의미가 없음\n","                out_j = exec_j\n","\n","\n","        while 1:\n","            # ------------ exit phase ------------ #\n","            if not config.tp_set.static_tp:  # 앞으로 왠만하면 static 만 사용할 예정\n","                tp_j = i\n","            if not config.out_set.static_out:\n","                out_j = i\n","\n","            # ------------ tp ------------ #\n","            if not config.tp_set.non_tp and i != exec_j:\n","                exit_done, ex_p, fee = check_limit_tp_exec(res_df, config, open_i, i, tp_j, len_df, fee, open_side, exit_done, [*ohlc_list, [tp_arr]])  # 여기서는 j -> i 로 변경해야함\n","                # if config.tp_set.tp_type in ['LIMIT']:  # 'BOTH' -> 앞으로는, LIMIT 밖에 없을거라 주석처리함\n","                # if not exit_done and config.tp_set.tp_type in ['MARKET', 'BOTH']:\n","\n","            # ------------ out ------------ #\n","            # ------ signal_out ------ #\n","            if not exit_done:\n","              exit_done, cross_on, ex_p, fee = check_market_out_exec(config, open_i, i, len_df, fee, open_side, cross_on, exit_done, [np_timeidx, *market_data_list])\n","            # ------ hl_out ------ #\n","            if config.out_set.hl_out != \"None\":\n","              if not exit_done:  # and i != len_df - 1:                \n","                  exit_done, ex_p, fee = check_out(config, open_i, i, out_j, len_df, fee, open_side, exit_done, [*ohlc_list, out_arr])\n","\n","            if exit_done:  # 이 phase 는 exit_phase 뒤에도 있어야할 것 - entry_done var. 사용은 안하겠지만\n","                # ------ append dynamic vars. ------ #\n","                point1_list.append(tp_j)\n","                valid_openi_list.append(open_i)  # side, zone, start_ver arr 모두 openi_list 로 접근하기 위해 open_i 를 담음\n","                pair_idx_list.append([exec_j, i])  # entry & exit (체결 기준임)\n","                pair_price_list.append([en_p, ex_p])\n","                lvrg_list.append(leverage)\n","                fee_list.append(fee)\n","                tpout_list.append([tp_arr[tp_j], out_arr[out_j]])  # for tpout_line plot_check\n","                # bias_list.append([bias_info_arr[exec_j], bias_thresh_arr[exec_j]])  # backtest 에서만 가능한 future_data 사용\n","                bias_list.append([bias_info_arr[exec_j], tp_arr[tp_j]])  # bias_info 는 entry_idx 부터 & tp = bias_thresh \n","                tr_list.append(tr_arr[op_idx])\n","\n","                # open_i += 1  # 다음 open_idx 조사 진행\n","                break\n","\n","            # 1. 아래있으면, 체결 기준부터 tp, out 허용\n","            # 2. 위에있으면, entry 다음 tick 부터 exit 허용\n","            i += 1\n","            if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","                break\n","\n","        # if str(res_df.index[i]) == '2022-02-14 10:37:59.999000':\n","        #   print(i)\n","        if side_pos == 'long':\n","          print(str(res_df.index[op_idx]))\n","          print(str(res_df.index[i]))\n","          print()\n","                \n","        if i >= len_df: # or open_i >= len_open_idx:  # res_df 의 last_index 까지 돌아야함\n","            break\n","        else:\n","            continue\n","\n","    return np.array(point1_list), np.array(valid_openi_list), np.array(pair_idx_list), np.array(pair_price_list), np.array(lvrg_list), np.array(fee_list), np.array(tpout_list), np.array(bias_list), np.array(tr_list)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"iAVss_DwcliC"},"outputs":[],"source":["def get_res_v3(res_df, open_info_df, ohlc_list, point2_list, market_data_list, config_list, np_timeidx, funcs, test_ratio=0.3, plot_is=True, signi=False):\n","  # ------------ make open_info_list ------------ #\n","  open_idx = open_info_df.index.to_numpy()\n","  len_df = len(res_df)\n","  s_idx = (open_idx < int(len_df * (1 - test_ratio))) == plot_is\n","  s_open_info_df = open_info_df[s_idx]\n","  s_open_idx = open_idx[s_idx]\n","\n","  open_info_list = [s_open_info_df[col_].to_numpy() for col_ in s_open_info_df.columns]\n","  side_arr, zone_arr, id_arr, id_idx_arr = open_info_list\n","\n","  # ------------ get paired_res ------------ #\n","  start_0 = time.time()\n","  paired_res = en_ex_pairing_v3(res_df, s_open_idx, open_info_list, ohlc_list, point2_list, market_data_list, config_list, np_timeidx, funcs)\n","  # valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr = paired_res\n","  print(\"en_ex_pairing elapsed time :\", time.time() - start_0)  #  0.37 --> 0.3660471439361572 --> 0.21(lesser if)\n","\n","  return paired_res"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"183hY18cpUBu"},"outputs":[],"source":["def get_max_outg_v3(open_side, config, ohlc_list, obj, tpout_arr, epout_0, out_gap):\n","\n","    h, l = ohlc_list[1:3]\n","\n","    np_obj = np.array(obj).T[0]\n","    assert len(np_obj.shape) == 2\n","\n","    # iin == iout 인 경우 분리\n","    # en_idx = np_obj[:, 2]\n","    # ex_idx = np_obj[:, 3]\n","    # equal_idx = en_idx == ex_idx\n","\n","    \n","    _, _, en_idxs, ex_idxs, open_idxs = obj\n","\n","    if open_side == \"SELL\":\n","      idxgs = [np.argwhere(l[int(en_idx):int(en_idx + config.tr_set.bias_info_tick)] <= tpout_arr[i, 0]) for i, en_idx in enumerate(en_idxs)]\n","    else:\n","      idxgs = [np.argwhere(h[int(en_idx):int(en_idx + config.tr_set.bias_info_tick)] >= tpout_arr[i, 0]) for i, en_idx in enumerate(en_idxs)]\n","\n","    min_idxg = np.array([gaps.min() if len(gaps) != 0 else np.nan for gaps in idxgs])  # get 최소 idx_gap from en_idx\n","    nan_idx = np.isnan(min_idxg) # .astype(int) -> false swing_bias idx\n","    # min_idxg[nan_idx] = 0  # fill na 0, for idex summation below\n","\n","    if open_side == \"SELL\":      \n","      # max_high = np.array([np.max(h[int(en_idx):int(en_idx + idx_gap + 1)]) for en_idx, idx_gap in zip(en_idxs, min_idxg)]).reshape(-1, 1)  # reshape is important in np boradcasting\n","      # max_high = np.array([np.max(h[int(en_idx):int(en_idx + idx_gap + 1)]) if not np.isnan(idx_gap) else np.max(h[int(en_idx):int(ex_idx + 1)])\n","      max_high = np.array([np.max(h[int(en_idx):int(en_idx + idx_gap + 1)]) if not np.isnan(idx_gap) else np.max(h[int(en_idx):int(en_idx + config.tr_set.bias_info_tick)])\n","                          for en_idx, ex_idx, idx_gap in zip(en_idxs, ex_idxs, min_idxg)]).reshape(-1, 1)  # reshape is important in np boradcasting   # outg 라서, iin + 1 이 아님\n","      max_outg = (max_high - epout_0) / out_gap\n","    else:\n","      # min_low = np.array([np.min(l[int(en_idx):int(en_idx + idx_gap + 1)]) for en_idx, idx_gap in zip(en_idxs, min_idxg)]).reshape(-1, 1)\n","      # min_low = np.array([np.min(l[int(en_idx):int(en_idx + idx_gap + 1)]) if not np.isnan(idx_gap) else np.min(l[int(en_idx):int(ex_idx + 1)])\n","      min_low = np.array([np.min(l[int(en_idx):int(en_idx + idx_gap + 1)]) if not np.isnan(idx_gap) else np.min(l[int(en_idx):int(en_idx + config.tr_set.bias_info_tick)])\n","                          for en_idx, ex_idx, idx_gap in zip(en_idxs, ex_idxs, min_idxg)]).reshape(-1, 1)  # outg 라서, iin + 1 이 아님\n","      max_outg = (epout_0 - min_low) / out_gap # out_idx 포함\n","\n","    return max_outg, open_idxs.astype(int), ~nan_idx.astype(bool).reshape(-1, 1)  # true_bias 의 outg data 만 사용\n","\n","\n","def get_max_outg_v2(open_side, config, ohlc_list, obj, tpout_arr, epout_0, out_gap):\n","\n","    h, l = ohlc_list[1:3]\n","    _, _, en_idxs, _, open_idxs = obj\n","\n","    if open_side == \"SELL\":\n","      idxgs = [np.argwhere(l[int(en_idx):int(en_idx + config.tr_set.bias_info_tick)] <= tpout_arr[i, 0]) for i, en_idx in enumerate(en_idxs)]\n","    else:\n","      idxgs = [np.argwhere(h[int(en_idx):int(en_idx + config.tr_set.bias_info_tick)] >= tpout_arr[i, 0]) for i, en_idx in enumerate(en_idxs)]\n","\n","    min_idxg = np.array([gaps.min() if len(gaps) != 0 else np.nan for gaps in idxgs])  # get 최소 idx_gap from en_idx\n","    nan_idx = np.isnan(min_idxg) # .astype(int)\n","    min_idxg[nan_idx] = 0  # fill na 0, for idex summation below\n","\n","    if open_side == \"SELL\":      \n","      max_high = np.array([np.max(h[int(en_idx):int(en_idx + idx_gap + 1)]) for en_idx, idx_gap in zip(en_idxs, min_idxg)]).reshape(-1, 1)  # reshape is important in np boradcasting\n","      max_outg = (max_high - epout_0) / out_gap\n","    else:\n","      max_low = np.array([np.min(l[int(en_idx):int(en_idx + idx_gap + 1)]) for en_idx, idx_gap in zip(en_idxs, min_idxg)]).reshape(-1, 1)\n","      max_outg = (epout_0 - max_low) / out_gap # out_idx 포함\n","\n","    return max_outg[~nan_idx], open_idxs[~nan_idx].astype(int)  # true_bias 의 outg data 만 사용\n","\n","def get_max_tpg_v2(open_side, ohlc_list, pr_, obj, tp_1, tp_gap):  # much faster\n","\n","    h, l = ohlc_list[1:3]\n","\n","    # en_p = obj[0]\n","    # ex_p = obj[1]\n","\n","    np_obj = np.array(obj).T[0]\n","    assert len(np_obj.shape) == 2\n","\n","    # iin == iout 인 경우 분리\n","    en_idx = np_obj[:, 2]\n","    ex_idx = np_obj[:, 3]\n","    equal_idx = en_idx == ex_idx\n","\n","    if open_side == \"SELL\":\n","        min_low = np.full_like(tp_1, np.nan)\n","        # min_low[~equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)  # start from iin + 1\n","        min_low[~equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)  # start from iin + 1\n","        max_tpg = (tp_1 - min_low) / tp_gap\n","    else:\n","        max_high = np.full_like(tp_1, np.nan)\n","        # max_high[~equal_idx] = np.array([np.max(h[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        max_high[~equal_idx] = np.array([np.max(h[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        max_tpg = (max_high - tp_1) / tp_gap\n","\n","    return max_tpg[pr_ < 1]  # out 된 case 만 tpg 담음\n","    # return max_tpg"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"eCFQfLGBrwj2"},"outputs":[],"source":["titles = public_cols +devided_cols\n","max_plot_outg = 10\n","\n","for title, short_data, long_data in zip(titles, short_datas, long_datas):\n","\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(12, 5))\n","  nrows, ncols = 1, 2\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                          ncols=ncols\n","                          )\n","    \n","  print(len(long_max_outg))\n","\n","  short_plot_idx = short_max_outg <= max_plot_outg\n","  long_plot_idx = long_max_outg <= max_plot_outg  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_open_data = short_data[short_outg_open_idx]\n","  long_open_data = long_data[long_outg_open_idx]\n","  \n","  short_plot_idx *= short_open_data <= 10\n","  long_plot_idx *= long_open_data <= 10 # nan 과 inf 때문에 이 방식 채택\n","\n","  short_plot_idx *= ~np.isnan(short_open_data)\n","  long_plot_idx *= ~np.isnan(long_open_data)  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_plot_idx *= ~np.isinf(short_open_data)\n","  long_plot_idx *= ~np.isinf(long_open_data)  # nan 과 inf 때문에 이 방식 채택\n","  \n","  print(np.sum(long_plot_idx))\n","\n","  plt.subplot(gs[0])\n","  x, y = short_max_outg[short_plot_idx].ravel(), short_open_data[short_plot_idx].ravel()\n","  # plt.bar(x, y, width=0.05)\n","  plt.scatter(x, y)\n","  plt.axvline(0.5, color='red', linewidth=3)\n","  plt.title(\"coef : {:0.3f}\".format(np.corrcoef(-x, y)[0, 1]))\n","  plt.xlim(0, max_plot_outg)\n","\n","  plt.subplot(gs[1])\n","  x, y = long_max_outg[long_plot_idx].ravel(), long_open_data[long_plot_idx].ravel()\n","  # plt.bar(x, y, width=0.05)\n","  plt.scatter(x, y)\n","  plt.axvline(0.5, color='red', linewidth=3)\n","  plt.title(\"coef : {:0.3f}\".format(np.corrcoef(-x, y)[0, 1]))\n","  plt.xlim(0, max_plot_outg)\n","\n","  plt.suptitle(title)\n","  plt.show()\n","\n","  print()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nYDgg3XEt116"},"outputs":[],"source":["short_max_outg, short_outg_open_idx = get_max_outg_v2(\"SELL\", config, ohlc_list, short_obj, short_tpout_arr, short_open_epout_0, short_open_epout_gap)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"19_q_5awv_Uu"},"outputs":[],"source":["strat_version = config.strat_version\n","len_df = len(res_df)\n","short_open_res = np.ones(len_df)\n","long_open_res = np.ones(len_df)\n","\n","short_tp_1_col, short_tp_0_col, short_tp_gap_col = 'short_tp_1_{}'.format(strat_version), 'short_tp_0_{}'.format(strat_version), 'short_tp_gap_{}'.format(strat_version) \n","long_tp_1_col, long_tp_0_col, long_tp_gap_col = 'long_tp_1_{}'.format(strat_version), 'long_tp_0_{}'.format(strat_version), 'long_tp_gap_{}'.format(strat_version) \n","short_epout_1_col, short_epout_0_col, short_epout_gap_col = 'short_epout_1_{}'.format(strat_version), 'short_epout_0_{}'.format(strat_version), 'short_epout_gap_{}'.format(strat_version) \n","long_epout_1_col, long_epout_0_col, long_epout_gap_col = 'long_epout_1_{}'.format(strat_version), 'long_epout_0_{}'.format(strat_version), 'long_epout_gap_{}'.format(strat_version) \n","\n","data_cols = ['open', 'high', 'low']   # Todo - public_indi 이전에 해야할지도 모름 # 'close', 'haopen', 'hahigh', 'halow', 'haclose'\n","tp_cols = [short_tp_1_col, short_tp_0_col, short_tp_gap_col, long_tp_1_col, long_tp_0_col, long_tp_gap_col]   # Todo - public_indi 이전에 해야할지도 모름\n","epout_cols = [short_epout_1_col, short_epout_0_col, short_epout_gap_col, long_epout_1_col, long_epout_0_col, long_epout_gap_col]   # Todo - public_indi 이전에 해야할지도 모름\n","\n","short_tp_1_, short_tp_0_, short_tp_gap_, long_tp_1_, long_tp_0_, long_tp_gap_ = [res_df[col_].to_numpy() for col_ in tp_cols]\n","short_epout_1_, short_epout_0_, short_epout_gap_, long_epout_1_, long_epout_0_, long_epout_gap_ = [res_df[col_].to_numpy() for col_ in epout_cols]\n","open, high, low = [res_df[col_].to_numpy() for col_ in data_cols]\n","\n","short_base = (short_tp_1_ + short_tp_0_) / 2\n","long_base = (long_tp_1_ + long_tp_0_) / 2\n","\n","touch_period = 50\n","\n","short_a_touch = pd.Series(np.where(high >= short_tp_0_, np.arange(len(res_df)), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()  # min -> max\n","short_b_touch = pd.Series(np.where(low <= short_tp_1_, np.arange(len(res_df)), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨\n","\n","short_en_p = (get_line(short_a_touch, short_tp_0_) + get_line(short_b_touch, short_tp_1_)) / 2\n","short_base_b = get_line(short_b_touch, short_base)\n","short_tp_gap_b = get_line(short_b_touch, short_tp_gap_)\n","short_open_res *= (high >= short_base_b) & (short_base_b >= open) & (short_a_touch < short_b_touch) & (short_base_b + config.loc_set.point.base_gap * short_tp_gap_b >= short_base)\n","\n","long_a_touch = pd.Series(np.where(low <= long_tp_0_, np.arange(len(res_df)), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()       \n","long_b_touch = pd.Series(np.where(high >= long_tp_1_, np.arange(len(res_df)), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()\n","\n","long_en_p = (get_line(long_a_touch, long_tp_0_) + get_line(long_b_touch, long_tp_1_)) / 2\n","long_base_b = get_line(long_b_touch, long_base)\n","long_tp_gap_b = get_line(long_b_touch, long_tp_gap_)\n","long_open_res *= (open >= long_base_b) & (long_base_b >= low) & (long_a_touch < long_b_touch) & (long_base_b - config.loc_set.point.base_gap * long_tp_gap_b <= long_base)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1648558797859,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"5X-3R-rSwFDh","outputId":"2053743d-9468-4bd6-c0e8-c2817b448ec6"},"outputs":[{"name":"stdout","output_type":"stream","text":["[ 379.67  379.67  387.17 ... 3145.43 3145.43 3126.73]\n","[ 386.14  386.14  391.39 ... 3158.96 3158.96 3150.79]\n","[ 382.905  382.905  389.28  ... 3152.195 3152.195 3138.76 ]\n"]},{"data":{"text/plain":["0"]},"execution_count":28,"metadata":{},"output_type":"execute_result"}],"source":["print(get_line(long_a_touch, long_tp_0_)[long_open_res.astype(bool)])\n","print(get_line(long_a_touch, long_tp_0_)[long_open_res.astype(bool)])\n","print(get_line(long_b_touch, long_tp_1_)[long_open_res.astype(bool)])\n","print(long_base_b[long_open_res.astype(bool)])\n","np.sum(long_en_p[long_open_res.astype(bool)] != long_base_b[long_open_res.astype(bool)])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yGm3hwHEJ1va"},"outputs":[],"source":["def get_max_tpg(open_side, ohlc_list, pr_, obj_, rtc_gap):  # much faster\n","    if type(obj_) == list:\n","        obj_ = list(zip(*obj_))\n","\n","    h, l = ohlc_list[1:3]\n","\n","    if open_side == \"SELL\":\n","      max_tpg = np.array([ep_ - np.min(l[int(iin):int(iout + 1)]) for ep_, _, iin, iout in obj_]) / rtc_gap # out 포함\n","      # max_outg = np.array([np.max(h[int(iin):int(iout + 1)]) - ep_ for ep_, _, iin, iout in obj_]) / rtc_gap\n","    else:\n","      max_tpg = np.array([np.max(h[int(iin):int(iout + 1)]) - ep_ for ep_, _, iin, iout in obj_]) / rtc_gap\n","      # max_outg = np.array([ep_ - np.min(l[int(iin):int(iout + 1)]) for ep_, _, iin, iout in obj_]) / rtc_gap\n","\n","    return max_tpg[pr_ < 1]  # out 된 case 만 tpg 담음"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"eooryL32-zxp"},"outputs":[],"source":["short_max_tpg = get_max_tpg(\"SELL\", ohlc_list, short_pr, short_obj[:4], short_open_rtc_gap)\n","long_max_tpg = get_max_tpg(\"BUY\", ohlc_list, long_pr, long_obj[:4], long_open_rtc_gap)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yOMiuw7cJYmZ"},"outputs":[],"source":["long_max_tpg"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SrGNSuOjCyPn"},"outputs":[],"source":["def get_pr_v3(open_side, h, l, obj, tpout, lvrg, fee, p_ranges, p_qty, inversion=False):  # --> 여기서 사용하는 ex_p = ex_p\n","\n","    en_p = obj[0]\n","    # ex_p = obj[1]\n","    tp, out = np.split(tpout, 2, axis=1)\n","    len_p = len(p_ranges)\n","    en_ps, tps, outs, lvrgs, fees = [np.tile(arr_, (1, len_p)) for arr_ in [en_p, tp, out, lvrg, fee]]\n","    \n","    np_obj = np.array(obj).T[0]\n","    assert len(np_obj.shape) == 2\n","    \n","    # iin == iout 인 경우 분리\n","    en_idx = np_obj[:, 2]\n","    ex_idx = np_obj[:, 3]\n","    equal_idx = en_idx == ex_idx\n","        \n","    if open_side == \"SELL\":\n","        p_tps = en_ps - (en_ps - tps) * p_ranges\n","        # min_low = np.array([np.min(l[int(iin):int(iout + 1)]) for _, _, iin, iout in list(zip(*obj[:4]))]).reshape(-1, 1)  # -> deprecated, start from iin + 1\n","        min_low = np.full_like(en_p, np.nan)\n","        min_low[~equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1) # start from iin + 1\n","        tp_idx = np.tile(min_low, (1, len_p)) <= p_tps\n","        \n","        # ------ liquidation ------ #\n","        max_high = np.full_like(en_p, np.nan)\n","        max_high[~equal_idx] = np.array([np.max(h[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        liqd = np.nanmin((en_p / max_high - fee - 1) * lvrg + 1)\n","    else:\n","        p_tps = en_ps + (tps - en_ps) * p_ranges\n","        # max_high = np.array([np.max(h[int(iin):int(iout + 1)]) for _, _, iin, iout in list(zip(*obj[:4]))]).reshape(-1, 1)\n","        max_high = np.full_like(en_p, np.nan)\n","        max_high[~equal_idx] = np.array([np.max(h[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        tp_idx = np.tile(max_high, (1, len_p)) >= p_tps\n","        # print(p_tps)\n","        # print(max_high)\n","\n","        # ------ liquidation ------ #\n","        min_low = np.full_like(en_p, np.nan)\n","        min_low[~equal_idx] = np.array([np.min(l[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        liqd = np.nanmin((min_low / en_p - fee - 1) * lvrg + 1)\n","\n","    ex_ps = outs.copy()\n","    ex_ps[tp_idx] = p_tps[tp_idx]\n","\n","    if open_side == \"SELL\":\n","        if not inversion:\n","            pr = ((en_ps / ex_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","        else:\n","            pr = ((ex_ps / en_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","    else:\n","        if not inversion:\n","            # print(fees)\n","            # print(p_qty)\n","            # print(p_qty * fees)\n","            pr = ((ex_ps / en_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","        else:\n","            pr = ((en_ps / ex_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","\n","    return pr.reshape(-1, 1), liqd"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"b5s3Us9VtlXH"},"outputs":[],"source":["p_ranges, p_qty = [0.2, 0.6, 1], [1, 0.0, 0.00]\n","long_pr, long_liqd = get_pr_v3(OrderSide.BUY, h, l, long_obj, long_tpout_arr, long_lvrg_arr, long_fee_arr, p_ranges, p_qty, inversion)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"s1O_gGXVtrtz"},"outputs":[],"source":["long_pr"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HBFh3FJLpYeZ"},"outputs":[],"source":["def liquidation_v2(open_side, data_, obj_, lvrg, fee):  # v1 is deprecated\n","    if type(obj_) == list:\n","        obj = list(zip(*obj_))\n","\n","    np_obj = np.array(obj_).T[0]\n","    assert len(np_obj.shape) == 2\n","    \n","    en_p = obj_[0]\n","\n","    # iin == iout 인 경우 분리\n","    en_idx = np_obj[:, 2]\n","    ex_idx = np_obj[:, 3]\n","    equal_idx = en_idx == ex_idx\n","\n","    if open_side == \"SELL\":\n","        max_high = np.full_like(en_p, np.nan)\n","        max_high[~equal_idx] = np.array([np.max(data_[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        return np.nanmin((en_p / max_high - fee - 1) * lvrg + 1)\n","    else:\n","        min_low = np.full_like(en_p, np.nan)\n","        min_low[~equal_idx] = np.array([np.min(data_[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        return np.nanmin((min_low / en_p - fee - 1) * lvrg + 1)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":527,"status":"ok","timestamp":1648462727490,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"GtajcCM49AGr","outputId":"a0c857d5-83db-407c-f0dd-bb906de72f20"},"outputs":[{"name":"stdout","output_type":"stream","text":["(2005,)\n","(1724,)\n","0.9338351565411452\n","0.9832121539680836\n"]}],"source":["short_liqd = liquidation_v2(OrderSide.SELL, h, short_obj[:4], short_lvrg_arr, short_fee_arr)\n","long_liqd = liquidation_v2(OrderSide.BUY, l, long_obj[:4], long_lvrg_arr, long_fee_arr)\n","\n","print(short_liqd)\n","print(long_liqd)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"eMuRjqo_evR1"},"outputs":[],"source":["def liquidation_v2(open_side, data_, obj_, lvrg, fee):  # much faster\n","\n","    # if type(obj_) == list:\n","    #     obj_ = \n","    # if open_side == \"SELL\":\n","    #     return np.min([(ep_ / np.max(data_[int(iin):int(iout + 1)]) - fee - 1) * lvrg + 1 for ep_, _, iin, iout in obj_])\n","    # else:\n","    #     return np.min([(np.min(data_[int(iin):int(iout + 1)]) / ep_ - fee - 1) * lvrg + 1 for ep_, _, iin, iout in obj_])\n","\n","    np_obj = np.array(obj).T[0]\n","    assert len(np_obj.shape) == 2\n","\n","    en_p = obj_[0]  # 2d\n","\n","    print(np_obj.shape)\n","    \n","    # iin == iout 인 경우 분리\n","    en_idx = np_obj[:, 2]\n","    ex_idx = np_obj[:, 3]\n","    equal_idx = en_idx == ex_idx\n","    print(equal_idx)\n","        \n","    if open_side == \"SELL\":\n","        max_high = en_p.copy()\n","        max_high[~equal_idx] = np.array([np.max(data_[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)  # equal_idx 는 liqd 를 측정하지 않음\n","        return np.min((en_p / max_high - fee - 1) * lvrg + 1)\n","    else:\n","        min_low = en_p.copy()\n","        print(min_low)\n","\n","        # min_low[~equal_idx] = np.array([np.min(data_[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        print(data_)\n","        # res = np.array([np.min(data_[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        res = np.min([(np.min(data_[int(iin):int(iout)]) / ep_ - fee - 1) * lvrg + 1 for ep_, _, iin, iout in list(zip(*obj_)) if iin != iout])\n","        # print(min_low[~equal_idx])\n","        print(res)\n","        return np.min((min_low / en_p - fee - 1) * lvrg + 1)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"uLMEbR_vij3L"},"outputs":[],"source":["h, l = ohlc_list[1:3]\n","long_liqd = liquidation_v2(OrderSide.BUY, l, long_obj[:4], long_lvrg_arr, long_fee_arr)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ykrPUuxiXlLG"},"outputs":[],"source":["# np.array(long_obj)[:,(en_idx == ex_idx)].shape\n","long_np_obj = np.array(long_obj).T[0]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":401,"status":"ok","timestamp":1648455838651,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"MZiMIYLln8bB","outputId":"3a2f1100-f1b1-4ad9-da2f-d50708a60ccd"},"outputs":[{"data":{"text/plain":["array([[   383.005,    381.73 ,     60.   ,     61.   ],\n","       [   386.33 ,    384.9  ,    105.   ,    107.   ],\n","       [   386.43 ,    385.24 ,    240.   ,    243.   ],\n","       ...,\n","       [  3806.905,   3863.8  , 679660.   , 679934.   ],\n","       [  3953.845,   3944.   , 680228.   , 680255.   ],\n","       [  4102.28 ,   4089.18 , 685040.   , 685167.   ]])"]},"execution_count":507,"metadata":{},"output_type":"execute_result"}],"source":["long_np_obj[~equal_idx, :4]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"r8rHPFeHm1DQ"},"outputs":[],"source":["# for _, _, iin, iout in long_np_obj[~equal_idx, :4]:\n","#   print(iin, iout)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":390,"status":"ok","timestamp":1648453058391,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"Uyjsp9EyZ4GF","outputId":"b15069ba-0057-4665-916c-f4417979cb88"},"outputs":[{"data":{"text/plain":["(1724,)"]},"execution_count":446,"metadata":{},"output_type":"execute_result"}],"source":["# long_np_obj.shape\n","# # long_np_obj.T[0]\n","long_np_obj\n","\n","en_idx = long_np_obj[:, 2]\n","ex_idx = long_np_obj[:, 3]\n","\n","# print(en_idx[:5])\n","# print(ex_idx[:5])\n","# np.sum(en_idx == ex_idx)\n","equal_idx = en_idx == ex_idx\n","equal_idx.shape\n","# en_idx"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_GrZgkaSZC2K"},"outputs":[],"source":["# # for items in zip(long_np_obj[:4]):\n","# # for items in list(zip(*long_obj[:4])):\n","# for items in long_np_obj:\n","#   print(items)\n","#   break\n","equal_idx = equal_idx.ravel()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"R1YRROdJYWkH"},"outputs":[],"source":["min_low = np.full_like(en_idx, np.nan)\n","min_low[~equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in long_np_obj[~equal_idx, :4]]).reshape(-1, 1)  # reshape for shape match\n","# min_low[equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in long_np_obj[equal_idx, :4]]).reshape(-1, 1)  # reshape for shape match # np.nan 은 비교에서 무조건 False 즉, out 처리될 것"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1648454521907,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"jFxV8dami0wn","outputId":"896b3188-7179-4f33-c9e5-f259f5458436"},"outputs":[{"data":{"text/plain":["-1.7472363139317024"]},"execution_count":483,"metadata":{},"output_type":"execute_result"}],"source":["long_liqd"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mMsDJDmO5qNw"},"outputs":[],"source":["short_outg_plot_data = short_max_outg[short_max_outg <= max_plot_outg]  # nan 과 inf 때문에 이 방식 채택\n","long_outg_plot_data = long_max_outg[long_max_outg <= max_plot_outg]\n","print(\"len(short_outg_plot_data) :\", len(short_outg_plot_data))\n","print(\"len(long_outg_plot_data) :\", len(long_outg_plot_data))\n","\n","plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(12, 5))\n","nrows, ncols = 1, 2\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        )\n","  \n","plt.subplot(gs[0])\n","kde_plot_v2(*np.unique(short_outg_plot_data, return_counts=True))\n","\n","plt.subplot(gs[1])\n","kde_plot_v2(*np.unique(long_outg_plot_data, return_counts=True))\n","\n","plt.suptitle('outg')\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BjxCPi96JbfS"},"outputs":[],"source":["# --- tp > ep > out 검사 --- #\n","long_tp, long_out = np.split(long_tpout_arr, 2, axis=1)\n","long_ep = long_obj[0]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Q_wH04vCJzYu"},"outputs":[],"source":["print(np.sum((long_tp <= long_ep)))\n","print(np.sum((long_ep <= long_out)))\n","print(len((long_ep <= long_out)))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YlENTUSXhBfa"},"outputs":[],"source":["def kde_plot_v2(v, c, kde_factor=0.15, num_samples=100):\n","\n","  # start_0 = time.time()\n","  kde = stats.gaussian_kde(v,weights=c,bw_method=kde_factor)\n","  kdx = np.linspace(v.min(),v.max(),num_samples)\n","  kdy = kde(kdx)\n","  ticks_per_sample = (kdx.max() - kdx.min()) / num_samples\n","  # print(\"ticks_per_sample :\", ticks_per_sample)  # sample 당 가격\n","  # print(\"kdy elapsed_time :\", time.time() - start_0)\n","\n","  peaks,_ = signal.find_peaks(kdy)\n","  pkx = kdx[peaks]\n","  pky = kdy[peaks]\n","  print(\"pkx :\", pkx)\n","\n","  # plt.figure(figsize=(10,5))\n","  plt.hist(v, weights=c, bins=num_samples, alpha=.8, edgecolor='black')\n","  plt.plot(kdx, kdy, color='white')\n","  plt.plot(pkx, pky, 'bo', color='yellow')\n","  # plt.show()\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZkbuBX1Ygzll"},"outputs":[],"source":["def get_max_outg(open_side, config, ohlc_list, obj, tpout_arr, rtc_gap):\n","\n","    h, l = ohlc_list[1:3]    \n","    en_p, _, en_idxs, _, open_idxs = obj\n","\n","    if open_side == \"SELL\":\n","      idxgs = [np.argwhere(l[int(en_idx) : int(en_idx + config.tr_set.bias_info_tick)] <= tpout_arr[i, 0]) for i, en_idx in enumerate(en_idxs)]\n","    else:\n","      idxgs = [np.argwhere(h[int(en_idx) : int(en_idx + config.tr_set.bias_info_tick)] >= tpout_arr[i, 0]) for i, en_idx in enumerate(en_idxs)]\n","\n","    min_idxg = np.array([gaps.min() if len(gaps) != 0 else np.nan for gaps in idxgs])  # get 최소 idx_gap from en_idx\n","    nan_idx = np.isnan(min_idxg) # .astype(int)\n","    min_idxg[nan_idx] = 0  # fill na 0, for idex summation below\n","\n","    if open_side == \"SELL\":\n","      max_outg = np.array([np.max(h[int(en_idx):int(en_idx + idx_gap + 1)]) - ep_ for en_idx, idx_gap, ep_ in zip(en_idxs, min_idxg, en_p)]) / rtc_gap\n","    else:\n","      max_outg = np.array([ep_ - np.min(l[int(en_idx):int(en_idx + idx_gap + 1)]) for en_idx, idx_gap, ep_ in zip(en_idxs, min_idxg, en_p)]) / rtc_gap # out_idx 포함\n","\n","    return max_outg[~nan_idx], open_idxs[~nan_idx].astype(int)  # true_bias 의 outg data 만 사용"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":479,"status":"ok","timestamp":1648380698566,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"mYQgnD9CgC8b","outputId":"e316919a-0e22-4266-ef24-185284cc8cb5"},"outputs":[{"name":"stdout","output_type":"stream","text":["[ 390.58  387.91  344.81  346.25  334.7   351.81  366.07  367.09  372.83  372.08  384.92  387.79  374.12  365.82  364.87  359.06  386.58  381.46  384.71  385.    383.9   384.18  381.18  369.86  373.5   374.17  341.4   344.5   345.29  342.93  343.49  340.7   320.3   345.3   349.59  355.    352.    354.    357.96  358.21  355.    352.47  355.18  346.41  347.14  348.54  346.62  348.28  347.38  348.19  351.74  352.98  339.87  339.64  339.99  339.46  349.97  368.    375.85  374.3   367.2   383.8   386.25  385.31  384.97  377.3   377.85  380.28  378.    365.92  366.9   367.9   368.6   369.61  368.48  369.09  372.72  379.    379.17  375.2   379.09  380.52  397.42  417.13  418.05  413.6   412.26  411.7   408.6   406.29  405.5   383.74  388.2   386.95  387.    386.97  387.86  378.69  383.58  459.06  437.    445.    445.99  464.27  463.1   464.96  463.3   456.76  463.89  462.3   458.31  459.37  461.31  470.28  475.    591.54  601.95  619.3   609.46  573.21  512.97  554.39  588.37  593.83  571.43  593.31  589.71  552.62  551.44  563.9   573.    568.68  562.72  556.82  565.49  581.    592.74  651.18  644.2   646.4   607.89  606.5   615.    612.8   614.27  582.76  610.64  704.97  753.49  741.36  736.2   996.   1694.7  1686.52 1859.07 1818.7  1892.84 1930.29 1959.36 1639.28 1565.   1565.   1565.   1565.   1565.   1565.   1565.   1565.   1565.   1565.   1711.55 1783.83 1821.46 1834.   1623.93 1979.92 2062.   2204.69 2527.76 2720.47 3532.96 3890.   2778.64 2600.   2331.29 2175.   2140.   1963.91 1753.24 1969.43 2045.5  2158.   2250.   2280.78 2316.37 3180.   3141.93 3276.   3243.   3271.   3329.56 3236.   3275.94 3184.99 3410.   3963.04 3305.   3260.94 3636.28 3419.99 3400.   3383.32 3558.82 3499.   3503.68 4528.   4579.46 4492.13 4231.98 4373.8  3794.77 4082.93 4055.41 3782.   3745.   3163.98 3227.16 3302.58 3105.25 3078.   2621.06 2548.   2619.76 3116.4 ]\n","[ 390.58  387.91  344.81  346.25  334.7   351.81  366.07  367.09  372.83  372.08  384.92  387.79  374.12  365.82  364.87  359.06  386.58  381.46  384.71  385.    383.9   384.18  381.18  369.86  373.5   374.17  341.4   344.5   345.29  342.93  343.49  340.7   320.3   345.3   349.59  355.    352.    354.    357.96  358.21  355.    352.47  355.18  346.41  347.14  348.54  346.62  348.28  347.38  348.19  351.74  352.98  339.87  339.64  339.99  339.46  349.97  368.    375.85  374.3   367.2   383.8   386.25  385.31  384.97  377.3   377.85  380.28  378.    365.92  366.9   367.9   368.6   369.61  368.48  369.09  372.72  379.    379.17  375.2   379.09  380.52  397.42  417.13  418.05  413.6   412.26  411.7   408.6   406.29  405.5   383.74  388.2   386.95  387.    386.97  387.86  378.69  383.58  459.06  437.    445.    445.99  464.27  463.1   464.96  463.3   456.76  463.89  462.3   458.31  459.37  461.31  470.28  475.    591.54  601.95  619.3   609.46  573.21  512.97  554.39  588.37  593.83  571.43  593.31  589.71  552.62  551.44  563.9   573.    568.68  562.72  556.82  565.49  581.    592.74  651.18  644.2   646.4   607.89  606.5   615.    612.8   614.27  582.76  610.64  704.97  753.49  741.36  736.2   996.   1694.7  1686.52 1859.07 1818.7  1892.84 1930.29 1959.36 1639.28 1565.   1565.   1565.   1565.   1565.   1565.   1565.   1565.   1565.   1565.   1711.55 1783.83 1821.46 1834.   1623.93 1979.92 2062.   2204.69 2527.76 2720.47 3532.96 3890.   2778.64 2600.   2331.29 2175.   2140.   1963.91 1753.24 1969.43 2045.5  2158.   2250.   2280.78 2316.37 3180.   3141.93 3276.   3243.   3271.   3329.56 3236.   3275.94 3184.99 3410.   3963.04 3305.   3260.94 3636.28 3419.99 3400.   3383.32 3558.82 3499.   3503.68 4528.   4579.46 4492.13 4231.98 4373.8  3794.77 4082.93 4055.41 3782.   3745.   3163.98 3227.16 3302.58 3105.25 3078.   2621.06 2548.   2619.76 3116.4 ]\n","234\n"]}],"source":["strat_version = config.strat_version\n","long_open_res = res_df['long_open_{}'.format(strat_version)].to_numpy().astype(bool)\n","\n","res_df['long_tp_{}'.format(strat_version)].to_numpy()[long_open_res]\n","res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res]\n","# res_df['long_ep_{}'.format(strat_version)].to_numpy()\n","# long_open_res\n","# res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res]\n","# np.sum(res_df['long_tp_{}'.format(strat_version)].to_numpy()[long_open_res] <= res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res])\n","# res = res_df['long_tp_{}'.format(strat_version)].to_numpy()[long_open_res] > res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res]\n","res = res_df['long_tp_{}'.format(strat_version)].to_numpy()[long_open_res] <= res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res]\n","\n","print(res_df['long_tp_{}'.format(strat_version)].to_numpy()[long_open_res][res])\n","print(res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res][res])\n","print(len(res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res][res]))\n","\n","# res = res_df['long_tp_{}'.format(strat_version)].to_numpy() > res_df['long_ep_{}'.format(strat_version)].to_numpy()\n","# res = res_df['long_ep_{}'.format(strat_version)].to_numpy() > res_df['long_out_{}'.format(strat_version)].to_numpy()\n","\n","# print(res_df['long_tp_{}'.format(strat_version)].to_numpy()[res])\n","# print(res_df['long_ep_{}'.format(strat_version)].to_numpy()[res])\n","# print(res_df['long_out_{}'.format(strat_version)].to_numpy()[res])\n","# print(len(res_df['long_ep_{}'.format(strat_version)].to_numpy()[res]))\n","# print(len(res_df['long_out_{}'.format(strat_version)].to_numpy()[res]))\n","\n","# assert np.sum(res_df['long_tp_{}'.format(strat_version)].to_numpy()[long_open_res] <= res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res]) == 0\n","# assert np.sum(res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res] <= res_df['long_out_{}'.format(strat_version)].to_numpy()[long_open_res]) == 0"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"57mFruHtCmmh"},"outputs":[],"source":["# fig, axs=plt.subplots(1,2,sharey=True,tight_layout=True)\n","# axs[0].hist(short_max_outg,bins=100)\n","# axs[1].hist(abs_ratio_5T[short_outg_open_idx],bins=100)\n","# plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"40MdGjCY1YtH"},"outputs":[],"source":["def kde_plot(plot_data, kde_factor=0.15, num_samples=100):\n","  v, c = np.unique(plot_data, return_counts=True)  \n","\n","  # start_0 = time.time()\n","  kde = stats.gaussian_kde(v,weights=c,bw_method=kde_factor)\n","  kdx = np.linspace(v.min(),v.max(),num_samples)\n","  kdy = kde(kdx)\n","  ticks_per_sample = (kdx.max() - kdx.min()) / num_samples\n","  # print(\"ticks_per_sample :\", ticks_per_sample)  # sample 당 가격\n","  # print(\"kdy elapsed_time :\", time.time() - start_0)\n","\n","  peaks,_ = signal.find_peaks(kdy)\n","  pkx = kdx[peaks]\n","  pky = kdy[peaks]\n","\n","  # plt.figure(figsize=(10,5))\n","  plt.hist(v, weights=c, bins=num_samples, alpha=.8, edgecolor='black')\n","  plt.plot(kdx, kdy, color='white')\n","  plt.plot(pkx, pky, 'bo', color='yellow')\n","  # plt.show()\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"v2k6D7UceIK4"},"outputs":[],"source":["v, c = np.unique(long_tpg_plot, return_counts=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":424,"status":"ok","timestamp":1648269301273,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"bJe1fSGFdUcj","outputId":"991eb570-3633-49b7-9a91-02cb5d4fba43"},"outputs":[{"name":"stdout","output_type":"stream","text":["ticks_per_sample : 0.047098781436344224\n","kdy elapsed_time : 0.013733863830566406\n"]}],"source":["kde_factor = 0.15\n","num_samples = 100\n","\n","start_0 = time.time()\n","kde = stats.gaussian_kde(v,weights=c,bw_method=kde_factor)\n","kdx = np.linspace(v.min(),v.max(),num_samples)\n","kdy = kde(kdx)\n","ticks_per_sample = (kdx.max() - kdx.min()) / num_samples\n","print(\"ticks_per_sample :\", ticks_per_sample)  # sample 당 가격\n","print(\"kdy elapsed_time :\", time.time() - start_0)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":320},"executionInfo":{"elapsed":954,"status":"ok","timestamp":1648269365137,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"1Cby5teZdUcj","outputId":"db5fd5b3-4617-42f9-877c-c4b9b82adcef"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 720x360 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["peaks,_ = signal.find_peaks(kdy)\n","pkx = kdx[peaks]\n","pky = kdy[peaks]\n","\n","plt.figure(figsize=(10,5))\n","plt.hist(v, weights=c, bins=num_samples, alpha=.8, edgecolor='black')\n","plt.plot(kdx, kdy, color='white')\n","plt.plot(pkx, pky, 'bo', color='yellow')\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CfiSD0uwcNIZ"},"outputs":[],"source":["def max_tpout_gap(open_side, ohlc_list, obj_, rtc_gap):  # much faster\n","    if type(obj_) == list:\n","        obj_ = list(zip(*obj_))\n","\n","    h, l = ohlc_list[1:3]\n","\n","    if open_side == \"SELL\":\n","      max_tpg = np.array([ep_ - np.min(l[int(iin):int(iout + 1)]) for ep_, _, iin, iout in obj_]) / rtc_gap # out 포함\n","      max_outg = np.array([np.max(h[int(iin):int(iout + 1)]) - ep_ for ep_, _, iin, iout in obj_]) / rtc_gap\n","    else:\n","      max_tpg = np.array([np.max(h[int(iin):int(iout + 1)]) - ep_ for ep_, _, iin, iout in obj_]) / rtc_gap\n","      max_outg = np.array([ep_ - np.min(l[int(iin):int(iout + 1)]) for ep_, _, iin, iout in obj_]) / rtc_gap\n","\n","    return max_tpg, max_outg"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"r82KfqFqi9tp"},"outputs":[],"source":["short_open_res = np.ones(len(res_df))\n","\n","strat_version = config.strat_version\n","\n","short_rtc_1_col, short_rtc_0_col, short_rtc_gap_col = 'short_rtc_1_{}'.format(strat_version), 'short_rtc_0_{}'.format(strat_version), 'short_rtc_gap_{}'.format(strat_version) \n","long_rtc_1_col, long_rtc_0_col, long_rtc_gap_col = 'long_rtc_1_{}'.format(strat_version), 'long_rtc_0_{}'.format(strat_version), 'long_rtc_gap_{}'.format(strat_version) \n","\n","short_rtc_1_col, short_rtc_0_col, short_rtc_gap_col = 'short_rtc_1_{}'.format(strat_version), 'short_rtc_0_{}'.format(strat_version), 'short_rtc_gap_{}'.format(strat_version) \n","long_rtc_1_col, long_rtc_0_col, long_rtc_gap_col = 'long_rtc_1_{}'.format(strat_version), 'long_rtc_0_{}'.format(strat_version), 'long_rtc_gap_{}'.format(strat_version) \n","\n","data_cols = ['open', 'high', 'low']   # Todo - public_indi 이전에 해야할지도 모름 # 'close', 'haopen', 'hahigh', 'halow', 'haclose'\n","rtc_cols = [short_rtc_1_col, short_rtc_0_col, short_rtc_gap_col, long_rtc_1_col, long_rtc_0_col, long_rtc_gap_col]   # Todo - public_indi 이전에 해야할지도 모름\n","\n","short_rtc_1_, short_rtc_0_, short_rtc_gap_, long_rtc_1_, long_rtc_0_, long_rtc_gap_ = [res_df[col_].to_numpy() for col_ in rtc_cols]\n","open, high, low = [res_df[col_].to_numpy() for col_ in data_cols]\n","short_base = (short_rtc_1_ + short_rtc_0_) / 2\n","long_base = (long_rtc_1_ + long_rtc_0_) / 2\n","# back_ha_o = res_df['haopen'].shift(1).to_numpy()\n","# back_ha_c = res_df['haclose'].shift(1).to_numpy()\n","\n","touch_period = 50\n","# short_open_res *= (back_ha_c >= back_ha_o) & (ha_o > ha_c)\n","# short_open_res *= ha_o == ha_h\n","# short_open_res *= np_timeidx % tf_entry == tf_entry - 1     \n","# short_a_touch = pd.Series(np.where(high >= short_rtc_0_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()  # min -> max\n","short_a_touch = pd.Series(np.where((high >= short_base_b) & (short_base_b >= open), np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).min().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨\n","short_b_touch = pd.Series(np.where(low <= short_rtc_1_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨\n","\n","short_a_touch_line = get_line(short_a_touch, short_rtc_0_)\n","short_b_touch_line = get_line(short_b_touch, short_rtc_1_)\n","short_en_p = (short_a_touch_line + short_b_touch_line) / 2\n","short_base_b = get_line(short_b_touch, short_base)\n","short_rtc_gap_b = get_line(short_b_touch, short_rtc_gap_)\n","short_open_res *= (high >= short_base_b) & (short_base_b >= open) & (short_a_touch < short_b_touch) & (short_base_b + config.loc_set.point.base_gap * short_rtc_gap_b >= short_base)\n","\n","res_df['short_open_{}'.format(strat_version)] = short_open_res"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":366,"status":"ok","timestamp":1647925782107,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"CgD4-ZKW11MQ","outputId":"c126aabb-cb41-4392-a80c-53971b146c2c"},"outputs":[{"name":"stdout","output_type":"stream","text":["[ 377.545  378.085  379.015 ... 3148.91  3148.91  3148.91 ]\n","[ 377.545  378.085  379.015 ... 3148.91  3148.91  3148.91 ]\n"]},{"data":{"text/plain":["0"]},"execution_count":29,"metadata":{},"output_type":"execute_result"}],"source":["# short_en_p == short_base_b\n","print(short_en_p[~np.isnan(short_en_p)])\n","print(short_base_b[~np.isnan(short_en_p)])\n","\n","np.sum((short_en_p[~np.isnan(short_en_p)] == short_base_b[~np.isnan(short_en_p)]) == 0) # => why ..?"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":310,"status":"ok","timestamp":1647565975814,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"AIt9z1NRj5bJ","outputId":"c1b83639-7041-4745-dacd-d9cff49a205d"},"outputs":[{"name":"stdout","output_type":"stream","text":["[2934.59  2934.59  3028.59  3028.59  3028.59  3026.075 3026.075 3016.09  3014.67  3014.4   3014.4   3014.4   3014.4   3014.4   3014.4   3014.395 3014.315 3014.315 3030.235 3030.235 3030.235 3030.235 3051.18  3051.18  3051.18  3077.275 3076.77  3090.945 3105.1   3105.1   3105.1   3105.1   3105.1   3105.1   3099.205 3099.205 3099.205 3105.495 3105.495 3109.615 3127.43  3123.795 3123.795 3123.795 3112.695 3122.715 3122.715 3122.715 3122.715 3115.2   3114.93  3097.035 3115.31  3115.31  3114.245 3114.15  3114.15  3114.15  3112.2   3110.75  3110.75  3112.16  3112.16  3134.39  3134.39  3134.39  3127.905 3127.905 3127.905 3127.905 3128.595 3128.595 3138.59  3138.59  3147.47  3134.205 3133.04  3134.155 3131.105 3131.105 3131.105 3065.94  3065.94  3065.94  3065.51  3068.    3079.33  3079.33  3079.33  3099.805 3169.595 3169.595 3169.595 3169.04  3140.395 3140.395 3140.395 3148.91  3148.91  3148.91 ]\n","[    nan     nan     nan ... 3158.68 3158.68 3158.68]\n","[    nan     nan     nan ... 763812. 763812. 763812.]\n","[ 388.18  388.18  388.18 ... 3158.68 3158.68 3158.68]\n"]}],"source":["true_idx = short_open_res == 1\n","\n","# print(((short_a_touch_line + short_b_touch_line) / 2)[true_idx][-100:])\n","print(short_en_p[true_idx][-100:])\n","# print(short_a_touch_line[true_idx][-100:])\n","\n","print(short_a_touch_line)\n","print(short_a_touch)\n","print(short_rtc_0_)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2,"status":"ok","timestamp":1647565931392,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"GXbSWec4ik3g","outputId":"547b0fc1-0e35-4387-e891-a3af42c18476"},"outputs":[{"name":"stdout","output_type":"stream","text":["[    nan     nan     nan ... 3158.68 3158.68 3158.68]\n","[    nan     nan     nan ... 763812. 763812. 763812.]\n","[ 388.18  388.18  388.18 ... 3158.68 3158.68 3158.68]\n"]}],"source":["short_a_touch_line = get_line(short_a_touch, short_rtc_0_)\n","short_b_touch_line = get_line(short_b_touch, short_rtc_1_)\n","short_en_p = (short_a_touch_line + short_b_touch_line) / 2\n","\n","# print(((short_a_touch_line + short_b_touch_line) / 2)[true_idx][-100:])\n","# print(short_en_p[true_idx][-100:])\n","\n","print(short_a_touch_line)\n","print(short_a_touch)\n","print(short_rtc_0_)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fx4iA-T1k6GS"},"outputs":[],"source":["def get_line(touch, rtc_):\n","  touch_copy = touch.copy()\n","  touch_line = rtc_.copy()\n","\n","  nan_idx = np.isnan(touch_copy)\n","  touch_copy[nan_idx] = 0   # for indexing array\n","  touch_line[touch_copy.astype(int)]\n","  touch_line[nan_idx] = np.nan   # for true comp.\n","\n","  return touch_line"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Pk8i59oM4CFZ"},"outputs":[],"source":["# print(short_b_touch[-100:])\n","# print(short_base_b[-100:])\n","true_idx = short_open_res == 1\n","short_a_touch_line = get_line(short_a_touch, short_rtc_0_)\n","short_b_touch_line = get_line(short_b_touch, short_rtc_1_)\n","\n","print(len(short_a_touch_line))\n","print(len(short_b_touch_line))\n","print(((short_a_touch_line + short_b_touch_line) / 2)[true_idx][-100:])\n","\n","print(short_a_touch_line[true_idx][-100:])\n","print(short_b_touch_line[true_idx][-100:])\n","print(short_open_res[true_idx][-100:])\n","print(short_en_p[true_idx][-100:])"]},{"cell_type":"markdown","metadata":{"id":"8b4SbvPrAPR1"},"source":["##### partial"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"M4MB0mryCiHC"},"outputs":[],"source":["def get_pr_v2(open_side, h, l, obj, tpout, lvrg, fee, p_ranges, p_qty, inversion=False):  # --> 여기서 사용하는 ex_p = ex_p\n","\n","    en_p = obj[0]\n","    # ex_p = obj[1]\n","    tp, out = np.split(tpout, 2, axis=1)\n","    len_p = len(p_ranges)\n","    en_ps, tps, outs, lvrgs, fees = [np.tile(arr_, (1, len_p)) for arr_ in [en_p, tp, out, lvrg, fee]]\n","    \n","    np_obj = np.array(obj).T[0]\n","    assert len(np_obj.shape) == 2\n","    \n","    # iin == iout 인 경우 분리\n","    en_idx = np_obj[:, 2]\n","    ex_idx = np_obj[:, 3]\n","    equal_idx = en_idx == ex_idx\n","        \n","    if open_side == \"SELL\":\n","        p_tps = en_ps - (en_ps - tps) * p_ranges\n","        # min_low = np.array([np.min(l[int(iin):int(iout + 1)]) for _, _, iin, iout in list(zip(*obj[:4]))]).reshape(-1, 1)  # -> deprecated, start from iin + 1\n","        min_low = np.full_like(en_p, np.nan)\n","        min_low[~equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        tp_idx = np.tile(min_low, (1, len_p)) <= p_tps\n","    else:\n","        p_tps = en_ps + (tps - en_ps) * p_ranges\n","        # max_high = np.array([np.max(h[int(iin):int(iout + 1)]) for _, _, iin, iout in list(zip(*obj[:4]))]).reshape(-1, 1)\n","        max_high = np.full_like(en_p, np.nan)\n","        max_high[~equal_idx] = np.array([np.max(h[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        tp_idx = np.tile(max_high, (1, len_p)) >= p_tps\n","\n","    ex_ps = outs.copy()\n","    ex_ps[tp_idx] = p_tps[tp_idx]\n","\n","    if open_side == \"SELL\":\n","        if not inversion:\n","            pr = ((en_ps / ex_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","        else:\n","            pr = ((ex_ps / en_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","    else:\n","        if not inversion:\n","            pr = ((ex_ps / en_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","        else:\n","            pr = ((en_ps / ex_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","\n","    return pr.reshape(-1, 1)"]},{"cell_type":"markdown","metadata":{"id":"JNQxkb06ZdTe"},"source":["## plot_check_v2"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hpkqOliMxSIU"},"outputs":[],"source":["# res_df = wave_range_v4(res_df, 20, ltf_df=None, touch_lbperiod=50)\n","# res_df = bb_width_v2(res_df, period=60, multiple=1)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"A6QSF9COaHO5"},"outputs":[],"source":["# ------------------ plot_config ------------------ #\n","save_mode = 0\n","front_plot = 3    # 0 : whole, 1 : open, 2 : ep_tick, 3 : tp_tick, 4 : bias_tick\n","bias_plot = 0     # = swing_bias -> precision check : 1, recall check : 0\n","pr_descend = 1    # 1 -> 내림차순\n","position = 1      # -1 / 1, 0 (short / long)\n","# tf_plot = 1       # true - false plot\n","# pr_sort = 1     # -> default 1,  이상한 체결 확인하기 좋음\n","# wl_case = 1     # 1 / -1 / 0 (win loss study) --> oid\n","\n","x_max = 500\n","x_margin_mult = 1/30\n","y_margin_mult = 1/30  # 0 \n","\n","prev_plotsize = 100 #  100 20\n","post_plotsize = 60\n","if front_plot == 4:\n","  post_plotsize = config.tr_set.bias_info_tick\n","\n","inversion = 0\n","hedge = 0\n","\n","# ------ show or save ------ #\n","if save_mode:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".ftr\", \"\")\n","  shutil.rmtree(plot_check_dir, ignore_errors=True)  # remove existing dir\n","  os.makedirs(plot_check_dir)\n","  print(plot_check_dir)\n","else:\n","  plot_check_dir = None\n","\n","# ------------ 한 방향에 대해 plot_check 함 (by position var.) ------------ #\n","#   obj by position  \n","if position == -1:\n","  pos_str = \"SELL\"\n","  pr_, obj_ = short_pr, short_obj\n","  arr_list = [short_point1_arr, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_bias_arr, short_en_tp1, short_en_out0]\n","else:   # both option currently not supported\n","  pos_str = \"BUY\"\n","  pr_, obj_ = long_pr, long_obj\n","  arr_list = [long_point1_arr, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_bias_arr, long_en_tp1, long_en_out0]\n","pr, obj, [point1_arr, lvrg_arr, fee_arr, tpout_arr, bias_arr, en_tp1, en_out0] = sort_bypr_v3(pr_, obj_, arr_list, descending=pr_descend)\n","\n","pr_msg = \"%s\\n {} ~ {} -> {:.5f}\\n lvrg : {}\\n fee : {:.4f}\" % (pos_str)  # pos_str 으로 이곳에서 정의함\n","\n","# ------------------ data chunknize ------------------ #\n","np_df = res_df.to_numpy()\n","\n","# left_end_idx = obj[2] - prev_plotsize  # left_margin 기준 - entry_idx\n","left_end_idx = obj[4] - prev_plotsize  # left_margin 기준 - open_idx\n","right_end_idx = obj[3] + post_plotsize\n","invalid_left_end = np.sum(left_end_idx < 0)\n","\n","np_plot_params = np.hstack((left_end_idx, right_end_idx, pr, *obj, point1_arr, lvrg_arr, fee_arr, tpout_arr, en_tp1, en_out0))[invalid_left_end:]  # all arr should have same dimension\n","if bias_plot:\n","  bias_idx = bias_arr[invalid_left_end:].ravel()\n","  np_plot_params = np_plot_params[bias_idx]  # wave_bias = 1 만 plot"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":526,"status":"ok","timestamp":1650596713744,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"FnSydxFXn_f9","outputId":"5095ab77-7d33-41f3-ca6c-af18a96cb2d7"},"outputs":[{"output_type":"stream","name":"stderr","text":["/content/drive/My Drive/Colab Notebooks/JnQ/funcs/funcs_plot_check.py:10: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  step_col_arr = np.array(col_list)\n"]}],"source":["selection_id = config.selection_id\n","\n","# ------------ make col_idx_dict config ------------ #\n","nonstep_col_list = []\n","step_col_list = []\n","stepmark_col_list = []\n","\n","# ------------ nonstep_col_list - add info(col, alpha, color, linewidth) ------------ #\n","# nonstep_col_list.append([['close'], 1, '#ffffff', 2])\n","\n","# ------------ step_col_list - add info(col, alpha, color, linewidth) ------------ #\n","# ------ htf_candle ------ #\n","hc_tf1 = '5T'\n","hc_tf2 = '15T'\n","\n","step_col_list.append([['open_{}'.format(hc_tf1), 'close_{}'.format(hc_tf1)], 1, '#ffffff', 1])\n","step_col_list.append([['open_{}'.format(hc_tf2), 'close_{}'.format(hc_tf2)], 1, '#ffffff', 2])\n","\n","# ------ resi_sup ------ #\n","# rs_tf = 'T'\n","# step_col_list.append([['resi_{}'.format(rs_tf), 'sup_{}'.format(rs_tf)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['resi_out_{}'.format(rs_tf), 'sup_out_{}'.format(rs_tf)], 1, 'dodgerblue', 2])\n","\n","# ------ wave_range ------ #\n","wave_tf1 = config_list[0].loc_set.point.p1_itv1\n","wave_period1, wave_period2 = config_list[0].loc_set.point.p1_period1, config_list[0].loc_set.point.p1_period2\n","\n","step_col_list.append([['dc_upper_{}{}'.format(wave_tf1, wave_period1), 'dc_lower_{}{}'.format(wave_tf1, wave_period1)], 1, '#ffeb3b', 1])\n","step_col_list.append([['dc_upper_{}{}'.format(wave_tf1, wave_period2), 'dc_lower_{}{}'.format(wave_tf1, wave_period2)], 1, '#ffeb3b', 1])\n","\n","# step_col_list.append([['dc_upper_{}{}'.format(wave_tf2, wave_period2), 'dc_lower_{}{}'.format(wave_tf2, wave_period2)], 1, '#e65100', 2])\n","\n","# ------ dc ------ #\n","dc_tf1 = '5T'\n","dc_tf2 = '15T'\n","dc_period2 = 4\n","\n","# step_col_list.append([['dc_upper_{}'.format(dc_tf1), 'dc_lower_{}'.format(dc_tf1)], 1, '#ffeb3b', 1])\n","\n","# step_col_list.append([['dc_upper_{}'.format(dc_tf2), 'dc_lower_{}'.format(dc_tf2)], 1, '#ff00ff', 4])\n","# step_col_list.append([['dc_base_{}'.format(dc_tf2)], 1, '#5b9cf6', 4])\n","step_col_list.append([['dc_upper_{}{}'.format(dc_tf2, dc_period2), 'dc_lower_{}{}'.format(dc_tf2, dc_period2)], 1, '#ff00ff', 4]),  # inner\n","step_col_list.append([['dc_base_{}{}'.format(dc_tf2, dc_period2)], 1, '#5b9cf6', 4])\n","\n","# ------ bb ------ #\n","bb_tf1 = 'T'\n","bb_period1 = 20\n","\n","step_col_list.append([['bb_upper_{}{}'.format(bb_tf1, bb_period1), 'bb_lower_{}{}'.format(bb_tf1, bb_period1)], 1, '#ffffff', 1])\n","step_col_list.append([['bb_base_{}{}'.format(bb_tf1, bb_period1)], 1, '#00ff00', 1])\n","\n","# step_col_list.append([['bb_upper_{}'.format(tf2), 'bb_lower_{}'.format(tf2)], 1, '#e91e63', 4])\n","\n","# ------ ema ------ #\n","# step_col_list.append([['ema_5T'], 1, '#03ed30', 2])\n","\n","# ------------ stepmark_col_list - add info(col, alpha, color, linewidth) ------------ #\n","# stepmark_col_list.append([['sar_T'], 1, 'dodgerblue', 7])\n","\n","\n","# ------ str to numbcol ------ #\n","nonstep_col_arr = strcol_tonumb(res_df, nonstep_col_list)\n","step_col_arr = strcol_tonumb(res_df, step_col_list)\n","stepmark_col_arr = strcol_tonumb(res_df, stepmark_col_list)\n","\n","col_idx_dict = \\\n","{\n","  \"ohlc_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close']),\n","  \"vp_col_idxs\": get_col_idxs(res_df, ['close', 'volume']),\n","  # \"ohlc_col_idxs\": get_col_idxs(res_df, ['haopen', 'hahigh', 'halow', 'haclose']),  # heikin-ashi ver.\n","  \"nonstep_col_info\": nonstep_col_arr,\n","  \"step_col_info\": step_col_arr,\n","  \"stepmark_col_info\": stepmark_col_arr,\n","  \"ylim_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close', 'dc_upper_15T4', 'dc_lower_15T4'])  # , 'dc_upper_H', 'dc_lower_H', 'dc_upper_15T', 'dc_lower_15T', 'short_out_{}'.format(selection_id), 'long_out_{}'.format(selection_id)\n","}   # , 'wave_upper_{}'.format(wave_tf2), 'wave_lower_{}'.format(wave_tf2), 'dc_upper_15T', 'dc_lower_15T'"]},{"cell_type":"markdown","metadata":{"id":"E-VwJkNQbGI4"},"source":["### plot"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1wE2hLNLVHe2v54bN2N9uuxjSFmcFCHuO"},"id":"Roy40BmByyZc","outputId":"271addd6-5ecb-47ef-d0ca-ebf9cce3a40d","executionInfo":{"status":"ok","timestamp":1650617608156,"user_tz":-540,"elapsed":116972,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}],"source":["_ = [plot_check_v5(np_df, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir, **col_idx_dict) for param_zip in zip(np_plot_params, np_plot_params[::-1])]"]},{"cell_type":"markdown","metadata":{"id":"MQ8w8nWVXlGj"},"source":["### plot_funcs"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cFt6CeZf4yEk"},"outputs":[],"source":["def plot_check_v5(data, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir=None, **col_idx_dict):\n","  # start_0 = time.time()\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(30, 18))\n","  nrows, ncols = 2, 2\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                         ncols=ncols,\n","                         height_ratios=[3, 1]\n","                         )\n","  for gs_idx, params in enumerate(param_zip):\n","    ax = fig.add_subplot(gs[gs_idx])\n","    iin, iout, pr, ep, tp, entry_idx, exit_idx, open_idx, point1_idx, lvrg, fee, tp_line, out_line, en_tp1, en_out0 = params\n","\n","    # if ep > out_line:  # for tp > ep > out plot_check\n","    #   break\n","\n","    # ------------ add_col section ------------ #\n","    a_data = data[int(iin):int(iout + 1)]\n","    # a_data = data[iin:iout]\n","    # ------ candles ------ #\n","    candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","\n","    # ------ add cols ------ #\n","    [nonstep_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['nonstep_col_info']]\n","    [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","    [stepmark_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['stepmark_col_info']]\n","\n","    # ------ ep, tp + xlim ------ #\n","    try:\n","      eptp_hvline_v5(config, ep, tp, entry_idx, exit_idx, open_idx, point1_idx, tp_line, out_line, en_tp1, en_out0,\n","                    front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, **col_idx_dict)\n","    except Exception as e:\n","      print(\"error in eptp_hvline_v3 :\", e)\n","\n","    #     Todo    #\n","    #     3. outer_price plot 일 경우, gs_idx + nrows 하면 됨\n","\n","    # ------ trade_info ------ #\n","    plt.title(pr_msg.format(entry_idx, exit_idx, pr, lvrg, fee))\n","\n","  if plot_check_dir is None:\n","    plt.show()\n","    print()\n","  else:\n","    fig_name = plot_check_dir + \"/%s.png\" % int(entry_idx)\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","  plt.close()\n","  # print(\"elapsed time :\", time.time() - start_0)\n","\n","  return\n","\n","def eptp_hvline_v5(config, en_p, ex_p, entry_idx, exit_idx, open_idx, point1_idx, tp_line, out_line, en_tp1, en_out0,\n","                   front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, **col_idx_dict):\n","  # ------ get vertical ticks ------ #\n","  entry_tick = int(entry_idx - iin)\n","  exit_tick = entry_tick + int(exit_idx - entry_idx)\n","  open_tick = entry_tick - int(entry_idx - open_idx)\n","  point1_tick = open_tick - int(open_idx - point1_idx)\n","  bias_info_tick = entry_tick + config.tr_set.bias_info_tick\n","\n","  if front_plot == 1:\n","    x_max = open_tick + 20\n","  elif front_plot == 2:\n","    x_max = entry_tick + 20 \n","  elif front_plot == 3:\n","    x_max = exit_tick + 20\n","  elif front_plot == 4:\n","    x_max = bias_info_tick + 20\n","\n","  if (iout - iin) > x_max:\n","    x_margin = x_max * x_margin_mult\n","    plt.xlim(0 - x_margin, x_max + x_margin)\n","  x0, x1 = plt.gca().get_xlim()\n","\n","  # ------------ hlines ------------ #\n","  # ------ entry & exit ------ #\n","  en_xmin = entry_tick / x1\n","  ex_xmin = exit_tick / x1\n","  plt.axhline(en_p, x0, en_xmin, linewidth=2, linestyle='--', alpha=1, color='lime')  # en_p line axhline\n","  plt.text(x0, en_p, 'en_p :\\n {:.3f} \\n epg {}'.format(en_p, config.tr_set.ep_gap), ha='right', va='center', fontweight='bold', fontsize=15)  # en_p line label\n","  plt.axhline(ex_p, ex_xmin, 1, linewidth=2, linestyle='--', alpha=1, color='lime')  # ex_p line axhline (signal 도 포괄함, 존재 의미)\n","  plt.text(x1, ex_p, 'ex_p :\\n {}'.format(ex_p), ha='left', va='center', fontweight='bold', fontsize=15)  # ex_p line label\n","\n","  # ------ tpout_line ------ #\n","  plt.axhline(tp_line, 0.05, 1, linewidth=4, linestyle='-', alpha=1, color='#00ff00')  # ep 와 gap 비교 용이하기 위해 ex_xmin -> 0.1 사용\n","  plt.text(x0, tp_line, 'tpg {}'.format(config.tr_set.tp_gap), ha='right', va='center', fontweight='bold', fontsize=15, color='#00ff00')\n","  plt.axhline(out_line, 0.05, 1, linewidth=4, linestyle='-', alpha=1, color='#ff0000')\n","  plt.text(x0, out_line, 'outg {}'.format(config.tr_set.out_gap), ha='right', va='center', fontweight='bold', fontsize=15, color='#ff0000')\n","\n","  # ------ bias_line ------ #\n","  text_x_pos = (x0 + x1) * 0.1\n","  plt.axhline(en_tp1, 0.2, 1, linewidth=4, linestyle='-', alpha=1, color='#ffffff')\n","  plt.text(text_x_pos, en_tp1, ' en_tp1', ha='right', va='bottom', fontweight='bold', fontsize=15)\n","  plt.axhline(en_out0, 0.2, 1, linewidth=4, linestyle='-', alpha=1, color='#ffffff')\n","  plt.text(text_x_pos, en_out0, ' en_out0', ha='right', va='bottom', fontweight='bold', fontsize=15)\n","\n","  # ------ ylim ------ #\n","  if front_plot:\n","    y_lim_data = a_data[:x_max + 1, col_idx_dict['ylim_col_idxs']]  # +1 for including open_tick\n","  else:\n","    y_lim_data = a_data[:, col_idx_dict['ylim_col_idxs']]\n","  \n","  y_min = y_lim_data.min()\n","  y_max = y_lim_data.max()\n","  y_margin = (y_max - y_min) * y_margin_mult\n","  plt.ylim(y_min - y_margin, y_max + y_margin)\n","\n","  # ------------ vline (open_tick, entry_tick, exit_tick) ------------ #\n","  y0, y1 = plt.gca().get_ylim()\n","  l_data = a_data[:exit_tick + 1, col_idx_dict['ohlc_col_idxs'][2]]  # +1 for including exit_tick\n","  point1_ymax, open_ymax, en_ymax, ex_ymax = [(l_data[tick_] - y0) / (y1 - y0) - .01 for tick_ in [point1_tick, open_tick, entry_tick, exit_tick]]  # -.05 for margin\n","  plt.axvline(point1_tick, 0, point1_ymax, alpha=1, linewidth=2, linestyle='--', color='#ff7722')\n","  plt.axvline(open_tick, 0, open_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')  # 추후, tick 별 세부 정의가 달라질 수 있음을 고려해 multi_line 작성 유지\n","  plt.axvline(entry_tick, 0, en_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  plt.axvline(exit_tick, 0, ex_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  plt.axvline(bias_info_tick, alpha=1, linewidth=2, linestyle='-', color='#ffeb3b')\n","\n","  return"]},{"cell_type":"markdown","metadata":{"id":"q3zisNOTw3jM"},"source":["#### legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fUFdJVrsw78h"},"outputs":[],"source":["_ = [plot_check_v4(np_df, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir, 500, 0.07, 100, **col_idx_dict) for param_zip in zip(np_plot_params, np_plot_params[::-1])]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ESReTMpP7SoO"},"outputs":[],"source":["def plot_check_v4(data, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir=None, vp_range=500, kde_factor=0.05, num_samples=100, **col_idx_dict):\n","  # start_0 = time.time()\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(30, 18))\n","  nrows, ncols = 2, 2\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                         ncols=ncols,\n","                         height_ratios=[3, 1]\n","                         )\n","  for gs_idx, params in enumerate(param_zip):\n","    ax = fig.add_subplot(gs[gs_idx])\n","    iin, iout, pr, ep, tp, entry_idx, exit_idx, open_idx, lvrg, fee, tp_line, out_line, bias_info, bias_thresh = params\n","\n","    # ------------ add_col section ------------ #\n","    iin, iout = int(iin), int(iout)\n","    a_data = data[iin:iout]\n","    # ------ candles ------ #\n","    candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","    \n","    # ------ add cols ------ #\n","    [nonstep_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['nonstep_col_info']]\n","    [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","    [stepmark_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['stepmark_col_info']]\n","\n","    # vp_data = data[iin - vp_range:iin, col_idx_dict['vp_col_idxs']]\n","    # vp_info = [vp_range, vp_data[:, 0], vp_data[:, 1], kde_factor, num_samples]\n","    vp_data = data[iin - vp_range:iin, col_idx_dict['vp_col_idxs']].T\n","    vp_info = [vp_range, *vp_data, kde_factor, num_samples]\n","\n","    # ------ ep, tp + xlim ------ #\n","    eptp_hvline_v4(config, ep, tp, entry_idx, exit_idx, open_idx, tp_line, out_line, bias_info, bias_thresh, \n","                   front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, vp_info, **col_idx_dict)        \n","\n","    #     Todo    #\n","    #     3. outer_price plot 일 경우, gs_idx + nrows 하면 됨\n","\n","    # ------ trade_info ------ #\n","    plt.title(pr_msg.format(entry_idx, exit_idx, pr, lvrg, fee))\n","\n","  if plot_check_dir is None:\n","    plt.show()\n","    print()\n","  else:\n","    fig_name = plot_check_dir +  \"/%s.png\" % int(entry_idx)\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","  plt.close()\n","  # print(\"elapsed time :\", time.time() - start_0)  \n","\n","  return\n","\n","def eptp_hvline_v4(config, en_p, ex_p, entry_idx, exit_idx, open_idx, tp_line, out_line, bias_info, bias_thresh, \n","                   front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, vp_info, **col_idx_dict):\n","  # ------ get vertical ticks ------ #\n","  entry_tick = int(entry_idx - iin)\n","  open_tick = entry_tick - int(entry_idx - open_idx)\n","  exit_tick = entry_tick + int(exit_idx - entry_idx)\n","\n","  if front_plot == 1:\n","    x_max = open_tick\n","  elif front_plot == 2:\n","    x_max = entry_tick\n","  if (iout - iin) > x_max:\n","    x_margin = x_max * x_margin_mult\n","    plt.xlim(0 - x_margin, x_max + x_margin)\n","  x0, x1 = plt.gca().get_xlim()\n","  # ------------ hlines ------------ #\n","  # ------ entry & exit ------ #\n","  en_xmin = entry_tick / x1\n","  ex_xmin = exit_tick / x1\n","  plt.axhline(en_p, x0, en_xmin, linewidth=2, linestyle='--', alpha=1, color='lime')  # en_p line axhline\n","  plt.text(x0, en_p, ' en_p :\\n {}'.format(en_p), ha='right', va='center', fontweight='bold')  # en_p line label\n","  plt.axhline(ex_p, ex_xmin, 1, linewidth=2, linestyle='--', alpha=1, color='lime')  # ex_p line axhline (signal 도 포괄함, 존재 의미)\n","  plt.text(x1, ex_p, ' ex_p :\\n {}'.format(ex_p), ha='left', va='center', fontweight='bold')  # ex_p line label\n","\n","  # ------ tpout_line ------ #\n","  plt.axhline(tp_line, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#00ff00')  # ep 와 gap 비교 용이하기 위해 ex_xmin -> 0.1 사용\n","  plt.text(x0, tp_line, ' %s' % config.tr_set.tp_gap, ha='left', va='center', fontweight='bold')\n","  plt.axhline(out_line, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#ff0000')\n","  plt.text(x0, out_line, ' %s' % config.tr_set.out_gap, ha='left', va='center', fontweight='bold')\n","\n","  # ------ bias_line ------ #\n","  plt.axhline(bias_info, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='dodgerblue')\n","  plt.text(x0, bias_info, ' bias_info', ha='left', va='center', fontweight='bold')\n","  plt.axhline(bias_thresh, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#ff8400')\n","  plt.text(x0, bias_thresh, ' bias_thresh', ha='left', va='center', fontweight='bold')\n","\n","  # ------ volume profile ------ #\n","  vp_range, close, volume, kde_factor, num_samples = vp_info\n","  if iin >= vp_range:\n","    start_0 = time.time()\n","    kde = stats.gaussian_kde(close, weights=volume, bw_method=kde_factor)\n","    kdx = np.linspace(close.min(), close.max(), num_samples)\n","    kdy = kde(kdx)\n","    print(\"kde elapsed_time :\", time.time() - start_0)\n","\n","    kdy_max = kdy.max()\n","    # peaks,_ = signal.find_peaks(kdy)\n","    peaks,_ = signal.find_peaks(kdy, prominence=kdy_max * 0.3)\n","    peak_list = kdx[peaks]   # peak_list\n","    [plt.axhline(peak, linewidth=6, linestyle='-', alpha=1, color='white') for peak in peak_list]\n","    \n","    kdy_ratio = entry_tick / kdy_max # 30 / 0.0001\n","    plt.plot(kdy * kdy_ratio, kdx, color='white')\n","    # plt.plot(pky, pkx, 'bo', color='yellow')\n","\n","  # ------ ylim ------ #\n","  if front_plot:\n","    y_lim_data = a_data[:x_max + 1, col_idx_dict['ylim_col_idxs']]  # +1 for including open_tick\n","  else:\n","    y_lim_data = a_data[:, col_idx_dict['ylim_col_idxs']]\n","  y_min = y_lim_data.min()\n","  y_max = y_lim_data.max()\n","  y_margin = (y_max - y_min) * y_margin_mult\n","  # plt.ylim(y_min - y_margin, y_max + y_margin)\n","\n","  # ------------ vline (open_tick, entry_tick, exit_tick) ------------ #\n","  y0, y1 = plt.gca().get_ylim()\n","  l_data = a_data[:exit_tick + 1, col_idx_dict['ohlc_col_idxs'][2]]  # +1 for including exit_tick\n","  open_ymax, en_ymax, ex_ymax = [(l_data[tick_] - y0) / (y1 - y0) - .01 for tick_ in [open_tick, entry_tick, exit_tick]]  # -.05 for margin\n","  plt.axvline(open_tick, 0, open_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')  # 추후, tick 별 세부 정의가 달라질 수 있음을 고려해 multi_line 작성 유지\n","  plt.axvline(entry_tick, 0, en_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  plt.axvline(exit_tick, 0, ex_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","\n","  return"]},{"cell_type":"markdown","metadata":{"id":"X0FsT-8FZRti"},"source":["### sync_check"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"inQ6f-CDZYkr"},"outputs":[],"source":["save_plot = 0\n","\n","open_idx_range = reversed(range(0, len(res_df), 1000))\n","plot_range = 100\n","\n","x_max = 400\n","\n","inversion = 0\n","hedge = 0\n","\n","\n","if save_plot:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".ftr\", \"\")\n","  try:\n","    os.mkdir(plot_check_dir)\n","  except:\n","\n","    #     remove existing dir   #\n","    shutil.rmtree(plot_check_dir)\n","    print(plot_check_dir, 'removed !')\n","    os.mkdir(plot_check_dir)\n","    # pass\n","    \n","\n","prev_plotsize = 30\n","post_plotsize = 20\n","\n","\n","\n","h_candle_intv1 = 15\n","h_candle_intv2 = 60\n","if 'hopen_{}'.format(h_candle_intv2) not in res_df.columns:\n","  res_df = h_candle(res_df, h_candle_intv1)\n","  res_df = h_candle(res_df, h_candle_intv2)\n","\n","res_df[\"ma30_1m\"] = res_df['close'].rolling(30).mean()\n","res_df[\"ma60_1m\"] = res_df['close'].rolling(60).mean()\n","\n","res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line)\n","# res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=1, use_dtk_line=1)\n","# break\n","\n","rtc_list = [\"short_tp_1_{}\".format(strat_version), \"short_tp_gap_{}\".format(strat_version), \"long_tp_1_{}\".format(strat_version), \"long_tp_gap_{}\".format(strat_version)]\n","# h_rtc_list = [\"h_short_tp_1\", \"h_short_tp_gap\", \"h_long_tp_1\", \"h_long_tp_gap\"]\n","dtk_list = [\"short_dtk_1_{}\".format(strat_version), \"short_dtk_gap_{}\".format(strat_version), \"long_dtk_1_{}\".format(strat_version), \"long_dtk_gap_{}\".format(strat_version),\n","            # \"short_dtk_1_line\", \"short_dtk_gap_line\", \"long_dtk_1_line\", \"long_dtk_gap_line\",\n","            \"short_dtk_plot_1\", \"short_dtk_plot_gap\", \"long_dtk_plot_1\", \"long_dtk_plot_gap\"]\n","dc_v2_list = ['dc_upper_v2_{}'.format(strat_version), 'dc_lower_v2_{}'.format(strat_version)]\n","\n","\n","ohlc_list = ['open', 'high', 'low', 'close'] # + basic_st_list\n","hcandle_list = ['hopen_%s' % h_candle_intv1, 'hclose_%s' % h_candle_intv1, 'hopen_%s' % h_candle_intv2, 'hclose_%s' % h_candle_intv2]\n","# hcandle_list = ['hopen_%s' % h_candle_intv1, 'hclose_%s' % h_candle_intv1, 'hhigh_%s' % h_candle_intv2, 'hlow_%s' % h_candle_intv2]\n","\n","# --------------------- dc & bb level --------------------- #\n","dc_interval = '1m'\n","hdc_interval = '5m'\n","hhdc_interval = '15m'\n","\n","st_list = ['st_base_%s' % hhdc_interval, 'st_upper_%s' % hhdc_interval, 'st_lower_%s' % hhdc_interval]\n","\n","dc_list = ['dc_upper_%s' % dc_interval, 'dc_lower_%s' % dc_interval]\n","hdc_list = ['dc_upper_%s' % hdc_interval, 'dc_lower_%s' % hdc_interval]\n","hhdc_list = ['dc_upper_%s' % hhdc_interval, 'dc_lower_%s' % hhdc_interval]\n","\n","bb_interval = dc_interval\n","hbb_interval = hdc_interval\n","hhbb_interval = hhdc_interval\n","\n","bb_list = ['bb_upper_%s' % bb_interval, 'bb_lower_%s' % bb_interval]\n","hbb_list = ['bb_upper_%s' % hbb_interval, 'bb_lower_%s' % hbb_interval]\n","hhbb_list = ['bb_upper_%s' % hhbb_interval, 'bb_lower_%s' % hhbb_interval]\n","\n","bbwp_list = ['bbwp', 'bbwp_ma']\n","\n","\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1']\n","senkoub_list = ['senkou_b1']\n","\n","sar_list = ['sar_3m', 'sar_5m', 'sar_15m']\n","\n","ma_list = ['ma30_1m', 'ma60_1m']\n","sma_list = ['sma_1m']\n","\n","ema_list = ['ema_5m']\n","# cb_list = ['cloud_bline_1m']\n","cb_list = ['cloud_bline_30m']\n","# cb_list = ['cloud_bline_5m']\n","\n","\n","\n","# -------------- under price phase -------------- #\n","# macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3']\n","# trix_list = ['trix1', 'trix2', 'trix3']\n","# stoch_list = ['stoch_5m']\n","# fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","# cctbbo_list = ['cctbbo']\n","# emaroc_list = ['ema_roc']\n","rsi_list = ['rsi_%s' % config.loc_set.point.exp_itv] \n","cci_list = ['cci_%s' % config.loc_set.point.exp_itv] \n","\n","\n","# -------------- summation -------------- #\n","# input_colname = ohlc_list + basic_st_list + pline_list + bb_list + hbb_list + sma_list + cb_list + stoch_list + sar_list + dc_list\n","input_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + hhdc_list + dtk_list + dc_v2_list + rsi_list + ema_list + ma_list + st_list# + cci_list\n","\n","# yrange_colname = ohlc_list + basic_st_list + pline_list # currently just used for ymin, ymax\n","yrange_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + hhdc_list + dc_v2_list + ema_list # currently just used for ymin, ymax\n","yrange_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + dc_v2_list + ema_list # currently just used for ymin, ymax\n","\n","\n","\n","odd_cnt = 0\n","obj_i = -1\n","rev_obj_i = 0\n","\n","#   지금, continue 발생시 true / false idx 가 같이 상승하는 문제\n","\n","# while 1:\n","for open_idx in open_idx_range:\n","\n","  # if obj_i >= len_obj or rev_obj_i >= len_obj:\n","  #   break\n","\n","  # if odd_cnt % 2 == 1 and tf_plot: #  loss plot 을 채워야하는 상황\n","  #   rev_obj_i += 1\n","\n","  # else:\n","  #   obj_i += 1\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","  \n","\n","  odd_cnt += 1\n","\n","  # break\n","\n","  print(\"open_idx :\", open_idx)\n","  \n","  plot_df = res_df.iloc[open_idx - prev_plotsize:open_idx + plot_range + post_plotsize][input_colname]\n","  \n","  odds = 1 if odd_cnt % 2 == 1 else 2\n","  if odds == 1:\n","\n","    plt.style.use('dark_background')\n","\n","    fig = plt.figure(figsize=(26, 18))\n","    \n","    gs = gridspec.GridSpec(nrows=2, # row 몇 개 \n","                        ncols=2, # col 몇 개 \n","                        height_ratios=[3, 1]\n","                        )\n","    \n","  ax = fig.add_subplot(gs[odds - 1])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='#26a69a', colordown='#ef5350', alpha=0.5)\n","\n","  # ---------- h_candle ---------- #\n","  alpha = 1\n","  lw = 1\n","  for cd_i, candle in enumerate(hcandle_list):\n","\n","    if cd_i == 2:\n","      lw = 2      \n","    plt.step(np.arange(len(plot_df)), plot_df[candle].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","\n","  # alpha = 0.1\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['hclose_60'].values, plot_df['hopen_60'].values, \n","  #                     where=1, facecolor='#ffffff', alpha=alpha)  \n","  \n","\n","   # --------- ma --------- #\n","  alpha = 1\n","  lw = 2\n","  for ma_i, item in enumerate(ma_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","   # --------- ema --------- #\n","  alpha = 1\n","  lw = 4\n","  for sm_i, item in enumerate(ema_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","    \n","   # --------- st --------- #\n","  alpha = 1\n","  lw = 2\n","  for sm_i, item in enumerate(st_list):\n","      plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#00ff00', linewidth=lw)\n","\n","  # ---------------------- dc_v2 ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(dc_v2_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","  # # ---------------------- dc ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(dc_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","  # # ---------------------- hdc ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(hdc_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#e65100', linewidth=lw)\n","\n","  # # ---------------------- hhdc ---------------------- #\n","  # alpha = 1\n","  # lw = 4\n","  # for sm_i, item in enumerate(hhdc_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#c2185b', linewidth=lw)\n","\n","\n","  # # ---------------------- bb ---------------------- #\n","  # alpha = 1\n","  # lw = 1\n","  # for sm_i, item in enumerate(bb_list):\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","\n","  # alpha = 0.2\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % bb_interval].values, plot_df['bb_lower_%s' % bb_interval].values, \n","  #                     where=plot_df['bb_upper_%s' % bb_interval].values >= plot_df['bb_lower_%s' % bb_interval].values, facecolor='#ffffff', alpha=alpha)   \n","\n","  # # ---------------------- hbb ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(hbb_list):\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ff00ff', linewidth=lw)\n","  \n","  # alpha = 0.2\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % hbb_interval].values, plot_df['bb_lower_%s' % hbb_interval].values, \n","  #                     where=plot_df['bb_upper_%s' % hbb_interval].values >= plot_df['bb_lower_%s' % hbb_interval].values, facecolor='#ff00ff', alpha=alpha) \n","  \n","  # # ---------------------- hhbb ---------------------- #\n","\n","  # alpha = 1\n","  # lw = 4\n","  # for sm_i, item in enumerate(hhbb_list):\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#3179f5', linewidth=lw)\n","  \n","  # alpha = 0.2\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % hhbb_interval].values, plot_df['bb_lower_%s' % hhbb_interval].values, \n","  #                     where=plot_df['bb_upper_%s' % hhbb_interval].values >= plot_df['bb_lower_%s' % hhbb_interval].values, facecolor='#3179f5', alpha=alpha) \n","  \n","  # ------------------- dtk_line (old, tp_line) ------------------- #\n","  \n","  # alpha = 1\n","  # lw = 2\n","  # rtc_ratio_list = [config.loc_set.zone.dt_k]\n","  \n","  # for rtc_k in rtc_ratio_list:    \n","  #   # plt.step(np.arange(len(plot_df)), plot_df['short_dtk_1_line'].values - plot_df['short_dtk_gap_line'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['long_dtk_1_line'].values + plot_df['long_dtk_gap_line'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","\n","  # hy_min = np.min(plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * rtc_k)\n","  # hy_max = np.max(plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * rtc_k)  \n","\n","  # alpha = 1\n","  # lw = 4\n","  # # h_rtc_ratio_list = [config.loc_set.zone.dt_k]\n","  # h_rtc_ratio_list = [config.loc_set.zone.zone_dt_k]\n","  # # h_rtc_ratio_list = [0.272, 0.36, 0.4, 0.5]\n","  \n","  # for h_rtc_k in h_rtc_ratio_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df['short_dtk_plot_1'].values - plot_df['short_dtk_plot_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['long_dtk_plot_1'].values + plot_df['long_dtk_plot_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['h_short_tp_1'].values - plot_df['h_short_tp_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['h_long_tp_1'].values + plot_df['h_long_tp_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","\n","  # # hy_min = np.min(plot_df['short_dtk_plot_1'].values - plot_df['short_dtk_plot_gap'].values * h_rtc_k)\n","  # # hy_max = np.max(plot_df['long_dtk_plot_1'].values + plot_df['long_dtk_plot_gap'].values * h_rtc_k)  \n","\n","  # ------------- y lim ------------- #  \n","  y_max = max(np.max(plot_df[yrange_colname]))\n","  y_min = min(np.min(plot_df[yrange_colname]))\n","  # y_max = max(y_max, y_max_)\n","  # y_min = min(y_min, y_min_)\n","  \n","  # hy_min = np.min(plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * 0.36)\n","  # hy_max = np.max(plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * 0.36)  \n","  # y_max = max(y_max, y_max_, hy_max)\n","  # y_min = min(y_min, y_min_, hy_min)\n","\n","  if np.isnan(y_max) or np.isnan(y_min):\n","    print('continued in yminmax')\n","    continue\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","\n","  plt.ylim(y_min, y_max)\n","\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  #           rsi          #    \n","  plt.subplot(gs[odds + 1])\n","  alpha = 1\n","  for rsi_ in rsi_list:\n","    plt.step(np.arange(len(plot_df)), plot_df[rsi_].values, 'g', alpha=alpha)\n","    # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","    alpha -= 0.2\n","  plt.axhline(50, linestyle='--')\n","  plt.axhline(50 + config.loc_set.point.osc_band, linestyle='--')\n","  plt.axhline(50 - config.loc_set.point.osc_band, linestyle='--')\n","  \n","  plt.axvline(prev_plotsize, linestyle='--')\n","  \n","  #           cci          #    \n","  # plt.subplot(gs[odds + 1])\n","  # alpha = 1\n","  # for cci_ in cci_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cci_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axhline(config.loc_set.point.osc_band, linestyle='--')\n","  # plt.axhline(-config.loc_set.point.osc_band, linestyle='--')\n","  \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","\n","\n","  if len(plot_df) > x_max:\n","    x_margin = x_max / 20\n","    plt.xlim(0 - x_margin, x_max + x_margin)\n","\n","\n","  if not save_plot:\n","    if odds == 2:\n","      plt.show()\n","      plt.close()\n","  \n","  else:\n","    # ---------- save mode ---------- #\n","    fig_name = plot_check_dir +  \"/%s.png\" % t_i\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","\n","  # plt.close()  \n","  print()\n","\n","  # break\n"]},{"cell_type":"markdown","metadata":{"id":"13a-U32Uy50I"},"source":["### brief np_pr survey"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"L9LdjV2uUWnp"},"outputs":[],"source":["# plot_pr_list[:100]\n","plt.plot(np_pr)\n","plt.axhline(1)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"TBE0l6dHRYrE"},"source":["### close & pr comp."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":877},"executionInfo":{"elapsed":1436,"status":"ok","timestamp":1636355589887,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"-txULkhXRbz5","outputId":"7cda9fc7-4a4e-4c52-ffa3-a974b5f7c66f"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 3 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 3 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]}],"source":["#     chunky survey 필요함    #\n","chunk_size = 50000\n","\n","sync_pr = np.ones(len(res_df))\n","sync_tr = np.zeros(len(res_df))\n","# sync_tr = np.empty(len(res_df))\n","# sync_tr[:] = np.nan\n","\n","max_tr = np.max(tp_ratio_list)\n","min_tr = np.min(tp_ratio_list)\n","\n","for ck_i in range(0, len(res_df), chunk_size):\n","\n","  chunked_df = res_df.iloc[ck_i:ck_i + chunk_size]\n","  # break\n","\n","  for pr_, eptp_idx, tr_ in zip(pr_list[ck_i:ck_i + chunk_size], trade_list[ck_i:ck_i + chunk_size], tp_ratio_list[ck_i:ck_i + chunk_size]):\n","    # print(pr_, eptp_idx)\n","    sync_pr[eptp_idx[-1][0]] = pr_\n","    sync_tr[eptp_idx[-1][0]] = tr_\n","    # break\n","\n","  chunked_pr = sync_pr[ck_i:ck_i + chunk_size]\n","  chunked_tr = sync_tr[ck_i:ck_i + chunk_size]\n","  chunked_tr = np.where(np.isnan(chunked_tr), pd.Series(chunked_tr).shift(1), chunked_tr)\n","\n","  # plt.figure(figsize=(8, 6))\n","\n","  plt.subplot(311)\n","  plt.plot(np.arange(len(chunked_df)), chunked_df['close'])\n","  # plt.show()\n","\n","  plt.subplot(312)\n","  plt.plot(np.cumprod(chunked_pr))\n","  \n","  plt.subplot(313)\n","  plt.plot(chunked_tr)\n","  plt.ylim(min_tr + 0.5 * (max_tr - min_tr), max_tr)\n","  \n","  plt.show()\n","  print()\n"]},{"cell_type":"markdown","metadata":{"id":"Qys2Bw5Ou3u9"},"source":["### plot indi. legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pi5ntOOVu6JT"},"outputs":[],"source":["\n","  # ---------------------- ma ---------------------- #\n","   # --------- ema --------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(ema_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  #   # --------- sma --------- #\n","  # alpha = 1\n","  # for sm_i, sma in enumerate(sma_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 4\n","  #   plt.step(np.arange(len(plot_df)), plot_df[sma].values, alpha=alpha, color='#e91e63', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  \n","  # ---------------------- cb ---------------------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(cb_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#5b9cf6', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","\n","  \n","  # ---------------------- sar ---------------------- #\n","  # alpha = 1\n","  # markersize = 5\n","  # for sar in sar_list:\n","  #   plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","  #   markersize += 1\n","  #   alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  # alpha = 0.7\n","  # for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","  #                     where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","  #                     where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","  #   alpha -= 0.05\n","  \n","\n","\n","  # ---------------------- outer price indi. ---------------------- #\n","  #           macd          #\n","  # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","    \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for stoch_ in stoch_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[stoch_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(stoch_upper, linestyle='--')\n","  # plt.axhline(stoch_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- cctbbo ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for cctbbo in cctbbo_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cctbbo].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(cctbbo_upper, linestyle='--')\n","  # plt.axhline(cctbbo_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- ema_roc ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for emaroc in emaroc_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[emaroc].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","  \n","  # ---------- bbw ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for bbwp_ in bbwp_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[bbwp_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(bbwp_thresh, linestyle='--')\n","\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n"]},{"cell_type":"markdown","metadata":{"id":"cj9X6S1jJjER"},"source":["### plot nontp case"]},{"cell_type":"markdown","metadata":{"id":"tApzvz_gK9lR"},"source":["## legacy"]},{"cell_type":"markdown","metadata":{"id":"FaRGwR4NEop2"},"source":["### shifting"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"a8aYsjEgQnGF"},"outputs":[],"source":["org_res_df = res_df.copy()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":291,"status":"ok","timestamp":1626515312874,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"RF3RM2G2RCb1","outputId":"ba8f6a75-d4df-4f85-cd0f-190935341f7a"},"outputs":[{"name":"stdout","output_type":"stream","text":["                            open     high  ...  min_upper  max_lower\n","2021-06-30 23:55:59.999  0.27223  0.27281  ...   0.272145    0.27005\n","2021-06-30 23:56:59.999  0.27274  0.27290  ...   0.272145    0.27005\n","2021-06-30 23:57:59.999  0.27246  0.27257  ...   0.272523    0.27021\n","2021-06-30 23:58:59.999  0.27166  0.27183  ...   0.272523    0.27021\n","2021-06-30 23:59:59.999  0.27144  0.27211  ...   0.272523    0.27021\n","\n","[5 rows x 37 columns]\n","                            open     high  ...  min_upper  max_lower\n","2021-06-30 23:55:59.999  0.27223  0.27281  ...   0.272523    0.27021\n","2021-06-30 23:56:59.999  0.27274  0.27290  ...        NaN        NaN\n","2021-06-30 23:57:59.999  0.27246  0.27257  ...        NaN        NaN\n","2021-06-30 23:58:59.999  0.27166  0.27183  ...        NaN        NaN\n","2021-06-30 23:59:59.999  0.27144  0.27211  ...        NaN        NaN\n","\n","[5 rows x 37 columns]\n"]}],"source":["#         refresh res_df      #\n","res_df = org_res_df.copy()\n","print(org_res_df.tail(5))\n","\n","# break\n","\n","\n","shift_size = -4\n","# shift_size = -1\n","# shift_size = -7\n","# shift_size = +3\n","\n","res_df['min_upper'] = res_df['min_upper'].shift(shift_size)\n","res_df['max_lower'] = res_df['max_lower'].shift(shift_size)\n","res_df['minor_ST1_Trend'] = res_df['minor_ST1_Trend'].shift(shift_size)\n","res_df['minor_ST2_Trend'] = res_df['minor_ST2_Trend'].shift(shift_size)\n","res_df['minor_ST3_Trend'] = res_df['minor_ST3_Trend'].shift(shift_size)\n","res_df['middle_line'] = res_df['middle_line'].shift(shift_size)\n","\n","print(res_df.tail(5))"]},{"cell_type":"markdown","metadata":{"id":"2gxvme1PC6ha"},"source":["### load model"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5831,"status":"ok","timestamp":1628862368878,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"dtYdAuSsC72_","outputId":"e8dccc53-aaa7-4bab-ed8d-753f634c08d6"},"outputs":[{"name":"stdout","output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/resnet/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5\n","94773248/94765736 [==============================] - 1s 0us/step\n"]}],"source":["# model_name = 'inner_tick_cnnreg_lscalemm_prefee_gpu_%s_%s_%s_%s_%s.h5'\n","\n","# model = tf.keras.models.load_model(ckpt_path + model_name)\n","\n","from tensorflow.keras.applications.resnet50 import ResNet50\n","\n","model = ResNet50(weights='imagenet', include_top=False)\n","# model.summary()\n"]},{"cell_type":"markdown","metadata":{"id":"5la6usMOFzkX"},"source":["#### gen selected vector"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oQk3-jbKF8FB"},"outputs":[],"source":["def min_max_scale(npy_x):\n","\n","  return (npy_x - np.min(npy_x)) / (np.max(npy_x) - np.min(npy_x))\n","\n","def expand_dims(npy_x):\n","\n","  row, col = npy_x.shape\n","  npy_x2 = np.array(npy_x).reshape(-1, row, col, 1).astype(np.float32)\n","  # input_x = np.array(data_x).reshape(-1, row, col).astype(np.float32)\n","\n","  #     1c to 3c    #\n","  npy_x3 = npy_x2 * np.ones(3, dtype=np.float32)[None, None, None, :]\n","\n","  return npy_x3\n","\n","\n","def vector_dist(f1, f2):\n","  return np.linalg.norm(f1-f2)\n","\n","\n","\n","# ------------------------ params ------------------------  #\n","selected_i = 500\n","input_size = 100\n","\n","\n","\n","#   1. 선택된 인덱스를 입력받았을 때, input generating 형태만 만들어놓고,     #\n","#   1-1. input cols 필요함    #\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower']\n","# senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","# senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","\n","sma_list = ['sma']\n","\n","#     -------------- outer price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","cctbbo_list = ['cctbbo']\n","\n","selected_price_colname = basic_list + senkoua_list + senkoub_list + sar_list\n","selected_outprice_colname = [macd_list]\n","\n","\n","#         global scaling for outer price data       #\n","#         1. nan 처리       #\n","\n","# # print((np.isnan(df.values)))\n","# print(\"np.sum(np.isnan(df.values), axis=0) :\", np.sum(np.isnan(df.values), axis=0))\n","\n","# max_nan = np.max(np.sum(np.isnan(df.values), axis=0))\n","# # print(max_nan)\n","\n","# df = df.iloc[max_nan:-max_nan]\n","\n","# total_gdata = []\n","# for g_col in selected_outprice_colname:\n","\n","#   temp_data = min_max_scale(res_df[g_col])\n","#   total_gdata.append(temp_data)\n","\n","\n","\n","#   1-2. cols 에 따른, scaling method 구분함    #\n","onprice_input_x = min_max_scale(res_df[selected_price_colname].iloc[selected_i - input_size:selected_i].values)\n","print(onprice_input_x.shape)\n","\n","\n","#   2. plot_check 에서 본인이 원하는 shape 의 인덱스를 선택   #\n","#   3. vertorize, \n","#   3-1. input generator 를 이용해 entry signal 발생할 때마다 dist 비교 진행    #\n","re_onprice_input_x = expand_dims(onprice_input_x)\n","print(re_onprice_input_x.shape)\n","      \n","# break\n","\n","selected_vector = model.predict(re_onprice_input_x, verbose=1)\n","print(selected_vector.shape)"]},{"cell_type":"markdown","metadata":{"id":"OJqkmkpsLCYC"},"source":["### tr_tresh calc"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gcpo4MGd9Wm4"},"outputs":[],"source":["res_wr = 0.6\n","# tr_thresh = 1\n","# tr_thresh = ((1 - res_wr) / res_wr) ** 0.5\n","tr_thresh = ((1 - res_wr) / res_wr) + 0.01\n","# tr_thresh = 2.6\n","print(\"res_wr :\", res_wr)\n","print(\"tr_thresh :\", tr_thresh)\n","\n","\n","#   단리    #\n","trade_num = 1000\n","asset = 1 # thousand USDT\n","test_loss_gap = 0.95  # fee adjusted\n","test_pr_gap = 1 + (1 - test_loss_gap) * tr_thresh\n","\n","test_loss_cnt = trade_num * (1 - res_wr)\n","test_pr_cnt = trade_num * res_wr\n","\n","test_trade_list = [test_pr_gap] * int(test_pr_cnt) + [test_loss_gap] * int(test_loss_cnt)\n","random.shuffle(test_trade_list)\n","# print(\"len(test_trade_list) :\", len(test_trade_list))\n","print(test_trade_list[:10])\n","print()\n","\n","# print(\"%.5f\" % np.cumprod(test_trade_list)[-1])\n","for tr_thresh_ in np.arange(1, 3, 0.2):\n","  if (1 + (1 - test_loss_gap) * tr_thresh_) ** test_pr_cnt * test_loss_gap ** test_loss_cnt > 1:\n","    break\n","print(\"복리를 위한 tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumprod(test_trade_list)[-1] :\", np.cumprod(test_trade_list)[-1])\n","print(\"total_pr : \", np.cumprod(test_trade_list)[-1])\n","print()\n","#   복리 tr_thresh  #\n","#   1. trade_num 에 영향 받지 않음\n","#   2. loss_gap 에 비례함\n","\n","for tr_thresh_ in np.arange(1, 3, 0.01):\n","  if ((1 - test_loss_gap) * tr_thresh_) * test_pr_cnt + (test_loss_gap - 1) * test_loss_cnt > 0:\n","    break\n","np_test_trade = np.array(test_trade_list) - 1\n","print(np_test_trade[:10])\n","# print(\"%.3f\" % )\n","print(\"단리를 위한 tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumsum(np_test_trade)[-1] :\", np.cumsum(np_test_trade)[-1])\n","print(\"total_pr : \", 1 + np.cumsum(np_test_trade)[-1])\n"]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":["VdukVo5-Suzj","Bw5JibDKSuzj","Pe0QpnORSuzk","E0n53hflJbnp","MlFkpO1MSuzl","t1E_eAyPSuzm","nUs4fjVHSuzl","WVAKq3i8Suzm","L7l5CTJfSuzn","x_XGJqBi8Jex","epgS5Dksu-HX","x2yj2SwAXDLp","1MNVIExLULhJ","EOXQbXixiQcK","c2729DJ6h720","xpyP5t8Ht_pE","mScdfR9hmjVu","xivLUsSGC4VF","EJ4f-3Zf4ImT","_blyFhQJUd5X","8b4SbvPrAPR1","X0FsT-8FZRti","13a-U32Uy50I","TBE0l6dHRYrE","Qys2Bw5Ou3u9","tApzvz_gK9lR","2gxvme1PC6ha","5la6usMOFzkX","OJqkmkpsLCYC"],"name":"stem3_10_vec_backi2(0421).ipynb","toc_visible":true,"provenance":[],"authorship_tag":"ABX9TyOIyp1kje3liQ8mJwB135K0"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}