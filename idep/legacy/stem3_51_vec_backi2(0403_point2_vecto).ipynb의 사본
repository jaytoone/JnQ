{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"6rmQpzEGXfCw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648972507947,"user_tz":-540,"elapsed":19872,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"31e7cac1-6d88-429b-a2fe-66b8cf1e2a29"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","import os, sys\n","\n","current_path = '/content/drive/My Drive/Colab Notebooks/JnQ/'\n","\n","os.chdir(current_path)\n","\n","strat_pkg = 'IDE'\n","\n","mpl_finance_path = '/content/drive/My Drive/Colab Notebooks/JnQ/mpl_finance'\n","zigzag_path = '/content/drive/My Drive/Colab Notebooks/JnQ/zigzag'\n","\n","if mpl_finance_path not in sys.path:\n","\n","  try:\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ')\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ/{}'.format(strat_pkg))\n","    sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ/funcs')\n","    sys.path.insert(0, mpl_finance_path)\n","    sys.path.insert(0, zigzag_path)\n","    \n","  except Exception as e:\n","    print(e)"]},{"cell_type":"markdown","metadata":{"id":"8uqYv5StTazo"},"source":["# requirements"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"9qGt60DKTZmf","executionInfo":{"status":"ok","timestamp":1648972520340,"user_tz":-540,"elapsed":12398,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["#!pip install zigzag --target=$'/content/drive/My Drive/Colab Notebooks/JnQ/zigzag'\n","\n","# !pip install findiff\n","# import nvstrings, nvcategory, cudf\n","# import cuml\n","# import cudf\n","\n","import os\n","from funcs.funcs_idep import *\n","from funcs.funcs_duration_v2 import *\n","from funcs.funcs_plot_check import *\n","from funcs.funcs_pairing import *\n","# from funcs.funcs_ide import *\n","# from funcs.funcs_indicator_candlescore import *\n","from funcs.funcs_indicator import *\n","from funcs.funcs_trader import *\n","from ast import literal_eval\n","import logging\n","import importlib\n","\n","import mpl_finance as mf\n","import matplotlib.pyplot as plt\n","from matplotlib import gridspec\n","# from zigzag import *\n","# from tqdm.notebook import tqdm\n","\n","import IPython\n","import IPython.display\n","\n","import numpy as np\n","# import jax.numpy as np\n","import pandas as pd\n","# import seaborn as sns\n","# import tensorflow as tf\n","from scipy import stats, signal\n","\n","import pickle\n","import shutil\n","import json\n","from easydict import EasyDict\n","import copy\n","\n","import datetime\n","from datetime import datetime\n","import random\n","import time\n","# import warnings\n","\n","# warnings.simplefilter(\"ignore\", category=RuntimeWarning)\n","\n","np.seterr(invalid=\"ignore\")\n","np.set_printoptions(suppress=True)\n","np.set_printoptions(linewidth=2000) \n","\n","pd.set_option('mode.chained_assignment',  None)\n","\n","pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)"]},{"cell_type":"markdown","metadata":{"id":"Ic1mfmwWCIBu"},"source":["# makeset - with to_htf dataframes"]},{"cell_type":"markdown","metadata":{"id":"AUSBU7T8Suzi"},"source":["## sync_check_make"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QmhLikYlSuzi"},"outputs":[],"source":["def sync_check_make(df):\n","\n","    make_itv_list = ['3T', '5T', '15T', '30T', 'H', '4H', 'D']\n","    offset_list = ['1h', '1h', '1h', '1h', '1h', '1h', '9h']\n","\n","    assert len(make_itv_list) == len(offset_list), \"length of itv & offset_list should be equal\"\n","        \n","    htf_df_list = [to_htf(df, itv_=itv_, offset=offset_) for itv_, offset_ in zip(make_itv_list, offset_list)]\n","\n","    df_3T, df_5T, df_15T, df_30T, df_H, df_4H, df_D = htf_df_list\n","\n","    for htf_df in htf_df_list:\n","      print(\"{} -> \".format(pd.infer_freq(htf_df.index)), htf_df.tail(1))\n","\n","    # heikinashi_v2(res_df_)\n","    # h_candle_v3(res_df, '5T')\n","\n","    # --------------- wave_range --------------- #\n","    # df = wave_range(df, 20, 40, ltf_df=None, touch_lbperiod=50)\n","\n","    # print(\"wave_range phase done\")\n","\n","\n","    # --------------- cbline --------------- #    \n","    # cloud_bline(df_3T, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_3T, [-1]), how='inner')\n","    # # cloud_bline(df_5T, 20)\n","    # # df = df.join(to_lower_tf_v2(df, df_5T, [-1]), how='inner')\n","    # cloud_bline(df_15T, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_15T, [-1]), how='inner')\n","    # cloud_bline(df_30T, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_30T, [-1]), how='inner')\n","    # cloud_bline(df_H, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_H, [-1]), how='inner')\n","    # cloud_bline(df_4H, 20)\n","    # df = df.join(to_lower_tf_v2(df, df_4H, [-1]), how='inner')\n","\n","    # print(\"cbline phase done\")\n","\n","    # --------------- sd_dc --------------- #\n","    # df = sd_dc(df, 20, 40)\n","    # df = sd_dc(df, 20, 20)\n","    # df = sd_dc(df_5T, 20, 40, df)\n","    # df = sd_dc(df_H, 20, 40, df)\n","\n","    # print(\"sd_dc phase done\")\n","\n","    # --------------- imb_ratio --------------- #\n","    # imb_ratio(df, '5T')\n","    # imb_ratio_v3(df, \"5T\")\n","    imb_ratio_v4(df, \"5T\")\n","\n","    # imb_ratio(df, 'H')\n","    # imb_ratio_v2(df, '5T')\n","    \n","    print(\"imb_ratio phase done\")\n","\n","    # --------------- rel_abs_ratio --------------- #\n","    # rel_abs_ratio(df, '5T', norm_period=120)\n","\n","    # --------------- normalize data --------------- #\n","    # itv = 'T'\n","    # lb_period = 15\n","    # target_col = 'close_{}{}'.format(itv, lb_period)\n","    # target_data = df['close'].diff(lb_period).to_numpy()\n","    # norm_data(df, target_data, target_col)    \n","    # print(\"normalize data phase done !\")\n","\n","    # --------------- lucid sar --------------- #\n","    # lucid_sar_v2(df)\n","    # lucid_sar_v2(df_3T)\n","    # df = df.join(to_lower_tf_v2(df, df_3T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_5T)\n","    # df = df.join(to_lower_tf_v2(df, df_5T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_15T)\n","    # df = df.join(to_lower_tf_v2(df, df_15T, [-2, -1]), how='inner')\n","    # lucid_sar_v2(df_30T)\n","    # df = df.join(to_lower_tf_v2(df, df_30T, [-2, -1]), how='inner')       \n","\n","    # print(\"sar phase done\")\n","\n","    # --------------- supertrend --------------- #\n","    # df = st_price_line(df, df_3T, '3m')\n","    # df = st_price_line(df, df_5T, '5m')\n","    # df = st_price_line(df, df_15T, '15m')\n","    # df = st_price_line(df, df_30T, '30m')\n","    # df = st_price_line(df, df_H, '1h')\n","    # df = st_price_line(df, df_4H, '4h')\n","\n","    # print(\"supertrend phase done\")\n","\n","    # --------------- rsi --------------- #  \n","    # df['rsi_1m'] = rsi(df, 14)    \n","    # df_5T['rsi_5m'] = rsi(df_5T, 14)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1]), columns=['rsi_5m']))\n","    \n","    # print(\"rsi phase done\")\n","\n","\n","    # --------------- cci --------------- #  \n","    # df['cci_1m'] = cci(df, 20)\n","\n","    # print(\"cci phase done\")\n","\n","    # --------------- ema --------------- #      \n","    # df_5T['ema_5m'] = ema(df_5T['close'], 195)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1]), columns=['ema_5m']))\n","    \n","    # print(\"ema phase done\")\n","    \n","    # # --------------- bband --------------- #  \n","    # df = bb_width_v2(df, period, multiple)\n","\n","    # print(\"bband phase done\")\n","\n","    \n","    # --------------- stochastic --------------- #\n","    # df['stoch_1m'] = stoch(df, 13, 3, 3)\n","\n","    # df_5T['stoch'] = stoch(df_5T, 13, 3, 3)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf_v2(df, df_5T, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","    # print(\"stoch phase done\")\n","\n","\n","    return df\n"]},{"cell_type":"markdown","metadata":{"id":"mEKyVbHWSuzi"},"source":["## make & save res_df (concat 생각하면, timeindex sync 맞춰야함)"]},{"cell_type":"markdown","metadata":{"id":"VdukVo5-Suzj"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11,"status":"error","timestamp":1636201718856,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"khKb9nhlSuzj","outputId":"02bf2c60-f298-4fe9-e6bb-78230ac1348c"},"outputs":[{"ename":"NameError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-5-ee034491b257>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0ma_day\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m3600\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m24\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtqdm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m   \u001b[0mkeys\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mfile_list\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'file_list' is not defined"]}],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  if '2021-07-01'.upper() not in file_list[i]:\n","  # if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    excel_name = key.replace(\".xlsx\", \"_st1h_backi2.xlsx\")\n","    excel_path = save_path + excel_name\n","\n","    if excel_name in exist_list:\n","      print(excel_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m 마지막 timeindex 의 date 기준, 08:59:59.999000 를 last timestamp 로 설정\n","      #      2. 시작 timestamp 는 모든 tf 의 가장 최근 시작 index,\n","      #       a. 1m 의 시작 timeindex 는 최소, htf 의 시작 timeindex 보다 interval 만큼 앞서야함\n","      #         i. 따라서 1m open_index, latest_open_index + 1d 를 하면 댐\n","      #           1. timestamp 으로 변환후 1day 를 더하고 datetime 으로 변환\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","    latest_open_index = sorted(open_indexes)[-1]\n","    \n","    open_ts = datetime.timestamp(latest_open_index)\n","    latest_open_index_1m = datetime.fromtimestamp(open_ts + a_day)\n","\n","    #   str 로 만들어 접근하면 불가함  #\n","    end_index = pd.to_datetime(str(df.index[-1]).split(\" \")[0] + \" 08:59:59.999000\")\n","    # break\n","\n","    sliced_df = df.loc[latest_open_index_1m:end_index] # to_lower_tf 의 기준 ltf\n","    sliced_second_df = second_df.loc[latest_open_index:end_index]\n","    sliced_third_df = third_df.loc[latest_open_index:end_index]\n","    sliced_fourth_df = fourth_df.loc[latest_open_index:end_index]\n","    sliced_fifth_df = fifth_df.loc[latest_open_index:end_index]\n","\n","    print(\"sliced index\")\n","    print(sliced_df.index[[0, -1]])\n","    print(sliced_second_df.index[[0, -1]])\n","    print(sliced_third_df.index[[0, -1]])\n","    print(sliced_fourth_df.index[[0, -1]])\n","    print(sliced_fifth_df.index[[0, -1]])\n","\n","    try:\n","      sliced_sixth_df = sixth_df.loc[latest_open_index:end_index]\n","      sliced_seventh_df = seventh_df.loc[latest_open_index:end_index]\n","\n","      print(sliced_sixth_df.index[[0, -1]])\n","      print(sliced_seventh_df.index[[0, -1]])\n","\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df, sliced_sixth_df, sliced_seventh_df)\n","    \n","    except:\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df)\n","\n","\n","\n","    res_df.to_excel(excel_path)\n","    print(excel_name, \"saved succesfully !\")"]},{"cell_type":"markdown","metadata":{"id":"Bw5JibDKSuzj"},"source":["### xlsx to feather"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":355,"referenced_widgets":["be2b848dbcb14a079a2b7bd605af6435"]},"id":"VA-_gcA7Suzj","outputId":"f6f3b55d-ec2c-4b2c-d62e-3de7c0384dc4"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"be2b848dbcb14a079a2b7bd605af6435","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/156 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["DatetimeIndex(['2021-06-28 00:00:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:02:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:04:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:14:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:29:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-09-14 03:59:59.999000', '2021-11-15 14:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-03-10 20:59:59.999000', '2021-11-15 16:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","\n","xlsx converted to feather !\n","DatetimeIndex(['2021-06-28 00:00:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:02:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:04:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:14:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:29:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-09-14 03:59:59.999000', '2021-11-15 14:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-03-10 20:59:59.999000', '2021-11-15 16:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","\n","xlsx converted to feather !\n"]}],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  # if '2021-07-01'.upper() not in file_list[i]:\n","  if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    feather_name = key.replace(\".xlsx\", \".ftr\")\n","    # feather_path = save_path + feather_name\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m 마지막 timeindex 의 date 기준, 08:59:59.999000 를 last timestamp 로 설정\n","      #      2. 시작 timestamp 는 모든 tf 의 가장 최근 시작 index,\n","      #       a. 1m 의 시작 timeindex 는 최소, htf 의 시작 timeindex 보다 interval 만큼 앞서야함\n","      #         i. 따라서 1m open_index, latest_open_index + 1d 를 하면 댐\n","      #           1. timestamp 으로 변환후 1day 를 더하고 datetime 으로 변환\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","\n","    df.reset_index().to_feather(date_path + feather_name, compression='lz4')\n","    second_df.reset_index().to_feather(date_path2 + feather_name, compression='lz4')\n","    third_df.reset_index().to_feather(date_path3 + feather_name, compression='lz4')\n","    fourth_df.reset_index().to_feather(date_path4 + feather_name, compression='lz4')\n","    fifth_df.reset_index().to_feather(date_path5 + feather_name, compression='lz4')\n","    sixth_df.reset_index().to_feather(date_path6 + feather_name, compression='lz4')\n","    seventh_df.reset_index().to_feather(date_path7 + feather_name, compression='lz4')\n","\n","    print(\"xlsx converted to feather !\")\n","    "]},{"cell_type":"markdown","metadata":{"id":"Pe0QpnORSuzk"},"source":["### add itv_name to ftr"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":223,"referenced_widgets":["e3225655da874b8d89cc8b2a381b3fb6"]},"executionInfo":{"elapsed":43664,"status":"ok","timestamp":1638246331122,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"M-gl30KxSuzk","outputId":"1cfcb580-8d25-4bd0-fdd0-213640779ce2"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"e3225655da874b8d89cc8b2a381b3fb6","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/175 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 BTCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 BCHUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 XRPUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 EOSUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 LTCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ETCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 LINKUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 XLMUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ADAUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ETHUSDT_1m.ftr\n"]}],"source":["save_path = './candlestick_concated/res_df/'\n","\n","# dir_path = \"bbdc3m_backi2\"\n","# date = '2021-10-10'\n","date = '2021-07-01'\n","\n","db_path = './candlestick_concated/database_bn/non_cum/%s/' % date\n","os.makedirs(os.path.join(db_path), exist_ok=True)\n","\n","# exist_list = os.listdir(os.path.join(save_path, dir_path))\n","# break\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","        \n","    df = shutil.copy(date_path + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n","    second_df = shutil.copy(date_path2 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval2))\n","    third_df = shutil.copy(date_path3 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval3))\n","    fourth_df = shutil.copy(date_path4 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval4))\n","    fifth_df = shutil.copy(date_path5 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval5))\n","    sixth_df = shutil.copy(date_path6 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval6))\n","    seventh_df = shutil.copy(date_path7 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval7))\n","\n","    print(\"copied to\" + db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n"]},{"cell_type":"markdown","metadata":{"id":"4oZ1ohTtSuzk"},"source":["### feather ver. (database to res_df)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vgVHpnUsSuzk"},"outputs":[],"source":["# db_path = './candlestick_concated/database_ub/' # upbit\n","db_path = './candlestick_concated/database_bn/'   # binance\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","save_dir_path = \"bb1d_backi2\"\n","date = '2022-02-17'\n","\n","# concat_path = 'noncat' # 새로운 cols 를 기존 cum/concat 에 붙이려는 경우\n","concat_path = 'concat'\n","cum_path = \"cum\"\n","# cum_path = \"non_cum\"  # non_cum 으로 진행하는 경우, row concat 용도이기 때문에 noncat -> concat 으로 변경 (base cols 를 모두 담고 있음)\n","\n","load_path = os.path.join(db_path, cum_path, date)\n","save_path = os.path.join(save_path, save_dir_path, concat_path, cum_path, date)\n","\n","os.makedirs(save_path, exist_ok=True)\n","\n","file_list = os.listdir(load_path)\n","exist_list = os.listdir(save_path)\n","# break\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","\n","    if \"_1m\" not in key:\n","      continue\n","\n","    # feather_name = key.replace(\".ftr\", \"_%.ftr\" % save_dir_path)\n","    feather_name = key.replace(\"_1m\", \"\")\n","    feather_path = os.path.join(save_path, feather_name)\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    df = pd.read_feather(os.path.join(load_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","    res_df = sync_check_make(df)\n","\n","    res_df.reset_index().to_feather(feather_path, compression='lz4')\n","    print(feather_path, \"saved succesfully !\")"]},{"cell_type":"markdown","source":["#### just add col to loaded df"],"metadata":{"id":"YxCPUzoyidwH"}},{"cell_type":"code","source":["res_df_ = sync_check_make(res_df_)  # suffix duplication 유의"],"metadata":{"id":"odqVwQHpYo1M","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648807669750,"user_tz":-540,"elapsed":3919,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"ec5b80e3-1094-45b0-9d16-7b68dc24fc99"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["3T ->                          open     high      low    close\n","index                                                  \n","2022-02-17 10:27:00  3148.85  3150.08  3146.38  3146.76\n","5T ->                          open     high      low    close\n","index                                                  \n","2022-02-17 10:25:00  3146.85  3150.08  3145.44  3146.76\n","15T ->                          open    high      low    close\n","index                                                 \n","2022-02-17 10:15:00  3143.99  3151.0  3139.14  3146.76\n","30T ->                         open     high      low    close\n","index                                                 \n","2022-02-17 10:00:00  3148.8  3158.68  3139.14  3146.76\n","H ->                         open     high      low    close\n","index                                                 \n","2022-02-17 10:00:00  3148.8  3158.68  3139.14  3146.76\n","4H ->                         open     high     low    close\n","index                                                \n","2022-02-17 09:00:00  3121.8  3158.68  3120.0  3146.76\n","D ->                         open     high     low    close\n","index                                                \n","2022-02-17 09:00:00  3121.8  3158.68  3120.0  3146.76\n","imb_ratio phase done\n"]}]},{"cell_type":"code","source":["res_df_.tail().iloc[:, -10:]\n","# res_df_.dtypes"],"metadata":{"id":"3SKglsQCj5_x","colab":{"base_uri":"https://localhost:8080/","height":237},"executionInfo":{"status":"ok","timestamp":1648807669751,"user_tz":-540,"elapsed":8,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"5d372ef3-e8bb-4302-dc73-d63015c7db41"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                         long_wave_1_T  long_wave_0_T  long_wave_point_T  short_ir_H  long_ir_H  body_rel_ratio_5T  short_ir3_5T  long_ir3_5T  short_ir4_5T  long_ir4_5T\n","index                                                                                                                                                                   \n","2022-02-17 10:25:59.999        3158.68        3114.98              False   -1.369498        NaN           0.056604    -27.444444          NaN     -1.553459          NaN\n","2022-02-17 10:26:59.999        3158.68        3114.98              False   -1.369498        NaN           0.056604    -27.444444          NaN     -1.553459          NaN\n","2022-02-17 10:27:59.999        3158.68        3114.98              False   -1.369498        NaN           0.056604    -27.444444          NaN     -1.553459          NaN\n","2022-02-17 10:28:59.999        3158.68        3114.98              False   -1.369498        NaN           0.056604    -27.444444          NaN     -1.553459          NaN\n","2022-02-17 10:29:59.999        3158.68        3114.98              False   -1.369498        NaN           0.056604    -27.444444          NaN     -1.553459          NaN"],"text/html":["\n","  <div id=\"df-7599f554-5d7d-4cf6-b40f-734ab64ce1ab\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>long_wave_1_T</th>\n","      <th>long_wave_0_T</th>\n","      <th>long_wave_point_T</th>\n","      <th>short_ir_H</th>\n","      <th>long_ir_H</th>\n","      <th>body_rel_ratio_5T</th>\n","      <th>short_ir3_5T</th>\n","      <th>long_ir3_5T</th>\n","      <th>short_ir4_5T</th>\n","      <th>long_ir4_5T</th>\n","    </tr>\n","    <tr>\n","      <th>index</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2022-02-17 10:25:59.999</th>\n","      <td>3158.68</td>\n","      <td>3114.98</td>\n","      <td>False</td>\n","      <td>-1.369498</td>\n","      <td>NaN</td>\n","      <td>0.056604</td>\n","      <td>-27.444444</td>\n","      <td>NaN</td>\n","      <td>-1.553459</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2022-02-17 10:26:59.999</th>\n","      <td>3158.68</td>\n","      <td>3114.98</td>\n","      <td>False</td>\n","      <td>-1.369498</td>\n","      <td>NaN</td>\n","      <td>0.056604</td>\n","      <td>-27.444444</td>\n","      <td>NaN</td>\n","      <td>-1.553459</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2022-02-17 10:27:59.999</th>\n","      <td>3158.68</td>\n","      <td>3114.98</td>\n","      <td>False</td>\n","      <td>-1.369498</td>\n","      <td>NaN</td>\n","      <td>0.056604</td>\n","      <td>-27.444444</td>\n","      <td>NaN</td>\n","      <td>-1.553459</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2022-02-17 10:28:59.999</th>\n","      <td>3158.68</td>\n","      <td>3114.98</td>\n","      <td>False</td>\n","      <td>-1.369498</td>\n","      <td>NaN</td>\n","      <td>0.056604</td>\n","      <td>-27.444444</td>\n","      <td>NaN</td>\n","      <td>-1.553459</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2022-02-17 10:29:59.999</th>\n","      <td>3158.68</td>\n","      <td>3114.98</td>\n","      <td>False</td>\n","      <td>-1.369498</td>\n","      <td>NaN</td>\n","      <td>0.056604</td>\n","      <td>-27.444444</td>\n","      <td>NaN</td>\n","      <td>-1.553459</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7599f554-5d7d-4cf6-b40f-734ab64ce1ab')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-7599f554-5d7d-4cf6-b40f-734ab64ce1ab button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-7599f554-5d7d-4cf6-b40f-734ab64ce1ab');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":121}]},{"cell_type":"code","source":["# ------------ save current res_df ------------ #\n","ftr_full_path = os.path.join(ftr_path, key)\n","res_df_.reset_index().to_feather(ftr_full_path, compression='lz4')  # key 잘 확인하고 저장\n","print(ftr_full_path, 'saved !')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XrgJPQRuisCa","executionInfo":{"status":"ok","timestamp":1648807677144,"user_tz":-540,"elapsed":2144,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"ac54ae29-4979-45ab-b76c-9eb3fb09f113"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["./candlestick_concated/res_df/bb1d_backi2/concat/cum/2022-02-17/2022-02-17 ETHUSDT.ftr saved !\n"]}]},{"cell_type":"markdown","metadata":{"id":"E0n53hflJbnp"},"source":["### htf candle check"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":489,"status":"ok","timestamp":1642148504926,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"6xW0yugCWvGz","outputId":"58106ff9-9709-4a62-bca2-1f6795d13322"},"outputs":[{"name":"stdout","output_type":"stream","text":["itv_ : 3T\n","                        open     high      low    close\n","index                                                  \n","2022-01-10 15:06:00  3169.97  3170.22  3159.51  3161.22\n","2022-01-10 15:09:00  3161.22  3163.98  3161.22  3163.82\n","2022-01-10 15:12:00  3163.82  3163.83  3156.02  3160.49\n","2022-01-10 15:15:00  3160.51  3164.29  3159.01  3162.93\n","2022-01-10 15:18:00  3163.02  3164.29  3162.41  3164.28\n","                            open     high      low    close    volume\n","index                                                                \n","2022-01-10 15:08:59.999  3169.97  3170.22  3159.51  3161.22  4241.449\n","2022-01-10 15:11:59.999  3161.22  3163.98  3161.22  3163.82  1143.874\n","2022-01-10 15:14:59.999  3163.82  3163.83  3156.02  3160.49  2135.292\n","2022-01-10 15:17:59.999  3160.51  3164.29  3159.01  3162.93  1011.598\n","2022-01-10 15:20:59.999  3163.02  3164.29  3162.41  3163.82   466.868\n"]}],"source":["itv_list = ['3T', '5T', '15T', '30T', '1H', '4H']\n","comp_df_list = [second_df, third_df, fourth_df, fifth_df, sixth_df, seventh_df]\n","offset_list = ['1h', '2min', '2min', '2min', '2min', '2min']\n","# itv_list = ['4H']\n","# comp_df_list = [seventh_df]\n","\n","slice_len = 100\n","for itv_, comp_df_, offset in zip(itv_list, comp_df_list, offset_list):\n","\n","  print(\"itv_ :\", itv_)\n","\n","  # df = h_candle_v2(df, '3T')\n","  # end_ts = \n","  h_res_df = df.resample(itv_, offset=offset).agg({\n","          'open': 'first',\n","          'high': 'max',\n","          'low': 'min',\n","          'close': 'last'\n","      })\n","\n","  #   앞은 길이가 다르고, 뒤에서부터 잘라서 비교    #\n","  #   last_row 빼고는 동일, 4h 제외\n","  # print(df.tail())\n","  print(h_res_df.tail())\n","  print(comp_df_.tail())\n","  # # print(h_res_df.head())\n","  # # print(second_df.head())\n","\n","  # print(len(h_res_df))\n","  # print(len(second_df))\n","\n","  # print(h_res_df.values[-slice_len:])\n","  # print(second_df.iloc[:, :4].values[-slice_len:])\n","  # print(np.argwhere(h_res_df.values[-slice_len:] != comp_df_.iloc[:, :4].values[-slice_len:]))\n","  # print()\n","  break"]},{"cell_type":"markdown","metadata":{"id":"jTN3M842Suzl"},"source":["## concat & save new res_df"]},{"cell_type":"markdown","metadata":{"id":"MlFkpO1MSuzl"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"U-3QkfbFSuzl"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","dict_name = \"2021-07-01 ETHUSDT_bb15m_backi2_res_dfs.pkl\"\n","\n","#     load with pickle    #\n","with open(save_path + dict_name, 'rb') as f:\n","  saved_res_df_dict = pickle.load(f)\n","\n","print(dict_name, \"loaded !\")\n","res_df_files = os.listdir(save_path)\n","res_df_files.reverse()\n","\n","print(res_df_files)\n","\n","res_df_dict = {}\n","\n","base_postfix = '_bb15m_backi2.xlsx'\n","new_postfix = '_st1h_backi2.xlsx'\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for k_i, key in enumerate(res_df_files):\n","\n","  if '2021-07-01'.upper() not in key:\n","  # if '2021-10-10'.upper() not in key:\n","    continue\n","\n","  # if \"link\".upper() not in key:\n","  # if \"btc\".upper() not in key:\n","  #   continue\n","\n","  if new_postfix not in key:\n","    continue\n","\n","  # if key in \n","\n","  if sample_cnt == max_cnt:\n","    dict_name = \"%s_res_dfs.pkl\" % key.split(\".\")[0]\n","    print(\"dict_name :\", dict_name)\n","\n","  base_df = saved_res_df_dict[key.replace(new_postfix, base_postfix)]\n","  # base_df = pd.read_excel(save_path + key.replace(new_postfix, base_postfix), index_col=0)  \n","  res_df = pd.read_excel(save_path + key, index_col=0)  \n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  droped_new_res_df.head()\n","  # break\n","\n","  # res_df_dict[key] = res_df\n","  res_df_dict[key] = droped_new_res_df\n","  print(key, \"saved to dict !\")\n","\n","  #     save with pickle    #\n","  with open(save_path + dict_name, 'wb') as f:\n","    pickle.dump(res_df_dict, f)\n","\n","  sample_cnt -= 1\n","\n","  if sample_cnt <= 0:\n","    break\n"]},{"cell_type":"markdown","metadata":{"id":"t1E_eAyPSuzm"},"source":["### new col to latest feather (1m_indi. only)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xyI5NrM7Suzm"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","cum_dir = \"cum\"\n","\n","new_dir_path = \"rsi_backi2\"\n","base_dir_path = \"bbdc3m_backi2\"\n","\n","new_date = '2021-11-17'\n","\n","\n","\n","#     load ftr list    #\n","base_save_path = os.path.join(save_path, base_dir_path, \"concat/cum\", new_date)\n","new_save_path = base_save_path.replace(base_dir_path, new_dir_path)\n","\n","#     save to (new) cum dir    #\n","#      1. if dir. not exists, makedir\n","os.makedirs(new_save_path, exist_ok=True)\n","\n","ftr_list = [s for s in os.listdir(base_save_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_save_path, key), columns=None, use_threads=True).set_index(\"index\")\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  droped_new_res_df = sync_check(base_df)\n","\n","  # new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # # new_res_df.head()\n","\n","  # intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  # droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break\n","\n","  droped_new_res_df.reset_index().to_feather(os.path.join(new_save_path, key), compression='lz4')\n","\n","  print(os.path.join(new_save_path, key), \"saved !\")\n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"markdown","metadata":{"id":"nUs4fjVHSuzl"},"source":["### feather ver. (col concat)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2001,"status":"ok","timestamp":1642739652513,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"6cu-Y82iSuzl","outputId":"273507b8-0d33-48b5-d9c5-00547688ef73"},"outputs":[{"name":"stdout","output_type":"stream","text":["['2022-01-10 ETHUSDT.ftr']\n","./candlestick_concated/res_df/st3m_backi2/concat/cum/2022-01-10/2022-01-10 ETHUSDT.ftr saved !\n"]}],"source":["new_dir_path = \"st3m_backi2\"\n","base_dir_path = \"bb1d_backi2\"\n","\n","# new_date = \"2021-11-17\"\n","new_date = \"2022-01-10\"\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","save_path = './candlestick_concated/res_df/'\n","save_path = os.path.join(save_path, new_dir_path, \"concat/cum\", new_date)   \n","# save_path = os.path.join(save_path, new_dir_path, \"concat/non_cum\", new_date)   # row col 하려면 concat 맞음, noncum 사용\n","os.makedirs(save_path, exist_ok=True)\n","\n","\n","#     load ftr list    #\n","# ftr_list = [s for s in os.listdir(os.path.join(save_path, new_dir_path)) if \"ftr\" in s]\n","\n","noncat_path = save_path.replace(\"concat/\", \"noncat/\")\n","ftr_list = [s for s in os.listdir(noncat_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","  try:\n","\n","    #       read from base postfix's directory    #\n","    base_df = pd.read_feather(os.path.join(save_path.replace(new_dir_path, base_dir_path), key), columns=None, use_threads=True).set_index(\"index\")\n","    res_df = pd.read_feather(os.path.join(noncat_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","    # print(base_df.head())\n","    # print(res_df.head())\n","    # break\n","\n","    new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","    # new_res_df.head()\n","\n","    droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","    # droped_new_res_df.head()\n","    # break\n","\n","    droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","    # res_df_dict[key] = res_df\n","    # res_df_dict[key] = droped_new_res_df\n","    print(os.path.join(save_path, key), \"saved !\")\n","  \n","  except Exception as e:\n","    print(\"error occured ! :\", e)\n","  \n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"markdown","metadata":{"id":"WVAKq3i8Suzm"},"source":["### feather ver. (row concat) , database cum 도 호환가능"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7893,"status":"ok","timestamp":1645188189702,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"XG2p9OhhSuzm","outputId":"e67874ba-0710-4f38-966f-5ea7d42403cb"},"outputs":[{"output_type":"stream","name":"stdout","text":["['2022-02-17 ETHUSDT_1m.ftr']\n","                            open     high     low    close  volume\n","index                                                             \n","2019-11-27 16:45:59.999   146.00   146.00   146.0   146.00   0.010\n","2022-02-17 10:29:59.999  3146.86  3147.22  3146.4  3146.76  26.727\n","continuity checked !\n","./candlestick_concated/database_bn/cum/2022-02-17/2022-02-17 ETHUSDT_1m.ftr saved !\n"]}],"source":["save_path = './candlestick_concated/res_df/'        # cols 추가된 cum db 에 new_row's cols 기준으로 합치는 경우\n","save_path = './candlestick_concated/database_bn/'   # ohlcv cum db 만들 경우\n","\n","base_date = '2022-01-10'\n","new_date = '2022-02-17'\n","\n","#     load ftr list    #\n","if \"database\" in save_path:\n","  base_dir_path = \"\"\n","  new_dir_path = \"\"\n","  concat_dir = \"\"\n","else:\n","  base_dir_path = \"sar_backi2\"\n","  new_dir_path = \"bb4h_backi2\"  # dir_path 가 base / new 서로 달라질 수 있어서 분할함\n","  concat_dir = \"concat\"\n","\n","base_date_path = os.path.join(save_path, base_dir_path, concat_dir, \"cum\", base_date)      # 기존 cum db 와 new_date db 를 cum 진행\n","# base_date_path = os.path.join(save_path, base_dir_path, concat_dir, \"non_cum\", base_date)    # non_cum db 와 new_date db 를 cum 진행\n","\n","# new_date_path = os.path.join(save_path, new_dir_path, concat_dir, \"cum\", new_date)      # 상황별로 직접 선택해야할 듯\n","new_date_path = os.path.join(save_path, new_dir_path, concat_dir, \"non_cum\", new_date)\n","\n","\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","save_path = new_date_path.replace(\"non_cum\", \"cum\")   # non_cum 아니여도 무관\n","os.makedirs(save_path, exist_ok=True)   # noncat / concat 두가지 경우 존재가능할 것\n","# os.makedirs(os.path.join(save_path, dir_path, \"noncat/cum\", new_date), exist_ok=True)\n","\n","\n","ftr_list = [s for s in os.listdir(new_date_path) if \"ftr\" in s]\n","exist_list = os.listdir(save_path)\n","print(ftr_list)\n","# break\n","\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:   # date rejection\n","    continue\n","  if '1m' not in key:  # itv rejection\n","    continue\n","\n","  # if key in exist_list:\n","  #   print(key, \"already exist !\")\n","  #   continue\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_date_path, key.replace(new_date, base_date)), columns=None, use_threads=True).set_index(\"index\")   # key 에 new_date 담겨있음\n","  res_df = pd.read_feather(os.path.join(new_date_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break  \n","  \n","  print(droped_new_res_df.iloc[[0, -1]])  \n","\n","  # ------------- verify df continuity directly itv by itv ------------- #\n","  true_continue = True\n","  if \"_\" in key:\n","\n","    interval = key.split(\".\")[0].split(\"_\")[-1] \n","    itv_num = to_itvnum(interval)\n","\n","    # verified_df = consecutive_df(droped_new_res_df, to_itvnum(interval))\n","    # verified_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","    # res_df_dict[key] = res_df\n","    # res_df_dict[key] = droped_new_res_df  \n","\n","    np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","    ideal_ts_gap = 60 * itv_num\n","\n","    for ts_i in range(len(np_idx_ts)):\n","      \n","      if ts_i != 0:\n","        ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","\n","        if ts_gap > ideal_ts_gap or ts_gap < ideal_ts_gap:\n","        # if ts_gap == ideal_ts_gap:\n","          print(droped_new_res_df.index[ts_i - 1])\n","          print(droped_new_res_df.index[ts_i])\n","          # print(ts_gap)\n","          print(\"------------------ unideal ts_gap ------------------\")\n","          true_continue = False\n","\n","    print(\"continuity checked !\")\n","\n","  if true_continue:\n","    droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","  print(os.path.join(save_path, key), \"saved !\")\n","  \n"]},{"cell_type":"markdown","metadata":{"id":"L7l5CTJfSuzn"},"source":["### check continuity"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nGzMGyC3Suzn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1643987442996,"user_tz":-540,"elapsed":5408,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"4fface63-62d9-4e2a-e22d-bdd26f428e0e"},"outputs":[{"output_type":"stream","name":"stdout","text":["                             open    high       low     close   volume\n","index                                                                 \n","2020-09-14 16:00:59.999    3.2002    4.91    3.2002    3.2745  11567.0\n","2022-02-04 23:57:59.999  103.7500  103.75  103.6000  103.6000   6427.0\n","[1.60009926e+09 1.60009932e+09 1.60009938e+09 1.60009944e+09\n"," 1.60009950e+09 1.60009956e+09 1.60009962e+09 1.60009968e+09\n"," 1.60009974e+09 1.60009980e+09]\n"]}],"source":["# print(droped_new_res_df.columns)\n","\n","print(droped_new_res_df.iloc[[0, -1]])\n","\n","np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","\n","print(np_idx_ts[:10])\n","for ts_i in range(len(np_idx_ts)):\n","  \n","  if ts_i != 0:\n","    ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","\n","    if ts_gap > 60 or ts_gap < 60:\n","\n","      print(\"invalid ts_gap found !\")\n","    # if ts_gap == 60:\n","      print(droped_new_res_df.index[ts_i - 1])\n","      print(droped_new_res_df.index[ts_i])\n","      # print(ts_gap)\n","      print()\n"]},{"cell_type":"markdown","metadata":{"id":"x_XGJqBi8Jex"},"source":["### check length of front missing value + middle_data non_missing validity"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":311,"status":"ok","timestamp":1641887318959,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"yRNwqVeAu8X8","outputId":"fb236bde-4527-4bc7-eac4-4bee42532c5a"},"outputs":[{"name":"stdout","output_type":"stream","text":["2.167361111111111\n","38\n"]}],"source":["#       1. new_date 의 시작 timeidx 와 base_date end timeidx 의 최소 days' gap     #\n","#       2. new_date 의 시작 부분 indi. value 는 np.nan 으로 채워질 거기 때문에 계산해야함    #\n","\n","df_count = droped_new_res_df.count()\n","len_missing = df_count.max() - df_count.min()\n","print(len_missing / 1440)\n","\n","#       3. \n","missing_sliced_df = droped_new_res_df.iloc[len_missing:]\n","df_count2 = missing_sliced_df.count()\n","# print(df_count2)\n","print((df_count2.max() - df_count2.min()))    # this value should be zero !\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"AY7E2_hTBsyM"},"outputs":[],"source":["# df_count2.index[df_count2.argmin()]\n","# missing_sliced_df.head(5)\n","\n","stay_missed = np.sum(pd.isnull(missing_sliced_df), axis=0)\n","print(stay_missed)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"p9yqewOw9g33"},"outputs":[],"source":["stay_missed_cols = stay_missed[stay_missed != 0].index\n","\n","for sm_col in stay_missed_cols:\n","  \n","  row_idx = np.argwhere(pd.isnull(missing_sliced_df[sm_col].values))\n","\n","  plt.figure(figsize=(3,3))\n","  plt.plot(row_idx)\n","  plt.ylim(0, len(missing_sliced_df))\n","  plt.title(sm_col)\n","\n","  plt.show()\n"]},{"cell_type":"markdown","source":["## legacy"],"metadata":{"id":"MSUY4nnku3s9"}},{"cell_type":"markdown","source":["### mv files"],"metadata":{"id":"epgS5Dksu-HX"}},{"cell_type":"code","source":["df_path = './candlestick_concated/survey_df_v2'\n","files_ = os.listdir(df_path)"],"metadata":{"id":"aJcVpEdrslA5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dirs = [file_ for file_ in files_ if not file_.endswith('.ftr')]\n","files = [file_ for file_ in files_ if file_.endswith('.ftr')]"],"metadata":{"id":"cEKyEYkotFDy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dirs"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IgM79tcxtPVZ","executionInfo":{"status":"ok","timestamp":1644111921194,"user_tz":-540,"elapsed":4,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"84305b35-eb52-49fc-d5fd-fdbc64cc8679"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['2022-01-10 ETHUSDT', '2022-01-10 ETHUSDT_all', '2022-02-04 SOLUSDT']"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["def move_fn(dir_, file_):\n","  src_path = os.path.join(df_path, file_)\n","  dst_path = os.path.join(df_path, dir_, file_)\n","  shutil.move(src_path, dst_path)\n","  print(\"moved to {}\".format(dst_path))\n","\n","_ = [move_fn('2022-01-10 ETHUSDT_all', file_) for file_ in files if 'eth'.upper() in file_]\n","# sols\n"],"metadata":{"id":"M767iRtwtRQP"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Ci_jUnNTZbm9"},"source":["### load data (old)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":22503,"status":"ok","timestamp":1638246127510,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"_bXyS2yrZYC6","outputId":"b24a8a66-48b1-42b5-aa79-63f5a8542bac"},"outputs":[{"name":"stdout","output_type":"stream","text":["['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr']\n","['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 LTCUSDT.ftr']\n","['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 ETHUSDT.ftr']\n","['2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr']\n","['2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-08-31 SUSHIUSDT.xlsx', '2021-08-31 CVCUSDT.xlsx', '2021-08-31 BTSUSDT.xlsx', '2021-08-31 HOTUSDT.xlsx', '2021-08-31 ZRXUSDT.xlsx', '2021-08-31 QTUMUSDT.xlsx', '2021-08-31 IOTAUSDT.xlsx', '2021-08-31 BTCBUSD.xlsx', '2021-08-31 WAVESUSDT.xlsx', '2021-08-31 ADAUSDT.xlsx', '2021-08-31 LITUSDT.xlsx', '2021-08-31 XTZUSDT.xlsx', '2021-08-31 BNBUSDT.xlsx', '2021-08-31 AKROUSDT.xlsx', '2021-08-31 HNTUSDT.xlsx', '2021-08-31 ETCUSDT.xlsx', '2021-08-31 XMRUSDT.xlsx', '2021-08-31 YFIUSDT.xlsx', '2021-08-31 ETHUSDT.xlsx', '2021-08-31 ALICEUSDT.xlsx', '2021-08-31 ALPHAUSDT.xlsx', '2021-08-31 SFPUSDT.xlsx', '2021-08-31 REEFUSDT.xlsx', '2021-08-31 BATUSDT.xlsx', '2021-08-31 DOGEUSDT.xlsx', '2021-08-31 TRXUSDT.xlsx', '2021-08-31 RLCUSDT.xlsx', '2021-08-31 BTCSTUSDT.xlsx', '2021-08-31 STORJUSDT.xlsx', '2021-08-31 SNXUSDT.xlsx', '2021-08-31 XLMUSDT.xlsx', '2021-08-31 NEOUSDT.xlsx', '2021-08-31 UNFIUSDT.xlsx', '2021-08-31 SANDUSDT.xlsx', '2021-08-31 DASHUSDT.xlsx', '2021-08-31 KAVAUSDT.xlsx', '2021-08-31 RUNEUSDT.xlsx', '2021-08-31 CTKUSDT.xlsx', '2021-08-31 LINKUSDT.xlsx', '2021-08-31 CELRUSDT.xlsx', '2021-08-31 RSRUSDT.xlsx', '2021-08-31 DGBUSDT.xlsx', '2021-08-31 SKLUSDT.xlsx', '2021-08-31 RENUSDT.xlsx', '2021-08-31 TOMOUSDT.xlsx', '2021-08-31 MTLUSDT.xlsx', '2021-08-31 LTCUSDT.xlsx', '2021-08-31 DODOUSDT.xlsx', '2021-08-31 EGLDUSDT.xlsx', '2021-08-31 KSMUSDT.xlsx', '2021-08-31 ONTUSDT.xlsx', '2021-08-31 VETUSDT.xlsx', '2021-08-31 TRBUSDT.xlsx', '2021-08-31 MANAUSDT.xlsx', '2021-08-31 COTIUSDT.xlsx', '2021-08-31 CHRUSDT.xlsx', '2021-08-31 ETHUSDT_210924.xlsx', '2021-08-31 BAKEUSDT.xlsx', '2021-08-31 GRTUSDT.xlsx', '2021-08-31 FLMUSDT.xlsx', '2021-08-31 EOSUSDT.xlsx', '2021-08-31 OGNUSDT.xlsx', '2021-08-31 SCUSDT.xlsx', '2021-08-31 BALUSDT.xlsx', '2021-08-31 STMXUSDT.xlsx', '2021-08-31 BTTUSDT.xlsx', '2021-08-31 LUNAUSDT.xlsx', '2021-08-31 DENTUSDT.xlsx', '2021-08-31 KNCUSDT.xlsx', '2021-08-31 SRMUSDT.xlsx', '2021-08-31 ENJUSDT.xlsx', '2021-08-31 ZENUSDT.xlsx', '2021-08-31 ATOMUSDT.xlsx', '2021-08-31 NEARUSDT.xlsx', '2021-08-31 BCHUSDT.xlsx', '2021-08-31 IOSTUSDT.xlsx', '2021-08-31 HBARUSDT.xlsx', '2021-08-31 ZECUSDT.xlsx', '2021-08-31 1000SHIBUSDT.xlsx', '2021-08-31 TLMUSDT.xlsx', '2021-08-31 BZRXUSDT.xlsx', '2021-08-31 ETHBUSD.xlsx', '2021-08-31 AAVEUSDT.xlsx', '2021-08-31 GTCUSDT.xlsx', '2021-08-31 ALGOUSDT.xlsx', '2021-08-31 ICPUSDT.xlsx', '2021-08-31 BTCUSDT_210924.xlsx', '2021-08-31 LRCUSDT.xlsx', '2021-08-31 AVAXUSDT.xlsx', '2021-08-31 MATICUSDT.xlsx', '2021-08-31 1INCHUSDT.xlsx', '2021-08-31 MKRUSDT.xlsx', '2021-08-31 THETAUSDT.xlsx', '2021-08-31 UNIUSDT.xlsx', '2021-08-31 LINAUSDT.xlsx', '2021-08-31 RVNUSDT.xlsx', '2021-08-31 FILUSDT.xlsx', '2021-08-31 NKNUSDT.xlsx', '2021-08-31 DEFIUSDT.xlsx', '2021-08-31 COMPUSDT.xlsx', '2021-08-31 BTCDOMUSDT.xlsx', '2021-08-31 SOLUSDT.xlsx', '2021-08-31 BTCUSDT.xlsx', '2021-08-31 OMGUSDT.xlsx', '2021-08-31 ICXUSDT.xlsx', '2021-08-31 BLZUSDT.xlsx', '2021-08-31 FTMUSDT.xlsx', '2021-08-31 YFIIUSDT.xlsx', '2021-08-31 KEEPUSDT.xlsx', '2021-08-31 BANDUSDT.xlsx', '2021-08-31 XRPUSDT.xlsx', '2021-08-31 SXPUSDT.xlsx', '2021-08-31 CRVUSDT.xlsx', '2021-08-31 BELUSDT.xlsx', '2021-08-31 DOTUSDT.xlsx', '2021-08-31 XEMUSDT.xlsx', '2021-08-31 ONEUSDT.xlsx', '2021-08-31 ZILUSDT.xlsx', '2021-08-31 AXSUSDT.xlsx', '2021-08-31 OCEANUSDT.xlsx', '2021-08-31 CHZUSDT.xlsx', '2021-08-31 ANKRUSDT.xlsx', '2021-08-31 SUSHIUSDT_res_dfs.pkl', '2021-07-01 ADAUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr']\n","['2021-07-01 BTCUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr']\n","['2021-02-07 BTC.xlsx', '2021-02-07 ETH.xlsx', '2021-02-11 BCHUSDT.xlsx', '2021-02-11 XRPUSDT.xlsx', '2021-02-11 EOSUSDT.xlsx', '2021-02-11 LTCUSDT.xlsx', '2021-02-11 ETCUSDT.xlsx', '2021-02-11 LINKUSDT.xlsx', '2021-02-11 XLMUSDT.xlsx', '2021-02-11 ADAUSDT.xlsx', '2021-02-11 XMRUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr']\n","['2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx']\n"]}],"source":["interval = '1m'\n","date_path = './candlestick_concated/%s/quant_v2/' % interval\n","file_list = os.listdir(date_path)\n","print((file_list))\n","\n","interval2 = '3m'\n","date_path2 = './candlestick_concated/%s/quant_v2/' % interval2\n","file_list2 = os.listdir(date_path2)\n","print((file_list2))\n","\n","interval3 = '5m'\n","date_path3 = './candlestick_concated/%s/quant_v2/' % interval3\n","file_list3 = os.listdir(date_path3)\n","print((file_list3))\n","\n","interval4 = '15m'\n","date_path4 = './candlestick_concated/%s/quant_v2/' % interval4\n","file_list4 = os.listdir(date_path4)\n","print((file_list4))\n","\n","interval5 = '30m'\n","date_path5 = './candlestick_concated/%s/quant_v2/' % interval5\n","file_list5 = os.listdir(date_path5)\n","print((file_list5))\n","\n","interval6 = '1h'\n","date_path6 = './candlestick_concated/%s/quant_v2/' % interval6\n","file_list6 = os.listdir(date_path6)\n","print((file_list6))\n","\n","interval7 = '4h'\n","date_path7 = './candlestick_concated/%s/quant_v2/' % interval7\n","file_list7 = os.listdir(date_path7)\n","print((file_list7))\n","\n","interval8 = '1d'\n","date_path8 = './candlestick_concated/%s/quant_v2/' % interval8\n","file_list8 = os.listdir(date_path8)\n","print((file_list8))"]},{"cell_type":"markdown","metadata":{"id":"M8-EChy0VsDr"},"source":["### cudf"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":414,"status":"ok","timestamp":1638754008241,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"b09qAb1sVtRP","outputId":"3a824202-064a-4544-b791-ffc777bb3f9c"},"outputs":[{"name":"stdout","output_type":"stream","text":["usage: conda [-h] [-V] command ...\n","conda: error: unrecognized arguments: -t=/content/notebooks\n"]}],"source":["# !conda install -c rapidsai-nightly -c nvidia -c numba -c conda-forge \\\n","#     cudf python=3.7 cudatoolkit=11.1 -t=$nb_path"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":413,"status":"ok","timestamp":1638754715310,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"Jnz6i7ZqRnb0","outputId":"207bc57b-a17a-4f67-fb26-24e46e2c6e26"},"outputs":[{"name":"stdout","output_type":"stream","text":["***********************************************************************\n","Woo! Your instance has the right kind of GPU, a Tesla P100-PCIE-16GB!\n","***********************************************************************\n","\n"]}],"source":["# !git clone https://github.com/rapidsai/rapidsai-csp-utils.git\n","!python rapidsai-csp-utils/colab/env-check.py"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4sKA_9Dbg4s2"},"outputs":[],"source":["# This will update the Colab environment and restart the kernel.  Don't run the next cell until you see the session crash.\n","!bash rapidsai-csp-utils/colab/update_gcc.sh\n","import os\n","os._exit(00)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"d1C4pNiBhYHX"},"outputs":[],"source":["# This will install CondaColab.  This will restart your kernel one last time.  Run this cell by itself and only run the next cell once you see the session crash.\n","import condacolab\n","condacolab.install()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":414,"status":"ok","timestamp":1638754863073,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"iGx3ACTvZqck","outputId":"e8379cc4-c325-4fe0-ac46-5fbbd7d38829"},"outputs":[{"name":"stdout","output_type":"stream","text":["✨🍰✨ Everything looks OK!\n"]}],"source":["# you can now run the rest of the cells as normal\n","import condacolab\n","condacolab.check()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oR8s7U8c7C28","outputId":"22be2731-fae1-45fc-f310-e48f60774bb2"},"outputs":[{"name":"stdout","output_type":"stream","text":["Installing RAPIDS Stable 21.10\n","Starting the RAPIDS install on Colab.  This will take about 15 minutes.\n","Collecting package metadata (current_repodata.json): ...working... done\n","Solving environment: ...working... WARNING conda.core.solve:_add_specs(611): pinned spec cudatoolkit=11.1 conflicts with explicit specs.  Overriding pinned spec.\n","failed with initial frozen solve. Retrying with flexible solve.\n","Solving environment: ...working... WARNING conda.core.solve:_add_specs(611): pinned spec cudatoolkit=11.1 conflicts with explicit specs.  Overriding pinned spec.\n","failed with repodata from current_repodata.json, will retry with next repodata source.\n","Collecting package metadata (repodata.json): ...working... done\n"]}],"source":["# Installing RAPIDS is now 'python rapidsai-csp-utils/colab/install_rapids.py <release> <packages>'\n","# The <release> options are 'stable' and 'nightly'.  Leaving it blank or adding any other words will default to stable.\n","# The <packages> option are default blank or 'core'.  By default, we install RAPIDSAI and BlazingSQL.  The 'core' option will install only RAPIDSAI and not include BlazingSQL, \n","!python rapidsai-csp-utils/colab/install_rapids.py stable\n","import os\n","os.environ['NUMBAPRO_NVVM'] = '/usr/local/cuda/nvvm/lib64/libnvvm.so'\n","os.environ['NUMBAPRO_LIBDEVICE'] = '/usr/local/cuda/nvvm/libdevice/'\n","os.environ['CONDA_PREFIX'] = '/usr/local'"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kWsxi4ZpKtGt"},"outputs":[],"source":["import shutil\n","import sys\n","\n","colab_env = \"/usr/lib\"\n","\n","rapids_path = os.path.join(current_path, \"rapidsai-csp-utils/lib\")\n","rapids_libs = os.listdir(rapids_path)\n","print(rapids_libs)\n","# break\n","\n","for lib_ in rapids_libs:\n","  try:\n","    shutil.copy(os.path.join(rapids_path, lib_), os.path.join(colab_env, lib_))\n","    sys.path.append(os.path.join(colab_env, lib_))\n","    print(\"copied to\" + os.path.join(colab_env, lib_))\n","  except Exception as e:\n","    print(e)"]},{"cell_type":"markdown","metadata":{"id":"Iy76iO7gztne"},"source":["### move legacy files"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hMRht32Czwry"},"outputs":[],"source":["# print()\n","cur_dir_list = os.listdir('.')\n","for f in cur_dir_list:\n","  if 'legacy' in f :\n","    # print(f)\n","    if os.path.isdir(current_path + f,):\n","      continue\n","\n","    shutil.move(current_path + f, current_path + 'legacy/' + f)\n","    print(\"moved to\" + current_path + 'legacy/' +  f)"]},{"cell_type":"markdown","metadata":{"id":"5duWn8t4BRyv"},"source":["# IDE platform\n"]},{"cell_type":"markdown","metadata":{"id":"6HOjnZjSgzk1"},"source":["## load ftr_list"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":8562,"status":"ok","timestamp":1648972528900,"user":{"displayName":"7th June","userId":"08178289703395036410"},"user_tz":-540},"id":"7FPBG5Qqg2jB","outputId":"7b8b5525-76d0-4a7e-cf71-6ac5b578f8bb"},"outputs":[{"output_type":"stream","name":"stdout","text":["['2022-02-17 ETHUSDT.ftr']\n","2022-02-17 ETHUSDT.ftr loaded !\n","load res_df_ elapsed time : 6.923921346664429\n"]}],"source":["save_path = './candlestick_concated/res_df/'\n","\n","dir_path = \"bb4h_backi2\"\n","dir_path = \"bb1d_backi2\"\n","date = \"2022-01-10\"\n","date = \"2022-02-17\"\n","\n","ftr_path = os.path.join(save_path, dir_path, \"concat/cum\", date)\n","\n","# ------ load ftr list ------ #\n","ftr_list = [s for s in os.listdir(ftr_path) if \"ftr\" in s if date in s]\n","# ftr_list = [s for s in os.listdir(os.path.join(save_path, dir_path)) if \"ftr\" in s if date in s]\n","print(ftr_list)\n","\n","start_0 = time.time()\n","key = ftr_list[0]  # tempoaray use single key\n","res_df_ = pd.read_feather(os.path.join(ftr_path, key), columns=None, use_threads=True).set_index(\"index\")\n","# print(res_df_.head())\n","print(key, \"loaded !\")\n","print(\"load res_df_ elapsed time :\", time.time() - start_0)"]},{"cell_type":"code","source":["res_df_.dtypes"],"metadata":{"id":"RQH_l4opEh_O"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### edit cols"],"metadata":{"id":"x2yj2SwAXDLp"}},{"cell_type":"code","source":["col_list = list(res_df_.columns)\n","# # [col_ for col_ in col_list if 'score' in col_]\n","\n","# ------ drop ------ #\n","# res_df_.drop([col_ for col_ in col_list if '_T20' in col_], inplace=True, axis=1)\n","# res_df_.drop([col_ for col_ in col_list if '_T40' in col_], inplace=True, axis=1)\n","res_df_.drop([col_ for col_ in col_list if 'base_T' in col_], inplace=True, axis=1)\n","\n","# ------ replace ------ #\n","# for c_i, col_ in enumerate(col_list):\n","#   # if 'eTa_5T' in col_:\n","#   # if col_[-1] in ['m', 'h', 'd', 'H'] and '_' in col_:eTa_5T\n","#   # if col_[0] in ['h'] and '_' in col_:\n","#   if 'bir_' in col_:\n","\n","#     col_list[c_i] = col_.replace('bir_', 'ir_')\n","#     # col_list[c_i] = col_.replace('m', 'T').replace('h', 'H').replace('1T', 'T')\n","#     # col_list[c_i] = col_.replace('1d', 'D')\n","#     # col_list[c_i] = col_.replace('eTa_5T', 'ema_5T')\n","#     # col_list[c_i] = col_list[c_i][1:]\n","#     # print(col_list[c_i][0])\n","# res_df_.columns = col_list\n","# col_list[-2:] = ['resi_T', 'sup_T']"],"metadata":{"id":"x9wkWw15XCAm"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### lab"],"metadata":{"id":"14chOHeXh6JD"}},{"cell_type":"markdown","source":["#### imb."],"metadata":{"id":"c2729DJ6h720"}},{"cell_type":"code","source":["t_df = res_df_.iloc[-120:-100]\n","a_data = t_df.to_numpy()"],"metadata":{"id":"Rucj-iepiR_-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(15, 9))\n","nrows, ncols = 1, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        # height_ratios=[3, 1]\n","                        )\n","\n","ax = fig.add_subplot(gs[0])\n","\n","# ------ candles ------ #\n","candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","_ = [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]"],"metadata":{"id":"ktm1aB-Bh7GH","colab":{"base_uri":"https://localhost:8080/","height":537},"executionInfo":{"status":"ok","timestamp":1648801482583,"user_tz":-540,"elapsed":5,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"6aba1d34-3575-486a-9c29-941dc18a00fc"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1080x648 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["def imb_ratio_v4(df, itv):\n","\n","  itv_num = to_itvnum(itv)\n","\n","  close = df['close_{}'.format(itv)].to_numpy()\n","  open = df['open_{}'.format(itv)].to_numpy()\n","\n","  b1_close = df['close_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_open = df['open_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_high = df['high_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_low = df['low_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","  body_range = abs(close - open)\n","  b1_body_range = abs(b1_close - b1_open)\n","\n","  df['body_rel_ratio_{}'.format(itv)] = body_range / b1_body_range\n","\n","  short_body_range = np.where(close <= b1_low, body_range, b1_body_range)\n","  long_body_range = np.where(close >= b1_high, body_range, b1_body_range)\n","\n","  # 추후에 통계 측정해야함 -> bir 에 따른 개별 trader 의 epout / tpep 이라던가 => short 에 양봉은 취급안함 (why use np.nan)\n","  df['short_ir_{}'.format(itv)] = np.where(close < open, (b1_low - close) / short_body_range, np.nan) # close < open & close < b1_low\n","  df['long_ir_{}'.format(itv)] = np.where(close > open, (close - b1_high) / long_body_range, np.nan) # close > open & close > b1_high\n","\n","  return"],"metadata":{"id":"jMQBhQ1Ljt5Y"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def imb_ratio_v3(df, itv):\n","\n","  itv_num = to_itvnum(itv)\n","\n","  # high = df['high_{}'.format(itv)].to_numpy()\n","  # low = df['low_{}'.format(itv)].to_numpy()\n","  # candle_range = high - low\n","\n","  close = df['close_{}'.format(itv)].to_numpy()\n","  open = df['open_{}'.format(itv)].to_numpy()\n","\n","  b1_close = df['close_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_open = df['open_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_high = df['high_{}'.format(itv)].shift(itv_num).to_numpy()\n","  b1_low = df['low_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","  body_range = abs(close - open)\n","  b1_body_range = abs(b1_close - b1_open)\n","\n","  df['body_rel_ratio_{}'.format(itv)] = body_range / b1_body_range\n","\n","  short_body_ratio = np.where(close <= b1_low, body_range, b1_body_range)\n","  long_body_range = np.where(close >= b1_high, body_range, b1_body_range)\n","\n","  # 추후에 통계 측정해야함 -> bir 에 따른 개별 trader 의 epout / tpep 이라던가 => short 에 양봉은 취급안함 (why use np.nan)\n","  df['short_ir_{}'.format(itv)] = np.where(close < open, (b1_low - close) / body_range, np.nan) # close < open & close < b1_low\n","  df['long_ir_{}'.format(itv)] = np.where(close > open, (close - b1_high) / body_range, np.nan) # close > open & close > b1_high\n","\n","  return"],"metadata":{"id":"I1Vq_BiKpY3P"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["imb_ratio(t_df, \"5T\")\n","# imb_ratio_v3(t_df, \"5T\")\n","# imb_ratio_v4(t_df, \"5T\")\n","\n","t_df.tail(100).short_ir_5T  # .461871\n","# t_df.iloc[:, -10:]\n","# t_df.dtypes"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mtnMUkhwkdrE","executionInfo":{"status":"ok","timestamp":1648807273349,"user_tz":-540,"elapsed":372,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"b7cff2cd-63d3-4109-8753-d2192079e565"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["index\n","2022-02-17 08:30:59.999         NaN\n","2022-02-17 08:31:59.999         NaN\n","2022-02-17 08:32:59.999         NaN\n","2022-02-17 08:33:59.999         NaN\n","2022-02-17 08:34:59.999         NaN\n","2022-02-17 08:35:59.999   -0.022654\n","2022-02-17 08:36:59.999   -0.022654\n","2022-02-17 08:37:59.999   -0.022654\n","2022-02-17 08:38:59.999   -0.022654\n","2022-02-17 08:39:59.999   -0.022654\n","2022-02-17 08:40:59.999    0.559585\n","2022-02-17 08:41:59.999    0.559585\n","2022-02-17 08:42:59.999    0.559585\n","2022-02-17 08:43:59.999    0.559585\n","2022-02-17 08:44:59.999    0.559585\n","2022-02-17 08:45:59.999    0.429719\n","2022-02-17 08:46:59.999    0.429719\n","2022-02-17 08:47:59.999    0.429719\n","2022-02-17 08:48:59.999    0.429719\n","2022-02-17 08:49:59.999    0.429719\n","Name: short_ir_5T, dtype: float64"]},"metadata":{},"execution_count":116}]},{"cell_type":"code","source":["# imb_ratio(t_df, \"5T\")\n","# imb_ratio_v3(t_df, \"5T\")\n","imb_ratio_v4(t_df, \"5T\")\n","\n","t_df.tail(100).short_ir_5T  # .461871\n","# t_df.iloc[:, -10:]\n","# t_df.dtypes"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RVUs1YE_pgBI","executionInfo":{"status":"ok","timestamp":1648807284664,"user_tz":-540,"elapsed":375,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"0ad635a5-e0b9-40c9-c28f-6ebae5494c7b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["index\n","2022-02-17 08:30:59.999         NaN\n","2022-02-17 08:31:59.999         NaN\n","2022-02-17 08:32:59.999         NaN\n","2022-02-17 08:33:59.999         NaN\n","2022-02-17 08:34:59.999         NaN\n","2022-02-17 08:35:59.999   -0.030303\n","2022-02-17 08:36:59.999   -0.030303\n","2022-02-17 08:37:59.999   -0.030303\n","2022-02-17 08:38:59.999   -0.030303\n","2022-02-17 08:39:59.999   -0.030303\n","2022-02-17 08:40:59.999    0.621583\n","2022-02-17 08:41:59.999    0.621583\n","2022-02-17 08:42:59.999    0.621583\n","2022-02-17 08:43:59.999    0.621583\n","2022-02-17 08:44:59.999    0.621583\n","2022-02-17 08:45:59.999    1.000000\n","2022-02-17 08:46:59.999    1.000000\n","2022-02-17 08:47:59.999    1.000000\n","2022-02-17 08:48:59.999    1.000000\n","2022-02-17 08:49:59.999    1.000000\n","Name: short_ir_5T, dtype: float64"]},"metadata":{},"execution_count":117}]},{"cell_type":"code","source":["# ------ rtc 1, 0 개념 ------ #\n","# short_rtc_1 = close\n","# short_rtc_0 = b1_low\n","\n","# long_rtc_1 = close\n","# long_rtc_0 = b1_high\n","\n","# rtc 로 활용하려면, col 로 추가해야할 것 -> 추가할만한 col_name 은 아님\n","# 1. h_candle 인 경우 -> ?\n","#   a. h_candle_v3 먹이고, open_{}.shift(num_itv).to_numpy() 진행 -> ex. res_df['close_{}'.format(hc_itv)].shift(itv_num).to_numpy() "],"metadata":{"id":"bieHiKjBkuFL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 1. 현재 종가 - 이전 고가 = imb_range (long)\n","long_imb_range = t_df.close - t_df.high.shift(1)\n","# 2. 이전 저가 - 현재 종가 - imb_range (short)\n","short_imb_range = t_df.low.shift(1) - t_df.close"],"metadata":{"id":"3X6bMXJIjPYy"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### zigzag"],"metadata":{"id":"LyGnAMvLYvOZ"}},{"cell_type":"code","source":["def wave_range_v4(df, period1, ltf_df=None, touch_lbperiod=50):  # v2 for period1 only\n","\n","  itv = pd.infer_freq(df.index)\n","\n","  donchian_channel_v2(df, period1) \n","  dc_lower_, dc_upper_ = df['dc_lower_{}{}'.format(itv, period1)].to_numpy(), df['dc_upper_{}{}'.format(itv, period1)].to_numpy()\n","\n","  df['wave_base_{}'.format(itv)] = (dc_lower_ + dc_upper_) / 2  # dc_base touch 사용하면 point 를 좀 더 일찍 잡을 수 있음  \n","  wave_base_ = df['wave_base_{}'.format(itv)].to_numpy()\n","  # short_base_ = df['short_base__{}'.format(itv)].to_numpy()\n","  # long_base_ = df['long_base__{}'.format(itv)].to_numpy()\n","\n","  len_df = len(df)   \n","  short_open_res = np.ones(len_df)\n","  long_open_res = np.ones(len_df)\n","  \n","  data_cols = ['open', 'high', 'low']\n","  open, high, low = [df[col_].to_numpy() for col_ in data_cols]\n","\n","  dc_upper_touch_idx = pd.Series(np.where(high >= dc_upper_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()  # min -> max\n","  dc_lower_touch_idx = pd.Series(np.where(low <= dc_lower_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨    \n","  \n","  # df['wave_upper_{}'.format(itv)] = pd.Series(get_line(dc_upper_touch_idx, dc_upper_)).ffill().to_numpy() \n","  # df['wave_lower_{}'.format(itv)] = pd.Series(get_line(dc_lower_touch_idx, dc_lower_)).ffill().to_numpy() \n","\n","  short_open_res *= (high >= wave_base_) & (wave_base_ >= open) & (dc_upper_touch_idx < dc_lower_touch_idx)\n","  df['short_wave_point_{}{}'.format(itv, period1)] = short_open_res\n","\n","  long_open_res *= (open >= wave_base_) & (wave_base_ >= low) & (dc_lower_touch_idx < dc_upper_touch_idx)\n","  df['long_wave_point_{}{}'.format(itv, period1)] = long_open_res\n","\n","  if itv != 'T':\n","    assert ltf_df is not None, \"assert ltf_df is not None\"\n","\n","    join_cols = np.arange(-5, 0 ,1).astype(int)\n","    ltf_df.drop(df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","    try:\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, df, join_cols), how='inner')\n","      # ltf_df = ltf_df.merge(to_lower_tf_v2(ltf_df, df, [-7, -6, -5, -4, -3, -2, -1]), how='inner')\n","    except Exception as e:\n","      print(\"error in wave_range_v4's join() :\", e)\n","  else:\n","    ltf_df = df    \n","\n","  return ltf_df"],"metadata":{"id":"PV-dlAVZfehP","executionInfo":{"status":"ok","timestamp":1648973754215,"user_tz":-540,"elapsed":2,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"execution_count":40,"outputs":[]},{"cell_type":"code","source":["def sd_dc(df, period1, period2, ltf_df=None):\n","    assert period1 <= period2, \"assert period1 <= period2\"\n","    donchian_channel_v2(df, period1)\n","    donchian_channel_v2(df, period2)\n","    itv = pd.infer_freq(df.index)\n","    if itv != 'T':\n","      assert ltf_df is not None, \"assert ltf_df is not None\"\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, df, [-4, -3, -2, -1]), how='inner')\n","    else:\n","      ltf_df = df\n","\n","    ltf_df['short_base_{}'.format(itv)] = (ltf_df['dc_lower_{}{}'.format(itv, period1)].to_numpy() + ltf_df['dc_upper_{}{}'.format(itv, period2)].to_numpy()) / 2\n","    ltf_df['long_base_{}'.format(itv)] = (ltf_df['dc_upper_{}{}'.format(itv, period1)].to_numpy() + ltf_df['dc_lower_{}{}'.format(itv, period2)].to_numpy()) / 2\n","\n","    return ltf_df\n","\n","\n","def donchian_channel_v2(df, period):\n","  itv = pd.infer_freq(df.index)\n","  upper_name = 'dc_upper_{}{}'.format(itv, period)\n","  lower_name = 'dc_lower_{}{}'.format(itv, period)\n","\n","  df.drop([upper_name, lower_name], inplace=True, axis=1, errors='ignore')\n","\n","  df[upper_name] = df['high'].rolling(period).max()\n","  df[lower_name] = df['low'].rolling(period).min()\n","\n","  return\n","\n","def wave_range(df, period1, period2, ltf_df=None, touch_lbperiod=50):\n","    assert period1 <= period2, \"assert period1 <= period2\"\n","    donchian_channel_v2(df, period1)\n","    donchian_channel_v2(df, period2)\n","    itv = pd.infer_freq(df.index)\n","    if itv != 'T':\n","      assert ltf_df is not None, \"assert ltf_df is not None\"\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, df, [-4, -3, -2, -1]), how='inner')\n","    else:\n","      ltf_df = df\n","\n","    short_tp_1_, short_tp_0_ = ltf_df['dc_lower_{}{}'.format(itv, period1)].to_numpy(), ltf_df['dc_upper_{}{}'.format(itv, period2)].to_numpy()\n","    long_tp_1_, long_tp_0_ = ltf_df['dc_upper_{}{}'.format(itv, period1)].to_numpy(), ltf_df['dc_lower_{}{}'.format(itv, period2)].to_numpy()\n","\n","    ltf_df['short_base_{}'.format(itv)] = (short_tp_1_ + short_tp_0_) / 2  # dc_base touch 사용하면 point 를 좀 더 일찍 잡을 수 있음\n","    ltf_df['long_base_{}'.format(itv)] = (long_tp_1_ + long_tp_0_) / 2\n","    \n","    short_base = ltf_df['short_base_{}'.format(itv)].to_numpy()\n","    long_base = ltf_df['long_base_{}'.format(itv)].to_numpy()\n","\n","    len_df = len(ltf_df)   \n","    short_open_res = np.ones(len_df)\n","    long_open_res = np.ones(len_df)\n","    \n","    data_cols = ['open', 'high', 'low']\n","    open, high, low = [ltf_df[col_].to_numpy() for col_ in data_cols]\n","\n","    short_a_touch_idx = pd.Series(np.where(high >= short_tp_0_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()  # min -> max\n","    short_b_touch_idx = pd.Series(np.where(low <= short_tp_1_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨    \n","    short_open_res *= (high >= short_base) & (short_base >= open) & (short_a_touch_idx < short_b_touch_idx)\n","\n","    ltf_df['short_wave_1_{}'.format(itv)] = pd.Series(get_line(short_b_touch_idx, short_tp_1_)).ffill().to_numpy()   # ffill() 다음 to_numpy() 안하면 None 값\n","    ltf_df['short_wave_0_{}'.format(itv)] = pd.Series(get_line(short_a_touch_idx, short_tp_0_)).ffill().to_numpy()\n","    ltf_df['short_wave_point_{}'.format(itv)] = short_open_res.astype(bool)\n","\n","    long_a_touch_idx = pd.Series(np.where(low <= long_tp_0_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()       \n","    long_b_touch_idx = pd.Series(np.where(high >= long_tp_1_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()    \n","    long_open_res *= (open >= long_base) & (long_base >= low) & (long_a_touch_idx < long_b_touch_idx)\n","\n","    ltf_df['long_wave_1_{}'.format(itv)] = pd.Series(get_line(long_b_touch_idx, long_tp_1_)).ffill().to_numpy()\n","    ltf_df['long_wave_0_{}'.format(itv)] = pd.Series(get_line(long_a_touch_idx, long_tp_0_)).ffill().to_numpy()\n","    ltf_df['long_wave_point_{}'.format(itv)] = long_open_res.astype(bool)\n","\n","    return ltf_df\n","\n","def wave_range_v2(df, period1, ltf_df=None, touch_lbperiod=50):  # v2 for period1 only\n","\n","  donchian_channel_v2(df, period1) \n","\n","  itv = pd.infer_freq(df.index)\n","  if itv != 'T':\n","    assert ltf_df is not None, \"assert ltf_df is not None\"\n","    try:\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, df, [-2, -1]), how='inner')\n","    except Exception as e:\n","      print(\"error in wave_range_v2's join() :\", e)\n","  else:\n","    ltf_df = df    \n","\n","  dc_lower_, dc_upper_ = ltf_df['dc_lower_{}{}'.format(itv, period1)].to_numpy(), ltf_df['dc_upper_{}{}'.format(itv, period1)].to_numpy()\n","\n","  # print(ltf_df.tail().iloc[:, -4:])\n","\n","  ltf_df['wave_base_{}'.format(itv)] = (dc_lower_ + dc_upper_) / 2  # dc_base touch 사용하면 point 를 좀 더 일찍 잡을 수 있음\n","  \n","  wave_base_ = ltf_df['wave_base_{}'.format(itv)].to_numpy()\n","  # short_base_ = ltf_df['short_base__{}'.format(itv)].to_numpy()\n","  # long_base_ = ltf_df['long_base__{}'.format(itv)].to_numpy()\n","\n","  len_df = len(ltf_df)   \n","  short_open_res = np.ones(len_df)\n","  long_open_res = np.ones(len_df)\n","  \n","  data_cols = ['open', 'high', 'low']\n","  open, high, low = [ltf_df[col_].to_numpy() for col_ in data_cols]\n","\n","  dc_upper_touch_idx = pd.Series(np.where(high >= dc_upper_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()  # min -> max\n","  dc_lower_touch_idx = pd.Series(np.where(low <= dc_lower_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨    \n","  \n","  ltf_df['wave_upper_{}'.format(itv)] = pd.Series(get_line(dc_upper_touch_idx, dc_upper_)).ffill().to_numpy() \n","  ltf_df['wave_lower_{}'.format(itv)] = pd.Series(get_line(dc_lower_touch_idx, dc_lower_)).ffill().to_numpy() \n","\n","  short_open_res *= (high >= wave_base_) & (wave_base_ >= open) & (dc_upper_touch_idx < dc_lower_touch_idx)\n","  ltf_df['short_wave_point_{}'.format(itv)] = short_open_res.astype(bool)\n","\n","  long_open_res *= (open >= wave_base_) & (wave_base_ >= low) & (dc_lower_touch_idx < dc_upper_touch_idx)\n","  ltf_df['long_wave_point_{}'.format(itv)] = long_open_res.astype(bool)\n","\n","  return ltf_df\n","\n","def wave_range_v3(df, period1, ltf_df=None, touch_lbperiod=50):  # v2 for period1 only\n","\n","  itv = pd.infer_freq(df.index)\n","\n","  donchian_channel_v2(df, period1) \n","  dc_lower_, dc_upper_ = df['dc_lower_{}{}'.format(itv, period1)].to_numpy(), df['dc_upper_{}{}'.format(itv, period1)].to_numpy()\n","\n","  df['wave_base_{}'.format(itv)] = (dc_lower_ + dc_upper_) / 2  # dc_base touch 사용하면 point 를 좀 더 일찍 잡을 수 있음  \n","  wave_base_ = df['wave_base_{}'.format(itv)].to_numpy()\n","  # short_base_ = df['short_base__{}'.format(itv)].to_numpy()\n","  # long_base_ = df['long_base__{}'.format(itv)].to_numpy()\n","\n","  len_df = len(df)   \n","  short_open_res = np.ones(len_df)\n","  long_open_res = np.ones(len_df)\n","  \n","  data_cols = ['open', 'high', 'low']\n","  open, high, low = [df[col_].to_numpy() for col_ in data_cols]\n","\n","  dc_upper_touch_idx = pd.Series(np.where(high >= dc_upper_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()  # min -> max\n","  dc_lower_touch_idx = pd.Series(np.where(low <= dc_lower_, np.arange(len_df), np.nan)).rolling(touch_lbperiod, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨    \n","  \n","  # df['wave_upper_{}'.format(itv)] = pd.Series(get_line(dc_upper_touch_idx, dc_upper_)).ffill().to_numpy() \n","  # df['wave_lower_{}'.format(itv)] = pd.Series(get_line(dc_lower_touch_idx, dc_lower_)).ffill().to_numpy() \n","\n","  short_open_res *= (high >= wave_base_) & (wave_base_ >= open) & (dc_upper_touch_idx < dc_lower_touch_idx)\n","  df['short_wave_point_{}'.format(itv)] = short_open_res\n","\n","  long_open_res *= (open >= wave_base_) & (wave_base_ >= low) & (dc_lower_touch_idx < dc_upper_touch_idx)\n","  df['long_wave_point_{}'.format(itv)] = long_open_res\n","\n","  if itv != 'T':\n","    assert ltf_df is not None, \"assert ltf_df is not None\"\n","\n","    join_cols = np.arange(-7, 0 ,1).astype(int)\n","    ltf_df.drop(df.columns[join_cols], inplace=True, axis=1, errors='ignore')\n","    try:\n","      ltf_df = ltf_df.join(to_lower_tf_v2(ltf_df, df, join_cols), how='inner')\n","      # ltf_df = ltf_df.merge(to_lower_tf_v2(ltf_df, df, [-7, -6, -5, -4, -3, -2, -1]), how='inner')\n","    except Exception as e:\n","      print(\"error in wave_range_v3's join() :\", e)\n","  else:\n","    ltf_df = df    \n","\n","  return ltf_df\n"],"metadata":{"id":"7_FX0rIP_vyE","executionInfo":{"status":"ok","timestamp":1648973656277,"user_tz":-540,"elapsed":1091,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"execution_count":34,"outputs":[]},{"cell_type":"code","source":["res = wave_range_v3(to_htf(res_df, '5T', '1h'), 12, ltf_df=res_df, touch_lbperiod=50)\n","# res = wave_range_v3(res_df, 12, ltf_df=None, touch_lbperiod=50)"],"metadata":{"id":"-AmhhMxC-ltr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(res.tail(100).iloc[:, -7:])"],"metadata":{"id":"gGDf6iBxFP_s"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["res.dtypes\n","# type(np.arange(-7,0,1).astype(int)[0])"],"metadata":{"id":"ZoS_76wwAXhj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def to_lower_tf_v2(ltf_df, htf_df, column, backing_i=1, show_info=False):\n","    #       Todo        #\n","    #        1. 현재 downsampled df 만 허용, direct_df 사용시 issue 발생 가능할 것\n","    assert type(column[0]) in [int, np.int64], \"column value should be integer\"\n","    # if not replace_last_idx:\n","    #     assert datetime.timestamp(htf_df.index[-1]) >= datetime.timestamp(\n","    #         ltf_df.index[-1]), \"htf_lastidx should >= ltf_lastidx\"  # data sync confirmation\n","    #   htf idx ts 가 ltf 보다 작을 경우, intersec_idx 를 구할 수 없음\n","\n","    #   downsampled htf_df 만 허용 - 통일성\n","    #   non_resampled df 사용시 \"cannot reindex a non-unique index with a method or limit\" 라는 error_msg 확인\n","\n","    cols = htf_df.columns[column]  # to_lower_tf_v1 의 int col 반영\n","\n","    ltf_itv = pd.infer_freq(ltf_df.index)\n","    assert ltf_itv == 'T', \"currently only -> 'T' allowed..\"\n","\n","    if show_info:\n","        print(\"backing_i :\", backing_i)\n","\n","    #        1. htf last_ts_idx 의 second 가 :00 format (all rows same format)이 아닌 경우, bfill() 시 NaN 발생\n","    #           --> 상관 없음, 다른 윈인임\n","    #        2. single positional indexer is out-of-bounds => 대게 len(data) 부족 문제임 (row 증분)\n","    # iloc 뒤에 붙여야함, 아니면 timeidx 정상 출력 안됨\n","\n","    renamed_last_row = htf_df.rename(index={htf_df.index[-1]: ltf_df.index[-1]}, inplace=False).iloc[[-1]]\n","    if htf_df.index[-1] != renamed_last_row.index[-1]:  # cannot reindex a non-unique index with a method or limit 방지\n","        htf_df = htf_df.append(renamed_last_row)\n","\n","    # print(htf_df.tail())\n","\n","    # downsampled htf 의 freq_offset 기준으로 앞에서 뒤로 채우는게 맞음\n","    # --> hh:mm:00 format 을 사용해서 그럼 (59:999 면 bfill() 이였을 것)\n","    resampled_df = htf_df[cols].shift(backing_i).resample(ltf_itv).ffill()\n","    # print(resampled_df.tail())\n","    # print()\n","\n","    #        2. htf 가 downsampled 된 df 를 default 로 사용하기에, slicing 불필요해짐\n","    #        3. Shape of passed values is (799, 3), indices imply (3000, 3) -> len(ltf_df) > len(resampled_df) 란 의미\n","    #        4. solution => reindexing for inner join   #\n","    #         a. len(resampled_df) > len(ltf_df) 경우 slicing 진행\n","    #           -> ltf_index 를 다가져와도 resampled_indx 를 채울 수 없음 => error\n","    #           i. resampled length 를 ltf length 로 줄임\n","    #               1. 이미 htf_indi. 는 계산된 상태이고, \n","    #                   a. trader - 마지막 index 만 사용, 전혀 무리없음\n","    #                   b. idep - resampled_df.head(itv) 만큼만 소실된 것 -> 큰 무리없음\n","    #         b. len(resampled_df) < len(ltf_df)-> 상관없음 (ltf_index 에서 resampled_df length 만큼만 때가면 되니까)\n","    if len(resampled_df) > len(ltf_df):\n","        resampled_df = resampled_df.iloc[-len(ltf_df):]\n","    # print(\"len(ltf_df) :\", len(ltf_df))\n","    # print(\"len(resampled_df) :\", len(resampled_df))\n","    resampled_df.index = ltf_df.index[-len(resampled_df):]\n","    # assert len(ltf_df) <= len(resampled_df), \"for join method, assert len(ltf_df) <= len(resampled_df)\"\n","\n","    #       check last row's validity       #\n","    assert np.sum(\n","        pd.isnull(resampled_df.iloc[-1].values)) == 0, \"np.nan value occured, more {} rows might be reguired\".format(\n","        cols)\n","\n","    # if datetime.timestamp(htf_df.index[-1]) < datetime.timestamp(ltf_df.index[-1]):\n","    #     # resampled_df.rename(index={resampled_df.index[-1]: ltf_df.index[-1]}, inplace=True)\n","    #     print(resampled_df.tail())\n","    #     print(\"-----------\")\n","\n","    #        1. 필요한 len 계산해서 pre_proc. 진행 --> open_idx 를 동일하게 맞춰놓았고, shift 적용 상태이기 때문에 불필요함\n","\n","    #        1. ltf_df 의 마지막 timeidx 와 sync. 맞춰주어야함\n","    #           a. itv '1T' 가 아닌경우, 교집합 timeidx 가 존재하지 않을 수 있음\n","    # ltf_lastidx = ltf_df.tail(1).resample('1T').asfreq().index\n","    # intersec_idx_arr = np.argwhere(resampled_df.index == ltf_lastidx.item())\n","    # intersec_idx = intersec_idx_arr.item()\n","    # print(\"intersec_idx :\", intersec_idx)\n","    # print(\"len(resampled_df) :\", len(resampled_df))\n","    #\n","    # assert len(intersec_idx_arr) >= 1, \"len(intersec_idx_arr) is zero\"\n","    #\n","    # sliced_resampled_df = resampled_df[:intersec_idx + 1]\n","    # return sliced_resampled_df.values[-len(ltf_df):]\n","\n","    # return resampled_df.values[-len(ltf_df):]\n","    return resampled_df"],"metadata":{"id":"Z7bHV8CvC7eF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 1. base_touch_idx 기준으로, 작정한다음, np.nan value 를 ffill() 진행\n","strat_version = config.strat_version\n","len_df = len(res_df)\n","short_open_res = np.ones(len_df)\n","long_open_res = np.ones(len_df)\n","\n","short_tp_1_col, short_tp_0_col, short_tp_gap_col = 'short_tp_1_{}'.format(strat_version), 'short_tp_0_{}'.format(strat_version), 'short_tp_gap_{}'.format(strat_version) \n","long_tp_1_col, long_tp_0_col, long_tp_gap_col = 'long_tp_1_{}'.format(strat_version), 'long_tp_0_{}'.format(strat_version), 'long_tp_gap_{}'.format(strat_version) \n","short_epout_1_col, short_epout_0_col, short_epout_gap_col = 'short_epout_1_{}'.format(strat_version), 'short_epout_0_{}'.format(strat_version), 'short_epout_gap_{}'.format(strat_version) \n","long_epout_1_col, long_epout_0_col, long_epout_gap_col = 'long_epout_1_{}'.format(strat_version), 'long_epout_0_{}'.format(strat_version), 'long_epout_gap_{}'.format(strat_version) \n","\n","data_cols = ['open', 'high', 'low']   # Todo - public_indi 이전에 해야할지도 모름 # 'close', 'haopen', 'hahigh', 'halow', 'haclose'\n","tp_cols = [short_tp_1_col, short_tp_0_col, short_tp_gap_col, long_tp_1_col, long_tp_0_col, long_tp_gap_col]   # Todo - public_indi 이전에 해야할지도 모름\n","epout_cols = [short_epout_1_col, short_epout_0_col, short_epout_gap_col, long_epout_1_col, long_epout_0_col, long_epout_gap_col]   # Todo - public_indi 이전에 해야할지도 모름\n","\n","short_tp_1_, short_tp_0_, short_tp_gap_, long_tp_1_, long_tp_0_, long_tp_gap_ = [res_df[col_].to_numpy() for col_ in tp_cols]\n","short_epout_1_, short_epout_0_, short_epout_gap_, long_epout_1_, long_epout_0_, long_epout_gap_ = [res_df[col_].to_numpy() for col_ in epout_cols]\n","open, high, low = [res_df[col_].to_numpy() for col_ in data_cols]\n","\n","short_base = (short_tp_1_ + short_tp_0_) / 2\n","long_base = (long_tp_1_ + long_tp_0_) / 2\n","\n","touch_period = 50\n","\n","short_a_touch_idx = pd.Series(np.where(high >= short_tp_0_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()  # min -> max\n","short_b_touch_idx = pd.Series(np.where(low <= short_tp_1_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨\n","\n","short_en_p = (get_line(short_a_touch_idx, short_tp_0_) + get_line(short_b_touch_idx, short_tp_1_)) / 2\n","short_base_b = get_line(short_b_touch_idx, short_base)   # 현재, en_p == base_b, why ..?\n","short_tp_0_touch = get_line(short_a_touch_idx, short_tp_0_)\n","short_tp_1_touch = get_line(short_b_touch_idx, short_tp_1_)\n","short_tp_gap_b = get_line(short_b_touch_idx, short_tp_gap_)\n","short_open_res *= (high >= short_base) & (short_base >= open) & (short_a_touch_idx < short_b_touch_idx) #& (short_base_b + config.loc_set.point.base_gap * short_tp_gap_b >= short_base)\n","# short_open_res *= (high >= short_base_b) & (short_base_b >= low) & (short_a_touch_idx < short_b_touch_idx) & (short_base_b + config.loc_set.point.base_gap * short_tp_gap_b >= short_base)\n","\n","len_df = len(res_df)\n","long_a_touch_idx = pd.Series(np.where(low <= long_tp_0_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()       \n","long_b_touch_idx = pd.Series(np.where(high >= long_tp_1_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()\n","\n","long_en_p = (get_line(long_a_touch_idx, long_tp_0_) + get_line(long_b_touch_idx, long_tp_1_)) / 2\n","long_base_b = get_line(long_b_touch_idx, long_base)\n","long_tp_0_touch = get_line(long_a_touch_idx, long_tp_0_)\n","long_tp_1_touch = get_line(long_b_touch_idx, long_tp_1_)\n","long_tp_gap_b = get_line(long_b_touch_idx, long_tp_gap_)\n","long_open_res *= (open >= long_base) & (long_base >= low) & (long_a_touch_idx < long_b_touch_idx) # & (long_base_b - config.loc_set.point.base_gap * long_tp_gap_b <= long_base)\n","# long_open_res *= (open >= long_base) & (long_base >= low) # & (long_a_touch_idx < long_b_touch_idx) # & (long_base_b - config.loc_set.point.base_gap * long_tp_gap_b <= long_base)\n","# long_open_res *= (high >= long_base) & (long_base >= low) & (long_a_touch_idx < long_b_touch_idx) # & (long_base_b - config.loc_set.point.base_gap * long_tp_gap_b <= long_base)\n"],"metadata":{"id":"WA094Xin1FGr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["i = random.randint(0, len(res_df))\n","\n","plot_size = 200\n","t_df = res_df.iloc[i - plot_size:i]\n","a_data = t_df.to_numpy()"],"metadata":{"id":"t4P2qIYAFiDm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(15, 9))\n","nrows, ncols = 1, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        # height_ratios=[3, 1]\n","                        )\n","\n","ax = fig.add_subplot(gs[0])\n","\n","# ------ candles ------ #\n","candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","# _ = [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","\n","# t_df = wave_range(t_df, 20, 20, ltf_df=None, touch_lbperiod=50)\n","t_df = mcp(t_df, 20, ltf_df=None, touch_lbperiod=50)\n","\n","plt.step(np.arange(len(t_df.dc_upper_T40.to_numpy())), t_df.dc_upper_T40.to_numpy(), alpha=1.0, color='yellow', linewidth=2)\n","plt.step(np.arange(len(t_df.dc_lower_T40.to_numpy())), t_df.dc_lower_T40.to_numpy(), alpha=1.0, color='yellow', linewidth=2)\n","plt.step(np.arange(len(t_df.dc_base_T40.to_numpy())), t_df.dc_base_T40.to_numpy(), alpha=1.0, color='white', linewidth=1)\n","\n","short_open_plot_idx = t_df.short_mcp_point_T40.to_numpy().astype(bool)\n","long_open_plot_idx = t_df.long_mcp_point_T40.to_numpy().astype(bool)\n","long_open_plot_idx = t_df.long_mcp_point_T40.to_numpy().astype(bool)\n","plt.step(np.arange(len(t_df.dc_base_T40.to_numpy()))[short_open_plot_idx], t_df.dc_base_T40.to_numpy()[short_open_plot_idx], \"o\", alpha=1.0, color='#ff00ff', markersize=11)\n","plt.step(np.arange(len(t_df.dc_base_T40.to_numpy()))[long_open_plot_idx], t_df.dc_base_T40.to_numpy()[long_open_plot_idx], \"o\", alpha=1.0, color='#ff00ff', markersize=11)\n","\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":573},"id":"5SIWeZb24xdl","executionInfo":{"status":"ok","timestamp":1648964058466,"user_tz":-540,"elapsed":965,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"184da628-d4f2-49ba-c0e1-d734f4377eff"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0.]\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1080x648 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["t_df.dc_lower_T40.to_numpy()\n","# t_df.dc_base_T40.to_numpy()[short_open_plot_idx]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xPzel_I-5tdT","executionInfo":{"status":"ok","timestamp":1648963836575,"user_tz":-540,"elapsed":344,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"107a4133-5161-4816-96e4-b57ebb22c1ea"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([    nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan,     nan, 3800.06, 3800.06, 3800.06, 3800.06, 3800.06, 3800.06, 3800.06, 3800.06, 3793.03, 3785.83, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3783.77, 3788.66, 3791.08, 3780.65, 3780.52, 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3775.  , 3750.84, 3750.84, 3750.84, 3750.84, 3750.84, 3750.84, 3750.84, 3750.84, 3750.84, 3750.  , 3750.  , 3750.  , 3745.  , 3745.  , 3745.  , 3738.22, 3738.22, 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.2 , 3732.91, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3733.44, 3735.  , 3738.25, 3739.3 , 3741.91, 3741.91, 3741.91, 3741.91, 3741.91, 3741.91])"]},"metadata":{},"execution_count":229}]},{"cell_type":"code","source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(15, 9))\n","nrows, ncols = 1, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        # height_ratios=[3, 1]\n","                        )\n","\n","ax = fig.add_subplot(gs[0])\n","\n","# ------ candles ------ #\n","candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","_ = [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","\n","# t_df = wave_range(t_df, 20, 20, ltf_df=None, touch_lbperiod=50)\n","t_df = mcp(t_df, 40, ltf_df=None, touch_lbperiod=50)\n","\n","plt.step(np.arange(len(t_df.short_wave_1_T.to_numpy())), t_df.short_wave_1_T.to_numpy(), alpha=1.0, color='blue', linewidth=2)\n","plt.step(np.arange(len(t_df.short_wave_0_T.to_numpy())), t_df.short_wave_0_T.to_numpy(), alpha=1.0, color='blue', linewidth=2)\n","plt.step(np.arange(len(t_df.long_wave_1_T.to_numpy())), t_df.long_wave_1_T.to_numpy(), alpha=1.0, color='yellow', linewidth=2)\n","plt.step(np.arange(len(t_df.long_wave_0_T.to_numpy())), t_df.long_wave_0_T.to_numpy(), alpha=1.0, color='yellow', linewidth=2)\n","\n","short_open_plot_idx = t_df.short_wave_point_T\n","long_open_plot_idx = t_df.long_wave_point_T\n","plt.step(np.arange(len(short_base[i - plot_size:i]))[short_open_plot_idx], short_base[i - plot_size:i][short_open_plot_idx], \"o\", alpha=1.0, color='#ff00ff', markersize=11)\n","plt.step(np.arange(len(long_base[i - plot_size:i]))[long_open_plot_idx], long_base[i - plot_size:i][long_open_plot_idx], \"o\", alpha=1.0, color='#00ff00', markersize=11)\n","\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":537},"executionInfo":{"status":"ok","timestamp":1648599806041,"user_tz":-540,"elapsed":977,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"90f467c9-ddb1-4f51-933f-b32de99a8c41","id":"7x80Xlje7j4Q"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1080x648 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["t_df.short_wave_point_T == short_open_res.astype(bool)[i - plot_size:i]\n","t_df.long_wave_point_T[50:] == long_open_res.astype(bool)[i - plot_size:i][50:]\n","\n","# short_open_plot_idx = short_open_res.astype(bool)[i - plot_size:i]\n","# long_open_plot_idx = long_open_res.astype(bool)[i - plot_size:i]\n","\n","# short_open_plot_idx = t_df.short_wave_point_T\n","# # long_open_plot_idx = t_df.long_wave_point_T"],"metadata":{"id":"NXPgF90xMzas"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# long_a_touch_idx[-plot_size:]\n","touch_idx_copy = long_a_touch_idx.copy()\n","# touch_line = long_tp_0_.copy()\n","touch_line = np.full_like(long_tp_0_, np.nan)\n","\n","nan_idx = np.isnan(touch_idx_copy)  # touch_period 동안 touch 이력이 없는 point\n","touch_idx_copy[nan_idx] = 0   # for indexing array\n","\n","int_touch_idx_copy = touch_idx_copy.astype(int)\n","# print(int_touch_idx_copy[-plot_size:])\n","print(touch_line[int_touch_idx_copy])\n","\n","touch_line = long_tp_0_[int_touch_idx_copy]\n","# touch_line[nan_idx] = np.nan   # for true comp.\n","# print(touch_idx_copy[-plot_size:])\n","print(touch_line[int_touch_idx_copy])\n","print(touch_line[-plot_size:])\n","\n","# long_tp_0_[long_a_touch_idx.astype(int)]"],"metadata":{"id":"2OLM9XOI-HO5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def get_line(touch_idx, rtc_):\n","  touch_idx_copy = touch_idx.copy()\n","  touch_line = np.full_like(rtc_, np.nan)\n","\n","  nan_idx = np.isnan(touch_idx_copy)\n","  touch_idx_copy[nan_idx] = 0   # for indexing array\n","  touch_line = rtc_[touch_idx_copy.astype(int)]\n","  touch_line[nan_idx] = np.nan   # for true comp.\n","\n","  return touch_line"],"metadata":{"id":"3cvi-eFR9Jsm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# high = t_df.high.to_numpy()\n","# low = t_df.low.to_numpy()\n","\n","# pivot_k = 0.001\n","# high_pivots = peak_valley_pivots(high, pivot_k, -pivot_k)\n","# low_pivots = peak_valley_pivots(low, pivot_k, -pivot_k)\n","# plot_pivots(high, high_pivots)\n","# plot_pivots(low, low_pivots)\n","\n","def plot_pivots(X, pivots):\n","    # plt.xlim(0, len(X))\n","    # plt.ylim(X.min()*0.99, X.max()*1.01)\n","    # plt.plot(np.arange(len(X)), X, 'k:', color='white')\n","    valid_idx = pivots != 0\n","    plt.plot(np.arange(len(X))[valid_idx], X[valid_idx], '-', color='white')\n","    # plt.scatter(np.arange(len(X))[pivots == 1], X[pivots == 1], color='g')\n","    # plt.scatter(np.arange(len(X))[pivots == -1], X[pivots == -1], color='r')"],"metadata":{"id":"1PwSHOShZJNm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X = res_df_.close.iloc[-100:].to_numpy()\n","# X = res_df_.close.to_numpy()\n","pivots = peak_valley_pivots(X, 0.0005, -0.0005)\n","pivots = peak_valley_pivots(X, 0.5, -0.5)"],"metadata":{"id":"4lZwODlFYxSL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plot_pivots(X, pivots)"],"metadata":{"id":"W_xx9XWXZKJ5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["t_df = res_df_.iloc[-100:]\n","t_df['date'] = t_df.index\n","data_x = t_df['date'].values\n","data_y = t_df['close'].values\n","peak_indexes = signal.argrelextrema(data_y, np.greater)\n","peak_indexes = peak_indexes[0]\n"," \n","# Find valleys(min).\n","valley_indexes = signal.argrelextrema(data_y, np.less)\n","valley_indexes = valley_indexes[0]\n"," \n","# Instantiate axes.\n","(fig, ax) = plt.subplots()\n"," \n","# Merge peaks and valleys data points using pandas.\n","df_peaks = pd.DataFrame({'date': data_x[peak_indexes], 'zigzag_y': data_y[peak_indexes]})\n","df_valleys = pd.DataFrame({'date': data_x[valley_indexes], 'zigzag_y': data_y[valley_indexes]})\n","df_peaks_valleys = pd.concat([df_peaks, df_valleys], axis=0, ignore_index=True, sort=True)\n"," \n","# Sort peak and valley datapoints by date.\n","df_peaks_valleys = df_peaks_valleys.sort_values(by=['date'])\n"," \n","# Plot zigzag trendline.\n","ax.plot(df_peaks_valleys['date'].values, df_peaks_valleys['zigzag_y'].values, \n","                                                        color='red', label=\"zigzag\")\n"," \n","# Plot close price line.\n","ax.plot(data_x, data_y, linestyle='dashed', color='black', label=\"Close Price\", linewidth=1)\n"," "],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"id":"ZAjpk42XarfY","executionInfo":{"status":"ok","timestamp":1647999471974,"user_tz":-540,"elapsed":935,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"471a5d20-9df5-4b2a-9d04-53cdb0e35c2f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7f82b6491790>]"]},"metadata":{},"execution_count":31},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["#### volume_profile"],"metadata":{"id":"EOXQbXixiQcK"}},{"cell_type":"code","source":["session_df = res_df_.iloc[-1440:] # 0.159 -> 0.024 (14400 -> 1440)\n","volume = session_df['volume'].to_numpy()\n","close = session_df['close'].to_numpy()\n","# px.histogram(session_df, x='volume', y='close', nbins=150, orientation='h').show()"],"metadata":{"id":"7pFuazxpgx9B"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["kde_factor = 0.05\n","num_samples = 100\n","\n","start_0 = time.time()\n","kde = stats.gaussian_kde(close,weights=volume,bw_method=kde_factor)\n","kdx = np.linspace(close.min(),close.max(),num_samples)\n","kdy = kde(kdx)\n","ticks_per_sample = (kdx.max() - kdx.min()) / num_samples\n","print(\"ticks_per_sample :\", ticks_per_sample)  # sample 당 가격\n","print(\"kdy elapsed_time :\", time.time() - start_0)"],"metadata":{"id":"SoPJkiyKiXLM","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1647259514394,"user_tz":-540,"elapsed":332,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"2e1d515d-7caf-4f82-b53b-a17f3e1d9ab9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["ticks_per_sample : 1.3911999999999989\n","kdy elapsed_time : 0.021226167678833008\n"]}]},{"cell_type":"code","source":["peaks,_ = signal.find_peaks(kdy)\n","pkx = kdx[peaks]\n","pky = kdy[peaks]\n","\n","plt.figure(figsize=(10,5))\n","# plt.hist(close, bins=num_samples, weights=volume, alpha=.8, color='#1592e6')\n","# plt.plot(kdx, kdy, color='white')\n","# plt.plot(pkx, pky, 'bo', color='yellow')\n","plt.plot(kdy, kdx, color='white')\n","plt.plot(pky, pkx, 'bo', color='yellow')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":320},"id":"mK2jBddAxJ14","executionInfo":{"status":"ok","timestamp":1647263622450,"user_tz":-540,"elapsed":362,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"74d7a810-1375-4db5-f74e-3cf58e0a0662"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 720x360 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["pkx"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"a8tpQZCy0SO1","executionInfo":{"status":"ok","timestamp":1647260132868,"user_tz":-540,"elapsed":326,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"24ee984e-db8d-4083-97a7-4d3ebb536d38"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([3059.93252525, 3068.3640404 , 3082.41656566, 3093.65858586, 3104.90060606, 3120.35838384, 3130.19515152, 3140.03191919, 3158.30020202, 3168.1369697 , 3176.56848485])"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["# ------ vp 의 indi. 화가 필요함 -> point 설정 ------ #\n","# 1. 4 level 은 미리 만들어놓는게 맞는걸로 보임 -> 추종하는 function 이 많음 (utils_tr, ep_out ...)\n","#   a. 4 level 에 국한하는게 아니라, 모든 peaks 에 대해 levels 설정\n","#   b. 각 session 별로 peak_list 가 주어질 것\n","#     i. prev_data 사용해야하는점 주의 (session vp 는 future_data)"],"metadata":{"id":"gfA946s8UgS0"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### legacy"],"metadata":{"id":"1MNVIExLULhJ"}},{"cell_type":"code","source":["from math import floor\n","\n","\n","def _calc_dev(base_price, price):\n","    return 100 * (price - base_price) / base_price\n","\n","\n","def zigzag(highs, lows, depth=10, dev_threshold=5):\n","    def pivots(src_raw, length, isHigh):\n","        src = list(reversed(src_raw))\n","        bar_index = list(range(len(src)))\n","        for start in range(0, len(src)):\n","            if start + 2 * length + 1 > len(src) - 1:\n","                return\n","            p = 0\n","            if length < len(src) - start:\n","                p = src[start + length]\n","            if length == 0:\n","                yield 0, p\n","            else:\n","                isFound = True\n","                for i in range(start, start + length):\n","                    if isHigh and src[i] > p:\n","                        isFound = False\n","                    if not isHigh and src[i] < p:\n","                        isFound = False\n","                for i in range(start + length + 1, start + 2 * length + 1):\n","                    if isHigh and src[i] >= p:\n","                        isFound = False\n","                    c = not isHigh and src[i] <= p\n","                    if c:\n","                        isFound = False\n","                if isFound:\n","                    yield (bar_index[start + length], p)\n","                else:\n","                    yield None, None\n","\n","    data_highs = [x for x in pivots(highs, floor(depth / 2), True) if x[0]]\n","    data_lows = [x for x in pivots(lows, floor(depth / 2), False) if x[0]]\n","\n","    raw_pairs = []\n","\n","    for i, (ind, p) in enumerate(data_highs):\n","        lows_d = sorted([(ind_l, p_l) for ind_l, p_l in data_lows if ind > ind_l], key=lambda x: x[0])\n","        if lows_d:\n","            lows = lows_d[-1]\n","\n","            if abs(_calc_dev(lows[1], p)) >= dev_threshold:\n","                raw_pairs.append(\n","                    ((ind, p),\n","                     (lows[0], lows[1]))\n","                )\n","\n","    result = []\n","\n","    for (i_h, p_h),(i_l, p_l) in raw_pairs:\n","        if not result:\n","            result.append(((i_h, p_h),(i_l, p_l)))\n","            continue\n","\n","        if i_l == result[-1][1][0]:\n","            if p_h > result[-1][0][1]:\n","                result = result[:-1]\n","            else:\n","                continue\n","\n","        result.append(((i_h, p_h),(i_l, p_l)))\n","\n","    return result\n","\n","# highs, lows = t_df.high.to_numpy(), t_df.low.to_numpy()\n","# zigzag(highs, lows, depth=5, dev_threshold=5)"],"metadata":{"id":"q1nEA19v7Qpj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["t_df = res_df_.iloc[-120:]\n","a_data = t_df.to_numpy()"],"metadata":{"id":"fGlmdyb97j4Q"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# import plotly.express as px\n","# import plotly.graph_objects as go\n","\n","def get_dist_plot(c, v, kx, ky):\n","    fig = go.Figure()\n","    fig.add_trace(go.Histogram(name='Vol Profile', x=c, y=v, nbinsx=150, \n","                               histfunc='sum', histnorm='probability density',\n","                               marker_color='#B0C4DE'))\n","    fig.add_trace(go.Scatter(name='KDE', x=kx, y=ky, mode='lines', marker_color='#D2691E'))    \n","\n","    peaks,_ = signal.find_peaks(kdy)\n","    pkx = kdx[peaks]\n","    pky = kdy[peaks]\n","    pk_marker_args=dict(size=10, color='black')\n","    fig.add_trace(go.Scatter(name=\"Peaks\", x=pkx, y=pky, mode='markers', marker=pk_marker_args))\n","    fig.show()\n","\n","    return fig"],"metadata":{"id":"ropzIp0wUPAA"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##### prominence_info"],"metadata":{"id":"3T-9FwWFXR4f"}},{"cell_type":"code","source":["start_0 = time.time()\n","min_prom = kdy.max() * 0.0\n","pipsize = 0.01\n","max_width_pips = 20\n","# width_range=(1, max_width_pips * pipsize / ticks_per_sample)\n","width_range= max_width_pips * pipsize / ticks_per_sample\n","peaks, peak_props = signal.find_peaks(kdy, prominence=min_prom, width=width_range)\n","\n","peak_x = kdx[peaks]\n","peak_y = kdy[peaks]\n","# ------ prominence lines ------ #\n","left_base = peak_props['left_bases']\n","right_base = peak_props['right_bases']\n","line_x = peak_x\n","line_y0 = peak_y\n","line_y1 = peak_y # - peak_props['prominences']\n","print(\"prom_line elapsed_time :\", time.time() - start_0)\n","\n","\n","for x, y0, y1 in zip(line_x, line_y0, line_y1):\n","    fig.add_shape(type='line',\n","        xref='x', yref='y',\n","        # x0=x, y0=y0, x1=x, y1=y1,\n","        x0=x, y0=0, x1=x, y1=y1,\n","        line=dict(\n","            color='red',\n","            width=2,\n","        )\n","    )\n","\n","# ------ width ------ #\n","left_ips = peak_props['left_ips']\n","right_ips = peak_props['right_ips']\n","# width_x0 = kdx.min() + (left_ips * ticks_per_sample)\n","# width_x1 = kdx.min() + (right_ips * ticks_per_sample)\n","width_x0 = kdx.min() + (left_base * ticks_per_sample)\n","width_x1 = kdx.min() + (right_base * ticks_per_sample)\n","\n","# int_from = kdx.min() + (left_base * ticks_per_sample)\n","# int_to = kdx.min() + (right_base * ticks_per_sample)\n","# [kde.integrate_box_1d(x0, x1) for x0, x1 in zip(int_from, int_to)]\n","\n","width_y = peak_props['width_heights']\n","\n","for x0, x1, y in zip(width_x0, width_x1, width_y):\n","    fig.add_shape(type='line',\n","        xref='x', yref='y',\n","        x0=x0, y0=y, x1=x1, y1=y,\n","        line=dict(\n","            color='red',\n","            width=2,\n","        )\n","    )\n","fig.show()"],"metadata":{"id":"RmBt2agljClE","colab":{"base_uri":"https://localhost:8080/","height":558},"executionInfo":{"status":"ok","timestamp":1647183981567,"user_tz":-540,"elapsed":781,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"c61b0e13-ab0a-4e56-8a44-8bc480ec31cc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["prom_line elapsed_time : 0.0005087852478027344\n"]},{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script src=\"https://cdn.plot.ly/plotly-2.8.3.min.js\"></script>                <div id=\"f0efc821-18d5-43b5-ad6e-1133ea0ad873\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"f0efc821-18d5-43b5-ad6e-1133ea0ad873\")) {                    Plotly.newPlot(                        \"f0efc821-18d5-43b5-ad6e-1133ea0ad873\",                        [{\"histfunc\":\"sum\",\"histnorm\":\"probability density\",\"marker\":{\"color\":\"#B0C4DE\"},\"name\":\"Vol Profile\",\"nbinsx\":150,\"x\":[3150.12,3150.91,3150.04,3152.76,3150.22,3148.21,3148.25,3148.3,3142.41,3145.56,3144.02,3145.11,3146.27,3142.97,3140.6,3142.02,3142.8,3141.34,3138.28,3138.09,3137.04,3135.5,3133.32,3134.84,3136.27,3137.1,3137.05,3139.74,3138.4,3138.17,3139.49,3141.68,3142.52,3143.14,3143.12,3142.4,3144.17,3142.7,3140.72,3138.89,3142.1,3140.96,3139.76,3138.51,3140.37,3139.0,3138.84,3138.57,3140.62,3143.09,3141.71,3140.05,3139.85,3139.12,3139.9,3139.24,3139.49,3138.88,3138.14,3136.66,3137.03,3138.04,3140.84,3138.27,3137.31,3139.03,3141.06,3141.5,3139.41,3137.62,3141.5,3142.8,3142.24,3143.42,3142.55,3143.9,3146.54,3146.38,3142.34,3144.01,3145.79,3147.35,3146.06,3146.75,3147.37,3153.62,3152.82,3154.53,3153.41,3154.3,3153.01,3156.01,3157.57,3157.36,3160.43,3159.0,3163.78,3164.2,3163.97,3168.45,3170.03,3169.46,3173.73,3169.48,3168.54,3167.57,3166.99,3164.73,3164.25,3166.33,3162.57,3156.97,3159.44,3159.19,3158.11,3156.97,3158.08,3158.32,3158.99,3157.01,3154.91,3147.89,3146.35,3142.36,3142.62,3138.81,3144.68,3143.32,3140.89,3140.16,3139.74,3140.33,3143.48,3145.12,3145.42,3147.13,3143.31,3144.88,3145.12,3143.89,3144.75,3143.91,3140.69,3141.35,3141.59,3141.62,3141.51,3141.96,3142.09,3140.61,3137.55,3138.18,3140.28,3139.39,3139.2,3139.85,3137.92,3138.08,3136.42,3134.93,3135.14,3133.15,3135.12,3133.37,3134.51,3131.06,3128.0,3126.97,3116.7,3122.46,3122.06,3118.8,3115.48,3119.5,3120.88,3110.75,3109.43,3107.1,3111.54,3107.5,3108.74,3111.3,3113.32,3115.38,3118.54,3115.27,3118.6,3120.1,3119.4,3119.35,3123.69,3123.54,3121.8,3121.82,3119.9,3122.01,3122.29,3119.64,3119.91,3118.67,3118.66,3119.45,3120.43,3122.38,3120.43,3121.94,3123.03,3123.6,3121.88,3123.81,3123.85,3121.51,3121.8,3122.29,3123.76,3127.99,3131.35,3131.12,3131.07,3132.76,3131.57,3131.8,3130.61,3134.68,3134.39,3132.91,3130.4,3129.86,3129.9,3129.38,3128.39,3125.57,3124.03,3123.68,3125.42,3125.98,3128.4,3130.98,3128.95,3129.26,3132.05,3131.17,3128.56,3126.45,3127.34,3128.33,3126.96,3128.84,3128.45,3128.34,3128.84,3126.09,3125.6,3125.95,3124.5,3122.44,3122.97,3128.29,3126.43,3127.98,3131.71,3132.68,3130.7,3129.63,3130.04,3129.68,3129.74,3129.36,3129.78,3128.6,3128.87,3130.34,3129.71,3127.47,3129.81,3129.16,3128.41,3126.57,3125.42,3128.63,3129.77,3130.9,3131.42,3129.66,3132.1,3130.24,3133.36,3138.65,3141.3,3144.9,3140.63,3141.08,3139.72,3142.67,3141.99,3140.43,3139.04,3134.85,3133.34,3133.14,3136.4,3138.89,3139.59,3143.64,3140.9,3140.38,3141.76,3140.14,3140.58,3137.29,3138.28,3138.27,3137.57,3139.11,3138.77,3138.93,3139.13,3139.57,3139.76,3141.02,3138.46,3138.77,3139.38,3135.77,3135.49,3136.19,3134.07,3135.5,3134.59,3134.37,3137.84,3139.81,3140.38,3143.15,3142.58,3143.12,3139.01,3137.68,3137.86,3137.6,3136.3,3136.34,3134.66,3136.0,3135.49,3133.83,3132.57,3127.5,3127.82,3130.61,3132.01,3126.05,3128.08,3127.75,3127.18,3128.5,3128.32,3129.79,3128.02,3129.28,3127.92,3129.56,3130.85,3131.61,3133.9,3133.36,3135.98,3136.89,3136.05,3138.23,3137.59,3139.65,3141.26,3140.09,3139.73,3139.13,3140.0,3138.28,3139.07,3140.15,3140.64,3141.14,3140.89,3141.56,3144.82,3146.11,3146.92,3147.37,3148.01,3148.11,3153.52,3153.63,3152.2,3145.75,3149.2,3150.38,3152.32,3148.33,3149.53,3151.03,3149.0,3148.97,3148.26,3148.09,3149.48,3150.14,3153.62,3154.73,3153.73,3154.58,3156.77,3157.02,3157.56,3159.21,3157.99,3157.28,3158.24,3157.75,3153.62,3156.32,3155.98,3156.09,3153.36,3154.85,3153.7,3153.26,3153.92,3152.18,3154.72,3153.76,3151.32,3147.99,3143.63,3142.84,3142.01,3142.34,3141.19,3144.4,3143.24,3146.07,3146.42,3142.71,3145.16,3144.34,3142.69,3139.69,3137.0,3139.75,3138.36,3137.76,3138.86,3141.21,3141.38,3147.22,3146.36,3145.32,3145.22,3143.33,3142.05,3138.36,3136.89,3138.59,3137.22,3138.73,3140.14,3140.55,3143.65,3142.01,3142.94,3141.82,3142.27,3142.38,3141.33,3139.54,3140.53,3141.91,3143.98,3145.27,3145.56,3145.8,3146.38,3146.33,3146.59,3148.72,3149.48,3149.99,3149.19,3147.89,3145.9,3144.89,3143.99,3144.38,3141.47,3141.26,3134.83,3136.75,3135.49,3137.49,3136.01,3138.03,3137.49,3135.5,3133.94,3131.24,3128.72,3131.32,3129.42,3129.77,3126.83,3127.0,3124.12,3125.0,3127.18,3130.0,3129.72,3129.07,3129.68,3129.97,3129.39,3130.92,3132.75,3132.92,3129.99,3133.15,3130.69,3132.15,3134.37,3132.81,3131.7,3130.61,3128.61,3128.99,3124.84,3116.56,3116.76,3116.92,3118.9,3119.05,3118.74,3118.24,3121.88,3121.41,3120.63,3119.45,3119.16,3117.66,3125.21,3122.01,3122.3,3122.27,3123.6,3123.71,3124.0,3126.14,3128.01,3125.94,3126.44,3128.0,3128.04,3128.5,3131.12,3129.44,3129.36,3130.58,3130.58,3130.74,3129.8,3130.8,3130.21,3130.0,3132.5,3132.77,3130.01,3138.72,3139.25,3138.11,3136.77,3136.71,3134.59,3135.98,3133.81,3131.4,3131.16,3133.29,3130.61,3132.0,3132.44,3133.58,3134.18,3133.44,3133.33,3135.37,3134.42,3132.16,3132.2,3130.93,3131.07,3128.89,3127.34,3129.46,3129.77,3130.33,3131.76,3132.28,3130.06,3132.43,3132.6,3134.33,3138.55,3138.49,3137.34,3135.68,3135.12,3133.0,3133.35,3135.1,3135.72,3135.45,3135.74,3134.31,3135.54,3135.0,3134.0,3135.5,3135.47,3138.57,3137.43,3137.26,3137.68,3134.65,3133.04,3134.23,3134.77,3137.77,3138.53,3137.99,3140.51,3141.66,3137.9,3130.11,3125.74,3126.7,3127.43,3126.03,3120.96,3121.81,3124.17,3124.31,3124.54,3125.11,3125.71,3126.3,3128.36,3129.59,3129.72,3130.19,3131.21,3130.5,3130.07,3129.81,3131.5,3134.35,3133.15,3135.09,3136.18,3132.93,3122.75,3122.1,3122.03,3121.84,3121.06,3118.65,3120.18,3119.31,3112.84,3117.62,3114.39,3114.41,3116.04,3117.45,3119.3,3120.57,3120.72,3121.07,3116.17,3110.8,3111.87,3110.61,3115.47,3117.35,3117.49,3117.32,3114.9,3112.16,3112.35,3108.01,3111.41,3109.76,3113.55,3118.27,3120.49,3119.38,3121.0,3119.82,3119.61,3118.49,3116.15,3116.56,3117.76,3115.36,3117.85,3117.1,3118.16,3118.6,3117.1,3114.79,3114.07,3116.16,3113.75,3112.4,3104.99,3118.68,3114.45,3103.37,3094.09,3103.67,3101.78,3098.48,3101.08,3101.52,3096.14,3095.06,3094.52,3093.74,3089.7,3094.76,3094.28,3082.9,3075.29,3071.6,3066.96,3068.99,3068.43,3072.83,3074.19,3068.47,3066.49,3068.45,3071.08,3072.8,3068.44,3067.71,3073.29,3073.62,3075.79,3074.76,3079.0,3077.27,3072.94,3073.42,3070.62,3070.97,3075.98,3073.64,3070.63,3073.96,3074.48,3076.25,3074.55,3072.14,3068.01,3068.44,3057.23,3061.75,3060.41,3060.23,3055.43,3062.96,3064.42,3063.7,3057.99,3057.97,3065.99,3069.05,3073.19,3068.84,3067.58,3067.45,3064.78,3066.87,3067.5,3068.74,3067.5,3070.61,3059.89,3062.56,3066.56,3065.24,3061.41,3060.9,3053.06,3061.95,3059.49,3056.27,3059.09,3059.6,3056.32,3057.96,3058.97,3061.6,3066.01,3068.68,3068.43,3070.66,3072.53,3070.4,3073.28,3072.86,3070.68,3067.65,3066.0,3066.25,3070.21,3071.52,3068.61,3064.15,3064.26,3063.48,3062.8,3060.3,3059.85,3060.47,3064.84,3065.03,3066.71,3066.55,3066.41,3065.24,3067.81,3066.93,3065.0,3067.85,3060.14,3062.51,3061.39,3064.93,3064.94,3066.09,3066.49,3067.75,3070.38,3067.84,3067.51,3072.07,3071.31,3070.05,3068.95,3068.57,3067.73,3068.88,3067.87,3067.89,3065.01,3066.0,3069.24,3065.3,3063.52,3063.06,3064.11,3064.99,3063.19,3062.69,3066.9,3066.87,3065.42,3058.47,3058.2,3068.7,3065.56,3065.52,3059.04,3060.61,3059.57,3058.08,3055.2,3053.72,3060.26,3055.86,3045.88,3046.6,3051.18,3052.99,3057.9,3056.38,3059.4,3061.48,3061.15,3064.36,3065.77,3066.35,3066.8,3067.68,3068.0,3065.05,3063.01,3066.42,3066.16,3064.8,3067.89,3066.3,3068.58,3064.81,3065.74,3064.23,3065.42,3070.43,3069.65,3070.48,3070.57,3073.44,3078.3,3082.89,3079.01,3080.76,3079.67,3082.0,3081.56,3082.01,3081.24,3078.61,3080.11,3080.95,3080.03,3080.65,3079.97,3078.86,3078.5,3078.6,3077.34,3077.0,3076.39,3076.45,3077.45,3076.23,3072.22,3073.67,3079.31,3077.21,3075.68,3076.91,3078.2,3075.92,3077.67,3076.33,3075.14,3076.47,3077.04,3080.69,3079.8,3080.33,3075.65,3074.66,3073.05,3070.38,3067.96,3068.78,3067.92,3069.26,3069.37,3070.76,3068.12,3069.49,3069.98,3071.78,3070.88,3068.71,3067.04,3069.34,3070.99,3070.39,3069.63,3068.6,3068.89,3070.08,3069.26,3069.57,3069.72,3069.53,3067.99,3069.23,3070.93,3071.33,3068.33,3066.84,3066.23,3066.76,3068.17,3070.0,3072.0,3075.66,3073.9,3073.99,3074.66,3074.0,3076.62,3077.82,3076.01,3076.18,3075.52,3075.42,3075.01,3075.67,3079.55,3078.46,3082.28,3080.74,3081.27,3083.38,3084.49,3086.42,3084.9,3086.53,3085.27,3084.7,3084.08,3084.82,3086.99,3092.0,3089.49,3089.26,3084.07,3084.44,3084.8,3083.55,3082.59,3082.36,3084.65,3086.97,3085.67,3085.43,3088.82,3089.81,3091.81,3093.96,3092.59,3093.58,3093.74,3092.61,3091.64,3091.26,3113.47,3104.88,3092.36,3101.44,3107.88,3113.58,3119.86,3128.34,3133.07,3128.34,3123.1,3129.07,3122.38,3127.43,3126.59,3132.79,3137.33,3143.07,3145.41,3147.86,3148.82,3157.67,3157.57,3160.7,3160.01,3163.6,3172.63,3171.77,3174.38,3176.44,3178.06,3179.99,3185.0,3176.75,3171.53,3179.12,3176.52,3168.9,3168.72,3170.03,3168.15,3165.58,3166.83,3167.56,3161.34,3162.78,3167.67,3162.8,3157.67,3155.79,3157.92,3161.37,3163.06,3165.11,3163.45,3164.45,3166.86,3166.61,3165.0,3167.59,3167.45,3164.59,3167.05,3172.29,3176.49,3170.87,3166.5,3165.51,3165.58,3164.96,3165.19,3161.59,3165.09,3162.72,3163.97,3162.62,3165.19,3165.77,3163.55,3173.99,3171.18,3170.87,3168.34,3169.49,3167.69,3169.72,3166.89,3168.42,3166.68,3168.84,3165.83,3162.55,3159.17,3160.93,3162.0,3160.83,3158.69,3159.99,3159.9,3159.88,3160.02,3158.98,3160.0,3158.01,3159.2,3158.6,3158.71,3156.25,3157.2,3156.77,3156.91,3156.6,3156.55,3153.94,3152.29,3151.49,3151.41,3146.89,3148.18,3147.2,3147.17,3147.89,3149.31,3151.59,3156.4,3153.84,3155.3,3155.23,3156.03,3156.24,3155.61,3158.4,3155.05,3155.38,3152.34,3152.18,3153.34,3152.91,3153.99,3151.52,3149.21,3152.48,3151.63,3150.9,3149.75,3148.0,3148.25,3149.4,3149.7,3148.41,3147.65,3146.06,3147.06,3147.41,3146.72,3145.51,3142.17,3142.8,3140.42,3139.24,3140.69,3140.67,3139.22,3136.44,3139.14,3137.55,3133.96,3131.83,3130.8,3130.95,3129.59,3127.0,3129.85,3133.0,3132.21,3132.15,3130.41,3132.9,3134.57,3139.85,3133.04,3138.13,3135.79,3136.96,3133.26,3129.64,3128.02,3127.75,3130.0,3132.21,3133.06,3132.06,3131.88,3132.99,3134.0,3135.79,3137.68,3136.0,3137.89,3133.88,3133.81,3133.84,3133.71,3138.28,3143.06,3144.0,3143.17,3143.02,3145.34,3144.83,3144.81,3144.61,3146.0,3147.91,3146.69,3145.03,3142.46,3142.5,3141.1,3140.17,3140.11,3141.4,3143.92,3144.66,3146.71,3148.95,3146.13,3135.82,3136.96,3139.34,3134.9,3134.48,3136.76,3137.37,3136.92,3136.99,3133.71,3134.44,3132.38,3135.25,3137.14,3135.07,3136.15,3136.15,3139.87,3138.92,3138.5,3141.6,3144.19,3145.44,3147.36,3147.51,3142.12,3143.94,3142.43,3142.02,3142.21,3144.66,3146.53,3144.3,3145.73,3145.94,3146.56,3145.42,3146.05,3150.58,3154.16,3151.01,3149.76,3150.51,3149.31,3146.43,3146.66,3147.47,3145.75,3146.7,3147.1,3143.28,3146.19,3145.38,3145.25,3140.13,3143.45,3140.18,3138.3,3139.7,3136.88,3132.99,3134.7,3135.09,3135.74,3129.89,3126.61,3123.87,3125.14,3119.64,3123.09,3123.35,3120.16,3121.8,3125.0,3132.0,3126.44,3124.57,3120.75,3125.9,3128.05,3127.12,3124.8,3126.19,3128.65,3130.03,3125.31,3125.8,3126.11,3123.22,3125.03,3126.05,3126.24,3129.98,3130.55,3130.97,3129.1,3129.66,3130.27,3130.36,3131.12,3136.13,3137.65,3133.69,3137.18,3137.25,3138.83,3138.58,3141.52,3139.41,3139.05,3137.7,3139.46,3139.8,3140.98,3139.78,3139.17,3140.0,3141.49,3138.86,3139.52,3140.5,3142.58,3142.34,3142.47,3142.91,3142.89,3144.0,3147.55,3148.71,3151.21,3150.66,3148.5,3148.96,3148.5,3150.32,3152.45,3150.83,3150.29,3151.2,3153.01,3152.48,3149.23,3147.45,3146.68,3157.71,3153.34,3147.37,3143.99,3141.45,3142.66,3146.98,3146.61,3148.46,3149.5,3149.29,3148.18,3145.05,3146.86,3145.76,3148.84,3149.31,3146.86,3146.76],\"y\":[1814.895,1182.023,1511.21,821.059,669.95,594.607,397.261,475.226,1430.563,1351.268,848.732,961.415,677.695,2241.498,771.686,3400.92,457.283,815.311,843.761,1456.898,1147.73,2592.488,939.438,695.06,664.589,839.272,344.224,524.897,1029.553,1257.254,764.586,1618.563,599.314,385.634,340.075,245.402,273.54,932.316,297.465,800.419,470.172,358.191,198.746,398.956,521.275,398.68,250.799,376.615,178.701,1034.812,349.27,365.934,193.939,199.584,148.806,343.965,258.079,238.408,273.382,508.892,455.586,1497.43,603.768,705.325,471.812,358.129,1222.79,447.666,603.433,350.189,684.554,404.765,918.631,713.382,803.374,220.673,1013.652,1757.238,887.223,420.149,422.235,642.444,379.785,126.201,499.773,2342.571,1945.816,1288.743,676.794,392.273,424.757,1084.062,1139.501,790.354,2007.705,1446.953,1842.648,777.958,945.39,2579.427,2955.737,1590.911,1476.864,2861.345,772.493,876.768,1835.01,875.833,585.31,765.122,767.852,1825.83,1060.932,682.04,688.755,737.484,429.945,293.821,300.116,1045.831,712.192,2711.994,2052.2,3340.02,897.035,2391.303,2186.713,1517.988,344.748,771.478,720.502,656.313,530.014,1327.673,508.321,904.994,1152.633,523.227,293.715,229.893,202.519,252.467,601.482,317.28,345.035,575.193,374.831,194.465,270.588,367.969,1280.729,1909.713,774.939,518.596,294.403,337.627,382.69,353.682,534.457,1713.387,360.944,713.113,1393.388,1289.595,610.727,739.131,1619.367,2194.335,8164.046,2879.21,2159.701,2512.548,3579.377,1841.206,2810.677,3893.288,1849.815,5497.891,2407.824,1844.752,1304.788,945.57,2745.772,2050.842,2354.528,1577.291,903.569,1269.654,2703.684,766.884,1965.466,1320.285,1111.835,521.223,822.176,942.413,497.538,499.364,222.856,316.366,355.702,243.842,362.266,593.914,349.424,308.565,540.138,769.079,463.481,163.895,237.299,285.424,466.1,224.654,493.52,1674.225,4063.392,1370.598,472.447,957.289,609.428,338.42,243.509,745.35,1417.319,762.417,553.865,616.945,305.569,511.777,416.061,2007.687,312.874,1760.715,470.299,170.102,514.177,647.315,425.481,274.85,415.924,896.493,396.062,588.357,231.181,273.932,245.847,212.412,116.329,109.858,274.394,323.434,335.066,347.193,459.166,944.41,601.327,889.712,412.644,317.84,986.261,934.932,572.116,181.168,460.876,145.156,108.878,210.202,77.92,295.25,300.008,412.518,463.649,312.424,342.369,602.553,325.602,288.656,458.643,344.168,189.501,378.501,506.806,405.58,266.931,508.179,577.092,1968.061,3128.798,2617.171,810.468,1071.792,482.71,702.007,298.08,1139.23,623.801,1162.914,1203.468,673.113,606.991,499.32,344.082,916.323,1133.798,236.462,323.745,227.404,305.618,859.751,541.196,262.919,221.3,135.795,94.984,185.741,146.342,216.582,150.862,227.198,373.705,332.486,216.229,778.895,1204.286,326.503,380.38,1047.579,257.681,288.363,944.527,1025.858,1888.092,606.18,219.281,573.418,618.131,579.352,643.473,227.201,596.85,266.111,593.418,412.236,518.62,714.492,807.998,1833.123,1485.911,696.152,1044.399,1178.696,682.768,339.908,614.242,333.987,289.083,426.036,434.767,363.008,294.274,249.675,759.092,233.645,259.457,692.772,530.582,751.244,252.918,324.292,565.306,530.138,634.433,621.443,362.445,1462.934,578.493,404.427,432.71,381.631,206.741,803.279,286.361,454.727,989.949,1000.012,534.381,1225.959,2611.002,1238.904,1808.266,2668.663,1734.437,1991.659,1533.497,673.975,1417.797,1002.213,689.714,474.831,775.993,612.321,674.988,586.885,486.539,6750.373,1240.763,1031.138,1064.433,810.097,2543.442,1714.432,1408.587,2076.241,891.454,802.952,990.123,356.49,909.726,969.575,1157.716,408.802,557.485,790.536,760.441,903.066,478.393,406.574,460.658,270.44,397.786,2943.217,4367.234,1259.451,1068.328,966.188,1414.714,579.827,511.738,412.874,654.607,675.654,504.93,356.198,858.616,1158.323,1447.125,787.173,728.954,636.948,628.265,669.612,465.412,1222.997,749.451,462.962,472.928,432.435,342.099,1618.728,2358.947,952.987,460.716,651.763,975.681,444.398,645.867,449.599,193.003,278.721,545.444,842.045,277.826,994.515,588.675,591.108,309.423,892.268,276.425,502.627,968.723,404.031,211.579,444.69,715.557,984.707,1097.859,551.379,692.514,900.106,360.002,948.053,805.637,489.368,1676.558,1304.157,367.592,283.184,1023.029,456.415,763.262,343.508,461.29,879.775,1776.793,1251.296,591.245,573.997,1673.844,1283.242,2767.718,1120.511,657.294,746.819,905.747,599.259,715.33,481.675,327.764,388.74,1256.088,1555.066,601.571,277.709,213.939,322.601,214.083,472.872,296.863,364.37,746.543,378.365,967.733,5140.211,4083.258,1994.542,1976.259,888.817,461.462,437.566,1416.611,716.221,1318.431,481.782,2014.435,936.676,1459.321,855.198,732.281,466.019,450.272,560.57,469.751,622.444,518.498,933.561,1274.182,362.645,417.461,200.685,1204.422,1085.208,437.325,388.368,522.196,414.681,402.1,458.488,176.931,774.455,662.126,617.206,452.137,4865.578,3871.135,1343.329,634.081,483.47,1681.018,514.598,502.913,1322.138,529.723,572.34,348.409,713.894,228.335,215.652,253.718,284.838,694.79,180.093,810.769,563.133,209.468,355.301,1084.715,204.09,893.371,557.044,320.725,236.971,360.995,404.746,202.665,416.594,295.445,369.598,1691.926,445.675,502.376,451.028,754.112,460.168,253.657,293.696,364.866,139.172,187.996,297.765,167.774,288.681,128.716,179.501,428.036,213.013,396.147,290.492,459.26,333.25,604.208,535.843,218.827,379.209,623.314,309.742,1047.188,2658.829,741.273,2765.267,2446.593,900.038,1232.736,817.002,2687.132,3309.465,1746.003,699.151,574.566,262.053,505.975,270.49,1023.427,533.5,488.001,536.457,432.03,945.469,1080.591,611.695,611.907,1095.621,485.481,688.799,375.255,1322.925,2347.935,1281.055,1713.871,563.816,371.289,1137.167,1011.662,433.968,4755.422,2060.545,1118.297,1058.42,991.226,512.798,725.336,476.284,633.408,903.175,644.941,2829.545,1218.33,1149.1,755.961,1252.379,2399.314,350.433,457.851,727.54,748.377,2585.751,4337.831,2453.675,1355.272,2073.169,1425.068,1751.715,901.639,353.899,368.582,636.142,1082.148,271.744,399.517,439.441,377.24,330.026,233.732,285.884,308.136,639.158,734.67,567.183,310.671,995.761,12392.217,5461.011,2988.344,5529.668,2618.77,11929.186,2928.894,5355.073,1533.817,2310.282,2210.125,1805.742,2500.52,3272.782,1332.249,2270.554,2483.668,8790.039,13105.425,16039.554,8317.661,6814.545,3909.444,2716.544,2823.368,2433.446,3042.327,4014.336,2680.476,2166.982,8299.153,2107.079,2585.491,3224.808,2437.339,2865.693,1574.387,2219.401,2214.305,2410.523,1263.301,1232.671,1213.058,1789.33,827.919,1530.653,1732.94,1439.558,1552.842,1345.879,1394.187,3147.626,6162.965,7032.083,1330.471,2505.725,7118.551,2288.653,1286.682,1102.423,3249.307,1670.88,2218.379,2946.052,2525.484,1719.79,1630.798,1474.484,1299.503,434.158,1462.856,1914.008,1336.711,872.552,2661.102,1921.851,1223.061,892.979,1675.459,2747.98,3398.563,4782.692,3130.671,914.08,3275.661,3677.987,1920.096,1582.481,626.202,1699.704,3016.389,2348.542,3936.201,1440.961,2551.41,2929.114,3910.54,1731.929,1423.134,1630.803,823.665,1596.309,1843.181,1446.542,850.694,2297.843,856.543,883.961,501.157,1621.147,856.971,707.791,1351.166,795.198,938.608,485.179,455.671,1061.071,580.457,263.109,715.892,1587.285,993.923,1251.255,2659.143,996.502,853.854,744.677,711.983,3232.026,3662.831,807.0,555.69,1043.709,1292.106,987.334,375.225,316.734,438.411,289.699,537.944,942.885,797.012,1077.267,379.583,611.293,521.083,934.505,1175.247,499.493,1141.633,563.435,872.319,811.753,773.096,1412.344,3620.225,4714.694,669.244,1065.55,1598.224,847.615,1923.708,1020.52,1883.069,3076.446,2134.064,1453.728,11270.233,2936.896,6307.007,2166.477,1551.387,1853.874,1372.167,2298.452,1069.092,896.017,1027.708,1205.234,1794.761,2595.809,890.418,848.032,650.893,1088.28,200.664,502.739,575.785,921.978,808.706,3029.201,602.68,309.435,495.715,959.404,569.062,492.893,686.058,1227.456,2415.351,6515.3,1556.79,953.548,1004.564,1320.414,4557.466,1098.609,911.352,1232.801,1241.033,1343.423,769.908,447.129,647.478,822.26,767.131,569.507,437.851,1190.093,378.865,290.814,440.004,366.664,1587.445,389.51,1948.052,1274.222,418.255,155.696,281.607,310.623,166.909,303.48,700.347,271.28,110.636,520.183,820.569,810.861,1088.369,858.322,1295.596,2094.312,1503.768,1037.796,500.033,559.479,227.634,704.975,702.474,560.973,1364.022,508.316,349.588,640.477,527.515,1470.646,248.411,315.355,194.49,727.557,208.254,329.772,769.204,559.27,220.603,179.101,514.706,337.329,450.668,1473.433,2256.979,539.366,738.786,421.76,808.357,281.104,544.472,1304.849,1022.835,193.211,205.636,773.849,215.729,546.43,625.921,225.712,512.885,292.199,264.804,592.964,1204.967,418.402,742.071,437.497,433.652,1078.844,331.74,1040.031,872.767,1004.157,722.758,430.616,408.399,245.932,484.168,3624.12,976.418,394.652,1682.369,625.343,239.747,380.251,1597.606,848.428,708.537,664.832,371.165,750.007,1026.259,843.009,1023.456,1917.749,952.579,870.347,502.286,1363.581,780.743,1448.612,12431.885,6893.299,8886.959,3907.062,9540.759,4740.252,5895.644,16625.626,6312.555,3615.152,3860.571,2514.261,2760.668,1523.597,1871.628,2528.961,7365.0,8920.169,5768.383,6710.649,3346.652,4463.499,3666.88,6450.55,4832.119,5510.211,8186.365,3537.525,8281.314,10045.157,6383.577,5079.938,3813.839,3660.97,5728.121,7917.184,2421.103,5177.868,3136.173,2217.563,3832.957,1720.129,1543.371,1636.799,8034.61,4788.474,3850.793,1514.508,5392.819,1927.194,1163.751,1585.945,1209.542,1998.829,877.24,823.488,781.809,826.931,913.803,742.025,3002.547,1367.89,1044.189,1100.946,2047.804,2818.993,1017.674,1889.338,1032.258,579.044,748.169,927.378,1345.4,516.194,810.503,845.27,650.086,556.495,716.068,3167.786,1365.503,1120.129,1632.121,494.557,495.811,356.546,271.948,320.235,366.049,349.466,550.775,843.882,2000.798,961.087,470.513,438.616,819.214,594.347,286.774,251.089,602.025,267.413,278.638,425.458,282.646,1696.154,921.061,374.925,625.157,346.19,1447.882,338.668,501.822,996.179,1126.58,967.442,927.906,4074.406,898.707,1271.993,720.906,758.176,506.787,1384.601,2630.754,1180.051,296.364,385.161,594.547,303.281,206.3,1509.706,417.533,430.407,350.638,614.913,217.67,109.158,296.924,307.087,827.106,850.038,562.773,402.213,853.225,619.708,185.33,229.867,207.248,255.341,347.69,914.271,348.17,280.522,461.744,242.677,1689.641,1235.344,943.835,1181.751,733.24,268.104,381.13,818.733,1090.052,548.373,754.94,989.387,773.47,1064.937,1070.959,703.035,2594.209,1302.569,682.392,552.382,309.738,466.737,793.098,2376.261,856.232,754.519,404.143,168.334,1477.862,943.652,711.273,1748.362,1006.485,789.572,594.946,279.75,178.433,290.649,215.983,493.113,338.384,762.448,611.586,1334.322,294.505,303.188,134.407,516.94,1550.403,1126.795,485.425,622.304,1249.031,373.648,346.683,211.699,519.095,1088.352,529.813,523.314,772.507,209.114,687.664,329.146,352.705,444.147,395.78,325.339,513.402,784.247,986.546,1584.942,2185.948,785.321,729.112,453.787,897.861,262.964,404.52,171.003,580.24,118.207,406.641,160.17,743.848,437.773,1369.397,191.219,1229.096,398.903,403.85,322.726,970.586,568.304,478.038,404.745,1239.612,454.913,442.573,288.41,264.373,524.088,130.674,443.39,586.952,167.731,307.728,263.88,311.737,866.873,1745.621,745.983,309.615,328.348,383.704,1118.281,450.373,387.296,188.089,629.117,158.39,829.748,364.026,136.85,324.278,1060.597,707.567,409.192,443.098,510.64,923.325,605.203,716.174,198.6,554.733,1635.338,1598.253,4035.924,1229.607,1608.824,2794.958,636.725,1971.132,1481.98,1093.152,3786.967,1736.518,1289.176,1179.711,677.348,1259.158,841.34,248.067,451.306,413.411,883.511,395.721,304.827,431.303,1106.7,599.37,354.735,747.528,810.7,835.158,481.175,629.481,323.974,608.739,557.978,525.368,1225.958,840.532,1067.311,718.545,716.335,312.894,563.057,1017.419,618.553,512.007,588.984,294.695,278.158,217.027,537.444,269.51,225.5,501.376,691.99,483.791,127.283,709.697,467.43,307.414,507.697,422.858,256.808,1153.716,1055.198,1414.849,1144.706,1064.626,623.477,877.503,444.839,742.027,415.472,677.548,1051.317,655.2,370.676,1077.143,1051.053,784.457,4542.468,1733.555,1213.929,1538.198,2121.016,918.853,882.448,654.86,1728.875,631.103,301.013,661.938,933.172,370.951,202.456,406.614,314.65,592.089,26.727],\"type\":\"histogram\"},{\"marker\":{\"color\":\"#D2691E\"},\"mode\":\"lines\",\"name\":\"KDE\",\"x\":[3045.88,3047.2852525252524,3048.690505050505,3050.0957575757575,3051.5010101010103,3052.9062626262626,3054.3115151515153,3055.7167676767676,3057.1220202020204,3058.5272727272727,3059.9325252525255,3061.337777777778,3062.7430303030305,3064.148282828283,3065.5535353535356,3066.958787878788,3068.3640404040407,3069.769292929293,3071.1745454545458,3072.579797979798,3073.9850505050504,3075.390303030303,3076.7955555555554,3078.200808080808,3079.6060606060605,3081.0113131313133,3082.4165656565656,3083.8218181818183,3085.2270707070707,3086.6323232323234,3088.0375757575757,3089.4428282828285,3090.848080808081,3092.2533333333336,3093.658585858586,3095.0638383838386,3096.469090909091,3097.8743434343437,3099.279595959596,3100.6848484848488,3102.090101010101,3103.4953535353534,3104.900606060606,3106.3058585858585,3107.711111111111,3109.1163636363635,3110.5216161616163,3111.9268686868686,3113.3321212121214,3114.7373737373737,3116.1426262626264,3117.5478787878787,3118.9531313131315,3120.358383838384,3121.7636363636366,3123.168888888889,3124.5741414141416,3125.979393939394,3127.3846464646467,3128.789898989899,3130.1951515151513,3131.600404040404,3133.0056565656564,3134.410909090909,3135.8161616161615,3137.2214141414142,3138.6266666666666,3140.0319191919193,3141.4371717171716,3142.8424242424244,3144.2476767676767,3145.6529292929295,3147.0581818181818,3148.4634343434345,3149.868686868687,3151.2739393939396,3152.679191919192,3154.0844444444447,3155.489696969697,3156.8949494949493,3158.300202020202,3159.7054545454544,3161.110707070707,3162.5159595959594,3163.921212121212,3165.3264646464645,3166.7317171717173,3168.1369696969696,3169.5422222222223,3170.9474747474746,3172.3527272727274,3173.7579797979797,3175.1632323232325,3176.568484848485,3177.9737373737375,3179.37898989899,3180.7842424242426,3182.189494949495,3183.5947474747472,3185.0],\"y\":[0.001832905419240713,0.0015170993773343943,0.0009811990405335794,0.0010910781869862753,0.001662787664619852,0.002276584209048065,0.003017679469815101,0.004091626542089751,0.005452920992053675,0.006818537038424319,0.0076664779747402535,0.007643887894555952,0.007344902200072563,0.00827273925583825,0.011220488982456029,0.01494681923660121,0.016672754263443067,0.015298211710060586,0.013000656836147326,0.01136447782936633,0.009905415113226086,0.007991277793749363,0.005915182769079316,0.004603614839180802,0.004340216581875808,0.004677084159634987,0.004804286094145265,0.003945664227425191,0.0025142257578005694,0.0014727830724446968,0.0011591657181478472,0.0015827815995405762,0.0026670028851318566,0.003810420375174876,0.004026389180218125,0.003107185282237217,0.001940076730122543,0.0013880150787554427,0.0015444989246854268,0.0023609061649200076,0.0037401025635127546,0.005029582983599697,0.005321434602966492,0.004778565138234207,0.004284633110071723,0.004142142333983544,0.004650245486454227,0.005790340541463709,0.0068018904562159735,0.007335214235017366,0.008011875247544532,0.009032977214800161,0.009862320541122151,0.01015891479438546,0.010077897051723251,0.009700191176833918,0.00944402389099212,0.010385374840307136,0.012487699392384763,0.014125807036359036,0.014335489751832464,0.013760773754902053,0.013070724606546664,0.012663567468535765,0.013407581002278695,0.0152918031502357,0.01671953731557649,0.01690758767766308,0.0165814827586469,0.01570664895796692,0.014255369464538745,0.013369278115428072,0.012993378487870194,0.011780241643981209,0.009592167939552232,0.007696976248164002,0.006823155935995189,0.006619023196157732,0.007110669748385475,0.008153180108070628,0.008357004173573936,0.007467120695723313,0.006541623694037697,0.005979030384818917,0.00565790251287167,0.005607397002735248,0.00599245781550611,0.006338445734583271,0.0060092038421343755,0.0053319582929410685,0.004754442260061802,0.004333231721163359,0.004227903631578969,0.004279536987396199,0.003930156107007355,0.0029754130410062354,0.0017041868280610027,0.0007672145372132436,0.0005056108010257643,0.0005155116532610217],\"type\":\"scatter\"},{\"marker\":{\"color\":\"black\",\"size\":10},\"mode\":\"markers\",\"name\":\"Peaks\",\"x\":[3059.9325252525255,3068.3640404040407,3082.4165656565656,3093.658585858586,3104.900606060606,3120.358383838384,3130.1951515151513,3140.0319191919193,3158.300202020202,3168.1369696969696,3176.568484848485],\"y\":[0.0076664779747402535,0.016672754263443067,0.004804286094145265,0.004026389180218125,0.005321434602966492,0.01015891479438546,0.014335489751832464,0.01690758767766308,0.008357004173573936,0.006338445734583271,0.004279536987396199],\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"shapes\":[{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3059.9325252525255,\"x1\":3059.9325252525255,\"xref\":\"x\",\"y0\":0,\"y1\":0.007344902200072563,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3068.3640404040407,\"x1\":3068.3640404040407,\"xref\":\"x\",\"y0\":0,\"y1\":0.001159165718147847,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3082.4165656565656,\"x1\":3082.4165656565656,\"xref\":\"x\",\"y0\":0,\"y1\":0.004340216581875808,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3093.658585858586,\"x1\":3093.658585858586,\"xref\":\"x\",\"y0\":0,\"y1\":0.0013880150787554425,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3104.900606060606,\"x1\":3104.900606060606,\"xref\":\"x\",\"y0\":0,\"y1\":0.004142142333983544,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3120.358383838384,\"x1\":3120.358383838384,\"xref\":\"x\",\"y0\":0,\"y1\":0.00944402389099212,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3130.1951515151513,\"x1\":3130.1951515151513,\"xref\":\"x\",\"y0\":0,\"y1\":0.012663567468535765,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3140.0319191919193,\"x1\":3140.0319191919193,\"xref\":\"x\",\"y0\":0,\"y1\":0.0009811990405335785,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3158.300202020202,\"x1\":3158.300202020202,\"xref\":\"x\",\"y0\":0,\"y1\":0.006619023196157732,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3168.1369696969696,\"x1\":3168.1369696969696,\"xref\":\"x\",\"y0\":0,\"y1\":0.005607397002735248,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3176.568484848485,\"x1\":3176.568484848485,\"xref\":\"x\",\"y0\":0,\"y1\":0.004227903631578969,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3062.5744,\"xref\":\"x\",\"y0\":0.007505690087406408,\"y1\":0.007505690087406408,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.008915959990795457,\"y1\":0.008915959990795457,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3079.2688000000003,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.0045722513380105365,\"y1\":0.0045722513380105365,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3097.3544,\"xref\":\"x\",\"y0\":0.002707202129486784,\"y1\":0.002707202129486784,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3108.484,\"xref\":\"x\",\"y0\":0.004731788468475018,\"y1\":0.004731788468475018,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3123.7872,\"xref\":\"x\",\"y0\":0.00980146934268879,\"y1\":0.00980146934268879,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3133.5256,\"xref\":\"x\",\"y0\":0.013499528610184115,\"y1\":0.013499528610184115,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.00894439335909833,\"y1\":0.00894439335909833,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3153.0024,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.007488013684865834,\"y1\":0.007488013684865834,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3164.132,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.005972921368659259,\"y1\":0.005972921368659259,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3173.8704,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.004253720309487584,\"y1\":0.004253720309487584,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3059.9325252525255,\"x1\":3059.9325252525255,\"xref\":\"x\",\"y0\":0,\"y1\":0.0076664779747402535,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3068.3640404040407,\"x1\":3068.3640404040407,\"xref\":\"x\",\"y0\":0,\"y1\":0.016672754263443067,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3082.4165656565656,\"x1\":3082.4165656565656,\"xref\":\"x\",\"y0\":0,\"y1\":0.004804286094145265,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3093.658585858586,\"x1\":3093.658585858586,\"xref\":\"x\",\"y0\":0,\"y1\":0.004026389180218125,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3104.900606060606,\"x1\":3104.900606060606,\"xref\":\"x\",\"y0\":0,\"y1\":0.005321434602966492,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3120.358383838384,\"x1\":3120.358383838384,\"xref\":\"x\",\"y0\":0,\"y1\":0.01015891479438546,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3130.1951515151513,\"x1\":3130.1951515151513,\"xref\":\"x\",\"y0\":0,\"y1\":0.014335489751832464,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3140.0319191919193,\"x1\":3140.0319191919193,\"xref\":\"x\",\"y0\":0,\"y1\":0.01690758767766308,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3158.300202020202,\"x1\":3158.300202020202,\"xref\":\"x\",\"y0\":0,\"y1\":0.008357004173573936,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3168.1369696969696,\"x1\":3168.1369696969696,\"xref\":\"x\",\"y0\":0,\"y1\":0.006338445734583271,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3176.568484848485,\"x1\":3176.568484848485,\"xref\":\"x\",\"y0\":0,\"y1\":0.004279536987396199,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3062.5744,\"xref\":\"x\",\"y0\":0.007505690087406408,\"y1\":0.007505690087406408,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.008915959990795457,\"y1\":0.008915959990795457,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3079.2688000000003,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.0045722513380105365,\"y1\":0.0045722513380105365,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3097.3544,\"xref\":\"x\",\"y0\":0.002707202129486784,\"y1\":0.002707202129486784,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3108.484,\"xref\":\"x\",\"y0\":0.004731788468475018,\"y1\":0.004731788468475018,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3123.7872,\"xref\":\"x\",\"y0\":0.00980146934268879,\"y1\":0.00980146934268879,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3133.5256,\"xref\":\"x\",\"y0\":0.013499528610184115,\"y1\":0.013499528610184115,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.00894439335909833,\"y1\":0.00894439335909833,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3153.0024,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.007488013684865834,\"y1\":0.007488013684865834,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3164.132,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.005972921368659259,\"y1\":0.005972921368659259,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3173.8704,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.004253720309487584,\"y1\":0.004253720309487584,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3059.9325252525255,\"x1\":3059.9325252525255,\"xref\":\"x\",\"y0\":0,\"y1\":0.0076664779747402535,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3068.3640404040407,\"x1\":3068.3640404040407,\"xref\":\"x\",\"y0\":0,\"y1\":0.016672754263443067,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3082.4165656565656,\"x1\":3082.4165656565656,\"xref\":\"x\",\"y0\":0,\"y1\":0.004804286094145265,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3093.658585858586,\"x1\":3093.658585858586,\"xref\":\"x\",\"y0\":0,\"y1\":0.004026389180218125,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3104.900606060606,\"x1\":3104.900606060606,\"xref\":\"x\",\"y0\":0,\"y1\":0.005321434602966492,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3120.358383838384,\"x1\":3120.358383838384,\"xref\":\"x\",\"y0\":0,\"y1\":0.01015891479438546,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3130.1951515151513,\"x1\":3130.1951515151513,\"xref\":\"x\",\"y0\":0,\"y1\":0.014335489751832464,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3140.0319191919193,\"x1\":3140.0319191919193,\"xref\":\"x\",\"y0\":0,\"y1\":0.01690758767766308,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3158.300202020202,\"x1\":3158.300202020202,\"xref\":\"x\",\"y0\":0,\"y1\":0.008357004173573936,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3168.1369696969696,\"x1\":3168.1369696969696,\"xref\":\"x\",\"y0\":0,\"y1\":0.006338445734583271,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3176.568484848485,\"x1\":3176.568484848485,\"xref\":\"x\",\"y0\":0,\"y1\":0.004279536987396199,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3062.5744,\"xref\":\"x\",\"y0\":0.007505690087406408,\"y1\":0.007505690087406408,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.008915959990795457,\"y1\":0.008915959990795457,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3079.2688000000003,\"x1\":3087.616,\"xref\":\"x\",\"y0\":0.0045722513380105365,\"y1\":0.0045722513380105365,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3097.3544,\"xref\":\"x\",\"y0\":0.002707202129486784,\"y1\":0.002707202129486784,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3108.484,\"xref\":\"x\",\"y0\":0.004731788468475018,\"y1\":0.004731788468475018,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3123.7872,\"xref\":\"x\",\"y0\":0.00980146934268879,\"y1\":0.00980146934268879,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3087.616,\"x1\":3133.5256,\"xref\":\"x\",\"y0\":0.013499528610184115,\"y1\":0.013499528610184115,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3048.6624,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.00894439335909833,\"y1\":0.00894439335909833,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3153.0024,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.007488013684865834,\"y1\":0.007488013684865834,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3164.132,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.005972921368659259,\"y1\":0.005972921368659259,\"yref\":\"y\"},{\"line\":{\"color\":\"red\",\"width\":2},\"type\":\"line\",\"x0\":3173.8704,\"x1\":3182.2176,\"xref\":\"x\",\"y0\":0.004253720309487584,\"y1\":0.004253720309487584,\"yref\":\"y\"}]},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('f0efc821-18d5-43b5-ad6e-1133ea0ad873');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}}]},{"cell_type":"code","source":["# peaks  # ndarray\n","# kdx  # ndarray\n","# kdy  # ndarray\n","# kdx.min()\n","left_base * ticks_per_sample\n","# volume"],"metadata":{"id":"zqj944n-WzyZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(peak_y)\n","print(peak_props['prominences'])\n","peak_props"],"metadata":{"id":"Rvqv0RGojo9h"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##### dump"],"metadata":{"id":"qsyPhNR8yP1c"}},{"cell_type":"code","source":["\n","def fill_na(arr_, iin, iout, fill_value):\n","  arr_[iin:iout + 1] = fill_value\n","\n","  # 1. cross_point 찾기\n","  #   a. cross_over & cross_under\n","# def wave_range(t_df):\n","tf_entry = 'T'\n","tf_entry_num = to_itvnum(tf_entry)\n","base_shift_size = 3 # 3T used\n","\n","np_timeidx = np.array([intmin_np(date_) for date_ in t_df.index.to_numpy()])\n","\n","close = t_df.close.to_numpy()\n","b1_close = t_df.close.shift(tf_entry_num).to_numpy()  # 일단, 1 로 설정\n","dc_base_3T = t_df.dc_base_3T.to_numpy()\n","b1_dc_base_3T = t_df.dc_base_3T.shift(3).to_numpy()\n","\n","crossover = (close > dc_base_3T) & (b1_dc_base_3T > b1_close) & (np_timeidx % tf_entry_num == tf_entry_num - 1)\n","crossunder = (close < dc_base_3T) & (b1_dc_base_3T < b1_close) & (np_timeidx % tf_entry_num == tf_entry_num - 1)\n","\n","# 1. crossover ~ crossunder's high (over 과 under 의 index 포함해야함)\n","# 2. crossunder ~ crossover's low\n","high = t_df.high.to_numpy()\n","low = t_df.low.to_numpy()\n","\n","# print(np.sum(crossover))\n","# print(np.sum(crossunder))\n","\n","# pairing -> 더 긴 배열의 시작 index 가 더 작음\n","co_idx = np.argwhere(crossover)\n","cu_idx = np.argwhere(crossunder)\n","\n","print(co_idx)\n","print(cu_idx)\n","\n","# 2. 길이가 다른 경우\n","#  a. 길이가 긴 쪽이 먼저\n","if len(co_idx) > len(cu_idx):\n","  upper_zone = np.hstack((co_idx[:-1], cu_idx))  \n","  lower_zone = np.hstack((cu_idx, co_idx[1:]))  \n","elif len(co_idx) < len(cu_idx):\n","  upper_zone = np.hstack((co_idx, cu_idx[1:]))  \n","  lower_zone = np.hstack((cu_idx[:-1], co_idx))  \n","else:\n","  # 1. 길이가 같은 경우\n","  #   뭐가 먼저인지 판단하는 logic\n","  if co_idx[0] < cu_idx[0]:\n","    #   a. co 가 먼저인 경우\n","    upper_zone = np.hstack((co_idx, cu_idx))  \n","    lower_zone = np.hstack((cu_idx[:-1], co_idx[1:]))  \n","  else:\n","    #   b. cu 가 먼저인 경우\n","    upper_zone = np.hstack((co_idx[:-1], cu_idx[1:]))  \n","    lower_zone = np.hstack((cu_idx, co_idx))  \n","\n","# print(upper_zone)\n","# print(lower_zone)\n","\n","# make envelope\n","wave_high = np.full_like(high, np.nan)\n","wave_low = np.full_like(low, np.nan)\n","\n","fill_upper_zone = np.hstack((upper_zone[:-1, [1]], upper_zone[1:, [1]]))\n","fill_lower_zone = np.hstack((lower_zone[:-1, [1]], lower_zone[1:, [1]]))\n","\n","for items in zip(fill_upper_zone, upper_zone):\n","  print(items)\n","\n","[fill_na(wave_high, f_iin, f_iout, high[iin:iout + 1].max()) for (f_iin, f_iout), (iin, iout) in zip(fill_upper_zone, upper_zone)]\n","[fill_na(wave_low, f_iin, f_iout, low[iin:iout + 1].min()) for (f_iin, f_iout), (iin, iout) in zip(fill_lower_zone, lower_zone)]\n","# [high[iin:iout + 1].max() for iin, iout in upper_zone]\n","# [low[iin:iout + 1].min() for iin, iout in lower_zone]\n","\n","# t_df['fill_wave_high'] = pd.Series(wave_high).bfill().to_numpy()\n","# t_df['fill_wave_low'] = pd.Series(wave_low).bfill().to_numpy()\n","# t_df['fill_wave_high'] = pd.Series(wave_high).ffill().to_numpy()\n","# t_df['fill_wave_low'] = pd.Series(wave_low).ffill().to_numpy()\n","t_df['fill_wave_high'] = wave_high\n","t_df['fill_wave_low'] = wave_low\n","\n","  # return "],"metadata":{"id":"9VOxiJB1yUTI"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xpyP5t8Ht_pE","jp-MarkdownHeadingCollapsed":true,"tags":[]},"source":["### calc recursive indi's min_period"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"N1Hbm4OA4Tkk"},"outputs":[],"source":["ticker_prcn = get_precision_by_price(res_df.close.iloc[-1]) + 2\n","\n","target_len = 300000\n","slice_len_list = list(range(50, 10000, 100))\n","slice_len_list.insert(0, target_len)\n","\n","start_0 = time.time()\n","# prev_int_, prev_pnts_ = None, None\n","offset = 1\n","\n","for sl_idx, sample_len in enumerate(slice_len_list):\n","\n","  sample_df = res_df.iloc[-sample_len -offset:-offset]\n","  sample_len2 = sample_len\n","\n","  # --------- input using indi.s --------- #\n","  # res = ema_v0(sample_df['close'], 190)\n","  res = rsi(sample_df, 14)\n","\n","    #    to_htf()    #\n","  # df_5T = to_htf(sample_df, itv_='5T', offset='1h')\n","  # sample_len2 = len(df_5T)\n","\n","  # # --------- input using htf_indi. --------- #\n","  # res = ema(df_5T['close'], 195)\n","  # -------------------------------------- #\n","\n","  res_last_row = res.iloc[-1]\n","  if pd.isnull(res_last_row):\n","    continue\n","\n","  # print(res_last_row)\n","  # break\n","\n","  # sample_df = sample_df.join(to_lower_tf_v2(sample_df, df_5T, [-1]), how='inner')\n","\n","\n","  #   자리수 분할 계산    #\n","  int_, points_ = str(res_last_row).split('.')\n","  pnts_ = points_[:ticker_prcn]\n","\n","  if sl_idx == 0:\n","    target_int_ = int_\n","    target_pnts_ = pnts_\n","    print(\"target {} ({}) -> {} {}\".format(sample_len, sample_len2, int_, points_))\n","\n","  else:\n","    if target_int_ == int_ and target_pnts_ == pnts_:\n","      # print(sample_len, \"({})\".format(sample_len2), '->', int_, pnts_, end='\\n\\n')\n","      print(\"{} ({}) -> {} {}\\n\".format(sample_len, sample_len2, int_, points_))\n","      break\n","\n","print(time.time() - start_0)  # (1301)(1361)(1301)"]},{"cell_type":"markdown","metadata":{"id":"rrIGjmUzqU-D","tags":[]},"source":["## import utils & config"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"SeJan_0t95yL","executionInfo":{"status":"ok","timestamp":1648972532965,"user_tz":-540,"elapsed":4070,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["frame_ver = \"0114_htf\"\n","ID_arr = np.array(['v3', 'v5_2'])\n","\n","utils_public_name = \"{}.utils.{}_utils_public\".format(strat_pkg, frame_ver)\n","utils_public_lib = importlib.import_module(utils_public_name)\n","utils_public = utils_public_lib   # temporary\n","\n","u_name_list = [\"{}.utils.{}_utils_{}\".format(strat_pkg, frame_ver, id_) for id_ in ID_arr]\n","utils_arr = np.array([importlib.import_module(u_name) for u_name in u_name_list])\n","\n","config_name_list = [\"{}_config_{}.json\".format(frame_ver, id_) for id_ in ID_arr]\n","cfg_path_list = [os.path.join(current_path, strat_pkg, \"config\", name_) for name_ in config_name_list]\n","cfg_file_list = [open(cfg_path) for cfg_path in cfg_path_list]\n","config_arr = np.array([EasyDict(json.load(cfg_)) for cfg_ in cfg_file_list])\n","\n","# ------ opened files should be closed --> 닫지 않으면 reopen 시 error occurs ------ #\n","_ = [cfg_.close() for cfg_ in cfg_file_list]\n","show_plot = 1   # idep's var - do not touch"]},{"cell_type":"markdown","metadata":{"id":"leSQlImg4_9L","jp-MarkdownHeadingCollapsed":true,"tags":[]},"source":["### utils_"]},{"cell_type":"code","execution_count":55,"metadata":{"id":"CB2yZdQ95Cdg","executionInfo":{"status":"ok","timestamp":1648974169194,"user_tz":-540,"elapsed":492,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# from funcs.funcs_indicator_candlescore import *\n","# import numpy as np\n","\n","def get_line(touch_idx, rtc_):\n","  touch_idx_copy = touch_idx.copy()\n","  touch_line = np.full_like(rtc_, np.nan)\n","\n","  nan_idx = np.isnan(touch_idx_copy)\n","  touch_idx_copy[nan_idx] = 0   # for indexing array\n","  touch_line = rtc_[touch_idx_copy.astype(int)]\n","  touch_line[nan_idx] = np.nan   # for true comp.\n","\n","  return touch_line\n","\n","\n","def enlist_rtc(res_df, config, np_timeidx):\n","    strat_version = config.strat_version\n","    # ------------ rtc_gap ------------ #    \n","    short_epout_1_, long_epout_1_ = 'short_epout_1_{}'.format(strat_version), 'long_epout_1_{}'.format(strat_version)\n","    short_epout_0_, long_epout_0_ = 'short_epout_0_{}'.format(strat_version), 'long_epout_0_{}'.format(strat_version)\n","    short_tp_1_, long_tp_1_ = 'short_tp_1_{}'.format(strat_version), 'long_tp_1_{}'.format(strat_version)\n","    short_tp_0_, long_tp_0_ = 'short_tp_0_{}'.format(strat_version), 'long_tp_0_{}'.format(strat_version)\n","        \n","    # b1_itv_num = to_itvnum(config.loc_set.point.epout_itv0)\n","    # b2_itv_num = to_itvnum(config.loc_set.point.epout_itv0) * 2  # multi 2 for imb_v2\n","\n","    period1, period2 = 40, 40\n","    res_df[short_tp_1_] = res_df['dc_lower_{}{}'.format(config.loc_set.point.tp_itv1, period1)]\n","    res_df[short_tp_0_] = res_df['dc_upper_{}{}'.format(config.loc_set.point.tp_itv0, period2)]\n","    res_df[long_tp_1_] = res_df['dc_upper_{}{}'.format(config.loc_set.point.tp_itv1, period1)]\n","    res_df[long_tp_0_] = res_df['dc_lower_{}{}'.format(config.loc_set.point.tp_itv0, period2)]\n","\n","    period1, period2 = 5, 5\n","    res_df[short_epout_1_] = res_df['dc_lower_{}{}'.format(config.loc_set.point.epout_itv1, period1)]\n","    res_df[short_epout_0_] = res_df['dc_upper_{}{}'.format(config.loc_set.point.epout_itv0, period2)]\n","    res_df[long_epout_1_] = res_df['dc_upper_{}{}'.format(config.loc_set.point.epout_itv1, period1)]\n","    res_df[long_epout_0_] = res_df['dc_lower_{}{}'.format(config.loc_set.point.epout_itv0, period2)]\n","\n","    # ------ inversion ------ #\n","    if config.pos_set.short_inversion or config.pos_set.long_inversion:\n","      res_df.rename({short_tp_1_: long_tp_1_, long_tp_1_: short_tp_1_}, axis=1, inplace=True)\n","      res_df.rename({short_tp_0_: long_tp_0_, long_tp_0_: short_tp_0_}, axis=1, inplace=True)\n","      res_df.rename({short_epout_1_: long_epout_1_, long_epout_1_: short_epout_1_}, axis=1, inplace=True)\n","      res_df.rename({short_epout_0_: long_epout_0_, long_epout_0_: short_epout_0_}, axis=1, inplace=True)\n","\n","    res_df['short_tp_gap_{}'.format(strat_version)] = abs(res_df[short_tp_1_] - res_df[short_tp_0_])\n","    res_df['long_tp_gap_{}'.format(strat_version)] = abs(res_df[long_tp_1_] - res_df[long_tp_0_])\n","    res_df['short_epout_gap_{}'.format(strat_version)] = abs(res_df[short_epout_1_] - res_df[short_epout_0_])\n","    res_df['long_epout_gap_{}'.format(strat_version)] = abs(res_df[long_epout_1_] - res_df[long_epout_0_])\n","    \n","    # ------------ dtk_gap ------------ #\n","    # res_df['short_dtk_1_{}'.format(strat_version)] = res_df['bb_lower_%s' % config.loc_set.zone.dtk_itv]\n","    # res_df['short_dtk_0_{}'.format(strat_version)] = res_df['dc_upper_%s' % config.loc_set.zone.dtk_itv]\n","    # res_df['long_dtk_1_{}'.format(strat_version)] = res_df['bb_upper_%s' % config.loc_set.zone.dtk_itv]\n","    # res_df['long_dtk_0_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.zone.dtk_itv]\n","\n","    # res_df['short_dtk_gap_{}'.format(strat_version)] = abs(\n","    #     res_df['short_dtk_0_{}'.format(strat_version)] - res_df['short_dtk_1_{}'.format(strat_version)])\n","    # res_df['long_dtk_gap_{}'.format(strat_version)] = abs(\n","    #     res_df['long_dtk_1_{}'.format(strat_version)] - res_df['long_dtk_0_{}'.format(strat_version)])\n","\n","    return res_df\n","\n","\n","def enlist_tr(res_df, config, np_timeidx, mode='OPEN'):\n","    strat_version = config.strat_version\n","    # ---------------- point definition : get open_res ---------------- #    \n","    len_df = len(res_df)\n","    short_open_res = np.ones(len_df)\n","    long_open_res = np.ones(len_df)\n","    \n","    short_tp_1_col, short_tp_0_col, short_tp_gap_col = 'short_tp_1_{}'.format(strat_version), 'short_tp_0_{}'.format(strat_version), 'short_tp_gap_{}'.format(strat_version) \n","    long_tp_1_col, long_tp_0_col, long_tp_gap_col = 'long_tp_1_{}'.format(strat_version), 'long_tp_0_{}'.format(strat_version), 'long_tp_gap_{}'.format(strat_version) \n","    short_epout_1_col, short_epout_0_col, short_epout_gap_col = 'short_epout_1_{}'.format(strat_version), 'short_epout_0_{}'.format(strat_version), 'short_epout_gap_{}'.format(strat_version) \n","    long_epout_1_col, long_epout_0_col, long_epout_gap_col = 'long_epout_1_{}'.format(strat_version), 'long_epout_0_{}'.format(strat_version), 'long_epout_gap_{}'.format(strat_version) \n","\n","    tp_cols = [short_tp_1_col, short_tp_0_col, short_tp_gap_col, long_tp_1_col, long_tp_0_col, long_tp_gap_col]   # Todo - public_indi 이전에 해야할지도 모름\n","    epout_cols = [short_epout_1_col, short_epout_0_col, short_epout_gap_col, long_epout_1_col, long_epout_0_col, long_epout_gap_col]   # Todo - public_indi 이전에 해야할지도 모름\n","    data_cols = ['open', 'high', 'low']   # Todo - public_indi 이전에 해야할지도 모름 # 'close', 'haopen', 'hahigh', 'halow', 'haclose'\n","\n","    short_tp_1_, short_tp_0_, short_tp_gap_, long_tp_1_, long_tp_0_, long_tp_gap_ = [res_df[col_].to_numpy() for col_ in tp_cols]\n","    short_epout_1_, short_epout_0_, short_epout_gap_, long_epout_1_, long_epout_0_, long_epout_gap_ = [res_df[col_].to_numpy() for col_ in epout_cols]\n","    open, high, low = [res_df[col_].to_numpy() for col_ in data_cols]\n","\n","    short_base = (short_tp_1_ + short_tp_0_) / 2\n","    long_base = (long_tp_1_ + long_tp_0_) / 2\n","\n","    short_base2 = (short_epout_1_ + short_epout_0_) / 2\n","    long_base2 = (long_epout_1_ + long_epout_0_) / 2\n","\n","    res_df['short_base_{}'.format(strat_version)] = short_base\n","    res_df['long_base_{}'.format(strat_version)] = long_base\n","    \n","    # --------------- point1 & 2 --------------- #    \n","    point2_period = 60\n","    # short_open_res *= res_df['short_wave_point_{}{}'.format('T', 40)].to_numpy().astype(bool)\n","    short_open_res *= res_df['short_wave_point_{}{}'.format('T', 40)].rolling(point2_period).max().to_numpy().astype(bool)\n","    long_open_res *= res_df['long_wave_point_{}{}'.format('T', 40)].rolling(point2_period).max().to_numpy().astype(bool)  # == 1, 기간내에 point 1 발생한 것\n","\n","    short_open_res *= res_df['short_wave_point_{}{}'.format('T', 5)].to_numpy().astype(bool)\n","    long_open_res *= res_df['long_wave_point_{}{}'.format('T', 5)].to_numpy().astype(bool)\n"," \n","    res_df['short_open_{}'.format(strat_version)] = short_open_res    \n","    res_df['long_open_{}'.format(strat_version)] = long_open_res\n","\n","    # --------------- tp --------------- #\n","    tpg = config.tr_set.tp_gap\n","    res_df['short_tp_{}'.format(strat_version)] = short_tp_1_ - short_tp_gap_ * tpg\n","    res_df['long_tp_{}'.format(strat_version)] = long_tp_1_ + long_tp_gap_ * tpg\n","\n","    # ---------------- epout ---------------- #\n","    # -------- limit_ep -------- #\n","    if config.ep_set.entry_type == \"LIMIT\":\n","      epg = config.tr_set.ep_gap\n","      # res_df['short_ep_{}'.format(strat_version)] = short_epout_0_ + short_epout_gap_ * epg\n","      # res_df['long_ep_{}'.format(strat_version)] = long_epout_0_ - long_epout_gap_ * epg\n","      res_df['short_ep_{}'.format(strat_version)] = short_base2 + short_epout_gap_ * epg\n","      res_df['long_ep_{}'.format(strat_version)] = long_base2 - long_epout_gap_ * epg\n","    \n","    # -------- market_ep -------- #\n","    else:\n","        res_df['short_ep_{}'.format(strat_version)] = res_df['close']\n","        res_df['long_ep_{}'.format(strat_version)] = res_df['close']\n","\n","    # --------------- out --------------- #\n","    outg = config.tr_set.out_gap\n","    res_df['short_out_{}'.format(strat_version)] = short_epout_0_ + short_epout_gap_ * outg\n","    res_df['long_out_{}'.format(strat_version)] = long_epout_0_ - long_epout_gap_ * outg\n","\n","    short_tp_ = res_df['short_tp_{}'.format(strat_version)].to_numpy()\n","    short_ep_ = res_df['short_ep_{}'.format(strat_version)].to_numpy()\n","    short_out_ = res_df['short_out_{}'.format(strat_version)].to_numpy()\n","    short_open_res *= (short_tp_ < short_ep_) & (short_ep_ < short_out_)\n","    res_df['short_open_{}'.format(strat_version)] = short_open_res\n","\n","    long_tp_ = res_df['long_tp_{}'.format(strat_version)].to_numpy()\n","    long_ep_ = res_df['long_ep_{}'.format(strat_version)].to_numpy()\n","    long_out_ = res_df['long_out_{}'.format(strat_version)].to_numpy()\n","    long_open_res *= (long_tp_ > long_ep_) & (long_ep_ > long_out_) \n","    res_df['long_open_{}'.format(strat_version)] = long_open_res\n","\n","    # ------ tr ------ #\n","    res_df['short_tr_{}'.format(strat_version)] = abs((short_ep_ / short_tp_ - config.trader_set.limit_fee - 1) / (short_ep_ / short_out_ - config.trader_set.market_fee - 1))\n","    res_df['long_tr_{}'.format(strat_version)] = abs((long_tp_ / long_ep_ - config.trader_set.limit_fee - 1) / (long_out_ / long_ep_ - config.trader_set.market_fee - 1))\n","\n","    # -------- zoned_ep -------- #\n","    if config.tr_set.c_ep_gap != \"None\":\n","        # res_df['short_ep_org_{}'.format(strat_version)] = res_df['short_ep_{}'.format(strat_version)].copy()\n","        # res_df['long_ep_org_{}'.format(strat_version)] = res_df['long_ep_{}'.format(strat_version)].copy()\n","        res_df['short_ep2_{}'.format(strat_version)] = short_epout_1_ + short_epout_gap_ * config.tr_set.c_ep_gap\n","        res_df['long_ep2_{}'.format(strat_version)] = long_epout_1_ - long_epout_gap_ * config.tr_set.c_ep_gap\n","\n","    # -------- zoned_out -------- #\n","    if config.tr_set.t_out_gap != \"None\":\n","        # res_df['short_out_org_{}'.format(strat_version)] = res_df['short_out_{}'.format(strat_version)].copy()\n","        # res_df['long_out_org_{}'.format(strat_version)] = res_df['long_out_{}'.format(strat_version)].copy()\n","        res_df['short_out2_{}'.format(strat_version)] = res_df['short_epout_0_{}'.format(strat_version)] + res_df['short_epout_gap_{}'.format(strat_version)] * config.tr_set.t_out_gap\n","        res_df['long_out2_{}'.format(strat_version)] = res_df['long_epout_0_{}'.format(strat_version)] - res_df['long_epout_gap_{}'.format(strat_version)] * config.tr_set.t_out_gap\n","\n","    # --------------- bias --------------- #  Todo - 추후, bias_set 독립시키는게 좋지 않을까\n","    bias_info_tick = config.tr_set.bias_info_tick\n","    # ------ bias_info can use future_data ------ #\n","    # res_df['short_bias_info_{}'.format(strat_version)] = res_df['dc_lower_T'].shift(-bias_info_tick)  # open / ep_tick 으로부터 bias_info_tick 만큼\n","    # res_df['long_bias_info_{}'.format(strat_version)] = res_df['dc_upper_T'].shift(-bias_info_tick)\n","    res_df['short_bias_info_{}'.format(strat_version)] = res_df['low'].rolling(bias_info_tick).min().shift(-bias_info_tick)\n","    res_df['long_bias_info_{}'.format(strat_version)] = res_df['high'].rolling(bias_info_tick).max().shift(-bias_info_tick)\n","\n","    # bias_thresh 는 결국 tp 가 될 것\n","    res_df['short_bias_thresh_{}'.format(strat_version)] = res_df['short_tp_{}'.format(strat_version)]\n","    res_df['long_bias_thresh_{}'.format(strat_version)] = res_df['long_tp_{}'.format(strat_version)]\n","    # res_df['short_bias_thresh_{}'.format(strat_version)] = res_df['dc_lower_T'] - res_df['short_tp_gap_{}'.format(strat_version)] * config.tr_set.bias_gap\n","    # res_df['long_bias_thresh_{}'.format(strat_version)] = res_df['dc_upper_T'] + res_df['long_tp_gap_{}'.format(strat_version)] * config.tr_set.bias_gap \n","        \n","    return res_df\n"]},{"cell_type":"markdown","metadata":{"id":"HKdUKKl-483N","jp-MarkdownHeadingCollapsed":true,"tags":[]},"source":["### utils_public"]},{"cell_type":"code","execution_count":50,"metadata":{"id":"nzOYWA2kqZ0d","executionInfo":{"status":"ok","timestamp":1648973856455,"user_tz":-540,"elapsed":1620,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["# from funcs.funcs_indicator import *\n","# from funcs.funcs_trader import *\n","# import logging\n","# from ast import literal_eval\n","\n","sys_log = logging.getLogger()\n","\n","\n","class OrderSide:\n","    BUY = \"BUY\"\n","    SELL = \"SELL\"\n","    INVALID = None\n","\n","\n","def lvrg_set(res_df, config, open_side, ep_, out_, fee, limit_leverage=50):\n","    strat_version = config.strat_version\n","    if not pd.isnull(out_) and not config.lvrg_set.static_lvrg:\n","      if strat_version in ['v3']:\n","        if open_side == OrderSide.SELL:\n","          loss = out_ / ep_\n","        else:\n","          loss = ep_ / out_\n","      else:  # 이 phase 가 정석, 윗 phase 는 결과가 수익 극대화라 사용함\n","        if open_side == OrderSide.SELL:\n","          loss = ep_ / out_          \n","        else:\n","          loss = out_ / ep_\n","\n","        config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(loss - 1 - (fee + config.trader_set.market_fee))\n","\n","    if not config.lvrg_set.allow_float:\n","        config.lvrg_set.leverage = int(config.lvrg_set.leverage)\n","\n","    # ------------ leverage rejection ------------ #\n","    # 감당하기 힘든 fluc. 의 경우 진입하지 않음 - dynamic_lvrg 사용 경우\n","    if config.lvrg_set.leverage < 1 and config.lvrg_set.lvrg_rejection:\n","    # if config.lvrg_set.leverage >= 1 and config.lvrg_set.lvrg_rejection:\n","        return None\n","    config.lvrg_set.leverage = min(limit_leverage, max(config.lvrg_set.leverage, 1))\n","\n","    return config.lvrg_set.leverage\n","\n","\n","def sync_check(df_, config, order_side=\"OPEN\", row_slice=True):\n","    try:\n","        make_itv_list = [m_itv.replace('m', 'T') for m_itv in literal_eval(config.trader_set.itv_list)]\n","        row_list = literal_eval(config.trader_set.row_list)\n","        rec_row_list = literal_eval(config.trader_set.rec_row_list)\n","        offset_list = literal_eval(config.trader_set.offset_list)\n","\n","        assert len(make_itv_list) == len(offset_list), \"length of itv & offset_list should be equal\"\n","        htf_df_list = [to_htf(df_, itv_=itv_, offset=offset_) for itv_idx, (itv_, offset_)\n","                       in enumerate(zip(make_itv_list, offset_list)) if itv_idx != 0]  #\n","        htf_df_list.insert(0, df_)\n","\n","        # for htf_df_ in htf_df_list:\n","        #     print(htf_df_.tail())\n","\n","        #       Todo        #\n","        #        1. row_list calc.\n","        #           a. indi. 를 만들기 위한 최소 period 가 존재하고, 그 indi. 를 사용한 lb_period 가 존재함\n","        #           b. => default_period + lb_period\n","        #               i. from sync_check, public_indi, ep_point2, ep_dur 의 tf 별 max lb_period check\n","        #                   1. default_period + max lb_period check\n","        #                       a. 현재까지 lb_period_list\n","        #                           h_prev_idx (open / close) 60\n","        #                           dc_period 135\n","        #                           zone_dc_period 135\n","\n","        # --------- slicing (in trader phase only) --------- #\n","        #               --> latency 영향도가 높은 곳은 이곳\n","        if row_slice:   # recursive 가 아닌 indi. 의 latency 를 고려한 slicing\n","            df, df_5T, df_15T, df_30T, df_4H = [df_s.iloc[-row_list[row_idx]:].copy() for row_idx, df_s in enumerate(htf_df_list)]\n","            rec_df, rec_df_5T, rec_df_15T, rec_df_30T, rec_df_4H = [df_s.iloc[-rec_row_list[row_idx]:].copy() for row_idx, df_s in enumerate(htf_df_list)]\n","        else:\n","            df, df_5T, df_15T, df_30T, df_4H = htf_df_list\n","            rec_df, rec_df_5T, rec_df_15T, rec_df_30T, rec_df_4H = htf_df_list\n","\n","        # --------- add indi. --------- #\n","\n","        #        1. 필요한 indi. 는 enlist_epouttp & mr_check 보면서 삽입\n","        #        2. min use_rows 계산을 위해서, tf 별로 gathering 함        #\n","        start_0 = time.time()\n","\n","        df = dc_line(df, None, '1m', dc_period=20)\n","        df = bb_line(df, None, '1m')\n","        # print(df.tail())\n","\n","        df = dc_line(df, df_5T, '5T')\n","        df = bb_line(df, df_5T, '5T')\n","\n","        df = dc_line(df, df_15T, '15T')\n","        df = bb_line(df, df_15T, '15T')\n","\n","        df = bb_line(df, df_30T, '30T')\n","\n","        # print(time.time() - start_0)\n","\n","        # start_0 = time.time()\n","        df = bb_line(df, df_4H, '4H')\n","        # print(time.time() - start_0)\n","\n","        rec_df['rsi_1m'] = rsi(rec_df, 14)  # Todo - recursive, 250 period\n","        df = df.join(to_lower_tf_v2(df, rec_df.iloc[:, [-1]], [-1], backing_i=0), how='inner')  # <-- join same_tf manual\n","        # print(df.rsi_1m.tail())\n","\n","        if order_side in [\"OPEN\"]:\n","            rec_df_5T['ema_5T'] = ema(rec_df_5T['close'], 195)  # Todo - recursive, 1100 period (5T)\n","            df = df.join(to_lower_tf_v2(df, rec_df_5T, [-1]), how='inner')\n","\n","    except Exception as e:\n","        sys_log.error(\"error in sync_check :\", e)\n","    else:\n","        return df\n","\n","\n","def public_indi(res_df, config, np_timeidx, order_side=\"OPEN\"):\n","\n","    strat_version = config.strat_version\n","\n","    # res_df = mcp(res_df, 40, ltf_df=None, touch_lbperiod=50)\n","    res_df = wave_range_v4(res_df, 5, ltf_df=None, touch_lbperiod=50)\n","    res_df = wave_range_v4(res_df, 40, ltf_df=None, touch_lbperiod=50)\n","    # res_df = wave_range_v3(res_df, 60, ltf_df=None, touch_lbperiod=60)\n","    # res_df = wave_range_v3(to_htf(res_df, itv_='5T', offset='1h'), 20, ltf_df=res_df, touch_lbperiod=100)\n","    \n","    # res_df = dc_level(res_df, '5T', 1)\n","    # res_df = bb_level(res_df, '5T', 1)\n","    # res_df = st_level(res_df, '5T', 1)\n","\n","    # res_df = dc_level(res_df, '15T', 1)\n","    # res_df = bb_level(res_df, '15T', 1)\n","    # res_df = dtk_plot(res_df, dtk_itv2='15T', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line, np_timeidx=np_timeidx)\n","\n","    # res_df = st_level(res_df, '15T', 1)\n","\n","    # res_df = dc_level(res_df, '30T', 1)\n","    # res_df = bb_level(res_df, '30T', 1)\n","    # res_df = st_level(res_df, '30T', 1)\n","\n","    # res_df = bb_level(res_df, 'H', 1)\n","\n","    # res_df = bb_level(res_df, '4H', 1)\n","\n","    # res_df['dc_upper_v2'.format(strat_version)] = res_df['high'].rolling(config.loc_set.zone.dc_period).max()\n","    # res_df['dc_lower_v2'.format(strat_version)] = res_df['low'].rolling(config.loc_set.zone.dc_period).min()\n","\n","    # res_df['zone_dc_upper_v2'.format(strat_version)] = res_df['high'].rolling(config.loc_set.zone.zone_dc_period).max()\n","    # res_df['zone_dc_lower_v2'.format(strat_version)] = res_df['low'].rolling(config.loc_set.zone.zone_dc_period).min()\n","\n","    if order_side in [\"OPEN\"]:\n","        h_candle_v3(res_df, '5T')\n","        h_candle_v3(res_df, '15T')\n","        h_candle_v3(res_df, 'H')\n","\n","        # candle_score_v2(res_df, 'T', unsigned=False)\n","\n","        # hc_itv = 'H'\n","        # h_candle_col = ['open_{}'.format(hc_itv), 'high_{}'.format(hc_itv), 'low_{}'.format(hc_itv), 'close_{}'.format(hc_itv)]\n","        # candle_score_v2(res_df, hc_itv, ohlc_col=h_candle_col, unsigned=False)\n","\n","    #     temp indi.    #\n","    # res_df[\"ma30_1m\"] = res_df['close'].rolling(30).mean()\n","    # res_df[\"ma60_1m\"] = res_df['close'].rolling(60).mean()\n","    # res_df = dtk_plot(res_df, dtk_itv2='15T', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line, np_timeidx=np_timeidx)\n","\n","    return res_df\n","\n","def ep_out(res_df, config, op_idx, e_j, tp_j, np_datas, open_side):  \n","  h, l = np_datas\n","  strat_version = config.strat_version\n","  ep_out = 0\n","  \n","  if config.loc_set.zone.ep_out_tick != \"None\":\n","    if e_j - op_idx >= config.loc_set.zone.ep_out_tick:\n","      ep_out = 1\n","  \n","  if config.loc_set.zone.ei_k != \"None\":\n","    if open_side == OrderSide.SELL:      \n","      short_tp_ = res_df['short_tp_{}'.format(strat_version)].to_numpy()  # id 에 따라 dynamic 변수라 이곳에서 numpy 화 진행\n","      short_tp_gap_ = res_df['short_tp_gap_{}'.format(strat_version)].to_numpy()\n","      if l[e_j] <= short_tp_[tp_j] + short_tp_gap_[tp_j] * config.loc_set.zone.ei_k:\n","        ep_out = 1\n","    else:\n","      long_tp_ = res_df['long_tp_{}'.format(strat_version)].to_numpy()  # iloc 이 빠를까, to_numpy() 가 빠를까  # 3.94 ms --> 5.34 ms (iloc)\n","      long_tp_gap_ = res_df['long_tp_gap_{}'.format(strat_version)].to_numpy()\n","      if h[e_j] >= long_tp_[tp_j] - long_tp_gap_[tp_j] * config.loc_set.zone.ei_k:\n","        ep_out = 1\n","  \n","  return ep_out\n","\n","def ep_loc_point2(res_df, config, i, out_j, point2_list, side=OrderSide.SELL):\n","  dc_upper_1T, dc_upper_15T, dc_lower_1T, dc_lower_15T, close, resi_T, sup_T, wick_score = point2_list\n","  allow_ep_in = 1\n","  if config.strat_version in ['v5_2']:\n","    if side == OrderSide.SELL:\n","      allow_ep_in *= (dc_upper_1T[i - 1] <= dc_upper_15T[i]) & \\\n","            (dc_upper_15T[i - 1] != dc_upper_15T[i])\n","    else:\n","      allow_ep_in *= (dc_lower_1T[i - 1] >= dc_lower_15T[i]) & \\\n","              (dc_lower_15T[i - 1] != dc_lower_15T[i])\n","\n","  if config.strat_version in ['v3_4']:\n","    wick_score_list = literal_eval(config.ep_set.point2.wick_score_list)\n","    if side == OrderSide.SELL:\n","      allow_ep_in *= close[i] < sup_T[i - 1]\n","      if len(wick_score_list) != 0:\n","        allow_ep_in *= wick_score[i] < -wick_score_list[0]\n","    else:\n","      allow_ep_in *= close[i] > resi_T[i - 1]\n","      if len(wick_score_list) != 0:\n","        allow_ep_in *= wick_score[i] > wick_score_list[0]\n","\n","  if allow_ep_in:\n","    out_j = i\n","  return allow_ep_in, out_j\n","\n","\n","# vectorized calc.\n","def ep_loc_v2(res_df, config, np_timeidx, show_detail=True, ep_loc_side=OrderSide.SELL):\n","    strat_version = config.strat_version\n","\n","    # ------- param init ------- #\n","    open_side = None\n","    len_df = len(res_df)\n","    mr_res = np.ones(len_df)\n","    zone_arr = np.full(len_df, 'n')\n","\n","    # ------ process 한번에 처리해서 param_check 만 ver. 별로 하면 될 것 ------ #\n","    #     => public_indi() 가 될 것\n","    #     1. 사용한 param 정보와 matching 된 data 병렬로 나열 logging 될 것\n","    tp_fee, out_fee = calc_tp_out_fee_v2(config)\n","\n","    # ------------ candle_score ------------ #    \n","    wick_score_list = literal_eval(config.loc_set.point.wick_score_list)\n","    if len(wick_score_list) != 0:\n","      score_itv_list = literal_eval(config.loc_set.point.score_itv_list)\n","      # ------ candle_score_v0 (1m initial tick 기준임) ------ #  Todo - higher timeframe 경우 back_data 사용해야함\n","      for wick_score_, score_itv_ in zip(wick_score_list, score_itv_list):\n","        wick_score = res_df['wick_score_{}'.format(score_itv_)].to_numpy()\n","        if ep_loc_side == OrderSide.SELL:\n","          mr_res *= wick_score <= -wick_score_\n","        else:\n","          mr_res *= wick_score >= wick_score_\n","    \n","    # -------------- tr_thresh -------------- #\n","    if config.loc_set.zone.short_tr_thresh != \"None\":\n","      if ep_loc_side == OrderSide.SELL:\n","        short_tr_ = res_df['short_tr_{}'.format(strat_version)].to_numpy()\n","        # mr_res *= short_tr_ >= config.loc_set.zone.short_tr_thresh\n","        mr_res *= short_tr_ <= config.loc_set.zone.short_tr_thresh\n","      else:\n","        long_tr_ = res_df['long_tr_{}'.format(strat_version)].to_numpy()\n","        # mr_res *= long_tr_ >= config.loc_set.zone.long_tr_thresh\n","        mr_res *= long_tr_ <= config.loc_set.zone.long_tr_thresh\n","\n","    # -------------- spread - independent to tr_set -------------- #\n","    if config.loc_set.zone.short_spread != \"None\":\n","      if strat_version in ['v3']:\n","        if ep_loc_side == OrderSide.SELL:\n","          bb_base_5T = res_df['bb_base_5T'].to_numpy()  # to_numpy() 는 ep_loc 에서 진행됨\n","          bb_lower_5T = res_df['bb_lower_5T'].to_numpy()\n","          mr_res *= (bb_base_5T - bb_lower_5T - tp_fee * bb_base_5T) / (bb_base_5T - bb_lower_5T + out_fee * bb_base_5T) >= config.loc_set.zone.short_spread\n","        else:\n","          bb_upper_5T = res_df['bb_upper_5T'].to_numpy()\n","          dc_lower_5T = res_df['dc_lower_5T'].to_numpy()\n","          # mr_res *= (bb_base_5T - dc_lower_5T - tp_fee * bb_upper_5T) / (bb_base_5T - dc_lower_5T + out_fee * bb_base_5T) >= config.loc_set.zone.long_spread\n","          mr_res *= (bb_upper_5T - dc_lower_5T - tp_fee * bb_upper_5T) / (bb_upper_5T - dc_lower_5T + out_fee * bb_upper_5T) >= config.loc_set.zone.long_spread\n","\n","    # ------------ rtc_zone  ------------ #\n","    # ------ dtk ------ #\n","    if config.loc_set.zone.dt_k != \"None\":\n","      # ------ dc_v2 ------ #\n","      dc_lower_v2 = res_df['dc_lower_v2'.format(strat_version)].to_numpy()\n","      short_dtk_1_ = res_df['short_dtk_1_{}'.format(strat_version)].to_numpy() - \\\n","              res_df['short_dtk_gap_{}'.format(strat_version)].to_numpy() * config.loc_set.zone.dt_k\n","      dc_upper_v2 = res_df['dc_upper_v2'.format(strat_version)].to_numpy()\n","      long_dtk_1_ = res_df['long_dtk_1_{}'.format(strat_version)].to_numpy() + \\\n","              res_df['long_dtk_gap_{}'.format(strat_version)].to_numpy() * config.loc_set.zone.dt_k\n","      if ep_loc_side == OrderSide.SELL:\n","        mr_res *= dc_lower_v2 >= short_dtk_1_\n","      else:\n","        mr_res *= dc_upper_v2 <= long_dtk_1_\n","\n","    # ------------ zone rejection  ------------ #\n","    # config 로 통제할 수 없는 rejection 은 strat_version 으로 조건문을 나눔 (lvrg_set 과 동일)\n","    if config.loc_set.zone.zone_rejection:   \n","     \n","        # ------------------ biaser ------------------ #\n","        # ------------ imbalance_ratio ------------ #\n","        if config.loc_set.zone.ir != \"None\":\n","          itv = config.loc_set.point.tf_entry\n","          itv_num = to_itvnum(itv)\n","          if ep_loc_side == OrderSide.SELL:    \n","            short_ir_ = res_df['short_ir_{}'.format(itv)].to_numpy()\n","            # short_ir_ = res_df['short_ir_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","            # mr_res *= short_ir_ >= config.loc_set.zone.ir     # greater\n","            mr_res *= short_ir_ <= config.loc_set.zone.ir   # lesser\n","          else:\n","            long_ir_ = res_df['long_ir_{}'.format(itv)].to_numpy()\n","            # long_ir_ = res_df['long_ir_{}'.format(itv)].shift(itv_num).to_numpy()\n","\n","            # mr_res *= long_ir_ >= config.loc_set.zone.ir\n","            mr_res *= long_ir_ <= config.loc_set.zone.ir\n","\n","        # ------------ body_rel_ratio ------------ #\n","        if config.loc_set.zone.brr != \"None\":\n","          body_rel_ratio_ = res_df['body_rel_ratio_{}'.format(config.loc_set.point.tf_entry)].to_numpy()\n","          mr_res *= body_rel_ratio_ >= config.loc_set.zone.brr\n","\n","        # ------ cbline (dc_base) ------ #\n","        if strat_version in ['v3_5', '4_3', '3_51']:\n","          dc_base_3T = res_df['dc_base_3T'].to_numpy()\n","          # wave_base_ = res_df['wave_base_{}'.format(config.loc_set.point.tp_itv0)].to_numpy()\n","\n","          if ep_loc_side == OrderSide.SELL:\n","            short_base_ = res_df['short_base_{}'.format(strat_version)].to_numpy()\n","            mr_res *= short_base_ <= dc_base_3T\n","            # mr_res *= wave_base_ <= dc_base_3T\n","            \n","            dc_base_3T_rollmin = res_df['dc_base_3T'].rolling(config.loc_set.zone.base_roll_period).min().to_numpy()\n","            mr_res *= dc_base_3T_rollmin == dc_base_3T\n","          else:\n","            long_base_ = res_df['long_base_{}'.format(strat_version)].to_numpy()\n","            mr_res *= long_base_ >= dc_base_3T\n","            # mr_res *= wave_base_ >= dc_base_3T\n","            \n","            dc_base_3T_rollmax = res_df['dc_base_3T'].rolling(config.loc_set.zone.base_roll_period).max().to_numpy()\n","            mr_res *= dc_base_3T_rollmax == dc_base_3T\n","          \n","        \n","        # ------ dc_base ------ #        \n","        # if strat_version in ['4']:  # 'v3_3', 'v3_4', \n","        #   hc_itv = '5T'\n","        #   dc_itv = '5T'\n","        #   itv_num = to_itvnum(hc_itv)\n","        #   close_ = res_df['close_{}'.format(hc_itv)].shift(itv_num).to_numpy()   # 따라서 future_data 사용시, shifting 필요함\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     dc_lower_ = res_df['dc_lower_%s' % dc_itv].shift(itv_num).to_numpy()\n","        #     mr_res *= close_ < dc_lower_\n","        #   else:\n","        #     dc_upper_ = res_df['dc_upper_%s' % dc_itv].shift(itv_num).to_numpy()\n","        #     mr_res *= close_ > dc_upper_\n","        \n","        # ------ ema ------ #\n","        # if strat_version in ['v5_2']: # 'v3'\n","        #   ema_5T = res_df['ema_5T'].to_numpy()\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     mr_res *= close < ema_5T\n","        #   else:\n","        #     mr_res *= close > ema_5T\n","\n","        # ------------------ swing_middle ------------------ #\n","        # ------------ envelope ------------ #\n","        # ep_loc check 기준 idx 가 entry 기준이라는 걸 명심\n","        if strat_version in ['v3_2']:\n","          hc_itv = '15T'\n","          dc_itv = '15T'\n","          shift_num = [0, to_itvnum(hc_itv)]\n","          div_res = [1, 0]\n","          for itv_num, res in zip(shift_num, div_res):\n","            close_ = res_df['close_{}'.format(hc_itv)].shift(itv_num).to_numpy()  # close_bar timein 사용하는 경우, 특수로 shift(0) 사용가능\n","            if ep_loc_side == OrderSide.SELL:\n","              dc_lower_ = res_df['dc_lower_%s' % dc_itv].shift(itv_num).to_numpy()\n","              mr_res *= (close_ < dc_lower_) == res\n","            else:\n","              dc_upper_ = res_df['dc_upper_%s' % dc_itv].shift(itv_num).to_numpy()\n","              mr_res *= (close_ > dc_upper_) == res\n","              \n","        # ------ bb ------ #\n","        # close = res_df['close'].to_numpy()\n","\n","        # if strat_version in ['v3_3']:\n","        #   open = res_df['open'].to_numpy()\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     bb_lower_1m = res_df['bb_lower_1m'].to_numpy()\n","        #     # mr_res *= close <= bb_lower_1m\n","        #     mr_res *= open <= bb_lower_1m\n","        #   else:\n","        #     bb_upper_1m = res_df['bb_upper_1m'].to_numpy()\n","        #     # mr_res *= close >= bb_upper_1m\n","        #     mr_res *= open >= bb_upper_1m\n","\n","        if strat_version in ['4_1']:\n","          if ep_loc_side == OrderSide.SELL:\n","            bb_lower_15T = res_df['bb_lower_15T'].to_numpy()\n","            short_ep_ = res_df['short_ep_{}'.format(strat_version)].to_numpy()\n","            mr_res *= bb_lower_15T >= short_ep_\n","          else:\n","            bb_upper_15T = res_df['bb_upper_15T'].to_numpy()\n","            long_ep_ = res_df['long_ep_{}'.format(strat_version)].to_numpy()\n","            mr_res *= bb_upper_15T <= long_ep_\n","\n","        # if strat_version in ['v5_2']:\n","        #   bb_upper2_ = res_df['bb_upper2_%s' % config.loc_set.zone.bbz_itv].to_numpy()\n","        #   bb_lower2_ = res_df['bb_lower2_%s' % config.loc_set.zone.bbz_itv].to_numpy()\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     mr_res *= bb_upper2_ < close\n","        #   else:\n","        #     mr_res *= bb_lower2_ > close\n","\n","        # ------------ degree ------------ #        \n","        # ------ norm_body_ratio ------ #\n","        if config.loc_set.zone.abs_ratio != \"None\":\n","          itv = config.loc_set.point.tf_entry\n","          abs_ratio_ = res_df['abs_ratio_{}'.format(itv)].to_numpy()\n","          mr_res *= abs_ratio_ >= config.loc_set.zone.abs_ratio\n","          # mr_res *= abs_ratio_ <= config.loc_set.zone.abs_ratio\n","          \n","        # degree_list = literal_eval(config.loc_set.zone.degree_list)\n","        # if len(degree_list) != 0:\n","        # # if strat_version in ['v3_3', 'v3_4']:\n","        #   norm_close_15 = res_df['norm_close_15'].to_numpy()   # -> 이거 뭘로 만들었는지 불분명함,,\n","        #   b1_norm_close_15 = res_df['norm_close_15'].shift(15).to_numpy()\n","          \n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     mr_res *= norm_close_15 <= -degree_list[0]\n","        #     # mr_res *= b1_norm_close_15 <= -degree_list[1]\n","        #   else:\n","        #     mr_res *= norm_close_15 >= degree_list[0]\n","        #     # mr_res *= b1_norm_close_15 >= degree_list[1]\n","\n","        # ------ dc ------ #        \n","        # if strat_version in ['v3_3']:\n","        #   if ep_loc_side == OrderSide.SELL:\n","        #     dc_lower_ = res_df['dc_lower_1m'].to_numpy()\n","        #     b1_dc_lower_ = res_df['dc_lower_1m'].shift(1).to_numpy()\n","        #     mr_res *= dc_lower_ < b1_dc_lower_\n","        #   else:\n","        #     dc_upper_ = res_df['dc_upper_1m'].to_numpy()\n","        #     b1_dc_upper_ = res_df['dc_upper_1m'].shift(1).to_numpy()\n","        #     mr_res *= dc_upper_ > b1_dc_upper_\n","\n","        # ------ sar ------ #\n","        # if strat_version in ['v3_3']:\n","          # sar_uptrend_3T = res_df['sar_uptrend_3T'].to_numpy()\n","          # if ep_loc_side == OrderSide.SELL:\n","          #   mr_res *= sar_uptrend_3T == 0\n","          # else:\n","          #   mr_res *= sar_uptrend_3T == 1\n","         \n","    # -------------- zoned tr_set - post_work -------------- #\n","    if config.tr_set.c_ep_gap != \"None\" or config.tr_set.t_out_gap != \"None\":\n","        #       by zone_dtk       #\n","        #         c_zone        #\n","        zone_dc_upper_v2_ = res_df['zone_dc_upper_v2'.format(strat_version)].to_numpy()\n","        long_dtk_plot_1 = res_df['long_dtk_plot_1'].to_numpy() + res_df['long_dtk_plot_gap'].to_numpy() * config.loc_set.zone.zone_dt_k\n","        zone_dc_lower_v2_ = res_df['zone_dc_lower_v2'.format(strat_version)].to_numpy()\n","        short_dtk_plot_1 = res_df['short_dtk_plot_1'].to_numpy() - res_df['short_dtk_plot_gap'].to_numpy() * config.loc_set.zone.zone_dt_k\n","        if ep_loc_side == OrderSide.SELL:\n","          zone_res = zone_dc_upper_v2_ > long_dtk_plot_1  # mr_res 와는 별개임\n","          pos = 'short'\n","        else:\n","          zone_res = zone_dc_lower_v2_ < short_dtk_plot_1\n","          pos = 'long'\n","\n","        # static 여부에 따른 vectorized adj. - dynamic 은 vectorize 불가\n","        if config.ep_set.static_ep and config.tr_set.c_ep_gap != \"None\":\n","          res_df['{}_ep_{}'.format(pos, strat_version)][zone_res] = res_df['{}_ep2_{}'.format(pos, strat_version)][zone_res]\n","        if config.out_set.static_out and config.tr_set.t_out_gap != \"None\":\n","          res_df['{}_out_{}'.format(pos, strat_version)][~zone_res] = res_df['{}_out2_{}'.format(pos, strat_version)][~zone_res]  # t_zone 에 대한 out2 setting \n","        zone_arr = np.where(zone_res == 1, 'c', 't')\n","\n","    return mr_res, zone_arr  # mr_res 의 True idx 가 open signal"]},{"cell_type":"markdown","metadata":{"id":"JjKHyqftzhD7","tags":[]},"source":["### set config (override available)"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"q_4E-zH02WJy","executionInfo":{"status":"ok","timestamp":1648972535236,"user_tz":-540,"elapsed":11,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[],"source":["#     caution : MARKET / LIMIT spelling   #\n","#      json doesn't support single quotes     #\n","\n","param_dict = \\\n","{\n","  \"strat_version\": \"3_51\",\n","  \"trader_set\": {\n","    \"run\": 1,\n","    \"df_log\": 0,\n","    \"open_index\": -1,\n","    \"complete_index\": -2,\n","    \"limit_fee\": 0.0002,\n","    \"market_fee\": 0.0004,\n","    \"initial_asset\": 3500,\n","    \"asset_changed\": 0,\n","    \"symbol\": \"ETHUSDT\",\n","    \"symbol_changed\": 0,\n","    \"itv_list\": \"['T', '5T', '15T', '30T', '4H']\",\n","    \"row_list\": \"[200, 160, 30, 25, 25]\",\n","    \"rec_row_list\": \"[250, 1100, 1, 1, 1]\",\n","    \"offset_list\": \"['1h', '1h', '1h', '1h', '1h']\",\n","    \"bar_close_second\": 59,\n","    \"realtime_term\": 0.01,\n","    \"api_retry_term\": 3,\n","    \"check_entry_sec\": 10,\n","    \"entry_execution_wait\": 60,\n","    \"breakout_qty_ratio\": 0.97,\n","    \"qty_check_term\": 30,\n","    \"exit_execution_wait\": 60,\n","    \"close_complete_term\": 5,\n","    \"save_stacked_df\": 0,\n","    \"stacked_df_exist\": 1\n","  },\n","  \"pos_set\": {\n","    \"short_inversion\": 0,\n","    \"long_inversion\": 0,\n","    \"short_ban\": 1,\n","    \"long_ban\": 0\n","  },\n","  \"loc_set\": {\n","    \"zone\": {\n","      \"short_spread\": \"None\",\n","      \"long_spread\": \"None\",\n","      \"short_tr_thresh\": \"None\",\n","      \"long_tr_thresh\": \"None\",\n","      \"ei_k\": 0.36,\n","      \"ep_out_tick\": \"None\",\n","      \"zone_rejection\": 1,\n","      \"brr\": \"None\",\n","      \"ir\": \"None\",\n","      \"abs_ratio\": \"None\",\n","      \"base_roll_period\": 50,\n","      \"degree_list\": \"[]\",\n","      \"hc_itv\": 60,  \n","      \"dtk_itv\": \"5T\",\n","      \"dt_k\": \"None\",\n","      \"dc_period\": 135,\n","      \"use_dtk_line\": 0,\n","      \"zone_dt_k\": 0.4,\n","      \"zone_dc_period\": 135\n","    },\n","    \"point\": {\n","      \"exp_itv\": \"5T\",\n","      \"tp_itv1\": \"T\",\n","      \"tp_itv0\": \"T\",\n","      \"epout_itv1\": \"T\",\n","      \"epout_itv0\": \"T\",\n","      \"tf_entry\": \"T\",\n","      \"base_gap\": 0.1,\n","      \"wick_score_list\": \"[]\",\n","      \"body_score_list\": \"[]\",\n","      \"score_itv_list\": \"[]\",      \n","      \"osc_band\": 20\n","    }\n","  },\n","  \"tr_set\": {\n","    \"tp_gap\": 0,\n","    \"decay_gap\": \"None\",\n","    \"ep_gap\": 0,\n","    \"out_gap\": 0,\n","    \"c_ep_gap\": \"None\",\n","    \"t_out_gap\": \"None\",\n","    \"bias_gap\": 0,\n","    \"bias_info_tick\": 500\n","  }, \n","  \"ep_set\": {\n","    \"entry_type\": \"LIMIT\",\n","    \"static_ep\": 1,\n","    \"point2\": {\n","      \"use_point2\": 0,\n","      \"entry_type\": \"MARKET\",\n","      \"wick_score_list\": \"[]\",\n","      \"body_score_list\": \"[]\",\n","      \"score_itv_list\": \"['T']\"\n","    }\n","  },\n","  \"tp_set\": {\n","    \"non_tp\": 0,\n","    \"static_tp\": 1,\n","    \"tp_onexec\": 0,\n","    \"decay_term\": 60,\n","    \"p_ranges\": \"[1]\",\n","    \"p_qty\": \"[1]\"\n","  },\n","  \"out_set\": {\n","    \"hl_out\": 1,\n","    \"static_out\": 1,\n","    \"out_onexec\": 0,\n","    \"tf_exit\": \"None\",\n","    \"rsi_exit\": 0\n","  },\n","  \"lvrg_set\": {\n","    \"leverage\": 2,\n","    \"static_lvrg\": 0,\n","    \"allow_float\": 1,\n","    \"target_pct\": 0.01,\n","    \"lvrg_rejection\": 0\n","  }\n","}\n","\n","config = EasyDict(param_dict)\n","# param_json = json.dumps(param_dict, indent=2)"]},{"cell_type":"markdown","metadata":{"id":"dzla8i9_ysmP","jp-MarkdownHeadingCollapsed":true,"tags":[]},"source":["#### save config"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FlNGKvW_w2za"},"outputs":[],"source":["config_name = \"config_v5_2.1220_candlejson\"\n","# config_name = \"config_v3.json\"\n","cfg_full_path = os.path.join(current_path, \"config\", config_name)\n","\n","\n","with open(cfg_full_path, 'w') as cfg:\n","    json.dump(config1, cfg, indent=2)\n","    print(\"{} dumped !\".format(cfg_full_path))"]},{"cell_type":"markdown","metadata":{"id":"rLI8unIyroiC","tags":[]},"source":["## run"]},{"cell_type":"code","source":["funcs = [ep_out, ep_loc_point2, lvrg_set]\n","\n","id_idx_list = [0]  # ID_arr 에서 import 할 id_idx 선택\n","public_override = 1\n","utils_override = 1\n","config_override = 1\n","\n","# ------ config_list 와 같은 org_var 에 override 하는거 다시 생각하기 ------ #\n","ID_list = ID_arr[id_idx_list]\n","utils_list = utils_arr[id_idx_list]\n","config_list = config_arr[id_idx_list]\n","\n","if config_override or utils_override:\n","  assert len(config_list) == 1\n","  if config_override:\n","    config_list[0] = config\n","    ID_list[0] = config.strat_version\n","  \n","config = config_list[0]  # base config = config_list[0]\n","tp_fee, out_fee = calc_tp_out_fee_v2(config)   # -> rev_pr 때문에 일단 이곳에도 선언함\n","\n","# ------- inversion set ------- #\n","inversion = 0\n","fdist_thresh = 1\n","# ------- plot param ------- #\n","show_detail = 0\n","# ------- temp param ------- #\n","allow_osc_touch = 0\n","rsi_gap = 5\n","early_out_tpg = 0.36\n","\n","# ------- just printing config ------- #\n","# ['strat_version', 'pos_set', 'loc_set', 'tr_set', 'ep_set', 'tp_set', 'out_set', 'lvrg_set']\n","_ = [print(json.dumps(config[key_], indent=1), end=' ') for key_ in ['strat_version', 'loc_set', 'tr_set', 'ep_set', 'tp_set', 'out_set', 'lvrg_set']]"],"metadata":{"id":"qBJfPsmJzVIr","executionInfo":{"status":"ok","timestamp":1648972535236,"user_tz":-540,"elapsed":10,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"300bc04e-d4ec-405e-9eb9-4dd294e031a1"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["\"3_51\" {\n"," \"zone\": {\n","  \"short_spread\": \"None\",\n","  \"long_spread\": \"None\",\n","  \"short_tr_thresh\": \"None\",\n","  \"long_tr_thresh\": \"None\",\n","  \"ei_k\": 0.36,\n","  \"ep_out_tick\": \"None\",\n","  \"zone_rejection\": 1,\n","  \"brr\": \"None\",\n","  \"ir\": \"None\",\n","  \"abs_ratio\": \"None\",\n","  \"base_roll_period\": 50,\n","  \"degree_list\": \"[]\",\n","  \"hc_itv\": 60,\n","  \"dtk_itv\": \"5T\",\n","  \"dt_k\": \"None\",\n","  \"dc_period\": 135,\n","  \"use_dtk_line\": 0,\n","  \"zone_dt_k\": 0.4,\n","  \"zone_dc_period\": 135\n"," },\n"," \"point\": {\n","  \"exp_itv\": \"5T\",\n","  \"tp_itv1\": \"T\",\n","  \"tp_itv0\": \"T\",\n","  \"epout_itv1\": \"T\",\n","  \"epout_itv0\": \"T\",\n","  \"tf_entry\": \"T\",\n","  \"base_gap\": 0.1,\n","  \"wick_score_list\": \"[]\",\n","  \"body_score_list\": \"[]\",\n","  \"score_itv_list\": \"[]\",\n","  \"osc_band\": 20\n"," }\n","} {\n"," \"tp_gap\": 0,\n"," \"decay_gap\": \"None\",\n"," \"ep_gap\": 0,\n"," \"out_gap\": 0,\n"," \"c_ep_gap\": \"None\",\n"," \"t_out_gap\": \"None\",\n"," \"bias_gap\": 0,\n"," \"bias_info_tick\": 500\n","} {\n"," \"entry_type\": \"LIMIT\",\n"," \"static_ep\": 1,\n"," \"point2\": {\n","  \"use_point2\": 0,\n","  \"entry_type\": \"MARKET\",\n","  \"wick_score_list\": \"[]\",\n","  \"body_score_list\": \"[]\",\n","  \"score_itv_list\": \"['T']\"\n"," }\n","} {\n"," \"non_tp\": 0,\n"," \"static_tp\": 1,\n"," \"tp_onexec\": 0,\n"," \"decay_term\": 60,\n"," \"p_ranges\": \"[1]\",\n"," \"p_qty\": \"[1]\"\n","} {\n"," \"hl_out\": 1,\n"," \"static_out\": 1,\n"," \"out_onexec\": 0,\n"," \"tf_exit\": \"None\",\n"," \"rsi_exit\": 0\n","} {\n"," \"leverage\": 2,\n"," \"static_lvrg\": 0,\n"," \"allow_float\": 1,\n"," \"target_pct\": 0.01,\n"," \"lvrg_rejection\": 0\n","} "]}]},{"cell_type":"code","source":["# ------ slicing res_df ------ #\n","res_df = res_df_.loc[pd.to_datetime(\"2020-09-05 00:00:59.999\"):] # pd.to_datetime(\"2022-01-10 00:00:59.999\"), pd.to_datetime(\"2021-10-04 02:39:59.999000\")\n","\n","np_timeidx = np.array([intmin_np(date_) for date_ in res_df.index.to_numpy()])\n","\n","# ------------ public_indi ------------ # - 딱히 반복될 이유가 없는 phase - annot. 달때, why 까지 적어주면 좋음\n","start_0 = time.time()\n","if public_override:\n","    res_df = public_indi(res_df, config, np_timeidx)  # 현재 대부분의 시간은 h_candle 에서 소비되고 있음\n","else:\n","    res_df = utils_public.public_indi(res_df, config, np_timeidx)\n","print(\"public_indi elapsed time :\", time.time() - start_0)\n","\n","# ------------ make data_list ------------ # - 반복될 이유가 없는 phase - public_indo 에 종속\n","start_0 = time.time()\n","ohlc_cols = ['open', 'high', 'low', 'close']\n","ohlc_list = [res_df[col_].to_numpy() for col_ in ohlc_cols]\n","point2_cols = ['dc_upper_T', 'dc_upper_15T', 'dc_lower_T', 'dc_lower_15T', 'close', 'resi_T', 'sup_T'] #+ ['wick_score_{}'.format(s_itv) for s_itv in literal_eval(config.ep_set.point2.score_itv_list)]\n","point2_list = [res_df[col_].to_numpy() for col_ in point2_cols]\n","market_data_cols = ['close', 'bb_lower_5T', 'bb_upper_5T', 'rsi_T', 'haopen', 'hahigh', 'halow', 'haclose']   # Todo - public_indi 이전에 해야할지도 모름\n","market_data_list = [res_df[col_].to_numpy() for col_ in market_data_cols]\n","print(\"make data_list elapsed time :\", time.time() - start_0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WstWVNihCNH8","executionInfo":{"status":"ok","timestamp":1648974195334,"user_tz":-540,"elapsed":3393,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"ddef9e4b-4b4d-4c29-a428-5b8d8698ffd9"},"execution_count":58,"outputs":[{"output_type":"stream","name":"stdout","text":["public_indi elapsed time : 2.082817554473877\n","make data_list elapsed time : 0.0009593963623046875\n"]}]},{"cell_type":"markdown","source":["### idep_plot"],"metadata":{"id":"RqRF1eyZ0xBL"}},{"cell_type":"code","source":["# ------ edit utils config ------ #\n","# config_list[0].loc_set.point.base_gap = -0.0\n","config_list[0].tr_set.tp_gap = 0.5\n","# config_list[0].tr_set.ep_gap = 0.0\n","config_list[0].tr_set.out_gap = 0\n","# config_list[0].tr_set.bias_gap = 1.5\n","config_list[0].tr_set.bias_info_tick = 240\n","# #  rs_channel_v2(res_df_, period=6, itv='T', type='OUT')"],"metadata":{"id":"_iYcJk8nK8Yq","executionInfo":{"status":"ok","timestamp":1648974686216,"user_tz":-540,"elapsed":513,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"execution_count":77,"outputs":[]},{"cell_type":"code","source":["if utils_override:   # 현재, utils_override 하는 경우 1개의 ID 만 허용함 \n","  start_0 = time.time()\n","  res_df = enlist_rtc(res_df, config, np_timeidx)\n","  print(\"enlist_rtc elapsed time :\", time.time() - start_0)\n","  start_0 = time.time()\n","  res_df = enlist_tr(res_df, config, np_timeidx)    # 36995.0 -> 152766.0\n","  print(\"enlist_tr elapsed time :\", time.time() - start_0)\n","else:\n","    start_0 = time.time()\n","    for utils_, config_ in zip(utils_list, config_list):\n","        res_df = utils_.enlist_rtc(res_df, config_, np_timeidx)\n","        res_df = utils_.enlist_tr(res_df, config_, np_timeidx)\n","    print(\"elapsed time :\", time.time() - start_0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iI39YI_5GguK","executionInfo":{"status":"ok","timestamp":1648974686802,"user_tz":-540,"elapsed":2,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"146f7254-f076-487f-a936-5a7ce4135fe7"},"execution_count":78,"outputs":[{"output_type":"stream","name":"stdout","text":["enlist_rtc elapsed time : 0.036957740783691406\n","enlist_tr elapsed time : 0.17849493026733398\n"]}]},{"cell_type":"code","source":["# ------ edit loc_set config ------ #\n","config_list[0].loc_set.zone.brr = 20 # \"None\" 0.8\n","config_list[0].loc_set.zone.ir = \"None\" # \"None\" 0.8\n","# # config_list[0].loc_set.zone.abs_ratio = \"None\"  # 0.7\n","config_list[0].loc_set.zone.short_tr_thresh = 0.5 # 0.55 # 0.8 # # 0.7 # tr_thresh 엄청 민감함\n","config_list[0].loc_set.zone.long_tr_thresh = 0.5 # 0.53 # 0.8 ## 0.7\n","# # config_list[0].loc_set.zone.base_roll_period = 60"],"metadata":{"id":"gfDSOGMd91rE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["open_info_df = get_open_info_df(ep_loc_v2, res_df, np_timeidx, ID_list, config_list, id_idx_list)  # --> point * dur. 관련 (loc_set) param 에 종속 (open_info 가 변경되는게 아니라면, 재실행할 필요없음)"],"metadata":{"id":"9DPgykxQ92mU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648974688956,"user_tz":-540,"elapsed":1091,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"35268f49-e98c-41bb-edf7-3a15bfc7bf8f"},"execution_count":79,"outputs":[{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9967663288116455\n"]}]},{"cell_type":"code","source":["# ------ edit entry & exit (ep, tp, out, ..) config ------ #\n","config_list[0].loc_set.zone.ei_k = -0.5\n","# config_list[0].loc_set.zone.ep_out_tick = 10\n","# # config_list[0].ep_set.point2.use_point2 = 1\n","# # config_list[0].ep_set.point2.entry_type = \"LIMIT\"\n","# # config_list[0].ep_set.point2.wick_score_list = str([])\n","# # config_list[0].tp_set.static_tp = 1\n","# # config_list[0].tp_set.non_tp = 0 # 0 1\n","# config_list[0].tp_set.p_ranges = \"[1]\"\n","# config_list[0].tp_set.p_qty = \"[1]\"\n","# # config_list[0].tp_set.p_ranges = \"[0.33, 0.66, 1]\"\n","# # config_list[0].tp_set.p_qty = \"[0.25, 0.25, 0.5]\"\n","# # config_list[0].tp_set.p_ranges = \"[0.2, 1]\"\n","# # config_list[0].tp_set.p_qty = \"[0.2, 0.8]\"\n","# # config_list[0].out_set.hl_out = 1\n","# # config_list[0].out_set.tf_exit = \"None\" # 15 \"None\"\n","config_list[0].lvrg_set.leverage = 3\n","config_list[0].lvrg_set.static_lvrg = 1\n","# config_list[0].lvrg_set.target_pct = 0.01\n","# config_list[0].lvrg_set.allow_float = 0\n","# config_list[0].lvrg_set.lvrg_rejection = 1"],"metadata":{"id":"KqVkg236t_f2","executionInfo":{"status":"ok","timestamp":1648972617555,"user_tz":-540,"elapsed":465,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"execution_count":20,"outputs":[]},{"cell_type":"code","source":["test_ratio = 0.0\n","short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_bias_arr, long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_bias_arr = \\\n","get_res(res_df, open_info_df, ohlc_list, point2_list, market_data_list, config_list, np_timeidx, funcs, test_ratio=test_ratio, plot_is=1, signi=False)   # open 이 많을 수록 en_ex_pairing elapsed time : 11.58370590209961"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":625},"id":"HHq6cr9GPBot","outputId":"4b76d241-fdd5-475c-fe22-025a4fd3b3e7","executionInfo":{"status":"ok","timestamp":1648974694308,"user_tz":-540,"elapsed":5354,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"execution_count":80,"outputs":[{"output_type":"stream","name":"stdout","text":["en_ex_pairing elapsed time : 1.549393653869629\n","short_obj.shape : (4122, 5)\n","long_obj.shape : (3634, 5)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1728x576 with 6 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["idep_plot_v8 elapsed time : 2.837242364883423\n"]}]},{"cell_type":"markdown","source":["### statistics (stem 별로 진행)"],"metadata":{"id":"n6gc7lERC4VE"}},{"cell_type":"code","source":["strat_version = config.strat_version\n","\n","short_open_i = short_obj[-1].astype(int)\n","long_open_i = long_obj[-1].astype(int)\n","\n","short_open_tp_1 = res_df['short_tp_1_{}'.format(strat_version)].to_numpy()[short_open_i]\n","long_open_tp_1 = res_df['long_tp_1_{}'.format(strat_version)].to_numpy()[long_open_i]\n","\n","short_open_tp_gap = res_df['short_tp_gap_{}'.format(strat_version)].to_numpy()[short_open_i]  # use open_i\n","long_open_tp_gap = res_df['long_tp_gap_{}'.format(strat_version)].to_numpy()[long_open_i]\n","\n","short_open_epout_0 = res_df['short_epout_0_{}'.format(strat_version)].to_numpy()[short_open_i]\n","long_open_epout_0 = res_df['long_epout_0_{}'.format(strat_version)].to_numpy()[long_open_i]\n","\n","short_open_epout_gap = res_df['short_epout_gap_{}'.format(strat_version)].to_numpy()[short_open_i]  # use open_i\n","long_open_epout_gap = res_df['long_epout_gap_{}'.format(strat_version)].to_numpy()[long_open_i]\n","\n","# ------ pairing 된 en, ex_idx 기준으로 survey 진행 ------ #\n","# 0. high, low (exit_done 까지의) -> partial (tpg) 과 outg survey 목표\n","#   a. short -> tpg - low, outg - high\n","#   b. long -> tpg - high, outg - low\n","short_max_tpg = get_max_tpg_v2(\"SELL\", ohlc_list, short_pr, short_obj[:4], short_open_tp_1, short_open_tp_gap)\n","long_max_tpg = get_max_tpg_v2(\"BUY\", ohlc_list, long_pr, long_obj[:4], long_open_tp_1, long_open_tp_gap)\n","\n","# ------ 0. tp 까지 도달하는 최소 idx 도출, en_idx 부터 ------ #\n","#   a. bias_info_tick 의 limit 을 정해주지 않으면 굉장히 길어질 수 있다고 봄\n","# short_max_outg, short_outg_open_idx = get_max_outg_v2(\"SELL\", config, ohlc_list, short_obj, short_tpout_arr, short_open_epout_0, short_open_epout_gap)\n","# long_max_outg, long_outg_open_idx = get_max_outg_v2(\"BUY\", config, ohlc_list, long_obj, long_tpout_arr, long_open_epout_0, long_open_epout_gap)\n","short_max_outg, short_open_idx, short_true_open_idxth = get_max_outg_v3(\"SELL\", config, ohlc_list, short_obj, short_tpout_arr, short_open_epout_0, short_open_epout_gap)\n","long_max_outg, long_open_idx, long_true_open_idxth = get_max_outg_v3(\"BUY\", config, ohlc_list, long_obj, long_tpout_arr, long_open_epout_0, long_open_epout_gap)\n","\n","current_tpg= config.tr_set.tp_gap\n","current_outg = config.tr_set.out_gap"],"metadata":{"id":"HHjIdn2MC4VE"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### tpg survey for partial"],"metadata":{"id":"Arnb-kXlC4VF"}},{"cell_type":"code","source":["# 1. outg 는 partial 을 위한 histogram 작성 진행\n","# 현재, outg 내부에는 tp 한것과 out 한것이 공존하는 상태\n","titles = ['outg', 'tpg']\n","short_max_datas = [short_max_outg[short_true_open_idxth], short_max_tpg]\n","long_max_datas = [long_max_outg[long_true_open_idxth], long_max_tpg]\n","\n","# titles = ['tpg']\n","# short_max_datas = [short_max_tpg]\n","# long_max_datas = [long_max_tpg]\n","\n","plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(12, 8))\n","nrows, ncols = 2, 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        )\n","  \n","for ings_idx, (title, short_max_data, long_max_data) in enumerate(zip(titles, short_max_datas, long_max_datas)):\n","\n","  inner_gs = gs[ings_idx].subgridspec(nrows=1, ncols=2)\n","  if ings_idx == 0:\n","    axvline = current_outg\n","    title_add = 'true_' + title\n","  else:\n","    axvline = current_tpg\n","    title_add = 'false_' + title\n","\n","  print(len(long_max_data))\n","\n","  short_plot_idx = short_max_data <= axvline\n","  long_plot_idx = long_max_data <= axvline\n","\n","  print(np.sum(long_plot_idx))    \n","\n","  short_plot_idx *= ~np.isnan(short_max_data)\n","  long_plot_idx *= ~np.isnan(long_max_data)  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_plot_idx *= ~np.isinf(short_max_data)\n","  long_plot_idx *= ~np.isinf(long_max_data)  # nan 과 inf 때문에 이 방식 채택\n","  \n","  print(np.sum(long_plot_idx))\n","    \n","  plt.subplot(inner_gs[0])\n","  kde_plot_v2(*np.unique(short_max_data[short_plot_idx], return_counts=True))\n","  plt.title('short_' + title_add)  \n","  plt.axvline(axvline, color='red', linewidth=3)\n","\n","  plt.subplot(inner_gs[1])\n","  kde_plot_v2(*np.unique(long_max_data[long_plot_idx], return_counts=True))\n","  plt.title('long_' + title_add)\n","  plt.axvline(axvline, color='red', linewidth=3)\n","\n","  print()\n","\n","# plt.suptitle(title)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":742},"executionInfo":{"status":"ok","timestamp":1648961853469,"user_tz":-540,"elapsed":1722,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"80de461f-b275-4691-dff6-29d69e04a9be","id":"jHh0uFkXC4VF"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["298\n","291\n","291\n","291\n","pkx : [-0.36262876  0.30104668  0.7674132   1.01853363]\n","pkx : [-0.3203643   0.42597657  0.82785242  1.05749577  1.24886522]\n","\n","172\n","172\n","172\n","172\n","pkx : [-0.41165768 -0.05867849  0.22598215  0.40816496]\n","pkx : [-0.32345182 -0.00697044  0.19874245  0.37280721]\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 864x576 with 4 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["#### outg survey for precision (eploc vars. dependency)"],"metadata":{"id":"xivLUsSGC4VF"}},{"cell_type":"code","source":["# ------------ dependent vars. ------------ #\n","# res_df 에 존재하는 col 는 모두 사용가능함\n","# ------ 1. 도출한 outg 와 vars. pairing 진행 (by valid_idx) ------ #\n","devided_cols = ['tr_{}'.format(strat_version), 'ir_5T']  # tr has the priority\n","public_cols = ['abs_ratio_5T', 'rel_ratio_5T', 'body_rel_ratio_5T']\n","\n","short_datas = [res_df['short_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","long_datas = [res_df['long_' + col].to_numpy() for col in devided_cols] + [res_df[col].to_numpy() for col in public_cols]\n","\n","titles = devided_cols + public_cols"],"metadata":{"id":"gnSvYKIzC4VF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plot_outg_range = (0, 10)\n","plot_data_range = (-10, 100)\n","\n","plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(12, 18))\n","nrows, ncols = len(short_datas), 1\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        )\n","\n","for ings_idx, (title, short_data, long_data) in enumerate(zip(titles, short_datas, long_datas)):\n","  inner_gs = gs[ings_idx].subgridspec(nrows=1, ncols=2)\n","\n","  print(len(long_max_outg))\n","\n","  short_plot_idx = (plot_outg_range[0] <= short_max_outg) & (short_max_outg <= plot_outg_range[1])\n","  long_plot_idx = (plot_outg_range[0] <= long_max_outg) & (long_max_outg <= plot_outg_range[1])  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_open_data = short_data[short_open_idx]\n","  long_open_data = long_data[long_open_idx]\n","  \n","  short_plot_idx *= (plot_data_range[0] <= short_open_data) * (short_open_data <= plot_data_range[1])\n","  long_plot_idx *= (plot_data_range[0] <= long_open_data) * (long_open_data <= plot_data_range[1]) # nan 과 inf 때문에 이 방식 채택\n","\n","  short_plot_idx *= ~np.isnan(short_open_data)\n","  long_plot_idx *= ~np.isnan(long_open_data)  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_plot_idx *= ~np.isinf(short_open_data)\n","  long_plot_idx *= ~np.isinf(long_open_data)  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_true_idx = short_plot_idx * short_true_open_idxth\n","  long_true_idx = long_plot_idx * long_true_open_idxth\n","  \n","  short_false_idx = short_plot_idx * ~short_true_open_idxth\n","  long_false_idx = long_plot_idx * ~long_true_open_idxth\n","\n","  plt.subplot(inner_gs[0])\n","  # ------ true_bias ------ #\n","  x, y = short_max_outg[short_true_idx].ravel(), short_open_data[short_true_idx].ravel()  \n","  plt.scatter(x, y, color='white', alpha=0.5)\n","  # ------ false_bias ------ #\n","  x, y = short_max_outg[short_false_idx].ravel(), short_open_data[short_false_idx].ravel()\n","  plt.scatter(x, y, color='fuchsia', alpha=0.3)\n","  plt.axvline(current_outg, color='red', linewidth=3)\n","  plt.title(\"{} coef : {:0.3f}\".format(title, np.corrcoef(-x, y)[0, 1]))\n","\n","  plt.subplot(inner_gs[1])    \n","  # ------ true_bias ------ #\n","  x, y = long_max_outg[long_true_idx].ravel(), long_open_data[long_true_idx].ravel()  \n","  plt.scatter(x, y, color='white', alpha=0.5)\n","  # ------ false_bias ------ #\n","  x, y = long_max_outg[long_false_idx].ravel(), long_open_data[long_false_idx].ravel()\n","  plt.scatter(x, y, color='fuchsia', alpha=0.3)\n","  plt.axvline(current_outg, color='red', linewidth=3)\n","  plt.title(\"{} coef : {:0.3f}\".format(title, np.corrcoef(-x, y)[0, 1]))\n","\n","  print()  \n","\n","# plt.suptitle(title)\n","plt.show()\n","# print()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1648961872693,"user_tz":-540,"elapsed":2186,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"eb024221-1803-426e-d555-4d6f38973727","id":"nX9TpLcvFu7T"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["587\n","371\n","371\n","371\n","\n","587\n","371\n","47\n","47\n","\n","587\n","371\n","371\n","371\n","\n","587\n","371\n","371\n","371\n","\n","587\n","371\n","368\n","368\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 864x1296 with 10 Axes>"],"image/png":"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7NfZHmcRERERCQ4+TZIfffRRduzYwbZt21i7di3Dhg3z5eHOWimlrGIV9dSTQAL11Lc6aK+zPc4iIiIiEhx8miT/4Q9/YPz48UycOJG3336bxYsX+/JwXeJKlHPIaXNWi872OIuIiIhIcPBpklxX93WJQkREBMYYXx7OZzrb4ywiIiIiwcHnU8A99thj3HrrrTidTi6//PJW98nOzuaHP/whAHFxcb5uUpe4EmURERERCX7d7klet24du3btarFde+21ADzwwAMMHz6cV199lYULF7b6HDk5OWRkZJCRkUFlZWV3myQiIiIi0i3d7km+8sorO7Xfq6++ypo1a3j44Ye7e0gREREREZ/yaU3y6NGj3f/OzMxk7969vjyciIiIiIhX+LQm+Xe/+x3nnXcep0+fprCwkB/96Ee+PJyIiIiIiFf4NEmeO3euL59eRES8aPz48fzpT39i4MCBnDx5krvuugu7XVNdikjf1KdX3BMRka/9/ve/55FHHmHixIksXryY3//+9/5ukoiI3yhJFhERAIwxREVFAWCxWCgt1VzwItJ3+XyeZBERCQx33303a9euZcmSJYSGhnLppZe2uW8gzG8vItIdSpJFRPqQdevWkZCQ0OL++++/n1mzZvGzn/2M3Nxcrr/+epYvX97mNJ85OTnk5OQAqG5ZRIKSkmQRkT6kvbntX3rpJX76058C8Pe//53nnnuup5olItLrqCZZREQAKC0t5bLLLgPgiiuuID8/388tEhHxH/Uki4gIcKbO+KmnniIsLIzjx4+7a45FRPoiJckiIgLAJ598wsUXX+zvZoiI9AoqtxARERERaUZJsoiIiIhIM0qSRURERESaUZIsIiIiItKMBu41kUgiGWQQTzzllGPHTilallVERESkr1FP8lcSSSSTTCKIoIwyIoggk0wSSfR300RERESkhylJ/koGGThxUkstBkMttThxkkGGv5smIiIiIj1MSfJX4omnjjqP++qoI554P7VIRERERPxFSfJXyiknkkiP+yKJpJxyP7VIRERERPxFSfJX7NixYCGKKEIIIYooLFiwY/d300RERESkhylJ/koppaxiFfXUk0AC9dSzilWa3UJERESkD9IUcE24EmURERER6duUJIuIiLRCc+eL9G09Um7x85//HGMMsbGxPXE4ERGRbtHc+SLi857k5ORkrrrqKgoL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T/nb3/7W5v6vvfYa27ZtIzY2lvvvv59//OMfxMXFARAeHs66dev44IMPSEhIIDk5mVdeecX9s88++yzl5eUMGzaMCRMmcNlll3HXXXd55TxExL8Us1vn75hdUFDAL37xC955550Wj02ePJnf/e53zJ07F4vFwvLly3njjTfcPfs//elPmTp1KuPGjSMxMRGHw8EzzzzjlfOQM/w+X562rm/33XefKSgoMLW1teazzz4z1113nfux+fPnm40bN5pnnnnG1NTUmD179pgrrrjC4/HPP//c1NbWmgMHDpibbrqp3WO5nu9//ud/TGVlpfnNb35jRo0aZf71r3+ZyspKU1FRYV555RX3AhovvfSSOXXqlDl27Jipq6sz9957r7HZbMYYY/r162cAM2zYMLNq1SpTVVVl8vPzzQ9+8IMOz3n+/Pnm448/7nA/Y4w599xz293HarWa559/3pSUlJjq6mrzxhtvuB/7wQ9+YPLz801VVZVZtWqVGTZsmPux8847z7z//vumqqrK7N2711x//fUGMA8//LA5ceKEaWhoMHV1dV6Z1zo7O9t88skn7tuDBw82x44da3X+1dTUVHP8+HH3IhiA+eijj9zzTmZnZ5uPPvqozWPt3r3bY67q3//+9+ZPf/qT33/PtWkLlk0xu+2tL8bsptvLL79sHnroIY/7brjhBo+FQQYPHmyMMe5Fa5599lnzxBNPuB+/5pprzN69e/3+ex5Em98boK0b29y5c82wYcNMSEiIueGGG8zRo0fdfzzz5883jY2N5u677zZhYWHmhhtuMDU1NcZqtZrBgwcbp9Np0tLSDJxZJaqj1Qpdz7dw4ULTr18/M3DgQHPuueeab37zm6Z///4mLi7OfPjhhx4r6Bw8eNDMmjXLfbt5wP3www/N0qVLzYABA8z48eNNeXm5ufzyyztsx9GjR01FRYXZt2+feeCBB9zP13TrTMB9++23zYoVK0x0dLQJCwsz3/jGNwxgLr/8clNRUWEmTpxo+vfvb55++mnz4YcfGjgTpA4dOmRuu+02069fPzNhwgRTUVFhxowZYwDz0EMPmZdffrnNY06bNs04HI5Ov8f/+7//a5599lmP+3bt2mWysrJa7HvdddeZ3bt3e9z3zDPPmKefftoAZvny5eall14ya9asMRUVFWb9+vUmPT3dve8Pf/hD8+KLL5pBgwaZxMREs2vXLo+LuDZt2rq3KWYrZre1tZYkR0ZGmk8//dRMnjzZhIaGmoULF5qtW7e6H580aZLZuHGjGTZsmBk0aJB59dVXg3YVWz9tfm+ANi9u27ZtM9dee62BM4GppKTE4/EtW7aYW265xQwePNg4HA6TlZVlBg4c2Knnnj9/fofLQmZmZnr8AbcXcJOTk83Jkyc9ej0ff/xx85e//KXdY4wcOdKMGDHChISEmPT0dPPZZ5+ZX/7yly326yjgJiQkmFOnTpno6OgWjz333HMen84jIiJMQ0ODsdls5oYbbmjRG/unP/3JLF682EDHAfdst+eee8789re/9bhv48aNZv78+S32veWWW1osg/vYY4+5X9O1a9eahoYGc/XVV5vw8HCzaNEi8/nnn5vw8HADmPPPP998+umnprGx0RhjOnwvtGnT1r1NMfvrrS/G7KZba0kyYH71q1+ZhoYG09jYaCoqKszFF1/sfiwqKsq89tprxhhjGhsbzdatW43VavX773WwbKpJDnDf+9732LZtGw6HA4fDQXp6urv+FKCkpMRj/8LCQhITEzl27Bjf/e53+dGPfsThw4d5++23Oe+88zo8XlFRkcft+Ph4XnvtNYqLi3E6nbzyyisex29PYmIi1dXVHD161KN9SUlJ7f7cwYMH+eKLLzDGkJeXx6OPPsrcuXM7dcymUlJSqK6upqamptW2FRYWum/X19dTVVVFUlISNpuNKVOmuF9zh8PBzTffTEJCwlm3obU2NR3IAnD06FGioqI89ouKinI/3lRH+3755Zds3LiR9957j8bGRpYsWUJsbCxjxowhJCSE9957j9zcXCIiIoiNjcVqtXoM7BOR7lHMVsw+GwsWLOD222/nggsuoH///txyyy28/fbbDBs2DIClS5cyYMAAYmJiiIiIIDc3l3fffbfb5yVnKEkOYMOHDycnJ4eFCxe6E5q8vDxCQkLc+zQPXsOHD6e0tBSA999/n6uuuophw4axd+9ecnJyOjymMcbj9uOPP44xhgsvvBCLxcItt9zicfzm+zdVWlpKTEwMQ4YM8Whf84tEZ9rU9JidVVRURExMDBaLpdW22Ww29+3BgwcTGxtLSUkJRUVFfPjhh1itVvcWGRnplQFurQ1k+eyzzxg/frxHW84991w+++yzFj//2WefMWrUKI/XdPz48e59d+7c2eZ7EhMTg81m449//CMNDQ1UV1fzl7/8hWuuuabb5yUiitlNj6GY3TkTJkzg7bffJj8/H2MMa9eu5fDhw1x66aXux1944QUcDgcNDQ0888wzTJkyhdjY2G6fmyhJDmgREREYY6ioqADgtttuIz093WOf+Ph4fvKTnxAWFsbcuXMZM2YMa9asIT4+nmuvvZbBgwdz4sQJjh492qUpfiIjIzl69ChOp5PExETuvfdej8ePHDnCqFGjWv3Z4uJi/v3vf/Pb3/6WAQMGcOGFF7JgwQKP2RZac/XVVxMfHw/Aeeedx4MPPsiqVavOuu1lZWW8++67PPvss0RHRxMWFsaMGTOAMzNE3H777YwfP57+/fvz+OOPs2XLFgoLC3n77bdJS0vjlltuISwsjLCwMC6++GLOP//8s25DZ7zxxhukp6eTlZXFgAEDWLx4MTt37mTfvn0t9s3Pz2f79u089NBDDBgwgOuuu45x48bx+uuvA/DKK69wySWXMGvWLEJDQ7n77ruprKxkz549VFVVceDAAe6880769euHxWJh/vz57Ny50yfnJdLXKGYrZrcmLCyMAQMGEBoa6vFvALvdzre+9S1GjhwJwDe/+U3S0tLIy8tzP37rrbcSFRVFWFgYd911FyUlJVRVVfnk3Poiv9d8aOv69thjj5mqqipTUVFh/u///b9mw4YNZsGCBQZajpTet2+fufLKKw2cqe3asGGDqampMQ6Hw6xfv949iKGtrbURymPHjjWffvqpqaurM9u2bTM///nPTVFRkfvxa6+91hQWFhqHw2HuueeeFoNAkpKSzFtvvWWqqqpMQUGBexaG9rY//OEPpqyszBw9etR8/vnn5pFHHjFhYWEt9uvsSOkXXnjBlJWVmerqavP666+7H7vjjjtMQUGBqaqqMm+99ZZJSkpyP5aWlmbefvttU15ebiorK82//vUvM378eAMd17dNnz7d1NXVndX7PGvWLLNnzx5z7Ngxs379emOz2dyPLVu2zCxbtsx922azmfXr15tjx46ZvXv3etQXAua//uu/TH5+vnE6nWb9+vUeg3/Gjx9v1q9fb6qrq01FRYX529/+ZuLj4/3+e65NW7BsitmK2c1j9l/+8hfTXNP65UceecQUFhaa2tpas3v3bnPLLbe4H4uJiTGvvPKKOXLkiHE4HObjjz82GRkZfv89D5Yt5Kt/iIiIiIjI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1HsiC0Q6wvT09D7npaenR7/f21DPzc/PZ9myZYMmyQDhcJidO3cydepUvv71r5/PUxJCDJH02Wc2Hvvs4XA6nTzzzDNs3LgxWl++YsUKZsyYQU1NDWvXruX555+ntrb2vK4jBqePdwAitpRS0b/X1NTw3HPP8ZWvfCVmjwnw+OOPo5Rizpw5OJ1OiouL+fWvf33a83urr68nMzOTtLS0aKc7bdo06urqhh2TRqMZ1s9A5HeSmZmJxWIZ8Km/vr4eu90e/To1NZWsrCzq6uqoqalh+/bt3HjjjcO+5lBi6j/acPjwYVauXNknlpkzZ3L48OEBP3/48GEuuOCCPr/TefPm8eKLL/Y57wtf+AI7d+6kqqrqjPHo9Xpmzpx5rk9HCDEM0mef2Xjss4dLr9czefJk0tPTcTqdVFdXc9ttt0W//8ILL/D++++f93XEQDKSPI49//zz3Hbbbdx4441otVqMRiNLly496wjA2ZjNZjo6OnC73dhstgG30BobG7ngggsG/dna2lreffddfvazn2E0GpkzZw733Xcfzz///BmvefPNN5OTkwPArFmzeOSRR9i4ceOwY29oaOCNN97gt7/9LRkZGej1eq699logskLEf/zHfzBv3jySkpJ4/PHH2b17Nw6Hg9dff52CggI+//nPo9fr0ev1XH755Vx88cXDjmEoNmzYQGFhISUlJRiNRv77v/+bgwcPcuzYsQHnVlZWsn//fh599FGMRiN33HEHc+fO5dVXX+1z3he/+EWefvrpPscmTZrEZz7zGUwmE1qtlhtvvJHPfvazbNmyZUSelxDi9KTPHmg89tkQSXyNRiNarbbP3wHuvPNOCgoK0Gg0ZGdn88QTT7B3716cTicAF198MWlpaRgMBlasWMGNN97IE088MSLPS4yBwmhpsWn9J18AatGiRWrbtm2qtbVVNTU1qddff13l5+crGPokkP4zlC+55BK1Z88e5fF41L59+9T/+3//T9XU1ES/f/vttyuHw6GcTqf6r//6rwGTQPLy8tRrr72mWltb1YkTJwZdhaF/++Uvf6kaGhpUR0eHOnnypPrRj36k9Hr9gPOGOlP66aefVg0NDaqtrU29+uqr0e999atfVSdOnFCtra3qtddeU3l5edHvFRQUqNdff101NTWplpYWtWXLFjVv3jwFZ58Ecs011yiPxzOs/5/Lly9X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\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"jp-MarkdownHeadingCollapsed":true,"tags":[],"id":"EtjwB7Qk-Grj"},"source":["### significance_v3"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"outputId":"a39cdb97-5848-433c-8d77-38a3ed06e2c8","id":"oVifICO4-Grk","executionInfo":{"status":"ok","timestamp":1648958816711,"user_tz":-540,"elapsed":55240,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["get_open_info_df elapsed time : 0.9365532398223877\n","en_ex_pairing elapsed time : 1.2399144172668457\n","short_obj.shape : (625, 5)\n","long_obj.shape : (620, 5)\n","idep_plot_v8 elapsed time : 0.06649255752563477\n","get_open_info_df elapsed time : 0.9137251377105713\n","en_ex_pairing elapsed time : 1.253389835357666\n","short_obj.shape : (624, 5)\n","long_obj.shape : (622, 5)\n","idep_plot_v8 elapsed time : 0.06859445571899414\n","get_open_info_df elapsed time : 0.9187257289886475\n","en_ex_pairing elapsed time : 1.2739830017089844\n","short_obj.shape : (624, 5)\n","long_obj.shape : (618, 5)\n","idep_plot_v8 elapsed time : 0.06598448753356934\n","get_open_info_df elapsed time : 0.915107011795044\n","en_ex_pairing elapsed time : 1.274672508239746\n","short_obj.shape : (623, 5)\n","long_obj.shape : (620, 5)\n","idep_plot_v8 elapsed time : 0.06753754615783691\n","get_open_info_df elapsed time : 0.9499776363372803\n","en_ex_pairing elapsed time : 1.27559494972229\n","short_obj.shape : (625, 5)\n","long_obj.shape : (623, 5)\n","idep_plot_v8 elapsed time : 0.06728625297546387\n","get_open_info_df elapsed time : 0.9140474796295166\n","en_ex_pairing elapsed time : 1.266042709350586\n","short_obj.shape : (623, 5)\n","long_obj.shape : (624, 5)\n","idep_plot_v8 elapsed time : 0.07513761520385742\n","get_open_info_df elapsed time : 0.9196510314941406\n","en_ex_pairing elapsed time : 1.3215289115905762\n","short_obj.shape : (625, 5)\n","long_obj.shape : (626, 5)\n","idep_plot_v8 elapsed time : 0.06602048873901367\n","get_open_info_df elapsed time : 0.9087643623352051\n","en_ex_pairing elapsed time : 1.325789213180542\n","short_obj.shape : (625, 5)\n","long_obj.shape : (624, 5)\n","idep_plot_v8 elapsed time : 0.06941676139831543\n","get_open_info_df elapsed time : 0.9145307540893555\n","en_ex_pairing elapsed time : 1.2819249629974365\n","short_obj.shape : (627, 5)\n","long_obj.shape : (624, 5)\n","idep_plot_v8 elapsed time : 0.06607747077941895\n","get_open_info_df elapsed time : 0.9155371189117432\n","en_ex_pairing elapsed time : 1.3151140213012695\n","short_obj.shape : (625, 5)\n","long_obj.shape : (627, 5)\n","idep_plot_v8 elapsed time : 0.06716775894165039\n","get_open_info_df elapsed time : 0.9286034107208252\n","en_ex_pairing elapsed time : 1.5677604675292969\n","short_obj.shape : (625, 5)\n","long_obj.shape : (625, 5)\n","idep_plot_v8 elapsed time : 0.0672004222869873\n","get_open_info_df elapsed time : 0.9547336101531982\n","en_ex_pairing elapsed time : 1.325855016708374\n","short_obj.shape : (625, 5)\n","long_obj.shape : (627, 5)\n","idep_plot_v8 elapsed time : 0.07309412956237793\n","get_open_info_df elapsed time : 0.9615001678466797\n","en_ex_pairing elapsed time : 1.3334577083587646\n","short_obj.shape : (623, 5)\n","long_obj.shape : (628, 5)\n","idep_plot_v8 elapsed time : 0.07037639617919922\n","get_open_info_df elapsed time : 0.9222204685211182\n","en_ex_pairing elapsed time : 1.3463475704193115\n","short_obj.shape : (623, 5)\n","long_obj.shape : (628, 5)\n","idep_plot_v8 elapsed time : 0.06558609008789062\n","get_open_info_df elapsed time : 0.9100527763366699\n","en_ex_pairing elapsed time : 1.4088802337646484\n","short_obj.shape : (623, 5)\n","long_obj.shape : (627, 5)\n","idep_plot_v8 elapsed time : 0.07866692543029785\n","get_open_info_df elapsed time : 0.9560835361480713\n","en_ex_pairing elapsed time : 1.2978997230529785\n","short_obj.shape : (623, 5)\n","long_obj.shape : (627, 5)\n","idep_plot_v8 elapsed time : 0.06794023513793945\n","get_open_info_df elapsed time : 0.9438843727111816\n","en_ex_pairing elapsed time : 1.306882381439209\n","short_obj.shape : (623, 5)\n","long_obj.shape : (628, 5)\n","idep_plot_v8 elapsed time : 0.06725192070007324\n","get_open_info_df elapsed time : 0.9524247646331787\n","en_ex_pairing elapsed time : 1.3445143699645996\n","short_obj.shape : (624, 5)\n","long_obj.shape : (628, 5)\n","idep_plot_v8 elapsed time : 0.06943869590759277\n","get_open_info_df elapsed time : 0.9644474983215332\n","en_ex_pairing elapsed time : 1.3590984344482422\n","short_obj.shape : (624, 5)\n","long_obj.shape : (628, 5)\n","idep_plot_v8 elapsed time : 0.06768083572387695\n","get_open_info_df elapsed time : 0.9351387023925781\n","en_ex_pairing elapsed time : 1.3340232372283936\n","short_obj.shape : (625, 5)\n","long_obj.shape : (630, 5)\n","idep_plot_v8 elapsed time : 0.06850004196166992\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1728x576 with 36 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# from google.colab import output\n","# ------------ survey param ------------ #\n","# itv_num_list = [1, 3, 5, 15]\n","# itv_list = ['15m', '30m', '1h', '4h']\n","# itv_list = ['3m', '5m', '15m', '30m', '1h', '4h']\n","val_list = np.arange(0.5, -1.5, -0.1)     # prcn 1\n","# val_list = np.arange(0.0, 1.5, 0.03)  # prcn 2\n","# val_list = np.arange(-0.695, -0.75, -0.005)    # prcn 3\n","# val_list = np.arange(0.944, 0.945, 0.0001)    # prcn 4\n","# val_list = np.arange(70, 80, 1)   # prcn -1\n","# val_list = np.arange(200, 180, -5)   # prcn -2\n","\n","# ------------ get survey_res ------------ #\n","result = []\n","res_shape = (3, 12)  # short, long, both x data\n","config_list_copy = copy.deepcopy(config_list)\n","for set_val in val_list:\n","  # ------------ open 결정 이전의 인자값 ------------ #\n","  # ------ point * mr_res ------ #\n","  # config_list_copy[0].loc_set.zone.degree_list = set_val\n","  # config_list_copy[0].loc_set.point2.wick_score_list = str([set_val])\n","  # config_list_copy[0].loc_set.zone.ir = set_val  \n","  # config_list_copy[0].loc_set.zone.abs_ratio = set_val  \n","\n","  # ------------ open 결정 이후의 인자값 ------------ #\n","  # ------ utils ------ #\n","  # config_list_copy[0].tr_set.out_gap = set_val  \n","  # config_list_copy[0].tr_set.ep_gap = set_val \n","\n","  # ------ entry, exit (ep, tp, out vars.) ------ #\n","  config_list_copy[0].loc_set.zone.ei_k = set_val\n","  # config_list_copy[0].ep_set.ep_out_tick = set_val  \n"," \n","  for utils_, config_ in zip(utils_list, config_list_copy):\n","    # enlist_rtc(res_df, config_, np_timeidx)\n","    enlist_tr(res_df, config_, np_timeidx)\n","  open_info_df = get_open_info_df(ep_loc_v2, res_df, np_timeidx, ID_list, config_list_copy, id_idx_list)   # point * mr_res 이기 때문에 utils_tr & rtc 의 영향을 충분히 받음\n","\n","  try:\n","    result.append(get_res(res_df, open_info_df, ohlc_list, point2_list, market_data_list, config_list_copy, np_timeidx, funcs, test_ratio=test_ratio, plot_is=1, signi=True))\n","  except:\n","    result.append(np.full(res_shape, np.nan))\n","    # pass\n","\n","survey_res_list = [np.array(result)[:, s_i::3] for s_i in range(3)]   # 3 for s, l, b\n","# short_res, long_res, both_res = survey_res_list\n","\n","# ------------ plot survey_res ------------ #\n","title_list = [\"short\", \"long\", \"both\"]\n","sub_title_list = ['prcn', 'rc', 'len_pr', 'dpf', 'wr', 'sr', 'acc_pr', 'sum_pr', 'min_pr', 'liqd', 'acc_mdd', 'sum_mdd']\n","space_ = \" \" * 120\n","\n","fig = plt.figure(figsize=(24, 8))\n","plt.style.use('dark_background')\n","gs = gridspec.GridSpec(nrows=1,\n","                        ncols=3,\n","                        # height_ratios=[1, 1, 1]\n","                      )\n","# nrows, ncols, h_r = 3, 3, [1, 1, 1]\n","nrows, ncols, h_r = 3, 4, [1, 1, 1]\n","# nrows, ncols, h_r = 4, 3, [1, 1, 1, 1]\n","# if d_idx == 0:\n","# else:\n","  # nrows, ncols, h_r = 2, 2, [1, 1]\n","\n","for d_idx, (title_name, survey_res) in enumerate(zip(title_list, survey_res_list)):  \n","  inner_gs = gs[d_idx].subgridspec(nrows=nrows,\n","                        ncols=ncols,\n","                        height_ratios=h_r\n","                      )\n","  for in_idx, (data_, sub_title) in enumerate(zip(survey_res.T, sub_title_list)):\n","    plt.subplot(inner_gs[in_idx])\n","    data = data_.ravel()\n","    valid_idx = ~np.isnan(data)\n","    if np.sum(valid_idx) > 0:\n","      x, y = val_list[valid_idx], data[valid_idx]\n","      plt.plot(x, y)  # 앞에서부터 len(result) 만큼만    \n","      plt.title(sub_title + '_{:.2f}'.format(x[np.argmax(y)]))\n","    else:\n","      plt.title(sub_title)\n","\n","plt.suptitle(space_.join(title_list))\n","plt.show()\n","# print(\"\\n\")"]},{"cell_type":"markdown","source":["### legacy"],"metadata":{"id":"1GVZ03zDyU2N"}},{"cell_type":"markdown","source":["#### main_functions"],"metadata":{"id":"IWO7KkqltMFt"}},{"cell_type":"code","source":["def get_open_info_df(ep_loc_v2, res_df, np_timeidx, ID_list, config_list, id_idx_list):\n","  start_0 = time.time()\n","  # ------ get mr_res, zone_arr ------ #\n","  short_mr_res_obj = np.array([ep_loc_v2(res_df, config_, np_timeidx, show_detail=True, ep_loc_side=OrderSide.SELL) for config_ in config_list])\n","  long_mr_res_obj = np.array([ep_loc_v2(res_df, config_, np_timeidx, show_detail=True, ep_loc_side=OrderSide.BUY) for config_ in config_list])\n","  short_open_idx_list = [np.where(res_df['short_open_{}'.format(id)].to_numpy() * mr_res)[0] for id, mr_res in zip(ID_list, short_mr_res_obj[:, 0].astype(np.float64))]   # \"point * mr_Res\"\n","  long_open_idx_list = [np.where(res_df['long_open_{}'.format(id)].to_numpy() * mr_res)[0] for id, mr_res in zip(ID_list, long_mr_res_obj[:, 0].astype(np.float64))]  # zip 으로 zone (str) 과 묶어서 dtype 변경됨\n","\n","  # ------ open_info_arr ------ #\n","  short_side_list = [np.full(len(list_), OrderSide.SELL) for list_ in short_open_idx_list]\n","  long_side_list = [np.full(len(list_), OrderSide.BUY) for list_ in long_open_idx_list]\n","\n","  short_zone_list = [zone_res[short_open_idx] for zone_res, short_open_idx in zip(short_mr_res_obj[:, 1], short_open_idx_list)]\n","  long_zone_list = [zone_res[long_open_idx] for zone_res, long_open_idx in zip(long_mr_res_obj[:, 1], long_open_idx_list)]\n","\n","  short_id_list = [np.full(len(list_), id) for id, list_ in zip(ID_list, short_open_idx_list)]\n","  long_id_list = [np.full(len(list_), id) for id, list_ in zip(ID_list, long_open_idx_list)]\n","\n","  selected_id_idx = np.arange(len(id_idx_list))\n","  short_id_idx_list = [np.full(len(list_), id) for id, list_ in zip(selected_id_idx, short_open_idx_list)]\n","  long_id_idx_list = [np.full(len(list_), id) for id, list_ in zip(selected_id_idx, long_open_idx_list)]\n","\n","  # ------ get open_info_df ------ #\n","  #   series 만들어서 short / long 끼리 합치고 둘이 합치고, 중복은 우선 순위 정해서 제거\n","  short_open_df_list = [pd.DataFrame(index=index_, data=np.vstack((data_)).T, columns=['side', 'zone', 'id', 'id_idx']) for index_, data_ in zip(short_open_idx_list, zip(short_side_list, short_zone_list, short_id_list, short_id_idx_list))]\n","  long_open_df_list = [pd.DataFrame(index=index_, data=np.vstack((data_)).T, columns=['side', 'zone', 'id', 'id_idx']) for index_, data_ in zip(long_open_idx_list, zip(long_side_list, long_zone_list, long_id_list, long_id_idx_list))]\n","\n","  open_info_df = pd.concat(short_open_df_list + long_open_df_list)\n","  # ------ sorting + unique ------ #\n","  open_info_df.sort_index(inplace=True)\n","  # print(len(open_info_df))\n","  # print(len(open_info_df))\n","  # open_info_df.head()\n","  print(\"get_open_info_df elapsed time :\", time.time() - start_0)\n","  return open_info_df[~open_info_df.index.duplicated(keep='first')]  # 먼저 순서를 우선으로 지정  "],"metadata":{"id":"MY1csdNRLGsk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def get_res(res_df, open_info_df, ohlc_list, point2_list, market_data_list, config_list, np_timeidx, funcs, test_ratio=0.3, plot_is=True, signi=False):\n","  # ------------ make open_info_list ------------ #\n","  open_idx = open_info_df.index.to_numpy()\n","  len_df = len(res_df)\n","  s_idx = (open_idx < int(len_df * (1 - test_ratio))) == plot_is\n","  s_open_info_df = open_info_df[s_idx]\n","  s_open_idx = open_idx[s_idx]\n","\n","  open_info_list = [s_open_info_df[col_].to_numpy() for col_ in s_open_info_df.columns]\n","  side_arr, zone_arr, id_arr, id_idx_arr = open_info_list\n","\n","  # ------------ get paired_res ------------ #\n","  start_0 = time.time()\n","  paired_res = en_ex_pairing_v2(res_df, s_open_idx, open_info_list, ohlc_list, point2_list, market_data_list, config_list, np_timeidx, funcs)\n","  # valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr = paired_res\n","  print(\"en_ex_pairing elapsed time :\", time.time() - start_0)  #  0.37 --> 0.3660471439361572 --> 0.21(lesser if)\n","\n","  # ------------ idep_plot ------------ #\n","  start_0 = time.time()\n","  h, l = ohlc_list[1:3]\n","  res = idep_plot_v8(len_df, config_list[0], h, l, s_open_idx, side_arr, paired_res, inversion=False, sample_ratio=1 - test_ratio, signi=signi)\n","  print(\"idep_plot_v8 elapsed time :\", time.time() - start_0)   # 1.40452 (v6) 1.4311 (v5)\n","\n","  return res"],"metadata":{"id":"eiQ36_SLLE3w"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def plot_info_v5(gs, gs_idx, sample_len, tr, prcn, rc, pr, total_pr, cum_pr, liqd, leverage, title_position, fontsize):\n","  try:\n","    plt.subplot(gs[gs_idx])\n","    idep_res_obj = get_res_info_nb_v2(sample_len, pr, total_pr, cum_pr, liqd)\n","    plt.plot(cum_pr)\n","    plt.plot(idep_res_obj[-1], color='gold')\n","    if sample_len is not None:\n","      plt.axvline(sample_len, alpha=1., linestyle='--', color='#ffeb3b')\n","    # title_str = \"prcn : {:.3f} rc : {:.3f}\\n len_pr : {} dpf : {:.3f}\\n wr : {:.3f} sr : {:.3f}\\n acc_pr : {:.3f} sum_pr : {:.3f}\\n\" +\\\n","    #           \"min_pr : {:.3f} liqd : {:.3f}\\n acc_mdd : -{:.3f} sum_mdd : -{:.3f}\\n leverage {}\"\n","    # title_str = \"tr : {:.3f}\\n prcn : {:.3f}\\n rc : {:.3f}\\n len_pr : {}\\n dpf : {:.3f}\\n wr : {:.3f}\\n sr : {:.3f}\\n acc_pr : {:.3f}\\n sum_pr : {:.3f}\\n\" +\\\n","    #           \"min_pr : {:.3f}\\n liqd : {:.3f}\\n acc_mdd : -{:.3f}\\n sum_mdd : -{:.3f}\\n leverage {}\"\n","    title_str = \"tr : {:.3f}\\n prcn : {:.3f}\\n swing_bias : {:.3f}\\n len_pr : {}\\n dpf : {:.3f}\\n wr : {:.3f}\\n sr : {:.3f}\\n acc_pr : {:.3f}\\n sum_pr : {:.3f}\\n\" +\\\n","              \"min_pr : {:.3f}\\n liqd : {:.3f}\\n acc_mdd : -{:.3f}\\n sum_mdd : -{:.3f}\\n leverage {}\"\n","    plt.title(title_str.format(tr, prcn, rc, *idep_res_obj[:-1], leverage), position=title_position, fontsize=fontsize)\n","  except Exception as e:\n","    print(\"error in plot_info :\", e)\n","\n","  return gs_idx + 1"],"metadata":{"id":"8LiKwfiJ4bvM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def idep_plot_v8(len_df, config, h, l, open_idx, side_arr, paired_res, inversion=False, sample_ratio=0.7, title_position=(0.5, 0.5), fontsize=15, signi=False):\n","    if not signi:\n","        plt.style.use(['dark_background', 'fast'])\n","        fig = plt.figure(figsize=(24, 8))\n","        gs = gridspec.GridSpec(nrows=2,  # row 몇 개\n","                               ncols=3,  # col 몇 개\n","                               height_ratios=[10, 1]\n","                               # height_ratios=[10, 10, 1]\n","                               )\n","    gs_idx = 0\n","    # plt.suptitle(key)\n","    \n","    p_ranges, p_qty = literal_eval(config.tp_set.p_ranges), literal_eval(config.tp_set.p_qty)\n","    assert np.sum(p_qty) == 1.0\n","    assert len(p_ranges) == len(p_qty)\n","\n","    if sample_ratio is not None:\n","      sample_len = int(len_df * sample_ratio)\n","    else:\n","      sample_len = len_df\n","\n","    # ------ short & long data preparation ------ #\n","    # start_0 = time.time()\n","    valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr, bias_arr, tr_arr = paired_res    \n","    assert len(valid_openi_arr) != 0, \"assert len(valid_openi_arr) != 0\"    \n","    short_valid_openi_idx = np.where(side_arr[valid_openi_arr] == OrderSide.SELL)[0]  # valid_openi_arr 에 대한 idx, # side_arr,\n","    long_valid_openi_idx = np.where(side_arr[valid_openi_arr] == OrderSide.BUY)[0]\n","\n","    valid_open_idx = open_idx[valid_openi_arr].reshape(-1, 1)\n","\n","    short_obj = np.hstack((pair_price_arr, pair_idx_arr, valid_open_idx))[short_valid_openi_idx]\n","    long_obj = np.hstack((pair_price_arr, pair_idx_arr, valid_open_idx))[long_valid_openi_idx]\n","    both_obj = np.vstack((short_obj, long_obj))\n","    print(\"short_obj.shape :\", short_obj.shape)\n","    print(\"long_obj.shape :\", long_obj.shape)\n","\n","    short_obj, long_obj, both_obj = [np.split(obj_, 5, axis=1) for obj_ in [short_obj, long_obj, both_obj]]\n","\n","    short_lvrg_arr, long_lvrg_arr = [lvrg_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    short_fee_arr, long_fee_arr = [fee_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    short_tpout_arr, long_tpout_arr = [tpout_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    short_bias_arr, long_bias_arr = [bias_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    short_tr_arr, long_tr_arr = [tr_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","    # print(\"long_bias_arr.shape :\", long_bias_arr.shape)    \n","    # print(\"elapsed time :\", time.time() - start_0)\n","\n","    short_true_bias_idx = short_bias_arr[:, 0] <= short_bias_arr[:, 1] # info, threshold (등호의 유무가 매우 유의미함)\n","    long_true_bias_idx = long_bias_arr[:, 0] >= long_bias_arr[:, 1]\n","\n","    # ------ plot_data ------ #\n","    try:\n","      # start_0 = time.time()\n","      short_tr = short_tr_arr.mean()\n","      short_pr, short_liqd = get_pr_v3(OrderSide.SELL, h, l, short_obj, short_tpout_arr, short_lvrg_arr, short_fee_arr, p_ranges, p_qty, inversion)\n","      short_total_pr = to_total_pr(len_df, short_pr, short_obj[-2])\n","      short_cum_pr = np.cumprod(short_total_pr)\n","      # short_liqd = liquidation_v2(OrderSide.SELL, h, short_obj[:4], short_lvrg_arr, short_fee_arr)\n","      short_prcn, short_rc = precision(short_pr, short_true_bias_idx), recall(short_true_bias_idx)\n","      if signi:\n","        short_idep_res_obj = (short_prcn, short_rc) + get_res_info_nb_v2(sample_len, short_pr, short_total_pr, short_cum_pr, short_liqd)\n","      else:\n","        gs_idx = plot_info_v5(gs, gs_idx, sample_len, short_tr, short_prcn, short_rc, short_pr, short_total_pr, short_cum_pr, short_liqd, short_lvrg_arr[-1], title_position, fontsize)\n","      # print(\"elapsed time :\", time.time() - start_0)\n","\n","    except Exception as e:\n","      gs_idx += 1\n","      print(\"error in short plot_data :\", e)\n","\n","    try:\n","      # start_0 = time.time()\n","      long_tr = long_tr_arr.mean()\n","      long_pr, long_liqd = get_pr_v3(OrderSide.BUY, h, l, long_obj, long_tpout_arr, long_lvrg_arr, long_fee_arr, p_ranges, p_qty, inversion)\n","      long_total_pr = to_total_pr(len_df, long_pr, long_obj[-2])\n","      long_cum_pr = np.cumprod(long_total_pr)\n","      # long_liqd = liquidation_v2(OrderSide.BUY, l, long_obj[:4], long_lvrg_arr, long_fee_arr)\n","      long_prcn, long_rc = precision(long_pr, long_true_bias_idx), recall(long_true_bias_idx)\n","      if signi:\n","        long_idep_res_obj = (long_prcn, long_rc) + get_res_info_nb_v2(sample_len, long_pr, long_total_pr, long_cum_pr, long_liqd)\n","      else:\n","        gs_idx = plot_info_v5(gs, gs_idx, sample_len, long_tr, long_prcn, long_rc, long_pr, long_total_pr, long_cum_pr, long_liqd, long_lvrg_arr[-1], title_position, fontsize)\n","      # print(\"elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","      gs_idx += 1\n","      print(\"error in long plot_data :\", e)\n","\n","    try:\n","      # start_0 = time.time()\n","      both_tr = (short_tr + long_tr) / 2\n","      both_pr = np.vstack((short_pr, long_pr))  # for 2d shape, obj 를 1d 로 만들지 않는 이상, pr 은 2d 유지될 것\n","      both_total_pr = to_total_pr(len_df, both_pr, both_obj[-2])\n","      both_cum_pr = np.cumprod(both_total_pr)\n","      both_liqd = min(short_liqd, long_liqd)\n","      both_true_bias_idx = np.hstack((short_true_bias_idx, long_true_bias_idx))  # for 1d shape\n","      both_prcn, both_rc = precision(both_pr, both_true_bias_idx), recall(both_true_bias_idx)\n","      if signi:\n","        both_idep_res_obj = (both_prcn, both_rc) + get_res_info_nb_v2(sample_len, both_pr, both_total_pr, both_cum_pr, both_liqd)\n","      else:\n","        gs_idx = plot_info_v5(gs, gs_idx, sample_len, both_tr, both_prcn, both_rc, both_pr, both_total_pr, both_cum_pr, both_liqd, lvrg_arr[-1], title_position, fontsize)\n","      # print(\"elapsed time :\", time.time() - start_0)\n","    except Exception as e:\n","      gs_idx += 1\n","      print(\"error in both plot_data :\", e)\n","\n","    if not signi:\n","        for obj, cum_pr in zip([short_obj, long_obj, both_obj], [short_cum_pr, long_cum_pr, both_cum_pr]):\n","          try:\n","            # start_0 = time.time()\n","            gs_idx = frq_dev_plot_v3(gs, gs_idx, len_df, sample_len, obj[-2], cum_pr[-1], fontsize)\n","            # print(\"elapsed time :\", time.time() - start_0)          \n","          except Exception as e:\n","            gs_idx += 1\n","            print(\"error in frq_dev_plot_v3 :\", e)\n","\n","        plt.show()\n","        plt.close()\n","        return short_pr, short_obj, short_lvrg_arr, short_fee_arr, short_tpout_arr, short_bias_arr, \\\n","                long_pr, long_obj, long_lvrg_arr, long_fee_arr, long_tpout_arr, long_bias_arr\n","    else:\n","        return [short_idep_res_obj[:-1], long_idep_res_obj[:-1], both_idep_res_obj[:-1]]"],"metadata":{"id":"xafHpMLwESKf"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### get paired_res function"],"metadata":{"id":"EFyWTuscH8VH"}},{"cell_type":"code","source":["def en_ex_pairing_v2(res_df, open_idx, open_info_list, ohlc_list, point2_list, market_data_list, config_list, np_timeidx, funcs):  # 이미 충분히 줄여놓은 idx 임\n","    side_arr, zone_arr, id_arr, id_idx_arr = open_info_list\n","    id_idx_arr = id_idx_arr.astype(int)\n","\n","    ep_out, ep_loc_point2, lvrg_set = funcs\n","\n","    valid_openi_list, pair_idx_list, pair_price_list, lvrg_list, fee_list, tpout_list, bias_list, tr_list = [[] for li in range(8)]\n","    len_df = len(res_df)\n","    len_open_idx = len(open_idx)\n","    i, open_i = 0, -1  # i for total_res_df indexing\n","\n","    while 1:\n","        # ------------ entry phase ------------ #\n","        open_i += 1  # 확인 끝났으면 조기 이탈(+1), 다음 open_idx 조사 진행\n","        if open_i >= len_open_idx:\n","          break\n","          \n","        # ------ ep_loc ------ #\n","        op_idx = open_idx[open_i]  # open_i 는 i 와 별개로 운영\n","        if op_idx < i:  # i = 이전 거래 끝난후의 res_df index - \"거래 종료후 거래 시작\", '<' : 거래 종료시점 진입 가능하다는 의미\n","            continue\n","\n","        # ------ dynamic data by ID ------ #\n","        #     1. 해당 id 로 config 재할당해야함\n","        id_idx = id_idx_arr[open_i]\n","        config = config_list[id_idx]\n","        strat_version = config.strat_version\n","        open_side = side_arr[open_i]\n","\n","        side_pos = 'short' if open_side == OrderSide.SELL else 'long'\n","        ep_arr = res_df['{}_ep_{}'.format(side_pos, strat_version)].to_numpy()  # Todo - while loop 내에서 to_numpy() 반복하느니, pd_indexing 이 낫지 않을까\n","        tp_arr = res_df['{}_tp_{}'.format(side_pos, strat_version)].to_numpy()  # => eptpout arr_list 만들어서 꺼내 사용하면 될 것\n","        out_arr = res_df['{}_out_{}'.format(side_pos, strat_version)].to_numpy()\n","        bias_info_arr = res_df['{}_bias_info_{}'.format(side_pos, strat_version)].to_numpy()  # ex. rolling(entry ~ end)'s high\n","        bias_thresh_arr = res_df['{}_bias_thresh_{}'.format(side_pos, strat_version)].to_numpy()  # ex. close + dc_T20 * 0.5\n","        tr_arr = res_df['{}_tr_{}'.format(side_pos, strat_version)].to_numpy()\n","\n","        # ------ ei_k & point2 ------ #\n","        i = op_idx + 1  # open_signal 이 close_bar.shift(1) 이라고 가정하고 다음 bar 부터 체결확인한다는 의미\n","        if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","            break\n","        exec_j, ep_j, tp_j, out_j, entry_done, en_p, fee = check_eik_point2_exec(res_df, config, op_idx, len_df, open_side, [*ohlc_list, ep_arr], point2_list, ep_out, ep_loc_point2)\n","        i = exec_j\n","        \n","        if not entry_done:\n","            continue\n","\n","        # ------ leverage ------ #\n","        out = out_arr[out_j]  # lvrg_set use out on out_j\n","        leverage = lvrg_set(res_df, config, open_side, en_p, out, fee)  # res_df 변수 사용됨 - 주석 처리 된 상태일뿐\n","        if leverage is None:\n","            continue\n","\n","        exit_done, cross_on = 0, 0\n","        # ------ check tpout_onexec ------ #\n","        # if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","        if config.ep_set.entry_type == \"LIMIT\":\n","            if config.tp_set.tp_onexec:  # dynamic 은 tp_onexec 사용하는 의미가 없음\n","                tp_j = exec_j\n","            if config.out_set.out_onexec:  # dynamic 은 out_onexec 사용하는 의미가 없음\n","                out_j = exec_j\n","\n","        while 1:\n","            # ------------ exit phase ------------ #\n","            if not config.tp_set.static_tp:\n","                tp_j = i\n","            if not config.out_set.static_out:\n","                out_j = i\n","\n","            # ------------ tp ------------ #\n","            if not config.tp_set.non_tp and i != exec_j:\n","                exit_done, ex_p, fee = check_limit_tp_exec(res_df, config, open_i, i, tp_j, len_df, fee, open_side, exit_done, [*ohlc_list, [tp_arr]])  # 여기서는 j -> i 로 변경해야함\n","                # if config.tp_set.tp_type in ['LIMIT']:  # 'BOTH' -> 앞으로는, LIMIT 밖에 없을거라 주석처리함\n","                # if not exit_done and config.tp_set.tp_type in ['MARKET', 'BOTH']:\n","\n","            # ------------ out ------------ #\n","            # ------ signal_out ------ #\n","            if not exit_done:\n","              exit_done, cross_on, ex_p, fee = check_market_out_exec(config, open_i, i, len_df, fee, open_side, cross_on, exit_done, [np_timeidx, *market_data_list])\n","            # ------ hl_out ------ #\n","            if config.out_set.hl_out != \"None\":\n","              if not exit_done:  # and i != len_df - 1:                \n","                  exit_done, ex_p, fee = check_out(config, open_i, i, out_j, len_df, fee, open_side, exit_done, [*ohlc_list, out_arr])\n","\n","            if exit_done:  # 이 phase 는 exit_phase 뒤에도 있어야할 것 - entry_done var. 사용은 안하겠지만\n","                # ------ append dynamic vars. ------ #\n","                valid_openi_list.append(open_i)  # side, zone, start_ver arr 모두 openi_list 로 접근하기 위해 open_i 를 담음\n","                pair_idx_list.append([exec_j, i])  # entry & exit (체결 기준임)\n","                pair_price_list.append([en_p, ex_p])\n","                lvrg_list.append(leverage)\n","                fee_list.append(fee)\n","                tpout_list.append([tp_arr[tp_j], out_arr[out_j]])  # for tpout_line plot_check\n","                # bias_list.append([bias_info_arr[exec_j], bias_thresh_arr[exec_j]])  # backtest 에서만 가능한 future_data 사용\n","                bias_list.append([bias_info_arr[exec_j], tp_arr[tp_j]])  # bias_info 는 entry_idx 부터 & tp = bias_thresh \n","                tr_list.append(tr_arr[open_idx[open_i]])\n","\n","                # open_i += 1  # 다음 open_idx 조사 진행\n","                break\n","\n","            # 1. 아래있으면, 체결 기준부터 tp, out 허용\n","            # 2. 위에있으면, entry 다음 tick 부터 exit 허용\n","            i += 1\n","            if i >= len_df:  # res_df 의 last_index 까지 돌아야함\n","                break\n","                \n","        if i >= len_df: # or open_i >= len_open_idx:  # res_df 의 last_index 까지 돌아야함\n","            break\n","        else:\n","            continue\n","\n","    return np.array(valid_openi_list), np.array(pair_idx_list), np.array(pair_price_list), np.array(lvrg_list), np.array(fee_list), np.array(tpout_list), np.array(bias_list), np.array(tr_list)\n","\n","\n","def check_eik_point2_exec(res_df, config, op_idx, len_df, open_side, np_datas, point2_list, ep_out, ep_loc_point2):\n","    o, h, l, c, ep_arr = np_datas\n","    ep_j = op_idx\n","    tp_j = op_idx\n","    out_j = op_idx\n","\n","    strat_version = config.strat_version    \n","    allow_ep_in = 0 if config.ep_set.point2.use_point2 else 1\n","    entry_done = 0\n","    ep = None\n","\n","    if config.ep_set.entry_type == \"LIMIT\":\n","        fee = config.trader_set.limit_fee\n","\n","        for e_j in range(op_idx + 1, len_df):\n","            # ------ index setting for dynamic options ------ #\n","            if not config.ep_set.static_ep:\n","                ep_j = e_j  # dynamic_ep 를 위한 ep_index var.\n","                out_j = e_j  # dynamic_out 를 위한 out_index var. - 조건식이 static_ep 와 같이 있는 이유 모름 => dynamic_lvrg 로 사료됨\n","\n","            if not config.tp_set.static_tp:\n","                tp_j = e_j\n","\n","            # ------ ei_k ------ # - limit 사용하면 default 로 ei_k 가 존재해야함\n","            if ep_out(res_df, config, op_idx, e_j, tp_j, [h, l], open_side):\n","              break\n","\n","            # ------ point2 ------ #\n","            if not allow_ep_in:\n","                allow_ep_in, out_j = ep_loc_point2(res_df, config, e_j, out_j, point2_list, side=open_side)\n","                if allow_ep_in:\n","                  if config.ep_set.point2.entry_type == \"LIMIT\":\n","                    ep_j = e_j\n","                    # print(\"e_j in point2 :\", e_j)\n","                    continue\n","\n","            # ------ check ep_exec ------ #\n","            if allow_ep_in:\n","              if config.ep_set.point2.use_point2 and config.ep_set.point2.entry_type == 'MARKET':\n","                entry_done = 1\n","                ep = c[e_j]\n","                break\n","              else:\n","                if open_side == OrderSide.SELL:\n","                    if h[e_j] >= ep_arr[ep_j]:\n","                        entry_done = 1\n","                        ep = ep_arr[ep_j]\n","                        if o[e_j] >= ep_arr[ep_j]:  # open comp 는 결국, 수익률에 얹어주는 logic (반보수) -> 사용 보류\n","                            ep = o[e_j]\n","                        break\n","                else:\n","                    if l[e_j] <= ep_arr[ep_j]:\n","                        entry_done = 1\n","                        ep = ep_arr[ep_j]\n","                        if o[e_j] <= ep_arr[ep_j]:\n","                            ep = o[e_j]\n","                        break\n","\n","    else:  # market entry\n","        e_j = op_idx + 1\n","        entry_done = 1\n","        ep = c[op_idx]\n","        fee = config.trader_set.market_fee\n","\n","    return e_j, ep_j, tp_j, out_j, entry_done, ep, fee  # 다음 start_i <-- e_j 로 변경\n","    #   e_j => 다음 phase 의 시작 index <-> ep_j : ep 의 기준 index\n","    #   ep_j, tp_j, out_j 가 return 되어야함 - exit phase 에서 이어가기 위함\n","\n","\n","def check_limit_tp_exec(res_df, config, open_i, j, tp_j, len_df, fee, open_side, exit_done, np_datas):\n","    o, h, l, c, tps = np_datas\n","    tp = None\n","    strat_version = config.strat_version\n","    len_tps = len(tps)\n","\n","    for tp_i, tp_arr in enumerate(tps):\n","        #     decay adjustment    #\n","        #     tp_j includes dynamic_j - functionalize  #\n","        try:\n","            if config.tr_set.decay_gap != \"None\":\n","                decay_share = (j - open_i) // config.tp_set.decay_term\n","                decay_remain = (j - open_i) % config.tp_set.decay_term\n","                if j != open_i and decay_remain == 0:\n","                    if open_side == OrderSide.SELL:\n","                        tp_arr[tp_j] += res_df['short_tp_gap_{}'.format(strat_version)].iloc[open_i] * config.tr_set.decay_gap * decay_share\n","                    else:\n","                        tp_arr[tp_j] -= res_df['long_tp_gap_{}'.format(strat_version)].iloc[open_i] * config.tr_set.decay_gap * decay_share\n","        except:\n","            pass\n","\n","        if open_side == OrderSide.SELL:\n","            if l[j] <= tp_arr[tp_j]:  # and partial_tp_cnt == tp_i:  # we use static tp now\n","                # if l[j] <= tp_arr[j] <= h[j]: --> 이건 잘못되었음\n","                # partial_tp_cnt += 1 --> partial_tp 보류\n","\n","                # ------ dynamic tp ------ #\n","                if tp_arr[j] != tp_arr[j - 1] and not config.tp_set.static_tp:\n","                    # tp limit 이 불가한 경우 - open 이 이미, tp 를 넘은 경우\n","                    if o[j] < tp_arr[j]:\n","                        tp = o[j]\n","                    # tp limit 이 가능한 경우 - open 이 아직, tp 를 넘지 않은 경우\n","                    else:\n","                        tp = tp_arr[j]\n","                # ------ static tp ------ #\n","                else:\n","                    #   tp limit 이 불가한 경우 - open 이 이미, tp 를 넘은 경우\n","                    if o[j] < tp_arr[tp_j]:  # static 해놓고 decay 사용하면 dynamic 이니까\n","                        if config.tr_set.decay_gap != \"None\" and decay_remain == 0:\n","                            tp = o[j]  # tp_j -> open_i 를 가리키기 때문에 decay 는 한번만 진행되는게 맞음\n","                        else:\n","                            tp = tp_arr[tp_j]\n","                    else:\n","                        tp = tp_arr[tp_j]\n","\n","                if tp_i == len_tps - 1:\n","                    exit_done = 1  # partial 을 고려해 exit_done = 1 상태는 tp_i 가 last_index 로 체결된 경우만 해당\n","\n","        else:\n","            if h[j] >= tp_arr[tp_j]:\n","                # ------ dynamic tp ------ #\n","                if tp_arr[j] != tp_arr[j - 1] and not config.tp_set.static_tp:\n","                    if o[j] > tp_arr[j]:\n","                        tp = o[j]\n","                    else:\n","                        tp = tp_arr[j]\n","\n","                # ------ static tp ------ #\n","                else:\n","                    if o[j] > tp_arr[tp_j]:\n","                        if config.tr_set.decay_gap != \"None\" and decay_remain == 0:\n","                            tp = o[j]\n","                        else:\n","                            tp = tp_arr[tp_j]\n","                    else:\n","                        tp = tp_arr[tp_j]\n","\n","                if tp_i == len_tps - 1:\n","                    exit_done = 1  # partial 을 고려해 exit_done = 1 상태는 tp_i 가 last_index 로 체결된 경우만 해당\n","\n","    if exit_done:\n","        fee += config.trader_set.limit_fee\n","\n","    return exit_done, tp, fee\n","\n","\n","def check_market_out_exec(config, open_i, j, len_df, fee, open_side, cross_on, exit_done, np_datas):\n","    np_timeidx, c, bb_lower_5T, bb_upper_5T, rsi_exit, ha_o, ha_h, ha_l, ha_c = np_datas\n","    ex_p = None\n","    strat_version = config.strat_version\n","\n","    # ------ timestamp ------ #\n","    if config.out_set.tf_exit != \"None\":\n","        if np_timeidx[j] % config.out_set.tf_exit == config.out_set.tf_exit - 1 and j != open_i:\n","            exit_done = 1\n","\n","    # ------ rsi ------ # -> vectorize 가능함 => 추후 적용\n","    if config.out_set.rsi_exit:\n","        if open_side == OrderSide.SELL:\n","            if (rsi_exit[j - 1] >= 50 - config.loc_set.point.osc_band) & (rsi_exit[j] < 50 - config.loc_set.point.osc_band):\n","                exit_done = 1\n","        else:\n","            if (rsi_exit[j - 1] <= 50 + config.loc_set.point.osc_band) & (rsi_exit[j] > 50 + config.loc_set.point.osc_band):\n","                exit_done = 1\n","\n","    # ------ heikin_ashi ------ #\n","    # if strat_version in ['v3_3']:\n","    #     if open_side == OrderSide.SELL:\n","    #       if (ha_o[j] < ha_c[j]):# & (ha_o[j] == ha_l[j]):   # 양봉 출현\n","    #           exit_done = 1\n","    #     else:\n","    #       if (ha_o[j] > ha_c[j]):# & (ha_o[j] == ha_h[j]):  # 음봉 출현\n","    #           exit_done = 1\n","\n","    # ------------ early out ------------ #\n","    # ------ bb ------ # --> cross_on 기능은 ide latency 개선 여부에 해당되지 않음\n","    if strat_version in ['v5_2']:\n","        if open_side == OrderSide.SELL:\n","            if c[j] < bb_lower_5T[j] < c[j - 1]:\n","                cross_on = 1\n","            if cross_on == 1 and c[j] > bb_upper_5T[j] > c[j - 1]:\n","                exit_done = 1\n","        else:\n","            if c[j] > bb_upper_5T[j] > c[j - 1]:\n","                cross_on = 1\n","            if cross_on == 1 and c[j] < bb_lower_5T[j] < c[j - 1]:\n","                exit_done = 1\n","\n","    if exit_done:\n","        ex_p = c[j]\n","        fee += config.trader_set.market_fee\n","\n","    return exit_done, cross_on, ex_p, fee\n","\n","\n","def check_out(config, open_i, j, out_j, len_df, fee, open_side, exit_done, np_datas):\n","    o, h, l, c, out_arr = np_datas\n","    ex_p = None\n","\n","    if config.out_set.hl_out:\n","        if open_side == OrderSide.SELL:\n","            if h[j] >= out_arr[out_j]:  # check out only once\n","                exit_done = 1\n","        else:\n","            if l[j] <= out_arr[out_j]:  # check out only once\n","                exit_done = 1\n","    else:  # close_out\n","        if open_side == OrderSide.SELL:\n","            if c[j] >= out_arr[out_j]:  # check out only once\n","                exit_done = 1\n","        else:\n","            if c[j] <= out_arr[out_j]:  # check out only once\n","                ex_p = c[j]\n","                exit_done = 1\n","\n","    if exit_done:\n","        if config.out_set.hl_out:\n","            ex_p = out_arr[out_j]\n","        else:\n","            ex_p = c[j]\n","\n","        if open_side == OrderSide.SELL:\n","            if o[j] >= out_arr[out_j]:\n","                ex_p = o[j]\n","        else:\n","            if o[j] <= out_arr[out_j]:\n","                ex_p = o[j]\n","\n","        fee += config.trader_set.market_fee\n","\n","    return exit_done, ex_p, fee"],"metadata":{"id":"qfbtFVMR01UJ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"jp-MarkdownHeadingCollapsed":true,"tags":[],"id":"zQ-roiifspcX"},"source":["#### ep_loc.point & zone legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Js5eL87VspcX"},"outputs":[],"source":["\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 (res_df['close'] < res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(strat_version)] - 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] >= res_df['bb_lower_1m']) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['bb_lower_1m']) &\n","    #                 (res_df['close'] < res_df['bb_lower_1m'])\n","    #                 , res_df['entry_{}'.format(strat_version)] - 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   (res_df['close'] > res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(strat_version)] + 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] <= res_df['bb_upper_1m']) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['bb_upper_1m']) &\n","    #                   (res_df['close'] > res_df['bb_upper_1m'])\n","    #                 , res_df['entry_{}'.format(strat_version)] + 1, res_df['entry_{}'.format(strat_version)])\n","\n","\n","    \n","   # --------------- ema --------------- #   \n","  # res_df['ema5_1m'] = ema(res_df['close'], 5).shift(1)\n","\n","  #   # --------------- cloud bline --------------- #   \n","  # res_df['cloud_bline_1m'] = cloud_bline(res_df, 26).shift(1)\n","  \n","    #       stochastic      #\n","  # res_df['stoch'] = stoch(res_df, 5, 3, 3)\n","\n","    #       fisher      #\n","  # res_df['fisher30'] = fisher(res_df, 30)\n","  # res_df['fisher60'] = fisher(res_df, 60)\n","  # res_df['fisher120'] = fisher(res_df, 120)\n","\n","    #       cctbbo      #\n","  # res_df['cctbbo'], _ = cct_bbo(res_df, 21, 13)\n","\n","    #       ema_roc      #\n","  # res_df['ema_roc'] = ema_roc(res_df['close'], 13, 9)\n","\n","\n","   # ------------------------------ htf data ------------------------------ #    \n","\n","  #             Todo              #\n","  # htf_df = pd.read_excel(date_path2 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # htf_df = pd.read_excel(date_path3 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # htf_df = pd.read_excel(date_path4 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # htf_df = pd.read_excel(date_path5 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # # # # htf_df = pd.read_excel(date_path6 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","\n","  # # ---- htf index slicing ---- #\n","  # htf_df = htf_df.loc[:res_df.index[-1]]\n","  \n","  # print(\"res_df.index[-1] :\", res_df.index[-1])\n","  # print(\"htf_df.index[-1] :\", htf_df.index[-1])\n","\n","  # res_df = dc_line(res_df, htf_df, '5m')\n","  # res_df = dc_level(res_df, '5m', 1)\n","\n","\n","  # # # if \"sma4\" in res_df.columns:\n","  # # #   res_df.drop(\"sma4\", axis=1, inplace=1)\n","\n","  # # htf_df['sma'] = htf_df['close'].rolling(60).mean()\n","  # # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, htf_df, [-1]), columns=['sma_30m']))\n","  \n","  # htf_df['stoch'] = stoch(htf_df, 13, 3, 3)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, htf_df, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","   \n","  # fifth_df['ema'] = ema(fifth_df['close'], 5)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf_v2(res_df, fifth_df, [-1]), columns=['ema5']))\n","\n","        # ------------------------------------ short ------------------------------------ # \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 0:\n","        #   mr_score += 1          \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 0:\n","        #   mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_upper_1m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_upper_3m'].iloc[i] <= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_upper_5m'].iloc[i] <= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == 'MARKET':\n","        #   mr_const_cnt += 1\n","        #   if (res_df['close'].iloc[i] - res_df['short_tp'].iloc[i]) / (res_df['short_out'].iloc[i] - res_df['close'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error):  \n","        #     mr_score += 1\n","\n","           \n","        # ------- entry once ------- #   \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == 1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == -1:\n","        #     prev_entry_cnt += 1          \n","        # # # print(\"prev_entry_cnt :\", prev_entry_cnt)\n","\n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] < res_df['bb_lower_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_lower2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_base_1h'].iloc[i]:\n","\n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] < res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","  \n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['low'].iloc[i] > res_df['short_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1\n","\n","\n","\n","        # ------------------------------------ long ------------------------------------ # \n","          \n","\n","        # --------- by sar --------- # \n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_3m'].iloc[i] == 1:\n","        #   mr_score += 1   \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_5m'].iloc[i] == 1:\n","        #   mr_score += 1     \n","\n","        # mr_const_cnt += 1\n","        # if res_df['sar_uptrend_15m'].iloc[i] == 1:\n","          # mr_score += 1\n","\n","          #      dc & sar      # \n","        # mr_const_cnt += 1\n","        # # if res_df['dc_lower_1m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        # if res_df['dc_lower_3m'].iloc[i] >= res_df['sar_5m'].iloc[i]:\n","        # # if res_df['dc_lower_5m'].iloc[i] >= res_df['sar_15m'].iloc[i]:\n","        #   mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == \"MARKET\":\n","          # mr_const_cnt += 1        \n","          # if (res_df['long_tp'].iloc[i] - res_df['close'].iloc[i]) / (res_df['close'].iloc[i] - res_df['long_out'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error): # 일반적으로 dr 상에서 tp 비율이 더 커짐 (tr 보다)\n","          #   mr_score += 1\n","\n","        # -------------- ep limit -------------- #    \n","        # mr_const_cnt += 1\n","        # # if (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # if config.ep_set.min_eplim_pct < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # # if 0 < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        #   # if res_df['st_gap_15m'].iloc[i] / res_df['open'].iloc[i] < 0:\n","        #   #   print(\"i, res_df['st_gap_15m'].iloc[i] :\", i, res_df['st_gap_15m'].iloc[i])\n","        #   mr_score += 1\n","\n","\n","        # -------------- entry once -------------- #    \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == -1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == 1:\n","        #     prev_entry_cnt += 1\n","          \n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","          \n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] > res_df['bb_upper_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_upper2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_base_1h'].iloc[i]:\n","        \n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] > res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","\n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['high'].iloc[i] < res_df['long_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","          \n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1"]},{"cell_type":"markdown","source":["#### dump"],"metadata":{"id":"_blyFhQJUd5X"}},{"cell_type":"code","source":["def get_max_outg_v3(open_side, config, ohlc_list, obj, tpout_arr, epout_0, out_gap):\n","\n","    h, l = ohlc_list[1:3]\n","\n","    np_obj = np.array(obj).T[0]\n","    assert len(np_obj.shape) == 2\n","\n","    # iin == iout 인 경우 분리\n","    # en_idx = np_obj[:, 2]\n","    # ex_idx = np_obj[:, 3]\n","    # equal_idx = en_idx == ex_idx\n","\n","    \n","    _, _, en_idxs, ex_idxs, open_idxs = obj\n","\n","    if open_side == \"SELL\":\n","      idxgs = [np.argwhere(l[int(en_idx):int(en_idx + config.tr_set.bias_info_tick)] <= tpout_arr[i, 0]) for i, en_idx in enumerate(en_idxs)]\n","    else:\n","      idxgs = [np.argwhere(h[int(en_idx):int(en_idx + config.tr_set.bias_info_tick)] >= tpout_arr[i, 0]) for i, en_idx in enumerate(en_idxs)]\n","\n","    min_idxg = np.array([gaps.min() if len(gaps) != 0 else np.nan for gaps in idxgs])  # get 최소 idx_gap from en_idx\n","    nan_idx = np.isnan(min_idxg) # .astype(int) -> false swing_bias idx\n","    # min_idxg[nan_idx] = 0  # fill na 0, for idex summation below\n","\n","    if open_side == \"SELL\":      \n","      # max_high = np.array([np.max(h[int(en_idx):int(en_idx + idx_gap + 1)]) for en_idx, idx_gap in zip(en_idxs, min_idxg)]).reshape(-1, 1)  # reshape is important in np boradcasting\n","      # max_high = np.array([np.max(h[int(en_idx):int(en_idx + idx_gap + 1)]) if not np.isnan(idx_gap) else np.max(h[int(en_idx):int(ex_idx + 1)])\n","      max_high = np.array([np.max(h[int(en_idx):int(en_idx + idx_gap + 1)]) if not np.isnan(idx_gap) else np.max(h[int(en_idx):int(en_idx + config.tr_set.bias_info_tick)])\n","                          for en_idx, ex_idx, idx_gap in zip(en_idxs, ex_idxs, min_idxg)]).reshape(-1, 1)  # reshape is important in np boradcasting   # outg 라서, iin + 1 이 아님\n","      max_outg = (max_high - epout_0) / out_gap\n","    else:\n","      # min_low = np.array([np.min(l[int(en_idx):int(en_idx + idx_gap + 1)]) for en_idx, idx_gap in zip(en_idxs, min_idxg)]).reshape(-1, 1)\n","      # min_low = np.array([np.min(l[int(en_idx):int(en_idx + idx_gap + 1)]) if not np.isnan(idx_gap) else np.min(l[int(en_idx):int(ex_idx + 1)])\n","      min_low = np.array([np.min(l[int(en_idx):int(en_idx + idx_gap + 1)]) if not np.isnan(idx_gap) else np.min(l[int(en_idx):int(en_idx + config.tr_set.bias_info_tick)])\n","                          for en_idx, ex_idx, idx_gap in zip(en_idxs, ex_idxs, min_idxg)]).reshape(-1, 1)  # outg 라서, iin + 1 이 아님\n","      max_outg = (epout_0 - min_low) / out_gap # out_idx 포함\n","\n","    return max_outg, open_idxs.astype(int), ~nan_idx.astype(bool).reshape(-1, 1)  # true_bias 의 outg data 만 사용\n","\n","\n","def get_max_outg_v2(open_side, config, ohlc_list, obj, tpout_arr, epout_0, out_gap):\n","\n","    h, l = ohlc_list[1:3]\n","    _, _, en_idxs, _, open_idxs = obj\n","\n","    if open_side == \"SELL\":\n","      idxgs = [np.argwhere(l[int(en_idx):int(en_idx + config.tr_set.bias_info_tick)] <= tpout_arr[i, 0]) for i, en_idx in enumerate(en_idxs)]\n","    else:\n","      idxgs = [np.argwhere(h[int(en_idx):int(en_idx + config.tr_set.bias_info_tick)] >= tpout_arr[i, 0]) for i, en_idx in enumerate(en_idxs)]\n","\n","    min_idxg = np.array([gaps.min() if len(gaps) != 0 else np.nan for gaps in idxgs])  # get 최소 idx_gap from en_idx\n","    nan_idx = np.isnan(min_idxg) # .astype(int)\n","    min_idxg[nan_idx] = 0  # fill na 0, for idex summation below\n","\n","    if open_side == \"SELL\":      \n","      max_high = np.array([np.max(h[int(en_idx):int(en_idx + idx_gap + 1)]) for en_idx, idx_gap in zip(en_idxs, min_idxg)]).reshape(-1, 1)  # reshape is important in np boradcasting\n","      max_outg = (max_high - epout_0) / out_gap\n","    else:\n","      max_low = np.array([np.min(l[int(en_idx):int(en_idx + idx_gap + 1)]) for en_idx, idx_gap in zip(en_idxs, min_idxg)]).reshape(-1, 1)\n","      max_outg = (epout_0 - max_low) / out_gap # out_idx 포함\n","\n","    return max_outg[~nan_idx], open_idxs[~nan_idx].astype(int)  # true_bias 의 outg data 만 사용\n","\n","def get_max_tpg_v2(open_side, ohlc_list, pr_, obj, tp_1, tp_gap):  # much faster\n","\n","    h, l = ohlc_list[1:3]\n","\n","    # en_p = obj[0]\n","    # ex_p = obj[1]\n","\n","    np_obj = np.array(obj).T[0]\n","    assert len(np_obj.shape) == 2\n","\n","    # iin == iout 인 경우 분리\n","    en_idx = np_obj[:, 2]\n","    ex_idx = np_obj[:, 3]\n","    equal_idx = en_idx == ex_idx\n","\n","    if open_side == \"SELL\":\n","        min_low = np.full_like(tp_1, np.nan)\n","        # min_low[~equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)  # start from iin + 1\n","        min_low[~equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)  # start from iin + 1\n","        max_tpg = (tp_1 - min_low) / tp_gap\n","    else:\n","        max_high = np.full_like(tp_1, np.nan)\n","        # max_high[~equal_idx] = np.array([np.max(h[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        max_high[~equal_idx] = np.array([np.max(h[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        max_tpg = (max_high - tp_1) / tp_gap\n","\n","    return max_tpg[pr_ < 1]  # out 된 case 만 tpg 담음\n","    # return max_tpg"],"metadata":{"id":"183hY18cpUBu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["titles = public_cols +devided_cols\n","max_plot_outg = 10\n","\n","for title, short_data, long_data in zip(titles, short_datas, long_datas):\n","\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(12, 5))\n","  nrows, ncols = 1, 2\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                          ncols=ncols\n","                          )\n","    \n","  print(len(long_max_outg))\n","\n","  short_plot_idx = short_max_outg <= max_plot_outg\n","  long_plot_idx = long_max_outg <= max_plot_outg  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_open_data = short_data[short_outg_open_idx]\n","  long_open_data = long_data[long_outg_open_idx]\n","  \n","  short_plot_idx *= short_open_data <= 10\n","  long_plot_idx *= long_open_data <= 10 # nan 과 inf 때문에 이 방식 채택\n","\n","  short_plot_idx *= ~np.isnan(short_open_data)\n","  long_plot_idx *= ~np.isnan(long_open_data)  # nan 과 inf 때문에 이 방식 채택\n","\n","  print(np.sum(long_plot_idx))\n","\n","  short_plot_idx *= ~np.isinf(short_open_data)\n","  long_plot_idx *= ~np.isinf(long_open_data)  # nan 과 inf 때문에 이 방식 채택\n","  \n","  print(np.sum(long_plot_idx))\n","\n","  plt.subplot(gs[0])\n","  x, y = short_max_outg[short_plot_idx].ravel(), short_open_data[short_plot_idx].ravel()\n","  # plt.bar(x, y, width=0.05)\n","  plt.scatter(x, y)\n","  plt.axvline(0.5, color='red', linewidth=3)\n","  plt.title(\"coef : {:0.3f}\".format(np.corrcoef(-x, y)[0, 1]))\n","  plt.xlim(0, max_plot_outg)\n","\n","  plt.subplot(gs[1])\n","  x, y = long_max_outg[long_plot_idx].ravel(), long_open_data[long_plot_idx].ravel()\n","  # plt.bar(x, y, width=0.05)\n","  plt.scatter(x, y)\n","  plt.axvline(0.5, color='red', linewidth=3)\n","  plt.title(\"coef : {:0.3f}\".format(np.corrcoef(-x, y)[0, 1]))\n","  plt.xlim(0, max_plot_outg)\n","\n","  plt.suptitle(title)\n","  plt.show()\n","\n","  print()"],"metadata":{"id":"eCFQfLGBrwj2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["short_max_outg, short_outg_open_idx = get_max_outg_v2(\"SELL\", config, ohlc_list, short_obj, short_tpout_arr, short_open_epout_0, short_open_epout_gap)\n"],"metadata":{"id":"nYDgg3XEt116"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["strat_version = config.strat_version\n","len_df = len(res_df)\n","short_open_res = np.ones(len_df)\n","long_open_res = np.ones(len_df)\n","\n","short_tp_1_col, short_tp_0_col, short_tp_gap_col = 'short_tp_1_{}'.format(strat_version), 'short_tp_0_{}'.format(strat_version), 'short_tp_gap_{}'.format(strat_version) \n","long_tp_1_col, long_tp_0_col, long_tp_gap_col = 'long_tp_1_{}'.format(strat_version), 'long_tp_0_{}'.format(strat_version), 'long_tp_gap_{}'.format(strat_version) \n","short_epout_1_col, short_epout_0_col, short_epout_gap_col = 'short_epout_1_{}'.format(strat_version), 'short_epout_0_{}'.format(strat_version), 'short_epout_gap_{}'.format(strat_version) \n","long_epout_1_col, long_epout_0_col, long_epout_gap_col = 'long_epout_1_{}'.format(strat_version), 'long_epout_0_{}'.format(strat_version), 'long_epout_gap_{}'.format(strat_version) \n","\n","data_cols = ['open', 'high', 'low']   # Todo - public_indi 이전에 해야할지도 모름 # 'close', 'haopen', 'hahigh', 'halow', 'haclose'\n","tp_cols = [short_tp_1_col, short_tp_0_col, short_tp_gap_col, long_tp_1_col, long_tp_0_col, long_tp_gap_col]   # Todo - public_indi 이전에 해야할지도 모름\n","epout_cols = [short_epout_1_col, short_epout_0_col, short_epout_gap_col, long_epout_1_col, long_epout_0_col, long_epout_gap_col]   # Todo - public_indi 이전에 해야할지도 모름\n","\n","short_tp_1_, short_tp_0_, short_tp_gap_, long_tp_1_, long_tp_0_, long_tp_gap_ = [res_df[col_].to_numpy() for col_ in tp_cols]\n","short_epout_1_, short_epout_0_, short_epout_gap_, long_epout_1_, long_epout_0_, long_epout_gap_ = [res_df[col_].to_numpy() for col_ in epout_cols]\n","open, high, low = [res_df[col_].to_numpy() for col_ in data_cols]\n","\n","short_base = (short_tp_1_ + short_tp_0_) / 2\n","long_base = (long_tp_1_ + long_tp_0_) / 2\n","\n","touch_period = 50\n","\n","short_a_touch = pd.Series(np.where(high >= short_tp_0_, np.arange(len(res_df)), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()  # min -> max\n","short_b_touch = pd.Series(np.where(low <= short_tp_1_, np.arange(len(res_df)), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨\n","\n","short_en_p = (get_line(short_a_touch, short_tp_0_) + get_line(short_b_touch, short_tp_1_)) / 2\n","short_base_b = get_line(short_b_touch, short_base)\n","short_tp_gap_b = get_line(short_b_touch, short_tp_gap_)\n","short_open_res *= (high >= short_base_b) & (short_base_b >= open) & (short_a_touch < short_b_touch) & (short_base_b + config.loc_set.point.base_gap * short_tp_gap_b >= short_base)\n","\n","long_a_touch = pd.Series(np.where(low <= long_tp_0_, np.arange(len(res_df)), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()       \n","long_b_touch = pd.Series(np.where(high >= long_tp_1_, np.arange(len(res_df)), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()\n","\n","long_en_p = (get_line(long_a_touch, long_tp_0_) + get_line(long_b_touch, long_tp_1_)) / 2\n","long_base_b = get_line(long_b_touch, long_base)\n","long_tp_gap_b = get_line(long_b_touch, long_tp_gap_)\n","long_open_res *= (open >= long_base_b) & (long_base_b >= low) & (long_a_touch < long_b_touch) & (long_base_b - config.loc_set.point.base_gap * long_tp_gap_b <= long_base)"],"metadata":{"id":"19_q_5awv_Uu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(get_line(long_a_touch, long_tp_0_)[long_open_res.astype(bool)])\n","print(get_line(long_a_touch, long_tp_0_)[long_open_res.astype(bool)])\n","print(get_line(long_b_touch, long_tp_1_)[long_open_res.astype(bool)])\n","print(long_base_b[long_open_res.astype(bool)])\n","np.sum(long_en_p[long_open_res.astype(bool)] != long_base_b[long_open_res.astype(bool)])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5X-3R-rSwFDh","executionInfo":{"status":"ok","timestamp":1648558797859,"user_tz":-540,"elapsed":3,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"2053743d-9468-4bd6-c0e8-c2817b448ec6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[ 379.67  379.67  387.17 ... 3145.43 3145.43 3126.73]\n","[ 386.14  386.14  391.39 ... 3158.96 3158.96 3150.79]\n","[ 382.905  382.905  389.28  ... 3152.195 3152.195 3138.76 ]\n"]},{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":28}]},{"cell_type":"code","source":["def get_max_tpg(open_side, ohlc_list, pr_, obj_, rtc_gap):  # much faster\n","    if type(obj_) == list:\n","        obj_ = list(zip(*obj_))\n","\n","    h, l = ohlc_list[1:3]\n","\n","    if open_side == \"SELL\":\n","      max_tpg = np.array([ep_ - np.min(l[int(iin):int(iout + 1)]) for ep_, _, iin, iout in obj_]) / rtc_gap # out 포함\n","      # max_outg = np.array([np.max(h[int(iin):int(iout + 1)]) - ep_ for ep_, _, iin, iout in obj_]) / rtc_gap\n","    else:\n","      max_tpg = np.array([np.max(h[int(iin):int(iout + 1)]) - ep_ for ep_, _, iin, iout in obj_]) / rtc_gap\n","      # max_outg = np.array([ep_ - np.min(l[int(iin):int(iout + 1)]) for ep_, _, iin, iout in obj_]) / rtc_gap\n","\n","    return max_tpg[pr_ < 1]  # out 된 case 만 tpg 담음"],"metadata":{"id":"yGm3hwHEJ1va"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["short_max_tpg = get_max_tpg(\"SELL\", ohlc_list, short_pr, short_obj[:4], short_open_rtc_gap)\n","long_max_tpg = get_max_tpg(\"BUY\", ohlc_list, long_pr, long_obj[:4], long_open_rtc_gap)"],"metadata":{"id":"eooryL32-zxp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["long_max_tpg"],"metadata":{"id":"yOMiuw7cJYmZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def get_pr_v3(open_side, h, l, obj, tpout, lvrg, fee, p_ranges, p_qty, inversion=False):  # --> 여기서 사용하는 ex_p = ex_p\n","\n","    en_p = obj[0]\n","    # ex_p = obj[1]\n","    tp, out = np.split(tpout, 2, axis=1)\n","    len_p = len(p_ranges)\n","    en_ps, tps, outs, lvrgs, fees = [np.tile(arr_, (1, len_p)) for arr_ in [en_p, tp, out, lvrg, fee]]\n","    \n","    np_obj = np.array(obj).T[0]\n","    assert len(np_obj.shape) == 2\n","    \n","    # iin == iout 인 경우 분리\n","    en_idx = np_obj[:, 2]\n","    ex_idx = np_obj[:, 3]\n","    equal_idx = en_idx == ex_idx\n","        \n","    if open_side == \"SELL\":\n","        p_tps = en_ps - (en_ps - tps) * p_ranges\n","        # min_low = np.array([np.min(l[int(iin):int(iout + 1)]) for _, _, iin, iout in list(zip(*obj[:4]))]).reshape(-1, 1)  # -> deprecated, start from iin + 1\n","        min_low = np.full_like(en_p, np.nan)\n","        min_low[~equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1) # start from iin + 1\n","        tp_idx = np.tile(min_low, (1, len_p)) <= p_tps\n","        \n","        # ------ liquidation ------ #\n","        max_high = np.full_like(en_p, np.nan)\n","        max_high[~equal_idx] = np.array([np.max(h[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        liqd = np.nanmin((en_p / max_high - fee - 1) * lvrg + 1)\n","    else:\n","        p_tps = en_ps + (tps - en_ps) * p_ranges\n","        # max_high = np.array([np.max(h[int(iin):int(iout + 1)]) for _, _, iin, iout in list(zip(*obj[:4]))]).reshape(-1, 1)\n","        max_high = np.full_like(en_p, np.nan)\n","        max_high[~equal_idx] = np.array([np.max(h[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        tp_idx = np.tile(max_high, (1, len_p)) >= p_tps\n","        # print(p_tps)\n","        # print(max_high)\n","\n","        # ------ liquidation ------ #\n","        min_low = np.full_like(en_p, np.nan)\n","        min_low[~equal_idx] = np.array([np.min(l[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        liqd = np.nanmin((min_low / en_p - fee - 1) * lvrg + 1)\n","\n","    ex_ps = outs.copy()\n","    ex_ps[tp_idx] = p_tps[tp_idx]\n","\n","    if open_side == \"SELL\":\n","        if not inversion:\n","            pr = ((en_ps / ex_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","        else:\n","            pr = ((ex_ps / en_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","    else:\n","        if not inversion:\n","            # print(fees)\n","            # print(p_qty)\n","            # print(p_qty * fees)\n","            pr = ((ex_ps / en_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","        else:\n","            pr = ((en_ps / ex_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","\n","    return pr.reshape(-1, 1), liqd"],"metadata":{"id":"SrGNSuOjCyPn"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["p_ranges, p_qty = [0.2, 0.6, 1], [1, 0.0, 0.00]\n","long_pr, long_liqd = get_pr_v3(OrderSide.BUY, h, l, long_obj, long_tpout_arr, long_lvrg_arr, long_fee_arr, p_ranges, p_qty, inversion)"],"metadata":{"id":"b5s3Us9VtlXH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["long_pr"],"metadata":{"id":"s1O_gGXVtrtz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def liquidation_v2(open_side, data_, obj_, lvrg, fee):  # v1 is deprecated\n","    if type(obj_) == list:\n","        obj = list(zip(*obj_))\n","\n","    np_obj = np.array(obj_).T[0]\n","    assert len(np_obj.shape) == 2\n","    \n","    en_p = obj_[0]\n","\n","    # iin == iout 인 경우 분리\n","    en_idx = np_obj[:, 2]\n","    ex_idx = np_obj[:, 3]\n","    equal_idx = en_idx == ex_idx\n","\n","    if open_side == \"SELL\":\n","        max_high = np.full_like(en_p, np.nan)\n","        max_high[~equal_idx] = np.array([np.max(data_[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        return np.nanmin((en_p / max_high - fee - 1) * lvrg + 1)\n","    else:\n","        min_low = np.full_like(en_p, np.nan)\n","        min_low[~equal_idx] = np.array([np.min(data_[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        return np.nanmin((min_low / en_p - fee - 1) * lvrg + 1)"],"metadata":{"id":"HBFh3FJLpYeZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["short_liqd = liquidation_v2(OrderSide.SELL, h, short_obj[:4], short_lvrg_arr, short_fee_arr)\n","long_liqd = liquidation_v2(OrderSide.BUY, l, long_obj[:4], long_lvrg_arr, long_fee_arr)\n","\n","print(short_liqd)\n","print(long_liqd)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GtajcCM49AGr","executionInfo":{"status":"ok","timestamp":1648462727490,"user_tz":-540,"elapsed":527,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"a0c857d5-83db-407c-f0dd-bb906de72f20"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(2005,)\n","(1724,)\n","0.9338351565411452\n","0.9832121539680836\n"]}]},{"cell_type":"code","source":["def liquidation_v2(open_side, data_, obj_, lvrg, fee):  # much faster\n","\n","    # if type(obj_) == list:\n","    #     obj_ = \n","    # if open_side == \"SELL\":\n","    #     return np.min([(ep_ / np.max(data_[int(iin):int(iout + 1)]) - fee - 1) * lvrg + 1 for ep_, _, iin, iout in obj_])\n","    # else:\n","    #     return np.min([(np.min(data_[int(iin):int(iout + 1)]) / ep_ - fee - 1) * lvrg + 1 for ep_, _, iin, iout in obj_])\n","\n","    np_obj = np.array(obj).T[0]\n","    assert len(np_obj.shape) == 2\n","\n","    en_p = obj_[0]  # 2d\n","\n","    print(np_obj.shape)\n","    \n","    # iin == iout 인 경우 분리\n","    en_idx = np_obj[:, 2]\n","    ex_idx = np_obj[:, 3]\n","    equal_idx = en_idx == ex_idx\n","    print(equal_idx)\n","        \n","    if open_side == \"SELL\":\n","        max_high = en_p.copy()\n","        max_high[~equal_idx] = np.array([np.max(data_[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)  # equal_idx 는 liqd 를 측정하지 않음\n","        return np.min((en_p / max_high - fee - 1) * lvrg + 1)\n","    else:\n","        min_low = en_p.copy()\n","        print(min_low)\n","\n","        # min_low[~equal_idx] = np.array([np.min(data_[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        print(data_)\n","        # res = np.array([np.min(data_[int(iin):int(iout)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        res = np.min([(np.min(data_[int(iin):int(iout)]) / ep_ - fee - 1) * lvrg + 1 for ep_, _, iin, iout in list(zip(*obj_)) if iin != iout])\n","        # print(min_low[~equal_idx])\n","        print(res)\n","        return np.min((min_low / en_p - fee - 1) * lvrg + 1)"],"metadata":{"id":"eMuRjqo_evR1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["h, l = ohlc_list[1:3]\n","long_liqd = liquidation_v2(OrderSide.BUY, l, long_obj[:4], long_lvrg_arr, long_fee_arr)"],"metadata":{"id":"uLMEbR_vij3L"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# np.array(long_obj)[:,(en_idx == ex_idx)].shape\n","long_np_obj = np.array(long_obj).T[0]"],"metadata":{"id":"ykrPUuxiXlLG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["long_np_obj[~equal_idx, :4]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MZiMIYLln8bB","executionInfo":{"status":"ok","timestamp":1648455838651,"user_tz":-540,"elapsed":401,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"3a2f1100-f1b1-4ad9-da2f-d50708a60ccd"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[   383.005,    381.73 ,     60.   ,     61.   ],\n","       [   386.33 ,    384.9  ,    105.   ,    107.   ],\n","       [   386.43 ,    385.24 ,    240.   ,    243.   ],\n","       ...,\n","       [  3806.905,   3863.8  , 679660.   , 679934.   ],\n","       [  3953.845,   3944.   , 680228.   , 680255.   ],\n","       [  4102.28 ,   4089.18 , 685040.   , 685167.   ]])"]},"metadata":{},"execution_count":507}]},{"cell_type":"code","source":["# for _, _, iin, iout in long_np_obj[~equal_idx, :4]:\n","#   print(iin, iout)"],"metadata":{"id":"r8rHPFeHm1DQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# long_np_obj.shape\n","# # long_np_obj.T[0]\n","long_np_obj\n","\n","en_idx = long_np_obj[:, 2]\n","ex_idx = long_np_obj[:, 3]\n","\n","# print(en_idx[:5])\n","# print(ex_idx[:5])\n","# np.sum(en_idx == ex_idx)\n","equal_idx = en_idx == ex_idx\n","equal_idx.shape\n","# en_idx"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Uyjsp9EyZ4GF","executionInfo":{"status":"ok","timestamp":1648453058391,"user_tz":-540,"elapsed":390,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"b15069ba-0057-4665-916c-f4417979cb88"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1724,)"]},"metadata":{},"execution_count":446}]},{"cell_type":"code","source":["# # for items in zip(long_np_obj[:4]):\n","# # for items in list(zip(*long_obj[:4])):\n","# for items in long_np_obj:\n","#   print(items)\n","#   break\n","equal_idx = equal_idx.ravel()"],"metadata":{"id":"_GrZgkaSZC2K"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["min_low = np.full_like(en_idx, np.nan)\n","min_low[~equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in long_np_obj[~equal_idx, :4]]).reshape(-1, 1)  # reshape for shape match\n","# min_low[equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in long_np_obj[equal_idx, :4]]).reshape(-1, 1)  # reshape for shape match # np.nan 은 비교에서 무조건 False 즉, out 처리될 것"],"metadata":{"id":"R1YRROdJYWkH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["long_liqd"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jFxV8dami0wn","executionInfo":{"status":"ok","timestamp":1648454521907,"user_tz":-540,"elapsed":3,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"896b3188-7179-4f33-c9e5-f259f5458436"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["-1.7472363139317024"]},"metadata":{},"execution_count":483}]},{"cell_type":"code","source":["short_outg_plot_data = short_max_outg[short_max_outg <= max_plot_outg]  # nan 과 inf 때문에 이 방식 채택\n","long_outg_plot_data = long_max_outg[long_max_outg <= max_plot_outg]\n","print(\"len(short_outg_plot_data) :\", len(short_outg_plot_data))\n","print(\"len(long_outg_plot_data) :\", len(long_outg_plot_data))\n","\n","plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(12, 5))\n","nrows, ncols = 1, 2\n","gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                        ncols=ncols\n","                        )\n","  \n","plt.subplot(gs[0])\n","kde_plot_v2(*np.unique(short_outg_plot_data, return_counts=True))\n","\n","plt.subplot(gs[1])\n","kde_plot_v2(*np.unique(long_outg_plot_data, return_counts=True))\n","\n","plt.suptitle('outg')\n","plt.show()"],"metadata":{"id":"mMsDJDmO5qNw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# --- tp > ep > out 검사 --- #\n","long_tp, long_out = np.split(long_tpout_arr, 2, axis=1)\n","long_ep = long_obj[0]"],"metadata":{"id":"BjxCPi96JbfS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(np.sum((long_tp <= long_ep)))\n","print(np.sum((long_ep <= long_out)))\n","print(len((long_ep <= long_out)))"],"metadata":{"id":"Q_wH04vCJzYu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def kde_plot_v2(v, c, kde_factor=0.15, num_samples=100):\n","\n","  # start_0 = time.time()\n","  kde = stats.gaussian_kde(v,weights=c,bw_method=kde_factor)\n","  kdx = np.linspace(v.min(),v.max(),num_samples)\n","  kdy = kde(kdx)\n","  ticks_per_sample = (kdx.max() - kdx.min()) / num_samples\n","  # print(\"ticks_per_sample :\", ticks_per_sample)  # sample 당 가격\n","  # print(\"kdy elapsed_time :\", time.time() - start_0)\n","\n","  peaks,_ = signal.find_peaks(kdy)\n","  pkx = kdx[peaks]\n","  pky = kdy[peaks]\n","  print(\"pkx :\", pkx)\n","\n","  # plt.figure(figsize=(10,5))\n","  plt.hist(v, weights=c, bins=num_samples, alpha=.8, edgecolor='black')\n","  plt.plot(kdx, kdy, color='white')\n","  plt.plot(pkx, pky, 'bo', color='yellow')\n","  # plt.show()\n"],"metadata":{"id":"YlENTUSXhBfa"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def get_max_outg(open_side, config, ohlc_list, obj, tpout_arr, rtc_gap):\n","\n","    h, l = ohlc_list[1:3]    \n","    en_p, _, en_idxs, _, open_idxs = obj\n","\n","    if open_side == \"SELL\":\n","      idxgs = [np.argwhere(l[int(en_idx) : int(en_idx + config.tr_set.bias_info_tick)] <= tpout_arr[i, 0]) for i, en_idx in enumerate(en_idxs)]\n","    else:\n","      idxgs = [np.argwhere(h[int(en_idx) : int(en_idx + config.tr_set.bias_info_tick)] >= tpout_arr[i, 0]) for i, en_idx in enumerate(en_idxs)]\n","\n","    min_idxg = np.array([gaps.min() if len(gaps) != 0 else np.nan for gaps in idxgs])  # get 최소 idx_gap from en_idx\n","    nan_idx = np.isnan(min_idxg) # .astype(int)\n","    min_idxg[nan_idx] = 0  # fill na 0, for idex summation below\n","\n","    if open_side == \"SELL\":\n","      max_outg = np.array([np.max(h[int(en_idx):int(en_idx + idx_gap + 1)]) - ep_ for en_idx, idx_gap, ep_ in zip(en_idxs, min_idxg, en_p)]) / rtc_gap\n","    else:\n","      max_outg = np.array([ep_ - np.min(l[int(en_idx):int(en_idx + idx_gap + 1)]) for en_idx, idx_gap, ep_ in zip(en_idxs, min_idxg, en_p)]) / rtc_gap # out_idx 포함\n","\n","    return max_outg[~nan_idx], open_idxs[~nan_idx].astype(int)  # true_bias 의 outg data 만 사용"],"metadata":{"id":"ZkbuBX1Ygzll"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["strat_version = config.strat_version\n","long_open_res = res_df['long_open_{}'.format(strat_version)].to_numpy().astype(bool)\n","\n","res_df['long_tp_{}'.format(strat_version)].to_numpy()[long_open_res]\n","res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res]\n","# res_df['long_ep_{}'.format(strat_version)].to_numpy()\n","# long_open_res\n","# res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res]\n","# np.sum(res_df['long_tp_{}'.format(strat_version)].to_numpy()[long_open_res] <= res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res])\n","# res = res_df['long_tp_{}'.format(strat_version)].to_numpy()[long_open_res] > res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res]\n","res = res_df['long_tp_{}'.format(strat_version)].to_numpy()[long_open_res] <= res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res]\n","\n","print(res_df['long_tp_{}'.format(strat_version)].to_numpy()[long_open_res][res])\n","print(res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res][res])\n","print(len(res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res][res]))\n","\n","# res = res_df['long_tp_{}'.format(strat_version)].to_numpy() > res_df['long_ep_{}'.format(strat_version)].to_numpy()\n","# res = res_df['long_ep_{}'.format(strat_version)].to_numpy() > res_df['long_out_{}'.format(strat_version)].to_numpy()\n","\n","# print(res_df['long_tp_{}'.format(strat_version)].to_numpy()[res])\n","# print(res_df['long_ep_{}'.format(strat_version)].to_numpy()[res])\n","# print(res_df['long_out_{}'.format(strat_version)].to_numpy()[res])\n","# print(len(res_df['long_ep_{}'.format(strat_version)].to_numpy()[res]))\n","# print(len(res_df['long_out_{}'.format(strat_version)].to_numpy()[res]))\n","\n","# assert np.sum(res_df['long_tp_{}'.format(strat_version)].to_numpy()[long_open_res] <= res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res]) == 0\n","# assert np.sum(res_df['long_ep_{}'.format(strat_version)].to_numpy()[long_open_res] <= res_df['long_out_{}'.format(strat_version)].to_numpy()[long_open_res]) == 0"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mYQgnD9CgC8b","executionInfo":{"status":"ok","timestamp":1648380698566,"user_tz":-540,"elapsed":479,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"e316919a-0e22-4266-ef24-185284cc8cb5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[ 390.58  387.91  344.81  346.25  334.7   351.81  366.07  367.09  372.83  372.08  384.92  387.79  374.12  365.82  364.87  359.06  386.58  381.46  384.71  385.    383.9   384.18  381.18  369.86  373.5   374.17  341.4   344.5   345.29  342.93  343.49  340.7   320.3   345.3   349.59  355.    352.    354.    357.96  358.21  355.    352.47  355.18  346.41  347.14  348.54  346.62  348.28  347.38  348.19  351.74  352.98  339.87  339.64  339.99  339.46  349.97  368.    375.85  374.3   367.2   383.8   386.25  385.31  384.97  377.3   377.85  380.28  378.    365.92  366.9   367.9   368.6   369.61  368.48  369.09  372.72  379.    379.17  375.2   379.09  380.52  397.42  417.13  418.05  413.6   412.26  411.7   408.6   406.29  405.5   383.74  388.2   386.95  387.    386.97  387.86  378.69  383.58  459.06  437.    445.    445.99  464.27  463.1   464.96  463.3   456.76  463.89  462.3   458.31  459.37  461.31  470.28  475.    591.54  601.95  619.3   609.46  573.21  512.97  554.39  588.37  593.83  571.43  593.31  589.71  552.62  551.44  563.9   573.    568.68  562.72  556.82  565.49  581.    592.74  651.18  644.2   646.4   607.89  606.5   615.    612.8   614.27  582.76  610.64  704.97  753.49  741.36  736.2   996.   1694.7  1686.52 1859.07 1818.7  1892.84 1930.29 1959.36 1639.28 1565.   1565.   1565.   1565.   1565.   1565.   1565.   1565.   1565.   1565.   1711.55 1783.83 1821.46 1834.   1623.93 1979.92 2062.   2204.69 2527.76 2720.47 3532.96 3890.   2778.64 2600.   2331.29 2175.   2140.   1963.91 1753.24 1969.43 2045.5  2158.   2250.   2280.78 2316.37 3180.   3141.93 3276.   3243.   3271.   3329.56 3236.   3275.94 3184.99 3410.   3963.04 3305.   3260.94 3636.28 3419.99 3400.   3383.32 3558.82 3499.   3503.68 4528.   4579.46 4492.13 4231.98 4373.8  3794.77 4082.93 4055.41 3782.   3745.   3163.98 3227.16 3302.58 3105.25 3078.   2621.06 2548.   2619.76 3116.4 ]\n","[ 390.58  387.91  344.81  346.25  334.7   351.81  366.07  367.09  372.83  372.08  384.92  387.79  374.12  365.82  364.87  359.06  386.58  381.46  384.71  385.    383.9   384.18  381.18  369.86  373.5   374.17  341.4   344.5   345.29  342.93  343.49  340.7   320.3   345.3   349.59  355.    352.    354.    357.96  358.21  355.    352.47  355.18  346.41  347.14  348.54  346.62  348.28  347.38  348.19  351.74  352.98  339.87  339.64  339.99  339.46  349.97  368.    375.85  374.3   367.2   383.8   386.25  385.31  384.97  377.3   377.85  380.28  378.    365.92  366.9   367.9   368.6   369.61  368.48  369.09  372.72  379.    379.17  375.2   379.09  380.52  397.42  417.13  418.05  413.6   412.26  411.7   408.6   406.29  405.5   383.74  388.2   386.95  387.    386.97  387.86  378.69  383.58  459.06  437.    445.    445.99  464.27  463.1   464.96  463.3   456.76  463.89  462.3   458.31  459.37  461.31  470.28  475.    591.54  601.95  619.3   609.46  573.21  512.97  554.39  588.37  593.83  571.43  593.31  589.71  552.62  551.44  563.9   573.    568.68  562.72  556.82  565.49  581.    592.74  651.18  644.2   646.4   607.89  606.5   615.    612.8   614.27  582.76  610.64  704.97  753.49  741.36  736.2   996.   1694.7  1686.52 1859.07 1818.7  1892.84 1930.29 1959.36 1639.28 1565.   1565.   1565.   1565.   1565.   1565.   1565.   1565.   1565.   1565.   1711.55 1783.83 1821.46 1834.   1623.93 1979.92 2062.   2204.69 2527.76 2720.47 3532.96 3890.   2778.64 2600.   2331.29 2175.   2140.   1963.91 1753.24 1969.43 2045.5  2158.   2250.   2280.78 2316.37 3180.   3141.93 3276.   3243.   3271.   3329.56 3236.   3275.94 3184.99 3410.   3963.04 3305.   3260.94 3636.28 3419.99 3400.   3383.32 3558.82 3499.   3503.68 4528.   4579.46 4492.13 4231.98 4373.8  3794.77 4082.93 4055.41 3782.   3745.   3163.98 3227.16 3302.58 3105.25 3078.   2621.06 2548.   2619.76 3116.4 ]\n","234\n"]}]},{"cell_type":"code","source":["# fig, axs=plt.subplots(1,2,sharey=True,tight_layout=True)\n","# axs[0].hist(short_max_outg,bins=100)\n","# axs[1].hist(abs_ratio_5T[short_outg_open_idx],bins=100)\n","# plt.show()"],"metadata":{"id":"57mFruHtCmmh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def kde_plot(plot_data, kde_factor=0.15, num_samples=100):\n","  v, c = np.unique(plot_data, return_counts=True)  \n","\n","  # start_0 = time.time()\n","  kde = stats.gaussian_kde(v,weights=c,bw_method=kde_factor)\n","  kdx = np.linspace(v.min(),v.max(),num_samples)\n","  kdy = kde(kdx)\n","  ticks_per_sample = (kdx.max() - kdx.min()) / num_samples\n","  # print(\"ticks_per_sample :\", ticks_per_sample)  # sample 당 가격\n","  # print(\"kdy elapsed_time :\", time.time() - start_0)\n","\n","  peaks,_ = signal.find_peaks(kdy)\n","  pkx = kdx[peaks]\n","  pky = kdy[peaks]\n","\n","  # plt.figure(figsize=(10,5))\n","  plt.hist(v, weights=c, bins=num_samples, alpha=.8, edgecolor='black')\n","  plt.plot(kdx, kdy, color='white')\n","  plt.plot(pkx, pky, 'bo', color='yellow')\n","  # plt.show()\n"],"metadata":{"id":"40MdGjCY1YtH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["v, c = np.unique(long_tpg_plot, return_counts=True)"],"metadata":{"id":"v2k6D7UceIK4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["kde_factor = 0.15\n","num_samples = 100\n","\n","start_0 = time.time()\n","kde = stats.gaussian_kde(v,weights=c,bw_method=kde_factor)\n","kdx = np.linspace(v.min(),v.max(),num_samples)\n","kdy = kde(kdx)\n","ticks_per_sample = (kdx.max() - kdx.min()) / num_samples\n","print(\"ticks_per_sample :\", ticks_per_sample)  # sample 당 가격\n","print(\"kdy elapsed_time :\", time.time() - start_0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1648269301273,"user_tz":-540,"elapsed":424,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"991eb570-3633-49b7-9a91-02cb5d4fba43","id":"bJe1fSGFdUcj"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["ticks_per_sample : 0.047098781436344224\n","kdy elapsed_time : 0.013733863830566406\n"]}]},{"cell_type":"code","source":["peaks,_ = signal.find_peaks(kdy)\n","pkx = kdx[peaks]\n","pky = kdy[peaks]\n","\n","plt.figure(figsize=(10,5))\n","plt.hist(v, weights=c, bins=num_samples, alpha=.8, edgecolor='black')\n","plt.plot(kdx, kdy, color='white')\n","plt.plot(pkx, pky, 'bo', color='yellow')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":320},"executionInfo":{"status":"ok","timestamp":1648269365137,"user_tz":-540,"elapsed":954,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"db5fd5b3-4617-42f9-877c-c4b9b82adcef","id":"1Cby5teZdUcj"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 720x360 with 1 Axes>"],"image/png":"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\n"},"metadata":{}}]},{"cell_type":"code","source":["def max_tpout_gap(open_side, ohlc_list, obj_, rtc_gap):  # much faster\n","    if type(obj_) == list:\n","        obj_ = list(zip(*obj_))\n","\n","    h, l = ohlc_list[1:3]\n","\n","    if open_side == \"SELL\":\n","      max_tpg = np.array([ep_ - np.min(l[int(iin):int(iout + 1)]) for ep_, _, iin, iout in obj_]) / rtc_gap # out 포함\n","      max_outg = np.array([np.max(h[int(iin):int(iout + 1)]) - ep_ for ep_, _, iin, iout in obj_]) / rtc_gap\n","    else:\n","      max_tpg = np.array([np.max(h[int(iin):int(iout + 1)]) - ep_ for ep_, _, iin, iout in obj_]) / rtc_gap\n","      max_outg = np.array([ep_ - np.min(l[int(iin):int(iout + 1)]) for ep_, _, iin, iout in obj_]) / rtc_gap\n","\n","    return max_tpg, max_outg"],"metadata":{"id":"CfiSD0uwcNIZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["short_open_res = np.ones(len(res_df))\n","\n","strat_version = config.strat_version\n","\n","short_rtc_1_col, short_rtc_0_col, short_rtc_gap_col = 'short_rtc_1_{}'.format(strat_version), 'short_rtc_0_{}'.format(strat_version), 'short_rtc_gap_{}'.format(strat_version) \n","long_rtc_1_col, long_rtc_0_col, long_rtc_gap_col = 'long_rtc_1_{}'.format(strat_version), 'long_rtc_0_{}'.format(strat_version), 'long_rtc_gap_{}'.format(strat_version) \n","\n","short_rtc_1_col, short_rtc_0_col, short_rtc_gap_col = 'short_rtc_1_{}'.format(strat_version), 'short_rtc_0_{}'.format(strat_version), 'short_rtc_gap_{}'.format(strat_version) \n","long_rtc_1_col, long_rtc_0_col, long_rtc_gap_col = 'long_rtc_1_{}'.format(strat_version), 'long_rtc_0_{}'.format(strat_version), 'long_rtc_gap_{}'.format(strat_version) \n","\n","data_cols = ['open', 'high', 'low']   # Todo - public_indi 이전에 해야할지도 모름 # 'close', 'haopen', 'hahigh', 'halow', 'haclose'\n","rtc_cols = [short_rtc_1_col, short_rtc_0_col, short_rtc_gap_col, long_rtc_1_col, long_rtc_0_col, long_rtc_gap_col]   # Todo - public_indi 이전에 해야할지도 모름\n","\n","short_rtc_1_, short_rtc_0_, short_rtc_gap_, long_rtc_1_, long_rtc_0_, long_rtc_gap_ = [res_df[col_].to_numpy() for col_ in rtc_cols]\n","open, high, low = [res_df[col_].to_numpy() for col_ in data_cols]\n","short_base = (short_rtc_1_ + short_rtc_0_) / 2\n","long_base = (long_rtc_1_ + long_rtc_0_) / 2\n","# back_ha_o = res_df['haopen'].shift(1).to_numpy()\n","# back_ha_c = res_df['haclose'].shift(1).to_numpy()\n","\n","touch_period = 50\n","# short_open_res *= (back_ha_c >= back_ha_o) & (ha_o > ha_c)\n","# short_open_res *= ha_o == ha_h\n","# short_open_res *= np_timeidx % tf_entry == tf_entry - 1     \n","# short_a_touch = pd.Series(np.where(high >= short_rtc_0_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()  # min -> max\n","short_a_touch = pd.Series(np.where((high >= short_base_b) & (short_base_b >= open), np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).min().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨\n","short_b_touch = pd.Series(np.where(low <= short_rtc_1_, np.arange(len_df), np.nan)).rolling(touch_period, min_periods=1).max().to_numpy()   # min 으로 하면 a 이전에 b 있는건 모두 제외하게됨\n","\n","short_a_touch_line = get_line(short_a_touch, short_rtc_0_)\n","short_b_touch_line = get_line(short_b_touch, short_rtc_1_)\n","short_en_p = (short_a_touch_line + short_b_touch_line) / 2\n","short_base_b = get_line(short_b_touch, short_base)\n","short_rtc_gap_b = get_line(short_b_touch, short_rtc_gap_)\n","short_open_res *= (high >= short_base_b) & (short_base_b >= open) & (short_a_touch < short_b_touch) & (short_base_b + config.loc_set.point.base_gap * short_rtc_gap_b >= short_base)\n","\n","res_df['short_open_{}'.format(strat_version)] = short_open_res"],"metadata":{"id":"r82KfqFqi9tp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# short_en_p == short_base_b\n","print(short_en_p[~np.isnan(short_en_p)])\n","print(short_base_b[~np.isnan(short_en_p)])\n","\n","np.sum((short_en_p[~np.isnan(short_en_p)] == short_base_b[~np.isnan(short_en_p)]) == 0) # => why ..?"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CgD4-ZKW11MQ","executionInfo":{"status":"ok","timestamp":1647925782107,"user_tz":-540,"elapsed":366,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"c126aabb-cb41-4392-a80c-53971b146c2c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[ 377.545  378.085  379.015 ... 3148.91  3148.91  3148.91 ]\n","[ 377.545  378.085  379.015 ... 3148.91  3148.91  3148.91 ]\n"]},{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":29}]},{"cell_type":"code","source":["true_idx = short_open_res == 1\n","\n","# print(((short_a_touch_line + short_b_touch_line) / 2)[true_idx][-100:])\n","print(short_en_p[true_idx][-100:])\n","# print(short_a_touch_line[true_idx][-100:])\n","\n","print(short_a_touch_line)\n","print(short_a_touch)\n","print(short_rtc_0_)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AIt9z1NRj5bJ","executionInfo":{"status":"ok","timestamp":1647565975814,"user_tz":-540,"elapsed":310,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"c1b83639-7041-4745-dacd-d9cff49a205d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[2934.59  2934.59  3028.59  3028.59  3028.59  3026.075 3026.075 3016.09  3014.67  3014.4   3014.4   3014.4   3014.4   3014.4   3014.4   3014.395 3014.315 3014.315 3030.235 3030.235 3030.235 3030.235 3051.18  3051.18  3051.18  3077.275 3076.77  3090.945 3105.1   3105.1   3105.1   3105.1   3105.1   3105.1   3099.205 3099.205 3099.205 3105.495 3105.495 3109.615 3127.43  3123.795 3123.795 3123.795 3112.695 3122.715 3122.715 3122.715 3122.715 3115.2   3114.93  3097.035 3115.31  3115.31  3114.245 3114.15  3114.15  3114.15  3112.2   3110.75  3110.75  3112.16  3112.16  3134.39  3134.39  3134.39  3127.905 3127.905 3127.905 3127.905 3128.595 3128.595 3138.59  3138.59  3147.47  3134.205 3133.04  3134.155 3131.105 3131.105 3131.105 3065.94  3065.94  3065.94  3065.51  3068.    3079.33  3079.33  3079.33  3099.805 3169.595 3169.595 3169.595 3169.04  3140.395 3140.395 3140.395 3148.91  3148.91  3148.91 ]\n","[    nan     nan     nan ... 3158.68 3158.68 3158.68]\n","[    nan     nan     nan ... 763812. 763812. 763812.]\n","[ 388.18  388.18  388.18 ... 3158.68 3158.68 3158.68]\n"]}]},{"cell_type":"code","source":["short_a_touch_line = get_line(short_a_touch, short_rtc_0_)\n","short_b_touch_line = get_line(short_b_touch, short_rtc_1_)\n","short_en_p = (short_a_touch_line + short_b_touch_line) / 2\n","\n","# print(((short_a_touch_line + short_b_touch_line) / 2)[true_idx][-100:])\n","# print(short_en_p[true_idx][-100:])\n","\n","print(short_a_touch_line)\n","print(short_a_touch)\n","print(short_rtc_0_)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GXbSWec4ik3g","executionInfo":{"status":"ok","timestamp":1647565931392,"user_tz":-540,"elapsed":2,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"547b0fc1-0e35-4387-e891-a3af42c18476"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[    nan     nan     nan ... 3158.68 3158.68 3158.68]\n","[    nan     nan     nan ... 763812. 763812. 763812.]\n","[ 388.18  388.18  388.18 ... 3158.68 3158.68 3158.68]\n"]}]},{"cell_type":"code","source":["def get_line(touch, rtc_):\n","  touch_copy = touch.copy()\n","  touch_line = rtc_.copy()\n","\n","  nan_idx = np.isnan(touch_copy)\n","  touch_copy[nan_idx] = 0   # for indexing array\n","  touch_line[touch_copy.astype(int)]\n","  touch_line[nan_idx] = np.nan   # for true comp.\n","\n","  return touch_line"],"metadata":{"id":"fx4iA-T1k6GS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# print(short_b_touch[-100:])\n","# print(short_base_b[-100:])\n","true_idx = short_open_res == 1\n","short_a_touch_line = get_line(short_a_touch, short_rtc_0_)\n","short_b_touch_line = get_line(short_b_touch, short_rtc_1_)\n","\n","print(len(short_a_touch_line))\n","print(len(short_b_touch_line))\n","print(((short_a_touch_line + short_b_touch_line) / 2)[true_idx][-100:])\n","\n","print(short_a_touch_line[true_idx][-100:])\n","print(short_b_touch_line[true_idx][-100:])\n","print(short_open_res[true_idx][-100:])\n","print(short_en_p[true_idx][-100:])"],"metadata":{"id":"Pk8i59oM4CFZ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##### partial"],"metadata":{"id":"8b4SbvPrAPR1"}},{"cell_type":"code","source":["def get_pr_v2(open_side, h, l, obj, tpout, lvrg, fee, p_ranges, p_qty, inversion=False):  # --> 여기서 사용하는 ex_p = ex_p\n","\n","    en_p = obj[0]\n","    # ex_p = obj[1]\n","    tp, out = np.split(tpout, 2, axis=1)\n","    len_p = len(p_ranges)\n","    en_ps, tps, outs, lvrgs, fees = [np.tile(arr_, (1, len_p)) for arr_ in [en_p, tp, out, lvrg, fee]]\n","    \n","    np_obj = np.array(obj).T[0]\n","    assert len(np_obj.shape) == 2\n","    \n","    # iin == iout 인 경우 분리\n","    en_idx = np_obj[:, 2]\n","    ex_idx = np_obj[:, 3]\n","    equal_idx = en_idx == ex_idx\n","        \n","    if open_side == \"SELL\":\n","        p_tps = en_ps - (en_ps - tps) * p_ranges\n","        # min_low = np.array([np.min(l[int(iin):int(iout + 1)]) for _, _, iin, iout in list(zip(*obj[:4]))]).reshape(-1, 1)  # -> deprecated, start from iin + 1\n","        min_low = np.full_like(en_p, np.nan)\n","        min_low[~equal_idx] = np.array([np.min(l[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        tp_idx = np.tile(min_low, (1, len_p)) <= p_tps\n","    else:\n","        p_tps = en_ps + (tps - en_ps) * p_ranges\n","        # max_high = np.array([np.max(h[int(iin):int(iout + 1)]) for _, _, iin, iout in list(zip(*obj[:4]))]).reshape(-1, 1)\n","        max_high = np.full_like(en_p, np.nan)\n","        max_high[~equal_idx] = np.array([np.max(h[int(iin + 1):int(iout + 1)]) for _, _, iin, iout in np_obj[~equal_idx, :4]]).reshape(-1, 1)\n","        tp_idx = np.tile(max_high, (1, len_p)) >= p_tps\n","\n","    ex_ps = outs.copy()\n","    ex_ps[tp_idx] = p_tps[tp_idx]\n","\n","    if open_side == \"SELL\":\n","        if not inversion:\n","            pr = ((en_ps / ex_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","        else:\n","            pr = ((ex_ps / en_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","    else:\n","        if not inversion:\n","            pr = ((ex_ps / en_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","        else:\n","            pr = ((en_ps / ex_ps - fees - 1) * lvrgs * p_qty).sum(axis=1) + 1\n","\n","    return pr.reshape(-1, 1)"],"metadata":{"id":"M4MB0mryCiHC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def get_pr(open_side, en_p, ex_p, lvrg, fee, inversion=False):\n","  assert len(ex_p) == len(en_p)\n","  if open_side == \"SELL\":\n","\n","    if not inversion:\n","      pr = (en_p / ex_p - fee - 1) * lvrg + 1\n","    else:\n","      pr = (ex_p / en_p - fee - 1) * lvrg + 1\n","  else:\n","    if not inversion:\n","      pr = (ex_p / en_p - fee - 1) * lvrg + 1\n","    else:\n","      pr = (en_p / ex_p - fee - 1) * lvrg + 1\n","\n","  return pr\n"],"metadata":{"id":"2QuLj5hrjD9y"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 0. obj 를 out 과 tp 로 구분해야할 것 - pr 이용\n","# 1. out 을 한 경우\n","#   a. max high (long) 조사 (= max_tpg)\n","#     i. tp 단계별로 \"비교\" 진행, 만족하면 + profit (수정)\n","#     ii. max_gap 과 \n","# 2. tp 를 한 경우\n","#   a. tp 단계별로 + profit (수정)\n","\n","# tp 를 했는데 out 처리 된 경우 (fee 덕분에)\n","tp_idx = (long_pr > 1).ravel()\n","print(long_obj[0][tp_idx])\n","print(long_obj[0][~tp_idx])"],"metadata":{"id":"4whYwQmQ9oY1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# ex_ps = [en_p + (ex_p - en_p) * p_range for p_range in p_ranges]"],"metadata":{"id":"42V_JP1oGe4c"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# ------ vectorization for partial ------ # \n","en_p = long_obj[0]\n","ex_p = long_obj[1]\n","# tp = long_tpout_arr[:, 0]\n","# out = long_tpout_arr[:, 1]\n","tp, out = np.split(long_tpout_arr, 2, axis=1)\n","# tp = tp.ravel()\n","\n","# print(en_p)\n","# print(tp)\n","# print(out.shape)\n","\n","len_p = len(p_ranges)\n","en_ps = np.tile(en_p, (1, len_p))\n","tps = np.tile(tp, (1, len_p))\n","outs = np.tile(out, (1, len_p))\n","lvrgs = np.tile(long_lvrg_arr, (1, len_p))\n","fees = np.tile(long_fee_arr, (1, len_p))\n","print(lvrgs.shape)\n","print(fees.shape)\n","\n","p_tps = en_ps + (tps - en_ps) * p_ranges\n","\n","max_high = np.array([np.max(h[int(iin):int(iout + 1)]) for _, _, iin, iout in list(zip(*long_obj[:4]))]).reshape(-1, 1) # / rtc_gap\n","res = np.tile(max_high, (1, len_p)) >= p_tps\n","\n","ex_ps = outs.copy()\n","ex_ps[res] = p_tps[res]   # max_high 기준으로 체결된 만큼만 p_tp 로 변환, \"나머지는 outs\"\n","\n","# print(tps[0]))\n","# np.sum(tps1 != tps2)  # 0\n","# print(outs[0])\n","# print(outs)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"joaIDVNLqFqz","executionInfo":{"status":"ok","timestamp":1648451438059,"user_tz":-540,"elapsed":353,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"27ae7b8e-5f4e-4641-a062-746f5307bf7d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(1724, 1)\n","(1724, 1)\n"]}]},{"cell_type":"code","source":["h, l = ohlc_list[1:3]    \n","\n","en_idx = long_obj[2]\n","ex_idx = long_obj[3]\n","\n","# print(en_idx[:5])\n","# print(ex_idx[:5])\n","# np.sum(en_idx == ex_idx)\n","equal_idx = en_idx == ex_idx\n","equal_idx"],"metadata":{"id":"QI6uXYjtVWrw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["p_ranges = [1/3, 2/3, 1]\n","p_qty = [0.25, 0.25, 0.5]\n","p_ranges = [1] # [1/3, 2/3, 1] [1]\n","p_qty =  [1] # [0.25, 0.25, 0.5] [1]\n","# long_ppr[tp_idx] = tp_ppr(OrderSide.BUY, *long_obj[:2], p_ranges, p_qty, long_lvrg_arr, long_fee_arr, inversion)[tp_idx]"],"metadata":{"id":"TO3dF_3yum4s"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# tp_pr = (tps / en_ps - fees - 1) * lvrgs * p_qty\n","# tp_pr.sum(axis=1) + 1\n","\n","# out_pr = (outs / en_ps - fees - 1) * lvrgs * p_qty\n","# # print(out_pr)\n","# print(out_pr.sum(axis=1) + 1)\n","\n","pr = (ex_ps / en_ps - fees - 1) * lvrgs * p_qty\n","print(pr.sum(axis=1) + 1)\n","print(np.sum(pr, axis=1).reshape(-1, 1) + 1)\n","\n","pr = (ex_p / en_p - long_fee_arr - 1) * long_lvrg_arr\n","print((pr + 1).ravel()) \n","\n","print(np.sum((pr + 1).ravel() != (pr.sum(axis=1) + 1)))  # 0\n","get_pr_v2(OrderSide.BUY, h, l, long_obj, long_tpout_arr, long_lvrg_arr, long_fee_arr, p_ranges, p_qty, inversion)\n","get_pr_v2(OrderSide.SELL, h, l, short_obj, short_tpout_arr, short_lvrg_arr, short_fee_arr, p_ranges, p_qty, inversion)"],"metadata":{"id":"8LeNbPlJrIN-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pr = get_pr(OrderSide.SELL, *short_obj[:2], short_lvrg_arr, short_fee_arr, inversion)"],"metadata":{"id":"GNm_lN1-kJPW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(prs[:10])\n","print(pr[:10])\n","# print(np.sum(prs, axis=0))\n","# print((prs.sum(axis=0)))"],"metadata":{"id":"8il3UnQ6oyjC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["loss_tp_idx = (~tp_idx) * (res3 > 2)\n","print(len(res3[loss_tp_idx])) # tp 했으나, fee 때문에 out_idx 로 지정된 case 로 예상 - 8\n","\n","print(en_p[loss_tp_idx])\n","print(ex_p[loss_tp_idx])\n","ex_p[loss_tp_idx] / en_p[loss_tp_idx] - long_fee_arr.ravel()[loss_tp_idx]"],"metadata":{"id":"WOEmwtPErNgz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# ------ 이래서, 함수로 먼저 작성하면 debugging 하기 곤란하구나 ------ #\n","en_p = long_obj[0].ravel()\n","ex_p = long_obj[1].ravel()\n","# tp = long_tpout_arr[:, 0]\n","# out = long_tpout_arr[:, 1]\n","tp, out = np.split(long_tpout_arr, 2, axis=1)\n","tp = tp.ravel()\n","\n","print(en_p)\n","print(tp)\n","# print(out.shape)\n","\n","tps = np.vstack(np.array([en_p + (tp - en_p) * p_range for p_range in p_ranges])).T  # tp_ppr 로 나눌게 아니라, ex_ps 를 tps, replaced_outs 로 채우면 되지 않을까\n","outs = np.tile(out, (1, len(p_ranges)))\n","print(tps[0])\n","print(outs[0])\n","print(outs)"],"metadata":{"id":"A_Jn5zMYCtH0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["outs2 = outs.copy()\n","outs2[res] = tps[res]"],"metadata":{"id":"g5uLwyYnoApS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["h, l = ohlc_list[1:3]    \n","# max_high = np.array([np.max(h[int(iin):int(iout + 1)]) - ep_ for ep_, _, iin, iout in list(zip(*long_obj[:4]))]) # / rtc_gap\n","max_high = np.array([np.max(h[int(iin):int(iout + 1)]) for _, _, iin, iout in list(zip(*long_obj[:4]))]).reshape(-1, 1) # / rtc_gap\n","res = np.tile(max_high, (1, 3)) > tps"],"metadata":{"id":"r7koyseNF6J8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# tps\n","en_ps = np.tile(en_p, (1, len(p_ranges)))\n","print(en_ps.shape)\n","\n","# tps * p_qty"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"swCpmd0Jpfz4","executionInfo":{"status":"ok","timestamp":1648439562545,"user_tz":-540,"elapsed":365,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"6919faf2-a6a6-4adf-ad3f-6a9fbb6c05e2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(1, 46536)\n"]}]},{"cell_type":"code","source":["# print(max_high.shape)\n","# print(np.tile(max_high, (1, 3)).shape)\n","# print(tps.shape)\n","# print(res)\n","\n","# print(np.insert(res, 0, np.full_like(max_high, True), axis=1))\n","res2 = np.insert(res, 0, np.array([True]), axis=1)\n","# print(res2)\n","\n","res3 = np.array([np.argwhere(arr_).max() for arr_ in res2])  # 조건에 맞는 최대 index"],"metadata":{"id":"FrldeXRFGUD5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# res3\n","# tps\n","\n","# # 예로, res3 index = 2, -> 0, 1 까지는 tp + 2 는 out => ex_ps 에 들어있는 ex_p 가\n","# # 즉, outs * p_ranges 만큼의 array 에 res3_index 만틈 tp 로 채움\n","# if not inversion:\n","#   pr = np.array([(ex_p_ / en_p - fee - 1) * lvrg * qty for ex_p_, qty in zip(ex_ps, p_qty)]).sum(axis=0) + 1"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kPOrz6grkHI-","executionInfo":{"status":"ok","timestamp":1648438048923,"user_tz":-540,"elapsed":354,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"74916754-5f95-45aa-8a9c-1eff7e4639ba"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1, 1, 3, ..., 1, 0, 1])"]},"metadata":{},"execution_count":153}]},{"cell_type":"code","source":["long_ppr = long_pr.copy()"],"metadata":{"id":"wHnELMNyAc7D"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(long_pr[tp_idx])\n","print(long_ppr[tp_idx])\n","# print(np.sum(long_ppr[tp_idx] != long_pr[tp_idx]))"],"metadata":{"id":"w1PONy6jCJLQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["rtc_ranges = [1] # [1/3, 2/3, 1] * "],"metadata":{"id":"4WSFaUgg_jRd"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_ratio=0.3\n","plot_is=1\n","\n","open_idx = open_info_df.index.to_numpy()\n","len_df = len(res_df)\n","s_idx = (open_idx < int(len_df * (1 - test_ratio))) == plot_is\n","s_open_info_df = open_info_df[s_idx]\n","s_open_idx = open_idx[s_idx]\n","\n","open_info_list = [s_open_info_df[col_].to_numpy() for col_ in s_open_info_df.columns]\n","side_arr, zone_arr, id_arr, id_idx_arr = open_info_list\n","\n","# ------------ get paired_res ------------ #\n","start_0 = time.time()\n","paired_res = en_ex_pairing(res_df, s_open_idx, open_info_list, ohlc_list, point2_list, market_data_list, config_list, np_timeidx, funcs)\n","# valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr = paired_res\n","print(\"en_ex_pairing elapsed time :\", time.time() - start_0)  #  0.37 --> 0.3660471439361572 --> 0.21(lesser if)\n","\n","# ------------ idep_plot ------------ #\n","start_0 = time.time()\n","h, l = ohlc_list[1:3]\n","sample_ratio=1 - test_ratio\n","if sample_ratio is not None:\n","  sample_len = int(len_df * sample_ratio)\n","else:\n","  sample_len = len_df\n","\n","# ------ short & long data preparation ------ #\n","# start_0 = time.time()\n","valid_openi_arr, pair_idx_arr, pair_price_arr, lvrg_arr, fee_arr, tpout_arr, bias_arr = paired_res    \n","assert len(valid_openi_arr) != 0, \"assert len(valid_openi_arr) != 0\"    \n","short_valid_openi_idx = np.where(side_arr[valid_openi_arr] == OrderSide.SELL)[0]  # valid_openi_arr 에 대한 idx, # side_arr,\n","long_valid_openi_idx = np.where(side_arr[valid_openi_arr] == OrderSide.BUY)[0]\n","\n","valid_open_idx = open_idx[valid_openi_arr].reshape(-1, 1)\n","\n","short_obj = np.hstack((pair_price_arr, pair_idx_arr, valid_open_idx))[short_valid_openi_idx]\n","long_obj = np.hstack((pair_price_arr, pair_idx_arr, valid_open_idx))[long_valid_openi_idx]\n","both_obj = np.vstack((short_obj, long_obj))\n","print(\"short_obj.shape :\", short_obj.shape)\n","print(\"long_obj.shape :\", long_obj.shape)\n","\n","short_obj, long_obj, both_obj = [np.split(obj_, 5, axis=1) for obj_ in [short_obj, long_obj, both_obj]]\n","\n","short_lvrg_arr, long_lvrg_arr = [lvrg_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","short_fee_arr, long_fee_arr = [fee_arr[openi_idx_].reshape(-1, 1) for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","short_tpout_arr, long_tpout_arr = [tpout_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]\n","short_bias_arr, long_bias_arr = [bias_arr[openi_idx_] for openi_idx_ in [short_valid_openi_idx, long_valid_openi_idx]]"],"metadata":{"id":"qjpDlxCoInLJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(short_pr.shape)\n","short_total_pr = to_total_pr(len_df, short_pr, short_obj[-2])"],"metadata":{"id":"-sDSxVR91Vit"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plt.style.use(['dark_background', 'fast'])\n","fig = plt.figure(figsize=(24, 8))\n","gs = gridspec.GridSpec(nrows=2,  # row 몇 개\n","                        ncols=3,  # col 몇 개\n","                        height_ratios=[10, 1]\n","                        # height_ratios=[10, 10, 1]\n","                        )\n","gs_idx = 0\n","signi = 0\n","title_position=(0.5, 0.5)\n","fontsize=15\n","\n","short_true_bias_idx = short_bias_arr[:, 0] <= short_bias_arr[:, 1] # info, threshold (등호의 유무가 매우 유의미함)\n","long_true_bias_idx = long_bias_arr[:, 0] >= long_bias_arr[:, 1]\n","\n","# ------ plot_data ------ #\n","try:\n","  # start_0 = time.time()\n","  short_pr = get_pr_v2(OrderSide.SELL, short_obj, short_tpout_arr, short_lvrg_arr, short_fee_arr, p_ranges, p_qty, inversion)\n","  print(\"get_pr_v2 pass\")\n","  short_total_pr = to_total_pr(len_df, short_pr, short_obj[-2])\n","  print(\"to_total_pr pass\")\n","  short_cum_pr = np.cumprod(short_total_pr)\n","  short_liqd = liquidation(OrderSide.SELL, h, short_obj[:4], short_lvrg_arr, short_fee_arr)\n","  short_prcn, short_rc = precision(short_pr, short_true_bias_idx), recall(short_true_bias_idx)\n","  if signi:\n","    short_idep_res_obj = (short_prcn, short_rc) + get_res_info_nb_v2(sample_len, short_pr, short_total_pr, short_cum_pr, short_liqd)\n","  else:\n","    gs_idx = plot_info_v4(gs, gs_idx, sample_len, short_pr, short_total_pr, short_cum_pr, short_liqd, short_prcn, short_rc, short_lvrg_arr[-1], title_position, fontsize)\n","  # print(\"elapsed time :\", time.time() - start_0)\n","\n","except Exception as e:\n","  gs_idx += 1\n","  print(\"error in short plot_data :\", e)\n","\n","try:\n","  # start_0 = time.time()\n","  long_pr = get_pr_v2(OrderSide.BUY, long_obj, long_tpout_arr, long_lvrg_arr, long_fee_arr, p_ranges, p_qty, inversion)\n","  long_total_pr = to_total_pr(len_df, long_pr, long_obj[-2])\n","  long_cum_pr = np.cumprod(long_total_pr)\n","  long_liqd = liquidation(OrderSide.BUY, l, long_obj[:4], long_lvrg_arr, long_fee_arr)\n","  long_prcn, long_rc = precision(long_pr, long_true_bias_idx), recall(long_true_bias_idx)\n","  if signi:\n","    long_idep_res_obj = (long_prcn, long_rc) + get_res_info_nb_v2(sample_len, long_pr, long_total_pr, long_cum_pr, long_liqd)\n","  else:\n","    gs_idx = plot_info_v4(gs, gs_idx, sample_len, long_pr, long_total_pr, long_cum_pr, long_liqd, long_prcn, long_rc, long_lvrg_arr[-1], title_position, fontsize)\n","  # print(\"elapsed time :\", time.time() - start_0)\n","except Exception as e:\n","  gs_idx += 1\n","  print(\"error in long plot_data :\", e)\n","\n","try:\n","  # start_0 = time.time()\n","  both_pr = np.vstack((short_pr, long_pr))  # for 2d shape, obj 를 1d 로 만들지 않는 이상, pr 은 2d 유지될 것\n","  both_total_pr = to_total_pr(len_df, both_pr, both_obj[-2])\n","  both_cum_pr = np.cumprod(both_total_pr)\n","  both_liqd = min(short_liqd, long_liqd)\n","  both_true_bias_idx = np.hstack((short_true_bias_idx, long_true_bias_idx))  # for 1d shape\n","  both_prcn, both_rc = precision(both_pr, both_true_bias_idx), recall(both_true_bias_idx)\n","  if signi:\n","    both_idep_res_obj = (both_prcn, both_rc) + get_res_info_nb_v2(sample_len, both_pr, both_total_pr, both_cum_pr, both_liqd)\n","  else:\n","    gs_idx = plot_info_v4(gs, gs_idx, sample_len, both_pr, both_total_pr, both_cum_pr, both_liqd, both_prcn, both_rc, lvrg_arr[-1], title_position, fontsize)\n","  # print(\"elapsed time :\", time.time() - start_0)\n","except Exception as e:\n","  gs_idx += 1\n","  print(\"error in both plot_data :\", e)\n"],"metadata":{"id":"Av-_aSFrpmrN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["if not signi:\n","    for obj, cum_pr in zip([short_obj, long_obj, both_obj], [short_cum_pr, long_cum_pr, both_cum_pr]):\n","      try:\n","        # start_0 = time.time()\n","        gs_idx = frq_dev_plot_v3(gs, gs_idx, len_df, sample_len, obj[-2], cum_pr[-1], fontsize)\n","        # print(\"elapsed time :\", time.time() - start_0)          \n","      except Exception as e:\n","        gs_idx += 1\n","        print(\"error in frq_dev_plot_v3 :\", e)\n","\n","    plt.show()\n","    plt.close()"],"metadata":{"id":"1Fyhq7RppAEj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["t_list = [1, 2]\n","t_list[:5] # 이게 되는구나.."],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qxuL0S9wq-ib","executionInfo":{"status":"ok","timestamp":1648121100587,"user_tz":-540,"elapsed":473,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"c1f7ff04-acc0-4d66-90be-8a6870ee8f9a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[1, 2]"]},"metadata":{},"execution_count":155}]},{"cell_type":"code","source":["def liquidation(open_side, data_, obj_, lvrg, fee):  # # 2.39 s ->  2.42 s per loop, (ep fee lvrg vectorize calc. 진행시)\n","    if type(obj_) == list:\n","        obj_ = list(zip(*obj_))\n","\n","    if open_side == \"SELL\":\n","        return np.min([(ep_ / np.max(data_[int(iin):int(iout + 1)]) - fee - 1) * lvrg + 1 for ep_, _, iin, iout in obj_]) # + 1 for zero-size array to reduction operation\n","    else:\n","        return np.min([(np.min(data_[int(iin):int(iout + 1)]) / ep_ - fee - 1) * lvrg + 1 for ep_, _, iin, iout in obj_])\n","    # if open_side == \"SELL\":\n","    #     return np.min([(ep_ / np.max(data_[int(iin):int(iout)]) - fee - 1) * lvrg + 1 for ep_, _, iin, iout in obj_])\n","    # else:\n","    #     return np.min([(np.min(data_[int(iin):int(iout)]) / ep_ - fee - 1) * lvrg + 1 for ep_, _, iin, iout in obj_])"],"metadata":{"id":"P5NzUYQct8LJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# short_bias_arr.shape\n","short_true_bias_idx = short_bias_arr[:, 0] < short_bias_arr[:, 1] # info, threshold\n","long_true_bias_idx = long_bias_arr[:, 0] > long_bias_arr[:, 1]"],"metadata":{"id":"r_4qlQjNI_Vl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# long_true_bias_idx\n","# np.hstack((short_true_bias_idx, long_true_bias_idx))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nOtoKX7fJUs6","executionInfo":{"status":"ok","timestamp":1646789605507,"user_tz":-540,"elapsed":340,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"b56e0cd9-46fd-4c3e-d85c-570aa18d3b52"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([False, False,  True,  True, False, False,  True,  True, False, False, False,  True, False,  True, False,  True, False,  True,  True,  True, False, False,  True,  True,  True, False, False,  True,  True, False,  True, False, False, False,  True, False, False,  True,  True, False, False,  True, False,  True,  True,  True,  True, False,  True,  True, False,  True,  True,  True, False, False,  True, False, False,  True,  True,  True,  True, False, False,  True, False,  True, False, False,  True, False, False, False,  True,  True,  True, False,  True, False, False,  True,  True, False, False, False,  True,  True, False,  True,  True,  True, False, False, False, False,  True, False, False,  True, False, False,  True,  True, False, False,  True,  True,  True,  True, False,  True, False,  True,  True, False, False,  True, False, False,  True,  True, False, False, False, False,  True,  True,  True, False, False, False,  True,  True, False, False,  True, False, False,  True,  True, False,  True, False, False, False,  True,  True, False,  True, False, False, False,  True,  True, False, False, False, False, False, False,  True, False,  True,  True,  True,  True,  True,  True, False,  True,  True,  True,  True,  True,  True,  True,  True, False,  True,  True, False, False, False, False,  True,  True,  True, False,  True,  True, False, False,  True,  True, False,  True, False, False,  True])"]},"metadata":{},"execution_count":127}]},{"cell_type":"code","source":["# print(len(long_pr))\n","# print(len(long_true_bias_idx))\n","print((long_pr.shape))\n","print((long_bias_arr.shape))\n","# print((long_true_bias_idx.shape))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"70wh4eysKqxw","executionInfo":{"status":"ok","timestamp":1647001266151,"user_tz":-540,"elapsed":436,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"d3e8b24f-e74e-415f-c7a9-20d8617d25c9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(9634, 1)\n","(9634, 2)\n"]}]},{"cell_type":"code","source":["print(len(long_pr[long_pr != 1]))\n","len(long_pr[long_pr > 1]) / len(long_pr[long_pr != 1])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OcR_qrEp7Rnu","executionInfo":{"status":"ok","timestamp":1647001306279,"user_tz":-540,"elapsed":348,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"3e8aa179-237a-48e8-a0d0-af56fa26bc5b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["9634\n"]},{"output_type":"execute_result","data":{"text/plain":["0.37315756695038405"]},"metadata":{},"execution_count":40}]},{"cell_type":"code","source":["print(np.sum(long_pr[long_true_bias_idx] > 1) / np.sum(long_true_bias_idx))\n","print(np.sum(long_true_bias_idx) / len(long_true_bias_idx))\n","# long_true_bias_pr = long_pr[long_true_bias_idx]\n","# len(long_true_bias_pr[long_true_bias_pr > 1])\n","# 30 / 66"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MkJS3UGONHJ8","executionInfo":{"status":"ok","timestamp":1646810691555,"user_tz":-540,"elapsed":3,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"aa99b628-93b5-4705-c27b-fe6f80f95df0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.39106145251396646\n","0.599163179916318\n"]}]},{"cell_type":"code","source":["print(get_recall(long_true_bias_idx))\n","print(get_precision(long_pr, long_true_bias_idx))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lvULyeNJKSeP","executionInfo":{"status":"ok","timestamp":1646788110286,"user_tz":-540,"elapsed":5,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"3b10bb5f-238e-4687-f38c-20037f2cded6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.5076923076923077\n","0.45454545454545453\n"]}]},{"cell_type":"code","source":["signi=False\n","if not signi:\n","    plt.style.use(['dark_background', 'fast'])\n","    fig = plt.figure(figsize=(24, 8))\n","    gs = gridspec.GridSpec(nrows=2,  # row 몇 개\n","                            ncols=3,  # col 몇 개\n","                            height_ratios=[10, 1]\n","                            # height_ratios=[10, 10, 1]\n","                            )\n","gs_idx = 0\n","title_position=(0.5, 0.5)\n","fontsize=15"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":33},"id":"Fs1RkHxQKjCX","executionInfo":{"status":"ok","timestamp":1646788777938,"user_tz":-540,"elapsed":349,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"491bcb64-df8e-4b20-a42f-b68e4c670a07"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1728x576 with 0 Axes>"]},"metadata":{}}]},{"cell_type":"code","source":["try:\n","  # start_0 = time.time()\n","  long_pr = get_pr(OrderSide.BUY, *long_obj[:2], long_lvrg_arr, long_fee_arr, inversion)\n","  long_total_pr = to_total_pr(len_df, long_pr, long_obj[-2])\n","  long_cum_pr = np.cumprod(long_total_pr)\n","  long_liqd = liquidation(OrderSide.BUY, l, long_obj[:4], long_lvrg_arr, long_fee_arr)\n","  long_prcn, long_rc = precision(long_pr, long_true_bias_idx), recall(long_true_bias_idx)\n","\n","  if signi:\n","    long_idep_res_obj = (long_prcn, long_rc) + get_res_info_nb_v2(sample_len, long_pr, long_total_pr, long_cum_pr, long_liqd)\n","  else:\n","    gs_idx = plot_info_v4(gs, gs_idx, sample_len, long_pr, long_total_pr, long_cum_pr, long_liqd, long_prcn, long_rc, long_lvrg_arr[-1], title_position, fontsize)\n","  # print(\"elapsed time :\", time.time() - start_0)\n","except Exception as e:\n","  gs_idx += 1\n","  print(e)\n","\n","# plt.show()"],"metadata":{"id":"X69t-H3tKJdm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def precision(pr_list, true_idx):\n","  true_bias_pr = pr_list[true_idx].ravel()\n","  return np.sum(true_bias_pr > 1) / len(true_bias_pr)  # 차원을 고려한 계산\n","\n","def recall(true_idx):\n","  return np.sum(true_idx) / len(true_idx) #  2.16 µs per loop (len) --> 3.78 µs per loop   # false_idx 중에서 tp 체결된 건을 더해주어야함\n","\n","def plot_info_v4(gs, gs_idx, sample_len, pr, total_pr, cum_pr, liqd, prcn, rc, leverage, title_position, fontsize):\n","  try:\n","    plt.subplot(gs[gs_idx])\n","    idep_res_obj = get_res_info_nb_v2(sample_len, pr, total_pr, cum_pr, liqd)\n","    plt.plot(cum_pr)\n","    plt.plot(idep_res_obj[-1], color='gold')\n","    if sample_len is not None:\n","      plt.axvline(sample_len, alpha=1., linestyle='--', color='#ffeb3b')\n","    # title_str = \"prcn : {:.3f} rc : {:.3f}\\n len_pr : {} dpf : {:.3f}\\n wr : {:.3f} sr : {:.3f}\\n acc_pr : {:.3f} sum_pr : {:.3f}\\n\" +\\\n","    #           \"min_pr : {:.3f} liqd : {:.3f}\\n acc_mdd : -{:.3f} sum_mdd : -{:.3f}\\n leverage {}\"\n","    title_str = \"prcn : {:.3f}\\n rc : {:.3f}\\n len_pr : {}\\n dpf : {:.3f}\\n wr : {:.3f}\\n sr : {:.3f}\\n acc_pr : {:.3f}\\n sum_pr : {:.3f}\\n\" +\\\n","              \"min_pr : {:.3f}\\n liqd : {:.3f}\\n acc_mdd : -{:.3f}\\n sum_mdd : -{:.3f}\\n leverage {}\"\n","    plt.title(title_str.format(prcn, rc, *idep_res_obj[:-1], leverage), position=title_position, fontsize=fontsize)\n","  except Exception as e:\n","    print(\"error in plot_info :\", e)\n","\n","  return gs_idx + 1"],"metadata":{"id":"J2nupeDOPdQI"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JNQxkb06ZdTe"},"source":["## plot_check_v2"]},{"cell_type":"code","source":["res_df = wave_range_v3(res_df, 5, ltf_df=None, touch_lbperiod=5)"],"metadata":{"id":"hpkqOliMxSIU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# ------------------ plot_config ------------------ #\n","save_mode = 0\n","front_plot = 3    # 0, 1, 2 (whole, open, ep_tick + a)\n","bias_plot = 2     # = swing_bias -> precision check : 1, recall check : 0\n","pr_descend = 1    # 1 -> 내림차순\n","position = 1      # -1 / 1, 0 (short / long)\n","# tf_plot = 1       # true - false plot\n","# pr_sort = 1     # -> default 1,  이상한 체결 확인하기 좋음\n","# wl_case = 1     # 1 / -1 / 0 (win loss study) --> oid\n","\n","x_max = 500\n","x_margin_mult = 1/30\n","y_margin_mult = 1/30  # 0 \n","\n","prev_plotsize = 100 #  100 20\n","post_plotsize = 60\n","# post_plotsize = config.tr_set.bias_info_tick\n","\n","inversion = 0\n","hedge = 0\n","\n","# ------ show or save ------ #\n","if save_mode:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".ftr\", \"\")\n","  shutil.rmtree(plot_check_dir, ignore_errors=True)  # remove existing dir\n","  os.makedirs(plot_check_dir)\n","  print(plot_check_dir)\n","else:\n","  plot_check_dir = None\n","\n","# ------------ 한 방향에 대해 plot_check 함 (by position var.) ------------ #\n","#   obj by position  \n","if position == -1:\n","  pos_str = \"SELL\"\n","  pr_, obj_ = short_pr, short_obj\n","  arr_list = [short_lvrg_arr, short_fee_arr, short_tpout_arr, short_bias_arr]\n","else:   # both option currently not supported\n","  pos_str = \"BUY\"\n","  pr_, obj_ = long_pr, long_obj\n","  arr_list = [long_lvrg_arr, long_fee_arr, long_tpout_arr, long_bias_arr]\n","pr, obj, [lvrg_arr, fee_arr, tpout_arr, bias_arr] = sort_bypr_v3(pr_, obj_, arr_list, descending=pr_descend)\n","\n","pr_msg = \"%s\\n {} ~ {} -> {:.5f}\\n lvrg : {}\\n fee : {:.4f}\" % (pos_str)  # pos_str 으로 이곳에서 정의함\n","\n","# ------------------ data chunknize ------------------ #\n","np_df = res_df.to_numpy()\n","\n","left_end_idx = obj[2] - prev_plotsize  # left_margin 기준 - entry_idx\n","right_end_idx = obj[3] + post_plotsize\n","invalid_left_end = np.sum(left_end_idx < 0)\n","\n","np_plot_params = np.hstack((left_end_idx, right_end_idx, pr, *obj, lvrg_arr, fee_arr, tpout_arr, bias_arr))[invalid_left_end:]\n","if bias_plot:\n","  bias_arr_ = bias_arr[invalid_left_end:]\n","  if position == -1:\n","    bias_idx = bias_arr_[:, 0] < bias_arr_[:, 1]\n","  else:\n","    bias_idx = bias_arr_[:, 0] > bias_arr_[:, 1]\n","  np_plot_params = np_plot_params[bias_idx]"],"metadata":{"id":"A6QSF9COaHO5","executionInfo":{"status":"ok","timestamp":1648974723000,"user_tz":-540,"elapsed":4675,"user":{"displayName":"7th June","userId":"08178289703395036410"}}},"execution_count":81,"outputs":[]},{"cell_type":"code","source":["strat_version = config.strat_version\n","\n","# ------------ make col_idx_dict config ------------ #\n","nonstep_col_list = []\n","step_col_list = []\n","stepmark_col_list = []\n","# ------ set period ------ #\n","hc_itv1 = '5T'\n","hc_itv2 = 'H'\n","\n","rs_itv = 'T'\n","\n","dc_itv = 'T'\n","hdc_itv = '15T'\n","hhdc_itv = 'H'\n","\n","wave_itv1 = 'T'\n","wave_itv2 = '5T'\n","\n","sd_itv1 = 'T'\n","sd_period1, sd_period2 = 5, 40\n","\n","cbline_itv = 'T'\n","\n","bb_itv = dc_itv\n","hbb_itv = hdc_itv\n","hhbb_itv = hhdc_itv\n","\n","\n","# ------------ nonstep_col_list - add info(col, alpha, color, linewidth) ------------ #\n","# nonstep_col_list.append([['close'], 1, '#ffffff', 2])\n","\n","# ------------ step_col_list - add info(col, alpha, color, linewidth) ------------ #\n","# ------ htf_candle ------ #\n","step_col_list.append([['open_{}'.format(hc_itv1), 'close_{}'.format(hc_itv1)], 1, '#ffffff', 1])\n","# step_col_list.append([['open_{}'.format(hc_itv2), 'close_{}'.format(hc_itv2)], 1, '#ffffff', 2])\n","\n","# ------ resi_sup ------ #\n","# step_col_list.append([['resi_{}'.format(rs_itv), 'sup_{}'.format(rs_itv)], 1, '#ffeb3b', 1])\n","# step_col_list.append([['resi_out_{}'.format(rs_itv), 'sup_out_{}'.format(rs_itv)], 1, 'dodgerblue', 2])\n","\n","# ------ sd - mcp ------ #\n","step_col_list.append([['dc_upper_{}{}'.format(sd_itv1, sd_period1), 'dc_lower_{}{}'.format(sd_itv1, sd_period1)], 1, '#ff00ff', 2])\n","step_col_list.append([['dc_upper_{}{}'.format(sd_itv1, sd_period2), 'dc_lower_{}{}'.format(sd_itv1, sd_period2)], 1, '#ffeb3b', 2])\n","# step_col_list.append([['dc_upper_{}{}'.format(wave_itv2, wave_period2), 'dc_lower_{}{}'.format(wave_itv2, wave_period2)], 1, '#e65100', 2])\n","\n","# ------ wave ------ #\n","# step_col_list.append([['wave_upper_{}'.format(wave_itv1), 'wave_upper_{}'.format(wave_itv1)], 1, '#ffeb3b', 3])\n","# step_col_list.append([['wave_lower_{}'.format(wave_itv1), 'wave_lower_{}'.format(wave_itv1)], 1, '#ffeb3b', 3])\n","# step_col_list.append([['wave_base_{}'.format(wave_itv1)], 1, '#279e2c', 2])\n","\n","# step_col_list.append([['wave_upper_{}'.format(wave_itv2), 'wave_upper_{}'.format(wave_itv2)], 1, '#f7525f', 3])\n","# step_col_list.append([['wave_lower_{}'.format(wave_itv2), 'wave_lower_{}'.format(wave_itv2)], 1, '#f7525f', 3])\n","# step_col_list.append([['wave_base_{}'.format(wave_itv2)], 1, '#279e2c', 2])\n","\n","# ------ dc_base : cbline ------ #\n","# step_col_list.append([['dc_base_{}'.format(cbline_itv)], 1, '#5b9cf6', 2])\n","\n","# ------ ema ------ #\n","# step_col_list.append([['ema_5T'], 1, '#03ed30', 2])\n","\n","# ------ dc ------ #\n","# step_col_list.append([['dc_upper_{}'.format(dc_itv), 'dc_lower_{}'.format(dc_itv)], 1, '#ffeb3b', 2])\n","# step_col_list.append([['dc_upper_{}'.format(hdc_itv), 'dc_lower_{}'.format(hdc_itv)], 1, '#e65100', 2])\n","# step_col_list.append([['dc_upper_{}'.format(hhdc_itv), 'dc_lower_{}'.format(hhdc_itv)], 1, '#c2185b', 4])\n","\n","# ------ bb ------ #\n","# step_col_list.append([['bb_upper_{}'.format(bb_itv), 'bb_lower_{}'.format(bb_itv)], 1, '#ffffff', 1])\n","# step_col_list.append([['bb_upper_{}'.format(hbb_itv), 'bb_lower_{}'.format(hbb_itv)], 1, '#ff00ff', 2])\n","# step_col_list.append([['bb_upper_{}'.format(hhbb_itv), 'bb_lower_{}'.format(hhbb_itv)], 1, '#3179f5', 4])\n","\n","# ------------ stepmark_col_list - add info(col, alpha, color, linewidth) ------------ #\n","# stepmark_col_list.append([['sar_T'], 1, 'dodgerblue', 7])\n","\n","\n","# ------ str to numbcol ------ #\n","nonstep_col_arr = strcol_tonumb(res_df, nonstep_col_list)\n","step_col_arr = strcol_tonumb(res_df, step_col_list)\n","stepmark_col_arr = strcol_tonumb(res_df, stepmark_col_list)\n","\n","col_idx_dict = \\\n","{\n","  \"ohlc_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close']),\n","  \"vp_col_idxs\": get_col_idxs(res_df, ['close', 'volume']),\n","  # \"ohlc_col_idxs\": get_col_idxs(res_df, ['haopen', 'hahigh', 'halow', 'haclose']),  # heikin-ashi ver.\n","  \"nonstep_col_info\": nonstep_col_arr,\n","  \"step_col_info\": step_col_arr,\n","  \"stepmark_col_info\": stepmark_col_arr,\n","  \"ylim_col_idxs\": get_col_idxs(res_df, ['open', 'high', 'low', 'close', 'short_out_{}'.format(strat_version), 'long_out_{}'.format(strat_version)])  # , 'dc_upper_H', 'dc_lower_H', 'dc_upper_15T', 'dc_lower_15T'\n","}   # , 'wave_upper_{}'.format(wave_itv2), 'wave_lower_{}'.format(wave_itv2), 'dc_upper_15T', 'dc_lower_15T'"],"metadata":{"id":"FnSydxFXn_f9","executionInfo":{"status":"ok","timestamp":1648974365526,"user_tz":-540,"elapsed":6,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"d2e28f5b-065e-4fbb-f44c-eba43ab98415"},"execution_count":67,"outputs":[{"output_type":"stream","name":"stderr","text":["/content/drive/My Drive/Colab Notebooks/JnQ/funcs/funcs_plot_check.py:10: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  step_col_arr = np.array(col_list)\n"]}]},{"cell_type":"markdown","source":["### plot"],"metadata":{"id":"E-VwJkNQbGI4"}},{"cell_type":"code","source":["_ = [plot_check_v3(np_df, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir, **col_idx_dict) for param_zip in zip(np_plot_params, np_plot_params[::-1])]"],"metadata":{"id":"Roy40BmByyZc","colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1mMQUiIfQUiP4tgeNvkB8eg0sjNpnatkz"},"executionInfo":{"status":"error","timestamp":1648974768506,"user_tz":-540,"elapsed":45508,"user":{"displayName":"7th June","userId":"08178289703395036410"}},"outputId":"1e9a5bc6-4cfc-484d-8938-d25187aad6f6"},"execution_count":82,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"markdown","source":["### plot_funcs"],"metadata":{"id":"MQ8w8nWVXlGj"}},{"cell_type":"code","source":["def plot_check_v3(data, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir=None, **col_idx_dict):\n","  # start_0 = time.time()\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(30, 18))\n","  nrows, ncols = 2, 2\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                         ncols=ncols,\n","                         height_ratios=[3, 1]\n","                         )\n","  for gs_idx, params in enumerate(param_zip):\n","    ax = fig.add_subplot(gs[gs_idx])\n","    iin, iout, pr, ep, tp, entry_idx, exit_idx, open_idx, lvrg, fee, tp_line, out_line, bias_info, bias_thresh = params\n","\n","    # if ep > out_line:  # for tp > ep > out plot_check\n","    #   break\n","\n","    # ------------ add_col section ------------ #\n","    a_data = data[int(iin):int(iout + 1)]\n","    # a_data = data[iin:iout]\n","    # ------ candles ------ #\n","    candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","\n","    # ------ add cols ------ #\n","    [nonstep_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['nonstep_col_info']]\n","    [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","    [stepmark_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['stepmark_col_info']]\n","\n","    # ------ ep, tp + xlim ------ #\n","    try:\n","      eptp_hvline_v3(config, ep, tp, entry_idx, exit_idx, open_idx, tp_line, out_line, bias_info, bias_thresh,\n","                    front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, **col_idx_dict)\n","    except Exception as e:\n","      print(\"error in eptp_hvline_v3 :\", e)\n","\n","    #     Todo    #\n","    #     3. outer_price plot 일 경우, gs_idx + nrows 하면 됨\n","\n","    # ------ trade_info ------ #\n","    plt.title(pr_msg.format(entry_idx, exit_idx, pr, lvrg, fee))\n","\n","  if plot_check_dir is None:\n","    plt.show()\n","    print()\n","  else:\n","    fig_name = plot_check_dir + \"/%s.png\" % int(entry_idx)\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","  plt.close()\n","  # print(\"elapsed time :\", time.time() - start_0)\n","\n","  return\n","\n","def eptp_hvline_v3(config, en_p, ex_p, entry_idx, exit_idx, open_idx, tp_line, out_line, bias_info, bias_thresh,\n","                   front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, **col_idx_dict):\n","  # ------ get vertical ticks ------ #\n","  entry_tick = int(entry_idx - iin)\n","  open_tick = entry_tick - int(entry_idx - open_idx)\n","  exit_tick = entry_tick + int(exit_idx - entry_idx)\n","\n","  if front_plot == 1:\n","    x_max = open_tick\n","  elif front_plot == 2:\n","    x_max = entry_tick + 20 \n","  elif front_plot == 3:\n","    x_max = exit_tick + 20\n","\n","  if (iout - iin) > x_max:\n","    x_margin = x_max * x_margin_mult\n","    plt.xlim(0 - x_margin, x_max + x_margin)\n","  x0, x1 = plt.gca().get_xlim()\n","  # ------------ hlines ------------ #\n","  # ------ entry & exit ------ #\n","  en_xmin = entry_tick / x1\n","  ex_xmin = exit_tick / x1\n","  plt.axhline(en_p, x0, en_xmin, linewidth=2, linestyle='--', alpha=1, color='lime')  # en_p line axhline\n","  plt.text(x0, en_p, 'en_p :\\n {:.3f} \\n epg {}'.format(en_p, config.tr_set.ep_gap), ha='right', va='center', fontweight='bold', fontsize=15)  # en_p line label\n","  plt.axhline(ex_p, ex_xmin, 1, linewidth=2, linestyle='--', alpha=1, color='lime')  # ex_p line axhline (signal 도 포괄함, 존재 의미)\n","  plt.text(x1, ex_p, 'ex_p :\\n {}'.format(ex_p), ha='left', va='center', fontweight='bold')  # ex_p line label\n","\n","  # ------ tpout_line ------ #\n","  plt.axhline(tp_line, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#00ff00')  # ep 와 gap 비교 용이하기 위해 ex_xmin -> 0.1 사용\n","  plt.text(x0, tp_line, 'tpg {}'.format(config.tr_set.tp_gap), ha='right', va='center', fontweight='bold', fontsize=15)\n","  plt.axhline(out_line, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#ff0000')\n","  plt.text(x0, out_line, 'outg {}'.format(config.tr_set.out_gap), ha='right', va='center', fontweight='bold', fontsize=15)\n","\n","  # ------ bias_line ------ #\n","  plt.axhline(bias_info, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='dodgerblue')\n","  plt.text(x0, bias_info, ' bias_info', ha='left', va='center', fontweight='bold')\n","  plt.axhline(bias_thresh, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#ff8400')\n","  plt.text(x0, bias_thresh, ' bias_thresh', ha='left', va='center', fontweight='bold')\n","\n","  # ------ ylim ------ #\n","  if front_plot:\n","    y_lim_data = a_data[:x_max + 1, col_idx_dict['ylim_col_idxs']]  # +1 for including open_tick\n","  else:\n","    y_lim_data = a_data[:, col_idx_dict['ylim_col_idxs']]\n","  \n","  y_min = y_lim_data.min()\n","  y_max = y_lim_data.max()\n","  y_margin = (y_max - y_min) * y_margin_mult\n","  plt.ylim(y_min - y_margin, y_max + y_margin)\n","\n","  # ------------ vline (open_tick, entry_tick, exit_tick) ------------ #\n","  y0, y1 = plt.gca().get_ylim()\n","  l_data = a_data[:exit_tick + 1, col_idx_dict['ohlc_col_idxs'][2]]  # +1 for including exit_tick\n","  open_ymax, en_ymax, ex_ymax = [(l_data[tick_] - y0) / (y1 - y0) - .01 for tick_ in [open_tick, entry_tick, exit_tick]]  # -.05 for margin\n","  plt.axvline(open_tick, 0, open_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')  # 추후, tick 별 세부 정의가 달라질 수 있음을 고려해 multi_line 작성 유지\n","  plt.axvline(entry_tick, 0, en_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  plt.axvline(exit_tick, 0, ex_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","\n","  return"],"metadata":{"id":"cFt6CeZf4yEk"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#### legacy"],"metadata":{"id":"q3zisNOTw3jM"}},{"cell_type":"code","source":["_ = [plot_check_v4(np_df, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir, 500, 0.07, 100, **col_idx_dict) for param_zip in zip(np_plot_params, np_plot_params[::-1])]"],"metadata":{"id":"fUFdJVrsw78h"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def plot_check_v4(data, config, param_zip, pr_msg, x_max, x_margin_mult, y_margin_mult, front_plot, plot_check_dir=None, vp_range=500, kde_factor=0.05, num_samples=100, **col_idx_dict):\n","  # start_0 = time.time()\n","  plt.style.use(['dark_background', 'fast'])\n","  fig = plt.figure(figsize=(30, 18))\n","  nrows, ncols = 2, 2\n","  gs = gridspec.GridSpec(nrows=nrows,  # row 부터 index 채우고 col 채우는 순서임 (gs_idx)\n","                         ncols=ncols,\n","                         height_ratios=[3, 1]\n","                         )\n","  for gs_idx, params in enumerate(param_zip):\n","    ax = fig.add_subplot(gs[gs_idx])\n","    iin, iout, pr, ep, tp, entry_idx, exit_idx, open_idx, lvrg, fee, tp_line, out_line, bias_info, bias_thresh = params\n","\n","    # ------------ add_col section ------------ #\n","    iin, iout = int(iin), int(iout)\n","    a_data = data[iin:iout]\n","    # ------ candles ------ #\n","    candle_plot(a_data[:, col_idx_dict['ohlc_col_idxs']], ax, alpha=1.0, wickwidth=1.0)\n","    \n","    # ------ add cols ------ #\n","    [nonstep_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['nonstep_col_info']]\n","    [step_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['step_col_info']]\n","    [stepmark_col_plot(a_data[:, params[0]], *params[1:]) for params in col_idx_dict['stepmark_col_info']]\n","\n","    # vp_data = data[iin - vp_range:iin, col_idx_dict['vp_col_idxs']]\n","    # vp_info = [vp_range, vp_data[:, 0], vp_data[:, 1], kde_factor, num_samples]\n","    vp_data = data[iin - vp_range:iin, col_idx_dict['vp_col_idxs']].T\n","    vp_info = [vp_range, *vp_data, kde_factor, num_samples]\n","\n","    # ------ ep, tp + xlim ------ #\n","    eptp_hvline_v4(config, ep, tp, entry_idx, exit_idx, open_idx, tp_line, out_line, bias_info, bias_thresh, \n","                   front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, vp_info, **col_idx_dict)        \n","\n","    #     Todo    #\n","    #     3. outer_price plot 일 경우, gs_idx + nrows 하면 됨\n","\n","    # ------ trade_info ------ #\n","    plt.title(pr_msg.format(entry_idx, exit_idx, pr, lvrg, fee))\n","\n","  if plot_check_dir is None:\n","    plt.show()\n","    print()\n","  else:\n","    fig_name = plot_check_dir +  \"/%s.png\" % int(entry_idx)\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","  plt.close()\n","  # print(\"elapsed time :\", time.time() - start_0)  \n","\n","  return\n","\n","def eptp_hvline_v4(config, en_p, ex_p, entry_idx, exit_idx, open_idx, tp_line, out_line, bias_info, bias_thresh, \n","                   front_plot, iin, iout, x_max, x_margin_mult, y_margin_mult, a_data, vp_info, **col_idx_dict):\n","  # ------ get vertical ticks ------ #\n","  entry_tick = int(entry_idx - iin)\n","  open_tick = entry_tick - int(entry_idx - open_idx)\n","  exit_tick = entry_tick + int(exit_idx - entry_idx)\n","\n","  if front_plot == 1:\n","    x_max = open_tick\n","  elif front_plot == 2:\n","    x_max = entry_tick\n","  if (iout - iin) > x_max:\n","    x_margin = x_max * x_margin_mult\n","    plt.xlim(0 - x_margin, x_max + x_margin)\n","  x0, x1 = plt.gca().get_xlim()\n","  # ------------ hlines ------------ #\n","  # ------ entry & exit ------ #\n","  en_xmin = entry_tick / x1\n","  ex_xmin = exit_tick / x1\n","  plt.axhline(en_p, x0, en_xmin, linewidth=2, linestyle='--', alpha=1, color='lime')  # en_p line axhline\n","  plt.text(x0, en_p, ' en_p :\\n {}'.format(en_p), ha='right', va='center', fontweight='bold')  # en_p line label\n","  plt.axhline(ex_p, ex_xmin, 1, linewidth=2, linestyle='--', alpha=1, color='lime')  # ex_p line axhline (signal 도 포괄함, 존재 의미)\n","  plt.text(x1, ex_p, ' ex_p :\\n {}'.format(ex_p), ha='left', va='center', fontweight='bold')  # ex_p line label\n","\n","  # ------ tpout_line ------ #\n","  plt.axhline(tp_line, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#00ff00')  # ep 와 gap 비교 용이하기 위해 ex_xmin -> 0.1 사용\n","  plt.text(x0, tp_line, ' %s' % config.tr_set.tp_gap, ha='left', va='center', fontweight='bold')\n","  plt.axhline(out_line, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#ff0000')\n","  plt.text(x0, out_line, ' %s' % config.tr_set.out_gap, ha='left', va='center', fontweight='bold')\n","\n","  # ------ bias_line ------ #\n","  plt.axhline(bias_info, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='dodgerblue')\n","  plt.text(x0, bias_info, ' bias_info', ha='left', va='center', fontweight='bold')\n","  plt.axhline(bias_thresh, 0.1, 1, linewidth=4, linestyle='-', alpha=1, color='#ff8400')\n","  plt.text(x0, bias_thresh, ' bias_thresh', ha='left', va='center', fontweight='bold')\n","\n","  # ------ volume profile ------ #\n","  vp_range, close, volume, kde_factor, num_samples = vp_info\n","  if iin >= vp_range:\n","    start_0 = time.time()\n","    kde = stats.gaussian_kde(close, weights=volume, bw_method=kde_factor)\n","    kdx = np.linspace(close.min(), close.max(), num_samples)\n","    kdy = kde(kdx)\n","    print(\"kde elapsed_time :\", time.time() - start_0)\n","\n","    kdy_max = kdy.max()\n","    # peaks,_ = signal.find_peaks(kdy)\n","    peaks,_ = signal.find_peaks(kdy, prominence=kdy_max * 0.3)\n","    peak_list = kdx[peaks]   # peak_list\n","    [plt.axhline(peak, linewidth=6, linestyle='-', alpha=1, color='white') for peak in peak_list]\n","    \n","    kdy_ratio = entry_tick / kdy_max # 30 / 0.0001\n","    plt.plot(kdy * kdy_ratio, kdx, color='white')\n","    # plt.plot(pky, pkx, 'bo', color='yellow')\n","\n","  # ------ ylim ------ #\n","  if front_plot:\n","    y_lim_data = a_data[:x_max + 1, col_idx_dict['ylim_col_idxs']]  # +1 for including open_tick\n","  else:\n","    y_lim_data = a_data[:, col_idx_dict['ylim_col_idxs']]\n","  y_min = y_lim_data.min()\n","  y_max = y_lim_data.max()\n","  y_margin = (y_max - y_min) * y_margin_mult\n","  # plt.ylim(y_min - y_margin, y_max + y_margin)\n","\n","  # ------------ vline (open_tick, entry_tick, exit_tick) ------------ #\n","  y0, y1 = plt.gca().get_ylim()\n","  l_data = a_data[:exit_tick + 1, col_idx_dict['ohlc_col_idxs'][2]]  # +1 for including exit_tick\n","  open_ymax, en_ymax, ex_ymax = [(l_data[tick_] - y0) / (y1 - y0) - .01 for tick_ in [open_tick, entry_tick, exit_tick]]  # -.05 for margin\n","  plt.axvline(open_tick, 0, open_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')  # 추후, tick 별 세부 정의가 달라질 수 있음을 고려해 multi_line 작성 유지\n","  plt.axvline(entry_tick, 0, en_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","  plt.axvline(exit_tick, 0, ex_ymax, alpha=1, linewidth=2, linestyle='--', color='#ffeb3b')\n","\n","  return"],"metadata":{"id":"ESReTMpP7SoO"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### sync_check"],"metadata":{"id":"X0FsT-8FZRti"}},{"cell_type":"code","source":["save_plot = 0\n","\n","open_idx_range = reversed(range(0, len(res_df), 1000))\n","plot_range = 100\n","\n","x_max = 400\n","\n","inversion = 0\n","hedge = 0\n","\n","\n","if save_plot:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".ftr\", \"\")\n","  try:\n","    os.mkdir(plot_check_dir)\n","  except:\n","\n","    #     remove existing dir   #\n","    shutil.rmtree(plot_check_dir)\n","    print(plot_check_dir, 'removed !')\n","    os.mkdir(plot_check_dir)\n","    # pass\n","    \n","\n","prev_plotsize = 30\n","post_plotsize = 20\n","\n","\n","\n","h_candle_intv1 = 15\n","h_candle_intv2 = 60\n","if 'hopen_{}'.format(h_candle_intv2) not in res_df.columns:\n","  res_df = h_candle(res_df, h_candle_intv1)\n","  res_df = h_candle(res_df, h_candle_intv2)\n","\n","res_df[\"ma30_1m\"] = res_df['close'].rolling(30).mean()\n","res_df[\"ma60_1m\"] = res_df['close'].rolling(60).mean()\n","\n","res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line)\n","# res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=1, use_dtk_line=1)\n","# break\n","\n","rtc_list = [\"short_tp_1_{}\".format(strat_version), \"short_tp_gap_{}\".format(strat_version), \"long_tp_1_{}\".format(strat_version), \"long_tp_gap_{}\".format(strat_version)]\n","# h_rtc_list = [\"h_short_tp_1\", \"h_short_tp_gap\", \"h_long_tp_1\", \"h_long_tp_gap\"]\n","dtk_list = [\"short_dtk_1_{}\".format(strat_version), \"short_dtk_gap_{}\".format(strat_version), \"long_dtk_1_{}\".format(strat_version), \"long_dtk_gap_{}\".format(strat_version),\n","            # \"short_dtk_1_line\", \"short_dtk_gap_line\", \"long_dtk_1_line\", \"long_dtk_gap_line\",\n","            \"short_dtk_plot_1\", \"short_dtk_plot_gap\", \"long_dtk_plot_1\", \"long_dtk_plot_gap\"]\n","dc_v2_list = ['dc_upper_v2_{}'.format(strat_version), 'dc_lower_v2_{}'.format(strat_version)]\n","\n","\n","ohlc_list = ['open', 'high', 'low', 'close'] # + basic_st_list\n","hcandle_list = ['hopen_%s' % h_candle_intv1, 'hclose_%s' % h_candle_intv1, 'hopen_%s' % h_candle_intv2, 'hclose_%s' % h_candle_intv2]\n","# hcandle_list = ['hopen_%s' % h_candle_intv1, 'hclose_%s' % h_candle_intv1, 'hhigh_%s' % h_candle_intv2, 'hlow_%s' % h_candle_intv2]\n","\n","# --------------------- dc & bb level --------------------- #\n","dc_interval = '1m'\n","hdc_interval = '5m'\n","hhdc_interval = '15m'\n","\n","st_list = ['st_base_%s' % hhdc_interval, 'st_upper_%s' % hhdc_interval, 'st_lower_%s' % hhdc_interval]\n","\n","dc_list = ['dc_upper_%s' % dc_interval, 'dc_lower_%s' % dc_interval]\n","hdc_list = ['dc_upper_%s' % hdc_interval, 'dc_lower_%s' % hdc_interval]\n","hhdc_list = ['dc_upper_%s' % hhdc_interval, 'dc_lower_%s' % hhdc_interval]\n","\n","bb_interval = dc_interval\n","hbb_interval = hdc_interval\n","hhbb_interval = hhdc_interval\n","\n","bb_list = ['bb_upper_%s' % bb_interval, 'bb_lower_%s' % bb_interval]\n","hbb_list = ['bb_upper_%s' % hbb_interval, 'bb_lower_%s' % hbb_interval]\n","hhbb_list = ['bb_upper_%s' % hhbb_interval, 'bb_lower_%s' % hhbb_interval]\n","\n","bbwp_list = ['bbwp', 'bbwp_ma']\n","\n","\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1']\n","senkoub_list = ['senkou_b1']\n","\n","sar_list = ['sar_3m', 'sar_5m', 'sar_15m']\n","\n","ma_list = ['ma30_1m', 'ma60_1m']\n","sma_list = ['sma_1m']\n","\n","ema_list = ['ema_5m']\n","# cb_list = ['cloud_bline_1m']\n","cb_list = ['cloud_bline_30m']\n","# cb_list = ['cloud_bline_5m']\n","\n","\n","\n","# -------------- under price phase -------------- #\n","# macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3']\n","# trix_list = ['trix1', 'trix2', 'trix3']\n","# stoch_list = ['stoch_5m']\n","# fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","# cctbbo_list = ['cctbbo']\n","# emaroc_list = ['ema_roc']\n","rsi_list = ['rsi_%s' % config.loc_set.point.exp_itv] \n","cci_list = ['cci_%s' % config.loc_set.point.exp_itv] \n","\n","\n","# -------------- summation -------------- #\n","# input_colname = ohlc_list + basic_st_list + pline_list + bb_list + hbb_list + sma_list + cb_list + stoch_list + sar_list + dc_list\n","input_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + hhdc_list + dtk_list + dc_v2_list + rsi_list + ema_list + ma_list + st_list# + cci_list\n","\n","# yrange_colname = ohlc_list + basic_st_list + pline_list # currently just used for ymin, ymax\n","yrange_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + hhdc_list + dc_v2_list + ema_list # currently just used for ymin, ymax\n","yrange_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + dc_v2_list + ema_list # currently just used for ymin, ymax\n","\n","\n","\n","odd_cnt = 0\n","obj_i = -1\n","rev_obj_i = 0\n","\n","#   지금, continue 발생시 true / false idx 가 같이 상승하는 문제\n","\n","# while 1:\n","for open_idx in open_idx_range:\n","\n","  # if obj_i >= len_obj or rev_obj_i >= len_obj:\n","  #   break\n","\n","  # if odd_cnt % 2 == 1 and tf_plot: #  loss plot 을 채워야하는 상황\n","  #   rev_obj_i += 1\n","\n","  # else:\n","  #   obj_i += 1\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","  \n","\n","  odd_cnt += 1\n","\n","  # break\n","\n","  print(\"open_idx :\", open_idx)\n","  \n","  plot_df = res_df.iloc[open_idx - prev_plotsize:open_idx + plot_range + post_plotsize][input_colname]\n","  \n","  odds = 1 if odd_cnt % 2 == 1 else 2\n","  if odds == 1:\n","\n","    plt.style.use('dark_background')\n","\n","    fig = plt.figure(figsize=(26, 18))\n","    \n","    gs = gridspec.GridSpec(nrows=2, # row 몇 개 \n","                        ncols=2, # col 몇 개 \n","                        height_ratios=[3, 1]\n","                        )\n","    \n","  ax = fig.add_subplot(gs[odds - 1])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='#26a69a', colordown='#ef5350', alpha=0.5)\n","\n","  # ---------- h_candle ---------- #\n","  alpha = 1\n","  lw = 1\n","  for cd_i, candle in enumerate(hcandle_list):\n","\n","    if cd_i == 2:\n","      lw = 2      \n","    plt.step(np.arange(len(plot_df)), plot_df[candle].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","\n","  # alpha = 0.1\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['hclose_60'].values, plot_df['hopen_60'].values, \n","  #                     where=1, facecolor='#ffffff', alpha=alpha)  \n","  \n","\n","   # --------- ma --------- #\n","  alpha = 1\n","  lw = 2\n","  for ma_i, item in enumerate(ma_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","   # --------- ema --------- #\n","  alpha = 1\n","  lw = 4\n","  for sm_i, item in enumerate(ema_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","    \n","   # --------- st --------- #\n","  alpha = 1\n","  lw = 2\n","  for sm_i, item in enumerate(st_list):\n","      plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#00ff00', linewidth=lw)\n","\n","  # ---------------------- dc_v2 ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(dc_v2_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","  # # ---------------------- dc ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(dc_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","  # # ---------------------- hdc ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(hdc_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#e65100', linewidth=lw)\n","\n","  # # ---------------------- hhdc ---------------------- #\n","  # alpha = 1\n","  # lw = 4\n","  # for sm_i, item in enumerate(hhdc_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#c2185b', linewidth=lw)\n","\n","\n","  # # ---------------------- bb ---------------------- #\n","  # alpha = 1\n","  # lw = 1\n","  # for sm_i, item in enumerate(bb_list):\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","\n","  # alpha = 0.2\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % bb_interval].values, plot_df['bb_lower_%s' % bb_interval].values, \n","  #                     where=plot_df['bb_upper_%s' % bb_interval].values >= plot_df['bb_lower_%s' % bb_interval].values, facecolor='#ffffff', alpha=alpha)   \n","\n","  # # ---------------------- hbb ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(hbb_list):\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ff00ff', linewidth=lw)\n","  \n","  # alpha = 0.2\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % hbb_interval].values, plot_df['bb_lower_%s' % hbb_interval].values, \n","  #                     where=plot_df['bb_upper_%s' % hbb_interval].values >= plot_df['bb_lower_%s' % hbb_interval].values, facecolor='#ff00ff', alpha=alpha) \n","  \n","  # # ---------------------- hhbb ---------------------- #\n","\n","  # alpha = 1\n","  # lw = 4\n","  # for sm_i, item in enumerate(hhbb_list):\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#3179f5', linewidth=lw)\n","  \n","  # alpha = 0.2\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % hhbb_interval].values, plot_df['bb_lower_%s' % hhbb_interval].values, \n","  #                     where=plot_df['bb_upper_%s' % hhbb_interval].values >= plot_df['bb_lower_%s' % hhbb_interval].values, facecolor='#3179f5', alpha=alpha) \n","  \n","  # ------------------- dtk_line (old, tp_line) ------------------- #\n","  \n","  # alpha = 1\n","  # lw = 2\n","  # rtc_ratio_list = [config.loc_set.zone.dt_k]\n","  \n","  # for rtc_k in rtc_ratio_list:    \n","  #   # plt.step(np.arange(len(plot_df)), plot_df['short_dtk_1_line'].values - plot_df['short_dtk_gap_line'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['long_dtk_1_line'].values + plot_df['long_dtk_gap_line'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","\n","  # hy_min = np.min(plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * rtc_k)\n","  # hy_max = np.max(plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * rtc_k)  \n","\n","  # alpha = 1\n","  # lw = 4\n","  # # h_rtc_ratio_list = [config.loc_set.zone.dt_k]\n","  # h_rtc_ratio_list = [config.loc_set.zone.zone_dt_k]\n","  # # h_rtc_ratio_list = [0.272, 0.36, 0.4, 0.5]\n","  \n","  # for h_rtc_k in h_rtc_ratio_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df['short_dtk_plot_1'].values - plot_df['short_dtk_plot_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['long_dtk_plot_1'].values + plot_df['long_dtk_plot_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['h_short_tp_1'].values - plot_df['h_short_tp_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['h_long_tp_1'].values + plot_df['h_long_tp_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","\n","  # # hy_min = np.min(plot_df['short_dtk_plot_1'].values - plot_df['short_dtk_plot_gap'].values * h_rtc_k)\n","  # # hy_max = np.max(plot_df['long_dtk_plot_1'].values + plot_df['long_dtk_plot_gap'].values * h_rtc_k)  \n","\n","  # ------------- y lim ------------- #  \n","  y_max = max(np.max(plot_df[yrange_colname]))\n","  y_min = min(np.min(plot_df[yrange_colname]))\n","  # y_max = max(y_max, y_max_)\n","  # y_min = min(y_min, y_min_)\n","  \n","  # hy_min = np.min(plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * 0.36)\n","  # hy_max = np.max(plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * 0.36)  \n","  # y_max = max(y_max, y_max_, hy_max)\n","  # y_min = min(y_min, y_min_, hy_min)\n","\n","  if np.isnan(y_max) or np.isnan(y_min):\n","    print('continued in yminmax')\n","    continue\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","\n","  plt.ylim(y_min, y_max)\n","\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  #           rsi          #    \n","  plt.subplot(gs[odds + 1])\n","  alpha = 1\n","  for rsi_ in rsi_list:\n","    plt.step(np.arange(len(plot_df)), plot_df[rsi_].values, 'g', alpha=alpha)\n","    # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","    alpha -= 0.2\n","  plt.axhline(50, linestyle='--')\n","  plt.axhline(50 + config.loc_set.point.osc_band, linestyle='--')\n","  plt.axhline(50 - config.loc_set.point.osc_band, linestyle='--')\n","  \n","  plt.axvline(prev_plotsize, linestyle='--')\n","  \n","  #           cci          #    \n","  # plt.subplot(gs[odds + 1])\n","  # alpha = 1\n","  # for cci_ in cci_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cci_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axhline(config.loc_set.point.osc_band, linestyle='--')\n","  # plt.axhline(-config.loc_set.point.osc_band, linestyle='--')\n","  \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","\n","\n","  if len(plot_df) > x_max:\n","    x_margin = x_max / 20\n","    plt.xlim(0 - x_margin, x_max + x_margin)\n","\n","\n","  if not save_plot:\n","    if odds == 2:\n","      plt.show()\n","      plt.close()\n","  \n","  else:\n","    # ---------- save mode ---------- #\n","    fig_name = plot_check_dir +  \"/%s.png\" % t_i\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","\n","  # plt.close()  \n","  print()\n","\n","  # break\n"],"metadata":{"id":"inQ6f-CDZYkr"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"13a-U32Uy50I"},"source":["### brief np_pr survey"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"L9LdjV2uUWnp"},"outputs":[],"source":["# plot_pr_list[:100]\n","plt.plot(np_pr)\n","plt.axhline(1)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"TBE0l6dHRYrE"},"source":["### close & pr comp."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":877},"executionInfo":{"elapsed":1436,"status":"ok","timestamp":1636355589887,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"-txULkhXRbz5","outputId":"7cda9fc7-4a4e-4c52-ffa3-a974b5f7c66f"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 3 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 3 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]}],"source":["#     chunky survey 필요함    #\n","chunk_size = 50000\n","\n","sync_pr = np.ones(len(res_df))\n","sync_tr = np.zeros(len(res_df))\n","# sync_tr = np.empty(len(res_df))\n","# sync_tr[:] = np.nan\n","\n","max_tr = np.max(tp_ratio_list)\n","min_tr = np.min(tp_ratio_list)\n","\n","for ck_i in range(0, len(res_df), chunk_size):\n","\n","  chunked_df = res_df.iloc[ck_i:ck_i + chunk_size]\n","  # break\n","\n","  for pr_, eptp_idx, tr_ in zip(pr_list[ck_i:ck_i + chunk_size], trade_list[ck_i:ck_i + chunk_size], tp_ratio_list[ck_i:ck_i + chunk_size]):\n","    # print(pr_, eptp_idx)\n","    sync_pr[eptp_idx[-1][0]] = pr_\n","    sync_tr[eptp_idx[-1][0]] = tr_\n","    # break\n","\n","  chunked_pr = sync_pr[ck_i:ck_i + chunk_size]\n","  chunked_tr = sync_tr[ck_i:ck_i + chunk_size]\n","  chunked_tr = np.where(np.isnan(chunked_tr), pd.Series(chunked_tr).shift(1), chunked_tr)\n","\n","  # plt.figure(figsize=(8, 6))\n","\n","  plt.subplot(311)\n","  plt.plot(np.arange(len(chunked_df)), chunked_df['close'])\n","  # plt.show()\n","\n","  plt.subplot(312)\n","  plt.plot(np.cumprod(chunked_pr))\n","  \n","  plt.subplot(313)\n","  plt.plot(chunked_tr)\n","  plt.ylim(min_tr + 0.5 * (max_tr - min_tr), max_tr)\n","  \n","  plt.show()\n","  print()\n"]},{"cell_type":"markdown","metadata":{"id":"Qys2Bw5Ou3u9"},"source":["### plot indi. legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pi5ntOOVu6JT"},"outputs":[],"source":["\n","  # ---------------------- ma ---------------------- #\n","   # --------- ema --------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(ema_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  #   # --------- sma --------- #\n","  # alpha = 1\n","  # for sm_i, sma in enumerate(sma_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 4\n","  #   plt.step(np.arange(len(plot_df)), plot_df[sma].values, alpha=alpha, color='#e91e63', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  \n","  # ---------------------- cb ---------------------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(cb_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#5b9cf6', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","\n","  \n","  # ---------------------- sar ---------------------- #\n","  # alpha = 1\n","  # markersize = 5\n","  # for sar in sar_list:\n","  #   plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","  #   markersize += 1\n","  #   alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  # alpha = 0.7\n","  # for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","  #                     where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","  #                     where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","  #   alpha -= 0.05\n","  \n","\n","\n","  # ---------------------- outer price indi. ---------------------- #\n","  #           macd          #\n","  # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","    \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for stoch_ in stoch_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[stoch_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(stoch_upper, linestyle='--')\n","  # plt.axhline(stoch_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- cctbbo ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for cctbbo in cctbbo_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cctbbo].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(cctbbo_upper, linestyle='--')\n","  # plt.axhline(cctbbo_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- ema_roc ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for emaroc in emaroc_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[emaroc].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","  \n","  # ---------- bbw ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for bbwp_ in bbwp_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[bbwp_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(bbwp_thresh, linestyle='--')\n","\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n"]},{"cell_type":"markdown","metadata":{"id":"cj9X6S1jJjER"},"source":["### plot nontp case"]},{"cell_type":"markdown","metadata":{"id":"tApzvz_gK9lR"},"source":["## legacy"]},{"cell_type":"markdown","metadata":{"id":"FaRGwR4NEop2"},"source":["### shifting"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"a8aYsjEgQnGF"},"outputs":[],"source":["org_res_df = res_df.copy()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":291,"status":"ok","timestamp":1626515312874,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"RF3RM2G2RCb1","outputId":"ba8f6a75-d4df-4f85-cd0f-190935341f7a"},"outputs":[{"name":"stdout","output_type":"stream","text":["                            open     high  ...  min_upper  max_lower\n","2021-06-30 23:55:59.999  0.27223  0.27281  ...   0.272145    0.27005\n","2021-06-30 23:56:59.999  0.27274  0.27290  ...   0.272145    0.27005\n","2021-06-30 23:57:59.999  0.27246  0.27257  ...   0.272523    0.27021\n","2021-06-30 23:58:59.999  0.27166  0.27183  ...   0.272523    0.27021\n","2021-06-30 23:59:59.999  0.27144  0.27211  ...   0.272523    0.27021\n","\n","[5 rows x 37 columns]\n","                            open     high  ...  min_upper  max_lower\n","2021-06-30 23:55:59.999  0.27223  0.27281  ...   0.272523    0.27021\n","2021-06-30 23:56:59.999  0.27274  0.27290  ...        NaN        NaN\n","2021-06-30 23:57:59.999  0.27246  0.27257  ...        NaN        NaN\n","2021-06-30 23:58:59.999  0.27166  0.27183  ...        NaN        NaN\n","2021-06-30 23:59:59.999  0.27144  0.27211  ...        NaN        NaN\n","\n","[5 rows x 37 columns]\n"]}],"source":["#         refresh res_df      #\n","res_df = org_res_df.copy()\n","print(org_res_df.tail(5))\n","\n","# break\n","\n","\n","shift_size = -4\n","# shift_size = -1\n","# shift_size = -7\n","# shift_size = +3\n","\n","res_df['min_upper'] = res_df['min_upper'].shift(shift_size)\n","res_df['max_lower'] = res_df['max_lower'].shift(shift_size)\n","res_df['minor_ST1_Trend'] = res_df['minor_ST1_Trend'].shift(shift_size)\n","res_df['minor_ST2_Trend'] = res_df['minor_ST2_Trend'].shift(shift_size)\n","res_df['minor_ST3_Trend'] = res_df['minor_ST3_Trend'].shift(shift_size)\n","res_df['middle_line'] = res_df['middle_line'].shift(shift_size)\n","\n","print(res_df.tail(5))"]},{"cell_type":"markdown","metadata":{"id":"2gxvme1PC6ha"},"source":["### load model"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5831,"status":"ok","timestamp":1628862368878,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"dtYdAuSsC72_","outputId":"e8dccc53-aaa7-4bab-ed8d-753f634c08d6"},"outputs":[{"name":"stdout","output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/resnet/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5\n","94773248/94765736 [==============================] - 1s 0us/step\n"]}],"source":["# model_name = 'inner_tick_cnnreg_lscalemm_prefee_gpu_%s_%s_%s_%s_%s.h5'\n","\n","# model = tf.keras.models.load_model(ckpt_path + model_name)\n","\n","from tensorflow.keras.applications.resnet50 import ResNet50\n","\n","model = ResNet50(weights='imagenet', include_top=False)\n","# model.summary()\n"]},{"cell_type":"markdown","metadata":{"id":"5la6usMOFzkX"},"source":["#### gen selected vector"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oQk3-jbKF8FB"},"outputs":[],"source":["def min_max_scale(npy_x):\n","\n","  return (npy_x - np.min(npy_x)) / (np.max(npy_x) - np.min(npy_x))\n","\n","def expand_dims(npy_x):\n","\n","  row, col = npy_x.shape\n","  npy_x2 = np.array(npy_x).reshape(-1, row, col, 1).astype(np.float32)\n","  # input_x = np.array(data_x).reshape(-1, row, col).astype(np.float32)\n","\n","  #     1c to 3c    #\n","  npy_x3 = npy_x2 * np.ones(3, dtype=np.float32)[None, None, None, :]\n","\n","  return npy_x3\n","\n","\n","def vector_dist(f1, f2):\n","  return np.linalg.norm(f1-f2)\n","\n","\n","\n","# ------------------------ params ------------------------  #\n","selected_i = 500\n","input_size = 100\n","\n","\n","\n","#   1. 선택된 인덱스를 입력받았을 때, input generating 형태만 만들어놓고,     #\n","#   1-1. input cols 필요함    #\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower']\n","# senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","# senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","\n","sma_list = ['sma']\n","\n","#     -------------- outer price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","cctbbo_list = ['cctbbo']\n","\n","selected_price_colname = basic_list + senkoua_list + senkoub_list + sar_list\n","selected_outprice_colname = [macd_list]\n","\n","\n","#         global scaling for outer price data       #\n","#         1. nan 처리       #\n","\n","# # print((np.isnan(df.values)))\n","# print(\"np.sum(np.isnan(df.values), axis=0) :\", np.sum(np.isnan(df.values), axis=0))\n","\n","# max_nan = np.max(np.sum(np.isnan(df.values), axis=0))\n","# # print(max_nan)\n","\n","# df = df.iloc[max_nan:-max_nan]\n","\n","# total_gdata = []\n","# for g_col in selected_outprice_colname:\n","\n","#   temp_data = min_max_scale(res_df[g_col])\n","#   total_gdata.append(temp_data)\n","\n","\n","\n","#   1-2. cols 에 따른, scaling method 구분함    #\n","onprice_input_x = min_max_scale(res_df[selected_price_colname].iloc[selected_i - input_size:selected_i].values)\n","print(onprice_input_x.shape)\n","\n","\n","#   2. plot_check 에서 본인이 원하는 shape 의 인덱스를 선택   #\n","#   3. vertorize, \n","#   3-1. input generator 를 이용해 entry signal 발생할 때마다 dist 비교 진행    #\n","re_onprice_input_x = expand_dims(onprice_input_x)\n","print(re_onprice_input_x.shape)\n","      \n","# break\n","\n","selected_vector = model.predict(re_onprice_input_x, verbose=1)\n","print(selected_vector.shape)"]},{"cell_type":"markdown","metadata":{"id":"OJqkmkpsLCYC"},"source":["### tr_tresh calc"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gcpo4MGd9Wm4"},"outputs":[],"source":["res_wr = 0.6\n","# tr_thresh = 1\n","# tr_thresh = ((1 - res_wr) / res_wr) ** 0.5\n","tr_thresh = ((1 - res_wr) / res_wr) + 0.01\n","# tr_thresh = 2.6\n","print(\"res_wr :\", res_wr)\n","print(\"tr_thresh :\", tr_thresh)\n","\n","\n","#   단리    #\n","trade_num = 1000\n","asset = 1 # thousand USDT\n","test_loss_gap = 0.95  # fee adjusted\n","test_pr_gap = 1 + (1 - test_loss_gap) * tr_thresh\n","\n","test_loss_cnt = trade_num * (1 - res_wr)\n","test_pr_cnt = trade_num * res_wr\n","\n","test_trade_list = [test_pr_gap] * int(test_pr_cnt) + [test_loss_gap] * int(test_loss_cnt)\n","random.shuffle(test_trade_list)\n","# print(\"len(test_trade_list) :\", len(test_trade_list))\n","print(test_trade_list[:10])\n","print()\n","\n","# print(\"%.5f\" % np.cumprod(test_trade_list)[-1])\n","for tr_thresh_ in np.arange(1, 3, 0.2):\n","  if (1 + (1 - test_loss_gap) * tr_thresh_) ** test_pr_cnt * test_loss_gap ** test_loss_cnt > 1:\n","    break\n","print(\"복리를 위한 tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumprod(test_trade_list)[-1] :\", np.cumprod(test_trade_list)[-1])\n","print(\"total_pr : \", np.cumprod(test_trade_list)[-1])\n","print()\n","#   복리 tr_thresh  #\n","#   1. trade_num 에 영향 받지 않음\n","#   2. loss_gap 에 비례함\n","\n","for tr_thresh_ in np.arange(1, 3, 0.01):\n","  if ((1 - test_loss_gap) * tr_thresh_) * test_pr_cnt + (test_loss_gap - 1) * test_loss_cnt > 0:\n","    break\n","np_test_trade = np.array(test_trade_list) - 1\n","print(np_test_trade[:10])\n","# print(\"%.3f\" % )\n","print(\"단리를 위한 tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumsum(np_test_trade)[-1] :\", np.cumsum(np_test_trade)[-1])\n","print(\"total_pr : \", 1 + np.cumsum(np_test_trade)[-1])\n"]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":["Ic1mfmwWCIBu","VdukVo5-Suzj","Bw5JibDKSuzj","Pe0QpnORSuzk","E0n53hflJbnp","MlFkpO1MSuzl","t1E_eAyPSuzm","nUs4fjVHSuzl","WVAKq3i8Suzm","L7l5CTJfSuzn","x_XGJqBi8Jex","epgS5Dksu-HX","x2yj2SwAXDLp","xpyP5t8Ht_pE","dzla8i9_ysmP","zQ-roiifspcX","X0FsT-8FZRti","13a-U32Uy50I","TBE0l6dHRYrE","Qys2Bw5Ou3u9","tApzvz_gK9lR","2gxvme1PC6ha","5la6usMOFzkX","OJqkmkpsLCYC"],"name":"stem3_51_vec_backi2(0403_point2_vecto).ipynb","toc_visible":true,"provenance":[],"machine_shape":"hm","authorship_tag":"ABX9TyNLCz0WvRUW0oO2sZ2y2IAx"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}