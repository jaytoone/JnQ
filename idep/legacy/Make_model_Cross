{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Make_model_Cross","provenance":[{"file_id":"16vvpYLDxnjas3O39oRbr2uR-DjJ0A4oV","timestamp":1579008418541}],"collapsed_sections":[],"machine_shape":"hm"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"BfHamvp0-kV8","colab_type":"code","outputId":"b1ebba07-94ae-40bb-cb10-8df6c3ef80bf","executionInfo":{"status":"ok","timestamp":1583542729577,"user_tz":-540,"elapsed":652,"user":{"displayName":"J 1","photoUrl":"","userId":"08178289703395036410"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["from google.colab import drive\n","\n","drive.mount('/content/gdrive')"],"execution_count":7,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"l9kMVYfN4p_J","colab_type":"code","colab":{}},"source":["import pandas as pd\n","import numpy as np\n","from matplotlib import pyplot as plt\n","import scipy.misc \n","from math import sqrt \n","import itertools\n","from IPython.display import display\n","%matplotlib inline"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"TkK_cm7d3sQe","colab_type":"code","colab":{}},"source":["input_data_length = 30\n","model_num = 69"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Dd8ivd1z46ZA","colab_type":"code","outputId":"3ea31db5-3cdc-4bd9-98ab-7c569da3a9b9","executionInfo":{"status":"ok","timestamp":1583544029067,"user_tz":-540,"elapsed":47205,"user":{"displayName":"J 1","photoUrl":"","userId":"08178289703395036410"}},"colab":{"base_uri":"https://localhost:8080/","height":52}},"source":["file_cnt = 1\n","Made_X = None\n","Made_Y = None\n","while True:\n","\n","    try:  \n","      result_x = np.load('/content/gdrive/My Drive/Colab Notebooks/Made_X/Made_X %s_%s %s.npy' % (input_data_length, model_num, file_cnt)).astype(np.float) / 255.\n","      result_y = np.load('/content/gdrive/My Drive/Colab Notebooks/Made_X/Made_Y %s_%s %s.npy' % (input_data_length, model_num, file_cnt)).astype(np.float).reshape(-1, 1)\n","      file_cnt += 1\n","\n","      if Made_X is None:\n","\n","        Made_X = result_x\n","        Made_Y = result_y\n","        break\n","\n","      else:\n","\n","        Made_X = np.vstack((Made_X, result_x))\n","        Made_Y = np.vstack((Made_Y, result_y))\n","      \n","      print(len(Made_X))\n","\n","    except Exception as e:\n","      break\n","      print(e)\n","\n","\n","print(Made_X.shape)\n","print(Made_Y.shape)"],"execution_count":4,"outputs":[{"output_type":"stream","text":["(5391, 300, 300, 3)\n","(5391, 1)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"VRjo1aMj5DNN","colab_type":"code","colab":{}},"source":["row = Made_X.shape[1]\n","col = Made_X.shape[2]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"kJ-ure7y5ElN","colab_type":"code","outputId":"c742f6bc-c3b8-4a88-bdce-b8faaf13e06b","executionInfo":{"status":"error","timestamp":1583542675512,"user_tz":-540,"elapsed":71591,"user":{"displayName":"J 1","photoUrl":"","userId":"08178289703395036410"}},"colab":{"base_uri":"https://localhost:8080/","height":52}},"source":["from sklearn.model_selection import train_test_split\n","\n","X_train, Y_train, X_val, Y_val = train_test_split(Made_X, Made_Y, test_size=0.3, random_state=307)\n","\n","print(X_train.shape)\n","print(X_val.shape)\n","\n","#       Class_Weight      #\n","\n","from sklearn.utils import class_weight\n","\n","class_weights = class_weight.compute_class_weight('balanced', np.unique(Y_train.reshape(-1, )), Y_train.reshape(-1, ))\n","print(class_weights)\n","\n","num_classes = 2\n","\n","Y_train = np_utils.to_categorical(Y_train, num_classes)\n","Y_val = np_utils.to_categorical(Y_val, num_classes)\n","print(Y_train.shape)\n","print(Y_val.shape)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["(3773, 300, 300, 3)\n","(3773, 1)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"SNxRwrqr5IbF","colab_type":"code","colab":{}},"source":["from keras.utils import np_utils\n","from keras.preprocessing.image import ImageDataGenerator \n","\n","datagen = ImageDataGenerator( \n","    fill_mode = 'nearest'\n","    )\n","\n","testgen = ImageDataGenerator( \n","    )\n","\n","batch_size = 16"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"xQCsyuqj5KBF","colab_type":"code","outputId":"2c9356ce-8d8c-4f9a-8d7c-1ab2386f9b11","executionInfo":{"status":"ok","timestamp":1580981808207,"user_tz":-540,"elapsed":4924,"user":{"displayName":"J 1","photoUrl":"","userId":"08178289703395036410"}},"colab":{"base_uri":"https://localhost:8080/","height":575}},"source":["for X_batch, _ in datagen.flow(X_train, Y_train, batch_size=9):\n","    for i in range(0, 9): \n","        plt.axis('off') \n","        plt.subplot(330 + 1 + i) \n","        plt.imshow(X_batch[i].reshape(input_data_length, col), cmap=plt.get_cmap('gray'))\n","    plt.axis('off') \n","    plt.show() \n","    break\n","    \n"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"image/png":"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\nhuYD5W677bbI99xzT+QHHngg8vz8fCcPCLAauR5tqkRVpcB666cezbNWE28vAIAiDG4AAEW0VqV5\nyS7Xpvv37488MTER+fOf/3zkW265pZMHBOilnx2j+TN5p5eqFFgPq61H3VUKAHABMbgBABSx8prc\n/9dUS9x1112RH3744cjveMc71vBYAO2aKtGmetT9pMB6WEs92s97yoobAEARBjcAgCJaq9KmJbv8\n91yVvutd74r8u7/7u2t9NoBGuSptygDrbS31qAN4AQAuIAY3AIAi+t5Vmg/gzfkNb3hD5BtvvDHy\n5z73uch333332T4fQE/9HFQJsN7WUo8uLy+v+P1W3AAAijC4AQAU0do15Eq0aYdp/sz73//+yH//\n938fWVUKAGwEg6hHMytuAABFGNwAAIro+wDeXInmJb78mfe9732RH3jggcif+tSn1vaUAAAFDKIe\nzay4AQAUYXADACiitSptqkSHh4cj5wp1586dkd/znvd08oAAAFUMoh7NrLgBABRhcAMAKGLNu0rz\n37Nbb711rc8GAFDKIOrRzIobAEARBjcAgCJaq9KmJb5cjzbl22+/fa3PBgBQylrq0bGxsRU/Y8UN\nAKAIgxsAQBFDTbtCAQA4v1hxAwAowuAGAFCEwQ0AoAiDGwBAEQY3AIAiDG4AAEUY3AAAijC4AQAU\nYXADACjC4AYAUITBDQCgCIMbAEARBjcAgCIMbgAARRjcAACKMLgBABRhcAMAKMLgBgBQhMENAKAI\ngxsAQBEGNwCAIgxuAABFGNwAAIowuAEAFGFwAwAowuAGAFCEwQ0AoAiDGwBAEQY3AIAiDG4AAEUY\n3AAAihhp+8cvfelLZ7r4H3nzm9881MX3APyvRx99tJP303vf+17vJ6Azhw4d6uTdtGfPnp7vJitu\nAABFGNwAAIowuAEAFGFwAwAowuAGAFBE667SxcXFyMPDw5E3bTLvAQCsNxMYAEARBjcAgCJaq9L5\n+flXPzjy6kdzVZpzrlOHhpxpCQDQJStuAABFGNwAAIporUpzDZp3mOYatKkqtfMUAKBbpisAgCIM\nbgAARbRWpWNjY5HPnDkTeXl5OfLS0lLPv9tVCgDQLStuAABFGNwAAIporUr/zwcbDuDNO0lPnz7d\nMwMAsHZW3AAAijC4AQAU0VqVNu0ebTpot6k2BQBg7ay4AQAUYXADACiitSodHR2N3LRjtOkO01yb\n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\nxli4hs2cAAAAAElFTkSuQmCC\n","text/plain":["<Figure size 1080x720 with 9 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"_pq66tOr5K2F","colab_type":"code","outputId":"2055cb9b-7830-4f00-94a9-839688e78d2e","executionInfo":{"status":"ok","timestamp":1580981808207,"user_tz":-540,"elapsed":4910,"user":{"displayName":"J 1","photoUrl":"","userId":"08178289703395036410"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["train_flow = datagen.flow(X_train, Y_train, batch_size=batch_size) \n","val_flow = testgen.flow(X_val, Y_val, batch_size=batch_size) \n","test_flow = testgen.flow(X_test, Y_test, batch_size=batch_size)\n","\n","print(len(train_flow))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["2492\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"V-63Kou25PjQ","colab_type":"code","colab":{}},"source":["from keras.utils import plot_model\n","from keras.models import Model\n","from keras.layers import Input, Dense, Flatten, Dropout, BatchNormalization\n","from keras.layers.convolutional import Conv2D\n","from keras.layers.pooling import MaxPooling2D\n","from keras.layers.merge import concatenate\n","from keras.optimizers import Adam, SGD\n","from keras.regularizers import l1, l2\n","from sklearn.metrics import confusion_matrix"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"VPqI8sWb5Qcl","colab_type":"code","colab":{}},"source":["# def FER_Model(input_shape=(input_data_length, col, 1)):\n","#     # first input model\n","#     visible = Input(shape=input_shape, name='input')\n","#     num_classes = 2\n","#     conv1_fit = 64\n","#     conv2_fit = 128\n","#     conv3_fit = 256\n","#     # conv4_fit = 256\n","#     # conv5_fit = 256\n","\n","#     #the 1-st block\n","#     conv1_1 = Conv2D(conv1_fit, kernel_size=3, activation='relu', padding='same', name = 'conv1_1')(visible)\n","#     conv1_1 = BatchNormalization()(conv1_1)\n","#     conv1_2 = Conv2D(conv1_fit, kernel_size=3, activation='relu', padding='same', name = 'conv1_2')(conv1_1)\n","#     conv1_2 = BatchNormalization()(conv1_2)\n","#     pool1_1 = MaxPooling2D(pool_size=(2,2), name = 'pool1_1')(conv1_2)\n","#     drop1_1 = Dropout(0.3, name = 'drop1_1')(pool1_1)\n","\n","#     #the 2-nd block\n","#     conv2_1 = Conv2D(conv2_fit, kernel_size=3, activation='relu', padding='same', name = 'conv2_1')(drop1_1)\n","#     conv2_1 = BatchNormalization()(conv2_1)\n","#     conv2_2 = Conv2D(conv2_fit, kernel_size=3, activation='relu', padding='same', name = 'conv2_2')(conv2_1)\n","#     conv2_2 = BatchNormalization()(conv2_2)\n","#     conv2_3 = Conv2D(conv2_fit, kernel_size=3, activation='relu', padding='same', name = 'conv2_3')(conv2_2)\n","#     conv2_3 = BatchNormalization()(conv2_3)\n","#     pool2_1 = MaxPooling2D(pool_size=(2,2), name = 'pool2_1')(conv2_3)\n","#     drop2_1 = Dropout(0.3, name = 'drop2_1')(pool2_1)\n","\n","#      #the 3-rd block\n","#     conv3_1 = Conv2D(conv3_fit, kernel_size=3, activation='relu', padding='same', name = 'conv3_1')(drop2_1)\n","#     conv3_1 = BatchNormalization()(conv3_1)\n","#     conv3_2 = Conv2D(conv3_fit, kernel_size=3, activation='relu', padding='same', name = 'conv3_2')(conv3_1)\n","#     conv3_2 = BatchNormalization()(conv3_2)\n","#     conv3_3 = Conv2D(conv3_fit, kernel_size=3, activation='relu', padding='same', name = 'conv3_3')(conv3_2)\n","#     conv3_3 = BatchNormalization()(conv3_3)\n","#     conv3_4 = Conv2D(conv3_fit, kernel_size=3, activation='relu', padding='same', name = 'conv3_4')(conv3_3)\n","#     conv3_4 = BatchNormalization()(conv3_4)\n","#     pool3_1 = MaxPooling2D(pool_size=(input_data_length // 4,1), name = 'pool3_1')(conv3_4)\n","#     drop3_1 = Dropout(0.3, name = 'drop3_1')(pool3_1)\n","\n","#     # #the 4-th block\n","#     # conv4_1 = Conv2D(1024, kernel_size=3, activation='relu', padding='same', name = 'conv4_1')(drop3_1)\n","#     # conv4_1 = BatchNormalization()(conv4_1)\n","#     # conv4_2 = Conv2D(1024, kernel_size=3, activation='relu', padding='same', name = 'conv4_2')(conv4_1)\n","#     # conv4_2 = BatchNormalization()(conv4_2)\n","#     # conv4_3 = Conv2D(1024, kernel_size=3, activation='relu', padding='same', name = 'conv4_3')(conv4_2)\n","#     # conv4_3 = BatchNormalization()(conv4_3)\n","#     # conv4_4 = Conv2D(1024, kernel_size=3, activation='relu', padding='same', name = 'conv4_4')(conv4_3)\n","#     # conv4_4 = BatchNormalization()(conv4_4)\n","#     # pool4_1 = MaxPooling2D(pool_size=(2,2), name = 'pool4_1')(conv4_4)\n","#     # drop4_1 = Dropout(0.3, name = 'drop4_1')(pool4_1)\n","    \n","#     # #the 5-th block\n","#     # conv5_1 = Conv2D(512, kernel_size=3, activation='relu', padding='same', name = 'conv5_1')(drop4_1)\n","#     # conv5_1 = BatchNormalization()(conv5_1)\n","#     # conv5_2 = Conv2D(512, kernel_size=3, activation='relu', padding='same', name = 'conv5_2')(conv5_1)\n","#     # conv5_2 = BatchNormalization()(conv5_2)\n","#     # conv5_3 = Conv2D(512, kernel_size=3, activation='relu', padding='same', name = 'conv5_3')(conv5_2)\n","#     # conv5_3 = BatchNormalization()(conv5_3)\n","#     # conv5_4 = Conv2D(512, kernel_size=3, activation='relu', padding='same', name = 'conv5_4')(conv5_3)\n","#     # conv5_3 = BatchNormalization()(conv5_3)\n","#     # pool5_1 = MaxPooling2D(pool_size=(2,2), name = 'pool5_1')(conv5_4)\n","#     # drop5_1 = Dropout(0.3, name = 'drop5_1')(pool5_1)\n","\n","#     #Flatten and output\n","#     flatten = Flatten(name = 'flatten')(drop3_1)\n","#     output = Dense(num_classes, activation='softmax', name = 'output')(flatten)\n","\n","#     # create model \n","#     model = Model(inputs =visible, outputs = output)\n","#     # summary layers\n","#     print(model.summary())\n","    \n","#     return model"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"2Fl_xb6KMn4T","colab_type":"code","colab":{}},"source":["# def FER_Model(input_shape=(input_data_length, col, 1)):\n","#     # first input model\n","#     visible = Input(shape=input_shape, name='input')\n","#     num_classes = 2\n","#     conv1_filt = 128\n","#     conv2_filt = 128\n","#     conv3_filt = 128\n","    \n","#     model = Conv2D(filters=conv1_filt, kernel_size=(3, 3), padding='SAME', activation='relu', input_shape=(input_data_length, col, 1))(visible)\n","#     model = Conv2D(filters=conv1_filt, kernel_size=(3, 3), padding='SAME', activation='relu')(model)\n","#     model = Conv2D(filters=conv1_filt, kernel_size=(3, 3), padding='SAME', activation='relu')(model)\n","#     model = Conv2D(filters=conv1_filt, kernel_size=(3, 3), padding='SAME', activation='relu')(model)\n","#     model = BatchNormalization(momentum=0.15)(model)\n","#     model = MaxPooling2D(pool_size=(2, 2))(model)\n","#     model = Conv2D(filters=32, kernel_size=(5, 5), padding='SAME', activation='relu')(model)\n","#     model = Dropout(rate=0.3)(model)\n","\n","#     model = Conv2D(filters=conv2_filt, kernel_size=(3, 3), padding='SAME', activation='relu')(model)\n","#     model = Conv2D(filters=conv2_filt, kernel_size=(3, 3), padding='SAME', activation='relu')(model)\n","#     model = Conv2D(filters=conv2_filt, kernel_size=(3, 3), padding='SAME', activation='relu')(model)\n","#     model = Conv2D(filters=conv2_filt, kernel_size=(3, 3), padding='SAME', activation='relu')(model)\n","#     model = BatchNormalization(momentum=0.15)(model)\n","#     model = MaxPooling2D(pool_size=(2, 2))(model)\n","#     model = Conv2D(filters=64, kernel_size=(5, 5), padding='SAME', activation='relu')(model)\n","#     model = BatchNormalization(momentum=0.15)(model)\n","#     model = Dropout(rate=0.3)(model)\n","\n","#     model = Conv2D(filters=conv3_filt, kernel_size=(3, 3), padding='SAME', activation='relu')(model)\n","#     model = Conv2D(filters=conv3_filt, kernel_size=(3, 3), padding='SAME', activation='relu')(model)\n","#     model = Conv2D(filters=conv3_filt, kernel_size=(3, 3), padding='SAME', activation='relu')(model)\n","#     model = Conv2D(filters=conv3_filt, kernel_size=(3, 3), padding='SAME', activation='relu')(model)\n","#     model = BatchNormalization(momentum=0.15)(model)\n","#     model = MaxPooling2D(pool_size=(input_data_length // 4, 1))(model)\n","#     model = Conv2D(filters=conv3_filt, kernel_size=(5, 5), padding='SAME', activation='relu')(model)\n","#     model = BatchNormalization(momentum=0.15)(model)\n","#     model = Dropout(rate=0.3)(model)\n","\n","#     # model = Conv2D(filters=256, kernel_size=(3, 3), padding='SAME', activation='relu')(model)\n","#     # model = Conv2D(filters=256, kernel_size=(3, 3), padding='SAME', activation='relu')(model)\n","#     # model = Conv2D(filters=256, kernel_size=(3, 3), padding='SAME', activation='relu')(model)\n","#     # model = Conv2D(filters=256, kernel_size=(3, 3), padding='SAME', activation='relu')(model)\n","#     # model = BatchNormalization(momentum=0.15)(model)\n","#     # model = MaxPooling2D(pool_size=(2, 2))(model)\n","#     # model = Conv2D(filters=256, kernel_size=(5, 5), padding='SAME', activation='relu')(model)\n","#     # model = BatchNormalization(momentum=0.15)(model)\n","#     # model = Dropout(rate=0.3)(model)\n","\n","#     model = Flatten()(model)\n","#     model = Dense(512, activation = \"relu\")(model)\n","#     model = Dropout(rate=0.3)(model)\n","#     dense = Dense(256, activation = \"relu\")(model)\n","#     output = Dense(num_classes, activation='softmax', name = 'output')(dense)\n","\n","#     # create model \n","#     model = Model(inputs =visible, outputs = output)\n","#     # summary layers\n","#     print(model.summary())\n","\n","#     return model"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"n412o2iXhmOQ","colab_type":"code","colab":{}},"source":["def FER_Model(input_shape=(input_data_length, col, 1)):\n","    # first input model\n","    visible = Input(shape=input_shape, name='input')\n","    conv1_fit = 100\n","    conv2_fit = 100\n","    conv3_fit = 128\n","    # conv4_fit = 256\n","    # conv5_fit = 256\n","\n","    #the 1-st block\n","    conv1_1 = Conv2D(conv1_fit, kernel_size=3, activation='relu', padding='same', name = 'conv1_1')(visible)\n","    conv1_1 = BatchNormalization()(conv1_1)\n","    # conv1_2 = Conv2D(conv1_fit, kernel_size=3, activation='relu', padding='same', name = 'conv1_2')(conv1_1)\n","    # conv1_2 = BatchNormalization()(conv1_2)\n","    pool1_1 = MaxPooling2D(pool_size=(2,2), name = 'pool1_1')(conv1_1)\n","    # drop1_1 = Dropout(0.3, name = 'drop1_1')(pool1_1)\n","\n","    #the 2-nd block\n","    conv2_1 = Conv2D(conv2_fit, kernel_size=3, activation='relu', padding='same', name = 'conv2_1')(pool1_1)\n","    conv2_1 = BatchNormalization()(conv2_1)\n","    # conv2_2 = Conv2D(conv2_fit, kernel_size=3, activation='relu', padding='same', name = 'conv2_2')(conv2_1)\n","    # conv2_2 = BatchNormalization()(conv2_2)\n","    # conv2_3 = Conv2D(conv2_fit, kernel_size=3, activation='relu', padding='same', name = 'conv2_3')(conv2_2)\n","    # conv2_3 = BatchNormalization()(conv2_3)\n","    pool2_1 = MaxPooling2D(pool_size=(2,2), name = 'pool2_1')(conv2_1)\n","    drop2_1 = Dropout(0.3, name = 'drop2_1')(pool2_1)\n","\n","     #the 3-rd block\n","    # conv3_1 = Conv2D(conv3_fit, kernel_size=(3,1), activation='relu', padding='same', name = 'conv3_1')(pool2_1)\n","    # conv3_1 = BatchNormalization()(conv3_1)\n","    # # conv3_2 = Conv2D(conv3_fit, kernel_size=3, activation='relu', padding='same', name = 'conv3_2')(conv3_1)\n","    # # conv3_2 = BatchNormalization()(conv3_2)\n","    # # conv3_3 = Conv2D(conv3_fit, kernel_size=3, activation='relu', padding='same', name = 'conv3_3')(conv3_2)\n","    # # conv3_3 = BatchNormalization()(conv3_3)\n","    # # conv3_4 = Conv2D(conv3_fit, kernel_size=3, activation='relu', padding='same', name = 'conv3_4')(conv3_3)\n","    # # conv3_4 = BatchNormalization()(conv3_4)\n","    # pool3_1 = MaxPooling2D(pool_size=(input_data_length // 4,1), name = 'pool3_1')(conv3_1)\n","    # drop3_1 = Dropout(0.3, name = 'drop3_1')(pool3_1)\n","\n","    # #the 4-th block\n","    # conv4_1 = Conv2D(1024, kernel_size=3, activation='relu', padding='same', name = 'conv4_1')(drop3_1)\n","    # conv4_1 = BatchNormalization()(conv4_1)\n","    # conv4_2 = Conv2D(1024, kernel_size=3, activation='relu', padding='same', name = 'conv4_2')(conv4_1)\n","    # conv4_2 = BatchNormalization()(conv4_2)\n","    # conv4_3 = Conv2D(1024, kernel_size=3, activation='relu', padding='same', name = 'conv4_3')(conv4_2)\n","    # conv4_3 = BatchNormalization()(conv4_3)\n","    # conv4_4 = Conv2D(1024, kernel_size=3, activation='relu', padding='same', name = 'conv4_4')(conv4_3)\n","    # conv4_4 = BatchNormalization()(conv4_4)\n","    # pool4_1 = MaxPooling2D(pool_size=(2,2), name = 'pool4_1')(conv4_4)\n","    # drop4_1 = Dropout(0.3, name = 'drop4_1')(pool4_1)\n","    \n","    # #the 5-th block\n","    # conv5_1 = Conv2D(512, kernel_size=3, activation='relu', padding='same', name = 'conv5_1')(drop4_1)\n","    # conv5_1 = BatchNormalization()(conv5_1)\n","    # conv5_2 = Conv2D(512, kernel_size=3, activation='relu', padding='same', name = 'conv5_2')(conv5_1)\n","    # conv5_2 = BatchNormalization()(conv5_2)\n","    # conv5_3 = Conv2D(512, kernel_size=3, activation='relu', padding='same', name = 'conv5_3')(conv5_2)\n","    # conv5_3 = BatchNormalization()(conv5_3)\n","    # conv5_4 = Conv2D(512, kernel_size=3, activation='relu', padding='same', name = 'conv5_4')(conv5_3)\n","    # conv5_3 = BatchNormalization()(conv5_3)\n","    # pool5_1 = MaxPooling2D(pool_size=(2,2), name = 'pool5_1')(conv5_4)\n","    # drop5_1 = Dropout(0.3, name = 'drop5_1')(pool5_1)\n","\n","    #Flatten and output\n","    flatten = Flatten(name = 'flatten')(drop2_1)\n","    dense = Dense(100, activation='relu', name='dense')(flatten)\n","    output = Dense(num_classes, activation='softmax', name = 'output')(dense)\n","\n","    # create model \n","    model = Model(inputs =visible, outputs = output)\n","    # summary layers\n","    print(model.summary())\n","    \n","    return model"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"_wKiQMu35Rmd","colab_type":"code","outputId":"be99634f-502a-4757-bef4-7dbb9489df4e","executionInfo":{"status":"ok","timestamp":1580981816655,"user_tz":-540,"elapsed":13311,"user":{"displayName":"J 1","photoUrl":"","userId":"08178289703395036410"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["model = FER_Model()\n","opt = Adam(lr=0.0001, decay=1e-6)\n","model.compile(loss='categorical_crossentropy', optimizer=opt, metrics=['accuracy'])"],"execution_count":0,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:541: The name tf.placeholder is deprecated. Please use tf.compat.v1.placeholder instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:4432: The name tf.random_uniform is deprecated. Please use tf.random.uniform instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:66: The name tf.get_default_graph is deprecated. Please use tf.compat.v1.get_default_graph instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:190: The name tf.get_default_session is deprecated. Please use tf.compat.v1.get_default_session instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:197: The name tf.ConfigProto is deprecated. Please use tf.compat.v1.ConfigProto instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:203: The name tf.Session is deprecated. Please use tf.compat.v1.Session instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:207: The name tf.global_variables is deprecated. Please use tf.compat.v1.global_variables instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:216: The name tf.is_variable_initialized is deprecated. Please use tf.compat.v1.is_variable_initialized instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:223: The name tf.variables_initializer is deprecated. Please use tf.compat.v1.variables_initializer instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:2041: The name tf.nn.fused_batch_norm is deprecated. Please use tf.compat.v1.nn.fused_batch_norm instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:148: The name tf.placeholder_with_default is deprecated. Please use tf.compat.v1.placeholder_with_default instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:4267: The name tf.nn.max_pool is deprecated. Please use tf.nn.max_pool2d instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:3733: calling dropout (from tensorflow.python.ops.nn_ops) with keep_prob is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use `rate` instead of `keep_prob`. Rate should be set to `rate = 1 - keep_prob`.\n","Model: \"model_1\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","input (InputLayer)           (None, 54, 6, 1)          0         \n","_________________________________________________________________\n","conv1_1 (Conv2D)             (None, 54, 6, 100)        1000      \n","_________________________________________________________________\n","batch_normalization_1 (Batch (None, 54, 6, 100)        400       \n","_________________________________________________________________\n","pool1_1 (MaxPooling2D)       (None, 27, 3, 100)        0         \n","_________________________________________________________________\n","conv2_1 (Conv2D)             (None, 27, 3, 100)        90100     \n","_________________________________________________________________\n","batch_normalization_2 (Batch (None, 27, 3, 100)        400       \n","_________________________________________________________________\n","pool2_1 (MaxPooling2D)       (None, 13, 1, 100)        0         \n","_________________________________________________________________\n","drop2_1 (Dropout)            (None, 13, 1, 100)        0         \n","_________________________________________________________________\n","flatten (Flatten)            (None, 1300)              0         \n","_________________________________________________________________\n","dense (Dense)                (None, 100)               130100    \n","_________________________________________________________________\n","output (Dense)               (None, 3)                 303       \n","=================================================================\n","Total params: 222,303\n","Trainable params: 221,903\n","Non-trainable params: 400\n","_________________________________________________________________\n","None\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/optimizers.py:793: The name tf.train.Optimizer is deprecated. Please use tf.compat.v1.train.Optimizer instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:3576: The name tf.log is deprecated. Please use tf.math.log instead.\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ppVKJC_jCBZy","colab_type":"code","colab":{}},"source":["# callbacks log 를 저장시키는 방법 예시\n","from keras.callbacks import Callback\n","import pickle\n","\n","class Checkpoint_History(Callback):\n","\n","    def on_train_begin(self, logs={}):\n","        self.loss = []\n","        self.val_loss = []\n","        self.acc = []\n","        self.val_acc = []      \n","\n","    def on_batch_end(self, batch, logs={}):\n","        self.loss.append(logs.get('loss'))\n","        self.val_loss.append(logs.get('val_loss'))\n","        self.acc.append(logs.get('acc'))\n","        self.val_acc.append(logs.get('val_acc'))\n","    "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"PdLXhF515Sq9","colab_type":"code","colab":{}},"source":["from keras.callbacks import ModelCheckpoint, EarlyStopping\n","filepath=\"/content/gdrive/My Drive/Colab Notebooks/model/rapid_ascending %s_%s.hdf5\" % (input_data_length, model_num)\n","checkpoint = ModelCheckpoint(filepath, monitor='val_loss', verbose=1, save_best_only=True, mode='min')\n","checkpoint2 = Checkpoint_History()\n","checkpoint3 = EarlyStopping(monitor='val_loss', patience=15)\n","callbacks_list = [checkpoint, checkpoint2, checkpoint3]\n","\n","# keras.callbacks.Callback 로 부터 log 를 받아와 history log 를 작성할 수 있다."],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Lplr9oG45TVN","colab_type":"code","outputId":"ed9bfbe2-66ab-4a90-e92a-91ae7558bdf4","executionInfo":{"status":"ok","timestamp":1580987354104,"user_tz":-540,"elapsed":3720338,"user":{"displayName":"J 1","photoUrl":"","userId":"08178289703395036410"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["# we iterate 200 times over the entire training set\n","num_epochs = 100\n","\n","#     모델을 이어서 학습시키는 경우     #\n","# model = load_model('/content/gdrive/My Drive/Colab Notebooks/model/rapid_ascending %s.hdf5' % input_data_length)\n","\n","history = model.fit_generator(train_flow, \n","                    steps_per_epoch=len(X_train) / batch_size, \n","                    epochs=num_epochs,  \n","                    verbose=2,  \n","                    # class_weight=data_weight,\n","                    callbacks=callbacks_list,\n","                    validation_data=val_flow,  \n","                    validation_steps=len(X_val) / batch_size,\n","                    shuffle=False)\n"],"execution_count":0,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow_core/python/ops/math_grad.py:1424: where (from tensorflow.python.ops.array_ops) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Use tf.where in 2.0, which has the same broadcast rule as np.where\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:1033: The name tf.assign_add is deprecated. Please use tf.compat.v1.assign_add instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:1020: The name tf.assign is deprecated. Please use tf.compat.v1.assign instead.\n","\n","Epoch 1/100\n"," - 74s - loss: 0.6972 - acc: 0.7774 - val_loss: 0.6388 - val_acc: 0.8012\n","\n","Epoch 00001: val_loss improved from inf to 0.63877, saving model to /content/gdrive/My Drive/Colab Notebooks/model/rapid_ascending 54_21.hdf5\n","Epoch 2/100\n"," - 66s - loss: 0.6780 - acc: 0.7797 - val_loss: 0.6404 - val_acc: 0.8012\n","\n","Epoch 00002: val_loss did not improve from 0.63877\n","Epoch 3/100\n"," - 66s - loss: 0.6764 - acc: 0.7797 - val_loss: 0.6324 - val_acc: 0.8012\n","\n","Epoch 00003: val_loss improved from 0.63877 to 0.63242, saving model to /content/gdrive/My Drive/Colab Notebooks/model/rapid_ascending 54_21.hdf5\n","Epoch 4/100\n"," - 66s - loss: 0.6757 - acc: 0.7798 - val_loss: 0.6291 - val_acc: 0.8012\n","\n","Epoch 00004: val_loss improved from 0.63242 to 0.62907, saving model to /content/gdrive/My Drive/Colab Notebooks/model/rapid_ascending 54_21.hdf5\n","Epoch 5/100\n"," - 66s - loss: 0.6753 - acc: 0.7798 - val_loss: 0.6367 - val_acc: 0.8012\n","\n","Epoch 00005: val_loss did not improve from 0.62907\n","Epoch 6/100\n"," - 66s - loss: 0.6750 - acc: 0.7798 - val_loss: 0.6302 - val_acc: 0.8012\n","\n","Epoch 00006: val_loss did not improve from 0.62907\n","Epoch 7/100\n"," - 66s - loss: 0.6744 - acc: 0.7797 - val_loss: 0.6325 - val_acc: 0.8012\n","\n","Epoch 00007: val_loss did not improve from 0.62907\n","Epoch 8/100\n"," - 66s - loss: 0.6746 - acc: 0.7797 - val_loss: 0.6328 - val_acc: 0.8012\n","\n","Epoch 00008: val_loss did not improve from 0.62907\n","Epoch 9/100\n"," - 65s - loss: 0.6743 - acc: 0.7798 - val_loss: 0.6310 - val_acc: 0.8012\n","\n","Epoch 00009: val_loss did not improve from 0.62907\n","Epoch 10/100\n"," - 65s - loss: 0.6742 - acc: 0.7798 - val_loss: 0.6323 - val_acc: 0.8012\n","\n","Epoch 00010: val_loss did not improve from 0.62907\n","Epoch 11/100\n"," - 65s - loss: 0.6740 - acc: 0.7797 - val_loss: 0.6293 - val_acc: 0.8012\n","\n","Epoch 00011: val_loss did not improve from 0.62907\n","Epoch 12/100\n"," - 66s - loss: 0.6739 - acc: 0.7798 - val_loss: 0.6294 - val_acc: 0.8012\n","\n","Epoch 00012: val_loss did not improve from 0.62907\n","Epoch 13/100\n"," - 66s - loss: 0.6737 - acc: 0.7797 - val_loss: 0.6296 - val_acc: 0.8012\n","\n","Epoch 00013: val_loss did not improve from 0.62907\n","Epoch 14/100\n"," - 65s - loss: 0.6738 - acc: 0.7798 - val_loss: 0.6294 - val_acc: 0.8012\n","\n","Epoch 00014: val_loss did not improve from 0.62907\n","Epoch 15/100\n"," - 65s - loss: 0.6736 - acc: 0.7798 - val_loss: 0.6307 - val_acc: 0.8012\n","\n","Epoch 00015: val_loss did not improve from 0.62907\n","Epoch 16/100\n"," - 65s - loss: 0.6737 - acc: 0.7797 - val_loss: 0.6286 - val_acc: 0.8012\n","\n","Epoch 00016: val_loss improved from 0.62907 to 0.62862, saving model to /content/gdrive/My Drive/Colab Notebooks/model/rapid_ascending 54_21.hdf5\n","Epoch 17/100\n"," - 65s - loss: 0.6734 - acc: 0.7798 - val_loss: 0.6316 - val_acc: 0.8012\n","\n","Epoch 00017: val_loss did not improve from 0.62862\n","Epoch 18/100\n"," - 65s - loss: 0.6732 - acc: 0.7798 - val_loss: 0.6286 - val_acc: 0.8012\n","\n","Epoch 00018: val_loss improved from 0.62862 to 0.62860, saving model to /content/gdrive/My Drive/Colab Notebooks/model/rapid_ascending 54_21.hdf5\n","Epoch 19/100\n"," - 65s - loss: 0.6733 - acc: 0.7797 - val_loss: 0.6284 - val_acc: 0.8012\n","\n","Epoch 00019: val_loss improved from 0.62860 to 0.62838, saving model to /content/gdrive/My Drive/Colab Notebooks/model/rapid_ascending 54_21.hdf5\n","Epoch 20/100\n"," - 64s - loss: 0.6731 - acc: 0.7797 - val_loss: 0.6311 - val_acc: 0.8012\n","\n","Epoch 00020: val_loss did not improve from 0.62838\n","Epoch 21/100\n"," - 65s - loss: 0.6731 - acc: 0.7797 - val_loss: 0.6298 - val_acc: 0.8012\n","\n","Epoch 00021: val_loss did not improve from 0.62838\n","Epoch 22/100\n"," - 65s - loss: 0.6728 - acc: 0.7797 - val_loss: 0.6298 - val_acc: 0.8012\n","\n","Epoch 00022: val_loss did not improve from 0.62838\n","Epoch 23/100\n"," - 65s - loss: 0.6728 - acc: 0.7797 - val_loss: 0.6312 - val_acc: 0.8012\n","\n","Epoch 00023: val_loss did not improve from 0.62838\n","Epoch 24/100\n"," - 65s - loss: 0.6729 - acc: 0.7798 - val_loss: 0.6305 - val_acc: 0.8012\n","\n","Epoch 00024: val_loss did not improve from 0.62838\n","Epoch 25/100\n"," - 64s - loss: 0.6725 - acc: 0.7797 - val_loss: 0.6309 - val_acc: 0.8012\n","\n","Epoch 00025: val_loss did not improve from 0.62838\n","Epoch 26/100\n"," - 65s - loss: 0.6728 - acc: 0.7798 - val_loss: 0.6282 - val_acc: 0.8012\n","\n","Epoch 00026: val_loss improved from 0.62838 to 0.62822, saving model to /content/gdrive/My Drive/Colab Notebooks/model/rapid_ascending 54_21.hdf5\n","Epoch 27/100\n"," - 65s - loss: 0.6726 - acc: 0.7797 - val_loss: 0.6285 - val_acc: 0.8012\n","\n","Epoch 00027: val_loss did not improve from 0.62822\n","Epoch 28/100\n"," - 65s - loss: 0.6726 - acc: 0.7797 - val_loss: 0.6306 - val_acc: 0.8012\n","\n","Epoch 00028: val_loss did not improve from 0.62822\n","Epoch 29/100\n"," - 64s - loss: 0.6726 - acc: 0.7798 - val_loss: 0.6306 - val_acc: 0.8012\n","\n","Epoch 00029: val_loss did not improve from 0.62822\n","Epoch 30/100\n"," - 64s - loss: 0.6724 - acc: 0.7798 - val_loss: 0.6297 - val_acc: 0.8012\n","\n","Epoch 00030: val_loss did not improve from 0.62822\n","Epoch 31/100\n"," - 65s - loss: 0.6726 - acc: 0.7798 - val_loss: 0.6285 - val_acc: 0.8012\n","\n","Epoch 00031: val_loss did not improve from 0.62822\n","Epoch 32/100\n"," - 65s - loss: 0.6724 - acc: 0.7798 - val_loss: 0.6296 - val_acc: 0.8012\n","\n","Epoch 00032: val_loss did not improve from 0.62822\n","Epoch 33/100\n"," - 65s - loss: 0.6725 - acc: 0.7797 - val_loss: 0.6296 - val_acc: 0.8012\n","\n","Epoch 00033: val_loss did not improve from 0.62822\n","Epoch 34/100\n"," - 64s - loss: 0.6725 - acc: 0.7797 - val_loss: 0.6289 - val_acc: 0.8012\n","\n","Epoch 00034: val_loss did not improve from 0.62822\n","Epoch 35/100\n"," - 64s - loss: 0.6723 - acc: 0.7798 - val_loss: 0.6296 - val_acc: 0.8012\n","\n","Epoch 00035: val_loss did not improve from 0.62822\n","Epoch 36/100\n"," - 64s - loss: 0.6723 - acc: 0.7797 - val_loss: 0.6284 - val_acc: 0.8012\n","\n","Epoch 00036: val_loss did not improve from 0.62822\n","Epoch 37/100\n"," - 65s - loss: 0.6722 - acc: 0.7798 - val_loss: 0.6303 - val_acc: 0.8012\n","\n","Epoch 00037: val_loss did not improve from 0.62822\n","Epoch 38/100\n"," - 64s - loss: 0.6722 - acc: 0.7798 - val_loss: 0.6318 - val_acc: 0.8012\n","\n","Epoch 00038: val_loss did not improve from 0.62822\n","Epoch 39/100\n"," - 64s - loss: 0.6720 - acc: 0.7797 - val_loss: 0.6302 - val_acc: 0.8012\n","\n","Epoch 00039: val_loss did not improve from 0.62822\n","Epoch 40/100\n"," - 64s - loss: 0.6721 - acc: 0.7797 - val_loss: 0.6313 - val_acc: 0.8012\n","\n","Epoch 00040: val_loss did not improve from 0.62822\n","Epoch 41/100\n"," - 64s - loss: 0.6719 - acc: 0.7798 - val_loss: 0.6281 - val_acc: 0.8012\n","\n","Epoch 00041: val_loss improved from 0.62822 to 0.62810, saving model to /content/gdrive/My Drive/Colab Notebooks/model/rapid_ascending 54_21.hdf5\n","Epoch 42/100\n"," - 64s - loss: 0.6723 - acc: 0.7797 - val_loss: 0.6292 - val_acc: 0.8012\n","\n","Epoch 00042: val_loss did not improve from 0.62810\n","Epoch 43/100\n"," - 64s - loss: 0.6721 - acc: 0.7797 - val_loss: 0.6283 - val_acc: 0.8012\n","\n","Epoch 00043: val_loss did not improve from 0.62810\n","Epoch 44/100\n"," - 64s - loss: 0.6721 - acc: 0.7798 - val_loss: 0.6291 - val_acc: 0.8012\n","\n","Epoch 00044: val_loss did not improve from 0.62810\n","Epoch 45/100\n"," - 65s - loss: 0.6720 - acc: 0.7798 - val_loss: 0.6314 - val_acc: 0.8012\n","\n","Epoch 00045: val_loss did not improve from 0.62810\n","Epoch 46/100\n"," - 64s - loss: 0.6719 - acc: 0.7798 - val_loss: 0.6300 - val_acc: 0.8012\n","\n","Epoch 00046: val_loss did not improve from 0.62810\n","Epoch 47/100\n"," - 65s - loss: 0.6719 - acc: 0.7798 - val_loss: 0.6286 - val_acc: 0.8012\n","\n","Epoch 00047: val_loss did not improve from 0.62810\n","Epoch 48/100\n"," - 64s - loss: 0.6717 - acc: 0.7798 - val_loss: 0.6282 - val_acc: 0.8012\n","\n","Epoch 00048: val_loss did not improve from 0.62810\n","Epoch 49/100\n"," - 64s - loss: 0.6720 - acc: 0.7797 - val_loss: 0.6294 - val_acc: 0.8012\n","\n","Epoch 00049: val_loss did not improve from 0.62810\n","Epoch 50/100\n"," - 64s - loss: 0.6718 - acc: 0.7798 - val_loss: 0.6277 - val_acc: 0.8012\n","\n","Epoch 00050: val_loss improved from 0.62810 to 0.62771, saving model to /content/gdrive/My Drive/Colab Notebooks/model/rapid_ascending 54_21.hdf5\n","Epoch 51/100\n"," - 64s - loss: 0.6717 - acc: 0.7797 - val_loss: 0.6283 - val_acc: 0.8012\n","\n","Epoch 00051: val_loss did not improve from 0.62771\n","Epoch 52/100\n"," - 64s - loss: 0.6718 - acc: 0.7798 - val_loss: 0.6285 - val_acc: 0.8012\n","\n","Epoch 00052: val_loss did not improve from 0.62771\n","Epoch 53/100\n"," - 64s - loss: 0.6716 - acc: 0.7797 - val_loss: 0.6287 - val_acc: 0.8012\n","\n","Epoch 00053: val_loss did not improve from 0.62771\n","Epoch 54/100\n"," - 64s - loss: 0.6717 - acc: 0.7797 - val_loss: 0.6278 - val_acc: 0.8012\n","\n","Epoch 00054: val_loss did not improve from 0.62771\n","Epoch 55/100\n"," - 65s - loss: 0.6719 - acc: 0.7797 - val_loss: 0.6272 - val_acc: 0.8012\n","\n","Epoch 00055: val_loss improved from 0.62771 to 0.62723, saving model to /content/gdrive/My Drive/Colab Notebooks/model/rapid_ascending 54_21.hdf5\n","Epoch 56/100\n"," - 64s - loss: 0.6715 - acc: 0.7798 - val_loss: 0.6262 - val_acc: 0.8012\n","\n","Epoch 00056: val_loss improved from 0.62723 to 0.62625, saving model to /content/gdrive/My Drive/Colab Notebooks/model/rapid_ascending 54_21.hdf5\n","Epoch 57/100\n"," - 64s - loss: 0.6716 - acc: 0.7797 - val_loss: 0.6298 - val_acc: 0.8012\n","\n","Epoch 00057: val_loss did not improve from 0.62625\n","Epoch 58/100\n"," - 64s - loss: 0.6716 - acc: 0.7797 - val_loss: 0.6280 - val_acc: 0.8012\n","\n","Epoch 00058: val_loss did not improve from 0.62625\n","Epoch 59/100\n"," - 64s - loss: 0.6716 - acc: 0.7798 - val_loss: 0.6269 - val_acc: 0.8012\n","\n","Epoch 00059: val_loss did not improve from 0.62625\n","Epoch 60/100\n"," - 64s - loss: 0.6717 - acc: 0.7798 - val_loss: 0.6271 - val_acc: 0.8012\n","\n","Epoch 00060: val_loss did not improve from 0.62625\n","Epoch 61/100\n"," - 64s - loss: 0.6716 - acc: 0.7797 - val_loss: 0.6276 - val_acc: 0.8012\n","\n","Epoch 00061: val_loss did not improve from 0.62625\n","Epoch 62/100\n"," - 64s - loss: 0.6716 - acc: 0.7797 - val_loss: 0.6295 - val_acc: 0.8012\n","\n","Epoch 00062: val_loss did not improve from 0.62625\n","Epoch 63/100\n"," - 64s - loss: 0.6716 - acc: 0.7797 - val_loss: 0.6288 - val_acc: 0.8012\n","\n","Epoch 00063: val_loss did not improve from 0.62625\n","Epoch 64/100\n"," - 63s - loss: 0.6713 - acc: 0.7798 - val_loss: 0.6260 - val_acc: 0.8012\n","\n","Epoch 00064: val_loss improved from 0.62625 to 0.62605, saving model to /content/gdrive/My Drive/Colab Notebooks/model/rapid_ascending 54_21.hdf5\n","Epoch 65/100\n"," - 63s - loss: 0.6716 - acc: 0.7797 - val_loss: 0.6297 - val_acc: 0.8012\n","\n","Epoch 00065: val_loss did not improve from 0.62605\n","Epoch 66/100\n"," - 63s - loss: 0.6714 - acc: 0.7798 - val_loss: 0.6324 - val_acc: 0.8012\n","\n","Epoch 00066: val_loss did not improve from 0.62605\n","Epoch 67/100\n"," - 63s - loss: 0.6717 - acc: 0.7798 - val_loss: 0.6284 - val_acc: 0.8012\n","\n","Epoch 00067: val_loss did not improve from 0.62605\n","Epoch 68/100\n"," - 63s - loss: 0.6713 - acc: 0.7798 - val_loss: 0.6285 - val_acc: 0.8012\n","\n","Epoch 00068: val_loss did not improve from 0.62605\n","Epoch 69/100\n"," - 63s - loss: 0.6714 - acc: 0.7798 - val_loss: 0.6278 - val_acc: 0.8012\n","\n","Epoch 00069: val_loss did not improve from 0.62605\n","Epoch 70/100\n"," - 63s - loss: 0.6714 - acc: 0.7798 - val_loss: 0.6292 - val_acc: 0.8012\n","\n","Epoch 00070: val_loss did not improve from 0.62605\n","Epoch 71/100\n"," - 63s - loss: 0.6711 - acc: 0.7798 - val_loss: 0.6260 - val_acc: 0.8012\n","\n","Epoch 00071: val_loss improved from 0.62605 to 0.62600, saving model to /content/gdrive/My Drive/Colab Notebooks/model/rapid_ascending 54_21.hdf5\n","Epoch 72/100\n"," - 63s - loss: 0.6714 - acc: 0.7797 - val_loss: 0.6289 - val_acc: 0.8012\n","\n","Epoch 00072: val_loss did not improve from 0.62600\n","Epoch 73/100\n"," - 63s - loss: 0.6714 - acc: 0.7797 - val_loss: 0.6309 - val_acc: 0.8012\n","\n","Epoch 00073: val_loss did not improve from 0.62600\n","Epoch 74/100\n"," - 63s - loss: 0.6714 - acc: 0.7797 - val_loss: 0.6263 - val_acc: 0.8012\n","\n","Epoch 00074: val_loss did not improve from 0.62600\n","Epoch 75/100\n"," - 62s - loss: 0.6711 - acc: 0.7797 - val_loss: 0.6278 - val_acc: 0.8012\n","\n","Epoch 00075: val_loss did not improve from 0.62600\n","Epoch 76/100\n"," - 63s - loss: 0.6710 - acc: 0.7798 - val_loss: 0.6298 - val_acc: 0.8012\n","\n","Epoch 00076: val_loss did not improve from 0.62600\n","Epoch 77/100\n"," - 63s - loss: 0.6711 - acc: 0.7798 - val_loss: 0.6280 - val_acc: 0.8012\n","\n","Epoch 00077: val_loss did not improve from 0.62600\n","Epoch 78/100\n"," - 63s - loss: 0.6712 - acc: 0.7798 - val_loss: 0.6261 - val_acc: 0.8012\n","\n","Epoch 00078: val_loss did not improve from 0.62600\n","Epoch 79/100\n"," - 63s - loss: 0.6714 - acc: 0.7798 - val_loss: 0.6266 - val_acc: 0.8012\n","\n","Epoch 00079: val_loss did not improve from 0.62600\n","Epoch 80/100\n"," - 63s - loss: 0.6712 - acc: 0.7798 - val_loss: 0.6310 - val_acc: 0.8012\n","\n","Epoch 00080: val_loss did not improve from 0.62600\n","Epoch 81/100\n"," - 63s - loss: 0.6711 - acc: 0.7797 - val_loss: 0.6267 - val_acc: 0.8012\n","\n","Epoch 00081: val_loss did not improve from 0.62600\n","Epoch 82/100\n"," - 62s - loss: 0.6709 - acc: 0.7798 - val_loss: 0.6274 - val_acc: 0.8012\n","\n","Epoch 00082: val_loss did not improve from 0.62600\n","Epoch 83/100\n"," - 63s - loss: 0.6712 - acc: 0.7798 - val_loss: 0.6284 - val_acc: 0.8012\n","\n","Epoch 00083: val_loss did not improve from 0.62600\n","Epoch 84/100\n"," - 63s - loss: 0.6707 - acc: 0.7798 - val_loss: 0.6262 - val_acc: 0.8012\n","\n","Epoch 00084: val_loss did not improve from 0.62600\n","Epoch 85/100\n"," - 64s - loss: 0.6711 - acc: 0.7797 - val_loss: 0.6273 - val_acc: 0.8012\n","\n","Epoch 00085: val_loss did not improve from 0.62600\n","Epoch 86/100\n"," - 63s - loss: 0.6710 - acc: 0.7797 - val_loss: 0.6317 - val_acc: 0.8012\n","\n","Epoch 00086: val_loss did not improve from 0.62600\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"iCB1Kyfb5UJG","colab_type":"code","outputId":"ffa2c850-e9c7-4b55-fce6-6437ca895dd7","executionInfo":{"status":"ok","timestamp":1580987355854,"user_tz":-540,"elapsed":1758,"user":{"displayName":"J 1","photoUrl":"","userId":"08178289703395036410"}},"colab":{"base_uri":"https://localhost:8080/","height":627}},"source":["%matplotlib inline\n","import pickle\n","\n","train_loss=checkpoint2.loss\n","val_loss=checkpoint2.val_loss\n","train_acc=checkpoint2.acc\n","val_acc=checkpoint2.val_acc\n","\n","\n","epochs = range(len(train_acc))\n","\n","plt.plot(epochs,train_loss,'r', label='train_loss')\n","plt.plot(epochs,val_loss,'b', label='val_loss')\n","plt.title('train_loss vs val_loss')\n","plt.xlabel('epoch')\n","plt.ylabel('loss')\n","plt.legend()\n","plt.figure()\n","\n","plt.plot(epochs,train_acc,'r', label='train_acc')\n","plt.plot(epochs,val_acc,'b', label='val_acc')\n","plt.title('train_acc vs val_acc')\n","plt.xlabel('epoch')\n","plt.ylabel('acc')\n","plt.legend()\n","plt.figure()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Figure size 432x288 with 0 Axes>"]},"metadata":{"tags":[]},"execution_count":31},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/IPython/core/pylabtools.py:125: UserWarning: Creating legend with loc=\"best\" can be slow with large amounts of data.\n","  fig.canvas.print_figure(bytes_io, **kw)\n"],"name":"stderr"},{"output_type":"display_data","data":{"image/png":"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\ndjQZ/ULZCy9A377w2WewX5mfUFZK5dEXX3xB27Zt852NSsPreIrIXL8RnrWNQCmlIi46VUNKKZVj\nQ4cO5f333y+VNmzYMM4555w85cibBgKllArJ6NGj852FQLRqSCmlIi56gaCCNY4rpVTYohMItPuo\nUkp5ik4gUEop5UkDgVJKZWCnnXbynbdy5Ur2q0DPK2kgUEqpiNPuo0qpgpKHnyMA7G8StGzZkqFD\nhwIwYsQIqlWrxttvv81PP/3E1q1bue222+jdu3da+968eTNDhgxhzpw5VKtWjXvuuYejjz6azz//\nnHPOOYctW7bw+++/8+KLL9KsWTP69etHSUkJ27dv58Ybb6R///6ZfuzANBAopRTQv39/Lr/88j8C\nwcSJE5k6dSqXXXYZtWvX5ocffqBz58706tULSaPzyejRoxERPvvsMxYtWkS3bt1YsmQJY8eOZdiw\nYZx11lls2bKF7du3M2XKFJo1a8Zrr70G2AHvckEDgVKqoOTr5wgOPPBAVq9ezTfffMOaNWuoV68e\nTZo04YorrmDGjBlUqVKFr7/+mu+//54mTZoE3u57773HpZdeCsDee+/NrrvuypIlSzj00EO5/fbb\nKSkp4dRTT6VNmza0a9eOq666imuvvZaePXtyxBFHhPVxS4leG4E+R6CU8tG3b19eeOEFJkyYQP/+\n/Xn22WdZs2YNc+fO5dNPP6Vx48aev0WQiTPPPJPJkydTs2ZNevTowVtvvcWee+7Jxx9/TLt27bjh\nhhsYOXJkVvaVSnRKBPocgVIqhf79+3P++efzww8/MH36dCZOnEijRo0oKiri7bff5ssvv0x7m0cc\ncQTPPvssxxxzDEuWLOGrr75ir732YsWKFey2225cdtllfPXVV8yfP5+9996bnXfemQEDBlC3bl0e\ne+yxED5lWdEJBEoplcK+++7Lhg0baN68OU2bNuWss87ipJNOol27dnTs2JG999477W1efPHFDBky\nhHbt2lGtWjWefPJJqlevzsSJE3nmmWcoKiqiSZMm/OUvf2H27Nlcc801VKlShaKiIsaMGRPCpywr\nOr9H8K9/QZ8+MG8e7L9/9jOmlMqY/h5BdunvESillEqLVg0ppVSGPvvsMwYOHFgqrXr16nz44Yd5\nylFmNBAopQqCMSat/vmFoF27dnya7affyimT6n6tGlJK5V2NGjVYu3ZtRhcxFWeMYe3atdSoUSOt\n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\n6+UTwrgXAAAAAElFTkSuQmCC\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 0 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"VejGfotu5U5u","colab_type":"code","outputId":"5ef598e3-3342-4a65-a9ad-57c1bfe38b61","executionInfo":{"status":"error","timestamp":1580987356143,"user_tz":-540,"elapsed":305,"user":{"displayName":"J 1","photoUrl":"","userId":"08178289703395036410"}},"colab":{"base_uri":"https://localhost:8080/","height":505}},"source":["from keras.models import load_model\n","\n","model = load_model('/content/gdrive/My Drive/Colab Notebooks/model/rapid_ascending %s.hdf5' % input_data_length)\n","loss = model.evaluate_generator(test_flow, steps=len(X_test) / batch_size) \n","print(\"Test Loss \" + str(loss[0]))\n","print(\"Test Acc: \" + str(loss[1]))"],"execution_count":0,"outputs":[{"output_type":"error","ename":"OSError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mOSError\u001b[0m                                   Traceback (most recent call last)","\u001b[0;32m<ipython-input-32-d9ffc1e22fb4>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mkeras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodels\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mload_model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mload_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/gdrive/My Drive/Colab Notebooks/model/rapid_ascending %s.hdf5'\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0minput_data_length\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mloss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mevaluate_generator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_flow\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msteps\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Test Loss \"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloss\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/keras/engine/saving.py\u001b[0m in \u001b[0;36mload_wrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    456\u001b[0m                 \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mremove\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtmp_filepath\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    457\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mres\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 458\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mload_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    459\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    460\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mload_wrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/keras/engine/saving.py\u001b[0m in \u001b[0;36mload_model\u001b[0;34m(filepath, custom_objects, compile)\u001b[0m\n\u001b[1;32m    547\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    548\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mH5Dict\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_supported_type\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 549\u001b[0;31m         \u001b[0;32mwith\u001b[0m \u001b[0mH5Dict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'r'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mh5dict\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    550\u001b[0m             \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_deserialize_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mh5dict\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcustom_objects\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcompile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    551\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'write'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mcallable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwrite\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/keras/utils/io_utils.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, path, mode)\u001b[0m\n\u001b[1;32m    189\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_is_file\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    190\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msix\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstring_types\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0m_is_path_instance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 191\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mh5py\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mFile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    192\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_is_file\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    193\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/h5py/_hl/files.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, name, mode, driver, libver, userblock_size, swmr, **kwds)\u001b[0m\n\u001b[1;32m    310\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mphil\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    311\u001b[0m                 \u001b[0mfapl\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmake_fapl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdriver\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlibver\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 312\u001b[0;31m                 \u001b[0mfid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmake_fid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0muserblock_size\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfapl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mswmr\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mswmr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    313\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    314\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mswmr_support\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/h5py/_hl/files.py\u001b[0m in \u001b[0;36mmake_fid\u001b[0;34m(name, mode, userblock_size, fapl, fcpl, swmr)\u001b[0m\n\u001b[1;32m    140\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mswmr\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mswmr_support\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    141\u001b[0m             \u001b[0mflags\u001b[0m \u001b[0;34m|=\u001b[0m \u001b[0mh5f\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mACC_SWMR_READ\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 142\u001b[0;31m         \u001b[0mfid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mh5f\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mflags\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfapl\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfapl\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    143\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mmode\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'r+'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    144\u001b[0m         \u001b[0mfid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mh5f\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mh5f\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mACC_RDWR\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfapl\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfapl\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32mh5py/_objects.pyx\u001b[0m in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n","\u001b[0;32mh5py/_objects.pyx\u001b[0m in \u001b[0;36mh5py._objects.with_phil.wrapper\u001b[0;34m()\u001b[0m\n","\u001b[0;32mh5py/h5f.pyx\u001b[0m in \u001b[0;36mh5py.h5f.open\u001b[0;34m()\u001b[0m\n","\u001b[0;31mOSError\u001b[0m: Unable to open file (unable to open file: name = '/content/gdrive/My Drive/Colab Notebooks/model/rapid_ascending 54.hdf5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)"]}]},{"cell_type":"code","metadata":{"id":"X1YiMAJL5XBT","colab_type":"code","colab":{}},"source":["loss = model.evaluate(X_val, Y_val) \n","print(X_val.shape)\n","print(Y_val.shape)\n","\n","print(\"Val Loss \" + str(loss[0]))\n","print(\"Val Acc: \" + str(loss[1]))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"rrxiykBP5Xqv","colab_type":"code","colab":{}},"source":["def plot_confusion_matrix(Y_test, Y_pred, classes,\n","                          normalize=False,\n","                          title='Unnormalized confusion matrix',\n","                          cmap=plt.cm.Blues):\n","    cm = confusion_matrix(Y_test, Y_pred)\n","    \n","    if normalize:\n","        cm = np.round(cm.astype('float') / cm.sum(axis=1)[:, np.newaxis], 2)\n","        \n","    np.set_printoptions(precision=2)\n","        \n","    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n","    plt.title(title)\n","    plt.colorbar()\n","    tick_marks = np.arange(len(classes))\n","    plt.xticks(tick_marks, classes, rotation=45)\n","    plt.yticks(tick_marks, classes)\n","\n","    thresh = cm.min() + (cm.max() - cm.min()) / 2.\n","    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n","        plt.text(j, i, cm[i, j],\n","                 horizontalalignment=\"center\",\n","                 color=\"white\" if cm[i, j] > thresh else \"red\")\n","\n","    plt.tight_layout()\n","    plt.ylabel('True expression')\n","    plt.xlabel('Predicted expression')\n","    plt.show()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"_Mn_UgJT9tAQ","colab_type":"code","colab":{}},"source":["#     Prediction    #\n","Y_pred_ = model.predict(X_test, verbose=1)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"nPbtlfXEAxXK","colab_type":"code","colab":{}},"source":["# Y_pred = Y_pred_[:,[-1]]\n","# print(Y_pred.shape)\n","# print(Y_test.shape)\n","Y_pred = np.argmax(Y_pred_, axis=1)\n","t_te = np.argmax(Y_test, axis=1)\n","\n","#     Manual processing     #\n","Y_pred_one = Y_pred_[:, [-1]]\n","max_value = np.max(Y_pred_one)\n","print(max_value)\n","\n","limit_line = 0.9\n","Y_pred_one = np.where(Y_pred_one > max_value * limit_line, 1, 0)\n","\n","# print(Y_pred_one)\n","Y_pred_one = Y_pred_one.reshape(-1,)\n","# print(Y_pred_1)\n","print(Y_pred.shape)\n","print(t_te.shape)\n","\n","# fail = 0\n","# fail2 = 0\n","# for i in range(len(Y_pred)):\n","#   if Y_pred_1[i] != t_te[i]:\n","#     fail += 1\n","\n","#   if Y_pred[i] != t_te[i]:\n","#     fail2 += 1\n","\n","# print(1 - fail / len(Y_pred))\n","# print(1 - fail2 / len(Y_pred))\n","\n","# print(np.sum(Y_pred), np.sum(t_te))\n","# print('Y_pred / Y_test :', np.sum(Y_pred) / np.sum(t_te))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"HHfCpZRUA3Jk","colab_type":"code","colab":{}},"source":["plt.figure(figsize=(100,10))\n","plt.subplot(211)\n","plt.plot(t_te, 'purple', label='test')\n","\n","plt.subplot(212)\n","plt.plot(Y_pred_one, 'y', label='pred')\n","plt.show()\n","# plt.savefig('/content/gdrive/My Drive/Colab Notebooks/model/rapid_ascending %s.png' % input_data_length)\n","# plt.close()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"yRG7eRC95Y6N","colab_type":"code","colab":{}},"source":["fig = plot_confusion_matrix(Y_test=t_te, Y_pred=Y_pred,\n","                      classes=classes,\n","                      normalize=True,\n","                      cmap=plt.cm.Greys,\n","                      title='Average accuracy: ' + str(np.sum(Y_pred == t_te)/len(t_te)) + '\\n')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"42zRLAIrjgvu","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}