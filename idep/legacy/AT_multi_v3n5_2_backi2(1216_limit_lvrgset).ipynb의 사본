{"cells":[{"cell_type":"code","execution_count":3,"metadata":{"id":"6rmQpzEGXfCw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1639724760712,"user_tz":-540,"elapsed":19590,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"cf5bec01-c507-4ecb-e918-8dfe9ee1624a"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n","Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","import os, sys\n","\n","current_path = '/content/drive/My Drive/Colab Notebooks/JnQ/'\n","\n","os.chdir(current_path)\n","\n","nb_path = '/content/notebooks'\n","try:\n","  sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ')\n","  sys.path.insert(0, '/content/drive/My Drive/Colab Notebooks/JnQ/funcs')\n","  os.symlink('/content/drive/My Drive/Colab Notebooks/JnQ/mpl_finance', nb_path)\n","  sys.path.insert(0, nb_path)\n","except:\n","  pass"]},{"cell_type":"markdown","metadata":{"id":"8uqYv5StTazo"},"source":["# requirements"]},{"cell_type":"code","execution_count":11,"metadata":{"id":"9qGt60DKTZmf","executionInfo":{"status":"ok","timestamp":1639725370110,"user_tz":-540,"elapsed":446,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"outputs":[],"source":["# !pip install findiff\n","\n","# import nvstrings, nvcategory, cudf\n","# import cuml\n","# import cudf\n","\n","import matplotlib.pyplot as plt\n","from matplotlib import gridspec\n","from tqdm.notebook import tqdm\n","from funcs.funcs_indicator import *\n","from funcs.funcs_for_trade import *\n","\n","from utils import utils_v3_1216 as utils1\n","from utils import utils_v5_2_1216 as utils2\n","from utils import utils_public_1216 as utils_public\n","\n","import mpl_finance as mf\n","import os\n","import datetime\n","\n","import IPython\n","import IPython.display\n","import matplotlib as mpl\n","\n","import numpy as np\n","# import jax.numpy as np\n","import pandas as pd\n","import seaborn as sns\n","# import tensorflow as tf\n","\n","import pickle\n","import shutil\n","import json\n","from easydict import EasyDict\n","\n","# from trendln import trendln\n","\n","from datetime import datetime\n","import random\n","import time\n","\n","# mpl.rcParams['figure.figsize'] = (8, 6)\n","# mpl.rcParams['axes.grid'] = False\n","\n","pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)"]},{"cell_type":"markdown","metadata":{"id":"M8-EChy0VsDr"},"source":["## cudf"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":414,"status":"ok","timestamp":1638754008241,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"b09qAb1sVtRP","outputId":"3a824202-064a-4544-b791-ffc777bb3f9c"},"outputs":[{"name":"stdout","output_type":"stream","text":["usage: conda [-h] [-V] command ...\n","conda: error: unrecognized arguments: -t=/content/notebooks\n"]}],"source":["# !conda install -c rapidsai-nightly -c nvidia -c numba -c conda-forge \\\n","#     cudf python=3.7 cudatoolkit=11.1 -t=$nb_path"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":413,"status":"ok","timestamp":1638754715310,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"Jnz6i7ZqRnb0","outputId":"207bc57b-a17a-4f67-fb26-24e46e2c6e26"},"outputs":[{"name":"stdout","output_type":"stream","text":["***********************************************************************\n","Woo! Your instance has the right kind of GPU, a Tesla P100-PCIE-16GB!\n","***********************************************************************\n","\n"]}],"source":["# !git clone https://github.com/rapidsai/rapidsai-csp-utils.git\n","!python rapidsai-csp-utils/colab/env-check.py"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4sKA_9Dbg4s2"},"outputs":[],"source":["# This will update the Colab environment and restart the kernel.  Don't run the next cell until you see the session crash.\n","!bash rapidsai-csp-utils/colab/update_gcc.sh\n","import os\n","os._exit(00)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"d1C4pNiBhYHX"},"outputs":[],"source":["# This will install CondaColab.  This will restart your kernel one last time.  Run this cell by itself and only run the next cell once you see the session crash.\n","import condacolab\n","condacolab.install()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":414,"status":"ok","timestamp":1638754863073,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"iGx3ACTvZqck","outputId":"e8379cc4-c325-4fe0-ac46-5fbbd7d38829"},"outputs":[{"name":"stdout","output_type":"stream","text":["‚ú®üç∞‚ú® Everything looks OK!\n"]}],"source":["# you can now run the rest of the cells as normal\n","import condacolab\n","condacolab.check()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oR8s7U8c7C28","outputId":"22be2731-fae1-45fc-f310-e48f60774bb2"},"outputs":[{"name":"stdout","output_type":"stream","text":["Installing RAPIDS Stable 21.10\n","Starting the RAPIDS install on Colab.  This will take about 15 minutes.\n","Collecting package metadata (current_repodata.json): ...working... done\n","Solving environment: ...working... WARNING conda.core.solve:_add_specs(611): pinned spec cudatoolkit=11.1 conflicts with explicit specs.  Overriding pinned spec.\n","failed with initial frozen solve. Retrying with flexible solve.\n","Solving environment: ...working... WARNING conda.core.solve:_add_specs(611): pinned spec cudatoolkit=11.1 conflicts with explicit specs.  Overriding pinned spec.\n","failed with repodata from current_repodata.json, will retry with next repodata source.\n","Collecting package metadata (repodata.json): ...working... done\n"]}],"source":["# Installing RAPIDS is now 'python rapidsai-csp-utils/colab/install_rapids.py <release> <packages>'\n","# The <release> options are 'stable' and 'nightly'.  Leaving it blank or adding any other words will default to stable.\n","# The <packages> option are default blank or 'core'.  By default, we install RAPIDSAI and BlazingSQL.  The 'core' option will install only RAPIDSAI and not include BlazingSQL, \n","!python rapidsai-csp-utils/colab/install_rapids.py stable\n","import os\n","os.environ['NUMBAPRO_NVVM'] = '/usr/local/cuda/nvvm/lib64/libnvvm.so'\n","os.environ['NUMBAPRO_LIBDEVICE'] = '/usr/local/cuda/nvvm/libdevice/'\n","os.environ['CONDA_PREFIX'] = '/usr/local'"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kWsxi4ZpKtGt"},"outputs":[],"source":["import shutil\n","import sys\n","\n","colab_env = \"/usr/lib\"\n","\n","rapids_path = os.path.join(current_path, \"rapidsai-csp-utils/lib\")\n","rapids_libs = os.listdir(rapids_path)\n","print(rapids_libs)\n","# break\n","\n","for lib_ in rapids_libs:\n","  try:\n","    shutil.copy(os.path.join(rapids_path, lib_), os.path.join(colab_env, lib_))\n","    sys.path.append(os.path.join(colab_env, lib_))\n","    print(\"copied to\" + os.path.join(colab_env, lib_))\n","  except Exception as e:\n","    print(e)"]},{"cell_type":"markdown","metadata":{"id":"Iy76iO7gztne"},"source":["## move legacy files"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hMRht32Czwry"},"outputs":[],"source":["# print()\n","cur_dir_list = os.listdir('.')\n","for f in cur_dir_list:\n","  if 'legacy' in f :\n","    # print(f)\n","    if os.path.isdir(current_path + f,):\n","      continue\n","\n","    shutil.move(current_path + f, current_path + 'legacy/' + f)\n","    print(\"moved to\" + current_path + 'legacy/' +  f)"]},{"cell_type":"markdown","metadata":{"id":"Ic1mfmwWCIBu"},"source":["# makeset"]},{"cell_type":"markdown","metadata":{"id":"Ci_jUnNTZbm9"},"source":["## load data"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":22503,"status":"ok","timestamp":1638246127510,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"_bXyS2yrZYC6","outputId":"b24a8a66-48b1-42b5-aa79-63f5a8542bac"},"outputs":[{"name":"stdout","output_type":"stream","text":["['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr']\n","['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 LTCUSDT.ftr']\n","['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 ETHUSDT.ftr']\n","['2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr']\n","['2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-08-31 SUSHIUSDT.xlsx', '2021-08-31 CVCUSDT.xlsx', '2021-08-31 BTSUSDT.xlsx', '2021-08-31 HOTUSDT.xlsx', '2021-08-31 ZRXUSDT.xlsx', '2021-08-31 QTUMUSDT.xlsx', '2021-08-31 IOTAUSDT.xlsx', '2021-08-31 BTCBUSD.xlsx', '2021-08-31 WAVESUSDT.xlsx', '2021-08-31 ADAUSDT.xlsx', '2021-08-31 LITUSDT.xlsx', '2021-08-31 XTZUSDT.xlsx', '2021-08-31 BNBUSDT.xlsx', '2021-08-31 AKROUSDT.xlsx', '2021-08-31 HNTUSDT.xlsx', '2021-08-31 ETCUSDT.xlsx', '2021-08-31 XMRUSDT.xlsx', '2021-08-31 YFIUSDT.xlsx', '2021-08-31 ETHUSDT.xlsx', '2021-08-31 ALICEUSDT.xlsx', '2021-08-31 ALPHAUSDT.xlsx', '2021-08-31 SFPUSDT.xlsx', '2021-08-31 REEFUSDT.xlsx', '2021-08-31 BATUSDT.xlsx', '2021-08-31 DOGEUSDT.xlsx', '2021-08-31 TRXUSDT.xlsx', '2021-08-31 RLCUSDT.xlsx', '2021-08-31 BTCSTUSDT.xlsx', '2021-08-31 STORJUSDT.xlsx', '2021-08-31 SNXUSDT.xlsx', '2021-08-31 XLMUSDT.xlsx', '2021-08-31 NEOUSDT.xlsx', '2021-08-31 UNFIUSDT.xlsx', '2021-08-31 SANDUSDT.xlsx', '2021-08-31 DASHUSDT.xlsx', '2021-08-31 KAVAUSDT.xlsx', '2021-08-31 RUNEUSDT.xlsx', '2021-08-31 CTKUSDT.xlsx', '2021-08-31 LINKUSDT.xlsx', '2021-08-31 CELRUSDT.xlsx', '2021-08-31 RSRUSDT.xlsx', '2021-08-31 DGBUSDT.xlsx', '2021-08-31 SKLUSDT.xlsx', '2021-08-31 RENUSDT.xlsx', '2021-08-31 TOMOUSDT.xlsx', '2021-08-31 MTLUSDT.xlsx', '2021-08-31 LTCUSDT.xlsx', '2021-08-31 DODOUSDT.xlsx', '2021-08-31 EGLDUSDT.xlsx', '2021-08-31 KSMUSDT.xlsx', '2021-08-31 ONTUSDT.xlsx', '2021-08-31 VETUSDT.xlsx', '2021-08-31 TRBUSDT.xlsx', '2021-08-31 MANAUSDT.xlsx', '2021-08-31 COTIUSDT.xlsx', '2021-08-31 CHRUSDT.xlsx', '2021-08-31 ETHUSDT_210924.xlsx', '2021-08-31 BAKEUSDT.xlsx', '2021-08-31 GRTUSDT.xlsx', '2021-08-31 FLMUSDT.xlsx', '2021-08-31 EOSUSDT.xlsx', '2021-08-31 OGNUSDT.xlsx', '2021-08-31 SCUSDT.xlsx', '2021-08-31 BALUSDT.xlsx', '2021-08-31 STMXUSDT.xlsx', '2021-08-31 BTTUSDT.xlsx', '2021-08-31 LUNAUSDT.xlsx', '2021-08-31 DENTUSDT.xlsx', '2021-08-31 KNCUSDT.xlsx', '2021-08-31 SRMUSDT.xlsx', '2021-08-31 ENJUSDT.xlsx', '2021-08-31 ZENUSDT.xlsx', '2021-08-31 ATOMUSDT.xlsx', '2021-08-31 NEARUSDT.xlsx', '2021-08-31 BCHUSDT.xlsx', '2021-08-31 IOSTUSDT.xlsx', '2021-08-31 HBARUSDT.xlsx', '2021-08-31 ZECUSDT.xlsx', '2021-08-31 1000SHIBUSDT.xlsx', '2021-08-31 TLMUSDT.xlsx', '2021-08-31 BZRXUSDT.xlsx', '2021-08-31 ETHBUSD.xlsx', '2021-08-31 AAVEUSDT.xlsx', '2021-08-31 GTCUSDT.xlsx', '2021-08-31 ALGOUSDT.xlsx', '2021-08-31 ICPUSDT.xlsx', '2021-08-31 BTCUSDT_210924.xlsx', '2021-08-31 LRCUSDT.xlsx', '2021-08-31 AVAXUSDT.xlsx', '2021-08-31 MATICUSDT.xlsx', '2021-08-31 1INCHUSDT.xlsx', '2021-08-31 MKRUSDT.xlsx', '2021-08-31 THETAUSDT.xlsx', '2021-08-31 UNIUSDT.xlsx', '2021-08-31 LINAUSDT.xlsx', '2021-08-31 RVNUSDT.xlsx', '2021-08-31 FILUSDT.xlsx', '2021-08-31 NKNUSDT.xlsx', '2021-08-31 DEFIUSDT.xlsx', '2021-08-31 COMPUSDT.xlsx', '2021-08-31 BTCDOMUSDT.xlsx', '2021-08-31 SOLUSDT.xlsx', '2021-08-31 BTCUSDT.xlsx', '2021-08-31 OMGUSDT.xlsx', '2021-08-31 ICXUSDT.xlsx', '2021-08-31 BLZUSDT.xlsx', '2021-08-31 FTMUSDT.xlsx', '2021-08-31 YFIIUSDT.xlsx', '2021-08-31 KEEPUSDT.xlsx', '2021-08-31 BANDUSDT.xlsx', '2021-08-31 XRPUSDT.xlsx', '2021-08-31 SXPUSDT.xlsx', '2021-08-31 CRVUSDT.xlsx', '2021-08-31 BELUSDT.xlsx', '2021-08-31 DOTUSDT.xlsx', '2021-08-31 XEMUSDT.xlsx', '2021-08-31 ONEUSDT.xlsx', '2021-08-31 ZILUSDT.xlsx', '2021-08-31 AXSUSDT.xlsx', '2021-08-31 OCEANUSDT.xlsx', '2021-08-31 CHZUSDT.xlsx', '2021-08-31 ANKRUSDT.xlsx', '2021-08-31 SUSHIUSDT_res_dfs.pkl', '2021-07-01 ADAUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr']\n","['2021-07-01 BTCUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 EOSUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr']\n","['2021-02-07 BTC.xlsx', '2021-02-07 ETH.xlsx', '2021-02-11 BCHUSDT.xlsx', '2021-02-11 XRPUSDT.xlsx', '2021-02-11 EOSUSDT.xlsx', '2021-02-11 LTCUSDT.xlsx', '2021-02-11 ETCUSDT.xlsx', '2021-02-11 LINKUSDT.xlsx', '2021-02-11 XLMUSDT.xlsx', '2021-02-11 ADAUSDT.xlsx', '2021-02-11 XMRUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 ETCUSDT.ftr', '2021-10-10 BTCUSDT.ftr', '2021-10-10 ETHUSDT.ftr', '2021-10-10 ADAUSDT.ftr', '2021-10-10 XLMUSDT.ftr', '2021-10-10 LINKUSDT.ftr', '2021-10-10 LTCUSDT.ftr', '2021-10-10 EOSUSDT.ftr', '2021-10-10 XRPUSDT.ftr', '2021-10-10 BCHUSDT.ftr', '2021-11-16 LTCUSDT.ftr', '2021-11-16 LINKUSDT.ftr', '2021-11-16 XLMUSDT.ftr', '2021-11-16 ADAUSDT.ftr', '2021-11-16 ETCUSDT.ftr', '2021-11-16 BTCUSDT.ftr', '2021-11-16 ETHUSDT.ftr', '2021-11-16 XRPUSDT.ftr', '2021-11-16 BCHUSDT.ftr', '2021-11-16 EOSUSDT.ftr']\n","['2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx']\n"]}],"source":["interval = '1m'\n","date_path = './candlestick_concated/%s/quant_v2/' % interval\n","file_list = os.listdir(date_path)\n","print((file_list))\n","\n","interval2 = '3m'\n","date_path2 = './candlestick_concated/%s/quant_v2/' % interval2\n","file_list2 = os.listdir(date_path2)\n","print((file_list2))\n","\n","interval3 = '5m'\n","date_path3 = './candlestick_concated/%s/quant_v2/' % interval3\n","file_list3 = os.listdir(date_path3)\n","print((file_list3))\n","\n","interval4 = '15m'\n","date_path4 = './candlestick_concated/%s/quant_v2/' % interval4\n","file_list4 = os.listdir(date_path4)\n","print((file_list4))\n","\n","interval5 = '30m'\n","date_path5 = './candlestick_concated/%s/quant_v2/' % interval5\n","file_list5 = os.listdir(date_path5)\n","print((file_list5))\n","\n","interval6 = '1h'\n","date_path6 = './candlestick_concated/%s/quant_v2/' % interval6\n","file_list6 = os.listdir(date_path6)\n","print((file_list6))\n","\n","interval7 = '4h'\n","date_path7 = './candlestick_concated/%s/quant_v2/' % interval7\n","file_list7 = os.listdir(date_path7)\n","print((file_list7))\n","\n","interval8 = '1d'\n","date_path8 = './candlestick_concated/%s/quant_v2/' % interval8\n","file_list8 = os.listdir(date_path8)\n","print((file_list8))"]},{"cell_type":"markdown","metadata":{"id":"AUSBU7T8Suzi"},"source":["## basic_func"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QmhLikYlSuzi"},"outputs":[],"source":["def sync_check(df, second_df=None, third_df=None, fourth_df=None, fifth_df=None,\n","               sixth_df=None, seventh_df=None, eighth_df=None):\n","\n","    #           supertrend          #\n","    # df = st_price_line(df, second_df, '3m')\n","    # # print(df.head(100))\n","    # # return\n","\n","    # df = st_price_line(df, third_df, '5m')\n","    # df = st_price_line(df, fourth_df, '15m')\n","    # df = st_price_line(df, fifth_df, '30m')\n","    # df = st_price_line(df, sixth_df, '1h')\n","    # df = st_price_line(df, seventh_df, '4h')\n","\n","    # print(\"supertrend phase done\")\n","\n","    # --------------- rsi --------------- #  \n","    df['rsi_1m'] = rsi(df, 14)    \n","    third_df['rsi_5m'] = rsi(third_df, 14)\n","    df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-1]), columns=['rsi_5m']))\n","    \n","    print(\"rsi phase done\")\n","\n","    # --------------- ema --------------- #  \n","    \n","    third_df['ema_5m'] = ema(third_df['close'], 200)\n","    df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-1]), columns=['ema_5m']))\n","    \n","    print(\"ema phase done\")\n","\n","\n","    # # --------------- dc --------------- #  \n","    # df = dc_line(df, None, '1m', dc_period=20)\n","    # df = dc_line(df, second_df, '3m', dc_period=20)\n","    # df = dc_line(df, third_df, '5m', dc_period=20)\n","    # df = dc_line(df, fourth_df, '15m', dc_period=20)\n","    # df = dc_line(df, fifth_df, '30m', dc_period=20)\n","    # df = dc_line(df, sixth_df, '1h', dc_period=20)\n","    # df = dc_line(df, seventh_df, '4h', dc_period=20)\n","\n","    # print(\"dc phase done\")\n","    \n","    # # --------------- bband --------------- #  \n","    # df = bb_line(df, None, '1m')\n","    # df = bb_line(df, second_df, '3m')\n","    # df = bb_line(df, third_df, '5m')\n","    # df = bb_line(df, fourth_df, '15m')\n","    # df = bb_line(df, fifth_df, '30m')\n","    # df = bb_line(df, sixth_df, '1h')\n","    # df = bb_line(df, seventh_df, '4h')\n","\n","    # print(\"bband phase done\")\n","\n","    # --------------- cbline --------------- #    \n","    # second_df['cloud_bline_3m'] = cloud_bline(second_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, second_df, [-1]), columns=['cloud_bline_3m']))\n","    # third_df['cloud_bline_5m'] = cloud_bline(third_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-1]), columns=['cloud_bline_5m']))\n","    # fourth_df['cloud_bline_15m'] = cloud_bline(fourth_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, fourth_df, [-1]), columns=['cloud_bline_15m']))\n","    # fifth_df['cloud_bline_30m'] = cloud_bline(fifth_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, fifth_df, [-1]), columns=['cloud_bline_30m']))\n","    # sixth_df['cloud_bline_1h'] = cloud_bline(sixth_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, sixth_df, [-1]), columns=['cloud_bline_1h']))\n","    # seventh_df['cloud_bline_4h'] = cloud_bline(seventh_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, seventh_df, [-1]), columns=['cloud_bline_4h']))\n","\n","    # print(\"cbline phase done\")\n","    \n","\n","    #           lucid sar              #\n","    # df['sar_1m'], df['sar_uptrend_1m'] = lucid_sar(df, return_uptrend=True)\n","\n","    # third_df['sar_5m'], third_df['sar_uptrend_5m'] = lucid_sar(third_df, return_uptrend=True)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-2, -1], backing_i=-1), columns=['sar_5m', 'sar_uptrend_5m']))\n","\n","    # fourth_df['sar_15m'], fourth_df['sar_uptrend_15m'] = lucid_sar(fourth_df, return_uptrend=True)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, fourth_df, [-2, -1], backing_i=-1), columns=['sar_15m', 'sar_uptrend_15m']))\n","\n","    # seventh_df['sar_4h'], seventh_df['sar_uptrend_4h'] = lucid_sar(seventh_df, return_uptrend=True)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, seventh_df, [-2, -1], backing_i=-1), columns=['sar_4h', 'sar_uptrend_4h']))\n","    \n","    # print(\"sar phase done\")\n","\n","    \n","    #           stochastic              #\n","    # df['stoch_1m'] = stoch(df, 13, 3, 3)\n","\n","    # third_df['stoch'] = stoch(third_df, 13, 3, 3)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","    # print(\"stoch phase done\")\n","\n","\n","    return df\n"]},{"cell_type":"markdown","metadata":{"id":"mEKyVbHWSuzi"},"source":["## make & save res_df (concat ÏÉùÍ∞ÅÌïòÎ©¥, timeindex sync ÎßûÏ∂∞ÏïºÌï®)"]},{"cell_type":"markdown","metadata":{"id":"VdukVo5-Suzj"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11,"status":"error","timestamp":1636201718856,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"khKb9nhlSuzj","outputId":"02bf2c60-f298-4fe9-e6bb-78230ac1348c"},"outputs":[{"ename":"NameError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-5-ee034491b257>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0ma_day\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m3600\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m24\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtqdm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m   \u001b[0mkeys\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mfile_list\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'file_list' is not defined"]}],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  if '2021-07-01'.upper() not in file_list[i]:\n","  # if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    excel_name = key.replace(\".xlsx\", \"_st1h_backi2.xlsx\")\n","    excel_path = save_path + excel_name\n","\n","    if excel_name in exist_list:\n","      print(excel_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m ÎßàÏßÄÎßâ timeindex Ïùò date Í∏∞Ï§Ä, 08:59:59.999000 Î•º last timestamp Î°ú ÏÑ§Ï†ï\n","      #      2. ÏãúÏûë timestamp Îäî Î™®Îì† tf Ïùò Í∞ÄÏû• ÏµúÍ∑º ÏãúÏûë index,\n","      #       a. 1m Ïùò ÏãúÏûë timeindex Îäî ÏµúÏÜå, htf Ïùò ÏãúÏûë timeindex Î≥¥Îã§ interval ÎßåÌÅº ÏïûÏÑúÏïºÌï®\n","      #         i. Îî∞ÎùºÏÑú 1m open_index, latest_open_index + 1d Î•º ÌïòÎ©¥ Îåê\n","      #           1. timestamp ÏúºÎ°ú Î≥ÄÌôòÌõÑ 1day Î•º ÎçîÌïòÍ≥† datetime ÏúºÎ°ú Î≥ÄÌôò\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","    latest_open_index = sorted(open_indexes)[-1]\n","    \n","    open_ts = datetime.timestamp(latest_open_index)\n","    latest_open_index_1m = datetime.fromtimestamp(open_ts + a_day)\n","\n","    #   str Î°ú ÎßåÎì§Ïñ¥ Ï†ëÍ∑ºÌïòÎ©¥ Î∂àÍ∞ÄÌï®  #\n","    end_index = pd.to_datetime(str(df.index[-1]).split(\" \")[0] + \" 08:59:59.999000\")\n","    # break\n","\n","    sliced_df = df.loc[latest_open_index_1m:end_index] # to_lower_tf Ïùò Í∏∞Ï§Ä ltf\n","    sliced_second_df = second_df.loc[latest_open_index:end_index]\n","    sliced_third_df = third_df.loc[latest_open_index:end_index]\n","    sliced_fourth_df = fourth_df.loc[latest_open_index:end_index]\n","    sliced_fifth_df = fifth_df.loc[latest_open_index:end_index]\n","\n","    print(\"sliced index\")\n","    print(sliced_df.index[[0, -1]])\n","    print(sliced_second_df.index[[0, -1]])\n","    print(sliced_third_df.index[[0, -1]])\n","    print(sliced_fourth_df.index[[0, -1]])\n","    print(sliced_fifth_df.index[[0, -1]])\n","\n","    try:\n","      sliced_sixth_df = sixth_df.loc[latest_open_index:end_index]\n","      sliced_seventh_df = seventh_df.loc[latest_open_index:end_index]\n","\n","      print(sliced_sixth_df.index[[0, -1]])\n","      print(sliced_seventh_df.index[[0, -1]])\n","\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df, sliced_sixth_df, sliced_seventh_df)\n","    \n","    except:\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df)\n","\n","\n","\n","    res_df.to_excel(excel_path)\n","    print(excel_name, \"saved succesfully !\")"]},{"cell_type":"markdown","metadata":{"id":"Bw5JibDKSuzj"},"source":["### xlsx to feather"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":355},"id":"VA-_gcA7Suzj","outputId":"f6f3b55d-ec2c-4b2c-d62e-3de7c0384dc4"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"be2b848dbcb14a079a2b7bd605af6435","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/156 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["DatetimeIndex(['2021-06-28 00:00:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:02:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:04:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:14:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:29:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-09-14 03:59:59.999000', '2021-11-15 14:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-03-10 20:59:59.999000', '2021-11-15 16:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","\n","xlsx converted to feather !\n","DatetimeIndex(['2021-06-28 00:00:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:02:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:04:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:14:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-06-28 00:29:59.999000', '2021-10-10 23:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-09-14 03:59:59.999000', '2021-11-15 14:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","DatetimeIndex(['2021-03-10 20:59:59.999000', '2021-11-15 16:59:59.999000'], dtype='datetime64[ns]', freq=None)\n","\n","xlsx converted to feather !\n"]}],"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  # if '2021-07-01'.upper() not in file_list[i]:\n","  if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    feather_name = key.replace(\".xlsx\", \".ftr\")\n","    # feather_path = save_path + feather_name\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m ÎßàÏßÄÎßâ timeindex Ïùò date Í∏∞Ï§Ä, 08:59:59.999000 Î•º last timestamp Î°ú ÏÑ§Ï†ï\n","      #      2. ÏãúÏûë timestamp Îäî Î™®Îì† tf Ïùò Í∞ÄÏû• ÏµúÍ∑º ÏãúÏûë index,\n","      #       a. 1m Ïùò ÏãúÏûë timeindex Îäî ÏµúÏÜå, htf Ïùò ÏãúÏûë timeindex Î≥¥Îã§ interval ÎßåÌÅº ÏïûÏÑúÏïºÌï®\n","      #         i. Îî∞ÎùºÏÑú 1m open_index, latest_open_index + 1d Î•º ÌïòÎ©¥ Îåê\n","      #           1. timestamp ÏúºÎ°ú Î≥ÄÌôòÌõÑ 1day Î•º ÎçîÌïòÍ≥† datetime ÏúºÎ°ú Î≥ÄÌôò\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","\n","    df.reset_index().to_feather(date_path + feather_name, compression='lz4')\n","    second_df.reset_index().to_feather(date_path2 + feather_name, compression='lz4')\n","    third_df.reset_index().to_feather(date_path3 + feather_name, compression='lz4')\n","    fourth_df.reset_index().to_feather(date_path4 + feather_name, compression='lz4')\n","    fifth_df.reset_index().to_feather(date_path5 + feather_name, compression='lz4')\n","    sixth_df.reset_index().to_feather(date_path6 + feather_name, compression='lz4')\n","    seventh_df.reset_index().to_feather(date_path7 + feather_name, compression='lz4')\n","\n","    print(\"xlsx converted to feather !\")\n","    "]},{"cell_type":"markdown","metadata":{"id":"Pe0QpnORSuzk"},"source":["### add itv_name to ftr"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":223},"executionInfo":{"elapsed":43664,"status":"ok","timestamp":1638246331122,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"M-gl30KxSuzk","outputId":"1cfcb580-8d25-4bd0-fdd0-213640779ce2"},"outputs":[{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"e3225655da874b8d89cc8b2a381b3fb6","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/175 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 BTCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 BCHUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 XRPUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 EOSUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 LTCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ETCUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 LINKUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 XLMUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ADAUSDT_1m.ftr\n","copied to./candlestick_concated/database_bn/non_cum/2021-07-01/2021-07-01 ETHUSDT_1m.ftr\n"]}],"source":["save_path = './candlestick_concated/res_df/'\n","\n","# dir_path = \"bbdc3m_backi2\"\n","# date = '2021-10-10'\n","date = '2021-07-01'\n","\n","db_path = './candlestick_concated/database_bn/non_cum/%s/' % date\n","os.makedirs(os.path.join(db_path), exist_ok=True)\n","\n","# exist_list = os.listdir(os.path.join(save_path, dir_path))\n","# break\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","        \n","    df = shutil.copy(date_path + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n","    second_df = shutil.copy(date_path2 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval2))\n","    third_df = shutil.copy(date_path3 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval3))\n","    fourth_df = shutil.copy(date_path4 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval4))\n","    fifth_df = shutil.copy(date_path5 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval5))\n","    sixth_df = shutil.copy(date_path6 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval6))\n","    seventh_df = shutil.copy(date_path7 + key, db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval7))\n","\n","    print(\"copied to\" + db_path + key.replace(\".ftr\", \"_%s.ftr\" % interval))\n"]},{"cell_type":"markdown","metadata":{"id":"4oZ1ohTtSuzk"},"source":["### feather ver."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vgVHpnUsSuzk"},"outputs":[],"source":["# db_path = './candlestick_concated/database_ub/'\n","db_path = './candlestick_concated/database_bn/'\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","save_dir_path = \"rsi5m_backi2\"\n","\n","date = '2021-11-17'\n","\n","data_path = os.path.join(db_path, \"cum\", date) \n","save_path = os.path.join(save_path, save_dir_path, 'noncat/cum', date)\n","os.makedirs(save_path, exist_ok=True)\n","\n","file_list = os.listdir(data_path)\n","exist_list = os.listdir(save_path)\n","# break\n","\n","interval = '1m'\n","interval2 = '3m'\n","interval3 = '5m'\n","interval4 = '15m'\n","interval5 = '30m'\n","interval6 = '1h'\n","interval7 = '4h'\n","interval8 = '1d'\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if date not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","\n","    if \"_1m\" not in key:\n","      continue\n","\n","    # feather_name = key.replace(\".ftr\", \"_%.ftr\" % save_dir_path)\n","    feather_name = key.replace(\"_1m\", \"\")\n","    feather_path = os.path.join(save_path, feather_name)\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    end_indexes = []\n","    \n","    df = pd.read_feather(os.path.join(data_path, key), columns=None, use_threads=True).set_index(\"index\")\n","    second_df = pd.read_feather(os.path.join(data_path, key.replace(interval, interval2)), columns=None, use_threads=True).set_index(\"index\")\n","    third_df = pd.read_feather(os.path.join(data_path, key.replace(interval, interval3)), columns=None, use_threads=True).set_index(\"index\")\n","    fourth_df = pd.read_feather(os.path.join(data_path, key.replace(interval, interval4)), columns=None, use_threads=True).set_index(\"index\")\n","    fifth_df = pd.read_feather(os.path.join(data_path, key.replace(interval, interval5)), columns=None, use_threads=True).set_index(\"index\")\n","        \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    end_indexes.append(df.index[-1])\n","    end_indexes.append(second_df.index[-1])\n","    end_indexes.append(third_df.index[-1])\n","    end_indexes.append(fourth_df.index[-1])\n","    end_indexes.append(fifth_df.index[-1])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m ÎßàÏßÄÎßâ timeindex Ïùò date Í∏∞Ï§Ä, 08:59:59.999000 Î•º last timestamp Î°ú ÏÑ§Ï†ï\n","      #      2. ÏãúÏûë timestamp Îäî Î™®Îì† tf Ïùò Í∞ÄÏû• ÏµúÍ∑º ÏãúÏûë index,\n","      #       a. 1m Ïùò ÏãúÏûë timeindex Îäî ÏµúÏÜå, htf Ïùò ÏãúÏûë timeindex Î≥¥Îã§ interval ÎßåÌÅº ÏïûÏÑúÏïºÌï®\n","      #         i. Îî∞ÎùºÏÑú 1m open_index, latest_open_index + 1d Î•º ÌïòÎ©¥ Îåê\n","      #           1. timestamp ÏúºÎ°ú Î≥ÄÌôòÌõÑ 1day Î•º ÎçîÌïòÍ≥† datetime ÏúºÎ°ú Î≥ÄÌôò\n","      sixth_df = pd.read_feather(os.path.join(data_path, key.replace(interval, interval6)), columns=None, use_threads=True).set_index(\"index\")\n","      seventh_df = pd.read_feather(os.path.join(data_path, key.replace(interval, interval7)), columns=None, use_threads=True).set_index(\"index\")\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","      end_indexes.append(sixth_df.index[-1])\n","      end_indexes.append(seventh_df.index[-1])\n","\n","    except Exception as e:\n","      print(e)\n","\n","    latest_open_index = sorted(open_indexes)[-1]\n","    recent_end_index = sorted(end_indexes)[0]\n","    \n","    open_ts = datetime.timestamp(latest_open_index)\n","    latest_open_index_1m = datetime.fromtimestamp(open_ts + a_day)\n","\n","    end_ts = datetime.timestamp(recent_end_index)\n","    recent_end_index_1m = datetime.fromtimestamp(end_ts - a_day)\n","\n","    #   str Î°ú ÎßåÎì§Ïñ¥ Ï†ëÍ∑ºÌïòÎ©¥ Î∂àÍ∞ÄÌï®  #\n","    #   latest_open_index_1m ÏùÄ latest_open_index Î≥¥Îã§ ÌÅ¨Í∏∞Îßå ÌïòÎ©¥ Îê®   # (9:00:00 ÍµêÏ≤¥ ÌïÑÏöîÏóÜÏù¥)\n","    if \"999000\" in str(df.index[-1]):\n","      # end_index = pd.to_datetime(str(df.index[-1]).split(\" \")[0] + \" 08:59:59.999000\")\n","      end_index = pd.to_datetime(str(recent_end_index_1m).split(\" \")[0] + \" 08:59:59.999000\")\n","    else:\n","      # end_index = pd.to_datetime(str(df.index[-1]).split(\" \")[0] + \" 09:00:00\")\n","      end_index = pd.to_datetime(str(recent_end_index_1m).split(\" \")[0] + \" 09:00:00\")\n","      # end_index = pd.to_datetime(\"2021-11-15\" + \" 09:00:00\")\n","\n","    #   ***** 1m open_idx Îäî htf Î≥¥Îã§ Ïª§ÏïºÌï® --> to_lower_tf Î•º ÏÇ¨Ïö©ÌïòÍ∏∞ ÏúÑÌï®ÏûÑ   #\n","    sliced_df = df.loc[latest_open_index_1m:end_index] # to_lower_tf Ïùò Í∏∞Ï§Ä ltf\n","\n","    sliced_second_df = second_df.loc[latest_open_index:end_index]\n","    sliced_third_df = third_df.loc[latest_open_index:end_index]\n","    sliced_fourth_df = fourth_df.loc[latest_open_index:end_index]\n","    sliced_fifth_df = fifth_df.loc[latest_open_index:end_index]\n","\n","    print(\"sliced index\")\n","    print(sliced_df.index[[0, -1]])\n","    print(sliced_second_df.index[[0, -1]])\n","    print(sliced_third_df.index[[0, -1]])\n","    print(sliced_fourth_df.index[[0, -1]])\n","    print(sliced_fifth_df.index[[0, -1]])\n","\n","    try:\n","      sliced_sixth_df = sixth_df.loc[latest_open_index:end_index]\n","      sliced_seventh_df = seventh_df.loc[latest_open_index:end_index]\n","\n","      print(sliced_sixth_df.index[[0, -1]])\n","      print(sliced_seventh_df.index[[0, -1]])\n","\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df, sliced_sixth_df, sliced_seventh_df)\n","    \n","    except:\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df)\n","\n","\n","\n","    # res_df.to_feather(feather_path)\n","    res_df.reset_index().to_feather(feather_path, compression='lz4')\n","    print(feather_path, \"saved succesfully !\")"]},{"cell_type":"markdown","metadata":{"id":"jTN3M842Suzl"},"source":["## concat & save new res_df"]},{"cell_type":"markdown","metadata":{"id":"MlFkpO1MSuzl"},"source":["### old (xlsx)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"U-3QkfbFSuzl"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","dict_name = \"2021-07-01 ETHUSDT_bb15m_backi2_res_dfs.pkl\"\n","\n","#     load with pickle    #\n","with open(save_path + dict_name, 'rb') as f:\n","  saved_res_df_dict = pickle.load(f)\n","\n","print(dict_name, \"loaded !\")\n","res_df_files = os.listdir(save_path)\n","res_df_files.reverse()\n","\n","print(res_df_files)\n","\n","res_df_dict = {}\n","\n","base_postfix = '_bb15m_backi2.xlsx'\n","new_postfix = '_st1h_backi2.xlsx'\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for k_i, key in enumerate(res_df_files):\n","\n","  if '2021-07-01'.upper() not in key:\n","  # if '2021-10-10'.upper() not in key:\n","    continue\n","\n","  # if \"link\".upper() not in key:\n","  # if \"btc\".upper() not in key:\n","  #   continue\n","\n","  if new_postfix not in key:\n","    continue\n","\n","  # if key in \n","\n","  if sample_cnt == max_cnt:\n","    dict_name = \"%s_res_dfs.pkl\" % key.split(\".\")[0]\n","    print(\"dict_name :\", dict_name)\n","\n","  base_df = saved_res_df_dict[key.replace(new_postfix, base_postfix)]\n","  # base_df = pd.read_excel(save_path + key.replace(new_postfix, base_postfix), index_col=0)  \n","  res_df = pd.read_excel(save_path + key, index_col=0)  \n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  droped_new_res_df.head()\n","  # break\n","\n","  # res_df_dict[key] = res_df\n","  res_df_dict[key] = droped_new_res_df\n","  print(key, \"saved to dict !\")\n","\n","  #     save with pickle    #\n","  with open(save_path + dict_name, 'wb') as f:\n","    pickle.dump(res_df_dict, f)\n","\n","  sample_cnt -= 1\n","\n","  if sample_cnt <= 0:\n","    break\n"]},{"cell_type":"markdown","metadata":{"id":"t1E_eAyPSuzm"},"source":["### new col to latest feather (1m_indi. only)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xyI5NrM7Suzm"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","\n","cum_dir = \"cum\"\n","\n","new_dir_path = \"rsi_backi2\"\n","base_dir_path = \"bbdc3m_backi2\"\n","\n","new_date = '2021-11-17'\n","\n","\n","\n","#     load ftr list    #\n","base_save_path = os.path.join(save_path, base_dir_path, \"concat/cum\", new_date)\n","new_save_path = base_save_path.replace(base_dir_path, new_dir_path)\n","\n","#     save to (new) cum dir    #\n","#      1. if dir. not exists, makedir\n","os.makedirs(new_save_path, exist_ok=True)\n","\n","ftr_list = [s for s in os.listdir(base_save_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_save_path, key), columns=None, use_threads=True).set_index(\"index\")\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  droped_new_res_df = sync_check(base_df)\n","\n","  # new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # # new_res_df.head()\n","\n","  # intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  # droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break\n","\n","  droped_new_res_df.reset_index().to_feather(os.path.join(new_save_path, key), compression='lz4')\n","\n","  print(os.path.join(new_save_path, key), \"saved !\")\n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"markdown","metadata":{"id":"nUs4fjVHSuzl"},"source":["### feather ver. (col concat)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6cu-Y82iSuzl"},"outputs":[],"source":["new_dir_path = \"ema5m_backi2\"\n","base_dir_path = \"rsi5m_backi2\"\n","\n","# new_date = \"2021-07-01\"\n","new_date = \"2021-11-17\"\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","save_path = './candlestick_concated/res_df/'\n","save_path = os.path.join(save_path, new_dir_path, \"concat/cum\", new_date)\n","os.makedirs(save_path, exist_ok=True)\n","\n","\n","#     load ftr list    #\n","# ftr_list = [s for s in os.listdir(os.path.join(save_path, new_dir_path)) if \"ftr\" in s]\n","\n","noncat_path = save_path.replace(\"concat/\", \"noncat/\")\n","ftr_list = [s for s in os.listdir(noncat_path) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(save_path.replace(new_dir_path, base_dir_path), key), columns=None, use_threads=True).set_index(\"index\")\n","  res_df = pd.read_feather(os.path.join(noncat_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break\n","\n","  droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","  # res_df_dict[key] = res_df\n","  # res_df_dict[key] = droped_new_res_df\n","  print(os.path.join(save_path, key), \"saved !\")\n","  \n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1638601523467,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"4GiF2NJPSuzm","outputId":"10697ea8-e9a4-4ebe-c556-52feb582e081"},"outputs":[{"data":{"text/plain":["Index(['dc_upper_1m', 'dc_lower_1m', 'dc_base_1m', 'dc_upper_3m', 'dc_lower_3m', 'dc_base_3m', 'dc_upper_5m', 'dc_lower_5m', 'dc_base_5m', 'dc_upper_15m', 'dc_lower_15m', 'dc_base_15m', 'dc_upper_30m', 'dc_lower_30m', 'dc_base_30m', 'dc_upper_1h', 'dc_lower_1h', 'dc_base_1h', 'dc_upper_4h', 'dc_lower_4h', 'dc_base_4h', 'bb_upper_1m', 'bb_lower_1m', 'bb_upper_3m', 'bb_lower_3m', 'bb_upper_5m', 'bb_lower_5m', 'bb_upper_15m', 'bb_lower_15m', 'bb_upper_30m', 'bb_lower_30m', 'bb_upper_1h', 'bb_lower_1h', 'bb_upper_4h', 'bb_lower_4h', 'rsi_1m', 'open', 'high', 'low', 'close', 'volume', 'rsi_5m'], dtype='object')"]},"execution_count":111,"metadata":{},"output_type":"execute_result"}],"source":["droped_new_res_df.columns"]},{"cell_type":"markdown","metadata":{"id":"WVAKq3i8Suzm"},"source":["### feather ver. (row concat) , database cum ÎèÑ Ìò∏ÌôòÍ∞ÄÎä•"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XG2p9OhhSuzm"},"outputs":[],"source":["save_path = './candlestick_concated/res_df/'\n","save_path = './candlestick_concated/database_bn/'\n","\n","new_date = '2021-11-17'\n","# base_date = '2021-10-10'\n","base_date = '2021-07-01'\n","\n","#     load ftr list    #\n","if \"database\" in save_path:\n","  dir_path = \"\"\n","  concat_dir = \"\"\n","else:\n","  dir_path = \"bbdc3m_backi2\"\n","  concat_dir = \"concat\"\n","\n","# base_date_path = os.path.join(save_path, dir_path, concat_dir, \"cum\", base_date)    # --> base ÎèÑ non_cum Í∞ÄÎä•Ìï®\n","base_date_path = os.path.join(save_path, dir_path, concat_dir, \"non_cum\", base_date)    # --> base ÎèÑ non_cum Í∞ÄÎä•Ìï®\n","# new_date_path = os.path.join(save_path, dir_path, concat_dir, \"non_cum\", new_date)\n","new_date_path = os.path.join(save_path, dir_path, concat_dir, \"cum\", new_date)    # --> cum Í∞ÄÎä•Ìï®\n","  \n","\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","save_path = new_date_path.replace(\"non_cum\", \"cum\")\n","os.makedirs(save_path, exist_ok=True)   # noncat / concat ÎëêÍ∞ÄÏßÄ Í≤ΩÏö∞ Ï°¥Ïû¨Í∞ÄÎä•Ìï† Í≤É\n","# os.makedirs(os.path.join(save_path, dir_path, \"noncat/cum\", new_date), exist_ok=True)\n","\n","\n","ftr_list = [s for s in os.listdir(new_date_path) if \"ftr\" in s]\n","exist_list = os.listdir(save_path)\n","print(ftr_list)\n","# break\n","\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for key in ftr_list:\n","\n","  if new_date not in key:\n","    continue\n","\n","  # if key in exist_list:\n","  #   print(key, \"already exist !\")\n","  #   continue\n","\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(base_date_path, key.replace(new_date, base_date)), columns=None, use_threads=True).set_index(\"index\")\n","  res_df = pd.read_feather(os.path.join(new_date_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=0) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  intersection_cols = res_df.columns.intersection(base_df.columns)\n","\n","  droped_new_res_df = new_res_df.loc[~new_res_df.index.duplicated(keep='last'),intersection_cols]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df = new_res_df.loc[:,~new_res_df.index.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break\n","  \n","  interval = key.split(\".\")[0].split(\"_\")[-1] \n","  itv_num = to_itvnum(interval)\n","\n","  # verified_df = consecutive_df(droped_new_res_df, to_itvnum(interval))\n","\n","  # verified_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","  # res_df_dict[key] = res_df\n","  # res_df_dict[key] = droped_new_res_df\n","  \n","  print(droped_new_res_df.iloc[[0, -1]])\n","\n","  np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","  ideal_ts_gap = 60 * itv_num\n","\n","  for ts_i in range(len(np_idx_ts)):\n","    \n","    if ts_i != 0:\n","      ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","\n","      if ts_gap > ideal_ts_gap or ts_gap < ideal_ts_gap:\n","      # if ts_gap == ideal_ts_gap:\n","        print(droped_new_res_df.index[ts_i - 1])\n","        print(droped_new_res_df.index[ts_i])\n","        # print(ts_gap)\n","        print(\"-------------------- unideal ts_gap --------------------\")\n","\n","  droped_new_res_df.reset_index().to_feather(os.path.join(save_path, key), compression='lz4')\n","\n","  print(os.path.join(save_path, key), \"saved !\")\n","  \n","\n","  # sample_cnt -= 1\n","\n","  # if sample_cnt <= 0:\n","  #   break\n"]},{"cell_type":"markdown","metadata":{"id":"L7l5CTJfSuzn"},"source":["#### check continuity"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3087,"status":"ok","timestamp":1638591157349,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"nGzMGyC3Suzn","outputId":"0605ab52-c76b-46c6-e4e4-1207604977f1"},"outputs":[{"name":"stdout","output_type":"stream","text":["                           open    high     low   close    volume\n","index                                                            \n","2020-09-05 00:00:59.999  228.12  228.48  223.93  223.97  2661.913\n","2021-11-17 00:51:59.999  606.61  606.80  606.54  606.75    63.332\n","[1.59926406e+09 1.59926412e+09 1.59926418e+09 1.59926424e+09\n"," 1.59926430e+09 1.59926436e+09 1.59926442e+09 1.59926448e+09\n"," 1.59926454e+09 1.59926460e+09]\n"]}],"source":["# print(droped_new_res_df.columns)\n","\n","print(droped_new_res_df.iloc[[0, -1]])\n","\n","np_idx_ts = np.array(list(map(lambda x: datetime.timestamp(x), droped_new_res_df.index)))\n","\n","print(np_idx_ts[:10])\n","for ts_i in range(len(np_idx_ts)):\n","  \n","  if ts_i != 0:\n","    ts_gap = np_idx_ts[ts_i] - np_idx_ts[ts_i - 1]\n","\n","    if ts_gap > 60 or ts_gap < 60:\n","    # if ts_gap == 60:\n","      print(droped_new_res_df.index[ts_i - 1])\n","      print(droped_new_res_df.index[ts_i])\n","      # print(ts_gap)\n","      print()\n"]},{"cell_type":"markdown","metadata":{"id":"qNGeuYuGDXfv"},"source":["# pr check with strategy"]},{"cell_type":"markdown","metadata":{"id":"6HOjnZjSgzk1"},"source":["## load ftr_list"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"7FPBG5Qqg2jB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1639724789841,"user_tz":-540,"elapsed":8,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"0c63908e-fdfd-4504-bbcc-0218e4f37166"},"outputs":[{"output_type":"stream","name":"stdout","text":["['2021-11-17 ETHUSDT.ftr', '2021-11-17 BTCUSDT.ftr', '2021-11-17 ETCUSDT.ftr', '2021-11-17 ADAUSDT.ftr', '2021-11-17 XLMUSDT.ftr', '2021-11-17 LINKUSDT.ftr', '2021-11-17 LTCUSDT.ftr', '2021-11-17 EOSUSDT.ftr', '2021-11-17 XRPUSDT.ftr', '2021-11-17 BCHUSDT.ftr']\n"]}],"source":["save_path = './candlestick_concated/res_df/'\n","\n","dir_path = \"ema5m_backi2\"\n","\n","date = \"2021-11-17\"\n","\n","ftr_path = os.path.join(save_path, dir_path, \"concat/cum\", date)\n","\n","#     load ftr list    #\n","ftr_list = [s for s in os.listdir(ftr_path) if \"ftr\" in s if date in s]\n","# ftr_list = [s for s in os.listdir(os.path.join(save_path, dir_path)) if \"ftr\" in s if date in s]\n","print(ftr_list)"]},{"cell_type":"markdown","metadata":{"id":"5duWn8t4BRyv"},"source":["## hvp platform"]},{"cell_type":"markdown","metadata":{"id":"wmnyUTS-yjF1"},"source":["##### config"]},{"cell_type":"markdown","source":["###### set config"],"metadata":{"id":"JjKHyqftzhD7"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"q_4E-zH02WJy"},"outputs":[],"source":["#     caution : MARKET / LIMIT spelling   #\n","#      json doesn't support single quotes     #\n","\n","param_dict = \\\n","{\n","  \"strat_version\": \"v3\",\n","  \"trader_set\": {\n","    \"run\": 1,\n","    \"df_log\": 0,\n","    \"last_index\": -2,\n","    \"limit_fee\": 0.0002,\n","    \"market_fee\": 0.0004,\n","    \"initial_asset\": 1000,\n","    \"asset_changed\" : 1,\n","    \"symbol\": \"ETHUSDT\",\n","    \"symbol_changed\": 0,\n","    \"interval_list\": [\n","      \"1m\",\n","      \"5m\",\n","      \"15m\"\n","    ],\n","    \"row_list\": [\n","      200,\n","      100,\n","      100\n","    ],\n","    \"short_inversion\": 0,\n","    \"long_inversion\": 0,\n","    \"bar_close_second\": 59,\n","    \"realtime_term\": 0.01,\n","    \"api_retry_term\": 3,\n","    \"check_entry_sec\": 10,\n","    \"entry_execution_wait\": 60,\n","    \"breakout_qty_ratio\": 0.97,\n","    \"qty_check_term\": 30,\n","    \"exit_execution_wait\": 60,\n","    \"close_complete_term\": 5,\n","    \"save_stacked_df\": 0,\n","    \"stacked_df_exist\": 1\n","  },\n","  \"loc_set\": {\n","    \"zone\":{\n","      \"dtk_itv\": \"5m\",\n","      \"short_spread\": 0.915,    \n","      \"long_spread\": 0.953,    \n","      \"tr_thresh\": \"None\",\n","      \"dtk_dc_itv\": \"None\",\n","      \"dt_k\": 0.225,\n","      \"dc_period\": 135,\n","      \"ei_k\": 0.095,\n","      \"use_dtk_line\": 0,\n","      \"zone_rejection\": 0,\n","      \"bbz_itv\": \"None\",\n","      \"zone_dt_k\": 0.4,\n","      \"zone_dc_period\": 135,\n","      \"dr_error\": 0.1,\n","      \"bbwp_thresh\": 0.5,\n","      \"entry_incycle\": 5,\n","      \"max_eplim_pct\": 0.05,\n","      \"min_eplim_pct\": 0.013           \n","    },\n","    \"point\":{\n","    \"exp_itv\": \"5m\",\n","    \"tpg_itv\": \"5m\",\n","    \"outg_itv\": \"5m\",\n","    \"outg_dc_period\": \"None\",\n","    \"tf_entry\": 5,\n","    \"htf_entry\": 15\n","    }\n","  },\n","  \"tr_set\": {\n","    \"ep_gap\": 0.083,\n","    \"tp_gap\": 0.36,\n","    \"out_gap\": -0.5,\n","    \"c_ep_gap\": 0.232,\n","    \"t_out_gap\": -0.5\n","  },\n","  \"ep_set\": {\n","    \"short_entry_score\": -2,\n","    \"entry_type\": \"LIMIT\",\n","    \"static_ep\": 1,\n","    \"tpout_onexec\": 0\n","  },\n","  \"out_set\": {\n","    \"out_type\": \"MARKET\",\n","    \"use_out\": 1,\n","    \"static_out\": 1,\n","    \"hl_out\": 1,\n","    \"price_restoration\": 0,\n","    \"retouch\": 0,\n","    \"retouch_out_period\": 500,\n","    \"second_out\": 0,\n","    \"approval_st_gap\": 1.5,\n","    \"second_out_gap\": 0.5\n","  },\n","  \"tp_set\": {\n","    \"non_tp\": 0,\n","    \"tp_type\": \"LIMIT\",\n","    \"static_tp\": 1,\n","    \"partial_num\": 1,\n","    \"partial_qty_divider\": 1.5\n","  },\n","  \"lvrg_set\": {\n","    \"leverage\": 2,\n","    \"static_lvrg\": 0,\n","    \"allow_float\": 0,\n","    \"target_pct\": 0.12,\n","    \"lvrg_rejection\": 0\n","  }\n","}\n","\n","config = EasyDict(param_dict)\n","# param_json = json.dumps(param_dict, indent=2)"]},{"cell_type":"markdown","source":["###### save config"],"metadata":{"id":"dzla8i9_ysmP"}},{"cell_type":"code","source":["config_name = \"config_v5_2.json\"\n","# config_name = \"config_v3.json\"\n","cfg_full_path = os.path.join(current_path, \"config\", config_name)\n","\n","\n","with open(cfg_full_path, 'w') as cfg:\n","    json.dump(config, cfg, indent=2)\n","    print(\"{} dumped !\".format(cfg_full_path))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FlNGKvW_w2za","executionInfo":{"status":"ok","timestamp":1639571030262,"user_tz":-540,"elapsed":498,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"f47a03ec-daae-4026-a4dd-df78dc12710f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/My Drive/Colab Notebooks/JnQ/config/config_v5_2.json dumped !\n"]}]},{"cell_type":"markdown","source":["###### load config"],"metadata":{"id":"vOVr2jLczFQJ"}},{"cell_type":"code","source":["config1_name = \"config_v3_1216.json\"\n","config2_name = \"config_v5_2_1216.json\"\n","cfg_full_path1 = os.path.join(current_path, \"config\", config1_name)\n","cfg_full_path2 = os.path.join(current_path, \"config\", config2_name)\n","\n","with open(cfg_full_path1, 'r') as cfg:\n","    config1 = EasyDict(json.load(cfg))\n","with open(cfg_full_path2, 'r') as cfg:\n","    config2 = EasyDict(json.load(cfg))\n","  \n","print(config1.strat_version)\n","print(config2.strat_version)"],"metadata":{"id":"uPpMThtZzGtZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1639724791949,"user_tz":-540,"elapsed":1250,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"6f6abc14-49b0-426c-ab75-cbdf8651e993"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["v3\n","v5_2\n"]}]},{"cell_type":"markdown","metadata":{"id":"rLI8unIyroiC"},"source":["##### run"]},{"cell_type":"code","execution_count":18,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":48072,"status":"ok","timestamp":1639727786652,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"TdAn2bHHBWMF","outputId":"58be94b4-f3af-40c0-a91e-af396a77647c"},"outputs":[{"output_type":"stream","name":"stdout","text":["2021-11-17 ETHUSDT.ftr loaded !\n","config.loc_set.point.exp_itv : 5m\n","config.loc_set.point.tpg_itv : 5m\n","config.loc_set.point.outg_itv : 5m\n","config.loc_set.point.outg_dc_period : None\n","config.loc_set.zone.dtk_itv : 5m\n","-----------------------------------\n","config.loc_set.zone.tr_thresh : None\n","config.loc_set.zone.short_spread : 0.915\n","config.loc_set.zone.long_spread : 0.953\n","config.loc_set.zone.dt_k : 0.225\n","config.loc_set.zone.ei_k : 0.095\n","config.loc_set.zone.dc_period : 135\n","config.loc_set.zone.use_dtk_line : 0\n","config.loc_set.zone.zone_rejection : 0\n","config.loc_set.zone.bbz_itv : None\n","config.loc_set.zone.zone_dt_k : 0.4\n","config.loc_set.zone.zone_dc_period : 135\n","-----------------------------------\n","config.loc_set.point.tf_entry : 5\n","config.loc_set.point.htf_entry : 15\n","config.tr_set.ep_gap : 0.083\n","config.tr_set.out_gap : -0.5\n","config.tr_set.tp_gap : 0.36\n","config.tr_set.c_ep_gap : 0.232\n","config.tr_set.t_out_gap : -0.5\n","-----------------------------------\n","config.lvrg_set.leverage : 14\n","config.lvrg_set.target_pct : 0.12\n","elapsed_time : 11.819528579711914\n","supblot231 passed\n","supblot232 passed\n","supblot233 passed\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1600x1200 with 6 Axes>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]}],"source":["config = config1\n","\n","multi_mode = 1\n","\n","# ------- tp / out fee calc ------- #\n","if config.ep_set.entry_type == 'MARKET':\n","  if config.tp_set.tp_type != 'MARKET':   # Todo : Ïã§Ï†úÎ°ú, tp_fee Í∞Ä ÏïÑÎãå spread const. Î•º ÏúÑÌïú spread_fee1 ÏûÑ (Ï∂îÌõÑ ÏàòÏ†ï Í∂åÍ≥†)\n","    tp_fee = config.trader_set.market_fee + config.trader_set.limit_fee\n","  else:\n","    tp_fee = config.trader_set.market_fee + config.trader_set.market_fee\n","  out_fee = config.trader_set.market_fee + config.trader_set.market_fee\n","else:\n","  if config.tp_set.tp_type != 'MARKET':\n","    tp_fee = config.trader_set.limit_fee + config.trader_set.limit_fee\n","  else:\n","    tp_fee = config.trader_set.limit_fee + config.trader_set.market_fee\n","  out_fee = config.trader_set.limit_fee + config.trader_set.market_fee\n","  \n","\n","# ------- inversion set ------- #\n","inversion = 0\n","fdist_thresh = 1\n","\n","title_position = (0.30, 1)\n","show_plot = 1\n","show_detail = 0\n","\n","for key in ftr_list:\n","\n","  if config.trader_set.symbol in key:\n","    pass\n","  else:\n","    continue\n","\n","  # break\n","\n","  res_df = pd.read_feather(os.path.join(ftr_path, key), columns=None, use_threads=True).set_index(\"index\")#.loc[pd.to_datetime(\"2021-07-10 04:59:59.999000\"):]\n","  print(key, \"loaded !\")\n","  \n","  # print(\"res_df.columns :\", res_df.columns)  \n","  # print(res_df.tail(100))\n","  # print(\"res_df.index[0] :\", res_df.index[0])\n","  # # print(\"intmin(res_df.index[0]) :\", intmin(res_df.index[0]))\n","  # break\n","\n","  # -------------------- additional indi. -------------------- #    \n","  np_timeidx = np.array(list(map(lambda x : intmin(x), res_df.index)))\n","\n","  res_df = utils_public.public_indi(res_df)\n","  \n","  res_df = utils1.enlist_rtc(res_df, config1)\n","  if multi_mode:\n","    res_df = utils2.enlist_rtc(res_df, config2)\n","\n","  #   temp param    #\n","  allow_rsi_touch = 1\n","  rsi_gap = 5\n","\n","  rsi_upper = 70\n","  rsi_lower = 30\n","\n","  early_out_tpg = 0.36\n","\n","  itv_num_list = [1, 3, 5, 15]\n","\n","  itv_list = ['15m', '30m', '1h', '4h']\n","  # itv_list = ['3m', '5m', '15m', '30m', '1h', '4h']\n","\n","  # x_val_list = np.arange(0.5, 0., -0.05)     # prcn 2\n","  # x_val_list = np.arange(0.95, 0.943, -0.001)    # prcn 3\n","  # x_val_list = np.arange(0.944, 0.945, 0.0001)    # prcn 4\n","  x_val_list = np.arange(0.0, 1., 0.05)\n","\n","  y_val_cols = [\"wr\", \"frq\", \"dpf\", \"min_pr\", \"acc_pr\", \"sum_pr\", \"liqd\", \"tr\", \"dr\", \"sr\"]\n","  # y_rev_val_cols = [\"wr\", \"min_pr\", \"acc_pr\", \"sum_pr\"]\n","  y_rev_val_cols = [\"wr\", \"min_pr\", \"acc_pr\", \"sum_pr\", \"sr\"]\n","\n","  survey_df = pd.DataFrame(index=x_val_list, columns=y_val_cols)\n","  short_survey_df = pd.DataFrame(index=x_val_list, columns=y_val_cols)\n","  long_survey_df = pd.DataFrame(index=x_val_list, columns=y_val_cols)\n","  rev_survey_df = pd.DataFrame(index=x_val_list, columns=y_rev_val_cols)\n","  rev_short_survey_df = pd.DataFrame(index=x_val_list, columns=y_rev_val_cols)\n","  rev_long_survey_df = pd.DataFrame(index=x_val_list, columns=y_rev_val_cols)\n","\n","  for survey_i, just_loop in enumerate(range(1)):\n","  # for survey_i, config.loc_set.zone.tr_thresh in enumerate(x_val_list): \n","  # for survey_i, config.loc_set.zone.short_spread in enumerate(x_val_list): \n","  # for survey_i, config.loc_set.zone.long_spread in enumerate(x_val_list): \n","  # for survey_i, config.loc_set.zone.dt_k in enumerate(x_val_list):\n","  # for survey_i, config.loc_set.zone.dc_period in enumerate(x_val_list):\n","  # for survey_i, config.loc_set.zone.ei_k in enumerate(x_val_list):   \n","  # for survey_i, config.loc_set.zone.dr_error in enumerate(x_val_list): \n","  # for survey_i, config.loc_set.point.tf_entry in enumerate(x_val_list):\n","  # for survey_i, config.loc_set.zone.bbz_itv in enumerate(itv_list):\n","  # for survey_i, config.tr_set.ep_gap in enumerate(x_val_list): \n","  # for survey_i, config.tr_set.out_gap in enumerate(x_val_list): \n","  # for survey_i, config.tr_set.tp_gap in enumerate(x_val_list): \n","  # for survey_i, config.lvrg_set.leverage in enumerate(x_val_list):\n","  # for survey_i, config.lvrg_set.target_pct in enumerate(x_val_list):   \n","  # for survey_i, outg_dc_itv_num in enumerate(x_val_list): \n","  # for survey_i, exp_itv in enumerate(itv_list): \n","  # for survey_i, zone_dt_k in enumerate(x_val_list): \n","  # for survey_i, t_out_gap in enumerate(x_val_list): \n","  # for survey_i, zone_dc_period in enumerate(x_val_list): \n","  # for survey_i, early_out_tpg in enumerate(x_val_list): \n","  \n","    start_0 = time.time()\n","\n","    print(\"config.loc_set.point.exp_itv :\", config.loc_set.point.exp_itv)\n","    print(\"config.loc_set.point.tpg_itv :\", config.loc_set.point.tpg_itv)\n","    print(\"config.loc_set.point.outg_itv :\", config.loc_set.point.outg_itv)\n","    print(\"config.loc_set.point.outg_dc_period :\", config.loc_set.point.outg_dc_period)\n","    print(\"config.loc_set.zone.dtk_itv :\", config.loc_set.zone.dtk_itv)\n","    print(\"-----------------------------------\")    \n","    # print(\"dtk_dc_itv :\", dtk_dc_itv)    \n","    # print(\"config.loc_set.dtk_dc_itv_num :\", config.loc_set.dtk_dc_itv_num :\",)\n","    print(\"config.loc_set.zone.tr_thresh :\", config.loc_set.zone.tr_thresh)\n","    print(\"config.loc_set.zone.short_spread :\", config.loc_set.zone.short_spread)\n","    print(\"config.loc_set.zone.long_spread :\", config.loc_set.zone.long_spread)\n","    print(\"config.loc_set.zone.dt_k :\", config.loc_set.zone.dt_k)\n","    print(\"config.loc_set.zone.ei_k :\", config.loc_set.zone.ei_k)\n","    print(\"config.loc_set.zone.dc_period :\", config.loc_set.zone.dc_period)\n","    print(\"config.loc_set.zone.use_dtk_line :\", config.loc_set.zone.use_dtk_line)\n","\n","    print(\"config.loc_set.zone.zone_rejection :\", config.loc_set.zone.zone_rejection)\n","    print(\"config.loc_set.zone.bbz_itv :\", config.loc_set.zone.bbz_itv)\n","    print(\"config.loc_set.zone.zone_dt_k :\", config.loc_set.zone.zone_dt_k)\n","    print(\"config.loc_set.zone.zone_dc_period :\", config.loc_set.zone.zone_dc_period)\n","    # print(\"config.loc_set.open_shift :\", config.loc_set.open_shift)\n","    print(\"-----------------------------------\")\n","    # print(\"config.ep_set.dr_error :\", config.ep_set.dr_error)\n","    print(\"config.loc_set.point.tf_entry :\", config.loc_set.point.tf_entry)\n","    print(\"config.loc_set.point.htf_entry :\", config.loc_set.point.htf_entry)\n","    print(\"config.tr_set.ep_gap :\", config.tr_set.ep_gap)\n","    print(\"config.tr_set.out_gap :\", config.tr_set.out_gap)\n","    print(\"config.tr_set.tp_gap :\", config.tr_set.tp_gap)  \n","    print(\"config.tr_set.c_ep_gap :\", config.tr_set.c_ep_gap)\n","    print(\"config.tr_set.t_out_gap :\", config.tr_set.t_out_gap)\n","    print(\"-----------------------------------\")\n","    print(\"config.lvrg_set.leverage :\", config.lvrg_set.leverage)\n","    print(\"config.lvrg_set.target_pct :\", config.lvrg_set.target_pct)\n","    \n","    # print(\"early_out_tpg :\", early_out_tpg)\n","\n","    # res_df['sma_1m'] = res_df['close'].rolling(sma_period).mean()  \n","    # res_df = bb_level(res_df, '5m', bbg)\n","    \n","    res_df = utils1.enlist_tr(res_df, config1, np_timeidx)\n","    if multi_mode:\n","      res_df = utils2.enlist_tr(res_df, config2, np_timeidx)\n","\n","\n","    #       trading : Ïó¨Í∏∞ÎèÑ Ï≤¥Í≤∞ Í≤∞Í≥ºÏóê ÎåÄÌï¥ Î¨òÏÇ¨Ìï®       #\n","    trade_list = []\n","    h_trade_list = []\n","    leverage_list = []\n","    fee_list = []\n","    short_fee_list = []\n","    long_fee_list = []\n","    open_list = []\n","    zone_list = []\n","    side_list = []\n","\n","    tp_ratio_list = []\n","    short_tp_ratio_list = []\n","    long_tp_ratio_list = []\n","\n","    dr_list = []\n","    short_dr_list = []\n","    long_dr_list = []\n","\n","    liqd_list = []\n","    short_liqd_list = []\n","    long_liqd_list = []\n","\n","    nontp_liqd_list = []\n","    nontp_short_liqd_list = []\n","    nontp_long_liqd_list = []\n","\n","    nontp_pr_list = []\n","    nontp_short_pr_list = []\n","    nontp_long_pr_list = []\n","\n","    nontp_short_indexs = []\n","    nontp_long_indexs = []\n","\n","    nontp_short_ep_list = []\n","    nontp_long_ep_list = []\n","\n","    pr_list = []\n","    long_list = []\n","    short_list = []\n","\n","    h_pr_list = []\n","    h_long_list = []\n","    h_short_list = []\n","\n","    ep_tp_list = []\n","    h_ep_tp_list = []\n","    tp_state_list = []\n","\n","    i = 0\n","    while 1:\n","    # for i in range(len(res_df)):  \n","\n","      run = 0\n","      # if res_df['entry_{}'.format(config.strat_version)][i] == config.ep_set.short_entry_score: \n","      if multi_mode:\n","        if res_df['entry_{}'.format(config1.strat_version)][i] == config1.ep_set.short_entry_score or \\\n","            res_df['entry_{}'.format(config2.strat_version)][i] == config2.ep_set.short_entry_score: \n","          run = -1\n","        elif res_df['entry_{}'.format(config1.strat_version)][i] == -config1.ep_set.short_entry_score or \\\n","          res_df['entry_{}'.format(config2.strat_version)][i] == -config2.ep_set.short_entry_score: \n","          run = 1 \n","      else:\n","        if res_df['entry_{}'.format(config1.strat_version)][i] == config1.ep_set.short_entry_score:\n","          run = -1\n","        elif res_df['entry_{}'.format(config1.strat_version)][i] == -config1.ep_set.short_entry_score:\n","          run = 1\n","\n","      if run == -1:\n","        # print(\"i in short :\", i)\n","\n","        #     Ïù¥Í≥≥ÏóêÏÑú ÏÇ¨Ïö©Îê† config Í∞Ä Ï†ïÌï¥Ïßê    #\n","        if res_df['entry_{}'.format(config1.strat_version)][i] == config1.ep_set.short_entry_score:\n","          config = config1\n","        else:\n","          config = config2\n","\n","        strat_version = config.strat_version\n","    \n","        # ------- fee init ------- #\n","        if config.ep_set.entry_type == 'LIMIT':\n","          fee = config.trader_set.limit_fee\n","        else:\n","          fee = config.trader_set.market_fee\n","        \n","        # --------------- set partial tp --------------- #\n","        short_tps = [res_df['short_tp_{}'.format(strat_version)]]\n","        long_tps = [res_df['long_tp_{}'.format(strat_version)]]\n","\n","        # short_tps = [short_tp2, short_tp] # org\n","        # long_tps = [long_tp2, long_tp]\n","        \n","        # short_tps = [short_tp, short_tp2]\n","        # long_tps = [long_tp, long_tp2]\n","\n","        initial_i = i\n","\n","        if config.out_set.static_out:\n","          p_i = initial_i\n","        else:\n","          p_i = i\n","\n","\n","        res_df, open_side_str, zone = utils_public.short_ep_loc(res_df, config, i, show_detail)\n","\n","\n","        # -------------- mr_score summation -------------- #\n","        if open_side_str is not None:          \n","          pass\n","\n","        else:\n","          i += 1\n","          if i >= len(res_df):\n","            break\n","          continue\n","\n","\n","        ep_j = initial_i\n","        out_j = initial_i\n","\n","        # -------------- limit waiting : limit_out -------------- #\n","\n","        if config.ep_set.entry_type == \"LIMIT\":\n","\n","          allow_ep_in = 0 if strat_version in [\"v5_2\"] else 1\n","          entry_done = 0\n","          entry_open = 0\n","          prev_sar = None\n","\n","          # for e_j in range(i, len(res_df)): # entry_signal Ïù¥ open Í∏∞Ï§Ä (Ìï¥Îãπ bar ÏóêÏÑú Ï≤¥Í≤∞ Í∞ÄÎä•Ìï®)\n","          if i + 1 >= len(res_df):  # i should be checked if e_j starts from i+1\n","            break\n","          for e_j in range(i + 1, len(res_df)): # entry signalÏù¥ close Í∏∞Ï§Ä Ïùº Í≤ΩÏö∞\n","        \n","            if not config.ep_set.static_ep:\n","              ep_j = e_j\n","              out_j = e_j\n","\n","            if config.tp_set.static_tp:\n","              # if config.ep_set.tpout_onexec:\n","              #   tp_j = e_j\n","              # else:\n","                tp_j = initial_i\n","            else:\n","              tp_j = e_j  \n","\n","            #             1. ep ÏÑ§Ï†ï \n","            # -------------- np.inf ep -------------- #\n","            # if short_ep.iloc[initial_i] == np.inf:\n","            #   break\n","\n","\n","            #     1. check ep_out     #\n","            if config.loc_set.zone.ei_k != \"None\":\n","\n","              # if strat_version == \"v3\":\n","              if res_df['low'].iloc[e_j] <= res_df['h_short_rtc_1_{}'.format(strat_version)].iloc[tp_j] - \\\n","                res_df['h_short_rtc_gap_{}'.format(strat_version)].iloc[tp_j] * config.loc_set.zone.ei_k:\n","                break\n","\n","              # elif strat_version == \"v5_2\":\n","              # if res_df['low'].iloc[e_j] <= res_df['short_tp_{}'.format(strat_version)].iloc[tp_j]: # ep_out : tp_done\n","              # # if np_timeidx[e_j] % config.loc_set.point.tf_entry == config.loc_set.point.tf_entry - 1:\n","              #   break\n","\n","              # elif (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[e_j - 1] >= rsi_lower) & \\\n","              #                  (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[e_j] < rsi_lower):\n","              #   break\n","\n","            #     2. ep_loc.point2\n","            if strat_version == \"v5_2\" and allow_ep_in == 0:\n","              if (res_df['dc_upper_1m'].iloc[e_j - 1] <= res_df['dc_upper_15m'].iloc[e_j]) & \\\n","                  (res_df['dc_upper_15m'].iloc[e_j - 1] != res_df['dc_upper_15m'].iloc[e_j]):\n","                allow_ep_in = 1\n","                out_j = e_j\n","                # ep_j = e_j\n","                # continue  # limit entry Ïùò Í≤ΩÏö∞ ep_loc.point2 ÏôÑÎ£å ÏãúÏ†ê Ïù¥ÌõÑÎ°ú ÏßÑÏûÖÏù¥ Í∞ÄÎä•Ìïú Ï†ê\n","\n","              #     2-1. ep_out (ep_loc2) by ep_loc.point\n","              # if allow_ep_in and config.loc_set.zone.tr_thresh != \"None\":\n","              #   ep_ = res_df['close'].iloc[ep_j - 1]\n","              #   tr = ((res_df['short_tp_{}'.format(strat_version)].iloc[tp_j] - ep_ - tp_fee * ep_) / (ep_ - res_df['short_out_{}'.format(strat_version)].iloc[out_j] + out_fee * ep_))\n","              #   if tr < config.loc_set.zone.tr_thresh:\n","              #     break\n","\n","            #     3. check ep_in       #\n","            if allow_ep_in and res_df['high'].iloc[e_j] >= res_df['short_ep_{}'.format(strat_version)].iloc[ep_j]:\n","              entry_done = 1\n","              # print(\"res_df['high'].iloc[e_j] :\", res_df['high'].iloc[e_j])\n","              # print(\"e_j :\", e_j)\n","\n","              #     Ïù¥ÎØ∏, e_j open Ïù¥ ep Î≥¥Îã§ ÎÜíÏùÄ Í≤ΩÏö∞, entry[ep_j] => -2 Î°ú Î≥ÄÍ≤Ω   #\n","              if res_df['open'].iloc[e_j] >= res_df['short_ep_{}'.format(strat_version)].iloc[ep_j]:\n","                entry_open = 1\n","\n","              break\n","\n","\n","          i = e_j\n","          # print(\"i = e_j :\", i)\n","\n","          if entry_done:      \n","            pass\n","\n","          else:\n","            i += 1\n","            if i >= len(res_df):\n","              break\n","            continue\n","\n","        # ----------------- end wait ----------------- #\n","\n","        # if e_j - initial_i >= 200:\n","        #   print(\"e_j, initial_i :\", e_j, initial_i)\n","        # print(\"e_j - initial_i :\", e_j - initial_i)\n","        # print()\n","\n","        open_list.append(initial_i)\n","        zone_list.append(zone)\n","        side_list.append('s')\n","        \n","        #     e_j ÎùºÎäî Î≥ÄÏàòÎäî MARKET Ïóê ÏûàÏñ¥ÏÑú Ï†ïÏùòÎêòÏÑúÎäî ÏïàÎêòÎäî Î≥ÄÏàòÏûÑ   #\n","        if config.ep_set.entry_type == 'MARKET':\n","          # try:\n","          #   ep_list = [res_df['close'].iloc[e_j]]\n","          # except Exception as e:\n","          #   # print('error in ep_list (initial) :', e)\n","          ep_list = [res_df['close'].iloc[ep_j]]\n","\n","        else:          \n","          if not entry_open:\n","            ep_list = [res_df['short_ep_{}'.format(strat_version)].iloc[ep_j]]\n","          \n","          else:\n","            #   ep_j Îäî Ìï≠ÏÉÅ ÏûàÏùå, LIMIT Ïù∏ Í≤ΩÏö∞ e_j ÎèÑ Ìï≠ÏÉÅ Ï°¥Ïû¨Ìï® --> dynamic_ep Ïó¨Î∂ÄÏóê Îî∞Îùº ep_j = e_j Í∞Ä ÎêòÎäî Í≤ΩÏö∞Îßå Ï°¥Ïû¨Ìï† ÎøêÏûÑ \n","            #   Îî∞ÎùºÏÑú, ep_j Î°ú ÌÜµÏùº Í∞ÄÎä•Ìï® (dynamic_ep Ïù∏ Í≤ΩÏö∞, ep_j = e_j ÎêòÏñ¥ÏûàÏùå)\n","            fee = config.trader_set.market_fee\n","            ep_list = [res_df['open'].iloc[e_j]]  # --> Ï≤¥Í≤∞Ïù¥ ÎêòÎäî e_j idx Í∏∞Ï§ÄÏúºÎ°ú ÌïòÎäîÍ≤å ÎßûÏùå\n","\n","        if not config.lvrg_set.static_lvrg:\n","\n","          ep_ = ep_list[0]\n","          out_ = res_df['short_out_{}'.format(strat_version)].iloc[out_j]\n","          config.lvrg_set.leverage = utils_public.lvrg_set(res_df, config, \"SELL\", ep_, out_, fee)\n","\n","          # -------------- leverage rejection -------------- #\n","          if config.lvrg_set.leverage == None:\n","            open_list.pop()\n","            zone_list.pop()\n","            side_list.pop()\n","            i += 1\n","            if i >= len(res_df):\n","              break\n","            continue          \n","        \n","        leverage_list.append(config.lvrg_set.leverage)\n","\n","        # try:\n","        if config.ep_set.entry_type == \"MARKET\":\n","          ep_idx_list = [ep_j]  # ep_j Îäî ep_type Ïú†Í¥ÄÌïòÍ≤å Ï°¥Ïû¨ÌïòÎäî Î≥ÄÏàòÎãàÍπå try Ïóê Í±∏Ïñ¥ÎëêÎäîÍ≤å ÎßûÏùå <-- # market Ïù∏Îç∞, e_j Î≥ÄÏàòÍ∞Ä Ìï†ÎãπÎêú Í≤ΩÏö∞ Í≥†Î†§Ìï¥ÏïºÌï®\n","        else:\n","          ep_idx_list = [e_j]\n","\n","        out_idx_list = [out_j]\n","\n","        # except Exception as e:\n","        #   # print('error in ep_idx_list :', e)        \n","        #   ep_idx_list = [e_j]\n","\n","        tp_list = []\n","        tp_idx_list = []\n","\n","        partial_tp_cnt = 0\n","        hedge_cnt = 1\n","\n","        h_ep, h_tp = None, None\n","        h_i, h_j = None, None\n","        \n","        trade_done = 0\n","        cross_on = 0\n","        out = 0\n","        # config.out_set.retouch\n","\n","        #     Todo    #\n","        #      1. future_work : ÏÉÅÎã®Ïùò retouch ÏôÄ Í≤πÏπ® \n","        config.out_set.retouch = 0\n","        \n","\n","        if i == len(res_df) - 1: # if j start from i + 1 \n","          open_list.pop()       \n","          zone_list.pop()       \n","          side_list.pop()       \n","        for j in range(i + 1, len(res_df)):\n","\n","        # for j in range(i, len(res_df)):\n","\n","          if config.tp_set.static_tp:\n","            if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","              tp_j = ep_j  # tpout_onexec = using dynamic_ep --> using ep_j Ïóê ÎåÄÌïú Ïù¥Ïú†\n","            else:\n","              tp_j = initial_i\n","          else:\n","            tp_j = j\n","\n","          if config.out_set.static_out:\n","            if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","              out_j = ep_j\n","            # else:           \n","            #   out_j = initial_i   # --> referenced upper phase as initail_j / e_j (start of limit wait)\n","          else:\n","            out_j = j\n","\n","\n","          # -------------- sub ep -------------- #\n","          # if res_df['high'].iloc[j - 1] <= res_df['sar2'].iloc[j - 1] and res_df['high'].iloc[j] > res_df['sar2'].iloc[j]:\n","            \n","          #   sub_ep = res_df['sar2'].iloc[j - 1]\n","\n","          #   if sub_ep < ep_list[-1]:\n","          #     ep_list.append(sub_ep)\n","          #     ep_idx_list.append(j)\n","\n","          \n","          # -------------- hedge only once -------------- #\n","          #             ÏùºÎã®, h_quantity Îäî Ï¥àÍ∏∞ ÏßÑÏûÖÍ≥º ÎèôÏùºÌïòÍ≤å ÏÑ§Ï†ï         #\n","          # if res_df['high'].iloc[j] >= res_df['minor_ST2_Up'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] >= res_df['minor_ST2_Up'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] >= res_df['minor_ST3_Up'].iloc[j] and hedge_cnt == 1:\n","\n","          #   h_ep = res_df['close'].iloc[j]\n","          #   hedge_cnt -= 1\n","          #   h_i = j\n","\n","\n","          # -------------- ultimate limit tp -------------- #\n","          if not config.tp_set.non_tp:\n","\n","            #               1. by price line             #\n","            if config.tp_set.tp_type == 'LIMIT' or config.tp_set.tp_type == \"BOTH\":\n","\n","              for s_i, short_tp_ in enumerate(short_tps):\n","\n","                if res_df['low'].iloc[j] <= short_tp_.iloc[tp_j] and partial_tp_cnt == s_i: # we use static tp now\n","                # if res_df['low'].iloc[j] <= short_tp_.iloc[j]:\n","                # if res_df['low'].iloc[j] <= short_tp_.iloc[j] <= res_df['high'].iloc[j]: --> Ïù¥Í±¥ ÏûòÎ™ªÎêòÏóàÏùå\n","\n","                  if s_i == len(short_tps) - 1:\n","                    trade_done = 1\n","                  \n","                  partial_tp_cnt += 1\n","\n","                  #         dynamic tp        #\n","                  # if 0:\n","                  if short_tp_.iloc[j] != short_tp_.iloc[j - 1] and not config.tp_set.static_tp:\n","\n","                    #   tp limit Ïù¥ Î∂àÍ∞ÄÌïú Í≤ΩÏö∞ = open Ïù¥ Ïù¥ÎØ∏, tp Î•º ÎÑòÏùÄ Í≤ΩÏö∞ # \n","                    # if res_df['open'].iloc[j] < short_tp_.iloc[initial_i]:\n","                    if res_df['open'].iloc[j] < short_tp_.iloc[j]:\n","\n","                      # tp = short_tp_.iloc[initial_i]\n","                      tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"d-short_open {}\".format(strat_version))\n","\n","                    #   tp limit Ïù¥ Í∞ÄÎä•Ìïú Í≤ΩÏö∞ = open Ïù¥ ÏïÑÏßÅ, tp Î•º ÎÑòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ # \n","                    else:\n","\n","                      # tp = short_tp_.iloc[initial_i]\n","                      tp = short_tp_.iloc[j]\n","                      # tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"d-short_tp {}\".format(strat_version))\n","\n","                  #         static tp         #\n","                  else:\n","                    \n","                    #   tp limit Ïù¥ Î∂àÍ∞ÄÌïú Í≤ΩÏö∞ = open Ïù¥ Ïù¥ÎØ∏, tp Î•º ÎÑòÏùÄ Í≤ΩÏö∞ # \n","                    #   non_inversion Ïùò Í≤ΩÏö∞, short_tp Í∞Ä Í∞ÄÎä•Ìï®   #              \n","\n","                    # if res_df['open'].iloc[j] < short_tp_.iloc[initial_i]:\n","                    if res_df['open'].iloc[j] < short_tp_.iloc[tp_j]:\n","\n","                      # tp = short_tp_.iloc[initial_i]\n","                      tp = short_tp_.iloc[tp_j]\n","\n","                      # tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"s-short_tp {}\".format(strat_version))\n","\n","                    #   tp limit Ïù¥ Í∞ÄÎä•Ìïú Í≤ΩÏö∞ = open Ïù¥ ÏïÑÏßÅ, tp Î•º ÎÑòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ # \n","                    else:\n","\n","                      # tp = short_tp_.iloc[initial_i]\n","                      tp = short_tp_.iloc[tp_j]\n","\n","                      # tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"s-short_tp {}\".format(strat_version))   \n","\n","                  tp_list.append(tp)     \n","                  tp_idx_list.append(j)\n","                  fee += config.trader_set.limit_fee\n","\n","\n","            #           2. by signal        #\n","            if config.tp_set.tp_type == 'MARKET' or (config.tp_set.tp_type == \"BOTH\" and not trade_done):\n","\n","              market_tp = 0\n","\n","              # -------------- sar tp -------------- #\n","              # if (res_df['high'].iloc[j] >= res_df['sar2'].iloc[j]) & \\\n","              #   (res_df['high'].iloc[j - 1] < res_df['sar2'].iloc[j - 1]) & \\\n","              #   (res_df['high'].iloc[j - 2] < res_df['sar2'].iloc[j - 2]):\n","\n","              #       inversion     #\n","              # if (res_df['low'].iloc[j] <= res_df['sar2'].iloc[j]) & \\\n","              #   (res_df['low'].iloc[j - 1] > res_df['sar2'].iloc[j - 1]) & \\\n","              #   (res_df['low'].iloc[j - 2] > res_df['sar2'].iloc[j - 2]):\n","              \n","              # ----------- st short ----------- #\n","              # if res_df['close'].iloc[j] <= res_df['short_tp'].iloc[tp_j]:\n","              \n","              # -------------- sar pb tp -------------- #\n","              # if res_df['low'].iloc[j] <= res_df['short_tp'].iloc[initial_i]:\n","\n","              # -------------- st tp -------------- #\n","              # if res_df['close'].iloc[j] > res_df['middle_line'].iloc[j]:       \n","\n","              # -------------- fisher tp -------------- #            \n","              # if entry[j] == 1:\n","              \n","              # -------------- timestamp -------------- #\n","              # if np_timeidx[j] % config.loc_set.point.tf_entry == config.loc_set.point.tf_entry - 1:       \n","\n","              # -------------- rsi -------------- #\n","              # if (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j - 1] >= rsi_lower) & \\\n","              #                  (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j] < rsi_lower):                            \n","              #   market_tp = 1\n","\n","              # ---------------------------- early out ---------------------------- #\n","\n","              # #         rsi slight touch        #\n","              # elif allow_rsi_touch:\n","              #   if (np.min(res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[initial_i:j]) < rsi_lower + rsi_gap) & \\\n","              #     (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j] >= 50):\n","              #     market_tp = 1              \n","                           \n","              #           tp early out          #\n","              # # if (np.min(res_df['low'].iloc[e_j:j]) < res_df['short_tp'].iloc[tp_j]) & \\\n","              # if (np.min(res_df['low'].iloc[e_j:j]) < res_df['h_short_rtc_1'].iloc[tp_j] - res_df['h_short_rtc_gap'].iloc[tp_j] * early_out_tpg) & \\\n","              #   (res_df['close'].iloc[j] >= res_df['short_ep'].iloc[ep_j]):\n","              #   market_tp = 1 \n","\n","              #         bb_upper early out        #\n","              if strat_version == \"v5_2\":\n","                if res_df['close'].iloc[j] < res_df['bb_lower_5m'].iloc[j] < res_df['close'].iloc[j - 1]:\n","                  cross_on = 1\n","\n","                if cross_on == 1 and res_df['close'].iloc[j] > res_df['bb_upper_5m'].iloc[j] > res_df['close'].iloc[j - 1]:\n","                  market_tp = 1\n","\n","              if market_tp:\n","                \n","                tp = res_df['close'].iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                trade_done = 1\n","\n","                if trade_done:\n","                  tp_state_list.append(\"short close tp\")\n","\n","                tp_list.append(tp) \n","                tp_idx_list.append(j)\n","                fee += config.trader_set.market_fee\n","\n","\n","                  \n","          # -------------- out -------------- #\n","          if not trade_done and config.out_set.use_out and j != len(res_df) - 1:\n","\n","            # -------------- macd -------------- #\n","            # if res_df['macd_hist3'].iloc[j] > 0:  #  macd out\n","            # if res_df['macd_hist3'].iloc[i] < 0 and res_df['macd_hist3'].iloc[j] > 0:\n","\n","            # -------------- st config.out_set.retouch -------------- #\n","            # out = 1 ÏÉÅÌÉúÎ©¥ ÎèôÏùº tick ÏóêÏÑú config.out_set.retouch Î•º Ï°∞ÏÇ¨Ìï† Í±∞Í∏∞ ÎïåÎ¨∏Ïóê, Î®ºÏ†Ä Í≤ÄÏÇ¨Ìï®\n","            # Í∑∏Î¶¨Í≥†, out Í∏∞Ï§ÄÏù¥ close Îùº Ïù¥Í≤å ÎßûÏùå \n","            # close Í∞Ä short_out Î≥¥Îã§ Ïò¨ÎùºÍ∞ÄÏûàÎäî ÏÉÅÌÉúÏùºÌÖåÎãà low Î•º Ï°∞ÏÇ¨ÌïòÎäîÍ≤å ÎßûÏùå           \n","            # if out and res_df['low'].iloc[j] <= short_out.iloc[out_j]:\n","            #   config.out_set.retouch = 1\n","\n","            \n","             # ------- ÏùºÏ†ïÏãúÍ∞Ñ Ïù¥ÏÉÅ, dynamic_out Ï†ÅÏö© ------ #\n","            try:\n","              if j - out_idx >= config.out_set.retouch_out_period:\n","                static_short_out = res_df['short_out_{}'.format(strat_version)].iloc[j]\n","            \n","            except Exception as e:\n","              pass\n","\n","              # ------- static out ------ #\n","            try:\n","              if out and res_df['low'].iloc[j] <= static_short_out:\n","                config.out_set.retouch = 1\n","            except Exception as e:\n","              pass\n","\n","            \n","              # ------- config.out_set.retouch out ------ #\n","            # if out and res_df['low'].iloc[j] <= short_out2.iloc[out_j]:\n","            #   config.out_set.retouch = 1\n","\n","\n","            # -------------- st -------------- #\n","            # if res_df['close'].iloc[j] > res_df['middle_line'].iloc[j]:    \n","            # if res_df['close'].iloc[j] > res_df['minor_ST3_Up'].iloc[j]:\n","            # if res_df['close'].iloc[j] > upper_middle.iloc[j]:\n","            # if res_df['close'].iloc[j] > res_df['minor_ST1_Up'].iloc[j]:\n","            if out == 0:              \n","              if config.out_set.hl_out:\n","                if res_df['high'].iloc[j] >= res_df['short_out_{}'.format(strat_version)].iloc[out_j]: # check out only once\n","                  out = 1\n","\n","              else:\n","                if res_df['close'].iloc[j] >= res_df['short_out_{}'.format(strat_version)].iloc[out_j]: # check out only once\n","                  out = 1\n","\n","              # out_idx = j\n","              # static_short_out = short_out.iloc[out_j]\n","              # if config.out_set.second_out:              \n","                # static_short_out = short_out.iloc[out_j] + res_df['st_gap'].iloc[out_j] * config.out_set.second_out_gap\n","            \n","            # if out == 0 and res_df['high'].iloc[j] >= short_out.iloc[out_j]: # check out only once\n","            #   out = 1\n","             \n","\n","            # -------------- sma -------------- #\n","            # if res_df['close'].iloc[j] > res_df[sma].iloc[j]:\n","\n","            # -------------- sar -------------- #\n","            # if res_df['close'].iloc[j] > res_df['minor_ST3_Up'].iloc[j] \\\n","            #   or res_df['sar2'].iloc[j] <= res_df['high'].iloc[j]:\n","            # if res_df['close'].iloc[j] > short_out.iloc[initial_i]: # or \\\n","            #   out = 1\n","              # res_df['sar2_uptrend'].iloc[j] == 1: # or \\\n","\n","            # if res_df['sar2_uptrend'].iloc[j] == 1:\n","\n","            #   if prev_sar is None:\n","            #     prev_sar = res_df['sar2'].iloc[j - 1]\n","              \n","            #   if res_df['close'].iloc[j] > prev_sar:\n","            #     out = 1\n","\n","            # else:\n","            #   if res_df['close'].iloc[j] > res_df['sar2'].iloc[j]:\n","            #     out = 1\n","              \n","            # -------------- hl -------------- #\n","            # if res_df['close'].iloc[j] > short_out.iloc[tp_j]:\n","            \n","            # -------------- stoch -------------- #\n","            # if res_df['stoch'].iloc[j - 2] >= res_df['stoch'].iloc[j - 1] and \\\n","            #   res_df['stoch'].iloc[j - 1] < res_df['stoch'].iloc[j] and \\\n","            #   res_df['stoch'].iloc[j - 1] <= stoch_lower:\n","            #   out = 1\n","\n","            # config.out_set.retouch 1 Í≤ΩÏö∞, config.out_set.retouch Ï°∞Í±¥ÎèÑ ÏûàÏñ¥ÏïºÌï®\n","            if out:\n","              if config.out_set.retouch:\n","                if config.out_set.retouch:\n","                  pass\n","                else:\n","                    continue\n","\n","              else:\n","                pass\n","\n","              if config.out_set.price_restoration:\n","                tp = res_df['short_out_{}'.format(strat_version)].iloc[out_j]\n","                if config.out_set.second_out:\n","                  tp = res_df['short_out2_{}'.format(strat_version)].iloc[out_j]\n","                \n","                # if res_df['close'].iloc[j] > tp: # Ïù¥ Í≤ΩÏö∞Î•º protect ÌïòÎäîÍ±¥ insane ÏûÑ\n","                #   tp = res_df['close'].iloc[j]\n","\n","              else:\n","                \n","                if res_df['open'].iloc[j] >= res_df['short_out_{}'.format(strat_version)].iloc[out_j]:\n","                  tp = res_df['open'].iloc[j]\n","                else:\n","                  if config.out_set.hl_out:\n","                    tp = res_df['short_out_{}'.format(strat_version)].iloc[out_j]\n","                  else:\n","                    tp = res_df['close'].iloc[j]\n","                \n","                # if not config.out_set.static_out:\n","                #   if res_df['open'].iloc[j] >= res_df['short_out_{}'.format(strat_version)].iloc[out_j]: # close Í∏∞Ï§ÄÏù¥Îùº Ïù¥Îü∞ Ï°∞Í±¥ÏùÑ Î™ªÏîÄ, Ï∞®ÎùºÎ¶¨ j Î•º i Î∂ÄÌÑ∞ ÏãúÏûë\n","                #     tp = res_df['open'].iloc[j]\n","                #   else:\n","                #     tp = res_df['close'].iloc[j]\n","\n","                # else:\n","                #   tp = res_df['close'].iloc[j]\n","\n","              \n","              if config.out_set.retouch: # out Í≥º open ÎπÑÍµê\n","                if config.out_set.second_out:\n","                  if res_df['open'].iloc[j] <= res_df['short_out2_{}'.format(strat_version)].iloc[out_j]:\n","                    tp = res_df['open'].iloc[j]\n","                else:\n","                  if res_df['open'].iloc[j] <= res_df['short_out_{}'.format(strat_version)].iloc[out_j]:\n","                    tp = res_df['open'].iloc[j]\n","\n","                try: # static_short_out Ïù∏ Í≤ΩÏö∞, open ÎèÑ Í≥†Î†§Ìïú tp set\n","                  if res_df['open'].iloc[j] <= static_short_out:\n","                    tp = res_df['open'].iloc[j]\n","                  else:\n","                    tp = static_short_out\n","                except Exception as e:\n","                  pass\n","\n","              trade_done = 1\n","              tp_state_list.append(\"short close_out {}\".format(strat_version))\n","            \n","\n","              tp_list.append(tp) \n","              tp_idx_list.append(j)\n","              fee += config.trader_set.market_fee\n","\n","\n","          # -------------- non tp -------------- #\n","          if j == len(res_df) - 1:\n","            trade_done = 1\n","            tp = res_df['close'].iloc[j]\n","            tp_list.append(tp) \n","            tp_idx_list.append(j)\n","            fee += config.trader_set.market_fee\n","          \n","\n","\n","          # -------------- append trade data -------------- #\n","          if trade_done:\n","\n","            # --------------- tp_ratio info --------------- #\n","            #         Todo        #\n","            #          short_out Ïóê ÎåÄÌïú Ï†ïÎ≥¥Îäî Ï°¥Ïû¨Ìï®,\n","            #          short_tp Ïóê ÎåÄÌïú Ï†ïÎ≥¥Îäî Ï°¥Ïû¨Ìï®,\n","            #       => initial_i Í∏∞Ï§ÄÏúºÎ°ú ,dynamic | static set ÏùÑ tp ÏôÄ out Ïóê Í∞ÅÍ∞Å Ï†ÅÏö©\n","            #          config.lvrg_set.leverage Îäî initial_i Í∏∞Ï§ÄÏúºÎ°ú Ï†ÅÏö©ÎêòÎãàÍπå\n","            #          Ï†ÅÏö©Îêú tp & out ÏúºÎ°ú abs((tp - ep) / (ep - out)) Í≥ÑÏÇ∞\n","            try:\n","              if config.out_set.use_out:\n","                done_tp = res_df['short_tp_{}'.format(strat_version)].iloc[tp_j]\n","                done_out = res_df['short_out_{}'.format(strat_version)].iloc[out_j]\n","\n","                if done_out <= ep_list[0]: # loss > 1\n","                  dr = np.nan\n","                  tp_ratio = np.nan\n","                else:                \n","                  dr = ((ep_list[0] - done_tp) / (done_out - ep_list[0]))\n","                  tp_ratio = ((ep_list[0] - done_tp - tp_fee * ep_list[0]) / (done_out - ep_list[0] + out_fee * ep_list[0]))\n","                \n","              else:\n","                dr = np.nan\n","                tp_ratio = np.nan  \n","\n","\n","            except Exception as e:\n","              dr = np.nan \n","              tp_ratio = np.nan  \n","            \n","            tp_ratio_list.append(tp_ratio)\n","            short_tp_ratio_list.append(tp_ratio)     \n","            dr_list.append(dr)\n","            short_dr_list.append(dr)   \n","\n","\n","            # -------------------- partial tp -------------------- #\n","            #        1. len(tp_list) Ïóê ÎåÄÏùëÌïòÎäî qty_list Î•º ÎßåÎì§Ïñ¥ÏïºÌï®    #\n","            #        2. temp_pr_list Î•º ÎßåÎì§Ïñ¥ Ï¥ùÌï© + 1 ÏùÑ pr_list Ïóê Ï†ÄÏû•      #\n","            #        2-1. temp_pr = sum((ep / tp_list[i] - fee - 1) * qty_list[i])   #\n","            #        3. temp_pr_list Ïùò Ï≤´ tp ÏóêÎäî r_qty Î•º Ìï†ÎãπÌï®        #\n","            qty_list = []\n","            temp_pr_list = []\n","            r_qty = 1\n","            for q_i in range(len(tp_list) - 1, -1, -1):\n","\n","              if len(tp_list) == 1:\n","                temp_qty = r_qty\n","              else:\n","                if q_i !=0:\n","                  temp_qty = r_qty / config.tp_set.partial_qty_divider\n","                else:\n","                  temp_qty = r_qty\n","\n","              temp_pr = (ep_list[0] / tp_list[q_i] - fee - 1) * temp_qty * config.lvrg_set.leverage\n","              # temp_pr = (ep_list[0] / tp_list[q_i] - fee - 1) * temp_qty\n","              r_qty -= temp_qty\n","\n","              temp_pr_list.append(temp_pr)\n","              qty_list.append(temp_qty)\n","\n","            # if len(temp_pr_list) == 1:\n","            #   print(\"qty_list :\", qty_list)\n","            #   print(\"temp_pr_list :\", temp_pr_list)\n","\n","            temp_pr = sum(temp_pr_list) + 1\n","\n","            # -------------------- sub ep -> pr calc -------------------- #\n","            if len(ep_list) > 1:\n","            \n","              p_ep_pr = []\n","              for sub_ep_ in ep_list:\n","                sub_pr = (sub_ep_ / tp - fee - 1) * config.lvrg_set.leverage\n","                p_ep_pr.append(sub_pr)\n","\n","              temp_pr = sum(p_ep_pr) + 1\n","\n","              print(\"temp_pr :\", temp_pr)\n","\n","            # ------------ hedge + non_hedge pr summation ------------ #\n","            #         hedge pr direction is opposite to the origin       #\n","            hedge_pr = 1\n","            if hedge_cnt == 0:\n","\n","              #       hedge tp      #\n","              h_tp = res_df['close'].iloc[j]\n","              hedge_pr = (h_tp / h_ep - fee - 1) * config.lvrg_set.leverage  # hedge long\n","              temp_pr += hedge_pr\n","              h_j = j\n","\n","            \n","            # hh = max(res_df['high'].iloc[i:j + 1])\n","            hh = max(res_df['high'].iloc[i:j])    # pos. Ï†ïÎ¶¨ÌïòÍ∏∞ Î∞îÎ°ú ÏßÅÏ†ÑÍπåÏßÄ\n","            short_liq = (ep_list[0] / hh - fee - 1) * config.lvrg_set.leverage + 1\n","\n","            if j != len(res_df) - 1:\n","\n","              # ep_tp_list.append((ep, tp_list))  \n","              ep_tp_list.append((ep_list, tp_list))  \n","              # trade_list.append([initial_i, i, j])\n","              # trade_list.append((ep_idx_list, tp_idx_list))\n","              trade_list.append((ep_idx_list, out_idx_list, tp_idx_list))\n","\n","              liqd_list.append(short_liq)\n","              short_liqd_list.append(short_liq)\n","\n","              h_ep_tp_list.append((h_ep, h_tp))      # hedge ÎèÑ ep_tp_list Ï≤òÎüº Î≥ÄÍ≤ΩÌï¥Ï£ºÏñ¥ÏïºÌïòÎäîÎç∞ ÏïÑÏßÅ ÏïàÍ±¥ÎìúÎ¶º, Îî±Ìûà ÏÇ¨Ïö©Ìï† ÏùºÏù¥ ÏóÜÏñ¥Î≥¥Ïó¨   \n","              h_trade_list.append([initial_i, h_i, h_j])                \n","\n","              pr_list.append(temp_pr)\n","              fee_list.append(fee)\n","              short_list.append(temp_pr)\n","              short_fee_list.append(fee)\n","\n","              h_pr_list.append(hedge_pr)\n","              h_short_list.append(hedge_pr)\n","\n","              i = j\n","              break\n","\n","            else:\n","\n","              # ep_tp_list.append((ep_list, tp_list))\n","              # trade_list.append((ep_idx_list, tp_idx_list))\n","              # plot_check ÎïåÎ¨∏Ïóê, pr_list ÍπåÏßÄ ÌïòÍ≤åÎêòÎ©¥ acc_pr eval Ïù¥ Íº¨Ïù¥Í≤åÎåê\n","          \n","              # pr_list Î•º ÎÑ£ÏßÄ ÏïäÏùÑÍ±∞ÎãàÍπå, open_list ÏóêÏÑú Ìï¥Îãπ idx Îäî pop\n","              open_list.pop()\n","              zone_list.pop()\n","              side_list.pop()\n","              \n","              #         tp ÎØ∏Ï≤¥Í≤∞ survey        #\n","              nontp_liqd_list.append(short_liq)\n","              nontp_short_liqd_list.append(short_liq)\n","              nontp_short_indexs.append(i)\n","              nontp_short_ep_list.append(ep_list[0])\n","\n","              nontp_short_pr = (ep_list[0] / tp - fee - 1) * config.lvrg_set.leverage + 1\n","              nontp_pr_list.append(nontp_short_pr)\n","              nontp_short_pr_list.append(nontp_short_pr)\n","\n","\n","      #                  long  phase                #\n","      # elif res_df['entry'][i] == -config.ep_set.short_entry_score:       \n","      # elif res_df['entry_{}'.format(config1.strat_version)][i] == -config1.ep_set.short_entry_score or \\\n","      #     res_df['entry_{}'.format(config2.strat_version)][i] == -config2.ep_set.short_entry_score: \n","      elif run == 1:\n","      \n","        #     Ïù¥Í≥≥ÏóêÏÑú ÏÇ¨Ïö©Îê† config Í∞Ä Ï†ïÌï¥Ïßê    #\n","        if res_df['entry_{}'.format(config1.strat_version)][i] == -config1.ep_set.short_entry_score:\n","          config = config1\n","        else:\n","          config = config2\n","\n","        strat_version = config.strat_version\n","    \n","        # ------- fee init ------- #\n","        if config.ep_set.entry_type == 'LIMIT':\n","          fee = config.trader_set.limit_fee\n","        else:\n","          fee = config.trader_set.market_fee\n","        \n","        # --------------- set partial tp --------------- #\n","        short_tps = [res_df['short_tp_{}'.format(strat_version)]]\n","        long_tps = [res_df['long_tp_{}'.format(strat_version)]]\n","\n","        # short_tps = [short_tp2, short_tp] # org\n","        # long_tps = [long_tp2, long_tp]\n","        \n","        # short_tps = [short_tp, short_tp2]\n","        # long_tps = [long_tp, long_tp2]\n","\n","        initial_i = i\n","\n","        if config.out_set.static_out:\n","          p_i = initial_i\n","        else:\n","          p_i = i\n","\n","        \n","        res_df, open_side_str, zone = utils_public.long_ep_loc(res_df, config, i, show_detail)\n","\n","        # -------------- mr_score summation -------------- #\n","        if open_side_str is not None:        \n","          pass\n","        \n","        else:\n","          i += 1\n","          if i >= len(res_df):\n","            break\n","          continue\n","\n","        # print(\"i after long_ep_loc :\", i)\n","\n","\n","        ep_j = initial_i\n","        out_j = initial_i\n","      \n","        # -------------- limit waiting const. -------------- #      \n","        if config.ep_set.entry_type == \"LIMIT\":\n","\n","          allow_ep_in = 0 if strat_version in [\"v5_2\"] else 1\n","          entry_done = 0\n","          entry_open = 0\n","          prev_sar = None\n","\n","          # for e_j in range(i, len(res_df)):   \n","\n","          if i + 1 >= len(res_df):  # i should be checked if e_j starts from i+1\n","            break\n","          for e_j in range(i + 1, len(res_df)):  # entry Í∞Ä close Í∏∞Ï§ÄÏùº Í≤ΩÏö∞ ÏÇ¨Ïö© (open Í∏∞Ï§ÄÏùº Í≤ΩÏö∞ i Î∂ÄÌÑ∞ ÏãúÏûëÌï¥ÎèÑ Î¨¥Î∞©Ìï®)\n","            \n","            if not config.ep_set.static_ep:\n","              ep_j = e_j  \n","              out_j = e_j\n","            \n","            if config.tp_set.static_tp:\n","              # if config.ep_set.tpout_onexec:\n","              #   tp_j = e_j\n","              # else:\n","                tp_j = initial_i\n","            else:\n","              tp_j = e_j  \n","\n","            \n","            #          np.inf ep         #\n","            # if long_ep.iloc[initial_i] == np.inf:\n","            #   break\n","            \n","            #     1. check ep_out     #\n","            if config.loc_set.zone.ei_k != \"None\":\n","\n","              if res_df['high'].iloc[e_j] >= res_df['h_long_rtc_1_{}'.format(strat_version)].iloc[tp_j] + \\\n","                res_df['h_long_rtc_gap_{}'.format(strat_version)].iloc[tp_j] * config.loc_set.zone.ei_k:\n","              # if res_df['high'].iloc[e_j] >= res_df['long_tp_{}'.format(strat_version)].iloc[tp_j]:                \n","              # if np_timeidx[e_j] % config.loc_set.point.tf_entry == config.loc_set.point.tf_entry - 1:\n","                break\n","\n","              # elif (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[e_j - 1] <= rsi_upper) & \\\n","              #                  (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[e_j] > rsi_upper):\n","              #   break            \n","\n","            \n","            #     2. ep_loc.point2\n","            if strat_version == \"v5_2\" and allow_ep_in == 0:\n","              if (res_df['dc_lower_1m'].iloc[e_j - 1] >= res_df['dc_lower_15m'].iloc[e_j]) & \\\n","                  (res_df['dc_lower_15m'].iloc[e_j - 1] != res_df['dc_lower_15m'].iloc[e_j]):\n","                allow_ep_in = 1\n","                out_j = e_j\n","                # ep_j = e_j\n","                # continue  # limit entry Ïùò Í≤ΩÏö∞ ep_loc.point2 ÏôÑÎ£å ÏãúÏ†ê Ïù¥ÌõÑÎ°ú ÏßÑÏûÖÏù¥ Í∞ÄÎä•Ìïú Ï†ê\n","                #     htf indi. Í∞Ä backi2 Í∏∞Ï§ÄÏù¥Îùº continue ÌïòÏßÄ ÏïäÏïÑÎèÑ Îê®\n","              \n","              #     2-1. ep_out (ep_loc2) by ep_loc.point\n","              # if allow_ep_in and config.loc_set.zone.tr_thresh != \"None\":\n","              #   ep_ = res_df['close'].iloc[ep_j - 1]\n","              #   tr = ((res_df['long_tp_{}'.format(strat_version)].iloc[tp_j] - ep_ - tp_fee * ep_) / (ep_ - res_df['long_out_{}'.format(strat_version)].iloc[out_j] + out_fee * ep_))\n","              #   # print(\"tr in long :\", tr)\n","              #   if tr < config.loc_set.zone.tr_thresh:\n","              #     break\n","\n","            #     3. check ep_in      #\n","            if allow_ep_in and res_df['low'].iloc[e_j] <= res_df['long_ep_{}'.format(strat_version)].iloc[ep_j]:\n","              entry_done = 1\n","              # print(\"e_j :\", e_j)\n","              \n","              #     Ïù¥ÎØ∏, e_j open Ïù¥ ep Î≥¥Îã§ ÎÇÆÏùÄ Í≤ΩÏö∞, entry[initial_i] => -2 Î°ú Î≥ÄÍ≤Ω   #\n","              if res_df['open'].iloc[e_j] <= res_df['long_ep_{}'.format(strat_version)].iloc[ep_j]:\n","                entry_open = 1\n","\n","              break\n","\n","\n","          i = e_j\n","          # print(\"i = e_j :\", i)\n","\n","          if entry_done:      \n","            pass\n","            # print(\"i, entry_done :\", i, entry_done)\n","\n","          else:\n","            i += 1\n","            if i >= len(res_df):\n","              # print(\"i :\", i)\n","              break\n","\n","            # print(\"i in continue :\", i)          \n","            continue\n","\n","\n","        # ---------------- end wait ---------------- #\n","        # if e_j - initial_i >= 200:\n","        #   print(\"e_j, initial_i :\", e_j, initial_i)\n","        \n","        # print(i)\n","\n","        open_list.append(initial_i)\n","        zone_list.append(zone)\n","        side_list.append('l')\n","\n","        if config.ep_set.entry_type == 'MARKET':\n","          ep_list = [res_df['close'].iloc[ep_j]]\n","        else:\n","          if not entry_open:\n","            ep_list = [res_df['long_ep_{}'.format(strat_version)].iloc[ep_j]]    # dynamic_ep Ïù∏ Í≤ΩÏö∞ÏóêÎèÑ e_j Í∞Ä ep_j Î°ú ÎåÄÏùëÎêòÍ∏∞ ÎïåÎ¨∏Ïóê ep_j Îßå ÏÇ¨Ïö©Ìï¥ÎèÑ Î¨¥Í¥Ä\n","          else:\n","            # try:\n","            #   ep_list = [res_df['open'].iloc[e_j]]\n","            # except Exception as e:\n","            fee = config.trader_set.market_fee\n","            ep_list = [res_df['open'].iloc[e_j]]  # --> Ï≤¥Í≤∞Ïù¥ ÎêòÎäî e_j idx Í∏∞Ï§ÄÏúºÎ°ú ÌïòÎäîÍ≤å ÎßûÏùå\n","\n","        if not config.lvrg_set.static_lvrg:\n","\n","          ep_ = ep_list[0]\n","          out_ = res_df['long_out_{}'.format(strat_version)].iloc[out_j]\n","          config.lvrg_set.leverage = utils_public.lvrg_set(res_df, config, \"BUY\", ep_, out_, fee)\n","\n","          # -------------- leverage rejection -------------- #\n","          if config.lvrg_set.leverage == None:\n","            open_list.pop()\n","            zone_list.pop()\n","            side_list.pop()\n","            i += 1\n","            if i >= len(res_df):\n","              break\n","            continue   \n","\n","        leverage_list.append(config.lvrg_set.leverage)\n","          \n","        if config.ep_set.entry_type == \"MARKET\":\n","          ep_idx_list = [ep_j]\n","        else:\n","          ep_idx_list = [e_j]\n","\n","        out_idx_list = [out_j]\n","\n","        tp_list = []\n","        tp_idx_list = []\n","\n","        partial_tp_cnt = 0\n","        hedge_cnt = 1\n","\n","        h_ep, h_tp = None, None        \n","        h_i, h_j = None, None      \n","\n","        trade_done = 0\n","        cross_on = 0\n","        out = 0          \n","        config.out_set.retouch = 0\n","\n","\n","        if i == len(res_df) - 1: # if j start from i + 1 \n","          open_list.pop()\n","          zone_list.pop()\n","          side_list.pop()\n","\n","        for j in range(i + 1, len(res_df)):\n","\n","        # for j in range(i, len(res_df)):  \n","          \n","          if config.tp_set.static_tp:\n","            if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","              tp_j = ep_j\n","            else:\n","              tp_j = initial_i\n","          else:\n","            tp_j = j\n","\n","          if config.out_set.static_out:\n","            if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","              out_j = ep_j\n","            # else:           \n","            #   out_j = initial_i\n","          else:\n","            out_j = j   \n","\n","          # -------------- hedge only once -------------- #\n","          #             ÏùºÎã®, h_quantity Îäî Ï¥àÍ∏∞ ÏßÑÏûÖÍ≥º ÎèôÏùºÌïòÍ≤å ÏÑ§Ï†ï         #\n","          # if res_df['low'].iloc[j] <= res_df['minor_ST2_Down'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] <= res_df['minor_ST2_Down'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] <= res_df['minor_ST3_Down'].iloc[j] and hedge_cnt == 1:\n","\n","          #   h_ep = res_df['close'].iloc[j]\n","          #   hedge_cnt -= 1\n","          #   h_i = j\n","\n","          # -------------- sub ep -------------- #\n","          # if res_df['low'].iloc[j - 1] >= res_df['sar2'].iloc[j - 1] and res_df['low'].iloc[j] < res_df['sar2'].iloc[j]:\n","            \n","          #   sub_ep = res_df['sar2'].iloc[j - 1]\n","\n","          #   if sub_ep > ep_list[-1]:\n","          #     ep_list.append(sub_ep)\n","          #     ep_idx_list.append(j)\n","\n","\n","          # -------------- ultimate tp -------------- #\n","          if not config.tp_set.non_tp:\n","            #            1. by level          #\n","            if config.tp_set.tp_type == \"LIMIT\" or config.tp_set.tp_type == \"BOTH\":\n","              \n","\n","              for l_i, long_tp_ in enumerate(long_tps):\n","\n","                if res_df['high'].iloc[j] >= long_tp_.iloc[tp_j] and partial_tp_cnt == l_i:\n","                # if res_df['high'].iloc[j] >= long_tp.iloc[j]:\n","\n","                  if l_i == len(long_tps) - 1:\n","                    trade_done = 1\n","\n","                  partial_tp_cnt += 1\n","\n","                  #         dynamic tp        #\n","                  # if 0:\n","                  if long_tp_.iloc[j] != long_tp_.iloc[j - 1] and not config.tp_set.static_tp:\n","\n","                    #   tp limit Ïù¥ Î∂àÍ∞ÄÌïú Í≤ΩÏö∞ = open Ïù¥ Ïù¥ÎØ∏, tp Î•º ÎÑòÏùÄ Í≤ΩÏö∞ # \n","                    # if res_df['open'].iloc[j] >= long_tp_.iloc[initial_i]:\n","                    if res_df['open'].iloc[j] >= long_tp_.iloc[j]:\n","\n","                      # tp = long_tp_.iloc[initial_i]\n","                      tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"d-long_open {}\".format(strat_version))\n","\n","                    \n","                    #   tp limit Ïù¥ Í∞ÄÎä•Ìïú Í≤ΩÏö∞ = open Ïù¥ ÏïÑÏßÅ, tp Î•º ÎÑòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ # \n","                    else:\n","                      \n","                      # tp = long_tp_.iloc[initial_i]\n","                      tp = long_tp_.iloc[j]\n","                      # tp = res_df['open'].iloc[j]\n","                      \n","                      if trade_done:\n","                        tp_state_list.append(\"d-long_tp {}\".format(strat_version))\n","\n","                  #         static tp         #\n","                  else:\n","\n","                    #   tp limit Ïù¥ Î∂àÍ∞ÄÌïú Í≤ΩÏö∞ = open Ïù¥ Ïù¥ÎØ∏, tp Î•º ÎÑòÏùÄ Í≤ΩÏö∞ # \n","                    #   non_inversion Ïùò Í≤ΩÏö∞, short_tp Í∞Ä Í∞ÄÎä•Ìï®   #\n","\n","                    if res_df['open'].iloc[j] >= long_tp_.iloc[tp_j]:\n","                    # if res_df['open'].iloc[j] >= long_tp_.iloc[initial_i]:\n","\n","                      # tp = long_tp_.iloc[initial_i]\n","                      tp = long_tp_.iloc[tp_j]\n","\n","                      # tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"s-long_tp {}\".format(strat_version))\n","\n","                    \n","                    #   tp limit Ïù¥ Í∞ÄÎä•Ìïú Í≤ΩÏö∞ = open Ïù¥ ÏïÑÏßÅ, tp Î•º ÎÑòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ # \n","                    else:\n","                      \n","                      # tp = long_tp_.iloc[initial_i]\n","                      tp = long_tp_.iloc[tp_j]\n","\n","                      # tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"s-long_tp {}\".format(strat_version))         \n","                  \n","                  tp_list.append(tp)\n","                  tp_idx_list.append(j)\n","                  fee += config.trader_set.limit_fee\n","\n","            #           2. by time        #\n","            if config.tp_set.tp_type == 'MARKET' or (config.tp_set.tp_type == \"BOTH\" and not trade_done):\n","\n","              market_tp = 0\n","\n","              # -------------- sar tp -------------- #\n","              # if (res_df['low'].iloc[j] <= res_df['sar2'].iloc[j]) & \\\n","              #   (res_df['low'].iloc[j - 1] > res_df['sar2'].iloc[j - 1]) & \\\n","              #   (res_df['low'].iloc[j - 2] > res_df['sar2'].iloc[j - 2]):\n","              \n","              #       inversion     #\n","              # if (res_df['high'].iloc[j] >= res_df['sar2'].iloc[j]) & \\\n","              #   (res_df['high'].iloc[j - 1] < res_df['sar2'].iloc[j - 1]) & \\\n","              #   (res_df['high'].iloc[j - 2] < res_df['sar2'].iloc[j - 2]):\n","\n","\n","              # ----------- st long ----------- #\n","              # if res_df['close'].iloc[j] >= res_df['long_tp'].iloc[tp_j]:\n","\n","              # -------------- sar pb tp -------------- #\n","              # if res_df['high'].iloc[j] >= res_df['long_tp'].iloc[initial_i]:\n","\n","              # -------------- st tp -------------- #\n","              # if res_df['close'].iloc[j] < res_df['middle_line'].iloc[j]:\n","\n","              # -------------- fisher tp -------------- #\n","              # if entry[j] == -1:\n","              \n","              # -------------- timestamp -------------- #\n","              # if np_timeidx[j] % config.loc_set.point.tf_entry == config.loc_set.point.tf_entry - 1:\n","\n","              # -------------- rsi -------------- #\n","              # if (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j - 1] <= rsi_upper) & \\\n","              #                  (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j] > rsi_upper):\n","              #   market_tp = 1\n","              \n","              # ---------------------------- early out phase ---------------------------- #\n","\n","              # #        rsi slight touch     #\n","              # elif allow_rsi_touch:\n","              #   if (np.max(res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[initial_i:j]) > rsi_upper - rsi_gap) & \\\n","              #     (res_df['rsi_%s' % config.loc_set.point.exp_itv].iloc[j] <= 50):\n","              #     market_tp = 1\n","\n","              #         tp early out        #\n","              # # if (np.max(res_df['high'].iloc[e_j:j]) > res_df['long_tp'].iloc[tp_j]) & \\\n","              # if (np.max(res_df['high'].iloc[e_j:j]) > res_df['h_long_rtc_1'].iloc[tp_j] + res_df['h_long_rtc_gap'].iloc[tp_j] * early_out_tpg) & \\\n","              #   (res_df['close'].iloc[j] <= res_df['long_ep'].iloc[ep_j]):\n","              #   market_tp = 1 \n","\n","              #         bb_upper early out        #\n","              if res_df['close'].iloc[j] > res_df['bb_upper_5m'].iloc[j] > res_df['close'].iloc[j - 1]:\n","                cross_on = 1\n","\n","              if cross_on == 1 and res_df['close'].iloc[j] < res_df['bb_lower_5m'].iloc[j] < res_df['close'].iloc[j - 1]:\n","                market_tp = 1\n","                              \n","              if market_tp:\n","\n","                tp = res_df['close'].iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                trade_done = 1\n","\n","                if trade_done:\n","                  tp_state_list.append(\"long close tp {}\".format(strat_version))\n","                  # print(\"early_out passed !\")\n","\n","                tp_list.append(tp) \n","                tp_idx_list.append(j)\n","                fee += config.trader_set.market_fee\n","\n","\n","\n","          # -------------- out -------------- #\n","          if not trade_done and config.out_set.use_out and j != len(res_df) - 1:              \n","\n","            # -------------- macd -------------- #\n","            # if res_df['macd_hist3'].iloc[j] < 0:\n","            # # if res_df['macd_hist3'].iloc[i] > 0 and res_df['macd_hist3'].iloc[j] < 0:\n","\n","            # -------------- st config.out_set.retouch -------------- #\n","            # out = 1 ÏÉÅÌÉúÎ©¥ ÎèôÏùº tick ÏóêÏÑú config.out_set.retouch Î•º Ï°∞ÏÇ¨Ìï† Í±∞Í∏∞ ÎïåÎ¨∏Ïóê, Î®ºÏ†Ä Í≤ÄÏÇ¨Ìï®\n","            # Í∑∏Î¶¨Í≥†, out Í∏∞Ï§ÄÏù¥ close Îùº Ïù¥Í≤å ÎßûÏùå \n","            # close Í∞Ä long_out Î≥¥Îã§ ÎÇ¥Î†§Í∞ÄÏûàÎäî ÏÉÅÌÉúÏùºÌÖåÎãà high Î•º Ï°∞ÏÇ¨ÌïòÎäîÍ≤å ÎßûÏùå           \n","            # if out and res_df['high'].iloc[j] >= long_out.iloc[out_j]:\n","            #   config.out_set.retouch = 1\n","\n","            \n","            # ------- ÏùºÏ†ïÏãúÍ∞Ñ Ïù¥ÏÉÅ, dynamic_out Ï†ÅÏö© ------ #\n","            try:\n","              if j - out_idx >= config.out_set.retouch_out_period:\n","                static_long_out = res_df['long_out_{}'.format(strat_version)].iloc[j]\n","            \n","            except Exception as e:\n","              pass\n","\n","              # ------- static out ------ #\n","            try:\n","              if out and res_df['high'].iloc[j] >= static_long_out:\n","                config.out_set.retouch = 1\n","            except Exception as e:\n","              pass\n","\n","              # ------- config.out_set.retouch out ------ #\n","            # if out and res_df['high'].iloc[j] >= long_out2.iloc[out_j]:\n","            #   config.out_set.retouch = 1\n","\n","\n","\n","            # -------------- st -------------- #\n","            # if res_df['close'].iloc[j] < res_df['middle_line'].iloc[j]:\n","            # if res_df['close'].iloc[j] < res_df['minor_ST3_Down'].iloc[j]:\n","            # if res_df['close'].iloc[j] < lower_middle.iloc[j]:\n","            # if res_df['close'].iloc[j] < res_df['minor_ST1_Down'].iloc[j]:\n","            if out == 0:\n","              if config.out_set.hl_out:\n","                if res_df['low'].iloc[j] <= res_df['long_out_{}'.format(strat_version)].iloc[out_j]: # check out only once\n","                  out = 1\n","\n","              else:\n","                if res_df['close'].iloc[j] <= res_df['long_out_{}'.format(strat_version)].iloc[out_j]: # check out only once\n","                  out = 1\n","\n","              # out_idx = j\n","              # static_long_out = long_out.iloc[out_j]\n","              # if config.out_set.second_out:\n","              # static_long_out = long_out.iloc[out_j] - res_df['st_gap'].iloc[out_j] * config.out_set.second_out_gap\n","\n","            # if out == 0 and res_df['low'].iloc[j] <= long_out.iloc[out_j]: # check out only once\n","            #   out = 1            \n","            \n","\n","\n","            # -------------- sma -------------- #\n","            # if res_df['close'].iloc[j] < res_df[sma].iloc[j]:\n","\n","            # -------------- sar -------------- #\n","            # if res_df['close'].iloc[j] < res_df['minor_ST3_Down'].iloc[j] \\\n","            #   or res_df['sar2'].iloc[j] >= res_df['low'].iloc[j]:\n","            # if res_df['close'].iloc[j] < long_out.iloc[initial_i]: # or \\\n","            #   #  res_df['close'].iloc[j] < res_df['sar2'].iloc[j]:\n","            #   #  res_df['sar2_uptrend'].iloc[j] == 0 or \\\n","            #   out = 1\n","            \n","            # if res_df['sar2_uptrend'].iloc[j] == 0:\n","\n","            #     if prev_sar is None:\n","            #       prev_sar = res_df['sar2'].iloc[j - 1]\n","                \n","            #     if res_df['close'].iloc[j] < prev_sar:\n","            #       out = 1\n","\n","            # else:\n","            #   if res_df['close'].iloc[j] < res_df['sar2'].iloc[j]:\n","            #     out = 1\n","\n","            # -------------- hl -------------- #\n","            # if res_df['close'].iloc[j] < long_out.iloc[tp_j]:\n","\n","            # -------------- stoch -------------- #\n","            # if res_df['stoch'].iloc[j - 2] <= res_df['stoch'].iloc[j - 1] and \\\n","            #   res_df['stoch'].iloc[j - 1] > res_df['stoch'].iloc[j] and \\\n","            #   res_df['stoch'].iloc[j - 1] >= stoch_upper:\n","            #   out = 1\n","\n","            # config.out_set.retouch 1 Í≤ΩÏö∞, config.out_set.retouch Ï°∞Í±¥ÎèÑ ÏûàÏñ¥ÏïºÌï®\n","            if out:\n","              if config.out_set.retouch:\n","                if config.out_set.retouch:\n","                  pass\n","                else:\n","                    continue\n","\n","              else:\n","                pass\n","\n","              if config.out_set.price_restoration:\n","                tp = res_df['long_out_{}'.format(strat_version)].iloc[out_j]\n","                if config.out_set.second_out:\n","                  tp = res_df['long_out2_{}'.format(strat_version)].iloc[out_j]\n","\n","                # if res_df['close'].iloc[j] < tp: # Ïù¥ Í≤ΩÏö∞Î•º protect ÌïòÎäîÍ±¥ insane ÏûÑ\n","                # # if res_df['high'].iloc[j] < tp: # --> config.out_set.hl_out ÏÇ¨Ïö©Ïãú Ïù¥ Ï°∞Í±¥ÏùÄ valid Ìï®\n","                #   tp = res_df['close'].iloc[j]\n","\n","              else:\n","\n","                if res_df['open'].iloc[j] <= res_df['long_out_{}'.format(strat_version)].iloc[out_j]:\n","                  tp = res_df['open'].iloc[j]\n","                else:\n","                  if config.out_set.hl_out:\n","                    tp = res_df['long_out_{}'.format(strat_version)].iloc[out_j]\n","                  else:\n","                    tp = res_df['close'].iloc[j]\n","\n","                # if not config.out_set.static_out:\n","                #   if res_df['open'].iloc[j] <= res_df['long_out'].iloc[out_j]: # dynamic close out Ïùò open Í≥†Î†§\n","                #     tp = res_df['open'].iloc[j]\n","                #   else:\n","                #     tp = res_df['close'].iloc[j]\n","\n","                # else:\n","                #   tp = res_df['close'].iloc[j]\n","\n","              if config.out_set.retouch: # out Í≥º open ÎπÑÍµê\n","                if config.out_set.second_out:  # long_out = sell\n","                # config.out_set.second_out ÏùÄ Í∏∞Î≥∏Ï†ÅÏúºÎ°ú limit Ïù¥Îùº Ïù¥ Íµ¨Ï°∞Í∞Ä Í∞ÄÎä•Ìï®\n","                  if res_df['open'].iloc[j] >= res_df['long_out2_{}'.format(strat_version)].iloc[out_j]: # dynamic_out Ïùº Í≤ΩÏö∞ Í≥†Î†§Ìï¥ÏïºÌï®\n","                    tp = res_df['open'].iloc[j]\n","                else:\n","                  if res_df['open'].iloc[j] >= res_df['long_out_{}'.format(strat_version)].iloc[out_j]: # dynamic_out Ïùº Í≤ΩÏö∞ Í≥†Î†§Ìï¥ÏïºÌï®\n","                    tp = res_df['open'].iloc[j]\n","\n","                try:\n","                  if res_df['open'].iloc[j] >= static_long_out:\n","                    tp = res_df['open'].iloc[j]\n","                  else:\n","                    tp = static_long_out\n","                except Exception as e:\n","                  pass\n","\n","              # tp = res_df['open'].iloc[j]\n","              tp_state_list.append(\"long close_out {}\".format(strat_version))\n","              trade_done = 1\n","\n","              tp_list.append(tp)\n","              tp_idx_list.append(j)\n","              fee += config.trader_set.market_fee\n","\n","          \n","          # -------------- non tp -------------- #\n","          if j == len(res_df) - 1:\n","            trade_done = 1\n","            tp = res_df['close'].iloc[j]\n","            tp_list.append(tp) \n","            tp_idx_list.append(j)\n","            fee += config.trader_set.market_fee\n","\n","\n","          if trade_done:\n","\n","            # --------------- tp_ratio info --------------- #\n","            try:\n","              if config.out_set.use_out:\n","                done_tp = res_df['long_tp_{}'.format(strat_version)].iloc[tp_j]\n","                done_out = res_df['long_out_{}'.format(strat_version)].iloc[out_j]\n","\n","                if done_out >= ep_list[0]: # loss >= 1\n","                  tp_ratio = np.nan\n","                  dr = np.nan\n","                  # print(\"loss >= 1\")\n","                else:\n","                  tp_ratio = ((done_tp - ep_list[0] - tp_fee * ep_list[0]) / (ep_list[0] - done_out + out_fee * ep_list[0]))                \n","                  dr = ((done_tp - ep_list[0]) / (ep_list[0] - done_out))          \n","\n","              else:      \n","                dr = np.nan\n","                tp_ratio = np.nan\n","\n","            except Exception as e:\n","              print(\"error in tr phase :\", e)\n","              dr = np.nan              \n","              tp_ratio = np.nan\n","            \n","            tp_ratio_list.append(tp_ratio)\n","            long_tp_ratio_list.append(tp_ratio)\n","            dr_list.append(dr)\n","            long_dr_list.append(dr)\n","\n","\n","            qty_list = []\n","            temp_pr_list = []\n","            r_qty = 1\n","            for q_i in range(len(tp_list) - 1, -1, -1):\n","\n","              if len(tp_list) == 1:\n","                temp_qty = r_qty\n","              else:\n","                if q_i !=0:\n","                  temp_qty = r_qty / config.tp_set.partial_qty_divider\n","                else:\n","                  temp_qty = r_qty\n","\n","              # temp_pr = (tp_list[q_i] / ep_list[0] - fee - 1) * temp_qty\n","              temp_pr = (tp_list[q_i] / ep_list[0] - fee - 1) * temp_qty * config.lvrg_set.leverage\n","              r_qty -= temp_qty\n","\n","              temp_pr_list.append(temp_pr)\n","\n","            temp_pr = sum(temp_pr_list) + 1\n","\n","            # -------------------- sub ep -> pr calc -------------------- #\n","            if len(ep_list) > 1:\n","            \n","              p_ep_pr = []\n","              for sub_ep_ in ep_list:\n","                sub_pr = (tp / sub_ep_ - fee - 1) * config.lvrg_set.leverage\n","                p_ep_pr.append(sub_pr)\n","\n","              temp_pr = sum(p_ep_pr) + 1\n","\n","              print(\"temp_pr :\", temp_pr)\n","\n","            # ------------ hedge + non_hedge pr summation ------------ #\n","            #         hedge pr direction is opposite to the origin       #\n","            hedge_pr = 1\n","            if hedge_cnt == 0:\n","\n","              #       hedge tp      #\n","              h_tp = res_df['close'].iloc[j]\n","              hedge_pr = (h_ep / h_tp - fee - 1) * config.lvrg_set.leverage  # hedge short\n","              temp_pr += hedge_pr\n","              h_j = j\n","\n","\n","            # ll = min(res_df['low'].iloc[i:j + 1])\n","            ll = min(res_df['low'].iloc[i:j])   # pos. Ï†ïÎ¶¨ÌïòÍ∏∞ Î∞îÎ°ú ÏßÅÏ†ÑÍπåÏßÄ\n","            long_liq = (ll / ep_list[0] - fee - 1) * config.lvrg_set.leverage + 1\n","\n","            if j != len(res_df) - 1:\n","\n","              ep_tp_list.append((ep_list, tp_list))\n","              # trade_list.append((ep_idx_list, tp_idx_list))\n","              trade_list.append((ep_idx_list, out_idx_list, tp_idx_list))\n","\n","              liqd_list.append(long_liq)\n","              long_liqd_list.append(long_liq)\n","\n","              h_ep_tp_list.append((h_ep, h_tp))        \n","              h_trade_list.append([initial_i, h_i, h_j])                \n","\n","              pr_list.append(temp_pr)\n","              fee_list.append(fee)\n","              long_list.append(temp_pr)\n","              long_fee_list.append(fee)\n","\n","              h_pr_list.append(hedge_pr)\n","              h_long_list.append(hedge_pr)                    \n","\n","              i = j\n","              break\n","            \n","            else:\n","\n","              # ep_tp_list.append((ep_list, tp_list))\n","              # trade_list.append((ep_idx_list, tp_idx_list))\n","              \n","              # pr_list Î•º ÎÑ£ÏßÄ ÏïäÏùÑÍ±∞ÎãàÍπå, open_list ÏóêÏÑú Ìï¥Îãπ idx Îäî pop\n","              open_list.pop()\n","              zone_list.pop()\n","              side_list.pop()\n","          \n","              #         tp ÎØ∏Ï≤¥Í≤∞ survey        #\n","              nontp_liqd_list.append(long_liq)\n","              nontp_long_liqd_list.append(long_liq)\n","              nontp_long_indexs.append(i)\n","              nontp_long_ep_list.append(ep_list[0])\n","              \n","              nontp_long_pr = (tp / ep_list[0] - fee - 1) * config.lvrg_set.leverage + 1\n","              nontp_pr_list.append(nontp_long_pr)\n","              nontp_long_pr_list.append(nontp_long_pr)\n","\n","            if len(open_list) > len(trade_list):\n","              print('debug from index :', i)\n","              print(len(open_list), len(trade_list))\n","              print(\"len(res_df) :\", len(res_df))\n","              assert len(open_list) == len(trade_list), 'stopped'\n","      \n","      i += 1  # if entry starts with prev trade's close, do not use it ! \n","      # print(\"i in end :\", i)\n","      if i >= len(res_df):\n","        break\n","\n","\n","\n","    # -------------------- result analysis -------------------- #\n","    # try:\n","    print(\"elapsed_time :\", time.time() - start_0)\n","\n","    plt.style.use('default')\n","    # mpl.rcParams.update(mpl.rcParamsDefault)\n","\n","    plt.figure(figsize=(16, 12))\n","    # plt.figure(figsize=(12, 8))\n","    # plt.figure(figsize=(10, 6))\n","    plt.suptitle(key)\n","\n","    try:\n","      np_pr = np.array(pr_list)\n","\n","      sr = sharpe_ratio(np_pr)\n","\n","      dpf = (len(res_df) / 1440) / len(np_pr)\n","\n","      np_zone_list = np.array(zone_list)\n","      # np_pr_list = np.array(pr_list)\n","      np_side_list = np.array(side_list)\n","\n","      t_w = np.sum(np.where((np_zone_list == 't') & (np_pr > 1), 1, 0))\n","      c_w = np.sum(np.where((np_zone_list == 'c') & (np_pr > 1), 1, 0))\n","      t_ls = np.sum(np.where((np_zone_list == 't') & (np_pr < 1), 1, 0))\n","      c_ls = np.sum(np.where((np_zone_list == 'c') & (np_pr < 1), 1, 0))\n","\n","      # np_pr = (np.array(pr_list) - 1) * config.lvrg_set.leverage + 1\n","\n","      # ----- fake_pr ----- #\n","      # np_pr = np.where(np_pr > 1, 1 + (np_pr - 1) * 3, np_pr)\n","\n","      total_pr = np.cumprod(np_pr)\n","\n","      for_sum_pr = np_pr - 1\n","      for_sum_pr[0] = 1\n","      sum_pr = np.cumsum(for_sum_pr)\n","      sum_pr = np.where(sum_pr < 0, 0, sum_pr)\n","\n","      wr = len(np_pr[np_pr > 1]) / len(np_pr[np_pr != 1])\n","\n","      np_tp_ratio_list = np.array(tp_ratio_list) # Ï¥àÍ∏∞Ïóê tr ÏùÑ Ï†ïÌïòÎäîÍ±∞Îùº mean ÏÇ¨Ïö©ÌïòÎäîÍ≤å ÎßûÏùå\n","      mean_tr = np.mean(np_tp_ratio_list[np.isnan(np_tp_ratio_list) == 0])\n","\n","      np_dr_list = np.array(dr_list) # Ï¥àÍ∏∞Ïóê tr ÏùÑ Ï†ïÌïòÎäîÍ±∞Îùº mean ÏÇ¨Ïö©ÌïòÎäîÍ≤å ÎßûÏùå\n","      mean_dr = np.mean(np_dr_list[np.isnan(np_dr_list) == 0])\n","\n","      # pr_gap = (np_pr - 1) / config.lvrg_set.leverage + fee\n","      # tp_gap_ = pr_gap[pr_gap > 0]\n","      # # mean_config.tr_set.tp_gap = np.mean(pr_gap[pr_gap > 0])\n","      # mean_ls_gap = np.mean(pr_gap[pr_gap < 0])\n","\n","      # ---- profit fee ratio ---- #\n","      # mean_pgfr = np.mean((tp_gap_ - fee) / abs(tp_gap_ + fee))\n","\n","      # plt.subplot(121)\n","      plt.subplot(231)\n","      plt.plot(total_pr)\n","      plt.plot(sum_pr, color='gold')\n","      if len(nontp_liqd_list) != 0:\n","        plt.title(\"wr : %.3f\\n len(td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (wr, len(np_pr[np_pr != 1]), dpf, np.min(np_pr), total_pr[-1], sum_pr[-1], sr) + \\\n","                  \"\\n leverage %s\\nliqd : %.3f\\nmean_tr : %.3f\\n mean_dr : %.3f\\n nontp_liqd_cnt : %s\\nnontp_liqd : %.3f\\nontp_liqd_pr : %.3f\\n tw cw tls cls : %s %s %s %s\" \n","                  % (config.lvrg_set.leverage, min(liqd_list), mean_tr, mean_dr, len(nontp_liqd_list), \n","                     min(nontp_liqd_list), min(nontp_pr_list), t_w, c_w, t_ls, c_ls),\n","                  position=title_position)\n","      else:\n","        plt.title(\"wr : %.3f\\n len(td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\" \n","                  % (wr, len(np_pr[np_pr != 1]), dpf, np.min(np_pr), total_pr[-1], sum_pr[-1], sr) + \\\n","                  \"\\n leverage %s\\nliqd : %.3f\\nmean_tr : %.3f\\n mean_dr : %.3f\\n nontp_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (config.lvrg_set.leverage, min(liqd_list), mean_tr, mean_dr, len(nontp_liqd_list), t_w, c_w, t_ls, c_ls), \n","                  position=title_position)\n","      # plt.show()\n","\n","      survey_df.iloc[survey_i] = wr, len(np_pr[np_pr != 1]), dpf, np.min(np_pr), \\\n","        total_pr[-1], sum_pr[-1], min(liqd_list), mean_tr, mean_dr, sr \n","\n","      print('supblot231 passed')\n","\n","    except Exception as e:\n","      print(\"error in 231 :\", e)\n","\n","\n","    try:\n","      #         short only      #\n","      short_np_pr = np.array(short_list)\n","\n","      short_sr = sharpe_ratio(short_np_pr)\n","\n","      short_dpf = (len(res_df) / 1440) / len(short_np_pr)\n","\n","      total_short_pr = np.cumprod(short_np_pr)\n","      \n","      short_for_sum_pr = short_np_pr - 1\n","      short_for_sum_pr[0] = 1\n","      short_sum_pr = np.cumsum(short_for_sum_pr)\n","      short_sum_pr = np.where(short_sum_pr < 0, 0, short_sum_pr)\n","\n","      short_wr = len(short_np_pr[short_np_pr > 1]) / len(short_np_pr[short_np_pr != 1])\n","      \n","      t_w_s = np.sum(np.where((np_zone_list == 't') & (np_pr > 1) & (np_side_list == 's'), 1, 0))\n","      c_w_s = np.sum(np.where((np_zone_list == 'c') & (np_pr > 1) & (np_side_list == 's'), 1, 0))\n","      t_ls_s = np.sum(np.where((np_zone_list == 't') & (np_pr < 1) & (np_side_list == 's'), 1, 0))\n","      c_ls_s = np.sum(np.where((np_zone_list == 'c') & (np_pr < 1) & (np_side_list == 's'), 1, 0))\n","      # short_cumprod_profit = np.cumprod(short_np_pr[short_np_pr > 1])[-1]\n","      # short_cumprod_loss = np.cumprod(short_np_pr[short_np_pr < 1])[-1]\n","      # short_pr_tr = short_cumprod_profit * short_cumprod_loss\n","\n","      np_short_tp_ratio_list = np.array(short_tp_ratio_list)\n","      mean_short_tr = np.mean(np_short_tp_ratio_list[np.isnan(np_short_tp_ratio_list) == 0])\n","      \n","      np_short_dr_list = np.array(short_dr_list)\n","      mean_short_dr = np.mean(np_short_dr_list[np.isnan(np_short_dr_list) == 0])\n","      \n","      # short_pr_gap = (short_np_pr - 1) / config.lvrg_set.leverage + fee\n","      # short_tp_gap = short_pr_gap[short_pr_gap > 0]\n","      # # mean_short_tp_gap = np.mean(short_pr_gap[short_pr_gap > 0])\n","      # # mean_short_ls_gap = np.mean(short_pr_gap[short_pr_gap < 0])\n","\n","      # mean_short_pgfr = np.mean((short_tp_gap - fee) / abs(short_tp_gap + fee))\n","      \n","      plt.subplot(232)\n","      plt.plot(total_short_pr)\n","      plt.plot(short_sum_pr, color='gold')\n","      if len(nontp_short_liqd_list) != 0:   \n","\n","        max_nontp_short_term = len(res_df) - nontp_short_indexs[0]\n","        \n","        plt.title(\"wr : %.3f\\nlen(short_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (short_wr, len(short_np_pr[short_np_pr != 1]), short_dpf, np.min(short_np_pr), total_short_pr[-1], short_sum_pr[-1], short_sr) + \\\n","                  \"\\n leverage %s\\nliqd : %.3f\\nmean_tr : %.3f\\n mean_dr : %.3f\\n nontp_short_liqd_cnt : %s\\nnontp_short_liqd : %.3f\\nontp_short_liqd_pr : %.3f\\nmax_nontp_short_term : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (config.lvrg_set.leverage, min(short_liqd_list), mean_short_tr, mean_short_dr, \n","                     len(nontp_short_liqd_list), min(nontp_short_liqd_list), min(nontp_short_pr_list), max_nontp_short_term, t_w_s, c_w_s, t_ls_s, c_ls_s),\n","                  position=title_position)\n","      else:\n","        plt.title(\"wr : %.3f\\nlen(short_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (short_wr, len(short_np_pr[short_np_pr != 1]), short_dpf, np.min(short_np_pr), total_short_pr[-1], short_sum_pr[-1], short_sr) + \\\n","                  \"\\n leverage %s\\nliqd : %.3f\\nmean_tr : %.3f\\n mean_dr : %.3f\\n nontp_short_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\" \n","                  % (config.lvrg_set.leverage, min(short_liqd_list), mean_short_tr, mean_short_dr, len(nontp_short_liqd_list), t_w_s, c_w_s, t_ls_s, c_ls_s),\n","                  position=title_position)\n","\n","      short_survey_df.iloc[survey_i] = short_wr, len(short_np_pr[short_np_pr != 1]), short_dpf, np.min(short_np_pr), \\\n","          total_short_pr[-1], short_sum_pr[-1], min(short_liqd_list), mean_short_tr, mean_short_dr, short_sr     \n","\n","      print('supblot232 passed')\n","    \n","    except Exception as e:\n","      print(\"error in 232 :\", e)\n","\n","    try:\n","      #         long only      #\n","      long_np_pr = np.array(long_list)\n","      # long_np_pr = (np.array(long_list) - 1) * config.lvrg_set.leverage + 1\n","\n","      long_sr = sharpe_ratio(long_np_pr)\n","\n","      long_dpf = (len(res_df) / 1440) / len(long_np_pr)\n","\n","      total_long_pr = np.cumprod(long_np_pr)\n","      \n","      long_for_sum_pr = long_np_pr - 1\n","      long_for_sum_pr[0] = 1\n","      long_sum_pr = np.cumsum(long_for_sum_pr)\n","      long_sum_pr = np.where(long_sum_pr < 0, 0, long_sum_pr)\n","\n","      long_wr = len(long_np_pr[long_np_pr > 1]) / len(long_np_pr[long_np_pr != 1])\n","\n","      t_w_l = np.sum(np.where((np_zone_list == 't') & (np_pr > 1) & (np_side_list == 'l'), 1, 0))\n","      c_w_l = np.sum(np.where((np_zone_list == 'c') & (np_pr > 1) & (np_side_list == 'l'), 1, 0))\n","      t_ls_l = np.sum(np.where((np_zone_list == 't') & (np_pr < 1) & (np_side_list == 'l'), 1, 0))\n","      c_ls_l = np.sum(np.where((np_zone_list == 'c') & (np_pr < 1) & (np_side_list == 'l'), 1, 0))\n","      # long_cumprod_profit = np.cumprod(long_np_pr[long_np_pr > 1])[-1]\n","      # long_cumprod_loss = np.cumprod(long_np_pr[long_np_pr < 1])[-1]\n","      # long_pr_tr = long_cumprod_profit * long_cumprod_loss\n","\n","      np_long_tp_ratio_list = np.array(long_tp_ratio_list)\n","      mean_long_tr = np.mean(np_long_tp_ratio_list[np.isnan(np_long_tp_ratio_list) == 0])\n","      \n","      np_long_dr_list = np.array(long_dr_list)\n","      mean_long_dr = np.mean(np_long_dr_list[np.isnan(np_long_dr_list) == 0])\n","\n","      # long_pr_gap = (long_np_pr - 1) / config.lvrg_set.leverage + fee\n","      # long_tp_gap = long_pr_gap[long_pr_gap > 0]\n","      # # mean_long_tp_gap = np.mean(long_pr_gap[long_pr_gap > 0])\n","      # # mean_long_ls_gap = np.mean(long_pr_gap[long_pr_gap < 0])\n","\n","      # mean_long_pgfr = np.mean((long_tp_gap - fee) / abs(long_tp_gap + fee))\n","\n","      plt.subplot(233)\n","      plt.plot(total_long_pr)\n","      plt.plot(long_sum_pr, color='gold')\n","      if len(nontp_long_liqd_list) != 0:\n","\n","        max_nontp_long_term = len(res_df) - nontp_long_indexs[0]\n","\n","        plt.title(\"wr : %.3f\\nlen(long_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (long_wr, len(long_np_pr[long_np_pr != 1]), long_dpf, np.min(long_np_pr), total_long_pr[-1], long_sum_pr[-1], long_sr) + \\\n","                  \"\\n leverage %s\\nliqd : %.3f\\nmean_tr : %.3f\\n mean_dr : %.3f\\n nontp_long_liqd_cnt : %s\\nnontp_long_liqd : %.3f\\nontp_long_liqd_pr : %.3f\\nmax_nontp_long_term : %s\\n tw cw tls cls : %s %s %s %s\"\n","                  % (config.lvrg_set.leverage, min(long_liqd_list), mean_long_tr, mean_long_dr, \n","                     len(nontp_long_liqd_list), min(nontp_long_liqd_list), min(nontp_long_pr_list), max_nontp_long_term, t_w_l, c_w_l, t_ls_l, c_ls_l),\n","                  position=title_position)\n","      else:\n","        plt.title(\"wr : %.3f\\nlen(long_td) : %s\\n dpf : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\"\n","                  % (long_wr, len(long_np_pr[long_np_pr != 1]), long_dpf, np.min(long_np_pr), total_long_pr[-1], long_sum_pr[-1], long_sr) + \\\n","                  \"\\n leverage %s\\nliqd : %.3f\\nmean_tr : %.3f\\n mean_dr : %.3f\\n nontp_long_liqd_cnt : %s\\n tw cw tls cls : %s %s %s %s\" \n","                  % (config.lvrg_set.leverage, min(long_liqd_list), mean_long_tr, mean_long_dr, len(nontp_long_liqd_list), t_w_l, c_w_l, t_ls_l, c_ls_l),\n","                  position=title_position)\n","\n","      long_survey_df.iloc[survey_i] = long_wr, len(long_np_pr[long_np_pr != 1]), long_dpf, np.min(long_np_pr), \\\n","        total_long_pr[-1], long_sum_pr[-1], min(long_liqd_list), mean_long_tr, mean_long_dr, long_sr     \n","\n","      print('supblot233 passed')\n","\n","    except Exception as e:\n","      print(\"error in 233 :\", e)\n","\n","\n","    try:\n","      #     reversion adjustment      #\n","      # rev_np_pr = 1 / (np.array(pr_list) + fee) - fee\n","      rev_fee = tp_fee + out_fee - np.array(fee_list)\n","      rev_np_pr = (1 / ((np.array(pr_list) - 1) / config.lvrg_set.leverage + np.array(fee_list) + 1) - rev_fee - 1) * config.lvrg_set.leverage + 1\n","      # rev_np_pr = (1 / (np.array(pr_list) + fee) - fee - 1) * config.lvrg_set.leverage + 1\n","          \n","      rev_sr = sharpe_ratio(rev_np_pr)\n","\n","      rev_total_pr = np.cumprod(rev_np_pr)\n","      rev_wr = len(rev_np_pr[rev_np_pr > 1]) / len(rev_np_pr[rev_np_pr != 1])\n","\n","      rev_total_for_sum_pr = rev_np_pr - 1\n","      rev_total_for_sum_pr[0] = 1\n","      rev_total_sum_pr = np.cumsum(rev_total_for_sum_pr)\n","      rev_total_sum_pr = np.where(rev_total_sum_pr < 0, 0, rev_total_sum_pr)\n","\n","      # plt.subplot(122)\n","      plt.subplot(234)\n","      plt.plot(rev_total_pr)\n","      plt.plot(rev_total_sum_pr, color='gold')\n","\n","      plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\" \n","                % (rev_wr, np.min(rev_np_pr), rev_total_pr[-1], rev_total_sum_pr[-1], rev_sr))\n","      \n","      rev_survey_df.iloc[survey_i] = rev_wr, np.min(rev_np_pr), rev_total_pr[-1], rev_total_sum_pr[-1], rev_sr\n","\n","    except Exception as e:\n","      print(\"error in 234 :\", e)\n","\n","    try:\n","      #         short       #\n","      # rev_short_np_pr = 1 / (np.array(short_list) + fee) - fee\n","      rev_short_fee = tp_fee + out_fee - np.array(short_fee_list)\n","      rev_short_np_pr = (1 / ((np.array(short_list) - 1) / config.lvrg_set.leverage + np.array(short_fee_list) + 1) - rev_short_fee - 1) * config.lvrg_set.leverage + 1\n","      # rev_short_np_pr = (1 / (np.array(short_list) + fee) - fee - 1) * config.lvrg_set.leverage + 1\n","      \n","      rev_short_sr = sharpe_ratio(rev_short_np_pr)\n","          \n","      rev_total_short_pr = np.cumprod(rev_short_np_pr)\n","      rev_short_wr = len(rev_short_np_pr[rev_short_np_pr > 1]) / len(rev_short_np_pr[rev_short_np_pr != 1])\n","\n","      rev_short_for_sum_pr = rev_short_np_pr - 1\n","      rev_short_for_sum_pr[0] = 1\n","      rev_short_sum_pr = np.cumsum(rev_short_for_sum_pr)\n","      rev_short_sum_pr = np.where(rev_short_sum_pr < 0, 0, rev_short_sum_pr)\n","\n","      # plt.subplot(122)\n","      plt.subplot(235)\n","      plt.plot(rev_total_short_pr)\n","      plt.plot(rev_short_sum_pr, color='gold')\n","\n","      plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\" \n","                % (rev_short_wr, np.min(rev_short_np_pr), rev_total_short_pr[-1], rev_short_sum_pr[-1], rev_short_sr))\n","\n","      rev_short_survey_df.iloc[survey_i] = rev_short_wr, np.min(rev_short_np_pr), rev_total_short_pr[-1], rev_short_sum_pr[-1], rev_short_sr\n","\n","    except Exception as e:\n","      print(\"error in 235 :\", e)\n","\n","    try:\n","      #         long       #\n","      # rev_long_np_pr = 1 / (np.array(long_list) + fee) - fee\n","      rev_long_fee = tp_fee + out_fee - np.array(long_fee_list)\n","      rev_long_np_pr = (1 / ((np.array(long_list) - 1) / config.lvrg_set.leverage + np.array(long_fee_list) + 1) - rev_long_fee - 1) * config.lvrg_set.leverage + 1\n","          \n","      rev_long_sr = sharpe_ratio(rev_long_np_pr)\n","\n","      rev_total_long_pr = np.cumprod(rev_long_np_pr)\n","      rev_long_wr = len(rev_long_np_pr[rev_long_np_pr > 1]) / len(rev_long_np_pr[rev_long_np_pr != 1])\n","\n","      rev_long_for_sum_pr = rev_long_np_pr - 1\n","      rev_long_for_sum_pr[0] = 1\n","      rev_long_sum_pr = np.cumsum(rev_long_for_sum_pr)\n","      rev_long_sum_pr = np.where(rev_long_sum_pr < 0, 0, rev_long_sum_pr)\n","\n","      # plt.subplot(122)\n","      plt.subplot(236)\n","      plt.plot(rev_total_long_pr)\n","      plt.plot(rev_long_sum_pr, color='gold')\n","\n","      plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n sum_pr : %.3f\\n sr : %.3f\" \n","                % (rev_long_wr, np.min(rev_long_np_pr), rev_total_long_pr[-1], rev_long_sum_pr[-1], rev_long_sr))\n","      \n","      rev_long_survey_df.iloc[survey_i] = rev_long_wr, np.min(rev_long_np_pr), rev_total_long_pr[-1], rev_long_sum_pr[-1], rev_long_sr\n","      \n","    except Exception as e:\n","      print(\"error in 236 :\", e)\n","\n","    if show_plot:\n","      plt.show()\n","    \n","\n","    try:\n","\n","      h_np_pr = np.array(h_pr_list)\n","      # h_rev_np_pr = 1 / (np.array(h_pr_list) + fee) - fee    # define, for plot_check below cell\n","      h_rev_np_pr = (1 / ((np.array(h_pr_list) - 1) / config.lvrg_set.leverage + np.array(fee_list) + 1) - np.array(fee_list) - 1) * config.lvrg_set.leverage + 1\n","\n","      # --------------------- h pr plot --------------------- #\n","      if len(h_np_pr[h_np_pr != 1]) != 0:\n","\n","        plt.figure(figsize=(16, 12))\n","        plt.suptitle(key + \" hedge\")\n","\n","        h_total_pr = np.cumprod(h_np_pr)\n","        h_wr = len(h_np_pr[h_np_pr > 1]) / len(h_np_pr[h_np_pr != 1])\n","\n","        # plt.subplot(121)\n","        plt.subplot(231)\n","        plt.plot(h_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_wr, np.min(h_np_pr), h_total_pr[-1], config.lvrg_set.leverage))\n","        # plt.show()\n","\n","        #         short only      #\n","        h_short_np_pr = np.array(h_short_list)\n","\n","        h_total_short_pr = np.cumprod(h_short_np_pr)\n","        h_short_wr = len(h_short_np_pr[h_short_np_pr > 1]) / len(h_short_np_pr[h_short_np_pr != 1])\n","        \n","        plt.subplot(232)\n","        plt.plot(h_total_short_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_short_wr, np.min(h_short_np_pr), h_total_short_pr[-1], config.lvrg_set.leverage))\n","\n","        #         long only      #\n","        h_long_np_pr = np.array(h_long_list)\n","\n","        h_total_long_pr = np.cumprod(h_long_np_pr)\n","        h_long_wr = len(h_long_np_pr[h_long_np_pr > 1]) / len(h_long_np_pr[h_long_np_pr != 1])\n","        \n","        plt.subplot(233)\n","        plt.plot(h_total_long_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_long_wr, np.min(h_long_np_pr), h_total_long_pr[-1], config.lvrg_set.leverage))\n","\n","\n","        #     reversion adjustment      #\n","            \n","        h_rev_total_pr = np.cumprod(h_rev_np_pr)\n","        h_rev_wr = len(h_rev_np_pr[h_rev_np_pr > 1]) / len(h_rev_np_pr[h_rev_np_pr != 1])\n","\n","        # plt.subplot(122)\n","        plt.subplot(234)\n","        plt.plot(h_rev_total_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_rev_wr, np.min(h_rev_np_pr), h_rev_total_pr[-1], config.lvrg_set.leverage))\n","\n","        #         short       #\n","        # h_rev_short_np_pr = 1 / (np.array(h_short_list) + fee) - fee\n","        h_rev_short_np_pr =  (1 / ((np.array(h_short_list) - 1) / config.lvrg_set.leverage + np.array(short_fee_list) + 1) - np.array(short_fee_list) - 1) * config.lvrg_set.leverage + 1\n","           \n","        h_rev_total_short_pr = np.cumprod(h_rev_short_np_pr)\n","        h_rev_short_wr = len(h_rev_short_np_pr[h_rev_short_np_pr > 1]) / len(h_rev_short_np_pr[h_rev_short_np_pr != 1])\n","\n","        # plt.subplot(122)\n","        plt.subplot(235)\n","        plt.plot(h_rev_total_short_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_rev_short_wr, np.min(h_rev_short_np_pr), h_rev_total_short_pr[-1], config.lvrg_set.leverage))\n","\n","        #         long       #\n","        # h_rev_long_np_pr = 1 / (np.array(h_long_list) + fee) - fee\n","        h_rev_long_np_pr =  (1 / ((np.array(h_long_list) - 1) / config.lvrg_set.leverage + np.array(long_fee_list) + 1) - np.array(long_fee_list) - 1) * config.lvrg_set.leverage + 1\n","            \n","        h_rev_total_long_pr = np.cumprod(h_rev_long_np_pr)\n","        h_rev_long_wr = len(h_rev_long_np_pr[h_rev_long_np_pr > 1]) / len(h_rev_long_np_pr[h_rev_long_np_pr != 1])\n","\n","        # plt.subplot(122)\n","        plt.subplot(236)\n","        plt.plot(h_rev_total_long_pr)\n","        plt.title(\"wr : %.3f\\n min_pr : %.3f\\n acc_pr : %.3f\\n leverage %s\" % (h_rev_long_wr, np.min(h_rev_long_np_pr), h_rev_total_long_pr[-1], config.lvrg_set.leverage))\n","        \n","        if show_plot:\n","          plt.show()\n","          \n","    except Exception as e:\n","      print('error in h_pr plot :', e)   \n","    \n","    print()\n","\n","\n","  # break # pair loop"]},{"cell_type":"markdown","metadata":{"id":"MteLY9PS2ZeK"},"source":["##### check statistical significance"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":6394,"status":"ok","timestamp":1639541940315,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"NzbWuwSw2jaj","outputId":"3ef36c59-c1ec-455d-9044-2db3144af439"},"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 3000x1000 with 30 Axes>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 3000x1000 with 15 Axes>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","\n"]}],"source":["# print(survey_df)\n","\n","plt.style.use('dark_background')\n","\n","title_name_list = [[\"total\", \"short\", \"long\"], [\"rev_total\", \"rev_short\", \"rev_long\"]]\n","survey_dfs_list = [[survey_df, short_survey_df, long_survey_df], [rev_survey_df, rev_short_survey_df, rev_long_survey_df]]\n","# title_name = \n","# survey_df_list = \n","\n","space_ = \" \" * 140\n","\n","for d_idx, (title_name, survey_dfs) in enumerate(zip(title_name_list, survey_dfs_list)):\n","\n","  fig = plt.figure(figsize=(30, 10))\n","\n","  gs = gridspec.GridSpec(nrows=1, # row Î™á Í∞ú \n","                          ncols=3, # col Î™á Í∞ú \n","                          # height_ratios=[1, 1, 1]\n","                        )\n","\n","  # gs = fig.add_gridspec(1, 3, wspace=0, hspace=0)\n","\n","  # nrows, ncols, h_r = 3, 3, [1, 1, 1]\n","  nrows, ncols, h_r = 3, 4, [1, 1, 1]\n","  # nrows, ncols, h_r = 4, 3, [1, 1, 1, 1]\n","\n","  # if d_idx == 0:\n","  # else:\n","    # nrows, ncols, h_r = 2, 2, [1, 1]\n","\n","  for gs_idx, (title, s_df) in enumerate(zip(title_name, survey_dfs)):  \n","\n","\n","    inner_gs = gs[gs_idx].subgridspec(nrows=nrows, # row Î™á Í∞ú \n","                          ncols=ncols, # col Î™á Í∞ú \n","                          height_ratios=h_r\n","                        )\n","\n","    for col_idx, s_cols in enumerate(s_df.columns):\n","      plt.subplot(inner_gs[col_idx])\n","      plt.plot(s_df[s_cols])\n","      plt.title(s_cols)\n","\n","  # plt.suptitle(\"total\" + \" \" * 140 + \"short\" + \" \" * 140 + \"long\")\n","  plt.suptitle(space_.join(title_name))\n","  plt.show()\n","  print(\"\\n\")"]},{"cell_type":"markdown","metadata":{"id":"GZ0y_x9ugOUD"},"source":["##### check dent_detph"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":676},"executionInfo":{"elapsed":593,"status":"ok","timestamp":1637297839515,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"ETgm1avml0fE","outputId":"9df7a819-691a-4fdc-93bb-d6489812419b"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 400x800 with 2 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["target_pr = total_long_pr\n","\n","plt.figure(figsize=(4, 8))\n","gs = gridspec.GridSpec(nrows=2,\n","                        ncols=1,\n","                        height_ratios=[1, 1]\n","                      )\n","\n","plt.subplot(gs[0])\n","plt.plot(target_pr)\n","h_roll = pd.Series(target_pr).rolling(10).max()\n","plt.plot(h_roll)\n","# plt.show()\n","# print()\n","\n","plt.subplot(gs[1])\n","dent_depth = target_pr / h_roll\n","plt.plot(dent_depth)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"v2Gjv019AEz8"},"source":["##### check frequency "]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":464},"executionInfo":{"elapsed":720,"status":"ok","timestamp":1636862363013,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"atdBjod9-e21","outputId":"5925d52a-da23-40cd-a9b3-6c0323024bc0"},"outputs":[{"name":"stdout","output_type":"stream","text":["[0. 0. 0. ... 0. 0. 0.]\n","(70, 1)\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["total_len = np.zeros(len(res_df))\n","print(total_len)\n","np_trade_list = np.array(trade_list)\n","# print(np_trade_list.shape)\n","print(np_trade_list[:, [0], [0]].shape)\n","total_len[np_trade_list[:, [0], [0]]] = 1\n","\n","plt.plot(total_len)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"rrIGjmUzqU-D"},"source":["##### sync_funcs (legacy)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nzOYWA2kqZ0d"},"outputs":[],"source":["class OrderSide:\n","\n","    BUY = \"BUY\"\n","    SELL = \"SELL\"\n","    INVALID = None\n","\n","\n","def lvrg_set(res_df, config, open_side, ep_, out_, fee, limit_leverage=50):\n","\n","  strat_version = config.strat_version\n","\n","  if open_side == OrderSide.SELL:\n","\n","    if strat_version == \"v3\":\n","      # config.lvrg_set.leverage = config.lvrg_set.target_pct / (out_ / ep_ - 1 - (fee + config.trader_set.market_fee))\n","      config.lvrg_set.leverage = config.lvrg_set.target_pct / (out_ / ep_ - 1 - (fee + config.trader_set.market_fee))\n","\n","      #     zone Ïóê Îî∞Î•∏ c_ep_gap Î•º Í≥†Î†§ (loss ÏôÑÌôî Î∞©Ìñ•) / Ïúó Ï§ÑÏùÄ ÏàòÏùµ Í∑πÎåÄÌôî Î∞©Ìñ•\n","      # config.lvrg_set.leverage = config.lvrg_set.target_pct / (out_ / res_df['short_ep_org'].iloc[ep_j] - 1 - (fee + config.trader_set.market_fee))\n","\n","    elif strat_version == \"v5_2\":\n","      # config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(ep_ / out_ - 1 - (fee + config.trader_set.market_fee))\n","      config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(ep_ / out_ - 1 - (fee + config.trader_set.market_fee))\n","      # config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(res_df['short_ep_org'].iloc[ep_j] / out_ - 1 - (fee + config.trader_set.market_fee))\n","  \n","  else:\n","    #   Ïúó phase Îäî min_pr Ïùò Ïò§Ï∞®Í∞Ä Ïª§Ïßê\n","    if strat_version == \"v3\":\n","      # config.lvrg_set.leverage = config.lvrg_set.target_pct / (ep_ / out_ - 1 - (fee + config.trader_set.market_fee))\n","      config.lvrg_set.leverage = config.lvrg_set.target_pct / (ep_ / out_ - 1 - (fee + config.trader_set.market_fee))\n","      # config.lvrg_set.leverage = config.lvrg_set.target_pct / (res_df['long_ep_org'].iloc[ep_j] / out_ - 1 - (fee + config.trader_set.market_fee))\n","\n","    elif strat_version == \"v5_2\":\n","      # config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(out_ / ep_ - 1 - (fee + config.trader_set.market_fee))\n","      config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(out_ / ep_ - 1 - (fee + config.trader_set.market_fee))\n","      # config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(out_ / res_df['long_ep_org'].iloc[ep_j] - 1 - (fee + config.trader_set.market_fee))\n","          \n","  if not config.lvrg_set.allow_float:\n","    config.lvrg_set.leverage = int(config.lvrg_set.leverage)\n","\n","  # -------------- leverage rejection -------------- #\n","  if config.lvrg_set.leverage < 1 and config.lvrg_set.lvrg_rejection:\n","    return None\n","\n","  config.lvrg_set.leverage = max(config.lvrg_set.leverage, 1)\n","  \n","  config.lvrg_set.leverage = min(limit_leverage, config.lvrg_set.leverage)\n","\n","  return config.lvrg_set.leverage\n","\n","\n","def public_indi(res_df):\n","\n","    res_df = bb_level(res_df, '5m', 1)\n","    res_df = dc_level(res_df, '5m', 1)\n","    res_df = bb_level(res_df, '15m', 1)\n","    res_df = dc_level(res_df, '15m', 1)\n","    # res_df = bb_level(res_df, '30m', 1)\n","    # res_df = dc_level(res_df, '30m', 1)\n","\n","    return res_df\n","\n","def enlist_rtc(res_df, config):\n","\n","    strat_version = config.strat_version\n","\n","    res_df['short_rtc_1_{}'.format(strat_version)] = res_df['bb_lower_%s' % config.loc_set.point.tpg_itv]\n","    res_df['short_rtc_0_{}'.format(strat_version)] = res_df['dc_upper_%s' % config.loc_set.point.outg_itv]\n","\n","    res_df['long_rtc_1_{}'.format(strat_version)] = res_df['bb_upper_%s' % config.loc_set.point.tpg_itv]\n","    res_df['long_rtc_0_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.point.outg_itv]\n","    \n","    #      entry reversion    #\n","    if config.ep_set.short_entry_score > 0:      \n","      short_rtc_1_copy = res_df['short_rtc_1_{}'.format(strat_version)].copy()\n","      res_df['short_rtc_1_{}'.format(strat_version)] = res_df['long_rtc_1_{}'.format(strat_version)]\n","      res_df['long_rtc_1_{}'.format(strat_version)] = short_rtc_1_copy\n","\n","      short_rtc_0_copy = res_df['short_rtc_0_{}'.format(strat_version)].copy()\n","      res_df['short_rtc_0_{}'.format(strat_version)] = res_df['long_rtc_0_{}'.format(strat_version)]\n","      res_df['long_rtc_0_{}'.format(strat_version)] = short_rtc_0_copy\n","\n","    res_df['short_rtc_gap_{}'.format(strat_version)] = abs(res_df['short_rtc_0_{}'.format(strat_version)] - res_df['short_rtc_1_{}'.format(strat_version)])\n","    res_df['long_rtc_gap_{}'.format(strat_version)] = abs(res_df['long_rtc_1_{}'.format(strat_version)] - res_df['long_rtc_0_{}'.format(strat_version)])\n","\n","    res_df['h_short_rtc_1_{}'.format(strat_version)] = res_df['bb_lower_%s' % config.loc_set.point.tpg_itv]\n","    # res_df['h_short_rtc_1_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.point.tpg_itv]\n","    res_df['h_short_rtc_0_{}'.format(strat_version)] = res_df['dc_upper_%s' % config.loc_set.point.tpg_itv]\n","\n","    res_df['h_long_rtc_1_{}'.format(strat_version)] = res_df['bb_upper_%s' % config.loc_set.point.tpg_itv]\n","    # res_df['h_long_rtc_1_{}'.format(strat_version)] = res_df['dc_upper_%s' % config.loc_set.point.tpg_itv]\n","    res_df['h_long_rtc_0_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.point.tpg_itv]\n","\n","    #      entry reversion    #\n","    if config.ep_set.short_entry_score > 0:      \n","      h_short_rtc_1_copy = res_df['h_short_rtc_1_{}'.format(strat_version)].copy()\n","      res_df['h_short_rtc_1_{}'.format(strat_version)] = res_df['h_long_rtc_1_{}'.format(strat_version)]\n","      res_df['h_long_rtc_1_{}'.format(strat_version)] = h_short_rtc_1_copy\n","\n","      h_short_rtc_0_copy = res_df['h_short_rtc_0_{}'.format(strat_version)].copy()\n","      res_df['h_short_rtc_0_{}'.format(strat_version)] = res_df['h_long_rtc_0_{}'.format(strat_version)]\n","      res_df['h_long_rtc_0_{}'.format(strat_version)] = h_short_rtc_0_copy\n","\n","    res_df['h_short_rtc_gap_{}'.format(strat_version)] = abs(res_df['h_short_rtc_0_{}'.format(strat_version)] - res_df['h_short_rtc_1_{}'.format(strat_version)])\n","    res_df['h_long_rtc_gap_{}'.format(strat_version)] = abs(res_df['h_long_rtc_1_{}'.format(strat_version)] - res_df['h_long_rtc_0_{}'.format(strat_version)])   \n","\n","    res_df['short_dtk_1_{}'.format(strat_version)] = res_df['bb_lower_%s' % config.loc_set.zone.dtk_itv]\n","    res_df['short_dtk_0_{}'.format(strat_version)] = res_df['dc_upper_%s' % config.loc_set.zone.dtk_itv]\n","    res_df['short_dtk_gap_{}'.format(strat_version)] = res_df['short_dtk_0_{}'.format(strat_version)] - res_df['short_dtk_1_{}'.format(strat_version)]\n","\n","    res_df['long_dtk_1_{}'.format(strat_version)] = res_df['bb_upper_%s' % config.loc_set.zone.dtk_itv]\n","    res_df['long_dtk_0_{}'.format(strat_version)] = res_df['dc_lower_%s' % config.loc_set.zone.dtk_itv]\n","    res_df['long_dtk_gap_{}'.format(strat_version)] = res_df['long_dtk_1_{}'.format(strat_version)] - res_df['long_dtk_0_{}'.format(strat_version)]\n","\n","    if strat_version == \"v3\":\n","      res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line)\n","\n","    return res_df\n","\n","\n","\n","def enlist_tr(res_df, config, np_timeidx):\n","\n","    strat_version = config.strat_version\n","\n","    res_df['entry_{}'.format(strat_version)] = np.zeros(len(res_df))\n","    res_df['h_entry_{}'.format(strat_version)] = np.zeros(len(res_df))\n","\n","    # -------- set ep level -------- #\n","\n","    #       limit ver.     #\n","    res_df['short_ep_{}'.format(strat_version)] = res_df['h_short_rtc_1_{}'.format(strat_version)] + res_df['h_short_rtc_gap_{}'.format(strat_version)] * config.tr_set.ep_gap\n","    res_df['long_ep_{}'.format(strat_version)] = res_df['h_long_rtc_1_{}'.format(strat_version)] - res_df['h_long_rtc_gap_{}'.format(strat_version)] * config.tr_set.ep_gap\n","\n","    # res_df['short_ep'] = res_df['close'] #+ res_df['h_short_rtc_gap'] * config.tr_set.ep_gap\n","    # res_df['long_ep'] = res_df['close'] #- res_df['h_long_rtc_gap'] * config.tr_set.ep_gap\n","\n","\n","    if config.tr_set.c_ep_gap != \"None\":\n","        res_df['short_ep_org_{}'.format(strat_version)] = res_df['short_ep_{}'.format(strat_version)].copy()\n","        res_df['long_ep_org_{}'.format(strat_version)] = res_df['long_ep_{}'.format(strat_version)].copy()\n","\n","        res_df['short_ep2_{}'.format(strat_version)] = res_df['h_short_rtc_1_{}'.format(strat_version)] + res_df['h_short_rtc_gap_{}'.format(strat_version)] * config.tr_set.c_ep_gap\n","        res_df['long_ep2_{}'.format(strat_version)] = res_df['h_long_rtc_1_{}'.format(strat_version)] - res_df['h_long_rtc_gap_{}'.format(strat_version)] * config.tr_set.c_ep_gap\n","\n","    res_df['short_spread_ep_{}'.format(strat_version)] = res_df['bb_lower_5m'] #+ res_df['h_short_rtc_gap'] * config.loc_set.zone.spread_ep_gap\n","    res_df['long_spread_ep_{}'.format(strat_version)] = res_df['bb_upper_5m']  #- res_df['h_long_rtc_gap'] * config.loc_set.zone.spread_ep_gap\n","\n","    #       market ver.     #\n","    if config.ep_set.entry_type == \"MARKET\":\n","        res_df['short_ep_{}'.format(strat_version)] = res_df['close']\n","        res_df['long_ep_{}'.format(strat_version)] = res_df['close']\n","\n","    # ---------------------------------------- short = -1 ---------------------------------------- #\n","    # ---------------- ep_time  ---------------- #\n","\n","    if strat_version == \"v5_2\":\n","      res_df['rsi_%s_shift' % config.loc_set.point.exp_itv] = res_df['rsi_%s' % config.loc_set.point.exp_itv].shift(config.loc_set.point.tf_entry)\n","\n","      res_df['entry_{}'.format(strat_version)] = np.where((res_df['rsi_%s_shift' % config.loc_set.point.exp_itv] >= rsi_upper) &\n","                                (res_df['rsi_%s' % config.loc_set.point.exp_itv] < rsi_upper)\n","                                , res_df['entry_{}'.format(strat_version)] - 1, res_df['entry_{}'.format(strat_version)])\n","\n","      res_df['entry_{}'.format(strat_version)] = np.where((res_df['entry_{}'.format(strat_version)] < 0) &\n","                                (np_timeidx % config.loc_set.point.tf_entry == (config.loc_set.point.tf_entry - 1))\n","                                , res_df['entry_{}'.format(strat_version)] - 1, res_df['entry_{}'.format(strat_version)])\n","    \n","    elif strat_version == \"v3\":\n","      \n","      # res_df['entry_{}'.format(strat_version)] = np.where((res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['bb_lower_%s' % config.loc_set.point.exp_itv]) &\n","      res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] >= res_df['bb_lower_%s' % config.loc_set.point.exp_itv]) &\n","                                # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['bb_lower_%s' % config.loc_set.point.exp_itv]) &\n","                                (res_df['close'] < res_df['bb_lower_%s' % config.loc_set.point.exp_itv])\n","                                , res_df['entry_{}'.format(strat_version)] - 1, res_df['entry_{}'.format(strat_version)])\n","\n","      res_df['entry_{}'.format(strat_version)] = np.where((res_df['entry_{}'.format(strat_version)] < 0) &\n","                                (np_timeidx % config.loc_set.point.tf_entry == (config.loc_set.point.tf_entry - 1))\n","                                , res_df['entry_{}'.format(strat_version)] - 1, res_df['entry_{}'.format(strat_version)])\n","\n","    res_df['h_entry_{}'.format(strat_version)] = np.where(  # (res_df['open'] >= res_df['bb_lower_%s' % config.loc_set.zone.dtk_itv]) &\n","        (res_df['close'].shift(config.loc_set.point.htf_entry * 1) >= res_df['bb_lower_%s' % config.loc_set.zone.dtk_itv]) &\n","        (res_df['close'] < res_df['bb_lower_%s' % config.loc_set.zone.dtk_itv]) &\n","        (np_timeidx % config.loc_set.point.htf_entry == (config.loc_set.point.htf_entry - 1))\n","        , res_df['h_entry_{}'.format(strat_version)] - 1, res_df['h_entry_{}'.format(strat_version)])\n","\n","    # ---------------------------------------- long = 1 ---------------------------------------- #\n","    # ---------------------- ep_time ---------------------- #\n","    if strat_version == \"v5_2\":\n","\n","      res_df['entry_{}'.format(strat_version)] = np.where((res_df['rsi_%s_shift' % config.loc_set.point.exp_itv] <= rsi_lower) &\n","                                (res_df['rsi_%s' % config.loc_set.point.exp_itv] > rsi_lower)\n","                                , res_df['entry_{}'.format(strat_version)] + 1, res_df['entry_{}'.format(strat_version)])\n","\n","      res_df['entry_{}'.format(strat_version)] = np.where((res_df['entry_{}'.format(strat_version)] > 0) &\n","                                (np_timeidx % config.loc_set.point.tf_entry == (config.loc_set.point.tf_entry - 1))\n","                                , res_df['entry_{}'.format(strat_version)] + 1, res_df['entry_{}'.format(strat_version)])\n","      \n","    elif strat_version == \"v3\":\n","      \n","      # res_df['entry_{}'.format(strat_version)] = np.where((res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['bb_upper_%s' % config.loc_set.point.exp_itv]) &\n","      res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] <= res_df['bb_upper_%s' % config.loc_set.point.exp_itv]) &\n","                                # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['bb_upper_%s' % config.loc_set.point.exp_itv]) &\n","                                (res_df['close'] > res_df['bb_upper_%s' % config.loc_set.point.exp_itv])\n","                                , res_df['entry_{}'.format(strat_version)] + 1, res_df['entry_{}'.format(strat_version)])\n","\n","      res_df['entry_{}'.format(strat_version)] = np.where((res_df['entry_{}'.format(strat_version)] > 0) &\n","                                (np_timeidx % config.loc_set.point.tf_entry == (config.loc_set.point.tf_entry - 1))\n","                                , res_df['entry_{}'.format(strat_version)] + 1, res_df['entry_{}'.format(strat_version)])\n","\n","    res_df['h_entry_{}'.format(strat_version)] = np.where(  # (res_df['open'] <= res_df['bb_upper_%s' % config.loc_set.zone.dtk_itv]) &\n","        (res_df['close'].shift(config.loc_set.point.htf_entry * 1) <= res_df['bb_upper_%s' % config.loc_set.zone.dtk_itv]) &\n","        (res_df['close'] > res_df['bb_upper_%s' % config.loc_set.zone.dtk_itv]) &\n","        (np_timeidx % config.loc_set.point.htf_entry == (config.loc_set.point.htf_entry - 1))\n","        , res_df['h_entry_{}'.format(strat_version)] + 1, res_df['h_entry_{}'.format(strat_version)])\n","\n","    # ------------------------------ rtc tp & out ------------------------------ #\n","    # --------------- bb rtc out --------------- #\n","\n","    if config.loc_set.point.outg_dc_period != \"None\":\n","        res_df['short_rtc_0_{}'.format(strat_version)] = res_df['high'].rolling(config.loc_set.point.outg_dc_period).max()\n","        res_df['long_rtc_0_{}'.format(strat_version)] = res_df['low'].rolling(config.loc_set.point.outg_dc_period).min()\n","\n","    res_df['short_out_{}'.format(strat_version)] = res_df['short_rtc_0_{}'.format(strat_version)] + res_df['short_rtc_gap_{}'.format(strat_version)] * config.tr_set.out_gap\n","    res_df['long_out_{}'.format(strat_version)] = res_df['long_rtc_0_{}'.format(strat_version)] - res_df['long_rtc_gap_{}'.format(strat_version)] * config.tr_set.out_gap\n","\n","    if config.tr_set.t_out_gap != \"None\":\n","        res_df['short_out_org_{}'.format(strat_version)] = res_df['short_out_{}'.format(strat_version)].copy()\n","        res_df['long_out_org_{}'.format(strat_version)] = res_df['long_out_{}'.format(strat_version)].copy()\n","\n","        res_df['short_out2_{}'.format(strat_version)] = res_df['short_rtc_0_{}'.format(strat_version)] + res_df['short_rtc_gap_{}'.format(strat_version)] * config.tr_set.t_out_gap\n","        res_df['long_out2_{}'.format(strat_version)] = res_df['long_rtc_0_{}'.format(strat_version)] - res_df['long_rtc_gap_{}'.format(strat_version)] * config.tr_set.t_out_gap\n","\n","    # ------------------------------ tp ------------------------------ #\n","    # --------------- bb rtc tp --------------- #\n","    res_df['short_tp_{}'.format(strat_version)] = res_df['h_short_rtc_1_{}'.format(strat_version)] - res_df['h_short_rtc_gap_{}'.format(strat_version)] * config.tr_set.tp_gap\n","    res_df['long_tp_{}'.format(strat_version)] = res_df['h_long_rtc_1_{}'.format(strat_version)] + res_df['h_long_rtc_gap_{}'.format(strat_version)] * config.tr_set.tp_gap\n","\n","    # --------------- set tp_line / dtk_line --------------- #\n","    # res_df['short_tp_1_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == -1, res_df['short_rtc_1_{}'.format(strat_version)], np.nan)\n","    # res_df['short_tp_1_{}'.format(strat_version)] = ffill(res_df['short_tp_1_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","    # res_df['short_tp_gap_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == -1, res_df['h_short_rtc_gap_{}'.format(strat_version)], np.nan)  # ltf_gap ÏùÄ out ÏùÑ ÏúÑÌïú gap ÏûÑ\n","    # res_df['short_tp_gap_{}'.format(strat_version)] = ffill(res_df['short_tp_gap_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","\n","    # res_df['long_tp_1_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == 1, res_df['long_rtc_1_{}'.format(strat_version)], np.nan)\n","    # res_df['long_tp_1_{}'.format(strat_version)] = ffill(res_df['long_tp_1_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","    # res_df['long_tp_gap_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == 1, res_df['h_long_rtc_gap_{}'.format(strat_version)], np.nan)\n","    # res_df['long_tp_gap_{}'.format(strat_version)] = ffill(res_df['long_tp_gap_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","\n","    # res_df['h_short_tp_1_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == -1, res_df['h_short_rtc_1_{}'.format(strat_version)], np.nan)\n","    # res_df['h_short_tp_1_{}'.format(strat_version)] = ffill(res_df['h_short_tp_1_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","    # res_df['h_short_tp_gap_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == -1, res_df['h_short_rtc_gap_{}'.format(strat_version)], np.nan)\n","    # res_df['h_short_tp_gap_{}'.format(strat_version)] = ffill(res_df['h_short_tp_gap_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","\n","    # res_df['h_long_tp_1_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == 1, res_df['h_long_rtc_1_{}'.format(strat_version)], np.nan)\n","    # res_df['h_long_tp_1_{}'.format(strat_version)] = ffill(res_df['h_long_tp_1_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","    # res_df['h_long_tp_gap_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == 1, res_df['h_long_rtc_gap_{}'.format(strat_version)], np.nan)\n","    # res_df['h_long_tp_gap_{}'.format(strat_version)] = ffill(res_df['h_long_tp_gap_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","   \n","\n","    if config.loc_set.zone.use_dtk_line:\n","      res_df['short_dtk_1_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == -1, res_df['short_dtk_1_{}'.format(strat_version)], np.nan)\n","      res_df['short_dtk_1_{}'.format(strat_version)] = ffill(res_df['short_dtk_1_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","      res_df['short_dtk_gap_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == -1, res_df['short_dtk_gap_{}'.format(strat_version)], np.nan)\n","      res_df['short_dtk_gap_{}'.format(strat_version)] = ffill(res_df['short_dtk_gap_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","\n","      res_df['long_dtk_1_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == 1, res_df['long_dtk_1_{}'.format(strat_version)], np.nan)\n","      res_df['long_dtk_1_{}'.format(strat_version)] = ffill(res_df['long_dtk_1_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","      res_df['long_dtk_gap_{}'.format(strat_version)] = np.where(res_df['h_entry_{}'.format(strat_version)] == 1, res_df['long_dtk_gap_{}'.format(strat_version)], np.nan)\n","      res_df['long_dtk_gap_{}'.format(strat_version)] = ffill(res_df['long_dtk_gap_{}'.format(strat_version)].values.reshape(1, -1)).reshape(-1, 1)\n","\n","    res_df['dc_upper_v2_{}'.format(strat_version)] = res_df['high'].rolling(config.loc_set.zone.dc_period).max()\n","    res_df['dc_lower_v2_{}'.format(strat_version)] = res_df['low'].rolling(config.loc_set.zone.dc_period).min()\n","    \n","    res_df['zone_dc_upper_v2_{}'.format(strat_version)] = res_df['high'].rolling(config.loc_set.zone.zone_dc_period).max()\n","    res_df['zone_dc_lower_v2_{}'.format(strat_version)] = res_df['low'].rolling(config.loc_set.zone.zone_dc_period).min()\n","\n","    return res_df\n","\n","\n","\n","\n","def short_ep_loc(res_df, config, i, show_detail=True):\n","\n","    strat_version = config.strat_version\n","\n","    # ------- param init ------- #\n","    open_side = None\n","\n","    mr_const_cnt = 0\n","    mr_score = 0\n","    zone = 'n'\n","\n","\n","    if config.ep_set.entry_type == 'MARKET':\n","        if config.tp_set.tp_type != 'MARKET':\n","            tp_fee = config.trader_set.market_fee + config.trader_set.limit_fee\n","        else:\n","            tp_fee = config.trader_set.market_fee + config.trader_set.market_fee\n","        out_fee = config.trader_set.market_fee + config.trader_set.market_fee\n","    else:\n","        if config.tp_set.tp_type != 'MARKET':\n","            tp_fee = config.trader_set.limit_fee + config.trader_set.limit_fee\n","        else:\n","            tp_fee = config.trader_set.limit_fee + config.trader_set.market_fee\n","        out_fee = config.trader_set.limit_fee + config.trader_set.market_fee\n","\n","    # # -------------- tr scheduling -------------- #\n","    # if config.loc_set.zone.tr_thresh != \"None\":\n","\n","    #   mr_const_cnt += 1\n","    #   tr = ((done_tp - ep_list[0] - tp_fee * ep_list[0]) / (ep_list[0] - done_out + out_fee * ep_list[0]))\n","\n","    # -------------- spread scheduling -------------- #\n","    if config.loc_set.zone.short_spread != \"None\":\n","\n","      mr_const_cnt += 1\n","\n","      spread = (res_df['bb_base_5m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] - tp_fee * res_df['bb_base_5m'].iloc[\n","      # spread = (res_df['bb_base_5m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] - out_fee * res_df['bb_base_5m'].iloc[\n","          # i]) / (res_df['bb_base_5m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] + tp_fee *\n","          i]) / (res_df['bb_base_5m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] + out_fee *\n","                  res_df['bb_base_5m'].iloc[i])\n","      # spread = (res_df['bb_base_15m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] - tp_fee * res_df['bb_base_15m'].iloc[\n","      #     i]) / (res_df['bb_base_15m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] + out_fee *\n","      #             res_df['bb_base_15m'].iloc[i])\n","          \n","      # spread = (res_df['dc_upper_5m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] - tp_fee * res_df['bb_lower_5m'].iloc[\n","      #     i]) / (res_df['dc_upper_5m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] + out_fee *\n","      #             res_df['bb_lower_5m'].iloc[i])\n","      # spread = (res_df['short_rtc_gap'].iloc[i] * (0.443) - tp_fee * res_df['short_ep'].iloc[\n","      #     i]) / (res_df['short_rtc_gap'].iloc[i] * (0.417) + out_fee * res_df['short_ep'].iloc[i])\n","\n","      # spread = (res_df['dc_upper_15m'].iloc[i] - res_df['dc_lower_5m'].iloc[i] - tp_fee * res_df['dc_lower_5m'].iloc[\n","      #     i]) / (res_df['dc_upper_15m'].iloc[i] - res_df['dc_lower_5m'].iloc[i] + out_fee *\n","      #             res_df['dc_lower_5m'].iloc[i])\n","      # spread = ((res_df['dc_upper_15m'].iloc[i] - res_df['dc_lower_5m'].iloc[i])/2 - tp_fee * res_df['dc_lower_5m'].iloc[\n","      #     i]) / ((res_df['dc_upper_15m'].iloc[i] - res_df['dc_lower_5m'].iloc[i])/2 + out_fee *\n","      #             res_df['dc_lower_5m'].iloc[i])\n","      \n","      if spread >= config.loc_set.zone.short_spread:\n","          mr_score += 1\n","\n","      if show_detail:\n","          print(\"spread :\", spread)\n","\n","    # -------------- dtk -------------- #\n","    if config.loc_set.zone.dt_k != \"None\":\n","\n","      mr_const_cnt += 1\n","      # if res_df['dc_lower_%s' % config.loc_set.zone.dtk_dc_itv].iloc[i] >= res_df['short_rtc_1'].iloc[i] - res_df['h_short_rtc_gap'].iloc[i] * config.loc_set.zone.dt_k:\n","      #     dtk_v1 & v2 platform     #\n","      if config.loc_set.zone.dtk_dc_itv != \"None\":\n","          dc = res_df['dc_lower_%s' % config.loc_set.zone.dtk_dc_itv].iloc[i]\n","          dt_k = res_df['short_dtk_1_{}'.format(strat_version)].iloc[i] - res_df['short_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k\n","          if dc >= dt_k:\n","              mr_score += 1\n","\n","              #     dc_v2   #\n","      else:\n","          dc = res_df['dc_lower_v2_{}'.format(strat_version)].iloc[i]\n","          dt_k = res_df['short_dtk_1_{}'.format(strat_version)].iloc[i] - res_df['short_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k\n","          if dc >= dt_k:\n","              # if res_df['dc_lower_v2_{}'.format(strat_version)].iloc[i] >= res_df['short_dtk_1_{}'.format(strat_version)].iloc[i] - res_df['short_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k and \\\n","              # res_df['dc_upper_v2_{}'.format(strat_version)].iloc[i] <= res_df['long_dtk_1_{}'.format(strat_version)].iloc[i] + res_df['long_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k:\n","\n","              mr_score += 1\n","\n","      if show_detail:\n","          print(\"dc :\", dc)\n","          print(\"dt_k :\", dt_k)\n","\n","\n","    # -------------- zone rejection  -------------- #\n","    if config.loc_set.zone.zone_rejection:\n","    \n","      #       by bb and dc - rsi      # \n","      # mr_const_cnt += 1\n","      # if res_df['bb_base_%s' % config.loc_set.zone.bbz_itv].iloc[i] <= res_df['dc_upper_1m'].iloc[i] <= res_df['bb_upper_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","      #   mr_score += 1\n","        \n","        #       by bb       # \n","      mr_const_cnt += 1      \n","      # if res_df['bb_upper_5m'].iloc[i] < res_df['bb_base_%s' % config.loc_set.zone.bbz_itv].iloc[i]:      \n","\n","      # if res_df['close'].iloc[i] < res_df['bb_lower_%s' % config.loc_set.zone.bbz_itv].iloc[i]:   # org\n","      # if res_df['close'].iloc[i] > res_df['bb_lower_%s' % config.loc_set.zone.bbz_itv].iloc[i]:  # inv\n","      # if res_df['close'].iloc[i] > res_df['bb_upper_%s' % config.loc_set.zone.bbz_itv].iloc[i]:    \n","      if res_df['close'].iloc[i] > res_df['bb_upper2_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","      # if res_df['close'].iloc[i] > res_df['bb_upper3_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","\n","        mr_score += 1\n","\n","        #       by ema       # \n","      mr_const_cnt += 1      \n","      # if res_df['short_ep'].iloc[i] < res_df['ema_5m'].iloc[i]:\n","      if res_df['close'].iloc[i] < res_df['ema_5m'].iloc[i]:\n","        mr_score += 1\n","\n","        #       by zone_dtk       #\n","      # mr_const_cnt += 1\n","      # if res_df['zone_dc_upper_v2_{}'.format(strat_version)].iloc[i] < res_df['long_dtk_plot_1'].iloc[i] + res_df['long_dtk_plot_gap'].iloc[\n","      #     i] * config.loc_set.zone.zone_dt_k:\n","      #   mr_score += 1\n","\n","\n","    # -------------- zoning -------------- #\n","    if config.tr_set.c_ep_gap != \"None\":\n","\n","        #       by bb       # \n","        # if res_df['close'].iloc[i] > res_df['bb_lower_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","\n","        #       by zone_dtk       #\n","\n","          #         c_zone        #\n","        if res_df['zone_dc_upper_v2_{}'.format(strat_version)].iloc[i] > res_df['long_dtk_plot_1'].iloc[i] + res_df['long_dtk_plot_gap'].iloc[\n","            i] * config.loc_set.zone.zone_dt_k:\n","\n","            if config.ep_set.static_ep:\n","              res_df['short_ep_{}'.format(strat_version)].iloc[i] = res_df['short_ep2_{}'.format(strat_version)].iloc[i]\n","            else:\n","              res_df['short_ep_{}'.format(strat_version)] = res_df['short_ep2_{}'.format(strat_version)]\n","              \n","            if config.out_set.static_out:\n","              res_df['short_out_{}'.format(strat_version)].iloc[i] = res_df['short_out_org_{}'.format(strat_version)].iloc[i]\n","            else:\n","              res_df['short_out_{}'.format(strat_version)] = res_df['short_out_org_{}'.format(strat_version)]\n","\n","            zone = 'c'\n","\n","          #         t_zone        #\n","        else:\n","\n","          # mr_const_cnt += 1   # zone_rejection - temporary\n","\n","          if config.ep_set.static_ep:\n","            res_df['short_ep_{}'.format(strat_version)].iloc[i] = res_df['short_ep_org_{}'.format(strat_version)].iloc[i]\n","          else:\n","            res_df['short_ep_{}'.format(strat_version)] = res_df['short_ep_org_{}'.format(strat_version)]\n","\n","          if config.out_set.static_out:\n","            res_df['short_out_{}'.format(strat_version)].iloc[i] = res_df['short_out2_{}'.format(strat_version)].iloc[i]\n","          else:\n","            res_df['short_out_{}'.format(strat_version)] = res_df['short_out2_{}'.format(strat_version)]\n","\n","          zone = 't'\n","\n","    if mr_const_cnt == mr_score:\n","        open_side = OrderSide.SELL\n","\n","    return res_df, open_side, zone\n","\n","\n","\n","def long_ep_loc(res_df, config, i, show_detail=True):\n","\n","    # ------- param init ------- #\n","    open_side = None\n","\n","    mr_const_cnt = 0\n","    mr_score = 0\n","    zone = 'n'\n","\n","\n","    if config.ep_set.entry_type == 'MARKET':\n","        if config.tp_set.tp_type != 'MARKET':\n","            tp_fee = config.trader_set.market_fee + config.trader_set.limit_fee\n","        else:\n","            tp_fee = config.trader_set.market_fee + config.trader_set.market_fee\n","        out_fee = config.trader_set.market_fee + config.trader_set.market_fee\n","    else:\n","        if config.tp_set.tp_type != 'MARKET':\n","            tp_fee = config.trader_set.limit_fee + config.trader_set.limit_fee\n","        else:\n","            tp_fee = config.trader_set.limit_fee + config.trader_set.market_fee\n","        out_fee = config.trader_set.limit_fee + config.trader_set.market_fee\n","\n","\n","    # -------------- spread scheduling -------------- #       \n","    if config.loc_set.zone.long_spread != \"None\":\n","\n","      mr_const_cnt += 1\n","      \n","      # spread = (res_df['bb_upper_5m'].iloc[i] - res_df['bb_base_5m'].iloc[i] - tp_fee * res_df['bb_base_5m'].iloc[\n","      #     i]) / (res_df['bb_base_5m'].iloc[i] - res_df['bb_lower_5m'].iloc[i] + out_fee *\n","      #             res_df['bb_base_5m'].iloc[i])\n","      # spread = (res_df['bb_upper_5m'].iloc[i] - res_df['bb_base_15m'].iloc[i] - tp_fee * res_df['bb_base_15m'].iloc[\n","      #     i]) / (res_df['bb_upper_5m'].iloc[i] - res_df['bb_base_15m'].iloc[i] + out_fee *\n","      #             res_df['bb_base_15m'].iloc[i])\n","          \n","      spread = (res_df['bb_upper_5m'].iloc[i] - res_df['dc_lower_5m'].iloc[i] - tp_fee * res_df['bb_upper_5m'].iloc[\n","      # spread = (res_df['bb_upper_5m'].iloc[i] - res_df['dc_lower_5m'].iloc[i] - out_fee * res_df['bb_upper_5m'].iloc[\n","          # i]) / (res_df['bb_upper_5m'].iloc[i] - res_df['dc_lower_5m'].iloc[i] + tp_fee *\n","          i]) / (res_df['bb_upper_5m'].iloc[i] - res_df['dc_lower_5m'].iloc[i] + out_fee *\n","                  res_df['bb_upper_5m'].iloc[i])          \n","      # spread = (res_df['long_rtc_gap'].iloc[i] * (0.443) - tp_fee * res_df['long_ep'].iloc[\n","      #     i]) / (res_df['long_rtc_gap'].iloc[i] * (0.417) + out_fee * res_df['long_ep'].iloc[i])\n","\n","      # spread = (res_df['dc_upper_5m'].iloc[i] - res_df['dc_lower_15m'].iloc[i] - tp_fee * res_df['dc_upper_5m'].iloc[\n","      #     i]) / (res_df['dc_upper_5m'].iloc[i] - res_df['dc_lower_15m'].iloc[i] + out_fee *\n","      #             res_df['dc_upper_5m'].iloc[i])\n","      # spread = ((res_df['dc_upper_5m'].iloc[i] - res_df['dc_lower_15m'].iloc[i])/2 - tp_fee * res_df['dc_upper_5m'].iloc[\n","      #     i]) / ((res_df['dc_upper_5m'].iloc[i] - res_df['dc_lower_15m'].iloc[i])/2 + out_fee *\n","      #             res_df['dc_upper_5m'].iloc[i])\n","          \n","      if spread >= config.loc_set.zone.long_spread:\n","          mr_score += 1\n","\n","      if show_detail:\n","          print(\"spread :\", spread)\n","    \n","\n","    # -------------- dtk -------------- #\n","    if config.loc_set.zone.dt_k != \"None\":  \n","\n","      mr_const_cnt += 1\n","      # if res_df['dc_upper_%s' % config.loc_set.zone.dtk_dc_itv].iloc[i] <= res_df['long_rtc_1'].iloc[i] + res_df['long_rtc_gap'].iloc[i] * config.loc_set.zone.dt_k:          \n","          #     dtk_v1 & v2 platform    #\n","      if config.loc_set.zone.dtk_dc_itv != \"None\":\n","        dc = res_df['dc_upper_%s' % config.loc_set.zone.dtk_dc_itv].iloc[i]\n","        dt_k = res_df['long_dtk_1_{}'.format(strat_version)].iloc[i] + res_df['long_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k\n","        if dc <= dt_k:  \n","          mr_score += 1  \n","\n","      else:\n","          #     dc_v2     #\n","        dc = res_df['dc_upper_v2_{}'.format(strat_version)].iloc[i]\n","        dt_k = res_df['long_dtk_1_{}'.format(strat_version)].iloc[i] + res_df['long_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k\n","        if dc <= dt_k:  \n","        # if res_df['dc_upper_v2_{}'.format(strat_version)].iloc[i] >= res_df['long_dtk_1_{}'.format(strat_version)].iloc[i] + res_df['long_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k:\n","\n","        # if res_df['dc_upper_v2_{}'.format(strat_version)].iloc[i] <= res_df['long_dtk_1_{}'.format(strat_version)].iloc[i] + res_df['long_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k and \\\n","        #   res_df['dc_lower_v2_{}'.format(strat_version)].iloc[i] >= res_df['short_dtk_1_{}'.format(strat_version)].iloc[i] - res_df['short_dtk_gap_{}'.format(strat_version)].iloc[i] * config.loc_set.zone.dt_k:\n","\n","          mr_score += 1  \n","      \n","      if show_detail:\n","          print(\"dc :\", dc)\n","          print(\"dt_k :\", dt_k)\n","\n","    \n","    # -------------- zone rejection  -------------- #\n","    if config.loc_set.zone.zone_rejection:\n","      \n","      # #       by bb and dc - rsi      # \n","      # mr_const_cnt += 1\n","      # if res_df['bb_base_%s' % config.loc_set.zone.bbz_itv].iloc[i] >= res_df['dc_lower_1m'].iloc[i] >= res_df['bb_lower_%s' % config.loc_set.zone.bbz_itv].iloc[i]:        \n","      #   mr_score += 1                   \n","      \n","        #       by bb       #       \n","      mr_const_cnt += 1\n","      # if  res_df['bb_lower_5m'].iloc[i] > res_df['bb_base_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","\n","      # if res_df['close'].iloc[i] > res_df['bb_upper_%s' % config.loc_set.zone.bbz_itv].iloc[i]:    # org\n","      # if res_df['close'].iloc[i] < res_df['bb_upper_%s' % config.loc_set.zone.bbz_itv].iloc[i]:  # inv\n","      # if res_df['close'].iloc[i] < res_df['bb_lower_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","      if res_df['close'].iloc[i] < res_df['bb_lower2_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","      # if res_df['close'].iloc[i] < res_df['bb_lower3_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","        mr_score += 1      \n","\n","        #       by ema       #       \n","      mr_const_cnt += 1\n","      # if  res_df['long_ep'].iloc[i] > res_df['ema_5m'].iloc[i]:\n","      if  res_df['close'].iloc[i] > res_df['ema_5m'].iloc[i]:\n","        mr_score += 1                \n","\n","\n","        #       by zone_dtk       #\n","      # mr_const_cnt += 1\n","      # if res_df['zone_dc_lower_v2_{}'.format(strat_version)].iloc[i] > res_df['short_dtk_plot_1'].iloc[i] - res_df['short_dtk_plot_gap'].iloc[i] * config.loc_set.zone.zone_dt_k:      \n","      #   mr_score += 1                   \n","\n","\n","    # -------------- zoning -------------- #\n","    if config.tr_set.c_ep_gap != \"None\":\n","        #       by bb       # \n","      # if res_df['close'].iloc[i] < res_df['bb_upper_%s' % config.loc_set.zone.bbz_itv].iloc[i]:\n","\n","        #       by zone_dtk       #\n","\n","          #         c_zone        #\n","      if res_df['zone_dc_lower_v2_{}'.format(strat_version)].iloc[i] < res_df['short_dtk_plot_1'].iloc[i] - res_df['short_dtk_plot_gap'].iloc[i] * config.loc_set.zone.zone_dt_k:\n","        \n","        if config.ep_set.static_ep:\n","          res_df['long_ep_{}'.format(strat_version)].iloc[i] = res_df['long_ep2_{}'.format(strat_version)].iloc[i]\n","        else:\n","          res_df['long_ep_{}'.format(strat_version)] = res_df['long_ep2_{}'.format(strat_version)]\n","          \n","        if config.out_set.static_out:\n","          res_df['long_out_{}'.format(strat_version)].iloc[i] = res_df['long_out_org_{}'.format(strat_version)].iloc[i]\n","        else:\n","          res_df['long_out_{}'.format(strat_version)] = res_df['long_out_org_{}'.format(strat_version)]\n","\n","        zone = 'c'\n","\n","        # mr_const_cnt += 1\n","        # dc_lb_period = 100\n","        # if np.sum((res_df['dc_upper_15m'] > res_df['dc_upper_15m'].shift(15)).iloc[i - dc_lb_period:i]) == 0:\n","        #   mr_score += 1\n","        \n","\n","          #         t_zone        #\n","      else:\n","        \n","        # mr_const_cnt += 1   # zone_rejection - temporary\n","\n","        if config.ep_set.static_ep:\n","          res_df['long_ep_{}'.format(strat_version)].iloc[i] = res_df['long_ep_org_{}'.format(strat_version)].iloc[i]\n","        else:\n","          res_df['long_ep_{}'.format(strat_version)] = res_df['long_ep_org_{}'.format(strat_version)]\n","\n","        if config.out_set.static_out:\n","          res_df['long_out_{}'.format(strat_version)].iloc[i] = res_df['long_out2_{}'.format(strat_version)].iloc[i]\n","        else:\n","          res_df['long_out_{}'.format(strat_version)] = res_df['long_out2_{}'.format(strat_version)]\n","\n","        zone = 't'\n","\n","\n","    if mr_const_cnt == mr_score:\n","        open_side = OrderSide.BUY\n","\n","    return res_df, open_side, zone"]},{"cell_type":"markdown","metadata":{"id":"o-XjNS1L31YB"},"source":["##### ep_loc.point & zone legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"taB2j7kT33iN"},"outputs":[],"source":["\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                 (res_df['close'] < res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(strat_version)] - 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] >= res_df['bb_lower_1m']) &\n","    #                 # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) <= res_df['bb_lower_1m']) &\n","    #                 (res_df['close'] < res_df['bb_lower_1m'])\n","    #                 , res_df['entry_{}'.format(strat_version)] - 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] <= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['cloud_bline_%s' % cb_itv]) &\n","    #                   (res_df['close'] > res_df['cloud_bline_%s' % cb_itv])\n","    #                 , res_df['entry_{}'.format(strat_version)] + 1, res_df['entry_{}'.format(strat_version)])\n","\n","    # res_df['entry_{}'.format(strat_version)] = np.where((res_df['open'] <= res_df['bb_upper_1m']) &\n","    #                   # (res_df['close'].shift(config.loc_set.point.tf_entry * 1) >= res_df['bb_upper_1m']) &\n","    #                   (res_df['close'] > res_df['bb_upper_1m'])\n","    #                 , res_df['entry_{}'.format(strat_version)] + 1, res_df['entry_{}'.format(strat_version)])\n","\n","\n","    \n","   # --------------- ema --------------- #   \n","  # res_df['ema5_1m'] = ema(res_df['close'], 5).shift(1)\n","\n","  #   # --------------- cloud bline --------------- #   \n","  # res_df['cloud_bline_1m'] = cloud_bline(res_df, 26).shift(1)\n","  \n","    #       stochastic      #\n","  # res_df['stoch'] = stoch(res_df, 5, 3, 3)\n","\n","    #       fisher      #\n","  # res_df['fisher30'] = fisher(res_df, 30)\n","  # res_df['fisher60'] = fisher(res_df, 60)\n","  # res_df['fisher120'] = fisher(res_df, 120)\n","\n","    #       cctbbo      #\n","  # res_df['cctbbo'], _ = cct_bbo(res_df, 21, 13)\n","\n","    #       ema_roc      #\n","  # res_df['ema_roc'] = ema_roc(res_df['close'], 13, 9)\n","\n","\n","   # ------------------------------ htf data ------------------------------ #    \n","\n","  #             Todo              #\n","  # htf_df = pd.read_excel(date_path2 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # htf_df = pd.read_excel(date_path3 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # htf_df = pd.read_excel(date_path4 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # htf_df = pd.read_excel(date_path5 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # # # # htf_df = pd.read_excel(date_path6 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","\n","  # # ---- htf index slicing ---- #\n","  # htf_df = htf_df.loc[:res_df.index[-1]]\n","  \n","  # print(\"res_df.index[-1] :\", res_df.index[-1])\n","  # print(\"htf_df.index[-1] :\", htf_df.index[-1])\n","\n","  # res_df = dc_line(res_df, htf_df, '5m')\n","  # res_df = dc_level(res_df, '5m', 1)\n","\n","\n","  # # # if \"sma4\" in res_df.columns:\n","  # # #   res_df.drop(\"sma4\", axis=1, inplace=1)\n","\n","  # # htf_df['sma'] = htf_df['close'].rolling(60).mean()\n","  # # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf(res_df, htf_df, [-1]), columns=['sma_30m']))\n","  \n","  # htf_df['stoch'] = stoch(htf_df, 13, 3, 3)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf(res_df, htf_df, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","   \n","  # fifth_df['ema'] = ema(fifth_df['close'], 5)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf(res_df, fifth_df, [-1]), columns=['ema5']))\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == 'MARKET':\n","        #   mr_const_cnt += 1\n","        #   if (res_df['close'].iloc[i] - res_df['short_tp'].iloc[i]) / (res_df['short_out'].iloc[i] - res_df['close'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error):  \n","        #     mr_score += 1\n","\n","           \n","        # ------- entry once ------- #   \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == 1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == -1:\n","        #     prev_entry_cnt += 1          \n","        # # # print(\"prev_entry_cnt :\", prev_entry_cnt)\n","\n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] < res_df['bb_lower_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_lower2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] < res_df['bb_base_1h'].iloc[i]:\n","\n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] < res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","  \n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['low'].iloc[i] > res_df['short_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1\n","\n","\n","\n","          \n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == \"MARKET\":\n","          # mr_const_cnt += 1        \n","          # if (res_df['long_tp'].iloc[i] - res_df['close'].iloc[i]) / (res_df['close'].iloc[i] - res_df['long_out'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error): # ÏùºÎ∞òÏ†ÅÏúºÎ°ú dr ÏÉÅÏóêÏÑú tp ÎπÑÏú®Ïù¥ Îçî Ïª§Ïßê (tr Î≥¥Îã§)\n","          #   mr_score += 1\n","\n","        # -------------- ep limit -------------- #    \n","        # mr_const_cnt += 1\n","        # # if (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # if config.ep_set.min_eplim_pct < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # # if 0 < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        #   # if res_df['st_gap_15m'].iloc[i] / res_df['open'].iloc[i] < 0:\n","        #   #   print(\"i, res_df['st_gap_15m'].iloc[i] :\", i, res_df['st_gap_15m'].iloc[i])\n","        #   mr_score += 1\n","\n","\n","        # -------------- entry once -------------- #    \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == -1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == 1:\n","        #     prev_entry_cnt += 1\n","          \n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","\n","        # ------- htf zoning ------- #   \n","        # mr_const_cnt += 1\n","          \n","        #   #       bb zone     #\n","        # if res_df['close'].iloc[i] > res_df['bb_upper_%s' % bbz_interval].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_upper2_1h'].iloc[i]:\n","        # # if res_df['close'].iloc[i] > res_df['bb_base_1h'].iloc[i]:\n","        \n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] > res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","        #   mr_score += 1\n","\n","\n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['high'].iloc[i] < res_df['long_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","          \n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1"]},{"cell_type":"markdown","metadata":{"id":"-IbP_Z3Dlwk4"},"source":["### nontp survey"]},{"cell_type":"markdown","metadata":{"id":"FxJ1y8v2fkCR"},"source":["##### term & liqd"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":614},"executionInfo":{"elapsed":8,"status":"ok","timestamp":1628300788555,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"-qIWa48pl1GO","outputId":"b2687c93-e070-4d45-8a67-4cc783fd78f1"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 360x720 with 2 Axes>"]},"metadata":{"tags":[]},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]}],"source":["# print(nontp_long_indexs)\n","\n","plot_size = 100\n","\n","for s_i in range(plot_size, len(trade_list), plot_size):\n","\n","  slice_trade_list = trade_list[s_i - plot_size:s_i]\n","  slice_liqd_list = liqd_list[s_i - plot_size:s_i]\n","\n","  # print(len(slice_trade_list))\n","  np_trade = np.array(slice_trade_list)\n","  trade_term = np_trade[:, [2]] - np_trade[:, [1]]\n","\n","  plt.figure(figsize=(5, 10))\n","  plt.subplot(211)\n","  plt.bar(np.arange(len(trade_term)), trade_term.reshape(-1,), width=1, color='b')\n","\n","  # plt.plot(trade_term.reshape(-1,))\n","  plt.ylim(0, 1000)\n","  # plt.show()\n","  # print()\n","\n","  plt.subplot(212)\n","  # print(len(liqd_list))\n","  # plt.bar(np.arange(len(liqd_list)), liqd_list)\n","  plt.bar(np.arange(len(slice_liqd_list)), np.array(slice_liqd_list), width=1, color='r')\n","  # plt.plot(slice_liqd_list)\n","  plt.show()\n","\n","print()"]},{"cell_type":"markdown","metadata":{"id":"VBwVaUkvfnOd"},"source":["##### check nontp index"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":454,"status":"ok","timestamp":1628220543161,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"mRCMBOU4frNY","outputId":"ce4a9c9b-3589-40b3-8a19-4be03d5b9a1e"},"outputs":[{"name":"stdout","output_type":"stream","text":["32747\n"]}],"source":["# np_nontp_short_indexs = np.array(nontp_short_indexs)\n","# np_nontp_long_indexs = np.array(nontp_long_indexs)\n","\n","# short_til_term = len(res_df) - np_nontp_short_indexs\n","# long_til_term = len(res_df) - np_nontp_long_indexs\n","\n","max_nontp_short_term = len(res_df) - nontp_short_indexs[0]\n","max_nontp_long_term = len(res_df) - nontp_long_indexs[0]\n","\n","print(max_nontp_long_term)"]},{"cell_type":"markdown","metadata":{"id":"tApzvz_gK9lR"},"source":["## basic strategy"]},{"cell_type":"markdown","metadata":{"id":"FaRGwR4NEop2"},"source":["### shifting"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"a8aYsjEgQnGF"},"outputs":[],"source":["org_res_df = res_df.copy()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":291,"status":"ok","timestamp":1626515312874,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"RF3RM2G2RCb1","outputId":"ba8f6a75-d4df-4f85-cd0f-190935341f7a"},"outputs":[{"name":"stdout","output_type":"stream","text":["                            open     high  ...  min_upper  max_lower\n","2021-06-30 23:55:59.999  0.27223  0.27281  ...   0.272145    0.27005\n","2021-06-30 23:56:59.999  0.27274  0.27290  ...   0.272145    0.27005\n","2021-06-30 23:57:59.999  0.27246  0.27257  ...   0.272523    0.27021\n","2021-06-30 23:58:59.999  0.27166  0.27183  ...   0.272523    0.27021\n","2021-06-30 23:59:59.999  0.27144  0.27211  ...   0.272523    0.27021\n","\n","[5 rows x 37 columns]\n","                            open     high  ...  min_upper  max_lower\n","2021-06-30 23:55:59.999  0.27223  0.27281  ...   0.272523    0.27021\n","2021-06-30 23:56:59.999  0.27274  0.27290  ...        NaN        NaN\n","2021-06-30 23:57:59.999  0.27246  0.27257  ...        NaN        NaN\n","2021-06-30 23:58:59.999  0.27166  0.27183  ...        NaN        NaN\n","2021-06-30 23:59:59.999  0.27144  0.27211  ...        NaN        NaN\n","\n","[5 rows x 37 columns]\n"]}],"source":["#         refresh res_df      #\n","res_df = org_res_df.copy()\n","print(org_res_df.tail(5))\n","\n","# break\n","\n","\n","shift_size = -4\n","# shift_size = -1\n","# shift_size = -7\n","# shift_size = +3\n","\n","res_df['min_upper'] = res_df['min_upper'].shift(shift_size)\n","res_df['max_lower'] = res_df['max_lower'].shift(shift_size)\n","res_df['minor_ST1_Trend'] = res_df['minor_ST1_Trend'].shift(shift_size)\n","res_df['minor_ST2_Trend'] = res_df['minor_ST2_Trend'].shift(shift_size)\n","res_df['minor_ST3_Trend'] = res_df['minor_ST3_Trend'].shift(shift_size)\n","res_df['middle_line'] = res_df['middle_line'].shift(shift_size)\n","\n","print(res_df.tail(5))"]},{"cell_type":"markdown","metadata":{"id":"2gxvme1PC6ha"},"source":["### load model"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5831,"status":"ok","timestamp":1628862368878,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"dtYdAuSsC72_","outputId":"e8dccc53-aaa7-4bab-ed8d-753f634c08d6"},"outputs":[{"name":"stdout","output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/resnet/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5\n","94773248/94765736 [==============================] - 1s 0us/step\n"]}],"source":["# model_name = 'inner_tick_cnnreg_lscalemm_prefee_gpu_%s_%s_%s_%s_%s.h5'\n","\n","# model = tf.keras.models.load_model(ckpt_path + model_name)\n","\n","from tensorflow.keras.applications.resnet50 import ResNet50\n","\n","model = ResNet50(weights='imagenet', include_top=False)\n","# model.summary()\n"]},{"cell_type":"markdown","metadata":{"id":"5la6usMOFzkX"},"source":["#### gen selected vector"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oQk3-jbKF8FB"},"outputs":[],"source":["def min_max_scale(npy_x):\n","\n","  return (npy_x - np.min(npy_x)) / (np.max(npy_x) - np.min(npy_x))\n","\n","def expand_dims(npy_x):\n","\n","  row, col = npy_x.shape\n","  npy_x2 = np.array(npy_x).reshape(-1, row, col, 1).astype(np.float32)\n","  # input_x = np.array(data_x).reshape(-1, row, col).astype(np.float32)\n","\n","  #     1c to 3c    #\n","  npy_x3 = npy_x2 * np.ones(3, dtype=np.float32)[None, None, None, :]\n","\n","  return npy_x3\n","\n","\n","def vector_dist(f1, f2):\n","  return np.linalg.norm(f1-f2)\n","\n","\n","\n","# ------------------------ params ------------------------  #\n","selected_i = 500\n","input_size = 100\n","\n","\n","\n","#   1. ÏÑ†ÌÉùÎêú Ïù∏Îç±Ïä§Î•º ÏûÖÎ†•Î∞õÏïòÏùÑ Îïå, input generating ÌòïÌÉúÎßå ÎßåÎì§Ïñ¥ÎÜìÍ≥†,     #\n","#   1-1. input cols ÌïÑÏöîÌï®    #\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower']\n","# senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","# senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","\n","sma_list = ['sma']\n","\n","#     -------------- outer price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","cctbbo_list = ['cctbbo']\n","\n","selected_price_colname = basic_list + senkoua_list + senkoub_list + sar_list\n","selected_outprice_colname = [macd_list]\n","\n","\n","#         global scaling for outer price data       #\n","#         1. nan Ï≤òÎ¶¨       #\n","\n","# # print((np.isnan(df.values)))\n","# print(\"np.sum(np.isnan(df.values), axis=0) :\", np.sum(np.isnan(df.values), axis=0))\n","\n","# max_nan = np.max(np.sum(np.isnan(df.values), axis=0))\n","# # print(max_nan)\n","\n","# df = df.iloc[max_nan:-max_nan]\n","\n","# total_gdata = []\n","# for g_col in selected_outprice_colname:\n","\n","#   temp_data = min_max_scale(res_df[g_col])\n","#   total_gdata.append(temp_data)\n","\n","\n","\n","#   1-2. cols Ïóê Îî∞Î•∏, scaling method Íµ¨Î∂ÑÌï®    #\n","onprice_input_x = min_max_scale(res_df[selected_price_colname].iloc[selected_i - input_size:selected_i].values)\n","print(onprice_input_x.shape)\n","\n","\n","#   2. plot_check ÏóêÏÑú Î≥∏Ïù∏Ïù¥ ÏõêÌïòÎäî shape Ïùò Ïù∏Îç±Ïä§Î•º ÏÑ†ÌÉù   #\n","#   3. vertorize, \n","#   3-1. input generator Î•º Ïù¥Ïö©Ìï¥ entry signal Î∞úÏÉùÌï† ÎïåÎßàÎã§ dist ÎπÑÍµê ÏßÑÌñâ    #\n","re_onprice_input_x = expand_dims(onprice_input_x)\n","print(re_onprice_input_x.shape)\n","      \n","# break\n","\n","selected_vector = model.predict(re_onprice_input_x, verbose=1)\n","print(selected_vector.shape)"]},{"cell_type":"markdown","metadata":{"id":"OJqkmkpsLCYC"},"source":["### tr_tresh calc"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":446,"status":"ok","timestamp":1636015063790,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"gcpo4MGd9Wm4","outputId":"434b56b3-3a3c-45c1-f559-42681fea5f05"},"outputs":[{"name":"stdout","output_type":"stream","text":["res_wr : 0.6\n","tr_thresh : 0.6766666666666667\n","[0.95, 1.0338333333333334, 0.95, 0.95, 1.0338333333333334, 0.95, 0.95, 1.0338333333333334, 0.95, 1.0338333333333334]\n","\n","Î≥µÎ¶¨Î•º ÏúÑÌïú tr_thresh_ : 1.0\n","np.cumprod(test_trade_list)[-1] : 0.5751227991397774\n","total_pr :  0.5751227991397774\n","\n","[-0.05        0.03383333 -0.05       -0.05        0.03383333 -0.05\n"," -0.05        0.03383333 -0.05        0.03383333]\n","Îã®Î¶¨Î•º ÏúÑÌïú tr_thresh_ : 1.0\n","np.cumsum(np_test_trade)[-1] : 0.30000000000001137\n","total_pr :  1.3000000000000114\n"]}],"source":["res_wr = 0.6\n","# tr_thresh = 1\n","# tr_thresh = ((1 - res_wr) / res_wr) ** 0.5\n","tr_thresh = ((1 - res_wr) / res_wr) + 0.01\n","# tr_thresh = 2.6\n","print(\"res_wr :\", res_wr)\n","print(\"tr_thresh :\", tr_thresh)\n","\n","\n","#   Îã®Î¶¨    #\n","trade_num = 1000\n","asset = 1 # thousand USDT\n","test_loss_gap = 0.95  # fee adjusted\n","test_pr_gap = 1 + (1 - test_loss_gap) * tr_thresh\n","\n","test_loss_cnt = trade_num * (1 - res_wr)\n","test_pr_cnt = trade_num * res_wr\n","\n","test_trade_list = [test_pr_gap] * int(test_pr_cnt) + [test_loss_gap] * int(test_loss_cnt)\n","random.shuffle(test_trade_list)\n","# print(\"len(test_trade_list) :\", len(test_trade_list))\n","print(test_trade_list[:10])\n","print()\n","\n","# print(\"%.5f\" % np.cumprod(test_trade_list)[-1])\n","for tr_thresh_ in np.arange(1, 3, 0.2):\n","  if (1 + (1 - test_loss_gap) * tr_thresh_) ** test_pr_cnt * test_loss_gap ** test_loss_cnt > 1:\n","    break\n","print(\"Î≥µÎ¶¨Î•º ÏúÑÌïú tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumprod(test_trade_list)[-1] :\", np.cumprod(test_trade_list)[-1])\n","print(\"total_pr : \", np.cumprod(test_trade_list)[-1])\n","print()\n","#   Î≥µÎ¶¨ tr_thresh  #\n","#   1. trade_num Ïóê ÏòÅÌñ• Î∞õÏßÄ ÏïäÏùå\n","#   2. loss_gap Ïóê ÎπÑÎ°ÄÌï®\n","\n","for tr_thresh_ in np.arange(1, 3, 0.01):\n","  if ((1 - test_loss_gap) * tr_thresh_) * test_pr_cnt + (test_loss_gap - 1) * test_loss_cnt > 0:\n","    break\n","np_test_trade = np.array(test_trade_list) - 1\n","print(np_test_trade[:10])\n","# print(\"%.3f\" % )\n","print(\"Îã®Î¶¨Î•º ÏúÑÌïú tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumsum(np_test_trade)[-1] :\", np.cumsum(np_test_trade)[-1])\n","print(\"total_pr : \", 1 + np.cumsum(np_test_trade)[-1])\n"]},{"cell_type":"markdown","metadata":{"id":"JNQxkb06ZdTe"},"source":["# traded section plot"]},{"cell_type":"markdown","metadata":{"id":"UmH_Pb5BZUtm"},"source":["## plot with off-color st with dash"]},{"cell_type":"markdown","metadata":{"id":"5z4L3MMYmUI0"},"source":["### sorted plot_check"]},{"cell_type":"code","execution_count":15,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"18OoEVE6GCzqAtqQ3tH7wM5wm2ULGBun1"},"executionInfo":{"elapsed":24436,"status":"error","timestamp":1639726694161,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"Qv1MM2MemZnF","outputId":"e7e400e3-9bf4-4225-8867-fe26e4d18da5"},"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}],"source":["assert len(open_list) == len(trade_list), \"len(open_list) != len(trade_list)\"\n","assert len(tp_state_list) == len(fee_list), \"len(tp_state_list) != len(fee_list)\"\n","\n","strat_version = \"v3\"\n","\n","save_plot = 0\n","pr_sort = 0     # Ïù¥ÏÉÅÌïú Ï≤¥Í≤∞ ÌôïÏù∏ÌïòÍ∏∞ Ï¢ãÏùå\n","pr_descend = 1\n","wl_case = 1     # 1 / -1 / 0 (win loss study)\n","position = 1    # -1 / 1 / 0 (short / long / both)\n","\n","inversion = 0\n","hedge = 0\n","\n","\n","if save_plot:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".ftr\", \"\")\n","  try:\n","    os.mkdir(plot_check_dir)\n","  except:\n","\n","    #     remove existing dir   #\n","    shutil.rmtree(plot_check_dir)\n","    print(plot_check_dir, 'removed !')\n","    os.mkdir(plot_check_dir)\n","    # pass\n","    \n","\n","prev_plotsize = 30\n","post_plotsize = 20\n","\n","\n","if position == -1:\n","  position = config.ep_set.short_entry_score\n","elif position == 1:\n","  position = -config.ep_set.short_entry_score\n","\n","\n","if inversion:  \n","\n","    plot_pr_list = rev_np_pr\n","    h_plot_pr_list = h_rev_np_pr  # hedge\n","\n","else:\n","\n","    plot_pr_list = np_pr\n","    try:\n","      h_plot_pr_list = h_np_pr\n","    except Exception as e:\n","      print(\"error in h_plot_pr :\", e)\n","      h_plot_pr_list = np_pr\n","\n","\n","h_candle_intv1 = 5\n","h_candle_intv2 = 15\n","res_df = h_candle(res_df, h_candle_intv1)\n","res_df = h_candle(res_df, h_candle_intv2)\n","\n","\n","res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=15, use_dtk_line=config.loc_set.zone.use_dtk_line)\n","# res_df = dtk_plot(res_df, dtk_itv2='15m', hhtf_entry=1, use_dtk_line=1)\n","# break\n","\n","rtc_list = [\"short_tp_1_{}\".format(strat_version), \"short_tp_gap_{}\".format(strat_version), \"long_tp_1_{}\".format(strat_version), \"long_tp_gap_{}\".format(strat_version)]\n","# h_rtc_list = [\"h_short_tp_1\", \"h_short_tp_gap\", \"h_long_tp_1\", \"h_long_tp_gap\"]\n","dtk_list = [\"short_dtk_1_{}\".format(strat_version), \"short_dtk_gap_{}\".format(strat_version), \"long_dtk_1_{}\".format(strat_version), \"long_dtk_gap_{}\".format(strat_version),\n","            # \"short_dtk_1_line\", \"short_dtk_gap_line\", \"long_dtk_1_line\", \"long_dtk_gap_line\",\n","            \"short_dtk_plot_1\", \"short_dtk_plot_gap\", \"long_dtk_plot_1\", \"long_dtk_plot_gap\"]\n","dc_v2_list = ['dc_upper_v2_{}'.format(strat_version), 'dc_lower_v2_{}'.format(strat_version)]\n","\n","\n","ohlc_list = ['open', 'high', 'low', 'close'] # + basic_st_list\n","hcandle_list = ['hopen_%s' % h_candle_intv1, 'hclose_%s' % h_candle_intv1, 'hopen_%s' % h_candle_intv2, 'hclose_%s' % h_candle_intv2]\n","\n","# --------------------- dc & bb level --------------------- #\n","dc_interval = '1m'\n","hdc_interval = '5m'\n","hhdc_interval = '15m'\n","\n","dc_list = ['dc_upper_%s' % dc_interval, 'dc_lower_%s' % dc_interval]\n","hdc_list = ['dc_upper_%s' % hdc_interval, 'dc_lower_%s' % hdc_interval]\n","hhdc_list = ['dc_upper_%s' % hhdc_interval, 'dc_lower_%s' % hhdc_interval]\n","\n","bb_interval = dc_interval\n","hbb_interval = hdc_interval\n","hhbb_interval = hhdc_interval\n","\n","bb_list = ['bb_upper_%s' % bb_interval, 'bb_lower_%s' % bb_interval]\n","hbb_list = ['bb_upper_%s' % hbb_interval, 'bb_lower_%s' % hbb_interval]\n","hhbb_list = ['bb_upper_%s' % hhbb_interval, 'bb_lower_%s' % hhbb_interval]\n","\n","bbwp_list = ['bbwp', 'bbwp_ma']\n","\n","\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1']\n","senkoub_list = ['senkou_b1']\n","\n","sar_list = ['sar_15m']\n","\n","# ma_list = ['sma1', 'sma4']\n","sma_list = ['sma_1m']\n","\n","ema_list = ['ema_5m']\n","# cb_list = ['cloud_bline_1m']\n","cb_list = ['cloud_bline_30m']\n","# cb_list = ['cloud_bline_5m']\n","\n","\n","\n","# -------------- under price phase -------------- #\n","# macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3']\n","# trix_list = ['trix1', 'trix2', 'trix3']\n","# stoch_list = ['stoch_5m']\n","# fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","# cctbbo_list = ['cctbbo']\n","# emaroc_list = ['ema_roc']\n","rsi_list = ['rsi_%s' % config.loc_set.point.exp_itv] \n","\n","\n","# -------------- summation -------------- #\n","# input_colname = ohlc_list + basic_st_list + pline_list + bb_list + hbb_list + sma_list + cb_list + stoch_list + sar_list + dc_list\n","input_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + hhdc_list + dtk_list + dc_v2_list + rsi_list + ema_list\n","\n","# yrange_colname = ohlc_list + basic_st_list + pline_list # currently just used for ymin, ymax\n","yrange_colname = ohlc_list + hcandle_list + bb_list + hbb_list + hhbb_list + dc_list + hdc_list + hhdc_list + dc_v2_list + ema_list # currently just used for ymin, ymax\n","\n","\n","# aggr_obj = dict(zip(plot_pr_list, open_list, enumerate(trade_list)))\n","aggr_obj = dict(zip(plot_pr_list, zip(open_list, enumerate(trade_list))))\n","\n","sorted_obj = sorted(aggr_obj.items(), key=(lambda x: x[0]), reverse=pr_descend)\n","# print(aggr_obj)\n","# print(sorted_obj)\n","\n","if pr_sort:\n","  iter_obj = sorted_obj\n","else:\n","  iter_obj = aggr_obj.items()\n","\n","# for temp_pr, (open_idx, (t_i, (ep_idx_list_, tp_idx_list_))) in iter_obj:  # 0.699700153073042, (291402, (3014, ([370012], [370014])))\n","for temp_pr, (open_idx, (t_i, (ep_idx_list_, out_idx_list_, tp_idx_list_))) in iter_obj:  # 0.699700153073042, (291402, (3014, ([370012], [370014])))\n","\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","\n","  if wl_case == 1:\n","    if plot_pr_list[t_i] < 1.0:\n","      continue  \n","  \n","  elif wl_case == -1:\n","    if plot_pr_list[t_i] > 1.0:\n","      continue  \n","  \n","  #   open size indexing by open_idx    #\n","  open_side = res_df['entry_{}'.format(strat_version)].iloc[open_idx]\n","\n","  # ---------- const. zone ---------- #\n","\n","  if position != 0:\n","    if open_side == -position:\n","      continue\n","\n","  if not strat_version in tp_state_list[t_i]:\n","  # if tp_state_list[t_i] != 'long close tp':\n","  # if tp_state_list[t_i] != 's-long_tp':\n","    continue\n","\n","  # if open_idx == 63901:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","\n","  # if tp_ratio_list[t_i] > 0.4:\n","  #   continue\n","\n"," \n","  # print(\"open_idx :\", open_idx)\n","  print(\"open_side :\", open_side)\n","  print(\"np_timeidx[open_idx] :\", np_timeidx[open_idx])\n","  print(\"open_idx, ep_idx_list_[0], tp_idx_list_[-1] :\", open_idx, ep_idx_list_[0], tp_idx_list_[-1])\n","  # break\n","\n","\n","  plot_df = res_df.iloc[open_idx - prev_plotsize:tp_idx_list_[-1] + post_plotsize][input_colname]\n","\n","\n","  #       keep off-color st with another variable         #\n","  # st_trend_plot_df = res_df[['ST1_Trend%s' % basic_st_interval, 'ST2_Trend%s' % basic_st_interval, 'ST3_Trend%s' % basic_st_interval]].iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","\n","  # fig = trendln.plot_support_resistance(plot_df['close'], accuracy=8, fromwindows=0, numbest=1,  window=30) # requires matplotlib - pip install matplotlib\n","  \n","  plt.style.use('dark_background')\n","\n","  fig = plt.figure(figsize=(14, 18))\n","  \n","  gs = gridspec.GridSpec(nrows=3, # row Î™á Í∞ú \n","                       ncols=1, # col Î™á Í∞ú \n","                       height_ratios=[3, 1, 1]\n","                      )\n","  \n","  ax = fig.add_subplot(gs[0])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='#26a69a', colordown='#ef5350', alpha=0.5)\n","\n","  # ---------- h_candle ---------- #\n","  alpha = 1\n","  lw = 1\n","  for cd_i, candle in enumerate(hcandle_list):\n","\n","    if cd_i == 2:\n","      lw = 2      \n","    plt.step(np.arange(len(plot_df)), plot_df[candle].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","\n","  # alpha = 0.1\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['hclose_60'].values, plot_df['hopen_60'].values, \n","  #                     where=1, facecolor='#ffffff', alpha=alpha)  \n","  \n","\n","   # --------- ema --------- #\n","  alpha = 1\n","  lw = 4\n","  for sm_i, item in enumerate(ema_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","\n","  # ---------------------- dc_v2 ---------------------- #\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(dc_v2_list):\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","  # ---------------------- dc ---------------------- #\n","  alpha = 1\n","  lw = 2\n","  for sm_i, item in enumerate(dc_list):\n","      plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","  # ---------------------- hdc ---------------------- #\n","  alpha = 1\n","  lw = 2\n","  for sm_i, item in enumerate(hdc_list):\n","      plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#e65100', linewidth=lw)\n","\n","  # ---------------------- hhdc ---------------------- #\n","  alpha = 1\n","  lw = 4\n","  for sm_i, item in enumerate(hhdc_list):\n","      plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#c2185b', linewidth=lw)\n","\n","\n","  # ---------------------- bb ---------------------- #\n","  alpha = 1\n","  lw = 1\n","  for sm_i, item in enumerate(bb_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","\n","  alpha = 0.2\n","  plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % bb_interval].values, plot_df['bb_lower_%s' % bb_interval].values, \n","                      where=plot_df['bb_upper_%s' % bb_interval].values >= plot_df['bb_lower_%s' % bb_interval].values, facecolor='#ffffff', alpha=alpha)   \n","\n","  # ---------------------- hbb ---------------------- #\n","  alpha = 1\n","  lw = 2\n","  for sm_i, item in enumerate(hbb_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ff00ff', linewidth=lw)\n","  \n","  alpha = 0.2\n","  plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % hbb_interval].values, plot_df['bb_lower_%s' % hbb_interval].values, \n","                      where=plot_df['bb_upper_%s' % hbb_interval].values >= plot_df['bb_lower_%s' % hbb_interval].values, facecolor='#ff00ff', alpha=alpha) \n","  \n","  # ---------------------- hhbb ---------------------- #\n","\n","  alpha = 1\n","  lw = 4\n","  for sm_i, item in enumerate(hhbb_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#3179f5', linewidth=lw)\n","  \n","  alpha = 0.2\n","  plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % hhbb_interval].values, plot_df['bb_lower_%s' % hhbb_interval].values, \n","                      where=plot_df['bb_upper_%s' % hhbb_interval].values >= plot_df['bb_lower_%s' % hhbb_interval].values, facecolor='#3179f5', alpha=alpha) \n","  \n","  # ------------------- dtk_line (old, tp_line) ------------------- #\n","  \n","  # alpha = 1\n","  # lw = 2\n","  # rtc_ratio_list = [config.loc_set.zone.dt_k]\n","  \n","  # for rtc_k in rtc_ratio_list:    \n","  #   # plt.step(np.arange(len(plot_df)), plot_df['short_dtk_1_line'].values - plot_df['short_dtk_gap_line'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['long_dtk_1_line'].values + plot_df['long_dtk_gap_line'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","\n","  # hy_min = np.min(plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * rtc_k)\n","  # hy_max = np.max(plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * rtc_k)  \n","\n","  # alpha = 1\n","  # lw = 4\n","  # # h_rtc_ratio_list = [config.loc_set.zone.dt_k]\n","  # h_rtc_ratio_list = [config.loc_set.zone.zone_dt_k]\n","  # # h_rtc_ratio_list = [0.272, 0.36, 0.4, 0.5]\n","  \n","  # for h_rtc_k in h_rtc_ratio_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df['short_dtk_plot_1'].values - plot_df['short_dtk_plot_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   plt.step(np.arange(len(plot_df)), plot_df['long_dtk_plot_1'].values + plot_df['long_dtk_plot_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['h_short_tp_1'].values - plot_df['h_short_tp_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","  #   # plt.step(np.arange(len(plot_df)), plot_df['h_long_tp_1'].values + plot_df['h_long_tp_gap'].values * h_rtc_k, alpha=alpha, linestyle='--', color='#ffffff', linewidth=lw)\n","\n","  # # hy_min = np.min(plot_df['short_dtk_plot_1'].values - plot_df['short_dtk_plot_gap'].values * h_rtc_k)\n","  # # hy_max = np.max(plot_df['long_dtk_plot_1'].values + plot_df['long_dtk_plot_gap'].values * h_rtc_k)  \n","\n","  # ------------------------------------------------------------- #\n","\n","\n","  # ------------- ep ------------- #\n","  # if i != initial_i:\n","  # if len(ep_idx_list_) > 1:\n","  \n","    #        initial order         #\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='#ffeb3b')\n","  plt.axvline(prev_plotsize, alpha=0.5, linestyle='--', color='#ffeb3b')\n","\n","  for ep_i in range(len(ep_idx_list_)):\n","    # plt.axvline(prev_plotsize + (ep_idx_list_[ep_i] - ep_idx_list_[0]), alpha=0.7, linestyle='--', color='#ffeb3b')\n","    plt.axvline(prev_plotsize + (ep_idx_list_[ep_i] - open_idx), alpha=0.7, linestyle='--', color='#ffeb3b')\n","\n","  # plt.axvline(prev_plotsize, alpha=0.5, linestyle='--')\n","\n","  x0,x1 = plt.gca().get_xlim()\n","\n","  # ep_xmin = (prev_plotsize + (ep_idx_list_[ep_i] - ep_idx_list_[0])) / x1\n","  ep_xmin = (prev_plotsize + (ep_idx_list_[ep_i] - open_idx)) / x1\n","  plt.axhline(ep_tp_list[t_i][0], linestyle='--', xmin=ep_xmin, xmax=1, alpha=1, color='lime')  # ep line axhline  \n","  plt.text(x1, ep_tp_list[t_i][0][0], ' ep :\\n %s' % ep_tp_list[t_i][0][0], ha='left', va='center', fontweight='bold') # ep line label\n","\n","  \n","  # ------------- tp ------------- #\n","  for sub_i in range(len(ep_tp_list[t_i][1])):\n","\n","    # tp_xmin = (prev_plotsize + (tp_idx_list_[sub_i] - ep_idx_list_[0])) / x1\n","    tp_xmin = (prev_plotsize + (tp_idx_list_[sub_i] - open_idx)) / x1\n","    plt.axhline(ep_tp_list[t_i][1][sub_i], linestyle='--', xmin=tp_xmin , xmax=1, alpha=1, color='lime')  # tp line axhline\n","    plt.text(x1, ep_tp_list[t_i][1][sub_i], ' tp :\\n %s' % ep_tp_list[t_i][1][sub_i], ha='left', va='center', fontweight='bold') # tp line label\n","     \n","    # plt.axvline(prev_plotsize + (tp_idx_list_[sub_i] - ep_idx_list_[0]), alpha=1., linestyle='--', color='#ffeb3b', zorder=2)\n","    plt.axvline(prev_plotsize + (tp_idx_list_[sub_i] - open_idx), alpha=1., linestyle='--', color='#ffeb3b', zorder=2)\n","\n","\n","  # ------------- rtc horizontal range ------------- # --> open_idx Î°ú Ìï†ÏßÄÎäî Ï∂îÌõÑ ÏàòÏ†ï Í∂åÍ≥† (ep_loc.point2 Ïóê ÏùòÌï¥ ÏßÑÏûÖ Í∏∞Ï§Ä point Í∞Ä Î≥ÄÍ≤ΩÎê† Ïàò ÏûàÏùå)\n","  # rtc_ratio_list = [0.272, 0.36, 0.4, 0.5]\n","  rtc_ratio_list = [0.]\n","  if open_side == config.ep_set.short_entry_score:\n","    # plt.axhline(res_df['short_rtc_1'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    # plt.axhline(res_df['short_rtc_0'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    out_line = res_df['short_out_{}'.format(strat_version)].iloc[out_idx_list_[0]]\n","    plt.axhline(out_line, linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    plt.text(x0, out_line, ' %s' % config.tr_set.out_gap, ha='left', va='center', fontweight='bold')\n","\n","    for rtc_k in rtc_ratio_list:\n","      plt.axhline(res_df['h_short_rtc_1_{}'.format(strat_version)].iloc[open_idx] - res_df['h_short_rtc_gap_{}'.format(strat_version)].iloc[open_idx] * rtc_k, linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","      plt.text(x0, res_df['h_short_rtc_1_{}'.format(strat_version)].iloc[open_idx] - res_df['h_short_rtc_gap_{}'.format(strat_version)].iloc[open_idx] * rtc_k, ' %s' % rtc_k, ha='left', va='center', fontweight='bold')\n","      \n","    y_max = out_line\n","    y_min = res_df['h_short_rtc_1_{}'.format(strat_version)].iloc[tp_idx_list_[-1]] - res_df['h_short_rtc_gap_{}'.format(strat_version)].iloc[tp_idx_list_[-1]] * rtc_k\n","\n","    print(\"short_tp :\", res_df['short_tp_{}'.format(strat_version)].iloc[tp_idx_list_[-1]])\n","    print(\"short_out :\", out_line)\n","\n","  else:\n","    # plt.axhline(res_df['long_rtc_1'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    # plt.axhline(res_df['long_rtc_0'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff') \n","    out_line = res_df['long_out_{}'.format(strat_version)].iloc[out_idx_list_[0]]\n","    plt.axhline(out_line, linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    plt.text(x0, out_line, ' %s' % config.tr_set.out_gap, ha='left', va='center', fontweight='bold')\n","\n","    for rtc_k in rtc_ratio_list:\n","      plt.axhline(res_df['h_long_rtc_1_{}'.format(strat_version)].iloc[open_idx] + res_df['h_long_rtc_gap_{}'.format(strat_version)].iloc[open_idx] * rtc_k, linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","      plt.text(x0, res_df['h_long_rtc_1_{}'.format(strat_version)].iloc[open_idx] + res_df['h_long_rtc_gap_{}'.format(strat_version)].iloc[open_idx] * rtc_k, ' %s' % rtc_k, ha='left', va='center', fontweight='bold')\n","\n","    y_max = res_df['h_long_rtc_1_{}'.format(strat_version)].iloc[tp_idx_list_[-1]] + res_df['h_long_rtc_gap_{}'.format(strat_version)].iloc[tp_idx_list_[-1]] * rtc_k\n","    y_min = out_line\n","\n","    print(\"long_tp :\", res_df['long_tp_{}'.format(strat_version)].iloc[tp_idx_list_[-1]])\n","    print(\"long_out :\", out_line)\n","  \n","    # t_tr = ((res_df['long_tp'].iloc[open_idx] - res_df['close'].iloc[open_idx] - tp_fee * res_df['close'].iloc[open_idx]) / (res_df['close'].iloc[open_idx] - res_df['long_out'].iloc[open_idx] + out_fee * res_df['close'].iloc[open_idx]))\n","    # t_dr = ((res_df['long_tp'].iloc[open_idx] - res_df['close'].iloc[open_idx]) / (res_df['close'].iloc[open_idx] - res_df['long_out'].iloc[open_idx]))     \n","    # print(\"t_tr :\", t_tr)\n","    # print(\"t_dr :\", t_dr)\n","\n","  #         hedge ep & tp         #\n","  h_i = h_trade_list[t_i][1]\n","  if h_i is not None:\n","    # plt.axvline(prev_plotsize + (h_i - ep_idx_list_[0]), linestyle='--')\n","    plt.axvline(prev_plotsize + (h_i - open_idx), linestyle='--')\n","    plt.axhline(h_ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='magenta')  # ep line axhline\n","    plt.axhline(h_ep_tp_list[t_i][1], linestyle='-', xmin=0.85, xmax=1, linewidth=3, color='magenta')  # tp line axhline\n","\n","  \n","  #         check pr        #\n","  if not config.lvrg_set.static_lvrg:\n","    \n","    #   list length Îßå sync ÎßûÏúºÎ©¥ t_i Í±±Ï†ï ÏïàÌï¥ÎèÑÎê®, zip Ìï¥ÏÑú ÏàúÏÑúÍ∞Ä Î∞îÎÄåÏóàÏùÑ Îøê, original serialized order ÏóêÏÑú t_i Î°ú indexing ÌïòÎäî Í≤ÉÎøêÏûÑ   #\n","    plt.title(\"%s ~ %s -> %.5f\\n %s\\n h_pr : %.5f\\n lvrg : %s\\ntp_ratio : %.3f\\n dr : %.3f\\n fee : %.4f\" % (ep_idx_list_[0], tp_idx_list_[-1], plot_pr_list[t_i], tp_state_list[t_i], \n","                                                                                                h_plot_pr_list[t_i], leverage_list[t_i], tp_ratio_list[t_i], dr_list[t_i], fee_list[t_i]))\n","\n","    print(\"short real pr :\", (ep_tp_list[t_i][0] / ep_tp_list[t_i][1][sub_i] - fee_list[t_i] - 1) * leverage_list[t_i] + 1)\n","    print(\"long real pr :\", (ep_tp_list[t_i][1][sub_i] / ep_tp_list[t_i][0] - fee_list[t_i] - 1) * leverage_list[t_i] + 1)    \n","\n","  else:\n","    plt.title(\"%s ~ %s -> %.5f\\n %s\\n h_pr : %.5f\\n tp_ratio : %.3f\\n dr : %.3f\\n fee : %.4f\" % (ep_idx_list_[0], tp_idx_list_[-1], plot_pr_list[t_i], tp_state_list[t_i], \n","                                                                                     h_plot_pr_list[t_i], tp_ratio_list[t_i], dr_list[t_i], fee_list[t_i]))\n","\n","    print(\"short real pr :\", (ep_tp_list[t_i][0] / ep_tp_list[t_i][1][sub_i] - fee_list[t_i] - 1) * config.lvrg_set.leverage + 1)\n","    print(\"long real pr :\", (ep_tp_list[t_i][1][sub_i] / ep_tp_list[t_i][0] - fee_list[t_i] - 1) * config.lvrg_set.leverage + 1)\n","  \n","  #           y lim           #  \n","  y_max_ = max(np.max(plot_df[yrange_colname]))\n","  y_min_ = min(np.min(plot_df[yrange_colname]))\n","  y_max = max(y_max, y_max_)\n","  y_min = min(y_min, y_min_)\n","  \n","  # hy_min = np.min(plot_df['short_dtk_1'].values - plot_df['short_dtk_gap'].values * 0.36)\n","  # hy_max = np.max(plot_df['long_dtk_1'].values + plot_df['long_dtk_gap'].values * 0.36)  \n","  # y_max = max(y_max, y_max_, hy_max)\n","  # y_min = min(y_min, y_min_, hy_min)\n","\n","  if np.isnan(y_max) or np.isnan(y_min):\n","    print('continued in yminmax')\n","    continue\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","  \n","\n","  plt.ylim(y_min, y_max)\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  #           rsi          #    \n","  plt.subplot(gs[1])\n","  alpha = 1\n","  for rsi_ in rsi_list:\n","    plt.step(np.arange(len(plot_df)), plot_df[rsi_].values, 'g', alpha=alpha)\n","    # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","    alpha -= 0.2\n","  plt.axhline(50, linestyle='--')\n","  plt.axhline(rsi_upper, linestyle='--')\n","  plt.axhline(rsi_lower, linestyle='--')\n","  \n","  plt.axvline(prev_plotsize, linestyle='--')\n","  \n","  #     vline open     #\n","  for ep_i in range(len(ep_idx_list_)):\n","    plt.axvline(prev_plotsize + (ep_idx_list_[ep_i] - open_idx), alpha=0.7, linestyle='--', color='#ffeb3b')\n","  \n","  #     vline close     #\n","  for sub_i in range(len(ep_tp_list[t_i][1])):\n","    plt.axvline(prev_plotsize + (tp_idx_list_[sub_i] - open_idx), alpha=1., linestyle='--', color='#ffeb3b', zorder=2)\n","\n","\n","  if not save_plot:\n","    plt.show()\n","  \n","  else:\n","    # ---------- save mode ---------- #\n","    fig_name = plot_check_dir +  \"/%s.png\" % t_i\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","\n","  \n","  plt.close()\n","  print()\n","\n","  # break\n"]},{"cell_type":"markdown","metadata":{"id":"13a-U32Uy50I"},"source":["### brief np_pr survey"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":430},"executionInfo":{"elapsed":1018,"status":"ok","timestamp":1639013719005,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"L9LdjV2uUWnp","outputId":"dd374aaf-e8a4-4c03-a700-eb8400eb9f65"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# plot_pr_list[:100]\n","\n","plt.plot(np_pr)\n","plt.axhline(1)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"TBE0l6dHRYrE"},"source":["### whole pr & chart sync"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":877},"executionInfo":{"elapsed":1436,"status":"ok","timestamp":1636355589887,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"-txULkhXRbz5","outputId":"7cda9fc7-4a4e-4c52-ffa3-a974b5f7c66f"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 3 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 3 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]}],"source":["#     chunky survey ÌïÑÏöîÌï®    #\n","chunk_size = 50000\n","\n","sync_pr = np.ones(len(res_df))\n","sync_tr = np.zeros(len(res_df))\n","# sync_tr = np.empty(len(res_df))\n","# sync_tr[:] = np.nan\n","\n","max_tr = np.max(tp_ratio_list)\n","min_tr = np.min(tp_ratio_list)\n","\n","for ck_i in range(0, len(res_df), chunk_size):\n","\n","  chunked_df = res_df.iloc[ck_i:ck_i + chunk_size]\n","  # break\n","\n","  for pr_, eptp_idx, tr_ in zip(pr_list[ck_i:ck_i + chunk_size], trade_list[ck_i:ck_i + chunk_size], tp_ratio_list[ck_i:ck_i + chunk_size]):\n","    # print(pr_, eptp_idx)\n","    sync_pr[eptp_idx[-1][0]] = pr_\n","    sync_tr[eptp_idx[-1][0]] = tr_\n","    # break\n","\n","  chunked_pr = sync_pr[ck_i:ck_i + chunk_size]\n","  chunked_tr = sync_tr[ck_i:ck_i + chunk_size]\n","  chunked_tr = np.where(np.isnan(chunked_tr), pd.Series(chunked_tr).shift(1), chunked_tr)\n","\n","  # plt.figure(figsize=(8, 6))\n","\n","  plt.subplot(311)\n","  plt.plot(np.arange(len(chunked_df)), chunked_df['close'])\n","  # plt.show()\n","\n","  plt.subplot(312)\n","  plt.plot(np.cumprod(chunked_pr))\n","  \n","  plt.subplot(313)\n","  plt.plot(chunked_tr)\n","  plt.ylim(min_tr + 0.5 * (max_tr - min_tr), max_tr)\n","  \n","  plt.show()\n","  print()\n"]},{"cell_type":"markdown","metadata":{"id":"Qys2Bw5Ou3u9"},"source":["### plot indi. legacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pi5ntOOVu6JT"},"outputs":[],"source":["\n","  # ---------------------- ma ---------------------- #\n","   # --------- ema --------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(ema_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  #   # --------- sma --------- #\n","  # alpha = 1\n","  # for sm_i, sma in enumerate(sma_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 4\n","  #   plt.step(np.arange(len(plot_df)), plot_df[sma].values, alpha=alpha, color='#e91e63', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  \n","  # ---------------------- cb ---------------------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(cb_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#5b9cf6', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","\n","  \n","  #               sar               #\n","  # alpha = 1\n","  # markersize = 5\n","  # for sar in sar_list:\n","  #   plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","  #   markersize += 1\n","  #   alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  # alpha = 0.7\n","  # for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","  #                     where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","  #                     where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","  #   alpha -= 0.05\n","  \n","\n","\n","  # ---------------------- outer price indi. ---------------------- #\n","  #           macd          #\n","  # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","    \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for stoch_ in stoch_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[stoch_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(stoch_upper, linestyle='--')\n","  # plt.axhline(stoch_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- cctbbo ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for cctbbo in cctbbo_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cctbbo].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(cctbbo_upper, linestyle='--')\n","  # plt.axhline(cctbbo_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- ema_roc ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for emaroc in emaroc_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[emaroc].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","  \n","  # ---------- bbw ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for bbwp_ in bbwp_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[bbwp_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(bbwp_thresh, linestyle='--')\n","\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n"]},{"cell_type":"markdown","metadata":{"id":"59nW2aKYzkN8"},"source":["### plot all indicator (stepline ver.)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":828},"executionInfo":{"elapsed":3326,"status":"ok","timestamp":1631665238032,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"id":"JDH4rXgNzno6","outputId":"3ee8589d-27d7-4433-ed78-7bb1233cf175"},"outputs":[{"name":"stdout","output_type":"stream","text":["short real pr : [0.95849245]\n","long real pr : [1.0378222]\n"]},{"data":{"image/png":"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\n","text/plain":["<Figure size 864x1152 with 2 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]}],"source":["save_plot = False\n","\n","\n","if save_plot:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".xlsx\", \"\")\n","  try:\n","    os.mkdir(plot_check_dir)\n","  except:\n","\n","    #     remove existing dir   #\n","    shutil.rmtree(plot_check_dir)\n","    print(plot_check_dir, 'removed !')\n","    os.mkdir(plot_check_dir)\n","    # pass\n","    \n","# prev_plotsize = 120\n","prev_plotsize = 150\n","post_plotsize = 20\n","\n","# inversion = True\n","inversion = False\n","\n","# hedge = True\n","# hedge = False\n","\n","\n","if inversion:  \n","\n","    plot_pr_list = rev_np_pr\n","    h_plot_pr_list = h_rev_np_pr  # hedge\n","\n","else:\n","\n","    plot_pr_list = np_pr\n","    try:\n","      h_plot_pr_list = h_np_pr\n","    except Exception as e:\n","      print(\"error in h_plot_pr :\", e)\n","      h_plot_pr_list = np_pr\n","\n","\n","#         select plot columns       #\n","major_st_list = ['major_ST1_Up', 'major_ST1_Down', 'major_ST2_Up', 'major_ST2_Down', 'major_ST3_Up', 'major_ST3_Down',\n","                 'major_middle_line', 'major_upper_middle', 'major_lower_middle']\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower'] # + major_st_list\n","\n","\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1',  'senkou_a2']\n","senkoub_list = ['senkou_b1',  'senkou_b2']\n","\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1']\n","\n","# ma_list = ['sma1', 'sma4']\n","ma_list = ['ema5']\n","\n","\n","#     -------------- under price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","# macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3']\n","# trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","trix_list = ['trix1', 'trix2', 'trix3']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","cctbbo_list = ['cctbbo']\n","emaroc_list = ['ema_roc']\n","\n","\n","#       \n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols + ichimoku_cols2\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + trix_list\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + ma_list\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + ma_list + macd_list + stoch_list + fisher_list + cctbbo_list\n","input_colname = basic_list + major_st_list + senkoua_list + senkoub_list + sar_list + stoch_list + fisher_list + emaroc_list\n","price_colname = basic_list + senkoua_list + senkoub_list + sar_list # currently just used for ymin, ymax\n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols\n","\n","\n","\n","\n","# for t_i, (initial_i, i, j) in enumerate(trade_list):\n","for t_i, (ep_idx_list_, tp_idx_list_) in enumerate(trade_list):\n","  # print(i, j)\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","\n","  # if i <= 4860:\n","  # if i == 1536:\n","  # if 100 < i < 1860:\n","  if ep_idx_list_[0] == 370530:\n","    pass\n","  else:\n","    continue\n","\n","  # if tp_state_list[t_i] != 'd-open':\n","  #   continue\n","\n","  # if (entry[i] == -1) and res_df['close'].iloc[i - 1] > short_ep.iloc[i]:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  # if plot_pr_list[t_i] > 0.5:\n","  # if plot_pr_list[t_i] > 1.0:\n","  # # if plot_pr_list[t_i] < 1.0:\n","  #   continue\n","\n","  # plot_df = res_df.iloc[i - prev_plotsize:j + post_plotsize, input_cols]\n","  plot_df = res_df.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize][input_colname]\n","\n","\n","  #       keep off-color st with another variable         #\n","  # st_trend_plot_df = res_df.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize, [7, 10, 13]]\n","  # st_trend_plot_df = res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend']].iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  st_trend_plot_df = res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend', 'major_ST1_Trend', 'major_ST2_Trend', 'major_ST3_Trend']].iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  # htf_st_trend_plot_df = res_df[['major_ST1_Trend', 'major_ST2_Trend', 'major_ST3_Trend']].iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","\n","  # y_max = np.max(plot_df.iloc[:, [4, 6, 8]])\n","  # y_min = np.min(plot_df.iloc[:, [5, 7, 9]])\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  \n","  # y_max = max(np.max(plot_df.iloc[:, [4, 6, 8]]))\n","  # y_min = min(np.min(plot_df.iloc[:, [5, 7, 9]]))\n","  \n","  y_max = max(np.max(plot_df[price_colname]))\n","  y_min = min(np.min(plot_df[price_colname]))\n","\n","  if np.isnan(y_max) or np.isnan(y_min):\n","    continue\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","  \n","  plot_df[\"off_color_upper_st1\"] = np.where(st_trend_plot_df['minor_ST1_Trend'] == 1, plot_df['minor_ST1_Up'], np.nan)\n","  plot_df[\"off_color_upper_st2\"] = np.where(st_trend_plot_df['minor_ST2_Trend'] == 1, plot_df['minor_ST2_Up'], np.nan)\n","  plot_df[\"off_color_upper_st3\"] = np.where(st_trend_plot_df['minor_ST3_Trend'] == 1, plot_df['minor_ST3_Up'], np.nan)\n","  plot_df[\"off_color_lower_st1\"] = np.where(st_trend_plot_df['minor_ST1_Trend'] == -1, plot_df['minor_ST1_Down'], np.nan)\n","  plot_df[\"off_color_lower_st2\"] = np.where(st_trend_plot_df['minor_ST2_Trend'] == -1, plot_df['minor_ST2_Down'], np.nan)\n","  plot_df[\"off_color_lower_st3\"] = np.where(st_trend_plot_df['minor_ST3_Trend'] == -1, plot_df['minor_ST3_Down'], np.nan)\n","\n","  plot_df[\"off_color_upper_hst1\"] = np.where(st_trend_plot_df['major_ST1_Trend'] == 1, plot_df['major_ST1_Up'], np.nan)\n","  plot_df[\"off_color_upper_hst2\"] = np.where(st_trend_plot_df['major_ST2_Trend'] == 1, plot_df['major_ST2_Up'], np.nan)\n","  plot_df[\"off_color_upper_hst3\"] = np.where(st_trend_plot_df['major_ST3_Trend'] == 1, plot_df['major_ST3_Up'], np.nan)\n","  plot_df[\"off_color_lower_hst1\"] = np.where(st_trend_plot_df['major_ST1_Trend'] == -1, plot_df['major_ST1_Down'], np.nan)\n","  plot_df[\"off_color_lower_hst2\"] = np.where(st_trend_plot_df['major_ST2_Trend'] == -1, plot_df['major_ST2_Down'], np.nan)\n","  plot_df[\"off_color_lower_hst3\"] = np.where(st_trend_plot_df['major_ST3_Trend'] == -1, plot_df['major_ST3_Down'], np.nan)\n","\n","\n","  #       replace st values with np.nan, using st trend     #\n","  plot_df['minor_ST1_Up'] = np.where(st_trend_plot_df['minor_ST1_Trend'] == 1, np.nan, plot_df['minor_ST1_Up'])\n","  plot_df['minor_ST2_Up'] = np.where(st_trend_plot_df['minor_ST2_Trend'] == 1, np.nan, plot_df['minor_ST2_Up'])\n","  plot_df['minor_ST3_Up'] = np.where(st_trend_plot_df['minor_ST3_Trend'] == 1, np.nan, plot_df['minor_ST3_Up'])\n","  plot_df['minor_ST1_Down'] = np.where(st_trend_plot_df['minor_ST1_Trend'] == -1, np.nan, plot_df['minor_ST1_Down'])\n","  plot_df['minor_ST2_Down'] = np.where(st_trend_plot_df['minor_ST2_Trend'] == -1, np.nan, plot_df['minor_ST2_Down'])\n","  plot_df['minor_ST3_Down'] = np.where(st_trend_plot_df['minor_ST3_Trend'] == -1, np.nan, plot_df['minor_ST3_Down'])\n","\n","  plot_df['major_ST1_Up'] = np.where(st_trend_plot_df['major_ST1_Trend'] == 1, np.nan, plot_df['major_ST1_Up'])\n","  plot_df['major_ST2_Up'] = np.where(st_trend_plot_df['major_ST2_Trend'] == 1, np.nan, plot_df['major_ST2_Up'])\n","  plot_df['major_ST3_Up'] = np.where(st_trend_plot_df['major_ST3_Trend'] == 1, np.nan, plot_df['major_ST3_Up'])\n","  plot_df['major_ST1_Down'] = np.where(st_trend_plot_df['major_ST1_Trend'] == -1, np.nan, plot_df['major_ST1_Down'])\n","  plot_df['major_ST2_Down'] = np.where(st_trend_plot_df['major_ST2_Trend'] == -1, np.nan, plot_df['major_ST2_Down'])\n","  plot_df['major_ST3_Down'] = np.where(st_trend_plot_df['major_ST3_Trend'] == -1, np.nan, plot_df['major_ST3_Down'])\n","\n","\n","  plot_short_ep = short_ep.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  plot_long_ep = long_ep.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","\n","  plot_upper_middle = (plot_df['middle_line'] + plot_df['min_upper']) / 2\n","  plot_lower_middle = (plot_df['middle_line'] + plot_df['max_lower']) / 2\n","\n","  plot_short_tp = short_tp.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  plot_long_tp = long_tp.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]  \n","\n","\n","  # fig = trendln.plot_support_resistance(plot_df['close'], accuracy=8, fromwindows=False, numbest=1,  window=30) # requires matplotlib - pip install matplotlib\n","\n","  fig = plt.figure(figsize=(12, 16))\n","  \n","  gs = gridspec.GridSpec(nrows=3, # row Î™á Í∞ú \n","                       ncols=1, # col Î™á Í∞ú \n","                       height_ratios=[3, 1, 1]\n","                      )\n","  \n","  # fig = plt.figure(figsize=(8, 12))\n","  # ax = fig.add_subplot(111)\n","  # ax = fig.add_subplot(311)\n","  ax = fig.add_subplot(gs[0])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='r', colordown='b')\n","\n","  plt.step(plot_df[['minor_ST1_Up', 'minor_ST2_Up', 'minor_ST3_Up']].values, 'r', alpha=1)  # upper on color\n","  plt.step(plot_df[['minor_ST1_Down', 'minor_ST2_Down', 'minor_ST3_Down']].values, 'b', alpha=1)  # lower on color\n","  \n","  plt.step(plot_df[['major_ST1_Up', 'major_ST2_Up', 'major_ST3_Up']].values, 'r', alpha=1, linewidth=3)  # major upper on color\n","  plt.step(plot_df[['major_ST1_Down', 'major_ST2_Down', 'major_ST3_Down']].values, 'b', alpha=1, linewidth=3)  # major lower on color\n","\n","  plt.step(plot_df[['middle_line']].values, 'fuchsia', alpha=1)  # middle \n","  plt.step(plot_df[['major_middle_line']].values, 'fuchsia', alpha=1, linewidth=3)  # major_middle \n","  \n","  plt.step(plot_df[['off_color_upper_st1', 'off_color_upper_st2', 'off_color_upper_st3']].values, 'r', alpha=1, linestyle=':')  # upper off color\n","  plt.step(plot_df[['off_color_lower_st1', 'off_color_lower_st2', 'off_color_lower_st3']].values, 'b', alpha=1, linestyle=':')  # lower off color\n","  \n","  plt.step(plot_df[['off_color_upper_hst1', 'off_color_upper_hst2', 'off_color_upper_hst3']].values, 'r', alpha=1, linestyle=':', linewidth=3)  # major upper off color\n","  plt.step(plot_df[['off_color_lower_hst1', 'off_color_lower_hst2', 'off_color_lower_hst3']].values, 'b', alpha=1, linestyle=':', linewidth=3)  # major lower off color\n","\n","\n","  # plt.step(np.arange(len(plot_df)), plot_short_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","  # plt.step(np.arange(len(plot_df)),plot_long_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","\n","  plt.step(np.arange(len(plot_df)), plot_upper_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","  plt.step(np.arange(len(plot_df)), plot_lower_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","\n","  plt.step(plot_df[['major_upper_middle']].values, 'g', linestyle='--', alpha=1, linewidth=3)  # major_middle \n","  plt.step(plot_df[['major_lower_middle']].values, 'g', linestyle='--', alpha=1, linewidth=3)  # major_middle \n","  \n","\n","  # plt.step(np.arange(len(plot_df)), plot_short_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","  # plt.step(np.arange(len(plot_df)), plot_long_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","\n","\n","\n","  # ---------------------- on price indicator part ---------------------- #\n","\n","  # ---------------------- sma ---------------------- #\n","  # alpha = 1\n","  # for sm_i, sma in enumerate(ma_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[sma].values, alpha=alpha, color='black', linewidth=lw)\n","  #   alpha -= 0.2\n","  \n","  #               sar               #\n","  alpha = 1\n","  markersize = 5\n","  for sar in sar_list:\n","    plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","    markersize += 1\n","    alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  alpha = 0.7\n","  for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","                      where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","                      where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","    alpha -= 0.05\n","  \n","  # ------------------------------------------------------------- #\n","\n","\n","  #       ep & tp     #\n","  # if i != initial_i:\n","  # if len(ep_idx_list_) > 1:\n","  \n","  # ------------- initial order ------------- #\n","  plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  for ep_i in range(len(ep_idx_list_)):\n","    plt.axvline(prev_plotsize + (ep_idx_list_[ep_i] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","\n","  # plt.axvline(prev_plotsize, alpha=0.5, linestyle='--')\n","  plt.axhline(ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='lime')  # ep line axhline\n","\n","  for sub_i in range(len(ep_tp_list[t_i][1])):\n","    plt.axhline(ep_tp_list[t_i][1][sub_i], linestyle='-', xmin=0.75 + 0.05 * (sub_i + 1) , xmax=1, linewidth=3, color='lime')  # tp line axhline\n","    # plt.axhline(ep_tp_list[t_i][1], linestyle='-', xmin=0.9, xmax=1, linewidth=3)  # tp line axhline  \n","    plt.axvline(prev_plotsize + (tp_idx_list_[sub_i] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","\n","\n","  #         hedge ep & tp         #\n","  h_i = h_trade_list[t_i][1]\n","  if h_i is not None:\n","    plt.axvline(prev_plotsize + (h_i - ep_idx_list_[0]), linestyle='--')\n","    plt.axhline(h_ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='magenta')  # ep line axhline\n","    plt.axhline(h_ep_tp_list[t_i][1], linestyle='-', xmin=0.85, xmax=1, linewidth=3, color='magenta')  # tp line axhline\n","\n","  \n","  #         check pr        #\n","  if not static_lvrg:\n","    plt.title(\"%s ~ %s -> %.5f\\n %s\\n h_pr : %.5f\\nlvrg : %s\\ntp_ratio : %.2f\" % (ep_idx_list_[0], tp_idx_list_[-1], plot_pr_list[t_i], tp_state_list[t_i], h_plot_pr_list[t_i], lvrg_list[t_i], tp_ratio_list[t_i]))\n","  else:\n","    plt.title(\"%s ~ %s -> %.5f\\n %s\\n h_pr : %.5f\\ntp_ratio : %.2f\" % (ep_idx_list_[0], tp_idx_list_[-1], plot_pr_list[t_i], tp_state_list[t_i], h_plot_pr_list[t_i], tp_ratio_list[t_i]))\n","\n","  print(\"short real pr :\", (ep_tp_list[t_i][0] / ep_tp_list[t_i][1][sub_i] - fee - 1) * lvrg + 1)\n","  print(\"long real pr :\", (ep_tp_list[t_i][1][sub_i] / ep_tp_list[t_i][0] - fee - 1) * lvrg + 1)\n","\n","  #           y lim         #\n","  plt.ylim(y_min, y_max)\n","\n","\n","  # ---------------------- outer price indi. ---------------------- #\n","  #           macd          #\n","  # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","    \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for stoch in stoch_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[stoch].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(stoch_upper, linestyle='--')\n","  # plt.axhline(stoch_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- cctbbo ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for cctbbo in cctbbo_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cctbbo].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(cctbbo_upper, linestyle='--')\n","  # plt.axhline(cctbbo_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- ema_roc ---------- #  \n","  plt.subplot(gs[1])\n","  alpha = 1\n","  for emaroc in emaroc_list:\n","    plt.step(np.arange(len(plot_df)), plot_df[emaroc].values, 'g', alpha=alpha)\n","    # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","    alpha -= 0.2\n","  plt.axvline(prev_plotsize, linestyle='--')\n","  plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","  plt.axhline(0, linestyle='--')\n","\n","\n","\n","\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  if not save_plot:\n","    plt.show()\n","  \n","  else:\n","    # ---------- save mode ---------- #\n","    fig_name = plot_check_dir +  \"/%s.png\" % t_i\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","\n","  \n","  plt.close()\n","  print()\n","\n","  # break\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KGuJu2j4Aby9"},"outputs":[],"source":["# print()\n","for item in os.listdir(current_path + \"plot_check/\"):\n","  if item.endswith('png'):\n","    os.remove(current_path + \"plot_check/\" + item)\n","    print(current_path + \"plot_check/\" + item, \"removed !\")"]},{"cell_type":"markdown","metadata":{"id":"cj9X6S1jJjER"},"source":["### plot nontp case"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Gb1jGrS4Jl8A"},"outputs":[],"source":["prev_plotsize = 50\n","\n","# inversion = True\n","inversion = False\n","\n","# hedge = True\n","# hedge = False\n","\n","short_ver = False\n","\n","\n","if inversion:  \n","\n","    plot_pr_list = rev_np_pr\n","    h_plot_pr_list = h_rev_np_pr  # hedge\n","\n","else:\n","\n","    plot_pr_list = np_pr\n","    h_plot_pr_list = h_np_pr\n","\n","\n","\n","#         select plot columns       #\n","# basic_cols = [0, 1, 2, 3, 5, 6, 8, 9, 11, 12, 14] # you don't need to touch\n","\n","# sar_cols = [15, 18] # 15 ~ 19\n","# ichimoku_cols = [20, 21]  # 20 ~ 29\n","# # ichimoku_cols = [22, 23]  # 20 ~ 29\n","# ichimoku_cols2 = [22, 23]  # 20 ~ 29\n","# macd_cols = [30]  # 30 ~ 34\n","\n","# print(res_df.columns[basic_cols])\n","# break\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower']\n","# senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","# senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","\n","#     -------------- under price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher']\n","cctbbo_list = ['cctbbo']\n","\n","\n","#       \n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols + ichimoku_cols2\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + trix_list\n","input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + stoch_list + fisher_list + cctbbo_list\n","price_colname = basic_list + senkoua_list + senkoub_list + sar_list \n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols\n","\n","\n","if short_ver:\n","  nontp_indexs = nontp_short_indexs\n","  nontp_liqd_list = nontp_short_liqd_list\n","  nontp_pr_list = nontp_short_pr_list\n","  nontp_ep = nontp_short_ep_list\n","else:\n","  nontp_indexs = nontp_long_indexs\n","  nontp_liqd_list = nontp_long_liqd_list\n","  nontp_pr_list = nontp_long_pr_list\n","  nontp_ep = nontp_long_ep_list\n","\n","\n","for t_i, i in enumerate(nontp_indexs):\n","\n","  j = len(res_df) - 1\n","\n","  # print(i, j)\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","\n","  # if i <= 4860:\n","  # if i == 1536:\n","  # # if 1800 < i < 1860:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  # if tp_state_list[t_i] != 'd-open':\n","  #   continue\n","\n","  # if (entry[i] == -1) and res_df['close'].iloc[i - 1] > upper_ep.iloc[i]:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  # if plot_pr_list[t_i] > 0.5:\n","  # if plot_pr_list[t_i] > 1.0:\n","  # # if plot_pr_list[t_i] < 1.0:\n","  #   continue\n","\n","  # plot_df = res_df.iloc[i - prev_plotsize:j + 1, input_cols]\n","  plot_df = res_df.iloc[i - prev_plotsize:j + 1][input_colname]\n","\n","\n","  #       keep off-color st with another variable         #\n","  st_trend_plot_df = res_df.iloc[i - prev_plotsize:j + 1, [7, 10, 13]]\n","\n","  # y_max = np.max(plot_df.iloc[:, [4, 6, 8]])\n","  # y_min = np.min(plot_df.iloc[:, [5, 7, 9]])\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  \n","  # y_max = max(np.max(plot_df.iloc[:, [4, 6, 8]]))\n","  # y_min = min(np.min(plot_df.iloc[:, [5, 7, 9]]))\n","  \n","  y_max = max(np.max(plot_df[price_colname]))\n","  y_min = min(np.min(plot_df[price_colname]))\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","\n","  plot_df[\"off_color_upper_st1\"] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, plot_df.iloc[:, [4]], np.nan)\n","  plot_df[\"off_color_upper_st2\"] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, plot_df.iloc[:, [6]], np.nan)\n","  plot_df[\"off_color_upper_st3\"] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, plot_df.iloc[:, [8]], np.nan)\n","  plot_df[\"off_color_lower_st1\"] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, plot_df.iloc[:, [5]], np.nan)\n","  plot_df[\"off_color_lower_st2\"] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, plot_df.iloc[:, [7]], np.nan)\n","  plot_df[\"off_color_lower_st3\"] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, plot_df.iloc[:, [9]], np.nan)\n","\n","\n","  #       replace st values with np.nan, using st trend     #\n","  plot_df.iloc[:, [4]] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, np.nan, plot_df.iloc[:, [4]])\n","  plot_df.iloc[:, [6]] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, np.nan, plot_df.iloc[:, [6]])\n","  plot_df.iloc[:, [8]] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, np.nan, plot_df.iloc[:, [8]])\n","  plot_df.iloc[:, [5]] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, np.nan, plot_df.iloc[:, [5]])\n","  plot_df.iloc[:, [7]] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, np.nan, plot_df.iloc[:, [7]])\n","  plot_df.iloc[:, [9]] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, np.nan, plot_df.iloc[:, [9]])\n","\n","\n","  plot_upper_ep = upper_ep.iloc[i - prev_plotsize:j + 1]\n","  plot_lower_ep = lower_ep.iloc[i - prev_plotsize:j + 1]\n","\n","  plot_upper_middle = (plot_df['middle_line'] + plot_df['min_upper']) / 2\n","  plot_lower_middle = (plot_df['middle_line'] + plot_df['max_lower']) / 2\n","\n","  plot_short_tp = short_tp.iloc[i - prev_plotsize:j + 1]\n","  plot_long_tp = long_tp.iloc[i - prev_plotsize:j + 1]  \n","\n","\n","\n","  # fig = plt.figure(figsize=(12, 16))\n","  fig = plt.figure(figsize=(12, 16))\n","  \n","  gs = gridspec.GridSpec(nrows=3, # row Î™á Í∞ú \n","                       ncols=1, # col Î™á Í∞ú \n","                       height_ratios=[3, 1, 1]\n","                      )\n","  \n","  # fig = plt.figure(figsize=(8, 12))\n","  # ax = fig.add_subplot(111)\n","  # ax = fig.add_subplot(311)\n","  ax = fig.add_subplot(gs[0])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='r', colordown='b')\n","\n","  # print(plot_df.values[:, 4:])\n","  plt.step(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper on color\n","  # plt.plot(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper on color\n","  plt.step(plot_df.values[:, [5, 7, 9]], 'b', alpha=1)  # lower on color\n","  plt.step(plot_df.values[:, [10]], 'fuchsia', alpha=1)  # middle\n","  \n","  plt.step(plot_df.values[:, -6:-3], 'r', alpha=1, linestyle=':')  # upper off color\n","  plt.step(plot_df.values[:, -3:], 'b', alpha=1, linestyle=':')  # lower off color\n","\n","\n","\n","  # plt.step(np.arange(len(plot_df)), plot_upper_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","  # plt.step(np.arange(len(plot_df)),plot_lower_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","\n","  plt.step(np.arange(len(plot_df)), plot_upper_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","  plt.step(np.arange(len(plot_df)), plot_lower_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","\n","  # plt.step(np.arange(len(plot_df)), plot_short_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","  # plt.step(np.arange(len(plot_df)), plot_long_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","\n","\n","\n","  # ---------------------- indicator part ---------------------- #\n","  \n","  #               sar               #\n","  alpha = 1\n","  markersize = 5\n","  for sar in sar_list:\n","    plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","    markersize += 1\n","    alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  alpha = 0.7\n","  for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","                      where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","                      where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","    alpha -= 0.05\n","  \n","  # ------------------------------------------------------------- #\n","\n","\n","  #       ep & tp     #\n","  if i != initial_i:\n","    plt.axvline(prev_plotsize - (i - initial_i), alpha=0.5, linestyle='--')\n","  plt.axvline(prev_plotsize, alpha=0.5, linestyle='--')\n","  plt.axhline(nontp_ep[t_i], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='lime')  # ep line axhline\n","\n","  # for sub_i in range(len(ep_tp_list[t_i][1])):\n","  #   plt.axhline(ep_tp_list[t_i][1][sub_i], linestyle='-', xmin=0.75 + 0.05 * (sub_i + 1) , xmax=1, linewidth=3, color='lime')  # tp line axhline\n","    # plt.axhline(ep_tp_list[t_i][1], linestyle='-', xmin=0.9, xmax=1, linewidth=3)  # tp line axhline    \n","\n","  #         hedge ep & tp         #\n","  # h_i = h_trade_list[t_i][1]\n","  # if h_i is not None:\n","  #   plt.axvline(prev_plotsize + (h_i - i), linestyle='--')\n","  #   plt.axhline(h_ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='magenta')  # ep line axhline\n","  #   plt.axhline(h_ep_tp_list[t_i][1], linestyle='-', xmin=0.85, xmax=1, linewidth=3, color='magenta')  # tp line axhline\n","\n","  \n","  #         check pr        #\n","  plt.title(\"%s ~ %s -> liqd : %.2f\\npr : %.2f\" % (i, j, nontp_liqd_list[t_i], nontp_pr_list[t_i]))\n","\n","  #           y lim         #\n","  plt.ylim(y_min, y_max)\n","\n","\n","  # #           macd          #\n","  # # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # plt.subplot(313)\n","  plt.subplot(gs[1])\n","  alpha = 1\n","  for stoch in stoch_list:\n","    plt.step(np.arange(len(plot_df)), plot_df[stoch].values, 'g', alpha=alpha)\n","    # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","    alpha -= 0.2\n","  plt.axvline(prev_plotsize, linestyle='--')\n","  plt.axhline(50, linestyle='--')\n","  plt.axhline(stoch_upper, linestyle='--')\n","  plt.axhline(stoch_lower, linestyle='--')\n","\n","\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  plt.show()\n","  # plt.draw()\n","  plt.close()\n","  print()\n","\n","  # break\n"]},{"cell_type":"markdown","metadata":{"id":"-g7YY5BvMcLS"},"source":["### show detail values"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":255,"status":"ok","timestamp":1625228960601,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"id":"5TxQ3rDnKMa7","outputId":"422ac214-8c88-4f39-ec3a-7c823574f6da"},"outputs":[{"name":"stdout","output_type":"stream","text":["upper_ep.iloc[i] : 2348.266954813089\n","short_tp.iloc[j] : 2205.609333246829\n"]}],"source":["i, j = 27267, 27268\n","print(\"upper_ep.iloc[i] :\", upper_ep.iloc[i])\n","print(\"short_tp.iloc[j] :\", short_tp.iloc[j])"]},{"cell_type":"markdown","metadata":{"id":"7AIl6EBuZNOL"},"source":["## none plot off-color st"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yaVxrNGzZgrF"},"outputs":[],"source":["prev_plotsize = 50\n","\n","for t_i, (i, j) in enumerate(trade_list):\n","  # print(i, j)\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","\n","  # if pr_list[t_i] >= 1:\n","  #   continue\n","\n","  plot_df = res_df.iloc[i - prev_plotsize:j + 1, [0, 1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 16]]\n","\n","  #       replace st values with np.nan, using st trend     #\n","  st_trend_plot_df = res_df.iloc[i - prev_plotsize:j + 1, [7, 10, 13]]\n","  plot_df.iloc[:, [4]] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, np.nan, plot_df.iloc[:, [4]])\n","  plot_df.iloc[:, [6]] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, np.nan, plot_df.iloc[:, [6]])\n","  plot_df.iloc[:, [8]] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, np.nan, plot_df.iloc[:, [8]])\n","  plot_df.iloc[:, [5]] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, np.nan, plot_df.iloc[:, [5]])\n","  plot_df.iloc[:, [7]] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, np.nan, plot_df.iloc[:, [7]])\n","  plot_df.iloc[:, [9]] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, np.nan, plot_df.iloc[:, [9]])\n","\n","\n","  plot_upper_ep = upper_ep.iloc[i - prev_plotsize:j + 1]\n","  plot_lower_ep = lower_ep.iloc[i - prev_plotsize:j + 1]\n","\n","  fig = plt.figure(figsize=(8, 6))\n","  ax = fig.add_subplot(111)\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='r', colordown='b')\n","\n","  # print(plot_df.values[:, 4:])\n","  plt.plot(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper\n","  plt.plot(plot_df.values[:, [5, 7, 9]], 'b', alpha=1)  # lower\n","  plt.plot(plot_df.values[:, [10]], 'g', alpha=1)  # middle\n","\n","  plt.plot(plot_df.values[:, [11]], 'c*', alpha=1, markersize=5)  # sar mic\n","  plt.plot(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  plt.plot(plot_upper_ep.values, alpha=1, linestyle='--')  # ep\n","  plt.plot(plot_lower_ep.values, alpha=1, linestyle='--')  # ep\n","\n","  plt.axvline(prev_plotsize, linestyle='--')\n","\n","  plt.title(\"%s ~ %s -> %.5f\" % (i, j, pr_list[t_i]))\n","  plt.show()\n","  # plt.draw()\n","  plt.close()"]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":["M8-EChy0VsDr","Iy76iO7gztne","Ic1mfmwWCIBu","Ci_jUnNTZbm9","t1E_eAyPSuzm","JjKHyqftzhD7","dzla8i9_ysmP","GZ0y_x9ugOUD","v2Gjv019AEz8","rrIGjmUzqU-D","o-XjNS1L31YB","FxJ1y8v2fkCR"],"name":"AT_multi_v3n5_2_backi2(1216_limit_lvrgset).ipynb","toc_visible":true,"provenance":[],"authorship_tag":"ABX9TyPlWNdHTSsZg5Zoc9UpxmRg"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}