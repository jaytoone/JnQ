{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"AT_v1_backi2(1108_limit_significance).ipynb의 사본","provenance":[{"file_id":"1z4z_KLPzc6RWsxo3X_dHbpByxUAgjoMJ","timestamp":1583754134002}],"collapsed_sections":["Iy76iO7gztne","Ic1mfmwWCIBu","Ci_jUnNTZbm9","EiXxraeZCj0c","ZnrBE3etCpIA","u6HJnX16i36D","aAzRBq67tBno","QtiavGJOi8NV","NYqoJuPowqHq","9Lbr-ZsJjzIT","XHtKmKvEj2TU","qkzeUFAyeJXK","ShvMpmWtC_Uv","yvrNFdxrnVjt","JcKfLZ7QnYcK","FaRGwR4NEop2","2gxvme1PC6ha","5la6usMOFzkX","OJqkmkpsLCYC","-IbP_Z3Dlwk4","FxJ1y8v2fkCR","VBwVaUkvfnOd","cj9X6S1jJjER","-g7YY5BvMcLS","7AIl6EBuZNOL"],"toc_visible":true,"machine_shape":"hm"},"kernelspec":{"display_name":"Python [conda env:tensorflow2_p36]","language":"python","name":"conda-env-tensorflow2_p36-py"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.5"}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AK9FjWwLOyay","executionInfo":{"status":"ok","timestamp":1637651997351,"user_tz":-540,"elapsed":37307,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"ae6a4628-f1c0-402f-baec-c660272b8e03"},"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","import os, sys\n","\n","current_path = '/content/drive/My Drive/Colab Notebooks/JnQ/'\n","\n","os.chdir(current_path)"],"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"markdown","metadata":{"id":"8uqYv5StTazo"},"source":["# requirements"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9qGt60DKTZmf","executionInfo":{"status":"ok","timestamp":1637652009255,"user_tz":-540,"elapsed":11908,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"3168659b-87b3-42af-af9e-141cf27879f1"},"source":["!pip install mpl_finance\n","# !pip install findiff\n","\n","import matplotlib.pyplot as plt\n","from matplotlib import gridspec\n","from tqdm.notebook import tqdm\n","from funcs_indicator import *\n","from funcs_for_trade import *\n","\n","import mpl_finance as mf\n","import os\n","import datetime\n","\n","import IPython\n","import IPython.display\n","import matplotlib as mpl\n","\n","import numpy as np\n","import pandas as pd\n","import seaborn as sns\n","# import tensorflow as tf\n","\n","import pickle\n","import shutil\n","# import json\n","from easydict import EasyDict\n","\n","# from trendln import trendln\n","\n","from datetime import datetime\n","import random\n","\n","mpl.rcParams['figure.figsize'] = (8, 6)\n","mpl.rcParams['axes.grid'] = False"],"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting mpl_finance\n","  Downloading mpl_finance-0.10.1-py3-none-any.whl (8.4 kB)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.7/dist-packages (from mpl_finance) (3.2.2)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib->mpl_finance) (0.11.0)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->mpl_finance) (3.0.6)\n","Requirement already satisfied: numpy>=1.11 in /usr/local/lib/python3.7/dist-packages (from matplotlib->mpl_finance) (1.19.5)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->mpl_finance) (1.3.2)\n","Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->mpl_finance) (2.8.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.1->matplotlib->mpl_finance) (1.15.0)\n","Installing collected packages: mpl-finance\n","Successfully installed mpl-finance-0.10.1\n"]}]},{"cell_type":"markdown","metadata":{"id":"Iy76iO7gztne"},"source":["## move legacy files"]},{"cell_type":"code","metadata":{"id":"hMRht32Czwry"},"source":["# print()\n","cur_dir_list = os.listdir('.')\n","for f in cur_dir_list:\n","  if 'legacy' in f :\n","    # print(f)\n","    if os.path.isdir(current_path + f,):\n","      continue\n","\n","    shutil.move(current_path + f, current_path + 'legacy/' + f)\n","    print(\"moved to\" + current_path + 'legacy/' +  f)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Ic1mfmwWCIBu"},"source":["# makeset"]},{"cell_type":"markdown","metadata":{"id":"Ci_jUnNTZbm9"},"source":["## load data"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_bXyS2yrZYC6","executionInfo":{"status":"ok","timestamp":1636247696356,"user_tz":-540,"elapsed":21309,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"b808cd4d-3bfa-45d8-b9b6-165671ae1f04"},"source":["interval = '1m'\n","date_path = './candlestick_concated/%s/quant_v2/' % interval\n","file_list = os.listdir(date_path)\n","print((file_list))\n","\n","interval2 = '3m'\n","date_path2 = './candlestick_concated/%s/quant_v2/' % interval2\n","file_list2 = os.listdir(date_path2)\n","print((file_list2))\n","\n","interval3 = '5m'\n","date_path3 = './candlestick_concated/%s/quant_v2/' % interval3\n","file_list3 = os.listdir(date_path3)\n","print((file_list3))\n","\n","interval4 = '15m'\n","date_path4 = './candlestick_concated/%s/quant_v2/' % interval4\n","file_list4 = os.listdir(date_path4)\n","print((file_list4))\n","\n","interval5 = '30m'\n","date_path5 = './candlestick_concated/%s/quant_v2/' % interval5\n","file_list5 = os.listdir(date_path5)\n","print((file_list5))\n","\n","interval6 = '1h'\n","date_path6 = './candlestick_concated/%s/quant_v2/' % interval6\n","file_list6 = os.listdir(date_path6)\n","print((file_list6))\n","\n","interval7 = '4h'\n","date_path7 = './candlestick_concated/%s/quant_v2/' % interval7\n","file_list7 = os.listdir(date_path7)\n","print((file_list7))\n","\n","interval8 = '1d'\n","date_path8 = './candlestick_concated/%s/quant_v2/' % interval8\n","file_list8 = os.listdir(date_path8)\n","print((file_list8))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr']\n","['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr']\n","['2021-05-30 ETHUSDT.xlsx', '2021-04-30 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr']\n","['2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr']\n","['2021-07-03 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-08-31 SUSHIUSDT.xlsx', '2021-08-31 CVCUSDT.xlsx', '2021-08-31 BTSUSDT.xlsx', '2021-08-31 HOTUSDT.xlsx', '2021-08-31 ZRXUSDT.xlsx', '2021-08-31 QTUMUSDT.xlsx', '2021-08-31 IOTAUSDT.xlsx', '2021-08-31 BTCBUSD.xlsx', '2021-08-31 WAVESUSDT.xlsx', '2021-08-31 ADAUSDT.xlsx', '2021-08-31 LITUSDT.xlsx', '2021-08-31 XTZUSDT.xlsx', '2021-08-31 BNBUSDT.xlsx', '2021-08-31 AKROUSDT.xlsx', '2021-08-31 HNTUSDT.xlsx', '2021-08-31 ETCUSDT.xlsx', '2021-08-31 XMRUSDT.xlsx', '2021-08-31 YFIUSDT.xlsx', '2021-08-31 ETHUSDT.xlsx', '2021-08-31 ALICEUSDT.xlsx', '2021-08-31 ALPHAUSDT.xlsx', '2021-08-31 SFPUSDT.xlsx', '2021-08-31 REEFUSDT.xlsx', '2021-08-31 BATUSDT.xlsx', '2021-08-31 DOGEUSDT.xlsx', '2021-08-31 TRXUSDT.xlsx', '2021-08-31 RLCUSDT.xlsx', '2021-08-31 BTCSTUSDT.xlsx', '2021-08-31 STORJUSDT.xlsx', '2021-08-31 SNXUSDT.xlsx', '2021-08-31 XLMUSDT.xlsx', '2021-08-31 NEOUSDT.xlsx', '2021-08-31 UNFIUSDT.xlsx', '2021-08-31 SANDUSDT.xlsx', '2021-08-31 DASHUSDT.xlsx', '2021-08-31 KAVAUSDT.xlsx', '2021-08-31 RUNEUSDT.xlsx', '2021-08-31 CTKUSDT.xlsx', '2021-08-31 LINKUSDT.xlsx', '2021-08-31 CELRUSDT.xlsx', '2021-08-31 RSRUSDT.xlsx', '2021-08-31 DGBUSDT.xlsx', '2021-08-31 SKLUSDT.xlsx', '2021-08-31 RENUSDT.xlsx', '2021-08-31 TOMOUSDT.xlsx', '2021-08-31 MTLUSDT.xlsx', '2021-08-31 LTCUSDT.xlsx', '2021-08-31 DODOUSDT.xlsx', '2021-08-31 EGLDUSDT.xlsx', '2021-08-31 KSMUSDT.xlsx', '2021-08-31 ONTUSDT.xlsx', '2021-08-31 VETUSDT.xlsx', '2021-08-31 TRBUSDT.xlsx', '2021-08-31 MANAUSDT.xlsx', '2021-08-31 COTIUSDT.xlsx', '2021-08-31 CHRUSDT.xlsx', '2021-08-31 ETHUSDT_210924.xlsx', '2021-08-31 BAKEUSDT.xlsx', '2021-08-31 GRTUSDT.xlsx', '2021-08-31 FLMUSDT.xlsx', '2021-08-31 EOSUSDT.xlsx', '2021-08-31 OGNUSDT.xlsx', '2021-08-31 SCUSDT.xlsx', '2021-08-31 BALUSDT.xlsx', '2021-08-31 STMXUSDT.xlsx', '2021-08-31 BTTUSDT.xlsx', '2021-08-31 LUNAUSDT.xlsx', '2021-08-31 DENTUSDT.xlsx', '2021-08-31 KNCUSDT.xlsx', '2021-08-31 SRMUSDT.xlsx', '2021-08-31 ENJUSDT.xlsx', '2021-08-31 ZENUSDT.xlsx', '2021-08-31 ATOMUSDT.xlsx', '2021-08-31 NEARUSDT.xlsx', '2021-08-31 BCHUSDT.xlsx', '2021-08-31 IOSTUSDT.xlsx', '2021-08-31 HBARUSDT.xlsx', '2021-08-31 ZECUSDT.xlsx', '2021-08-31 1000SHIBUSDT.xlsx', '2021-08-31 TLMUSDT.xlsx', '2021-08-31 BZRXUSDT.xlsx', '2021-08-31 ETHBUSD.xlsx', '2021-08-31 AAVEUSDT.xlsx', '2021-08-31 GTCUSDT.xlsx', '2021-08-31 ALGOUSDT.xlsx', '2021-08-31 ICPUSDT.xlsx', '2021-08-31 BTCUSDT_210924.xlsx', '2021-08-31 LRCUSDT.xlsx', '2021-08-31 AVAXUSDT.xlsx', '2021-08-31 MATICUSDT.xlsx', '2021-08-31 1INCHUSDT.xlsx', '2021-08-31 MKRUSDT.xlsx', '2021-08-31 THETAUSDT.xlsx', '2021-08-31 UNIUSDT.xlsx', '2021-08-31 LINAUSDT.xlsx', '2021-08-31 RVNUSDT.xlsx', '2021-08-31 FILUSDT.xlsx', '2021-08-31 NKNUSDT.xlsx', '2021-08-31 DEFIUSDT.xlsx', '2021-08-31 COMPUSDT.xlsx', '2021-08-31 BTCDOMUSDT.xlsx', '2021-08-31 SOLUSDT.xlsx', '2021-08-31 BTCUSDT.xlsx', '2021-08-31 OMGUSDT.xlsx', '2021-08-31 ICXUSDT.xlsx', '2021-08-31 BLZUSDT.xlsx', '2021-08-31 FTMUSDT.xlsx', '2021-08-31 YFIIUSDT.xlsx', '2021-08-31 KEEPUSDT.xlsx', '2021-08-31 BANDUSDT.xlsx', '2021-08-31 XRPUSDT.xlsx', '2021-08-31 SXPUSDT.xlsx', '2021-08-31 CRVUSDT.xlsx', '2021-08-31 BELUSDT.xlsx', '2021-08-31 DOTUSDT.xlsx', '2021-08-31 XEMUSDT.xlsx', '2021-08-31 ONEUSDT.xlsx', '2021-08-31 ZILUSDT.xlsx', '2021-08-31 AXSUSDT.xlsx', '2021-08-31 OCEANUSDT.xlsx', '2021-08-31 CHZUSDT.xlsx', '2021-08-31 ANKRUSDT.xlsx', '2021-08-31 SUSHIUSDT_res_dfs.pkl', '2021-07-01 ADAUSDT.xlsx', '2021-10-10 ETCUSDT.xlsx', '2021-10-10 BTCUSDT.xlsx', '2021-10-10 ETHUSDT.xlsx', '2021-10-10 ADAUSDT.xlsx', '2021-10-10 XLMUSDT.xlsx', '2021-10-10 LINKUSDT.xlsx', '2021-10-10 LTCUSDT.xlsx', '2021-10-10 EOSUSDT.xlsx', '2021-10-10 XRPUSDT.xlsx', '2021-10-10 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr']\n","['2021-07-01 BTCUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr']\n","['2021-02-07 BTC.xlsx', '2021-02-07 ETH.xlsx', '2021-02-11 BCHUSDT.xlsx', '2021-02-11 XRPUSDT.xlsx', '2021-02-11 EOSUSDT.xlsx', '2021-02-11 LTCUSDT.xlsx', '2021-02-11 ETCUSDT.xlsx', '2021-02-11 LINKUSDT.xlsx', '2021-02-11 XLMUSDT.xlsx', '2021-02-11 ADAUSDT.xlsx', '2021-02-11 XMRUSDT.xlsx', '2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx', '2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr']\n","['2021-06-30 SUSHIUSDT.xlsx', '2021-06-30 CVCUSDT.xlsx', '2021-06-30 BTSUSDT.xlsx', '2021-06-30 HOTUSDT.xlsx', '2021-06-30 ZRXUSDT.xlsx', '2021-06-30 QTUMUSDT.xlsx', '2021-06-30 IOTAUSDT.xlsx', '2021-06-30 BTCBUSD.xlsx', '2021-06-30 WAVESUSDT.xlsx', '2021-06-30 ADAUSDT.xlsx', '2021-06-30 LITUSDT.xlsx', '2021-06-30 XTZUSDT.xlsx', '2021-06-30 BNBUSDT.xlsx', '2021-06-30 AKROUSDT.xlsx', '2021-06-30 HNTUSDT.xlsx', '2021-06-30 ETCUSDT.xlsx', '2021-06-30 XMRUSDT.xlsx', '2021-06-30 YFIUSDT.xlsx', '2021-06-30 ETHUSDT.xlsx', '2021-06-30 ALICEUSDT.xlsx', '2021-06-30 ALPHAUSDT.xlsx', '2021-06-30 SFPUSDT.xlsx', '2021-06-30 REEFUSDT.xlsx', '2021-06-30 BATUSDT.xlsx', '2021-06-30 DOGEUSDT.xlsx', '2021-06-30 TRXUSDT.xlsx', '2021-06-30 RLCUSDT.xlsx', '2021-06-30 BTCSTUSDT.xlsx', '2021-06-30 STORJUSDT.xlsx', '2021-06-30 SNXUSDT.xlsx', '2021-06-30 XLMUSDT.xlsx', '2021-06-30 NEOUSDT.xlsx', '2021-06-30 UNFIUSDT.xlsx', '2021-06-30 SANDUSDT.xlsx', '2021-06-30 DASHUSDT.xlsx', '2021-06-30 KAVAUSDT.xlsx', '2021-06-30 RUNEUSDT.xlsx', '2021-06-30 CTKUSDT.xlsx', '2021-06-30 LINKUSDT.xlsx', '2021-06-30 CELRUSDT.xlsx', '2021-06-30 DGBUSDT.xlsx', '2021-06-30 SKLUSDT.xlsx', '2021-06-30 RENUSDT.xlsx', '2021-06-30 TOMOUSDT.xlsx', '2021-06-30 MTLUSDT.xlsx', '2021-06-30 LTCUSDT.xlsx', '2021-06-30 DODOUSDT.xlsx', '2021-06-30 EGLDUSDT.xlsx', '2021-06-30 KSMUSDT.xlsx', '2021-06-30 ONTUSDT.xlsx', '2021-06-30 VETUSDT.xlsx', '2021-06-30 TRBUSDT.xlsx', '2021-06-30 MANAUSDT.xlsx', '2021-06-30 COTIUSDT.xlsx', '2021-06-30 CHRUSDT.xlsx', '2021-06-30 ETHUSDT_210924.xlsx', '2021-06-30 BAKEUSDT.xlsx', '2021-06-30 GRTUSDT.xlsx', '2021-06-30 FLMUSDT.xlsx', '2021-06-30 EOSUSDT.xlsx', '2021-06-30 OGNUSDT.xlsx', '2021-06-30 SCUSDT.xlsx', '2021-06-30 BALUSDT.xlsx', '2021-06-30 STMXUSDT.xlsx', '2021-06-30 BTTUSDT.xlsx', '2021-06-30 LUNAUSDT.xlsx', '2021-06-30 DENTUSDT.xlsx', '2021-06-30 KNCUSDT.xlsx', '2021-06-30 SRMUSDT.xlsx', '2021-06-30 ENJUSDT.xlsx', '2021-06-30 ZENUSDT.xlsx', '2021-06-30 ATOMUSDT.xlsx', '2021-06-30 NEARUSDT.xlsx', '2021-06-30 BCHUSDT.xlsx', '2021-06-30 IOSTUSDT.xlsx', '2021-06-30 HBARUSDT.xlsx', '2021-06-30 ZECUSDT.xlsx', '2021-06-30 1000SHIBUSDT.xlsx', '2021-06-30 BZRXUSDT.xlsx', '2021-06-30 ETHBUSD.xlsx', '2021-06-30 AAVEUSDT.xlsx', '2021-06-30 GTCUSDT.xlsx', '2021-06-30 ALGOUSDT.xlsx', '2021-06-30 ICPUSDT.xlsx', '2021-06-30 BTCUSDT_210924.xlsx', '2021-06-30 LRCUSDT.xlsx', '2021-06-30 AVAXUSDT.xlsx', '2021-06-30 MATICUSDT.xlsx', '2021-06-30 1INCHUSDT.xlsx', '2021-06-30 MKRUSDT.xlsx', '2021-06-30 THETAUSDT.xlsx', '2021-06-30 UNIUSDT.xlsx', '2021-06-30 LINAUSDT.xlsx', '2021-06-30 RVNUSDT.xlsx', '2021-06-30 FILUSDT.xlsx', '2021-06-30 NKNUSDT.xlsx', '2021-06-30 DEFIUSDT.xlsx', '2021-06-30 COMPUSDT.xlsx', '2021-06-30 BTCDOMUSDT.xlsx', '2021-06-30 SOLUSDT.xlsx', '2021-06-30 BTCUSDT.xlsx', '2021-06-30 OMGUSDT.xlsx', '2021-06-30 ICXUSDT.xlsx', '2021-06-30 BLZUSDT.xlsx', '2021-06-30 FTMUSDT.xlsx', '2021-06-30 YFIIUSDT.xlsx', '2021-06-30 KEEPUSDT.xlsx', '2021-06-30 BANDUSDT.xlsx', '2021-06-30 XRPUSDT.xlsx', '2021-06-30 SXPUSDT.xlsx', '2021-06-30 CRVUSDT.xlsx', '2021-06-30 BELUSDT.xlsx', '2021-06-30 DOTUSDT.xlsx', '2021-06-30 XEMUSDT.xlsx', '2021-06-30 ONEUSDT.xlsx', '2021-06-30 ZILUSDT.xlsx', '2021-06-30 AXSUSDT.xlsx', '2021-06-30 OCEANUSDT.xlsx', '2021-06-30 CHZUSDT.xlsx', '2021-06-30 ANKRUSDT.xlsx', '2021-06-30 RSRUSDT.xlsx', '2021-08-29 ETHUSDT.xlsx', '2021-07-01 ETCUSDT.xlsx', '2021-07-01 BTCUSDT.xlsx', '2021-07-01 ETHUSDT.xlsx', '2021-07-01 ADAUSDT.xlsx', '2021-07-01 XLMUSDT.xlsx', '2021-07-01 LINKUSDT.xlsx', '2021-07-01 LTCUSDT.xlsx', '2021-07-01 EOSUSDT.xlsx', '2021-07-01 XRPUSDT.xlsx', '2021-07-01 BCHUSDT.xlsx']\n"]}]},{"cell_type":"markdown","metadata":{"id":"EiXxraeZCj0c"},"source":["## basic_func"]},{"cell_type":"code","metadata":{"id":"mi8H188MCiaH"},"source":["def sync_check(df, second_df, third_df, fourth_df, fifth_df, sixth_df=None, seventh_df=None, eighth_df=None):\n","\n","    #           supertrend          #\n","    # df = st_price_line(df, second_df, '3m')\n","    # # print(df.head(100))\n","    # # return\n","\n","    # df = st_price_line(df, third_df, '5m')\n","    # df = st_price_line(df, fourth_df, '15m')\n","    # df = st_price_line(df, fifth_df, '30m')\n","    # df = st_price_line(df, sixth_df, '1h')\n","    # df = st_price_line(df, seventh_df, '4h')\n","\n","    # print(\"supertrend phase done\")\n","\n","    # --------------- dc --------------- #  \n","    df = dc_line(df, None, '1m', dc_period=10)\n","    df = dc_line(df, third_df, '5m', dc_period=10)\n","    df = dc_line(df, fourth_df, '15m', dc_period=10)\n","    df = dc_line(df, fifth_df, '30m', dc_period=10)\n","    df = dc_line(df, sixth_df, '1h', dc_period=10)\n","    df = dc_line(df, seventh_df, '4h', dc_period=10)\n","\n","    print(\"dc phase done\")\n","    \n","    # --------------- bband --------------- #  \n","    # df = bb_line(df, None, '1m')\n","    # df = bb_line(df, third_df, '5m')\n","    # df = bb_line(df, fourth_df, '15m')\n","    # # df = bb_line(df, fifth_df, '30m')\n","    # df = bb_line(df, sixth_df, '1h')\n","    # df = bb_line(df, seventh_df, '4h')\n","\n","    # print(\"bband phase done\")\n","\n","    # --------------- cbline --------------- #    \n","    # second_df['cloud_bline_3m'] = cloud_bline(second_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, second_df, [-1]), columns=['cloud_bline_3m']))\n","    # third_df['cloud_bline_5m'] = cloud_bline(third_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-1]), columns=['cloud_bline_5m']))\n","    # fourth_df['cloud_bline_15m'] = cloud_bline(fourth_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, fourth_df, [-1]), columns=['cloud_bline_15m']))\n","    # fifth_df['cloud_bline_30m'] = cloud_bline(fifth_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, fifth_df, [-1]), columns=['cloud_bline_30m']))\n","    # sixth_df['cloud_bline_1h'] = cloud_bline(sixth_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, sixth_df, [-1]), columns=['cloud_bline_1h']))\n","    # seventh_df['cloud_bline_4h'] = cloud_bline(seventh_df, 26)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, seventh_df, [-1]), columns=['cloud_bline_4h']))\n","\n","    # print(\"cbline phase done\")\n","    \n","    # --------------- mmh & norm st --------------- #    \n","    # df['mmh_st1'] = mmh_st(df, 3)\n","    # df['mmh_st2'] = mmh_st(df, 5)\n","    # df['norm_st_up'], df['norm_st_down'], df['norm_st_trend'] = supertrend(df, 5, 6)\n","\n","    # print(\"mmh & norm st phase done\")\n","\n","\n","    #           lucid sar              #\n","    # df['sar_1m'], df['sar_uptrend_1m'] = lucid_sar(df, return_uptrend=True)\n","\n","    # third_df['sar_5m'], third_df['sar_uptrend_5m'] = lucid_sar(third_df, return_uptrend=True)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-2, -1], backing_i=-1), columns=['sar_5m', 'sar_uptrend_5m']))\n","\n","    # fourth_df['sar_15m'], fourth_df['sar_uptrend_15m'] = lucid_sar(fourth_df, return_uptrend=True)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, fourth_df, [-2, -1], backing_i=-1), columns=['sar_15m', 'sar_uptrend_15m']))\n","\n","    # seventh_df['sar_4h'], seventh_df['sar_uptrend_4h'] = lucid_sar(seventh_df, return_uptrend=True)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, seventh_df, [-2, -1], backing_i=-1), columns=['sar_4h', 'sar_uptrend_4h']))\n","    \n","    # print(\"sar phase done\")\n","\n","    \n","    #           stochastic              #\n","    # df['stoch_1m'] = stoch(df, 13, 3, 3)\n","\n","    # third_df['stoch'] = stoch(third_df, 13, 3, 3)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","    # print(\"stoch phase done\")\n","\n","\n","\n","    \n","    # #           ichimoku            #\n","    # df['senkou_a1'], df['senkou_b1'] = ichimoku(df)\n","    \n","    # second_df['senkou_a'], second_df['senkou_b'] = ichimoku(second_df)\n","    # df = df.join( pd.DataFrame(index=df.index, data=to_lower_tf(df, second_df, [-2, -1]), columns=['senkou_a2', 'senkou_b2']))\n","    \n","    # third_df['senkou_a'], third_df['senkou_b'] = ichimoku(third_df)\n","    # df = df.join( pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-2, -1]), columns=['senkou_a3', 'senkou_b3']))\n","    \n","    # fourth_df['senkou_a'], fourth_df['senkou_b'] = ichimoku(fourth_df)\n","    # df = df.join( pd.DataFrame(index=df.index, data=to_lower_tf(df, fourth_df, [-2, -1]), columns=['senkou_a4', 'senkou_b4']))\n","    \n","    # fifth_df['senkou_a'], fifth_df['senkou_b'] = ichimoku(fifth_df)\n","    # df = df.join( pd.DataFrame(index=df.index, data=to_lower_tf(df, fifth_df, [-2, -1]), columns=['senkou_a5', 'senkou_b5']))\n","\n","    # if sixth_df is not None:\n","    #   sixth_df['senkou_a'], sixth_df['senkou_b'] = ichimoku(sixth_df)\n","    #   df = df.join( pd.DataFrame(index=df.index, data=to_lower_tf(df, sixth_df, [-2, -1]), columns=['senkou_a6', 'senkou_b6']))\n","\n","    # if seventh_df is not None:\n","    #   seventh_df['senkou_a'], seventh_df['senkou_b'] = ichimoku(seventh_df)\n","    #   df = df.join( pd.DataFrame(index=df.index, data=to_lower_tf(df, seventh_df, [-2, -1]), columns=['senkou_a7', 'senkou_b7']))\n","\n","\n","    # #           1-2. displacement           #\n","    # cloud_cnt = 0\n","    # for col_n in df.columns:\n","    #   if 'senkou' in col_n:\n","    #     cloud_cnt += 1\n","    # print(cloud_cnt)\n","\n","    # # df['senkou_a1'] = df['senkou_a1'].shift(26 - 1)\n","    # # df['senkou_b1'] = df['senkou_b1'].shift(26 - 1)\n","    # # # df.iloc[:, -10:] = df.iloc[:, -10:].shift(26 - 1)\n","    # # # df.iloc[:, -14:] = df.iloc[:, -14:].shift(26 - 1)\n","    # df.iloc[:, -cloud_cnt:] = df.iloc[:, -cloud_cnt:].shift(26 - 1)\n","\n","    # print(\"cloud phase done\")\n","\n","    \n","    # #           macd            #\n","    # df['macd_hist1'] = macd(df)\n","    \n","    # second_df['macd_hist'] = macd(second_df)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, second_df, [-1]), columns=['macd_hist2']))\n","\n","    # third_df['macd_hist'] = macd(third_df)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-1]), columns=['macd_hist3']))\n","\n","    # fourth_df['macd_hist'] = macd(fourth_df)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, fourth_df, [-1]), columns=['macd_hist4']))\n","\n","    # fifth_df['macd_hist'] = macd(fifth_df)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, fifth_df, [-1]), columns=['macd_hist5']))\n","    \n","    # if sixth_df is not None:\n","    #   sixth_df['macd_hist'] = macd(sixth_df)\n","    #   df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, sixth_df, [-1]), columns=['macd_hist6']))\n","    \n","    # if seventh_df is not None:\n","    #   seventh_df['macd_hist'] = macd(seventh_df)\n","    #   df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, seventh_df, [-1]), columns=['macd_hist7']))\n","\n","\n","    # print(\"macd phase done\")\n","\n","\n","    # #         trix        #\n","    # df['trix1'] = trix_hist(df, 14, 1, 5)\n","    \n","    # second_df['trix'] = trix_hist(second_df, 14, 1, 5)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, second_df, [-1]), columns=['trix2']))\n","\n","    # third_df['trix'] = trix_hist(third_df, 14, 1, 5)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, third_df, [-1]), columns=['trix3']))\n","\n","    # fourth_df['trix'] = trix_hist(fourth_df, 14, 1, 5)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, fourth_df, [-1]), columns=['trix4']))\n","\n","    # fifth_df['trix'] = trix_hist(fifth_df, 14, 1, 5)\n","    # df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, fifth_df, [-1]), columns=['trix5']))\n","\n","    # if sixth_df is not None:\n","    #   sixth_df['trix'] = trix_hist(sixth_df, 14, 1, 5)\n","    #   df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, sixth_df, [-1]), columns=['trix6']))\n","\n","    # if seventh_df is not None:\n","    #   seventh_df['trix'] = trix_hist(seventh_df, 14, 1, 5)\n","    #   df = df.join(pd.DataFrame(index=df.index, data=to_lower_tf(df, seventh_df, [-1]), columns=['trix7']))\n","  \n","\n","    return df\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ZnrBE3etCpIA"},"source":["## make & save res_df (concat 생각하면, timeindex sync 맞춰야함)"]},{"cell_type":"markdown","metadata":{"id":"u6HJnX16i36D"},"source":["### old (xlsx)"]},{"cell_type":"code","metadata":{"id":"X1g9vGP0UnTT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"error","timestamp":1636201718856,"user_tz":-540,"elapsed":11,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"02bf2c60-f298-4fe9-e6bb-78230ac1348c"},"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  if '2021-07-01'.upper() not in file_list[i]:\n","  # if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    excel_name = key.replace(\".xlsx\", \"_st1h_backi2.xlsx\")\n","    excel_path = save_path + excel_name\n","\n","    if excel_name in exist_list:\n","      print(excel_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m 마지막 timeindex 의 date 기준, 08:59:59.999000 를 last timestamp 로 설정\n","      #      2. 시작 timestamp 는 모든 tf 의 가장 최근 시작 index,\n","      #       a. 1m 의 시작 timeindex 는 최소, htf 의 시작 timeindex 보다 interval 만큼 앞서야함\n","      #         i. 따라서 1m open_index, latest_open_index + 1d 를 하면 댐\n","      #           1. timestamp 으로 변환후 1day 를 더하고 datetime 으로 변환\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","    latest_open_index = sorted(open_indexes)[-1]\n","    \n","    open_ts = datetime.timestamp(latest_open_index)\n","    latest_open_index_1m = datetime.fromtimestamp(open_ts + a_day)\n","\n","    #   str 로 만들어 접근하면 불가함  #\n","    end_index = pd.to_datetime(str(df.index[-1]).split(\" \")[0] + \" 08:59:59.999000\")\n","    # break\n","\n","    sliced_df = df.loc[latest_open_index_1m:end_index] # to_lower_tf 의 기준 ltf\n","    sliced_second_df = second_df.loc[latest_open_index:end_index]\n","    sliced_third_df = third_df.loc[latest_open_index:end_index]\n","    sliced_fourth_df = fourth_df.loc[latest_open_index:end_index]\n","    sliced_fifth_df = fifth_df.loc[latest_open_index:end_index]\n","\n","    print(\"sliced index\")\n","    print(sliced_df.index[[0, -1]])\n","    print(sliced_second_df.index[[0, -1]])\n","    print(sliced_third_df.index[[0, -1]])\n","    print(sliced_fourth_df.index[[0, -1]])\n","    print(sliced_fifth_df.index[[0, -1]])\n","\n","    try:\n","      sliced_sixth_df = sixth_df.loc[latest_open_index:end_index]\n","      sliced_seventh_df = seventh_df.loc[latest_open_index:end_index]\n","\n","      print(sliced_sixth_df.index[[0, -1]])\n","      print(sliced_seventh_df.index[[0, -1]])\n","\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df, sliced_sixth_df, sliced_seventh_df)\n","    \n","    except:\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df)\n","\n","\n","\n","    res_df.to_excel(excel_path)\n","    print(excel_name, \"saved succesfully !\")"],"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-5-ee034491b257>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0ma_day\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m3600\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m24\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtqdm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m   \u001b[0mkeys\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mfile_list\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'file_list' is not defined"]}]},{"cell_type":"markdown","metadata":{"id":"aAzRBq67tBno"},"source":["### xlsx to feather"]},{"cell_type":"code","metadata":{"id":"YJtFAah_tE0S"},"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","exist_list = os.listdir(save_path)\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  # if '2021-04-30'.upper() not in file_list[i]:\n","  if '2021-07-01'.upper() not in file_list[i]:\n","  # if '2021-10-10'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","\n","    feather_name = key.replace(\".xlsx\", \".ftr\")\n","    # feather_path = save_path + feather_name\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_excel(date_path + key, index_col=0)\n","    second_df = pd.read_excel(date_path2 + key, index_col=0)\n","    third_df = pd.read_excel(date_path3 + key, index_col=0)\n","    fourth_df = pd.read_excel(date_path4 + key, index_col=0)\n","    fifth_df = pd.read_excel(date_path5 + key, index_col=0)\n","    \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m 마지막 timeindex 의 date 기준, 08:59:59.999000 를 last timestamp 로 설정\n","      #      2. 시작 timestamp 는 모든 tf 의 가장 최근 시작 index,\n","      #       a. 1m 의 시작 timeindex 는 최소, htf 의 시작 timeindex 보다 interval 만큼 앞서야함\n","      #         i. 따라서 1m open_index, latest_open_index + 1d 를 하면 댐\n","      #           1. timestamp 으로 변환후 1day 를 더하고 datetime 으로 변환\n","      sixth_df = pd.read_excel(date_path6 + key, index_col=0)\n","      seventh_df = pd.read_excel(date_path7 + key, index_col=0)\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","\n","    df.reset_index().to_feather(date_path + feather_name, compression='lz4')\n","    second_df.reset_index().to_feather(date_path2 + feather_name, compression='lz4')\n","    third_df.reset_index().to_feather(date_path3 + feather_name, compression='lz4')\n","    fourth_df.reset_index().to_feather(date_path4 + feather_name, compression='lz4')\n","    fifth_df.reset_index().to_feather(date_path5 + feather_name, compression='lz4')\n","    sixth_df.reset_index().to_feather(date_path6 + feather_name, compression='lz4')\n","    seventh_df.reset_index().to_feather(date_path7 + feather_name, compression='lz4')\n","\n","    print(\"xlsx converted to feather !\")\n","    "],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"QtiavGJOi8NV"},"source":["### feather ver."]},{"cell_type":"code","metadata":{"id":"0g2fXaCmi9zN"},"source":["pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","dir_path = \"dc10_backi2\"\n","os.makedirs(os.path.join(save_path, dir_path), exist_ok=True)\n","\n","exist_list = os.listdir(os.path.join(save_path, dir_path))\n","# break\n","\n","\n","a_day = 3600 * 24\n","\n","for i in tqdm(range(len(file_list))):\n","\n","  keys = [file_list[i]]\n","\n","  # if 'neo'.upper() not in file_list[i]:\n","    # continue\n","\n","  if '2021-07-01'.upper() not in file_list[i]:\n","    continue\n","\n","\n","  for key in keys:      \n","\n","    # if 'eth'.upper() not in key:\n","    #   continue\n","    # print(key)\n","    \n","    if \".ftr\" not in key:\n","      continue\n","\n","    # feather_name = key.replace(\".ftr\", \"_%.ftr\" % dir_path)\n","    feather_name = key\n","    feather_path = os.path.join(save_path, dir_path, feather_name)\n","\n","    if feather_name in exist_list:\n","      print(feather_name, \"already exist !\")\n","      continue\n","    \n","    open_indexes = []\n","    \n","    df = pd.read_feather(date_path + key, columns=None, use_threads=True).set_index(\"index\")\n","    second_df = pd.read_feather(date_path2 + key, columns=None, use_threads=True).set_index(\"index\")\n","    third_df = pd.read_feather(date_path3 + key, columns=None, use_threads=True).set_index(\"index\")\n","    fourth_df = pd.read_feather(date_path4 + key, columns=None, use_threads=True).set_index(\"index\")\n","    fifth_df = pd.read_feather(date_path5 + key, columns=None, use_threads=True).set_index(\"index\")\n","        \n","    print(df.index[[0, -1]])\n","    print(second_df.index[[0, -1]])\n","    print(third_df.index[[0, -1]])\n","    print(fourth_df.index[[0, -1]])\n","    print(fifth_df.index[[0, -1]])\n","\n","    open_indexes.append(df.index[0])\n","    open_indexes.append(second_df.index[0])\n","    open_indexes.append(third_df.index[0])\n","    open_indexes.append(fourth_df.index[0])\n","    open_indexes.append(fifth_df.index[0])\n","    \n","    try:\n","      #     Todo    #\n","      #      1. 1m 마지막 timeindex 의 date 기준, 08:59:59.999000 를 last timestamp 로 설정\n","      #      2. 시작 timestamp 는 모든 tf 의 가장 최근 시작 index,\n","      #       a. 1m 의 시작 timeindex 는 최소, htf 의 시작 timeindex 보다 interval 만큼 앞서야함\n","      #         i. 따라서 1m open_index, latest_open_index + 1d 를 하면 댐\n","      #           1. timestamp 으로 변환후 1day 를 더하고 datetime 으로 변환\n","      sixth_df = pd.read_feather(date_path6 + key, columns=None, use_threads=True).set_index(\"index\")\n","      seventh_df = pd.read_feather(date_path7 + key, columns=None, use_threads=True).set_index(\"index\")\n","\n","      print(sixth_df.index[[0, -1]])\n","      print(seventh_df.index[[0, -1]])\n","      print()\n","\n","      open_indexes.append(sixth_df.index[0])\n","      open_indexes.append(seventh_df.index[0])\n","\n","    except Exception as e:\n","      print(e)\n","\n","    latest_open_index = sorted(open_indexes)[-1]\n","    \n","    open_ts = datetime.timestamp(latest_open_index)\n","    latest_open_index_1m = datetime.fromtimestamp(open_ts + a_day)\n","\n","    #   str 로 만들어 접근하면 불가함  #\n","    end_index = pd.to_datetime(str(df.index[-1]).split(\" \")[0] + \" 08:59:59.999000\")\n","    # break\n","\n","    sliced_df = df.loc[latest_open_index_1m:end_index] # to_lower_tf 의 기준 ltf\n","    sliced_second_df = second_df.loc[latest_open_index:end_index]\n","    sliced_third_df = third_df.loc[latest_open_index:end_index]\n","    sliced_fourth_df = fourth_df.loc[latest_open_index:end_index]\n","    sliced_fifth_df = fifth_df.loc[latest_open_index:end_index]\n","\n","    print(\"sliced index\")\n","    print(sliced_df.index[[0, -1]])\n","    print(sliced_second_df.index[[0, -1]])\n","    print(sliced_third_df.index[[0, -1]])\n","    print(sliced_fourth_df.index[[0, -1]])\n","    print(sliced_fifth_df.index[[0, -1]])\n","\n","    try:\n","      sliced_sixth_df = sixth_df.loc[latest_open_index:end_index]\n","      sliced_seventh_df = seventh_df.loc[latest_open_index:end_index]\n","\n","      print(sliced_sixth_df.index[[0, -1]])\n","      print(sliced_seventh_df.index[[0, -1]])\n","\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df, sliced_sixth_df, sliced_seventh_df)\n","    \n","    except:\n","      res_df = sync_check(sliced_df, sliced_second_df, sliced_third_df, sliced_fourth_df, sliced_fifth_df)\n","\n","\n","\n","    # res_df.to_feather(feather_path)\n","    res_df.reset_index().to_feather(feather_path, compression='lz4')\n","    print(feather_name, \"saved succesfully !\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"NYqoJuPowqHq"},"source":["## concat & save new res_df"]},{"cell_type":"markdown","metadata":{"id":"9Lbr-ZsJjzIT"},"source":["### old (xlsx)"]},{"cell_type":"code","metadata":{"id":"TRXKKMr0wwKF"},"source":["save_path = './candlestick_concated/res_df/'\n","\n","dict_name = \"2021-07-01 ETHUSDT_bb15m_backi2_res_dfs.pkl\"\n","\n","#     load with pickle    #\n","with open(save_path + dict_name, 'rb') as f:\n","  saved_res_df_dict = pickle.load(f)\n","\n","print(dict_name, \"loaded !\")\n","res_df_files = os.listdir(save_path)\n","res_df_files.reverse()\n","\n","print(res_df_files)\n","\n","res_df_dict = {}\n","\n","base_postfix = '_bb15m_backi2.xlsx'\n","new_postfix = '_st1h_backi2.xlsx'\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for k_i, key in enumerate(res_df_files):\n","\n","  if '2021-07-01'.upper() not in key:\n","  # if '2021-10-10'.upper() not in key:\n","    continue\n","\n","  # if \"link\".upper() not in key:\n","  # if \"btc\".upper() not in key:\n","  #   continue\n","\n","  if new_postfix not in key:\n","    continue\n","\n","  # if key in \n","\n","  if sample_cnt == max_cnt:\n","    dict_name = \"%s_res_dfs.pkl\" % key.split(\".\")[0]\n","    print(\"dict_name :\", dict_name)\n","\n","  base_df = saved_res_df_dict[key.replace(new_postfix, base_postfix)]\n","  # base_df = pd.read_excel(save_path + key.replace(new_postfix, base_postfix), index_col=0)  \n","  res_df = pd.read_excel(save_path + key, index_col=0)  \n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  droped_new_res_df.head()\n","  # break\n","\n","  # res_df_dict[key] = res_df\n","  res_df_dict[key] = droped_new_res_df\n","  print(key, \"saved to dict !\")\n","\n","  #     save with pickle    #\n","  with open(save_path + dict_name, 'wb') as f:\n","    pickle.dump(res_df_dict, f)\n","\n","  sample_cnt -= 1\n","\n","  if sample_cnt <= 0:\n","    break\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"XHtKmKvEj2TU"},"source":["### feather ver."]},{"cell_type":"code","metadata":{"id":"TswTadFXj35X"},"source":["save_path = './candlestick_concated/res_df/'\n","\n","concat_dir = \"concat\"\n","\n","dir_path = \"dc10_backi2\"\n","base_dir_path = \"sar15m4h_backi2\"\n","\n","\n","#     save to (new) concat dir    #\n","#      1. if dir. not exists, makedir\n","os.makedirs(os.path.join(save_path, dir_path, concat_dir), exist_ok=True)\n","\n","\n","#     load ftr list    #\n","ftr_list = [s for s in os.listdir(os.path.join(save_path, dir_path)) if \"ftr\" in s]\n","print(ftr_list)\n","# break\n","\n","# dict_name = \"2021-07-01 ETHUSDT_bb15m_backi2_res_dfs.pkl\"\n","\n","# #     load with pickle    #\n","# with open(save_path + dict_name, 'rb') as f:\n","#   saved_res_df_dict = pickle.load(f)\n","\n","# print(dict_name, \"loaded !\")\n","# res_df_files = os.listdir(save_path)\n","# res_df_files.reverse()\n","\n","# print(res_df_files)\n","\n","# res_df_dict = {}\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for key in ftr_list:\n","\n","  if '2021-07-01'.upper() not in key:\n","  # if '2021-10-10'.upper() not in key:\n","    continue\n","\n","\n","  # if sample_cnt == max_cnt:\n","  #   dict_name = \"%s_res_dfs.pkl\" % key.split(\".\")[0]\n","  #   print(\"dict_name :\", dict_name)\n","\n","  # base_df = saved_res_df_dict[key.replace(new_postfix, base_postfix)]\n","  #       read from base postfix's directory    #\n","  base_df = pd.read_feather(os.path.join(save_path, base_dir_path, concat_dir, key), columns=None, use_threads=True).set_index(\"index\")\n","  # base_df = pd.read_excel(save_path + key.replace(new_postfix, base_postfix), index_col=0)  \n","  res_df = pd.read_feather(os.path.join(save_path, dir_path, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","  # print(base_df.head())\n","  # print(res_df.head())\n","  # break\n","\n","  new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","  # new_res_df.head()\n","\n","  droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","  # droped_new_res_df.head()\n","  # break\n","\n","  droped_new_res_df.reset_index().to_feather(os.path.join(save_path, dir_path, concat_dir, key), compression='lz4')\n","\n","  # res_df_dict[key] = res_df\n","  # res_df_dict[key] = droped_new_res_df\n","  print(key, \"saved !\")\n","\n","  # #     save with pickle    #\n","  # with open(save_path + dict_name, 'wb') as f:\n","  #   pickle.dump(res_df_dict, f)\n","\n","  sample_cnt -= 1\n","\n","  if sample_cnt <= 0:\n","    break\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"WNLIzxy8ZED5"},"source":["print(base_df['dc_upper_5m'].tail(50))\n","print(res_df['dc_upper_5m'].tail(50))\n","# droped_new_res_df.tail()\n","# new_res_df = pd.concat([base_df, res_df], axis=1) # df_tot.drop_duplicates()\n","#   # new_res_df.head()\n","\n","# droped_new_res_df = new_res_df.loc[:,~new_res_df.columns.duplicated(keep='last')]\n","# droped_new_res_df.head()\n","# break"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"qkzeUFAyeJXK"},"source":["## save sample res_dfs"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dIL0k_VEeL6B","executionInfo":{"elapsed":28473,"status":"ok","timestamp":1633935641663,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"outputId":"53b670df-90da-4cb8-8bc8-abbf9796b529"},"source":["save_path = './candlestick_concated/res_df/'\n","res_df_files = os.listdir(save_path)\n","res_df_files.reverse()\n","\n","print(res_df_files)\n","\n","res_df_dict = {}\n","\n","max_cnt = 10\n","sample_cnt = max_cnt\n","\n","for k_i, key in enumerate(res_df_files):\n","\n","  # if '2021-07-01'.upper() not in key:\n","  if '2021-10-10'.upper() not in key:\n","    continue\n","\n","  # if \"link\".upper() not in key:\n","  # if \"btc\".upper() not in key:\n","  #   continue\n","\n","  if \"_stline15_backi2.xlsx\" not in key:\n","    continue\n","\n","  if sample_cnt == max_cnt:\n","    dict_name = \"%s_res_dfs.pkl\" % key.split(\".\")[0]\n","    print(\"dict_name :\", dict_name)\n","\n","  res_df = pd.read_excel(save_path + key, index_col=0)  \n","\n","  res_df_dict[key] = res_df\n","  print(key, \"saved to dict !\")\n","\n","  #     save with pickle    #\n","  with open(save_path + dict_name, 'wb') as f:\n","    pickle.dump(res_df_dict, f)\n","\n","  sample_cnt -= 1\n","\n","  if sample_cnt <= 0:\n","    break\n"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["['2021-10-10 ETHUSDT_stline15_backi2.xlsx', '2021-07-01 ETHUSDT_stline15_backi2_res_dfs.pkl', '2021-07-01 ETHUSDT_stline15_backi2.xlsx', '2021-07-01 ADAUSDT_stline15_backi2.xlsx', '2021-07-01 XLMUSDT_stline15_backi2.xlsx', '2021-07-01 LINKUSDT_stline15_backi2.xlsx', '2021-07-01 ETCUSDT_stline15_backi2.xlsx', '2021-07-01 EOSUSDT_stline15_backi2_res_dfs.pkl', '2021-07-01 LTCUSDT_stline15_backi2.xlsx', '2021-07-01 BCHUSDT_stline15_backi2_res_dfs.pkl', '2021-07-01 EOSUSDT_stline15_backi2.xlsx', '2021-07-01 XRPUSDT_stline15_backi2.xlsx', '2021-07-01 BTCUSDT_stline15_backi2_res_dfs.pkl', '2021-07-01 BCHUSDT_stline15_backi2.xlsx', '2021-07-01 BTCUSDT_stline15_backi2.xlsx', '2021-07-01 ETHUSDT_cbline_backi2_res_dfs.pkl', '2021-07-01 ETHUSDT_cbline_backi2.xlsx', '2021-07-01 ETHUSDT_bbline_backi2_res_dfs.pkl', '2021-07-01 ETHUSDT_bbline_backi2.xlsx', '2021-07-01 ADAUSDT_bbline_backi2.xlsx', '2021-07-01 XLMUSDT_bbline_backi2.xlsx', '2021-07-01 LINKUSDT_bbline_backi2.xlsx', '2021-07-01 ETCUSDT_bbline_backi2.xlsx', '2021-07-01 LTCUSDT_bbline_backi2.xlsx', '2021-07-01 BTCUSDT_bbline_backi2_res_dfs.pkl', '2021-07-01 EOSUSDT_bbline_backi2.xlsx', '2021-07-01 XRPUSDT_bbline_backi2.xlsx', '2021-07-01 BCHUSDT_bbline_backi2.xlsx', '2021-07-01 BTCUSDT_bbline_backi2.xlsx', '2021-07-01 ETHUSDT_5mst_bb_backi2_res_dfs.pkl', '2021-07-01 ETHUSDT_5mst_bb_backi2.xlsx', '2021-07-01 ADAUSDT_5mst_bb_backi2.xlsx', '2021-07-01 XLMUSDT_5mst_bb_backi2.xlsx', '2021-07-01 LINKUSDT_5mst_bb_backi2.xlsx', '2021-07-01 ETCUSDT_5mst_bb_backi2.xlsx', '2021-07-01 LTCUSDT_5mst_bb_backi2.xlsx', '2021-07-01 EOSUSDT_5mst_bb_backi2.xlsx', '2021-07-01 XRPUSDT_5mst_bb_backi2.xlsx', '2021-07-01 BCHUSDT_5mst_bb_backi2_res_dfs.pkl', '2021-07-01 BCHUSDT_5mst_bb_backi2.xlsx', '2021-07-01 BTCUSDT_5mst_bb_backi2.xlsx', '2021-07-01 ETHUSDT_mmh_re_backi2_res_dfs.pkl', '2021-07-01 ETHUSDT_mmh_re_backi2.xlsx', '2021-07-01 BCHUSDT_mmh_on1h_backi2_res_dfs.pkl', '2021-07-01 BCHUSDT_mmh_on1h_backi2.xlsx', '2021-07-01 XRPUSDT_mmh_on1h_backi2.xlsx', '2021-07-01 EOSUSDT_mmh_on1h_backi2.xlsx', '2021-07-01 LTCUSDT_mmh_on1h_backi2.xlsx', '2021-07-01 LINKUSDT_mmh_on1h_backi2.xlsx', '2021-07-01 XLMUSDT_mmh_on1h_backi2.xlsx', '2021-07-01 ADAUSDT_mmh_on1h_backi2.xlsx', '2021-07-01 ETHUSDT_mmh_on1h_backi2.xlsx', '2021-07-01 BTCUSDT_mmh_on1h_backi2.xlsx', '2021-07-01 ADAUSDT_mmh_on30m_backi2_res_dfs.pkl', '2021-07-01 ADAUSDT_mmh_on30m_backi2.xlsx', '2021-07-01 XLMUSDT_mmh_on30m_backi2.xlsx', '2021-07-01 LINKUSDT_mmh_on30m_backi2.xlsx', '2021-07-01 ETCUSDT_mmh_on30m_backi2.xlsx', '2021-07-01 LTCUSDT_mmh_on30m_backi2.xlsx', '2021-07-01 EOSUSDT_mmh_on30m_backi2.xlsx', '2021-07-01 XRPUSDT_mmh_on30m_backi2.xlsx', '2021-07-01 BCHUSDT_mmh_on30m_backi2.xlsx', '2021-07-01 BTCUSDT_mmh_on30m_backi2.xlsx', '2021-07-01 ETHUSDT_mmh_on30m_backi2.xlsx', '2021-07-01 ADAUSDT_mmh_on15m_backi2_res_dfs.pkl', '2021-07-01 ADAUSDT_mmh_on15m_backi2.xlsx', '2021-07-01 XLMUSDT_mmh_on15m_backi2.xlsx', '2021-07-01 LINKUSDT_mmh_on15m_backi2.xlsx', '2021-07-01 ETCUSDT_mmh_on15m_backi2.xlsx', '2021-07-01 LTCUSDT_mmh_on15m_backi2.xlsx', '2021-07-01 EOSUSDT_mmh_on15m_backi2.xlsx', '2021-07-01 XRPUSDT_mmh_on15m_backi2.xlsx', '2021-07-01 BCHUSDT_mmh_on15m_backi2.xlsx', '2021-07-01 BTCUSDT_mmh_on15m_backi2.xlsx', '2021-07-01 ETHUSDT_mmh_on15m_backi2.xlsx', '2021-07-01 ETCUSDT_mmh_on1h_backi2_res_dfs.pkl', '2021-07-01 ETCUSDT_mmh_on1h_backi2.xlsx', '2021-07-01 ADAUSDT_mmh_re_backi2.xlsx', '2021-07-01 XLMUSDT_mmh_re_backi2.xlsx', '2021-07-01 LINKUSDT_mmh_re_backi2.xlsx', '2021-07-01 ETCUSDT_mmh_re_backi2.xlsx', '2021-07-01 LTCUSDT_mmh_re_backi2.xlsx', '2021-07-01 EOSUSDT_mmh_re_backi2.xlsx', '2021-07-01 XRPUSDT_mmh_re_backi2.xlsx', '2021-07-01 BTCUSDT_mmh_re_backi2_res_dfs.pkl', '2021-07-01 BCHUSDT_mmh_re_backi2.xlsx', '2021-07-01 BTCUSDT_mmh_re_backi2.xlsx', '2021-07-01 ETHUSDT_mmh_backi2_res_dfs.pkl', '2021-07-01 ETHUSDT_mmh_backi2.xlsx', '2021-07-01 ADAUSDT_multipline_backi2.xlsx', '2021-07-01 ETHUSDT_multipline_backi2.xlsx', '2021-07-01 XLMUSDT_multipline_backi2.xlsx', '2021-07-01 LINKUSDT_multipline_backi2.xlsx', '2021-07-01 ETCUSDT_multipline_backi2.xlsx', '2021-07-01 LTCUSDT_multipline_backi2.xlsx', '2021-07-01 EOSUSDT_multipline_backi2.xlsx', '2021-07-01 XRPUSDT_multipline_backi2.xlsx', '2021-07-01 BCHUSDT_multipline_backi2.xlsx', '2021-07-01 BTCUSDT_multipline_backi2.xlsx', '2021-07-01 ETHUSDT_majorst_backi2.xlsx', '2021-07-01 ADAUSDT_majorst_backi2.xlsx', '2021-07-01 XLMUSDT_majorst_backi2.xlsx', '2021-07-01 LINKUSDT_majorst_backi2.xlsx', '2021-07-01 ETCUSDT_majorst_backi2.xlsx', '2021-07-01 LTCUSDT_majorst_backi2.xlsx', '2021-07-01 EOSUSDT_majorst_backi2.xlsx', '2021-07-01 XRPUSDT_majorst_backi2.xlsx', '2021-07-01 BCHUSDT_majorst_backi2.xlsx', '2021-07-01 BTCUSDT_majorst_backi2.xlsx', '2021-07-01 BTCUSDT_majorst_on30_backi2_res_dfs.pkl', '2021-07-01 ETHUSDT_majorst_on30_backi2.xlsx', '2021-07-01 ADAUSDT_majorst_on30_backi2.xlsx', '2021-07-01 XLMUSDT_majorst_on30_backi2.xlsx', '2021-07-01 LINKUSDT_majorst_on30_backi2.xlsx', '2021-07-01 ETCUSDT_majorst_on30_backi2.xlsx', '2021-07-01 LTCUSDT_majorst_on30_backi2.xlsx', '2021-07-01 EOSUSDT_majorst_on30_backi2.xlsx', '2021-07-01 XRPUSDT_majorst_on30_backi2.xlsx', '2021-07-01 BCHUSDT_majorst_on30_backi2.xlsx', '2021-07-01 BTCUSDT_majorst_on30_backi2.xlsx', '2021-08-29 ETHUSDT_sartrend_backi2_res_dfs.pkl', '2021-08-29 ETHUSDT_sartrend_backi2.xlsx', '2021-06-30 ETHUSDT_sartrend_backi2_res_dfs.pkl', '2021-06-30 CHRUSDT_sartrend_backi2.xlsx', '2021-06-30 COTIUSDT_sartrend_backi2.xlsx', '2021-06-30 MANAUSDT_sartrend_backi2.xlsx', '2021-06-30 TRBUSDT_sartrend_backi2.xlsx', '2021-06-30 VETUSDT_sartrend_backi2.xlsx', '2021-06-30 ONTUSDT_sartrend_backi2.xlsx', '2021-06-30 KSMUSDT_sartrend_backi2.xlsx', '2021-06-30 EGLDUSDT_sartrend_backi2.xlsx', '2021-06-30 DODOUSDT_sartrend_backi2.xlsx', '2021-06-30 MTLUSDT_sartrend_backi2.xlsx', '2021-06-30 TOMOUSDT_sartrend_backi2.xlsx', '2021-06-30 RENUSDT_sartrend_backi2.xlsx', '2021-06-30 SKLUSDT_sartrend_backi2.xlsx', '2021-06-30 DGBUSDT_sartrend_backi2.xlsx', '2021-06-30 RSRUSDT_sartrend_backi2.xlsx', '2021-06-30 CELRUSDT_sartrend_backi2.xlsx', '2021-06-30 CTKUSDT_sartrend_backi2.xlsx', '2021-06-30 RUNEUSDT_sartrend_backi2.xlsx', '2021-06-30 KAVAUSDT_sartrend_backi2.xlsx', '2021-06-30 DASHUSDT_sartrend_backi2.xlsx', '2021-06-30 SANDUSDT_sartrend_backi2.xlsx', '2021-06-30 UNFIUSDT_sartrend_backi2.xlsx', '2021-06-30 NEOUSDT_sartrend_backi2.xlsx', '2021-06-30 SNXUSDT_sartrend_backi2.xlsx', '2021-06-30 STORJUSDT_sartrend_backi2.xlsx', '2021-06-30 BTCSTUSDT_sartrend_backi2.xlsx', '2021-06-30 RLCUSDT_sartrend_backi2.xlsx', '2021-06-30 TRXUSDT_sartrend_backi2.xlsx', '2021-06-30 DOGEUSDT_sartrend_backi2.xlsx', '2021-06-30 BATUSDT_sartrend_backi2.xlsx', '2021-06-30 REEFUSDT_sartrend_backi2.xlsx', '2021-06-30 SFPUSDT_sartrend_backi2.xlsx', '2021-06-30 ALPHAUSDT_sartrend_backi2.xlsx', '2021-06-30 ALICEUSDT_sartrend_backi2.xlsx', '2021-06-30 YFIUSDT_sartrend_backi2.xlsx', '2021-06-30 XMRUSDT_sartrend_backi2.xlsx', '2021-06-30 HNTUSDT_sartrend_backi2.xlsx', '2021-06-30 AKROUSDT_sartrend_backi2.xlsx', '2021-06-30 BNBUSDT_sartrend_backi2.xlsx', '2021-06-30 XTZUSDT_sartrend_backi2.xlsx', '2021-06-30 LITUSDT_sartrend_backi2.xlsx', '2021-06-30 WAVESUSDT_sartrend_backi2.xlsx', '2021-06-30 BTCBUSD_sartrend_backi2.xlsx', '2021-06-30 IOTAUSDT_sartrend_backi2.xlsx', '2021-06-30 QTUMUSDT_sartrend_backi2.xlsx', '2021-06-30 ZRXUSDT_sartrend_backi2.xlsx', '2021-06-30 HOTUSDT_sartrend_backi2.xlsx', '2021-06-30 BTSUSDT_sartrend_backi2.xlsx', '2021-06-30 CVCUSDT_sartrend_backi2.xlsx', '2021-06-30 SUSHIUSDT_sartrend_backi2.xlsx', '2021-06-30 ADAUSDT_sartrend_backi2.xlsx', '2021-06-30 XLMUSDT_sartrend_backi2.xlsx', '2021-06-30 LINKUSDT_sartrend_backi2.xlsx', '2021-06-30 ETCUSDT_sartrend_backi2.xlsx', '2021-06-30 LTCUSDT_sartrend_backi2.xlsx', '2021-06-30 EOSUSDT_sartrend_backi2.xlsx', '2021-06-30 XRPUSDT_sartrend_backi2.xlsx', '2021-06-30 BCHUSDT_sartrend_backi2.xlsx', '2021-06-30 BTCUSDT_sartrend_backi2.xlsx', '2021-06-30 ETHUSDT_sartrend_backi2.xlsx', '2021-06-30 CHRUSDT_7tf_backi2.xlsx', '2021-06-30 COTIUSDT_7tf_backi2.xlsx', '2021-06-30 MANAUSDT_7tf_backi2.xlsx', '2021-06-30 TRBUSDT_7tf_backi2.xlsx', '2021-06-30 VETUSDT_7tf_backi2.xlsx', '2021-06-30 ONTUSDT_7tf_backi2.xlsx', '2021-06-30 KSMUSDT_7tf_backi2.xlsx', '2021-06-30 EGLDUSDT_7tf_backi2.xlsx', '2021-06-30 DODOUSDT_7tf_backi2.xlsx', '2021-06-30 MTLUSDT_7tf_backi2.xlsx', '2021-06-30 TOMOUSDT_7tf_backi2.xlsx', '2021-06-30 RENUSDT_7tf_backi2.xlsx', '2021-06-30 SKLUSDT_7tf_backi2.xlsx', '2021-06-30 DGBUSDT_7tf_backi2.xlsx', '2021-06-30 RSRUSDT_7tf_backi2.xlsx', '2021-06-30 CELRUSDT_7tf_backi2.xlsx', '2021-06-30 CTKUSDT_7tf_backi2.xlsx', '2021-06-30 RUNEUSDT_7tf_backi2.xlsx', '2021-06-30 KAVAUSDT_7tf_backi2.xlsx', '2021-06-30 DASHUSDT_7tf_backi2.xlsx', '2021-06-30 SANDUSDT_7tf_backi2.xlsx', '2021-06-30 UNFIUSDT_7tf_backi2.xlsx', '2021-06-30 NEOUSDT_7tf_backi2.xlsx', '2021-06-30 SNXUSDT_7tf_backi2.xlsx', '2021-06-30 STORJUSDT_7tf_backi2.xlsx', '2021-06-30 BTCSTUSDT_7tf_backi2.xlsx', '2021-06-30 RLCUSDT_7tf_backi2.xlsx', '2021-06-30 TRXUSDT_7tf_backi2.xlsx', '2021-06-30 DOGEUSDT_7tf_backi2.xlsx', '2021-06-30 BATUSDT_7tf_backi2.xlsx', '2021-06-30 REEFUSDT_7tf_backi2.xlsx', '2021-06-30 SFPUSDT_7tf_backi2.xlsx', '2021-06-30 ALPHAUSDT_7tf_backi2.xlsx', '2021-06-30 ALICEUSDT_7tf_backi2.xlsx', '2021-06-30 YFIUSDT_7tf_backi2.xlsx', '2021-06-30 XMRUSDT_7tf_backi2.xlsx', '2021-06-30 HNTUSDT_7tf_backi2.xlsx', '2021-06-30 AKROUSDT_7tf_backi2.xlsx', '2021-06-30 BNBUSDT_7tf_backi2.xlsx', '2021-06-30 XTZUSDT_7tf_backi2.xlsx', '2021-06-30 LITUSDT_7tf_backi2.xlsx', '2021-06-30 WAVESUSDT_7tf_backi2.xlsx', '2021-06-30 BTCBUSD_7tf_backi2.xlsx', '2021-06-30 IOTAUSDT_7tf_backi2.xlsx', '2021-06-30 QTUMUSDT_7tf_backi2.xlsx', '2021-06-30 ZRXUSDT_7tf_backi2.xlsx', '2021-06-30 HOTUSDT_7tf_backi2.xlsx', '2021-06-30 BTSUSDT_7tf_backi2.xlsx', '2021-06-30 CVCUSDT_7tf_backi2.xlsx', '2021-06-30 SUSHIUSDT_7tf_backi2.xlsx', '2021-06-30 ADAUSDT_7tf_backi2.xlsx', '2021-06-30 XLMUSDT_7tf_backi2.xlsx', '2021-06-30 LINKUSDT_7tf_backi2.xlsx', '2021-06-30 ETCUSDT_7tf_backi2.xlsx', '2021-06-30 LTCUSDT_7tf_backi2.xlsx', '2021-06-30 EOSUSDT_7tf_backi2.xlsx', '2021-06-30 XRPUSDT_7tf_backi2.xlsx', '2021-06-30 BCHUSDT_7tf_backi2.xlsx', '2021-06-30 BTCUSDT_7tf_backi2.xlsx', '2021-06-30 ETHUSDT_7tf_backi2.xlsx', '2021-06-30 TRXUSDT_4h1d_backi2.xlsx', '2021-06-30 DOGEUSDT_4h1d_backi2.xlsx', '2021-06-30 BATUSDT_4h1d_backi2.xlsx', '2021-06-30 REEFUSDT_4h1d_backi2.xlsx', '2021-06-30 SFPUSDT_4h1d_backi2.xlsx', '2021-06-30 ALPHAUSDT_4h1d_backi2.xlsx', '2021-06-30 ALICEUSDT_4h1d_backi2.xlsx', '2021-06-30 YFIUSDT_4h1d_backi2.xlsx', '2021-06-30 XMRUSDT_4h1d_backi2.xlsx', '2021-06-30 HNTUSDT_4h1d_backi2.xlsx', '2021-06-30 AKROUSDT_4h1d_backi2.xlsx', '2021-06-30 BNBUSDT_4h1d_backi2.xlsx', '2021-06-30 XTZUSDT_4h1d_backi2.xlsx', '2021-06-30 LITUSDT_4h1d_backi2.xlsx', '2021-06-30 WAVESUSDT_4h1d_backi2.xlsx', '2021-06-30 BTCBUSD_4h1d_backi2.xlsx', '2021-06-30 IOTAUSDT_4h1d_backi2.xlsx', '2021-06-30 QTUMUSDT_4h1d_backi2.xlsx', '2021-06-30 ZRXUSDT_4h1d_backi2.xlsx', '2021-06-30 HOTUSDT_4h1d_backi2.xlsx', '2021-06-30 BTSUSDT_4h1d_backi2.xlsx', '2021-06-30 CVCUSDT_4h1d_backi2.xlsx', '2021-06-30 SUSHIUSDT_4h1d_backi2.xlsx', '2021-06-30 ADAUSDT_4h1d_backi2.xlsx', '2021-06-30 BTCUSDT_4h1d_backi2_res_dfs.pkl', '2021-06-30 ETHUSDT_4h1d_backi2_res_dfs.pkl', '2021-06-30 XLMUSDT_4h1d_backi2.xlsx', '2021-06-30 LINKUSDT_4h1d_backi2.xlsx', '2021-06-30 ETCUSDT_4h1d_backi2.xlsx', '2021-06-30 LTCUSDT_4h1d_backi2.xlsx', '2021-06-30 EOSUSDT_4h1d_backi2.xlsx', '2021-06-30 XRPUSDT_4h1d_backi2.xlsx', '2021-06-30 BCHUSDT_4h1d_backi2.xlsx', '2021-06-30 BTCUSDT_4h1d_backi2.xlsx', '2021-06-30 ETHUSDT_fisher_backi2_res_dfs.pkl', '2021-06-30 CHRUSDT_fisher_backi2.xlsx', '2021-06-30 COTIUSDT_fisher_backi2.xlsx', '2021-06-30 MANAUSDT_fisher_backi2.xlsx', '2021-06-30 TRBUSDT_fisher_backi2.xlsx', '2021-06-30 VETUSDT_fisher_backi2.xlsx', '2021-06-30 ONTUSDT_fisher_backi2.xlsx', '2021-06-30 KSMUSDT_fisher_backi2.xlsx', '2021-06-30 EGLDUSDT_fisher_backi2.xlsx', '2021-06-30 DODOUSDT_fisher_backi2.xlsx', '2021-06-30 MTLUSDT_fisher_backi2.xlsx', '2021-06-30 TOMOUSDT_fisher_backi2.xlsx', '2021-06-30 RENUSDT_fisher_backi2.xlsx', '2021-06-30 SKLUSDT_fisher_backi2.xlsx', '2021-06-30 DGBUSDT_fisher_backi2.xlsx', '2021-06-30 RSRUSDT_fisher_backi2.xlsx', '2021-06-30 CELRUSDT_fisher_backi2.xlsx', '2021-06-30 CTKUSDT_fisher_backi2.xlsx', '2021-06-30 RUNEUSDT_fisher_backi2.xlsx', '2021-06-30 KAVAUSDT_fisher_backi2.xlsx', '2021-06-30 DASHUSDT_fisher_backi2.xlsx', '2021-06-30 SANDUSDT_fisher_backi2.xlsx', '2021-06-30 UNFIUSDT_fisher_backi2.xlsx', '2021-06-30 NEOUSDT_fisher_backi2.xlsx', '2021-06-30 SNXUSDT_fisher_backi2.xlsx', '2021-06-30 STORJUSDT_fisher_backi2.xlsx', '2021-06-30 BTCSTUSDT_fisher_backi2.xlsx', '2021-06-30 RLCUSDT_fisher_backi2.xlsx', '2021-06-30 TRXUSDT_fisher_backi2.xlsx', '2021-06-30 DOGEUSDT_fisher_backi2.xlsx', '2021-06-30 BATUSDT_fisher_backi2.xlsx', '2021-06-30 REEFUSDT_fisher_backi2.xlsx', '2021-06-30 SFPUSDT_fisher_backi2.xlsx', '2021-06-30 ALPHAUSDT_fisher_backi2.xlsx', '2021-06-30 ALICEUSDT_fisher_backi2.xlsx', '2021-06-30 YFIUSDT_fisher_backi2.xlsx', '2021-06-30 XMRUSDT_fisher_backi2.xlsx', '2021-06-30 HNTUSDT_fisher_backi2.xlsx', '2021-06-30 AKROUSDT_fisher_backi2.xlsx', '2021-06-30 BNBUSDT_fisher_backi2.xlsx', '2021-06-30 XTZUSDT_fisher_backi2.xlsx', '2021-06-30 LITUSDT_fisher_backi2.xlsx', '2021-06-30 WAVESUSDT_fisher_backi2.xlsx', '2021-06-30 BTCBUSD_fisher_backi2.xlsx', '2021-06-30 IOTAUSDT_fisher_backi2.xlsx', '2021-06-30 QTUMUSDT_fisher_backi2.xlsx', '2021-06-30 ZRXUSDT_fisher_backi2.xlsx', '2021-06-30 HOTUSDT_fisher_backi2.xlsx', '2021-06-30 BTSUSDT_fisher_backi2.xlsx', '2021-06-30 CVCUSDT_fisher_backi2.xlsx', '2021-06-30 SUSHIUSDT_fisher_backi2.xlsx', '2021-06-30 ADAUSDT_fisher_backi2.xlsx', '2021-06-30 XLMUSDT_fisher_backi2.xlsx', '2021-06-30 LINKUSDT_fisher_backi2.xlsx', '2021-06-30 ETCUSDT_fisher_backi2.xlsx', '2021-06-30 LTCUSDT_fisher_backi2.xlsx', '2021-06-30 EOSUSDT_fisher_backi2.xlsx', '2021-06-30 XRPUSDT_fisher_backi2.xlsx', '2021-06-30 BCHUSDT_fisher_backi2.xlsx', '2021-06-30 BTCUSDT_fisher_backi2.xlsx', '2021-06-30 ETHUSDT_fisher_backi2.xlsx', '2021-06-30 ETHUSDT_533_cctbbo_backi2_res_dfs.pkl', '2021-06-30 XTZUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 LITUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 WAVESUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 BTCBUSD_533_cctbbo_backi2.xlsx', '2021-06-30 IOTAUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 QTUMUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 ZRXUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 HOTUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 BTSUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 CVCUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 SUSHIUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 ADAUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 XLMUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 LINKUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 ETCUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 LTCUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 EOSUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 XRPUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 BCHUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 BTCUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 ETHUSDT_533_cctbbo_backi2.xlsx', '2021-06-30 ETHUSDT_cctbbo_backi2_res_dfs.pkl', '2021-06-30 BTCSTUSDT_cctbbo_backi2.xlsx', '2021-06-30 RLCUSDT_cctbbo_backi2.xlsx', '2021-06-30 TRXUSDT_cctbbo_backi2.xlsx', '2021-06-30 DOGEUSDT_cctbbo_backi2.xlsx', '2021-06-30 BATUSDT_cctbbo_backi2.xlsx', '2021-06-30 REEFUSDT_cctbbo_backi2.xlsx', '2021-06-30 SFPUSDT_cctbbo_backi2.xlsx', '2021-06-30 ALPHAUSDT_cctbbo_backi2.xlsx', '2021-06-30 ALICEUSDT_cctbbo_backi2.xlsx', '2021-06-30 YFIUSDT_cctbbo_backi2.xlsx', '2021-06-30 XMRUSDT_cctbbo_backi2.xlsx', '2021-06-30 HNTUSDT_cctbbo_backi2.xlsx', '2021-06-30 AKROUSDT_cctbbo_backi2.xlsx', '2021-06-30 BNBUSDT_cctbbo_backi2.xlsx', '2021-06-30 XTZUSDT_cctbbo_backi2.xlsx', '2021-06-30 LITUSDT_cctbbo_backi2.xlsx', '2021-06-30 WAVESUSDT_cctbbo_backi2.xlsx', '2021-06-30 BTCBUSD_cctbbo_backi2.xlsx', '2021-06-30 IOTAUSDT_cctbbo_backi2.xlsx', '2021-06-30 QTUMUSDT_cctbbo_backi2.xlsx', '2021-06-30 ZRXUSDT_cctbbo_backi2.xlsx', '2021-06-30 HOTUSDT_cctbbo_backi2.xlsx', '2021-06-30 BTSUSDT_cctbbo_backi2.xlsx', '2021-06-30 CVCUSDT_cctbbo_backi2.xlsx', '2021-06-30 SUSHIUSDT_cctbbo_backi2.xlsx', '2021-06-30 ADAUSDT_cctbbo_backi2.xlsx', '2021-06-30 XLMUSDT_cctbbo_backi2.xlsx', '2021-06-30 LINKUSDT_cctbbo_backi2.xlsx', '2021-06-30 ETCUSDT_cctbbo_backi2.xlsx', '2021-06-30 LTCUSDT_cctbbo_backi2.xlsx', '2021-06-30 EOSUSDT_cctbbo_backi2.xlsx', '2021-06-30 XRPUSDT_cctbbo_backi2.xlsx', '2021-06-30 BCHUSDT_cctbbo_backi2.xlsx', '2021-06-30 BTCUSDT_cctbbo_backi2.xlsx', '2021-06-30 ETHUSDT_cctbbo_backi2.xlsx', '2021-06-30 DASHUSDT_trix_backi2.xlsx', '2021-06-30 SANDUSDT_trix_backi2.xlsx', '2021-06-30 UNFIUSDT_trix_backi2.xlsx', '2021-06-30 NEOUSDT_trix_backi2.xlsx', '2021-06-30 SNXUSDT_trix_backi2.xlsx', '2021-06-30 STORJUSDT_trix_backi2.xlsx', '2021-06-30 BTCSTUSDT_trix_backi2.xlsx', '2021-06-30 RLCUSDT_trix_backi2.xlsx', '2021-06-30 TRXUSDT_trix_backi2.xlsx', '2021-06-30 DOGEUSDT_trix_backi2.xlsx', '2021-06-30 BATUSDT_trix_backi2.xlsx', '2021-06-30 REEFUSDT_trix_backi2.xlsx', '2021-06-30 SFPUSDT_trix_backi2.xlsx', '2021-06-30 ALPHAUSDT_trix_backi2.xlsx', '2021-06-30 ALICEUSDT_trix_backi2.xlsx', '2021-06-30 YFIUSDT_trix_backi2.xlsx', '2021-06-30 XMRUSDT_trix_backi2.xlsx', '2021-06-30 HNTUSDT_trix_backi2.xlsx', '2021-06-30 AKROUSDT_trix_backi2.xlsx', '2021-06-30 BNBUSDT_trix_backi2.xlsx', '2021-06-30 XTZUSDT_trix_backi2.xlsx', '2021-06-30 LITUSDT_trix_backi2.xlsx', '2021-06-30 WAVESUSDT_trix_backi2.xlsx', '2021-06-30 BTCBUSD_trix_backi2.xlsx', '2021-06-30 IOTAUSDT_trix_backi2.xlsx', '2021-06-30 QTUMUSDT_trix_backi2.xlsx', '2021-06-30 ZRXUSDT_trix_backi2.xlsx', '2021-06-30 HOTUSDT_trix_backi2.xlsx', '2021-06-30 BTSUSDT_trix_backi2.xlsx', '2021-06-30 CVCUSDT_trix_backi2.xlsx', '2021-06-30 SUSHIUSDT_trix_backi2.xlsx', '2021-06-30 ETHUSDT_trix_backi2.xlsx', '2021-06-30 ADAUSDT_trix_backi2.xlsx', '2021-06-30 XLMUSDT_trix_backi2.xlsx', '2021-06-30 LINKUSDT_trix_backi2.xlsx', '2021-06-30 ETCUSDT_trix_backi2.xlsx', '2021-06-30 LTCUSDT_trix_backi2.xlsx', '2021-06-30 EOSUSDT_trix_backi2.xlsx', '2021-06-30 XRPUSDT_trix_backi2.xlsx', '2021-06-30 BCHUSDT_trix_backi2.xlsx', '2021-06-30 BTCUSDT_trix_backi2.xlsx', '2021-06-30 ADAUSDTmacd5355_backi2.xlsx', '2021-06-30 XLMUSDTmacd5355_backi2.xlsx', '2021-06-30 LINKUSDTmacd5355_backi2.xlsx', '2021-06-30 ETCUSDTmacd5355_backi2.xlsx', '2021-06-30 LTCUSDTmacd5355_backi2.xlsx', '2021-06-30 EOSUSDTmacd5355_backi2.xlsx', '2021-06-30 XRPUSDTmacd5355_backi2.xlsx', '2021-06-30 BCHUSDTmacd5355_backi2.xlsx', '2021-06-30 BTCUSDTmacd5355_backi2.xlsx', '2021-06-30 ETHUSDTmacd5355_backi2.xlsx', '2021-07-01 ADAUSDT_backi2.xlsx', '2021-07-01 XLMUSDT_backi2.xlsx', '2021-07-01 LINKUSDT_backi2.xlsx', '2021-07-01 ETCUSDT_backi2.xlsx', '2021-07-01 LTCUSDT_backi2.xlsx', '2021-07-01 EOSUSDT_backi2.xlsx', '2021-07-01 XRPUSDT_backi2.xlsx', '2021-07-01 BCHUSDT_backi2.xlsx', '2021-07-01 BTCUSDT_backi2.xlsx', '2021-06-30 XLMUSDT_backi2.xlsx', '2021-06-30 BCHUSDT_backi2.xlsx', '2021-06-30 EOSUSDT_backi2.xlsx', '2021-06-30 LTCUSDT_backi2.xlsx', '2021-06-30 ETCUSDT_backi2.xlsx', '2021-06-30 ADAUSDT_backi2.xlsx', '2021-06-30 LINKUSDT_backi2.xlsx', '2021-06-30 XRPUSDT_backi2.xlsx', '2021-06-30 BTCUSDT_backi2.xlsx', '2021-07-01 ETHUSDT_backi2.xlsx', '2021-07-01 ETHUSDT_backi1.xlsx', '2021-06-30 ETHUSDT_backi2.xlsx', '2021-06-30 ETHUSDT_backi1.xlsx', '2021-06-30 ETHUSDT_question.xlsx', '2021-07-03 ETHUSDT.xlsx', '2021-07-03 ETHUSDT.xlsx_backup']\n","dict_name : 2021-10-10 ETHUSDT_stline15_backi2_res_dfs.pkl\n","2021-10-10 ETHUSDT_stline15_backi2.xlsx saved to dict !\n"]}]},{"cell_type":"markdown","metadata":{"id":"ShvMpmWtC_Uv"},"source":["## modify colname"]},{"cell_type":"markdown","metadata":{"id":"yvrNFdxrnVjt"},"source":["### old (xlsx)"]},{"cell_type":"code","metadata":{"id":"3SvktSAzDDrk"},"source":["pd.set_option('display.max_seq_items', None)\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","dict_name = \"2021-07-01 ETHUSDT_sarstoch_backi2_res_dfs.pkl\"\n","# new_dict_name = \"2021-07-01 ETHUSDT_bbline_backi2_res_dfs_colmod.pkl\"\n","\n","new_colname = ['open', 'high', 'low', 'close', 'volume', 'ST1_Up_3m', 'ST1_Down_3m',\n","       'ST1_Trend_3m', 'ST2_Up_3m', 'ST2_Down_3m', 'ST2_Trend_3m', 'ST3_Up_3m',\n","       'ST3_Down_3m', 'ST3_Trend_3m', 'min_upper_3m', 'max_lower_3m', 'middle_line_3m',\n","       'upper_middle_3m', 'lower_middle_3m', 'st_gap_3m', 'ST1_Up_30m', 'ST1_Down_30m',\n","       'ST1_Trend_30m', 'ST2_Up_30m', 'ST2_Down_30m', 'ST2_Trend_30m', 'ST3_Up_30m',\n","       'ST3_Down_30m', 'ST3_Trend_30m', 'min_upper_30m', 'max_lower_30m', 'middle_line_30m',\n","       'upper_middle_30m', 'lower_middle_30m', 'st_gap_30m', 'ST1_Up_4h', 'ST1_Down_4h',\n","       'ST1_Trend_4h', 'ST2_Up_4h', 'ST2_Down_4h', 'ST2_Trend_4h', 'ST3_Up_4h',\n","       'ST3_Down_4h', 'ST3_Trend_4h', 'min_upper_4h', 'max_lower_4h', 'middle_line_4h',\n","       'upper_middle_4h', 'lower_middle_4h', 'st_gap_4h', 'ST1_Up_1d', 'ST1_Down_1d',\n","       'ST1_Trend_1d', 'ST2_Up_1d', 'ST2_Down_1d', 'ST2_Trend_1d', 'ST3_Up_1d',\n","       'ST3_Down_1d', 'ST3_Trend_1d', 'min_upper_1d', 'max_lower_1d', 'middle_line_1d',\n","       'upper_middle_1d', 'lower_middle_1d', 'st_gap_1d', 'mmh_st1_1m', 'mmh_st2_1m',\n","       'norm_st_up_1m', 'norm_st_down_1m', 'norm_st_trend_1m', 'ST1_Up_5m', 'ST1_Down_5m',\n","       'ST1_Trend_5m', 'ST2_Up_5m', 'ST2_Down_5m', 'ST2_Trend_5m', 'ST3_Up_5m',\n","       'ST3_Down_5m', 'ST3_Trend_5m', 'min_upper_5m', 'max_lower_5m', 'middle_line_5m',\n","       'upper_middle_5m', 'lower_middle_5m', 'st_gap_5m',\n","       'bb_upper_1m', 'bb_lower_1m', 'bb_base_1m', 'bb_upper2_1m',\n","       'bb_upper3_1m', 'bb_lower2_1m', 'bb_lower3_1m', 'bb_upper_30m',\n","       'bb_lower_30m', 'bb_base_30m', 'bb_upper2_30m', 'bb_upper3_30m',\n","       'bb_lower2_30m', 'bb_lower3_30m']\n","\n","#     load with pickle    #\n","with open(save_path + dict_name, 'rb') as f:\n","  saved_res_df_dict = pickle.load(f)\n","\n","for key, res_df in saved_res_df_dict.items():\n","\n","  # if '_stline15_backi2' not in key:\n","  #   continue\n","\n","  # print(res_df.columns)\n","\n","  try:\n","\n","    #     rename whole cols   #\n","    # res_df.columns = new_colname\n","\n","    #     rename specific cols   #\n","    res_df.rename(columns={\"stoch5\" : \"stoch_30m\"}, inplace=True)\n","\n","\n","    #     drop cols   #\n","    # res_df.drop(['bb_upper', 'bb_lower'], axis=1, inplace=True)\n","    # break\n","\n","  except Exception as e:\n","    print(e)\n","\n","  \n","  # res_df_dict[key] = res_df\n","  saved_res_df_dict[key] = res_df\n","  print(key, \"modified & saved to dict !\")\n","\n","  #     save with pickle    #\n","  with open(save_path + dict_name, 'wb') as f:\n","    pickle.dump(saved_res_df_dict, f)\n","\n","# res_df.tail()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"0-wuP0cHSwvC"},"source":["# print(res_df.tail()) # 35215.568620 35182.644944\n","res_df.tail() # 35215.568620 35182.644944"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JcKfLZ7QnYcK"},"source":["### feather ver."]},{"cell_type":"code","metadata":{"id":"qcltRDX8nZ4e"},"source":["pd.set_option('display.max_seq_items', None)\n","\n","save_path = './candlestick_concated/res_df/'\n","\n","dir_path = \"dc_backi2\"\n","concat_dir = \"concat\"\n","\n","#     load ftr list    #\n","ftr_list = [s for s in os.listdir(os.path.join(save_path, dir_path, concat_dir)) if \"ftr\" in s]\n","print(ftr_list)\n","\n","# dict_name = \"2021-07-01 ETHUSDT_sarstoch_backi2_res_dfs.pkl\"\n","\n","new_colname = ['open', 'high', 'low', 'close', 'volume', 'ST1_Up_3m', 'ST1_Down_3m',\n","       'ST1_Trend_3m', 'ST2_Up_3m', 'ST2_Down_3m', 'ST2_Trend_3m', 'ST3_Up_3m',\n","       'ST3_Down_3m', 'ST3_Trend_3m', 'min_upper_3m', 'max_lower_3m', 'middle_line_3m',\n","       'upper_middle_3m', 'lower_middle_3m', 'st_gap_3m', 'ST1_Up_30m', 'ST1_Down_30m',\n","       'ST1_Trend_30m', 'ST2_Up_30m', 'ST2_Down_30m', 'ST2_Trend_30m', 'ST3_Up_30m',\n","       'ST3_Down_30m', 'ST3_Trend_30m', 'min_upper_30m', 'max_lower_30m', 'middle_line_30m',\n","       'upper_middle_30m', 'lower_middle_30m', 'st_gap_30m', 'ST1_Up_4h', 'ST1_Down_4h',\n","       'ST1_Trend_4h', 'ST2_Up_4h', 'ST2_Down_4h', 'ST2_Trend_4h', 'ST3_Up_4h',\n","       'ST3_Down_4h', 'ST3_Trend_4h', 'min_upper_4h', 'max_lower_4h', 'middle_line_4h',\n","       'upper_middle_4h', 'lower_middle_4h', 'st_gap_4h', 'ST1_Up_1d', 'ST1_Down_1d',\n","       'ST1_Trend_1d', 'ST2_Up_1d', 'ST2_Down_1d', 'ST2_Trend_1d', 'ST3_Up_1d',\n","       'ST3_Down_1d', 'ST3_Trend_1d', 'min_upper_1d', 'max_lower_1d', 'middle_line_1d',\n","       'upper_middle_1d', 'lower_middle_1d', 'st_gap_1d', 'mmh_st1_1m', 'mmh_st2_1m',\n","       'norm_st_up_1m', 'norm_st_down_1m', 'norm_st_trend_1m', 'ST1_Up_5m', 'ST1_Down_5m',\n","       'ST1_Trend_5m', 'ST2_Up_5m', 'ST2_Down_5m', 'ST2_Trend_5m', 'ST3_Up_5m',\n","       'ST3_Down_5m', 'ST3_Trend_5m', 'min_upper_5m', 'max_lower_5m', 'middle_line_5m',\n","       'upper_middle_5m', 'lower_middle_5m', 'st_gap_5m',\n","       'bb_upper_1m', 'bb_lower_1m', 'bb_base_1m', 'bb_upper2_1m',\n","       'bb_upper3_1m', 'bb_lower2_1m', 'bb_lower3_1m', 'bb_upper_30m',\n","       'bb_lower_30m', 'bb_base_30m', 'bb_upper2_30m', 'bb_upper3_30m',\n","       'bb_lower2_30m', 'bb_lower3_30m']\n","\n","# #     load with pickle    #\n","# with open(save_path + dict_name, 'rb') as f:\n","#   saved_res_df_dict = pickle.load(f)\n","\n","for key in ftr_list:\n","\n","  res_df = pd.read_feather(os.path.join(save_path, dir_path, concat_dir, key), columns=None, use_threads=True).set_index(\"index\")\n","\n","  try:\n","\n","    #     rename whole cols   #\n","    # res_df.columns = new_colname\n","\n","    #     rename specific cols   #\n","    res_df.rename(columns={\"stoch5\" : \"stoch_30m\"}, inplace=True)\n","\n","\n","    #     drop cols   #\n","    # res_df.drop(['bb_upper', 'bb_lower'], axis=1, inplace=True)\n","    # break\n","\n","  except Exception as e:\n","    print(e)\n","\n","  \n","  res_df.reset_index().to_feather(os.path.join(save_path, dir_path, concat_dir, key), compression='lz4')\n","\n","  # res_df_dict[key] = res_df\n","  # saved_res_df_dict[key] = res_df\n","  print(key, \"modified & saved !\")\n","\n","  # #     save with pickle    #\n","  # with open(save_path + dict_name, 'wb') as f:\n","  #   pickle.dump(saved_res_df_dict, f)\n","\n","# res_df.tail()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"qNGeuYuGDXfv"},"source":["# pr check with strategy"]},{"cell_type":"markdown","metadata":{"id":"6HOjnZjSgzk1"},"source":["## load ftr_list"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7FPBG5Qqg2jB","executionInfo":{"status":"ok","timestamp":1637652010218,"user_tz":-540,"elapsed":966,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"d7ff09c7-5094-4191-c559-0fdcea1ac67a"},"source":["save_path = './candlestick_concated/res_df/'\n","\n","dir_path = \"sar15m4h_backi2\"\n","# dir_path = \"dc10_backi2\"\n","\n","#     load ftr list    #\n","ftr_list = [s for s in os.listdir(os.path.join(save_path, dir_path, \"concat\")) if \"ftr\" in s]\n","print(ftr_list)"],"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["['2021-07-01 BTCUSDT.ftr', '2021-07-01 BCHUSDT.ftr', '2021-07-01 XRPUSDT.ftr', '2021-07-01 EOSUSDT.ftr', '2021-07-01 LTCUSDT.ftr', '2021-07-01 ETCUSDT.ftr', '2021-07-01 LINKUSDT.ftr', '2021-07-01 XLMUSDT.ftr', '2021-07-01 ADAUSDT.ftr', '2021-07-01 ETHUSDT.ftr']\n"]}]},{"cell_type":"markdown","metadata":{"id":"tApzvz_gK9lR"},"source":["## basic strategy"]},{"cell_type":"markdown","metadata":{"id":"FaRGwR4NEop2"},"source":["### shifting"]},{"cell_type":"code","metadata":{"id":"a8aYsjEgQnGF"},"source":["org_res_df = res_df.copy()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RF3RM2G2RCb1","executionInfo":{"elapsed":291,"status":"ok","timestamp":1626515312874,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"outputId":"ba8f6a75-d4df-4f85-cd0f-190935341f7a"},"source":["#         refresh res_df      #\n","res_df = org_res_df.copy()\n","print(org_res_df.tail(5))\n","\n","# break\n","\n","\n","shift_size = -4\n","# shift_size = -1\n","# shift_size = -7\n","# shift_size = +3\n","\n","res_df['min_upper'] = res_df['min_upper'].shift(shift_size)\n","res_df['max_lower'] = res_df['max_lower'].shift(shift_size)\n","res_df['minor_ST1_Trend'] = res_df['minor_ST1_Trend'].shift(shift_size)\n","res_df['minor_ST2_Trend'] = res_df['minor_ST2_Trend'].shift(shift_size)\n","res_df['minor_ST3_Trend'] = res_df['minor_ST3_Trend'].shift(shift_size)\n","res_df['middle_line'] = res_df['middle_line'].shift(shift_size)\n","\n","print(res_df.tail(5))"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["                            open     high  ...  min_upper  max_lower\n","2021-06-30 23:55:59.999  0.27223  0.27281  ...   0.272145    0.27005\n","2021-06-30 23:56:59.999  0.27274  0.27290  ...   0.272145    0.27005\n","2021-06-30 23:57:59.999  0.27246  0.27257  ...   0.272523    0.27021\n","2021-06-30 23:58:59.999  0.27166  0.27183  ...   0.272523    0.27021\n","2021-06-30 23:59:59.999  0.27144  0.27211  ...   0.272523    0.27021\n","\n","[5 rows x 37 columns]\n","                            open     high  ...  min_upper  max_lower\n","2021-06-30 23:55:59.999  0.27223  0.27281  ...   0.272523    0.27021\n","2021-06-30 23:56:59.999  0.27274  0.27290  ...        NaN        NaN\n","2021-06-30 23:57:59.999  0.27246  0.27257  ...        NaN        NaN\n","2021-06-30 23:58:59.999  0.27166  0.27183  ...        NaN        NaN\n","2021-06-30 23:59:59.999  0.27144  0.27211  ...        NaN        NaN\n","\n","[5 rows x 37 columns]\n"]}]},{"cell_type":"markdown","metadata":{"id":"2gxvme1PC6ha"},"source":["### load model"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dtYdAuSsC72_","executionInfo":{"elapsed":5831,"status":"ok","timestamp":1628862368878,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"outputId":"e8dccc53-aaa7-4bab-ed8d-753f634c08d6"},"source":["# model_name = 'inner_tick_cnnreg_lscalemm_prefee_gpu_%s_%s_%s_%s_%s.h5'\n","\n","# model = tf.keras.models.load_model(ckpt_path + model_name)\n","\n","from tensorflow.keras.applications.resnet50 import ResNet50\n","\n","model = ResNet50(weights='imagenet', include_top=False)\n","# model.summary()\n"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/resnet/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5\n","94773248/94765736 [==============================] - 1s 0us/step\n"]}]},{"cell_type":"markdown","metadata":{"id":"5la6usMOFzkX"},"source":["#### gen selected vector"]},{"cell_type":"code","metadata":{"id":"oQk3-jbKF8FB"},"source":["def min_max_scale(npy_x):\n","\n","  return (npy_x - np.min(npy_x)) / (np.max(npy_x) - np.min(npy_x))\n","\n","def expand_dims(npy_x):\n","\n","  row, col = npy_x.shape\n","  npy_x2 = np.array(npy_x).reshape(-1, row, col, 1).astype(np.float32)\n","  # input_x = np.array(data_x).reshape(-1, row, col).astype(np.float32)\n","\n","  #     1c to 3c    #\n","  npy_x3 = npy_x2 * np.ones(3, dtype=np.float32)[None, None, None, :]\n","\n","  return npy_x3\n","\n","\n","def vector_dist(f1, f2):\n","  return np.linalg.norm(f1-f2)\n","\n","\n","\n","# ------------------------ params ------------------------  #\n","selected_i = 500\n","input_size = 100\n","\n","\n","\n","#   1. 선택된 인덱스를 입력받았을 때, input generating 형태만 만들어놓고,     #\n","#   1-1. input cols 필요함    #\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower']\n","# senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","# senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","\n","sma_list = ['sma']\n","\n","#     -------------- outer price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","cctbbo_list = ['cctbbo']\n","\n","selected_price_colname = basic_list + senkoua_list + senkoub_list + sar_list\n","selected_outprice_colname = [macd_list]\n","\n","\n","#         global scaling for outer price data       #\n","#         1. nan 처리       #\n","\n","# # print((np.isnan(df.values)))\n","# print(\"np.sum(np.isnan(df.values), axis=0) :\", np.sum(np.isnan(df.values), axis=0))\n","\n","# max_nan = np.max(np.sum(np.isnan(df.values), axis=0))\n","# # print(max_nan)\n","\n","# df = df.iloc[max_nan:-max_nan]\n","\n","# total_gdata = []\n","# for g_col in selected_outprice_colname:\n","\n","#   temp_data = min_max_scale(res_df[g_col])\n","#   total_gdata.append(temp_data)\n","\n","\n","\n","#   1-2. cols 에 따른, scaling method 구분함    #\n","onprice_input_x = min_max_scale(res_df[selected_price_colname].iloc[selected_i - input_size:selected_i].values)\n","print(onprice_input_x.shape)\n","\n","\n","#   2. plot_check 에서 본인이 원하는 shape 의 인덱스를 선택   #\n","#   3. vertorize, \n","#   3-1. input generator 를 이용해 entry signal 발생할 때마다 dist 비교 진행    #\n","re_onprice_input_x = expand_dims(onprice_input_x)\n","print(re_onprice_input_x.shape)\n","      \n","# break\n","\n","selected_vector = model.predict(re_onprice_input_x, verbose=1)\n","print(selected_vector.shape)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"OJqkmkpsLCYC"},"source":["### tr_tresh calc"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gcpo4MGd9Wm4","executionInfo":{"status":"ok","timestamp":1636015063790,"user_tz":-540,"elapsed":446,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"434b56b3-3a3c-45c1-f559-42681fea5f05"},"source":["res_wr = 0.6\n","# tr_thresh = 1\n","# tr_thresh = ((1 - res_wr) / res_wr) ** 0.5\n","tr_thresh = ((1 - res_wr) / res_wr) + 0.01\n","# tr_thresh = 2.6\n","print(\"res_wr :\", res_wr)\n","print(\"tr_thresh :\", tr_thresh)\n","\n","\n","#   단리    #\n","trade_num = 1000\n","asset = 1 # thousand USDT\n","test_loss_gap = 0.95  # fee adjusted\n","test_pr_gap = 1 + (1 - test_loss_gap) * tr_thresh\n","\n","test_loss_cnt = trade_num * (1 - res_wr)\n","test_pr_cnt = trade_num * res_wr\n","\n","test_trade_list = [test_pr_gap] * int(test_pr_cnt) + [test_loss_gap] * int(test_loss_cnt)\n","random.shuffle(test_trade_list)\n","# print(\"len(test_trade_list) :\", len(test_trade_list))\n","print(test_trade_list[:10])\n","print()\n","\n","# print(\"%.5f\" % np.cumprod(test_trade_list)[-1])\n","for tr_thresh_ in np.arange(1, 3, 0.2):\n","  if (1 + (1 - test_loss_gap) * tr_thresh_) ** test_pr_cnt * test_loss_gap ** test_loss_cnt > 1:\n","    break\n","print(\"복리를 위한 tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumprod(test_trade_list)[-1] :\", np.cumprod(test_trade_list)[-1])\n","print(\"total_pr : \", np.cumprod(test_trade_list)[-1])\n","print()\n","#   복리 tr_thresh  #\n","#   1. trade_num 에 영향 받지 않음\n","#   2. loss_gap 에 비례함\n","\n","for tr_thresh_ in np.arange(1, 3, 0.01):\n","  if ((1 - test_loss_gap) * tr_thresh_) * test_pr_cnt + (test_loss_gap - 1) * test_loss_cnt > 0:\n","    break\n","np_test_trade = np.array(test_trade_list) - 1\n","print(np_test_trade[:10])\n","# print(\"%.3f\" % )\n","print(\"단리를 위한 tr_thresh_ :\", tr_thresh_)\n","# print(\"tr_thresh :\", tr_thresh)\n","print(\"np.cumsum(np_test_trade)[-1] :\", np.cumsum(np_test_trade)[-1])\n","print(\"total_pr : \", 1 + np.cumsum(np_test_trade)[-1])\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["res_wr : 0.6\n","tr_thresh : 0.6766666666666667\n","[0.95, 1.0338333333333334, 0.95, 0.95, 1.0338333333333334, 0.95, 0.95, 1.0338333333333334, 0.95, 1.0338333333333334]\n","\n","복리를 위한 tr_thresh_ : 1.0\n","np.cumprod(test_trade_list)[-1] : 0.5751227991397774\n","total_pr :  0.5751227991397774\n","\n","[-0.05        0.03383333 -0.05       -0.05        0.03383333 -0.05\n"," -0.05        0.03383333 -0.05        0.03383333]\n","단리를 위한 tr_thresh_ : 1.0\n","np.cumsum(np_test_trade)[-1] : 0.30000000000001137\n","total_pr :  1.3000000000000114\n"]}]},{"cell_type":"markdown","metadata":{"id":"5duWn8t4BRyv"},"source":["### lastest platform"]},{"cell_type":"code","metadata":{"id":"lUJTZV7kjX0H","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636385145087,"user_tz":-540,"elapsed":405,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"eb6c5565-6b71-47eb-d731-7060bf3834ed"},"source":["# res_df.columns\n","# res_df.head()\n","# res_df.index[-100000]\n","\"cloud_bline_30m\" in res_df.columns"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":29}]},{"cell_type":"code","metadata":{"id":"q_4E-zH02WJy","executionInfo":{"status":"ok","timestamp":1637654474675,"user_tz":-540,"elapsed":375,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}}},"source":["#     caution : MARKET / LIMIT spelling   #\n","\n","param_dict = \\\n","{\n","  \"init_set\": {\n","    \"run\": 1,\n","    \"df_log\": 0,\n","    \"bar_close_second\": 59,\n","    \"realtime_term\": 0.01,\n","    \"last_index\": -2,\n","    \"limit_fee\": 0.0002,\n","    \"market_fee\": 0.0004,\n","    \"initial_asset\": 5000,\n","    \"asset_changed\" : 1,\n","    \"symbol\": \"ETHUSDT\",\n","    \"symbol_changed\": 0,\n","    \"interval_list\": [\n","      \"1m\",\n","      \"15m\",\n","      \"None\"\n","    ],\n","    \"row_list\": [\n","      200,\n","      100,\n","      100\n","    ],\n","    \"api_retry_term\": 3,\n","    \"save_stacked_df\": 0,\n","    \"stacked_df_exist\": 1\n","  },\n","  \"ep_set\": {\n","    \"short_entry_score\": -1,\n","    \"tr_thresh\": .94,\n","    \"dr_error\": 0.1,\n","    \"bbwp_thresh\": 0.5,\n","    \"entry_incycle\": 5,\n","    \"htf_entry\": 5,\n","    \"entry_type\": \"LIMIT\",\n","    \"static_ep\": 1,\n","    \"tpout_onexec\": 0,\n","    \"ep_gap\": 0.083,\n","    \"max_eplim_pct\": 0.05,\n","    \"min_eplim_pct\": 0.013,\n","    \"short_inversion\": 0,\n","    \"long_inversion\": 0,\n","    \"check_entry_sec\": 10,\n","    \"entry_execution_wait\": 60,\n","    \"breakout_qty_ratio\": 0.97\n","  },\n","  \"out_set\": {\n","    \"out_type\": \"MARKET\",\n","    \"exit_execution_wait\": 60,\n","    \"close_complete_term\": 5,\n","    \"use_out\": 1,\n","    \"static_out\": 1,\n","    \"out_gap\": -0.5,\n","    \"hl_out\": 1,\n","    \"price_restoration\": 0,\n","    \"retouch\": 0,\n","    \"retouch_out_period\": 500,\n","    \"second_out\": 0,\n","    \"approval_st_gap\": 1.5,\n","    \"second_out_gap\": 0.5\n","  },\n","  \"tp_set\": {\n","    \"non_tp\": 0,\n","    \"tp_type\": \"LIMIT\",\n","    \"static_tp\": 1,\n","    \"tp_gap\": 0.36,\n","    \"partial_num\": 1,\n","    \"partial_qty_divider\": 1.5\n","  },\n","  \"lvrg_set\": {\n","    \"leverage\": 2,\n","    \"static_lvrg\": 0,\n","    \"allow_float\": 0,\n","    \"target_pct\": 0.1,\n","    \"lvrg_rejection\": 0\n","  }\n","}\n","\n","config = EasyDict(param_dict)\n","# param_json = json.dumps(param_dict, indent=2)"],"execution_count":20,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"TdAn2bHHBWMF","executionInfo":{"status":"ok","timestamp":1637655398838,"user_tz":-540,"elapsed":31031,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"75f474cb-22c5-41ac-cbfe-3b24c84322c9"},"source":["# ------- tp / out fee calc ------- #\n","if config.ep_set.entry_type == 'MARKET':\n","  if config.tp_set.tp_type == 'LIMIT':\n","    tp_fee = config.init_set.market_fee + config.init_set.limit_fee\n","  else:\n","    tp_fee = config.init_set.market_fee + config.init_set.market_fee\n","  out_fee = config.init_set.market_fee + config.init_set.market_fee\n","else:\n","  if config.tp_set.tp_type == 'LIMIT':\n","    tp_fee = config.init_set.limit_fee + config.init_set.limit_fee\n","  else:\n","    tp_fee = config.init_set.limit_fee + config.init_set.market_fee\n","  out_fee = config.init_set.limit_fee + config.init_set.market_fee\n","  \n","\n","# ------- inversion set ------- #\n","inversion = 0\n","  \n","fdist_thresh = 1\n","\n","# ----------------- indicator ----------------- #\n","# ------- shift_size ------- #\n","cloud_shift_size = 1\n","sma_shift_size = 1\n","close_shift_size = 1\n","\n","\n","# ------- lb ------- #\n","# cloud_lookback = 30\n","cloud_lookback = 69\n","# cloud_lookback = 150\n","# cloud_lookback = 10\n","\n","sma_lookback = 100\n","# sma_lookback = 100\n","\n","sar_lookback = 5\n","\n","\n","# ------- indi. params ------- #\n","\n","# sma_period = 60\n","\n","fisher_upper = 1.5\n","fisher_lower = -1.5\n","\n","stoch_upper = 67\n","stoch_lower = 33\n","\n","cctbbo_upper = 80\n","cctbbo_lower = 20\n","\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","\n","pd.set_option('display.max_rows', 500)\n","pd.set_option('display.max_columns', 500)\n","pd.set_option('display.width', 1000)\n","\n","for key in ftr_list:\n","\n","  if config.init_set.symbol in key:\n","    pass\n","  else:\n","    continue\n","\n","  # break\n","\n","  res_df = pd.read_feather(os.path.join(save_path, dir_path, \"concat\", key), columns=None, use_threads=True).set_index(\"index\") #.iloc[-100000:]\n","  print(key, \"loaded !\")\n","  \n","  # print(\"res_df.columns :\", res_df.columns)  \n","  # print(res_df.tail(100))\n","  # print(\"res_df.index[0] :\", res_df.index[0])\n","  # # print(\"intmin(res_df.index[0]) :\", intmin(res_df.index[0]))\n","  # break\n","\n","  # -------------------- additional indi. -------------------- #    \n","  np_timeidx = np.array(list(map(lambda x : intmin(x), res_df.index)))\n","\n","   # --------------- level function --------------- #\n","  # res_df = st_level(res_df, '3m', 1)\n","  res_df = st_level(res_df, '5m', 1)\n","  res_df = st_level(res_df, '15m', 1)\n","  res_df = st_level(res_df, '30m', 1)\n","  res_df = st_level(res_df, '1h', 1)\n","  res_df = st_level(res_df, '4h', 1)\n","\n","  # res_df = bb_level(res_df, '1m', 1)\n","  res_df = bb_level(res_df, '5m', 1)\n","  res_df = bb_level(res_df, '15m', 1)\n","  res_df = bb_level(res_df, '30m', 1)\n","  res_df = bb_level(res_df, '1h', 1)\n","  res_df = bb_level(res_df, '4h', 1)\n","\n","  res_df = dc_level(res_df, '5m', 1)\n","  res_df = dc_level(res_df, '15m', 1)\n","  res_df = dc_level(res_df, '30m', 1)\n","  res_df = dc_level(res_df, '1h', 1)\n","  res_df = dc_level(res_df, '4h', 1)\n","  \n","  res_df['short_rtc_1'] = res_df['bb_lower_5m']\n","  res_df['short_rtc_0'] = res_df['dc_upper_5m']\n","  res_df['short_rtc_gap'] = res_df['short_rtc_0'] - res_df['short_rtc_1']\n","  \n","  res_df['short_rtc_1'] = res_df['bb_lower_5m']\n","  res_df['short_rtc_0'] = res_df['dc_upper_5m']\n","  res_df['short_rtc_gap'] = res_df['short_rtc_0'] - res_df['short_rtc_1']\n","\n","  res_df['long_rtc_1'] = res_df['bb_upper_5m']\n","  res_df['long_rtc_0'] = res_df['dc_lower_5m']\n","  res_df['long_rtc_gap'] = res_df['long_rtc_1'] - res_df['long_rtc_0']\n","\n","  # res_df['bbwp'], res_df['bbwp_ma'] = bbwp(res_df['bb_gap_1m'], res_df['st_gap_5m'])\n","\n","  # break\n","\n","    # --------------- sma --------------- #    \n","  # res_df['sma_1m'] = res_df['close'].rolling(60).mean()  \n","\n","   # --------------- ema --------------- #   \n","  # res_df['ema5_1m'] = ema(res_df['close'], 5).shift(1)\n","\n","  #   # --------------- cloud bline --------------- #   \n","  # res_df['cloud_bline_1m'] = cloud_bline(res_df, 26).shift(1)\n","  \n","    #       stochastic      #\n","  # res_df['stoch'] = stoch(res_df, 5, 3, 3)\n","\n","    #       fisher      #\n","  # res_df['fisher30'] = fisher(res_df, 30)\n","  # res_df['fisher60'] = fisher(res_df, 60)\n","  # res_df['fisher120'] = fisher(res_df, 120)\n","\n","    #       cctbbo      #\n","  # res_df['cctbbo'], _ = cct_bbo(res_df, 21, 13)\n","\n","    #       ema_roc      #\n","  # res_df['ema_roc'] = ema_roc(res_df['close'], 13, 9)\n","\n","\n","   # ------------------------------ htf data ------------------------------ #    \n","\n","  #             Todo              #\n","  # htf_df = pd.read_excel(date_path2 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # htf_df = pd.read_excel(date_path3 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # htf_df = pd.read_excel(date_path4 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # htf_df = pd.read_excel(date_path5 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","  # # # # # # htf_df = pd.read_excel(date_path6 + key.replace(\"_st1h_backi2\", \"\"), index_col=0)\n","\n","  # # ---- htf index slicing ---- #\n","  # htf_df = htf_df.loc[:res_df.index[-1]]\n","  \n","  # print(\"res_df.index[-1] :\", res_df.index[-1])\n","  # print(\"htf_df.index[-1] :\", htf_df.index[-1])\n","\n","  # res_df = dc_line(res_df, htf_df, '5m')\n","  # res_df = dc_level(res_df, '5m', 1)\n","\n","\n","  # # # if \"sma4\" in res_df.columns:\n","  # # #   res_df.drop(\"sma4\", axis=1, inplace=1)\n","\n","  # # htf_df['sma'] = htf_df['close'].rolling(60).mean()\n","  # # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf(res_df, htf_df, [-1]), columns=['sma_30m']))\n","  \n","  # htf_df['stoch'] = stoch(htf_df, 13, 3, 3)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf(res_df, htf_df, [-1], backing_i=-1), columns=['stoch_5m']))\n","\n","   \n","  # fifth_df['ema'] = ema(fifth_df['close'], 5)\n","  # res_df = res_df.join(pd.DataFrame(index=res_df.index, data=to_lower_tf(res_df, fifth_df, [-1]), columns=['ema5']))\n","\n","  interval_list = ['15m', '30m', '1h', '4h']\n","  interval_list = ['3m', '5m', '15m', '30m', '1h', '4h']\n","\n","  x_val_list = np.arange(0.225, 0.2, -0.002)\n","  y_val_cols = [\"wr\", \"frq\", \"min_pr\", \"acc_pr\", \"sum_pr\", \"liqd\", \"tr\", \"dr\"]\n","  survey_df = pd.DataFrame(index=x_val_list, columns=y_val_cols)\n","  short_survey_df = pd.DataFrame(index=x_val_list, columns=y_val_cols)\n","  long_survey_df = pd.DataFrame(index=x_val_list, columns=y_val_cols)\n","\n","  for survey_i, just_loop in enumerate(range(1)):\n","  # for survey_i, config.ep_set.tr_thresh in enumerate(x_val_list): \n","  # for survey_i, config.ep_set.dr_error in enumerate(x_val_list): \n","  # for survey_i, config.ep_set.ep_gap in enumerate(x_val_list): \n","  # for survey_i, config.out_set.out_gap in enumerate(x_val_list): \n","  # for survey_i, config.tp_set.tp_gap in enumerate(x_val_list): \n","  # for survey_i, config.ep_set.entry_incycle in enumerate(x_val_list):\n","  # for survey_i, config.ep_set.htf_entry in enumerate(x_val_list)::\n","  # for survey_i, config.ep_set.bbwp_thresh in enumerate(x_val_list): \n","  # for survey_i, config.lvrg_set.leverage in enumerate(x_val_list)::\n","  # for survey_i, config.lvrg_set.target_pct in enumerate(x_val_list): \n","  # for survey_i, config.ep_set.max_eplim_pct in enumerate(x_val_list)::\n","  # for survey_i, config.ep_set.min_enumerate(x_val_list)::\n","  # for survey_i, sma_period in enumerate(x_val_list)::\n","  # for survey_i, ep_protect_gap in enumerate(x_val_list)::\n","  # for survey_i, cloud_lookback in enumerate(x_val_list): \n","  # for survey_i, bbg in enumerate(x_val_list)::\n","  # for survey_i, ei_k in enumerate(x_val_list):\n","  # for survey_i, dc_tp_k in enumerate(x_val_list):\n","  # for survey_i, bbz_interval in enumerate(interval_list):\n","  # for survey_i, cb_interval in enumerate(interval_list):\n","\n","    ei_k = 0.36\n","    print(\"ei_k :\", ei_k)\n","\n","    dc_tp_k = 0.225\n","    print(\"dc_tp_k :\", dc_tp_k)\n","    \n","    bbz_interval = '30m'\n","    print(\"bbz_interval :\", bbz_interval)\n","    \n","    cb_interval = '30m'\n","    print(\"cb_interval :\", cb_interval)\n","    \n","    # tp_lb_period = 100\n","    # res_df['low_lb'] = res_df['low'].rolling(tp_lb_period).min()\n","    # res_df['high_lb'] = res_df['high'].rolling(tp_lb_period).max()\n","    # config.out_set.out_gap = config.tp_set.tp_gap / config.ep_set.tr_thresh\n","        \n","    print(\"config.ep_set.tr_thresh :\", config.ep_set.tr_thresh)\n","    print(\"config.ep_set.dr_error :\", config.ep_set.dr_error)\n","    print(\"config.ep_set.htf_entry :\", config.ep_set.htf_entry)\n","    print(\"config.ep_set.ep_gap :\", config.ep_set.ep_gap)\n","    print(\"config.out_set.out_gap :\", config.out_set.out_gap)\n","    print(\"config.tp_set.tp_gap :\", config.tp_set.tp_gap)\n","    print(\"config.ep_set.bbwp_thresh :\", config.ep_set.bbwp_thresh)\n","    print(\"config.ep_set.entry_incycle :\", config.ep_set.entry_incycle)\n","    print(\"config.lvrg_set.leverage :\", config.lvrg_set.leverage)\n","    print(\"config.lvrg_set.target_pct :\", config.lvrg_set.target_pct)\n","    print(\"config.ep_set.max_eplim_pct :\", config.ep_set.max_eplim_pct)\n","    print(\"config.ep_set.min_eplim_pct :\", config.ep_set.min_eplim_pct)\n","\n","    # res_df['sma_1m'] = res_df['close'].rolling(sma_period).mean()  \n","\n","    # res_df = bb_level(res_df, '5m', bbg)\n","    \n","    \n","\n","    # ---------------------------------------- short = -1 ---------------------------------------- #\n","    res_df['entry'] = np.zeros(len(res_df))\n","\n","\n","    # -------- set ep level -------- #\n","    \n","    #       limit ver.     #\n","      #        bb ep         #    \n","    res_df['short_ep'] = res_df['bb_lower_5m'] + res_df['short_rtc_gap'] * config.ep_set.ep_gap\n","    res_df['long_ep'] = res_df['bb_upper_5m'] - res_df['long_rtc_gap'] * config.ep_set.ep_gap\n","    \n","    # res_df['short_ep'] = res_df['open'] + res_df['st_gap_30m'] * config.ep_set.ep_gap\n","    # res_df['long_ep'] = res_df['open'] - res_df['st_gap_30m'] * config.ep_set.ep_gap\n","    \n","      #          % ep           #    \n","    # res_df['short_ep'] = res_df['open'] * (1 / (1 + res_df['st_gap_30m'] * config.ep_set.ep_gap / res_df['open']))\n","    # res_df['long_ep'] = res_df['open'] * (1 / (1 + res_df['st_gap_30m'] * config.ep_set.ep_gap / res_df['open']))\n","\n","    #       market ver.     #\n","    if config.ep_set.entry_type == \"MARKET\":\n","      res_df['short_ep'] = res_df['close']\n","      res_df['long_ep'] = res_df['close']\n","\n","    # short_ep_out = res_df['st_base_5m']\n","    # long_ep_out = res_df['st_base_5m']\n","\n","\n","    # ---------------- ep_time  ---------------- #\n","\n","    #          timestamp entry         #        \n","    # res_df['entry'] = np.where((np_timeidx % config.ep_set.htf_entry == 0)\n","    #                     , res_df['entry'] - 1, res_df['entry'])\n","\n","    #          st entry          #    \n","    # res_df['entry'] = np.where((np_timeidx % config.ep_set.htf_entry == (config.ep_set.htf_entry - 1)) &\n","    #                            (res_df['close'] < res_df['st_lower_15m'])\n","    #                     , res_df['entry'] - 1, res_df['entry'])  \n","                        # , res_df['entry'] + 1, res_df['entry'])  \n","\n","    #        stoch entry        #       \n","    # res_df['entry'] = np.where((res_df['stoch_5m'].shift(config.ep_set.htf_entry * 2) < res_df['stoch_5m'].shift(config.ep_set.htf_entry * 1)) &\n","    #                 (res_df['stoch_5m'].shift(config.ep_set.htf_entry * 1) > res_df['stoch_5m']) & \n","    #                 (res_df['stoch_5m'].shift(config.ep_set.htf_entry * 1) > stoch_upper) & \n","    #                 (np_timeidx % config.ep_set.htf_entry == (config.ep_set.htf_entry - 1))\n","    #                 , res_df['entry'] - 1, res_df['entry']) \n","    \n","    #        st level entry      #       \n","    # res_df['entry'] = np.where((res_df['close'].shift(config.ep_set.htf_entry * 1) >= res_df['st_lower_15m']) &\n","    #                 (res_df['close'] < res_df['st_lower_15m']) &\n","    #                 (np_timeidx % config.ep_set.htf_entry == (config.ep_set.htf_entry - 1))\n","    #                 , res_df['entry'] - 1, res_df['entry']) \n","    \n","\n","    #        bb level entry      #    \n","    # res_df['entry'] = np.where((res_df['close'].shift(config.ep_set.htf_entry * 1) >= res_df['bb_lower_5m']) &\n","    res_df['entry'] = np.where((res_df['open'] >= res_df['bb_lower_5m']) &\n","                    # (res_df['close'].shift(config.ep_set.htf_entry * 1) <= res_df['bb_lower_5m']) &\n","                    (res_df['close'] < res_df['bb_lower_5m']) &\n","                    (np_timeidx % config.ep_set.htf_entry == (config.ep_set.htf_entry - 1))\n","                    , res_df['entry'] - 1, res_df['entry']) \n","    \n","    # entry = np.where((res_df['close'].shift(1) >= res_df['bb_lower_1m']) & \n","    #                 (res_df['close'] < res_df['bb_lower_1m'])\n","    #                 , entry - 1, entry) \n","    # entry = np.where((res_df['close'].shift(1) >= res_df['bb_lower_1m'].shift(1)) & \n","    #                 (res_df['close'] < res_df['bb_lower_1m'])\n","    #                 , entry - 1, entry)           \n","\n","    # print(\"len(entry[entry==-1]) :\", len(entry[entry==-1]))\n","    # break    \n","\n","\n","\n","    # ---------------------------------------- long = 1 ---------------------------------------- #\n","    \n","    # ---------------------- ep_time ---------------------- #    \n","\n","    #        timestamp entry        #       \n","    # res_df['entry'] = np.where((np_timeidx % config.ep_set.htf_entry == 0)\n","    #                     , res_df['entry'] + 1, res_df['entry'])  \n","\n","    # res_df['entry'] = np.where((np_timeidx % config.ep_set.htf_entry == (config.ep_set.htf_entry - 1)) &\n","    #                            (res_df['close'] > res_df['st_upper_15m'])\n","    #                     , res_df['entry'] + 1, res_df['entry'])     \n","    #                     # , res_df['entry'] - 1, res_df['entry'])     \n","    \n","    #        st entry        #    \n","    # entry = np.where((res_df['st_lower3_5m'] + res_df['st_gap_5m'] >= res_df['close'].shift(1)) &\n","    #                  (res_df['close'].shift(1) >= res_df['st_lower3_5m'])\n","    #                 , entry + 1, entry) \n","    # entry = np.where((long_ep + res_df['st_gap_5m'] >= res_df['close'].shift(1)) &\n","    #   (res_df['close'].shift(1) >= long_ep)\n","    # , entry + 1, entry) \n","     \n","\n","    #        stoch entry        #               \n","    # res_df['entry'] = np.where((res_df['stoch_5m'].shift(config.ep_set.htf_entry * 2) > res_df['stoch_5m'].shift(config.ep_set.htf_entry * 1)) &\n","    #                 (res_df['stoch_5m'].shift(config.ep_set.htf_entry * 1) < res_df['stoch_5m']) & \n","    #                 (res_df['stoch_5m'].shift(config.ep_set.htf_entry * 1) < stoch_lower) & \n","    #                 (np_timeidx % config.ep_set.htf_entry == (config.ep_set.htf_entry - 1))\n","    #                 , res_df['entry'] + 1, res_df['entry']) \n","    \n","    # #      st level entry      #       \n","    # res_df['entry'] = np.where((res_df['close'].shift(config.ep_set.htf_entry * 1) <= res_df['st_upper_15m']) &      \n","    #                   (res_df['close'] > res_df['st_upper_15m']) &\n","    #                 (np_timeidx % config.ep_set.htf_entry == (config.ep_set.htf_entry - 1))\n","    #                 , res_df['entry'] + 1, res_df['entry']) \n","    \n","    # print(\"entry[entry!=0] :\", entry[entry!=0])\n","    # break\n","    \n","    \n","    #      bb level entry      #\n","    # res_df['entry'] = np.where((res_df['close'].shift(config.ep_set.htf_entry * 1) <= res_df['bb_upper_5m']) &      \n","    res_df['entry'] = np.where((res_df['open'] <= res_df['bb_upper_5m']) &      \n","                      # (res_df['close'].shift(config.ep_set.htf_entry * 1) >= res_df['bb_upper_5m']) &     \n","                      (res_df['close'] > res_df['bb_upper_5m']) &\n","                    (np_timeidx % config.ep_set.htf_entry == (config.ep_set.htf_entry - 1))\n","                    , res_df['entry'] + 1, res_df['entry']) \n","\n","\n","\n","    # ------------------------------ rtc tp & out ------------------------------ #\n","    \n","      # --------------- hl out --------------- #    \n","    # short_out = res_df['high'] + res_df['st_gap_15m'] * config.out_set.out_gap\n","    # long_out = res_df['low'] - res_df['st_gap_15m'] * config.out_set.out_gap\n","\n","      # --------------- st level consolidation out --------------- #    \n","    # short_out = res_df['st_lower_15m'] + res_df['st_gap_15m'] * config.out_set.out_gap\n","    # long_out = res_df['st_upper_15m'] - res_df['st_gap_15m'] * config.out_set.out_gap\n","\n","    # short_out = res_df['st_lower_5m'] + res_df['st_gap_5m'] * config.out_set.out_gap\n","    # long_out = res_df['st_upper_5m'] - res_df['st_gap_5m'] * config.out_set.out_gap\n","    \n","    # res_df['short_out'] = res_df['close'] + res_df['st_gap_5m'] * config.out_set.out_gap - res_df['close'] * (tp_fee / config.ep_set.tr_thresh + out_fee)\n","    # res_df['long_out'] = res_df['close'] - res_df['st_gap_5m'] * config.out_set.out_gap + res_df['close'] * (tp_fee / config.ep_set.tr_thresh + out_fee)\n","\n","    # --------------- bb rtc out --------------- #   \n","    res_df['short_out'] = res_df['short_rtc_0'] + res_df['short_rtc_gap'] * config.out_set.out_gap\n","    res_df['long_out'] = res_df['long_rtc_0'] - res_df['long_rtc_gap'] * config.out_set.out_gap\n","\n","    # short_out = short_ep + res_df['st_gap_5m'] * config.out_set.out_gap\n","    # long_out = long_ep - res_df['st_gap_5m'] * config.out_set.out_gap\n","\n","\n","      # --------------- cloud_bline rolling out --------------- #    \n","    # short_out = res_df['cloud_bline1']\n","    # long_out = res_df['cloud_bline1']\n","\n","      # --------------- ema rolling out --------------- #    \n","    # short_out = res_df['ema1_5']\n","    # long_out = res_df['ema1_5']\n","    \n","\n","      # --------------- mmh_st rolling out --------------- #    \n","    # short_out = res_df['mmh_st1']\n","    # long_out = res_df['mmh_st1']\n","\n","      # --------------- st rolling out --------------- #     \n","\n","    # short_out = res_df['lower_middle%s' % basic_st_number]\n","    # long_out = res_df['upper_middle%s' % basic_st_number]\n","\n","    # short_out = res_df['upper_middle%s' % basic_st_number]\n","    # long_out = res_df['lower_middle%s' % basic_st_number]\n","\n","    # short_out = short_ep + res_df['st_gap%s' % basic_st_number] * config.out_set.out_gap\n","    # long_out = long_ep - res_df['st_gap%s' % basic_st_number] * config.out_set.out_gap\n","    \n","    # short_out2 = res_df['lower_middle]\n","    # long_out2 = res_df['upper_middle]\n","    \n","    # short_out = short_ep + res_df['st_gap']\n","    # long_out = long_ep - res_df['st_gap']\n","    \n","\n","    # ------------------------------ tp ------------------------------ #\n","\n","    # --------------- st level tp --------------- #    \n","    # short_tp = short_ep - res_df['st_gap_5m'] * config.tp_set.tp_gap\n","    # long_tp = long_ep + res_df['st_gap_5m'] * config.tp_set.tp_gap\n","\n","    # res_df['short_tp'] = res_df['close'] - res_df['st_gap_5m'] * config.tp_set.tp_gap\n","    # res_df['long_tp'] = res_df['close'] + res_df['st_gap_5m'] * config.tp_set.tp_gap\n","    \n","    # --------------- bb rtc tp --------------- #  \n","    res_df['short_tp'] = res_df['short_rtc_1'] - res_df['short_rtc_gap'] * config.tp_set.tp_gap\n","    res_df['long_tp'] = res_df['long_rtc_1'] + res_df['long_rtc_gap'] * config.tp_set.tp_gap\n","\n","    # short_tp = res_df['st_lower_30m'] - res_df['st_gap_30m'] * config.tp_set.tp_gap\n","    # long_tp = res_df['st_upper_30m'] + res_df['st_gap_30m'] * config.tp_set.tp_gap\n","\n","    # short_tp = res_df['bb_lower3_5m'] - res_df['bb_gap_5m'] * config.tp_set.tp_gap\n","    # long_tp = res_df['bb_upper3_5m'] + res_df['bb_gap_5m'] * config.tp_set.tp_gap\n","\n","    # --------------- mmh_st tp --------------- #    \n","\n","    # short_tp = res_df['close'] - config.tp_set.tp_gap * abs(res_df['mmh_st1'] - res_df['close'])\n","    # long_tp = res_df['close'] + config.tp_set.tp_gap * abs(res_df['mmh_st1'] - res_df['close'])\n","\n","    # short_tp2 = res_df['close'] - config.tp_set.tp_gap / 2 * abs(res_df['mmh_st1'] - res_df['close'])\n","    # long_tp2 = res_df['close'] + config.tp_set.tp_gap / 2 * abs(res_df['mmh_st1'] - res_df['close'])\n","\n","    # --------------- st rolling tp --------------- #    \n","    # short_tp = res_df['min_lower%s' % basic_st_number]\n","    # long_tp = res_df['max_upper%s' % basic_st_number]    \n","\n","    # short_tp = short_ep - res_df['st_gap%s' % basic_st_number] * config.tp_set.tp_gap\n","    # long_tp = long_ep + res_df['st_gap%s' % basic_st_number] * config.tp_set.tp_gap\n","\n","\n","\n","\n","    # --------------- set partial tp --------------- #\n","\n","    short_tps = [res_df['short_tp']]\n","    long_tps = [res_df['long_tp']]\n","\n","    # short_tps = [short_tp2]\n","    # long_tps = [long_tp2]\n","\n","    # short_tps = [short_tp2, short_tp] # org\n","    # long_tps = [long_tp2, long_tp]\n","    \n","    # short_tps = [short_tp, short_tp2]\n","    # long_tps = [long_tp, long_tp2]\n","\n","\n","\n","    #       trading : 여기도 체결 결과에 대해 묘사함       #\n","    trade_list = []\n","    h_trade_list = []\n","    leverage_list = []\n","    fee_list = []\n","    short_fee_list = []\n","    long_fee_list = []\n","    open_list = []\n","\n","    tp_ratio_list = []\n","    short_tp_ratio_list = []\n","    long_tp_ratio_list = []\n","\n","    dr_list = []\n","    short_dr_list = []\n","    long_dr_list = []\n","\n","    liqd_list = []\n","    short_liqd_list = []\n","    long_liqd_list = []\n","\n","    nontp_liqd_list = []\n","    nontp_short_liqd_list = []\n","    nontp_long_liqd_list = []\n","\n","    nontp_pr_list = []\n","    nontp_short_pr_list = []\n","    nontp_long_pr_list = []\n","\n","    nontp_short_indexs = []\n","    nontp_long_indexs = []\n","\n","    nontp_short_ep_list = []\n","    nontp_long_ep_list = []\n","\n","    pr_list = []\n","    long_list = []\n","    short_list = []\n","\n","    h_pr_list = []\n","    h_long_list = []\n","    h_short_list = []\n","\n","    ep_tp_list = []\n","    h_ep_tp_list = []\n","    tp_state_list = []\n","\n","    i = 0\n","    while 1:\n","    # for i in range(len(res_df)):  \n","    \n","      # ------- fee init ------- #\n","      if config.ep_set.entry_type == 'LIMIT':\n","        fee = config.init_set.limit_fee\n","      else:\n","        fee = config.init_set.market_fee\n","\n","\n","      # ------- mr_score init ------- #\n","      mr_const_cnt = 0\n","      mr_score = 0\n","\n","\n","      if res_df['entry'][i] == config.ep_set.short_entry_score: \n","\n","        # print(\"i in short :\", i)\n","\n","        initial_i = i\n","\n","        if config.out_set.static_out:\n","          p_i = initial_i\n","        else:\n","          p_i = i\n","\n","\n","        # -------------- tr scheduling -------------- #        \n","        mr_const_cnt += 1\n","        if (res_df['short_ep'].iloc[i] - res_df['short_tp'].iloc[i] - tp_fee * res_df['short_ep'].iloc[i]) / (res_df['short_out'].iloc[i] - res_df['short_ep'].iloc[i] + out_fee * res_df['short_ep'].iloc[i]) >= config.ep_set.tr_thresh:\n","        # if (res_df['short_ep'].iloc[i] - res_df['short_tp'].iloc[i] - tp_fee * res_df['short_ep'].iloc[i]) / (res_df['short_out'].iloc[i] - res_df['short_ep'].iloc[i] + tp_fee * res_df['short_ep'].iloc[i]) >= config.ep_set.tr_thresh:\n","        # if (res_df['short_ep'].iloc[i] - res_df['short_tp'].iloc[i] - tp_fee * res_df['short_ep'].iloc[i]) / (res_df['short_out'].iloc[i] - res_df['short_ep'].iloc[i] + out_fee * res_df['short_ep'].iloc[i]) == config.ep_set.tr_thresh:\n","        # if (res_df['short_ep'].iloc[i] - res_df['short_tp'].iloc[i] - out_fee * res_df['short_ep'].iloc[i]) / (res_df['short_out'].iloc[i] - res_df['short_ep'].iloc[i] + out_fee * res_df['short_ep'].iloc[i]) >= config.ep_set.tr_thresh:\n","          mr_score += 1\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == 'MARKET':\n","        #   mr_const_cnt += 1\n","        #   if (res_df['close'].iloc[i] - res_df['short_tp'].iloc[i]) / (res_df['short_out'].iloc[i] - res_df['close'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error):  \n","        #     mr_score += 1\n","\n","        \n","        # -------------- dtk -------------- #\n","        mr_const_cnt += 1\n","        if res_df['dc_lower_5m'].iloc[i] >= res_df['short_rtc_1'].iloc[i] - res_df['short_rtc_gap'].iloc[i] * dc_tp_k:\n","          mr_score += 1             \n","\n","           \n","        # ------- entry once ------- #   \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == 1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == -1:\n","        #     prev_entry_cnt += 1          \n","        # # # print(\"prev_entry_cnt :\", prev_entry_cnt)\n","\n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","        # ------- htf zoning ------- #   \n","        mr_const_cnt += 1\n","        #   #       bb zone     #\n","        if res_df['close'].iloc[i] < res_df['bb_base_%s' % bbz_interval].iloc[i]:\n","        # if res_df['close'].iloc[i] < res_df['bb_lower_%s' % bbz_interval].iloc[i]:\n","        # if res_df['close'].iloc[i] < res_df['bb_lower2_%s' % bbz_interval].iloc[i]:\n","        # if res_df['close'].iloc[i] < res_df['bb_lower2_1h'].iloc[i]:\n","        # if res_df['close'].iloc[i] < res_df['bb_base_1h'].iloc[i]:\n","\n","        #   #       cbline zone     #\n","        # # if res_df['close'].iloc[i] < res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","          mr_score += 1\n","\n","  \n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['low'].iloc[i] > res_df['short_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","\n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1\n","\n","\n","        # -------------- mr_score summation -------------- #\n","        if mr_score == mr_const_cnt:          \n","          pass\n","\n","        else:\n","          i += 1\n","          if i >= len(res_df):\n","            break\n","          continue\n","\n","\n","        ep_j = initial_i # dynamic ep 를 위한 var.\n","\n","        # -------------- limit waiting : limit_out -------------- #\n","\n","        if config.ep_set.entry_type == \"LIMIT\":\n","\n","          entry_done = 0\n","          entry_open = 0\n","          prev_sar = None\n","\n","          # for e_j in range(i, len(res_df)): # entry_signal 이 open 기준 (해당 bar 에서 체결 가능함)\n","          if i + 1 >= len(res_df):  # i should be checked if e_j starts from i+1\n","            break\n","          for e_j in range(i + 1, len(res_df)): # entry signal이 close 기준 일 경우\n","        \n","            if not config.ep_set.static_ep:\n","              ep_j = e_j\n","\n","            if config.tp_set.static_tp:\n","              # if config.ep_set.tpout_onexec:\n","              #   tp_j = e_j\n","              # else:\n","                tp_j = initial_i\n","            else:\n","              tp_j = e_j  \n","\n","            #             1. ep 설정 \n","            # -------------- np.inf ep -------------- #\n","            # if short_ep.iloc[initial_i] == np.inf:\n","            #   break\n","\n","\n","            #             1. check ep_out      #\n","            # if res_df['low'].iloc[e_j] <= res_df['short_rtc_1'].iloc[tp_j] - res_df['short_rtc_gap'].iloc[tp_j] * ei_k:\n","            if res_df['low'].iloc[e_j] <= res_df['short_tp'].iloc[tp_j]: # ep_out : tp_done\n","            # if np_timeidx[e_j] % config.ep_set.htf_entry == config.ep_set.htf_entry - 1:\n","              break\n","\n","            #             2. check ep_in       #\n","            if res_df['high'].iloc[e_j] >= res_df['short_ep'].iloc[ep_j]:\n","              entry_done = 1\n","              # print(\"res_df['high'].iloc[e_j] :\", res_df['high'].iloc[e_j])\n","              # print(\"e_j :\", e_j)\n","\n","              #     이미, e_j open 이 ep 보다 높은 경우, entry[ep_j] => -2 로 변경   #\n","              if res_df['open'].iloc[e_j] >= res_df['short_ep'].iloc[ep_j]:\n","                entry_open = 1\n","\n","              break\n","\n","\n","          i = e_j\n","          # print(\"i = e_j :\", i)\n","\n","          if entry_done:      \n","            pass\n","\n","          else:\n","            i += 1\n","            if i >= len(res_df):\n","              break\n","            continue\n","\n","        # ----------------- end wait ----------------- #\n","\n","        # if e_j - initial_i >= 200:\n","        #   print(\"e_j, initial_i :\", e_j, initial_i)\n","        # print(\"e_j - initial_i :\", e_j - initial_i)\n","        # print()\n","\n","        open_list.append(initial_i)\n","        \n","        if config.ep_set.entry_type is 'MARKET':\n","          try:\n","            ep_list = [res_df['close'].iloc[e_j]]\n","          except Exception as e:\n","            # print('error in ep_list (initial) :', e)\n","            ep_list = [res_df['close'].iloc[ep_j]]\n","\n","        else:          \n","          if not entry_open:\n","            ep_list = [res_df['short_ep'].iloc[ep_j]]\n","          \n","          #     Todo    #\n","          #      1. entry_score version 으로 재정의해야함\n","          #      2. below phase exists for open_price entry\n","          else:\n","            #   e_j 가 있는 경우, \n","            try:\n","              ep_list = [res_df['open'].iloc[e_j]]\n","            except Exception as e:\n","              ep_list = [res_df['open'].iloc[ep_j]]\n","\n","        if not config.lvrg_set.static_lvrg:\n","          # config.lvrg_set.leverage = config.lvrg_set.target_pct / (res_df['high'].rolling(hl_lookback).max().iloc[initial_i] / res_df['close'].iloc[initial_i] - 1)\n","\n","          if config.ep_set.entry_type is 'MARKET':\n","            # config.lvrg_set.leverage = config.lvrg_set.target_pct / (res_df['short_out'].iloc[ep_j] / res_df['close'].iloc[ep_j] - 1 - fee)\n","            config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(res_df['close'].iloc[ep_j] / res_df['short_out'].iloc[ep_j] - 1 - (fee + config.init_set.market_fee))\n","          else:\n","            config.lvrg_set.leverage = config.lvrg_set.target_pct / (res_df['short_out'].iloc[ep_j] / res_df['short_ep'].iloc[ep_j] - 1 - (fee + config.init_set.market_fee))\n","          config.lvrg_set.leverage = min(50, config.lvrg_set.leverage)\n","          if not config.lvrg_set.allow_float:\n","            config.lvrg_set.leverage = int(config.lvrg_set.leverage)\n","\n","          # -------------- leverage rejection -------------- #\n","          if config.lvrg_set.leverage < 1 and config.lvrg_set.lvrg_rejection:\n","            open_list.pop()\n","            i += 1\n","            if i >= len(res_df):\n","              break\n","            continue\n","\n","          config.lvrg_set.leverage = max(config.lvrg_set.leverage, 1)\n","          leverage_list.append(config.lvrg_set.leverage)\n","\n","        try:\n","          ep_idx_list = [e_j]\n","        except Exception as e:\n","          # print('error in ep_idx_list :', e)        \n","          ep_idx_list = [ep_j]\n","\n","        tp_list = []\n","        tp_idx_list = []\n","\n","        partial_tp_cnt = 0\n","        hedge_cnt = 1\n","\n","        h_ep, h_tp = None, None\n","        h_i, h_j = None, None\n","        \n","        trade_done = False\n","        out = False\n","        # config.out_set.retouch\n","\n","        #     Todo    #\n","        #      1. future_work : 상단의 retouch 와 겹침 \n","        config.out_set.retouch = False\n","        \n","\n","        if i == len(res_df) - 1: # if j start from i + 1 \n","          open_list.pop()       \n","        for j in range(i + 1, len(res_df)):\n","\n","        # for j in range(i, len(res_df)):\n","\n","          if config.tp_set.static_tp:\n","            if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","              tp_j = e_j\n","            else:\n","              tp_j = initial_i\n","          else:\n","            tp_j = j\n","\n","          if config.out_set.static_out:\n","            if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","              out_j = e_j\n","            else:           \n","              out_j = initial_i\n","          else:\n","            out_j = j\n","\n","\n","          # -------------- sub ep -------------- #\n","          # if res_df['high'].iloc[j - 1] <= res_df['sar2'].iloc[j - 1] and res_df['high'].iloc[j] > res_df['sar2'].iloc[j]:\n","            \n","          #   sub_ep = res_df['sar2'].iloc[j - 1]\n","\n","          #   if sub_ep < ep_list[-1]:\n","          #     ep_list.append(sub_ep)\n","          #     ep_idx_list.append(j)\n","\n","          \n","          # -------------- hedge only once -------------- #\n","          #             일단, h_quantity 는 초기 진입과 동일하게 설정         #\n","          # if res_df['high'].iloc[j] >= res_df['minor_ST2_Up'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] >= res_df['minor_ST2_Up'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] >= res_df['minor_ST3_Up'].iloc[j] and hedge_cnt == 1:\n","\n","          #   h_ep = res_df['close'].iloc[j]\n","          #   hedge_cnt -= 1\n","          #   h_i = j\n","\n","\n","          # -------------- ultimate limit tp -------------- #\n","          if not config.tp_set.non_tp:\n","\n","            #               1. by price line             #\n","            if config.tp_set.tp_type != 'MARKET':\n","\n","              for s_i, short_tp_ in enumerate(short_tps):\n","\n","                if res_df['low'].iloc[j] <= short_tp_.iloc[tp_j] and partial_tp_cnt == s_i: # we use static tp now\n","                # if res_df['low'].iloc[j] <= short_tp_.iloc[j]:\n","                # if res_df['low'].iloc[j] <= short_tp_.iloc[j] <= res_df['high'].iloc[j]: --> 이건 잘못되었음\n","\n","                  if s_i == len(short_tps) - 1:\n","                    trade_done = 1\n","                  \n","                  partial_tp_cnt += 1\n","\n","                  #         dynamic tp        #\n","                  # if 0:\n","                  if short_tp_.iloc[j] != short_tp_.iloc[j - 1] and not config.tp_set.static_tp:\n","\n","                    #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","                    # if res_df['open'].iloc[j] < short_tp_.iloc[initial_i]:\n","                    if res_df['open'].iloc[j] < short_tp_.iloc[j]:\n","\n","                      # tp = short_tp_.iloc[initial_i]\n","                      tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"d-short_open\")\n","\n","                    #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","                    else:\n","\n","                      # tp = short_tp_.iloc[initial_i]\n","                      tp = short_tp_.iloc[j]\n","                      # tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"d-short_tp\")\n","\n","                  #         static tp         #\n","                  else:\n","                    \n","                    #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","                    #   non_inversion 의 경우, short_tp 가 가능함   #              \n","\n","                    # if res_df['open'].iloc[j] < short_tp_.iloc[initial_i]:\n","                    if res_df['open'].iloc[j] < short_tp_.iloc[tp_j]:\n","\n","                      # tp = short_tp_.iloc[initial_i]\n","                      tp = short_tp_.iloc[tp_j]\n","\n","                      # tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"s-short_tp\")\n","\n","                    #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","                    else:\n","\n","                      # tp = short_tp_.iloc[initial_i]\n","                      tp = short_tp_.iloc[tp_j]\n","\n","                      # tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"s-short_tp\")   \n","\n","                  tp_list.append(tp)     \n","                  tp_idx_list.append(j)\n","                  fee += config.init_set.limit_fee\n","\n","\n","            #           2. by signal        #\n","            else:\n","\n","\n","              # -------------- sar tp -------------- #\n","              # if (res_df['high'].iloc[j] >= res_df['sar2'].iloc[j]) & \\\n","              #   (res_df['high'].iloc[j - 1] < res_df['sar2'].iloc[j - 1]) & \\\n","              #   (res_df['high'].iloc[j - 2] < res_df['sar2'].iloc[j - 2]):\n","\n","              #       inversion     #\n","              # if (res_df['low'].iloc[j] <= res_df['sar2'].iloc[j]) & \\\n","              #   (res_df['low'].iloc[j - 1] > res_df['sar2'].iloc[j - 1]) & \\\n","              #   (res_df['low'].iloc[j - 2] > res_df['sar2'].iloc[j - 2]):\n","              \n","              # ----------- st short ----------- #\n","              # if res_df['close'].iloc[j] <= res_df['short_tp'].iloc[tp_j]:\n","              \n","              # -------------- sar pb tp -------------- #\n","              # if res_df['low'].iloc[j] <= res_df['short_tp'].iloc[initial_i]:\n","\n","              # -------------- st tp -------------- #\n","              # if res_df['close'].iloc[j] > res_df['middle_line'].iloc[j]:       \n","\n","              # -------------- fisher tp -------------- #            \n","              # if entry[j] == 1:\n","\n","              \n","              # -------------- timestamp -------------- #\n","              if np_timeidx[j] % config.ep_set.htf_entry == config.ep_set.htf_entry - 1:                  \n","                \n","                tp = res_df['close'].iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                trade_done = 1\n","\n","                if trade_done:\n","                  tp_state_list.append(\"short close tp\")\n","\n","                tp_list.append(tp) \n","                tp_idx_list.append(j)\n","                fee += config.init_set.market_fee\n","\n","\n","                  \n","          # -------------- out -------------- #\n","          if not trade_done and config.out_set.use_out and j != len(res_df) - 1:\n","\n","            # -------------- macd -------------- #\n","            # if res_df['macd_hist3'].iloc[j] > 0:  #  macd out\n","            # if res_df['macd_hist3'].iloc[i] < 0 and res_df['macd_hist3'].iloc[j] > 0:\n","\n","            # -------------- st config.out_set.retouch -------------- #\n","            # out = 1 상태면 동일 tick 에서 config.out_set.retouch 를 조사할 거기 때문에, 먼저 검사함\n","            # 그리고, out 기준이 close 라 이게 맞음 \n","            # close 가 short_out 보다 올라가있는 상태일테니 low 를 조사하는게 맞음           \n","            # if out and res_df['low'].iloc[j] <= short_out.iloc[out_j]:\n","            #   config.out_set.retouch = 1\n","\n","            \n","             # ------- 일정시간 이상, dynamic_out 적용 ------ #\n","            try:\n","              if j - out_idx >= config.out_set.retouch_out_period:\n","                static_short_out = res_df['short_out'].iloc[j]\n","            \n","            except Exception as e:\n","              pass\n","\n","              # ------- static out ------ #\n","            try:\n","              if out and res_df['low'].iloc[j] <= static_short_out:\n","                config.out_set.retouch = 1\n","            except Exception as e:\n","              pass\n","\n","            \n","              # ------- config.out_set.retouch out ------ #\n","            # if out and res_df['low'].iloc[j] <= short_out2.iloc[out_j]:\n","            #   config.out_set.retouch = 1\n","\n","\n","            # -------------- st -------------- #\n","            # if res_df['close'].iloc[j] > res_df['middle_line'].iloc[j]:    \n","            # if res_df['close'].iloc[j] > res_df['minor_ST3_Up'].iloc[j]:\n","            # if res_df['close'].iloc[j] > upper_middle.iloc[j]:\n","            # if res_df['close'].iloc[j] > res_df['minor_ST1_Up'].iloc[j]:\n","            if out == 0:              \n","              if config.out_set.hl_out:\n","                if res_df['high'].iloc[j] >= res_df['short_out'].iloc[out_j]: # check out only once\n","                  out = 1\n","\n","              else:\n","                if res_df['close'].iloc[j] >= res_df['short_out'].iloc[out_j]: # check out only once\n","                  out = 1\n","\n","              # out_idx = j\n","              # static_short_out = short_out.iloc[out_j]\n","              # if config.out_set.second_out:              \n","                # static_short_out = short_out.iloc[out_j] + res_df['st_gap'].iloc[out_j] * config.out_set.second_out_gap\n","            \n","            # if out == 0 and res_df['high'].iloc[j] >= short_out.iloc[out_j]: # check out only once\n","            #   out = 1\n","             \n","\n","            # -------------- sma -------------- #\n","            # if res_df['close'].iloc[j] > res_df[sma].iloc[j]:\n","\n","            # -------------- sar -------------- #\n","            # if res_df['close'].iloc[j] > res_df['minor_ST3_Up'].iloc[j] \\\n","            #   or res_df['sar2'].iloc[j] <= res_df['high'].iloc[j]:\n","            # if res_df['close'].iloc[j] > short_out.iloc[initial_i]: # or \\\n","            #   out = 1\n","              # res_df['sar2_uptrend'].iloc[j] == 1: # or \\\n","\n","            # if res_df['sar2_uptrend'].iloc[j] == 1:\n","\n","            #   if prev_sar is None:\n","            #     prev_sar = res_df['sar2'].iloc[j - 1]\n","              \n","            #   if res_df['close'].iloc[j] > prev_sar:\n","            #     out = 1\n","\n","            # else:\n","            #   if res_df['close'].iloc[j] > res_df['sar2'].iloc[j]:\n","            #     out = 1\n","              \n","            # -------------- hl -------------- #\n","            # if res_df['close'].iloc[j] > short_out.iloc[tp_j]:\n","            \n","            # -------------- stoch -------------- #\n","            # if res_df['stoch'].iloc[j - 2] >= res_df['stoch'].iloc[j - 1] and \\\n","            #   res_df['stoch'].iloc[j - 1] < res_df['stoch'].iloc[j] and \\\n","            #   res_df['stoch'].iloc[j - 1] <= stoch_lower:\n","            #   out = 1\n","\n","            # config.out_set.retouch 1 경우, config.out_set.retouch 조건도 있어야함\n","            if out:\n","              if config.out_set.retouch:\n","                if config.out_set.retouch:\n","                  pass\n","                else:\n","                    continue\n","\n","              else:\n","                pass\n","\n","              if config.out_set.price_restoration:\n","                tp = res_df['short_out'].iloc[out_j]\n","                if config.out_set.second_out:\n","                  tp = res_df['short_out2'].iloc[out_j]\n","                \n","                # if res_df['close'].iloc[j] > tp: # 이 경우를 protect 하는건 insane 임\n","                #   tp = res_df['close'].iloc[j]\n","\n","              else:\n","                \n","                if res_df['open'].iloc[j] >= res_df['short_out'].iloc[out_j]:\n","                  tp = res_df['open'].iloc[j]\n","                else:\n","                  if config.out_set.hl_out:\n","                    tp = res_df['short_out'].iloc[out_j]\n","                  else:\n","                    tp = res_df['close'].iloc[j]\n","                \n","                # if not config.out_set.static_out:\n","                #   if res_df['open'].iloc[j] >= res_df['short_out'].iloc[out_j]: # close 기준이라 이런 조건을 못씀, 차라리 j 를 i 부터 시작\n","                #     tp = res_df['open'].iloc[j]\n","                #   else:\n","                #     tp = res_df['close'].iloc[j]\n","\n","                # else:\n","                #   tp = res_df['close'].iloc[j]\n","\n","              \n","              if config.out_set.retouch: # out 과 open 비교\n","                if config.out_set.second_out:\n","                  if res_df['open'].iloc[j] <= res_df['short_out2'].iloc[out_j]:\n","                    tp = res_df['open'].iloc[j]\n","                else:\n","                  if res_df['open'].iloc[j] <= res_df['short_out'].iloc[out_j]:\n","                    tp = res_df['open'].iloc[j]\n","\n","                try: # static_short_out 인 경우, open 도 고려한 tp set\n","                  if res_df['open'].iloc[j] <= static_short_out:\n","                    tp = res_df['open'].iloc[j]\n","                  else:\n","                    tp = static_short_out\n","                except Exception as e:\n","                  pass\n","\n","              trade_done = 1\n","              tp_state_list.append(\"short close_out\")\n","            \n","\n","              tp_list.append(tp) \n","              tp_idx_list.append(j)\n","              fee += config.init_set.market_fee\n","\n","\n","          # -------------- non tp -------------- #\n","          if j == len(res_df) - 1:\n","            trade_done = 1\n","            tp = res_df['close'].iloc[j]\n","            tp_list.append(tp) \n","            tp_idx_list.append(j)\n","            fee += config.init_set.market_fee\n","          \n","\n","\n","          # -------------- append trade data -------------- #\n","          if trade_done:\n","\n","            # --------------- tp_ratio info --------------- #\n","            #         Todo        #\n","            #          short_out 에 대한 정보는 존재함,\n","            #          short_tp 에 대한 정보는 존재함,\n","            #       => initial_i 기준으로 ,dynamic | static set 을 tp 와 out 에 각각 적용\n","            #          config.lvrg_set.leverage 는 initial_i 기준으로 적용되니까\n","            #          적용된 tp & out 으로 abs((tp - ep) / (ep - out)) 계산\n","            try:\n","              done_tp = res_df['short_tp'].iloc[ep_j]\n","              done_out = res_df['short_out'].iloc[ep_j]\n","\n","              if done_out <= ep_list[0]: # loss > 1\n","                dr = np.nan\n","                tp_ratio = np.nan\n","              else:                \n","                dr = ((ep_list[0] - done_tp) / (done_out - ep_list[0]))\n","                tp_ratio = ((ep_list[0] - done_tp - tp_fee * ep_list[0]) / (done_out - ep_list[0] + out_fee * ep_list[0]))\n","\n","            except Exception as e:\n","              # pass    \n","              tp_ratio = np.nan  \n","            \n","            tp_ratio_list.append(tp_ratio)\n","            short_tp_ratio_list.append(tp_ratio)     \n","            dr_list.append(dr)\n","            short_dr_list.append(dr)   \n","\n","\n","            # -------------------- partial tp -------------------- #\n","            #        1. len(tp_list) 에 대응하는 qty_list 를 만들어야함    #\n","            #        2. temp_pr_list 를 만들어 총합 + 1 을 pr_list 에 저장      #\n","            #        2-1. temp_pr = sum((ep / tp_list[i] - fee - 1) * qty_list[i])   #\n","            #        3. temp_pr_list 의 첫 tp 에는 r_qty 를 할당함        #\n","            qty_list = []\n","            temp_pr_list = []\n","            r_qty = 1\n","            for q_i in range(len(tp_list) - 1, -1, -1):\n","\n","              if len(tp_list) == 1:\n","                temp_qty = r_qty\n","              else:\n","                if q_i !=0:\n","                  temp_qty = r_qty / config.tp_set.partial_qty_divider\n","                else:\n","                  temp_qty = r_qty\n","\n","              temp_pr = (ep_list[0] / tp_list[q_i] - fee - 1) * temp_qty * config.lvrg_set.leverage\n","              # temp_pr = (ep_list[0] / tp_list[q_i] - fee - 1) * temp_qty\n","              r_qty -= temp_qty\n","\n","              temp_pr_list.append(temp_pr)\n","              qty_list.append(temp_qty)\n","\n","            # if len(temp_pr_list) == 1:\n","            #   print(\"qty_list :\", qty_list)\n","            #   print(\"temp_pr_list :\", temp_pr_list)\n","\n","            temp_pr = sum(temp_pr_list) + 1\n","\n","            # -------------------- sub ep -> pr calc -------------------- #\n","            if len(ep_list) > 1:\n","            \n","              p_ep_pr = []\n","              for sub_ep_ in ep_list:\n","                sub_pr = (sub_ep_ / tp - fee - 1) * config.lvrg_set.leverage\n","                p_ep_pr.append(sub_pr)\n","\n","              temp_pr = sum(p_ep_pr) + 1\n","\n","              print(\"temp_pr :\", temp_pr)\n","\n","            # ------------ hedge + non_hedge pr summation ------------ #\n","            #         hedge pr direction is opposite to the origin       #\n","            hedge_pr = 1\n","            if hedge_cnt == 0:\n","\n","              #       hedge tp      #\n","              h_tp = res_df['close'].iloc[j]\n","              hedge_pr = (h_tp / h_ep - fee - 1) * config.lvrg_set.leverage  # hedge long\n","              temp_pr += hedge_pr\n","              h_j = j\n","\n","            \n","            hh = max(res_df['high'].iloc[i:j + 1])\n","            short_liq = (ep_list[0] / hh - fee - 1) * config.lvrg_set.leverage + 1\n","\n","            if j != len(res_df) - 1:\n","\n","              # ep_tp_list.append((ep, tp_list))  \n","              ep_tp_list.append((ep_list, tp_list))  \n","              # trade_list.append([initial_i, i, j])\n","              trade_list.append((ep_idx_list, tp_idx_list))\n","\n","              liqd_list.append(short_liq)\n","              short_liqd_list.append(short_liq)\n","\n","              h_ep_tp_list.append((h_ep, h_tp))      # hedge 도 ep_tp_list 처럼 변경해주어야하는데 아직 안건드림, 딱히 사용할 일이 없어보여   \n","              h_trade_list.append([initial_i, h_i, h_j])                \n","\n","              pr_list.append(temp_pr)\n","              fee_list.append(fee)\n","              short_list.append(temp_pr)\n","              short_fee_list.append(fee)\n","\n","              h_pr_list.append(hedge_pr)\n","              h_short_list.append(hedge_pr)\n","\n","              i = j\n","              break\n","\n","            else:\n","\n","              # ep_tp_list.append((ep_list, tp_list))\n","              # trade_list.append((ep_idx_list, tp_idx_list))\n","              # plot_check 때문에, pr_list 까지 하게되면 acc_pr eval 이 꼬이게댐\n","          \n","              # pr_list 를 넣지 않을거니까, open_list 에서 해당 idx 는 pop\n","              open_list.pop()\n","              \n","              #         tp 미체결 survey        #\n","              nontp_liqd_list.append(short_liq)\n","              nontp_short_liqd_list.append(short_liq)\n","              nontp_short_indexs.append(i)\n","              nontp_short_ep_list.append(ep_list[0])\n","\n","              nontp_short_pr = (ep_list[0] / tp - fee - 1) * config.lvrg_set.leverage + 1\n","              nontp_pr_list.append(nontp_short_pr)\n","              nontp_short_pr_list.append(nontp_short_pr)\n","\n","\n","      #                  long  phase                #\n","      elif res_df['entry'][i] == -config.ep_set.short_entry_score: \n","      \n","\n","        initial_i = i\n","\n","        if config.out_set.static_out:\n","          p_i = initial_i\n","        else:\n","          p_i = i\n","\n","        # -------------- tr scheduling -------------- #       \n","\n","        mr_const_cnt += 1\n","        if (res_df['long_tp'].iloc[i] - res_df['long_ep'].iloc[i] - tp_fee * res_df['long_ep'].iloc[i]) / (res_df['long_ep'].iloc[i] - res_df['long_out'].iloc[i] + out_fee * res_df['long_ep'].iloc[i]) >= config.ep_set.tr_thresh:\n","        # if (res_df['long_tp'].iloc[i] - res_df['long_ep'].iloc[i] - tp_fee * res_df['long_ep'].iloc[i]) / (res_df['long_ep'].iloc[i] - res_df['long_out'].iloc[i] + tp_fee * res_df['long_ep'].iloc[i]) >= config.ep_set.tr_thresh:\n","        # if (res_df['long_tp'].iloc[i] - res_df['long_ep'].iloc[i] - tp_fee * res_df['long_ep'].iloc[i]) / (res_df['long_ep'].iloc[i] - res_df['long_out'].iloc[i] + out_fee * res_df['long_ep'].iloc[i]) == config.ep_set.tr_thresh:\n","        # if (res_df['long_tp'].iloc[i] - res_df['long_ep'].iloc[i] - out_fee * res_df['long_ep'].iloc[i]) / (res_df['long_ep'].iloc[i] - res_df['long_out'].iloc[i] + out_fee * res_df['long_ep'].iloc[i]) >= config.ep_set.tr_thresh:\n","          mr_score += 1\n","\n","\n","        # -------------- dr scheduling -------------- #\n","        # if config.ep_set.entry_type == \"MARKET\":\n","          # mr_const_cnt += 1        \n","          # if (res_df['long_tp'].iloc[i] - res_df['close'].iloc[i]) / (res_df['close'].iloc[i] - res_df['long_out'].iloc[i]) <= config.ep_set.tr_thresh * (1 + config.ep_set.dr_error): # 일반적으로 dr 상에서 tp 비율이 더 커짐 (tr 보다)\n","          #   mr_score += 1\n","\n","        # -------------- ep limit -------------- #    \n","        # mr_const_cnt += 1\n","        # # if (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # if config.ep_set.min_eplim_pct < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        # # if 0 < (res_df['open'].iloc[i] - res_df['long_ep'].iloc[i]) / res_df['open'].iloc[i] < config.ep_set.max_eplim_pct:\n","        #   # if res_df['st_gap_15m'].iloc[i] / res_df['open'].iloc[i] < 0:\n","        #   #   print(\"i, res_df['st_gap_15m'].iloc[i] :\", i, res_df['st_gap_15m'].iloc[i])\n","        #   mr_score += 1\n","\n","        \n","        # -------------- dtk -------------- #\n","        mr_const_cnt += 1\n","        if res_df['dc_upper_5m'].iloc[i] <= res_df['long_rtc_1'].iloc[i] + res_df['long_rtc_gap'].iloc[i] * dc_tp_k:\n","          mr_score += 1             \n","\n","\n","\n","        # -------------- entry once -------------- #    \n","        # prev_entry_cnt = 0\n","        # for back_i in range(i - 1, 0, -1):\n","        #   if res_df['entry'][back_i] == -1:\n","        #     break\n","\n","        #   elif res_df['entry'][back_i] == 1:\n","        #     prev_entry_cnt += 1\n","          \n","        # mr_const_cnt += 1\n","        # # if prev_entry_cnt <= config.ep_set.entry_incycle:\n","        # # if prev_entry_cnt == config.ep_set.entry_incycle:\n","        # if prev_entry_cnt >= config.ep_set.entry_incycle:\n","        #   mr_score += 1\n","\n","\n","        # ------- htf zoning ------- #   \n","        mr_const_cnt += 1\n","          \n","          #       bb zone     #\n","        if res_df['close'].iloc[i] > res_df['bb_base_%s' % bbz_interval].iloc[i]:\n","        # if res_df['close'].iloc[i] > res_df['bb_upper_%s' % bbz_interval].iloc[i]:\n","        # if res_df['close'].iloc[i] > res_df['bb_upper2_%s' % bbz_interval].iloc[i]:\n","        # if res_df['close'].iloc[i] > res_df['bb_upper2_1h'].iloc[i]:\n","        # if res_df['close'].iloc[i] > res_df['bb_base_1h'].iloc[i]:\n","        \n","          #       cbline zone     #\n","        # if res_df['close'].iloc[i] > res_df['cloud_bline_%s' % cb_interval].iloc[i]:\n","\n","          mr_score += 1\n","\n","\n","        # ------- ben ep_in's tp done ------- #   \n","        # mr_const_cnt += 1\n","        # if res_df['high'].iloc[i] < res_df['long_tp'].iloc[i]:\n","        #   mr_score += 1\n","\n","\n","        # -------------- feature dist const. -------------- #\n","        # if initial_i < input_size:\n","        #   i += 1\n","        #   if i >= len(res_df):\n","        #     break\n","        #   continue\n","          \n","        # entry_input_x = min_max_scale(res_df[selected_price_colname].iloc[initial_i - input_size:initial_i].values)\n","       \n","        # re_entry_input_x = expand_dims(entry_input_x)\n","\n","        # entry_vector = model.predict(re_entry_input_x, verbose=0)\n","        # # print(test_result.shape)\n","\n","        # f_dist = vector_dist(entry_vector, selected_vector)\n","        # print(\"f_dist :\", f_dist)\n","\n","        # if f_dist < fdist_thresh:\n","          # mr_score += 1\n","\n","\n","        # -------------- mr_score summation -------------- #\n","        if mr_score == mr_const_cnt:        \n","          pass\n","        \n","        else:\n","          i += 1\n","          if i >= len(res_df):\n","            break\n","          continue\n","\n","        # print(\"i after mrcheck :\", i)\n","\n","\n","        ep_j = initial_i\n","      \n","        # -------------- limit waiting const. -------------- #      \n","        if config.ep_set.entry_type == \"LIMIT\":\n","\n","          entry_done = 0\n","          entry_open = 0\n","          prev_sar = None\n","\n","          # for e_j in range(i, len(res_df)):   \n","\n","          if i + 1 >= len(res_df):  # i should be checked if e_j starts from i+1\n","            break\n","          for e_j in range(i + 1, len(res_df)):  # entry 가 close 기준일 경우 사용 (open 기준일 경우 i 부터 시작해도 무방함)\n","            \n","            if not config.ep_set.static_ep:\n","              ep_j = e_j  \n","            \n","            if config.tp_set.static_tp:\n","              # if config.ep_set.tpout_onexec:\n","              #   tp_j = e_j\n","              # else:\n","                tp_j = initial_i\n","            else:\n","              tp_j = e_j  \n","\n","            \n","            #          np.inf ep         #\n","            # if long_ep.iloc[initial_i] == np.inf:\n","            #   break\n","            \n","            #          1. check ep_out          #\n","            if res_df['high'].iloc[e_j] >= res_df['long_rtc_1'].iloc[tp_j] + res_df['long_rtc_gap'].iloc[tp_j] * ei_k:\n","            # if res_df['high'].iloc[e_j] >= res_df['long_tp'].iloc[tp_j]:\n","              \n","            # if np_timeidx[e_j] % config.ep_set.htf_entry == config.ep_set.htf_entry - 1:\n","              break\n","\n","            #          2. check ep_in          #\n","            if res_df['low'].iloc[e_j] <= res_df['long_ep'].iloc[ep_j]:\n","              entry_done = 1\n","              # print(\"e_j :\", e_j)\n","              \n","              #     이미, e_j open 이 ep 보다 낮은 경우, entry[initial_i] => -2 로 변경   #\n","              if res_df['open'].iloc[e_j] <= res_df['long_ep'].iloc[ep_j]:\n","                entry_open = 1\n","\n","              break\n","\n","\n","          i = e_j\n","          # print(\"i = e_j :\", i)\n","\n","          if entry_done:      \n","            pass\n","            # print(\"i, entry_done :\", i, entry_done)\n","\n","          else:\n","            i += 1\n","            if i >= len(res_df):\n","              # print(\"i :\", i)\n","              break\n","\n","            # print(\"i in continue :\", i)          \n","            continue\n","\n","\n","        # ---------------- end wait ---------------- #\n","        # if e_j - initial_i >= 200:\n","        #   print(\"e_j, initial_i :\", e_j, initial_i)\n","        \n","        # print(i)\n","\n","        open_list.append(initial_i)\n","\n","        if config.ep_set.entry_type is 'MARKET':\n","          try:\n","            ep_list = [res_df['close'].iloc[e_j]]\n","          except Exception as e:\n","            # print('error in ep_list (initial) :', e)\n","            ep_list = [res_df['close'].iloc[ep_j]]\n","        else:\n","          if not entry_open:\n","            ep_list = [res_df['long_ep'].iloc[ep_j]]\n","          else:\n","            try:\n","              ep_list = [res_df['open'].iloc[e_j]]\n","            except Exception as e:\n","              ep_list = [res_df['open'].iloc[ep_j]]\n","\n","        if not config.lvrg_set.static_lvrg:\n","          # config.lvrg_set.leverage = config.lvrg_set.target_pct / (res_df['close'].iloc[initial_i] / res_df['low'].rolling(hl_lookback).min().iloc[initial_i] - 1)\n","          if config.ep_set.entry_type is 'MARKET':\n","            config.lvrg_set.leverage = config.lvrg_set.target_pct / abs(res_df['long_out'].iloc[ep_j] / res_df['close'].iloc[ep_j] - 1 - (fee + config.init_set.market_fee))\n","          else:\n","            config.lvrg_set.leverage = config.lvrg_set.target_pct / (res_df['long_ep'].iloc[ep_j] / res_df['long_out'].iloc[ep_j] - 1 - (fee + config.init_set.market_fee))\n","          \n","          config.lvrg_set.leverage = min(50, config.lvrg_set.leverage)\n","          if not config.lvrg_set.allow_float:\n","            config.lvrg_set.leverage = int(config.lvrg_set.leverage)\n","\n","          # -------------- leverage rejection -------------- #\n","          if config.lvrg_set.leverage < 1 and config.lvrg_set.lvrg_rejection:\n","            open_list.pop()\n","            i += 1\n","            if i >= len(res_df):\n","              break\n","            continue\n","\n","          config.lvrg_set.leverage = max(config.lvrg_set.leverage, 1)\n","          leverage_list.append(config.lvrg_set.leverage)\n","          \n","        try:\n","          ep_idx_list = [e_j]\n","        except Exception as e:\n","          # print('error in ep_idx_list :', e)\n","          ep_idx_list = [ep_j]\n","\n","        tp_list = []\n","        tp_idx_list = []\n","\n","        partial_tp_cnt = 0\n","        hedge_cnt = 1\n","\n","        h_ep, h_tp = None, None        \n","        h_i, h_j = None, None      \n","\n","        trade_done = False\n","        out = False          \n","        config.out_set.retouch = False\n","\n","\n","        if i == len(res_df) - 1: # if j start from i + 1 \n","          open_list.pop()\n","        for j in range(i + 1, len(res_df)):\n","\n","        # for j in range(i, len(res_df)):  \n","          \n","          if config.tp_set.static_tp:\n","            if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","              tp_j = e_j\n","            else:\n","              tp_j = initial_i\n","          else:\n","            tp_j = j\n","\n","          if config.out_set.static_out:\n","            if not config.ep_set.static_ep and config.ep_set.entry_type == \"LIMIT\" and config.ep_set.tpout_onexec:\n","              out_j = e_j\n","            else:           \n","              out_j = initial_i\n","          else:\n","            out_j = j   \n","\n","          # -------------- hedge only once -------------- #\n","          #             일단, h_quantity 는 초기 진입과 동일하게 설정         #\n","          # if res_df['low'].iloc[j] <= res_df['minor_ST2_Down'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] <= res_df['minor_ST2_Down'].iloc[j] and hedge_cnt == 1:\n","          # if res_df['close'].iloc[j] <= res_df['minor_ST3_Down'].iloc[j] and hedge_cnt == 1:\n","\n","          #   h_ep = res_df['close'].iloc[j]\n","          #   hedge_cnt -= 1\n","          #   h_i = j\n","\n","          # -------------- sub ep -------------- #\n","          # if res_df['low'].iloc[j - 1] >= res_df['sar2'].iloc[j - 1] and res_df['low'].iloc[j] < res_df['sar2'].iloc[j]:\n","            \n","          #   sub_ep = res_df['sar2'].iloc[j - 1]\n","\n","          #   if sub_ep > ep_list[-1]:\n","          #     ep_list.append(sub_ep)\n","          #     ep_idx_list.append(j)\n","\n","\n","          # -------------- ultimate tp -------------- #\n","          if not config.tp_set.non_tp:\n","            #            1. by level          #\n","            if config.tp_set.tp_type != 'MARKET':\n","\n","              for l_i, long_tp_ in enumerate(long_tps):\n","\n","                if res_df['high'].iloc[j] >= long_tp_.iloc[tp_j] and partial_tp_cnt == l_i:\n","                # if res_df['high'].iloc[j] >= long_tp.iloc[j]:\n","\n","                  if l_i == len(long_tps) - 1:\n","                    trade_done = 1\n","\n","                  partial_tp_cnt += 1\n","\n","                  #         dynamic tp        #\n","                  # if 0:\n","                  if long_tp_.iloc[j] != long_tp_.iloc[j - 1] and not config.tp_set.static_tp:\n","\n","                    #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","                    # if res_df['open'].iloc[j] >= long_tp_.iloc[initial_i]:\n","                    if res_df['open'].iloc[j] >= long_tp_.iloc[j]:\n","\n","                      # tp = long_tp_.iloc[initial_i]\n","                      tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"d-long_open\")\n","\n","                    \n","                    #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","                    else:\n","                      \n","                      # tp = long_tp_.iloc[initial_i]\n","                      tp = long_tp_.iloc[j]\n","                      # tp = res_df['open'].iloc[j]\n","                      \n","                      if trade_done:\n","                        tp_state_list.append(\"d-long_tp\")\n","\n","                  #         static tp         #\n","                  else:\n","\n","                    #   tp limit 이 불가한 경우 = open 이 이미, tp 를 넘은 경우 # \n","                    #   non_inversion 의 경우, short_tp 가 가능함   #\n","\n","                    if res_df['open'].iloc[j] >= long_tp_.iloc[tp_j]:\n","                    # if res_df['open'].iloc[j] >= long_tp_.iloc[initial_i]:\n","\n","                      # tp = long_tp_.iloc[initial_i]\n","                      tp = long_tp_.iloc[tp_j]\n","\n","                      # tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"s-long_tp\")\n","\n","                    \n","                    #   tp limit 이 가능한 경우 = open 이 아직, tp 를 넘지 않은 경우 # \n","                    else:\n","                      \n","                      # tp = long_tp_.iloc[initial_i]\n","                      tp = long_tp_.iloc[tp_j]\n","\n","                      # tp = res_df['open'].iloc[j]\n","\n","                      if trade_done:\n","                        tp_state_list.append(\"s-long_tp\")         \n","                  \n","                  tp_list.append(tp)\n","                  tp_idx_list.append(j)\n","                  fee += config.init_set.limit_fee\n","\n","            #           2. by time        #\n","            else:\n","\n","              # -------------- sar tp -------------- #\n","              # if (res_df['low'].iloc[j] <= res_df['sar2'].iloc[j]) & \\\n","              #   (res_df['low'].iloc[j - 1] > res_df['sar2'].iloc[j - 1]) & \\\n","              #   (res_df['low'].iloc[j - 2] > res_df['sar2'].iloc[j - 2]):\n","              \n","              #       inversion     #\n","              # if (res_df['high'].iloc[j] >= res_df['sar2'].iloc[j]) & \\\n","              #   (res_df['high'].iloc[j - 1] < res_df['sar2'].iloc[j - 1]) & \\\n","              #   (res_df['high'].iloc[j - 2] < res_df['sar2'].iloc[j - 2]):\n","\n","\n","              # ----------- st long ----------- #\n","              # if res_df['close'].iloc[j] >= res_df['long_tp'].iloc[tp_j]:\n","\n","              # -------------- sar pb tp -------------- #\n","              # if res_df['high'].iloc[j] >= res_df['long_tp'].iloc[initial_i]:\n","\n","              # -------------- st tp -------------- #\n","              # if res_df['close'].iloc[j] < res_df['middle_line'].iloc[j]:\n","\n","              # -------------- fisher tp -------------- #\n","              # if entry[j] == -1:\n","              \n","              # -------------- timestamp -------------- #\n","              if np_timeidx[j] % config.ep_set.htf_entry == config.ep_set.htf_entry - 1:\n","                \n","                tp = res_df['close'].iloc[j]\n","                # tp = res_df['open'].iloc[j]\n","                trade_done = 1\n","\n","                if trade_done:\n","                  tp_state_list.append(\"long close tp\")\n","\n","                tp_list.append(tp) \n","                tp_idx_list.append(j)\n","                fee += config.init_set.market_fee\n","\n","\n","\n","          # -------------- out -------------- #\n","          if not trade_done and config.out_set.use_out and j != len(res_df) - 1:              \n","\n","            # -------------- macd -------------- #\n","            # if res_df['macd_hist3'].iloc[j] < 0:\n","            # # if res_df['macd_hist3'].iloc[i] > 0 and res_df['macd_hist3'].iloc[j] < 0:\n","\n","            # -------------- st config.out_set.retouch -------------- #\n","            # out = 1 상태면 동일 tick 에서 config.out_set.retouch 를 조사할 거기 때문에, 먼저 검사함\n","            # 그리고, out 기준이 close 라 이게 맞음 \n","            # close 가 long_out 보다 내려가있는 상태일테니 high 를 조사하는게 맞음           \n","            # if out and res_df['high'].iloc[j] >= long_out.iloc[out_j]:\n","            #   config.out_set.retouch = 1\n","\n","            \n","            # ------- 일정시간 이상, dynamic_out 적용 ------ #\n","            try:\n","              if j - out_idx >= config.out_set.retouch_out_period:\n","                static_long_out = res_df['long_out'].iloc[j]\n","            \n","            except Exception as e:\n","              pass\n","\n","              # ------- static out ------ #\n","            try:\n","              if out and res_df['high'].iloc[j] >= static_long_out:\n","                config.out_set.retouch = 1\n","            except Exception as e:\n","              pass\n","\n","              # ------- config.out_set.retouch out ------ #\n","            # if out and res_df['high'].iloc[j] >= long_out2.iloc[out_j]:\n","            #   config.out_set.retouch = 1\n","\n","\n","\n","            # -------------- st -------------- #\n","            # if res_df['close'].iloc[j] < res_df['middle_line'].iloc[j]:\n","            # if res_df['close'].iloc[j] < res_df['minor_ST3_Down'].iloc[j]:\n","            # if res_df['close'].iloc[j] < lower_middle.iloc[j]:\n","            # if res_df['close'].iloc[j] < res_df['minor_ST1_Down'].iloc[j]:\n","            if out == 0:\n","              if config.out_set.hl_out:\n","                if res_df['low'].iloc[j] <= res_df['long_out'].iloc[out_j]: # check out only once\n","                  out = 1\n","\n","              else:\n","                if res_df['close'].iloc[j] <= res_df['long_out'].iloc[out_j]: # check out only once\n","                  out = 1\n","\n","              # out_idx = j\n","              # static_long_out = long_out.iloc[out_j]\n","              # if config.out_set.second_out:\n","              # static_long_out = long_out.iloc[out_j] - res_df['st_gap'].iloc[out_j] * config.out_set.second_out_gap\n","\n","            # if out == 0 and res_df['low'].iloc[j] <= long_out.iloc[out_j]: # check out only once\n","            #   out = 1            \n","            \n","\n","\n","            # -------------- sma -------------- #\n","            # if res_df['close'].iloc[j] < res_df[sma].iloc[j]:\n","\n","            # -------------- sar -------------- #\n","            # if res_df['close'].iloc[j] < res_df['minor_ST3_Down'].iloc[j] \\\n","            #   or res_df['sar2'].iloc[j] >= res_df['low'].iloc[j]:\n","            # if res_df['close'].iloc[j] < long_out.iloc[initial_i]: # or \\\n","            #   #  res_df['close'].iloc[j] < res_df['sar2'].iloc[j]:\n","            #   #  res_df['sar2_uptrend'].iloc[j] == 0 or \\\n","            #   out = 1\n","            \n","            # if res_df['sar2_uptrend'].iloc[j] == 0:\n","\n","            #     if prev_sar is None:\n","            #       prev_sar = res_df['sar2'].iloc[j - 1]\n","                \n","            #     if res_df['close'].iloc[j] < prev_sar:\n","            #       out = 1\n","\n","            # else:\n","            #   if res_df['close'].iloc[j] < res_df['sar2'].iloc[j]:\n","            #     out = 1\n","\n","            # -------------- hl -------------- #\n","            # if res_df['close'].iloc[j] < long_out.iloc[tp_j]:\n","\n","            # -------------- stoch -------------- #\n","            # if res_df['stoch'].iloc[j - 2] <= res_df['stoch'].iloc[j - 1] and \\\n","            #   res_df['stoch'].iloc[j - 1] > res_df['stoch'].iloc[j] and \\\n","            #   res_df['stoch'].iloc[j - 1] >= stoch_upper:\n","            #   out = 1\n","\n","            # config.out_set.retouch 1 경우, config.out_set.retouch 조건도 있어야함\n","            if out:\n","              if config.out_set.retouch:\n","                if config.out_set.retouch:\n","                  pass\n","                else:\n","                    continue\n","\n","              else:\n","                pass\n","\n","              if config.out_set.price_restoration:\n","                tp = res_df['long_out'].iloc[out_j]\n","                if config.out_set.second_out:\n","                  tp = res_df['long_out2'].iloc[out_j]\n","\n","                # if res_df['close'].iloc[j] < tp: # 이 경우를 protect 하는건 insane 임\n","                # # if res_df['high'].iloc[j] < tp: # --> config.out_set.hl_out 사용시 이 조건은 valid 함\n","                #   tp = res_df['close'].iloc[j]\n","\n","              else:\n","\n","                if res_df['open'].iloc[j] <= res_df['long_out'].iloc[out_j]:\n","                  tp = res_df['open'].iloc[j]\n","                else:\n","                  if config.out_set.hl_out:\n","                    tp = res_df['long_out'].iloc[out_j]\n","                  else:\n","                    tp = res_df['close'].iloc[j]\n","\n","                # if not config.out_set.static_out:\n","                #   if res_df['open'].iloc[j] <= res_df['long_out'].iloc[out_j]: # dynamic close out 의 open 고려\n","                #     tp = res_df['open'].iloc[j]\n","                #   else:\n","                #     tp = res_df['close'].iloc[j]\n","\n","                # else:\n","                #   tp = res_df['close'].iloc[j]\n","\n","              if config.out_set.retouch: # out 과 open 비교\n","                if config.out_set.second_out:  # long_out = sell\n","                # config.out_set.second_out 은 기본적으로 limit 이라 이 구조가 가능함\n","                  if res_df['open'].iloc[j] >= res_df['long_out2'].iloc[out_j]: # dynamic_out 일 경우 고려해야함\n","                    tp = res_df['open'].iloc[j]\n","                else:\n","                  if res_df['open'].iloc[j] >= res_df['long_out'].iloc[out_j]: # dynamic_out 일 경우 고려해야함\n","                    tp = res_df['open'].iloc[j]\n","\n","                try:\n","                  if res_df['open'].iloc[j] >= static_long_out:\n","                    tp = res_df['open'].iloc[j]\n","                  else:\n","                    tp = static_long_out\n","                except Exception as e:\n","                  pass\n","\n","              # tp = res_df['open'].iloc[j]\n","              tp_state_list.append(\"long close_out\")\n","              trade_done = 1\n","\n","              tp_list.append(tp)\n","              tp_idx_list.append(j)\n","              fee += config.init_set.market_fee\n","\n","          \n","          # -------------- non tp -------------- #\n","          if j == len(res_df) - 1:\n","            trade_done = 1\n","            tp = res_df['close'].iloc[j]\n","            tp_list.append(tp) \n","            tp_idx_list.append(j)\n","            fee += config.init_set.market_fee\n","\n","\n","          if trade_done:\n","\n","            # --------------- tp_ratio info --------------- #\n","            try:\n","              done_tp = res_df['long_tp'].iloc[ep_j]\n","              done_out = res_df['long_out'].iloc[ep_j]\n","\n","              if done_out >= ep_list[0]: # loss >= 1\n","                tp_ratio = np.nan\n","                dr = np.nan\n","              else:\n","                tp_ratio = ((done_tp - ep_list[0] - tp_fee * ep_list[0]) / (ep_list[0] - done_out + out_fee * ep_list[0]))                \n","                dr = ((done_tp - ep_list[0]) / (ep_list[0] - done_out))                \n","\n","            except Exception as e:\n","              # pass \n","              tp_ratio = np.nan\n","            \n","            tp_ratio_list.append(tp_ratio)\n","            long_tp_ratio_list.append(tp_ratio)\n","            dr_list.append(dr)\n","            long_dr_list.append(dr)\n","\n","\n","            qty_list = []\n","            temp_pr_list = []\n","            r_qty = 1\n","            for q_i in range(len(tp_list) - 1, -1, -1):\n","\n","              if len(tp_list) == 1:\n","                temp_qty = r_qty\n","              else:\n","                if q_i !=0:\n","                  temp_qty = r_qty / config.tp_set.partial_qty_divider\n","                else:\n","                  temp_qty = r_qty\n","\n","              # temp_pr = (tp_list[q_i] / ep_list[0] - fee - 1) * temp_qty\n","              temp_pr = (tp_list[q_i] / ep_list[0] - fee - 1) * temp_qty * config.lvrg_set.leverage\n","              r_qty -= temp_qty\n","\n","              temp_pr_list.append(temp_pr)\n","\n","            temp_pr = sum(temp_pr_list) + 1\n","\n","            # -------------------- sub ep -> pr calc -------------------- #\n","            if len(ep_list) > 1:\n","            \n","              p_ep_pr = []\n","              for sub_ep_ in ep_list:\n","                sub_pr = (tp / sub_ep_ - fee - 1) * config.lvrg_set.leverage\n","                p_ep_pr.append(sub_pr)\n","\n","              temp_pr = sum(p_ep_pr) + 1\n","\n","              print(\"temp_pr :\", temp_pr)\n","\n","            # ------------ hedge + non_hedge pr summation ------------ #\n","            #         hedge pr direction is opposite to the origin       #\n","            hedge_pr = 1\n","            if hedge_cnt == 0:\n","\n","              #       hedge tp      #\n","              h_tp = res_df['close'].iloc[j]\n","              hedge_pr = (h_ep / h_tp - fee - 1) * config.lvrg_set.leverage  # hedge short\n","              temp_pr += hedge_pr\n","              h_j = j\n","\n","\n","            ll = min(res_df['low'].iloc[i:j + 1])\n","            long_liq = (ll / ep_list[0] - fee - 1) * config.lvrg_set.leverage + 1\n","\n","            if j != len(res_df) - 1:\n","\n","              ep_tp_list.append((ep_list, tp_list))\n","              trade_list.append((ep_idx_list, tp_idx_list))\n","\n","              liqd_list.append(long_liq)\n","              long_liqd_list.append(long_liq)\n","\n","              h_ep_tp_list.append((h_ep, h_tp))        \n","              h_trade_list.append([initial_i, h_i, h_j])                \n","\n","              pr_list.append(temp_pr)\n","              fee_list.append(fee)\n","              long_list.append(temp_pr)\n","              long_fee_list.append(fee)\n","\n","              h_pr_list.append(hedge_pr)\n","              h_long_list.append(hedge_pr)                    \n","\n","              i = j\n","              break\n","            \n","            else:\n","\n","              # ep_tp_list.append((ep_list, tp_list))\n","              # trade_list.append((ep_idx_list, tp_idx_list))\n","              \n","              # pr_list 를 넣지 않을거니까, open_list 에서 해당 idx 는 pop\n","              open_list.pop()\n","          \n","              #         tp 미체결 survey        #\n","              nontp_liqd_list.append(long_liq)\n","              nontp_long_liqd_list.append(long_liq)\n","              nontp_long_indexs.append(i)\n","              nontp_long_ep_list.append(ep_list[0])\n","              \n","              nontp_long_pr = (tp / ep_list[0] - fee - 1) * config.lvrg_set.leverage + 1\n","              nontp_pr_list.append(nontp_long_pr)\n","              nontp_long_pr_list.append(nontp_long_pr)\n","\n","            if len(open_list) > len(trade_list):\n","              print('debug from index :', i)\n","              print(len(open_list), len(trade_list))\n","              print(\"len(res_df) :\", len(res_df))\n","              assert len(open_list) == len(trade_list), 'stopped'\n","      \n","      i += 1  # if entry starts with prev trade's close, do not use it ! \n","      # print(\"i in end :\", i)\n","      if i >= len(res_df):\n","        break\n","\n","\n","\n","    # -------------------- result analysis -------------------- #\n","    # try:\n","    plt.style.use('default')\n","    # mpl.rcParams.update(mpl.rcParamsDefault)\n","\n","    plt.figure(figsize=(16, 12))\n","    # plt.figure(figsize=(12, 8))\n","    # plt.figure(figsize=(10, 6))\n","    plt.suptitle(key)\n","\n","    try:\n","      np_pr = np.array(pr_list)\n","      # np_pr = (np.array(pr_list) - 1) * config.lvrg_set.leverage + 1\n","\n","      # ----- fake_pr ----- #\n","      # np_pr = np.where(np_pr > 1, 1 + (np_pr - 1) * 3, np_pr)\n","\n","      total_pr = np.cumprod(np_pr)\n","\n","      for_sum_pr = np_pr - 1\n","      for_sum_pr[0] = 1\n","      sum_pr = np.cumsum(for_sum_pr)\n","      sum_pr = np.where(sum_pr < 0, 0, sum_pr)\n","\n","      wr = len(np_pr[np_pr > 1]) / len(np_pr[np_pr != 1])\n","\n","      # mean_profit = np.mean(np_pr[np_pr > 1])\n","      # mean_loss = np.mean(np_pr[np_pr < 1])\n","      # cumprod_profit = np.cumprod(np_pr[np_pr > 1])[-1]\n","      # cumprod_loss = np.cumprod(np_pr[np_pr < 1])[-1]\n","      # pr_tr = cumprod_profit * cumprod_loss\n","\n","      np_tp_ratio_list = np.array(tp_ratio_list) # 초기에 tr 을 정하는거라 mean 사용하는게 맞음\n","      mean_tr = np.mean(np_tp_ratio_list[np.isnan(np_tp_ratio_list) == 0])\n","\n","      np_dr_list = np.array(dr_list) # 초기에 tr 을 정하는거라 mean 사용하는게 맞음\n","      mean_dr = np.mean(np_dr_list[np.isnan(np_dr_list) == 0])\n","\n","\n","      # pr_gap = (np_pr - 1) / config.lvrg_set.leverage + fee\n","      # tp_gap_ = pr_gap[pr_gap > 0]\n","      # # mean_config.tp_set.tp_gap = np.mean(pr_gap[pr_gap > 0])\n","      # mean_ls_gap = np.mean(pr_gap[pr_gap < 0])\n","\n","      # ---- profit fee ratio ---- #\n","      # mean_pgfr = np.mean((tp_gap_ - fee) / abs(tp_gap_ + fee))\n","\n","      # plt.subplot(121)\n","      plt.subplot(231)\n","      plt.plot(total_pr)\n","      plt.plot(sum_pr, color='gold')\n","      if len(nontp_liqd_list) != 0:\n","        plt.title(\"wr : %.3f\\nlen(td) : %s\\nmin_pr : %.3f\\nacc_pr : %.3f\\n sum_pr : %.3f\\n leverage %s\\nliqd : %.3f\\nmean_tr : %.3f\\n mean_dr : %.3f\\n nontp_liqd_cnt : %s\\nnontp_liqd : %.3f\\nontp_liqd_pr : %.3f\" \n","                  % (wr, len(np_pr[np_pr != 1]), np.min(np_pr), total_pr[-1], sum_pr[-1], config.lvrg_set.leverage, min(liqd_list), mean_tr, mean_dr, len(nontp_liqd_list), min(nontp_liqd_list), min(nontp_pr_list)))\n","      else:\n","        plt.title(\"wr : %.3f\\nlen(td) : %s\\nmin_pr : %.3f\\nacc_pr : %.3f\\n sum_pr : %.3f\\n leverage %s\\nliqd : %.3f\\nmean_tr : %.3f\\n mean_dr : %.3f\\n nontp_liqd_cnt : %s\" \n","                  % (wr, len(np_pr[np_pr != 1]), np.min(np_pr), total_pr[-1], sum_pr[-1], config.lvrg_set.leverage, min(liqd_list), mean_tr, mean_dr, len(nontp_liqd_list)))\n","      # plt.show()\n","\n","      survey_df.iloc[survey_i] = wr, len(np_pr[np_pr != 1]), np.min(np_pr), total_pr[-1], sum_pr[-1], min(liqd_list), mean_tr, mean_dr     \n","\n","      print('supblot231 passed')\n","\n","    except Exception as e:\n","      print(\"error in 231 :\", e)\n","\n","\n","    try:\n","      #         short only      #\n","      short_np_pr = np.array(short_list)\n","\n","      total_short_pr = np.cumprod(short_np_pr)\n","      \n","      short_for_sum_pr = short_np_pr - 1\n","      short_for_sum_pr[0] = 1\n","      short_sum_pr = np.cumsum(short_for_sum_pr)\n","      short_sum_pr = np.where(short_sum_pr < 0, 0, short_sum_pr)\n","\n","      short_wr = len(short_np_pr[short_np_pr > 1]) / len(short_np_pr[short_np_pr != 1])\n","      \n","      # short_cumprod_profit = np.cumprod(short_np_pr[short_np_pr > 1])[-1]\n","      # short_cumprod_loss = np.cumprod(short_np_pr[short_np_pr < 1])[-1]\n","      # short_pr_tr = short_cumprod_profit * short_cumprod_loss\n","\n","      np_short_tp_ratio_list = np.array(short_tp_ratio_list)\n","      mean_short_tr = np.mean(np_short_tp_ratio_list[np.isnan(np_short_tp_ratio_list) == 0])\n","      \n","      np_short_dr_list = np.array(short_dr_list)\n","      mean_short_dr = np.mean(np_short_dr_list[np.isnan(np_short_dr_list) == 0])\n","      \n","      # short_pr_gap = (short_np_pr - 1) / config.lvrg_set.leverage + fee\n","      # short_tp_gap = short_pr_gap[short_pr_gap > 0]\n","      # # mean_short_tp_gap = np.mean(short_pr_gap[short_pr_gap > 0])\n","      # # mean_short_ls_gap = np.mean(short_pr_gap[short_pr_gap < 0])\n","\n","      # mean_short_pgfr = np.mean((short_tp_gap - fee) / abs(short_tp_gap + fee))\n","      \n","      plt.subplot(232)\n","      plt.plot(total_short_pr)\n","      plt.plot(short_sum_pr, color='gold')\n","      if len(nontp_short_liqd_list) != 0:   \n","\n","        max_nontp_short_term = len(res_df) - nontp_short_indexs[0]\n","        \n","        plt.title(\"wr : %.3f\\nlen(short_td) : %s\\nmin_pr : %.3f\\nacc_pr : %.3f\\n sum_pr : %.3f\\n leverage %s\\nliqd : %.3f\\nmean_tr : %.3f\\n mean_dr : %.3f\\n nontp_short_liqd_cnt : %s\\nnontp_short_liqd : %.3f\\nontp_short_liqd_pr : %.3f\\nmax_nontp_short_term : %s\"  \n","                  % (short_wr, len(short_np_pr[short_np_pr != 1]), np.min(short_np_pr), total_short_pr[-1], short_sum_pr[-1], config.lvrg_set.leverage, min(short_liqd_list), mean_short_tr, mean_short_dr, \n","                     len(nontp_short_liqd_list), min(nontp_short_liqd_list), min(nontp_short_pr_list), max_nontp_short_term))\n","      else:\n","        plt.title(\"wr : %.3f\\nlen(short_td) : %s\\nmin_pr : %.3f\\nacc_pr : %.3f\\n sum_pr : %.3f\\n leverage %s\\nliqd : %.3f\\nmean_tr : %.3f\\n mean_dr : %.3f\\n nontp_short_liqd_cnt : %s\"  \n","                  % (short_wr, len(short_np_pr[short_np_pr != 1]), np.min(short_np_pr), total_short_pr[-1], short_sum_pr[-1], config.lvrg_set.leverage, min(short_liqd_list), mean_short_tr, mean_short_dr, len(nontp_short_liqd_list)))\n","\n","      short_survey_df.iloc[survey_i] = short_wr, len(short_np_pr[short_np_pr != 1]), np.min(short_np_pr), total_short_pr[-1], short_sum_pr[-1], min(short_liqd_list), mean_short_tr, mean_short_dr     \n","\n","      print('supblot232 passed')\n","    \n","    except Exception as e:\n","      print(\"error in 232 :\", e)\n","\n","    try:\n","      #         long only      #\n","      long_np_pr = np.array(long_list)\n","      # long_np_pr = (np.array(long_list) - 1) * config.lvrg_set.leverage + 1\n","\n","      total_long_pr = np.cumprod(long_np_pr)\n","      \n","      long_for_sum_pr = long_np_pr - 1\n","      long_for_sum_pr[0] = 1\n","      long_sum_pr = np.cumsum(long_for_sum_pr)\n","      long_sum_pr = np.where(long_sum_pr < 0, 0, long_sum_pr)\n","\n","      long_wr = len(long_np_pr[long_np_pr > 1]) / len(long_np_pr[long_np_pr != 1])\n","      \n","      # long_cumprod_profit = np.cumprod(long_np_pr[long_np_pr > 1])[-1]\n","      # long_cumprod_loss = np.cumprod(long_np_pr[long_np_pr < 1])[-1]\n","      # long_pr_tr = long_cumprod_profit * long_cumprod_loss\n","\n","      np_long_tp_ratio_list = np.array(long_tp_ratio_list)\n","      mean_long_tr = np.mean(np_long_tp_ratio_list[np.isnan(np_long_tp_ratio_list) == 0])\n","      \n","      np_long_dr_list = np.array(long_dr_list)\n","      mean_long_dr = np.mean(np_long_dr_list[np.isnan(np_long_dr_list) == 0])\n","\n","      # long_pr_gap = (long_np_pr - 1) / config.lvrg_set.leverage + fee\n","      # long_tp_gap = long_pr_gap[long_pr_gap > 0]\n","      # # mean_long_tp_gap = np.mean(long_pr_gap[long_pr_gap > 0])\n","      # # mean_long_ls_gap = np.mean(long_pr_gap[long_pr_gap < 0])\n","\n","      # mean_long_pgfr = np.mean((long_tp_gap - fee) / abs(long_tp_gap + fee))\n","\n","      plt.subplot(233)\n","      plt.plot(total_long_pr)\n","      plt.plot(long_sum_pr, color='gold')\n","      if len(nontp_long_liqd_list) != 0:\n","\n","        max_nontp_long_term = len(res_df) - nontp_long_indexs[0]\n","\n","        plt.title(\"wr : %.3f\\nlen(long_td) : %s\\nmin_pr : %.3f\\nacc_pr : %.3f\\n sum_pr : %.3f\\n leverage %s\\nliqd : %.3f\\nmean_tr : %.3f\\n mean_dr : %.3f\\n nontp_long_liqd_cnt : %s\\nnontp_long_liqd : %.3f\\nontp_long_liqd_pr : %.3f\\nmax_nontp_long_term : %s\"   \n","                  % (long_wr, len(long_np_pr[long_np_pr != 1]), np.min(long_np_pr), total_long_pr[-1], long_sum_pr[-1], config.lvrg_set.leverage, min(long_liqd_list), mean_long_tr, mean_long_dr, \n","                     len(nontp_long_liqd_list), min(nontp_long_liqd_list), min(nontp_long_pr_list), max_nontp_long_term))\n","      else:\n","        plt.title(\"wr : %.3f\\nlen(long_td) : %s\\nmin_pr : %.3f\\nacc_pr : %.3f\\n sum_pr : %.3f\\n leverage %s\\nliqd : %.3f\\nmean_tr : %.3f\\n mean_dr : %.3f\\n nontp_long_liqd_cnt : %s\"   \n","                  % (long_wr, len(long_np_pr[long_np_pr != 1]), np.min(long_np_pr), total_long_pr[-1], long_sum_pr[-1], config.lvrg_set.leverage, min(long_liqd_list), mean_long_tr, mean_long_dr, len(nontp_long_liqd_list)))\n","\n","      long_survey_df.iloc[survey_i] = long_wr, len(long_np_pr[long_np_pr != 1]), np.min(long_np_pr), total_long_pr[-1], long_sum_pr[-1], min(long_liqd_list), mean_long_tr, mean_long_dr     \n","\n","      print('supblot233 passed')\n","\n","    except Exception as e:\n","      print(\"error in 233 :\", e)\n","\n","\n","    try:\n","      #     reversion adjustment      #\n","      # rev_np_pr = 1 / (np.array(pr_list) + fee) - fee\n","      rev_fee = tp_fee + out_fee - np.array(fee_list)\n","      rev_np_pr = (1 / ((np.array(pr_list) - 1) / config.lvrg_set.leverage + np.array(fee_list) + 1) - rev_fee - 1) * config.lvrg_set.leverage + 1\n","      # rev_np_pr = (1 / (np.array(pr_list) + fee) - fee - 1) * config.lvrg_set.leverage + 1\n","          \n","      rev_total_pr = np.cumprod(rev_np_pr)\n","      rev_wr = len(rev_np_pr[rev_np_pr > 1]) / len(rev_np_pr[rev_np_pr != 1])\n","\n","      rev_total_for_sum_pr = rev_np_pr - 1\n","      rev_total_for_sum_pr[0] = 1\n","      rev_total_sum_pr = np.cumsum(rev_total_for_sum_pr)\n","      rev_total_sum_pr = np.where(rev_total_sum_pr < 0, 0, rev_total_sum_pr)\n","\n","      # plt.subplot(122)\n","      plt.subplot(234)\n","      plt.plot(rev_total_pr)\n","      plt.plot(rev_total_sum_pr, color='gold')\n","\n","      plt.title(\"wr : %.3f\\nmin_pr : %.3f\\nacc_pr : %.3f\\n sum_pr : %.3f\" % (rev_wr, np.min(rev_np_pr), rev_total_pr[-1], rev_total_sum_pr[-1]))\n","\n","    except Exception as e:\n","      print(\"error in 234 :\", e)\n","\n","    try:\n","      #         short       #\n","      # rev_short_np_pr = 1 / (np.array(short_list) + fee) - fee\n","      rev_short_fee = tp_fee + out_fee - np.array(short_fee_list)\n","      rev_short_np_pr = (1 / ((np.array(short_list) - 1) / config.lvrg_set.leverage + np.array(short_fee_list) + 1) - rev_short_fee - 1) * config.lvrg_set.leverage + 1\n","      # rev_short_np_pr = (1 / (np.array(short_list) + fee) - fee - 1) * config.lvrg_set.leverage + 1\n","          \n","      rev_total_short_pr = np.cumprod(rev_short_np_pr)\n","      rev_short_wr = len(rev_short_np_pr[rev_short_np_pr > 1]) / len(rev_short_np_pr[rev_short_np_pr != 1])\n","\n","      rev_short_for_sum_pr = rev_short_np_pr - 1\n","      rev_short_for_sum_pr[0] = 1\n","      rev_short_sum_pr = np.cumsum(rev_short_for_sum_pr)\n","      rev_short_sum_pr = np.where(rev_short_sum_pr < 0, 0, rev_short_sum_pr)\n","\n","      # plt.subplot(122)\n","      plt.subplot(235)\n","      plt.plot(rev_total_short_pr)\n","      plt.plot(rev_short_sum_pr, color='gold')\n","\n","      plt.title(\"wr : %.3f\\nmin_pr : %.3f\\nacc_pr : %.3f\\n sum_pr : %.3f\" % (rev_short_wr, np.min(rev_short_np_pr), rev_total_short_pr[-1], rev_short_sum_pr[-1]))\n","\n","    except Exception as e:\n","      print(\"error in 235 :\", e)\n","\n","    try:\n","      #         long       #\n","      # rev_long_np_pr = 1 / (np.array(long_list) + fee) - fee\n","      rev_long_fee = tp_fee + out_fee - np.array(long_fee_list)\n","      rev_long_np_pr = (1 / ((np.array(long_list) - 1) / config.lvrg_set.leverage + np.array(long_fee_list) + 1) - rev_long_fee - 1) * config.lvrg_set.leverage + 1\n","          \n","      rev_total_long_pr = np.cumprod(rev_long_np_pr)\n","      rev_long_wr = len(rev_long_np_pr[rev_long_np_pr > 1]) / len(rev_long_np_pr[rev_long_np_pr != 1])\n","\n","      rev_long_for_sum_pr = rev_long_np_pr - 1\n","      rev_long_for_sum_pr[0] = 1\n","      rev_long_sum_pr = np.cumsum(rev_long_for_sum_pr)\n","      rev_long_sum_pr = np.where(rev_long_sum_pr < 0, 0, rev_long_sum_pr)\n","\n","      # plt.subplot(122)\n","      plt.subplot(236)\n","      plt.plot(rev_total_long_pr)\n","      plt.plot(rev_long_sum_pr, color='gold')\n","\n","      plt.title(\"wr : %.3f\\nmin_pr : %.3f\\nacc_pr : %.3f\\n sum_pr : %.3f\" % (rev_long_wr, np.min(rev_long_np_pr), rev_total_long_pr[-1], rev_long_sum_pr[-1]))\n","      \n","    except Exception as e:\n","      print(\"error in 236 :\", e)\n","\n","    plt.show()\n","    \n","\n","    try:\n","\n","      h_np_pr = np.array(h_pr_list)\n","      # h_rev_np_pr = 1 / (np.array(h_pr_list) + fee) - fee    # define, for plot_check below cell\n","      h_rev_np_pr = (1 / ((np.array(h_pr_list) - 1) / config.lvrg_set.leverage + np.array(fee_list) + 1) - np.array(fee_list) - 1) * config.lvrg_set.leverage + 1\n","\n","      # --------------------- h pr plot --------------------- #\n","      if len(h_np_pr[h_np_pr != 1]) != 0:\n","\n","        plt.figure(figsize=(16, 12))\n","        plt.suptitle(key + \" hedge\")\n","\n","        h_total_pr = np.cumprod(h_np_pr)\n","        h_wr = len(h_np_pr[h_np_pr > 1]) / len(h_np_pr[h_np_pr != 1])\n","\n","        # plt.subplot(121)\n","        plt.subplot(231)\n","        plt.plot(h_total_pr)\n","        plt.title(\"wr : %.3f\\nmin_pr : %.3f\\nacc_pr : %.3f\\n leverage %s\" % (h_wr, np.min(h_np_pr), h_total_pr[-1], config.lvrg_set.leverage))\n","        # plt.show()\n","\n","        #         short only      #\n","        h_short_np_pr = np.array(h_short_list)\n","\n","        h_total_short_pr = np.cumprod(h_short_np_pr)\n","        h_short_wr = len(h_short_np_pr[h_short_np_pr > 1]) / len(h_short_np_pr[h_short_np_pr != 1])\n","        \n","        plt.subplot(232)\n","        plt.plot(h_total_short_pr)\n","        plt.title(\"wr : %.3f\\nmin_pr : %.3f\\nacc_pr : %.3f\\n leverage %s\" % (h_short_wr, np.min(h_short_np_pr), h_total_short_pr[-1], config.lvrg_set.leverage))\n","\n","        #         long only      #\n","        h_long_np_pr = np.array(h_long_list)\n","\n","        h_total_long_pr = np.cumprod(h_long_np_pr)\n","        h_long_wr = len(h_long_np_pr[h_long_np_pr > 1]) / len(h_long_np_pr[h_long_np_pr != 1])\n","        \n","        plt.subplot(233)\n","        plt.plot(h_total_long_pr)\n","        plt.title(\"wr : %.3f\\nmin_pr : %.3f\\nacc_pr : %.3f\\n leverage %s\" % (h_long_wr, np.min(h_long_np_pr), h_total_long_pr[-1], config.lvrg_set.leverage))\n","\n","\n","        #     reversion adjustment      #\n","            \n","        h_rev_total_pr = np.cumprod(h_rev_np_pr)\n","        h_rev_wr = len(h_rev_np_pr[h_rev_np_pr > 1]) / len(h_rev_np_pr[h_rev_np_pr != 1])\n","\n","        # plt.subplot(122)\n","        plt.subplot(234)\n","        plt.plot(h_rev_total_pr)\n","        plt.title(\"wr : %.3f\\nmin_pr : %.3f\\nacc_pr : %.3f\\n leverage %s\" % (h_rev_wr, np.min(h_rev_np_pr), h_rev_total_pr[-1], config.lvrg_set.leverage))\n","\n","        #         short       #\n","        # h_rev_short_np_pr = 1 / (np.array(h_short_list) + fee) - fee\n","        h_rev_short_np_pr =  (1 / ((np.array(h_short_list) - 1) / config.lvrg_set.leverage + np.array(short_fee_list) + 1) - np.array(short_fee_list) - 1) * config.lvrg_set.leverage + 1\n","           \n","        h_rev_total_short_pr = np.cumprod(h_rev_short_np_pr)\n","        h_rev_short_wr = len(h_rev_short_np_pr[h_rev_short_np_pr > 1]) / len(h_rev_short_np_pr[h_rev_short_np_pr != 1])\n","\n","        # plt.subplot(122)\n","        plt.subplot(235)\n","        plt.plot(h_rev_total_short_pr)\n","        plt.title(\"wr : %.3f\\nmin_pr : %.3f\\nacc_pr : %.3f\\n leverage %s\" % (h_rev_short_wr, np.min(h_rev_short_np_pr), h_rev_total_short_pr[-1], config.lvrg_set.leverage))\n","\n","        #         long       #\n","        # h_rev_long_np_pr = 1 / (np.array(h_long_list) + fee) - fee\n","        h_rev_long_np_pr =  (1 / ((np.array(h_long_list) - 1) / config.lvrg_set.leverage + np.array(long_fee_list) + 1) - np.array(long_fee_list) - 1) * config.lvrg_set.leverage + 1\n","            \n","        h_rev_total_long_pr = np.cumprod(h_rev_long_np_pr)\n","        h_rev_long_wr = len(h_rev_long_np_pr[h_rev_long_np_pr > 1]) / len(h_rev_long_np_pr[h_rev_long_np_pr != 1])\n","\n","        # plt.subplot(122)\n","        plt.subplot(236)\n","        plt.plot(h_rev_total_long_pr)\n","        plt.title(\"wr : %.3f\\nmin_pr : %.3f\\nacc_pr : %.3f\\n leverage %s\" % (h_rev_long_wr, np.min(h_rev_long_np_pr), h_rev_total_long_pr[-1], config.lvrg_set.leverage))\n","        \n","        plt.show()\n","          \n","    except Exception as e:\n","      print('error in h_pr plot :', e)   \n","    \n","\n","    print()\n","\n","  # break # pair loop"],"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["2021-07-01 ETHUSDT.ftr loaded !\n","ei_k : 0.36\n","dc_tp_k : 0.225\n","bbz_interval : 30m\n","cb_interval : 30m\n","config.ep_set.tr_thresh : 0.94\n","config.ep_set.dr_error : 0.1\n","config.ep_set.htf_entry : 5\n","config.ep_set.ep_gap : 0.083\n","config.out_set.out_gap : -0.5\n","config.tp_set.tp_gap : 0.36\n","config.ep_set.bbwp_thresh : 0.5\n","config.ep_set.entry_incycle : 5\n","config.lvrg_set.leverage : 10\n","config.lvrg_set.target_pct : 0.1\n","config.ep_set.max_eplim_pct : 0.05\n","config.ep_set.min_eplim_pct : 0.013\n","supblot231 passed\n","supblot232 passed\n","supblot233 passed\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1600x1200 with 6 Axes>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]}]},{"cell_type":"markdown","metadata":{"id":"MteLY9PS2ZeK"},"source":["##### check statistical significance"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":588},"id":"NzbWuwSw2jaj","executionInfo":{"status":"ok","timestamp":1636425666328,"user_tz":-540,"elapsed":4514,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"ec7f6b68-022e-4860-bfdc-b88647788fb8"},"source":["# print(survey_df)\n","\n","plt.style.use('dark_background')\n","\n","title_name = [\"total\", \"short\", \"long\"]\n","\n","fig = plt.figure(figsize=(30, 10))\n","\n","gs = gridspec.GridSpec(nrows=1, # row 몇 개 \n","                        ncols=3, # col 몇 개 \n","                        # height_ratios=[1, 1, 1]\n","                      )\n","\n","\n","# gs = fig.add_gridspec(1, 3, wspace=0, hspace=0)\n","\n","for gs_idx, (title, s_df) in enumerate(zip(title_name, [survey_df, short_survey_df, long_survey_df])):  \n","\n","\n","  inner_gs = gs[gs_idx].subgridspec(nrows=3, # row 몇 개 \n","                        ncols=3, # col 몇 개 \n","                        height_ratios=[1, 1, 1]\n","                      )\n","\n","  for col_idx, s_cols in enumerate(s_df.columns):\n","    plt.subplot(inner_gs[col_idx])\n","    plt.plot(s_df[s_cols])\n","    plt.title(s_cols)\n","\n","plt.suptitle(\"total\" + \" \" * 140 + \"short\" + \" \" * 140 + \"long\")\n","plt.show()\n","# print(\"\\n\")"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"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WFiyZMllx91///0cPXqUoqIivv76a+6+++5milBERERE6sv2bGKrwCsiIiIiIuIqttaBjV0QX2hrHRig1oFNwdY6MDv1yk+0Asg4mcJLvxvPP59/kWVjH2PZ2Mc4uv3Lals374/7iPzzWbTrGErPIYNdEG3NNEcjIiLSvBqUaNXa2HoxFzdypcTlZJ6ytuMI6lxzopW3vx+9774LgNeemMme9/+Fm8nE757/CwPvv7fG/XwD2vLYKy8R2CmMzNPfs2riVApz85x7AdJq9evXj8cee4yDBw9edtygQYN45513eO211+jduzfvv/8+77//PjfffHMzRSoiIiIideXp64N/UCAAmafVOlCufpqYEBEREblyGQwGPNv4Ak6oaGVrHRig1oFNoX2YraJVuosjqbvSomK+XL+JlANfX3ZceWkpX67fBMDt437XHKHVieZoREREmp8SrerA299WkrZpKloBZH5nnbwIvkxFq36/vhsPby/S/nec5H2JbPzLC3zxznsYjUZ++/ST3DbmwUv28Wrjy4SVSwj90fXkZJxl5YQp5Geeb7LrkNbF19eXt99+mwkTJpCdnX3ZsVOnTmXbtm28+OKLJCUl8Ze//IX9+/fzxBNPNFO0IiIiIlJXQZ2tbQPzz2dRXHDBxdGINC1NTIiIiIhc2bz82mA0WqezivIaN09zIUetA5tS+7BrgJbROrAhdmz4J2UlJXT+SQ+u793T1eFojkZERMRFlGhVB15N3DoQIPOUtR2HbUKjOra2gTs2bAbAYrGw+YW/8Z/X3wTg3j9PZcjE39vHu3t58uiyF7n25pvIP5/Fqgl/JLsFrSKQK9/y5cv597//zSeffFLr2EGDBpGQkOCwLT4+nkGDBtW4j4eHB35+fg4vEREREWm4Dtd3YdySBXTq0f2y42yVdlXNSq52TTkxoecZEREREeewdR0pLSqmoqysUccqyLImWrUJbN/ouMSRwWgkoGMIAFnfp7k4mqZxITuHvR9uBeC2sa6vaqU5GhEREddQolUd2G7iG1uS9nLOna5MtKqholW3AX3pcH0Xii9cYP+/4x0++/eSFWxd9goAd095jHumTcbN3Z1HlsbQtW8vivLyWT1pOmdTTjVZ/NL6PPDAA/Tp04fZs2fXaXxoaCgZGRkO2zIyMggNDa1xn9mzZ5OXl2d/paamNipmERERkdbulhG/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EXTv3p1XX3211nh3796Nu7s71113XbWfl5aWkp+f7/BqDFtFq/wftA60Sd6XyPbKlge5Z89RUljYqPOJiIiIiIg4g4+/P4A9OcoZbFWtAjpWX/1Y6qf9NZWJVpVdW1qb/PNZvPbEnygpLOTHA/sz/MkoV4ckIiIiTUiJVrXw9reulHBW7+/anLuoPcfXH39a7WpzERERERG5VFlZGfv27SMyMtK+zWAwEBkZyc6dOy+7b0lJCWlpaZhMJkaOHMmWLVvsn/n4+DhUuAKoqKjAaLz0cerRRx9l7969fP3117XG26tXLyoqKjh79mytY53hchWtbOJe+gdfrHuXD198uVliEhERERERuRyThwfuXp6AcxfE56RbW86ropVztLvGmrDWWhOtAM4cO8Hbs57GbDYT/sAIIh76ratDEhERkSZicnUAVzpvF1W0Atix4Z/Nck4RERERkavF4sWLWbNmDXv37mXPnj1MmzYNX19fYmNjAVizZg2pqak89dRTAAwYMICwsDASExMJCwvjmWeewWg0snDhQvsxP/zwQ+bMmcPp06c5fPgwvXv3Jioqitdff93h3H5+fvz2t79lxowZl8Q1cOBAbrnlFj799FPy8/MZNGgQS5Ys4a233iInJ6cJv5EqbWqpaAVQVlzC5gWLmyUeERERERGR2tjaBprNZkoKLjjtuPaKVqEhtYyUurC1DsxObb2JVgCH//sF/168nF/PnMK9f55K5unvSPpil6vDEhERESdTRata2G7im6ui1XeHjlKYl8eJPftI2X+wWc4pIiIiInK12LhxIzNnziQ6OprExER69erFsGHD7FWjOnfuTMeOHe3jvby8mD9/PkeOHGHz5s2kpqYSERFBbm6ufcyUKVN47733WLFiBUePHuXFF19k1apVzJs3z+HcDz74IAaDgXfeeeeSuEpKSnjwwQf57LPPOHz4MHPmzGHJkiVMnDixib6JS9WlopWIiIiIiFz5Hn/8cVJSUigqKmLXrl3079+/xrEmk4l58+Zx4sQJioqKSExMZOjQoQ5jjEYj0dHRJCcnU1hYyIkTJ5g7d67DmKeffpqjR49SUFBAVlYWH3/8MQMGDGiS67uYt791MXxxQQEWi8Vpx1VFK+cxurkREGJNWGvNFa1s/rtmHbv/+SFGNzfGLJpPaLeurg5JREREnEwVrWphq2hVnNc8Fa0u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\n","text/plain":["<Figure size 3000x1000 with 24 Axes>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"v2Gjv019AEz8"},"source":["##### frequency check"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":464},"id":"atdBjod9-e21","executionInfo":{"status":"ok","timestamp":1636290655817,"user_tz":-540,"elapsed":311,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"ab6444e7-82d5-4f1e-a5d1-1e93e564f118"},"source":["total_len = np.zeros(len(res_df))\n","print(total_len)\n","np_trade_list = np.array(trade_list)\n","# print(np_trade_list.shape)\n","print(np_trade_list[:, [0], [0]].shape)\n","total_len[np_trade_list[:, [0], [0]]] = 1\n","\n","plt.plot(total_len)\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[0. 0. 0. ... 0. 0. 0.]\n","(53, 1)\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"-IbP_Z3Dlwk4"},"source":["### nontp survey"]},{"cell_type":"markdown","metadata":{"id":"FxJ1y8v2fkCR"},"source":["##### term & liqd"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":614},"id":"-qIWa48pl1GO","executionInfo":{"elapsed":8,"status":"ok","timestamp":1628300788555,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"outputId":"b2687c93-e070-4d45-8a67-4cc783fd78f1"},"source":["# print(nontp_long_indexs)\n","\n","plot_size = 100\n","\n","for s_i in range(plot_size, len(trade_list), plot_size):\n","\n","  slice_trade_list = trade_list[s_i - plot_size:s_i]\n","  slice_liqd_list = liqd_list[s_i - plot_size:s_i]\n","\n","  # print(len(slice_trade_list))\n","  np_trade = np.array(slice_trade_list)\n","  trade_term = np_trade[:, [2]] - np_trade[:, [1]]\n","\n","  plt.figure(figsize=(5, 10))\n","  plt.subplot(211)\n","  plt.bar(np.arange(len(trade_term)), trade_term.reshape(-1,), width=1, color='b')\n","\n","  # plt.plot(trade_term.reshape(-1,))\n","  plt.ylim(0, 1000)\n","  # plt.show()\n","  # print()\n","\n","  plt.subplot(212)\n","  # print(len(liqd_list))\n","  # plt.bar(np.arange(len(liqd_list)), liqd_list)\n","  plt.bar(np.arange(len(slice_liqd_list)), np.array(slice_liqd_list), width=1, color='r')\n","  # plt.plot(slice_liqd_list)\n","  plt.show()\n","\n","print()"],"execution_count":null,"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 360x720 with 2 Axes>"]},"metadata":{"tags":[]},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]}]},{"cell_type":"markdown","metadata":{"id":"VBwVaUkvfnOd"},"source":["##### check nontp index"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mRCMBOU4frNY","executionInfo":{"elapsed":454,"status":"ok","timestamp":1628220543161,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"outputId":"ce4a9c9b-3589-40b3-8a19-4be03d5b9a1e"},"source":["# np_nontp_short_indexs = np.array(nontp_short_indexs)\n","# np_nontp_long_indexs = np.array(nontp_long_indexs)\n","\n","# short_til_term = len(res_df) - np_nontp_short_indexs\n","# long_til_term = len(res_df) - np_nontp_long_indexs\n","\n","max_nontp_short_term = len(res_df) - nontp_short_indexs[0]\n","max_nontp_long_term = len(res_df) - nontp_long_indexs[0]\n","\n","print(max_nontp_long_term)"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["32747\n"]}]},{"cell_type":"markdown","metadata":{"id":"JNQxkb06ZdTe"},"source":["# traded section plot"]},{"cell_type":"markdown","metadata":{"id":"UmH_Pb5BZUtm"},"source":["## plot with off-color st with dash"]},{"cell_type":"markdown","metadata":{"id":"5z4L3MMYmUI0"},"source":["### sorted plot_check"]},{"cell_type":"code","metadata":{"id":"L9LdjV2uUWnp","colab":{"base_uri":"https://localhost:8080/","height":430},"executionInfo":{"status":"ok","timestamp":1636038884222,"user_tz":-540,"elapsed":605,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"ca444225-4cbd-495c-baca-c17989a6a21c"},"source":["# plot_pr_list[:100]\n","\n","plt.plot(np_pr)\n","plt.axhline(1)\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{}}]},{"cell_type":"code","metadata":{"id":"Qv1MM2MemZnF"},"source":["assert len(open_list) == len(trade_list), \"len(open_list) != len(trade_list)\"\n","\n","save_plot = 0\n","pr_sort = 0\n","pr_descend = 0\n","loss_case = 1\n","\n","inversion = 0\n","hedge = 0\n","\n","if save_plot:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".xlsx\", \"\")\n","  try:\n","    os.mkdir(plot_check_dir)\n","  except:\n","\n","    #     remove existing dir   #\n","    shutil.rmtree(plot_check_dir)\n","    print(plot_check_dir, 'removed !')\n","    os.mkdir(plot_check_dir)\n","    # pass\n","    \n","\n","prev_plotsize = 200\n","post_plotsize = 100\n","\n","\n","\n","if inversion:  \n","\n","    plot_pr_list = rev_np_pr\n","    h_plot_pr_list = h_rev_np_pr  # hedge\n","\n","else:\n","\n","    plot_pr_list = np_pr\n","    try:\n","      h_plot_pr_list = h_np_pr\n","    except Exception as e:\n","      print(\"error in h_plot_pr :\", e)\n","      h_plot_pr_list = np_pr\n","\n","\n","res_df = h_candle(res_df, 5)\n","res_df = h_candle(res_df, 60)\n","\n","\n","# 'ST1_Up_%s' % basic_st_interval, 'ST1_Down_%s' % basic_st_interval, 'ST2_Up_%s' % basic_st_interval, 'ST2_Down_%s' % basic_st_interval, 'ST3_Up_%s' % basic_st_interval, 'ST3_Down_%s' % basic_st_interval,\n","\n","# --------------------- st level --------------------- #\n","basic_st_interval = '15m' # 5, 6 이라면 겹치지 않게 2로 설정\n","basic_st_list = ['st_base_%s' % basic_st_interval, 'st_upper_%s' % basic_st_interval, 'st_lower_%s' % basic_st_interval\n","                 , 'st_upper2_%s' % basic_st_interval, 'st_lower2_%s' % basic_st_interval]\n","\n","ohlc_list = ['open', 'high', 'low', 'close'] # + basic_st_list\n","hcandle_list = ['hopen_5', 'hclose_5', 'hopen_60', 'hclose_60']\n","\n","mmh_list = ['mmh_st1_1m', 'mmh_st2_1m']\n","norm_st_list = ['norm_st_up_1m', 'norm_st_down_1m']\n","\n","pline_interval = '4h'\n","pline_list = ['st_base_%s' % pline_interval, 'st_upper_%s' % pline_interval, 'st_lower_%s' % pline_interval\n","                 , 'st_upper2_%s' % pline_interval, 'st_lower2_%s' % pline_interval]\n","\n","pline_interval2 = '4h'\n","pline_list2 = ['st_base_%s' % pline_interval2, 'st_upper_%s' % pline_interval2, 'st_lower_%s' % pline_interval2\n","                 , 'st_upper2_%s' % pline_interval2, 'st_lower2_%s' % pline_interval2]\n","\n","# --------------------- dc & bb level --------------------- #\n","dc_interval = '5m'\n","dc_list = ['dc_upper_%s' % dc_interval, 'dc_lower_%s' % dc_interval]\n","\n","bb_interval = '5m'\n","bb_list = ['bb_upper_%s' % bb_interval, 'bb_lower_%s' % bb_interval]\n","\n","hbb_interval = '30m'\n","hbb_list = ['bb_upper_%s' % hbb_interval, 'bb_lower_%s' % hbb_interval]\n","\n","bbwp_list = ['bbwp', 'bbwp_ma']\n","\n","\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1']\n","senkoub_list = ['senkou_b1']\n","\n","sar_list = ['sar_15m']\n","\n","# ma_list = ['sma1', 'sma4']\n","sma_list = ['sma_1m']\n","\n","# -------------- price rolling indi. -------------- #\n","ema_list = ['ema5_1m']\n","# cb_list = ['cloud_bline_1m']\n","cb_list = ['cloud_bline_30m']\n","# cb_list = ['cloud_bline_5m']\n","\n","\n","\n","# -------------- under price phase -------------- #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist%s' % basic_st_interval]\n","# macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3']\n","# trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix%s' % basic_st_interval]\n","trix_list = ['trix1', 'trix2', 'trix3']\n","stoch_list = ['stoch_5m']\n","fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","cctbbo_list = ['cctbbo']\n","emaroc_list = ['ema_roc']\n","\n","\n","# -------------- summation -------------- #\n","\n","# input_colname = ohlc_list + basic_st_list + pline_list + bb_list + hbb_list + sma_list + cb_list + stoch_list + sar_list + dc_list\n","input_colname = ohlc_list + hcandle_list + bb_list + dc_list + hbb_list + cb_list\n","\n","# yrange_colname = ohlc_list + basic_st_list + pline_list # currently just used for ymin, ymax\n","yrange_colname = ohlc_list + hcandle_list + bb_list + dc_list + hbb_list # currently just used for ymin, ymax\n","\n","\n","# aggr_obj = dict(zip(plot_pr_list, open_list, enumerate(trade_list)))\n","aggr_obj = dict(zip(plot_pr_list, zip(open_list, enumerate(trade_list))))\n","\n","sorted_obj = sorted(aggr_obj.items(), key=(lambda x: x[0]), reverse=pr_descend)\n","# print(aggr_obj)\n","# print(sorted_obj)\n","\n","if pr_sort:\n","  iter_obj = sorted_obj\n","else:\n","  iter_obj = aggr_obj.items()\n","\n","for temp_pr, (open_idx, (t_i, (ep_idx_list_, tp_idx_list_))) in iter_obj:  # 0.699700153073042, (291402, (3014, ([370012], [370014])))\n","\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","\n","  if loss_case:\n","    if plot_pr_list[t_i] > 1.0:\n","      continue  \n","  \n","  #   open size indexing by open_idx    #\n","  open_side = res_df['entry'].iloc[open_idx]\n","  print(\"open_side :\", open_side)\n","\n","\n","  # ---------- const. zone ---------- #\n","\n","  # if open_side == 1:\n","  #   continue\n","\n","  # if open_idx == 63901:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  # if tp_state_list[t_i] != 'd-open':\n","\n","  # if tp_ratio_list[t_i] > 0.4:\n","  #   continue\n","\n"," \n","  # print(\"open_idx :\", open_idx)\n","  print(\"np_timeidx[open_idx] :\", np_timeidx[open_idx])\n","\n","\n","  plot_df = res_df.iloc[open_idx - prev_plotsize:tp_idx_list_[-1] + post_plotsize][input_colname]\n","\n","\n","  #       keep off-color st with another variable         #\n","  # st_trend_plot_df = res_df[['ST1_Trend%s' % basic_st_interval, 'ST2_Trend%s' % basic_st_interval, 'ST3_Trend%s' % basic_st_interval]].iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","\n","  # fig = trendln.plot_support_resistance(plot_df['close'], accuracy=8, fromwindows=0, numbest=1,  window=30) # requires matplotlib - pip install matplotlib\n","  \n","  plt.style.use('dark_background')\n","\n","  fig = plt.figure(figsize=(14, 18))\n","  \n","  gs = gridspec.GridSpec(nrows=3, # row 몇 개 \n","                       ncols=1, # col 몇 개 \n","                       height_ratios=[3, 1, 1]\n","                      )\n","  \n","  ax = fig.add_subplot(gs[0])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='#26a69a', colordown='#ef5350')\n","\n","  # ---------- h_candle ---------- #\n","  alpha = 1\n","  lw = 0.5\n","  for cd_i, candle in enumerate(hcandle_list):\n","\n","    if cd_i == 2:\n","      lw = 2      \n","    plt.step(np.arange(len(plot_df)), plot_df[candle].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","\n","  # alpha = 0.1\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['hclose_60'].values, plot_df['hopen_60'].values, \n","  #                     where=1, facecolor='#ffffff', alpha=alpha)  \n","  \n","\n","  # ---------- plot basic st_line ---------- #\n","  # alpha = 1\n","  # lw = 1\n","  # for sm_i, item in enumerate(basic_st_list):\n","  #   if sm_i == 0:\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","  #   else:\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","    \n","  # alpha = 0.3\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['st_upper2_%s' % basic_st_interval].values, plot_df['st_upper_%s' % basic_st_interval].values, \n","  #                     where=plot_df['st_upper2_%s' % basic_st_interval].values >= plot_df['st_upper_%s' % basic_st_interval].values, facecolor='#00ff00', alpha=alpha)                      \n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['st_lower2_%s' % basic_st_interval].values, plot_df['st_lower_%s' % basic_st_interval].values, \n","  #                     where=plot_df['st_lower2_%s' % basic_st_interval].values <= plot_df['st_lower_%s' % basic_st_interval].values, facecolor='#00ff00', alpha=alpha)\n","  \n","  # # ---------- plot pline ---------- #\n","\n","  # alpha = 1\n","  # lw = 2\n","  # for sm_i, item in enumerate(pline_list):\n","  #   if sm_i == 0:\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","  #   else:\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","  \n","  # alpha = 0.3\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['st_upper2_%s' % pline_interval].values, plot_df['st_upper_%s' % pline_interval].values, \n","  #                     where=plot_df['st_upper2_%s' % pline_interval].values >= plot_df['st_upper_%s' % pline_interval].values, facecolor='#2962ff', alpha=alpha)                      \n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['st_lower2_%s' % pline_interval].values, plot_df['st_lower_%s' % pline_interval].values, \n","  #                     where=plot_df['st_lower2_%s' % pline_interval].values <= plot_df['st_lower_%s' % pline_interval].values, facecolor='#2962ff', alpha=alpha)\n","  \n","  # ---------- plot pline2 ---------- #\n","  # alpha = 1\n","  # lw = 4\n","  # for sm_i, item in enumerate(pline_list2):\n","  #   if sm_i == 0:\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","  #   else:\n","  #     plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","  \n","  # alpha = 0.3\n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['st_upper2_%s' % pline_interval2].values, plot_df['st_upper_%s' % pline_interval2].values, \n","  #                     where=plot_df['st_upper2_%s' % pline_interval2].values >= plot_df['st_upper_%s' % pline_interval2].values, facecolor='#00ff00', alpha=alpha)                      \n","  # plt.fill_between(np.arange(len(plot_df)), plot_df['st_lower2_%s' % pline_interval2].values, plot_df['st_lower_%s' % pline_interval2].values, \n","  #                     where=plot_df['st_lower2_%s' % pline_interval2].values <= plot_df['st_lower_%s' % pline_interval2].values, facecolor='#00ff00', alpha=alpha)\n","  \n","\n","  # ---------- mmh pline ---------- #\n","\n","  # plt.step(plot_df[['mmh_st1']].values, 'fuchsia', alpha=1, linewidth=1) \n","  # plt.step(plot_df[['mmh_st2']].values, 'g', linestyle='-', alpha=1, linewidth=1) \n","\n","\n","  # plt.step(np.arange(len(plot_df)), plot_df[['norm_st_up']].values, linestyle='-', linewidth=2, color='r') \n","  # plt.step(np.arange(len(plot_df)), plot_df[['norm_st_down']].values, linestyle='-', linewidth=2, color='b') \n","\n","  # ---------------------- on price indicator part end ---------------------- #\n","\n","  # ---------------------- ma ---------------------- #\n","   # --------- ema --------- #\n","  # alpha = 1\n","  # for sm_i, item in enumerate(ema_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#03ed30', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  #   # --------- sma --------- #\n","  # alpha = 1\n","  # for sm_i, sma in enumerate(sma_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 4\n","  #   plt.step(np.arange(len(plot_df)), plot_df[sma].values, alpha=alpha, color='#e91e63', linewidth=lw)\n","  #   alpha -= 0.2\n","\n","  \n","  # ---------------------- cb ---------------------- #\n","  alpha = 1\n","  for sm_i, item in enumerate(cb_list):\n","    if sm_i > 0:\n","      lw = 5\n","    else:\n","      lw = 2\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#5b9cf6', linewidth=lw)\n","    alpha -= 0.2\n","  \n","  # ---------------------- dc ---------------------- #\n","  alpha = 1\n","  lw = 2\n","  for sm_i, item in enumerate(dc_list):\n","      plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffeb3b', linewidth=lw)\n","\n","  # ---------------------- bb ---------------------- #\n","  alpha = 1\n","  lw = 1\n","  for sm_i, item in enumerate(bb_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ffffff', linewidth=lw)\n","\n","  alpha = 0.2\n","  plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % bb_interval].values, plot_df['bb_lower_%s' % bb_interval].values, \n","                      where=plot_df['bb_upper_%s' % bb_interval].values >= plot_df['bb_lower_%s' % bb_interval].values, facecolor='#ffffff', alpha=alpha)   \n","\n","  # ---------------------- hbb ---------------------- #\n","  alpha = 1\n","  lw = 3\n","  for sm_i, item in enumerate(hbb_list):\n","    plt.step(np.arange(len(plot_df)), plot_df[item].values, alpha=alpha, color='#ff00ff', linewidth=lw)\n","  \n","  alpha = 0.2\n","  plt.fill_between(np.arange(len(plot_df)), plot_df['bb_upper_%s' % hbb_interval].values, plot_df['bb_lower_%s' % hbb_interval].values, \n","                      where=plot_df['bb_upper_%s' % hbb_interval].values >= plot_df['bb_lower_%s' % hbb_interval].values, facecolor='#ff00ff', alpha=alpha) \n","  \n","  #               sar               #\n","  # alpha = 1\n","  # markersize = 5\n","  # for sar in sar_list:\n","  #   plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","  #   markersize += 1\n","  #   alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  # alpha = 0.7\n","  # for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","  #                     where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","  #   plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","  #                     where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","  #   alpha -= 0.05\n","  \n","  # ------------------------------------------------------------- #\n","\n","\n","  # ------------- ep ------------- #\n","  # if i != initial_i:\n","  # if len(ep_idx_list_) > 1:\n","  \n","    #        initial order         #\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='#ffeb3b')\n","  plt.axvline(prev_plotsize, alpha=0.5, linestyle='--', color='#ffeb3b')\n","\n","  for ep_i in range(len(ep_idx_list_)):\n","    # plt.axvline(prev_plotsize + (ep_idx_list_[ep_i] - ep_idx_list_[0]), alpha=0.7, linestyle='--', color='#ffeb3b')\n","    plt.axvline(prev_plotsize + (ep_idx_list_[ep_i] - open_idx), alpha=0.7, linestyle='--', color='#ffeb3b')\n","\n","  # plt.axvline(prev_plotsize, alpha=0.5, linestyle='--')\n","\n","  x0,x1 = plt.gca().get_xlim()\n","\n","  # ep_xmin = (prev_plotsize + (ep_idx_list_[ep_i] - ep_idx_list_[0])) / x1\n","  ep_xmin = (prev_plotsize + (ep_idx_list_[ep_i] - open_idx)) / x1\n","  plt.axhline(ep_tp_list[t_i][0], linestyle='--', xmin=ep_xmin, xmax=1, alpha=1, color='lime')  # ep line axhline  \n","  plt.text(x1, ep_tp_list[t_i][0][0], ' ep :\\n %s' % ep_tp_list[t_i][0][0], ha='left', va='center', fontweight='bold') # ep line label\n","\n","  \n","  # ------------- tp ------------- #\n","  for sub_i in range(len(ep_tp_list[t_i][1])):\n","\n","    # tp_xmin = (prev_plotsize + (tp_idx_list_[sub_i] - ep_idx_list_[0])) / x1\n","    tp_xmin = (prev_plotsize + (tp_idx_list_[sub_i] - open_idx)) / x1\n","    plt.axhline(ep_tp_list[t_i][1][sub_i], linestyle='--', xmin=tp_xmin , xmax=1, alpha=1, color='lime')  # tp line axhline\n","    plt.text(x1, ep_tp_list[t_i][1][sub_i], ' tp :\\n %s' % ep_tp_list[t_i][1][sub_i], ha='left', va='center', fontweight='bold') # tp line label\n","     \n","    # plt.axvline(prev_plotsize + (tp_idx_list_[sub_i] - ep_idx_list_[0]), alpha=1., linestyle='--', color='#ffeb3b', zorder=2)\n","    plt.axvline(prev_plotsize + (tp_idx_list_[sub_i] - open_idx), alpha=1., linestyle='--', color='#ffeb3b', zorder=2)\n","\n","\n","  # ------------- rtc horizontal range ------------- #\n","  rtc_ratio_list = [-0.5, 0.272, 0.36, 0.4, 0.5]\n","  if open_side == config.ep_set.short_entry_score:\n","    plt.axhline(res_df['short_rtc_1'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    plt.axhline(res_df['short_rtc_0'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff') \n","    for rtc_k in rtc_ratio_list:\n","      plt.axhline(res_df['short_rtc_1'].iloc[open_idx] - res_df['short_rtc_gap'].iloc[open_idx] * rtc_k, linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","      plt.text(x0, res_df['short_rtc_1'].iloc[open_idx] - res_df['short_rtc_gap'].iloc[open_idx] * rtc_k, ' %s' % rtc_k, ha='left', va='center', fontweight='bold')\n","      \n","    y_max = res_df['short_rtc_0'].iloc[open_idx]\n","    y_min = res_df['short_rtc_1'].iloc[open_idx] - res_df['short_rtc_gap'].iloc[open_idx] * rtc_k\n","\n","    print(\"short_tp :\", res_df['short_tp'].iloc[open_idx])\n","    print(\"short_out :\", res_df['short_out'].iloc[open_idx])\n","\n","  else:\n","    plt.axhline(res_df['long_rtc_1'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","    plt.axhline(res_df['long_rtc_0'].iloc[open_idx], linewidth=.5, linestyle='-', alpha=1, color='#ffffff') \n","    for rtc_k in rtc_ratio_list:\n","      plt.axhline(res_df['long_rtc_1'].iloc[open_idx] + res_df['long_rtc_gap'].iloc[open_idx] * rtc_k, linewidth=.5, linestyle='-', alpha=1, color='#ffffff')\n","      plt.text(x0, res_df['long_rtc_1'].iloc[open_idx] + res_df['long_rtc_gap'].iloc[open_idx] * rtc_k, ' %s' % rtc_k, ha='left', va='center', fontweight='bold')\n","\n","    y_max = res_df['long_rtc_1'].iloc[open_idx] + res_df['long_rtc_gap'].iloc[open_idx] * rtc_k\n","    y_min = res_df['long_rtc_0'].iloc[open_idx]\n","\n","    print(\"long_tp :\", res_df['long_tp'].iloc[open_idx])\n","    print(\"long_out :\", res_df['long_out'].iloc[open_idx])\n","  \n","    t_tr = ((res_df['long_tp'].iloc[open_idx] - res_df['close'].iloc[open_idx] - tp_fee * res_df['close'].iloc[open_idx]) / (res_df['close'].iloc[open_idx] - res_df['long_out'].iloc[open_idx] + out_fee * res_df['close'].iloc[open_idx]))\n","    t_dr = ((res_df['long_tp'].iloc[open_idx] - res_df['close'].iloc[open_idx]) / (res_df['close'].iloc[open_idx] - res_df['long_out'].iloc[open_idx]))     \n","    print(\"t_tr :\", t_tr)\n","    print(\"t_dr :\", t_dr)\n","\n","  #         hedge ep & tp         #\n","  h_i = h_trade_list[t_i][1]\n","  if h_i is not None:\n","    # plt.axvline(prev_plotsize + (h_i - ep_idx_list_[0]), linestyle='--')\n","    plt.axvline(prev_plotsize + (h_i - open_idx), linestyle='--')\n","    plt.axhline(h_ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='magenta')  # ep line axhline\n","    plt.axhline(h_ep_tp_list[t_i][1], linestyle='-', xmin=0.85, xmax=1, linewidth=3, color='magenta')  # tp line axhline\n","\n","  \n","  temp_pr = plot_pr_list[t_i]\n","  # if temp_pr > 1:\n","  #   temp_pr_gap = (temp_pr - 1) / lvrg + fee\n","  #   pgfr = (temp_pr_gap - fee) / abs(temp_pr_gap + fee)\n","  # else:\n","  #   pgfr = np.nan\n","\n","  #         check pr        #\n","  if not config.lvrg_set.static_lvrg:\n","    plt.title(\"%s ~ %s -> %.5f\\n %s\\n h_pr : %.5f\\n lvrg : %s\\ntp_ratio : %.3f\\n dr : %.3f\\n fee : %.4f\" % (ep_idx_list_[0], tp_idx_list_[-1], plot_pr_list[t_i], tp_state_list[t_i], \n","                                                                                                h_plot_pr_list[t_i], leverage_list[t_i], tp_ratio_list[t_i], dr_list[t_i], fee_list[t_i]))\n","\n","    print(\"short real pr :\", (ep_tp_list[t_i][0] / ep_tp_list[t_i][1][sub_i] - fee_list[t_i] - 1) * leverage_list[t_i] + 1)\n","    print(\"long real pr :\", (ep_tp_list[t_i][1][sub_i] / ep_tp_list[t_i][0] - fee_list[t_i] - 1) * leverage_list[t_i] + 1)    \n","\n","  else:\n","    plt.title(\"%s ~ %s -> %.5f\\n %s\\n h_pr : %.5f\\n tp_ratio : %.3f\\n dr : %.3f\\n fee : %.4f\" % (ep_idx_list_[0], tp_idx_list_[-1], plot_pr_list[t_i], tp_state_list[t_i], \n","                                                                                     h_plot_pr_list[t_i], tp_ratio_list[t_i], dr_list[t_i], fee_list[t_i]))\n","\n","    print(\"short real pr :\", (ep_tp_list[t_i][0] / ep_tp_list[t_i][1][sub_i] - fee_list[t_i] - 1) * config.lvrg_set.leverage + 1)\n","    print(\"long real pr :\", (ep_tp_list[t_i][1][sub_i] / ep_tp_list[t_i][0] - fee_list[t_i] - 1) * config.lvrg_set.leverage + 1)\n","  \n","  #           y lim           #  \n","  y_max_ = max(np.max(plot_df[yrange_colname]))\n","  y_min_ = min(np.min(plot_df[yrange_colname]))\n","  y_max = max(y_max, y_max_)\n","  y_min = min(y_min, y_min_)\n","\n","  if np.isnan(y_max) or np.isnan(y_min):\n","    print('continued in yminmax')\n","    continue\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","  \n","\n","  plt.ylim(y_min, y_max)\n","\n","\n","  # ---------------------- outer price indi. ---------------------- #\n","  #           macd          #\n","  # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","    \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for stoch_ in stoch_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[stoch_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(stoch_upper, linestyle='--')\n","  # plt.axhline(stoch_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- cctbbo ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for cctbbo in cctbbo_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cctbbo].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(cctbbo_upper, linestyle='--')\n","  # plt.axhline(cctbbo_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- ema_roc ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for emaroc in emaroc_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[emaroc].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","  \n","  # ---------- bbw ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for bbwp_ in bbwp_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[bbwp_].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(bbwp_thresh, linestyle='--')\n","\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_idx), alpha=0.5, linestyle='--', color='lime')\n","\n","\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  if not save_plot:\n","    plt.show()\n","  \n","  else:\n","    # ---------- save mode ---------- #\n","    fig_name = plot_check_dir +  \"/%s.png\" % t_i\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","\n","  \n","  plt.close()\n","  print()\n","\n","  # break\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"TBE0l6dHRYrE"},"source":["### whole pr & chart sync"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":877},"id":"-txULkhXRbz5","executionInfo":{"status":"ok","timestamp":1636355589887,"user_tz":-540,"elapsed":1436,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"}},"outputId":"7cda9fc7-4a4e-4c52-ffa3-a974b5f7c66f"},"source":["#     chunky survey 필요함    #\n","chunk_size = 50000\n","\n","sync_pr = np.ones(len(res_df))\n","sync_tr = np.zeros(len(res_df))\n","# sync_tr = np.empty(len(res_df))\n","# sync_tr[:] = np.nan\n","\n","max_tr = np.max(tp_ratio_list)\n","min_tr = np.min(tp_ratio_list)\n","\n","for ck_i in range(0, len(res_df), chunk_size):\n","\n","  chunked_df = res_df.iloc[ck_i:ck_i + chunk_size]\n","  # break\n","\n","  for pr_, eptp_idx, tr_ in zip(pr_list[ck_i:ck_i + chunk_size], trade_list[ck_i:ck_i + chunk_size], tp_ratio_list[ck_i:ck_i + chunk_size]):\n","    # print(pr_, eptp_idx)\n","    sync_pr[eptp_idx[-1][0]] = pr_\n","    sync_tr[eptp_idx[-1][0]] = tr_\n","    # break\n","\n","  chunked_pr = sync_pr[ck_i:ck_i + chunk_size]\n","  chunked_tr = sync_tr[ck_i:ck_i + chunk_size]\n","  chunked_tr = np.where(np.isnan(chunked_tr), pd.Series(chunked_tr).shift(1), chunked_tr)\n","\n","  # plt.figure(figsize=(8, 6))\n","\n","  plt.subplot(311)\n","  plt.plot(np.arange(len(chunked_df)), chunked_df['close'])\n","  # plt.show()\n","\n","  plt.subplot(312)\n","  plt.plot(np.cumprod(chunked_pr))\n","  \n","  plt.subplot(313)\n","  plt.plot(chunked_tr)\n","  plt.ylim(min_tr + 0.5 * (max_tr - min_tr), max_tr)\n","  \n","  plt.show()\n","  print()\n"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 3 Axes>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 3 Axes>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n"]}]},{"cell_type":"markdown","metadata":{"id":"59nW2aKYzkN8"},"source":["### plot all indicator (stepline ver.)"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":828},"id":"JDH4rXgNzno6","executionInfo":{"elapsed":3326,"status":"ok","timestamp":1631665238032,"user":{"displayName":"7th June","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08178289703395036410"},"user_tz":-540},"outputId":"3ee8589d-27d7-4433-ed78-7bb1233cf175"},"source":["save_plot = False\n","\n","\n","if save_plot:\n","  plot_check_dir = current_path + \"plot_check/\" +  key.replace(\".xlsx\", \"\")\n","  try:\n","    os.mkdir(plot_check_dir)\n","  except:\n","\n","    #     remove existing dir   #\n","    shutil.rmtree(plot_check_dir)\n","    print(plot_check_dir, 'removed !')\n","    os.mkdir(plot_check_dir)\n","    # pass\n","    \n","# prev_plotsize = 120\n","prev_plotsize = 150\n","post_plotsize = 20\n","\n","# inversion = True\n","inversion = False\n","\n","# hedge = True\n","# hedge = False\n","\n","\n","if inversion:  \n","\n","    plot_pr_list = rev_np_pr\n","    h_plot_pr_list = h_rev_np_pr  # hedge\n","\n","else:\n","\n","    plot_pr_list = np_pr\n","    try:\n","      h_plot_pr_list = h_np_pr\n","    except Exception as e:\n","      print(\"error in h_plot_pr :\", e)\n","      h_plot_pr_list = np_pr\n","\n","\n","#         select plot columns       #\n","major_st_list = ['major_ST1_Up', 'major_ST1_Down', 'major_ST2_Up', 'major_ST2_Down', 'major_ST3_Up', 'major_ST3_Down',\n","                 'major_middle_line', 'major_upper_middle', 'major_lower_middle']\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower'] # + major_st_list\n","\n","\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1',  'senkou_a2']\n","senkoub_list = ['senkou_b1',  'senkou_b2']\n","\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1']\n","\n","# ma_list = ['sma1', 'sma4']\n","ma_list = ['ema5']\n","\n","\n","#     -------------- under price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","# macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3']\n","# trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","trix_list = ['trix1', 'trix2', 'trix3']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher30', 'fisher60', 'fisher120']\n","cctbbo_list = ['cctbbo']\n","emaroc_list = ['ema_roc']\n","\n","\n","#       \n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols + ichimoku_cols2\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + trix_list\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + ma_list\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + ma_list + macd_list + stoch_list + fisher_list + cctbbo_list\n","input_colname = basic_list + major_st_list + senkoua_list + senkoub_list + sar_list + stoch_list + fisher_list + emaroc_list\n","price_colname = basic_list + senkoua_list + senkoub_list + sar_list # currently just used for ymin, ymax\n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols\n","\n","\n","\n","\n","# for t_i, (initial_i, i, j) in enumerate(trade_list):\n","for t_i, (ep_idx_list_, tp_idx_list_) in enumerate(trade_list):\n","  # print(i, j)\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","\n","  # if i <= 4860:\n","  # if i == 1536:\n","  # if 100 < i < 1860:\n","  if ep_idx_list_[0] == 370530:\n","    pass\n","  else:\n","    continue\n","\n","  # if tp_state_list[t_i] != 'd-open':\n","  #   continue\n","\n","  # if (entry[i] == -1) and res_df['close'].iloc[i - 1] > short_ep.iloc[i]:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  # if plot_pr_list[t_i] > 0.5:\n","  # if plot_pr_list[t_i] > 1.0:\n","  # # if plot_pr_list[t_i] < 1.0:\n","  #   continue\n","\n","  # plot_df = res_df.iloc[i - prev_plotsize:j + post_plotsize, input_cols]\n","  plot_df = res_df.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize][input_colname]\n","\n","\n","  #       keep off-color st with another variable         #\n","  # st_trend_plot_df = res_df.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize, [7, 10, 13]]\n","  # st_trend_plot_df = res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend']].iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  st_trend_plot_df = res_df[['minor_ST1_Trend', 'minor_ST2_Trend', 'minor_ST3_Trend', 'major_ST1_Trend', 'major_ST2_Trend', 'major_ST3_Trend']].iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  # htf_st_trend_plot_df = res_df[['major_ST1_Trend', 'major_ST2_Trend', 'major_ST3_Trend']].iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","\n","  # y_max = np.max(plot_df.iloc[:, [4, 6, 8]])\n","  # y_min = np.min(plot_df.iloc[:, [5, 7, 9]])\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  \n","  # y_max = max(np.max(plot_df.iloc[:, [4, 6, 8]]))\n","  # y_min = min(np.min(plot_df.iloc[:, [5, 7, 9]]))\n","  \n","  y_max = max(np.max(plot_df[price_colname]))\n","  y_min = min(np.min(plot_df[price_colname]))\n","\n","  if np.isnan(y_max) or np.isnan(y_min):\n","    continue\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","  \n","  plot_df[\"off_color_upper_st1\"] = np.where(st_trend_plot_df['minor_ST1_Trend'] == 1, plot_df['minor_ST1_Up'], np.nan)\n","  plot_df[\"off_color_upper_st2\"] = np.where(st_trend_plot_df['minor_ST2_Trend'] == 1, plot_df['minor_ST2_Up'], np.nan)\n","  plot_df[\"off_color_upper_st3\"] = np.where(st_trend_plot_df['minor_ST3_Trend'] == 1, plot_df['minor_ST3_Up'], np.nan)\n","  plot_df[\"off_color_lower_st1\"] = np.where(st_trend_plot_df['minor_ST1_Trend'] == -1, plot_df['minor_ST1_Down'], np.nan)\n","  plot_df[\"off_color_lower_st2\"] = np.where(st_trend_plot_df['minor_ST2_Trend'] == -1, plot_df['minor_ST2_Down'], np.nan)\n","  plot_df[\"off_color_lower_st3\"] = np.where(st_trend_plot_df['minor_ST3_Trend'] == -1, plot_df['minor_ST3_Down'], np.nan)\n","\n","  plot_df[\"off_color_upper_hst1\"] = np.where(st_trend_plot_df['major_ST1_Trend'] == 1, plot_df['major_ST1_Up'], np.nan)\n","  plot_df[\"off_color_upper_hst2\"] = np.where(st_trend_plot_df['major_ST2_Trend'] == 1, plot_df['major_ST2_Up'], np.nan)\n","  plot_df[\"off_color_upper_hst3\"] = np.where(st_trend_plot_df['major_ST3_Trend'] == 1, plot_df['major_ST3_Up'], np.nan)\n","  plot_df[\"off_color_lower_hst1\"] = np.where(st_trend_plot_df['major_ST1_Trend'] == -1, plot_df['major_ST1_Down'], np.nan)\n","  plot_df[\"off_color_lower_hst2\"] = np.where(st_trend_plot_df['major_ST2_Trend'] == -1, plot_df['major_ST2_Down'], np.nan)\n","  plot_df[\"off_color_lower_hst3\"] = np.where(st_trend_plot_df['major_ST3_Trend'] == -1, plot_df['major_ST3_Down'], np.nan)\n","\n","\n","  #       replace st values with np.nan, using st trend     #\n","  plot_df['minor_ST1_Up'] = np.where(st_trend_plot_df['minor_ST1_Trend'] == 1, np.nan, plot_df['minor_ST1_Up'])\n","  plot_df['minor_ST2_Up'] = np.where(st_trend_plot_df['minor_ST2_Trend'] == 1, np.nan, plot_df['minor_ST2_Up'])\n","  plot_df['minor_ST3_Up'] = np.where(st_trend_plot_df['minor_ST3_Trend'] == 1, np.nan, plot_df['minor_ST3_Up'])\n","  plot_df['minor_ST1_Down'] = np.where(st_trend_plot_df['minor_ST1_Trend'] == -1, np.nan, plot_df['minor_ST1_Down'])\n","  plot_df['minor_ST2_Down'] = np.where(st_trend_plot_df['minor_ST2_Trend'] == -1, np.nan, plot_df['minor_ST2_Down'])\n","  plot_df['minor_ST3_Down'] = np.where(st_trend_plot_df['minor_ST3_Trend'] == -1, np.nan, plot_df['minor_ST3_Down'])\n","\n","  plot_df['major_ST1_Up'] = np.where(st_trend_plot_df['major_ST1_Trend'] == 1, np.nan, plot_df['major_ST1_Up'])\n","  plot_df['major_ST2_Up'] = np.where(st_trend_plot_df['major_ST2_Trend'] == 1, np.nan, plot_df['major_ST2_Up'])\n","  plot_df['major_ST3_Up'] = np.where(st_trend_plot_df['major_ST3_Trend'] == 1, np.nan, plot_df['major_ST3_Up'])\n","  plot_df['major_ST1_Down'] = np.where(st_trend_plot_df['major_ST1_Trend'] == -1, np.nan, plot_df['major_ST1_Down'])\n","  plot_df['major_ST2_Down'] = np.where(st_trend_plot_df['major_ST2_Trend'] == -1, np.nan, plot_df['major_ST2_Down'])\n","  plot_df['major_ST3_Down'] = np.where(st_trend_plot_df['major_ST3_Trend'] == -1, np.nan, plot_df['major_ST3_Down'])\n","\n","\n","  plot_short_ep = short_ep.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  plot_long_ep = long_ep.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","\n","  plot_upper_middle = (plot_df['middle_line'] + plot_df['min_upper']) / 2\n","  plot_lower_middle = (plot_df['middle_line'] + plot_df['max_lower']) / 2\n","\n","  plot_short_tp = short_tp.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]\n","  plot_long_tp = long_tp.iloc[ep_idx_list_[0] - prev_plotsize:tp_idx_list_[-1] + post_plotsize]  \n","\n","\n","  # fig = trendln.plot_support_resistance(plot_df['close'], accuracy=8, fromwindows=False, numbest=1,  window=30) # requires matplotlib - pip install matplotlib\n","\n","  fig = plt.figure(figsize=(12, 16))\n","  \n","  gs = gridspec.GridSpec(nrows=3, # row 몇 개 \n","                       ncols=1, # col 몇 개 \n","                       height_ratios=[3, 1, 1]\n","                      )\n","  \n","  # fig = plt.figure(figsize=(8, 12))\n","  # ax = fig.add_subplot(111)\n","  # ax = fig.add_subplot(311)\n","  ax = fig.add_subplot(gs[0])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='r', colordown='b')\n","\n","  plt.step(plot_df[['minor_ST1_Up', 'minor_ST2_Up', 'minor_ST3_Up']].values, 'r', alpha=1)  # upper on color\n","  plt.step(plot_df[['minor_ST1_Down', 'minor_ST2_Down', 'minor_ST3_Down']].values, 'b', alpha=1)  # lower on color\n","  \n","  plt.step(plot_df[['major_ST1_Up', 'major_ST2_Up', 'major_ST3_Up']].values, 'r', alpha=1, linewidth=3)  # major upper on color\n","  plt.step(plot_df[['major_ST1_Down', 'major_ST2_Down', 'major_ST3_Down']].values, 'b', alpha=1, linewidth=3)  # major lower on color\n","\n","  plt.step(plot_df[['middle_line']].values, 'fuchsia', alpha=1)  # middle \n","  plt.step(plot_df[['major_middle_line']].values, 'fuchsia', alpha=1, linewidth=3)  # major_middle \n","  \n","  plt.step(plot_df[['off_color_upper_st1', 'off_color_upper_st2', 'off_color_upper_st3']].values, 'r', alpha=1, linestyle=':')  # upper off color\n","  plt.step(plot_df[['off_color_lower_st1', 'off_color_lower_st2', 'off_color_lower_st3']].values, 'b', alpha=1, linestyle=':')  # lower off color\n","  \n","  plt.step(plot_df[['off_color_upper_hst1', 'off_color_upper_hst2', 'off_color_upper_hst3']].values, 'r', alpha=1, linestyle=':', linewidth=3)  # major upper off color\n","  plt.step(plot_df[['off_color_lower_hst1', 'off_color_lower_hst2', 'off_color_lower_hst3']].values, 'b', alpha=1, linestyle=':', linewidth=3)  # major lower off color\n","\n","\n","  # plt.step(np.arange(len(plot_df)), plot_short_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","  # plt.step(np.arange(len(plot_df)),plot_long_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","\n","  plt.step(np.arange(len(plot_df)), plot_upper_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","  plt.step(np.arange(len(plot_df)), plot_lower_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","\n","  plt.step(plot_df[['major_upper_middle']].values, 'g', linestyle='--', alpha=1, linewidth=3)  # major_middle \n","  plt.step(plot_df[['major_lower_middle']].values, 'g', linestyle='--', alpha=1, linewidth=3)  # major_middle \n","  \n","\n","  # plt.step(np.arange(len(plot_df)), plot_short_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","  # plt.step(np.arange(len(plot_df)), plot_long_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","\n","\n","\n","  # ---------------------- on price indicator part ---------------------- #\n","\n","  # ---------------------- sma ---------------------- #\n","  # alpha = 1\n","  # for sm_i, sma in enumerate(ma_list):\n","  #   if sm_i > 0:\n","  #     lw = 5\n","  #   else:\n","  #     lw = 2\n","  #   plt.step(np.arange(len(plot_df)), plot_df[sma].values, alpha=alpha, color='black', linewidth=lw)\n","  #   alpha -= 0.2\n","  \n","  #               sar               #\n","  alpha = 1\n","  markersize = 5\n","  for sar in sar_list:\n","    plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","    markersize += 1\n","    alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  alpha = 0.7\n","  for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","                      where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","                      where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","    alpha -= 0.05\n","  \n","  # ------------------------------------------------------------- #\n","\n","\n","  #       ep & tp     #\n","  # if i != initial_i:\n","  # if len(ep_idx_list_) > 1:\n","  \n","  # ------------- initial order ------------- #\n","  plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  for ep_i in range(len(ep_idx_list_)):\n","    plt.axvline(prev_plotsize + (ep_idx_list_[ep_i] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","\n","  # plt.axvline(prev_plotsize, alpha=0.5, linestyle='--')\n","  plt.axhline(ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='lime')  # ep line axhline\n","\n","  for sub_i in range(len(ep_tp_list[t_i][1])):\n","    plt.axhline(ep_tp_list[t_i][1][sub_i], linestyle='-', xmin=0.75 + 0.05 * (sub_i + 1) , xmax=1, linewidth=3, color='lime')  # tp line axhline\n","    # plt.axhline(ep_tp_list[t_i][1], linestyle='-', xmin=0.9, xmax=1, linewidth=3)  # tp line axhline  \n","    plt.axvline(prev_plotsize + (tp_idx_list_[sub_i] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","\n","\n","  #         hedge ep & tp         #\n","  h_i = h_trade_list[t_i][1]\n","  if h_i is not None:\n","    plt.axvline(prev_plotsize + (h_i - ep_idx_list_[0]), linestyle='--')\n","    plt.axhline(h_ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='magenta')  # ep line axhline\n","    plt.axhline(h_ep_tp_list[t_i][1], linestyle='-', xmin=0.85, xmax=1, linewidth=3, color='magenta')  # tp line axhline\n","\n","  \n","  #         check pr        #\n","  if not static_lvrg:\n","    plt.title(\"%s ~ %s -> %.5f\\n %s\\n h_pr : %.5f\\nlvrg : %s\\ntp_ratio : %.2f\" % (ep_idx_list_[0], tp_idx_list_[-1], plot_pr_list[t_i], tp_state_list[t_i], h_plot_pr_list[t_i], lvrg_list[t_i], tp_ratio_list[t_i]))\n","  else:\n","    plt.title(\"%s ~ %s -> %.5f\\n %s\\n h_pr : %.5f\\ntp_ratio : %.2f\" % (ep_idx_list_[0], tp_idx_list_[-1], plot_pr_list[t_i], tp_state_list[t_i], h_plot_pr_list[t_i], tp_ratio_list[t_i]))\n","\n","  print(\"short real pr :\", (ep_tp_list[t_i][0] / ep_tp_list[t_i][1][sub_i] - fee - 1) * lvrg + 1)\n","  print(\"long real pr :\", (ep_tp_list[t_i][1][sub_i] / ep_tp_list[t_i][0] - fee - 1) * lvrg + 1)\n","\n","  #           y lim         #\n","  plt.ylim(y_min, y_max)\n","\n","\n","  # ---------------------- outer price indi. ---------------------- #\n","  #           macd          #\n","  # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","    \n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=0.5, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for stoch in stoch_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[stoch].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(stoch_upper, linestyle='--')\n","  # plt.axhline(stoch_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- cctbbo ---------- #  \n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for cctbbo in cctbbo_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[cctbbo].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(50, linestyle='--')\n","  # plt.axhline(cctbbo_upper, linestyle='--')\n","  # plt.axhline(cctbbo_lower, linestyle='--')\n","  # plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  # plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","\n","  # ---------- ema_roc ---------- #  \n","  plt.subplot(gs[1])\n","  alpha = 1\n","  for emaroc in emaroc_list:\n","    plt.step(np.arange(len(plot_df)), plot_df[emaroc].values, 'g', alpha=alpha)\n","    # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","    alpha -= 0.2\n","  plt.axvline(prev_plotsize, linestyle='--')\n","  plt.axvline(prev_plotsize + (tp_idx_list_[-1] - ep_idx_list_[0]), alpha=1, linestyle='--')\n","  plt.axvline(prev_plotsize - (ep_idx_list_[0] - open_list[t_i]), alpha=0.5, linestyle='--', color='lime')\n","  plt.axhline(0, linestyle='--')\n","\n","\n","\n","\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  if not save_plot:\n","    plt.show()\n","  \n","  else:\n","    # ---------- save mode ---------- #\n","    fig_name = plot_check_dir +  \"/%s.png\" % t_i\n","    plt.savefig(fig_name)\n","    print(fig_name, \"saved !\")\n","\n","  \n","  plt.close()\n","  print()\n","\n","  # break\n"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["short real pr : [0.95849245]\n","long real pr : [1.0378222]\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 864x1152 with 2 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n"]}]},{"cell_type":"code","metadata":{"id":"KGuJu2j4Aby9"},"source":["# print()\n","for item in os.listdir(current_path + \"plot_check/\"):\n","  if item.endswith('png'):\n","    os.remove(current_path + \"plot_check/\" + item)\n","    print(current_path + \"plot_check/\" + item, \"removed !\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"cj9X6S1jJjER"},"source":["### plot nontp case"]},{"cell_type":"code","metadata":{"id":"Gb1jGrS4Jl8A"},"source":["prev_plotsize = 50\n","\n","# inversion = True\n","inversion = False\n","\n","# hedge = True\n","# hedge = False\n","\n","short_ver = False\n","\n","\n","if inversion:  \n","\n","    plot_pr_list = rev_np_pr\n","    h_plot_pr_list = h_rev_np_pr  # hedge\n","\n","else:\n","\n","    plot_pr_list = np_pr\n","    h_plot_pr_list = h_np_pr\n","\n","\n","\n","#         select plot columns       #\n","# basic_cols = [0, 1, 2, 3, 5, 6, 8, 9, 11, 12, 14] # you don't need to touch\n","\n","# sar_cols = [15, 18] # 15 ~ 19\n","# ichimoku_cols = [20, 21]  # 20 ~ 29\n","# # ichimoku_cols = [22, 23]  # 20 ~ 29\n","# ichimoku_cols2 = [22, 23]  # 20 ~ 29\n","# macd_cols = [30]  # 30 ~ 34\n","\n","# print(res_df.columns[basic_cols])\n","# break\n","\n","basic_list = ['open', 'high', 'low', 'close', 'minor_ST1_Up', 'minor_ST1_Down',\n","       'minor_ST2_Up', 'minor_ST2_Down', 'minor_ST3_Up', 'minor_ST3_Down',\n","       'middle_line', 'min_upper', 'max_lower']\n","# senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3', 'senkou_a4', 'senkou_a5']\n","# senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3', 'senkou_b4', 'senkou_b5']\n","senkoua_list = ['senkou_a1', 'senkou_a2', 'senkou_a3']\n","senkoub_list = ['senkou_b1', 'senkou_b2', 'senkou_b3']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","# sar_list = ['sar1', 'sar2', 'sar3', 'sar4', 'sar5']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","sar_list = ['sar1', 'sar2', 'sar3']\n","\n","#     -------------- under price phase --------------    #\n","macd_list = ['macd_hist1', 'macd_hist2', 'macd_hist3', 'macd_hist4', 'macd_hist5']\n","trix_list = ['trix1', 'trix2', 'trix3', 'trix4', 'trix5']\n","stoch_list = ['stoch']\n","fisher_list = ['fisher']\n","cctbbo_list = ['cctbbo']\n","\n","\n","#       \n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols + ichimoku_cols2\n","# input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + trix_list\n","input_colname = basic_list + senkoua_list + senkoub_list + sar_list + macd_list + stoch_list + fisher_list + cctbbo_list\n","price_colname = basic_list + senkoua_list + senkoub_list + sar_list \n","# input_cols = basic_cols + sar_cols + ichimoku_cols + macd_cols\n","\n","\n","if short_ver:\n","  nontp_indexs = nontp_short_indexs\n","  nontp_liqd_list = nontp_short_liqd_list\n","  nontp_pr_list = nontp_short_pr_list\n","  nontp_ep = nontp_short_ep_list\n","else:\n","  nontp_indexs = nontp_long_indexs\n","  nontp_liqd_list = nontp_long_liqd_list\n","  nontp_pr_list = nontp_long_pr_list\n","  nontp_ep = nontp_long_ep_list\n","\n","\n","for t_i, i in enumerate(nontp_indexs):\n","\n","  j = len(res_df) - 1\n","\n","  # print(i, j)\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","\n","  # if i <= 4860:\n","  # if i == 1536:\n","  # # if 1800 < i < 1860:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  # if tp_state_list[t_i] != 'd-open':\n","  #   continue\n","\n","  # if (entry[i] == -1) and res_df['close'].iloc[i - 1] > upper_ep.iloc[i]:\n","  #   pass\n","  # else:\n","  #   continue\n","\n","  # if plot_pr_list[t_i] > 0.5:\n","  # if plot_pr_list[t_i] > 1.0:\n","  # # if plot_pr_list[t_i] < 1.0:\n","  #   continue\n","\n","  # plot_df = res_df.iloc[i - prev_plotsize:j + 1, input_cols]\n","  plot_df = res_df.iloc[i - prev_plotsize:j + 1][input_colname]\n","\n","\n","  #       keep off-color st with another variable         #\n","  st_trend_plot_df = res_df.iloc[i - prev_plotsize:j + 1, [7, 10, 13]]\n","\n","  # y_max = np.max(plot_df.iloc[:, [4, 6, 8]])\n","  # y_min = np.min(plot_df.iloc[:, [5, 7, 9]])\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  \n","  # y_max = max(np.max(plot_df.iloc[:, [4, 6, 8]]))\n","  # y_min = min(np.min(plot_df.iloc[:, [5, 7, 9]]))\n","  \n","  y_max = max(np.max(plot_df[price_colname]))\n","  y_min = min(np.min(plot_df[price_colname]))\n","  # print(\"y_max, y_min :\", y_max, y_min)\n","  # break\n","\n","  plot_df[\"off_color_upper_st1\"] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, plot_df.iloc[:, [4]], np.nan)\n","  plot_df[\"off_color_upper_st2\"] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, plot_df.iloc[:, [6]], np.nan)\n","  plot_df[\"off_color_upper_st3\"] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, plot_df.iloc[:, [8]], np.nan)\n","  plot_df[\"off_color_lower_st1\"] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, plot_df.iloc[:, [5]], np.nan)\n","  plot_df[\"off_color_lower_st2\"] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, plot_df.iloc[:, [7]], np.nan)\n","  plot_df[\"off_color_lower_st3\"] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, plot_df.iloc[:, [9]], np.nan)\n","\n","\n","  #       replace st values with np.nan, using st trend     #\n","  plot_df.iloc[:, [4]] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, np.nan, plot_df.iloc[:, [4]])\n","  plot_df.iloc[:, [6]] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, np.nan, plot_df.iloc[:, [6]])\n","  plot_df.iloc[:, [8]] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, np.nan, plot_df.iloc[:, [8]])\n","  plot_df.iloc[:, [5]] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, np.nan, plot_df.iloc[:, [5]])\n","  plot_df.iloc[:, [7]] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, np.nan, plot_df.iloc[:, [7]])\n","  plot_df.iloc[:, [9]] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, np.nan, plot_df.iloc[:, [9]])\n","\n","\n","  plot_upper_ep = upper_ep.iloc[i - prev_plotsize:j + 1]\n","  plot_lower_ep = lower_ep.iloc[i - prev_plotsize:j + 1]\n","\n","  plot_upper_middle = (plot_df['middle_line'] + plot_df['min_upper']) / 2\n","  plot_lower_middle = (plot_df['middle_line'] + plot_df['max_lower']) / 2\n","\n","  plot_short_tp = short_tp.iloc[i - prev_plotsize:j + 1]\n","  plot_long_tp = long_tp.iloc[i - prev_plotsize:j + 1]  \n","\n","\n","\n","  # fig = plt.figure(figsize=(12, 16))\n","  fig = plt.figure(figsize=(12, 16))\n","  \n","  gs = gridspec.GridSpec(nrows=3, # row 몇 개 \n","                       ncols=1, # col 몇 개 \n","                       height_ratios=[3, 1, 1]\n","                      )\n","  \n","  # fig = plt.figure(figsize=(8, 12))\n","  # ax = fig.add_subplot(111)\n","  # ax = fig.add_subplot(311)\n","  ax = fig.add_subplot(gs[0])\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='r', colordown='b')\n","\n","  # print(plot_df.values[:, 4:])\n","  plt.step(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper on color\n","  # plt.plot(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper on color\n","  plt.step(plot_df.values[:, [5, 7, 9]], 'b', alpha=1)  # lower on color\n","  plt.step(plot_df.values[:, [10]], 'fuchsia', alpha=1)  # middle\n","  \n","  plt.step(plot_df.values[:, -6:-3], 'r', alpha=1, linestyle=':')  # upper off color\n","  plt.step(plot_df.values[:, -3:], 'b', alpha=1, linestyle=':')  # lower off color\n","\n","\n","\n","  # plt.step(np.arange(len(plot_df)), plot_upper_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","  # plt.step(np.arange(len(plot_df)),plot_lower_ep.values, alpha=1, linestyle='--', color='y')  # ep\n","\n","  plt.step(np.arange(len(plot_df)), plot_upper_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","  plt.step(np.arange(len(plot_df)), plot_lower_middle.values, alpha=1, linestyle='--', color='g')  # 2nd middle\n","\n","  # plt.step(np.arange(len(plot_df)), plot_short_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","  # plt.step(np.arange(len(plot_df)), plot_long_tp.values, alpha=1, linestyle=':', color='y')  # tp\n","\n","\n","\n","  # ---------------------- indicator part ---------------------- #\n","  \n","  #               sar               #\n","  alpha = 1\n","  markersize = 5\n","  for sar in sar_list:\n","    plt.step(plot_df[sar].values, 'c*', alpha=alpha, markersize=markersize, color='dodgerblue')  # sar mic\n","    markersize += 1\n","    alpha -= 0.1\n","\n","  # plt.step(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  #               cloud               #\n","  alpha = 0.7\n","  for senkoua, senkoub in zip(senkoua_list, senkoub_list):\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values, # ichimoku\n","                      where=plot_df[senkoua].values >= plot_df[senkoub].values, facecolor='g', alpha=alpha) # ichimoku\n","    plt.fill_between(np.arange(len(plot_df)), plot_df[senkoua].values, plot_df[senkoub].values,\n","                      where=plot_df[senkoua].values <= plot_df[senkoub].values, facecolor='r', alpha=alpha)  \n","    alpha -= 0.05\n","  \n","  # ------------------------------------------------------------- #\n","\n","\n","  #       ep & tp     #\n","  if i != initial_i:\n","    plt.axvline(prev_plotsize - (i - initial_i), alpha=0.5, linestyle='--')\n","  plt.axvline(prev_plotsize, alpha=0.5, linestyle='--')\n","  plt.axhline(nontp_ep[t_i], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='lime')  # ep line axhline\n","\n","  # for sub_i in range(len(ep_tp_list[t_i][1])):\n","  #   plt.axhline(ep_tp_list[t_i][1][sub_i], linestyle='-', xmin=0.75 + 0.05 * (sub_i + 1) , xmax=1, linewidth=3, color='lime')  # tp line axhline\n","    # plt.axhline(ep_tp_list[t_i][1], linestyle='-', xmin=0.9, xmax=1, linewidth=3)  # tp line axhline    \n","\n","  #         hedge ep & tp         #\n","  # h_i = h_trade_list[t_i][1]\n","  # if h_i is not None:\n","  #   plt.axvline(prev_plotsize + (h_i - i), linestyle='--')\n","  #   plt.axhline(h_ep_tp_list[t_i][0], linestyle='-', xmin=0.75, xmax=1, linewidth=3, color='magenta')  # ep line axhline\n","  #   plt.axhline(h_ep_tp_list[t_i][1], linestyle='-', xmin=0.85, xmax=1, linewidth=3, color='magenta')  # tp line axhline\n","\n","  \n","  #         check pr        #\n","  plt.title(\"%s ~ %s -> liqd : %.2f\\npr : %.2f\" % (i, j, nontp_liqd_list[t_i], nontp_pr_list[t_i]))\n","\n","  #           y lim         #\n","  plt.ylim(y_min, y_max)\n","\n","\n","  # #           macd          #\n","  # # plt.subplot(312)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for macd in macd_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[macd].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  # #           trix          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[2])\n","  # alpha = 1\n","  # for trix in trix_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[trix].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(0, linestyle='--')\n","\n","  \n","  #           fisher          #  \n","  # # plt.subplot(313)\n","  # plt.subplot(gs[1])\n","  # alpha = 1\n","  # for fisher in fisher_list:\n","  #   plt.step(np.arange(len(plot_df)), plot_df[fisher].values, 'g', alpha=alpha)\n","  #   # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","  #   alpha -= 0.2\n","  # plt.axvline(prev_plotsize, linestyle='--')\n","  # plt.axhline(0, linestyle='--')\n","  # plt.axhline(fisher_upper, linestyle='--')\n","  # plt.axhline(fisher_lower, linestyle='--')\n","\n","  #           stoch          #  \n","  # plt.subplot(313)\n","  plt.subplot(gs[1])\n","  alpha = 1\n","  for stoch in stoch_list:\n","    plt.step(np.arange(len(plot_df)), plot_df[stoch].values, 'g', alpha=alpha)\n","    # plt.fill_between(np.arange(len(plot_df)), 0, plot_df[macd].values, facecolor='g', alpha=alpha) \n","    alpha -= 0.2\n","  plt.axvline(prev_plotsize, linestyle='--')\n","  plt.axhline(50, linestyle='--')\n","  plt.axhline(stoch_upper, linestyle='--')\n","  plt.axhline(stoch_lower, linestyle='--')\n","\n","\n","\n","  # ---------------------- plot ---------------------- #\n","\n","  plt.show()\n","  # plt.draw()\n","  plt.close()\n","  print()\n","\n","  # break\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-g7YY5BvMcLS"},"source":["### show detail values"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5TxQ3rDnKMa7","executionInfo":{"elapsed":255,"status":"ok","timestamp":1625228960601,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"},"user_tz":-540},"outputId":"422ac214-8c88-4f39-ec3a-7c823574f6da"},"source":["i, j = 27267, 27268\n","print(\"upper_ep.iloc[i] :\", upper_ep.iloc[i])\n","print(\"short_tp.iloc[j] :\", short_tp.iloc[j])"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["upper_ep.iloc[i] : 2348.266954813089\n","short_tp.iloc[j] : 2205.609333246829\n"]}]},{"cell_type":"markdown","metadata":{"id":"7AIl6EBuZNOL"},"source":["## none plot off-color st"]},{"cell_type":"code","metadata":{"id":"yaVxrNGzZgrF"},"source":["prev_plotsize = 50\n","\n","for t_i, (i, j) in enumerate(trade_list):\n","  # print(i, j)\n","\n","  if not(i >= prev_plotsize):\n","    continue\n","\n","  # if pr_list[t_i] >= 1:\n","  #   continue\n","\n","  plot_df = res_df.iloc[i - prev_plotsize:j + 1, [0, 1, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 16]]\n","\n","  #       replace st values with np.nan, using st trend     #\n","  st_trend_plot_df = res_df.iloc[i - prev_plotsize:j + 1, [7, 10, 13]]\n","  plot_df.iloc[:, [4]] = np.where(st_trend_plot_df.iloc[:, [0]] == 1, np.nan, plot_df.iloc[:, [4]])\n","  plot_df.iloc[:, [6]] = np.where(st_trend_plot_df.iloc[:, [1]] == 1, np.nan, plot_df.iloc[:, [6]])\n","  plot_df.iloc[:, [8]] = np.where(st_trend_plot_df.iloc[:, [2]] == 1, np.nan, plot_df.iloc[:, [8]])\n","  plot_df.iloc[:, [5]] = np.where(st_trend_plot_df.iloc[:, [0]] == -1, np.nan, plot_df.iloc[:, [5]])\n","  plot_df.iloc[:, [7]] = np.where(st_trend_plot_df.iloc[:, [1]] == -1, np.nan, plot_df.iloc[:, [7]])\n","  plot_df.iloc[:, [9]] = np.where(st_trend_plot_df.iloc[:, [2]] == -1, np.nan, plot_df.iloc[:, [9]])\n","\n","\n","  plot_upper_ep = upper_ep.iloc[i - prev_plotsize:j + 1]\n","  plot_lower_ep = lower_ep.iloc[i - prev_plotsize:j + 1]\n","\n","  fig = plt.figure(figsize=(8, 6))\n","  ax = fig.add_subplot(111)\n","\n","  # fig.show()\n","  # fig.canvas.draw()\n","\n","  temp_ohlc = plot_df.values[:, :4]\n","  index = np.arange(len(temp_ohlc))\n","  candle = np.hstack((np.reshape(index, (-1, 1)), temp_ohlc))\n","  mf.candlestick_ohlc(ax, candle, width=0.5, colorup='r', colordown='b')\n","\n","  # print(plot_df.values[:, 4:])\n","  plt.plot(plot_df.values[:, [4, 6, 8]], 'r', alpha=1)  # upper\n","  plt.plot(plot_df.values[:, [5, 7, 9]], 'b', alpha=1)  # lower\n","  plt.plot(plot_df.values[:, [10]], 'g', alpha=1)  # middle\n","\n","  plt.plot(plot_df.values[:, [11]], 'c*', alpha=1, markersize=5)  # sar mic\n","  plt.plot(plot_df.values[:, [12]], 'co', alpha=1, markersize=7)  # sar mac\n","\n","  plt.plot(plot_upper_ep.values, alpha=1, linestyle='--')  # ep\n","  plt.plot(plot_lower_ep.values, alpha=1, linestyle='--')  # ep\n","\n","  plt.axvline(prev_plotsize, linestyle='--')\n","\n","  plt.title(\"%s ~ %s -> %.5f\" % (i, j, pr_list[t_i]))\n","  plt.show()\n","  # plt.draw()\n","  plt.close()"],"execution_count":null,"outputs":[]}]}