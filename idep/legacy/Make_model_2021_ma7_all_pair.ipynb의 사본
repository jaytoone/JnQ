{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python [conda env:tensorflow2_p36]","language":"python","name":"conda-env-tensorflow2_p36-py"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.5"},"colab":{"name":"Make_model_2021_ma7_all_pair.ipynb의 사본","provenance":[{"file_id":"1z4z_KLPzc6RWsxo3X_dHbpByxUAgjoMJ","timestamp":1583754134002}],"collapsed_sections":[],"toc_visible":true,"machine_shape":"hm"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AK9FjWwLOyay","executionInfo":{"status":"ok","timestamp":1618488249552,"user_tz":-540,"elapsed":19520,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"514383f7-aba1-4cf9-b865-45b6990a98e3"},"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","import os, sys\n","\n","current_path = '/content/drive/My Drive/Colab Notebooks/Project_Stock/'\n","\n","os.chdir(current_path)"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"8uqYv5StTazo"},"source":["### **Requirements**"]},{"cell_type":"code","metadata":{"id":"9qGt60DKTZmf"},"source":["# !pip install statsmodels==0.12.2\n","\n","# import statsmodels\n","# statsmodels.__version__"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"y7bVjhlwPI_-"},"source":["### **ARIMA**"]},{"cell_type":"code","metadata":{"id":"NvdpArctN_6l","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1618488251949,"user_tz":-540,"elapsed":7514,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"2e9f7267-c0f6-4cd5-c08c-0b253572b183"},"source":["from statsmodels.tsa.arima_model import ARIMA\n","# from statsmodels.tsa.arima.model import ARIMA\n","\n","from datetime import datetime\n","\n","\n","def arima_test(target, use_rows=None):\n","\n","  size = int(len(target) * 0.66)\n","  train, test = target[:size].values, target[size:]\n","  test_shift = test.shift(1).values\n","  test = test.values\n","  # break\n","\n","  history = list(train)\n","  predictions = list()\n","  err_ranges = list()\n","  for t in range(len(test)):\n","    \n","      if use_rows is not None:\n","        history = history[-use_rows:]\n","        \n","      model = ARIMA(history, order=(0, 2, 4))\n","      model_fit = model.fit()\n","      output = model_fit.forecast()\n","      # print(output)\n","      # break\n","\n","      predictions.append(output[0])\n","      err_ranges.append(output[1])\n","      obs = test[t]\n","      # print('obs :', obs)\n","      history.append(obs)\n","      # break\n","      print('\\r %.2f%%' % (t / len(test) * 100), end='')\n","\n","  print(len(test), len(predictions))\n","\n","  return predictions, err_ranges\n","\n","\n","# print(high)\n","\n","\n","def get_back_result(ohlcv, predictions, err_ranges, tp=0.04, sl=None, leverage=1, show_detail=False, show_plot=False, return_pr=False, cumsum=False, \n","                    close_ver=False, reverse_short=False):\n","\n","  \n","  high, low, test = np.split(ohlcv.values[-len(predictions):, [1, 2, 3]], 3, axis=1)\n","\n","  if close_ver:\n","    predictions = ohlcv['close'].shift(1).values[-len(test):]\n","\n","  fee = 0.0006\n","  long_profits = []\n","  short_profits = []\n","  liquidations = []\n","  win_cnt = 0\n","  for i in range(len(test)):\n","\n","    long_ep = predictions[i]\n","    if sl is not None:\n","      long_sl = long_ep * (1 / (sl + 1))\n","\n","    # assert long_ep < long_exit, 'long_exit < long_ep !, %s, %s' % (long_exit, long_ep)\n","    \n","    short_ep = (predictions[i] + err_ranges[i]) * (1 + tp)\n","    # short_ep = (predictions[i] + err_ranges[i]) * (1 / (1 - tp))\n","    if sl is not None:\n","      short_sl = short_ep * (1 / (1 - sl))\n","\n","    # print((low[i]))\n","\n","    #    long 우선   # <-- long & short 둘다 체결된 상황에서는 long 체결을 우선으로 한다.\n","    if low[i] < long_ep:\n","      \n","      liquidation = low[i] / long_ep - fee\n","      l_liquidation = 1 + (liquidation - 1) * leverage\n","      liquidations.append(l_liquidation)\n","\n","      if max(l_liquidation, 0) == 0:\n","        l_profit = 0\n","        # print('low[i], long_ep, l_liquidation :', low[i], long_ep, l_liquidation)\n","      else:\n","\n","        if sl is not None:\n","          if low[i] < long_sl:\n","            profit = long_sl / long_ep - fee\n","          else:\n","            profit = test[i] / long_ep - fee\n","\n","        else:\n","          profit = test[i] / long_ep - fee\n","\n","        l_profit = 1 + (profit - 1) * leverage\n","        l_profit = max(l_profit, 0)\n","        \n","        if profit >= 1:\n","          win_cnt += 1\n","\n","      long_profits.append(l_profit)\n","      short_profits.append(1.0)\n","\n","      if show_detail:\n","        print(test[i], predictions[i], long_ep)\n","\n","    # if high[i] > short_ep > low[i]: # 지정 대기가 아니라, 해당 price 가 지나면, long 한다.\n","\n","    #   if not reverse_short:\n","    #     liquidation = short_ep / high[i]  - fee\n","    #   else:\n","    #     liquidation = low[i] / short_ep  - fee\n","    #   l_liquidation = 1 + (liquidation - 1) * leverage\n","\n","    #   if max(l_liquidation, 0) == 0:\n","    #     l_profit = 0\n","    #   else:\n","\n","    #     if sl is not None:\n","    #       if high[i] > short_sl:\n","\n","    #         if not reverse_short:\n","    #           profit = short_ep / short_sl - fee\n","    #         else:\n","    #           profit = short_sl / short_ep - fee\n","\n","    #       else:\n","    #         if not reverse_short:\n","    #           profit = short_ep / test[i] - fee\n","    #         else:\n","    #           profit = test[i] / short_ep - fee\n","\n","    #     else:\n","\n","    #       if not reverse_short:\n","    #         profit = short_ep / test[i] - fee\n","    #       else:\n","    #         profit = test[i] / short_ep - fee\n","\n","    #     l_profit = 1 + (profit - 1) * leverage\n","    #     l_profit = max(l_profit, 0)\n","\n","    #     if profit >= 1:\n","    #       win_cnt += 1\n","\n","    #   short_profits.append(l_profit)\n","    #   long_profits.append(1.0)\n","\n","    #   if show_detail:\n","    #     print(test[i], predictions[i], short_ep)\n","    \n","    else:\n","      long_profits.append(1.0)\n","      short_profits.append(1.0)\n","      liquidations.append(1.0)\n","\n","\n","  long_win_ratio = sum(np.array(long_profits) > 1.0) / sum(np.array(long_profits) != 1.0)\n","  short_win_ratio = sum(np.array(short_profits) > 1.0) / sum(np.array(short_profits) != 1.0)\n","  long_frequency = sum(np.array(long_profits) != 1.0) / len(test)\n","  short_frequency = sum(np.array(short_profits) != 1.0) / len(test)\n","  if not cumsum:\n","    long_accum_profit = np.array(long_profits).cumprod()\n","    short_accum_profit = np.array(short_profits).cumprod()\n","  else:\n","    long_accum_profit = (np.array(long_profits) - 1.0).cumsum()\n","    short_accum_profit = (np.array(short_profits) - 1.0).cumsum()\n","\n","  # print(win_ratio)\n","\n","  if show_plot:\n","\n","    plt.figure(figsize=(10, 5))\n","    plt.suptitle('tp=%.4f, lvrg=%d' % (tp, leverage))\n","\n","    plt.subplot(151)\n","    plt.plot(liquidations)\n","    plt.title('liquidations')\n","\n","    plt.subplot(152)\n","    plt.plot(long_profits)\n","    plt.title('Win Ratio : %.2f %%\\nrequency : %.2f %%' % (long_win_ratio * 100, long_frequency * 100), color='black')\n","    # plt.show()\n","\n","    # print()\n","    plt.subplot(153)\n","    plt.plot(long_accum_profit)\n","    plt.title('Accum_profit : %.2f' % long_accum_profit[-1], color='black')\n","\n","    plt.subplot(154)\n","    plt.plot(short_profits)\n","    plt.title('Win Ratio : %.2f %%\\nrequency : %.2f %%' % (short_win_ratio * 100, short_frequency * 100), color='black')\n","    # plt.show()\n","\n","    # print()\n","    plt.subplot(155)\n","    plt.plot(short_accum_profit)\n","    plt.title('Accum_profit : %.2f' % short_accum_profit[-1], color='black')\n","    plt.show()\n","\n","  return [long_win_ratio, short_win_ratio], [long_frequency, short_frequency], [long_accum_profit[-1], short_accum_profit[-1]], [long_profits, short_profits]\n","\n","\n","# get_back_result(tp=0.04, leverage=1, show_plot=True)\n"],"execution_count":2,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"aDkU3tMiM2lO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1618488253620,"user_tz":-540,"elapsed":8581,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"740fdebd-93d5-41e6-e26b-f1376c2bee01"},"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","\n","interval = '30m'\n","date_path = './candlestick_concated/%s/2021-02-11/' % interval\n","file_list = os.listdir(date_path)\n","\n","print((file_list))"],"execution_count":3,"outputs":[{"output_type":"stream","text":["['2021-02-11 BTCUSDT.xlsx', '2021-02-11 ETHUSDT.xlsx', '2021-02-11 BCHUSDT.xlsx', '2021-02-11 XRPUSDT.xlsx', '2021-02-11 EOSUSDT.xlsx', '2021-02-11 LTCUSDT.xlsx', '2021-02-11 ETCUSDT.xlsx', '2021-02-11 LINKUSDT.xlsx', '2021-02-11 XLMUSDT.xlsx', '2021-02-11 ADAUSDT.xlsx', '2021-02-11 XMRUSDT.xlsx', '2021-02-11 SXPUSDT.xlsx', '2021-02-11 KAVAUSDT.xlsx', '2021-02-11 BANDUSDT.xlsx', '2021-02-11 DASHUSDT.xlsx', '2021-02-11 ZECUSDT.xlsx', '2021-02-11 XTZUSDT.xlsx', '2021-02-11 BNBUSDT.xlsx', '2021-02-11 ATOMUSDT.xlsx', '2021-02-11 ONTUSDT.xlsx', '2021-02-11 IOTAUSDT.xlsx', '2021-02-11 BATUSDT.xlsx', '2021-02-11 NEOUSDT.xlsx', '2021-02-11 QTUMUSDT.xlsx', '2021-02-11 WAVESUSDT.xlsx', '2021-02-11 MKRUSDT.xlsx', '2021-02-11 SNXUSDT.xlsx', '2021-02-11 DOTUSDT.xlsx', '2021-02-11 THETAUSDT.xlsx', '2021-02-11 ALGOUSDT.xlsx', '2021-02-11 KNCUSDT.xlsx', '2021-02-11 ZRXUSDT.xlsx', '2021-02-11 COMPUSDT.xlsx', '2021-02-11 OMGUSDT.xlsx']\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"0en4ihETQ32K"},"source":["### **Data Stacking**"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1Ks84tI6gEcDbGgWvCH9CieXL1GrqpSMH"},"id":"SvZuk1rPrUMe","executionInfo":{"status":"ok","timestamp":1618488550006,"user_tz":-540,"elapsed":303960,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"7a41bfc0-243f-4626-8451-82b74699e06e"},"source":["from sklearn.preprocessing import MinMaxScaler, MaxAbsScaler\n","import pickle\n","\n","with open('./arima_result/arima_ma7_profit_ls_only_long_result_%s.pickle' % interval, 'rb') as f:\n","  load_dict = pickle.load(f)\n","\n","candis = list(load_dict.keys())\n","long_index = 0\n","leverage = 5\n","prev_x = None\n","for i in range(len(candis)):\n","\n","  keys = [candis[i]]\n","  \n","  # if 'algo'.upper() not in candis[i]:\n","  #   continue\n","  if '2021-03-02 DOTUSDT.xlsx' in candis[i]:\n","    # print('')\n","    continue\n","\n","  # plt.figure(figsize=(35, 10))\n","  # plt.suptitle('%s %s' % (interval, keys))\n","\n","\n","  #         get tp parameter        #\n","\n","  # plt.subplot(1,10,3)\n","  # for key in keys:  \n","  #   # plt.plot(profit_result_dict[key]['tp_list'], profit_result_dict[key]['ap_list'])\n","  #   argmax = np.argmax(profit_result_dict[key]['ap_list'][:, [long_index]])\n","  #   peak_tp = profit_result_dict[key]['tp_list'][argmax]\n","  #   # plt.axvline(peak_tp, linestyle='--')\n","  #   # plt.title('acc profit, max at %.4f' % (peak_tp))  \n","\n","  # plt.subplot(1,10,4)\n","  # plt.title('max acc profit by leverage')  \n","  # for key in keys:  \n","  #   # plt.plot(profit_result_dict[key]['tp_list'], profit_result_dict[key]['max_ap_list'], label=key)\n","  #   argmax = np.argmax(profit_result_dict[key]['max_ap_list'][:, [long_index]])\n","  #   max_peak_tp = profit_result_dict[key]['tp_list'][argmax]\n","  #   # plt.axvline(max_peak_tp, linestyle='--')\n","  #   # plt.title('max acc profit, max at %.4f' % (max_peak_tp))  \n","\n","\n","  for key in keys:  \n","    # print(profit_result_dict[key]['leverage_ap_list'])\n","\n","    # for tp in [max_peak_tp]:\n","\n","      # if tp == peak_tp:\n","      #   plt.subplot(1,10,5)\n","      # else:\n","      #   plt.subplot(1,10,6)\n","\n","      #     leverage analysis     #\n","      ohlcv = load_dict[key]['ohlcv']\n","      predictions = load_dict[key]['predictions']\n","      err_ranges = load_dict[key]['err_ranges']\n","\n","      # predictions = ohlcv['close'].shift(1).values\n","      # err_ranges = np.zeros_like(predictions)\n","\n","      # leverage_list = profit_result_dict[key]['leverage_list']\n","      # temp_ap_list = list()\n","      # temp_pr_list = list()\n","\n","      try:\n","        print('-------------- %s --------------' % key)\n","        result = get_back_result(ohlcv, predictions, err_ranges, tp=0, leverage=leverage, show_plot=True, reverse_short=False, show_detail=False)\n","        # temp_ap_list.append(result[2])\n","        # temp_pr_list.append(result[3])\n","\n","        # if round(leverage) == 1:\n","        #   temp_pr_list = result[3]\n","        pr_list = result[3][long_index]\n","\n","      except Exception as e:\n","        print(e)\n","        break    \n","  # break\n","\n","\n","      pd.set_option('display.max_rows', 500)\n","      pd.set_option('display.max_columns', 500)\n","      pd.set_option('display.width', 1000)\n","\n","      #         clustering zone           #\n","\n","      #       set data features : ohlc, v, ep\n","      ohlc = ohlcv.iloc[-len(predictions):, :4]\n","      vol = ohlcv.iloc[-len(predictions):, [4]]\n","      long_ep = np.array(predictions)\n","      long_ep = long_ep.reshape(-1, 1)\n","\n","      ohlcv['u_wick'] = ohlcv['high'] / np.maximum(ohlcv['close'] , ohlcv['open'])\n","      ohlcv['d_wick'] = np.minimum(ohlcv['close'] , ohlcv['open']) / ohlcv['low']\n","      ohlcv['body'] = ohlcv['close'] / ohlcv['open']\n","\n","      candle = ohlcv.iloc[-len(predictions):, -3:]\n","\n","\n","      print('len(ohlc) :', len(ohlc))\n","      print('long_ep.shape :', long_ep.shape)\n","      print('len(pr_list) :', len(pr_list))\n","\n","\n","      #       set params    #\n","      period = 45\n","      data_x, data_pr, data_updown = [], [], []\n","      key_i = i\n","\n","      for i in range(period, len(predictions)):\n","\n","        #   pr_list != 1 인 데이터만 사용한다\n","        # if 1:\n","        if pr_list[i] != 1:\n","          \n","          #   prediction 을 제외한 이전 데이터를 사용해야한다\n","          temp_ohlc = ohlc.iloc[i - period : i].values\n","          temp_long_ep = long_ep[i - period : i]\n","          temp_vol = vol.iloc[i - period : i].values\n","          temp_candle = candle.iloc[i - period : i].values\n","\n","          # print(temp_ohlc.shape)\n","          # print(temp_long_ep.shape)\n","          # print(temp_vol.shape)\n","          # print(temp_candle.shape)\n","          # break\n","\n","          #   stacking  \n","          # temp_data = np.hstack((temp_ohlc, temp_long_ep, temp_vol, temp_candle))\n","          temp_data = np.hstack((temp_ohlc, temp_long_ep, temp_vol))\n","          # temp_data = np.hstack((temp_ohlc, temp_vol))\n","\n","          # temp_data = np.hstack((temp_ohlc, temp_long_ep))\n","          # temp_data = temp_vol\n","\n","          #   scaler 설정\n","\n","          #   ohlc & ep -> max_abs\n","          # max_abs = MaxAbsScaler()\n","          # temp_data[:, :5] = max_abs.fit_transform(temp_data[:, :5])\n","\n","\n","          min_max = MinMaxScaler()\n","          temp_data[:, :5] = min_max.fit_transform(temp_data[:, :5])\n","\n","\n","          #   vol -> min_max\n","          min_max = MinMaxScaler()\n","          temp_data[:, [5]] = min_max.fit_transform(temp_data[:, [5]])\n","\n","\n","          #   candle -> max_abs    \n","          # max_abs = MaxAbsScaler()\n","          # temp_data[:, -3:] = max_abs.fit_transform(temp_data[:, -3:])\n","\n","          # min_max = MinMaxScaler()\n","          # temp_data[:, -3:] = min_max.fit_transform(temp_data[:, -3:])\n","\n","          if np.isnan(np.sum(temp_data)):\n","            continue\n","\n","          data_x.append(temp_data)\n","          data_pr.append(pr_list[i])\n","          data_updown.append(ohlc['close'].iloc[i] / ohlc['open'].iloc[i])\n","\n","\n","      print('np.array(data_x).shape :', np.array(data_x).shape)\n","      # print(data_x[0])\n","\n","\n","      #       Reshape data for image deep - learning     #\n","      _, row, col = np.array(data_x).shape\n","\n","      input_x = np.array(data_x).reshape(-1, row, col, 1).astype(np.float32)\n","\n","      #     1c to 3c    #\n","      input_x = input_x * np.ones(3, dtype=np.float32)[None, None, None, :]\n","\n","      input_pr = np.array(data_pr).reshape(-1, 1).astype(np.float32)\n","      input_ud = np.array(data_updown).reshape(-1, 1).astype(np.float32)\n","      print('input_x.shape :', input_x.shape)\n","      print('input_x.dtype :', input_x.dtype)\n","      print('input_pr.shape :', input_pr.shape)\n","      print('input_ud.shape :', input_ud.shape)\n","\n","      #     do stacking   #\n","      if prev_x is None:\n","        prev_x = input_x\n","        prev_pr = input_pr\n","        prev_ud = input_ud\n","      else:\n","        total_x = np.vstack((prev_x, input_x))\n","        total_pr = np.vstack((prev_pr, input_pr))\n","        total_ud = np.vstack((prev_ud, input_ud))\n","\n","        prev_x = total_x\n","        prev_pr = total_pr\n","        prev_ud = total_ud\n","\n","        print('total_x.shape :', total_x.shape)\n","        print('total_pr.shape :', total_pr.shape)\n","        print('total_ud.shape :', total_ud.shape)\n","        "],"execution_count":4,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"GmmgsEUMqUjN"},"source":["### **Model**"]},{"cell_type":"code","metadata":{"id":"mcDUjgQzqUSr","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1618488553184,"user_tz":-540,"elapsed":305810,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"4d15416c-9cc9-42d4-a128-2e8f0a8f9a8a"},"source":["import os\n","# os.environ[\"CUDA_DEVICE_ORDER\"]=\"PCI_BUS_ID\"   \n","# os.environ[\"CUDA_VISIBLE_DEVICES\"]=\"0\"\n","\n","%tensorflow_version 1.x\n","\n","import keras\n","import tensorflow as tf\n","\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import scipy.misc \n","from math import sqrt \n","import itertools\n","from IPython.display import display\n","\n","%matplotlib inline\n","\n","from keras.utils import plot_model\n","import keras.backend as K\n","from keras.models import Model, Sequential\n","import keras.layers as layers\n","from keras.optimizers import Adam, SGD\n","from keras.regularizers import l1, l2\n","\n","from sklearn.cluster import KMeans\n","from sklearn.metrics import silhouette_score\n","from sklearn.metrics import precision_score, recall_score, precision_recall_curve\n","from sklearn.metrics import confusion_matrix\n","from sklearn.metrics import plot_confusion_matrix\n","\n","\n","gdrive_path = current_path\n","\n","num_classes = 2\n","\n","def FER_Model(input_shape=(row, col, 3)):\n","    # first input model\n","    visible = layers.Input(shape=input_shape, name='input')\n","    \n","    net = layers.Conv2D(32, kernel_size=3, padding='same', kernel_initializer='he_normal')(visible)\n","    # net = layers.Conv2D(256, kernel_size=3, padding='same', kernel_initializer='he_normal')(visible)\n","    # net = layers.BatchNormalization()(net)\n","    net = layers.LeakyReLU()(net)\n","\n","    net = layers.Conv2D(64, kernel_size=3, padding='same', kernel_initializer='he_normal')(net)\n","    # net = layers.Conv2D(128, kernel_size=3, padding='same', kernel_initializer='he_normal')(net)\n","    # net = layers.BatchNormalization()(net)\n","    # net = layers.Activation('relu')(net)\n","    net = layers.LeakyReLU()(net)\n","    # net = layers.MaxPool2D(pool_size=2)(net)\n","    # net = layers.AveragePooling2D(padding='same')(net)\n","\n","    shortcut_1 = net\n","\n","    # net = layers.Conv2D(64, kernel_size=3, padding='same', kernel_initializer='he_normal')(net)\n","    net = layers.Conv2D(128, kernel_size=3, padding='same', kernel_initializer='he_normal')(net)\n","    net = layers.LeakyReLU()(net)\n","\n","    net = layers.Conv2D(256, kernel_size=3, padding='same', kernel_initializer='he_normal')(net)\n","    # net = layers.BatchNormalization()(net)\n","    # net = layers.Activation('relu')(net)\n","    net = layers.LeakyReLU()(net)\n","    # net = layers.MaxPool2D(pool_size=2)(net)\n","\n","    shortcut_2 = net\n","\n","#     net = layers.Conv2D(256, kernel_size=3, padding='same')(net)\n","#     # net = layers.Activation('relu')(net)\n","#     net = layers.LeakyReLU()(net)\n","#     net = layers.MaxPool2D(pool_size=2)(net)\n","\n","#     shortcut_3 = net\n","\n","#     net = layers.Conv2D(128, kernel_size=1, padding='same')(net)\n","#     # net = layers.Activation('relu')(net)\n","#     net = layers.LeakyReLU()(net)\n","#     net = layers.MaxPool2D(pool_size=2)(net)\n","\n","    net = layers.Flatten()(net)\n","    net = layers.Dense(128)(net)\n","    net = layers.LeakyReLU()(net)\n","\n","    net = layers.Dense(64)(net)\n","    net = layers.LeakyReLU()(net)\n","\n","    net = layers.Dense(num_classes, activation='softmax')(net)\n","\n","    # create model \n","    model = Model(inputs=visible, outputs=net)\n","    # summary layers\n","    # print(model.summary())\n","    \n","    return model"],"execution_count":5,"outputs":[{"output_type":"stream","text":["TensorFlow 1.x selected.\n"],"name":"stdout"},{"output_type":"stream","text":["Using TensorFlow backend.\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"zscZynIgMbAq","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1618488553185,"user_tz":-540,"elapsed":305268,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"f2e642b3-13fd-46c8-a3da-bf978210c359"},"source":["print(keras.__version__)\n","print(tf.__version__)"],"execution_count":6,"outputs":[{"output_type":"stream","text":["2.3.1\n","1.15.2\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"fWUEyjzF21cJ"},"source":["### **Data Split**"]},{"cell_type":"code","metadata":{"scrolled":false,"id":"2iYLNSeSEp7p","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1618488561384,"user_tz":-540,"elapsed":311881,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"570167e7-5f83-426c-ce5f-ee51b50c69d6"},"source":["from sklearn.model_selection import train_test_split\n","from keras.utils import np_utils\n","from keras.preprocessing.image import ImageDataGenerator \n","from sklearn.utils import class_weight\n","# import cv2\n","\n","\n","\n","seed = 1\n","random_state = 20\n","np.random.seed(seed)\n","# tf.random.set_seed(seed)\n","\n","#         resize total_x shape  (, 5, 6, 3)      #\n","# .repeat(2, axis=0).repeat(2, axis=1)\n","temp_x = list()\n","for d_i, data in enumerate(total_x):\n","  # resized_data = cv2.resize(data, (row * 2, col * 2)) --> input image 홰손된다\n","  resized_data = data.repeat(2, axis=0).repeat(2, axis=1)\n","  # resized_data = data.repeat(1, axis=0).repeat(1, axis=1)\n","  # cmapped = plt.cm.Set1(resized_data)[:, :, :3]  # Drop Alpha Channel\n","  \n","  if d_i == 0:\n","    plt.imshow(data)\n","    plt.show()\n","    plt.imshow(resized_data)\n","    plt.show()\n","  # print('resized_data.shape :', resized_data.shape)\n","  # break\n","  temp_x.append(resized_data)\n","\n","re_total_x = np.array(temp_x)\n","print('re_total_x.shape :', re_total_x.shape)\n","# break\n","\n","#         train / test split      #\n","x_train, x_test_, pr_train, pr_test_, ud_train, ud_test_ = train_test_split(re_total_x, total_pr, total_ud, test_size=0.4, shuffle=True, random_state=random_state)\n","x_test, x_val, pr_test, pr_val, ud_test, ud_val = train_test_split(x_test_, pr_test_, ud_test_, test_size=0.5, shuffle=True, random_state=random_state)\n","\n","\n","#         pr label   #\n","y_train = np.where(pr_train > 1, 1, 0)\n","y_test = np.where(pr_test > 1, 1, 0)\n","y_val = np.where(pr_val > 1, 1, 0)\n","\n","#         up label      #\n","# y_train = np.where(ud_train > 1, 1, 0)\n","# y_test = np.where(ud_test > 1, 1, 0)\n","# y_val = np.where(ud_val > 1, 1, 0)\n","\n","print('pr_train[:5] :', pr_train[:5])\n","print('ud_train[:5] :', ud_train[:5])\n","print('y_train[:5] :', y_train[:5])\n","print('y_train.dtype :', y_train.dtype)\n","\n","print('x_train.shape :', x_train.shape)\n","print('x_test.shape :', x_test.shape)\n","print('x_val.shape :', x_val.shape)\n","print('y_train.shape :', y_train.shape)\n","print('y_test.shape :', y_test.shape)\n","print('y_val.shape :', y_val.shape)\n","\n","def class_ratio(in_list):\n","\n","  return in_list / in_list[1]\n","\n","print('np.unique(y_train, return_counts=True :', np.unique(y_train, return_counts=True), class_ratio(np.unique(y_train, return_counts=True)[1]))\n","print('np.unique(y_val, return_counts=True :', np.unique(y_val, return_counts=True), class_ratio(np.unique(y_val, return_counts=True)[1]))\n","print('np.unique(y_test, return_counts=True :', np.unique(y_test, return_counts=True), class_ratio(np.unique(y_test, return_counts=True)[1]))\n","\n","label = y_train.reshape(-1, )\n","class_weights = class_weight.compute_class_weight('balanced', \n","                                                    classes=np.unique(label),\n","                                                    y=label)\n","class_weights = dict(enumerate(class_weights))\n","print('class_weights :', class_weights)\n","\n","# sample_weight = np.ones(shape=(len(y_train),))\n","# sample_weight[(y_train == 1).reshape(-1,)] = 1.5\n","# print('sample_weight[:20] :', sample_weight[:20])\n","\n","\n","print('np.isnan(np.sum(x_train)) :', np.isnan(np.sum(x_train)))\n","print('np.isnan(np.sum(x_val)) :', np.isnan(np.sum(x_val)))\n","print('np.isnan(np.sum(x_test)) :', np.isnan(np.sum(x_test)))\n","\n","print('np.isnan(np.sum(y_train)) :', np.isnan(np.sum(y_train)))\n","print('np.isnan(np.sum(y_val)) :', np.isnan(np.sum(y_val)))\n","print('np.isnan(np.sum(y_test)) :', np.isnan(np.sum(y_test)))\n","\n","y_train_ohe = np_utils.to_categorical(y_train, num_classes)\n","y_val_ohe = np_utils.to_categorical(y_val, num_classes)\n","y_test_ohe = np_utils.to_categorical(y_test, num_classes)\n","print('y_train_ohe.shape :', y_train_ohe.shape)\n","print('y_val_ohe.shape :', y_val_ohe.shape)\n","print('y_test_ohe.shape :', y_test_ohe.shape)\n","\n","datagen = ImageDataGenerator( \n","    rotation_range = 45,\n","    # zoom_range = 0.5,\n","    # shear_range = 0.5,\n","    # horizontal_flip = True,\n","    # vertical_flip = True,\n","    # width_shift_range=0.5,\n","    # height_shift_range=0.5,\n","    # fill_mode = 'nearest'\n","    )\n","\n","valgen = ImageDataGenerator( \n","    )\n","\n","datagen.fit(x_train)\n","valgen.fit(x_val)\n","\n","batch_size = 256\n","\n","for x_batch, _ in datagen.flow(x_train, y_train_ohe, batch_size=9):\n","\n","    plt.suptitle(\"train x_batch\")\n","\n","    for i in range(0, 9): \n","        plt.subplot(330 + 1 + i) \n","        # resized = cv2.resize(x_batch[i].reshape(row, col), (row * 2, col * 10))\n","        # cmapped = plt.cm.Set1(resized)\n","        # plt.imshow(cmapped)\n","        # plt.imshow(x_batch[i].reshape(row, col))\n","        plt.imshow(x_batch[i])\n","        plt.axis('off') \n","    plt.show() \n","    break\n","\n","for x_batch, _ in valgen.flow(x_val, y_val_ohe, batch_size=9):\n","\n","    plt.suptitle(\"val x_batch\")\n","\n","    for i in range(0, 9): \n","        plt.subplot(330 + 1 + i) \n","        # resized = cv2.resize(x_batch[i].reshape(row, col), (row * 2, col * 10))\n","        # cmapped = plt.cm.Set1(resized)\n","        # plt.imshow(cmapped)\n","        # plt.imshow(x_batch[i].reshape(row, col))\n","        plt.imshow(x_batch[i])\n","        plt.axis('off') \n","    plt.show() \n","    break\n","    \n","train_flow = datagen.flow(x_train, y_train_ohe, batch_size=batch_size) \n","val_flow = valgen.flow(x_val, y_val_ohe, batch_size=batch_size) \n","# break\n","\n"],"execution_count":7,"outputs":[{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAD8AAAD6CAYAAAAWep/YAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAANRElEQVR4nO2da2wU1xXHf8cPbGIgYMzDwYhHISQNSl2FIkXNh5Q2KapCaaUqgqIqlSLRfkAKatWG9EvTqpGC1DathNQmVWlSqYkTpUUNURqC8hCKUoVAQiDBGFwXgh2DIUB4xA9sTj/MLN2Ze3d3Ztce73LnL1neOb47c4/vztk7//s/54qq4iqqxrsD44nUeVeROu8qUueLhYisFJEOEekUkU2j1amkIMV+z4tINXAYuAvoBt4B1qrqwVzvqa2t1fr6+rDNdu6C1x8aGjJsly5dMmyqelpVZ9jOUVPwKrmxHOhU1S4AEWkDVgM5na+vr6e1tTVga2lpMdqF/yG2ATp+/Lhh2717t2Hr7+8/lqs/pXzs5wDZPej2bRWDUkY+EkRkPbAeoK6ubqwvFwuljHwPMDfruMW3BaCqT6jqMlVdZru/xxOljPw7wGIRWYDn9Brgu/neUFtba9zj1113ndFu5syZgeNPP/3UaDN37lzD9tZbbxXsdDaKdl5Vh0VkA7ADqAa2quqHxZ5vPFDSPa+qLwEvjVJfEkc6w3MVY/5Vl43q6moaGhoCttmzZxvtwjO8hQsXGm26uroMm+2r9PLlyzn74/TIp867CqedTzTg1dXVsXjx4oBteHjYaBeeBZ48edJoYwuCN9xwg2E7fPhwzv44PfKp864i0XteVY17vKfHeAo2KKru7m6jzZIlSwxbvgmNDU6PfOq8qyjpnheRo8AFYAQYVtVlo9GppDAaAe8rqno6SsOBgQE6OjoCtgsXLhjtwkHw4sWLRhsbtz84OBilG1fh9Me+VOcVeEVE9voUdUWh1I/9HaraIyIzgZ0ickhVd2U3yObtw0TGeKOkkVfVHv93H7ANbwkr3OYqb19uixZFj7yINABVqnrBf3038Mt87xkaGuLYseDS2enTZqw8eDC43DdhwoRIfbLNFvMtepbysZ8FbPNPXgM8raovl3C+xFHKokUX8IVR7EviSL/qXEXRyoyiLiai4QDU2NhotJsxIyiksCkubNTW1KlTDVtfX9/eXNNup0c+dd5VOO18ohxebW2tobqwBbywWsO2mGlDVVW8sXR65FPnXYXTzie+ULlgwYKAzSZFmzVrVuC4s7PTaLNo0SLD1t7eHqs/To986ryrKHjPi8hW4B6gT1WX+rZG4FlgPnAUuFdVzxY615UrV+jv7w/Yzpw5Y7QLCwo++eQTo83SpUsN20033WTYTpw4kbM/UUb+SWBlyLYJeFVVFwOv+scVh4LO+1R0eHhWA0/5r58CvjXK/UoExX7VzVLVXv/1CTwy04ps3j4qC5sUSg546lFBOemgbN6+pibRaUVBFNubkyLSrKq9ItIM9EV5U39/v8HJ257EwtSaLUnhwIEDhi2s9CqEYkf+BeA+//V9wD+LPM+4oqDzIvIM8G9giYh0i8j9wKPAXSJyBPiaf1xxKPixV9W1Of701VHuS+JIZ3jjiWnTphm2sFzN9uRnm/WFZ4+F4PTIp867CqedTzzB6Prrrw/YPvvsM6PdnDnBfGSb4mL69OmGra8v0kTzKpwe+dR5V+G084knG4RnYbb08HBQPHu2ID0IxCdLnB751HlXEYXM2CoifSLyQZbtYRHpEZF9/s83xrabY4MoAe9JYAvw15D9MVX9dZyLjYyMGIkD4eAGXj2dbNg4PFsQbGpqitOdonn7awKl3PMbRGS/f1uYjIQPEVkvIntEZE8J1xoTFOv8H4DPAa1AL/CbXA2zefsirzVmKMp5VT2pqiOqegX4E5Ykg0pAUTO8zIKFf/ht4IN87bNx5cqVwLEtIyq8kGFLGIgaBPMhyhL1M8CdQJOIdAM/B+4UkVa8ZaqjwA9iXbVMUCxv/+cx6EvicHqGN+68vS0VfGRkJHC8fLkZT22F/2zUlk2Xn4HTI5867yqcdj7RgNfQ0MCtt94asNm09JMmTQoc2yqd2oKgbZKTBrwcSJ13FU47n/gML/zEFiXt21b18JZbbjFscZ/qnB751HlXEYW3nysir4vIQRH5UEQe8O2NIrJTRI74v3OSmOWKginkvra2WVXfFZHJwF48ifn3gTOq+qi/q8E0VX0w37mqq6uN4v5RsiDDj7hgzgIBbr75ZsO2a9eu4lPIVbVXVd/1X18A2vHq2Fe85j7WV52IzAe+CLxNRM19tt4+ynYNSSJywBORScDfgY2qej77b/k099m8fUU6LyK1eI7/TVX/4ZtP+vEgExfiSaHKAFGoa8Fja9tV9bdZf8po7h8loubeVgbSVroxvHhpq4pmg61cZD5Euee/DHwPOCAi+3zbz/Ccfs7X3x8D7o115TJAFN7+TSDXzVrRmvt0hucqEpeihWva2mZq4RRy26LkqVOnDFu+1FEbnB751HlXMe56exvCMlLbPR8uHgb2MrL54PTIp867CqedTzTgiYhBW9kmOeEsS5tiy/akNzAwEKs/To986ryrKIW3r3jNfZSANwz8OJu3F5Gd/t9iae6rqqqYMmVKwGZL+w5z+zbYAmVcRGFyevGU1fhFvTO8fcUj1j0f4u0houa+XFEKbx9Jc5+dbBBWXI83iubto2rusxct4lYnHWsUzdsXo7kXEWPJKsquJLbZnC3g2TIqbbuVZ1AKb7+20jX3pfD2FbsZbwbldRMmDKedT7S4f21trYYfV1esWGG0C3Pyra2tRpu2tjbDFq6jDbBv3760uL8NqfOuwmnnE+XwGhsbWbs2mKZnW8QIJyCcO3fOaLNmzRrDtn///lj9cXrkU+ddRaL3/PDwsDGBsT3jh2ks285EtjgQ3g6uEJwe+dR5VxGFt68Xkd0i8r7P2//Cty8QkbdFpFNEnhWR8qriHQFRAt4gsEJVL/pc3psi8i/gR3i8fZuI/BG4H4/UzH2xmhqjlo2tuH84CNp2ObIFwbhPqFH09qqqGRKt1v9RYAXwvG+vSL19VPa22ufv+oCdwH+Ac6qaURF3U4ELGZGc9ynqVqAFj6I2N4/IgWzePm5F4rFGrGivqueA14HbgakikokZLYCZHUiQt584cWJJnR1tROHtZwCXVfWciEwE7gI24/0TvgO0EUNvH+bRbTKzcG1r207GNrXGxx9/XKgLAUSJ9s3AUyJSjfdJeU5VXxSRg0CbiPwKeI8KLB8Thbffj7c4GbZ3UaFloTJIZ3iuIvEU8vB2LrYi/eGUcduipG2rpnCNbIAjR47k7IvTI5867yqcdj7RgDc4OGgEs4aGBqNdmMu3yVkOHTpk2KJI2ALnjdX6GkPqvKtw2vlEA15VVZUhF7M944dtzc3NRpuOjg7D1tvba9jy9idW62sMqfP5kIe3f1JE/pultzdVQ2WOUnh7gJ+o6vN53lvWiMLkKGDj7WOjrq6OG2+8MWDbvHmz0W7Lli2B4w0bNhhtNm0y9wF+/PHHDVs4HT0bRfH2qprR2z/i6+0fExGTZSxzFMXbi8hS4CE8/v5LQCNgLQ11LfL2K/2yUaqqg8BfiKC3LzfePkphsDBv/woeb7/X35RXgMeAAVXNuyH3smXLdM+e4O4OtuqFtn0rw7D1e/Xq1YZt+/btOeWnpfD2r/n/GAH2AT+McK6yQim8vakYrjCkMzxXkXidnHAhsPPnzxvtwvVubJvyzps3z7DZFj3zwemRT513FU47n2jAGxoaMvSxtmzJcEXDqNPiuMoMp0c+dd5VOO184gHvo48+Cthsm/Ju37694LnWrVtn2DZu3GjYbIlIGTg98qnzUeCTmO+JyIv+ccXr7eOM/AN45d0z2Iynt18EnMXT21cUIqWQi0gLnqb+Ebwkg1XAKWC2qg6LyO3Aw6r69XznaWpq0lWrVgVstpoWkydPDhzbHlUvXbpk2GwzvB07dpScQv474KdAJgViOi7o7UXkHqBPVfcWc4Fs3j5uvbqxRtRqKd/0C3/VA1OA3+Pr7f3Rz6u3B54A72M/Kr0eJUTJsXlIVVtUdT6wBnhNVdfxf709RNTblxtKmeE9SEy9fVVVlSE9Cxf7B7NmRlivC/b6GO3t7YYtH2I5r6pvAG/4r1O9fSXDaecTfaq7fPmywcnbykaEaSubrNS296QtESkfnB751HlX4bTziQa8mpoaY6dwW82McHVEWy0M20JlXM2P0yOfOu8qnHY+8RleWBNv24mouro6cGxTZtiC4G233WbY8m3j5vTIp867CqedT7T0q4icwtvSsQk4PcaXy1xjnqqaez2RsPNXLyqyJ9dCQpLXcPpjnzo/DniiHK4xLvd8uSD92CcJEVkpIh2+qCFvWkqR5z8qIgf8RMc9eRuramI/QDVeObmFwATgfeDzo3yNo0BTlLZJj/xyoFNVu1R1CK+omJkVlBCSdn4OcDzreCxEDQq8IiJ7RWR9voaJV0hKAHeoao+IzAR2isghVd1la5j0yPcAc7OOc4oaioWq9vi/+4Bt5FlJTtr5d4DFvoxtAp7Y4YXROrmINPg7qyEiDcDd5NlcKOkEo2ER2QDswIv8W1X1w1G8xCxgm8/71wBPq+rLuRqnMzxXkTrvKlLnXUXqvKtw2vn/ASnBph89e2zFAAAAAElFTkSuQmCC\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"stream","text":["re_total_x.shape : (316770, 90, 12, 3)\n","pr_train[:5] : [[0.98122984]\n"," [0.9547001 ]\n"," [1.0308641 ]\n"," [1.0407867 ]\n"," [0.95465577]]\n","ud_train[:5] : [[0.9964743 ]\n"," [0.99160945]\n"," [1.0065402 ]\n"," [1.0090867 ]\n"," [0.9918472 ]]\n","y_train[:5] : [[0]\n"," [0]\n"," [1]\n"," [1]\n"," [0]]\n","y_train.dtype : int64\n","x_train.shape : (190062, 90, 12, 3)\n","x_test.shape : (63354, 90, 12, 3)\n","x_val.shape : (63354, 90, 12, 3)\n","y_train.shape : (190062, 1)\n","y_test.shape : (63354, 1)\n","y_val.shape : (63354, 1)\n","np.unique(y_train, return_counts=True : (array([0, 1]), array([101886,  88176])) [1.15548449 1.        ]\n","np.unique(y_val, return_counts=True : (array([0, 1]), array([34177, 29177])) [1.17136786 1.        ]\n","np.unique(y_test, return_counts=True : (array([0, 1]), array([34033, 29321])) [1.16070393 1.        ]\n","class_weights : {0: 0.9327189211471645, 1: 1.077742242787153}\n","np.isnan(np.sum(x_train)) : False\n","np.isnan(np.sum(x_val)) : False\n","np.isnan(np.sum(x_test)) : False\n","np.isnan(np.sum(y_train)) : False\n","np.isnan(np.sum(y_val)) : False\n","np.isnan(np.sum(y_test)) : False\n","y_train_ohe.shape : (190062, 2)\n","y_val_ohe.shape : (63354, 2)\n","y_test_ohe.shape : (63354, 2)\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 9 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 9 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"s-W6LL5c2VN2"},"source":["### **Training**"]},{"cell_type":"code","metadata":{"id":"EkVg1hVI2TNP","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"error","timestamp":1618538396523,"user_tz":-540,"elapsed":49833631,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"8dfe2b84-74de-4430-a9d1-07c48d081e67"},"source":["(_, row, col, _) = x_train.shape\n","\n","# model = FER_Model(input_shape=(row, col, 3))\n","# opt = Adam(lr=0.00001, decay=0.000005)\n","# model.compile(loss='categorical_crossentropy', optimizer=opt, metrics=['accuracy'])\n","\n","# model_name = \"classifier_45_min_pr_re2.h5\"  # <-- specifying model name\n","ckpt_path = current_path + 'ckpt/'\n","model_name = 'classifier_%s_ma7_pr3.h5' % period\n","\n","model = keras.models.load_model(ckpt_path + model_name)\n","  \n","from keras.callbacks import ModelCheckpoint, EarlyStopping, TensorBoard\n","\n","ckpt_path = current_path + 'ckpt/'\n","board_path = current_path + 'graph/'\n","model_name = 'classifier_%s_ma7_pr3.h5' % period\n","\n","checkpoint = ModelCheckpoint(ckpt_path + model_name, monitor='val_loss', verbose=1, save_best_only=True, mode='auto')\n","checkpoint2 = TensorBoard(log_dir=board_path,\n","                          histogram_freq=0,\n","                          write_graph=True,\n","                          write_images=True)\n","checkpoint3 = EarlyStopping(monitor='val_loss', patience=40)\n","# callbacks_list = [checkpoint, checkpoint2, checkpoint3]\n","callbacks_list = [checkpoint, checkpoint2]\n","\n","# keras.callbacks.Callback 로 부터 log 를 받아와 history log 를 작성할 수 있다.\n","\n","# we iterate 200 times over the entire training set\n","num_epochs = 1000\n","history = model.fit_generator(train_flow, \n","                    steps_per_epoch=len(x_train) / batch_size, \n","                    epochs=num_epochs,  \n","                    verbose=2,  \n","                    callbacks=callbacks_list,\n","                    class_weight=class_weights,\n","                    validation_data=val_flow,  \n","                    validation_steps=len(x_val) / batch_size,\n","                    shuffle=False)"],"execution_count":8,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:From /tensorflow-1.15.2/python3.7/tensorflow_core/python/ops/resource_variable_ops.py:1630: calling BaseResourceVariable.__init__ (from tensorflow.python.ops.resource_variable_ops) with constraint is deprecated and will be removed in a future version.\n","Instructions for updating:\n","If using Keras pass *_constraint arguments to layers.\n","WARNING:tensorflow:From /tensorflow-1.15.2/python3.7/keras/backend/tensorflow_backend.py:422: The name tf.global_variables is deprecated. Please use tf.compat.v1.global_variables instead.\n","\n","WARNING:tensorflow:From /tensorflow-1.15.2/python3.7/keras/callbacks/tensorboard_v1.py:200: The name tf.summary.merge_all is deprecated. Please use tf.compat.v1.summary.merge_all instead.\n","\n","WARNING:tensorflow:From /tensorflow-1.15.2/python3.7/keras/callbacks/tensorboard_v1.py:203: The name tf.summary.FileWriter is deprecated. Please use tf.compat.v1.summary.FileWriter instead.\n","\n","Epoch 1/1000\n"," - 80s - loss: 0.4776 - accuracy: 0.7632 - val_loss: 0.5329 - val_accuracy: 0.7416\n","\n","Epoch 00001: val_loss improved from inf to 0.53289, saving model to /content/drive/My Drive/Colab Notebooks/Project_Stock/ckpt/classifier_45_ma7_pr3.h5\n","WARNING:tensorflow:From /tensorflow-1.15.2/python3.7/keras/callbacks/tensorboard_v1.py:343: The name tf.Summary is deprecated. Please use tf.compat.v1.Summary instead.\n","\n","Epoch 2/1000\n"," - 77s - loss: 0.4775 - accuracy: 0.7648 - val_loss: 0.6420 - val_accuracy: 0.7452\n","\n","Epoch 00002: val_loss did not improve from 0.53289\n","Epoch 3/1000\n"," - 76s - loss: 0.4773 - accuracy: 0.7635 - val_loss: 0.6326 - val_accuracy: 0.7438\n","\n","Epoch 00003: val_loss did not improve from 0.53289\n","Epoch 4/1000\n"," - 76s - loss: 0.4757 - accuracy: 0.7656 - val_loss: 0.6213 - val_accuracy: 0.7387\n","\n","Epoch 00004: val_loss did not improve from 0.53289\n","Epoch 5/1000\n"," - 76s - loss: 0.4772 - accuracy: 0.7649 - val_loss: 0.5607 - val_accuracy: 0.7408\n","\n","Epoch 00005: val_loss did not improve from 0.53289\n","Epoch 6/1000\n"," - 76s - loss: 0.4770 - accuracy: 0.7650 - val_loss: 0.6229 - val_accuracy: 0.7445\n","\n","Epoch 00006: val_loss did not improve from 0.53289\n","Epoch 7/1000\n"," - 76s - loss: 0.4752 - accuracy: 0.7657 - val_loss: 0.4934 - val_accuracy: 0.7417\n","\n","Epoch 00007: val_loss improved from 0.53289 to 0.49336, saving model to /content/drive/My Drive/Colab Notebooks/Project_Stock/ckpt/classifier_45_ma7_pr3.h5\n","Epoch 8/1000\n"," - 77s - loss: 0.4752 - accuracy: 0.7664 - val_loss: 0.4856 - val_accuracy: 0.7418\n","\n","Epoch 00008: val_loss improved from 0.49336 to 0.48557, saving model to /content/drive/My Drive/Colab Notebooks/Project_Stock/ckpt/classifier_45_ma7_pr3.h5\n","Epoch 9/1000\n"," - 77s - loss: 0.4753 - accuracy: 0.7655 - val_loss: 0.5434 - val_accuracy: 0.7406\n","\n","Epoch 00009: val_loss did not improve from 0.48557\n","Epoch 10/1000\n"," - 76s - loss: 0.4748 - accuracy: 0.7667 - val_loss: 0.5966 - val_accuracy: 0.7443\n","\n","Epoch 00010: val_loss did not improve from 0.48557\n","Epoch 11/1000\n"," - 76s - loss: 0.4742 - accuracy: 0.7672 - val_loss: 0.5373 - val_accuracy: 0.7419\n","\n","Epoch 00011: val_loss did not improve from 0.48557\n","Epoch 12/1000\n"," - 76s - loss: 0.4737 - accuracy: 0.7666 - val_loss: 0.5285 - val_accuracy: 0.7442\n","\n","Epoch 00012: val_loss did not improve from 0.48557\n","Epoch 13/1000\n"," - 76s - loss: 0.4724 - accuracy: 0.7674 - val_loss: 0.6362 - val_accuracy: 0.7389\n","\n","Epoch 00013: val_loss did not improve from 0.48557\n","Epoch 14/1000\n"," - 78s - loss: 0.4722 - accuracy: 0.7678 - val_loss: 0.5429 - val_accuracy: 0.7414\n","\n","Epoch 00014: val_loss did not improve from 0.48557\n","Epoch 15/1000\n"," - 77s - loss: 0.4717 - accuracy: 0.7679 - val_loss: 0.5163 - val_accuracy: 0.7422\n","\n","Epoch 00015: val_loss did not improve from 0.48557\n","Epoch 16/1000\n"," - 78s - loss: 0.4722 - accuracy: 0.7684 - val_loss: 0.4690 - val_accuracy: 0.7437\n","\n","Epoch 00016: val_loss improved from 0.48557 to 0.46900, saving model to /content/drive/My Drive/Colab Notebooks/Project_Stock/ckpt/classifier_45_ma7_pr3.h5\n","Epoch 17/1000\n"," - 79s - loss: 0.4726 - accuracy: 0.7673 - val_loss: 0.5257 - val_accuracy: 0.7445\n","\n","Epoch 00017: val_loss did not improve from 0.46900\n","Epoch 18/1000\n"," - 77s - loss: 0.4690 - accuracy: 0.7704 - val_loss: 0.5738 - val_accuracy: 0.7402\n","\n","Epoch 00018: val_loss did not improve from 0.46900\n","Epoch 19/1000\n"," - 77s - loss: 0.4721 - accuracy: 0.7678 - val_loss: 0.6862 - val_accuracy: 0.7435\n","\n","Epoch 00019: val_loss did not improve from 0.46900\n","Epoch 20/1000\n"," - 77s - loss: 0.4693 - accuracy: 0.7697 - val_loss: 0.5874 - val_accuracy: 0.7431\n","\n","Epoch 00020: val_loss did not improve from 0.46900\n","Epoch 21/1000\n"," - 77s - loss: 0.4699 - accuracy: 0.7693 - val_loss: 0.4862 - val_accuracy: 0.7421\n","\n","Epoch 00021: val_loss did not improve from 0.46900\n","Epoch 22/1000\n"," - 77s - loss: 0.4704 - accuracy: 0.7686 - val_loss: 0.5135 - val_accuracy: 0.7448\n","\n","Epoch 00022: val_loss did not improve from 0.46900\n","Epoch 23/1000\n"," - 76s - loss: 0.4699 - accuracy: 0.7695 - val_loss: 0.5141 - val_accuracy: 0.7416\n","\n","Epoch 00023: val_loss did not improve from 0.46900\n","Epoch 24/1000\n"," - 76s - loss: 0.4684 - accuracy: 0.7705 - val_loss: 0.6086 - val_accuracy: 0.7442\n","\n","Epoch 00024: val_loss did not improve from 0.46900\n","Epoch 25/1000\n"," - 76s - loss: 0.4675 - accuracy: 0.7708 - val_loss: 0.5784 - val_accuracy: 0.7381\n","\n","Epoch 00025: val_loss did not improve from 0.46900\n","Epoch 26/1000\n"," - 76s - loss: 0.4679 - accuracy: 0.7712 - val_loss: 0.4995 - val_accuracy: 0.7428\n","\n","Epoch 00026: val_loss did not improve from 0.46900\n","Epoch 27/1000\n"," - 76s - loss: 0.4688 - accuracy: 0.7707 - val_loss: 0.5691 - val_accuracy: 0.7434\n","\n","Epoch 00027: val_loss did not improve from 0.46900\n","Epoch 28/1000\n"," - 76s - loss: 0.4683 - accuracy: 0.7706 - val_loss: 0.5255 - val_accuracy: 0.7434\n","\n","Epoch 00028: val_loss did not improve from 0.46900\n","Epoch 29/1000\n"," - 76s - loss: 0.4673 - accuracy: 0.7719 - val_loss: 0.4976 - val_accuracy: 0.7431\n","\n","Epoch 00029: val_loss did not improve from 0.46900\n","Epoch 30/1000\n"," - 76s - loss: 0.4662 - accuracy: 0.7730 - val_loss: 0.4307 - val_accuracy: 0.7445\n","\n","Epoch 00030: val_loss improved from 0.46900 to 0.43069, saving model to /content/drive/My Drive/Colab Notebooks/Project_Stock/ckpt/classifier_45_ma7_pr3.h5\n","Epoch 31/1000\n"," - 77s - loss: 0.4670 - accuracy: 0.7715 - val_loss: 0.4962 - val_accuracy: 0.7423\n","\n","Epoch 00031: val_loss did not improve from 0.43069\n","Epoch 32/1000\n"," - 77s - loss: 0.4674 - accuracy: 0.7728 - val_loss: 0.4934 - val_accuracy: 0.7452\n","\n","Epoch 00032: val_loss did not improve from 0.43069\n","Epoch 33/1000\n"," - 76s - loss: 0.4675 - accuracy: 0.7722 - val_loss: 0.5650 - val_accuracy: 0.7442\n","\n","Epoch 00033: val_loss did not improve from 0.43069\n","Epoch 34/1000\n"," - 76s - loss: 0.4653 - accuracy: 0.7734 - val_loss: 0.5086 - val_accuracy: 0.7433\n","\n","Epoch 00034: val_loss did not improve from 0.43069\n","Epoch 35/1000\n"," - 78s - loss: 0.4652 - accuracy: 0.7728 - val_loss: 0.6060 - val_accuracy: 0.7448\n","\n","Epoch 00035: val_loss did not improve from 0.43069\n","Epoch 36/1000\n"," - 77s - loss: 0.4648 - accuracy: 0.7719 - val_loss: 0.6232 - val_accuracy: 0.7432\n","\n","Epoch 00036: val_loss did not improve from 0.43069\n","Epoch 37/1000\n"," - 76s - loss: 0.4652 - accuracy: 0.7723 - val_loss: 0.6445 - val_accuracy: 0.7444\n","\n","Epoch 00037: val_loss did not improve from 0.43069\n","Epoch 38/1000\n"," - 76s - loss: 0.4636 - accuracy: 0.7748 - val_loss: 0.5338 - val_accuracy: 0.7410\n","\n","Epoch 00038: val_loss did not improve from 0.43069\n","Epoch 39/1000\n"," - 76s - loss: 0.4634 - accuracy: 0.7739 - val_loss: 0.5413 - val_accuracy: 0.7423\n","\n","Epoch 00039: val_loss did not improve from 0.43069\n","Epoch 40/1000\n"," - 76s - loss: 0.4640 - accuracy: 0.7743 - val_loss: 0.6117 - val_accuracy: 0.7436\n","\n","Epoch 00040: val_loss did not improve from 0.43069\n","Epoch 41/1000\n"," - 76s - loss: 0.4642 - accuracy: 0.7745 - val_loss: 0.5393 - val_accuracy: 0.7389\n","\n","Epoch 00041: val_loss did not improve from 0.43069\n","Epoch 42/1000\n"," - 76s - loss: 0.4626 - accuracy: 0.7744 - val_loss: 0.6096 - val_accuracy: 0.7439\n","\n","Epoch 00042: val_loss did not improve from 0.43069\n","Epoch 43/1000\n"," - 76s - loss: 0.4623 - accuracy: 0.7744 - val_loss: 0.5557 - val_accuracy: 0.7433\n","\n","Epoch 00043: val_loss did not improve from 0.43069\n","Epoch 44/1000\n"," - 76s - loss: 0.4612 - accuracy: 0.7758 - val_loss: 0.5765 - val_accuracy: 0.7434\n","\n","Epoch 00044: val_loss did not improve from 0.43069\n","Epoch 45/1000\n"," - 76s - loss: 0.4631 - accuracy: 0.7735 - val_loss: 0.5115 - val_accuracy: 0.7429\n","\n","Epoch 00045: val_loss did not improve from 0.43069\n","Epoch 46/1000\n"," - 76s - loss: 0.4626 - accuracy: 0.7737 - val_loss: 0.4925 - val_accuracy: 0.7392\n","\n","Epoch 00046: val_loss did not improve from 0.43069\n","Epoch 47/1000\n"," - 76s - loss: 0.4617 - accuracy: 0.7757 - val_loss: 0.5050 - val_accuracy: 0.7438\n","\n","Epoch 00047: val_loss did not improve from 0.43069\n","Epoch 48/1000\n"," - 76s - loss: 0.4609 - accuracy: 0.7753 - val_loss: 0.5749 - val_accuracy: 0.7440\n","\n","Epoch 00048: val_loss did not improve from 0.43069\n","Epoch 49/1000\n"," - 76s - loss: 0.4612 - accuracy: 0.7756 - val_loss: 0.5180 - val_accuracy: 0.7471\n","\n","Epoch 00049: val_loss did not improve from 0.43069\n","Epoch 50/1000\n"," - 76s - loss: 0.4614 - accuracy: 0.7753 - val_loss: 0.4733 - val_accuracy: 0.7474\n","\n","Epoch 00050: val_loss did not improve from 0.43069\n","Epoch 51/1000\n"," - 75s - loss: 0.4614 - accuracy: 0.7747 - val_loss: 0.6427 - val_accuracy: 0.7420\n","\n","Epoch 00051: val_loss did not improve from 0.43069\n","Epoch 52/1000\n"," - 76s - loss: 0.4607 - accuracy: 0.7746 - val_loss: 0.5835 - val_accuracy: 0.7479\n","\n","Epoch 00052: val_loss did not improve from 0.43069\n","Epoch 53/1000\n"," - 76s - loss: 0.4590 - accuracy: 0.7766 - val_loss: 0.5527 - val_accuracy: 0.7471\n","\n","Epoch 00053: val_loss did not improve from 0.43069\n","Epoch 54/1000\n"," - 76s - loss: 0.4596 - accuracy: 0.7756 - val_loss: 0.4801 - val_accuracy: 0.7474\n","\n","Epoch 00054: val_loss did not improve from 0.43069\n","Epoch 55/1000\n"," - 75s - loss: 0.4601 - accuracy: 0.7755 - val_loss: 0.6354 - val_accuracy: 0.7424\n","\n","Epoch 00055: val_loss did not improve from 0.43069\n","Epoch 56/1000\n"," - 76s - loss: 0.4588 - accuracy: 0.7765 - val_loss: 0.5382 - val_accuracy: 0.7456\n","\n","Epoch 00056: val_loss did not improve from 0.43069\n","Epoch 57/1000\n"," - 76s - loss: 0.4575 - accuracy: 0.7780 - val_loss: 0.5495 - val_accuracy: 0.7369\n","\n","Epoch 00057: val_loss did not improve from 0.43069\n","Epoch 58/1000\n"," - 76s - loss: 0.4591 - accuracy: 0.7773 - val_loss: 0.6665 - val_accuracy: 0.7423\n","\n","Epoch 00058: val_loss did not improve from 0.43069\n","Epoch 59/1000\n"," - 75s - loss: 0.4568 - accuracy: 0.7781 - val_loss: 0.5147 - val_accuracy: 0.7437\n","\n","Epoch 00059: val_loss did not improve from 0.43069\n","Epoch 60/1000\n"," - 76s - loss: 0.4569 - accuracy: 0.7783 - val_loss: 0.4664 - val_accuracy: 0.7439\n","\n","Epoch 00060: val_loss did not improve from 0.43069\n","Epoch 61/1000\n"," - 76s - loss: 0.4562 - accuracy: 0.7788 - val_loss: 0.6179 - val_accuracy: 0.7420\n","\n","Epoch 00061: val_loss did not improve from 0.43069\n","Epoch 62/1000\n"," - 76s - loss: 0.4577 - accuracy: 0.7773 - val_loss: 0.6238 - val_accuracy: 0.7435\n","\n","Epoch 00062: val_loss did not improve from 0.43069\n","Epoch 63/1000\n"," - 76s - loss: 0.4566 - accuracy: 0.7786 - val_loss: 0.4854 - val_accuracy: 0.7445\n","\n","Epoch 00063: val_loss did not improve from 0.43069\n","Epoch 64/1000\n"," - 76s - loss: 0.4553 - accuracy: 0.7789 - val_loss: 0.5642 - val_accuracy: 0.7464\n","\n","Epoch 00064: val_loss did not improve from 0.43069\n","Epoch 65/1000\n"," - 76s - loss: 0.4543 - accuracy: 0.7797 - val_loss: 0.6114 - val_accuracy: 0.7447\n","\n","Epoch 00065: val_loss did not improve from 0.43069\n","Epoch 66/1000\n"," - 75s - loss: 0.4567 - accuracy: 0.7780 - val_loss: 0.4377 - val_accuracy: 0.7435\n","\n","Epoch 00066: val_loss did not improve from 0.43069\n","Epoch 67/1000\n"," - 75s - loss: 0.4550 - accuracy: 0.7800 - val_loss: 0.5981 - val_accuracy: 0.7398\n","\n","Epoch 00067: val_loss did not improve from 0.43069\n","Epoch 68/1000\n"," - 76s - loss: 0.4545 - accuracy: 0.7801 - val_loss: 0.5655 - val_accuracy: 0.7454\n","\n","Epoch 00068: val_loss did not improve from 0.43069\n","Epoch 69/1000\n"," - 76s - loss: 0.4547 - accuracy: 0.7794 - val_loss: 0.6499 - val_accuracy: 0.7428\n","\n","Epoch 00069: val_loss did not improve from 0.43069\n","Epoch 70/1000\n"," - 76s - loss: 0.4546 - accuracy: 0.7801 - val_loss: 0.6714 - val_accuracy: 0.7442\n","\n","Epoch 00070: val_loss did not improve from 0.43069\n","Epoch 71/1000\n"," - 76s - loss: 0.4531 - accuracy: 0.7803 - val_loss: 0.5293 - val_accuracy: 0.7460\n","\n","Epoch 00071: val_loss did not improve from 0.43069\n","Epoch 72/1000\n"," - 76s - loss: 0.4525 - accuracy: 0.7805 - val_loss: 0.5329 - val_accuracy: 0.7442\n","\n","Epoch 00072: val_loss did not improve from 0.43069\n","Epoch 73/1000\n"," - 76s - loss: 0.4535 - accuracy: 0.7804 - val_loss: 0.5412 - val_accuracy: 0.7474\n","\n","Epoch 00073: val_loss did not improve from 0.43069\n","Epoch 74/1000\n"," - 76s - loss: 0.4527 - accuracy: 0.7806 - val_loss: 0.5046 - val_accuracy: 0.7457\n","\n","Epoch 00074: val_loss did not improve from 0.43069\n","Epoch 75/1000\n"," - 76s - loss: 0.4526 - accuracy: 0.7817 - val_loss: 0.4386 - val_accuracy: 0.7429\n","\n","Epoch 00075: val_loss did not improve from 0.43069\n","Epoch 76/1000\n"," - 75s - loss: 0.4514 - accuracy: 0.7826 - val_loss: 0.6845 - val_accuracy: 0.7467\n","\n","Epoch 00076: val_loss did not improve from 0.43069\n","Epoch 77/1000\n"," - 76s - loss: 0.4521 - accuracy: 0.7798 - val_loss: 0.5894 - val_accuracy: 0.7476\n","\n","Epoch 00077: val_loss did not improve from 0.43069\n","Epoch 78/1000\n"," - 76s - loss: 0.4520 - accuracy: 0.7815 - val_loss: 0.5237 - val_accuracy: 0.7416\n","\n","Epoch 00078: val_loss did not improve from 0.43069\n","Epoch 79/1000\n"," - 76s - loss: 0.4503 - accuracy: 0.7816 - val_loss: 0.6167 - val_accuracy: 0.7438\n","\n","Epoch 00079: val_loss did not improve from 0.43069\n","Epoch 80/1000\n"," - 76s - loss: 0.4509 - accuracy: 0.7826 - val_loss: 0.7189 - val_accuracy: 0.7458\n","\n","Epoch 00080: val_loss did not improve from 0.43069\n","Epoch 81/1000\n"," - 76s - loss: 0.4505 - accuracy: 0.7824 - val_loss: 0.5135 - val_accuracy: 0.7415\n","\n","Epoch 00081: val_loss did not improve from 0.43069\n","Epoch 82/1000\n"," - 76s - loss: 0.4519 - accuracy: 0.7801 - val_loss: 0.6616 - val_accuracy: 0.7450\n","\n","Epoch 00082: val_loss did not improve from 0.43069\n","Epoch 83/1000\n"," - 76s - loss: 0.4486 - accuracy: 0.7835 - val_loss: 0.5076 - val_accuracy: 0.7440\n","\n","Epoch 00083: val_loss did not improve from 0.43069\n","Epoch 84/1000\n"," - 76s - loss: 0.4508 - accuracy: 0.7822 - val_loss: 0.6687 - val_accuracy: 0.7457\n","\n","Epoch 00084: val_loss did not improve from 0.43069\n","Epoch 85/1000\n"," - 76s - loss: 0.4479 - accuracy: 0.7838 - val_loss: 0.4067 - val_accuracy: 0.7452\n","\n","Epoch 00085: val_loss improved from 0.43069 to 0.40675, saving model to /content/drive/My Drive/Colab Notebooks/Project_Stock/ckpt/classifier_45_ma7_pr3.h5\n","Epoch 86/1000\n"," - 77s - loss: 0.4488 - accuracy: 0.7836 - val_loss: 0.6984 - val_accuracy: 0.7455\n","\n","Epoch 00086: val_loss did not improve from 0.40675\n","Epoch 87/1000\n"," - 76s - loss: 0.4477 - accuracy: 0.7832 - val_loss: 0.5908 - val_accuracy: 0.7430\n","\n","Epoch 00087: val_loss did not improve from 0.40675\n","Epoch 88/1000\n"," - 76s - loss: 0.4484 - accuracy: 0.7834 - val_loss: 0.5305 - val_accuracy: 0.7469\n","\n","Epoch 00088: val_loss did not improve from 0.40675\n","Epoch 89/1000\n"," - 76s - loss: 0.4482 - accuracy: 0.7834 - val_loss: 0.5294 - val_accuracy: 0.7480\n","\n","Epoch 00089: val_loss did not improve from 0.40675\n","Epoch 90/1000\n"," - 76s - loss: 0.4477 - accuracy: 0.7846 - val_loss: 0.5014 - val_accuracy: 0.7475\n","\n","Epoch 00090: val_loss did not improve from 0.40675\n","Epoch 91/1000\n"," - 76s - loss: 0.4471 - accuracy: 0.7846 - val_loss: 0.4168 - val_accuracy: 0.7463\n","\n","Epoch 00091: val_loss did not improve from 0.40675\n","Epoch 92/1000\n"," - 75s - loss: 0.4475 - accuracy: 0.7845 - val_loss: 0.5611 - val_accuracy: 0.7448\n","\n","Epoch 00092: val_loss did not improve from 0.40675\n","Epoch 93/1000\n"," - 76s - loss: 0.4464 - accuracy: 0.7849 - val_loss: 0.6112 - val_accuracy: 0.7468\n","\n","Epoch 00093: val_loss did not improve from 0.40675\n","Epoch 94/1000\n"," - 76s - loss: 0.4469 - accuracy: 0.7846 - val_loss: 0.5076 - val_accuracy: 0.7399\n","\n","Epoch 00094: val_loss did not improve from 0.40675\n","Epoch 95/1000\n"," - 76s - loss: 0.4461 - accuracy: 0.7860 - val_loss: 0.6389 - val_accuracy: 0.7466\n","\n","Epoch 00095: val_loss did not improve from 0.40675\n","Epoch 96/1000\n"," - 76s - loss: 0.4432 - accuracy: 0.7869 - val_loss: 0.3914 - val_accuracy: 0.7470\n","\n","Epoch 00096: val_loss improved from 0.40675 to 0.39144, saving model to /content/drive/My Drive/Colab Notebooks/Project_Stock/ckpt/classifier_45_ma7_pr3.h5\n","Epoch 97/1000\n"," - 77s - loss: 0.4455 - accuracy: 0.7862 - val_loss: 0.5533 - val_accuracy: 0.7478\n","\n","Epoch 00097: val_loss did not improve from 0.39144\n","Epoch 98/1000\n"," - 76s - loss: 0.4451 - accuracy: 0.7858 - val_loss: 0.6405 - val_accuracy: 0.7469\n","\n","Epoch 00098: val_loss did not improve from 0.39144\n","Epoch 99/1000\n"," - 76s - loss: 0.4449 - accuracy: 0.7854 - val_loss: 0.4734 - val_accuracy: 0.7455\n","\n","Epoch 00099: val_loss did not improve from 0.39144\n","Epoch 100/1000\n"," - 76s - loss: 0.4433 - accuracy: 0.7864 - val_loss: 0.4622 - val_accuracy: 0.7432\n","\n","Epoch 00100: val_loss did not improve from 0.39144\n","Epoch 101/1000\n"," - 76s - loss: 0.4438 - accuracy: 0.7850 - val_loss: 0.5629 - val_accuracy: 0.7476\n","\n","Epoch 00101: val_loss did not improve from 0.39144\n","Epoch 102/1000\n"," - 76s - loss: 0.4433 - accuracy: 0.7866 - val_loss: 0.5039 - val_accuracy: 0.7475\n","\n","Epoch 00102: val_loss did not improve from 0.39144\n","Epoch 103/1000\n"," - 76s - loss: 0.4419 - accuracy: 0.7879 - val_loss: 0.6338 - val_accuracy: 0.7420\n","\n","Epoch 00103: val_loss did not improve from 0.39144\n","Epoch 104/1000\n"," - 77s - loss: 0.4422 - accuracy: 0.7873 - val_loss: 0.5648 - val_accuracy: 0.7442\n","\n","Epoch 00104: val_loss did not improve from 0.39144\n","Epoch 105/1000\n"," - 75s - loss: 0.4441 - accuracy: 0.7863 - val_loss: 0.5014 - val_accuracy: 0.7473\n","\n","Epoch 00105: val_loss did not improve from 0.39144\n","Epoch 106/1000\n"," - 76s - loss: 0.4433 - accuracy: 0.7876 - val_loss: 0.5537 - val_accuracy: 0.7445\n","\n","Epoch 00106: val_loss did not improve from 0.39144\n","Epoch 107/1000\n"," - 75s - loss: 0.4435 - accuracy: 0.7862 - val_loss: 0.5025 - val_accuracy: 0.7451\n","\n","Epoch 00107: val_loss did not improve from 0.39144\n","Epoch 108/1000\n"," - 76s - loss: 0.4420 - accuracy: 0.7882 - val_loss: 0.5479 - val_accuracy: 0.7451\n","\n","Epoch 00108: val_loss did not improve from 0.39144\n","Epoch 109/1000\n"," - 76s - loss: 0.4409 - accuracy: 0.7881 - val_loss: 0.6246 - val_accuracy: 0.7462\n","\n","Epoch 00109: val_loss did not improve from 0.39144\n","Epoch 110/1000\n"," - 76s - loss: 0.4425 - accuracy: 0.7867 - val_loss: 0.4373 - val_accuracy: 0.7468\n","\n","Epoch 00110: val_loss did not improve from 0.39144\n","Epoch 111/1000\n"," - 76s - loss: 0.4415 - accuracy: 0.7880 - val_loss: 0.6062 - val_accuracy: 0.7453\n","\n","Epoch 00111: val_loss did not improve from 0.39144\n","Epoch 112/1000\n"," - 76s - loss: 0.4400 - accuracy: 0.7888 - val_loss: 0.7570 - val_accuracy: 0.7468\n","\n","Epoch 00112: val_loss did not improve from 0.39144\n","Epoch 113/1000\n"," - 76s - loss: 0.4406 - accuracy: 0.7875 - val_loss: 0.5775 - val_accuracy: 0.7468\n","\n","Epoch 00113: val_loss did not improve from 0.39144\n","Epoch 114/1000\n"," - 77s - loss: 0.4416 - accuracy: 0.7877 - val_loss: 0.4463 - val_accuracy: 0.7427\n","\n","Epoch 00114: val_loss did not improve from 0.39144\n","Epoch 115/1000\n"," - 76s - loss: 0.4390 - accuracy: 0.7894 - val_loss: 0.4724 - val_accuracy: 0.7480\n","\n","Epoch 00115: val_loss did not improve from 0.39144\n","Epoch 116/1000\n"," - 76s - loss: 0.4401 - accuracy: 0.7890 - val_loss: 0.5433 - val_accuracy: 0.7488\n","\n","Epoch 00116: val_loss did not improve from 0.39144\n","Epoch 117/1000\n"," - 76s - loss: 0.4395 - accuracy: 0.7882 - val_loss: 0.5278 - val_accuracy: 0.7465\n","\n","Epoch 00117: val_loss did not improve from 0.39144\n","Epoch 118/1000\n"," - 76s - loss: 0.4382 - accuracy: 0.7899 - val_loss: 0.6663 - val_accuracy: 0.7478\n","\n","Epoch 00118: val_loss did not improve from 0.39144\n","Epoch 119/1000\n"," - 76s - loss: 0.4386 - accuracy: 0.7887 - val_loss: 0.6930 - val_accuracy: 0.7468\n","\n","Epoch 00119: val_loss did not improve from 0.39144\n","Epoch 120/1000\n"," - 75s - loss: 0.4381 - accuracy: 0.7898 - val_loss: 0.5724 - val_accuracy: 0.7470\n","\n","Epoch 00120: val_loss did not improve from 0.39144\n","Epoch 121/1000\n"," - 76s - loss: 0.4384 - accuracy: 0.7896 - val_loss: 0.6896 - val_accuracy: 0.7476\n","\n","Epoch 00121: val_loss did not improve from 0.39144\n","Epoch 122/1000\n"," - 76s - loss: 0.4374 - accuracy: 0.7903 - val_loss: 0.5313 - val_accuracy: 0.7481\n","\n","Epoch 00122: val_loss did not improve from 0.39144\n","Epoch 123/1000\n"," - 76s - loss: 0.4373 - accuracy: 0.7903 - val_loss: 0.5189 - val_accuracy: 0.7483\n","\n","Epoch 00123: val_loss did not improve from 0.39144\n","Epoch 124/1000\n"," - 76s - loss: 0.4373 - accuracy: 0.7899 - val_loss: 0.6286 - val_accuracy: 0.7476\n","\n","Epoch 00124: val_loss did not improve from 0.39144\n","Epoch 125/1000\n"," - 76s - loss: 0.4352 - accuracy: 0.7921 - val_loss: 0.5091 - val_accuracy: 0.7464\n","\n","Epoch 00125: val_loss did not improve from 0.39144\n","Epoch 126/1000\n"," - 76s - loss: 0.4363 - accuracy: 0.7903 - val_loss: 0.6161 - val_accuracy: 0.7464\n","\n","Epoch 00126: val_loss did not improve from 0.39144\n","Epoch 127/1000\n"," - 76s - loss: 0.4366 - accuracy: 0.7907 - val_loss: 0.6755 - val_accuracy: 0.7486\n","\n","Epoch 00127: val_loss did not improve from 0.39144\n","Epoch 128/1000\n"," - 77s - loss: 0.4358 - accuracy: 0.7907 - val_loss: 0.6112 - val_accuracy: 0.7470\n","\n","Epoch 00128: val_loss did not improve from 0.39144\n","Epoch 129/1000\n"," - 76s - loss: 0.4347 - accuracy: 0.7916 - val_loss: 0.3769 - val_accuracy: 0.7483\n","\n","Epoch 00129: val_loss improved from 0.39144 to 0.37686, saving model to /content/drive/My Drive/Colab Notebooks/Project_Stock/ckpt/classifier_45_ma7_pr3.h5\n","Epoch 130/1000\n"," - 78s - loss: 0.4356 - accuracy: 0.7911 - val_loss: 0.6609 - val_accuracy: 0.7445\n","\n","Epoch 00130: val_loss did not improve from 0.37686\n","Epoch 131/1000\n"," - 76s - loss: 0.4341 - accuracy: 0.7928 - val_loss: 0.5752 - val_accuracy: 0.7446\n","\n","Epoch 00131: val_loss did not improve from 0.37686\n","Epoch 132/1000\n"," - 76s - loss: 0.4350 - accuracy: 0.7905 - val_loss: 0.5236 - val_accuracy: 0.7474\n","\n","Epoch 00132: val_loss did not improve from 0.37686\n","Epoch 133/1000\n"," - 76s - loss: 0.4338 - accuracy: 0.7922 - val_loss: 0.3935 - val_accuracy: 0.7483\n","\n","Epoch 00133: val_loss did not improve from 0.37686\n","Epoch 134/1000\n"," - 76s - loss: 0.4330 - accuracy: 0.7926 - val_loss: 0.4705 - val_accuracy: 0.7487\n","\n","Epoch 00134: val_loss did not improve from 0.37686\n","Epoch 135/1000\n"," - 75s - loss: 0.4327 - accuracy: 0.7934 - val_loss: 0.6535 - val_accuracy: 0.7468\n","\n","Epoch 00135: val_loss did not improve from 0.37686\n","Epoch 136/1000\n"," - 76s - loss: 0.4330 - accuracy: 0.7935 - val_loss: 0.5963 - val_accuracy: 0.7481\n","\n","Epoch 00136: val_loss did not improve from 0.37686\n","Epoch 137/1000\n"," - 76s - loss: 0.4327 - accuracy: 0.7933 - val_loss: 0.5132 - val_accuracy: 0.7455\n","\n","Epoch 00137: val_loss did not improve from 0.37686\n","Epoch 138/1000\n"," - 76s - loss: 0.4322 - accuracy: 0.7932 - val_loss: 0.5635 - val_accuracy: 0.7497\n","\n","Epoch 00138: val_loss did not improve from 0.37686\n","Epoch 139/1000\n"," - 76s - loss: 0.4331 - accuracy: 0.7942 - val_loss: 0.7381 - val_accuracy: 0.7468\n","\n","Epoch 00139: val_loss did not improve from 0.37686\n","Epoch 140/1000\n"," - 76s - loss: 0.4316 - accuracy: 0.7943 - val_loss: 0.5791 - val_accuracy: 0.7482\n","\n","Epoch 00140: val_loss did not improve from 0.37686\n","Epoch 141/1000\n"," - 76s - loss: 0.4323 - accuracy: 0.7930 - val_loss: 0.6531 - val_accuracy: 0.7481\n","\n","Epoch 00141: val_loss did not improve from 0.37686\n","Epoch 142/1000\n"," - 76s - loss: 0.4303 - accuracy: 0.7943 - val_loss: 0.5250 - val_accuracy: 0.7472\n","\n","Epoch 00142: val_loss did not improve from 0.37686\n","Epoch 143/1000\n"," - 76s - loss: 0.4301 - accuracy: 0.7949 - val_loss: 0.6066 - val_accuracy: 0.7467\n","\n","Epoch 00143: val_loss did not improve from 0.37686\n","Epoch 144/1000\n"," - 76s - loss: 0.4304 - accuracy: 0.7952 - val_loss: 0.5665 - val_accuracy: 0.7468\n","\n","Epoch 00144: val_loss did not improve from 0.37686\n","Epoch 145/1000\n"," - 76s - loss: 0.4311 - accuracy: 0.7953 - val_loss: 0.5075 - val_accuracy: 0.7482\n","\n","Epoch 00145: val_loss did not improve from 0.37686\n","Epoch 146/1000\n"," - 76s - loss: 0.4305 - accuracy: 0.7943 - val_loss: 0.5932 - val_accuracy: 0.7441\n","\n","Epoch 00146: val_loss did not improve from 0.37686\n","Epoch 147/1000\n"," - 76s - loss: 0.4292 - accuracy: 0.7959 - val_loss: 0.6412 - val_accuracy: 0.7488\n","\n","Epoch 00147: val_loss did not improve from 0.37686\n","Epoch 148/1000\n"," - 76s - loss: 0.4305 - accuracy: 0.7948 - val_loss: 0.6077 - val_accuracy: 0.7474\n","\n","Epoch 00148: val_loss did not improve from 0.37686\n","Epoch 149/1000\n"," - 76s - loss: 0.4304 - accuracy: 0.7945 - val_loss: 0.4805 - val_accuracy: 0.7498\n","\n","Epoch 00149: val_loss did not improve from 0.37686\n","Epoch 150/1000\n"," - 76s - loss: 0.4303 - accuracy: 0.7939 - val_loss: 0.4931 - val_accuracy: 0.7489\n","\n","Epoch 00150: val_loss did not improve from 0.37686\n","Epoch 151/1000\n"," - 76s - loss: 0.4299 - accuracy: 0.7946 - val_loss: 0.4974 - val_accuracy: 0.7453\n","\n","Epoch 00151: val_loss did not improve from 0.37686\n","Epoch 152/1000\n"," - 76s - loss: 0.4276 - accuracy: 0.7961 - val_loss: 0.5670 - val_accuracy: 0.7481\n","\n","Epoch 00152: val_loss did not improve from 0.37686\n","Epoch 153/1000\n"," - 76s - loss: 0.4280 - accuracy: 0.7965 - val_loss: 0.6143 - val_accuracy: 0.7476\n","\n","Epoch 00153: val_loss did not improve from 0.37686\n","Epoch 154/1000\n"," - 76s - loss: 0.4282 - accuracy: 0.7959 - val_loss: 0.4792 - val_accuracy: 0.7501\n","\n","Epoch 00154: val_loss did not improve from 0.37686\n","Epoch 155/1000\n"," - 76s - loss: 0.4277 - accuracy: 0.7968 - val_loss: 0.5840 - val_accuracy: 0.7475\n","\n","Epoch 00155: val_loss did not improve from 0.37686\n","Epoch 156/1000\n"," - 76s - loss: 0.4274 - accuracy: 0.7960 - val_loss: 0.6135 - val_accuracy: 0.7466\n","\n","Epoch 00156: val_loss did not improve from 0.37686\n","Epoch 157/1000\n"," - 76s - loss: 0.4273 - accuracy: 0.7973 - val_loss: 0.5814 - val_accuracy: 0.7485\n","\n","Epoch 00157: val_loss did not improve from 0.37686\n","Epoch 158/1000\n"," - 76s - loss: 0.4271 - accuracy: 0.7969 - val_loss: 0.6732 - val_accuracy: 0.7491\n","\n","Epoch 00158: val_loss did not improve from 0.37686\n","Epoch 159/1000\n"," - 76s - loss: 0.4282 - accuracy: 0.7958 - val_loss: 0.5652 - val_accuracy: 0.7439\n","\n","Epoch 00159: val_loss did not improve from 0.37686\n","Epoch 160/1000\n"," - 76s - loss: 0.4271 - accuracy: 0.7968 - val_loss: 0.4288 - val_accuracy: 0.7489\n","\n","Epoch 00160: val_loss did not improve from 0.37686\n","Epoch 161/1000\n"," - 75s - loss: 0.4259 - accuracy: 0.7975 - val_loss: 0.5238 - val_accuracy: 0.7472\n","\n","Epoch 00161: val_loss did not improve from 0.37686\n","Epoch 162/1000\n"," - 76s - loss: 0.4262 - accuracy: 0.7967 - val_loss: 0.5245 - val_accuracy: 0.7485\n","\n","Epoch 00162: val_loss did not improve from 0.37686\n","Epoch 163/1000\n"," - 76s - loss: 0.4245 - accuracy: 0.7971 - val_loss: 0.5670 - val_accuracy: 0.7490\n","\n","Epoch 00163: val_loss did not improve from 0.37686\n","Epoch 164/1000\n"," - 76s - loss: 0.4252 - accuracy: 0.7974 - val_loss: 0.7050 - val_accuracy: 0.7482\n","\n","Epoch 00164: val_loss did not improve from 0.37686\n","Epoch 165/1000\n"," - 76s - loss: 0.4239 - accuracy: 0.7981 - val_loss: 0.5213 - val_accuracy: 0.7504\n","\n","Epoch 00165: val_loss did not improve from 0.37686\n","Epoch 166/1000\n"," - 76s - loss: 0.4237 - accuracy: 0.7989 - val_loss: 0.4022 - val_accuracy: 0.7488\n","\n","Epoch 00166: val_loss did not improve from 0.37686\n","Epoch 167/1000\n"," - 76s - loss: 0.4234 - accuracy: 0.7991 - val_loss: 0.5893 - val_accuracy: 0.7498\n","\n","Epoch 00167: val_loss did not improve from 0.37686\n","Epoch 168/1000\n"," - 76s - loss: 0.4212 - accuracy: 0.8007 - val_loss: 0.4439 - val_accuracy: 0.7490\n","\n","Epoch 00168: val_loss did not improve from 0.37686\n","Epoch 169/1000\n"," - 76s - loss: 0.4243 - accuracy: 0.7991 - val_loss: 0.5269 - val_accuracy: 0.7484\n","\n","Epoch 00169: val_loss did not improve from 0.37686\n","Epoch 170/1000\n"," - 76s - loss: 0.4242 - accuracy: 0.7987 - val_loss: 0.4763 - val_accuracy: 0.7488\n","\n","Epoch 00170: val_loss did not improve from 0.37686\n","Epoch 171/1000\n"," - 76s - loss: 0.4232 - accuracy: 0.7992 - val_loss: 0.5925 - val_accuracy: 0.7450\n","\n","Epoch 00171: val_loss did not improve from 0.37686\n","Epoch 172/1000\n"," - 76s - loss: 0.4236 - accuracy: 0.7981 - val_loss: 0.5537 - val_accuracy: 0.7486\n","\n","Epoch 00172: val_loss did not improve from 0.37686\n","Epoch 173/1000\n"," - 76s - loss: 0.4218 - accuracy: 0.8003 - val_loss: 0.5230 - val_accuracy: 0.7483\n","\n","Epoch 00173: val_loss did not improve from 0.37686\n","Epoch 174/1000\n"," - 76s - loss: 0.4226 - accuracy: 0.7992 - val_loss: 0.5336 - val_accuracy: 0.7502\n","\n","Epoch 00174: val_loss did not improve from 0.37686\n","Epoch 175/1000\n"," - 76s - loss: 0.4224 - accuracy: 0.7989 - val_loss: 0.5842 - val_accuracy: 0.7473\n","\n","Epoch 00175: val_loss did not improve from 0.37686\n","Epoch 176/1000\n"," - 76s - loss: 0.4221 - accuracy: 0.8005 - val_loss: 0.5356 - val_accuracy: 0.7502\n","\n","Epoch 00176: val_loss did not improve from 0.37686\n","Epoch 177/1000\n"," - 76s - loss: 0.4206 - accuracy: 0.8011 - val_loss: 0.4397 - val_accuracy: 0.7476\n","\n","Epoch 00177: val_loss did not improve from 0.37686\n","Epoch 178/1000\n"," - 77s - loss: 0.4210 - accuracy: 0.8003 - val_loss: 0.5998 - val_accuracy: 0.7503\n","\n","Epoch 00178: val_loss did not improve from 0.37686\n","Epoch 179/1000\n"," - 76s - loss: 0.4208 - accuracy: 0.8003 - val_loss: 0.6443 - val_accuracy: 0.7483\n","\n","Epoch 00179: val_loss did not improve from 0.37686\n","Epoch 180/1000\n"," - 76s - loss: 0.4211 - accuracy: 0.8011 - val_loss: 0.5207 - val_accuracy: 0.7467\n","\n","Epoch 00180: val_loss did not improve from 0.37686\n","Epoch 181/1000\n"," - 76s - loss: 0.4214 - accuracy: 0.8006 - val_loss: 0.5514 - val_accuracy: 0.7496\n","\n","Epoch 00181: val_loss did not improve from 0.37686\n","Epoch 182/1000\n"," - 76s - loss: 0.4209 - accuracy: 0.8017 - val_loss: 0.5518 - val_accuracy: 0.7503\n","\n","Epoch 00182: val_loss did not improve from 0.37686\n","Epoch 183/1000\n"," - 76s - loss: 0.4198 - accuracy: 0.8015 - val_loss: 0.4906 - val_accuracy: 0.7492\n","\n","Epoch 00183: val_loss did not improve from 0.37686\n","Epoch 184/1000\n"," - 76s - loss: 0.4195 - accuracy: 0.8016 - val_loss: 0.5389 - val_accuracy: 0.7510\n","\n","Epoch 00184: val_loss did not improve from 0.37686\n","Epoch 185/1000\n"," - 76s - loss: 0.4197 - accuracy: 0.8015 - val_loss: 0.6183 - val_accuracy: 0.7478\n","\n","Epoch 00185: val_loss did not improve from 0.37686\n","Epoch 186/1000\n"," - 76s - loss: 0.4194 - accuracy: 0.8019 - val_loss: 0.4642 - val_accuracy: 0.7476\n","\n","Epoch 00186: val_loss did not improve from 0.37686\n","Epoch 187/1000\n"," - 76s - loss: 0.4190 - accuracy: 0.8009 - val_loss: 0.5999 - val_accuracy: 0.7498\n","\n","Epoch 00187: val_loss did not improve from 0.37686\n","Epoch 188/1000\n"," - 76s - loss: 0.4176 - accuracy: 0.8020 - val_loss: 0.4653 - val_accuracy: 0.7464\n","\n","Epoch 00188: val_loss did not improve from 0.37686\n","Epoch 189/1000\n"," - 76s - loss: 0.4202 - accuracy: 0.8000 - val_loss: 0.6391 - val_accuracy: 0.7488\n","\n","Epoch 00189: val_loss did not improve from 0.37686\n","Epoch 190/1000\n"," - 77s - loss: 0.4186 - accuracy: 0.8017 - val_loss: 0.6208 - val_accuracy: 0.7454\n","\n","Epoch 00190: val_loss did not improve from 0.37686\n","Epoch 191/1000\n"," - 76s - loss: 0.4185 - accuracy: 0.8034 - val_loss: 0.6264 - val_accuracy: 0.7496\n","\n","Epoch 00191: val_loss did not improve from 0.37686\n","Epoch 192/1000\n"," - 76s - loss: 0.4180 - accuracy: 0.8025 - val_loss: 0.6037 - val_accuracy: 0.7504\n","\n","Epoch 00192: val_loss did not improve from 0.37686\n","Epoch 193/1000\n"," - 76s - loss: 0.4170 - accuracy: 0.8034 - val_loss: 0.4639 - val_accuracy: 0.7468\n","\n","Epoch 00193: val_loss did not improve from 0.37686\n","Epoch 194/1000\n"," - 76s - loss: 0.4163 - accuracy: 0.8031 - val_loss: 0.6766 - val_accuracy: 0.7467\n","\n","Epoch 00194: val_loss did not improve from 0.37686\n","Epoch 195/1000\n"," - 75s - loss: 0.4157 - accuracy: 0.8028 - val_loss: 0.5736 - val_accuracy: 0.7492\n","\n","Epoch 00195: val_loss did not improve from 0.37686\n","Epoch 196/1000\n"," - 76s - loss: 0.4156 - accuracy: 0.8039 - val_loss: 0.6037 - val_accuracy: 0.7490\n","\n","Epoch 00196: val_loss did not improve from 0.37686\n","Epoch 197/1000\n"," - 76s - loss: 0.4151 - accuracy: 0.8037 - val_loss: 0.4383 - val_accuracy: 0.7501\n","\n","Epoch 00197: val_loss did not improve from 0.37686\n","Epoch 198/1000\n"," - 76s - loss: 0.4144 - accuracy: 0.8044 - val_loss: 0.5999 - val_accuracy: 0.7488\n","\n","Epoch 00198: val_loss did not improve from 0.37686\n","Epoch 199/1000\n"," - 76s - loss: 0.4163 - accuracy: 0.8036 - val_loss: 0.6403 - val_accuracy: 0.7498\n","\n","Epoch 00199: val_loss did not improve from 0.37686\n","Epoch 200/1000\n"," - 76s - loss: 0.4160 - accuracy: 0.8040 - val_loss: 0.4444 - val_accuracy: 0.7468\n","\n","Epoch 00200: val_loss did not improve from 0.37686\n","Epoch 201/1000\n"," - 76s - loss: 0.4158 - accuracy: 0.8035 - val_loss: 0.7016 - val_accuracy: 0.7494\n","\n","Epoch 00201: val_loss did not improve from 0.37686\n","Epoch 202/1000\n"," - 76s - loss: 0.4153 - accuracy: 0.8039 - val_loss: 0.6428 - val_accuracy: 0.7464\n","\n","Epoch 00202: val_loss did not improve from 0.37686\n","Epoch 203/1000\n"," - 75s - loss: 0.4145 - accuracy: 0.8049 - val_loss: 0.7913 - val_accuracy: 0.7472\n","\n","Epoch 00203: val_loss did not improve from 0.37686\n","Epoch 204/1000\n"," - 76s - loss: 0.4156 - accuracy: 0.8034 - val_loss: 0.5527 - val_accuracy: 0.7486\n","\n","Epoch 00204: val_loss did not improve from 0.37686\n","Epoch 205/1000\n"," - 76s - loss: 0.4122 - accuracy: 0.8054 - val_loss: 0.6429 - val_accuracy: 0.7452\n","\n","Epoch 00205: val_loss did not improve from 0.37686\n","Epoch 206/1000\n"," - 76s - loss: 0.4146 - accuracy: 0.8053 - val_loss: 0.5075 - val_accuracy: 0.7476\n","\n","Epoch 00206: val_loss did not improve from 0.37686\n","Epoch 207/1000\n"," - 76s - loss: 0.4135 - accuracy: 0.8046 - val_loss: 0.4536 - val_accuracy: 0.7481\n","\n","Epoch 00207: val_loss did not improve from 0.37686\n","Epoch 208/1000\n"," - 76s - loss: 0.4134 - accuracy: 0.8048 - val_loss: 0.5096 - val_accuracy: 0.7485\n","\n","Epoch 00208: val_loss did not improve from 0.37686\n","Epoch 209/1000\n"," - 76s - loss: 0.4132 - accuracy: 0.8056 - val_loss: 0.5979 - val_accuracy: 0.7472\n","\n","Epoch 00209: val_loss did not improve from 0.37686\n","Epoch 210/1000\n"," - 77s - loss: 0.4142 - accuracy: 0.8033 - val_loss: 0.5608 - val_accuracy: 0.7493\n","\n","Epoch 00210: val_loss did not improve from 0.37686\n","Epoch 211/1000\n"," - 76s - loss: 0.4127 - accuracy: 0.8063 - val_loss: 0.6619 - val_accuracy: 0.7495\n","\n","Epoch 00211: val_loss did not improve from 0.37686\n","Epoch 212/1000\n"," - 76s - loss: 0.4123 - accuracy: 0.8061 - val_loss: 0.6889 - val_accuracy: 0.7430\n","\n","Epoch 00212: val_loss did not improve from 0.37686\n","Epoch 213/1000\n"," - 76s - loss: 0.4110 - accuracy: 0.8064 - val_loss: 0.4778 - val_accuracy: 0.7511\n","\n","Epoch 00213: val_loss did not improve from 0.37686\n","Epoch 214/1000\n"," - 76s - loss: 0.4113 - accuracy: 0.8061 - val_loss: 0.6099 - val_accuracy: 0.7514\n","\n","Epoch 00214: val_loss did not improve from 0.37686\n","Epoch 215/1000\n"," - 76s - loss: 0.4116 - accuracy: 0.8057 - val_loss: 0.5846 - val_accuracy: 0.7523\n","\n","Epoch 00215: val_loss did not improve from 0.37686\n","Epoch 216/1000\n"," - 76s - loss: 0.4103 - accuracy: 0.8058 - val_loss: 0.5325 - val_accuracy: 0.7501\n","\n","Epoch 00216: val_loss did not improve from 0.37686\n","Epoch 217/1000\n"," - 76s - loss: 0.4100 - accuracy: 0.8075 - val_loss: 0.7670 - val_accuracy: 0.7506\n","\n","Epoch 00217: val_loss did not improve from 0.37686\n","Epoch 218/1000\n"," - 76s - loss: 0.4103 - accuracy: 0.8068 - val_loss: 0.4200 - val_accuracy: 0.7504\n","\n","Epoch 00218: val_loss did not improve from 0.37686\n","Epoch 219/1000\n"," - 76s - loss: 0.4107 - accuracy: 0.8077 - val_loss: 0.5725 - val_accuracy: 0.7520\n","\n","Epoch 00219: val_loss did not improve from 0.37686\n","Epoch 220/1000\n"," - 76s - loss: 0.4092 - accuracy: 0.8079 - val_loss: 0.5799 - val_accuracy: 0.7475\n","\n","Epoch 00220: val_loss did not improve from 0.37686\n","Epoch 221/1000\n"," - 76s - loss: 0.4086 - accuracy: 0.8076 - val_loss: 0.5873 - val_accuracy: 0.7489\n","\n","Epoch 00221: val_loss did not improve from 0.37686\n","Epoch 222/1000\n"," - 76s - loss: 0.4090 - accuracy: 0.8081 - val_loss: 0.5539 - val_accuracy: 0.7517\n","\n","Epoch 00222: val_loss did not improve from 0.37686\n","Epoch 223/1000\n"," - 76s - loss: 0.4091 - accuracy: 0.8080 - val_loss: 0.5387 - val_accuracy: 0.7473\n","\n","Epoch 00223: val_loss did not improve from 0.37686\n","Epoch 224/1000\n"," - 76s - loss: 0.4074 - accuracy: 0.8084 - val_loss: 0.5777 - val_accuracy: 0.7471\n","\n","Epoch 00224: val_loss did not improve from 0.37686\n","Epoch 225/1000\n"," - 76s - loss: 0.4097 - accuracy: 0.8085 - val_loss: 0.5440 - val_accuracy: 0.7505\n","\n","Epoch 00225: val_loss did not improve from 0.37686\n","Epoch 226/1000\n"," - 75s - loss: 0.4073 - accuracy: 0.8103 - val_loss: 0.6478 - val_accuracy: 0.7516\n","\n","Epoch 00226: val_loss did not improve from 0.37686\n","Epoch 227/1000\n"," - 76s - loss: 0.4072 - accuracy: 0.8085 - val_loss: 0.5199 - val_accuracy: 0.7520\n","\n","Epoch 00227: val_loss did not improve from 0.37686\n","Epoch 228/1000\n"," - 76s - loss: 0.4064 - accuracy: 0.8086 - val_loss: 0.5992 - val_accuracy: 0.7507\n","\n","Epoch 00228: val_loss did not improve from 0.37686\n","Epoch 229/1000\n"," - 77s - loss: 0.4084 - accuracy: 0.8089 - val_loss: 0.5373 - val_accuracy: 0.7502\n","\n","Epoch 00229: val_loss did not improve from 0.37686\n","Epoch 230/1000\n"," - 77s - loss: 0.4061 - accuracy: 0.8092 - val_loss: 0.5141 - val_accuracy: 0.7502\n","\n","Epoch 00230: val_loss did not improve from 0.37686\n","Epoch 231/1000\n"," - 77s - loss: 0.4072 - accuracy: 0.8079 - val_loss: 0.5252 - val_accuracy: 0.7511\n","\n","Epoch 00231: val_loss did not improve from 0.37686\n","Epoch 232/1000\n"," - 77s - loss: 0.4082 - accuracy: 0.8079 - val_loss: 0.5808 - val_accuracy: 0.7488\n","\n","Epoch 00232: val_loss did not improve from 0.37686\n","Epoch 233/1000\n"," - 78s - loss: 0.4071 - accuracy: 0.8077 - val_loss: 0.6324 - val_accuracy: 0.7510\n","\n","Epoch 00233: val_loss did not improve from 0.37686\n","Epoch 234/1000\n"," - 77s - loss: 0.4055 - accuracy: 0.8091 - val_loss: 0.6273 - val_accuracy: 0.7495\n","\n","Epoch 00234: val_loss did not improve from 0.37686\n","Epoch 235/1000\n"," - 76s - loss: 0.4065 - accuracy: 0.8096 - val_loss: 0.6578 - val_accuracy: 0.7496\n","\n","Epoch 00235: val_loss did not improve from 0.37686\n","Epoch 236/1000\n"," - 76s - loss: 0.4033 - accuracy: 0.8105 - val_loss: 0.6546 - val_accuracy: 0.7457\n","\n","Epoch 00236: val_loss did not improve from 0.37686\n","Epoch 237/1000\n"," - 76s - loss: 0.4051 - accuracy: 0.8113 - val_loss: 0.4950 - val_accuracy: 0.7474\n","\n","Epoch 00237: val_loss did not improve from 0.37686\n","Epoch 238/1000\n"," - 76s - loss: 0.4056 - accuracy: 0.8094 - val_loss: 0.6797 - val_accuracy: 0.7515\n","\n","Epoch 00238: val_loss did not improve from 0.37686\n","Epoch 239/1000\n"," - 77s - loss: 0.4045 - accuracy: 0.8105 - val_loss: 0.6089 - val_accuracy: 0.7486\n","\n","Epoch 00239: val_loss did not improve from 0.37686\n","Epoch 240/1000\n"," - 76s - loss: 0.4042 - accuracy: 0.8110 - val_loss: 0.5074 - val_accuracy: 0.7513\n","\n","Epoch 00240: val_loss did not improve from 0.37686\n","Epoch 241/1000\n"," - 76s - loss: 0.4026 - accuracy: 0.8121 - val_loss: 0.5578 - val_accuracy: 0.7522\n","\n","Epoch 00241: val_loss did not improve from 0.37686\n","Epoch 242/1000\n"," - 76s - loss: 0.4035 - accuracy: 0.8118 - val_loss: 0.6272 - val_accuracy: 0.7527\n","\n","Epoch 00242: val_loss did not improve from 0.37686\n","Epoch 243/1000\n"," - 76s - loss: 0.4032 - accuracy: 0.8115 - val_loss: 0.4333 - val_accuracy: 0.7532\n","\n","Epoch 00243: val_loss did not improve from 0.37686\n","Epoch 244/1000\n"," - 76s - loss: 0.4041 - accuracy: 0.8118 - val_loss: 0.7269 - val_accuracy: 0.7517\n","\n","Epoch 00244: val_loss did not improve from 0.37686\n","Epoch 245/1000\n"," - 76s - loss: 0.4040 - accuracy: 0.8099 - val_loss: 0.6897 - val_accuracy: 0.7499\n","\n","Epoch 00245: val_loss did not improve from 0.37686\n","Epoch 246/1000\n"," - 76s - loss: 0.4026 - accuracy: 0.8119 - val_loss: 0.5607 - val_accuracy: 0.7496\n","\n","Epoch 00246: val_loss did not improve from 0.37686\n","Epoch 247/1000\n"," - 77s - loss: 0.4022 - accuracy: 0.8121 - val_loss: 0.4789 - val_accuracy: 0.7508\n","\n","Epoch 00247: val_loss did not improve from 0.37686\n","Epoch 248/1000\n"," - 76s - loss: 0.4018 - accuracy: 0.8127 - val_loss: 0.5967 - val_accuracy: 0.7507\n","\n","Epoch 00248: val_loss did not improve from 0.37686\n","Epoch 249/1000\n"," - 76s - loss: 0.4016 - accuracy: 0.8118 - val_loss: 0.5319 - val_accuracy: 0.7533\n","\n","Epoch 00249: val_loss did not improve from 0.37686\n","Epoch 250/1000\n"," - 76s - loss: 0.4002 - accuracy: 0.8139 - val_loss: 0.7684 - val_accuracy: 0.7502\n","\n","Epoch 00250: val_loss did not improve from 0.37686\n","Epoch 251/1000\n"," - 76s - loss: 0.4018 - accuracy: 0.8115 - val_loss: 0.5626 - val_accuracy: 0.7525\n","\n","Epoch 00251: val_loss did not improve from 0.37686\n","Epoch 252/1000\n"," - 77s - loss: 0.4032 - accuracy: 0.8107 - val_loss: 0.6025 - val_accuracy: 0.7516\n","\n","Epoch 00252: val_loss did not improve from 0.37686\n","Epoch 253/1000\n"," - 76s - loss: 0.4016 - accuracy: 0.8116 - val_loss: 0.6321 - val_accuracy: 0.7494\n","\n","Epoch 00253: val_loss did not improve from 0.37686\n","Epoch 254/1000\n"," - 76s - loss: 0.4019 - accuracy: 0.8120 - val_loss: 0.5246 - val_accuracy: 0.7500\n","\n","Epoch 00254: val_loss did not improve from 0.37686\n","Epoch 255/1000\n"," - 76s - loss: 0.4009 - accuracy: 0.8124 - val_loss: 0.5864 - val_accuracy: 0.7455\n","\n","Epoch 00255: val_loss did not improve from 0.37686\n","Epoch 256/1000\n"," - 76s - loss: 0.4017 - accuracy: 0.8127 - val_loss: 0.6448 - val_accuracy: 0.7492\n","\n","Epoch 00256: val_loss did not improve from 0.37686\n","Epoch 257/1000\n"," - 77s - loss: 0.3995 - accuracy: 0.8132 - val_loss: 0.6466 - val_accuracy: 0.7500\n","\n","Epoch 00257: val_loss did not improve from 0.37686\n","Epoch 258/1000\n"," - 76s - loss: 0.4003 - accuracy: 0.8128 - val_loss: 0.6271 - val_accuracy: 0.7503\n","\n","Epoch 00258: val_loss did not improve from 0.37686\n","Epoch 259/1000\n"," - 76s - loss: 0.4001 - accuracy: 0.8146 - val_loss: 0.5441 - val_accuracy: 0.7516\n","\n","Epoch 00259: val_loss did not improve from 0.37686\n","Epoch 260/1000\n"," - 76s - loss: 0.4009 - accuracy: 0.8130 - val_loss: 0.5518 - val_accuracy: 0.7504\n","\n","Epoch 00260: val_loss did not improve from 0.37686\n","Epoch 261/1000\n"," - 76s - loss: 0.3988 - accuracy: 0.8132 - val_loss: 0.5305 - val_accuracy: 0.7490\n","\n","Epoch 00261: val_loss did not improve from 0.37686\n","Epoch 262/1000\n"," - 76s - loss: 0.3987 - accuracy: 0.8140 - val_loss: 0.5152 - val_accuracy: 0.7539\n","\n","Epoch 00262: val_loss did not improve from 0.37686\n","Epoch 263/1000\n"," - 76s - loss: 0.3988 - accuracy: 0.8139 - val_loss: 0.4482 - val_accuracy: 0.7514\n","\n","Epoch 00263: val_loss did not improve from 0.37686\n","Epoch 264/1000\n"," - 76s - loss: 0.3990 - accuracy: 0.8134 - val_loss: 0.6989 - val_accuracy: 0.7491\n","\n","Epoch 00264: val_loss did not improve from 0.37686\n","Epoch 265/1000\n"," - 76s - loss: 0.3963 - accuracy: 0.8154 - val_loss: 0.6447 - val_accuracy: 0.7508\n","\n","Epoch 00265: val_loss did not improve from 0.37686\n","Epoch 266/1000\n"," - 76s - loss: 0.3967 - accuracy: 0.8152 - val_loss: 0.5442 - val_accuracy: 0.7493\n","\n","Epoch 00266: val_loss did not improve from 0.37686\n","Epoch 267/1000\n"," - 76s - loss: 0.3966 - accuracy: 0.8159 - val_loss: 0.6738 - val_accuracy: 0.7493\n","\n","Epoch 00267: val_loss did not improve from 0.37686\n","Epoch 268/1000\n"," - 76s - loss: 0.3962 - accuracy: 0.8152 - val_loss: 0.7073 - val_accuracy: 0.7521\n","\n","Epoch 00268: val_loss did not improve from 0.37686\n","Epoch 269/1000\n"," - 77s - loss: 0.3963 - accuracy: 0.8155 - val_loss: 0.5601 - val_accuracy: 0.7526\n","\n","Epoch 00269: val_loss did not improve from 0.37686\n","Epoch 270/1000\n"," - 77s - loss: 0.3977 - accuracy: 0.8149 - val_loss: 0.4967 - val_accuracy: 0.7530\n","\n","Epoch 00270: val_loss did not improve from 0.37686\n","Epoch 271/1000\n"," - 77s - loss: 0.3958 - accuracy: 0.8154 - val_loss: 0.6173 - val_accuracy: 0.7528\n","\n","Epoch 00271: val_loss did not improve from 0.37686\n","Epoch 272/1000\n"," - 76s - loss: 0.3978 - accuracy: 0.8141 - val_loss: 0.5408 - val_accuracy: 0.7525\n","\n","Epoch 00272: val_loss did not improve from 0.37686\n","Epoch 273/1000\n"," - 76s - loss: 0.3981 - accuracy: 0.8146 - val_loss: 0.7273 - val_accuracy: 0.7487\n","\n","Epoch 00273: val_loss did not improve from 0.37686\n","Epoch 274/1000\n"," - 77s - loss: 0.3967 - accuracy: 0.8155 - val_loss: 0.5758 - val_accuracy: 0.7527\n","\n","Epoch 00274: val_loss did not improve from 0.37686\n","Epoch 275/1000\n"," - 77s - loss: 0.3946 - accuracy: 0.8170 - val_loss: 0.4916 - val_accuracy: 0.7521\n","\n","Epoch 00275: val_loss did not improve from 0.37686\n","Epoch 276/1000\n"," - 76s - loss: 0.3949 - accuracy: 0.8149 - val_loss: 0.4848 - val_accuracy: 0.7514\n","\n","Epoch 00276: val_loss did not improve from 0.37686\n","Epoch 277/1000\n"," - 76s - loss: 0.3963 - accuracy: 0.8153 - val_loss: 0.4889 - val_accuracy: 0.7527\n","\n","Epoch 00277: val_loss did not improve from 0.37686\n","Epoch 278/1000\n"," - 76s - loss: 0.3952 - accuracy: 0.8164 - val_loss: 0.7071 - val_accuracy: 0.7493\n","\n","Epoch 00278: val_loss did not improve from 0.37686\n","Epoch 279/1000\n"," - 76s - loss: 0.3943 - accuracy: 0.8167 - val_loss: 0.6021 - val_accuracy: 0.7494\n","\n","Epoch 00279: val_loss did not improve from 0.37686\n","Epoch 280/1000\n"," - 76s - loss: 0.3944 - accuracy: 0.8151 - val_loss: 0.6473 - val_accuracy: 0.7521\n","\n","Epoch 00280: val_loss did not improve from 0.37686\n","Epoch 281/1000\n"," - 76s - loss: 0.3953 - accuracy: 0.8159 - val_loss: 0.5075 - val_accuracy: 0.7482\n","\n","Epoch 00281: val_loss did not improve from 0.37686\n","Epoch 282/1000\n"," - 76s - loss: 0.3946 - accuracy: 0.8161 - val_loss: 0.5798 - val_accuracy: 0.7523\n","\n","Epoch 00282: val_loss did not improve from 0.37686\n","Epoch 283/1000\n"," - 76s - loss: 0.3923 - accuracy: 0.8172 - val_loss: 0.6272 - val_accuracy: 0.7499\n","\n","Epoch 00283: val_loss did not improve from 0.37686\n","Epoch 284/1000\n"," - 76s - loss: 0.3928 - accuracy: 0.8180 - val_loss: 0.4421 - val_accuracy: 0.7533\n","\n","Epoch 00284: val_loss did not improve from 0.37686\n","Epoch 285/1000\n"," - 76s - loss: 0.3925 - accuracy: 0.8168 - val_loss: 0.5283 - val_accuracy: 0.7532\n","\n","Epoch 00285: val_loss did not improve from 0.37686\n","Epoch 286/1000\n"," - 77s - loss: 0.3931 - accuracy: 0.8165 - val_loss: 0.5904 - val_accuracy: 0.7491\n","\n","Epoch 00286: val_loss did not improve from 0.37686\n","Epoch 287/1000\n"," - 77s - loss: 0.3938 - accuracy: 0.8173 - val_loss: 0.5815 - val_accuracy: 0.7527\n","\n","Epoch 00287: val_loss did not improve from 0.37686\n","Epoch 288/1000\n"," - 77s - loss: 0.3930 - accuracy: 0.8165 - val_loss: 0.5382 - val_accuracy: 0.7527\n","\n","Epoch 00288: val_loss did not improve from 0.37686\n","Epoch 289/1000\n"," - 76s - loss: 0.3922 - accuracy: 0.8172 - val_loss: 0.7257 - val_accuracy: 0.7517\n","\n","Epoch 00289: val_loss did not improve from 0.37686\n","Epoch 290/1000\n"," - 76s - loss: 0.3906 - accuracy: 0.8180 - val_loss: 0.5796 - val_accuracy: 0.7514\n","\n","Epoch 00290: val_loss did not improve from 0.37686\n","Epoch 291/1000\n"," - 76s - loss: 0.3925 - accuracy: 0.8167 - val_loss: 0.6960 - val_accuracy: 0.7522\n","\n","Epoch 00291: val_loss did not improve from 0.37686\n","Epoch 292/1000\n"," - 77s - loss: 0.3932 - accuracy: 0.8162 - val_loss: 0.6374 - val_accuracy: 0.7527\n","\n","Epoch 00292: val_loss did not improve from 0.37686\n","Epoch 293/1000\n"," - 76s - loss: 0.3928 - accuracy: 0.8173 - val_loss: 0.4981 - val_accuracy: 0.7526\n","\n","Epoch 00293: val_loss did not improve from 0.37686\n","Epoch 294/1000\n"," - 76s - loss: 0.3908 - accuracy: 0.8176 - val_loss: 0.5970 - val_accuracy: 0.7519\n","\n","Epoch 00294: val_loss did not improve from 0.37686\n","Epoch 295/1000\n"," - 76s - loss: 0.3901 - accuracy: 0.8195 - val_loss: 0.5556 - val_accuracy: 0.7510\n","\n","Epoch 00295: val_loss did not improve from 0.37686\n","Epoch 296/1000\n"," - 76s - loss: 0.3889 - accuracy: 0.8201 - val_loss: 0.5301 - val_accuracy: 0.7527\n","\n","Epoch 00296: val_loss did not improve from 0.37686\n","Epoch 297/1000\n"," - 76s - loss: 0.3895 - accuracy: 0.8184 - val_loss: 0.6203 - val_accuracy: 0.7513\n","\n","Epoch 00297: val_loss did not improve from 0.37686\n","Epoch 298/1000\n"," - 77s - loss: 0.3897 - accuracy: 0.8189 - val_loss: 0.6459 - val_accuracy: 0.7518\n","\n","Epoch 00298: val_loss did not improve from 0.37686\n","Epoch 299/1000\n"," - 76s - loss: 0.3895 - accuracy: 0.8191 - val_loss: 0.6908 - val_accuracy: 0.7526\n","\n","Epoch 00299: val_loss did not improve from 0.37686\n","Epoch 300/1000\n"," - 76s - loss: 0.3896 - accuracy: 0.8195 - val_loss: 0.5706 - val_accuracy: 0.7505\n","\n","Epoch 00300: val_loss did not improve from 0.37686\n","Epoch 301/1000\n"," - 76s - loss: 0.3893 - accuracy: 0.8193 - val_loss: 0.6011 - val_accuracy: 0.7519\n","\n","Epoch 00301: val_loss did not improve from 0.37686\n","Epoch 302/1000\n"," - 77s - loss: 0.3897 - accuracy: 0.8186 - val_loss: 0.6710 - val_accuracy: 0.7507\n","\n","Epoch 00302: val_loss did not improve from 0.37686\n","Epoch 303/1000\n"," - 76s - loss: 0.3895 - accuracy: 0.8179 - val_loss: 0.7607 - val_accuracy: 0.7492\n","\n","Epoch 00303: val_loss did not improve from 0.37686\n","Epoch 304/1000\n"," - 76s - loss: 0.3879 - accuracy: 0.8203 - val_loss: 0.5406 - val_accuracy: 0.7507\n","\n","Epoch 00304: val_loss did not improve from 0.37686\n","Epoch 305/1000\n"," - 76s - loss: 0.3884 - accuracy: 0.8200 - val_loss: 0.5502 - val_accuracy: 0.7535\n","\n","Epoch 00305: val_loss did not improve from 0.37686\n","Epoch 306/1000\n"," - 77s - loss: 0.3902 - accuracy: 0.8200 - val_loss: 0.7408 - val_accuracy: 0.7543\n","\n","Epoch 00306: val_loss did not improve from 0.37686\n","Epoch 307/1000\n"," - 76s - loss: 0.3871 - accuracy: 0.8202 - val_loss: 0.5022 - val_accuracy: 0.7507\n","\n","Epoch 00307: val_loss did not improve from 0.37686\n","Epoch 308/1000\n"," - 78s - loss: 0.3884 - accuracy: 0.8199 - val_loss: 0.5041 - val_accuracy: 0.7511\n","\n","Epoch 00308: val_loss did not improve from 0.37686\n","Epoch 309/1000\n"," - 76s - loss: 0.3879 - accuracy: 0.8207 - val_loss: 0.5385 - val_accuracy: 0.7524\n","\n","Epoch 00309: val_loss did not improve from 0.37686\n","Epoch 310/1000\n"," - 76s - loss: 0.3868 - accuracy: 0.8205 - val_loss: 0.4832 - val_accuracy: 0.7537\n","\n","Epoch 00310: val_loss did not improve from 0.37686\n","Epoch 311/1000\n"," - 76s - loss: 0.3873 - accuracy: 0.8202 - val_loss: 0.7455 - val_accuracy: 0.7506\n","\n","Epoch 00311: val_loss did not improve from 0.37686\n","Epoch 312/1000\n"," - 77s - loss: 0.3873 - accuracy: 0.8202 - val_loss: 0.4879 - val_accuracy: 0.7531\n","\n","Epoch 00312: val_loss did not improve from 0.37686\n","Epoch 313/1000\n"," - 76s - loss: 0.3861 - accuracy: 0.8202 - val_loss: 0.4404 - val_accuracy: 0.7523\n","\n","Epoch 00313: val_loss did not improve from 0.37686\n","Epoch 314/1000\n"," - 76s - loss: 0.3848 - accuracy: 0.8222 - val_loss: 0.6660 - val_accuracy: 0.7518\n","\n","Epoch 00314: val_loss did not improve from 0.37686\n","Epoch 315/1000\n"," - 76s - loss: 0.3872 - accuracy: 0.8205 - val_loss: 0.5426 - val_accuracy: 0.7552\n","\n","Epoch 00315: val_loss did not improve from 0.37686\n","Epoch 316/1000\n"," - 76s - loss: 0.3854 - accuracy: 0.8219 - val_loss: 0.5132 - val_accuracy: 0.7533\n","\n","Epoch 00316: val_loss did not improve from 0.37686\n","Epoch 317/1000\n"," - 77s - loss: 0.3853 - accuracy: 0.8222 - val_loss: 0.5038 - val_accuracy: 0.7537\n","\n","Epoch 00317: val_loss did not improve from 0.37686\n","Epoch 318/1000\n"," - 77s - loss: 0.3849 - accuracy: 0.8226 - val_loss: 0.6052 - val_accuracy: 0.7500\n","\n","Epoch 00318: val_loss did not improve from 0.37686\n","Epoch 319/1000\n"," - 76s - loss: 0.3844 - accuracy: 0.8233 - val_loss: 0.7917 - val_accuracy: 0.7519\n","\n","Epoch 00319: val_loss did not improve from 0.37686\n","Epoch 320/1000\n"," - 76s - loss: 0.3838 - accuracy: 0.8226 - val_loss: 0.5384 - val_accuracy: 0.7529\n","\n","Epoch 00320: val_loss did not improve from 0.37686\n","Epoch 321/1000\n"," - 76s - loss: 0.3844 - accuracy: 0.8218 - val_loss: 0.6187 - val_accuracy: 0.7532\n","\n","Epoch 00321: val_loss did not improve from 0.37686\n","Epoch 322/1000\n"," - 77s - loss: 0.3849 - accuracy: 0.8212 - val_loss: 0.5516 - val_accuracy: 0.7529\n","\n","Epoch 00322: val_loss did not improve from 0.37686\n","Epoch 323/1000\n"," - 76s - loss: 0.3838 - accuracy: 0.8228 - val_loss: 0.7215 - val_accuracy: 0.7504\n","\n","Epoch 00323: val_loss did not improve from 0.37686\n","Epoch 324/1000\n"," - 77s - loss: 0.3838 - accuracy: 0.8227 - val_loss: 0.5717 - val_accuracy: 0.7529\n","\n","Epoch 00324: val_loss did not improve from 0.37686\n","Epoch 325/1000\n"," - 76s - loss: 0.3844 - accuracy: 0.8220 - val_loss: 0.4949 - val_accuracy: 0.7541\n","\n","Epoch 00325: val_loss did not improve from 0.37686\n","Epoch 326/1000\n"," - 76s - loss: 0.3836 - accuracy: 0.8231 - val_loss: 0.6098 - val_accuracy: 0.7549\n","\n","Epoch 00326: val_loss did not improve from 0.37686\n","Epoch 327/1000\n"," - 76s - loss: 0.3829 - accuracy: 0.8232 - val_loss: 0.4610 - val_accuracy: 0.7518\n","\n","Epoch 00327: val_loss did not improve from 0.37686\n","Epoch 328/1000\n"," - 76s - loss: 0.3842 - accuracy: 0.8232 - val_loss: 0.6715 - val_accuracy: 0.7536\n","\n","Epoch 00328: val_loss did not improve from 0.37686\n","Epoch 329/1000\n"," - 76s - loss: 0.3824 - accuracy: 0.8236 - val_loss: 0.5827 - val_accuracy: 0.7543\n","\n","Epoch 00329: val_loss did not improve from 0.37686\n","Epoch 330/1000\n"," - 76s - loss: 0.3808 - accuracy: 0.8241 - val_loss: 0.6756 - val_accuracy: 0.7522\n","\n","Epoch 00330: val_loss did not improve from 0.37686\n","Epoch 331/1000\n"," - 77s - loss: 0.3817 - accuracy: 0.8234 - val_loss: 0.5926 - val_accuracy: 0.7554\n","\n","Epoch 00331: val_loss did not improve from 0.37686\n","Epoch 332/1000\n"," - 77s - loss: 0.3820 - accuracy: 0.8238 - val_loss: 0.5910 - val_accuracy: 0.7545\n","\n","Epoch 00332: val_loss did not improve from 0.37686\n","Epoch 333/1000\n"," - 76s - loss: 0.3804 - accuracy: 0.8251 - val_loss: 0.7654 - val_accuracy: 0.7534\n","\n","Epoch 00333: val_loss did not improve from 0.37686\n","Epoch 334/1000\n"," - 76s - loss: 0.3824 - accuracy: 0.8232 - val_loss: 0.4947 - val_accuracy: 0.7543\n","\n","Epoch 00334: val_loss did not improve from 0.37686\n","Epoch 335/1000\n"," - 76s - loss: 0.3822 - accuracy: 0.8235 - val_loss: 0.6082 - val_accuracy: 0.7517\n","\n","Epoch 00335: val_loss did not improve from 0.37686\n","Epoch 336/1000\n"," - 77s - loss: 0.3817 - accuracy: 0.8237 - val_loss: 0.6822 - val_accuracy: 0.7554\n","\n","Epoch 00336: val_loss did not improve from 0.37686\n","Epoch 337/1000\n"," - 76s - loss: 0.3807 - accuracy: 0.8242 - val_loss: 0.4694 - val_accuracy: 0.7549\n","\n","Epoch 00337: val_loss did not improve from 0.37686\n","Epoch 338/1000\n"," - 77s - loss: 0.3798 - accuracy: 0.8254 - val_loss: 0.5980 - val_accuracy: 0.7544\n","\n","Epoch 00338: val_loss did not improve from 0.37686\n","Epoch 339/1000\n"," - 77s - loss: 0.3792 - accuracy: 0.8254 - val_loss: 0.5986 - val_accuracy: 0.7513\n","\n","Epoch 00339: val_loss did not improve from 0.37686\n","Epoch 340/1000\n"," - 76s - loss: 0.3811 - accuracy: 0.8237 - val_loss: 0.6977 - val_accuracy: 0.7550\n","\n","Epoch 00340: val_loss did not improve from 0.37686\n","Epoch 341/1000\n"," - 76s - loss: 0.3775 - accuracy: 0.8260 - val_loss: 0.4763 - val_accuracy: 0.7521\n","\n","Epoch 00341: val_loss did not improve from 0.37686\n","Epoch 342/1000\n"," - 77s - loss: 0.3783 - accuracy: 0.8260 - val_loss: 0.7458 - val_accuracy: 0.7547\n","\n","Epoch 00342: val_loss did not improve from 0.37686\n","Epoch 343/1000\n"," - 76s - loss: 0.3779 - accuracy: 0.8267 - val_loss: 0.4798 - val_accuracy: 0.7498\n","\n","Epoch 00343: val_loss did not improve from 0.37686\n","Epoch 344/1000\n"," - 76s - loss: 0.3791 - accuracy: 0.8248 - val_loss: 0.6093 - val_accuracy: 0.7551\n","\n","Epoch 00344: val_loss did not improve from 0.37686\n","Epoch 345/1000\n"," - 76s - loss: 0.3792 - accuracy: 0.8259 - val_loss: 0.4651 - val_accuracy: 0.7540\n","\n","Epoch 00345: val_loss did not improve from 0.37686\n","Epoch 346/1000\n"," - 76s - loss: 0.3798 - accuracy: 0.8250 - val_loss: 0.5649 - val_accuracy: 0.7524\n","\n","Epoch 00346: val_loss did not improve from 0.37686\n","Epoch 347/1000\n"," - 76s - loss: 0.3775 - accuracy: 0.8253 - val_loss: 0.5670 - val_accuracy: 0.7524\n","\n","Epoch 00347: val_loss did not improve from 0.37686\n","Epoch 348/1000\n"," - 76s - loss: 0.3782 - accuracy: 0.8256 - val_loss: 0.5513 - val_accuracy: 0.7546\n","\n","Epoch 00348: val_loss did not improve from 0.37686\n","Epoch 349/1000\n"," - 76s - loss: 0.3788 - accuracy: 0.8248 - val_loss: 0.6173 - val_accuracy: 0.7555\n","\n","Epoch 00349: val_loss did not improve from 0.37686\n","Epoch 350/1000\n"," - 76s - loss: 0.3764 - accuracy: 0.8270 - val_loss: 0.4180 - val_accuracy: 0.7551\n","\n","Epoch 00350: val_loss did not improve from 0.37686\n","Epoch 351/1000\n"," - 77s - loss: 0.3778 - accuracy: 0.8258 - val_loss: 0.6250 - val_accuracy: 0.7550\n","\n","Epoch 00351: val_loss did not improve from 0.37686\n","Epoch 352/1000\n"," - 77s - loss: 0.3760 - accuracy: 0.8270 - val_loss: 0.7543 - val_accuracy: 0.7555\n","\n","Epoch 00352: val_loss did not improve from 0.37686\n","Epoch 353/1000\n"," - 76s - loss: 0.3767 - accuracy: 0.8272 - val_loss: 0.6349 - val_accuracy: 0.7529\n","\n","Epoch 00353: val_loss did not improve from 0.37686\n","Epoch 354/1000\n"," - 76s - loss: 0.3764 - accuracy: 0.8267 - val_loss: 0.7557 - val_accuracy: 0.7530\n","\n","Epoch 00354: val_loss did not improve from 0.37686\n","Epoch 355/1000\n"," - 77s - loss: 0.3767 - accuracy: 0.8269 - val_loss: 0.6675 - val_accuracy: 0.7535\n","\n","Epoch 00355: val_loss did not improve from 0.37686\n","Epoch 356/1000\n"," - 76s - loss: 0.3761 - accuracy: 0.8268 - val_loss: 0.7454 - val_accuracy: 0.7555\n","\n","Epoch 00356: val_loss did not improve from 0.37686\n","Epoch 357/1000\n"," - 77s - loss: 0.3762 - accuracy: 0.8271 - val_loss: 0.4665 - val_accuracy: 0.7485\n","\n","Epoch 00357: val_loss did not improve from 0.37686\n","Epoch 358/1000\n"," - 76s - loss: 0.3742 - accuracy: 0.8287 - val_loss: 0.4097 - val_accuracy: 0.7551\n","\n","Epoch 00358: val_loss did not improve from 0.37686\n","Epoch 359/1000\n"," - 77s - loss: 0.3759 - accuracy: 0.8266 - val_loss: 0.6057 - val_accuracy: 0.7527\n","\n","Epoch 00359: val_loss did not improve from 0.37686\n","Epoch 360/1000\n"," - 76s - loss: 0.3757 - accuracy: 0.8269 - val_loss: 0.4685 - val_accuracy: 0.7531\n","\n","Epoch 00360: val_loss did not improve from 0.37686\n","Epoch 361/1000\n"," - 76s - loss: 0.3756 - accuracy: 0.8270 - val_loss: 0.6602 - val_accuracy: 0.7541\n","\n","Epoch 00361: val_loss did not improve from 0.37686\n","Epoch 362/1000\n"," - 76s - loss: 0.3740 - accuracy: 0.8279 - val_loss: 0.4709 - val_accuracy: 0.7525\n","\n","Epoch 00362: val_loss did not improve from 0.37686\n","Epoch 363/1000\n"," - 77s - loss: 0.3735 - accuracy: 0.8285 - val_loss: 0.5702 - val_accuracy: 0.7550\n","\n","Epoch 00363: val_loss did not improve from 0.37686\n","Epoch 364/1000\n"," - 76s - loss: 0.3752 - accuracy: 0.8277 - val_loss: 0.8177 - val_accuracy: 0.7535\n","\n","Epoch 00364: val_loss did not improve from 0.37686\n","Epoch 365/1000\n"," - 76s - loss: 0.3743 - accuracy: 0.8277 - val_loss: 0.6641 - val_accuracy: 0.7531\n","\n","Epoch 00365: val_loss did not improve from 0.37686\n","Epoch 366/1000\n"," - 76s - loss: 0.3749 - accuracy: 0.8271 - val_loss: 0.5288 - val_accuracy: 0.7570\n","\n","Epoch 00366: val_loss did not improve from 0.37686\n","Epoch 367/1000\n"," - 77s - loss: 0.3750 - accuracy: 0.8276 - val_loss: 0.5189 - val_accuracy: 0.7551\n","\n","Epoch 00367: val_loss did not improve from 0.37686\n","Epoch 368/1000\n"," - 77s - loss: 0.3754 - accuracy: 0.8264 - val_loss: 0.6834 - val_accuracy: 0.7555\n","\n","Epoch 00368: val_loss did not improve from 0.37686\n","Epoch 369/1000\n"," - 76s - loss: 0.3726 - accuracy: 0.8290 - val_loss: 0.5099 - val_accuracy: 0.7543\n","\n","Epoch 00369: val_loss did not improve from 0.37686\n","Epoch 370/1000\n"," - 77s - loss: 0.3735 - accuracy: 0.8286 - val_loss: 0.4356 - val_accuracy: 0.7565\n","\n","Epoch 00370: val_loss did not improve from 0.37686\n","Epoch 371/1000\n"," - 77s - loss: 0.3739 - accuracy: 0.8288 - val_loss: 0.5109 - val_accuracy: 0.7573\n","\n","Epoch 00371: val_loss did not improve from 0.37686\n","Epoch 372/1000\n"," - 76s - loss: 0.3734 - accuracy: 0.8289 - val_loss: 0.5708 - val_accuracy: 0.7543\n","\n","Epoch 00372: val_loss did not improve from 0.37686\n","Epoch 373/1000\n"," - 77s - loss: 0.3721 - accuracy: 0.8299 - val_loss: 0.5413 - val_accuracy: 0.7562\n","\n","Epoch 00373: val_loss did not improve from 0.37686\n","Epoch 374/1000\n"," - 76s - loss: 0.3713 - accuracy: 0.8304 - val_loss: 0.5125 - val_accuracy: 0.7538\n","\n","Epoch 00374: val_loss did not improve from 0.37686\n","Epoch 375/1000\n"," - 76s - loss: 0.3724 - accuracy: 0.8291 - val_loss: 0.6338 - val_accuracy: 0.7548\n","\n","Epoch 00375: val_loss did not improve from 0.37686\n","Epoch 376/1000\n"," - 76s - loss: 0.3733 - accuracy: 0.8286 - val_loss: 0.5816 - val_accuracy: 0.7550\n","\n","Epoch 00376: val_loss did not improve from 0.37686\n","Epoch 377/1000\n"," - 77s - loss: 0.3715 - accuracy: 0.8305 - val_loss: 0.6486 - val_accuracy: 0.7555\n","\n","Epoch 00377: val_loss did not improve from 0.37686\n","Epoch 378/1000\n"," - 76s - loss: 0.3719 - accuracy: 0.8290 - val_loss: 0.7099 - val_accuracy: 0.7521\n","\n","Epoch 00378: val_loss did not improve from 0.37686\n","Epoch 379/1000\n"," - 76s - loss: 0.3720 - accuracy: 0.8289 - val_loss: 0.5827 - val_accuracy: 0.7555\n","\n","Epoch 00379: val_loss did not improve from 0.37686\n","Epoch 380/1000\n"," - 77s - loss: 0.3710 - accuracy: 0.8295 - val_loss: 0.5278 - val_accuracy: 0.7540\n","\n","Epoch 00380: val_loss did not improve from 0.37686\n","Epoch 381/1000\n"," - 76s - loss: 0.3700 - accuracy: 0.8301 - val_loss: 0.7657 - val_accuracy: 0.7550\n","\n","Epoch 00381: val_loss did not improve from 0.37686\n","Epoch 382/1000\n"," - 77s - loss: 0.3701 - accuracy: 0.8316 - val_loss: 0.4819 - val_accuracy: 0.7519\n","\n","Epoch 00382: val_loss did not improve from 0.37686\n","Epoch 383/1000\n"," - 76s - loss: 0.3721 - accuracy: 0.8290 - val_loss: 0.6082 - val_accuracy: 0.7525\n","\n","Epoch 00383: val_loss did not improve from 0.37686\n","Epoch 384/1000\n"," - 76s - loss: 0.3691 - accuracy: 0.8309 - val_loss: 0.6347 - val_accuracy: 0.7557\n","\n","Epoch 00384: val_loss did not improve from 0.37686\n","Epoch 385/1000\n"," - 76s - loss: 0.3700 - accuracy: 0.8301 - val_loss: 0.4972 - val_accuracy: 0.7551\n","\n","Epoch 00385: val_loss did not improve from 0.37686\n","Epoch 386/1000\n"," - 76s - loss: 0.3698 - accuracy: 0.8307 - val_loss: 0.8163 - val_accuracy: 0.7550\n","\n","Epoch 00386: val_loss did not improve from 0.37686\n","Epoch 387/1000\n"," - 77s - loss: 0.3713 - accuracy: 0.8290 - val_loss: 0.5658 - val_accuracy: 0.7568\n","\n","Epoch 00387: val_loss did not improve from 0.37686\n","Epoch 388/1000\n"," - 77s - loss: 0.3698 - accuracy: 0.8317 - val_loss: 0.7288 - val_accuracy: 0.7556\n","\n","Epoch 00388: val_loss did not improve from 0.37686\n","Epoch 389/1000\n"," - 76s - loss: 0.3690 - accuracy: 0.8317 - val_loss: 0.6826 - val_accuracy: 0.7578\n","\n","Epoch 00389: val_loss did not improve from 0.37686\n","Epoch 390/1000\n"," - 76s - loss: 0.3673 - accuracy: 0.8320 - val_loss: 0.6938 - val_accuracy: 0.7555\n","\n","Epoch 00390: val_loss did not improve from 0.37686\n","Epoch 391/1000\n"," - 76s - loss: 0.3678 - accuracy: 0.8318 - val_loss: 0.5836 - val_accuracy: 0.7528\n","\n","Epoch 00391: val_loss did not improve from 0.37686\n","Epoch 392/1000\n"," - 76s - loss: 0.3690 - accuracy: 0.8312 - val_loss: 0.5334 - val_accuracy: 0.7563\n","\n","Epoch 00392: val_loss did not improve from 0.37686\n","Epoch 393/1000\n"," - 77s - loss: 0.3688 - accuracy: 0.8304 - val_loss: 0.5602 - val_accuracy: 0.7555\n","\n","Epoch 00393: val_loss did not improve from 0.37686\n","Epoch 394/1000\n"," - 77s - loss: 0.3673 - accuracy: 0.8318 - val_loss: 0.6748 - val_accuracy: 0.7559\n","\n","Epoch 00394: val_loss did not improve from 0.37686\n","Epoch 395/1000\n"," - 77s - loss: 0.3677 - accuracy: 0.8314 - val_loss: 0.5401 - val_accuracy: 0.7578\n","\n","Epoch 00395: val_loss did not improve from 0.37686\n","Epoch 396/1000\n"," - 77s - loss: 0.3674 - accuracy: 0.8314 - val_loss: 0.5395 - val_accuracy: 0.7536\n","\n","Epoch 00396: val_loss did not improve from 0.37686\n","Epoch 397/1000\n"," - 77s - loss: 0.3659 - accuracy: 0.8331 - val_loss: 0.7340 - val_accuracy: 0.7534\n","\n","Epoch 00397: val_loss did not improve from 0.37686\n","Epoch 398/1000\n"," - 77s - loss: 0.3665 - accuracy: 0.8319 - val_loss: 0.5713 - val_accuracy: 0.7562\n","\n","Epoch 00398: val_loss did not improve from 0.37686\n","Epoch 399/1000\n"," - 76s - loss: 0.3663 - accuracy: 0.8314 - val_loss: 0.4590 - val_accuracy: 0.7522\n","\n","Epoch 00399: val_loss did not improve from 0.37686\n","Epoch 400/1000\n"," - 77s - loss: 0.3667 - accuracy: 0.8317 - val_loss: 0.6173 - val_accuracy: 0.7532\n","\n","Epoch 00400: val_loss did not improve from 0.37686\n","Epoch 401/1000\n"," - 76s - loss: 0.3648 - accuracy: 0.8335 - val_loss: 0.5612 - val_accuracy: 0.7564\n","\n","Epoch 00401: val_loss did not improve from 0.37686\n","Epoch 402/1000\n"," - 76s - loss: 0.3665 - accuracy: 0.8328 - val_loss: 0.6106 - val_accuracy: 0.7563\n","\n","Epoch 00402: val_loss did not improve from 0.37686\n","Epoch 403/1000\n"," - 76s - loss: 0.3660 - accuracy: 0.8335 - val_loss: 0.6441 - val_accuracy: 0.7540\n","\n","Epoch 00403: val_loss did not improve from 0.37686\n","Epoch 404/1000\n"," - 77s - loss: 0.3659 - accuracy: 0.8327 - val_loss: 0.4580 - val_accuracy: 0.7578\n","\n","Epoch 00404: val_loss did not improve from 0.37686\n","Epoch 405/1000\n"," - 77s - loss: 0.3659 - accuracy: 0.8321 - val_loss: 0.6751 - val_accuracy: 0.7571\n","\n","Epoch 00405: val_loss did not improve from 0.37686\n","Epoch 406/1000\n"," - 77s - loss: 0.3680 - accuracy: 0.8327 - val_loss: 0.6493 - val_accuracy: 0.7556\n","\n","Epoch 00406: val_loss did not improve from 0.37686\n","Epoch 407/1000\n"," - 77s - loss: 0.3647 - accuracy: 0.8338 - val_loss: 0.4759 - val_accuracy: 0.7584\n","\n","Epoch 00407: val_loss did not improve from 0.37686\n","Epoch 408/1000\n"," - 77s - loss: 0.3651 - accuracy: 0.8336 - val_loss: 0.4610 - val_accuracy: 0.7542\n","\n","Epoch 00408: val_loss did not improve from 0.37686\n","Epoch 409/1000\n"," - 77s - loss: 0.3642 - accuracy: 0.8336 - val_loss: 0.5625 - val_accuracy: 0.7522\n","\n","Epoch 00409: val_loss did not improve from 0.37686\n","Epoch 410/1000\n"," - 77s - loss: 0.3651 - accuracy: 0.8330 - val_loss: 0.5099 - val_accuracy: 0.7558\n","\n","Epoch 00410: val_loss did not improve from 0.37686\n","Epoch 411/1000\n"," - 77s - loss: 0.3654 - accuracy: 0.8325 - val_loss: 0.6412 - val_accuracy: 0.7577\n","\n","Epoch 00411: val_loss did not improve from 0.37686\n","Epoch 412/1000\n"," - 77s - loss: 0.3632 - accuracy: 0.8339 - val_loss: 0.5589 - val_accuracy: 0.7576\n","\n","Epoch 00412: val_loss did not improve from 0.37686\n","Epoch 413/1000\n"," - 76s - loss: 0.3649 - accuracy: 0.8335 - val_loss: 0.6009 - val_accuracy: 0.7562\n","\n","Epoch 00413: val_loss did not improve from 0.37686\n","Epoch 414/1000\n"," - 76s - loss: 0.3649 - accuracy: 0.8335 - val_loss: 0.7030 - val_accuracy: 0.7574\n","\n","Epoch 00414: val_loss did not improve from 0.37686\n","Epoch 415/1000\n"," - 76s - loss: 0.3619 - accuracy: 0.8349 - val_loss: 0.5362 - val_accuracy: 0.7542\n","\n","Epoch 00415: val_loss did not improve from 0.37686\n","Epoch 416/1000\n"," - 77s - loss: 0.3645 - accuracy: 0.8327 - val_loss: 0.6007 - val_accuracy: 0.7554\n","\n","Epoch 00416: val_loss did not improve from 0.37686\n","Epoch 417/1000\n"," - 76s - loss: 0.3635 - accuracy: 0.8346 - val_loss: 0.5412 - val_accuracy: 0.7568\n","\n","Epoch 00417: val_loss did not improve from 0.37686\n","Epoch 418/1000\n"," - 77s - loss: 0.3622 - accuracy: 0.8352 - val_loss: 0.4925 - val_accuracy: 0.7565\n","\n","Epoch 00418: val_loss did not improve from 0.37686\n","Epoch 419/1000\n"," - 77s - loss: 0.3640 - accuracy: 0.8338 - val_loss: 0.8583 - val_accuracy: 0.7506\n","\n","Epoch 00419: val_loss did not improve from 0.37686\n","Epoch 420/1000\n"," - 77s - loss: 0.3622 - accuracy: 0.8359 - val_loss: 0.6886 - val_accuracy: 0.7572\n","\n","Epoch 00420: val_loss did not improve from 0.37686\n","Epoch 421/1000\n"," - 76s - loss: 0.3620 - accuracy: 0.8358 - val_loss: 0.4967 - val_accuracy: 0.7561\n","\n","Epoch 00421: val_loss did not improve from 0.37686\n","Epoch 422/1000\n"," - 77s - loss: 0.3616 - accuracy: 0.8353 - val_loss: 0.5249 - val_accuracy: 0.7550\n","\n","Epoch 00422: val_loss did not improve from 0.37686\n","Epoch 423/1000\n"," - 77s - loss: 0.3624 - accuracy: 0.8346 - val_loss: 0.5588 - val_accuracy: 0.7567\n","\n","Epoch 00423: val_loss did not improve from 0.37686\n","Epoch 424/1000\n"," - 77s - loss: 0.3612 - accuracy: 0.8364 - val_loss: 0.6935 - val_accuracy: 0.7560\n","\n","Epoch 00424: val_loss did not improve from 0.37686\n","Epoch 425/1000\n"," - 76s - loss: 0.3611 - accuracy: 0.8351 - val_loss: 0.4614 - val_accuracy: 0.7564\n","\n","Epoch 00425: val_loss did not improve from 0.37686\n","Epoch 426/1000\n"," - 77s - loss: 0.3608 - accuracy: 0.8362 - val_loss: 0.6306 - val_accuracy: 0.7561\n","\n","Epoch 00426: val_loss did not improve from 0.37686\n","Epoch 427/1000\n"," - 76s - loss: 0.3615 - accuracy: 0.8358 - val_loss: 0.7040 - val_accuracy: 0.7579\n","\n","Epoch 00427: val_loss did not improve from 0.37686\n","Epoch 428/1000\n"," - 76s - loss: 0.3609 - accuracy: 0.8354 - val_loss: 0.6078 - val_accuracy: 0.7537\n","\n","Epoch 00428: val_loss did not improve from 0.37686\n","Epoch 429/1000\n"," - 76s - loss: 0.3606 - accuracy: 0.8368 - val_loss: 0.7262 - val_accuracy: 0.7584\n","\n","Epoch 00429: val_loss did not improve from 0.37686\n","Epoch 430/1000\n"," - 77s - loss: 0.3610 - accuracy: 0.8363 - val_loss: 0.4546 - val_accuracy: 0.7560\n","\n","Epoch 00430: val_loss did not improve from 0.37686\n","Epoch 431/1000\n"," - 76s - loss: 0.3582 - accuracy: 0.8374 - val_loss: 0.4918 - val_accuracy: 0.7538\n","\n","Epoch 00431: val_loss did not improve from 0.37686\n","Epoch 432/1000\n"," - 77s - loss: 0.3593 - accuracy: 0.8366 - val_loss: 0.6723 - val_accuracy: 0.7559\n","\n","Epoch 00432: val_loss did not improve from 0.37686\n","Epoch 433/1000\n"," - 76s - loss: 0.3617 - accuracy: 0.8349 - val_loss: 0.6610 - val_accuracy: 0.7573\n","\n","Epoch 00433: val_loss did not improve from 0.37686\n","Epoch 434/1000\n"," - 76s - loss: 0.3595 - accuracy: 0.8370 - val_loss: 0.5918 - val_accuracy: 0.7552\n","\n","Epoch 00434: val_loss did not improve from 0.37686\n","Epoch 435/1000\n"," - 76s - loss: 0.3583 - accuracy: 0.8368 - val_loss: 0.6388 - val_accuracy: 0.7564\n","\n","Epoch 00435: val_loss did not improve from 0.37686\n","Epoch 436/1000\n"," - 77s - loss: 0.3591 - accuracy: 0.8366 - val_loss: 0.6542 - val_accuracy: 0.7560\n","\n","Epoch 00436: val_loss did not improve from 0.37686\n","Epoch 437/1000\n"," - 76s - loss: 0.3578 - accuracy: 0.8381 - val_loss: 0.5510 - val_accuracy: 0.7590\n","\n","Epoch 00437: val_loss did not improve from 0.37686\n","Epoch 438/1000\n"," - 77s - loss: 0.3589 - accuracy: 0.8371 - val_loss: 0.5745 - val_accuracy: 0.7574\n","\n","Epoch 00438: val_loss did not improve from 0.37686\n","Epoch 439/1000\n"," - 77s - loss: 0.3571 - accuracy: 0.8378 - val_loss: 0.5703 - val_accuracy: 0.7583\n","\n","Epoch 00439: val_loss did not improve from 0.37686\n","Epoch 440/1000\n"," - 77s - loss: 0.3591 - accuracy: 0.8372 - val_loss: 0.7395 - val_accuracy: 0.7589\n","\n","Epoch 00440: val_loss did not improve from 0.37686\n","Epoch 441/1000\n"," - 77s - loss: 0.3579 - accuracy: 0.8373 - val_loss: 0.6781 - val_accuracy: 0.7563\n","\n","Epoch 00441: val_loss did not improve from 0.37686\n","Epoch 442/1000\n"," - 76s - loss: 0.3575 - accuracy: 0.8380 - val_loss: 0.6240 - val_accuracy: 0.7576\n","\n","Epoch 00442: val_loss did not improve from 0.37686\n","Epoch 443/1000\n"," - 76s - loss: 0.3557 - accuracy: 0.8380 - val_loss: 0.6738 - val_accuracy: 0.7541\n","\n","Epoch 00443: val_loss did not improve from 0.37686\n","Epoch 444/1000\n"," - 77s - loss: 0.3574 - accuracy: 0.8373 - val_loss: 0.6403 - val_accuracy: 0.7572\n","\n","Epoch 00444: val_loss did not improve from 0.37686\n","Epoch 445/1000\n"," - 77s - loss: 0.3582 - accuracy: 0.8373 - val_loss: 0.4443 - val_accuracy: 0.7552\n","\n","Epoch 00445: val_loss did not improve from 0.37686\n","Epoch 446/1000\n"," - 77s - loss: 0.3564 - accuracy: 0.8384 - val_loss: 0.5807 - val_accuracy: 0.7568\n","\n","Epoch 00446: val_loss did not improve from 0.37686\n","Epoch 447/1000\n"," - 77s - loss: 0.3577 - accuracy: 0.8373 - val_loss: 0.5794 - val_accuracy: 0.7567\n","\n","Epoch 00447: val_loss did not improve from 0.37686\n","Epoch 448/1000\n"," - 76s - loss: 0.3565 - accuracy: 0.8384 - val_loss: 0.6358 - val_accuracy: 0.7567\n","\n","Epoch 00448: val_loss did not improve from 0.37686\n","Epoch 449/1000\n"," - 77s - loss: 0.3573 - accuracy: 0.8377 - val_loss: 0.4443 - val_accuracy: 0.7557\n","\n","Epoch 00449: val_loss did not improve from 0.37686\n","Epoch 450/1000\n"," - 76s - loss: 0.3556 - accuracy: 0.8382 - val_loss: 0.7970 - val_accuracy: 0.7590\n","\n","Epoch 00450: val_loss did not improve from 0.37686\n","Epoch 451/1000\n"," - 76s - loss: 0.3545 - accuracy: 0.8386 - val_loss: 0.5288 - val_accuracy: 0.7574\n","\n","Epoch 00451: val_loss did not improve from 0.37686\n","Epoch 452/1000\n"," - 76s - loss: 0.3555 - accuracy: 0.8384 - val_loss: 0.6788 - val_accuracy: 0.7576\n","\n","Epoch 00452: val_loss did not improve from 0.37686\n","Epoch 453/1000\n"," - 76s - loss: 0.3557 - accuracy: 0.8382 - val_loss: 0.5250 - val_accuracy: 0.7566\n","\n","Epoch 00453: val_loss did not improve from 0.37686\n","Epoch 454/1000\n"," - 77s - loss: 0.3536 - accuracy: 0.8411 - val_loss: 0.6066 - val_accuracy: 0.7573\n","\n","Epoch 00454: val_loss did not improve from 0.37686\n","Epoch 455/1000\n"," - 76s - loss: 0.3559 - accuracy: 0.8384 - val_loss: 0.5854 - val_accuracy: 0.7573\n","\n","Epoch 00455: val_loss did not improve from 0.37686\n","Epoch 456/1000\n"," - 77s - loss: 0.3560 - accuracy: 0.8383 - val_loss: 0.5828 - val_accuracy: 0.7597\n","\n","Epoch 00456: val_loss did not improve from 0.37686\n","Epoch 457/1000\n"," - 76s - loss: 0.3549 - accuracy: 0.8391 - val_loss: 0.5322 - val_accuracy: 0.7574\n","\n","Epoch 00457: val_loss did not improve from 0.37686\n","Epoch 458/1000\n"," - 77s - loss: 0.3541 - accuracy: 0.8396 - val_loss: 0.7446 - val_accuracy: 0.7573\n","\n","Epoch 00458: val_loss did not improve from 0.37686\n","Epoch 459/1000\n"," - 76s - loss: 0.3530 - accuracy: 0.8395 - val_loss: 0.5495 - val_accuracy: 0.7576\n","\n","Epoch 00459: val_loss did not improve from 0.37686\n","Epoch 460/1000\n"," - 76s - loss: 0.3550 - accuracy: 0.8389 - val_loss: 0.4531 - val_accuracy: 0.7593\n","\n","Epoch 00460: val_loss did not improve from 0.37686\n","Epoch 461/1000\n"," - 77s - loss: 0.3554 - accuracy: 0.8380 - val_loss: 0.4935 - val_accuracy: 0.7565\n","\n","Epoch 00461: val_loss did not improve from 0.37686\n","Epoch 462/1000\n"," - 77s - loss: 0.3538 - accuracy: 0.8389 - val_loss: 0.5826 - val_accuracy: 0.7584\n","\n","Epoch 00462: val_loss did not improve from 0.37686\n","Epoch 463/1000\n"," - 77s - loss: 0.3527 - accuracy: 0.8400 - val_loss: 0.6758 - val_accuracy: 0.7574\n","\n","Epoch 00463: val_loss did not improve from 0.37686\n","Epoch 464/1000\n"," - 77s - loss: 0.3525 - accuracy: 0.8404 - val_loss: 0.6484 - val_accuracy: 0.7569\n","\n","Epoch 00464: val_loss did not improve from 0.37686\n","Epoch 465/1000\n"," - 77s - loss: 0.3536 - accuracy: 0.8391 - val_loss: 0.6425 - val_accuracy: 0.7593\n","\n","Epoch 00465: val_loss did not improve from 0.37686\n","Epoch 466/1000\n"," - 76s - loss: 0.3538 - accuracy: 0.8404 - val_loss: 0.6066 - val_accuracy: 0.7595\n","\n","Epoch 00466: val_loss did not improve from 0.37686\n","Epoch 467/1000\n"," - 76s - loss: 0.3524 - accuracy: 0.8406 - val_loss: 0.4986 - val_accuracy: 0.7591\n","\n","Epoch 00467: val_loss did not improve from 0.37686\n","Epoch 468/1000\n"," - 76s - loss: 0.3517 - accuracy: 0.8398 - val_loss: 0.5282 - val_accuracy: 0.7587\n","\n","Epoch 00468: val_loss did not improve from 0.37686\n","Epoch 469/1000\n"," - 76s - loss: 0.3528 - accuracy: 0.8403 - val_loss: 0.5821 - val_accuracy: 0.7574\n","\n","Epoch 00469: val_loss did not improve from 0.37686\n","Epoch 470/1000\n"," - 77s - loss: 0.3519 - accuracy: 0.8406 - val_loss: 0.6013 - val_accuracy: 0.7564\n","\n","Epoch 00470: val_loss did not improve from 0.37686\n","Epoch 471/1000\n"," - 76s - loss: 0.3504 - accuracy: 0.8410 - val_loss: 0.7659 - val_accuracy: 0.7596\n","\n","Epoch 00471: val_loss did not improve from 0.37686\n","Epoch 472/1000\n"," - 76s - loss: 0.3527 - accuracy: 0.8398 - val_loss: 0.5785 - val_accuracy: 0.7576\n","\n","Epoch 00472: val_loss did not improve from 0.37686\n","Epoch 473/1000\n"," - 77s - loss: 0.3501 - accuracy: 0.8419 - val_loss: 0.5791 - val_accuracy: 0.7583\n","\n","Epoch 00473: val_loss did not improve from 0.37686\n","Epoch 474/1000\n"," - 76s - loss: 0.3505 - accuracy: 0.8411 - val_loss: 0.4910 - val_accuracy: 0.7585\n","\n","Epoch 00474: val_loss did not improve from 0.37686\n","Epoch 475/1000\n"," - 76s - loss: 0.3509 - accuracy: 0.8405 - val_loss: 0.5040 - val_accuracy: 0.7602\n","\n","Epoch 00475: val_loss did not improve from 0.37686\n","Epoch 476/1000\n"," - 77s - loss: 0.3499 - accuracy: 0.8411 - val_loss: 0.6646 - val_accuracy: 0.7588\n","\n","Epoch 00476: val_loss did not improve from 0.37686\n","Epoch 477/1000\n"," - 76s - loss: 0.3492 - accuracy: 0.8418 - val_loss: 0.6076 - val_accuracy: 0.7582\n","\n","Epoch 00477: val_loss did not improve from 0.37686\n","Epoch 478/1000\n"," - 76s - loss: 0.3507 - accuracy: 0.8419 - val_loss: 0.5075 - val_accuracy: 0.7594\n","\n","Epoch 00478: val_loss did not improve from 0.37686\n","Epoch 479/1000\n"," - 77s - loss: 0.3484 - accuracy: 0.8429 - val_loss: 0.5773 - val_accuracy: 0.7562\n","\n","Epoch 00479: val_loss did not improve from 0.37686\n","Epoch 480/1000\n"," - 77s - loss: 0.3505 - accuracy: 0.8422 - val_loss: 0.5675 - val_accuracy: 0.7593\n","\n","Epoch 00480: val_loss did not improve from 0.37686\n","Epoch 481/1000\n"," - 77s - loss: 0.3487 - accuracy: 0.8410 - val_loss: 0.5563 - val_accuracy: 0.7570\n","\n","Epoch 00481: val_loss did not improve from 0.37686\n","Epoch 482/1000\n"," - 76s - loss: 0.3481 - accuracy: 0.8425 - val_loss: 0.6036 - val_accuracy: 0.7587\n","\n","Epoch 00482: val_loss did not improve from 0.37686\n","Epoch 483/1000\n"," - 76s - loss: 0.3491 - accuracy: 0.8422 - val_loss: 0.5954 - val_accuracy: 0.7589\n","\n","Epoch 00483: val_loss did not improve from 0.37686\n","Epoch 484/1000\n"," - 76s - loss: 0.3483 - accuracy: 0.8428 - val_loss: 0.5969 - val_accuracy: 0.7586\n","\n","Epoch 00484: val_loss did not improve from 0.37686\n","Epoch 485/1000\n"," - 76s - loss: 0.3466 - accuracy: 0.8439 - val_loss: 0.6608 - val_accuracy: 0.7592\n","\n","Epoch 00485: val_loss did not improve from 0.37686\n","Epoch 486/1000\n"," - 77s - loss: 0.3484 - accuracy: 0.8422 - val_loss: 0.4993 - val_accuracy: 0.7580\n","\n","Epoch 00486: val_loss did not improve from 0.37686\n","Epoch 487/1000\n"," - 76s - loss: 0.3495 - accuracy: 0.8414 - val_loss: 0.6467 - val_accuracy: 0.7598\n","\n","Epoch 00487: val_loss did not improve from 0.37686\n","Epoch 488/1000\n"," - 77s - loss: 0.3481 - accuracy: 0.8423 - val_loss: 0.7148 - val_accuracy: 0.7600\n","\n","Epoch 00488: val_loss did not improve from 0.37686\n","Epoch 489/1000\n"," - 76s - loss: 0.3487 - accuracy: 0.8426 - val_loss: 0.6512 - val_accuracy: 0.7568\n","\n","Epoch 00489: val_loss did not improve from 0.37686\n","Epoch 490/1000\n"," - 77s - loss: 0.3484 - accuracy: 0.8416 - val_loss: 0.6188 - val_accuracy: 0.7576\n","\n","Epoch 00490: val_loss did not improve from 0.37686\n","Epoch 491/1000\n"," - 77s - loss: 0.3501 - accuracy: 0.8407 - val_loss: 0.6303 - val_accuracy: 0.7590\n","\n","Epoch 00491: val_loss did not improve from 0.37686\n","Epoch 492/1000\n"," - 77s - loss: 0.3463 - accuracy: 0.8433 - val_loss: 0.7720 - val_accuracy: 0.7608\n","\n","Epoch 00492: val_loss did not improve from 0.37686\n","Epoch 493/1000\n"," - 77s - loss: 0.3483 - accuracy: 0.8411 - val_loss: 0.6717 - val_accuracy: 0.7593\n","\n","Epoch 00493: val_loss did not improve from 0.37686\n","Epoch 494/1000\n"," - 76s - loss: 0.3481 - accuracy: 0.8430 - val_loss: 0.5186 - val_accuracy: 0.7604\n","\n","Epoch 00494: val_loss did not improve from 0.37686\n","Epoch 495/1000\n"," - 76s - loss: 0.3468 - accuracy: 0.8437 - val_loss: 0.5920 - val_accuracy: 0.7569\n","\n","Epoch 00495: val_loss did not improve from 0.37686\n","Epoch 496/1000\n"," - 76s - loss: 0.3453 - accuracy: 0.8447 - val_loss: 0.7411 - val_accuracy: 0.7589\n","\n","Epoch 00496: val_loss did not improve from 0.37686\n","Epoch 497/1000\n"," - 77s - loss: 0.3476 - accuracy: 0.8433 - val_loss: 0.5870 - val_accuracy: 0.7581\n","\n","Epoch 00497: val_loss did not improve from 0.37686\n","Epoch 498/1000\n"," - 76s - loss: 0.3465 - accuracy: 0.8433 - val_loss: 0.6881 - val_accuracy: 0.7582\n","\n","Epoch 00498: val_loss did not improve from 0.37686\n","Epoch 499/1000\n"," - 77s - loss: 0.3450 - accuracy: 0.8451 - val_loss: 0.7742 - val_accuracy: 0.7603\n","\n","Epoch 00499: val_loss did not improve from 0.37686\n","Epoch 500/1000\n"," - 77s - loss: 0.3469 - accuracy: 0.8437 - val_loss: 0.6930 - val_accuracy: 0.7591\n","\n","Epoch 00500: val_loss did not improve from 0.37686\n","Epoch 501/1000\n"," - 77s - loss: 0.3455 - accuracy: 0.8440 - val_loss: 0.4345 - val_accuracy: 0.7596\n","\n","Epoch 00501: val_loss did not improve from 0.37686\n","Epoch 502/1000\n"," - 76s - loss: 0.3444 - accuracy: 0.8451 - val_loss: 0.5981 - val_accuracy: 0.7569\n","\n","Epoch 00502: val_loss did not improve from 0.37686\n","Epoch 503/1000\n"," - 76s - loss: 0.3446 - accuracy: 0.8453 - val_loss: 0.7361 - val_accuracy: 0.7571\n","\n","Epoch 00503: val_loss did not improve from 0.37686\n","Epoch 504/1000\n"," - 76s - loss: 0.3464 - accuracy: 0.8435 - val_loss: 0.6220 - val_accuracy: 0.7594\n","\n","Epoch 00504: val_loss did not improve from 0.37686\n","Epoch 505/1000\n"," - 77s - loss: 0.3449 - accuracy: 0.8443 - val_loss: 0.8789 - val_accuracy: 0.7581\n","\n","Epoch 00505: val_loss did not improve from 0.37686\n","Epoch 506/1000\n"," - 77s - loss: 0.3450 - accuracy: 0.8443 - val_loss: 0.5392 - val_accuracy: 0.7585\n","\n","Epoch 00506: val_loss did not improve from 0.37686\n","Epoch 507/1000\n"," - 77s - loss: 0.3439 - accuracy: 0.8444 - val_loss: 0.6112 - val_accuracy: 0.7598\n","\n","Epoch 00507: val_loss did not improve from 0.37686\n","Epoch 508/1000\n"," - 76s - loss: 0.3426 - accuracy: 0.8466 - val_loss: 0.5198 - val_accuracy: 0.7600\n","\n","Epoch 00508: val_loss did not improve from 0.37686\n","Epoch 509/1000\n"," - 76s - loss: 0.3445 - accuracy: 0.8444 - val_loss: 0.7090 - val_accuracy: 0.7592\n","\n","Epoch 00509: val_loss did not improve from 0.37686\n","Epoch 510/1000\n"," - 77s - loss: 0.3437 - accuracy: 0.8444 - val_loss: 0.8905 - val_accuracy: 0.7564\n","\n","Epoch 00510: val_loss did not improve from 0.37686\n","Epoch 511/1000\n"," - 76s - loss: 0.3422 - accuracy: 0.8459 - val_loss: 0.4456 - val_accuracy: 0.7578\n","\n","Epoch 00511: val_loss did not improve from 0.37686\n","Epoch 512/1000\n"," - 76s - loss: 0.3420 - accuracy: 0.8459 - val_loss: 0.5704 - val_accuracy: 0.7567\n","\n","Epoch 00512: val_loss did not improve from 0.37686\n","Epoch 513/1000\n"," - 76s - loss: 0.3429 - accuracy: 0.8463 - val_loss: 0.7318 - val_accuracy: 0.7569\n","\n","Epoch 00513: val_loss did not improve from 0.37686\n","Epoch 514/1000\n"," - 76s - loss: 0.3424 - accuracy: 0.8463 - val_loss: 0.7250 - val_accuracy: 0.7587\n","\n","Epoch 00514: val_loss did not improve from 0.37686\n","Epoch 515/1000\n"," - 76s - loss: 0.3448 - accuracy: 0.8435 - val_loss: 0.7039 - val_accuracy: 0.7582\n","\n","Epoch 00515: val_loss did not improve from 0.37686\n","Epoch 516/1000\n"," - 76s - loss: 0.3399 - accuracy: 0.8481 - val_loss: 1.0960 - val_accuracy: 0.7578\n","\n","Epoch 00516: val_loss did not improve from 0.37686\n","Epoch 517/1000\n"," - 77s - loss: 0.3400 - accuracy: 0.8478 - val_loss: 0.4549 - val_accuracy: 0.7589\n","\n","Epoch 00517: val_loss did not improve from 0.37686\n","Epoch 518/1000\n"," - 77s - loss: 0.3419 - accuracy: 0.8470 - val_loss: 0.6278 - val_accuracy: 0.7571\n","\n","Epoch 00518: val_loss did not improve from 0.37686\n","Epoch 519/1000\n"," - 76s - loss: 0.3424 - accuracy: 0.8460 - val_loss: 0.6931 - val_accuracy: 0.7588\n","\n","Epoch 00519: val_loss did not improve from 0.37686\n","Epoch 520/1000\n"," - 77s - loss: 0.3402 - accuracy: 0.8467 - val_loss: 0.4924 - val_accuracy: 0.7588\n","\n","Epoch 00520: val_loss did not improve from 0.37686\n","Epoch 521/1000\n"," - 77s - loss: 0.3431 - accuracy: 0.8455 - val_loss: 0.4383 - val_accuracy: 0.7610\n","\n","Epoch 00521: val_loss did not improve from 0.37686\n","Epoch 522/1000\n"," - 76s - loss: 0.3409 - accuracy: 0.8467 - val_loss: 0.6209 - val_accuracy: 0.7606\n","\n","Epoch 00522: val_loss did not improve from 0.37686\n","Epoch 523/1000\n"," - 76s - loss: 0.3409 - accuracy: 0.8466 - val_loss: 0.5968 - val_accuracy: 0.7571\n","\n","Epoch 00523: val_loss did not improve from 0.37686\n","Epoch 524/1000\n"," - 76s - loss: 0.3413 - accuracy: 0.8458 - val_loss: 0.6838 - val_accuracy: 0.7597\n","\n","Epoch 00524: val_loss did not improve from 0.37686\n","Epoch 525/1000\n"," - 76s - loss: 0.3389 - accuracy: 0.8493 - val_loss: 0.6918 - val_accuracy: 0.7595\n","\n","Epoch 00525: val_loss did not improve from 0.37686\n","Epoch 526/1000\n"," - 76s - loss: 0.3401 - accuracy: 0.8475 - val_loss: 0.5739 - val_accuracy: 0.7598\n","\n","Epoch 00526: val_loss did not improve from 0.37686\n","Epoch 527/1000\n"," - 76s - loss: 0.3421 - accuracy: 0.8458 - val_loss: 0.7439 - val_accuracy: 0.7581\n","\n","Epoch 00527: val_loss did not improve from 0.37686\n","Epoch 528/1000\n"," - 76s - loss: 0.3394 - accuracy: 0.8473 - val_loss: 0.6466 - val_accuracy: 0.7593\n","\n","Epoch 00528: val_loss did not improve from 0.37686\n","Epoch 529/1000\n"," - 77s - loss: 0.3405 - accuracy: 0.8465 - val_loss: 0.7441 - val_accuracy: 0.7594\n","\n","Epoch 00529: val_loss did not improve from 0.37686\n","Epoch 530/1000\n"," - 77s - loss: 0.3408 - accuracy: 0.8465 - val_loss: 0.5920 - val_accuracy: 0.7581\n","\n","Epoch 00530: val_loss did not improve from 0.37686\n","Epoch 531/1000\n"," - 77s - loss: 0.3399 - accuracy: 0.8478 - val_loss: 0.5864 - val_accuracy: 0.7593\n","\n","Epoch 00531: val_loss did not improve from 0.37686\n","Epoch 532/1000\n"," - 77s - loss: 0.3411 - accuracy: 0.8468 - val_loss: 0.4651 - val_accuracy: 0.7588\n","\n","Epoch 00532: val_loss did not improve from 0.37686\n","Epoch 533/1000\n"," - 77s - loss: 0.3386 - accuracy: 0.8475 - val_loss: 0.4933 - val_accuracy: 0.7601\n","\n","Epoch 00533: val_loss did not improve from 0.37686\n","Epoch 534/1000\n"," - 77s - loss: 0.3393 - accuracy: 0.8480 - val_loss: 0.6745 - val_accuracy: 0.7598\n","\n","Epoch 00534: val_loss did not improve from 0.37686\n","Epoch 535/1000\n"," - 76s - loss: 0.3373 - accuracy: 0.8485 - val_loss: 0.4972 - val_accuracy: 0.7611\n","\n","Epoch 00535: val_loss did not improve from 0.37686\n","Epoch 536/1000\n"," - 77s - loss: 0.3397 - accuracy: 0.8469 - val_loss: 0.6084 - val_accuracy: 0.7600\n","\n","Epoch 00536: val_loss did not improve from 0.37686\n","Epoch 537/1000\n"," - 77s - loss: 0.3387 - accuracy: 0.8471 - val_loss: 0.6734 - val_accuracy: 0.7590\n","\n","Epoch 00537: val_loss did not improve from 0.37686\n","Epoch 538/1000\n"," - 77s - loss: 0.3377 - accuracy: 0.8493 - val_loss: 0.4304 - val_accuracy: 0.7582\n","\n","Epoch 00538: val_loss did not improve from 0.37686\n","Epoch 539/1000\n"," - 77s - loss: 0.3376 - accuracy: 0.8484 - val_loss: 0.7028 - val_accuracy: 0.7589\n","\n","Epoch 00539: val_loss did not improve from 0.37686\n","Epoch 540/1000\n"," - 77s - loss: 0.3367 - accuracy: 0.8487 - val_loss: 0.5373 - val_accuracy: 0.7600\n","\n","Epoch 00540: val_loss did not improve from 0.37686\n","Epoch 541/1000\n"," - 77s - loss: 0.3392 - accuracy: 0.8483 - val_loss: 0.6051 - val_accuracy: 0.7605\n","\n","Epoch 00541: val_loss did not improve from 0.37686\n","Epoch 542/1000\n"," - 76s - loss: 0.3384 - accuracy: 0.8487 - val_loss: 0.5884 - val_accuracy: 0.7613\n","\n","Epoch 00542: val_loss did not improve from 0.37686\n","Epoch 543/1000\n"," - 76s - loss: 0.3381 - accuracy: 0.8481 - val_loss: 0.5289 - val_accuracy: 0.7593\n","\n","Epoch 00543: val_loss did not improve from 0.37686\n","Epoch 544/1000\n"," - 76s - loss: 0.3382 - accuracy: 0.8485 - val_loss: 0.4838 - val_accuracy: 0.7615\n","\n","Epoch 00544: val_loss did not improve from 0.37686\n","Epoch 545/1000\n"," - 76s - loss: 0.3360 - accuracy: 0.8481 - val_loss: 0.6260 - val_accuracy: 0.7603\n","\n","Epoch 00545: val_loss did not improve from 0.37686\n","Epoch 546/1000\n"," - 76s - loss: 0.3376 - accuracy: 0.8480 - val_loss: 0.6086 - val_accuracy: 0.7614\n","\n","Epoch 00546: val_loss did not improve from 0.37686\n","Epoch 547/1000\n"," - 77s - loss: 0.3359 - accuracy: 0.8493 - val_loss: 0.5297 - val_accuracy: 0.7618\n","\n","Epoch 00547: val_loss did not improve from 0.37686\n","Epoch 548/1000\n"," - 77s - loss: 0.3367 - accuracy: 0.8488 - val_loss: 0.6114 - val_accuracy: 0.7613\n","\n","Epoch 00548: val_loss did not improve from 0.37686\n","Epoch 549/1000\n"," - 76s - loss: 0.3375 - accuracy: 0.8489 - val_loss: 0.5958 - val_accuracy: 0.7609\n","\n","Epoch 00549: val_loss did not improve from 0.37686\n","Epoch 550/1000\n"," - 77s - loss: 0.3360 - accuracy: 0.8494 - val_loss: 0.5616 - val_accuracy: 0.7611\n","\n","Epoch 00550: val_loss did not improve from 0.37686\n","Epoch 551/1000\n"," - 76s - loss: 0.3369 - accuracy: 0.8488 - val_loss: 0.5695 - val_accuracy: 0.7591\n","\n","Epoch 00551: val_loss did not improve from 0.37686\n","Epoch 552/1000\n"," - 77s - loss: 0.3349 - accuracy: 0.8504 - val_loss: 0.3845 - val_accuracy: 0.7610\n","\n","Epoch 00552: val_loss did not improve from 0.37686\n","Epoch 553/1000\n"," - 76s - loss: 0.3364 - accuracy: 0.8493 - val_loss: 0.7013 - val_accuracy: 0.7610\n","\n","Epoch 00553: val_loss did not improve from 0.37686\n","Epoch 554/1000\n"," - 76s - loss: 0.3357 - accuracy: 0.8500 - val_loss: 0.5875 - val_accuracy: 0.7611\n","\n","Epoch 00554: val_loss did not improve from 0.37686\n","Epoch 555/1000\n"," - 77s - loss: 0.3354 - accuracy: 0.8499 - val_loss: 0.5199 - val_accuracy: 0.7601\n","\n","Epoch 00555: val_loss did not improve from 0.37686\n","Epoch 556/1000\n"," - 76s - loss: 0.3349 - accuracy: 0.8499 - val_loss: 0.6657 - val_accuracy: 0.7632\n","\n","Epoch 00556: val_loss did not improve from 0.37686\n","Epoch 557/1000\n"," - 77s - loss: 0.3367 - accuracy: 0.8489 - val_loss: 0.4974 - val_accuracy: 0.7608\n","\n","Epoch 00557: val_loss did not improve from 0.37686\n","Epoch 558/1000\n"," - 77s - loss: 0.3326 - accuracy: 0.8515 - val_loss: 0.5600 - val_accuracy: 0.7594\n","\n","Epoch 00558: val_loss did not improve from 0.37686\n","Epoch 559/1000\n"," - 76s - loss: 0.3354 - accuracy: 0.8493 - val_loss: 0.6360 - val_accuracy: 0.7613\n","\n","Epoch 00559: val_loss did not improve from 0.37686\n","Epoch 560/1000\n"," - 77s - loss: 0.3350 - accuracy: 0.8494 - val_loss: 0.7360 - val_accuracy: 0.7573\n","\n","Epoch 00560: val_loss did not improve from 0.37686\n","Epoch 561/1000\n"," - 76s - loss: 0.3329 - accuracy: 0.8518 - val_loss: 0.4471 - val_accuracy: 0.7615\n","\n","Epoch 00561: val_loss did not improve from 0.37686\n","Epoch 562/1000\n"," - 77s - loss: 0.3337 - accuracy: 0.8512 - val_loss: 0.5776 - val_accuracy: 0.7607\n","\n","Epoch 00562: val_loss did not improve from 0.37686\n","Epoch 563/1000\n"," - 76s - loss: 0.3337 - accuracy: 0.8501 - val_loss: 0.7476 - val_accuracy: 0.7611\n","\n","Epoch 00563: val_loss did not improve from 0.37686\n","Epoch 564/1000\n"," - 76s - loss: 0.3339 - accuracy: 0.8501 - val_loss: 0.4850 - val_accuracy: 0.7606\n","\n","Epoch 00564: val_loss did not improve from 0.37686\n","Epoch 565/1000\n"," - 76s - loss: 0.3334 - accuracy: 0.8515 - val_loss: 0.5544 - val_accuracy: 0.7607\n","\n","Epoch 00565: val_loss did not improve from 0.37686\n","Epoch 566/1000\n"," - 76s - loss: 0.3338 - accuracy: 0.8504 - val_loss: 0.5446 - val_accuracy: 0.7602\n","\n","Epoch 00566: val_loss did not improve from 0.37686\n","Epoch 567/1000\n"," - 76s - loss: 0.3311 - accuracy: 0.8525 - val_loss: 0.6498 - val_accuracy: 0.7622\n","\n","Epoch 00567: val_loss did not improve from 0.37686\n","Epoch 568/1000\n"," - 76s - loss: 0.3318 - accuracy: 0.8522 - val_loss: 0.4761 - val_accuracy: 0.7567\n","\n","Epoch 00568: val_loss did not improve from 0.37686\n","Epoch 569/1000\n"," - 76s - loss: 0.3331 - accuracy: 0.8514 - val_loss: 0.4777 - val_accuracy: 0.7578\n","\n","Epoch 00569: val_loss did not improve from 0.37686\n","Epoch 570/1000\n"," - 76s - loss: 0.3324 - accuracy: 0.8516 - val_loss: 0.7534 - val_accuracy: 0.7616\n","\n","Epoch 00570: val_loss did not improve from 0.37686\n","Epoch 571/1000\n"," - 77s - loss: 0.3312 - accuracy: 0.8518 - val_loss: 0.6872 - val_accuracy: 0.7584\n","\n","Epoch 00571: val_loss did not improve from 0.37686\n","Epoch 572/1000\n"," - 77s - loss: 0.3322 - accuracy: 0.8515 - val_loss: 0.5794 - val_accuracy: 0.7621\n","\n","Epoch 00572: val_loss did not improve from 0.37686\n","Epoch 573/1000\n"," - 76s - loss: 0.3313 - accuracy: 0.8522 - val_loss: 0.4770 - val_accuracy: 0.7593\n","\n","Epoch 00573: val_loss did not improve from 0.37686\n","Epoch 574/1000\n"," - 77s - loss: 0.3315 - accuracy: 0.8519 - val_loss: 0.6185 - val_accuracy: 0.7620\n","\n","Epoch 00574: val_loss did not improve from 0.37686\n","Epoch 575/1000\n"," - 77s - loss: 0.3317 - accuracy: 0.8511 - val_loss: 0.7465 - val_accuracy: 0.7595\n","\n","Epoch 00575: val_loss did not improve from 0.37686\n","Epoch 576/1000\n"," - 76s - loss: 0.3311 - accuracy: 0.8529 - val_loss: 0.7447 - val_accuracy: 0.7610\n","\n","Epoch 00576: val_loss did not improve from 0.37686\n","Epoch 577/1000\n"," - 76s - loss: 0.3302 - accuracy: 0.8525 - val_loss: 0.5699 - val_accuracy: 0.7588\n","\n","Epoch 00577: val_loss did not improve from 0.37686\n","Epoch 578/1000\n"," - 76s - loss: 0.3309 - accuracy: 0.8525 - val_loss: 0.6270 - val_accuracy: 0.7623\n","\n","Epoch 00578: val_loss did not improve from 0.37686\n","Epoch 579/1000\n"," - 76s - loss: 0.3306 - accuracy: 0.8534 - val_loss: 0.5859 - val_accuracy: 0.7609\n","\n","Epoch 00579: val_loss did not improve from 0.37686\n","Epoch 580/1000\n"," - 76s - loss: 0.3304 - accuracy: 0.8527 - val_loss: 0.7356 - val_accuracy: 0.7613\n","\n","Epoch 00580: val_loss did not improve from 0.37686\n","Epoch 581/1000\n"," - 76s - loss: 0.3311 - accuracy: 0.8521 - val_loss: 0.5160 - val_accuracy: 0.7597\n","\n","Epoch 00581: val_loss did not improve from 0.37686\n","Epoch 582/1000\n"," - 76s - loss: 0.3297 - accuracy: 0.8524 - val_loss: 0.6339 - val_accuracy: 0.7601\n","\n","Epoch 00582: val_loss did not improve from 0.37686\n","Epoch 583/1000\n"," - 76s - loss: 0.3292 - accuracy: 0.8534 - val_loss: 0.6522 - val_accuracy: 0.7565\n","\n","Epoch 00583: val_loss did not improve from 0.37686\n","Epoch 584/1000\n"," - 76s - loss: 0.3285 - accuracy: 0.8537 - val_loss: 0.6027 - val_accuracy: 0.7630\n","\n","Epoch 00584: val_loss did not improve from 0.37686\n","Epoch 585/1000\n"," - 76s - loss: 0.3302 - accuracy: 0.8527 - val_loss: 0.5322 - val_accuracy: 0.7623\n","\n","Epoch 00585: val_loss did not improve from 0.37686\n","Epoch 586/1000\n"," - 76s - loss: 0.3283 - accuracy: 0.8530 - val_loss: 0.7397 - val_accuracy: 0.7608\n","\n","Epoch 00586: val_loss did not improve from 0.37686\n","Epoch 587/1000\n"," - 77s - loss: 0.3296 - accuracy: 0.8527 - val_loss: 0.6469 - val_accuracy: 0.7624\n","\n","Epoch 00587: val_loss did not improve from 0.37686\n","Epoch 588/1000\n"," - 76s - loss: 0.3287 - accuracy: 0.8537 - val_loss: 0.7199 - val_accuracy: 0.7622\n","\n","Epoch 00588: val_loss did not improve from 0.37686\n","Epoch 589/1000\n"," - 76s - loss: 0.3280 - accuracy: 0.8535 - val_loss: 0.6780 - val_accuracy: 0.7606\n","\n","Epoch 00589: val_loss did not improve from 0.37686\n","Epoch 590/1000\n"," - 76s - loss: 0.3279 - accuracy: 0.8541 - val_loss: 0.5125 - val_accuracy: 0.7607\n","\n","Epoch 00590: val_loss did not improve from 0.37686\n","Epoch 591/1000\n"," - 76s - loss: 0.3277 - accuracy: 0.8540 - val_loss: 0.6430 - val_accuracy: 0.7582\n","\n","Epoch 00591: val_loss did not improve from 0.37686\n","Epoch 592/1000\n"," - 76s - loss: 0.3293 - accuracy: 0.8530 - val_loss: 0.7382 - val_accuracy: 0.7600\n","\n","Epoch 00592: val_loss did not improve from 0.37686\n","Epoch 593/1000\n"," - 76s - loss: 0.3284 - accuracy: 0.8537 - val_loss: 0.7884 - val_accuracy: 0.7608\n","\n","Epoch 00593: val_loss did not improve from 0.37686\n","Epoch 594/1000\n"," - 77s - loss: 0.3268 - accuracy: 0.8540 - val_loss: 0.5186 - val_accuracy: 0.7608\n","\n","Epoch 00594: val_loss did not improve from 0.37686\n","Epoch 595/1000\n"," - 76s - loss: 0.3277 - accuracy: 0.8539 - val_loss: 0.7445 - val_accuracy: 0.7622\n","\n","Epoch 00595: val_loss did not improve from 0.37686\n","Epoch 596/1000\n"," - 77s - loss: 0.3279 - accuracy: 0.8541 - val_loss: 0.8202 - val_accuracy: 0.7604\n","\n","Epoch 00596: val_loss did not improve from 0.37686\n","Epoch 597/1000\n"," - 76s - loss: 0.3276 - accuracy: 0.8534 - val_loss: 0.5271 - val_accuracy: 0.7610\n","\n","Epoch 00597: val_loss did not improve from 0.37686\n","Epoch 598/1000\n"," - 76s - loss: 0.3250 - accuracy: 0.8553 - val_loss: 0.7261 - val_accuracy: 0.7597\n","\n","Epoch 00598: val_loss did not improve from 0.37686\n","Epoch 599/1000\n"," - 77s - loss: 0.3261 - accuracy: 0.8550 - val_loss: 0.4025 - val_accuracy: 0.7622\n","\n","Epoch 00599: val_loss did not improve from 0.37686\n","Epoch 600/1000\n"," - 76s - loss: 0.3281 - accuracy: 0.8540 - val_loss: 0.6222 - val_accuracy: 0.7610\n","\n","Epoch 00600: val_loss did not improve from 0.37686\n","Epoch 601/1000\n"," - 76s - loss: 0.3261 - accuracy: 0.8545 - val_loss: 0.6166 - val_accuracy: 0.7598\n","\n","Epoch 00601: val_loss did not improve from 0.37686\n","Epoch 602/1000\n"," - 76s - loss: 0.3282 - accuracy: 0.8537 - val_loss: 0.7023 - val_accuracy: 0.7610\n","\n","Epoch 00602: val_loss did not improve from 0.37686\n","Epoch 603/1000\n"," - 76s - loss: 0.3246 - accuracy: 0.8561 - val_loss: 0.5574 - val_accuracy: 0.7608\n","\n","Epoch 00603: val_loss did not improve from 0.37686\n","Epoch 604/1000\n"," - 77s - loss: 0.3263 - accuracy: 0.8550 - val_loss: 0.6868 - val_accuracy: 0.7609\n","\n","Epoch 00604: val_loss did not improve from 0.37686\n","Epoch 605/1000\n"," - 76s - loss: 0.3271 - accuracy: 0.8543 - val_loss: 0.6494 - val_accuracy: 0.7616\n","\n","Epoch 00605: val_loss did not improve from 0.37686\n","Epoch 606/1000\n"," - 76s - loss: 0.3261 - accuracy: 0.8545 - val_loss: 0.7170 - val_accuracy: 0.7631\n","\n","Epoch 00606: val_loss did not improve from 0.37686\n","Epoch 607/1000\n"," - 76s - loss: 0.3255 - accuracy: 0.8555 - val_loss: 0.6071 - val_accuracy: 0.7614\n","\n","Epoch 00607: val_loss did not improve from 0.37686\n","Epoch 608/1000\n"," - 77s - loss: 0.3235 - accuracy: 0.8569 - val_loss: 0.6503 - val_accuracy: 0.7613\n","\n","Epoch 00608: val_loss did not improve from 0.37686\n","Epoch 609/1000\n"," - 76s - loss: 0.3251 - accuracy: 0.8548 - val_loss: 0.6196 - val_accuracy: 0.7618\n","\n","Epoch 00609: val_loss did not improve from 0.37686\n","Epoch 610/1000\n"," - 76s - loss: 0.3249 - accuracy: 0.8556 - val_loss: 0.6334 - val_accuracy: 0.7632\n","\n","Epoch 00610: val_loss did not improve from 0.37686\n","Epoch 611/1000\n"," - 76s - loss: 0.3246 - accuracy: 0.8559 - val_loss: 0.7298 - val_accuracy: 0.7609\n","\n","Epoch 00611: val_loss did not improve from 0.37686\n","Epoch 612/1000\n"," - 77s - loss: 0.3263 - accuracy: 0.8542 - val_loss: 0.6665 - val_accuracy: 0.7619\n","\n","Epoch 00612: val_loss did not improve from 0.37686\n","Epoch 613/1000\n"," - 76s - loss: 0.3257 - accuracy: 0.8554 - val_loss: 0.5351 - val_accuracy: 0.7629\n","\n","Epoch 00613: val_loss did not improve from 0.37686\n","Epoch 614/1000\n"," - 77s - loss: 0.3256 - accuracy: 0.8549 - val_loss: 0.7039 - val_accuracy: 0.7608\n","\n","Epoch 00614: val_loss did not improve from 0.37686\n","Epoch 615/1000\n"," - 76s - loss: 0.3256 - accuracy: 0.8549 - val_loss: 0.7113 - val_accuracy: 0.7627\n","\n","Epoch 00615: val_loss did not improve from 0.37686\n","Epoch 616/1000\n"," - 76s - loss: 0.3236 - accuracy: 0.8559 - val_loss: 0.6885 - val_accuracy: 0.7627\n","\n","Epoch 00616: val_loss did not improve from 0.37686\n","Epoch 617/1000\n"," - 76s - loss: 0.3218 - accuracy: 0.8571 - val_loss: 0.7760 - val_accuracy: 0.7613\n","\n","Epoch 00617: val_loss did not improve from 0.37686\n","Epoch 618/1000\n"," - 76s - loss: 0.3244 - accuracy: 0.8555 - val_loss: 0.5733 - val_accuracy: 0.7628\n","\n","Epoch 00618: val_loss did not improve from 0.37686\n","Epoch 619/1000\n"," - 76s - loss: 0.3245 - accuracy: 0.8547 - val_loss: 0.7852 - val_accuracy: 0.7625\n","\n","Epoch 00619: val_loss did not improve from 0.37686\n","Epoch 620/1000\n"," - 76s - loss: 0.3227 - accuracy: 0.8566 - val_loss: 0.5372 - val_accuracy: 0.7620\n","\n","Epoch 00620: val_loss did not improve from 0.37686\n","Epoch 621/1000\n"," - 76s - loss: 0.3220 - accuracy: 0.8582 - val_loss: 0.5549 - val_accuracy: 0.7630\n","\n","Epoch 00621: val_loss did not improve from 0.37686\n","Epoch 622/1000\n"," - 77s - loss: 0.3232 - accuracy: 0.8564 - val_loss: 0.7887 - val_accuracy: 0.7630\n","\n","Epoch 00622: val_loss did not improve from 0.37686\n","Epoch 623/1000\n"," - 76s - loss: 0.3217 - accuracy: 0.8583 - val_loss: 0.5275 - val_accuracy: 0.7615\n","\n","Epoch 00623: val_loss did not improve from 0.37686\n","Epoch 624/1000\n"," - 77s - loss: 0.3219 - accuracy: 0.8563 - val_loss: 0.7594 - val_accuracy: 0.7627\n","\n","Epoch 00624: val_loss did not improve from 0.37686\n","Epoch 625/1000\n"," - 76s - loss: 0.3217 - accuracy: 0.8571 - val_loss: 0.6359 - val_accuracy: 0.7611\n","\n","Epoch 00625: val_loss did not improve from 0.37686\n","Epoch 626/1000\n"," - 76s - loss: 0.3226 - accuracy: 0.8568 - val_loss: 0.7161 - val_accuracy: 0.7629\n","\n","Epoch 00626: val_loss did not improve from 0.37686\n","Epoch 627/1000\n"," - 76s - loss: 0.3212 - accuracy: 0.8575 - val_loss: 0.6411 - val_accuracy: 0.7615\n","\n","Epoch 00627: val_loss did not improve from 0.37686\n","Epoch 628/1000\n"," - 76s - loss: 0.3229 - accuracy: 0.8564 - val_loss: 0.5850 - val_accuracy: 0.7600\n","\n","Epoch 00628: val_loss did not improve from 0.37686\n","Epoch 629/1000\n"," - 76s - loss: 0.3222 - accuracy: 0.8572 - val_loss: 0.6813 - val_accuracy: 0.7598\n","\n","Epoch 00629: val_loss did not improve from 0.37686\n","Epoch 630/1000\n"," - 76s - loss: 0.3199 - accuracy: 0.8585 - val_loss: 0.5687 - val_accuracy: 0.7632\n","\n","Epoch 00630: val_loss did not improve from 0.37686\n","Epoch 631/1000\n"," - 77s - loss: 0.3226 - accuracy: 0.8563 - val_loss: 0.5050 - val_accuracy: 0.7607\n","\n","Epoch 00631: val_loss did not improve from 0.37686\n","Epoch 632/1000\n"," - 76s - loss: 0.3229 - accuracy: 0.8569 - val_loss: 0.7845 - val_accuracy: 0.7619\n","\n","Epoch 00632: val_loss did not improve from 0.37686\n","Epoch 633/1000\n"," - 76s - loss: 0.3189 - accuracy: 0.8592 - val_loss: 0.5287 - val_accuracy: 0.7626\n","\n","Epoch 00633: val_loss did not improve from 0.37686\n","Epoch 634/1000\n"," - 76s - loss: 0.3193 - accuracy: 0.8594 - val_loss: 0.5598 - val_accuracy: 0.7626\n","\n","Epoch 00634: val_loss did not improve from 0.37686\n","Epoch 635/1000\n"," - 76s - loss: 0.3191 - accuracy: 0.8590 - val_loss: 0.6081 - val_accuracy: 0.7608\n","\n","Epoch 00635: val_loss did not improve from 0.37686\n","Epoch 636/1000\n"," - 76s - loss: 0.3189 - accuracy: 0.8590 - val_loss: 0.4259 - val_accuracy: 0.7617\n","\n","Epoch 00636: val_loss did not improve from 0.37686\n","Epoch 637/1000\n"," - 77s - loss: 0.3199 - accuracy: 0.8583 - val_loss: 0.7741 - val_accuracy: 0.7621\n","\n","Epoch 00637: val_loss did not improve from 0.37686\n","Epoch 638/1000\n"," - 76s - loss: 0.3221 - accuracy: 0.8568 - val_loss: 0.6237 - val_accuracy: 0.7620\n","\n","Epoch 00638: val_loss did not improve from 0.37686\n","Epoch 639/1000\n"," - 76s - loss: 0.3193 - accuracy: 0.8583 - val_loss: 0.7035 - val_accuracy: 0.7623\n","\n","Epoch 00639: val_loss did not improve from 0.37686\n","Epoch 640/1000\n"," - 77s - loss: 0.3194 - accuracy: 0.8588 - val_loss: 0.6607 - val_accuracy: 0.7617\n","\n","Epoch 00640: val_loss did not improve from 0.37686\n","Epoch 641/1000\n"," - 76s - loss: 0.3194 - accuracy: 0.8594 - val_loss: 0.6861 - val_accuracy: 0.7610\n","\n","Epoch 00641: val_loss did not improve from 0.37686\n","Epoch 642/1000\n"," - 76s - loss: 0.3179 - accuracy: 0.8591 - val_loss: 0.6477 - val_accuracy: 0.7614\n","\n","Epoch 00642: val_loss did not improve from 0.37686\n","Epoch 643/1000\n"," - 76s - loss: 0.3206 - accuracy: 0.8582 - val_loss: 0.4995 - val_accuracy: 0.7622\n","\n","Epoch 00643: val_loss did not improve from 0.37686\n","Epoch 644/1000\n"," - 76s - loss: 0.3202 - accuracy: 0.8580 - val_loss: 0.6783 - val_accuracy: 0.7619\n","\n","Epoch 00644: val_loss did not improve from 0.37686\n","Epoch 645/1000\n"," - 77s - loss: 0.3184 - accuracy: 0.8599 - val_loss: 0.7147 - val_accuracy: 0.7625\n","\n","Epoch 00645: val_loss did not improve from 0.37686\n","Epoch 646/1000\n"," - 77s - loss: 0.3179 - accuracy: 0.8596 - val_loss: 0.7820 - val_accuracy: 0.7611\n","\n","Epoch 00646: val_loss did not improve from 0.37686\n","Epoch 647/1000\n"," - 76s - loss: 0.3171 - accuracy: 0.8597 - val_loss: 0.5614 - val_accuracy: 0.7629\n","\n","Epoch 00647: val_loss did not improve from 0.37686\n","Epoch 648/1000\n"," - 76s - loss: 0.3179 - accuracy: 0.8593 - val_loss: 0.4751 - val_accuracy: 0.7629\n","\n","Epoch 00648: val_loss did not improve from 0.37686\n","Epoch 649/1000\n"," - 76s - loss: 0.3183 - accuracy: 0.8587 - val_loss: 0.8388 - val_accuracy: 0.7632\n","\n","Epoch 00649: val_loss did not improve from 0.37686\n","Epoch 650/1000\n"," - 76s - loss: 0.3177 - accuracy: 0.8590 - val_loss: 0.6639 - val_accuracy: 0.7630\n","\n","Epoch 00650: val_loss did not improve from 0.37686\n","Epoch 651/1000\n"," - 77s - loss: 0.3169 - accuracy: 0.8604 - val_loss: 0.6165 - val_accuracy: 0.7644\n","\n","Epoch 00651: val_loss did not improve from 0.37686\n","Epoch 652/1000\n"," - 76s - loss: 0.3174 - accuracy: 0.8603 - val_loss: 0.6503 - val_accuracy: 0.7628\n","\n","Epoch 00652: val_loss did not improve from 0.37686\n","Epoch 653/1000\n"],"name":"stdout"},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-8-94e1fe20354b>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     38\u001b[0m                     \u001b[0mvalidation_data\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mval_flow\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     39\u001b[0m                     \u001b[0mvalidation_steps\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_val\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 40\u001b[0;31m                     shuffle=False)\n\u001b[0m","\u001b[0;32m/tensorflow-1.15.2/python3.7/keras/legacy/interfaces.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     89\u001b[0m                 warnings.warn('Update your `' + object_name + '` call to the ' +\n\u001b[1;32m     90\u001b[0m                               'Keras 2 API: ' + signature, stacklevel=2)\n\u001b[0;32m---> 91\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     92\u001b[0m         \u001b[0mwrapper\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_original_function\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     93\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/tensorflow-1.15.2/python3.7/keras/engine/training.py\u001b[0m in \u001b[0;36mfit_generator\u001b[0;34m(self, generator, steps_per_epoch, epochs, verbose, callbacks, validation_data, validation_steps, validation_freq, class_weight, max_queue_size, workers, use_multiprocessing, shuffle, initial_epoch)\u001b[0m\n\u001b[1;32m   1730\u001b[0m             \u001b[0muse_multiprocessing\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0muse_multiprocessing\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1731\u001b[0m             \u001b[0mshuffle\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mshuffle\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1732\u001b[0;31m             initial_epoch=initial_epoch)\n\u001b[0m\u001b[1;32m   1733\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1734\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0minterfaces\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlegacy_generator_methods_support\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/tensorflow-1.15.2/python3.7/keras/engine/training_generator.py\u001b[0m in \u001b[0;36mfit_generator\u001b[0;34m(model, generator, steps_per_epoch, epochs, verbose, callbacks, validation_data, validation_steps, validation_freq, class_weight, max_queue_size, workers, use_multiprocessing, shuffle, initial_epoch)\u001b[0m\n\u001b[1;32m    218\u001b[0m                                             \u001b[0msample_weight\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msample_weight\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    219\u001b[0m                                             \u001b[0mclass_weight\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mclass_weight\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 220\u001b[0;31m                                             reset_metrics=False)\n\u001b[0m\u001b[1;32m    221\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    222\u001b[0m                 \u001b[0mouts\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mto_list\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mouts\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/tensorflow-1.15.2/python3.7/keras/engine/training.py\u001b[0m in \u001b[0;36mtrain_on_batch\u001b[0;34m(self, x, y, sample_weight, class_weight, reset_metrics)\u001b[0m\n\u001b[1;32m   1512\u001b[0m             \u001b[0mins\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mx\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0msample_weights\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1513\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_train_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1514\u001b[0;31m         \u001b[0moutputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mins\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1515\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1516\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mreset_metrics\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/tensorflow-1.15.2/python3.7/tensorflow_core/python/keras/backend.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, inputs)\u001b[0m\n\u001b[1;32m   3474\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3475\u001b[0m     fetched = self._callable_fn(*array_vals,\n\u001b[0;32m-> 3476\u001b[0;31m                                 run_metadata=self.run_metadata)\n\u001b[0m\u001b[1;32m   3477\u001b[0m     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_fetch_callbacks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfetched\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fetches\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3478\u001b[0m     output_structure = nest.pack_sequence_as(\n","\u001b[0;32m/tensorflow-1.15.2/python3.7/tensorflow_core/python/client/session.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1470\u001b[0m         ret = tf_session.TF_SessionRunCallable(self._session._session,\n\u001b[1;32m   1471\u001b[0m                                                \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_handle\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1472\u001b[0;31m                                                run_metadata_ptr)\n\u001b[0m\u001b[1;32m   1473\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mrun_metadata\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1474\u001b[0m           \u001b[0mproto_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf_session\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTF_GetBuffer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrun_metadata_ptr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","metadata":{"id":"pfPMGMvm0rGu","executionInfo":{"status":"ok","timestamp":1618538410286,"user_tz":-540,"elapsed":7878,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}}},"source":["# model_name = \"classifier_45_min_pr_re2.h5\"  # <-- specifying model name\n","# ckpt_path = current_path + 'ckpt/'\n","# model_name = 'classifier_%s_ma7_pr3.h5' % period\n","\n","model = keras.models.load_model(ckpt_path + model_name)"],"execution_count":9,"outputs":[]},{"cell_type":"code","metadata":{"id":"zhRu2BIK792m","colab":{"base_uri":"https://localhost:8080/","height":626},"executionInfo":{"status":"error","timestamp":1618538422329,"user_tz":-540,"elapsed":16764,"user":{"displayName":"7th June","photoUrl":"","userId":"08178289703395036410"}},"outputId":"b3c52310-dd57-4f56-c53d-404ad359be32"},"source":["test_result = model.predict(x_test)\n","# test_result = model.predict(test_set)\n","\n","print('test_result.shape :', test_result.shape)\n","print('pr_val.shape :', pr_val.shape)\n","\n","y_score = test_result[:, [1]]\n","print('y_test[:5] :', y_test.reshape(-1,)[:5])\n","# print('np.unique(y_test) :', np.unique(y_test, return_counts=True))\n","print('y_score[:5] :', y_score[:5])\n","# print('np.unique(y_score) :', np.unique(y_score, return_counts=True))\n","\n","print('y_test.shape :', y_test.shape)\n","print('y_score.shape :', y_score.shape)\n","\n","print('len(y_test) :', len(y_test))\n","\n","#     precision recall curve   #\n","precision, recall, threshold = precision_recall_curve(y_test, y_score)\n","precision, recall = precision[:-1], recall[:-1]\n","\n","plt.plot(threshold, precision, label='precision')\n","plt.plot(threshold, recall, label='recall')\n","plt.legend()\n","plt.title('precision recall')\n","plt.show()\n","# print(y_pred)\n","\n","# thresh = 0.6\n","# threshold = [thresh]\n","print('threshold :', threshold)\n","break\n","\n","acc_pr_bythr = []\n","for thresh in threshold:\n","\n","  y_pred = np.where(y_score[:, -1] > thresh, 1, 0)\n","  print('y_pred.shape :', y_pred.shape)\n","  # print('y_pred :', y_pred)\n","\n","  #     compare precision     #\n","\n","  print('thresh :', thresh)\n","  print('precision :', precision_score(y_test, y_pred))\n","  print('recall :', recall_score(y_test, y_pred))\n","  print()\n","\n","  print('np.isnan(np.sum(x_test)) :', np.isnan(np.sum(x_test)))\n","  print('np.isnan(np.sum(y_test)) :', np.isnan(np.sum(y_test)))\n","\n","  # plot_confusion_matrix(best_model, x_test, y_test, normalize=None)\n","  # plt.show()  \n","  print()\n","\n","  #     check win-ratio improvement     #\n","  cmat = confusion_matrix(y_test, y_pred)\n","  # print(cmat)\n","  # print(np.sum(cmat, axis=1))\n","\n","  test_size = len(y_test)\n","  test_pr_list = pr_test\n","  print('origin ac_pr :', np.cumprod(test_pr_list)[-1])\n","\n","  org_wr = np.sum(cmat, axis=1)[-1] / sum(np.sum(cmat, axis=1))\n","  ml_wr = cmat[1][1] / np.sum(cmat, axis=0)[-1]\n","  print('win ratio improvement %.2f --> %.2f' % (org_wr, ml_wr))\n","\n","  # print('pr_test.shape :', pr_test.shape)\n","\n","  # print(y_pred)\n","  # print(test_pr_list)\n","  pred_pr_list = np.where(y_pred == 1, test_pr_list.reshape(-1, ), 1.0)\n","  # print('pred_pr_list.shape :', pred_pr_list.shape)\n","\n","  if np.cumprod(test_pr_list)[-1] < np.cumprod(pred_pr_list)[-1]:\n","    print('accum_pr increased ! : %.3f --> %.3f' % (np.cumprod(test_pr_list)[-1], np.cumprod(pred_pr_list)[-1]))\n","    print('thresh :', thresh)\n","    \n","  # if len(threshold) == 1:\n","    plt.figure(figsize=(10, 5))\n","    plt.subplot(121)\n","    plt.plot(np.cumprod(test_pr_list))\n","    plt.title('%.3f' % (np.cumprod(test_pr_list)[-1]))\n","  # plt.show()\n","\n","    plt.subplot(122)\n","    plt.plot(np.cumprod(pred_pr_list))\n","    plt.title('%.3f' % (np.cumprod(pred_pr_list)[-1]))\n","    plt.show()\n","\n","\n","  acc_pr_bythr.append(np.cumprod(pred_pr_list)[-1])\n","\n","print('acc_pr_bythr :', acc_pr_bythr)\n","\n","plt.figure(figsize=(10, 5))\n","plt.subplot(121)\n","plt.plot(threshold, precision, label='precision')\n","plt.plot(threshold, recall, label='recall')\n","plt.legend()\n","plt.title('precision recall')\n","# plt.show()\n","plt.subplot(122)\n","plt.plot(threshold, acc_pr_bythr)\n","plt.axhline(np.cumprod(test_pr_list)[-1], linestyle='--', color='r')\n","plt.axvline(threshold[np.argmax(acc_pr_bythr)], linestyle='--', color='b')\n","plt.title('best thr : %.4f' % threshold[np.argmax(acc_pr_bythr)])\n","plt.show()"],"execution_count":10,"outputs":[{"output_type":"stream","text":["test_result.shape : (63354, 2)\n","pr_val.shape : (63354, 1)\n","y_test[:5] : [1 0 1 1 0]\n","y_score[:5] : [[0.94643515]\n"," [0.33013365]\n"," [0.28666568]\n"," [0.11195175]\n"," [0.22927664]]\n","y_test.shape : (63354, 1)\n","y_score.shape : (63354, 1)\n","len(y_test) : 63354\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"stream","text":["threshold : [3.4450607e-06 4.1998760e-06 6.9573111e-06 ... 9.9999380e-01 9.9999893e-01\n"," 9.9999928e-01]\n"],"name":"stdout"},{"output_type":"error","ename":"SyntaxError","evalue":"ignored","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-10-55468d3fb15f>\"\u001b[0;36m, line \u001b[0;32m32\u001b[0m\n\u001b[0;31m    break\u001b[0m\n\u001b[0m         ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m 'break' outside loop\n"]}]},{"cell_type":"markdown","metadata":{"id":"-jo3k5MdhFyg"},"source":["#### **clustering output**"]},{"cell_type":"code","metadata":{"id":"njxxm-TJ-RP-"},"source":["# x_train_for_k = test_result.flatten().reshape(-1, 1)\n","x_train_for_k = test_result\n","print(x_train_for_k[:10])\n","# x_train_for_k = test_result[:, [1]]\n","pr_train = pr_test\n","\n","print('x_train_for_k.shape :', x_train_for_k.shape)\n","print('pr_train.shape :', pr_train.shape)\n","\n","K = range(2, 10)\n","s_dist = []\n","sil = []\n","for k in K:\n","  # if cen_data.shape[0] < k:\n","  #   break\n","\n","  km = KMeans(n_clusters=k)\n","  km = km.fit(x_train_for_k)\n","\n","  labels = km.labels_\n","  # print('len(labels) :', len(labels))\n","  # print('labels[:10] :', labels[:10])\n","  sil.append(silhouette_score(x_train_for_k, labels, metric='euclidean'))\n","\n","  # inertia = km.inertia_\n","  # s_dist.append(inertia)\n","\n","best_k = K[np.argmax(np.array(sil))]\n","\n","plt.figure(figsize=(10, 5))\n","plt.plot(K, sil)\n","plt.axvline(best_k, linestyle='--')\n","# plt.plot(K, s_dist)\n","plt.show()\n","\n","\n","\n","\n","\n","#   with best_k, label 별 pr_list 확인\n","km = KMeans(n_clusters=best_k)\n","km = km.fit(x_train_for_k)\n","\n","labels = km.labels_\n","\n","print(km.score(x_train_for_k))\n","print(len(labels), len(pr_train))\n","\n","\n","\n","\n","\n","#   label 별로 profit 을 저장, 승률을 확인한다\n","label_types = np.unique(labels, return_counts=False)\n","\n","label_pr_dict = {}\n","#   init dict   #\n","for label in label_types:\n","  label_pr_dict[label] = []\n","print(label_pr_dict)\n","# break\n","\n","for i, (label, pr) in enumerate(zip(labels, pr_train)):\n","  label_pr_dict[label].append(pr[0])\n","\n","  \n","# for label in label_types:\n","print(label_pr_dict)\n","\n","\n","\n","\n","\n","def win_ratio(list_x):\n","\n","  win_cnt = np.sum(np.array(list_x) > 1)\n","  return win_cnt / len(list_x)\n","\n","\n","def acc_pr(list_x):\n","\n","  return np.cumprod(np.array(list_x))[-1]\n","\n","\n","for key in label_pr_dict:\n","  \n","  print(key, ':', 'win_ratio : %.2f' % (win_ratio(label_pr_dict[key])), 'acc_pr : %.2f' % (acc_pr(label_pr_dict[key])))\n","\n","\n","\n","\n","\n","#     predict test && test 의 라벨에 따른 win_ratio 확인\n","# test_labels = km.predict(x_test)\n","# # print(test_labels)\n","\n","# label_pr_dict = {}\n","# #   init dict   #\n","# for label in label_types:\n","#   label_pr_dict[label] = []\n","# print(label_pr_dict)\n","# # break\n","\n","# for i, (label, pr) in enumerate(zip(test_labels, pr_test)):\n","#   label_pr_dict[label].append(pr[0])\n","\n","# for key in label_pr_dict:\n","\n","#   print(key, ':', 'win_ratio : %.2f' % (win_ratio(label_pr_dict[key])), 'acc_pr : %.2f' % (acc_pr(label_pr_dict[key])))\n","\n"],"execution_count":null,"outputs":[]}]}